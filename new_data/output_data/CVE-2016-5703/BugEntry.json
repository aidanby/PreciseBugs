{"buggy_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Functions for displaying user preferences pages\n *\n * @package PhpMyAdmin\n */\nuse PMA\\libraries\\Message;\nuse PMA\\libraries\\Util;\n\n/**\n * Defines the central_columns parameters for the current user\n *\n * @return array    the central_columns parameters for the current user\n * @access  public\n */\nfunction PMA_centralColumnsGetParams()\n{\n    static $cfgCentralColumns = null;\n\n    if (null !== $cfgCentralColumns) {\n        return $cfgCentralColumns;\n    }\n\n    $cfgRelation = PMA_getRelationsParam();\n\n    if ($cfgRelation['centralcolumnswork']) {\n        $cfgCentralColumns = array(\n            'user'  => $GLOBALS['cfg']['Server']['user'],\n            'db'    => $cfgRelation['db'],\n            'table' => $cfgRelation['central_columns'],\n        );\n    } else {\n        $cfgCentralColumns = false;\n    }\n\n    return $cfgCentralColumns;\n}\n\n/**\n * get $num columns of given database from central columns list\n * starting at offset $from\n *\n * @param string $db   selected database\n * @param int    $from starting offset of first result\n * @param int    $num  maximum number of results to return\n *\n * @return array list of $num columns present in central columns list\n * starting at offset $from for the given database\n */\nfunction PMA_getColumnsList($db, $from=0, $num=25)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return array();\n    }\n    $pmadb = $cfgCentralColumns['db'];\n    $GLOBALS['dbi']->selectDb($pmadb, $GLOBALS['controllink']);\n    $central_list_table = $cfgCentralColumns['table'];\n    //get current values of $db from central column list\n    if ($num == 0) {\n        $query = 'SELECT * FROM ' . Util::backquote($central_list_table) . ' '\n            . 'WHERE db_name = \\'' . $db . '\\';';\n    } else {\n        $query = 'SELECT * FROM ' . Util::backquote($central_list_table) . ' '\n            . 'WHERE db_name = \\'' . $db . '\\' '\n            . 'LIMIT ' . $from . ', ' . $num . ';';\n    }\n    $has_list = (array) $GLOBALS['dbi']->fetchResult(\n        $query, null, null, $GLOBALS['controllink']\n    );\n    PMA_handleColumnExtra($has_list);\n    return $has_list;\n}\n\n/**\n * get the number of columns present in central list for given db\n *\n * @param string $db current database\n *\n * @return int number of columns in central list of columns for $db\n */\nfunction PMA_getCentralColumnsCount($db)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return 0;\n    }\n    $pmadb = $cfgCentralColumns['db'];\n    $GLOBALS['dbi']->selectDb($pmadb, $GLOBALS['controllink']);\n    $central_list_table = $cfgCentralColumns['table'];\n    $query = 'SELECT count(db_name) FROM ' .\n        Util::backquote($central_list_table) . ' '\n        . 'WHERE db_name = \\'' . $db . '\\';';\n    $res = $GLOBALS['dbi']->fetchResult(\n        $query, null, null, $GLOBALS['controllink']\n    );\n    if (isset($res[0])) {\n        return $res[0];\n    } else {\n        return 0;\n    }\n}\n/**\n * return the existing columns in central list among the given list of columns\n *\n * @param string  $db        the selected database\n * @param string  $cols      comma separated list of given columns\n * @param boolean $allFields set if need all the fields of existing columns,\n * otherwise only column_name is returned\n *\n * @return array list of columns in central columns among given set of columns\n */\nfunction PMA_findExistingColNames($db, $cols, $allFields=false)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return array();\n    }\n    $pmadb = $cfgCentralColumns['db'];\n    $GLOBALS['dbi']->selectDb($pmadb, $GLOBALS['controllink']);\n    $central_list_table = $cfgCentralColumns['table'];\n    if ($allFields) {\n        $query = 'SELECT * FROM ' . Util::backquote($central_list_table) . ' '\n            . 'WHERE db_name = \\'' . $db . '\\' AND col_name IN (' . $cols . ');';\n        $has_list = (array) $GLOBALS['dbi']->fetchResult(\n            $query, null, null, $GLOBALS['controllink']\n        );\n        PMA_handleColumnExtra($has_list);\n    } else {\n        $query = 'SELECT col_name FROM '\n            . Util::backquote($central_list_table) . ' '\n            . 'WHERE db_name = \\'' . $db . '\\' AND col_name IN (' . $cols . ');';\n        $has_list = (array) $GLOBALS['dbi']->fetchResult(\n            $query, null, null, $GLOBALS['controllink']\n        );\n    }\n\n    return $has_list;\n}\n\n/**\n * return error message to be displayed if central columns\n * configuration storage is not completely configured\n *\n * @return Message\n */\nfunction PMA_configErrorMessage()\n{\n    return Message::error(\n        __(\n            'The configuration storage is not ready for the central list'\n            . ' of columns feature.'\n        )\n    );\n}\n\n/**\n * build the insert query for central columns list given PMA storage\n * db, central_columns table, column name and corresponding definition to be added\n *\n * @param string $column             column to add into central list\n * @param array  $def                list of attributes of the column being added\n * @param string $db                 PMA configuration storage database name\n * @param string $central_list_table central columns configuration storage table name\n *\n * @return string query string to insert the given column\n * with definition into central list\n */\nfunction PMA_getInsertQuery($column, $def, $db, $central_list_table)\n{\n    $type = \"\";\n    $length = 0;\n    $attribute = \"\";\n    if (isset($def['Type'])) {\n        $extracted_columnspec = Util::extractColumnSpec($def['Type']);\n        $attribute = trim($extracted_columnspec[ 'attribute']);\n        $type = $extracted_columnspec['type'];\n        $length = $extracted_columnspec['spec_in_brackets'];\n    }\n    if (isset($def['Attribute'])) {\n        $attribute = $def['Attribute'];\n    };\n    $collation = isset($def['Collation'])?$def['Collation']:\"\";\n    $isNull = ($def['Null'] == \"NO\")?0:1;\n    $extra = isset($def['Extra'])?$def['Extra']:\"\";\n    $default = isset($def['Default'])?$def['Default']:\"\";\n    $insQuery = 'INSERT INTO '\n        . Util::backquote($central_list_table) . ' '\n        . 'VALUES ( \\'' . Util::sqlAddSlashes($db) . '\\' ,'\n        . '\\'' . Util::sqlAddSlashes($column) . '\\',\\''\n        . Util::sqlAddSlashes($type) . '\\','\n        . '\\'' . Util::sqlAddSlashes($length) . '\\',\\''\n        . Util::sqlAddSlashes($collation) . '\\','\n        . '\\'' . Util::sqlAddSlashes($isNull) . '\\','\n        . '\\'' . implode(',', array($extra, $attribute))\n        . '\\',\\'' . Util::sqlAddSlashes($default) . '\\');';\n    return $insQuery;\n}\n\n/**\n * If $isTable is true then unique columns from given tables as $field_select\n * are added to central list otherwise the $field_select is considered as\n * list of columns and these columns are added to central list if not already added\n *\n * @param array  $field_select if $isTable is true selected tables list\n * otherwise selected columns list\n * @param bool   $isTable      if passed array is of tables or columns\n * @param string $table        if $isTable is false,\n * then table name to which columns belong\n *\n * @return true|PMA\\libraries\\Message\n */\nfunction PMA_syncUniqueColumns($field_select, $isTable=true, $table=null)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return PMA_configErrorMessage();\n    }\n    $db = $_REQUEST['db'];\n    $pmadb = $cfgCentralColumns['db'];\n    $central_list_table = $cfgCentralColumns['table'];\n    $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n    $existingCols = array();\n    $cols = \"\";\n    $insQuery = array();\n    $fields = array();\n    $message = true;\n    if ($isTable) {\n        foreach ($field_select as $table) {\n            $fields[$table] = (array) $GLOBALS['dbi']->getColumns(\n                $db, $table, null, true, $GLOBALS['userlink']\n            );\n            foreach ($fields[$table] as $field => $def) {\n                $cols .= \"'\" . Util::sqlAddSlashes($field) . \"',\";\n            }\n        }\n\n        $has_list = PMA_findExistingColNames($db, trim($cols, ','));\n        foreach ($field_select as $table) {\n            foreach ($fields[$table] as $field => $def) {\n                if (!in_array($field, $has_list)) {\n                    $has_list[] = $field;\n                    $insQuery[] = PMA_getInsertQuery(\n                        $field, $def, $db, $central_list_table\n                    );\n                } else {\n                    $existingCols[] = \"'\" . $field . \"'\";\n                }\n            }\n        }\n    } else {\n        if ($table === null) {\n            $table = $_REQUEST['table'];\n        }\n        foreach ($field_select as $column) {\n            $cols .= \"'\" . Util::sqlAddSlashes($column) . \"',\";\n        }\n        $has_list = PMA_findExistingColNames($db, trim($cols, ','));\n        foreach ($field_select as $column) {\n            if (!in_array($column, $has_list)) {\n                $has_list[] = $column;\n                $field = (array) $GLOBALS['dbi']->getColumns(\n                    $db, $table, $column,\n                    true, $GLOBALS['userlink']\n                );\n                $insQuery[] = PMA_getInsertQuery(\n                    $column, $field, $db, $central_list_table\n                );\n            } else {\n                $existingCols[] = \"'\" . $column . \"'\";\n            }\n        }\n    }\n    if (! empty($existingCols)) {\n        $existingCols = implode(\",\", array_unique($existingCols));\n        $message = Message::notice(\n            sprintf(\n                __(\n                    'Could not add %1$s as they already exist in central list!'\n                ), htmlspecialchars($existingCols)\n            )\n        );\n        $message->addMessage(\n            Message::notice(\n                \"Please remove them first \"\n                . \"from central list if you want to update above columns\"\n            )\n        );\n    }\n    $GLOBALS['dbi']->selectDb($pmadb, $GLOBALS['controllink']);\n    if (! empty($insQuery)) {\n        foreach ($insQuery as $query) {\n            if (!$GLOBALS['dbi']->tryQuery($query, $GLOBALS['controllink'])) {\n                $message = Message::error(__('Could not add columns!'));\n                $message->addMessage(\n                    Message::rawError(\n                        $GLOBALS['dbi']->getError($GLOBALS['controllink'])\n                    )\n                );\n                break;\n            }\n        }\n    }\n    return $message;\n}\n\n/**\n * if $isTable is true it removes all columns of given tables as $field_select from\n * central columns list otherwise $field_select is columns list and it removes\n * given columns if present in central list\n *\n * @param array $field_select if $isTable selected list of tables otherwise\n * selected list of columns to remove from central list\n * @param bool  $isTable      if passed array is of tables or columns\n *\n * @return true|PMA\\libraries\\Message\n */\nfunction PMA_deleteColumnsFromList($field_select, $isTable=true)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return PMA_configErrorMessage();\n    }\n    $db = $_REQUEST['db'];\n    $pmadb = $cfgCentralColumns['db'];\n    $central_list_table = $cfgCentralColumns['table'];\n    $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n    $message = true;\n    $colNotExist = array();\n    $fields = array();\n    if ($isTable) {\n        $cols = '';\n        foreach ($field_select as $table) {\n            $fields[$table] = (array) $GLOBALS['dbi']->getColumnNames(\n                $db, $table, $GLOBALS['userlink']\n            );\n            foreach ($fields[$table] as $col_select) {\n                $cols .= '\\'' . Util::sqlAddSlashes($col_select) . '\\',';\n            }\n        }\n        $cols = trim($cols, ',');\n        $has_list = PMA_findExistingColNames($db, $cols);\n        foreach ($field_select as $table) {\n            foreach ($fields[$table] as $column) {\n                if (!in_array($column, $has_list)) {\n                    $colNotExist[] = \"'\" . $column . \"'\";\n                }\n            }\n        }\n\n    } else {\n        $cols = '';\n        foreach ($field_select as $col_select) {\n            $cols .= '\\'' . Util::sqlAddSlashes($col_select) . '\\',';\n        }\n        $cols = trim($cols, ',');\n        $has_list = PMA_findExistingColNames($db, $cols);\n        foreach ($field_select as $column) {\n            if (!in_array($column, $has_list)) {\n                $colNotExist[] = \"'\" . $column . \"'\";\n            }\n        }\n    }\n    if (!empty($colNotExist)) {\n        $colNotExist = implode(\",\", array_unique($colNotExist));\n        $message = Message::notice(\n            sprintf(\n                __(\n                    'Couldn\\'t remove Column(s) %1$s '\n                    . 'as they don\\'t exist in central columns list!'\n                ), htmlspecialchars($colNotExist)\n            )\n        );\n    }\n    $GLOBALS['dbi']->selectDb($pmadb, $GLOBALS['controllink']);\n\n    $query = 'DELETE FROM ' . Util::backquote($central_list_table) . ' '\n        . 'WHERE db_name = \\'' . $db . '\\' AND col_name IN (' . $cols . ');';\n\n    if (!$GLOBALS['dbi']->tryQuery($query, $GLOBALS['controllink'])) {\n        $message = Message::error(__('Could not remove columns!'));\n        $message->addMessage('<br />' . htmlspecialchars($cols) . '<br />');\n        $message->addMessage(\n            Message::rawError(\n                $GLOBALS['dbi']->getError($GLOBALS['controllink'])\n            )\n        );\n    }\n    return $message;\n}\n\n/**\n * make the columns of given tables consistent with central list of columns.\n * Updates only those columns which are not being referenced.\n *\n * @param string $db              current database\n * @param array  $selected_tables list of selected tables.\n *\n * @return true|PMA\\libraries\\Message\n */\nfunction PMA_makeConsistentWithList($db, $selected_tables)\n{\n    $message = true;\n    foreach ($selected_tables as $table) {\n        $query = 'ALTER TABLE ' . Util::backquote($table);\n        $has_list = PMA_getCentralColumnsFromTable($db, $table, true);\n        $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n        foreach ($has_list as $column) {\n            $column_status = PMA_checkChildForeignReferences(\n                $db, $table, $column['col_name']\n            );\n            //column definition can only be changed if\n            //it is not referenced by another column\n            if ($column_status['isEditable']) {\n                $query .= ' MODIFY ' . Util::backquote($column['col_name']) . ' '\n                    . Util::sqlAddSlashes($column['col_type']);\n                if ($column['col_length']) {\n                    $query .= '(' . $column['col_length'] . ')';\n                }\n\n                $query .= ' ' . $column['col_attribute'];\n                if ($column['col_isNull']) {\n                    $query .= ' NULL';\n                } else {\n                    $query .= ' NOT NULL';\n                }\n\n                $query .= ' ' . $column['col_extra'];\n                if ($column['col_default']) {\n                    if ($column['col_default'] != 'CURRENT_TIMESTAMP') {\n                        $query .= ' DEFAULT \\'' . Util::sqlAddSlashes(\n                            $column['col_default']\n                        ) . '\\'';\n                    } else {\n                        $query .= ' DEFAULT ' . Util::sqlAddSlashes(\n                            $column['col_default']\n                        );\n                    }\n                }\n                $query .= ',';\n            }\n        }\n        $query = trim($query, \" ,\") . \";\";\n        if (!$GLOBALS['dbi']->tryQuery($query, $GLOBALS['userlink'])) {\n            if ($message === true) {\n                $message = Message::error(\n                    $GLOBALS['dbi']->getError($GLOBALS['userlink'])\n                );\n            } else {\n                $message->addMessage('<br />');\n                $message->addMessage(\n                    $GLOBALS['dbi']->getError($GLOBALS['userlink'])\n                );\n            }\n        }\n    }\n    return $message;\n}\n\n/**\n * return the columns present in central list of columns for a given\n * table of a given database\n *\n * @param string  $db        given database\n * @param string  $table     given table\n * @param boolean $allFields set if need all the fields of existing columns,\n * otherwise only column_name is returned\n *\n * @return array columns present in central list from given table of given db.\n */\nfunction PMA_getCentralColumnsFromTable($db, $table, $allFields=false)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return array();\n    }\n    $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n    $fields = (array) $GLOBALS['dbi']->getColumnNames(\n        $db, $table, $GLOBALS['userlink']\n    );\n    $cols = '';\n    foreach ($fields as $col_select) {\n        $cols .= '\\'' . Util::sqlAddSlashes($col_select) . '\\',';\n    }\n    $cols = trim($cols, ',');\n    $has_list = PMA_findExistingColNames($db, $cols, $allFields);\n    if (! empty($has_list)) {\n        return (array)$has_list;\n    } else {\n        return array();\n    }\n}\n\n/**\n * update a column in central columns list if a edit is requested\n *\n * @param string $db            current database\n * @param string $orig_col_name original column name before edit\n * @param string $col_name      new column name\n * @param string $col_type      new column type\n * @param string $col_attribute new column attribute\n * @param string $col_length    new column length\n * @param int    $col_isNull    value 1 if new column isNull is true, 0 otherwise\n * @param string $collation     new column collation\n * @param string $col_extra     new column extra property\n * @param string $col_default   new column default value\n *\n * @return true|PMA\\libraries\\Message\n */\nfunction PMA_updateOneColumn($db, $orig_col_name, $col_name, $col_type,\n    $col_attribute,$col_length, $col_isNull, $collation, $col_extra, $col_default\n) {\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return PMA_configErrorMessage();\n    }\n    $centralTable = $cfgCentralColumns['table'];\n    $GLOBALS['dbi']->selectDb($cfgCentralColumns['db'], $GLOBALS['controllink']);\n    if ($orig_col_name == \"\") {\n        $def = array();\n        $def['Type'] = $col_type;\n        if ($col_length) {\n            $def['Type'] .= '(' . $col_length . ')';\n        }\n        $def['Collation'] = $collation;\n        $def['Null'] = $col_isNull?__('YES'):__('NO');\n        $def['Extra'] = $col_extra;\n        $def['Attribute'] = $col_attribute;\n        $def['Default'] = $col_default;\n        $query = PMA_getInsertQuery($col_name, $def, $db, $centralTable);\n    } else {\n        $query = 'UPDATE ' . Util::backquote($centralTable)\n            . ' SET col_type = \\'' . Util::sqlAddSlashes($col_type) . '\\''\n            . ', col_name = \\'' . Util::sqlAddSlashes($col_name) . '\\''\n            . ', col_length = \\'' . Util::sqlAddSlashes($col_length) . '\\''\n            . ', col_isNull = ' . $col_isNull\n            . ', col_collation = \\'' . Util::sqlAddSlashes($collation) . '\\''\n            . ', col_extra = \\''\n            . implode(',', array($col_extra, $col_attribute)) . '\\''\n            . ', col_default = \\'' . Util::sqlAddSlashes($col_default) . '\\''\n            . ' WHERE db_name = \\'' . Util::sqlAddSlashes($db) . '\\' '\n            . 'AND col_name = \\'' . Util::sqlAddSlashes($orig_col_name)\n            . '\\'';\n    }\n    if (!$GLOBALS['dbi']->tryQuery($query, $GLOBALS['controllink'])) {\n        return Message::error(\n            $GLOBALS['dbi']->getError($GLOBALS['controllink'])\n        );\n    }\n    return true;\n}\n\n/**\n * Update Multiple column in central columns list if a chnage is requested\n *\n * @return true|PMA\\libraries\\Message\n */\nfunction PMA_updateMultipleColumn()\n{\n    $db = $_POST['db'];\n    $col_name = $_POST['field_name'];\n    $orig_col_name = $_POST['orig_col_name'];\n    $col_default = $_POST['field_default_type'];\n    $col_length = $_POST['field_length'];\n    $col_attribute = $_POST['field_attribute'];\n    $col_type = $_POST['field_type'];\n    $collation = $_POST['field_collation'];\n    $col_isNull = array();\n    $col_extra = array();\n    $num_central_fields = count($orig_col_name);\n    for ($i = 0; $i < $num_central_fields ; $i++) {\n        $col_isNull[$i] = isset($_POST['field_null'][$i]) ? 1 : 0;\n        $col_extra[$i] = isset($_POST['col_extra'][$i])\n            ? $_POST['col_extra'][$i] : '';\n\n        if ($col_default[$i] == 'NONE') {\n            $col_default[$i] = \"\";\n        } else if ($col_default[$i] == 'USER_DEFINED') {\n            $col_default[$i] = $_POST['field_default_value'][$i];\n        }\n\n        $message = PMA_updateOneColumn(\n            $db, $orig_col_name[$i], $col_name[$i], $col_type[$i],\n            $col_attribute[$i], $col_length[$i], $col_isNull[$i], $collation[$i],\n            $col_extra[$i], $col_default[$i]\n        );\n        if (!is_bool($message)) {\n            return $message;\n        }\n    }\n    return true;\n}\n\n/**\n * get the html for table navigation in Central columns page\n *\n * @param int    $total_rows total number of rows in complete result set\n * @param int    $pos        offset of first result with complete result set\n * @param string $db         current database\n *\n * @return string html for table navigation in Central columns page\n */\nfunction PMA_getHTMLforTableNavigation($total_rows, $pos, $db)\n{\n    $max_rows = $GLOBALS['cfg']['MaxRows'];\n    $pageNow = ($pos / $max_rows) + 1;\n    $nbTotalPage = ceil($total_rows / $max_rows);\n    $table_navigation_html = '<table style=\"display:inline-block;max-width:49%\" '\n        . 'class=\"navigation nospacing nopadding\">'\n        . '<tr>'\n        . '<td class=\"navigation_separator\"></td>';\n    if ($pos - $max_rows >= 0) {\n        $table_navigation_html .= '<td>'\n            . '<form action=\"db_central_columns.php\" method=\"post\">'\n            . PMA_URL_getHiddenInputs(\n                $db\n            )\n            . '<input type=\"hidden\" name=\"pos\" value=\"' . ($pos - $max_rows) . '\" />'\n            . '<input type=\"hidden\" name=\"total_rows\" value=\"' . $total_rows . '\"/>'\n            . '<input type=\"submit\" name=\"navig\"'\n            . ' class=\"ajax\" '\n            . 'value=\"&lt\" />'\n            . '</form>'\n            . '</td>';\n    }\n    if ($nbTotalPage > 1) {\n        $table_navigation_html .= '<td>';\n        $table_navigation_html .= '<form action=\"db_central_columns.php'\n            . '\" method=\"post\">'\n            . PMA_URL_getHiddenInputs(\n                $db\n            )\n            . '<input type=\"hidden\" name=\"total_rows\" value=\"' . $total_rows . '\"/>';\n        $table_navigation_html .= Util::pageselector(\n            'pos', $max_rows, $pageNow, $nbTotalPage\n        );\n        $table_navigation_html .= '</form>'\n            . '</td>';\n    }\n    if ($pos + $max_rows < $total_rows) {\n        $table_navigation_html .= '<td>'\n            . '<form action=\"db_central_columns.php\" method=\"post\">'\n            . PMA_URL_getHiddenInputs(\n                $db\n            )\n            . '<input type=\"hidden\" name=\"pos\" value=\"' . ($pos + $max_rows) . '\" />'\n            . '<input type=\"hidden\" name=\"total_rows\" value=\"' . $total_rows . '\"/>'\n            . '<input type=\"submit\" name=\"navig\"'\n            . ' class=\"ajax\" '\n            . 'value=\"&gt\" />'\n            . '</form>'\n            . '</td>';\n    }\n    $table_navigation_html .= '</form>'\n        . '</td>'\n        . '<td class=\"navigation_separator\"></td>'\n        . '<td>'\n        . '<span>' . __('Filter rows') . ':</span>'\n        . '<input type=\"text\" class=\"filter_rows\" placeholder=\"'\n        . __('Search this table') . '\">'\n        . '</td>'\n        . '<td class=\"navigation_separator\"></td>'\n        . '</tr>'\n        . '</table>';\n\n    return $table_navigation_html;\n}\n\n/**\n * function generate and return the table header for central columns page\n *\n * @param string  $class       styling class of 'th' elements\n * @param string  $title       title of the 'th' elements\n * @param integer $actionCount number of actions\n *\n * @return string html for table header in central columns view/edit page\n */\nfunction PMA_getCentralColumnsTableHeader($class='', $title='', $actionCount=0)\n{\n    $action = '';\n    if ($actionCount > 0) {\n        $action .= '<th class=\"column_action\" colspan=\"' . $actionCount . '\">'\n            . __('Action') . '</th>';\n    }\n    $tableheader = '<thead>';\n    $tableheader .= '<tr>'\n        . '<th class=\"' . $class . '\"></th>'\n        . '<th class=\"\" style=\"display:none\"></th>'\n        . $action\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"name\">'\n        . __('Name') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"type\">'\n        . __('Type') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"length\">'\n        . __('Length/Values') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"default\">'\n        . __('Default') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"collation\"'\n        . '>' . __('Collation') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title\n        . '\" data-column=\"attribute\">'\n        . __('Attribute') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"isnull\">'\n        . __('Null') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"extra\">'\n        . __('A_I') . '<div class=\"sorticon\"></div></th>'\n        . '</tr>';\n    $tableheader .= '</thead>';\n    return $tableheader;\n}\n\n/**\n * Function generate and return the table header for\n * multiple edit central columns page\n *\n * @param array $header_cells headers list\n *\n * @return string html for table header in central columns multi edit page\n */\nfunction PMA_getCentralColumnsEditTableHeader($header_cells)\n{\n    $html = '<table id=\"table_columns\" class=\"noclick\"'\n        . ' style=\"min-width: 100%;\">';\n    $html .= '<caption class=\"tblHeaders\">' . __('Structure');\n    $html .= '<tr>';\n    foreach ($header_cells as $header_val) {\n        $html .= '<th>' . $header_val . '</th>';\n    }\n    $html .= '</tr>';\n    return $html;\n}\n\n/**\n * build the dropdown select html for tables of given database\n *\n * @param string $db current database\n *\n * @return string html dropdown for selecting table\n */\nfunction PMA_getHTMLforTableDropdown($db)\n{\n    $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n    $tables = $GLOBALS['dbi']->getTables($db, $GLOBALS['userlink']);\n    $selectHtml = '<select name=\"table-select\" id=\"table-select\">'\n        . '<option value=\"\" disabled=\"disabled\" selected=\"selected\">'\n        . __('Select a table') . '</option>';\n    foreach ($tables as $table) {\n        $selectHtml .= '<option value=\"' . htmlspecialchars($table) . '\">'\n            . htmlspecialchars($table) . '</option>';\n    }\n    $selectHtml .= '</select>';\n    return $selectHtml;\n}\n\n/**\n * build dropdown select html to select column in selected table,\n * include only columns which are not already in central list\n *\n * @param string $db           current database to which selected table belongs\n * @param string $selected_tbl selected table\n *\n * @return string html to select column\n */\nfunction PMA_getHTMLforColumnDropdown($db, $selected_tbl)\n{\n    $existing_cols = PMA_getCentralColumnsFromTable($db, $selected_tbl);\n    $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n    $columns = (array) $GLOBALS['dbi']->getColumnNames(\n        $db, $selected_tbl, $GLOBALS['userlink']\n    );\n    $selectColHtml = \"\";\n    foreach ($columns as $column) {\n        if (!in_array($column, $existing_cols)) {\n            $selectColHtml .= '<option value=\"' . htmlspecialchars($column) . '\">'\n                . htmlspecialchars($column)\n                . '</option>';\n        }\n    }\n    return $selectColHtml;\n}\n\n/**\n * html to display the form that let user to add a column on Central columns page\n *\n * @param int    $total_rows total number of rows in complete result set\n * @param int    $pos        offset of first result with complete result set\n * @param string $db         current database\n *\n * @return string html to add a column in the central list\n */\nfunction PMA_getHTMLforAddCentralColumn($total_rows, $pos, $db)\n{\n    $columnAdd = '<table style=\"display:inline-block;margin-left:1%;max-width:50%\" '\n        . 'class=\"navigation nospacing nopadding\">'\n        . '<tr>'\n        . '<td class=\"navigation_separator\"></td>'\n        . '<td style=\"padding:1.5% 0em\">'\n        . Util::getIcon(\n            'centralColumns_add.png',\n            __('Add column')\n        )\n        . '<form id=\"add_column\" action=\"db_central_columns.php\" method=\"post\">'\n        . PMA_URL_getHiddenInputs(\n            $db\n        )\n        . '<input type=\"hidden\" name=\"add_column\" value=\"add\">'\n        . '<input type=\"hidden\" name=\"pos\" value=\"' . $pos . '\" />'\n        . '<input type=\"hidden\" name=\"total_rows\" value=\"' . $total_rows . '\"/>'\n        . PMA_getHTMLforTableDropdown($db)\n        . '<select name=\"column-select\" id=\"column-select\">'\n        . '<option value=\"\" selected=\"selected\">'\n        . __('Select a column.') . '</option>'\n        . '</select></form>'\n        . '</td>'\n        . '<td class=\"navigation_separator\"></td>'\n        . '</tr>'\n        . '</table>';\n\n    return $columnAdd;\n}\n\n/**\n * build html for a row in central columns table\n *\n * @param array   $row     array contains complete information of\n * a particular row of central list table\n * @param boolean $odd_row set true if the row is at odd number position\n * @param int     $row_num position the row in the table\n * @param string  $db      current database\n *\n * @return string html of a particular row in the central columns table.\n */\nfunction PMA_getHTMLforCentralColumnsTableRow($row, $odd_row, $row_num, $db)\n{\n    $tableHtml = '<tr data-rownum=\"' . $row_num . '\" id=\"f_' . $row_num . '\" '\n        . 'class=\"' . ($odd_row ? 'odd' : 'even') . '\">'\n        . PMA_URL_getHiddenInputs(\n            $db\n        )\n        . '<input type=\"hidden\" name=\"edit_save\" value=\"save\">'\n        . '<td class=\"nowrap\">'\n        . '<input type=\"checkbox\" class=\"checkall\" name=\"selected_fld[]\" '\n        . 'value=\"' . htmlspecialchars($row['col_name']) . '\" '\n        . 'id=\"checkbox_row_' . $row_num . '\"/>'\n        . '</td>'\n        . '<td id=\"edit_' . $row_num . '\" class=\"edit center\">'\n        . '<a href=\"#\">' . Util::getIcon('b_edit.png', __('Edit')) . '</a></td>'\n        . '<td class=\"del_row\" data-rownum = \"' . $row_num . '\">'\n        . '<a hrf=\"#\">' . Util::getIcon('b_drop.png', __('Delete')) . '</a>'\n        . '<input type=\"submit\" data-rownum = \"' . $row_num . '\"'\n        . ' class=\"edit_cancel_form\" value=\"Cancel\"></td>'\n        . '<td id=\"save_' . $row_num . '\" style=\"display:none\">'\n        . '<input type=\"submit\" data-rownum = \"' . $row_num . '\"'\n        . ' class=\"edit_save_form\" value=\"Save\"></td>';\n\n    $tableHtml .=\n        '<td name=\"col_name\" class=\"nowrap\">'\n        . '<span>' . htmlspecialchars($row['col_name']) . '</span>'\n        . '<input name=\"orig_col_name\" type=\"hidden\" '\n        . 'value=\"' . htmlspecialchars($row['col_name']) . '\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_name')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 0,\n                'ci_offset' => 0,\n                'columnMeta' => array(\n                    'Field'=>$row['col_name']\n                ),\n                'cfgRelation' => array(\n                    'centralcolumnswork' => false\n                )\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td name = \"col_type\" class=\"nowrap\"><span>'\n        . htmlspecialchars($row['col_type']) . '</span>'\n        . PMA\\libraries\\Template::get('columns_definitions/column_type')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 1,\n                'ci_offset' => 0,\n                'type_upper' => mb_strtoupper($row['col_type']),\n                'columnMeta' => array()\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_length\">'\n        . '<span>' . ($row['col_length']?htmlspecialchars($row['col_length']):\"\")\n        . '</span>'\n        . PMA\\libraries\\Template::get('columns_definitions/column_length')->render(\n            array(\n                'columnNumber' => $row_num,\n                'ci' => 2,\n                'ci_offset' => 0,\n                'length_values_input_size' => 8,\n                'length_to_display' => $row['col_length']\n            )\n        )\n        . '</td>';\n\n    $meta = array();\n    if (!isset($row['col_default']) || $row['col_default'] == '') {\n        $meta['DefaultType'] = 'NONE';\n    } else {\n        if ($row['col_default'] == 'CURRENT_TIMESTAMP'\n            || $row['col_default'] == 'NULL'\n        ) {\n            $meta['DefaultType'] = $row['col_default'];\n        } else {\n            $meta['DefaultType'] = 'USER_DEFINED';\n            $meta['DefaultValue'] = $row['col_default'];\n        }\n    }\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_default\"><span>' . (isset($row['col_default'])\n            ? htmlspecialchars($row['col_default']) : 'None')\n        . '</span>'\n        . PMA\\libraries\\Template::get('columns_definitions/column_default')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 3,\n                'ci_offset' => 0,\n                'type_upper' => mb_strtoupper($row['col_type']),\n                'columnMeta' => $meta\n                )\n            )\n        . '</td>';\n\n    $tableHtml .=\n        '<td name=\"collation\" class=\"nowrap\">'\n        . '<span>' . htmlspecialchars($row['col_collation']) . '</span>'\n        . PMA_generateCharsetDropdownBox(\n            PMA_CSDROPDOWN_COLLATION, 'field_collation[' . $row_num . ']',\n            'field_' . $row_num . '_4', $row['col_collation'], false\n        )\n        . '</td>';\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_attribute\">'\n        . '<span>' .\n        ($row['col_attribute']\n            ? htmlspecialchars($row['col_attribute']) : \"\" )\n        . '</span>'\n        . PMA\\libraries\\Template::get('columns_definitions/column_attribute')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 5,\n                'ci_offset' => 0,\n                'extracted_columnspec' => array(),\n                'columnMeta' => $row['col_attribute'],\n                'submit_attribute' => false,\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_isNull\">'\n        . '<span>' . ($row['col_isNull'] ? __('Yes') : __('No'))\n        . '</span>'\n        . PMA\\libraries\\Template::get('columns_definitions/column_null')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 6,\n                'ci_offset' => 0,\n                'columnMeta' => array(\n                    'Null' => $row['col_isNull']\n                )\n                )\n            )\n        . '</td>';\n\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_extra\"><span>'\n        . htmlspecialchars($row['col_extra']) . '</span>'\n        . PMA\\libraries\\Template::get('columns_definitions/column_extra')->render(\n            array(\n                'columnNumber' => $row_num,\n                'ci' => 7,\n                'ci_offset' => 0,\n                'columnMeta' => array('Extra'=>$row['col_extra'])\n            )\n        )\n        . '</td>';\n\n    $tableHtml .= '</tr>';\n\n    return $tableHtml;\n}\n\n/**\n * build html for editing a row in central columns table\n *\n * @param array   $row     array contains complete information of\n * a particular row of central list table\n * @param boolean $odd_row set true if the row is at odd number position\n * @param int     $row_num position the row in the table\n *\n * @return string html of a particular row in the central columns table.\n */\nfunction PMA_getHTMLforCentralColumnsEditTableRow($row, $odd_row, $row_num)\n{\n    $tableHtml = '<tr class=\"' . ($odd_row ? 'odd' : 'even') . '\">'\n        . '<input name=\"orig_col_name[' . $row_num . ']\" type=\"hidden\" '\n        . 'value=\"' . htmlspecialchars($row['col_name']) . '\">'\n        . '<td name=\"col_name\" class=\"nowrap\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_name')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 0,\n                'ci_offset' => 0,\n                'columnMeta' => array(\n                    'Field' => $row['col_name']\n                ),\n                'cfgRelation' => array(\n                    'centralcolumnswork' => false\n                )\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td name = \"col_type\" class=\"nowrap\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_type')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 1,\n                'ci_offset' => 0,\n                'type_upper' => mb_strtoupper($row['col_type']),\n                'columnMeta' => array()\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_length\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_length')->render(\n            array(\n                'columnNumber' => $row_num,\n                'ci' => 2,\n                'ci_offset' => 0,\n                'length_values_input_size' => 8,\n                'length_to_display' => $row['col_length']\n            )\n        )\n        . '</td>';\n    $meta = array();\n    if (!isset($row['col_default']) || $row['col_default'] == '') {\n        $meta['DefaultType'] = 'NONE';\n    } else {\n        if ($row['col_default'] == 'CURRENT_TIMESTAMP'\n            || $row['col_default'] == 'NULL'\n        ) {\n            $meta['DefaultType'] = $row['col_default'];\n        } else {\n            $meta['DefaultType'] = 'USER_DEFINED';\n            $meta['DefaultValue'] = $row['col_default'];\n        }\n    }\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_default\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_default')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 3,\n                'ci_offset' => 0,\n                'type_upper' => mb_strtoupper($row['col_default']),\n                'columnMeta' => $meta\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td name=\"collation\" class=\"nowrap\">'\n        . PMA_generateCharsetDropdownBox(\n            PMA_CSDROPDOWN_COLLATION, 'field_collation[' . $row_num . ']',\n            'field_' . $row_num . '_4', $row['col_collation'], false\n        )\n        . '</td>';\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_attribute\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_attribute')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 5,\n                'ci_offset' => 0,\n                'extracted_columnspec' => array(\n                    'attribute' => $row['col_attribute']\n                ),\n                'columnMeta' => array(),\n                'submit_attribute' => false,\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_isNull\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_null')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 6,\n                'ci_offset' => 0,\n                'columnMeta' => array(\n                    'Null' => $row['col_isNull']\n                )\n                )\n            )\n        . '</td>';\n\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_extra\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_extra')->render(\n            array(\n                'columnNumber' => $row_num,\n                'ci' => 7,\n                'ci_offset' => 0,\n                'columnMeta' => array('Extra' => $row['col_extra'])\n            )\n        )\n        . '</td>';\n    $tableHtml .= '</tr>';\n    return $tableHtml;\n}\n\n/**\n * get the list of columns in given database excluding\n * the columns present in current table\n *\n * @param string $db    selected database\n * @param string $table current table name\n *\n * @return string encoded list of columns present in central list for the given\n *                database\n */\nfunction PMA_getCentralColumnsListRaw($db, $table)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return json_encode(array());\n    }\n    $centralTable = $cfgCentralColumns['table'];\n    if (empty($table) || $table == '') {\n        $query = 'SELECT * FROM ' . Util::backquote($centralTable) . ' '\n            . 'WHERE db_name = \\'' . $db . '\\';';\n    } else {\n        $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n        $columns = (array) $GLOBALS['dbi']->getColumnNames(\n            $db, $table, $GLOBALS['userlink']\n        );\n        $cols = '';\n        foreach ($columns as $col_select) {\n            $cols .= '\\'' . Util::sqlAddSlashes($col_select) . '\\',';\n        }\n        $cols = trim($cols, ',');\n        $query = 'SELECT * FROM ' . Util::backquote($centralTable) . ' '\n            . 'WHERE db_name = \\'' . $db . '\\'';\n        if ($cols) {\n            $query .= ' AND col_name NOT IN (' . $cols . ')';\n        }\n        $query .= ';';\n    }\n    $GLOBALS['dbi']->selectDb($cfgCentralColumns['db'], $GLOBALS['controllink']);\n    $columns_list = (array)$GLOBALS['dbi']->fetchResult(\n        $query, null, null, $GLOBALS['controllink']\n    );\n    PMA_handleColumnExtra($columns_list);\n    return json_encode($columns_list);\n}\n\n/**\n * Get HTML for \"check all\" check box with \"with selected\" dropdown\n *\n * @param string $pmaThemeImage pma theme image url\n * @param string $text_dir      url for text directory\n *\n * @return string $html_output\n */\nfunction PMA_getCentralColumnsTableFooter($pmaThemeImage, $text_dir)\n{\n    $html_output = Util::getWithSelected(\n        $pmaThemeImage, $text_dir, \"tableslistcontainer\"\n    );\n    $html_output .= Util::getButtonOrImage(\n        'edit_central_columns', 'mult_submit change_central_columns',\n        'submit_mult_change', __('Edit'), 'b_edit.png', 'edit central columns'\n    );\n    $html_output .= Util::getButtonOrImage(\n        'delete_central_columns', 'mult_submit',\n        'submit_mult_central_columns_remove',\n        __('Delete'), 'b_drop.png',\n        'remove_from_central_columns'\n    );\n    return $html_output;\n}\n\n/**\n * function generate and return the table footer for\n * multiple edit central columns page\n *\n * @return string html for table footer in central columns multi edit page\n */\nfunction PMA_getCentralColumnsEditTableFooter()\n{\n    $html_output = '<fieldset class=\"tblFooters\">'\n        . '<input type=\"submit\" '\n        . 'name=\"save_multi_central_column_edit\" value=\"' . __('Save') . '\" />'\n        . '</fieldset>';\n    return $html_output;\n}\n/**\n * Column `col_extra` is used to store both extra and attributes for a column.\n * This method separates them.\n *\n * @param array &$columns_list columns list\n *\n * @return void\n */\nfunction PMA_handleColumnExtra(&$columns_list)\n{\n    foreach ($columns_list as &$row) {\n        $vals = explode(',', $row['col_extra']);\n\n        if (in_array('BINARY', $vals)) {\n            $row['col_attribute'] = 'BINARY';\n        } elseif (in_array('UNSIGNED', $vals)) {\n            $row['col_attribute'] = 'UNSIGNED';\n        } elseif (in_array('UNSIGNED ZEROFILL', $vals)) {\n            $row['col_attribute'] = 'UNSIGNED ZEROFILL';\n        } elseif (in_array('on update CURRENT_TIMESTAMP', $vals)) {\n            $row['col_attribute'] = 'on update CURRENT_TIMESTAMP';\n        } else {\n            $row['col_attribute'] = '';\n        }\n\n        if (in_array('auto_increment', $vals)) {\n            $row['col_extra'] = 'auto_increment';\n        } else {\n            $row['col_extra'] = '';\n        }\n    }\n}\n\n/**\n * build html for adding a new user defined column to central list\n *\n * @param string $db current database\n *\n * @return string html of the form to let user add a new user defined column to the\n *                list\n */\nfunction PMA_getHTMLforAddNewColumn($db)\n{\n    $addNewColumn = '<div id=\"add_col_div\"><a href=\"#\">'\n        . '<span>+</span> ' . __('Add new column') . '</a>'\n        . '<form id=\"add_new\" style=\"min-width:100%;display:none\" '\n        . 'method=\"post\" action=\"db_central_columns.php\">'\n        . PMA_URL_getHiddenInputs(\n            $db\n        )\n        . '<input type=\"hidden\" name=\"add_new_column\" value=\"add_new_column\">'\n        . '<table>';\n    $addNewColumn .= PMA_getCentralColumnsTableHeader();\n    $addNewColumn .= '<tr>'\n        . '<td></td>'\n        . '<td name=\"col_name\" class=\"nowrap\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_name')\n            ->render(\n                array(\n                'columnNumber' => 0,\n                'ci' => 0,\n                'ci_offset' => 0,\n                'columnMeta' => array(),\n                'cfgRelation' => array(\n                    'centralcolumnswork' => false\n                )\n                )\n            )\n        . '</td>'\n        . '<td name = \"col_type\" class=\"nowrap\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_type')\n            ->render(\n                array(\n                'columnNumber' => 0,\n                'ci' => 1,\n                'ci_offset' => 0,\n                'type_upper' => '',\n                'columnMeta' => array()\n                )\n            )\n        . '</td>'\n        . '<td class=\"nowrap\" name=\"col_length\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_length')->render(\n            array(\n                'columnNumber' => 0,\n                'ci' => 2,\n                'ci_offset' => 0,\n                'length_values_input_size' => 8,\n                'length_to_display' => ''\n            )\n        )\n        . '</td>'\n        . '<td class=\"nowrap\" name=\"col_default\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_default')\n            ->render(\n                array(\n                'columnNumber' => 0,\n                'ci' => 3,\n                'ci_offset' => 0,\n                'type_upper' => '',\n                'columnMeta' => array()\n                )\n            )\n        . '</td>'\n        . '<td name=\"collation\" class=\"nowrap\">'\n        . PMA_generateCharsetDropdownBox(\n            PMA_CSDROPDOWN_COLLATION, 'field_collation[0]',\n            'field_0_4', null, false\n        )\n        . '</td>'\n        . '<td class=\"nowrap\" name=\"col_attribute\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_attribute')\n            ->render(\n                array(\n                'columnNumber' => 0,\n                'ci' => 5,\n                'ci_offset' => 0,\n                'extracted_columnspec' => array(),\n                'columnMeta' => array(),\n                'submit_attribute' => false,\n                )\n            )\n        . '</td>'\n        . '<td class=\"nowrap\" name=\"col_isNull\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_null')\n            ->render(\n                array(\n                'columnNumber' => 0,\n                'ci' => 6,\n                'ci_offset' => 0,\n                'columnMeta' => array()\n                )\n            )\n        . '</td>'\n        . '<td class=\"nowrap\" name=\"col_extra\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_extra')->render(\n            array(\n                'columnNumber' => 0,\n                'ci' => 7,\n                'ci_offset' => 0,\n                'columnMeta' => array()\n            )\n        )\n        . '</td>'\n        . ' <td>'\n        . '<input id=\"add_column_save\" type=\"submit\" '\n        . ' value=\"Save\"/></td>'\n        . '</tr>';\n    $addNewColumn .= '</table></form></div>';\n    return $addNewColumn;\n}\n\n/**\n * Get HTML for editing page central columns\n *\n * @param array  $selected_fld Array containing the selected fields\n * @param string $selected_db  String containing the name of database\n *\n * @return string HTML for complete editing page for central columns\n */\nfunction PMA_getHTMLforEditingPage($selected_fld,$selected_db)\n{\n    $html = '<form id=\"multi_edit_central_columns\">';\n    $header_cells = array(\n        __('Name'), __('Type'), __('Length/Values'), __('Default'),\n        __('Collation'), __('Attributes'), __('Null'), __('A_I')\n    );\n    $html .= PMA_getCentralColumnsEditTableHeader($header_cells);\n    $selected_fld_safe = array();\n    foreach ($selected_fld as $key) {\n        $selected_fld_safe[] = Util::sqlAddSlashes($key);\n    }\n    $columns_list = implode(\"','\", $selected_fld_safe);\n    $columns_list = \"'\" . $columns_list . \"'\";\n    $list_detail_cols = PMA_findExistingColNames($selected_db, $columns_list, true);\n    $odd_row = false;\n    $row_num = 0;\n    foreach ($list_detail_cols as $row) {\n        $tableHtmlRow = PMA_getHTMLforCentralColumnsEditTableRow(\n            $row, $odd_row, $row_num\n        );\n        $html .= $tableHtmlRow;\n        $odd_row = !$odd_row;\n        $row_num++;\n    }\n    $html .= '</table>';\n    $html .= PMA_getCentralColumnsEditTableFooter();\n    $html .= '</form>';\n    return $html;\n}\n"], "fixing_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Functions for displaying user preferences pages\n *\n * @package PhpMyAdmin\n */\nuse PMA\\libraries\\Message;\nuse PMA\\libraries\\Util;\n\n/**\n * Defines the central_columns parameters for the current user\n *\n * @return array    the central_columns parameters for the current user\n * @access  public\n */\nfunction PMA_centralColumnsGetParams()\n{\n    static $cfgCentralColumns = null;\n\n    if (null !== $cfgCentralColumns) {\n        return $cfgCentralColumns;\n    }\n\n    $cfgRelation = PMA_getRelationsParam();\n\n    if ($cfgRelation['centralcolumnswork']) {\n        $cfgCentralColumns = array(\n            'user'  => $GLOBALS['cfg']['Server']['user'],\n            'db'    => $cfgRelation['db'],\n            'table' => $cfgRelation['central_columns'],\n        );\n    } else {\n        $cfgCentralColumns = false;\n    }\n\n    return $cfgCentralColumns;\n}\n\n/**\n * get $num columns of given database from central columns list\n * starting at offset $from\n *\n * @param string $db   selected database\n * @param int    $from starting offset of first result\n * @param int    $num  maximum number of results to return\n *\n * @return array list of $num columns present in central columns list\n * starting at offset $from for the given database\n */\nfunction PMA_getColumnsList($db, $from=0, $num=25)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return array();\n    }\n    $pmadb = $cfgCentralColumns['db'];\n    $GLOBALS['dbi']->selectDb($pmadb, $GLOBALS['controllink']);\n    $central_list_table = $cfgCentralColumns['table'];\n    //get current values of $db from central column list\n    if ($num == 0) {\n        $query = 'SELECT * FROM ' . Util::backquote($central_list_table) . ' '\n            . 'WHERE db_name = \\'' . Util::sqlAddSlashes($db) . '\\';';\n    } else {\n        $query = 'SELECT * FROM ' . Util::backquote($central_list_table) . ' '\n            . 'WHERE db_name = \\'' . Util::sqlAddSlashes($db) . '\\' '\n            . 'LIMIT ' . $from . ', ' . $num . ';';\n    }\n    $has_list = (array) $GLOBALS['dbi']->fetchResult(\n        $query, null, null, $GLOBALS['controllink']\n    );\n    PMA_handleColumnExtra($has_list);\n    return $has_list;\n}\n\n/**\n * get the number of columns present in central list for given db\n *\n * @param string $db current database\n *\n * @return int number of columns in central list of columns for $db\n */\nfunction PMA_getCentralColumnsCount($db)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return 0;\n    }\n    $pmadb = $cfgCentralColumns['db'];\n    $GLOBALS['dbi']->selectDb($pmadb, $GLOBALS['controllink']);\n    $central_list_table = $cfgCentralColumns['table'];\n    $query = 'SELECT count(db_name) FROM ' .\n        Util::backquote($central_list_table) . ' '\n        . 'WHERE db_name = \\'' . Util::sqlAddSlashes($db) . '\\';';\n    $res = $GLOBALS['dbi']->fetchResult(\n        $query, null, null, $GLOBALS['controllink']\n    );\n    if (isset($res[0])) {\n        return $res[0];\n    } else {\n        return 0;\n    }\n}\n/**\n * return the existing columns in central list among the given list of columns\n *\n * @param string  $db        the selected database\n * @param string  $cols      comma separated list of given columns\n * @param boolean $allFields set if need all the fields of existing columns,\n * otherwise only column_name is returned\n *\n * @return array list of columns in central columns among given set of columns\n */\nfunction PMA_findExistingColNames($db, $cols, $allFields=false)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return array();\n    }\n    $pmadb = $cfgCentralColumns['db'];\n    $GLOBALS['dbi']->selectDb($pmadb, $GLOBALS['controllink']);\n    $central_list_table = $cfgCentralColumns['table'];\n    if ($allFields) {\n        $query = 'SELECT * FROM ' . Util::backquote($central_list_table) . ' '\n            . 'WHERE db_name = \\'' . Util::sqlAddSlashes($db) . '\\' AND col_name IN (' . $cols . ');';\n        $has_list = (array) $GLOBALS['dbi']->fetchResult(\n            $query, null, null, $GLOBALS['controllink']\n        );\n        PMA_handleColumnExtra($has_list);\n    } else {\n        $query = 'SELECT col_name FROM '\n            . Util::backquote($central_list_table) . ' '\n            . 'WHERE db_name = \\'' . Util::sqlAddSlashes($db) . '\\' AND col_name IN (' . $cols . ');';\n        $has_list = (array) $GLOBALS['dbi']->fetchResult(\n            $query, null, null, $GLOBALS['controllink']\n        );\n    }\n\n    return $has_list;\n}\n\n/**\n * return error message to be displayed if central columns\n * configuration storage is not completely configured\n *\n * @return Message\n */\nfunction PMA_configErrorMessage()\n{\n    return Message::error(\n        __(\n            'The configuration storage is not ready for the central list'\n            . ' of columns feature.'\n        )\n    );\n}\n\n/**\n * build the insert query for central columns list given PMA storage\n * db, central_columns table, column name and corresponding definition to be added\n *\n * @param string $column             column to add into central list\n * @param array  $def                list of attributes of the column being added\n * @param string $db                 PMA configuration storage database name\n * @param string $central_list_table central columns configuration storage table name\n *\n * @return string query string to insert the given column\n * with definition into central list\n */\nfunction PMA_getInsertQuery($column, $def, $db, $central_list_table)\n{\n    $type = \"\";\n    $length = 0;\n    $attribute = \"\";\n    if (isset($def['Type'])) {\n        $extracted_columnspec = Util::extractColumnSpec($def['Type']);\n        $attribute = trim($extracted_columnspec[ 'attribute']);\n        $type = $extracted_columnspec['type'];\n        $length = $extracted_columnspec['spec_in_brackets'];\n    }\n    if (isset($def['Attribute'])) {\n        $attribute = $def['Attribute'];\n    };\n    $collation = isset($def['Collation'])?$def['Collation']:\"\";\n    $isNull = ($def['Null'] == \"NO\")?0:1;\n    $extra = isset($def['Extra'])?$def['Extra']:\"\";\n    $default = isset($def['Default'])?$def['Default']:\"\";\n    $insQuery = 'INSERT INTO '\n        . Util::backquote($central_list_table) . ' '\n        . 'VALUES ( \\'' . Util::sqlAddSlashes($db) . '\\' ,'\n        . '\\'' . Util::sqlAddSlashes($column) . '\\',\\''\n        . Util::sqlAddSlashes($type) . '\\','\n        . '\\'' . Util::sqlAddSlashes($length) . '\\',\\''\n        . Util::sqlAddSlashes($collation) . '\\','\n        . '\\'' . Util::sqlAddSlashes($isNull) . '\\','\n        . '\\'' . implode(',', array($extra, $attribute))\n        . '\\',\\'' . Util::sqlAddSlashes($default) . '\\');';\n    return $insQuery;\n}\n\n/**\n * If $isTable is true then unique columns from given tables as $field_select\n * are added to central list otherwise the $field_select is considered as\n * list of columns and these columns are added to central list if not already added\n *\n * @param array  $field_select if $isTable is true selected tables list\n * otherwise selected columns list\n * @param bool   $isTable      if passed array is of tables or columns\n * @param string $table        if $isTable is false,\n * then table name to which columns belong\n *\n * @return true|PMA\\libraries\\Message\n */\nfunction PMA_syncUniqueColumns($field_select, $isTable=true, $table=null)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return PMA_configErrorMessage();\n    }\n    $db = $_REQUEST['db'];\n    $pmadb = $cfgCentralColumns['db'];\n    $central_list_table = $cfgCentralColumns['table'];\n    $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n    $existingCols = array();\n    $cols = \"\";\n    $insQuery = array();\n    $fields = array();\n    $message = true;\n    if ($isTable) {\n        foreach ($field_select as $table) {\n            $fields[$table] = (array) $GLOBALS['dbi']->getColumns(\n                $db, $table, null, true, $GLOBALS['userlink']\n            );\n            foreach ($fields[$table] as $field => $def) {\n                $cols .= \"'\" . Util::sqlAddSlashes($field) . \"',\";\n            }\n        }\n\n        $has_list = PMA_findExistingColNames($db, trim($cols, ','));\n        foreach ($field_select as $table) {\n            foreach ($fields[$table] as $field => $def) {\n                if (!in_array($field, $has_list)) {\n                    $has_list[] = $field;\n                    $insQuery[] = PMA_getInsertQuery(\n                        $field, $def, $db, $central_list_table\n                    );\n                } else {\n                    $existingCols[] = \"'\" . $field . \"'\";\n                }\n            }\n        }\n    } else {\n        if ($table === null) {\n            $table = $_REQUEST['table'];\n        }\n        foreach ($field_select as $column) {\n            $cols .= \"'\" . Util::sqlAddSlashes($column) . \"',\";\n        }\n        $has_list = PMA_findExistingColNames($db, trim($cols, ','));\n        foreach ($field_select as $column) {\n            if (!in_array($column, $has_list)) {\n                $has_list[] = $column;\n                $field = (array) $GLOBALS['dbi']->getColumns(\n                    $db, $table, $column,\n                    true, $GLOBALS['userlink']\n                );\n                $insQuery[] = PMA_getInsertQuery(\n                    $column, $field, $db, $central_list_table\n                );\n            } else {\n                $existingCols[] = \"'\" . $column . \"'\";\n            }\n        }\n    }\n    if (! empty($existingCols)) {\n        $existingCols = implode(\",\", array_unique($existingCols));\n        $message = Message::notice(\n            sprintf(\n                __(\n                    'Could not add %1$s as they already exist in central list!'\n                ), htmlspecialchars($existingCols)\n            )\n        );\n        $message->addMessage(\n            Message::notice(\n                \"Please remove them first \"\n                . \"from central list if you want to update above columns\"\n            )\n        );\n    }\n    $GLOBALS['dbi']->selectDb($pmadb, $GLOBALS['controllink']);\n    if (! empty($insQuery)) {\n        foreach ($insQuery as $query) {\n            if (!$GLOBALS['dbi']->tryQuery($query, $GLOBALS['controllink'])) {\n                $message = Message::error(__('Could not add columns!'));\n                $message->addMessage(\n                    Message::rawError(\n                        $GLOBALS['dbi']->getError($GLOBALS['controllink'])\n                    )\n                );\n                break;\n            }\n        }\n    }\n    return $message;\n}\n\n/**\n * if $isTable is true it removes all columns of given tables as $field_select from\n * central columns list otherwise $field_select is columns list and it removes\n * given columns if present in central list\n *\n * @param array $field_select if $isTable selected list of tables otherwise\n * selected list of columns to remove from central list\n * @param bool  $isTable      if passed array is of tables or columns\n *\n * @return true|PMA\\libraries\\Message\n */\nfunction PMA_deleteColumnsFromList($field_select, $isTable=true)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return PMA_configErrorMessage();\n    }\n    $db = $_REQUEST['db'];\n    $pmadb = $cfgCentralColumns['db'];\n    $central_list_table = $cfgCentralColumns['table'];\n    $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n    $message = true;\n    $colNotExist = array();\n    $fields = array();\n    if ($isTable) {\n        $cols = '';\n        foreach ($field_select as $table) {\n            $fields[$table] = (array) $GLOBALS['dbi']->getColumnNames(\n                $db, $table, $GLOBALS['userlink']\n            );\n            foreach ($fields[$table] as $col_select) {\n                $cols .= '\\'' . Util::sqlAddSlashes($col_select) . '\\',';\n            }\n        }\n        $cols = trim($cols, ',');\n        $has_list = PMA_findExistingColNames($db, $cols);\n        foreach ($field_select as $table) {\n            foreach ($fields[$table] as $column) {\n                if (!in_array($column, $has_list)) {\n                    $colNotExist[] = \"'\" . $column . \"'\";\n                }\n            }\n        }\n\n    } else {\n        $cols = '';\n        foreach ($field_select as $col_select) {\n            $cols .= '\\'' . Util::sqlAddSlashes($col_select) . '\\',';\n        }\n        $cols = trim($cols, ',');\n        $has_list = PMA_findExistingColNames($db, $cols);\n        foreach ($field_select as $column) {\n            if (!in_array($column, $has_list)) {\n                $colNotExist[] = \"'\" . $column . \"'\";\n            }\n        }\n    }\n    if (!empty($colNotExist)) {\n        $colNotExist = implode(\",\", array_unique($colNotExist));\n        $message = Message::notice(\n            sprintf(\n                __(\n                    'Couldn\\'t remove Column(s) %1$s '\n                    . 'as they don\\'t exist in central columns list!'\n                ), htmlspecialchars($colNotExist)\n            )\n        );\n    }\n    $GLOBALS['dbi']->selectDb($pmadb, $GLOBALS['controllink']);\n\n    $query = 'DELETE FROM ' . Util::backquote($central_list_table) . ' '\n        . 'WHERE db_name = \\'' . Util::sqlAddSlashes($db) . '\\' AND col_name IN (' . $cols . ');';\n\n    if (!$GLOBALS['dbi']->tryQuery($query, $GLOBALS['controllink'])) {\n        $message = Message::error(__('Could not remove columns!'));\n        $message->addMessage('<br />' . htmlspecialchars($cols) . '<br />');\n        $message->addMessage(\n            Message::rawError(\n                $GLOBALS['dbi']->getError($GLOBALS['controllink'])\n            )\n        );\n    }\n    return $message;\n}\n\n/**\n * make the columns of given tables consistent with central list of columns.\n * Updates only those columns which are not being referenced.\n *\n * @param string $db              current database\n * @param array  $selected_tables list of selected tables.\n *\n * @return true|PMA\\libraries\\Message\n */\nfunction PMA_makeConsistentWithList($db, $selected_tables)\n{\n    $message = true;\n    foreach ($selected_tables as $table) {\n        $query = 'ALTER TABLE ' . Util::backquote($table);\n        $has_list = PMA_getCentralColumnsFromTable($db, $table, true);\n        $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n        foreach ($has_list as $column) {\n            $column_status = PMA_checkChildForeignReferences(\n                $db, $table, $column['col_name']\n            );\n            //column definition can only be changed if\n            //it is not referenced by another column\n            if ($column_status['isEditable']) {\n                $query .= ' MODIFY ' . Util::backquote($column['col_name']) . ' '\n                    . Util::sqlAddSlashes($column['col_type']);\n                if ($column['col_length']) {\n                    $query .= '(' . $column['col_length'] . ')';\n                }\n\n                $query .= ' ' . $column['col_attribute'];\n                if ($column['col_isNull']) {\n                    $query .= ' NULL';\n                } else {\n                    $query .= ' NOT NULL';\n                }\n\n                $query .= ' ' . $column['col_extra'];\n                if ($column['col_default']) {\n                    if ($column['col_default'] != 'CURRENT_TIMESTAMP') {\n                        $query .= ' DEFAULT \\'' . Util::sqlAddSlashes(\n                            $column['col_default']\n                        ) . '\\'';\n                    } else {\n                        $query .= ' DEFAULT ' . Util::sqlAddSlashes(\n                            $column['col_default']\n                        );\n                    }\n                }\n                $query .= ',';\n            }\n        }\n        $query = trim($query, \" ,\") . \";\";\n        if (!$GLOBALS['dbi']->tryQuery($query, $GLOBALS['userlink'])) {\n            if ($message === true) {\n                $message = Message::error(\n                    $GLOBALS['dbi']->getError($GLOBALS['userlink'])\n                );\n            } else {\n                $message->addMessage('<br />');\n                $message->addMessage(\n                    $GLOBALS['dbi']->getError($GLOBALS['userlink'])\n                );\n            }\n        }\n    }\n    return $message;\n}\n\n/**\n * return the columns present in central list of columns for a given\n * table of a given database\n *\n * @param string  $db        given database\n * @param string  $table     given table\n * @param boolean $allFields set if need all the fields of existing columns,\n * otherwise only column_name is returned\n *\n * @return array columns present in central list from given table of given db.\n */\nfunction PMA_getCentralColumnsFromTable($db, $table, $allFields=false)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return array();\n    }\n    $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n    $fields = (array) $GLOBALS['dbi']->getColumnNames(\n        $db, $table, $GLOBALS['userlink']\n    );\n    $cols = '';\n    foreach ($fields as $col_select) {\n        $cols .= '\\'' . Util::sqlAddSlashes($col_select) . '\\',';\n    }\n    $cols = trim($cols, ',');\n    $has_list = PMA_findExistingColNames($db, $cols, $allFields);\n    if (! empty($has_list)) {\n        return (array)$has_list;\n    } else {\n        return array();\n    }\n}\n\n/**\n * update a column in central columns list if a edit is requested\n *\n * @param string $db            current database\n * @param string $orig_col_name original column name before edit\n * @param string $col_name      new column name\n * @param string $col_type      new column type\n * @param string $col_attribute new column attribute\n * @param string $col_length    new column length\n * @param int    $col_isNull    value 1 if new column isNull is true, 0 otherwise\n * @param string $collation     new column collation\n * @param string $col_extra     new column extra property\n * @param string $col_default   new column default value\n *\n * @return true|PMA\\libraries\\Message\n */\nfunction PMA_updateOneColumn($db, $orig_col_name, $col_name, $col_type,\n    $col_attribute,$col_length, $col_isNull, $collation, $col_extra, $col_default\n) {\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return PMA_configErrorMessage();\n    }\n    $centralTable = $cfgCentralColumns['table'];\n    $GLOBALS['dbi']->selectDb($cfgCentralColumns['db'], $GLOBALS['controllink']);\n    if ($orig_col_name == \"\") {\n        $def = array();\n        $def['Type'] = $col_type;\n        if ($col_length) {\n            $def['Type'] .= '(' . $col_length . ')';\n        }\n        $def['Collation'] = $collation;\n        $def['Null'] = $col_isNull?__('YES'):__('NO');\n        $def['Extra'] = $col_extra;\n        $def['Attribute'] = $col_attribute;\n        $def['Default'] = $col_default;\n        $query = PMA_getInsertQuery($col_name, $def, $db, $centralTable);\n    } else {\n        $query = 'UPDATE ' . Util::backquote($centralTable)\n            . ' SET col_type = \\'' . Util::sqlAddSlashes($col_type) . '\\''\n            . ', col_name = \\'' . Util::sqlAddSlashes($col_name) . '\\''\n            . ', col_length = \\'' . Util::sqlAddSlashes($col_length) . '\\''\n            . ', col_isNull = ' . $col_isNull\n            . ', col_collation = \\'' . Util::sqlAddSlashes($collation) . '\\''\n            . ', col_extra = \\''\n            . implode(',', array($col_extra, $col_attribute)) . '\\''\n            . ', col_default = \\'' . Util::sqlAddSlashes($col_default) . '\\''\n            . ' WHERE db_name = \\'' . Util::sqlAddSlashes($db) . '\\' '\n            . 'AND col_name = \\'' . Util::sqlAddSlashes($orig_col_name)\n            . '\\'';\n    }\n    if (!$GLOBALS['dbi']->tryQuery($query, $GLOBALS['controllink'])) {\n        return Message::error(\n            $GLOBALS['dbi']->getError($GLOBALS['controllink'])\n        );\n    }\n    return true;\n}\n\n/**\n * Update Multiple column in central columns list if a chnage is requested\n *\n * @return true|PMA\\libraries\\Message\n */\nfunction PMA_updateMultipleColumn()\n{\n    $db = $_POST['db'];\n    $col_name = $_POST['field_name'];\n    $orig_col_name = $_POST['orig_col_name'];\n    $col_default = $_POST['field_default_type'];\n    $col_length = $_POST['field_length'];\n    $col_attribute = $_POST['field_attribute'];\n    $col_type = $_POST['field_type'];\n    $collation = $_POST['field_collation'];\n    $col_isNull = array();\n    $col_extra = array();\n    $num_central_fields = count($orig_col_name);\n    for ($i = 0; $i < $num_central_fields ; $i++) {\n        $col_isNull[$i] = isset($_POST['field_null'][$i]) ? 1 : 0;\n        $col_extra[$i] = isset($_POST['col_extra'][$i])\n            ? $_POST['col_extra'][$i] : '';\n\n        if ($col_default[$i] == 'NONE') {\n            $col_default[$i] = \"\";\n        } else if ($col_default[$i] == 'USER_DEFINED') {\n            $col_default[$i] = $_POST['field_default_value'][$i];\n        }\n\n        $message = PMA_updateOneColumn(\n            $db, $orig_col_name[$i], $col_name[$i], $col_type[$i],\n            $col_attribute[$i], $col_length[$i], $col_isNull[$i], $collation[$i],\n            $col_extra[$i], $col_default[$i]\n        );\n        if (!is_bool($message)) {\n            return $message;\n        }\n    }\n    return true;\n}\n\n/**\n * get the html for table navigation in Central columns page\n *\n * @param int    $total_rows total number of rows in complete result set\n * @param int    $pos        offset of first result with complete result set\n * @param string $db         current database\n *\n * @return string html for table navigation in Central columns page\n */\nfunction PMA_getHTMLforTableNavigation($total_rows, $pos, $db)\n{\n    $max_rows = $GLOBALS['cfg']['MaxRows'];\n    $pageNow = ($pos / $max_rows) + 1;\n    $nbTotalPage = ceil($total_rows / $max_rows);\n    $table_navigation_html = '<table style=\"display:inline-block;max-width:49%\" '\n        . 'class=\"navigation nospacing nopadding\">'\n        . '<tr>'\n        . '<td class=\"navigation_separator\"></td>';\n    if ($pos - $max_rows >= 0) {\n        $table_navigation_html .= '<td>'\n            . '<form action=\"db_central_columns.php\" method=\"post\">'\n            . PMA_URL_getHiddenInputs(\n                $db\n            )\n            . '<input type=\"hidden\" name=\"pos\" value=\"' . ($pos - $max_rows) . '\" />'\n            . '<input type=\"hidden\" name=\"total_rows\" value=\"' . $total_rows . '\"/>'\n            . '<input type=\"submit\" name=\"navig\"'\n            . ' class=\"ajax\" '\n            . 'value=\"&lt\" />'\n            . '</form>'\n            . '</td>';\n    }\n    if ($nbTotalPage > 1) {\n        $table_navigation_html .= '<td>';\n        $table_navigation_html .= '<form action=\"db_central_columns.php'\n            . '\" method=\"post\">'\n            . PMA_URL_getHiddenInputs(\n                $db\n            )\n            . '<input type=\"hidden\" name=\"total_rows\" value=\"' . $total_rows . '\"/>';\n        $table_navigation_html .= Util::pageselector(\n            'pos', $max_rows, $pageNow, $nbTotalPage\n        );\n        $table_navigation_html .= '</form>'\n            . '</td>';\n    }\n    if ($pos + $max_rows < $total_rows) {\n        $table_navigation_html .= '<td>'\n            . '<form action=\"db_central_columns.php\" method=\"post\">'\n            . PMA_URL_getHiddenInputs(\n                $db\n            )\n            . '<input type=\"hidden\" name=\"pos\" value=\"' . ($pos + $max_rows) . '\" />'\n            . '<input type=\"hidden\" name=\"total_rows\" value=\"' . $total_rows . '\"/>'\n            . '<input type=\"submit\" name=\"navig\"'\n            . ' class=\"ajax\" '\n            . 'value=\"&gt\" />'\n            . '</form>'\n            . '</td>';\n    }\n    $table_navigation_html .= '</form>'\n        . '</td>'\n        . '<td class=\"navigation_separator\"></td>'\n        . '<td>'\n        . '<span>' . __('Filter rows') . ':</span>'\n        . '<input type=\"text\" class=\"filter_rows\" placeholder=\"'\n        . __('Search this table') . '\">'\n        . '</td>'\n        . '<td class=\"navigation_separator\"></td>'\n        . '</tr>'\n        . '</table>';\n\n    return $table_navigation_html;\n}\n\n/**\n * function generate and return the table header for central columns page\n *\n * @param string  $class       styling class of 'th' elements\n * @param string  $title       title of the 'th' elements\n * @param integer $actionCount number of actions\n *\n * @return string html for table header in central columns view/edit page\n */\nfunction PMA_getCentralColumnsTableHeader($class='', $title='', $actionCount=0)\n{\n    $action = '';\n    if ($actionCount > 0) {\n        $action .= '<th class=\"column_action\" colspan=\"' . $actionCount . '\">'\n            . __('Action') . '</th>';\n    }\n    $tableheader = '<thead>';\n    $tableheader .= '<tr>'\n        . '<th class=\"' . $class . '\"></th>'\n        . '<th class=\"\" style=\"display:none\"></th>'\n        . $action\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"name\">'\n        . __('Name') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"type\">'\n        . __('Type') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"length\">'\n        . __('Length/Values') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"default\">'\n        . __('Default') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"collation\"'\n        . '>' . __('Collation') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title\n        . '\" data-column=\"attribute\">'\n        . __('Attribute') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"isnull\">'\n        . __('Null') . '<div class=\"sorticon\"></div></th>'\n        . '<th class=\"' . $class . '\" title=\"' . $title . '\" data-column=\"extra\">'\n        . __('A_I') . '<div class=\"sorticon\"></div></th>'\n        . '</tr>';\n    $tableheader .= '</thead>';\n    return $tableheader;\n}\n\n/**\n * Function generate and return the table header for\n * multiple edit central columns page\n *\n * @param array $header_cells headers list\n *\n * @return string html for table header in central columns multi edit page\n */\nfunction PMA_getCentralColumnsEditTableHeader($header_cells)\n{\n    $html = '<table id=\"table_columns\" class=\"noclick\"'\n        . ' style=\"min-width: 100%;\">';\n    $html .= '<caption class=\"tblHeaders\">' . __('Structure');\n    $html .= '<tr>';\n    foreach ($header_cells as $header_val) {\n        $html .= '<th>' . $header_val . '</th>';\n    }\n    $html .= '</tr>';\n    return $html;\n}\n\n/**\n * build the dropdown select html for tables of given database\n *\n * @param string $db current database\n *\n * @return string html dropdown for selecting table\n */\nfunction PMA_getHTMLforTableDropdown($db)\n{\n    $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n    $tables = $GLOBALS['dbi']->getTables($db, $GLOBALS['userlink']);\n    $selectHtml = '<select name=\"table-select\" id=\"table-select\">'\n        . '<option value=\"\" disabled=\"disabled\" selected=\"selected\">'\n        . __('Select a table') . '</option>';\n    foreach ($tables as $table) {\n        $selectHtml .= '<option value=\"' . htmlspecialchars($table) . '\">'\n            . htmlspecialchars($table) . '</option>';\n    }\n    $selectHtml .= '</select>';\n    return $selectHtml;\n}\n\n/**\n * build dropdown select html to select column in selected table,\n * include only columns which are not already in central list\n *\n * @param string $db           current database to which selected table belongs\n * @param string $selected_tbl selected table\n *\n * @return string html to select column\n */\nfunction PMA_getHTMLforColumnDropdown($db, $selected_tbl)\n{\n    $existing_cols = PMA_getCentralColumnsFromTable($db, $selected_tbl);\n    $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n    $columns = (array) $GLOBALS['dbi']->getColumnNames(\n        $db, $selected_tbl, $GLOBALS['userlink']\n    );\n    $selectColHtml = \"\";\n    foreach ($columns as $column) {\n        if (!in_array($column, $existing_cols)) {\n            $selectColHtml .= '<option value=\"' . htmlspecialchars($column) . '\">'\n                . htmlspecialchars($column)\n                . '</option>';\n        }\n    }\n    return $selectColHtml;\n}\n\n/**\n * html to display the form that let user to add a column on Central columns page\n *\n * @param int    $total_rows total number of rows in complete result set\n * @param int    $pos        offset of first result with complete result set\n * @param string $db         current database\n *\n * @return string html to add a column in the central list\n */\nfunction PMA_getHTMLforAddCentralColumn($total_rows, $pos, $db)\n{\n    $columnAdd = '<table style=\"display:inline-block;margin-left:1%;max-width:50%\" '\n        . 'class=\"navigation nospacing nopadding\">'\n        . '<tr>'\n        . '<td class=\"navigation_separator\"></td>'\n        . '<td style=\"padding:1.5% 0em\">'\n        . Util::getIcon(\n            'centralColumns_add.png',\n            __('Add column')\n        )\n        . '<form id=\"add_column\" action=\"db_central_columns.php\" method=\"post\">'\n        . PMA_URL_getHiddenInputs(\n            $db\n        )\n        . '<input type=\"hidden\" name=\"add_column\" value=\"add\">'\n        . '<input type=\"hidden\" name=\"pos\" value=\"' . $pos . '\" />'\n        . '<input type=\"hidden\" name=\"total_rows\" value=\"' . $total_rows . '\"/>'\n        . PMA_getHTMLforTableDropdown($db)\n        . '<select name=\"column-select\" id=\"column-select\">'\n        . '<option value=\"\" selected=\"selected\">'\n        . __('Select a column.') . '</option>'\n        . '</select></form>'\n        . '</td>'\n        . '<td class=\"navigation_separator\"></td>'\n        . '</tr>'\n        . '</table>';\n\n    return $columnAdd;\n}\n\n/**\n * build html for a row in central columns table\n *\n * @param array   $row     array contains complete information of\n * a particular row of central list table\n * @param boolean $odd_row set true if the row is at odd number position\n * @param int     $row_num position the row in the table\n * @param string  $db      current database\n *\n * @return string html of a particular row in the central columns table.\n */\nfunction PMA_getHTMLforCentralColumnsTableRow($row, $odd_row, $row_num, $db)\n{\n    $tableHtml = '<tr data-rownum=\"' . $row_num . '\" id=\"f_' . $row_num . '\" '\n        . 'class=\"' . ($odd_row ? 'odd' : 'even') . '\">'\n        . PMA_URL_getHiddenInputs(\n            $db\n        )\n        . '<input type=\"hidden\" name=\"edit_save\" value=\"save\">'\n        . '<td class=\"nowrap\">'\n        . '<input type=\"checkbox\" class=\"checkall\" name=\"selected_fld[]\" '\n        . 'value=\"' . htmlspecialchars($row['col_name']) . '\" '\n        . 'id=\"checkbox_row_' . $row_num . '\"/>'\n        . '</td>'\n        . '<td id=\"edit_' . $row_num . '\" class=\"edit center\">'\n        . '<a href=\"#\">' . Util::getIcon('b_edit.png', __('Edit')) . '</a></td>'\n        . '<td class=\"del_row\" data-rownum = \"' . $row_num . '\">'\n        . '<a hrf=\"#\">' . Util::getIcon('b_drop.png', __('Delete')) . '</a>'\n        . '<input type=\"submit\" data-rownum = \"' . $row_num . '\"'\n        . ' class=\"edit_cancel_form\" value=\"Cancel\"></td>'\n        . '<td id=\"save_' . $row_num . '\" style=\"display:none\">'\n        . '<input type=\"submit\" data-rownum = \"' . $row_num . '\"'\n        . ' class=\"edit_save_form\" value=\"Save\"></td>';\n\n    $tableHtml .=\n        '<td name=\"col_name\" class=\"nowrap\">'\n        . '<span>' . htmlspecialchars($row['col_name']) . '</span>'\n        . '<input name=\"orig_col_name\" type=\"hidden\" '\n        . 'value=\"' . htmlspecialchars($row['col_name']) . '\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_name')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 0,\n                'ci_offset' => 0,\n                'columnMeta' => array(\n                    'Field'=>$row['col_name']\n                ),\n                'cfgRelation' => array(\n                    'centralcolumnswork' => false\n                )\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td name = \"col_type\" class=\"nowrap\"><span>'\n        . htmlspecialchars($row['col_type']) . '</span>'\n        . PMA\\libraries\\Template::get('columns_definitions/column_type')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 1,\n                'ci_offset' => 0,\n                'type_upper' => mb_strtoupper($row['col_type']),\n                'columnMeta' => array()\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_length\">'\n        . '<span>' . ($row['col_length']?htmlspecialchars($row['col_length']):\"\")\n        . '</span>'\n        . PMA\\libraries\\Template::get('columns_definitions/column_length')->render(\n            array(\n                'columnNumber' => $row_num,\n                'ci' => 2,\n                'ci_offset' => 0,\n                'length_values_input_size' => 8,\n                'length_to_display' => $row['col_length']\n            )\n        )\n        . '</td>';\n\n    $meta = array();\n    if (!isset($row['col_default']) || $row['col_default'] == '') {\n        $meta['DefaultType'] = 'NONE';\n    } else {\n        if ($row['col_default'] == 'CURRENT_TIMESTAMP'\n            || $row['col_default'] == 'NULL'\n        ) {\n            $meta['DefaultType'] = $row['col_default'];\n        } else {\n            $meta['DefaultType'] = 'USER_DEFINED';\n            $meta['DefaultValue'] = $row['col_default'];\n        }\n    }\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_default\"><span>' . (isset($row['col_default'])\n            ? htmlspecialchars($row['col_default']) : 'None')\n        . '</span>'\n        . PMA\\libraries\\Template::get('columns_definitions/column_default')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 3,\n                'ci_offset' => 0,\n                'type_upper' => mb_strtoupper($row['col_type']),\n                'columnMeta' => $meta\n                )\n            )\n        . '</td>';\n\n    $tableHtml .=\n        '<td name=\"collation\" class=\"nowrap\">'\n        . '<span>' . htmlspecialchars($row['col_collation']) . '</span>'\n        . PMA_generateCharsetDropdownBox(\n            PMA_CSDROPDOWN_COLLATION, 'field_collation[' . $row_num . ']',\n            'field_' . $row_num . '_4', $row['col_collation'], false\n        )\n        . '</td>';\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_attribute\">'\n        . '<span>' .\n        ($row['col_attribute']\n            ? htmlspecialchars($row['col_attribute']) : \"\" )\n        . '</span>'\n        . PMA\\libraries\\Template::get('columns_definitions/column_attribute')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 5,\n                'ci_offset' => 0,\n                'extracted_columnspec' => array(),\n                'columnMeta' => $row['col_attribute'],\n                'submit_attribute' => false,\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_isNull\">'\n        . '<span>' . ($row['col_isNull'] ? __('Yes') : __('No'))\n        . '</span>'\n        . PMA\\libraries\\Template::get('columns_definitions/column_null')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 6,\n                'ci_offset' => 0,\n                'columnMeta' => array(\n                    'Null' => $row['col_isNull']\n                )\n                )\n            )\n        . '</td>';\n\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_extra\"><span>'\n        . htmlspecialchars($row['col_extra']) . '</span>'\n        . PMA\\libraries\\Template::get('columns_definitions/column_extra')->render(\n            array(\n                'columnNumber' => $row_num,\n                'ci' => 7,\n                'ci_offset' => 0,\n                'columnMeta' => array('Extra'=>$row['col_extra'])\n            )\n        )\n        . '</td>';\n\n    $tableHtml .= '</tr>';\n\n    return $tableHtml;\n}\n\n/**\n * build html for editing a row in central columns table\n *\n * @param array   $row     array contains complete information of\n * a particular row of central list table\n * @param boolean $odd_row set true if the row is at odd number position\n * @param int     $row_num position the row in the table\n *\n * @return string html of a particular row in the central columns table.\n */\nfunction PMA_getHTMLforCentralColumnsEditTableRow($row, $odd_row, $row_num)\n{\n    $tableHtml = '<tr class=\"' . ($odd_row ? 'odd' : 'even') . '\">'\n        . '<input name=\"orig_col_name[' . $row_num . ']\" type=\"hidden\" '\n        . 'value=\"' . htmlspecialchars($row['col_name']) . '\">'\n        . '<td name=\"col_name\" class=\"nowrap\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_name')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 0,\n                'ci_offset' => 0,\n                'columnMeta' => array(\n                    'Field' => $row['col_name']\n                ),\n                'cfgRelation' => array(\n                    'centralcolumnswork' => false\n                )\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td name = \"col_type\" class=\"nowrap\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_type')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 1,\n                'ci_offset' => 0,\n                'type_upper' => mb_strtoupper($row['col_type']),\n                'columnMeta' => array()\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_length\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_length')->render(\n            array(\n                'columnNumber' => $row_num,\n                'ci' => 2,\n                'ci_offset' => 0,\n                'length_values_input_size' => 8,\n                'length_to_display' => $row['col_length']\n            )\n        )\n        . '</td>';\n    $meta = array();\n    if (!isset($row['col_default']) || $row['col_default'] == '') {\n        $meta['DefaultType'] = 'NONE';\n    } else {\n        if ($row['col_default'] == 'CURRENT_TIMESTAMP'\n            || $row['col_default'] == 'NULL'\n        ) {\n            $meta['DefaultType'] = $row['col_default'];\n        } else {\n            $meta['DefaultType'] = 'USER_DEFINED';\n            $meta['DefaultValue'] = $row['col_default'];\n        }\n    }\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_default\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_default')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 3,\n                'ci_offset' => 0,\n                'type_upper' => mb_strtoupper($row['col_default']),\n                'columnMeta' => $meta\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td name=\"collation\" class=\"nowrap\">'\n        . PMA_generateCharsetDropdownBox(\n            PMA_CSDROPDOWN_COLLATION, 'field_collation[' . $row_num . ']',\n            'field_' . $row_num . '_4', $row['col_collation'], false\n        )\n        . '</td>';\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_attribute\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_attribute')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 5,\n                'ci_offset' => 0,\n                'extracted_columnspec' => array(\n                    'attribute' => $row['col_attribute']\n                ),\n                'columnMeta' => array(),\n                'submit_attribute' => false,\n                )\n            )\n        . '</td>';\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_isNull\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_null')\n            ->render(\n                array(\n                'columnNumber' => $row_num,\n                'ci' => 6,\n                'ci_offset' => 0,\n                'columnMeta' => array(\n                    'Null' => $row['col_isNull']\n                )\n                )\n            )\n        . '</td>';\n\n    $tableHtml .=\n        '<td class=\"nowrap\" name=\"col_extra\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_extra')->render(\n            array(\n                'columnNumber' => $row_num,\n                'ci' => 7,\n                'ci_offset' => 0,\n                'columnMeta' => array('Extra' => $row['col_extra'])\n            )\n        )\n        . '</td>';\n    $tableHtml .= '</tr>';\n    return $tableHtml;\n}\n\n/**\n * get the list of columns in given database excluding\n * the columns present in current table\n *\n * @param string $db    selected database\n * @param string $table current table name\n *\n * @return string encoded list of columns present in central list for the given\n *                database\n */\nfunction PMA_getCentralColumnsListRaw($db, $table)\n{\n    $cfgCentralColumns = PMA_centralColumnsGetParams();\n    if (empty($cfgCentralColumns)) {\n        return json_encode(array());\n    }\n    $centralTable = $cfgCentralColumns['table'];\n    if (empty($table) || $table == '') {\n        $query = 'SELECT * FROM ' . Util::backquote($centralTable) . ' '\n            . 'WHERE db_name = \\'' . Util::sqlAddSlashes($db) . '\\';';\n    } else {\n        $GLOBALS['dbi']->selectDb($db, $GLOBALS['userlink']);\n        $columns = (array) $GLOBALS['dbi']->getColumnNames(\n            $db, $table, $GLOBALS['userlink']\n        );\n        $cols = '';\n        foreach ($columns as $col_select) {\n            $cols .= '\\'' . Util::sqlAddSlashes($col_select) . '\\',';\n        }\n        $cols = trim($cols, ',');\n        $query = 'SELECT * FROM ' . Util::backquote($centralTable) . ' '\n            . 'WHERE db_name = \\'' . Util::sqlAddSlashes($db) . '\\'';\n        if ($cols) {\n            $query .= ' AND col_name NOT IN (' . $cols . ')';\n        }\n        $query .= ';';\n    }\n    $GLOBALS['dbi']->selectDb($cfgCentralColumns['db'], $GLOBALS['controllink']);\n    $columns_list = (array)$GLOBALS['dbi']->fetchResult(\n        $query, null, null, $GLOBALS['controllink']\n    );\n    PMA_handleColumnExtra($columns_list);\n    return json_encode($columns_list);\n}\n\n/**\n * Get HTML for \"check all\" check box with \"with selected\" dropdown\n *\n * @param string $pmaThemeImage pma theme image url\n * @param string $text_dir      url for text directory\n *\n * @return string $html_output\n */\nfunction PMA_getCentralColumnsTableFooter($pmaThemeImage, $text_dir)\n{\n    $html_output = Util::getWithSelected(\n        $pmaThemeImage, $text_dir, \"tableslistcontainer\"\n    );\n    $html_output .= Util::getButtonOrImage(\n        'edit_central_columns', 'mult_submit change_central_columns',\n        'submit_mult_change', __('Edit'), 'b_edit.png', 'edit central columns'\n    );\n    $html_output .= Util::getButtonOrImage(\n        'delete_central_columns', 'mult_submit',\n        'submit_mult_central_columns_remove',\n        __('Delete'), 'b_drop.png',\n        'remove_from_central_columns'\n    );\n    return $html_output;\n}\n\n/**\n * function generate and return the table footer for\n * multiple edit central columns page\n *\n * @return string html for table footer in central columns multi edit page\n */\nfunction PMA_getCentralColumnsEditTableFooter()\n{\n    $html_output = '<fieldset class=\"tblFooters\">'\n        . '<input type=\"submit\" '\n        . 'name=\"save_multi_central_column_edit\" value=\"' . __('Save') . '\" />'\n        . '</fieldset>';\n    return $html_output;\n}\n/**\n * Column `col_extra` is used to store both extra and attributes for a column.\n * This method separates them.\n *\n * @param array &$columns_list columns list\n *\n * @return void\n */\nfunction PMA_handleColumnExtra(&$columns_list)\n{\n    foreach ($columns_list as &$row) {\n        $vals = explode(',', $row['col_extra']);\n\n        if (in_array('BINARY', $vals)) {\n            $row['col_attribute'] = 'BINARY';\n        } elseif (in_array('UNSIGNED', $vals)) {\n            $row['col_attribute'] = 'UNSIGNED';\n        } elseif (in_array('UNSIGNED ZEROFILL', $vals)) {\n            $row['col_attribute'] = 'UNSIGNED ZEROFILL';\n        } elseif (in_array('on update CURRENT_TIMESTAMP', $vals)) {\n            $row['col_attribute'] = 'on update CURRENT_TIMESTAMP';\n        } else {\n            $row['col_attribute'] = '';\n        }\n\n        if (in_array('auto_increment', $vals)) {\n            $row['col_extra'] = 'auto_increment';\n        } else {\n            $row['col_extra'] = '';\n        }\n    }\n}\n\n/**\n * build html for adding a new user defined column to central list\n *\n * @param string $db current database\n *\n * @return string html of the form to let user add a new user defined column to the\n *                list\n */\nfunction PMA_getHTMLforAddNewColumn($db)\n{\n    $addNewColumn = '<div id=\"add_col_div\"><a href=\"#\">'\n        . '<span>+</span> ' . __('Add new column') . '</a>'\n        . '<form id=\"add_new\" style=\"min-width:100%;display:none\" '\n        . 'method=\"post\" action=\"db_central_columns.php\">'\n        . PMA_URL_getHiddenInputs(\n            $db\n        )\n        . '<input type=\"hidden\" name=\"add_new_column\" value=\"add_new_column\">'\n        . '<table>';\n    $addNewColumn .= PMA_getCentralColumnsTableHeader();\n    $addNewColumn .= '<tr>'\n        . '<td></td>'\n        . '<td name=\"col_name\" class=\"nowrap\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_name')\n            ->render(\n                array(\n                'columnNumber' => 0,\n                'ci' => 0,\n                'ci_offset' => 0,\n                'columnMeta' => array(),\n                'cfgRelation' => array(\n                    'centralcolumnswork' => false\n                )\n                )\n            )\n        . '</td>'\n        . '<td name = \"col_type\" class=\"nowrap\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_type')\n            ->render(\n                array(\n                'columnNumber' => 0,\n                'ci' => 1,\n                'ci_offset' => 0,\n                'type_upper' => '',\n                'columnMeta' => array()\n                )\n            )\n        . '</td>'\n        . '<td class=\"nowrap\" name=\"col_length\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_length')->render(\n            array(\n                'columnNumber' => 0,\n                'ci' => 2,\n                'ci_offset' => 0,\n                'length_values_input_size' => 8,\n                'length_to_display' => ''\n            )\n        )\n        . '</td>'\n        . '<td class=\"nowrap\" name=\"col_default\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_default')\n            ->render(\n                array(\n                'columnNumber' => 0,\n                'ci' => 3,\n                'ci_offset' => 0,\n                'type_upper' => '',\n                'columnMeta' => array()\n                )\n            )\n        . '</td>'\n        . '<td name=\"collation\" class=\"nowrap\">'\n        . PMA_generateCharsetDropdownBox(\n            PMA_CSDROPDOWN_COLLATION, 'field_collation[0]',\n            'field_0_4', null, false\n        )\n        . '</td>'\n        . '<td class=\"nowrap\" name=\"col_attribute\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_attribute')\n            ->render(\n                array(\n                'columnNumber' => 0,\n                'ci' => 5,\n                'ci_offset' => 0,\n                'extracted_columnspec' => array(),\n                'columnMeta' => array(),\n                'submit_attribute' => false,\n                )\n            )\n        . '</td>'\n        . '<td class=\"nowrap\" name=\"col_isNull\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_null')\n            ->render(\n                array(\n                'columnNumber' => 0,\n                'ci' => 6,\n                'ci_offset' => 0,\n                'columnMeta' => array()\n                )\n            )\n        . '</td>'\n        . '<td class=\"nowrap\" name=\"col_extra\">'\n        . PMA\\libraries\\Template::get('columns_definitions/column_extra')->render(\n            array(\n                'columnNumber' => 0,\n                'ci' => 7,\n                'ci_offset' => 0,\n                'columnMeta' => array()\n            )\n        )\n        . '</td>'\n        . ' <td>'\n        . '<input id=\"add_column_save\" type=\"submit\" '\n        . ' value=\"Save\"/></td>'\n        . '</tr>';\n    $addNewColumn .= '</table></form></div>';\n    return $addNewColumn;\n}\n\n/**\n * Get HTML for editing page central columns\n *\n * @param array  $selected_fld Array containing the selected fields\n * @param string $selected_db  String containing the name of database\n *\n * @return string HTML for complete editing page for central columns\n */\nfunction PMA_getHTMLforEditingPage($selected_fld,$selected_db)\n{\n    $html = '<form id=\"multi_edit_central_columns\">';\n    $header_cells = array(\n        __('Name'), __('Type'), __('Length/Values'), __('Default'),\n        __('Collation'), __('Attributes'), __('Null'), __('A_I')\n    );\n    $html .= PMA_getCentralColumnsEditTableHeader($header_cells);\n    $selected_fld_safe = array();\n    foreach ($selected_fld as $key) {\n        $selected_fld_safe[] = Util::sqlAddSlashes($key);\n    }\n    $columns_list = implode(\"','\", $selected_fld_safe);\n    $columns_list = \"'\" . $columns_list . \"'\";\n    $list_detail_cols = PMA_findExistingColNames($selected_db, $columns_list, true);\n    $odd_row = false;\n    $row_num = 0;\n    foreach ($list_detail_cols as $row) {\n        $tableHtmlRow = PMA_getHTMLforCentralColumnsEditTableRow(\n            $row, $odd_row, $row_num\n        );\n        $html .= $tableHtmlRow;\n        $odd_row = !$odd_row;\n        $row_num++;\n    }\n    $html .= '</table>';\n    $html .= PMA_getCentralColumnsEditTableFooter();\n    $html .= '</form>';\n    return $html;\n}\n"], "filenames": ["libraries/central_columns.lib.php"], "buggy_code_start_loc": [63], "buggy_code_end_loc": [1163], "fixing_code_start_loc": [63], "fixing_code_end_loc": [1163], "type": "CWE-89", "message": "SQL injection vulnerability in libraries/central_columns.lib.php in phpMyAdmin 4.4.x before 4.4.15.7 and 4.6.x before 4.6.3 allows remote attackers to execute arbitrary SQL commands via a crafted database name that is mishandled in a central column query.", "other": {"cve": {"id": "CVE-2016-5703", "sourceIdentifier": "cve@mitre.org", "published": "2016-07-03T01:59:14.610", "lastModified": "2018-10-30T16:27:35.843", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "SQL injection vulnerability in libraries/central_columns.lib.php in phpMyAdmin 4.4.x before 4.4.15.7 and 4.6.x before 4.6.3 allows remote attackers to execute arbitrary SQL commands via a crafted database name that is mishandled in a central column query."}, {"lang": "es", "value": "Vulnerbilidad de inyecci\u00f3n SQL en libraries/central_columns.lib.php en phpMyAdmin 4.4.x en versiones anteriores a 4.4.15.7 y 4.6.x before 4.6.3 permite a atacantes remotos ejecutar comando SQL arbitrarios a trav\u00e9s de un nombre de database manipulado que es manejado incorrectamente en una consulta de la columna central."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:42.1:*:*:*:*:*:*:*", "matchCriteriaId": "4863BE36-D16A-4D75-90D9-FD76DB5B48B7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.1:*:*:*:*:*:*:*", "matchCriteriaId": "A10BC294-9196-425F-9FB0-B1625465B47F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.2:*:*:*:*:*:*:*", "matchCriteriaId": "03117DF1-3BEC-4B8D-AD63-DBBDB2126081"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "13CD0228-728B-437A-84C1-BD7AFA52FFB5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "DFF55485-9892-4E7B-AEE0-017E61EAA7C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "6100FE3E-0A31-4B55-90F2-90AF765A8EB7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "FBAAC8D9-AAA5-487C-B4AA-84BAE5DB109E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "5E06B1D3-29B4-45B7-B81F-C864AF579011"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "6B2E3923-0E2B-411A-B091-088E6FF050D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "1848C748-804D-4FE4-AB9C-B1BF9E58A19C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "12296322-DFAD-4B36-83EC-D01BF5DF7F2A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "EA321C14-C8F4-41FC-B601-2F646064ABBF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "54DBCF86-0CE8-46C4-B2E7-E3224765CCFE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "1BF3DBC5-7020-48D0-ADEA-E71776DB2285"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "317F952E-5F12-4ED3-8FA3-FC1106B50F85"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "87B97F98-C0A7-4D9E-8333-7EE9EC456A12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "7A1E753D-5653-4D7A-8E41-6C02511EBFCE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.12:*:*:*:*:*:*:*", "matchCriteriaId": "417230C7-0EC2-49F4-B810-A8AE84A302AD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13:*:*:*:*:*:*:*", "matchCriteriaId": "103FEAB1-194E-4CEF-935A-4DBCCA298205"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13.1:*:*:*:*:*:*:*", "matchCriteriaId": "C5814003-9FF8-4F8E-9D90-A2BBB80B8451"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.14.1:*:*:*:*:*:*:*", "matchCriteriaId": "16D28B77-9353-4259-9299-30638A78CCD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15:*:*:*:*:*:*:*", "matchCriteriaId": "C022292B-6E06-4328-842F-135A872D22AF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.1:*:*:*:*:*:*:*", "matchCriteriaId": "F15F00FB-BB9B-4D54-B198-0A74D418B8DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.2:*:*:*:*:*:*:*", "matchCriteriaId": "DC10AF20-7B65-4FAE-A2AD-783867D60A8D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.3:*:*:*:*:*:*:*", "matchCriteriaId": "4EB7190C-0401-4E2E-B15F-4CFC79D5A4E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.4:*:*:*:*:*:*:*", "matchCriteriaId": "4BED20D9-C571-4BC5-9A54-450A364C6E43"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.5:*:*:*:*:*:*:*", "matchCriteriaId": "2A2B646D-DDFC-4CB2-B7F4-0C33AF18D14F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.6:*:*:*:*:*:*:*", "matchCriteriaId": "9CBF68B2-2BCF-4EEB-8A7C-D83DCAF1AFB4"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "C641F362-D37D-47CB-BE6C-36E5F116F844"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "A0EA8819-70F8-48DC-8667-6CF25E7D9C53"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "DD2796DA-3E74-4765-90D1-783849C7A44C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "4024DA77-BFE4-48C6-A2AF-46003071BDE8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "85631B69-7060-42D1-AE24-466BA10EB390"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "E62EDC79-47AA-4CED-AB7F-1E4D158EB653"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-updates/2016-06/msg00113.html", "source": "cve@mitre.org"}, {"url": "http://lists.opensuse.org/opensuse-updates/2016-06/msg00114.html", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/91381", "source": "cve@mitre.org"}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/ef6c66dca1b0cb0a1a482477938cfc859d2baee3", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://security.gentoo.org/glsa/201701-32", "source": "cve@mitre.org"}, {"url": "https://www.phpmyadmin.net/security/PMASA-2016-19/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/ef6c66dca1b0cb0a1a482477938cfc859d2baee3"}}