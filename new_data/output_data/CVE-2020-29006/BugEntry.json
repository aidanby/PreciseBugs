{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\n\nclass GalaxyElementsController extends AppController\n{\n    public $components = array('Session', 'RequestHandler');\n\n    public $paginate = array(\n            'limit' => 20,\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events <- no we won't, this is the max a user van view/page.\n            'recursive' => -1,\n            'order' => array(\n                'GalaxyElement.key' => 'ASC'\n            )\n    );\n\n    public function index($id)\n    {\n        $this->paginate['conditions'] = array('GalaxyElement.galaxy_cluster_id' => $id);\n        $clusters = $this->paginate();\n        $this->set('list', $clusters);\n        if ($this->request->is('ajax')) {\n            $this->layout = 'ajax';\n            $this->render('ajax/index');\n        }\n    }\n}\n", "<?php\nApp::uses('AppModel', 'Model');\nclass GalaxyElement extends AppModel\n{\n    public $useTable = 'galaxy_elements';\n\n    public $recursive = -1;\n\n    public $actsAs = array(\n            'Containable',\n    );\n\n    public $validate = array(\n    );\n\n    public $belongsTo = array(\n            'GalaxyCluster' => array(\n                'className' => 'GalaxyCluster',\n                'foreignKey' => 'galaxy_cluster_id',\n            )\n    );\n\n    public function beforeValidate($options = array())\n    {\n        parent::beforeValidate();\n        return true;\n    }\n\n    public function updateElements($oldClusterId, $newClusterId, $elements, $delete=true)\n    {\n        if ($delete) {\n            $this->deleteAll(array('GalaxyElement.galaxy_cluster_id' => $oldClusterId));\n        }\n        $tempElements = array();\n        foreach ($elements as $key => $value) {\n            if (is_array($value)) {\n                foreach ($value as $arrayElement) {\n                    $tempElements[] = array(\n                        'key' => $key,\n                        'value' => $arrayElement,\n                        'galaxy_cluster_id' => $newClusterId\n                    );\n                }\n            } else {\n                $tempElements[] = array(\n                    'key' => $key,\n                    'value' => $value,\n                    'galaxy_cluster_id' => $newClusterId\n                );\n            }\n        }\n        $this->saveMany($tempElements);\n    }\n\n    public function update($galaxy_id, $oldClusters, $newClusters)\n    {\n        $elementsToSave = array();\n        // Since we are dealing with flat files as the end all be all content, we are safe to just drop all of the old clusters and recreate them.\n        foreach ($oldClusters as $oldCluster) {\n            $this->deleteAll(array('GalaxyElement.galaxy_cluster_id' => $oldCluster['GalaxyCluster']['id']));\n        }\n        foreach ($newClusters as $newCluster) {\n            $tempCluster = array();\n            foreach ($newCluster as $key => $value) {\n                // Don't store the reserved fields as elements\n                if ($key == 'description' || $key == 'value') {\n                    continue;\n                }\n                if (is_array($value)) {\n                    foreach ($value as $arrayElement) {\n                        $tempCluster[] = array('key' => $key, 'value' => $arrayElement);\n                    }\n                } else {\n                    $tempCluster[] = array('key' => $key, 'value' => $value);\n                }\n            }\n\n            foreach ($tempCluster as $key => $value) {\n                $tempCluster[$key]['galaxy_cluster_id'] = $oldCluster['GalaxyCluster']['id'];\n            }\n            $elementsToSave = array_merge($elementsToSave, $tempCluster);\n        }\n        $this->saveMany($elementsToSave);\n    }\n\n    public function captureElements($user, $elements, $clusterId)\n    {\n        $tempElements = array();\n        foreach ($elements as $k => $element) {\n            $tempElements[] = array(\n                'key' => $element['key'],\n                'value' => $element['value'],\n                'galaxy_cluster_id' => $clusterId,\n            );\n        }\n        $this->saveMany($tempElements);\n    }\n}\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\n\nclass GalaxyElementsController extends AppController\n{\n    public $components = array('Session', 'RequestHandler');\n\n    public $paginate = array(\n            'limit' => 20,\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events <- no we won't, this is the max a user van view/page.\n            'recursive' => -1,\n            'order' => array(\n                'GalaxyElement.key' => 'ASC'\n            )\n    );\n\n    public function index($clusterId)\n    {\n        $aclConditions = $this->GalaxyElement->buildClusterConditions($this->Auth->user(), $clusterId);\n        $this->paginate['conditions'] = [$aclConditions];\n        $this->paginate['contain'] = ['GalaxyCluster' => ['fields' => ['id', 'distribution', 'org_id']]];\n        $clusters = $this->paginate();\n        $this->set('list', $clusters);\n        if ($this->request->is('ajax')) {\n            $this->layout = 'ajax';\n            $this->render('ajax/index');\n        }\n    }\n}\n", "<?php\nApp::uses('AppModel', 'Model');\nclass GalaxyElement extends AppModel\n{\n    public $useTable = 'galaxy_elements';\n\n    public $recursive = -1;\n\n    public $actsAs = array(\n            'Containable',\n    );\n\n    public $validate = array(\n    );\n\n    public $belongsTo = array(\n            'GalaxyCluster' => array(\n                'className' => 'GalaxyCluster',\n                'foreignKey' => 'galaxy_cluster_id',\n            )\n    );\n\n    public function beforeValidate($options = array())\n    {\n        parent::beforeValidate();\n        return true;\n    }\n\n    public function updateElements($oldClusterId, $newClusterId, $elements, $delete=true)\n    {\n        if ($delete) {\n            $this->deleteAll(array('GalaxyElement.galaxy_cluster_id' => $oldClusterId));\n        }\n        $tempElements = array();\n        foreach ($elements as $key => $value) {\n            if (is_array($value)) {\n                foreach ($value as $arrayElement) {\n                    $tempElements[] = array(\n                        'key' => $key,\n                        'value' => $arrayElement,\n                        'galaxy_cluster_id' => $newClusterId\n                    );\n                }\n            } else {\n                $tempElements[] = array(\n                    'key' => $key,\n                    'value' => $value,\n                    'galaxy_cluster_id' => $newClusterId\n                );\n            }\n        }\n        $this->saveMany($tempElements);\n    }\n\n    public function update($galaxy_id, $oldClusters, $newClusters)\n    {\n        $elementsToSave = array();\n        // Since we are dealing with flat files as the end all be all content, we are safe to just drop all of the old clusters and recreate them.\n        foreach ($oldClusters as $oldCluster) {\n            $this->deleteAll(array('GalaxyElement.galaxy_cluster_id' => $oldCluster['GalaxyCluster']['id']));\n        }\n        foreach ($newClusters as $newCluster) {\n            $tempCluster = array();\n            foreach ($newCluster as $key => $value) {\n                // Don't store the reserved fields as elements\n                if ($key == 'description' || $key == 'value') {\n                    continue;\n                }\n                if (is_array($value)) {\n                    foreach ($value as $arrayElement) {\n                        $tempCluster[] = array('key' => $key, 'value' => $arrayElement);\n                    }\n                } else {\n                    $tempCluster[] = array('key' => $key, 'value' => $value);\n                }\n            }\n\n            foreach ($tempCluster as $key => $value) {\n                $tempCluster[$key]['galaxy_cluster_id'] = $oldCluster['GalaxyCluster']['id'];\n            }\n            $elementsToSave = array_merge($elementsToSave, $tempCluster);\n        }\n        $this->saveMany($elementsToSave);\n    }\n\n    public function captureElements($user, $elements, $clusterId)\n    {\n        $tempElements = array();\n        foreach ($elements as $k => $element) {\n            $tempElements[] = array(\n                'key' => $element['key'],\n                'value' => $element['value'],\n                'galaxy_cluster_id' => $clusterId,\n            );\n        }\n        $this->saveMany($tempElements);\n    }\n\n    public function buildACLConditions($user)\n    {\n        $conditions = [];\n        if (!$user['Role']['perm_site_admin']) {\n            $conditions = $this->GalaxyCluster->buildConditions($user);\n        }\n        return $conditions;\n    }\n\n    public function buildClusterConditions($user, $clusterId)\n    {\n        return [\n            $this->buildACLConditions($user),\n            'GalaxyCluster.id' => $clusterId\n        ];\n    }\n\n    public function fetchElements(array $user, $clusterId)\n    {\n        $params = array(\n            'conditions' => $this->buildClusterConditions($user, $clusterId),\n            'contain' => ['GalaxyCluster' => ['fields' => ['id', 'distribution', 'org_id']]],\n            'recursive' => -1\n        );\n        $elements = $this->find('all', $params);\n        foreach ($elements as $i => $element) {\n            $elements[$i] = $elements[$i]['GalaxyElement'];\n            unset($elements[$i]['GalaxyCluster']);\n            unset($elements[$i]['GalaxyElement']);\n        }\n        return $elements;\n    }\n}\n"], "filenames": ["app/Controller/GalaxyElementsController.php", "app/Model/GalaxyElement.php"], "buggy_code_start_loc": [17, 97], "buggy_code_end_loc": [20, 97], "fixing_code_start_loc": [17, 98], "fixing_code_end_loc": [22, 131], "type": "CWE-862", "message": "MISP before 2.4.135 lacks an ACL check, related to app/Controller/GalaxyElementsController.php and app/Model/GalaxyElement.php.", "other": {"cve": {"id": "CVE-2020-29006", "sourceIdentifier": "cve@mitre.org", "published": "2020-11-24T15:15:12.873", "lastModified": "2020-12-03T15:36:36.947", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MISP before 2.4.135 lacks an ACL check, related to app/Controller/GalaxyElementsController.php and app/Model/GalaxyElement.php."}, {"lang": "es", "value": "MISP versiones anteriores a 2.4.135, carece de una comprobaci\u00f3n de la ACL, relacionada con los archivos app/Controller/GalaxyElementsController.php y app/ Model/GalaxyElement.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.135", "matchCriteriaId": "1D3B730E-CE38-4B7C-81B7-E95BC695CA5B"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/423750573d07f1a463f115ef37182c1825080da4", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/MISP/MISP/compare/v2.4.134...v2.4.135", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/423750573d07f1a463f115ef37182c1825080da4"}}