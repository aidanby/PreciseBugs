{"buggy_code": ["/*\n * Copyright 2011 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.gradle.plugins.signing.signatory.pgp;\n\nimport org.bouncycastle.bcpg.BCPGOutputStream;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport org.bouncycastle.openpgp.PGPException;\nimport org.bouncycastle.openpgp.PGPPrivateKey;\nimport org.bouncycastle.openpgp.PGPSecretKey;\nimport org.bouncycastle.openpgp.PGPSignature;\nimport org.bouncycastle.openpgp.PGPSignatureGenerator;\nimport org.bouncycastle.openpgp.PGPUtil;\nimport org.bouncycastle.openpgp.operator.PBESecretKeyDecryptor;\nimport org.bouncycastle.openpgp.operator.bc.BcPBESecretKeyDecryptorBuilder;\nimport org.bouncycastle.openpgp.operator.bc.BcPGPContentSignerBuilder;\nimport org.bouncycastle.openpgp.operator.bc.BcPGPDigestCalculatorProvider;\nimport org.gradle.api.UncheckedIOException;\nimport org.gradle.internal.UncheckedException;\nimport org.gradle.plugins.signing.signatory.SignatorySupport;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.security.Security;\n\n/**\n * PGP signatory from PGP key and password.\n */\npublic class PgpSignatory extends SignatorySupport {\n\n    {\n        Security.addProvider(new BouncyCastleProvider());\n    }\n\n    private final String name;\n    private final PGPSecretKey secretKey;\n    private final PGPPrivateKey privateKey;\n\n    public PgpSignatory(String name, PGPSecretKey secretKey, String password) {\n        this.name = name;\n        this.secretKey = secretKey;\n        this.privateKey = createPrivateKey(secretKey, password);\n    }\n\n    @Override\n    public final String getName() {\n        return name;\n    }\n\n    /**\n     * Exhausts {@code toSign}, and writes the signature to {@code signatureDestination}.\n     *\n     * The caller is responsible for closing the streams, though the output WILL be flushed.\n     */\n    @Override\n    public void sign(InputStream toSign, OutputStream signatureDestination) {\n        PGPSignatureGenerator generator = createSignatureGenerator();\n        try {\n            feedGeneratorWith(toSign, generator);\n\n            PGPSignature signature = generator.generate();\n            writeSignatureTo(signatureDestination, signature);\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        } catch (PGPException e) {\n            throw UncheckedException.throwAsUncheckedException(e);\n        }\n    }\n\n    @Override\n    public String getKeyId() {\n        PgpKeyId id = new PgpKeyId(secretKey.getKeyID());\n        return id == null ? null : id.getAsHex();\n    }\n\n    private void feedGeneratorWith(InputStream toSign, PGPSignatureGenerator generator) throws IOException {\n        byte[] buffer = new byte[1024];\n        int read = toSign.read(buffer);\n        while (read > 0) {\n            generator.update(buffer, 0, read);\n            read = toSign.read(buffer);\n        }\n    }\n\n    private void writeSignatureTo(OutputStream signatureDestination, PGPSignature pgpSignature) throws PGPException, IOException {\n        // BCPGOutputStream seems to do some internal buffering, it's unclear whether it's strictly required here though\n        BCPGOutputStream bufferedOutput = new BCPGOutputStream(signatureDestination);\n        pgpSignature.encode(bufferedOutput);\n        bufferedOutput.flush();\n    }\n\n    public PGPSignatureGenerator createSignatureGenerator() {\n        try {\n            PGPSignatureGenerator generator = new PGPSignatureGenerator(new BcPGPContentSignerBuilder(secretKey.getPublicKey().getAlgorithm(), PGPUtil.SHA1));\n            generator.init(PGPSignature.BINARY_DOCUMENT, privateKey);\n            return generator;\n        } catch (PGPException e) {\n            throw UncheckedException.throwAsUncheckedException(e);\n        }\n    }\n\n    private PGPPrivateKey createPrivateKey(PGPSecretKey secretKey, String password) {\n        try {\n            PBESecretKeyDecryptor decryptor = new BcPBESecretKeyDecryptorBuilder(new BcPGPDigestCalculatorProvider()).build(password.toCharArray());\n            return secretKey.extractPrivateKey(decryptor);\n        } catch (PGPException e) {\n            throw UncheckedException.throwAsUncheckedException(e);\n        }\n    }\n}\n"], "fixing_code": ["/*\n * Copyright 2011 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.gradle.plugins.signing.signatory.pgp;\n\nimport org.bouncycastle.bcpg.BCPGOutputStream;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport org.bouncycastle.openpgp.PGPException;\nimport org.bouncycastle.openpgp.PGPPrivateKey;\nimport org.bouncycastle.openpgp.PGPSecretKey;\nimport org.bouncycastle.openpgp.PGPSignature;\nimport org.bouncycastle.openpgp.PGPSignatureGenerator;\nimport org.bouncycastle.openpgp.PGPUtil;\nimport org.bouncycastle.openpgp.operator.PBESecretKeyDecryptor;\nimport org.bouncycastle.openpgp.operator.bc.BcPBESecretKeyDecryptorBuilder;\nimport org.bouncycastle.openpgp.operator.bc.BcPGPContentSignerBuilder;\nimport org.bouncycastle.openpgp.operator.bc.BcPGPDigestCalculatorProvider;\nimport org.gradle.api.UncheckedIOException;\nimport org.gradle.internal.UncheckedException;\nimport org.gradle.plugins.signing.signatory.SignatorySupport;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.security.Security;\n\n/**\n * PGP signatory from PGP key and password.\n */\npublic class PgpSignatory extends SignatorySupport {\n\n    {\n        Security.addProvider(new BouncyCastleProvider());\n    }\n\n    private final String name;\n    private final PGPSecretKey secretKey;\n    private final PGPPrivateKey privateKey;\n\n    public PgpSignatory(String name, PGPSecretKey secretKey, String password) {\n        this.name = name;\n        this.secretKey = secretKey;\n        this.privateKey = createPrivateKey(secretKey, password);\n    }\n\n    @Override\n    public final String getName() {\n        return name;\n    }\n\n    /**\n     * Exhausts {@code toSign}, and writes the signature to {@code signatureDestination}.\n     *\n     * The caller is responsible for closing the streams, though the output WILL be flushed.\n     */\n    @Override\n    public void sign(InputStream toSign, OutputStream signatureDestination) {\n        PGPSignatureGenerator generator = createSignatureGenerator();\n        try {\n            feedGeneratorWith(toSign, generator);\n\n            PGPSignature signature = generator.generate();\n            writeSignatureTo(signatureDestination, signature);\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        } catch (PGPException e) {\n            throw UncheckedException.throwAsUncheckedException(e);\n        }\n    }\n\n    @Override\n    public String getKeyId() {\n        PgpKeyId id = new PgpKeyId(secretKey.getKeyID());\n        return id == null ? null : id.getAsHex();\n    }\n\n    private void feedGeneratorWith(InputStream toSign, PGPSignatureGenerator generator) throws IOException {\n        byte[] buffer = new byte[1024];\n        int read = toSign.read(buffer);\n        while (read > 0) {\n            generator.update(buffer, 0, read);\n            read = toSign.read(buffer);\n        }\n    }\n\n    private void writeSignatureTo(OutputStream signatureDestination, PGPSignature pgpSignature) throws PGPException, IOException {\n        // BCPGOutputStream seems to do some internal buffering, it's unclear whether it's strictly required here though\n        BCPGOutputStream bufferedOutput = new BCPGOutputStream(signatureDestination);\n        pgpSignature.encode(bufferedOutput);\n        bufferedOutput.flush();\n    }\n\n    public PGPSignatureGenerator createSignatureGenerator() {\n        try {\n            PGPSignatureGenerator generator = new PGPSignatureGenerator(new BcPGPContentSignerBuilder(secretKey.getPublicKey().getAlgorithm(), PGPUtil.SHA512));\n            generator.init(PGPSignature.BINARY_DOCUMENT, privateKey);\n            return generator;\n        } catch (PGPException e) {\n            throw UncheckedException.throwAsUncheckedException(e);\n        }\n    }\n\n    private PGPPrivateKey createPrivateKey(PGPSecretKey secretKey, String password) {\n        try {\n            PBESecretKeyDecryptor decryptor = new BcPBESecretKeyDecryptorBuilder(new BcPGPDigestCalculatorProvider()).build(password.toCharArray());\n            return secretKey.extractPrivateKey(decryptor);\n        } catch (PGPException e) {\n            throw UncheckedException.throwAsUncheckedException(e);\n        }\n    }\n}\n"], "filenames": ["subprojects/signing/src/main/java/org/gradle/plugins/signing/signatory/pgp/PgpSignatory.java"], "buggy_code_start_loc": [107], "buggy_code_end_loc": [108], "fixing_code_start_loc": [107], "fixing_code_end_loc": [108], "type": "CWE-327", "message": "The PGP signing plugin in Gradle before 6.0 relies on the SHA-1 algorithm, which might allow an attacker to replace an artifact with a different one that has the same SHA-1 message digest, a related issue to CVE-2005-4900.", "other": {"cve": {"id": "CVE-2019-16370", "sourceIdentifier": "cve@mitre.org", "published": "2019-09-16T18:15:12.190", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The PGP signing plugin in Gradle before 6.0 relies on the SHA-1 algorithm, which might allow an attacker to replace an artifact with a different one that has the same SHA-1 message digest, a related issue to CVE-2005-4900."}, {"lang": "es", "value": "El plugin PGP signing en Gradle versiones anteriores a 6.0, se basa en el algoritmo SHA-1, lo que podr\u00eda permitir a un atacante reemplazar un artefacto por otro diferente que tenga el mismo resumen de mensaje SHA-1, un problema relacionado con el CVE-2005-4900."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-327"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gradle:gradle:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.0", "matchCriteriaId": "2F74A953-F15A-46FD-9A96-9B25B5F154A2"}]}]}], "references": [{"url": "https://github.com/gradle/gradle/commit/425b2b7a50cd84106a77cdf1ab665c89c6b14d2f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/gradle/gradle/pull/10543", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/gradle/gradle/commit/425b2b7a50cd84106a77cdf1ab665c89c6b14d2f"}}