{"buggy_code": ["{\n    \"name\": \"statamic/cms\",\n    \"description\": \"The Statamic CMS Core Package\",\n    \"keywords\": [\n        \"statamic\",\n        \"cms\",\n        \"flat file\",\n        \"laravel\"\n    ],\n    \"license\": \"proprietary\",\n    \"require\": {\n        \"ext-json\": \"*\",\n        \"ajthinking/archetype\": \"^1.0.3\",\n        \"composer/composer\": \"^1.10.22 || ^2.2.12\",\n        \"facade/ignition-contracts\": \"^1.0\",\n        \"guzzlehttp/guzzle\": \"^6.3 || ^7.0\",\n        \"james-heinrich/getid3\": \"^1.9.21\",\n        \"laravel/framework\": \"^9.50.0 || ^10.0\",\n        \"laravel/helpers\": \"^1.1\",\n        \"league/commonmark\": \"^2.2\",\n        \"league/csv\": \"^9.0\",\n        \"league/glide\": \"^1.1 || ^2.0\",\n        \"maennchen/zipstream-php\": \"^2.2\",\n        \"michelf/php-smartypants\": \"^1.8.1\",\n        \"nesbot/carbon\": \"^2.62.1\",\n        \"pixelfear/composer-dist-plugin\": \"^0.1.4\",\n        \"rebing/graphql-laravel\": \"^6.5 || ^8.0\",\n        \"spatie/blink\": \"^1.1.2\",\n        \"statamic/stringy\": \"^3.1.2\",\n        \"symfony/http-foundation\": \"^4.3.3 || ^5.1.4 || ^6.0\",\n        \"symfony/lock\": \"^5.4\",\n        \"symfony/var-exporter\": \"^4.3 || ^5.1 || ^6.0\",\n        \"symfony/yaml\": \"^4.1 || ^5.1 || ^6.0\",\n        \"ueberdosis/tiptap-php\": \"^1.1\",\n        \"voku/portable-ascii\": \"^1.6.1 || ^2.0\",\n        \"wilderborn/partyline\": \"^1.0\"\n    },\n    \"require-dev\": {\n        \"fakerphp/faker\": \"~1.10\",\n        \"google/cloud-translate\": \"^1.6\",\n        \"mockery/mockery\": \"^1.3.3\",\n        \"orchestra/testbench\": \"^7.0 || ^8.0\",\n        \"phpunit/phpunit\": \"^9.0\"\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"composer/package-versions-deprecated\": true,\n            \"pixelfear/composer-dist-plugin\": true\n        }\n    },\n    \"extra\": {\n        \"download-dist\": [\n            {\n                \"url\": \"https://github.com/statamic/cms/releases/download/{$version}/dist.tar.gz\",\n                \"path\": \"resources/dist\"\n            },\n            {\n                \"url\": \"https://github.com/statamic/cms/releases/download/{$version}/dist-frontend.tar.gz\",\n                \"path\": \"resources/dist-frontend\"\n            }\n        ],\n        \"laravel\": {\n            \"providers\": [\n                \"Statamic\\\\Providers\\\\StatamicServiceProvider\"\n            ],\n            \"aliases\": {\n                \"Statamic\": \"Statamic\\\\Statamic\"\n            }\n        }\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Statamic\\\\\": \"src/\"\n        },\n        \"files\": [\n            \"src/helpers.php\",\n            \"src/namespaced_helpers.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests\",\n            \"Foo\\\\Bar\\\\\": \"tests/Fixtures/Addon\"\n        }\n    }\n}\n", "<?php\n\nnamespace Statamic\\Tags;\n\nuse Statamic\\Facades\\File;\nuse Statamic\\Facades\\URL;\nuse Statamic\\Support\\Str;\nuse Stringy\\StaticStringy;\n\nclass Svg extends Tags\n{\n    use Concerns\\RendersAttributes;\n\n    public function wildcard($src)\n    {\n        $this->params['src'] = $src;\n\n        return $this->index();\n    }\n\n    public function index()\n    {\n        $name = Str::ensureRight($this->params->get('src'), '.svg');\n\n        $cascade = [\n            resource_path('svg'),\n            resource_path(),\n            public_path('svg'),\n            public_path(),\n        ];\n\n        $svg = null;\n\n        foreach ($cascade as $location) {\n            $file = Url::assemble($location, $name);\n            if (File::exists($file)) {\n                $svg = StaticStringy::collapseWhitespace(\n                    File::get($file)\n                );\n                break;\n            }\n        }\n\n        $attributes = $this->renderAttributesFromParams(['src', 'title', 'desc']);\n\n        if ($this->params->get('title') || $this->params->get('desc')) {\n            $svg = $this->setTitleAndDesc($svg);\n        }\n\n        return str_replace(\n            '<svg',\n            collect(['<svg', $attributes])->filter()->implode(' '),\n            $svg\n        );\n    }\n\n    private function setTitleAndDesc($svg)\n    {\n        $doc = new \\DOMDocument;\n        $doc->loadXML($svg);\n\n        if ($desc = $this->params->get('desc')) {\n            if ($el = $doc->getElementsByTagName('desc')[0]) {\n                $el->nodeValue = $desc;\n            } else {\n                $el = $doc->createElement('desc', $desc);\n                $doc->firstChild->insertBefore($el, $doc->firstChild->firstChild);\n            }\n        }\n\n        if ($title = $this->params->get('title')) {\n            if ($el = $doc->getElementsByTagName('title')[0]) {\n                $el->nodeValue = $title;\n            } else {\n                $el = $doc->createElement('title', $title);\n                $doc->firstChild->insertBefore($el, $doc->firstChild->firstChild);\n            }\n        }\n\n        return $doc->saveHTML();\n    }\n}\n", "<?php\n\nnamespace Tests\\Tags;\n\nuse Illuminate\\Support\\Facades\\File;\nuse Statamic\\Facades\\Parse;\nuse Tests\\TestCase;\n\nclass SvgTagTest extends TestCase\n{\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        File::copy(__DIR__.'/../../resources/svg/icons/light/users.svg', resource_path('users.svg'));\n    }\n\n    private function tag($tag)\n    {\n        return Parse::template($tag, []);\n    }\n\n    /** @test */\n    public function it_renders_svg()\n    {\n        $this->assertStringStartsWith('<svg xmlns=\"', $this->tag('{{ svg:users }}'));\n        $this->assertStringStartsWith('<svg xmlns=\"', $this->tag('{{ svg src=\"users\" }}'));\n    }\n\n    /** @test */\n    public function it_renders_svg_with_additional_params()\n    {\n        $this->assertStringStartsWith('<svg class=\"mb-2\" xmlns=\"', $this->tag('{{ svg src=\"users\" class=\"mb-2\" }}'));\n    }\n}\n"], "fixing_code": ["{\n    \"name\": \"statamic/cms\",\n    \"description\": \"The Statamic CMS Core Package\",\n    \"keywords\": [\n        \"statamic\",\n        \"cms\",\n        \"flat file\",\n        \"laravel\"\n    ],\n    \"license\": \"proprietary\",\n    \"require\": {\n        \"ext-json\": \"*\",\n        \"ajthinking/archetype\": \"^1.0.3\",\n        \"composer/composer\": \"^1.10.22 || ^2.2.12\",\n        \"enshrined/svg-sanitize\": \"^0.16.0\",\n        \"facade/ignition-contracts\": \"^1.0\",\n        \"guzzlehttp/guzzle\": \"^6.3 || ^7.0\",\n        \"james-heinrich/getid3\": \"^1.9.21\",\n        \"laravel/framework\": \"^9.50.0 || ^10.0\",\n        \"laravel/helpers\": \"^1.1\",\n        \"league/commonmark\": \"^2.2\",\n        \"league/csv\": \"^9.0\",\n        \"league/glide\": \"^1.1 || ^2.0\",\n        \"maennchen/zipstream-php\": \"^2.2\",\n        \"michelf/php-smartypants\": \"^1.8.1\",\n        \"nesbot/carbon\": \"^2.62.1\",\n        \"pixelfear/composer-dist-plugin\": \"^0.1.4\",\n        \"rebing/graphql-laravel\": \"^6.5 || ^8.0\",\n        \"spatie/blink\": \"^1.1.2\",\n        \"statamic/stringy\": \"^3.1.2\",\n        \"symfony/http-foundation\": \"^4.3.3 || ^5.1.4 || ^6.0\",\n        \"symfony/lock\": \"^5.4\",\n        \"symfony/var-exporter\": \"^4.3 || ^5.1 || ^6.0\",\n        \"symfony/yaml\": \"^4.1 || ^5.1 || ^6.0\",\n        \"ueberdosis/tiptap-php\": \"^1.1\",\n        \"voku/portable-ascii\": \"^1.6.1 || ^2.0\",\n        \"wilderborn/partyline\": \"^1.0\"\n    },\n    \"require-dev\": {\n        \"fakerphp/faker\": \"~1.10\",\n        \"google/cloud-translate\": \"^1.6\",\n        \"mockery/mockery\": \"^1.3.3\",\n        \"orchestra/testbench\": \"^7.0 || ^8.0\",\n        \"phpunit/phpunit\": \"^9.0\"\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"composer/package-versions-deprecated\": true,\n            \"pixelfear/composer-dist-plugin\": true\n        }\n    },\n    \"extra\": {\n        \"download-dist\": [\n            {\n                \"url\": \"https://github.com/statamic/cms/releases/download/{$version}/dist.tar.gz\",\n                \"path\": \"resources/dist\"\n            },\n            {\n                \"url\": \"https://github.com/statamic/cms/releases/download/{$version}/dist-frontend.tar.gz\",\n                \"path\": \"resources/dist-frontend\"\n            }\n        ],\n        \"laravel\": {\n            \"providers\": [\n                \"Statamic\\\\Providers\\\\StatamicServiceProvider\"\n            ],\n            \"aliases\": {\n                \"Statamic\": \"Statamic\\\\Statamic\"\n            }\n        }\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Statamic\\\\\": \"src/\"\n        },\n        \"files\": [\n            \"src/helpers.php\",\n            \"src/namespaced_helpers.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests\",\n            \"Foo\\\\Bar\\\\\": \"tests/Fixtures/Addon\"\n        }\n    }\n}\n", "<?php\n\nnamespace Statamic\\Tags;\n\nuse enshrined\\svgSanitize\\data\\AllowedAttributes;\nuse enshrined\\svgSanitize\\data\\AllowedTags;\nuse enshrined\\svgSanitize\\Sanitizer;\nuse Statamic\\Facades\\File;\nuse Statamic\\Facades\\URL;\nuse Statamic\\Support\\Str;\nuse Stringy\\StaticStringy;\n\nclass Svg extends Tags\n{\n    use Concerns\\RendersAttributes;\n\n    public function wildcard($src)\n    {\n        $this->params['src'] = $src;\n\n        return $this->index();\n    }\n\n    public function index()\n    {\n        $name = Str::ensureRight($this->params->get('src'), '.svg');\n\n        $cascade = [\n            resource_path('svg'),\n            resource_path(),\n            public_path('svg'),\n            public_path(),\n        ];\n\n        $svg = null;\n\n        foreach ($cascade as $location) {\n            $file = Url::assemble($location, $name);\n            if (File::exists($file)) {\n                $svg = StaticStringy::collapseWhitespace(\n                    File::get($file)\n                );\n                break;\n            }\n        }\n\n        $attributes = $this->renderAttributesFromParams(['src', 'title', 'desc']);\n\n        if ($this->params->get('title') || $this->params->get('desc')) {\n            $svg = $this->setTitleAndDesc($svg);\n        }\n\n        $svg = str_replace(\n            '<svg',\n            collect(['<svg', $attributes])->filter()->implode(' '),\n            $svg\n        );\n\n        return $this->sanitize($svg);\n    }\n\n    private function setTitleAndDesc($svg)\n    {\n        $doc = new \\DOMDocument;\n        $doc->loadXML($svg);\n\n        if ($desc = $this->params->get('desc')) {\n            if ($el = $doc->getElementsByTagName('desc')[0]) {\n                $el->nodeValue = $desc;\n            } else {\n                $el = $doc->createElement('desc', $desc);\n                $doc->firstChild->insertBefore($el, $doc->firstChild->firstChild);\n            }\n        }\n\n        if ($title = $this->params->get('title')) {\n            if ($el = $doc->getElementsByTagName('title')[0]) {\n                $el->nodeValue = $title;\n            } else {\n                $el = $doc->createElement('title', $title);\n                $doc->firstChild->insertBefore($el, $doc->firstChild->firstChild);\n            }\n        }\n\n        return $doc->saveHTML();\n    }\n\n    private function sanitize($svg)\n    {\n        if ($this->params->bool('sanitize') === false) {\n            return $svg;\n        }\n\n        $sanitizer = new Sanitizer;\n        $sanitizer->removeXMLTag(! Str::startsWith($svg, '<?xml'));\n        $sanitizer->setAllowedAttrs($this->getAllowedAttrs());\n        $sanitizer->setAllowedTags($this->getAllowedTags());\n\n        return $sanitizer->sanitize($svg);\n    }\n\n    private function getAllowedAttrs()\n    {\n        $attrs = $this->params->explode('allow_attrs', []);\n\n        return new class($attrs) extends AllowedAttributes\n        {\n            private static $attrs = [];\n\n            public function __construct($attrs)\n            {\n                self::$attrs = $attrs;\n            }\n\n            public static function getAttributes()\n            {\n                return array_merge(parent::getAttributes(), self::$attrs);\n            }\n        };\n    }\n\n    private function getAllowedTags()\n    {\n        $tags = $this->params->explode('allow_tags', []);\n\n        return new class($tags) extends AllowedTags\n        {\n            private static $tags = [];\n\n            public function __construct($tags)\n            {\n                self::$tags = $tags;\n            }\n\n            public static function getTags()\n            {\n                return array_merge(parent::getTags(), self::$tags);\n            }\n        };\n    }\n}\n", "<?php\n\nnamespace Tests\\Tags;\n\nuse Illuminate\\Support\\Facades\\File;\nuse Statamic\\Facades\\Parse;\nuse Statamic\\View\\Antlers\\Language\\Utilities\\StringUtilities;\nuse Tests\\TestCase;\n\nclass SvgTagTest extends TestCase\n{\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        File::copy(__DIR__.'/../../resources/svg/icons/light/users.svg', resource_path('users.svg'));\n    }\n\n    private function tag($tag)\n    {\n        $output = Parse::template($tag, []);\n\n        // Normalize whitespace and line breaks for testing ease.\n        return trim(StringUtilities::normalizeLineEndings($output));\n    }\n\n    /** @test */\n    public function it_renders_svg()\n    {\n        $this->assertStringStartsWith('<svg xmlns=\"', $this->tag('{{ svg:users }}'));\n        $this->assertStringStartsWith('<svg xmlns=\"', $this->tag('{{ svg src=\"users\" }}'));\n    }\n\n    /** @test */\n    public function it_renders_svg_with_additional_params()\n    {\n        $this->assertStringStartsWith('<svg class=\"mb-2\" xmlns=\"', $this->tag('{{ svg src=\"users\" class=\"mb-2\" }}'));\n    }\n\n    /** @test */\n    public function it_sanitizes()\n    {\n        File::put(resource_path('xss.svg'), <<<'SVG'\n<svg>\n    <path onload=\"loadxss\" onclick=\"clickxss\"></path>\n    <script>alert(\"xss\")</script>\n    <foreignObject></foreignObject>\n    <mesh></mesh>\n</svg>\nSVG);\n\n        $this->assertEquals(<<<'SVG'\n<svg>\n  <path></path>\n</svg>\nSVG,\n            $this->tag('{{ svg src=\"xss\" sanitize=\"true\" }}')\n        );\n\n        $this->assertEquals(<<<'SVG'\n<svg>\n  <path onclick=\"clickxss\"></path>\n  <foreignObject></foreignObject>\n  <mesh></mesh>\n</svg>\nSVG,\n            $this->tag('{{ svg src=\"xss\" sanitize=\"true\" allow_tags=\"mesh|foreignObject\" allow_attrs=\"onclick\" }}')\n        );\n    }\n\n    /** @test */\n    public function sanitizing_doesnt_add_xml_tag()\n    {\n        // Thes sanitizer package adds an xml tag by default.\n        // We want to make sure if there wasn't one to begin with, it doesn't add one.\n\n        $svg = <<<'SVG'\n<svg>\n  <path></path>\n</svg>\nSVG;\n\n        File::put(resource_path('xmltag.svg'), $svg);\n\n        $this->assertEquals($svg, $this->tag('{{ svg src=\"xmltag\" sanitize=\"true\" }}'));\n    }\n\n    /** @test */\n    public function sanitizing_doesnt_remove_an_xml_tag()\n    {\n        // Thes sanitizer package adds an xml tag by default.\n        // We want to make sure that we haven't configured it to remove it if we wanted it there to begin with.\n\n        $svg = <<<'SVG'\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg>\n  <path></path>\n</svg>\nSVG;\n\n        File::put(resource_path('xmltag.svg'), $svg);\n\n        $this->assertEquals($svg, $this->tag('{{ svg src=\"xmltag\" sanitize=\"true\" }}'));\n    }\n}\n"], "filenames": ["composer.json", "src/Tags/Svg.php", "tests/Tags/SvgTagTest.php"], "buggy_code_start_loc": [14, 4, 6], "buggy_code_end_loc": [14, 81, 34], "fixing_code_start_loc": [15, 5, 7], "fixing_code_end_loc": [16, 141, 105], "type": "CWE-79", "message": "Statamic is a flat-first, Laravel and Git powered content management system. Prior to version 4.10.0, the SVG tag does not sanitize malicious SVG. Therefore, an attacker can exploit this vulnerability to perform cross-site scripting attacks using SVG, even when using the `sanitize` function. Version 4.10.0 contains a patch for this issue.", "other": {"cve": {"id": "CVE-2023-36828", "sourceIdentifier": "security-advisories@github.com", "published": "2023-07-05T22:15:10.113", "lastModified": "2023-07-12T15:48:25.017", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Statamic is a flat-first, Laravel and Git powered content management system. Prior to version 4.10.0, the SVG tag does not sanitize malicious SVG. Therefore, an attacker can exploit this vulnerability to perform cross-site scripting attacks using SVG, even when using the `sanitize` function. Version 4.10.0 contains a patch for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.3, "impactScore": 3.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:statamic:statamic:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.10.0", "matchCriteriaId": "67630996-B2F8-467B-B65C-AAA8E1828664"}]}]}], "references": [{"url": "https://github.com/statamic/cms/blob/f806b6b007ddcf066082eef175653c5beaa96d60/src/Http/Controllers/CP/Fieldtypes/FilesFieldtypeController.php#L15", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/statamic/cms/blob/f806b6b007ddcf066082eef175653c5beaa96d60/src/Tags/Svg.php#L36-L40", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/statamic/cms/commit/c714893ad92de6e5ede17b501003441af505b30d", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/statamic/cms/pull/8408", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/statamic/cms/releases/tag/v4.10.0", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/statamic/cms/security/advisories/GHSA-6r5g-cq4q-327g", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/statamic/cms/commit/c714893ad92de6e5ede17b501003441af505b30d"}}