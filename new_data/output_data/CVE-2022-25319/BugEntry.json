{"buggy_code": ["<?php\n\nnamespace App\\Controller\\Open;\n\nuse App\\Controller\\AppController;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Text;\nuse \\Cake\\Database\\Expression\\QueryExpression;\nuse Cake\\Http\\Exception\\BadRequestException;\nuse Cake\\Http\\Exception\\NotFoundException;\nuse Cake\\Http\\Exception\\MethodNotAllowedException;\nuse Cake\\Http\\Exception\\ForbiddenException;\nuse Cake\\Event\\EventInterface;\n\nclass IndividualsController extends AppController\n{\n    public function beforeFilter(EventInterface $event)\n    {\n        parent::beforeFilter($event);\n        $this->Authentication->allowUnauthenticated(['index']);\n    }\n\n    public function index()\n    {\n        $this->CRUD->index([\n            'filters' => ['uuid', 'email', 'first_name', 'last_name', 'position', 'Organisations.id'],\n            'quickFilters' => ['uuid', 'email', 'first_name', 'last_name', 'position'],\n            'contain' => ['Alignments' => 'Organisations']\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('alignmentScope', 'organisations');\n        $this->set('metaGroup', 'Public');\n    }\n}\n", "<?php\n\nnamespace App\\Controller\\Open;\n\nuse App\\Controller\\AppController;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Text;\nuse \\Cake\\Database\\Expression\\QueryExpression;\nuse Cake\\Http\\Exception\\NotFoundException;\nuse Cake\\Http\\Exception\\MethodNotAllowedException;\nuse Cake\\Http\\Exception\\ForbiddenException;\nuse Cake\\Event\\EventInterface;\n\nclass OrganisationsController extends AppController\n{\n    public function beforeFilter(EventInterface $event)\n    {\n        parent::beforeFilter($event);\n        $this->Authentication->allowUnauthenticated(['index']);\n    }\n\n    public function index()\n    {\n        $this->CRUD->index([\n            'filters' => ['name', 'uuid', 'nationality', 'sector', 'type', 'url', 'Alignments.id'],\n            'quickFilters' => ['name', 'uuid', 'nationality', 'sector', 'type', 'url'],\n            'contain' => ['Alignments' => 'Individuals']\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('alignmentScope', 'individuals');\n        $this->set('metaGroup', 'Public');\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace App\\Controller\\Open;\n\nuse App\\Controller\\AppController;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Text;\nuse \\Cake\\Database\\Expression\\QueryExpression;\nuse Cake\\Http\\Exception\\BadRequestException;\nuse Cake\\Http\\Exception\\NotFoundException;\nuse Cake\\Http\\Exception\\MethodNotAllowedException;\nuse Cake\\Http\\Exception\\ForbiddenException;\nuse Cake\\Event\\EventInterface;\nuse Cake\\Core\\Configure;\n\nclass IndividualsController extends AppController\n{\n    public function beforeFilter(EventInterface $event)\n    {\n        parent::beforeFilter($event);\n        $open = Configure::read('Cerebrate.open');\n        if (!empty($open) && in_array('individuals', $open)) {\n            $this->Authentication->allowUnauthenticated(['index']);\n        }\n    }\n\n    public function index()\n    {\n        $this->CRUD->index([\n            'filters' => ['uuid', 'email', 'first_name', 'last_name', 'position', 'Organisations.id'],\n            'quickFilters' => ['uuid', 'email', 'first_name', 'last_name', 'position'],\n            'contain' => ['Alignments' => 'Organisations']\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('alignmentScope', 'organisations');\n        $this->set('metaGroup', 'Public');\n    }\n}\n", "<?php\n\nnamespace App\\Controller\\Open;\n\nuse App\\Controller\\AppController;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Text;\nuse \\Cake\\Database\\Expression\\QueryExpression;\nuse Cake\\Http\\Exception\\NotFoundException;\nuse Cake\\Http\\Exception\\MethodNotAllowedException;\nuse Cake\\Http\\Exception\\ForbiddenException;\nuse Cake\\Event\\EventInterface;\nuse Cake\\Core\\Configure;\n\nclass OrganisationsController extends AppController\n{\n    public function beforeFilter(EventInterface $event)\n    {\n        parent::beforeFilter($event);\n        $open = Configure::read('Cerebrate.open');\n        if (!empty($open) && in_array('organisations', $open)) {\n            $this->Authentication->allowUnauthenticated(['index']);\n        }\n    }\n\n    public function index()\n    {\n        $this->CRUD->index([\n            'filters' => ['name', 'uuid', 'nationality', 'sector', 'type', 'url', 'Alignments.id'],\n            'quickFilters' => ['name', 'uuid', 'nationality', 'sector', 'type', 'url'],\n            'contain' => ['Alignments' => 'Individuals']\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('alignmentScope', 'individuals');\n        $this->set('metaGroup', 'Public');\n    }\n}\n"], "filenames": ["src/Controller/Open/IndividualsController.php", "src/Controller/Open/OrganisationsController.php"], "buggy_code_start_loc": [13, 12], "buggy_code_end_loc": [21, 20], "fixing_code_start_loc": [14, 13], "fixing_code_end_loc": [25, 24], "type": "NVD-CWE-noinfo", "message": "An issue was discovered in Cerebrate through 1.4. Endpoints could be open even when not enabled.", "other": {"cve": {"id": "CVE-2022-25319", "sourceIdentifier": "cve@mitre.org", "published": "2022-02-18T06:15:10.507", "lastModified": "2022-02-25T15:32:12.577", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in Cerebrate through 1.4. Endpoints could be open even when not enabled."}, {"lang": "es", "value": "Se ha detectado un problema en Cerebrate versiones hasta 1.4. Los endpoints pod\u00edan estar abiertos incluso cuando no estaban habilitados"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cerebrate-project:cerebrate:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.4", "matchCriteriaId": "94801AF4-44EE-499D-AD31-99E3EA6C79E2"}]}]}], "references": [{"url": "https://github.com/cerebrate-project/cerebrate/commit/a2632349175e574cd6305fa459cd7610ea09ab61", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/cerebrate-project/cerebrate/commit/a2632349175e574cd6305fa459cd7610ea09ab61"}}