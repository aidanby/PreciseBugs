{"buggy_code": ["# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nAs a minor extension, we also keep a semantic version for the `UNRELEASED`\nchanges.\n\n## [0.13.0] - UNRELEASED\n\n- Remove hydra-tools package. Move functionality to generate hydra keys to the\n  hydra-node executable.\n\n## [0.12.0] - 2023-08-18\n\n- **BREAKING** Support new cardano-node version 8.1.2\n\n  - Updated chain client and internal (layer 2) ledger versions to support the\n    new cardano-node versions. No direct impact on hydra clients expected.\n\n  - The JSON encoding of transaction as used at the `hydra-node` API changed\n    slightly. Verification key witnesses (`keys` field `witnesses`) are not\n    double wrapped cbor arrays anymore. Do not rely on this serialization as we\n    will change this again into a more \"cardanonical\" form. Alternative: Use\n    `cbor=true` query parameter to receive full CBOR encoded transactions.\n\n  - The last stable cardano-node version 1.35.7 is not compatible anymore.\n\n- **BREAKING** Remove the _DEPRECATED_ `Commit` websocket command to commit\n  funds held by the `hydra-node` internal wallet. Use the external commit feature\n  instead. Also rename the `ErrNoFuelUTxOFound` to `ErrNoUTxOFound`.\n\n- **BREAKING** Changes to Hydra scripts due to upgrading our plutus version and\n  toolchain to GHC 9.2.8.\n\n- **BREAKING** Change persisted state to be a sequence of events instead. This\n  increases the performance of the `hydra-node` as less data needs to be written\n  and prepares internal architecture for more event-sourced improvements.\n\n- **BREAKING** Introduce authenticated network messages [#965](965):\n\n  - Peers will sign messages before broadcasting them to other peers,\n    and verify signature of received messages is from a known party\n    and of course valid.\n\n- **BREAKING** Layer 2 protocol change:\n\n  - Wait for all transactions requested in a snapshot to be seen before\n    acknowledging it, and only send transaction ids in snapshot requests.\n\n- Enhanced `hydra-node` api.\n\n  - New HTTP endpoint (`POST /cardano-transaction`) to submit a transaction on L1.\n\n  - `Greetings` message now contains also the hydra-node version.\n\n  - New HTTP endpoint (`GET /protocol-parameters`) which provides the current protocol parameters.\n\n- Fixed a bug in `hydra-node` (on-chain protocol not affected) where\n  multisignature verification would silently ignore certain keys in case the\n  list of verification keys is not of same length as the list of signatures.\n\n- Fixed a bug in the `hydra-tui` dialogs where recipient and UTxO to spend where\n  not correctly selected.\n\n- **BREAKING** Changes to `hydra-cardano-api`:\n\n  - Drop `UsingRawBytesHex` as it is available upstream in `cardano-api` now.\n  - Remove `totalExecutionCost` as `cardano-ledger` provides `getMinFeeTx` now.\n  - Add `BundledProtocolParameters` pattern for latest `Era` to `Hydra.Cardano.Api`.\n  - Add `ledgerEraVersion` for the latest `Era` en-/decoder version.\n  - Change `minUTxOValue` to take `BundledProtocolParameters`.\n  - Add `fromLedgerMultiAsset` helper as transactions only `mint` `MultiAsset`.\n\n- Created `hydra-plutus-extras` package to re-use some utilities better between\n  packages.\n\n## [0.11.0] - 2023-06-30\n\nThis release contains breaking changes of the persistence and on-chain scripts\nand you'll need to apply the following procedure to upgrade _all the nodes_\nrunning a head:\n\n1. Close the head\n2. Stop `hydra-node`\n3. Remove persistent files stored in `--persistence-dir`, in particular\n   `server-output` and `state`\n4. Upgrade `hydra-node` version\n5. Start new `hydra-node` version with new `--hydra-scriptx-tx-id` and updated\n   command line options.\n6. Open a new head\n\n---\n\n- **BREAKING** Allow to commit multiple `UTxO` [#774](774)\n    - This changes `hydra-plutus` scripts to allow commit transactions which\n      spend multiple UTxOs into a Hydra head.\n    - Removes the `MoreThanOneUTxOCommitted` server output on the API.\n\n- Suport commits from external wallets [#215](215)\n    - Added the `/commit` HTTP endpoint to the `hydra-node` for creating a draft\n      `commit` transaction to commit requested UTxO into a head. This\n      transaction can be signed and submitted to the network by the hydra client\n      now instead of `hydra-node`.\n    - Commits via `/commit` also allow to commit scripts into a Hydra Head. For\n      that, the UTxO entry in the HTTP request needs to provide a `witness` with\n      scrpit, datum, and redeemer to be used.\n    - Removed the need to mark fuel when using external commits. Fees for Hydra\n      protocol transactions are paid the largest UTxO held by the internal\n      wallet if no marked fuel UTxO is present.\n    - **BREAKING** The `hydra-tui` now uses the `--cardano-signing-key` to\n      select and commit \"external funds\" to the Hydra Head. If you have used\n      this in the past, make sure to **not use the same key** as also given to\n      the `hydra-node`.\n\n- _DEPRECATED_ the `Commit` command to commit funds held by the `hydra-node`\n  internal wallet. Use the external commit feature instead.\n\n- Make `hydra-node` support time bounded transactions [#196](196)\n    - The `hydra-node` tracks time as seen on-chain and uses that to validate\n      any transactions, which can now use validity ranges the same way as on the\n      layer 1.\n    - Added current chain slot and time to log outputs.\n\n- **BREAKING** API output `SnapshotConfirmed` only includes transaction ids.\n  [#922](922)\n\n- **BREAKING** Changed to the persisted state by removing the plutus scripts\n  from the internal chain state and adding the `headId`.\n    - Only the `seedTxIn` parameter is stored and the `hydra-node` will use the\n      script compiled into it instead.\n    - This substantially decreases the size of persisted and logged data.\n\n- **BREAKING** Changed the `hydra-node` command line options:\n    - Removed `--ledger-genesis` argument and query this information from\n      `cardano-node` now. [#863](863)\n    - `--version` always displays git revision (SHA) alongside the declared\n      version. [#849](849)\n\n- Fixed a bug where `hydra-node` resets head state when replaying close of\n  another head. [#927](927)\n\n- Fixed a bug where `hydra-node` reports a wrong head status on `Greetings`\n  after restart. [#932](932)\n\n- Decreased verbosity of logs [#849](849)\n    - `BeginEvent`/`EndEvent` and `BeginEffect`/`EndEffect` log items are now\n      paired using a numeric `eventId` and `effectId`.\n    - Repurpose `log-filter` executable to compute duration of events and\n      effects.\n\n[#774]: https://github.com/input-output-hk/hydra/pull/774\n[#215]: https://github.com/input-output-hk/hydra/issues/215\n[#196]: https://github.com/input-output-hk/hydra/issues/196\n[#922]: https://github.com/input-output-hk/hydra/pull/922\n[#863]: https://github.com/input-output-hk/hydra/pull/863\n[#849]: https://github.com/input-output-hk/hydra/issues/849\n[#927]: https://github.com/input-output-hk/hydra/issues/927\n[#932]: https://github.com/input-output-hk/hydra/issues/932\n[#849]: https://github.com/input-output-hk/hydra/pull/859\n\n## [0.10.0] - 2023-05-11\n\nThis release contains several breaking changes and you'll need to apply the\nfollowing procedure to upgrade all the nodes running a head:\n\n1. Close the head\n2. Stop `hydra-node`\n3. Remove persistent files stored in `--persistence-dir`, in particular\n   `server-output` and `state`\n4. Upgrade `hydra-node` version\n5. Start new `hydra-node` version\n\nOnly when this procedure has been applied to all Hydra nodes can you open a new\nhead again.\n\n---\n\n- Make `hydra-node` compatible to mainnet [#713](713)\n\n    - **BREAKING** Change to command line options: Replaced `--network-id` with\n      `--mainnet` or `--testnet-magic`.\n\n    - Hard-coded temporary **limit of 100 ADA** for commits to a head on\n      mainnet. This will be incraeased or be made configurable in future\n      versions.\n\n- **BREAKING** Change in internal handling of rollbacks. Now, the `hydra-node`\n  does only rollback it's low level state and not report when a rollback\n  happened, under the optimistic assumption that the Hydra protocol transactions\n  are still applicable and the Head is unaffected by the rollback. This was\n  needed to avoid [#784](784) and will be further improved in [#185](185). This\n  removes `RolledBack` server output from the API and also changes the log\n  format of the internal `Rollback` event.\n\n- Reject commits of `UTxO` containing `ReferenceScript` to avoid a head not\n  being finalizable by the `hydra-node`. The layer 1 scripts still accept these\n  outputs, but we would not be able to automatically finalize a head which was\n  opened from commits with reference scripts. Reference scripts on the layer 2\n  ledger (e.g. included in transactions via `NewTx`) are non-problematic.\n  [#766](766)\n\n- All participants try to collect once seeing the last `commitTx`. [#786](786)\n  This may lead to misleading errors on the logs about not being able to post\n  collect transactions (see also [#839](839)).\n\n- The `hydra-node` detects misconfiguration and mismatch of command line options\n  with persisted state. [#764](764)\n\n- Fixed a bug where the `hydra-node` would crash sometimes when the\n  `cardano-node` switches onto a fork, which is a common event on mainnet.\n  [#560](560)\n\n- **BREAKING** Hydra scripts changed, need to use new `--hydra-scripts-tx-id`\n\n    - Check contract continuity of state machine, i.e. that the output with the\n      state datum and ST is actually owned by vHead.\n      [#777](777)\n\n    - Collect the right value in `collect` transactions (had been dropped for cost\n      reasons, but found a constant cost way to do it).\n\n    - The right `headId` is enforced in `commit` transactions.\n\n    - Updated `plutus-tx` tool-chain. This also resulted in changed return type\n      of `validatorScript` functions of script modules to `SerialisedScript`.\n      [#826](826)\n\n    - Use of a custom script context for `vInitial` and `vCommit` validators to\n      reduce cost of transactions again.\n      [#825](825)\n\n    - The hydra scripts are persisted in `hydra-plutus/scripts` and golden tests\n      ensure they are not changed accidentally.\n      [#772](772)\n\n- **BREAKING** Changes to `hydra-node` API\n\n    - Configurable API using query parameters. [#380](380) Clients can decide to:\n        - Skip observing history of events before they connected\n        - View the transactions in the server output encoded as CBOR\n        - Prevent utxo display in `SnapshotConfirmed` server outputs\n          [#808](808)\n\n    - `Greetings` message is now only sent last (after replaying history) on\n      connection and added additional information [#813](813):\n        - `headStatus` - representing current hydra head status\n        - `snapshotUtxo` - containing UTxOs and updating on each `SnapshotConfirmed` message\n\n    - Updated `hydra-tui` to handle `Greetings` message accordingly. Make sure\n      to use the same version.\n\n    - Reference scripts in the `hydra-node` API (e.g. on `NewTx`) are not\n      decodable when using `SimpleScriptV2` envelope anymore (just use\n      `SimpleScript`).\n\n- Versioned the documentation website, now the last released, stable is the\n  default available at https://hydra.family/head-protocol, while the\n  bleeding-edge from `master` branch is available at\n  https://hydra.family/head-protocol/unstable. [#803](803) [#805](805) [#783](783)\n\n- Add the\n  [specification](https://github.com/input-output-hk/hydra/tree/master/spec) to\n  the repository and\n  [website](https://hydra.family/head-protocol/core-concepts/specification).\n  [#693](693)\n\n- Disabled `aarch64-darwin` support, until a `cardano-node` for this platform is\n  also available.\n\n- Use the server-provided `timestamp` of messages in the `hydra-tui`. [#837](837)\n\n- **BREAKING** Changes to `hydra-cardano-api` [#826](826):\n  - Removed `HasPlutusScriptVersion` and `plutusScriptVersion` with upstream version from `cardano-api`.\n  - Renamed `getScriptData` to `txOutScriptData` to not conflict with the new function in `cardano-api`.\n  - Changed `toScriptData`, `toLedgerData`, `fromLedgerData`,\n    `txOutScriptData` and `lookupScriptData` to return or require a\n    `HashableScriptData` instead.\n  - Added `fromScriptData` generic conversion function.\n  - Changed signature of `totalExecutionCost` to be more clearly `Babbage` era specific.\n  - Changed `fromPlutusScript` to take new `SerialisedScript` type (it's just an alias now).\n  - Added `genTxIn` and `arbitrary` instance for `TxIn`.\n  - Added `getChainPoint`.\n\n[185]: https://github.com/input-output-hk/hydra/issues/185\n[380]: https://github.com/input-output-hk/hydra/issues/380\n[693]: https://github.com/input-output-hk/hydra/issues/693\n[713]: https://github.com/input-output-hk/hydra/issues/713\n[764]: https://github.com/input-output-hk/hydra/pull/764\n[766]: https://github.com/input-output-hk/hydra/pull/766\n[772]: https://github.com/input-output-hk/hydra/pull/772\n[777]: https://github.com/input-output-hk/hydra/pull/777\n[783]: https://github.com/input-output-hk/hydra/pull/783\n[784]: https://github.com/input-output-hk/hydra/issues/784\n[786]: https://github.com/input-output-hk/hydra/pull/786\n[803]: https://github.com/input-output-hk/hydra/pull/803\n[805]: https://github.com/input-output-hk/hydra/pull/805\n[808]: https://github.com/input-output-hk/hydra/pull/808\n[813]: https://github.com/input-output-hk/hydra/pull/813\n[825]: https://github.com/input-output-hk/hydra/pull/825\n[826]: https://github.com/input-output-hk/hydra/pull/826\n[826]: https://github.com/input-output-hk/hydra/pull/826\n[837]: https://github.com/input-output-hk/hydra/issues/837\n[839]: https://github.com/input-output-hk/hydra/issues/839\n\n## [0.9.0] - 2023-03-02\n\n:dragon_face: Renamed the repository from `hydra-poc` to [`hydra`](https://github.com/input-output-hk/hydra)!\n\n:warning: Delete your persistence directory!\n\nThis release contains several breaking changes and you'll need to apply the\nfollowing procedure to upgrade all the nodes running a head:\n\n1. Close the head\n2. Stop `hydra-node`\n3. Remove persistent files stored in `--persistence-dir`, in particular `server-output` and `state`\n4. Upgrade `hydra-node` version\n5. Start new `hydra-node` version\n\nOnly when this procedure has been applied to all Hydra nodes can you open a new head again.\n\n### Changes to `hydra-node`\n\n- **BREAKING** Changes in the persistence format\n  [#725](https://github.com/input-output-hk/hydra/pull/725),\n  [#745](https://github.com/input-output-hk/hydra/pull/745).\n\n- **BREAKING** Changes to the API:\n  + Removed `TxSeen` and `TxExpired` server outputs. Use the `TxValid` and\n    `TxInvalid` responses instead.\n  + All participants now see `TxValid` for all valid transactions (it replaces `TxSeen`).\n  + Renamed `ReadyToCommit -> HeadIsInitializing`\n  + Added a `headId` to most server outputs. [#678](https://github.com/input-output-hk/hydra/pull/678)\n  + Added a `timestamp` and a monotonic `seq`uence number. [#618](https://github.com/input-output-hk/hydra/pull/618)\n\n- **BREAKING** Addressed short-comings in `hydra-plutus` scripts\n  [#452](https://github.com/input-output-hk/hydra/pull/452) and improved their\n  performance / reduced cost\n  [#652](https://github.com/input-output-hk/hydra/pull/652),\n  [#701](https://github.com/input-output-hk/hydra/pull/701),\n  [#709](https://github.com/input-output-hk/hydra/pull/709). Roughly the cost of\n  transactions according to our\n  [benchmarks](https://hydra.family/head-protocol/benchmarks/transaction-cost/)\n  changed:\n\n  + Init increased by 10%.\n  + Commit reduced by 50%.\n  + Collect reduced by 30%.\n  + Close reduced by 0.2-0.3\u20b3\n  + Contest reduced by 0.1-0.2\u20b3.\n  + Abort reduced by 0.1-0.3\u20b3.\n  + Fanout reduced by 0.2-0.3\u20b3.\n\n- **BREAKING** Change the way contestation period and deadline are handled:\n  + There is a new hydra-node flag `--contestation-period` expressed in seconds\n    to control the close tx validity bounds as well as determine the\n    contestation deadline. For example, with `--contestation-period` 60s, the\n    node will close the head 60s after submitting the close transaction and\n    other parties will have another 60s to contest. This means the deadline may\n    be up `2 * --contestation-period` after a close transaction.\n    [#615](https://github.com/input-output-hk/hydra/pull/615) and\n    [ADR21](https://hydra.family/head-protocol/adr/21/)\n  + If hydra-node receives a `init` transaction with _not matching_\n    `--contestation-period` then this tx is ignored which implies that all\n    parties need to agree on the same value for contestation period.\n  + Removed `contestationPeriod` from the `Init` API request payload.\n  + The deadline get's pushed by `--contestation-period` **on each** contest\n    transaction. [#716](https://github.com/input-output-hk/hydra/pull/716)\n\n- Change the way the internal wallet initializes its state.\n  [#621](https://github.com/input-output-hk/hydra/pull/621)\n  + The internal wallet does now always query ledger state and parameters at the\n    tip. This should fix the `AcquireFailure` issues.\n\n- Added `NoFuelUTXOFound` error next to the already existing `NotEnoughFuel`.\n  Previously the node would fail with `NotEnoughFuel` when utxo was not found.\n  Now `NotEnoughFuel` is used when there is not enough fuel and\n  `NoFuelUTXOFound` when utxo was not to be found.\n\n- Added support have `hydra-node` to start following the chain from _genesis_ by\n  setting `--start-chain-from 0`.\n\n- Added script sizes to `hydra-node --script-info` and published transaction\n  cost benchmarks.\n\n- Changes to the logs:\n  + HeadLogic `Outcome` is now being logged on every protocol step transition.\n  + Added intermediate `LastSeenSnapshot` and extended `RequestedSnapshot` seen snapshot states.\n  + Changed wallet-related logs of `BeginInitialize`, `EndInitialize` and added\n    `SkipUpdate`.\n\n### Changes to `hydra-cardano-api`\n\n- **BREAKING** Remove `Hydra.Cardano.Api.SlotNo` module.\n- **BREAKING** Replace `fromConsensusPointHF` with `fromConsensusPointInMode` and\n  `toConsensusPointHF` with `toConsensusPointInMode`.\n- Re-export new `AcquiringFailure` type from `cardano-api`.\n- Add `fromPlutusCurrencySymbol` conversion function.\n- Introduce new `Hydra.Cardano.Api.Pretty` module and move functions\n  `renderTx`, `renderTxWithUTxO` and `renderTxs` from `hydra-node` package to\n  this new module.\n\n### Other changes\n\n- `hydra-cluster` executable can be used to provide a local cardano \"network\"\n  with `--devnet` argument\n\n- Switched to using [nix flakes](https://nixos.wiki/wiki/Flakes) and\n  [CHaP](https://input-output-hk.github.io/cardano-haskell-packages/all-packages/)\n  + Makes configuration of binary-caches easier to discover (you get asked about adding them).\n  + Will make bumping dependencies (e.g. cardano-node) easier.\n  + Build commands for binaries and docker images change, see updated [Contribution Guidelines](https://github.com/input-output-hk/hydra/blob/master/CONTRIBUTING.md)\n\n## [0.8.1] - 2022-11-17\n\n- **BREAKING** Implemented [ADR18](https://hydra.family/head-protocol/adr/18) to keep only a single state:\n  + The `hydra-node` now only uses a single `state` file in `--persistence-dir` to keep it's state.\n  + The `chainState` does not include read-only chain context information anymore (is smaller now).\n  + Include the `chainState` in `InvalidStateToPost` errors.\n  + Moved received transaction ids into `RolledForward` log message.\n  + Reduce log size by removing ChainContext. [#598](https://github.com/input-output-hk/hydra/issues/598)\n\n- **BREAKING** Changed internal wallet logs to help with debugging [#600](https://github.com/input-output-hk/hydra/pull/600)\n  + Split `ApplyBlock` into `BeginUpdate` and `EndUpdate`\n  + Split `InitializedWallet` into `BeginInitialize` and `EndInitialize`\n\n- After restarting `hydra-node`, clients will receive the whole history.  [#580](https://github.com/input-output-hk/hydra/issues/580)\n  + This history will be stored in the `server-output` file in `--persistence-dir`.\n  + Clients should use `Greetings` to identify the end of a [restart/replay of events](https://hydra.family/head-protocol/core-concepts/behavior#replay-of-past-server-outputs).\n\n- Fixed observing the chain for Hydra L1 transactions after restart. [599](https://github.com/input-output-hk/hydra/issues/599)\n\n- `hydra-cardano-api` now published on [Cardano Haskell Packages (CHaP)](https://input-output-hk.github.io/cardano-haskell-packages/package/hydra-cardano-api-0.8.0/). [#504](https://github.com/input-output-hk/hydra/issues/504)\n\n## [0.8.0] - 2022-10-27\n\n- **BREAKING** Hydra keys now use the text envelope format.\n  + `hydra-tools` executable now produces keys in the same format as cardano keys so this should make key handling simpler.\n  +  Take a look at the [example](https://github.com/input-output-hk/hydra/blob/master/docs/docs/getting-started/quickstart.md#hydra-keys) on how to use `hydra-tools` to generate necessary hydra keys.\n\n- **BREAKING** hydra-node command line flag `--node-id` is now mandatory.\n  + Instead of `Host` we are using the `node-id` in the server messages like + `PeerConnected/Disconnected` which are also used in\n  + the TUI to distinguish between different connected peers.\n  + This also changes the way how `NodeId`s are represented on the API.\n\n- **BREAKING** Keep track of `contestationDeadline` instead of `remainingContestationPeriod` and fix `ReadyToFanout`. [#483](https://github.com/input-output-hk/hydra/pull/483)\n  + Clients can now rely on `ReadyToFanout`, such that sending a `Fanout` input after seeing this output will never be \"too early\".\n  + The `HeadIsClosed` server output now contains the deadline instead of the remaining time.\n  + See `hydra-tui` for an example how to use the `contestationDeadline` and `ReadyToFanout`.\n  + See [ADR20](./docs/adr/2022-08-02_020-handling-time.md) for details and the rationale.\n\n- **BREAKING** Several changes to the API:\n  + The `InitialSnapshot` only contains the `initialUTxO` as the rest of the information was useless. [#533](https://github.com/input-output-hk/hydra/pull/533)\n  + Renamed `CannotSpendInput -> InternalWalletError` and `CannotCoverFees -> NotEnoughFuel`. [#582](https://github.com/input-output-hk/hydra/pull/582)\n\n- **BREAKING** Changed logs to improve legibility and trace on-chain posting errors. [#472](https://github.com/input-output-hk/hydra/pull/472)\n  + Strip chain layer logs to only contain `TxId` instead of full transactions in the nominal cases.\n  + Renamed log entry prefixes `Processing -> Begin` and `Processed -> End`.\n  + Added `PostingFailed` log entry.\n\n- **BREAKING** The `hydra-cluster` executable (our smoke test) does require `--publish-hydra-scripts` or `--hydra-scripts-tx-id` now as it may be provided with pre-published hydra scripts.\n\n- The `hydra-node` does persist L1 and L2 states on disk now: [#187](https://github.com/input-output-hk/hydra/issues/187)\n  + New `--persistence-dir` command line argument to configure location.\n  + Writes two JSON files `headstate` and `chainstate` to the persistence directory.\n  + While introspectable, modification of these files is not recommended.\n\n- *Fixed bugs* in `hydra-node`:\n  + Crash after `3k` blocks because of a failed time conversion. [#523](https://github.com/input-output-hk/hydra/pull/523)\n  + Internal wallet was losing memory of spent fuel UTxOs in presence of transaction failures. [#525](https://github.com/input-output-hk/hydra/pull/525)\n  + Node does not see some UTxOs sent to the internal wallet on startup. [#526](https://github.com/input-output-hk/hydra/pull/526)\n  + Prevent transactions from being resubmitted for application over and over. [#485](https://github.com/input-output-hk/hydra/pull/485)\n\n- Prevent misconfiguration of `hydra-node` by logging the command line options used and error out when:\n  + provided number of Hydra parties exceeds a known working maximum (currently 4)\n  + number of provided Cardano and Hydra keys is not the same\n\n- Added a `hydra-tools` executable, to help with generating Hydra keys and get hold of the marker datum hash. [#474](https://github.com/input-output-hk/hydra/pull/474)\n\n- Compute transaction costs as a \"min fee\" and report it in the [tx-cost benchmark](https://hydra.family/head-protocol/benchmarks/transaction-cost/).\n\n- Update [hydra-node-options](https://hydra.family/head-protocol/docs/getting-started/quickstart/#hydra-node-options) section in docs.\n\n- Publish test results on [website](https://hydra.family/head-protocol/benchmarks/tests/hydra-node/hspec-results). [#547](https://github.com/input-output-hk/hydra/pull/547)\n\n- Improved `hydra-tui` user experience:\n  + Fixed too fast clearing of errors and other feedback [#506](https://github.com/input-output-hk/hydra/pull/506)\n  + Introduced a pending state to avoid resubmission of transactions [#526](https://github.com/input-output-hk/hydra/pull/526)\n  + Can show full history (scrollable) [#577](https://github.com/input-output-hk/hydra/pull/577)\n\n- Build & publish static Linux x86_64 executables on each [release](https://github.com/input-output-hk/hydra/releases/tag/0.8.0) :point_down: [#546](https://github.com/input-output-hk/hydra/pull/546)\n\n## [0.7.0] - 2022-08-23\n\n- **BREAKING** Switch to `BabbageEra` and `PlutusV2`.\n  + `hydra-cardano-api` now uses `Era = BabbageEra` and constructs `PlutusV2` scripts.\n  + `hydra-plutus` scripts now use the `serialiseData` builtin to CBOR encode data on-chain.\n  + `hydra-node` now expects `BabbageEra` blocks and produces `BabbageEra` transactions.\n  + `hydra-cluster` now spins up a stake pool instead of a BFT node (not possible in `Praos` anymore).\n  + As a consequence, the Hydra scripts in `hydra-plutus` have now different script hashes.\n\n- **BREAKING** Use reference inputs and reference scripts in `abort` transaction.\n  + Need to provide a `--hydra-scripts-tx-id` to the `hydra-node` containing the current (`--script-info`) Hydra scripts.\n  + Added the `publish-scripts` sub-command to `hydra-node` to publish the current Hydra scripts.\n\n- Added a `hydra-cluster` executable, which runs a single scenario against a known network (smoke test) [#430](https://github.com/input-output-hk/hydra/pull/430) [#423](https://github.com/input-output-hk/hydra/pull/430).\n\n- Use deadline when posting a `fanoutTx` instead of the current slot [#441](https://github.com/input-output-hk/hydra/pull/441).\n\n- The user manual is now also available in Japanese thanks to @btbf! :jp:\n\n- Fixed display of remaining contestation period in `hydra-tui` [#437](https://github.com/input-output-hk/hydra/pull/437).\n\n## [0.6.0] - 2022-06-22\n\n#### Added\n\n- Implement on-chain contestation logic [#192](https://github.com/input-output-hk/hydra/issues/192):\n  + Node will automatically post a `Contest` transaction when it observes a `Close` or `Contest` with an obsolete snapshot\n  + Posting a fan-out transaction is not possible before the contestation dealine has passed\n\n- Transactions can now be submitted as raw CBOR-serialized object, base16 encoded, using the `NewTx` client input. This also supports the text-envelope format from cardano-cli out of the box. See the [api Reference](https://hydra.family/head-protocol/api-reference#operation-publish-/-message).\n\n- **BREAKING** The `hydra-node` does not finalize Heads automatically anymore.\n  + Instead clients do get a new `ReadyToFanout` server output after the contestation period and\n  + Clients can use the `Fanout` client input command to deliberately finalize a Head when it is closed and the contestation period passed.\n\n- Remaining contestation period is included in `HeadIsClosed` and displayed in `hydra-tui`.\n\n#### Changed\n\n- **BREAKING**: The starting state of a Head is renamed to `IdleState`, which is visible in the log API.\n\n#### Fixed\n\n- Head script to check UTxO hash upon closing the head correctly [#338](https://github.com/input-output-hk/hydra/pull/338). Previously it was possible to close the head with arbitrary UTxO.\n- Clients can fanout a Head closed without any off-chain transactions (eg. with initial snapshot)  [#395](https://github.com/input-output-hk/hydra/issues/395)\n\n## [0.5.0] - 2022-05-06\n\n#### Added\n\n- Start `hydra-node` tracking the chain starting at a previous point using new `--start-chain-from` command line option [#300](https://github.com/input-output-hk/hydra/issues/300).\n  + This is handy to re-initialize a stopped (or crashed) `hydra-node` with an already inititalized Head\n  + Note that off-chain state is NOT persisted, but this feature is good enough to continue opening or closing/finalizing a Head\n\n- Handle rollbacks [#184](https://github.com/input-output-hk/hydra/issues/184)\n  + Not crash anymore on rollbacks\n  + Rewind the internal head state to the point prior to rollback point\n  + Added `RolledBack` server output, see [API reference](https://hydra.family/head-protocol/api-reference)\n  + See the [user manual](https://hydra.family/head-protocol/core-concepts/rollbacks/) for a detailed explanation on how rollbacks are handled.\n\n- [Hydra Network](https://hydra.family/head-protocol/core-concepts/networking) section on the website about networking requirements and considerations\n\n- [Benchmarks](https://hydra.family/head-protocol/benchmarks) section on the website with continuously updated and published results on transaction costs of Hydra protocol transactions\n  + These are also performed and reported now on every PR -> [Example](https://github.com/input-output-hk/hydra/pull/340#issuecomment-1116247611)\n\n- New architectural decision records:\n  + [ADR-0017: UDP for Hydra networking](https://hydra.family/head-protocol/adr/17)\n  + [ADR-0018: Single state in Hydra.Node](https://hydra.family/head-protocol/adr/18)\n\n- Improved `hydra-node --version` to show an easier to understand and accurate revision based on `git describe`\n\n- Added `hydra-node --script-info` to check hashes of plutus scripts available in a `hydra-node`.\n  + This can also be seen as the \"script version\" and should stabilize as we progress in maturity of the codebase.\n\n#### Changed\n\n- **BREAKING** Switch to Ed25519 keys and proper EdDSA signatures for the Hydra Head protocol\n  + The `--hydra-signing-key` and consequently `--hydra-verification-key` are now longer and not compatible with previous versions!\n\n- **BREAKING** The Hydra plutus scripts have changed in course of finalizing [#181](https://github.com/input-output-hk/hydra/issues/181)\n  + All Hydra protocol transactions need to be signed by a Head participant now\n  + This changes the script address(es) and the current `hydra-node` would not detect old Heads on the testnet.\n\n- **BREAKING** Renamed server output `UTxO -> GetUTxOResponse`\n  + This should be a better name for the response of `GetUTxO` client input on our API :)\n\n- Updated our dependencies (`plutus`, `cardano-ledger`, etc.) to most recent released versions making scripts smaller and Head transactions slighly cheaper already, see benchmarks for current limits.\n\n#### Fixed\n\n- Reject commit transactions locking a UTxO locked by Byron addresses, part of [#182](https://github.com/input-output-hk/hydra/issues/182)\n  + This would render a Head unclosable because Byron addresses are filtered out by the ledger and not visible to plutus scripts\n\n- Fix instructions in [demo setup without docker](https://hydra.family/head-protocol/docs/getting-started/demo/without-docker) to use `0.0.0.0` and correct paths.\n\n#### Known Issues\n\n- TUI quickly flashes an error on fanout. This is because all nodes try to post a fanout transaction, but only one of the participants' transactions wins. Related to [#279](https://github.com/input-output-hk/hydra/issues/279)\n- Recipient addresses to send money to in the TUI are inferred from the current UTXO set. If a party does not commit a UTXO or consumes all its UTXO in a Head, it won't be able to send or receive anything anymore.\n- TUI crashes when user tries to post a new transaction without any UTXO remaining.\n- The internal wallet of hydra-node requires a UTXO to be marked as \"fuel\" to drive the Hydra protocol transactions. See [user manual](https://hydra.family/head-protocol/docs/getting-started/demo/with-docker/#seeding-the-network).\n\n## [0.4.0] - 2022-03-23\n\n#### Added\n\n- Our [user manual \ud83d\udcd6](https://hydra.family/head-protocol) is now available! It includes installation and usage instructions, a full API reference and also a knowledge base about Hydra concepts. The manual will be an ever-evolving source of documentation that we'll maintain alongside the project.\n- Support multiple Heads per Cardano network by identifying and distinguishing transactions of individual Head instances [#180](https://github.com/input-output-hk/hydra/issues/180).\n- Mint and burn state token used to thread state across the OCV state machine, and participation tokens for each party in the head [#181](https://github.com/input-output-hk/hydra/issues/181)\n- Provide (mandatory) command-line options `--ledger-genesis` and `--ledger-protocol-parameters` to configure the ledger that runs _inside a head_. Options are provided as filepath to JSON files which match formats from `cardano-cli` and `cardano-node` [#180](https://github.com/input-output-hk/hydra/issues/180).\n- Created [hydra-cardano-api](https://hydra.family/head-protocol/haddock/hydra-cardano-api/) as wrapper around [cardano-api](https://github.com/input-output-hk/cardano-node/tree/master/cardano-api#cardano-api) specialized to the latest Cardano's era, and with useful extra utility functions.\n- Two new architectural decision records:\n  - [ADR-0014: Token usage in Hydra Scripts](https://hydra.family/head-protocol/adr/14)\n  - [ADR-0015: Configuration Through an Admin API](https://hydra.family/head-protocol/adr/15)\n\n#### Changed\n\n- `--network-magic` option for the `hydra-node` and `hydra-tui` has been changed to `--network-id`. Also, the `hydra-tui` command-line used to default to mainnet when not provided with any `--network-magic` option, it doesn't anymore, `--network-id` is mandatory. [#180](https://github.com/input-output-hk/hydra/issues/180)\n- Optimize the `CollectCom` transition of the on-chain Hydra contract to allow collecting commits from more than 2 parties! [#254](https://github.com/input-output-hk/hydra/issues/254)\n- Use a faucet to distribute funds in test suites and the `demo/` setup.\n- Internally, better decouple the management of the on-chain head state from the network component. While not visible to the end user, this improvement paves the way for better handling rollbacks and on-chain _\"instability\"_ of newly posted transactions. [#184](https://github.com/input-output-hk/hydra/issues/184)\n- Internally, improved and consolidate generators used for property-based testing to cover a wider range of cases, be more consistent and also faster (avoiding to generate too large nested data-structures).\n\n#### Fixed\n\n- `Hydra.Network.Ouroboros` not using hard-coded valency values anymore to allow more than 7 peer connections [#203](https://github.com/input-output-hk/hydra/issues/203).\n- Build issues due to explicit packages list in nix shell [#223](https://github.com/input-output-hk/hydra/issues/223).\n- `hydra-tui` to show form focus, indicate invalid fields in dialogs and only allow valid values to be submitted [#224](https://github.com/input-output-hk/hydra/issues/224).\n- Repaired benchmarks and improved collected metrics; in particular, benchmarks now collect CPU usage and provide average confirmation times over 5s windows.\n- Fixed a bug in the Fanout transaction scheduling and submission where clients would attempt to post a fanout transaction before a 'Close' transaction is even observed. Now, every participant of the head will attempt to post a fanout a transaction after they successfully observed a transaction. Of course, the layer 1 will enforce that only one fanout is posted [#279](https://github.com/input-output-hk/hydra/issues/279).\n\n#### Known Issues\n\n- Only no or one utxo can be committed to a Head.\n- Recipient addresses to send money to in the TUI are inferred from the current UTXO set. If a party does not commit a UTXO or consumes all its UTXO in a Head, it won't be able to send or receive anything anymore.\n- TUI crashes when user tries to post a new transaction without any UTXO remaining.\n- The internal wallet of hydra-node requires a UTXO to be marked as \"fuel\" to drive the Hydra protocol transactions. See [user manual](https://hydra.family/head-protocol/docs/getting-started/demo/with-docker/#seeding-the-network).\n- Aborting a head with more than 2 participants (i.e. `> 2`) requires increase in tx size limit over current mainchain parameters to ~20KB.\n- Head can collect at most 3 commits and each party can commit either 1 or 0 UTXO to a Head.\n- The head cannot be finalized if holding more than ~100 assets (or ~50 ada-only UTxO entries) with the standard tx size of 16KB.\n\n## [0.3.0] - 2022-02-02\n\n#### Added\n\n- Implementation of on-chain verification of Hydra Head lifecycle without contests. This first version with its various shortcuts is documented on examples of the [full](./docs/adr/img/on-chain-full.jpg) and [abort](./docs/adr/img/on-chain-abort.jpg) on-chain life-cycles of a Hydra Head\n- Enable nix-shell on Mac\n- Build separate docker images for `hydra-node` and `hydra-tui` available as [packages](https://github.com/orgs/input-output-hk/packages?repo_name=hydra) from GitHub repo\n- Utility executable `inspect-script` to dump contracts for further analysis\n- CBOR encoder and Merkle-Tree in Plutus as separate packages `plutus-cbor` and `plutus-merkle-tree`, released & tagged separately\n\n#### Changed\n\n- Package `local-cluster` is now `hydra-cluster`.\n- Use `cardano-api` types and functions to interact with chain.\n- Refine computation of fees from internal wallet.\n- Remove several sources of `error` in chain interaction component.\n\n#### Known issues\n\n- `collectComTx` requires increase in tx size limit over current mainchain parameters to 32KB, which should be alleviated with Plutus optimisations and merging all contracts in one in future releases\n- Head can collect at most 9 commits and each party can commit either 1 or 0 UTXO to a Head\n- `fanoutTx` cannot handle more than 100 UTxO with the standard tx size of 16KB (200 with the temporary increase for test purpose).\n- Known issues from `0.2.0` still apply\n\n## [0.2.0] - 2021-12-14\n\n#### Added\n- Direct chain integration which allows to connect to a real cardano-node /\n  devnet; no on-chain validators though.\n- Support alonzo transactions inside the Hydra Head. For now using a `freeCostModel`.\n- Command line options `--node-socket`, `--network-magic` and\n  `--cardano-{signing,verification}-key` to `hydra-node` and `hydra-tui` to\n  configure the Cardano network access.\n\n#### Changed\n- Command line options of `hydra-node` quite significantly to distinguish hydra\n  credentials from cardano credentials.\n- Commit and transaction creation logic of TUI to use cardano credentials.\n\n#### Removed\n- ZeroMQ mock-chain executable, chain component and corresponding `hydra-node`\n  command line options.\n- ZeroMQ based network component.\n- Aliases from party identifiers.\n\n#### Fixed\n- `hydra-tui` to correctly show current state when re-connecting.\n\n#### Known issues\n- There can only be one Head per Cardano network (i.e. on the devnet).\n- Only no or one utxo can be committed to a Head.\n- Recipient addresses to send money to in the TUI are inferred from the current\n  UTXO set. If a party does not commit a UTXO or consumes all its UTXO in a\n  Head, it won't be able to send or receive anything anymore.\n- TUI crashes when user tries to post a new transaction wihout any UTXO\n  remaining.\n- Not an issue, but a workaround: The internal wallet of `hydra-node` requires a\n  UTXO to be marked as \"fuel\" to drive the Hydra protocol transactions.\n\n## [0.1.0] - 2021-09-30\n\n- First proof-of-concept for a `hydra-node`\n\n### Added\n- Coordinated Hydra Head protocol\n- Single Head per hydra-node\n- Stubbed chain using external process\n- Network statically configured, direct TCP connections\n- WebSocket, message-based API Server\n- Terminal user interface client\n", "{-# LANGUAGE DuplicateRecordFields #-}\n{-# LANGUAGE TypeApplications #-}\n{-# OPTIONS_GHC -Wno-orphans #-}\n\nmodule Hydra.Chain.Direct.Contract.Close where\n\nimport Hydra.Cardano.Api\nimport Hydra.Prelude hiding (label)\n\nimport Cardano.Api.UTxO as UTxO\nimport Data.Maybe (fromJust)\nimport Hydra.Chain.Direct.Contract.Gen (genForParty, genHash, genMintedOrBurnedValue)\nimport Hydra.Chain.Direct.Contract.Mutation (\n  Mutation (..),\n  SomeMutation (..),\n  addParticipationTokens,\n  changeHeadOutputDatum,\n  changeMintedTokens,\n  replaceContestationDeadline,\n  replaceContesters,\n  replaceHeadId,\n  replaceParties,\n  replacePolicyIdWith,\n  replaceSnapshotNumber,\n  replaceUtxoHash,\n )\nimport Hydra.Chain.Direct.Fixture (testNetworkId)\nimport qualified Hydra.Chain.Direct.Fixture as Fixture\nimport Hydra.Chain.Direct.ScriptRegistry (genScriptRegistry, registryUTxO)\nimport Hydra.Chain.Direct.TimeHandle (PointInTime)\nimport Hydra.Chain.Direct.Tx (ClosingSnapshot (..), OpenThreadOutput (..), UTxOHash (UTxOHash), closeTx, mkHeadId, mkHeadOutput)\nimport Hydra.ContestationPeriod (fromChain)\nimport Hydra.Contract.Error (toErrorCode)\nimport Hydra.Contract.HeadError (HeadError (..))\nimport qualified Hydra.Contract.HeadState as Head\nimport Hydra.Contract.HeadTokens (headPolicyId)\nimport Hydra.Contract.Util (UtilError (MintingOrBurningIsForbidden))\nimport Hydra.Crypto (HydraKey, MultiSignature, aggregate, sign, toPlutusSignatures)\nimport qualified Hydra.Data.ContestationPeriod as OnChain\nimport qualified Hydra.Data.Party as OnChain\nimport Hydra.Ledger (hashUTxO)\nimport Hydra.Ledger.Cardano (genAddressInEra, genOneUTxOFor, genValue, genVerificationKey)\nimport Hydra.Ledger.Cardano.Evaluate (genValidityBoundsFromContestationPeriod)\nimport Hydra.Party (Party, deriveParty, partyToChain)\nimport Hydra.Snapshot (Snapshot (..), SnapshotNumber)\nimport Hydra.Plutus.Extras (posixFromUTCTime)\nimport Hydra.Plutus.Orphans ()\nimport PlutusLedgerApi.V1.Time (DiffMilliSeconds (..), fromMilliSeconds)\nimport PlutusLedgerApi.V2 (BuiltinByteString, POSIXTime, PubKeyHash (PubKeyHash), toBuiltin)\nimport Test.Hydra.Fixture (aliceSk, bobSk, carolSk)\nimport Test.QuickCheck (arbitrarySizedNatural, choose, elements, listOf1, oneof, suchThat)\nimport Test.QuickCheck.Instances ()\n\n-- | Healthy close transaction for the generic case were we close a head\n--   after one or more snapshot have been agreed upon between the members.\nhealthyCloseTx :: (Tx, UTxO)\nhealthyCloseTx =\n  (tx, lookupUTxO)\n where\n  tx =\n    closeTx\n      scriptRegistry\n      somePartyCardanoVerificationKey\n      closingSnapshot\n      healthyCloseLowerBoundSlot\n      healthyCloseUpperBoundPointInTime\n      openThreadOutput\n      (mkHeadId Fixture.testPolicyId)\n\n  lookupUTxO =\n    UTxO.singleton (healthyOpenHeadTxIn, healthyOpenHeadTxOut)\n      <> registryUTxO scriptRegistry\n\n  scriptRegistry = genScriptRegistry `generateWith` 42\n\n  headDatum = toScriptData healthyOpenHeadDatum\n\n  openThreadOutput =\n    OpenThreadOutput\n      { openThreadUTxO = (healthyOpenHeadTxIn, healthyOpenHeadTxOut, headDatum)\n      , openParties = healthyOnChainParties\n      , openContestationPeriod = healthyContestationPeriod\n      }\n\n  closingSnapshot :: ClosingSnapshot\n  closingSnapshot =\n    CloseWithConfirmedSnapshot\n      { snapshotNumber = healthyCloseSnapshotNumber\n      , closeUtxoHash = UTxOHash $ hashUTxO @Tx healthyCloseUTxO\n      , signatures = healthySignature healthyCloseSnapshotNumber\n      }\n\n-- | Healthy close transaction for the specific case were we close a head\n--   with the initial UtxO, that is, no snapshot have been agreed upon and\n--   signed by the head members yet.\nhealthyCloseInitialTx :: (Tx, UTxO)\nhealthyCloseInitialTx =\n  (tx, lookupUTxO)\n where\n  tx =\n    closeTx\n      scriptRegistry\n      somePartyCardanoVerificationKey\n      closingSnapshot\n      healthyCloseLowerBoundSlot\n      healthyCloseUpperBoundPointInTime\n      openThreadOutput\n      (mkHeadId Fixture.testPolicyId)\n\n  lookupUTxO =\n    UTxO.singleton (healthyOpenHeadTxIn, healthyOpenHeadTxOut)\n      <> registryUTxO scriptRegistry\n\n  scriptRegistry = genScriptRegistry `generateWith` 42\n\n  headDatum = toScriptData healthyOpenHeadDatum\n\n  openThreadOutput =\n    OpenThreadOutput\n      { openThreadUTxO = (healthyOpenHeadTxIn, healthyOpenHeadTxOut, headDatum)\n      , openParties = healthyOnChainParties\n      , openContestationPeriod = healthyContestationPeriod\n      }\n  closingSnapshot :: ClosingSnapshot\n  closingSnapshot =\n    CloseWithInitialSnapshot\n      { openUtxoHash = UTxOHash $ hashUTxO @Tx healthyUTxO\n      }\n\n-- NOTE: We need to use the contestation period when generating start/end tx\n-- validity slots/time since if tx validity bound difference is bigger than\n-- contestation period our close validator will fail\nhealthyCloseLowerBoundSlot :: SlotNo\nhealthyCloseUpperBoundPointInTime :: PointInTime\n(healthyCloseLowerBoundSlot, healthyCloseUpperBoundPointInTime) =\n  genValidityBoundsFromContestationPeriod (fromChain healthyContestationPeriod) `generateWith` 42\n\nhealthyOpenHeadTxIn :: TxIn\nhealthyOpenHeadTxIn = generateWith arbitrary 42\n\nhealthyOpenHeadTxOut :: TxOut CtxUTxO\nhealthyOpenHeadTxOut =\n  mkHeadOutput testNetworkId Fixture.testPolicyId headTxOutDatum\n    & addParticipationTokens healthyParties\n where\n  headTxOutDatum = toUTxOContext (mkTxOutDatum healthyOpenHeadDatum)\n\nhealthySnapshot :: Snapshot Tx\nhealthySnapshot =\n  Snapshot\n    { number = healthyCloseSnapshotNumber\n    , utxo = healthyCloseUTxO\n    , confirmed = []\n    }\n\nhealthyCloseUTxO :: UTxO\nhealthyCloseUTxO =\n  (genOneUTxOFor somePartyCardanoVerificationKey `suchThat` (/= healthyUTxO))\n    `generateWith` 42\n\nhealthyCloseSnapshotNumber :: SnapshotNumber\nhealthyCloseSnapshotNumber = 1\n\nhealthyOpenHeadDatum :: Head.State\nhealthyOpenHeadDatum =\n  Head.Open\n    { parties = healthyOnChainParties\n    , utxoHash = toBuiltin $ hashUTxO @Tx healthyUTxO\n    , contestationPeriod = healthyContestationPeriod\n    , headId = toPlutusCurrencySymbol Fixture.testPolicyId\n    }\n\nhealthyContestationPeriod :: OnChain.ContestationPeriod\nhealthyContestationPeriod = OnChain.contestationPeriodFromDiffTime $ fromInteger healthyContestationPeriodSeconds\n\nhealthyContestationPeriodSeconds :: Integer\nhealthyContestationPeriodSeconds = 10\n\nhealthyUTxO :: UTxO\nhealthyUTxO = genOneUTxOFor somePartyCardanoVerificationKey `generateWith` 42\n\nsomePartyCardanoVerificationKey :: VerificationKey PaymentKey\nsomePartyCardanoVerificationKey = flip generateWith 42 $ do\n  genForParty genVerificationKey <$> elements healthyParties\n\nhealthySigningKeys :: [SigningKey HydraKey]\nhealthySigningKeys = [aliceSk, bobSk, carolSk]\n\nhealthyParties :: [Party]\nhealthyParties = deriveParty <$> healthySigningKeys\n\nhealthyOnChainParties :: [OnChain.Party]\nhealthyOnChainParties = partyToChain <$> healthyParties\n\nhealthySignature :: SnapshotNumber -> MultiSignature (Snapshot Tx)\nhealthySignature number = aggregate [sign sk snapshot | sk <- healthySigningKeys]\n where\n  snapshot = healthySnapshot{number}\n\nhealthyContestationDeadline :: UTCTime\nhealthyContestationDeadline =\n  addUTCTime\n    (fromInteger healthyContestationPeriodSeconds)\n    (snd healthyCloseUpperBoundPointInTime)\n\nhealthyClosedUTxOHash :: BuiltinByteString\nhealthyClosedUTxOHash =\n  toBuiltin $ hashUTxO @Tx healthyClosedUTxO\n\nhealthyClosedUTxO :: UTxO\nhealthyClosedUTxO =\n  genOneUTxOFor somePartyCardanoVerificationKey `generateWith` 42\n\ndata CloseMutation\n  = -- | Ensures collectCom does not allow any output address but \u03bdHead.\n    NotContinueContract\n  | -- | Ensures the snapshot signature is multisigned by all valid Head\n    -- participants.\n    --\n    -- Invalidates the tx by changing the redeemer signature\n    -- but not the snapshot number in output head datum.\n    MutateSignatureButNotSnapshotNumber\n  | -- | Ensures the snapshot number is consistent with the signature.\n    --\n    -- Invalidates the tx by changing the snapshot number\n    -- in resulting head output but not the redeemer signature.\n    MutateSnapshotNumberButNotSignature\n  | -- | Check that snapshot numbers <= 0 need to close the head with the\n    -- initial UTxO hash.\n    MutateSnapshotNumberToLessThanEqualZero\n  | -- | Ensures the close snapshot is multisigned by all Head participants by\n    -- changing the parties in the input head datum. If they do not align the\n    -- multisignature will not be valid anymore.\n    SnapshotNotSignedByAllParties\n  | -- | Ensures close is authenticated by a one of the Head members by changing\n    --  the signer used on the tx to not be one of PTs.\n    MutateRequiredSigner\n  | -- | Ensures close is authenticated by a one of the Head members by changing\n    --  the signer used on the tx to be empty.\n    MutateNoRequiredSigner\n  | -- | Ensures close is authenticated by a one of the Head members by changing\n    --  the signer used on the tx to have multiple signers (including the signer\n    -- to not fail for SignerIsNotAParticipant).\n    MutateMultipleRequiredSigner\n  | -- | Invalidates the tx by changing the utxo hash in resulting head output.\n    --\n    -- Ensures the output state is consistent with the redeemer.\n    MutateCloseUTxOHash\n  | -- | Ensures parties do not change between head input datum and head output\n    --  datum.\n    MutatePartiesInOutput\n  | -- | Ensures headId do not change between head input datum and head output\n    -- datum.\n    MutateHeadIdInOutput\n  | -- | Invalidates the tx by changing the lower bound to be non finite.\n    MutateInfiniteLowerBound\n  | -- | Invalidates the tx by changing the upper bound to be non finite.\n    MutateInfiniteUpperBound\n  | -- | Invalidates the tx by changing the contestation deadline to not satisfy\n    -- `contestationDeadline = upperBound + contestationPeriod`.\n    MutateContestationDeadline\n  | -- | Invalidates the tx by changing the lower and upper bound to be not\n    -- bounded as per spec `upperBound - lowerBound <= contestationPeriod`.\n    --\n    -- This also changes the resulting `head output` contestation deadline to be\n    -- valid, so it satisfy `contestationDeadline = upperBound +\n    -- contestationPeriod`.\n    MutateValidityInterval\n  | -- | Ensure the Head cannot be closed with correct authentication from a\n    -- different Head. We simulate this by changing the head policy id of the ST\n    -- and PTs to be of a different head - a real attack would be to add inputs\n    -- with those tokens on top of spending the head output, a bit like a double\n    -- satisfaction attack. Note that the token name stays the same and\n    -- consistent with the signer. This will cause authentication failure\n    -- because the signer's PT, although with a consistent name, is not from the\n    -- right head (has a different policy id than in the datum).\n    CloseFromDifferentHead\n  | -- | Minting or burning of tokens should not be possible in close.\n    MutateTokenMintingOrBurning\n  | -- | Invalidates the tx by changing the contesters to be non empty.\n    MutateContesters\n  | -- | Invalidates the tx by changing output values arbitrarily to be different\n    -- (not preserved) from the head.\n    --\n    -- Ensures values are preserved between head input and output.\n    MutateValueInOutput\n  deriving (Generic, Show, Enum, Bounded)\n\ngenCloseMutation :: (Tx, UTxO) -> Gen SomeMutation\ngenCloseMutation (tx, _utxo) =\n  oneof\n    [ SomeMutation (Just $ toErrorCode NotPayingToHead) NotContinueContract <$> do\n        mutatedAddress <- genAddressInEra testNetworkId\n        pure $ ChangeOutput 0 (modifyTxOutAddress (const mutatedAddress) headTxOut)\n    , SomeMutation (Just $ toErrorCode InvalidSnapshotSignature) MutateSignatureButNotSnapshotNumber . ChangeHeadRedeemer <$> do\n        Head.Close . toPlutusSignatures <$> (arbitrary :: Gen (MultiSignature (Snapshot Tx)))\n    , SomeMutation (Just $ toErrorCode ClosedWithNonInitialHash) MutateSnapshotNumberToLessThanEqualZero <$> do\n        mutatedSnapshotNumber <- arbitrary `suchThat` (<= 0)\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceSnapshotNumber mutatedSnapshotNumber) headTxOut\n    , SomeMutation (Just $ toErrorCode InvalidSnapshotSignature) MutateSnapshotNumberButNotSignature <$> do\n        mutatedSnapshotNumber <- arbitrarySizedNatural `suchThat` (> healthyCloseSnapshotNumber)\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceSnapshotNumber $ toInteger mutatedSnapshotNumber) headTxOut\n    , SomeMutation (Just $ toErrorCode InvalidSnapshotSignature) SnapshotNotSignedByAllParties . ChangeInputHeadDatum <$> do\n        mutatedParties <- arbitrary `suchThat` (/= healthyOnChainParties)\n        pure $\n          Head.Open\n            { parties = mutatedParties\n            , utxoHash = \"\"\n            , contestationPeriod = healthyContestationPeriod\n            , headId = toPlutusCurrencySymbol Fixture.testPolicyId\n            }\n    , SomeMutation (Just $ toErrorCode ChangedParameters) MutatePartiesInOutput <$> do\n        mutatedParties <- arbitrary `suchThat` (/= healthyOnChainParties)\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceParties mutatedParties) headTxOut\n    , SomeMutation (Just $ toErrorCode ChangedParameters) MutateHeadIdInOutput <$> do\n        otherHeadId <- toPlutusCurrencySymbol . headPolicyId <$> arbitrary `suchThat` (/= Fixture.testSeedInput)\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceHeadId otherHeadId) headTxOut\n    , SomeMutation (Just $ toErrorCode SignerIsNotAParticipant) MutateRequiredSigner <$> do\n        newSigner <- verificationKeyHash <$> genVerificationKey `suchThat` (/= somePartyCardanoVerificationKey)\n        pure $ ChangeRequiredSigners [newSigner]\n    , SomeMutation (Just $ toErrorCode NoSigners) MutateNoRequiredSigner <$> do\n        pure $ ChangeRequiredSigners []\n    , SomeMutation (Just $ toErrorCode TooManySigners) MutateMultipleRequiredSigner <$> do\n        otherSigners <- listOf1 (genVerificationKey `suchThat` (/= somePartyCardanoVerificationKey))\n        let signerAndOthers = somePartyCardanoVerificationKey : otherSigners\n        pure $ ChangeRequiredSigners (verificationKeyHash <$> signerAndOthers)\n    , SomeMutation (Just $ toErrorCode InvalidSnapshotSignature) MutateCloseUTxOHash . ChangeOutput 0 <$> do\n        mutatedUTxOHash <- genHash `suchThat` ((/= healthyClosedUTxOHash) . toBuiltin)\n        pure $ changeHeadOutputDatum (replaceUtxoHash $ toBuiltin mutatedUTxOHash) headTxOut\n    , SomeMutation (Just $ toErrorCode IncorrectClosedContestationDeadline) MutateContestationDeadline <$> do\n        mutatedDeadline <- genMutatedDeadline\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceContestationDeadline mutatedDeadline) headTxOut\n    , SomeMutation (Just $ toErrorCode InfiniteLowerBound) MutateInfiniteLowerBound . ChangeValidityLowerBound <$> do\n        pure TxValidityNoLowerBound\n    , SomeMutation (Just $ toErrorCode InfiniteUpperBound) MutateInfiniteUpperBound . ChangeValidityUpperBound <$> do\n        pure TxValidityNoUpperBound\n    , SomeMutation (Just $ toErrorCode HasBoundedValidityCheckFailed) MutateValidityInterval <$> do\n        (lowerSlotNo, upperSlotNo, adjustedContestationDeadline) <- genOversizedTransactionValidity\n        pure $\n          Changes\n            [ ChangeValidityInterval (TxValidityLowerBound lowerSlotNo, TxValidityUpperBound upperSlotNo)\n            , ChangeOutput 0 $ changeHeadOutputDatum (replaceContestationDeadline adjustedContestationDeadline) headTxOut\n            ]\n    , -- XXX: This is a bit confusing and not giving much value. Maybe we can remove this.\n      -- This also seems to be covered by MutateRequiredSigner\n      SomeMutation (Just $ toErrorCode SignerIsNotAParticipant) CloseFromDifferentHead <$> do\n        otherHeadId <- headPolicyId <$> arbitrary `suchThat` (/= Fixture.testSeedInput)\n        pure $\n          Changes\n            [ ChangeOutput 0 (replacePolicyIdWith Fixture.testPolicyId otherHeadId headTxOut)\n            , ChangeInput\n                healthyOpenHeadTxIn\n                (replacePolicyIdWith Fixture.testPolicyId otherHeadId healthyOpenHeadTxOut)\n                ( Just $\n                    toScriptData\n                      ( Head.Close\n                          { signature =\n                              toPlutusSignatures $\n                                healthySignature healthyCloseSnapshotNumber\n                          }\n                      )\n                )\n            ]\n    , SomeMutation (Just $ toErrorCode MintingOrBurningIsForbidden) MutateTokenMintingOrBurning\n        <$> (changeMintedTokens tx =<< genMintedOrBurnedValue)\n    , SomeMutation (Just $ toErrorCode ContestersNonEmpty) MutateContesters . ChangeOutput 0 <$> do\n        mutatedContesters <- listOf1 $ PubKeyHash . toBuiltin <$> genHash\n        pure $ headTxOut & changeHeadOutputDatum (replaceContesters mutatedContesters)\n    , SomeMutation (Just $ toErrorCode HeadValueIsNotPreserved) MutateValueInOutput <$> do\n        newValue <- genValue\n        pure $ ChangeOutput 0 (headTxOut{txOutValue = newValue})\n    ]\n where\n  genOversizedTransactionValidity = do\n    -- Implicit hypotheses: the slot length is and has always been 1 seconds so we can add slot with seconds\n    lowerValidityBound <- arbitrary :: Gen Word64\n    upperValidityBound <- choose (lowerValidityBound + fromIntegral healthyContestationPeriodSeconds, maxBound)\n    let adjustedContestationDeadline =\n          fromMilliSeconds . DiffMilliSeconds $ (healthyContestationPeriodSeconds + fromIntegral upperValidityBound) * 1000\n    pure (SlotNo lowerValidityBound, SlotNo upperValidityBound, adjustedContestationDeadline)\n\n  headTxOut = fromJust $ txOuts' tx !!? 0\n\ndata CloseInitialMutation\n  = MutateCloseContestationDeadline'\n  deriving (Generic, Show, Enum, Bounded)\n\n-- | Mutations for the specific case of closing with the intial state.\n-- We should probably validate all the mutation to this initial state but at\n-- least we keep this regression test as we stumbled upon problems with the following case.\n-- The nice thing to do would probably to generate either \"normal\" healthyCloseTx or\n-- or healthyCloseInitialTx and apply all the mutations to it but we didn't manage to do that\n-- right away.\ngenCloseInitialMutation :: (Tx, UTxO) -> Gen SomeMutation\ngenCloseInitialMutation (tx, _utxo) =\n  oneof\n    [ SomeMutation (Just $ toErrorCode IncorrectClosedContestationDeadline) MutateCloseContestationDeadline' <$> do\n        mutatedDeadline <- genMutatedDeadline\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceContestationDeadline mutatedDeadline) headTxOut\n    ]\n where\n  headTxOut = fromJust $ txOuts' tx !!? 0\n\n-- | Generate not acceptable, but interesting deadlines.\ngenMutatedDeadline :: Gen POSIXTime\ngenMutatedDeadline = do\n  oneof\n    [ valuesAroundZero\n    , valuesAroundDeadline\n    ]\n where\n  valuesAroundZero = arbitrary `suchThat` (/= deadline)\n\n  valuesAroundDeadline = arbitrary `suchThat` (/= 0) <&> (+ deadline)\n\n  deadline = posixFromUTCTime healthyContestationDeadline\n", "cabal-version: 2.2\nname:          hydra-plutus\nversion:       0.12.0\nsynopsis:      Hydra Plutus Contracts\nauthor:        IOG\ncopyright:     2022 IOG\nlicense:       Apache-2.0\nlicense-files:\n  LICENSE\n  NOTICE\n\nsource-repository head\n  type:     git\n  location: https://github.com/input-output-hk/hydra\n\nflag hydra-development\n  description: Disable -Werror for development\n  default:     False\n  manual:      True\n\ncommon project-config\n  default-extensions:\n    NoImplicitPrelude\n    BangPatterns\n    BinaryLiterals\n    ConstraintKinds\n    DataKinds\n    DefaultSignatures\n    DeriveAnyClass\n    DeriveDataTypeable\n    DeriveFoldable\n    DeriveFunctor\n    DeriveGeneric\n    DeriveTraversable\n    DerivingStrategies\n    EmptyDataDecls\n    ExistentialQuantification\n    FlexibleContexts\n    FlexibleInstances\n    FunctionalDependencies\n    GADTs\n    GeneralizedNewtypeDeriving\n    InstanceSigs\n    KindSignatures\n    LambdaCase\n    MultiParamTypeClasses\n    MultiWayIf\n    NamedFieldPuns\n    NumericUnderscores\n    OverloadedStrings\n    PartialTypeSignatures\n    PatternGuards\n    RankNTypes\n    ScopedTypeVariables\n    StandaloneDeriving\n    TupleSections\n    TypeFamilies\n    TypeOperators\n    TypeSynonymInstances\n    ViewPatterns\n\n  ghc-options:\n    -Wall -Wcompat -Widentities -Wincomplete-record-updates\n    -Wincomplete-uni-patterns -Wredundant-constraints\n    -Wnoncanonical-monad-instances -fobject-code\n    -fno-ignore-interface-pragmas -fno-omit-interface-pragmas\n    -fno-strictness\n\n  if !flag(hydra-development)\n    ghc-options: -Werror\n\nlibrary\n  import:          project-config\n  exposed-modules:\n    Hydra.Contract\n    Hydra.Contract.Commit\n    Hydra.Contract.CommitError\n    Hydra.Contract.Error\n    Hydra.Contract.Hash\n    Hydra.Contract.Head\n    Hydra.Contract.HeadError\n    Hydra.Contract.HeadState\n    Hydra.Contract.HeadTokens\n    Hydra.Contract.HeadTokensError\n    Hydra.Contract.Initial\n    Hydra.Contract.InitialError\n    Hydra.Contract.MintAction\n    Hydra.Contract.Util\n    Hydra.Data.ContestationPeriod\n    Hydra.Data.Party\n    Hydra.Data.Utxo\n    Hydra.ScriptContext\n\n  hs-source-dirs:  src\n  build-depends:\n    , aeson\n    , base\n    , base16-bytestring\n    , bytestring\n    , hydra-cardano-api\n    , hydra-plutus-extras\n    , hydra-prelude\n    , plutus-core           >=1.7 && <1.8\n    , plutus-ledger-api     >=1.7 && <1.8\n    , plutus-tx             >=1.7 && <1.8\n    , plutus-tx-plugin      >=1.7 && <1.8\n    , QuickCheck\n    , serialise\n    , template-haskell\n    , time\n\n  if flag(hydra-development)\n    -- NOTE(SN): should fix HLS choking on PlutusTx plugin\n    ghc-options: -fplugin-opt PlutusTx.Plugin:defer-errors\n\ntest-suite tests\n  import:             project-config\n  ghc-options:        -threaded -rtsopts -with-rtsopts=-N\n  hs-source-dirs:     test\n  main-is:            Main.hs\n  type:               exitcode-stdio-1.0\n  other-modules:\n    Hydra.Data.ContestationPeriodSpec\n    Hydra.Plutus.GoldenSpec\n    Spec\n\n  build-depends:\n    , base\n    , hspec\n    , hspec-golden\n    , hydra-cardano-api\n    , hydra-plutus\n    , hydra-prelude\n    , hydra-test-utils\n    , plutus-ledger-api\n    , QuickCheck\n\n  build-tool-depends: hspec-discover:hspec-discover\n\nexecutable inspect-script\n  import:         project-config\n  hs-source-dirs: exe/inspect-script\n  main-is:        Main.hs\n  build-depends:\n    , aeson\n    , bytestring\n    , hydra-cardano-api\n    , hydra-plutus\n    , hydra-prelude\n    , plutus-ledger-api\n    , plutus-tx\n    , prettyprinter\n    , serialise\n    , text\n\n  ghc-options:    -threaded -rtsopts\n", "{\n    \"type\": \"PlutusScriptV2\",\n    \"description\": \"hydra-mHead-0.11.0-439-g9f4198034\",\n    \"cborHex\": \"590f9f590f9c0100003332323322323232323322332232323232323232323232323232323232323222222533532533532323333573466e1c0052002212200223333573466e1c009200021220012326320243357380420440440426aae74004dd50018998092481034d303600533533301022333573466e3c00800407006cc044004cc03803cc04cd40048800884cc094894cd40044074884d4008894cd4ccd5cd19b88001480000840804c01800c408000440644c8cc02ccc03cc04d2401034d3031003233026225335001101d22153355335333573466e3cd402888008d40088800808007c4ccd5cd19b873500a22001350022200102001f101f10201300400100133300d300e120012350012200235500122222222222200c323232323233010330143018491034d3032003322333573466e1c008004088084cc050cc044c894cd400484c00c004520003233223223002001302d2253350011003221330063500222001300400130012200230012200123300101f48000cc044cc05888ccd5cd19b8f0020010220215005015301950063301e500148008cc040cc050c0612401034d3033003323223002001302b225335001102222135002225335333573466e3c00801c09c0984c0580044c01800d4014d5400c88004cc040c8cc044cc0652401034d3034003322333573466e1c00800408c0894008cc03c4488c88c008004c0b4894cd4004400c884cc018008c0100054004c8cc0b0894cd400440908854cd54cd4ccc07088ccd5cd19b8f002001028027500b301b00221533500113021498884d4008894cd400c54cd4ccd5cd19b87001480080ac0a840ac4c0952622130274984c08d241034d30370013004001102500150011333012301312001235001220013300400c5006330143018491034d303500330103322333573466e3c008004088084d5400888800d4014c94cd4ccd5cd19b8f35001220023500b220020210201333573466e1cd400488004d402c880040840804080d540088880084d5400488800454ccd4d54004880084c06d2401034d31300021301c4901034d31300021533532533532355007222222222222300d002302a2253350011502922135002225335333573466e3c0080200980944c0b80044c01800c84c0080045409ccc0408ccccccd5d200091991919199ab9a3370ea004900311999aab9f50022302e122220032502d029232323232323232323232323232323232323333573466e1d40512004233335573ea0284a07e46666aae7d404c941008cccd55cfa8099282091999aab9f501325042233335573ea0264a08646666aae7d404c941108cccd55cfa8099282291999aab9f35744a0284a66a660280246ae854070854cd4c048d5d0a80d90a99a980a9aba1501b215335301435742a03642a66a60286ae85406c854cd4c060d5d0a80d90a99a9980d00c9aba1501b21304e12222333333300400b00a0090080070060051504c1504b1504a150491504815047150462504604204104003f03e03d03c03b23333573466e1d40552002233335573ea02a4a08046666aae7d4024941048cccd55cfa8049282111999aab9f500925043233335573e6ae89402894cd4c038d5d0a80d10a99a998098089aba1500e215335301335742a01c42a66a60286ae85403884c12448888cccc00402001c0180145411c541185411454110941101000fc0f80f40f08cccd5cd19b875016480008cccd55cfa80b1282091999aab9f500725042233335573ea00e4a08646666aae7d401c941108cccd55cf9aba2500825335300f35742a03642a66a660280246ae854030854cd4c050d5d0a80610a99a991999999aba40012333233573466e1cd55cea800a4000464646666aae7d40089413c8cccd55cfa8011282811999aab9f35744a0064a66a646666666ae900048ccc8cd5cd19b8735573aa00290001191999aab9f500125057233335573e6ae89400894cd4c094d5d0a80190982d0008a82c1282c02a02989aab9e5002137540044a0a80a24a0a64a0a64a0a64a0a609e6ae854014854cd4c074d5d0a80290982a198290010008a8290a8289282882682602589aba25001135573ca00426ea80089412c12094128941289412894128118d5d0a8061098250911119998010040038030028a8240a8238a8230a8229282282082001f81f01e9282001e81e01d89aba25001135744a00226ae8940404d5d1280089aba25001135744a01a46666666ae900048ccc8cd5cd19b8735573aa00290001191999aab9f50012503c233335573e6ae89400894cd4c020d5d0a80190981f8008a81e9281e81c81c09aab9e5002137540044a07206c4a0704a0704a0704a07006846666666ae90004940dc940dc940dc8c0e0dd68011281b8199299a980100090981b8008a81a91999999aba40012503525035250352503523036375c00406246446666666ae90004940d8940d88c00cdd60011281b1281b019181b111999aab9f001230370312533530043574200442a66a60086ae8800c84c0e4cd40c8008004540dc540d80c84d5d1280089aba25001135744a00226ae8940044d5d1280089aba25002135573ca00426aae7540044dd500101312814128141281412814012100090a9999a80091111110981124c26036931111099091998008020018011980908911911801000981811299a800880191099803001180200080191110980fa4c26034930a99a9980080428018980ca4c4426a00444a66a006266054004002442603e93111a800911111111111199aa980b89000911a80111111a8021119a80110041299a999ab9a3371e00202e066064266a0686607800a00c01020100580142602400426a0024400464646666ae68cdc3800a400046464646464646644246600200600464646666ae68cdc3800a400046464646464646464646464646464646464646464646464646464646666664444442466666666666600200e02400c00a00801c01a01800601400401066020464646666ae68cdc3800a4000464646466442466002006004605000460280026ae84d5d128011aba15001135573c006464c6409466ae7011c120120d55ce8009baa00100c3301000d00a33300f75c01c01266601eeb8038020cc041d7002199807bae2001002357426ae894040d5d0a8079aba1500f35742a01e6ae85403cd5d0a8079aba1500f35742a01e6ae85403cd5d0a8079aba1500f35742a01e464646666ae68cdc3800a4000464646464646464646666444424666600200a00800600464646666ae68cdc3800a400046464646644246600200600460500046601604e0026ae84d5d128011aba15001135573c006464c6409066ae70114118118d55ce8009baa00433300e75c01a00664646666ae68cdc3800a4008464244460040086ae84d55cf00191999ab9a3370e004900111919091118008021bae001357426aae780108cccd5cd19b87003480008488800c8c98c8128cd5ce0238240240238231aab9d00137540046600aeb8004d5d09aba2500535742a0086ae854010d5d0a8021119191999ab9a3370e0029000119182418030009aba135573c00646666ae68cdc3801240044a08e464c6408c66ae7010c11011010cd55ce8009baa001135744a00226ae8940044d55cf00191931901e99ab9c03a03b03b35573a0026ea80048ccc009d73ad0012232230023756002607a446666aae7c00480e08c8cd40e0cc100c018d55cea80098029aab9e500130043574400626ae840080e48c88c008dd6000981d911999aab9f0012036233503530043574200460066ae880080dc4d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135573c006464c6405666ae700a00a40a4d55ce8009baa00232323333573466e1c00520062323212222300400532323333573466e1c005200c21222222200323232323333573466e1c015200a21222222200423333573466e1c01920082323233221222222233001009008375c0046eb4004d5d09aba2500435742a00646666ae68cdc3803a400c46464664424444444660040120106eb8008dd70009aba135744a00c6ae8540148cccd5cd19b87008480108c8c8cc8848888888cc018024020c050008dd70009aba135744a0106ae85401c8cccd5cd19b87009480088c8c848888888c01c020c050004d5d09aab9e00b23333573466e1c0292000232321222222230050083015001357426aae780308c98c80e0cd5ce01a81b01b01a81a01981901889aab9e005135573c00826aae7800c0b4d55ce8009baa001357426aae7800c8cccd5cd19b87002480108c8c848888c008014c024004d5d09aab9e00423333573466e1c00d2002232321222230010053009001357426aae780148cccd5cd19b87004480008c8c848888c00c014dd70009aba135573c00c464c6405c66ae700ac0b00b00ac0a80a4d55ce8009baa001357426ae894014d5d0a802119191999ab9a3370e002900011919191981619191999ab9a3370e00290001191bae001357426aae7800c8c98c80bccd5ce0160168169aab9d00137540046eb4004d5d09aba2500235742a00226aae7800c8c98c80a4cd5ce0130138139aab9d0013754002464646666ae68cdc3800a40044646464646466644424466600200a0080066eb400cdd68011bad001357426ae89400cd5d0a8011aba15002135744a00226aae7800c8cccd5cd19b87002480008c8c8488c00800cc01c004d5d09aab9e00423263202933573804c04e04e04c6aae74004dd5000919191999ab9a3370e00290011191909118008019bae001357426aae7800c8cccd5cd19b87002480008c8c8488c00800cdd70009aba135573c008464c6405066ae70094098098094d55ce8009baa001135573c006464c6404466ae7007c080080d55ce8009baa001101d130164910350543500301d22112225335001100222133005002333553007120010050040012233335500222230023370000290011000800a4000603644a66a00220244426a00444a66a666ae68cdc78012450b4879647261486561645631000170161333573466e1c0052002017016130060032253350021001101122230033002001222335500300200130172211225335001101322133501430040023355300612001004001223002001200122322300200130162253350011501522135002225335330080020071301a0011300600323500122333350012326320133357389201024c680001120012326320133357389201024c68000112326320133357389201024c6800011225335001100a133573800401246a00244444444444401046008921034d30380023003491034d30390023002491034d31310023263200a3357380020104466e00008004488008488004488008488488cc00401000d2410350543100120014988848cc00400c0088488c00800c44880048848cc00400c0088c8c00400488cc00cc0080080052211c3ffaf6b87df35cb01a52eb23032b8f0b1a2a3ad3acf0930abc9c833a0048811c8508839dfce39b6be65c018ce124ab549238e1b2ed08fb6588e5601f0001\"\n}\n", "{\n    \"type\": \"PlutusScriptV2\",\n    \"description\": \"hydra-vCommit-0.11.0-439-g9f4198034\",\n    \"cborHex\": \"59082a59082701000032323232323322323322323232323232222533533223530060052225323233500713300249010343303100323301b225335001101422135002225335333573466e3c0080280640604c04c0044c01800c004cc0408d4004888888888888020c0040184cc00924010343303200323301b225335001101422135002225335333573466e3c0080280640604c0540044c01800c004cc0408d54cd40044c0392410350543800221002222200335300100622222222222200a235001220022253350011012133573800402264646666ae68cdc3800a4004424400446666ae68cdc3801240004244002464c6402e66ae70050054054050d55ce8009baa00232323333573466e1c0052000232323232323322123300100300232323333573466e1c0052000232323232323232323232323232323232323232323232323232323333332222221233333333333300100701200600500400e00d00c00300a0020083302d232323333573466e1c0052000232323233221233001003002303b0023014001357426ae894008d5d0a80089aab9e00323263203c3357380720740746aae74004dd500080619816806805199807bae00e00933300f75c01c0106605aeb8010ccc03dd710008011aba135744a01e6ae854038d5d0a8071aba1500e35742a01c6ae854038d5d0a8071aba1500e35742a01c6ae854038d5d0a8071aba1500e232323333573466e1c0052000232323232323232323333222212333300100500400300232323333573466e1c005200023232323322123300100300230260023300b025001357426ae894008d5d0a80089aab9e00323263203a33573806e0700706aae74004dd50021998073ae00d00332323333573466e1c005200423212223002004357426aae7800c8cccd5cd19b87002480088c8c84888c004010dd70009aba135573c00846666ae68cdc3801a400042444006464c6407866ae700e40e80e80e40e0d55ce8009baa0023300575c0026ae84d5d128029aba1500435742a0086ae85401088c8c8cccd5cd19b87001480008c8c8488c00800cc018004d5d09aab9e00323333573466e1c0092002212200123263203833573806a06c06c06a6aae74004dd500089aba25001135744a00226aae7800c8c98c80bccd5ce0160168169aab9d00137540024666004eb9d68009119118011bab001302b2233335573e002405246466a05266442466002006004600c6aae754004c014d55cf280098021aba200313574200405626ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aab9e00323263201e3357380360380386aae74004dd500119191999ab9a3370e00290031191909111180200299191999ab9a3370e002900610911111100191919191999ab9a3370e00a900510911111100211999ab9a3370e00c900411919199109111111198008048041bae002375a0026ae84d5d128021aba1500323333573466e1c01d20062323233221222222233002009008375c0046eb8004d5d09aba2500635742a00a46666ae68cdc380424008464646644244444446600c01201060260046eb8004d5d09aba2500835742a00e46666ae68cdc3804a40044646424444444600e01060260026ae84d55cf00591999ab9a3370e014900011919091111111802804180a0009aba135573c018464c6405666ae700a00a40a40a009c0980940904d55cf00289aab9e004135573c0060406aae74004dd50009aba135573c00646666ae68cdc3801240084646424444600400a60100026ae84d55cf00211999ab9a3370e006900111919091111800802980e8009aba135573c00a46666ae68cdc3802240004646424444600600a6eb8004d5d09aab9e00623263202133573803c03e03e03c03a0386aae74004dd50009aba135744a0086ae85400c8c8c8cccd5cd19b87001480088c8c8c8c8c8ccc888488ccc00401401000cdd68019bad002375a0026ae84d5d128019aba1500235742a00426ae8940044d55cf00191999ab9a3370e004900011919091180100198038009aba135573c008464c6403a66ae7006806c06c068d55ce8009baa001232323333573466e1c0052002232321223001003375c0026ae84d55cf00191999ab9a3370e00490001191909118010019bae001357426aae780108c98c8070cd5ce00c80d00d00c9aab9d001375400226aae7800c8c98c8058cd5ce00980a00a1aab9d001375400220222600c921035054350032232323333573466e1c00520002323232323233322212333001004003002375c00660140046eb8004d5d09aba2500335742a0046ae8540084d5d1280089aab9e0032326320143357380220240246aae74004dd50009802119191999ab9a3370e002900011919191991091980080180118090011bae001357426ae894008d5d0a80089aab9e0032326320133357380200220226aae74004dd5000980711299a80088039109a80111299a999ab9a3371e00401a0180162666ae68cdc380099b8148001200200c00b1300600323263200e335738002018601844a66a002200a4426a00444a66a666ae68cdc78010058050048999ab9a3370e002900100500489803001919118011bac001300c2233335573e0024014466a01260086ae84008c00cd5d1001006111801000891001091000a450b48796472614865616456310012200212212233001004003232323333573466e1c005200023232323322123300100300232323333573466e1c0052000232375c0026ae84d55cf00191931900719ab9c00b00c00c35573a0026ea8008dd68009aba135744a0046ae8540044d55cf00191931900419ab9c00500600635573a0026ea80052410350543100120014988c8c00400488cc00cc0080080041\"\n}\n", "{\n    \"type\": \"PlutusScriptV2\",\n    \"description\": \"hydra-vHead-0.11.0-439-g9f4198034\",\n    \"cborHex\": \"\"\n}\n", "{\n    \"type\": \"PlutusScriptV2\",\n    \"description\": \"hydra-vInitial-0.11.0-439-g9f4198034\",\n    \"cborHex\": \"\"\n}\n", "{-# LANGUAGE DuplicateRecordFields #-}\n{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE TypeApplications #-}\n{-# OPTIONS_GHC -fno-specialize #-}\n-- Avoid trace calls to be optimized away when inlining functions.\n{-# OPTIONS_GHC -fplugin-opt PlutusTx.Plugin:no-simplifier-inline #-}\n-- Plutus core version to compile to. In babbage era, that is Cardano protocol\n-- version 7 and 8, only plutus-core version 1.0.0 is available.\n{-# OPTIONS_GHC -fplugin-opt PlutusTx.Plugin:target-version=1.0.0 #-}\n\nmodule Hydra.Contract.Head where\n\nimport PlutusTx.Prelude\n\nimport Hydra.Cardano.Api (PlutusScriptVersion (PlutusScriptV2))\nimport Hydra.Contract.Commit (Commit (..))\nimport qualified Hydra.Contract.Commit as Commit\nimport Hydra.Contract.HeadError (HeadError (..), errorCode)\nimport Hydra.Contract.HeadState (Input (..), Signature, SnapshotNumber, State (..))\nimport Hydra.Contract.Util (hasST, mustNotMintOrBurn, (===))\nimport Hydra.Data.ContestationPeriod (ContestationPeriod, addContestationPeriod, milliseconds)\nimport Hydra.Data.Party (Party (vkey))\nimport Hydra.Plutus.Extras (ValidatorType, scriptValidatorHash, wrapValidator)\nimport PlutusLedgerApi.Common (SerialisedScript, serialiseCompiledCode)\nimport PlutusLedgerApi.V1.Time (fromMilliSeconds)\nimport PlutusLedgerApi.V1.Value (valueOf)\nimport PlutusLedgerApi.V2 (\n  Address,\n  CurrencySymbol,\n  Datum (..),\n  Extended (Finite),\n  FromData (fromBuiltinData),\n  Interval (..),\n  LowerBound (LowerBound),\n  OutputDatum (..),\n  POSIXTime,\n  PubKeyHash (getPubKeyHash),\n  ScriptContext (..),\n  ScriptHash,\n  ToData (toBuiltinData),\n  TokenName (..),\n  TxInInfo (..),\n  TxInfo (..),\n  TxOut (..),\n  TxOutRef (..),\n  UpperBound (..),\n  Value (Value, getValue),\n  adaSymbol,\n  adaToken,\n )\nimport PlutusLedgerApi.V2.Contexts (findDatum, findOwnInput)\nimport PlutusTx (CompiledCode)\nimport qualified PlutusTx\nimport qualified PlutusTx.AssocMap as Map\nimport qualified PlutusTx.Builtins as Builtins\n\ntype DatumType = State\ntype RedeemerType = Input\n\n--------------------------------------------------------------------------------\n-- Validators\n--------------------------------------------------------------------------------\n\n{-# INLINEABLE headValidator #-}\nheadValidator ::\n  State ->\n  Input ->\n  ScriptContext ->\n  Bool\nheadValidator oldState input ctx =\n  case (oldState, input) of\n    (Initial{contestationPeriod, parties, headId}, CollectCom) ->\n      checkCollectCom ctx (contestationPeriod, parties, headId)\n    (Initial{parties, headId}, Abort) ->\n      checkAbort ctx headId parties\n    (Open{parties, utxoHash = initialUtxoHash, contestationPeriod, headId}, Close{signature}) ->\n      checkClose ctx parties initialUtxoHash signature contestationPeriod headId\n    (Closed{parties, snapshotNumber = closedSnapshotNumber, contestationDeadline, contestationPeriod, headId, contesters}, Contest{signature}) ->\n      checkContest ctx contestationDeadline contestationPeriod parties closedSnapshotNumber signature contesters headId\n    (Closed{utxoHash, contestationDeadline}, Fanout{numberOfFanoutOutputs}) ->\n      checkFanout utxoHash contestationDeadline numberOfFanoutOutputs ctx\n    _ ->\n      traceError $(errorCode InvalidHeadStateTransition)\n\n-- | On-Chain verification for 'Abort' transition. It verifies that:\n--\n--   * All PTs have been burnt: The right number of Head tokens with the correct\n--     head id are burnt, one PT for each party and a state token ST.\n--\n--   * All committed funds have been redistributed. This is done via v_commit\n--     and it only needs to ensure that we have spent all comitted outputs,\n--     which follows from burning all the PTs.\ncheckAbort ::\n  ScriptContext ->\n  CurrencySymbol ->\n  [Party] ->\n  Bool\ncheckAbort ctx@ScriptContext{scriptContextTxInfo = txInfo} headCurrencySymbol parties =\n  mustBurnAllHeadTokens\n    && mustBeSignedByParticipant ctx headCurrencySymbol\n    && mustReimburseCommittedUTxO\n where\n  mustBurnAllHeadTokens =\n    traceIfFalse $(errorCode BurntTokenNumberMismatch) $\n      burntTokens == length parties + 1\n\n  minted = getValue $ txInfoMint txInfo\n\n  burntTokens =\n    case Map.lookup headCurrencySymbol minted of\n      Nothing -> 0\n      Just tokenMap -> negate $ sum tokenMap\n\n  mustReimburseCommittedUTxO =\n    traceIfFalse $(errorCode ReimbursedOutputsDontMatch) $\n      hashOfCommittedUTxO == hashOfOutputs\n\n  hashOfOutputs =\n    -- NOTE: It is enough to just _take_ the same number of outputs that\n    -- correspond to the number of commit inputs to make sure everything is\n    -- reimbursed because we assume the outputs are correctly sorted with\n    -- reimbursed commits coming first\n    hashTxOuts $ take (length committed) (txInfoOutputs txInfo)\n\n  hashOfCommittedUTxO =\n    hashPreSerializedCommits committed\n\n  committed = committedUTxO [] (txInfoInputs txInfo)\n\n  committedUTxO commits = \\case\n    [] -> commits\n    TxInInfo{txInInfoResolved = txOut} : rest\n      | hasPT headCurrencySymbol txOut ->\n          committedUTxO (commitDatum txInfo txOut <> commits) rest\n      | otherwise ->\n          committedUTxO commits rest\n\n-- | On-Chain verification for 'CollectCom' transition. It verifies that:\n--\n--   * All participants have committed (even empty commits)\n--\n--   * All commits are properly collected and locked into \u03b7 as a hash\n--     of serialized tx outputs in the same sequence as commit inputs!\n--\n--   * The transaction is performed (i.e. signed) by one of the head participants\n--\n--   * State token (ST) is present in the output\ncheckCollectCom ::\n  -- | Script execution context\n  ScriptContext ->\n  (ContestationPeriod, [Party], CurrencySymbol) ->\n  Bool\ncheckCollectCom ctx@ScriptContext{scriptContextTxInfo = txInfo} (contestationPeriod, parties, headId) =\n  mustCollectUtxoHash\n    && mustNotChangeParameters\n    && mustCollectAllValue\n    -- XXX: Is this really needed? If yes, why not check on the output?\n    && traceIfFalse $(errorCode STNotSpent) (hasST headId val)\n    && everyoneHasCommitted\n    && mustBeSignedByParticipant ctx headId\n    && mustNotMintOrBurn txInfo\n where\n  mustCollectUtxoHash =\n    traceIfFalse $(errorCode IncorrectUtxoHash) $\n      utxoHash == hashPreSerializedCommits collectedCommits\n\n  mustNotChangeParameters =\n    traceIfFalse $(errorCode ChangedParameters) $\n      parties' == parties\n        && contestationPeriod' == contestationPeriod\n        && headId' == headId\n\n  mustCollectAllValue =\n    traceIfFalse $(errorCode NotAllValueCollected) $\n      -- NOTE: Instead of checking the head output val' against all collected\n      -- value, we do ensure the output value is all non collected value - fees.\n      -- This makes the script not scale badly with number of participants as it\n      -- would commonly only be a small number of inputs/outputs to pay fees.\n      otherValueOut == notCollectedValueIn - txInfoFee txInfo\n\n  (parties', utxoHash, contestationPeriod', headId') =\n    -- XXX: fromBuiltinData is super big (and also expensive?)\n    case fromBuiltinData @DatumType $ getDatum (headOutputDatum ctx) of\n      Just\n        Open\n          { parties = p\n          , utxoHash = h\n          , contestationPeriod = cp\n          , headId = hId\n          } ->\n          (p, h, cp, hId)\n      _ -> traceError $(errorCode WrongStateInOutputDatum)\n\n  headAddress = getHeadAddress ctx\n\n  everyoneHasCommitted =\n    traceIfFalse $(errorCode MissingCommits) $\n      nTotalCommits == length parties\n\n  val = maybe mempty (txOutValue . txInInfoResolved) $ findOwnInput ctx\n\n  otherValueOut =\n    case txInfoOutputs txInfo of\n      -- NOTE: First output must be head output\n      (_ : rest) -> foldMap txOutValue rest\n      _ -> mempty\n\n  -- NOTE: We do keep track of the value we do not want to collect as this is\n  -- typically less, ideally only a single other input with only ADA in it.\n  (collectedCommits, nTotalCommits, notCollectedValueIn) =\n    foldr\n      extractAndCountCommits\n      ([], 0, mempty)\n      (txInfoInputs txInfo)\n\n  extractAndCountCommits TxInInfo{txInInfoResolved} (commits, nCommits, notCollected)\n    | isHeadOutput txInInfoResolved =\n        (commits, nCommits, notCollected)\n    | hasPT headId txInInfoResolved =\n        (commitDatum txInfo txInInfoResolved <> commits, succ nCommits, notCollected)\n    | otherwise =\n        (commits, nCommits, notCollected <> txOutValue txInInfoResolved)\n\n  isHeadOutput txOut = txOutAddress txOut == headAddress\n{-# INLINEABLE checkCollectCom #-}\n\n-- | Try to find the commit datum in the input and\n-- if it is there return the committed utxo\ncommitDatum :: TxInfo -> TxOut -> [Commit]\ncommitDatum txInfo input = do\n  let datum = findTxOutDatum txInfo input\n  case fromBuiltinData @Commit.DatumType $ getDatum datum of\n    Just (_party, commits, _headId) ->\n      commits\n    Nothing -> []\n{-# INLINEABLE commitDatum #-}\n\n-- | The close validator must verify that:\n--\n--   * Check that the closing tx validity is bounded by contestation period\n--\n--   * Check that the deadline corresponds with tx validity and contestation period.\n--\n--   * The resulting utxo hash is correctly signed or the initial utxo hash,\n--     depending on snapshot number\n--\n--   * The transaction is performed (i.e. signed) by one of the head participants\n--\n--   * State token (ST) is present in the output\n--\n--   * Contesters must be initialize as empty\n--\n--   * Value in v_head is preserved\ncheckClose ::\n  ScriptContext ->\n  [Party] ->\n  BuiltinByteString ->\n  [Signature] ->\n  ContestationPeriod ->\n  CurrencySymbol ->\n  Bool\ncheckClose ctx parties initialUtxoHash sig cperiod headPolicyId =\n  mustNotMintOrBurn txInfo\n    && hasBoundedValidity\n    && checkDeadline\n    && checkSnapshot\n    && mustBeSignedByParticipant ctx headPolicyId\n    && mustInitializeContesters\n    && mustPreserveValue\n    && mustNotChangeParameters\n where\n  mustPreserveValue =\n    traceIfFalse $(errorCode HeadValueIsNotPreserved) $\n      val === val'\n\n  val' = txOutValue . head $ txInfoOutputs txInfo\n\n  val = maybe mempty (txOutValue . txInInfoResolved) $ findOwnInput ctx\n\n  hasBoundedValidity =\n    traceIfFalse $(errorCode HasBoundedValidityCheckFailed) $\n      tMax - tMin <= cp\n\n  (closedSnapshotNumber, closedUtxoHash, parties', closedContestationDeadline, headId', contesters') =\n    -- XXX: fromBuiltinData is super big (and also expensive?)\n    case fromBuiltinData @DatumType $ getDatum (headOutputDatum ctx) of\n      Just\n        Closed\n          { snapshotNumber\n          , utxoHash\n          , parties = p\n          , contestationDeadline\n          , headId\n          , contesters\n          } -> (snapshotNumber, utxoHash, p, contestationDeadline, headId, contesters)\n      _ -> traceError $(errorCode WrongStateInOutputDatum)\n\n  checkSnapshot\n    | closedSnapshotNumber > 0 =\n        traceIfFalse $(errorCode InvalidSnapshotSignature) $\n          verifySnapshotSignature parties closedSnapshotNumber closedUtxoHash sig\n    | otherwise =\n        traceIfFalse $(errorCode ClosedWithNonInitialHash) $\n          closedUtxoHash == initialUtxoHash\n\n  checkDeadline =\n    traceIfFalse $(errorCode IncorrectClosedContestationDeadline) $\n      closedContestationDeadline == makeContestationDeadline cperiod ctx\n\n  cp = fromMilliSeconds (milliseconds cperiod)\n\n  tMax = case ivTo $ txInfoValidRange txInfo of\n    UpperBound (Finite t) _ -> t\n    _InfiniteBound -> traceError $(errorCode InfiniteUpperBound)\n\n  tMin = case ivFrom $ txInfoValidRange txInfo of\n    LowerBound (Finite t) _ -> t\n    _InfiniteBound -> traceError $(errorCode InfiniteLowerBound)\n\n  mustNotChangeParameters =\n    traceIfFalse $(errorCode ChangedParameters) $\n      headId' == headPolicyId\n        && parties' == parties\n\n  mustInitializeContesters =\n    traceIfFalse $(errorCode ContestersNonEmpty) $\n      null contesters'\n\n  ScriptContext{scriptContextTxInfo = txInfo} = ctx\n{-# INLINEABLE checkClose #-}\n\n-- | The contest validator must verify that:\n--\n--   * The transaction does not mint or burn tokens.\n--\n--   * The contest snapshot number is strictly greater than the closed snapshot number.\n--\n--   * The contest snapshot is correctly signed.\n--\n--   * The transaction is performed (i.e. signed) by one of the head participants\n--\n--   * Party can contest only once.\n--\n--   * The transaction is performed before the deadline.\n--\n--   * Add signer to list of contesters.\n--\n--   * State token (ST) is present in the output\n--\n--   * Push deadline if signer is not the last one to contest.\n--\n--   * No other parameters have changed.\n--\n--   * Value in v_head is preserved\ncheckContest ::\n  ScriptContext ->\n  POSIXTime ->\n  ContestationPeriod ->\n  [Party] ->\n  -- | Snapshot number of the closed state.\n  SnapshotNumber ->\n  [Signature] ->\n  -- | Keys of party member which already contested.\n  [PubKeyHash] ->\n  -- | Head id\n  CurrencySymbol ->\n  Bool\ncheckContest ctx contestationDeadline contestationPeriod parties closedSnapshotNumber sig contesters headId =\n  mustNotMintOrBurn txInfo\n    && mustBeNewer\n    && mustBeMultiSigned\n    && mustBeSignedByParticipant ctx headId\n    && checkSignedParticipantContestOnlyOnce\n    && mustBeWithinContestationPeriod\n    && mustUpdateContesters\n    && mustPushDeadline\n    && mustNotChangeParameters\n    && mustPreserveValue\n where\n  mustPreserveValue =\n    traceIfFalse $(errorCode HeadValueIsNotPreserved) $\n      val === val'\n\n  val' = txOutValue . head $ txInfoOutputs txInfo\n\n  val = maybe mempty (txOutValue . txInInfoResolved) $ findOwnInput ctx\n\n  mustBeNewer =\n    traceIfFalse $(errorCode TooOldSnapshot) $\n      contestSnapshotNumber > closedSnapshotNumber\n\n  mustBeMultiSigned =\n    verifySnapshotSignature parties contestSnapshotNumber contestUtxoHash sig\n\n  mustBeWithinContestationPeriod =\n    case ivTo (txInfoValidRange txInfo) of\n      UpperBound (Finite time) _ ->\n        traceIfFalse $(errorCode UpperBoundBeyondContestationDeadline) $\n          time <= contestationDeadline\n      _ -> traceError $(errorCode ContestNoUpperBoundDefined)\n\n  mustNotChangeParameters =\n    traceIfFalse $(errorCode ChangedParameters) $\n      parties' == parties\n        && headId' == headId\n        && contestationPeriod' == contestationPeriod\n\n  mustPushDeadline =\n    if length contesters' == length parties'\n      then\n        traceIfFalse $(errorCode MustNotPushDeadline) $\n          contestationDeadline' == contestationDeadline\n      else\n        traceIfFalse $(errorCode MustPushDeadline) $\n          contestationDeadline' == addContestationPeriod contestationDeadline contestationPeriod\n\n  mustUpdateContesters =\n    traceIfFalse $(errorCode ContesterNotIncluded) $\n      contesters' == contester : contesters\n\n  (contestSnapshotNumber, contestUtxoHash, parties', contestationDeadline', contestationPeriod', headId', contesters') =\n    -- XXX: fromBuiltinData is super big (and also expensive?)\n    case fromBuiltinData @DatumType $ getDatum (headOutputDatum ctx) of\n      Just\n        Closed\n          { snapshotNumber\n          , utxoHash\n          , parties = p\n          , contestationDeadline = dl\n          , contestationPeriod = cp\n          , headId = hid\n          , contesters = cs\n          } -> (snapshotNumber, utxoHash, p, dl, cp, hid, cs)\n      _ -> traceError $(errorCode WrongStateInOutputDatum)\n\n  ScriptContext{scriptContextTxInfo = txInfo} = ctx\n\n  contester =\n    case txInfoSignatories txInfo of\n      [signer] -> signer\n      _ -> traceError $(errorCode WrongNumberOfSigners)\n\n  checkSignedParticipantContestOnlyOnce =\n    traceIfFalse $(errorCode SignerAlreadyContested) $\n      contester `notElem` contesters\n{-# INLINEABLE checkContest #-}\n\ncheckFanout ::\n  BuiltinByteString ->\n  POSIXTime ->\n  Integer ->\n  ScriptContext ->\n  Bool\ncheckFanout utxoHash contestationDeadline numberOfFanoutOutputs ScriptContext{scriptContextTxInfo = txInfo} =\n  hasSameUTxOHash && afterContestationDeadline\n where\n  hasSameUTxOHash =\n    traceIfFalse $(errorCode FannedOutUtxoHashNotEqualToClosedUtxoHash) $\n      fannedOutUtxoHash == utxoHash\n\n  fannedOutUtxoHash = hashTxOuts $ take numberOfFanoutOutputs txInfoOutputs\n\n  TxInfo{txInfoOutputs} = txInfo\n\n  afterContestationDeadline =\n    case ivFrom (txInfoValidRange txInfo) of\n      LowerBound (Finite time) _ ->\n        traceIfFalse $(errorCode LowerBoundBeforeContestationDeadline) $\n          time > contestationDeadline\n      _ -> traceError $(errorCode FanoutNoLowerBoundDefined)\n{-# INLINEABLE checkFanout #-}\n\n--------------------------------------------------------------------------------\n-- Helpers\n--------------------------------------------------------------------------------\n\n(&) :: a -> (a -> b) -> b\n(&) = flip ($)\n{-# INLINEABLE (&) #-}\n\ntxOutAdaValue :: TxOut -> Integer\ntxOutAdaValue o = valueOf (txOutValue o) adaSymbol adaToken\n{-# INLINEABLE txOutAdaValue #-}\n\ntxInfoAdaFee :: TxInfo -> Integer\ntxInfoAdaFee tx = valueOf (txInfoFee tx) adaSymbol adaToken\n{-# INLINEABLE txInfoAdaFee #-}\n\nmakeContestationDeadline :: ContestationPeriod -> ScriptContext -> POSIXTime\nmakeContestationDeadline cperiod ScriptContext{scriptContextTxInfo} =\n  case ivTo (txInfoValidRange scriptContextTxInfo) of\n    UpperBound (Finite time) _ -> addContestationPeriod time cperiod\n    _ -> traceError $(errorCode CloseNoUpperBoundDefined)\n{-# INLINEABLE makeContestationDeadline #-}\n\ngetHeadAddress :: ScriptContext -> Address\ngetHeadAddress ctx =\n  let headInput =\n        fromMaybe\n          (traceError $(errorCode ScriptNotSpendingAHeadInput))\n          (findOwnInput ctx)\n   in txOutAddress (txInInfoResolved headInput)\n{-# INLINEABLE getHeadAddress #-}\n\n-- XXX: We might not need to distinguish between the three cases here.\nmustBeSignedByParticipant ::\n  ScriptContext ->\n  CurrencySymbol ->\n  Bool\nmustBeSignedByParticipant ScriptContext{scriptContextTxInfo = txInfo} headCurrencySymbol =\n  case getPubKeyHash <$> txInfoSignatories txInfo of\n    [signer] ->\n      traceIfFalse $(errorCode SignerIsNotAParticipant) $\n        signer `elem` (unTokenName <$> participationTokens)\n    [] ->\n      traceError $(errorCode NoSigners)\n    _ ->\n      traceError $(errorCode TooManySigners)\n where\n  participationTokens = loop (txInfoInputs txInfo)\n  loop = \\case\n    [] -> []\n    (TxInInfo{txInInfoResolved} : rest) ->\n      findParticipationTokens headCurrencySymbol (txOutValue txInInfoResolved) ++ loop rest\n{-# INLINEABLE mustBeSignedByParticipant #-}\n\nfindParticipationTokens :: CurrencySymbol -> Value -> [TokenName]\nfindParticipationTokens headCurrency (Value val) =\n  case Map.toList <$> Map.lookup headCurrency val of\n    Just tokens ->\n      mapMaybe (\\(tokenName, n) -> if n == 1 then Just tokenName else Nothing) tokens\n    _ ->\n      []\n{-# INLINEABLE findParticipationTokens #-}\n\nheadOutputDatum :: ScriptContext -> Datum\nheadOutputDatum ctx =\n  case txInfoOutputs txInfo of\n    (o : _)\n      | txOutAddress o == headAddress -> findTxOutDatum txInfo o\n    _ -> traceError $(errorCode NotPayingToHead)\n where\n  headAddress = getHeadAddress ctx\n\n  ScriptContext{scriptContextTxInfo = txInfo} = ctx\n{-# INLINEABLE headOutputDatum #-}\n\nfindTxOutDatum :: TxInfo -> TxOut -> Datum\nfindTxOutDatum txInfo o =\n  case txOutDatum o of\n    NoOutputDatum -> traceError $(errorCode NoOutputDatumError)\n    OutputDatumHash dh ->\n      fromMaybe (traceError $(errorCode DatumNotFound)) $\n        findDatum dh txInfo\n    OutputDatum d -> d\n{-# INLINEABLE findTxOutDatum #-}\n\n-- | Hash a potentially unordered list of commits by sorting them, concatenating\n-- their 'preSerializedOutput' bytes and creating a SHA2_256 digest over that.\nhashPreSerializedCommits :: [Commit] -> BuiltinByteString\nhashPreSerializedCommits commits =\n  sha2_256 . foldMap preSerializedOutput $\n    sortBy (\\a b -> compareRef (input a) (input b)) commits\n{-# INLINEABLE hashPreSerializedCommits #-}\n\n-- | Hash a pre-ordered list of transaction outputs by serializing each\n-- individual 'TxOut', concatenating all bytes together and creating a SHA2_256\n-- digest over that.\nhashTxOuts :: [TxOut] -> BuiltinByteString\nhashTxOuts =\n  sha2_256 . foldMap (Builtins.serialiseData . toBuiltinData)\n{-# INLINEABLE hashTxOuts #-}\n\n-- | Check if 'TxOut' contains the PT token.\nhasPT :: CurrencySymbol -> TxOut -> Bool\nhasPT headCurrencySymbol txOut =\n  let pts = findParticipationTokens headCurrencySymbol (txOutValue txOut)\n   in length pts == 1\n{-# INLINEABLE hasPT #-}\n\nverifySnapshotSignature :: [Party] -> SnapshotNumber -> BuiltinByteString -> [Signature] -> Bool\nverifySnapshotSignature parties snapshotNumber utxoHash sigs =\n  traceIfFalse $(errorCode SignatureVerificationFailed) $\n    length parties == length sigs\n      && all (uncurry $ verifyPartySignature snapshotNumber utxoHash) (zip parties sigs)\n{-# INLINEABLE verifySnapshotSignature #-}\n\nverifyPartySignature :: SnapshotNumber -> BuiltinByteString -> Party -> Signature -> Bool\nverifyPartySignature snapshotNumber utxoHash party signed =\n  traceIfFalse $(errorCode PartySignatureVerificationFailed) $\n    verifyEd25519Signature (vkey party) message signed\n where\n  message =\n    -- TODO: document CDDL format, either here or in 'Hydra.Snapshot.getSignableRepresentation'\n    Builtins.serialiseData (toBuiltinData snapshotNumber)\n      <> Builtins.serialiseData (toBuiltinData utxoHash)\n{-# INLINEABLE verifyPartySignature #-}\n\ncompareRef :: TxOutRef -> TxOutRef -> Ordering\nTxOutRef{txOutRefId, txOutRefIdx} `compareRef` TxOutRef{txOutRefId = id', txOutRefIdx = idx'} =\n  case compare txOutRefId id' of\n    EQ -> compare txOutRefIdx idx'\n    ord -> ord\n{-# INLINEABLE compareRef #-}\n\ncompiledValidator :: CompiledCode ValidatorType\ncompiledValidator =\n  $$(PlutusTx.compile [||wrap headValidator||])\n where\n  wrap = wrapValidator @DatumType @RedeemerType\n\nvalidatorScript :: SerialisedScript\nvalidatorScript = serialiseCompiledCode compiledValidator\n\nvalidatorHash :: ScriptHash\nvalidatorHash = scriptValidatorHash PlutusScriptV2 validatorScript\n"], "fixing_code": ["# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nAs a minor extension, we also keep a semantic version for the `UNRELEASED`\nchanges.\n\n## [0.13.0] - UNRELEASED\n\n- **BREAKING** Changes to `hydra-plutus` scripts.\n\n- Remove hydra-tools package. Move functionality to generate hydra keys to the\n  hydra-node executable.\n\n## [0.12.0] - 2023-08-18\n\n- **BREAKING** Support new cardano-node version 8.1.2\n\n  - Updated chain client and internal (layer 2) ledger versions to support the\n    new cardano-node versions. No direct impact on hydra clients expected.\n\n  - The JSON encoding of transaction as used at the `hydra-node` API changed\n    slightly. Verification key witnesses (`keys` field `witnesses`) are not\n    double wrapped cbor arrays anymore. Do not rely on this serialization as we\n    will change this again into a more \"cardanonical\" form. Alternative: Use\n    `cbor=true` query parameter to receive full CBOR encoded transactions.\n\n  - The last stable cardano-node version 1.35.7 is not compatible anymore.\n\n- **BREAKING** Remove the _DEPRECATED_ `Commit` websocket command to commit\n  funds held by the `hydra-node` internal wallet. Use the external commit feature\n  instead. Also rename the `ErrNoFuelUTxOFound` to `ErrNoUTxOFound`.\n\n- **BREAKING** Changes to Hydra scripts due to upgrading our plutus version and\n  toolchain to GHC 9.2.8.\n\n- **BREAKING** Change persisted state to be a sequence of events instead. This\n  increases the performance of the `hydra-node` as less data needs to be written\n  and prepares internal architecture for more event-sourced improvements.\n\n- **BREAKING** Introduce authenticated network messages [#965](965):\n\n  - Peers will sign messages before broadcasting them to other peers,\n    and verify signature of received messages is from a known party\n    and of course valid.\n\n- **BREAKING** Layer 2 protocol change:\n\n  - Wait for all transactions requested in a snapshot to be seen before\n    acknowledging it, and only send transaction ids in snapshot requests.\n\n- Enhanced `hydra-node` api.\n\n  - New HTTP endpoint (`POST /cardano-transaction`) to submit a transaction on L1.\n\n  - `Greetings` message now contains also the hydra-node version.\n\n  - New HTTP endpoint (`GET /protocol-parameters`) which provides the current protocol parameters.\n\n- Fixed a bug in `hydra-node` (on-chain protocol not affected) where\n  multisignature verification would silently ignore certain keys in case the\n  list of verification keys is not of same length as the list of signatures.\n\n- Fixed a bug in the `hydra-tui` dialogs where recipient and UTxO to spend where\n  not correctly selected.\n\n- **BREAKING** Changes to `hydra-cardano-api`:\n\n  - Drop `UsingRawBytesHex` as it is available upstream in `cardano-api` now.\n  - Remove `totalExecutionCost` as `cardano-ledger` provides `getMinFeeTx` now.\n  - Add `BundledProtocolParameters` pattern for latest `Era` to `Hydra.Cardano.Api`.\n  - Add `ledgerEraVersion` for the latest `Era` en-/decoder version.\n  - Change `minUTxOValue` to take `BundledProtocolParameters`.\n  - Add `fromLedgerMultiAsset` helper as transactions only `mint` `MultiAsset`.\n\n- Created `hydra-plutus-extras` package to re-use some utilities better between\n  packages.\n\n## [0.11.0] - 2023-06-30\n\nThis release contains breaking changes of the persistence and on-chain scripts\nand you'll need to apply the following procedure to upgrade _all the nodes_\nrunning a head:\n\n1. Close the head\n2. Stop `hydra-node`\n3. Remove persistent files stored in `--persistence-dir`, in particular\n   `server-output` and `state`\n4. Upgrade `hydra-node` version\n5. Start new `hydra-node` version with new `--hydra-scriptx-tx-id` and updated\n   command line options.\n6. Open a new head\n\n---\n\n- **BREAKING** Allow to commit multiple `UTxO` [#774](774)\n    - This changes `hydra-plutus` scripts to allow commit transactions which\n      spend multiple UTxOs into a Hydra head.\n    - Removes the `MoreThanOneUTxOCommitted` server output on the API.\n\n- Suport commits from external wallets [#215](215)\n    - Added the `/commit` HTTP endpoint to the `hydra-node` for creating a draft\n      `commit` transaction to commit requested UTxO into a head. This\n      transaction can be signed and submitted to the network by the hydra client\n      now instead of `hydra-node`.\n    - Commits via `/commit` also allow to commit scripts into a Hydra Head. For\n      that, the UTxO entry in the HTTP request needs to provide a `witness` with\n      scrpit, datum, and redeemer to be used.\n    - Removed the need to mark fuel when using external commits. Fees for Hydra\n      protocol transactions are paid the largest UTxO held by the internal\n      wallet if no marked fuel UTxO is present.\n    - **BREAKING** The `hydra-tui` now uses the `--cardano-signing-key` to\n      select and commit \"external funds\" to the Hydra Head. If you have used\n      this in the past, make sure to **not use the same key** as also given to\n      the `hydra-node`.\n\n- _DEPRECATED_ the `Commit` command to commit funds held by the `hydra-node`\n  internal wallet. Use the external commit feature instead.\n\n- Make `hydra-node` support time bounded transactions [#196](196)\n    - The `hydra-node` tracks time as seen on-chain and uses that to validate\n      any transactions, which can now use validity ranges the same way as on the\n      layer 1.\n    - Added current chain slot and time to log outputs.\n\n- **BREAKING** API output `SnapshotConfirmed` only includes transaction ids.\n  [#922](922)\n\n- **BREAKING** Changed to the persisted state by removing the plutus scripts\n  from the internal chain state and adding the `headId`.\n    - Only the `seedTxIn` parameter is stored and the `hydra-node` will use the\n      script compiled into it instead.\n    - This substantially decreases the size of persisted and logged data.\n\n- **BREAKING** Changed the `hydra-node` command line options:\n    - Removed `--ledger-genesis` argument and query this information from\n      `cardano-node` now. [#863](863)\n    - `--version` always displays git revision (SHA) alongside the declared\n      version. [#849](849)\n\n- Fixed a bug where `hydra-node` resets head state when replaying close of\n  another head. [#927](927)\n\n- Fixed a bug where `hydra-node` reports a wrong head status on `Greetings`\n  after restart. [#932](932)\n\n- Decreased verbosity of logs [#849](849)\n    - `BeginEvent`/`EndEvent` and `BeginEffect`/`EndEffect` log items are now\n      paired using a numeric `eventId` and `effectId`.\n    - Repurpose `log-filter` executable to compute duration of events and\n      effects.\n\n[#774]: https://github.com/input-output-hk/hydra/pull/774\n[#215]: https://github.com/input-output-hk/hydra/issues/215\n[#196]: https://github.com/input-output-hk/hydra/issues/196\n[#922]: https://github.com/input-output-hk/hydra/pull/922\n[#863]: https://github.com/input-output-hk/hydra/pull/863\n[#849]: https://github.com/input-output-hk/hydra/issues/849\n[#927]: https://github.com/input-output-hk/hydra/issues/927\n[#932]: https://github.com/input-output-hk/hydra/issues/932\n[#849]: https://github.com/input-output-hk/hydra/pull/859\n\n## [0.10.0] - 2023-05-11\n\nThis release contains several breaking changes and you'll need to apply the\nfollowing procedure to upgrade all the nodes running a head:\n\n1. Close the head\n2. Stop `hydra-node`\n3. Remove persistent files stored in `--persistence-dir`, in particular\n   `server-output` and `state`\n4. Upgrade `hydra-node` version\n5. Start new `hydra-node` version\n\nOnly when this procedure has been applied to all Hydra nodes can you open a new\nhead again.\n\n---\n\n- Make `hydra-node` compatible to mainnet [#713](713)\n\n    - **BREAKING** Change to command line options: Replaced `--network-id` with\n      `--mainnet` or `--testnet-magic`.\n\n    - Hard-coded temporary **limit of 100 ADA** for commits to a head on\n      mainnet. This will be incraeased or be made configurable in future\n      versions.\n\n- **BREAKING** Change in internal handling of rollbacks. Now, the `hydra-node`\n  does only rollback it's low level state and not report when a rollback\n  happened, under the optimistic assumption that the Hydra protocol transactions\n  are still applicable and the Head is unaffected by the rollback. This was\n  needed to avoid [#784](784) and will be further improved in [#185](185). This\n  removes `RolledBack` server output from the API and also changes the log\n  format of the internal `Rollback` event.\n\n- Reject commits of `UTxO` containing `ReferenceScript` to avoid a head not\n  being finalizable by the `hydra-node`. The layer 1 scripts still accept these\n  outputs, but we would not be able to automatically finalize a head which was\n  opened from commits with reference scripts. Reference scripts on the layer 2\n  ledger (e.g. included in transactions via `NewTx`) are non-problematic.\n  [#766](766)\n\n- All participants try to collect once seeing the last `commitTx`. [#786](786)\n  This may lead to misleading errors on the logs about not being able to post\n  collect transactions (see also [#839](839)).\n\n- The `hydra-node` detects misconfiguration and mismatch of command line options\n  with persisted state. [#764](764)\n\n- Fixed a bug where the `hydra-node` would crash sometimes when the\n  `cardano-node` switches onto a fork, which is a common event on mainnet.\n  [#560](560)\n\n- **BREAKING** Hydra scripts changed, need to use new `--hydra-scripts-tx-id`\n\n    - Check contract continuity of state machine, i.e. that the output with the\n      state datum and ST is actually owned by vHead.\n      [#777](777)\n\n    - Collect the right value in `collect` transactions (had been dropped for cost\n      reasons, but found a constant cost way to do it).\n\n    - The right `headId` is enforced in `commit` transactions.\n\n    - Updated `plutus-tx` tool-chain. This also resulted in changed return type\n      of `validatorScript` functions of script modules to `SerialisedScript`.\n      [#826](826)\n\n    - Use of a custom script context for `vInitial` and `vCommit` validators to\n      reduce cost of transactions again.\n      [#825](825)\n\n    - The hydra scripts are persisted in `hydra-plutus/scripts` and golden tests\n      ensure they are not changed accidentally.\n      [#772](772)\n\n- **BREAKING** Changes to `hydra-node` API\n\n    - Configurable API using query parameters. [#380](380) Clients can decide to:\n        - Skip observing history of events before they connected\n        - View the transactions in the server output encoded as CBOR\n        - Prevent utxo display in `SnapshotConfirmed` server outputs\n          [#808](808)\n\n    - `Greetings` message is now only sent last (after replaying history) on\n      connection and added additional information [#813](813):\n        - `headStatus` - representing current hydra head status\n        - `snapshotUtxo` - containing UTxOs and updating on each `SnapshotConfirmed` message\n\n    - Updated `hydra-tui` to handle `Greetings` message accordingly. Make sure\n      to use the same version.\n\n    - Reference scripts in the `hydra-node` API (e.g. on `NewTx`) are not\n      decodable when using `SimpleScriptV2` envelope anymore (just use\n      `SimpleScript`).\n\n- Versioned the documentation website, now the last released, stable is the\n  default available at https://hydra.family/head-protocol, while the\n  bleeding-edge from `master` branch is available at\n  https://hydra.family/head-protocol/unstable. [#803](803) [#805](805) [#783](783)\n\n- Add the\n  [specification](https://github.com/input-output-hk/hydra/tree/master/spec) to\n  the repository and\n  [website](https://hydra.family/head-protocol/core-concepts/specification).\n  [#693](693)\n\n- Disabled `aarch64-darwin` support, until a `cardano-node` for this platform is\n  also available.\n\n- Use the server-provided `timestamp` of messages in the `hydra-tui`. [#837](837)\n\n- **BREAKING** Changes to `hydra-cardano-api` [#826](826):\n  - Removed `HasPlutusScriptVersion` and `plutusScriptVersion` with upstream version from `cardano-api`.\n  - Renamed `getScriptData` to `txOutScriptData` to not conflict with the new function in `cardano-api`.\n  - Changed `toScriptData`, `toLedgerData`, `fromLedgerData`,\n    `txOutScriptData` and `lookupScriptData` to return or require a\n    `HashableScriptData` instead.\n  - Added `fromScriptData` generic conversion function.\n  - Changed signature of `totalExecutionCost` to be more clearly `Babbage` era specific.\n  - Changed `fromPlutusScript` to take new `SerialisedScript` type (it's just an alias now).\n  - Added `genTxIn` and `arbitrary` instance for `TxIn`.\n  - Added `getChainPoint`.\n\n[185]: https://github.com/input-output-hk/hydra/issues/185\n[380]: https://github.com/input-output-hk/hydra/issues/380\n[693]: https://github.com/input-output-hk/hydra/issues/693\n[713]: https://github.com/input-output-hk/hydra/issues/713\n[764]: https://github.com/input-output-hk/hydra/pull/764\n[766]: https://github.com/input-output-hk/hydra/pull/766\n[772]: https://github.com/input-output-hk/hydra/pull/772\n[777]: https://github.com/input-output-hk/hydra/pull/777\n[783]: https://github.com/input-output-hk/hydra/pull/783\n[784]: https://github.com/input-output-hk/hydra/issues/784\n[786]: https://github.com/input-output-hk/hydra/pull/786\n[803]: https://github.com/input-output-hk/hydra/pull/803\n[805]: https://github.com/input-output-hk/hydra/pull/805\n[808]: https://github.com/input-output-hk/hydra/pull/808\n[813]: https://github.com/input-output-hk/hydra/pull/813\n[825]: https://github.com/input-output-hk/hydra/pull/825\n[826]: https://github.com/input-output-hk/hydra/pull/826\n[826]: https://github.com/input-output-hk/hydra/pull/826\n[837]: https://github.com/input-output-hk/hydra/issues/837\n[839]: https://github.com/input-output-hk/hydra/issues/839\n\n## [0.9.0] - 2023-03-02\n\n:dragon_face: Renamed the repository from `hydra-poc` to [`hydra`](https://github.com/input-output-hk/hydra)!\n\n:warning: Delete your persistence directory!\n\nThis release contains several breaking changes and you'll need to apply the\nfollowing procedure to upgrade all the nodes running a head:\n\n1. Close the head\n2. Stop `hydra-node`\n3. Remove persistent files stored in `--persistence-dir`, in particular `server-output` and `state`\n4. Upgrade `hydra-node` version\n5. Start new `hydra-node` version\n\nOnly when this procedure has been applied to all Hydra nodes can you open a new head again.\n\n### Changes to `hydra-node`\n\n- **BREAKING** Changes in the persistence format\n  [#725](https://github.com/input-output-hk/hydra/pull/725),\n  [#745](https://github.com/input-output-hk/hydra/pull/745).\n\n- **BREAKING** Changes to the API:\n  + Removed `TxSeen` and `TxExpired` server outputs. Use the `TxValid` and\n    `TxInvalid` responses instead.\n  + All participants now see `TxValid` for all valid transactions (it replaces `TxSeen`).\n  + Renamed `ReadyToCommit -> HeadIsInitializing`\n  + Added a `headId` to most server outputs. [#678](https://github.com/input-output-hk/hydra/pull/678)\n  + Added a `timestamp` and a monotonic `seq`uence number. [#618](https://github.com/input-output-hk/hydra/pull/618)\n\n- **BREAKING** Addressed short-comings in `hydra-plutus` scripts\n  [#452](https://github.com/input-output-hk/hydra/pull/452) and improved their\n  performance / reduced cost\n  [#652](https://github.com/input-output-hk/hydra/pull/652),\n  [#701](https://github.com/input-output-hk/hydra/pull/701),\n  [#709](https://github.com/input-output-hk/hydra/pull/709). Roughly the cost of\n  transactions according to our\n  [benchmarks](https://hydra.family/head-protocol/benchmarks/transaction-cost/)\n  changed:\n\n  + Init increased by 10%.\n  + Commit reduced by 50%.\n  + Collect reduced by 30%.\n  + Close reduced by 0.2-0.3\u20b3\n  + Contest reduced by 0.1-0.2\u20b3.\n  + Abort reduced by 0.1-0.3\u20b3.\n  + Fanout reduced by 0.2-0.3\u20b3.\n\n- **BREAKING** Change the way contestation period and deadline are handled:\n  + There is a new hydra-node flag `--contestation-period` expressed in seconds\n    to control the close tx validity bounds as well as determine the\n    contestation deadline. For example, with `--contestation-period` 60s, the\n    node will close the head 60s after submitting the close transaction and\n    other parties will have another 60s to contest. This means the deadline may\n    be up `2 * --contestation-period` after a close transaction.\n    [#615](https://github.com/input-output-hk/hydra/pull/615) and\n    [ADR21](https://hydra.family/head-protocol/adr/21/)\n  + If hydra-node receives a `init` transaction with _not matching_\n    `--contestation-period` then this tx is ignored which implies that all\n    parties need to agree on the same value for contestation period.\n  + Removed `contestationPeriod` from the `Init` API request payload.\n  + The deadline get's pushed by `--contestation-period` **on each** contest\n    transaction. [#716](https://github.com/input-output-hk/hydra/pull/716)\n\n- Change the way the internal wallet initializes its state.\n  [#621](https://github.com/input-output-hk/hydra/pull/621)\n  + The internal wallet does now always query ledger state and parameters at the\n    tip. This should fix the `AcquireFailure` issues.\n\n- Added `NoFuelUTXOFound` error next to the already existing `NotEnoughFuel`.\n  Previously the node would fail with `NotEnoughFuel` when utxo was not found.\n  Now `NotEnoughFuel` is used when there is not enough fuel and\n  `NoFuelUTXOFound` when utxo was not to be found.\n\n- Added support have `hydra-node` to start following the chain from _genesis_ by\n  setting `--start-chain-from 0`.\n\n- Added script sizes to `hydra-node --script-info` and published transaction\n  cost benchmarks.\n\n- Changes to the logs:\n  + HeadLogic `Outcome` is now being logged on every protocol step transition.\n  + Added intermediate `LastSeenSnapshot` and extended `RequestedSnapshot` seen snapshot states.\n  + Changed wallet-related logs of `BeginInitialize`, `EndInitialize` and added\n    `SkipUpdate`.\n\n### Changes to `hydra-cardano-api`\n\n- **BREAKING** Remove `Hydra.Cardano.Api.SlotNo` module.\n- **BREAKING** Replace `fromConsensusPointHF` with `fromConsensusPointInMode` and\n  `toConsensusPointHF` with `toConsensusPointInMode`.\n- Re-export new `AcquiringFailure` type from `cardano-api`.\n- Add `fromPlutusCurrencySymbol` conversion function.\n- Introduce new `Hydra.Cardano.Api.Pretty` module and move functions\n  `renderTx`, `renderTxWithUTxO` and `renderTxs` from `hydra-node` package to\n  this new module.\n\n### Other changes\n\n- `hydra-cluster` executable can be used to provide a local cardano \"network\"\n  with `--devnet` argument\n\n- Switched to using [nix flakes](https://nixos.wiki/wiki/Flakes) and\n  [CHaP](https://input-output-hk.github.io/cardano-haskell-packages/all-packages/)\n  + Makes configuration of binary-caches easier to discover (you get asked about adding them).\n  + Will make bumping dependencies (e.g. cardano-node) easier.\n  + Build commands for binaries and docker images change, see updated [Contribution Guidelines](https://github.com/input-output-hk/hydra/blob/master/CONTRIBUTING.md)\n\n## [0.8.1] - 2022-11-17\n\n- **BREAKING** Implemented [ADR18](https://hydra.family/head-protocol/adr/18) to keep only a single state:\n  + The `hydra-node` now only uses a single `state` file in `--persistence-dir` to keep it's state.\n  + The `chainState` does not include read-only chain context information anymore (is smaller now).\n  + Include the `chainState` in `InvalidStateToPost` errors.\n  + Moved received transaction ids into `RolledForward` log message.\n  + Reduce log size by removing ChainContext. [#598](https://github.com/input-output-hk/hydra/issues/598)\n\n- **BREAKING** Changed internal wallet logs to help with debugging [#600](https://github.com/input-output-hk/hydra/pull/600)\n  + Split `ApplyBlock` into `BeginUpdate` and `EndUpdate`\n  + Split `InitializedWallet` into `BeginInitialize` and `EndInitialize`\n\n- After restarting `hydra-node`, clients will receive the whole history.  [#580](https://github.com/input-output-hk/hydra/issues/580)\n  + This history will be stored in the `server-output` file in `--persistence-dir`.\n  + Clients should use `Greetings` to identify the end of a [restart/replay of events](https://hydra.family/head-protocol/core-concepts/behavior#replay-of-past-server-outputs).\n\n- Fixed observing the chain for Hydra L1 transactions after restart. [599](https://github.com/input-output-hk/hydra/issues/599)\n\n- `hydra-cardano-api` now published on [Cardano Haskell Packages (CHaP)](https://input-output-hk.github.io/cardano-haskell-packages/package/hydra-cardano-api-0.8.0/). [#504](https://github.com/input-output-hk/hydra/issues/504)\n\n## [0.8.0] - 2022-10-27\n\n- **BREAKING** Hydra keys now use the text envelope format.\n  + `hydra-tools` executable now produces keys in the same format as cardano keys so this should make key handling simpler.\n  +  Take a look at the [example](https://github.com/input-output-hk/hydra/blob/master/docs/docs/getting-started/quickstart.md#hydra-keys) on how to use `hydra-tools` to generate necessary hydra keys.\n\n- **BREAKING** hydra-node command line flag `--node-id` is now mandatory.\n  + Instead of `Host` we are using the `node-id` in the server messages like + `PeerConnected/Disconnected` which are also used in\n  + the TUI to distinguish between different connected peers.\n  + This also changes the way how `NodeId`s are represented on the API.\n\n- **BREAKING** Keep track of `contestationDeadline` instead of `remainingContestationPeriod` and fix `ReadyToFanout`. [#483](https://github.com/input-output-hk/hydra/pull/483)\n  + Clients can now rely on `ReadyToFanout`, such that sending a `Fanout` input after seeing this output will never be \"too early\".\n  + The `HeadIsClosed` server output now contains the deadline instead of the remaining time.\n  + See `hydra-tui` for an example how to use the `contestationDeadline` and `ReadyToFanout`.\n  + See [ADR20](./docs/adr/2022-08-02_020-handling-time.md) for details and the rationale.\n\n- **BREAKING** Several changes to the API:\n  + The `InitialSnapshot` only contains the `initialUTxO` as the rest of the information was useless. [#533](https://github.com/input-output-hk/hydra/pull/533)\n  + Renamed `CannotSpendInput -> InternalWalletError` and `CannotCoverFees -> NotEnoughFuel`. [#582](https://github.com/input-output-hk/hydra/pull/582)\n\n- **BREAKING** Changed logs to improve legibility and trace on-chain posting errors. [#472](https://github.com/input-output-hk/hydra/pull/472)\n  + Strip chain layer logs to only contain `TxId` instead of full transactions in the nominal cases.\n  + Renamed log entry prefixes `Processing -> Begin` and `Processed -> End`.\n  + Added `PostingFailed` log entry.\n\n- **BREAKING** The `hydra-cluster` executable (our smoke test) does require `--publish-hydra-scripts` or `--hydra-scripts-tx-id` now as it may be provided with pre-published hydra scripts.\n\n- The `hydra-node` does persist L1 and L2 states on disk now: [#187](https://github.com/input-output-hk/hydra/issues/187)\n  + New `--persistence-dir` command line argument to configure location.\n  + Writes two JSON files `headstate` and `chainstate` to the persistence directory.\n  + While introspectable, modification of these files is not recommended.\n\n- *Fixed bugs* in `hydra-node`:\n  + Crash after `3k` blocks because of a failed time conversion. [#523](https://github.com/input-output-hk/hydra/pull/523)\n  + Internal wallet was losing memory of spent fuel UTxOs in presence of transaction failures. [#525](https://github.com/input-output-hk/hydra/pull/525)\n  + Node does not see some UTxOs sent to the internal wallet on startup. [#526](https://github.com/input-output-hk/hydra/pull/526)\n  + Prevent transactions from being resubmitted for application over and over. [#485](https://github.com/input-output-hk/hydra/pull/485)\n\n- Prevent misconfiguration of `hydra-node` by logging the command line options used and error out when:\n  + provided number of Hydra parties exceeds a known working maximum (currently 4)\n  + number of provided Cardano and Hydra keys is not the same\n\n- Added a `hydra-tools` executable, to help with generating Hydra keys and get hold of the marker datum hash. [#474](https://github.com/input-output-hk/hydra/pull/474)\n\n- Compute transaction costs as a \"min fee\" and report it in the [tx-cost benchmark](https://hydra.family/head-protocol/benchmarks/transaction-cost/).\n\n- Update [hydra-node-options](https://hydra.family/head-protocol/docs/getting-started/quickstart/#hydra-node-options) section in docs.\n\n- Publish test results on [website](https://hydra.family/head-protocol/benchmarks/tests/hydra-node/hspec-results). [#547](https://github.com/input-output-hk/hydra/pull/547)\n\n- Improved `hydra-tui` user experience:\n  + Fixed too fast clearing of errors and other feedback [#506](https://github.com/input-output-hk/hydra/pull/506)\n  + Introduced a pending state to avoid resubmission of transactions [#526](https://github.com/input-output-hk/hydra/pull/526)\n  + Can show full history (scrollable) [#577](https://github.com/input-output-hk/hydra/pull/577)\n\n- Build & publish static Linux x86_64 executables on each [release](https://github.com/input-output-hk/hydra/releases/tag/0.8.0) :point_down: [#546](https://github.com/input-output-hk/hydra/pull/546)\n\n## [0.7.0] - 2022-08-23\n\n- **BREAKING** Switch to `BabbageEra` and `PlutusV2`.\n  + `hydra-cardano-api` now uses `Era = BabbageEra` and constructs `PlutusV2` scripts.\n  + `hydra-plutus` scripts now use the `serialiseData` builtin to CBOR encode data on-chain.\n  + `hydra-node` now expects `BabbageEra` blocks and produces `BabbageEra` transactions.\n  + `hydra-cluster` now spins up a stake pool instead of a BFT node (not possible in `Praos` anymore).\n  + As a consequence, the Hydra scripts in `hydra-plutus` have now different script hashes.\n\n- **BREAKING** Use reference inputs and reference scripts in `abort` transaction.\n  + Need to provide a `--hydra-scripts-tx-id` to the `hydra-node` containing the current (`--script-info`) Hydra scripts.\n  + Added the `publish-scripts` sub-command to `hydra-node` to publish the current Hydra scripts.\n\n- Added a `hydra-cluster` executable, which runs a single scenario against a known network (smoke test) [#430](https://github.com/input-output-hk/hydra/pull/430) [#423](https://github.com/input-output-hk/hydra/pull/430).\n\n- Use deadline when posting a `fanoutTx` instead of the current slot [#441](https://github.com/input-output-hk/hydra/pull/441).\n\n- The user manual is now also available in Japanese thanks to @btbf! :jp:\n\n- Fixed display of remaining contestation period in `hydra-tui` [#437](https://github.com/input-output-hk/hydra/pull/437).\n\n## [0.6.0] - 2022-06-22\n\n#### Added\n\n- Implement on-chain contestation logic [#192](https://github.com/input-output-hk/hydra/issues/192):\n  + Node will automatically post a `Contest` transaction when it observes a `Close` or `Contest` with an obsolete snapshot\n  + Posting a fan-out transaction is not possible before the contestation dealine has passed\n\n- Transactions can now be submitted as raw CBOR-serialized object, base16 encoded, using the `NewTx` client input. This also supports the text-envelope format from cardano-cli out of the box. See the [api Reference](https://hydra.family/head-protocol/api-reference#operation-publish-/-message).\n\n- **BREAKING** The `hydra-node` does not finalize Heads automatically anymore.\n  + Instead clients do get a new `ReadyToFanout` server output after the contestation period and\n  + Clients can use the `Fanout` client input command to deliberately finalize a Head when it is closed and the contestation period passed.\n\n- Remaining contestation period is included in `HeadIsClosed` and displayed in `hydra-tui`.\n\n#### Changed\n\n- **BREAKING**: The starting state of a Head is renamed to `IdleState`, which is visible in the log API.\n\n#### Fixed\n\n- Head script to check UTxO hash upon closing the head correctly [#338](https://github.com/input-output-hk/hydra/pull/338). Previously it was possible to close the head with arbitrary UTxO.\n- Clients can fanout a Head closed without any off-chain transactions (eg. with initial snapshot)  [#395](https://github.com/input-output-hk/hydra/issues/395)\n\n## [0.5.0] - 2022-05-06\n\n#### Added\n\n- Start `hydra-node` tracking the chain starting at a previous point using new `--start-chain-from` command line option [#300](https://github.com/input-output-hk/hydra/issues/300).\n  + This is handy to re-initialize a stopped (or crashed) `hydra-node` with an already inititalized Head\n  + Note that off-chain state is NOT persisted, but this feature is good enough to continue opening or closing/finalizing a Head\n\n- Handle rollbacks [#184](https://github.com/input-output-hk/hydra/issues/184)\n  + Not crash anymore on rollbacks\n  + Rewind the internal head state to the point prior to rollback point\n  + Added `RolledBack` server output, see [API reference](https://hydra.family/head-protocol/api-reference)\n  + See the [user manual](https://hydra.family/head-protocol/core-concepts/rollbacks/) for a detailed explanation on how rollbacks are handled.\n\n- [Hydra Network](https://hydra.family/head-protocol/core-concepts/networking) section on the website about networking requirements and considerations\n\n- [Benchmarks](https://hydra.family/head-protocol/benchmarks) section on the website with continuously updated and published results on transaction costs of Hydra protocol transactions\n  + These are also performed and reported now on every PR -> [Example](https://github.com/input-output-hk/hydra/pull/340#issuecomment-1116247611)\n\n- New architectural decision records:\n  + [ADR-0017: UDP for Hydra networking](https://hydra.family/head-protocol/adr/17)\n  + [ADR-0018: Single state in Hydra.Node](https://hydra.family/head-protocol/adr/18)\n\n- Improved `hydra-node --version` to show an easier to understand and accurate revision based on `git describe`\n\n- Added `hydra-node --script-info` to check hashes of plutus scripts available in a `hydra-node`.\n  + This can also be seen as the \"script version\" and should stabilize as we progress in maturity of the codebase.\n\n#### Changed\n\n- **BREAKING** Switch to Ed25519 keys and proper EdDSA signatures for the Hydra Head protocol\n  + The `--hydra-signing-key` and consequently `--hydra-verification-key` are now longer and not compatible with previous versions!\n\n- **BREAKING** The Hydra plutus scripts have changed in course of finalizing [#181](https://github.com/input-output-hk/hydra/issues/181)\n  + All Hydra protocol transactions need to be signed by a Head participant now\n  + This changes the script address(es) and the current `hydra-node` would not detect old Heads on the testnet.\n\n- **BREAKING** Renamed server output `UTxO -> GetUTxOResponse`\n  + This should be a better name for the response of `GetUTxO` client input on our API :)\n\n- Updated our dependencies (`plutus`, `cardano-ledger`, etc.) to most recent released versions making scripts smaller and Head transactions slighly cheaper already, see benchmarks for current limits.\n\n#### Fixed\n\n- Reject commit transactions locking a UTxO locked by Byron addresses, part of [#182](https://github.com/input-output-hk/hydra/issues/182)\n  + This would render a Head unclosable because Byron addresses are filtered out by the ledger and not visible to plutus scripts\n\n- Fix instructions in [demo setup without docker](https://hydra.family/head-protocol/docs/getting-started/demo/without-docker) to use `0.0.0.0` and correct paths.\n\n#### Known Issues\n\n- TUI quickly flashes an error on fanout. This is because all nodes try to post a fanout transaction, but only one of the participants' transactions wins. Related to [#279](https://github.com/input-output-hk/hydra/issues/279)\n- Recipient addresses to send money to in the TUI are inferred from the current UTXO set. If a party does not commit a UTXO or consumes all its UTXO in a Head, it won't be able to send or receive anything anymore.\n- TUI crashes when user tries to post a new transaction without any UTXO remaining.\n- The internal wallet of hydra-node requires a UTXO to be marked as \"fuel\" to drive the Hydra protocol transactions. See [user manual](https://hydra.family/head-protocol/docs/getting-started/demo/with-docker/#seeding-the-network).\n\n## [0.4.0] - 2022-03-23\n\n#### Added\n\n- Our [user manual \ud83d\udcd6](https://hydra.family/head-protocol) is now available! It includes installation and usage instructions, a full API reference and also a knowledge base about Hydra concepts. The manual will be an ever-evolving source of documentation that we'll maintain alongside the project.\n- Support multiple Heads per Cardano network by identifying and distinguishing transactions of individual Head instances [#180](https://github.com/input-output-hk/hydra/issues/180).\n- Mint and burn state token used to thread state across the OCV state machine, and participation tokens for each party in the head [#181](https://github.com/input-output-hk/hydra/issues/181)\n- Provide (mandatory) command-line options `--ledger-genesis` and `--ledger-protocol-parameters` to configure the ledger that runs _inside a head_. Options are provided as filepath to JSON files which match formats from `cardano-cli` and `cardano-node` [#180](https://github.com/input-output-hk/hydra/issues/180).\n- Created [hydra-cardano-api](https://hydra.family/head-protocol/haddock/hydra-cardano-api/) as wrapper around [cardano-api](https://github.com/input-output-hk/cardano-node/tree/master/cardano-api#cardano-api) specialized to the latest Cardano's era, and with useful extra utility functions.\n- Two new architectural decision records:\n  - [ADR-0014: Token usage in Hydra Scripts](https://hydra.family/head-protocol/adr/14)\n  - [ADR-0015: Configuration Through an Admin API](https://hydra.family/head-protocol/adr/15)\n\n#### Changed\n\n- `--network-magic` option for the `hydra-node` and `hydra-tui` has been changed to `--network-id`. Also, the `hydra-tui` command-line used to default to mainnet when not provided with any `--network-magic` option, it doesn't anymore, `--network-id` is mandatory. [#180](https://github.com/input-output-hk/hydra/issues/180)\n- Optimize the `CollectCom` transition of the on-chain Hydra contract to allow collecting commits from more than 2 parties! [#254](https://github.com/input-output-hk/hydra/issues/254)\n- Use a faucet to distribute funds in test suites and the `demo/` setup.\n- Internally, better decouple the management of the on-chain head state from the network component. While not visible to the end user, this improvement paves the way for better handling rollbacks and on-chain _\"instability\"_ of newly posted transactions. [#184](https://github.com/input-output-hk/hydra/issues/184)\n- Internally, improved and consolidate generators used for property-based testing to cover a wider range of cases, be more consistent and also faster (avoiding to generate too large nested data-structures).\n\n#### Fixed\n\n- `Hydra.Network.Ouroboros` not using hard-coded valency values anymore to allow more than 7 peer connections [#203](https://github.com/input-output-hk/hydra/issues/203).\n- Build issues due to explicit packages list in nix shell [#223](https://github.com/input-output-hk/hydra/issues/223).\n- `hydra-tui` to show form focus, indicate invalid fields in dialogs and only allow valid values to be submitted [#224](https://github.com/input-output-hk/hydra/issues/224).\n- Repaired benchmarks and improved collected metrics; in particular, benchmarks now collect CPU usage and provide average confirmation times over 5s windows.\n- Fixed a bug in the Fanout transaction scheduling and submission where clients would attempt to post a fanout transaction before a 'Close' transaction is even observed. Now, every participant of the head will attempt to post a fanout a transaction after they successfully observed a transaction. Of course, the layer 1 will enforce that only one fanout is posted [#279](https://github.com/input-output-hk/hydra/issues/279).\n\n#### Known Issues\n\n- Only no or one utxo can be committed to a Head.\n- Recipient addresses to send money to in the TUI are inferred from the current UTXO set. If a party does not commit a UTXO or consumes all its UTXO in a Head, it won't be able to send or receive anything anymore.\n- TUI crashes when user tries to post a new transaction without any UTXO remaining.\n- The internal wallet of hydra-node requires a UTXO to be marked as \"fuel\" to drive the Hydra protocol transactions. See [user manual](https://hydra.family/head-protocol/docs/getting-started/demo/with-docker/#seeding-the-network).\n- Aborting a head with more than 2 participants (i.e. `> 2`) requires increase in tx size limit over current mainchain parameters to ~20KB.\n- Head can collect at most 3 commits and each party can commit either 1 or 0 UTXO to a Head.\n- The head cannot be finalized if holding more than ~100 assets (or ~50 ada-only UTxO entries) with the standard tx size of 16KB.\n\n## [0.3.0] - 2022-02-02\n\n#### Added\n\n- Implementation of on-chain verification of Hydra Head lifecycle without contests. This first version with its various shortcuts is documented on examples of the [full](./docs/adr/img/on-chain-full.jpg) and [abort](./docs/adr/img/on-chain-abort.jpg) on-chain life-cycles of a Hydra Head\n- Enable nix-shell on Mac\n- Build separate docker images for `hydra-node` and `hydra-tui` available as [packages](https://github.com/orgs/input-output-hk/packages?repo_name=hydra) from GitHub repo\n- Utility executable `inspect-script` to dump contracts for further analysis\n- CBOR encoder and Merkle-Tree in Plutus as separate packages `plutus-cbor` and `plutus-merkle-tree`, released & tagged separately\n\n#### Changed\n\n- Package `local-cluster` is now `hydra-cluster`.\n- Use `cardano-api` types and functions to interact with chain.\n- Refine computation of fees from internal wallet.\n- Remove several sources of `error` in chain interaction component.\n\n#### Known issues\n\n- `collectComTx` requires increase in tx size limit over current mainchain parameters to 32KB, which should be alleviated with Plutus optimisations and merging all contracts in one in future releases\n- Head can collect at most 9 commits and each party can commit either 1 or 0 UTXO to a Head\n- `fanoutTx` cannot handle more than 100 UTxO with the standard tx size of 16KB (200 with the temporary increase for test purpose).\n- Known issues from `0.2.0` still apply\n\n## [0.2.0] - 2021-12-14\n\n#### Added\n- Direct chain integration which allows to connect to a real cardano-node /\n  devnet; no on-chain validators though.\n- Support alonzo transactions inside the Hydra Head. For now using a `freeCostModel`.\n- Command line options `--node-socket`, `--network-magic` and\n  `--cardano-{signing,verification}-key` to `hydra-node` and `hydra-tui` to\n  configure the Cardano network access.\n\n#### Changed\n- Command line options of `hydra-node` quite significantly to distinguish hydra\n  credentials from cardano credentials.\n- Commit and transaction creation logic of TUI to use cardano credentials.\n\n#### Removed\n- ZeroMQ mock-chain executable, chain component and corresponding `hydra-node`\n  command line options.\n- ZeroMQ based network component.\n- Aliases from party identifiers.\n\n#### Fixed\n- `hydra-tui` to correctly show current state when re-connecting.\n\n#### Known issues\n- There can only be one Head per Cardano network (i.e. on the devnet).\n- Only no or one utxo can be committed to a Head.\n- Recipient addresses to send money to in the TUI are inferred from the current\n  UTXO set. If a party does not commit a UTXO or consumes all its UTXO in a\n  Head, it won't be able to send or receive anything anymore.\n- TUI crashes when user tries to post a new transaction wihout any UTXO\n  remaining.\n- Not an issue, but a workaround: The internal wallet of `hydra-node` requires a\n  UTXO to be marked as \"fuel\" to drive the Hydra protocol transactions.\n\n## [0.1.0] - 2021-09-30\n\n- First proof-of-concept for a `hydra-node`\n\n### Added\n- Coordinated Hydra Head protocol\n- Single Head per hydra-node\n- Stubbed chain using external process\n- Network statically configured, direct TCP connections\n- WebSocket, message-based API Server\n- Terminal user interface client\n", "{-# LANGUAGE DuplicateRecordFields #-}\n{-# LANGUAGE TypeApplications #-}\n{-# OPTIONS_GHC -Wno-orphans #-}\n\nmodule Hydra.Chain.Direct.Contract.Close where\n\nimport Hydra.Cardano.Api\nimport Hydra.Prelude hiding (label)\n\nimport Cardano.Api.UTxO as UTxO\nimport Data.Maybe (fromJust)\nimport Hydra.Chain.Direct.Contract.Gen (genForParty, genHash, genMintedOrBurnedValue)\nimport Hydra.Chain.Direct.Contract.Mutation (\n  Mutation (..),\n  SomeMutation (..),\n  addParticipationTokens,\n  changeHeadOutputDatum,\n  changeMintedTokens,\n  replaceContestationDeadline,\n  replaceContestationPeriod,\n  replaceContesters,\n  replaceHeadId,\n  replaceParties,\n  replacePolicyIdWith,\n  replaceSnapshotNumber,\n  replaceUtxoHash,\n )\nimport Hydra.Chain.Direct.Fixture (testNetworkId)\nimport qualified Hydra.Chain.Direct.Fixture as Fixture\nimport Hydra.Chain.Direct.ScriptRegistry (genScriptRegistry, registryUTxO)\nimport Hydra.Chain.Direct.TimeHandle (PointInTime)\nimport Hydra.Chain.Direct.Tx (ClosingSnapshot (..), OpenThreadOutput (..), UTxOHash (UTxOHash), closeTx, mkHeadId, mkHeadOutput)\nimport Hydra.ContestationPeriod (fromChain)\nimport Hydra.Contract.Error (toErrorCode)\nimport Hydra.Contract.HeadError (HeadError (..))\nimport qualified Hydra.Contract.HeadState as Head\nimport Hydra.Contract.HeadTokens (headPolicyId)\nimport Hydra.Contract.Util (UtilError (MintingOrBurningIsForbidden))\nimport Hydra.Crypto (HydraKey, MultiSignature, aggregate, sign, toPlutusSignatures)\nimport qualified Hydra.Data.ContestationPeriod as OnChain\nimport qualified Hydra.Data.Party as OnChain\nimport Hydra.Ledger (hashUTxO)\nimport Hydra.Ledger.Cardano (genAddressInEra, genOneUTxOFor, genValue, genVerificationKey)\nimport Hydra.Ledger.Cardano.Evaluate (genValidityBoundsFromContestationPeriod)\nimport Hydra.Party (Party, deriveParty, partyToChain)\nimport Hydra.Plutus.Extras (posixFromUTCTime)\nimport Hydra.Plutus.Orphans ()\nimport Hydra.Snapshot (Snapshot (..), SnapshotNumber)\nimport PlutusLedgerApi.V1.Time (DiffMilliSeconds (..), fromMilliSeconds)\nimport PlutusLedgerApi.V2 (BuiltinByteString, POSIXTime, PubKeyHash (PubKeyHash), toBuiltin)\nimport Test.Hydra.Fixture (aliceSk, bobSk, carolSk)\nimport Test.QuickCheck (arbitrarySizedNatural, choose, elements, listOf1, oneof, suchThat)\nimport Test.QuickCheck.Instances ()\n\n-- | Healthy close transaction for the generic case were we close a head\n--   after one or more snapshot have been agreed upon between the members.\nhealthyCloseTx :: (Tx, UTxO)\nhealthyCloseTx =\n  (tx, lookupUTxO)\n where\n  tx =\n    closeTx\n      scriptRegistry\n      somePartyCardanoVerificationKey\n      closingSnapshot\n      healthyCloseLowerBoundSlot\n      healthyCloseUpperBoundPointInTime\n      openThreadOutput\n      (mkHeadId Fixture.testPolicyId)\n\n  lookupUTxO =\n    UTxO.singleton (healthyOpenHeadTxIn, healthyOpenHeadTxOut)\n      <> registryUTxO scriptRegistry\n\n  scriptRegistry = genScriptRegistry `generateWith` 42\n\n  headDatum = toScriptData healthyOpenHeadDatum\n\n  openThreadOutput =\n    OpenThreadOutput\n      { openThreadUTxO = (healthyOpenHeadTxIn, healthyOpenHeadTxOut, headDatum)\n      , openParties = healthyOnChainParties\n      , openContestationPeriod = healthyContestationPeriod\n      }\n\n  closingSnapshot :: ClosingSnapshot\n  closingSnapshot =\n    CloseWithConfirmedSnapshot\n      { snapshotNumber = healthyCloseSnapshotNumber\n      , closeUtxoHash = UTxOHash $ hashUTxO @Tx healthyCloseUTxO\n      , signatures = healthySignature healthyCloseSnapshotNumber\n      }\n\n-- | Healthy close transaction for the specific case were we close a head\n--   with the initial UtxO, that is, no snapshot have been agreed upon and\n--   signed by the head members yet.\nhealthyCloseInitialTx :: (Tx, UTxO)\nhealthyCloseInitialTx =\n  (tx, lookupUTxO)\n where\n  tx =\n    closeTx\n      scriptRegistry\n      somePartyCardanoVerificationKey\n      closingSnapshot\n      healthyCloseLowerBoundSlot\n      healthyCloseUpperBoundPointInTime\n      openThreadOutput\n      (mkHeadId Fixture.testPolicyId)\n\n  lookupUTxO =\n    UTxO.singleton (healthyOpenHeadTxIn, healthyOpenHeadTxOut)\n      <> registryUTxO scriptRegistry\n\n  scriptRegistry = genScriptRegistry `generateWith` 42\n\n  headDatum = toScriptData healthyOpenHeadDatum\n\n  openThreadOutput =\n    OpenThreadOutput\n      { openThreadUTxO = (healthyOpenHeadTxIn, healthyOpenHeadTxOut, headDatum)\n      , openParties = healthyOnChainParties\n      , openContestationPeriod = healthyContestationPeriod\n      }\n  closingSnapshot :: ClosingSnapshot\n  closingSnapshot =\n    CloseWithInitialSnapshot\n      { openUtxoHash = UTxOHash $ hashUTxO @Tx healthyUTxO\n      }\n\n-- NOTE: We need to use the contestation period when generating start/end tx\n-- validity slots/time since if tx validity bound difference is bigger than\n-- contestation period our close validator will fail\nhealthyCloseLowerBoundSlot :: SlotNo\nhealthyCloseUpperBoundPointInTime :: PointInTime\n(healthyCloseLowerBoundSlot, healthyCloseUpperBoundPointInTime) =\n  genValidityBoundsFromContestationPeriod (fromChain healthyContestationPeriod) `generateWith` 42\n\nhealthyOpenHeadTxIn :: TxIn\nhealthyOpenHeadTxIn = generateWith arbitrary 42\n\nhealthyOpenHeadTxOut :: TxOut CtxUTxO\nhealthyOpenHeadTxOut =\n  mkHeadOutput testNetworkId Fixture.testPolicyId headTxOutDatum\n    & addParticipationTokens healthyParties\n where\n  headTxOutDatum = toUTxOContext (mkTxOutDatum healthyOpenHeadDatum)\n\nhealthySnapshot :: Snapshot Tx\nhealthySnapshot =\n  Snapshot\n    { number = healthyCloseSnapshotNumber\n    , utxo = healthyCloseUTxO\n    , confirmed = []\n    }\n\nhealthyCloseUTxO :: UTxO\nhealthyCloseUTxO =\n  (genOneUTxOFor somePartyCardanoVerificationKey `suchThat` (/= healthyUTxO))\n    `generateWith` 42\n\nhealthyCloseSnapshotNumber :: SnapshotNumber\nhealthyCloseSnapshotNumber = 1\n\nhealthyOpenHeadDatum :: Head.State\nhealthyOpenHeadDatum =\n  Head.Open\n    { parties = healthyOnChainParties\n    , utxoHash = toBuiltin $ hashUTxO @Tx healthyUTxO\n    , contestationPeriod = healthyContestationPeriod\n    , headId = toPlutusCurrencySymbol Fixture.testPolicyId\n    }\n\nhealthyContestationPeriod :: OnChain.ContestationPeriod\nhealthyContestationPeriod = OnChain.contestationPeriodFromDiffTime $ fromInteger healthyContestationPeriodSeconds\n\nhealthyContestationPeriodSeconds :: Integer\nhealthyContestationPeriodSeconds = 10\n\nhealthyUTxO :: UTxO\nhealthyUTxO = genOneUTxOFor somePartyCardanoVerificationKey `generateWith` 42\n\nsomePartyCardanoVerificationKey :: VerificationKey PaymentKey\nsomePartyCardanoVerificationKey = flip generateWith 42 $ do\n  genForParty genVerificationKey <$> elements healthyParties\n\nhealthySigningKeys :: [SigningKey HydraKey]\nhealthySigningKeys = [aliceSk, bobSk, carolSk]\n\nhealthyParties :: [Party]\nhealthyParties = deriveParty <$> healthySigningKeys\n\nhealthyOnChainParties :: [OnChain.Party]\nhealthyOnChainParties = partyToChain <$> healthyParties\n\nhealthySignature :: SnapshotNumber -> MultiSignature (Snapshot Tx)\nhealthySignature number = aggregate [sign sk snapshot | sk <- healthySigningKeys]\n where\n  snapshot = healthySnapshot{number}\n\nhealthyContestationDeadline :: UTCTime\nhealthyContestationDeadline =\n  addUTCTime\n    (fromInteger healthyContestationPeriodSeconds)\n    (snd healthyCloseUpperBoundPointInTime)\n\nhealthyClosedUTxOHash :: BuiltinByteString\nhealthyClosedUTxOHash =\n  toBuiltin $ hashUTxO @Tx healthyClosedUTxO\n\nhealthyClosedUTxO :: UTxO\nhealthyClosedUTxO =\n  genOneUTxOFor somePartyCardanoVerificationKey `generateWith` 42\n\ndata CloseMutation\n  = -- | Ensures collectCom does not allow any output address but \u03bdHead.\n    NotContinueContract\n  | -- | Ensures the snapshot signature is multisigned by all valid Head\n    -- participants.\n    --\n    -- Invalidates the tx by changing the redeemer signature\n    -- but not the snapshot number in output head datum.\n    MutateSignatureButNotSnapshotNumber\n  | -- | Ensures the snapshot number is consistent with the signature.\n    --\n    -- Invalidates the tx by changing the snapshot number\n    -- in resulting head output but not the redeemer signature.\n    MutateSnapshotNumberButNotSignature\n  | -- | Check that snapshot numbers <= 0 need to close the head with the\n    -- initial UTxO hash.\n    MutateSnapshotNumberToLessThanEqualZero\n  | -- | Ensures the close snapshot is multisigned by all Head participants by\n    -- changing the parties in the input head datum. If they do not align the\n    -- multisignature will not be valid anymore.\n    SnapshotNotSignedByAllParties\n  | -- | Ensures close is authenticated by a one of the Head members by changing\n    --  the signer used on the tx to not be one of PTs.\n    MutateRequiredSigner\n  | -- | Ensures close is authenticated by a one of the Head members by changing\n    --  the signer used on the tx to be empty.\n    MutateNoRequiredSigner\n  | -- | Ensures close is authenticated by a one of the Head members by changing\n    --  the signer used on the tx to have multiple signers (including the signer\n    -- to not fail for SignerIsNotAParticipant).\n    MutateMultipleRequiredSigner\n  | -- | Invalidates the tx by changing the utxo hash in resulting head output.\n    --\n    -- Ensures the output state is consistent with the redeemer.\n    MutateCloseUTxOHash\n  | -- | Ensures parties do not change between head input datum and head output\n    --  datum.\n    MutatePartiesInOutput\n  | -- | Ensures headId do not change between head input datum and head output\n    -- datum.\n    MutateHeadIdInOutput\n  | -- | Invalidates the tx by changing the lower bound to be non finite.\n    MutateInfiniteLowerBound\n  | -- | Invalidates the tx by changing the upper bound to be non finite.\n    MutateInfiniteUpperBound\n  | -- | Invalidates the tx by changing the contestation deadline to not satisfy\n    -- `contestationDeadline = upperBound + contestationPeriod`.\n    MutateContestationDeadline\n  | -- | Invalidates the tx by changing the lower and upper bound to be not\n    -- bounded as per spec `upperBound - lowerBound <= contestationPeriod`.\n    --\n    -- This also changes the resulting `head output` contestation deadline to be\n    -- valid, so it satisfy `contestationDeadline = upperBound +\n    -- contestationPeriod`.\n    MutateValidityInterval\n  | -- | Ensure the Head cannot be closed with correct authentication from a\n    -- different Head. We simulate this by changing the head policy id of the ST\n    -- and PTs to be of a different head - a real attack would be to add inputs\n    -- with those tokens on top of spending the head output, a bit like a double\n    -- satisfaction attack. Note that the token name stays the same and\n    -- consistent with the signer. This will cause authentication failure\n    -- because the signer's PT, although with a consistent name, is not from the\n    -- right head (has a different policy id than in the datum).\n    CloseFromDifferentHead\n  | -- | Minting or burning of tokens should not be possible in close.\n    MutateTokenMintingOrBurning\n  | -- | Invalidates the tx by changing the contesters to be non empty.\n    MutateContesters\n  | -- | Invalidates the tx by changing output values arbitrarily to be different\n    -- (not preserved) from the head.\n    --\n    -- Ensures values are preserved between head input and output.\n    MutateValueInOutput\n  | -- | Invalidate the tx by changing the contestation period.\n    MutateContestationPeriod\n  deriving (Generic, Show, Enum, Bounded)\n\ngenCloseMutation :: (Tx, UTxO) -> Gen SomeMutation\ngenCloseMutation (tx, _utxo) =\n  oneof\n    [ SomeMutation (Just $ toErrorCode NotPayingToHead) NotContinueContract <$> do\n        mutatedAddress <- genAddressInEra testNetworkId\n        pure $ ChangeOutput 0 (modifyTxOutAddress (const mutatedAddress) headTxOut)\n    , SomeMutation (Just $ toErrorCode InvalidSnapshotSignature) MutateSignatureButNotSnapshotNumber . ChangeHeadRedeemer <$> do\n        Head.Close . toPlutusSignatures <$> (arbitrary :: Gen (MultiSignature (Snapshot Tx)))\n    , SomeMutation (Just $ toErrorCode ClosedWithNonInitialHash) MutateSnapshotNumberToLessThanEqualZero <$> do\n        mutatedSnapshotNumber <- arbitrary `suchThat` (<= 0)\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceSnapshotNumber mutatedSnapshotNumber) headTxOut\n    , SomeMutation (Just $ toErrorCode InvalidSnapshotSignature) MutateSnapshotNumberButNotSignature <$> do\n        mutatedSnapshotNumber <- arbitrarySizedNatural `suchThat` (> healthyCloseSnapshotNumber)\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceSnapshotNumber $ toInteger mutatedSnapshotNumber) headTxOut\n    , SomeMutation (Just $ toErrorCode InvalidSnapshotSignature) SnapshotNotSignedByAllParties . ChangeInputHeadDatum <$> do\n        mutatedParties <- arbitrary `suchThat` (/= healthyOnChainParties)\n        pure $\n          Head.Open\n            { parties = mutatedParties\n            , utxoHash = \"\"\n            , contestationPeriod = healthyContestationPeriod\n            , headId = toPlutusCurrencySymbol Fixture.testPolicyId\n            }\n    , SomeMutation (Just $ toErrorCode ChangedParameters) MutatePartiesInOutput <$> do\n        mutatedParties <- arbitrary `suchThat` (/= healthyOnChainParties)\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceParties mutatedParties) headTxOut\n    , SomeMutation (Just $ toErrorCode ChangedParameters) MutateHeadIdInOutput <$> do\n        otherHeadId <- toPlutusCurrencySymbol . headPolicyId <$> arbitrary `suchThat` (/= Fixture.testSeedInput)\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceHeadId otherHeadId) headTxOut\n    , SomeMutation (Just $ toErrorCode SignerIsNotAParticipant) MutateRequiredSigner <$> do\n        newSigner <- verificationKeyHash <$> genVerificationKey `suchThat` (/= somePartyCardanoVerificationKey)\n        pure $ ChangeRequiredSigners [newSigner]\n    , SomeMutation (Just $ toErrorCode NoSigners) MutateNoRequiredSigner <$> do\n        pure $ ChangeRequiredSigners []\n    , SomeMutation (Just $ toErrorCode TooManySigners) MutateMultipleRequiredSigner <$> do\n        otherSigners <- listOf1 (genVerificationKey `suchThat` (/= somePartyCardanoVerificationKey))\n        let signerAndOthers = somePartyCardanoVerificationKey : otherSigners\n        pure $ ChangeRequiredSigners (verificationKeyHash <$> signerAndOthers)\n    , SomeMutation (Just $ toErrorCode InvalidSnapshotSignature) MutateCloseUTxOHash . ChangeOutput 0 <$> do\n        mutatedUTxOHash <- genHash `suchThat` ((/= healthyClosedUTxOHash) . toBuiltin)\n        pure $ changeHeadOutputDatum (replaceUtxoHash $ toBuiltin mutatedUTxOHash) headTxOut\n    , SomeMutation (Just $ toErrorCode IncorrectClosedContestationDeadline) MutateContestationDeadline <$> do\n        mutatedDeadline <- genMutatedDeadline\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceContestationDeadline mutatedDeadline) headTxOut\n    , SomeMutation (Just $ toErrorCode ChangedParameters) MutateContestationPeriod <$> do\n        mutatedPeriod <- arbitrary\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceContestationPeriod mutatedPeriod) headTxOut\n    , SomeMutation (Just $ toErrorCode InfiniteLowerBound) MutateInfiniteLowerBound . ChangeValidityLowerBound <$> do\n        pure TxValidityNoLowerBound\n    , SomeMutation (Just $ toErrorCode InfiniteUpperBound) MutateInfiniteUpperBound . ChangeValidityUpperBound <$> do\n        pure TxValidityNoUpperBound\n    , SomeMutation (Just $ toErrorCode HasBoundedValidityCheckFailed) MutateValidityInterval <$> do\n        (lowerSlotNo, upperSlotNo, adjustedContestationDeadline) <- genOversizedTransactionValidity\n        pure $\n          Changes\n            [ ChangeValidityInterval (TxValidityLowerBound lowerSlotNo, TxValidityUpperBound upperSlotNo)\n            , ChangeOutput 0 $ changeHeadOutputDatum (replaceContestationDeadline adjustedContestationDeadline) headTxOut\n            ]\n    , -- XXX: This is a bit confusing and not giving much value. Maybe we can remove this.\n      -- This also seems to be covered by MutateRequiredSigner\n      SomeMutation (Just $ toErrorCode SignerIsNotAParticipant) CloseFromDifferentHead <$> do\n        otherHeadId <- headPolicyId <$> arbitrary `suchThat` (/= Fixture.testSeedInput)\n        pure $\n          Changes\n            [ ChangeOutput 0 (replacePolicyIdWith Fixture.testPolicyId otherHeadId headTxOut)\n            , ChangeInput\n                healthyOpenHeadTxIn\n                (replacePolicyIdWith Fixture.testPolicyId otherHeadId healthyOpenHeadTxOut)\n                ( Just $\n                    toScriptData\n                      ( Head.Close\n                          { signature =\n                              toPlutusSignatures $\n                                healthySignature healthyCloseSnapshotNumber\n                          }\n                      )\n                )\n            ]\n    , SomeMutation (Just $ toErrorCode MintingOrBurningIsForbidden) MutateTokenMintingOrBurning\n        <$> (changeMintedTokens tx =<< genMintedOrBurnedValue)\n    , SomeMutation (Just $ toErrorCode ContestersNonEmpty) MutateContesters . ChangeOutput 0 <$> do\n        mutatedContesters <- listOf1 $ PubKeyHash . toBuiltin <$> genHash\n        pure $ headTxOut & changeHeadOutputDatum (replaceContesters mutatedContesters)\n    , SomeMutation (Just $ toErrorCode HeadValueIsNotPreserved) MutateValueInOutput <$> do\n        newValue <- genValue\n        pure $ ChangeOutput 0 (headTxOut{txOutValue = newValue})\n    ]\n where\n  genOversizedTransactionValidity = do\n    -- Implicit hypotheses: the slot length is and has always been 1 seconds so we can add slot with seconds\n    lowerValidityBound <- arbitrary :: Gen Word64\n    upperValidityBound <- choose (lowerValidityBound + fromIntegral healthyContestationPeriodSeconds, maxBound)\n    let adjustedContestationDeadline =\n          fromMilliSeconds . DiffMilliSeconds $ (healthyContestationPeriodSeconds + fromIntegral upperValidityBound) * 1000\n    pure (SlotNo lowerValidityBound, SlotNo upperValidityBound, adjustedContestationDeadline)\n\n  headTxOut = fromJust $ txOuts' tx !!? 0\n\ndata CloseInitialMutation\n  = MutateCloseContestationDeadline'\n  deriving (Generic, Show, Enum, Bounded)\n\n-- | Mutations for the specific case of closing with the intial state.\n-- We should probably validate all the mutation to this initial state but at\n-- least we keep this regression test as we stumbled upon problems with the following case.\n-- The nice thing to do would probably to generate either \"normal\" healthyCloseTx or\n-- or healthyCloseInitialTx and apply all the mutations to it but we didn't manage to do that\n-- right away.\ngenCloseInitialMutation :: (Tx, UTxO) -> Gen SomeMutation\ngenCloseInitialMutation (tx, _utxo) =\n  oneof\n    [ SomeMutation (Just $ toErrorCode IncorrectClosedContestationDeadline) MutateCloseContestationDeadline' <$> do\n        mutatedDeadline <- genMutatedDeadline\n        pure $ ChangeOutput 0 $ changeHeadOutputDatum (replaceContestationDeadline mutatedDeadline) headTxOut\n    ]\n where\n  headTxOut = fromJust $ txOuts' tx !!? 0\n\n-- | Generate not acceptable, but interesting deadlines.\ngenMutatedDeadline :: Gen POSIXTime\ngenMutatedDeadline = do\n  oneof\n    [ valuesAroundZero\n    , valuesAroundDeadline\n    ]\n where\n  valuesAroundZero = arbitrary `suchThat` (/= deadline)\n\n  valuesAroundDeadline = arbitrary `suchThat` (/= 0) <&> (+ deadline)\n\n  deadline = posixFromUTCTime healthyContestationDeadline\n", "cabal-version: 2.2\nname:          hydra-plutus\nversion:       0.13.0\nsynopsis:      Hydra Plutus Contracts\nauthor:        IOG\ncopyright:     2022 IOG\nlicense:       Apache-2.0\nlicense-files:\n  LICENSE\n  NOTICE\n\nsource-repository head\n  type:     git\n  location: https://github.com/input-output-hk/hydra\n\nflag hydra-development\n  description: Disable -Werror for development\n  default:     False\n  manual:      True\n\ncommon project-config\n  default-extensions:\n    NoImplicitPrelude\n    BangPatterns\n    BinaryLiterals\n    ConstraintKinds\n    DataKinds\n    DefaultSignatures\n    DeriveAnyClass\n    DeriveDataTypeable\n    DeriveFoldable\n    DeriveFunctor\n    DeriveGeneric\n    DeriveTraversable\n    DerivingStrategies\n    EmptyDataDecls\n    ExistentialQuantification\n    FlexibleContexts\n    FlexibleInstances\n    FunctionalDependencies\n    GADTs\n    GeneralizedNewtypeDeriving\n    InstanceSigs\n    KindSignatures\n    LambdaCase\n    MultiParamTypeClasses\n    MultiWayIf\n    NamedFieldPuns\n    NumericUnderscores\n    OverloadedStrings\n    PartialTypeSignatures\n    PatternGuards\n    RankNTypes\n    ScopedTypeVariables\n    StandaloneDeriving\n    TupleSections\n    TypeFamilies\n    TypeOperators\n    TypeSynonymInstances\n    ViewPatterns\n\n  ghc-options:\n    -Wall -Wcompat -Widentities -Wincomplete-record-updates\n    -Wincomplete-uni-patterns -Wredundant-constraints\n    -Wnoncanonical-monad-instances -fobject-code\n    -fno-ignore-interface-pragmas -fno-omit-interface-pragmas\n    -fno-strictness\n\n  if !flag(hydra-development)\n    ghc-options: -Werror\n\nlibrary\n  import:          project-config\n  exposed-modules:\n    Hydra.Contract\n    Hydra.Contract.Commit\n    Hydra.Contract.CommitError\n    Hydra.Contract.Error\n    Hydra.Contract.Hash\n    Hydra.Contract.Head\n    Hydra.Contract.HeadError\n    Hydra.Contract.HeadState\n    Hydra.Contract.HeadTokens\n    Hydra.Contract.HeadTokensError\n    Hydra.Contract.Initial\n    Hydra.Contract.InitialError\n    Hydra.Contract.MintAction\n    Hydra.Contract.Util\n    Hydra.Data.ContestationPeriod\n    Hydra.Data.Party\n    Hydra.Data.Utxo\n    Hydra.ScriptContext\n\n  hs-source-dirs:  src\n  build-depends:\n    , aeson\n    , base\n    , base16-bytestring\n    , bytestring\n    , hydra-cardano-api\n    , hydra-plutus-extras\n    , hydra-prelude\n    , plutus-core          >=1.7 && <1.8\n    , plutus-ledger-api    >=1.7 && <1.8\n    , plutus-tx            >=1.7 && <1.8\n    , plutus-tx-plugin     >=1.7 && <1.8\n    , QuickCheck\n    , serialise\n    , template-haskell\n    , time\n\n  if flag(hydra-development)\n    -- NOTE(SN): should fix HLS choking on PlutusTx plugin\n    ghc-options: -fplugin-opt PlutusTx.Plugin:defer-errors\n\ntest-suite tests\n  import:             project-config\n  ghc-options:        -threaded -rtsopts -with-rtsopts=-N\n  hs-source-dirs:     test\n  main-is:            Main.hs\n  type:               exitcode-stdio-1.0\n  other-modules:\n    Hydra.Data.ContestationPeriodSpec\n    Hydra.Plutus.GoldenSpec\n    Spec\n\n  build-depends:\n    , base\n    , hspec\n    , hspec-golden\n    , hydra-cardano-api\n    , hydra-plutus\n    , hydra-prelude\n    , hydra-test-utils\n    , plutus-ledger-api\n    , QuickCheck\n\n  build-tool-depends: hspec-discover:hspec-discover\n\nexecutable inspect-script\n  import:         project-config\n  hs-source-dirs: exe/inspect-script\n  main-is:        Main.hs\n  build-depends:\n    , aeson\n    , bytestring\n    , hydra-cardano-api\n    , hydra-plutus\n    , hydra-prelude\n    , plutus-ledger-api\n    , plutus-tx\n    , prettyprinter\n    , serialise\n    , text\n\n  ghc-options:    -threaded -rtsopts\n", "{\n    \"type\": \"PlutusScriptV2\",\n    \"description\": \"hydra-mHead-0.12.0-86-gcd14dca2f\",\n    \"cborHex\": \"590f9f590f9c0100003332323322323232323322332232323232323232323232323232323232323222222533532533532323333573466e1c0052002212200223333573466e1c009200021220012326320243357380420440440426aae74004dd50018998092481034d303600533533301022333573466e3c00800407006cc044004cc03803cc04cd40048800884cc094894cd40044074884d4008894cd4ccd5cd19b88001480000840804c01800c408000440644c8cc02ccc03cc04d2401034d3031003233026225335001101d22153355335333573466e3cd402888008d40088800808007c4ccd5cd19b873500a22001350022200102001f101f10201300400100133300d300e120012350012200235500122222222222200c323232323233010330143018491034d3032003322333573466e1c008004088084cc050cc044c894cd400484c00c004520003233223223002001302d2253350011003221330063500222001300400130012200230012200123300101f48000cc044cc05888ccd5cd19b8f0020010220215005015301950063301e500148008cc040cc050c0612401034d3033003323223002001302b225335001102222135002225335333573466e3c00801c09c0984c0580044c01800d4014d5400c88004cc040c8cc044cc0652401034d3034003322333573466e1c00800408c0894008cc03c4488c88c008004c0b4894cd4004400c884cc018008c0100054004c8cc0b0894cd400440908854cd54cd4ccc07088ccd5cd19b8f002001028027500b301b00221533500113021498884d4008894cd400c54cd4ccd5cd19b87001480080ac0a840ac4c0952622130274984c08d241034d30370013004001102500150011333012301312001235001220013300400c5006330143018491034d303500330103322333573466e3c008004088084d5400888800d4014c94cd4ccd5cd19b8f35001220023500b220020210201333573466e1cd400488004d402c880040840804080d540088880084d5400488800454ccd4d54004880084c06d2401034d31300021301c4901034d31300021533532533532355007222222222222300d002302a2253350011502922135002225335333573466e3c0080200980944c0b80044c01800c84c0080045409ccc0408ccccccd5d200091991919199ab9a3370ea004900311999aab9f50022302e122220032502d029232323232323232323232323232323232323333573466e1d40512004233335573ea0284a07e46666aae7d404c941008cccd55cfa8099282091999aab9f501325042233335573ea0264a08646666aae7d404c941108cccd55cfa8099282291999aab9f35744a0284a66a660280246ae854070854cd4c048d5d0a80d90a99a980a9aba1501b215335301435742a03642a66a60286ae85406c854cd4c060d5d0a80d90a99a9980d00c9aba1501b21304e12222333333300400b00a0090080070060051504c1504b1504a150491504815047150462504604204104003f03e03d03c03b23333573466e1d40552002233335573ea02a4a08046666aae7d4024941048cccd55cfa8049282111999aab9f500925043233335573e6ae89402894cd4c038d5d0a80d10a99a998098089aba1500e215335301335742a01c42a66a60286ae85403884c12448888cccc00402001c0180145411c541185411454110941101000fc0f80f40f08cccd5cd19b875016480008cccd55cfa80b1282091999aab9f500725042233335573ea00e4a08646666aae7d401c941108cccd55cf9aba2500825335300f35742a03642a66a660280246ae854030854cd4c050d5d0a80610a99a991999999aba40012333233573466e1cd55cea800a4000464646666aae7d40089413c8cccd55cfa8011282811999aab9f35744a0064a66a646666666ae900048ccc8cd5cd19b8735573aa00290001191999aab9f500125057233335573e6ae89400894cd4c094d5d0a80190982d0008a82c1282c02a02989aab9e5002137540044a0a80a24a0a64a0a64a0a64a0a609e6ae854014854cd4c074d5d0a80290982a198290010008a8290a8289282882682602589aba25001135573ca00426ea80089412c12094128941289412894128118d5d0a8061098250911119998010040038030028a8240a8238a8230a8229282282082001f81f01e9282001e81e01d89aba25001135744a00226ae8940404d5d1280089aba25001135744a01a46666666ae900048ccc8cd5cd19b8735573aa00290001191999aab9f50012503c233335573e6ae89400894cd4c020d5d0a80190981f8008a81e9281e81c81c09aab9e5002137540044a07206c4a0704a0704a0704a07006846666666ae90004940dc940dc940dc8c0e0dd68011281b8199299a980100090981b8008a81a91999999aba40012503525035250352503523036375c00406246446666666ae90004940d8940d88c00cdd60011281b1281b019181b111999aab9f001230370312533530043574200442a66a60086ae8800c84c0e4cd40c8008004540dc540d80c84d5d1280089aba25001135744a00226ae8940044d5d1280089aba25002135573ca00426aae7540044dd500101312814128141281412814012100090a9999a80091111110981124c26036931111099091998008020018011980908911911801000981811299a800880191099803001180200080191110980fa4c26034930a99a9980080428018980ca4c4426a00444a66a006266054004002442603e93111a800911111111111199aa980b89000911a80111111a8021119a80110041299a999ab9a3371e00202e066064266a0686607800a00c01020100580142602400426a0024400464646666ae68cdc3800a400046464646464646644246600200600464646666ae68cdc3800a400046464646464646464646464646464646464646464646464646464646666664444442466666666666600200e02400c00a00801c01a01800601400401066020464646666ae68cdc3800a4000464646466442466002006004605000460280026ae84d5d128011aba15001135573c006464c6409466ae7011c120120d55ce8009baa00100c3301000d00a33300f75c01c01266601eeb8038020cc041d7002199807bae2001002357426ae894040d5d0a8079aba1500f35742a01e6ae85403cd5d0a8079aba1500f35742a01e6ae85403cd5d0a8079aba1500f35742a01e464646666ae68cdc3800a4000464646464646464646666444424666600200a00800600464646666ae68cdc3800a400046464646644246600200600460500046601604e0026ae84d5d128011aba15001135573c006464c6409066ae70114118118d55ce8009baa00433300e75c01a00664646666ae68cdc3800a4008464244460040086ae84d55cf00191999ab9a3370e004900111919091118008021bae001357426aae780108cccd5cd19b87003480008488800c8c98c8128cd5ce0238240240238231aab9d00137540046600aeb8004d5d09aba2500535742a0086ae854010d5d0a8021119191999ab9a3370e0029000119182418030009aba135573c00646666ae68cdc3801240044a08e464c6408c66ae7010c11011010cd55ce8009baa001135744a00226ae8940044d55cf00191931901e99ab9c03a03b03b35573a0026ea80048ccc009d73ad0012232230023756002607a446666aae7c00480e08c8cd40e0cc100c018d55cea80098029aab9e500130043574400626ae840080e48c88c008dd6000981d911999aab9f0012036233503530043574200460066ae880080dc4d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135573c006464c6405666ae700a00a40a4d55ce8009baa00232323333573466e1c00520062323212222300400532323333573466e1c005200c21222222200323232323333573466e1c015200a21222222200423333573466e1c01920082323233221222222233001009008375c0046eb4004d5d09aba2500435742a00646666ae68cdc3803a400c46464664424444444660040120106eb8008dd70009aba135744a00c6ae8540148cccd5cd19b87008480108c8c8cc8848888888cc018024020c050008dd70009aba135744a0106ae85401c8cccd5cd19b87009480088c8c848888888c01c020c050004d5d09aab9e00b23333573466e1c0292000232321222222230050083015001357426aae780308c98c80e0cd5ce01a81b01b01a81a01981901889aab9e005135573c00826aae7800c0b4d55ce8009baa001357426aae7800c8cccd5cd19b87002480108c8c848888c008014c024004d5d09aab9e00423333573466e1c00d2002232321222230010053009001357426aae780148cccd5cd19b87004480008c8c848888c00c014dd70009aba135573c00c464c6405c66ae700ac0b00b00ac0a80a4d55ce8009baa001357426ae894014d5d0a802119191999ab9a3370e002900011919191981619191999ab9a3370e00290001191bae001357426aae7800c8c98c80bccd5ce0160168169aab9d00137540046eb4004d5d09aba2500235742a00226aae7800c8c98c80a4cd5ce0130138139aab9d0013754002464646666ae68cdc3800a40044646464646466644424466600200a0080066eb400cdd68011bad001357426ae89400cd5d0a8011aba15002135744a00226aae7800c8cccd5cd19b87002480008c8c8488c00800cc01c004d5d09aab9e00423263202933573804c04e04e04c6aae74004dd5000919191999ab9a3370e00290011191909118008019bae001357426aae7800c8cccd5cd19b87002480008c8c8488c00800cdd70009aba135573c008464c6405066ae70094098098094d55ce8009baa001135573c006464c6404466ae7007c080080d55ce8009baa001101d130164910350543500301d22112225335001100222133005002333553007120010050040012233335500222230023370000290011000800a4000603644a66a00220244426a00444a66a666ae68cdc78012450b4879647261486561645631000170161333573466e1c0052002017016130060032253350021001101122230033002001222335500300200130172211225335001101322133501430040023355300612001004001223002001200122322300200130162253350011501522135002225335330080020071301a0011300600323500122333350012326320133357389201024c680001120012326320133357389201024c68000112326320133357389201024c6800011225335001100a133573800401246a00244444444444401046008921034d30380023003491034d30390023002491034d31310023263200a3357380020104466e00008004488008488004488008488488cc00401000d2410350543100120014988848cc00400c0088488c00800c44880048848cc00400c0088c8c00400488cc00cc0080080052211c3ffaf6b87df35cb01a52eb23032b8f0b1a2a3ad3acf0930abc9c833a0048811c8a43c1c4d5cb60c212e7aa540932f311cb914a1b6104f0f36a2aaaf00001\"\n}\n", "{\n    \"type\": \"PlutusScriptV2\",\n    \"description\": \"hydra-vCommit-0.12.0-86-gcd14dca2f\",\n    \"cborHex\": \"59082a59082701000032323232323322323322323232323232222533533223530060052225323233500713300249010343303100323301b225335001101422135002225335333573466e3c0080280640604c04c0044c01800c004cc0408d4004888888888888020c0040184cc00924010343303200323301b225335001101422135002225335333573466e3c0080280640604c0540044c01800c004cc0408d54cd40044c0392410350543800221002222200335300100622222222222200a235001220022253350011012133573800402264646666ae68cdc3800a4004424400446666ae68cdc3801240004244002464c6402e66ae70050054054050d55ce8009baa00232323333573466e1c0052000232323232323322123300100300232323333573466e1c0052000232323232323232323232323232323232323232323232323232323333332222221233333333333300100701200600500400e00d00c00300a0020083302d232323333573466e1c0052000232323233221233001003002303b0023014001357426ae894008d5d0a80089aab9e00323263203c3357380720740746aae74004dd500080619816806805199807bae00e00933300f75c01c0106605aeb8010ccc03dd710008011aba135744a01e6ae854038d5d0a8071aba1500e35742a01c6ae854038d5d0a8071aba1500e35742a01c6ae854038d5d0a8071aba1500e232323333573466e1c0052000232323232323232323333222212333300100500400300232323333573466e1c005200023232323322123300100300230260023300b025001357426ae894008d5d0a80089aab9e00323263203a33573806e0700706aae74004dd50021998073ae00d00332323333573466e1c005200423212223002004357426aae7800c8cccd5cd19b87002480088c8c84888c004010dd70009aba135573c00846666ae68cdc3801a400042444006464c6407866ae700e40e80e80e40e0d55ce8009baa0023300575c0026ae84d5d128029aba1500435742a0086ae85401088c8c8cccd5cd19b87001480008c8c8488c00800cc018004d5d09aab9e00323333573466e1c0092002212200123263203833573806a06c06c06a6aae74004dd500089aba25001135744a00226aae7800c8c98c80bccd5ce0160168169aab9d00137540024666004eb9d68009119118011bab001302b2233335573e002405246466a05266442466002006004600c6aae754004c014d55cf280098021aba200313574200405626ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aab9e00323263201e3357380360380386aae74004dd500119191999ab9a3370e00290031191909111180200299191999ab9a3370e002900610911111100191919191999ab9a3370e00a900510911111100211999ab9a3370e00c900411919199109111111198008048041bae002375a0026ae84d5d128021aba1500323333573466e1c01d20062323233221222222233002009008375c0046eb8004d5d09aba2500635742a00a46666ae68cdc380424008464646644244444446600c01201060260046eb8004d5d09aba2500835742a00e46666ae68cdc3804a40044646424444444600e01060260026ae84d55cf00591999ab9a3370e014900011919091111111802804180a0009aba135573c018464c6405666ae700a00a40a40a009c0980940904d55cf00289aab9e004135573c0060406aae74004dd50009aba135573c00646666ae68cdc3801240084646424444600400a60100026ae84d55cf00211999ab9a3370e006900111919091111800802980e8009aba135573c00a46666ae68cdc3802240004646424444600600a6eb8004d5d09aab9e00623263202133573803c03e03e03c03a0386aae74004dd50009aba135744a0086ae85400c8c8c8cccd5cd19b87001480088c8c8c8c8c8ccc888488ccc00401401000cdd68019bad002375a0026ae84d5d128019aba1500235742a00426ae8940044d55cf00191999ab9a3370e004900011919091180100198038009aba135573c008464c6403a66ae7006806c06c068d55ce8009baa001232323333573466e1c0052002232321223001003375c0026ae84d55cf00191999ab9a3370e00490001191909118010019bae001357426aae780108c98c8070cd5ce00c80d00d00c9aab9d001375400226aae7800c8c98c8058cd5ce00980a00a1aab9d001375400220222600c921035054350032232323333573466e1c00520002323232323233322212333001004003002375c00660140046eb8004d5d09aba2500335742a0046ae8540084d5d1280089aab9e0032326320143357380220240246aae74004dd50009802119191999ab9a3370e002900011919191991091980080180118090011bae001357426ae894008d5d0a80089aab9e0032326320133357380200220226aae74004dd5000980711299a80088039109a80111299a999ab9a3371e00401a0180162666ae68cdc380099b8148001200200c00b1300600323263200e335738002018601844a66a002200a4426a00444a66a666ae68cdc78010058050048999ab9a3370e002900100500489803001919118011bac001300c2233335573e0024014466a01260086ae84008c00cd5d1001006111801000891001091000a450b48796472614865616456310012200212212233001004003232323333573466e1c005200023232323322123300100300232323333573466e1c0052000232375c0026ae84d55cf00191931900719ab9c00b00c00c35573a0026ea8008dd68009aba135744a0046ae8540044d55cf00191931900419ab9c00500600635573a0026ea80052410350543100120014988c8c00400488cc00cc0080080041\"\n}\n", "{\n    \"type\": \"PlutusScriptV2\",\n    \"description\": \"hydra-vHead-0.12.0-86-gcd14dca2f\",\n    \"cborHex\": \"\"\n}\n", "{\n    \"type\": \"PlutusScriptV2\",\n    \"description\": \"hydra-vInitial-0.12.0-86-gcd14dca2f\",\n    \"cborHex\": \"5910335910300100003323232332233223232332232323232323232323232323233223232323232323232323232323300b22225335333004375c00664646666ae68cdc3800a4004464642446002006660380360026ae84d55cf00191999ab9a3370e0049000109100111931901199ab9c02b01f02102035573a0026ea8008c8c8cccd5cd19b87001480008c8c8c8c8c8cc8848cc00400c008c8c8cccd5cd19b87001480008c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8cccccc88888848cccccccccccc00401c04801801401003803403000c028008020cc0f48c8c8cccd5cd19b87001480008c8c8c8cc8848cc00400c008c10c008c050004d5d09aba2500235742a00226aae7800c8c98c8120cd5ce0280220231aab9d00137540020186607a01a01466601eeb8038024ccc03dd70070041981ebae00433300f75c40020046ae84d5d128079aba1500e35742a01c6ae854038d5d0a8071aba1500e35742a01c6ae854038d5d0a8071aba1500e35742a01c6ae8540388c8c8cccd5cd19b87001480008c8c8c8c8c8c8c8c8cccc888848cccc00401401000c008c8c8cccd5cd19b87001480008c8c8c8cc8848cc00400c008c098008cc02c094004d5d09aba2500235742a00226aae7800c8c98c8118cd5ce0270210221aab9d001375400866601ceb803400cc8c8cccd5cd19b87001480108c84888c008010d5d09aab9e00323333573466e1c00920022323212223001004375c0026ae84d55cf00211999ab9a3370e00690001091100191931902419ab9c05004404604504435573a0026ea8008cc015d70009aba135744a00a6ae854010d5d0a8021aba150042232323333573466e1c005200023230453006001357426aae7800c8cccd5cd19b8700248008941108c98c8110cd5ce0260200210209aab9d001375400226ae8940044d5d1280089aab9e00323263203b33573808606e0726aae74004dd500091998013ae75a0024464460046eac004c10488cccd55cf800902091919a8209981e98031aab9d5001300535573ca00260086ae8800c4d5d080101a89aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226aae7800c8c98c80a8cd5ce0190130141aab9d001375400464646666ae68cdc3800a400c4646424444600800a64646666ae68cdc3800a401842444444400646464646666ae68cdc3802a401442444444400846666ae68cdc38032401046464664424444444660020120106eb8008dd68009aba135744a0086ae85400c8cccd5cd19b87007480188c8c8cc8848888888cc008024020dd70011bae001357426ae894018d5d0a80291999ab9a3370e0109002119191991091111111980300480418098011bae001357426ae894020d5d0a80391999ab9a3370e01290011191909111111180380418098009aba135573c01646666ae68cdc3805240004646424444444600a01060280026ae84d55cf00611931901b99ab9c03f033035034033032031030135573c00a26aae780104d55cf0018161aab9d00137540026ae84d55cf00191999ab9a3370e00490021191909111180100298040009aba135573c00846666ae68cdc3801a40044646424444600200a604a0026ae84d55cf00291999ab9a3370e0089000119190911118018029bae001357426aae780188c98c80b4cd5ce01a8148158150148141aab9d00137540026ae84d5d128021aba15003232323333573466e1c005200223232323232333222122333001005004003375a0066eb4008dd68009aba135744a0066ae854008d5d0a80109aba25001135573c00646666ae68cdc380124000464642446004006600e0026ae84d55cf00211931901499ab9c03102502702635573a0026ea80048c8c8cccd5cd19b87001480088c8c8488c00400cdd70009aba135573c00646666ae68cdc3801240004646424460040066eb8004d5d09aab9e00423263202833573806004804c04a6aae74004dd500089aab9e00323263202233573805403c0406aae74004dd5000880d8980d24810350543500222253350021330094910349303100323302a225335001102622135002225335333573466e3c0080280ac0a84c0300044c01800c004cc054028d40048800884c8c8c8c8cc09ccc068c0392410349303300332233030225335001102d22321350032230030013034225335001130060032213500222323335002253353301f480000045400840d8894cd4cc0800080045400c40dc94cd4cc07c00520001500210361300600333015002001323335530161200101302c3355300c12001235001220013300200a00150043301250023332232322300200130312253350011003221333007220023006002300400130022200123300101302c3301400d00c500332330283301b300f4910349303400301c33027500435500122002330283301b300f490103493134003302235500122001009330283301b300f491034930320033232230020013030225335001102c221533533027005002102f13004001533532330302253350011502822135002225335330290020101302d00113006003001500321533500113020498884d4008894cd400c54cd4cc05c0052002100213024498884c099261302049010349303500323355301a1200120010013550052222222222220043301b300f490103493135003301b23012001301050051533533001009500413019498884d4008894cd400c54ccd40084c08d2410349303900213024490103493130002153353235500a222222222222300d00230332253350011502b22135002225335333573466e3c00801c0d00cc4c0c00044c01800c854cd4cc080c8c88ccccccd5d20009199919ab9a3370e6aae7540052000232323233335573ea0064a06846666aae7d400c940d48cccd55cfa8019281b11999aab9f35744a0084a66a64a66a601c0024260740022a0706ae85401c854cd4c034d5d0a80390a99a98079aba1500721303b123330010040030021503915038150372503703203103002f135744a00226ae8940044d55cf280109baa0022502f02d2502e2502e2502e2502e029322333333357480024a05c4a05c460066eb0008940b8940b80a4c0d488cccd55cf8009181781a9299a991999999aba40012333233573466e1cd55cea800a4000464646666aae7d4008940d48cccd55cfa8011281b11999aab9f35744a0064a66a646666666ae900048ccc8cd5cd19b8735573aa0029000119191999aab9f50022503e233335573ea0044a07e46666aae7cd5d128019299a991999999aba40012333233573466e1cd55cea800a40004646666aae7d4004941188cccd55cf9aba2500225335301d35742a0064260920022a08e4a08e08408226aae7940084dd5001128218209282112821128211282101e9aba1500521533532333333357480024a0864a0864a086460886eb40089410c0f8d5d0a802909821998258010008a8208a8201282001d81d01c89aba25001135573ca00426ea8008940e80e0940e4940e4940e4940e40d0d5d0a80290a99a98071aba1500521303a1233001003002150381503725037032031030135744a00226aae7940084dd500112818817928181281812818128180159aba100221533530043574400642606266a06c0040022a05e2a05c05246666666ae90004940b0940b0940b0940b08c0b4dd7001013800909a8009111981800100089812a4810349313200130244910349313100221301f49888d4004888888888888ccd54c0884800488d40088888d401088cd4008802094cd4ccd5cd19b8f00101703f03e13350403303c005006008100803800a1330183225335001213003001102b3301200b00a3500422350022222222222223333500d25031250312503123303b225335001150332213500222533533035002007130380041300600300d13301732233002001004553015120012533532355003222222222222300d00c302c2253350011502422135002225335330260020071302900413006003210011301d4910349313600135002220023024225335001102022135002225335333573466e3c0092210b4879647261486561645631000250241333573466e1c004cdc0a40009001012812098030019811910891299a800881211099a812980200119aa98030900080200091a8009100091a800911100191299a800880e899ab9c00201c235001222222222222008301e225335001101b223213500322300300130222253350011300600322135002225335333573466e1d200000102302213006003102222333573466e1c00800406806488c8cd54c024480048d400488cc068008cd54c030480048d400488cc074008ccd40048cc0212000001223300900200123300800148000004cc01000c00888cdc0001000911919aa98040900091a800911980c801199a800919aa98060900091a800911980e80118070008009119980300b001000919aa98060900091a800911980e8011aa806800800999800808801801111199aa9803890009119a80f00100099aa98050900091a800911980d8011806000999aa980389000911a80111911801003981191299a800899a8108028021109a80111299a9980600100388040980300180e80099aa98050900091a80091191980e0019800802981191299a80089aa8068019109a80111299a9980600100408911198010050020980300180111118019801000980c9108911299a800880111099802801199aa98038900080280200090911180180208909111800802180b110891299a800880b91099a80c180200119aa98030900080200091803a49034931330022300200130132235001225335002153350011012221300a4901034930370022153350031300a4910349303800221350042253350071356622135002223301a3301437666a00a444466e952000323357406a00a4466e95200032335740600200666ae80cc0108cd40048cdd2a400066ae80c00c004dd881011119ba548008cd5d01ba80033357406ea0008cd5d01ba800137620440046ec40788cd40048cdd2a400066ae80dd48009bb101f23374a900119aba037520026ec407ccd5d019919800ba9233300275246ea000400488c88dd31801000981411299a80089bb201f221350022233574066ec0c020008c01c004c01800c010cd5d02999a801899ba548000dd880d9099ba548010cd5d00009bb101c213374a900119aba037520026ec4070cd5d019800ba9002376203644a66a0024266e95200033574060060026ec40744cdd2a40046ec4070004cc068cc054018008c038cc06402400c8c8c8cccd5cd19b87001480008c8c8c8cc060c8c8cccd5cd19b87001480008c8dd70009aba135573c006464c6402466ae70068038040d55ce8009baa002375a0026ae84d5d128011aba15001135573c006464c6401866ae70050020028d55ce8009baa0012322300237580026024446666aae7c00480488cd4044c010d5d080118019aba20020062300249103493036002326320063357380020042400244666ae68cdc780100080500491299a999ab9a3371e6a004440046a002440040120102666ae68cdc39a801110009a80091000804804080424c42446004006224400244246600200600444a66a0042002200624400424400224400424424466002008006921035054310022123300100300223230010012233003300200200148811ce4c32d6dc83b2917aa7805571f30437ad98b6d20d821d34d459437550001\"\n}\n", "{-# LANGUAGE DuplicateRecordFields #-}\n{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE TypeApplications #-}\n{-# OPTIONS_GHC -fno-specialize #-}\n-- Avoid trace calls to be optimized away when inlining functions.\n{-# OPTIONS_GHC -fplugin-opt PlutusTx.Plugin:no-simplifier-inline #-}\n-- Plutus core version to compile to. In babbage era, that is Cardano protocol\n-- version 7 and 8, only plutus-core version 1.0.0 is available.\n{-# OPTIONS_GHC -fplugin-opt PlutusTx.Plugin:target-version=1.0.0 #-}\n\nmodule Hydra.Contract.Head where\n\nimport PlutusTx.Prelude\n\nimport Hydra.Cardano.Api (PlutusScriptVersion (PlutusScriptV2))\nimport Hydra.Contract.Commit (Commit (..))\nimport qualified Hydra.Contract.Commit as Commit\nimport Hydra.Contract.HeadError (HeadError (..), errorCode)\nimport Hydra.Contract.HeadState (Input (..), Signature, SnapshotNumber, State (..))\nimport Hydra.Contract.Util (hasST, mustNotMintOrBurn, (===))\nimport Hydra.Data.ContestationPeriod (ContestationPeriod, addContestationPeriod, milliseconds)\nimport Hydra.Data.Party (Party (vkey))\nimport Hydra.Plutus.Extras (ValidatorType, scriptValidatorHash, wrapValidator)\nimport PlutusLedgerApi.Common (SerialisedScript, serialiseCompiledCode)\nimport PlutusLedgerApi.V1.Time (fromMilliSeconds)\nimport PlutusLedgerApi.V1.Value (valueOf)\nimport PlutusLedgerApi.V2 (\n  Address,\n  CurrencySymbol,\n  Datum (..),\n  Extended (Finite),\n  FromData (fromBuiltinData),\n  Interval (..),\n  LowerBound (LowerBound),\n  OutputDatum (..),\n  POSIXTime,\n  PubKeyHash (getPubKeyHash),\n  ScriptContext (..),\n  ScriptHash,\n  ToData (toBuiltinData),\n  TokenName (..),\n  TxInInfo (..),\n  TxInfo (..),\n  TxOut (..),\n  TxOutRef (..),\n  UpperBound (..),\n  Value (Value, getValue),\n  adaSymbol,\n  adaToken,\n )\nimport PlutusLedgerApi.V2.Contexts (findDatum, findOwnInput)\nimport PlutusTx (CompiledCode)\nimport qualified PlutusTx\nimport qualified PlutusTx.AssocMap as Map\nimport qualified PlutusTx.Builtins as Builtins\n\ntype DatumType = State\ntype RedeemerType = Input\n\n--------------------------------------------------------------------------------\n-- Validators\n--------------------------------------------------------------------------------\n\n{-# INLINEABLE headValidator #-}\nheadValidator ::\n  State ->\n  Input ->\n  ScriptContext ->\n  Bool\nheadValidator oldState input ctx =\n  case (oldState, input) of\n    (Initial{contestationPeriod, parties, headId}, CollectCom) ->\n      checkCollectCom ctx (contestationPeriod, parties, headId)\n    (Initial{parties, headId}, Abort) ->\n      checkAbort ctx headId parties\n    (Open{parties, utxoHash = initialUtxoHash, contestationPeriod, headId}, Close{signature}) ->\n      checkClose ctx parties initialUtxoHash signature contestationPeriod headId\n    (Closed{parties, snapshotNumber = closedSnapshotNumber, contestationDeadline, contestationPeriod, headId, contesters}, Contest{signature}) ->\n      checkContest ctx contestationDeadline contestationPeriod parties closedSnapshotNumber signature contesters headId\n    (Closed{utxoHash, contestationDeadline}, Fanout{numberOfFanoutOutputs}) ->\n      checkFanout utxoHash contestationDeadline numberOfFanoutOutputs ctx\n    _ ->\n      traceError $(errorCode InvalidHeadStateTransition)\n\n-- | On-Chain verification for 'Abort' transition. It verifies that:\n--\n--   * All PTs have been burnt: The right number of Head tokens with the correct\n--     head id are burnt, one PT for each party and a state token ST.\n--\n--   * All committed funds have been redistributed. This is done via v_commit\n--     and it only needs to ensure that we have spent all comitted outputs,\n--     which follows from burning all the PTs.\ncheckAbort ::\n  ScriptContext ->\n  CurrencySymbol ->\n  [Party] ->\n  Bool\ncheckAbort ctx@ScriptContext{scriptContextTxInfo = txInfo} headCurrencySymbol parties =\n  mustBurnAllHeadTokens\n    && mustBeSignedByParticipant ctx headCurrencySymbol\n    && mustReimburseCommittedUTxO\n where\n  mustBurnAllHeadTokens =\n    traceIfFalse $(errorCode BurntTokenNumberMismatch) $\n      burntTokens == length parties + 1\n\n  minted = getValue $ txInfoMint txInfo\n\n  burntTokens =\n    case Map.lookup headCurrencySymbol minted of\n      Nothing -> 0\n      Just tokenMap -> negate $ sum tokenMap\n\n  mustReimburseCommittedUTxO =\n    traceIfFalse $(errorCode ReimbursedOutputsDontMatch) $\n      hashOfCommittedUTxO == hashOfOutputs\n\n  hashOfOutputs =\n    -- NOTE: It is enough to just _take_ the same number of outputs that\n    -- correspond to the number of commit inputs to make sure everything is\n    -- reimbursed because we assume the outputs are correctly sorted with\n    -- reimbursed commits coming first\n    hashTxOuts $ take (length committed) (txInfoOutputs txInfo)\n\n  hashOfCommittedUTxO =\n    hashPreSerializedCommits committed\n\n  committed = committedUTxO [] (txInfoInputs txInfo)\n\n  committedUTxO commits = \\case\n    [] -> commits\n    TxInInfo{txInInfoResolved = txOut} : rest\n      | hasPT headCurrencySymbol txOut ->\n          committedUTxO (commitDatum txInfo txOut <> commits) rest\n      | otherwise ->\n          committedUTxO commits rest\n\n-- | On-Chain verification for 'CollectCom' transition. It verifies that:\n--\n--   * All participants have committed (even empty commits)\n--\n--   * All commits are properly collected and locked into \u03b7 as a hash\n--     of serialized tx outputs in the same sequence as commit inputs!\n--\n--   * The transaction is performed (i.e. signed) by one of the head participants\n--\n--   * State token (ST) is present in the output\ncheckCollectCom ::\n  -- | Script execution context\n  ScriptContext ->\n  (ContestationPeriod, [Party], CurrencySymbol) ->\n  Bool\ncheckCollectCom ctx@ScriptContext{scriptContextTxInfo = txInfo} (contestationPeriod, parties, headId) =\n  mustCollectUtxoHash\n    && mustNotChangeParameters\n    && mustCollectAllValue\n    -- XXX: Is this really needed? If yes, why not check on the output?\n    && traceIfFalse $(errorCode STNotSpent) (hasST headId val)\n    && everyoneHasCommitted\n    && mustBeSignedByParticipant ctx headId\n    && mustNotMintOrBurn txInfo\n where\n  mustCollectUtxoHash =\n    traceIfFalse $(errorCode IncorrectUtxoHash) $\n      utxoHash == hashPreSerializedCommits collectedCommits\n\n  mustNotChangeParameters =\n    traceIfFalse $(errorCode ChangedParameters) $\n      parties' == parties\n        && contestationPeriod' == contestationPeriod\n        && headId' == headId\n\n  mustCollectAllValue =\n    traceIfFalse $(errorCode NotAllValueCollected) $\n      -- NOTE: Instead of checking the head output val' against all collected\n      -- value, we do ensure the output value is all non collected value - fees.\n      -- This makes the script not scale badly with number of participants as it\n      -- would commonly only be a small number of inputs/outputs to pay fees.\n      otherValueOut == notCollectedValueIn - txInfoFee txInfo\n\n  (parties', utxoHash, contestationPeriod', headId') =\n    -- XXX: fromBuiltinData is super big (and also expensive?)\n    case fromBuiltinData @DatumType $ getDatum (headOutputDatum ctx) of\n      Just\n        Open\n          { parties = p\n          , utxoHash = h\n          , contestationPeriod = cp\n          , headId = hId\n          } ->\n          (p, h, cp, hId)\n      _ -> traceError $(errorCode WrongStateInOutputDatum)\n\n  headAddress = getHeadAddress ctx\n\n  everyoneHasCommitted =\n    traceIfFalse $(errorCode MissingCommits) $\n      nTotalCommits == length parties\n\n  val = maybe mempty (txOutValue . txInInfoResolved) $ findOwnInput ctx\n\n  otherValueOut =\n    case txInfoOutputs txInfo of\n      -- NOTE: First output must be head output\n      (_ : rest) -> foldMap txOutValue rest\n      _ -> mempty\n\n  -- NOTE: We do keep track of the value we do not want to collect as this is\n  -- typically less, ideally only a single other input with only ADA in it.\n  (collectedCommits, nTotalCommits, notCollectedValueIn) =\n    foldr\n      extractAndCountCommits\n      ([], 0, mempty)\n      (txInfoInputs txInfo)\n\n  extractAndCountCommits TxInInfo{txInInfoResolved} (commits, nCommits, notCollected)\n    | isHeadOutput txInInfoResolved =\n        (commits, nCommits, notCollected)\n    | hasPT headId txInInfoResolved =\n        (commitDatum txInfo txInInfoResolved <> commits, succ nCommits, notCollected)\n    | otherwise =\n        (commits, nCommits, notCollected <> txOutValue txInInfoResolved)\n\n  isHeadOutput txOut = txOutAddress txOut == headAddress\n{-# INLINEABLE checkCollectCom #-}\n\n-- | Try to find the commit datum in the input and\n-- if it is there return the committed utxo\ncommitDatum :: TxInfo -> TxOut -> [Commit]\ncommitDatum txInfo input = do\n  let datum = findTxOutDatum txInfo input\n  case fromBuiltinData @Commit.DatumType $ getDatum datum of\n    Just (_party, commits, _headId) ->\n      commits\n    Nothing -> []\n{-# INLINEABLE commitDatum #-}\n\n-- | The close validator must verify that:\n--\n--   * Check that the closing tx validity is bounded by contestation period\n--\n--   * Check that the deadline corresponds with tx validity and contestation period.\n--\n--   * The resulting utxo hash is correctly signed or the initial utxo hash,\n--     depending on snapshot number\n--\n--   * The transaction is performed (i.e. signed) by one of the head participants\n--\n--   * State token (ST) is present in the output\n--\n--   * Contesters must be initialize as empty\n--\n--   * Value in v_head is preserved\ncheckClose ::\n  ScriptContext ->\n  [Party] ->\n  BuiltinByteString ->\n  [Signature] ->\n  ContestationPeriod ->\n  CurrencySymbol ->\n  Bool\ncheckClose ctx parties initialUtxoHash sig cperiod headPolicyId =\n  mustNotMintOrBurn txInfo\n    && hasBoundedValidity\n    && checkDeadline\n    && checkSnapshot\n    && mustBeSignedByParticipant ctx headPolicyId\n    && mustInitializeContesters\n    && mustPreserveValue\n    && mustNotChangeParameters\n where\n  mustPreserveValue =\n    traceIfFalse $(errorCode HeadValueIsNotPreserved) $\n      val === val'\n\n  val' = txOutValue . head $ txInfoOutputs txInfo\n\n  val = maybe mempty (txOutValue . txInInfoResolved) $ findOwnInput ctx\n\n  hasBoundedValidity =\n    traceIfFalse $(errorCode HasBoundedValidityCheckFailed) $\n      tMax - tMin <= cp\n\n  (closedSnapshotNumber, closedUtxoHash, parties', closedContestationDeadline, cperiod', headId', contesters') =\n    -- XXX: fromBuiltinData is super big (and also expensive?)\n    case fromBuiltinData @DatumType $ getDatum (headOutputDatum ctx) of\n      Just\n        Closed\n          { snapshotNumber\n          , utxoHash\n          , parties = p\n          , contestationDeadline\n          , headId\n          , contesters\n          , contestationPeriod\n          } -> (snapshotNumber, utxoHash, p, contestationDeadline, contestationPeriod, headId, contesters)\n      _ -> traceError $(errorCode WrongStateInOutputDatum)\n\n  checkSnapshot\n    | closedSnapshotNumber > 0 =\n        traceIfFalse $(errorCode InvalidSnapshotSignature) $\n          verifySnapshotSignature parties closedSnapshotNumber closedUtxoHash sig\n    | otherwise =\n        traceIfFalse $(errorCode ClosedWithNonInitialHash) $\n          closedUtxoHash == initialUtxoHash\n\n  checkDeadline =\n    traceIfFalse $(errorCode IncorrectClosedContestationDeadline) $\n      closedContestationDeadline == makeContestationDeadline cperiod ctx\n\n  cp = fromMilliSeconds (milliseconds cperiod)\n\n  tMax = case ivTo $ txInfoValidRange txInfo of\n    UpperBound (Finite t) _ -> t\n    _InfiniteBound -> traceError $(errorCode InfiniteUpperBound)\n\n  tMin = case ivFrom $ txInfoValidRange txInfo of\n    LowerBound (Finite t) _ -> t\n    _InfiniteBound -> traceError $(errorCode InfiniteLowerBound)\n\n  mustNotChangeParameters =\n    traceIfFalse $(errorCode ChangedParameters) $\n      headId' == headPolicyId\n        && parties' == parties\n        && cperiod' == cperiod\n\n  mustInitializeContesters =\n    traceIfFalse $(errorCode ContestersNonEmpty) $\n      null contesters'\n\n  ScriptContext{scriptContextTxInfo = txInfo} = ctx\n{-# INLINEABLE checkClose #-}\n\n-- | The contest validator must verify that:\n--\n--   * The transaction does not mint or burn tokens.\n--\n--   * The contest snapshot number is strictly greater than the closed snapshot number.\n--\n--   * The contest snapshot is correctly signed.\n--\n--   * The transaction is performed (i.e. signed) by one of the head participants\n--\n--   * Party can contest only once.\n--\n--   * The transaction is performed before the deadline.\n--\n--   * Add signer to list of contesters.\n--\n--   * State token (ST) is present in the output\n--\n--   * Push deadline if signer is not the last one to contest.\n--\n--   * No other parameters have changed.\n--\n--   * Value in v_head is preserved\ncheckContest ::\n  ScriptContext ->\n  POSIXTime ->\n  ContestationPeriod ->\n  [Party] ->\n  -- | Snapshot number of the closed state.\n  SnapshotNumber ->\n  [Signature] ->\n  -- | Keys of party member which already contested.\n  [PubKeyHash] ->\n  -- | Head id\n  CurrencySymbol ->\n  Bool\ncheckContest ctx contestationDeadline contestationPeriod parties closedSnapshotNumber sig contesters headId =\n  mustNotMintOrBurn txInfo\n    && mustBeNewer\n    && mustBeMultiSigned\n    && mustBeSignedByParticipant ctx headId\n    && checkSignedParticipantContestOnlyOnce\n    && mustBeWithinContestationPeriod\n    && mustUpdateContesters\n    && mustPushDeadline\n    && mustNotChangeParameters\n    && mustPreserveValue\n where\n  mustPreserveValue =\n    traceIfFalse $(errorCode HeadValueIsNotPreserved) $\n      val === val'\n\n  val' = txOutValue . head $ txInfoOutputs txInfo\n\n  val = maybe mempty (txOutValue . txInInfoResolved) $ findOwnInput ctx\n\n  mustBeNewer =\n    traceIfFalse $(errorCode TooOldSnapshot) $\n      contestSnapshotNumber > closedSnapshotNumber\n\n  mustBeMultiSigned =\n    verifySnapshotSignature parties contestSnapshotNumber contestUtxoHash sig\n\n  mustBeWithinContestationPeriod =\n    case ivTo (txInfoValidRange txInfo) of\n      UpperBound (Finite time) _ ->\n        traceIfFalse $(errorCode UpperBoundBeyondContestationDeadline) $\n          time <= contestationDeadline\n      _ -> traceError $(errorCode ContestNoUpperBoundDefined)\n\n  mustNotChangeParameters =\n    traceIfFalse $(errorCode ChangedParameters) $\n      parties' == parties\n        && headId' == headId\n        && contestationPeriod' == contestationPeriod\n\n  mustPushDeadline =\n    if length contesters' == length parties'\n      then\n        traceIfFalse $(errorCode MustNotPushDeadline) $\n          contestationDeadline' == contestationDeadline\n      else\n        traceIfFalse $(errorCode MustPushDeadline) $\n          contestationDeadline' == addContestationPeriod contestationDeadline contestationPeriod\n\n  mustUpdateContesters =\n    traceIfFalse $(errorCode ContesterNotIncluded) $\n      contesters' == contester : contesters\n\n  (contestSnapshotNumber, contestUtxoHash, parties', contestationDeadline', contestationPeriod', headId', contesters') =\n    -- XXX: fromBuiltinData is super big (and also expensive?)\n    case fromBuiltinData @DatumType $ getDatum (headOutputDatum ctx) of\n      Just\n        Closed\n          { snapshotNumber\n          , utxoHash\n          , parties = p\n          , contestationDeadline = dl\n          , contestationPeriod = cp\n          , headId = hid\n          , contesters = cs\n          } -> (snapshotNumber, utxoHash, p, dl, cp, hid, cs)\n      _ -> traceError $(errorCode WrongStateInOutputDatum)\n\n  ScriptContext{scriptContextTxInfo = txInfo} = ctx\n\n  contester =\n    case txInfoSignatories txInfo of\n      [signer] -> signer\n      _ -> traceError $(errorCode WrongNumberOfSigners)\n\n  checkSignedParticipantContestOnlyOnce =\n    traceIfFalse $(errorCode SignerAlreadyContested) $\n      contester `notElem` contesters\n{-# INLINEABLE checkContest #-}\n\ncheckFanout ::\n  BuiltinByteString ->\n  POSIXTime ->\n  Integer ->\n  ScriptContext ->\n  Bool\ncheckFanout utxoHash contestationDeadline numberOfFanoutOutputs ScriptContext{scriptContextTxInfo = txInfo} =\n  hasSameUTxOHash && afterContestationDeadline\n where\n  hasSameUTxOHash =\n    traceIfFalse $(errorCode FannedOutUtxoHashNotEqualToClosedUtxoHash) $\n      fannedOutUtxoHash == utxoHash\n\n  fannedOutUtxoHash = hashTxOuts $ take numberOfFanoutOutputs txInfoOutputs\n\n  TxInfo{txInfoOutputs} = txInfo\n\n  afterContestationDeadline =\n    case ivFrom (txInfoValidRange txInfo) of\n      LowerBound (Finite time) _ ->\n        traceIfFalse $(errorCode LowerBoundBeforeContestationDeadline) $\n          time > contestationDeadline\n      _ -> traceError $(errorCode FanoutNoLowerBoundDefined)\n{-# INLINEABLE checkFanout #-}\n\n--------------------------------------------------------------------------------\n-- Helpers\n--------------------------------------------------------------------------------\n\n(&) :: a -> (a -> b) -> b\n(&) = flip ($)\n{-# INLINEABLE (&) #-}\n\ntxOutAdaValue :: TxOut -> Integer\ntxOutAdaValue o = valueOf (txOutValue o) adaSymbol adaToken\n{-# INLINEABLE txOutAdaValue #-}\n\ntxInfoAdaFee :: TxInfo -> Integer\ntxInfoAdaFee tx = valueOf (txInfoFee tx) adaSymbol adaToken\n{-# INLINEABLE txInfoAdaFee #-}\n\nmakeContestationDeadline :: ContestationPeriod -> ScriptContext -> POSIXTime\nmakeContestationDeadline cperiod ScriptContext{scriptContextTxInfo} =\n  case ivTo (txInfoValidRange scriptContextTxInfo) of\n    UpperBound (Finite time) _ -> addContestationPeriod time cperiod\n    _ -> traceError $(errorCode CloseNoUpperBoundDefined)\n{-# INLINEABLE makeContestationDeadline #-}\n\ngetHeadAddress :: ScriptContext -> Address\ngetHeadAddress ctx =\n  let headInput =\n        fromMaybe\n          (traceError $(errorCode ScriptNotSpendingAHeadInput))\n          (findOwnInput ctx)\n   in txOutAddress (txInInfoResolved headInput)\n{-# INLINEABLE getHeadAddress #-}\n\n-- XXX: We might not need to distinguish between the three cases here.\nmustBeSignedByParticipant ::\n  ScriptContext ->\n  CurrencySymbol ->\n  Bool\nmustBeSignedByParticipant ScriptContext{scriptContextTxInfo = txInfo} headCurrencySymbol =\n  case getPubKeyHash <$> txInfoSignatories txInfo of\n    [signer] ->\n      traceIfFalse $(errorCode SignerIsNotAParticipant) $\n        signer `elem` (unTokenName <$> participationTokens)\n    [] ->\n      traceError $(errorCode NoSigners)\n    _ ->\n      traceError $(errorCode TooManySigners)\n where\n  participationTokens = loop (txInfoInputs txInfo)\n  loop = \\case\n    [] -> []\n    (TxInInfo{txInInfoResolved} : rest) ->\n      findParticipationTokens headCurrencySymbol (txOutValue txInInfoResolved) ++ loop rest\n{-# INLINEABLE mustBeSignedByParticipant #-}\n\nfindParticipationTokens :: CurrencySymbol -> Value -> [TokenName]\nfindParticipationTokens headCurrency (Value val) =\n  case Map.toList <$> Map.lookup headCurrency val of\n    Just tokens ->\n      mapMaybe (\\(tokenName, n) -> if n == 1 then Just tokenName else Nothing) tokens\n    _ ->\n      []\n{-# INLINEABLE findParticipationTokens #-}\n\nheadOutputDatum :: ScriptContext -> Datum\nheadOutputDatum ctx =\n  case txInfoOutputs txInfo of\n    (o : _)\n      | txOutAddress o == headAddress -> findTxOutDatum txInfo o\n    _ -> traceError $(errorCode NotPayingToHead)\n where\n  headAddress = getHeadAddress ctx\n\n  ScriptContext{scriptContextTxInfo = txInfo} = ctx\n{-# INLINEABLE headOutputDatum #-}\n\nfindTxOutDatum :: TxInfo -> TxOut -> Datum\nfindTxOutDatum txInfo o =\n  case txOutDatum o of\n    NoOutputDatum -> traceError $(errorCode NoOutputDatumError)\n    OutputDatumHash dh ->\n      fromMaybe (traceError $(errorCode DatumNotFound)) $\n        findDatum dh txInfo\n    OutputDatum d -> d\n{-# INLINEABLE findTxOutDatum #-}\n\n-- | Hash a potentially unordered list of commits by sorting them, concatenating\n-- their 'preSerializedOutput' bytes and creating a SHA2_256 digest over that.\nhashPreSerializedCommits :: [Commit] -> BuiltinByteString\nhashPreSerializedCommits commits =\n  sha2_256 . foldMap preSerializedOutput $\n    sortBy (\\a b -> compareRef (input a) (input b)) commits\n{-# INLINEABLE hashPreSerializedCommits #-}\n\n-- | Hash a pre-ordered list of transaction outputs by serializing each\n-- individual 'TxOut', concatenating all bytes together and creating a SHA2_256\n-- digest over that.\nhashTxOuts :: [TxOut] -> BuiltinByteString\nhashTxOuts =\n  sha2_256 . foldMap (Builtins.serialiseData . toBuiltinData)\n{-# INLINEABLE hashTxOuts #-}\n\n-- | Check if 'TxOut' contains the PT token.\nhasPT :: CurrencySymbol -> TxOut -> Bool\nhasPT headCurrencySymbol txOut =\n  let pts = findParticipationTokens headCurrencySymbol (txOutValue txOut)\n   in length pts == 1\n{-# INLINEABLE hasPT #-}\n\nverifySnapshotSignature :: [Party] -> SnapshotNumber -> BuiltinByteString -> [Signature] -> Bool\nverifySnapshotSignature parties snapshotNumber utxoHash sigs =\n  traceIfFalse $(errorCode SignatureVerificationFailed) $\n    length parties == length sigs\n      && all (uncurry $ verifyPartySignature snapshotNumber utxoHash) (zip parties sigs)\n{-# INLINEABLE verifySnapshotSignature #-}\n\nverifyPartySignature :: SnapshotNumber -> BuiltinByteString -> Party -> Signature -> Bool\nverifyPartySignature snapshotNumber utxoHash party signed =\n  traceIfFalse $(errorCode PartySignatureVerificationFailed) $\n    verifyEd25519Signature (vkey party) message signed\n where\n  message =\n    -- TODO: document CDDL format, either here or in 'Hydra.Snapshot.getSignableRepresentation'\n    Builtins.serialiseData (toBuiltinData snapshotNumber)\n      <> Builtins.serialiseData (toBuiltinData utxoHash)\n{-# INLINEABLE verifyPartySignature #-}\n\ncompareRef :: TxOutRef -> TxOutRef -> Ordering\nTxOutRef{txOutRefId, txOutRefIdx} `compareRef` TxOutRef{txOutRefId = id', txOutRefIdx = idx'} =\n  case compare txOutRefId id' of\n    EQ -> compare txOutRefIdx idx'\n    ord -> ord\n{-# INLINEABLE compareRef #-}\n\ncompiledValidator :: CompiledCode ValidatorType\ncompiledValidator =\n  $$(PlutusTx.compile [||wrap headValidator||])\n where\n  wrap = wrapValidator @DatumType @RedeemerType\n\nvalidatorScript :: SerialisedScript\nvalidatorScript = serialiseCompiledCode compiledValidator\n\nvalidatorHash :: ScriptHash\nvalidatorHash = scriptValidatorHash PlutusScriptV2 validatorScript\n"], "filenames": ["CHANGELOG.md", "hydra-node/test/Hydra/Chain/Direct/Contract/Close.hs", "hydra-plutus/hydra-plutus.cabal", "hydra-plutus/scripts/mHead.plutus", "hydra-plutus/scripts/vCommit.plutus", "hydra-plutus/scripts/vHead.plutus", "hydra-plutus/scripts/vInitial.plutus", "hydra-plutus/src/Hydra/Contract/Head.hs"], "buggy_code_start_loc": [11, 19, 3, 3, 3, 3, 3, 284], "buggy_code_end_loc": [11, 332, 107, 5, 4, 5, 4, 323], "fixing_code_start_loc": [12, 20, 3, 3, 3, 3, 3, 284], "fixing_code_end_loc": [14, 339, 107, 5, 4, 5, 4, 326], "type": "CWE-1284", "message": "Hydra is the layer-two scalability solution for Cardano. Prior to version 0.13.0, the specification states that the contestation period in the datum of the UTxO at the head validator must stay unchanged as the state progresses from Open to Closed (Close transaction), but no such check appears to be performed in the `checkClose` function of the head validator. This would allow a malicious participant to modify the contestation deadline of the head to either allow them to fanout the head without giving another participant the chance to contest, or prevent any participant from ever redistributing the funds locked in the head via a fan-out. Version 0.13.0 contains a patch for this issue.", "other": {"cve": {"id": "CVE-2023-42448", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-04T19:15:10.407", "lastModified": "2023-10-10T13:07:59.467", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Hydra is the layer-two scalability solution for Cardano. Prior to version 0.13.0, the specification states that the contestation period in the datum of the UTxO at the head validator must stay unchanged as the state progresses from Open to Closed (Close transaction), but no such check appears to be performed in the `checkClose` function of the head validator. This would allow a malicious participant to modify the contestation deadline of the head to either allow them to fanout the head without giving another participant the chance to contest, or prevent any participant from ever redistributing the funds locked in the head via a fan-out. Version 0.13.0 contains a patch for this issue."}, {"lang": "es", "value": "Hydra es la soluci\u00f3n de escalabilidad de capa dos para Cardano. Antes de la versi\u00f3n 0.13.0, la especificaci\u00f3n establece que el per\u00edodo de impugnaci\u00f3n en el dato del UTxO en el validador \"head\" debe permanecer sin cambios a medida que el estado avanza de Open a Closed (Transacci\u00f3n cerrada), pero no parece realizarse dicha verificaci\u00f3n en la funci\u00f3n \"checkClose\" del validador \"head\". Esto permitir\u00eda a un participante malintencionado modificar la fecha l\u00edmite de impugnaci\u00f3n del \"head\" para permitirle distribuir el \"head\" sin darle a otro participante la oportunidad de competir, o evitar que cualquier participante redistribuya los fondos bloqueados en el \"head\" a trav\u00e9s de una distribuci\u00f3n. La versi\u00f3n 0.13.0 contiene un parche para este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1284"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:iohk:hydra:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.13.0", "matchCriteriaId": "556BF21B-9F61-4C1D-BD51-A2EC64EA1CE7"}]}]}], "references": [{"url": "https://github.com/input-output-hk/hydra/blob/master/CHANGELOG.md#0130---2023-10-03", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/input-output-hk/hydra/blob/master/hydra-plutus/src/Hydra/Contract/Head.hs#L284-L296", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/input-output-hk/hydra/blob/master/hydra-plutus/src/Hydra/Contract/Head.hs#L320-L323", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/input-output-hk/hydra/commit/2f45529729e28254a62f7a7c8d6649066923ed1f", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/input-output-hk/hydra/security/advisories/GHSA-mgcx-6p7h-5996", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/input-output-hk/hydra/commit/2f45529729e28254a62f7a7c8d6649066923ed1f"}}