{"buggy_code": ["<?php\n/**\n * EverestForms Entry Functions\n *\n * @package EverestForms\\Functions\n * @since   1.1.0\n */\n\ndefined( 'ABSPATH' ) || exit;\n\n/**\n * Get entry.\n *\n * @param  int|EVF_Entry $id Entry ID or object.\n * @return EVF_Entry|null\n */\nfunction evf_get_entry( $id ) {\n\tglobal $wpdb;\n\n\t$entry = $wpdb->get_row( $wpdb->prepare( \"SELECT * FROM {$wpdb->prefix}evf_entries WHERE entry_id = %d LIMIT 1;\", $id ) ); // WPCS: cache ok, DB call ok.\n\n\tif ( apply_filters( 'everest_forms_get_entry_metadata', true ) ) {\n\t\t$results     = $wpdb->get_results( $wpdb->prepare( \"SELECT meta_key,meta_value FROM {$wpdb->prefix}evf_entrymeta WHERE entry_id = %d\", $id ), ARRAY_A );\n\t\t$entry->meta = wp_list_pluck( $results, 'meta_value', 'meta_key' );\n\t}\n\n\treturn 0 !== $entry ? $entry : null;\n}\n\n/**\n * Get all entries IDs.\n *\n * @param  int $form_id Form ID.\n * @return int[]\n */\nfunction evf_get_entries_ids( $form_id ) {\n\tglobal $wpdb;\n\n\t$results = $wpdb->get_results( $wpdb->prepare( \"SELECT entry_id FROM {$wpdb->prefix}evf_entries WHERE form_id = %d\", $form_id ) ); // WPCS: cache ok, DB call ok.\n\n\treturn array_map( 'intval', wp_list_pluck( $results, 'entry_id' ) );\n}\n\n/**\n * Get entry statuses.\n *\n * @return array\n */\nfunction evf_get_entry_statuses() {\n\treturn apply_filters(\n\t\t'everest_forms_entry_statuses',\n\t\tarray(\n\t\t\t'publish' => __( 'Published', 'everest-forms' ),\n\t\t\t'trash'   => __( 'Trash', 'everest-forms' ),\n\t\t)\n\t);\n}\n\n/**\n * Search entries.\n *\n * @param  array $args Search arguments.\n * @return array\n */\nfunction evf_search_entries( $args ) {\n\tglobal $wpdb;\n\n\t$args = wp_parse_args(\n\t\t$args,\n\t\tarray(\n\t\t\t'limit'   => 10,\n\t\t\t'offset'  => 0,\n\t\t\t'order'   => 'DESC',\n\t\t\t'orderby' => 'entry_id',\n\t\t)\n\t);\n\n\t// Check if form ID is valid for entries.\n\tif ( ! array_key_exists( $args['form_id'], evf_get_all_forms() ) ) {\n\t\treturn array();\n\t}\n\n\t$orderby       = isset( $args['orderby'] ) ? sanitize_key( $args['orderby'] ) : 'entry_id';\n\t$order         = \"ORDER BY {$orderby} \" . esc_sql( strtoupper( $args['order'] ) );\n\t$limit         = -1 < $args['limit'] ? $wpdb->prepare( 'LIMIT %d', $args['limit'] ) : '';\n\t$offset        = 0 < $args['offset'] ? $wpdb->prepare( 'OFFSET %d', $args['offset'] ) : '';\n\t$status        = ! empty( $args['status'] ) ? \"AND `status` = '\" . sanitize_key( $args['status'] ) . \"'\" : '';\n\t$search        = ! empty( $args['search'] ) ? \"AND `meta_value` LIKE '%\" . $wpdb->esc_like( sanitize_text_field( $args['search'] ) ) . \"%'\" : '';\n\t$include       = ! empty( $args['form_id'] ) ? \"AND `form_id` = '\" . absint( $args['form_id'] ) . \"'\" : '';\n\t$exclude       = '';\n\t$date_created  = '';\n\t$date_modified = '';\n\n\tif ( ! empty( $args['after'] ) || ! empty( $args['before'] ) ) {\n\t\t$args['after']  = empty( $args['after'] ) ? '0000-00-00' : $args['after'];\n\t\t$args['before'] = empty( $args['before'] ) ? current_time( 'mysql', 1 ) : $args['before'];\n\n\t\t$date_created = \"AND `date_created_gmt` BETWEEN STR_TO_DATE('\" . esc_sql( $args['after'] ) . \"', '%Y-%m-%d %H:%i:%s') and STR_TO_DATE('\" . esc_sql( $args['before'] ) . \"', '%Y-%m-%d %H:%i:%s')\";\n\t}\n\n\tif ( ! empty( $args['modified_after'] ) || ! empty( $args['modified_before'] ) ) {\n\t\t$args['modified_after']  = empty( $args['modified_after'] ) ? '0000-00-00' : $args['modified_after'];\n\t\t$args['modified_before'] = empty( $args['modified_before'] ) ? current_time( 'mysql', 1 ) : $args['modified_before'];\n\n\t\t$date_modified = \"AND `date_modified_gmt` BETWEEN STR_TO_DATE('\" . esc_sql( $args['modified_after'] ) . \"', '%Y-%m-%d %H:%i:%s') and STR_TO_DATE('\" . esc_sql( $args['modified_before'] ) . \"', '%Y-%m-%d %H:%i:%s')\";\n\t}\n\n\t$query = trim(\n\t\t\"\n\t\tSELECT DISTINCT {$wpdb->prefix}evf_entries.entry_id\n\t\tFROM {$wpdb->prefix}evf_entries\n\t\tINNER JOIN {$wpdb->prefix}evf_entrymeta\n\t\tWHERE {$wpdb->prefix}evf_entries.entry_id = {$wpdb->prefix}evf_entrymeta.entry_id\n\t\t{$status}\n\t\t{$search}\n\t\t{$include}\n\t\t{$exclude}\n\t\t{$date_created}\n\t\t{$date_modified}\n\t\t{$order}\n\t\t{$limit}\n\t\t{$offset}\n\t\t\"\n\t);\n\n\t$results = $wpdb->get_results( $query ); // WPCS: cache ok, DB call ok, unprepared SQL ok.\n\n\t$ids = wp_list_pluck( $results, 'entry_id' );\n\n\treturn $ids;\n}\n\n/**\n * Get total entries counts by status.\n *\n * @param  int $form_id Form ID.\n * @return array\n */\nfunction evf_get_count_entries_by_status( $form_id ) {\n\t$statuses = array_keys( evf_get_entry_statuses() );\n\t$counts   = array();\n\n\tforeach ( $statuses as $status ) {\n\t\t$count = count(\n\t\t\tevf_search_entries(\n\t\t\t\tarray(\n\t\t\t\t\t'limit'   => -1,\n\t\t\t\t\t'status'  => $status,\n\t\t\t\t\t'form_id' => $form_id,\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\n\t\t$counts[ $status ] = $count;\n\t}\n\n\treturn $counts;\n}\n\n/**\n * Get total next entries counts by last entry.\n *\n * @since 1.4.10\n *\n * @param  int $form_id    Form ID.\n * @param  int $last_entry Last Form ID.\n * @return int[]\n */\nfunction evf_get_count_entries_by_last_entry( $form_id, $last_entry ) {\n\tglobal $wpdb;\n\n\treturn $wpdb->get_var( $wpdb->prepare( \"SELECT COUNT(entry_id) FROM {$wpdb->prefix}evf_entries WHERE form_id = %d AND entry_id > %d\", $form_id, $last_entry ) );\n}\n"], "fixing_code": ["<?php\n/**\n * EverestForms Entry Functions\n *\n * @package EverestForms\\Functions\n * @since   1.1.0\n */\n\ndefined( 'ABSPATH' ) || exit;\n\n/**\n * Get entry.\n *\n * @param  int|EVF_Entry $id Entry ID or object.\n * @return EVF_Entry|null\n */\nfunction evf_get_entry( $id ) {\n\tglobal $wpdb;\n\n\t$entry = $wpdb->get_row( $wpdb->prepare( \"SELECT * FROM {$wpdb->prefix}evf_entries WHERE entry_id = %d LIMIT 1;\", $id ) ); // WPCS: cache ok, DB call ok.\n\n\tif ( apply_filters( 'everest_forms_get_entry_metadata', true ) ) {\n\t\t$results     = $wpdb->get_results( $wpdb->prepare( \"SELECT meta_key,meta_value FROM {$wpdb->prefix}evf_entrymeta WHERE entry_id = %d\", $id ), ARRAY_A );\n\t\t$entry->meta = wp_list_pluck( $results, 'meta_value', 'meta_key' );\n\t}\n\n\treturn 0 !== $entry ? $entry : null;\n}\n\n/**\n * Get all entries IDs.\n *\n * @param  int $form_id Form ID.\n * @return int[]\n */\nfunction evf_get_entries_ids( $form_id ) {\n\tglobal $wpdb;\n\n\t$results = $wpdb->get_results( $wpdb->prepare( \"SELECT entry_id FROM {$wpdb->prefix}evf_entries WHERE form_id = %d\", $form_id ) ); // WPCS: cache ok, DB call ok.\n\n\treturn array_map( 'intval', wp_list_pluck( $results, 'entry_id' ) );\n}\n\n/**\n * Get entry statuses.\n *\n * @return array\n */\nfunction evf_get_entry_statuses() {\n\treturn apply_filters(\n\t\t'everest_forms_entry_statuses',\n\t\tarray(\n\t\t\t'publish' => __( 'Published', 'everest-forms' ),\n\t\t\t'trash'   => __( 'Trash', 'everest-forms' ),\n\t\t)\n\t);\n}\n\n/**\n * Search entries.\n *\n * @param  array $args Search arguments.\n * @return array\n */\nfunction evf_search_entries( $args ) {\n\tglobal $wpdb;\n\n\t$args = wp_parse_args(\n\t\t$args,\n\t\tarray(\n\t\t\t'limit'   => 10,\n\t\t\t'offset'  => 0,\n\t\t\t'order'   => 'DESC',\n\t\t\t'orderby' => 'entry_id',\n\t\t)\n\t);\n\n\t$statuses     = array_keys( evf_get_entry_statuses() );\n\t$valid_fields = array( 'date', 'form_id', 'title', 'status' );\n\n\t// Check if form ID is valid for entries.\n\tif ( ! array_key_exists( $args['form_id'], evf_get_all_forms() ) ) {\n\t\treturn array();\n\t}\n\n\t$query   = array();\n\t$query[] = \"SELECT DISTINCT {$wpdb->prefix}evf_entries.entry_id FROM {$wpdb->prefix}evf_entries INNER JOIN {$wpdb->prefix}evf_entrymeta WHERE {$wpdb->prefix}evf_entries.entry_id = {$wpdb->prefix}evf_entrymeta.entry_id\";\n\n\tif ( ! empty( $args['search'] ) ) {\n\t\t$like    = '%' . $wpdb->esc_like( $args['search'] ) . '%';\n\t\t$query[] = $wpdb->prepare( 'AND meta_value LIKE %s', $like );\n\t}\n\n\tif ( ! empty( $args['form_id'] ) ) {\n\t\t$query[] = $wpdb->prepare( 'AND form_id = %d', absint( $args['form_id'] ) );\n\t}\n\n\tif ( ! empty( $args['status'] ) ) {\n\t\t$query[] = $wpdb->prepare( 'AND `status` = %s', isset( $statuses[ $args['status'] ] ) ? $statuses[ $args['status'] ] : 'publish' );\n\t}\n\n\t$orderby     = in_array( $args['orderby'], $valid_fields, true ) ? $args['orderby'] : 'entry_id';\n\t$order       = 'DESC' === strtoupper( $args['order'] ) ? 'DESC' : 'ASC';\n\t$orderby_sql = sanitize_sql_orderby( \"{$orderby} {$order}\" );\n\t$query[]     = \"ORDER BY {$orderby_sql}\";\n\n\tif ( -1 < $args['limit'] ) {\n\t\t$query[] = $wpdb->prepare( 'LIMIT %d', absint( $args['limit'] ) );\n\t}\n\n\tif ( 0 < $args['offset'] ) {\n\t\t$query[] = $wpdb->prepare( 'LIMIT %d', absint( $args['offset'] ) );\n\t}\n\n\t// phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared\n\t$results = $wpdb->get_results( implode( ' ', $query ), ARRAY_A );\n\n\t$ids = wp_list_pluck( $results, 'entry_id' );\n\n\treturn $ids;\n}\n\n/**\n * Get total entries counts by status.\n *\n * @param  int $form_id Form ID.\n * @return array\n */\nfunction evf_get_count_entries_by_status( $form_id ) {\n\t$statuses = array_keys( evf_get_entry_statuses() );\n\t$counts   = array();\n\n\tforeach ( $statuses as $status ) {\n\t\t$count = count(\n\t\t\tevf_search_entries(\n\t\t\t\tarray(\n\t\t\t\t\t'limit'   => -1,\n\t\t\t\t\t'status'  => $status,\n\t\t\t\t\t'form_id' => $form_id,\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\n\t\t$counts[ $status ] = $count;\n\t}\n\n\treturn $counts;\n}\n\n/**\n * Get total next entries counts by last entry.\n *\n * @since 1.4.10\n *\n * @param  int $form_id    Form ID.\n * @param  int $last_entry Last Form ID.\n * @return int[]\n */\nfunction evf_get_count_entries_by_last_entry( $form_id, $last_entry ) {\n\tglobal $wpdb;\n\n\treturn $wpdb->get_var( $wpdb->prepare( \"SELECT COUNT(entry_id) FROM {$wpdb->prefix}evf_entries WHERE form_id = %d AND entry_id > %d\", $form_id, $last_entry ) );\n}\n"], "filenames": ["includes/evf-entry-functions.php"], "buggy_code_start_loc": [77], "buggy_code_end_loc": [127], "fixing_code_start_loc": [78], "fixing_code_end_loc": [117], "type": "CWE-89", "message": "A SQL injection vulnerability exists in WPEverest Everest Forms plugin for WordPress through 1.4.9. Successful exploitation of this vulnerability would allow a remote attacker to execute arbitrary SQL commands on the affected system via includes/evf-entry-functions.php", "other": {"cve": {"id": "CVE-2019-13575", "sourceIdentifier": "cve@mitre.org", "published": "2019-07-18T15:15:11.273", "lastModified": "2023-02-27T16:41:28.263", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A SQL injection vulnerability exists in WPEverest Everest Forms plugin for WordPress through 1.4.9. Successful exploitation of this vulnerability would allow a remote attacker to execute arbitrary SQL commands on the affected system via includes/evf-entry-functions.php"}, {"lang": "es", "value": "Existe una vulnerabilidad de inyecci\u00f3n de SQL en el plugin WPEverest Everest Forms para WordPress hasta 1.4.9. La explotaci\u00f3n con \u00e9xito de esta vulnerabilidad permitir\u00eda a un atacante remoto ejecutar comandos SQL arbitrarios en el sistema afectado a trav\u00e9s de includes / evf-entry-functions.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wpeverest:everest_forms:*:*:*:*:*:wordpress:*:*", "versionEndIncluding": "1.4.9", "matchCriteriaId": "C0BD5969-B3BB-407A-9B3F-5EFE1FD445AE"}]}]}], "references": [{"url": "https://fortiguard.com/zeroday/FG-VD-19-096", "source": "cve@mitre.org", "tags": ["Not Applicable"]}, {"url": "https://github.com/wpeverest/everest-forms/commit/755d095fe0d9a756a13800d1513cf98219e4a3f9", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/wpeverest/everest-forms/commit/755d095fe0d9a756a13800d1513cf98219e4a3f9#diff-bb2b21ef7774df8687ff02b0284505c6", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://wordpress.org/plugins/everest-forms/#developers", "source": "cve@mitre.org", "tags": ["Release Notes"]}, {"url": "https://wpvulndb.com/vulnerabilities/9466", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wpeverest/everest-forms/commit/755d095fe0d9a756a13800d1513cf98219e4a3f9"}}