{"buggy_code": ["package io.metersphere.gateway.filter;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.cloud.client.discovery.DiscoveryClient;\nimport org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.server.ServerWebExchange;\nimport org.springframework.web.server.WebFilter;\nimport org.springframework.web.server.WebFilterChain;\nimport reactor.core.publisher.Mono;\n\nimport javax.annotation.Resource;\nimport java.util.Optional;\n\n@Component\npublic class SessionFilter implements WebFilter {\n    // \u6240\u6709\u6a21\u5757\u7684\u524d\u7f00\n    private static final String[] PREFIX = new String[]{\"/setting\", \"/project\", \"/api\", \"/performance\", \"/track\", \"/workstation\", \"/ui\", \"/report\"};\n    private static final String[] TO_SUB_SERVICE = new String[]{\"/license\", \"/system\", \"/resource\", \"/sso/callback/logout\", \"/sso/callback/cas/logout\"};\n    private static final String PERFORMANCE_DOWNLOAD_PREFIX = \"/jmeter/\";\n    private static final String API_DOWNLOAD_PREFIX = \"/api/jmeter/\";\n    private static final String TRACK_IMAGE_PREFIX = \"/resource/md/get/url\";\n\n    @Resource\n    private DiscoveryClient discoveryClient;\n    @Value(\"${spring.application.name}\")\n    private String serviceName;\n\n    @Override\n    public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {\n        ServerHttpRequest req = exchange.getRequest();\n        String path = req.getURI().getRawPath();\n\n        // \u8f6c\u53d1 css js \u5230\u5177\u4f53\u7684\u6a21\u5757\n        if (path.startsWith(\"/css\") || path.startsWith(\"/js\")) {\n            for (String prefix : PREFIX) {\n                if (path.contains(prefix)) {\n                    return addPrefix(prefix, exchange, chain);\n                }\n            }\n        }\n\n        if (path.startsWith(TRACK_IMAGE_PREFIX)) {\n            return addPrefix(\"/track\", exchange, chain);\n        }\n\n        // \u6709\u4e9burl\u76f4\u63a5\u8f6c\u5230 sub-service\n        for (String prefix : TO_SUB_SERVICE) {\n            if (path.startsWith(prefix)) {\n                Optional<String> svc = discoveryClient.getServices().stream().filter(s -> !StringUtils.equals(serviceName, s)).findAny();\n                if (svc.isEmpty()) {\n                    break;\n                }\n                String service = svc.get();\n                return addPrefix(\"/\" + service + \"/\", exchange, chain);\n            }\n        }\n\n        // \u4ece\u5f53\u524d\u7ad9\u70b9\u4e0b\u8f7d\u8d44\u6e90\n        if (path.startsWith(PERFORMANCE_DOWNLOAD_PREFIX)) {\n            return addPrefix(\"/performance\", exchange, chain);\n        }\n\n        if (path.startsWith(API_DOWNLOAD_PREFIX)) {\n            return addPrefix(\"/api\", exchange, chain);\n        }\n\n        return chain.filter(exchange);\n    }\n\n    private Mono<Void> addPrefix(String prefix, final ServerWebExchange exchange, final WebFilterChain chain) {\n        ServerHttpRequest req = exchange.getRequest();\n        String path = req.getURI().getRawPath();\n        ServerWebExchangeUtils.addOriginalRequestUrl(exchange, req.getURI());\n        String newPath = prefix + path;\n        ServerHttpRequest request = req.mutate().path(newPath).build();\n        exchange.getAttributes().put(ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR, request.getURI());\n        return chain.filter(exchange.mutate().request(request).build());\n    }\n}\n", "package io.metersphere.xpack.track.issue;\n\nimport io.metersphere.base.domain.IssuesWithBLOBs;\nimport io.metersphere.base.domain.Project;\nimport io.metersphere.dto.UserDTO;\nimport io.metersphere.xpack.track.dto.*;\nimport io.metersphere.xpack.track.dto.request.IssuesRequest;\nimport io.metersphere.xpack.track.dto.request.IssuesUpdateRequest;\nimport org.springframework.http.ResponseEntity;\n\nimport java.io.File;\nimport java.util.List;\n\npublic interface IssuesPlatform {\n\n    /**\n     * \u83b7\u53d6\u5e73\u53f0\u76f8\u5173\u8054\u7684\u7f3a\u9677\n     *\n     * @return platform issues list\n     */\n    List<IssuesDao> getIssue(IssuesRequest request);\n\n    /*\u83b7\u53d6\u5e73\u53f0\u76f8\u5173\u9700\u6c42*/\n    List<DemandDTO> getDemandList(String projectId);\n\n    /**\n     * \u6dfb\u52a0\u7f3a\u9677\u5230\u7f3a\u9677\u5e73\u53f0\n     *\n     * @param issuesRequest issueRequest\n     */\n    IssuesWithBLOBs addIssue(IssuesUpdateRequest issuesRequest);\n\n    /**\n     * \u66f4\u65b0\u7f3a\u9677\n     * @param request\n     */\n    void updateIssue(IssuesUpdateRequest request);\n\n    /**\n     * \u5220\u9664\u7f3a\u9677\u5e73\u53f0\u7f3a\u9677\n     *\n     * @param id issue id\n     */\n    void deleteIssue(String id);\n\n    /**\n     * \u6d4b\u8bd5\u5e73\u53f0\u8054\u901a\u6027\n     */\n    void testAuth();\n\n    /**\n     * \u7528\u6237\u4fe1\u606f\u6d4b\u8bd5\n     */\n    void userAuth(UserDTO.PlatformInfo userInfo);\n\n    /**\n     * \u83b7\u53d6\u7f3a\u9677\u5e73\u53f0\u9879\u76ee\u4e0b\u7684\u76f8\u5173\u4eba\u5458\n     * @return platform user list\n     */\n    List<PlatformUser> getPlatformUser();\n\n    /**\n     * \u540c\u6b65\u7f3a\u9677\u6700\u65b0\u53d8\u66f4\n     * @param project\n     * @param tapdIssues\n     */\n    void syncIssues(Project project, List<IssuesDao> tapdIssues);\n\n    /**\n     * \u540c\u6b65\u7f3a\u9677\u5168\u91cf\u7684\u7f3a\u9677\n     * @param project\n     */\n    void syncAllIssues(Project project, IssueSyncRequest syncRequest);\n\n    /**\n     * \u83b7\u53d6\u7b2c\u4e09\u65b9\u5e73\u53f0\u7f3a\u9677\u6a21\u677f\n     * @return\n     */\n    IssueTemplateDao getThirdPartTemplate();\n\n    /**\n     * \u68c0\u67e5\u5176\u5b83\u5e73\u53f0\u5173\u8054\u7684ID\u662f\u5426\u5b58\u5728\n     * @param relateId \u5176\u5b83\u5e73\u53f0\u5728MS\u9879\u76ee\u4e0a\u5173\u8054\u7684\u76f8\u5173ID\n     * @return Boolean\n     */\n    Boolean checkProjectExist(String relateId);\n\n    /**\n     * \u66f4\u65b0\u7f3a\u9677\u5173\u8054\u5173\u7cfb\n     * @param request\n     */\n    void removeIssueParentLink(IssuesUpdateRequest request);\n\n    /**\n     * \u66f4\u65b0\u9700\u6c42\u4e0e\u7f3a\u9677\u5173\u8054\u5173\u7cfb\n     *\n     * @param testCase\n     */\n    void updateDemandIssueLink(EditTestCaseRequest testCase, Project project);\n\n    /**\n     * @param request\n     * @param type    add or edit\n     */\n    void updateDemandHyperLink(EditTestCaseRequest request, Project project, String type);\n\n    /**\n     * Get\u8bf7\u6c42\u7684\u4ee3\u7406\n     * @param url\n     * @return\n     */\n    ResponseEntity proxyForGet(String url, Class responseEntityClazz);\n\n    /**\n     * \u540c\u6b65MS\u7f3a\u9677\u9644\u4ef6\u5230\u7b2c\u4e09\u65b9\u5e73\u53f0\n     * @param issuesRequest \u5e73\u53f0\u53c2\u6570\n     * @param file \u9644\u4ef6\n     * @param syncType \u540c\u6b65\u64cd\u4f5c\u7c7b\u578b: UPLOAD, DELETE\n     */\n    void syncIssuesAttachment(IssuesUpdateRequest issuesRequest, File file, AttachmentSyncType syncType);\n\n\n    /**\n     * \u83b7\u53d6\u7b2c\u4e09\u65b9\u5e73\u53f0\u7684\u72b6\u6001\u96c6\u5408\n     * @param issueKey\n     * @return\n     */\n    List<PlatformStatusDTO> getTransitions(String issueKey);\n}\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.7.5</version>\n        <relativePath/>\n    </parent>\n\n    <packaging>pom</packaging>\n    <groupId>io.metersphere</groupId>\n    <artifactId>metersphere</artifactId>\n    <version>${revision}</version>\n    <name>metersphere</name>\n    <description>MeterSphere</description>\n\n    <properties>\n        <revision>main</revision>\n        <java.version>11</java.version>\n        <spring-cloud.version>2021.0.5</spring-cloud.version>\n        <spring-security.version>5.7.5</spring-security.version>\n        <dubbo.version>2.7.18</dubbo.version>\n        <platform-plugin-sdk.version>1.0.0</platform-plugin-sdk.version>\n        <flyway.version>7.15.0</flyway.version>\n        <shiro.version>1.10.1</shiro.version>\n        <mssql-jdbc.version>7.4.1.jre8</mssql-jdbc.version>\n        <postgresql.version>42.3.8</postgresql.version>\n        <java-websocket.version>1.5.3</java-websocket.version>\n        <easyexcel.version>3.1.1</easyexcel.version>\n        <dom4j.version>2.1.3</dom4j.version>\n        <guava.version>31.1-jre</guava.version>\n        <pagehelper.version>5.3.2</pagehelper.version>\n        <metersphere-jmeter-functions.version>1.5</metersphere-jmeter-functions.version>\n        <quartz-starter.version>1.0.6</quartz-starter.version>\n        <redisson-starter.version>3.17.7</redisson-starter.version>\n        <guice.version>5.1.0</guice.version>\n        <mybatis-starter.version>2.3.0</mybatis-starter.version>\n        <reflections.version>0.10.2</reflections.version>\n        <bcprov-jdk15on.version>1.70</bcprov-jdk15on.version>\n        <commons-io.version>2.11.0</commons-io.version>\n        <commons-text.version>1.10.0</commons-text.version>\n        <xstream.version>1.4.19</xstream.version>\n        <xmlbeans.version>3.1.0</xmlbeans.version>\n        <swagger-parser.version>2.1.5</swagger-parser.version>\n        <rhino.version>1.7.14</rhino.version>\n        <jsoup.version>1.15.3</jsoup.version>\n        <commonmark.version>0.19.0</commonmark.version>\n        <commons-compress.version>1.21</commons-compress.version>\n        <htmlcleaner.version>2.26</htmlcleaner.version>\n        <xmindjbehaveplugin.version>0.8</xmindjbehaveplugin.version>\n        <metersphere-plugin-core.version>2.0</metersphere-plugin-core.version>\n        <plexus.version>3.0.24</plexus.version>\n        <common-random.version>1.0.14</common-random.version>\n        <generex.version>1.0.2</generex.version>\n        <json-lib.version>2.4</json-lib.version>\n        <json-schema-validator.version>2.2.14</json-schema-validator.version>\n        <xz.version>1.9</xz.version>\n        <springdoc-openapi-ui.version>1.6.11</springdoc-openapi-ui.version>\n        <flatten.version>1.2.7</flatten.version>\n        <jmeter.version>5.5</jmeter.version>\n        <codehaus-groovy.version>3.0.11</codehaus-groovy.version>\n        <jython.version>2.7.3</jython.version>\n        <docker-java.version>3.2.13</docker-java.version>\n        <jmeter-plugins-webdriver.version>3.4.4</jmeter-plugins-webdriver.version>\n        <oracle-database.version>19.7.0.0</oracle-database.version>\n        <zookeeper.version>3.8.0</zookeeper.version>\n        <commons-beanutils.version>1.9.4</commons-beanutils.version>\n        <jmeter-plugins-dubbo.version>2.7.17</jmeter-plugins-dubbo.version>\n        <hessian-lite.version>3.2.13</hessian-lite.version>\n        <avro.version>1.11.1</avro.version>\n        <dec.version>0.1.2</dec.version>\n        <dingtalk-sdk.version>2.0.0</dingtalk-sdk.version>\n        <org-json.version>20220924</org-json.version>\n        <jmeter-plugins-dubbo.version>2.7.17</jmeter-plugins-dubbo.version>\n        <nacos.version>1.4.4</nacos.version>\n        <minio.version>8.4.5</minio.version>\n        <hikaricp.version>5.0.1</hikaricp.version>\n        <xmlgraphics-commons.version>2.7</xmlgraphics-commons.version>\n        <commons-fileupload.version>1.4</commons-fileupload.version>\n        <jgit.version>6.3.0.202209071007-r</jgit.version>\n        <!-- frontend -->\n        <frontend-maven-plugin.version>1.12.1</frontend-maven-plugin.version>\n        <node.version>v16.10.0</node.version>\n        <npm.version>8.12.1</npm.version>\n        <!--        -->\n        <skipAntRunForJenkins>false</skipAntRunForJenkins>\n    </properties>\n\n    <modules>\n        <module>framework</module>\n        <module>api-test</module>\n        <module>performance-test</module>\n        <module>project-management</module>\n        <module>report-stat</module>\n        <module>system-setting</module>\n        <module>test-track</module>\n        <module>workstation</module>\n    </modules>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.projectreactor</groupId>\n            <artifactId>reactor-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.kafka</groupId>\n            <artifactId>spring-kafka-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <release>${java.version}</release>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>flatten-maven-plugin</artifactId>\n                <version>${flatten.version}</version>\n                <configuration>\n                    <updatePomFile>true</updatePomFile>\n                    <flattenMode>resolveCiFriendliesOnly</flattenMode>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>flatten</id>\n                        <phase>process-resources</phase>\n                        <goals>\n                            <goal>flatten</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>flatten.clean</id>\n                        <phase>clean</phase>\n                        <goals>\n                            <goal>clean</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n", "package io.metersphere.controller;\n\nimport io.metersphere.service.wapper.IssueProxyResourceService;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\n\n@RestController\n@RequestMapping(value = \"/resource\")\npublic class IssueProxyResourceController {\n    @Resource\n    IssueProxyResourceService issueProxyResourceService;\n\n    @GetMapping(value = \"/md/get/url\")\n    public ResponseEntity<byte[]> getFileByUrl(@RequestParam (\"url\") String url, @RequestParam (value = \"platform\", required = false) String platform,\n                                               @RequestParam (value = \"workspace_id\", required = false) String workspaceId) {\n        return issueProxyResourceService.getMdImageByUrl(url, platform, workspaceId);\n    }\n}\n", "package io.metersphere.service;\n\nimport com.alibaba.excel.EasyExcelFactory;\nimport com.alibaba.excel.util.DateUtils;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.github.pagehelper.Page;\nimport com.github.pagehelper.PageHelper;\nimport io.metersphere.base.domain.*;\nimport io.metersphere.base.mapper.*;\nimport io.metersphere.base.mapper.ext.ExtIssueCommentMapper;\nimport io.metersphere.base.mapper.ext.ExtIssuesMapper;\nimport io.metersphere.commons.constants.*;\nimport io.metersphere.commons.exception.MSException;\nimport io.metersphere.commons.utils.*;\nimport io.metersphere.constants.AttachmentType;\nimport io.metersphere.constants.IssueStatus;\nimport io.metersphere.constants.SystemCustomField;\nimport io.metersphere.dto.*;\nimport io.metersphere.excel.constants.IssueExportHeadField;\nimport io.metersphere.excel.domain.ExcelErrData;\nimport io.metersphere.excel.domain.ExcelResponse;\nimport io.metersphere.excel.domain.IssueExcelData;\nimport io.metersphere.excel.domain.IssueExcelDataFactory;\nimport io.metersphere.excel.handler.IssueTemplateHeadWriteHandler;\nimport io.metersphere.excel.listener.IssueExcelListener;\nimport io.metersphere.excel.utils.EasyExcelExporter;\nimport io.metersphere.i18n.Translator;\nimport io.metersphere.log.utils.ReflexObjectUtil;\nimport io.metersphere.log.vo.DetailColumn;\nimport io.metersphere.log.vo.OperatingLogDetails;\nimport io.metersphere.log.vo.track.TestPlanReference;\nimport io.metersphere.plan.dto.PlanReportIssueDTO;\nimport io.metersphere.plan.dto.TestCaseReportStatusResultDTO;\nimport io.metersphere.plan.dto.TestPlanSimpleReportDTO;\nimport io.metersphere.plan.service.TestPlanService;\nimport io.metersphere.plan.service.TestPlanTestCaseService;\nimport io.metersphere.plan.utils.TestPlanStatusCalculator;\nimport io.metersphere.platform.api.Platform;\nimport io.metersphere.platform.domain.*;\nimport io.metersphere.platform.domain.PlatformAttachment;\nimport io.metersphere.request.IntegrationRequest;\nimport io.metersphere.xpack.track.dto.AttachmentRequest;\nimport io.metersphere.request.issues.IssueExportRequest;\nimport io.metersphere.request.issues.IssueImportRequest;\nimport io.metersphere.request.issues.PlatformIssueTypeRequest;\nimport io.metersphere.request.testcase.AuthUserIssueRequest;\nimport io.metersphere.request.testcase.IssuesCountRequest;\nimport io.metersphere.service.issue.domain.zentao.ZentaoBuild;\nimport io.metersphere.service.issue.platform.*;\nimport io.metersphere.service.remote.project.TrackCustomFieldTemplateService;\nimport io.metersphere.service.remote.project.TrackIssueTemplateService;\nimport io.metersphere.service.wapper.TrackProjectService;\nimport io.metersphere.service.wapper.UserService;\nimport io.metersphere.utils.DistinctKeyUtil;\nimport io.metersphere.xpack.track.dto.PlatformStatusDTO;\nimport io.metersphere.xpack.track.dto.PlatformUser;\nimport io.metersphere.xpack.track.dto.*;\nimport io.metersphere.xpack.track.dto.request.IssuesRequest;\nimport io.metersphere.xpack.track.dto.request.IssuesUpdateRequest;\nimport io.metersphere.xpack.track.issue.IssuesPlatform;\nimport jodd.util.CollectionUtil;\nimport io.metersphere.xpack.track.service.XpackIssueService;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionUtils;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.stream.Collectors;\n\n@Service\n@Transactional(rollbackFor = Exception.class)\npublic class IssuesService {\n\n    @Resource\n    private BaseIntegrationService baseIntegrationService;\n    @Resource\n    private TrackProjectService trackProjectService;\n    @Resource\n    private BaseUserService baseUserService;\n    @Resource\n    private BaseProjectService baseProjectService;\n    @Resource\n    private TestPlanService testPlanService;\n    @Lazy\n    @Resource\n    private io.metersphere.service.TestCaseService testCaseService;\n    @Resource\n    private IssuesMapper issuesMapper;\n    @Resource\n    private TestCaseIssuesMapper testCaseIssuesMapper;\n    @Resource\n    private ExtIssuesMapper extIssuesMapper;\n    @Resource\n    private TrackCustomFieldTemplateService trackCustomFieldTemplateService;\n    @Resource\n    private BaseCustomFieldService baseCustomFieldService;\n    @Resource\n    private TrackIssueTemplateService trackIssueTemplateService;\n    @Resource\n    private TestCaseIssueService testCaseIssueService;\n    @Lazy\n    @Resource\n    private TestPlanTestCaseService testPlanTestCaseService;\n    @Resource\n    private IssueFollowMapper issueFollowMapper;\n    @Resource\n    private TestPlanTestCaseMapper testPlanTestCaseMapper;\n    @Resource\n    private CustomFieldIssuesService customFieldIssuesService;\n    @Resource\n    private CustomFieldIssuesMapper customFieldIssuesMapper;\n    @Resource\n    StringRedisTemplate stringRedisTemplate;\n    @Resource\n    private AttachmentService attachmentService;\n    @Resource\n    private ProjectMapper projectMapper;\n    @Resource\n    SqlSessionFactory sqlSessionFactory;\n    @Resource\n    private FileMetadataMapper fileMetadataMapper;\n    @Resource\n    private ExtIssueCommentMapper extIssueCommentMapper;\n    @Resource\n    private PlatformPluginService platformPluginService;\n    @Resource\n    private UserService userService;\n\n    private static final String SYNC_THIRD_PARTY_ISSUES_KEY = \"ISSUE:SYNC\";\n\n    public void testAuth(String workspaceId, String platform) {\n        IssuesRequest issuesRequest = new IssuesRequest();\n        issuesRequest.setWorkspaceId(workspaceId);\n        IssuesPlatform abstractPlatform = IssueFactory.createPlatform(platform, issuesRequest);\n        abstractPlatform.testAuth();\n    }\n\n\n    public IssuesWithBLOBs addIssues(IssuesUpdateRequest issuesRequest, List<MultipartFile> files) {\n        Project project = baseProjectService.getProjectById(issuesRequest.getProjectId());\n        IssuesWithBLOBs issues = null;\n        if (PlatformPluginService.isPluginPlatform(project.getPlatform())) {\n            PlatformIssuesUpdateRequest platformIssuesUpdateRequest =\n                    JSON.parseObject(JSON.toJSONString(issuesRequest), PlatformIssuesUpdateRequest.class);\n            List<PlatformCustomFieldItemDTO> customFieldItemDTOS =\n                    JSON.parseArray(JSON.toJSONString(issuesRequest.getRequestFields()), PlatformCustomFieldItemDTO.class);\n            platformIssuesUpdateRequest.setCustomFieldList(customFieldItemDTOS); // todo \u5168\u90e8\u63d2\u4ef6\u5316\u540e\u53bb\u6389\n            platformIssuesUpdateRequest.setUserPlatformUserConfig(userService.getCurrentPlatformInfoStr(SessionUtils.getCurrentWorkspaceId()));\n            platformIssuesUpdateRequest.setProjectConfig(PlatformPluginService.getCompatibleProjectConfig(project));\n\n            issues = platformPluginService.getPlatform(project.getPlatform())\n                    .addIssue(platformIssuesUpdateRequest);\n\n            insertIssues(issues);\n            issuesRequest.setId(issues.getId());\n            issues.setPlatform(project.getPlatform());\n            // \u7528\u4f8b\u4e0e\u7b2c\u4e09\u65b9\u7f3a\u9677\u5e73\u53f0\u4e2d\u7684\u7f3a\u9677\u5173\u8054\n            handleTestCaseIssues(issuesRequest);\n\n            // \u5982\u679c\u662f\u590d\u5236\u65b0\u589e, \u540c\u6b65MS\u9644\u4ef6\u5230Jira\n            if (StringUtils.isNotEmpty(issuesRequest.getCopyIssueId())) {\n                AttachmentRequest attachmentRequest = new AttachmentRequest();\n                attachmentRequest.setBelongId(issuesRequest.getCopyIssueId());\n                attachmentRequest.setBelongType(AttachmentType.ISSUE.type());\n                List<String> attachmentIds = attachmentService.getAttachmentIdsByParam(attachmentRequest);\n                if (CollectionUtils.isNotEmpty(attachmentIds)) {\n                    for (String attachmentId : attachmentIds) {\n                        FileAttachmentMetadata fileAttachmentMetadata = attachmentService.getFileAttachmentMetadataByFileId(attachmentId);\n                        File file = new File(fileAttachmentMetadata.getFilePath() + \"/\" + fileAttachmentMetadata.getName());\n                        attachmentService.syncIssuesAttachment(issues, file, AttachmentSyncType.UPLOAD);\n                    }\n                }\n            }\n        } else {\n            List<IssuesPlatform> platformList = getAddPlatforms(issuesRequest);\n            for (IssuesPlatform platform : platformList) {\n                issues = platform.addIssue(issuesRequest);\n            }\n        }\n\n        if (issuesRequest.getIsPlanEdit()) {\n            issuesRequest.getAddResourceIds().forEach(l -> {\n                testCaseIssueService.updateIssuesCount(l);\n            });\n        }\n        String issuesId = issues.getId();\n        saveFollows(issuesId, issuesRequest.getFollows());\n        customFieldIssuesService.addFields(issuesId, issuesRequest.getAddFields());\n        customFieldIssuesService.editFields(issuesId, issuesRequest.getEditFields());\n        if (StringUtils.isNotEmpty(issuesRequest.getCopyIssueId())) {\n            final String platformId = issues.getPlatformId();\n            // \u590d\u5236\u65b0\u589e, \u540c\u6b65\u7f3a\u9677\u7684MS\u9644\u4ef6\n            AttachmentRequest attachmentRequest = new AttachmentRequest();\n            attachmentRequest.setCopyBelongId(issuesRequest.getCopyIssueId());\n            attachmentRequest.setBelongId(issues.getId());\n            attachmentRequest.setBelongType(AttachmentType.ISSUE.type());\n            attachmentService.copyAttachment(attachmentRequest);\n\n            // MS\u9644\u4ef6\u540c\u6b65\u5230\u5176\u4ed6\u5e73\u53f0, Jira, Zentao\u5df2\u7ecf\u5728\u521b\u5efa\u7f3a\u9677\u65f6\u5904\u7406, AzureDevops\u5355\u72ec\u5904\u7406\n            if (StringUtils.equals(issuesRequest.getPlatform(), IssuesManagePlatform.AzureDevops.toString())) {\n                AttachmentRequest request = new AttachmentRequest();\n                request.setBelongId(issuesRequest.getCopyIssueId());\n                request.setBelongType(AttachmentType.ISSUE.type());\n                uploadAzureCopyAttachment(request, issuesRequest.getPlatform(), platformId);\n            }\n        } else {\n            final String issueId = issues.getId();\n            final String platform = issues.getPlatform();\n            // \u65b0\u589e, \u9700\u4fdd\u5b58\u5e76\u540c\u6b65\u6240\u6709\u5f85\u4e0a\u4f20\u7684\u9644\u4ef6\n            if (CollectionUtils.isNotEmpty(files)) {\n                files.forEach(file -> {\n                    AttachmentRequest attachmentRequest = new AttachmentRequest();\n                    attachmentRequest.setBelongId(issueId);\n                    attachmentRequest.setBelongType(AttachmentType.ISSUE.type());\n                    attachmentService.uploadAttachment(attachmentRequest, file);\n                });\n            }\n            // \u5904\u7406\u5f85\u5173\u8054\u7684\u6587\u4ef6\u9644\u4ef6, \u751f\u6210\u5173\u8054\u8bb0\u5f55, \u5e76\u540c\u6b65\u81f3\u7b2c\u4e09\u65b9\u5e73\u53f0\n            if (CollectionUtils.isNotEmpty(issuesRequest.getRelateFileMetaIds())) {\n                SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH);\n                FileAssociationMapper associationBatchMapper = sqlSession.getMapper(FileAssociationMapper.class);\n                AttachmentModuleRelationMapper attachmentModuleRelationBatchMapper = sqlSession.getMapper(AttachmentModuleRelationMapper.class);\n                FileAttachmentMetadataMapper fileAttachmentMetadataBatchMapper = sqlSession.getMapper(FileAttachmentMetadataMapper.class);\n                issuesRequest.getRelateFileMetaIds().forEach(filemetaId -> {\n                    FileMetadata fileMetadata = fileMetadataMapper.selectByPrimaryKey(filemetaId);\n                    FileAssociation fileAssociation = new FileAssociation();\n                    fileAssociation.setId(UUID.randomUUID().toString());\n                    fileAssociation.setFileMetadataId(filemetaId);\n                    fileAssociation.setFileType(fileMetadata.getType());\n                    fileAssociation.setType(FileAssociationType.ISSUE.name());\n                    fileAssociation.setProjectId(fileMetadata.getProjectId());\n                    fileAssociation.setSourceItemId(filemetaId);\n                    fileAssociation.setSourceId(issueId);\n                    associationBatchMapper.insert(fileAssociation);\n                    AttachmentModuleRelation relation = new AttachmentModuleRelation();\n                    relation.setRelationId(issueId);\n                    relation.setRelationType(AttachmentType.ISSUE.type());\n                    relation.setFileMetadataRefId(fileAssociation.getId());\n                    relation.setAttachmentId(UUID.randomUUID().toString());\n                    attachmentModuleRelationBatchMapper.insert(relation);\n                    FileAttachmentMetadata fileAttachmentMetadata = new FileAttachmentMetadata();\n                    BeanUtils.copyBean(fileAttachmentMetadata, fileMetadata);\n                    fileAttachmentMetadata.setId(relation.getAttachmentId());\n                    fileAttachmentMetadata.setCreator(fileMetadata.getCreateUser() == null ? StringUtils.EMPTY : fileMetadata.getCreateUser());\n                    fileAttachmentMetadata.setFilePath(fileMetadata.getPath() == null ? StringUtils.EMPTY : fileMetadata.getPath());\n                    fileAttachmentMetadataBatchMapper.insert(fileAttachmentMetadata);\n                    // \u4e0b\u8f7d\u6587\u4ef6\u7ba1\u7406\u6587\u4ef6, \u540c\u6b65\u5230\u7b2c\u4e09\u65b9\u5e73\u53f0\n                    File refFile = attachmentService.downloadMetadataFile(filemetaId, fileMetadata.getName());\n                    if (PlatformPluginService.isPluginPlatform(platform)) {\n                        issuesRequest.setPlatform(platform);\n                        attachmentService.syncIssuesAttachment(issuesRequest, refFile, AttachmentSyncType.UPLOAD);\n                    } else {\n                        IssuesRequest addIssueRequest = new IssuesRequest();\n                        addIssueRequest.setWorkspaceId(SessionUtils.getCurrentWorkspaceId());\n                        addIssueRequest.setProjectId(SessionUtils.getCurrentProjectId());\n                        Objects.requireNonNull(IssueFactory.createPlatform(platform, addIssueRequest))\n                                .syncIssuesAttachment(issuesRequest, refFile, AttachmentSyncType.UPLOAD);\n                    }\n                    FileUtils.deleteFile(FileUtils.ATTACHMENT_TMP_DIR + File.separator + fileMetadata.getName());\n                });\n                sqlSession.flushStatements();\n                if (sqlSession != null && sqlSessionFactory != null) {\n                    SqlSessionUtils.closeSqlSession(sqlSession, sqlSessionFactory);\n                }\n            }\n        }\n        return getIssue(issues.getId());\n    }\n\n    protected IssuesWithBLOBs insertIssues(IssuesWithBLOBs issues) {\n        if (StringUtils.isBlank(issues.getId())) {\n            issues.setId(UUID.randomUUID().toString());\n        }\n        issues.setCreateTime(System.currentTimeMillis());\n        issues.setUpdateTime(System.currentTimeMillis());\n        issues.setNum(getNextNum(issues.getProjectId()));\n        issues.setCreator(SessionUtils.getUserId());\n        issuesMapper.insert(issues);\n        return issues;\n    }\n\n    protected int getNextNum(String projectId) {\n        Issues issue = extIssuesMapper.getNextNum(projectId);\n        if (issue == null || issue.getNum() == null) {\n            return 100001;\n        } else {\n            return Optional.of(issue.getNum() + 1).orElse(100001);\n        }\n    }\n\n    public void handleTestCaseIssues(IssuesUpdateRequest issuesRequest) {\n        String issuesId = issuesRequest.getId();\n        List<String> deleteCaseIds = issuesRequest.getDeleteResourceIds();\n\n        if (!org.springframework.util.CollectionUtils.isEmpty(deleteCaseIds)) {\n            TestCaseIssuesExample example = new TestCaseIssuesExample();\n            example.createCriteria()\n                    .andResourceIdIn(deleteCaseIds)\n                    .andIssuesIdEqualTo(issuesId);\n            // \u6d4b\u8bd5\u8ba1\u5212\u7684\u7528\u4f8b deleteCaseIds \u662f\u7a7a\u7684\uff0c \u4e0d\u4f1a\u8fdb\u5230\u8fd9\u91cc\n            example.or(\n                    example.createCriteria()\n                            .andRefIdIn(deleteCaseIds)\n                            .andIssuesIdEqualTo(issuesId)\n            );\n            testCaseIssuesMapper.deleteByExample(example);\n        }\n\n        List<String> addCaseIds = issuesRequest.getAddResourceIds();\n\n        if (!org.springframework.util.CollectionUtils.isEmpty(addCaseIds)) {\n            if (issuesRequest.getIsPlanEdit()) {\n                addCaseIds.forEach(caseId -> {\n                    testCaseIssueService.add(issuesId, caseId, issuesRequest.getRefId(), IssueRefType.PLAN_FUNCTIONAL.name());\n                    testCaseIssueService.updateIssuesCount(caseId);\n                });\n            } else {\n                addCaseIds.forEach(caseId -> testCaseIssueService.add(issuesId, caseId, null, IssueRefType.FUNCTIONAL.name()));\n            }\n        }\n    }\n\n    public IssuesWithBLOBs updateIssues(IssuesUpdateRequest issuesRequest) {\n        PlatformIssuesUpdateRequest platformIssuesUpdateRequest = JSON.parseObject(JSON.toJSONString(issuesRequest), PlatformIssuesUpdateRequest.class);\n        Project project = baseProjectService.getProjectById(issuesRequest.getProjectId());\n        if (PlatformPluginService.isPluginPlatform(project.getPlatform())) {\n\n            Platform platform = platformPluginService.getPlatform(project.getPlatform());\n\n            if (platform.isAttachmentUploadSupport()) {\n                AttachmentRequest attachmentRequest = new AttachmentRequest();\n                attachmentRequest.setBelongId(issuesRequest.getId());\n                attachmentRequest.setBelongType(AttachmentType.ISSUE.type());\n                List<FileAttachmentMetadata> fileAttachmentMetadata = attachmentService.listMetadata(attachmentRequest);\n                Set<String> msAttachmentNames = fileAttachmentMetadata.stream()\n                        .map(FileAttachmentMetadata::getName)\n                        .collect(Collectors.toSet());\n                // \u83b7\u5f97\u7f3a\u9677MS\u9644\u4ef6\u540d\u79f0\n                platformIssuesUpdateRequest.setMsAttachmentNames(msAttachmentNames);\n            }\n\n            List<PlatformCustomFieldItemDTO> customFieldItemDTOS = JSON.parseArray(JSON.toJSONString(issuesRequest.getRequestFields()), PlatformCustomFieldItemDTO.class);\n            platformIssuesUpdateRequest.setCustomFieldList(customFieldItemDTOS); // todo \u5168\u90e8\u63d2\u4ef6\u5316\u540e\u53bb\u6389\n            platformIssuesUpdateRequest.setUserPlatformUserConfig(userService.getCurrentPlatformInfoStr(SessionUtils.getCurrentWorkspaceId()));\n            platformIssuesUpdateRequest.setProjectConfig(PlatformPluginService.getCompatibleProjectConfig(project));\n            IssuesWithBLOBs issue = platformPluginService.getPlatform(project.getPlatform())\n                    .updateIssue(platformIssuesUpdateRequest);\n\n            issue.setUpdateTime(System.currentTimeMillis());\n            issuesMapper.updateByPrimaryKeySelective(issue);\n            handleTestCaseIssues(issuesRequest);\n        } else {\n            List<IssuesPlatform> platformList = getUpdatePlatforms(issuesRequest);\n            platformList.forEach(platform -> {\n                platform.updateIssue(issuesRequest);\n            });\n        }\n\n        customFieldIssuesService.editFields(issuesRequest.getId(), issuesRequest.getEditFields());\n        customFieldIssuesService.addFields(issuesRequest.getId(), issuesRequest.getAddFields());\n\n        return getIssue(issuesRequest.getId());\n    }\n\n    public void saveFollows(String issueId, List<String> follows) {\n        IssueFollowExample example = new IssueFollowExample();\n        example.createCriteria().andIssueIdEqualTo(issueId);\n        issueFollowMapper.deleteByExample(example);\n        if (!CollectionUtils.isEmpty(follows)) {\n            for (String follow : follows) {\n                IssueFollow issueFollow = new IssueFollow();\n                issueFollow.setIssueId(issueId);\n                issueFollow.setFollowId(follow);\n                issueFollowMapper.insert(issueFollow);\n            }\n        }\n    }\n\n    public List<IssuesPlatform> getAddPlatforms(IssuesUpdateRequest updateRequest) {\n        List<String> platforms = new ArrayList<>();\n        // \u7f3a\u9677\u7ba1\u7406\u5173\u8054\n        platforms.add(getPlatform(updateRequest.getProjectId()));\n\n        if (CollectionUtils.isEmpty(platforms)) {\n            platforms.add(IssuesManagePlatform.Local.toString());\n        }\n        IssuesRequest issuesRequest = new IssuesRequest();\n        BeanUtils.copyBean(issuesRequest, updateRequest);\n        return IssueFactory.createPlatforms(platforms, issuesRequest);\n    }\n\n    public List<IssuesPlatform> getUpdatePlatforms(IssuesUpdateRequest updateRequest) {\n        String id = updateRequest.getId();\n        IssuesWithBLOBs issuesWithBLOBs = issuesMapper.selectByPrimaryKey(id);\n        String platform = issuesWithBLOBs.getPlatform();\n        List<String> platforms = new ArrayList<>();\n        if (StringUtils.isBlank(platform)) {\n            platforms.add(IssuesManagePlatform.Local.toString());\n        } else {\n            platforms.add(platform);\n        }\n        IssuesRequest issuesRequest = new IssuesRequest();\n        BeanUtils.copyBean(issuesRequest, updateRequest);\n        return IssueFactory.createPlatforms(platforms, issuesRequest);\n    }\n\n    public List<IssuesDao> getIssues(String caseResourceId, String refType) {\n        IssuesRequest issueRequest = new IssuesRequest();\n        issueRequest.setCaseResourceId(caseResourceId);\n        ServiceUtils.getDefaultOrder(issueRequest.getOrders());\n        issueRequest.setRefType(refType);\n        List<IssuesDao> issues = extIssuesMapper.getIssuesByCaseId(issueRequest);\n        handleCustomFieldStatus(issues);\n        return DistinctKeyUtil.distinctByKey(issues, IssuesDao::getId);\n    }\n\n    private void handleCustomFieldStatus(List<IssuesDao> issues) {\n        if (CollectionUtils.isEmpty(issues)) {\n            return;\n        }\n        List<String> issueIds = issues.stream().map(Issues::getId).collect(Collectors.toList());\n        String projectId = issues.get(0).getProjectId();\n        Project project = projectMapper.selectByPrimaryKey(projectId);\n        if (project == null) {\n            return;\n        }\n        String templateId = project.getIssueTemplateId();\n        if (StringUtils.isBlank(templateId)) {\n            return;\n        }\n        // \u6a21\u7248\u5bf9\u4e8e\u540c\u4e00\u4e2a\u7cfb\u7edf\u5b57\u6bb5\u5e94\u8be5\u53ea\u5173\u8054\u4e00\u6b21\n        List<CustomFieldDao> customFields = trackCustomFieldTemplateService.getCustomFieldByTemplateId(templateId);\n        List<String> fieldIds = customFields.stream()\n                .filter(customField -> StringUtils.equals(SystemCustomField.ISSUE_STATUS, customField.getName()))\n                .map(CustomFieldDao::getId).collect(Collectors.toList());\n        if (CollectionUtils.isEmpty(fieldIds)) {\n            return;\n        }\n        // \u8be5\u7cfb\u7edf\u5b57\u6bb5\u7684\u81ea\u5b9a\u4e49ID\n        String customFieldId = fieldIds.get(0);\n        CustomFieldIssuesExample example = new CustomFieldIssuesExample();\n        example.createCriteria().andFieldIdEqualTo(customFieldId).andResourceIdIn(issueIds);\n        List<CustomFieldIssues> customFieldIssues = customFieldIssuesMapper.selectByExample(example);\n        Map<String, String> statusMap = customFieldIssues.stream().collect(Collectors.toMap(CustomFieldIssues::getResourceId, CustomFieldIssues::getValue));\n        if (MapUtils.isEmpty(statusMap)) {\n            return;\n        }\n        for (IssuesDao issue : issues) {\n            issue.setStatus(statusMap.getOrDefault(issue.getId(), StringUtils.EMPTY).replaceAll(\"\\\"\", StringUtils.EMPTY));\n        }\n    }\n\n    public IssuesWithBLOBs getIssue(String id) {\n        IssuesDao issuesWithBLOBs = extIssuesMapper.selectByPrimaryKey(id);\n        if (issuesWithBLOBs == null) {\n            return null;\n        }\n        IssuesRequest issuesRequest = new IssuesRequest();\n        Project project = baseProjectService.getProjectById(issuesWithBLOBs.getProjectId());\n        issuesRequest.setWorkspaceId(project.getWorkspaceId());\n        issuesRequest.setProjectId(issuesWithBLOBs.getProjectId());\n        issuesRequest.setUserId(issuesWithBLOBs.getCreator());\n        if (StringUtils.equals(issuesWithBLOBs.getPlatform(), IssuesManagePlatform.Tapd.name())) {\n            TapdPlatform tapdPlatform = (TapdPlatform) IssueFactory.createPlatform(IssuesManagePlatform.Tapd.name(), issuesRequest);\n            List<String> tapdUsers = tapdPlatform.getTapdUsers(issuesWithBLOBs.getProjectId(), issuesWithBLOBs.getPlatformId());\n            issuesWithBLOBs.setTapdUsers(tapdUsers);\n        }\n        if (StringUtils.equals(issuesWithBLOBs.getPlatform(), IssuesManagePlatform.Zentao.name())) {\n            ZentaoPlatform zentaoPlatform = (ZentaoPlatform) IssueFactory.createPlatform(IssuesManagePlatform.Zentao.name(), issuesRequest);\n            zentaoPlatform.getZentaoAssignedAndBuilds(issuesWithBLOBs);\n        }\n        buildCustomField(issuesWithBLOBs);\n        return issuesWithBLOBs;\n    }\n\n    public String getPlatform(String projectId) {\n        Project project = baseProjectService.getProjectById(projectId);\n        return project.getPlatform();\n    }\n\n    public List<String> getPlatforms(Project project) {\n        String workspaceId = project.getWorkspaceId();\n        boolean tapd = isIntegratedPlatform(workspaceId, IssuesManagePlatform.Tapd.toString());\n        boolean jira = isIntegratedPlatform(workspaceId, IssuesManagePlatform.Jira.toString());\n        boolean zentao = isIntegratedPlatform(workspaceId, IssuesManagePlatform.Zentao.toString());\n        boolean azure = isIntegratedPlatform(workspaceId, IssuesManagePlatform.AzureDevops.toString());\n\n        List<String> platforms = new ArrayList<>();\n        if (tapd) {\n            // \u662f\u5426\u5173\u8054\u4e86\u9879\u76ee\n            String tapdId = project.getTapdId();\n            if (StringUtils.isNotBlank(tapdId) && StringUtils.equals(project.getPlatform(), IssuesManagePlatform.Tapd.toString())) {\n                platforms.add(IssuesManagePlatform.Tapd.name());\n            }\n\n        }\n\n        if (jira) {\n            String jiraKey = project.getJiraKey();\n            if (StringUtils.isNotBlank(jiraKey) && PlatformPluginService.isPluginPlatform(project.getPlatform())) {\n                platforms.add(IssuesManagePlatform.Jira.name());\n            }\n        }\n\n        if (zentao) {\n            String zentaoId = project.getZentaoId();\n            if (StringUtils.isNotBlank(zentaoId) && StringUtils.equals(project.getPlatform(), IssuesManagePlatform.Zentao.toString())) {\n                platforms.add(IssuesManagePlatform.Zentao.name());\n            }\n        }\n\n        if (azure) {\n            String azureDevopsId = project.getAzureDevopsId();\n            if (StringUtils.isNotBlank(azureDevopsId) && StringUtils.equals(project.getPlatform(), IssuesManagePlatform.AzureDevops.toString())) {\n                platforms.add(IssuesManagePlatform.AzureDevops.name());\n            }\n        }\n\n        return platforms;\n    }\n\n\n    /**\n     * \u662f\u5426\u5173\u8054\u5e73\u53f0\n     */\n    public boolean isIntegratedPlatform(String workspaceId, String platform) {\n        IntegrationRequest request = new IntegrationRequest();\n        request.setPlatform(platform);\n        request.setWorkspaceId(workspaceId);\n        ServiceIntegration integration = baseIntegrationService.get(request);\n        return StringUtils.isNotBlank(integration.getId());\n    }\n\n    public void closeLocalIssue(String issueId) {\n        IssuesWithBLOBs issues = new IssuesWithBLOBs();\n        issues.setId(issueId);\n        issues.setStatus(\"closed\");\n        issuesMapper.updateByPrimaryKeySelective(issues);\n    }\n\n    public List<PlatformUser> getTapdProjectUsers(IssuesRequest request) {\n        IssuesPlatform platform = IssueFactory.createPlatform(IssuesManagePlatform.Tapd.name(), request);\n        return platform.getPlatformUser();\n    }\n\n    public List<PlatformUser> getZentaoUsers(IssuesRequest request) {\n        IssuesPlatform platform = IssueFactory.createPlatform(IssuesManagePlatform.Zentao.name(), request);\n        return platform.getPlatformUser();\n    }\n\n    public void deleteIssue(String id) {\n        issuesMapper.deleteByPrimaryKey(id);\n        TestCaseIssuesExample example = new TestCaseIssuesExample();\n        example.createCriteria().andIssuesIdEqualTo(id);\n        List<TestCaseIssues> testCaseIssues = testCaseIssuesMapper.selectByExample(example);\n        testCaseIssues.forEach(i -> {\n            if (i.getRefType().equals(IssueRefType.PLAN_FUNCTIONAL.name())) {\n                testCaseIssueService.updateIssuesCount(i.getResourceId());\n            }\n        });\n        customFieldIssuesService.deleteByResourceId(id);\n        testCaseIssuesMapper.deleteByExample(example);\n    }\n\n    public void deleteIssueRelate(IssuesRequest request) {\n        String caseResourceId = request.getCaseResourceId();\n        String id = request.getId();\n        TestCaseIssuesExample example = new TestCaseIssuesExample();\n        if (request.getIsPlanEdit() == true) {\n            example.createCriteria().andResourceIdEqualTo(caseResourceId).andIssuesIdEqualTo(id);\n            testCaseIssuesMapper.deleteByExample(example);\n            testCaseIssueService.updateIssuesCount(caseResourceId);\n        } else {\n            IssuesUpdateRequest updateRequest = new IssuesUpdateRequest();\n            updateRequest.setId(request.getId());\n            updateRequest.setResourceId(request.getCaseResourceId());\n            updateRequest.setProjectId(request.getProjectId());\n            updateRequest.setWorkspaceId(request.getWorkspaceId());\n            List<IssuesPlatform> platformList = getUpdatePlatforms(updateRequest);\n            platformList.forEach(platform -> {\n                platform.removeIssueParentLink(updateRequest);\n            });\n\n            extIssuesMapper.deleteIssues(id, caseResourceId);\n            TestPlanTestCaseExample testPlanTestCaseExample = new TestPlanTestCaseExample();\n            testPlanTestCaseExample.createCriteria().andCaseIdEqualTo(caseResourceId);\n            List<TestPlanTestCase> list = testPlanTestCaseMapper.selectByExample(testPlanTestCaseExample);\n            list.forEach(item -> {\n                testCaseIssueService.updateIssuesCount(item.getId());\n            });\n        }\n    }\n\n    public void delete(String id) {\n        IssuesWithBLOBs issuesWithBLOBs = issuesMapper.selectByPrimaryKey(id);\n        List platforms = new ArrayList<>();\n        platforms.add(issuesWithBLOBs.getPlatform());\n        String projectId = issuesWithBLOBs.getProjectId();\n        Project project = baseProjectService.getProjectById(projectId);\n        IssuesRequest issuesRequest = new IssuesRequest();\n        issuesRequest.setWorkspaceId(project.getWorkspaceId());\n        if (PlatformPluginService.isPluginPlatform(issuesWithBLOBs.getPlatform())) {\n            platformPluginService.getPlatform(issuesWithBLOBs.getPlatform())\n                    .deleteIssue(issuesWithBLOBs.getPlatformId());\n            deleteIssue(id);\n        } else {\n            IssuesPlatform platform = IssueFactory.createPlatform(issuesWithBLOBs.getPlatform(), issuesRequest);\n            platform.deleteIssue(id);\n        }\n\n        // \u5220\u9664\u7f3a\u9677\u5bf9\u5e94\u7684\u9644\u4ef6\n        AttachmentRequest request = new AttachmentRequest();\n        request.setBelongId(id);\n        request.setBelongType(AttachmentType.ISSUE.type());\n        attachmentService.deleteAttachment(request);\n    }\n\n    public void batchDelete(IssuesUpdateRequest request) {\n        if (request.getBatchDeleteAll()) {\n            IssuesRequest issuesRequest = new IssuesRequest();\n            issuesRequest.setWorkspaceId(SessionUtils.getCurrentWorkspaceId());\n            issuesRequest.setProjectId(SessionUtils.getCurrentProjectId());\n            List<IssuesDao> issuesDaos = listByWorkspaceId(issuesRequest);\n            if (CollectionUtils.isNotEmpty(issuesDaos)) {\n                issuesDaos.parallelStream().forEach(issuesDao -> {\n                    delete(issuesDao.getId());\n                });\n            }\n        } else {\n            if (CollectionUtils.isNotEmpty(request.getBatchDeleteIds())) {\n                request.getBatchDeleteIds().parallelStream().forEach(id -> delete(id));\n            }\n        }\n    }\n\n    public List<ZentaoBuild> getZentaoBuilds(IssuesRequest request) {\n        try {\n            ZentaoPlatform platform = (ZentaoPlatform) IssueFactory.createPlatform(IssuesManagePlatform.Zentao.name(), request);\n            return platform.getBuilds();\n        } catch (Exception e) {\n            LogUtil.error(\"get zentao builds fail.\");\n            LogUtil.error(e.getMessage(), e);\n            MSException.throwException(Translator.get(\"zentao_get_project_builds_fail\"));\n        }\n        return null;\n    }\n\n    public List<IssuesDao> list(IssuesRequest request) {\n        request.setOrders(ServiceUtils.getDefaultOrderByField(request.getOrders(), \"create_time\"));\n        request.getOrders().forEach(order -> {\n            if (StringUtils.isNotEmpty(order.getName()) && order.getName().startsWith(\"custom\")) {\n                request.setIsCustomSorted(true);\n                request.setCustomFieldId(order.getName().replace(\"custom_\", StringUtils.EMPTY));\n                order.setPrefix(\"cfi\");\n                order.setName(\"value\");\n            }\n        });\n        ServiceUtils.setBaseQueryRequestCustomMultipleFields(request);\n        List<IssuesDao> issues = extIssuesMapper.getIssues(request);\n\n        Map<String, Set<String>> caseSetMap = getCaseSetMap(issues);\n        Map<String, User> userMap = getUserMap(issues);\n        Map<String, String> planMap = getPlanMap(issues);\n\n        issues.forEach(item -> {\n            User createUser = userMap.get(item.getCreator());\n            if (createUser != null) {\n                item.setCreatorName(createUser.getName());\n            }\n            String resourceName = planMap.get(item.getResourceId());\n            if (StringUtils.isNotBlank(resourceName)) {\n                item.setResourceName(resourceName);\n            }\n\n            Set<String> caseIdSet = caseSetMap.get(item.getId());\n            if (caseIdSet == null) {\n                caseIdSet = new HashSet<>();\n            }\n            item.setCaseIds(new ArrayList<>(caseIdSet));\n            item.setCaseCount(caseIdSet.size());\n        });\n        buildCustomField(issues);\n        //\u5904\u7406MD\u56fe\u7247\u94fe\u63a5\u5185\u5bb9\n        handleJiraIssueMdUrl(request.getWorkspaceId(), request.getProjectId(), issues);\n        return issues;\n    }\n\n    private void buildCustomField(List<IssuesDao> data) {\n        if (CollectionUtils.isEmpty(data)) {\n            return;\n        }\n        Map<String, List<CustomFieldDao>> fieldMap =\n                customFieldIssuesService.getMapByResourceIds(data.stream().map(IssuesDao::getId).collect(Collectors.toList()));\n        data.forEach(i -> i.setFields(fieldMap.get(i.getId())));\n    }\n\n    private void buildCustomField(IssuesDao data) {\n        CustomFieldIssuesExample example = new CustomFieldIssuesExample();\n        example.createCriteria().andResourceIdEqualTo(data.getId());\n        List<CustomFieldIssues> customFieldTestCases = customFieldIssuesMapper.selectByExample(example);\n        List<CustomFieldDao> fields = new ArrayList<>();\n        customFieldTestCases.forEach(i -> {\n            CustomFieldDao customFieldDao = new CustomFieldDao();\n            customFieldDao.setId(i.getFieldId());\n            customFieldDao.setValue(i.getValue());\n            customFieldDao.setTextValue(i.getTextValue());\n            fields.add(customFieldDao);\n        });\n        data.setFields(fields);\n    }\n\n    private void buildCustomField(List<IssuesDao> data, Boolean isThirdTemplate, List<CustomFieldDao> customFields) {\n        if (CollectionUtils.isEmpty(data)) {\n            return;\n        }\n\n        Map<String, List<CustomFieldDao>> fieldMap =\n                customFieldIssuesService.getMapByResourceIds(data.stream().map(IssuesDao::getId).collect(Collectors.toList()));\n        try {\n            Map<String, CustomField> fieldMaps = new HashMap<>();\n            if (isThirdTemplate) {\n                fieldMaps = customFields.stream().collect(Collectors.toMap(CustomFieldDao::getId, field -> (CustomField) field));\n            } else {\n                List<CustomFieldDao> customfields = fieldMap.get(data.get(0).getId());\n                if (CollectionUtils.isNotEmpty(customfields) && customfields.size() > 0) {\n                    List<String> ids = customfields.stream().map(CustomFieldDao::getId).collect(Collectors.toList());\n                    List<CustomField> issueFields = baseCustomFieldService.getFieldByIds(ids);\n                    fieldMaps = issueFields.stream().collect(Collectors.toMap(CustomField::getId, field -> field));\n                }\n            }\n\n            for (Map.Entry<String, List<CustomFieldDao>> entry : fieldMap.entrySet()) {\n                for (CustomFieldDao fieldDao : entry.getValue()) {\n                    CustomField customField = fieldMaps.get(fieldDao.getId());\n                    if (customField != null) {\n                        fieldDao.setName(customField.getName());\n                        if (StringUtils.equalsAnyIgnoreCase(customField.getType(), CustomFieldType.RICH_TEXT.getValue(), CustomFieldType.TEXTAREA.getValue())) {\n                            fieldDao.setValue(fieldDao.getTextValue());\n                        }\n                        if (StringUtils.equalsAnyIgnoreCase(customField.getType(), CustomFieldType.DATE.getValue()) && StringUtils.isNotEmpty(fieldDao.getValue()) && !StringUtils.equals(fieldDao.getValue(), \"null\")) {\n                            Date date = DateUtils.parseDate(fieldDao.getValue().replaceAll(\"\\\"\", StringUtils.EMPTY), \"yyyy-MM-dd\");\n                            String format = DateUtils.format(date, \"yyyy/MM/dd\");\n                            fieldDao.setValue(\"\\\"\" + format + \"\\\"\");\n                        }\n                        if (StringUtils.equalsAnyIgnoreCase(customField.getType(), CustomFieldType.DATETIME.getValue()) && StringUtils.isNotEmpty(fieldDao.getValue()) && !StringUtils.equals(fieldDao.getValue(), \"null\")) {\n                            Date date = null;\n                            if (fieldDao.getValue().contains(\"T\") && fieldDao.getValue().length() == 18) {\n                                date = DateUtils.parseDate(fieldDao.getValue().replaceAll(\"\\\"\", StringUtils.EMPTY), \"yyyy-MM-dd'T'HH:mm\");\n                            } else if (fieldDao.getValue().contains(\"T\") && fieldDao.getValue().length() == 21) {\n                                date = DateUtils.parseDate(fieldDao.getValue().replaceAll(\"\\\"\", StringUtils.EMPTY), \"yyyy-MM-dd'T'HH:mm:ss\");\n                            } else if (fieldDao.getValue().contains(\"T\") && fieldDao.getValue().length() > 21) {\n                                date = DateUtils.parseDate(fieldDao.getValue().replaceAll(\"\\\"\", StringUtils.EMPTY).substring(0, 19), \"yyyy-MM-dd'T'HH:mm:ss\");\n                            } else {\n                                date = DateUtils.parseDate(fieldDao.getValue().replaceAll(\"\\\"\", StringUtils.EMPTY));\n                            }\n                            String format = DateUtils.format(date, \"yyyy/MM/dd HH:mm:ss\");\n                            fieldDao.setValue(\"\\\"\" + format + \"\\\"\");\n                        }\n                        if (StringUtils.equalsAnyIgnoreCase(customField.getType(), CustomFieldType.SELECT.getValue(),\n                                CustomFieldType.MULTIPLE_SELECT.getValue(), CustomFieldType.CHECKBOX.getValue(), CustomFieldType.RADIO.getValue())\n                                && !StringUtils.equalsAnyIgnoreCase(customField.getName(), SystemCustomField.ISSUE_STATUS)) {\n                            fieldDao.setValue(parseOptionValue(customField.getOptions(), fieldDao.getValue()));\n                        }\n                    }\n                }\n            }\n\n            data.forEach(i -> i.setFields(fieldMap.get(i.getId())));\n        } catch (Exception e) {\n            MSException.throwException(e.getMessage());\n        }\n\n    }\n\n    private void handleJiraIssueMdUrl(String workPlaceId, String projectId, List<IssuesDao> issues) {\n        issues.forEach(issue -> {\n            if (StringUtils.isNotEmpty(issue.getDescription()) && issue.getDescription().contains(\"platform=Jira&\")) {\n                issue.setDescription(replaceJiraMdUrlParam(issue.getDescription(), workPlaceId, projectId));\n            }\n            if (StringUtils.isNotEmpty(issue.getCustomFields()) && issue.getCustomFields().contains(\"platform=Jira&\")) {\n                issue.setCustomFields(replaceJiraMdUrlParam(issue.getCustomFields(), workPlaceId, projectId));\n            }\n            if (CollectionUtils.isNotEmpty(issue.getFields())) {\n                issue.getFields().forEach(field -> {\n                    if (StringUtils.isNotEmpty(field.getTextValue()) && field.getTextValue().contains(\"platform=Jira&\")) {\n                        field.setTextValue(replaceJiraMdUrlParam(field.getTextValue(), workPlaceId, projectId));\n                    }\n                    if (StringUtils.isNotEmpty(field.getValue()) && field.getValue().contains(\"platform=Jira&\")) {\n                        field.setValue(replaceJiraMdUrlParam(field.getValue(), workPlaceId, projectId));\n                    }\n                });\n            }\n        });\n    }\n\n    private String replaceJiraMdUrlParam(String url, String workspaceId, String projectId) {\n        if (url.contains(\"&workspace_id=\")) {\n            return url;\n        }\n        return url.replaceAll(\"platform=Jira&\",\n                \"platform=Jira&workspace_id=\" + workspaceId + \"&\");\n    }\n\n    private Map<String, List<IssueCommentDTO>> getCommentMap(List<IssuesDao> issues) {\n        List<String> issueIds = issues.stream().map(IssuesDao::getId).collect(Collectors.toList());\n        List<IssueCommentDTO> comments = extIssueCommentMapper.getCommentsByIssueIds(issueIds);\n        Map<String, List<IssueCommentDTO>> commentMap = comments.stream().collect(Collectors.groupingBy(IssueCommentDTO::getIssueId));\n        return commentMap;\n    }\n\n    private Map<String, String> getPlanMap(List<IssuesDao> issues) {\n        List<String> resourceIds = issues.stream().map(IssuesDao::getResourceId)\n                .filter(Objects::nonNull)\n                .collect(Collectors.toList());\n\n        List<TestPlan> testPlans = testPlanService.getTestPlanByIds(resourceIds);\n        Map<String, String> planMap = new HashMap<>();\n        if (testPlans != null) {\n            planMap = testPlans.stream()\n                    .collect(Collectors.toMap(TestPlan::getId, TestPlan::getName));\n        }\n        return planMap;\n    }\n\n    private Map<String, User> getUserMap(List<IssuesDao> issues) {\n        List<String> userIds = issues.stream()\n                .map(IssuesDao::getCreator)\n                .collect(Collectors.toList());\n        return ServiceUtils.getUserMap(userIds);\n    }\n\n    private Map<String, Set<String>> getCaseSetMap(List<IssuesDao> issues) {\n        List<String> ids = issues.stream().map(Issues::getId).collect(Collectors.toList());\n        Map<String, Set<String>> map = new HashMap<>();\n        if (ids.size() == 0) {\n            return map;\n        }\n        TestCaseIssuesExample example = new TestCaseIssuesExample();\n        example.createCriteria()\n                .andIssuesIdIn(ids);\n        List<TestCaseIssues> testCaseIssues = testCaseIssuesMapper.selectByExample(example);\n\n        List<String> caseIds = testCaseIssues.stream().map(x ->\n                x.getRefType().equals(IssueRefType.PLAN_FUNCTIONAL.name()) ? x.getRefId() : x.getResourceId())\n                .collect(Collectors.toList());\n\n        List<TestCaseDTO> notInTrashCase = testCaseService.getTestCaseByIds(caseIds);\n\n        if (CollectionUtils.isNotEmpty(notInTrashCase)) {\n            Set<String> notInTrashCaseSet = notInTrashCase.stream()\n                    .map(TestCaseDTO::getId)\n                    .collect(Collectors.toSet());\n\n            testCaseIssues.forEach(i -> {\n                Set<String> caseIdSet = new HashSet<>();\n                String caseId = i.getRefType().equals(IssueRefType.PLAN_FUNCTIONAL.name()) ? i.getRefId() : i.getResourceId();\n                if (notInTrashCaseSet.contains(caseId)) {\n                    caseIdSet.add(caseId);\n                }\n                if (map.get(i.getIssuesId()) != null) {\n                    map.get(i.getIssuesId()).addAll(caseIdSet);\n                } else {\n                    map.put(i.getIssuesId(), caseIdSet);\n                }\n            });\n        }\n        return map;\n    }\n\n    public Map<String, List<IssuesDao>> getIssueMap(List<IssuesDao> issues) {\n        Map<String, List<IssuesDao>> issueMap = new HashMap<>();\n        issues.forEach(item -> {\n            String platForm = item.getPlatform();\n            if (StringUtils.equalsIgnoreCase(IssuesManagePlatform.Local.toString(), item.getPlatform())) {\n                // \u53ef\u80fd\u6709\u5927\u5c0f\u5199\u7684\u95ee\u9898\n                platForm = IssuesManagePlatform.Local.toString();\n            }\n            List<IssuesDao> issuesDao = issueMap.get(platForm);\n            if (issuesDao == null) {\n                issuesDao = new ArrayList<>();\n            }\n            issuesDao.add(item);\n            issueMap.put(platForm, issuesDao);\n        });\n        return issueMap;\n    }\n\n    public void syncThirdPartyIssues() {\n        List<String> projectIds = trackProjectService.getThirdPartProjectIds();\n        projectIds.forEach(id -> {\n            try {\n                syncThirdPartyIssues(id);\n            } catch (Exception e) {\n                LogUtil.error(e.getMessage(), e);\n            }\n        });\n    }\n\n    public void issuesCount() {\n        LogUtil.info(\"\u6d4b\u8bd5\u8ba1\u5212-\u6d4b\u8bd5\u7528\u4f8b\u540c\u6b65\u7f3a\u9677\u4fe1\u606f\u5f00\u59cb\");\n        int pageSize = 100;\n        int pages = 1;\n        for (int i = 0; i < pages; i++) {\n            Page<List<TestPlanTestCase>> page = PageHelper.startPage(i, pageSize, true);\n            List<TestPlanTestCaseWithBLOBs> list = testPlanTestCaseService.listAll();\n            pages = page.getPages();// \u66ff\u6362\u6210\u771f\u5b9e\u7684\u503c\n            list.forEach(l -> {\n                testCaseIssueService.updateIssuesCount(l.getCaseId());\n            });\n        }\n        LogUtil.info(\"\u6d4b\u8bd5\u8ba1\u5212-\u6d4b\u8bd5\u7528\u4f8b\u540c\u6b65\u7f3a\u9677\u4fe1\u606f\u7ed3\u675f\");\n    }\n\n    public boolean checkSync(String projectId) {\n        String syncValue = getSyncKey(projectId);\n        if (StringUtils.isNotEmpty(syncValue)) {\n            return false;\n        }\n        return true;\n    }\n\n    public String getSyncKey(String projectId) {\n        return stringRedisTemplate.opsForValue().get(SYNC_THIRD_PARTY_ISSUES_KEY + \":\" + projectId);\n    }\n\n    public void setSyncKey(String projectId) {\n        stringRedisTemplate.opsForValue().set(SYNC_THIRD_PARTY_ISSUES_KEY + \":\" + projectId,\n                UUID.randomUUID().toString(), 60 * 10, TimeUnit.SECONDS);\n    }\n\n    public void deleteSyncKey(String projectId) {\n        stringRedisTemplate.delete(SYNC_THIRD_PARTY_ISSUES_KEY + \":\" + projectId);\n    }\n\n    public boolean syncThirdPartyIssues(String projectId) {\n        if (StringUtils.isNotBlank(projectId)) {\n            String syncValue = getSyncKey(projectId);\n            if (StringUtils.isNotEmpty(syncValue)) {\n                return false;\n            }\n\n            setSyncKey(projectId);\n\n            Project project = baseProjectService.getProjectById(projectId);\n            List<IssuesDao> issues = extIssuesMapper.getIssueForSync(projectId, project.getPlatform());\n\n            if (CollectionUtils.isEmpty(issues)) {\n                deleteSyncKey(projectId);\n                return true;\n            }\n\n            IssuesRequest issuesRequest = new IssuesRequest();\n            issuesRequest.setProjectId(projectId);\n            issuesRequest.setWorkspaceId(project.getWorkspaceId());\n\n            try {\n                if (!trackProjectService.isThirdPartTemplate(project)) {\n                    String defaultCustomFields = getDefaultCustomFields(projectId);\n                    issuesRequest.setDefaultCustomFields(defaultCustomFields);\n                }\n                if (PlatformPluginService.isPluginPlatform(project.getPlatform())) {\n                    // \u5206\u6279\u5904\u7406\n                    SubListUtil.dealForSubList(issues, 500, (subIssue) ->\n                            syncPluginThirdPartyIssues(subIssue, project, issuesRequest.getDefaultCustomFields()));\n                } else {\n                    IssuesPlatform platform = IssueFactory.createPlatform(project.getPlatform(), issuesRequest);\n                    syncThirdPartyIssues(platform::syncIssues, project, issues);\n                }\n            } catch (Exception e) {\n                throw e;\n            } finally {\n                deleteSyncKey(projectId);\n            }\n        }\n        return true;\n    }\n\n    public void syncPluginThirdPartyIssues(List<IssuesDao> issues, Project project, String defaultCustomFields) {\n        List<PlatformIssuesDTO> platformIssues = JSON.parseArray(JSON.toJSONString(issues), PlatformIssuesDTO.class);\n        platformIssues.stream().forEach(item -> {\n            // \u7ed9\u7f3a\u9677\u6dfb\u52a0\u81ea\u5b9a\u4e49\u5b57\u6bb5\n            List<PlatformCustomFieldItemDTO> platformCustomFieldList = extIssuesMapper.getIssueCustomField(item.getId()).stream()\n                    .map(field -> {\n                        PlatformCustomFieldItemDTO platformCustomFieldItemDTO = new PlatformCustomFieldItemDTO();\n                        BeanUtils.copyBean(platformCustomFieldItemDTO, field);\n                        return platformCustomFieldItemDTO;\n                    })\n                    .collect(Collectors.toList());\n            item.setCustomFieldList(platformCustomFieldList);\n        });\n        SyncIssuesRequest request = new SyncIssuesRequest();\n        request.setIssues(platformIssues);\n        request.setDefaultCustomFields(defaultCustomFields);\n        request.setProjectConfig(PlatformPluginService.getCompatibleProjectConfig(project));\n        Platform platform = platformPluginService.getPlatform(project.getPlatform(), project.getWorkspaceId());\n\n        // \u83b7\u53d6\u9700\u8981\u53d8\u66f4\u7684\u7f3a\u9677\n        SyncIssuesResult syncIssuesResult = platform.syncIssues(request);\n        List<IssuesWithBLOBs> updateIssues = syncIssuesResult.getUpdateIssues();\n\n        SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH);\n        try {\n            IssuesMapper issueBatchMapper = sqlSession.getMapper(IssuesMapper.class);\n            AttachmentModuleRelationMapper batchAttachmentModuleRelationMapper = sqlSession.getMapper(AttachmentModuleRelationMapper.class);\n\n            // \u6279\u91cf\u66f4\u65b0\n            updateIssues.forEach(issueBatchMapper::updateByPrimaryKeySelective);\n\n            // \u6279\u91cf\u5220\u9664\n            syncIssuesResult.getDeleteIssuesIds()\n                    .stream()\n                    .forEach(issueBatchMapper::deleteByPrimaryKey);\n\n            try {\n                // \u540c\u6b65\u9644\u4ef6\n                syncPluginIssueAttachment(platform, syncIssuesResult, batchAttachmentModuleRelationMapper);\n            } catch (Exception e) {\n                LogUtil.error(e);\n            }\n\n            HashMap<String, List<CustomFieldResourceDTO>> customFieldMap = new HashMap<>();\n            updateIssues.forEach(item -> {\n                List<CustomFieldResourceDTO> customFieldResource = baseCustomFieldService.getCustomFieldResourceDTO(item.getCustomFields());\n                customFieldMap.put(item.getId(), customFieldResource);\n            });\n\n            // \u4fee\u6539\u81ea\u5b9a\u4e49\u5b57\u6bb5\n            customFieldIssuesService.batchEditFields(customFieldMap);\n\n            sqlSession.commit();\n        } catch (Exception e) {\n            sqlSession.close();\n            MSException.throwException(e);\n        }\n    }\n\n    private void syncPluginIssueAttachment(Platform platform, SyncIssuesResult syncIssuesResult,\n                                           AttachmentModuleRelationMapper batchAttachmentModuleRelationMapper) {\n        Map<String, List<PlatformAttachment>> attachmentMap = syncIssuesResult.getAttachmentMap();\n        if (MapUtils.isNotEmpty(attachmentMap)) {\n            for (String issueId : attachmentMap.keySet()) {\n                // \u67e5\u8be2\u6211\u4eec\u5e73\u53f0\u7684\u9644\u4ef6\n                Set<String> jiraAttachmentSet = new HashSet<>();\n                List<FileAttachmentMetadata> allMsAttachments = getIssueFileAttachmentMetadata(issueId);\n                Set<String> attachmentsNameSet = allMsAttachments.stream()\n                        .map(FileAttachmentMetadata::getName)\n                        .collect(Collectors.toSet());\n\n                List<PlatformAttachment> syncAttachments = attachmentMap.get(issueId);\n                for (PlatformAttachment syncAttachment : syncAttachments) {\n                    String fileName = syncAttachment.getFileName();\n                    String fileKey = syncAttachment.getFileKey();\n                    if (!attachmentsNameSet.contains(fileName)) {\n                        jiraAttachmentSet.add(fileName);\n                        saveAttachmentModuleRelation(platform, issueId, fileName, fileKey, batchAttachmentModuleRelationMapper);\n                    }\n\n                }\n\n                // \u5220\u9664Jira\u4e2d\u4e0d\u5b58\u5728\u7684\u9644\u4ef6\n                deleteSyncAttachment(batchAttachmentModuleRelationMapper, jiraAttachmentSet, allMsAttachments);\n            }\n        }\n    }\n\n    private void syncAllPluginIssueAttachment(Project project, IssueSyncRequest syncIssuesResult) {\n        // todo \u6240\u6709\u5e73\u53f0\u6539\u9020\u5b8c\u4e4b\u540e\u5220\u9664\n        if (!StringUtils.equals(project.getPlatform(), IssuesManagePlatform.Jira.name())) {\n            return;\n        }\n        SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH);\n        try {\n            AttachmentModuleRelationMapper batchAttachmentModuleRelationMapper = sqlSession.getMapper(AttachmentModuleRelationMapper.class);\n            Platform platform = platformPluginService.getPlatform(project.getPlatform(), project.getWorkspaceId());\n            Map<String, List<io.metersphere.xpack.track.dto.PlatformAttachment>> attachmentMap = syncIssuesResult.getAttachmentMap();\n            if (MapUtils.isNotEmpty(attachmentMap)) {\n                for (String issueId : attachmentMap.keySet()) {\n                    // \u67e5\u8be2\u6211\u4eec\u5e73\u53f0\u7684\u9644\u4ef6\n                    Set<String> jiraAttachmentSet = new HashSet<>();\n                    List<FileAttachmentMetadata> allMsAttachments = getIssueFileAttachmentMetadata(issueId);\n                    Set<String> attachmentsNameSet = allMsAttachments.stream()\n                            .map(FileAttachmentMetadata::getName)\n                            .collect(Collectors.toSet());\n\n                    List<io.metersphere.xpack.track.dto.PlatformAttachment> syncAttachments = attachmentMap.get(issueId);\n                    for (io.metersphere.xpack.track.dto.PlatformAttachment syncAttachment : syncAttachments) {\n                        String fileName = syncAttachment.getFileName();\n                        String fileKey = syncAttachment.getFileKey();\n                        if (!attachmentsNameSet.contains(fileName)) {\n                            jiraAttachmentSet.add(fileName);\n                            saveAttachmentModuleRelation(platform, issueId, fileName, fileKey, batchAttachmentModuleRelationMapper);\n                        }\n\n                    }\n\n                    // \u5220\u9664Jira\u4e2d\u4e0d\u5b58\u5728\u7684\u9644\u4ef6\n                    deleteSyncAttachment(batchAttachmentModuleRelationMapper, jiraAttachmentSet, allMsAttachments);\n                }\n            }\n        } catch (Exception e) {\n            LogUtil.error(e);\n        } finally {\n            SqlSessionUtils.closeSqlSession(sqlSession, sqlSessionFactory);\n        }\n    }\n\n    private void deleteSyncAttachment(AttachmentModuleRelationMapper batchAttachmentModuleRelationMapper,\n                                      Set<String> jiraAttachmentSet,\n                                      List<FileAttachmentMetadata> allMsAttachments) {\n        // \u5220\u9664Jira\u4e2d\u4e0d\u5b58\u5728\u7684\u9644\u4ef6\n        if (CollectionUtils.isNotEmpty(allMsAttachments)) {\n            List<FileAttachmentMetadata> deleteMsAttachments = allMsAttachments.stream()\n                    .filter(msAttachment -> !jiraAttachmentSet.contains(msAttachment.getName()))\n                    .collect(Collectors.toList());\n            deleteMsAttachments.forEach(fileAttachmentMetadata -> {\n                List<String> ids = List.of(fileAttachmentMetadata.getId());\n                AttachmentModuleRelationExample example = new AttachmentModuleRelationExample();\n                example.createCriteria().andAttachmentIdIn(ids).andRelationTypeEqualTo(AttachmentType.ISSUE.type());\n                // \u5220\u9664MS\u9644\u4ef6\u53ca\u5173\u8054\u6570\u636e\n                attachmentService.deleteAttachmentByIds(ids);\n                attachmentService.deleteFileAttachmentByIds(ids);\n                batchAttachmentModuleRelationMapper.deleteByExample(example);\n            });\n        }\n    }\n\n    private void saveAttachmentModuleRelation(Platform platform, String issueId,\n                                              String fileName, String fileKey,\n                                              AttachmentModuleRelationMapper batchAttachmentModuleRelationMapper) {\n        try {\n            byte[] content = platform.getAttachmentContent(fileKey);\n            if (content == null) {\n                return;\n            }\n            FileAttachmentMetadata fileAttachmentMetadata = attachmentService\n                    .saveAttachmentByBytes(content, AttachmentType.ISSUE.type(), issueId, fileName);\n            AttachmentModuleRelation attachmentModuleRelation = new AttachmentModuleRelation();\n            attachmentModuleRelation.setAttachmentId(fileAttachmentMetadata.getId());\n            attachmentModuleRelation.setRelationId(issueId);\n            attachmentModuleRelation.setRelationType(AttachmentType.ISSUE.type());\n            batchAttachmentModuleRelationMapper.insert(attachmentModuleRelation);\n        } catch (Exception e) {\n            LogUtil.error(e);\n        }\n\n    }\n\n    private List<FileAttachmentMetadata> getIssueFileAttachmentMetadata(String issueId) {\n        AttachmentRequest attachmentRequest = new AttachmentRequest();\n        attachmentRequest.setBelongType(AttachmentType.ISSUE.type());\n        attachmentRequest.setBelongId(issueId);\n        List<FileAttachmentMetadata> allMsAttachments = attachmentService.listMetadata(attachmentRequest);\n        return allMsAttachments;\n    }\n\n\n    /**\n     * \u83b7\u53d6\u9ed8\u8ba4\u7684\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7684\u53d6\u503c\uff0c\u540c\u6b65\u4e4b\u540e\u66f4\u65b0\u6210\u7b2c\u4e09\u65b9\u5e73\u53f0\u7684\u503c\n     *\n     * @param projectId\n     * @return\n     */\n    public String getDefaultCustomFields(String projectId) {\n        IssueTemplateDao template = trackIssueTemplateService.getTemplate(projectId);\n        List<CustomFieldDao> customFields = trackCustomFieldTemplateService.getCustomFieldByTemplateId(template.getId());\n        return getCustomFieldsValuesString(customFields);\n    }\n\n    public String getCustomFieldsValuesString(List<CustomFieldDao> customFields) {\n        List fields = new ArrayList();\n        customFields.forEach(item -> {\n            Map<String, Object> field = new LinkedHashMap<>();\n            field.put(\"customData\", item.getCustomData());\n            field.put(\"id\", item.getId());\n            field.put(\"name\", item.getName());\n            field.put(\"type\", item.getType());\n            String defaultValue = item.getDefaultValue();\n            if (StringUtils.isNotBlank(defaultValue)) {\n                field.put(\"value\", JSON.parseObject(defaultValue));\n            }\n            fields.add(field);\n        });\n        return JSON.toJSONString(fields);\n    }\n\n    public void syncThirdPartyIssues(BiConsumer<Project, List<IssuesDao>> syncFuc, Project project, List<IssuesDao> issues) {\n        try {\n            syncFuc.accept(project, issues);\n        } catch (Exception e) {\n            LogUtil.error(e.getMessage(), e);\n        }\n    }\n\n    private String getConfig(String orgId, String platform) {\n        IntegrationRequest request = new IntegrationRequest();\n        if (StringUtils.isBlank(orgId)) {\n            MSException.throwException(\"organization id is null\");\n        }\n        request.setWorkspaceId(orgId);\n        request.setPlatform(platform);\n\n        ServiceIntegration integration = baseIntegrationService.get(request);\n        return integration.getConfiguration();\n    }\n\n    public String getLogDetails(String id) {\n        IssuesWithBLOBs issuesWithBLOBs = issuesMapper.selectByPrimaryKey(id);\n        if (issuesWithBLOBs != null) {\n            List<DetailColumn> columns = ReflexObjectUtil.getColumns(issuesWithBLOBs, TestPlanReference.issuesColumns);\n            OperatingLogDetails details = new OperatingLogDetails(JSON.toJSONString(issuesWithBLOBs.getId()), issuesWithBLOBs.getProjectId(), issuesWithBLOBs.getTitle(), issuesWithBLOBs.getCreator(), columns);\n            return JSON.toJSONString(details);\n        }\n        return null;\n    }\n\n    public String getLogDetails(IssuesUpdateRequest issuesRequest) {\n        if (issuesRequest != null) {\n            issuesRequest.setCreator(SessionUtils.getUserId());\n            List<DetailColumn> columns = ReflexObjectUtil.getColumns(issuesRequest, TestPlanReference.issuesColumns);\n            OperatingLogDetails details = new OperatingLogDetails(null, issuesRequest.getProjectId(), issuesRequest.getTitle(), issuesRequest.getCreator(), columns);\n            return JSON.toJSONString(details);\n        }\n        return null;\n    }\n\n    public List<IssuesDao> relateList(IssuesRequest request) {\n        return extIssuesMapper.getIssues(request);\n    }\n\n    public void userAuth(AuthUserIssueRequest authUserIssueRequest) {\n        IssuesRequest issuesRequest = new IssuesRequest();\n        issuesRequest.setWorkspaceId(authUserIssueRequest.getWorkspaceId());\n        IssuesPlatform abstractPlatform = IssueFactory.createPlatform(authUserIssueRequest.getPlatform(), issuesRequest);\n        abstractPlatform.userAuth(authUserIssueRequest);\n    }\n\n    public void calculatePlanReport(String planId, TestPlanSimpleReportDTO report) {\n        List<PlanReportIssueDTO> planReportIssueDTOS = extIssuesMapper.selectForPlanReport(planId);\n        planReportIssueDTOS = DistinctKeyUtil.distinctByKey(planReportIssueDTOS, PlanReportIssueDTO::getId);\n        TestPlanFunctionResultReportDTO functionResult = report.getFunctionResult();\n        List<TestCaseReportStatusResultDTO> statusResult = new ArrayList<>();\n        Map<String, TestCaseReportStatusResultDTO> statusResultMap = new HashMap<>();\n\n        planReportIssueDTOS.forEach(item -> {\n            String status;\n            // \u672c\u5730\u7f3a\u9677\n            if (StringUtils.equalsIgnoreCase(item.getPlatform(), IssuesManagePlatform.Local.name())\n                    || StringUtils.isBlank(item.getPlatform())) {\n                status = item.getStatus();\n            } else {\n                status = item.getPlatformStatus();\n            }\n            if (StringUtils.isBlank(status)) {\n                status = IssuesStatus.NEW.toString();\n            }\n            TestPlanStatusCalculator.buildStatusResultMap(statusResultMap, status);\n        });\n        Set<String> status = statusResultMap.keySet();\n        status.forEach(item -> {\n            TestPlanStatusCalculator.addToReportStatusResultList(statusResultMap, statusResult, item);\n        });\n        functionResult.setIssueData(statusResult);\n    }\n\n    public List<IssuesDao> getIssuesByPlanId(String planId) {\n        IssuesRequest issueRequest = new IssuesRequest();\n        issueRequest.setPlanId(planId);\n        List<IssuesDao> planIssues = extIssuesMapper.getPlanIssues(issueRequest);\n\n        buildCustomField(planIssues);\n\n        replaceStatus(planIssues, planId);\n        return DistinctKeyUtil.distinctByKey(planIssues, IssuesDao::getId);\n    }\n\n    /**\n     * \u83b7\u53d6\u7f3a\u9677\u72b6\u6001\u7684\u81ea\u5b9a\u4e49\u5b57\u6bb5\u66ff\u6362\n     *\n     * @param planIssues\n     * @param planId\n     */\n    private void replaceStatus(List<IssuesDao> planIssues, String planId) {\n        TestPlanWithBLOBs testPlan = testPlanService.get(planId);\n        CustomField customField = baseCustomFieldService.getCustomFieldByName(testPlan.getProjectId(), SystemCustomField.ISSUE_STATUS);\n        planIssues.forEach(issue -> {\n            List<CustomFieldDao> fields = issue.getFields();\n            if (CollectionUtils.isNotEmpty(fields)) {\n                for (CustomFieldDao field : fields) {\n                    if (field.getId().equals(customField.getId())) {\n                        List<CustomFieldOptionDTO> options = JSON.parseArray(customField.getOptions(), CustomFieldOptionDTO.class);\n                        for (CustomFieldOptionDTO option : options) {\n                            String value = field.getValue();\n                            if (StringUtils.isNotBlank(value)) {\n                                value = (String) JSON.parseObject(value);\n                            }\n                            if (StringUtils.equals(option.getValue(), value)) {\n                                if (option.getSystem()) {\n                                    issue.setStatus(option.getValue());\n                                } else {\n                                    issue.setStatus(option.getText());\n                                }\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n        });\n    }\n\n    public void changeStatus(IssuesRequest request) {\n        String issuesId = request.getId();\n        String status = request.getStatus();\n        if (StringUtils.isBlank(issuesId) || StringUtils.isBlank(status)) {\n            return;\n        }\n        IssuesWithBLOBs issue = issuesMapper.selectByPrimaryKey(issuesId);\n        Project project = projectMapper.selectByPrimaryKey(issue.getProjectId());\n        if (project == null) {\n            return;\n        }\n        String templateId = project.getIssueTemplateId();\n        if (StringUtils.isNotBlank(templateId)) {\n            // \u6a21\u7248\u5bf9\u4e8e\u540c\u4e00\u4e2a\u7cfb\u7edf\u5b57\u6bb5\u5e94\u8be5\u53ea\u5173\u8054\u4e00\u6b21\n            CustomField customField = baseCustomFieldService.getCustomFieldByName(issue.getProjectId(), SystemCustomField.ISSUE_STATUS);\n            if (customField != null) {\n                String fieldId = customField.getId();\n                CustomFieldResourceDTO resource = new CustomFieldResourceDTO();\n                resource.setFieldId(fieldId);\n                resource.setResourceId(issue.getId());\n                resource.setValue(JSON.toJSONString(status));\n                customFieldIssuesService.editFields(issue.getId(), Collections.singletonList(resource));\n            }\n        }\n    }\n\n    public List<IssuesStatusCountDao> getCountByStatus(IssuesCountRequest request) {\n        request.setCreator(SessionUtils.getUserId());\n        List<IssuesStatusCountDao> countByStatus = extIssuesMapper.getCountByStatus(request);\n        countByStatus.forEach(item -> {\n            if (StringUtils.isBlank(item.getStatusValue())) {\n                item.setStatusValue(IssuesStatus.NEW.toString());\n            } else {\n                item.setStatusValue(item.getStatusValue().replace(\"\\\"\", StringUtils.EMPTY));\n            }\n        });\n        return countByStatus;\n    }\n\n    public List<String> getFollows(String issueId) {\n        List<String> result = new ArrayList<>();\n        if (StringUtils.isBlank(issueId)) {\n            return result;\n        }\n        IssueFollowExample example = new IssueFollowExample();\n        example.createCriteria().andIssueIdEqualTo(issueId);\n        List<IssueFollow> follows = issueFollowMapper.selectByExample(example);\n        if (follows == null || follows.size() == 0) {\n            return result;\n        }\n        result = follows.stream().map(IssueFollow::getFollowId).distinct().collect(Collectors.toList());\n        return result;\n    }\n\n    public List<IssuesWithBLOBs> getIssuesByPlatformIds(List<String> platformIds, String projectId) {\n\n        if (CollectionUtils.isEmpty(platformIds)) return new ArrayList<>();\n        IssuesExample example = new IssuesExample();\n        example.createCriteria()\n                .andPlatformIdIn(platformIds)\n                .andProjectIdEqualTo(projectId);\n        return issuesMapper.selectByExampleWithBLOBs(example);\n    }\n\n    public IssueTemplateDao getThirdPartTemplate(String projectId) {\n        IssueTemplateDao issueTemplateDao = new IssueTemplateDao();\n        if (StringUtils.isNotBlank(projectId)) {\n            Project project = baseProjectService.getProjectById(projectId);\n            List<PlatformCustomFieldItemDTO> thirdPartCustomField = platformPluginService.getPlatform(project.getPlatform(), project.getWorkspaceId())\n                    .getThirdPartCustomField(PlatformPluginService.getCompatibleProjectConfig(project));\n            List<CustomFieldDao> customFieldDaoList = JSON.parseArray(JSON.toJSONString(thirdPartCustomField), CustomFieldDao.class);\n            issueTemplateDao.setCustomFields(customFieldDaoList);\n            issueTemplateDao.setPlatform(project.getPlatform());\n        }\n        return issueTemplateDao;\n    }\n\n    public IssuesRequest getDefaultIssueRequest(String projectId, String workspaceId) {\n        IssuesRequest issuesRequest = new IssuesRequest();\n        issuesRequest.setProjectId(projectId);\n        issuesRequest.setWorkspaceId(workspaceId);\n        return issuesRequest;\n    }\n\n    public List getDemandList(String projectId) {\n        Project project = baseProjectService.getProjectById(projectId);\n        String workspaceId = project.getWorkspaceId();\n\n        if (PlatformPluginService.isPluginPlatform(project.getPlatform())) {\n            return platformPluginService.getPlatform(project.getPlatform())\n                    .getDemands(PlatformPluginService.getCompatibleProjectConfig(project));\n        } else {\n            IssuesRequest issueRequest = new IssuesRequest();\n            issueRequest.setWorkspaceId(workspaceId);\n            issueRequest.setProjectId(projectId);\n            IssuesPlatform platform = IssueFactory.createPlatform(project.getPlatform(), issueRequest);\n            return platform.getDemandList(projectId);\n        }\n    }\n\n    public List<IssuesDao> listByWorkspaceId(IssuesRequest request) {\n        request.setOrders(ServiceUtils.getDefaultOrderByField(request.getOrders(), \"create_time\"));\n        return extIssuesMapper.getIssues(request);\n    }\n\n    public List<PlatformStatusDTO> getPlatformTransitions(PlatformIssueTypeRequest request) {\n        List<PlatformStatusDTO> platformStatusDTOS = new ArrayList<>();\n\n        if (!StringUtils.isBlank(request.getPlatformKey())) {\n            Project project = baseProjectService.getProjectById(request.getProjectId());\n            String platform = project.getPlatform();\n            if (PlatformPluginService.isPluginPlatform(platform)) {\n                return platformPluginService.getPlatform(platform)\n                        .getStatusList(request.getPlatformKey())\n                        .stream().map(item -> {\n                            PlatformStatusDTO platformStatusDTO = new PlatformStatusDTO();\n                            platformStatusDTO.setLabel(item.getLabel());\n                            platformStatusDTO.setValue(item.getValue());\n                            return platformStatusDTO;\n                        })\n                        .collect(Collectors.toList());\n            } else {\n                List<String> platforms = getPlatforms(project);\n                if (CollectionUtils.isEmpty(platforms)) {\n                    return platformStatusDTOS;\n                }\n\n                IssuesRequest issuesRequest = getDefaultIssueRequest(request.getProjectId(), request.getWorkspaceId());\n                return IssueFactory.createPlatform(platform, issuesRequest).getTransitions(request.getPlatformKey());\n            }\n        }\n        return platformStatusDTOS;\n    }\n\n    public boolean isThirdPartTemplate(Project project) {\n        return project.getThirdPartTemplate() != null\n                && project.getThirdPartTemplate()\n                && PlatformPluginService.isPluginPlatform(project.getPlatform());\n    }\n\n    public void checkThirdProjectExist(Project project) {\n        IssuesRequest issuesRequest = new IssuesRequest();\n        if (StringUtils.isBlank(project.getId())) {\n            MSException.throwException(\"project ID cannot be empty\");\n        }\n        issuesRequest.setProjectId(project.getId());\n        issuesRequest.setWorkspaceId(project.getWorkspaceId());\n        if (StringUtils.equalsIgnoreCase(project.getPlatform(), IssuesManagePlatform.Tapd.name())) {\n            TapdPlatform tapd = new TapdPlatform(issuesRequest);\n            this.doCheckThirdProjectExist(tapd, project.getTapdId());\n        } else if (StringUtils.equalsIgnoreCase(project.getPlatform(), IssuesManagePlatform.Zentao.name())) {\n            ZentaoPlatform zentao = new ZentaoPlatform(issuesRequest);\n            this.doCheckThirdProjectExist(zentao, project.getZentaoId());\n        }\n    }\n\n    public void issueImportTemplate(String projectId, HttpServletResponse response) {\n        Map<String, String> userMap = baseUserService.getProjectMemberOption(projectId).stream().collect(Collectors.toMap(User::getId, User::getName));\n        // \u83b7\u53d6\u7f3a\u9677\u6a21\u677f\u53ca\u81ea\u5b9a\u4e49\u5b57\u6bb5\n        IssueTemplateDao issueTemplate = getIssueTemplateByProjectId(projectId);\n        List<CustomFieldDao> customFields = Optional.ofNullable(issueTemplate.getCustomFields()).orElse(new ArrayList<>());\n        // \u6839\u636e\u81ea\u5b9a\u4e49\u5b57\u6bb5\u83b7\u53d6\u8868\u5934\n        List<List<String>> heads = new IssueExcelDataFactory().getIssueExcelDataLocal().getHead(issueTemplate.getIsThirdTemplate(), customFields, null);\n        // \u5bfc\u51fa\u7a7a\u6a21\u677f, heads->\u8868\u5934, headHandler->\u8868\u5934\u5904\u7406\n        IssueTemplateHeadWriteHandler headHandler = new IssueTemplateHeadWriteHandler(userMap, heads, issueTemplate.getCustomFields());\n        new EasyExcelExporter(new IssueExcelDataFactory().getExcelDataByLocal())\n                .exportByCustomWriteHandler(response, heads, null, Translator.get(\"issue_import_template_name\"),\n                        Translator.get(\"issue_import_template_sheet\"), headHandler);\n    }\n\n    public ExcelResponse issueImport(IssueImportRequest request, MultipartFile importFile) {\n        if (importFile == null) {\n            MSException.throwException(Translator.get(\"upload_fail\"));\n        }\n        Map<String, String> userMap = baseUserService.getProjectMemberOption(request.getProjectId()).stream().collect(Collectors.toMap(User::getId, User::getName));\n        // \u83b7\u53d6\u7f3a\u9677\u6a21\u677f\u53ca\u81ea\u5b9a\u4e49\u5b57\u6bb5\n        IssueTemplateDao issueTemplate = getIssueTemplateByProjectId(request.getProjectId());\n        List<CustomFieldDao> customFields = Optional.ofNullable(issueTemplate.getCustomFields()).orElse(new ArrayList<>());\n        // \u83b7\u53d6\u672c\u5730EXCEL\u6570\u636e\u5bf9\u8c61\n        Class clazz = new IssueExcelDataFactory().getExcelDataByLocal();\n        // IssueExcelListener\u8bfb\u53d6file\u5185\u5bb9\n        IssueExcelListener issueExcelListener = new IssueExcelListener(request, clazz, issueTemplate.getIsThirdTemplate(), customFields, userMap);\n        try {\n            EasyExcelFactory.read(importFile.getInputStream(), issueExcelListener).sheet().doRead();\n        } catch (IOException e) {\n            LogUtil.error(e.getMessage(), e);\n            e.printStackTrace();\n        }\n        // \u83b7\u53d6\u9519\u8bef\u4fe1\u606f\u5e76\u8fd4\u56de\n        List<ExcelErrData<IssueExcelData>> errList = issueExcelListener.getErrList();\n        ExcelResponse excelResponse = new ExcelResponse();\n        if (CollectionUtils.isNotEmpty(errList)) {\n            excelResponse.setErrList(errList);\n            excelResponse.setSuccess(Boolean.FALSE);\n        } else {\n            excelResponse.setSuccess(Boolean.TRUE);\n        }\n        return excelResponse;\n    }\n\n    public void issueExport(IssueExportRequest request, HttpServletResponse response) {\n        EasyExcelExporter.resetCellMaxTextLength();\n        Map<String, String> userMap = baseUserService.getProjectMemberOption(request.getProjectId()).stream().collect(Collectors.toMap(User::getId, User::getName));\n        // \u83b7\u53d6\u7f3a\u9677\u6a21\u677f\u53ca\u81ea\u5b9a\u4e49\u5b57\u6bb5\n        IssueTemplateDao issueTemplate = getIssueTemplateByProjectId(request.getProjectId());\n        List<CustomFieldDao> customFields = Optional.ofNullable(issueTemplate.getCustomFields()).orElse(new ArrayList<>());\n        // \u6839\u636e\u81ea\u5b9a\u4e49\u5b57\u6bb5\u83b7\u53d6\u8868\u5934\u5185\u5bb9\n        List<List<String>> heads = new IssueExcelDataFactory().getIssueExcelDataLocal().getHead(issueTemplate.getIsThirdTemplate(), customFields, request);\n        // \u83b7\u53d6\u5bfc\u51fa\u7f3a\u9677\u5217\u8868\n        List<IssuesDao> exportIssues = getExportIssues(request, issueTemplate.getIsThirdTemplate(), customFields);\n        // \u89e3\u6790issue\u5bf9\u8c61\u6570\u636e->excel\u5bf9\u8c61\u6570\u636e\n        List<IssueExcelData> excelDataList = parseIssueDataToExcelData(exportIssues);\n        // \u89e3\u6790excel\u5bf9\u8c61\u6570\u636e->excel\u5217\u8868\u6570\u636e\n        List<List<Object>> data = parseExcelDataToList(heads, excelDataList);\n        // \u5bfc\u51faEXCEL\n        IssueTemplateHeadWriteHandler headHandler = new IssueTemplateHeadWriteHandler(userMap, heads, issueTemplate.getCustomFields());\n        // heads-> \u8868\u5934\u5185\u5bb9, data -> \u5bfc\u51faEXCEL\u5217\u8868\u6570\u636e, headHandler -> \u8868\u5934\u5904\u7406\n        new EasyExcelExporter(new IssueExcelDataFactory().getExcelDataByLocal())\n                .exportByCustomWriteHandler(response, heads, data, Translator.get(\"issue_list_export_excel\"),\n                        Translator.get(\"issue_list_export_excel_sheet\"), headHandler);\n    }\n\n    public List<IssuesDao> getExportIssues(IssueExportRequest exportRequest, Boolean isThirdTemplate, List<CustomFieldDao> customFields) {\n        // \u6839\u636e\u5217\u8868\u6761\u4ef6\u83b7\u53d6\u7b26\u5408\u7f3a\u9677\u96c6\u5408\n        IssuesRequest request = new IssuesRequest();\n        request.setProjectId(exportRequest.getProjectId());\n        request.setWorkspaceId(exportRequest.getWorkspaceId());\n        request.setSelectAll(exportRequest.getIsSelectAll());\n        request.setExportIds(exportRequest.getExportIds());\n        // \u5217\u8868\u6392\u5e8f\n        request.setOrders(exportRequest.getOrders());\n        request.setOrders(ServiceUtils.getDefaultOrderByField(request.getOrders(), \"create_time\"));\n        request.getOrders().forEach(order -> {\n            if (StringUtils.isNotEmpty(order.getName()) && order.getName().startsWith(\"custom\")) {\n                request.setIsCustomSorted(true);\n                request.setCustomFieldId(order.getName().replace(\"custom_\", StringUtils.EMPTY));\n                order.setPrefix(\"cfi\");\n                order.setName(\"value\");\n            }\n        });\n        ServiceUtils.setBaseQueryRequestCustomMultipleFields(request);\n        List<IssuesDao> issues = extIssuesMapper.getIssues(request);\n\n        Map<String, Set<String>> caseSetMap = getCaseSetMap(issues);\n        Map<String, User> userMap = getUserMap(issues);\n        Map<String, String> planMap = getPlanMap(issues);\n        Map<String, List<IssueCommentDTO>> commentMap = getCommentMap(issues);\n\n        // \u8bbe\u7f6ecreator, caseCount, commnet\n        issues.forEach(item -> {\n            User createUser = userMap.get(item.getCreator());\n            if (createUser != null) {\n                item.setCreatorName(createUser.getName());\n            }\n            String resourceName = planMap.get(item.getResourceId());\n            if (StringUtils.isNotBlank(resourceName)) {\n                item.setResourceName(resourceName);\n            }\n\n            Set<String> caseIdSet = caseSetMap.get(item.getId());\n            if (caseIdSet == null) {\n                caseIdSet = new HashSet<>();\n            }\n            item.setCaseIds(new ArrayList<>(caseIdSet));\n            item.setCaseCount(caseIdSet.size());\n            List<IssueCommentDTO> commentDTOList = commentMap.get(item.getId());\n            if (CollectionUtils.isNotEmpty(commentDTOList) && commentDTOList.size() > 0) {\n                List<String> comments = commentDTOList.stream().map(IssueCommentDTO::getDescription).collect(Collectors.toList());\n                item.setComment(StringUtils.join(comments, \";\"));\n            }\n        });\n        // \u89e3\u6790\u81ea\u5b9a\u4e49\u5b57\u6bb5\n        buildCustomField(issues, isThirdTemplate, customFields);\n        return issues;\n    }\n\n    private List<IssueExcelData> parseIssueDataToExcelData(List<IssuesDao> exportIssues) {\n        List<IssueExcelData> excelDataList = new ArrayList<>();\n        for (int i = 0; i < exportIssues.size(); i++) {\n            IssuesDao issuesDao = exportIssues.get(i);\n            IssueExcelData excelData = new IssueExcelData();\n            BeanUtils.copyBean(excelData, issuesDao);\n            buildCustomData(issuesDao, excelData);\n            excelDataList.add(excelData);\n        }\n        return excelDataList;\n    }\n\n    private void buildCustomData(IssuesDao issuesDao, IssueExcelData excelData) {\n        if (CollectionUtils.isNotEmpty(issuesDao.getFields())) {\n            Map<String, Object> customData = new LinkedHashMap<>();\n            issuesDao.getFields().forEach(field -> {\n                customData.put(field.getName(), field.getValue());\n            });\n            excelData.setCustomData(customData);\n        }\n    }\n\n    private List<List<Object>> parseExcelDataToList(List<List<String>> heads, List<IssueExcelData> excelDataList) {\n        List<List<Object>> result = new ArrayList<>();\n        IssueExportHeadField[] exportHeadFields = IssueExportHeadField.values();\n        //\u8f6c\u5316excel\u5934\n        List<String> headList = new ArrayList<>();\n        for (List<String> list : heads) {\n            for (String head : list) {\n                headList.add(head);\n            }\n        }\n\n        for (IssueExcelData data : excelDataList) {\n            List<Object> rowData = new ArrayList<>();\n            Map<String, Object> customData = data.getCustomData();\n            for (String head : headList) {\n                boolean isSystemField = false;\n                for (IssueExportHeadField exportHeadField : exportHeadFields) {\n                    if (StringUtils.equals(head, exportHeadField.getName())) {\n                        rowData.add(exportHeadField.parseExcelDataValue(data));\n                        isSystemField = true;\n                        break;\n                    }\n                }\n                if (!isSystemField) {\n                    // \u81ea\u5b9a\u4e49\u5b57\u6bb5\n                    Object value = customData.get(head);\n                    if (value == null || StringUtils.equals(value.toString(), \"null\")) {\n                        value = StringUtils.EMPTY;\n                    }\n                    rowData.add(parseCustomFieldValue(value.toString()));\n                }\n            }\n            result.add(rowData);\n        }\n        return result;\n    }\n\n    private IssueTemplateDao getIssueTemplateByProjectId(String projectId) {\n        IssueTemplateDao issueTemplateDao;\n        Project project = baseProjectService.getProjectById(projectId);\n        if (PlatformPluginService.isPluginPlatform(project.getPlatform())\n                && project.getThirdPartTemplate()) {\n            // \u7b2c\u4e09\u65b9Jira\u5e73\u53f0\n            issueTemplateDao = getThirdPartTemplate(project.getId());\n            issueTemplateDao.setIsThirdTemplate(Boolean.TRUE);\n        } else {\n            issueTemplateDao = trackIssueTemplateService.getTemplate(projectId);\n            issueTemplateDao.setIsThirdTemplate(Boolean.FALSE);\n        }\n        return issueTemplateDao;\n    }\n\n    private void doCheckThirdProjectExist(AbstractIssuePlatform platform, String relateId) {\n        if (StringUtils.isBlank(relateId)) {\n            MSException.throwException(Translator.get(\"issue_project_not_exist\"));\n        }\n        Boolean exist = platform.checkProjectExist(relateId);\n        if (BooleanUtils.isFalse(exist)) {\n            MSException.throwException(Translator.get(\"issue_project_not_exist\"));\n        }\n    }\n\n    private List<IssuesDao> filterSyncIssuesByCreated(List<IssuesDao> issues, IssueSyncRequest syncRequest) {\n        List<IssuesDao> filterIssues = issues.stream().filter(issue -> {\n            if (syncRequest.isPre()) {\n                return issue.getCreateTime() <= syncRequest.getCreateTime();\n            } else {\n                return issue.getCreateTime() >= syncRequest.getCreateTime();\n            }\n        }).collect(Collectors.toList());\n        return filterIssues;\n    }\n\n    private void uploadAzureCopyAttachment(AttachmentRequest attachmentRequest, String platform, String platformId) {\n        List<String> attachmentIds = attachmentService.getAttachmentIdsByParam(attachmentRequest);\n        if (CollectionUtils.isNotEmpty(attachmentIds)) {\n            attachmentIds.forEach(attachmentId -> {\n                FileAttachmentMetadata fileAttachmentMetadata = attachmentService.getFileAttachmentMetadataByFileId(attachmentId);\n                File file = new File(fileAttachmentMetadata.getFilePath() + \"/\" + fileAttachmentMetadata.getName());\n                IssuesRequest createRequest = new IssuesRequest();\n                createRequest.setWorkspaceId(SessionUtils.getCurrentWorkspaceId());\n                createRequest.setProjectId(SessionUtils.getCurrentProjectId());\n                IssuesPlatform azurePlatform = Objects.requireNonNull(IssueFactory.createPlatform(platform, createRequest));\n                IssuesUpdateRequest uploadRequest = new IssuesUpdateRequest();\n                uploadRequest.setPlatformId(platformId);\n                azurePlatform.syncIssuesAttachment(uploadRequest, file, AttachmentSyncType.UPLOAD);\n            });\n        }\n    }\n\n    private String parseCustomFieldValue(String value) {\n        if (value.contains(\",\")) {\n            value = value.replaceAll(\",\", \";\");\n        }\n        if (value.contains(\"\\\"\")) {\n            value = value.replaceAll(\"\\\"\", StringUtils.EMPTY);\n        }\n        if (value.contains(\"[\") || value.contains(\"]\")) {\n            value = value.replaceAll(\"]\", StringUtils.EMPTY).replaceAll(\"\\\\[\", StringUtils.EMPTY);\n        }\n        return value;\n    }\n\n    private String parseOptionValue(String options, String tarVal) {\n        if (StringUtils.isEmpty(options) || StringUtils.isEmpty(tarVal)) {\n            return StringUtils.EMPTY;\n        }\n        List<Map> optionList = JSON.parseArray(options, Map.class);\n        for (Map option : optionList) {\n            String text = option.get(\"text\").toString();\n            String value = option.get(\"value\").toString();\n            if (StringUtils.containsIgnoreCase(tarVal, value)) {\n                tarVal = tarVal.replaceAll(value, text);\n            }\n        }\n        return tarVal;\n    }\n\n    public Issues checkIssueExist(Integer num, String projectId) {\n        IssuesExample example = new IssuesExample();\n        example.createCriteria().andNumEqualTo(num).andProjectIdEqualTo(projectId);\n        List<Issues> issues = issuesMapper.selectByExample(example);\n        return CollectionUtils.isNotEmpty(issues) && issues.size() > 0 ? issues.get(0) : null;\n    }\n\n    public void saveImportData(List<IssuesUpdateRequest> issues) {\n        issues.parallelStream().forEach(issue -> {\n            addIssues(issue, null);\n        });\n    }\n\n    public void updateImportData(List<IssuesUpdateRequest> issues) {\n        issues.parallelStream().forEach(issue -> {\n            updateIssues(issue);\n        });\n    }\n\n    public void setFilterIds(IssuesRequest request) {\n        List<String> issueIds = new ArrayList<>();\n        if (request.getThisWeekUnClosedTestPlanIssue()) {\n            issueIds = extIssuesMapper.getTestPlanThisWeekIssue(request.getProjectId());\n        } else if (request.getAllTestPlanIssue() || request.getUnClosedTestPlanIssue()) {\n            issueIds = extIssuesMapper.getTestPlanIssue(request.getProjectId());\n        } else {\n            issueIds = Collections.EMPTY_LIST;\n        }\n\n        Map<String, String> statusMap = customFieldIssuesService.getIssueStatusMap(issueIds, request.getProjectId());\n        if (MapUtils.isEmpty(statusMap) && CollectionUtils.isNotEmpty(issueIds)) {\n            // \u672a\u627e\u5230\u81ea\u5b9a\u4e49\u5b57\u6bb5\u72b6\u6001, \u5219\u83b7\u53d6\u5e73\u53f0\u72b6\u6001\n            IssuesRequest issuesRequest = new IssuesRequest();\n            issuesRequest.setProjectId(SessionUtils.getCurrentProjectId());\n            issuesRequest.setFilterIds(issueIds);\n            List<IssuesDao> issues = extIssuesMapper.getIssues(issuesRequest);\n            statusMap = issues.stream().collect(Collectors.toMap(IssuesDao::getId, i -> Optional.ofNullable(i.getPlatformStatus()).orElse(\"new\")));\n        }\n\n        if (MapUtils.isEmpty(statusMap)) {\n            request.setFilterIds(issueIds);\n        } else {\n            if (request.getThisWeekUnClosedTestPlanIssue() || request.getUnClosedTestPlanIssue()) {\n                CustomField customField = baseCustomFieldService.getCustomFieldByName(SessionUtils.getCurrentProjectId(), SystemCustomField.ISSUE_STATUS);\n                JSONArray statusArray = JSONArray.parseArray(customField.getOptions());\n                Map<String, String> tmpStatusMap = statusMap;\n                List<String> unClosedIds = issueIds.stream()\n                        .filter(id -> !StringUtils.equals(tmpStatusMap.getOrDefault(id, StringUtils.EMPTY).replaceAll(\"\\\"\", StringUtils.EMPTY), \"closed\"))\n                        .collect(Collectors.toList());\n                Iterator<String> iterator = unClosedIds.iterator();\n                while (iterator.hasNext()) {\n                    String unClosedId = iterator.next();\n                    String status = statusMap.getOrDefault(unClosedId, StringUtils.EMPTY).replaceAll(\"\\\"\", StringUtils.EMPTY);\n                    IssueStatus statusEnum = IssueStatus.getEnumByName(status);\n                    if (statusEnum == null) {\n                        boolean exist = false;\n                        for (int i = 0; i < statusArray.size(); i++) {\n                            JSONObject statusObj = (JSONObject) statusArray.get(i);\n                            if (StringUtils.equals(status, statusObj.get(\"value\").toString())) {\n                                exist = true;\n                            }\n                        }\n                        if (!exist) {\n                            iterator.remove();\n                        }\n                    }\n                }\n                request.setFilterIds(unClosedIds);\n            } else {\n                request.setFilterIds(issueIds);\n            }\n        }\n    }\n\n    public boolean thirdPartTemplateEnable(String projectId) {\n        Project project = baseProjectService.getProjectById(projectId);\n        return BooleanUtils.isTrue(project.getThirdPartTemplate())\n                && platformPluginService.isThirdPartTemplateSupport(project.getPlatform());\n    }\n\n    public boolean syncThirdPartyAllIssues(IssueSyncRequest syncRequest) {\n        syncRequest.setProjectId(syncRequest.getProjectId());\n        XpackIssueService xpackIssueService = CommonBeanFactory.getBean(XpackIssueService.class);\n        if (StringUtils.isNotBlank(syncRequest.getProjectId())) {\n            // \u83b7\u53d6\u5f53\u524d\u9879\u76ee\u6267\u884c\u540c\u6b65\u7f3a\u9677Key\n            String syncValue = getSyncKey(syncRequest.getProjectId());\n            // \u5b58\u5728\u5373\u6b63\u5728\u540c\u6b65\u4e2d\n            if (StringUtils.isNotEmpty(syncValue)) {\n                return false;\n            }\n            // \u4e0d\u5b58\u5728\u5219\u8bbe\u7f6eKey, \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4, \u6267\u884c\u5b8c\u6210\u540edelete\u6389\n            setSyncKey(syncRequest.getProjectId());\n\n            try {\n                Project project = baseProjectService.getProjectById(syncRequest.getProjectId());\n\n                if (!isThirdPartTemplate(project)) {\n                    syncRequest.setDefaultCustomFields(getDefaultCustomFields(syncRequest.getProjectId()));\n                }\n\n                xpackIssueService.syncThirdPartyIssues(project, syncRequest);\n\n                syncAllPluginIssueAttachment(project, syncRequest);\n            } catch (Exception e) {\n                LogUtil.error(e);\n                MSException.throwException(e);\n            } finally {\n                deleteSyncKey(syncRequest.getProjectId());\n            }\n        }\n        return true;\n    }\n}\n", "package io.metersphere.service;\n\nimport io.metersphere.commons.constants.IssuesManagePlatform;\nimport io.metersphere.commons.exception.MSException;\nimport io.metersphere.commons.utils.JSON;\nimport io.metersphere.i18n.Translator;\nimport io.metersphere.platform.api.Platform;\nimport io.metersphere.platform.api.PluginMetaInfo;\nimport io.metersphere.base.domain.PluginWithBLOBs;\nimport io.metersphere.base.domain.Project;\nimport io.metersphere.base.domain.ServiceIntegration;\nimport io.metersphere.commons.constants.PluginScenario;\nimport io.metersphere.commons.utils.SessionUtils;\nimport io.metersphere.platform.domain.PlatformRequest;\nimport io.metersphere.platform.domain.SelectOption;\nimport io.metersphere.platform.loader.PlatformPluginManager;\nimport io.metersphere.request.IntegrationRequest;\nimport io.metersphere.utils.PluginManagerUtil;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.annotation.Resource;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Service\n@Transactional(rollbackFor = Exception.class)\npublic class PlatformPluginService {\n\n    @Resource\n    private BasePluginService basePluginService;\n    @Resource\n    private BaseIntegrationService baseIntegrationService;\n\n    public static final String PLUGIN_DOWNLOAD_URL = \"https://github.com/metersphere/metersphere-platform-plugin\";\n\n    private PlatformPluginManager pluginManager;\n\n    public synchronized PlatformPluginManager getPluginManager() {\n        if (pluginManager == null) {\n            pluginManager = new PlatformPluginManager();\n        }\n        return pluginManager;\n    }\n\n    /**\n     * \u67e5\u8be2\u6240\u6709\u5e73\u53f0\u63d2\u4ef6\u5e76\u52a0\u8f7d\n     */\n    public void loadPlatFormPlugins() {\n        List<PluginWithBLOBs> plugins = basePluginService.getPlugins(PluginScenario.platform.name());\n        PluginManagerUtil.loadPlugins(getPluginManager(), plugins);\n    }\n\n    public void loadPlugin(String pluginId) {\n        if (getPluginManager().getClassLoader(pluginId) == null) {\n            // \u5982\u679c\u6ca1\u6709\u52a0\u8f7d\u624d\u52a0\u8f7d\n            InputStream pluginJar = basePluginService.getPluginJar(pluginId);\n            PluginManagerUtil.loadPlugin(pluginId, getPluginManager(), pluginJar);\n        }\n    }\n\n    /**\n     * \u5378\u8f7d\u63d2\u4ef6\n     * @param pluginId\n     */\n    public void unloadPlugin(String pluginId) {\n        getPluginManager().deletePlugin(pluginId);\n    }\n\n    public boolean isThirdPartTemplateSupport(String platform) {\n        if (StringUtils.isBlank(platform)) {\n            return false;\n        }\n        PluginMetaInfo pluginMetaInfo = pluginManager.getPluginMetaInfoByKey(platform);\n        if (PlatformPluginService.isPluginPlatform(platform) && pluginMetaInfo == null) {\n            MSException.throwException(Translator.get(\"platform_plugin_not_exit\") + PlatformPluginService.PLUGIN_DOWNLOAD_URL);\n        }\n        return pluginMetaInfo == null ? false : pluginMetaInfo.isThirdPartTemplateSupport();\n    }\n\n    public Platform getPlatform(String platformKey, String workspaceId) {\n        IntegrationRequest integrationRequest = new IntegrationRequest();\n        integrationRequest.setPlatform(platformKey);\n        integrationRequest.setWorkspaceId(StringUtils.isBlank(workspaceId) ? SessionUtils.getCurrentWorkspaceId() : workspaceId);\n        ServiceIntegration serviceIntegration = baseIntegrationService.get(integrationRequest);\n\n        PlatformRequest pluginRequest = new PlatformRequest();\n        pluginRequest.setIntegrationConfig(serviceIntegration.getConfiguration());\n        Platform platform = getPluginManager().getPlatformByKey(platformKey, pluginRequest);\n        if (platform == null) {\n            MSException.throwException(Translator.get(\"platform_plugin_not_exit\") + PLUGIN_DOWNLOAD_URL);\n        }\n        return platform;\n    }\n\n    public Platform getPlatform(String platformKey) {\n       return this.getPlatform(platformKey, null);\n    }\n\n\n    public static String getCompatibleProjectConfig(Project project) {\n        String issueConfig = project.getIssueConfig();\n        Map map = JSON.parseMap(issueConfig);\n        compatibleProjectKey(map, \"jiraKey\", project.getJiraKey());\n        compatibleProjectKey(map, \"tapdId\", project.getTapdId());\n        compatibleProjectKey(map, \"azureDevopsId\", project.getAzureDevopsId());\n        compatibleProjectKey(map, \"zentaoId\", project.getZentaoId());\n        map.put(\"thirdPartTemplate\", project.getThirdPartTemplate());\n        return JSON.toJSONString(map);\n    }\n\n    private static void compatibleProjectKey(Map map, String name, String compatibleValue) {\n        if (map.get(name) == null || StringUtils.isBlank(map.get(name).toString())) {\n            // \u5982\u679c\u914d\u7f6e\u91cc\u9762\u7f3a\u9677\u5bf9\u5e94\u5e73\u53f0\u7684\u9879\u76eeID\u5219\uff0c\u5373\u4f7f\u7528\u65e7\u6570\u636e\u7684\u9879\u76eeID\n            map.put(name, compatibleValue);\n        }\n    }\n\n    public static boolean isPluginPlatform(String platform) {\n        if (StringUtils.equalsAnyIgnoreCase(platform,\n                IssuesManagePlatform.Tapd.name(), IssuesManagePlatform.AzureDevops.name(),\n                IssuesManagePlatform.Zentao.name(), IssuesManagePlatform.Local.name())) {\n            return false;\n        }\n        return true;\n    }\n\n    public List<SelectOption> getPlatformOptions() {\n        List<SelectOption> options = getPluginManager().getPluginMetaInfoList()\n                .stream()\n                .map(pluginMetaInfo -> new SelectOption(pluginMetaInfo.getLabel(), pluginMetaInfo.getKey()))\n                .collect(Collectors.toList());\n        List<ServiceIntegration> integrations = baseIntegrationService.getAll(SessionUtils.getCurrentWorkspaceId());\n        // \u8fc7\u6ee4\u6389\u670d\u52a1\u96c6\u6210\u4e2d\u6ca1\u6709\u7684\u9009\u9879\n        return options.stream()\n                .filter(option ->\n                        integrations.stream()\n                                .filter(integration -> StringUtils.equals(integration.getPlatform(), option.getValue()))\n                                .collect(Collectors.toList()).size() > 0\n                )\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}\n", "package io.metersphere.service.issue.client;\n\nimport io.metersphere.commons.exception.MSException;\nimport io.metersphere.commons.utils.JSON;\nimport io.metersphere.commons.utils.LogUtil;\nimport io.metersphere.commons.utils.UnicodeConvertUtils;\nimport io.metersphere.i18n.Translator;\nimport io.metersphere.service.issue.domain.zentao.*;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.http.*;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\n\nimport java.io.File;\nimport java.util.Map;\n\npublic abstract class ZentaoClient extends BaseClient {\n\n    protected String ENDPOINT;\n\n    protected String USER_NAME;\n\n    protected String PASSWD;\n\n    public RequestUrl requestUrl;\n    protected String url;\n\n    public ZentaoClient(String url) {\n        ENDPOINT = url;\n    }\n\n    public String login() {\n        GetUserResponse getUserResponse = new GetUserResponse();\n        String sessionId = \"\";\n        try {\n            sessionId = getSessionId();\n            String loginUrl = requestUrl.getLogin();\n            MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n            paramMap.add(\"account\", USER_NAME);\n            paramMap.add(\"password\", PASSWD);\n            HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<>(paramMap, new HttpHeaders());\n            ResponseEntity<String> response = restTemplate.exchange(loginUrl + sessionId, HttpMethod.POST, requestEntity, String.class);\n            getUserResponse = (GetUserResponse) getResultForObject(GetUserResponse.class, response);\n        } catch (Exception e) {\n            LogUtil.error(e);\n            MSException.throwException(e.getMessage());\n        }\n        GetUserResponse.User user = getUserResponse.getUser();\n        if (user == null) {\n            LogUtil.error(JSON.toJSONString(getUserResponse));\n            // \u767b\u5f55\u5931\u8d25\uff0c\u83b7\u53d6\u7684session\u65e0\u6548\uff0c\u7f6e\u7a7asession\n            MSException.throwException(\"zentao login fail, user null\");\n        }\n        if (!StringUtils.equals(user.getAccount(), USER_NAME)) {\n            LogUtil.error(\"login fail\uff0cinconsistent users\");\n            MSException.throwException(\"zentao login fail, inconsistent user\");\n        }\n        return sessionId;\n    }\n\n    public String getSessionId() {\n        String getSessionUrl = requestUrl.getSessionGet();\n        ResponseEntity<String> response = restTemplate.exchange(getSessionUrl,\n                HttpMethod.GET, null, String.class);\n        GetSessionResponse getSessionResponse = (GetSessionResponse) getResultForObject(GetSessionResponse.class, response);\n        return JSON.parseObject(getSessionResponse.getData(), GetSessionResponse.Session.class).getSessionID();\n    }\n\n    public AddIssueResponse.Issue addIssue(MultiValueMap<String, Object> paramMap) {\n        String sessionId = login();\n        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(paramMap, new HttpHeaders());\n        ResponseEntity<String> response = null;\n        try {\n            String bugCreate = requestUrl.getBugCreate();\n            response = restTemplate.exchange(bugCreate + sessionId,\n                    HttpMethod.POST, requestEntity, String.class);\n        } catch (Exception e) {\n            LogUtil.error(e.getMessage(), e);\n            MSException.throwException(e.getMessage());\n        }\n        AddIssueResponse addIssueResponse = (AddIssueResponse) getResultForObject(AddIssueResponse.class, response);\n        AddIssueResponse.Issue issue = JSON.parseObject(addIssueResponse.getData(), AddIssueResponse.Issue.class);\n        if (issue == null) {\n            MSException.throwException(UnicodeConvertUtils.unicodeToCn(response.getBody()));\n        }\n        return issue;\n    }\n\n    public void updateIssue(String id, MultiValueMap<String, Object> paramMap) {\n        String sessionId = login();\n        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(paramMap, new HttpHeaders());\n        try {\n            restTemplate.exchange(requestUrl.getBugUpdate(),\n                    HttpMethod.POST, requestEntity, String.class, id, sessionId);\n        } catch (Exception e) {\n            LogUtil.error(e.getMessage(), e);\n            MSException.throwException(e.getMessage());\n        }\n    }\n\n    public void deleteIssue(String id) {\n        String sessionId = login();\n        try {\n            restTemplate.exchange(requestUrl.getBugDelete(),\n                    HttpMethod.GET, new HttpEntity<>(new HttpHeaders()), String.class, id, sessionId);\n        } catch (Exception e) {\n            LogUtil.error(e.getMessage(), e);\n            MSException.throwException(e.getMessage());\n        }\n    }\n\n    public Map getBugById(String id) {\n        String sessionId = login();\n        String bugGet = requestUrl.getBugGet();\n        ResponseEntity<String> response = restTemplate.exchange(bugGet,\n                HttpMethod.GET, null, String.class, id, sessionId);\n        GetIssueResponse getIssueResponse = (GetIssueResponse) getResultForObject(GetIssueResponse.class, response);\n        if(StringUtils.equalsIgnoreCase(getIssueResponse.getStatus(),\"fail\")){\n            GetIssueResponse.Issue issue = new GetIssueResponse.Issue();\n            issue.setId(id);\n            issue.setSteps(StringUtils.SPACE);\n            issue.setTitle(StringUtils.SPACE);\n            issue.setStatus(\"closed\");\n            issue.setDeleted(\"1\");\n            issue.setOpenedBy(StringUtils.SPACE);\n            getIssueResponse.setData(JSON.toJSONString(issue).toString());\n        }\n        return JSON.parseMap(getIssueResponse.getData());\n    }\n\n    public GetCreateMetaDataResponse.MetaData getCreateMetaData(String productID) {\n        String sessionId = login();\n        ResponseEntity<String> response = restTemplate.exchange(requestUrl.getCreateMetaData(),\n                HttpMethod.GET, null, String.class, productID, sessionId);\n        GetCreateMetaDataResponse getCreateMetaDataResponse = (GetCreateMetaDataResponse) getResultForObject(GetCreateMetaDataResponse.class, response);\n        return JSON.parseObject(getCreateMetaDataResponse.getData(), GetCreateMetaDataResponse.MetaData.class);\n    }\n\n    public Map getCustomFields(String productID) {\n        return getCreateMetaData(productID).getCustomFields();\n    }\n\n    public Map<String, Object> getBuildsByCreateMetaData(String projectId) {\n        return getCreateMetaData(projectId).getBuilds();\n    }\n\n    public Map<String, Object> getBuilds(String projectId) {\n        String sessionId = login();\n        ResponseEntity<String> response = restTemplate.exchange(requestUrl.getBuildsGet(),\n                HttpMethod.GET, null, String.class, projectId, sessionId);\n        return (Map<String, Object>) JSON.parseMap(response.getBody()).get(\"data\");\n    }\n\n    public Map getBugsByProjectId(String projectId, Integer pageNum, Integer pageSize) {\n        String sessionId = login();\n        ResponseEntity<String> response = restTemplate.exchange(requestUrl.getBugList(),\n                HttpMethod.GET, null, String.class, projectId, 9999999, pageSize, pageNum, sessionId);\n        try {\n            return JSON.parseMap(JSON.parseMap(response.getBody()).get(\"data\").toString());\n        } catch (Exception e) {\n            LogUtil.error(e);\n            MSException.throwException(\"\u8bf7\u68c0\u67e5\u914d\u7f6e\u4fe1\u606f\u662f\u5426\u586b\u5199\u6b63\u786e\uff01\");\n        }\n        return null;\n    }\n\n    public String getBaseUrl() {\n        if (ENDPOINT.endsWith(\"/\")) {\n            return ENDPOINT.substring(0, ENDPOINT.length() - 1);\n        }\n        return ENDPOINT;\n    }\n\n    public void setConfig(ZentaoConfig config) {\n        if (config == null) {\n            MSException.throwException(\"config is null\");\n        }\n        USER_NAME = config.getAccount();\n        PASSWD = config.getPassword();\n        ENDPOINT = config.getUrl();\n    }\n\n\n    public String getReplaceImgUrl(String replaceImgUrl) {\n        String baseUrl = getBaseUrl();\n        String[] split = baseUrl.split(\"/\");\n        String suffix = split[split.length - 1];\n        if (StringUtils.equals(\"biz\", suffix)) {\n            suffix = baseUrl;\n        } else if (!StringUtils.equalsAny(suffix, \"zentao\", \"pro\", \"zentaopms\", \"zentaopro\", \"zentaobiz\")) {\n            suffix = \"\";\n        } else {\n            suffix = \"/\" + suffix;\n        }\n        return String.format(replaceImgUrl, suffix);\n    }\n\n    public boolean checkProjectExist(String relateId) {\n        String sessionId = login();\n        ResponseEntity<String> response = restTemplate.exchange(requestUrl.getProductGet(),\n                HttpMethod.GET, null, String.class, relateId, sessionId);\n        try {\n            Object data = JSON.parseMap(response.getBody()).get(\"data\");\n            if (!StringUtils.equals((String) data, \"false\")) {\n                return true;\n            }\n        } catch (Exception e) {\n            LogUtil.error(\"checkProjectExist error: \" + response.getBody());\n        }\n        return false;\n    }\n\n    public void uploadAttachment(String objectType, String objectId, File file) {\n        String sessionId = login();\n        HttpHeaders authHeader = new HttpHeaders();\n        authHeader.setContentType(MediaType.parseMediaType(\"multipart/form-data; charset=UTF-8\"));\n\n        MultiValueMap<String, Object> paramMap = new LinkedMultiValueMap<>();\n        FileSystemResource fileResource = new FileSystemResource(file);\n        paramMap.add(\"files\", fileResource);\n        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(paramMap, authHeader);\n\n        try {\n            restTemplate.exchange(requestUrl.getFileUpload(), HttpMethod.POST, requestEntity,\n                    String.class, objectId, sessionId);\n        } catch (Exception e) {\n            LogUtil.info(\"upload zentao attachment error\");\n        }\n    }\n\n    public void deleteAttachment(String fileId) {\n        String sessionId = login();\n        try {\n            restTemplate.exchange(requestUrl.getFileDelete(), HttpMethod.GET, null, String.class, fileId, sessionId);\n        } catch (Exception e) {\n            LogUtil.info(\"delete zentao attachment error\");\n        }\n    }\n\n    public byte[] getAttachmentBytes(String fileId) {\n        String sessionId = login();\n        ResponseEntity<byte[]> response = restTemplate.exchange(requestUrl.getFileDownload(), HttpMethod.GET,\n                null, byte[].class, fileId, sessionId);\n        return response.getBody();\n    }\n}\n", "package io.metersphere.service.issue.platform;\n\nimport io.metersphere.base.domain.*;\nimport io.metersphere.base.mapper.AttachmentModuleRelationMapper;\nimport io.metersphere.base.mapper.IssuesMapper;\nimport io.metersphere.base.mapper.TestCaseIssuesMapper;\nimport io.metersphere.base.mapper.ext.ExtIssuesMapper;\nimport io.metersphere.commons.constants.CustomFieldType;\nimport io.metersphere.commons.constants.IssueRefType;\nimport io.metersphere.commons.constants.IssuesStatus;\nimport io.metersphere.commons.exception.MSException;\nimport io.metersphere.commons.utils.*;\nimport io.metersphere.dto.CustomFieldItemDTO;\nimport io.metersphere.dto.UserDTO;\nimport io.metersphere.request.IntegrationRequest;\nimport io.metersphere.service.*;\nimport io.metersphere.service.issue.domain.ProjectIssueConfig;\nimport io.metersphere.service.wapper.TrackProjectService;\nimport io.metersphere.service.wapper.UserService;\nimport io.metersphere.xpack.track.dto.*;\nimport io.metersphere.xpack.track.dto.request.IssuesRequest;\nimport io.metersphere.xpack.track.dto.request.IssuesUpdateRequest;\nimport io.metersphere.xpack.track.issue.IssuesPlatform;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.safety.Safelist;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.MultiValueMap;\n\nimport java.io.File;\nimport java.net.URLDecoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\npublic abstract class AbstractIssuePlatform implements IssuesPlatform {\n\n    protected BaseIntegrationService baseIntegrationService;\n    protected TestCaseIssueService testCaseIssueService;\n    protected TestCaseIssuesMapper testCaseIssuesMapper;\n    protected TrackProjectService trackProjectService;\n    protected TestCaseService testCaseService;\n    protected IssuesMapper issuesMapper;\n    protected ExtIssuesMapper extIssuesMapper;\n    protected ResourceService resourceService;\n    protected UserService userService;\n    protected String testCaseId;\n    protected String projectId;\n    protected String key;\n    protected String workspaceId;\n    protected String userId;\n    protected String defaultCustomFields;\n    protected boolean isThirdPartTemplate;\n    protected CustomFieldIssuesService customFieldIssuesService;\n    protected BaseCustomFieldService baseCustomFieldService;\n    protected IssuesService issuesService;\n    protected FileService fileService;\n    protected AttachmentService attachmentService;\n    protected AttachmentModuleRelationMapper attachmentModuleRelationMapper;\n    protected BaseProjectService baseProjectService;\n\n    public String getKey() {\n        return key;\n    }\n\n    public AbstractIssuePlatform(IssuesRequest issuesRequest) {\n        this();\n        this.testCaseId = issuesRequest.getTestCaseId();\n        this.projectId = issuesRequest.getProjectId();\n        this.workspaceId = issuesRequest.getWorkspaceId();\n        this.userId = issuesRequest.getUserId();\n        this.defaultCustomFields = issuesRequest.getDefaultCustomFields();\n    }\n\n    public AbstractIssuePlatform() {\n        this.baseIntegrationService = CommonBeanFactory.getBean(BaseIntegrationService.class);\n        this.testCaseIssuesMapper = CommonBeanFactory.getBean(TestCaseIssuesMapper.class);\n        this.trackProjectService = CommonBeanFactory.getBean(TrackProjectService.class);\n        this.testCaseService = CommonBeanFactory.getBean(TestCaseService.class);\n        this.userService = CommonBeanFactory.getBean(UserService.class);\n        this.issuesMapper = CommonBeanFactory.getBean(IssuesMapper.class);\n        this.extIssuesMapper = CommonBeanFactory.getBean(ExtIssuesMapper.class);\n        this.resourceService = CommonBeanFactory.getBean(ResourceService.class);\n        this.testCaseIssueService = CommonBeanFactory.getBean(TestCaseIssueService.class);\n        this.customFieldIssuesService = CommonBeanFactory.getBean(CustomFieldIssuesService.class);\n        this.baseCustomFieldService = CommonBeanFactory.getBean(BaseCustomFieldService.class);\n        this.issuesService = CommonBeanFactory.getBean(IssuesService.class);\n        this.fileService = CommonBeanFactory.getBean(FileService.class);\n        this.attachmentService = CommonBeanFactory.getBean(AttachmentService.class);\n        this.attachmentModuleRelationMapper = CommonBeanFactory.getBean(AttachmentModuleRelationMapper.class);\n        this.baseProjectService = CommonBeanFactory.getBean(BaseProjectService.class);\n    }\n\n    // xpack \u53cd\u5c04\u8c03\u7528\n    public String getProjectId() {\n        return projectId;\n    }\n\n    protected String getPlatformConfig(String platform) {\n        IntegrationRequest request = new IntegrationRequest();\n        if (StringUtils.isBlank(workspaceId)) {\n            MSException.throwException(\"workspace id is null\");\n        }\n        request.setWorkspaceId(workspaceId);\n        request.setPlatform(platform);\n\n        ServiceIntegration integration = baseIntegrationService.get(request);\n        return integration.getConfiguration();\n    }\n\n    protected HttpHeaders auth(String apiUser, String password) {\n        String authKey = EncryptUtils.base64Encoding(apiUser + \":\" + password);\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"Authorization\", \"Basic \" + authKey);\n        return headers;\n    }\n\n    /**\n     * \u83b7\u53d6\u5e73\u53f0\u4e0e\u9879\u76ee\u76f8\u5173\u7684\u5c5e\u6027\n     *\n     * @return \u5176\u4ed6\u5e73\u53f0\u548c\u672c\u5730\u9879\u76ee\u7ed1\u5b9a\u7684\u5c5e\u6027\u503c\n     */\n    public abstract String getProjectId(String projectId);\n\n    public String getProjectId(String projectId, Function<Project, String> getProjectKeyFuc) {\n        return getProjectKeyFuc.apply(getProject(projectId, getProjectKeyFuc));\n    }\n\n    public Project getProject(String projectId,  Function<Project, String> getProjectKeyFuc) {\n        Project project;\n        if (StringUtils.isNotBlank(projectId)) {\n            project = baseProjectService.getProjectById(projectId);\n        } else {\n            TestCaseWithBLOBs testCase = testCaseService.getTestCase(testCaseId);\n            project = baseProjectService.getProjectById(testCase.getProjectId());\n        }\n        String projectKey = getProjectKeyFuc.apply(project);\n        if (StringUtils.isBlank(projectKey)) {\n            MSException.throwException(\"\u8bf7\u5728\u9879\u76ee\u8bbe\u7f6e\u914d\u7f6e \" + key + \"\u9879\u76eeID\");\n        }\n        return project;\n    }\n\n    public ProjectIssueConfig getProjectConfig(String configStr) {\n        ProjectIssueConfig issueConfig;\n        if (StringUtils.isNotBlank(configStr)) {\n            issueConfig = JSON.parseObject(configStr, ProjectIssueConfig.class);\n        } else {\n            issueConfig = new ProjectIssueConfig();\n        }\n        return issueConfig;\n    }\n\n    protected void handleIssueUpdate(IssuesUpdateRequest request) {\n        request.setUpdateTime(System.currentTimeMillis());\n        issuesMapper.updateByPrimaryKeySelective(request);\n        handleTestCaseIssues(request);\n    }\n\n    protected void handleTestCaseIssues(IssuesUpdateRequest issuesRequest) {\n        issuesService.handleTestCaseIssues(issuesRequest);\n    }\n\n    protected void insertIssuesWithoutContext(String id, IssuesUpdateRequest issuesRequest) {\n        IssuesWithBLOBs issues = new IssuesWithBLOBs();\n        issues.setId(id);\n        issues.setPlatform(issuesRequest.getPlatform());\n        issues.setProjectId(issuesRequest.getProjectId());\n        issues.setCustomFields(issuesRequest.getCustomFields());\n        issues.setCreator(issuesRequest.getCreator());\n        issues.setCreateTime(System.currentTimeMillis());\n        issues.setUpdateTime(System.currentTimeMillis());\n        issues.setNum(getNextNum(issuesRequest.getProjectId()));\n        issues.setResourceId(issuesRequest.getResourceId());\n        issuesMapper.insert(issues);\n    }\n\n    protected IssuesWithBLOBs insertIssues(IssuesUpdateRequest issuesRequest) {\n        IssuesWithBLOBs issues = new IssuesWithBLOBs();\n        BeanUtils.copyBean(issues, issuesRequest);\n        issues.setId(issuesRequest.getId());\n        issues.setPlatformId(issuesRequest.getPlatformId());\n        issues.setCreateTime(System.currentTimeMillis());\n        issues.setUpdateTime(System.currentTimeMillis());\n        issues.setNum(getNextNum(issuesRequest.getProjectId()));\n        issues.setPlatformStatus(issuesRequest.getPlatformStatus());\n        issues.setCreator(SessionUtils.getUserId());\n        issuesMapper.insert(issues);\n        return issues;\n    }\n\n    protected int getNextNum(String projectId) {\n        Issues issue = extIssuesMapper.getNextNum(projectId);\n        if (issue == null || issue.getNum() == null) {\n            return 100001;\n        } else {\n            return Optional.of(issue.getNum() + 1).orElse(100001);\n        }\n    }\n\n    /**\n     * \u5c06html\u683c\u5f0f\u7684\u7f3a\u9677\u63cf\u8ff0\u8f6c\u6210ms\u5e73\u53f0\u7684\u683c\u5f0f\n     *\n     * @param htmlDesc\n     * @return\n     */\n    protected String htmlDesc2MsDesc(String htmlDesc) {\n        String desc = htmlImg2MsImg(htmlDesc);\n        Document document = Jsoup.parse(desc);\n        document.outputSettings(new Document.OutputSettings().prettyPrint(false));\n        document.select(\"br\").append(\"\\\\n\");\n        document.select(\"p\").prepend(\"\\\\n\\\\n\");\n        desc = document.html().replaceAll(\"\\\\\\\\n\", StringUtils.LF);\n        desc = Jsoup.clean(desc, \"\", Safelist.none(), new Document.OutputSettings().prettyPrint(false));\n        return desc.replace(\"&nbsp;\", \"\");\n    }\n\n    protected String msImg2HtmlImg(String input, String endpoint) {\n        // ![\u4e2d\u5fc3\u4e3b\u9898.png](/resource/md/get/a0b19136_\u4e2d\u5fc3\u4e3b\u9898.png) -> <img src=\"xxx/resource/md/get/a0b19136_\u4e2d\u5fc3\u4e3b\u9898.png\"/>\n        String regex = \"(\\\\!\\\\[.*?\\\\]\\\\((.*?)\\\\))\";\n        Pattern pattern = Pattern.compile(regex);\n        if (StringUtils.isBlank(input)) {\n            return \"\";\n        }\n        Matcher matcher = pattern.matcher(input);\n        String result = input;\n        while (matcher.find()) {\n            String path = matcher.group(2);\n            if (endpoint.endsWith(\"/\")) {\n                endpoint = endpoint.substring(0, endpoint.length() - 1);\n            }\n            path = \" <img src=\\\"\" + endpoint + path + \"\\\"/>\";\n            result = matcher.replaceFirst(path);\n            matcher = pattern.matcher(result);\n        }\n        return result;\n    }\n\n    protected String removeImage(String input) {\n        String regex = \"(\\\\!\\\\[.*?\\\\]\\\\((.*?)\\\\))\";\n        if (StringUtils.isBlank(input)) {\n            return \"\";\n        }\n        Matcher matcher = Pattern.compile(regex).matcher(input);\n        while (matcher.find()) {\n            matcher.group();\n            return matcher.replaceAll(\"\");\n        }\n        return input;\n    }\n\n    protected String getImages(String input) {\n        String result = \"\";\n        String regex = \"(\\\\!\\\\[.*?\\\\]\\\\((.*?)\\\\))\";\n        if (StringUtils.isBlank(input)) {\n            return result;\n        }\n        Matcher matcher = Pattern.compile(regex).matcher(input);\n        while (matcher.find()) {\n            result += matcher.group();\n        }\n        return result;\n    }\n\n    protected String htmlImg2MsImg(String input) {\n        // <img src=\"xxx/resource/md/get/a0b19136_\u4e2d\u5fc3\u4e3b\u9898.png\"/> ->  ![\u4e2d\u5fc3\u4e3b\u9898.png](/resource/md/get/a0b19136_\u4e2d\u5fc3\u4e3b\u9898.png)\n        String regex = \"(<img\\\\s*src=\\\\\\\"(.*?)\\\\\\\".*?>)\";\n        Pattern pattern = Pattern.compile(regex);\n        if (StringUtils.isBlank(input)) {\n            return \"\";\n        }\n        Matcher matcher = pattern.matcher(input);\n        String result = input;\n        while (matcher.find()) {\n            String url = matcher.group(2);\n            if (url.contains(\"/resource/md/get/\")) { // \u517c\u5bb9\u65e7\u6570\u636e\n                String path = url.substring(url.indexOf(\"/resource/md/get/\"));\n                String name = path.substring(path.indexOf(\"/resource/md/get/\") + 26);\n                String mdLink = \"![\" + name + \"](\" + path + \")\";\n                result = matcher.replaceFirst(mdLink);\n                matcher = pattern.matcher(result);\n            } else if(url.contains(\"/resource/md/get\")) { //\u65b0\u6570\u636e\u8d70\u8fd9\u91cc\n                String path = url.substring(url.indexOf(\"/resource/md/get\"));\n                String name = path.substring(path.indexOf(\"/resource/md/get\") + 35);\n                String mdLink = \"![\" + name + \"](\" + path + \")\";\n                result = matcher.replaceFirst(mdLink);\n                matcher = pattern.matcher(result);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * \u8f6c\u8bd1\u5b57\u7b26\u4e32\u4e2d\u7684\u7279\u6b8a\u5b57\u7b26\n     * @param str\n     * @return\n     */\n    protected String transferSpecialCharacter(String str) {\n        String regEx=\"[`~!@#$%^&*()+=|{}':;',\\\\[\\\\].<>/?~\uff01@#\uffe5%\u2026\u2026&*\uff08\uff09\u2014\u2014+|{}\u3010\u3011\u2018\uff1b\uff1a\u201d\u201c\u2019\u3002\uff0c\u3001\uff1f]\";\n        Pattern pattern = Pattern.compile(regEx);\n        Matcher matcher = pattern.matcher(str);\n        if(matcher.find()){\n            CharSequence cs = str;\n            int j =0;\n            for(int i=0; i< cs.length(); i++){\n                String temp = String.valueOf(cs.charAt(i));\n                Matcher m2 = pattern.matcher(temp);\n                if(m2.find()){\n                    StringBuilder sb = new StringBuilder(str);\n                    str = sb.insert(j, \"\\\\\").toString();\n                    j++;\n                }\n                j++; //\u8f6c\u4e49\u5b8c\u6210\u540estr\u7684\u957f\u5ea6\u589e1\n            }\n        }\n        return str;\n    }\n\n    public List<File> getImageFiles(String input) {\n        List<File> files = new ArrayList<>();\n        String regex = \"(\\\\!\\\\[.*?\\\\]\\\\((.*?)\\\\))\";\n        Pattern pattern = Pattern.compile(regex);\n        if (StringUtils.isBlank(input)) {\n            return new ArrayList<>();\n        }\n        Matcher matcher = pattern.matcher(input);\n        while (matcher.find()) {\n            try {\n                String path = matcher.group(2);\n                if (!path.contains(\"/resource/md/get/url\")) {\n                    if (path.contains(\"/resource/md/get/\")) { // \u517c\u5bb9\u65e7\u6570\u636e\n                        String name = path.substring(path.indexOf(\"/resource/md/get/\") + 17);\n                        files.add(new File(FileUtils.MD_IMAGE_DIR + \"/\" + name));\n                    } else if (path.contains(\"/resource/md/get\")) { // \u65b0\u6570\u636e\u8d70\u8fd9\u91cc\n                        String name = path.substring(path.indexOf(\"/resource/md/get\") + 26);\n                        files.add(new File(FileUtils.MD_IMAGE_DIR + \"/\" + URLDecoder.decode(name, StandardCharsets.UTF_8.name())));\n                    }\n                }\n            } catch (Exception e) {\n                LogUtil.error(e.getMessage(), e);\n            }\n        }\n        return files;\n    }\n\n    protected UserDTO.PlatformInfo getUserPlatInfo(String workspaceId) {\n        return userService.getCurrentPlatformInfo(workspaceId);\n    }\n\n    @Override\n    public void deleteIssue(String id) {\n        IssuesService issuesService = CommonBeanFactory.getBean(IssuesService.class);\n        issuesService.deleteIssue(id);\n    }\n\n    protected void addCustomFields(IssuesUpdateRequest issuesRequest, MultiValueMap<String, Object> paramMap) {\n        List<CustomFieldItemDTO> customFields = issuesRequest.getRequestFields();\n        if (!CollectionUtils.isEmpty(customFields)) {\n            customFields.forEach(item -> {\n                if (StringUtils.isNotBlank(item.getCustomData())) {\n                    if (item.getValue() instanceof String) {\n                        paramMap.add(item.getCustomData(), ((String) item.getValue()).trim());\n                    } else {\n                        paramMap.add(item.getCustomData(), item.getValue());\n                    }\n                }\n            });\n        }\n    }\n\n    protected Object getSyncJsonParamValue(Object value) {\n        Map valObj = ((Map) value);\n        String accountId = Optional.ofNullable(valObj.get(\"accountId\")).orElse(\"\").toString();\n        Map child = (Map) valObj.get(\"child\");\n        if (child != null) {// \u7ea7\u8054\u6846\n            List<Object> values = new ArrayList<>();\n            String id = Optional.ofNullable(valObj.get(\"id\")).orElse(\"\").toString();\n            if (StringUtils.isNotBlank(id))  {\n                values.add(valObj.get(\"id\"));\n            }\n            if (StringUtils.isNotBlank(id))  {\n                values.add(child.get(\"id\"));\n            }\n            return values;\n        } else if (StringUtils.isNotBlank(accountId) && isThirdPartTemplate) {\n            // \u7528\u6237\u9009\u62e9\u6846\n            return accountId;\n        } else {\n            String id = Optional.ofNullable(valObj.get(\"id\")).orElse(\"\").toString();\n            if (StringUtils.isNotBlank(id)) {\n                return valObj.get(\"id\");\n            } else {\n                return valObj.get(\"key\");\n            }\n        }\n    }\n\n    protected String syncIssueCustomField(String customFieldsStr, Map issue) {\n        List<CustomFieldItemDTO> customFieldItemDTOList = syncIssueCustomFieldList(customFieldsStr, issue);\n        return JSON.toJSONString(customFieldItemDTOList);\n    }\n\n    protected List<CustomFieldItemDTO> syncIssueCustomFieldList(String customFieldsStr, Map issue) {\n        List<CustomFieldItemDTO> customFields = BaseCustomFieldService.getCustomFields(customFieldsStr);\n        Set<String> names = issue.keySet();\n        customFields.forEach(item -> {\n            String fieldName = item.getCustomData();\n            Object value = issue.get(fieldName);\n            if (value != null) {\n                if (value instanceof Map) {\n                    item.setValue(getSyncJsonParamValue(value));\n                    if (StringUtils.equals(fieldName, \"assignee\")) {\n                        item.setValue(((Map) value).get(\"displayName\"));\n                    } else {\n                        item.setValue(getSyncJsonParamValue(value));\n                    }\n                } else if (value instanceof List) {\n                    // Sprint \u662f\u5355\u9009 \u540c\u6b65\u56de\u6765\u662f JSONArray\n                    if (StringUtils.equals(item.getType(), \"select\")) {\n                        if (((List) value).size() > 0) {\n                            Object o = ((List) value).get(0);\n                            if (o instanceof Map) {\n                                item.setValue(getSyncJsonParamValue(o));\n                            }\n                        }\n                    } else {\n                        List<Object> values = new ArrayList<>();\n                        ((List) value).forEach(attr -> {\n                            if (attr instanceof Map) {\n                                values.add(getSyncJsonParamValue(attr));\n                            } else {\n                                values.add(attr);\n                            }\n                        });\n                        item.setValue(values);\n                    }\n                } else {\n                    item.setValue(value);\n                }\n            } else if (names.contains(fieldName)) {\n                if (item.getType().equals(CustomFieldType.CHECKBOX.getValue())) {\n                    item.setValue(new ArrayList<>());\n                } else {\n                    item.setValue(null);\n                }\n            } else {\n                try {\n                    if (item.getValue() != null) {\n                        item.setValue(JSON.parseObject(item.getValue().toString()));\n                    }\n                } catch (Exception e) {\n                    LogUtil.error(e);\n                }\n            }\n        });\n        return customFields;\n    }\n\n    @Override\n    public void syncAllIssues(Project project, IssueSyncRequest syncRequest) {}\n\n    @Override\n    public IssueTemplateDao getThirdPartTemplate() {return null;}\n\n    protected List<IssuesWithBLOBs> getIssuesByPlatformIds(List<String> platformIds) {\n        IssuesService issuesService = CommonBeanFactory.getBean(IssuesService.class);\n        return issuesService.getIssuesByPlatformIds(platformIds, projectId);\n    }\n\n    protected Map<String, IssuesWithBLOBs> getUuIdMap(List<IssuesWithBLOBs> issues) {\n        HashMap<String, IssuesWithBLOBs> issueMap = new HashMap<>();\n        if (org.apache.commons.collections.CollectionUtils.isNotEmpty(issues)) {\n            issues.forEach(item -> issueMap.put(item.getPlatformId(), item));\n        }\n        return issueMap;\n    }\n\n    protected void deleteSyncIssue(List<String> ids) {\n        if (CollectionUtils.isEmpty(ids)) return;\n        IssuesExample example = new IssuesExample();\n        IssuesWithBLOBs issue = new IssuesWithBLOBs();\n        issue.setPlatformStatus(IssuesStatus.DELETE.toString());\n        example.createCriteria().andIdIn(ids);\n        issuesMapper.updateByExampleSelective(issue, example);\n    }\n\n    protected List<String> updateSyncDeleteIds(List<String> uuIds, List<String> syncDeleteIds, String platform) {\n        if (org.apache.commons.collections.CollectionUtils.isNotEmpty(uuIds)) {\n            // \u6bcf\u6b21\u83b7\u53d6\u4e0d\u5728\u5f53\u524d\u67e5\u8be2\u7684\u7f3a\u9677\u91cc\u7684 id\n            List<String> notInIds = extIssuesMapper.selectIdNotInUuIds(projectId, platform, uuIds);\n            if (syncDeleteIds == null) {\n                syncDeleteIds = notInIds;\n            } else {\n                // \u6c42\u4ea4\u96c6\uff0c\u5373\u4e0d\u5728\u6240\u6709\u67e5\u8be2\u91cc\u7684\u7f3a\u9677\uff0c\u5373\u8981\u5220\u9664\u7684\u7f3a\u9677\n                syncDeleteIds.retainAll(notInIds);\n            }\n        }\n        return syncDeleteIds;\n    }\n\n    protected void mergeCustomField(IssuesWithBLOBs issues, String defaultCustomField) {\n        if (StringUtils.isNotBlank(defaultCustomField)) {\n            List<CustomFieldItemDTO> customFields = extIssuesMapper.getIssueCustomField(issues.getId());\n            Map<String, CustomFieldItemDTO> fieldMap = customFields.stream()\n                    .collect(Collectors.toMap(CustomFieldItemDTO::getId, i -> i));\n\n            List<CustomFieldItemDTO> defaultFields = JSON.parseArray(defaultCustomField, CustomFieldItemDTO.class);\n            for (CustomFieldItemDTO defaultField : defaultFields) {\n                String id = defaultField.getId();\n                if (StringUtils.isBlank(id)) {\n                    defaultField.setId(defaultField.getKey());\n                }\n                if (fieldMap.keySet().contains(id)) {\n                    // \u8bbe\u7f6e\u7b2c\u4e09\u65b9\u5e73\u53f0\u7684\u5c5e\u6027\u540d\u79f0\n                    fieldMap.get(id).setCustomData(defaultField.getCustomData());\n                } else {\n                    // \u5982\u679c\u81ea\u5b9a\u4e49\u5b57\u6bb5\u91cc\u6ca1\u6709\u6a21\u677f\u65b0\u52a0\u7684\u5b57\u6bb5\uff0c\u5c31\u628a\u65b0\u5b57\u6bb5\u52a0\u4e0a\n                    customFields.add(defaultField);\n                }\n            }\n\n            // \u8fc7\u6ee4\u6ca1\u6709\u914d\u7f6e\u7b2c\u4e09\u65b9\u5b57\u6bb5\u540d\u79f0\u7684\u5b57\u6bb5\uff0c\u4e0d\u9700\u8981\u66f4\u65b0\n            customFields = customFields.stream()\n                    .filter(i -> StringUtils.isNotBlank(i.getCustomData()))\n                    .collect(Collectors.toList());\n            issues.setCustomFields(JSON.toJSONString(customFields));\n        }\n    }\n\n    // \u7f3a\u9677\u5bf9\u8c61\u5e26\u6709\u81ea\u5b9a\u4e49\u5b57\u6bb5\u6570\u636e\n    protected void mergeIfIssueWithCustomField(IssuesWithBLOBs issue, String defaultCustomField) {\n        if (StringUtils.isBlank(defaultCustomFields)) {\n            return;\n        }\n        List<Map> fields = JSON.parseArray(issue.getCustomFields());\n        Set<String> ids = fields.stream()\n                .map(i -> i.get(\"id\").toString())\n                .collect(Collectors.toSet());\n\n        List<Map> defaultFields = JSON.parseArray(defaultCustomField);\n        defaultFields.forEach(item -> { // \u5982\u679c\u81ea\u5b9a\u4e49\u5b57\u6bb5\u91cc\u6ca1\u6709\u6a21\u677f\u65b0\u52a0\u7684\u5b57\u6bb5\uff0c\u5c31\u628a\u65b0\u5b57\u6bb5\u52a0\u4e0a\n            String id = item.get(\"id\").toString();\n            if (StringUtils.isBlank(id)) {\n                id = item.get(\"key\").toString();\n                item.put(\"id\", id);\n            }\n            if (!ids.contains(id)) {\n                fields.add(item);\n            }\n        });\n        issue.setCustomFields(JSON.toJSONString(fields));\n    }\n\n    public <T> T getConfig(String platform, Class<T> clazz) {\n        String config = getPlatformConfig(platform);\n        if (StringUtils.isBlank(config)) {\n            MSException.throwException(\"\u914d\u7f6e\u4e3a\u7a7a\");\n        }\n        return JSON.parseObject(config, clazz);\n    }\n\n    public void buildSyncCreate(IssuesWithBLOBs issue, String platformId, Integer nextNum) {\n        issue.setProjectId(projectId);\n        issue.setId(UUID.randomUUID().toString());\n        issue.setPlatformId(platformId);\n        issue.setCreator(SessionUtils.getUserId());\n        issue.setNum(nextNum);\n    }\n\n    public boolean isThirdPartTemplate() {\n        Project project = baseProjectService.getProjectById(projectId);\n        if (project.getThirdPartTemplate() != null && project.getThirdPartTemplate()) {\n            return true;\n        }\n        return false;\n    }\n\n    @Override\n    public Boolean checkProjectExist(String relateId) {\n        return null;\n    }\n\n    /**\n     * \u79fb\u9664\u7f3a\u9677\u7684Parent\u5173\u8054\n     * @param request\n     */\n    @Override\n    public void removeIssueParentLink(IssuesUpdateRequest request) {\n        // \u6dfb\u52a0\u65b9\u6cd5\u4f53\u903b\u8f91\u53ef\u91cd\u5199\u6539\u65b9\u6cd5\n    }\n\n    /**\n     * \u66f4\u65b0\u9700\u6c42\u4e0e\u7f3a\u9677\u7684\u5173\u8054\u5173\u7cfb\n     * @param testCase\n     * @param project\n     */\n    @Override\n    public void updateDemandIssueLink(EditTestCaseRequest testCase, Project project) {\n        // \u6dfb\u52a0\u65b9\u6cd5\u4f53\u903b\u8f91\u53ef\u91cd\u5199\u6539\u65b9\u6cd5\n    }\n\n    /**\n     * \u66f4\u65b0\u9700\u6c42\u4e0e\u7528\u4f8b\u7684\u5173\u8054\u5173\u7cfb\n     * @param request\n     * @param project\n     * @param type   add or edit\n     */\n    @Override\n    public void updateDemandHyperLink(EditTestCaseRequest request, Project project, String type) {\n        // \u6dfb\u52a0\u65b9\u6cd5\u4f53\u903b\u8f91\u53ef\u91cd\u5199\u6539\u65b9\u6cd5\n    }\n\n    /**\n     * \u83b7\u53d6\u7b2c\u4e09\u65b9\u5e73\u53f0\u7684\u72b6\u6001\u96c6\u5408\n     * @param issueKey\n     * @return\n     */\n    public List<PlatformStatusDTO> getTransitions(String issueKey) {\n        return null;\n    }\n\n    @Override\n    public ResponseEntity proxyForGet(String url, Class responseEntityClazz) {\n        return null;\n    }\n\n    @Override\n    public List<IssuesDao> getIssue(IssuesRequest request) {\n        return null;\n    }\n}\n", "package io.metersphere.service.issue.platform;\n\nimport io.metersphere.base.domain.*;\nimport io.metersphere.commons.constants.IssuesManagePlatform;\nimport io.metersphere.commons.constants.IssuesStatus;\nimport io.metersphere.commons.constants.ZentaoIssuePlatformStatus;\nimport io.metersphere.commons.exception.MSException;\nimport io.metersphere.commons.utils.DateUtils;\nimport io.metersphere.commons.utils.JSON;\nimport io.metersphere.commons.utils.LogUtil;\nimport io.metersphere.xpack.track.dto.AttachmentSyncType;\nimport io.metersphere.constants.AttachmentType;\nimport io.metersphere.dto.*;\nimport io.metersphere.xpack.track.dto.AttachmentRequest;\nimport io.metersphere.xpack.track.dto.DemandDTO;\nimport io.metersphere.xpack.track.dto.IssuesDao;\nimport io.metersphere.xpack.track.dto.request.IssuesRequest;\nimport io.metersphere.xpack.track.dto.request.IssuesUpdateRequest;\nimport io.metersphere.service.issue.client.ZentaoClient;\nimport io.metersphere.service.issue.client.ZentaoGetClient;\nimport io.metersphere.xpack.track.dto.PlatformUser;\n\nimport io.metersphere.service.issue.domain.zentao.AddIssueResponse;\nimport io.metersphere.service.issue.domain.zentao.GetIssueResponse;\nimport io.metersphere.service.issue.domain.zentao.ZentaoBuild;\nimport io.metersphere.service.issue.domain.zentao.ZentaoConfig;\nimport io.metersphere.xpack.track.dto.PlatformStatusDTO;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.logging.log4j.util.Strings;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.io.File;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\npublic class ZentaoPlatform extends AbstractIssuePlatform {\n    protected final ZentaoClient zentaoClient;\n\n    protected final String[] imgArray = {\n            \"bmp\", \"jpg\", \"png\", \"tif\", \"gif\", \"jpeg\"\n    };\n\n    // xpack \u53cd\u5c04\u8c03\u7528\n    public ZentaoClient getZentaoClient() {\n        return zentaoClient;\n    }\n\n    public ZentaoPlatform(IssuesRequest issuesRequest) {\n        super(issuesRequest);\n        this.key = IssuesManagePlatform.Zentao.name();\n        ZentaoConfig zentaoConfig = getConfig();\n        this.workspaceId = issuesRequest.getWorkspaceId();\n        this.zentaoClient = ZentaoFactory.getInstance(zentaoConfig.getUrl(), zentaoConfig.getRequest());\n        this.zentaoClient.setConfig(zentaoConfig);\n    }\n\n    @Override\n    public String getProjectId(String projectId) {\n        return getProjectId(projectId, Project::getZentaoId);\n    }\n\n    @Override\n    public List<IssuesDao> getIssue(IssuesRequest issuesRequest) {\n        issuesRequest.setPlatform(key);\n        List<IssuesDao> issues;\n        if (StringUtils.isNotBlank(issuesRequest.getProjectId())) {\n            issues = extIssuesMapper.getIssues(issuesRequest);\n        } else {\n            issues = extIssuesMapper.getIssuesByCaseId(issuesRequest);\n        }\n        return issues;\n    }\n\n    public IssuesDao getZentaoAssignedAndBuilds(IssuesDao issue) {\n        Map zentaoIssue = (Map) zentaoClient.getBugById(issue.getPlatformId());\n        String assignedTo = zentaoIssue.get(\"assignedTo\").toString();\n        String openedBuild = zentaoIssue.get(\"openedBuild\").toString();\n        List<String> zentaoBuilds = new ArrayList<>();\n        if (Strings.isNotBlank(openedBuild)) {\n            zentaoBuilds = Arrays.asList(openedBuild.split(\",\"));\n        }\n        issue.setZentaoAssigned(assignedTo);\n        issue.setZentaoBuilds(zentaoBuilds);\n        return issue;\n    }\n\n    @Override\n    public List<DemandDTO> getDemandList(String projectId) {\n        //getTestStories\n        List<DemandDTO> list = new ArrayList<>();\n        try {\n            String session = zentaoClient.login();\n            String key = getProjectId(projectId);\n            HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<>(new HttpHeaders());\n            RestTemplate restTemplate = new RestTemplate();\n            String storyGet = zentaoClient.requestUrl.getStoryGet();\n            ResponseEntity<String> responseEntity = restTemplate.exchange(storyGet + session,\n                    HttpMethod.POST, requestEntity, String.class, key);\n            String body = responseEntity.getBody();\n            Map obj = JSON.parseMap(body);\n\n            LogUtil.info(\"project story: \" + key + obj);\n\n            if (obj != null) {\n                String data = obj.get(\"data\").toString();\n                if (StringUtils.isBlank(data)) {\n                    return list;\n                }\n                // \u517c\u5bb9\u5904\u740611.5\u7248\u672c\u683c\u5f0f [{obj},{obj}]\n                if (data.charAt(0) == '[') {\n                    List array = (List) obj.get(\"data\");\n                    for (int i = 0; i < array.size(); i++) {\n                        Map o = (Map) array.get(i);\n                        DemandDTO demandDTO = new DemandDTO();\n                        demandDTO.setId(o.get(\"id\").toString());\n                        demandDTO.setName(o.get(\"title\").toString());\n                        demandDTO.setPlatform(key);\n                        list.add(demandDTO);\n                    }\n                }\n                // {\"5\": {\"children\": {\"51\": {}}}, \"6\": {}}\n                else if (data.startsWith(\"{\\\"\")) {\n                    Map<String, Map<String, String>> dataMap = JSON.parseMap(data);\n                    Collection<Map<String, String>> values = dataMap.values();\n                    values.forEach(v -> {\n                        Map jsonObject = JSON.parseMap(JSON.toJSONString(v));\n                        DemandDTO demandDTO = new DemandDTO();\n                        demandDTO.setId(jsonObject.get(\"id\").toString());\n                        demandDTO.setName(jsonObject.get(\"title\").toString());\n                        demandDTO.setPlatform(key);\n                        list.add(demandDTO);\n                        if (jsonObject.get(\"children\") != null) {\n                            LinkedHashMap<String, Map<String, String>> children = (LinkedHashMap<String, Map<String, String>>) jsonObject.get(\"children\");\n                            Collection<Map<String, String>> childrenMap = children.values();\n                            childrenMap.forEach(ch -> {\n                                DemandDTO dto = new DemandDTO();\n                                dto.setId(ch.get(\"id\"));\n                                dto.setName(ch.get(\"title\"));\n                                dto.setPlatform(key);\n                                list.add(dto);\n                            });\n                        }\n                    });\n                }\n                // \u5904\u7406\u683c\u5f0f {{\"id\": {obj}},{\"id\",{obj}}}\n                else if (data.charAt(0) == '{') {\n                    Map dataObject = (Map) obj.get(\"data\");\n                    String s = JSON.toJSONString(dataObject);\n                    Map<String, Object> map = JSON.parseMap(s);\n                    Collection<Object> values = map.values();\n                    values.forEach(v -> {\n                        Map jsonObject = JSON.parseMap(JSON.toJSONString(v));\n                        DemandDTO demandDTO = new DemandDTO();\n                        demandDTO.setId(jsonObject.get(\"id\").toString());\n                        demandDTO.setName(jsonObject.get(\"title\").toString());\n                        demandDTO.setPlatform(key);\n                        list.add(demandDTO);\n                    });\n                }\n            }\n        } catch (Exception e) {\n            LogUtil.error(\"get zentao demand fail \" + e.getMessage());\n        }\n        return list;\n    }\n\n    public IssuesWithBLOBs getUpdateIssues(Map bug) {\n        return getUpdateIssues(null, bug);\n    }\n\n    /**\n     * \u66f4\u65b0\u7f3a\u9677\u6570\u636e\n     *\n     * @param issue \u5f85\u66f4\u65b0\u7f3a\u9677\u6570\u636e\n     * @param bug   \u5e73\u53f0\u7f3a\u9677\u6570\u636e\n     * @return\n     */\n    public IssuesWithBLOBs getUpdateIssues(IssuesWithBLOBs issue, Map bug) {\n\n        GetIssueResponse.Issue bugObj = JSON.parseObject(JSON.toJSONString(bug), GetIssueResponse.Issue.class);\n        String description = bugObj.getSteps();\n        String steps = description;\n        try {\n            steps = htmlDesc2MsDesc(zentao2MsDescription(description));\n        } catch (Exception e) {\n            LogUtil.error(e.getMessage(), e);\n        }\n        if (issue == null) {\n            issue = new IssuesWithBLOBs();\n            issue.setCustomFields(defaultCustomFields);\n        } else {\n            mergeCustomField(issue, defaultCustomFields);\n        }\n        issue.setPlatformStatus(bugObj.getStatus());\n        if (StringUtils.equals(bugObj.getDeleted(), \"1\")) {\n            issue.setPlatformStatus(IssuesStatus.DELETE.toString());\n            issuesMapper.updateByPrimaryKeySelective(issue);\n        }\n        issue.setTitle(bugObj.getTitle());\n        issue.setDescription(steps);\n        issue.setReporter(bugObj.getOpenedBy());\n        issue.setPlatform(key);\n        try {\n            String openedDate = bug.get(\"openedDate\").toString();\n            String lastEditedDate = bug.get(\"lastEditedDate\").toString();\n            if (StringUtils.isNotBlank(openedDate) && !openedDate.startsWith(\"0000-00-00\"))\n                issue.setCreateTime(DateUtils.getTime(openedDate).getTime());\n            if (StringUtils.isNotBlank(lastEditedDate) && !lastEditedDate.startsWith(\"0000-00-00\"))\n                issue.setUpdateTime(DateUtils.getTime(lastEditedDate).getTime());\n        } catch (Exception e) {\n            LogUtil.error(\"update zentao time\" + e.getMessage());\n        }\n        if (issue.getUpdateTime() == null) {\n            issue.setUpdateTime(System.currentTimeMillis());\n        }\n        issue.setCustomFields(syncIssueCustomField(issue.getCustomFields(), bug));\n        return issue;\n    }\n\n    @Override\n    public IssuesWithBLOBs addIssue(IssuesUpdateRequest issuesRequest) {\n        setUserConfig();\n\n        MultiValueMap<String, Object> param = buildUpdateParam(issuesRequest);\n        AddIssueResponse.Issue issue = zentaoClient.addIssue(param);\n        issuesRequest.setPlatformStatus(issue.getStatus());\n\n        IssuesWithBLOBs issues = null;\n\n        String id = issue.getId();\n        if (StringUtils.isNotBlank(id)) {\n            issuesRequest.setPlatformId(id);\n            issuesRequest.setId(UUID.randomUUID().toString());\n\n            IssuesExample issuesExample = new IssuesExample();\n            issuesExample.createCriteria().andIdEqualTo(id)\n                    .andPlatformEqualTo(key);\n            if (issuesMapper.selectByExample(issuesExample).size() <= 0) {\n                // \u63d2\u5165\u7f3a\u9677\u8868\n                issues = insertIssues(issuesRequest);\n            }\n\n            // \u7528\u4f8b\u4e0e\u7b2c\u4e09\u65b9\u7f3a\u9677\u5e73\u53f0\u4e2d\u7684\u7f3a\u9677\u5173\u8054\n            handleTestCaseIssues(issuesRequest);\n        } else {\n            MSException.throwException(\"\u8bf7\u786e\u8ba4\u8be5Zentao\u8d26\u53f7\u662f\u5426\u5f00\u542f\u8d85\u7ea7model\u8c03\u7528\u63a5\u53e3\u6743\u9650\");\n        }\n\n        // \u5982\u679c\u662f\u590d\u5236\u65b0\u589e, \u540c\u6b65MS\u9644\u4ef6\u5230Zentao\n        if (StringUtils.isNotEmpty(issuesRequest.getCopyIssueId())) {\n            AttachmentRequest request = new AttachmentRequest();\n            request.setBelongId(issuesRequest.getCopyIssueId());\n            request.setBelongType(AttachmentType.ISSUE.type());\n            List<String> attachmentIds = attachmentService.getAttachmentIdsByParam(request);\n            if (CollectionUtils.isNotEmpty(attachmentIds)) {\n                attachmentIds.forEach(attachmentId -> {\n                    FileAttachmentMetadata fileAttachmentMetadata = attachmentService.getFileAttachmentMetadataByFileId(attachmentId);\n                    File file = new File(fileAttachmentMetadata.getFilePath() + File.separator + fileAttachmentMetadata.getName());\n                    zentaoClient.uploadAttachment(\"bug\", issuesRequest.getPlatformId(), file);\n                });\n            }\n        }\n\n        return issues;\n    }\n\n    @Override\n    public void updateIssue(IssuesUpdateRequest request) {\n        setUserConfig();\n        MultiValueMap<String, Object> param = buildUpdateParam(request);\n        if (request.getTransitions() != null) {\n            request.setPlatformStatus(request.getTransitions().getValue());\n        }\n        handleIssueUpdate(request);\n        this.handleZentaoBugStatus(param);\n        zentaoClient.updateIssue(request.getPlatformId(), param);\n    }\n\n    private void handleZentaoBugStatus(MultiValueMap<String, Object> param) {\n        if (!param.containsKey(\"status\")) {\n            return;\n        }\n        List<Object> status = param.get(\"status\");\n        if (CollectionUtils.isEmpty(status)) {\n            return;\n        }\n        try {\n            SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n            String str = (String) status.get(0);\n            if (StringUtils.equals(str, \"resolved\")) {\n                param.add(\"resolvedDate\", format.format(new Date()));\n            } else if (StringUtils.equals(str, \"closed\")) {\n                param.add(\"closedDate\", format.format(new Date()));\n                if (!param.containsKey(\"resolution\")) {\n                    // \u89e3\u51b3\u65b9\u6848\u9ed8\u8ba4\u4e3a\u5df2\u89e3\u51b3\n                    param.add(\"resolution\", \"fixed\");\n                }\n            }\n        } catch (Exception e) {\n            //\n        }\n    }\n\n    private MultiValueMap<String, Object> buildUpdateParam(IssuesUpdateRequest issuesRequest) {\n        issuesRequest.setPlatform(key);\n        String projectId = getProjectId(issuesRequest.getProjectId());\n        if (StringUtils.isBlank(projectId)) {\n            MSException.throwException(\"\u672a\u5173\u8054\u7985\u9053\u9879\u76eeID.\");\n        }\n        MultiValueMap<String, Object> paramMap = new LinkedMultiValueMap<>();\n        paramMap.add(\"product\", projectId);\n        paramMap.add(\"title\", issuesRequest.getTitle());\n        if (issuesRequest.getTransitions() != null) {\n            paramMap.add(\"status\", issuesRequest.getTransitions().getValue());\n        }\n\n        addCustomFields(issuesRequest, paramMap);\n\n        String description = issuesRequest.getDescription();\n        String zentaoSteps = description;\n\n        // transfer description\n        try {\n            zentaoSteps = ms2ZentaoDescription(description);\n            zentaoSteps = zentaoSteps.replaceAll(\"\\\\n\", \"<br/>\");\n        } catch (Exception e) {\n            LogUtil.error(e.getMessage(), e);\n        }\n        LogUtil.info(\"zentao description transfer: \" + zentaoSteps);\n\n        paramMap.add(\"steps\", zentaoSteps);\n        if (!CollectionUtils.isEmpty(issuesRequest.getZentaoBuilds())) {\n            List<String> builds = issuesRequest.getZentaoBuilds();\n            builds.forEach(build -> paramMap.add(\"openedBuild[]\", build));\n        } else {\n            paramMap.add(\"openedBuild\", \"trunk\");\n        }\n        if (StringUtils.isNotBlank(issuesRequest.getZentaoAssigned())) {\n            paramMap.add(\"assignedTo\", issuesRequest.getZentaoAssigned());\n        }\n        return paramMap;\n    }\n\n    @Override\n    public void deleteIssue(String id) {\n        IssuesWithBLOBs issuesWithBLOBs = issuesMapper.selectByPrimaryKey(id);\n        super.deleteIssue(id);\n        zentaoClient.deleteIssue(issuesWithBLOBs.getPlatformId());\n    }\n\n    @Override\n    public void testAuth() {\n        zentaoClient.login();\n    }\n\n    @Override\n    public void userAuth(UserDTO.PlatformInfo userInfo) {\n        setUserConfig(userInfo);\n        zentaoClient.login();\n    }\n\n    public ZentaoConfig getConfig() {\n        return getConfig(key, ZentaoConfig.class);\n    }\n\n    public ZentaoConfig setConfig() {\n        ZentaoConfig config = getConfig();\n        zentaoClient.setConfig(config);\n        return config;\n    }\n\n    public ZentaoConfig setUserConfig() {\n        return setUserConfig(getUserPlatInfo(this.workspaceId));\n    }\n\n    public ZentaoConfig setUserConfig(UserDTO.PlatformInfo userPlatInfo) {\n        ZentaoConfig zentaoConfig = getConfig();\n        if (userPlatInfo != null && StringUtils.isNotBlank(userPlatInfo.getZentaoUserName())\n                && StringUtils.isNotBlank(userPlatInfo.getZentaoPassword())) {\n            zentaoConfig.setAccount(userPlatInfo.getZentaoUserName());\n            zentaoConfig.setPassword(userPlatInfo.getZentaoPassword());\n        }\n        zentaoClient.setConfig(zentaoConfig);\n        return zentaoConfig;\n    }\n\n    @Override\n    public List<PlatformUser> getPlatformUser() {\n        String session = zentaoClient.login();\n        HttpHeaders httpHeaders = new HttpHeaders();\n        HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<>(httpHeaders);\n        RestTemplate restTemplate = new RestTemplate();\n        String getUser = zentaoClient.requestUrl.getUserGet();\n        ResponseEntity<String> responseEntity = restTemplate.exchange(getUser + session,\n                HttpMethod.GET, requestEntity, String.class);\n        String body = responseEntity.getBody();\n        Map obj = JSON.parseMap(body);\n\n        LogUtil.info(\"zentao user \" + obj);\n\n        List data = JSON.parseArray(obj.get(\"data\").toString());\n\n        List<PlatformUser> users = new ArrayList<>();\n        for (int i = 0; i < data.size(); i++) {\n            Map o = (Map) data.get(i);\n            PlatformUser platformUser = new PlatformUser();\n            String account = o.get(\"account\").toString();\n            String username = o.get(\"realname\").toString();\n            platformUser.setName(username);\n            platformUser.setUser(account);\n            users.add(platformUser);\n        }\n        return users;\n    }\n\n    @Override\n    public void syncIssues(Project project, List<IssuesDao> issues) {\n        HashMap<String, List<CustomFieldResourceDTO>> customFieldMap = new HashMap<>();\n\n        issues.forEach(item -> {\n            IssuesWithBLOBs issue = issuesMapper.selectByPrimaryKey(item.getId());\n            Map bug = zentaoClient.getBugById(item.getPlatformId());\n            issue = getUpdateIssues(issue, bug);\n            customFieldMap.put(item.getId(), baseCustomFieldService.getCustomFieldResourceDTO(issue.getCustomFields()));\n            issue.setId(item.getId());\n            issuesMapper.updateByPrimaryKeySelective(issue);\n            syncZentaoIssueAttachments(issue);\n        });\n        customFieldIssuesService.batchEditFields(customFieldMap);\n    }\n\n    public List<ZentaoBuild> getBuilds() {\n        Map<String, Object> builds = zentaoClient.getBuildsByCreateMetaData(getProjectId(projectId));\n        if (builds == null || builds.isEmpty()) {\n            builds = zentaoClient.getBuilds(getProjectId(projectId));\n        }\n        List<ZentaoBuild> res = new ArrayList<>();\n        builds.forEach((k, v) -> {\n            if (StringUtils.isNotBlank(k)) {\n                res.add(new ZentaoBuild(k, v.toString()));\n            }\n        });\n        return res;\n    }\n\n    private String uploadFile(FileSystemResource resource) {\n        String id = \"\";\n        String session = zentaoClient.login();\n        HttpHeaders httpHeaders = new HttpHeaders();\n        MultiValueMap<String, Object> paramMap = new LinkedMultiValueMap<>();\n        paramMap.add(\"files\", resource);\n        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(paramMap, httpHeaders);\n        RestTemplate restTemplate = new RestTemplate();\n        try {\n            String fileUpload = zentaoClient.requestUrl.getFileUpload();\n            ResponseEntity<String> responseEntity = restTemplate.exchange(fileUpload, HttpMethod.POST, requestEntity,\n                    String.class, null, session);\n            String body = responseEntity.getBody();\n            Map obj = JSON.parseMap(body);\n            Map data = (Map) JSON.parseObject(obj.get(\"data\").toString());\n            Set<String> set = data.keySet();\n            if (!set.isEmpty()) {\n                id = (String) set.toArray()[0];\n            }\n        } catch (Exception e) {\n            LogUtil.error(e, e.getMessage());\n        }\n        LogUtil.info(\"upload file id: \" + id);\n        return id;\n    }\n\n    private String ms2ZentaoDescription(String msDescription) {\n        String imgUrlRegex = \"!\\\\[.*?]\\\\(/resource/md/get(.*?\\\\..*?)\\\\)\";\n        String zentaoSteps = msDescription.replaceAll(imgUrlRegex, zentaoClient.requestUrl.getReplaceImgUrl());\n        Matcher matcher = zentaoClient.requestUrl.getImgPattern().matcher(zentaoSteps);\n        while (matcher.find()) {\n            // get file name\n            String originSubUrl = matcher.group(1);\n            if (originSubUrl.contains(\"/url?url=\")) {\n                String path = URLDecoder.decode(originSubUrl, StandardCharsets.UTF_8);\n                String fileName;\n                if (path.indexOf(\"fileID\") > 0) {\n                    fileName = path.substring(path.indexOf(\"fileID\") + 7);\n                } else {\n                    fileName = path.substring(path.indexOf(\"file-read-\") + 10);\n                }\n                zentaoSteps = zentaoSteps.replaceAll(Pattern.quote(originSubUrl), fileName);\n            } else {\n                String fileName = originSubUrl.substring(10);\n                // get file\n                ResponseEntity<FileSystemResource> mdImage = resourceService.getMdImage(fileName);\n                // upload zentao\n                String id = uploadFile(mdImage.getBody());\n                // todo delete local file\n                int index = fileName.lastIndexOf(\".\");\n                String suffix = \"\";\n                if (index != -1) {\n                    suffix = fileName.substring(index);\n                }\n                // replace id\n                zentaoSteps = zentaoSteps.replaceAll(Pattern.quote(originSubUrl), id + suffix);\n            }\n        }\n        // image link\n        String netImgRegex = \"!\\\\[(.*?)]\\\\((http.*?)\\\\)\";\n        return zentaoSteps.replaceAll(netImgRegex, \"<img src=\\\"$2\\\" alt=\\\"$1\\\"/>\");\n    }\n\n    private String zentao2MsDescription(String ztDescription) {\n        String imgRegex = \"<img src.*?/>\";\n        Pattern pattern = Pattern.compile(imgRegex);\n        Matcher matcher = pattern.matcher(ztDescription);\n        while (matcher.find()) {\n            if (StringUtils.isNotEmpty(matcher.group())) {\n                // img\u6807\u7b7e\u5185\u5bb9\n                String imgPath = matcher.group();\n                // \u89e3\u6790\u6807\u7b7e\u5185\u5bb9\u4e3a\u56fe\u7247\u8d85\u94fe\u63a5\u683c\u5f0f\uff0c\u8fdb\u884c\u66ff\u6362\uff0c\n                String src = getMatcherResultForImg(\"src\\\\s*=\\\\s*\\\"?(.*?)(\\\"|>|\\\\s+)\", imgPath);\n                String alt = getMatcherResultForImg(\"alt\\\\s*=\\\\s*\\\"?(.*?)(\\\"|>|\\\\s+)\", imgPath);\n                String hyperLinkPath = packageDescriptionByPathAndName(src, alt);\n                imgPath = transferSpecialCharacter(imgPath);\n                ztDescription = ztDescription.replaceAll(imgPath, hyperLinkPath);\n            }\n        }\n\n        return ztDescription;\n    }\n\n    private String packageDescriptionByPathAndName(String path, String name) {\n        String result = \"\";\n\n        if (StringUtils.isNotEmpty(path)) {\n            if (!path.startsWith(\"http\")) {\n                if (path.startsWith(\"{\") && path.endsWith(\"}\")) {\n                    String srcContent = path.substring(1, path.length() - 1);\n                    if (StringUtils.isEmpty(name)) {\n                        name = srcContent;\n                    }\n\n                    if (Arrays.stream(imgArray).anyMatch(imgType -> StringUtils.equals(imgType, srcContent.substring(srcContent.indexOf('.') + 1)))) {\n                        if (zentaoClient instanceof ZentaoGetClient) {\n                            path = zentaoClient.getBaseUrl() + \"/index.php?m=file&f=read&fileID=\" + srcContent;\n                        } else {\n                            // \u7985\u9053\u5f00\u6e90\u7248\n                            path = zentaoClient.getBaseUrl() + \"/file-read-\" + srcContent;\n                        }\n                    } else {\n                        return result;\n                    }\n                } else {\n                    name = name.replaceAll(\"&amp;\", \"&\");\n                    try {\n                        URI uri = new URI(zentaoClient.getBaseUrl());\n                        path = uri.getScheme() + \"://\" + uri.getHost() + path.replaceAll(\"&amp;\", \"&\");\n                    } catch (URISyntaxException e) {\n                        path = zentaoClient.getBaseUrl() + path.replaceAll(\"&amp;\", \"&\");\n                        LogUtil.error(e);\n                    }\n                }\n                path = \"/resource/md/get/url?url=\" + URLEncoder.encode(path, StandardCharsets.UTF_8);\n            }\n            // \u56fe\u7247\u4e0e\u63cf\u8ff0\u4fe1\u606f\u4e4b\u95f4\u9700\u6362\u884c\uff0c\u5426\u5219\u65e0\u6cd5\u9884\u89c8\u56fe\u7247\n            result = \"\\n\\n![\" + name + \"](\" + path + \")\";\n        }\n\n        return result;\n    }\n\n    private String getMatcherResultForImg(String regex, String targetStr) {\n        String result = \"\";\n\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(targetStr);\n        while (matcher.find()) {\n            result = matcher.group(1);\n        }\n\n        return result;\n    }\n\n    @Override\n    public Boolean checkProjectExist(String relateId) {\n        return zentaoClient.checkProjectExist(relateId);\n    }\n\n    @Override\n    public void syncIssuesAttachment(IssuesUpdateRequest issuesRequest, File file, AttachmentSyncType syncType) {\n        if (\"upload\".equals(syncType.syncOperateType())) {\n            zentaoClient.uploadAttachment(\"bug\", issuesRequest.getPlatformId(), file);\n        } else if (\"delete\".equals(syncType.syncOperateType())) {\n            Map bugInfo = zentaoClient.getBugById(issuesRequest.getPlatformId());\n            Map<String, Object> zenFiles = (Map) bugInfo.get(\"files\");\n            for (String fileId : zenFiles.keySet()) {\n                Map fileInfo = (Map) zenFiles.get(fileId);\n                if (file.getName().equals(fileInfo.get(\"title\"))) {\n                    zentaoClient.deleteAttachment(fileId);\n                    break;\n                }\n            }\n        }\n    }\n\n    public void syncZentaoIssueAttachments(IssuesWithBLOBs issue) {\n        List<String> znetaoAttachmentsName = new ArrayList<String>();\n        AttachmentRequest request = new AttachmentRequest();\n        request.setBelongType(AttachmentType.ISSUE.type());\n        request.setBelongId(issue.getId());\n        List<FileAttachmentMetadata> allMsAttachments = attachmentService.listMetadata(request);\n        List<String> msAttachmentsName = allMsAttachments.stream().map(FileAttachmentMetadata::getName).collect(Collectors.toList());\n        Map bugInfo = zentaoClient.getBugById(issue.getPlatformId());\n        Object files = bugInfo.get(\"files\");\n        Map<String, Object> zenFiles;\n        if (files instanceof List && ((List) files).size() == 0) {\n            zenFiles = null;\n        } else {\n            zenFiles = (Map) files;\n        }\n        // \u540c\u6b65\u7985\u9053\u4e2d\u65b0\u7684\u9644\u4ef6\n        if (zenFiles != null) {\n            for (String fileId : zenFiles.keySet()) {\n                Map fileInfo = (Map) zenFiles.get(fileId);\n                String filename = fileInfo.get(\"title\").toString();\n                znetaoAttachmentsName.add(filename);\n                if (!msAttachmentsName.contains(filename)) {\n                    try {\n                        byte[] bytes = zentaoClient.getAttachmentBytes(fileId);\n                        FileAttachmentMetadata fileAttachmentMetadata = attachmentService.saveAttachmentByBytes(bytes, AttachmentType.ISSUE.type(), issue.getId(), filename);\n                        AttachmentModuleRelation attachmentModuleRelation = new AttachmentModuleRelation();\n                        attachmentModuleRelation.setAttachmentId(fileAttachmentMetadata.getId());\n                        attachmentModuleRelation.setRelationId(issue.getId());\n                        attachmentModuleRelation.setRelationType(AttachmentType.ISSUE.type());\n                        attachmentModuleRelationMapper.insert(attachmentModuleRelation);\n                    } catch (Exception e) {\n                        LogUtil.error(e);\n                    }\n                }\n            }\n        }\n\n        // \u5220\u9664\u7985\u9053\u4e2d\u4e0d\u5b58\u5728\u7684\u9644\u4ef6\n        if (CollectionUtils.isNotEmpty(allMsAttachments)) {\n            List<FileAttachmentMetadata> deleteMsAttachments = allMsAttachments.stream()\n                    .filter(msAttachment -> !znetaoAttachmentsName.contains(msAttachment.getName())).collect(Collectors.toList());\n            deleteMsAttachments.forEach(fileAttachmentMetadata -> {\n                List<String> ids = List.of(fileAttachmentMetadata.getId());\n                AttachmentModuleRelationExample example = new AttachmentModuleRelationExample();\n                example.createCriteria().andAttachmentIdIn(ids).andRelationTypeEqualTo(AttachmentType.ISSUE.type());\n                // \u5220\u9664MS\u9644\u4ef6\u53ca\u5173\u8054\u6570\u636e\n                attachmentService.deleteAttachmentByIds(ids);\n                attachmentService.deleteFileAttachmentByIds(ids);\n                attachmentModuleRelationMapper.deleteByExample(example);\n            });\n        }\n    }\n\n\n    @Override\n    public List<PlatformStatusDTO> getTransitions(String issueKey) {\n        List<PlatformStatusDTO> platformStatusDTOS = new ArrayList<>();\n        for (ZentaoIssuePlatformStatus status : ZentaoIssuePlatformStatus.values()) {\n            PlatformStatusDTO platformStatusDTO = new PlatformStatusDTO();\n            platformStatusDTO.setValue(status.name());\n            platformStatusDTO.setLabel(status.getName());\n\n            platformStatusDTOS.add(platformStatusDTO);\n        }\n        return platformStatusDTOS;\n    }\n}\n", "package io.metersphere.service.wapper;\n\nimport io.metersphere.commons.exception.MSException;\nimport io.metersphere.i18n.Translator;\nimport io.metersphere.service.PlatformPluginService;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.client.RestTemplate;\n\nimport javax.annotation.Resource;\n\n@Service\n@Transactional(rollbackFor = Exception.class)\npublic class IssueProxyResourceService {\n\n    @Resource\n    private RestTemplate restTemplate;\n    @Resource\n    private PlatformPluginService platformPluginService;\n\n    /**\n     * http \u4ee3\u7406\n     * \u5982\u679c\u5f53\u524d\u8bbf\u95ee\u5730\u5740\u662f https\uff0c\u76f4\u63a5\u8bbf\u95ee http \u7684\u56fe\u7247\u8d44\u6e90\n     * \u7531\u4e8e\u6d4f\u89c8\u5668\u7684\u5b89\u5168\u673a\u5236\uff0chttp \u4f1a\u88ab\u8f6c\u6210 https\n     * @param url\n     * @param platform\n     * @return\n     */\n    public ResponseEntity<byte[]> getMdImageByUrl(String url, String platform, String workspaceId) {\n        if (url.contains(\"md/get/url\")) {\n            MSException.throwException(Translator.get(\"invalid_parameter\"));\n        }\n        if (StringUtils.isNotBlank(platform)) {\n            return platformPluginService.getPlatform(platform, workspaceId)\n                    .proxyForGet(url, byte[].class);\n\n        }\n        return restTemplate.exchange(url, HttpMethod.GET, null, byte[].class);\n    }\n}\n"], "fixing_code": ["package io.metersphere.gateway.filter;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.cloud.client.discovery.DiscoveryClient;\nimport org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.server.ServerWebExchange;\nimport org.springframework.web.server.WebFilter;\nimport org.springframework.web.server.WebFilterChain;\nimport reactor.core.publisher.Mono;\n\nimport javax.annotation.Resource;\nimport java.util.Optional;\n\n@Component\npublic class SessionFilter implements WebFilter {\n    // \u6240\u6709\u6a21\u5757\u7684\u524d\u7f00\n    private static final String[] PREFIX = new String[]{\"/setting\", \"/project\", \"/api\", \"/performance\", \"/track\", \"/workstation\", \"/ui\", \"/report\"};\n    private static final String[] TO_SUB_SERVICE = new String[]{\"/license\", \"/system\", \"/resource\", \"/sso/callback/logout\", \"/sso/callback/cas/logout\"};\n    private static final String PERFORMANCE_DOWNLOAD_PREFIX = \"/jmeter/\";\n    private static final String API_DOWNLOAD_PREFIX = \"/api/jmeter/\";\n    private static final String TRACK_IMAGE_PREFIX = \"/resource/md/get/path\";\n\n    @Resource\n    private DiscoveryClient discoveryClient;\n    @Value(\"${spring.application.name}\")\n    private String serviceName;\n\n    @Override\n    public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {\n        ServerHttpRequest req = exchange.getRequest();\n        String path = req.getURI().getRawPath();\n\n        // \u8f6c\u53d1 css js \u5230\u5177\u4f53\u7684\u6a21\u5757\n        if (path.startsWith(\"/css\") || path.startsWith(\"/js\")) {\n            for (String prefix : PREFIX) {\n                if (path.contains(prefix)) {\n                    return addPrefix(prefix, exchange, chain);\n                }\n            }\n        }\n\n        if (path.startsWith(TRACK_IMAGE_PREFIX)) {\n            return addPrefix(\"/track\", exchange, chain);\n        }\n\n        // \u6709\u4e9burl\u76f4\u63a5\u8f6c\u5230 sub-service\n        for (String prefix : TO_SUB_SERVICE) {\n            if (path.startsWith(prefix)) {\n                Optional<String> svc = discoveryClient.getServices().stream().filter(s -> !StringUtils.equals(serviceName, s)).findAny();\n                if (svc.isEmpty()) {\n                    break;\n                }\n                String service = svc.get();\n                return addPrefix(\"/\" + service + \"/\", exchange, chain);\n            }\n        }\n\n        // \u4ece\u5f53\u524d\u7ad9\u70b9\u4e0b\u8f7d\u8d44\u6e90\n        if (path.startsWith(PERFORMANCE_DOWNLOAD_PREFIX)) {\n            return addPrefix(\"/performance\", exchange, chain);\n        }\n\n        if (path.startsWith(API_DOWNLOAD_PREFIX)) {\n            return addPrefix(\"/api\", exchange, chain);\n        }\n\n        return chain.filter(exchange);\n    }\n\n    private Mono<Void> addPrefix(String prefix, final ServerWebExchange exchange, final WebFilterChain chain) {\n        ServerHttpRequest req = exchange.getRequest();\n        String path = req.getURI().getRawPath();\n        ServerWebExchangeUtils.addOriginalRequestUrl(exchange, req.getURI());\n        String newPath = prefix + path;\n        ServerHttpRequest request = req.mutate().path(newPath).build();\n        exchange.getAttributes().put(ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR, request.getURI());\n        return chain.filter(exchange.mutate().request(request).build());\n    }\n}\n", "package io.metersphere.xpack.track.issue;\n\nimport io.metersphere.base.domain.IssuesWithBLOBs;\nimport io.metersphere.base.domain.Project;\nimport io.metersphere.dto.UserDTO;\nimport io.metersphere.xpack.track.dto.*;\nimport io.metersphere.xpack.track.dto.request.IssuesRequest;\nimport io.metersphere.xpack.track.dto.request.IssuesUpdateRequest;\nimport org.springframework.http.ResponseEntity;\n\nimport java.io.File;\nimport java.util.List;\n\npublic interface IssuesPlatform {\n\n    /**\n     * \u83b7\u53d6\u5e73\u53f0\u76f8\u5173\u8054\u7684\u7f3a\u9677\n     *\n     * @return platform issues list\n     */\n    List<IssuesDao> getIssue(IssuesRequest request);\n\n    /*\u83b7\u53d6\u5e73\u53f0\u76f8\u5173\u9700\u6c42*/\n    List<DemandDTO> getDemandList(String projectId);\n\n    /**\n     * \u6dfb\u52a0\u7f3a\u9677\u5230\u7f3a\u9677\u5e73\u53f0\n     *\n     * @param issuesRequest issueRequest\n     */\n    IssuesWithBLOBs addIssue(IssuesUpdateRequest issuesRequest);\n\n    /**\n     * \u66f4\u65b0\u7f3a\u9677\n     * @param request\n     */\n    void updateIssue(IssuesUpdateRequest request);\n\n    /**\n     * \u5220\u9664\u7f3a\u9677\u5e73\u53f0\u7f3a\u9677\n     *\n     * @param id issue id\n     */\n    void deleteIssue(String id);\n\n    /**\n     * \u6d4b\u8bd5\u5e73\u53f0\u8054\u901a\u6027\n     */\n    void testAuth();\n\n    /**\n     * \u7528\u6237\u4fe1\u606f\u6d4b\u8bd5\n     */\n    void userAuth(UserDTO.PlatformInfo userInfo);\n\n    /**\n     * \u83b7\u53d6\u7f3a\u9677\u5e73\u53f0\u9879\u76ee\u4e0b\u7684\u76f8\u5173\u4eba\u5458\n     * @return platform user list\n     */\n    List<PlatformUser> getPlatformUser();\n\n    /**\n     * \u540c\u6b65\u7f3a\u9677\u6700\u65b0\u53d8\u66f4\n     * @param project\n     * @param tapdIssues\n     */\n    void syncIssues(Project project, List<IssuesDao> tapdIssues);\n\n    /**\n     * \u540c\u6b65\u7f3a\u9677\u5168\u91cf\u7684\u7f3a\u9677\n     * @param project\n     */\n    void syncAllIssues(Project project, IssueSyncRequest syncRequest);\n\n    /**\n     * \u83b7\u53d6\u7b2c\u4e09\u65b9\u5e73\u53f0\u7f3a\u9677\u6a21\u677f\n     * @return\n     */\n    IssueTemplateDao getThirdPartTemplate();\n\n    /**\n     * \u68c0\u67e5\u5176\u5b83\u5e73\u53f0\u5173\u8054\u7684ID\u662f\u5426\u5b58\u5728\n     * @param relateId \u5176\u5b83\u5e73\u53f0\u5728MS\u9879\u76ee\u4e0a\u5173\u8054\u7684\u76f8\u5173ID\n     * @return Boolean\n     */\n    Boolean checkProjectExist(String relateId);\n\n    /**\n     * \u66f4\u65b0\u7f3a\u9677\u5173\u8054\u5173\u7cfb\n     * @param request\n     */\n    void removeIssueParentLink(IssuesUpdateRequest request);\n\n    /**\n     * \u66f4\u65b0\u9700\u6c42\u4e0e\u7f3a\u9677\u5173\u8054\u5173\u7cfb\n     *\n     * @param testCase\n     */\n    void updateDemandIssueLink(EditTestCaseRequest testCase, Project project);\n\n    /**\n     * @param request\n     * @param type    add or edit\n     */\n    void updateDemandHyperLink(EditTestCaseRequest request, Project project, String type);\n\n    /**\n     * Get\u8bf7\u6c42\u7684\u4ee3\u7406\n     * @param path\n     * @return\n     */\n    ResponseEntity proxyForGet(String path, Class responseEntityClazz);\n\n    /**\n     * \u540c\u6b65MS\u7f3a\u9677\u9644\u4ef6\u5230\u7b2c\u4e09\u65b9\u5e73\u53f0\n     * @param issuesRequest \u5e73\u53f0\u53c2\u6570\n     * @param file \u9644\u4ef6\n     * @param syncType \u540c\u6b65\u64cd\u4f5c\u7c7b\u578b: UPLOAD, DELETE\n     */\n    void syncIssuesAttachment(IssuesUpdateRequest issuesRequest, File file, AttachmentSyncType syncType);\n\n\n    /**\n     * \u83b7\u53d6\u7b2c\u4e09\u65b9\u5e73\u53f0\u7684\u72b6\u6001\u96c6\u5408\n     * @param issueKey\n     * @return\n     */\n    List<PlatformStatusDTO> getTransitions(String issueKey);\n}\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.7.5</version>\n        <relativePath/>\n    </parent>\n\n    <packaging>pom</packaging>\n    <groupId>io.metersphere</groupId>\n    <artifactId>metersphere</artifactId>\n    <version>${revision}</version>\n    <name>metersphere</name>\n    <description>MeterSphere</description>\n\n    <properties>\n        <revision>main</revision>\n        <java.version>11</java.version>\n        <spring-cloud.version>2021.0.5</spring-cloud.version>\n        <spring-security.version>5.7.5</spring-security.version>\n        <dubbo.version>2.7.18</dubbo.version>\n        <platform-plugin-sdk.version>1.1.0</platform-plugin-sdk.version>\n        <flyway.version>7.15.0</flyway.version>\n        <shiro.version>1.10.1</shiro.version>\n        <mssql-jdbc.version>7.4.1.jre8</mssql-jdbc.version>\n        <postgresql.version>42.3.8</postgresql.version>\n        <java-websocket.version>1.5.3</java-websocket.version>\n        <easyexcel.version>3.1.1</easyexcel.version>\n        <dom4j.version>2.1.3</dom4j.version>\n        <guava.version>31.1-jre</guava.version>\n        <pagehelper.version>5.3.2</pagehelper.version>\n        <metersphere-jmeter-functions.version>1.5</metersphere-jmeter-functions.version>\n        <quartz-starter.version>1.0.6</quartz-starter.version>\n        <redisson-starter.version>3.17.7</redisson-starter.version>\n        <guice.version>5.1.0</guice.version>\n        <mybatis-starter.version>2.3.0</mybatis-starter.version>\n        <reflections.version>0.10.2</reflections.version>\n        <bcprov-jdk15on.version>1.70</bcprov-jdk15on.version>\n        <commons-io.version>2.11.0</commons-io.version>\n        <commons-text.version>1.10.0</commons-text.version>\n        <xstream.version>1.4.19</xstream.version>\n        <xmlbeans.version>3.1.0</xmlbeans.version>\n        <swagger-parser.version>2.1.5</swagger-parser.version>\n        <rhino.version>1.7.14</rhino.version>\n        <jsoup.version>1.15.3</jsoup.version>\n        <commonmark.version>0.19.0</commonmark.version>\n        <commons-compress.version>1.21</commons-compress.version>\n        <htmlcleaner.version>2.26</htmlcleaner.version>\n        <xmindjbehaveplugin.version>0.8</xmindjbehaveplugin.version>\n        <metersphere-plugin-core.version>2.0</metersphere-plugin-core.version>\n        <plexus.version>3.0.24</plexus.version>\n        <common-random.version>1.0.14</common-random.version>\n        <generex.version>1.0.2</generex.version>\n        <json-lib.version>2.4</json-lib.version>\n        <json-schema-validator.version>2.2.14</json-schema-validator.version>\n        <xz.version>1.9</xz.version>\n        <springdoc-openapi-ui.version>1.6.11</springdoc-openapi-ui.version>\n        <flatten.version>1.2.7</flatten.version>\n        <jmeter.version>5.5</jmeter.version>\n        <codehaus-groovy.version>3.0.11</codehaus-groovy.version>\n        <jython.version>2.7.3</jython.version>\n        <docker-java.version>3.2.13</docker-java.version>\n        <jmeter-plugins-webdriver.version>3.4.4</jmeter-plugins-webdriver.version>\n        <oracle-database.version>19.7.0.0</oracle-database.version>\n        <zookeeper.version>3.8.0</zookeeper.version>\n        <commons-beanutils.version>1.9.4</commons-beanutils.version>\n        <jmeter-plugins-dubbo.version>2.7.17</jmeter-plugins-dubbo.version>\n        <hessian-lite.version>3.2.13</hessian-lite.version>\n        <avro.version>1.11.1</avro.version>\n        <dec.version>0.1.2</dec.version>\n        <dingtalk-sdk.version>2.0.0</dingtalk-sdk.version>\n        <org-json.version>20220924</org-json.version>\n        <jmeter-plugins-dubbo.version>2.7.17</jmeter-plugins-dubbo.version>\n        <nacos.version>1.4.4</nacos.version>\n        <minio.version>8.4.5</minio.version>\n        <hikaricp.version>5.0.1</hikaricp.version>\n        <xmlgraphics-commons.version>2.7</xmlgraphics-commons.version>\n        <commons-fileupload.version>1.4</commons-fileupload.version>\n        <jgit.version>6.3.0.202209071007-r</jgit.version>\n        <!-- frontend -->\n        <frontend-maven-plugin.version>1.12.1</frontend-maven-plugin.version>\n        <node.version>v16.10.0</node.version>\n        <npm.version>8.12.1</npm.version>\n        <!--        -->\n        <skipAntRunForJenkins>false</skipAntRunForJenkins>\n    </properties>\n\n    <modules>\n        <module>framework</module>\n        <module>api-test</module>\n        <module>performance-test</module>\n        <module>project-management</module>\n        <module>report-stat</module>\n        <module>system-setting</module>\n        <module>test-track</module>\n        <module>workstation</module>\n    </modules>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.projectreactor</groupId>\n            <artifactId>reactor-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.kafka</groupId>\n            <artifactId>spring-kafka-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <release>${java.version}</release>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>flatten-maven-plugin</artifactId>\n                <version>${flatten.version}</version>\n                <configuration>\n                    <updatePomFile>true</updatePomFile>\n                    <flattenMode>resolveCiFriendliesOnly</flattenMode>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>flatten</id>\n                        <phase>process-resources</phase>\n                        <goals>\n                            <goal>flatten</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>flatten.clean</id>\n                        <phase>clean</phase>\n                        <goals>\n                            <goal>clean</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n", "package io.metersphere.controller;\n\nimport io.metersphere.service.wapper.IssueProxyResourceService;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\n\n@RestController\n@RequestMapping(value = \"/resource\")\npublic class IssueProxyResourceController {\n    @Resource\n    IssueProxyResourceService issueProxyResourceService;\n\n    @GetMapping(value = \"/md/get/path\")\n    public ResponseEntity<byte[]> getFileByPath(@RequestParam (\"path\") String path,\n                                                @RequestParam (value = \"platform\") String platform,\n                                                @RequestParam (value = \"workspaceId\") String workspaceId) {\n        return issueProxyResourceService.getMdImageByPath(path, platform, workspaceId);\n    }\n}\n", "package io.metersphere.service;\n\nimport com.alibaba.excel.EasyExcelFactory;\nimport com.alibaba.excel.util.DateUtils;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.github.pagehelper.Page;\nimport com.github.pagehelper.PageHelper;\nimport io.metersphere.base.domain.*;\nimport io.metersphere.base.mapper.*;\nimport io.metersphere.base.mapper.ext.ExtIssueCommentMapper;\nimport io.metersphere.base.mapper.ext.ExtIssuesMapper;\nimport io.metersphere.commons.constants.*;\nimport io.metersphere.commons.exception.MSException;\nimport io.metersphere.commons.utils.*;\nimport io.metersphere.constants.AttachmentType;\nimport io.metersphere.constants.IssueStatus;\nimport io.metersphere.constants.SystemCustomField;\nimport io.metersphere.dto.*;\nimport io.metersphere.excel.constants.IssueExportHeadField;\nimport io.metersphere.excel.domain.ExcelErrData;\nimport io.metersphere.excel.domain.ExcelResponse;\nimport io.metersphere.excel.domain.IssueExcelData;\nimport io.metersphere.excel.domain.IssueExcelDataFactory;\nimport io.metersphere.excel.handler.IssueTemplateHeadWriteHandler;\nimport io.metersphere.excel.listener.IssueExcelListener;\nimport io.metersphere.excel.utils.EasyExcelExporter;\nimport io.metersphere.i18n.Translator;\nimport io.metersphere.log.utils.ReflexObjectUtil;\nimport io.metersphere.log.vo.DetailColumn;\nimport io.metersphere.log.vo.OperatingLogDetails;\nimport io.metersphere.log.vo.track.TestPlanReference;\nimport io.metersphere.plan.dto.PlanReportIssueDTO;\nimport io.metersphere.plan.dto.TestCaseReportStatusResultDTO;\nimport io.metersphere.plan.dto.TestPlanSimpleReportDTO;\nimport io.metersphere.plan.service.TestPlanService;\nimport io.metersphere.plan.service.TestPlanTestCaseService;\nimport io.metersphere.plan.utils.TestPlanStatusCalculator;\nimport io.metersphere.platform.api.Platform;\nimport io.metersphere.platform.domain.*;\nimport io.metersphere.platform.domain.PlatformAttachment;\nimport io.metersphere.request.IntegrationRequest;\nimport io.metersphere.xpack.track.dto.AttachmentRequest;\nimport io.metersphere.request.issues.IssueExportRequest;\nimport io.metersphere.request.issues.IssueImportRequest;\nimport io.metersphere.request.issues.PlatformIssueTypeRequest;\nimport io.metersphere.request.testcase.AuthUserIssueRequest;\nimport io.metersphere.request.testcase.IssuesCountRequest;\nimport io.metersphere.service.issue.domain.zentao.ZentaoBuild;\nimport io.metersphere.service.issue.platform.*;\nimport io.metersphere.service.remote.project.TrackCustomFieldTemplateService;\nimport io.metersphere.service.remote.project.TrackIssueTemplateService;\nimport io.metersphere.service.wapper.TrackProjectService;\nimport io.metersphere.service.wapper.UserService;\nimport io.metersphere.utils.DistinctKeyUtil;\nimport io.metersphere.xpack.track.dto.PlatformStatusDTO;\nimport io.metersphere.xpack.track.dto.PlatformUser;\nimport io.metersphere.xpack.track.dto.*;\nimport io.metersphere.xpack.track.dto.request.IssuesRequest;\nimport io.metersphere.xpack.track.dto.request.IssuesUpdateRequest;\nimport io.metersphere.xpack.track.issue.IssuesPlatform;\nimport io.metersphere.xpack.track.service.XpackIssueService;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.ibatis.session.ExecutorType;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionUtils;\nimport org.springframework.context.annotation.Lazy;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.stream.Collectors;\n\n@Service\n@Transactional(rollbackFor = Exception.class)\npublic class IssuesService {\n\n    @Resource\n    private BaseIntegrationService baseIntegrationService;\n    @Resource\n    private TrackProjectService trackProjectService;\n    @Resource\n    private BaseUserService baseUserService;\n    @Resource\n    private BaseProjectService baseProjectService;\n    @Resource\n    private TestPlanService testPlanService;\n    @Lazy\n    @Resource\n    private io.metersphere.service.TestCaseService testCaseService;\n    @Resource\n    private IssuesMapper issuesMapper;\n    @Resource\n    private TestCaseIssuesMapper testCaseIssuesMapper;\n    @Resource\n    private ExtIssuesMapper extIssuesMapper;\n    @Resource\n    private TrackCustomFieldTemplateService trackCustomFieldTemplateService;\n    @Resource\n    private BaseCustomFieldService baseCustomFieldService;\n    @Resource\n    private TrackIssueTemplateService trackIssueTemplateService;\n    @Resource\n    private TestCaseIssueService testCaseIssueService;\n    @Lazy\n    @Resource\n    private TestPlanTestCaseService testPlanTestCaseService;\n    @Resource\n    private IssueFollowMapper issueFollowMapper;\n    @Resource\n    private TestPlanTestCaseMapper testPlanTestCaseMapper;\n    @Resource\n    private CustomFieldIssuesService customFieldIssuesService;\n    @Resource\n    private CustomFieldIssuesMapper customFieldIssuesMapper;\n    @Resource\n    StringRedisTemplate stringRedisTemplate;\n    @Resource\n    private AttachmentService attachmentService;\n    @Resource\n    private ProjectMapper projectMapper;\n    @Resource\n    SqlSessionFactory sqlSessionFactory;\n    @Resource\n    private FileMetadataMapper fileMetadataMapper;\n    @Resource\n    private ExtIssueCommentMapper extIssueCommentMapper;\n    @Resource\n    private PlatformPluginService platformPluginService;\n    @Resource\n    private UserService userService;\n\n    private static final String SYNC_THIRD_PARTY_ISSUES_KEY = \"ISSUE:SYNC\";\n\n    public void testAuth(String workspaceId, String platform) {\n        IssuesRequest issuesRequest = new IssuesRequest();\n        issuesRequest.setWorkspaceId(workspaceId);\n        IssuesPlatform abstractPlatform = IssueFactory.createPlatform(platform, issuesRequest);\n        abstractPlatform.testAuth();\n    }\n\n\n    public IssuesWithBLOBs addIssues(IssuesUpdateRequest issuesRequest, List<MultipartFile> files) {\n        Project project = baseProjectService.getProjectById(issuesRequest.getProjectId());\n        IssuesWithBLOBs issues = null;\n        if (PlatformPluginService.isPluginPlatform(project.getPlatform())) {\n            PlatformIssuesUpdateRequest platformIssuesUpdateRequest =\n                    JSON.parseObject(JSON.toJSONString(issuesRequest), PlatformIssuesUpdateRequest.class);\n            List<PlatformCustomFieldItemDTO> customFieldItemDTOS =\n                    JSON.parseArray(JSON.toJSONString(issuesRequest.getRequestFields()), PlatformCustomFieldItemDTO.class);\n            platformIssuesUpdateRequest.setCustomFieldList(customFieldItemDTOS); // todo \u5168\u90e8\u63d2\u4ef6\u5316\u540e\u53bb\u6389\n            platformIssuesUpdateRequest.setUserPlatformUserConfig(userService.getCurrentPlatformInfoStr(SessionUtils.getCurrentWorkspaceId()));\n            platformIssuesUpdateRequest.setProjectConfig(PlatformPluginService.getCompatibleProjectConfig(project));\n\n            issues = platformPluginService.getPlatform(project.getPlatform())\n                    .addIssue(platformIssuesUpdateRequest);\n\n            insertIssues(issues);\n            issuesRequest.setId(issues.getId());\n            issues.setPlatform(project.getPlatform());\n            // \u7528\u4f8b\u4e0e\u7b2c\u4e09\u65b9\u7f3a\u9677\u5e73\u53f0\u4e2d\u7684\u7f3a\u9677\u5173\u8054\n            handleTestCaseIssues(issuesRequest);\n\n            // \u5982\u679c\u662f\u590d\u5236\u65b0\u589e, \u540c\u6b65MS\u9644\u4ef6\u5230Jira\n            if (StringUtils.isNotEmpty(issuesRequest.getCopyIssueId())) {\n                AttachmentRequest attachmentRequest = new AttachmentRequest();\n                attachmentRequest.setBelongId(issuesRequest.getCopyIssueId());\n                attachmentRequest.setBelongType(AttachmentType.ISSUE.type());\n                List<String> attachmentIds = attachmentService.getAttachmentIdsByParam(attachmentRequest);\n                if (CollectionUtils.isNotEmpty(attachmentIds)) {\n                    for (String attachmentId : attachmentIds) {\n                        FileAttachmentMetadata fileAttachmentMetadata = attachmentService.getFileAttachmentMetadataByFileId(attachmentId);\n                        File file = new File(fileAttachmentMetadata.getFilePath() + \"/\" + fileAttachmentMetadata.getName());\n                        attachmentService.syncIssuesAttachment(issues, file, AttachmentSyncType.UPLOAD);\n                    }\n                }\n            }\n        } else {\n            List<IssuesPlatform> platformList = getAddPlatforms(issuesRequest);\n            for (IssuesPlatform platform : platformList) {\n                issues = platform.addIssue(issuesRequest);\n            }\n        }\n\n        if (issuesRequest.getIsPlanEdit()) {\n            issuesRequest.getAddResourceIds().forEach(l -> {\n                testCaseIssueService.updateIssuesCount(l);\n            });\n        }\n        String issuesId = issues.getId();\n        saveFollows(issuesId, issuesRequest.getFollows());\n        customFieldIssuesService.addFields(issuesId, issuesRequest.getAddFields());\n        customFieldIssuesService.editFields(issuesId, issuesRequest.getEditFields());\n        if (StringUtils.isNotEmpty(issuesRequest.getCopyIssueId())) {\n            final String platformId = issues.getPlatformId();\n            // \u590d\u5236\u65b0\u589e, \u540c\u6b65\u7f3a\u9677\u7684MS\u9644\u4ef6\n            AttachmentRequest attachmentRequest = new AttachmentRequest();\n            attachmentRequest.setCopyBelongId(issuesRequest.getCopyIssueId());\n            attachmentRequest.setBelongId(issues.getId());\n            attachmentRequest.setBelongType(AttachmentType.ISSUE.type());\n            attachmentService.copyAttachment(attachmentRequest);\n\n            // MS\u9644\u4ef6\u540c\u6b65\u5230\u5176\u4ed6\u5e73\u53f0, Jira, Zentao\u5df2\u7ecf\u5728\u521b\u5efa\u7f3a\u9677\u65f6\u5904\u7406, AzureDevops\u5355\u72ec\u5904\u7406\n            if (StringUtils.equals(issuesRequest.getPlatform(), IssuesManagePlatform.AzureDevops.toString())) {\n                AttachmentRequest request = new AttachmentRequest();\n                request.setBelongId(issuesRequest.getCopyIssueId());\n                request.setBelongType(AttachmentType.ISSUE.type());\n                uploadAzureCopyAttachment(request, issuesRequest.getPlatform(), platformId);\n            }\n        } else {\n            final String issueId = issues.getId();\n            final String platform = issues.getPlatform();\n            // \u65b0\u589e, \u9700\u4fdd\u5b58\u5e76\u540c\u6b65\u6240\u6709\u5f85\u4e0a\u4f20\u7684\u9644\u4ef6\n            if (CollectionUtils.isNotEmpty(files)) {\n                files.forEach(file -> {\n                    AttachmentRequest attachmentRequest = new AttachmentRequest();\n                    attachmentRequest.setBelongId(issueId);\n                    attachmentRequest.setBelongType(AttachmentType.ISSUE.type());\n                    attachmentService.uploadAttachment(attachmentRequest, file);\n                });\n            }\n            // \u5904\u7406\u5f85\u5173\u8054\u7684\u6587\u4ef6\u9644\u4ef6, \u751f\u6210\u5173\u8054\u8bb0\u5f55, \u5e76\u540c\u6b65\u81f3\u7b2c\u4e09\u65b9\u5e73\u53f0\n            if (CollectionUtils.isNotEmpty(issuesRequest.getRelateFileMetaIds())) {\n                SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH);\n                FileAssociationMapper associationBatchMapper = sqlSession.getMapper(FileAssociationMapper.class);\n                AttachmentModuleRelationMapper attachmentModuleRelationBatchMapper = sqlSession.getMapper(AttachmentModuleRelationMapper.class);\n                FileAttachmentMetadataMapper fileAttachmentMetadataBatchMapper = sqlSession.getMapper(FileAttachmentMetadataMapper.class);\n                issuesRequest.getRelateFileMetaIds().forEach(filemetaId -> {\n                    FileMetadata fileMetadata = fileMetadataMapper.selectByPrimaryKey(filemetaId);\n                    FileAssociation fileAssociation = new FileAssociation();\n                    fileAssociation.setId(UUID.randomUUID().toString());\n                    fileAssociation.setFileMetadataId(filemetaId);\n                    fileAssociation.setFileType(fileMetadata.getType());\n                    fileAssociation.setType(FileAssociationType.ISSUE.name());\n                    fileAssociation.setProjectId(fileMetadata.getProjectId());\n                    fileAssociation.setSourceItemId(filemetaId);\n                    fileAssociation.setSourceId(issueId);\n                    associationBatchMapper.insert(fileAssociation);\n                    AttachmentModuleRelation relation = new AttachmentModuleRelation();\n                    relation.setRelationId(issueId);\n                    relation.setRelationType(AttachmentType.ISSUE.type());\n                    relation.setFileMetadataRefId(fileAssociation.getId());\n                    relation.setAttachmentId(UUID.randomUUID().toString());\n                    attachmentModuleRelationBatchMapper.insert(relation);\n                    FileAttachmentMetadata fileAttachmentMetadata = new FileAttachmentMetadata();\n                    BeanUtils.copyBean(fileAttachmentMetadata, fileMetadata);\n                    fileAttachmentMetadata.setId(relation.getAttachmentId());\n                    fileAttachmentMetadata.setCreator(fileMetadata.getCreateUser() == null ? StringUtils.EMPTY : fileMetadata.getCreateUser());\n                    fileAttachmentMetadata.setFilePath(fileMetadata.getPath() == null ? StringUtils.EMPTY : fileMetadata.getPath());\n                    fileAttachmentMetadataBatchMapper.insert(fileAttachmentMetadata);\n                    // \u4e0b\u8f7d\u6587\u4ef6\u7ba1\u7406\u6587\u4ef6, \u540c\u6b65\u5230\u7b2c\u4e09\u65b9\u5e73\u53f0\n                    File refFile = attachmentService.downloadMetadataFile(filemetaId, fileMetadata.getName());\n                    if (PlatformPluginService.isPluginPlatform(platform)) {\n                        issuesRequest.setPlatform(platform);\n                        attachmentService.syncIssuesAttachment(issuesRequest, refFile, AttachmentSyncType.UPLOAD);\n                    } else {\n                        IssuesRequest addIssueRequest = new IssuesRequest();\n                        addIssueRequest.setWorkspaceId(SessionUtils.getCurrentWorkspaceId());\n                        addIssueRequest.setProjectId(SessionUtils.getCurrentProjectId());\n                        Objects.requireNonNull(IssueFactory.createPlatform(platform, addIssueRequest))\n                                .syncIssuesAttachment(issuesRequest, refFile, AttachmentSyncType.UPLOAD);\n                    }\n                    FileUtils.deleteFile(FileUtils.ATTACHMENT_TMP_DIR + File.separator + fileMetadata.getName());\n                });\n                sqlSession.flushStatements();\n                if (sqlSession != null && sqlSessionFactory != null) {\n                    SqlSessionUtils.closeSqlSession(sqlSession, sqlSessionFactory);\n                }\n            }\n        }\n        return getIssue(issues.getId());\n    }\n\n    protected IssuesWithBLOBs insertIssues(IssuesWithBLOBs issues) {\n        if (StringUtils.isBlank(issues.getId())) {\n            issues.setId(UUID.randomUUID().toString());\n        }\n        issues.setCreateTime(System.currentTimeMillis());\n        issues.setUpdateTime(System.currentTimeMillis());\n        issues.setNum(getNextNum(issues.getProjectId()));\n        issues.setCreator(SessionUtils.getUserId());\n        issuesMapper.insert(issues);\n        return issues;\n    }\n\n    protected int getNextNum(String projectId) {\n        Issues issue = extIssuesMapper.getNextNum(projectId);\n        if (issue == null || issue.getNum() == null) {\n            return 100001;\n        } else {\n            return Optional.of(issue.getNum() + 1).orElse(100001);\n        }\n    }\n\n    public void handleTestCaseIssues(IssuesUpdateRequest issuesRequest) {\n        String issuesId = issuesRequest.getId();\n        List<String> deleteCaseIds = issuesRequest.getDeleteResourceIds();\n\n        if (!org.springframework.util.CollectionUtils.isEmpty(deleteCaseIds)) {\n            TestCaseIssuesExample example = new TestCaseIssuesExample();\n            example.createCriteria()\n                    .andResourceIdIn(deleteCaseIds)\n                    .andIssuesIdEqualTo(issuesId);\n            // \u6d4b\u8bd5\u8ba1\u5212\u7684\u7528\u4f8b deleteCaseIds \u662f\u7a7a\u7684\uff0c \u4e0d\u4f1a\u8fdb\u5230\u8fd9\u91cc\n            example.or(\n                    example.createCriteria()\n                            .andRefIdIn(deleteCaseIds)\n                            .andIssuesIdEqualTo(issuesId)\n            );\n            testCaseIssuesMapper.deleteByExample(example);\n        }\n\n        List<String> addCaseIds = issuesRequest.getAddResourceIds();\n\n        if (!org.springframework.util.CollectionUtils.isEmpty(addCaseIds)) {\n            if (issuesRequest.getIsPlanEdit()) {\n                addCaseIds.forEach(caseId -> {\n                    testCaseIssueService.add(issuesId, caseId, issuesRequest.getRefId(), IssueRefType.PLAN_FUNCTIONAL.name());\n                    testCaseIssueService.updateIssuesCount(caseId);\n                });\n            } else {\n                addCaseIds.forEach(caseId -> testCaseIssueService.add(issuesId, caseId, null, IssueRefType.FUNCTIONAL.name()));\n            }\n        }\n    }\n\n    public IssuesWithBLOBs updateIssues(IssuesUpdateRequest issuesRequest) {\n        PlatformIssuesUpdateRequest platformIssuesUpdateRequest = JSON.parseObject(JSON.toJSONString(issuesRequest), PlatformIssuesUpdateRequest.class);\n        Project project = baseProjectService.getProjectById(issuesRequest.getProjectId());\n        if (PlatformPluginService.isPluginPlatform(project.getPlatform())) {\n\n            Platform platform = platformPluginService.getPlatform(project.getPlatform());\n\n            if (platform.isAttachmentUploadSupport()) {\n                AttachmentRequest attachmentRequest = new AttachmentRequest();\n                attachmentRequest.setBelongId(issuesRequest.getId());\n                attachmentRequest.setBelongType(AttachmentType.ISSUE.type());\n                List<FileAttachmentMetadata> fileAttachmentMetadata = attachmentService.listMetadata(attachmentRequest);\n                Set<String> msAttachmentNames = fileAttachmentMetadata.stream()\n                        .map(FileAttachmentMetadata::getName)\n                        .collect(Collectors.toSet());\n                // \u83b7\u5f97\u7f3a\u9677MS\u9644\u4ef6\u540d\u79f0\n                platformIssuesUpdateRequest.setMsAttachmentNames(msAttachmentNames);\n            }\n\n            List<PlatformCustomFieldItemDTO> customFieldItemDTOS = JSON.parseArray(JSON.toJSONString(issuesRequest.getRequestFields()), PlatformCustomFieldItemDTO.class);\n            platformIssuesUpdateRequest.setCustomFieldList(customFieldItemDTOS); // todo \u5168\u90e8\u63d2\u4ef6\u5316\u540e\u53bb\u6389\n            platformIssuesUpdateRequest.setUserPlatformUserConfig(userService.getCurrentPlatformInfoStr(SessionUtils.getCurrentWorkspaceId()));\n            platformIssuesUpdateRequest.setProjectConfig(PlatformPluginService.getCompatibleProjectConfig(project));\n            IssuesWithBLOBs issue = platformPluginService.getPlatform(project.getPlatform())\n                    .updateIssue(platformIssuesUpdateRequest);\n\n            issue.setUpdateTime(System.currentTimeMillis());\n            issuesMapper.updateByPrimaryKeySelective(issue);\n            handleTestCaseIssues(issuesRequest);\n        } else {\n            List<IssuesPlatform> platformList = getUpdatePlatforms(issuesRequest);\n            platformList.forEach(platform -> {\n                platform.updateIssue(issuesRequest);\n            });\n        }\n\n        customFieldIssuesService.editFields(issuesRequest.getId(), issuesRequest.getEditFields());\n        customFieldIssuesService.addFields(issuesRequest.getId(), issuesRequest.getAddFields());\n\n        return getIssue(issuesRequest.getId());\n    }\n\n    public void saveFollows(String issueId, List<String> follows) {\n        IssueFollowExample example = new IssueFollowExample();\n        example.createCriteria().andIssueIdEqualTo(issueId);\n        issueFollowMapper.deleteByExample(example);\n        if (!CollectionUtils.isEmpty(follows)) {\n            for (String follow : follows) {\n                IssueFollow issueFollow = new IssueFollow();\n                issueFollow.setIssueId(issueId);\n                issueFollow.setFollowId(follow);\n                issueFollowMapper.insert(issueFollow);\n            }\n        }\n    }\n\n    public List<IssuesPlatform> getAddPlatforms(IssuesUpdateRequest updateRequest) {\n        List<String> platforms = new ArrayList<>();\n        // \u7f3a\u9677\u7ba1\u7406\u5173\u8054\n        platforms.add(getPlatform(updateRequest.getProjectId()));\n\n        if (CollectionUtils.isEmpty(platforms)) {\n            platforms.add(IssuesManagePlatform.Local.toString());\n        }\n        IssuesRequest issuesRequest = new IssuesRequest();\n        BeanUtils.copyBean(issuesRequest, updateRequest);\n        return IssueFactory.createPlatforms(platforms, issuesRequest);\n    }\n\n    public List<IssuesPlatform> getUpdatePlatforms(IssuesUpdateRequest updateRequest) {\n        String id = updateRequest.getId();\n        IssuesWithBLOBs issuesWithBLOBs = issuesMapper.selectByPrimaryKey(id);\n        String platform = issuesWithBLOBs.getPlatform();\n        List<String> platforms = new ArrayList<>();\n        if (StringUtils.isBlank(platform)) {\n            platforms.add(IssuesManagePlatform.Local.toString());\n        } else {\n            platforms.add(platform);\n        }\n        IssuesRequest issuesRequest = new IssuesRequest();\n        BeanUtils.copyBean(issuesRequest, updateRequest);\n        return IssueFactory.createPlatforms(platforms, issuesRequest);\n    }\n\n    public List<IssuesDao> getIssues(String caseResourceId, String refType) {\n        IssuesRequest issueRequest = new IssuesRequest();\n        issueRequest.setCaseResourceId(caseResourceId);\n        ServiceUtils.getDefaultOrder(issueRequest.getOrders());\n        issueRequest.setRefType(refType);\n        List<IssuesDao> issues = extIssuesMapper.getIssuesByCaseId(issueRequest);\n        handleCustomFieldStatus(issues);\n        return DistinctKeyUtil.distinctByKey(issues, IssuesDao::getId);\n    }\n\n    private void handleCustomFieldStatus(List<IssuesDao> issues) {\n        if (CollectionUtils.isEmpty(issues)) {\n            return;\n        }\n        List<String> issueIds = issues.stream().map(Issues::getId).collect(Collectors.toList());\n        String projectId = issues.get(0).getProjectId();\n        Project project = projectMapper.selectByPrimaryKey(projectId);\n        if (project == null) {\n            return;\n        }\n        String templateId = project.getIssueTemplateId();\n        if (StringUtils.isBlank(templateId)) {\n            return;\n        }\n        // \u6a21\u7248\u5bf9\u4e8e\u540c\u4e00\u4e2a\u7cfb\u7edf\u5b57\u6bb5\u5e94\u8be5\u53ea\u5173\u8054\u4e00\u6b21\n        List<CustomFieldDao> customFields = trackCustomFieldTemplateService.getCustomFieldByTemplateId(templateId);\n        List<String> fieldIds = customFields.stream()\n                .filter(customField -> StringUtils.equals(SystemCustomField.ISSUE_STATUS, customField.getName()))\n                .map(CustomFieldDao::getId).collect(Collectors.toList());\n        if (CollectionUtils.isEmpty(fieldIds)) {\n            return;\n        }\n        // \u8be5\u7cfb\u7edf\u5b57\u6bb5\u7684\u81ea\u5b9a\u4e49ID\n        String customFieldId = fieldIds.get(0);\n        CustomFieldIssuesExample example = new CustomFieldIssuesExample();\n        example.createCriteria().andFieldIdEqualTo(customFieldId).andResourceIdIn(issueIds);\n        List<CustomFieldIssues> customFieldIssues = customFieldIssuesMapper.selectByExample(example);\n        Map<String, String> statusMap = customFieldIssues.stream().collect(Collectors.toMap(CustomFieldIssues::getResourceId, CustomFieldIssues::getValue));\n        if (MapUtils.isEmpty(statusMap)) {\n            return;\n        }\n        for (IssuesDao issue : issues) {\n            issue.setStatus(statusMap.getOrDefault(issue.getId(), StringUtils.EMPTY).replaceAll(\"\\\"\", StringUtils.EMPTY));\n        }\n    }\n\n    public IssuesWithBLOBs getIssue(String id) {\n        IssuesDao issuesWithBLOBs = extIssuesMapper.selectByPrimaryKey(id);\n        if (issuesWithBLOBs == null) {\n            return null;\n        }\n        IssuesRequest issuesRequest = new IssuesRequest();\n        Project project = baseProjectService.getProjectById(issuesWithBLOBs.getProjectId());\n        issuesRequest.setWorkspaceId(project.getWorkspaceId());\n        issuesRequest.setProjectId(issuesWithBLOBs.getProjectId());\n        issuesRequest.setUserId(issuesWithBLOBs.getCreator());\n        if (StringUtils.equals(issuesWithBLOBs.getPlatform(), IssuesManagePlatform.Tapd.name())) {\n            TapdPlatform tapdPlatform = (TapdPlatform) IssueFactory.createPlatform(IssuesManagePlatform.Tapd.name(), issuesRequest);\n            List<String> tapdUsers = tapdPlatform.getTapdUsers(issuesWithBLOBs.getProjectId(), issuesWithBLOBs.getPlatformId());\n            issuesWithBLOBs.setTapdUsers(tapdUsers);\n        }\n        if (StringUtils.equals(issuesWithBLOBs.getPlatform(), IssuesManagePlatform.Zentao.name())) {\n            ZentaoPlatform zentaoPlatform = (ZentaoPlatform) IssueFactory.createPlatform(IssuesManagePlatform.Zentao.name(), issuesRequest);\n            zentaoPlatform.getZentaoAssignedAndBuilds(issuesWithBLOBs);\n        }\n        buildCustomField(issuesWithBLOBs);\n        return issuesWithBLOBs;\n    }\n\n    public String getPlatform(String projectId) {\n        Project project = baseProjectService.getProjectById(projectId);\n        return project.getPlatform();\n    }\n\n    public List<String> getPlatforms(Project project) {\n        String workspaceId = project.getWorkspaceId();\n        boolean tapd = isIntegratedPlatform(workspaceId, IssuesManagePlatform.Tapd.toString());\n        boolean jira = isIntegratedPlatform(workspaceId, IssuesManagePlatform.Jira.toString());\n        boolean zentao = isIntegratedPlatform(workspaceId, IssuesManagePlatform.Zentao.toString());\n        boolean azure = isIntegratedPlatform(workspaceId, IssuesManagePlatform.AzureDevops.toString());\n\n        List<String> platforms = new ArrayList<>();\n        if (tapd) {\n            // \u662f\u5426\u5173\u8054\u4e86\u9879\u76ee\n            String tapdId = project.getTapdId();\n            if (StringUtils.isNotBlank(tapdId) && StringUtils.equals(project.getPlatform(), IssuesManagePlatform.Tapd.toString())) {\n                platforms.add(IssuesManagePlatform.Tapd.name());\n            }\n\n        }\n\n        if (jira) {\n            String jiraKey = project.getJiraKey();\n            if (StringUtils.isNotBlank(jiraKey) && PlatformPluginService.isPluginPlatform(project.getPlatform())) {\n                platforms.add(IssuesManagePlatform.Jira.name());\n            }\n        }\n\n        if (zentao) {\n            String zentaoId = project.getZentaoId();\n            if (StringUtils.isNotBlank(zentaoId) && StringUtils.equals(project.getPlatform(), IssuesManagePlatform.Zentao.toString())) {\n                platforms.add(IssuesManagePlatform.Zentao.name());\n            }\n        }\n\n        if (azure) {\n            String azureDevopsId = project.getAzureDevopsId();\n            if (StringUtils.isNotBlank(azureDevopsId) && StringUtils.equals(project.getPlatform(), IssuesManagePlatform.AzureDevops.toString())) {\n                platforms.add(IssuesManagePlatform.AzureDevops.name());\n            }\n        }\n\n        return platforms;\n    }\n\n\n    /**\n     * \u662f\u5426\u5173\u8054\u5e73\u53f0\n     */\n    public boolean isIntegratedPlatform(String workspaceId, String platform) {\n        IntegrationRequest request = new IntegrationRequest();\n        request.setPlatform(platform);\n        request.setWorkspaceId(workspaceId);\n        ServiceIntegration integration = baseIntegrationService.get(request);\n        return StringUtils.isNotBlank(integration.getId());\n    }\n\n    public void closeLocalIssue(String issueId) {\n        IssuesWithBLOBs issues = new IssuesWithBLOBs();\n        issues.setId(issueId);\n        issues.setStatus(\"closed\");\n        issuesMapper.updateByPrimaryKeySelective(issues);\n    }\n\n    public List<PlatformUser> getTapdProjectUsers(IssuesRequest request) {\n        IssuesPlatform platform = IssueFactory.createPlatform(IssuesManagePlatform.Tapd.name(), request);\n        return platform.getPlatformUser();\n    }\n\n    public List<PlatformUser> getZentaoUsers(IssuesRequest request) {\n        IssuesPlatform platform = IssueFactory.createPlatform(IssuesManagePlatform.Zentao.name(), request);\n        return platform.getPlatformUser();\n    }\n\n    public void deleteIssue(String id) {\n        issuesMapper.deleteByPrimaryKey(id);\n        TestCaseIssuesExample example = new TestCaseIssuesExample();\n        example.createCriteria().andIssuesIdEqualTo(id);\n        List<TestCaseIssues> testCaseIssues = testCaseIssuesMapper.selectByExample(example);\n        testCaseIssues.forEach(i -> {\n            if (i.getRefType().equals(IssueRefType.PLAN_FUNCTIONAL.name())) {\n                testCaseIssueService.updateIssuesCount(i.getResourceId());\n            }\n        });\n        customFieldIssuesService.deleteByResourceId(id);\n        testCaseIssuesMapper.deleteByExample(example);\n    }\n\n    public void deleteIssueRelate(IssuesRequest request) {\n        String caseResourceId = request.getCaseResourceId();\n        String id = request.getId();\n        TestCaseIssuesExample example = new TestCaseIssuesExample();\n        if (request.getIsPlanEdit() == true) {\n            example.createCriteria().andResourceIdEqualTo(caseResourceId).andIssuesIdEqualTo(id);\n            testCaseIssuesMapper.deleteByExample(example);\n            testCaseIssueService.updateIssuesCount(caseResourceId);\n        } else {\n            IssuesUpdateRequest updateRequest = new IssuesUpdateRequest();\n            updateRequest.setId(request.getId());\n            updateRequest.setResourceId(request.getCaseResourceId());\n            updateRequest.setProjectId(request.getProjectId());\n            updateRequest.setWorkspaceId(request.getWorkspaceId());\n            List<IssuesPlatform> platformList = getUpdatePlatforms(updateRequest);\n            platformList.forEach(platform -> {\n                platform.removeIssueParentLink(updateRequest);\n            });\n\n            extIssuesMapper.deleteIssues(id, caseResourceId);\n            TestPlanTestCaseExample testPlanTestCaseExample = new TestPlanTestCaseExample();\n            testPlanTestCaseExample.createCriteria().andCaseIdEqualTo(caseResourceId);\n            List<TestPlanTestCase> list = testPlanTestCaseMapper.selectByExample(testPlanTestCaseExample);\n            list.forEach(item -> {\n                testCaseIssueService.updateIssuesCount(item.getId());\n            });\n        }\n    }\n\n    public void delete(String id) {\n        IssuesWithBLOBs issuesWithBLOBs = issuesMapper.selectByPrimaryKey(id);\n        List platforms = new ArrayList<>();\n        platforms.add(issuesWithBLOBs.getPlatform());\n        String projectId = issuesWithBLOBs.getProjectId();\n        Project project = baseProjectService.getProjectById(projectId);\n        IssuesRequest issuesRequest = new IssuesRequest();\n        issuesRequest.setWorkspaceId(project.getWorkspaceId());\n        if (PlatformPluginService.isPluginPlatform(issuesWithBLOBs.getPlatform())) {\n            platformPluginService.getPlatform(issuesWithBLOBs.getPlatform())\n                    .deleteIssue(issuesWithBLOBs.getPlatformId());\n            deleteIssue(id);\n        } else {\n            IssuesPlatform platform = IssueFactory.createPlatform(issuesWithBLOBs.getPlatform(), issuesRequest);\n            platform.deleteIssue(id);\n        }\n\n        // \u5220\u9664\u7f3a\u9677\u5bf9\u5e94\u7684\u9644\u4ef6\n        AttachmentRequest request = new AttachmentRequest();\n        request.setBelongId(id);\n        request.setBelongType(AttachmentType.ISSUE.type());\n        attachmentService.deleteAttachment(request);\n    }\n\n    public void batchDelete(IssuesUpdateRequest request) {\n        if (request.getBatchDeleteAll()) {\n            IssuesRequest issuesRequest = new IssuesRequest();\n            issuesRequest.setWorkspaceId(SessionUtils.getCurrentWorkspaceId());\n            issuesRequest.setProjectId(SessionUtils.getCurrentProjectId());\n            List<IssuesDao> issuesDaos = listByWorkspaceId(issuesRequest);\n            if (CollectionUtils.isNotEmpty(issuesDaos)) {\n                issuesDaos.parallelStream().forEach(issuesDao -> {\n                    delete(issuesDao.getId());\n                });\n            }\n        } else {\n            if (CollectionUtils.isNotEmpty(request.getBatchDeleteIds())) {\n                request.getBatchDeleteIds().parallelStream().forEach(id -> delete(id));\n            }\n        }\n    }\n\n    public List<ZentaoBuild> getZentaoBuilds(IssuesRequest request) {\n        try {\n            ZentaoPlatform platform = (ZentaoPlatform) IssueFactory.createPlatform(IssuesManagePlatform.Zentao.name(), request);\n            return platform.getBuilds();\n        } catch (Exception e) {\n            LogUtil.error(\"get zentao builds fail.\");\n            LogUtil.error(e.getMessage(), e);\n            MSException.throwException(Translator.get(\"zentao_get_project_builds_fail\"));\n        }\n        return null;\n    }\n\n    public List<IssuesDao> list(IssuesRequest request) {\n        request.setOrders(ServiceUtils.getDefaultOrderByField(request.getOrders(), \"create_time\"));\n        request.getOrders().forEach(order -> {\n            if (StringUtils.isNotEmpty(order.getName()) && order.getName().startsWith(\"custom\")) {\n                request.setIsCustomSorted(true);\n                request.setCustomFieldId(order.getName().replace(\"custom_\", StringUtils.EMPTY));\n                order.setPrefix(\"cfi\");\n                order.setName(\"value\");\n            }\n        });\n        ServiceUtils.setBaseQueryRequestCustomMultipleFields(request);\n        List<IssuesDao> issues = extIssuesMapper.getIssues(request);\n\n        Map<String, Set<String>> caseSetMap = getCaseSetMap(issues);\n        Map<String, User> userMap = getUserMap(issues);\n        Map<String, String> planMap = getPlanMap(issues);\n\n        issues.forEach(item -> {\n            User createUser = userMap.get(item.getCreator());\n            if (createUser != null) {\n                item.setCreatorName(createUser.getName());\n            }\n            String resourceName = planMap.get(item.getResourceId());\n            if (StringUtils.isNotBlank(resourceName)) {\n                item.setResourceName(resourceName);\n            }\n\n            Set<String> caseIdSet = caseSetMap.get(item.getId());\n            if (caseIdSet == null) {\n                caseIdSet = new HashSet<>();\n            }\n            item.setCaseIds(new ArrayList<>(caseIdSet));\n            item.setCaseCount(caseIdSet.size());\n        });\n        buildCustomField(issues);\n        return issues;\n    }\n\n    private void buildCustomField(List<IssuesDao> data) {\n        if (CollectionUtils.isEmpty(data)) {\n            return;\n        }\n        Map<String, List<CustomFieldDao>> fieldMap =\n                customFieldIssuesService.getMapByResourceIds(data.stream().map(IssuesDao::getId).collect(Collectors.toList()));\n        data.forEach(i -> i.setFields(fieldMap.get(i.getId())));\n    }\n\n    private void buildCustomField(IssuesDao data) {\n        CustomFieldIssuesExample example = new CustomFieldIssuesExample();\n        example.createCriteria().andResourceIdEqualTo(data.getId());\n        List<CustomFieldIssues> customFieldTestCases = customFieldIssuesMapper.selectByExample(example);\n        List<CustomFieldDao> fields = new ArrayList<>();\n        customFieldTestCases.forEach(i -> {\n            CustomFieldDao customFieldDao = new CustomFieldDao();\n            customFieldDao.setId(i.getFieldId());\n            customFieldDao.setValue(i.getValue());\n            customFieldDao.setTextValue(i.getTextValue());\n            fields.add(customFieldDao);\n        });\n        data.setFields(fields);\n    }\n\n    private void buildCustomField(List<IssuesDao> data, Boolean isThirdTemplate, List<CustomFieldDao> customFields) {\n        if (CollectionUtils.isEmpty(data)) {\n            return;\n        }\n\n        Map<String, List<CustomFieldDao>> fieldMap =\n                customFieldIssuesService.getMapByResourceIds(data.stream().map(IssuesDao::getId).collect(Collectors.toList()));\n        try {\n            Map<String, CustomField> fieldMaps = new HashMap<>();\n            if (isThirdTemplate) {\n                fieldMaps = customFields.stream().collect(Collectors.toMap(CustomFieldDao::getId, field -> (CustomField) field));\n            } else {\n                List<CustomFieldDao> customfields = fieldMap.get(data.get(0).getId());\n                if (CollectionUtils.isNotEmpty(customfields) && customfields.size() > 0) {\n                    List<String> ids = customfields.stream().map(CustomFieldDao::getId).collect(Collectors.toList());\n                    List<CustomField> issueFields = baseCustomFieldService.getFieldByIds(ids);\n                    fieldMaps = issueFields.stream().collect(Collectors.toMap(CustomField::getId, field -> field));\n                }\n            }\n\n            for (Map.Entry<String, List<CustomFieldDao>> entry : fieldMap.entrySet()) {\n                for (CustomFieldDao fieldDao : entry.getValue()) {\n                    CustomField customField = fieldMaps.get(fieldDao.getId());\n                    if (customField != null) {\n                        fieldDao.setName(customField.getName());\n                        if (StringUtils.equalsAnyIgnoreCase(customField.getType(), CustomFieldType.RICH_TEXT.getValue(), CustomFieldType.TEXTAREA.getValue())) {\n                            fieldDao.setValue(fieldDao.getTextValue());\n                        }\n                        if (StringUtils.equalsAnyIgnoreCase(customField.getType(), CustomFieldType.DATE.getValue()) && StringUtils.isNotEmpty(fieldDao.getValue()) && !StringUtils.equals(fieldDao.getValue(), \"null\")) {\n                            Date date = DateUtils.parseDate(fieldDao.getValue().replaceAll(\"\\\"\", StringUtils.EMPTY), \"yyyy-MM-dd\");\n                            String format = DateUtils.format(date, \"yyyy/MM/dd\");\n                            fieldDao.setValue(\"\\\"\" + format + \"\\\"\");\n                        }\n                        if (StringUtils.equalsAnyIgnoreCase(customField.getType(), CustomFieldType.DATETIME.getValue()) && StringUtils.isNotEmpty(fieldDao.getValue()) && !StringUtils.equals(fieldDao.getValue(), \"null\")) {\n                            Date date = null;\n                            if (fieldDao.getValue().contains(\"T\") && fieldDao.getValue().length() == 18) {\n                                date = DateUtils.parseDate(fieldDao.getValue().replaceAll(\"\\\"\", StringUtils.EMPTY), \"yyyy-MM-dd'T'HH:mm\");\n                            } else if (fieldDao.getValue().contains(\"T\") && fieldDao.getValue().length() == 21) {\n                                date = DateUtils.parseDate(fieldDao.getValue().replaceAll(\"\\\"\", StringUtils.EMPTY), \"yyyy-MM-dd'T'HH:mm:ss\");\n                            } else if (fieldDao.getValue().contains(\"T\") && fieldDao.getValue().length() > 21) {\n                                date = DateUtils.parseDate(fieldDao.getValue().replaceAll(\"\\\"\", StringUtils.EMPTY).substring(0, 19), \"yyyy-MM-dd'T'HH:mm:ss\");\n                            } else {\n                                date = DateUtils.parseDate(fieldDao.getValue().replaceAll(\"\\\"\", StringUtils.EMPTY));\n                            }\n                            String format = DateUtils.format(date, \"yyyy/MM/dd HH:mm:ss\");\n                            fieldDao.setValue(\"\\\"\" + format + \"\\\"\");\n                        }\n                        if (StringUtils.equalsAnyIgnoreCase(customField.getType(), CustomFieldType.SELECT.getValue(),\n                                CustomFieldType.MULTIPLE_SELECT.getValue(), CustomFieldType.CHECKBOX.getValue(), CustomFieldType.RADIO.getValue())\n                                && !StringUtils.equalsAnyIgnoreCase(customField.getName(), SystemCustomField.ISSUE_STATUS)) {\n                            fieldDao.setValue(parseOptionValue(customField.getOptions(), fieldDao.getValue()));\n                        }\n                    }\n                }\n            }\n\n            data.forEach(i -> i.setFields(fieldMap.get(i.getId())));\n        } catch (Exception e) {\n            MSException.throwException(e.getMessage());\n        }\n\n    }\n\n    private Map<String, List<IssueCommentDTO>> getCommentMap(List<IssuesDao> issues) {\n        List<String> issueIds = issues.stream().map(IssuesDao::getId).collect(Collectors.toList());\n        List<IssueCommentDTO> comments = extIssueCommentMapper.getCommentsByIssueIds(issueIds);\n        Map<String, List<IssueCommentDTO>> commentMap = comments.stream().collect(Collectors.groupingBy(IssueCommentDTO::getIssueId));\n        return commentMap;\n    }\n\n    private Map<String, String> getPlanMap(List<IssuesDao> issues) {\n        List<String> resourceIds = issues.stream().map(IssuesDao::getResourceId)\n                .filter(Objects::nonNull)\n                .collect(Collectors.toList());\n\n        List<TestPlan> testPlans = testPlanService.getTestPlanByIds(resourceIds);\n        Map<String, String> planMap = new HashMap<>();\n        if (testPlans != null) {\n            planMap = testPlans.stream()\n                    .collect(Collectors.toMap(TestPlan::getId, TestPlan::getName));\n        }\n        return planMap;\n    }\n\n    private Map<String, User> getUserMap(List<IssuesDao> issues) {\n        List<String> userIds = issues.stream()\n                .map(IssuesDao::getCreator)\n                .collect(Collectors.toList());\n        return ServiceUtils.getUserMap(userIds);\n    }\n\n    private Map<String, Set<String>> getCaseSetMap(List<IssuesDao> issues) {\n        List<String> ids = issues.stream().map(Issues::getId).collect(Collectors.toList());\n        Map<String, Set<String>> map = new HashMap<>();\n        if (ids.size() == 0) {\n            return map;\n        }\n        TestCaseIssuesExample example = new TestCaseIssuesExample();\n        example.createCriteria()\n                .andIssuesIdIn(ids);\n        List<TestCaseIssues> testCaseIssues = testCaseIssuesMapper.selectByExample(example);\n\n        List<String> caseIds = testCaseIssues.stream().map(x ->\n                x.getRefType().equals(IssueRefType.PLAN_FUNCTIONAL.name()) ? x.getRefId() : x.getResourceId())\n                .collect(Collectors.toList());\n\n        List<TestCaseDTO> notInTrashCase = testCaseService.getTestCaseByIds(caseIds);\n\n        if (CollectionUtils.isNotEmpty(notInTrashCase)) {\n            Set<String> notInTrashCaseSet = notInTrashCase.stream()\n                    .map(TestCaseDTO::getId)\n                    .collect(Collectors.toSet());\n\n            testCaseIssues.forEach(i -> {\n                Set<String> caseIdSet = new HashSet<>();\n                String caseId = i.getRefType().equals(IssueRefType.PLAN_FUNCTIONAL.name()) ? i.getRefId() : i.getResourceId();\n                if (notInTrashCaseSet.contains(caseId)) {\n                    caseIdSet.add(caseId);\n                }\n                if (map.get(i.getIssuesId()) != null) {\n                    map.get(i.getIssuesId()).addAll(caseIdSet);\n                } else {\n                    map.put(i.getIssuesId(), caseIdSet);\n                }\n            });\n        }\n        return map;\n    }\n\n    public Map<String, List<IssuesDao>> getIssueMap(List<IssuesDao> issues) {\n        Map<String, List<IssuesDao>> issueMap = new HashMap<>();\n        issues.forEach(item -> {\n            String platForm = item.getPlatform();\n            if (StringUtils.equalsIgnoreCase(IssuesManagePlatform.Local.toString(), item.getPlatform())) {\n                // \u53ef\u80fd\u6709\u5927\u5c0f\u5199\u7684\u95ee\u9898\n                platForm = IssuesManagePlatform.Local.toString();\n            }\n            List<IssuesDao> issuesDao = issueMap.get(platForm);\n            if (issuesDao == null) {\n                issuesDao = new ArrayList<>();\n            }\n            issuesDao.add(item);\n            issueMap.put(platForm, issuesDao);\n        });\n        return issueMap;\n    }\n\n    public void syncThirdPartyIssues() {\n        List<String> projectIds = trackProjectService.getThirdPartProjectIds();\n        projectIds.forEach(id -> {\n            try {\n                syncThirdPartyIssues(id);\n            } catch (Exception e) {\n                LogUtil.error(e.getMessage(), e);\n            }\n        });\n    }\n\n    public void issuesCount() {\n        LogUtil.info(\"\u6d4b\u8bd5\u8ba1\u5212-\u6d4b\u8bd5\u7528\u4f8b\u540c\u6b65\u7f3a\u9677\u4fe1\u606f\u5f00\u59cb\");\n        int pageSize = 100;\n        int pages = 1;\n        for (int i = 0; i < pages; i++) {\n            Page<List<TestPlanTestCase>> page = PageHelper.startPage(i, pageSize, true);\n            List<TestPlanTestCaseWithBLOBs> list = testPlanTestCaseService.listAll();\n            pages = page.getPages();// \u66ff\u6362\u6210\u771f\u5b9e\u7684\u503c\n            list.forEach(l -> {\n                testCaseIssueService.updateIssuesCount(l.getCaseId());\n            });\n        }\n        LogUtil.info(\"\u6d4b\u8bd5\u8ba1\u5212-\u6d4b\u8bd5\u7528\u4f8b\u540c\u6b65\u7f3a\u9677\u4fe1\u606f\u7ed3\u675f\");\n    }\n\n    public boolean checkSync(String projectId) {\n        String syncValue = getSyncKey(projectId);\n        if (StringUtils.isNotEmpty(syncValue)) {\n            return false;\n        }\n        return true;\n    }\n\n    public String getSyncKey(String projectId) {\n        return stringRedisTemplate.opsForValue().get(SYNC_THIRD_PARTY_ISSUES_KEY + \":\" + projectId);\n    }\n\n    public void setSyncKey(String projectId) {\n        stringRedisTemplate.opsForValue().set(SYNC_THIRD_PARTY_ISSUES_KEY + \":\" + projectId,\n                UUID.randomUUID().toString(), 60 * 10, TimeUnit.SECONDS);\n    }\n\n    public void deleteSyncKey(String projectId) {\n        stringRedisTemplate.delete(SYNC_THIRD_PARTY_ISSUES_KEY + \":\" + projectId);\n    }\n\n    public boolean syncThirdPartyIssues(String projectId) {\n        if (StringUtils.isNotBlank(projectId)) {\n            String syncValue = getSyncKey(projectId);\n            if (StringUtils.isNotEmpty(syncValue)) {\n                return false;\n            }\n\n            setSyncKey(projectId);\n\n            Project project = baseProjectService.getProjectById(projectId);\n            List<IssuesDao> issues = extIssuesMapper.getIssueForSync(projectId, project.getPlatform());\n\n            if (CollectionUtils.isEmpty(issues)) {\n                deleteSyncKey(projectId);\n                return true;\n            }\n\n            IssuesRequest issuesRequest = new IssuesRequest();\n            issuesRequest.setProjectId(projectId);\n            issuesRequest.setWorkspaceId(project.getWorkspaceId());\n\n            try {\n                if (!trackProjectService.isThirdPartTemplate(project)) {\n                    String defaultCustomFields = getDefaultCustomFields(projectId);\n                    issuesRequest.setDefaultCustomFields(defaultCustomFields);\n                }\n                if (PlatformPluginService.isPluginPlatform(project.getPlatform())) {\n                    // \u5206\u6279\u5904\u7406\n                    SubListUtil.dealForSubList(issues, 500, (subIssue) ->\n                            syncPluginThirdPartyIssues(subIssue, project, issuesRequest.getDefaultCustomFields()));\n                } else {\n                    IssuesPlatform platform = IssueFactory.createPlatform(project.getPlatform(), issuesRequest);\n                    syncThirdPartyIssues(platform::syncIssues, project, issues);\n                }\n            } catch (Exception e) {\n                throw e;\n            } finally {\n                deleteSyncKey(projectId);\n            }\n        }\n        return true;\n    }\n\n    public void syncPluginThirdPartyIssues(List<IssuesDao> issues, Project project, String defaultCustomFields) {\n        List<PlatformIssuesDTO> platformIssues = JSON.parseArray(JSON.toJSONString(issues), PlatformIssuesDTO.class);\n        platformIssues.stream().forEach(item -> {\n            // \u7ed9\u7f3a\u9677\u6dfb\u52a0\u81ea\u5b9a\u4e49\u5b57\u6bb5\n            List<PlatformCustomFieldItemDTO> platformCustomFieldList = extIssuesMapper.getIssueCustomField(item.getId()).stream()\n                    .map(field -> {\n                        PlatformCustomFieldItemDTO platformCustomFieldItemDTO = new PlatformCustomFieldItemDTO();\n                        BeanUtils.copyBean(platformCustomFieldItemDTO, field);\n                        return platformCustomFieldItemDTO;\n                    })\n                    .collect(Collectors.toList());\n            item.setCustomFieldList(platformCustomFieldList);\n        });\n        SyncIssuesRequest request = new SyncIssuesRequest();\n        request.setIssues(platformIssues);\n        request.setDefaultCustomFields(defaultCustomFields);\n        request.setProjectConfig(PlatformPluginService.getCompatibleProjectConfig(project));\n        Platform platform = platformPluginService.getPlatform(project.getPlatform(), project.getWorkspaceId());\n\n        // \u83b7\u53d6\u9700\u8981\u53d8\u66f4\u7684\u7f3a\u9677\n        SyncIssuesResult syncIssuesResult = platform.syncIssues(request);\n        List<IssuesWithBLOBs> updateIssues = syncIssuesResult.getUpdateIssues();\n\n        SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH);\n        try {\n            IssuesMapper issueBatchMapper = sqlSession.getMapper(IssuesMapper.class);\n            AttachmentModuleRelationMapper batchAttachmentModuleRelationMapper = sqlSession.getMapper(AttachmentModuleRelationMapper.class);\n\n            // \u6279\u91cf\u66f4\u65b0\n            updateIssues.forEach(issueBatchMapper::updateByPrimaryKeySelective);\n\n            // \u6279\u91cf\u5220\u9664\n            syncIssuesResult.getDeleteIssuesIds()\n                    .stream()\n                    .forEach(issueBatchMapper::deleteByPrimaryKey);\n\n            try {\n                // \u540c\u6b65\u9644\u4ef6\n                syncPluginIssueAttachment(platform, syncIssuesResult, batchAttachmentModuleRelationMapper);\n            } catch (Exception e) {\n                LogUtil.error(e);\n            }\n\n            HashMap<String, List<CustomFieldResourceDTO>> customFieldMap = new HashMap<>();\n            updateIssues.forEach(item -> {\n                List<CustomFieldResourceDTO> customFieldResource = baseCustomFieldService.getCustomFieldResourceDTO(item.getCustomFields());\n                customFieldMap.put(item.getId(), customFieldResource);\n            });\n\n            // \u4fee\u6539\u81ea\u5b9a\u4e49\u5b57\u6bb5\n            customFieldIssuesService.batchEditFields(customFieldMap);\n\n            sqlSession.commit();\n        } catch (Exception e) {\n            sqlSession.close();\n            MSException.throwException(e);\n        }\n    }\n\n    private void syncPluginIssueAttachment(Platform platform, SyncIssuesResult syncIssuesResult,\n                                           AttachmentModuleRelationMapper batchAttachmentModuleRelationMapper) {\n        Map<String, List<PlatformAttachment>> attachmentMap = syncIssuesResult.getAttachmentMap();\n        if (MapUtils.isNotEmpty(attachmentMap)) {\n            for (String issueId : attachmentMap.keySet()) {\n                // \u67e5\u8be2\u6211\u4eec\u5e73\u53f0\u7684\u9644\u4ef6\n                Set<String> jiraAttachmentSet = new HashSet<>();\n                List<FileAttachmentMetadata> allMsAttachments = getIssueFileAttachmentMetadata(issueId);\n                Set<String> attachmentsNameSet = allMsAttachments.stream()\n                        .map(FileAttachmentMetadata::getName)\n                        .collect(Collectors.toSet());\n\n                List<PlatformAttachment> syncAttachments = attachmentMap.get(issueId);\n                for (PlatformAttachment syncAttachment : syncAttachments) {\n                    String fileName = syncAttachment.getFileName();\n                    String fileKey = syncAttachment.getFileKey();\n                    if (!attachmentsNameSet.contains(fileName)) {\n                        jiraAttachmentSet.add(fileName);\n                        saveAttachmentModuleRelation(platform, issueId, fileName, fileKey, batchAttachmentModuleRelationMapper);\n                    }\n\n                }\n\n                // \u5220\u9664Jira\u4e2d\u4e0d\u5b58\u5728\u7684\u9644\u4ef6\n                deleteSyncAttachment(batchAttachmentModuleRelationMapper, jiraAttachmentSet, allMsAttachments);\n            }\n        }\n    }\n\n    private void syncAllPluginIssueAttachment(Project project, IssueSyncRequest syncIssuesResult) {\n        // todo \u6240\u6709\u5e73\u53f0\u6539\u9020\u5b8c\u4e4b\u540e\u5220\u9664\n        if (!StringUtils.equals(project.getPlatform(), IssuesManagePlatform.Jira.name())) {\n            return;\n        }\n        SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH);\n        try {\n            AttachmentModuleRelationMapper batchAttachmentModuleRelationMapper = sqlSession.getMapper(AttachmentModuleRelationMapper.class);\n            Platform platform = platformPluginService.getPlatform(project.getPlatform(), project.getWorkspaceId());\n            Map<String, List<io.metersphere.xpack.track.dto.PlatformAttachment>> attachmentMap = syncIssuesResult.getAttachmentMap();\n            if (MapUtils.isNotEmpty(attachmentMap)) {\n                for (String issueId : attachmentMap.keySet()) {\n                    // \u67e5\u8be2\u6211\u4eec\u5e73\u53f0\u7684\u9644\u4ef6\n                    Set<String> jiraAttachmentSet = new HashSet<>();\n                    List<FileAttachmentMetadata> allMsAttachments = getIssueFileAttachmentMetadata(issueId);\n                    Set<String> attachmentsNameSet = allMsAttachments.stream()\n                            .map(FileAttachmentMetadata::getName)\n                            .collect(Collectors.toSet());\n\n                    List<io.metersphere.xpack.track.dto.PlatformAttachment> syncAttachments = attachmentMap.get(issueId);\n                    for (io.metersphere.xpack.track.dto.PlatformAttachment syncAttachment : syncAttachments) {\n                        String fileName = syncAttachment.getFileName();\n                        String fileKey = syncAttachment.getFileKey();\n                        if (!attachmentsNameSet.contains(fileName)) {\n                            jiraAttachmentSet.add(fileName);\n                            saveAttachmentModuleRelation(platform, issueId, fileName, fileKey, batchAttachmentModuleRelationMapper);\n                        }\n\n                    }\n\n                    // \u5220\u9664Jira\u4e2d\u4e0d\u5b58\u5728\u7684\u9644\u4ef6\n                    deleteSyncAttachment(batchAttachmentModuleRelationMapper, jiraAttachmentSet, allMsAttachments);\n                }\n            }\n        } catch (Exception e) {\n            LogUtil.error(e);\n        } finally {\n            SqlSessionUtils.closeSqlSession(sqlSession, sqlSessionFactory);\n        }\n    }\n\n    private void deleteSyncAttachment(AttachmentModuleRelationMapper batchAttachmentModuleRelationMapper,\n                                      Set<String> jiraAttachmentSet,\n                                      List<FileAttachmentMetadata> allMsAttachments) {\n        // \u5220\u9664Jira\u4e2d\u4e0d\u5b58\u5728\u7684\u9644\u4ef6\n        if (CollectionUtils.isNotEmpty(allMsAttachments)) {\n            List<FileAttachmentMetadata> deleteMsAttachments = allMsAttachments.stream()\n                    .filter(msAttachment -> !jiraAttachmentSet.contains(msAttachment.getName()))\n                    .collect(Collectors.toList());\n            deleteMsAttachments.forEach(fileAttachmentMetadata -> {\n                List<String> ids = List.of(fileAttachmentMetadata.getId());\n                AttachmentModuleRelationExample example = new AttachmentModuleRelationExample();\n                example.createCriteria().andAttachmentIdIn(ids).andRelationTypeEqualTo(AttachmentType.ISSUE.type());\n                // \u5220\u9664MS\u9644\u4ef6\u53ca\u5173\u8054\u6570\u636e\n                attachmentService.deleteAttachmentByIds(ids);\n                attachmentService.deleteFileAttachmentByIds(ids);\n                batchAttachmentModuleRelationMapper.deleteByExample(example);\n            });\n        }\n    }\n\n    private void saveAttachmentModuleRelation(Platform platform, String issueId,\n                                              String fileName, String fileKey,\n                                              AttachmentModuleRelationMapper batchAttachmentModuleRelationMapper) {\n        try {\n            byte[] content = platform.getAttachmentContent(fileKey);\n            if (content == null) {\n                return;\n            }\n            FileAttachmentMetadata fileAttachmentMetadata = attachmentService\n                    .saveAttachmentByBytes(content, AttachmentType.ISSUE.type(), issueId, fileName);\n            AttachmentModuleRelation attachmentModuleRelation = new AttachmentModuleRelation();\n            attachmentModuleRelation.setAttachmentId(fileAttachmentMetadata.getId());\n            attachmentModuleRelation.setRelationId(issueId);\n            attachmentModuleRelation.setRelationType(AttachmentType.ISSUE.type());\n            batchAttachmentModuleRelationMapper.insert(attachmentModuleRelation);\n        } catch (Exception e) {\n            LogUtil.error(e);\n        }\n\n    }\n\n    private List<FileAttachmentMetadata> getIssueFileAttachmentMetadata(String issueId) {\n        AttachmentRequest attachmentRequest = new AttachmentRequest();\n        attachmentRequest.setBelongType(AttachmentType.ISSUE.type());\n        attachmentRequest.setBelongId(issueId);\n        List<FileAttachmentMetadata> allMsAttachments = attachmentService.listMetadata(attachmentRequest);\n        return allMsAttachments;\n    }\n\n\n    /**\n     * \u83b7\u53d6\u9ed8\u8ba4\u7684\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7684\u53d6\u503c\uff0c\u540c\u6b65\u4e4b\u540e\u66f4\u65b0\u6210\u7b2c\u4e09\u65b9\u5e73\u53f0\u7684\u503c\n     *\n     * @param projectId\n     * @return\n     */\n    public String getDefaultCustomFields(String projectId) {\n        IssueTemplateDao template = trackIssueTemplateService.getTemplate(projectId);\n        List<CustomFieldDao> customFields = trackCustomFieldTemplateService.getCustomFieldByTemplateId(template.getId());\n        return getCustomFieldsValuesString(customFields);\n    }\n\n    public String getCustomFieldsValuesString(List<CustomFieldDao> customFields) {\n        List fields = new ArrayList();\n        customFields.forEach(item -> {\n            Map<String, Object> field = new LinkedHashMap<>();\n            field.put(\"customData\", item.getCustomData());\n            field.put(\"id\", item.getId());\n            field.put(\"name\", item.getName());\n            field.put(\"type\", item.getType());\n            String defaultValue = item.getDefaultValue();\n            if (StringUtils.isNotBlank(defaultValue)) {\n                field.put(\"value\", JSON.parseObject(defaultValue));\n            }\n            fields.add(field);\n        });\n        return JSON.toJSONString(fields);\n    }\n\n    public void syncThirdPartyIssues(BiConsumer<Project, List<IssuesDao>> syncFuc, Project project, List<IssuesDao> issues) {\n        try {\n            syncFuc.accept(project, issues);\n        } catch (Exception e) {\n            LogUtil.error(e.getMessage(), e);\n        }\n    }\n\n    private String getConfig(String orgId, String platform) {\n        IntegrationRequest request = new IntegrationRequest();\n        if (StringUtils.isBlank(orgId)) {\n            MSException.throwException(\"organization id is null\");\n        }\n        request.setWorkspaceId(orgId);\n        request.setPlatform(platform);\n\n        ServiceIntegration integration = baseIntegrationService.get(request);\n        return integration.getConfiguration();\n    }\n\n    public String getLogDetails(String id) {\n        IssuesWithBLOBs issuesWithBLOBs = issuesMapper.selectByPrimaryKey(id);\n        if (issuesWithBLOBs != null) {\n            List<DetailColumn> columns = ReflexObjectUtil.getColumns(issuesWithBLOBs, TestPlanReference.issuesColumns);\n            OperatingLogDetails details = new OperatingLogDetails(JSON.toJSONString(issuesWithBLOBs.getId()), issuesWithBLOBs.getProjectId(), issuesWithBLOBs.getTitle(), issuesWithBLOBs.getCreator(), columns);\n            return JSON.toJSONString(details);\n        }\n        return null;\n    }\n\n    public String getLogDetails(IssuesUpdateRequest issuesRequest) {\n        if (issuesRequest != null) {\n            issuesRequest.setCreator(SessionUtils.getUserId());\n            List<DetailColumn> columns = ReflexObjectUtil.getColumns(issuesRequest, TestPlanReference.issuesColumns);\n            OperatingLogDetails details = new OperatingLogDetails(null, issuesRequest.getProjectId(), issuesRequest.getTitle(), issuesRequest.getCreator(), columns);\n            return JSON.toJSONString(details);\n        }\n        return null;\n    }\n\n    public List<IssuesDao> relateList(IssuesRequest request) {\n        return extIssuesMapper.getIssues(request);\n    }\n\n    public void userAuth(AuthUserIssueRequest authUserIssueRequest) {\n        IssuesRequest issuesRequest = new IssuesRequest();\n        issuesRequest.setWorkspaceId(authUserIssueRequest.getWorkspaceId());\n        IssuesPlatform abstractPlatform = IssueFactory.createPlatform(authUserIssueRequest.getPlatform(), issuesRequest);\n        abstractPlatform.userAuth(authUserIssueRequest);\n    }\n\n    public void calculatePlanReport(String planId, TestPlanSimpleReportDTO report) {\n        List<PlanReportIssueDTO> planReportIssueDTOS = extIssuesMapper.selectForPlanReport(planId);\n        planReportIssueDTOS = DistinctKeyUtil.distinctByKey(planReportIssueDTOS, PlanReportIssueDTO::getId);\n        TestPlanFunctionResultReportDTO functionResult = report.getFunctionResult();\n        List<TestCaseReportStatusResultDTO> statusResult = new ArrayList<>();\n        Map<String, TestCaseReportStatusResultDTO> statusResultMap = new HashMap<>();\n\n        planReportIssueDTOS.forEach(item -> {\n            String status;\n            // \u672c\u5730\u7f3a\u9677\n            if (StringUtils.equalsIgnoreCase(item.getPlatform(), IssuesManagePlatform.Local.name())\n                    || StringUtils.isBlank(item.getPlatform())) {\n                status = item.getStatus();\n            } else {\n                status = item.getPlatformStatus();\n            }\n            if (StringUtils.isBlank(status)) {\n                status = IssuesStatus.NEW.toString();\n            }\n            TestPlanStatusCalculator.buildStatusResultMap(statusResultMap, status);\n        });\n        Set<String> status = statusResultMap.keySet();\n        status.forEach(item -> {\n            TestPlanStatusCalculator.addToReportStatusResultList(statusResultMap, statusResult, item);\n        });\n        functionResult.setIssueData(statusResult);\n    }\n\n    public List<IssuesDao> getIssuesByPlanId(String planId) {\n        IssuesRequest issueRequest = new IssuesRequest();\n        issueRequest.setPlanId(planId);\n        List<IssuesDao> planIssues = extIssuesMapper.getPlanIssues(issueRequest);\n\n        buildCustomField(planIssues);\n\n        replaceStatus(planIssues, planId);\n        return DistinctKeyUtil.distinctByKey(planIssues, IssuesDao::getId);\n    }\n\n    /**\n     * \u83b7\u53d6\u7f3a\u9677\u72b6\u6001\u7684\u81ea\u5b9a\u4e49\u5b57\u6bb5\u66ff\u6362\n     *\n     * @param planIssues\n     * @param planId\n     */\n    private void replaceStatus(List<IssuesDao> planIssues, String planId) {\n        TestPlanWithBLOBs testPlan = testPlanService.get(planId);\n        CustomField customField = baseCustomFieldService.getCustomFieldByName(testPlan.getProjectId(), SystemCustomField.ISSUE_STATUS);\n        planIssues.forEach(issue -> {\n            List<CustomFieldDao> fields = issue.getFields();\n            if (CollectionUtils.isNotEmpty(fields)) {\n                for (CustomFieldDao field : fields) {\n                    if (field.getId().equals(customField.getId())) {\n                        List<CustomFieldOptionDTO> options = JSON.parseArray(customField.getOptions(), CustomFieldOptionDTO.class);\n                        for (CustomFieldOptionDTO option : options) {\n                            String value = field.getValue();\n                            if (StringUtils.isNotBlank(value)) {\n                                value = (String) JSON.parseObject(value);\n                            }\n                            if (StringUtils.equals(option.getValue(), value)) {\n                                if (option.getSystem()) {\n                                    issue.setStatus(option.getValue());\n                                } else {\n                                    issue.setStatus(option.getText());\n                                }\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n        });\n    }\n\n    public void changeStatus(IssuesRequest request) {\n        String issuesId = request.getId();\n        String status = request.getStatus();\n        if (StringUtils.isBlank(issuesId) || StringUtils.isBlank(status)) {\n            return;\n        }\n        IssuesWithBLOBs issue = issuesMapper.selectByPrimaryKey(issuesId);\n        Project project = projectMapper.selectByPrimaryKey(issue.getProjectId());\n        if (project == null) {\n            return;\n        }\n        String templateId = project.getIssueTemplateId();\n        if (StringUtils.isNotBlank(templateId)) {\n            // \u6a21\u7248\u5bf9\u4e8e\u540c\u4e00\u4e2a\u7cfb\u7edf\u5b57\u6bb5\u5e94\u8be5\u53ea\u5173\u8054\u4e00\u6b21\n            CustomField customField = baseCustomFieldService.getCustomFieldByName(issue.getProjectId(), SystemCustomField.ISSUE_STATUS);\n            if (customField != null) {\n                String fieldId = customField.getId();\n                CustomFieldResourceDTO resource = new CustomFieldResourceDTO();\n                resource.setFieldId(fieldId);\n                resource.setResourceId(issue.getId());\n                resource.setValue(JSON.toJSONString(status));\n                customFieldIssuesService.editFields(issue.getId(), Collections.singletonList(resource));\n            }\n        }\n    }\n\n    public List<IssuesStatusCountDao> getCountByStatus(IssuesCountRequest request) {\n        request.setCreator(SessionUtils.getUserId());\n        List<IssuesStatusCountDao> countByStatus = extIssuesMapper.getCountByStatus(request);\n        countByStatus.forEach(item -> {\n            if (StringUtils.isBlank(item.getStatusValue())) {\n                item.setStatusValue(IssuesStatus.NEW.toString());\n            } else {\n                item.setStatusValue(item.getStatusValue().replace(\"\\\"\", StringUtils.EMPTY));\n            }\n        });\n        return countByStatus;\n    }\n\n    public List<String> getFollows(String issueId) {\n        List<String> result = new ArrayList<>();\n        if (StringUtils.isBlank(issueId)) {\n            return result;\n        }\n        IssueFollowExample example = new IssueFollowExample();\n        example.createCriteria().andIssueIdEqualTo(issueId);\n        List<IssueFollow> follows = issueFollowMapper.selectByExample(example);\n        if (follows == null || follows.size() == 0) {\n            return result;\n        }\n        result = follows.stream().map(IssueFollow::getFollowId).distinct().collect(Collectors.toList());\n        return result;\n    }\n\n    public List<IssuesWithBLOBs> getIssuesByPlatformIds(List<String> platformIds, String projectId) {\n\n        if (CollectionUtils.isEmpty(platformIds)) return new ArrayList<>();\n        IssuesExample example = new IssuesExample();\n        example.createCriteria()\n                .andPlatformIdIn(platformIds)\n                .andProjectIdEqualTo(projectId);\n        return issuesMapper.selectByExampleWithBLOBs(example);\n    }\n\n    public IssueTemplateDao getThirdPartTemplate(String projectId) {\n        IssueTemplateDao issueTemplateDao = new IssueTemplateDao();\n        if (StringUtils.isNotBlank(projectId)) {\n            Project project = baseProjectService.getProjectById(projectId);\n            List<PlatformCustomFieldItemDTO> thirdPartCustomField = platformPluginService.getPlatform(project.getPlatform(), project.getWorkspaceId())\n                    .getThirdPartCustomField(PlatformPluginService.getCompatibleProjectConfig(project));\n            List<CustomFieldDao> customFieldDaoList = JSON.parseArray(JSON.toJSONString(thirdPartCustomField), CustomFieldDao.class);\n            issueTemplateDao.setCustomFields(customFieldDaoList);\n            issueTemplateDao.setPlatform(project.getPlatform());\n        }\n        return issueTemplateDao;\n    }\n\n    public IssuesRequest getDefaultIssueRequest(String projectId, String workspaceId) {\n        IssuesRequest issuesRequest = new IssuesRequest();\n        issuesRequest.setProjectId(projectId);\n        issuesRequest.setWorkspaceId(workspaceId);\n        return issuesRequest;\n    }\n\n    public List getDemandList(String projectId) {\n        Project project = baseProjectService.getProjectById(projectId);\n        String workspaceId = project.getWorkspaceId();\n\n        if (PlatformPluginService.isPluginPlatform(project.getPlatform())) {\n            return platformPluginService.getPlatform(project.getPlatform())\n                    .getDemands(PlatformPluginService.getCompatibleProjectConfig(project));\n        } else {\n            IssuesRequest issueRequest = new IssuesRequest();\n            issueRequest.setWorkspaceId(workspaceId);\n            issueRequest.setProjectId(projectId);\n            IssuesPlatform platform = IssueFactory.createPlatform(project.getPlatform(), issueRequest);\n            return platform.getDemandList(projectId);\n        }\n    }\n\n    public List<IssuesDao> listByWorkspaceId(IssuesRequest request) {\n        request.setOrders(ServiceUtils.getDefaultOrderByField(request.getOrders(), \"create_time\"));\n        return extIssuesMapper.getIssues(request);\n    }\n\n    public List<PlatformStatusDTO> getPlatformTransitions(PlatformIssueTypeRequest request) {\n        List<PlatformStatusDTO> platformStatusDTOS = new ArrayList<>();\n\n        if (!StringUtils.isBlank(request.getPlatformKey())) {\n            Project project = baseProjectService.getProjectById(request.getProjectId());\n            String platform = project.getPlatform();\n            if (PlatformPluginService.isPluginPlatform(platform)) {\n                return platformPluginService.getPlatform(platform)\n                        .getStatusList(request.getPlatformKey())\n                        .stream().map(item -> {\n                            PlatformStatusDTO platformStatusDTO = new PlatformStatusDTO();\n                            platformStatusDTO.setLabel(item.getLabel());\n                            platformStatusDTO.setValue(item.getValue());\n                            return platformStatusDTO;\n                        })\n                        .collect(Collectors.toList());\n            } else {\n                List<String> platforms = getPlatforms(project);\n                if (CollectionUtils.isEmpty(platforms)) {\n                    return platformStatusDTOS;\n                }\n\n                IssuesRequest issuesRequest = getDefaultIssueRequest(request.getProjectId(), request.getWorkspaceId());\n                return IssueFactory.createPlatform(platform, issuesRequest).getTransitions(request.getPlatformKey());\n            }\n        }\n        return platformStatusDTOS;\n    }\n\n    public boolean isThirdPartTemplate(Project project) {\n        return project.getThirdPartTemplate() != null\n                && project.getThirdPartTemplate()\n                && PlatformPluginService.isPluginPlatform(project.getPlatform());\n    }\n\n    public void checkThirdProjectExist(Project project) {\n        IssuesRequest issuesRequest = new IssuesRequest();\n        if (StringUtils.isBlank(project.getId())) {\n            MSException.throwException(\"project ID cannot be empty\");\n        }\n        issuesRequest.setProjectId(project.getId());\n        issuesRequest.setWorkspaceId(project.getWorkspaceId());\n        if (StringUtils.equalsIgnoreCase(project.getPlatform(), IssuesManagePlatform.Tapd.name())) {\n            TapdPlatform tapd = new TapdPlatform(issuesRequest);\n            this.doCheckThirdProjectExist(tapd, project.getTapdId());\n        } else if (StringUtils.equalsIgnoreCase(project.getPlatform(), IssuesManagePlatform.Zentao.name())) {\n            ZentaoPlatform zentao = new ZentaoPlatform(issuesRequest);\n            this.doCheckThirdProjectExist(zentao, project.getZentaoId());\n        }\n    }\n\n    public void issueImportTemplate(String projectId, HttpServletResponse response) {\n        Map<String, String> userMap = baseUserService.getProjectMemberOption(projectId).stream().collect(Collectors.toMap(User::getId, User::getName));\n        // \u83b7\u53d6\u7f3a\u9677\u6a21\u677f\u53ca\u81ea\u5b9a\u4e49\u5b57\u6bb5\n        IssueTemplateDao issueTemplate = getIssueTemplateByProjectId(projectId);\n        List<CustomFieldDao> customFields = Optional.ofNullable(issueTemplate.getCustomFields()).orElse(new ArrayList<>());\n        // \u6839\u636e\u81ea\u5b9a\u4e49\u5b57\u6bb5\u83b7\u53d6\u8868\u5934\n        List<List<String>> heads = new IssueExcelDataFactory().getIssueExcelDataLocal().getHead(issueTemplate.getIsThirdTemplate(), customFields, null);\n        // \u5bfc\u51fa\u7a7a\u6a21\u677f, heads->\u8868\u5934, headHandler->\u8868\u5934\u5904\u7406\n        IssueTemplateHeadWriteHandler headHandler = new IssueTemplateHeadWriteHandler(userMap, heads, issueTemplate.getCustomFields());\n        new EasyExcelExporter(new IssueExcelDataFactory().getExcelDataByLocal())\n                .exportByCustomWriteHandler(response, heads, null, Translator.get(\"issue_import_template_name\"),\n                        Translator.get(\"issue_import_template_sheet\"), headHandler);\n    }\n\n    public ExcelResponse issueImport(IssueImportRequest request, MultipartFile importFile) {\n        if (importFile == null) {\n            MSException.throwException(Translator.get(\"upload_fail\"));\n        }\n        Map<String, String> userMap = baseUserService.getProjectMemberOption(request.getProjectId()).stream().collect(Collectors.toMap(User::getId, User::getName));\n        // \u83b7\u53d6\u7f3a\u9677\u6a21\u677f\u53ca\u81ea\u5b9a\u4e49\u5b57\u6bb5\n        IssueTemplateDao issueTemplate = getIssueTemplateByProjectId(request.getProjectId());\n        List<CustomFieldDao> customFields = Optional.ofNullable(issueTemplate.getCustomFields()).orElse(new ArrayList<>());\n        // \u83b7\u53d6\u672c\u5730EXCEL\u6570\u636e\u5bf9\u8c61\n        Class clazz = new IssueExcelDataFactory().getExcelDataByLocal();\n        // IssueExcelListener\u8bfb\u53d6file\u5185\u5bb9\n        IssueExcelListener issueExcelListener = new IssueExcelListener(request, clazz, issueTemplate.getIsThirdTemplate(), customFields, userMap);\n        try {\n            EasyExcelFactory.read(importFile.getInputStream(), issueExcelListener).sheet().doRead();\n        } catch (IOException e) {\n            LogUtil.error(e.getMessage(), e);\n            e.printStackTrace();\n        }\n        // \u83b7\u53d6\u9519\u8bef\u4fe1\u606f\u5e76\u8fd4\u56de\n        List<ExcelErrData<IssueExcelData>> errList = issueExcelListener.getErrList();\n        ExcelResponse excelResponse = new ExcelResponse();\n        if (CollectionUtils.isNotEmpty(errList)) {\n            excelResponse.setErrList(errList);\n            excelResponse.setSuccess(Boolean.FALSE);\n        } else {\n            excelResponse.setSuccess(Boolean.TRUE);\n        }\n        return excelResponse;\n    }\n\n    public void issueExport(IssueExportRequest request, HttpServletResponse response) {\n        EasyExcelExporter.resetCellMaxTextLength();\n        Map<String, String> userMap = baseUserService.getProjectMemberOption(request.getProjectId()).stream().collect(Collectors.toMap(User::getId, User::getName));\n        // \u83b7\u53d6\u7f3a\u9677\u6a21\u677f\u53ca\u81ea\u5b9a\u4e49\u5b57\u6bb5\n        IssueTemplateDao issueTemplate = getIssueTemplateByProjectId(request.getProjectId());\n        List<CustomFieldDao> customFields = Optional.ofNullable(issueTemplate.getCustomFields()).orElse(new ArrayList<>());\n        // \u6839\u636e\u81ea\u5b9a\u4e49\u5b57\u6bb5\u83b7\u53d6\u8868\u5934\u5185\u5bb9\n        List<List<String>> heads = new IssueExcelDataFactory().getIssueExcelDataLocal().getHead(issueTemplate.getIsThirdTemplate(), customFields, request);\n        // \u83b7\u53d6\u5bfc\u51fa\u7f3a\u9677\u5217\u8868\n        List<IssuesDao> exportIssues = getExportIssues(request, issueTemplate.getIsThirdTemplate(), customFields);\n        // \u89e3\u6790issue\u5bf9\u8c61\u6570\u636e->excel\u5bf9\u8c61\u6570\u636e\n        List<IssueExcelData> excelDataList = parseIssueDataToExcelData(exportIssues);\n        // \u89e3\u6790excel\u5bf9\u8c61\u6570\u636e->excel\u5217\u8868\u6570\u636e\n        List<List<Object>> data = parseExcelDataToList(heads, excelDataList);\n        // \u5bfc\u51faEXCEL\n        IssueTemplateHeadWriteHandler headHandler = new IssueTemplateHeadWriteHandler(userMap, heads, issueTemplate.getCustomFields());\n        // heads-> \u8868\u5934\u5185\u5bb9, data -> \u5bfc\u51faEXCEL\u5217\u8868\u6570\u636e, headHandler -> \u8868\u5934\u5904\u7406\n        new EasyExcelExporter(new IssueExcelDataFactory().getExcelDataByLocal())\n                .exportByCustomWriteHandler(response, heads, data, Translator.get(\"issue_list_export_excel\"),\n                        Translator.get(\"issue_list_export_excel_sheet\"), headHandler);\n    }\n\n    public List<IssuesDao> getExportIssues(IssueExportRequest exportRequest, Boolean isThirdTemplate, List<CustomFieldDao> customFields) {\n        // \u6839\u636e\u5217\u8868\u6761\u4ef6\u83b7\u53d6\u7b26\u5408\u7f3a\u9677\u96c6\u5408\n        IssuesRequest request = new IssuesRequest();\n        request.setProjectId(exportRequest.getProjectId());\n        request.setWorkspaceId(exportRequest.getWorkspaceId());\n        request.setSelectAll(exportRequest.getIsSelectAll());\n        request.setExportIds(exportRequest.getExportIds());\n        // \u5217\u8868\u6392\u5e8f\n        request.setOrders(exportRequest.getOrders());\n        request.setOrders(ServiceUtils.getDefaultOrderByField(request.getOrders(), \"create_time\"));\n        request.getOrders().forEach(order -> {\n            if (StringUtils.isNotEmpty(order.getName()) && order.getName().startsWith(\"custom\")) {\n                request.setIsCustomSorted(true);\n                request.setCustomFieldId(order.getName().replace(\"custom_\", StringUtils.EMPTY));\n                order.setPrefix(\"cfi\");\n                order.setName(\"value\");\n            }\n        });\n        ServiceUtils.setBaseQueryRequestCustomMultipleFields(request);\n        List<IssuesDao> issues = extIssuesMapper.getIssues(request);\n\n        Map<String, Set<String>> caseSetMap = getCaseSetMap(issues);\n        Map<String, User> userMap = getUserMap(issues);\n        Map<String, String> planMap = getPlanMap(issues);\n        Map<String, List<IssueCommentDTO>> commentMap = getCommentMap(issues);\n\n        // \u8bbe\u7f6ecreator, caseCount, commnet\n        issues.forEach(item -> {\n            User createUser = userMap.get(item.getCreator());\n            if (createUser != null) {\n                item.setCreatorName(createUser.getName());\n            }\n            String resourceName = planMap.get(item.getResourceId());\n            if (StringUtils.isNotBlank(resourceName)) {\n                item.setResourceName(resourceName);\n            }\n\n            Set<String> caseIdSet = caseSetMap.get(item.getId());\n            if (caseIdSet == null) {\n                caseIdSet = new HashSet<>();\n            }\n            item.setCaseIds(new ArrayList<>(caseIdSet));\n            item.setCaseCount(caseIdSet.size());\n            List<IssueCommentDTO> commentDTOList = commentMap.get(item.getId());\n            if (CollectionUtils.isNotEmpty(commentDTOList) && commentDTOList.size() > 0) {\n                List<String> comments = commentDTOList.stream().map(IssueCommentDTO::getDescription).collect(Collectors.toList());\n                item.setComment(StringUtils.join(comments, \";\"));\n            }\n        });\n        // \u89e3\u6790\u81ea\u5b9a\u4e49\u5b57\u6bb5\n        buildCustomField(issues, isThirdTemplate, customFields);\n        return issues;\n    }\n\n    private List<IssueExcelData> parseIssueDataToExcelData(List<IssuesDao> exportIssues) {\n        List<IssueExcelData> excelDataList = new ArrayList<>();\n        for (int i = 0; i < exportIssues.size(); i++) {\n            IssuesDao issuesDao = exportIssues.get(i);\n            IssueExcelData excelData = new IssueExcelData();\n            BeanUtils.copyBean(excelData, issuesDao);\n            buildCustomData(issuesDao, excelData);\n            excelDataList.add(excelData);\n        }\n        return excelDataList;\n    }\n\n    private void buildCustomData(IssuesDao issuesDao, IssueExcelData excelData) {\n        if (CollectionUtils.isNotEmpty(issuesDao.getFields())) {\n            Map<String, Object> customData = new LinkedHashMap<>();\n            issuesDao.getFields().forEach(field -> {\n                customData.put(field.getName(), field.getValue());\n            });\n            excelData.setCustomData(customData);\n        }\n    }\n\n    private List<List<Object>> parseExcelDataToList(List<List<String>> heads, List<IssueExcelData> excelDataList) {\n        List<List<Object>> result = new ArrayList<>();\n        IssueExportHeadField[] exportHeadFields = IssueExportHeadField.values();\n        //\u8f6c\u5316excel\u5934\n        List<String> headList = new ArrayList<>();\n        for (List<String> list : heads) {\n            for (String head : list) {\n                headList.add(head);\n            }\n        }\n\n        for (IssueExcelData data : excelDataList) {\n            List<Object> rowData = new ArrayList<>();\n            Map<String, Object> customData = data.getCustomData();\n            for (String head : headList) {\n                boolean isSystemField = false;\n                for (IssueExportHeadField exportHeadField : exportHeadFields) {\n                    if (StringUtils.equals(head, exportHeadField.getName())) {\n                        rowData.add(exportHeadField.parseExcelDataValue(data));\n                        isSystemField = true;\n                        break;\n                    }\n                }\n                if (!isSystemField) {\n                    // \u81ea\u5b9a\u4e49\u5b57\u6bb5\n                    Object value = customData.get(head);\n                    if (value == null || StringUtils.equals(value.toString(), \"null\")) {\n                        value = StringUtils.EMPTY;\n                    }\n                    rowData.add(parseCustomFieldValue(value.toString()));\n                }\n            }\n            result.add(rowData);\n        }\n        return result;\n    }\n\n    private IssueTemplateDao getIssueTemplateByProjectId(String projectId) {\n        IssueTemplateDao issueTemplateDao;\n        Project project = baseProjectService.getProjectById(projectId);\n        if (PlatformPluginService.isPluginPlatform(project.getPlatform())\n                && project.getThirdPartTemplate()) {\n            // \u7b2c\u4e09\u65b9Jira\u5e73\u53f0\n            issueTemplateDao = getThirdPartTemplate(project.getId());\n            issueTemplateDao.setIsThirdTemplate(Boolean.TRUE);\n        } else {\n            issueTemplateDao = trackIssueTemplateService.getTemplate(projectId);\n            issueTemplateDao.setIsThirdTemplate(Boolean.FALSE);\n        }\n        return issueTemplateDao;\n    }\n\n    private void doCheckThirdProjectExist(AbstractIssuePlatform platform, String relateId) {\n        if (StringUtils.isBlank(relateId)) {\n            MSException.throwException(Translator.get(\"issue_project_not_exist\"));\n        }\n        Boolean exist = platform.checkProjectExist(relateId);\n        if (BooleanUtils.isFalse(exist)) {\n            MSException.throwException(Translator.get(\"issue_project_not_exist\"));\n        }\n    }\n\n    private List<IssuesDao> filterSyncIssuesByCreated(List<IssuesDao> issues, IssueSyncRequest syncRequest) {\n        List<IssuesDao> filterIssues = issues.stream().filter(issue -> {\n            if (syncRequest.isPre()) {\n                return issue.getCreateTime() <= syncRequest.getCreateTime();\n            } else {\n                return issue.getCreateTime() >= syncRequest.getCreateTime();\n            }\n        }).collect(Collectors.toList());\n        return filterIssues;\n    }\n\n    private void uploadAzureCopyAttachment(AttachmentRequest attachmentRequest, String platform, String platformId) {\n        List<String> attachmentIds = attachmentService.getAttachmentIdsByParam(attachmentRequest);\n        if (CollectionUtils.isNotEmpty(attachmentIds)) {\n            attachmentIds.forEach(attachmentId -> {\n                FileAttachmentMetadata fileAttachmentMetadata = attachmentService.getFileAttachmentMetadataByFileId(attachmentId);\n                File file = new File(fileAttachmentMetadata.getFilePath() + \"/\" + fileAttachmentMetadata.getName());\n                IssuesRequest createRequest = new IssuesRequest();\n                createRequest.setWorkspaceId(SessionUtils.getCurrentWorkspaceId());\n                createRequest.setProjectId(SessionUtils.getCurrentProjectId());\n                IssuesPlatform azurePlatform = Objects.requireNonNull(IssueFactory.createPlatform(platform, createRequest));\n                IssuesUpdateRequest uploadRequest = new IssuesUpdateRequest();\n                uploadRequest.setPlatformId(platformId);\n                azurePlatform.syncIssuesAttachment(uploadRequest, file, AttachmentSyncType.UPLOAD);\n            });\n        }\n    }\n\n    private String parseCustomFieldValue(String value) {\n        if (value.contains(\",\")) {\n            value = value.replaceAll(\",\", \";\");\n        }\n        if (value.contains(\"\\\"\")) {\n            value = value.replaceAll(\"\\\"\", StringUtils.EMPTY);\n        }\n        if (value.contains(\"[\") || value.contains(\"]\")) {\n            value = value.replaceAll(\"]\", StringUtils.EMPTY).replaceAll(\"\\\\[\", StringUtils.EMPTY);\n        }\n        return value;\n    }\n\n    private String parseOptionValue(String options, String tarVal) {\n        if (StringUtils.isEmpty(options) || StringUtils.isEmpty(tarVal)) {\n            return StringUtils.EMPTY;\n        }\n        List<Map> optionList = JSON.parseArray(options, Map.class);\n        for (Map option : optionList) {\n            String text = option.get(\"text\").toString();\n            String value = option.get(\"value\").toString();\n            if (StringUtils.containsIgnoreCase(tarVal, value)) {\n                tarVal = tarVal.replaceAll(value, text);\n            }\n        }\n        return tarVal;\n    }\n\n    public Issues checkIssueExist(Integer num, String projectId) {\n        IssuesExample example = new IssuesExample();\n        example.createCriteria().andNumEqualTo(num).andProjectIdEqualTo(projectId);\n        List<Issues> issues = issuesMapper.selectByExample(example);\n        return CollectionUtils.isNotEmpty(issues) && issues.size() > 0 ? issues.get(0) : null;\n    }\n\n    public void saveImportData(List<IssuesUpdateRequest> issues) {\n        issues.parallelStream().forEach(issue -> {\n            addIssues(issue, null);\n        });\n    }\n\n    public void updateImportData(List<IssuesUpdateRequest> issues) {\n        issues.parallelStream().forEach(issue -> {\n            updateIssues(issue);\n        });\n    }\n\n    public void setFilterIds(IssuesRequest request) {\n        List<String> issueIds = new ArrayList<>();\n        if (request.getThisWeekUnClosedTestPlanIssue()) {\n            issueIds = extIssuesMapper.getTestPlanThisWeekIssue(request.getProjectId());\n        } else if (request.getAllTestPlanIssue() || request.getUnClosedTestPlanIssue()) {\n            issueIds = extIssuesMapper.getTestPlanIssue(request.getProjectId());\n        } else {\n            issueIds = Collections.EMPTY_LIST;\n        }\n\n        Map<String, String> statusMap = customFieldIssuesService.getIssueStatusMap(issueIds, request.getProjectId());\n        if (MapUtils.isEmpty(statusMap) && CollectionUtils.isNotEmpty(issueIds)) {\n            // \u672a\u627e\u5230\u81ea\u5b9a\u4e49\u5b57\u6bb5\u72b6\u6001, \u5219\u83b7\u53d6\u5e73\u53f0\u72b6\u6001\n            IssuesRequest issuesRequest = new IssuesRequest();\n            issuesRequest.setProjectId(SessionUtils.getCurrentProjectId());\n            issuesRequest.setFilterIds(issueIds);\n            List<IssuesDao> issues = extIssuesMapper.getIssues(issuesRequest);\n            statusMap = issues.stream().collect(Collectors.toMap(IssuesDao::getId, i -> Optional.ofNullable(i.getPlatformStatus()).orElse(\"new\")));\n        }\n\n        if (MapUtils.isEmpty(statusMap)) {\n            request.setFilterIds(issueIds);\n        } else {\n            if (request.getThisWeekUnClosedTestPlanIssue() || request.getUnClosedTestPlanIssue()) {\n                CustomField customField = baseCustomFieldService.getCustomFieldByName(SessionUtils.getCurrentProjectId(), SystemCustomField.ISSUE_STATUS);\n                JSONArray statusArray = JSONArray.parseArray(customField.getOptions());\n                Map<String, String> tmpStatusMap = statusMap;\n                List<String> unClosedIds = issueIds.stream()\n                        .filter(id -> !StringUtils.equals(tmpStatusMap.getOrDefault(id, StringUtils.EMPTY).replaceAll(\"\\\"\", StringUtils.EMPTY), \"closed\"))\n                        .collect(Collectors.toList());\n                Iterator<String> iterator = unClosedIds.iterator();\n                while (iterator.hasNext()) {\n                    String unClosedId = iterator.next();\n                    String status = statusMap.getOrDefault(unClosedId, StringUtils.EMPTY).replaceAll(\"\\\"\", StringUtils.EMPTY);\n                    IssueStatus statusEnum = IssueStatus.getEnumByName(status);\n                    if (statusEnum == null) {\n                        boolean exist = false;\n                        for (int i = 0; i < statusArray.size(); i++) {\n                            JSONObject statusObj = (JSONObject) statusArray.get(i);\n                            if (StringUtils.equals(status, statusObj.get(\"value\").toString())) {\n                                exist = true;\n                            }\n                        }\n                        if (!exist) {\n                            iterator.remove();\n                        }\n                    }\n                }\n                request.setFilterIds(unClosedIds);\n            } else {\n                request.setFilterIds(issueIds);\n            }\n        }\n    }\n\n    public boolean thirdPartTemplateEnable(String projectId) {\n        Project project = baseProjectService.getProjectById(projectId);\n        return BooleanUtils.isTrue(project.getThirdPartTemplate())\n                && platformPluginService.isThirdPartTemplateSupport(project.getPlatform());\n    }\n\n    public boolean syncThirdPartyAllIssues(IssueSyncRequest syncRequest) {\n        syncRequest.setProjectId(syncRequest.getProjectId());\n        XpackIssueService xpackIssueService = CommonBeanFactory.getBean(XpackIssueService.class);\n        if (StringUtils.isNotBlank(syncRequest.getProjectId())) {\n            // \u83b7\u53d6\u5f53\u524d\u9879\u76ee\u6267\u884c\u540c\u6b65\u7f3a\u9677Key\n            String syncValue = getSyncKey(syncRequest.getProjectId());\n            // \u5b58\u5728\u5373\u6b63\u5728\u540c\u6b65\u4e2d\n            if (StringUtils.isNotEmpty(syncValue)) {\n                return false;\n            }\n            // \u4e0d\u5b58\u5728\u5219\u8bbe\u7f6eKey, \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4, \u6267\u884c\u5b8c\u6210\u540edelete\u6389\n            setSyncKey(syncRequest.getProjectId());\n\n            try {\n                Project project = baseProjectService.getProjectById(syncRequest.getProjectId());\n\n                if (!isThirdPartTemplate(project)) {\n                    syncRequest.setDefaultCustomFields(getDefaultCustomFields(syncRequest.getProjectId()));\n                }\n\n                xpackIssueService.syncThirdPartyIssues(project, syncRequest);\n\n                syncAllPluginIssueAttachment(project, syncRequest);\n            } catch (Exception e) {\n                LogUtil.error(e);\n                MSException.throwException(e);\n            } finally {\n                deleteSyncKey(syncRequest.getProjectId());\n            }\n        }\n        return true;\n    }\n}\n", "package io.metersphere.service;\n\nimport io.metersphere.commons.constants.IssuesManagePlatform;\nimport io.metersphere.commons.exception.MSException;\nimport io.metersphere.commons.utils.JSON;\nimport io.metersphere.i18n.Translator;\nimport io.metersphere.platform.api.Platform;\nimport io.metersphere.platform.api.PluginMetaInfo;\nimport io.metersphere.base.domain.PluginWithBLOBs;\nimport io.metersphere.base.domain.Project;\nimport io.metersphere.base.domain.ServiceIntegration;\nimport io.metersphere.commons.constants.PluginScenario;\nimport io.metersphere.commons.utils.SessionUtils;\nimport io.metersphere.platform.domain.PlatformRequest;\nimport io.metersphere.platform.domain.SelectOption;\nimport io.metersphere.platform.loader.PlatformPluginManager;\nimport io.metersphere.request.IntegrationRequest;\nimport io.metersphere.utils.PluginManagerUtil;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.annotation.Resource;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Service\n@Transactional(rollbackFor = Exception.class)\npublic class PlatformPluginService {\n\n    @Resource\n    private BasePluginService basePluginService;\n    @Resource\n    private BaseIntegrationService baseIntegrationService;\n\n    public static final String PLUGIN_DOWNLOAD_URL = \"https://github.com/metersphere/metersphere-platform-plugin\";\n\n    private PlatformPluginManager pluginManager;\n\n    public synchronized PlatformPluginManager getPluginManager() {\n        if (pluginManager == null) {\n            pluginManager = new PlatformPluginManager();\n        }\n        return pluginManager;\n    }\n\n    /**\n     * \u67e5\u8be2\u6240\u6709\u5e73\u53f0\u63d2\u4ef6\u5e76\u52a0\u8f7d\n     */\n    public void loadPlatFormPlugins() {\n        List<PluginWithBLOBs> plugins = basePluginService.getPlugins(PluginScenario.platform.name());\n        PluginManagerUtil.loadPlugins(getPluginManager(), plugins);\n    }\n\n    public void loadPlugin(String pluginId) {\n        if (getPluginManager().getClassLoader(pluginId) == null) {\n            // \u5982\u679c\u6ca1\u6709\u52a0\u8f7d\u624d\u52a0\u8f7d\n            InputStream pluginJar = basePluginService.getPluginJar(pluginId);\n            PluginManagerUtil.loadPlugin(pluginId, getPluginManager(), pluginJar);\n        }\n    }\n\n    /**\n     * \u5378\u8f7d\u63d2\u4ef6\n     * @param pluginId\n     */\n    public void unloadPlugin(String pluginId) {\n        getPluginManager().deletePlugin(pluginId);\n    }\n\n    public boolean isThirdPartTemplateSupport(String platform) {\n        if (StringUtils.isBlank(platform)) {\n            return false;\n        }\n        PluginMetaInfo pluginMetaInfo = pluginManager.getPluginMetaInfoByKey(platform);\n        if (PlatformPluginService.isPluginPlatform(platform) && pluginMetaInfo == null) {\n            MSException.throwException(Translator.get(\"platform_plugin_not_exit\") + PlatformPluginService.PLUGIN_DOWNLOAD_URL);\n        }\n        return pluginMetaInfo == null ? false : pluginMetaInfo.isThirdPartTemplateSupport();\n    }\n\n    public Platform getPlatform(String platformKey, String workspaceId) {\n        IntegrationRequest integrationRequest = new IntegrationRequest();\n        integrationRequest.setPlatform(platformKey);\n        integrationRequest.setWorkspaceId(StringUtils.isBlank(workspaceId) ? SessionUtils.getCurrentWorkspaceId() : workspaceId);\n        ServiceIntegration serviceIntegration = baseIntegrationService.get(integrationRequest);\n\n        PlatformRequest pluginRequest = new PlatformRequest();\n        pluginRequest.setWorkspaceId(workspaceId);\n        pluginRequest.setIntegrationConfig(serviceIntegration.getConfiguration());\n        Platform platform = getPluginManager().getPlatformByKey(platformKey, pluginRequest);\n        if (platform == null) {\n            MSException.throwException(Translator.get(\"platform_plugin_not_exit\") + PLUGIN_DOWNLOAD_URL);\n        }\n        return platform;\n    }\n\n    public Platform getPlatform(String platformKey) {\n       return this.getPlatform(platformKey, null);\n    }\n\n\n    public static String getCompatibleProjectConfig(Project project) {\n        String issueConfig = project.getIssueConfig();\n        Map map = JSON.parseMap(issueConfig);\n        compatibleProjectKey(map, \"jiraKey\", project.getJiraKey());\n        compatibleProjectKey(map, \"tapdId\", project.getTapdId());\n        compatibleProjectKey(map, \"azureDevopsId\", project.getAzureDevopsId());\n        compatibleProjectKey(map, \"zentaoId\", project.getZentaoId());\n        map.put(\"thirdPartTemplate\", project.getThirdPartTemplate());\n        return JSON.toJSONString(map);\n    }\n\n    private static void compatibleProjectKey(Map map, String name, String compatibleValue) {\n        if (map.get(name) == null || StringUtils.isBlank(map.get(name).toString())) {\n            // \u5982\u679c\u914d\u7f6e\u91cc\u9762\u7f3a\u9677\u5bf9\u5e94\u5e73\u53f0\u7684\u9879\u76eeID\u5219\uff0c\u5373\u4f7f\u7528\u65e7\u6570\u636e\u7684\u9879\u76eeID\n            map.put(name, compatibleValue);\n        }\n    }\n\n    public static boolean isPluginPlatform(String platform) {\n        if (StringUtils.equalsAnyIgnoreCase(platform,\n                IssuesManagePlatform.Tapd.name(), IssuesManagePlatform.AzureDevops.name(),\n                IssuesManagePlatform.Zentao.name(), IssuesManagePlatform.Local.name())) {\n            return false;\n        }\n        return true;\n    }\n\n    public List<SelectOption> getPlatformOptions() {\n        List<SelectOption> options = getPluginManager().getPluginMetaInfoList()\n                .stream()\n                .map(pluginMetaInfo -> new SelectOption(pluginMetaInfo.getLabel(), pluginMetaInfo.getKey()))\n                .collect(Collectors.toList());\n        List<ServiceIntegration> integrations = baseIntegrationService.getAll(SessionUtils.getCurrentWorkspaceId());\n        // \u8fc7\u6ee4\u6389\u670d\u52a1\u96c6\u6210\u4e2d\u6ca1\u6709\u7684\u9009\u9879\n        return options.stream()\n                .filter(option ->\n                        integrations.stream()\n                                .filter(integration -> StringUtils.equals(integration.getPlatform(), option.getValue()))\n                                .collect(Collectors.toList()).size() > 0\n                )\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}\n", "package io.metersphere.service.issue.client;\n\nimport io.metersphere.commons.exception.MSException;\nimport io.metersphere.commons.utils.JSON;\nimport io.metersphere.commons.utils.LogUtil;\nimport io.metersphere.commons.utils.UnicodeConvertUtils;\nimport io.metersphere.service.issue.domain.zentao.*;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.http.*;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\n\nimport java.io.File;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Map;\n\npublic abstract class ZentaoClient extends BaseClient {\n\n    protected String ENDPOINT;\n\n    protected String USER_NAME;\n\n    protected String PASSWD;\n\n    public RequestUrl requestUrl;\n    protected String url;\n\n    public ZentaoClient(String url) {\n        ENDPOINT = url;\n    }\n\n    public String login() {\n        GetUserResponse getUserResponse = new GetUserResponse();\n        String sessionId = \"\";\n        try {\n            sessionId = getSessionId();\n            String loginUrl = requestUrl.getLogin();\n            MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<>();\n            paramMap.add(\"account\", USER_NAME);\n            paramMap.add(\"password\", PASSWD);\n            HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<>(paramMap, new HttpHeaders());\n            ResponseEntity<String> response = restTemplate.exchange(loginUrl + sessionId, HttpMethod.POST, requestEntity, String.class);\n            getUserResponse = (GetUserResponse) getResultForObject(GetUserResponse.class, response);\n        } catch (Exception e) {\n            LogUtil.error(e);\n            MSException.throwException(e.getMessage());\n        }\n        GetUserResponse.User user = getUserResponse.getUser();\n        if (user == null) {\n            LogUtil.error(JSON.toJSONString(getUserResponse));\n            // \u767b\u5f55\u5931\u8d25\uff0c\u83b7\u53d6\u7684session\u65e0\u6548\uff0c\u7f6e\u7a7asession\n            MSException.throwException(\"zentao login fail, user null\");\n        }\n        if (!StringUtils.equals(user.getAccount(), USER_NAME)) {\n            LogUtil.error(\"login fail\uff0cinconsistent users\");\n            MSException.throwException(\"zentao login fail, inconsistent user\");\n        }\n        return sessionId;\n    }\n\n    public String getSessionId() {\n        String getSessionUrl = requestUrl.getSessionGet();\n        ResponseEntity<String> response = restTemplate.exchange(getSessionUrl,\n                HttpMethod.GET, null, String.class);\n        GetSessionResponse getSessionResponse = (GetSessionResponse) getResultForObject(GetSessionResponse.class, response);\n        return JSON.parseObject(getSessionResponse.getData(), GetSessionResponse.Session.class).getSessionID();\n    }\n\n    public AddIssueResponse.Issue addIssue(MultiValueMap<String, Object> paramMap) {\n        String sessionId = login();\n        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(paramMap, new HttpHeaders());\n        ResponseEntity<String> response = null;\n        try {\n            String bugCreate = requestUrl.getBugCreate();\n            response = restTemplate.exchange(bugCreate + sessionId,\n                    HttpMethod.POST, requestEntity, String.class);\n        } catch (Exception e) {\n            LogUtil.error(e.getMessage(), e);\n            MSException.throwException(e.getMessage());\n        }\n        AddIssueResponse addIssueResponse = (AddIssueResponse) getResultForObject(AddIssueResponse.class, response);\n        AddIssueResponse.Issue issue = JSON.parseObject(addIssueResponse.getData(), AddIssueResponse.Issue.class);\n        if (issue == null) {\n            MSException.throwException(UnicodeConvertUtils.unicodeToCn(response.getBody()));\n        }\n        return issue;\n    }\n\n    public void updateIssue(String id, MultiValueMap<String, Object> paramMap) {\n        String sessionId = login();\n        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(paramMap, new HttpHeaders());\n        try {\n            restTemplate.exchange(requestUrl.getBugUpdate(),\n                    HttpMethod.POST, requestEntity, String.class, id, sessionId);\n        } catch (Exception e) {\n            LogUtil.error(e.getMessage(), e);\n            MSException.throwException(e.getMessage());\n        }\n    }\n\n    public void deleteIssue(String id) {\n        String sessionId = login();\n        try {\n            restTemplate.exchange(requestUrl.getBugDelete(),\n                    HttpMethod.GET, new HttpEntity<>(new HttpHeaders()), String.class, id, sessionId);\n        } catch (Exception e) {\n            LogUtil.error(e.getMessage(), e);\n            MSException.throwException(e.getMessage());\n        }\n    }\n\n    public Map getBugById(String id) {\n        String sessionId = login();\n        String bugGet = requestUrl.getBugGet();\n        ResponseEntity<String> response = restTemplate.exchange(bugGet,\n                HttpMethod.GET, null, String.class, id, sessionId);\n        GetIssueResponse getIssueResponse = (GetIssueResponse) getResultForObject(GetIssueResponse.class, response);\n        if(StringUtils.equalsIgnoreCase(getIssueResponse.getStatus(),\"fail\")){\n            GetIssueResponse.Issue issue = new GetIssueResponse.Issue();\n            issue.setId(id);\n            issue.setSteps(StringUtils.SPACE);\n            issue.setTitle(StringUtils.SPACE);\n            issue.setStatus(\"closed\");\n            issue.setDeleted(\"1\");\n            issue.setOpenedBy(StringUtils.SPACE);\n            getIssueResponse.setData(JSON.toJSONString(issue).toString());\n        }\n        return JSON.parseMap(getIssueResponse.getData());\n    }\n\n    public GetCreateMetaDataResponse.MetaData getCreateMetaData(String productID) {\n        String sessionId = login();\n        ResponseEntity<String> response = restTemplate.exchange(requestUrl.getCreateMetaData(),\n                HttpMethod.GET, null, String.class, productID, sessionId);\n        GetCreateMetaDataResponse getCreateMetaDataResponse = (GetCreateMetaDataResponse) getResultForObject(GetCreateMetaDataResponse.class, response);\n        return JSON.parseObject(getCreateMetaDataResponse.getData(), GetCreateMetaDataResponse.MetaData.class);\n    }\n\n    public Map getCustomFields(String productID) {\n        return getCreateMetaData(productID).getCustomFields();\n    }\n\n    public Map<String, Object> getBuildsByCreateMetaData(String projectId) {\n        return getCreateMetaData(projectId).getBuilds();\n    }\n\n    public Map<String, Object> getBuilds(String projectId) {\n        String sessionId = login();\n        ResponseEntity<String> response = restTemplate.exchange(requestUrl.getBuildsGet(),\n                HttpMethod.GET, null, String.class, projectId, sessionId);\n        return (Map<String, Object>) JSON.parseMap(response.getBody()).get(\"data\");\n    }\n\n    public Map getBugsByProjectId(String projectId, Integer pageNum, Integer pageSize) {\n        String sessionId = login();\n        ResponseEntity<String> response = restTemplate.exchange(requestUrl.getBugList(),\n                HttpMethod.GET, null, String.class, projectId, 9999999, pageSize, pageNum, sessionId);\n        try {\n            return JSON.parseMap(JSON.parseMap(response.getBody()).get(\"data\").toString());\n        } catch (Exception e) {\n            LogUtil.error(e);\n            MSException.throwException(\"\u8bf7\u68c0\u67e5\u914d\u7f6e\u4fe1\u606f\u662f\u5426\u586b\u5199\u6b63\u786e\uff01\");\n        }\n        return null;\n    }\n\n    public String getBaseUrl() {\n        if (ENDPOINT.endsWith(\"/\")) {\n            return ENDPOINT.substring(0, ENDPOINT.length() - 1);\n        }\n        return ENDPOINT;\n    }\n\n    public void setConfig(ZentaoConfig config) {\n        if (config == null) {\n            MSException.throwException(\"config is null\");\n        }\n        USER_NAME = config.getAccount();\n        PASSWD = config.getPassword();\n        ENDPOINT = config.getUrl();\n    }\n\n\n    public String getReplaceImgUrl(String replaceImgUrl) {\n        String baseUrl = getBaseUrl();\n        String[] split = baseUrl.split(\"/\");\n        String suffix = split[split.length - 1];\n        if (StringUtils.equals(\"biz\", suffix)) {\n            suffix = baseUrl;\n        } else if (!StringUtils.equalsAny(suffix, \"zentao\", \"pro\", \"zentaopms\", \"zentaopro\", \"zentaobiz\")) {\n            suffix = \"\";\n        } else {\n            suffix = \"/\" + suffix;\n        }\n        return String.format(replaceImgUrl, suffix);\n    }\n\n    public boolean checkProjectExist(String relateId) {\n        String sessionId = login();\n        ResponseEntity<String> response = restTemplate.exchange(requestUrl.getProductGet(),\n                HttpMethod.GET, null, String.class, relateId, sessionId);\n        try {\n            Object data = JSON.parseMap(response.getBody()).get(\"data\");\n            if (!StringUtils.equals((String) data, \"false\")) {\n                return true;\n            }\n        } catch (Exception e) {\n            LogUtil.error(\"checkProjectExist error: \" + response.getBody());\n        }\n        return false;\n    }\n\n    public void uploadAttachment(String objectType, String objectId, File file) {\n        String sessionId = login();\n        HttpHeaders authHeader = new HttpHeaders();\n        authHeader.setContentType(MediaType.parseMediaType(\"multipart/form-data; charset=UTF-8\"));\n\n        MultiValueMap<String, Object> paramMap = new LinkedMultiValueMap<>();\n        FileSystemResource fileResource = new FileSystemResource(file);\n        paramMap.add(\"files\", fileResource);\n        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(paramMap, authHeader);\n\n        try {\n            restTemplate.exchange(requestUrl.getFileUpload(), HttpMethod.POST, requestEntity,\n                    String.class, objectId, sessionId);\n        } catch (Exception e) {\n            LogUtil.info(\"upload zentao attachment error\");\n        }\n    }\n\n    public void deleteAttachment(String fileId) {\n        String sessionId = login();\n        try {\n            restTemplate.exchange(requestUrl.getFileDelete(), HttpMethod.GET, null, String.class, fileId, sessionId);\n        } catch (Exception e) {\n            LogUtil.info(\"delete zentao attachment error\");\n        }\n    }\n\n    public byte[] getAttachmentBytes(String fileId) {\n        String sessionId = login();\n        ResponseEntity<byte[]> response = restTemplate.exchange(requestUrl.getFileDownload(), HttpMethod.GET,\n                null, byte[].class, fileId, sessionId);\n        return response.getBody();\n    }\n\n    public ResponseEntity proxyForGet(String path, Class responseEntityClazz) {\n        im.metersphere.plugin.utils.LogUtil.info(\"zentao proxyForGet: \" + path);\n        String url = this.ENDPOINT + path;\n        try {\n            if (!StringUtils.containsAny(new URI(url).getPath(), \"/index.php\", \"/file-read-\")) {\n                // \u53ea\u5141\u8bb8\u8bbf\u95ee\u56fe\u7247\n                MSException.throwException(\"illegal path\");\n            }\n        } catch (URISyntaxException e) {\n            LogUtil.error(e);\n            MSException.throwException(\"illegal path\");\n        }\n        return restTemplate.exchange(url, HttpMethod.GET, null, responseEntityClazz);\n    }\n}\n", "package io.metersphere.service.issue.platform;\n\nimport io.metersphere.base.domain.*;\nimport io.metersphere.base.mapper.AttachmentModuleRelationMapper;\nimport io.metersphere.base.mapper.IssuesMapper;\nimport io.metersphere.base.mapper.TestCaseIssuesMapper;\nimport io.metersphere.base.mapper.ext.ExtIssuesMapper;\nimport io.metersphere.commons.constants.CustomFieldType;\nimport io.metersphere.commons.constants.IssuesStatus;\nimport io.metersphere.commons.exception.MSException;\nimport io.metersphere.commons.utils.*;\nimport io.metersphere.dto.CustomFieldItemDTO;\nimport io.metersphere.dto.UserDTO;\nimport io.metersphere.request.IntegrationRequest;\nimport io.metersphere.service.*;\nimport io.metersphere.service.issue.domain.ProjectIssueConfig;\nimport io.metersphere.service.wapper.TrackProjectService;\nimport io.metersphere.service.wapper.UserService;\nimport io.metersphere.xpack.track.dto.*;\nimport io.metersphere.xpack.track.dto.request.IssuesRequest;\nimport io.metersphere.xpack.track.dto.request.IssuesUpdateRequest;\nimport io.metersphere.xpack.track.issue.IssuesPlatform;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.safety.Safelist;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.MultiValueMap;\n\nimport java.io.File;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\npublic abstract class AbstractIssuePlatform implements IssuesPlatform {\n\n    protected BaseIntegrationService baseIntegrationService;\n    protected TestCaseIssueService testCaseIssueService;\n    protected TestCaseIssuesMapper testCaseIssuesMapper;\n    protected TrackProjectService trackProjectService;\n    protected TestCaseService testCaseService;\n    protected IssuesMapper issuesMapper;\n    protected ExtIssuesMapper extIssuesMapper;\n    protected ResourceService resourceService;\n    protected UserService userService;\n    protected String testCaseId;\n    protected String projectId;\n    protected String key;\n    protected String workspaceId;\n    protected String userId;\n    protected String defaultCustomFields;\n    protected boolean isThirdPartTemplate;\n    protected CustomFieldIssuesService customFieldIssuesService;\n    protected BaseCustomFieldService baseCustomFieldService;\n    protected IssuesService issuesService;\n    protected FileService fileService;\n    protected AttachmentService attachmentService;\n    protected AttachmentModuleRelationMapper attachmentModuleRelationMapper;\n    protected BaseProjectService baseProjectService;\n\n    public static final String PROXY_PATH = \"/resource/md/get/path?platform=%s&workspaceId=%s&path=%s\";\n\n    public String getKey() {\n        return key;\n    }\n\n    public AbstractIssuePlatform(IssuesRequest issuesRequest) {\n        this();\n        this.testCaseId = issuesRequest.getTestCaseId();\n        this.projectId = issuesRequest.getProjectId();\n        this.workspaceId = issuesRequest.getWorkspaceId();\n        this.userId = issuesRequest.getUserId();\n        this.defaultCustomFields = issuesRequest.getDefaultCustomFields();\n    }\n\n    public AbstractIssuePlatform() {\n        this.baseIntegrationService = CommonBeanFactory.getBean(BaseIntegrationService.class);\n        this.testCaseIssuesMapper = CommonBeanFactory.getBean(TestCaseIssuesMapper.class);\n        this.trackProjectService = CommonBeanFactory.getBean(TrackProjectService.class);\n        this.testCaseService = CommonBeanFactory.getBean(TestCaseService.class);\n        this.userService = CommonBeanFactory.getBean(UserService.class);\n        this.issuesMapper = CommonBeanFactory.getBean(IssuesMapper.class);\n        this.extIssuesMapper = CommonBeanFactory.getBean(ExtIssuesMapper.class);\n        this.resourceService = CommonBeanFactory.getBean(ResourceService.class);\n        this.testCaseIssueService = CommonBeanFactory.getBean(TestCaseIssueService.class);\n        this.customFieldIssuesService = CommonBeanFactory.getBean(CustomFieldIssuesService.class);\n        this.baseCustomFieldService = CommonBeanFactory.getBean(BaseCustomFieldService.class);\n        this.issuesService = CommonBeanFactory.getBean(IssuesService.class);\n        this.fileService = CommonBeanFactory.getBean(FileService.class);\n        this.attachmentService = CommonBeanFactory.getBean(AttachmentService.class);\n        this.attachmentModuleRelationMapper = CommonBeanFactory.getBean(AttachmentModuleRelationMapper.class);\n        this.baseProjectService = CommonBeanFactory.getBean(BaseProjectService.class);\n    }\n\n    // xpack \u53cd\u5c04\u8c03\u7528\n    public String getProjectId() {\n        return projectId;\n    }\n\n    protected String getPlatformConfig(String platform) {\n        IntegrationRequest request = new IntegrationRequest();\n        if (StringUtils.isBlank(workspaceId)) {\n            MSException.throwException(\"workspace id is null\");\n        }\n        request.setWorkspaceId(workspaceId);\n        request.setPlatform(platform);\n\n        ServiceIntegration integration = baseIntegrationService.get(request);\n        return integration.getConfiguration();\n    }\n\n    protected String getProxyPath(String path) {\n        return String.format(PROXY_PATH, this.key, this.workspaceId, URLEncoder.encode(path, StandardCharsets.UTF_8));\n    }\n\n    protected HttpHeaders auth(String apiUser, String password) {\n        String authKey = EncryptUtils.base64Encoding(apiUser + \":\" + password);\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"Authorization\", \"Basic \" + authKey);\n        return headers;\n    }\n\n    /**\n     * \u83b7\u53d6\u5e73\u53f0\u4e0e\u9879\u76ee\u76f8\u5173\u7684\u5c5e\u6027\n     *\n     * @return \u5176\u4ed6\u5e73\u53f0\u548c\u672c\u5730\u9879\u76ee\u7ed1\u5b9a\u7684\u5c5e\u6027\u503c\n     */\n    public abstract String getProjectId(String projectId);\n\n    public String getProjectId(String projectId, Function<Project, String> getProjectKeyFuc) {\n        return getProjectKeyFuc.apply(getProject(projectId, getProjectKeyFuc));\n    }\n\n    public Project getProject(String projectId,  Function<Project, String> getProjectKeyFuc) {\n        Project project;\n        if (StringUtils.isNotBlank(projectId)) {\n            project = baseProjectService.getProjectById(projectId);\n        } else {\n            TestCaseWithBLOBs testCase = testCaseService.getTestCase(testCaseId);\n            project = baseProjectService.getProjectById(testCase.getProjectId());\n        }\n        String projectKey = getProjectKeyFuc.apply(project);\n        if (StringUtils.isBlank(projectKey)) {\n            MSException.throwException(\"\u8bf7\u5728\u9879\u76ee\u8bbe\u7f6e\u914d\u7f6e \" + key + \"\u9879\u76eeID\");\n        }\n        return project;\n    }\n\n    public ProjectIssueConfig getProjectConfig(String configStr) {\n        ProjectIssueConfig issueConfig;\n        if (StringUtils.isNotBlank(configStr)) {\n            issueConfig = JSON.parseObject(configStr, ProjectIssueConfig.class);\n        } else {\n            issueConfig = new ProjectIssueConfig();\n        }\n        return issueConfig;\n    }\n\n    protected void handleIssueUpdate(IssuesUpdateRequest request) {\n        request.setUpdateTime(System.currentTimeMillis());\n        issuesMapper.updateByPrimaryKeySelective(request);\n        handleTestCaseIssues(request);\n    }\n\n    protected void handleTestCaseIssues(IssuesUpdateRequest issuesRequest) {\n        issuesService.handleTestCaseIssues(issuesRequest);\n    }\n\n    protected void insertIssuesWithoutContext(String id, IssuesUpdateRequest issuesRequest) {\n        IssuesWithBLOBs issues = new IssuesWithBLOBs();\n        issues.setId(id);\n        issues.setPlatform(issuesRequest.getPlatform());\n        issues.setProjectId(issuesRequest.getProjectId());\n        issues.setCustomFields(issuesRequest.getCustomFields());\n        issues.setCreator(issuesRequest.getCreator());\n        issues.setCreateTime(System.currentTimeMillis());\n        issues.setUpdateTime(System.currentTimeMillis());\n        issues.setNum(getNextNum(issuesRequest.getProjectId()));\n        issues.setResourceId(issuesRequest.getResourceId());\n        issuesMapper.insert(issues);\n    }\n\n    protected IssuesWithBLOBs insertIssues(IssuesUpdateRequest issuesRequest) {\n        IssuesWithBLOBs issues = new IssuesWithBLOBs();\n        BeanUtils.copyBean(issues, issuesRequest);\n        issues.setId(issuesRequest.getId());\n        issues.setPlatformId(issuesRequest.getPlatformId());\n        issues.setCreateTime(System.currentTimeMillis());\n        issues.setUpdateTime(System.currentTimeMillis());\n        issues.setNum(getNextNum(issuesRequest.getProjectId()));\n        issues.setPlatformStatus(issuesRequest.getPlatformStatus());\n        issues.setCreator(SessionUtils.getUserId());\n        issuesMapper.insert(issues);\n        return issues;\n    }\n\n    protected int getNextNum(String projectId) {\n        Issues issue = extIssuesMapper.getNextNum(projectId);\n        if (issue == null || issue.getNum() == null) {\n            return 100001;\n        } else {\n            return Optional.of(issue.getNum() + 1).orElse(100001);\n        }\n    }\n\n    /**\n     * \u5c06html\u683c\u5f0f\u7684\u7f3a\u9677\u63cf\u8ff0\u8f6c\u6210ms\u5e73\u53f0\u7684\u683c\u5f0f\n     *\n     * @param htmlDesc\n     * @return\n     */\n    protected String htmlDesc2MsDesc(String htmlDesc) {\n        String desc = htmlImg2MsImg(htmlDesc);\n        Document document = Jsoup.parse(desc);\n        document.outputSettings(new Document.OutputSettings().prettyPrint(false));\n        document.select(\"br\").append(\"\\\\n\");\n        document.select(\"p\").prepend(\"\\\\n\\\\n\");\n        desc = document.html().replaceAll(\"\\\\\\\\n\", StringUtils.LF);\n        desc = Jsoup.clean(desc, \"\", Safelist.none(), new Document.OutputSettings().prettyPrint(false));\n        return desc.replace(\"&nbsp;\", \"\");\n    }\n\n    protected String msImg2HtmlImg(String input, String endpoint) {\n        // ![\u4e2d\u5fc3\u4e3b\u9898.png](/resource/md/get/a0b19136_\u4e2d\u5fc3\u4e3b\u9898.png) -> <img src=\"xxx/resource/md/get/a0b19136_\u4e2d\u5fc3\u4e3b\u9898.png\"/>\n        String regex = \"(\\\\!\\\\[.*?\\\\]\\\\((.*?)\\\\))\";\n        Pattern pattern = Pattern.compile(regex);\n        if (StringUtils.isBlank(input)) {\n            return \"\";\n        }\n        Matcher matcher = pattern.matcher(input);\n        String result = input;\n        while (matcher.find()) {\n            String path = matcher.group(2);\n            if (endpoint.endsWith(\"/\")) {\n                endpoint = endpoint.substring(0, endpoint.length() - 1);\n            }\n            path = \" <img src=\\\"\" + endpoint + path + \"\\\"/>\";\n            result = matcher.replaceFirst(path);\n            matcher = pattern.matcher(result);\n        }\n        return result;\n    }\n\n    protected String removeImage(String input) {\n        String regex = \"(\\\\!\\\\[.*?\\\\]\\\\((.*?)\\\\))\";\n        if (StringUtils.isBlank(input)) {\n            return \"\";\n        }\n        Matcher matcher = Pattern.compile(regex).matcher(input);\n        while (matcher.find()) {\n            matcher.group();\n            return matcher.replaceAll(\"\");\n        }\n        return input;\n    }\n\n    protected String getImages(String input) {\n        String result = \"\";\n        String regex = \"(\\\\!\\\\[.*?\\\\]\\\\((.*?)\\\\))\";\n        if (StringUtils.isBlank(input)) {\n            return result;\n        }\n        Matcher matcher = Pattern.compile(regex).matcher(input);\n        while (matcher.find()) {\n            result += matcher.group();\n        }\n        return result;\n    }\n\n    protected String htmlImg2MsImg(String input) {\n        // <img src=\"xxx/resource/md/get/a0b19136_\u4e2d\u5fc3\u4e3b\u9898.png\"/> ->  ![\u4e2d\u5fc3\u4e3b\u9898.png](/resource/md/get/a0b19136_\u4e2d\u5fc3\u4e3b\u9898.png)\n        String regex = \"(<img\\\\s*src=\\\\\\\"(.*?)\\\\\\\".*?>)\";\n        Pattern pattern = Pattern.compile(regex);\n        if (StringUtils.isBlank(input)) {\n            return \"\";\n        }\n        Matcher matcher = pattern.matcher(input);\n        String result = input;\n        while (matcher.find()) {\n            String url = matcher.group(2);\n            if (url.contains(\"/resource/md/get/\")) { // \u517c\u5bb9\u65e7\u6570\u636e\n                String path = url.substring(url.indexOf(\"/resource/md/get/\"));\n                String name = path.substring(path.indexOf(\"/resource/md/get/\") + 26);\n                String mdLink = \"![\" + name + \"](\" + path + \")\";\n                result = matcher.replaceFirst(mdLink);\n                matcher = pattern.matcher(result);\n            } else if(url.contains(\"/resource/md/get\")) { //\u65b0\u6570\u636e\u8d70\u8fd9\u91cc\n                String path = url.substring(url.indexOf(\"/resource/md/get\"));\n                String name = path.substring(path.indexOf(\"/resource/md/get\") + 35);\n                String mdLink = \"![\" + name + \"](\" + path + \")\";\n                result = matcher.replaceFirst(mdLink);\n                matcher = pattern.matcher(result);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * \u8f6c\u8bd1\u5b57\u7b26\u4e32\u4e2d\u7684\u7279\u6b8a\u5b57\u7b26\n     * @param str\n     * @return\n     */\n    protected String transferSpecialCharacter(String str) {\n        String regEx=\"[`~!@#$%^&*()+=|{}':;',\\\\[\\\\].<>/?~\uff01@#\uffe5%\u2026\u2026&*\uff08\uff09\u2014\u2014+|{}\u3010\u3011\u2018\uff1b\uff1a\u201d\u201c\u2019\u3002\uff0c\u3001\uff1f]\";\n        Pattern pattern = Pattern.compile(regEx);\n        Matcher matcher = pattern.matcher(str);\n        if(matcher.find()){\n            CharSequence cs = str;\n            int j =0;\n            for(int i=0; i< cs.length(); i++){\n                String temp = String.valueOf(cs.charAt(i));\n                Matcher m2 = pattern.matcher(temp);\n                if(m2.find()){\n                    StringBuilder sb = new StringBuilder(str);\n                    str = sb.insert(j, \"\\\\\").toString();\n                    j++;\n                }\n                j++; //\u8f6c\u4e49\u5b8c\u6210\u540estr\u7684\u957f\u5ea6\u589e1\n            }\n        }\n        return str;\n    }\n\n    public List<File> getImageFiles(String input) {\n        List<File> files = new ArrayList<>();\n        String regex = \"(\\\\!\\\\[.*?\\\\]\\\\((.*?)\\\\))\";\n        Pattern pattern = Pattern.compile(regex);\n        if (StringUtils.isBlank(input)) {\n            return new ArrayList<>();\n        }\n        Matcher matcher = pattern.matcher(input);\n        while (matcher.find()) {\n            try {\n                String path = matcher.group(2);\n                if (!path.contains(\"/resource/md/get/url\") && !path.contains(\"/resource/md/get/path\")) {\n                    if (path.contains(\"/resource/md/get/\")) { // \u517c\u5bb9\u65e7\u6570\u636e\n                        String name = path.substring(path.indexOf(\"/resource/md/get/\") + 17);\n                        files.add(new File(FileUtils.MD_IMAGE_DIR + \"/\" + name));\n                    } else if (path.contains(\"/resource/md/get\")) { // \u65b0\u6570\u636e\u8d70\u8fd9\u91cc\n                        String name = path.substring(path.indexOf(\"/resource/md/get\") + 26);\n                        files.add(new File(FileUtils.MD_IMAGE_DIR + \"/\" + URLDecoder.decode(name, StandardCharsets.UTF_8.name())));\n                    }\n                }\n            } catch (Exception e) {\n                LogUtil.error(e.getMessage(), e);\n            }\n        }\n        return files;\n    }\n\n    protected UserDTO.PlatformInfo getUserPlatInfo(String workspaceId) {\n        return userService.getCurrentPlatformInfo(workspaceId);\n    }\n\n    @Override\n    public void deleteIssue(String id) {\n        IssuesService issuesService = CommonBeanFactory.getBean(IssuesService.class);\n        issuesService.deleteIssue(id);\n    }\n\n    protected void addCustomFields(IssuesUpdateRequest issuesRequest, MultiValueMap<String, Object> paramMap) {\n        List<CustomFieldItemDTO> customFields = issuesRequest.getRequestFields();\n        if (!CollectionUtils.isEmpty(customFields)) {\n            customFields.forEach(item -> {\n                if (StringUtils.isNotBlank(item.getCustomData())) {\n                    if (item.getValue() instanceof String) {\n                        paramMap.add(item.getCustomData(), ((String) item.getValue()).trim());\n                    } else {\n                        paramMap.add(item.getCustomData(), item.getValue());\n                    }\n                }\n            });\n        }\n    }\n\n    protected Object getSyncJsonParamValue(Object value) {\n        Map valObj = ((Map) value);\n        String accountId = Optional.ofNullable(valObj.get(\"accountId\")).orElse(\"\").toString();\n        Map child = (Map) valObj.get(\"child\");\n        if (child != null) {// \u7ea7\u8054\u6846\n            List<Object> values = new ArrayList<>();\n            String id = Optional.ofNullable(valObj.get(\"id\")).orElse(\"\").toString();\n            if (StringUtils.isNotBlank(id))  {\n                values.add(valObj.get(\"id\"));\n            }\n            if (StringUtils.isNotBlank(id))  {\n                values.add(child.get(\"id\"));\n            }\n            return values;\n        } else if (StringUtils.isNotBlank(accountId) && isThirdPartTemplate) {\n            // \u7528\u6237\u9009\u62e9\u6846\n            return accountId;\n        } else {\n            String id = Optional.ofNullable(valObj.get(\"id\")).orElse(\"\").toString();\n            if (StringUtils.isNotBlank(id)) {\n                return valObj.get(\"id\");\n            } else {\n                return valObj.get(\"key\");\n            }\n        }\n    }\n\n    protected String syncIssueCustomField(String customFieldsStr, Map issue) {\n        List<CustomFieldItemDTO> customFieldItemDTOList = syncIssueCustomFieldList(customFieldsStr, issue);\n        return JSON.toJSONString(customFieldItemDTOList);\n    }\n\n    protected List<CustomFieldItemDTO> syncIssueCustomFieldList(String customFieldsStr, Map issue) {\n        List<CustomFieldItemDTO> customFields = BaseCustomFieldService.getCustomFields(customFieldsStr);\n        Set<String> names = issue.keySet();\n        customFields.forEach(item -> {\n            String fieldName = item.getCustomData();\n            Object value = issue.get(fieldName);\n            if (value != null) {\n                if (value instanceof Map) {\n                    item.setValue(getSyncJsonParamValue(value));\n                    if (StringUtils.equals(fieldName, \"assignee\")) {\n                        item.setValue(((Map) value).get(\"displayName\"));\n                    } else {\n                        item.setValue(getSyncJsonParamValue(value));\n                    }\n                } else if (value instanceof List) {\n                    // Sprint \u662f\u5355\u9009 \u540c\u6b65\u56de\u6765\u662f JSONArray\n                    if (StringUtils.equals(item.getType(), \"select\")) {\n                        if (((List) value).size() > 0) {\n                            Object o = ((List) value).get(0);\n                            if (o instanceof Map) {\n                                item.setValue(getSyncJsonParamValue(o));\n                            }\n                        }\n                    } else {\n                        List<Object> values = new ArrayList<>();\n                        ((List) value).forEach(attr -> {\n                            if (attr instanceof Map) {\n                                values.add(getSyncJsonParamValue(attr));\n                            } else {\n                                values.add(attr);\n                            }\n                        });\n                        item.setValue(values);\n                    }\n                } else {\n                    item.setValue(value);\n                }\n            } else if (names.contains(fieldName)) {\n                if (item.getType().equals(CustomFieldType.CHECKBOX.getValue())) {\n                    item.setValue(new ArrayList<>());\n                } else {\n                    item.setValue(null);\n                }\n            } else {\n                try {\n                    if (item.getValue() != null) {\n                        item.setValue(JSON.parseObject(item.getValue().toString()));\n                    }\n                } catch (Exception e) {\n                    LogUtil.error(e);\n                }\n            }\n        });\n        return customFields;\n    }\n\n    @Override\n    public void syncAllIssues(Project project, IssueSyncRequest syncRequest) {}\n\n    @Override\n    public IssueTemplateDao getThirdPartTemplate() {return null;}\n\n    protected List<IssuesWithBLOBs> getIssuesByPlatformIds(List<String> platformIds) {\n        IssuesService issuesService = CommonBeanFactory.getBean(IssuesService.class);\n        return issuesService.getIssuesByPlatformIds(platformIds, projectId);\n    }\n\n    protected Map<String, IssuesWithBLOBs> getUuIdMap(List<IssuesWithBLOBs> issues) {\n        HashMap<String, IssuesWithBLOBs> issueMap = new HashMap<>();\n        if (org.apache.commons.collections.CollectionUtils.isNotEmpty(issues)) {\n            issues.forEach(item -> issueMap.put(item.getPlatformId(), item));\n        }\n        return issueMap;\n    }\n\n    protected void deleteSyncIssue(List<String> ids) {\n        if (CollectionUtils.isEmpty(ids)) return;\n        IssuesExample example = new IssuesExample();\n        IssuesWithBLOBs issue = new IssuesWithBLOBs();\n        issue.setPlatformStatus(IssuesStatus.DELETE.toString());\n        example.createCriteria().andIdIn(ids);\n        issuesMapper.updateByExampleSelective(issue, example);\n    }\n\n    protected List<String> updateSyncDeleteIds(List<String> uuIds, List<String> syncDeleteIds, String platform) {\n        if (org.apache.commons.collections.CollectionUtils.isNotEmpty(uuIds)) {\n            // \u6bcf\u6b21\u83b7\u53d6\u4e0d\u5728\u5f53\u524d\u67e5\u8be2\u7684\u7f3a\u9677\u91cc\u7684 id\n            List<String> notInIds = extIssuesMapper.selectIdNotInUuIds(projectId, platform, uuIds);\n            if (syncDeleteIds == null) {\n                syncDeleteIds = notInIds;\n            } else {\n                // \u6c42\u4ea4\u96c6\uff0c\u5373\u4e0d\u5728\u6240\u6709\u67e5\u8be2\u91cc\u7684\u7f3a\u9677\uff0c\u5373\u8981\u5220\u9664\u7684\u7f3a\u9677\n                syncDeleteIds.retainAll(notInIds);\n            }\n        }\n        return syncDeleteIds;\n    }\n\n    protected void mergeCustomField(IssuesWithBLOBs issues, String defaultCustomField) {\n        if (StringUtils.isNotBlank(defaultCustomField)) {\n            List<CustomFieldItemDTO> customFields = extIssuesMapper.getIssueCustomField(issues.getId());\n            Map<String, CustomFieldItemDTO> fieldMap = customFields.stream()\n                    .collect(Collectors.toMap(CustomFieldItemDTO::getId, i -> i));\n\n            List<CustomFieldItemDTO> defaultFields = JSON.parseArray(defaultCustomField, CustomFieldItemDTO.class);\n            for (CustomFieldItemDTO defaultField : defaultFields) {\n                String id = defaultField.getId();\n                if (StringUtils.isBlank(id)) {\n                    defaultField.setId(defaultField.getKey());\n                }\n                if (fieldMap.keySet().contains(id)) {\n                    // \u8bbe\u7f6e\u7b2c\u4e09\u65b9\u5e73\u53f0\u7684\u5c5e\u6027\u540d\u79f0\n                    fieldMap.get(id).setCustomData(defaultField.getCustomData());\n                } else {\n                    // \u5982\u679c\u81ea\u5b9a\u4e49\u5b57\u6bb5\u91cc\u6ca1\u6709\u6a21\u677f\u65b0\u52a0\u7684\u5b57\u6bb5\uff0c\u5c31\u628a\u65b0\u5b57\u6bb5\u52a0\u4e0a\n                    customFields.add(defaultField);\n                }\n            }\n\n            // \u8fc7\u6ee4\u6ca1\u6709\u914d\u7f6e\u7b2c\u4e09\u65b9\u5b57\u6bb5\u540d\u79f0\u7684\u5b57\u6bb5\uff0c\u4e0d\u9700\u8981\u66f4\u65b0\n            customFields = customFields.stream()\n                    .filter(i -> StringUtils.isNotBlank(i.getCustomData()))\n                    .collect(Collectors.toList());\n            issues.setCustomFields(JSON.toJSONString(customFields));\n        }\n    }\n\n    // \u7f3a\u9677\u5bf9\u8c61\u5e26\u6709\u81ea\u5b9a\u4e49\u5b57\u6bb5\u6570\u636e\n    protected void mergeIfIssueWithCustomField(IssuesWithBLOBs issue, String defaultCustomField) {\n        if (StringUtils.isBlank(defaultCustomFields)) {\n            return;\n        }\n        List<Map> fields = JSON.parseArray(issue.getCustomFields());\n        Set<String> ids = fields.stream()\n                .map(i -> i.get(\"id\").toString())\n                .collect(Collectors.toSet());\n\n        List<Map> defaultFields = JSON.parseArray(defaultCustomField);\n        defaultFields.forEach(item -> { // \u5982\u679c\u81ea\u5b9a\u4e49\u5b57\u6bb5\u91cc\u6ca1\u6709\u6a21\u677f\u65b0\u52a0\u7684\u5b57\u6bb5\uff0c\u5c31\u628a\u65b0\u5b57\u6bb5\u52a0\u4e0a\n            String id = item.get(\"id\").toString();\n            if (StringUtils.isBlank(id)) {\n                id = item.get(\"key\").toString();\n                item.put(\"id\", id);\n            }\n            if (!ids.contains(id)) {\n                fields.add(item);\n            }\n        });\n        issue.setCustomFields(JSON.toJSONString(fields));\n    }\n\n    public <T> T getConfig(String platform, Class<T> clazz) {\n        String config = getPlatformConfig(platform);\n        if (StringUtils.isBlank(config)) {\n            MSException.throwException(\"\u914d\u7f6e\u4e3a\u7a7a\");\n        }\n        return JSON.parseObject(config, clazz);\n    }\n\n    public void buildSyncCreate(IssuesWithBLOBs issue, String platformId, Integer nextNum) {\n        issue.setProjectId(projectId);\n        issue.setId(UUID.randomUUID().toString());\n        issue.setPlatformId(platformId);\n        issue.setCreator(SessionUtils.getUserId());\n        issue.setNum(nextNum);\n    }\n\n    public boolean isThirdPartTemplate() {\n        Project project = baseProjectService.getProjectById(projectId);\n        if (project.getThirdPartTemplate() != null && project.getThirdPartTemplate()) {\n            return true;\n        }\n        return false;\n    }\n\n    @Override\n    public Boolean checkProjectExist(String relateId) {\n        return null;\n    }\n\n    /**\n     * \u79fb\u9664\u7f3a\u9677\u7684Parent\u5173\u8054\n     * @param request\n     */\n    @Override\n    public void removeIssueParentLink(IssuesUpdateRequest request) {\n        // \u6dfb\u52a0\u65b9\u6cd5\u4f53\u903b\u8f91\u53ef\u91cd\u5199\u6539\u65b9\u6cd5\n    }\n\n    /**\n     * \u66f4\u65b0\u9700\u6c42\u4e0e\u7f3a\u9677\u7684\u5173\u8054\u5173\u7cfb\n     * @param testCase\n     * @param project\n     */\n    @Override\n    public void updateDemandIssueLink(EditTestCaseRequest testCase, Project project) {\n        // \u6dfb\u52a0\u65b9\u6cd5\u4f53\u903b\u8f91\u53ef\u91cd\u5199\u6539\u65b9\u6cd5\n    }\n\n    /**\n     * \u66f4\u65b0\u9700\u6c42\u4e0e\u7528\u4f8b\u7684\u5173\u8054\u5173\u7cfb\n     * @param request\n     * @param project\n     * @param type   add or edit\n     */\n    @Override\n    public void updateDemandHyperLink(EditTestCaseRequest request, Project project, String type) {\n        // \u6dfb\u52a0\u65b9\u6cd5\u4f53\u903b\u8f91\u53ef\u91cd\u5199\u6539\u65b9\u6cd5\n    }\n\n    /**\n     * \u83b7\u53d6\u7b2c\u4e09\u65b9\u5e73\u53f0\u7684\u72b6\u6001\u96c6\u5408\n     * @param issueKey\n     * @return\n     */\n    public List<PlatformStatusDTO> getTransitions(String issueKey) {\n        return null;\n    }\n\n    @Override\n    public ResponseEntity proxyForGet(String url, Class responseEntityClazz) {\n        return null;\n    }\n\n    @Override\n    public List<IssuesDao> getIssue(IssuesRequest request) {\n        return null;\n    }\n}\n", "package io.metersphere.service.issue.platform;\n\nimport io.metersphere.base.domain.*;\nimport io.metersphere.commons.constants.IssuesManagePlatform;\nimport io.metersphere.commons.constants.IssuesStatus;\nimport io.metersphere.commons.constants.ZentaoIssuePlatformStatus;\nimport io.metersphere.commons.exception.MSException;\nimport io.metersphere.commons.utils.DateUtils;\nimport io.metersphere.commons.utils.JSON;\nimport io.metersphere.commons.utils.LogUtil;\nimport io.metersphere.xpack.track.dto.AttachmentSyncType;\nimport io.metersphere.constants.AttachmentType;\nimport io.metersphere.dto.*;\nimport io.metersphere.xpack.track.dto.AttachmentRequest;\nimport io.metersphere.xpack.track.dto.DemandDTO;\nimport io.metersphere.xpack.track.dto.IssuesDao;\nimport io.metersphere.xpack.track.dto.request.IssuesRequest;\nimport io.metersphere.xpack.track.dto.request.IssuesUpdateRequest;\nimport io.metersphere.service.issue.client.ZentaoClient;\nimport io.metersphere.service.issue.client.ZentaoGetClient;\nimport io.metersphere.xpack.track.dto.PlatformUser;\n\nimport io.metersphere.service.issue.domain.zentao.AddIssueResponse;\nimport io.metersphere.service.issue.domain.zentao.GetIssueResponse;\nimport io.metersphere.service.issue.domain.zentao.ZentaoBuild;\nimport io.metersphere.service.issue.domain.zentao.ZentaoConfig;\nimport io.metersphere.xpack.track.dto.PlatformStatusDTO;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.logging.log4j.util.Strings;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.io.File;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\npublic class ZentaoPlatform extends AbstractIssuePlatform {\n    protected final ZentaoClient zentaoClient;\n\n    protected final String[] imgArray = {\n            \"bmp\", \"jpg\", \"png\", \"tif\", \"gif\", \"jpeg\"\n    };\n\n    // xpack \u53cd\u5c04\u8c03\u7528\n    public ZentaoClient getZentaoClient() {\n        return zentaoClient;\n    }\n\n    public ZentaoPlatform(IssuesRequest issuesRequest) {\n        super(issuesRequest);\n        this.key = IssuesManagePlatform.Zentao.name();\n        ZentaoConfig zentaoConfig = getConfig();\n        this.workspaceId = issuesRequest.getWorkspaceId();\n        this.zentaoClient = ZentaoFactory.getInstance(zentaoConfig.getUrl(), zentaoConfig.getRequest());\n        this.zentaoClient.setConfig(zentaoConfig);\n    }\n\n    @Override\n    public String getProjectId(String projectId) {\n        return getProjectId(projectId, Project::getZentaoId);\n    }\n\n    @Override\n    public List<IssuesDao> getIssue(IssuesRequest issuesRequest) {\n        issuesRequest.setPlatform(key);\n        List<IssuesDao> issues;\n        if (StringUtils.isNotBlank(issuesRequest.getProjectId())) {\n            issues = extIssuesMapper.getIssues(issuesRequest);\n        } else {\n            issues = extIssuesMapper.getIssuesByCaseId(issuesRequest);\n        }\n        return issues;\n    }\n\n    public IssuesDao getZentaoAssignedAndBuilds(IssuesDao issue) {\n        Map zentaoIssue = (Map) zentaoClient.getBugById(issue.getPlatformId());\n        String assignedTo = zentaoIssue.get(\"assignedTo\").toString();\n        String openedBuild = zentaoIssue.get(\"openedBuild\").toString();\n        List<String> zentaoBuilds = new ArrayList<>();\n        if (Strings.isNotBlank(openedBuild)) {\n            zentaoBuilds = Arrays.asList(openedBuild.split(\",\"));\n        }\n        issue.setZentaoAssigned(assignedTo);\n        issue.setZentaoBuilds(zentaoBuilds);\n        return issue;\n    }\n\n    @Override\n    public List<DemandDTO> getDemandList(String projectId) {\n        //getTestStories\n        List<DemandDTO> list = new ArrayList<>();\n        try {\n            String session = zentaoClient.login();\n            String key = getProjectId(projectId);\n            HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<>(new HttpHeaders());\n            RestTemplate restTemplate = new RestTemplate();\n            String storyGet = zentaoClient.requestUrl.getStoryGet();\n            ResponseEntity<String> responseEntity = restTemplate.exchange(storyGet + session,\n                    HttpMethod.POST, requestEntity, String.class, key);\n            String body = responseEntity.getBody();\n            Map obj = JSON.parseMap(body);\n\n            LogUtil.info(\"project story: \" + key + obj);\n\n            if (obj != null) {\n                String data = obj.get(\"data\").toString();\n                if (StringUtils.isBlank(data)) {\n                    return list;\n                }\n                // \u517c\u5bb9\u5904\u740611.5\u7248\u672c\u683c\u5f0f [{obj},{obj}]\n                if (data.charAt(0) == '[') {\n                    List array = (List) obj.get(\"data\");\n                    for (int i = 0; i < array.size(); i++) {\n                        Map o = (Map) array.get(i);\n                        DemandDTO demandDTO = new DemandDTO();\n                        demandDTO.setId(o.get(\"id\").toString());\n                        demandDTO.setName(o.get(\"title\").toString());\n                        demandDTO.setPlatform(key);\n                        list.add(demandDTO);\n                    }\n                }\n                // {\"5\": {\"children\": {\"51\": {}}}, \"6\": {}}\n                else if (data.startsWith(\"{\\\"\")) {\n                    Map<String, Map<String, String>> dataMap = JSON.parseMap(data);\n                    Collection<Map<String, String>> values = dataMap.values();\n                    values.forEach(v -> {\n                        Map jsonObject = JSON.parseMap(JSON.toJSONString(v));\n                        DemandDTO demandDTO = new DemandDTO();\n                        demandDTO.setId(jsonObject.get(\"id\").toString());\n                        demandDTO.setName(jsonObject.get(\"title\").toString());\n                        demandDTO.setPlatform(key);\n                        list.add(demandDTO);\n                        if (jsonObject.get(\"children\") != null) {\n                            LinkedHashMap<String, Map<String, String>> children = (LinkedHashMap<String, Map<String, String>>) jsonObject.get(\"children\");\n                            Collection<Map<String, String>> childrenMap = children.values();\n                            childrenMap.forEach(ch -> {\n                                DemandDTO dto = new DemandDTO();\n                                dto.setId(ch.get(\"id\"));\n                                dto.setName(ch.get(\"title\"));\n                                dto.setPlatform(key);\n                                list.add(dto);\n                            });\n                        }\n                    });\n                }\n                // \u5904\u7406\u683c\u5f0f {{\"id\": {obj}},{\"id\",{obj}}}\n                else if (data.charAt(0) == '{') {\n                    Map dataObject = (Map) obj.get(\"data\");\n                    String s = JSON.toJSONString(dataObject);\n                    Map<String, Object> map = JSON.parseMap(s);\n                    Collection<Object> values = map.values();\n                    values.forEach(v -> {\n                        Map jsonObject = JSON.parseMap(JSON.toJSONString(v));\n                        DemandDTO demandDTO = new DemandDTO();\n                        demandDTO.setId(jsonObject.get(\"id\").toString());\n                        demandDTO.setName(jsonObject.get(\"title\").toString());\n                        demandDTO.setPlatform(key);\n                        list.add(demandDTO);\n                    });\n                }\n            }\n        } catch (Exception e) {\n            LogUtil.error(\"get zentao demand fail \" + e.getMessage());\n        }\n        return list;\n    }\n\n    public IssuesWithBLOBs getUpdateIssues(Map bug) {\n        return getUpdateIssues(null, bug);\n    }\n\n    /**\n     * \u66f4\u65b0\u7f3a\u9677\u6570\u636e\n     *\n     * @param issue \u5f85\u66f4\u65b0\u7f3a\u9677\u6570\u636e\n     * @param bug   \u5e73\u53f0\u7f3a\u9677\u6570\u636e\n     * @return\n     */\n    public IssuesWithBLOBs getUpdateIssues(IssuesWithBLOBs issue, Map bug) {\n\n        GetIssueResponse.Issue bugObj = JSON.parseObject(JSON.toJSONString(bug), GetIssueResponse.Issue.class);\n        String description = bugObj.getSteps();\n        String steps = description;\n        try {\n            steps = htmlDesc2MsDesc(zentao2MsDescription(description));\n        } catch (Exception e) {\n            LogUtil.error(e.getMessage(), e);\n        }\n        if (issue == null) {\n            issue = new IssuesWithBLOBs();\n            issue.setCustomFields(defaultCustomFields);\n        } else {\n            mergeCustomField(issue, defaultCustomFields);\n        }\n        issue.setPlatformStatus(bugObj.getStatus());\n        if (StringUtils.equals(bugObj.getDeleted(), \"1\")) {\n            issue.setPlatformStatus(IssuesStatus.DELETE.toString());\n            issuesMapper.updateByPrimaryKeySelective(issue);\n        }\n        issue.setTitle(bugObj.getTitle());\n        issue.setDescription(steps);\n        issue.setReporter(bugObj.getOpenedBy());\n        issue.setPlatform(key);\n        try {\n            String openedDate = bug.get(\"openedDate\").toString();\n            String lastEditedDate = bug.get(\"lastEditedDate\").toString();\n            if (StringUtils.isNotBlank(openedDate) && !openedDate.startsWith(\"0000-00-00\"))\n                issue.setCreateTime(DateUtils.getTime(openedDate).getTime());\n            if (StringUtils.isNotBlank(lastEditedDate) && !lastEditedDate.startsWith(\"0000-00-00\"))\n                issue.setUpdateTime(DateUtils.getTime(lastEditedDate).getTime());\n        } catch (Exception e) {\n            LogUtil.error(\"update zentao time\" + e.getMessage());\n        }\n        if (issue.getUpdateTime() == null) {\n            issue.setUpdateTime(System.currentTimeMillis());\n        }\n        issue.setCustomFields(syncIssueCustomField(issue.getCustomFields(), bug));\n        return issue;\n    }\n\n    @Override\n    public IssuesWithBLOBs addIssue(IssuesUpdateRequest issuesRequest) {\n        setUserConfig();\n\n        MultiValueMap<String, Object> param = buildUpdateParam(issuesRequest);\n        AddIssueResponse.Issue issue = zentaoClient.addIssue(param);\n        issuesRequest.setPlatformStatus(issue.getStatus());\n\n        IssuesWithBLOBs issues = null;\n\n        String id = issue.getId();\n        if (StringUtils.isNotBlank(id)) {\n            issuesRequest.setPlatformId(id);\n            issuesRequest.setId(UUID.randomUUID().toString());\n\n            IssuesExample issuesExample = new IssuesExample();\n            issuesExample.createCriteria().andIdEqualTo(id)\n                    .andPlatformEqualTo(key);\n            if (issuesMapper.selectByExample(issuesExample).size() <= 0) {\n                // \u63d2\u5165\u7f3a\u9677\u8868\n                issues = insertIssues(issuesRequest);\n            }\n\n            // \u7528\u4f8b\u4e0e\u7b2c\u4e09\u65b9\u7f3a\u9677\u5e73\u53f0\u4e2d\u7684\u7f3a\u9677\u5173\u8054\n            handleTestCaseIssues(issuesRequest);\n        } else {\n            MSException.throwException(\"\u8bf7\u786e\u8ba4\u8be5Zentao\u8d26\u53f7\u662f\u5426\u5f00\u542f\u8d85\u7ea7model\u8c03\u7528\u63a5\u53e3\u6743\u9650\");\n        }\n\n        // \u5982\u679c\u662f\u590d\u5236\u65b0\u589e, \u540c\u6b65MS\u9644\u4ef6\u5230Zentao\n        if (StringUtils.isNotEmpty(issuesRequest.getCopyIssueId())) {\n            AttachmentRequest request = new AttachmentRequest();\n            request.setBelongId(issuesRequest.getCopyIssueId());\n            request.setBelongType(AttachmentType.ISSUE.type());\n            List<String> attachmentIds = attachmentService.getAttachmentIdsByParam(request);\n            if (CollectionUtils.isNotEmpty(attachmentIds)) {\n                attachmentIds.forEach(attachmentId -> {\n                    FileAttachmentMetadata fileAttachmentMetadata = attachmentService.getFileAttachmentMetadataByFileId(attachmentId);\n                    File file = new File(fileAttachmentMetadata.getFilePath() + File.separator + fileAttachmentMetadata.getName());\n                    zentaoClient.uploadAttachment(\"bug\", issuesRequest.getPlatformId(), file);\n                });\n            }\n        }\n\n        return issues;\n    }\n\n    @Override\n    public void updateIssue(IssuesUpdateRequest request) {\n        setUserConfig();\n        MultiValueMap<String, Object> param = buildUpdateParam(request);\n        if (request.getTransitions() != null) {\n            request.setPlatformStatus(request.getTransitions().getValue());\n        }\n        handleIssueUpdate(request);\n        this.handleZentaoBugStatus(param);\n        zentaoClient.updateIssue(request.getPlatformId(), param);\n    }\n\n    private void handleZentaoBugStatus(MultiValueMap<String, Object> param) {\n        if (!param.containsKey(\"status\")) {\n            return;\n        }\n        List<Object> status = param.get(\"status\");\n        if (CollectionUtils.isEmpty(status)) {\n            return;\n        }\n        try {\n            SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n            String str = (String) status.get(0);\n            if (StringUtils.equals(str, \"resolved\")) {\n                param.add(\"resolvedDate\", format.format(new Date()));\n            } else if (StringUtils.equals(str, \"closed\")) {\n                param.add(\"closedDate\", format.format(new Date()));\n                if (!param.containsKey(\"resolution\")) {\n                    // \u89e3\u51b3\u65b9\u6848\u9ed8\u8ba4\u4e3a\u5df2\u89e3\u51b3\n                    param.add(\"resolution\", \"fixed\");\n                }\n            }\n        } catch (Exception e) {\n            //\n        }\n    }\n\n    private MultiValueMap<String, Object> buildUpdateParam(IssuesUpdateRequest issuesRequest) {\n        issuesRequest.setPlatform(key);\n        String projectId = getProjectId(issuesRequest.getProjectId());\n        if (StringUtils.isBlank(projectId)) {\n            MSException.throwException(\"\u672a\u5173\u8054\u7985\u9053\u9879\u76eeID.\");\n        }\n        MultiValueMap<String, Object> paramMap = new LinkedMultiValueMap<>();\n        paramMap.add(\"product\", projectId);\n        paramMap.add(\"title\", issuesRequest.getTitle());\n        if (issuesRequest.getTransitions() != null) {\n            paramMap.add(\"status\", issuesRequest.getTransitions().getValue());\n        }\n\n        addCustomFields(issuesRequest, paramMap);\n\n        String description = issuesRequest.getDescription();\n        String zentaoSteps = description;\n\n        // transfer description\n        try {\n            zentaoSteps = ms2ZentaoDescription(description);\n            zentaoSteps = zentaoSteps.replaceAll(\"\\\\n\", \"<br/>\");\n        } catch (Exception e) {\n            LogUtil.error(e.getMessage(), e);\n        }\n        LogUtil.info(\"zentao description transfer: \" + zentaoSteps);\n\n        paramMap.add(\"steps\", zentaoSteps);\n        if (!CollectionUtils.isEmpty(issuesRequest.getZentaoBuilds())) {\n            List<String> builds = issuesRequest.getZentaoBuilds();\n            builds.forEach(build -> paramMap.add(\"openedBuild[]\", build));\n        } else {\n            paramMap.add(\"openedBuild\", \"trunk\");\n        }\n        if (StringUtils.isNotBlank(issuesRequest.getZentaoAssigned())) {\n            paramMap.add(\"assignedTo\", issuesRequest.getZentaoAssigned());\n        }\n        return paramMap;\n    }\n\n    @Override\n    public void deleteIssue(String id) {\n        IssuesWithBLOBs issuesWithBLOBs = issuesMapper.selectByPrimaryKey(id);\n        super.deleteIssue(id);\n        zentaoClient.deleteIssue(issuesWithBLOBs.getPlatformId());\n    }\n\n    @Override\n    public void testAuth() {\n        zentaoClient.login();\n    }\n\n    @Override\n    public void userAuth(UserDTO.PlatformInfo userInfo) {\n        setUserConfig(userInfo);\n        zentaoClient.login();\n    }\n\n    public ZentaoConfig getConfig() {\n        return getConfig(key, ZentaoConfig.class);\n    }\n\n    public ZentaoConfig setConfig() {\n        ZentaoConfig config = getConfig();\n        zentaoClient.setConfig(config);\n        return config;\n    }\n\n    public ZentaoConfig setUserConfig() {\n        return setUserConfig(getUserPlatInfo(this.workspaceId));\n    }\n\n    public ZentaoConfig setUserConfig(UserDTO.PlatformInfo userPlatInfo) {\n        ZentaoConfig zentaoConfig = getConfig();\n        if (userPlatInfo != null && StringUtils.isNotBlank(userPlatInfo.getZentaoUserName())\n                && StringUtils.isNotBlank(userPlatInfo.getZentaoPassword())) {\n            zentaoConfig.setAccount(userPlatInfo.getZentaoUserName());\n            zentaoConfig.setPassword(userPlatInfo.getZentaoPassword());\n        }\n        zentaoClient.setConfig(zentaoConfig);\n        return zentaoConfig;\n    }\n\n    @Override\n    public List<PlatformUser> getPlatformUser() {\n        String session = zentaoClient.login();\n        HttpHeaders httpHeaders = new HttpHeaders();\n        HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<>(httpHeaders);\n        RestTemplate restTemplate = new RestTemplate();\n        String getUser = zentaoClient.requestUrl.getUserGet();\n        ResponseEntity<String> responseEntity = restTemplate.exchange(getUser + session,\n                HttpMethod.GET, requestEntity, String.class);\n        String body = responseEntity.getBody();\n        Map obj = JSON.parseMap(body);\n\n        LogUtil.info(\"zentao user \" + obj);\n\n        List data = JSON.parseArray(obj.get(\"data\").toString());\n\n        List<PlatformUser> users = new ArrayList<>();\n        for (int i = 0; i < data.size(); i++) {\n            Map o = (Map) data.get(i);\n            PlatformUser platformUser = new PlatformUser();\n            String account = o.get(\"account\").toString();\n            String username = o.get(\"realname\").toString();\n            platformUser.setName(username);\n            platformUser.setUser(account);\n            users.add(platformUser);\n        }\n        return users;\n    }\n\n    @Override\n    public void syncIssues(Project project, List<IssuesDao> issues) {\n        HashMap<String, List<CustomFieldResourceDTO>> customFieldMap = new HashMap<>();\n\n        issues.forEach(item -> {\n            IssuesWithBLOBs issue = issuesMapper.selectByPrimaryKey(item.getId());\n            Map bug = zentaoClient.getBugById(item.getPlatformId());\n            issue = getUpdateIssues(issue, bug);\n            customFieldMap.put(item.getId(), baseCustomFieldService.getCustomFieldResourceDTO(issue.getCustomFields()));\n            issue.setId(item.getId());\n            issuesMapper.updateByPrimaryKeySelective(issue);\n            syncZentaoIssueAttachments(issue);\n        });\n        customFieldIssuesService.batchEditFields(customFieldMap);\n    }\n\n    public List<ZentaoBuild> getBuilds() {\n        Map<String, Object> builds = zentaoClient.getBuildsByCreateMetaData(getProjectId(projectId));\n        if (builds == null || builds.isEmpty()) {\n            builds = zentaoClient.getBuilds(getProjectId(projectId));\n        }\n        List<ZentaoBuild> res = new ArrayList<>();\n        builds.forEach((k, v) -> {\n            if (StringUtils.isNotBlank(k)) {\n                res.add(new ZentaoBuild(k, v.toString()));\n            }\n        });\n        return res;\n    }\n\n    private String uploadFile(FileSystemResource resource) {\n        String id = \"\";\n        String session = zentaoClient.login();\n        HttpHeaders httpHeaders = new HttpHeaders();\n        MultiValueMap<String, Object> paramMap = new LinkedMultiValueMap<>();\n        paramMap.add(\"files\", resource);\n        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(paramMap, httpHeaders);\n        RestTemplate restTemplate = new RestTemplate();\n        try {\n            String fileUpload = zentaoClient.requestUrl.getFileUpload();\n            ResponseEntity<String> responseEntity = restTemplate.exchange(fileUpload, HttpMethod.POST, requestEntity,\n                    String.class, null, session);\n            String body = responseEntity.getBody();\n            Map obj = JSON.parseMap(body);\n            Map data = (Map) JSON.parseObject(obj.get(\"data\").toString());\n            Set<String> set = data.keySet();\n            if (!set.isEmpty()) {\n                id = (String) set.toArray()[0];\n            }\n        } catch (Exception e) {\n            LogUtil.error(e, e.getMessage());\n        }\n        LogUtil.info(\"upload file id: \" + id);\n        return id;\n    }\n\n    private String ms2ZentaoDescription(String msDescription) {\n        String imgUrlRegex = \"!\\\\[.*?]\\\\(/resource/md/get(.*?\\\\..*?)\\\\)\";\n        String zentaoSteps = msDescription.replaceAll(imgUrlRegex, zentaoClient.requestUrl.getReplaceImgUrl());\n        Matcher matcher = zentaoClient.requestUrl.getImgPattern().matcher(zentaoSteps);\n        while (matcher.find()) {\n            // get file name\n            String originSubUrl = matcher.group(1);\n            if (originSubUrl.contains(\"/url?url=\") || originSubUrl.contains(\"/path?\")) {\n                String path = URLDecoder.decode(originSubUrl, StandardCharsets.UTF_8);\n                String fileName;\n                if (path.indexOf(\"fileID\") > 0) {\n                    fileName = path.substring(path.indexOf(\"fileID\") + 7);\n                } else {\n                    fileName = path.substring(path.indexOf(\"file-read-\") + 10);\n                }\n                zentaoSteps = zentaoSteps.replaceAll(Pattern.quote(originSubUrl), fileName);\n            } else {\n                String fileName = originSubUrl.substring(10);\n                // get file\n                ResponseEntity<FileSystemResource> mdImage = resourceService.getMdImage(fileName);\n                // upload zentao\n                String id = uploadFile(mdImage.getBody());\n                // todo delete local file\n                int index = fileName.lastIndexOf(\".\");\n                String suffix = \"\";\n                if (index != -1) {\n                    suffix = fileName.substring(index);\n                }\n                // replace id\n                zentaoSteps = zentaoSteps.replaceAll(Pattern.quote(originSubUrl), id + suffix);\n            }\n        }\n        // image link\n        String netImgRegex = \"!\\\\[(.*?)]\\\\((http.*?)\\\\)\";\n        return zentaoSteps.replaceAll(netImgRegex, \"<img src=\\\"$2\\\" alt=\\\"$1\\\"/>\");\n    }\n\n    private String zentao2MsDescription(String ztDescription) {\n        String imgRegex = \"<img src.*?/>\";\n        Pattern pattern = Pattern.compile(imgRegex);\n        Matcher matcher = pattern.matcher(ztDescription);\n        while (matcher.find()) {\n            if (StringUtils.isNotEmpty(matcher.group())) {\n                // img\u6807\u7b7e\u5185\u5bb9\n                String imgPath = matcher.group();\n                // \u89e3\u6790\u6807\u7b7e\u5185\u5bb9\u4e3a\u56fe\u7247\u8d85\u94fe\u63a5\u683c\u5f0f\uff0c\u8fdb\u884c\u66ff\u6362\uff0c\n                String src = getMatcherResultForImg(\"src\\\\s*=\\\\s*\\\"?(.*?)(\\\"|>|\\\\s+)\", imgPath);\n                String alt = getMatcherResultForImg(\"alt\\\\s*=\\\\s*\\\"?(.*?)(\\\"|>|\\\\s+)\", imgPath);\n                String hyperLinkPath = packageDescriptionByPathAndName(src, alt);\n                imgPath = transferSpecialCharacter(imgPath);\n                ztDescription = ztDescription.replaceAll(imgPath, hyperLinkPath);\n            }\n        }\n\n        return ztDescription;\n    }\n\n    private String packageDescriptionByPathAndName(String path, String name) {\n        String result = \"\";\n\n        if (StringUtils.isNotEmpty(path)) {\n            if (!path.startsWith(\"http\")) {\n                if (path.startsWith(\"{\") && path.endsWith(\"}\")) {\n                    String srcContent = path.substring(1, path.length() - 1);\n                    if (StringUtils.isEmpty(name)) {\n                        name = srcContent;\n                    }\n\n                    if (Arrays.stream(imgArray).anyMatch(imgType -> StringUtils.equals(imgType, srcContent.substring(srcContent.indexOf('.') + 1)))) {\n                        if (zentaoClient instanceof ZentaoGetClient) {\n                            path = zentaoClient.getBaseUrl() + \"/index.php?m=file&f=read&fileID=\" + srcContent;\n                        } else {\n                            // \u7985\u9053\u5f00\u6e90\u7248\n                            path = zentaoClient.getBaseUrl() + \"/file-read-\" + srcContent;\n                        }\n                    } else {\n                        return result;\n                    }\n                } else {\n                    name = name.replaceAll(\"&amp;\", \"&\");\n                    path = path.replaceAll(\"&amp;\", \"&\");\n                }\n                StringBuilder stringBuilder = new StringBuilder();\n                for (String item : path.split(\"&\")) {\n                    // \u53bb\u6389\u591a\u4f59\u7684\u53c2\u6570\n                    if (!StringUtils.containsAny(item, \"platform\", \"workspaceId\")) {\n                        stringBuilder.append(item);\n                        stringBuilder.append(\"&\");\n                    }\n                }\n                path = getProxyPath(stringBuilder.toString());\n            }\n            // \u56fe\u7247\u4e0e\u63cf\u8ff0\u4fe1\u606f\u4e4b\u95f4\u9700\u6362\u884c\uff0c\u5426\u5219\u65e0\u6cd5\u9884\u89c8\u56fe\u7247\n            result = \"\\n\\n![\" + name + \"](\" + path + \")\";\n        }\n\n        return result;\n    }\n\n    private String getMatcherResultForImg(String regex, String targetStr) {\n        String result = \"\";\n\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(targetStr);\n        while (matcher.find()) {\n            result = matcher.group(1);\n        }\n\n        return result;\n    }\n\n    @Override\n    public Boolean checkProjectExist(String relateId) {\n        return zentaoClient.checkProjectExist(relateId);\n    }\n\n    @Override\n    public void syncIssuesAttachment(IssuesUpdateRequest issuesRequest, File file, AttachmentSyncType syncType) {\n        if (\"upload\".equals(syncType.syncOperateType())) {\n            zentaoClient.uploadAttachment(\"bug\", issuesRequest.getPlatformId(), file);\n        } else if (\"delete\".equals(syncType.syncOperateType())) {\n            Map bugInfo = zentaoClient.getBugById(issuesRequest.getPlatformId());\n            Map<String, Object> zenFiles = (Map) bugInfo.get(\"files\");\n            for (String fileId : zenFiles.keySet()) {\n                Map fileInfo = (Map) zenFiles.get(fileId);\n                if (file.getName().equals(fileInfo.get(\"title\"))) {\n                    zentaoClient.deleteAttachment(fileId);\n                    break;\n                }\n            }\n        }\n    }\n\n    public void syncZentaoIssueAttachments(IssuesWithBLOBs issue) {\n        List<String> znetaoAttachmentsName = new ArrayList<String>();\n        AttachmentRequest request = new AttachmentRequest();\n        request.setBelongType(AttachmentType.ISSUE.type());\n        request.setBelongId(issue.getId());\n        List<FileAttachmentMetadata> allMsAttachments = attachmentService.listMetadata(request);\n        List<String> msAttachmentsName = allMsAttachments.stream().map(FileAttachmentMetadata::getName).collect(Collectors.toList());\n        Map bugInfo = zentaoClient.getBugById(issue.getPlatformId());\n        Object files = bugInfo.get(\"files\");\n        Map<String, Object> zenFiles;\n        if (files instanceof List && ((List) files).size() == 0) {\n            zenFiles = null;\n        } else {\n            zenFiles = (Map) files;\n        }\n        // \u540c\u6b65\u7985\u9053\u4e2d\u65b0\u7684\u9644\u4ef6\n        if (zenFiles != null) {\n            for (String fileId : zenFiles.keySet()) {\n                Map fileInfo = (Map) zenFiles.get(fileId);\n                String filename = fileInfo.get(\"title\").toString();\n                znetaoAttachmentsName.add(filename);\n                if (!msAttachmentsName.contains(filename)) {\n                    try {\n                        byte[] bytes = zentaoClient.getAttachmentBytes(fileId);\n                        FileAttachmentMetadata fileAttachmentMetadata = attachmentService.saveAttachmentByBytes(bytes, AttachmentType.ISSUE.type(), issue.getId(), filename);\n                        AttachmentModuleRelation attachmentModuleRelation = new AttachmentModuleRelation();\n                        attachmentModuleRelation.setAttachmentId(fileAttachmentMetadata.getId());\n                        attachmentModuleRelation.setRelationId(issue.getId());\n                        attachmentModuleRelation.setRelationType(AttachmentType.ISSUE.type());\n                        attachmentModuleRelationMapper.insert(attachmentModuleRelation);\n                    } catch (Exception e) {\n                        LogUtil.error(e);\n                    }\n                }\n            }\n        }\n\n        // \u5220\u9664\u7985\u9053\u4e2d\u4e0d\u5b58\u5728\u7684\u9644\u4ef6\n        if (CollectionUtils.isNotEmpty(allMsAttachments)) {\n            List<FileAttachmentMetadata> deleteMsAttachments = allMsAttachments.stream()\n                    .filter(msAttachment -> !znetaoAttachmentsName.contains(msAttachment.getName())).collect(Collectors.toList());\n            deleteMsAttachments.forEach(fileAttachmentMetadata -> {\n                List<String> ids = List.of(fileAttachmentMetadata.getId());\n                AttachmentModuleRelationExample example = new AttachmentModuleRelationExample();\n                example.createCriteria().andAttachmentIdIn(ids).andRelationTypeEqualTo(AttachmentType.ISSUE.type());\n                // \u5220\u9664MS\u9644\u4ef6\u53ca\u5173\u8054\u6570\u636e\n                attachmentService.deleteAttachmentByIds(ids);\n                attachmentService.deleteFileAttachmentByIds(ids);\n                attachmentModuleRelationMapper.deleteByExample(example);\n            });\n        }\n    }\n\n\n    @Override\n    public List<PlatformStatusDTO> getTransitions(String issueKey) {\n        List<PlatformStatusDTO> platformStatusDTOS = new ArrayList<>();\n        for (ZentaoIssuePlatformStatus status : ZentaoIssuePlatformStatus.values()) {\n            PlatformStatusDTO platformStatusDTO = new PlatformStatusDTO();\n            platformStatusDTO.setValue(status.name());\n            platformStatusDTO.setLabel(status.getName());\n\n            platformStatusDTOS.add(platformStatusDTO);\n        }\n        return platformStatusDTOS;\n    }\n\n    @Override\n    public ResponseEntity proxyForGet(String path, Class responseEntityClazz) {\n        return zentaoClient.proxyForGet(path, responseEntityClazz);\n    }\n}\n", "package io.metersphere.service.wapper;\n\nimport io.metersphere.commons.constants.IssuesManagePlatform;\nimport io.metersphere.service.PlatformPluginService;\nimport io.metersphere.service.issue.platform.IssueFactory;\nimport io.metersphere.xpack.track.dto.request.IssuesRequest;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.client.RestTemplate;\n\nimport javax.annotation.Resource;\n\n@Service\n@Transactional(rollbackFor = Exception.class)\npublic class IssueProxyResourceService {\n\n    @Resource\n    private RestTemplate restTemplate;\n    @Resource\n    private PlatformPluginService platformPluginService;\n\n    /**\n     * http \u4ee3\u7406\n     * \u5982\u679c\u5f53\u524d\u8bbf\u95ee\u5730\u5740\u662f https\uff0c\u76f4\u63a5\u8bbf\u95ee http \u7684\u56fe\u7247\u8d44\u6e90\n     * \u7531\u4e8e\u6d4f\u89c8\u5668\u7684\u5b89\u5168\u673a\u5236\uff0chttp \u4f1a\u88ab\u8f6c\u6210 https\n     * @param path\n     * @param platform\n     * @return\n     */\n    public ResponseEntity<byte[]> getMdImageByPath(String path, String platform, String workspaceId) {\n        if (StringUtils.equals(IssuesManagePlatform.Zentao.name(), platform)) {\n            IssuesRequest issuesRequest = new IssuesRequest();\n            issuesRequest.setWorkspaceId(workspaceId);\n            return IssueFactory.createPlatform(platform, issuesRequest)\n                    .proxyForGet(path, byte[].class);\n\n        } else {\n            return platformPluginService.getPlatform(platform, workspaceId)\n                    .proxyForGet(path, byte[].class);\n        }\n    }\n}\n"], "filenames": ["framework/gateway/src/main/java/io/metersphere/gateway/filter/SessionFilter.java", "framework/sdk-parent/xpack-interface/src/main/java/io/metersphere/xpack/track/issue/IssuesPlatform.java", "pom.xml", "test-track/backend/src/main/java/io/metersphere/controller/IssueProxyResourceController.java", "test-track/backend/src/main/java/io/metersphere/service/IssuesService.java", "test-track/backend/src/main/java/io/metersphere/service/PlatformPluginService.java", "test-track/backend/src/main/java/io/metersphere/service/issue/client/ZentaoClient.java", "test-track/backend/src/main/java/io/metersphere/service/issue/platform/AbstractIssuePlatform.java", "test-track/backend/src/main/java/io/metersphere/service/issue/platform/ZentaoPlatform.java", "test-track/backend/src/main/java/io/metersphere/service/wapper/IssueProxyResourceService.java"], "buggy_code_start_loc": [24, 109, 26, 18, 62, 90, 7, 9, 495, 3], "buggy_code_end_loc": [25, 113, 27, 22, 821, 90, 246, 337, 684, 42], "fixing_code_start_loc": [24, 109, 26, 18, 61, 91, 6, 8, 495, 3], "fixing_code_end_loc": [25, 113, 27, 23, 788, 92, 263, 343, 692, 42], "type": "CWE-918", "message": "MeterSphere is a one-stop open source continuous testing platform, covering test management, interface testing, UI testing and performance testing. Versions prior to 2.5.0 are subject to a Server-Side Request Forgery that leads to Cross-Site Scripting. A Server-Side request forgery in `IssueProxyResourceService::getMdImageByUrl` allows an attacker to access internal resources, as well as executing JavaScript code in the context of Metersphere's origin by a victim of a reflected XSS. This vulnerability has been fixed in v2.5.0. There are no known workarounds.", "other": {"cve": {"id": "CVE-2022-23544", "sourceIdentifier": "security-advisories@github.com", "published": "2022-12-28T00:15:13.567", "lastModified": "2023-01-05T04:52:16.033", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MeterSphere is a one-stop open source continuous testing platform, covering test management, interface testing, UI testing and performance testing. Versions prior to 2.5.0 are subject to a Server-Side Request Forgery that leads to Cross-Site Scripting. A Server-Side request forgery in `IssueProxyResourceService::getMdImageByUrl` allows an attacker to access internal resources, as well as executing JavaScript code in the context of Metersphere's origin by a victim of a reflected XSS. This vulnerability has been fixed in v2.5.0. There are no known workarounds."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}, {"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:metersphere:metersphere:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.5.0", "matchCriteriaId": "218B4FEB-FDBE-46DB-A728-3CB89E37D5BA"}]}]}], "references": [{"url": "https://github.com/metersphere/metersphere/commit/d0f95b50737c941b29d507a4cc3545f2dc6ab121", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/metersphere/metersphere/security/advisories/GHSA-vrv6-cg45-rmjj", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/metersphere/metersphere/commit/d0f95b50737c941b29d507a4cc3545f2dc6ab121"}}