{"buggy_code": ["<?php\n\nuse Engelsystem\\ShiftsFilter;\nuse Engelsystem\\ShiftsFilterRenderer;\n\n/**\n * Text for Angeltype related links.\n *\n * @return string\n */\nfunction angeltypes_title()\n{\n    return __('Angeltypes');\n}\n\n/**\n * Route angeltype actions.\n *\n * @return array\n */\nfunction angeltypes_controller()\n{\n    $action = strip_request_item('action', 'list');\n\n    switch ($action) {\n        case 'view':\n            return angeltype_controller();\n        case 'edit':\n            return angeltype_edit_controller();\n        case 'delete':\n            return angeltype_delete_controller();\n        case 'about':\n            return angeltypes_about_controller();\n        case 'list':\n        default:\n            return angeltypes_list_controller();\n    }\n}\n\n/**\n * Path to angeltype view.\n *\n * @param int   $angeltype_id AngelType id\n * @param array $params       additional params\n * @return string\n */\nfunction angeltype_link($angeltype_id, $params = [])\n{\n    $params = array_merge(['action' => 'view', 'angeltype_id' => $angeltype_id], $params);\n    return page_link_to('angeltypes', $params);\n}\n\n/**\n * Job description for all angeltypes (public to everyone)\n *\n * @return array\n */\nfunction angeltypes_about_controller()\n{\n    $user = auth()->user();\n\n    if ($user) {\n        $angeltypes = AngelTypes_with_user($user->id);\n    } else {\n        $angeltypes = AngelTypes();\n    }\n\n    return [\n        __('Teams/Job description'),\n        AngelTypes_about_view($angeltypes, (bool)$user)\n    ];\n}\n\n/**\n * Delete an Angeltype.\n *\n * @return array\n */\nfunction angeltype_delete_controller()\n{\n    global $privileges;\n\n    if (!in_array('admin_angel_types', $privileges)) {\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = load_angeltype();\n\n    if (request()->has('confirmed')) {\n        AngelType_delete($angeltype);\n        success(sprintf(__('Angeltype %s deleted.'), AngelType_name_render($angeltype)));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    return [\n        sprintf(__('Delete angeltype %s'), $angeltype['name']),\n        AngelType_delete_view($angeltype)\n    ];\n}\n\n/**\n * Change an Angeltype.\n *\n * @return array\n */\nfunction angeltype_edit_controller()\n{\n    global $privileges;\n\n    // In supporter mode only allow to modify description\n    $supporter_mode = !in_array('admin_angel_types', $privileges);\n    $request = request();\n\n    if ($request->has('angeltype_id')) {\n        // Edit existing angeltype\n        $angeltype = load_angeltype();\n\n        if (!User_is_AngelType_supporter(auth()->user(), $angeltype)) {\n            redirect(page_link_to('angeltypes'));\n        }\n    } else {\n        // New angeltype\n        if ($supporter_mode) {\n            // Supporters aren't allowed to create new angeltypes.\n            redirect(page_link_to('angeltypes'));\n        }\n        $angeltype = AngelType_new();\n    }\n\n    if ($request->has('submit')) {\n        $valid = true;\n\n        if (!$supporter_mode) {\n            if ($request->has('name')) {\n                $result = AngelType_validate_name($request->postData('name'), $angeltype);\n                $angeltype['name'] = $result->getValue();\n                if (!$result->isValid()) {\n                    $valid = false;\n                    error(__('Please check the name. Maybe it already exists.'));\n                }\n            }\n\n            $angeltype['restricted'] = $request->has('restricted');\n            $angeltype['no_self_signup'] = $request->has('no_self_signup');\n            $angeltype['show_on_dashboard'] = $request->has('show_on_dashboard');\n\n            $angeltype['requires_driver_license'] = $request->has('requires_driver_license');\n        }\n\n        $angeltype['description'] = strip_request_item_nl('description', $angeltype['description']);\n\n        $angeltype['contact_name'] = strip_request_item('contact_name', $angeltype['contact_name']);\n        $angeltype['contact_dect'] = strip_request_item('contact_dect', $angeltype['contact_dect']);\n        $angeltype['contact_email'] = strip_request_item('contact_email', $angeltype['contact_email']);\n\n        if ($valid) {\n            if (!empty($angeltype['id'])) {\n                AngelType_update($angeltype);\n            } else {\n                $angeltype = AngelType_create($angeltype);\n            }\n\n            success('Angel type saved.');\n            redirect(angeltype_link($angeltype['id']));\n        }\n    }\n\n    return [\n        sprintf(__('Edit %s'), $angeltype['name']),\n        AngelType_edit_view($angeltype, $supporter_mode)\n    ];\n}\n\n/**\n * View details of a given angeltype.\n *\n * @return array\n */\nfunction angeltype_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n\n    if (!in_array('angeltypes', $privileges)) {\n        redirect(page_link_to('/'));\n    }\n\n    $angeltype = load_angeltype();\n    $user_angeltype = UserAngelType_by_User_and_AngelType($user->id, $angeltype);\n    $user_driver_license = UserDriverLicense($user->id);\n    $members = Users_by_angeltype($angeltype);\n\n    $days = angeltype_controller_shiftsFilterDays($angeltype);\n    $shiftsFilter = angeltype_controller_shiftsFilter($angeltype, $days);\n\n    $shiftsFilterRenderer = new ShiftsFilterRenderer($shiftsFilter);\n    $shiftsFilterRenderer->enableDaySelection($days);\n\n    $shiftCalendarRenderer = shiftCalendarRendererByShiftFilter($shiftsFilter);\n    $request = request();\n    $tab = 0;\n\n    if ($request->has('shifts_filter_day')) {\n        $tab = 1;\n    }\n\n    return [\n        sprintf(__('Team %s'), $angeltype['name']),\n        AngelType_view(\n            $angeltype,\n            $members,\n            $user_angeltype,\n            in_array('admin_user_angeltypes', $privileges) || $user_angeltype['supporter'],\n            in_array('admin_angel_types', $privileges),\n            $user_angeltype['supporter'],\n            $user_driver_license,\n            $user,\n            $shiftsFilterRenderer,\n            $shiftCalendarRenderer,\n            $tab\n        )\n    ];\n}\n\n/**\n * On which days do shifts for this angeltype occur? Needed for shiftCalendar.\n *\n * @param array $angeltype\n * @return array\n */\nfunction angeltype_controller_shiftsFilterDays($angeltype)\n{\n    $all_shifts = Shifts_by_angeltype($angeltype);\n    $days = [];\n    foreach ($all_shifts as $shift) {\n        $day = date('Y-m-d', $shift['start']);\n        if (!in_array($day, $days)) {\n            $days[] = $day;\n        }\n    }\n    return $days;\n}\n\n/**\n * Sets up the shift filter for the angeltype.\n *\n * @param array $angeltype\n * @param array $days\n * @return ShiftsFilter\n */\nfunction angeltype_controller_shiftsFilter($angeltype, $days)\n{\n    global $privileges;\n\n    $request = request();\n    $shiftsFilter = new ShiftsFilter(\n        in_array('user_shifts_admin', $privileges),\n        Room_ids(),\n        [$angeltype['id']]\n    );\n    $selected_day = date('Y-m-d');\n    if (!empty($days)) {\n        $selected_day = $days[0];\n    }\n    if ($request->has('shifts_filter_day')) {\n        $selected_day = $request->input('shifts_filter_day');\n    }\n    $shiftsFilter->setStartTime(parse_date('Y-m-d H:i', $selected_day . ' 00:00'));\n    $shiftsFilter->setEndTime(parse_date('Y-m-d H:i', $selected_day . ' 23:59'));\n\n    return $shiftsFilter;\n}\n\n/**\n * View a list of all angeltypes.\n *\n * @return array\n */\nfunction angeltypes_list_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n\n    if (!in_array('angeltypes', $privileges)) {\n        redirect(page_link_to('/'));\n    }\n\n    $angeltypes = AngelTypes_with_user($user->id);\n\n    foreach ($angeltypes as &$angeltype) {\n        $actions = [\n            button(\n                page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]),\n                __('view'),\n                'btn-xs'\n            )\n        ];\n\n        if (in_array('admin_angel_types', $privileges)) {\n            $actions[] = button(\n                page_link_to('angeltypes', ['action' => 'edit', 'angeltype_id' => $angeltype['id']]),\n                __('edit'),\n                'btn-xs'\n            );\n            $actions[] = button(\n                page_link_to('angeltypes', ['action' => 'delete', 'angeltype_id' => $angeltype['id']]),\n                __('delete'),\n                'btn-xs'\n            );\n        }\n\n        $angeltype['membership'] = AngelType_render_membership($angeltype);\n        if (!empty($angeltype['user_angeltype_id'])) {\n            $actions[] = button(\n                page_link_to('user_angeltypes',\n                    ['action' => 'delete', 'user_angeltype_id' => $angeltype['user_angeltype_id']]\n                ),\n                __('leave'),\n                'btn-xs'\n            );\n        } else {\n            $actions[] = button(\n                page_link_to('user_angeltypes', ['action' => 'add', 'angeltype_id' => $angeltype['id']]),\n                __('join'),\n                'btn-xs'\n            );\n        }\n\n        $angeltype['restricted'] = $angeltype['restricted'] ? glyph('lock') : '';\n        $angeltype['no_self_signup'] = $angeltype['no_self_signup'] ? '' : glyph('share');\n\n        $angeltype['name'] = '<a href=\"'\n            . page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']])\n            . '\">'\n            . $angeltype['name']\n            . '</a>';\n\n        $angeltype['actions'] = table_buttons($actions);\n    }\n\n    return [\n        angeltypes_title(),\n        AngelTypes_list_view($angeltypes, in_array('admin_angel_types', $privileges))\n    ];\n}\n\n/**\n * Loads an angeltype from given angeltype_id request param.\n *\n * @return array\n */\nfunction load_angeltype()\n{\n    $request = request();\n    if (!$request->has('angeltype_id')) {\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType($request->input('angeltype_id'));\n    if (empty($angeltype)) {\n        error(__('Angeltype doesn\\'t exist . '));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    return $angeltype;\n}\n", "<?php\n\nuse Carbon\\Carbon;\nuse Engelsystem\\Models\\EventConfig;\n\n/**\n * @return string\n */\nfunction event_config_title()\n{\n    return __('Event config');\n}\n\n/**\n * @return array\n */\nfunction event_config_edit_controller()\n{\n    global $privileges;\n\n    if (!in_array('admin_event_config', $privileges)) {\n        redirect(page_link_to('/'));\n    }\n\n    $request = request();\n    $config = config();\n    $event_name = $config->get('name');\n    $event_welcome_msg = $config->get('welcome_msg');\n    /** @var Carbon $buildup_start_date */\n    $buildup_start_date = $config->get('buildup_start');\n    /** @var Carbon $event_start_date */\n    $event_start_date = $config->get('event_start');\n    /** @var Carbon $event_end_date */\n    $event_end_date = $config->get('event_end');\n    /** @var Carbon $teardown_end_date */\n    $teardown_end_date = $config->get('teardown_end');\n\n    if ($request->has('submit')) {\n        $valid = true;\n\n        if ($request->has('event_name')) {\n            $event_name = strip_request_item('event_name');\n        }\n        if ($event_name == '') {\n            $event_name = null;\n        }\n\n        if ($request->has('event_welcome_msg')) {\n            $event_welcome_msg = strip_request_item_nl('event_welcome_msg');\n        }\n        if ($event_welcome_msg == '') {\n            $event_welcome_msg = null;\n        }\n\n        $result = check_request_date('buildup_start_date', __('Please enter buildup start date.'), true);\n        $buildup_start_date = $result->getValue();\n        $valid &= $result->isValid();\n\n        $result = check_request_date('event_start_date', __('Please enter event start date.'), true);\n        $event_start_date = $result->getValue();\n        $valid &= $result->isValid();\n\n        $result = check_request_date('event_end_date', __('Please enter event end date.'), true);\n        $event_end_date = $result->getValue();\n        $valid &= $result->isValid();\n\n        $result = check_request_date('teardown_end_date', __('Please enter teardown end date.'), true);\n        $teardown_end_date = $result->getValue();\n        $valid &= $result->isValid();\n\n        if (!is_null($buildup_start_date) && !is_null($event_start_date) && $buildup_start_date > $event_start_date) {\n            $valid = false;\n            error(__('The buildup start date has to be before the event start date.'));\n        }\n\n        if (!is_null($event_start_date) && !is_null($event_end_date) && $event_start_date > $event_end_date) {\n            $valid = false;\n            error(__('The event start date has to be before the event end date.'));\n        }\n\n        if (!is_null($event_end_date) && !is_null($teardown_end_date) && $event_end_date > $teardown_end_date) {\n            $valid = false;\n            error(__('The event end date has to be before the teardown end date.'));\n        }\n\n        if (!is_null($buildup_start_date) && !is_null($teardown_end_date) && $buildup_start_date > $teardown_end_date) {\n            $valid = false;\n            error(__('The buildup start date has to be before the teardown end date.'));\n        }\n\n        if ($valid) {\n            $eventConfig = new EventConfig();\n\n            foreach (\n                [\n                    'name'          => $event_name,\n                    'welcome_msg'   => $event_welcome_msg,\n                    'buildup_start' => $buildup_start_date,\n                    'event_start'   => $event_start_date,\n                    'event_end'     => $event_end_date,\n                    'teardown_end'  => $teardown_end_date,\n                ] as $key => $value\n            ) {\n                $eventConfig\n                    ->findOrNew($key)\n                    ->setAttribute('name', $key)\n                    ->setAttribute('value', $value)\n                    ->save();\n            }\n\n            engelsystem_log(\n                sprintf(\n                    'Changed event config: %s, %s, %s, %s, %s, %s',\n                    $event_name,\n                    $event_welcome_msg,\n                    $buildup_start_date ? $buildup_start_date->format('Y-m-d') : '',\n                    $event_start_date ? $event_start_date->format('Y-m-d') : '',\n                    $event_end_date ? $event_end_date->format('Y-m-d') : '',\n                    $teardown_end_date ? $teardown_end_date->format('Y-m-d') : ''\n                )\n            );\n            success(__('Settings saved.'));\n            redirect(page_link_to('admin_event_config'));\n        }\n    }\n\n    return [\n        event_config_title(),\n        EventConfig_edit_view(\n            $event_name,\n            $event_welcome_msg,\n            $buildup_start_date,\n            $event_start_date,\n            $event_end_date,\n            $teardown_end_date\n        )\n    ];\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\ShiftSignupState;\n\n/**\n * Route shift entry actions.\n *\n * @return array\n */\nfunction shift_entries_controller()\n{\n    $user = auth()->user();\n    if (!$user) {\n        redirect(page_link_to('login'));\n    }\n\n    $action = strip_request_item('action');\n    if (empty($action)) {\n        redirect(user_link($user->id));\n    }\n\n    switch ($action) {\n        case 'create':\n            return shift_entry_create_controller();\n        case 'delete':\n            return shift_entry_delete_controller();\n    }\n}\n\n/**\n * Sign up for a shift.\n *\n * @return array\n */\nfunction shift_entry_create_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    if (User_is_freeloader($user)) {\n        redirect(page_link_to('user_myshifts'));\n    }\n\n    $shift = Shift($request->input('shift_id'));\n    if (empty($shift)) {\n        redirect(user_link($user->id));\n    }\n\n    $angeltype = AngelType($request->input('angeltype_id'));\n\n    if (in_array('user_shifts_admin', $privileges)) {\n        return shift_entry_create_controller_admin($shift, $angeltype);\n    }\n\n    if (empty($angeltype)) {\n        redirect(user_link($user->id));\n    }\n\n    if (User_is_AngelType_supporter($user, $angeltype)) {\n        return shift_entry_create_controller_supporter($shift, $angeltype);\n    }\n\n    return shift_entry_create_controller_user($shift, $angeltype);\n}\n\n/**\n * Sign up for a shift.\n * Case: Admin\n *\n * @param array $shift\n * @param array $angeltype\n * @return array\n */\nfunction shift_entry_create_controller_admin($shift, $angeltype)\n{\n    $signup_user = auth()->user();\n    $request = request();\n\n    if ($request->has('user_id')) {\n        $signup_user = User::find($request->input('user_id'));\n    }\n    if (!$signup_user) {\n        redirect(shift_link($shift));\n    }\n\n    $angeltypes = AngelTypes();\n    if ($request->has('angeltype_id')) {\n        $angeltype = AngelType($request->input('angeltype_id'));\n    }\n    if (empty($angeltype)) {\n        if (count($angeltypes) == 0) {\n            redirect(shift_link($shift));\n        }\n        $angeltype = $angeltypes[0];\n    }\n\n    if ($request->has('submit')) {\n        ShiftEntry_create([\n            'SID'              => $shift['SID'],\n            'TID'              => $angeltype['id'],\n            'UID'              => $signup_user->id,\n            'Comment'          => '',\n            'freeloaded'       => false,\n            'freeload_comment' => ''\n        ]);\n\n        success(sprintf(__('%s has been subscribed to the shift.'), User_Nick_render($signup_user)));\n        redirect(shift_link($shift));\n    }\n\n    $users = User::all();\n    $users_select = [];\n    foreach ($users as $user) {\n        $users_select[$user->id] = $user->name;\n    }\n\n    $angeltypes_select = [];\n    foreach ($angeltypes as $a) {\n        $angeltypes_select[$a['id']] = $a['name'];\n    }\n\n    $room = Room($shift['RID']);\n    return [\n        ShiftEntry_create_title(),\n        ShiftEntry_create_view_admin($shift, $room, $angeltype, $angeltypes_select, $signup_user, $users_select)\n    ];\n}\n\n/**\n * Sign up for a shift.\n * Case: Supporter\n *\n * @param array $shift\n * @param array $angeltype\n * @return array\n */\nfunction shift_entry_create_controller_supporter($shift, $angeltype)\n{\n    $request = request();\n    $signup_user = auth()->user();\n\n    if ($request->has('user_id')) {\n        $signup_user = User::find($request->input('user_id'));\n    }\n    if (!UserAngelType_exists($signup_user->id, $angeltype)) {\n        error(__('User is not in angeltype.'));\n        redirect(shift_link($shift));\n    }\n\n    $needed_angeltype = NeededAngeltype_by_Shift_and_Angeltype($shift, $angeltype);\n    $shift_entries = ShiftEntries_by_shift_and_angeltype($shift['SID'], $angeltype['id']);\n    $shift_signup_state = Shift_signup_allowed(\n        $signup_user,\n        $shift,\n        $angeltype,\n        null,\n        null,\n        $needed_angeltype,\n        $shift_entries\n    );\n    if (!$shift_signup_state->isSignupAllowed()) {\n        if ($shift_signup_state->getState() == ShiftSignupState::OCCUPIED) {\n            error(__('This shift is already occupied.'));\n        }\n        redirect(shift_link($shift));\n    }\n\n    if ($request->has('submit')) {\n        ShiftEntry_create([\n            'SID'              => $shift['SID'],\n            'TID'              => $angeltype['id'],\n            'UID'              => $signup_user->id,\n            'Comment'          => '',\n            'freeloaded'       => false,\n            'freeload_comment' => ''\n        ]);\n\n        success(sprintf(__('%s has been subscribed to the shift.'), User_Nick_render($signup_user)));\n        redirect(shift_link($shift));\n    }\n\n    $users = Users_by_angeltype($angeltype);\n    $users_select = [];\n    foreach ($users as $u) {\n        $users_select[$u->id] = $u->name;\n    }\n\n    $room = Room($shift['RID']);\n    return [\n        ShiftEntry_create_title(),\n        ShiftEntry_create_view_supporter($shift, $room, $angeltype, $signup_user, $users_select)\n    ];\n}\n\n/**\n * Generates an error message for the given shift signup state.\n *\n * @param ShiftSignupState $shift_signup_state\n */\nfunction shift_entry_error_message(ShiftSignupState $shift_signup_state)\n{\n    if ($shift_signup_state->getState() == ShiftSignupState::ANGELTYPE) {\n        error(__('You need be accepted member of the angeltype.'));\n    } elseif ($shift_signup_state->getState() == ShiftSignupState::COLLIDES) {\n        error(__('This shift collides with one of your shifts.'));\n    } elseif ($shift_signup_state->getState() == ShiftSignupState::OCCUPIED) {\n        error(__('This shift is already occupied.'));\n    } elseif ($shift_signup_state->getState() == ShiftSignupState::SHIFT_ENDED) {\n        error(__('This shift ended already.'));\n    } elseif ($shift_signup_state->getState() == ShiftSignupState::NOT_ARRIVED) {\n        error(__('You are not marked as arrived.'));\n    } elseif ($shift_signup_state->getState() == ShiftSignupState::SIGNED_UP) {\n        error(__('You are signed up for this shift.'));\n    }\n}\n\n/**\n * Sign up for a shift.\n * Case: User\n *\n * @param array $shift\n * @param array $angeltype\n * @return array\n */\nfunction shift_entry_create_controller_user($shift, $angeltype)\n{\n    $request = request();\n\n    $signup_user = auth()->user();\n    $needed_angeltype = NeededAngeltype_by_Shift_and_Angeltype($shift, $angeltype);\n    $shift_entries = ShiftEntries_by_shift_and_angeltype($shift['SID'], $angeltype['id']);\n    $shift_signup_state = Shift_signup_allowed(\n        $signup_user,\n        $shift,\n        $angeltype,\n        null,\n        null,\n        $needed_angeltype,\n        $shift_entries\n    );\n    if (!$shift_signup_state->isSignupAllowed()) {\n        shift_entry_error_message($shift_signup_state);\n        redirect(shift_link($shift));\n    }\n\n    $comment = '';\n    if ($request->has('submit')) {\n        $comment = strip_request_item_nl('comment');\n        ShiftEntry_create([\n            'SID'              => $shift['SID'],\n            'TID'              => $angeltype['id'],\n            'UID'              => $signup_user->id,\n            'Comment'          => $comment,\n            'freeloaded'       => false,\n            'freeload_comment' => ''\n        ]);\n\n        if ($angeltype['restricted'] == false && !UserAngelType_exists($signup_user->id, $angeltype)) {\n            UserAngelType_create($signup_user->id, $angeltype);\n        }\n\n        success(__('You are subscribed. Thank you!'));\n        redirect(shift_link($shift));\n    }\n\n    $room = Room($shift['RID']);\n    return [\n        ShiftEntry_create_title(),\n        ShiftEntry_create_view_user($shift, $room, $angeltype, $comment)\n    ];\n}\n\n/**\n * Link to create a shift entry.\n *\n * @param array $shift\n * @param array $angeltype\n * @param array $params\n * @return string URL\n */\nfunction shift_entry_create_link($shift, $angeltype, $params = [])\n{\n    $params = array_merge([\n        'action'       => 'create',\n        'shift_id'     => $shift['SID'],\n        'angeltype_id' => $angeltype['id']\n    ], $params);\n    return page_link_to('shift_entries', $params);\n}\n\n/**\n * Link to create a shift entry as admin.\n *\n * @param array $shift\n * @param array $params\n * @return string URL\n */\nfunction shift_entry_create_link_admin($shift, $params = [])\n{\n    $params = array_merge([\n        'action'   => 'create',\n        'shift_id' => $shift['SID']\n    ], $params);\n    return page_link_to('shift_entries', $params);\n}\n\n/**\n * Load a shift entry from get parameter shift_entry_id.\n *\n * @return array\n */\nfunction shift_entry_load()\n{\n    $request = request();\n\n    if (!$request->has('shift_entry_id') || !test_request_int('shift_entry_id')) {\n        redirect(page_link_to('user_shifts'));\n    }\n    $shiftEntry = ShiftEntry($request->input('shift_entry_id'));\n    if (empty($shiftEntry)) {\n        error(__('Shift entry not found.'));\n        redirect(page_link_to('user_shifts'));\n    }\n\n    return $shiftEntry;\n}\n\n/**\n * Remove somebody from a shift.\n *\n * @return array\n */\nfunction shift_entry_delete_controller()\n{\n    $user = auth()->user();\n    $request = request();\n    $shiftEntry = shift_entry_load();\n\n    $shift = Shift($shiftEntry['SID']);\n    $angeltype = AngelType($shiftEntry['TID']);\n    $signout_user = User::find($shiftEntry['UID']);\n    if (!Shift_signout_allowed($shift, $angeltype, $signout_user->id)) {\n        error(__('You are not allowed to remove this shift entry. If necessary, ask your supporter or heaven to do so.'));\n        redirect(user_link($signout_user->id));\n    }\n\n    if ($request->has('continue')) {\n        ShiftEntry_delete($shiftEntry);\n        success(__('Shift entry removed.'));\n        redirect(shift_link($shift));\n    }\n\n    if ($user->id == $signout_user->id) {\n        return [\n            ShiftEntry_delete_title(),\n            ShiftEntry_delete_view($shiftEntry, $shift, $angeltype, $signout_user->id)\n        ];\n    }\n\n    return [\n        ShiftEntry_delete_title(),\n        ShiftEntry_delete_view_admin($shiftEntry, $shift, $angeltype, $signout_user)\n    ];\n}\n\n/**\n * Link to delete a shift entry.\n *\n * @param array $shiftEntry\n * @param array $params\n * @return string URL\n */\nfunction shift_entry_delete_link($shiftEntry, $params = [])\n{\n    $params = array_merge([\n        'action'         => 'delete',\n        'shift_entry_id' => $shiftEntry['id']\n    ], $params);\n    return page_link_to('shift_entries', $params);\n}\n", "<?php\n\nuse Engelsystem\\ShiftSignupState;\n\n/**\n * @param array $shift\n * @return string\n */\nfunction shift_link($shift)\n{\n    $parameters = ['action' => 'view'];\n    if (isset($shift['SID'])) {\n        $parameters['shift_id'] = $shift['SID'];\n    }\n\n    $link = page_link_to('shifts', $parameters);\n\n    return $link;\n}\n\n/**\n * @param array $shift\n * @return string\n */\nfunction shift_delete_link($shift)\n{\n    return page_link_to('user_shifts', ['delete_shift' => $shift['SID']]);\n}\n\n/**\n * @param array $shift\n * @return string\n */\nfunction shift_edit_link($shift)\n{\n    return page_link_to('user_shifts', ['edit_shift' => $shift['SID']]);\n}\n\n/**\n * Edit a single shift.\n *\n * @return string\n */\nfunction shift_edit_controller()\n{\n    global $privileges;\n\n    $msg = '';\n    $valid = true;\n    $request = request();\n\n    if (!in_array('admin_shifts', $privileges)) {\n        redirect(page_link_to('user_shifts'));\n    }\n\n    if (!$request->has('edit_shift') || !test_request_int('edit_shift')) {\n        redirect(page_link_to('user_shifts'));\n    }\n    $shift_id = $request->input('edit_shift');\n\n    $shift = Shift($shift_id);\n\n    $room = select_array(Rooms(), 'RID', 'Name');\n    $angeltypes = select_array(AngelTypes(), 'id', 'name');\n    $shifttypes = select_array(ShiftTypes(), 'id', 'name');\n\n    $needed_angel_types = select_array(\n        NeededAngelTypes_by_shift($shift_id),\n        'angel_type_id',\n        'count'\n    );\n    foreach (array_keys($angeltypes) as $angeltype_id) {\n        if (!isset($needed_angel_types[$angeltype_id])) {\n            $needed_angel_types[$angeltype_id] = 0;\n        }\n    }\n\n    $shifttype_id = $shift['shifttype_id'];\n    $title = $shift['title'];\n    $rid = $shift['RID'];\n    $start = $shift['start'];\n    $end = $shift['end'];\n\n    if ($request->has('submit')) {\n        // Name/Bezeichnung der Schicht, darf leer sein\n        $title = strip_request_item('title');\n\n        // Auswahl der sichtbaren Locations f\u00fcr die Schichten\n        if (\n            $request->has('rid')\n            && preg_match('/^\\d+$/', $request->input('rid'))\n            && isset($room[$request->input('rid')])\n        ) {\n            $rid = $request->input('rid');\n        } else {\n            $valid = false;\n            $msg .= error(__('Please select a room.'), true);\n        }\n\n        if ($request->has('shifttype_id') && isset($shifttypes[$request->input('shifttype_id')])) {\n            $shifttype_id = $request->input('shifttype_id');\n        } else {\n            $valid = false;\n            $msg .= error(__('Please select a shifttype.'), true);\n        }\n\n        if ($request->has('start') && $tmp = parse_date('Y-m-d H:i', $request->input('start'))) {\n            $start = $tmp;\n        } else {\n            $valid = false;\n            $msg .= error(__('Please enter a valid starting time for the shifts.'), true);\n        }\n\n        if ($request->has('end') && $tmp = parse_date('Y-m-d H:i', $request->input('end'))) {\n            $end = $tmp;\n        } else {\n            $valid = false;\n            $msg .= error(__('Please enter a valid ending time for the shifts.'), true);\n        }\n\n        if ($start >= $end) {\n            $valid = false;\n            $msg .= error(__('The ending time has to be after the starting time.'), true);\n        }\n\n        foreach ($needed_angel_types as $needed_angeltype_id => $count) {\n            $needed_angel_types[$needed_angeltype_id] = 0;\n\n            $queryKey = 'type_' . $needed_angeltype_id;\n            if ($request->has($queryKey)) {\n                if (test_request_int($queryKey)) {\n                    $needed_angel_types[$needed_angeltype_id] = trim($request->input($queryKey));\n                } else {\n                    $valid = false;\n                    $msg .= error(sprintf(\n                        __('Please check your input for needed angels of type %s.'),\n                        $angeltypes[$needed_angeltype_id]\n                    ), true);\n                }\n            }\n        }\n\n        if ($valid) {\n            $shift['shifttype_id'] = $shifttype_id;\n            $shift['title'] = $title;\n            $shift['RID'] = $rid;\n            $shift['start'] = $start;\n            $shift['end'] = $end;\n\n            Shift_update($shift);\n            NeededAngelTypes_delete_by_shift($shift_id);\n            $needed_angel_types_info = [];\n            foreach ($needed_angel_types as $type_id => $count) {\n                NeededAngelType_add($shift_id, $type_id, null, $count);\n                if ($count > 0) {\n                    $needed_angel_types_info[] = $angeltypes[$type_id] . ': ' . $count;\n                }\n            }\n\n            engelsystem_log(\n                'Updated shift \\'' . $shifttypes[$shifttype_id] . ', ' . $title\n                . '\\' from ' . date('Y-m-d H:i', $start)\n                . ' to ' . date('Y-m-d H:i', $end)\n                . ' with angel types ' . join(', ', $needed_angel_types_info)\n            );\n            success(__('Shift updated.'));\n\n            redirect(shift_link([\n                'SID' => $shift_id\n            ]));\n        }\n    }\n\n    $angel_types_spinner = '';\n    foreach ($angeltypes as $angeltype_id => $angeltype_name) {\n        $angel_types_spinner .= form_spinner('type_' . $angeltype_id, $angeltype_name,\n            $needed_angel_types[$angeltype_id]);\n    }\n\n    return page_with_title(\n        shifts_title(),\n        [\n            msg(),\n            '<noscript>'\n            . info(__('This page is much more comfortable with javascript.'), true)\n            . '</noscript>',\n            form([\n                form_select('shifttype_id', __('Shifttype'), $shifttypes, $shifttype_id),\n                form_text('title', __('Title'), $title),\n                form_select('rid', __('Room:'), $room, $rid),\n                form_text('start', __('Start:'), date('Y-m-d H:i', $start)),\n                form_text('end', __('End:'), date('Y-m-d H:i', $end)),\n                '<h2>' . __('Needed angels') . '</h2>',\n                $angel_types_spinner,\n                form_submit('submit', __('Save'))\n            ])\n        ]\n    );\n}\n\n/**\n * @return string\n */\nfunction shift_delete_controller()\n{\n    global $privileges;\n    $request = request();\n\n    if (!in_array('user_shifts_admin', $privileges)) {\n        redirect(page_link_to('user_shifts'));\n    }\n\n    // Schicht komplett l\u00f6schen (nur f\u00fcr admins/user mit user_shifts_admin privileg)\n    if (!$request->has('delete_shift') || !preg_match('/^\\d+$/', $request->input('delete_shift'))) {\n        redirect(page_link_to('user_shifts'));\n    }\n    $shift_id = $request->input('delete_shift');\n\n    $shift = Shift($shift_id);\n    if (empty($shift)) {\n        redirect(page_link_to('user_shifts'));\n    }\n\n    // Schicht l\u00f6schen best\u00e4tigt\n    if ($request->has('delete')) {\n        Shift_delete($shift_id);\n\n        engelsystem_log(\n            'Deleted shift ' . $shift['name']\n            . ' from ' . date('Y-m-d H:i', $shift['start'])\n            . ' to ' . date('Y-m-d H:i', $shift['end'])\n        );\n        success(__('Shift deleted.'));\n        redirect(page_link_to('user_shifts'));\n    }\n\n    return page_with_title(shifts_title(), [\n        error(sprintf(\n            __('Do you want to delete the shift %s from %s to %s?'),\n            $shift['name'],\n            date('Y-m-d H:i', $shift['start']),\n            date('H:i', $shift['end'])\n        ), true),\n        '<a class=\"button\" href=\"'\n        . page_link_to('user_shifts', ['delete_shift' => $shift_id, 'delete' => 1]) .\n        '\">' . __('delete') . '</a>'\n    ]);\n}\n\n/**\n * @return array\n */\nfunction shift_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    if (!in_array('user_shifts', $privileges)) {\n        redirect(page_link_to('/'));\n    }\n\n    if (!$request->has('shift_id')) {\n        redirect(page_link_to('user_shifts'));\n    }\n\n    $shift = Shift($request->input('shift_id'));\n    if (empty($shift)) {\n        error(__('Shift could not be found.'));\n        redirect(page_link_to('user_shifts'));\n    }\n\n    $shifttype = ShiftType($shift['shifttype_id']);\n    $room = Room($shift['RID']);\n    $angeltypes = AngelTypes();\n    $user_shifts = Shifts_by_user($user->id);\n\n    $shift_signup_state = new ShiftSignupState(ShiftSignupState::OCCUPIED, 0);\n    foreach ($angeltypes as &$angeltype) {\n        $needed_angeltype = NeededAngeltype_by_Shift_and_Angeltype($shift, $angeltype);\n        if (empty($needed_angeltype)) {\n            continue;\n        }\n\n        $shift_entries = ShiftEntries_by_shift_and_angeltype($shift['SID'], $angeltype['id']);\n\n        $angeltype_signup_state = Shift_signup_allowed(\n            $user,\n            $shift,\n            $angeltype,\n            null,\n            $user_shifts,\n            $needed_angeltype,\n            $shift_entries\n        );\n        $shift_signup_state->combineWith($angeltype_signup_state);\n        $angeltype['shift_signup_state'] = $angeltype_signup_state;\n    }\n\n    return [\n        $shift['name'],\n        Shift_view($shift, $shifttype, $room, $angeltypes, $shift_signup_state)\n    ];\n}\n\n/**\n * @return array|false\n */\nfunction shifts_controller()\n{\n    $request = request();\n    if (!$request->has('action')) {\n        redirect(page_link_to('user_shifts'));\n    }\n\n    switch ($request->input('action')) {\n        case 'view':\n            return shift_controller();\n        /** @noinspection PhpMissingBreakStatementInspection */\n        case 'next':\n            shift_next_controller();\n        default:\n            redirect(page_link_to('/'));\n    }\n\n    return false;\n}\n\n/**\n * Redirects the user to his next shift.\n */\nfunction shift_next_controller()\n{\n    global $privileges;\n\n    if (!in_array('user_shifts', $privileges)) {\n        redirect(page_link_to('/'));\n    }\n\n    $upcoming_shifts = ShiftEntries_upcoming_for_user(auth()->user()->id);\n\n    if (!empty($upcoming_shifts)) {\n        redirect(shift_link($upcoming_shifts[0]));\n    }\n\n    redirect(page_link_to('user_shifts'));\n}\n\n/**\n * Export filtered shifts via JSON.\n * (Like iCal Export or shifts view)\n */\nfunction shifts_json_export_controller()\n{\n    $request = request();\n\n    if (!$request->has('key') || !preg_match('/^[\\da-f]{32}$/', $request->input('key'))) {\n        engelsystem_error('Missing key.');\n    }\n\n    $user = auth()->apiUser('key');\n    if (!$user) {\n        engelsystem_error('Key invalid.');\n    }\n    if (!in_array('shifts_json_export', privileges_for_user($user->id))) {\n        engelsystem_error('No privilege for shifts_json_export.');\n    }\n\n    $shifts = load_ical_shifts();\n\n    header('Content-Type: application/json; charset=utf-8');\n    raw_output(json_encode($shifts));\n}\n\n/**\n * Returns users shifts to export.\n *\n * @return array\n */\nfunction load_ical_shifts()\n{\n    return Shifts_by_user(auth()->user()->id);\n}\n", "<?php\n\n/**\n * @param array $shifttype\n * @return string\n */\nfunction shifttype_link($shifttype)\n{\n    return page_link_to('shifttypes', ['action' => 'view', 'shifttype_id' => $shifttype['id']]);\n}\n\n/**\n * Delete a shifttype.\n *\n * @return array\n */\nfunction shifttype_delete_controller()\n{\n    $request = request();\n    if (!$request->has('shifttype_id')) {\n        redirect(page_link_to('shifttypes'));\n    }\n\n    $shifttype = ShiftType($request->input('shifttype_id'));\n    if (empty($shifttype)) {\n        redirect(page_link_to('shifttypes'));\n    }\n\n    if ($request->has('confirmed')) {\n        ShiftType_delete($shifttype['id']);\n\n        engelsystem_log('Deleted shifttype ' . $shifttype['name']);\n        success(sprintf(__('Shifttype %s deleted.'), $shifttype['name']));\n        redirect(page_link_to('shifttypes'));\n    }\n\n    return [\n        sprintf(__('Delete shifttype %s'), $shifttype['name']),\n        ShiftType_delete_view($shifttype)\n    ];\n}\n\n/**\n * Edit or create shift type.\n *\n * @return array\n */\nfunction shifttype_edit_controller()\n{\n    $shifttype_id = null;\n    $name = '';\n    $angeltype_id = null;\n    $description = '';\n\n    $angeltypes = AngelTypes();\n    $request = request();\n\n    if ($request->has('shifttype_id')) {\n        $shifttype = ShiftType($request->input('shifttype_id'));\n        if (empty($shifttype)) {\n            error(__('Shifttype not found.'));\n            redirect(page_link_to('shifttypes'));\n        }\n        $shifttype_id = $shifttype['id'];\n        $name = $shifttype['name'];\n        $angeltype_id = $shifttype['angeltype_id'];\n        $description = $shifttype['description'];\n    }\n\n    if ($request->has('submit')) {\n        $valid = true;\n\n        if ($request->has('name') && $request->input('name') != '') {\n            $name = strip_request_item('name');\n        } else {\n            $valid = false;\n            error(__('Please enter a name.'));\n        }\n\n        if ($request->has('angeltype_id') && preg_match('/^\\d+$/', $request->input('angeltype_id'))) {\n            $angeltype_id = $request->input('angeltype_id');\n        } else {\n            $angeltype_id = null;\n        }\n\n        if ($request->has('description')) {\n            $description = strip_request_item_nl('description');\n        }\n\n        if ($valid) {\n            if ($shifttype_id) {\n                ShiftType_update($shifttype_id, $name, $angeltype_id, $description);\n\n                engelsystem_log('Updated shifttype ' . $name);\n                success(__('Updated shifttype.'));\n            } else {\n                $shifttype_id = ShiftType_create($name, $angeltype_id, $description);\n\n                engelsystem_log('Created shifttype ' . $name);\n                success(__('Created shifttype.'));\n            }\n            redirect(page_link_to('shifttypes', ['action' => 'view', 'shifttype_id' => $shifttype_id]));\n        }\n    }\n\n    return [\n        shifttypes_title(),\n        ShiftType_edit_view($name, $angeltype_id, $angeltypes, $description, $shifttype_id)\n    ];\n}\n\n/**\n * @return array\n */\nfunction shifttype_controller()\n{\n    $request = request();\n    if (!$request->has('shifttype_id')) {\n        redirect(page_link_to('shifttypes'));\n    }\n    $shifttype = ShiftType($request->input('shifttype_id'));\n    if (empty($shifttype)) {\n        redirect(page_link_to('shifttypes'));\n    }\n\n    $angeltype = [];\n    if (!empty($shifttype['angeltype_id'])) {\n        $angeltype = AngelType($shifttype['angeltype_id']);\n    }\n\n    return [\n        $shifttype['name'],\n        ShiftType_view($shifttype, $angeltype)\n    ];\n}\n\n/**\n * List all shift types.\n *\n * @return array\n */\nfunction shifttypes_list_controller()\n{\n    $shifttypes = ShiftTypes();\n\n    return [\n        shifttypes_title(),\n        ShiftTypes_list_view($shifttypes)\n    ];\n}\n\n/**\n * Text for shift type related links.\n *\n * @return string\n */\nfunction shifttypes_title()\n{\n    return __('Shifttypes');\n}\n\n/**\n * Route shift type actions\n *\n * @return array\n */\nfunction shifttypes_controller()\n{\n    $request = request();\n    $action = 'list';\n    if ($request->has('action')) {\n        $action = $request->input('action');\n    }\n\n    switch ($action) {\n        case 'view':\n            return shifttype_controller();\n        case 'edit':\n            return shifttype_edit_controller();\n        case 'delete':\n            return shifttype_delete_controller();\n        case 'list':\n        default:\n            return shifttypes_list_controller();\n    }\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * Display a hint for team/angeltype supporters if there are unconfirmed users for his angeltype.\n *\n * @return string|null\n */\nfunction user_angeltypes_unconfirmed_hint()\n{\n    $unconfirmed_user_angeltypes = User_unconfirmed_AngelTypes(auth()->user()->id);\n    if (count($unconfirmed_user_angeltypes) == 0) {\n        return null;\n    }\n\n    $unconfirmed_links = [];\n    foreach ($unconfirmed_user_angeltypes as $user_angeltype) {\n        $unconfirmed_links[] = '<a href=\"'\n            . page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $user_angeltype['angeltype_id']])\n            . '\">' . $user_angeltype['name']\n            . ' (+' . $user_angeltype['count'] . ')'\n            . '</a>';\n    }\n\n    $count = count($unconfirmed_user_angeltypes);\n    return _e(\n            'There is %d unconfirmed angeltype.',\n            'There are %d unconfirmed angeltypes.',\n            $count,\n            [$count]\n        )\n        . ' ' . __('Angel types which need approvals:')\n        . ' ' . join(', ', $unconfirmed_links);\n}\n\n/**\n * Remove all unconfirmed users from a specific angeltype.\n *\n * @return array\n */\nfunction user_angeltypes_delete_all_controller()\n{\n    $request = request();\n\n    if (!$request->has('angeltype_id')) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType($request->input('angeltype_id'));\n    if (empty($angeltype)) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if (!User_is_AngelType_supporter(auth()->user(), $angeltype)) {\n        error(__('You are not allowed to delete all users for this angeltype.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->has('confirmed')) {\n        UserAngelTypes_delete_all($angeltype['id']);\n\n        engelsystem_log(sprintf('Denied all users for angeltype %s', AngelType_name_render($angeltype)));\n        success(sprintf(__('Denied all users for angeltype %s.'), AngelType_name_render($angeltype)));\n        redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n    }\n\n    return [\n        __('Deny all users'),\n        UserAngelTypes_delete_all_view($angeltype)\n    ];\n}\n\n/**\n * Confirm all unconfirmed users for an angeltype.\n *\n * @return array\n */\nfunction user_angeltypes_confirm_all_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    if (!$request->has('angeltype_id')) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType($request->input('angeltype_id'));\n    if (empty($angeltype)) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if (!in_array('admin_user_angeltypes', $privileges) && !User_is_AngelType_supporter($user, $angeltype)) {\n        error(__('You are not allowed to confirm all users for this angeltype.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->has('confirmed')) {\n        UserAngelTypes_confirm_all($angeltype['id'], $user->id);\n\n        engelsystem_log(sprintf('Confirmed all users for angeltype %s', AngelType_name_render($angeltype)));\n        success(sprintf(__('Confirmed all users for angeltype %s.'), AngelType_name_render($angeltype)));\n        redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n    }\n\n    return [\n        __('Confirm all users'),\n        UserAngelTypes_confirm_all_view($angeltype)\n    ];\n}\n\n/**\n * Confirm an user for an angeltype.\n *\n * @return array\n */\nfunction user_angeltype_confirm_controller()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$request->has('user_angeltype_id')) {\n        error(__('User angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $user_angeltype = UserAngelType($request->input('user_angeltype_id'));\n    if (empty($user_angeltype)) {\n        error(__('User angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType($user_angeltype['angeltype_id']);\n    if (empty($angeltype)) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if (!User_is_AngelType_supporter($user, $angeltype)) {\n        error(__('You are not allowed to confirm this users angeltype.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $user_source = User::find($user_angeltype['user_id']);\n    if (!$user_source) {\n        error(__('User doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->has('confirmed')) {\n        UserAngelType_confirm($user_angeltype['id'], $user->id);\n\n        engelsystem_log(sprintf(\n            '%s confirmed for angeltype %s',\n            User_Nick_render($user_source),\n            AngelType_name_render($angeltype)\n        ));\n        success(sprintf(\n            __('%s confirmed for angeltype %s.'),\n            User_Nick_render($user_source),\n            AngelType_name_render($angeltype)\n        ));\n        redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n    }\n\n    return [\n        __('Confirm angeltype for user'),\n        UserAngelType_confirm_view($user_angeltype, $user_source, $angeltype)\n    ];\n}\n\n/**\n * Remove a user from an Angeltype.\n *\n * @return array\n */\nfunction user_angeltype_delete_controller()\n{\n    $request = request();\n    $user = auth()->user();\n\n    if (!$request->has('user_angeltype_id')) {\n        error(__('User angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $user_angeltype = UserAngelType($request->input('user_angeltype_id'));\n    if (empty($user_angeltype)) {\n        error(__('User angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType($user_angeltype['angeltype_id']);\n    if (empty($angeltype)) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $user_source = User::find($user_angeltype['user_id']);\n    if (!$user_source) {\n        error(__('User doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($user->id != $user_angeltype['user_id'] && !User_is_AngelType_supporter($user, $angeltype)) {\n        error(__('You are not allowed to delete this users angeltype.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->has('confirmed')) {\n        UserAngelType_delete($user_angeltype);\n\n        $success_message = sprintf(__('User %s removed from %s.'), User_Nick_render($user_source), $angeltype['name']);\n        engelsystem_log($success_message);\n        success($success_message);\n\n        redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n    }\n\n    return [\n        __('Remove angeltype'),\n        UserAngelType_delete_view($user_angeltype, $user_source, $angeltype)\n    ];\n}\n\n/**\n * Update an UserAngelType.\n *\n * @return array\n */\nfunction user_angeltype_update_controller()\n{\n    global $privileges;\n    $supporter = false;\n    $request = request();\n\n    if (!in_array('admin_angel_types', $privileges)) {\n        error(__('You are not allowed to set supporter rights.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if (!$request->has('user_angeltype_id')) {\n        error(__('User angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->has('supporter') && preg_match('/^[01]$/', $request->input('supporter'))) {\n        $supporter = $request->input('supporter') == '1';\n    } else {\n        error(__('No supporter update given.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $user_angeltype = UserAngelType($request->input('user_angeltype_id'));\n    if (empty($user_angeltype)) {\n        error(__('User angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType($user_angeltype['angeltype_id']);\n    if (empty($angeltype)) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $user_source = User::find($user_angeltype['user_id']);\n    if (!$user_source) {\n        error(__('User doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->has('confirmed')) {\n        UserAngelType_update($user_angeltype['id'], $supporter);\n\n        $success_message = sprintf(\n            $supporter\n                ? __('Added supporter rights for %s to %s.')\n                : __('Removed supporter rights for %s from %s.'),\n            AngelType_name_render($angeltype),\n            User_Nick_render($user_source)\n        );\n        engelsystem_log($success_message);\n        success($success_message);\n\n        redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n    }\n\n    return [\n        $supporter ? __('Add supporter rights') : __('Remove supporter rights'),\n        UserAngelType_update_view($user_angeltype, $user_source, $angeltype, $supporter)\n    ];\n}\n\n/**\n * User joining an Angeltype (Or supporter doing this for him).\n *\n * @return array\n */\nfunction user_angeltype_add_controller()\n{\n    $angeltype = load_angeltype();\n\n    // User is joining by itself\n    if (!User_is_AngelType_supporter(auth()->user(), $angeltype)) {\n        return user_angeltype_join_controller($angeltype);\n    }\n\n    // Allow to add any user\n\n    // Default selection\n    $user_source = auth()->user();\n\n    // Load possible users, that are not in the angeltype already\n    $users_source = Users_by_angeltype_inverted($angeltype);\n\n    if (request()->has('submit')) {\n        $user_source = load_user();\n\n        if (!UserAngelType_exists($user_source->id, $angeltype)) {\n            $user_angeltype_id = UserAngelType_create($user_source->id, $angeltype);\n\n            engelsystem_log(sprintf(\n                'User %s added to %s.',\n                User_Nick_render($user_source),\n                AngelType_name_render($angeltype)\n            ));\n            success(sprintf(\n                __('User %s added to %s.'),\n                User_Nick_render($user_source),\n                AngelType_name_render($angeltype)\n            ));\n\n            UserAngelType_confirm($user_angeltype_id, $user_source->id);\n            engelsystem_log(sprintf(\n                'User %s confirmed as %s.',\n                User_Nick_render($user_source),\n                AngelType_name_render($angeltype)\n            ));\n\n            redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n        }\n    }\n\n    return [\n        __('Add user to angeltype'),\n        UserAngelType_add_view($angeltype, $users_source, $user_source->id)\n    ];\n}\n\n/**\n * A user joins an angeltype.\n *\n * @param array $angeltype\n * @return array\n */\nfunction user_angeltype_join_controller($angeltype)\n{\n    global $privileges;\n    $user = auth()->user();\n\n    $user_angeltype = UserAngelType_by_User_and_AngelType($user->id, $angeltype);\n    if (!empty($user_angeltype)) {\n        error(sprintf(__('You are already a %s.'), $angeltype['name']));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if (request()->has('confirmed')) {\n        $user_angeltype_id = UserAngelType_create($user->id, $angeltype);\n\n        $success_message = sprintf(__('You joined %s.'), $angeltype['name']);\n        engelsystem_log(sprintf(\n            'User %s joined %s.',\n            User_Nick_render($user),\n            AngelType_name_render($angeltype)\n        ));\n        success($success_message);\n\n        if (in_array('admin_user_angeltypes', $privileges)) {\n            UserAngelType_confirm($user_angeltype_id, $user->id);\n            engelsystem_log(sprintf(\n                'User %s confirmed as %s.',\n                User_Nick_render($user),\n                AngelType_name_render($angeltype)\n            ));\n        }\n\n        redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n    }\n\n    return [\n        sprintf(__('Become a %s'), $angeltype['name']),\n        UserAngelType_join_view($user, $angeltype)\n    ];\n}\n\n/**\n * Route UserAngelType actions.\n *\n * @return array\n */\nfunction user_angeltypes_controller()\n{\n    $request = request();\n    if (!$request->has('action')) {\n        redirect(page_link_to('angeltypes'));\n    }\n\n    switch ($request->input('action')) {\n        case 'delete_all':\n            return user_angeltypes_delete_all_controller();\n        case 'confirm_all':\n            return user_angeltypes_confirm_all_controller();\n        case 'confirm':\n            return user_angeltype_confirm_controller();\n        case 'delete':\n            return user_angeltype_delete_controller();\n        case 'update':\n            return user_angeltype_update_controller();\n        case 'add':\n            return user_angeltype_add_controller();\n        default:\n            redirect(page_link_to('angeltypes'));\n    }\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * Generates a hint, if user joined angeltypes that require a driving license and the user has no driver license\n * information provided.\n *\n * @return string|null\n */\nfunction user_driver_license_required_hint()\n{\n    $user = auth()->user();\n\n    $angeltypes = User_angeltypes($user->id);\n    $user_driver_license = UserDriverLicense($user->id);\n\n    // User has already entered data, no hint needed.\n    if (!empty($user_driver_license)) {\n        return null;\n    }\n\n    foreach ($angeltypes as $angeltype) {\n        if ($angeltype['requires_driver_license']) {\n            return sprintf(\n                __('You joined an angeltype which requires a driving license. Please edit your driving license information here: %s.'),\n                '<a href=\"' . user_driver_license_edit_link() . '\">' . __('driving license information') . '</a>'\n            );\n        }\n    }\n\n    return null;\n}\n\n/**\n * Route user driver licenses actions.\n *\n * @return array\n */\nfunction user_driver_licenses_controller()\n{\n    $user = auth()->user();\n\n    if (!$user) {\n        redirect(page_link_to(''));\n    }\n\n    $action = strip_request_item('action', 'edit');\n\n    switch ($action) {\n        default:\n        case 'edit':\n            return user_driver_license_edit_controller();\n    }\n}\n\n/**\n * Link to user driver license edit page for given user.\n *\n * @param User $user\n * @return string\n */\nfunction user_driver_license_edit_link($user = null)\n{\n    if (!$user) {\n        return page_link_to('user_driver_licenses');\n    }\n\n    return page_link_to('user_driver_licenses', ['user_id' => $user->id]);\n}\n\n/**\n * Loads the user for the driver license.\n *\n * @return User\n */\nfunction user_driver_license_load_user()\n{\n    $request = request();\n    $user_source = auth()->user();\n\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->input('user_id'));\n        if (empty($user_source)) {\n            redirect(user_driver_license_edit_link());\n        }\n    }\n\n    return $user_source;\n}\n\n/**\n * Edit a users driver license information.\n *\n * @return array\n */\nfunction user_driver_license_edit_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n    $user_source = user_driver_license_load_user();\n\n    // only privilege admin_user can edit other users driver license information\n    if ($user->id != $user_source->id && !in_array('admin_user', $privileges)) {\n        redirect(user_driver_license_edit_link());\n    }\n\n    $user_driver_license = UserDriverLicense($user_source->id);\n    if (empty($user_driver_license)) {\n        $wants_to_drive = false;\n        $user_driver_license = UserDriverLicense_new();\n    } else {\n        $wants_to_drive = true;\n    }\n\n    if ($request->has('submit')) {\n        $wants_to_drive = $request->has('wants_to_drive');\n        if ($wants_to_drive) {\n            $user_driver_license['has_car'] = $request->has('has_car');\n            $user_driver_license['has_license_car'] = $request->has('has_license_car');\n            $user_driver_license['has_license_3_5t_transporter'] = $request->has('has_license_3_5t_transporter');\n            $user_driver_license['has_license_7_5t_truck'] = $request->has('has_license_7_5t_truck');\n            $user_driver_license['has_license_12_5t_truck'] = $request->has('has_license_12_5t_truck');\n            $user_driver_license['has_license_forklift'] = $request->has('has_license_forklift');\n\n            if (UserDriverLicense_valid($user_driver_license)) {\n                if (empty($user_driver_license['user_id'])) {\n                    $user_driver_license = UserDriverLicenses_create($user_driver_license, $user_source->id);\n                } else {\n                    UserDriverLicenses_update($user_driver_license);\n                }\n                engelsystem_log('Driver license information updated.');\n                success(__('Your driver license information has been saved.'));\n                redirect(user_link($user_source->id));\n            } else {\n                error(__('Please select at least one driving license.'));\n            }\n        } elseif (!empty($user_driver_license['user_id'])) {\n            UserDriverLicenses_delete($user_source->id);\n            engelsystem_log('Driver license information removed.');\n            success(__('Your driver license information has been removed.'));\n            redirect(user_link($user_source->id));\n        }\n    }\n\n    return [\n        sprintf(__('Edit %s driving license information'), $user_source->name),\n        UserDriverLicense_edit_view($user_source, $wants_to_drive, $user_driver_license)\n    ];\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * Delete a work log entry.\n *\n * @return array\n */\nfunction user_worklog_delete_controller()\n{\n    $request = request();\n    $userWorkLog = UserWorkLog($request->input('user_worklog_id'));\n    if (empty($userWorkLog)) {\n        redirect(user_link(auth()->user()->id));\n    }\n    $user_source = User::find($userWorkLog['user_id']);\n\n    if ($request->has('confirmed')) {\n        UserWorkLog_delete($userWorkLog);\n\n        success(__('Work log entry deleted.'));\n        redirect(user_link($user_source->id));\n    }\n\n    return [\n        UserWorkLog_delete_title(),\n        UserWorkLog_delete_view($user_source, $userWorkLog)\n    ];\n}\n\n/**\n * Edit work log for user.\n *\n * @return array\n */\nfunction user_worklog_edit_controller()\n{\n    $request = request();\n    $userWorkLog = UserWorkLog($request->input('user_worklog_id'));\n    if (empty($userWorkLog)) {\n        redirect(user_link(auth()->user()->id));\n    }\n    $user_source = User::find($userWorkLog['user_id']);\n\n    if ($request->has('submit')) {\n        list ($valid, $userWorkLog) = user_worklog_from_request($userWorkLog);\n\n        if ($valid) {\n            UserWorkLog_update($userWorkLog);\n\n            success(__('Work log entry updated.'));\n            redirect(user_link($user_source->id));\n        }\n    }\n\n    return [\n        UserWorkLog_edit_title(),\n        UserWorkLog_edit_view($user_source, $userWorkLog)\n    ];\n}\n\n/**\n * Handle form\n *\n * @param array $userWorkLog\n * @return array [bool $valid, UserWorkLog $userWorkLog]\n */\nfunction user_worklog_from_request($userWorkLog)\n{\n    $request = request();\n\n    $valid = true;\n\n    $userWorkLog['work_timestamp'] = parse_date(\n        'Y-m-d H:i',\n        $request->input('work_timestamp') . ' 00:00'\n    );\n    if (is_null($userWorkLog['work_timestamp'])) {\n        $valid = false;\n        error(__('Please enter work date.'));\n    }\n\n    $userWorkLog['work_hours'] = $request->input('work_hours');\n    if (!preg_match(\"/[0-9]+(\\.[0-9]+)?/\", $userWorkLog['work_hours'])) {\n        $valid = false;\n        error(__('Please enter work hours in format ##[.##].'));\n    }\n\n    $userWorkLog['comment'] = $request->input('comment');\n    if (empty($userWorkLog['comment'])) {\n        $valid = false;\n        error(__('Please enter a comment.'));\n    }\n\n    return [\n        $valid,\n        $userWorkLog\n    ];\n}\n\n/**\n * Add work log entry to user.\n *\n * @return array\n */\nfunction user_worklog_add_controller()\n{\n    $request = request();\n    $user_source = User::find($request->input('user_id'));\n    if (!$user_source) {\n        redirect(user_link(auth()->user()->id));\n    }\n\n    $userWorkLog = UserWorkLog_new($user_source->id);\n\n    if ($request->has('submit')) {\n        list ($valid, $userWorkLog) = user_worklog_from_request($userWorkLog);\n\n        if ($valid) {\n            UserWorkLog_create($userWorkLog);\n\n            success(__('Work log entry created.'));\n            redirect(user_link($user_source->id));\n        }\n    }\n\n    return [\n        UserWorkLog_add_title(),\n        UserWorkLog_add_view($user_source, $userWorkLog)\n    ];\n}\n\n/**\n * Link to work log entry add for given user.\n *\n * @param User $user\n *\n * @return string\n */\nfunction user_worklog_add_link($user)\n{\n    return page_link_to('user_worklog', [\n        'action'  => 'add',\n        'user_id' => $user->id,\n    ]);\n}\n\n/**\n * Link to work log entry edit.\n *\n * @param array $userWorkLog\n * @return string\n */\nfunction user_worklog_edit_link($userWorkLog)\n{\n    return page_link_to('user_worklog', [\n        'action'          => 'edit',\n        'user_worklog_id' => $userWorkLog['id']\n    ]);\n}\n\n/**\n * Link to work log entry delete.\n *\n * @param array   $userWorkLog\n * @param array[] $parameters\n * @return string\n */\nfunction user_worklog_delete_link($userWorkLog, $parameters = [])\n{\n    return page_link_to('user_worklog', array_merge([\n        'action'          => 'delete',\n        'user_worklog_id' => $userWorkLog['id']\n    ], $parameters));\n}\n\n/**\n * Work log entry actions\n *\n * @return array\n */\nfunction user_worklog_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n\n    if (!in_array('admin_user_worklog', $privileges)) {\n        redirect(user_link($user->id));\n    }\n\n    $request = request();\n    $action = $request->input('action');\n    if (!$request->has('action')) {\n        redirect(user_link($user->id));\n    }\n\n    switch ($action) {\n        case 'add':\n            return user_worklog_add_controller();\n        case 'edit':\n            return user_worklog_edit_controller();\n        case 'delete':\n            return user_worklog_delete_controller();\n    }\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\nuse Engelsystem\\Models\\User\\PasswordReset;\nuse Engelsystem\\Models\\User\\State;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\ShiftCalendarRenderer;\nuse Engelsystem\\ShiftsFilter;\n\n/**\n * Route user actions.\n *\n * @return array\n */\nfunction users_controller()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$user) {\n        redirect(page_link_to(''));\n    }\n\n    $action = 'list';\n    if ($request->has('action')) {\n        $action = $request->input('action');\n    }\n\n    switch ($action) {\n        case 'view':\n            return user_controller();\n        case 'delete':\n            return user_delete_controller();\n        case 'edit_vouchers':\n            return user_edit_vouchers_controller();\n        case 'list':\n        default:\n            return users_list_controller();\n    }\n}\n\n/**\n * Delete a user, requires to enter own password for reasons.\n *\n * @return array\n */\nfunction user_delete_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->query->get('user_id'));\n    } else {\n        $user_source = $user;\n    }\n\n    if (!in_array('admin_user', $privileges)) {\n        redirect(page_link_to(''));\n    }\n\n    // You cannot delete yourself\n    if ($user->id == $user_source->id) {\n        error(__('You cannot delete yourself.'));\n        redirect(user_link($user->id));\n    }\n\n    if ($request->has('submit')) {\n        $valid = true;\n\n        if (\n        !(\n            $request->has('password')\n            && verify_password($request->postData('password'), $user->password, $user->id)\n        )\n        ) {\n            $valid = false;\n            error(__('Your password is incorrect.  Please try it again.'));\n        }\n\n        if ($valid) {\n            $user_source->delete();\n\n            mail_user_delete($user_source);\n            success(__('User deleted.'));\n            engelsystem_log(sprintf('Deleted %s', User_Nick_render($user_source)));\n\n            redirect(users_link());\n        }\n    }\n\n    return [\n        sprintf(__('Delete %s'), $user_source->name),\n        User_delete_view($user_source)\n    ];\n}\n\n/**\n * @return string\n */\nfunction users_link()\n{\n    return page_link_to('users');\n}\n\n/**\n * @param int $userId\n * @return string\n */\nfunction user_edit_link($userId)\n{\n    return page_link_to('admin_user', ['user_id' => $userId]);\n}\n\n/**\n * @param int $userId\n * @return string\n */\nfunction user_delete_link($userId)\n{\n    return page_link_to('users', ['action' => 'delete', 'user_id' => $userId]);\n}\n\n/**\n * @param int $userId\n * @return string\n */\nfunction user_link($userId)\n{\n    return page_link_to('users', ['action' => 'view', 'user_id' => $userId]);\n}\n\n/**\n * @return array\n */\nfunction user_edit_vouchers_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->input('user_id'));\n    } else {\n        $user_source = $user;\n    }\n\n    if (!in_array('admin_user', $privileges)) {\n        redirect(page_link_to(''));\n    }\n\n    if ($request->has('submit')) {\n        $valid = true;\n\n        $vouchers = '';\n        if (\n            $request->has('vouchers')\n            && test_request_int('vouchers')\n            && trim($request->input('vouchers')) >= 0\n        ) {\n            $vouchers = trim($request->input('vouchers'));\n        } else {\n            $valid = false;\n            error(__('Please enter a valid number of vouchers.'));\n        }\n\n        if ($valid) {\n            $user_source->state->got_voucher = $vouchers;\n            $user_source->state->save();\n\n            success(__('Saved the number of vouchers.'));\n            engelsystem_log(User_Nick_render($user_source) . ': ' . sprintf('Got %s vouchers',\n                    $user_source->state->got_voucher));\n\n            redirect(user_link($user_source->id));\n        }\n    }\n\n    return [\n        sprintf(__('%s\\'s vouchers'), $user_source->name),\n        User_edit_vouchers_view($user_source)\n    ];\n}\n\n/**\n * @return array\n */\nfunction user_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    $user_source = $user;\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->input('user_id'));\n        if (!$user_source) {\n            error(__('User not found.'));\n            redirect(page_link_to('/'));\n        }\n    }\n\n    $shifts = Shifts_by_user($user_source->id, in_array('user_shifts_admin', $privileges));\n    foreach ($shifts as &$shift) {\n        // TODO: Move queries to model\n        $shift['needed_angeltypes'] = DB::select('\n            SELECT DISTINCT `AngelTypes`.*\n            FROM `ShiftEntry`\n            JOIN `AngelTypes` ON `ShiftEntry`.`TID`=`AngelTypes`.`id`\n            WHERE `ShiftEntry`.`SID` = ?\n            ORDER BY `AngelTypes`.`name`\n            ',\n            [$shift['SID']]\n        );\n        foreach ($shift['needed_angeltypes'] as &$needed_angeltype) {\n            $needed_angeltype['users'] = DB::select('\n                  SELECT `ShiftEntry`.`freeloaded`, `users`.*\n                  FROM `ShiftEntry`\n                  JOIN `users` ON `ShiftEntry`.`UID`=`users`.`id`\n                  WHERE `ShiftEntry`.`SID` = ?\n                  AND `ShiftEntry`.`TID` = ?\n                ',\n                [$shift['SID'], $needed_angeltype['id']]\n            );\n        }\n    }\n\n    if (empty($user_source->api_key)) {\n        User_reset_api_key($user_source, false);\n    }\n\n    if ($user_source->state->force_active) {\n        $tshirt_score = __('Enough');\n    } else {\n        $tshirt_score = sprintf('%.2f', User_tshirt_score($user_source->id)) . '&nbsp;h';\n    }\n\n    return [\n        $user_source->name,\n        User_view(\n            $user_source,\n            in_array('admin_user', $privileges),\n            User_is_freeloader($user_source),\n            User_angeltypes($user_source->id),\n            User_groups($user_source->id),\n            $shifts,\n            $user->id == $user_source->id,\n            $tshirt_score,\n            in_array('admin_active', $privileges),\n            in_array('admin_user_worklog', $privileges),\n            UserWorkLogsForUser($user_source->id)\n        )\n    ];\n}\n\n/**\n * List all users.\n *\n * @return array\n */\nfunction users_list_controller()\n{\n    global $privileges;\n    $request = request();\n\n    if (!in_array('admin_user', $privileges)) {\n        redirect(page_link_to(''));\n    }\n\n    $order_by = 'name';\n    if ($request->has('OrderBy') && in_array($request->input('OrderBy'), [\n            'name',\n            'last_name',\n            'first_name',\n            'dect',\n            'email',\n            'shirt_size',\n            'arrived',\n            'active',\n            'force_active',\n            'got_shirt',\n            'last_login_at',\n        ])) {\n        $order_by = $request->input('OrderBy');\n    }\n\n    /** @var User[] $users */\n    $users = User::query()\n        ->leftJoin('users_contact', 'users.id', '=', 'users_contact.user_id')\n        ->leftJoin('users_personal_data', 'users.id', '=', 'users_personal_data.user_id')\n        ->leftJoin('users_state', 'users.id', '=', 'users_state.user_id')\n        ->orderBy($order_by)\n        ->orderBy('name')\n        ->get();\n    foreach ($users as $user) {\n        $user->setAttribute('freeloads', count(ShiftEntries_freeloaded_by_user($user->id)));\n    }\n\n    return [\n        __('All users'),\n        Users_view(\n            $users,\n            $order_by,\n            State::whereArrived(true)->count(),\n            State::whereActive(true)->count(),\n            State::whereForceActive(true)->count(),\n            ShiftEntries_freeloaded_count(),\n            State::whereGotShirt(true)->count(),\n            State::query()->sum('got_voucher')\n        )\n    ];\n}\n\n/**\n * Second step of password recovery: set a new password using the token link from email\n *\n * @return string\n */\nfunction user_password_recovery_set_new_controller()\n{\n    $request = request();\n    $passwordReset = PasswordReset::whereToken($request->input('token'))->first();\n    if (!$passwordReset) {\n        error(__('Token is not correct.'));\n        redirect(page_link_to('login'));\n    }\n\n    if ($request->has('submit')) {\n        $valid = true;\n\n        if (\n            $request->has('password')\n            && strlen($request->postData('password')) >= config('min_password_length')\n        ) {\n            if ($request->postData('password') != $request->postData('password2')) {\n                $valid = false;\n                error(__('Your passwords don\\'t match.'));\n            }\n        } else {\n            $valid = false;\n            error(__('Your password is to short (please use at least 6 characters).'));\n        }\n\n        if ($valid) {\n            set_password($passwordReset->user->id, $request->postData('password'));\n            success(__('Password saved.'));\n            $passwordReset->delete();\n            redirect(page_link_to('login'));\n        }\n    }\n\n    return User_password_set_view();\n}\n\n/**\n * First step of password recovery: display a form that asks for your email and send email with recovery link\n *\n * @return string\n */\nfunction user_password_recovery_start_controller()\n{\n    $request = request();\n    if ($request->has('submit')) {\n        $valid = true;\n\n        $user_source = null;\n        if ($request->has('email') && strlen(strip_request_item('email')) > 0) {\n            $email = strip_request_item('email');\n            if (check_email($email)) {\n                /** @var User $user_source */\n                $user_source = User::whereEmail($email)->first();\n                if (!$user_source) {\n                    $valid = false;\n                    error(__('E-mail address is not correct.'));\n                }\n            } else {\n                $valid = false;\n                error(__('E-mail address is not correct.'));\n            }\n        } else {\n            $valid = false;\n            error(__('Please enter your e-mail.'));\n        }\n\n        if ($valid) {\n            $token = User_generate_password_recovery_token($user_source);\n            engelsystem_email_to_user(\n                $user_source,\n                __('Password recovery'),\n                sprintf(\n                    __('Please visit %s to recover your password.'),\n                    page_link_to('user_password_recovery', ['token' => $token])\n                )\n            );\n            success(__('We sent an email containing your password recovery link.'));\n            redirect(page_link_to('login'));\n        }\n    }\n\n    return User_password_recovery_view();\n}\n\n/**\n * User password recovery in 2 steps.\n * (By email)\n *\n * @return string\n */\nfunction user_password_recovery_controller()\n{\n    if (request()->has('token')) {\n        return user_password_recovery_set_new_controller();\n    }\n\n    return user_password_recovery_start_controller();\n}\n\n/**\n * Menu title for password recovery.\n *\n * @return string\n */\nfunction user_password_recovery_title()\n{\n    return __('Password recovery');\n}\n\n/**\n * Loads a user from param user_id.\n *\n * @return User\n */\nfunction load_user()\n{\n    $request = request();\n    if (!$request->has('user_id')) {\n        redirect(page_link_to());\n    }\n\n    $user = User::find($request->input('user_id'));\n    if (!$user) {\n        error(__('User doesn\\'t exist.'));\n        redirect(page_link_to());\n    }\n\n    return $user;\n}\n\n/**\n * @param ShiftsFilter $shiftsFilter\n * @return ShiftCalendarRenderer\n */\nfunction shiftCalendarRendererByShiftFilter(ShiftsFilter $shiftsFilter)\n{\n    $shifts = Shifts_by_ShiftsFilter($shiftsFilter);\n    $needed_angeltypes_source = NeededAngeltypes_by_ShiftsFilter($shiftsFilter);\n    $shift_entries_source = ShiftEntries_by_ShiftsFilter($shiftsFilter);\n\n    $needed_angeltypes = [];\n    $shift_entries = [];\n    foreach ($shifts as $shift) {\n        $needed_angeltypes[$shift['SID']] = [];\n        $shift_entries[$shift['SID']] = [];\n    }\n    foreach ($shift_entries_source as $shift_entry) {\n        if (isset($shift_entries[$shift_entry['SID']])) {\n            $shift_entries[$shift_entry['SID']][] = $shift_entry;\n        }\n    }\n    foreach ($needed_angeltypes_source as $needed_angeltype) {\n        if (isset($needed_angeltypes[$needed_angeltype['SID']])) {\n            $needed_angeltypes[$needed_angeltype['SID']][] = $needed_angeltype;\n        }\n    }\n    unset($needed_angeltypes_source);\n    unset($shift_entries_source);\n\n    if (\n        in_array(ShiftsFilter::FILLED_FREE, $shiftsFilter->getFilled())\n        && in_array(ShiftsFilter::FILLED_FILLED, $shiftsFilter->getFilled())\n    ) {\n        return new ShiftCalendarRenderer($shifts, $needed_angeltypes, $shift_entries, $shiftsFilter);\n    }\n\n    $filtered_shifts = [];\n    foreach ($shifts as $shift) {\n        $needed_angels_count = 0;\n        $taken = 0;\n        foreach ($needed_angeltypes[$shift['SID']] as $needed_angeltype) {\n            $taken = 0;\n            foreach ($shift_entries[$shift['SID']] as $shift_entry) {\n                if ($needed_angeltype['angel_type_id'] == $shift_entry['TID'] && $shift_entry['freeloaded'] == 0) {\n                    $taken++;\n                }\n            }\n\n            $needed_angels_count += max(0, $needed_angeltype['count'] - $taken);\n        }\n        if (in_array(ShiftsFilter::FILLED_FREE, $shiftsFilter->getFilled()) && $taken < $needed_angels_count) {\n            $filtered_shifts[] = $shift;\n        }\n        if (\n            in_array(ShiftsFilter::FILLED_FILLED, $shiftsFilter->getFilled())\n            && $taken >= $needed_angels_count\n        ) {\n            $filtered_shifts[] = $shift;\n        }\n    }\n\n    return new ShiftCalendarRenderer($filtered_shifts, $needed_angeltypes, $shift_entries, $shiftsFilter);\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\State;\nuse Engelsystem\\Models\\User\\User;\nuse Illuminate\\Database\\Query\\Builder;\nuse Illuminate\\Database\\Query\\JoinClause;\n\n/**\n * @return string\n */\nfunction admin_active_title()\n{\n    return __('Active angels');\n}\n\n/**\n * @return string\n */\nfunction admin_active()\n{\n    $tshirt_sizes = config('tshirt_sizes');\n    $shift_sum_formula = User_get_shifts_sum_query();\n    $request = request();\n\n    $msg = '';\n    $search = '';\n    $forced_count = State::whereForceActive(true)->count();\n    $count = null;\n    $set_active = '';\n\n    if ($request->has('search')) {\n        $search = strip_request_item('search');\n    }\n\n    $show_all_shifts = $request->has('show_all_shifts');\n\n    if ($request->has('set_active')) {\n        if ($request->has('count') && preg_match('/^\\d+$/', $request->input('count'))) {\n            $count = strip_request_item('count');\n            if ($count < $forced_count) {\n                error(sprintf(\n                    __('At least %s angels are forced to be active. The number has to be greater.'),\n                    $forced_count\n                ));\n                redirect(page_link_to('admin_active'));\n            }\n        } else {\n            $msg .= error(__('Please enter a number of angels to be marked as active.'));\n            redirect(page_link_to('admin_active'));\n        }\n\n        if ($request->has('ack')) {\n            State::query()\n                ->where('got_shirt', '=', false)\n                ->where('got_shirt', '=', false)\n                ->update(['active' => false]);\n\n            $query = User::query()\n                ->selectRaw(\n                    sprintf(\n                        '\n                            users.*,\n                            COUNT(ShiftEntry.id) AS shift_count,\n                                (%s + (\n                                      SELECT COALESCE(SUM(`work_hours`) * 3600, 0) FROM `UserWorkLog` WHERE `user_id`=`users`.`id`\n                                      AND `work_timestamp` < ?\n                                )) AS `shift_length`\n                        ',\n                        $shift_sum_formula\n                    ),\n                    [time()]\n                )\n                ->leftJoin('ShiftEntry', 'users.id', '=', 'ShiftEntry.UID')\n                ->leftJoin('Shifts', 'ShiftEntry.SID', '=', 'Shifts.SID')\n                ->leftJoin('users_state', 'users.id', '=', 'users_state.user_id')\n                ->where('users_state.arrived', '=', true)\n                ->where('users_state.force_active', '=', false)\n                ->groupBy('users.id')\n                ->orderByDesc('force_active')\n                ->orderByDesc('shift_length')\n                ->orderByDesc('name')\n                ->limit($count);\n\n            $users = $query->get();\n            $user_nicks = [];\n            foreach ($users as $usr) {\n                $usr->state->active = true;\n                $usr->state->save();\n                $user_nicks[] = User_Nick_render($usr);\n            }\n\n            State::whereForceActive(true)->update(['active' => true]);\n            engelsystem_log('These angels are active now: ' . join(', ', $user_nicks));\n\n            $msg = success(__('Marked angels.'), true);\n        } else {\n            $set_active = '<a href=\"' . page_link_to('admin_active', ['search' => $search]) . '\">&laquo; '\n                . __('back')\n                . '</a> | <a href=\"'\n                . page_link_to(\n                    'admin_active',\n                    ['search' => $search, 'count' => $count, 'set_active' => 1, 'ack' => 1]\n                ) . '\">'\n                . __('apply')\n                . '</a>';\n        }\n    }\n\n    if ($request->has('active') && preg_match('/^\\d+$/', $request->input('active'))) {\n        $user_id = $request->input('active');\n        $user_source = User::find($user_id);\n        if ($user_source) {\n            $user_source->state->active = true;\n            $user_source->state->save();\n            engelsystem_log('User ' . User_Nick_render($user_source) . ' is active now.');\n            $msg = success(__('Angel has been marked as active.'), true);\n        } else {\n            $msg = error(__('Angel not found.'), true);\n        }\n    } elseif ($request->has('not_active') && preg_match('/^\\d+$/', $request->input('not_active'))) {\n        $user_id = $request->input('not_active');\n        $user_source = User::find($user_id);\n        if ($user_source) {\n            $user_source->state->active = false;\n            $user_source->state->save();\n            engelsystem_log('User ' . User_Nick_render($user_source) . ' is NOT active now.');\n            $msg = success(__('Angel has been marked as not active.'), true);\n        } else {\n            $msg = error(__('Angel not found.'), true);\n        }\n    } elseif ($request->has('tshirt') && preg_match('/^\\d+$/', $request->input('tshirt'))) {\n        $user_id = $request->input('tshirt');\n        $user_source = User::find($user_id);\n        if ($user_source) {\n            $user_source->state->got_shirt = true;\n            $user_source->state->save();\n            engelsystem_log('User ' . User_Nick_render($user_source) . ' has tshirt now.');\n            $msg = success(__('Angel has got a t-shirt.'), true);\n        } else {\n            $msg = error('Angel not found.', true);\n        }\n    } elseif ($request->has('not_tshirt') && preg_match('/^\\d+$/', $request->input('not_tshirt'))) {\n        $user_id = $request->input('not_tshirt');\n        $user_source = User::find($user_id);\n        if ($user_source) {\n            $user_source->state->got_shirt = false;\n            $user_source->state->save();\n            engelsystem_log('User ' . User_Nick_render($user_source) . ' has NO tshirt.');\n            $msg = success(__('Angel has got no t-shirt.'), true);\n        } else {\n            $msg = error(__('Angel not found.'), true);\n        }\n    }\n\n    $query = User::query()\n        ->selectRaw(\n            sprintf(\n                '\n                    users.*,\n                    COUNT(ShiftEntry.id) AS shift_count,\n                        (%s + (\n                              SELECT COALESCE(SUM(`work_hours`) * 3600, 0) FROM `UserWorkLog` WHERE `user_id`=`users`.`id`\n                              AND `work_timestamp` < ?\n                        )) AS `shift_length`\n                ',\n                $shift_sum_formula\n            ),\n            [time()]\n        )\n        ->leftJoin('ShiftEntry', 'users.id', '=', 'ShiftEntry.UID')\n        ->leftJoin('Shifts', function ($join) use ($show_all_shifts) {\n            /** @var JoinClause $join */\n            $join->on('ShiftEntry.SID', '=', 'Shifts.SID');\n            if ($show_all_shifts) {\n                $join->where(function ($query) {\n                    /** @var Builder $query */\n                    $query->where('Shifts.end', '<', time())\n                        ->orWhereNull('Shifts.end');\n                });\n            }\n        })\n        ->leftJoin('users_state', 'users.id', '=', 'users_state.user_id')\n        ->where('users_state.arrived', '=', true)\n        ->groupBy('users.id')\n        ->orderByDesc('force_active')\n        ->orderByDesc('shift_length')\n        ->orderByDesc('name');\n\n    if (!is_null($count)) {\n        $query->limit($count);\n    }\n\n    $users = $query->get();\n    $matched_users = [];\n    if ($search == '') {\n        $tokens = [];\n    } else {\n        $tokens = explode(' ', $search);\n    }\n    foreach ($users as $usr) {\n        if (count($tokens) > 0) {\n            $match = false;\n            foreach ($tokens as $t) {\n                if (stristr($usr->name, trim($t))) {\n                    $match = true;\n                    break;\n                }\n            }\n            if (!$match) {\n                continue;\n            }\n        }\n\n        $shirtSize = $usr->personalData->shirt_size;\n\n        $userData = [];\n        $userData['nick'] = User_Nick_render($usr);\n        $userData['shirt_size'] = (isset($tshirt_sizes[$shirtSize]) ? $tshirt_sizes[$shirtSize] : '');\n        $userData['work_time'] = round($usr['shift_length'] / 60)\n            . ' min (' . sprintf('%.2f', $usr['shift_length'] / 3600) . '&nbsp;h)';\n        $userData['active'] = glyph_bool($usr->state->active == 1);\n        $userData['force_active'] = glyph_bool($usr->state->force_active == 1);\n        $userData['tshirt'] = glyph_bool($usr->state->got_shirt == 1);\n        $userData['shift_count'] = $usr['shift_count'];\n\n        $actions = [];\n        if (!$usr->state->active) {\n            $parameters = [\n                'active' => $usr->id,\n                'search' => $search,\n            ];\n            if ($show_all_shifts) {\n                $parameters['show_all_shifts'] = 1;\n            }\n            $actions[] = '<a href=\"' . page_link_to('admin_active', $parameters) . '\">'\n                . __('set active')\n                . '</a>';\n        }\n        if ($usr->state->active) {\n            $parametersRemove = [\n                'not_active' => $usr->id,\n                'search'     => $search,\n            ];\n            if ($show_all_shifts) {\n                $parametersRemove['show_all_shifts'] = 1;\n            }\n            $actions[] = '<a href=\"' . page_link_to('admin_active', $parametersRemove) . '\">'\n                . __('remove active')\n                . '</a>';\n        }\n        if (!$usr->state->got_shirt) {\n            $parametersShirt = [\n                'tshirt' => $usr->id,\n                'search' => $search,\n            ];\n            if ($show_all_shifts) {\n                $parametersShirt['show_all_shifts'] = 1;\n            }\n            $actions[] = '<a href=\"' . page_link_to('admin_active', $parametersShirt) . '\">'\n                . __('got t-shirt')\n                . '</a>';\n        }\n        if ($usr->state->got_shirt) {\n            $parameters = [\n                'not_tshirt' => $usr->id,\n                'search'     => $search,\n            ];\n            if ($show_all_shifts) {\n                $parameters['show_all_shifts'] = 1;\n            }\n            $actions[] = '<a href=\"' . page_link_to('admin_active', $parameters) . '\">'\n                . __('remove t-shirt')\n                . '</a>';\n        }\n\n        $userData['actions'] = join(' ', $actions);\n\n        $matched_users[] = $userData;\n    }\n\n    $shirt_statistics = [];\n    foreach (array_keys($tshirt_sizes) as $size) {\n        $gc = State::query()\n            ->leftJoin('users_settings', 'users_state.user_id', '=', 'users_settings.user_id')\n            ->leftJoin('users_personal_data', 'users_state.user_id', '=', 'users_personal_data.user_id')\n            ->where('users_state.got_shirt', '=', true)\n            ->where('users_personal_data.shirt_size', '=', $size)\n            ->count();\n        $shirt_statistics[] = [\n            'size'  => $size,\n            'given' => $gc\n        ];\n    }\n\n    $shirt_statistics[] = [\n        'size'  => '<b>' . __('Sum') . '</b>',\n        'given' => '<b>' . State::whereGotShirt(true)->count() . '</b>'\n    ];\n\n    return page_with_title(admin_active_title(), [\n        form([\n            form_text('search', __('Search angel:'), $search),\n            form_checkbox('show_all_shifts', __('Show all shifts'), $show_all_shifts),\n            form_submit('submit', __('Search'))\n        ], page_link_to('admin_active')),\n        $set_active == '' ? form([\n            form_text('count', __('How much angels should be active?'), $count ? $count : $forced_count),\n            form_submit('set_active', __('Preview'))\n        ]) : $set_active,\n        $msg . msg(),\n        table([\n            'nick'         => __('Nickname'),\n            'shirt_size'   => __('Size'),\n            'shift_count'  => __('Shifts'),\n            'work_time'    => __('Length'),\n            'active'       => __('Active?'),\n            'force_active' => __('Forced'),\n            'tshirt'       => __('T-shirt?'),\n            'actions'      => ''\n        ], $matched_users),\n        '<h2>' . __('Shirt statistics') . '</h2>',\n        table([\n            'size'  => __('Size'),\n            'given' => __('Given shirts')\n        ], $shirt_statistics)\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction admin_arrive_title()\n{\n    return __('Arrived angels');\n}\n\n/**\n * @return string\n */\nfunction admin_arrive()\n{\n    $msg = '';\n    $search = '';\n    $request = request();\n\n    if ($request->has('search')) {\n        $search = strip_request_item('search');\n        $search = trim($search);\n    }\n\n    if ($request->has('reset') && preg_match('/^\\d+$/', $request->input('reset'))) {\n        $user_id = $request->input('reset');\n        $user_source = User::find($user_id);\n        if ($user_source) {\n            $user_source->state->arrived = false;\n            $user_source->state->arrival_date = null;\n            $user_source->state->save();\n\n            engelsystem_log('User set to not arrived: ' . User_Nick_render($user_source));\n            success(__('Reset done. Angel has not arrived.'));\n            redirect(user_link($user_source->id));\n        } else {\n            $msg = error(__('Angel not found.'), true);\n        }\n    } elseif ($request->has('arrived') && preg_match('/^\\d+$/', $request->input('arrived'))) {\n        $user_id = $request->input('arrived');\n        $user_source = User::find($user_id);\n        if ($user_source) {\n            $user_source->state->arrived = true;\n            $user_source->state->arrival_date = new Carbon\\Carbon();\n            $user_source->state->save();\n\n            engelsystem_log('User set has arrived: ' . User_Nick_render($user_source));\n            success(__('Angel has been marked as arrived.'));\n            redirect(user_link($user_source->id));\n        } else {\n            $msg = error(__('Angel not found.'), true);\n        }\n    }\n\n    /** @var User[] $users */\n    $users = User::query()->orderBy('name')->get();\n    $arrival_count_at_day = [];\n    $planned_arrival_count_at_day = [];\n    $planned_departure_count_at_day = [];\n    $users_matched = [];\n    if ($search == '') {\n        $tokens = [];\n    } else {\n        $tokens = explode(' ', $search);\n    }\n    foreach ($users as $usr) {\n        if (count($tokens) > 0) {\n            $match = false;\n            $index = join(' ', $usr->toArray());\n            foreach ($tokens as $t) {\n                if (stristr($index, trim($t))) {\n                    $match = true;\n                    break;\n                }\n            }\n            if (!$match) {\n                continue;\n            }\n        }\n\n        $usr->name = User_Nick_render($usr);\n        $plannedDepartureDate = $usr->personalData->planned_departure_date;\n        $arrivalDate = $usr->state->arrival_date;\n        $plannedArrivalDate = $usr->personalData->planned_arrival_date;\n        $usr['rendered_planned_departure_date'] = $plannedDepartureDate ? $plannedDepartureDate->format('Y-m-d') : '-';\n        $usr['rendered_planned_arrival_date'] = $plannedArrivalDate ? $plannedArrivalDate->format('Y-m-d') : '-';\n        $usr['rendered_arrival_date'] = $arrivalDate ? $arrivalDate->format('Y-m-d') : '-';\n        $usr['arrived'] = $usr->state->arrived ? __('yes') : '';\n        $usr['actions'] = $usr->state->arrived == 1\n            ? '<a href=\"' . page_link_to(\n                'admin_arrive',\n                ['reset' => $usr->id, 'search' => $search]\n            ) . '\">' . __('reset') . '</a>'\n            : '<a href=\"' . page_link_to(\n                'admin_arrive',\n                ['arrived' => $usr->id, 'search' => $search]\n            ) . '\">' . __('arrived') . '</a>';\n\n        if ($usr->state->arrival_date) {\n            $day = $usr->state->arrival_date->format('Y-m-d');\n            if (!isset($arrival_count_at_day[$day])) {\n                $arrival_count_at_day[$day] = 0;\n            }\n            $arrival_count_at_day[$day]++;\n        }\n\n        if ($usr->personalData->planned_arrival_date) {\n            $day = $usr->personalData->planned_arrival_date->format('Y-m-d');\n            if (!isset($planned_arrival_count_at_day[$day])) {\n                $planned_arrival_count_at_day[$day] = 0;\n            }\n            $planned_arrival_count_at_day[$day]++;\n        }\n\n        if ($usr->personalData->planned_departure_date && $usr->state->arrived) {\n            $day = $usr->personalData->planned_departure_date->format('Y-m-d');\n            if (!isset($planned_departure_count_at_day[$day])) {\n                $planned_departure_count_at_day[$day] = 0;\n            }\n            $planned_departure_count_at_day[$day]++;\n        }\n\n        $users_matched[] = $usr;\n    }\n\n    ksort($arrival_count_at_day);\n    ksort($planned_arrival_count_at_day);\n    ksort($planned_departure_count_at_day);\n\n    $arrival_at_day = [];\n    $arrival_sum = 0;\n    foreach ($arrival_count_at_day as $day => $count) {\n        $arrival_sum += $count;\n        $arrival_at_day[$day] = [\n            'day'   => $day,\n            'count' => $count,\n            'sum'   => $arrival_sum\n        ];\n    }\n\n    $planned_arrival_at_day = [];\n    $planned_arrival_sum = 0;\n    foreach ($planned_arrival_count_at_day as $day => $count) {\n        $planned_arrival_sum += $count;\n        $planned_arrival_at_day[$day] = [\n            'day'   => $day,\n            'count' => $count,\n            'sum'   => $planned_arrival_sum\n        ];\n    }\n\n    $planned_departure_at_day = [];\n    $planned_departure_sum = 0;\n    foreach ($planned_departure_count_at_day as $day => $count) {\n        $planned_departure_sum += $count;\n        $planned_departure_at_day[$day] = [\n            'day'   => $day,\n            'count' => $count,\n            'sum'   => $planned_departure_sum\n        ];\n    }\n\n    return page_with_title(admin_arrive_title(), [\n        $msg . msg(),\n        form([\n            form_text('search', __('Search'), $search),\n            form_submit('submit', __('Search'))\n        ]),\n        table([\n            'name'                            => __('Nickname'),\n            'rendered_planned_arrival_date'   => __('Planned arrival'),\n            'arrived'                         => __('Arrived?'),\n            'rendered_arrival_date'           => __('Arrival date'),\n            'rendered_planned_departure_date' => __('Planned departure'),\n            'actions'                         => ''\n        ], $users_matched),\n        div('row', [\n            div('col-md-4', [\n                heading(__('Planned arrival statistics'), 2),\n                bargraph('planned_arrives', 'day', [\n                    'count' => __('arrived'),\n                    'sum'   => __('arrived sum')\n                ], [\n                    'count' => '#090',\n                    'sum'   => '#888'\n                ], $planned_arrival_at_day),\n                table([\n                    'day'   => __('Date'),\n                    'count' => __('Count'),\n                    'sum'   => __('Sum')\n                ], $planned_arrival_at_day)\n            ]),\n            div('col-md-4', [\n                heading(__('Arrival statistics'), 2),\n                bargraph('arrives', 'day', [\n                    'count' => __('arrived'),\n                    'sum'   => __('arrived sum')\n                ], [\n                    'count' => '#090',\n                    'sum'   => '#888'\n                ], $arrival_at_day),\n                table([\n                    'day'   => __('Date'),\n                    'count' => __('Count'),\n                    'sum'   => __('Sum')\n                ], $arrival_at_day)\n            ]),\n            div('col-md-4', [\n                heading(__('Planned departure statistics'), 2),\n                bargraph('planned_departures', 'day', [\n                    'count' => __('arrived'),\n                    'sum'   => __('arrived sum')\n                ], [\n                    'count' => '#090',\n                    'sum'   => '#888'\n                ], $planned_departure_at_day),\n                table([\n                    'day'   => __('Date'),\n                    'count' => __('Count'),\n                    'sum'   => __('Sum')\n                ], $planned_departure_at_day)\n            ])\n        ])\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\n\n/**\n * @return string\n */\nfunction admin_groups_title()\n{\n    return __('Grouprights');\n}\n\n/**\n * @return string\n */\nfunction admin_groups()\n{\n    $html = '';\n    $request = request();\n    $groups = DB::select('SELECT * FROM `Groups` ORDER BY `Name`');\n\n    if (!$request->has('action')) {\n        $groups_table = [];\n        foreach ($groups as $group) {\n            $privileges = DB::select('\n                SELECT `name`\n                FROM `GroupPrivileges`\n                JOIN `Privileges` ON (`GroupPrivileges`.`privilege_id` = `Privileges`.`id`)\n                WHERE `group_id`=?\n            ', [$group['UID']]);\n            $privileges_html = [];\n\n            foreach ($privileges as $privilege) {\n                $privileges_html[] = $privilege['name'];\n            }\n\n            $groups_table[] = [\n                'name'       => $group['Name'],\n                'privileges' => join(', ', $privileges_html),\n                'actions'    => button(\n                    page_link_to('admin_groups',\n                        ['action' => 'edit', 'id' => $group['UID']]),\n                    __('edit'),\n                    'btn-xs'\n                )\n            ];\n        }\n\n        return page_with_title(admin_groups_title(), [\n            table([\n                'name'       => __('Name'),\n                'privileges' => __('Privileges'),\n                'actions'    => ''\n            ], $groups_table)\n        ]);\n    } else {\n        switch ($request->input('action')) {\n            case 'edit':\n                if ($request->has('id') && preg_match('/^-\\d{1,11}$/', $request->input('id'))) {\n                    $group_id = $request->input('id');\n                } else {\n                    return error('Incomplete call, missing Groups ID.', true);\n                }\n\n                $group = DB::select('SELECT * FROM `Groups` WHERE `UID`=? LIMIT 1', [$group_id]);\n                if (!empty($group)) {\n                    $privileges = DB::select('\n                        SELECT `Privileges`.*, `GroupPrivileges`.`group_id`\n                        FROM `Privileges`\n                        LEFT OUTER JOIN `GroupPrivileges`\n                            ON (\n                                `Privileges`.`id` = `GroupPrivileges`.`privilege_id`\n                                AND `GroupPrivileges`.`group_id`=?\n                            )\n                        ORDER BY `Privileges`.`name`\n                    ', [$group_id]);\n                    $privileges_html = '';\n                    $privileges_form = [];\n                    foreach ($privileges as $privilege) {\n                        $privileges_form[] = form_checkbox(\n                            'privileges[]',\n                            $privilege['desc'] . ' (' . $privilege['name'] . ')',\n                            $privilege['group_id'] != '',\n                            $privilege['id'],\n                            'privilege-' . $privilege['name']\n                        );\n                        $privileges_html .= sprintf(\n                            '<tr>'\n                            . '<td><input type=\"checkbox\" name=\"privileges[]\" value=\"%s\" %s /></td>'\n                            . '<td>%s</td>'\n                            . '<td>%s</td>'\n                            . '</tr>',\n                            $privilege['id'],\n                            ($privilege['group_id'] != '' ? 'checked=\"checked\"' : ''),\n                            $privilege['name'],\n                            $privilege['desc']\n                        );\n                    }\n\n                    $privileges_form[] = form_submit('submit', __('Save'));\n                    $html .= page_with_title(__('Edit group'), [\n                        form(\n                            $privileges_form,\n                            page_link_to('admin_groups', ['action' => 'save', 'id' => $group_id])\n                        )\n                    ]);\n                } else {\n                    return error('No Group found.', true);\n                }\n                break;\n\n            case 'save':\n                if ($request->has('id') && preg_match('/^-\\d{1,11}$/', $request->input('id'))) {\n                    $group_id = $request->input('id');\n                } else {\n                    return error('Incomplete call, missing Groups ID.', true);\n                }\n\n                $group = DB::selectOne('SELECT * FROM `Groups` WHERE `UID`=? LIMIT 1', [$group_id]);\n                $privileges = $request->postData('privileges');\n                if (!is_array($privileges)) {\n                    $privileges = [];\n                }\n                if (!empty($group)) {\n                    DB::delete('DELETE FROM `GroupPrivileges` WHERE `group_id`=?', [$group_id]);\n                    $privilege_names = [];\n                    foreach ($privileges as $privilege) {\n                        if (preg_match('/^\\d{1,}$/', $privilege)) {\n                            $group_privileges_source = DB::selectOne(\n                                'SELECT `name` FROM `Privileges` WHERE `id`=? LIMIT 1',\n                                [$privilege]\n                            );\n                            if (!empty($group_privileges_source)) {\n                                DB::insert(\n                                    'INSERT INTO `GroupPrivileges` (`group_id`, `privilege_id`) VALUES (?, ?)',\n                                    [$group_id, $privilege]\n                                );\n                                $privilege_names[] = $group_privileges_source['name'];\n                            }\n                        }\n                    }\n                    engelsystem_log(\n                        'Group privileges of group ' . $group['Name']\n                        . ' edited: ' . join(', ', $privilege_names)\n                    );\n                    redirect(page_link_to('admin_groups'));\n                } else {\n                    return error('No Group found.', true);\n                }\n                break;\n        }\n    }\n    return $html;\n}\n", "<?php\n\n/**\n * @return string\n */\nfunction admin_import_title()\n{\n    return __('Frab import');\n}\n\n/**\n * @return string\n */\nfunction admin_import()\n{\n    global $rooms_import;\n    $user = auth()->user();\n    $html = '';\n    $import_dir = __DIR__ . '/../../import';\n    $request = request();\n\n    $step = 'input';\n    if (\n        $request->has('step')\n        && in_array($request->input('step'), [\n            'input',\n            'check',\n            'import'\n        ])\n    ) {\n        $step = $request->input('step');\n    }\n\n    try {\n        $test_handle = @fopen($import_dir . '/tmp', 'w');\n        fclose($test_handle);\n        @unlink($import_dir . '/tmp');\n    } catch (Exception $e) {\n        error(__('Webserver has no write-permission on import directory.'));\n    }\n\n    $import_file = $import_dir . '/import_' . $user->id . '.xml';\n    $shifttype_id = null;\n    $add_minutes_start = 15;\n    $add_minutes_end = 15;\n\n    $shifttypes_source = ShiftTypes();\n    $shifttypes = [];\n    foreach ($shifttypes_source as $shifttype) {\n        $shifttypes[$shifttype['id']] = $shifttype['name'];\n    }\n\n    switch ($step) {\n        case 'input':\n            $valid = false;\n\n            if ($request->has('submit')) {\n                $valid = true;\n\n                if ($request->has('shifttype_id') && isset($shifttypes[$request->input('shifttype_id')])) {\n                    $shifttype_id = $request->input('shifttype_id');\n                } else {\n                    $valid = false;\n                    error(__('Please select a shift type.'));\n                }\n\n                $minutes_start = trim($request->input('add_minutes_start'));\n                if ($request->has('add_minutes_start') && is_numeric($minutes_start)) {\n                    $add_minutes_start = $minutes_start;\n                } else {\n                    $valid = false;\n                    error(__('Please enter an amount of minutes to add to a talk\\'s begin.'));\n                }\n\n                if ($request->has('add_minutes_end') && is_numeric(trim($request->input('add_minutes_end')))) {\n                    $add_minutes_end = trim($request->input('add_minutes_end'));\n                } else {\n                    $valid = false;\n                    error(__('Please enter an amount of minutes to add to a talk\\'s end.'));\n                }\n\n                if (isset($_FILES['xcal_file']) && ($_FILES['xcal_file']['error'] == 0)) {\n                    if (move_uploaded_file($_FILES['xcal_file']['tmp_name'], $import_file)) {\n                        libxml_use_internal_errors(true);\n                        if (simplexml_load_file($import_file) === false) {\n                            $valid = false;\n                            error(__('No valid xml/xcal file provided.'));\n                            unlink($import_file);\n                        }\n                    } else {\n                        $valid = false;\n                        error(__('File upload went wrong.'));\n                    }\n                } else {\n                    $valid = false;\n                    error(__('Please provide some data.'));\n                }\n            }\n\n            if ($valid) {\n                redirect(\n                    page_link_to('admin_import', [\n                        'step'              => 'check',\n                        'shifttype_id'      => $shifttype_id,\n                        'add_minutes_end'   => $add_minutes_end,\n                        'add_minutes_start' => $add_minutes_start,\n                    ])\n                );\n            } else {\n                $html .= div('well well-sm text-center', [\n                        __('File Upload')\n                        . mute(glyph('arrow-right'))\n                        . mute(__('Validation'))\n                        . mute(glyph('arrow-right'))\n                        . mute(__('Import'))\n                    ]) . div('row', [\n                        div('col-md-offset-3 col-md-6', [\n                            form([\n                                form_info(\n                                    '',\n                                    __('This import will create/update/delete rooms and shifts by given FRAB-export file. The needed file format is xcal.')\n                                ),\n                                form_select('shifttype_id', __('Shifttype'), $shifttypes, $shifttype_id),\n                                form_spinner('add_minutes_start', __('Add minutes to start'), $add_minutes_start),\n                                form_spinner('add_minutes_end', __('Add minutes to end'), $add_minutes_end),\n                                form_file('xcal_file', __('xcal-File (.xcal)')),\n                                form_submit('submit', __('Import'))\n                            ])\n                        ])\n                    ]);\n            }\n            break;\n\n        case 'check':\n            if (!file_exists($import_file)) {\n                error(__('Missing import file.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            if ($request->has('shifttype_id') && isset($shifttypes[$request->input('shifttype_id')])) {\n                $shifttype_id = $request->input('shifttype_id');\n            } else {\n                error(__('Please select a shift type.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            if ($request->has('add_minutes_start') && is_numeric(trim($request->input('add_minutes_start')))) {\n                $add_minutes_start = trim($request->input('add_minutes_start'));\n            } else {\n                error(__('Please enter an amount of minutes to add to a talk\\'s begin.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            if ($request->has('add_minutes_end') && is_numeric(trim($request->input(('add_minutes_end'))))) {\n                $add_minutes_end = trim($request->input('add_minutes_end'));\n            } else {\n                error(__('Please enter an amount of minutes to add to a talk\\'s end.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            list($rooms_new, $rooms_deleted) = prepare_rooms($import_file);\n            list($events_new, $events_updated, $events_deleted) = prepare_events(\n                $import_file,\n                $shifttype_id,\n                $add_minutes_start,\n                $add_minutes_end\n            );\n\n            $html .= div(\n                    'well well-sm text-center',\n                    [\n                        '<span class=\"text-success\">' . __('File Upload') . glyph('ok-circle') . '</span>'\n                        . mute(glyph('arrow-right'))\n                        . __('Validation')\n                        . mute(glyph('arrow-right'))\n                        . mute(__('Import'))\n                    ]\n                )\n                . form(\n                    [\n                        div('row', [\n                            div('col-sm-6', [\n                                '<h3>' . __('Rooms to create') . '</h3>',\n                                table(__('Name'), $rooms_new)\n                            ]),\n                            div('col-sm-6', [\n                                '<h3>' . __('Rooms to delete') . '</h3>',\n                                table(__('Name'), $rooms_deleted)\n                            ])\n                        ]),\n                        '<h3>' . __('Shifts to create') . '</h3>',\n                        table([\n                            'day'       => __('Day'),\n                            'start'     => __('Start'),\n                            'end'       => __('End'),\n                            'shifttype' => __('Shift type'),\n                            'title'     => __('Title'),\n                            'room'      => __('Room')\n                        ], shifts_printable($events_new, $shifttypes)),\n                        '<h3>' . __('Shifts to update') . '</h3>',\n                        table([\n                            'day'       => __('Day'),\n                            'start'     => __('Start'),\n                            'end'       => __('End'),\n                            'shifttype' => __('Shift type'),\n                            'title'     => __('Title'),\n                            'room'      => __('Room')\n                        ], shifts_printable($events_updated, $shifttypes)),\n                        '<h3>' . __('Shifts to delete') . '</h3>',\n                        table([\n                            'day'       => __('Day'),\n                            'start'     => __('Start'),\n                            'end'       => __('End'),\n                            'shifttype' => __('Shift type'),\n                            'title'     => __('Title'),\n                            'room'      => __('Room')\n                        ], shifts_printable($events_deleted, $shifttypes)),\n                        form_submit('submit', __('Import'))\n                    ],\n                    page_link_to('admin_import', [\n                        'step'              => 'import',\n                        'shifttype_id'      => $shifttype_id,\n                        'add_minutes_end'   => $add_minutes_end,\n                        'add_minutes_start' => $add_minutes_start,\n                    ])\n                );\n            break;\n\n        case 'import':\n            if (!file_exists($import_file)) {\n                error(__('Missing import file.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            if (!file_exists($import_file)) {\n                redirect(page_link_to('admin_import'));\n            }\n\n            if ($request->has('shifttype_id') && isset($shifttypes[$request->input('shifttype_id')])) {\n                $shifttype_id = $request->input('shifttype_id');\n            } else {\n                error(__('Please select a shift type.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            if ($request->has('add_minutes_start') && is_numeric(trim($request->input('add_minutes_start')))) {\n                $add_minutes_start = trim($request->input('add_minutes_start'));\n            } else {\n                error(__('Please enter an amount of minutes to add to a talk\\'s begin.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            if ($request->has('add_minutes_end') && is_numeric(trim($request->input('add_minutes_end')))) {\n                $add_minutes_end = trim($request->input('add_minutes_end'));\n            } else {\n                error(__('Please enter an amount of minutes to add to a talk\\'s end.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            list($rooms_new, $rooms_deleted) = prepare_rooms($import_file);\n            foreach ($rooms_new as $room) {\n                $result = Room_create($room, true, null, null);\n                $rooms_import[trim($room)] = $result;\n            }\n            foreach ($rooms_deleted as $room) {\n                Room_delete_by_name($room);\n            }\n\n            list($events_new, $events_updated, $events_deleted) = prepare_events(\n                $import_file,\n                $shifttype_id,\n                $add_minutes_start,\n                $add_minutes_end\n            );\n            foreach ($events_new as $event) {\n                Shift_create($event);\n            }\n\n            foreach ($events_updated as $event) {\n                Shift_update_by_psid($event);\n            }\n\n            foreach ($events_deleted as $event) {\n                Shift_delete_by_psid($event['PSID']);\n            }\n\n            engelsystem_log('Frab import done');\n\n            unlink($import_file);\n\n            $html .= div('well well-sm text-center', [\n                    '<span class=\"text-success\">' . __('File Upload') . glyph('ok-circle') . '</span>'\n                    . mute(glyph('arrow-right'))\n                    . '<span class=\"text-success\">' . __('Validation') . glyph('ok-circle') . '</span>'\n                    . mute(glyph('arrow-right'))\n                    . '<span class=\"text-success\">' . __('Import') . glyph('ok-circle') . '</span>'\n                ]) . success(__('It\\'s done!'), true);\n            break;\n        default:\n            redirect(page_link_to('admin_import'));\n    }\n\n    return page_with_title(admin_import_title(), [\n        msg(),\n        $html\n    ]);\n}\n\n/**\n * @param string $file\n * @return array\n */\nfunction prepare_rooms($file)\n{\n    global $rooms_import;\n    $data = read_xml($file);\n\n    // Load rooms from db for compare with input\n    $rooms = Rooms();\n    // Contains rooms from db with from_frab==true\n    $rooms_db = [];\n    // Contains all rooms from db\n    $rooms_db_all = [];\n    // Contains all rooms from db and frab\n    $rooms_import = [];\n    foreach ($rooms as $room) {\n        if ($room['from_frab']) {\n            $rooms_db[] = $room['Name'];\n        }\n        $rooms_db_all[] = $room['Name'];\n        $rooms_import[$room['Name']] = $room['RID'];\n    }\n\n    $events = $data->vcalendar->vevent;\n    $rooms_frab = [];\n    foreach ($events as $event) {\n        $rooms_frab[] = (string)$event->location;\n        if (!isset($rooms_import[trim($event->location)])) {\n            $rooms_import[trim($event->location)] = trim($event->location);\n        }\n    }\n    $rooms_frab = array_unique($rooms_frab);\n\n    $rooms_new = array_diff($rooms_frab, $rooms_db_all);\n    $rooms_deleted = array_diff($rooms_db, $rooms_frab);\n\n    return [\n        $rooms_new,\n        $rooms_deleted\n    ];\n}\n\n/**\n * @param string $file\n * @param int    $shifttype_id\n * @param int    $add_minutes_start\n * @param int    $add_minutes_end\n * @return array\n */\nfunction prepare_events($file, $shifttype_id, $add_minutes_start, $add_minutes_end)\n{\n    global $rooms_import;\n    $data = read_xml($file);\n\n    $rooms = Rooms();\n    $rooms_db = [];\n    foreach ($rooms as $room) {\n        $rooms_db[$room['Name']] = $room['RID'];\n    }\n\n    $events = $data->vcalendar->vevent;\n    $shifts_pb = [];\n    foreach ($events as $event) {\n        $event_pb = $event->children('http://pentabarf.org');\n        $event_id = trim($event_pb->{'event-id'});\n        $shifts_pb[$event_id] = [\n            'shifttype_id' => $shifttype_id,\n            'start'        => parse_date(\"Ymd\\THis\", $event->dtstart) - $add_minutes_start * 60,\n            'end'          => parse_date(\"Ymd\\THis\", $event->dtend) + $add_minutes_end * 60,\n            'RID'          => $rooms_import[trim($event->location)],\n            'title'        => trim($event->summary),\n            'URL'          => trim($event->url),\n            'PSID'         => $event_id\n        ];\n    }\n\n    $shifts = Shifts_from_frab();\n    $shifts_db = [];\n    foreach ($shifts as $shift) {\n        $shifts_db[$shift['PSID']] = $shift;\n    }\n\n    $shifts_new = [];\n    $shifts_updated = [];\n    foreach ($shifts_pb as $shift) {\n        if (!isset($shifts_db[$shift['PSID']])) {\n            $shifts_new[] = $shift;\n        } else {\n            $tmp = $shifts_db[$shift['PSID']];\n            if (\n                $shift['shifttype_id'] != $tmp['shifttype_id']\n                || $shift['title'] != $tmp['title']\n                || $shift['start'] != $tmp['start']\n                || $shift['end'] != $tmp['end']\n                || $shift['RID'] != $tmp['RID']\n                || $shift['URL'] != $tmp['URL']\n            ) {\n                $shifts_updated[] = $shift;\n            }\n        }\n    }\n\n    $shifts_deleted = [];\n    foreach ($shifts_db as $shift) {\n        if (!isset($shifts_pb[$shift['PSID']])) {\n            $shifts_deleted[] = $shift;\n        }\n    }\n\n    return [\n        $shifts_new,\n        $shifts_updated,\n        $shifts_deleted\n    ];\n}\n\n/**\n * @param string $file\n * @return SimpleXMLElement\n */\nfunction read_xml($file)\n{\n    global $xml_import;\n    if (!isset($xml_import)) {\n        libxml_use_internal_errors(true);\n        $xml_import = simplexml_load_file($file);\n    }\n    return $xml_import;\n}\n\n/**\n * @param array $shifts\n * @param array $shifttypes\n * @return array\n */\nfunction shifts_printable($shifts, $shifttypes)\n{\n    global $rooms_import;\n    $rooms = array_flip($rooms_import);\n\n    uasort($shifts, 'shift_sort');\n\n    $shifts_printable = [];\n    foreach ($shifts as $shift) {\n        $shifts_printable[] = [\n            'day'       => date('l, Y-m-d', $shift['start']),\n            'start'     => date('H:i', $shift['start']),\n            'shifttype' => ShiftType_name_render([\n                'id'   => $shift['shifttype_id'],\n                'name' => $shifttypes[$shift['shifttype_id']]\n            ]),\n            'title'     => shorten($shift['title']),\n            'end'       => date('H:i', $shift['end']),\n            'room'      => $rooms[$shift['RID']]\n        ];\n    }\n    return $shifts_printable;\n}\n\n/**\n * @param array $shift_a\n * @param array $shift_b\n * @return int\n */\nfunction shift_sort($shift_a, $shift_b)\n{\n    return ($shift_a['start'] < $shift_b['start']) ? -1 : 1;\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction admin_questions_title()\n{\n    return __('Answer questions');\n}\n\n/**\n * Renders a hint for new questions to answer.\n *\n * @return string|null\n */\nfunction admin_new_questions()\n{\n    global $privileges, $page;\n\n    if ($page != 'admin_questions') {\n        if (in_array('admin_questions', $privileges)) {\n            $new_messages = count(DB::select('SELECT `QID` FROM `Questions` WHERE `AID` IS NULL'));\n\n            if ($new_messages > 0) {\n                return '<a href=\"' . page_link_to('admin_questions') . '\">'\n                    . __('There are unanswered questions!')\n                    . '</a>';\n            }\n        }\n    }\n\n    return null;\n}\n\n/**\n * @return string\n */\nfunction admin_questions()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$request->has('action')) {\n        $unanswered_questions_table = [];\n        $questions = DB::select('SELECT * FROM `Questions` WHERE `AID` IS NULL');\n        foreach ($questions as $question) {\n            $user_source = User::find($question['UID']);\n\n            $unanswered_questions_table[] = [\n                'from'     => User_Nick_render($user_source),\n                'question' => str_replace(\"\\n\", '<br />', $question['Question']),\n                'answer'   => form([\n                    form_textarea('answer', '', ''),\n                    form_submit('submit', __('Save'))\n                ], page_link_to('admin_questions', ['action' => 'answer', 'id' => $question['QID']])),\n                'actions'  => button(\n                    page_link_to('admin_questions', ['action' => 'delete', 'id' => $question['QID']]),\n                    __('delete'),\n                    'btn-xs'\n                )\n            ];\n        }\n\n        $answered_questions_table = [];\n        $questions = DB::select('SELECT * FROM `Questions` WHERE NOT `AID` IS NULL');\n        foreach ($questions as $question) {\n            $user_source = User::find($question['UID']);\n            $answer_user_source = User::find($question['AID']);\n            $answered_questions_table[] = [\n                'from'        => User_Nick_render($user_source),\n                'question'    => str_replace(\"\\n\", '<br />', $question['Question']),\n                'answered_by' => User_Nick_render($answer_user_source),\n                'answer'      => str_replace(\"\\n\", '<br />', $question['Answer']),\n                'actions'     => button(\n                    page_link_to('admin_questions', ['action' => 'delete', 'id' => $question['QID']]),\n                    __('delete'),\n                    'btn-xs'\n                )\n            ];\n        }\n\n        return page_with_title(admin_questions_title(), [\n            '<h2>' . __('Unanswered questions') . '</h2>',\n            table([\n                'from'     => __('From'),\n                'question' => __('Question'),\n                'answer'   => __('Answer'),\n                'actions'  => ''\n            ], $unanswered_questions_table),\n            '<h2>' . __('Answered questions') . '</h2>',\n            table([\n                'from'        => __('From'),\n                'question'    => __('Question'),\n                'answered_by' => __('Answered by'),\n                'answer'      => __('Answer'),\n                'actions'     => ''\n            ], $answered_questions_table)\n        ]);\n    } else {\n        switch ($request->input('action')) {\n            case 'answer':\n                if ($request->has('id') && preg_match('/^\\d{1,11}$/', $request->input('id'))) {\n                    $question_id = $request->input('id');\n                } else {\n                    return error('Incomplete call, missing Question ID.', true);\n                }\n\n                $question = DB::selectOne(\n                    'SELECT * FROM `Questions` WHERE `QID`=? LIMIT 1',\n                    [$question_id]\n                );\n                if (!empty($question) && empty($question['AID'])) {\n                    $answer = trim(\n                        preg_replace(\"/([^\\p{L}\\p{P}\\p{Z}\\p{N}\\n]{1,})/ui\",\n                            '',\n                            strip_tags($request->input('answer'))\n                        ));\n\n                    if ($answer != '') {\n                        DB::update('\n                                UPDATE `Questions`\n                                SET `AID`=?, `Answer`=?\n                                WHERE `QID`=?\n                                LIMIT 1\n                            ',\n                            [\n                                $user->id,\n                                $answer,\n                                $question_id,\n                            ]\n                        );\n                        engelsystem_log('Question ' . $question['Question'] . ' answered: ' . $answer);\n                        redirect(page_link_to('admin_questions'));\n                    } else {\n                        return error('Enter an answer!', true);\n                    }\n                } else {\n                    return error('No question found.', true);\n                }\n                break;\n            case 'delete':\n                if ($request->has('id') && preg_match('/^\\d{1,11}$/', $request->input('id'))) {\n                    $question_id = $request->input('id');\n                } else {\n                    return error('Incomplete call, missing Question ID.', true);\n                }\n\n                $question = DB::selectOne(\n                    'SELECT * FROM `Questions` WHERE `QID`=? LIMIT 1',\n                    [$question_id]\n                );\n                if (!empty($question)) {\n                    DB::delete('DELETE FROM `Questions` WHERE `QID`=? LIMIT 1', [$question_id]);\n                    engelsystem_log('Question deleted: ' . $question['Question']);\n                    redirect(page_link_to('admin_questions'));\n                } else {\n                    return error('No question found.', true);\n                }\n                break;\n        }\n    }\n\n    return '';\n}\n", "<?php\n/**\n * @return string\n */\nfunction admin_rooms_title()\n{\n    return __('Rooms');\n}\n\n/**\n * @return string\n */\nfunction admin_rooms()\n{\n    $rooms_source = Rooms();\n    $rooms = [];\n    $request = request();\n\n    foreach ($rooms_source as $room) {\n        $rooms[] = [\n            'name'      => Room_name_render($room),\n            'from_frab' => glyph_bool($room['from_frab']),\n            'map_url'   => glyph_bool(!empty($room['map_url'])),\n            'actions'   => table_buttons([\n                button(\n                    page_link_to('admin_rooms', ['show' => 'edit', 'id' => $room['RID']]),\n                    __('edit'),\n                    'btn-xs'\n                ),\n                button(\n                    page_link_to('admin_rooms', ['show' => 'delete', 'id' => $room['RID']]),\n                    __('delete'),\n                    'btn-xs'\n                )\n            ])\n        ];\n    }\n\n    $room = null;\n    if ($request->has('show')) {\n        $msg = '';\n        $name = '';\n        $from_frab = false;\n        $map_url = null;\n        $description = null;\n        $room_id = 0;\n\n        $angeltypes_source = AngelTypes();\n        $angeltypes = [];\n        $angeltypes_count = [];\n        foreach ($angeltypes_source as $angeltype) {\n            $angeltypes[$angeltype['id']] = $angeltype['name'];\n            $angeltypes_count[$angeltype['id']] = 0;\n        }\n\n        if (test_request_int('id')) {\n            $room = Room($request->input('id'));\n            if (empty($room)) {\n                redirect(page_link_to('admin_rooms'));\n            }\n\n            $room_id = $request->input('id');\n            $name = $room['Name'];\n            $from_frab = $room['from_frab'];\n            $map_url = $room['map_url'];\n            $description = $room['description'];\n\n            $needed_angeltypes = NeededAngelTypes_by_room($room_id);\n            foreach ($needed_angeltypes as $needed_angeltype) {\n                $angeltypes_count[$needed_angeltype['angel_type_id']] = $needed_angeltype['count'];\n            }\n        }\n\n        if ($request->input('show') == 'edit') {\n            if ($request->has('submit')) {\n                $valid = true;\n\n                if ($request->has('name') && strlen(strip_request_item('name')) > 0) {\n                    $result = Room_validate_name(strip_request_item('name'), $room_id);\n                    if (!$result->isValid()) {\n                        $valid = false;\n                        $msg .= error(__('This name is already in use.'), true);\n                    } else {\n                        $name = $result->getValue();\n                    }\n                } else {\n                    $valid = false;\n                    $msg .= error(__('Please enter a name.'), true);\n                }\n\n                $from_frab = $request->has('from_frab');\n\n                if ($request->has('map_url')) {\n                    $map_url = strip_request_item('map_url');\n                }\n\n                if ($request->has('description')) {\n                    $description = strip_request_item_nl('description');\n                }\n\n                foreach ($angeltypes as $angeltype_id => $angeltype) {\n                    $angeltypes_count[$angeltype_id] = 0;\n                    $queryKey = 'angeltype_count_' . $angeltype_id;\n                    if (!$request->has($queryKey)) {\n                        continue;\n                    }\n\n                    if (preg_match('/^\\d{1,4}$/', $request->input($queryKey))) {\n                        $angeltypes_count[$angeltype_id] = $request->input($queryKey);\n                    } else {\n                        $valid = false;\n                        $msg .= error(sprintf(\n                            __('Please enter needed angels for type %s.'),\n                            $angeltype\n                        ), true);\n                    }\n                }\n\n                if ($valid) {\n                    if (empty($room_id)) {\n                        $room_id = Room_create($name, $from_frab, $map_url, $description);\n                    } else {\n                        Room_update($room_id, $name, $from_frab, $map_url, $description);\n                    }\n\n                    NeededAngelTypes_delete_by_room($room_id);\n                    $needed_angeltype_info = [];\n                    foreach ($angeltypes_count as $angeltype_id => $angeltype_count) {\n                        $angeltype = AngelType($angeltype_id);\n                        if (!empty($angeltype)) {\n                            NeededAngelType_add(null, $angeltype_id, $room_id, $angeltype_count);\n                            if ($angeltype_count > 0) {\n                                $needed_angeltype_info[] = $angeltype['name'] . ': ' . $angeltype_count;\n                            }\n                        }\n                    }\n\n                    engelsystem_log(\n                        'Set needed angeltypes of room ' . $name\n                        . ' to: ' . join(', ', $needed_angeltype_info)\n                    );\n                    success(__('Room saved.'));\n                    redirect(page_link_to('admin_rooms'));\n                }\n            }\n            $angeltypes_count_form = [];\n            foreach ($angeltypes as $angeltype_id => $angeltype) {\n                $angeltypes_count_form[] = div('col-lg-4 col-md-6 col-xs-6', [\n                    form_spinner('angeltype_count_' . $angeltype_id, $angeltype, $angeltypes_count[$angeltype_id])\n                ]);\n            }\n\n            return page_with_title(admin_rooms_title(), [\n                buttons([\n                    button(page_link_to('admin_rooms'), __('back'), 'back')\n                ]),\n                $msg,\n                form([\n                    div('row', [\n                        div('col-md-6', [\n                            form_text('name', __('Name'), $name),\n                            form_checkbox('from_frab', __('Frab import'), $from_frab),\n                            form_text('map_url', __('Map URL'), $map_url),\n                            form_info('', __('The map url is used to display an iframe on the room page.')),\n                            form_textarea('description', __('Description'), $description),\n                            form_info('', __('Please use markdown for the description.')),\n                        ]),\n                        div('col-md-6', [\n                            div('row', [\n                                div('col-md-12', [\n                                    form_info(__('Needed angels:'))\n                                ]),\n                                join($angeltypes_count_form)\n                            ])\n                        ])\n                    ]),\n                    form_submit('submit', __('Save'))\n                ])\n            ]);\n        } elseif ($request->input('show') == 'delete') {\n            if ($request->has('ack')) {\n                Room_delete($room_id);\n\n                engelsystem_log('Room deleted: ' . $name);\n                success(sprintf(__('Room %s deleted.'), $name));\n                redirect(page_link_to('admin_rooms'));\n            }\n\n            return page_with_title(admin_rooms_title(), [\n                buttons([\n                    button(page_link_to('admin_rooms'), __('back'), 'back')\n                ]),\n                sprintf(__('Do you want to delete room %s?'), $name),\n                buttons([\n                    button(\n                        page_link_to('admin_rooms', ['show' => 'delete', 'id' => $room_id, 'ack' => 1]),\n                        __('Delete'),\n                        'delete btn-danger'\n                    )\n                ])\n            ]);\n        }\n    }\n\n    return page_with_title(admin_rooms_title(), [\n        buttons([\n            button(page_link_to('admin_rooms', ['show' => 'edit']), __('add'))\n        ]),\n        msg(),\n        table([\n            'name'      => __('Name'),\n            'from_frab' => __('Frab import'),\n            'map_url'   => __('Map'),\n            'actions'   => ''\n        ], $rooms)\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\n\n/**\n * @return string\n */\nfunction admin_shifts_title()\n{\n    return __('Create shifts');\n}\n\n/**\n * Assistent zum Anlegen mehrerer neuer Schichten\n *\n * @return string\n */\nfunction admin_shifts()\n{\n    $valid = true;\n    $request = request();\n    $session = session();\n    $start = parse_date('Y-m-d H:i', date('Y-m-d') . ' 00:00');\n    $end = $start;\n    $mode = 'single';\n    $angelmode = 'manually';\n    $length = '';\n    $change_hours = [];\n    $title = '';\n    $shifttype_id = null;\n\n    // Locations laden\n    $rooms = Rooms();\n    $room_array = [];\n    foreach ($rooms as $room) {\n        $room_array[$room['RID']] = $room['Name'];\n    }\n\n    // Engeltypen laden\n    $types = DB::select('SELECT * FROM `AngelTypes` ORDER BY `name`');\n    $needed_angel_types = [];\n    foreach ($types as $type) {\n        $needed_angel_types[$type['id']] = 0;\n    }\n\n    // Load shift types\n    $shifttypes_source = ShiftTypes();\n    $shifttypes = [];\n    foreach ($shifttypes_source as $shifttype) {\n        $shifttypes[$shifttype['id']] = $shifttype['name'];\n    }\n\n    if ($request->has('preview') || $request->has('back')) {\n        if ($request->has('shifttype_id')) {\n            $shifttype = ShiftType($request->input('shifttype_id'));\n            if (empty($shifttype)) {\n                $valid = false;\n                error(__('Please select a shift type.'));\n            } else {\n                $shifttype_id = $request->input('shifttype_id');\n            }\n        } else {\n            $valid = false;\n            error(__('Please select a shift type.'));\n        }\n\n        // Name/Bezeichnung der Schicht, darf leer sein\n        $title = strip_request_item('title');\n\n        // Auswahl der sichtbaren Locations f\u00fcr die Schichten\n        if (\n            $request->has('rid')\n            && preg_match('/^\\d+$/', $request->input('rid'))\n            && isset($room_array[$request->input('rid')])\n        ) {\n            $rid = $request->input('rid');\n        } else {\n            $valid = false;\n            $rid = $rooms[0]['RID'];\n            error(__('Please select a location.'));\n        }\n\n        if ($request->has('start') && $tmp = parse_date('Y-m-d H:i', $request->input('start'))) {\n            $start = $tmp;\n        } else {\n            $valid = false;\n            error(__('Please select a start time.'));\n        }\n\n        if ($request->has('end') && $tmp = parse_date('Y-m-d H:i', $request->input('end'))) {\n            $end = $tmp;\n        } else {\n            $valid = false;\n            error(__('Please select an end time.'));\n        }\n\n        if ($start >= $end) {\n            $valid = false;\n            error(__('The shifts end has to be after its start.'));\n        }\n\n        if ($request->has('mode')) {\n            if ($request->input('mode') == 'single') {\n                $mode = 'single';\n            } elseif ($request->input('mode') == 'multi') {\n                if ($request->has('length') && preg_match('/^\\d+$/', trim($request->input('length')))) {\n                    $mode = 'multi';\n                    $length = trim($request->input('length'));\n                } else {\n                    $valid = false;\n                    error(__('Please enter a shift duration in minutes.'));\n                }\n            } elseif ($request->input('mode') == 'variable') {\n                if (\n                    $request->has('change_hours')\n                    && preg_match(\n                        '/^(\\d{2}(,|$))/',\n                        trim(str_replace(' ', '', $request->input('change_hours')))\n                    )\n                ) {\n                    $mode = 'variable';\n                    $change_hours = array_map(\n                        'trim',\n                        explode(',', $request->input('change_hours'))\n                    );\n                } else {\n                    $valid = false;\n                    error(__('Please split the shift-change hours by colons.'));\n                }\n            }\n        } else {\n            $valid = false;\n            error(__('Please select a mode.'));\n        }\n\n        if ($request->has('angelmode')) {\n            if ($request->input('angelmode') == 'location') {\n                $angelmode = 'location';\n            } elseif ($request->input('angelmode') == 'manually') {\n                $angelmode = 'manually';\n                foreach ($types as $type) {\n                    if (preg_match('/^\\d+$/', trim($request->input('type_' . $type['id'], 0)))) {\n                        $needed_angel_types[$type['id']] = trim($request->input('type_' . $type['id'], 0));\n                    } else {\n                        $valid = false;\n                        error(sprintf(__('Please check the needed angels for team %s.'), $type['name']));\n                    }\n                }\n\n                if (array_sum($needed_angel_types) == 0) {\n                    $valid = false;\n                    error(__('There are 0 angels needed. Please enter the amounts of needed angels.'));\n                }\n            } else {\n                $valid = false;\n                error(__('Please select a mode for needed angels.'));\n            }\n        } else {\n            $valid = false;\n            error(__('Please select needed angels.'));\n        }\n\n        // Beim Zur\u00fcck-Knopf das Formular zeigen\n        if ($request->has('back')) {\n            $valid = false;\n        }\n\n        // Alle Eingaben in Ordnung\n        if ($valid) {\n            if ($angelmode == 'location') {\n                $needed_angel_types = [];\n                $needed_angel_types_location = DB::select('\n                        SELECT `angel_type_id`, `count`\n                        FROM `NeededAngelTypes`\n                        WHERE `room_id`=?\n                    ',\n                    [$rid]\n                );\n                foreach ($needed_angel_types_location as $type) {\n                    $needed_angel_types[$type['angel_type_id']] = $type['count'];\n                }\n            }\n            $shifts = [];\n            if ($mode == 'single') {\n                $shifts[] = [\n                    'start'        => $start,\n                    'end'          => $end,\n                    'RID'          => $rid,\n                    'title'        => $title,\n                    'shifttype_id' => $shifttype_id\n                ];\n            } elseif ($mode == 'multi') {\n                $shift_start = (int)$start;\n                do {\n                    $shift_end = $shift_start + (int)$length * 60;\n\n                    if ($shift_end > $end) {\n                        $shift_end = $end;\n                    }\n                    if ($shift_start >= $shift_end) {\n                        break;\n                    }\n\n                    $shifts[] = [\n                        'start'        => $shift_start,\n                        'end'          => $shift_end,\n                        'RID'          => $rid,\n                        'title'        => $title,\n                        'shifttype_id' => $shifttype_id\n                    ];\n\n                    $shift_start = $shift_end;\n                } while ($shift_end < $end);\n            } elseif ($mode == 'variable') {\n                rsort($change_hours);\n                $day = parse_date('Y-m-d H:i', date('Y-m-d', $start) . ' 00:00');\n                $change_index = 0;\n                // Ersten/n\u00e4chsten passenden Schichtwechsel suchen\n                foreach ($change_hours as $i => $change_hour) {\n                    if ($start < $day + $change_hour * 60 * 60) {\n                        $change_index = $i;\n                    } elseif ($start == $day + $change_hour * 60 * 60) {\n                        // Start trifft Schichtwechsel\n                        $change_index = ($i + count($change_hours) - 1) % count($change_hours);\n                        break;\n                    } else {\n                        break;\n                    }\n                }\n\n                $shift_start = $start;\n                do {\n                    $day = parse_date('Y-m-d H:i', date('Y-m-d', $shift_start) . ' 00:00');\n                    $shift_end = $day + $change_hours[$change_index] * 60 * 60;\n\n                    if ($shift_end > $end) {\n                        $shift_end = $end;\n                    }\n                    if ($shift_start >= $shift_end) {\n                        $shift_end += 24 * 60 * 60;\n                    }\n\n                    $shifts[] = [\n                        'start'        => $shift_start,\n                        'end'          => $shift_end,\n                        'RID'          => $rid,\n                        'title'        => $title,\n                        'shifttype_id' => $shifttype_id\n                    ];\n\n                    $shift_start = $shift_end;\n                    $change_index = ($change_index + count($change_hours) - 1) % count($change_hours);\n                } while ($shift_end < $end);\n            }\n\n            $shifts_table = [];\n            foreach ($shifts as $shift) {\n                $shifts_table_entry = [\n                    'timeslot'      =>\n                        '<span class=\"glyphicon glyphicon-time\"></span> '\n                        . date('Y-m-d H:i', $shift['start'])\n                        . ' - '\n                        . date('H:i', $shift['end'])\n                        . '<br />'\n                        . Room_name_render(Room($shift['RID'])),\n                    'title'         =>\n                        ShiftType_name_render(ShiftType($shifttype_id))\n                        . ($shift['title'] ? '<br />' . $shift['title'] : ''),\n                    'needed_angels' => ''\n                ];\n                foreach ($types as $type) {\n                    if (isset($needed_angel_types[$type['id']]) && $needed_angel_types[$type['id']] > 0) {\n                        $shifts_table_entry['needed_angels'] .= '<b>' . AngelType_name_render($type) . ':</b> '\n                            . $needed_angel_types[$type['id']] . '<br />';\n                    }\n                }\n                $shifts_table[] = $shifts_table_entry;\n            }\n\n            // F\u00fcrs Anlegen zwischenspeichern:\n            $session->set('admin_shifts_shifts', $shifts);\n            $session->set('admin_shifts_types', $needed_angel_types);\n\n            $hidden_types = '';\n            foreach ($needed_angel_types as $type_id => $count) {\n                $hidden_types .= form_hidden('type_' . $type_id, $count);\n            }\n            return page_with_title(__('Preview'), [\n                form([\n                    $hidden_types,\n                    form_hidden('shifttype_id', $shifttype_id),\n                    form_hidden('title', $title),\n                    form_hidden('rid', $rid),\n                    form_hidden('start', date('Y-m-d H:i', $start)),\n                    form_hidden('end', date('Y-m-d H:i', $end)),\n                    form_hidden('mode', $mode),\n                    form_hidden('length', $length),\n                    form_hidden('change_hours', implode(', ', $change_hours)),\n                    form_hidden('angelmode', $angelmode),\n                    form_submit('back', __('back')),\n                    table([\n                        'timeslot'      => __('Time and location'),\n                        'title'         => __('Type and title'),\n                        'needed_angels' => __('Needed angels')\n                    ], $shifts_table),\n                    form_submit('submit', __('Save'))\n                ])\n            ]);\n        }\n    } elseif ($request->has('submit')) {\n        if (\n            !is_array($session->get('admin_shifts_shifts'))\n            || !is_array($session->get('admin_shifts_types'))\n        ) {\n            redirect(page_link_to('admin_shifts'));\n        }\n\n        foreach ($session->get('admin_shifts_shifts', []) as $shift) {\n            $shift['URL'] = null;\n            $shift['PSID'] = null;\n            $shift_id = Shift_create($shift);\n\n            engelsystem_log(\n                'Shift created: ' . $shifttypes[$shift['shifttype_id']]\n                . ' with title ' . $shift['title']\n                . ' from ' . date('Y-m-d H:i', $shift['start'])\n                . ' to ' . date('Y-m-d H:i', $shift['end'])\n            );\n\n            $needed_angel_types_info = [];\n            foreach ($session->get('admin_shifts_types', []) as $type_id => $count) {\n                $angel_type_source = DB::selectOne('\n                      SELECT *\n                      FROM `AngelTypes`\n                      WHERE `id` = ?\n                      LIMIT 1', [$type_id]);\n\n                if (!empty($angel_type_source)) {\n                    DB::insert('\n                        INSERT INTO `NeededAngelTypes` (`shift_id`, `angel_type_id`, `count`)\n                        VALUES (?, ?, ?)\n                      ',\n                        [\n                            $shift_id,\n                            $type_id,\n                            $count\n                        ]\n                    );\n\n                    if ($count > 0) {\n                        $needed_angel_types_info[] = $angel_type_source['name'] . ': ' . $count;\n                    }\n                }\n            }\n            engelsystem_log('Shift needs following angel types: ' . join(', ', $needed_angel_types_info));\n        }\n\n        success('Schichten angelegt.');\n        redirect(page_link_to('admin_shifts'));\n    } else {\n        $session->remove('admin_shifts_shifts');\n        $session->remove('admin_shifts_types');\n    }\n\n    $rid = null;\n    if ($request->has('rid')) {\n        $rid = $request->input('rid');\n    }\n    $angel_types = '';\n    foreach ($types as $type) {\n        $angel_types .= '<div class=\"col-md-4\">' . form_spinner(\n                'type_' . $type['id'],\n                $type['name'],\n                $needed_angel_types[$type['id']]\n            )\n            . '</div>';\n    }\n\n    return page_with_title(admin_shifts_title(), [\n        msg(),\n        form([\n            form_select('shifttype_id', __('Shifttype'), $shifttypes, $shifttype_id),\n            form_text('title', __('Title'), $title),\n            form_select('rid', __('Room'), $room_array, $rid),\n            div('row', [\n                div('col-md-6', [\n                    form_text('start', __('Start'), date('Y-m-d H:i', $start)),\n                    form_text('end', __('End'), date('Y-m-d H:i', $end)),\n                    form_info(__('Mode'), ''),\n                    form_radio('mode', __('Create one shift'), $mode == 'single', 'single'),\n                    form_radio('mode', __('Create multiple shifts'), $mode == 'multi', 'multi'),\n                    form_text(\n                        'length',\n                        __('Length'),\n                        $request->has('length')\n                            ? $request->input('length')\n                            : '120'\n                    ),\n                    form_radio(\n                        'mode',\n                        __('Create multiple shifts with variable length'),\n                        $mode == 'variable',\n                        'variable'\n                    ),\n                    form_text(\n                        'change_hours',\n                        __('Shift change hours'),\n                        $request->has('change_hours')\n                            ? $request->input('input')\n                            : '00, 04, 08, 10, 12, 14, 16, 18, 20, 22'\n                    )\n                ]),\n                div('col-md-6', [\n                    form_info(__('Needed angels'), ''),\n                    form_radio(\n                        'angelmode',\n                        __('Take needed angels from room settings'),\n                        $angelmode == 'location',\n                        'location'\n                    ),\n                    form_radio(\n                        'angelmode',\n                        __('The following angels are needed'),\n                        $angelmode == 'manually',\n                        'manually'\n                    ),\n                    div('row', [\n                        $angel_types\n                    ])\n                ])\n            ]),\n            form_submit('preview', __('Preview'))\n        ])\n    ]);\n}\n", "<?php\n\nuse Carbon\\Carbon;\nuse Engelsystem\\Database\\DB;\nuse Engelsystem\\Models\\User\\Contact;\nuse Engelsystem\\Models\\User\\PersonalData;\nuse Engelsystem\\Models\\User\\Settings;\nuse Engelsystem\\Models\\User\\State;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction login_title()\n{\n    return __('Login');\n}\n\n/**\n * @return string\n */\nfunction register_title()\n{\n    return __('Register');\n}\n\n/**\n * @return string\n */\nfunction logout_title()\n{\n    return __('Logout');\n}\n\n/**\n * Engel registrieren\n *\n * @return string\n */\nfunction guest_register()\n{\n    global $privileges;\n    $authUser = auth()->user();\n    $tshirt_sizes = config('tshirt_sizes');\n    $enable_tshirt_size = config('enable_tshirt_size');\n    $min_password_length = config('min_password_length');\n    $config = config();\n    $request = request();\n    $session = session();\n\n    $msg = '';\n    $nick = '';\n    $lastName = '';\n    $preName = '';\n    $dect = '';\n    $mobile = '';\n    $mail = '';\n    $email_shiftinfo = false;\n    $email_by_human_allowed = false;\n    $tshirt_size = '';\n    $password_hash = '';\n    $selected_angel_types = [];\n    $planned_arrival_date = null;\n\n    $angel_types_source = AngelTypes();\n    $angel_types = [];\n    foreach ($angel_types_source as $angel_type) {\n        $angel_types[$angel_type['id']] = $angel_type['name'] . ($angel_type['restricted'] ? ' (restricted)' : '');\n        if (!$angel_type['restricted']) {\n            $selected_angel_types[] = $angel_type['id'];\n        }\n    }\n\n    if (!in_array('register', $privileges) || (!$authUser && !config('registration_enabled'))) {\n        error(__('Registration is disabled.'));\n\n        return page_with_title(register_title(), [\n            msg(),\n        ]);\n    }\n\n    if ($request->has('submit')) {\n        $valid = true;\n\n        if ($request->has('nick') && strlen(User_validate_Nick($request->input('nick'))) > 1) {\n            $nick = User_validate_Nick($request->input('nick'));\n            if (User::whereName($nick)->count() > 0) {\n                $valid = false;\n                $msg .= error(sprintf(__('Your nick &quot;%s&quot; already exists.'), $nick), true);\n            }\n        } else {\n            $valid = false;\n            $msg .= error(sprintf(\n                __('Your nick &quot;%s&quot; is too short (min. 2 characters).'),\n                User_validate_Nick($request->input('nick'))\n            ), true);\n        }\n\n        if ($request->has('mail') && strlen(strip_request_item('mail')) > 0) {\n            $mail = strip_request_item('mail');\n            if (!check_email($mail)) {\n                $valid = false;\n                $msg .= error(__('E-mail address is not correct.'), true);\n            }\n            if (User::whereEmail($mail)->first()) {\n                $valid = false;\n                $msg .= error(__('E-mail address is already used by another user.'), true);\n            }\n        } else {\n            $valid = false;\n            $msg .= error(__('Please enter your e-mail.'), true);\n        }\n\n        if ($request->has('email_shiftinfo')) {\n            $email_shiftinfo = true;\n        }\n\n        if ($request->has('email_by_human_allowed')) {\n            $email_by_human_allowed = true;\n        }\n\n        if ($enable_tshirt_size) {\n            if ($request->has('tshirt_size') && isset($tshirt_sizes[$request->input('tshirt_size')])) {\n                $tshirt_size = $request->input('tshirt_size');\n            } else {\n                $valid = false;\n                $msg .= error(__('Please select your shirt size.'), true);\n            }\n        }\n\n        if ($request->has('password') && strlen($request->postData('password')) >= $min_password_length) {\n            if ($request->postData('password') != $request->postData('password2')) {\n                $valid = false;\n                $msg .= error(__('Your passwords don\\'t match.'), true);\n            }\n        } else {\n            $valid = false;\n            $msg .= error(sprintf(\n                __('Your password is too short (please use at least %s characters).'),\n                $min_password_length\n            ), true);\n        }\n\n        if ($request->has('planned_arrival_date')) {\n            $tmp = parse_date('Y-m-d H:i', $request->input('planned_arrival_date') . ' 00:00');\n            $result = User_validate_planned_arrival_date($tmp);\n            $planned_arrival_date = $result->getValue();\n            if (!$result->isValid()) {\n                $valid = false;\n                error(__('Please enter your planned date of arrival. It should be after the buildup start date and before teardown end date.'));\n            }\n        } else {\n            $valid = false;\n            error(__('Please enter your planned date of arrival. It should be after the buildup start date and before teardown end date.'));\n        }\n\n        $selected_angel_types = [];\n        foreach (array_keys($angel_types) as $angel_type_id) {\n            if ($request->has('angel_types_' . $angel_type_id)) {\n                $selected_angel_types[] = $angel_type_id;\n            }\n        }\n\n        // Trivia\n        if ($request->has('lastname')) {\n            $lastName = strip_request_item('lastname');\n        }\n        if ($request->has('prename')) {\n            $preName = strip_request_item('prename');\n        }\n        if ($request->has('dect')) {\n            if (strlen(strip_request_item('dect')) <= 5) {\n                $dect = strip_request_item('dect');\n            } else {\n                $valid = false;\n                error(__('For dect numbers are only 5 digits allowed.'));\n            }\n        }\n        if ($request->has('mobile')) {\n            $mobile = strip_request_item('mobile');\n        }\n\n        if ($valid) {\n            $user = new User([\n                'name'          => $nick,\n                'password'      => $password_hash,\n                'email'         => $mail,\n                'api_key'       => '',\n                'last_login_at' => null,\n            ]);\n            $user->save();\n\n            $contact = new Contact([\n                'dect'   => $dect,\n                'mobile' => $mobile,\n            ]);\n            $contact->user()\n                ->associate($user)\n                ->save();\n\n            $personalData = new PersonalData([\n                'first_name'           => $preName,\n                'last_name'            => $lastName,\n                'shirt_size'           => $tshirt_size,\n                'planned_arrival_date' => Carbon::createFromTimestamp($planned_arrival_date),\n            ]);\n            $personalData->user()\n                ->associate($user)\n                ->save();\n\n            $settings = new Settings([\n                'language'        => $session->get('locale'),\n                'theme'           => config('theme'),\n                'email_human'     => $email_by_human_allowed,\n                'email_shiftinfo' => $email_shiftinfo,\n            ]);\n            $settings->user()\n                ->associate($user)\n                ->save();\n\n            (new State())->user()\n                ->associate($user)\n                ->save();\n\n            // Assign user-group and set password\n            DB::insert('INSERT INTO `UserGroups` (`uid`, `group_id`) VALUES (?, -20)', [$user->id]);\n            set_password($user->id, $request->postData('password'));\n\n            // Assign angel-types\n            $user_angel_types_info = [];\n            foreach ($selected_angel_types as $selected_angel_type_id) {\n                DB::insert(\n                    'INSERT INTO `UserAngelTypes` (`user_id`, `angeltype_id`, `supporter`) VALUES (?, ?, FALSE)',\n                    [$user->id, $selected_angel_type_id]\n                );\n                $user_angel_types_info[] = $angel_types[$selected_angel_type_id];\n            }\n\n            engelsystem_log(\n                'User ' . User_Nick_render($user)\n                . ' signed up as: ' . join(', ', $user_angel_types_info)\n            );\n            success(__('Angel registration successful!'));\n\n            // User is already logged in - that means a supporter has registered an angel. Return to register page.\n            if ($authUser) {\n                redirect(page_link_to('register'));\n            }\n\n            // If a welcome message is present, display registration success page.\n            if ($message = $config->get('welcome_msg')) {\n                return User_registration_success_view($message);\n            }\n\n            redirect(page_link_to('/'));\n        }\n    }\n\n    $buildup_start_date = time();\n    $teardown_end_date = null;\n    if ($buildup = $config->get('buildup_start')) {\n        /** @var Carbon $buildup */\n        $buildup_start_date = $buildup->getTimestamp();\n    }\n\n    if ($teardown = $config->get('teardown_end')) {\n        /** @var Carbon $teardown */\n        $teardown_end_date = $teardown->getTimestamp();\n    }\n\n    return page_with_title(register_title(), [\n        __('By completing this form you\\'re registering as a Chaos-Angel. This script will create you an account in the angel task scheduler.'),\n        $msg,\n        msg(),\n        form([\n            div('row', [\n                div('col-md-6', [\n                    div('row', [\n                        div('col-sm-4', [\n                            form_text('nick', __('Nick') . ' ' . entry_required(), $nick)\n                        ]),\n                        div('col-sm-8', [\n                            form_email('mail', __('E-Mail') . ' ' . entry_required(), $mail),\n                            form_checkbox(\n                                'email_shiftinfo',\n                                __(\n                                    'The %s is allowed to send me an email (e.g. when my shifts change)',\n                                    [config('app_name')]\n                                ),\n                                $email_shiftinfo\n                            ),\n                            form_checkbox(\n                                'email_by_human_allowed',\n                                __('Humans are allowed to send me an email (e.g. for ticket vouchers)'),\n                                $email_by_human_allowed\n                            )\n                        ])\n                    ]),\n                    div('row', [\n                        div('col-sm-6', [\n                            form_date(\n                                'planned_arrival_date',\n                                __('Planned date of arrival') . ' ' . entry_required(),\n                                $planned_arrival_date, $buildup_start_date, $teardown_end_date\n                            )\n                        ]),\n                        div('col-sm-6', [\n                            $enable_tshirt_size ? form_select('tshirt_size',\n                                __('Shirt size') . ' ' . entry_required(),\n                                $tshirt_sizes, $tshirt_size, __('Please select...')) : ''\n                        ])\n                    ]),\n                    div('row', [\n                        div('col-sm-6', [\n                            form_password('password', __('Password') . ' ' . entry_required())\n                        ]),\n                        div('col-sm-6', [\n                            form_password('password2', __('Confirm password') . ' ' . entry_required())\n                        ])\n                    ]),\n                    form_checkboxes(\n                        'angel_types',\n                        __('What do you want to do?') . sprintf(\n                            ' (<a href=\"%s\">%s</a>)',\n                            page_link_to('angeltypes', ['action' => 'about']),\n                            __('Description of job types')\n                        ),\n                        $angel_types,\n                        $selected_angel_types\n                    ),\n                    form_info(\n                        '',\n                        __('Restricted angel types need will be confirmed later by a supporter. You can change your selection in the options section.')\n                    )\n                ]),\n                div('col-md-6', [\n                    div('row', [\n                        div('col-sm-4', [\n                            form_text('dect', __('DECT'), $dect)\n                        ]),\n                        div('col-sm-4', [\n                            form_text('mobile', __('Mobile'), $mobile)\n                        ]),\n                    ]),\n                    div('row', [\n                        div('col-sm-6', [\n                            form_text('prename', __('First name'), $preName)\n                        ]),\n                        div('col-sm-6', [\n                            form_text('lastname', __('Last name'), $lastName)\n                        ])\n                    ]),\n                    form_info(entry_required() . ' = ' . __('Entry required!'))\n                ])\n            ]),\n            form_submit('submit', __('Register'))\n        ])\n    ]);\n}\n\n/**\n * @return string\n */\nfunction entry_required()\n{\n    return '<span class=\"text-info glyphicon glyphicon-warning-sign\"></span>';\n}\n\n/**\n * @return bool\n */\nfunction guest_logout()\n{\n    session()->invalidate();\n    redirect(page_link_to('start'));\n    return true;\n}\n\n/**\n * @return string\n */\nfunction guest_login()\n{\n    $nick = '';\n    $request = request();\n    $session = session();\n    $valid = true;\n\n    $session->remove('uid');\n\n    if ($request->has('submit')) {\n        if ($request->has('nick') && strlen(User_validate_Nick($request->input('nick'))) > 0) {\n            $nick = User_validate_Nick($request->input('nick'));\n            $login_user = User::whereName($nick)->first();\n            if ($login_user) {\n                if ($request->has('password')) {\n                    if (!verify_password($request->postData('password'), $login_user->password, $login_user->id)) {\n                        $valid = false;\n                        error(__('Your password is incorrect.  Please try it again.'));\n                    }\n                } else {\n                    $valid = false;\n                    error(__('Please enter a password.'));\n                }\n            } else {\n                $valid = false;\n                error(__('No user was found with that Nickname. Please try again. If you are still having problems, ask a Dispatcher.'));\n            }\n        } else {\n            $valid = false;\n            error(__('Please enter a nickname.'));\n        }\n\n        if ($valid && $login_user) {\n            $session->set('uid', $login_user->id);\n            $session->set('locale', $login_user->settings->language);\n\n            redirect(page_link_to('news'));\n        }\n    }\n\n    return page([\n        div('col-md-12', [\n            div('row', [\n                EventConfig_countdown_page()\n            ]),\n            div('row', [\n                div('col-sm-6 col-sm-offset-3 col-md-4 col-md-offset-4', [\n                    div('panel panel-primary first', [\n                        div('panel-heading', [\n                            '<span class=\"icon-icon_angel\"></span> ' . __('Login')\n                        ]),\n                        div('panel-body', [\n                            msg(),\n                            form([\n                                form_text_placeholder('nick', __('Nick'), $nick),\n                                form_password_placeholder('password', __('Password')),\n                                form_submit('submit', __('Login')),\n                                !$valid ? buttons([\n                                    button(page_link_to('user_password_recovery'), __('I forgot my password'))\n                                ]) : ''\n                            ])\n                        ]),\n                        div('panel-footer', [\n                            glyph('info-sign') . __('Please note: You have to activate cookies!')\n                        ])\n                    ])\n                ])\n            ]),\n            div('row', [\n                div('col-sm-6 text-center', [\n                    heading(register_title(), 2),\n                    get_register_hint()\n                ]),\n                div('col-sm-6 text-center', [\n                    heading(__('What can I do?'), 2),\n                    '<p>' . __('Please read about the jobs you can do to help us.') . '</p>',\n                    buttons([\n                        button(\n                            page_link_to('angeltypes', ['action' => 'about']),\n                            __('Teams/Job description') . ' &raquo;'\n                        )\n                    ])\n                ])\n            ])\n        ])\n    ]);\n}\n\n/**\n * @return string\n */\nfunction get_register_hint()\n{\n    global $privileges;\n\n    if (in_array('register', $privileges) && config('registration_enabled')) {\n        return join('', [\n            '<p>' . __('Please sign up, if you want to help us!') . '</p>',\n            buttons([\n                button(page_link_to('register'), register_title() . ' &raquo;')\n            ])\n        ]);\n    }\n\n    return error(__('Registration is disabled.'), true);\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction myshifts_title()\n{\n    return __('My shifts');\n}\n\n/**\n * Zeigt die Schichten an, die ein Benutzer belegt\n *\n * @return string\n */\nfunction user_myshifts()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    if (\n        $request->has('id')\n        && in_array('user_shifts_admin', $privileges)\n        && preg_match('/^\\d{1,}$/', $request->input('id'))\n        && User::find($request->input('id'))\n    ) {\n        $shift_entry_id = $request->input('id');\n    } else {\n        $shift_entry_id = $user->id;\n    }\n\n    $shifts_user = User::find($shift_entry_id);\n    if ($request->has('reset')) {\n        if ($request->input('reset') == 'ack') {\n            User_reset_api_key($user);\n            success(__('Key changed.'));\n            redirect(page_link_to('users', ['action' => 'view', 'user_id' => $shifts_user->id]));\n        }\n        return page_with_title(__('Reset API key'), [\n            error(\n                __('If you reset the key, the url to your iCal- and JSON-export and your atom feed changes! You have to update it in every application using one of these exports.'),\n                true\n            ),\n            button(page_link_to('user_myshifts', ['reset' => 'ack']), __('Continue'), 'btn-danger')\n        ]);\n    } elseif ($request->has('edit') && preg_match('/^\\d+$/', $request->input('edit'))) {\n        $shift_entry_id = $request->input('edit');\n        $shift = DB::selectOne('\n                SELECT\n                    `ShiftEntry`.`freeloaded`,\n                    `ShiftEntry`.`freeload_comment`,\n                    `ShiftEntry`.`Comment`,\n                    `ShiftEntry`.`UID`,\n                    `ShiftTypes`.`name`,\n                    `Shifts`.*,\n                    `Room`.`Name`,\n                    `AngelTypes`.`name` AS `angel_type`\n                FROM `ShiftEntry`\n                JOIN `AngelTypes` ON (`ShiftEntry`.`TID` = `AngelTypes`.`id`)\n                JOIN `Shifts` ON (`ShiftEntry`.`SID` = `Shifts`.`SID`)\n                JOIN `ShiftTypes` ON (`ShiftTypes`.`id` = `Shifts`.`shifttype_id`)\n                JOIN `Room` ON (`Shifts`.`RID` = `Room`.`RID`)\n                WHERE `ShiftEntry`.`id`=?\n                AND `UID`=?\n                LIMIT 1\n            ',\n            [\n                $shift_entry_id,\n                $shifts_user->id,\n            ]\n        );\n        if (!empty($shift)) {\n            $freeloaded = $shift['freeloaded'];\n            $freeload_comment = $shift['freeload_comment'];\n\n            if ($request->has('submit')) {\n                $valid = true;\n                if (in_array('user_shifts_admin', $privileges)) {\n                    $freeloaded = $request->has('freeloaded');\n                    $freeload_comment = strip_request_item_nl('freeload_comment');\n                    if ($freeloaded && $freeload_comment == '') {\n                        $valid = false;\n                        error(__('Please enter a freeload comment!'));\n                    }\n                }\n\n                $comment = strip_request_item_nl('comment');\n                $user_source = User::find($shift['UID']);\n\n                if ($valid) {\n                    ShiftEntry_update([\n                        'id'               => $shift_entry_id,\n                        'Comment'          => $comment,\n                        'freeloaded'       => $freeloaded,\n                        'freeload_comment' => $freeload_comment\n                    ]);\n\n                    engelsystem_log(\n                        'Updated ' . User_Nick_render($user_source) . '\\'s shift ' . $shift['name']\n                        . ' from ' . date('Y-m-d H:i', $shift['start'])\n                        . ' to ' . date('Y-m-d H:i', $shift['end'])\n                        . ' with comment ' . $comment\n                        . '. Freeloaded: ' . ($freeloaded ? 'YES Comment: ' . $freeload_comment : 'NO')\n                    );\n                    success(__('Shift saved.'));\n                    redirect(page_link_to('users', ['action' => 'view', 'user_id' => $shifts_user->id]));\n                }\n            }\n\n            return ShiftEntry_edit_view(\n                User_Nick_render($shifts_user),\n                date('Y-m-d H:i', $shift['start']) . ', ' . shift_length($shift),\n                $shift['Name'],\n                $shift['name'],\n                $shift['angel_type'],\n                $shift['Comment'],\n                $shift['freeloaded'],\n                $shift['freeload_comment'],\n                in_array('user_shifts_admin', $privileges)\n            );\n        } else {\n            redirect(page_link_to('user_myshifts'));\n        }\n    }\n\n    redirect(page_link_to('users', ['action' => 'view', 'user_id' => $shifts_user->id]));\n    return '';\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction user_news_comments_title()\n{\n    return __('News comments');\n}\n\n/**\n * @return string\n */\nfunction news_title()\n{\n    return __('News');\n}\n\n/**\n * @return string\n */\nfunction meetings_title()\n{\n    return __('Meetings');\n}\n\n/**\n * @return string\n */\nfunction user_meetings()\n{\n    $display_news = config('display_news');\n    $html = '<div class=\"col-md-12\"><h1>' . meetings_title() . '</h1>' . msg();\n    $request = request();\n\n    if (preg_match('/^\\d{1,}$/', $request->input('page', 0))) {\n        $page = $request->input('page', 0);\n    } else {\n        $page = 0;\n    }\n\n    $news = DB::select(sprintf('\n        SELECT *\n        FROM `News`\n        WHERE `Treffen`=1\n        ORDER BY `Datum`DESC\n        LIMIT %u, %u',\n        $page * $display_news,\n        $display_news\n    ));\n    foreach ($news as $entry) {\n        $html .= display_news($entry);\n    }\n\n    $dis_rows = ceil(count(DB::select('SELECT `ID` FROM `News`')) / $display_news);\n    $html .= '<div class=\"text-center\">' . '<ul class=\"pagination\">';\n    for ($i = 0; $i < $dis_rows; $i++) {\n        if ($request->has('page') && $i == $request->input('page', 0)) {\n            $html .= '<li class=\"active\">';\n        } elseif (!$request->has('page') && $i == 0) {\n            $html .= '<li class=\"active\">';\n        } else {\n            $html .= '<li>';\n        }\n        $html .= '<a href=\"' . page_link_to('user_meetings', ['page' => $i]) . '\">' . ($i + 1) . '</a></li>';\n    }\n    $html .= '</ul></div></div>';\n\n    return $html;\n}\n\n/**\n * Renders the text content of a news entry\n *\n * @param array $news\n * @return string HTML\n */\nfunction news_text($news)\n{\n    $text = ReplaceSmilies($news['Text']);\n    $text = preg_replace(\"/\\r\\n\\r\\n/m\", '<br><br>', $text);\n    return $text;\n}\n\n/**\n * @param array $news\n * @return string\n */\nfunction display_news($news)\n{\n    global $privileges, $page;\n\n    $html = '';\n    $html .= '<div class=\"panel' . ($news['Treffen'] == 1 ? ' panel-info' : ' panel-default') . '\">';\n    $html .= '<div class=\"panel-heading\">';\n    $html .= '<h3 class=\"panel-title\">' . ($news['Treffen'] == 1 ? '[Meeting] ' : '') . ReplaceSmilies($news['Betreff']) . '</h3>';\n    $html .= '</div>';\n    $html .= '<div class=\"panel-body\">' . news_text($news) . '</div>';\n\n    $html .= '<div class=\"panel-footer text-muted\">';\n    if (in_array('admin_news', $privileges)) {\n        $html .= '<div class=\"pull-right\">'\n            . button_glyph(\n                page_link_to('admin_news', ['action' => 'edit', 'id' => $news['ID']]),\n                'edit',\n                'btn-xs'\n            )\n            . '</div>';\n    }\n    $html .= '<span class=\"glyphicon glyphicon-time\"></span> ' . date('Y-m-d H:i', $news['Datum']) . '&emsp;';\n\n    $html .= User_Nick_render(User::find($news['UID']));\n    if ($page != 'news_comments') {\n        $html .= '&emsp;<a href=\"' . page_link_to('news_comments', ['nid' => $news['ID']]) . '\">'\n            . '<span class=\"glyphicon glyphicon-comment\"></span> '\n            . __('Comments') . ' &raquo;</a> '\n            . '<span class=\"badge\">'\n            . count(DB::select('SELECT `ID` FROM `NewsComments` WHERE `Refid`=?', [$news['ID']]))\n            . '</span>';\n    }\n    $html .= '</div>';\n    $html .= '</div>';\n    return $html;\n}\n\n/**\n * @return string\n */\nfunction user_news_comments()\n{\n    $user = auth()->user();\n    $request = request();\n\n    $html = '<div class=\"col-md-12\"><h1>' . user_news_comments_title() . '</h1>';\n    if (\n        $request->has('nid')\n        && preg_match('/^\\d{1,}$/', $request->input('nid'))\n        && count(DB::select('SELECT `ID` FROM `News` WHERE `ID`=? LIMIT 1', [$request->input('nid')])) > 0\n    ) {\n        $nid = $request->input('nid');\n        $news = DB::selectOne('SELECT * FROM `News` WHERE `ID`=? LIMIT 1', [$nid]);\n        if ($request->has('text')) {\n            $text = preg_replace(\n                \"/([^\\p{L}\\p{P}\\p{Z}\\p{N}\\n]{1,})/ui\",\n                '',\n                strip_tags($request->input('text'))\n            );\n            DB::insert('\n                    INSERT INTO `NewsComments` (`Refid`, `Datum`, `Text`, `UID`)\n                    VALUES (?, ?, ?, ?)\n                ',\n                [\n                    $nid,\n                    date('Y-m-d H:i:s'),\n                    $text,\n                    $user->id,\n                ]\n            );\n            engelsystem_log('Created news_comment: ' . $text);\n            $html .= success(__('Entry saved.'), true);\n        }\n\n        $html .= display_news($news);\n\n        $comments = DB::select(\n            'SELECT * FROM `NewsComments` WHERE `Refid`=? ORDER BY \\'ID\\'',\n            [$nid]\n        );\n        foreach ($comments as $comment) {\n            $user_source = User::find($comment['UID']);\n\n            $html .= '<div class=\"panel panel-default\">';\n            $html .= '<div class=\"panel-body\">' . nl2br(htmlspecialchars($comment['Text'])) . '</div>';\n            $html .= '<div class=\"panel-footer text-muted\">';\n            $html .= '<span class=\"glyphicon glyphicon-time\"></span> ' . $comment['Datum'] . '&emsp;';\n            $html .= User_Nick_render($user_source);\n            $html .= '</div>';\n            $html .= '</div>';\n        }\n\n        $html .= '<hr /><h2>' . __('New Comment:') . '</h2>';\n        $html .= form([\n            form_textarea('text', __('Message'), ''),\n            form_submit('submit', __('Save'))\n        ], page_link_to('news_comments', ['nid' => $news['ID']]));\n    } else {\n        $html .= __('Invalid request.');\n    }\n\n    return $html . '</div>';\n}\n\n/**\n * @return string\n */\nfunction user_news()\n{\n    global $privileges;\n    $user = auth()->user();\n    $display_news = config('display_news');\n    $request = request();\n\n    $html = '<div class=\"col-md-12\"><h1>' . news_title() . '</h1>' . msg();\n\n    $isMeeting = $request->postData('treffen');\n    if ($request->has('text') && $request->has('betreff') && in_array('admin_news', $privileges)) {\n        if (!$request->has('treffen')) {\n            $isMeeting = 0;\n        }\n\n        $text = $request->postData('text');\n        if (!in_array('admin_news_html', $privileges)) {\n            $text = strip_tags($text);\n        }\n\n        DB::insert('\n            INSERT INTO `News` (`Datum`, `Betreff`, `Text`, `UID`, `Treffen`)\n            VALUES (?, ?, ?, ?, ?)\n            ',\n            [\n                time(),\n                strip_tags($request->postData('betreff')),\n                $text,\n                $user->id,\n                $isMeeting,\n            ]\n        );\n        engelsystem_log('Created news: ' . $request->postData('betreff') . ', treffen: ' . $isMeeting);\n        success(__('Entry saved.'));\n        redirect(page_link_to('news'));\n    }\n\n    if (preg_match('/^\\d{1,}$/', $request->input('page', 0))) {\n        $page = $request->input('page', 0);\n    } else {\n        $page = 0;\n    }\n\n    $news = DB::select(sprintf('\n            SELECT *\n            FROM `News`\n            ORDER BY `Datum`\n            DESC LIMIT %u, %u\n        ',\n        $page * $display_news,\n        $display_news\n    ));\n    foreach ($news as $entry) {\n        $html .= display_news($entry);\n    }\n\n    $dis_rows = ceil(count(DB::select('SELECT `ID` FROM `News`')) / $display_news);\n    $html .= '<div class=\"text-center\">' . '<ul class=\"pagination\">';\n    for ($i = 0; $i < $dis_rows; $i++) {\n        if ($request->has('page') && $i == $request->input('page', 0)) {\n            $html .= '<li class=\"active\">';\n        } elseif (!$request->has('page') && $i == 0) {\n            $html .= '<li class=\"active\">';\n        } else {\n            $html .= '<li>';\n        }\n        $html .= '<a href=\"' . page_link_to('news', ['page' => $i]) . '\">' . ($i + 1) . '</a></li>';\n    }\n    $html .= '</ul></div>';\n\n    if (in_array('admin_news', $privileges)) {\n        $html .= '<hr />';\n        $html .= '<h2>' . __('Create news:') . '</h2>';\n\n        $html .= form([\n            form_text('betreff', __('Subject'), ''),\n            form_textarea('text', __('Message'), ''),\n            form_checkbox('treffen', __('Meeting'), false, 1),\n            form_submit('submit', __('Save'))\n        ]);\n    }\n    return $html . '</div>';\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction questions_title()\n{\n    return __('Ask the Heaven');\n}\n\n/**\n * @return string\n */\nfunction user_questions()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$request->has('action')) {\n        $open_questions = DB::select(\n            'SELECT * FROM `Questions` WHERE `AID` IS NULL AND `UID`=?',\n            [$user->id]\n        );\n\n        $answered_questions = DB::select(\n            'SELECT * FROM `Questions` WHERE NOT `AID` IS NULL AND `UID`=?',\n            [$user->id]\n        );\n        foreach ($answered_questions as &$question) {\n            $answer_user_source = User::find($question['AID']);\n            $question['answer_user'] = User_Nick_render($answer_user_source);\n        }\n\n        return Questions_view(\n            $open_questions,\n            $answered_questions,\n            page_link_to('user_questions', ['action' => 'ask'])\n        );\n    } else {\n        switch ($request->input('action')) {\n            case 'ask':\n                $question = strip_request_item_nl('question');\n                if ($question != '') {\n                    DB::insert('\n                        INSERT INTO `Questions` (`UID`, `Question`)\n                        VALUES (?, ?)\n                        ',\n                        [$user->id, $question]\n                    );\n\n                    success(__('You question was saved.'));\n                    redirect(page_link_to('user_questions'));\n                } else {\n                    return page_with_title(questions_title(), [\n                        error(__('Please enter a question!'), true)\n                    ]);\n                }\n                break;\n            case 'delete':\n                if ($request->has('id') && preg_match('/^\\d{1,11}$/', $request->input('id'))) {\n                    $question_id = $request->input('id');\n                } else {\n                    return error(__('Incomplete call, missing Question ID.'), true);\n                }\n\n                $question = DB::selectOne(\n                    'SELECT `UID` FROM `Questions` WHERE `QID`=? LIMIT 1',\n                    [$question_id]\n                );\n                if (!empty($question) && $question['UID'] == $user->id) {\n                    DB::delete(\n                        'DELETE FROM `Questions` WHERE `QID`=? LIMIT 1',\n                        [$question_id]\n                    );\n                    redirect(page_link_to('user_questions'));\n                } else {\n                    return page_with_title(questions_title(), [\n                        error(__('No question found.'), true)\n                    ]);\n                }\n                break;\n        }\n    }\n\n    return '';\n}\n", "<?php\n\nuse Carbon\\Carbon;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction settings_title()\n{\n    return __('Settings');\n}\n\n/**\n * Change user main attributes (name, dates, etc.)\n *\n * @param User  $user_source The user\n * @param bool  $enable_tshirt_size\n * @param array $tshirt_sizes\n * @return User\n */\nfunction user_settings_main($user_source, $enable_tshirt_size, $tshirt_sizes)\n{\n    $valid = true;\n    $request = request();\n\n    if ($request->has('mail')) {\n        $result = User_validate_mail($request->input('mail'));\n        $user_source->email = $result->getValue();\n        if (!$result->isValid()) {\n            $valid = false;\n            error(__('E-mail address is not correct.'));\n        }\n    } else {\n        $valid = false;\n        error(__('Please enter your e-mail.'));\n    }\n\n    $user_source->settings->email_shiftinfo = $request->has('email_shiftinfo');\n    $user_source->settings->email_human = $request->has('email_by_human_allowed');\n\n    if ($request->has('tshirt_size') && isset($tshirt_sizes[$request->input('tshirt_size')])) {\n        $user_source->personalData->shirt_size = $request->input('tshirt_size');\n    } elseif ($enable_tshirt_size) {\n        $valid = false;\n    }\n\n    if ($request->has('planned_arrival_date')) {\n        $tmp = parse_date('Y-m-d H:i', $request->input('planned_arrival_date') . ' 00:00');\n        $result = User_validate_planned_arrival_date($tmp);\n        $user_source->personalData->planned_arrival_date = Carbon::createFromTimestamp($result->getValue());\n        if (!$result->isValid()) {\n            $valid = false;\n            error(__('Please enter your planned date of arrival. It should be after the buildup start date and before teardown end date.'));\n        }\n    }\n\n    if ($request->has('planned_departure_date')) {\n        $tmp = parse_date('Y-m-d H:i', $request->input('planned_departure_date') . ' 00:00');\n        $plannedArrivalDate = $user_source->personalData->planned_arrival_date;\n        $result = User_validate_planned_departure_date(\n            $plannedArrivalDate ? $plannedArrivalDate->getTimestamp() : 0,\n            $tmp\n        );\n        $user_source->personalData->planned_departure_date = Carbon::createFromTimestamp($result->getValue());\n        if (!$result->isValid()) {\n            $valid = false;\n            error(__('Please enter your planned date of departure. It should be after your planned arrival date and after buildup start date and before teardown end date.'));\n        }\n    }\n\n    // Trivia\n    $user_source->personalData->last_name = strip_request_item('lastname', $user_source['Name']);\n    $user_source->personalData->first_name = strip_request_item('prename', $user_source['Vorname']);\n    if (strlen(strip_request_item('dect')) <= 5) {\n        $user_source->contact->dect = strip_request_item('dect', $user_source['DECT']);\n    } else {\n        $valid = false;\n        error(__('For dect numbers are only 5 digits allowed.'));\n    }\n    $user_source->contact->mobile = strip_request_item('mobile', $user_source['Handy']);\n\n    if ($valid) {\n        $user_source->save();\n        $user_source->contact->save();\n        $user_source->personalData->save();\n        $user_source->settings->save();\n\n        success(__('Settings saved.'));\n        redirect(page_link_to('user_settings'));\n    }\n\n    return $user_source;\n}\n\n/**\n * Change user password.\n *\n * @param User $user_source The user\n */\nfunction user_settings_password($user_source)\n{\n    $request = request();\n    if (\n        !$request->has('password')\n        || !verify_password($request->postData('password'), $user_source->password, $user_source->id)\n    ) {\n        error(__('-> not OK. Please try again.'));\n    } elseif (strlen($request->postData('new_password')) < config('min_password_length')) {\n        error(__('Your password is to short (please use at least 6 characters).'));\n    } elseif ($request->postData('new_password') != $request->postData('new_password2')) {\n        error(__('Your passwords don\\'t match.'));\n    } else {\n        set_password($user_source->id, $request->postData('new_password'));\n        success(__('Password saved.'));\n    }\n    redirect(page_link_to('user_settings'));\n}\n\n/**\n * Change user theme\n *\n * @param User  $user_source The user\n * @param array $themes      List of available themes\n * @return User\n */\nfunction user_settings_theme($user_source, $themes)\n{\n    $valid = true;\n    $request = request();\n\n    if ($request->has('theme') && isset($themes[$request->input('theme')])) {\n        $user_source->settings->theme = $request->input('theme');\n    } else {\n        $valid = false;\n    }\n\n    if ($valid) {\n        $user_source->settings->save();\n\n        success(__('Theme changed.'));\n        redirect(page_link_to('user_settings'));\n    }\n\n    return $user_source;\n}\n\n/**\n * Change use locale\n *\n * @param User  $user_source The user\n * @param array $locales     List of available locales\n * @return User\n */\nfunction user_settings_locale($user_source, $locales)\n{\n    $valid = true;\n    $request = request();\n    $session = session();\n\n    if ($request->has('language') && isset($locales[$request->input('language')])) {\n        $user_source->settings->language = $request->input('language');\n    } else {\n        $valid = false;\n    }\n\n    if ($valid) {\n        $user_source->settings->save();\n        $session->set('locale', $user_source->settings->language);\n\n        success('Language changed.');\n        redirect(page_link_to('user_settings'));\n    }\n\n    return $user_source;\n}\n\n/**\n * Main user settings page/controller\n *\n * @return string\n */\nfunction user_settings()\n{\n    $request = request();\n    $config = config();\n    $themes = config('available_themes');\n\n    $enable_tshirt_size = config('enable_tshirt_size');\n    $tshirt_sizes = config('tshirt_sizes');\n    $locales = config('locales');\n\n    $buildup_start_date = null;\n    $teardown_end_date = null;\n\n    if ($buildup = $config->get('buildup_start')) {\n        /** @var Carbon $buildup */\n        $buildup_start_date = $buildup->getTimestamp();\n    }\n\n    if ($teardown = $config->get('teardown_end')) {\n        /** @var Carbon $teardown */\n        $teardown_end_date = $teardown->getTimestamp();\n    }\n\n    $user_source = auth()->user();\n    if ($request->has('submit')) {\n        $user_source = user_settings_main($user_source, $enable_tshirt_size, $tshirt_sizes);\n    } elseif ($request->has('submit_password')) {\n        user_settings_password($user_source);\n    } elseif ($request->has('submit_theme')) {\n        $user_source = user_settings_theme($user_source, $themes);\n    } elseif ($request->has('submit_language')) {\n        $user_source = user_settings_locale($user_source, $locales);\n    }\n\n    return User_settings_view(\n        $user_source,\n        $locales,\n        $themes,\n        $buildup_start_date,\n        $teardown_end_date,\n        $enable_tshirt_size,\n        $tshirt_sizes\n    );\n}\n", "<?php\n// Methods to build a html form.\nuse Carbon\\Carbon;\n\n/**\n * Renders a hidden input\n *\n * @param string $name  Name of the input\n * @param string $value The value\n * @return string rendered html\n */\nfunction form_hidden($name, $value)\n{\n    return '<input type=\"hidden\" name=\"' . $name . '\" value=\"' . htmlspecialchars($value) . '\" />';\n}\n\n/**\n * Rendert ein Zahlenfeld mit Buttons zum verstellen\n *\n * @param string $name\n * @param string $label\n * @param string $value\n * @return string\n */\nfunction form_spinner($name, $label, $value)\n{\n    $value = htmlspecialchars($value);\n\n    return form_element($label, '\n      <div class=\"input-group\">\n        <input id=\"spinner-' . $name . '\" class=\"form-control\" name=\"' . $name . '\" value=\"' . $value . '\" />\n        <div class=\"input-group-btn\">\n          <button id=\"spinner-' . $name . '-down\" class=\"btn btn-default\" type=\"button\">\n            <span class=\"glyphicon glyphicon-minus\"></span>\n          </button>\n          <button id=\"spinner-' . $name . '-up\" class=\"btn btn-default\" type=\"button\">\n            <span class=\"glyphicon glyphicon-plus\"></span>\n          </button>\n        </div>\n      </div>\n      <script type=\"text/javascript\">\n        $(\\'#spinner-' . $name . '-down\\').click(function() {\n          var spinner = $(\\'#spinner-' . $name . '\\');\n          spinner.val(parseInt(spinner.val()) - 1);\n        });\n        $(\\'#spinner-' . $name . '-up\\').click(function() {\n          var spinner = $(\\'#spinner-' . $name . '\\');\n          spinner.val(parseInt(spinner.val()) + 1);\n        });\n      </script>\n      ');\n}\n\n/**\n * Render a bootstrap datepicker\n *\n * @param string $name       Name of the parameter\n * @param string $label      Label\n * @param int    $value      Unix Timestamp\n * @param string $start_date Earliest possible date\n * @param string $end_date\n * @return string HTML\n */\nfunction form_date($name, $label, $value, $start_date = '', $end_date = '')\n{\n    $dom_id = $name . '-date';\n    $value = ($value instanceof Carbon) ? $value->getTimestamp() : $value;\n    $value = is_numeric($value) ? date('Y-m-d', $value) : '';\n    $start_date = is_numeric($start_date) ? date('Y-m-d', $start_date) : '';\n    $end_date = is_numeric($end_date) ? date('Y-m-d', $end_date) : '';\n    $locale = $locale = session()->get('locale');\n    $shortLocale = substr($locale, 0, 2);\n\n    return form_element($label, '\n    <div class=\"input-group date\" id=\"' . $dom_id . '\">\n      <input type=\"date\" name=\"' . $name . '\" class=\"form-control\" value=\"' . htmlspecialchars($value) . '\">'\n        . '<span class=\"input-group-addon\">' . glyph('th') . '</span>\n    </div>\n    <script type=\"text/javascript\">\n\t\t\t$(function(){\n        $(\"#' . $dom_id . '\").datepicker({\n\t\t\t\t  language: \"' . $shortLocale . '\",\n          todayBtn: \"linked\",\n          format: \"yyyy-mm-dd\",\n          startDate: \"' . $start_date . '\",\n          endDate: \"' . $end_date . '\",\n          orientation: \"bottom\"\n\t\t\t  });\n      });\n    </script>\n    ', $dom_id);\n}\n\n/**\n * Rendert eine Liste von Checkboxen f\u00fcr ein Formular\n *\n * @param string $name     Die Namen der Checkboxen werden aus name_key gebildet\n * @param string $label    Die Beschriftung der Liste\n * @param array  $items    Array mit den einzelnen Checkboxen\n * @param array  $selected Array mit den Keys, die ausgew\u00e4hlt sind\n * @return string\n */\nfunction form_checkboxes($name, $label, $items, $selected)\n{\n    $html = form_element($label, '');\n    foreach ($items as $key => $item) {\n        $html .= form_checkbox($name . '_' . $key, $item, array_search($key, $selected) !== false);\n    }\n    return $html;\n}\n\n/**\n * Rendert eine Tabelle von Checkboxen f\u00fcr ein Formular\n *\n * @param string[] $names    Assoziatives Array mit Namen der Checkboxen als Keys und \u00dcberschriften als Values\n * @param string   $label    Die Beschriftung der gesamten Tabelle\n * @param string[] $items    Array mit den Beschriftungen der Zeilen\n * @param array[]  $selected Mehrdimensionales Array, wobei $selected[foo] ein Array der in der Datenreihe foo\n *                           markierten Checkboxen ist\n * @param array    $disabled Wie selected, nur dass die entsprechenden Checkboxen deaktiviert statt markiert sind\n * @return string\n */\nfunction form_multi_checkboxes($names, $label, $items, $selected, $disabled = [])\n{\n    $html = '<table><thead><tr>';\n    foreach ($names as $title) {\n        $html .= '<th>' . $title . '</th>';\n    }\n    $html .= '</tr></thead><tbody>';\n    foreach ($items as $key => $item) {\n        $html .= '<tr>';\n        $dom_id = '';\n        foreach ($names as $name => $title) {\n            $dom_id = $name . '_' . $key;\n            $sel = array_search($key, $selected[$name]) !== false ? ' checked=\"checked\"' : '';\n            if (!empty($disabled) && !empty($disabled[$name]) && array_search($key, $disabled[$name]) !== false) {\n                $sel .= ' disabled=\"disabled\"';\n            }\n            $html .= '<td style=\"text-align: center;\">'\n                . sprintf(\n                    '<input type=\"checkbox\" id=\"%s\" name=\"%s[]\" value=\"%s\" %s />',\n                    $dom_id,\n                    $name,\n                    $key,\n                    $sel\n                )\n                . '</td>';\n        }\n        $html .= '<td><label for=\"' . $dom_id . '\">' . $item . '</label></td></tr>';\n    }\n    $html .= '</tbody></table>';\n    return form_element($label, $html);\n}\n\n/**\n * Rendert eine Checkbox\n *\n * @param string $name\n * @param string $label\n * @param string $selected\n * @param string $value\n * @param string $html_id\n * @return string\n */\nfunction form_checkbox($name, $label, $selected, $value = 'checked', $html_id = null)\n{\n    if (is_null($html_id)) {\n        $html_id = $name;\n    }\n\n    return '<div class=\"checkbox\"><label>'\n        . '<input type=\"checkbox\" id=\"' . $html_id . '\" name=\"' . $name . '\" value=\"' . htmlspecialchars($value) . '\" '\n        . ($selected ? ' checked=\"checked\"' : '') . ' /> '\n        . $label\n        . '</label></div>';\n}\n\n/**\n * Rendert einen Radio\n *\n * @param string $name\n * @param string $label\n * @param string $selected\n * @param string $value\n * @return string\n */\nfunction form_radio($name, $label, $selected, $value)\n{\n    return '<div class=\"radio\">'\n        . '<label><input type=\"radio\" id=\"' . $name . '\" name=\"' . $name . '\" value=\"' . htmlspecialchars($value) . '\" '\n        . ($selected ? ' checked=\"checked\"' : '') . ' /> '\n        . $label\n        . '</label></div>';\n}\n\n/**\n * Rendert einen Infotext in das Formular\n *\n * @param string $label\n * @param string $text\n * @return string\n */\nfunction form_info($label, $text = '')\n{\n    if ($label == '') {\n        return '<span class=\"help-block\">' . glyph('info-sign') . $text . '</span>';\n    }\n    if ($text == '') {\n        return '<h4>' . $label . '</h4>';\n    }\n    return form_element($label, '<p class=\"form-control-static\">' . $text . '</p>', '');\n}\n\n/**\n * Rendert den Absenden-Button eines Formulars\n *\n * @param string $name\n * @param string $label\n * @return string\n */\nfunction form_submit($name, $label)\n{\n    return form_element(\n        '<button class=\"btn btn-primary\" type=\"submit\" name=\"' . $name . '\">' . $label . '</button>',\n        ''\n    );\n}\n\n/**\n * Rendert ein Formular-Textfeld\n *\n * @param string $name\n * @param string $label\n * @param string $value\n * @param bool   $disabled\n * @return string\n */\nfunction form_text($name, $label, $value, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        $label,\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"text\" name=\"' . $name\n        . '\" value=\"' . htmlspecialchars($value) . '\" ' . $disabled . '/>',\n        'form_' . $name\n    );\n}\n\n/**\n * Renders a text input with placeholder instead of label.\n *\n * @param String  $name        Input name\n * @param String  $placeholder Placeholder\n * @param String  $value       The value\n * @param Boolean $disabled    Is the field enabled?\n * @return string\n */\nfunction form_text_placeholder($name, $placeholder, $value, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element('',\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"text\" name=\"' . $name\n        . '\" value=\"' . htmlspecialchars($value) . '\" placeholder=\"' . $placeholder\n        . '\" ' . $disabled . '/>'\n    );\n}\n\n/**\n * Rendert ein Formular-Emailfeld\n *\n * @param string $name\n * @param string $label\n * @param string $value\n * @param bool   $disabled\n * @return string\n */\nfunction form_email($name, $label, $value, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        $label,\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"email\" name=\"' . $name . '\" value=\"'\n        . htmlspecialchars($value) . '\" ' . $disabled . '/>',\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Dateifeld\n *\n * @param string $name\n * @param string $label\n * @return string\n */\nfunction form_file($name, $label)\n{\n    return form_element(\n        $label,\n        sprintf('<input id=\"form_%1$s\" type=\"file\" name=\"%1$s\" />', $name),\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Passwortfeld\n *\n * @param string $name\n * @param string $label\n * @param bool   $disabled\n * @return string\n */\nfunction form_password($name, $label, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        $label,\n        sprintf(\n            '<input class=\"form-control\" id=\"form_%1$s\" type=\"password\" name=\"%1$s\" value=\"\"%s/>',\n            $name,\n            $disabled\n        ),\n        'form_' . $name\n    );\n}\n\n/**\n * Renders a password input with placeholder instead of label.\n *\n * @param string $name\n * @param string $placeholder\n * @param bool   $disabled\n * @return string\n */\nfunction form_password_placeholder($name, $placeholder, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        '',\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"password\" name=\"'\n        . $name . '\" value=\"\" placeholder=\"' . $placeholder . '\" ' . $disabled . '/>',\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Textfeld\n *\n * @param string $name\n * @param string $label\n * @param string $value\n * @param bool   $disabled\n * @return string\n */\nfunction form_textarea($name, $label, $value, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        $label,\n        '<textarea rows=\"5\" class=\"form-control\" id=\"form_' . $name . '\" name=\"'\n        . $name . '\" ' . $disabled . '>' . htmlspecialchars($value) . '</textarea>',\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Auswahlfeld\n *\n * @param string   $name\n * @param string   $label\n * @param string[] $values\n * @param string   $selected\n * @param string   $selectText\n * @return string\n */\nfunction form_select($name, $label, $values, $selected, $selectText = '')\n{\n    return form_element(\n        $label,\n        html_select_key('form_' . $name, $name, $values, $selected, $selectText),\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Element\n *\n * @param string $label\n * @param string $input\n * @param string $for\n * @return string\n */\nfunction form_element($label, $input, $for = '')\n{\n    if ($label == '') {\n        return '<div class=\"form-group\">' . $input . '</div>';\n    }\n\n    return '<div class=\"form-group\">' . '<label for=\"' . $for . '\">' . $label . '</label>' . $input . '</div>';\n}\n\n/**\n * Rendert ein Formular\n *\n * @param string[] $elements\n * @param string   $action\n * @return string\n */\nfunction form($elements, $action = '')\n{\n    return '<form action=\"' . $action . '\" enctype=\"multipart/form-data\" method=\"post\">'\n        . form_csrf()\n        . join($elements)\n        . '</form>';\n}\n\n/**\n * @return string\n */\nfunction form_csrf()\n{\n    return form_hidden('_token', session()->get('_token'));\n}\n\n/**\n * @param string   $name\n * @param String[] $options\n * @param string   $selected\n * @return string\n */\nfunction html_options($name, $options, $selected = '')\n{\n    $html = '';\n    foreach ($options as $value => $label) {\n        $html .= '<input type=\"radio\"' . ($value == $selected ? ' checked=\"checked\"' : '') . ' name=\"'\n            . $name . '\" value=\"' . $value . '\"> ' . $label;\n    }\n\n    return $html;\n}\n\n/**\n * @param string   $dom_id\n * @param string   $name\n * @param string[] $rows\n * @param string   $selected\n * @param string   $selectText\n * @return string\n */\nfunction html_select_key($dom_id, $name, $rows, $selected, $selectText = '')\n{\n    $html = '<select class=\"form-control\" id=\"' . $dom_id . '\" name=\"' . $name . '\">';\n    if (!empty($selectText)) {\n        $html .= '<option value=\"\">' . $selectText . '</option>';\n    }\n    foreach ($rows as $key => $row) {\n        if (($key == $selected) || ($row === $selected)) {\n            $html .= '<option value=\"' . $key . '\" selected=\"selected\">' . $row . '</option>';\n        } else {\n            $html .= '<option value=\"' . $key . '\">' . $row . '</option>';\n        }\n    }\n    $html .= '</select>';\n    return $html;\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\ShiftCalendarRenderer;\nuse Engelsystem\\ShiftsFilterRenderer;\n\n/**\n * AngelTypes\n */\n\n/**\n * Renders the angeltypes name as link.\n *\n * @param array $angeltype\n * @return string\n */\nfunction AngelType_name_render($angeltype)\n{\n    return '<a href=\"' . angeltype_link($angeltype['id']) . '\">'\n        . ($angeltype['restricted'] ? glyph('lock') : '') . $angeltype['name']\n        . '</a>';\n}\n\n/**\n * Render angeltype membership state\n *\n * @param array $user_angeltype UserAngelType and AngelType\n * @return string\n */\nfunction AngelType_render_membership($user_angeltype)\n{\n    if (!empty($user_angeltype['user_angeltype_id'])) {\n        if ($user_angeltype['restricted']) {\n            if (empty($user_angeltype['confirm_user_id'])) {\n                return glyph('lock') . __('Unconfirmed');\n            } elseif ($user_angeltype['supporter']) {\n                return glyph_bool(true) . __('Supporter');\n            }\n            return glyph_bool(true) . __('Member');\n        } elseif ($user_angeltype['supporter']) {\n            return glyph_bool(true) . __('Supporter');\n        }\n        return glyph_bool(true) . __('Member');\n    }\n    return glyph_bool(false);\n}\n\n/**\n * @param array $angeltype\n * @return string\n */\nfunction AngelType_delete_view($angeltype)\n{\n    return page_with_title(sprintf(__('Delete angeltype %s'), $angeltype['name']), [\n        info(sprintf(__('Do you want to delete angeltype %s?'), $angeltype['name']), true),\n        buttons([\n            button(page_link_to('angeltypes'), glyph('remove') . __('cancel')),\n            button(\n                page_link_to(\n                    'angeltypes',\n                    ['action' => 'delete', 'angeltype_id' => $angeltype['id'], 'confirmed' => 1]\n                ),\n                glyph('ok') . __('delete'),\n                'btn-danger'\n            )\n        ])\n    ]);\n}\n\n/**\n * Render angeltype edit form.\n *\n * @param array   $angeltype      The angeltype to edit\n * @param boolean $supporter_mode Is the user a supporter of this angeltype?\n * @return string\n */\nfunction AngelType_edit_view($angeltype, $supporter_mode)\n{\n    return page_with_title(sprintf(__('Edit %s'), $angeltype['name']), [\n        buttons([\n            button(page_link_to('angeltypes'), __('Angeltypes'), 'back')\n        ]),\n        msg(),\n        form([\n            $supporter_mode\n                ? form_info(__('Name'), $angeltype['name'])\n                : form_text('name', __('Name'), $angeltype['name']),\n            $supporter_mode\n                ? form_info(__('Restricted'), $angeltype['restricted'] ? __('Yes') : __('No'))\n                : form_checkbox('restricted', __('Restricted'), $angeltype['restricted']),\n            form_info(\n                '',\n                __('Restricted angel types can only be used by an angel if enabled by a supporter (double opt-in).')\n            ),\n            $supporter_mode\n                ? form_info(__('No Self Sign Up'), $angeltype['no_self_signup'] ? __('Yes') : __('No'))\n                : form_checkbox('no_self_signup', __('No Self Sign Up'), $angeltype['no_self_signup']),\n            $supporter_mode\n                ? form_info(__('Requires driver license'),\n                $angeltype['requires_driver_license']\n                    ? __('Yes')\n                    : __('No'))\n                : form_checkbox(\n                'requires_driver_license',\n                __('Requires driver license'),\n                $angeltype['requires_driver_license']),\n            $supporter_mode\n                ? form_info(__('Show on dashboard'), $angeltype['show_on_dashboard'] ? __('Yes') : __('No'))\n                : form_checkbox('show_on_dashboard', __('Show on dashboard'), $angeltype['show_on_dashboard']),\n            form_textarea('description', __('Description'), $angeltype['description']),\n            form_info('', __('Please use markdown for the description.')),\n            heading(__('Contact'), 3),\n            form_info(\n                '',\n                __('Primary contact person/desk for user questions.')\n            ),\n            form_text('contact_name', __('Name'), $angeltype['contact_name']),\n            form_text('contact_dect', __('DECT'), $angeltype['contact_dect']),\n            form_text('contact_email', __('E-Mail'), $angeltype['contact_email']),\n            form_submit('submit', __('Save'))\n        ])\n    ]);\n}\n\n/**\n * Renders the buttons for the angeltype view.\n *\n * @param array      $angeltype\n * @param array|null $user_angeltype\n * @param bool       $admin_angeltypes\n * @param bool       $supporter\n * @param array|null $user_driver_license\n * @param User|null  $user\n * @return string\n */\nfunction AngelType_view_buttons($angeltype, $user_angeltype, $admin_angeltypes, $supporter, $user_driver_license, $user)\n{\n    $buttons = [\n        button(page_link_to('angeltypes'), __('Angeltypes'), 'back')\n    ];\n\n    if ($angeltype['requires_driver_license']) {\n        $buttons[] = button(\n            user_driver_license_edit_link($user),\n            glyph('road') . __('my driving license')\n        );\n    }\n\n    if (is_null($user_angeltype)) {\n        $buttons[] = button(\n            page_link_to('user_angeltypes', ['action' => 'add', 'angeltype_id' => $angeltype['id']]),\n            __('join'),\n            'add'\n        );\n    } else {\n        if ($angeltype['requires_driver_license'] && empty($user_driver_license)) {\n            error(__('This angeltype requires a driver license. Please enter your driver license information!'));\n        }\n\n        if ($angeltype['restricted'] && empty($user_angeltype['confirm_user_id'])) {\n            error(sprintf(\n                __('You are unconfirmed for this angeltype. Please go to the introduction for %s to get confirmed.'),\n                $angeltype['name']\n            ));\n        }\n        $buttons[] = button(\n            page_link_to('user_angeltypes', ['action' => 'delete', 'user_angeltype_id' => $user_angeltype['id']]),\n            __('leave')\n        );\n    }\n\n    if ($admin_angeltypes || $supporter) {\n        $buttons[] = button(\n            page_link_to('angeltypes', ['action' => 'edit', 'angeltype_id' => $angeltype['id']]),\n            __('edit'),\n            'edit'\n        );\n    }\n    if ($admin_angeltypes) {\n        $buttons[] = button(\n            page_link_to('angeltypes', ['action' => 'delete', 'angeltype_id' => $angeltype['id']]),\n            __('delete'),\n            'delete'\n        );\n    }\n\n    return buttons($buttons);\n}\n\n/**\n * Renders and sorts the members of an angeltype into supporters, members and unconfirmed members.\n *\n * @param array  $angeltype\n * @param User[] $members\n * @param bool   $admin_user_angeltypes\n * @param bool   $admin_angeltypes\n * @return array [supporters, members, unconfirmed members]\n */\nfunction AngelType_view_members($angeltype, $members, $admin_user_angeltypes, $admin_angeltypes)\n{\n    $supporters = [];\n    $members_confirmed = [];\n    $members_unconfirmed = [];\n    foreach ($members as $member) {\n        $member->name = User_Nick_render($member);\n        $member['dect'] = $member->contact->dect;\n        if ($angeltype['requires_driver_license']) {\n            $member['wants_to_drive'] = glyph_bool($member['wants_to_drive']);\n            $member['has_car'] = glyph_bool($member['has_car']);\n            $member['has_license_car'] = glyph_bool($member['has_license_car']);\n            $member['has_license_3_5t_transporter'] = glyph_bool($member['has_license_3_5t_transporter']);\n            $member['has_license_7_5t_truck'] = glyph_bool($member['has_license_7_5t_truck']);\n            $member['has_license_12_5t_truck'] = glyph_bool($member['has_license_12_5t_truck']);\n            $member['has_license_forklift'] = glyph_bool($member['has_license_forklift']);\n        }\n\n        if ($angeltype['restricted'] && empty($member['confirm_user_id'])) {\n            $member['actions'] = table_buttons([\n                button(\n                    page_link_to(\n                        'user_angeltypes',\n                        ['action' => 'confirm', 'user_angeltype_id' => $member['user_angeltype_id']]\n                    ),\n                    __('confirm'),\n                    'btn-xs'\n                ),\n                button(\n                    page_link_to(\n                        'user_angeltypes',\n                        ['action' => 'delete', 'user_angeltype_id' => $member['user_angeltype_id']]\n                    ),\n                    __('deny'),\n                    'btn-xs'\n                )\n            ]);\n            $members_unconfirmed[] = $member;\n        } elseif ($member['supporter']) {\n            if ($admin_angeltypes) {\n                $member['actions'] = table_buttons([\n                    button(\n                        page_link_to('user_angeltypes', [\n                            'action'            => 'update',\n                            'user_angeltype_id' => $member['user_angeltype_id'],\n                            'supporter'         => 0\n                        ]),\n                        __('Remove supporter rights'),\n                        'btn-xs'\n                    )\n                ]);\n            } else {\n                $member['actions'] = '';\n            }\n            $supporters[] = $member;\n        } else {\n            if ($admin_user_angeltypes) {\n                $member['actions'] = table_buttons([\n                    $admin_angeltypes\n                        ? button(page_link_to('user_angeltypes', [\n                        'action'            => 'update',\n                        'user_angeltype_id' => $member['user_angeltype_id'],\n                        'supporter'         => 1\n                    ]),\n                        __('Add supporter rights'), 'btn-xs')\n                        : '',\n                    button(\n                        page_link_to('user_angeltypes', [\n                            'action'            => 'delete',\n                            'user_angeltype_id' => $member['user_angeltype_id']\n                        ]),\n                        __('remove'),\n                        'btn-xs'\n                    )\n                ]);\n            }\n            $members_confirmed[] = $member;\n        }\n    }\n\n    return [\n        $supporters,\n        $members_confirmed,\n        $members_unconfirmed\n    ];\n}\n\n/**\n * Creates the needed member table headers according to given rights and settings from the angeltype.\n *\n * @param array $angeltype\n * @param bool  $supporter\n * @param bool  $admin_angeltypes\n * @return array\n */\nfunction AngelType_view_table_headers($angeltype, $supporter, $admin_angeltypes)\n{\n    if ($angeltype['requires_driver_license'] && ($supporter || $admin_angeltypes)) {\n        return [\n            'name'                         => __('Nick'),\n            'dect'                         => __('DECT'),\n            'wants_to_drive'               => __('Driver'),\n            'has_car'                      => __('Has car'),\n            'has_license_car'              => __('Car'),\n            'has_license_3_5t_transporter' => __('3,5t Transporter'),\n            'has_license_7_5t_truck'       => __('7,5t Truck'),\n            'has_license_12_5t_truck'      => __('12,5t Truck'),\n            'has_license_forklift'         => __('Forklift'),\n            'actions'                      => ''\n        ];\n    }\n    return [\n        'name'    => __('Nick'),\n        'dect'    => __('DECT'),\n        'actions' => ''\n    ];\n}\n\n/**\n * Render an angeltype page containing the member lists.\n *\n * @param array                 $angeltype\n * @param User[]                $members\n * @param array                 $user_angeltype\n * @param bool                  $admin_user_angeltypes\n * @param bool                  $admin_angeltypes\n * @param bool                  $supporter\n * @param array                 $user_driver_license\n * @param User                  $user\n * @param ShiftsFilterRenderer  $shiftsFilterRenderer\n * @param ShiftCalendarRenderer $shiftCalendarRenderer\n * @param int                   $tab The selected tab\n * @return string\n */\nfunction AngelType_view(\n    $angeltype,\n    $members,\n    $user_angeltype,\n    $admin_user_angeltypes,\n    $admin_angeltypes,\n    $supporter,\n    $user_driver_license,\n    $user,\n    ShiftsFilterRenderer $shiftsFilterRenderer,\n    ShiftCalendarRenderer $shiftCalendarRenderer,\n    $tab\n) {\n    return page_with_title(sprintf(__('Team %s'), $angeltype['name']), [\n        AngelType_view_buttons($angeltype, $user_angeltype, $admin_angeltypes, $supporter, $user_driver_license, $user),\n        msg(),\n        tabs([\n            __('Info')   => AngelType_view_info(\n                $angeltype,\n                $members,\n                $admin_user_angeltypes,\n                $admin_angeltypes,\n                $supporter\n            ),\n            __('Shifts') => AngelType_view_shifts(\n                $angeltype,\n                $shiftsFilterRenderer,\n                $shiftCalendarRenderer\n            )\n        ], $tab)\n    ]);\n}\n\n/**\n * @param array                 $angeltype\n * @param ShiftsFilterRenderer  $shiftsFilterRenderer\n * @param ShiftCalendarRenderer $shiftCalendarRenderer\n * @return string HTML\n */\nfunction AngelType_view_shifts($angeltype, $shiftsFilterRenderer, $shiftCalendarRenderer)\n{\n    $shifts = $shiftsFilterRenderer->render(page_link_to('angeltypes', [\n        'action'       => 'view',\n        'angeltype_id' => $angeltype['id']\n    ]));\n    $shifts .= $shiftCalendarRenderer->render();\n\n    return div('first', $shifts);\n}\n\n/**\n * @param array  $angeltype\n * @param User[] $members\n * @param bool   $admin_user_angeltypes\n * @param bool   $admin_angeltypes\n * @param bool   $supporter\n * @return string HTML\n */\nfunction AngelType_view_info(\n    $angeltype,\n    $members,\n    $admin_user_angeltypes,\n    $admin_angeltypes,\n    $supporter\n) {\n    $info = [];\n    if (AngelType_has_contact_info($angeltype)) {\n        $info[] = AngelTypes_render_contact_info($angeltype);\n    }\n\n    $info[] = '<h3>' . __('Description') . '</h3>';\n    $parsedown = new Parsedown();\n    if ($angeltype['description'] != '') {\n        $info[] = '<div class=\"well\">' . $parsedown->parse($angeltype['description']) . '</div>';\n    }\n\n    list($supporters, $members_confirmed, $members_unconfirmed) = AngelType_view_members(\n        $angeltype,\n        $members,\n        $admin_user_angeltypes,\n        $admin_angeltypes\n    );\n    $table_headers = AngelType_view_table_headers($angeltype, $supporter, $admin_angeltypes);\n\n    if (count($supporters) > 0) {\n        $info[] = '<h3>' . __('Supporters') . '</h3>';\n        $info[] = table($table_headers, $supporters);\n    }\n\n    if (count($members_confirmed) > 0) {\n        $members_confirmed[] = [\n            'name'    => __('Sum'),\n            'dect'    => count($members_confirmed),\n            'actions' => ''\n        ];\n    }\n\n    if (count($members_unconfirmed) > 0) {\n        $members_unconfirmed[] = [\n            'name'    => __('Sum'),\n            'dect'    => count($members_unconfirmed),\n            'actions' => ''\n        ];\n    }\n\n    $info[] = '<h3>' . __('Members') . '</h3>';\n    if ($admin_user_angeltypes) {\n        $info[] = buttons([\n            button(\n                page_link_to(\n                    'user_angeltypes',\n                    ['action' => 'add', 'angeltype_id' => $angeltype['id']]\n                ),\n                __('Add'),\n                'add'\n            )\n        ]);\n    }\n    $info[] = table($table_headers, $members_confirmed);\n\n    if ($admin_user_angeltypes && $angeltype['restricted'] && count($members_unconfirmed) > 0) {\n        $info[] = '<h3>' . __('Unconfirmed') . '</h3>';\n        $info[] = buttons([\n            button(\n                page_link_to('user_angeltypes', ['action' => 'confirm_all', 'angeltype_id' => $angeltype['id']]),\n                glyph('ok') . __('confirm all')\n            ),\n            button(\n                page_link_to('user_angeltypes', ['action' => 'delete_all', 'angeltype_id' => $angeltype['id']]),\n                glyph('remove') . __('deny all')\n            )\n        ]);\n        $info[] = table($table_headers, $members_unconfirmed);\n    }\n\n    return join($info);\n}\n\n/**\n * Renders the contact info\n *\n * @param array $angeltype\n * @return string HTML\n */\nfunction AngelTypes_render_contact_info($angeltype)\n{\n    return heading(__('Contact'), 3) . description([\n            __('Name')   => $angeltype['contact_name'],\n            __('DECT')   => $angeltype['contact_dect'],\n            __('E-Mail') => $angeltype['contact_email']\n        ]);\n}\n\n/**\n * Display the list of angeltypes.\n *\n * @param array $angeltypes\n * @param bool  $admin_angeltypes\n * @return string\n */\nfunction AngelTypes_list_view($angeltypes, $admin_angeltypes)\n{\n    return page_with_title(angeltypes_title(), [\n        msg(),\n        buttons([\n            $admin_angeltypes\n                ? button(page_link_to('angeltypes', ['action' => 'edit']), __('New angeltype'), 'add')\n                : '',\n            button(page_link_to('angeltypes', ['action' => 'about']), __('Teams/Job description'))\n        ]),\n        table([\n            'name'           => __('Name'),\n            'restricted'     => glyph('lock') . __('Restricted'),\n            'no_self_signup' => glyph('share') . __('Self Sign Up Allowed'),\n            'membership'     => __('Membership'),\n            'actions'        => ''\n        ], $angeltypes)\n    ]);\n}\n\n/**\n * Renders the about info for an angeltype.\n *\n * @param array $angeltype\n * @return string\n */\nfunction AngelTypes_about_view_angeltype($angeltype)\n{\n    $parsedown = new Parsedown();\n\n    $html = '<h2>' . $angeltype['name'] . '</h2>';\n\n    if (AngelType_has_contact_info($angeltype)) {\n        $html .= AngelTypes_render_contact_info($angeltype);\n    }\n\n    if (isset($angeltype['user_angeltype_id'])) {\n        $buttons = [];\n        if (!empty($angeltype['user_angeltype_id'])) {\n            $buttons[] = button(\n                page_link_to(\n                    'user_angeltypes',\n                    ['action' => 'delete', 'user_angeltype_id' => $angeltype['user_angeltype_id']]\n                ),\n                __('leave')\n            );\n        } else {\n            $buttons[] = button(\n                page_link_to('user_angeltypes', ['action' => 'add', 'angeltype_id' => $angeltype['id']]),\n                __('join'),\n                'add'\n            );\n        }\n        $html .= buttons($buttons);\n    }\n\n    if ($angeltype['restricted']) {\n        $html .= info(\n            __('This angeltype is restricted by double-opt-in by a team supporter. Please show up at the according introduction meetings.'),\n            true\n        );\n    }\n    if ($angeltype['description'] != '') {\n        $html .= '<div class=\"well\">' . $parsedown->parse($angeltype['description']) . '</div>';\n    }\n    $html .= '<hr />';\n\n    return $html;\n}\n\n/**\n * Renders a site that contains every angeltype and its description, basically as an overview of the needed help types.\n *\n * @param array[] $angeltypes\n * @param bool    $user_logged_in\n * @return string\n */\nfunction AngelTypes_about_view($angeltypes, $user_logged_in)\n{\n    global $privileges;\n\n    $buttons = [];\n\n    if ($user_logged_in) {\n        $buttons[] = button(page_link_to('angeltypes'), angeltypes_title(), 'back');\n    } else {\n        if (in_array('register', $privileges) && config('registration_enabled')) {\n            $buttons[] = button(page_link_to('register'), register_title());\n        }\n\n        $buttons[] = button(page_link_to('login'), login_title());\n    }\n\n    $faqUrl = config('faq_url');\n    if (!empty($faqUrl)) {\n        $buttons[] = button($faqUrl, __('FAQ'), 'btn-primary');\n    }\n\n    $content = [\n        buttons($buttons),\n        '<p>' . __('Here is the list of teams and their tasks. If you have questions, read the FAQ.') . '</p>',\n        '<hr />'\n    ];\n    foreach ($angeltypes as $angeltype) {\n        $content[] = AngelTypes_about_view_angeltype($angeltype);\n    }\n\n    return page_with_title(__('Teams/Job description'), $content);\n}\n", "<?php\n\n/**\n * @param array[] $open_questions\n * @param array[] $answered_questions\n * @param string  $ask_action\n * @return string\n */\nfunction Questions_view($open_questions, $answered_questions, $ask_action)\n{\n    foreach ($open_questions as &$question) {\n        $question['actions'] = '<a href=\"'\n            . page_link_to('user_questions', ['action' => 'delete', 'id' => $question['QID']])\n            . '\">'\n            . __('delete')\n            . '</a>';\n        $question['Question'] = str_replace(\"\\n\", '<br />', $question['Question']);\n    }\n\n    foreach ($answered_questions as &$question) {\n        $question['Question'] = str_replace(\"\\n\", '<br />', $question['Question']);\n        $question['Answer'] = str_replace(\"\\n\", '<br />', $question['Answer']);\n        $question['actions'] = '<a href=\"'\n            . page_link_to('user_questions', ['action' => 'delete', 'id' => $question['QID']])\n            . '\">'\n            . __('delete')\n            . '</a>';\n    }\n\n    return page_with_title(questions_title(), [\n        msg(),\n        heading(__('Open questions'), 2),\n        table([\n            'Question' => __('Question'),\n            'actions'  => ''\n        ], $open_questions),\n        heading(__('Answered questions'), 2),\n        table([\n            'Question'    => __('Question'),\n            'answer_user' => __('Answered by'),\n            'Answer'      => __('Answer'),\n            'actions'     => ''\n        ], $answered_questions),\n        heading(__('Ask the Heaven'), 2),\n        form([\n            form_textarea('question', __('Your Question:'), ''),\n            form_submit('submit', __('Save'))\n        ], $ask_action)\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * Sign off from an user from a shift with admin permissions, asking for ack.\n *\n * @param array $shiftEntry\n * @param array $shift\n * @param array $angeltype\n * @param User  $signoff_user\n *\n * @return string HTML\n */\nfunction ShiftEntry_delete_view_admin($shiftEntry, $shift, $angeltype, $signoff_user)\n{\n    return page_with_title(ShiftEntry_delete_title(), [\n        info(sprintf(\n            __('Do you want to sign off %s from shift %s from %s to %s as %s?'),\n            User_Nick_render($signoff_user),\n            $shift['name'],\n            date('Y-m-d H:i', $shift['start']),\n            date('Y-m-d H:i', $shift['end']),\n            $angeltype['name']\n        ), true),\n        buttons([\n            button(user_link($signoff_user->id), glyph('remove') . __('cancel')),\n            button(shift_entry_delete_link($shiftEntry, [\n                'continue' => 1\n            ]), glyph('ok') . __('delete'), 'btn-danger')\n        ])\n    ]);\n}\n\n/**\n * Sign off from a shift, asking for ack.\n *\n * @param array $shiftEntry\n * @param array $shift\n * @param array $angeltype\n * @param int   $signoff_user_id\n *\n * @return string HTML\n */\nfunction ShiftEntry_delete_view($shiftEntry, $shift, $angeltype, $signoff_user_id)\n{\n    return page_with_title(ShiftEntry_delete_title(), [\n        info(sprintf(\n            __('Do you want to sign off from your shift %s from %s to %s as %s?'),\n            $shift['name'],\n            date('Y-m-d H:i', $shift['start']),\n            date('Y-m-d H:i', $shift['end']),\n            $angeltype['name']\n        ), true),\n        buttons([\n            button(user_link($signoff_user_id), glyph('remove') . __('cancel')),\n            button(shift_entry_delete_link($shiftEntry, [\n                'continue' => 1\n            ]), glyph('ok') . __('delete'), 'btn-danger')\n        ])\n    ]);\n}\n\n/**\n * Title for deleting a shift entry.\n */\nfunction ShiftEntry_delete_title()\n{\n    return __('Shift sign off');\n}\n\n/**\n * Admin puts user into shift.\n *\n * @param array $shift\n * @param array $room\n * @param array $angeltype\n * @param array $angeltypes_select\n * @param User  $signup_user\n * @param array $users_select\n * @return string\n */\nfunction ShiftEntry_create_view_admin($shift, $room, $angeltype, $angeltypes_select, $signup_user, $users_select)\n{\n    return page_with_title(\n        ShiftEntry_create_title() . ': ' . $shift['name']\n        . ' <small class=\"moment-countdown\" data-timestamp=\"' . $shift['start'] . '\">%c</small>',\n        [\n            Shift_view_header($shift, $room),\n            info(__('Do you want to sign up the following user for this shift?'), true),\n            form([\n                form_select('angeltype_id', __('Angeltype'), $angeltypes_select, $angeltype['id']),\n                form_select('user_id', __('User'), $users_select, $signup_user->id),\n                form_submit('submit', glyph('ok') . __('Save'))\n            ])\n        ]);\n}\n\n/**\n * Supporter puts user into shift.\n *\n * @param array $shift\n * @param array $room\n * @param array $angeltype\n * @param User  $signup_user\n * @param array $users_select\n * @return string\n */\nfunction ShiftEntry_create_view_supporter($shift, $room, $angeltype, $signup_user, $users_select)\n{\n    return page_with_title(ShiftEntry_create_title() . ': ' . $shift['name']\n        . ' <small class=\"moment-countdown\" data-timestamp=\"' . $shift['start'] . '\">%c</small>',\n        [\n            Shift_view_header($shift, $room),\n            info(sprintf(__('Do you want to sign up the following user for this shift as %s?'),\n                AngelType_name_render($angeltype)), true),\n            form([\n                form_select('user_id', __('User'), $users_select, $signup_user->id),\n                form_submit('submit', glyph('ok') . __('Save'))\n            ])\n        ]);\n}\n\n/**\n * User joining a shift.\n *\n * @param array  $shift\n * @param array  $room\n * @param array  $angeltype\n * @param string $comment\n * @return string\n */\nfunction ShiftEntry_create_view_user($shift, $room, $angeltype, $comment)\n{\n    return page_with_title(ShiftEntry_create_title() . ': ' . $shift['name']\n        . ' <small class=\"moment-countdown\" data-timestamp=\"' . $shift['start'] . '\">%c</small>',\n        [\n            Shift_view_header($shift, $room),\n            info(sprintf(__('Do you want to sign up for this shift as %s?'), AngelType_name_render($angeltype)), true),\n            form([\n                form_textarea('comment', __('Comment (for your eyes only):'), $comment),\n                form_submit('submit', glyph('ok') . __('Save'))\n            ])\n        ]);\n}\n\n/**\n * Title for creating a shift entry.\n */\nfunction ShiftEntry_create_title()\n{\n    return __('Shift signup');\n}\n\n/**\n * Display form for adding/editing a shift entry.\n *\n * @param string $angel\n * @param string $date\n * @param string $location\n * @param string $title\n * @param string $type\n * @param string $comment\n * @param bool   $freeloaded\n * @param string $freeload_comment\n * @param bool   $user_admin_shifts\n * @return string\n */\nfunction ShiftEntry_edit_view(\n    $angel,\n    $date,\n    $location,\n    $title,\n    $type,\n    $comment,\n    $freeloaded,\n    $freeload_comment,\n    $user_admin_shifts = false\n) {\n    $freeload_form = [];\n    if ($user_admin_shifts) {\n        $freeload_form = [\n            form_checkbox('freeloaded', __('Freeloaded'), $freeloaded),\n            form_textarea(\n                'freeload_comment',\n                __('Freeload comment (Only for shift coordination):'),\n                $freeload_comment\n            )\n        ];\n    }\n    return page_with_title(__('Edit shift entry'), [\n        msg(),\n        form([\n            form_info(__('Angel:'), $angel),\n            form_info(__('Date, Duration:'), $date),\n            form_info(__('Location:'), $location),\n            form_info(__('Title:'), $title),\n            form_info(__('Type:'), $type),\n            form_textarea('comment', __('Comment (for your eyes only):'), $comment),\n            join('', $freeload_form),\n            form_submit('submit', __('Save'))\n        ])\n    ]);\n}\n", "<?php\n\n/**\n * @param array $shifttype\n * @return string\n */\nfunction ShiftType_name_render($shifttype)\n{\n    global $privileges;\n    if (in_array('shifttypes', $privileges)) {\n        return '<a href=\"' . shifttype_link($shifttype) . '\">' . $shifttype['name'] . '</a>';\n    }\n    return $shifttype['name'];\n}\n\n/**\n * @param array $shifttype\n * @return string\n */\nfunction ShiftType_delete_view($shifttype)\n{\n    return page_with_title(sprintf(__('Delete shifttype %s'), $shifttype['name']), [\n        info(sprintf(__('Do you want to delete shifttype %s?'), $shifttype['name']), true),\n        buttons([\n            button(page_link_to('shifttypes'), glyph('remove') . __('cancel')),\n            button(\n                page_link_to(\n                    'shifttypes',\n                    ['action' => 'delete', 'shifttype_id' => $shifttype['id'], 'confirmed' => 1]\n                ),\n                glyph('ok') . __('delete'),\n                'btn-danger'\n            )\n        ])\n    ]);\n}\n\n/**\n * @param string   $name\n * @param int      $angeltype_id\n * @param array[]  $angeltypes\n * @param string   $description\n * @param int|bool $shifttype_id\n * @return string\n */\nfunction ShiftType_edit_view($name, $angeltype_id, $angeltypes, $description, $shifttype_id)\n{\n    $angeltypes_select = [\n        '' => __('All')\n    ];\n    foreach ($angeltypes as $angeltype) {\n        $angeltypes_select[$angeltype['id']] = $angeltype['name'];\n    }\n\n    return page_with_title($shifttype_id ? __('Edit shifttype') : __('Create shifttype'), [\n        msg(),\n        buttons([\n            button(page_link_to('shifttypes'), shifttypes_title(), 'back')\n        ]),\n        form([\n            form_text('name', __('Name'), $name),\n            form_select('angeltype_id', __('Angeltype'), $angeltypes_select, $angeltype_id),\n            form_textarea('description', __('Description'), $description),\n            form_info('', __('Please use markdown for the description.')),\n            form_submit('submit', __('Save'))\n        ])\n    ]);\n}\n\n/**\n * @param array $shifttype\n * @param array $angeltype\n * @return string\n */\nfunction ShiftType_view($shifttype, $angeltype)\n{\n    $parsedown = new Parsedown();\n    $title = $shifttype['name'];\n    if ($angeltype) {\n        $title .= ' <small>' . sprintf(__('for team %s'), $angeltype['name']) . '</small>';\n    }\n    return page_with_title($title, [\n        msg(),\n        buttons([\n            button(page_link_to('shifttypes'), shifttypes_title(), 'back'),\n            $angeltype ? button(\n                page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]),\n                $angeltype['name']\n            ) : '',\n            button(\n                page_link_to('shifttypes', ['action' => 'edit', 'shifttype_id' => $shifttype['id']]),\n                __('edit'),\n                'edit'\n            ),\n            button(\n                page_link_to('shifttypes', ['action' => 'delete', 'shifttype_id' => $shifttype['id']]),\n                __('delete'),\n                'delete'\n            )\n        ]),\n        heading(__('Description'), 2),\n        $parsedown->parse($shifttype['description'])\n    ]);\n}\n\n/**\n * @param array[] $shifttypes\n * @return string\n */\nfunction ShiftTypes_list_view($shifttypes)\n{\n    foreach ($shifttypes as &$shifttype) {\n        $shifttype['name'] = '<a href=\"'\n            . page_link_to('shifttypes', ['action' => 'view', 'shifttype_id' => $shifttype['id']])\n            . '\">'\n            . $shifttype['name']\n            . '</a>';\n        $shifttype['actions'] = table_buttons([\n            button(\n                page_link_to(\n                    'shifttypes',\n                    ['action' => 'edit', 'shifttype_id' => $shifttype['id']]\n                ),\n                __('edit'),\n                'btn-xs'\n            ),\n            button(\n                page_link_to('shifttypes', ['action' => 'delete', 'shifttype_id' => $shifttype['id']]),\n                __('delete'),\n                'btn-xs'\n            )\n        ]);\n    }\n\n    return page_with_title(shifttypes_title(), [\n        msg(),\n        buttons([\n            button(page_link_to('shifttypes', ['action' => 'edit']), __('New shifttype'), 'add')\n        ]),\n        table([\n            'name'    => __('Name'),\n            'actions' => ''\n        ], $shifttypes)\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @param array $user_angeltype\n * @param User  $user\n * @param array $angeltype\n * @param bool  $supporter\n * @return string\n */\nfunction UserAngelType_update_view($user_angeltype, $user, $angeltype, $supporter)\n{\n    return page_with_title($supporter ? __('Add supporter rights') : __('Remove supporter rights'), [\n        msg(),\n        info(sprintf(\n            $supporter\n                ? __('Do you really want to add supporter rights for %s to %s?')\n                : __('Do you really want to remove supporter rights for %s from %s?'),\n            $angeltype['name'],\n            User_Nick_render($user)\n        ), true),\n        buttons([\n            button(\n                page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]),\n                glyph('remove') . __('cancel')\n            ),\n            button(\n                page_link_to('user_angeltypes', [\n                    'action'            => 'update',\n                    'user_angeltype_id' => $user_angeltype['id'],\n                    'supporter'         => ($supporter ? '1' : '0'),\n                    'confirmed'         => 1,\n                ]),\n                glyph('ok') . __('yes'),\n                'btn-primary'\n            )\n        ])\n    ]);\n}\n\n/**\n * @param array $angeltype\n * @return string\n */\nfunction UserAngelTypes_delete_all_view($angeltype)\n{\n    return page_with_title(__('Deny all users'), [\n        msg(),\n        info(sprintf(__('Do you really want to deny all users for %s?'), $angeltype['name']), true),\n        buttons([\n            button(\n                page_link_to(\n                    'angeltypes',\n                    ['action' => 'view', 'angeltype_id' => $angeltype['id']]\n                ),\n                glyph('remove') . __('cancel')\n            ),\n            button(\n                page_link_to(\n                    'user_angeltypes',\n                    ['action' => 'delete_all', 'angeltype_id' => $angeltype['id'], 'confirmed' => 1]\n                ),\n                glyph('ok') . __('yes'),\n                'btn-primary'\n            )\n        ])\n    ]);\n}\n\n/**\n * @param array $angeltype\n * @return string\n */\nfunction UserAngelTypes_confirm_all_view($angeltype)\n{\n    return page_with_title(__('Confirm all users'), [\n        msg(),\n        info(sprintf(__('Do you really want to confirm all users for %s?'), $angeltype['name']), true),\n        buttons([\n            button(angeltype_link($angeltype['id']), glyph('remove') . __('cancel')),\n            button(\n                page_link_to('user_angeltypes',\n                    ['action' => 'confirm_all', 'angeltype_id' => $angeltype['id'], 'confirmed' => 1]),\n                glyph('ok') . __('yes'),\n                'btn-primary'\n            )\n        ])\n    ]);\n}\n\n/**\n * @param array $user_angeltype\n * @param User  $user\n * @param array $angeltype\n * @return string\n */\nfunction UserAngelType_confirm_view($user_angeltype, $user, $angeltype)\n{\n    return page_with_title(__('Confirm angeltype for user'), [\n        msg(),\n        info(sprintf(\n            __('Do you really want to confirm %s for %s?'),\n            User_Nick_render($user),\n            $angeltype['name']\n        ), true),\n        buttons([\n            button(angeltype_link($angeltype['id']), glyph('remove') . __('cancel')),\n            button(\n                page_link_to(\n                    'user_angeltypes',\n                    ['action' => 'confirm', 'user_angeltype_id' => $user_angeltype['id'], 'confirmed' => 1]\n                ),\n                glyph('ok') . __('yes'),\n                'btn-primary'\n            )\n        ])\n    ]);\n}\n\n/**\n * @param array $user_angeltype\n * @param User  $user\n * @param array $angeltype\n * @return string\n */\nfunction UserAngelType_delete_view($user_angeltype, $user, $angeltype)\n{\n    return page_with_title(__('Remove angeltype'), [\n        msg(),\n        info(sprintf(\n            __('Do you really want to delete %s from %s?'),\n            User_Nick_render($user),\n            $angeltype['name']\n        ), true),\n        buttons([\n            button(angeltype_link($angeltype['id']), glyph('remove') . __('cancel')),\n            button(\n                page_link_to('user_angeltypes',\n                    ['action' => 'delete', 'user_angeltype_id' => $user_angeltype['id'], 'confirmed' => 1]),\n                glyph('ok') . __('yes'),\n                'btn-primary'\n            )\n        ])\n    ]);\n}\n\n/**\n * @param array  $angeltype\n * @param User[] $users_source\n * @param int    $user_id\n * @return string\n */\nfunction UserAngelType_add_view($angeltype, $users_source, $user_id)\n{\n    $users = [];\n    foreach ($users_source as $user_source) {\n        $users[$user_source->id] = User_Nick_render($user_source);\n    }\n\n    return page_with_title(__('Add user to angeltype'), [\n        msg(),\n        buttons([\n            button(\n                page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]),\n                __('back'),\n                'back'\n            )\n        ]),\n        form([\n            form_info(__('Angeltype'), $angeltype['name']),\n            form_select('user_id', __('User'), $users, $user_id),\n            form_submit('submit', __('Add'))\n        ])\n    ]);\n}\n\n/**\n * @param User  $user\n * @param array $angeltype\n * @return string\n */\nfunction UserAngelType_join_view($user, $angeltype)\n{\n    return page_with_title(sprintf(__('Become a %s'), $angeltype['name']), [\n        msg(),\n        info(sprintf(\n            __('Do you really want to add %s to %s?'),\n            User_Nick_render($user),\n            $angeltype['name']\n        ), true),\n        buttons([\n            button(angeltype_link($angeltype['id']), glyph('remove') . __('cancel')),\n            button(\n                page_link_to(\n                    'user_angeltypes',\n                    ['action' => 'add', 'angeltype_id' => $angeltype['id'], 'user_id' => $user->id, 'confirmed' => 1]\n                ),\n                glyph('ok') . __('save'),\n                'btn-primary'\n            )\n        ])\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * Delete work log entry.\n *\n * @param User  $user_source\n * @param array $userWorkLog\n * @return string\n */\nfunction UserWorkLog_delete_view($user_source, $userWorkLog)\n{\n    return page_with_title(UserWorkLog_delete_title(), [\n        info(sprintf(\n            __('Do you want to delete the worklog entry for %s?'),\n            User_Nick_render($user_source)\n        ), true),\n        buttons([\n            button(user_link($user_source->id), glyph('remove') . __('cancel')),\n            button(user_worklog_delete_link($userWorkLog, [\n                'confirmed' => 1\n            ]), glyph('ok') . __('delete'), 'btn-danger')\n        ])\n    ]);\n}\n\n/**\n * Title for work log delete.\n */\nfunction UserWorkLog_delete_title()\n{\n    return __('Delete work log entry');\n}\n\n/**\n * Render edit table.\n *\n * @param User  $user_source\n * @param array $userWorkLog\n * @return string\n */\nfunction UserWorkLog_edit_form($user_source, $userWorkLog)\n{\n    return form([\n        form_info(__('User'), User_Nick_render($user_source)),\n        form_date('work_timestamp', __('Work date'), $userWorkLog['work_timestamp'], null, time()),\n        form_text('work_hours', __('Work hours'), $userWorkLog['work_hours']),\n        form_text('comment', __('Comment'), $userWorkLog['comment']),\n        form_submit('submit', __('Save'))\n    ]);\n}\n\n/**\n * Form for edit a user work log entry.\n *\n * @param User  $user_source\n * @param array $userWorkLog\n * @return string\n */\nfunction UserWorkLog_edit_view($user_source, $userWorkLog)\n{\n    return page_with_title(UserWorkLog_edit_title(), [\n        buttons([\n            button(user_link($user_source->id), __('back'))\n        ]),\n        msg(),\n        UserWorkLog_edit_form($user_source, $userWorkLog)\n    ]);\n}\n\n/**\n * Form for adding a user work log entry.\n *\n * @param User  $user_source\n * @param array $userWorkLog\n * @return string\n */\nfunction UserWorkLog_add_view($user_source, $userWorkLog)\n{\n    return page_with_title(UserWorkLog_add_title(), [\n        buttons([\n            button(user_link($user_source->id), __('back'))\n        ]),\n        msg(),\n        UserWorkLog_edit_form($user_source, $userWorkLog)\n    ]);\n}\n\n/**\n * Title text for editing work log entry.\n */\nfunction UserWorkLog_edit_title()\n{\n    return __('Edit work log entry');\n}\n\n/**\n * Title text for adding work log entry.\n */\nfunction UserWorkLog_add_title()\n{\n    return __('Add work log entry');\n}\n", "<?php\n\nnamespace Engelsystem\\Http;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Message\\UploadedFileInterface;\nuse Psr\\Http\\Message\\UriInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile as SymfonyFile;\nuse Symfony\\Component\\HttpFoundation\\Request as SymfonyRequest;\nuse Zend\\Diactoros\\UploadedFile;\nuse Zend\\Diactoros\\Uri;\n\nclass Request extends SymfonyRequest implements ServerRequestInterface\n{\n    use MessageTrait;\n\n    /**\n     * Get POST input\n     *\n     * @param string $key\n     * @param mixed  $default\n     * @return mixed\n     */\n    public function postData($key, $default = null)\n    {\n        return $this->request->get($key, $default);\n    }\n\n    /**\n     * Get input data\n     *\n     * @param string $key\n     * @param mixed  $default\n     * @return mixed\n     */\n    public function input($key, $default = null)\n    {\n        return $this->get($key, $default);\n    }\n\n    /**\n     * Checks if the input exists\n     *\n     * @param string $key\n     * @return bool\n     */\n    public function has($key)\n    {\n        $value = $this->input($key);\n\n        return !is_null($value);\n    }\n\n    /**\n     * Get the requested path\n     *\n     * @return string\n     */\n    public function path()\n    {\n        $pattern = trim($this->getPathInfo(), '/');\n\n        return $pattern == '' ? '/' : $pattern;\n    }\n\n    /**\n     * Return the current URL\n     *\n     * @return string\n     */\n    public function url()\n    {\n        return rtrim(preg_replace('/\\?.*/', '', $this->getUri()), '/');\n    }\n\n    /**\n     * Retrieves the message's request target.\n     *\n     *\n     * Retrieves the message's request-target either as it will appear (for\n     * clients), as it appeared at request (for servers), or as it was\n     * specified for the instance (see withRequestTarget()).\n     *\n     * In most cases, this will be the origin-form of the composed URI,\n     * unless a value was provided to the concrete implementation (see\n     * withRequestTarget() below).\n     *\n     * If no URI is available, and no request-target has been specifically\n     * provided, this method MUST return the string \"/\".\n     *\n     * @return string\n     */\n    public function getRequestTarget()\n    {\n        $query = $this->getQueryString();\n        return '/' . $this->path() . (!empty($query) ? '?' . $query : '');\n    }\n\n    /**\n     * Return an instance with the specific request-target.\n     *\n     * If the request needs a non-origin-form request-target \u2014 e.g., for\n     * specifying an absolute-form, authority-form, or asterisk-form \u2014\n     * this method may be used to create an instance with the specified\n     * request-target, verbatim.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * changed request target.\n     *\n     * @link http://tools.ietf.org/html/rfc7230#section-5.3 (for the various\n     *     request-target forms allowed in request messages)\n     * @param mixed $requestTarget\n     * @return static\n     */\n    public function withRequestTarget($requestTarget)\n    {\n        return $this->create($requestTarget);\n    }\n\n    /**\n     * Return an instance with the provided HTTP method.\n     *\n     * While HTTP method names are typically all uppercase characters, HTTP\n     * method names are case-sensitive and thus implementations SHOULD NOT\n     * modify the given string.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * changed request method.\n     *\n     * @param string $method Case-sensitive method.\n     * @return static\n     * @throws \\InvalidArgumentException for invalid HTTP methods.\n     */\n    public function withMethod($method)\n    {\n        $new = clone $this;\n        $new->setMethod($method);\n\n        return $new;\n    }\n\n    /**\n     * Returns an instance with the provided URI.\n     *\n     * This method MUST update the Host header of the returned request by\n     * default if the URI contains a host component. If the URI does not\n     * contain a host component, any pre-existing Host header MUST be carried\n     * over to the returned request.\n     *\n     * You can opt-in to preserving the original state of the Host header by\n     * setting `$preserveHost` to `true`. When `$preserveHost` is set to\n     * `true`, this method interacts with the Host header in the following ways:\n     *\n     * - If the Host header is missing or empty, and the new URI contains\n     *   a host component, this method MUST update the Host header in the returned\n     *   request.\n     * - If the Host header is missing or empty, and the new URI does not contain a\n     *   host component, this method MUST NOT update the Host header in the returned\n     *   request.\n     * - If a Host header is present and non-empty, this method MUST NOT update\n     *   the Host header in the returned request.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * new UriInterface instance.\n     *\n     * @link http://tools.ietf.org/html/rfc3986#section-4.3\n     * @param UriInterface $uri          New request URI to use.\n     * @param bool         $preserveHost Preserve the original state of the Host header.\n     * @return static\n     */\n    public function withUri(UriInterface $uri, $preserveHost = false)\n    {\n        $new = $this->create($uri);\n        if ($preserveHost) {\n            $new->headers->set('HOST', $this->getHost());\n        }\n\n        return $new;\n    }\n\n    /**\n     * Retrieves the URI instance.\n     *\n     * This method MUST return a UriInterface instance.\n     *\n     * @link http://tools.ietf.org/html/rfc3986#section-4.3\n     * @return string|UriInterface Returns a UriInterface instance\n     *     representing the URI of the request.\n     */\n    public function getUri()\n    {\n        $uri = parent::getUri();\n\n        return new Uri($uri);\n    }\n\n    /**\n     * Retrieve server parameters.\n     *\n     * Retrieves data related to the incoming request environment,\n     * typically derived from PHP's $_SERVER superglobal. The data IS NOT\n     * REQUIRED to originate from $_SERVER.\n     *\n     * @return array\n     */\n    public function getServerParams()\n    {\n        return $this->server->all();\n    }\n\n    /**\n     * Retrieve cookies.\n     *\n     * Retrieves cookies sent by the client to the server.\n     *\n     * The data MUST be compatible with the structure of the $_COOKIE\n     * superglobal.\n     *\n     * @return array\n     */\n    public function getCookieParams()\n    {\n        return $this->cookies->all();\n    }\n\n    /**\n     * Return an instance with the specified cookies.\n     *\n     * The data IS NOT REQUIRED to come from the $_COOKIE superglobal, but MUST\n     * be compatible with the structure of $_COOKIE. Typically, this data will\n     * be injected at instantiation.\n     *\n     * This method MUST NOT update the related Cookie header of the request\n     * instance, nor related values in the server params.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated cookie values.\n     *\n     * @param array $cookies Array of key/value pairs representing cookies.\n     * @return static\n     */\n    public function withCookieParams(array $cookies)\n    {\n        $new = clone $this;\n        $new->cookies = clone $this->cookies;\n        $new->cookies->replace($cookies);\n\n        return $new;\n    }\n\n    /**\n     * Retrieve query string arguments.\n     *\n     * Retrieves the deserialized query string arguments, if any.\n     *\n     * Note: the query params might not be in sync with the URI or server\n     * params. If you need to ensure you are only getting the original\n     * values, you may need to parse the query string from `getUri()->getQuery()`\n     * or from the `QUERY_STRING` server param.\n     *\n     * @return array\n     */\n    public function getQueryParams()\n    {\n        return $this->query->all();\n    }\n\n    /**\n     * Return an instance with the specified query string arguments.\n     *\n     * These values SHOULD remain immutable over the course of the incoming\n     * request. They MAY be injected during instantiation, such as from PHP's\n     * $_GET superglobal, or MAY be derived from some other value such as the\n     * URI. In cases where the arguments are parsed from the URI, the data\n     * MUST be compatible with what PHP's parse_str() would return for\n     * purposes of how duplicate query parameters are handled, and how nested\n     * sets are handled.\n     *\n     * Setting query string arguments MUST NOT change the URI stored by the\n     * request, nor the values in the server params.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated query string arguments.\n     *\n     * @param array $query Array of query string arguments, typically from\n     *                     $_GET.\n     * @return static\n     */\n    public function withQueryParams(array $query)\n    {\n        $new = clone $this;\n        $new->query = clone $this->query;\n        $new->query->replace($query);\n\n        return $new;\n    }\n\n    /**\n     * Retrieve normalized file upload data.\n     *\n     * This method returns upload metadata in a normalized tree, with each leaf\n     * an instance of Psr\\Http\\Message\\UploadedFileInterface.\n     *\n     * These values MAY be prepared from $_FILES or the message body during\n     * instantiation, or MAY be injected via withUploadedFiles().\n     *\n     * @return array An array tree of UploadedFileInterface instances; an empty\n     *     array MUST be returned if no data is present.\n     */\n    public function getUploadedFiles()\n    {\n        $files = [];\n        foreach ($this->files as $file) {\n            /** @var SymfonyFile $file */\n\n            $files[] = new UploadedFile(\n                $file->getPath(),\n                $file->getSize(),\n                $file->getError(),\n                $file->getClientOriginalName(),\n                $file->getClientMimeType()\n            );\n        }\n\n        return $files;\n    }\n\n    /**\n     * Create a new instance with the specified uploaded files.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated body parameters.\n     *\n     * @param array $uploadedFiles An array tree of UploadedFileInterface instances.\n     * @return static\n     * @throws \\InvalidArgumentException if an invalid structure is provided.\n     */\n    public function withUploadedFiles(array $uploadedFiles)\n    {\n        $new = clone $this;\n        $new->files = clone $this->files;\n\n        $files = [];\n        foreach ($uploadedFiles as $file) {\n            /** @var UploadedFileInterface $file */\n            $filename = tempnam(sys_get_temp_dir(), 'upload');\n            $handle = fopen($filename, \"w\");\n            fwrite($handle, $file->getStream()->getContents());\n            fclose($handle);\n\n            $files[] = new SymfonyFile(\n                $filename,\n                $file->getClientFilename(),\n                $file->getClientMediaType(),\n                $file->getSize(),\n                $file->getError()\n            );\n        }\n        $new->files->add($files);\n\n        return $new;\n    }\n\n    /**\n     * Retrieve any parameters provided in the request body.\n     *\n     * If the request Content-Type is either application/x-www-form-urlencoded\n     * or multipart/form-data, and the request method is POST, this method MUST\n     * return the contents of $_POST.\n     *\n     * Otherwise, this method may return any results of deserializing\n     * the request body content; as parsing returns structured content, the\n     * potential types MUST be arrays or objects only. A null value indicates\n     * the absence of body content.\n     *\n     * @return null|array|object The deserialized body parameters, if any.\n     *     These will typically be an array or object.\n     */\n    public function getParsedBody()\n    {\n        return $this->request->all();\n    }\n\n    /**\n     * Return an instance with the specified body parameters.\n     *\n     * These MAY be injected during instantiation.\n     *\n     * If the request Content-Type is either application/x-www-form-urlencoded\n     * or multipart/form-data, and the request method is POST, use this method\n     * ONLY to inject the contents of $_POST.\n     *\n     * The data IS NOT REQUIRED to come from $_POST, but MUST be the results of\n     * deserializing the request body content. Deserialization/parsing returns\n     * structured data, and, as such, this method ONLY accepts arrays or objects,\n     * or a null value if nothing was available to parse.\n     *\n     * As an example, if content negotiation determines that the request data\n     * is a JSON payload, this method could be used to create a request\n     * instance with the deserialized parameters.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated body parameters.\n     *\n     * @param null|array|object $data The deserialized body data. This will\n     *                                typically be in an array or object.\n     * @return static\n     * @throws \\InvalidArgumentException if an unsupported argument type is\n     *                                provided.\n     */\n    public function withParsedBody($data)\n    {\n        $new = clone $this;\n        $new->request = clone $this->request;\n\n        $new->request->replace($data);\n\n        return $new;\n    }\n\n    /**\n     * Retrieve attributes derived from the request.\n     *\n     * The request \"attributes\" may be used to allow injection of any\n     * parameters derived from the request: e.g., the results of path\n     * match operations; the results of decrypting cookies; the results of\n     * deserializing non-form-encoded message bodies; etc. Attributes\n     * will be application and request specific, and CAN be mutable.\n     *\n     * @return array Attributes derived from the request.\n     */\n    public function getAttributes()\n    {\n        return $this->attributes->all();\n    }\n\n    /**\n     * Retrieve a single derived request attribute.\n     *\n     * Retrieves a single derived request attribute as described in\n     * getAttributes(). If the attribute has not been previously set, returns\n     * the default value as provided.\n     *\n     * This method obviates the need for a hasAttribute() method, as it allows\n     * specifying a default value to return if the attribute is not found.\n     *\n     * @see getAttributes()\n     * @param string $name    The attribute name.\n     * @param mixed  $default Default value to return if the attribute does not exist.\n     * @return mixed\n     */\n    public function getAttribute($name, $default = null)\n    {\n        return $this->attributes->get($name, $default);\n    }\n\n    /**\n     * Return an instance with the specified derived request attribute.\n     *\n     * This method allows setting a single derived request attribute as\n     * described in getAttributes().\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated attribute.\n     *\n     * @see getAttributes()\n     * @param string $name  The attribute name.\n     * @param mixed  $value The value of the attribute.\n     * @return static\n     */\n    public function withAttribute($name, $value)\n    {\n        $new = clone $this;\n        $new->attributes = clone $this->attributes;\n\n        $new->attributes->set($name, $value);\n\n        return $new;\n    }\n\n    /**\n     * Return an instance that removes the specified derived request attribute.\n     *\n     * This method allows removing a single derived request attribute as\n     * described in getAttributes().\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that removes\n     * the attribute.\n     *\n     * @see getAttributes()\n     * @param string $name The attribute name.\n     * @return static\n     */\n    public function withoutAttribute($name)\n    {\n        $new = clone $this;\n        $new->attributes = clone $this->attributes;\n\n        $new->attributes->remove($name);\n\n        return $new;\n    }\n}\n", "<?php\n\nnamespace Engelsystem\\Test\\Unit\\Http;\n\nuse Engelsystem\\Http\\Request;\nuse PHPUnit\\Framework\\TestCase;\nuse PHPUnit_Framework_MockObject_MockObject as MockObject;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\UploadedFileInterface;\nuse Psr\\Http\\Message\\UriInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile as SymfonyFile;\nuse Symfony\\Component\\HttpFoundation\\Request as SymfonyRequest;\n\nclass RequestTest extends TestCase\n{\n    /**\n     * @covers \\Engelsystem\\Http\\Request\n     */\n    public function testCreate()\n    {\n        $response = new Request();\n        $this->assertInstanceOf(SymfonyRequest::class, $response);\n        $this->assertInstanceOf(RequestInterface::class, $response);\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::postData\n     */\n    public function testPostData()\n    {\n        $request = new Request(\n            ['foo' => 'I\\'m a test!'],\n            ['foo' => 'bar']\n        );\n\n        $this->assertEquals('bar', $request->postData('foo'));\n        $this->assertEquals('LoremIpsum', $request->postData('test-key', 'LoremIpsum'));\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::input\n     */\n    public function testInput()\n    {\n        $request = new Request(\n            ['foo' => 'I\\'m a test!'],\n            ['foo' => 'bar']\n        );\n\n        $this->assertEquals('I\\'m a test!', $request->input('foo'));\n        $this->assertEquals('LoremIpsum', $request->input('test-key', 'LoremIpsum'));\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::has\n     */\n    public function testHas()\n    {\n        $request = new Request([\n            'foo' => 'I\\'m a test!',\n            'bar' => '',\n        ]);\n\n        $this->assertTrue($request->has('foo'));\n        $this->assertTrue($request->has('bar'));\n        $this->assertFalse($request->has('baz'));\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::path\n     */\n    public function testPath()\n    {\n        /** @var MockObject|Request $request */\n        $request = $this\n            ->getMockBuilder(Request::class)\n            ->setMethods(['getPathInfo'])\n            ->getMock();\n\n        $request\n            ->expects($this->atLeastOnce())\n            ->method('getPathInfo')\n            ->willReturnOnConsecutiveCalls(\n                '/foo',\n                '/'\n            );\n\n        $this->assertEquals('foo', $request->path());\n        $this->assertEquals('/', $request->path());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::url\n     */\n    public function testUrl()\n    {\n        /** @var MockObject|Request $request */\n        $request = $this\n            ->getMockBuilder(Request::class)\n            ->setMethods(['getUri'])\n            ->getMock();\n\n        $request\n            ->expects($this->atLeastOnce())\n            ->method('getUri')\n            ->willReturnOnConsecutiveCalls(\n                'http://foo.bar/bla/foo/',\n                'https://lorem.ipsum/dolor/sit?amet=consetetur&sadipscing=elitr'\n            );\n\n        $this->assertEquals('http://foo.bar/bla/foo', $request->url());\n        $this->assertEquals('https://lorem.ipsum/dolor/sit', $request->url());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getRequestTarget\n     */\n    public function testGetRequestTarget()\n    {\n        /** @var Request|MockObject $request */\n        $request = $this\n            ->getMockBuilder(Request::class)\n            ->setMethods(['getQueryString', 'path'])\n            ->getMock();\n\n        $request->expects($this->exactly(2))\n            ->method('getQueryString')\n            ->willReturnOnConsecutiveCalls(null, 'foo=bar&lorem=ipsum');\n        $request->expects($this->exactly(2))\n            ->method('path')\n            ->willReturn('foo/bar');\n\n        $this->assertEquals('/foo/bar', $request->getRequestTarget());\n        $this->assertEquals('/foo/bar?foo=bar&lorem=ipsum', $request->getRequestTarget());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withRequestTarget\n     */\n    public function testWithRequestTarget()\n    {\n        $request = new Request();\n        foreach (\n            [\n                '*',\n                '/foo/bar',\n                'https://lorem.ipsum/test?lor=em'\n            ] as $target\n        ) {\n            $new = $request->withRequestTarget($target);\n            $this->assertNotEquals($request, $new);\n        }\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withMethod\n     */\n    public function testWithMethod()\n    {\n        $request = new Request();\n\n        $new = $request->withMethod('PUT');\n\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals('PUT', $new->getMethod());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withUri\n     */\n    public function testWithUri()\n    {\n        /** @var UriInterface|MockObject $uri */\n        $uri = $this->getMockForAbstractClass(UriInterface::class);\n\n        $uri->expects($this->atLeastOnce())\n            ->method('__toString')\n            ->willReturn('http://foo.bar/bla?foo=bar');\n\n        $request = Request::create('http://lor.em/');\n\n        $new = $request->withUri($uri);\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals('http://foo.bar/bla?foo=bar', (string)$new->getUri());\n\n        $new = $request->withUri($uri, true);\n        $this->assertEquals('http://lor.em/bla?foo=bar', (string)$new->getUri());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getUri\n     */\n    public function testGetUri()\n    {\n        $request = Request::create('http://lor.em/test?bla=foo');\n\n        $uri = $request->getUri();\n        $this->assertInstanceOf(UriInterface::class, $uri);\n        $this->assertEquals('http://lor.em/test?bla=foo', (string)$uri);\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getServerParams\n     */\n    public function testGetServerParams()\n    {\n        $server = ['foo' => 'bar'];\n        $request = new Request([], [], [], [], [], $server);\n\n        $this->assertEquals($server, $request->getServerParams());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getCookieParams\n     */\n    public function testGetCookieParams()\n    {\n        $cookies = ['session' => 'LoremIpsumDolorSit'];\n        $request = new Request([], [], [], $cookies);\n\n        $this->assertEquals($cookies, $request->getCookieParams());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withCookieParams\n     */\n    public function testWithCookieParams()\n    {\n        $cookies = ['lor' => 'em'];\n        $request = new Request();\n\n        $new = $request->withCookieParams($cookies);\n\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals($cookies, $new->getCookieParams());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getQueryParams\n     */\n    public function testGetQueryParams()\n    {\n        $params = ['foo' => 'baz'];\n        $request = new Request($params);\n\n        $this->assertEquals($params, $request->getQueryParams());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withQueryParams\n     */\n    public function testWithQueryParams()\n    {\n        $params = ['test' => 'ing'];\n        $request = new Request();\n\n        $new = $request->withQueryParams($params);\n\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals($params, $new->getQueryParams());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getUploadedFiles\n     */\n    public function testGetUploadedFiles()\n    {\n        $filename = tempnam(sys_get_temp_dir(), 'test');\n        file_put_contents($filename, 'LoremIpsum!');\n        $files = [new SymfonyFile($filename, 'foo.html', 'text/html', 11)];\n        $request = new Request([], [], [], [], $files);\n\n        $uploadedFiles = $request->getUploadedFiles();\n        $this->assertNotEmpty($uploadedFiles);\n\n        /** @var UploadedFileInterface $file */\n        $file = $uploadedFiles[0];\n        $this->assertInstanceOf(UploadedFileInterface::class, $file);\n        $this->assertEquals('foo.html', $file->getClientFilename());\n        $this->assertEquals('text/html', $file->getClientMediaType());\n        $this->assertEquals(11, $file->getSize());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withUploadedFiles\n     */\n    public function testWithUploadedFiles()\n    {\n        $filename = tempnam(sys_get_temp_dir(), 'test');\n        file_put_contents($filename, 'LoremIpsum!');\n        $file = new \\Zend\\Diactoros\\UploadedFile($filename, 11, UPLOAD_ERR_OK, 'test.txt', 'text/plain');\n\n        $request = new Request();\n        $new = $request->withUploadedFiles([$file]);\n        $uploadedFiles = $new->getUploadedFiles();\n        $this->assertNotEquals($request, $new);\n        $this->assertNotEmpty($uploadedFiles);\n\n        /** @var UploadedFileInterface $file */\n        $file = $uploadedFiles[0];\n        $this->assertEquals('test.txt', $file->getClientFilename());\n        $this->assertEquals('text/plain', $file->getClientMediaType());\n        $this->assertEquals(11, $file->getSize());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getParsedBody\n     */\n    public function testGetParsedBody()\n    {\n        $body = ['foo' => 'lorem'];\n        $request = new Request();\n        $request->request->add($body);\n\n        $this->assertEquals($body, $request->getParsedBody());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withParsedBody\n     */\n    public function testWithParsedBody()\n    {\n        $data = ['test' => 'er'];\n        $request = new Request();\n\n        $new = $request->withParsedBody($data);\n\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals($data, $new->getParsedBody());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getAttributes\n     */\n    public function testGetAttributes()\n    {\n        $attributes = ['foo' => 'lorem', 'ipsum' => 'dolor'];\n        $request = new Request([], [], $attributes);\n\n        $this->assertEquals($attributes, $request->getAttributes());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getAttribute\n     */\n    public function testGetAttribute()\n    {\n        $attributes = ['foo' => 'lorem', 'ipsum' => 'dolor'];\n        $request = new Request([], [], $attributes);\n\n        $this->assertEquals($attributes['ipsum'], $request->getAttribute('ipsum'));\n        $this->assertEquals(null, $request->getAttribute('dolor'));\n        $this->assertEquals(1234, $request->getAttribute('test', 1234));\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withAttribute\n     */\n    public function testWithAttribute()\n    {\n        $request = new Request();\n\n        $new = $request->withAttribute('lorem', 'ipsum');\n\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals('ipsum', $new->getAttribute('lorem'));\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withoutAttribute\n     */\n    public function testWithoutAttribute()\n    {\n        $attributes = ['foo' => 'lorem', 'ipsum' => 'dolor'];\n        $request = new Request([], [], $attributes);\n\n        $new = $request->withoutAttribute('ipsum');\n\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals(['foo' => 'lorem'], $new->getAttributes());\n    }\n}\n"], "fixing_code": ["<?php\n\nuse Engelsystem\\ShiftsFilter;\nuse Engelsystem\\ShiftsFilterRenderer;\n\n/**\n * Text for Angeltype related links.\n *\n * @return string\n */\nfunction angeltypes_title()\n{\n    return __('Angeltypes');\n}\n\n/**\n * Route angeltype actions.\n *\n * @return array\n */\nfunction angeltypes_controller()\n{\n    $action = strip_request_item('action', 'list');\n\n    switch ($action) {\n        case 'view':\n            return angeltype_controller();\n        case 'edit':\n            return angeltype_edit_controller();\n        case 'delete':\n            return angeltype_delete_controller();\n        case 'about':\n            return angeltypes_about_controller();\n        case 'list':\n        default:\n            return angeltypes_list_controller();\n    }\n}\n\n/**\n * Path to angeltype view.\n *\n * @param int   $angeltype_id AngelType id\n * @param array $params       additional params\n * @return string\n */\nfunction angeltype_link($angeltype_id, $params = [])\n{\n    $params = array_merge(['action' => 'view', 'angeltype_id' => $angeltype_id], $params);\n    return page_link_to('angeltypes', $params);\n}\n\n/**\n * Job description for all angeltypes (public to everyone)\n *\n * @return array\n */\nfunction angeltypes_about_controller()\n{\n    $user = auth()->user();\n\n    if ($user) {\n        $angeltypes = AngelTypes_with_user($user->id);\n    } else {\n        $angeltypes = AngelTypes();\n    }\n\n    return [\n        __('Teams/Job description'),\n        AngelTypes_about_view($angeltypes, (bool)$user)\n    ];\n}\n\n/**\n * Delete an Angeltype.\n *\n * @return array\n */\nfunction angeltype_delete_controller()\n{\n    global $privileges;\n\n    if (!in_array('admin_angel_types', $privileges)) {\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = load_angeltype();\n\n    if (request()->hasPostData('delete')) {\n        AngelType_delete($angeltype);\n        success(sprintf(__('Angeltype %s deleted.'), AngelType_name_render($angeltype)));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    return [\n        sprintf(__('Delete angeltype %s'), $angeltype['name']),\n        AngelType_delete_view($angeltype)\n    ];\n}\n\n/**\n * Change an Angeltype.\n *\n * @return array\n */\nfunction angeltype_edit_controller()\n{\n    global $privileges;\n\n    // In supporter mode only allow to modify description\n    $supporter_mode = !in_array('admin_angel_types', $privileges);\n    $request = request();\n\n    if ($request->has('angeltype_id')) {\n        // Edit existing angeltype\n        $angeltype = load_angeltype();\n\n        if (!User_is_AngelType_supporter(auth()->user(), $angeltype)) {\n            redirect(page_link_to('angeltypes'));\n        }\n    } else {\n        // New angeltype\n        if ($supporter_mode) {\n            // Supporters aren't allowed to create new angeltypes.\n            redirect(page_link_to('angeltypes'));\n        }\n        $angeltype = AngelType_new();\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if (!$supporter_mode) {\n            if ($request->has('name')) {\n                $result = AngelType_validate_name($request->postData('name'), $angeltype);\n                $angeltype['name'] = $result->getValue();\n                if (!$result->isValid()) {\n                    $valid = false;\n                    error(__('Please check the name. Maybe it already exists.'));\n                }\n            }\n\n            $angeltype['restricted'] = $request->has('restricted');\n            $angeltype['no_self_signup'] = $request->has('no_self_signup');\n            $angeltype['show_on_dashboard'] = $request->has('show_on_dashboard');\n\n            $angeltype['requires_driver_license'] = $request->has('requires_driver_license');\n        }\n\n        $angeltype['description'] = strip_request_item_nl('description', $angeltype['description']);\n\n        $angeltype['contact_name'] = strip_request_item('contact_name', $angeltype['contact_name']);\n        $angeltype['contact_dect'] = strip_request_item('contact_dect', $angeltype['contact_dect']);\n        $angeltype['contact_email'] = strip_request_item('contact_email', $angeltype['contact_email']);\n\n        if ($valid) {\n            if (!empty($angeltype['id'])) {\n                AngelType_update($angeltype);\n            } else {\n                $angeltype = AngelType_create($angeltype);\n            }\n\n            success('Angel type saved.');\n            redirect(angeltype_link($angeltype['id']));\n        }\n    }\n\n    return [\n        sprintf(__('Edit %s'), $angeltype['name']),\n        AngelType_edit_view($angeltype, $supporter_mode)\n    ];\n}\n\n/**\n * View details of a given angeltype.\n *\n * @return array\n */\nfunction angeltype_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n\n    if (!in_array('angeltypes', $privileges)) {\n        redirect(page_link_to('/'));\n    }\n\n    $angeltype = load_angeltype();\n    $user_angeltype = UserAngelType_by_User_and_AngelType($user->id, $angeltype);\n    $user_driver_license = UserDriverLicense($user->id);\n    $members = Users_by_angeltype($angeltype);\n\n    $days = angeltype_controller_shiftsFilterDays($angeltype);\n    $shiftsFilter = angeltype_controller_shiftsFilter($angeltype, $days);\n\n    $shiftsFilterRenderer = new ShiftsFilterRenderer($shiftsFilter);\n    $shiftsFilterRenderer->enableDaySelection($days);\n\n    $shiftCalendarRenderer = shiftCalendarRendererByShiftFilter($shiftsFilter);\n    $request = request();\n    $tab = 0;\n\n    if ($request->has('shifts_filter_day')) {\n        $tab = 1;\n    }\n\n    return [\n        sprintf(__('Team %s'), $angeltype['name']),\n        AngelType_view(\n            $angeltype,\n            $members,\n            $user_angeltype,\n            in_array('admin_user_angeltypes', $privileges) || $user_angeltype['supporter'],\n            in_array('admin_angel_types', $privileges),\n            $user_angeltype['supporter'],\n            $user_driver_license,\n            $user,\n            $shiftsFilterRenderer,\n            $shiftCalendarRenderer,\n            $tab\n        )\n    ];\n}\n\n/**\n * On which days do shifts for this angeltype occur? Needed for shiftCalendar.\n *\n * @param array $angeltype\n * @return array\n */\nfunction angeltype_controller_shiftsFilterDays($angeltype)\n{\n    $all_shifts = Shifts_by_angeltype($angeltype);\n    $days = [];\n    foreach ($all_shifts as $shift) {\n        $day = date('Y-m-d', $shift['start']);\n        if (!in_array($day, $days)) {\n            $days[] = $day;\n        }\n    }\n    return $days;\n}\n\n/**\n * Sets up the shift filter for the angeltype.\n *\n * @param array $angeltype\n * @param array $days\n * @return ShiftsFilter\n */\nfunction angeltype_controller_shiftsFilter($angeltype, $days)\n{\n    global $privileges;\n\n    $request = request();\n    $shiftsFilter = new ShiftsFilter(\n        in_array('user_shifts_admin', $privileges),\n        Room_ids(),\n        [$angeltype['id']]\n    );\n    $selected_day = date('Y-m-d');\n    if (!empty($days)) {\n        $selected_day = $days[0];\n    }\n    if ($request->has('shifts_filter_day')) {\n        $selected_day = $request->input('shifts_filter_day');\n    }\n    $shiftsFilter->setStartTime(parse_date('Y-m-d H:i', $selected_day . ' 00:00'));\n    $shiftsFilter->setEndTime(parse_date('Y-m-d H:i', $selected_day . ' 23:59'));\n\n    return $shiftsFilter;\n}\n\n/**\n * View a list of all angeltypes.\n *\n * @return array\n */\nfunction angeltypes_list_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n\n    if (!in_array('angeltypes', $privileges)) {\n        redirect(page_link_to('/'));\n    }\n\n    $angeltypes = AngelTypes_with_user($user->id);\n\n    foreach ($angeltypes as &$angeltype) {\n        $actions = [\n            button(\n                page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]),\n                __('view'),\n                'btn-xs'\n            )\n        ];\n\n        if (in_array('admin_angel_types', $privileges)) {\n            $actions[] = button(\n                page_link_to('angeltypes', ['action' => 'edit', 'angeltype_id' => $angeltype['id']]),\n                __('edit'),\n                'btn-xs'\n            );\n            $actions[] = button(\n                page_link_to('angeltypes', ['action' => 'delete', 'angeltype_id' => $angeltype['id']]),\n                __('delete'),\n                'btn-xs'\n            );\n        }\n\n        $angeltype['membership'] = AngelType_render_membership($angeltype);\n        if (!empty($angeltype['user_angeltype_id'])) {\n            $actions[] = button(\n                page_link_to('user_angeltypes',\n                    ['action' => 'delete', 'user_angeltype_id' => $angeltype['user_angeltype_id']]\n                ),\n                __('leave'),\n                'btn-xs'\n            );\n        } else {\n            $actions[] = button(\n                page_link_to('user_angeltypes', ['action' => 'add', 'angeltype_id' => $angeltype['id']]),\n                __('join'),\n                'btn-xs'\n            );\n        }\n\n        $angeltype['restricted'] = $angeltype['restricted'] ? glyph('lock') : '';\n        $angeltype['no_self_signup'] = $angeltype['no_self_signup'] ? '' : glyph('share');\n\n        $angeltype['name'] = '<a href=\"'\n            . page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']])\n            . '\">'\n            . $angeltype['name']\n            . '</a>';\n\n        $angeltype['actions'] = table_buttons($actions);\n    }\n\n    return [\n        angeltypes_title(),\n        AngelTypes_list_view($angeltypes, in_array('admin_angel_types', $privileges))\n    ];\n}\n\n/**\n * Loads an angeltype from given angeltype_id request param.\n *\n * @return array\n */\nfunction load_angeltype()\n{\n    $request = request();\n    if (!$request->has('angeltype_id')) {\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType($request->input('angeltype_id'));\n    if (empty($angeltype)) {\n        error(__('Angeltype doesn\\'t exist . '));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    return $angeltype;\n}\n", "<?php\n\nuse Carbon\\Carbon;\nuse Engelsystem\\Models\\EventConfig;\n\n/**\n * @return string\n */\nfunction event_config_title()\n{\n    return __('Event config');\n}\n\n/**\n * @return array\n */\nfunction event_config_edit_controller()\n{\n    global $privileges;\n\n    if (!in_array('admin_event_config', $privileges)) {\n        redirect(page_link_to('/'));\n    }\n\n    $request = request();\n    $config = config();\n    $event_name = $config->get('name');\n    $event_welcome_msg = $config->get('welcome_msg');\n    /** @var Carbon $buildup_start_date */\n    $buildup_start_date = $config->get('buildup_start');\n    /** @var Carbon $event_start_date */\n    $event_start_date = $config->get('event_start');\n    /** @var Carbon $event_end_date */\n    $event_end_date = $config->get('event_end');\n    /** @var Carbon $teardown_end_date */\n    $teardown_end_date = $config->get('teardown_end');\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if ($request->has('event_name')) {\n            $event_name = strip_request_item('event_name');\n        }\n        if ($event_name == '') {\n            $event_name = null;\n        }\n\n        if ($request->has('event_welcome_msg')) {\n            $event_welcome_msg = strip_request_item_nl('event_welcome_msg');\n        }\n        if ($event_welcome_msg == '') {\n            $event_welcome_msg = null;\n        }\n\n        $result = check_request_date('buildup_start_date', __('Please enter buildup start date.'), true);\n        $buildup_start_date = $result->getValue();\n        $valid &= $result->isValid();\n\n        $result = check_request_date('event_start_date', __('Please enter event start date.'), true);\n        $event_start_date = $result->getValue();\n        $valid &= $result->isValid();\n\n        $result = check_request_date('event_end_date', __('Please enter event end date.'), true);\n        $event_end_date = $result->getValue();\n        $valid &= $result->isValid();\n\n        $result = check_request_date('teardown_end_date', __('Please enter teardown end date.'), true);\n        $teardown_end_date = $result->getValue();\n        $valid &= $result->isValid();\n\n        if (!is_null($buildup_start_date) && !is_null($event_start_date) && $buildup_start_date > $event_start_date) {\n            $valid = false;\n            error(__('The buildup start date has to be before the event start date.'));\n        }\n\n        if (!is_null($event_start_date) && !is_null($event_end_date) && $event_start_date > $event_end_date) {\n            $valid = false;\n            error(__('The event start date has to be before the event end date.'));\n        }\n\n        if (!is_null($event_end_date) && !is_null($teardown_end_date) && $event_end_date > $teardown_end_date) {\n            $valid = false;\n            error(__('The event end date has to be before the teardown end date.'));\n        }\n\n        if (!is_null($buildup_start_date) && !is_null($teardown_end_date) && $buildup_start_date > $teardown_end_date) {\n            $valid = false;\n            error(__('The buildup start date has to be before the teardown end date.'));\n        }\n\n        if ($valid) {\n            $eventConfig = new EventConfig();\n\n            foreach (\n                [\n                    'name'          => $event_name,\n                    'welcome_msg'   => $event_welcome_msg,\n                    'buildup_start' => $buildup_start_date,\n                    'event_start'   => $event_start_date,\n                    'event_end'     => $event_end_date,\n                    'teardown_end'  => $teardown_end_date,\n                ] as $key => $value\n            ) {\n                $eventConfig\n                    ->findOrNew($key)\n                    ->setAttribute('name', $key)\n                    ->setAttribute('value', $value)\n                    ->save();\n            }\n\n            engelsystem_log(\n                sprintf(\n                    'Changed event config: %s, %s, %s, %s, %s, %s',\n                    $event_name,\n                    $event_welcome_msg,\n                    $buildup_start_date ? $buildup_start_date->format('Y-m-d') : '',\n                    $event_start_date ? $event_start_date->format('Y-m-d') : '',\n                    $event_end_date ? $event_end_date->format('Y-m-d') : '',\n                    $teardown_end_date ? $teardown_end_date->format('Y-m-d') : ''\n                )\n            );\n            success(__('Settings saved.'));\n            redirect(page_link_to('admin_event_config'));\n        }\n    }\n\n    return [\n        event_config_title(),\n        EventConfig_edit_view(\n            $event_name,\n            $event_welcome_msg,\n            $buildup_start_date,\n            $event_start_date,\n            $event_end_date,\n            $teardown_end_date\n        )\n    ];\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\ShiftSignupState;\n\n/**\n * Route shift entry actions.\n *\n * @return array\n */\nfunction shift_entries_controller()\n{\n    $user = auth()->user();\n    if (!$user) {\n        redirect(page_link_to('login'));\n    }\n\n    $action = strip_request_item('action');\n    if (empty($action)) {\n        redirect(user_link($user->id));\n    }\n\n    switch ($action) {\n        case 'create':\n            return shift_entry_create_controller();\n        case 'delete':\n            return shift_entry_delete_controller();\n    }\n}\n\n/**\n * Sign up for a shift.\n *\n * @return array\n */\nfunction shift_entry_create_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    if (User_is_freeloader($user)) {\n        redirect(page_link_to('user_myshifts'));\n    }\n\n    $shift = Shift($request->input('shift_id'));\n    if (empty($shift)) {\n        redirect(user_link($user->id));\n    }\n\n    $angeltype = AngelType($request->input('angeltype_id'));\n\n    if (in_array('user_shifts_admin', $privileges)) {\n        return shift_entry_create_controller_admin($shift, $angeltype);\n    }\n\n    if (empty($angeltype)) {\n        redirect(user_link($user->id));\n    }\n\n    if (User_is_AngelType_supporter($user, $angeltype)) {\n        return shift_entry_create_controller_supporter($shift, $angeltype);\n    }\n\n    return shift_entry_create_controller_user($shift, $angeltype);\n}\n\n/**\n * Sign up for a shift.\n * Case: Admin\n *\n * @param array $shift\n * @param array $angeltype\n * @return array\n */\nfunction shift_entry_create_controller_admin($shift, $angeltype)\n{\n    $signup_user = auth()->user();\n    $request = request();\n\n    if ($request->has('user_id')) {\n        $signup_user = User::find($request->input('user_id'));\n    }\n    if (!$signup_user) {\n        redirect(shift_link($shift));\n    }\n\n    $angeltypes = AngelTypes();\n    if ($request->has('angeltype_id')) {\n        $angeltype = AngelType($request->input('angeltype_id'));\n    }\n    if (empty($angeltype)) {\n        if (count($angeltypes) == 0) {\n            redirect(shift_link($shift));\n        }\n        $angeltype = $angeltypes[0];\n    }\n\n    if ($request->hasPostData('submit')) {\n        ShiftEntry_create([\n            'SID'              => $shift['SID'],\n            'TID'              => $angeltype['id'],\n            'UID'              => $signup_user->id,\n            'Comment'          => '',\n            'freeloaded'       => false,\n            'freeload_comment' => ''\n        ]);\n\n        success(sprintf(__('%s has been subscribed to the shift.'), User_Nick_render($signup_user)));\n        redirect(shift_link($shift));\n    }\n\n    $users = User::all();\n    $users_select = [];\n    foreach ($users as $user) {\n        $users_select[$user->id] = $user->name;\n    }\n\n    $angeltypes_select = [];\n    foreach ($angeltypes as $a) {\n        $angeltypes_select[$a['id']] = $a['name'];\n    }\n\n    $room = Room($shift['RID']);\n    return [\n        ShiftEntry_create_title(),\n        ShiftEntry_create_view_admin($shift, $room, $angeltype, $angeltypes_select, $signup_user, $users_select)\n    ];\n}\n\n/**\n * Sign up for a shift.\n * Case: Supporter\n *\n * @param array $shift\n * @param array $angeltype\n * @return array\n */\nfunction shift_entry_create_controller_supporter($shift, $angeltype)\n{\n    $request = request();\n    $signup_user = auth()->user();\n\n    if ($request->has('user_id')) {\n        $signup_user = User::find($request->input('user_id'));\n    }\n    if (!UserAngelType_exists($signup_user->id, $angeltype)) {\n        error(__('User is not in angeltype.'));\n        redirect(shift_link($shift));\n    }\n\n    $needed_angeltype = NeededAngeltype_by_Shift_and_Angeltype($shift, $angeltype);\n    $shift_entries = ShiftEntries_by_shift_and_angeltype($shift['SID'], $angeltype['id']);\n    $shift_signup_state = Shift_signup_allowed(\n        $signup_user,\n        $shift,\n        $angeltype,\n        null,\n        null,\n        $needed_angeltype,\n        $shift_entries\n    );\n    if (!$shift_signup_state->isSignupAllowed()) {\n        if ($shift_signup_state->getState() == ShiftSignupState::OCCUPIED) {\n            error(__('This shift is already occupied.'));\n        }\n        redirect(shift_link($shift));\n    }\n\n    if ($request->hasPostData('submit')) {\n        ShiftEntry_create([\n            'SID'              => $shift['SID'],\n            'TID'              => $angeltype['id'],\n            'UID'              => $signup_user->id,\n            'Comment'          => '',\n            'freeloaded'       => false,\n            'freeload_comment' => ''\n        ]);\n\n        success(sprintf(__('%s has been subscribed to the shift.'), User_Nick_render($signup_user)));\n        redirect(shift_link($shift));\n    }\n\n    $users = Users_by_angeltype($angeltype);\n    $users_select = [];\n    foreach ($users as $u) {\n        $users_select[$u->id] = $u->name;\n    }\n\n    $room = Room($shift['RID']);\n    return [\n        ShiftEntry_create_title(),\n        ShiftEntry_create_view_supporter($shift, $room, $angeltype, $signup_user, $users_select)\n    ];\n}\n\n/**\n * Generates an error message for the given shift signup state.\n *\n * @param ShiftSignupState $shift_signup_state\n */\nfunction shift_entry_error_message(ShiftSignupState $shift_signup_state)\n{\n    if ($shift_signup_state->getState() == ShiftSignupState::ANGELTYPE) {\n        error(__('You need be accepted member of the angeltype.'));\n    } elseif ($shift_signup_state->getState() == ShiftSignupState::COLLIDES) {\n        error(__('This shift collides with one of your shifts.'));\n    } elseif ($shift_signup_state->getState() == ShiftSignupState::OCCUPIED) {\n        error(__('This shift is already occupied.'));\n    } elseif ($shift_signup_state->getState() == ShiftSignupState::SHIFT_ENDED) {\n        error(__('This shift ended already.'));\n    } elseif ($shift_signup_state->getState() == ShiftSignupState::NOT_ARRIVED) {\n        error(__('You are not marked as arrived.'));\n    } elseif ($shift_signup_state->getState() == ShiftSignupState::SIGNED_UP) {\n        error(__('You are signed up for this shift.'));\n    }\n}\n\n/**\n * Sign up for a shift.\n * Case: User\n *\n * @param array $shift\n * @param array $angeltype\n * @return array\n */\nfunction shift_entry_create_controller_user($shift, $angeltype)\n{\n    $request = request();\n\n    $signup_user = auth()->user();\n    $needed_angeltype = NeededAngeltype_by_Shift_and_Angeltype($shift, $angeltype);\n    $shift_entries = ShiftEntries_by_shift_and_angeltype($shift['SID'], $angeltype['id']);\n    $shift_signup_state = Shift_signup_allowed(\n        $signup_user,\n        $shift,\n        $angeltype,\n        null,\n        null,\n        $needed_angeltype,\n        $shift_entries\n    );\n    if (!$shift_signup_state->isSignupAllowed()) {\n        shift_entry_error_message($shift_signup_state);\n        redirect(shift_link($shift));\n    }\n\n    $comment = '';\n    if ($request->hasPostData('submit')) {\n        $comment = strip_request_item_nl('comment');\n        ShiftEntry_create([\n            'SID'              => $shift['SID'],\n            'TID'              => $angeltype['id'],\n            'UID'              => $signup_user->id,\n            'Comment'          => $comment,\n            'freeloaded'       => false,\n            'freeload_comment' => ''\n        ]);\n\n        if ($angeltype['restricted'] == false && !UserAngelType_exists($signup_user->id, $angeltype)) {\n            UserAngelType_create($signup_user->id, $angeltype);\n        }\n\n        success(__('You are subscribed. Thank you!'));\n        redirect(shift_link($shift));\n    }\n\n    $room = Room($shift['RID']);\n    return [\n        ShiftEntry_create_title(),\n        ShiftEntry_create_view_user($shift, $room, $angeltype, $comment)\n    ];\n}\n\n/**\n * Link to create a shift entry.\n *\n * @param array $shift\n * @param array $angeltype\n * @param array $params\n * @return string URL\n */\nfunction shift_entry_create_link($shift, $angeltype, $params = [])\n{\n    $params = array_merge([\n        'action'       => 'create',\n        'shift_id'     => $shift['SID'],\n        'angeltype_id' => $angeltype['id']\n    ], $params);\n    return page_link_to('shift_entries', $params);\n}\n\n/**\n * Link to create a shift entry as admin.\n *\n * @param array $shift\n * @param array $params\n * @return string URL\n */\nfunction shift_entry_create_link_admin($shift, $params = [])\n{\n    $params = array_merge([\n        'action'   => 'create',\n        'shift_id' => $shift['SID']\n    ], $params);\n    return page_link_to('shift_entries', $params);\n}\n\n/**\n * Load a shift entry from get parameter shift_entry_id.\n *\n * @return array\n */\nfunction shift_entry_load()\n{\n    $request = request();\n\n    if (!$request->has('shift_entry_id') || !test_request_int('shift_entry_id')) {\n        redirect(page_link_to('user_shifts'));\n    }\n    $shiftEntry = ShiftEntry($request->input('shift_entry_id'));\n    if (empty($shiftEntry)) {\n        error(__('Shift entry not found.'));\n        redirect(page_link_to('user_shifts'));\n    }\n\n    return $shiftEntry;\n}\n\n/**\n * Remove somebody from a shift.\n *\n * @return array\n */\nfunction shift_entry_delete_controller()\n{\n    $user = auth()->user();\n    $request = request();\n    $shiftEntry = shift_entry_load();\n\n    $shift = Shift($shiftEntry['SID']);\n    $angeltype = AngelType($shiftEntry['TID']);\n    $signout_user = User::find($shiftEntry['UID']);\n    if (!Shift_signout_allowed($shift, $angeltype, $signout_user->id)) {\n        error(__('You are not allowed to remove this shift entry. If necessary, ask your supporter or heaven to do so.'));\n        redirect(user_link($signout_user->id));\n    }\n\n    if ($request->hasPostData('delete')) {\n        ShiftEntry_delete($shiftEntry);\n        success(__('Shift entry removed.'));\n        redirect(shift_link($shift));\n    }\n\n    if ($user->id == $signout_user->id) {\n        return [\n            ShiftEntry_delete_title(),\n            ShiftEntry_delete_view($shift, $angeltype, $signout_user->id)\n        ];\n    }\n\n    return [\n        ShiftEntry_delete_title(),\n        ShiftEntry_delete_view_admin($shift, $angeltype, $signout_user)\n    ];\n}\n\n/**\n * Link to delete a shift entry.\n *\n * @param array $shiftEntry\n * @param array $params\n * @return string URL\n */\nfunction shift_entry_delete_link($shiftEntry, $params = [])\n{\n    $params = array_merge([\n        'action'         => 'delete',\n        'shift_entry_id' => $shiftEntry['id']\n    ], $params);\n    return page_link_to('shift_entries', $params);\n}\n", "<?php\n\nuse Engelsystem\\ShiftSignupState;\n\n/**\n * @param array $shift\n * @return string\n */\nfunction shift_link($shift)\n{\n    $parameters = ['action' => 'view'];\n    if (isset($shift['SID'])) {\n        $parameters['shift_id'] = $shift['SID'];\n    }\n\n    $link = page_link_to('shifts', $parameters);\n\n    return $link;\n}\n\n/**\n * @param array $shift\n * @return string\n */\nfunction shift_delete_link($shift)\n{\n    return page_link_to('user_shifts', ['delete_shift' => $shift['SID']]);\n}\n\n/**\n * @param array $shift\n * @return string\n */\nfunction shift_edit_link($shift)\n{\n    return page_link_to('user_shifts', ['edit_shift' => $shift['SID']]);\n}\n\n/**\n * Edit a single shift.\n *\n * @return string\n */\nfunction shift_edit_controller()\n{\n    global $privileges;\n\n    $msg = '';\n    $valid = true;\n    $request = request();\n\n    if (!in_array('admin_shifts', $privileges)) {\n        redirect(page_link_to('user_shifts'));\n    }\n\n    if (!$request->has('edit_shift') || !test_request_int('edit_shift')) {\n        redirect(page_link_to('user_shifts'));\n    }\n    $shift_id = $request->input('edit_shift');\n\n    $shift = Shift($shift_id);\n\n    $room = select_array(Rooms(), 'RID', 'Name');\n    $angeltypes = select_array(AngelTypes(), 'id', 'name');\n    $shifttypes = select_array(ShiftTypes(), 'id', 'name');\n\n    $needed_angel_types = select_array(\n        NeededAngelTypes_by_shift($shift_id),\n        'angel_type_id',\n        'count'\n    );\n    foreach (array_keys($angeltypes) as $angeltype_id) {\n        if (!isset($needed_angel_types[$angeltype_id])) {\n            $needed_angel_types[$angeltype_id] = 0;\n        }\n    }\n\n    $shifttype_id = $shift['shifttype_id'];\n    $title = $shift['title'];\n    $rid = $shift['RID'];\n    $start = $shift['start'];\n    $end = $shift['end'];\n\n    if ($request->hasPostData('submit')) {\n        // Name/Bezeichnung der Schicht, darf leer sein\n        $title = strip_request_item('title');\n\n        // Auswahl der sichtbaren Locations f\u00fcr die Schichten\n        if (\n            $request->has('rid')\n            && preg_match('/^\\d+$/', $request->input('rid'))\n            && isset($room[$request->input('rid')])\n        ) {\n            $rid = $request->input('rid');\n        } else {\n            $valid = false;\n            $msg .= error(__('Please select a room.'), true);\n        }\n\n        if ($request->has('shifttype_id') && isset($shifttypes[$request->input('shifttype_id')])) {\n            $shifttype_id = $request->input('shifttype_id');\n        } else {\n            $valid = false;\n            $msg .= error(__('Please select a shifttype.'), true);\n        }\n\n        if ($request->has('start') && $tmp = parse_date('Y-m-d H:i', $request->input('start'))) {\n            $start = $tmp;\n        } else {\n            $valid = false;\n            $msg .= error(__('Please enter a valid starting time for the shifts.'), true);\n        }\n\n        if ($request->has('end') && $tmp = parse_date('Y-m-d H:i', $request->input('end'))) {\n            $end = $tmp;\n        } else {\n            $valid = false;\n            $msg .= error(__('Please enter a valid ending time for the shifts.'), true);\n        }\n\n        if ($start >= $end) {\n            $valid = false;\n            $msg .= error(__('The ending time has to be after the starting time.'), true);\n        }\n\n        foreach ($needed_angel_types as $needed_angeltype_id => $count) {\n            $needed_angel_types[$needed_angeltype_id] = 0;\n\n            $queryKey = 'type_' . $needed_angeltype_id;\n            if ($request->has($queryKey)) {\n                if (test_request_int($queryKey)) {\n                    $needed_angel_types[$needed_angeltype_id] = trim($request->input($queryKey));\n                } else {\n                    $valid = false;\n                    $msg .= error(sprintf(\n                        __('Please check your input for needed angels of type %s.'),\n                        $angeltypes[$needed_angeltype_id]\n                    ), true);\n                }\n            }\n        }\n\n        if ($valid) {\n            $shift['shifttype_id'] = $shifttype_id;\n            $shift['title'] = $title;\n            $shift['RID'] = $rid;\n            $shift['start'] = $start;\n            $shift['end'] = $end;\n\n            Shift_update($shift);\n            NeededAngelTypes_delete_by_shift($shift_id);\n            $needed_angel_types_info = [];\n            foreach ($needed_angel_types as $type_id => $count) {\n                NeededAngelType_add($shift_id, $type_id, null, $count);\n                if ($count > 0) {\n                    $needed_angel_types_info[] = $angeltypes[$type_id] . ': ' . $count;\n                }\n            }\n\n            engelsystem_log(\n                'Updated shift \\'' . $shifttypes[$shifttype_id] . ', ' . $title\n                . '\\' from ' . date('Y-m-d H:i', $start)\n                . ' to ' . date('Y-m-d H:i', $end)\n                . ' with angel types ' . join(', ', $needed_angel_types_info)\n            );\n            success(__('Shift updated.'));\n\n            redirect(shift_link([\n                'SID' => $shift_id\n            ]));\n        }\n    }\n\n    $angel_types_spinner = '';\n    foreach ($angeltypes as $angeltype_id => $angeltype_name) {\n        $angel_types_spinner .= form_spinner('type_' . $angeltype_id, $angeltype_name,\n            $needed_angel_types[$angeltype_id]);\n    }\n\n    return page_with_title(\n        shifts_title(),\n        [\n            msg(),\n            '<noscript>'\n            . info(__('This page is much more comfortable with javascript.'), true)\n            . '</noscript>',\n            form([\n                form_select('shifttype_id', __('Shifttype'), $shifttypes, $shifttype_id),\n                form_text('title', __('Title'), $title),\n                form_select('rid', __('Room:'), $room, $rid),\n                form_text('start', __('Start:'), date('Y-m-d H:i', $start)),\n                form_text('end', __('End:'), date('Y-m-d H:i', $end)),\n                '<h2>' . __('Needed angels') . '</h2>',\n                $angel_types_spinner,\n                form_submit('submit', __('Save'))\n            ])\n        ]\n    );\n}\n\n/**\n * @return string\n */\nfunction shift_delete_controller()\n{\n    global $privileges;\n    $request = request();\n\n    if (!in_array('user_shifts_admin', $privileges)) {\n        redirect(page_link_to('user_shifts'));\n    }\n\n    // Schicht komplett l\u00f6schen (nur f\u00fcr admins/user mit user_shifts_admin privileg)\n    if (!$request->has('delete_shift') || !preg_match('/^\\d+$/', $request->input('delete_shift'))) {\n        redirect(page_link_to('user_shifts'));\n    }\n    $shift_id = $request->input('delete_shift');\n\n    $shift = Shift($shift_id);\n    if (empty($shift)) {\n        redirect(page_link_to('user_shifts'));\n    }\n\n    // Schicht l\u00f6schen best\u00e4tigt\n    if ($request->hasPostData('delete')) {\n        Shift_delete($shift_id);\n\n        engelsystem_log(\n            'Deleted shift ' . $shift['name']\n            . ' from ' . date('Y-m-d H:i', $shift['start'])\n            . ' to ' . date('Y-m-d H:i', $shift['end'])\n        );\n        success(__('Shift deleted.'));\n        redirect(page_link_to('user_shifts'));\n    }\n\n    return page_with_title(shifts_title(), [\n        error(sprintf(\n            __('Do you want to delete the shift %s from %s to %s?'),\n            $shift['name'],\n            date('Y-m-d H:i', $shift['start']),\n            date('H:i', $shift['end'])\n        ), true),\n        form([\n            form_hidden('delete_shift', $shift_id),\n            form_submit('delete', __('delete')),\n        ]),\n    ]);\n}\n\n/**\n * @return array\n */\nfunction shift_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    if (!in_array('user_shifts', $privileges)) {\n        redirect(page_link_to('/'));\n    }\n\n    if (!$request->has('shift_id')) {\n        redirect(page_link_to('user_shifts'));\n    }\n\n    $shift = Shift($request->input('shift_id'));\n    if (empty($shift)) {\n        error(__('Shift could not be found.'));\n        redirect(page_link_to('user_shifts'));\n    }\n\n    $shifttype = ShiftType($shift['shifttype_id']);\n    $room = Room($shift['RID']);\n    $angeltypes = AngelTypes();\n    $user_shifts = Shifts_by_user($user->id);\n\n    $shift_signup_state = new ShiftSignupState(ShiftSignupState::OCCUPIED, 0);\n    foreach ($angeltypes as &$angeltype) {\n        $needed_angeltype = NeededAngeltype_by_Shift_and_Angeltype($shift, $angeltype);\n        if (empty($needed_angeltype)) {\n            continue;\n        }\n\n        $shift_entries = ShiftEntries_by_shift_and_angeltype($shift['SID'], $angeltype['id']);\n\n        $angeltype_signup_state = Shift_signup_allowed(\n            $user,\n            $shift,\n            $angeltype,\n            null,\n            $user_shifts,\n            $needed_angeltype,\n            $shift_entries\n        );\n        $shift_signup_state->combineWith($angeltype_signup_state);\n        $angeltype['shift_signup_state'] = $angeltype_signup_state;\n    }\n\n    return [\n        $shift['name'],\n        Shift_view($shift, $shifttype, $room, $angeltypes, $shift_signup_state)\n    ];\n}\n\n/**\n * @return array|false\n */\nfunction shifts_controller()\n{\n    $request = request();\n    if (!$request->has('action')) {\n        redirect(page_link_to('user_shifts'));\n    }\n\n    switch ($request->input('action')) {\n        case 'view':\n            return shift_controller();\n        /** @noinspection PhpMissingBreakStatementInspection */\n        case 'next':\n            shift_next_controller();\n        default:\n            redirect(page_link_to('/'));\n    }\n\n    return false;\n}\n\n/**\n * Redirects the user to his next shift.\n */\nfunction shift_next_controller()\n{\n    global $privileges;\n\n    if (!in_array('user_shifts', $privileges)) {\n        redirect(page_link_to('/'));\n    }\n\n    $upcoming_shifts = ShiftEntries_upcoming_for_user(auth()->user()->id);\n\n    if (!empty($upcoming_shifts)) {\n        redirect(shift_link($upcoming_shifts[0]));\n    }\n\n    redirect(page_link_to('user_shifts'));\n}\n\n/**\n * Export filtered shifts via JSON.\n * (Like iCal Export or shifts view)\n */\nfunction shifts_json_export_controller()\n{\n    $request = request();\n\n    if (!$request->has('key') || !preg_match('/^[\\da-f]{32}$/', $request->input('key'))) {\n        engelsystem_error('Missing key.');\n    }\n\n    $user = auth()->apiUser('key');\n    if (!$user) {\n        engelsystem_error('Key invalid.');\n    }\n    if (!in_array('shifts_json_export', privileges_for_user($user->id))) {\n        engelsystem_error('No privilege for shifts_json_export.');\n    }\n\n    $shifts = load_ical_shifts();\n\n    header('Content-Type: application/json; charset=utf-8');\n    raw_output(json_encode($shifts));\n}\n\n/**\n * Returns users shifts to export.\n *\n * @return array\n */\nfunction load_ical_shifts()\n{\n    return Shifts_by_user(auth()->user()->id);\n}\n", "<?php\n\n/**\n * @param array $shifttype\n * @return string\n */\nfunction shifttype_link($shifttype)\n{\n    return page_link_to('shifttypes', ['action' => 'view', 'shifttype_id' => $shifttype['id']]);\n}\n\n/**\n * Delete a shifttype.\n *\n * @return array\n */\nfunction shifttype_delete_controller()\n{\n    $request = request();\n    if (!$request->has('shifttype_id')) {\n        redirect(page_link_to('shifttypes'));\n    }\n\n    $shifttype = ShiftType($request->input('shifttype_id'));\n    if (empty($shifttype)) {\n        redirect(page_link_to('shifttypes'));\n    }\n\n    if ($request->hasPostData('delete')) {\n        ShiftType_delete($shifttype['id']);\n\n        engelsystem_log('Deleted shifttype ' . $shifttype['name']);\n        success(sprintf(__('Shifttype %s deleted.'), $shifttype['name']));\n        redirect(page_link_to('shifttypes'));\n    }\n\n    return [\n        sprintf(__('Delete shifttype %s'), $shifttype['name']),\n        ShiftType_delete_view($shifttype)\n    ];\n}\n\n/**\n * Edit or create shift type.\n *\n * @return array\n */\nfunction shifttype_edit_controller()\n{\n    $shifttype_id = null;\n    $name = '';\n    $angeltype_id = null;\n    $description = '';\n\n    $angeltypes = AngelTypes();\n    $request = request();\n\n    if ($request->has('shifttype_id')) {\n        $shifttype = ShiftType($request->input('shifttype_id'));\n        if (empty($shifttype)) {\n            error(__('Shifttype not found.'));\n            redirect(page_link_to('shifttypes'));\n        }\n        $shifttype_id = $shifttype['id'];\n        $name = $shifttype['name'];\n        $angeltype_id = $shifttype['angeltype_id'];\n        $description = $shifttype['description'];\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if ($request->has('name') && $request->input('name') != '') {\n            $name = strip_request_item('name');\n        } else {\n            $valid = false;\n            error(__('Please enter a name.'));\n        }\n\n        if ($request->has('angeltype_id') && preg_match('/^\\d+$/', $request->input('angeltype_id'))) {\n            $angeltype_id = $request->input('angeltype_id');\n        } else {\n            $angeltype_id = null;\n        }\n\n        if ($request->has('description')) {\n            $description = strip_request_item_nl('description');\n        }\n\n        if ($valid) {\n            if ($shifttype_id) {\n                ShiftType_update($shifttype_id, $name, $angeltype_id, $description);\n\n                engelsystem_log('Updated shifttype ' . $name);\n                success(__('Updated shifttype.'));\n            } else {\n                $shifttype_id = ShiftType_create($name, $angeltype_id, $description);\n\n                engelsystem_log('Created shifttype ' . $name);\n                success(__('Created shifttype.'));\n            }\n            redirect(page_link_to('shifttypes', ['action' => 'view', 'shifttype_id' => $shifttype_id]));\n        }\n    }\n\n    return [\n        shifttypes_title(),\n        ShiftType_edit_view($name, $angeltype_id, $angeltypes, $description, $shifttype_id)\n    ];\n}\n\n/**\n * @return array\n */\nfunction shifttype_controller()\n{\n    $request = request();\n    if (!$request->has('shifttype_id')) {\n        redirect(page_link_to('shifttypes'));\n    }\n    $shifttype = ShiftType($request->input('shifttype_id'));\n    if (empty($shifttype)) {\n        redirect(page_link_to('shifttypes'));\n    }\n\n    $angeltype = [];\n    if (!empty($shifttype['angeltype_id'])) {\n        $angeltype = AngelType($shifttype['angeltype_id']);\n    }\n\n    return [\n        $shifttype['name'],\n        ShiftType_view($shifttype, $angeltype)\n    ];\n}\n\n/**\n * List all shift types.\n *\n * @return array\n */\nfunction shifttypes_list_controller()\n{\n    $shifttypes = ShiftTypes();\n\n    return [\n        shifttypes_title(),\n        ShiftTypes_list_view($shifttypes)\n    ];\n}\n\n/**\n * Text for shift type related links.\n *\n * @return string\n */\nfunction shifttypes_title()\n{\n    return __('Shifttypes');\n}\n\n/**\n * Route shift type actions\n *\n * @return array\n */\nfunction shifttypes_controller()\n{\n    $request = request();\n    $action = 'list';\n    if ($request->has('action')) {\n        $action = $request->input('action');\n    }\n\n    switch ($action) {\n        case 'view':\n            return shifttype_controller();\n        case 'edit':\n            return shifttype_edit_controller();\n        case 'delete':\n            return shifttype_delete_controller();\n        case 'list':\n        default:\n            return shifttypes_list_controller();\n    }\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * Display a hint for team/angeltype supporters if there are unconfirmed users for his angeltype.\n *\n * @return string|null\n */\nfunction user_angeltypes_unconfirmed_hint()\n{\n    $unconfirmed_user_angeltypes = User_unconfirmed_AngelTypes(auth()->user()->id);\n    if (count($unconfirmed_user_angeltypes) == 0) {\n        return null;\n    }\n\n    $unconfirmed_links = [];\n    foreach ($unconfirmed_user_angeltypes as $user_angeltype) {\n        $unconfirmed_links[] = '<a href=\"'\n            . page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $user_angeltype['angeltype_id']])\n            . '\">' . $user_angeltype['name']\n            . ' (+' . $user_angeltype['count'] . ')'\n            . '</a>';\n    }\n\n    $count = count($unconfirmed_user_angeltypes);\n    return _e(\n            'There is %d unconfirmed angeltype.',\n            'There are %d unconfirmed angeltypes.',\n            $count,\n            [$count]\n        )\n        . ' ' . __('Angel types which need approvals:')\n        . ' ' . join(', ', $unconfirmed_links);\n}\n\n/**\n * Remove all unconfirmed users from a specific angeltype.\n *\n * @return array\n */\nfunction user_angeltypes_delete_all_controller()\n{\n    $request = request();\n\n    if (!$request->has('angeltype_id')) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType($request->input('angeltype_id'));\n    if (empty($angeltype)) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if (!User_is_AngelType_supporter(auth()->user(), $angeltype)) {\n        error(__('You are not allowed to delete all users for this angeltype.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->hasPostData('deny_all')) {\n        UserAngelTypes_delete_all($angeltype['id']);\n\n        engelsystem_log(sprintf('Denied all users for angeltype %s', AngelType_name_render($angeltype)));\n        success(sprintf(__('Denied all users for angeltype %s.'), AngelType_name_render($angeltype)));\n        redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n    }\n\n    return [\n        __('Deny all users'),\n        UserAngelTypes_delete_all_view($angeltype)\n    ];\n}\n\n/**\n * Confirm all unconfirmed users for an angeltype.\n *\n * @return array\n */\nfunction user_angeltypes_confirm_all_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    if (!$request->has('angeltype_id')) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType($request->input('angeltype_id'));\n    if (empty($angeltype)) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if (!in_array('admin_user_angeltypes', $privileges) && !User_is_AngelType_supporter($user, $angeltype)) {\n        error(__('You are not allowed to confirm all users for this angeltype.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->hasPostData('confirm_all')) {\n        UserAngelTypes_confirm_all($angeltype['id'], $user->id);\n\n        engelsystem_log(sprintf('Confirmed all users for angeltype %s', AngelType_name_render($angeltype)));\n        success(sprintf(__('Confirmed all users for angeltype %s.'), AngelType_name_render($angeltype)));\n        redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n    }\n\n    return [\n        __('Confirm all users'),\n        UserAngelTypes_confirm_all_view($angeltype)\n    ];\n}\n\n/**\n * Confirm an user for an angeltype.\n *\n * @return array\n */\nfunction user_angeltype_confirm_controller()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$request->has('user_angeltype_id')) {\n        error(__('User angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $user_angeltype = UserAngelType($request->input('user_angeltype_id'));\n    if (empty($user_angeltype)) {\n        error(__('User angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType($user_angeltype['angeltype_id']);\n    if (empty($angeltype)) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if (!User_is_AngelType_supporter($user, $angeltype)) {\n        error(__('You are not allowed to confirm this users angeltype.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $user_source = User::find($user_angeltype['user_id']);\n    if (!$user_source) {\n        error(__('User doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->hasPostData('confirm_user')) {\n        UserAngelType_confirm($user_angeltype['id'], $user->id);\n\n        engelsystem_log(sprintf(\n            '%s confirmed for angeltype %s',\n            User_Nick_render($user_source),\n            AngelType_name_render($angeltype)\n        ));\n        success(sprintf(\n            __('%s confirmed for angeltype %s.'),\n            User_Nick_render($user_source),\n            AngelType_name_render($angeltype)\n        ));\n        redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n    }\n\n    return [\n        __('Confirm angeltype for user'),\n        UserAngelType_confirm_view($user_angeltype, $user_source, $angeltype)\n    ];\n}\n\n/**\n * Remove a user from an Angeltype.\n *\n * @return array\n */\nfunction user_angeltype_delete_controller()\n{\n    $request = request();\n    $user = auth()->user();\n\n    if (!$request->has('user_angeltype_id')) {\n        error(__('User angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $user_angeltype = UserAngelType($request->input('user_angeltype_id'));\n    if (empty($user_angeltype)) {\n        error(__('User angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType($user_angeltype['angeltype_id']);\n    if (empty($angeltype)) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $user_source = User::find($user_angeltype['user_id']);\n    if (!$user_source) {\n        error(__('User doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($user->id != $user_angeltype['user_id'] && !User_is_AngelType_supporter($user, $angeltype)) {\n        error(__('You are not allowed to delete this users angeltype.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->hasPostData('delete')) {\n        UserAngelType_delete($user_angeltype);\n\n        $success_message = sprintf(__('User %s removed from %s.'), User_Nick_render($user_source), $angeltype['name']);\n        engelsystem_log($success_message);\n        success($success_message);\n\n        redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n    }\n\n    return [\n        __('Remove angeltype'),\n        UserAngelType_delete_view($user_angeltype, $user_source, $angeltype)\n    ];\n}\n\n/**\n * Update an UserAngelType.\n *\n * @return array\n */\nfunction user_angeltype_update_controller()\n{\n    global $privileges;\n    $supporter = false;\n    $request = request();\n\n    if (!in_array('admin_angel_types', $privileges)) {\n        error(__('You are not allowed to set supporter rights.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if (!$request->has('user_angeltype_id')) {\n        error(__('User angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->has('supporter') && preg_match('/^[01]$/', $request->input('supporter'))) {\n        $supporter = $request->input('supporter') == '1';\n    } else {\n        error(__('No supporter update given.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $user_angeltype = UserAngelType($request->input('user_angeltype_id'));\n    if (empty($user_angeltype)) {\n        error(__('User angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType($user_angeltype['angeltype_id']);\n    if (empty($angeltype)) {\n        error(__('Angeltype doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    $user_source = User::find($user_angeltype['user_id']);\n    if (!$user_source) {\n        error(__('User doesn\\'t exist.'));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->hasPostData('submit')) {\n        UserAngelType_update($user_angeltype['id'], $supporter);\n\n        $success_message = sprintf(\n            $supporter\n                ? __('Added supporter rights for %s to %s.')\n                : __('Removed supporter rights for %s from %s.'),\n            AngelType_name_render($angeltype),\n            User_Nick_render($user_source)\n        );\n        engelsystem_log($success_message);\n        success($success_message);\n\n        redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n    }\n\n    return [\n        $supporter ? __('Add supporter rights') : __('Remove supporter rights'),\n        UserAngelType_update_view($user_angeltype, $user_source, $angeltype, $supporter)\n    ];\n}\n\n/**\n * User joining an Angeltype (Or supporter doing this for him).\n *\n * @return array\n */\nfunction user_angeltype_add_controller()\n{\n    $angeltype = load_angeltype();\n\n    // User is joining by itself\n    if (!User_is_AngelType_supporter(auth()->user(), $angeltype)) {\n        return user_angeltype_join_controller($angeltype);\n    }\n\n    // Allow to add any user\n\n    // Default selection\n    $user_source = auth()->user();\n\n    // Load possible users, that are not in the angeltype already\n    $users_source = Users_by_angeltype_inverted($angeltype);\n\n    if (request()->hasPostData('submit')) {\n        $user_source = load_user();\n\n        if (!UserAngelType_exists($user_source->id, $angeltype)) {\n            $user_angeltype_id = UserAngelType_create($user_source->id, $angeltype);\n\n            engelsystem_log(sprintf(\n                'User %s added to %s.',\n                User_Nick_render($user_source),\n                AngelType_name_render($angeltype)\n            ));\n            success(sprintf(\n                __('User %s added to %s.'),\n                User_Nick_render($user_source),\n                AngelType_name_render($angeltype)\n            ));\n\n            UserAngelType_confirm($user_angeltype_id, $user_source->id);\n            engelsystem_log(sprintf(\n                'User %s confirmed as %s.',\n                User_Nick_render($user_source),\n                AngelType_name_render($angeltype)\n            ));\n\n            redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n        }\n    }\n\n    return [\n        __('Add user to angeltype'),\n        UserAngelType_add_view($angeltype, $users_source, $user_source->id)\n    ];\n}\n\n/**\n * A user joins an angeltype.\n *\n * @param array $angeltype\n * @return array\n */\nfunction user_angeltype_join_controller($angeltype)\n{\n    global $privileges;\n    $user = auth()->user();\n\n    $user_angeltype = UserAngelType_by_User_and_AngelType($user->id, $angeltype);\n    if (!empty($user_angeltype)) {\n        error(sprintf(__('You are already a %s.'), $angeltype['name']));\n        redirect(page_link_to('angeltypes'));\n    }\n\n    if (request()->hasPostData('submit')) {\n        $user_angeltype_id = UserAngelType_create($user->id, $angeltype);\n\n        $success_message = sprintf(__('You joined %s.'), $angeltype['name']);\n        engelsystem_log(sprintf(\n            'User %s joined %s.',\n            User_Nick_render($user),\n            AngelType_name_render($angeltype)\n        ));\n        success($success_message);\n\n        if (in_array('admin_user_angeltypes', $privileges)) {\n            UserAngelType_confirm($user_angeltype_id, $user->id);\n            engelsystem_log(sprintf(\n                'User %s confirmed as %s.',\n                User_Nick_render($user),\n                AngelType_name_render($angeltype)\n            ));\n        }\n\n        redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]));\n    }\n\n    return [\n        sprintf(__('Become a %s'), $angeltype['name']),\n        UserAngelType_join_view($user, $angeltype)\n    ];\n}\n\n/**\n * Route UserAngelType actions.\n *\n * @return array\n */\nfunction user_angeltypes_controller()\n{\n    $request = request();\n    if (!$request->has('action')) {\n        redirect(page_link_to('angeltypes'));\n    }\n\n    switch ($request->input('action')) {\n        case 'delete_all':\n            return user_angeltypes_delete_all_controller();\n        case 'confirm_all':\n            return user_angeltypes_confirm_all_controller();\n        case 'confirm':\n            return user_angeltype_confirm_controller();\n        case 'delete':\n            return user_angeltype_delete_controller();\n        case 'update':\n            return user_angeltype_update_controller();\n        case 'add':\n            return user_angeltype_add_controller();\n        default:\n            redirect(page_link_to('angeltypes'));\n    }\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * Generates a hint, if user joined angeltypes that require a driving license and the user has no driver license\n * information provided.\n *\n * @return string|null\n */\nfunction user_driver_license_required_hint()\n{\n    $user = auth()->user();\n\n    $angeltypes = User_angeltypes($user->id);\n    $user_driver_license = UserDriverLicense($user->id);\n\n    // User has already entered data, no hint needed.\n    if (!empty($user_driver_license)) {\n        return null;\n    }\n\n    foreach ($angeltypes as $angeltype) {\n        if ($angeltype['requires_driver_license']) {\n            return sprintf(\n                __('You joined an angeltype which requires a driving license. Please edit your driving license information here: %s.'),\n                '<a href=\"' . user_driver_license_edit_link() . '\">' . __('driving license information') . '</a>'\n            );\n        }\n    }\n\n    return null;\n}\n\n/**\n * Route user driver licenses actions.\n *\n * @return array\n */\nfunction user_driver_licenses_controller()\n{\n    $user = auth()->user();\n\n    if (!$user) {\n        redirect(page_link_to(''));\n    }\n\n    $action = strip_request_item('action', 'edit');\n\n    switch ($action) {\n        default:\n        case 'edit':\n            return user_driver_license_edit_controller();\n    }\n}\n\n/**\n * Link to user driver license edit page for given user.\n *\n * @param User $user\n * @return string\n */\nfunction user_driver_license_edit_link($user = null)\n{\n    if (!$user) {\n        return page_link_to('user_driver_licenses');\n    }\n\n    return page_link_to('user_driver_licenses', ['user_id' => $user->id]);\n}\n\n/**\n * Loads the user for the driver license.\n *\n * @return User\n */\nfunction user_driver_license_load_user()\n{\n    $request = request();\n    $user_source = auth()->user();\n\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->input('user_id'));\n        if (empty($user_source)) {\n            redirect(user_driver_license_edit_link());\n        }\n    }\n\n    return $user_source;\n}\n\n/**\n * Edit a users driver license information.\n *\n * @return array\n */\nfunction user_driver_license_edit_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n    $user_source = user_driver_license_load_user();\n\n    // only privilege admin_user can edit other users driver license information\n    if ($user->id != $user_source->id && !in_array('admin_user', $privileges)) {\n        redirect(user_driver_license_edit_link());\n    }\n\n    $user_driver_license = UserDriverLicense($user_source->id);\n    if (empty($user_driver_license)) {\n        $wants_to_drive = false;\n        $user_driver_license = UserDriverLicense_new();\n    } else {\n        $wants_to_drive = true;\n    }\n\n    if ($request->hasPostData('submit')) {\n        $wants_to_drive = $request->has('wants_to_drive');\n        if ($wants_to_drive) {\n            $user_driver_license['has_car'] = $request->has('has_car');\n            $user_driver_license['has_license_car'] = $request->has('has_license_car');\n            $user_driver_license['has_license_3_5t_transporter'] = $request->has('has_license_3_5t_transporter');\n            $user_driver_license['has_license_7_5t_truck'] = $request->has('has_license_7_5t_truck');\n            $user_driver_license['has_license_12_5t_truck'] = $request->has('has_license_12_5t_truck');\n            $user_driver_license['has_license_forklift'] = $request->has('has_license_forklift');\n\n            if (UserDriverLicense_valid($user_driver_license)) {\n                if (empty($user_driver_license['user_id'])) {\n                    $user_driver_license = UserDriverLicenses_create($user_driver_license, $user_source->id);\n                } else {\n                    UserDriverLicenses_update($user_driver_license);\n                }\n                engelsystem_log('Driver license information updated.');\n                success(__('Your driver license information has been saved.'));\n                redirect(user_link($user_source->id));\n            } else {\n                error(__('Please select at least one driving license.'));\n            }\n        } elseif (!empty($user_driver_license['user_id'])) {\n            UserDriverLicenses_delete($user_source->id);\n            engelsystem_log('Driver license information removed.');\n            success(__('Your driver license information has been removed.'));\n            redirect(user_link($user_source->id));\n        }\n    }\n\n    return [\n        sprintf(__('Edit %s driving license information'), $user_source->name),\n        UserDriverLicense_edit_view($user_source, $wants_to_drive, $user_driver_license)\n    ];\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * Delete a work log entry.\n *\n * @return array\n */\nfunction user_worklog_delete_controller()\n{\n    $request = request();\n    $userWorkLog = UserWorkLog($request->input('user_worklog_id'));\n    if (empty($userWorkLog)) {\n        redirect(user_link(auth()->user()->id));\n    }\n    $user_source = User::find($userWorkLog['user_id']);\n\n    if ($request->hasPostData('submit')) {\n        UserWorkLog_delete($userWorkLog);\n\n        success(__('Work log entry deleted.'));\n        redirect(user_link($user_source->id));\n    }\n\n    return [\n        UserWorkLog_delete_title(),\n        UserWorkLog_delete_view($user_source)\n    ];\n}\n\n/**\n * Edit work log for user.\n *\n * @return array\n */\nfunction user_worklog_edit_controller()\n{\n    $request = request();\n    $userWorkLog = UserWorkLog($request->input('user_worklog_id'));\n    if (empty($userWorkLog)) {\n        redirect(user_link(auth()->user()->id));\n    }\n    $user_source = User::find($userWorkLog['user_id']);\n\n    if ($request->hasPostData('submit')) {\n        list ($valid, $userWorkLog) = user_worklog_from_request($userWorkLog);\n\n        if ($valid) {\n            UserWorkLog_update($userWorkLog);\n\n            success(__('Work log entry updated.'));\n            redirect(user_link($user_source->id));\n        }\n    }\n\n    return [\n        UserWorkLog_edit_title(),\n        UserWorkLog_edit_view($user_source, $userWorkLog)\n    ];\n}\n\n/**\n * Handle form\n *\n * @param array $userWorkLog\n * @return array [bool $valid, UserWorkLog $userWorkLog]\n */\nfunction user_worklog_from_request($userWorkLog)\n{\n    $request = request();\n\n    $valid = true;\n\n    $userWorkLog['work_timestamp'] = parse_date(\n        'Y-m-d H:i',\n        $request->input('work_timestamp') . ' 00:00'\n    );\n    if (is_null($userWorkLog['work_timestamp'])) {\n        $valid = false;\n        error(__('Please enter work date.'));\n    }\n\n    $userWorkLog['work_hours'] = $request->input('work_hours');\n    if (!preg_match(\"/[0-9]+(\\.[0-9]+)?/\", $userWorkLog['work_hours'])) {\n        $valid = false;\n        error(__('Please enter work hours in format ##[.##].'));\n    }\n\n    $userWorkLog['comment'] = $request->input('comment');\n    if (empty($userWorkLog['comment'])) {\n        $valid = false;\n        error(__('Please enter a comment.'));\n    }\n\n    return [\n        $valid,\n        $userWorkLog\n    ];\n}\n\n/**\n * Add work log entry to user.\n *\n * @return array\n */\nfunction user_worklog_add_controller()\n{\n    $request = request();\n    $user_source = User::find($request->input('user_id'));\n    if (!$user_source) {\n        redirect(user_link(auth()->user()->id));\n    }\n\n    $userWorkLog = UserWorkLog_new($user_source->id);\n\n    if ($request->hasPostData('submit')) {\n        list ($valid, $userWorkLog) = user_worklog_from_request($userWorkLog);\n\n        if ($valid) {\n            UserWorkLog_create($userWorkLog);\n\n            success(__('Work log entry created.'));\n            redirect(user_link($user_source->id));\n        }\n    }\n\n    return [\n        UserWorkLog_add_title(),\n        UserWorkLog_add_view($user_source, $userWorkLog)\n    ];\n}\n\n/**\n * Link to work log entry add for given user.\n *\n * @param User $user\n *\n * @return string\n */\nfunction user_worklog_add_link($user)\n{\n    return page_link_to('user_worklog', [\n        'action'  => 'add',\n        'user_id' => $user->id,\n    ]);\n}\n\n/**\n * Link to work log entry edit.\n *\n * @param array $userWorkLog\n * @return string\n */\nfunction user_worklog_edit_link($userWorkLog)\n{\n    return page_link_to('user_worklog', [\n        'action'          => 'edit',\n        'user_worklog_id' => $userWorkLog['id']\n    ]);\n}\n\n/**\n * Link to work log entry delete.\n *\n * @param array   $userWorkLog\n * @param array[] $parameters\n * @return string\n */\nfunction user_worklog_delete_link($userWorkLog, $parameters = [])\n{\n    return page_link_to('user_worklog', array_merge([\n        'action'          => 'delete',\n        'user_worklog_id' => $userWorkLog['id']\n    ], $parameters));\n}\n\n/**\n * Work log entry actions\n *\n * @return array\n */\nfunction user_worklog_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n\n    if (!in_array('admin_user_worklog', $privileges)) {\n        redirect(user_link($user->id));\n    }\n\n    $request = request();\n    $action = $request->input('action');\n    if (!$request->has('action')) {\n        redirect(user_link($user->id));\n    }\n\n    switch ($action) {\n        case 'add':\n            return user_worklog_add_controller();\n        case 'edit':\n            return user_worklog_edit_controller();\n        case 'delete':\n            return user_worklog_delete_controller();\n    }\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\nuse Engelsystem\\Models\\User\\PasswordReset;\nuse Engelsystem\\Models\\User\\State;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\ShiftCalendarRenderer;\nuse Engelsystem\\ShiftsFilter;\n\n/**\n * Route user actions.\n *\n * @return array\n */\nfunction users_controller()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$user) {\n        redirect(page_link_to(''));\n    }\n\n    $action = 'list';\n    if ($request->has('action')) {\n        $action = $request->input('action');\n    }\n\n    switch ($action) {\n        case 'view':\n            return user_controller();\n        case 'delete':\n            return user_delete_controller();\n        case 'edit_vouchers':\n            return user_edit_vouchers_controller();\n        case 'list':\n        default:\n            return users_list_controller();\n    }\n}\n\n/**\n * Delete a user, requires to enter own password for reasons.\n *\n * @return array\n */\nfunction user_delete_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->query->get('user_id'));\n    } else {\n        $user_source = $user;\n    }\n\n    if (!in_array('admin_user', $privileges)) {\n        redirect(page_link_to(''));\n    }\n\n    // You cannot delete yourself\n    if ($user->id == $user_source->id) {\n        error(__('You cannot delete yourself.'));\n        redirect(user_link($user->id));\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if (\n        !(\n            $request->has('password')\n            && verify_password($request->postData('password'), $user->password, $user->id)\n        )\n        ) {\n            $valid = false;\n            error(__('Your password is incorrect.  Please try it again.'));\n        }\n\n        if ($valid) {\n            // Load data before user deletion to prevent errors when displaying\n            $user_source->load(['contact', 'personalData', 'settings', 'state']);\n            $user_source->delete();\n\n            mail_user_delete($user_source);\n            success(__('User deleted.'));\n            engelsystem_log(sprintf('Deleted %s', User_Nick_render($user_source)));\n\n            redirect(users_link());\n        }\n    }\n\n    return [\n        sprintf(__('Delete %s'), $user_source->name),\n        User_delete_view($user_source)\n    ];\n}\n\n/**\n * @return string\n */\nfunction users_link()\n{\n    return page_link_to('users');\n}\n\n/**\n * @param int $userId\n * @return string\n */\nfunction user_edit_link($userId)\n{\n    return page_link_to('admin_user', ['user_id' => $userId]);\n}\n\n/**\n * @param int $userId\n * @return string\n */\nfunction user_delete_link($userId)\n{\n    return page_link_to('users', ['action' => 'delete', 'user_id' => $userId]);\n}\n\n/**\n * @param int $userId\n * @return string\n */\nfunction user_link($userId)\n{\n    return page_link_to('users', ['action' => 'view', 'user_id' => $userId]);\n}\n\n/**\n * @return array\n */\nfunction user_edit_vouchers_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->input('user_id'));\n    } else {\n        $user_source = $user;\n    }\n\n    if (!in_array('admin_user', $privileges)) {\n        redirect(page_link_to(''));\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        $vouchers = '';\n        if (\n            $request->has('vouchers')\n            && test_request_int('vouchers')\n            && trim($request->input('vouchers')) >= 0\n        ) {\n            $vouchers = trim($request->input('vouchers'));\n        } else {\n            $valid = false;\n            error(__('Please enter a valid number of vouchers.'));\n        }\n\n        if ($valid) {\n            $user_source->state->got_voucher = $vouchers;\n            $user_source->state->save();\n\n            success(__('Saved the number of vouchers.'));\n            engelsystem_log(User_Nick_render($user_source) . ': ' . sprintf('Got %s vouchers',\n                    $user_source->state->got_voucher));\n\n            redirect(user_link($user_source->id));\n        }\n    }\n\n    return [\n        sprintf(__('%s\\'s vouchers'), $user_source->name),\n        User_edit_vouchers_view($user_source)\n    ];\n}\n\n/**\n * @return array\n */\nfunction user_controller()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    $user_source = $user;\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->input('user_id'));\n        if (!$user_source) {\n            error(__('User not found.'));\n            redirect(page_link_to('/'));\n        }\n    }\n\n    $shifts = Shifts_by_user($user_source->id, in_array('user_shifts_admin', $privileges));\n    foreach ($shifts as &$shift) {\n        // TODO: Move queries to model\n        $shift['needed_angeltypes'] = DB::select('\n            SELECT DISTINCT `AngelTypes`.*\n            FROM `ShiftEntry`\n            JOIN `AngelTypes` ON `ShiftEntry`.`TID`=`AngelTypes`.`id`\n            WHERE `ShiftEntry`.`SID` = ?\n            ORDER BY `AngelTypes`.`name`\n            ',\n            [$shift['SID']]\n        );\n        foreach ($shift['needed_angeltypes'] as &$needed_angeltype) {\n            $needed_angeltype['users'] = DB::select('\n                  SELECT `ShiftEntry`.`freeloaded`, `users`.*\n                  FROM `ShiftEntry`\n                  JOIN `users` ON `ShiftEntry`.`UID`=`users`.`id`\n                  WHERE `ShiftEntry`.`SID` = ?\n                  AND `ShiftEntry`.`TID` = ?\n                ',\n                [$shift['SID'], $needed_angeltype['id']]\n            );\n        }\n    }\n\n    if (empty($user_source->api_key)) {\n        User_reset_api_key($user_source, false);\n    }\n\n    if ($user_source->state->force_active) {\n        $tshirt_score = __('Enough');\n    } else {\n        $tshirt_score = sprintf('%.2f', User_tshirt_score($user_source->id)) . '&nbsp;h';\n    }\n\n    return [\n        $user_source->name,\n        User_view(\n            $user_source,\n            in_array('admin_user', $privileges),\n            User_is_freeloader($user_source),\n            User_angeltypes($user_source->id),\n            User_groups($user_source->id),\n            $shifts,\n            $user->id == $user_source->id,\n            $tshirt_score,\n            in_array('admin_active', $privileges),\n            in_array('admin_user_worklog', $privileges),\n            UserWorkLogsForUser($user_source->id)\n        )\n    ];\n}\n\n/**\n * List all users.\n *\n * @return array\n */\nfunction users_list_controller()\n{\n    global $privileges;\n    $request = request();\n\n    if (!in_array('admin_user', $privileges)) {\n        redirect(page_link_to(''));\n    }\n\n    $order_by = 'name';\n    if ($request->has('OrderBy') && in_array($request->input('OrderBy'), [\n            'name',\n            'last_name',\n            'first_name',\n            'dect',\n            'email',\n            'shirt_size',\n            'arrived',\n            'active',\n            'force_active',\n            'got_shirt',\n            'last_login_at',\n        ])) {\n        $order_by = $request->input('OrderBy');\n    }\n\n    /** @var User[] $users */\n    $users = User::query()\n        ->leftJoin('users_contact', 'users.id', '=', 'users_contact.user_id')\n        ->leftJoin('users_personal_data', 'users.id', '=', 'users_personal_data.user_id')\n        ->leftJoin('users_state', 'users.id', '=', 'users_state.user_id')\n        ->orderBy($order_by)\n        ->orderBy('name')\n        ->get();\n    foreach ($users as $user) {\n        $user->setAttribute('freeloads', count(ShiftEntries_freeloaded_by_user($user->id)));\n    }\n\n    return [\n        __('All users'),\n        Users_view(\n            $users,\n            $order_by,\n            State::whereArrived(true)->count(),\n            State::whereActive(true)->count(),\n            State::whereForceActive(true)->count(),\n            ShiftEntries_freeloaded_count(),\n            State::whereGotShirt(true)->count(),\n            State::query()->sum('got_voucher')\n        )\n    ];\n}\n\n/**\n * Second step of password recovery: set a new password using the token link from email\n *\n * @return string\n */\nfunction user_password_recovery_set_new_controller()\n{\n    $request = request();\n    $passwordReset = PasswordReset::whereToken($request->input('token'))->first();\n    if (!$passwordReset) {\n        error(__('Token is not correct.'));\n        redirect(page_link_to('login'));\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if (\n            $request->has('password')\n            && strlen($request->postData('password')) >= config('min_password_length')\n        ) {\n            if ($request->postData('password') != $request->postData('password2')) {\n                $valid = false;\n                error(__('Your passwords don\\'t match.'));\n            }\n        } else {\n            $valid = false;\n            error(__('Your password is to short (please use at least 6 characters).'));\n        }\n\n        if ($valid) {\n            set_password($passwordReset->user->id, $request->postData('password'));\n            success(__('Password saved.'));\n            $passwordReset->delete();\n            redirect(page_link_to('login'));\n        }\n    }\n\n    return User_password_set_view();\n}\n\n/**\n * First step of password recovery: display a form that asks for your email and send email with recovery link\n *\n * @return string\n */\nfunction user_password_recovery_start_controller()\n{\n    $request = request();\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        $user_source = null;\n        if ($request->has('email') && strlen(strip_request_item('email')) > 0) {\n            $email = strip_request_item('email');\n            if (check_email($email)) {\n                /** @var User $user_source */\n                $user_source = User::whereEmail($email)->first();\n                if (!$user_source) {\n                    $valid = false;\n                    error(__('E-mail address is not correct.'));\n                }\n            } else {\n                $valid = false;\n                error(__('E-mail address is not correct.'));\n            }\n        } else {\n            $valid = false;\n            error(__('Please enter your e-mail.'));\n        }\n\n        if ($valid) {\n            $token = User_generate_password_recovery_token($user_source);\n            engelsystem_email_to_user(\n                $user_source,\n                __('Password recovery'),\n                sprintf(\n                    __('Please visit %s to recover your password.'),\n                    page_link_to('user_password_recovery', ['token' => $token])\n                )\n            );\n            success(__('We sent an email containing your password recovery link.'));\n            redirect(page_link_to('login'));\n        }\n    }\n\n    return User_password_recovery_view();\n}\n\n/**\n * User password recovery in 2 steps.\n * (By email)\n *\n * @return string\n */\nfunction user_password_recovery_controller()\n{\n    if (request()->has('token')) {\n        return user_password_recovery_set_new_controller();\n    }\n\n    return user_password_recovery_start_controller();\n}\n\n/**\n * Menu title for password recovery.\n *\n * @return string\n */\nfunction user_password_recovery_title()\n{\n    return __('Password recovery');\n}\n\n/**\n * Loads a user from param user_id.\n *\n * @return User\n */\nfunction load_user()\n{\n    $request = request();\n    if (!$request->has('user_id')) {\n        redirect(page_link_to());\n    }\n\n    $user = User::find($request->input('user_id'));\n    if (!$user) {\n        error(__('User doesn\\'t exist.'));\n        redirect(page_link_to());\n    }\n\n    return $user;\n}\n\n/**\n * @param ShiftsFilter $shiftsFilter\n * @return ShiftCalendarRenderer\n */\nfunction shiftCalendarRendererByShiftFilter(ShiftsFilter $shiftsFilter)\n{\n    $shifts = Shifts_by_ShiftsFilter($shiftsFilter);\n    $needed_angeltypes_source = NeededAngeltypes_by_ShiftsFilter($shiftsFilter);\n    $shift_entries_source = ShiftEntries_by_ShiftsFilter($shiftsFilter);\n\n    $needed_angeltypes = [];\n    $shift_entries = [];\n    foreach ($shifts as $shift) {\n        $needed_angeltypes[$shift['SID']] = [];\n        $shift_entries[$shift['SID']] = [];\n    }\n    foreach ($shift_entries_source as $shift_entry) {\n        if (isset($shift_entries[$shift_entry['SID']])) {\n            $shift_entries[$shift_entry['SID']][] = $shift_entry;\n        }\n    }\n    foreach ($needed_angeltypes_source as $needed_angeltype) {\n        if (isset($needed_angeltypes[$needed_angeltype['SID']])) {\n            $needed_angeltypes[$needed_angeltype['SID']][] = $needed_angeltype;\n        }\n    }\n    unset($needed_angeltypes_source);\n    unset($shift_entries_source);\n\n    if (\n        in_array(ShiftsFilter::FILLED_FREE, $shiftsFilter->getFilled())\n        && in_array(ShiftsFilter::FILLED_FILLED, $shiftsFilter->getFilled())\n    ) {\n        return new ShiftCalendarRenderer($shifts, $needed_angeltypes, $shift_entries, $shiftsFilter);\n    }\n\n    $filtered_shifts = [];\n    foreach ($shifts as $shift) {\n        $needed_angels_count = 0;\n        $taken = 0;\n        foreach ($needed_angeltypes[$shift['SID']] as $needed_angeltype) {\n            $taken = 0;\n            foreach ($shift_entries[$shift['SID']] as $shift_entry) {\n                if ($needed_angeltype['angel_type_id'] == $shift_entry['TID'] && $shift_entry['freeloaded'] == 0) {\n                    $taken++;\n                }\n            }\n\n            $needed_angels_count += max(0, $needed_angeltype['count'] - $taken);\n        }\n        if (in_array(ShiftsFilter::FILLED_FREE, $shiftsFilter->getFilled()) && $taken < $needed_angels_count) {\n            $filtered_shifts[] = $shift;\n        }\n        if (\n            in_array(ShiftsFilter::FILLED_FILLED, $shiftsFilter->getFilled())\n            && $taken >= $needed_angels_count\n        ) {\n            $filtered_shifts[] = $shift;\n        }\n    }\n\n    return new ShiftCalendarRenderer($filtered_shifts, $needed_angeltypes, $shift_entries, $shiftsFilter);\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\State;\nuse Engelsystem\\Models\\User\\User;\nuse Illuminate\\Database\\Query\\Builder;\nuse Illuminate\\Database\\Query\\JoinClause;\n\n/**\n * @return string\n */\nfunction admin_active_title()\n{\n    return __('Active angels');\n}\n\n/**\n * @return string\n */\nfunction admin_active()\n{\n    $tshirt_sizes = config('tshirt_sizes');\n    $shift_sum_formula = User_get_shifts_sum_query();\n    $request = request();\n\n    $msg = '';\n    $search = '';\n    $forced_count = State::whereForceActive(true)->count();\n    $count = null;\n    $set_active = '';\n\n    if ($request->has('search')) {\n        $search = strip_request_item('search');\n    }\n\n    $show_all_shifts = $request->has('show_all_shifts');\n\n    if ($request->has('set_active')) {\n        if ($request->has('count') && preg_match('/^\\d+$/', $request->input('count'))) {\n            $count = strip_request_item('count');\n            if ($count < $forced_count) {\n                error(sprintf(\n                    __('At least %s angels are forced to be active. The number has to be greater.'),\n                    $forced_count\n                ));\n                redirect(page_link_to('admin_active'));\n            }\n        } else {\n            $msg .= error(__('Please enter a number of angels to be marked as active.'));\n            redirect(page_link_to('admin_active'));\n        }\n\n        if ($request->hasPostData('ack')) {\n            State::query()\n                ->where('got_shirt', '=', false)\n                ->where('got_shirt', '=', false)\n                ->update(['active' => false]);\n\n            $query = User::query()\n                ->selectRaw(\n                    sprintf(\n                        '\n                            users.*,\n                            COUNT(ShiftEntry.id) AS shift_count,\n                                (%s + (\n                                      SELECT COALESCE(SUM(`work_hours`) * 3600, 0) FROM `UserWorkLog` WHERE `user_id`=`users`.`id`\n                                      AND `work_timestamp` < ?\n                                )) AS `shift_length`\n                        ',\n                        $shift_sum_formula\n                    ),\n                    [time()]\n                )\n                ->leftJoin('ShiftEntry', 'users.id', '=', 'ShiftEntry.UID')\n                ->leftJoin('Shifts', 'ShiftEntry.SID', '=', 'Shifts.SID')\n                ->leftJoin('users_state', 'users.id', '=', 'users_state.user_id')\n                ->where('users_state.arrived', '=', true)\n                ->where('users_state.force_active', '=', false)\n                ->groupBy('users.id')\n                ->orderByDesc('force_active')\n                ->orderByDesc('shift_length')\n                ->orderByDesc('name')\n                ->limit($count);\n\n            $users = $query->get();\n            $user_nicks = [];\n            foreach ($users as $usr) {\n                $usr->state->active = true;\n                $usr->state->save();\n                $user_nicks[] = User_Nick_render($usr);\n            }\n\n            State::whereForceActive(true)->update(['active' => true]);\n            engelsystem_log('These angels are active now: ' . join(', ', $user_nicks));\n\n            $msg = success(__('Marked angels.'), true);\n        } else {\n            $set_active = form([\n                button(page_link_to('admin_active', ['search' => $search]), '&laquo; ' . __('back')),\n                form_submit('ack', '&raquo; ' . __('apply')),\n            ], page_link_to('admin_active', ['search' => $search, 'count' => $count, 'set_active' => 1]));\n        }\n    }\n\n    if ($request->hasPostData('submit')) {\n        if ($request->has('active') && preg_match('/^\\d+$/', $request->input('active'))) {\n            $user_id = $request->input('active');\n            $user_source = User::find($user_id);\n            if ($user_source) {\n                $user_source->state->active = true;\n                $user_source->state->save();\n                engelsystem_log('User ' . User_Nick_render($user_source) . ' is active now.');\n                $msg = success(__('Angel has been marked as active.'), true);\n            } else {\n                $msg = error(__('Angel not found.'), true);\n            }\n        } elseif ($request->has('not_active') && preg_match('/^\\d+$/', $request->input('not_active'))) {\n            $user_id = $request->input('not_active');\n            $user_source = User::find($user_id);\n            if ($user_source) {\n                $user_source->state->active = false;\n                $user_source->state->save();\n                engelsystem_log('User ' . User_Nick_render($user_source) . ' is NOT active now.');\n                $msg = success(__('Angel has been marked as not active.'), true);\n            } else {\n                $msg = error(__('Angel not found.'), true);\n            }\n        } elseif ($request->has('tshirt') && preg_match('/^\\d+$/', $request->input('tshirt'))) {\n            $user_id = $request->input('tshirt');\n            $user_source = User::find($user_id);\n            if ($user_source) {\n                $user_source->state->got_shirt = true;\n                $user_source->state->save();\n                engelsystem_log('User ' . User_Nick_render($user_source) . ' has tshirt now.');\n                $msg = success(__('Angel has got a t-shirt.'), true);\n            } else {\n                $msg = error('Angel not found.', true);\n            }\n        } elseif ($request->has('not_tshirt') && preg_match('/^\\d+$/', $request->input('not_tshirt'))) {\n            $user_id = $request->input('not_tshirt');\n            $user_source = User::find($user_id);\n            if ($user_source) {\n                $user_source->state->got_shirt = false;\n                $user_source->state->save();\n                engelsystem_log('User ' . User_Nick_render($user_source) . ' has NO tshirt.');\n                $msg = success(__('Angel has got no t-shirt.'), true);\n            } else {\n                $msg = error(__('Angel not found.'), true);\n            }\n        }\n    }\n\n    $query = User::query()\n        ->selectRaw(\n            sprintf(\n                '\n                    users.*,\n                    COUNT(ShiftEntry.id) AS shift_count,\n                        (%s + (\n                              SELECT COALESCE(SUM(`work_hours`) * 3600, 0) FROM `UserWorkLog` WHERE `user_id`=`users`.`id`\n                              AND `work_timestamp` < ?\n                        )) AS `shift_length`\n                ',\n                $shift_sum_formula\n            ),\n            [time()]\n        )\n        ->leftJoin('ShiftEntry', 'users.id', '=', 'ShiftEntry.UID')\n        ->leftJoin('Shifts', function ($join) use ($show_all_shifts) {\n            /** @var JoinClause $join */\n            $join->on('ShiftEntry.SID', '=', 'Shifts.SID');\n            if ($show_all_shifts) {\n                $join->where(function ($query) {\n                    /** @var Builder $query */\n                    $query->where('Shifts.end', '<', time())\n                        ->orWhereNull('Shifts.end');\n                });\n            }\n        })\n        ->leftJoin('users_state', 'users.id', '=', 'users_state.user_id')\n        ->where('users_state.arrived', '=', true)\n        ->groupBy('users.id')\n        ->orderByDesc('force_active')\n        ->orderByDesc('shift_length')\n        ->orderByDesc('name');\n\n    if (!is_null($count)) {\n        $query->limit($count);\n    }\n\n    $users = $query->get();\n    $matched_users = [];\n    if ($search == '') {\n        $tokens = [];\n    } else {\n        $tokens = explode(' ', $search);\n    }\n    foreach ($users as $usr) {\n        if (count($tokens) > 0) {\n            $match = false;\n            foreach ($tokens as $t) {\n                if (stristr($usr->name, trim($t))) {\n                    $match = true;\n                    break;\n                }\n            }\n            if (!$match) {\n                continue;\n            }\n        }\n\n        $shirtSize = $usr->personalData->shirt_size;\n\n        $userData = [];\n        $userData['nick'] = User_Nick_render($usr);\n        $userData['shirt_size'] = (isset($tshirt_sizes[$shirtSize]) ? $tshirt_sizes[$shirtSize] : '');\n        $userData['work_time'] = round($usr['shift_length'] / 60)\n            . ' min (' . sprintf('%.2f', $usr['shift_length'] / 3600) . '&nbsp;h)';\n        $userData['active'] = glyph_bool($usr->state->active == 1);\n        $userData['force_active'] = glyph_bool($usr->state->force_active == 1);\n        $userData['tshirt'] = glyph_bool($usr->state->got_shirt == 1);\n        $userData['shift_count'] = $usr['shift_count'];\n\n        $actions = [];\n        if (!$usr->state->active) {\n            $parameters = [\n                'active' => $usr->id,\n                'search' => $search,\n            ];\n            if ($show_all_shifts) {\n                $parameters['show_all_shifts'] = 1;\n            }\n            $actions[] = form(\n                [form_submit('submit', __('set active'), 'btn-xs', false)],\n                page_link_to('admin_active', $parameters)\n            );\n        }\n        if ($usr->state->active) {\n            $parametersRemove = [\n                'not_active' => $usr->id,\n                'search'     => $search,\n            ];\n            if ($show_all_shifts) {\n                $parametersRemove['show_all_shifts'] = 1;\n            }\n            $actions[] = form(\n                [form_submit('submit', __('remove active'), 'btn-xs', false)],\n                page_link_to('admin_active', $parametersRemove)\n            );\n        }\n        if (!$usr->state->got_shirt) {\n            $parametersShirt = [\n                'tshirt' => $usr->id,\n                'search' => $search,\n            ];\n            if ($show_all_shifts) {\n                $parametersShirt['show_all_shifts'] = 1;\n            }\n            $actions[] = form(\n                [form_submit('submit', __('got t-shirt'), 'btn-xs', false)],\n                page_link_to('admin_active', $parametersShirt)\n            );\n        }\n        if ($usr->state->got_shirt) {\n            $parameters = [\n                'not_tshirt' => $usr->id,\n                'search'     => $search,\n            ];\n            if ($show_all_shifts) {\n                $parameters['show_all_shifts'] = 1;\n            }\n            $actions[] = form(\n                [form_submit('submit', __('remove t-shirt'), 'btn-xs', false)],\n                page_link_to('admin_active', $parameters)\n            );\n        }\n\n        $userData['actions'] = buttons($actions);\n\n        $matched_users[] = $userData;\n    }\n\n    $shirt_statistics = [];\n    foreach (array_keys($tshirt_sizes) as $size) {\n        $gc = State::query()\n            ->leftJoin('users_settings', 'users_state.user_id', '=', 'users_settings.user_id')\n            ->leftJoin('users_personal_data', 'users_state.user_id', '=', 'users_personal_data.user_id')\n            ->where('users_state.got_shirt', '=', true)\n            ->where('users_personal_data.shirt_size', '=', $size)\n            ->count();\n        $shirt_statistics[] = [\n            'size'  => $size,\n            'given' => $gc\n        ];\n    }\n\n    $shirt_statistics[] = [\n        'size'  => '<b>' . __('Sum') . '</b>',\n        'given' => '<b>' . State::whereGotShirt(true)->count() . '</b>'\n    ];\n\n    return page_with_title(admin_active_title(), [\n        form([\n            form_text('search', __('Search angel:'), $search),\n            form_checkbox('show_all_shifts', __('Show all shifts'), $show_all_shifts),\n            form_submit('submit', __('Search'))\n        ], page_link_to('admin_active')),\n        $set_active == '' ? form([\n            form_text('count', __('How much angels should be active?'), $count ? $count : $forced_count),\n            form_submit('set_active', __('Preview'))\n        ]) : $set_active,\n        $msg . msg(),\n        table([\n            'nick'         => __('Nickname'),\n            'shirt_size'   => __('Size'),\n            'shift_count'  => __('Shifts'),\n            'work_time'    => __('Length'),\n            'active'       => __('Active?'),\n            'force_active' => __('Forced'),\n            'tshirt'       => __('T-shirt?'),\n            'actions'      => ''\n        ], $matched_users),\n        '<h2>' . __('Shirt statistics') . '</h2>',\n        table([\n            'size'  => __('Size'),\n            'given' => __('Given shirts')\n        ], $shirt_statistics)\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction admin_arrive_title()\n{\n    return __('Arrived angels');\n}\n\n/**\n * @return string\n */\nfunction admin_arrive()\n{\n    $msg = '';\n    $search = '';\n    $request = request();\n\n    if ($request->has('search')) {\n        $search = strip_request_item('search');\n        $search = trim($search);\n    }\n\n    $action = $request->get('action');\n    if (\n        $action == 'reset'\n        && preg_match('/^\\d+$/', $request->input('user'))\n        && $request->hasPostData('submit')\n    ) {\n        $user_id = $request->input('user');\n        $user_source = User::find($user_id);\n        if ($user_source) {\n            $user_source->state->arrived = false;\n            $user_source->state->arrival_date = null;\n            $user_source->state->save();\n\n            engelsystem_log('User set to not arrived: ' . User_Nick_render($user_source));\n            success(__('Reset done. Angel has not arrived.'));\n            redirect(user_link($user_source->id));\n        } else {\n            $msg = error(__('Angel not found.'), true);\n        }\n    } elseif (\n        $action == 'arrived'\n        && preg_match('/^\\d+$/', $request->input('user'))\n        && $request->hasPostData('submit')\n    ) {\n        $user_id = $request->input('user');\n        $user_source = User::find($user_id);\n        if ($user_source) {\n            $user_source->state->arrived = true;\n            $user_source->state->arrival_date = new Carbon\\Carbon();\n            $user_source->state->save();\n\n            engelsystem_log('User set has arrived: ' . User_Nick_render($user_source));\n            success(__('Angel has been marked as arrived.'));\n            redirect(user_link($user_source->id));\n        } else {\n            $msg = error(__('Angel not found.'), true);\n        }\n    }\n\n    /** @var User[] $users */\n    $users = User::query()->orderBy('name')->get();\n    $arrival_count_at_day = [];\n    $planned_arrival_count_at_day = [];\n    $planned_departure_count_at_day = [];\n    $users_matched = [];\n    if ($search == '') {\n        $tokens = [];\n    } else {\n        $tokens = explode(' ', $search);\n    }\n    foreach ($users as $usr) {\n        if (count($tokens) > 0) {\n            $match = false;\n            $index = join(' ', $usr->toArray());\n            foreach ($tokens as $t) {\n                if (stristr($index, trim($t))) {\n                    $match = true;\n                    break;\n                }\n            }\n            if (!$match) {\n                continue;\n            }\n        }\n\n        $usr->name = User_Nick_render($usr);\n        $plannedDepartureDate = $usr->personalData->planned_departure_date;\n        $arrivalDate = $usr->state->arrival_date;\n        $plannedArrivalDate = $usr->personalData->planned_arrival_date;\n        $usr['rendered_planned_departure_date'] = $plannedDepartureDate ? $plannedDepartureDate->format('Y-m-d') : '-';\n        $usr['rendered_planned_arrival_date'] = $plannedArrivalDate ? $plannedArrivalDate->format('Y-m-d') : '-';\n        $usr['rendered_arrival_date'] = $arrivalDate ? $arrivalDate->format('Y-m-d') : '-';\n        $usr['arrived'] = $usr->state->arrived ? __('yes') : '';\n        $usr['actions'] = form([\n            form_hidden('action', $usr->state->arrived ? 'reset' : 'arrived'),\n            form_hidden('user', $usr->id),\n            form_submit('submit', $usr->state->arrived ? __('reset') : __('arrived'), 'btn-xs'),\n        ]);\n\n        if ($usr->state->arrival_date) {\n            $day = $usr->state->arrival_date->format('Y-m-d');\n            if (!isset($arrival_count_at_day[$day])) {\n                $arrival_count_at_day[$day] = 0;\n            }\n            $arrival_count_at_day[$day]++;\n        }\n\n        if ($usr->personalData->planned_arrival_date) {\n            $day = $usr->personalData->planned_arrival_date->format('Y-m-d');\n            if (!isset($planned_arrival_count_at_day[$day])) {\n                $planned_arrival_count_at_day[$day] = 0;\n            }\n            $planned_arrival_count_at_day[$day]++;\n        }\n\n        if ($usr->personalData->planned_departure_date && $usr->state->arrived) {\n            $day = $usr->personalData->planned_departure_date->format('Y-m-d');\n            if (!isset($planned_departure_count_at_day[$day])) {\n                $planned_departure_count_at_day[$day] = 0;\n            }\n            $planned_departure_count_at_day[$day]++;\n        }\n\n        $users_matched[] = $usr;\n    }\n\n    ksort($arrival_count_at_day);\n    ksort($planned_arrival_count_at_day);\n    ksort($planned_departure_count_at_day);\n\n    $arrival_at_day = [];\n    $arrival_sum = 0;\n    foreach ($arrival_count_at_day as $day => $count) {\n        $arrival_sum += $count;\n        $arrival_at_day[$day] = [\n            'day'   => $day,\n            'count' => $count,\n            'sum'   => $arrival_sum\n        ];\n    }\n\n    $planned_arrival_at_day = [];\n    $planned_arrival_sum = 0;\n    foreach ($planned_arrival_count_at_day as $day => $count) {\n        $planned_arrival_sum += $count;\n        $planned_arrival_at_day[$day] = [\n            'day'   => $day,\n            'count' => $count,\n            'sum'   => $planned_arrival_sum\n        ];\n    }\n\n    $planned_departure_at_day = [];\n    $planned_departure_sum = 0;\n    foreach ($planned_departure_count_at_day as $day => $count) {\n        $planned_departure_sum += $count;\n        $planned_departure_at_day[$day] = [\n            'day'   => $day,\n            'count' => $count,\n            'sum'   => $planned_departure_sum\n        ];\n    }\n\n    return page_with_title(admin_arrive_title(), [\n        $msg . msg(),\n        form([\n            form_text('search', __('Search'), $search),\n            form_submit('submit', __('Search'))\n        ], page_link_to('admin_arrive')),\n        table([\n            'name'                            => __('Nickname'),\n            'rendered_planned_arrival_date'   => __('Planned arrival'),\n            'arrived'                         => __('Arrived?'),\n            'rendered_arrival_date'           => __('Arrival date'),\n            'rendered_planned_departure_date' => __('Planned departure'),\n            'actions'                         => ''\n        ], $users_matched),\n        div('row', [\n            div('col-md-4', [\n                heading(__('Planned arrival statistics'), 2),\n                bargraph('planned_arrives', 'day', [\n                    'count' => __('arrived'),\n                    'sum'   => __('arrived sum')\n                ], [\n                    'count' => '#090',\n                    'sum'   => '#888'\n                ], $planned_arrival_at_day),\n                table([\n                    'day'   => __('Date'),\n                    'count' => __('Count'),\n                    'sum'   => __('Sum')\n                ], $planned_arrival_at_day)\n            ]),\n            div('col-md-4', [\n                heading(__('Arrival statistics'), 2),\n                bargraph('arrives', 'day', [\n                    'count' => __('arrived'),\n                    'sum'   => __('arrived sum')\n                ], [\n                    'count' => '#090',\n                    'sum'   => '#888'\n                ], $arrival_at_day),\n                table([\n                    'day'   => __('Date'),\n                    'count' => __('Count'),\n                    'sum'   => __('Sum')\n                ], $arrival_at_day)\n            ]),\n            div('col-md-4', [\n                heading(__('Planned departure statistics'), 2),\n                bargraph('planned_departures', 'day', [\n                    'count' => __('arrived'),\n                    'sum'   => __('arrived sum')\n                ], [\n                    'count' => '#090',\n                    'sum'   => '#888'\n                ], $planned_departure_at_day),\n                table([\n                    'day'   => __('Date'),\n                    'count' => __('Count'),\n                    'sum'   => __('Sum')\n                ], $planned_departure_at_day)\n            ])\n        ])\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\n\n/**\n * @return string\n */\nfunction admin_groups_title()\n{\n    return __('Grouprights');\n}\n\n/**\n * @return string\n */\nfunction admin_groups()\n{\n    $html = '';\n    $request = request();\n    $groups = DB::select('SELECT * FROM `Groups` ORDER BY `Name`');\n\n    if (!$request->has('action')) {\n        $groups_table = [];\n        foreach ($groups as $group) {\n            $privileges = DB::select('\n                SELECT `name`\n                FROM `GroupPrivileges`\n                JOIN `Privileges` ON (`GroupPrivileges`.`privilege_id` = `Privileges`.`id`)\n                WHERE `group_id`=?\n            ', [$group['UID']]);\n            $privileges_html = [];\n\n            foreach ($privileges as $privilege) {\n                $privileges_html[] = $privilege['name'];\n            }\n\n            $groups_table[] = [\n                'name'       => $group['Name'],\n                'privileges' => join(', ', $privileges_html),\n                'actions'    => button(\n                    page_link_to('admin_groups',\n                        ['action' => 'edit', 'id' => $group['UID']]),\n                    __('edit'),\n                    'btn-xs'\n                )\n            ];\n        }\n\n        return page_with_title(admin_groups_title(), [\n            table([\n                'name'       => __('Name'),\n                'privileges' => __('Privileges'),\n                'actions'    => ''\n            ], $groups_table)\n        ]);\n    } else {\n        switch ($request->input('action')) {\n            case 'edit':\n                if ($request->has('id') && preg_match('/^-\\d{1,11}$/', $request->input('id'))) {\n                    $group_id = $request->input('id');\n                } else {\n                    return error('Incomplete call, missing Groups ID.', true);\n                }\n\n                $group = DB::select('SELECT * FROM `Groups` WHERE `UID`=? LIMIT 1', [$group_id]);\n                if (!empty($group)) {\n                    $privileges = DB::select('\n                        SELECT `Privileges`.*, `GroupPrivileges`.`group_id`\n                        FROM `Privileges`\n                        LEFT OUTER JOIN `GroupPrivileges`\n                            ON (\n                                `Privileges`.`id` = `GroupPrivileges`.`privilege_id`\n                                AND `GroupPrivileges`.`group_id`=?\n                            )\n                        ORDER BY `Privileges`.`name`\n                    ', [$group_id]);\n                    $privileges_html = '';\n                    $privileges_form = [];\n                    foreach ($privileges as $privilege) {\n                        $privileges_form[] = form_checkbox(\n                            'privileges[]',\n                            $privilege['desc'] . ' (' . $privilege['name'] . ')',\n                            $privilege['group_id'] != '',\n                            $privilege['id'],\n                            'privilege-' . $privilege['name']\n                        );\n                        $privileges_html .= sprintf(\n                            '<tr>'\n                            . '<td><input type=\"checkbox\" name=\"privileges[]\" value=\"%s\" %s /></td>'\n                            . '<td>%s</td>'\n                            . '<td>%s</td>'\n                            . '</tr>',\n                            $privilege['id'],\n                            ($privilege['group_id'] != '' ? 'checked=\"checked\"' : ''),\n                            $privilege['name'],\n                            $privilege['desc']\n                        );\n                    }\n\n                    $privileges_form[] = form_submit('submit', __('Save'));\n                    $html .= page_with_title(__('Edit group'), [\n                        form(\n                            $privileges_form,\n                            page_link_to('admin_groups', ['action' => 'save', 'id' => $group_id])\n                        )\n                    ]);\n                } else {\n                    return error('No Group found.', true);\n                }\n                break;\n\n            case 'save':\n                if (\n                    $request->has('id')\n                    && preg_match('/^-\\d{1,11}$/', $request->input('id'))\n                    && $request->hasPostData('submit')\n                ) {\n                    $group_id = $request->input('id');\n                } else {\n                    return error('Incomplete call, missing Groups ID.', true);\n                }\n\n                $group = DB::selectOne('SELECT * FROM `Groups` WHERE `UID`=? LIMIT 1', [$group_id]);\n                $privileges = $request->postData('privileges');\n                if (!is_array($privileges)) {\n                    $privileges = [];\n                }\n                if (!empty($group)) {\n                    DB::delete('DELETE FROM `GroupPrivileges` WHERE `group_id`=?', [$group_id]);\n                    $privilege_names = [];\n                    foreach ($privileges as $privilege) {\n                        if (preg_match('/^\\d{1,}$/', $privilege)) {\n                            $group_privileges_source = DB::selectOne(\n                                'SELECT `name` FROM `Privileges` WHERE `id`=? LIMIT 1',\n                                [$privilege]\n                            );\n                            if (!empty($group_privileges_source)) {\n                                DB::insert(\n                                    'INSERT INTO `GroupPrivileges` (`group_id`, `privilege_id`) VALUES (?, ?)',\n                                    [$group_id, $privilege]\n                                );\n                                $privilege_names[] = $group_privileges_source['name'];\n                            }\n                        }\n                    }\n                    engelsystem_log(\n                        'Group privileges of group ' . $group['Name']\n                        . ' edited: ' . join(', ', $privilege_names)\n                    );\n                    redirect(page_link_to('admin_groups'));\n                } else {\n                    return error('No Group found.', true);\n                }\n                break;\n        }\n    }\n    return $html;\n}\n", "<?php\n\n/**\n * @return string\n */\nfunction admin_import_title()\n{\n    return __('Frab import');\n}\n\n/**\n * @return string\n */\nfunction admin_import()\n{\n    global $rooms_import;\n    $user = auth()->user();\n    $html = '';\n    $import_dir = __DIR__ . '/../../import';\n    $request = request();\n\n    $step = 'input';\n    if (\n        $request->has('step')\n        && in_array($request->input('step'), [\n            'input',\n            'check',\n            'import'\n        ])\n    ) {\n        $step = $request->input('step');\n    }\n\n    try {\n        $test_handle = @fopen($import_dir . '/tmp', 'w');\n        fclose($test_handle);\n        @unlink($import_dir . '/tmp');\n    } catch (Exception $e) {\n        error(__('Webserver has no write-permission on import directory.'));\n    }\n\n    $import_file = $import_dir . '/import_' . $user->id . '.xml';\n    $shifttype_id = null;\n    $add_minutes_start = 15;\n    $add_minutes_end = 15;\n\n    $shifttypes_source = ShiftTypes();\n    $shifttypes = [];\n    foreach ($shifttypes_source as $shifttype) {\n        $shifttypes[$shifttype['id']] = $shifttype['name'];\n    }\n\n    switch ($step) {\n        case 'input':\n            $valid = false;\n\n            if ($request->hasPostData('submit')) {\n                $valid = true;\n\n                if ($request->has('shifttype_id') && isset($shifttypes[$request->input('shifttype_id')])) {\n                    $shifttype_id = $request->input('shifttype_id');\n                } else {\n                    $valid = false;\n                    error(__('Please select a shift type.'));\n                }\n\n                $minutes_start = trim($request->input('add_minutes_start'));\n                if ($request->has('add_minutes_start') && is_numeric($minutes_start)) {\n                    $add_minutes_start = $minutes_start;\n                } else {\n                    $valid = false;\n                    error(__('Please enter an amount of minutes to add to a talk\\'s begin.'));\n                }\n\n                if ($request->has('add_minutes_end') && is_numeric(trim($request->input('add_minutes_end')))) {\n                    $add_minutes_end = trim($request->input('add_minutes_end'));\n                } else {\n                    $valid = false;\n                    error(__('Please enter an amount of minutes to add to a talk\\'s end.'));\n                }\n\n                if (isset($_FILES['xcal_file']) && ($_FILES['xcal_file']['error'] == 0)) {\n                    if (move_uploaded_file($_FILES['xcal_file']['tmp_name'], $import_file)) {\n                        libxml_use_internal_errors(true);\n                        if (simplexml_load_file($import_file) === false) {\n                            $valid = false;\n                            error(__('No valid xml/xcal file provided.'));\n                            unlink($import_file);\n                        }\n                    } else {\n                        $valid = false;\n                        error(__('File upload went wrong.'));\n                    }\n                } else {\n                    $valid = false;\n                    error(__('Please provide some data.'));\n                }\n            }\n\n            if ($valid) {\n                redirect(\n                    page_link_to('admin_import', [\n                        'step'              => 'check',\n                        'shifttype_id'      => $shifttype_id,\n                        'add_minutes_end'   => $add_minutes_end,\n                        'add_minutes_start' => $add_minutes_start,\n                    ])\n                );\n            } else {\n                $html .= div('well well-sm text-center', [\n                        __('File Upload')\n                        . mute(glyph('arrow-right'))\n                        . mute(__('Validation'))\n                        . mute(glyph('arrow-right'))\n                        . mute(__('Import'))\n                    ]) . div('row', [\n                        div('col-md-offset-3 col-md-6', [\n                            form([\n                                form_info(\n                                    '',\n                                    __('This import will create/update/delete rooms and shifts by given FRAB-export file. The needed file format is xcal.')\n                                ),\n                                form_select('shifttype_id', __('Shifttype'), $shifttypes, $shifttype_id),\n                                form_spinner('add_minutes_start', __('Add minutes to start'), $add_minutes_start),\n                                form_spinner('add_minutes_end', __('Add minutes to end'), $add_minutes_end),\n                                form_file('xcal_file', __('xcal-File (.xcal)')),\n                                form_submit('submit', __('Import'))\n                            ])\n                        ])\n                    ]);\n            }\n            break;\n\n        case 'check':\n            if (!file_exists($import_file)) {\n                error(__('Missing import file.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            if ($request->has('shifttype_id') && isset($shifttypes[$request->input('shifttype_id')])) {\n                $shifttype_id = $request->input('shifttype_id');\n            } else {\n                error(__('Please select a shift type.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            if ($request->has('add_minutes_start') && is_numeric(trim($request->input('add_minutes_start')))) {\n                $add_minutes_start = trim($request->input('add_minutes_start'));\n            } else {\n                error(__('Please enter an amount of minutes to add to a talk\\'s begin.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            if ($request->has('add_minutes_end') && is_numeric(trim($request->input(('add_minutes_end'))))) {\n                $add_minutes_end = trim($request->input('add_minutes_end'));\n            } else {\n                error(__('Please enter an amount of minutes to add to a talk\\'s end.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            list($rooms_new, $rooms_deleted) = prepare_rooms($import_file);\n            list($events_new, $events_updated, $events_deleted) = prepare_events(\n                $import_file,\n                $shifttype_id,\n                $add_minutes_start,\n                $add_minutes_end\n            );\n\n            $html .= div(\n                    'well well-sm text-center',\n                    [\n                        '<span class=\"text-success\">' . __('File Upload') . glyph('ok-circle') . '</span>'\n                        . mute(glyph('arrow-right'))\n                        . __('Validation')\n                        . mute(glyph('arrow-right'))\n                        . mute(__('Import'))\n                    ]\n                )\n                . form(\n                    [\n                        div('row', [\n                            div('col-sm-6', [\n                                '<h3>' . __('Rooms to create') . '</h3>',\n                                table(__('Name'), $rooms_new)\n                            ]),\n                            div('col-sm-6', [\n                                '<h3>' . __('Rooms to delete') . '</h3>',\n                                table(__('Name'), $rooms_deleted)\n                            ])\n                        ]),\n                        '<h3>' . __('Shifts to create') . '</h3>',\n                        table([\n                            'day'       => __('Day'),\n                            'start'     => __('Start'),\n                            'end'       => __('End'),\n                            'shifttype' => __('Shift type'),\n                            'title'     => __('Title'),\n                            'room'      => __('Room')\n                        ], shifts_printable($events_new, $shifttypes)),\n                        '<h3>' . __('Shifts to update') . '</h3>',\n                        table([\n                            'day'       => __('Day'),\n                            'start'     => __('Start'),\n                            'end'       => __('End'),\n                            'shifttype' => __('Shift type'),\n                            'title'     => __('Title'),\n                            'room'      => __('Room')\n                        ], shifts_printable($events_updated, $shifttypes)),\n                        '<h3>' . __('Shifts to delete') . '</h3>',\n                        table([\n                            'day'       => __('Day'),\n                            'start'     => __('Start'),\n                            'end'       => __('End'),\n                            'shifttype' => __('Shift type'),\n                            'title'     => __('Title'),\n                            'room'      => __('Room')\n                        ], shifts_printable($events_deleted, $shifttypes)),\n                        form_submit('submit', __('Import'))\n                    ],\n                    page_link_to('admin_import', [\n                        'step'              => 'import',\n                        'shifttype_id'      => $shifttype_id,\n                        'add_minutes_end'   => $add_minutes_end,\n                        'add_minutes_start' => $add_minutes_start,\n                    ])\n                );\n            break;\n\n        case 'import':\n            if (!file_exists($import_file)) {\n                error(__('Missing import file.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            if (!file_exists($import_file)) {\n                redirect(page_link_to('admin_import'));\n            }\n\n            if ($request->has('shifttype_id') && isset($shifttypes[$request->input('shifttype_id')])) {\n                $shifttype_id = $request->input('shifttype_id');\n            } else {\n                error(__('Please select a shift type.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            if ($request->has('add_minutes_start') && is_numeric(trim($request->input('add_minutes_start')))) {\n                $add_minutes_start = trim($request->input('add_minutes_start'));\n            } else {\n                error(__('Please enter an amount of minutes to add to a talk\\'s begin.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            if ($request->has('add_minutes_end') && is_numeric(trim($request->input('add_minutes_end')))) {\n                $add_minutes_end = trim($request->input('add_minutes_end'));\n            } else {\n                error(__('Please enter an amount of minutes to add to a talk\\'s end.'));\n                redirect(page_link_to('admin_import'));\n            }\n\n            list($rooms_new, $rooms_deleted) = prepare_rooms($import_file);\n            foreach ($rooms_new as $room) {\n                $result = Room_create($room, true, null, null);\n                $rooms_import[trim($room)] = $result;\n            }\n            foreach ($rooms_deleted as $room) {\n                Room_delete_by_name($room);\n            }\n\n            list($events_new, $events_updated, $events_deleted) = prepare_events(\n                $import_file,\n                $shifttype_id,\n                $add_minutes_start,\n                $add_minutes_end\n            );\n            foreach ($events_new as $event) {\n                Shift_create($event);\n            }\n\n            foreach ($events_updated as $event) {\n                Shift_update_by_psid($event);\n            }\n\n            foreach ($events_deleted as $event) {\n                Shift_delete_by_psid($event['PSID']);\n            }\n\n            engelsystem_log('Frab import done');\n\n            unlink($import_file);\n\n            $html .= div('well well-sm text-center', [\n                    '<span class=\"text-success\">' . __('File Upload') . glyph('ok-circle') . '</span>'\n                    . mute(glyph('arrow-right'))\n                    . '<span class=\"text-success\">' . __('Validation') . glyph('ok-circle') . '</span>'\n                    . mute(glyph('arrow-right'))\n                    . '<span class=\"text-success\">' . __('Import') . glyph('ok-circle') . '</span>'\n                ]) . success(__('It\\'s done!'), true);\n            break;\n        default:\n            redirect(page_link_to('admin_import'));\n    }\n\n    return page_with_title(admin_import_title(), [\n        msg(),\n        $html\n    ]);\n}\n\n/**\n * @param string $file\n * @return array\n */\nfunction prepare_rooms($file)\n{\n    global $rooms_import;\n    $data = read_xml($file);\n\n    // Load rooms from db for compare with input\n    $rooms = Rooms();\n    // Contains rooms from db with from_frab==true\n    $rooms_db = [];\n    // Contains all rooms from db\n    $rooms_db_all = [];\n    // Contains all rooms from db and frab\n    $rooms_import = [];\n    foreach ($rooms as $room) {\n        if ($room['from_frab']) {\n            $rooms_db[] = $room['Name'];\n        }\n        $rooms_db_all[] = $room['Name'];\n        $rooms_import[$room['Name']] = $room['RID'];\n    }\n\n    $events = $data->vcalendar->vevent;\n    $rooms_frab = [];\n    foreach ($events as $event) {\n        $rooms_frab[] = (string)$event->location;\n        if (!isset($rooms_import[trim($event->location)])) {\n            $rooms_import[trim($event->location)] = trim($event->location);\n        }\n    }\n    $rooms_frab = array_unique($rooms_frab);\n\n    $rooms_new = array_diff($rooms_frab, $rooms_db_all);\n    $rooms_deleted = array_diff($rooms_db, $rooms_frab);\n\n    return [\n        $rooms_new,\n        $rooms_deleted\n    ];\n}\n\n/**\n * @param string $file\n * @param int    $shifttype_id\n * @param int    $add_minutes_start\n * @param int    $add_minutes_end\n * @return array\n */\nfunction prepare_events($file, $shifttype_id, $add_minutes_start, $add_minutes_end)\n{\n    global $rooms_import;\n    $data = read_xml($file);\n\n    $rooms = Rooms();\n    $rooms_db = [];\n    foreach ($rooms as $room) {\n        $rooms_db[$room['Name']] = $room['RID'];\n    }\n\n    $events = $data->vcalendar->vevent;\n    $shifts_pb = [];\n    foreach ($events as $event) {\n        $event_pb = $event->children('http://pentabarf.org');\n        $event_id = trim($event_pb->{'event-id'});\n        $shifts_pb[$event_id] = [\n            'shifttype_id' => $shifttype_id,\n            'start'        => parse_date(\"Ymd\\THis\", $event->dtstart) - $add_minutes_start * 60,\n            'end'          => parse_date(\"Ymd\\THis\", $event->dtend) + $add_minutes_end * 60,\n            'RID'          => $rooms_import[trim($event->location)],\n            'title'        => trim($event->summary),\n            'URL'          => trim($event->url),\n            'PSID'         => $event_id\n        ];\n    }\n\n    $shifts = Shifts_from_frab();\n    $shifts_db = [];\n    foreach ($shifts as $shift) {\n        $shifts_db[$shift['PSID']] = $shift;\n    }\n\n    $shifts_new = [];\n    $shifts_updated = [];\n    foreach ($shifts_pb as $shift) {\n        if (!isset($shifts_db[$shift['PSID']])) {\n            $shifts_new[] = $shift;\n        } else {\n            $tmp = $shifts_db[$shift['PSID']];\n            if (\n                $shift['shifttype_id'] != $tmp['shifttype_id']\n                || $shift['title'] != $tmp['title']\n                || $shift['start'] != $tmp['start']\n                || $shift['end'] != $tmp['end']\n                || $shift['RID'] != $tmp['RID']\n                || $shift['URL'] != $tmp['URL']\n            ) {\n                $shifts_updated[] = $shift;\n            }\n        }\n    }\n\n    $shifts_deleted = [];\n    foreach ($shifts_db as $shift) {\n        if (!isset($shifts_pb[$shift['PSID']])) {\n            $shifts_deleted[] = $shift;\n        }\n    }\n\n    return [\n        $shifts_new,\n        $shifts_updated,\n        $shifts_deleted\n    ];\n}\n\n/**\n * @param string $file\n * @return SimpleXMLElement\n */\nfunction read_xml($file)\n{\n    global $xml_import;\n    if (!isset($xml_import)) {\n        libxml_use_internal_errors(true);\n        $xml_import = simplexml_load_file($file);\n    }\n    return $xml_import;\n}\n\n/**\n * @param array $shifts\n * @param array $shifttypes\n * @return array\n */\nfunction shifts_printable($shifts, $shifttypes)\n{\n    global $rooms_import;\n    $rooms = array_flip($rooms_import);\n\n    uasort($shifts, 'shift_sort');\n\n    $shifts_printable = [];\n    foreach ($shifts as $shift) {\n        $shifts_printable[] = [\n            'day'       => date('l, Y-m-d', $shift['start']),\n            'start'     => date('H:i', $shift['start']),\n            'shifttype' => ShiftType_name_render([\n                'id'   => $shift['shifttype_id'],\n                'name' => $shifttypes[$shift['shifttype_id']]\n            ]),\n            'title'     => shorten($shift['title']),\n            'end'       => date('H:i', $shift['end']),\n            'room'      => $rooms[$shift['RID']]\n        ];\n    }\n    return $shifts_printable;\n}\n\n/**\n * @param array $shift_a\n * @param array $shift_b\n * @return int\n */\nfunction shift_sort($shift_a, $shift_b)\n{\n    return ($shift_a['start'] < $shift_b['start']) ? -1 : 1;\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction admin_questions_title()\n{\n    return __('Answer questions');\n}\n\n/**\n * Renders a hint for new questions to answer.\n *\n * @return string|null\n */\nfunction admin_new_questions()\n{\n    global $privileges, $page;\n\n    if ($page != 'admin_questions') {\n        if (in_array('admin_questions', $privileges)) {\n            $new_messages = count(DB::select('SELECT `QID` FROM `Questions` WHERE `AID` IS NULL'));\n\n            if ($new_messages > 0) {\n                return '<a href=\"' . page_link_to('admin_questions') . '\">'\n                    . __('There are unanswered questions!')\n                    . '</a>';\n            }\n        }\n    }\n\n    return null;\n}\n\n/**\n * @return string\n */\nfunction admin_questions()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$request->has('action')) {\n        $unanswered_questions_table = [];\n        $questions = DB::select('SELECT * FROM `Questions` WHERE `AID` IS NULL');\n        foreach ($questions as $question) {\n            $user_source = User::find($question['UID']);\n\n            $unanswered_questions_table[] = [\n                'from'     => User_Nick_render($user_source),\n                'question' => str_replace(\"\\n\", '<br />', $question['Question']),\n                'answer'   => form([\n                    form_textarea('answer', '', ''),\n                    form_submit('submit', __('Save'))\n                ], page_link_to('admin_questions', ['action' => 'answer', 'id' => $question['QID']])),\n                'actions'  => form([\n                    form_submit('submit', __('delete'), 'btn-xs'),\n                ], page_link_to('admin_questions', ['action' => 'delete', 'id' => $question['QID']])),\n            ];\n        }\n\n        $answered_questions_table = [];\n        $questions = DB::select('SELECT * FROM `Questions` WHERE NOT `AID` IS NULL');\n        foreach ($questions as $question) {\n            $user_source = User::find($question['UID']);\n            $answer_user_source = User::find($question['AID']);\n            $answered_questions_table[] = [\n                'from'        => User_Nick_render($user_source),\n                'question'    => str_replace(\"\\n\", '<br />', $question['Question']),\n                'answered_by' => User_Nick_render($answer_user_source),\n                'answer'      => str_replace(\"\\n\", '<br />', $question['Answer']),\n                'actions'     => form([\n                    form_submit('submit', __('delete'), 'btn-xs')\n                ], page_link_to('admin_questions', ['action' => 'delete', 'id' => $question['QID']]))\n            ];\n        }\n\n        return page_with_title(admin_questions_title(), [\n            '<h2>' . __('Unanswered questions') . '</h2>',\n            table([\n                'from'     => __('From'),\n                'question' => __('Question'),\n                'answer'   => __('Answer'),\n                'actions'  => ''\n            ], $unanswered_questions_table),\n            '<h2>' . __('Answered questions') . '</h2>',\n            table([\n                'from'        => __('From'),\n                'question'    => __('Question'),\n                'answered_by' => __('Answered by'),\n                'answer'      => __('Answer'),\n                'actions'     => ''\n            ], $answered_questions_table)\n        ]);\n    } else {\n        switch ($request->input('action')) {\n            case 'answer':\n                if (\n                    $request->has('id')\n                    && preg_match('/^\\d{1,11}$/', $request->input('id'))\n                    && $request->hasPostData('submit')\n                ) {\n                    $question_id = $request->input('id');\n                } else {\n                    return error('Incomplete call, missing Question ID.', true);\n                }\n\n                $question = DB::selectOne(\n                    'SELECT * FROM `Questions` WHERE `QID`=? LIMIT 1',\n                    [$question_id]\n                );\n                if (!empty($question) && empty($question['AID'])) {\n                    $answer = trim(\n                        preg_replace(\"/([^\\p{L}\\p{P}\\p{Z}\\p{N}\\n]{1,})/ui\",\n                            '',\n                            strip_tags($request->input('answer'))\n                        ));\n\n                    if ($answer != '') {\n                        DB::update('\n                                UPDATE `Questions`\n                                SET `AID`=?, `Answer`=?\n                                WHERE `QID`=?\n                                LIMIT 1\n                            ',\n                            [\n                                $user->id,\n                                $answer,\n                                $question_id,\n                            ]\n                        );\n                        engelsystem_log('Question ' . $question['Question'] . ' answered: ' . $answer);\n                        redirect(page_link_to('admin_questions'));\n                    } else {\n                        return error('Enter an answer!', true);\n                    }\n                } else {\n                    return error('No question found.', true);\n                }\n                break;\n            case 'delete':\n                if (\n                    $request->has('id')\n                    && preg_match('/^\\d{1,11}$/', $request->input('id'))\n                    && $request->hasPostData('submit')\n                ) {\n                    $question_id = $request->input('id');\n                } else {\n                    return error('Incomplete call, missing Question ID.', true);\n                }\n\n                $question = DB::selectOne(\n                    'SELECT * FROM `Questions` WHERE `QID`=? LIMIT 1',\n                    [$question_id]\n                );\n                if (!empty($question)) {\n                    DB::delete('DELETE FROM `Questions` WHERE `QID`=? LIMIT 1', [$question_id]);\n                    engelsystem_log('Question deleted: ' . $question['Question']);\n                    redirect(page_link_to('admin_questions'));\n                } else {\n                    return error('No question found.', true);\n                }\n                break;\n        }\n    }\n\n    return '';\n}\n", "<?php\n/**\n * @return string\n */\nfunction admin_rooms_title()\n{\n    return __('Rooms');\n}\n\n/**\n * @return string\n */\nfunction admin_rooms()\n{\n    $rooms_source = Rooms();\n    $rooms = [];\n    $request = request();\n\n    foreach ($rooms_source as $room) {\n        $rooms[] = [\n            'name'      => Room_name_render($room),\n            'from_frab' => glyph_bool($room['from_frab']),\n            'map_url'   => glyph_bool(!empty($room['map_url'])),\n            'actions'   => table_buttons([\n                button(\n                    page_link_to('admin_rooms', ['show' => 'edit', 'id' => $room['RID']]),\n                    __('edit'),\n                    'btn-xs'\n                ),\n                button(\n                    page_link_to('admin_rooms', ['show' => 'delete', 'id' => $room['RID']]),\n                    __('delete'),\n                    'btn-xs'\n                )\n            ])\n        ];\n    }\n\n    $room = null;\n    if ($request->has('show')) {\n        $msg = '';\n        $name = '';\n        $from_frab = false;\n        $map_url = null;\n        $description = null;\n        $room_id = 0;\n\n        $angeltypes_source = AngelTypes();\n        $angeltypes = [];\n        $angeltypes_count = [];\n        foreach ($angeltypes_source as $angeltype) {\n            $angeltypes[$angeltype['id']] = $angeltype['name'];\n            $angeltypes_count[$angeltype['id']] = 0;\n        }\n\n        if (test_request_int('id')) {\n            $room = Room($request->input('id'));\n            if (empty($room)) {\n                redirect(page_link_to('admin_rooms'));\n            }\n\n            $room_id = $request->input('id');\n            $name = $room['Name'];\n            $from_frab = $room['from_frab'];\n            $map_url = $room['map_url'];\n            $description = $room['description'];\n\n            $needed_angeltypes = NeededAngelTypes_by_room($room_id);\n            foreach ($needed_angeltypes as $needed_angeltype) {\n                $angeltypes_count[$needed_angeltype['angel_type_id']] = $needed_angeltype['count'];\n            }\n        }\n\n        if ($request->input('show') == 'edit') {\n            if ($request->hasPostData('submit')) {\n                $valid = true;\n\n                if ($request->has('name') && strlen(strip_request_item('name')) > 0) {\n                    $result = Room_validate_name(strip_request_item('name'), $room_id);\n                    if (!$result->isValid()) {\n                        $valid = false;\n                        $msg .= error(__('This name is already in use.'), true);\n                    } else {\n                        $name = $result->getValue();\n                    }\n                } else {\n                    $valid = false;\n                    $msg .= error(__('Please enter a name.'), true);\n                }\n\n                $from_frab = $request->has('from_frab');\n\n                if ($request->has('map_url')) {\n                    $map_url = strip_request_item('map_url');\n                }\n\n                if ($request->has('description')) {\n                    $description = strip_request_item_nl('description');\n                }\n\n                foreach ($angeltypes as $angeltype_id => $angeltype) {\n                    $angeltypes_count[$angeltype_id] = 0;\n                    $queryKey = 'angeltype_count_' . $angeltype_id;\n                    if (!$request->has($queryKey)) {\n                        continue;\n                    }\n\n                    if (preg_match('/^\\d{1,4}$/', $request->input($queryKey))) {\n                        $angeltypes_count[$angeltype_id] = $request->input($queryKey);\n                    } else {\n                        $valid = false;\n                        $msg .= error(sprintf(\n                            __('Please enter needed angels for type %s.'),\n                            $angeltype\n                        ), true);\n                    }\n                }\n\n                if ($valid) {\n                    if (empty($room_id)) {\n                        $room_id = Room_create($name, $from_frab, $map_url, $description);\n                    } else {\n                        Room_update($room_id, $name, $from_frab, $map_url, $description);\n                    }\n\n                    NeededAngelTypes_delete_by_room($room_id);\n                    $needed_angeltype_info = [];\n                    foreach ($angeltypes_count as $angeltype_id => $angeltype_count) {\n                        $angeltype = AngelType($angeltype_id);\n                        if (!empty($angeltype)) {\n                            NeededAngelType_add(null, $angeltype_id, $room_id, $angeltype_count);\n                            if ($angeltype_count > 0) {\n                                $needed_angeltype_info[] = $angeltype['name'] . ': ' . $angeltype_count;\n                            }\n                        }\n                    }\n\n                    engelsystem_log(\n                        'Set needed angeltypes of room ' . $name\n                        . ' to: ' . join(', ', $needed_angeltype_info)\n                    );\n                    success(__('Room saved.'));\n                    redirect(page_link_to('admin_rooms'));\n                }\n            }\n            $angeltypes_count_form = [];\n            foreach ($angeltypes as $angeltype_id => $angeltype) {\n                $angeltypes_count_form[] = div('col-lg-4 col-md-6 col-xs-6', [\n                    form_spinner('angeltype_count_' . $angeltype_id, $angeltype, $angeltypes_count[$angeltype_id])\n                ]);\n            }\n\n            return page_with_title(admin_rooms_title(), [\n                buttons([\n                    button(page_link_to('admin_rooms'), __('back'), 'back')\n                ]),\n                $msg,\n                form([\n                    div('row', [\n                        div('col-md-6', [\n                            form_text('name', __('Name'), $name),\n                            form_checkbox('from_frab', __('Frab import'), $from_frab),\n                            form_text('map_url', __('Map URL'), $map_url),\n                            form_info('', __('The map url is used to display an iframe on the room page.')),\n                            form_textarea('description', __('Description'), $description),\n                            form_info('', __('Please use markdown for the description.')),\n                        ]),\n                        div('col-md-6', [\n                            div('row', [\n                                div('col-md-12', [\n                                    form_info(__('Needed angels:'))\n                                ]),\n                                join($angeltypes_count_form)\n                            ])\n                        ])\n                    ]),\n                    form_submit('submit', __('Save'))\n                ])\n            ]);\n        } elseif ($request->input('show') == 'delete') {\n            if ($request->hasPostData('ack')) {\n                Room_delete($room_id);\n\n                engelsystem_log('Room deleted: ' . $name);\n                success(sprintf(__('Room %s deleted.'), $name));\n                redirect(page_link_to('admin_rooms'));\n            }\n\n            return page_with_title(admin_rooms_title(), [\n                buttons([\n                    button(page_link_to('admin_rooms'), __('back'), 'back')\n                ]),\n                sprintf(__('Do you want to delete room %s?'), $name),\n                form([\n                    form_submit('ack', __('Delete'), 'delete btn-danger'),\n                ], page_link_to('admin_rooms', ['show' => 'delete', 'id' => $room_id])),\n            ]);\n        }\n    }\n\n    return page_with_title(admin_rooms_title(), [\n        buttons([\n            button(page_link_to('admin_rooms', ['show' => 'edit']), __('add'))\n        ]),\n        msg(),\n        table([\n            'name'      => __('Name'),\n            'from_frab' => __('Frab import'),\n            'map_url'   => __('Map'),\n            'actions'   => ''\n        ], $rooms)\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\n\n/**\n * @return string\n */\nfunction admin_shifts_title()\n{\n    return __('Create shifts');\n}\n\n/**\n * Assistent zum Anlegen mehrerer neuer Schichten\n *\n * @return string\n */\nfunction admin_shifts()\n{\n    $valid = true;\n    $request = request();\n    $session = session();\n    $start = parse_date('Y-m-d H:i', date('Y-m-d') . ' 00:00');\n    $end = $start;\n    $mode = 'single';\n    $angelmode = 'manually';\n    $length = '';\n    $change_hours = [];\n    $title = '';\n    $shifttype_id = null;\n\n    // Locations laden\n    $rooms = Rooms();\n    $room_array = [];\n    foreach ($rooms as $room) {\n        $room_array[$room['RID']] = $room['Name'];\n    }\n\n    // Engeltypen laden\n    $types = DB::select('SELECT * FROM `AngelTypes` ORDER BY `name`');\n    $needed_angel_types = [];\n    foreach ($types as $type) {\n        $needed_angel_types[$type['id']] = 0;\n    }\n\n    // Load shift types\n    $shifttypes_source = ShiftTypes();\n    $shifttypes = [];\n    foreach ($shifttypes_source as $shifttype) {\n        $shifttypes[$shifttype['id']] = $shifttype['name'];\n    }\n\n    if ($request->has('preview') || $request->has('back')) {\n        if ($request->has('shifttype_id')) {\n            $shifttype = ShiftType($request->input('shifttype_id'));\n            if (empty($shifttype)) {\n                $valid = false;\n                error(__('Please select a shift type.'));\n            } else {\n                $shifttype_id = $request->input('shifttype_id');\n            }\n        } else {\n            $valid = false;\n            error(__('Please select a shift type.'));\n        }\n\n        // Name/Bezeichnung der Schicht, darf leer sein\n        $title = strip_request_item('title');\n\n        // Auswahl der sichtbaren Locations f\u00fcr die Schichten\n        if (\n            $request->has('rid')\n            && preg_match('/^\\d+$/', $request->input('rid'))\n            && isset($room_array[$request->input('rid')])\n        ) {\n            $rid = $request->input('rid');\n        } else {\n            $valid = false;\n            $rid = $rooms[0]['RID'];\n            error(__('Please select a location.'));\n        }\n\n        if ($request->has('start') && $tmp = parse_date('Y-m-d H:i', $request->input('start'))) {\n            $start = $tmp;\n        } else {\n            $valid = false;\n            error(__('Please select a start time.'));\n        }\n\n        if ($request->has('end') && $tmp = parse_date('Y-m-d H:i', $request->input('end'))) {\n            $end = $tmp;\n        } else {\n            $valid = false;\n            error(__('Please select an end time.'));\n        }\n\n        if ($start >= $end) {\n            $valid = false;\n            error(__('The shifts end has to be after its start.'));\n        }\n\n        if ($request->has('mode')) {\n            if ($request->input('mode') == 'single') {\n                $mode = 'single';\n            } elseif ($request->input('mode') == 'multi') {\n                if ($request->has('length') && preg_match('/^\\d+$/', trim($request->input('length')))) {\n                    $mode = 'multi';\n                    $length = trim($request->input('length'));\n                } else {\n                    $valid = false;\n                    error(__('Please enter a shift duration in minutes.'));\n                }\n            } elseif ($request->input('mode') == 'variable') {\n                if (\n                    $request->has('change_hours')\n                    && preg_match(\n                        '/^(\\d{2}(,|$))/',\n                        trim(str_replace(' ', '', $request->input('change_hours')))\n                    )\n                ) {\n                    $mode = 'variable';\n                    $change_hours = array_map(\n                        'trim',\n                        explode(',', $request->input('change_hours'))\n                    );\n                } else {\n                    $valid = false;\n                    error(__('Please split the shift-change hours by colons.'));\n                }\n            }\n        } else {\n            $valid = false;\n            error(__('Please select a mode.'));\n        }\n\n        if ($request->has('angelmode')) {\n            if ($request->input('angelmode') == 'location') {\n                $angelmode = 'location';\n            } elseif ($request->input('angelmode') == 'manually') {\n                $angelmode = 'manually';\n                foreach ($types as $type) {\n                    if (preg_match('/^\\d+$/', trim($request->input('type_' . $type['id'], 0)))) {\n                        $needed_angel_types[$type['id']] = trim($request->input('type_' . $type['id'], 0));\n                    } else {\n                        $valid = false;\n                        error(sprintf(__('Please check the needed angels for team %s.'), $type['name']));\n                    }\n                }\n\n                if (array_sum($needed_angel_types) == 0) {\n                    $valid = false;\n                    error(__('There are 0 angels needed. Please enter the amounts of needed angels.'));\n                }\n            } else {\n                $valid = false;\n                error(__('Please select a mode for needed angels.'));\n            }\n        } else {\n            $valid = false;\n            error(__('Please select needed angels.'));\n        }\n\n        // Beim Zur\u00fcck-Knopf das Formular zeigen\n        if ($request->has('back')) {\n            $valid = false;\n        }\n\n        // Alle Eingaben in Ordnung\n        if ($valid) {\n            if ($angelmode == 'location') {\n                $needed_angel_types = [];\n                $needed_angel_types_location = DB::select('\n                        SELECT `angel_type_id`, `count`\n                        FROM `NeededAngelTypes`\n                        WHERE `room_id`=?\n                    ',\n                    [$rid]\n                );\n                foreach ($needed_angel_types_location as $type) {\n                    $needed_angel_types[$type['angel_type_id']] = $type['count'];\n                }\n            }\n            $shifts = [];\n            if ($mode == 'single') {\n                $shifts[] = [\n                    'start'        => $start,\n                    'end'          => $end,\n                    'RID'          => $rid,\n                    'title'        => $title,\n                    'shifttype_id' => $shifttype_id\n                ];\n            } elseif ($mode == 'multi') {\n                $shift_start = (int)$start;\n                do {\n                    $shift_end = $shift_start + (int)$length * 60;\n\n                    if ($shift_end > $end) {\n                        $shift_end = $end;\n                    }\n                    if ($shift_start >= $shift_end) {\n                        break;\n                    }\n\n                    $shifts[] = [\n                        'start'        => $shift_start,\n                        'end'          => $shift_end,\n                        'RID'          => $rid,\n                        'title'        => $title,\n                        'shifttype_id' => $shifttype_id\n                    ];\n\n                    $shift_start = $shift_end;\n                } while ($shift_end < $end);\n            } elseif ($mode == 'variable') {\n                rsort($change_hours);\n                $day = parse_date('Y-m-d H:i', date('Y-m-d', $start) . ' 00:00');\n                $change_index = 0;\n                // Ersten/n\u00e4chsten passenden Schichtwechsel suchen\n                foreach ($change_hours as $i => $change_hour) {\n                    if ($start < $day + $change_hour * 60 * 60) {\n                        $change_index = $i;\n                    } elseif ($start == $day + $change_hour * 60 * 60) {\n                        // Start trifft Schichtwechsel\n                        $change_index = ($i + count($change_hours) - 1) % count($change_hours);\n                        break;\n                    } else {\n                        break;\n                    }\n                }\n\n                $shift_start = $start;\n                do {\n                    $day = parse_date('Y-m-d H:i', date('Y-m-d', $shift_start) . ' 00:00');\n                    $shift_end = $day + $change_hours[$change_index] * 60 * 60;\n\n                    if ($shift_end > $end) {\n                        $shift_end = $end;\n                    }\n                    if ($shift_start >= $shift_end) {\n                        $shift_end += 24 * 60 * 60;\n                    }\n\n                    $shifts[] = [\n                        'start'        => $shift_start,\n                        'end'          => $shift_end,\n                        'RID'          => $rid,\n                        'title'        => $title,\n                        'shifttype_id' => $shifttype_id\n                    ];\n\n                    $shift_start = $shift_end;\n                    $change_index = ($change_index + count($change_hours) - 1) % count($change_hours);\n                } while ($shift_end < $end);\n            }\n\n            $shifts_table = [];\n            foreach ($shifts as $shift) {\n                $shifts_table_entry = [\n                    'timeslot'      =>\n                        '<span class=\"glyphicon glyphicon-time\"></span> '\n                        . date('Y-m-d H:i', $shift['start'])\n                        . ' - '\n                        . date('H:i', $shift['end'])\n                        . '<br />'\n                        . Room_name_render(Room($shift['RID'])),\n                    'title'         =>\n                        ShiftType_name_render(ShiftType($shifttype_id))\n                        . ($shift['title'] ? '<br />' . $shift['title'] : ''),\n                    'needed_angels' => ''\n                ];\n                foreach ($types as $type) {\n                    if (isset($needed_angel_types[$type['id']]) && $needed_angel_types[$type['id']] > 0) {\n                        $shifts_table_entry['needed_angels'] .= '<b>' . AngelType_name_render($type) . ':</b> '\n                            . $needed_angel_types[$type['id']] . '<br />';\n                    }\n                }\n                $shifts_table[] = $shifts_table_entry;\n            }\n\n            // F\u00fcrs Anlegen zwischenspeichern:\n            $session->set('admin_shifts_shifts', $shifts);\n            $session->set('admin_shifts_types', $needed_angel_types);\n\n            $hidden_types = '';\n            foreach ($needed_angel_types as $type_id => $count) {\n                $hidden_types .= form_hidden('type_' . $type_id, $count);\n            }\n            return page_with_title(__('Preview'), [\n                form([\n                    $hidden_types,\n                    form_hidden('shifttype_id', $shifttype_id),\n                    form_hidden('title', $title),\n                    form_hidden('rid', $rid),\n                    form_hidden('start', date('Y-m-d H:i', $start)),\n                    form_hidden('end', date('Y-m-d H:i', $end)),\n                    form_hidden('mode', $mode),\n                    form_hidden('length', $length),\n                    form_hidden('change_hours', implode(', ', $change_hours)),\n                    form_hidden('angelmode', $angelmode),\n                    form_submit('back', __('back')),\n                    table([\n                        'timeslot'      => __('Time and location'),\n                        'title'         => __('Type and title'),\n                        'needed_angels' => __('Needed angels')\n                    ], $shifts_table),\n                    form_submit('submit', __('Save'))\n                ])\n            ]);\n        }\n    } elseif ($request->hasPostData('submit')) {\n        if (\n            !is_array($session->get('admin_shifts_shifts'))\n            || !is_array($session->get('admin_shifts_types'))\n        ) {\n            redirect(page_link_to('admin_shifts'));\n        }\n\n        foreach ($session->get('admin_shifts_shifts', []) as $shift) {\n            $shift['URL'] = null;\n            $shift['PSID'] = null;\n            $shift_id = Shift_create($shift);\n\n            engelsystem_log(\n                'Shift created: ' . $shifttypes[$shift['shifttype_id']]\n                . ' with title ' . $shift['title']\n                . ' from ' . date('Y-m-d H:i', $shift['start'])\n                . ' to ' . date('Y-m-d H:i', $shift['end'])\n            );\n\n            $needed_angel_types_info = [];\n            foreach ($session->get('admin_shifts_types', []) as $type_id => $count) {\n                $angel_type_source = DB::selectOne('\n                      SELECT *\n                      FROM `AngelTypes`\n                      WHERE `id` = ?\n                      LIMIT 1', [$type_id]);\n\n                if (!empty($angel_type_source)) {\n                    DB::insert('\n                        INSERT INTO `NeededAngelTypes` (`shift_id`, `angel_type_id`, `count`)\n                        VALUES (?, ?, ?)\n                      ',\n                        [\n                            $shift_id,\n                            $type_id,\n                            $count\n                        ]\n                    );\n\n                    if ($count > 0) {\n                        $needed_angel_types_info[] = $angel_type_source['name'] . ': ' . $count;\n                    }\n                }\n            }\n            engelsystem_log('Shift needs following angel types: ' . join(', ', $needed_angel_types_info));\n        }\n\n        success('Schichten angelegt.');\n        redirect(page_link_to('admin_shifts'));\n    } else {\n        $session->remove('admin_shifts_shifts');\n        $session->remove('admin_shifts_types');\n    }\n\n    $rid = null;\n    if ($request->has('rid')) {\n        $rid = $request->input('rid');\n    }\n    $angel_types = '';\n    foreach ($types as $type) {\n        $angel_types .= '<div class=\"col-md-4\">' . form_spinner(\n                'type_' . $type['id'],\n                $type['name'],\n                $needed_angel_types[$type['id']]\n            )\n            . '</div>';\n    }\n\n    return page_with_title(admin_shifts_title(), [\n        msg(),\n        form([\n            form_select('shifttype_id', __('Shifttype'), $shifttypes, $shifttype_id),\n            form_text('title', __('Title'), $title),\n            form_select('rid', __('Room'), $room_array, $rid),\n            div('row', [\n                div('col-md-6', [\n                    form_text('start', __('Start'), date('Y-m-d H:i', $start)),\n                    form_text('end', __('End'), date('Y-m-d H:i', $end)),\n                    form_info(__('Mode'), ''),\n                    form_radio('mode', __('Create one shift'), $mode == 'single', 'single'),\n                    form_radio('mode', __('Create multiple shifts'), $mode == 'multi', 'multi'),\n                    form_text(\n                        'length',\n                        __('Length'),\n                        $request->has('length')\n                            ? $request->input('length')\n                            : '120'\n                    ),\n                    form_radio(\n                        'mode',\n                        __('Create multiple shifts with variable length'),\n                        $mode == 'variable',\n                        'variable'\n                    ),\n                    form_text(\n                        'change_hours',\n                        __('Shift change hours'),\n                        $request->has('change_hours')\n                            ? $request->input('input')\n                            : '00, 04, 08, 10, 12, 14, 16, 18, 20, 22'\n                    )\n                ]),\n                div('col-md-6', [\n                    form_info(__('Needed angels'), ''),\n                    form_radio(\n                        'angelmode',\n                        __('Take needed angels from room settings'),\n                        $angelmode == 'location',\n                        'location'\n                    ),\n                    form_radio(\n                        'angelmode',\n                        __('The following angels are needed'),\n                        $angelmode == 'manually',\n                        'manually'\n                    ),\n                    div('row', [\n                        $angel_types\n                    ])\n                ])\n            ]),\n            form_submit('preview', __('Preview'))\n        ])\n    ]);\n}\n", "<?php\n\nuse Carbon\\Carbon;\nuse Engelsystem\\Database\\DB;\nuse Engelsystem\\Models\\User\\Contact;\nuse Engelsystem\\Models\\User\\PersonalData;\nuse Engelsystem\\Models\\User\\Settings;\nuse Engelsystem\\Models\\User\\State;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction login_title()\n{\n    return __('Login');\n}\n\n/**\n * @return string\n */\nfunction register_title()\n{\n    return __('Register');\n}\n\n/**\n * @return string\n */\nfunction logout_title()\n{\n    return __('Logout');\n}\n\n/**\n * Engel registrieren\n *\n * @return string\n */\nfunction guest_register()\n{\n    global $privileges;\n    $authUser = auth()->user();\n    $tshirt_sizes = config('tshirt_sizes');\n    $enable_tshirt_size = config('enable_tshirt_size');\n    $min_password_length = config('min_password_length');\n    $config = config();\n    $request = request();\n    $session = session();\n\n    $msg = '';\n    $nick = '';\n    $lastName = '';\n    $preName = '';\n    $dect = '';\n    $mobile = '';\n    $mail = '';\n    $email_shiftinfo = false;\n    $email_by_human_allowed = false;\n    $tshirt_size = '';\n    $password_hash = '';\n    $selected_angel_types = [];\n    $planned_arrival_date = null;\n\n    $angel_types_source = AngelTypes();\n    $angel_types = [];\n    foreach ($angel_types_source as $angel_type) {\n        $angel_types[$angel_type['id']] = $angel_type['name'] . ($angel_type['restricted'] ? ' (restricted)' : '');\n        if (!$angel_type['restricted']) {\n            $selected_angel_types[] = $angel_type['id'];\n        }\n    }\n\n    if (!in_array('register', $privileges) || (!$authUser && !config('registration_enabled'))) {\n        error(__('Registration is disabled.'));\n\n        return page_with_title(register_title(), [\n            msg(),\n        ]);\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if ($request->has('nick') && strlen(User_validate_Nick($request->input('nick'))) > 1) {\n            $nick = User_validate_Nick($request->input('nick'));\n            if (User::whereName($nick)->count() > 0) {\n                $valid = false;\n                $msg .= error(sprintf(__('Your nick &quot;%s&quot; already exists.'), $nick), true);\n            }\n        } else {\n            $valid = false;\n            $msg .= error(sprintf(\n                __('Your nick &quot;%s&quot; is too short (min. 2 characters).'),\n                User_validate_Nick($request->input('nick'))\n            ), true);\n        }\n\n        if ($request->has('mail') && strlen(strip_request_item('mail')) > 0) {\n            $mail = strip_request_item('mail');\n            if (!check_email($mail)) {\n                $valid = false;\n                $msg .= error(__('E-mail address is not correct.'), true);\n            }\n            if (User::whereEmail($mail)->first()) {\n                $valid = false;\n                $msg .= error(__('E-mail address is already used by another user.'), true);\n            }\n        } else {\n            $valid = false;\n            $msg .= error(__('Please enter your e-mail.'), true);\n        }\n\n        if ($request->has('email_shiftinfo')) {\n            $email_shiftinfo = true;\n        }\n\n        if ($request->has('email_by_human_allowed')) {\n            $email_by_human_allowed = true;\n        }\n\n        if ($enable_tshirt_size) {\n            if ($request->has('tshirt_size') && isset($tshirt_sizes[$request->input('tshirt_size')])) {\n                $tshirt_size = $request->input('tshirt_size');\n            } else {\n                $valid = false;\n                $msg .= error(__('Please select your shirt size.'), true);\n            }\n        }\n\n        if ($request->has('password') && strlen($request->postData('password')) >= $min_password_length) {\n            if ($request->postData('password') != $request->postData('password2')) {\n                $valid = false;\n                $msg .= error(__('Your passwords don\\'t match.'), true);\n            }\n        } else {\n            $valid = false;\n            $msg .= error(sprintf(\n                __('Your password is too short (please use at least %s characters).'),\n                $min_password_length\n            ), true);\n        }\n\n        if ($request->has('planned_arrival_date')) {\n            $tmp = parse_date('Y-m-d H:i', $request->input('planned_arrival_date') . ' 00:00');\n            $result = User_validate_planned_arrival_date($tmp);\n            $planned_arrival_date = $result->getValue();\n            if (!$result->isValid()) {\n                $valid = false;\n                error(__('Please enter your planned date of arrival. It should be after the buildup start date and before teardown end date.'));\n            }\n        } else {\n            $valid = false;\n            error(__('Please enter your planned date of arrival. It should be after the buildup start date and before teardown end date.'));\n        }\n\n        $selected_angel_types = [];\n        foreach (array_keys($angel_types) as $angel_type_id) {\n            if ($request->has('angel_types_' . $angel_type_id)) {\n                $selected_angel_types[] = $angel_type_id;\n            }\n        }\n\n        // Trivia\n        if ($request->has('lastname')) {\n            $lastName = strip_request_item('lastname');\n        }\n        if ($request->has('prename')) {\n            $preName = strip_request_item('prename');\n        }\n        if ($request->has('dect')) {\n            if (strlen(strip_request_item('dect')) <= 5) {\n                $dect = strip_request_item('dect');\n            } else {\n                $valid = false;\n                error(__('For dect numbers are only 5 digits allowed.'));\n            }\n        }\n        if ($request->has('mobile')) {\n            $mobile = strip_request_item('mobile');\n        }\n\n        if ($valid) {\n            $user = new User([\n                'name'          => $nick,\n                'password'      => $password_hash,\n                'email'         => $mail,\n                'api_key'       => '',\n                'last_login_at' => null,\n            ]);\n            $user->save();\n\n            $contact = new Contact([\n                'dect'   => $dect,\n                'mobile' => $mobile,\n            ]);\n            $contact->user()\n                ->associate($user)\n                ->save();\n\n            $personalData = new PersonalData([\n                'first_name'           => $preName,\n                'last_name'            => $lastName,\n                'shirt_size'           => $tshirt_size,\n                'planned_arrival_date' => Carbon::createFromTimestamp($planned_arrival_date),\n            ]);\n            $personalData->user()\n                ->associate($user)\n                ->save();\n\n            $settings = new Settings([\n                'language'        => $session->get('locale'),\n                'theme'           => config('theme'),\n                'email_human'     => $email_by_human_allowed,\n                'email_shiftinfo' => $email_shiftinfo,\n            ]);\n            $settings->user()\n                ->associate($user)\n                ->save();\n\n            (new State())->user()\n                ->associate($user)\n                ->save();\n\n            // Assign user-group and set password\n            DB::insert('INSERT INTO `UserGroups` (`uid`, `group_id`) VALUES (?, -20)', [$user->id]);\n            set_password($user->id, $request->postData('password'));\n\n            // Assign angel-types\n            $user_angel_types_info = [];\n            foreach ($selected_angel_types as $selected_angel_type_id) {\n                DB::insert(\n                    'INSERT INTO `UserAngelTypes` (`user_id`, `angeltype_id`, `supporter`) VALUES (?, ?, FALSE)',\n                    [$user->id, $selected_angel_type_id]\n                );\n                $user_angel_types_info[] = $angel_types[$selected_angel_type_id];\n            }\n\n            engelsystem_log(\n                'User ' . User_Nick_render($user)\n                . ' signed up as: ' . join(', ', $user_angel_types_info)\n            );\n            success(__('Angel registration successful!'));\n\n            // User is already logged in - that means a supporter has registered an angel. Return to register page.\n            if ($authUser) {\n                redirect(page_link_to('register'));\n            }\n\n            // If a welcome message is present, display registration success page.\n            if ($message = $config->get('welcome_msg')) {\n                return User_registration_success_view($message);\n            }\n\n            redirect(page_link_to('/'));\n        }\n    }\n\n    $buildup_start_date = time();\n    $teardown_end_date = null;\n    if ($buildup = $config->get('buildup_start')) {\n        /** @var Carbon $buildup */\n        $buildup_start_date = $buildup->getTimestamp();\n    }\n\n    if ($teardown = $config->get('teardown_end')) {\n        /** @var Carbon $teardown */\n        $teardown_end_date = $teardown->getTimestamp();\n    }\n\n    return page_with_title(register_title(), [\n        __('By completing this form you\\'re registering as a Chaos-Angel. This script will create you an account in the angel task scheduler.'),\n        $msg,\n        msg(),\n        form([\n            div('row', [\n                div('col-md-6', [\n                    div('row', [\n                        div('col-sm-4', [\n                            form_text('nick', __('Nick') . ' ' . entry_required(), $nick)\n                        ]),\n                        div('col-sm-8', [\n                            form_email('mail', __('E-Mail') . ' ' . entry_required(), $mail),\n                            form_checkbox(\n                                'email_shiftinfo',\n                                __(\n                                    'The %s is allowed to send me an email (e.g. when my shifts change)',\n                                    [config('app_name')]\n                                ),\n                                $email_shiftinfo\n                            ),\n                            form_checkbox(\n                                'email_by_human_allowed',\n                                __('Humans are allowed to send me an email (e.g. for ticket vouchers)'),\n                                $email_by_human_allowed\n                            )\n                        ])\n                    ]),\n                    div('row', [\n                        div('col-sm-6', [\n                            form_date(\n                                'planned_arrival_date',\n                                __('Planned date of arrival') . ' ' . entry_required(),\n                                $planned_arrival_date, $buildup_start_date, $teardown_end_date\n                            )\n                        ]),\n                        div('col-sm-6', [\n                            $enable_tshirt_size ? form_select('tshirt_size',\n                                __('Shirt size') . ' ' . entry_required(),\n                                $tshirt_sizes, $tshirt_size, __('Please select...')) : ''\n                        ])\n                    ]),\n                    div('row', [\n                        div('col-sm-6', [\n                            form_password('password', __('Password') . ' ' . entry_required())\n                        ]),\n                        div('col-sm-6', [\n                            form_password('password2', __('Confirm password') . ' ' . entry_required())\n                        ])\n                    ]),\n                    form_checkboxes(\n                        'angel_types',\n                        __('What do you want to do?') . sprintf(\n                            ' (<a href=\"%s\">%s</a>)',\n                            page_link_to('angeltypes', ['action' => 'about']),\n                            __('Description of job types')\n                        ),\n                        $angel_types,\n                        $selected_angel_types\n                    ),\n                    form_info(\n                        '',\n                        __('Restricted angel types need will be confirmed later by a supporter. You can change your selection in the options section.')\n                    )\n                ]),\n                div('col-md-6', [\n                    div('row', [\n                        div('col-sm-4', [\n                            form_text('dect', __('DECT'), $dect)\n                        ]),\n                        div('col-sm-4', [\n                            form_text('mobile', __('Mobile'), $mobile)\n                        ]),\n                    ]),\n                    div('row', [\n                        div('col-sm-6', [\n                            form_text('prename', __('First name'), $preName)\n                        ]),\n                        div('col-sm-6', [\n                            form_text('lastname', __('Last name'), $lastName)\n                        ])\n                    ]),\n                    form_info(entry_required() . ' = ' . __('Entry required!'))\n                ])\n            ]),\n            form_submit('submit', __('Register'))\n        ])\n    ]);\n}\n\n/**\n * @return string\n */\nfunction entry_required()\n{\n    return '<span class=\"text-info glyphicon glyphicon-warning-sign\"></span>';\n}\n\n/**\n * @return bool\n */\nfunction guest_logout()\n{\n    session()->invalidate();\n    redirect(page_link_to('start'));\n    return true;\n}\n\n/**\n * @return string\n */\nfunction guest_login()\n{\n    $nick = '';\n    $request = request();\n    $session = session();\n    $valid = true;\n\n    $session->remove('uid');\n\n    if ($request->hasPostData('submit')) {\n        if ($request->has('nick') && strlen(User_validate_Nick($request->input('nick'))) > 0) {\n            $nick = User_validate_Nick($request->input('nick'));\n            $login_user = User::whereName($nick)->first();\n            if ($login_user) {\n                if ($request->has('password')) {\n                    if (!verify_password($request->postData('password'), $login_user->password, $login_user->id)) {\n                        $valid = false;\n                        error(__('Your password is incorrect.  Please try it again.'));\n                    }\n                } else {\n                    $valid = false;\n                    error(__('Please enter a password.'));\n                }\n            } else {\n                $valid = false;\n                error(__('No user was found with that Nickname. Please try again. If you are still having problems, ask a Dispatcher.'));\n            }\n        } else {\n            $valid = false;\n            error(__('Please enter a nickname.'));\n        }\n\n        if ($valid && $login_user) {\n            $session->set('uid', $login_user->id);\n            $session->set('locale', $login_user->settings->language);\n\n            redirect(page_link_to('news'));\n        }\n    }\n\n    return page([\n        div('col-md-12', [\n            div('row', [\n                EventConfig_countdown_page()\n            ]),\n            div('row', [\n                div('col-sm-6 col-sm-offset-3 col-md-4 col-md-offset-4', [\n                    div('panel panel-primary first', [\n                        div('panel-heading', [\n                            '<span class=\"icon-icon_angel\"></span> ' . __('Login')\n                        ]),\n                        div('panel-body', [\n                            msg(),\n                            form([\n                                form_text_placeholder('nick', __('Nick'), $nick),\n                                form_password_placeholder('password', __('Password')),\n                                form_submit('submit', __('Login')),\n                                !$valid ? buttons([\n                                    button(page_link_to('user_password_recovery'), __('I forgot my password'))\n                                ]) : ''\n                            ])\n                        ]),\n                        div('panel-footer', [\n                            glyph('info-sign') . __('Please note: You have to activate cookies!')\n                        ])\n                    ])\n                ])\n            ]),\n            div('row', [\n                div('col-sm-6 text-center', [\n                    heading(register_title(), 2),\n                    get_register_hint()\n                ]),\n                div('col-sm-6 text-center', [\n                    heading(__('What can I do?'), 2),\n                    '<p>' . __('Please read about the jobs you can do to help us.') . '</p>',\n                    buttons([\n                        button(\n                            page_link_to('angeltypes', ['action' => 'about']),\n                            __('Teams/Job description') . ' &raquo;'\n                        )\n                    ])\n                ])\n            ])\n        ])\n    ]);\n}\n\n/**\n * @return string\n */\nfunction get_register_hint()\n{\n    global $privileges;\n\n    if (in_array('register', $privileges) && config('registration_enabled')) {\n        return join('', [\n            '<p>' . __('Please sign up, if you want to help us!') . '</p>',\n            buttons([\n                button(page_link_to('register'), register_title() . ' &raquo;')\n            ])\n        ]);\n    }\n\n    return error(__('Registration is disabled.'), true);\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction myshifts_title()\n{\n    return __('My shifts');\n}\n\n/**\n * Zeigt die Schichten an, die ein Benutzer belegt\n *\n * @return string\n */\nfunction user_myshifts()\n{\n    global $privileges;\n    $user = auth()->user();\n    $request = request();\n\n    if (\n        $request->has('id')\n        && in_array('user_shifts_admin', $privileges)\n        && preg_match('/^\\d{1,}$/', $request->input('id'))\n        && User::find($request->input('id'))\n    ) {\n        $shift_entry_id = $request->input('id');\n    } else {\n        $shift_entry_id = $user->id;\n    }\n\n    $shifts_user = User::find($shift_entry_id);\n    if ($request->has('reset')) {\n        if ($request->input('reset') == 'ack') {\n            User_reset_api_key($user);\n            success(__('Key changed.'));\n            redirect(page_link_to('users', ['action' => 'view', 'user_id' => $shifts_user->id]));\n        }\n        return page_with_title(__('Reset API key'), [\n            error(\n                __('If you reset the key, the url to your iCal- and JSON-export and your atom feed changes! You have to update it in every application using one of these exports.'),\n                true\n            ),\n            button(page_link_to('user_myshifts', ['reset' => 'ack']), __('Continue'), 'btn-danger')\n        ]);\n    } elseif ($request->has('edit') && preg_match('/^\\d+$/', $request->input('edit'))) {\n        $shift_entry_id = $request->input('edit');\n        $shift = DB::selectOne('\n                SELECT\n                    `ShiftEntry`.`freeloaded`,\n                    `ShiftEntry`.`freeload_comment`,\n                    `ShiftEntry`.`Comment`,\n                    `ShiftEntry`.`UID`,\n                    `ShiftTypes`.`name`,\n                    `Shifts`.*,\n                    `Room`.`Name`,\n                    `AngelTypes`.`name` AS `angel_type`\n                FROM `ShiftEntry`\n                JOIN `AngelTypes` ON (`ShiftEntry`.`TID` = `AngelTypes`.`id`)\n                JOIN `Shifts` ON (`ShiftEntry`.`SID` = `Shifts`.`SID`)\n                JOIN `ShiftTypes` ON (`ShiftTypes`.`id` = `Shifts`.`shifttype_id`)\n                JOIN `Room` ON (`Shifts`.`RID` = `Room`.`RID`)\n                WHERE `ShiftEntry`.`id`=?\n                AND `UID`=?\n                LIMIT 1\n            ',\n            [\n                $shift_entry_id,\n                $shifts_user->id,\n            ]\n        );\n        if (!empty($shift)) {\n            $freeloaded = $shift['freeloaded'];\n            $freeload_comment = $shift['freeload_comment'];\n\n            if ($request->hasPostData('submit')) {\n                $valid = true;\n                if (in_array('user_shifts_admin', $privileges)) {\n                    $freeloaded = $request->has('freeloaded');\n                    $freeload_comment = strip_request_item_nl('freeload_comment');\n                    if ($freeloaded && $freeload_comment == '') {\n                        $valid = false;\n                        error(__('Please enter a freeload comment!'));\n                    }\n                }\n\n                $comment = strip_request_item_nl('comment');\n                $user_source = User::find($shift['UID']);\n\n                if ($valid) {\n                    ShiftEntry_update([\n                        'id'               => $shift_entry_id,\n                        'Comment'          => $comment,\n                        'freeloaded'       => $freeloaded,\n                        'freeload_comment' => $freeload_comment\n                    ]);\n\n                    engelsystem_log(\n                        'Updated ' . User_Nick_render($user_source) . '\\'s shift ' . $shift['name']\n                        . ' from ' . date('Y-m-d H:i', $shift['start'])\n                        . ' to ' . date('Y-m-d H:i', $shift['end'])\n                        . ' with comment ' . $comment\n                        . '. Freeloaded: ' . ($freeloaded ? 'YES Comment: ' . $freeload_comment : 'NO')\n                    );\n                    success(__('Shift saved.'));\n                    redirect(page_link_to('users', ['action' => 'view', 'user_id' => $shifts_user->id]));\n                }\n            }\n\n            return ShiftEntry_edit_view(\n                User_Nick_render($shifts_user),\n                date('Y-m-d H:i', $shift['start']) . ', ' . shift_length($shift),\n                $shift['Name'],\n                $shift['name'],\n                $shift['angel_type'],\n                $shift['Comment'],\n                $shift['freeloaded'],\n                $shift['freeload_comment'],\n                in_array('user_shifts_admin', $privileges)\n            );\n        } else {\n            redirect(page_link_to('user_myshifts'));\n        }\n    }\n\n    redirect(page_link_to('users', ['action' => 'view', 'user_id' => $shifts_user->id]));\n    return '';\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction user_news_comments_title()\n{\n    return __('News comments');\n}\n\n/**\n * @return string\n */\nfunction news_title()\n{\n    return __('News');\n}\n\n/**\n * @return string\n */\nfunction meetings_title()\n{\n    return __('Meetings');\n}\n\n/**\n * @return string\n */\nfunction user_meetings()\n{\n    $display_news = config('display_news');\n    $html = '<div class=\"col-md-12\"><h1>' . meetings_title() . '</h1>' . msg();\n    $request = request();\n\n    if (preg_match('/^\\d{1,}$/', $request->input('page', 0))) {\n        $page = $request->input('page', 0);\n    } else {\n        $page = 0;\n    }\n\n    $news = DB::select(sprintf('\n        SELECT *\n        FROM `News`\n        WHERE `Treffen`=1\n        ORDER BY `Datum`DESC\n        LIMIT %u, %u',\n        $page * $display_news,\n        $display_news\n    ));\n    foreach ($news as $entry) {\n        $html .= display_news($entry);\n    }\n\n    $dis_rows = ceil(count(DB::select('SELECT `ID` FROM `News`')) / $display_news);\n    $html .= '<div class=\"text-center\">' . '<ul class=\"pagination\">';\n    for ($i = 0; $i < $dis_rows; $i++) {\n        if ($request->has('page') && $i == $request->input('page', 0)) {\n            $html .= '<li class=\"active\">';\n        } elseif (!$request->has('page') && $i == 0) {\n            $html .= '<li class=\"active\">';\n        } else {\n            $html .= '<li>';\n        }\n        $html .= '<a href=\"' . page_link_to('user_meetings', ['page' => $i]) . '\">' . ($i + 1) . '</a></li>';\n    }\n    $html .= '</ul></div></div>';\n\n    return $html;\n}\n\n/**\n * Renders the text content of a news entry\n *\n * @param array $news\n * @return string HTML\n */\nfunction news_text($news)\n{\n    $text = ReplaceSmilies($news['Text']);\n    $text = preg_replace(\"/\\r\\n\\r\\n/m\", '<br><br>', $text);\n    return $text;\n}\n\n/**\n * @param array $news\n * @return string\n */\nfunction display_news($news)\n{\n    global $privileges, $page;\n\n    $html = '';\n    $html .= '<div class=\"panel' . ($news['Treffen'] == 1 ? ' panel-info' : ' panel-default') . '\">';\n    $html .= '<div class=\"panel-heading\">';\n    $html .= '<h3 class=\"panel-title\">' . ($news['Treffen'] == 1 ? '[Meeting] ' : '') . ReplaceSmilies($news['Betreff']) . '</h3>';\n    $html .= '</div>';\n    $html .= '<div class=\"panel-body\">' . news_text($news) . '</div>';\n\n    $html .= '<div class=\"panel-footer text-muted\">';\n    if (in_array('admin_news', $privileges)) {\n        $html .= '<div class=\"pull-right\">'\n            . button_glyph(\n                page_link_to('admin_news', ['action' => 'edit', 'id' => $news['ID']]),\n                'edit',\n                'btn-xs'\n            )\n            . '</div>';\n    }\n    $html .= '<span class=\"glyphicon glyphicon-time\"></span> ' . date('Y-m-d H:i', $news['Datum']) . '&emsp;';\n\n    $html .= User_Nick_render(User::find($news['UID']));\n    if ($page != 'news_comments') {\n        $html .= '&emsp;<a href=\"' . page_link_to('news_comments', ['nid' => $news['ID']]) . '\">'\n            . '<span class=\"glyphicon glyphicon-comment\"></span> '\n            . __('Comments') . ' &raquo;</a> '\n            . '<span class=\"badge\">'\n            . count(DB::select('SELECT `ID` FROM `NewsComments` WHERE `Refid`=?', [$news['ID']]))\n            . '</span>';\n    }\n    $html .= '</div>';\n    $html .= '</div>';\n    return $html;\n}\n\n/**\n * @return string\n */\nfunction user_news_comments()\n{\n    $user = auth()->user();\n    $request = request();\n\n    $html = '<div class=\"col-md-12\"><h1>' . user_news_comments_title() . '</h1>';\n    if (\n        $request->has('nid')\n        && preg_match('/^\\d{1,}$/', $request->input('nid'))\n        && count(DB::select('SELECT `ID` FROM `News` WHERE `ID`=? LIMIT 1', [$request->input('nid')])) > 0\n    ) {\n        $nid = $request->input('nid');\n        $news = DB::selectOne('SELECT * FROM `News` WHERE `ID`=? LIMIT 1', [$nid]);\n        if ($request->hasPostData('submit') && $request->has('text')) {\n            $text = preg_replace(\n                \"/([^\\p{L}\\p{P}\\p{Z}\\p{N}\\n]{1,})/ui\",\n                '',\n                strip_tags($request->input('text'))\n            );\n            DB::insert('\n                    INSERT INTO `NewsComments` (`Refid`, `Datum`, `Text`, `UID`)\n                    VALUES (?, ?, ?, ?)\n                ',\n                [\n                    $nid,\n                    date('Y-m-d H:i:s'),\n                    $text,\n                    $user->id,\n                ]\n            );\n            engelsystem_log('Created news_comment: ' . $text);\n            $html .= success(__('Entry saved.'), true);\n        }\n\n        $html .= display_news($news);\n\n        $comments = DB::select(\n            'SELECT * FROM `NewsComments` WHERE `Refid`=? ORDER BY \\'ID\\'',\n            [$nid]\n        );\n        foreach ($comments as $comment) {\n            $user_source = User::find($comment['UID']);\n\n            $html .= '<div class=\"panel panel-default\">';\n            $html .= '<div class=\"panel-body\">' . nl2br(htmlspecialchars($comment['Text'])) . '</div>';\n            $html .= '<div class=\"panel-footer text-muted\">';\n            $html .= '<span class=\"glyphicon glyphicon-time\"></span> ' . $comment['Datum'] . '&emsp;';\n            $html .= User_Nick_render($user_source);\n            $html .= '</div>';\n            $html .= '</div>';\n        }\n\n        $html .= '<hr /><h2>' . __('New Comment:') . '</h2>';\n        $html .= form([\n            form_textarea('text', __('Message'), ''),\n            form_submit('submit', __('Save'))\n        ], page_link_to('news_comments', ['nid' => $news['ID']]));\n    } else {\n        $html .= __('Invalid request.');\n    }\n\n    return $html . '</div>';\n}\n\n/**\n * @return string\n */\nfunction user_news()\n{\n    global $privileges;\n    $user = auth()->user();\n    $display_news = config('display_news');\n    $request = request();\n\n    $html = '<div class=\"col-md-12\"><h1>' . news_title() . '</h1>' . msg();\n\n    $isMeeting = $request->postData('treffen');\n    if ($request->has('text') && $request->has('betreff') && in_array('admin_news', $privileges)) {\n        if (!$request->has('treffen')) {\n            $isMeeting = 0;\n        }\n\n        $text = $request->postData('text');\n        if (!in_array('admin_news_html', $privileges)) {\n            $text = strip_tags($text);\n        }\n\n        DB::insert('\n            INSERT INTO `News` (`Datum`, `Betreff`, `Text`, `UID`, `Treffen`)\n            VALUES (?, ?, ?, ?, ?)\n            ',\n            [\n                time(),\n                strip_tags($request->postData('betreff')),\n                $text,\n                $user->id,\n                $isMeeting,\n            ]\n        );\n        engelsystem_log('Created news: ' . $request->postData('betreff') . ', treffen: ' . $isMeeting);\n        success(__('Entry saved.'));\n        redirect(page_link_to('news'));\n    }\n\n    if (preg_match('/^\\d{1,}$/', $request->input('page', 0))) {\n        $page = $request->input('page', 0);\n    } else {\n        $page = 0;\n    }\n\n    $news = DB::select(sprintf('\n            SELECT *\n            FROM `News`\n            ORDER BY `Datum`\n            DESC LIMIT %u, %u\n        ',\n        $page * $display_news,\n        $display_news\n    ));\n    foreach ($news as $entry) {\n        $html .= display_news($entry);\n    }\n\n    $dis_rows = ceil(count(DB::select('SELECT `ID` FROM `News`')) / $display_news);\n    $html .= '<div class=\"text-center\">' . '<ul class=\"pagination\">';\n    for ($i = 0; $i < $dis_rows; $i++) {\n        if ($request->has('page') && $i == $request->input('page', 0)) {\n            $html .= '<li class=\"active\">';\n        } elseif (!$request->has('page') && $i == 0) {\n            $html .= '<li class=\"active\">';\n        } else {\n            $html .= '<li>';\n        }\n        $html .= '<a href=\"' . page_link_to('news', ['page' => $i]) . '\">' . ($i + 1) . '</a></li>';\n    }\n    $html .= '</ul></div>';\n\n    if (in_array('admin_news', $privileges)) {\n        $html .= '<hr />';\n        $html .= '<h2>' . __('Create news:') . '</h2>';\n\n        $html .= form([\n            form_text('betreff', __('Subject'), ''),\n            form_textarea('text', __('Message'), ''),\n            form_checkbox('treffen', __('Meeting'), false, 1),\n            form_submit('submit', __('Save'))\n        ]);\n    }\n    return $html . '</div>';\n}\n", "<?php\n\nuse Engelsystem\\Database\\DB;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction questions_title()\n{\n    return __('Ask the Heaven');\n}\n\n/**\n * @return string\n */\nfunction user_questions()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$request->has('action')) {\n        $open_questions = DB::select(\n            'SELECT * FROM `Questions` WHERE `AID` IS NULL AND `UID`=?',\n            [$user->id]\n        );\n\n        $answered_questions = DB::select(\n            'SELECT * FROM `Questions` WHERE NOT `AID` IS NULL AND `UID`=?',\n            [$user->id]\n        );\n        foreach ($answered_questions as &$question) {\n            $answer_user_source = User::find($question['AID']);\n            $question['answer_user'] = User_Nick_render($answer_user_source);\n        }\n\n        return Questions_view(\n            $open_questions,\n            $answered_questions,\n            page_link_to('user_questions', ['action' => 'ask'])\n        );\n    } else {\n        switch ($request->input('action')) {\n            case 'ask':\n                $question = strip_request_item_nl('question');\n                if ($question != '' && $request->hasPostData('submit')) {\n                    DB::insert('\n                        INSERT INTO `Questions` (`UID`, `Question`)\n                        VALUES (?, ?)\n                        ',\n                        [$user->id, $question]\n                    );\n\n                    success(__('You question was saved.'));\n                    redirect(page_link_to('user_questions'));\n                } else {\n                    return page_with_title(questions_title(), [\n                        error(__('Please enter a question!'), true)\n                    ]);\n                }\n                break;\n            case 'delete':\n                if (\n                    $request->has('id')\n                    && preg_match('/^\\d{1,11}$/', $request->input('id'))\n                    && $request->hasPostData('submit')\n                ) {\n                    $question_id = $request->input('id');\n                } else {\n                    return error(__('Incomplete call, missing Question ID.'), true);\n                }\n\n                $question = DB::selectOne(\n                    'SELECT `UID` FROM `Questions` WHERE `QID`=? LIMIT 1',\n                    [$question_id]\n                );\n                if (!empty($question) && $question['UID'] == $user->id) {\n                    DB::delete(\n                        'DELETE FROM `Questions` WHERE `QID`=? LIMIT 1',\n                        [$question_id]\n                    );\n                    redirect(page_link_to('user_questions'));\n                } else {\n                    return page_with_title(questions_title(), [\n                        error(__('No question found.'), true)\n                    ]);\n                }\n                break;\n        }\n    }\n\n    return '';\n}\n", "<?php\n\nuse Carbon\\Carbon;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @return string\n */\nfunction settings_title()\n{\n    return __('Settings');\n}\n\n/**\n * Change user main attributes (name, dates, etc.)\n *\n * @param User  $user_source The user\n * @param bool  $enable_tshirt_size\n * @param array $tshirt_sizes\n * @return User\n */\nfunction user_settings_main($user_source, $enable_tshirt_size, $tshirt_sizes)\n{\n    $valid = true;\n    $request = request();\n\n    if ($request->has('mail')) {\n        $result = User_validate_mail($request->input('mail'));\n        $user_source->email = $result->getValue();\n        if (!$result->isValid()) {\n            $valid = false;\n            error(__('E-mail address is not correct.'));\n        }\n    } else {\n        $valid = false;\n        error(__('Please enter your e-mail.'));\n    }\n\n    $user_source->settings->email_shiftinfo = $request->has('email_shiftinfo');\n    $user_source->settings->email_human = $request->has('email_by_human_allowed');\n\n    if ($request->has('tshirt_size') && isset($tshirt_sizes[$request->input('tshirt_size')])) {\n        $user_source->personalData->shirt_size = $request->input('tshirt_size');\n    } elseif ($enable_tshirt_size) {\n        $valid = false;\n    }\n\n    if ($request->has('planned_arrival_date')) {\n        $tmp = parse_date('Y-m-d H:i', $request->input('planned_arrival_date') . ' 00:00');\n        $result = User_validate_planned_arrival_date($tmp);\n        $user_source->personalData->planned_arrival_date = Carbon::createFromTimestamp($result->getValue());\n        if (!$result->isValid()) {\n            $valid = false;\n            error(__('Please enter your planned date of arrival. It should be after the buildup start date and before teardown end date.'));\n        }\n    }\n\n    if ($request->has('planned_departure_date')) {\n        $tmp = parse_date('Y-m-d H:i', $request->input('planned_departure_date') . ' 00:00');\n        $plannedArrivalDate = $user_source->personalData->planned_arrival_date;\n        $result = User_validate_planned_departure_date(\n            $plannedArrivalDate ? $plannedArrivalDate->getTimestamp() : 0,\n            $tmp\n        );\n        $user_source->personalData->planned_departure_date = Carbon::createFromTimestamp($result->getValue());\n        if (!$result->isValid()) {\n            $valid = false;\n            error(__('Please enter your planned date of departure. It should be after your planned arrival date and after buildup start date and before teardown end date.'));\n        }\n    }\n\n    // Trivia\n    $user_source->personalData->last_name = strip_request_item('lastname', $user_source['Name']);\n    $user_source->personalData->first_name = strip_request_item('prename', $user_source['Vorname']);\n    if (strlen(strip_request_item('dect')) <= 5) {\n        $user_source->contact->dect = strip_request_item('dect', $user_source['DECT']);\n    } else {\n        $valid = false;\n        error(__('For dect numbers are only 5 digits allowed.'));\n    }\n    $user_source->contact->mobile = strip_request_item('mobile', $user_source['Handy']);\n\n    if ($valid) {\n        $user_source->save();\n        $user_source->contact->save();\n        $user_source->personalData->save();\n        $user_source->settings->save();\n\n        success(__('Settings saved.'));\n        redirect(page_link_to('user_settings'));\n    }\n\n    return $user_source;\n}\n\n/**\n * Change user password.\n *\n * @param User $user_source The user\n */\nfunction user_settings_password($user_source)\n{\n    $request = request();\n    if (\n        !$request->has('password')\n        || !verify_password($request->postData('password'), $user_source->password, $user_source->id)\n    ) {\n        error(__('-> not OK. Please try again.'));\n    } elseif (strlen($request->postData('new_password')) < config('min_password_length')) {\n        error(__('Your password is to short (please use at least 6 characters).'));\n    } elseif ($request->postData('new_password') != $request->postData('new_password2')) {\n        error(__('Your passwords don\\'t match.'));\n    } else {\n        set_password($user_source->id, $request->postData('new_password'));\n        success(__('Password saved.'));\n    }\n    redirect(page_link_to('user_settings'));\n}\n\n/**\n * Change user theme\n *\n * @param User  $user_source The user\n * @param array $themes      List of available themes\n * @return User\n */\nfunction user_settings_theme($user_source, $themes)\n{\n    $valid = true;\n    $request = request();\n\n    if ($request->has('theme') && isset($themes[$request->input('theme')])) {\n        $user_source->settings->theme = $request->input('theme');\n    } else {\n        $valid = false;\n    }\n\n    if ($valid) {\n        $user_source->settings->save();\n\n        success(__('Theme changed.'));\n        redirect(page_link_to('user_settings'));\n    }\n\n    return $user_source;\n}\n\n/**\n * Change use locale\n *\n * @param User  $user_source The user\n * @param array $locales     List of available locales\n * @return User\n */\nfunction user_settings_locale($user_source, $locales)\n{\n    $valid = true;\n    $request = request();\n    $session = session();\n\n    if ($request->has('language') && isset($locales[$request->input('language')])) {\n        $user_source->settings->language = $request->input('language');\n    } else {\n        $valid = false;\n    }\n\n    if ($valid) {\n        $user_source->settings->save();\n        $session->set('locale', $user_source->settings->language);\n\n        success('Language changed.');\n        redirect(page_link_to('user_settings'));\n    }\n\n    return $user_source;\n}\n\n/**\n * Main user settings page/controller\n *\n * @return string\n */\nfunction user_settings()\n{\n    $request = request();\n    $config = config();\n    $themes = config('available_themes');\n\n    $enable_tshirt_size = config('enable_tshirt_size');\n    $tshirt_sizes = config('tshirt_sizes');\n    $locales = config('locales');\n\n    $buildup_start_date = null;\n    $teardown_end_date = null;\n\n    if ($buildup = $config->get('buildup_start')) {\n        /** @var Carbon $buildup */\n        $buildup_start_date = $buildup->getTimestamp();\n    }\n\n    if ($teardown = $config->get('teardown_end')) {\n        /** @var Carbon $teardown */\n        $teardown_end_date = $teardown->getTimestamp();\n    }\n\n    $user_source = auth()->user();\n    if ($request->hasPostData('submit')) {\n        $user_source = user_settings_main($user_source, $enable_tshirt_size, $tshirt_sizes);\n    } elseif ($request->hasPostData('submit_password')) {\n        user_settings_password($user_source);\n    } elseif ($request->hasPostData('submit_theme')) {\n        $user_source = user_settings_theme($user_source, $themes);\n    } elseif ($request->hasPostData('submit_language')) {\n        $user_source = user_settings_locale($user_source, $locales);\n    }\n\n    return User_settings_view(\n        $user_source,\n        $locales,\n        $themes,\n        $buildup_start_date,\n        $teardown_end_date,\n        $enable_tshirt_size,\n        $tshirt_sizes\n    );\n}\n", "<?php\n// Methods to build a html form.\nuse Carbon\\Carbon;\n\n/**\n * Renders a hidden input\n *\n * @param string $name  Name of the input\n * @param string $value The value\n * @return string rendered html\n */\nfunction form_hidden($name, $value)\n{\n    return '<input type=\"hidden\" name=\"' . $name . '\" value=\"' . htmlspecialchars($value) . '\" />';\n}\n\n/**\n * Rendert ein Zahlenfeld mit Buttons zum verstellen\n *\n * @param string $name\n * @param string $label\n * @param string $value\n * @return string\n */\nfunction form_spinner($name, $label, $value)\n{\n    $value = htmlspecialchars($value);\n\n    return form_element($label, '\n      <div class=\"input-group\">\n        <input id=\"spinner-' . $name . '\" class=\"form-control\" name=\"' . $name . '\" value=\"' . $value . '\" />\n        <div class=\"input-group-btn\">\n          <button id=\"spinner-' . $name . '-down\" class=\"btn btn-default\" type=\"button\">\n            <span class=\"glyphicon glyphicon-minus\"></span>\n          </button>\n          <button id=\"spinner-' . $name . '-up\" class=\"btn btn-default\" type=\"button\">\n            <span class=\"glyphicon glyphicon-plus\"></span>\n          </button>\n        </div>\n      </div>\n      <script type=\"text/javascript\">\n        $(\\'#spinner-' . $name . '-down\\').click(function() {\n          var spinner = $(\\'#spinner-' . $name . '\\');\n          spinner.val(parseInt(spinner.val()) - 1);\n        });\n        $(\\'#spinner-' . $name . '-up\\').click(function() {\n          var spinner = $(\\'#spinner-' . $name . '\\');\n          spinner.val(parseInt(spinner.val()) + 1);\n        });\n      </script>\n      ');\n}\n\n/**\n * Render a bootstrap datepicker\n *\n * @param string $name       Name of the parameter\n * @param string $label      Label\n * @param int    $value      Unix Timestamp\n * @param string $start_date Earliest possible date\n * @param string $end_date\n * @return string HTML\n */\nfunction form_date($name, $label, $value, $start_date = '', $end_date = '')\n{\n    $dom_id = $name . '-date';\n    $value = ($value instanceof Carbon) ? $value->getTimestamp() : $value;\n    $value = is_numeric($value) ? date('Y-m-d', $value) : '';\n    $start_date = is_numeric($start_date) ? date('Y-m-d', $start_date) : '';\n    $end_date = is_numeric($end_date) ? date('Y-m-d', $end_date) : '';\n    $locale = $locale = session()->get('locale');\n    $shortLocale = substr($locale, 0, 2);\n\n    return form_element($label, '\n    <div class=\"input-group date\" id=\"' . $dom_id . '\">\n      <input type=\"date\" name=\"' . $name . '\" class=\"form-control\" value=\"' . htmlspecialchars($value) . '\">'\n        . '<span class=\"input-group-addon\">' . glyph('th') . '</span>\n    </div>\n    <script type=\"text/javascript\">\n\t\t\t$(function(){\n        $(\"#' . $dom_id . '\").datepicker({\n\t\t\t\t  language: \"' . $shortLocale . '\",\n          todayBtn: \"linked\",\n          format: \"yyyy-mm-dd\",\n          startDate: \"' . $start_date . '\",\n          endDate: \"' . $end_date . '\",\n          orientation: \"bottom\"\n\t\t\t  });\n      });\n    </script>\n    ', $dom_id);\n}\n\n/**\n * Rendert eine Liste von Checkboxen f\u00fcr ein Formular\n *\n * @param string $name     Die Namen der Checkboxen werden aus name_key gebildet\n * @param string $label    Die Beschriftung der Liste\n * @param array  $items    Array mit den einzelnen Checkboxen\n * @param array  $selected Array mit den Keys, die ausgew\u00e4hlt sind\n * @return string\n */\nfunction form_checkboxes($name, $label, $items, $selected)\n{\n    $html = form_element($label, '');\n    foreach ($items as $key => $item) {\n        $html .= form_checkbox($name . '_' . $key, $item, array_search($key, $selected) !== false);\n    }\n    return $html;\n}\n\n/**\n * Rendert eine Tabelle von Checkboxen f\u00fcr ein Formular\n *\n * @param string[] $names    Assoziatives Array mit Namen der Checkboxen als Keys und \u00dcberschriften als Values\n * @param string   $label    Die Beschriftung der gesamten Tabelle\n * @param string[] $items    Array mit den Beschriftungen der Zeilen\n * @param array[]  $selected Mehrdimensionales Array, wobei $selected[foo] ein Array der in der Datenreihe foo\n *                           markierten Checkboxen ist\n * @param array    $disabled Wie selected, nur dass die entsprechenden Checkboxen deaktiviert statt markiert sind\n * @return string\n */\nfunction form_multi_checkboxes($names, $label, $items, $selected, $disabled = [])\n{\n    $html = '<table><thead><tr>';\n    foreach ($names as $title) {\n        $html .= '<th>' . $title . '</th>';\n    }\n    $html .= '</tr></thead><tbody>';\n    foreach ($items as $key => $item) {\n        $html .= '<tr>';\n        $dom_id = '';\n        foreach ($names as $name => $title) {\n            $dom_id = $name . '_' . $key;\n            $sel = array_search($key, $selected[$name]) !== false ? ' checked=\"checked\"' : '';\n            if (!empty($disabled) && !empty($disabled[$name]) && array_search($key, $disabled[$name]) !== false) {\n                $sel .= ' disabled=\"disabled\"';\n            }\n            $html .= '<td style=\"text-align: center;\">'\n                . sprintf(\n                    '<input type=\"checkbox\" id=\"%s\" name=\"%s[]\" value=\"%s\" %s />',\n                    $dom_id,\n                    $name,\n                    $key,\n                    $sel\n                )\n                . '</td>';\n        }\n        $html .= '<td><label for=\"' . $dom_id . '\">' . $item . '</label></td></tr>';\n    }\n    $html .= '</tbody></table>';\n    return form_element($label, $html);\n}\n\n/**\n * Rendert eine Checkbox\n *\n * @param string $name\n * @param string $label\n * @param string $selected\n * @param string $value\n * @param string $html_id\n * @return string\n */\nfunction form_checkbox($name, $label, $selected, $value = 'checked', $html_id = null)\n{\n    if (is_null($html_id)) {\n        $html_id = $name;\n    }\n\n    return '<div class=\"checkbox\"><label>'\n        . '<input type=\"checkbox\" id=\"' . $html_id . '\" name=\"' . $name . '\" value=\"' . htmlspecialchars($value) . '\" '\n        . ($selected ? ' checked=\"checked\"' : '') . ' /> '\n        . $label\n        . '</label></div>';\n}\n\n/**\n * Rendert einen Radio\n *\n * @param string $name\n * @param string $label\n * @param string $selected\n * @param string $value\n * @return string\n */\nfunction form_radio($name, $label, $selected, $value)\n{\n    return '<div class=\"radio\">'\n        . '<label><input type=\"radio\" id=\"' . $name . '\" name=\"' . $name . '\" value=\"' . htmlspecialchars($value) . '\" '\n        . ($selected ? ' checked=\"checked\"' : '') . ' /> '\n        . $label\n        . '</label></div>';\n}\n\n/**\n * Rendert einen Infotext in das Formular\n *\n * @param string $label\n * @param string $text\n * @return string\n */\nfunction form_info($label, $text = '')\n{\n    if ($label == '') {\n        return '<span class=\"help-block\">' . glyph('info-sign') . $text . '</span>';\n    }\n    if ($text == '') {\n        return '<h4>' . $label . '</h4>';\n    }\n    return form_element($label, '<p class=\"form-control-static\">' . $text . '</p>', '');\n}\n\n/**\n * Rendert den Absenden-Button eines Formulars\n *\n * @param string $name\n * @param string $label\n * @param string $class\n * @param bool   $wrapForm\n * @return string\n */\nfunction form_submit($name, $label, $class = '', $wrapForm = true)\n{\n    $button = '<button class=\"btn btn-primary' . ($class ? ' ' . $class : '') . '\" type=\"submit\" name=\"' . $name . '\">'\n        . $label\n        . '</button>';\n\n    if (!$wrapForm) {\n        return $button;\n    }\n\n    return form_element(\n        null,\n        $button\n    );\n}\n\n/**\n * Rendert ein Formular-Textfeld\n *\n * @param string $name\n * @param string $label\n * @param string $value\n * @param bool   $disabled\n * @return string\n */\nfunction form_text($name, $label, $value, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        $label,\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"text\" name=\"' . $name\n        . '\" value=\"' . htmlspecialchars($value) . '\" ' . $disabled . '/>',\n        'form_' . $name\n    );\n}\n\n/**\n * Renders a text input with placeholder instead of label.\n *\n * @param String  $name        Input name\n * @param String  $placeholder Placeholder\n * @param String  $value       The value\n * @param Boolean $disabled    Is the field enabled?\n * @return string\n */\nfunction form_text_placeholder($name, $placeholder, $value, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element('',\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"text\" name=\"' . $name\n        . '\" value=\"' . htmlspecialchars($value) . '\" placeholder=\"' . $placeholder\n        . '\" ' . $disabled . '/>'\n    );\n}\n\n/**\n * Rendert ein Formular-Emailfeld\n *\n * @param string $name\n * @param string $label\n * @param string $value\n * @param bool   $disabled\n * @return string\n */\nfunction form_email($name, $label, $value, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        $label,\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"email\" name=\"' . $name . '\" value=\"'\n        . htmlspecialchars($value) . '\" ' . $disabled . '/>',\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Dateifeld\n *\n * @param string $name\n * @param string $label\n * @return string\n */\nfunction form_file($name, $label)\n{\n    return form_element(\n        $label,\n        sprintf('<input id=\"form_%1$s\" type=\"file\" name=\"%1$s\" />', $name),\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Passwortfeld\n *\n * @param string $name\n * @param string $label\n * @param bool   $disabled\n * @return string\n */\nfunction form_password($name, $label, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        $label,\n        sprintf(\n            '<input class=\"form-control\" id=\"form_%1$s\" type=\"password\" name=\"%1$s\" value=\"\"%s/>',\n            $name,\n            $disabled\n        ),\n        'form_' . $name\n    );\n}\n\n/**\n * Renders a password input with placeholder instead of label.\n *\n * @param string $name\n * @param string $placeholder\n * @param bool   $disabled\n * @return string\n */\nfunction form_password_placeholder($name, $placeholder, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        '',\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"password\" name=\"'\n        . $name . '\" value=\"\" placeholder=\"' . $placeholder . '\" ' . $disabled . '/>',\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Textfeld\n *\n * @param string $name\n * @param string $label\n * @param string $value\n * @param bool   $disabled\n * @return string\n */\nfunction form_textarea($name, $label, $value, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        $label,\n        '<textarea rows=\"5\" class=\"form-control\" id=\"form_' . $name . '\" name=\"'\n        . $name . '\" ' . $disabled . '>' . htmlspecialchars($value) . '</textarea>',\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Auswahlfeld\n *\n * @param string   $name\n * @param string   $label\n * @param string[] $values\n * @param string   $selected\n * @param string   $selectText\n * @return string\n */\nfunction form_select($name, $label, $values, $selected, $selectText = '')\n{\n    return form_element(\n        $label,\n        html_select_key('form_' . $name, $name, $values, $selected, $selectText),\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Element\n *\n * @param string $label\n * @param string $input\n * @param string $for\n * @return string\n */\nfunction form_element($label, $input, $for = '')\n{\n    if (empty($label)) {\n        return '<div class=\"form-group\">' . $input . '</div>';\n    }\n\n    return '<div class=\"form-group\">' . '<label for=\"' . $for . '\">' . $label . '</label>' . $input . '</div>';\n}\n\n/**\n * Rendert ein Formular\n *\n * @param string[] $elements\n * @param string   $action\n * @return string\n */\nfunction form($elements, $action = '')\n{\n    return '<form action=\"' . $action . '\" enctype=\"multipart/form-data\" method=\"post\">'\n        . form_csrf()\n        . join($elements)\n        . '</form>';\n}\n\n/**\n * @return string\n */\nfunction form_csrf()\n{\n    return form_hidden('_token', session()->get('_token'));\n}\n\n/**\n * @param string   $name\n * @param String[] $options\n * @param string   $selected\n * @return string\n */\nfunction html_options($name, $options, $selected = '')\n{\n    $html = '';\n    foreach ($options as $value => $label) {\n        $html .= '<input type=\"radio\"' . ($value == $selected ? ' checked=\"checked\"' : '') . ' name=\"'\n            . $name . '\" value=\"' . $value . '\"> ' . $label;\n    }\n\n    return $html;\n}\n\n/**\n * @param string   $dom_id\n * @param string   $name\n * @param string[] $rows\n * @param string   $selected\n * @param string   $selectText\n * @return string\n */\nfunction html_select_key($dom_id, $name, $rows, $selected, $selectText = '')\n{\n    $html = '<select class=\"form-control\" id=\"' . $dom_id . '\" name=\"' . $name . '\">';\n    if (!empty($selectText)) {\n        $html .= '<option value=\"\">' . $selectText . '</option>';\n    }\n    foreach ($rows as $key => $row) {\n        if (($key == $selected) || ($row === $selected)) {\n            $html .= '<option value=\"' . $key . '\" selected=\"selected\">' . $row . '</option>';\n        } else {\n            $html .= '<option value=\"' . $key . '\">' . $row . '</option>';\n        }\n    }\n    $html .= '</select>';\n    return $html;\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\ShiftCalendarRenderer;\nuse Engelsystem\\ShiftsFilterRenderer;\n\n/**\n * AngelTypes\n */\n\n/**\n * Renders the angeltypes name as link.\n *\n * @param array $angeltype\n * @return string\n */\nfunction AngelType_name_render($angeltype)\n{\n    return '<a href=\"' . angeltype_link($angeltype['id']) . '\">'\n        . ($angeltype['restricted'] ? glyph('lock') : '') . $angeltype['name']\n        . '</a>';\n}\n\n/**\n * Render angeltype membership state\n *\n * @param array $user_angeltype UserAngelType and AngelType\n * @return string\n */\nfunction AngelType_render_membership($user_angeltype)\n{\n    if (!empty($user_angeltype['user_angeltype_id'])) {\n        if ($user_angeltype['restricted']) {\n            if (empty($user_angeltype['confirm_user_id'])) {\n                return glyph('lock') . __('Unconfirmed');\n            } elseif ($user_angeltype['supporter']) {\n                return glyph_bool(true) . __('Supporter');\n            }\n            return glyph_bool(true) . __('Member');\n        } elseif ($user_angeltype['supporter']) {\n            return glyph_bool(true) . __('Supporter');\n        }\n        return glyph_bool(true) . __('Member');\n    }\n    return glyph_bool(false);\n}\n\n/**\n * @param array $angeltype\n * @return string\n */\nfunction AngelType_delete_view($angeltype)\n{\n    return page_with_title(sprintf(__('Delete angeltype %s'), $angeltype['name']), [\n        info(sprintf(__('Do you want to delete angeltype %s?'), $angeltype['name']), true),\n        form([\n            buttons([\n                button(page_link_to('angeltypes'), glyph('remove') . __('cancel')),\n                form_submit('delete', glyph('ok') . __('delete'), 'btn-danger', false),\n            ])\n        ]),\n    ]);\n}\n\n/**\n * Render angeltype edit form.\n *\n * @param array   $angeltype      The angeltype to edit\n * @param boolean $supporter_mode Is the user a supporter of this angeltype?\n * @return string\n */\nfunction AngelType_edit_view($angeltype, $supporter_mode)\n{\n    return page_with_title(sprintf(__('Edit %s'), $angeltype['name']), [\n        buttons([\n            button(page_link_to('angeltypes'), __('Angeltypes'), 'back')\n        ]),\n        msg(),\n        form([\n            $supporter_mode\n                ? form_info(__('Name'), $angeltype['name'])\n                : form_text('name', __('Name'), $angeltype['name']),\n            $supporter_mode\n                ? form_info(__('Restricted'), $angeltype['restricted'] ? __('Yes') : __('No'))\n                : form_checkbox('restricted', __('Restricted'), $angeltype['restricted']),\n            form_info(\n                '',\n                __('Restricted angel types can only be used by an angel if enabled by a supporter (double opt-in).')\n            ),\n            $supporter_mode\n                ? form_info(__('No Self Sign Up'), $angeltype['no_self_signup'] ? __('Yes') : __('No'))\n                : form_checkbox('no_self_signup', __('No Self Sign Up'), $angeltype['no_self_signup']),\n            $supporter_mode\n                ? form_info(__('Requires driver license'),\n                $angeltype['requires_driver_license']\n                    ? __('Yes')\n                    : __('No'))\n                : form_checkbox(\n                'requires_driver_license',\n                __('Requires driver license'),\n                $angeltype['requires_driver_license']),\n            $supporter_mode\n                ? form_info(__('Show on dashboard'), $angeltype['show_on_dashboard'] ? __('Yes') : __('No'))\n                : form_checkbox('show_on_dashboard', __('Show on dashboard'), $angeltype['show_on_dashboard']),\n            form_textarea('description', __('Description'), $angeltype['description']),\n            form_info('', __('Please use markdown for the description.')),\n            heading(__('Contact'), 3),\n            form_info(\n                '',\n                __('Primary contact person/desk for user questions.')\n            ),\n            form_text('contact_name', __('Name'), $angeltype['contact_name']),\n            form_text('contact_dect', __('DECT'), $angeltype['contact_dect']),\n            form_text('contact_email', __('E-Mail'), $angeltype['contact_email']),\n            form_submit('submit', __('Save'))\n        ])\n    ]);\n}\n\n/**\n * Renders the buttons for the angeltype view.\n *\n * @param array      $angeltype\n * @param array|null $user_angeltype\n * @param bool       $admin_angeltypes\n * @param bool       $supporter\n * @param array|null $user_driver_license\n * @param User|null  $user\n * @return string\n */\nfunction AngelType_view_buttons($angeltype, $user_angeltype, $admin_angeltypes, $supporter, $user_driver_license, $user)\n{\n    $buttons = [\n        button(page_link_to('angeltypes'), __('Angeltypes'), 'back')\n    ];\n\n    if ($angeltype['requires_driver_license']) {\n        $buttons[] = button(\n            user_driver_license_edit_link($user),\n            glyph('road') . __('my driving license')\n        );\n    }\n\n    if (is_null($user_angeltype)) {\n        $buttons[] = button(\n            page_link_to('user_angeltypes', ['action' => 'add', 'angeltype_id' => $angeltype['id']]),\n            __('join'),\n            'add'\n        );\n    } else {\n        if ($angeltype['requires_driver_license'] && empty($user_driver_license)) {\n            error(__('This angeltype requires a driver license. Please enter your driver license information!'));\n        }\n\n        if ($angeltype['restricted'] && empty($user_angeltype['confirm_user_id'])) {\n            error(sprintf(\n                __('You are unconfirmed for this angeltype. Please go to the introduction for %s to get confirmed.'),\n                $angeltype['name']\n            ));\n        }\n        $buttons[] = button(\n            page_link_to('user_angeltypes', ['action' => 'delete', 'user_angeltype_id' => $user_angeltype['id']]),\n            __('leave')\n        );\n    }\n\n    if ($admin_angeltypes || $supporter) {\n        $buttons[] = button(\n            page_link_to('angeltypes', ['action' => 'edit', 'angeltype_id' => $angeltype['id']]),\n            __('edit'),\n            'edit'\n        );\n    }\n    if ($admin_angeltypes) {\n        $buttons[] = button(\n            page_link_to('angeltypes', ['action' => 'delete', 'angeltype_id' => $angeltype['id']]),\n            __('delete'),\n            'delete'\n        );\n    }\n\n    return buttons($buttons);\n}\n\n/**\n * Renders and sorts the members of an angeltype into supporters, members and unconfirmed members.\n *\n * @param array  $angeltype\n * @param User[] $members\n * @param bool   $admin_user_angeltypes\n * @param bool   $admin_angeltypes\n * @return array [supporters, members, unconfirmed members]\n */\nfunction AngelType_view_members($angeltype, $members, $admin_user_angeltypes, $admin_angeltypes)\n{\n    $supporters = [];\n    $members_confirmed = [];\n    $members_unconfirmed = [];\n    foreach ($members as $member) {\n        $member->name = User_Nick_render($member);\n        $member['dect'] = $member->contact->dect;\n        if ($angeltype['requires_driver_license']) {\n            $member['wants_to_drive'] = glyph_bool($member['wants_to_drive']);\n            $member['has_car'] = glyph_bool($member['has_car']);\n            $member['has_license_car'] = glyph_bool($member['has_license_car']);\n            $member['has_license_3_5t_transporter'] = glyph_bool($member['has_license_3_5t_transporter']);\n            $member['has_license_7_5t_truck'] = glyph_bool($member['has_license_7_5t_truck']);\n            $member['has_license_12_5t_truck'] = glyph_bool($member['has_license_12_5t_truck']);\n            $member['has_license_forklift'] = glyph_bool($member['has_license_forklift']);\n        }\n\n        if ($angeltype['restricted'] && empty($member['confirm_user_id'])) {\n            $member['actions'] = table_buttons([\n                button(\n                    page_link_to(\n                        'user_angeltypes',\n                        ['action' => 'confirm', 'user_angeltype_id' => $member['user_angeltype_id']]\n                    ),\n                    __('confirm'),\n                    'btn-xs'\n                ),\n                button(\n                    page_link_to(\n                        'user_angeltypes',\n                        ['action' => 'delete', 'user_angeltype_id' => $member['user_angeltype_id']]\n                    ),\n                    __('deny'),\n                    'btn-xs'\n                )\n            ]);\n            $members_unconfirmed[] = $member;\n        } elseif ($member['supporter']) {\n            if ($admin_angeltypes) {\n                $member['actions'] = table_buttons([\n                    button(\n                        page_link_to('user_angeltypes', [\n                            'action'            => 'update',\n                            'user_angeltype_id' => $member['user_angeltype_id'],\n                            'supporter'         => 0\n                        ]),\n                        __('Remove supporter rights'),\n                        'btn-xs'\n                    )\n                ]);\n            } else {\n                $member['actions'] = '';\n            }\n            $supporters[] = $member;\n        } else {\n            if ($admin_user_angeltypes) {\n                $member['actions'] = table_buttons([\n                    $admin_angeltypes\n                        ? button(page_link_to('user_angeltypes', [\n                        'action'            => 'update',\n                        'user_angeltype_id' => $member['user_angeltype_id'],\n                        'supporter'         => 1\n                    ]),\n                        __('Add supporter rights'), 'btn-xs')\n                        : '',\n                    button(\n                        page_link_to('user_angeltypes', [\n                            'action'            => 'delete',\n                            'user_angeltype_id' => $member['user_angeltype_id']\n                        ]),\n                        __('remove'),\n                        'btn-xs'\n                    )\n                ]);\n            }\n            $members_confirmed[] = $member;\n        }\n    }\n\n    return [\n        $supporters,\n        $members_confirmed,\n        $members_unconfirmed\n    ];\n}\n\n/**\n * Creates the needed member table headers according to given rights and settings from the angeltype.\n *\n * @param array $angeltype\n * @param bool  $supporter\n * @param bool  $admin_angeltypes\n * @return array\n */\nfunction AngelType_view_table_headers($angeltype, $supporter, $admin_angeltypes)\n{\n    if ($angeltype['requires_driver_license'] && ($supporter || $admin_angeltypes)) {\n        return [\n            'name'                         => __('Nick'),\n            'dect'                         => __('DECT'),\n            'wants_to_drive'               => __('Driver'),\n            'has_car'                      => __('Has car'),\n            'has_license_car'              => __('Car'),\n            'has_license_3_5t_transporter' => __('3,5t Transporter'),\n            'has_license_7_5t_truck'       => __('7,5t Truck'),\n            'has_license_12_5t_truck'      => __('12,5t Truck'),\n            'has_license_forklift'         => __('Forklift'),\n            'actions'                      => ''\n        ];\n    }\n    return [\n        'name'    => __('Nick'),\n        'dect'    => __('DECT'),\n        'actions' => ''\n    ];\n}\n\n/**\n * Render an angeltype page containing the member lists.\n *\n * @param array                 $angeltype\n * @param User[]                $members\n * @param array                 $user_angeltype\n * @param bool                  $admin_user_angeltypes\n * @param bool                  $admin_angeltypes\n * @param bool                  $supporter\n * @param array                 $user_driver_license\n * @param User                  $user\n * @param ShiftsFilterRenderer  $shiftsFilterRenderer\n * @param ShiftCalendarRenderer $shiftCalendarRenderer\n * @param int                   $tab The selected tab\n * @return string\n */\nfunction AngelType_view(\n    $angeltype,\n    $members,\n    $user_angeltype,\n    $admin_user_angeltypes,\n    $admin_angeltypes,\n    $supporter,\n    $user_driver_license,\n    $user,\n    ShiftsFilterRenderer $shiftsFilterRenderer,\n    ShiftCalendarRenderer $shiftCalendarRenderer,\n    $tab\n) {\n    return page_with_title(sprintf(__('Team %s'), $angeltype['name']), [\n        AngelType_view_buttons($angeltype, $user_angeltype, $admin_angeltypes, $supporter, $user_driver_license, $user),\n        msg(),\n        tabs([\n            __('Info')   => AngelType_view_info(\n                $angeltype,\n                $members,\n                $admin_user_angeltypes,\n                $admin_angeltypes,\n                $supporter\n            ),\n            __('Shifts') => AngelType_view_shifts(\n                $angeltype,\n                $shiftsFilterRenderer,\n                $shiftCalendarRenderer\n            )\n        ], $tab)\n    ]);\n}\n\n/**\n * @param array                 $angeltype\n * @param ShiftsFilterRenderer  $shiftsFilterRenderer\n * @param ShiftCalendarRenderer $shiftCalendarRenderer\n * @return string HTML\n */\nfunction AngelType_view_shifts($angeltype, $shiftsFilterRenderer, $shiftCalendarRenderer)\n{\n    $shifts = $shiftsFilterRenderer->render(page_link_to('angeltypes', [\n        'action'       => 'view',\n        'angeltype_id' => $angeltype['id']\n    ]));\n    $shifts .= $shiftCalendarRenderer->render();\n\n    return div('first', $shifts);\n}\n\n/**\n * @param array  $angeltype\n * @param User[] $members\n * @param bool   $admin_user_angeltypes\n * @param bool   $admin_angeltypes\n * @param bool   $supporter\n * @return string HTML\n */\nfunction AngelType_view_info(\n    $angeltype,\n    $members,\n    $admin_user_angeltypes,\n    $admin_angeltypes,\n    $supporter\n) {\n    $info = [];\n    if (AngelType_has_contact_info($angeltype)) {\n        $info[] = AngelTypes_render_contact_info($angeltype);\n    }\n\n    $info[] = '<h3>' . __('Description') . '</h3>';\n    $parsedown = new Parsedown();\n    if ($angeltype['description'] != '') {\n        $info[] = '<div class=\"well\">' . $parsedown->parse($angeltype['description']) . '</div>';\n    }\n\n    list($supporters, $members_confirmed, $members_unconfirmed) = AngelType_view_members(\n        $angeltype,\n        $members,\n        $admin_user_angeltypes,\n        $admin_angeltypes\n    );\n    $table_headers = AngelType_view_table_headers($angeltype, $supporter, $admin_angeltypes);\n\n    if (count($supporters) > 0) {\n        $info[] = '<h3>' . __('Supporters') . '</h3>';\n        $info[] = table($table_headers, $supporters);\n    }\n\n    if (count($members_confirmed) > 0) {\n        $members_confirmed[] = [\n            'name'    => __('Sum'),\n            'dect'    => count($members_confirmed),\n            'actions' => ''\n        ];\n    }\n\n    if (count($members_unconfirmed) > 0) {\n        $members_unconfirmed[] = [\n            'name'    => __('Sum'),\n            'dect'    => count($members_unconfirmed),\n            'actions' => ''\n        ];\n    }\n\n    $info[] = '<h3>' . __('Members') . '</h3>';\n    if ($admin_user_angeltypes) {\n        $info[] = buttons([\n            button(\n                page_link_to(\n                    'user_angeltypes',\n                    ['action' => 'add', 'angeltype_id' => $angeltype['id']]\n                ),\n                __('Add'),\n                'add'\n            )\n        ]);\n    }\n    $info[] = table($table_headers, $members_confirmed);\n\n    if ($admin_user_angeltypes && $angeltype['restricted'] && count($members_unconfirmed) > 0) {\n        $info[] = '<h3>' . __('Unconfirmed') . '</h3>';\n        $info[] = buttons([\n            button(\n                page_link_to('user_angeltypes', ['action' => 'confirm_all', 'angeltype_id' => $angeltype['id']]),\n                glyph('ok') . __('confirm all')\n            ),\n            button(\n                page_link_to('user_angeltypes', ['action' => 'delete_all', 'angeltype_id' => $angeltype['id']]),\n                glyph('remove') . __('deny all')\n            )\n        ]);\n        $info[] = table($table_headers, $members_unconfirmed);\n    }\n\n    return join($info);\n}\n\n/**\n * Renders the contact info\n *\n * @param array $angeltype\n * @return string HTML\n */\nfunction AngelTypes_render_contact_info($angeltype)\n{\n    return heading(__('Contact'), 3) . description([\n            __('Name')   => $angeltype['contact_name'],\n            __('DECT')   => $angeltype['contact_dect'],\n            __('E-Mail') => $angeltype['contact_email']\n        ]);\n}\n\n/**\n * Display the list of angeltypes.\n *\n * @param array $angeltypes\n * @param bool  $admin_angeltypes\n * @return string\n */\nfunction AngelTypes_list_view($angeltypes, $admin_angeltypes)\n{\n    return page_with_title(angeltypes_title(), [\n        msg(),\n        buttons([\n            $admin_angeltypes\n                ? button(page_link_to('angeltypes', ['action' => 'edit']), __('New angeltype'), 'add')\n                : '',\n            button(page_link_to('angeltypes', ['action' => 'about']), __('Teams/Job description'))\n        ]),\n        table([\n            'name'           => __('Name'),\n            'restricted'     => glyph('lock') . __('Restricted'),\n            'no_self_signup' => glyph('share') . __('Self Sign Up Allowed'),\n            'membership'     => __('Membership'),\n            'actions'        => ''\n        ], $angeltypes)\n    ]);\n}\n\n/**\n * Renders the about info for an angeltype.\n *\n * @param array $angeltype\n * @return string\n */\nfunction AngelTypes_about_view_angeltype($angeltype)\n{\n    $parsedown = new Parsedown();\n\n    $html = '<h2>' . $angeltype['name'] . '</h2>';\n\n    if (AngelType_has_contact_info($angeltype)) {\n        $html .= AngelTypes_render_contact_info($angeltype);\n    }\n\n    if (isset($angeltype['user_angeltype_id'])) {\n        $buttons = [];\n        if (!empty($angeltype['user_angeltype_id'])) {\n            $buttons[] = button(\n                page_link_to(\n                    'user_angeltypes',\n                    ['action' => 'delete', 'user_angeltype_id' => $angeltype['user_angeltype_id']]\n                ),\n                __('leave')\n            );\n        } else {\n            $buttons[] = button(\n                page_link_to('user_angeltypes', ['action' => 'add', 'angeltype_id' => $angeltype['id']]),\n                __('join'),\n                'add'\n            );\n        }\n        $html .= buttons($buttons);\n    }\n\n    if ($angeltype['restricted']) {\n        $html .= info(\n            __('This angeltype is restricted by double-opt-in by a team supporter. Please show up at the according introduction meetings.'),\n            true\n        );\n    }\n    if ($angeltype['description'] != '') {\n        $html .= '<div class=\"well\">' . $parsedown->parse($angeltype['description']) . '</div>';\n    }\n    $html .= '<hr />';\n\n    return $html;\n}\n\n/**\n * Renders a site that contains every angeltype and its description, basically as an overview of the needed help types.\n *\n * @param array[] $angeltypes\n * @param bool    $user_logged_in\n * @return string\n */\nfunction AngelTypes_about_view($angeltypes, $user_logged_in)\n{\n    global $privileges;\n\n    $buttons = [];\n\n    if ($user_logged_in) {\n        $buttons[] = button(page_link_to('angeltypes'), angeltypes_title(), 'back');\n    } else {\n        if (in_array('register', $privileges) && config('registration_enabled')) {\n            $buttons[] = button(page_link_to('register'), register_title());\n        }\n\n        $buttons[] = button(page_link_to('login'), login_title());\n    }\n\n    $faqUrl = config('faq_url');\n    if (!empty($faqUrl)) {\n        $buttons[] = button($faqUrl, __('FAQ'), 'btn-primary');\n    }\n\n    $content = [\n        buttons($buttons),\n        '<p>' . __('Here is the list of teams and their tasks. If you have questions, read the FAQ.') . '</p>',\n        '<hr />'\n    ];\n    foreach ($angeltypes as $angeltype) {\n        $content[] = AngelTypes_about_view_angeltype($angeltype);\n    }\n\n    return page_with_title(__('Teams/Job description'), $content);\n}\n", "<?php\n\n/**\n * @param array[] $open_questions\n * @param array[] $answered_questions\n * @param string  $ask_action\n * @return string\n */\nfunction Questions_view($open_questions, $answered_questions, $ask_action)\n{\n    foreach ($open_questions as &$question) {\n        $question['actions'] = form([\n            form_submit('submit', __('delete'), 'btn-default btn-xs')\n        ], page_link_to('user_questions', ['action' => 'delete', 'id' => $question['QID']]));\n        $question['Question'] = str_replace(\"\\n\", '<br />', $question['Question']);\n    }\n\n    foreach ($answered_questions as &$question) {\n        $question['Question'] = str_replace(\"\\n\", '<br />', $question['Question']);\n        $question['Answer'] = str_replace(\"\\n\", '<br />', $question['Answer']);\n        $question['actions'] = form([\n            form_submit('submit', __('delete'), 'btn-default btn-xs')\n        ], page_link_to('user_questions', ['action' => 'delete', 'id' => $question['QID']]));\n    }\n\n    return page_with_title(questions_title(), [\n        msg(),\n        heading(__('Open questions'), 2),\n        table([\n            'Question' => __('Question'),\n            'actions'  => ''\n        ], $open_questions),\n        heading(__('Answered questions'), 2),\n        table([\n            'Question'    => __('Question'),\n            'answer_user' => __('Answered by'),\n            'Answer'      => __('Answer'),\n            'actions'     => ''\n        ], $answered_questions),\n        heading(__('Ask the Heaven'), 2),\n        form([\n            form_textarea('question', __('Your Question:'), ''),\n            form_submit('submit', __('Save'))\n        ], $ask_action)\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * Sign off from an user from a shift with admin permissions, asking for ack.\n *\n * @param array $shift\n * @param array $angeltype\n * @param User  $signoff_user\n *\n * @return string HTML\n */\nfunction ShiftEntry_delete_view_admin($shift, $angeltype, $signoff_user)\n{\n    return page_with_title(ShiftEntry_delete_title(), [\n        info(sprintf(\n            __('Do you want to sign off %s from shift %s from %s to %s as %s?'),\n            User_Nick_render($signoff_user),\n            $shift['name'],\n            date('Y-m-d H:i', $shift['start']),\n            date('Y-m-d H:i', $shift['end']),\n            $angeltype['name']\n        ), true),\n        form([\n            buttons([\n                button(user_link($signoff_user->id), glyph('remove') . __('cancel')),\n                form_submit('delete', glyph('ok') . __('delete'), 'btn-danger', false)\n            ]),\n        ]),\n    ]);\n}\n\n/**\n * Sign off from a shift, asking for ack.\n *\n * @param array $shift\n * @param array $angeltype\n * @param int   $signoff_user_id\n *\n * @return string HTML\n */\nfunction ShiftEntry_delete_view($shift, $angeltype, $signoff_user_id)\n{\n    return page_with_title(ShiftEntry_delete_title(), [\n        info(sprintf(\n            __('Do you want to sign off from your shift %s from %s to %s as %s?'),\n            $shift['name'],\n            date('Y-m-d H:i', $shift['start']),\n            date('Y-m-d H:i', $shift['end']),\n            $angeltype['name']\n        ), true),\n\n        form([\n            buttons([\n                button(user_link($signoff_user_id), glyph('remove') . __('cancel')),\n                form_submit('delete', glyph('ok') . __('delete'), 'btn-danger', false),\n            ]),\n        ]),\n    ]);\n}\n\n/**\n * Title for deleting a shift entry.\n */\nfunction ShiftEntry_delete_title()\n{\n    return __('Shift sign off');\n}\n\n/**\n * Admin puts user into shift.\n *\n * @param array $shift\n * @param array $room\n * @param array $angeltype\n * @param array $angeltypes_select\n * @param User  $signup_user\n * @param array $users_select\n * @return string\n */\nfunction ShiftEntry_create_view_admin($shift, $room, $angeltype, $angeltypes_select, $signup_user, $users_select)\n{\n    return page_with_title(\n        ShiftEntry_create_title() . ': ' . $shift['name']\n        . ' <small class=\"moment-countdown\" data-timestamp=\"' . $shift['start'] . '\">%c</small>',\n        [\n            Shift_view_header($shift, $room),\n            info(__('Do you want to sign up the following user for this shift?'), true),\n            form([\n                form_select('angeltype_id', __('Angeltype'), $angeltypes_select, $angeltype['id']),\n                form_select('user_id', __('User'), $users_select, $signup_user->id),\n                form_submit('submit', glyph('ok') . __('Save'))\n            ])\n        ]);\n}\n\n/**\n * Supporter puts user into shift.\n *\n * @param array $shift\n * @param array $room\n * @param array $angeltype\n * @param User  $signup_user\n * @param array $users_select\n * @return string\n */\nfunction ShiftEntry_create_view_supporter($shift, $room, $angeltype, $signup_user, $users_select)\n{\n    return page_with_title(ShiftEntry_create_title() . ': ' . $shift['name']\n        . ' <small class=\"moment-countdown\" data-timestamp=\"' . $shift['start'] . '\">%c</small>',\n        [\n            Shift_view_header($shift, $room),\n            info(sprintf(__('Do you want to sign up the following user for this shift as %s?'),\n                AngelType_name_render($angeltype)), true),\n            form([\n                form_select('user_id', __('User'), $users_select, $signup_user->id),\n                form_submit('submit', glyph('ok') . __('Save'))\n            ])\n        ]);\n}\n\n/**\n * User joining a shift.\n *\n * @param array  $shift\n * @param array  $room\n * @param array  $angeltype\n * @param string $comment\n * @return string\n */\nfunction ShiftEntry_create_view_user($shift, $room, $angeltype, $comment)\n{\n    return page_with_title(ShiftEntry_create_title() . ': ' . $shift['name']\n        . ' <small class=\"moment-countdown\" data-timestamp=\"' . $shift['start'] . '\">%c</small>',\n        [\n            Shift_view_header($shift, $room),\n            info(sprintf(__('Do you want to sign up for this shift as %s?'), AngelType_name_render($angeltype)), true),\n            form([\n                form_textarea('comment', __('Comment (for your eyes only):'), $comment),\n                form_submit('submit', glyph('ok') . __('Save'))\n            ])\n        ]);\n}\n\n/**\n * Title for creating a shift entry.\n */\nfunction ShiftEntry_create_title()\n{\n    return __('Shift signup');\n}\n\n/**\n * Display form for adding/editing a shift entry.\n *\n * @param string $angel\n * @param string $date\n * @param string $location\n * @param string $title\n * @param string $type\n * @param string $comment\n * @param bool   $freeloaded\n * @param string $freeload_comment\n * @param bool   $user_admin_shifts\n * @return string\n */\nfunction ShiftEntry_edit_view(\n    $angel,\n    $date,\n    $location,\n    $title,\n    $type,\n    $comment,\n    $freeloaded,\n    $freeload_comment,\n    $user_admin_shifts = false\n) {\n    $freeload_form = [];\n    if ($user_admin_shifts) {\n        $freeload_form = [\n            form_checkbox('freeloaded', __('Freeloaded'), $freeloaded),\n            form_textarea(\n                'freeload_comment',\n                __('Freeload comment (Only for shift coordination):'),\n                $freeload_comment\n            )\n        ];\n    }\n    return page_with_title(__('Edit shift entry'), [\n        msg(),\n        form([\n            form_info(__('Angel:'), $angel),\n            form_info(__('Date, Duration:'), $date),\n            form_info(__('Location:'), $location),\n            form_info(__('Title:'), $title),\n            form_info(__('Type:'), $type),\n            form_textarea('comment', __('Comment (for your eyes only):'), $comment),\n            join('', $freeload_form),\n            form_submit('submit', __('Save'))\n        ])\n    ]);\n}\n", "<?php\n\n/**\n * @param array $shifttype\n * @return string\n */\nfunction ShiftType_name_render($shifttype)\n{\n    global $privileges;\n    if (in_array('shifttypes', $privileges)) {\n        return '<a href=\"' . shifttype_link($shifttype) . '\">' . $shifttype['name'] . '</a>';\n    }\n    return $shifttype['name'];\n}\n\n/**\n * @param array $shifttype\n * @return string\n */\nfunction ShiftType_delete_view($shifttype)\n{\n    return page_with_title(sprintf(__('Delete shifttype %s'), $shifttype['name']), [\n        info(sprintf(__('Do you want to delete shifttype %s?'), $shifttype['name']), true),\n        form([\n            buttons([\n                button(page_link_to('shifttypes'), glyph('remove') . __('cancel')),\n                form_submit(\n                    'delete',\n                    glyph('ok') . __('delete'),\n                    'btn-danger',\n                    false\n                ),\n            ]),\n        ]),\n    ]);\n}\n\n/**\n * @param string   $name\n * @param int      $angeltype_id\n * @param array[]  $angeltypes\n * @param string   $description\n * @param int|bool $shifttype_id\n * @return string\n */\nfunction ShiftType_edit_view($name, $angeltype_id, $angeltypes, $description, $shifttype_id)\n{\n    $angeltypes_select = [\n        '' => __('All')\n    ];\n    foreach ($angeltypes as $angeltype) {\n        $angeltypes_select[$angeltype['id']] = $angeltype['name'];\n    }\n\n    return page_with_title($shifttype_id ? __('Edit shifttype') : __('Create shifttype'), [\n        msg(),\n        buttons([\n            button(page_link_to('shifttypes'), shifttypes_title(), 'back')\n        ]),\n        form([\n            form_text('name', __('Name'), $name),\n            form_select('angeltype_id', __('Angeltype'), $angeltypes_select, $angeltype_id),\n            form_textarea('description', __('Description'), $description),\n            form_info('', __('Please use markdown for the description.')),\n            form_submit('submit', __('Save'))\n        ])\n    ]);\n}\n\n/**\n * @param array $shifttype\n * @param array $angeltype\n * @return string\n */\nfunction ShiftType_view($shifttype, $angeltype)\n{\n    $parsedown = new Parsedown();\n    $title = $shifttype['name'];\n    if ($angeltype) {\n        $title .= ' <small>' . sprintf(__('for team %s'), $angeltype['name']) . '</small>';\n    }\n    return page_with_title($title, [\n        msg(),\n        buttons([\n            button(page_link_to('shifttypes'), shifttypes_title(), 'back'),\n            $angeltype ? button(\n                page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]),\n                $angeltype['name']\n            ) : '',\n            button(\n                page_link_to('shifttypes', ['action' => 'edit', 'shifttype_id' => $shifttype['id']]),\n                __('edit'),\n                'edit'\n            ),\n            button(\n                page_link_to('shifttypes', ['action' => 'delete', 'shifttype_id' => $shifttype['id']]),\n                __('delete'),\n                'delete'\n            )\n        ]),\n        heading(__('Description'), 2),\n        $parsedown->parse($shifttype['description'])\n    ]);\n}\n\n/**\n * @param array[] $shifttypes\n * @return string\n */\nfunction ShiftTypes_list_view($shifttypes)\n{\n    foreach ($shifttypes as &$shifttype) {\n        $shifttype['name'] = '<a href=\"'\n            . page_link_to('shifttypes', ['action' => 'view', 'shifttype_id' => $shifttype['id']])\n            . '\">'\n            . $shifttype['name']\n            . '</a>';\n        $shifttype['actions'] = table_buttons([\n            button(\n                page_link_to(\n                    'shifttypes',\n                    ['action' => 'edit', 'shifttype_id' => $shifttype['id']]\n                ),\n                __('edit'),\n                'btn-xs'\n            ),\n            button(\n                page_link_to('shifttypes', ['action' => 'delete', 'shifttype_id' => $shifttype['id']]),\n                __('delete'),\n                'btn-xs'\n            )\n        ]);\n    }\n\n    return page_with_title(shifttypes_title(), [\n        msg(),\n        buttons([\n            button(page_link_to('shifttypes', ['action' => 'edit']), __('New shifttype'), 'add')\n        ]),\n        table([\n            'name'    => __('Name'),\n            'actions' => ''\n        ], $shifttypes)\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * @param array $user_angeltype\n * @param User  $user\n * @param array $angeltype\n * @param bool  $supporter\n * @return string\n */\nfunction UserAngelType_update_view($user_angeltype, $user, $angeltype, $supporter)\n{\n    return page_with_title($supporter ? __('Add supporter rights') : __('Remove supporter rights'), [\n        msg(),\n        info(sprintf(\n            $supporter\n                ? __('Do you really want to add supporter rights for %s to %s?')\n                : __('Do you really want to remove supporter rights for %s from %s?'),\n            $angeltype['name'],\n            User_Nick_render($user)\n        ), true),\n        form([\n            buttons([\n                button(\n                    page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]),\n                    glyph('remove') . __('cancel')\n                ),\n                form_submit('submit', glyph('ok') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', [\n            'action'            => 'update',\n            'user_angeltype_id' => $user_angeltype['id'],\n            'supporter'         => ($supporter ? '1' : '0'),\n        ])),\n    ]);\n}\n\n/**\n * @param array $angeltype\n * @return string\n */\nfunction UserAngelTypes_delete_all_view($angeltype)\n{\n    return page_with_title(__('Deny all users'), [\n        msg(),\n        info(sprintf(__('Do you really want to deny all users for %s?'), $angeltype['name']), true),\n        form([\n            buttons([\n                button(\n                    page_link_to(\n                        'angeltypes',\n                        ['action' => 'view', 'angeltype_id' => $angeltype['id']]\n                    ),\n                    glyph('remove') . __('cancel')\n                ),\n                form_submit('deny_all', glyph('ok') . __('yes'), 'btn-primary', false)\n            ]),\n        ], page_link_to('user_angeltypes', ['action' => 'delete_all', 'angeltype_id' => $angeltype['id']])),\n    ]);\n}\n\n/**\n * @param array $angeltype\n * @return string\n */\nfunction UserAngelTypes_confirm_all_view($angeltype)\n{\n    return page_with_title(__('Confirm all users'), [\n        msg(),\n        info(sprintf(__('Do you really want to confirm all users for %s?'), $angeltype['name']), true),\n        form([\n            buttons([\n                button(angeltype_link($angeltype['id']), glyph('remove') . __('cancel')),\n                form_submit('confirm_all', glyph('ok') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', ['action' => 'confirm_all', 'angeltype_id' => $angeltype['id']])),\n    ]);\n}\n\n/**\n * @param array $user_angeltype\n * @param User  $user\n * @param array $angeltype\n * @return string\n */\nfunction UserAngelType_confirm_view($user_angeltype, $user, $angeltype)\n{\n    return page_with_title(__('Confirm angeltype for user'), [\n        msg(),\n        info(sprintf(\n            __('Do you really want to confirm %s for %s?'),\n            User_Nick_render($user),\n            $angeltype['name']\n        ), true),\n        form([\n            buttons([\n                button(angeltype_link($angeltype['id']), glyph('remove') . __('cancel')),\n                form_submit('confirm_user', glyph('ok') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', ['action' => 'confirm', 'user_angeltype_id' => $user_angeltype['id']])),\n    ]);\n}\n\n/**\n * @param array $user_angeltype\n * @param User  $user\n * @param array $angeltype\n * @return string\n */\nfunction UserAngelType_delete_view($user_angeltype, $user, $angeltype)\n{\n    return page_with_title(__('Remove angeltype'), [\n        msg(),\n        info(sprintf(\n            __('Do you really want to delete %s from %s?'),\n            User_Nick_render($user),\n            $angeltype['name']\n        ), true),\n        form([\n            buttons([\n                button(angeltype_link($angeltype['id']), glyph('remove') . __('cancel')),\n                form_submit('delete', glyph('ok') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', ['action' => 'delete', 'user_angeltype_id' => $user_angeltype['id']])),\n    ]);\n}\n\n/**\n * @param array  $angeltype\n * @param User[] $users_source\n * @param int    $user_id\n * @return string\n */\nfunction UserAngelType_add_view($angeltype, $users_source, $user_id)\n{\n    $users = [];\n    foreach ($users_source as $user_source) {\n        $users[$user_source->id] = User_Nick_render($user_source);\n    }\n\n    return page_with_title(__('Add user to angeltype'), [\n        msg(),\n        buttons([\n            button(\n                page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype['id']]),\n                __('back'),\n                'back'\n            )\n        ]),\n        form([\n            form_info(__('Angeltype'), $angeltype['name']),\n            form_select('user_id', __('User'), $users, $user_id),\n            form_submit('submit', __('Add'))\n        ])\n    ]);\n}\n\n/**\n * @param User  $user\n * @param array $angeltype\n * @return string\n */\nfunction UserAngelType_join_view($user, $angeltype)\n{\n    return page_with_title(sprintf(__('Become a %s'), $angeltype['name']), [\n        msg(),\n        info(sprintf(\n            __('Do you really want to add %s to %s?'),\n            User_Nick_render($user),\n            $angeltype['name']\n        ), true),\n        form([\n            buttons([\n                button(angeltype_link($angeltype['id']), glyph('remove') . __('cancel')),\n                form_submit('submit', glyph('ok') . __('save'), 'btn-primary', false)\n            ]),\n        ], page_link_to(\n            'user_angeltypes',\n            ['action' => 'add', 'angeltype_id' => $angeltype['id'], 'user_id' => $user->id]\n        )),\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * Delete work log entry.\n *\n * @param User $user_source\n * @return string\n */\nfunction UserWorkLog_delete_view($user_source)\n{\n    return page_with_title(UserWorkLog_delete_title(), [\n        info(sprintf(\n            __('Do you want to delete the worklog entry for %s?'),\n            User_Nick_render($user_source)\n        ), true),\n        form([\n            buttons([\n                button(user_link($user_source->id), glyph('remove') . __('cancel')),\n                form_submit('submit', glyph('ok') . __('delete'), 'btn-danger', false),\n            ]),\n        ]),\n    ]);\n}\n\n/**\n * Title for work log delete.\n */\nfunction UserWorkLog_delete_title()\n{\n    return __('Delete work log entry');\n}\n\n/**\n * Render edit table.\n *\n * @param User  $user_source\n * @param array $userWorkLog\n * @return string\n */\nfunction UserWorkLog_edit_form($user_source, $userWorkLog)\n{\n    return form([\n        form_info(__('User'), User_Nick_render($user_source)),\n        form_date('work_timestamp', __('Work date'), $userWorkLog['work_timestamp'], null, time()),\n        form_text('work_hours', __('Work hours'), $userWorkLog['work_hours']),\n        form_text('comment', __('Comment'), $userWorkLog['comment']),\n        form_submit('submit', __('Save'))\n    ]);\n}\n\n/**\n * Form for edit a user work log entry.\n *\n * @param User  $user_source\n * @param array $userWorkLog\n * @return string\n */\nfunction UserWorkLog_edit_view($user_source, $userWorkLog)\n{\n    return page_with_title(UserWorkLog_edit_title(), [\n        buttons([\n            button(user_link($user_source->id), __('back'))\n        ]),\n        msg(),\n        UserWorkLog_edit_form($user_source, $userWorkLog)\n    ]);\n}\n\n/**\n * Form for adding a user work log entry.\n *\n * @param User  $user_source\n * @param array $userWorkLog\n * @return string\n */\nfunction UserWorkLog_add_view($user_source, $userWorkLog)\n{\n    return page_with_title(UserWorkLog_add_title(), [\n        buttons([\n            button(user_link($user_source->id), __('back'))\n        ]),\n        msg(),\n        UserWorkLog_edit_form($user_source, $userWorkLog)\n    ]);\n}\n\n/**\n * Title text for editing work log entry.\n */\nfunction UserWorkLog_edit_title()\n{\n    return __('Edit work log entry');\n}\n\n/**\n * Title text for adding work log entry.\n */\nfunction UserWorkLog_add_title()\n{\n    return __('Add work log entry');\n}\n", "<?php\n\nnamespace Engelsystem\\Http;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Message\\UploadedFileInterface;\nuse Psr\\Http\\Message\\UriInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile as SymfonyFile;\nuse Symfony\\Component\\HttpFoundation\\Request as SymfonyRequest;\nuse Zend\\Diactoros\\UploadedFile;\nuse Zend\\Diactoros\\Uri;\n\nclass Request extends SymfonyRequest implements ServerRequestInterface\n{\n    use MessageTrait;\n\n    /**\n     * Get POST input\n     *\n     * @param string $key\n     * @param mixed  $default\n     * @return mixed\n     */\n    public function postData($key, $default = null)\n    {\n        return $this->request->get($key, $default);\n    }\n\n    /**\n     * Get input data\n     *\n     * @param string $key\n     * @param mixed  $default\n     * @return mixed\n     */\n    public function input($key, $default = null)\n    {\n        return $this->get($key, $default);\n    }\n\n    /**\n     * Checks if the input exists\n     *\n     * @param string $key\n     * @return bool\n     */\n    public function has($key)\n    {\n        $value = $this->input($key);\n\n        return !is_null($value);\n    }\n\n    /**\n     * Checks if the POST data exists\n     *\n     * @param string $key\n     * @return bool\n     */\n    public function hasPostData($key)\n    {\n        $value = $this->postData($key);\n\n        return !is_null($value);\n    }\n\n    /**\n     * Get the requested path\n     *\n     * @return string\n     */\n    public function path()\n    {\n        $pattern = trim($this->getPathInfo(), '/');\n\n        return $pattern == '' ? '/' : $pattern;\n    }\n\n    /**\n     * Return the current URL\n     *\n     * @return string\n     */\n    public function url()\n    {\n        return rtrim(preg_replace('/\\?.*/', '', $this->getUri()), '/');\n    }\n\n    /**\n     * Retrieves the message's request target.\n     *\n     *\n     * Retrieves the message's request-target either as it will appear (for\n     * clients), as it appeared at request (for servers), or as it was\n     * specified for the instance (see withRequestTarget()).\n     *\n     * In most cases, this will be the origin-form of the composed URI,\n     * unless a value was provided to the concrete implementation (see\n     * withRequestTarget() below).\n     *\n     * If no URI is available, and no request-target has been specifically\n     * provided, this method MUST return the string \"/\".\n     *\n     * @return string\n     */\n    public function getRequestTarget()\n    {\n        $query = $this->getQueryString();\n        return '/' . $this->path() . (!empty($query) ? '?' . $query : '');\n    }\n\n    /**\n     * Return an instance with the specific request-target.\n     *\n     * If the request needs a non-origin-form request-target \u2014 e.g., for\n     * specifying an absolute-form, authority-form, or asterisk-form \u2014\n     * this method may be used to create an instance with the specified\n     * request-target, verbatim.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * changed request target.\n     *\n     * @link http://tools.ietf.org/html/rfc7230#section-5.3 (for the various\n     *     request-target forms allowed in request messages)\n     * @param mixed $requestTarget\n     * @return static\n     */\n    public function withRequestTarget($requestTarget)\n    {\n        return $this->create($requestTarget);\n    }\n\n    /**\n     * Return an instance with the provided HTTP method.\n     *\n     * While HTTP method names are typically all uppercase characters, HTTP\n     * method names are case-sensitive and thus implementations SHOULD NOT\n     * modify the given string.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * changed request method.\n     *\n     * @param string $method Case-sensitive method.\n     * @return static\n     * @throws \\InvalidArgumentException for invalid HTTP methods.\n     */\n    public function withMethod($method)\n    {\n        $new = clone $this;\n        $new->setMethod($method);\n\n        return $new;\n    }\n\n    /**\n     * Returns an instance with the provided URI.\n     *\n     * This method MUST update the Host header of the returned request by\n     * default if the URI contains a host component. If the URI does not\n     * contain a host component, any pre-existing Host header MUST be carried\n     * over to the returned request.\n     *\n     * You can opt-in to preserving the original state of the Host header by\n     * setting `$preserveHost` to `true`. When `$preserveHost` is set to\n     * `true`, this method interacts with the Host header in the following ways:\n     *\n     * - If the Host header is missing or empty, and the new URI contains\n     *   a host component, this method MUST update the Host header in the returned\n     *   request.\n     * - If the Host header is missing or empty, and the new URI does not contain a\n     *   host component, this method MUST NOT update the Host header in the returned\n     *   request.\n     * - If a Host header is present and non-empty, this method MUST NOT update\n     *   the Host header in the returned request.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * new UriInterface instance.\n     *\n     * @link http://tools.ietf.org/html/rfc3986#section-4.3\n     * @param UriInterface $uri          New request URI to use.\n     * @param bool         $preserveHost Preserve the original state of the Host header.\n     * @return static\n     */\n    public function withUri(UriInterface $uri, $preserveHost = false)\n    {\n        $new = $this->create($uri);\n        if ($preserveHost) {\n            $new->headers->set('HOST', $this->getHost());\n        }\n\n        return $new;\n    }\n\n    /**\n     * Retrieves the URI instance.\n     *\n     * This method MUST return a UriInterface instance.\n     *\n     * @link http://tools.ietf.org/html/rfc3986#section-4.3\n     * @return string|UriInterface Returns a UriInterface instance\n     *     representing the URI of the request.\n     */\n    public function getUri()\n    {\n        $uri = parent::getUri();\n\n        return new Uri($uri);\n    }\n\n    /**\n     * Retrieve server parameters.\n     *\n     * Retrieves data related to the incoming request environment,\n     * typically derived from PHP's $_SERVER superglobal. The data IS NOT\n     * REQUIRED to originate from $_SERVER.\n     *\n     * @return array\n     */\n    public function getServerParams()\n    {\n        return $this->server->all();\n    }\n\n    /**\n     * Retrieve cookies.\n     *\n     * Retrieves cookies sent by the client to the server.\n     *\n     * The data MUST be compatible with the structure of the $_COOKIE\n     * superglobal.\n     *\n     * @return array\n     */\n    public function getCookieParams()\n    {\n        return $this->cookies->all();\n    }\n\n    /**\n     * Return an instance with the specified cookies.\n     *\n     * The data IS NOT REQUIRED to come from the $_COOKIE superglobal, but MUST\n     * be compatible with the structure of $_COOKIE. Typically, this data will\n     * be injected at instantiation.\n     *\n     * This method MUST NOT update the related Cookie header of the request\n     * instance, nor related values in the server params.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated cookie values.\n     *\n     * @param array $cookies Array of key/value pairs representing cookies.\n     * @return static\n     */\n    public function withCookieParams(array $cookies)\n    {\n        $new = clone $this;\n        $new->cookies = clone $this->cookies;\n        $new->cookies->replace($cookies);\n\n        return $new;\n    }\n\n    /**\n     * Retrieve query string arguments.\n     *\n     * Retrieves the deserialized query string arguments, if any.\n     *\n     * Note: the query params might not be in sync with the URI or server\n     * params. If you need to ensure you are only getting the original\n     * values, you may need to parse the query string from `getUri()->getQuery()`\n     * or from the `QUERY_STRING` server param.\n     *\n     * @return array\n     */\n    public function getQueryParams()\n    {\n        return $this->query->all();\n    }\n\n    /**\n     * Return an instance with the specified query string arguments.\n     *\n     * These values SHOULD remain immutable over the course of the incoming\n     * request. They MAY be injected during instantiation, such as from PHP's\n     * $_GET superglobal, or MAY be derived from some other value such as the\n     * URI. In cases where the arguments are parsed from the URI, the data\n     * MUST be compatible with what PHP's parse_str() would return for\n     * purposes of how duplicate query parameters are handled, and how nested\n     * sets are handled.\n     *\n     * Setting query string arguments MUST NOT change the URI stored by the\n     * request, nor the values in the server params.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated query string arguments.\n     *\n     * @param array $query Array of query string arguments, typically from\n     *                     $_GET.\n     * @return static\n     */\n    public function withQueryParams(array $query)\n    {\n        $new = clone $this;\n        $new->query = clone $this->query;\n        $new->query->replace($query);\n\n        return $new;\n    }\n\n    /**\n     * Retrieve normalized file upload data.\n     *\n     * This method returns upload metadata in a normalized tree, with each leaf\n     * an instance of Psr\\Http\\Message\\UploadedFileInterface.\n     *\n     * These values MAY be prepared from $_FILES or the message body during\n     * instantiation, or MAY be injected via withUploadedFiles().\n     *\n     * @return array An array tree of UploadedFileInterface instances; an empty\n     *     array MUST be returned if no data is present.\n     */\n    public function getUploadedFiles()\n    {\n        $files = [];\n        foreach ($this->files as $file) {\n            /** @var SymfonyFile $file */\n\n            $files[] = new UploadedFile(\n                $file->getPath(),\n                $file->getSize(),\n                $file->getError(),\n                $file->getClientOriginalName(),\n                $file->getClientMimeType()\n            );\n        }\n\n        return $files;\n    }\n\n    /**\n     * Create a new instance with the specified uploaded files.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated body parameters.\n     *\n     * @param array $uploadedFiles An array tree of UploadedFileInterface instances.\n     * @return static\n     * @throws \\InvalidArgumentException if an invalid structure is provided.\n     */\n    public function withUploadedFiles(array $uploadedFiles)\n    {\n        $new = clone $this;\n        $new->files = clone $this->files;\n\n        $files = [];\n        foreach ($uploadedFiles as $file) {\n            /** @var UploadedFileInterface $file */\n            $filename = tempnam(sys_get_temp_dir(), 'upload');\n            $handle = fopen($filename, \"w\");\n            fwrite($handle, $file->getStream()->getContents());\n            fclose($handle);\n\n            $files[] = new SymfonyFile(\n                $filename,\n                $file->getClientFilename(),\n                $file->getClientMediaType(),\n                $file->getSize(),\n                $file->getError()\n            );\n        }\n        $new->files->add($files);\n\n        return $new;\n    }\n\n    /**\n     * Retrieve any parameters provided in the request body.\n     *\n     * If the request Content-Type is either application/x-www-form-urlencoded\n     * or multipart/form-data, and the request method is POST, this method MUST\n     * return the contents of $_POST.\n     *\n     * Otherwise, this method may return any results of deserializing\n     * the request body content; as parsing returns structured content, the\n     * potential types MUST be arrays or objects only. A null value indicates\n     * the absence of body content.\n     *\n     * @return null|array|object The deserialized body parameters, if any.\n     *     These will typically be an array or object.\n     */\n    public function getParsedBody()\n    {\n        return $this->request->all();\n    }\n\n    /**\n     * Return an instance with the specified body parameters.\n     *\n     * These MAY be injected during instantiation.\n     *\n     * If the request Content-Type is either application/x-www-form-urlencoded\n     * or multipart/form-data, and the request method is POST, use this method\n     * ONLY to inject the contents of $_POST.\n     *\n     * The data IS NOT REQUIRED to come from $_POST, but MUST be the results of\n     * deserializing the request body content. Deserialization/parsing returns\n     * structured data, and, as such, this method ONLY accepts arrays or objects,\n     * or a null value if nothing was available to parse.\n     *\n     * As an example, if content negotiation determines that the request data\n     * is a JSON payload, this method could be used to create a request\n     * instance with the deserialized parameters.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated body parameters.\n     *\n     * @param null|array|object $data The deserialized body data. This will\n     *                                typically be in an array or object.\n     * @return static\n     * @throws \\InvalidArgumentException if an unsupported argument type is\n     *                                provided.\n     */\n    public function withParsedBody($data)\n    {\n        $new = clone $this;\n        $new->request = clone $this->request;\n\n        $new->request->replace($data);\n\n        return $new;\n    }\n\n    /**\n     * Retrieve attributes derived from the request.\n     *\n     * The request \"attributes\" may be used to allow injection of any\n     * parameters derived from the request: e.g., the results of path\n     * match operations; the results of decrypting cookies; the results of\n     * deserializing non-form-encoded message bodies; etc. Attributes\n     * will be application and request specific, and CAN be mutable.\n     *\n     * @return array Attributes derived from the request.\n     */\n    public function getAttributes()\n    {\n        return $this->attributes->all();\n    }\n\n    /**\n     * Retrieve a single derived request attribute.\n     *\n     * Retrieves a single derived request attribute as described in\n     * getAttributes(). If the attribute has not been previously set, returns\n     * the default value as provided.\n     *\n     * This method obviates the need for a hasAttribute() method, as it allows\n     * specifying a default value to return if the attribute is not found.\n     *\n     * @see getAttributes()\n     * @param string $name    The attribute name.\n     * @param mixed  $default Default value to return if the attribute does not exist.\n     * @return mixed\n     */\n    public function getAttribute($name, $default = null)\n    {\n        return $this->attributes->get($name, $default);\n    }\n\n    /**\n     * Return an instance with the specified derived request attribute.\n     *\n     * This method allows setting a single derived request attribute as\n     * described in getAttributes().\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated attribute.\n     *\n     * @see getAttributes()\n     * @param string $name  The attribute name.\n     * @param mixed  $value The value of the attribute.\n     * @return static\n     */\n    public function withAttribute($name, $value)\n    {\n        $new = clone $this;\n        $new->attributes = clone $this->attributes;\n\n        $new->attributes->set($name, $value);\n\n        return $new;\n    }\n\n    /**\n     * Return an instance that removes the specified derived request attribute.\n     *\n     * This method allows removing a single derived request attribute as\n     * described in getAttributes().\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that removes\n     * the attribute.\n     *\n     * @see getAttributes()\n     * @param string $name The attribute name.\n     * @return static\n     */\n    public function withoutAttribute($name)\n    {\n        $new = clone $this;\n        $new->attributes = clone $this->attributes;\n\n        $new->attributes->remove($name);\n\n        return $new;\n    }\n}\n", "<?php\n\nnamespace Engelsystem\\Test\\Unit\\Http;\n\nuse Engelsystem\\Http\\Request;\nuse PHPUnit\\Framework\\TestCase;\nuse PHPUnit_Framework_MockObject_MockObject as MockObject;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\UploadedFileInterface;\nuse Psr\\Http\\Message\\UriInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile as SymfonyFile;\nuse Symfony\\Component\\HttpFoundation\\Request as SymfonyRequest;\n\nclass RequestTest extends TestCase\n{\n    /**\n     * @covers \\Engelsystem\\Http\\Request\n     */\n    public function testCreate()\n    {\n        $response = new Request();\n        $this->assertInstanceOf(SymfonyRequest::class, $response);\n        $this->assertInstanceOf(RequestInterface::class, $response);\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::postData\n     */\n    public function testPostData()\n    {\n        $request = new Request(\n            ['foo' => 'I\\'m a test!'],\n            ['foo' => 'bar']\n        );\n\n        $this->assertEquals('bar', $request->postData('foo'));\n        $this->assertEquals('LoremIpsum', $request->postData('test-key', 'LoremIpsum'));\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::input\n     */\n    public function testInput()\n    {\n        $request = new Request(\n            ['foo' => 'I\\'m a test!'],\n            ['foo' => 'bar']\n        );\n\n        $this->assertEquals('I\\'m a test!', $request->input('foo'));\n        $this->assertEquals('LoremIpsum', $request->input('test-key', 'LoremIpsum'));\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::has\n     */\n    public function testHas()\n    {\n        $request = new Request([\n            'foo' => 'I\\'m a test!',\n            'bar' => '',\n        ]);\n\n        $this->assertTrue($request->has('foo'));\n        $this->assertTrue($request->has('bar'));\n        $this->assertFalse($request->has('baz'));\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::hasPostData\n     */\n    public function testHasPostData()\n    {\n        $request = new Request([\n            'foo' => 'bar',\n        ], [\n            'lorem' => 'ipsum',\n        ]);\n\n        $this->assertTrue($request->has('foo'));\n        $this->assertFalse($request->hasPostData('foo'));\n\n        $this->assertTrue($request->has('lorem'));\n        $this->assertTrue($request->hasPostData('lorem'));\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::path\n     */\n    public function testPath()\n    {\n        /** @var MockObject|Request $request */\n        $request = $this\n            ->getMockBuilder(Request::class)\n            ->setMethods(['getPathInfo'])\n            ->getMock();\n\n        $request\n            ->expects($this->atLeastOnce())\n            ->method('getPathInfo')\n            ->willReturnOnConsecutiveCalls(\n                '/foo',\n                '/'\n            );\n\n        $this->assertEquals('foo', $request->path());\n        $this->assertEquals('/', $request->path());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::url\n     */\n    public function testUrl()\n    {\n        /** @var MockObject|Request $request */\n        $request = $this\n            ->getMockBuilder(Request::class)\n            ->setMethods(['getUri'])\n            ->getMock();\n\n        $request\n            ->expects($this->atLeastOnce())\n            ->method('getUri')\n            ->willReturnOnConsecutiveCalls(\n                'http://foo.bar/bla/foo/',\n                'https://lorem.ipsum/dolor/sit?amet=consetetur&sadipscing=elitr'\n            );\n\n        $this->assertEquals('http://foo.bar/bla/foo', $request->url());\n        $this->assertEquals('https://lorem.ipsum/dolor/sit', $request->url());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getRequestTarget\n     */\n    public function testGetRequestTarget()\n    {\n        /** @var Request|MockObject $request */\n        $request = $this\n            ->getMockBuilder(Request::class)\n            ->setMethods(['getQueryString', 'path'])\n            ->getMock();\n\n        $request->expects($this->exactly(2))\n            ->method('getQueryString')\n            ->willReturnOnConsecutiveCalls(null, 'foo=bar&lorem=ipsum');\n        $request->expects($this->exactly(2))\n            ->method('path')\n            ->willReturn('foo/bar');\n\n        $this->assertEquals('/foo/bar', $request->getRequestTarget());\n        $this->assertEquals('/foo/bar?foo=bar&lorem=ipsum', $request->getRequestTarget());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withRequestTarget\n     */\n    public function testWithRequestTarget()\n    {\n        $request = new Request();\n        foreach (\n            [\n                '*',\n                '/foo/bar',\n                'https://lorem.ipsum/test?lor=em'\n            ] as $target\n        ) {\n            $new = $request->withRequestTarget($target);\n            $this->assertNotEquals($request, $new);\n        }\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withMethod\n     */\n    public function testWithMethod()\n    {\n        $request = new Request();\n\n        $new = $request->withMethod('PUT');\n\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals('PUT', $new->getMethod());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withUri\n     */\n    public function testWithUri()\n    {\n        /** @var UriInterface|MockObject $uri */\n        $uri = $this->getMockForAbstractClass(UriInterface::class);\n\n        $uri->expects($this->atLeastOnce())\n            ->method('__toString')\n            ->willReturn('http://foo.bar/bla?foo=bar');\n\n        $request = Request::create('http://lor.em/');\n\n        $new = $request->withUri($uri);\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals('http://foo.bar/bla?foo=bar', (string)$new->getUri());\n\n        $new = $request->withUri($uri, true);\n        $this->assertEquals('http://lor.em/bla?foo=bar', (string)$new->getUri());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getUri\n     */\n    public function testGetUri()\n    {\n        $request = Request::create('http://lor.em/test?bla=foo');\n\n        $uri = $request->getUri();\n        $this->assertInstanceOf(UriInterface::class, $uri);\n        $this->assertEquals('http://lor.em/test?bla=foo', (string)$uri);\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getServerParams\n     */\n    public function testGetServerParams()\n    {\n        $server = ['foo' => 'bar'];\n        $request = new Request([], [], [], [], [], $server);\n\n        $this->assertEquals($server, $request->getServerParams());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getCookieParams\n     */\n    public function testGetCookieParams()\n    {\n        $cookies = ['session' => 'LoremIpsumDolorSit'];\n        $request = new Request([], [], [], $cookies);\n\n        $this->assertEquals($cookies, $request->getCookieParams());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withCookieParams\n     */\n    public function testWithCookieParams()\n    {\n        $cookies = ['lor' => 'em'];\n        $request = new Request();\n\n        $new = $request->withCookieParams($cookies);\n\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals($cookies, $new->getCookieParams());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getQueryParams\n     */\n    public function testGetQueryParams()\n    {\n        $params = ['foo' => 'baz'];\n        $request = new Request($params);\n\n        $this->assertEquals($params, $request->getQueryParams());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withQueryParams\n     */\n    public function testWithQueryParams()\n    {\n        $params = ['test' => 'ing'];\n        $request = new Request();\n\n        $new = $request->withQueryParams($params);\n\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals($params, $new->getQueryParams());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getUploadedFiles\n     */\n    public function testGetUploadedFiles()\n    {\n        $filename = tempnam(sys_get_temp_dir(), 'test');\n        file_put_contents($filename, 'LoremIpsum!');\n        $files = [new SymfonyFile($filename, 'foo.html', 'text/html', 11)];\n        $request = new Request([], [], [], [], $files);\n\n        $uploadedFiles = $request->getUploadedFiles();\n        $this->assertNotEmpty($uploadedFiles);\n\n        /** @var UploadedFileInterface $file */\n        $file = $uploadedFiles[0];\n        $this->assertInstanceOf(UploadedFileInterface::class, $file);\n        $this->assertEquals('foo.html', $file->getClientFilename());\n        $this->assertEquals('text/html', $file->getClientMediaType());\n        $this->assertEquals(11, $file->getSize());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withUploadedFiles\n     */\n    public function testWithUploadedFiles()\n    {\n        $filename = tempnam(sys_get_temp_dir(), 'test');\n        file_put_contents($filename, 'LoremIpsum!');\n        $file = new \\Zend\\Diactoros\\UploadedFile($filename, 11, UPLOAD_ERR_OK, 'test.txt', 'text/plain');\n\n        $request = new Request();\n        $new = $request->withUploadedFiles([$file]);\n        $uploadedFiles = $new->getUploadedFiles();\n        $this->assertNotEquals($request, $new);\n        $this->assertNotEmpty($uploadedFiles);\n\n        /** @var UploadedFileInterface $file */\n        $file = $uploadedFiles[0];\n        $this->assertEquals('test.txt', $file->getClientFilename());\n        $this->assertEquals('text/plain', $file->getClientMediaType());\n        $this->assertEquals(11, $file->getSize());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getParsedBody\n     */\n    public function testGetParsedBody()\n    {\n        $body = ['foo' => 'lorem'];\n        $request = new Request();\n        $request->request->add($body);\n\n        $this->assertEquals($body, $request->getParsedBody());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withParsedBody\n     */\n    public function testWithParsedBody()\n    {\n        $data = ['test' => 'er'];\n        $request = new Request();\n\n        $new = $request->withParsedBody($data);\n\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals($data, $new->getParsedBody());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getAttributes\n     */\n    public function testGetAttributes()\n    {\n        $attributes = ['foo' => 'lorem', 'ipsum' => 'dolor'];\n        $request = new Request([], [], $attributes);\n\n        $this->assertEquals($attributes, $request->getAttributes());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::getAttribute\n     */\n    public function testGetAttribute()\n    {\n        $attributes = ['foo' => 'lorem', 'ipsum' => 'dolor'];\n        $request = new Request([], [], $attributes);\n\n        $this->assertEquals($attributes['ipsum'], $request->getAttribute('ipsum'));\n        $this->assertEquals(null, $request->getAttribute('dolor'));\n        $this->assertEquals(1234, $request->getAttribute('test', 1234));\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withAttribute\n     */\n    public function testWithAttribute()\n    {\n        $request = new Request();\n\n        $new = $request->withAttribute('lorem', 'ipsum');\n\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals('ipsum', $new->getAttribute('lorem'));\n    }\n\n    /**\n     * @covers \\Engelsystem\\Http\\Request::withoutAttribute\n     */\n    public function testWithoutAttribute()\n    {\n        $attributes = ['foo' => 'lorem', 'ipsum' => 'dolor'];\n        $request = new Request([], [], $attributes);\n\n        $new = $request->withoutAttribute('ipsum');\n\n        $this->assertNotEquals($request, $new);\n        $this->assertEquals(['foo' => 'lorem'], $new->getAttributes());\n    }\n}\n"], "filenames": ["includes/controller/angeltypes_controller.php", "includes/controller/event_config_controller.php", "includes/controller/shift_entries_controller.php", "includes/controller/shifts_controller.php", "includes/controller/shifttypes_controller.php", "includes/controller/user_angeltypes_controller.php", "includes/controller/user_driver_licenses_controller.php", "includes/controller/user_worklog_controller.php", "includes/controller/users_controller.php", "includes/pages/admin_active.php", "includes/pages/admin_arrive.php", "includes/pages/admin_groups.php", "includes/pages/admin_import.php", "includes/pages/admin_questions.php", "includes/pages/admin_rooms.php", "includes/pages/admin_shifts.php", "includes/pages/guest_login.php", "includes/pages/user_myshifts.php", "includes/pages/user_news.php", "includes/pages/user_questions.php", "includes/pages/user_settings.php", "includes/sys_form.php", "includes/view/AngelTypes_view.php", "includes/view/Questions_view.php", "includes/view/ShiftEntry_view.php", "includes/view/ShiftTypes_view.php", "includes/view/UserAngelTypes_view.php", "includes/view/UserWorkLog_view.php", "src/Http/Request.php", "tests/Unit/Http/RequestTest.php"], "buggy_code_start_loc": [89, 38, 99, 84, 29, 62, 117, 19, 69, 52, 27, 113, 57, 59, 75, 310, 82, 80, 145, 46, 207, 219, 56, 12, 8, 24, 23, 8, 49, 66], "buggy_code_end_loc": [131, 39, 365, 247, 71, 373, 118, 118, 365, 277, 171, 114, 58, 146, 201, 311, 392, 81, 146, 64, 214, 395, 67, 28, 61, 35, 203, 25, 49, 66], "fixing_code_start_loc": [89, 38, 99, 84, 29, 62, 117, 19, 69, 52, 27, 113, 57, 59, 75, 310, 82, 80, 145, 46, 207, 219, 56, 12, 7, 24, 23, 8, 50, 67], "fixing_code_end_loc": [131, 39, 365, 248, 71, 373, 118, 118, 367, 278, 176, 118, 58, 150, 197, 311, 392, 81, 146, 68, 214, 405, 62, 24, 60, 35, 182, 24, 63, 85], "type": "CWE-352", "message": "Engelsystem before commit hash 2e28336 allows CSRF.", "other": {"cve": {"id": "CVE-2018-19182", "sourceIdentifier": "cve@mitre.org", "published": "2018-12-26T21:29:01.997", "lastModified": "2019-01-14T15:06:15.857", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Engelsystem before commit hash 2e28336 allows CSRF."}, {"lang": "es", "value": "Engelsystem, antes del commit con hash 2e28336, permite Cross-Site Request Forgery (CSRF)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:engelsystem:engelsystem:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.0.0", "matchCriteriaId": "A8C61A9A-5766-43A3-9026-2700B905A6C1"}]}]}], "references": [{"url": "https://github.com/MyIgel/engelsystem/commit/2e28336818183e2c63c8015fb476bc01c822f50a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/engelsystem/engelsystem/issues/494", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MyIgel/engelsystem/commit/2e28336818183e2c63c8015fb476bc01c822f50a"}}