{"buggy_code": ["/*\n * Copyright (c) 2000-2005 Silicon Graphics, Inc.\n * All Rights Reserved.\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it would be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write the Free Software Foundation,\n * Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n#ifndef __XFS_LINUX__\n#define __XFS_LINUX__\n\n#include <linux/types.h>\n#include <linux/uuid.h>\n\n/*\n * Kernel specific type declarations for XFS\n */\n\ntypedef __s64\t\t\txfs_off_t;\t/* <file offset> type */\ntypedef unsigned long long\txfs_ino_t;\t/* <inode> type */\ntypedef __s64\t\t\txfs_daddr_t;\t/* <disk address> type */\ntypedef __u32\t\t\txfs_dev_t;\ntypedef __u32\t\t\txfs_nlink_t;\n\n#include \"xfs_types.h\"\n\n#include \"kmem.h\"\n#include \"mrlock.h\"\n\n#include <linux/semaphore.h>\n#include <linux/mm.h>\n#include <linux/kernel.h>\n#include <linux/blkdev.h>\n#include <linux/slab.h>\n#include <linux/crc32c.h>\n#include <linux/module.h>\n#include <linux/mutex.h>\n#include <linux/file.h>\n#include <linux/swap.h>\n#include <linux/errno.h>\n#include <linux/sched/signal.h>\n#include <linux/bitops.h>\n#include <linux/major.h>\n#include <linux/pagemap.h>\n#include <linux/vfs.h>\n#include <linux/seq_file.h>\n#include <linux/init.h>\n#include <linux/list.h>\n#include <linux/proc_fs.h>\n#include <linux/sort.h>\n#include <linux/cpu.h>\n#include <linux/notifier.h>\n#include <linux/delay.h>\n#include <linux/log2.h>\n#include <linux/spinlock.h>\n#include <linux/random.h>\n#include <linux/ctype.h>\n#include <linux/writeback.h>\n#include <linux/capability.h>\n#include <linux/kthread.h>\n#include <linux/freezer.h>\n#include <linux/list_sort.h>\n#include <linux/ratelimit.h>\n#include <linux/rhashtable.h>\n\n#include <asm/page.h>\n#include <asm/div64.h>\n#include <asm/param.h>\n#include <linux/uaccess.h>\n#include <asm/byteorder.h>\n#include <asm/unaligned.h>\n\n#include \"xfs_fs.h\"\n#include \"xfs_stats.h\"\n#include \"xfs_sysctl.h\"\n#include \"xfs_iops.h\"\n#include \"xfs_aops.h\"\n#include \"xfs_super.h\"\n#include \"xfs_cksum.h\"\n#include \"xfs_buf.h\"\n#include \"xfs_message.h\"\n\n#ifdef __BIG_ENDIAN\n#define XFS_NATIVE_HOST 1\n#else\n#undef XFS_NATIVE_HOST\n#endif\n\n#define irix_sgid_inherit\txfs_params.sgid_inherit.val\n#define irix_symlink_mode\txfs_params.symlink_mode.val\n#define xfs_panic_mask\t\txfs_params.panic_mask.val\n#define xfs_error_level\t\txfs_params.error_level.val\n#define xfs_syncd_centisecs\txfs_params.syncd_timer.val\n#define xfs_stats_clear\t\txfs_params.stats_clear.val\n#define xfs_inherit_sync\txfs_params.inherit_sync.val\n#define xfs_inherit_nodump\txfs_params.inherit_nodump.val\n#define xfs_inherit_noatime\txfs_params.inherit_noatim.val\n#define xfs_inherit_nosymlinks\txfs_params.inherit_nosym.val\n#define xfs_rotorstep\t\txfs_params.rotorstep.val\n#define xfs_inherit_nodefrag\txfs_params.inherit_nodfrg.val\n#define xfs_fstrm_centisecs\txfs_params.fstrm_timer.val\n#define xfs_eofb_secs\t\txfs_params.eofb_timer.val\n#define xfs_cowb_secs\t\txfs_params.cowb_timer.val\n\n#define current_cpu()\t\t(raw_smp_processor_id())\n#define current_pid()\t\t(current->pid)\n#define current_test_flags(f)\t(current->flags & (f))\n#define current_set_flags_nested(sp, f)\t\t\\\n\t\t(*(sp) = current->flags, current->flags |= (f))\n#define current_clear_flags_nested(sp, f)\t\\\n\t\t(*(sp) = current->flags, current->flags &= ~(f))\n#define current_restore_flags_nested(sp, f)\t\\\n\t\t(current->flags = ((current->flags & ~(f)) | (*(sp) & (f))))\n\n#define spinlock_destroy(lock)\n\n#define NBBY\t\t8\t\t/* number of bits per byte */\n\n/*\n * Size of block device i/o is parameterized here.\n * Currently the system supports page-sized i/o.\n */\n#define\tBLKDEV_IOSHIFT\t\tPAGE_SHIFT\n#define\tBLKDEV_IOSIZE\t\t(1<<BLKDEV_IOSHIFT)\n/* number of BB's per block device block */\n#define\tBLKDEV_BB\t\tBTOBB(BLKDEV_IOSIZE)\n\n#define ENOATTR\t\tENODATA\t\t/* Attribute not found */\n#define EWRONGFS\tEINVAL\t\t/* Mount with wrong filesystem type */\n#define EFSCORRUPTED\tEUCLEAN\t\t/* Filesystem is corrupted */\n#define EFSBADCRC\tEBADMSG\t\t/* Bad CRC detected */\n\n#define SYNCHRONIZE()\tbarrier()\n#define __return_address __builtin_return_address(0)\n\n#define XFS_PROJID_DEFAULT\t0\n\n#define MIN(a,b)\t(min(a,b))\n#define MAX(a,b)\t(max(a,b))\n#define howmany(x, y)\t(((x)+((y)-1))/(y))\n\nstatic inline void delay(long ticks)\n{\n\tschedule_timeout_uninterruptible(ticks);\n}\n\n/*\n * XFS wrapper structure for sysfs support. It depends on external data\n * structures and is embedded in various internal data structures to implement\n * the XFS sysfs object heirarchy. Define it here for broad access throughout\n * the codebase.\n */\nstruct xfs_kobj {\n\tstruct kobject\t\tkobject;\n\tstruct completion\tcomplete;\n};\n\nstruct xstats {\n\tstruct xfsstats __percpu\t*xs_stats;\n\tstruct xfs_kobj\t\t\txs_kobj;\n};\n\nextern struct xstats xfsstats;\n\n/* Kernel uid/gid conversion. These are used to convert to/from the on disk\n * uid_t/gid_t types to the kuid_t/kgid_t types that the kernel uses internally.\n * The conversion here is type only, the value will remain the same since we\n * are converting to the init_user_ns. The uid is later mapped to a particular\n * user namespace value when crossing the kernel/user boundary.\n */\nstatic inline uint32_t xfs_kuid_to_uid(kuid_t uid)\n{\n\treturn from_kuid(&init_user_ns, uid);\n}\n\nstatic inline kuid_t xfs_uid_to_kuid(uint32_t uid)\n{\n\treturn make_kuid(&init_user_ns, uid);\n}\n\nstatic inline uint32_t xfs_kgid_to_gid(kgid_t gid)\n{\n\treturn from_kgid(&init_user_ns, gid);\n}\n\nstatic inline kgid_t xfs_gid_to_kgid(uint32_t gid)\n{\n\treturn make_kgid(&init_user_ns, gid);\n}\n\n/*\n * Various platform dependent calls that don't fit anywhere else\n */\n#define xfs_sort(a,n,s,fn)\tsort(a,n,s,fn,NULL)\n#define xfs_stack_trace()\tdump_stack()\n\n/* Side effect free 64 bit mod operation */\nstatic inline __u32 xfs_do_mod(void *a, __u32 b, int n)\n{\n\tswitch (n) {\n\t\tcase 4:\n\t\t\treturn *(__u32 *)a % b;\n\t\tcase 8:\n\t\t\t{\n\t\t\t__u64\tc = *(__u64 *)a;\n\t\t\treturn do_div(c, b);\n\t\t\t}\n\t}\n\n\t/* NOTREACHED */\n\treturn 0;\n}\n\n#define do_mod(a, b)\txfs_do_mod(&(a), (b), sizeof(a))\n\nstatic inline uint64_t roundup_64(uint64_t x, uint32_t y)\n{\n\tx += y - 1;\n\tdo_div(x, y);\n\treturn x * y;\n}\n\nstatic inline uint64_t howmany_64(uint64_t x, uint32_t y)\n{\n\tx += y - 1;\n\tdo_div(x, y);\n\treturn x;\n}\n\n#define ASSERT_ALWAYS(expr)\t\\\n\t(likely(expr) ? (void)0 : assfail(#expr, __FILE__, __LINE__))\n\n#ifdef DEBUG\n#define ASSERT(expr)\t\\\n\t(likely(expr) ? (void)0 : assfail(#expr, __FILE__, __LINE__))\n\n#ifndef STATIC\n# define STATIC noinline\n#endif\n\n#else\t/* !DEBUG */\n\n#ifdef XFS_WARN\n\n#define ASSERT(expr)\t\\\n\t(likely(expr) ? (void)0 : asswarn(#expr, __FILE__, __LINE__))\n\n#ifndef STATIC\n# define STATIC static noinline\n#endif\n\n#else\t/* !DEBUG && !XFS_WARN */\n\n#define ASSERT(expr)\t((void)0)\n\n#ifndef STATIC\n# define STATIC static noinline\n#endif\n\n#endif /* XFS_WARN */\n#endif /* DEBUG */\n\n#ifdef CONFIG_XFS_RT\n#define XFS_IS_REALTIME_INODE(ip) ((ip)->i_d.di_flags & XFS_DIFLAG_REALTIME)\n#else\n#define XFS_IS_REALTIME_INODE(ip) (0)\n#endif\n\n#endif /* __XFS_LINUX__ */\n"], "fixing_code": ["/*\n * Copyright (c) 2000-2005 Silicon Graphics, Inc.\n * All Rights Reserved.\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it would be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write the Free Software Foundation,\n * Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n#ifndef __XFS_LINUX__\n#define __XFS_LINUX__\n\n#include <linux/types.h>\n#include <linux/uuid.h>\n\n/*\n * Kernel specific type declarations for XFS\n */\n\ntypedef __s64\t\t\txfs_off_t;\t/* <file offset> type */\ntypedef unsigned long long\txfs_ino_t;\t/* <inode> type */\ntypedef __s64\t\t\txfs_daddr_t;\t/* <disk address> type */\ntypedef __u32\t\t\txfs_dev_t;\ntypedef __u32\t\t\txfs_nlink_t;\n\n#include \"xfs_types.h\"\n\n#include \"kmem.h\"\n#include \"mrlock.h\"\n\n#include <linux/semaphore.h>\n#include <linux/mm.h>\n#include <linux/kernel.h>\n#include <linux/blkdev.h>\n#include <linux/slab.h>\n#include <linux/crc32c.h>\n#include <linux/module.h>\n#include <linux/mutex.h>\n#include <linux/file.h>\n#include <linux/swap.h>\n#include <linux/errno.h>\n#include <linux/sched/signal.h>\n#include <linux/bitops.h>\n#include <linux/major.h>\n#include <linux/pagemap.h>\n#include <linux/vfs.h>\n#include <linux/seq_file.h>\n#include <linux/init.h>\n#include <linux/list.h>\n#include <linux/proc_fs.h>\n#include <linux/sort.h>\n#include <linux/cpu.h>\n#include <linux/notifier.h>\n#include <linux/delay.h>\n#include <linux/log2.h>\n#include <linux/spinlock.h>\n#include <linux/random.h>\n#include <linux/ctype.h>\n#include <linux/writeback.h>\n#include <linux/capability.h>\n#include <linux/kthread.h>\n#include <linux/freezer.h>\n#include <linux/list_sort.h>\n#include <linux/ratelimit.h>\n#include <linux/rhashtable.h>\n\n#include <asm/page.h>\n#include <asm/div64.h>\n#include <asm/param.h>\n#include <linux/uaccess.h>\n#include <asm/byteorder.h>\n#include <asm/unaligned.h>\n\n#include \"xfs_fs.h\"\n#include \"xfs_stats.h\"\n#include \"xfs_sysctl.h\"\n#include \"xfs_iops.h\"\n#include \"xfs_aops.h\"\n#include \"xfs_super.h\"\n#include \"xfs_cksum.h\"\n#include \"xfs_buf.h\"\n#include \"xfs_message.h\"\n\n#ifdef __BIG_ENDIAN\n#define XFS_NATIVE_HOST 1\n#else\n#undef XFS_NATIVE_HOST\n#endif\n\n#define irix_sgid_inherit\txfs_params.sgid_inherit.val\n#define irix_symlink_mode\txfs_params.symlink_mode.val\n#define xfs_panic_mask\t\txfs_params.panic_mask.val\n#define xfs_error_level\t\txfs_params.error_level.val\n#define xfs_syncd_centisecs\txfs_params.syncd_timer.val\n#define xfs_stats_clear\t\txfs_params.stats_clear.val\n#define xfs_inherit_sync\txfs_params.inherit_sync.val\n#define xfs_inherit_nodump\txfs_params.inherit_nodump.val\n#define xfs_inherit_noatime\txfs_params.inherit_noatim.val\n#define xfs_inherit_nosymlinks\txfs_params.inherit_nosym.val\n#define xfs_rotorstep\t\txfs_params.rotorstep.val\n#define xfs_inherit_nodefrag\txfs_params.inherit_nodfrg.val\n#define xfs_fstrm_centisecs\txfs_params.fstrm_timer.val\n#define xfs_eofb_secs\t\txfs_params.eofb_timer.val\n#define xfs_cowb_secs\t\txfs_params.cowb_timer.val\n\n#define current_cpu()\t\t(raw_smp_processor_id())\n#define current_pid()\t\t(current->pid)\n#define current_test_flags(f)\t(current->flags & (f))\n#define current_set_flags_nested(sp, f)\t\t\\\n\t\t(*(sp) = current->flags, current->flags |= (f))\n#define current_clear_flags_nested(sp, f)\t\\\n\t\t(*(sp) = current->flags, current->flags &= ~(f))\n#define current_restore_flags_nested(sp, f)\t\\\n\t\t(current->flags = ((current->flags & ~(f)) | (*(sp) & (f))))\n\n#define spinlock_destroy(lock)\n\n#define NBBY\t\t8\t\t/* number of bits per byte */\n\n/*\n * Size of block device i/o is parameterized here.\n * Currently the system supports page-sized i/o.\n */\n#define\tBLKDEV_IOSHIFT\t\tPAGE_SHIFT\n#define\tBLKDEV_IOSIZE\t\t(1<<BLKDEV_IOSHIFT)\n/* number of BB's per block device block */\n#define\tBLKDEV_BB\t\tBTOBB(BLKDEV_IOSIZE)\n\n#define ENOATTR\t\tENODATA\t\t/* Attribute not found */\n#define EWRONGFS\tEINVAL\t\t/* Mount with wrong filesystem type */\n#define EFSCORRUPTED\tEUCLEAN\t\t/* Filesystem is corrupted */\n#define EFSBADCRC\tEBADMSG\t\t/* Bad CRC detected */\n\n#define SYNCHRONIZE()\tbarrier()\n#define __return_address __builtin_return_address(0)\n\n#define XFS_PROJID_DEFAULT\t0\n\n#define MIN(a,b)\t(min(a,b))\n#define MAX(a,b)\t(max(a,b))\n#define howmany(x, y)\t(((x)+((y)-1))/(y))\n\nstatic inline void delay(long ticks)\n{\n\tschedule_timeout_uninterruptible(ticks);\n}\n\n/*\n * XFS wrapper structure for sysfs support. It depends on external data\n * structures and is embedded in various internal data structures to implement\n * the XFS sysfs object heirarchy. Define it here for broad access throughout\n * the codebase.\n */\nstruct xfs_kobj {\n\tstruct kobject\t\tkobject;\n\tstruct completion\tcomplete;\n};\n\nstruct xstats {\n\tstruct xfsstats __percpu\t*xs_stats;\n\tstruct xfs_kobj\t\t\txs_kobj;\n};\n\nextern struct xstats xfsstats;\n\n/* Kernel uid/gid conversion. These are used to convert to/from the on disk\n * uid_t/gid_t types to the kuid_t/kgid_t types that the kernel uses internally.\n * The conversion here is type only, the value will remain the same since we\n * are converting to the init_user_ns. The uid is later mapped to a particular\n * user namespace value when crossing the kernel/user boundary.\n */\nstatic inline uint32_t xfs_kuid_to_uid(kuid_t uid)\n{\n\treturn from_kuid(&init_user_ns, uid);\n}\n\nstatic inline kuid_t xfs_uid_to_kuid(uint32_t uid)\n{\n\treturn make_kuid(&init_user_ns, uid);\n}\n\nstatic inline uint32_t xfs_kgid_to_gid(kgid_t gid)\n{\n\treturn from_kgid(&init_user_ns, gid);\n}\n\nstatic inline kgid_t xfs_gid_to_kgid(uint32_t gid)\n{\n\treturn make_kgid(&init_user_ns, gid);\n}\n\n/*\n * Various platform dependent calls that don't fit anywhere else\n */\n#define xfs_sort(a,n,s,fn)\tsort(a,n,s,fn,NULL)\n#define xfs_stack_trace()\tdump_stack()\n\n/* Side effect free 64 bit mod operation */\nstatic inline __u32 xfs_do_mod(void *a, __u32 b, int n)\n{\n\tswitch (n) {\n\t\tcase 4:\n\t\t\treturn *(__u32 *)a % b;\n\t\tcase 8:\n\t\t\t{\n\t\t\t__u64\tc = *(__u64 *)a;\n\t\t\treturn do_div(c, b);\n\t\t\t}\n\t}\n\n\t/* NOTREACHED */\n\treturn 0;\n}\n\n#define do_mod(a, b)\txfs_do_mod(&(a), (b), sizeof(a))\n\nstatic inline uint64_t roundup_64(uint64_t x, uint32_t y)\n{\n\tx += y - 1;\n\tdo_div(x, y);\n\treturn x * y;\n}\n\nstatic inline uint64_t howmany_64(uint64_t x, uint32_t y)\n{\n\tx += y - 1;\n\tdo_div(x, y);\n\treturn x;\n}\n\n#define ASSERT_ALWAYS(expr)\t\\\n\t(likely(expr) ? (void)0 : assfail(#expr, __FILE__, __LINE__))\n\n#ifdef DEBUG\n#define ASSERT(expr)\t\\\n\t(likely(expr) ? (void)0 : assfail(#expr, __FILE__, __LINE__))\n\n#ifndef STATIC\n# define STATIC noinline\n#endif\n\n#else\t/* !DEBUG */\n\n#ifdef XFS_WARN\n\n#define ASSERT(expr)\t\\\n\t(likely(expr) ? (void)0 : asswarn(#expr, __FILE__, __LINE__))\n\n#ifndef STATIC\n# define STATIC static noinline\n#endif\n\n#else\t/* !DEBUG && !XFS_WARN */\n\n#define ASSERT(expr)\t((void)0)\n\n#ifndef STATIC\n# define STATIC static noinline\n#endif\n\n#endif /* XFS_WARN */\n#endif /* DEBUG */\n\n#ifdef CONFIG_XFS_RT\n\n/*\n * make sure we ignore the inode flag if the filesystem doesn't have a\n * configured realtime device.\n */\n#define XFS_IS_REALTIME_INODE(ip)\t\t\t\\\n\t(((ip)->i_d.di_flags & XFS_DIFLAG_REALTIME) &&\t\\\n\t (ip)->i_mount->m_rtdev_targp)\n#else\n#define XFS_IS_REALTIME_INODE(ip) (0)\n#endif\n\n#endif /* __XFS_LINUX__ */\n"], "filenames": ["fs/xfs/xfs_linux.h"], "buggy_code_start_loc": [273], "buggy_code_end_loc": [274], "fixing_code_start_loc": [273], "fixing_code_end_loc": [281], "type": "CWE-476", "message": "The XFS_IS_REALTIME_INODE macro in fs/xfs/xfs_linux.h in the Linux kernel before 4.13.2 does not verify that a filesystem has a realtime device, which allows local users to cause a denial of service (NULL pointer dereference and OOPS) via vectors related to setting an RHINHERIT flag on a directory.", "other": {"cve": {"id": "CVE-2017-14340", "sourceIdentifier": "cve@mitre.org", "published": "2017-09-15T11:29:00.223", "lastModified": "2017-12-07T02:29:13.070", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The XFS_IS_REALTIME_INODE macro in fs/xfs/xfs_linux.h in the Linux kernel before 4.13.2 does not verify that a filesystem has a realtime device, which allows local users to cause a denial of service (NULL pointer dereference and OOPS) via vectors related to setting an RHINHERIT flag on a directory."}, {"lang": "es", "value": "La macro XFS_IS_REALTIME_INODE en fs/xfs/xfs_linux.h en el kernel de Linux en versiones anteriores a la 4.13.2 no verifica que un sistema de archivos tenga un dispositivo realtime, lo que permite que usuarios locales provoquen una denegaci\u00f3n de servicio (desreferencia de puntero NULL y OOPS) mediante vectores relacionados con la configuraci\u00f3n de una marca RHINHERIT en un directorio."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:C", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "COMPLETE", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.13.1", "matchCriteriaId": "82940A2B-88B3-4D0B-B5E6-177D939E1833"}]}]}], "references": [{"url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b31ff3cdf540110da4572e3e29bd172087af65cc", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "http://seclists.org/oss-sec/2017/q3/436", "source": "cve@mitre.org", "tags": ["Mailing List", "Mitigation", "Patch", "Third Party Advisory"]}, {"url": "http://www.debian.org/security/2017/dsa-3981", "source": "cve@mitre.org"}, {"url": "http://www.kernel.org/pub/linux/kernel/v4.x/ChangeLog-4.13.2", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "http://www.securityfocus.com/bid/100851", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://access.redhat.com/errata/RHSA-2017:2918", "source": "cve@mitre.org"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1491344", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/torvalds/linux/commit/b31ff3cdf540110da4572e3e29bd172087af65cc", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/b31ff3cdf540110da4572e3e29bd172087af65cc"}}