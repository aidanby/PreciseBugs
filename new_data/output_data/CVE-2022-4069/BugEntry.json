{"buggy_code": ["<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Device;\nuse App\\Models\\DeviceGroup;\nuse Flasher\\Prime\\FlasherInterface;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Validation\\Rule;\nuse LibreNMS\\Alerting\\QueryBuilderFilter;\nuse LibreNMS\\Alerting\\QueryBuilderFluentParser;\n\nclass DeviceGroupController extends Controller\n{\n    public function __construct()\n    {\n        $this->authorizeResource(DeviceGroup::class, 'device_group');\n    }\n\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function index()\n    {\n        $this->authorize('manage', DeviceGroup::class);\n\n        $ungrouped_devices = Device::orderBy('hostname')->whereNotIn('device_id', function ($query) {\n            $query->select('device_id')->from('device_group_device');\n        })->get();\n\n        return view('device-group.index', [\n            'device_groups' => DeviceGroup::orderBy('name')->withCount('devices')->get(),\n            'ungrouped_devices' => $ungrouped_devices,\n        ]);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function create()\n    {\n        return view('device-group.create', [\n            'device_group' => new DeviceGroup(),\n            'filters' => json_encode(new QueryBuilderFilter('group')),\n        ]);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function store(Request $request, FlasherInterface $flasher)\n    {\n        $this->validate($request, [\n            'name' => 'required|string|unique:device_groups',\n            'type' => 'required|in:dynamic,static',\n            'devices' => 'array|required_if:type,static',\n            'devices.*' => 'integer',\n            'rules' => 'json|required_if:type,dynamic',\n        ]);\n\n        $deviceGroup = DeviceGroup::make($request->only(['name', 'desc', 'type']));\n        $deviceGroup->rules = json_decode($request->rules);\n        $deviceGroup->save();\n\n        if ($request->type == 'static') {\n            $deviceGroup->devices()->sync($request->devices);\n        }\n\n        $flasher->addSuccess(__('Device Group :name created', ['name' => $deviceGroup->name]));\n\n        return redirect()->route('device-groups.index');\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function show(DeviceGroup $deviceGroup)\n    {\n        return redirect(url('/devices/group=' . $deviceGroup->id));\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\View\\View\n     */\n    public function edit(DeviceGroup $deviceGroup)\n    {\n        // convert old rules on edit\n        if (is_null($deviceGroup->rules)) {\n            $query_builder = QueryBuilderFluentParser::fromOld($deviceGroup->pattern);\n            $deviceGroup->rules = $query_builder->toArray();\n        }\n\n        return view('device-group.edit', [\n            'device_group' => $deviceGroup,\n            'filters' => json_encode(new QueryBuilderFilter('group')),\n        ]);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function update(Request $request, DeviceGroup $deviceGroup, FlasherInterface $flasher)\n    {\n        $this->validate($request, [\n            'name' => [\n                'required',\n                'string',\n                Rule::unique('device_groups')->where(function ($query) use ($deviceGroup) {\n                    $query->where('id', '!=', $deviceGroup->id);\n                }),\n            ],\n            'type' => 'required|in:dynamic,static',\n            'devices' => 'array|required_if:type,static',\n            'devices.*' => 'integer',\n            'rules' => 'json|required_if:type,dynamic',\n        ]);\n\n        $deviceGroup->fill($request->only(['name', 'desc', 'type']));\n\n        $devices_updated = false;\n        if ($deviceGroup->type == 'static') {\n            // sync device_ids from input\n            $updated = $deviceGroup->devices()->sync($request->get('devices', []));\n            // check for attached/detached/updated\n            $devices_updated = array_sum(array_map(function ($device_ids) {\n                return count($device_ids);\n            }, $updated)) > 0;\n        } else {\n            $deviceGroup->rules = json_decode($request->rules);\n        }\n\n        if ($deviceGroup->isDirty() || $devices_updated) {\n            try {\n                if ($deviceGroup->save() || $devices_updated) {\n                    $flasher->addSuccess(__('Device Group :name updated', ['name' => $deviceGroup->name]));\n                } else {\n                    $flasher->addError(__('Failed to save'));\n\n                    return redirect()->back()->withInput();\n                }\n            } catch (\\Illuminate\\Database\\QueryException $e) {\n                return redirect()->back()->withInput()->withErrors([\n                    'rules' => __('Rules resulted in invalid query: ') . $e->getMessage(),\n                ]);\n            }\n        } else {\n            $flasher->addInfo(__('No changes made'));\n        }\n\n        return redirect()->route('device-groups.index');\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(DeviceGroup $deviceGroup)\n    {\n        if ($deviceGroup->serviceTemplates()->exists()) {\n            $msg = __('Device Group :name still has Service Templates associated with it. Please remove or update the Service Template accordingly', ['name' => $deviceGroup->name]);\n\n            return response($msg, 200);\n        }\n        $deviceGroup->delete();\n\n        $msg = __('Device Group :name deleted', ['name' => $deviceGroup->name]);\n\n        return response($msg, 200);\n    }\n}\n", "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\PortGroup;\nuse Flasher\\Prime\\FlasherInterface;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Validation\\Rule;\n\nclass PortGroupController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function index()\n    {\n        return view('port-group.index', [\n            'port_groups' => PortGroup::orderBy('name')->withCount('ports')->get(),\n        ]);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function create()\n    {\n        return view('port-group.create', [\n            'port_group' => new PortGroup(),\n        ]);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function store(Request $request, FlasherInterface $flasher)\n    {\n        $this->validate($request, [\n            'name' => 'required|string|unique:port_groups',\n        ]);\n\n        $portGroup = PortGroup::make($request->only(['name', 'desc']));\n        $portGroup->save();\n\n        $flasher->addSuccess(__('Port Group :name created', ['name' => $portGroup->name]));\n\n        return redirect()->route('port-groups.index');\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\PortGroup  $portGroup\n     * @return \\Illuminate\\View\\View\n     */\n    public function edit(PortGroup $portGroup)\n    {\n        return view('port-group.edit', [\n            'port_group' => $portGroup,\n        ]);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\PortGroup  $portGroup\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function update(Request $request, PortGroup $portGroup, FlasherInterface $flasher)\n    {\n        $this->validate($request, [\n            'name' => [\n                'required',\n                'string',\n                'max:255',\n                Rule::unique('port_groups', 'name')->where(function ($query) use ($portGroup) {\n                    $query->where('id', '!=', $portGroup->id);\n                }),\n            ],\n            'desc' => 'string|max:255',\n        ]);\n\n        $portGroup->fill($request->only(['name', 'desc']));\n\n        if ($portGroup->save()) {\n            $flasher->addSuccess(__('Port Group :name updated', ['name' => $portGroup->name]));\n        } else {\n            $flasher->addError(__('Failed to save'));\n\n            return redirect()->back()->withInput();\n        }\n\n        return redirect()->route('port-groups.index');\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\PortGroup  $portGroup\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(PortGroup $portGroup)\n    {\n        $portGroup->delete();\n\n        $msg = __('Port Group :name deleted', ['name' => $portGroup->name]);\n\n        return response($msg, 200);\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Device;\nuse App\\Models\\DeviceGroup;\nuse Flasher\\Prime\\FlasherInterface;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Validation\\Rule;\nuse LibreNMS\\Alerting\\QueryBuilderFilter;\nuse LibreNMS\\Alerting\\QueryBuilderFluentParser;\n\nclass DeviceGroupController extends Controller\n{\n    public function __construct()\n    {\n        $this->authorizeResource(DeviceGroup::class, 'device_group');\n    }\n\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function index()\n    {\n        $this->authorize('manage', DeviceGroup::class);\n\n        $ungrouped_devices = Device::orderBy('hostname')->whereNotIn('device_id', function ($query) {\n            $query->select('device_id')->from('device_group_device');\n        })->get();\n\n        return view('device-group.index', [\n            'device_groups' => DeviceGroup::orderBy('name')->withCount('devices')->get(),\n            'ungrouped_devices' => $ungrouped_devices,\n        ]);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function create()\n    {\n        return view('device-group.create', [\n            'device_group' => new DeviceGroup(),\n            'filters' => json_encode(new QueryBuilderFilter('group')),\n        ]);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function store(Request $request, FlasherInterface $flasher)\n    {\n        $this->validate($request, [\n            'name' => 'required|string|unique:device_groups',\n            'type' => 'required|in:dynamic,static',\n            'devices' => 'array|required_if:type,static',\n            'devices.*' => 'integer',\n            'rules' => 'json|required_if:type,dynamic',\n        ]);\n\n        $deviceGroup = DeviceGroup::make($request->only(['name', 'desc', 'type']));\n        $deviceGroup->rules = json_decode($request->rules);\n        $deviceGroup->save();\n\n        if ($request->type == 'static') {\n            $deviceGroup->devices()->sync($request->devices);\n        }\n\n        $flasher->addSuccess(__('Device Group :name created', ['name' => $deviceGroup->name]));\n\n        return redirect()->route('device-groups.index');\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function show(DeviceGroup $deviceGroup)\n    {\n        return redirect(url('/devices/group=' . $deviceGroup->id));\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\View\\View\n     */\n    public function edit(DeviceGroup $deviceGroup)\n    {\n        // convert old rules on edit\n        if (is_null($deviceGroup->rules)) {\n            $query_builder = QueryBuilderFluentParser::fromOld($deviceGroup->pattern);\n            $deviceGroup->rules = $query_builder->toArray();\n        }\n\n        return view('device-group.edit', [\n            'device_group' => $deviceGroup,\n            'filters' => json_encode(new QueryBuilderFilter('group')),\n        ]);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function update(Request $request, DeviceGroup $deviceGroup, FlasherInterface $flasher)\n    {\n        $this->validate($request, [\n            'name' => [\n                'required',\n                'string',\n                Rule::unique('device_groups')->where(function ($query) use ($deviceGroup) {\n                    $query->where('id', '!=', $deviceGroup->id);\n                }),\n            ],\n            'type' => 'required|in:dynamic,static',\n            'devices' => 'array|required_if:type,static',\n            'devices.*' => 'integer',\n            'rules' => 'json|required_if:type,dynamic',\n        ]);\n\n        $deviceGroup->fill($request->only(['name', 'desc', 'type']));\n\n        $devices_updated = false;\n        if ($deviceGroup->type == 'static') {\n            // sync device_ids from input\n            $updated = $deviceGroup->devices()->sync($request->get('devices', []));\n            // check for attached/detached/updated\n            $devices_updated = array_sum(array_map(function ($device_ids) {\n                return count($device_ids);\n            }, $updated)) > 0;\n        } else {\n            $deviceGroup->rules = json_decode($request->rules);\n        }\n\n        if ($deviceGroup->isDirty() || $devices_updated) {\n            try {\n                if ($deviceGroup->save() || $devices_updated) {\n                    $flasher->addSuccess(__('Device Group :name updated', ['name' => $deviceGroup->name]));\n                } else {\n                    $flasher->addError(__('Failed to save'));\n\n                    return redirect()->back()->withInput();\n                }\n            } catch (\\Illuminate\\Database\\QueryException $e) {\n                return redirect()->back()->withInput()->withErrors([\n                    'rules' => __('Rules resulted in invalid query: ') . $e->getMessage(),\n                ]);\n            }\n        } else {\n            $flasher->addInfo(__('No changes made'));\n        }\n\n        return redirect()->route('device-groups.index');\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(DeviceGroup $deviceGroup)\n    {\n        if ($deviceGroup->serviceTemplates()->exists()) {\n            $msg = __('Device Group :name still has Service Templates associated with it. Please remove or update the Service Template accordingly', ['name' => $deviceGroup->name]);\n\n            return response($msg, 200);\n        }\n        $deviceGroup->delete();\n\n        $msg = __('Device Group :name deleted', ['name' => htmlentities($deviceGroup->name)]);\n\n        return response($msg, 200);\n    }\n}\n", "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\PortGroup;\nuse Flasher\\Prime\\FlasherInterface;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Validation\\Rule;\n\nclass PortGroupController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function index()\n    {\n        return view('port-group.index', [\n            'port_groups' => PortGroup::orderBy('name')->withCount('ports')->get(),\n        ]);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function create()\n    {\n        return view('port-group.create', [\n            'port_group' => new PortGroup(),\n        ]);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function store(Request $request, FlasherInterface $flasher)\n    {\n        $this->validate($request, [\n            'name' => 'required|string|unique:port_groups',\n        ]);\n\n        $portGroup = PortGroup::make($request->only(['name', 'desc']));\n        $portGroup->save();\n\n        $flasher->addSuccess(__('Port Group :name created', ['name' => $portGroup->name]));\n\n        return redirect()->route('port-groups.index');\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\PortGroup  $portGroup\n     * @return \\Illuminate\\View\\View\n     */\n    public function edit(PortGroup $portGroup)\n    {\n        return view('port-group.edit', [\n            'port_group' => $portGroup,\n        ]);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\PortGroup  $portGroup\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function update(Request $request, PortGroup $portGroup, FlasherInterface $flasher)\n    {\n        $this->validate($request, [\n            'name' => [\n                'required',\n                'string',\n                'max:255',\n                Rule::unique('port_groups', 'name')->where(function ($query) use ($portGroup) {\n                    $query->where('id', '!=', $portGroup->id);\n                }),\n            ],\n            'desc' => 'string|max:255',\n        ]);\n\n        $portGroup->fill($request->only(['name', 'desc']));\n\n        if ($portGroup->save()) {\n            $flasher->addSuccess(__('Port Group :name updated', ['name' => $portGroup->name]));\n        } else {\n            $flasher->addError(__('Failed to save'));\n\n            return redirect()->back()->withInput();\n        }\n\n        return redirect()->route('port-groups.index');\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\PortGroup  $portGroup\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(PortGroup $portGroup)\n    {\n        $portGroup->delete();\n\n        $msg = __('Port Group :name deleted', ['name' => htmlentities($portGroup->name)]);\n\n        return response($msg, 200);\n    }\n}\n"], "filenames": ["app/Http/Controllers/DeviceGroupController.php", "app/Http/Controllers/PortGroupController.php"], "buggy_code_start_loc": [185, 113], "buggy_code_end_loc": [186, 114], "fixing_code_start_loc": [185, 113], "fixing_code_end_loc": [186, 114], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in GitHub repository librenms/librenms prior to 22.10.0.", "other": {"cve": {"id": "CVE-2022-4069", "sourceIdentifier": "security@huntr.dev", "published": "2022-11-20T05:15:12.430", "lastModified": "2022-11-21T13:42:35.547", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in GitHub repository librenms/librenms prior to 22.10.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.4, "baseSeverity": "LOW"}, "exploitabilityScore": 1.7, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librenms:librenms:*:*:*:*:*:*:*:*", "versionEndExcluding": "22.10.0", "matchCriteriaId": "99D1C2AF-9BBB-4F7D-9FC3-4A645F7C284D"}]}]}], "references": [{"url": "https://github.com/librenms/librenms/commit/8383376f1355812e09ec0c2af67f6d46891b7ba7", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/a9925d98-dac4-4c3c-835a-d93aeecfb2c5", "source": "security@huntr.dev", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/librenms/librenms/commit/8383376f1355812e09ec0c2af67f6d46891b7ba7"}}