{"buggy_code": [";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this software.\n\n\n(ns toto.core.mail\n  (:use hiccup.core)\n  (:require [clojure.tools.logging :as log]\n            [postal.core :as postal]))\n\n(defn send-email [config message-info]\n  (let [smtp (:smtp config)\n        {to :to subject :subject content :content params :params} message-info\n        html-content (html [:html (if (fn? content)\n                                    (content (merge config (or params {})))\n                                    content)])]\n    (log/info \"Sending mail to \" to \" with subject: \" subject)\n    (cond\n      (not (:enabled smtp))\n      (do\n        (log/warn \"E-mail disabled. Message not sent. Message text: \")\n        (log/warn html-content))\n\n      (or (nil? to) (= (count to) 0))\n      (do\n        (log/warn \"No destination e-mail address. Message not send. Message text: \")\n        (log/warn html-content))\n\n      :else\n      (postal/send-message {:host (:host smtp)\n                            :user (:user smtp)\n                            :pass (:password smtp)\n                            :ssl true}\n                           {:from (:from smtp)\n                            :to to\n                            :subject subject\n                            :body [{:type \"text/html\"\n                                    :content html-content}]}))))\n", ";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this software.\n\n\n(ns toto.core.util\n  (:require [clojure.tools.logging :as log]\n            [clojure.java.jdbc :as jdbc]\n            [hiccup.util :as util]))\n\n(defn add-shutdown-hook [ shutdown-fn ]\n  (.addShutdownHook (Runtime/getRuntime)\n                    (Thread. (fn []\n                               (shutdown-fn)))))\n\n(defmacro get-version []\n  ;; Capture compile-time property definition from Lein\n  (System/getProperty \"toto.version\"))\n\n(defmacro unless [ condition & body ]\n  `(when (not ~condition)\n     ~@body))\n\n(defn string-empty? [ str ]\n  (or (nil? str)\n      (= 0 (count (.trim str)))))\n\n(defn partition-string [ string n ]\n  \"Partition a full string into segments of length n, returning a\n  sequence of strings of at most that length.\"\n  (map (partial apply str) (partition-all n string)))\n\n(defn in?\n  \"true if seq contains elm\"\n  [seq elm]\n  (some #(= elm %) seq))\n\n(defn assoc-if [ map assoc? k v ]\n  (if assoc?\n    (assoc map k v)\n    map))\n\n(defn string-leftmost\n  ( [ string count ellipsis ]\n      (let [length (.length string)\n            leftmost (min count length)]\n        (if (< leftmost length)\n          (str (.substring string 0 leftmost) ellipsis)\n          string)))\n\n  ( [ string count ]\n      (string-leftmost string count \"\")))\n\n(defn parsable-string? [ maybe-string ]\n  \"Returns the parsable text content of the input paramater and false\n  if there is no such content.\"\n  (and\n   (string? maybe-string)\n   (let [ string (.trim maybe-string) ]\n     (and (> (count string) 0)\n          string))))\n\n(defn parsable-integer? [ maybe-string ]\n  \"Returns the parsable integer value of the input parameter and false\n  if there is no such integer value.\"\n  (if-let [ string (parsable-string? maybe-string) ]\n    (try\n      (Integer/parseInt string)\n      (catch Exception ex\n        false))))\n\n(defn uri-path? [ uri ]\n  \"Returns only the path of the URI, if it is a parsable URI and false\n  otherwise.\"\n  (and\n   uri\n   (try\n     (.getPath (java.net.URI. uri))\n     (catch java.net.URISyntaxException ex\n       (log/error \"Invalid URI\" uri)\n       false))))\n\n;;; Date utilities\n\n(defn current-time []\n  (java.util.Date.))\n\n(defn add-days\n  \"Given a date, advance it forward n days, leaving it at the beginning\n  of that day in the JVM default time zone. An hour-of-day can\n  optionally be specified.\"\n  ( [ date days ] (add-days date days 0))\n  ( [ date days hour-of-day]\n   (let [c (java.util.Calendar/getInstance)]\n     (.setTime c date)\n     (.add c java.util.Calendar/DATE days)\n     (.set c java.util.Calendar/HOUR_OF_DAY hour-of-day)\n     (.set c java.util.Calendar/MINUTE 0)\n     (.set c java.util.Calendar/SECOND 0)\n     (.set c java.util.Calendar/MILLISECOND 0)\n     (.getTime c))))\n\n;;; Configuration properties\n\n(defn config-property\n  ( [ name ] (config-property name nil))\n  ( [ name default ]\n      (let [prop-binding (System/getProperty name)]\n        (if (nil? prop-binding)\n          default\n          (if-let [ int (parsable-integer? prop-binding) ]\n            int\n            prop-binding)))))\n\n;;; Exception barrier\n\n(defn exception-barrier\n  ([ fn label ]\n   #(try\n      (fn)\n      (catch Exception ex\n        (log/error ex (str \"Uncaught exception: \" label))))))\n\n;;; Thread Naming\n\n(defn call-with-thread-name [ fn name ]\n  (let [thread (Thread/currentThread)\n        initial-thread-name (.getName thread)]\n    (try\n      (.setName thread name)\n      (fn)\n      (finally\n        (.setName thread initial-thread-name)))))\n\n(defmacro unless [ condition & body ]\n  `(when (not ~condition)\n     ~@body))\n\n(defmacro with-thread-name [ thread-name & body ]\n  `(call-with-thread-name (fn [] ~@body) ~thread-name))\n", ";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this software.\n\n(ns toto.site.user\n  (:use toto.core.util\n        compojure.core\n        hiccup.core\n        toto.view.common\n        toto.view.components\n        toto.view.query\n        toto.view.page)\n  (:require [clojure.tools.logging :as log]\n            [ring.util.response :as ring]\n            [cemerick.friend :as friend]\n            [hiccup.form :as form]\n            [toto.core.mail :as mail]\n            [toto.data.data :as data]\n            [toto.view.auth :as auth]))\n\n(defn user-unauthorized [ request ]\n  (render-page { :title \"Access Denied\"}\n               [:div.page-message\n                [:h1 \"Access Denied\"]]))\n\n(defn user-unverified [ request ]\n  (render-page { :title \"E-Mail Unverified\"}\n               [:div.page-message\n                [:h1 \"E-Mail Unverified\"]\n                [:p\n                 \"Your e-mail address is unverified and your acccount is \"\n                 \"inactive. A verification e-mail can be sent by following \"\n                 [:a {:href (str \"/user/verify/\" (auth/current-user-id))} \" this link\"]\n                 \".\"]]))\n\n(defn user-password-expired [ request ]\n  (render-page { :title \"Password Expired\"}\n               [:div.page-message\n                [:h1 \"Password Expired\"]\n                [:p\n                 \"Your password has expired and needs to be reset. \"\n                 \"This can be done at \"\n                 [:a {:href (str \"/user/password\")} \" this link\"]\n                 \".\"]]))\n\n(defn user-account-locked [ request ]\n  (render-page { :title \"Account Locked\"}\n               [:div.page-message\n                [:h1 \"Account Locked\"]\n                [:p\n                 \"Your account is locked and must be re-verified by e-mail.\"\n                 \"An verification e-mail can be sent by following \"\n                 [:a {:href (str \"/user/unlock/\" (auth/current-user-id))} \" this link\"]\n                 \".\"]]))\n\n(defn unauthorized-handler [request]\n  (let [roles (auth/current-roles)]\n    {:status 403\n     :body ((cond\n              (:toto.role/unverified roles)\n              user-unverified\n\n              (:toto.role/expired-password roles)\n              user-password-expired\n\n              (:toto.role/locked-account roles)\n              user-account-locked\n\n              :else\n              user-unauthorized)\n            request)}))\n\n(defn- user-create-notification-message [ params ]\n  [:body\n   [:h1\n    \"New User Created\"]\n   [:p\n    \"New user e-mail: \" (:email-addr params) \".\"]])\n\n(defn- send-user-create-notification [ config email-addr ]\n  (mail/send-email\n   config\n   {:to (:admin-mails config)\n    :subject \"Todo - New User Account Created\"\n    :content user-create-notification-message\n    :params { :email-addr email-addr }}))\n\n(defn create-user [ config email-addr password ]\n  (let [user-id (auth/create-user email-addr password)\n        list-id (data/add-list \"Todo\" false)]\n    (data/set-list-ownership list-id #{ user-id })\n    (send-user-create-notification config email-addr)\n    user-id))\n\n(defn wrap-authenticate [ app config ]\n  (auth/wrap-authenticate app config unauthorized-handler))\n\n(defn render-forgot-password-form []\n  (render-page { :title \"Forgot Password\" }\n   (form/form-to\n    {:class \"auth-form\"\n     :data-turbo \"false\"}\n    [:post \"/user/password-reset\"]\n    [:p\n     \"Please enter your e-mail address. If an account is associated with that \"\n     \"address, an e-mail will be sent with a link to reset the password.\"]\n    [:div.config-panel.toplevel\n     (form/text-field {:placeholder \"E-Mail Address\"} \"email-addr\")]\n    [:div.submit-panel\n     (form/submit-button {} \"Send Reset E-Mail\")]))  )\n\n(defn render-login-page [ & { :keys [ email-addr login-failure?]}]\n  (render-page { :title \"Log In\" }\n   (form/form-to\n    {:class \"auth-form\"\n     :data-turbo \"false\"}\n    [:post \"/login\"]\n    [:div.config-panel.toplevel\n     (form/text-field {:placeholder \"E-Mail Address\"} \"username\" email-addr)\n     (form/password-field {:placeholder \"Password\"} \"password\")\n     [:div.error-message\n      (when login-failure?\n        \"Invalid username or password.\")]]\n    [:div.submit-panel\n     [:a { :href \"/user\"} \"Register New User\"]\n     \" - \"\n     [:a { :href \"/user/forgot-password\"} \"Forgot Password\"]\n     \" - \"\n    (form/submit-button {} \"Login\")])))\n\n(defn render-new-user-form [ & { :keys [ error-message ]}]\n    (render-page\n     {:title \"New User Registration\"\n      :page-data-class \"init-new-user\"}\n     (form/form-to\n      {:class \"auth-form\"\n       :data-turbo \"false\"}\n      [:post \"/user\"]\n      [:div.config-panel\n       [:h1 \"Identity\"]\n       (form/text-field {:placeholder \"E-Mail Address\"} \"email-addr\")\n       (form/text-field {:placeholder \"Verify E-Mail Address\"} \"email-addr-2\")]\n      [:div.config-panel\n       [:h1 \"Password\"]\n       (form/password-field {:placeholder \"Password\"} \"password\")\n       (form/password-field {:placeholder \"Verify Password\"} \"password-2\")]\n      (render-verify-question)\n      [:div.submit-panel\n       [:div#error.error-message\n        error-message]\n       (form/submit-button {} \"Register\")])))\n\n(defn get-verification-link-by-user-id [ config link-type user-id ]\n  (let [verification-link (data/get-verification-link-by-user-id user-id)]\n    (str (:base-url config) \"user/\" link-type \"/\" user-id \"/\"\n         (:link_uuid verification-link))))\n\n\n(defn- verification-link-email-message [ params ]\n  [:body\n   [:h1\n    \"Verification E-mail\"]\n   [:p\n    \"Thank you for registering with \" [:a {:href (:base-url (:config params))} \"Toto\"]\n    \", the family to-do list manager. You can verify your e-mail address by clicking\"\n    [:a {:href (:verify-link-url params)} \" here\"] \".\"]\n   [:p\n    \"If this isn't something you've requested, you can safely ignore this\"\n    \" e-mail, and we won't send anything else.\"]])\n\n(defn- send-verification-link [ config user-id ]\n  (let [user (data/get-user-by-id user-id)\n        link-url (get-verification-link-by-user-id config \"verify\" user-id)]\n    (mail/send-email config\n                     {:to [ (:email_addr user) ]\n                      :subject \"Todo - Verify Account\"\n                      :content verification-link-email-message\n                      :params { :verify-link-url link-url }})))\n\n(defn- unlock-link-email-message [ params ]\n  [:body\n   [:h1\n    \"Unlock Password\"]\n   [:p\n    \"Click \" [:a {:href (:verify-link-url params)} \"here\"] \" to unlock your \"\n    \"account at \" [:a {:href (:base-url (:config params))} \"Toto\"] \", the family \"\n    \"to-do list manager.\"]])\n\n(defn- send-unlock-link [ config user-id ]\n  (let [user (data/get-user-by-id user-id)\n        link-url (get-verification-link-by-user-id config \"unlock\" user-id)]\n    (mail/send-email config\n                     {:to [ (:email_addr user) ]\n                      :subject \"Todo - Unlock Account\"\n                      :content unlock-link-email-message\n                      :params { :verify-link-url link-url }})))\n\n(defn- reset-link-email-message [ params ]\n  [:body\n   [:h1\n    \"Reset Password\"]\n   [:p\n    \"Click \" [:a {:href (:verify-link-url params)} \"here\"]\n    \" to reset your password at \" [:a {:href (:base-url (:config params))} \"Toto\"]\n    \", the family to-do list manager.\"]])\n\n(defn- send-reset-link [ config user-id ]\n  (let [user (data/get-user-by-id user-id)\n        link-url (get-verification-link-by-user-id config \"reset\" user-id)]\n    (mail/send-email config\n                     {:to [ (:email_addr user) ]\n                      :subject \"Todo - Reset Account Password\"\n                      :content reset-link-email-message\n                      :params { :verify-link-url link-url }})))\n\n(defn add-user [ config params ]\n  (let [{:keys [:email-addr :email-addr-2 :password :password-2]} params]\n    (cond\n      (not (verify-response-correct params))\n      (render-new-user-form :error-message \"Math problem answer incorrect.\")\n\n      (not (= email-addr email-addr-2))\n      (render-new-user-form :error-message \"E-mail addresses do not match.\")\n\n      (not (= password password-2))\n      (render-new-user-form :error-message \"Passwords do not match.\")\n\n      (data/user-email-exists? email-addr)\n      (render-new-user-form :error-message \"User with this e-mail address already exists.\")\n\n      :else\n      (do\n        (let [user-id (create-user config email-addr password)]\n          (ring/redirect (str \"/user/verify/\" user-id)))))))\n\n(def date-format (java.text.SimpleDateFormat. \"yyyy-MM-dd hh:mm aa\"))\n\n(defn render-user-info-form [ & { :keys [ error-message ]}]\n  (let [user (data/get-user-by-email (auth/current-identity))]\n    (render-page { :title \"User Information\" }\n                 (form/form-to\n                  [:post \"/user/info\"]\n                  [:input {:type \"hidden\"\n                           :name \"username\"\n                           :value (auth/current-identity)}]\n                  [:div.config-panel\n                   [:h1 \"E-Mail Address\"]\n                   (auth/current-identity)]\n\n                  [:div.config-panel\n                   [:h1 \"Name\"]\n                   [:div\n                    [:input {:name \"name\"\n                             :type \"text\"\n                             :value (:friendly_name user)}]\n                    (form/submit-button {} \"Update\")]\n                   (when error-message\n                     [:div.error-message error-message])]\n\n                  [:div.config-panel\n                   [:h1 \"Last Login\"]\n                   (.format date-format (or (:last_login_on user) (current-time)))]\n\n                  [:div.config-panel\n                    [:a {:href \"/user/password\"} \"Change Password\"]]))))\n\n(defn validate-name [ name ]\n  (if name\n    (let [ name (.trim name )]\n      (and (> (.length name) 0)\n           (< (.length name) 32)\n           name))))\n\n(defn update-user-info [ name ]\n  (if-let [name (validate-name name)]\n    (do\n      (data/set-user-name (auth/current-identity) name)\n      (ring/redirect \"/user/info\"))\n    (render-user-info-form :error-message \"Invalid Name\")))\n\n(defn render-change-password-form  [ & { :keys [ error-message ]}]\n  (let [user (data/get-user-by-email (auth/current-identity))]\n    (render-page { :title \"Change Password\" }\n                 (form/form-to {:class \"auth-form\"\n                                :data-turbo \"false\"}\n                               [:post \"/user/password\"]\n                               [:input {:type \"hidden\"\n                                        :name \"username\"\n                                        :value (auth/current-identity)}]\n                               [:div.config-panel\n                                [:h1 \"E-Mail Address\"]\n                                (auth/current-identity)]\n                               [:div.config-panel\n                                [:h1 \"Name\"]\n                                (:friendly_name user)]\n                               [:div.config-panel\n                                [:h1 \"Last Login\"]\n                                (.format date-format (or (:last_login_on user) (current-time)))]\n                               [:div.config-panel\n                                [:h1 \"Change Password\"]\n                                (form/password-field {:placeholder \"Password\"} \"password\")\n                                (form/password-field {:placeholder \"New Password\"} \"new-password\")\n                                (form/password-field {:placeholder \"Verify Password\"} \"new-password-2\")\n                                (when error-message\n                                  [:div.error-message error-message])\n                                [:div\n                                 (form/submit-button {} \"Change Password\")]]))))\n\n(defn- change-password [ {:keys [password new-password new-password-2]} ]\n\n  (let [ username (auth/current-identity) ]\n    (cond\n      (not (auth/get-user-by-credentials {:username username :password password}))\n      (render-change-password-form\n       :error-message \"Old password incorrect.\")\n\n      (= password new-password-2)\n      (render-change-password-form\n       :error-message \"New password cannot be the same as the old.\")\n\n      (not (= new-password new-password-2))\n      (render-change-password-form\n       :error-message \"Passwords do not match.\")\n\n      :else\n      (do\n        ;; The password change handling is done in a Friend workflow\n        ;; handler (password-change-handler), so that it can\n        ;; reauthenticate the user against the new password and assign\n        ;; the user the correct roles for an account with a valid\n        ;; password. (This is needed so that we allow the user use the\n        ;; website, if their password had expired.)\n        (log/warn \"Password change unexpectedly fell through workflow!\")\n        (ring/redirect \"/\")))))\n\n(defn render-password-change-success []\n    (render-page { :title \"Password Successfully Changed\" }\n                 [:div.page-message\n                  [:h1 \"Password Successfully Changed\"]\n                  [:p \"Your password has been changed. You can view \"\n                   \"your lists\" [:a {:href \"/\"} \" here\"] \".\"]])  )\n\n(defn- get-link-verified-user [ link-user-id link-uuid ]\n  (when-let [ user-id (:verifies_user_id (data/get-verification-link-by-uuid link-uuid)) ]\n    (when (= link-user-id user-id)\n      (data/get-user-by-id user-id))))\n\n(defn render-password-reset-form [ link-user-id link-uuid error-message ]\n  (when-let [ user (get-link-verified-user link-user-id link-uuid)]\n    (render-page { :title \"Reset Password\" }\n                 [:div.page-message\n                  (form/form-to {:class \"auth-form\"\n                                 :data-turbo \"false\"}\n                                [:post (str \"/user/password-reset/\" (:user_id user))]\n                                [:div.config-panel\n                                 [:h1 \"Reset your password\"]\n                                 [:input {:type \"hidden\"\n                                          :name \"link_uuid\"\n                                          :value link-uuid}]\n                                 (form/password-field {:placeholder \"New Password\"} \"new-password\")\n                                 (form/password-field {:placeholder \"Verify Password\"} \"new-password-2\")\n                                 (when error-message\n                                   [:div#error.error-message\n                                    error-message])\n                                 (form/submit-button {} \"Reset Password\")])])))\n\n(defn password-reset [ config user-id link-uuid new-password new-password-2 ]\n  (let [ user (get-link-verified-user user-id link-uuid)]\n    (cond\n      (not user)\n      nil\n\n      (not (= new-password new-password-2))\n      (render-password-reset-form user-id link-uuid \"Passwords do not match.\")\n\n      :else\n      (do\n        (auth/set-user-password config (:email_addr user) new-password)\n        ;; Resetting the password via a link also serves to\n        ;; unlock the account.\n        (data/reset-login-failures (:user_id user))\n        (ring/redirect \"/user/password-reset-success\")))))\n\n(defn- ensure-verification-link [ user-id ]\n  (unless (data/get-verification-link-by-user-id user-id)\n    (data/create-verification-link user-id)))\n\n(defn- development-verification-form [ user-id ]\n  [:div.dev-tool\n   (let [ link-uuid (:link_uuid (data/get-verification-link-by-user-id user-id))]\n     [:a {:href (str \"/user/verify/\" user-id \"/\" link-uuid)} \"Verify\"])])\n\n(defn- development-unlock-form [ user-id ]\n  [:div.dev-tool\n   (let [ link-uuid (:link_uuid (data/get-verification-link-by-user-id user-id))]\n     [:a {:href (str \"/user/unlock/\" user-id \"/\" link-uuid)} \"Unlock\"])])\n\n(defn- development-reset-form [ user-id ]\n  [:div.dev-tool\n   (let [ link-uuid (:link_uuid (data/get-verification-link-by-user-id user-id))]\n     [:a {:href (str \"/user/reset/\" user-id \"/\" link-uuid)} \"Reset\"])])\n\n(defn- development-no-user-form []\n  [:div.dev-tool\n   \"No user with this e-mail address exists\"])\n\n(defn enter-verify-workflow [ config user-id ]\n  (let [ user (data/get-user-by-id user-id) ]\n    (ensure-verification-link user-id)\n    (send-verification-link config user-id)\n    (render-page { :title \"e-Mail Address Verification\" }\n                      [:div.page-message\n                       [:h1 \"e-Mail Address Verification\"]\n                       [:p \"An e-mail has been sent to \"  [:span.addr (:email_addr user)]\n                        \" with a link you may use to verify your e-mail address. Please\"\n                        \" check your spam filter if it does not appear within a few minutes.\"]\n                       [:a {:href \"/\"} \"Login\"]\n                       (when (:development-mode config)\n                         (development-verification-form user-id))])))\n\n\n(defn verify-user [ link-user-id link-uuid ]\n  (when-let [ user (get-link-verified-user link-user-id link-uuid ) ]\n    (data/add-user-roles (:user_id user) #{:toto.role/verified})\n    (render-page { :title \"e-Mail Address Verified\" }\n                 [:div.page-message\n                  [:h1 \"e-Mail Address Verified\"]\n                  [:p \"Thank you for verifying your e-mail address at: \"\n                   [:span.addr (:email_addr user)] \". Using the link below, you \"\n                   \"can log in and start to use the system.\"]\n                  [:a {:href \"/\"} \"Login\"]])))\n\n(defn enter-unlock-workflow [ config user-id ]\n  (let [user (data/get-user-by-email (auth/current-identity))]\n    (ensure-verification-link user-id)\n    (send-unlock-link config user-id)\n    (render-page { :title \"Unlock Account\" }\n                      [:div.page-message\n                       [:h1 \"Unlock Account\"]\n                       [:p \"An e-mail has been sent to \"  [:span.addr (:email_addr user)]\n                        \" with a link you may use to unlock your account. Please\"\n                        \" check your spam filter if it does not appear within a few minutes.\"]\n                       [:a {:href \"/\"} \"Login\"]\n                       (when (:development-mode config)\n                         (development-unlock-form user-id))])))\n\n(defn unlock-user [ link-user-id link-uuid ]\n  (when-let [ user (get-link-verified-user link-user-id link-uuid ) ]\n    (data/reset-login-failures (:user_id user))\n    (render-page { :title \"Account Unlocked\" }\n                 [:div.page-message\n                  [:h1 \"Account Unlocked\"]\n                  [:p \"Thank you for unlocking your account at: \"\n                   [:span.addr (:email_addr user)] \". Using the link below, you \"\n                   \"can log in and start to use the system.\"]\n                  [:a {:href \"/\"} \"Login\"]])))\n\n(defn enter-password-reset-workflow [ config email-addr ]\n  (let [user (data/get-user-by-email email-addr)\n        user-id (and user (:user_id user))]\n    (when user-id\n      (ensure-verification-link user-id)\n      (send-reset-link config user-id))\n    (render-page { :title \"Reset Password\" }\n                 [:div.page-message\n                  [:h1 \"Reset Password\"]\n                  [:p \"If there is an account with this e-mail address, an e-mail\"\n                   \" has been sent with a link you may use to reset your password. Please\"\n                   \" check your spam filter if it does not appear within a few minutes.\"]\n                  [:a {:href \"/\"} \"Login\"]\n                  (when (:development-mode config)\n                    (if user-id\n                      (development-reset-form user-id)\n                      (development-no-user-form)))])))\n\n(defn render-password-reset-success []\n    (render-page { :title \"Password Successfully Reset\" }\n                 [:div.page-message\n                  [:h1 \"Password Successfully Reset\"]\n                  [:p \"Your password has been reset. You can login \"\n                   [:a {:href \"/\"} \"here\"] \".\"]])  )\n\n(defn- support-message [ params ]\n  [:body\n   [:h1\n    \"Todo List - Support Request\"]\n   [:p\n    (:full-name params) \",\"]\n   [:p]\n   [:p\n    \"Thank you for contacting support, we will be in \"\n    \"touch soon. The contents of your message are below.\"]\n   [:p\n    \"-- Todo Support\"]\n   [:hr]\n   [:h2 \"Message:\"]\n   [:p (:message-text params)]\n   [:p\n    \"Site URL:\" [:tt (:current-uri params)]]])\n\n(defn- send-support-message [ config params ]\n  (let [message  {:subject \"Todo - Support Request\"\n                  :content support-message\n                  :params params}]\n    (log/info \"Sending support message:\" (:email-addr params)\n              \"Regarding URI:\" (:current-uri params))\n    (mail/send-email config (assoc message :to (:admin-mails config)))\n    (mail/send-email config (assoc message :to (:email-address params)))))\n\n(defn- handle-support-message [ config params ]\n  (if (verify-response-correct params)\n    (send-support-message config params)\n    (log/warn \"Non verified request\" params))\n  (ring/redirect (or (uri-path? (:current-uri params))\n                     \"/\")))\n\n(defn private-routes [ config ]\n  (routes\n   (GET \"/user/password\" []\n     (render-change-password-form))\n\n   (GET \"/user/password-changed\" []\n     (render-password-change-success))\n\n   (POST \"/user/password\" {params :params}\n     (change-password params))\n\n   (GET \"/user/info\" []\n     (render-user-info-form))\n\n   (POST \"/user/info\" { { name :name } :params }\n     (update-user-info name))))\n\n(defn all-routes [ config ]\n  (routes\n   (GET \"/user\" []\n     (render-new-user-form))\n\n   (POST \"/user\" {params :params}\n     (add-user config params))\n\n   (GET \"/login\" { { login-failed :login_failed email-addr :username } :params }\n     (render-login-page :email-addr email-addr\n                        :login-failure? (= login-failed \"Y\")))\n\n   ;; User Verification Workflow\n   (GET \"/user/verify/:user-id\" { { user-id :user-id } :params }\n     (enter-verify-workflow config user-id))\n\n   (friend/logout\n    (GET \"/user/verify/:user-id/:link-uuid\" { { user-id :user-id link-uuid :link-uuid } :params }\n      (verify-user (parsable-integer? user-id) link-uuid)))\n\n   ;; Account Unlock workflow\n   (GET \"/user/unlock/:user-id\" { { user-id :user-id } :params }\n     (enter-unlock-workflow config user-id))\n\n   (friend/logout\n    (GET \"/user/unlock/:user-id/:link-uuid\" { { user-id :user-id link-uuid :link-uuid } :params }\n      (unlock-user (parsable-integer? user-id) link-uuid)))\n\n   ;; Password Reset Workflow\n   (GET \"/user/forgot-password\" []\n     (render-forgot-password-form))\n\n   (POST \"/user/password-reset\" { { email-addr :email-addr } :params }\n     (enter-password-reset-workflow config email-addr))\n\n   (POST \"/user/password-reset/:user-id\" {params :params}\n     (password-reset config\n                     (parsable-integer? (:user-id params)) (:link_uuid params)\n                     (:new-password params) (:new-password-2 params)))\n\n   (friend/logout\n    (GET \"/user/reset/:user-id/:link-uuid\" { { user-id :user-id link-uuid :link-uuid error-message :error-message } :params }\n      (render-password-reset-form (parsable-integer? user-id) link-uuid error-message)))\n\n   (GET \"/user/password-reset-success\" []\n     (render-password-reset-success))\n\n   ;; Support Messages\n   (POST \"/support-message\" { params :params }\n     (handle-support-message config params))\n\n   ;; Logout Link\n   (friend/logout\n    (ANY \"/logout\" [] (ring/redirect \"/\")))\n\n   ;; Secure Links\n   (wrap-routes (private-routes config)\n                friend/wrap-authorize\n                #{:toto.role/verified})))\n", ";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this software.\n\n(ns toto.view.auth\n  (:use toto.core.util\n        compojure.core)\n  (:require [clojure.tools.logging :as log]\n            [cemerick.friend.credentials :as credentials]\n            [cemerick.friend :as friend]\n            [cemerick.friend.workflows :as workflows]\n            [toto.data.data :as data]\n            [toto.core.mail :as mail]))\n\n\n(defn get-user-id-by-email [ email ]\n  (if-let [ user-info (data/get-user-by-email email) ]\n    (user-info :user_id)\n    nil))\n\n(defmacro authorize-expected-roles [ & body ]\n  `(friend/authorize #{:toto.role/user} ~@body))\n\n(defn report-unauthorized []\n  (friend/throw-unauthorized (friend/current-authentication) {}))\n\n(defn current-identity []\n  (if-let [auth (friend/current-authentication)]\n    (:identity auth)))\n\n(defn current-user-id []\n  (if-let [ cauth (friend/current-authentication) ]\n    (:user-id cauth)))\n\n\n(defn authorize-toto-valid-user [ routes ]\n  (-> routes\n      (wrap-routes friend/wrap-authorize #{:toto.role/user})))\n\n(defn- password-current? [ user-record ]\n  (if-let [expiry (:password_expires_on user-record)]\n    (or (.after expiry (current-time))\n        (.after (:password_created_on user-record) expiry))\n    true))\n\n(defn- account-locked? [ user-record ]\n  (> (:login_failure_count user-record) 4))\n\n(defn- get-user-roles [ user-record ]\n  (cond (account-locked? user-record)\n        #{:toto.role/locked-account}\n\n        (not (password-current? user-record))\n        #{:toto.role/password-expired}\n\n        :else\n        (clojure.set/union\n         #{:toto.role/user} (data/get-user-roles (:user_id user-record)))))\n\n(defn get-auth-map-by-email [ email ]\n  (if-let [user-record (data/get-user-by-email email)]\n    {:identity email\n     :user-record user-record\n     :user-id (user-record :user_id)\n     :roles (get-user-roles user-record)\n     :account-locked (account-locked? user-record)\n     :login-failure-count (user-record :login_failure_count)}))\n\n(def ^:dynamic *request-ip* nil)\n\n(defn get-user-by-credentials [ creds ]\n  (if-let [auth-map (get-auth-map-by-email (creds :username))]\n    (cond\n      (credentials/bcrypt-verify (creds :password) (get-in auth-map [:user-record :password]))\n      (do\n        (data/record-user-login (creds :username) *request-ip*)\n        (update-in auth-map [:user-record] dissoc :password))\n\n      :else\n      (do\n        (data/record-user-login-failure (:user-id auth-map) *request-ip*)\n        nil))\n    nil))\n\n(defn current-roles []\n  (:roles (friend/current-authentication)))\n\n\n(defn password-change-message [ config ]\n  (let [from-mail (get-in config [:smtp :from])]\n    [:body\n     [:h1\n      \"Password Changed\"]\n     [:p\n      \"This mail confirms that you have changed the password for your \"\n      \"account at \" [:a {:href (:base-url config)} \"Toto\"]\n      \", the family to-do list manager.\"]\n     [:p\n      \"If this isn't something you've requested, please contact us\"\n      \" immediately at \" [:a {:href (str \"mailto:\" from-mail)} from-mail] \".\"]]))\n\n(defn send-password-change-message [ config username ]\n  (mail/send-email config\n                   {:to [ username ]\n                    :subject \"Todo - Password Changed\"\n                    :content password-change-message\n                    :params config}))\n\n(defn set-user-password [ config username password ]\n  (log/info \"Changing password for user:\" username)\n  (data/set-user-password username (credentials/hash-bcrypt password))\n  (send-password-change-message config username))\n\n(defn create-user [ email-addr password ]\n  (data/add-user email-addr (credentials/hash-bcrypt password)))\n\n(defn password-change-workflow [ config ]\n  (fn [{:keys [uri request-method params]}]\n    (let [{:keys [ :password :new-password :new-password-2 :username]} params]\n      (when (and (= uri \"/user/password\")\n                 (= request-method :post)\n                 (get-user-by-credentials params)\n                 (not (= password new-password))\n                 (= new-password new-password-2))\n        (set-user-password config username new-password)\n        (workflows/make-auth (get-auth-map-by-email username)\n                             {::friend/redirect-on-auth? \"/user/password-changed\"})))))\n\n(defn wrap-workflow-request-ip [ workflow ]\n  (fn [ req ]\n    (binding [*request-ip* (:request-ip req)]\n      (workflow req))))\n\n(defn wrap-authenticate [ app config unauthorized-handler ]\n  (friend/authenticate app\n                       {:credential-fn get-user-by-credentials\n                        :workflows [(password-change-workflow config)\n                                    (wrap-workflow-request-ip\n                                     (workflows/interactive-form))]\n                        :unauthorized-handler unauthorized-handler}))\n"], "fixing_code": [";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this software.\n\n(ns toto.core.mail\n  (:use toto.core.util)\n  (:require [clojure.tools.logging :as log]\n            [postal.core :as postal]\n            [hiccup.core :as hiccup]\n            [hiccup.util :as hiccup-util]))\n\n(defn- escape-email-params [ params ]\n  (map-values #(if (string? %)\n                 (hiccup-util/escape-html %)\n                 \"\")\n              params))\n\n(defn send-email [config message-info]\n  (let [smtp (:smtp config)\n        {:keys [ to subject content params ]} message-info\n        html-content (hiccup/html\n                      [:html\n                       (content (escape-email-params\n                                 (merge {:base-url (:base-url config)}\n                                        (or params {}))))])]\n\n    (log/info \"Sending mail to \" to \" with subject: \" subject)\n    (cond\n      (not (:enabled smtp))\n      (log/warn \"E-mail disabled. Message not sent. Message text: \"\n                html-content)\n\n      (or (nil? to) (= (count to) 0))\n      (log/warn \"No destination e-mail address. Message not send. Message text: \"\n                html-content)\n\n      :else\n      (postal/send-message {:host (:host smtp)\n                            :user (:user smtp)\n                            :pass (:password smtp)\n                            :ssl true}\n                           {:from (:from smtp)\n                            :to to\n                            :subject subject\n                            :body [{:type \"text/html\"\n                                    :content html-content}]}))))\n", ";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this software.\n\n\n(ns toto.core.util\n  (:require [clojure.tools.logging :as log]\n            [clojure.java.jdbc :as jdbc]\n            [hiccup.util :as util]))\n\n(defn add-shutdown-hook [ shutdown-fn ]\n  (.addShutdownHook (Runtime/getRuntime)\n                    (Thread. (fn []\n                               (shutdown-fn)))))\n\n(defmacro get-version []\n  ;; Capture compile-time property definition from Lein\n  (System/getProperty \"toto.version\"))\n\n(defmacro unless [ condition & body ]\n  `(when (not ~condition)\n     ~@body))\n\n(defn string-empty? [ str ]\n  (or (nil? str)\n      (= 0 (count (.trim str)))))\n\n(defn partition-string [ string n ]\n  \"Partition a full string into segments of length n, returning a\n  sequence of strings of at most that length.\"\n  (map (partial apply str) (partition-all n string)))\n\n(defn in?\n  \"true if seq contains elm\"\n  [seq elm]\n  (some #(= elm %) seq))\n\n(defn assoc-if [ map assoc? k v ]\n  (if assoc?\n    (assoc map k v)\n    map))\n\n(defn string-leftmost\n  ( [ string count ellipsis ]\n      (let [length (.length string)\n            leftmost (min count length)]\n        (if (< leftmost length)\n          (str (.substring string 0 leftmost) ellipsis)\n          string)))\n\n  ( [ string count ]\n      (string-leftmost string count \"\")))\n\n(defn parsable-string? [ maybe-string ]\n  \"Returns the parsable text content of the input paramater and false\n  if there is no such content.\"\n  (and\n   (string? maybe-string)\n   (let [ string (.trim maybe-string) ]\n     (and (> (count string) 0)\n          string))))\n\n(defn parsable-integer? [ maybe-string ]\n  \"Returns the parsable integer value of the input parameter and false\n  if there is no such integer value.\"\n  (if-let [ string (parsable-string? maybe-string) ]\n    (try\n      (Integer/parseInt string)\n      (catch Exception ex\n        false))))\n\n(defn uri-path? [ uri ]\n  \"Returns only the path of the URI, if it is a parsable URI and false\n  otherwise.\"\n  (and\n   uri\n   (try\n     (.getPath (java.net.URI. uri))\n     (catch java.net.URISyntaxException ex\n       (log/error \"Invalid URI\" uri)\n       false))))\n\n;;; Date utilities\n\n(defn current-time []\n  (java.util.Date.))\n\n(defn add-days\n  \"Given a date, advance it forward n days, leaving it at the beginning\n  of that day in the JVM default time zone. An hour-of-day can\n  optionally be specified.\"\n  ( [ date days ] (add-days date days 0))\n  ( [ date days hour-of-day]\n   (let [c (java.util.Calendar/getInstance)]\n     (.setTime c date)\n     (.add c java.util.Calendar/DATE days)\n     (.set c java.util.Calendar/HOUR_OF_DAY hour-of-day)\n     (.set c java.util.Calendar/MINUTE 0)\n     (.set c java.util.Calendar/SECOND 0)\n     (.set c java.util.Calendar/MILLISECOND 0)\n     (.getTime c))))\n\n;;; Configuration properties\n\n(defn config-property\n  ( [ name ] (config-property name nil))\n  ( [ name default ]\n      (let [prop-binding (System/getProperty name)]\n        (if (nil? prop-binding)\n          default\n          (if-let [ int (parsable-integer? prop-binding) ]\n            int\n            prop-binding)))))\n\n;;; Exception barrier\n\n(defn exception-barrier\n  ([ fn label ]\n   #(try\n      (fn)\n      (catch Exception ex\n        (log/error ex (str \"Uncaught exception: \" label))))))\n\n;;; Thread Naming\n\n(defn call-with-thread-name [ fn name ]\n  (let [thread (Thread/currentThread)\n        initial-thread-name (.getName thread)]\n    (try\n      (.setName thread name)\n      (fn)\n      (finally\n        (.setName thread initial-thread-name)))))\n\n(defmacro unless [ condition & body ]\n  `(when (not ~condition)\n     ~@body))\n\n(defmacro with-thread-name [ thread-name & body ]\n  `(call-with-thread-name (fn [] ~@body) ~thread-name))\n\n(defn map-values [f m]\n  (->> (map (fn [[k v]] [k (f v)]) m)\n       (into {})))\n", ";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this software.\n\n(ns toto.site.user\n  (:use toto.core.util\n        compojure.core\n        hiccup.core\n        toto.view.common\n        toto.view.components\n        toto.view.query\n        toto.view.page)\n  (:require [clojure.tools.logging :as log]\n            [ring.util.response :as ring]\n            [cemerick.friend :as friend]\n            [hiccup.form :as form]\n            [toto.core.mail :as mail]\n            [toto.data.data :as data]\n            [toto.view.auth :as auth]))\n\n(defn user-unauthorized [ request ]\n  (render-page { :title \"Access Denied\"}\n               [:div.page-message\n                [:h1 \"Access Denied\"]]))\n\n(defn user-unverified [ request ]\n  (render-page { :title \"E-Mail Unverified\"}\n               [:div.page-message\n                [:h1 \"E-Mail Unverified\"]\n                [:p\n                 \"Your e-mail address is unverified and your acccount is \"\n                 \"inactive. A verification e-mail can be sent by following \"\n                 [:a {:href (str \"/user/verify/\" (auth/current-user-id))} \" this link\"]\n                 \".\"]]))\n\n(defn user-password-expired [ request ]\n  (render-page { :title \"Password Expired\"}\n               [:div.page-message\n                [:h1 \"Password Expired\"]\n                [:p\n                 \"Your password has expired and needs to be reset. \"\n                 \"This can be done at \"\n                 [:a {:href (str \"/user/password\")} \" this link\"]\n                 \".\"]]))\n\n(defn user-account-locked [ request ]\n  (render-page { :title \"Account Locked\"}\n               [:div.page-message\n                [:h1 \"Account Locked\"]\n                [:p\n                 \"Your account is locked and must be re-verified by e-mail.\"\n                 \"An verification e-mail can be sent by following \"\n                 [:a {:href (str \"/user/unlock/\" (auth/current-user-id))} \" this link\"]\n                 \".\"]]))\n\n(defn unauthorized-handler [request]\n  (let [roles (auth/current-roles)]\n    {:status 403\n     :body ((cond\n              (:toto.role/unverified roles)\n              user-unverified\n\n              (:toto.role/expired-password roles)\n              user-password-expired\n\n              (:toto.role/locked-account roles)\n              user-account-locked\n\n              :else\n              user-unauthorized)\n            request)}))\n\n(defn- user-create-notification-message [ params ]\n  [:body\n   [:h1\n    \"New User Created\"]\n   [:p\n    \"New user e-mail: \" (:email-addr params) \".\"]])\n\n(defn- send-user-create-notification [ config email-addr ]\n  (mail/send-email\n   config\n   {:to (:admin-mails config)\n    :subject \"Todo - New User Account Created\"\n    :content user-create-notification-message\n    :params { :email-addr email-addr }}))\n\n(defn create-user [ config email-addr password ]\n  (let [user-id (auth/create-user email-addr password)\n        list-id (data/add-list \"Todo\" false)]\n    (data/set-list-ownership list-id #{ user-id })\n    (send-user-create-notification config email-addr)\n    user-id))\n\n(defn wrap-authenticate [ app config ]\n  (auth/wrap-authenticate app config unauthorized-handler))\n\n(defn render-forgot-password-form []\n  (render-page { :title \"Forgot Password\" }\n   (form/form-to\n    {:class \"auth-form\"\n     :data-turbo \"false\"}\n    [:post \"/user/password-reset\"]\n    [:p\n     \"Please enter your e-mail address. If an account is associated with that \"\n     \"address, an e-mail will be sent with a link to reset the password.\"]\n    [:div.config-panel.toplevel\n     (form/text-field {:placeholder \"E-Mail Address\"} \"email-addr\")]\n    [:div.submit-panel\n     (form/submit-button {} \"Send Reset E-Mail\")]))  )\n\n(defn render-login-page [ & { :keys [ email-addr login-failure?]}]\n  (render-page { :title \"Log In\" }\n   (form/form-to\n    {:class \"auth-form\"\n     :data-turbo \"false\"}\n    [:post \"/login\"]\n    [:div.config-panel.toplevel\n     (form/text-field {:placeholder \"E-Mail Address\"} \"username\" email-addr)\n     (form/password-field {:placeholder \"Password\"} \"password\")\n     [:div.error-message\n      (when login-failure?\n        \"Invalid username or password.\")]]\n    [:div.submit-panel\n     [:a { :href \"/user\"} \"Register New User\"]\n     \" - \"\n     [:a { :href \"/user/forgot-password\"} \"Forgot Password\"]\n     \" - \"\n    (form/submit-button {} \"Login\")])))\n\n(defn render-new-user-form [ & { :keys [ error-message ]}]\n    (render-page\n     {:title \"New User Registration\"\n      :page-data-class \"init-new-user\"}\n     (form/form-to\n      {:class \"auth-form\"\n       :data-turbo \"false\"}\n      [:post \"/user\"]\n      [:div.config-panel\n       [:h1 \"Identity\"]\n       (form/text-field {:placeholder \"E-Mail Address\"} \"email-addr\")\n       (form/text-field {:placeholder \"Verify E-Mail Address\"} \"email-addr-2\")]\n      [:div.config-panel\n       [:h1 \"Password\"]\n       (form/password-field {:placeholder \"Password\"} \"password\")\n       (form/password-field {:placeholder \"Verify Password\"} \"password-2\")]\n      (render-verify-question)\n      [:div.submit-panel\n       [:div#error.error-message\n        error-message]\n       (form/submit-button {} \"Register\")])))\n\n(defn get-verification-link-by-user-id [ config link-type user-id ]\n  (let [verification-link (data/get-verification-link-by-user-id user-id)]\n    (str (:base-url config) \"user/\" link-type \"/\" user-id \"/\"\n         (:link_uuid verification-link))))\n\n\n(defn- verification-link-email-message [ params ]\n  [:body\n   [:h1\n    \"Verification E-mail\"]\n   [:p\n    \"Thank you for registering with \" [:a {:href (:base-url params)} \"Toto\"]\n    \", the family to-do list manager. You can verify your e-mail address by clicking\"\n    [:a {:href (:verify-link-url params)} \" here\"] \".\"]\n   [:p\n    \"If this isn't something you've requested, you can safely ignore this\"\n    \" e-mail, and we won't send anything else.\"]])\n\n(defn- send-verification-link [ config user-id ]\n  (let [user (data/get-user-by-id user-id)\n        link-url (get-verification-link-by-user-id config \"verify\" user-id)]\n    (mail/send-email config\n                     {:to [ (:email_addr user) ]\n                      :subject \"Todo - Verify Account\"\n                      :content verification-link-email-message\n                      :params { :verify-link-url link-url }})))\n\n(defn- unlock-link-email-message [ params ]\n  [:body\n   [:h1\n    \"Unlock Password\"]\n   [:p\n    \"Click \" [:a {:href (:verify-link-url params)} \"here\"] \" to unlock your \"\n    \"account at \" [:a {:href (:base-url params)} \"Toto\"] \", the family \"\n    \"to-do list manager.\"]])\n\n(defn- send-unlock-link [ config user-id ]\n  (let [user (data/get-user-by-id user-id)\n        link-url (get-verification-link-by-user-id config \"unlock\" user-id)]\n    (mail/send-email config\n                     {:to [ (:email_addr user) ]\n                      :subject \"Todo - Unlock Account\"\n                      :content unlock-link-email-message\n                      :params { :verify-link-url link-url }})))\n\n(defn- reset-link-email-message [ params ]\n  [:body\n   [:h1\n    \"Reset Password\"]\n   [:p\n    \"Click \" [:a {:href (:verify-link-url params)} \"here\"]\n    \" to reset your password at \" [:a {:href (:base-url params)} \"Toto\"]\n    \", the family to-do list manager.\"]])\n\n(defn- send-reset-link [ config user-id ]\n  (let [user (data/get-user-by-id user-id)\n        link-url (get-verification-link-by-user-id config \"reset\" user-id)]\n    (mail/send-email config\n                     {:to [ (:email_addr user) ]\n                      :subject \"Todo - Reset Account Password\"\n                      :content reset-link-email-message\n                      :params { :verify-link-url link-url }})))\n\n(defn add-user [ config params ]\n  (let [{:keys [:email-addr :email-addr-2 :password :password-2]} params]\n    (cond\n      (not (verify-response-correct params))\n      (render-new-user-form :error-message \"Math problem answer incorrect.\")\n\n      (not (= email-addr email-addr-2))\n      (render-new-user-form :error-message \"E-mail addresses do not match.\")\n\n      (not (= password password-2))\n      (render-new-user-form :error-message \"Passwords do not match.\")\n\n      (data/user-email-exists? email-addr)\n      (render-new-user-form :error-message \"User with this e-mail address already exists.\")\n\n      :else\n      (do\n        (let [user-id (create-user config email-addr password)]\n          (ring/redirect (str \"/user/verify/\" user-id)))))))\n\n(def date-format (java.text.SimpleDateFormat. \"yyyy-MM-dd hh:mm aa\"))\n\n(defn render-user-info-form [ & { :keys [ error-message ]}]\n  (let [user (data/get-user-by-email (auth/current-identity))]\n    (render-page { :title \"User Information\" }\n                 (form/form-to\n                  [:post \"/user/info\"]\n                  [:input {:type \"hidden\"\n                           :name \"username\"\n                           :value (auth/current-identity)}]\n                  [:div.config-panel\n                   [:h1 \"E-Mail Address\"]\n                   (auth/current-identity)]\n\n                  [:div.config-panel\n                   [:h1 \"Name\"]\n                   [:div\n                    [:input {:name \"name\"\n                             :type \"text\"\n                             :value (:friendly_name user)}]\n                    (form/submit-button {} \"Update\")]\n                   (when error-message\n                     [:div.error-message error-message])]\n\n                  [:div.config-panel\n                   [:h1 \"Last Login\"]\n                   (.format date-format (or (:last_login_on user) (current-time)))]\n\n                  [:div.config-panel\n                    [:a {:href \"/user/password\"} \"Change Password\"]]))))\n\n(defn validate-name [ name ]\n  (if name\n    (let [ name (.trim name )]\n      (and (> (.length name) 0)\n           (< (.length name) 32)\n           name))))\n\n(defn update-user-info [ name ]\n  (if-let [name (validate-name name)]\n    (do\n      (data/set-user-name (auth/current-identity) name)\n      (ring/redirect \"/user/info\"))\n    (render-user-info-form :error-message \"Invalid Name\")))\n\n(defn render-change-password-form  [ & { :keys [ error-message ]}]\n  (let [user (data/get-user-by-email (auth/current-identity))]\n    (render-page { :title \"Change Password\" }\n                 (form/form-to {:class \"auth-form\"\n                                :data-turbo \"false\"}\n                               [:post \"/user/password\"]\n                               [:input {:type \"hidden\"\n                                        :name \"username\"\n                                        :value (auth/current-identity)}]\n                               [:div.config-panel\n                                [:h1 \"E-Mail Address\"]\n                                (auth/current-identity)]\n                               [:div.config-panel\n                                [:h1 \"Name\"]\n                                (:friendly_name user)]\n                               [:div.config-panel\n                                [:h1 \"Last Login\"]\n                                (.format date-format (or (:last_login_on user) (current-time)))]\n                               [:div.config-panel\n                                [:h1 \"Change Password\"]\n                                (form/password-field {:placeholder \"Password\"} \"password\")\n                                (form/password-field {:placeholder \"New Password\"} \"new-password\")\n                                (form/password-field {:placeholder \"Verify Password\"} \"new-password-2\")\n                                (when error-message\n                                  [:div.error-message error-message])\n                                [:div\n                                 (form/submit-button {} \"Change Password\")]]))))\n\n(defn- change-password [ {:keys [password new-password new-password-2]} ]\n\n  (let [ username (auth/current-identity) ]\n    (cond\n      (not (auth/get-user-by-credentials {:username username :password password}))\n      (render-change-password-form\n       :error-message \"Old password incorrect.\")\n\n      (= password new-password-2)\n      (render-change-password-form\n       :error-message \"New password cannot be the same as the old.\")\n\n      (not (= new-password new-password-2))\n      (render-change-password-form\n       :error-message \"Passwords do not match.\")\n\n      :else\n      (do\n        ;; The password change handling is done in a Friend workflow\n        ;; handler (password-change-handler), so that it can\n        ;; reauthenticate the user against the new password and assign\n        ;; the user the correct roles for an account with a valid\n        ;; password. (This is needed so that we allow the user use the\n        ;; website, if their password had expired.)\n        (log/warn \"Password change unexpectedly fell through workflow!\")\n        (ring/redirect \"/\")))))\n\n(defn render-password-change-success []\n    (render-page { :title \"Password Successfully Changed\" }\n                 [:div.page-message\n                  [:h1 \"Password Successfully Changed\"]\n                  [:p \"Your password has been changed. You can view \"\n                   \"your lists\" [:a {:href \"/\"} \" here\"] \".\"]])  )\n\n(defn- get-link-verified-user [ link-user-id link-uuid ]\n  (when-let [ user-id (:verifies_user_id (data/get-verification-link-by-uuid link-uuid)) ]\n    (when (= link-user-id user-id)\n      (data/get-user-by-id user-id))))\n\n(defn render-password-reset-form [ link-user-id link-uuid error-message ]\n  (when-let [ user (get-link-verified-user link-user-id link-uuid)]\n    (render-page { :title \"Reset Password\" }\n                 [:div.page-message\n                  (form/form-to {:class \"auth-form\"\n                                 :data-turbo \"false\"}\n                                [:post (str \"/user/password-reset/\" (:user_id user))]\n                                [:div.config-panel\n                                 [:h1 \"Reset your password\"]\n                                 [:input {:type \"hidden\"\n                                          :name \"link_uuid\"\n                                          :value link-uuid}]\n                                 (form/password-field {:placeholder \"New Password\"} \"new-password\")\n                                 (form/password-field {:placeholder \"Verify Password\"} \"new-password-2\")\n                                 (when error-message\n                                   [:div#error.error-message\n                                    error-message])\n                                 (form/submit-button {} \"Reset Password\")])])))\n\n(defn password-reset [ config user-id link-uuid new-password new-password-2 ]\n  (let [ user (get-link-verified-user user-id link-uuid)]\n    (cond\n      (not user)\n      nil\n\n      (not (= new-password new-password-2))\n      (render-password-reset-form user-id link-uuid \"Passwords do not match.\")\n\n      :else\n      (do\n        (auth/set-user-password config (:email_addr user) new-password)\n        ;; Resetting the password via a link also serves to\n        ;; unlock the account.\n        (data/reset-login-failures (:user_id user))\n        (ring/redirect \"/user/password-reset-success\")))))\n\n(defn- ensure-verification-link [ user-id ]\n  (unless (data/get-verification-link-by-user-id user-id)\n    (data/create-verification-link user-id)))\n\n(defn- development-verification-form [ user-id ]\n  [:div.dev-tool\n   (let [ link-uuid (:link_uuid (data/get-verification-link-by-user-id user-id))]\n     [:a {:href (str \"/user/verify/\" user-id \"/\" link-uuid)} \"Verify\"])])\n\n(defn- development-unlock-form [ user-id ]\n  [:div.dev-tool\n   (let [ link-uuid (:link_uuid (data/get-verification-link-by-user-id user-id))]\n     [:a {:href (str \"/user/unlock/\" user-id \"/\" link-uuid)} \"Unlock\"])])\n\n(defn- development-reset-form [ user-id ]\n  [:div.dev-tool\n   (let [ link-uuid (:link_uuid (data/get-verification-link-by-user-id user-id))]\n     [:a {:href (str \"/user/reset/\" user-id \"/\" link-uuid)} \"Reset\"])])\n\n(defn- development-no-user-form []\n  [:div.dev-tool\n   \"No user with this e-mail address exists\"])\n\n(defn enter-verify-workflow [ config user-id ]\n  (let [ user (data/get-user-by-id user-id) ]\n    (ensure-verification-link user-id)\n    (send-verification-link config user-id)\n    (render-page { :title \"e-Mail Address Verification\" }\n                      [:div.page-message\n                       [:h1 \"e-Mail Address Verification\"]\n                       [:p \"An e-mail has been sent to \"  [:span.addr (:email_addr user)]\n                        \" with a link you may use to verify your e-mail address. Please\"\n                        \" check your spam filter if it does not appear within a few minutes.\"]\n                       [:a {:href \"/\"} \"Login\"]\n                       (when (:development-mode config)\n                         (development-verification-form user-id))])))\n\n\n(defn verify-user [ link-user-id link-uuid ]\n  (when-let [ user (get-link-verified-user link-user-id link-uuid ) ]\n    (data/add-user-roles (:user_id user) #{:toto.role/verified})\n    (render-page { :title \"e-Mail Address Verified\" }\n                 [:div.page-message\n                  [:h1 \"e-Mail Address Verified\"]\n                  [:p \"Thank you for verifying your e-mail address at: \"\n                   [:span.addr (:email_addr user)] \". Using the link below, you \"\n                   \"can log in and start to use the system.\"]\n                  [:a {:href \"/\"} \"Login\"]])))\n\n(defn enter-unlock-workflow [ config user-id ]\n  (let [user (data/get-user-by-email (auth/current-identity))]\n    (ensure-verification-link user-id)\n    (send-unlock-link config user-id)\n    (render-page { :title \"Unlock Account\" }\n                      [:div.page-message\n                       [:h1 \"Unlock Account\"]\n                       [:p \"An e-mail has been sent to \"  [:span.addr (:email_addr user)]\n                        \" with a link you may use to unlock your account. Please\"\n                        \" check your spam filter if it does not appear within a few minutes.\"]\n                       [:a {:href \"/\"} \"Login\"]\n                       (when (:development-mode config)\n                         (development-unlock-form user-id))])))\n\n(defn unlock-user [ link-user-id link-uuid ]\n  (when-let [ user (get-link-verified-user link-user-id link-uuid ) ]\n    (data/reset-login-failures (:user_id user))\n    (render-page { :title \"Account Unlocked\" }\n                 [:div.page-message\n                  [:h1 \"Account Unlocked\"]\n                  [:p \"Thank you for unlocking your account at: \"\n                   [:span.addr (:email_addr user)] \". Using the link below, you \"\n                   \"can log in and start to use the system.\"]\n                  [:a {:href \"/\"} \"Login\"]])))\n\n(defn enter-password-reset-workflow [ config email-addr ]\n  (let [user (data/get-user-by-email email-addr)\n        user-id (and user (:user_id user))]\n    (when user-id\n      (ensure-verification-link user-id)\n      (send-reset-link config user-id))\n    (render-page { :title \"Reset Password\" }\n                 [:div.page-message\n                  [:h1 \"Reset Password\"]\n                  [:p \"If there is an account with this e-mail address, an e-mail\"\n                   \" has been sent with a link you may use to reset your password. Please\"\n                   \" check your spam filter if it does not appear within a few minutes.\"]\n                  [:a {:href \"/\"} \"Login\"]\n                  (when (:development-mode config)\n                    (if user-id\n                      (development-reset-form user-id)\n                      (development-no-user-form)))])))\n\n(defn render-password-reset-success []\n    (render-page { :title \"Password Successfully Reset\" }\n                 [:div.page-message\n                  [:h1 \"Password Successfully Reset\"]\n                  [:p \"Your password has been reset. You can login \"\n                   [:a {:href \"/\"} \"here\"] \".\"]])  )\n\n(defn- support-message [ params ]\n  [:body\n   [:h1\n    \"Todo List - Support Request\"]\n   [:p\n    (:full-name params) \",\"]\n   [:p]\n   [:p\n    \"Thank you for contacting support, we will be in \"\n    \"touch soon. The contents of your message are below.\"]\n   [:p\n    \"-- Todo Support\"]\n   [:hr]\n   [:h2 \"Message:\"]\n   [:p (:message-text params)]\n   [:p\n    \"Site URL:\" [:tt (:current-uri params)]]])\n\n(defn- send-support-message [ config params ]\n  (let [message  {:subject \"Todo - Support Request\"\n                  :content support-message\n                  :params params}]\n    (log/info \"Sending support message:\" (:email-addr params)\n              \"Regarding URI:\" (:current-uri params))\n    (mail/send-email config (assoc message :to (:admin-mails config)))\n    (mail/send-email config (assoc message :to (:email-address params)))))\n\n(defn- handle-support-message [ config params ]\n  (if (verify-response-correct params)\n    (send-support-message config params)\n    (log/warn \"Non verified request\" params))\n  (ring/redirect (or (uri-path? (:current-uri params))\n                     \"/\")))\n\n(defn private-routes [ config ]\n  (routes\n   (GET \"/user/password\" []\n     (render-change-password-form))\n\n   (GET \"/user/password-changed\" []\n     (render-password-change-success))\n\n   (POST \"/user/password\" {params :params}\n     (change-password params))\n\n   (GET \"/user/info\" []\n     (render-user-info-form))\n\n   (POST \"/user/info\" { { name :name } :params }\n     (update-user-info name))))\n\n(defn all-routes [ config ]\n  (routes\n   (GET \"/user\" []\n     (render-new-user-form))\n\n   (POST \"/user\" {params :params}\n     (add-user config params))\n\n   (GET \"/login\" { { login-failed :login_failed email-addr :username } :params }\n     (render-login-page :email-addr email-addr\n                        :login-failure? (= login-failed \"Y\")))\n\n   ;; User Verification Workflow\n   (GET \"/user/verify/:user-id\" { { user-id :user-id } :params }\n     (enter-verify-workflow config user-id))\n\n   (friend/logout\n    (GET \"/user/verify/:user-id/:link-uuid\" { { user-id :user-id link-uuid :link-uuid } :params }\n      (verify-user (parsable-integer? user-id) link-uuid)))\n\n   ;; Account Unlock workflow\n   (GET \"/user/unlock/:user-id\" { { user-id :user-id } :params }\n     (enter-unlock-workflow config user-id))\n\n   (friend/logout\n    (GET \"/user/unlock/:user-id/:link-uuid\" { { user-id :user-id link-uuid :link-uuid } :params }\n      (unlock-user (parsable-integer? user-id) link-uuid)))\n\n   ;; Password Reset Workflow\n   (GET \"/user/forgot-password\" []\n     (render-forgot-password-form))\n\n   (POST \"/user/password-reset\" { { email-addr :email-addr } :params }\n     (enter-password-reset-workflow config email-addr))\n\n   (POST \"/user/password-reset/:user-id\" {params :params}\n     (password-reset config\n                     (parsable-integer? (:user-id params)) (:link_uuid params)\n                     (:new-password params) (:new-password-2 params)))\n\n   (friend/logout\n    (GET \"/user/reset/:user-id/:link-uuid\" { { user-id :user-id link-uuid :link-uuid error-message :error-message } :params }\n      (render-password-reset-form (parsable-integer? user-id) link-uuid error-message)))\n\n   (GET \"/user/password-reset-success\" []\n     (render-password-reset-success))\n\n   ;; Support Messages\n   (POST \"/support-message\" { params :params }\n     (handle-support-message config params))\n\n   ;; Logout Link\n   (friend/logout\n    (ANY \"/logout\" [] (ring/redirect \"/\")))\n\n   ;; Secure Links\n   (wrap-routes (private-routes config)\n                friend/wrap-authorize\n                #{:toto.role/verified})))\n", ";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this software.\n\n(ns toto.view.auth\n  (:use toto.core.util\n        compojure.core)\n  (:require [clojure.tools.logging :as log]\n            [cemerick.friend.credentials :as credentials]\n            [cemerick.friend :as friend]\n            [cemerick.friend.workflows :as workflows]\n            [toto.data.data :as data]\n            [toto.core.mail :as mail]))\n\n\n(defn get-user-id-by-email [ email ]\n  (if-let [ user-info (data/get-user-by-email email) ]\n    (user-info :user_id)\n    nil))\n\n(defmacro authorize-expected-roles [ & body ]\n  `(friend/authorize #{:toto.role/user} ~@body))\n\n(defn report-unauthorized []\n  (friend/throw-unauthorized (friend/current-authentication) {}))\n\n(defn current-identity []\n  (if-let [auth (friend/current-authentication)]\n    (:identity auth)))\n\n(defn current-user-id []\n  (if-let [ cauth (friend/current-authentication) ]\n    (:user-id cauth)))\n\n\n(defn authorize-toto-valid-user [ routes ]\n  (-> routes\n      (wrap-routes friend/wrap-authorize #{:toto.role/user})))\n\n(defn- password-current? [ user-record ]\n  (if-let [expiry (:password_expires_on user-record)]\n    (or (.after expiry (current-time))\n        (.after (:password_created_on user-record) expiry))\n    true))\n\n(defn- account-locked? [ user-record ]\n  (> (:login_failure_count user-record) 4))\n\n(defn- get-user-roles [ user-record ]\n  (cond (account-locked? user-record)\n        #{:toto.role/locked-account}\n\n        (not (password-current? user-record))\n        #{:toto.role/password-expired}\n\n        :else\n        (clojure.set/union\n         #{:toto.role/user} (data/get-user-roles (:user_id user-record)))))\n\n(defn get-auth-map-by-email [ email ]\n  (if-let [user-record (data/get-user-by-email email)]\n    {:identity email\n     :user-record user-record\n     :user-id (user-record :user_id)\n     :roles (get-user-roles user-record)\n     :account-locked (account-locked? user-record)\n     :login-failure-count (user-record :login_failure_count)}))\n\n(def ^:dynamic *request-ip* nil)\n\n(defn get-user-by-credentials [ creds ]\n  (if-let [auth-map (get-auth-map-by-email (creds :username))]\n    (cond\n      (credentials/bcrypt-verify (creds :password) (get-in auth-map [:user-record :password]))\n      (do\n        (data/record-user-login (creds :username) *request-ip*)\n        (update-in auth-map [:user-record] dissoc :password))\n\n      :else\n      (do\n        (data/record-user-login-failure (:user-id auth-map) *request-ip*)\n        nil))\n    nil))\n\n(defn current-roles []\n  (:roles (friend/current-authentication)))\n\n(defn password-change-message [ params ]\n  (let [ { :keys [ from-mail ]} params ]\n    [:body\n     [:h1\n      \"Password Changed\"]\n     [:p\n      \"This mail confirms that you have changed the password for your \"\n      \"account at \" [:a {:href (:base-url params)} \"Toto\"]\n      \", the family to-do list manager.\"]\n     [:p\n      \"If this isn't something you've requested, please contact us\"\n      \" immediately at \" [:a {:href (str \"mailto:\" from-mail)} from-mail] \".\"]]))\n\n(defn send-password-change-message [ config username ]\n  (mail/send-email config\n                   {:to [ username ]\n                    :subject \"Todo - Password Changed\"\n                    :content password-change-message\n                    :params { :from-mail (get-in config [:smtp :from]) }}))\n\n(defn set-user-password [ config username password ]\n  (log/info \"Changing password for user:\" username)\n  (data/set-user-password username (credentials/hash-bcrypt password))\n  (send-password-change-message config username))\n\n(defn create-user [ email-addr password ]\n  (data/add-user email-addr (credentials/hash-bcrypt password)))\n\n(defn password-change-workflow [ config ]\n  (fn [{:keys [uri request-method params]}]\n    (let [{:keys [ :password :new-password :new-password-2 :username]} params]\n      (when (and (= uri \"/user/password\")\n                 (= request-method :post)\n                 (get-user-by-credentials params)\n                 (not (= password new-password))\n                 (= new-password new-password-2))\n        (set-user-password config username new-password)\n        (workflows/make-auth (get-auth-map-by-email username)\n                             {::friend/redirect-on-auth? \"/user/password-changed\"})))))\n\n(defn wrap-workflow-request-ip [ workflow ]\n  (fn [ req ]\n    (binding [*request-ip* (:request-ip req)]\n      (workflow req))))\n\n(defn wrap-authenticate [ app config unauthorized-handler ]\n  (friend/authenticate app\n                       {:credential-fn get-user-by-credentials\n                        :workflows [(password-change-workflow config)\n                                    (wrap-workflow-request-ip\n                                     (workflows/interactive-form))]\n                        :unauthorized-handler unauthorized-handler}))\n"], "filenames": ["src/toto/core/mail.clj", "src/toto/core/util.clj", "src/toto/site/user.clj", "src/toto/view/auth.clj"], "buggy_code_start_loc": [21, 157, 181, 105], "buggy_code_end_loc": [45, 157, 222, 125], "fixing_code_start_loc": [22, 158, 181, 105], "fixing_code_end_loc": [53, 162, 222, 124], "type": "CWE-79", "message": "A vulnerability was found in mschaef toto up to 1.4.20. It has been declared as problematic. This vulnerability affects unknown code of the component Email Parameter Handler. The manipulation leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.4.21 is able to address this issue. The name of the patch is 1f27f37c1a06f54a76971f70eaa6139dc139bdf9. It is recommended to upgrade the affected component. VDB-216178 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4591", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-17T19:15:09.093", "lastModified": "2022-12-22T16:30:19.577", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in mschaef toto up to 1.4.20. It has been declared as problematic. This vulnerability affects unknown code of the component Email Parameter Handler. The manipulation leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.4.21 is able to address this issue. The name of the patch is 1f27f37c1a06f54a76971f70eaa6139dc139bdf9. It is recommended to upgrade the affected component. VDB-216178 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:toto_project:toto:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.4.21", "matchCriteriaId": "B5012806-6903-4362-84AB-34C4B39C3EB4"}]}]}], "references": [{"url": "https://github.com/mschaef/toto/commit/1f27f37c1a06f54a76971f70eaa6139dc139bdf9", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mschaef/toto/releases/tag/1.4.21", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216178", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mschaef/toto/commit/1f27f37c1a06f54a76971f70eaa6139dc139bdf9"}}