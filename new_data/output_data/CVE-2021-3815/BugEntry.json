{"buggy_code": ["/** global: ArrayUtil */\n/** global: Base64Util */\n/** global: DateUtil */\n/** global: FunctionUtil */\n/** global: JSONUtil */\n/** global: MathUtil */\n/** global: ObjectUtil */\n/** global: StringUtil */\n/** global: TypeUtil */\n/** global: URLUtil */\n\nObjectUtil = {\n\n    assign: function(obj, other)\n    {\n        var objs = [other].concat(FunctionUtil.args(arguments, 2));\n        var i, j, k;\n        for (i = 0, j = objs.length; i < j; i++) {\n            for (k in objs[i]) {\n                obj[k] = objs[i][k];\n            }\n        }\n        return obj;\n    },\n\n    clean: function(obj, hard)\n    {\n        var keys = ObjectUtil.keys(obj);\n        var key, val;\n        for (var i = 0, j = keys.length; i < j; i++) {\n            key = keys[i];\n            val = obj[key];\n            if (hard === true) {\n                switch (TypeUtil.of(val)) {\n                    case TypeUtil.ARRAY:\n                        val = obj[key] = ArrayUtil.clean(val, hard);\n                        if (val.length === 0) {\n                            val = null;\n                        }\n                        break;\n                    case TypeUtil.OBJECT:\n                        val = obj[key] = ObjectUtil.clean(val, hard);\n                        if (ObjectUtil.length(val) === 0) {\n                            val = null;\n                        }\n                        break;\n                    case TypeUtil.STRING:\n                        val = obj[key] = StringUtil.trim(val);\n                        if (val === '') {\n                            val = null;\n                        }\n                        break;\n                }\n            }\n            if (TypeUtil.isNone(val)) {\n                delete obj[key];\n            }\n        }\n        return obj;\n    },\n\n    clone: function(obj)\n    {\n        var cln = {};\n        var keys = ObjectUtil.keys(obj);\n        var key, val;\n        for (var i = 0, j = keys.length; i < j; i++) {\n            key = keys[i];\n            val = obj[key];\n            switch (TypeUtil.of(val)) {\n                case TypeUtil.ARRAY:\n                    cln[key] = ArrayUtil.clone(val);\n                    break;\n                case TypeUtil.DATE:\n                    cln[key] = DateUtil.clone(val);\n                    break;\n                case TypeUtil.OBJECT:\n                    cln[key] = ObjectUtil.clone(val);\n                    break;\n                default:\n                    cln[key] = obj[key];\n                    break;\n            }\n        }\n        return cln;\n    },\n\n    decodeBase64: function(str)\n    {\n        return JSONUtil.decode(Base64Util.decode(str));\n    },\n\n    decodeJSON: function(str)\n    {\n        return JSONUtil.decode(str);\n    },\n\n    decodeParameters: function(str)\n    {\n        return URLUtil.getParametersDict('?' + str);\n    },\n\n    encodeBase64: function(obj)\n    {\n        return Base64Util.encode(JSONUtil.encode(obj));\n    },\n\n    encodeJSON: function(obj)\n    {\n        return JSONUtil.encode(obj);\n    },\n\n    encodeParameters: function(obj, keysFilter)\n    {\n        var objClean = ObjectUtil.clean(ObjectUtil.clone(obj), true);\n        var keys = (TypeUtil.isArray(keysFilter) ? keysFilter : ObjectUtil.keys(obj, true));\n        var key, val, keyval = [];\n\n        for (var i = 0, j = keys.length; i < j; i++) {\n            key = keys[i];\n            if (key in objClean) {\n                val = objClean[key];\n                keyval.push(key + '=' + encodeURIComponent(val));\n            }\n        }\n\n        return keyval.join('&');\n    },\n\n    equals: function(obj1, obj2)\n    {\n        if (obj1 === obj2 || ObjectUtil.is(obj1, obj2)) {\n            return true;\n        }\n\n        var key, val1, val2, type1, type2;\n\n        type1 = TypeUtil.of(obj1);\n        type2 = TypeUtil.of(obj2);\n\n        if (type1 !== type2) {\n            return false;\n        }\n\n        switch (type1) {\n            case TypeUtil.ARRAY:\n            case TypeUtil.OBJECT:\n                break;\n            case TypeUtil.NUMBER:\n                return MathUtil.equals(obj1, obj2);\n            default:\n                return String(obj1) === String(obj2);\n        }\n\n        for (key in obj2) {\n            if (!(key in obj1)) {\n                return false;\n            }\n        }\n\n        for (key in obj1) {\n            val1 = obj1[key];\n            val2 = obj2[key];\n\n            if (ObjectUtil.is(obj1, val1) || ObjectUtil.is(obj2, val2) || ObjectUtil.is(val1, val2) || val1 === val2) {\n                continue;\n            }\n\n            if (!ObjectUtil.equals(val1, val2)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    is: function(obj1, obj2)\n    {\n        // https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n        if (!Object.is) {\n            Object.is = function(x, y) {\n                // Algoritmo SameValue\n                if (x === y) { // Steps 1-5, 7-10\n                    // Steps 6.b-6.e: +0 != -0\n                    return x !== 0 || 1 / x === 1 / y;\n                } else {\n                    // Step 6.a: NaN === NaN\n                    return x !== x && y !== y;\n                }\n            };\n        }\n        return Object.is(obj1, obj2);\n    },\n\n    keypath: {\n\n        get: function(obj, path, defaultValue)\n        {\n            var keys = path.split('.');\n            var key;\n            var cursor = obj;\n            for (var i = 0, j = keys.length; i < j; i++) {\n                key = keys[i];\n                try {\n                    cursor = cursor[key];\n                } catch(e) {\n                    return defaultValue;\n                }\n            }\n            return (TypeUtil.isUndefined(cursor) ? defaultValue : cursor);\n        },\n\n        set: function(obj, path, value)\n        {\n            var keys = path.split('.');\n            var key;\n            var cursor = obj;\n            for (var i = 0, j = keys.length; i < j; i++) {\n                key = keys[i];\n                if (!TypeUtil.isObject(cursor[key])) {\n                    cursor[key] = {};\n                }\n                if (i < (j - 1)) {\n                    cursor = cursor[key];\n                } else {\n                    cursor[key] = value;\n                }\n            }\n        }\n    },\n\n    keys: function(obj, sorted)\n    {\n        var k = Object.keys(obj);\n        if (sorted === true) {\n            k.sort();\n        }\n        return k;\n    },\n\n    length: function(obj)\n    {\n        return ObjectUtil.keys(obj).length;\n    },\n\n    map: function(obj, func)\n    {\n        var m = {};\n        ObjectUtil.keys(obj).forEach(function(k) {\n            m[k] = func.call(null, obj[k], k, obj);\n        });\n        return m;\n    },\n\n    merge: function(obj1, obj2)\n    {\n        var objs = [{}, obj1, obj2].concat(FunctionUtil.args(arguments, 2));\n        var obj = ObjectUtil.assign.apply(null, objs);\n        return obj;\n    },\n\n    search: function(objs, filter)\n    {\n        var results = [], i, j, k, m, obj, res, keys, key, val;\n        for (i = 0, j = objs.length; i < j; i++) {\n            obj = objs[i];\n            res = obj;\n            keys = ObjectUtil.keys(filter);\n            for (k = 0, m = keys.length; k < m; k++) {\n                key = keys[k];\n                val = filter[key];\n                if (!ObjectUtil.equals(obj[key], val)) {\n                    res = null;\n                }\n            }\n            if (res) {\n                results.push(res);\n            }\n        }\n        return results;\n    },\n\n    values: function(obj, sorted)\n    {\n        var keys = ObjectUtil.keys(obj, sorted);\n        var vals = [];\n        for (var i = 0, j = keys.length; i < j; i++) {\n            vals.push(obj[keys[i]]);\n        }\n        return vals;\n    }\n\n};", "var utils = require('../dist/utils.js');\nvar test = utils.test;\nvar obj = utils.object;\n\ndescribe('object', function() {\n    describe('assign', function() {\n        var f = obj.assign;\n        it('test same instance', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1, o1);\n            test.assertEqual(r, { a:1, b:2, c:3 });\n        });\n        it('test diff instance', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var o2 = { d:4, e:5, f:6 };\n            var r = f(o1, o2);\n            test.assertTrue(o1 !== o2);\n            test.assertTrue(o1 === r);\n            test.assertTrue(o2 !== r);\n            test.assertEqual(r, { a:1, b:2, c:3, d:4, e:5, f:6 });\n        });\n        it('test multiple instances', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var o2 = { d:4, e:5, f:6 };\n            var o3 = { g:7, h:8, i:9 };\n            var o4 = { a:0, e:0, i:0 };\n            var r = f(o1, o2, o3, o4);\n            test.assertEqual(r, { a:0, b:2, c:3, d:4, e:0, f:6, g:7, h:8, i:0 });\n        });\n        it('test props overwrite', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var o2 = { a:4, b:5, c:6 };\n            var r = f(o1, o2);\n            test.assertEqual(r['a'], 4);\n            test.assertEqual(r['b'], 5);\n            test.assertEqual(r['c'], 6);\n            test.assertEqual(r, { a:4, b:5, c:6 });\n        });\n    });\n    describe('clean', function() {\n        var f = obj.clean;\n        it('test soft', function() {\n            var o1 = { a:1, b:undefined, c:3, d:null, e:'', f:0, g:NaN, h:false, i:[null], j:{ k:null } };\n            var r = f(o1);\n            test.assertEqual(obj.length(r), 7);\n            test.assertEqual(r, { a:1, c:3, e:'', f:0, h:false, i:[null], j:{ k:null } });\n        });\n        it('test hard', function() {\n            var o1 = { a:1, b:undefined, c:3, d:null, e:'', f:0, g:NaN, h:false, i:[null], j:{ k:null } };\n            var r = f(o1, true);\n            test.assertEqual(obj.length(r), 4);\n            test.assertEqual(r, { a:1, c:3, f:0, h:false });\n        });\n    });\n    describe('clone', function() {\n        var f = obj.clone;\n        it('test new instance and key/values cloned', function() {\n            var o = { a:1, b:2, c:3 };\n            var r = f(o);\n            test.assertFalse(r === o);\n            test.assertEqual(r, o);\n        });\n        it('test array property cloned', function() {\n            var a = { a:[1, 2, 3] };\n            var o = { a:a };\n            var r = f(o);\n            test.assertFalse(r['a'] === a);\n            test.assertEqual(r['a'], a);\n        });\n        it('test boolean property cloned', function() {\n            var b = true;\n            var o = { b:b };\n            var r = f(o);\n            test.assertTrue(r['b'] === b);\n            test.assertEqual(r['b'], b);\n        });\n        it('test date property cloned', function() {\n            var d = new Date(1900);\n            var o = { d:d };\n            var r = f(o);\n            test.assertFalse(r['d'] === d);\n            test.assertEqual(r['d'], d);\n        });\n        it('test object property cloned', function() {\n            var a = { a:1, b:2, c:3 };\n            var o = { o:a };\n            var r = f(o);\n            test.assertFalse(r['o'] === a);\n            test.assertEqual(r['o'], a);\n        });\n        it('test number property cloned', function() {\n            var n = 123;\n            var o = { n:n };\n            var r = f(o);\n            test.assertTrue(r['n'] === n);\n            test.assertEqual(r['n'], n);\n        });\n        it('test string property cloned', function() {\n            var s = 'ok';\n            var o = { s:s };\n            var r = f(o);\n            test.assertTrue(r['s'] === s);\n            test.assertEqual(r['s'], s);\n        });\n    });\n    // describe('decodeBase64', function() {\n    //     it('TODO', function() {\n    //         test.assertTrue(true);\n    //     });\n    // });\n    // describe('decodeJSON', function() {\n    //     it('TODO', function() {\n    //         test.assertTrue(true);\n    //     });\n    // });\n    // describe('encodeBase64', function() {\n    //     it('TODO', function() {\n    //         test.assertTrue(true);\n    //     });\n    // });\n    // describe('encodeJSON', function() {\n    //     it('TODO', function() {\n    //         test.assertTrue(true);\n    //     });\n    // });\n    describe('equals', function() {\n        var f = obj.equals;\n        var a = {\n            foods:{\n                fruits: [\"orange\", \"lemon\"]\n            },\n            numbers:{\n                \"Decimal\": {\n                    tens:[40, 50, 20],\n                    hundreds:[300, 500]\n                },\n                \"Roman\": {\n                    small:[\"I\", \"VII\", \"IX\"],\n                    hundreds:[300, 500]\n                },\n            },\n            bikes: [\"recumbent\", \"upright\"]\n        };\n        var b = {\n            foods:{\n                fruits:[\"orange\", \"lemon\"]\n            },\n            numbers:{\n                \"Decimal\": {\n                    tens:[40, 50, 20],\n                    hundreds:[300, 500]\n                },\n                \"Roman\": {\n                    small:[\"I\", \"VII\", \"IX\"],\n                    hundreds:[300, 500]\n                },\n            },\n            bikes: [\"recumbent\", \"upright\"]\n        };\n        var c = {\n            foods:{\n                fruits:[\"orange\", \"lemon\"]\n            },\n            numbers:{\n                \"Decimal\": {\n                    tens:[40, 50, 20],\n                    hundreds:[300, 700]\n                },\n                \"Roman\": {\n                    small:[\"I\", \"VII\", \"IX\"],\n                    large:[\"MCXVII\", \"MCXXVIII\", \"MMVIII\"]\n                },\n            },\n            bikes: [\"recumbent\", \"upright\"]\n        };\n        it('test simple', function() {\n            test.assertTrue(f(a, a));\n            test.assertTrue(f(a, b));\n            test.assertFalse(f(a, c));\n            test.assertFalse(f(b, c));\n        });\n        it('test objects containing numbers', function() {\n            var a = { x:0.0, y:0.0 };\n            var b = { x:0.0, y:0.0000000001 };\n            var c = { x:0.0, y:0.0001 };\n            test.assertTrue(f(a, b));\n            test.assertFalse(f(a, c));\n        });\n        it('test objects containing different keys', function() {\n            var a = { x:0.0, y:0.0 };\n            var b = { x:0.0, y:0.0, z:0.0 };\n            var c = { x:0.0 };\n            test.assertFalse(f(a, b));\n            test.assertFalse(f(a, c));\n            test.assertFalse(f(b, c));\n        });\n    });\n    describe('keys', function() {\n        var f = obj.keys;\n        it('test no keys', function() {\n            var o1 = {};\n            var r = f(o1);\n            test.assertEqual(r, []);\n        });\n        it('test keys unsorted', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1);\n            test.assertTrue(r.indexOf('a') !== -1);\n            test.assertTrue(r.indexOf('b') !== -1);\n            test.assertTrue(r.indexOf('c') !== -1);\n        });\n        it('test keys sorted', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1, true);\n            test.assertEqual(r, ['a', 'b', 'c']);\n        });\n    });\n    describe('keypath', function() {\n        it('test object', function() {\n            test.assertObject(obj.keypath);\n        });\n    });\n    describe('keypath.get', function() {\n        var f = obj.keypath.get;\n        var o = {\n            a: 1,\n            b: {\n                y: 'ok'\n            },\n            c: {},\n            d: 'ok',\n            e: {\n                f: {\n                    g: 'ok'\n                }\n            }\n        };\n        var r;\n        it('test on 1 non-existing key', function() {\n            r = f(o, 'z');\n            test.assertEqual(r, undefined);\n        });\n        it('test on 1 non-existing key default value', function() {\n            r = f(o, 'z', 0);\n            test.assertEqual(r, 0);\n        });\n        it('test on 1 existing key', function() {\n            r = f(o, 'a');\n            test.assertEqual(r, 1);\n        });\n        it('test on 2 non-existing keys', function() {\n            r = f(o, 'a.x');\n            test.assertEqual(r, undefined);\n        });\n        it('test on 2 non-existing keys default value', function() {\n            r = f(o, 'a.x', 2);\n            test.assertEqual(r, 2);\n        });\n        it('test on 2 existing keys', function() {\n            r = f(o, 'b.y');\n            test.assertEqual(r, 'ok');\n        });\n        it('test on 3 non-existing keys', function() {\n            r = f(o, 'x.y.z');\n            test.assertEqual(r, undefined);\n        });\n        it('test on 3 non-existing keys default value', function() {\n            r = f(o, 'x.y.z', 1000);\n            test.assertEqual(r, 1000);\n        });\n        it('test on 3 existing keys', function() {\n            r = f(o, 'e.f.g');\n            test.assertEqual(r, 'ok');\n        });\n    });\n    describe('keypath.set', function() {\n        var f = obj.keypath.set;\n        var o = {\n            a: {},\n            b: {},\n            c: {}\n        };\n        it('test on 1 non-existing key', function() {\n            f(o, 'd', 'ok 1');\n            test.assertEqual(o['d'], 'ok 1');\n        });\n        it('test on 1 existing key', function() {\n            f(o, 'd', 'ok 2');\n            test.assertEqual(o['d'], 'ok 2');\n        });\n        it('test on 2 non-existing keys', function() {\n            f(o, 'e.f', 'ok 1');\n            test.assertEqual(o['e']['f'], 'ok 1');\n        });\n        it('test on 2 existing keys', function() {\n            f(o, 'e.f', 'ok 2');\n            test.assertEqual(o['e']['f'], 'ok 2');\n        });\n        it('test on 3 non-existing keys', function() {\n            f(o, 'e.f.g', 'ok 1');\n            test.assertEqual(o['e']['f']['g'], 'ok 1');\n        });\n        it('test on 3 existing keys', function() {\n            f(o, 'e.f.g', 'ok 2');\n            test.assertEqual(o['e']['f']['g'], 'ok 2');\n        });\n    });\n    describe('length', function() {\n        var f = obj.length;\n        it('test empty object', function() {\n            var o1 = {};\n            var r = f(o1);\n            test.assertEqual(r, 0);\n        });\n        it('test simple object', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1);\n            test.assertEqual(r, 3);\n        });\n    });\n    describe('map', function() {\n        var f = obj.map;\n        it('test all items', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var keys = obj.keys(o1);\n            var values = obj.values(o1);\n            var r = f(o1, function(val, key, item){\n                test.assertTrue(item === o1);\n                test.assertTrue(keys.indexOf(key) !== -1);\n                test.assertTrue(values.indexOf(val) !== -1);\n            });\n        });\n        it('test result', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1, function(val, key, item){\n                return (val * 2);\n            });\n            test.assertEqual(r, { a:2, b:4, c:6 });\n        });\n    });\n    describe('merge', function() {\n        var f = obj.merge;\n        it('test same instance', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1, o1);\n            test.assertFalse(o1 === r);\n            test.assertEqual(r, { a:1, b:2, c:3 });\n        });\n        it('test diff instance', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var o2 = { d:4, e:5, f:6 };\n            var r = f(o1, o2);\n            test.assertTrue(o1 !== o2);\n            test.assertTrue(o1 !== r);\n            test.assertTrue(o2 !== r);\n            test.assertEqual(r, { a:1, b:2, c:3, d:4, e:5, f:6 });\n        });\n        it('test multiple instances', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var o2 = { d:4, e:5, f:6 };\n            var o3 = { g:7, h:8, i:9 };\n            var o4 = { a:0, e:0, i:0 };\n            var r = f(o1, o2, o3, o4);\n            test.assertEqual(r, { a:0, b:2, c:3, d:4, e:0, f:6, g:7, h:8, i:0 });\n        });\n        it('test props overwrite', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var o2 = { a:4, b:5, c:6 };\n            var r = f(o1, o2);\n            test.assertEqual(r, { a:4, b:5, c:6 });\n        });\n    });\n    describe('search', function() {\n        var f = obj.search;\n        it('test empty filter', function() {\n            var objs = [\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:1, b:2, c:null, d:'ok', e:false, f:true }\n            ];\n            var r = f(objs, {});\n            test.assertEqual(r, objs);\n        });\n        it('test simple filter result found', function() {\n            var objs = [\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:2, b:2, c:null, d:'ok', e:false, f:true },\n                { a:3, b:2, c:null, d:'ok', e:false, f:true },\n                { a:4, b:2, c:null, d:'ok', e:false, f:true }\n            ];\n            var r = f(objs, { a:3 });\n            test.assertEqual(r, [objs[2]]);\n        });\n        it('test simple filter result not found', function() {\n            var objs = [\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:2, b:2, c:null, d:'ok', e:false, f:true },\n                { a:3, b:2, c:null, d:'ok', e:false, f:true },\n                { a:4, b:2, c:null, d:'ok', e:false, f:true }\n            ];\n            var r = f(objs, { a:5 });\n            test.assertEqual(r, []);\n        });\n        it('test simple filter multiple result found', function() {\n            var objs = [\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:2, b:2, c:null, d:'ok', e:false, f:true },\n                { a:1, b:2, c:null, d:'ok', e:false, f:false },\n                { a:2, b:2, c:null, d:'ok', e:false, f:true },\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:2, b:2, c:null, d:'ok', e:false, f:true }\n            ];\n            var r = f(objs, { a:1, f:true });\n            test.assertEqual(r, [objs[0], objs[4]]);\n        });\n    });\n    describe('values', function() {\n        var f = obj.values;\n        it('test no values', function() {\n            var o1 = {};\n            var r = f(o1);\n            test.assertEqual(r, []);\n        });\n        it('test values unsorted', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1);\n            test.assertTrue(r.indexOf(1) !== -1);\n            test.assertTrue(r.indexOf(2) !== -1);\n            test.assertTrue(r.indexOf(3) !== -1);\n        });\n        it('test values sorted', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1, true);\n            test.assertEqual(r, [1, 2, 3]);\n        });\n    });\n});"], "fixing_code": ["/** global: ArrayUtil */\n/** global: Base64Util */\n/** global: DateUtil */\n/** global: FunctionUtil */\n/** global: JSONUtil */\n/** global: MathUtil */\n/** global: ObjectUtil */\n/** global: StringUtil */\n/** global: TypeUtil */\n/** global: URLUtil */\n\nObjectUtil = {\n\n    assign: function(obj, other)\n    {\n        var objs = [other].concat(FunctionUtil.args(arguments, 2));\n        var i, j, k;\n        for (i = 0, j = objs.length; i < j; i++) {\n            for (k in objs[i]) {\n                obj[k] = objs[i][k];\n            }\n        }\n        return obj;\n    },\n\n    clean: function(obj, hard)\n    {\n        var keys = ObjectUtil.keys(obj);\n        var key, val;\n        for (var i = 0, j = keys.length; i < j; i++) {\n            key = keys[i];\n            val = obj[key];\n            if (hard === true) {\n                switch (TypeUtil.of(val)) {\n                    case TypeUtil.ARRAY:\n                        val = obj[key] = ArrayUtil.clean(val, hard);\n                        if (val.length === 0) {\n                            val = null;\n                        }\n                        break;\n                    case TypeUtil.OBJECT:\n                        val = obj[key] = ObjectUtil.clean(val, hard);\n                        if (ObjectUtil.length(val) === 0) {\n                            val = null;\n                        }\n                        break;\n                    case TypeUtil.STRING:\n                        val = obj[key] = StringUtil.trim(val);\n                        if (val === '') {\n                            val = null;\n                        }\n                        break;\n                }\n            }\n            if (TypeUtil.isNone(val)) {\n                delete obj[key];\n            }\n        }\n        return obj;\n    },\n\n    clone: function(obj)\n    {\n        var cln = {};\n        var keys = ObjectUtil.keys(obj);\n        var key, val;\n        for (var i = 0, j = keys.length; i < j; i++) {\n            key = keys[i];\n            val = obj[key];\n            switch (TypeUtil.of(val)) {\n                case TypeUtil.ARRAY:\n                    cln[key] = ArrayUtil.clone(val);\n                    break;\n                case TypeUtil.DATE:\n                    cln[key] = DateUtil.clone(val);\n                    break;\n                case TypeUtil.OBJECT:\n                    cln[key] = ObjectUtil.clone(val);\n                    break;\n                default:\n                    cln[key] = obj[key];\n                    break;\n            }\n        }\n        return cln;\n    },\n\n    decodeBase64: function(str)\n    {\n        return JSONUtil.decode(Base64Util.decode(str));\n    },\n\n    decodeJSON: function(str)\n    {\n        return JSONUtil.decode(str);\n    },\n\n    decodeParameters: function(str)\n    {\n        return URLUtil.getParametersDict('?' + str);\n    },\n\n    encodeBase64: function(obj)\n    {\n        return Base64Util.encode(JSONUtil.encode(obj));\n    },\n\n    encodeJSON: function(obj)\n    {\n        return JSONUtil.encode(obj);\n    },\n\n    encodeParameters: function(obj, keysFilter)\n    {\n        var objClean = ObjectUtil.clean(ObjectUtil.clone(obj), true);\n        var keys = (TypeUtil.isArray(keysFilter) ? keysFilter : ObjectUtil.keys(obj, true));\n        var key, val, keyval = [];\n\n        for (var i = 0, j = keys.length; i < j; i++) {\n            key = keys[i];\n            if (key in objClean) {\n                val = objClean[key];\n                keyval.push(key + '=' + encodeURIComponent(val));\n            }\n        }\n\n        return keyval.join('&');\n    },\n\n    equals: function(obj1, obj2)\n    {\n        if (obj1 === obj2 || ObjectUtil.is(obj1, obj2)) {\n            return true;\n        }\n\n        var key, val1, val2, type1, type2;\n\n        type1 = TypeUtil.of(obj1);\n        type2 = TypeUtil.of(obj2);\n\n        if (type1 !== type2) {\n            return false;\n        }\n\n        switch (type1) {\n            case TypeUtil.ARRAY:\n            case TypeUtil.OBJECT:\n                break;\n            case TypeUtil.NUMBER:\n                return MathUtil.equals(obj1, obj2);\n            default:\n                return String(obj1) === String(obj2);\n        }\n\n        for (key in obj2) {\n            if (!(key in obj1)) {\n                return false;\n            }\n        }\n\n        for (key in obj1) {\n            val1 = obj1[key];\n            val2 = obj2[key];\n\n            if (ObjectUtil.is(obj1, val1) || ObjectUtil.is(obj2, val2) || ObjectUtil.is(val1, val2) || val1 === val2) {\n                continue;\n            }\n\n            if (!ObjectUtil.equals(val1, val2)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    is: function(obj1, obj2)\n    {\n        // https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n        if (!Object.is) {\n            Object.is = function(x, y) {\n                // Algoritmo SameValue\n                if (x === y) { // Steps 1-5, 7-10\n                    // Steps 6.b-6.e: +0 != -0\n                    return x !== 0 || 1 / x === 1 / y;\n                } else {\n                    // Step 6.a: NaN === NaN\n                    return x !== x && y !== y;\n                }\n            };\n        }\n        return Object.is(obj1, obj2);\n    },\n\n    keypath: {\n\n        get: function(obj, path, defaultValue)\n        {\n            var keys = path.split('.');\n            var key;\n            var cursor = obj;\n            for (var i = 0, j = keys.length; i < j; i++) {\n                key = keys[i];\n                try {\n                    cursor = cursor[key];\n                } catch(e) {\n                    return defaultValue;\n                }\n            }\n            return (TypeUtil.isUndefined(cursor) ? defaultValue : cursor);\n        },\n\n        set: function(obj, path, value)\n        {\n            var keys = path.split('.');\n            var key;\n            var cursor = obj;\n            for (var i = 0, j = keys.length; i < j; i++) {\n                key = keys[i];\n                if (key === '__proto__') {\n                    break;\n                }\n                if (!TypeUtil.isObject(cursor[key])) {\n                    cursor[key] = {};\n                }\n                if (i < (j - 1)) {\n                    cursor = cursor[key];\n                } else {\n                    cursor[key] = value;\n                }\n            }\n        }\n    },\n\n    keys: function(obj, sorted)\n    {\n        var k = Object.keys(obj);\n        if (sorted === true) {\n            k.sort();\n        }\n        return k;\n    },\n\n    length: function(obj)\n    {\n        return ObjectUtil.keys(obj).length;\n    },\n\n    map: function(obj, func)\n    {\n        var m = {};\n        ObjectUtil.keys(obj).forEach(function(k) {\n            m[k] = func.call(null, obj[k], k, obj);\n        });\n        return m;\n    },\n\n    merge: function(obj1, obj2)\n    {\n        var objs = [{}, obj1, obj2].concat(FunctionUtil.args(arguments, 2));\n        var obj = ObjectUtil.assign.apply(null, objs);\n        return obj;\n    },\n\n    search: function(objs, filter)\n    {\n        var results = [], i, j, k, m, obj, res, keys, key, val;\n        for (i = 0, j = objs.length; i < j; i++) {\n            obj = objs[i];\n            res = obj;\n            keys = ObjectUtil.keys(filter);\n            for (k = 0, m = keys.length; k < m; k++) {\n                key = keys[k];\n                val = filter[key];\n                if (!ObjectUtil.equals(obj[key], val)) {\n                    res = null;\n                }\n            }\n            if (res) {\n                results.push(res);\n            }\n        }\n        return results;\n    },\n\n    values: function(obj, sorted)\n    {\n        var keys = ObjectUtil.keys(obj, sorted);\n        var vals = [];\n        for (var i = 0, j = keys.length; i < j; i++) {\n            vals.push(obj[keys[i]]);\n        }\n        return vals;\n    }\n\n};", "var utils = require('../dist/utils.js');\nvar test = utils.test;\nvar obj = utils.object;\n\ndescribe('object', function() {\n    describe('assign', function() {\n        var f = obj.assign;\n        it('test same instance', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1, o1);\n            test.assertEqual(r, { a:1, b:2, c:3 });\n        });\n        it('test diff instance', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var o2 = { d:4, e:5, f:6 };\n            var r = f(o1, o2);\n            test.assertTrue(o1 !== o2);\n            test.assertTrue(o1 === r);\n            test.assertTrue(o2 !== r);\n            test.assertEqual(r, { a:1, b:2, c:3, d:4, e:5, f:6 });\n        });\n        it('test multiple instances', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var o2 = { d:4, e:5, f:6 };\n            var o3 = { g:7, h:8, i:9 };\n            var o4 = { a:0, e:0, i:0 };\n            var r = f(o1, o2, o3, o4);\n            test.assertEqual(r, { a:0, b:2, c:3, d:4, e:0, f:6, g:7, h:8, i:0 });\n        });\n        it('test props overwrite', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var o2 = { a:4, b:5, c:6 };\n            var r = f(o1, o2);\n            test.assertEqual(r['a'], 4);\n            test.assertEqual(r['b'], 5);\n            test.assertEqual(r['c'], 6);\n            test.assertEqual(r, { a:4, b:5, c:6 });\n        });\n    });\n    describe('clean', function() {\n        var f = obj.clean;\n        it('test soft', function() {\n            var o1 = { a:1, b:undefined, c:3, d:null, e:'', f:0, g:NaN, h:false, i:[null], j:{ k:null } };\n            var r = f(o1);\n            test.assertEqual(obj.length(r), 7);\n            test.assertEqual(r, { a:1, c:3, e:'', f:0, h:false, i:[null], j:{ k:null } });\n        });\n        it('test hard', function() {\n            var o1 = { a:1, b:undefined, c:3, d:null, e:'', f:0, g:NaN, h:false, i:[null], j:{ k:null } };\n            var r = f(o1, true);\n            test.assertEqual(obj.length(r), 4);\n            test.assertEqual(r, { a:1, c:3, f:0, h:false });\n        });\n    });\n    describe('clone', function() {\n        var f = obj.clone;\n        it('test new instance and key/values cloned', function() {\n            var o = { a:1, b:2, c:3 };\n            var r = f(o);\n            test.assertFalse(r === o);\n            test.assertEqual(r, o);\n        });\n        it('test array property cloned', function() {\n            var a = { a:[1, 2, 3] };\n            var o = { a:a };\n            var r = f(o);\n            test.assertFalse(r['a'] === a);\n            test.assertEqual(r['a'], a);\n        });\n        it('test boolean property cloned', function() {\n            var b = true;\n            var o = { b:b };\n            var r = f(o);\n            test.assertTrue(r['b'] === b);\n            test.assertEqual(r['b'], b);\n        });\n        it('test date property cloned', function() {\n            var d = new Date(1900);\n            var o = { d:d };\n            var r = f(o);\n            test.assertFalse(r['d'] === d);\n            test.assertEqual(r['d'], d);\n        });\n        it('test object property cloned', function() {\n            var a = { a:1, b:2, c:3 };\n            var o = { o:a };\n            var r = f(o);\n            test.assertFalse(r['o'] === a);\n            test.assertEqual(r['o'], a);\n        });\n        it('test number property cloned', function() {\n            var n = 123;\n            var o = { n:n };\n            var r = f(o);\n            test.assertTrue(r['n'] === n);\n            test.assertEqual(r['n'], n);\n        });\n        it('test string property cloned', function() {\n            var s = 'ok';\n            var o = { s:s };\n            var r = f(o);\n            test.assertTrue(r['s'] === s);\n            test.assertEqual(r['s'], s);\n        });\n    });\n    // describe('decodeBase64', function() {\n    //     it('TODO', function() {\n    //         test.assertTrue(true);\n    //     });\n    // });\n    // describe('decodeJSON', function() {\n    //     it('TODO', function() {\n    //         test.assertTrue(true);\n    //     });\n    // });\n    // describe('encodeBase64', function() {\n    //     it('TODO', function() {\n    //         test.assertTrue(true);\n    //     });\n    // });\n    // describe('encodeJSON', function() {\n    //     it('TODO', function() {\n    //         test.assertTrue(true);\n    //     });\n    // });\n    describe('equals', function() {\n        var f = obj.equals;\n        var a = {\n            foods:{\n                fruits: [\"orange\", \"lemon\"]\n            },\n            numbers:{\n                \"Decimal\": {\n                    tens:[40, 50, 20],\n                    hundreds:[300, 500]\n                },\n                \"Roman\": {\n                    small:[\"I\", \"VII\", \"IX\"],\n                    hundreds:[300, 500]\n                },\n            },\n            bikes: [\"recumbent\", \"upright\"]\n        };\n        var b = {\n            foods:{\n                fruits:[\"orange\", \"lemon\"]\n            },\n            numbers:{\n                \"Decimal\": {\n                    tens:[40, 50, 20],\n                    hundreds:[300, 500]\n                },\n                \"Roman\": {\n                    small:[\"I\", \"VII\", \"IX\"],\n                    hundreds:[300, 500]\n                },\n            },\n            bikes: [\"recumbent\", \"upright\"]\n        };\n        var c = {\n            foods:{\n                fruits:[\"orange\", \"lemon\"]\n            },\n            numbers:{\n                \"Decimal\": {\n                    tens:[40, 50, 20],\n                    hundreds:[300, 700]\n                },\n                \"Roman\": {\n                    small:[\"I\", \"VII\", \"IX\"],\n                    large:[\"MCXVII\", \"MCXXVIII\", \"MMVIII\"]\n                },\n            },\n            bikes: [\"recumbent\", \"upright\"]\n        };\n        it('test simple', function() {\n            test.assertTrue(f(a, a));\n            test.assertTrue(f(a, b));\n            test.assertFalse(f(a, c));\n            test.assertFalse(f(b, c));\n        });\n        it('test objects containing numbers', function() {\n            var a = { x:0.0, y:0.0 };\n            var b = { x:0.0, y:0.0000000001 };\n            var c = { x:0.0, y:0.0001 };\n            test.assertTrue(f(a, b));\n            test.assertFalse(f(a, c));\n        });\n        it('test objects containing different keys', function() {\n            var a = { x:0.0, y:0.0 };\n            var b = { x:0.0, y:0.0, z:0.0 };\n            var c = { x:0.0 };\n            test.assertFalse(f(a, b));\n            test.assertFalse(f(a, c));\n            test.assertFalse(f(b, c));\n        });\n    });\n    describe('keys', function() {\n        var f = obj.keys;\n        it('test no keys', function() {\n            var o1 = {};\n            var r = f(o1);\n            test.assertEqual(r, []);\n        });\n        it('test keys unsorted', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1);\n            test.assertTrue(r.indexOf('a') !== -1);\n            test.assertTrue(r.indexOf('b') !== -1);\n            test.assertTrue(r.indexOf('c') !== -1);\n        });\n        it('test keys sorted', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1, true);\n            test.assertEqual(r, ['a', 'b', 'c']);\n        });\n    });\n    describe('keypath', function() {\n        it('test object', function() {\n            test.assertObject(obj.keypath);\n        });\n    });\n    describe('keypath.get', function() {\n        var f = obj.keypath.get;\n        var o = {\n            a: 1,\n            b: {\n                y: 'ok'\n            },\n            c: {},\n            d: 'ok',\n            e: {\n                f: {\n                    g: 'ok'\n                }\n            }\n        };\n        var r;\n        it('test on 1 non-existing key', function() {\n            r = f(o, 'z');\n            test.assertEqual(r, undefined);\n        });\n        it('test on 1 non-existing key default value', function() {\n            r = f(o, 'z', 0);\n            test.assertEqual(r, 0);\n        });\n        it('test on 1 existing key', function() {\n            r = f(o, 'a');\n            test.assertEqual(r, 1);\n        });\n        it('test on 2 non-existing keys', function() {\n            r = f(o, 'a.x');\n            test.assertEqual(r, undefined);\n        });\n        it('test on 2 non-existing keys default value', function() {\n            r = f(o, 'a.x', 2);\n            test.assertEqual(r, 2);\n        });\n        it('test on 2 existing keys', function() {\n            r = f(o, 'b.y');\n            test.assertEqual(r, 'ok');\n        });\n        it('test on 3 non-existing keys', function() {\n            r = f(o, 'x.y.z');\n            test.assertEqual(r, undefined);\n        });\n        it('test on 3 non-existing keys default value', function() {\n            r = f(o, 'x.y.z', 1000);\n            test.assertEqual(r, 1000);\n        });\n        it('test on 3 existing keys', function() {\n            r = f(o, 'e.f.g');\n            test.assertEqual(r, 'ok');\n        });\n    });\n    describe('keypath.set', function() {\n        var f = obj.keypath.set;\n        var o = {\n            a: {},\n            b: {},\n            c: {}\n        };\n        it('test on 1 non-existing key', function() {\n            f(o, 'd', 'ok 1');\n            test.assertEqual(o['d'], 'ok 1');\n        });\n        it('test on 1 existing key', function() {\n            f(o, 'd', 'ok 2');\n            test.assertEqual(o['d'], 'ok 2');\n        });\n        it('test on 2 non-existing keys', function() {\n            f(o, 'e.f', 'ok 1');\n            test.assertEqual(o['e']['f'], 'ok 1');\n        });\n        it('test on 2 existing keys', function() {\n            f(o, 'e.f', 'ok 2');\n            test.assertEqual(o['e']['f'], 'ok 2');\n        });\n        it('test on 3 non-existing keys', function() {\n            f(o, 'e.f.g', 'ok 1');\n            test.assertEqual(o['e']['f']['g'], 'ok 1');\n        });\n        it('test on 3 existing keys', function() {\n            f(o, 'e.f.g', 'ok 2');\n            test.assertEqual(o['e']['f']['g'], 'ok 2');\n        });\n        it('test prototype pollution', function() {\n            f(o, '__proto__.polluted', true);\n            test.assertUndefined(o['polluted']);\n            test.assertUndefined({}.polluted);\n        });\n    });\n    describe('length', function() {\n        var f = obj.length;\n        it('test empty object', function() {\n            var o1 = {};\n            var r = f(o1);\n            test.assertEqual(r, 0);\n        });\n        it('test simple object', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1);\n            test.assertEqual(r, 3);\n        });\n    });\n    describe('map', function() {\n        var f = obj.map;\n        it('test all items', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var keys = obj.keys(o1);\n            var values = obj.values(o1);\n            var r = f(o1, function(val, key, item){\n                test.assertTrue(item === o1);\n                test.assertTrue(keys.indexOf(key) !== -1);\n                test.assertTrue(values.indexOf(val) !== -1);\n            });\n        });\n        it('test result', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1, function(val, key, item){\n                return (val * 2);\n            });\n            test.assertEqual(r, { a:2, b:4, c:6 });\n        });\n    });\n    describe('merge', function() {\n        var f = obj.merge;\n        it('test same instance', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1, o1);\n            test.assertFalse(o1 === r);\n            test.assertEqual(r, { a:1, b:2, c:3 });\n        });\n        it('test diff instance', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var o2 = { d:4, e:5, f:6 };\n            var r = f(o1, o2);\n            test.assertTrue(o1 !== o2);\n            test.assertTrue(o1 !== r);\n            test.assertTrue(o2 !== r);\n            test.assertEqual(r, { a:1, b:2, c:3, d:4, e:5, f:6 });\n        });\n        it('test multiple instances', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var o2 = { d:4, e:5, f:6 };\n            var o3 = { g:7, h:8, i:9 };\n            var o4 = { a:0, e:0, i:0 };\n            var r = f(o1, o2, o3, o4);\n            test.assertEqual(r, { a:0, b:2, c:3, d:4, e:0, f:6, g:7, h:8, i:0 });\n        });\n        it('test props overwrite', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var o2 = { a:4, b:5, c:6 };\n            var r = f(o1, o2);\n            test.assertEqual(r, { a:4, b:5, c:6 });\n        });\n    });\n    describe('search', function() {\n        var f = obj.search;\n        it('test empty filter', function() {\n            var objs = [\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:1, b:2, c:null, d:'ok', e:false, f:true }\n            ];\n            var r = f(objs, {});\n            test.assertEqual(r, objs);\n        });\n        it('test simple filter result found', function() {\n            var objs = [\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:2, b:2, c:null, d:'ok', e:false, f:true },\n                { a:3, b:2, c:null, d:'ok', e:false, f:true },\n                { a:4, b:2, c:null, d:'ok', e:false, f:true }\n            ];\n            var r = f(objs, { a:3 });\n            test.assertEqual(r, [objs[2]]);\n        });\n        it('test simple filter result not found', function() {\n            var objs = [\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:2, b:2, c:null, d:'ok', e:false, f:true },\n                { a:3, b:2, c:null, d:'ok', e:false, f:true },\n                { a:4, b:2, c:null, d:'ok', e:false, f:true }\n            ];\n            var r = f(objs, { a:5 });\n            test.assertEqual(r, []);\n        });\n        it('test simple filter multiple result found', function() {\n            var objs = [\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:2, b:2, c:null, d:'ok', e:false, f:true },\n                { a:1, b:2, c:null, d:'ok', e:false, f:false },\n                { a:2, b:2, c:null, d:'ok', e:false, f:true },\n                { a:1, b:2, c:null, d:'ok', e:false, f:true },\n                { a:2, b:2, c:null, d:'ok', e:false, f:true }\n            ];\n            var r = f(objs, { a:1, f:true });\n            test.assertEqual(r, [objs[0], objs[4]]);\n        });\n    });\n    describe('values', function() {\n        var f = obj.values;\n        it('test no values', function() {\n            var o1 = {};\n            var r = f(o1);\n            test.assertEqual(r, []);\n        });\n        it('test values unsorted', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1);\n            test.assertTrue(r.indexOf(1) !== -1);\n            test.assertTrue(r.indexOf(2) !== -1);\n            test.assertTrue(r.indexOf(3) !== -1);\n        });\n        it('test values sorted', function() {\n            var o1 = { a:1, b:2, c:3 };\n            var r = f(o1, true);\n            test.assertEqual(r, [1, 2, 3]);\n        });\n    });\n});"], "filenames": ["src/utils/ObjectUtil.js", "test/test_object.js"], "buggy_code_start_loc": [219, 306], "buggy_code_end_loc": [219, 306], "fixing_code_start_loc": [220, 307], "fixing_code_end_loc": [223, 312], "type": "CWE-1321", "message": "utils.js is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')", "other": {"cve": {"id": "CVE-2021-3815", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-08T17:15:10.927", "lastModified": "2021-12-10T18:37:50.533", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "utils.js is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')"}, {"lang": "es", "value": "utils.js es vulnerable a una Modificaci\u00f3n Inapropiada de Atributos de Prototipos de Objetos (\"Prototype Pollution\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:L/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.5, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:utils.js_project:utils.js:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.17.2", "matchCriteriaId": "FE731848-13BF-4B59-89B3-3E0C997D562A"}]}]}], "references": [{"url": "https://github.com/fabiocaccamo/utils.js/commit/102efafb291ce1916985514440d3bf8a6826890a", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/20f48c63-f078-4173-bcac-a9f34885f2c0", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fabiocaccamo/utils.js/commit/102efafb291ce1916985514440d3bf8a6826890a"}}