{"buggy_code": ["<?php defined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Auth extends CS_Controller {\n\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\t\t$this->load->library('email');\n\t\t$this->load->helper('string');\n\t\t$this->templatemanager->popup(true); //hide sidebar, header, footer and notifications\n\n\t//\t$this->templatemanager->set_template_name(Setting::value('default_template', 'default'));\n\n\t}\n\n\tpublic function index()\n\t{\n\t\tredirect($this->loginmanager->login_url);\n\t}\n\n\tpublic function login()\n\t{\n\t\tif (!empty($this->user))\n\t\t\tredirect('administration/dashboard');\n\n        $cap = generate_captcha();\n        $this->templatemanager->assign('captcha', $cap['image']);\n\n\t\t$this->templatemanager->set_title(__(\"User authentication\"));\n\t\t$this->templatemanager->assign('goto', $this->loginmanager->get_redirect());\n\n\t\t$msg = $this->session->flashdata('auth_msg');\n\n\t\tif (!empty($msg))\n\t\t\t$this->templatemanager->notify($msg['text'], $msg['type'], $msg['title']);\n\n\t\t$this->templatemanager->load_template('auth_login');\n\t}\n\n\tpublic function logout()\n\t{\n\t\t$this->loginmanager->process_logout();\n\t\tredirect(site_url());\n\t}\n\n\tpublic function verify()\n\t{\n\t\t$usr = new User();\n\t\t$usr->email = $this->input->post('email', true);\n\t\t$usr->password = $this->input->post('password', true);\n\t\t$remember = (boolean)$this->input->post('remember', true);\n\n\t\t//var_dump($_POST);\n\t\t//die;\n\n\t\t$ok = $this->loginmanager->process_login($usr);\n\n\t\tif ($ok !== false)\n\t\t{\n\t\t\tif ($remember)\n\t\t\t\t$this->session->set_userdata('remember', $remember);\n\n\t\t\tLog::write('logged in', LogSeverity::Notice, $this->loginmanager->user->id);\n\n\t\t\tredirect($this->loginmanager->get_redirect());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$u = User::factory()->get_by_email($usr->email);\n\n\t\t\tif ($u->exists())\n\t\t\t\tLog::write('failed to login', LogSeverity::Notice, $u->id);\n\t\t\telse\n\t\t\t\tLog::write('failed to login', LogSeverity::Notice);\n\n\t\t\t$this->templatemanager->notify_next(__(\"You have entered wrong e-mail or password.\"), \"error\", __(\"Login Failed!\"));\n\t\t\tredirect($this->loginmanager->login_url);\n\t\t}\n\t}\n\n\tpublic function register()\n\t{\n        $cap = generate_captcha();\n        $this->templatemanager->assign('captcha', $cap['image']);\n\n\t\t$this->templatemanager->set_title(__(\"User registration\"));\n\t\t$this->templatemanager->show_template('auth_register');\n\t}\n\n\tpublic function apply()\n\t{\n\t\t//turned off\n\t\tdie;\n\t\tif (!check_captcha())\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"You have entered wrong security code.\"), \"error\", __(\"Error!\"));\n\t\t\tredirect(\"administration/auth/register\");\n\t\t\tdie;\n\t\t}\n\n\t\t$this->load->helper('email');\n\n\t\t//get all\n\t\t$name = trim($this->input->post(\"name\", true));\n\t\t$email = trim($this->input->post(\"email\", true));\n\t\t$pass = trim($this->input->post(\"password\", true));\n\t\t$pass2 = trim($this->input->post(\"password2\", true));\n\n\t\t//check if all present\n\t\tif (empty($name) || empty($email) || empty($pass) || empty($pass))\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"Please fill all fields so you can continue.\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/register\");\n\t\t}\n\n\t\tif (strlen($name) < 5)\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"Name must be longer than 4 characters!\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/register\");\n\t\t}\n\n\t\t//check e-mail validity\n\t\tif (!valid_email($email))\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"Entered e-mail address was not valid.\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/register\");\n\t\t}\n\n\t\t//check if passwords are the same\n\t\tif ($pass != $pass2)\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"Passwords differ.\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/register\");\n\t\t}\n\n\t\t//check user by email\n\t\t$user = User::factory()->get_by_email($email);\n\t\tif ($user->exists())\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"User with that e-mail address already exists.\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/register\");\n\t\t}\n\n\n\t\t//create user\n\t\t$newu = new User();\n\t\t$newu->name = $name;\n\t\t$newu->email = $email;\n\t\t$newu->password = $pass;\n\t\t$newu->key = random_string('unique');\n\n\t\t$role = Userrole::get_lowest();\n\n\t\t$newu->save($role);\n\n\t\t//set variables for template\n\t\t$vars = array(\n\t\t\t'name'=>$name\n\t\t\t,'email'=>$email\n\t\t\t,'password'=>$pass\n\t\t\t,'website_title'=>Setting::value('website_title', CS_PRODUCT_NAME)\n\t\t\t,'activation_link'=>site_url('administration/auth/activate/'.$newu->id.'/'.$newu->key)\n\t\t\t,'site_url'=>site_url()\n\t\t);\n\n\t\t//get email template\n\t\t$template = file_get_contents(APPPATH . \"templates/register.html\");\n\t\t$template = __($template, null, 'email');\n\t\t$template .= \"<br />\\n<br />\\n<br />\\n\" . __(file_get_contents(APPPATH . \"templates/signature.html\"), null, 'email');\n\t\t$template = parse_template($template, $vars);\n\n\t\t//send email\n\t\t$this->email->to(\"$name <$email>\");\n\t\t$this->email->subject(__(\"%s registration\", Setting::value('website_title', CS_PRODUCT_NAME), 'email'));\n\t\t$this->email->message($template);\n\t\t$this->email->set_alt_message(strip_tags($template));\n\n\t\t$from = Setting::value(\"default_email\", false);\n\n\t\tif (empty($from))\n\t\t\t$from = \"noreply@\".get_domain_name(true);\n\n\t\t$this->email->from($from);\n\n\t\t$sent = $this->email->send();\n\n\t\tif ($sent)\n\t\t\t$this->templatemanager->notify_next(__(\"Account created. Please check your e-mail.\"), \"notice\", __(\"Notice\"));\n\t\telse\n\t\t\t$this->templatemanager->notify_next(__(\"Activation e-mail could not be sent!\"), \"error\", __(\"Error\"));\n\n\t\tredirect(\"administration/auth/login\");\n\t}\n\n\tpublic function activate($id, $key)\n\t{\n\t\t$u = User::factory()->where('id', (int)$id)->where(\"key\", $key)->get();\n\n\t\tif ($u->exists())\n\t\t{\n\t\t\t$u->key = '';\n\t\t\t$u->active = 1;\n\t\t\t$u->save();\n\n\t\t\t$this->templatemanager->notify_next(__(\"Your account is now activated. Please log in.\"), \"success\", __(\"Success\"));\n\t\t\tredirect(\"administration/auth/login\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"Invalid key or user already activated.\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/login\");\n\t\t}\n\t}\n\n\tpublic function forgot()\n\t{\n        $cap = generate_captcha();\n        $this->templatemanager->assign('captcha', $cap['image']);\n\n\t\t//$this->templatemanager->notify(__(\"Enter e-mail address to reset password.\"), \"notice\", __(\"Notice\"));\n\t\t$this->templatemanager->set_title(__(\"Forgot password\"));\n\t\t$this->templatemanager->show_template('auth_forgot_password');\n\t}\n\n\tpublic function remind()\n\t{\n\t\t/*if (!check_captcha())\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"You have entered wrong security code.\"), \"error\", __(\"Error!\"));\n\t\t\tredirect(\"administration/auth/forgot\");\n\t\t\tdie;\n\t\t}//*/\n\n\t\t$email = trim($this->input->post(\"email\", true));\n\n\t\t$u = User::factory()->get_by_email($email);\n\n\t\tif (!$u->exists())\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"User with that e-mail does not exists!\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/forgot\");\n\t\t}\n\n\t\t$u->key = random_string('unique');\n\t\t$u->save();\n\n\t\tLog::write('requested password change', LogSeverity::Notice, $u->id);\n\n\t\t//set variables for template\n\t\t$vars = array(\n\t\t\t'name'=>$u->name\n\t\t\t,'email'=>$u->email\n\n\t\t\t,'website_title'=>Setting::value('website_title', CS_PRODUCT_NAME)\n\t\t\t,'reset_link'=>site_url('administration/auth/resetpass/'.$u->id.'/'.$u->key)\n\t\t\t,'site_url'=>site_url()\n\t\t);\n\n\t\t//get email template\n\t\t$template = file_get_contents(APPPATH . \"templates/forgot_password.html\");\n\t\t$template = __($template, null, 'email');\n\t\t$template .= \"<br />\\n<br />\\n<br />\\n\" . __(file_get_contents(APPPATH . \"templates/signature.html\"), null, 'email');\n\t\t$template = parse_template($template, $vars);\n\n\t\t//send email\n\t\t$this->email->to(\"$email\");\n\t\t$this->email->subject(__(\"%s password reset\", Setting::value('website_title', CS_PRODUCT_NAME), 'email'));\n\t\t$this->email->message($template);\n\t\t$this->email->set_alt_message(strip_tags($template));\n\n\t\t$from = Setting::value(\"default_email\", false);\n\n\t\tif (empty($from))\n\t\t\t$from = \"noreply@\".get_domain_name(true);\n\n\t\t$this->email->from($from);\n\n\t\t$sent = $this->email->send();\n\n\t\tif ($sent)\n\t\t\t$this->templatemanager->notify_next(__(\"Please check your e-mail for further information.\"), \"notice\", __(\"Notice\"));\n\t\telse\n\t\t\t$this->templatemanager->notify_next(__(\"Activation e-mail could not be sent!\"), \"error\", __(\"Error\"));\n\n\t\tredirect(\"administration/auth/login\");\n\t}\n\n\tpublic function resetpass($id, $key)\n\t{\n\t\t$u = User::factory()->where('id', (int)$id)->where(\"key\", $key)->get();\n\n\t\tif ($u->exists())\n\t\t{\n\t\t\t$u->key = '';\n\t\t\t$u->active = 1;\n\t\t\t$u->salt = '';\n\t\t\t$p = random_string();\n\t\t\t$u->password = $p;\n\t\t\t$u->save();\n\n\t\t\t//set variables for template\n\t\t\t$vars = array(\n\t\t\t\t'name'=>$u->name\n\t\t\t\t,'email'=>$u->email\n\t\t\t\t,'password'=>$p\n\n\t\t\t\t,'website_title'=>Setting::value('website_title', CS_PRODUCT_NAME)\n\t\t\t\t,'site_url'=>site_url()\n\t\t\t);\n\n\t\t\t//get email template\n\t\t\t$template = file_get_contents(APPPATH . \"templates/new_password.html\");\n\t\t\t$template = __($template, null, 'email');\n\t\t\t$template .= \"<br />\\n<br />\\n<br />\\n\" . __(file_get_contents(APPPATH . \"templates/signature.html\"), null, 'email');\n\t\t\t$template = parse_template($template, $vars);\n\n\t\t\t//send email\n\t\t\t$this->email->to(\"{$u->name} <{$u->email}>\");\n\t\t\t$this->email->subject(__(\"%s password reset\", Setting::value('website_title', CS_PRODUCT_NAME), 'email'));\n\t\t\t$this->email->message($template);\n\t\t\t$this->email->set_alt_message(strip_tags($template));\n\n\t\t\t$from = Setting::value(\"default_email\", false);\n\n\t\t\tif (empty($from))\n\t\t\t\t$from = \"noreply@\".get_domain_name(true);\n\n\t\t\t$this->email->from($from);\n\n\t\t\t$sent = $this->email->send();\n\n\t\t\tif ($sent)\n\t\t\t\t$this->templatemanager->notify_next(__(\"New password is set. Please check your e-mail.\"), \"success\", __(\"Success\"));\n\t\t\telse\n\t\t\t\t$this->templatemanager->notify_next(__(\"E-mail could not be sent!\"), \"error\", __(\"Error\"));\n\n\t\t}\n\t\telse\n\t\t\t$this->templatemanager->notify_next(__(\"Invalid key or password already reset.\"), \"error\", __(\"Error\"));\n\n\t\tredirect(\"administration/auth/login\");\n\n\t}\n\n}\n\n?>"], "fixing_code": ["<?php defined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Auth extends CS_Controller {\n\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\t\t$this->load->library('email');\n\t\t$this->load->helper('string');\n\t\t$this->templatemanager->popup(true); //hide sidebar, header, footer and notifications\n\n\t//\t$this->templatemanager->set_template_name(Setting::value('default_template', 'default'));\n\n\t}\n\n\tpublic function index()\n\t{\n\t\tredirect($this->loginmanager->login_url);\n\t}\n\n\tpublic function login()\n\t{\n\t\tif (!empty($this->user))\n\t\t\tredirect('administration/dashboard');\n\n        $cap = generate_captcha();\n        $this->templatemanager->assign('captcha', $cap['image']);\n\n\t\t$this->templatemanager->set_title(__(\"User authentication\"));\n\t\t$this->templatemanager->assign('goto', $this->loginmanager->get_redirect());\n\n\t\t$msg = $this->session->flashdata('auth_msg');\n\n\t\tif (!empty($msg))\n\t\t\t$this->templatemanager->notify($msg['text'], $msg['type'], $msg['title']);\n\n\t\t$this->templatemanager->load_template('auth_login');\n\t}\n\n\tpublic function logout()\n\t{\n\t\t$this->loginmanager->process_logout();\n\t\tredirect(site_url());\n\t}\n\n\tpublic function verify()\n\t{\n\t\t$usr = new User();\n\t\t$usr->email = $this->input->post('email', true);\n\t\t$usr->password = $this->input->post('password', true);\n\t\t$remember = (boolean)$this->input->post('remember', true);\n\n\t\t//var_dump($_POST);\n\t\t//die;\n\n\t\t$ok = $this->loginmanager->process_login($usr);\n\n\t\tif ($ok !== false)\n\t\t{\n\t\t\tif ($remember)\n\t\t\t\t$this->session->set_userdata('remember', $remember);\n\n\t\t\tLog::write('logged in', LogSeverity::Notice, $this->loginmanager->user->id);\n\n\t\t\tredirect($this->loginmanager->get_redirect());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$u = User::factory()->get_by_email($usr->email);\n\n\t\t\tif ($u->exists())\n\t\t\t\tLog::write('failed to login', LogSeverity::Notice, $u->id);\n\t\t\telse\n\t\t\t\tLog::write('failed to login', LogSeverity::Notice);\n\n\t\t\t$this->templatemanager->notify_next(__(\"You have entered wrong e-mail or password.\"), \"error\", __(\"Login Failed!\"));\n\t\t\tredirect($this->loginmanager->login_url);\n\t\t}\n\t}\n\n\tpublic function register()\n\t{\n        $cap = generate_captcha();\n        $this->templatemanager->assign('captcha', $cap['image']);\n\n\t\t$this->templatemanager->set_title(__(\"User registration\"));\n\t\t$this->templatemanager->show_template('auth_register');\n\t}\n\n\tpublic function apply()\n\t{\n\t\t//turned off\n\t\tdie;\n\t\tif (!check_captcha())\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"You have entered wrong security code.\"), \"error\", __(\"Error!\"));\n\t\t\tredirect(\"administration/auth/register\");\n\t\t\tdie;\n\t\t}\n\n\t\t$this->load->helper('email');\n\n\t\t//get all\n\t\t$name = trim($this->input->post(\"name\", true));\n\t\t$email = trim($this->input->post(\"email\", true));\n\t\t$pass = trim($this->input->post(\"password\", true));\n\t\t$pass2 = trim($this->input->post(\"password2\", true));\n\n\t\t//check if all present\n\t\tif (empty($name) || empty($email) || empty($pass) || empty($pass))\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"Please fill all fields so you can continue.\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/register\");\n\t\t}\n\n\t\tif (strlen($name) < 5)\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"Name must be longer than 4 characters!\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/register\");\n\t\t}\n\n\t\t//check e-mail validity\n\t\tif (!valid_email($email))\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"Entered e-mail address was not valid.\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/register\");\n\t\t}\n\n\t\t//check if passwords are the same\n\t\tif ($pass != $pass2)\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"Passwords differ.\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/register\");\n\t\t}\n\n\t\t//check user by email\n\t\t$user = User::factory()->get_by_email($email);\n\t\tif ($user->exists())\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"User with that e-mail address already exists.\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/register\");\n\t\t}\n\n\n\t\t//create user\n\t\t$newu = new User();\n\t\t$newu->name = $name;\n\t\t$newu->email = $email;\n\t\t$newu->password = $pass;\n\t\t$newu->key = random_string('unique');\n\n\t\t$role = Userrole::get_lowest();\n\n\t\t$newu->save($role);\n\n\t\t//set variables for template\n\t\t$vars = array(\n\t\t\t'name'=>$name\n\t\t\t,'email'=>$email\n\t\t\t,'password'=>$pass\n\t\t\t,'website_title'=>Setting::value('website_title', CS_PRODUCT_NAME)\n\t\t\t,'activation_link'=>site_url('administration/auth/activate/'.$newu->id.'/'.$newu->key)\n\t\t\t,'site_url'=>site_url()\n\t\t);\n\n\t\t//get email template\n\t\t$template = file_get_contents(APPPATH . \"templates/register.html\");\n\t\t$template = __($template, null, 'email');\n\t\t$template .= \"<br />\\n<br />\\n<br />\\n\" . __(file_get_contents(APPPATH . \"templates/signature.html\"), null, 'email');\n\t\t$template = parse_template($template, $vars);\n\n\t\t//send email\n\t\t$this->email->to(\"$name <$email>\");\n\t\t$this->email->subject(__(\"%s registration\", Setting::value('website_title', CS_PRODUCT_NAME), 'email'));\n\t\t$this->email->message($template);\n\t\t$this->email->set_alt_message(strip_tags($template));\n\n\t\t$from = Setting::value(\"default_email\", false);\n\n\t\tif (empty($from))\n\t\t\t$from = \"noreply@\".get_domain_name(true);\n\n\t\t$this->email->from($from);\n\n\t\t$sent = $this->email->send();\n\n\t\tif ($sent)\n\t\t\t$this->templatemanager->notify_next(__(\"Account created. Please check your e-mail.\"), \"notice\", __(\"Notice\"));\n\t\telse\n\t\t\t$this->templatemanager->notify_next(__(\"Activation e-mail could not be sent!\"), \"error\", __(\"Error\"));\n\n\t\tredirect(\"administration/auth/login\");\n\t}\n\n\tpublic function activate($id, $key)\n\t{\n\t\t$u = User::factory()->where('id', (int)$id)->where(\"key\", $key)->get();\n\n\t\tif ($u->exists())\n\t\t{\n\t\t\t$u->key = '';\n\t\t\t$u->active = 1;\n\t\t\t$u->save();\n\n\t\t\t$this->templatemanager->notify_next(__(\"Your account is now activated. Please log in.\"), \"success\", __(\"Success\"));\n\t\t\tredirect(\"administration/auth/login\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"Invalid key or user already activated.\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/login\");\n\t\t}\n\t}\n\n\tpublic function forgot()\n\t{\n        $cap = generate_captcha();\n        $this->templatemanager->assign('captcha', $cap['image']);\n\n\t\t//$this->templatemanager->notify(__(\"Enter e-mail address to reset password.\"), \"notice\", __(\"Notice\"));\n\t\t$this->templatemanager->set_title(__(\"Forgot password\"));\n\t\t$this->templatemanager->show_template('auth_forgot_password');\n\t}\n\n\tpublic function remind()\n\t{\n\t\t/*if (!check_captcha())\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"You have entered wrong security code.\"), \"error\", __(\"Error!\"));\n\t\t\tredirect(\"administration/auth/forgot\");\n\t\t\tdie;\n\t\t}//*/\n\n\t\t$email = trim($this->input->post(\"email\", true));\n\n\t\t$u = User::factory()->get_by_email($email);\n\n\t\tif (!$u->exists())\n\t\t{\n\t\t\t$this->templatemanager->notify_next(__(\"User with that e-mail does not exists!\"), \"error\", __(\"Error\"));\n\t\t\tredirect(\"administration/auth/forgot\");\n\t\t}\n\n\t\t$u->key = random_string('unique');\n\t\t$u->save();\n\n\t\tLog::write('requested password change', LogSeverity::Notice, $u->id);\n\n\t\t//set variables for template\n\t\t$vars = array(\n\t\t\t'name'=>$u->name\n\t\t\t,'email'=>$u->email\n\n\t\t\t,'website_title'=>Setting::value('website_title', CS_PRODUCT_NAME)\n\t\t\t,'reset_link'=>site_url('administration/auth/resetpass/'.$u->id.'/'.$u->key)\n\t\t\t,'site_url'=>site_url()\n\t\t);\n\n\t\t//get email template\n\t\t$template = file_get_contents(APPPATH . \"templates/forgot_password.html\");\n\t\t$template = __($template, null, 'email');\n\t\t$template .= \"<br />\\n<br />\\n<br />\\n\" . __(file_get_contents(APPPATH . \"templates/signature.html\"), null, 'email');\n\t\t$template = parse_template($template, $vars);\n\n\t\t//send email\n\t\t$this->email->to($u->email);\n\t\t$this->email->subject(__(\"%s password reset\", Setting::value('website_title', CS_PRODUCT_NAME), 'email'));\n\t\t$this->email->message($template);\n\t\t$this->email->set_alt_message(strip_tags($template));\n\n\t\t$from = Setting::value(\"default_email\", false);\n\n\t\tif (empty($from))\n\t\t\t$from = \"noreply@\".get_domain_name(true);\n\n\t\t$this->email->from($from);\n\n\t\t$sent = $this->email->send();\n\n\t\tif ($sent)\n\t\t\t$this->templatemanager->notify_next(__(\"Please check your e-mail for further information.\"), \"notice\", __(\"Notice\"));\n\t\telse\n\t\t\t$this->templatemanager->notify_next(__(\"Activation e-mail could not be sent!\"), \"error\", __(\"Error\"));\n\n\t\tredirect(\"administration/auth/login\");\n\t}\n\n\tpublic function resetpass($id, $key)\n\t{\n\t\t$u = User::factory()->where('id', (int)$id)->where(\"key\", $key)->get();\n\n\t\tif ($u->exists())\n\t\t{\n\t\t\t$u->key = '';\n\t\t\t$u->active = 1;\n\t\t\t$u->salt = '';\n\t\t\t$p = random_string();\n\t\t\t$u->password = $p;\n\t\t\t$u->save();\n\n\t\t\t//set variables for template\n\t\t\t$vars = array(\n\t\t\t\t'name'=>$u->name\n\t\t\t\t,'email'=>$u->email\n\t\t\t\t,'password'=>$p\n\n\t\t\t\t,'website_title'=>Setting::value('website_title', CS_PRODUCT_NAME)\n\t\t\t\t,'site_url'=>site_url()\n\t\t\t);\n\n\t\t\t//get email template\n\t\t\t$template = file_get_contents(APPPATH . \"templates/new_password.html\");\n\t\t\t$template = __($template, null, 'email');\n\t\t\t$template .= \"<br />\\n<br />\\n<br />\\n\" . __(file_get_contents(APPPATH . \"templates/signature.html\"), null, 'email');\n\t\t\t$template = parse_template($template, $vars);\n\n\t\t\t//send email\n\t\t\t$this->email->to(\"{$u->name} <{$u->email}>\");\n\t\t\t$this->email->subject(__(\"%s password reset\", Setting::value('website_title', CS_PRODUCT_NAME), 'email'));\n\t\t\t$this->email->message($template);\n\t\t\t$this->email->set_alt_message(strip_tags($template));\n\n\t\t\t$from = Setting::value(\"default_email\", false);\n\n\t\t\tif (empty($from))\n\t\t\t\t$from = \"noreply@\".get_domain_name(true);\n\n\t\t\t$this->email->from($from);\n\n\t\t\t$sent = $this->email->send();\n\n\t\t\tif ($sent)\n\t\t\t\t$this->templatemanager->notify_next(__(\"New password is set. Please check your e-mail.\"), \"success\", __(\"Success\"));\n\t\t\telse\n\t\t\t\t$this->templatemanager->notify_next(__(\"E-mail could not be sent!\"), \"error\", __(\"Error\"));\n\n\t\t}\n\t\telse\n\t\t\t$this->templatemanager->notify_next(__(\"Invalid key or password already reset.\"), \"error\", __(\"Error\"));\n\n\t\tredirect(\"administration/auth/login\");\n\n\t}\n\n}\n\n?>\n"], "filenames": ["iu-application/controllers/administration/auth.php"], "buggy_code_start_loc": [266], "buggy_code_end_loc": [348], "fixing_code_start_loc": [266], "fixing_code_end_loc": [348], "type": "CWE-640", "message": "Instant Update CMS contains a Password Reset Vulnerability vulnerability in /iu-application/controllers/administration/auth.php that can result in Account Tackover. This attack appear to be exploitable via network connectivity. This vulnerability appears to have been fixed in v0.3.3.", "other": {"cve": {"id": "CVE-2018-1000501", "sourceIdentifier": "cve@mitre.org", "published": "2018-06-26T16:29:00.413", "lastModified": "2018-08-30T17:29:44.617", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Instant Update CMS contains a Password Reset Vulnerability vulnerability in /iu-application/controllers/administration/auth.php that can result in Account Tackover. This attack appear to be exploitable via network connectivity. This vulnerability appears to have been fixed in v0.3.3."}, {"lang": "es", "value": "Instant Update CMS contiene una vulnerabilidad de restablecimiento de contrase\u00f1a en /iu-application/controllers/administration/auth.php que puede resultar en la toma de control de la cuenta. Este ataque parece ser explotable mediante conectividad de red. La vulnerabilidad parece haber sido solucionada en la versi\u00f3n v0.3.3."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-640"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:instant-update:instant_update_cms:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.3.3", "matchCriteriaId": "8908BBE9-0D39-4C7D-9F63-ED04B8131EBB"}]}]}], "references": [{"url": "http://my.instant-update.com/t/i-wanna-to-report-an-security-issue/659/3", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/InstantUpdate/CMS/commit/5e70496b6b0c4cd554e62a709a248c1584533da6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/InstantUpdate/CMS/commit/5e70496b6b0c4cd554e62a709a248c1584533da6"}}