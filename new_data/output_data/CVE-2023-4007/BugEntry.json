{"buggy_code": ["<?php\n\n/**\n * Link management\n *\n * This class wrap the needs for managing an HTML anchor\n * taking into account also the HTML anchor creation\n * with specific handling for mod_rewrite PMF native support\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2005-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-11-02\n */\n\nnamespace phpMyFAQ;\n\n/**\n * Class Link\n *\n * @package phpMyFAQ\n */\nclass Link\n{\n    /** Class constants. */\n    private const LINK_AMPERSAND = '&amp;';\n    private const LINK_CATEGORY = 'category/';\n    private const LINK_CONTENT = 'content/';\n    private const LINK_EQUAL = '=';\n    private const LINK_FRAGMENT_SEPARATOR = '#';\n    private const LINK_HTML_MINUS = '-';\n    private const LINK_HTML_UNDERSCORE = '_';\n    private const LINK_HTML_SLASH = '/';\n    private const LINK_HTML_TARGET_BLANK = '_blank';\n    private const LINK_HTML_TARGET_PARENT = '_parent';\n    private const LINK_HTML_TARGET_SELF = '_self';\n    private const LINK_HTML_TARGET_TOP = '_top';\n    private const LINK_NEWS = 'news/';\n    private const LINK_SITEMAP = 'sitemap/';\n    private const LINK_SLASH = '/';\n    private const LINK_SEARCHPART_SEPARATOR = '?';\n    private const LINK_TAGS = 'tags/';\n\n    private const LINK_INDEX_ADMIN = '/admin/index.php';\n    private const LINK_INDEX_HOME = '/index.php';\n\n    private const LINK_GET_ACTION = 'action';\n    private const LINK_GET_ARTLANG = 'artlang';\n    private const LINK_GET_CATEGORY = 'cat';\n    private const LINK_GET_HIGHLIGHT = 'highlight';\n    private const LINK_GET_ID = 'id';\n    private const LINK_GET_LANG = 'lang';\n    private const LINK_GET_LETTER = 'letter';\n    private const LINK_GET_NEWS_ID = 'newsid';\n    private const LINK_GET_NEWS_LANG = 'newslang';\n    private const LINK_GET_PAGE = 'seite';\n    private const LINK_GET_SIDS = 'sid';\n    private const LINK_GET_TAGGING_ID = 'tagging_id';\n    private const LINK_GET_LANGS = 'langs';\n\n    private const LINK_GET_ACTION_ADD = 'add';\n    private const LINK_GET_ACTION_FAQ = 'faq';\n    private const LINK_GET_ACTION_ASK = 'ask';\n    private const LINK_GET_ACTION_CONTACT = 'contact';\n    private const LINK_GET_ACTION_GLOSSARY = 'glossary';\n    private const LINK_GET_ACTION_HELP = 'help';\n    private const LINK_GET_ACTION_LOGIN = 'login';\n    private const LINK_GET_ACTION_NEWS = 'news';\n    private const LINK_GET_ACTION_OPEN = 'open-questions';\n    private const LINK_GET_ACTION_PASSWORD = 'password';\n    private const LINK_GET_ACTION_REGISTER = 'register';\n    private const LINK_GET_ACTION_SEARCH = 'search';\n    private const LINK_GET_ACTION_SITEMAP = 'sitemap';\n    private const LINK_GET_ACTION_SHOW = 'show';\n\n    private const LINK_HTML_CATEGORY = 'category';\n    private const LINK_HTML_EXTENSION = '.html';\n    private const LINK_HTML_SITEMAP = 'sitemap';\n\n    private const LINK_HTML_ADDCONTENT = 'addcontent.html';\n    private const LINK_HTML_ASK = 'ask.html';\n    private const LINK_HTML_CONTACT = 'contact.html';\n    private const LINK_HTML_GLOSSARY = 'glossary.html';\n    private const LINK_HTML_HELP = 'help.html';\n    private const LINK_HTML_LOGIN = 'login.html';\n    private const LINK_HTML_OPEN = 'open-questions.html';\n    private const LINK_HTML_PASSWORD = 'password.html';\n    private const LINK_HTML_REGISTER = 'register.html';\n    private const LINK_HTML_SEARCH = 'search.html';\n    private const LINK_HTML_SHOWCAT = 'showcat.html';\n\n    /**\n     * @var int[] List of allowed action parameters\n     */\n    public static $allowedActionParameters = [\n        'add' => 1,\n        'faq' => 1,\n        'artikel' => 1,\n        'ask' => 1,\n        'attachment' => 1,\n        'contact' => 1,\n        'glossary' => 1,\n        'help' => 1,\n        'login' => 1,\n        'mailsend2friend' => 1,\n        'news' => 1,\n        'open-questions' => 1,\n        'overview' => 1,\n        'password' => 1,\n        'register' => 1,\n        'request-removal' => 1,\n        'save' => 1,\n        'savecomment' => 1,\n        'savequestion' => 1,\n        'savevoting' => 1,\n        'search' => 1,\n        'send2friend' => 1,\n        'sendmail' => 1,\n        'show' => 1,\n        'sitemap' => 1,\n        'thankyou' => 1,\n        'translate' => 1,\n        'ucp' => 1,\n        'writecomment' => 1,\n        '404' => 1\n    ];\n\n    /**\n     * URL.\n     *\n     * @var string\n     */\n    public string $url = '';\n\n    /**\n     * CSS class.\n     *\n     * @var string\n     */\n    public string $class = '';\n\n    /**\n     * Linktext.\n     *\n     * @var string\n     */\n    public string $text = '';\n\n    /**\n     * Tooltip.\n     *\n     * @var string|null\n     */\n    public $tooltip = '';\n\n    /**\n     * Target.\n     *\n     * @var string\n     */\n    public string $target = '';\n\n    /**\n     * Name selector.\n     *\n     * @var string\n     */\n    public string $name = '';\n\n    /**\n     * property specific to the SEO/SEF URLs.\n     *\n     * @var string\n     */\n    public string $itemTitle = '';\n\n    /**\n     * id selector.\n     *\n     * @var string\n     */\n    public string $id = '';\n\n    /**\n     * rel property.\n     *\n     * @var string\n     */\n\n    protected string $rel = '';\n\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * Constructor.\n     *\n     * @param string $url URL\n     * @param Configuration $config\n     */\n    public function __construct(string $url, Configuration $config)\n    {\n        $this->url = $url;\n        $this->config = $config;\n    }\n\n    /**\n     * @param string $rel rel property\n     */\n    public function setRelation(string $rel): void\n    {\n        $this->rel = $rel;\n    }\n\n    /**\n     * Returns the system URI.\n     * $_SERVER['HTTP_HOST'] is the name of the website or virtual host name (HTTP/1.1)\n     * Precisely, it contains what the user has written in the Host request-header, see below.\n     * RFC 2616: The Host request-header field specifies the Internet host and port number of the resource\n     *           being requested, as obtained from the original URI given by the user or referring resource\n     *\n     * @param string|null $path\n     * @return string\n     */\n    public function getSystemUri(string $path = null): string\n    {\n        // Remove any ref to standard ports 80 and 443.\n        $pattern[0] = '/:80$/'; // HTTP: port 80\n        $pattern[1] = '/:443$/'; // HTTPS: port 443\n        $sysUri = $this->getSystemScheme() . preg_replace($pattern, '', $_SERVER['HTTP_HOST']);\n\n        return $sysUri . self::getSystemRelativeUri($path);\n    }\n\n    /**\n     * Returns the system scheme, http or https.\n     *\n     * @return string\n     */\n    public function getSystemScheme(): string\n    {\n        if ($this->config->get('security.useSslOnly')) {\n            return 'https://';\n        }\n\n        if (!self::isIISServer()) {\n            // Apache, nginx, lighttpd\n            if (isset($_SERVER['HTTPS']) && 'on' === strtolower($_SERVER['HTTPS'])) {\n                return 'https://';\n            } else {\n                return 'http://';\n            }\n        } else {\n            // IIS Server\n            if ('on' === strtolower($_SERVER['HTTPS'])) {\n                return 'https://';\n            } else {\n                return 'http://';\n            }\n        }\n    }\n\n    /**\n     * Checks if webserver is an IIS Server.\n     *\n     * @return bool\n     */\n    public static function isIISServer(): bool\n    {\n        return (isset($_SERVER['ALL_HTTP']) || isset($_SERVER['COMPUTERNAME']) || isset($_SERVER['APP_POOL_ID']));\n    }\n\n    /**\n     * Returns the relative URI.\n     *\n     * @param string|null $path\n     * @return string\n     */\n    public static function getSystemRelativeUri(string $path = null): string\n    {\n        if (isset($path)) {\n            return str_replace($path, '', $_SERVER['SCRIPT_NAME']);\n        }\n\n        return str_replace('/src/Link.php', '', $_SERVER['SCRIPT_NAME']);\n    }\n\n    /**\n     * Builds an HTML anchor.\n     *\n     * @return string\n     */\n    public function toHtmlAnchor(): string\n    {\n        // Sanitize the provided url\n        $url = $this->toString();\n        // Prepare HTML anchor element\n        $htmlAnchor = '<a';\n\n        if (!empty($this->class)) {\n            $htmlAnchor .= sprintf(' class=\"%s\"', $this->class);\n        }\n\n        if (!empty($this->id)) {\n            $htmlAnchor .= ' id=\"' . $this->id . '\"';\n        }\n\n        if (!empty($this->tooltip)) {\n            $htmlAnchor .= sprintf(' title=\"%s\"', addslashes($this->tooltip));\n        }\n\n        if (!empty($this->name)) {\n            $htmlAnchor .= sprintf(' name=\"%s\"', $this->name);\n        } else {\n            if (!empty($this->url)) {\n                $htmlAnchor .= sprintf(' href=\"%s\"', $url);\n            }\n            if (!empty($this->target)) {\n                $htmlAnchor .= sprintf(' target=\"%s\"', $this->target);\n            }\n        }\n        if (!empty($this->rel)) {\n            $htmlAnchor .= sprintf(' rel=\"%s\"', $this->rel);\n        }\n        $htmlAnchor .= '>';\n        if (('0' == $this->text) || (!empty($this->text))) {\n            $htmlAnchor .= $this->text;\n        } else {\n            if (!empty($this->name)) {\n                $htmlAnchor .= $this->name;\n            } else {\n                $htmlAnchor .= $url;\n            }\n        }\n        $htmlAnchor .= '</a>';\n\n        return $htmlAnchor;\n    }\n\n    /**\n     * Rewrites a URL string. Checks mod_rewrite support and 'rewrite'\n     * the passed (system) uri according to the rewrite rules written\n     * in .htaccess\n     *\n     * @param bool $removeSessionFromUrl Remove session from URL\n     * @return string\n     */\n    public function toString(bool $removeSessionFromUrl = false): string\n    {\n        $url = $this->toUri();\n\n        if ($this->config->get('main.enableRewriteRules')) {\n            if ($this->isHomeIndex()) {\n                $getParams = $this->getHttpGetParameters();\n                if (isset($getParams[self::LINK_GET_ACTION])) {\n                    // Get the part of the url 'till the '/' just before the pattern\n                    $url = substr($url, 0, strpos($url, self::LINK_INDEX_HOME) + 1);\n\n                    // Build the Url according to .htaccess rules\n                    switch ($getParams[self::LINK_GET_ACTION]) {\n                        case self::LINK_GET_ACTION_ADD:\n                            $url .= self::LINK_HTML_ADDCONTENT;\n                            break;\n\n                        case self::LINK_GET_ACTION_FAQ:\n                            $url .= self::LINK_CONTENT .\n                                $getParams[self::LINK_GET_CATEGORY] .\n                                self::LINK_HTML_SLASH .\n                                $getParams[self::LINK_GET_ID] .\n                                self::LINK_HTML_SLASH .\n                                $getParams[self::LINK_GET_ARTLANG] .\n                                self::LINK_SLASH .\n                                $this->getSEOItemTitle() .\n                                self::LINK_HTML_EXTENSION;\n                            if (isset($getParams[self::LINK_GET_HIGHLIGHT])) {\n                                $url .= self::LINK_SEARCHPART_SEPARATOR .\n                                    self::LINK_GET_HIGHLIGHT . '=' .\n                                    $getParams[self::LINK_GET_HIGHLIGHT];\n                            }\n                            if (isset($getParams[self::LINK_FRAGMENT_SEPARATOR])) {\n                                $url .= self::LINK_FRAGMENT_SEPARATOR .\n                                    $getParams[self::LINK_FRAGMENT_SEPARATOR];\n                            }\n                            break;\n\n                        case self::LINK_GET_ACTION_ASK:\n                            $url .= self::LINK_HTML_ASK;\n                            break;\n\n                        case self::LINK_GET_ACTION_CONTACT:\n                            $url .= self::LINK_HTML_CONTACT;\n                            break;\n\n                        case self::LINK_GET_ACTION_GLOSSARY:\n                            $url .= self::LINK_HTML_GLOSSARY;\n                            break;\n\n                        case self::LINK_GET_ACTION_HELP:\n                            $url .= self::LINK_HTML_HELP;\n                            break;\n\n                        case self::LINK_GET_ACTION_OPEN:\n                            $url .= self::LINK_HTML_OPEN;\n                            break;\n\n                        case self::LINK_GET_ACTION_LOGIN:\n                            $url .= self::LINK_HTML_LOGIN;\n                            break;\n\n                        case self::LINK_GET_ACTION_SEARCH:\n                            if (\n                                !isset($getParams[self::LINK_GET_ACTION_SEARCH])\n                                && isset($getParams[self::LINK_GET_TAGGING_ID])\n                            ) {\n                                $url .= self::LINK_TAGS . $getParams[self::LINK_GET_TAGGING_ID];\n                                if (isset($getParams[self::LINK_GET_PAGE])) {\n                                    $url .= self::LINK_HTML_SLASH . $getParams[self::LINK_GET_PAGE];\n                                }\n                                $url .= self::LINK_SLASH .\n                                    $this->getSEOItemTitle() .\n                                    self::LINK_HTML_EXTENSION;\n                            } elseif (isset($getParams[self::LINK_GET_ACTION_SEARCH])) {\n                                $url .= self::LINK_HTML_SEARCH;\n                                $url .= self::LINK_SEARCHPART_SEPARATOR .\n                                    self::LINK_GET_ACTION_SEARCH . '=' .\n                                    $getParams[self::LINK_GET_ACTION_SEARCH];\n                                if (isset($getParams[self::LINK_GET_PAGE])) {\n                                    $url .= self::LINK_AMPERSAND . self::LINK_GET_PAGE . '=' .\n                                        $getParams[self::LINK_GET_PAGE];\n                                }\n                            }\n                            if (isset($getParams[self::LINK_GET_LANGS])) {\n                                $url .= self::LINK_AMPERSAND .\n                                    self::LINK_GET_LANGS . '=' .\n                                    $getParams[self::LINK_GET_LANGS];\n                            }\n                            break;\n\n                        case self::LINK_GET_ACTION_SITEMAP:\n                            if (isset($getParams[self::LINK_GET_LETTER])) {\n                                $url .= self::LINK_SITEMAP .\n                                    $getParams[self::LINK_GET_LETTER] .\n                                    self::LINK_HTML_SLASH .\n                                    $getParams[self::LINK_GET_LANG] .\n                                    self::LINK_HTML_EXTENSION;\n                            } else {\n                                $url .= self::LINK_SITEMAP . 'A' .\n                                    self::LINK_HTML_SLASH .\n                                    $getParams[self::LINK_GET_LANG] .\n                                    self::LINK_HTML_EXTENSION;\n                            }\n                            break;\n\n                        case self::LINK_GET_ACTION_SHOW:\n                            if (\n                                !isset($getParams[self::LINK_GET_CATEGORY])\n                                || (isset($getParams[self::LINK_GET_CATEGORY])\n                                    && (0 == $getParams[self::LINK_GET_CATEGORY]))\n                            ) {\n                                $url .= self::LINK_HTML_SHOWCAT;\n                            } else {\n                                $url .= self::LINK_CATEGORY .\n                                    $getParams[self::LINK_GET_CATEGORY];\n                                if (isset($getParams[self::LINK_GET_PAGE])) {\n                                    $url .= self::LINK_HTML_SLASH .\n                                        $getParams[self::LINK_GET_PAGE];\n                                }\n                                $url .= self::LINK_HTML_SLASH .\n                                    $this->getSEOItemTitle() .\n                                    self::LINK_HTML_EXTENSION;\n                            }\n                            break;\n\n                        case self::LINK_GET_ACTION_NEWS:\n                            $url .= self::LINK_NEWS .\n                                $getParams[self::LINK_GET_NEWS_ID] .\n                                self::LINK_HTML_SLASH .\n                                $getParams[self::LINK_GET_NEWS_LANG] .\n                                self::LINK_SLASH .\n                                $this->getSEOItemTitle() .\n                                self::LINK_HTML_EXTENSION;\n                            break;\n                    }\n\n                    if (isset($getParams[self::LINK_GET_SIDS])) {\n                        $url = $this->appendSids($url, $getParams[self::LINK_GET_SIDS]);\n                    }\n\n                    if (isset($getParams['fragment'])) {\n                        $url .= self::LINK_FRAGMENT_SEPARATOR . $getParams['fragment'];\n                    }\n\n                    if ($removeSessionFromUrl) {\n                        $url = strtok($url, '?');\n                    }\n                }\n            }\n        } else {\n            if ($removeSessionFromUrl) {\n                $getParams = $this->getHttpGetParameters();\n                if (isset($getParams[self::LINK_GET_ACTION])) {\n                    $url = substr($url, 0, strpos($url, self::LINK_INDEX_HOME) + 1) . 'index.php?';\n                    foreach ($getParams as $key => $value) {\n                        if ($key !== self::LINK_GET_SIDS) {\n                            $url .= sprintf('%s=%s&', $key, $value);\n                        }\n                    }\n                    $url = substr($url, 0, -1); // Remove last &\n                }\n            }\n        }\n\n        return $url;\n    }\n\n    /**\n     * Transforms a URI.\n     *\n     * @return string\n     */\n    public function toUri(): string\n    {\n        $url = $this->url;\n        if (!empty($this->url)) {\n            if ((!$this->hasScheme()) && (!$this->isInternalReference())) {\n                $url = $this->getDefaultScheme() . $this->url;\n            }\n        }\n\n        return $url;\n    }\n\n    /**\n     * Checks if URL contains a scheme.\n     *\n     * @return bool\n     */\n    private function hasScheme(): bool\n    {\n        $parsed = parse_url($this->url);\n\n        return (!empty($parsed['scheme']));\n    }\n\n    /**\n     * Checks if URL is an internal reference.\n     *\n     * @return bool\n     */\n    protected function isInternalReference(): bool\n    {\n        if ($this->isRelativeSystemLink()) {\n            return true;\n        }\n        if (false === strpos($this->url, '#')) {\n            return false;\n        }\n\n        return (strpos($this->url, '#') == 0);\n    }\n\n    /**\n     * Checks if URL is a relative system link.\n     *\n     * @return bool\n     */\n    private function isRelativeSystemLink(): bool\n    {\n        $slashIdx = strpos($this->url, self::LINK_SLASH);\n        if (false === $slashIdx) {\n            return false;\n        }\n\n        return ($slashIdx == 0);\n    }\n\n    /**\n     * Returns the default scheme.\n     *\n     * @return string\n     */\n    protected function getDefaultScheme(): string\n    {\n        $scheme = 'https://';\n        if ($this->isSystemLink()) {\n            $scheme = $this->getSystemScheme();\n        }\n\n        return $scheme;\n    }\n\n    /**\n     * Checks if URL is a system link.\n     *\n     * @return bool\n     */\n    protected function isSystemLink(): bool\n    {\n        // a. Is the url relative, starting with '/'?\n        // b. Is the url related to the current running PMF system?\n        if ($this->isRelativeSystemLink()) {\n            return true;\n        }\n        // $_SERVER['HTTP_HOST'] is the name of the website or virtual host name\n        return !(false === strpos($this->url, $_SERVER['HTTP_HOST']));\n    }\n\n    /**\n     * Checks if the current URL is the main index.php file.\n     *\n     * @return bool\n     */\n    protected function isHomeIndex(): bool\n    {\n        if (!$this->isSystemLink()) {\n            return false;\n        }\n\n        return !(false === strpos($this->url, self::LINK_INDEX_HOME));\n    }\n\n    /**\n     * Returns the HTTP GET parameters.\n     *\n     * @return array\n     */\n    protected function getHttpGetParameters(): array\n    {\n        $query = $this->getQuery();\n        $parameters = [];\n\n        if (!empty($query)) {\n            // Check fragment\n            if (isset($query['fragment'])) {\n                $parameters[self::LINK_FRAGMENT_SEPARATOR] = urldecode($query['fragment']);\n            }\n\n            // Check if query string contains &amp;\n            $query['main'] = str_replace('&amp;', '&', $query['main']);\n\n            $params = explode('&', $query['main']);\n            foreach ($params as $param) {\n                if (!empty($param)) {\n                    $couple = explode(self::LINK_EQUAL, $param);\n                    list($key, $val) = $couple;\n                    $parameters[$key] = urldecode($val);\n                }\n            }\n        }\n\n        return $parameters;\n    }\n\n    /**\n     * Returns the query of an URL.\n     *\n     * @return array\n     */\n    protected function getQuery(): array\n    {\n        $query = [];\n\n        if (!empty($this->url)) {\n            $parsed = parse_url($this->url);\n\n            if (isset($parsed['query'])) {\n                $query['main'] = filter_var($parsed['query'], FILTER_UNSAFE_RAW);\n            }\n            if (isset($parsed['fragment'])) {\n                $query['fragment'] = filter_var($parsed['fragment'], FILTER_UNSAFE_RAW);\n            }\n        }\n\n        return $query;\n    }\n\n    /**\n     * Returns a search engine optimized title.\n     *\n     * @param string $title\n     * @return string\n     */\n    public function getSEOItemTitle(string $title = ''): string\n    {\n        if ('' === $title) {\n            $title = $this->itemTitle;\n        }\n\n        $itemTitle = trim($title);\n        // Lower the case (aesthetic)\n        $itemTitle = Strings::strtolower($itemTitle);\n        // Use '_' for some other characters for:\n        // 1. avoiding regexp match break;\n        // 2. improving the reading.\n        $itemTitle = str_replace(['-', \"'\", '/', '&#39'], '_', $itemTitle);\n        // 1. Remove any CR LF sequence\n        // 2. Use a '-' for the words separation\n        $itemTitle = Strings::preg_replace('/\\s/m', '-', $itemTitle);\n        // Hack: remove some chars for having a better readable title\n        $itemTitle = str_replace(\n            ['+', ',', ';', ':', '.', '?', '!', '\"', '(', ')', '[', ']', '{', '}', '<', '>', '%'],\n            '',\n            $itemTitle\n        );\n        // Hack: move some chars to \"similar\" but plain ASCII chars\n        $itemTitle = str_replace(\n            [\n                '\u00e0',\n                '\u00e8',\n                '\u00e9',\n                '\u00ec',\n                '\u00f2',\n                '\u00f9',\n                '\u00e4',\n                '\u00f6',\n                '\u00fc',\n                '\u00df',\n                '\u00c4',\n                '\u00d6',\n                '\u00dc',\n                '\u010d',\n                '\u0119',\n                '\u0117',\n                '\u012f',\n                '\u0161',\n                '\u0173',\n                '\u016b',\n                '\u017e',\n            ],\n            [\n                'a',\n                'e',\n                'e',\n                'i',\n                'o',\n                'u',\n                'ae',\n                'oe',\n                'ue',\n                'ss',\n                'Ae',\n                'Oe',\n                'Ue',\n                'c',\n                'e',\n                'e',\n                'i',\n                's',\n                'u',\n                'u',\n                'z',\n            ],\n            $itemTitle\n        );\n\n        // Clean up\n        return Strings::preg_replace('/-[\\-]+/m', '-', $itemTitle);\n    }\n\n    /**\n     * Appends the session id.\n     *\n     * @param string $url URL\n     * @param int $sids Session Id\n     * @return string\n     */\n    private function appendSids(string $url, int $sids): string\n    {\n        $separator = (false === strpos($url, self::LINK_SEARCHPART_SEPARATOR))\n            ?\n            self::LINK_SEARCHPART_SEPARATOR\n            :\n            self::LINK_AMPERSAND;\n\n        return $url . $separator . self::LINK_GET_SIDS . self::LINK_EQUAL . $sids;\n    }\n\n    /**\n     * Returns the current URL.\n     *\n     * @return string\n     */\n    public function getCurrentUrl(): string\n    {\n        $defaultUrl = $this->config->getDefaultUrl();\n        $url = Filter::filterVar($_SERVER['REQUEST_URI'], FILTER_SANITIZE_URL);\n        $parsedUrl = parse_url($url);\n\n        if (isset($parsedUrl['query'])) {\n            parse_str($parsedUrl['query'], $parameters);\n\n            if (isset($parameters['action']) && !isset(self::$allowedActionParameters[$parameters['action']])) {\n                return $defaultUrl;\n            }\n\n            return $defaultUrl . Strings::htmlspecialchars(substr($url, 1));\n        }\n\n        return $defaultUrl;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Link management\n *\n * This class wrap the needs for managing an HTML anchor\n * taking into account also the HTML anchor creation\n * with specific handling for mod_rewrite PMF native support\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2005-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-11-02\n */\n\nnamespace phpMyFAQ;\n\n/**\n * Class Link\n *\n * @package phpMyFAQ\n */\nclass Link\n{\n    /** Class constants. */\n    private const LINK_AMPERSAND = '&amp;';\n    private const LINK_CATEGORY = 'category/';\n    private const LINK_CONTENT = 'content/';\n    private const LINK_EQUAL = '=';\n    private const LINK_FRAGMENT_SEPARATOR = '#';\n    private const LINK_HTML_MINUS = '-';\n    private const LINK_HTML_UNDERSCORE = '_';\n    private const LINK_HTML_SLASH = '/';\n    private const LINK_HTML_TARGET_BLANK = '_blank';\n    private const LINK_HTML_TARGET_PARENT = '_parent';\n    private const LINK_HTML_TARGET_SELF = '_self';\n    private const LINK_HTML_TARGET_TOP = '_top';\n    private const LINK_NEWS = 'news/';\n    private const LINK_SITEMAP = 'sitemap/';\n    private const LINK_SLASH = '/';\n    private const LINK_SEARCHPART_SEPARATOR = '?';\n    private const LINK_TAGS = 'tags/';\n\n    private const LINK_INDEX_ADMIN = '/admin/index.php';\n    private const LINK_INDEX_HOME = '/index.php';\n\n    private const LINK_GET_ACTION = 'action';\n    private const LINK_GET_ARTLANG = 'artlang';\n    private const LINK_GET_CATEGORY = 'cat';\n    private const LINK_GET_HIGHLIGHT = 'highlight';\n    private const LINK_GET_ID = 'id';\n    private const LINK_GET_LANG = 'lang';\n    private const LINK_GET_LETTER = 'letter';\n    private const LINK_GET_NEWS_ID = 'newsid';\n    private const LINK_GET_NEWS_LANG = 'newslang';\n    private const LINK_GET_PAGE = 'seite';\n    private const LINK_GET_SIDS = 'sid';\n    private const LINK_GET_TAGGING_ID = 'tagging_id';\n    private const LINK_GET_LANGS = 'langs';\n\n    private const LINK_GET_ACTION_ADD = 'add';\n    private const LINK_GET_ACTION_FAQ = 'faq';\n    private const LINK_GET_ACTION_ASK = 'ask';\n    private const LINK_GET_ACTION_CONTACT = 'contact';\n    private const LINK_GET_ACTION_GLOSSARY = 'glossary';\n    private const LINK_GET_ACTION_HELP = 'help';\n    private const LINK_GET_ACTION_LOGIN = 'login';\n    private const LINK_GET_ACTION_NEWS = 'news';\n    private const LINK_GET_ACTION_OPEN = 'open-questions';\n    private const LINK_GET_ACTION_PASSWORD = 'password';\n    private const LINK_GET_ACTION_REGISTER = 'register';\n    private const LINK_GET_ACTION_SEARCH = 'search';\n    private const LINK_GET_ACTION_SITEMAP = 'sitemap';\n    private const LINK_GET_ACTION_SHOW = 'show';\n\n    private const LINK_HTML_CATEGORY = 'category';\n    private const LINK_HTML_EXTENSION = '.html';\n    private const LINK_HTML_SITEMAP = 'sitemap';\n\n    private const LINK_HTML_ADDCONTENT = 'addcontent.html';\n    private const LINK_HTML_ASK = 'ask.html';\n    private const LINK_HTML_CONTACT = 'contact.html';\n    private const LINK_HTML_GLOSSARY = 'glossary.html';\n    private const LINK_HTML_HELP = 'help.html';\n    private const LINK_HTML_LOGIN = 'login.html';\n    private const LINK_HTML_OPEN = 'open-questions.html';\n    private const LINK_HTML_PASSWORD = 'password.html';\n    private const LINK_HTML_REGISTER = 'register.html';\n    private const LINK_HTML_SEARCH = 'search.html';\n    private const LINK_HTML_SHOWCAT = 'showcat.html';\n\n    /**\n     * @var int[] List of allowed action parameters\n     */\n    public static $allowedActionParameters = [\n        'add' => 1,\n        'faq' => 1,\n        'artikel' => 1,\n        'ask' => 1,\n        'attachment' => 1,\n        'contact' => 1,\n        'glossary' => 1,\n        'help' => 1,\n        'login' => 1,\n        'mailsend2friend' => 1,\n        'news' => 1,\n        'open-questions' => 1,\n        'overview' => 1,\n        'password' => 1,\n        'register' => 1,\n        'request-removal' => 1,\n        'save' => 1,\n        'savecomment' => 1,\n        'savequestion' => 1,\n        'savevoting' => 1,\n        'search' => 1,\n        'send2friend' => 1,\n        'sendmail' => 1,\n        'show' => 1,\n        'sitemap' => 1,\n        'thankyou' => 1,\n        'translate' => 1,\n        'ucp' => 1,\n        'writecomment' => 1,\n        '404' => 1\n    ];\n\n    /**\n     * URL.\n     *\n     * @var string\n     */\n    public string $url = '';\n\n    /**\n     * CSS class.\n     *\n     * @var string\n     */\n    public string $class = '';\n\n    /**\n     * Linktext.\n     *\n     * @var string\n     */\n    public string $text = '';\n\n    /**\n     * Tooltip.\n     *\n     * @var string|null\n     */\n    public $tooltip = '';\n\n    /**\n     * Target.\n     *\n     * @var string\n     */\n    public string $target = '';\n\n    /**\n     * Name selector.\n     *\n     * @var string\n     */\n    public string $name = '';\n\n    /**\n     * property specific to the SEO/SEF URLs.\n     *\n     * @var string\n     */\n    public string $itemTitle = '';\n\n    /**\n     * id selector.\n     *\n     * @var string\n     */\n    public string $id = '';\n\n    /**\n     * rel property.\n     *\n     * @var string\n     */\n\n    protected string $rel = '';\n\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * Constructor.\n     *\n     * @param string $url URL\n     * @param Configuration $config\n     */\n    public function __construct(string $url, Configuration $config)\n    {\n        $this->url = $url;\n        $this->config = $config;\n    }\n\n    /**\n     * @param string $rel rel property\n     */\n    public function setRelation(string $rel): void\n    {\n        $this->rel = $rel;\n    }\n\n    /**\n     * Returns the system URI.\n     * $_SERVER['HTTP_HOST'] is the name of the website or virtual host name (HTTP/1.1)\n     * Precisely, it contains what the user has written in the Host request-header, see below.\n     * RFC 2616: The Host request-header field specifies the Internet host and port number of the resource\n     *           being requested, as obtained from the original URI given by the user or referring resource\n     *\n     * @param string|null $path\n     * @return string\n     */\n    public function getSystemUri(string $path = null): string\n    {\n        // Remove any ref to standard ports 80 and 443.\n        $pattern[0] = '/:80$/'; // HTTP: port 80\n        $pattern[1] = '/:443$/'; // HTTPS: port 443\n        $sysUri = $this->getSystemScheme() . preg_replace($pattern, '', $_SERVER['HTTP_HOST']);\n\n        return $sysUri . self::getSystemRelativeUri($path);\n    }\n\n    /**\n     * Returns the system scheme, http or https.\n     *\n     * @return string\n     */\n    public function getSystemScheme(): string\n    {\n        if ($this->config->get('security.useSslOnly')) {\n            return 'https://';\n        }\n\n        if (!self::isIISServer()) {\n            // Apache, nginx, lighttpd\n            if (isset($_SERVER['HTTPS']) && 'on' === strtolower($_SERVER['HTTPS'])) {\n                return 'https://';\n            } else {\n                return 'http://';\n            }\n        } else {\n            // IIS Server\n            if ('on' === strtolower($_SERVER['HTTPS'])) {\n                return 'https://';\n            } else {\n                return 'http://';\n            }\n        }\n    }\n\n    /**\n     * Checks if webserver is an IIS Server.\n     *\n     * @return bool\n     */\n    public static function isIISServer(): bool\n    {\n        return (isset($_SERVER['ALL_HTTP']) || isset($_SERVER['COMPUTERNAME']) || isset($_SERVER['APP_POOL_ID']));\n    }\n\n    /**\n     * Returns the relative URI.\n     *\n     * @param string|null $path\n     * @return string\n     */\n    public static function getSystemRelativeUri(string $path = null): string\n    {\n        if (isset($path)) {\n            return str_replace($path, '', $_SERVER['SCRIPT_NAME']);\n        }\n\n        return str_replace('/src/Link.php', '', $_SERVER['SCRIPT_NAME']);\n    }\n\n    /**\n     * Builds an HTML anchor.\n     *\n     * @return string\n     */\n    public function toHtmlAnchor(): string\n    {\n        // Sanitize the provided url\n        $url = $this->toString();\n        // Prepare HTML anchor element\n        $htmlAnchor = '<a';\n\n        if (!empty($this->class)) {\n            $htmlAnchor .= sprintf(' class=\"%s\"', $this->class);\n        }\n\n        if (!empty($this->id)) {\n            $htmlAnchor .= ' id=\"' . $this->id . '\"';\n        }\n\n        if (!empty($this->tooltip)) {\n            $htmlAnchor .= sprintf(' title=\"%s\"', Strings::htmlentities($this->tooltip));\n        }\n\n        if (!empty($this->name)) {\n            $htmlAnchor .= sprintf(' name=\"%s\"', Strings::htmlentities($this->name));\n        } else {\n            if (!empty($this->url)) {\n                $htmlAnchor .= sprintf(' href=\"%s\"', $url);\n            }\n            if (!empty($this->target)) {\n                $htmlAnchor .= sprintf(' target=\"%s\"', $this->target);\n            }\n        }\n        if (!empty($this->rel)) {\n            $htmlAnchor .= sprintf(' rel=\"%s\"', $this->rel);\n        }\n        $htmlAnchor .= '>';\n        if (('0' == $this->text) || (!empty($this->text))) {\n            $htmlAnchor .= Strings::htmlentities($this->text);\n        } else {\n            if (!empty($this->name)) {\n                $htmlAnchor .= Strings::htmlentities($this->name);\n            } else {\n                $htmlAnchor .= $url;\n            }\n        }\n        $htmlAnchor .= '</a>';\n\n        return $htmlAnchor;\n    }\n\n    /**\n     * Rewrites a URL string. Checks mod_rewrite support and 'rewrite'\n     * the passed (system) uri according to the rewrite rules written\n     * in .htaccess\n     *\n     * @param bool $removeSessionFromUrl Remove session from URL\n     * @return string\n     */\n    public function toString(bool $removeSessionFromUrl = false): string\n    {\n        $url = $this->toUri();\n\n        if ($this->config->get('main.enableRewriteRules')) {\n            if ($this->isHomeIndex()) {\n                $getParams = $this->getHttpGetParameters();\n                if (isset($getParams[self::LINK_GET_ACTION])) {\n                    // Get the part of the url 'till the '/' just before the pattern\n                    $url = substr($url, 0, strpos($url, self::LINK_INDEX_HOME) + 1);\n\n                    // Build the Url according to .htaccess rules\n                    switch ($getParams[self::LINK_GET_ACTION]) {\n                        case self::LINK_GET_ACTION_ADD:\n                            $url .= self::LINK_HTML_ADDCONTENT;\n                            break;\n\n                        case self::LINK_GET_ACTION_FAQ:\n                            $url .= self::LINK_CONTENT .\n                                $getParams[self::LINK_GET_CATEGORY] .\n                                self::LINK_HTML_SLASH .\n                                $getParams[self::LINK_GET_ID] .\n                                self::LINK_HTML_SLASH .\n                                $getParams[self::LINK_GET_ARTLANG] .\n                                self::LINK_SLASH .\n                                $this->getSEOItemTitle() .\n                                self::LINK_HTML_EXTENSION;\n                            if (isset($getParams[self::LINK_GET_HIGHLIGHT])) {\n                                $url .= self::LINK_SEARCHPART_SEPARATOR .\n                                    self::LINK_GET_HIGHLIGHT . '=' .\n                                    $getParams[self::LINK_GET_HIGHLIGHT];\n                            }\n                            if (isset($getParams[self::LINK_FRAGMENT_SEPARATOR])) {\n                                $url .= self::LINK_FRAGMENT_SEPARATOR .\n                                    $getParams[self::LINK_FRAGMENT_SEPARATOR];\n                            }\n                            break;\n\n                        case self::LINK_GET_ACTION_ASK:\n                            $url .= self::LINK_HTML_ASK;\n                            break;\n\n                        case self::LINK_GET_ACTION_CONTACT:\n                            $url .= self::LINK_HTML_CONTACT;\n                            break;\n\n                        case self::LINK_GET_ACTION_GLOSSARY:\n                            $url .= self::LINK_HTML_GLOSSARY;\n                            break;\n\n                        case self::LINK_GET_ACTION_HELP:\n                            $url .= self::LINK_HTML_HELP;\n                            break;\n\n                        case self::LINK_GET_ACTION_OPEN:\n                            $url .= self::LINK_HTML_OPEN;\n                            break;\n\n                        case self::LINK_GET_ACTION_LOGIN:\n                            $url .= self::LINK_HTML_LOGIN;\n                            break;\n\n                        case self::LINK_GET_ACTION_SEARCH:\n                            if (\n                                !isset($getParams[self::LINK_GET_ACTION_SEARCH])\n                                && isset($getParams[self::LINK_GET_TAGGING_ID])\n                            ) {\n                                $url .= self::LINK_TAGS . $getParams[self::LINK_GET_TAGGING_ID];\n                                if (isset($getParams[self::LINK_GET_PAGE])) {\n                                    $url .= self::LINK_HTML_SLASH . $getParams[self::LINK_GET_PAGE];\n                                }\n                                $url .= self::LINK_SLASH .\n                                    $this->getSEOItemTitle() .\n                                    self::LINK_HTML_EXTENSION;\n                            } elseif (isset($getParams[self::LINK_GET_ACTION_SEARCH])) {\n                                $url .= self::LINK_HTML_SEARCH;\n                                $url .= self::LINK_SEARCHPART_SEPARATOR .\n                                    self::LINK_GET_ACTION_SEARCH . '=' .\n                                    $getParams[self::LINK_GET_ACTION_SEARCH];\n                                if (isset($getParams[self::LINK_GET_PAGE])) {\n                                    $url .= self::LINK_AMPERSAND . self::LINK_GET_PAGE . '=' .\n                                        $getParams[self::LINK_GET_PAGE];\n                                }\n                            }\n                            if (isset($getParams[self::LINK_GET_LANGS])) {\n                                $url .= self::LINK_AMPERSAND .\n                                    self::LINK_GET_LANGS . '=' .\n                                    $getParams[self::LINK_GET_LANGS];\n                            }\n                            break;\n\n                        case self::LINK_GET_ACTION_SITEMAP:\n                            if (isset($getParams[self::LINK_GET_LETTER])) {\n                                $url .= self::LINK_SITEMAP .\n                                    $getParams[self::LINK_GET_LETTER] .\n                                    self::LINK_HTML_SLASH .\n                                    $getParams[self::LINK_GET_LANG] .\n                                    self::LINK_HTML_EXTENSION;\n                            } else {\n                                $url .= self::LINK_SITEMAP . 'A' .\n                                    self::LINK_HTML_SLASH .\n                                    $getParams[self::LINK_GET_LANG] .\n                                    self::LINK_HTML_EXTENSION;\n                            }\n                            break;\n\n                        case self::LINK_GET_ACTION_SHOW:\n                            if (\n                                !isset($getParams[self::LINK_GET_CATEGORY])\n                                || (isset($getParams[self::LINK_GET_CATEGORY])\n                                    && (0 == $getParams[self::LINK_GET_CATEGORY]))\n                            ) {\n                                $url .= self::LINK_HTML_SHOWCAT;\n                            } else {\n                                $url .= self::LINK_CATEGORY .\n                                    $getParams[self::LINK_GET_CATEGORY];\n                                if (isset($getParams[self::LINK_GET_PAGE])) {\n                                    $url .= self::LINK_HTML_SLASH .\n                                        $getParams[self::LINK_GET_PAGE];\n                                }\n                                $url .= self::LINK_HTML_SLASH .\n                                    $this->getSEOItemTitle() .\n                                    self::LINK_HTML_EXTENSION;\n                            }\n                            break;\n\n                        case self::LINK_GET_ACTION_NEWS:\n                            $url .= self::LINK_NEWS .\n                                $getParams[self::LINK_GET_NEWS_ID] .\n                                self::LINK_HTML_SLASH .\n                                $getParams[self::LINK_GET_NEWS_LANG] .\n                                self::LINK_SLASH .\n                                $this->getSEOItemTitle() .\n                                self::LINK_HTML_EXTENSION;\n                            break;\n                    }\n\n                    if (isset($getParams[self::LINK_GET_SIDS])) {\n                        $url = $this->appendSids($url, $getParams[self::LINK_GET_SIDS]);\n                    }\n\n                    if (isset($getParams['fragment'])) {\n                        $url .= self::LINK_FRAGMENT_SEPARATOR . $getParams['fragment'];\n                    }\n\n                    if ($removeSessionFromUrl) {\n                        $url = strtok($url, '?');\n                    }\n                }\n            }\n        } else {\n            if ($removeSessionFromUrl) {\n                $getParams = $this->getHttpGetParameters();\n                if (isset($getParams[self::LINK_GET_ACTION])) {\n                    $url = substr($url, 0, strpos($url, self::LINK_INDEX_HOME) + 1) . 'index.php?';\n                    foreach ($getParams as $key => $value) {\n                        if ($key !== self::LINK_GET_SIDS) {\n                            $url .= sprintf('%s=%s&', $key, $value);\n                        }\n                    }\n                    $url = substr($url, 0, -1); // Remove last &\n                }\n            }\n        }\n\n        return $url;\n    }\n\n    /**\n     * Transforms a URI.\n     *\n     * @return string\n     */\n    public function toUri(): string\n    {\n        $url = $this->url;\n        if (!empty($this->url)) {\n            if ((!$this->hasScheme()) && (!$this->isInternalReference())) {\n                $url = $this->getDefaultScheme() . $this->url;\n            }\n        }\n\n        return $url;\n    }\n\n    /**\n     * Checks if URL contains a scheme.\n     *\n     * @return bool\n     */\n    private function hasScheme(): bool\n    {\n        $parsed = parse_url($this->url);\n\n        return (!empty($parsed['scheme']));\n    }\n\n    /**\n     * Checks if URL is an internal reference.\n     *\n     * @return bool\n     */\n    protected function isInternalReference(): bool\n    {\n        if ($this->isRelativeSystemLink()) {\n            return true;\n        }\n        if (false === strpos($this->url, '#')) {\n            return false;\n        }\n\n        return (strpos($this->url, '#') == 0);\n    }\n\n    /**\n     * Checks if URL is a relative system link.\n     *\n     * @return bool\n     */\n    private function isRelativeSystemLink(): bool\n    {\n        $slashIdx = strpos($this->url, self::LINK_SLASH);\n        if (false === $slashIdx) {\n            return false;\n        }\n\n        return ($slashIdx == 0);\n    }\n\n    /**\n     * Returns the default scheme.\n     *\n     * @return string\n     */\n    protected function getDefaultScheme(): string\n    {\n        $scheme = 'https://';\n        if ($this->isSystemLink()) {\n            $scheme = $this->getSystemScheme();\n        }\n\n        return $scheme;\n    }\n\n    /**\n     * Checks if URL is a system link.\n     *\n     * @return bool\n     */\n    protected function isSystemLink(): bool\n    {\n        // a. Is the url relative, starting with '/'?\n        // b. Is the url related to the current running PMF system?\n        if ($this->isRelativeSystemLink()) {\n            return true;\n        }\n        // $_SERVER['HTTP_HOST'] is the name of the website or virtual host name\n        return !(false === strpos($this->url, $_SERVER['HTTP_HOST']));\n    }\n\n    /**\n     * Checks if the current URL is the main index.php file.\n     *\n     * @return bool\n     */\n    protected function isHomeIndex(): bool\n    {\n        if (!$this->isSystemLink()) {\n            return false;\n        }\n\n        return !(false === strpos($this->url, self::LINK_INDEX_HOME));\n    }\n\n    /**\n     * Returns the HTTP GET parameters.\n     *\n     * @return array\n     */\n    protected function getHttpGetParameters(): array\n    {\n        $query = $this->getQuery();\n        $parameters = [];\n\n        if (!empty($query)) {\n            // Check fragment\n            if (isset($query['fragment'])) {\n                $parameters[self::LINK_FRAGMENT_SEPARATOR] = urldecode($query['fragment']);\n            }\n\n            // Check if query string contains &amp;\n            $query['main'] = str_replace('&amp;', '&', $query['main']);\n\n            $params = explode('&', $query['main']);\n            foreach ($params as $param) {\n                if (!empty($param)) {\n                    $couple = explode(self::LINK_EQUAL, $param);\n                    list($key, $val) = $couple;\n                    $parameters[$key] = urldecode($val);\n                }\n            }\n        }\n\n        return $parameters;\n    }\n\n    /**\n     * Returns the query of an URL.\n     *\n     * @return array\n     */\n    protected function getQuery(): array\n    {\n        $query = [];\n\n        if (!empty($this->url)) {\n            $parsed = parse_url($this->url);\n\n            if (isset($parsed['query'])) {\n                $query['main'] = filter_var($parsed['query'], FILTER_UNSAFE_RAW);\n            }\n            if (isset($parsed['fragment'])) {\n                $query['fragment'] = filter_var($parsed['fragment'], FILTER_UNSAFE_RAW);\n            }\n        }\n\n        return $query;\n    }\n\n    /**\n     * Returns a search engine optimized title.\n     *\n     * @param string $title\n     * @return string\n     */\n    public function getSEOItemTitle(string $title = ''): string\n    {\n        if ('' === $title) {\n            $title = $this->itemTitle;\n        }\n\n        $itemTitle = trim($title);\n        // Lower the case (aesthetic)\n        $itemTitle = Strings::strtolower($itemTitle);\n        // Use '_' for some other characters for:\n        // 1. avoiding regexp match break;\n        // 2. improving the reading.\n        $itemTitle = str_replace(['-', \"'\", '/', '&#39'], '_', $itemTitle);\n        // 1. Remove any CR LF sequence\n        // 2. Use a '-' for the words separation\n        $itemTitle = Strings::preg_replace('/\\s/m', '-', $itemTitle);\n        // Hack: remove some chars for having a better readable title\n        $itemTitle = str_replace(\n            ['+', ',', ';', ':', '.', '?', '!', '\"', '(', ')', '[', ']', '{', '}', '<', '>', '%'],\n            '',\n            $itemTitle\n        );\n        // Hack: move some chars to \"similar\" but plain ASCII chars\n        $itemTitle = str_replace(\n            [\n                '\u00e0',\n                '\u00e8',\n                '\u00e9',\n                '\u00ec',\n                '\u00f2',\n                '\u00f9',\n                '\u00e4',\n                '\u00f6',\n                '\u00fc',\n                '\u00df',\n                '\u00c4',\n                '\u00d6',\n                '\u00dc',\n                '\u010d',\n                '\u0119',\n                '\u0117',\n                '\u012f',\n                '\u0161',\n                '\u0173',\n                '\u016b',\n                '\u017e',\n            ],\n            [\n                'a',\n                'e',\n                'e',\n                'i',\n                'o',\n                'u',\n                'ae',\n                'oe',\n                'ue',\n                'ss',\n                'Ae',\n                'Oe',\n                'Ue',\n                'c',\n                'e',\n                'e',\n                'i',\n                's',\n                'u',\n                'u',\n                'z',\n            ],\n            $itemTitle\n        );\n\n        // Clean up\n        return Strings::preg_replace('/-[\\-]+/m', '-', $itemTitle);\n    }\n\n    /**\n     * Appends the session id.\n     *\n     * @param string $url URL\n     * @param int $sids Session Id\n     * @return string\n     */\n    private function appendSids(string $url, int $sids): string\n    {\n        $separator = (false === strpos($url, self::LINK_SEARCHPART_SEPARATOR))\n            ?\n            self::LINK_SEARCHPART_SEPARATOR\n            :\n            self::LINK_AMPERSAND;\n\n        return $url . $separator . self::LINK_GET_SIDS . self::LINK_EQUAL . $sids;\n    }\n\n    /**\n     * Returns the current URL.\n     *\n     * @return string\n     */\n    public function getCurrentUrl(): string\n    {\n        $defaultUrl = $this->config->getDefaultUrl();\n        $url = Filter::filterVar($_SERVER['REQUEST_URI'], FILTER_SANITIZE_URL);\n        $parsedUrl = parse_url($url);\n\n        if (isset($parsedUrl['query'])) {\n            parse_str($parsedUrl['query'], $parameters);\n\n            if (isset($parameters['action']) && !isset(self::$allowedActionParameters[$parameters['action']])) {\n                return $defaultUrl;\n            }\n\n            return $defaultUrl . Strings::htmlspecialchars(substr($url, 1));\n        }\n\n        return $defaultUrl;\n    }\n}\n"], "filenames": ["phpmyfaq/src/phpMyFAQ/Link.php"], "buggy_code_start_loc": [318], "buggy_code_end_loc": [340], "fixing_code_start_loc": [318], "fixing_code_end_loc": [340], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.16.", "other": {"cve": {"id": "CVE-2023-4007", "sourceIdentifier": "security@huntr.dev", "published": "2023-07-31T01:15:10.017", "lastModified": "2023-08-03T19:16:00.417", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.16."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.16", "matchCriteriaId": "EF9F1132-3D27-4D51-AF94-75A8C3DDE21F"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/40eb9685198128908e83c2bef4c228751fd43a0e", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/e891dcbc-2092-49d3-9518-23e37187a5ea", "source": "security@huntr.dev", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/40eb9685198128908e83c2bef4c228751fd43a0e"}}