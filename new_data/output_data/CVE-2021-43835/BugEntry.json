{"buggy_code": ["<?php\n\n/*\n * This file is part of Sulu.\n *\n * (c) Sulu GmbH\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n */\n\nnamespace Sulu\\Bundle\\SecurityBundle\\Controller;\n\nuse Doctrine\\Persistence\\ObjectManager;\nuse FOS\\RestBundle\\Context\\Context;\nuse FOS\\RestBundle\\View\\View;\nuse FOS\\RestBundle\\View\\ViewHandlerInterface;\nuse HandcraftedInTheAlps\\RestRoutingBundle\\Routing\\ClassResourceInterface;\nuse Sulu\\Bundle\\AdminBundle\\UserManager\\UserManagerInterface;\nuse Sulu\\Bundle\\SecurityBundle\\Entity\\UserSetting;\nuse Sulu\\Bundle\\SecurityBundle\\UserManager\\UserManager;\nuse Sulu\\Component\\Rest\\Exception\\MissingArgumentException;\nuse Sulu\\Component\\Rest\\Exception\\RestException;\nuse Sulu\\Component\\Security\\Authentication\\UserSettingRepositoryInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;\n\n/**\n * This controller handles everything a user is allowed to change on its own.\n */\nclass ProfileController implements ClassResourceInterface\n{\n    protected static $entityNameUserSetting = 'SuluSecurityBundle:UserSetting';\n\n    /**\n     * @var TokenStorageInterface\n     */\n    private $tokenStorage;\n\n    /**\n     * @var ObjectManager\n     */\n    private $objectManager;\n\n    /**\n     * @var ViewHandlerInterface\n     */\n    private $viewHandler;\n\n    /**\n     * @var UserSettingRepositoryInterface\n     */\n    private $userSettingRepository;\n\n    /**\n     * @var UserManager\n     */\n    private $userManager;\n\n    /**\n     * @var string\n     */\n    private $userClass;\n\n    /**\n     * @var string\n     */\n    private $contactClass;\n\n    /**\n     * @param UserManagerInterface $userManager\n     */\n    public function __construct(\n        TokenStorageInterface $tokenStorage,\n        ObjectManager $objectManager,\n        ViewHandlerInterface $viewHandler,\n        UserSettingRepositoryInterface $userSettingRepository,\n        UserManager $userManager,\n        string $userClass,\n        string $contactClass\n    ) {\n        $this->tokenStorage = $tokenStorage;\n        $this->objectManager = $objectManager;\n        $this->viewHandler = $viewHandler;\n        $this->userSettingRepository = $userSettingRepository;\n        $this->userManager = $userManager;\n        $this->userClass = $userClass;\n        $this->contactClass = $contactClass;\n    }\n\n    /**\n     * Gets the profile information of a user.\n     *\n     * @return Response\n     */\n    public function getAction()\n    {\n        $user = $this->tokenStorage->getToken()->getUser();\n        $view = View::create($user);\n\n        $context = new Context();\n        $context->setGroups(['profile']);\n\n        $view->setContext($context);\n\n        return $this->viewHandler->handle($view);\n    }\n\n    /**\n     * Sets the given profile information of a user.\n     *\n     * @return Response\n     *\n     * @throws \\Exception\n     */\n    public function putAction(Request $request)\n    {\n        $this->checkArguments($request);\n        $user = $this->tokenStorage->getToken()->getUser();\n        $this->userManager->save($request->request->all(), $request->get('locale'), $user->getId(), true);\n\n        $user->setFirstName($request->get('firstName'));\n        $user->setLastName($request->get('lastName'));\n\n        $this->objectManager->flush();\n\n        $view = View::create($user);\n\n        $context = new Context();\n        $context->setGroups(['profile']);\n\n        $view->setContext($context);\n\n        return $this->viewHandler->handle($view);\n    }\n\n    /**\n     * Takes a key, value pair and stores it as settings for the user.\n     *\n     * @return Response\n     */\n    public function patchSettingsAction(Request $request)\n    {\n        $settings = $request->request->all();\n\n        try {\n            $user = $this->tokenStorage->getToken()->getUser();\n\n            foreach ($settings as $settingKey => $settingValue) {\n                // get setting\n                // TODO: move this logic into own service (UserSettingManager?)\n                $setting = $this->userSettingRepository->findOneBy(['user' => $user, 'key' => $settingKey]);\n\n                // or create new one\n                if (!$setting) {\n                    $setting = new UserSetting();\n                    $setting->setKey($settingKey);\n                    $setting->setUser($user);\n                    $this->objectManager->persist($setting);\n                }\n\n                // persist setting\n                $setting->setValue(\\json_encode($settingValue));\n            }\n            $this->objectManager->flush();\n\n            //create view\n            $view = View::create($settings, 200);\n        } catch (RestException $exc) {\n            $view = View::create($exc->toArray(), 400);\n        }\n\n        return $this->viewHandler->handle($view);\n    }\n\n    /**\n     * Deletes a user setting by a given key.\n     *\n     * @return Response\n     */\n    public function deleteSettingsAction(Request $request)\n    {\n        $key = $request->get('key');\n\n        try {\n            if (!$key) {\n                throw new MissingArgumentException(static::$entityNameUserSetting, 'key');\n            }\n\n            $user = $this->tokenStorage->getToken()->getUser();\n\n            // get setting\n            // TODO: move this logic into own service (UserSettingManager?)\n            $setting = $this->userSettingRepository->findOneBy(['user' => $user, 'key' => $key]);\n\n            if ($setting) {\n                $this->objectManager->remove($setting);\n                $this->objectManager->flush();\n                $view = View::create(null, 204);\n            } else {\n                $view = View::create(null, 400);\n            }\n        } catch (RestException $exc) {\n            $view = View::create($exc->toArray(), 400);\n        }\n\n        return $this->viewHandler->handle($view);\n    }\n\n    /**\n     * Checks the arguments of the given request.\n     *\n     * @throws MissingArgumentException\n     */\n    private function checkArguments(Request $request)\n    {\n        if (null === $request->get('firstName')) {\n            throw new MissingArgumentException($this->contactClass, 'firstName');\n        }\n        if (null === $request->get('lastName')) {\n            throw new MissingArgumentException($this->contactClass, 'lastName');\n        }\n        if (null === $request->get('username')) {\n            throw new MissingArgumentException($this->userClass, 'username');\n        }\n        if (null === $request->get('email')) {\n            throw new MissingArgumentException($this->userClass, 'email');\n        }\n        if (null === $request->get('locale')) {\n            throw new MissingArgumentException($this->userClass, 'locale');\n        }\n    }\n}\n", "<?php\n\n/*\n * This file is part of Sulu.\n *\n * (c) Sulu GmbH\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n */\n\nnamespace Sulu\\Bundle\\SecurityBundle\\Tests\\Functional\\Controller;\n\nuse Sulu\\Bundle\\ContactBundle\\Entity\\Contact;\nuse Sulu\\Bundle\\SecurityBundle\\Entity\\User;\nuse Sulu\\Bundle\\TestBundle\\Testing\\SuluTestCase;\nuse Symfony\\Bundle\\FrameworkBundle\\KernelBrowser;\n\nclass ProfileControllerTest extends SuluTestCase\n{\n    /**\n     * @var KernelBrowser\n     */\n    private $client;\n\n    public function setUp(): void\n    {\n        $this->client = $this->createAuthenticatedClient();\n        $this->purgeDatabase();\n    }\n\n    public function testPatchSettings()\n    {\n        $this->client->jsonRequest(\n            'PATCH',\n            '/api/profile/settings',\n            ['setting-key' => 'setting-value']\n        );\n\n        $userSetting = $this->client->getContainer()->get('sulu_security.user_setting_repository')->findOneBy(\n            [\n                'user' => $this->client->getContainer()->get('security.token_storage')->getToken()->getUser(),\n                'key' => 'setting-key',\n            ]\n        );\n\n        $this->assertEquals('setting-key', $userSetting->getKey());\n        $this->assertEquals('setting-value', \\json_decode($userSetting->getValue()));\n    }\n\n    public function testGet()\n    {\n        $this->client->jsonRequest('GET', '/api/profile');\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(200, $this->client->getResponse());\n        $this->assertEquals('test', $response->username);\n        $this->assertEquals('', $response->email);\n        $this->assertObjectNotHasAttribute('password', $response);\n        $this->assertEquals('en', $response->locale);\n        $this->assertEquals('Max', $response->firstName);\n        $this->assertEquals('Mustermann', $response->lastName);\n    }\n\n    public function testPut()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'email' => 'hans.mustermann@muster.at',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n        $this->assertHttpStatusCode(200, $this->client->getResponse());\n        $this->assertEquals('Hans', $response->firstName);\n        $this->assertEquals('Mustermann', $response->lastName);\n        $this->assertEquals('hansi', $response->username);\n        $this->assertEquals('hans.mustermann@muster.at', $response->email);\n        $this->assertEquals('de', $response->locale);\n    }\n\n    public function testPutEmailNotUnique()\n    {\n        $existingContact = new Contact();\n        $existingContact->setFirstName('Max');\n        $existingContact->setLastName('Muster');\n\n        $existingUser = new User();\n        $existingUser->setUsername('existing-username');\n        $existingUser->setEmail('existing@email.com');\n        $existingUser->setPassword('securepassword');\n        $existingUser->setSalt('salt');\n        $existingUser->setLocale('de');\n        $existingUser->setContact($existingContact);\n\n        static::getEntityManager()->persist($existingContact);\n        static::getEntityManager()->persist($existingUser);\n        static::getEntityManager()->flush();\n\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'email' => 'existing@email.com',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n        $this->assertHttpStatusCode(409, $this->client->getResponse());\n        $this->assertEquals(1004, $response->code);\n        $this->assertEquals('The email address \"existing@email.com\" is already assigned to another contact.', $response->detail);\n    }\n\n    public function testPutUsernameNotUnique()\n    {\n        $existingContact = new Contact();\n        $existingContact->setFirstName('Max');\n        $existingContact->setLastName('Muster');\n\n        $existingUser = new User();\n        $existingUser->setUsername('existing-username');\n        $existingUser->setEmail('existing@email.com');\n        $existingUser->setPassword('securepassword');\n        $existingUser->setSalt('salt');\n        $existingUser->setLocale('de');\n        $existingUser->setContact($existingContact);\n\n        static::getEntityManager()->persist($existingContact);\n        static::getEntityManager()->persist($existingUser);\n        static::getEntityManager()->flush();\n\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'existing-username',\n                'email' => 'hans.mustermann@muster.at',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n        $this->assertHttpStatusCode(409, $this->client->getResponse());\n        $this->assertEquals(\n            'a username has to be unique!',\n            $response->message\n        );\n    }\n\n    public function testPutWithoutFirstName()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'email' => 'hans.mustermann@muster.at',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(400, $this->client->getResponse());\n        $this->assertEquals(\n            'The \"Sulu\\Bundle\\ContactBundle\\Entity\\Contact\"-entity requires a \"firstName\"-argument',\n            $response->message\n        );\n    }\n\n    public function testPutWithoutLastName()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'username' => 'hansi',\n                'email' => 'hans.mustermann@muster.at',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(400, $this->client->getResponse());\n        $this->assertEquals(\n            'The \"Sulu\\Bundle\\ContactBundle\\Entity\\Contact\"-entity requires a \"lastName\"-argument',\n            $response->message\n        );\n    }\n\n    public function testPutWithoutUsername()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'email' => 'hans.mustermann@muster.at',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(400, $this->client->getResponse());\n        $this->assertEquals(\n            'The \"Sulu\\Bundle\\SecurityBundle\\Entity\\User\"-entity requires a \"username\"-argument',\n            $response->message\n        );\n    }\n\n    public function testPutWithoutEmail()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(400, $this->client->getResponse());\n        $this->assertEquals(\n            'The \"Sulu\\Bundle\\SecurityBundle\\Entity\\User\"-entity requires a \"email\"-argument',\n            $response->message\n        );\n    }\n\n    public function testPutWithoutLocale()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'password' => 'testpassword',\n                'email' => 'hans.mustermann@muster.at',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(400, $this->client->getResponse());\n        $this->assertEquals(\n            'The \"Sulu\\Bundle\\SecurityBundle\\Entity\\User\"-entity requires a \"locale\"-argument',\n            $response->message\n        );\n    }\n\n    public function testPutWithoutPassword()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'email' => 'hans.mustermann@muster.at',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(200, $this->client->getResponse());\n    }\n\n    public function testDeleteSettings()\n    {\n        $this->client->jsonRequest(\n            'PATCH',\n            '/api/profile/settings',\n            ['setting-key' => 'setting-value']\n        );\n\n        $userSetting = $this->client->getContainer()->get('sulu_security.user_setting_repository')->findOneBy(\n            [\n                'user' => $this->client->getContainer()->get('security.token_storage')->getToken()->getUser(),\n                'key' => 'setting-key',\n            ]\n        );\n\n        $this->assertEquals('setting-key', $userSetting->getKey());\n        $this->assertEquals('setting-value', \\json_decode($userSetting->getValue()));\n\n        $this->client->jsonRequest(\n            'DELETE',\n            '/api/profile/settings',\n            ['key' => 'setting-key']\n        );\n\n        $userSetting = $this->client->getContainer()->get('sulu_security.user_setting_repository')->findOneBy(\n            [\n                'user' => $this->client->getContainer()->get('security.token_storage')->getToken()->getUser(),\n                'key' => 'setting-key',\n            ]\n        );\n\n        $this->assertNull($userSetting);\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of Sulu.\n *\n * (c) Sulu GmbH\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n */\n\nnamespace Sulu\\Bundle\\SecurityBundle\\Controller;\n\nuse Doctrine\\Persistence\\ObjectManager;\nuse FOS\\RestBundle\\Context\\Context;\nuse FOS\\RestBundle\\View\\View;\nuse FOS\\RestBundle\\View\\ViewHandlerInterface;\nuse HandcraftedInTheAlps\\RestRoutingBundle\\Routing\\ClassResourceInterface;\nuse Sulu\\Bundle\\AdminBundle\\UserManager\\UserManagerInterface;\nuse Sulu\\Bundle\\SecurityBundle\\Entity\\UserSetting;\nuse Sulu\\Bundle\\SecurityBundle\\UserManager\\UserManager;\nuse Sulu\\Component\\Rest\\Exception\\MissingArgumentException;\nuse Sulu\\Component\\Rest\\Exception\\RestException;\nuse Sulu\\Component\\Security\\Authentication\\UserSettingRepositoryInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;\n\n/**\n * This controller handles everything a user is allowed to change on its own.\n */\nclass ProfileController implements ClassResourceInterface\n{\n    protected static $entityNameUserSetting = 'SuluSecurityBundle:UserSetting';\n\n    /**\n     * @var TokenStorageInterface\n     */\n    private $tokenStorage;\n\n    /**\n     * @var ObjectManager\n     */\n    private $objectManager;\n\n    /**\n     * @var ViewHandlerInterface\n     */\n    private $viewHandler;\n\n    /**\n     * @var UserSettingRepositoryInterface\n     */\n    private $userSettingRepository;\n\n    /**\n     * @var UserManager\n     */\n    private $userManager;\n\n    /**\n     * @var string\n     */\n    private $userClass;\n\n    /**\n     * @var string\n     */\n    private $contactClass;\n\n    /**\n     * @param UserManagerInterface $userManager\n     */\n    public function __construct(\n        TokenStorageInterface $tokenStorage,\n        ObjectManager $objectManager,\n        ViewHandlerInterface $viewHandler,\n        UserSettingRepositoryInterface $userSettingRepository,\n        UserManager $userManager,\n        string $userClass,\n        string $contactClass\n    ) {\n        $this->tokenStorage = $tokenStorage;\n        $this->objectManager = $objectManager;\n        $this->viewHandler = $viewHandler;\n        $this->userSettingRepository = $userSettingRepository;\n        $this->userManager = $userManager;\n        $this->userClass = $userClass;\n        $this->contactClass = $contactClass;\n    }\n\n    /**\n     * Gets the profile information of a user.\n     *\n     * @return Response\n     */\n    public function getAction()\n    {\n        $user = $this->tokenStorage->getToken()->getUser();\n        $view = View::create($user);\n\n        $context = new Context();\n        $context->setGroups(['profile']);\n\n        $view->setContext($context);\n\n        return $this->viewHandler->handle($view);\n    }\n\n    /**\n     * Sets the given profile information of a user.\n     *\n     * @return Response\n     *\n     * @throws \\Exception\n     */\n    public function putAction(Request $request)\n    {\n        $this->checkArguments($request);\n        $user = $this->tokenStorage->getToken()->getUser();\n        $this->userManager->save($this->getData($request), $request->get('locale'), $user->getId(), true);\n\n        $user->setFirstName($request->get('firstName'));\n        $user->setLastName($request->get('lastName'));\n\n        $this->objectManager->flush();\n\n        $view = View::create($user);\n\n        $context = new Context();\n        $context->setGroups(['profile']);\n\n        $view->setContext($context);\n\n        return $this->viewHandler->handle($view);\n    }\n\n    /**\n     * Takes a key, value pair and stores it as settings for the user.\n     *\n     * @return Response\n     */\n    public function patchSettingsAction(Request $request)\n    {\n        $settings = $request->request->all();\n\n        try {\n            $user = $this->tokenStorage->getToken()->getUser();\n\n            foreach ($settings as $settingKey => $settingValue) {\n                // get setting\n                // TODO: move this logic into own service (UserSettingManager?)\n                $setting = $this->userSettingRepository->findOneBy(['user' => $user, 'key' => $settingKey]);\n\n                // or create new one\n                if (!$setting) {\n                    $setting = new UserSetting();\n                    $setting->setKey($settingKey);\n                    $setting->setUser($user);\n                    $this->objectManager->persist($setting);\n                }\n\n                // persist setting\n                $setting->setValue(\\json_encode($settingValue));\n            }\n            $this->objectManager->flush();\n\n            //create view\n            $view = View::create($settings, 200);\n        } catch (RestException $exc) {\n            $view = View::create($exc->toArray(), 400);\n        }\n\n        return $this->viewHandler->handle($view);\n    }\n\n    /**\n     * Deletes a user setting by a given key.\n     *\n     * @return Response\n     */\n    public function deleteSettingsAction(Request $request)\n    {\n        $key = $request->get('key');\n\n        try {\n            if (!$key) {\n                throw new MissingArgumentException(static::$entityNameUserSetting, 'key');\n            }\n\n            $user = $this->tokenStorage->getToken()->getUser();\n\n            // get setting\n            // TODO: move this logic into own service (UserSettingManager?)\n            $setting = $this->userSettingRepository->findOneBy(['user' => $user, 'key' => $key]);\n\n            if ($setting) {\n                $this->objectManager->remove($setting);\n                $this->objectManager->flush();\n                $view = View::create(null, 204);\n            } else {\n                $view = View::create(null, 400);\n            }\n        } catch (RestException $exc) {\n            $view = View::create($exc->toArray(), 400);\n        }\n\n        return $this->viewHandler->handle($view);\n    }\n\n    /**\n     * Checks the arguments of the given request.\n     *\n     * @throws MissingArgumentException\n     */\n    private function checkArguments(Request $request)\n    {\n        if (null === $request->get('firstName')) {\n            throw new MissingArgumentException($this->contactClass, 'firstName');\n        }\n        if (null === $request->get('lastName')) {\n            throw new MissingArgumentException($this->contactClass, 'lastName');\n        }\n        if (null === $request->get('username')) {\n            throw new MissingArgumentException($this->userClass, 'username');\n        }\n        if (null === $request->get('email')) {\n            throw new MissingArgumentException($this->userClass, 'email');\n        }\n        if (null === $request->get('locale')) {\n            throw new MissingArgumentException($this->userClass, 'locale');\n        }\n    }\n\n    /**\n     * @return array<string, mixed>\n     */\n    protected function getData(Request $request): array\n    {\n        $data = [];\n\n        foreach ($request->request->all() as $key => $value) {\n            if (\\in_array($key, ['firstName', 'lastName', 'username', 'email', 'password', 'locale'], true)) {\n                $data[$key] = $value;\n            }\n        }\n\n        return $data;\n    }\n}\n", "<?php\n\n/*\n * This file is part of Sulu.\n *\n * (c) Sulu GmbH\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n */\n\nnamespace Sulu\\Bundle\\SecurityBundle\\Tests\\Functional\\Controller;\n\nuse Sulu\\Bundle\\ContactBundle\\Entity\\Contact;\nuse Sulu\\Bundle\\SecurityBundle\\Entity\\User;\nuse Sulu\\Bundle\\TestBundle\\Testing\\SuluTestCase;\nuse Symfony\\Bundle\\FrameworkBundle\\KernelBrowser;\n\nclass ProfileControllerTest extends SuluTestCase\n{\n    /**\n     * @var KernelBrowser\n     */\n    private $client;\n\n    public function setUp(): void\n    {\n        $this->client = $this->createAuthenticatedClient();\n        $this->purgeDatabase();\n    }\n\n    public function testPatchSettings()\n    {\n        $this->client->jsonRequest(\n            'PATCH',\n            '/api/profile/settings',\n            ['setting-key' => 'setting-value']\n        );\n\n        $userSetting = $this->client->getContainer()->get('sulu_security.user_setting_repository')->findOneBy(\n            [\n                'user' => $this->client->getContainer()->get('security.token_storage')->getToken()->getUser(),\n                'key' => 'setting-key',\n            ]\n        );\n\n        $this->assertEquals('setting-key', $userSetting->getKey());\n        $this->assertEquals('setting-value', \\json_decode($userSetting->getValue()));\n    }\n\n    public function testGet()\n    {\n        $this->client->jsonRequest('GET', '/api/profile');\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(200, $this->client->getResponse());\n        $this->assertEquals('test', $response->username);\n        $this->assertEquals('', $response->email);\n        $this->assertObjectNotHasAttribute('password', $response);\n        $this->assertEquals('en', $response->locale);\n        $this->assertEquals('Max', $response->firstName);\n        $this->assertEquals('Mustermann', $response->lastName);\n    }\n\n    public function testPut()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'email' => 'hans.mustermann@muster.at',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n        $this->assertHttpStatusCode(200, $this->client->getResponse());\n        $this->assertEquals('Hans', $response->firstName);\n        $this->assertEquals('Mustermann', $response->lastName);\n        $this->assertEquals('hansi', $response->username);\n        $this->assertEquals('hans.mustermann@muster.at', $response->email);\n        $this->assertEquals('de', $response->locale);\n    }\n\n    public function testPutInvalidField()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'email' => 'hans.mustermann@muster.at',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n        $this->assertHttpStatusCode(200, $this->client->getResponse());\n        $this->assertEquals('Hans', $response->firstName);\n        $this->assertEquals('Mustermann', $response->lastName);\n        $this->assertEquals('hansi', $response->username);\n        $this->assertEquals('hans.mustermann@muster.at', $response->email);\n        $this->assertEquals('de', $response->locale);\n    }\n\n    public function testPutEmailNotUnique()\n    {\n        $existingContact = new Contact();\n        $existingContact->setFirstName('Max');\n        $existingContact->setLastName('Muster');\n\n        $existingUser = new User();\n        $existingUser->setUsername('existing-username');\n        $existingUser->setEmail('existing@email.com');\n        $existingUser->setPassword('securepassword');\n        $existingUser->setSalt('salt');\n        $existingUser->setLocale('de');\n        $existingUser->setContact($existingContact);\n\n        static::getEntityManager()->persist($existingContact);\n        static::getEntityManager()->persist($existingUser);\n        static::getEntityManager()->flush();\n\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'email' => 'existing@email.com',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n        $this->assertHttpStatusCode(409, $this->client->getResponse());\n        $this->assertEquals(1004, $response->code);\n        $this->assertEquals('The email address \"existing@email.com\" is already assigned to another contact.', $response->detail);\n    }\n\n    public function testPutUsernameNotUnique()\n    {\n        $existingContact = new Contact();\n        $existingContact->setFirstName('Max');\n        $existingContact->setLastName('Muster');\n\n        $existingUser = new User();\n        $existingUser->setUsername('existing-username');\n        $existingUser->setEmail('existing@email.com');\n        $existingUser->setPassword('securepassword');\n        $existingUser->setSalt('salt');\n        $existingUser->setLocale('de');\n        $existingUser->setContact($existingContact);\n\n        static::getEntityManager()->persist($existingContact);\n        static::getEntityManager()->persist($existingUser);\n        static::getEntityManager()->flush();\n\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'existing-username',\n                'email' => 'hans.mustermann@muster.at',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n        $this->assertHttpStatusCode(409, $this->client->getResponse());\n        $this->assertEquals(\n            'a username has to be unique!',\n            $response->message\n        );\n    }\n\n    public function testPutWithoutFirstName()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'email' => 'hans.mustermann@muster.at',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(400, $this->client->getResponse());\n        $this->assertEquals(\n            'The \"Sulu\\Bundle\\ContactBundle\\Entity\\Contact\"-entity requires a \"firstName\"-argument',\n            $response->message\n        );\n    }\n\n    public function testPutWithoutLastName()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'username' => 'hansi',\n                'email' => 'hans.mustermann@muster.at',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(400, $this->client->getResponse());\n        $this->assertEquals(\n            'The \"Sulu\\Bundle\\ContactBundle\\Entity\\Contact\"-entity requires a \"lastName\"-argument',\n            $response->message\n        );\n    }\n\n    public function testPutWithoutUsername()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'email' => 'hans.mustermann@muster.at',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(400, $this->client->getResponse());\n        $this->assertEquals(\n            'The \"Sulu\\Bundle\\SecurityBundle\\Entity\\User\"-entity requires a \"username\"-argument',\n            $response->message\n        );\n    }\n\n    public function testPutWithoutEmail()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'password' => 'testpassword',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(400, $this->client->getResponse());\n        $this->assertEquals(\n            'The \"Sulu\\Bundle\\SecurityBundle\\Entity\\User\"-entity requires a \"email\"-argument',\n            $response->message\n        );\n    }\n\n    public function testPutWithoutLocale()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'password' => 'testpassword',\n                'email' => 'hans.mustermann@muster.at',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(400, $this->client->getResponse());\n        $this->assertEquals(\n            'The \"Sulu\\Bundle\\SecurityBundle\\Entity\\User\"-entity requires a \"locale\"-argument',\n            $response->message\n        );\n    }\n\n    public function testPutWithoutPassword()\n    {\n        $this->client->jsonRequest(\n            'PUT',\n            '/api/profile',\n            [\n                'firstName' => 'Hans',\n                'lastName' => 'Mustermann',\n                'username' => 'hansi',\n                'email' => 'hans.mustermann@muster.at',\n                'locale' => 'de',\n            ]\n        );\n\n        $response = \\json_decode($this->client->getResponse()->getContent());\n\n        $this->assertHttpStatusCode(200, $this->client->getResponse());\n    }\n\n    public function testDeleteSettings()\n    {\n        $this->client->jsonRequest(\n            'PATCH',\n            '/api/profile/settings',\n            ['setting-key' => 'setting-value']\n        );\n\n        $userSetting = $this->client->getContainer()->get('sulu_security.user_setting_repository')->findOneBy(\n            [\n                'user' => $this->client->getContainer()->get('security.token_storage')->getToken()->getUser(),\n                'key' => 'setting-key',\n            ]\n        );\n\n        $this->assertEquals('setting-key', $userSetting->getKey());\n        $this->assertEquals('setting-value', \\json_decode($userSetting->getValue()));\n\n        $this->client->jsonRequest(\n            'DELETE',\n            '/api/profile/settings',\n            ['key' => 'setting-key']\n        );\n\n        $userSetting = $this->client->getContainer()->get('sulu_security.user_setting_repository')->findOneBy(\n            [\n                'user' => $this->client->getContainer()->get('security.token_storage')->getToken()->getUser(),\n                'key' => 'setting-key',\n            ]\n        );\n\n        $this->assertNull($userSetting);\n    }\n}\n"], "filenames": ["src/Sulu/Bundle/SecurityBundle/Controller/ProfileController.php", "src/Sulu/Bundle/SecurityBundle/Tests/Functional/Controller/ProfileControllerTest.php"], "buggy_code_start_loc": [121, 89], "buggy_code_end_loc": [233, 89], "fixing_code_start_loc": [121, 90], "fixing_code_end_loc": [250, 114], "type": "CWE-269", "message": "Sulu is an open-source PHP content management system based on the Symfony framework. In affected versions Sulu users who have access to any subset of the admin UI are able to elevate their privilege. Over the API it was possible for them to give themselves permissions to areas which they did not already had. This issue was introduced in 2.0.0-RC1 with the new ProfileController putAction. The versions have been patched in 2.2.18, 2.3.8 and 2.4.0. For users unable to upgrade the only known workaround is to apply a patch to the ProfileController manually.", "other": {"cve": {"id": "CVE-2021-43835", "sourceIdentifier": "security-advisories@github.com", "published": "2021-12-15T20:15:08.677", "lastModified": "2021-12-21T13:11:26.150", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Sulu is an open-source PHP content management system based on the Symfony framework. In affected versions Sulu users who have access to any subset of the admin UI are able to elevate their privilege. Over the API it was possible for them to give themselves permissions to areas which they did not already had. This issue was introduced in 2.0.0-RC1 with the new ProfileController putAction. The versions have been patched in 2.2.18, 2.3.8 and 2.4.0. For users unable to upgrade the only known workaround is to apply a patch to the ProfileController manually."}, {"lang": "es", "value": "Sulu es un sistema de administraci\u00f3n de contenidos PHP de c\u00f3digo abierto basado en el framework Symfony. En las versiones afectadas, los usuarios de Sulu que presentan acceso a cualquier subconjunto de la interfaz de usuario de administraci\u00f3n son capaces de elevar sus privilegios. A trav\u00e9s de la API era posible que se dieran permisos a \u00e1reas que a\u00fan no ten\u00edan. Este problema se introdujo en la versi\u00f3n 2.0.0-RC1 con el nuevo ProfileController putAction. Las versiones han sido parcheadas en 2.2.18, 2.3.8 y 2.4.0. Para usuarios que no puedan actualizar, la \u00fanica soluci\u00f3n conocida es aplicar un parche al ProfileController manualmente"}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sulu:sulu:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.2.18", "matchCriteriaId": "7B6E9B64-0B43-40AD-B0B4-C8BA5EEA6F31"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sulu:sulu:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.8", "matchCriteriaId": "354C0B42-D950-497B-B3B7-09EA07063564"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sulu:sulu:2.4.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "2889EBAA-7A15-436C-9658-CA67F7122DC1"}]}]}], "references": [{"url": "https://github.com/sulu/sulu/commit/30bf8b5a4f83b6f2171a696011757d095edaa28a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/sulu/sulu/security/advisories/GHSA-84px-q68r-2fc9", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sulu/sulu/commit/30bf8b5a4f83b6f2171a696011757d095edaa28a"}}