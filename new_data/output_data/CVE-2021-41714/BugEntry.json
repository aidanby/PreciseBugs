{"buggy_code": ["<?php\n/**\n * Created by PhpStorm.\n * User: sdf_sky\n * Date: 2017/2/4\n * Time: \u4e0b\u53483:12\n */\n\nnamespace App\\Http\\Controllers;\n\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\File;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass AttachController extends Controller\n{\n\n    public function upload(Request $request){\n        $validator = Validator::make($request->all(),[\n            'file' => 'required|max:'.config('tipask.upload.attach_size'),\n        ]);\n\n        if($validator->fails()){\n            return $this->ajaxError(10000,$validator->errors()->first('file'));\n        }\n\n        $file = $request->file('file');\n        $extension = $file->getClientOriginalExtension();\n        $filePath = 'attachments/'.gmdate(\"Y\").\"/\".gmdate(\"m\").\"/\".uniqid(str_random(8)).'.'.$extension;\n        Storage::disk('local')->put($filePath,File::get($file));\n\n        return $this->ajaxSuccess([\n            'url'=>route(\"website.attach.download\",['name'=>str_replace(\"/\",\"-\",$filePath)]),\n            'name'=>$file->getClientOriginalName()\n        ]);\n    }\n\n\n    public function download($name){\n        $attachFile = storage_path('app/'.str_replace(\"-\",\"/\",$name));\n        if(!is_file($attachFile)){\n            abort(404);\n        }\n        return response()->download($attachFile);\n    }\n\n\n\n}", "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Http\\Requests;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\File;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Intervention\\Image\\Facades\\Image;\n\nclass ImageController extends Controller\n{\n\n    /**\n     * \u663e\u793a\u7528\u6237\u5934\u50cf\n     * @param $avatar_name\n     * @return mixed\n     */\n    public function avatar($avatar_name)\n    {\n        list($user_id,$size) = explode('_',str_replace(\".jpg\",'',$avatar_name));\n        $avatarFile = storage_path('app/'.User::getAvatarPath($user_id,$size));\n        if(!is_file($avatarFile)){\n            $avatarFile = public_path('static/images/default_avatar.jpg');\n        }\n        $image =   Image::make($avatarFile);\n        $response = response()->make($image->encode('jpg'));\n        $image->destroy();\n        $response->header('Content-Type', 'image/jpeg');\n        $response->header('Expires',  date(DATE_RFC822,strtotime(\" 2 day\")));\n        $response->header('Cache-Control', 'private, max-age=86400, pre-check=86400');\n        return $response;\n    }\n\n\n\n    public function show($image_name)\n    {\n        $imageFile = storage_path('app/'.str_replace(\"-\",\"/\",$image_name));\n        if(!is_file($imageFile)){\n            abort(404);\n        }\n\n\n        $image =   Image::make($imageFile);\n\n        if(config('tipask.upload.open_watermark') && $image_name != config('tipask.upload.watermark_image') && str_contains($image_name,'attachments')){\n            $watermarkImage = storage_path('app/'.str_replace(\"-\",\"/\",config('tipask.upload.watermark_image')));\n            $image->insert($watermarkImage, 'bottom-right', 15, 10);\n        }\n        $response = response()->make($image->encode('jpg'));\n        $response->header('Content-Type', 'image/jpeg');\n        $response->header('Expires',  date(DATE_RFC822,strtotime(\" 7 day\")));\n        $response->header('Cache-Control', 'private, max-age=259200, pre-check=259200');\n        return $response;\n    }\n\n\n\n    /*\u7f16\u8f91\u5668\u56fe\u7247\u4e0a\u4f20*/\n    public function upload(Request $request)\n    {\n        $validateRules = [\n            'file' => 'required|image|max:'.config('tipask.upload.attach_size'),\n        ];\n\n        if($request->hasFile('file')){\n            $validator = Validator::make($request->all(),$validateRules);\n            if ($validator->fails()) {\n                return response('error');\n            }\n            $file = $request->file('file');\n            $extension = $file->getClientOriginalExtension()?$file->getClientOriginalExtension():'jpg';\n            $filePath = 'attachments/'.gmdate(\"Y\").\"/\".gmdate(\"m\").\"/\".uniqid(str_random(8)).'.'.$extension;\n            Storage::disk('local')->put($filePath,File::get($file));\n            return response(route(\"website.image.show\",['image_name'=>str_replace(\"/\",\"-\",$filePath)]));\n        }\n        return response('error');\n    }\n\n}\n"], "fixing_code": ["<?php\n/**\n * Created by PhpStorm.\n * User: sdf_sky\n * Date: 2017/2/4\n * Time: \u4e0b\u53483:12\n */\n\nnamespace App\\Http\\Controllers;\n\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\File;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass AttachController extends Controller\n{\n\n    public function upload(Request $request){\n        $validator = Validator::make($request->all(),[\n            'file' => 'required|max:'.config('tipask.upload.attach_size'),\n        ]);\n\n        if($validator->fails()){\n            return $this->ajaxError(10000,$validator->errors()->first('file'));\n        }\n\n        $file = $request->file('file');\n        $extension = $file->getClientOriginalExtension();\n        $filePath = 'attachments/'.gmdate(\"Y\").\"/\".gmdate(\"m\").\"/\".uniqid(str_random(8)).'.'.$extension;\n        Storage::disk('local')->put($filePath,File::get($file));\n\n        return $this->ajaxSuccess([\n            'url'=>route(\"website.attach.download\",['name'=>str_replace(\"/\",\"-\",$filePath)]),\n            'name'=>$file->getClientOriginalName()\n        ]);\n    }\n\n\n    public function download($name){\n        $fileName = str_replace(\"..\",\"\",$name);\n        $attachFile = storage_path('app/'.str_replace(\"-\",\"/\",$fileName));\n        if(!is_file($attachFile)){\n            abort(404);\n        }\n        return response()->download($attachFile);\n    }\n\n\n\n}\n", "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Http\\Requests;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\File;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Intervention\\Image\\Facades\\Image;\n\nclass ImageController extends Controller\n{\n\n    /**\n     * \u663e\u793a\u7528\u6237\u5934\u50cf\n     * @param $avatar_name\n     * @return mixed\n     */\n    public function avatar($avatar_name)\n    {\n        $fileName = str_replace(\"..\",\"\",$avatar_name);\n\n        list($user_id,$size) = explode('_',str_replace(\".jpg\",'',$fileName));\n        $avatarFile = storage_path('app/'.User::getAvatarPath($user_id,$size));\n        if(!is_file($avatarFile)){\n            $avatarFile = public_path('static/images/default_avatar.jpg');\n        }\n        $image =   Image::make($avatarFile);\n        $response = response()->make($image->encode('jpg'));\n        $image->destroy();\n        $response->header('Content-Type', 'image/jpeg');\n        $response->header('Expires',  date(DATE_RFC822,strtotime(\" 2 day\")));\n        $response->header('Cache-Control', 'private, max-age=86400, pre-check=86400');\n        return $response;\n    }\n\n\n\n    public function show($image_name)\n    {\n        $fileName = str_replace(\"..\",\"\",$image_name);\n\n        $imageFile = storage_path('app/'.str_replace(\"-\",\"/\",$fileName));\n        if(!is_file($imageFile)){\n            abort(404);\n        }\n\n\n        $image =   Image::make($imageFile);\n\n        if(config('tipask.upload.open_watermark') && $fileName != config('tipask.upload.watermark_image') && str_contains($fileName,'attachments')){\n            $watermarkImage = storage_path('app/'.str_replace(\"-\",\"/\",config('tipask.upload.watermark_image')));\n            $image->insert($watermarkImage, 'bottom-right', 15, 10);\n        }\n        $response = response()->make($image->encode('jpg'));\n        $response->header('Content-Type', 'image/jpeg');\n        $response->header('Expires',  date(DATE_RFC822,strtotime(\" 7 day\")));\n        $response->header('Cache-Control', 'private, max-age=259200, pre-check=259200');\n        return $response;\n    }\n\n\n\n    /*\u7f16\u8f91\u5668\u56fe\u7247\u4e0a\u4f20*/\n    public function upload(Request $request)\n    {\n        $validateRules = [\n            'file' => 'required|image|max:'.config('tipask.upload.attach_size'),\n        ];\n\n        if($request->hasFile('file')){\n            $validator = Validator::make($request->all(),$validateRules);\n            if ($validator->fails()) {\n                return response('error');\n            }\n            $file = $request->file('file');\n            $extension = $file->getClientOriginalExtension()?$file->getClientOriginalExtension():'jpg';\n            $filePath = 'attachments/'.gmdate(\"Y\").\"/\".gmdate(\"m\").\"/\".uniqid(str_random(8)).'.'.$extension;\n            Storage::disk('local')->put($filePath,File::get($file));\n            return response(route(\"website.image.show\",['image_name'=>str_replace(\"/\",\"-\",$filePath)]));\n        }\n        return response('error');\n    }\n\n}\n"], "filenames": ["app/Http/Controllers/AttachController.php", "app/Http/Controllers/ImageController.php"], "buggy_code_start_loc": [42, 23], "buggy_code_end_loc": [52, 50], "fixing_code_start_loc": [42, 23], "fixing_code_end_loc": [53, 54], "type": "CWE-494", "message": "In Tipask < 3.5.9, path parameters entered by the user are not validated when downloading attachments, a registered user can download arbitrary files on the Tipask server such as .env, /etc/passwd, laravel.log, causing infomation leakage.", "other": {"cve": {"id": "CVE-2021-41714", "sourceIdentifier": "cve@mitre.org", "published": "2022-05-23T16:16:06.313", "lastModified": "2022-06-03T14:15:01.887", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Tipask < 3.5.9, path parameters entered by the user are not validated when downloading attachments, a registered user can download arbitrary files on the Tipask server such as .env, /etc/passwd, laravel.log, causing infomation leakage."}, {"lang": "es", "value": "En Tipask versiones anteriores a 3.5.9, los par\u00e1metros de ruta introducidos por el usuario no son comprobados cuando son descargados archivos adjuntos, un usuario registrado puede descargar archivos arbitrarios en el servidor Tipask como .env, /etc/passwd, laravel.log, causando un filtrado de informaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "cve@mitre.org", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-494"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tipask:tipask:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.5.9", "matchCriteriaId": "AFDD3E7B-94B1-455C-9AD0-6D55E6A6BD19"}]}]}], "references": [{"url": "https://github.com/sdfsky/tipask/blob/c4e6aa9f6017c9664780570016954c0922d203b7/app/Http/Controllers/AttachController.php#L42", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/sdfsky/tipask/commit/9b5f13d1708e9a5dc0959cb8a97be1c32b94ca69", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.yuque.com/henry-weply/penetration/fza5hm", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sdfsky/tipask/commit/9b5f13d1708e9a5dc0959cb8a97be1c32b94ca69"}}