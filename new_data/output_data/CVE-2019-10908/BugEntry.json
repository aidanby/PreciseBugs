{"buggy_code": ["package org.airsonic.player.controller;\n\nimport de.triology.recaptchav2java.ReCaptcha;\nimport org.airsonic.player.domain.User;\nimport org.airsonic.player.service.SecurityService;\nimport org.airsonic.player.service.SettingsService;\nimport org.apache.commons.lang.RandomStringUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.mail.Message;\nimport javax.mail.Session;\nimport javax.mail.Transport;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\n/**\n * Spring MVC Controller that serves the login page.\n */\n@Controller\n@RequestMapping(\"/recover\")\npublic class RecoverController {\n\n\n    private static final Logger LOG = LoggerFactory.getLogger(RecoverController.class);\n\n    @Autowired\n    private SettingsService settingsService;\n    @Autowired\n    private SecurityService securityService;\n\n    @RequestMapping(method = {RequestMethod.GET, RequestMethod.POST})\n    public ModelAndView recover(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\n        Map<String, Object> map = new HashMap<String, Object>();\n        String usernameOrEmail = StringUtils.trimToNull(request.getParameter(\"usernameOrEmail\"));\n\n        if (usernameOrEmail != null) {\n\n            map.put(\"usernameOrEmail\", usernameOrEmail);\n            User user = getUserByUsernameOrEmail(usernameOrEmail);\n\n            boolean captchaOk;\n            if (settingsService.isCaptchaEnabled()) {\n                String recaptchaResponse = request.getParameter(\"g-recaptcha-response\");\n                ReCaptcha captcha = new ReCaptcha(settingsService.getRecaptchaSecretKey());\n                captchaOk = recaptchaResponse != null && captcha.isValid(recaptchaResponse);\n            } else {\n                captchaOk = true;\n            }\n            \n            if (!captchaOk) {\n                map.put(\"error\", \"recover.error.invalidcaptcha\");\n            } else if (user == null) {\n                map.put(\"error\", \"recover.error.usernotfound\");\n            } else if (user.getEmail() == null) {\n                map.put(\"error\", \"recover.error.noemail\");\n            } else {\n                String password = RandomStringUtils.randomAlphanumeric(8);\n                if (emailPassword(password, user.getUsername(), user.getEmail())) {\n                    map.put(\"sentTo\", user.getEmail());\n                    user.setLdapAuthenticated(false);\n                    user.setPassword(password);\n                    securityService.updateUser(user);\n                } else {\n                    map.put(\"error\", \"recover.error.sendfailed\");\n                }\n            }\n        }\n\n        if (settingsService.isCaptchaEnabled()) {\n            map.put(\"recaptchaSiteKey\", settingsService.getRecaptchaSiteKey());\n        }\n\n        return new ModelAndView(\"recover\", \"model\", map);\n    }\n\n    private User getUserByUsernameOrEmail(String usernameOrEmail) {\n        if (usernameOrEmail != null) {\n            User user = securityService.getUserByName(usernameOrEmail);\n            if (user != null) {\n                return user;\n            }\n            return securityService.getUserByEmail(usernameOrEmail);\n        }\n        return null;\n    }\n\n    /*\n    * e-mail user new password via configured Smtp server\n    */\n    private boolean emailPassword(String password, String username, String email) {\n        /* Default to protocol smtp when SmtpEncryption is set to \"None\" */\n        String prot = \"smtp\";\n\n        if (settingsService.getSmtpServer() == null || settingsService.getSmtpServer().isEmpty()) {\n            LOG.warn(\"Can not send email; no Smtp server configured.\");\n            return false;\n        }\n\n        Properties props = new Properties();\n        if (settingsService.getSmtpEncryption().equals(\"SSL/TLS\")) {\n            prot = \"smtps\";\n            props.put(\"mail.\" + prot + \".ssl.enable\", \"true\");\n        } else if (settingsService.getSmtpEncryption().equals(\"STARTTLS\")) {\n            prot = \"smtp\";\n            props.put(\"mail.\" + prot + \".starttls.enable\", \"true\");\n        }\n        props.put(\"mail.\" + prot + \".host\", settingsService.getSmtpServer());\n        props.put(\"mail.\" + prot + \".port\", settingsService.getSmtpPort());\n        /* use authentication when SmtpUser is configured */\n        if (settingsService.getSmtpUser() != null && !settingsService.getSmtpUser().isEmpty()) {\n            props.put(\"mail.\" + prot + \".auth\", \"true\");\n        }\n\n        Session session = Session.getInstance(props, null);\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(settingsService.getSmtpFrom()));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));\n            message.setSubject(\"Airsonic Password\");\n            message.setText(\"Hi there!\\n\\n\" +\n                    \"You have requested to reset your Airsonic password.  Please find your new login details below.\\n\\n\" +\n                    \"Username: \" + username + \"\\n\" +\n                    \"Password: \" + password + \"\\n\\n\" +\n                    \"--\\n\" +\n                    \"Your Airsonic server\\n\" +\n                    \"airsonic.github.io/\");\n            message.setSentDate(new Date());\n\n            Transport trans = session.getTransport(prot);\n            try {\n                if (props.get(\"mail.\" + prot + \".auth\") != null && props.get(\"mail.\" + prot + \".auth\").equals(\"true\")) {\n                    trans.connect(settingsService.getSmtpServer(), settingsService.getSmtpUser(), settingsService.getSmtpPassword());\n                } else {\n                    trans.connect();\n                }\n                trans.sendMessage(message, message.getAllRecipients());\n            } finally {\n                trans.close();\n            }\n            return true;\n\n        } catch (Exception x) {\n            LOG.warn(\"Failed to send email.\", x);\n            return false;\n        }\n    }\n\n}\n"], "fixing_code": ["package org.airsonic.player.controller;\n\nimport de.triology.recaptchav2java.ReCaptcha;\nimport org.airsonic.player.domain.User;\nimport org.airsonic.player.service.SecurityService;\nimport org.airsonic.player.service.SettingsService;\nimport org.apache.commons.lang.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.mail.Message;\nimport javax.mail.Session;\nimport javax.mail.Transport;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport java.security.SecureRandom;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\n/**\n * Spring MVC Controller that serves the login page.\n */\n@Controller\n@RequestMapping(\"/recover\")\npublic class RecoverController {\n\n\n    private static final Logger LOG = LoggerFactory.getLogger(RecoverController.class);\n\n    private static final String SYMBOLS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";\n    private final SecureRandom random = new SecureRandom();\n    private static final int PASSWORD_LENGTH = 32;\n\n    @Autowired\n    private SettingsService settingsService;\n    @Autowired\n    private SecurityService securityService;\n\n    @RequestMapping(method = {RequestMethod.GET, RequestMethod.POST})\n    public ModelAndView recover(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\n        Map<String, Object> map = new HashMap<String, Object>();\n        String usernameOrEmail = StringUtils.trimToNull(request.getParameter(\"usernameOrEmail\"));\n\n        if (usernameOrEmail != null) {\n\n            map.put(\"usernameOrEmail\", usernameOrEmail);\n            User user = getUserByUsernameOrEmail(usernameOrEmail);\n\n            boolean captchaOk;\n            if (settingsService.isCaptchaEnabled()) {\n                String recaptchaResponse = request.getParameter(\"g-recaptcha-response\");\n                ReCaptcha captcha = new ReCaptcha(settingsService.getRecaptchaSecretKey());\n                captchaOk = recaptchaResponse != null && captcha.isValid(recaptchaResponse);\n            } else {\n                captchaOk = true;\n            }\n            \n            if (!captchaOk) {\n                map.put(\"error\", \"recover.error.invalidcaptcha\");\n            } else if (user == null) {\n                map.put(\"error\", \"recover.error.usernotfound\");\n            } else if (user.getEmail() == null) {\n                map.put(\"error\", \"recover.error.noemail\");\n            } else {\n                StringBuilder sb = new StringBuilder(PASSWORD_LENGTH);\n                for(int i=0; i<PASSWORD_LENGTH; i++) {\n                  int index = random.nextInt(SYMBOLS.length());\n                  sb.append(SYMBOLS.charAt(index));\n                }\n                String password = sb.toString();\n\n                if (emailPassword(password, user.getUsername(), user.getEmail())) {\n                    map.put(\"sentTo\", user.getEmail());\n                    user.setLdapAuthenticated(false);\n                    user.setPassword(password);\n                    securityService.updateUser(user);\n                } else {\n                    map.put(\"error\", \"recover.error.sendfailed\");\n                }\n            }\n        }\n\n        if (settingsService.isCaptchaEnabled()) {\n            map.put(\"recaptchaSiteKey\", settingsService.getRecaptchaSiteKey());\n        }\n\n        return new ModelAndView(\"recover\", \"model\", map);\n    }\n\n    private User getUserByUsernameOrEmail(String usernameOrEmail) {\n        if (usernameOrEmail != null) {\n            User user = securityService.getUserByName(usernameOrEmail);\n            if (user != null) {\n                return user;\n            }\n            return securityService.getUserByEmail(usernameOrEmail);\n        }\n        return null;\n    }\n\n    /*\n    * e-mail user new password via configured Smtp server\n    */\n    private boolean emailPassword(String password, String username, String email) {\n        /* Default to protocol smtp when SmtpEncryption is set to \"None\" */\n        String prot = \"smtp\";\n\n        if (settingsService.getSmtpServer() == null || settingsService.getSmtpServer().isEmpty()) {\n            LOG.warn(\"Can not send email; no Smtp server configured.\");\n            return false;\n        }\n\n        Properties props = new Properties();\n        if (settingsService.getSmtpEncryption().equals(\"SSL/TLS\")) {\n            prot = \"smtps\";\n            props.put(\"mail.\" + prot + \".ssl.enable\", \"true\");\n        } else if (settingsService.getSmtpEncryption().equals(\"STARTTLS\")) {\n            prot = \"smtp\";\n            props.put(\"mail.\" + prot + \".starttls.enable\", \"true\");\n        }\n        props.put(\"mail.\" + prot + \".host\", settingsService.getSmtpServer());\n        props.put(\"mail.\" + prot + \".port\", settingsService.getSmtpPort());\n        /* use authentication when SmtpUser is configured */\n        if (settingsService.getSmtpUser() != null && !settingsService.getSmtpUser().isEmpty()) {\n            props.put(\"mail.\" + prot + \".auth\", \"true\");\n        }\n\n        Session session = Session.getInstance(props, null);\n\n        try {\n            Message message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(settingsService.getSmtpFrom()));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));\n            message.setSubject(\"Airsonic Password\");\n            message.setText(\"Hi there!\\n\\n\" +\n                    \"You have requested to reset your Airsonic password.  Please find your new login details below.\\n\\n\" +\n                    \"Username: \" + username + \"\\n\" +\n                    \"Password: \" + password + \"\\n\\n\" +\n                    \"--\\n\" +\n                    \"Your Airsonic server\\n\" +\n                    \"airsonic.github.io/\");\n            message.setSentDate(new Date());\n\n            Transport trans = session.getTransport(prot);\n            try {\n                if (props.get(\"mail.\" + prot + \".auth\") != null && props.get(\"mail.\" + prot + \".auth\").equals(\"true\")) {\n                    trans.connect(settingsService.getSmtpServer(), settingsService.getSmtpUser(), settingsService.getSmtpPassword());\n                } else {\n                    trans.connect();\n                }\n                trans.sendMessage(message, message.getAllRecipients());\n            } finally {\n                trans.close();\n            }\n            return true;\n\n        } catch (Exception x) {\n            LOG.warn(\"Failed to send email.\", x);\n            return false;\n        }\n    }\n\n}\n"], "filenames": ["airsonic-main/src/main/java/org/airsonic/player/controller/RecoverController.java"], "buggy_code_start_loc": [7], "buggy_code_end_loc": [73], "fixing_code_start_loc": [6], "fixing_code_end_loc": [83], "type": "CWE-335", "message": "In Airsonic 10.2.1, RecoverController.java generates passwords via org.apache.commons.lang.RandomStringUtils, which uses java.util.Random internally. This PRNG has a 48-bit seed that can easily be bruteforced, leading to trivial privilege escalation attacks.", "other": {"cve": {"id": "CVE-2019-10908", "sourceIdentifier": "cve@mitre.org", "published": "2019-04-07T14:29:00.427", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Airsonic 10.2.1, RecoverController.java generates passwords via org.apache.commons.lang.RandomStringUtils, which uses java.util.Random internally. This PRNG has a 48-bit seed that can easily be bruteforced, leading to trivial privilege escalation attacks."}, {"lang": "es", "value": "En Airsonic 10.2.1, RecoverController.java genera contrase\u00f1as mediante org.apache.commons.lang.RandomStringUtils que utiliza ava.util.Random internamente. Este Pseudo Random Number Generator (PRNG) tiene una semilla de 48-bit que puede ser sometido f\u00e1cilmente a un ataque de fuerza bruta, conduciendo a ataques de escalado de privilegios."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-335"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:airsonic_project:airsonic:10.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "14222F88-F6AA-426E-B705-FB3B872E65CC"}]}]}], "references": [{"url": "https://github.com/airsonic/airsonic/commit/61c842923a6d60d4aedd126445a8437b53b752c8", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/airsonic/airsonic/commit/61c842923a6d60d4aedd126445a8437b53b752c8"}}