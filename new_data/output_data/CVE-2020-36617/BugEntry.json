{"buggy_code": ["/*\n * This file is part of the Green End SFTP Server.\n * Copyright (C) 2007, 2011, 2014 Richard Kettlewell\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307\n * USA\n */\n\n#include \"sftpserver.h\"\n#include \"alloc.h\"\n#include \"debug.h\"\n#include \"handle.h\"\n#include \"parse.h\"\n#include \"types.h\"\n#include \"sftp.h\"\n#include \"globals.h\"\n#include \"putword.h\"\n#include <string.h>\n\nuint32_t sftp_parse_uint8(struct sftpjob *job, uint8_t *ur) {\n  if(job->left < 1)\n    return SSH_FX_BAD_MESSAGE;\n  *ur = *job->ptr++;\n  --job->left;\n  return SSH_FX_OK;\n}\n\nuint32_t sftp_parse_uint16(struct sftpjob *job, uint16_t *ur) {\n  if(job->left < 2)\n    return SSH_FX_BAD_MESSAGE;\n  *ur = get16(job->ptr);\n  job->ptr += 2;\n  job->left -= 2;\n  return SSH_FX_OK;\n}\n\nuint32_t sftp_parse_uint32(struct sftpjob *job, uint32_t *ur) {\n  if(job->left < 4)\n    return SSH_FX_BAD_MESSAGE;\n  *ur = get32(job->ptr);\n  job->ptr += 4;\n  job->left -= 4;\n  return SSH_FX_OK;\n}\n\nuint32_t sftp_parse_uint64(struct sftpjob *job, uint64_t *ur) {\n  if(job->left < 8)\n    return SSH_FX_BAD_MESSAGE;\n  *ur = get64(job->ptr);\n  job->ptr += 8;\n  job->left -= 8;\n  return SSH_FX_OK;\n}\n\nuint32_t sftp_parse_string(struct sftpjob *job, char **strp, size_t *lenp) {\n  uint32_t len, rc;\n  char *str;\n\n  if((rc = sftp_parse_uint32(job, &len)) != SSH_FX_OK)\n    return rc;\n  if(len == 0xFFFFFFFF)\n    return SSH_FX_BAD_MESSAGE; /* overflow */\n  if(job->left < len)\n    return SSH_FX_BAD_MESSAGE; /* not enough bytes to satisfy */\n  if(lenp)\n    *lenp = len;\n  if(strp) {\n    str = sftp_alloc(job->a, len + 1); /* 0-fills */\n    memcpy(str, job->ptr, len);\n    *strp = str;\n  }\n  job->ptr += len;\n  job->left -= len;\n  return SSH_FX_OK;\n}\n\nuint32_t sftp_parse_path(struct sftpjob *job, char **strp) {\n  uint32_t rc;\n\n  if((rc = sftp_parse_string(job, strp, 0)) != SSH_FX_OK)\n    return rc;\n  return protocol->decode(job, strp);\n}\n\nuint32_t sftp_parse_handle(struct sftpjob *job, struct handleid *id) {\n  uint32_t len, rc;\n\n  if((rc = sftp_parse_uint32(job, &len)) != SSH_FX_OK || len != 8 ||\n     (rc = sftp_parse_uint32(job, &id->id)) != SSH_FX_OK ||\n     (rc = sftp_parse_uint32(job, &id->tag) != SSH_FX_OK))\n    return rc;\n  return SSH_FX_OK;\n}\n\n/*\nLOCAL Variables:\nc-basic-offset:2\ncomment-column:40\nfill-column:79\nindent-tabs-mode:nil\nEnd:\n*/\n"], "fixing_code": ["/*\n * This file is part of the Green End SFTP Server.\n * Copyright (C) 2007, 2011, 2014 Richard Kettlewell\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307\n * USA\n */\n\n#include \"sftpserver.h\"\n#include \"alloc.h\"\n#include \"debug.h\"\n#include \"handle.h\"\n#include \"parse.h\"\n#include \"types.h\"\n#include \"sftp.h\"\n#include \"globals.h\"\n#include \"putword.h\"\n#include <string.h>\n\nuint32_t sftp_parse_uint8(struct sftpjob *job, uint8_t *ur) {\n  if(job->left < 1)\n    return SSH_FX_BAD_MESSAGE;\n  *ur = *job->ptr++;\n  --job->left;\n  return SSH_FX_OK;\n}\n\nuint32_t sftp_parse_uint16(struct sftpjob *job, uint16_t *ur) {\n  if(job->left < 2)\n    return SSH_FX_BAD_MESSAGE;\n  *ur = get16(job->ptr);\n  job->ptr += 2;\n  job->left -= 2;\n  return SSH_FX_OK;\n}\n\nuint32_t sftp_parse_uint32(struct sftpjob *job, uint32_t *ur) {\n  if(job->left < 4)\n    return SSH_FX_BAD_MESSAGE;\n  *ur = get32(job->ptr);\n  job->ptr += 4;\n  job->left -= 4;\n  return SSH_FX_OK;\n}\n\nuint32_t sftp_parse_uint64(struct sftpjob *job, uint64_t *ur) {\n  if(job->left < 8)\n    return SSH_FX_BAD_MESSAGE;\n  *ur = get64(job->ptr);\n  job->ptr += 8;\n  job->left -= 8;\n  return SSH_FX_OK;\n}\n\nuint32_t sftp_parse_string(struct sftpjob *job, char **strp, size_t *lenp) {\n  uint32_t len, rc;\n  char *str;\n\n  if((rc = sftp_parse_uint32(job, &len)) != SSH_FX_OK)\n    return rc;\n  if(len == 0xFFFFFFFF)\n    return SSH_FX_BAD_MESSAGE; /* overflow */\n  if(job->left < len)\n    return SSH_FX_BAD_MESSAGE; /* not enough bytes to satisfy */\n  if(lenp)\n    *lenp = len;\n  if(strp) {\n    str = sftp_alloc(job->a, len + 1); /* 0-fills */\n    memcpy(str, job->ptr, len);\n    *strp = str;\n  }\n  job->ptr += len;\n  job->left -= len;\n  return SSH_FX_OK;\n}\n\nuint32_t sftp_parse_path(struct sftpjob *job, char **strp) {\n  uint32_t rc;\n\n  if((rc = sftp_parse_string(job, strp, 0)) != SSH_FX_OK)\n    return rc;\n  return protocol->decode(job, strp);\n}\n\nuint32_t sftp_parse_handle(struct sftpjob *job, struct handleid *id) {\n  uint32_t len, rc;\n\n  if((rc = sftp_parse_uint32(job, &len)) != SSH_FX_OK)\n    return rc;\n  if(len != 8)\n    return SSH_FX_BAD_MESSAGE;\n  if((rc = sftp_parse_uint32(job, &id->id)) != SSH_FX_OK ||\n     (rc = sftp_parse_uint32(job, &id->tag) != SSH_FX_OK))\n    return rc;\n  return SSH_FX_OK;\n}\n\n/*\nLOCAL Variables:\nc-basic-offset:2\ncomment-column:40\nfill-column:79\nindent-tabs-mode:nil\nEnd:\n*/\n"], "filenames": ["parse.c"], "buggy_code_start_loc": [100], "buggy_code_end_loc": [102], "fixing_code_start_loc": [100], "fixing_code_end_loc": [105], "type": "CWE-824", "message": "** DISPUTED ** A vulnerability was found in ewxrjk sftpserver. It has been declared as problematic. Affected by this vulnerability is the function sftp_parse_path of the file parse.c. The manipulation leads to uninitialized pointer. The real existence of this vulnerability is still doubted at the moment. The name of the patch is bf4032f34832ee11d79aa60a226cc018e7ec5eed. It is recommended to apply a patch to fix this issue. The identifier VDB-216205 was assigned to this vulnerability. NOTE: In some deployment models this would be a vulnerability. README specifically warns about avoiding such deployment models.", "other": {"cve": {"id": "CVE-2020-36617", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-18T15:15:09.950", "lastModified": "2022-12-22T19:45:43.680", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "** DISPUTED ** A vulnerability was found in ewxrjk sftpserver. It has been declared as problematic. Affected by this vulnerability is the function sftp_parse_path of the file parse.c. The manipulation leads to uninitialized pointer. The real existence of this vulnerability is still doubted at the moment. The name of the patch is bf4032f34832ee11d79aa60a226cc018e7ec5eed. It is recommended to apply a patch to fix this issue. The identifier VDB-216205 was assigned to this vulnerability. NOTE: In some deployment models this would be a vulnerability. README specifically warns about avoiding such deployment models."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-824"}, {"lang": "en", "value": "CWE-908"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:greenend:sftpserver:*:*:*:*:*:*:*:*", "versionEndExcluding": "2", "matchCriteriaId": "5AD03389-1F21-4D17-A83B-8F1019364E21"}]}]}], "references": [{"url": "https://github.com/ewxrjk/sftpserver/commit/bf4032f34832ee11d79aa60a226cc018e7ec5eed", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216205", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ewxrjk/sftpserver/commit/bf4032f34832ee11d79aa60a226cc018e7ec5eed"}}