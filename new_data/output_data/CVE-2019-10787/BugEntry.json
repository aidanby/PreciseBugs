{"buggy_code": ["var exec = require('child_process').exec;\nvar aspect = require('aspectratio');\nvar dirname = require('path').dirname;\nvar basename = require('path').basename;\nvar extname = require('path').extname;\nvar join = require('path').join;\nvar sprintf = require('util').format;\n\nmodule.exports = function(image, output, cb) {\n  var cmd = module.exports.cmd(image, output);\n  exec(cmd, {timeout: 30000}, function(e, stdout, stderr) {\n    if (e) { return cb(e); }\n    if (stderr) { return cb(new Error(stderr)); }\n\n    return cb(null, output.versions);\n  });\n};\n\n/**\n * Get cropped geometry for given aspectratio\n *\n * @param object image - original image metadata\n * @param string ratio - new aspect ratio\n *\n * @return object geometry\n *  - string geometry - crop geometry; or null\n *  - number width    - image version height\n *  - number height   - image version width\n */\nmodule.exports.crop = function(image, ratio) {\n  if (!ratio) {\n    return { geometry: null, width: image.width, height: image.height };\n  }\n\n  var g = aspect.crop(image.width, image.height, ratio);\n\n  // Check if the image already has the decired aspectratio.\n  if (g[0] === 0 && g[1] === 0) {\n    return { geometry: null, width: image.width, height: image.height };\n  } else {\n    return {\n      geometry: sprintf('%dx%d+%d+%d', g[2], g[3], g[0], g[1]),\n      width: g[2],\n      height: g[3]\n    };\n  }\n};\n\n/**\n * Get resize geometry for max width and/or height\n *\n * @param object crop - image crop object\n * @param object versin - image version object\n *\n * @return string geometry; null if no resize applies\n */\nmodule.exports.resize = function(crop, version) {\n  var maxW = version.maxWidth;\n  var maxH = version.maxHeight;\n\n  var resize = aspect.resize(crop.width, crop.height, maxW, maxH);\n\n  // Update version object\n  version.width  = resize[0];\n  version.height = resize[1];\n\n  if (maxW && maxH) {\n    return maxW + 'x' + maxH;\n  } else if (maxW) {\n    return '' + maxW;\n  } else if (maxH) {\n    return 'x' + maxH;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Get new path with suffix\n *\n * @param string src - source image path\n * @param string opts - output path transformations\n *  * format\n *  * suffix\n *\n * @return string path\n */\nmodule.exports.path = function(src, opts) {\n  var dir = opts.path || dirname(src);\n  var ext = extname(src);\n  var base = basename(src, ext);\n\n  if (opts.format) {\n    ext = '.' + opts.format;\n  }\n\n  return join(dir, opts.prefix + base + opts.suffix + ext);\n};\n\n/**\n * Get convert command\n *\n * @param object image - original image object\n * @param Array versions - derivated versions\n *\n * @return string convert command\n */\nmodule.exports.cmd = function(image, output) {\n  var cmd = [\n    sprintf(\n      'convert %s -auto-orient -strip -write mpr:%s +delete', image.path, image.path\n    )\n  ];\n\n  for (var i = 0; i < output.versions.length; i++) {\n    var version = output.versions[i];\n    var last = (i === output.versions.length-1);\n\n    version.quality = version.quality || output.quality || 80;\n\n    version.path = module.exports.path(image.path, {\n      format: version.format,\n      path: output.path,\n      prefix: version.prefix || output.prefix || '',\n      suffix: version.suffix || ''\n    });\n\n    cmd.push(module.exports.cmdVersion(image, version, last));\n  }\n\n  return cmd.join(' ');\n};\n\n/**\n * Get convert command for single version\n *\n * @param object image - original image object\n * @param object version - derivated version\n * @patam boolean last - true if this is last version\n *\n * @return string version convert command\n */\nmodule.exports.cmdVersion = function(image, version, last) {\n  var cmd = [];\n\n  // http://www.imagemagick.org/Usage/files/#mpr\n  cmd.push(sprintf('mpr:%s', image.path));\n\n  // -quality\n  if (version.quality) {\n    cmd.push(sprintf('-quality %d', version.quality));\n  }\n\n  // -background\n  if (version.background) {\n    cmd.push(sprintf('-background \"%s\"', version.background));\n  }\n\n  // -flatten\n  if (version.flatten) {\n    cmd.push('-flatten');\n  }\n\n  // -crop\n  var crop = module.exports.crop(image, version.aspect);\n  if (crop.geometry) {\n    cmd.push(sprintf('-crop \"%s\"', crop.geometry));\n  }\n\n  // -resize\n  // http://www.imagemagick.org/script/command-line-processing.php#geometry\n  var resize = module.exports.resize(crop, version);\n  if (resize) {\n    cmd.push(sprintf('-resize \"%s\"', resize));\n  }\n\n  // -write\n  if (last) {\n    cmd.push(version.path);\n  } else {\n    cmd.push(sprintf('-write %s +delete', version.path));\n  }\n\n  return cmd.join(' ');\n};\n"], "fixing_code": ["var exec = require('child_process').exec;\nvar aspect = require('aspectratio');\nvar dirname = require('path').dirname;\nvar basename = require('path').basename;\nvar extname = require('path').extname;\nvar join = require('path').join;\nvar sprintf = require('util').format;\n\nmodule.exports = function(image, output, cb) {\n  if(/;|&|`|\\$|\\(|\\)|\\|\\||\\||!|>|<|\\?|\\${/g.test(JSON.stringify(image))) {\n    console.log('Input Validation failed, Suspicious Characters found');\n  } else {\n  var cmd = module.exports.cmd(image, output);\n  exec(cmd, {timeout: 30000}, function(e, stdout, stderr) {\n    if (e) { return cb(e); }\n    if (stderr) { return cb(new Error(stderr)); }\n\n    return cb(null, output.versions);\n  });\n}\n};\n\n/**\n * Get cropped geometry for given aspectratio\n *\n * @param object image - original image metadata\n * @param string ratio - new aspect ratio\n *\n * @return object geometry\n *  - string geometry - crop geometry; or null\n *  - number width    - image version height\n *  - number height   - image version width\n */\nmodule.exports.crop = function(image, ratio) {\n  if (!ratio) {\n    return { geometry: null, width: image.width, height: image.height };\n  }\n\n  var g = aspect.crop(image.width, image.height, ratio);\n\n  // Check if the image already has the decired aspectratio.\n  if (g[0] === 0 && g[1] === 0) {\n    return { geometry: null, width: image.width, height: image.height };\n  } else {\n    return {\n      geometry: sprintf('%dx%d+%d+%d', g[2], g[3], g[0], g[1]),\n      width: g[2],\n      height: g[3]\n    };\n  }\n};\n\n/**\n * Get resize geometry for max width and/or height\n *\n * @param object crop - image crop object\n * @param object versin - image version object\n *\n * @return string geometry; null if no resize applies\n */\nmodule.exports.resize = function(crop, version) {\n  var maxW = version.maxWidth;\n  var maxH = version.maxHeight;\n\n  var resize = aspect.resize(crop.width, crop.height, maxW, maxH);\n\n  // Update version object\n  version.width  = resize[0];\n  version.height = resize[1];\n\n  if (maxW && maxH) {\n    return maxW + 'x' + maxH;\n  } else if (maxW) {\n    return '' + maxW;\n  } else if (maxH) {\n    return 'x' + maxH;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Get new path with suffix\n *\n * @param string src - source image path\n * @param string opts - output path transformations\n *  * format\n *  * suffix\n *\n * @return string path\n */\nmodule.exports.path = function(src, opts) {\n  var dir = opts.path || dirname(src);\n  var ext = extname(src);\n  var base = basename(src, ext);\n\n  if (opts.format) {\n    ext = '.' + opts.format;\n  }\n\n  return join(dir, opts.prefix + base + opts.suffix + ext);\n};\n\n/**\n * Get convert command\n *\n * @param object image - original image object\n * @param Array versions - derivated versions\n *\n * @return string convert command\n */\nmodule.exports.cmd = function(image, output) {\n  var cmd = [\n    sprintf(\n      'convert %s -auto-orient -strip -write mpr:%s +delete', image.path, image.path\n    )\n  ];\n\n  for (var i = 0; i < output.versions.length; i++) {\n    var version = output.versions[i];\n    var last = (i === output.versions.length-1);\n\n    version.quality = version.quality || output.quality || 80;\n\n    version.path = module.exports.path(image.path, {\n      format: version.format,\n      path: output.path,\n      prefix: version.prefix || output.prefix || '',\n      suffix: version.suffix || ''\n    });\n\n    cmd.push(module.exports.cmdVersion(image, version, last));\n  }\n\n  return cmd.join(' ');\n};\n\n/**\n * Get convert command for single version\n *\n * @param object image - original image object\n * @param object version - derivated version\n * @patam boolean last - true if this is last version\n *\n * @return string version convert command\n */\nmodule.exports.cmdVersion = function(image, version, last) {\n  var cmd = [];\n\n  // http://www.imagemagick.org/Usage/files/#mpr\n  cmd.push(sprintf('mpr:%s', image.path));\n\n  // -quality\n  if (version.quality) {\n    cmd.push(sprintf('-quality %d', version.quality));\n  }\n\n  // -background\n  if (version.background) {\n    cmd.push(sprintf('-background \"%s\"', version.background));\n  }\n\n  // -flatten\n  if (version.flatten) {\n    cmd.push('-flatten');\n  }\n\n  // -crop\n  var crop = module.exports.crop(image, version.aspect);\n  if (crop.geometry) {\n    cmd.push(sprintf('-crop \"%s\"', crop.geometry));\n  }\n\n  // -resize\n  // http://www.imagemagick.org/script/command-line-processing.php#geometry\n  var resize = module.exports.resize(crop, version);\n  if (resize) {\n    cmd.push(sprintf('-resize \"%s\"', resize));\n  }\n\n  // -write\n  if (last) {\n    cmd.push(version.path);\n  } else {\n    cmd.push(sprintf('-write %s +delete', version.path));\n  }\n\n  return cmd.join(' ');\n};\n"], "filenames": ["index.js"], "buggy_code_start_loc": [9], "buggy_code_end_loc": [16], "fixing_code_start_loc": [10], "fixing_code_end_loc": [21], "type": "CWE-78", "message": "im-resize through 2.3.2 allows remote attackers to execute arbitrary commands via the \"exec\" argument. The cmd argument used within index.js, can be controlled by user without any sanitization.", "other": {"cve": {"id": "CVE-2019-10787", "sourceIdentifier": "report@snyk.io", "published": "2020-02-04T21:15:10.667", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "im-resize through 2.3.2 allows remote attackers to execute arbitrary commands via the \"exec\" argument. The cmd argument used within index.js, can be controlled by user without any sanitization."}, {"lang": "es", "value": "im-resize versiones hasta 2.3.2, permite a atacantes remotos ejecutar comandos arbitrarios por medio del argumento \"exec\". El argumento cmd utilizado en el archivo index.js puede ser controlado por el usuario sin ning\u00fan tipo de saneamiento."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 10.0}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dnt:im-resize:*:*:*:*:*:node.js:*:*", "versionEndIncluding": "2.3.2", "matchCriteriaId": "EBF7CFE7-7BBE-49DB-B7FA-794556697ACB"}]}]}], "references": [{"url": "https://github.com/Turistforeningen/node-im-resize/commit/de624dacf6a50e39fe3472af1414d44937ce1f03", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-IMRESIZE-544183", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Turistforeningen/node-im-resize/commit/de624dacf6a50e39fe3472af1414d44937ce1f03"}}