{"buggy_code": ["/**\n * FreeRDP: A Remote Desktop Protocol Implementation\n * NCrush (RDP6) Bulk Data Compression\n *\n * Copyright 2014 Marc-Andre Moreau <marcandre.moreau@gmail.com>\n * Copyright 2017 Armin Novak <armin.novak@thincast.com>\n * Copyright 2017 Thincast Technologies GmbH\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include <winpr/assert.h>\n\n#include <freerdp/config.h>\n\n#include <winpr/crt.h>\n#include <winpr/print.h>\n#include <winpr/bitstream.h>\n\n#include <freerdp/log.h>\n#include <freerdp/types.h>\n\n#include \"ncrush.h\"\n\n#define TAG FREERDP_TAG(\"codec\")\n\nstruct s_NCRUSH_CONTEXT\n{\n\tALIGN64 BOOL Compressor;\n\tALIGN64 BYTE* HistoryPtr;\n\tALIGN64 UINT32 HistoryOffset;\n\tALIGN64 UINT32 HistoryEndOffset;\n\tALIGN64 UINT32 HistoryBufferSize;\n\tALIGN64 BYTE HistoryBuffer[65536];\n\tALIGN64 UINT32 HistoryBufferFence;\n\tALIGN64 UINT32 OffsetCache[4];\n\tALIGN64 UINT16 HashTable[65536];\n\tALIGN64 UINT16 MatchTable[65536];\n\tALIGN64 BYTE HuffTableCopyOffset[1024];\n\tALIGN64 BYTE HuffTableLOM[4096];\n};\n\nstatic const UINT16 HuffTableLEC[8192] = {\n\t0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA068, 0x5111, 0x7007, 0x6113, 0x90C0,\n\t0x6108, 0x8018, 0x611B, 0xA0B3, 0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA091,\n\t0x5121, 0x7080, 0x6115, 0xA03A, 0x610A, 0x9012, 0x611D, 0xA0D7, 0x510B, 0x6122, 0x610E, 0x9035,\n\t0x6001, 0x7123, 0x6118, 0xA07A, 0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C4,\n\t0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A1, 0x5121, 0x7102, 0x6116, 0xA056,\n\t0x610C, 0x901D, 0x611E, 0xA0E8, 0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA071,\n\t0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BB, 0x510F, 0x7004, 0x6110, 0x9049,\n\t0x6002, 0x800D, 0x6119, 0xA099, 0x5121, 0x70FF, 0x6115, 0xA04C, 0x610A, 0x9017, 0x611D, 0xA0DF,\n\t0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA087, 0x5111, 0x700A, 0x6114, 0xA023,\n\t0x6109, 0x80FE, 0x611C, 0xA0CE, 0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0A9,\n\t0x5121, 0x7103, 0x6116, 0xA05F, 0x610C, 0x9022, 0x611E, 0xA0F5, 0x510B, 0x611F, 0x610D, 0x9029,\n\t0x6000, 0x7105, 0x6117, 0xA06C, 0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B7,\n\t0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA095, 0x5121, 0x7080, 0x6115, 0xA046,\n\t0x610A, 0x9015, 0x611D, 0xA0DB, 0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA07E,\n\t0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0C9, 0x510F, 0x7005, 0x6112, 0x907F,\n\t0x6107, 0x8010, 0x611A, 0xA0A5, 0x5121, 0x7102, 0x6116, 0xA05B, 0x610C, 0x901F, 0x611E, 0xA0EC,\n\t0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA075, 0x5111, 0x7008, 0x6113, 0x90F1,\n\t0x6108, 0x8040, 0x611B, 0xA0BF, 0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09D,\n\t0x5121, 0x70FF, 0x6115, 0xA052, 0x610A, 0x901B, 0x611D, 0xA0E4, 0x510B, 0x6122, 0x610E, 0x903F,\n\t0x6001, 0x7124, 0x6118, 0xA08C, 0x5111, 0x700A, 0x6114, 0xA02F, 0x6109, 0x8120, 0x611C, 0xA0D3,\n\t0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AE, 0x5121, 0x7103, 0x6116, 0xA064,\n\t0x610C, 0x9025, 0x611E, 0xA0FA, 0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06A,\n\t0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B5, 0x510F, 0x7003, 0x6110, 0x9043,\n\t0x6002, 0x800B, 0x6119, 0xA093, 0x5121, 0x7080, 0x6115, 0xA03D, 0x610A, 0x9014, 0x611D, 0xA0D9,\n\t0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07C, 0x5111, 0x7009, 0x6114, 0x90F8,\n\t0x6109, 0x8060, 0x611C, 0xA0C7, 0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A3,\n\t0x5121, 0x7102, 0x6116, 0xA058, 0x610C, 0x901E, 0x611E, 0xA0EA, 0x510B, 0x611F, 0x610D, 0x9030,\n\t0x6000, 0x7106, 0x6117, 0xA073, 0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BD,\n\t0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09B, 0x5121, 0x70FF, 0x6115, 0xA04E,\n\t0x610A, 0x901A, 0x611D, 0xA0E2, 0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08A,\n\t0x5111, 0x700A, 0x6114, 0xA02D, 0x6109, 0x80FE, 0x611C, 0xA0D1, 0x510F, 0x7006, 0x6112, 0x9084,\n\t0x6107, 0x8011, 0x611A, 0xA0AC, 0x5121, 0x7103, 0x6116, 0xA062, 0x610C, 0x9024, 0x611E, 0xA0F7,\n\t0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06E, 0x5111, 0x7007, 0x6113, 0x90D0,\n\t0x6108, 0x8019, 0x611B, 0xA0B9, 0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA097,\n\t0x5121, 0x7080, 0x6115, 0xA04A, 0x610A, 0x9016, 0x611D, 0xA0DD, 0x510B, 0x6122, 0x610E, 0x9039,\n\t0x6001, 0x7123, 0x6118, 0xA085, 0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CB,\n\t0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A7, 0x5121, 0x7102, 0x6116, 0xA05D,\n\t0x610C, 0x9021, 0x611E, 0xA0EF, 0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA077,\n\t0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C2, 0x510F, 0x7004, 0x6110, 0x9059,\n\t0x6002, 0x800E, 0x6119, 0xA09F, 0x5121, 0x70FF, 0x6115, 0xA054, 0x610A, 0x901C, 0x611D, 0xA0E6,\n\t0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08E, 0x5111, 0x700A, 0x6114, 0xA034,\n\t0x6109, 0x8120, 0x611C, 0xA0D5, 0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B0,\n\t0x5121, 0x7103, 0x6116, 0xA066, 0x610C, 0x9026, 0x611E, 0xA104, 0x510B, 0x611F, 0x610D, 0x9027,\n\t0x6000, 0x7105, 0x6117, 0xA069, 0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B4,\n\t0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA092, 0x5121, 0x7080, 0x6115, 0xA03B,\n\t0x610A, 0x9012, 0x611D, 0xA0D8, 0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07B,\n\t0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C5, 0x510F, 0x7005, 0x6112, 0x9070,\n\t0x6107, 0x800F, 0x611A, 0xA0A2, 0x5121, 0x7102, 0x6116, 0xA057, 0x610C, 0x901D, 0x611E, 0xA0E9,\n\t0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA072, 0x5111, 0x7008, 0x6113, 0x90E0,\n\t0x6108, 0x8020, 0x611B, 0xA0BC, 0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA09A,\n\t0x5121, 0x70FF, 0x6115, 0xA04D, 0x610A, 0x9017, 0x611D, 0xA0E1, 0x510B, 0x6122, 0x610E, 0x903C,\n\t0x6001, 0x7124, 0x6118, 0xA089, 0x5111, 0x700A, 0x6114, 0xA02B, 0x6109, 0x80FE, 0x611C, 0xA0CF,\n\t0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0AA, 0x5121, 0x7103, 0x6116, 0xA061,\n\t0x610C, 0x9022, 0x611E, 0xA0F6, 0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06D,\n\t0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B8, 0x510F, 0x7003, 0x6110, 0x9044,\n\t0x6002, 0x800C, 0x6119, 0xA096, 0x5121, 0x7080, 0x6115, 0xA047, 0x610A, 0x9015, 0x611D, 0xA0DC,\n\t0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA083, 0x5111, 0x7009, 0x6114, 0x90FC,\n\t0x6109, 0x80F0, 0x611C, 0xA0CA, 0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A6,\n\t0x5121, 0x7102, 0x6116, 0xA05C, 0x610C, 0x901F, 0x611E, 0xA0ED, 0x510B, 0x611F, 0x610D, 0x9031,\n\t0x6000, 0x7106, 0x6117, 0xA076, 0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0C1,\n\t0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09E, 0x5121, 0x70FF, 0x6115, 0xA053,\n\t0x610A, 0x901B, 0x611D, 0xA0E5, 0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08D,\n\t0x5111, 0x700A, 0x6114, 0xA032, 0x6109, 0x8120, 0x611C, 0xA0D4, 0x510F, 0x7006, 0x6112, 0x9088,\n\t0x6107, 0x8013, 0x611A, 0xA0AF, 0x5121, 0x7103, 0x6116, 0xA065, 0x610C, 0x9025, 0x611E, 0xA0FB,\n\t0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06B, 0x5111, 0x7007, 0x6113, 0x90C6,\n\t0x6108, 0x8018, 0x611B, 0xA0B6, 0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA094,\n\t0x5121, 0x7080, 0x6115, 0xA045, 0x610A, 0x9014, 0x611D, 0xA0DA, 0x510B, 0x6122, 0x610E, 0x9037,\n\t0x6001, 0x7123, 0x6118, 0xA07D, 0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C8,\n\t0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A4, 0x5121, 0x7102, 0x6116, 0xA05A,\n\t0x610C, 0x901E, 0x611E, 0xA0EB, 0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA074,\n\t0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BE, 0x510F, 0x7004, 0x6110, 0x9050,\n\t0x6002, 0x800D, 0x6119, 0xA09C, 0x5121, 0x70FF, 0x6115, 0xA04F, 0x610A, 0x901A, 0x611D, 0xA0E3,\n\t0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08B, 0x5111, 0x700A, 0x6114, 0xA02E,\n\t0x6109, 0x80FE, 0x611C, 0xA0D2, 0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AD,\n\t0x5121, 0x7103, 0x6116, 0xA063, 0x610C, 0x9024, 0x611E, 0xA0F9, 0x510B, 0x611F, 0x610D, 0x902A,\n\t0x6000, 0x7105, 0x6117, 0xA06F, 0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0BA,\n\t0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA098, 0x5121, 0x7080, 0x6115, 0xA04B,\n\t0x610A, 0x9016, 0x611D, 0xA0DE, 0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA086,\n\t0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CD, 0x510F, 0x7005, 0x6112, 0x9081,\n\t0x6107, 0x8010, 0x611A, 0xA0A8, 0x5121, 0x7102, 0x6116, 0xA05E, 0x610C, 0x9021, 0x611E, 0xA0F3,\n\t0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA079, 0x5111, 0x7008, 0x6113, 0x90F2,\n\t0x6108, 0x8040, 0x611B, 0xA0C3, 0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA0A0,\n\t0x5121, 0x70FF, 0x6115, 0xA055, 0x610A, 0x901C, 0x611D, 0xA0E7, 0x510B, 0x6122, 0x610E, 0x9041,\n\t0x6001, 0x7124, 0x6118, 0xA08F, 0x5111, 0x700A, 0x6114, 0xA036, 0x6109, 0x8120, 0x611C, 0xA0D6,\n\t0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B1, 0x5121, 0x7103, 0x6116, 0xA067,\n\t0x610C, 0x9026, 0x611E, 0xB0B2, 0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA068,\n\t0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B3, 0x510F, 0x7003, 0x6110, 0x9042,\n\t0x6002, 0x800B, 0x6119, 0xA091, 0x5121, 0x7080, 0x6115, 0xA03A, 0x610A, 0x9012, 0x611D, 0xA0D7,\n\t0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07A, 0x5111, 0x7009, 0x6114, 0x90F4,\n\t0x6109, 0x8060, 0x611C, 0xA0C4, 0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A1,\n\t0x5121, 0x7102, 0x6116, 0xA056, 0x610C, 0x901D, 0x611E, 0xA0E8, 0x510B, 0x611F, 0x610D, 0x902C,\n\t0x6000, 0x7106, 0x6117, 0xA071, 0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BB,\n\t0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA099, 0x5121, 0x70FF, 0x6115, 0xA04C,\n\t0x610A, 0x9017, 0x611D, 0xA0DF, 0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA087,\n\t0x5111, 0x700A, 0x6114, 0xA023, 0x6109, 0x80FE, 0x611C, 0xA0CE, 0x510F, 0x7006, 0x6112, 0x9082,\n\t0x6107, 0x8011, 0x611A, 0xA0A9, 0x5121, 0x7103, 0x6116, 0xA05F, 0x610C, 0x9022, 0x611E, 0xA0F5,\n\t0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06C, 0x5111, 0x7007, 0x6113, 0x90CC,\n\t0x6108, 0x8019, 0x611B, 0xA0B7, 0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA095,\n\t0x5121, 0x7080, 0x6115, 0xA046, 0x610A, 0x9015, 0x611D, 0xA0DB, 0x510B, 0x6122, 0x610E, 0x9038,\n\t0x6001, 0x7123, 0x6118, 0xA07E, 0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0C9,\n\t0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A5, 0x5121, 0x7102, 0x6116, 0xA05B,\n\t0x610C, 0x901F, 0x611E, 0xA0EC, 0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA075,\n\t0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0BF, 0x510F, 0x7004, 0x6110, 0x9051,\n\t0x6002, 0x800E, 0x6119, 0xA09D, 0x5121, 0x70FF, 0x6115, 0xA052, 0x610A, 0x901B, 0x611D, 0xA0E4,\n\t0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08C, 0x5111, 0x700A, 0x6114, 0xA02F,\n\t0x6109, 0x8120, 0x611C, 0xA0D3, 0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AE,\n\t0x5121, 0x7103, 0x6116, 0xA064, 0x610C, 0x9025, 0x611E, 0xA0FA, 0x510B, 0x611F, 0x610D, 0x9028,\n\t0x6000, 0x7105, 0x6117, 0xA06A, 0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B5,\n\t0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA093, 0x5121, 0x7080, 0x6115, 0xA03D,\n\t0x610A, 0x9014, 0x611D, 0xA0D9, 0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07C,\n\t0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C7, 0x510F, 0x7005, 0x6112, 0x9078,\n\t0x6107, 0x800F, 0x611A, 0xA0A3, 0x5121, 0x7102, 0x6116, 0xA058, 0x610C, 0x901E, 0x611E, 0xA0EA,\n\t0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA073, 0x5111, 0x7008, 0x6113, 0x90EE,\n\t0x6108, 0x8020, 0x611B, 0xA0BD, 0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09B,\n\t0x5121, 0x70FF, 0x6115, 0xA04E, 0x610A, 0x901A, 0x611D, 0xA0E2, 0x510B, 0x6122, 0x610E, 0x903E,\n\t0x6001, 0x7124, 0x6118, 0xA08A, 0x5111, 0x700A, 0x6114, 0xA02D, 0x6109, 0x80FE, 0x611C, 0xA0D1,\n\t0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AC, 0x5121, 0x7103, 0x6116, 0xA062,\n\t0x610C, 0x9024, 0x611E, 0xA0F7, 0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06E,\n\t0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0B9, 0x510F, 0x7003, 0x6110, 0x9048,\n\t0x6002, 0x800C, 0x6119, 0xA097, 0x5121, 0x7080, 0x6115, 0xA04A, 0x610A, 0x9016, 0x611D, 0xA0DD,\n\t0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA085, 0x5111, 0x7009, 0x6114, 0x90FD,\n\t0x6109, 0x80F0, 0x611C, 0xA0CB, 0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A7,\n\t0x5121, 0x7102, 0x6116, 0xA05D, 0x610C, 0x9021, 0x611E, 0xA0EF, 0x510B, 0x611F, 0x610D, 0x9033,\n\t0x6000, 0x7106, 0x6117, 0xA077, 0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C2,\n\t0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA09F, 0x5121, 0x70FF, 0x6115, 0xA054,\n\t0x610A, 0x901C, 0x611D, 0xA0E6, 0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08E,\n\t0x5111, 0x700A, 0x6114, 0xA034, 0x6109, 0x8120, 0x611C, 0xA0D5, 0x510F, 0x7006, 0x6112, 0x9090,\n\t0x6107, 0x8013, 0x611A, 0xA0B0, 0x5121, 0x7103, 0x6116, 0xA066, 0x610C, 0x9026, 0x611E, 0xA104,\n\t0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA069, 0x5111, 0x7007, 0x6113, 0x90C0,\n\t0x6108, 0x8018, 0x611B, 0xA0B4, 0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA092,\n\t0x5121, 0x7080, 0x6115, 0xA03B, 0x610A, 0x9012, 0x611D, 0xA0D8, 0x510B, 0x6122, 0x610E, 0x9035,\n\t0x6001, 0x7123, 0x6118, 0xA07B, 0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C5,\n\t0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A2, 0x5121, 0x7102, 0x6116, 0xA057,\n\t0x610C, 0x901D, 0x611E, 0xA0E9, 0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA072,\n\t0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BC, 0x510F, 0x7004, 0x6110, 0x9049,\n\t0x6002, 0x800D, 0x6119, 0xA09A, 0x5121, 0x70FF, 0x6115, 0xA04D, 0x610A, 0x9017, 0x611D, 0xA0E1,\n\t0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA089, 0x5111, 0x700A, 0x6114, 0xA02B,\n\t0x6109, 0x80FE, 0x611C, 0xA0CF, 0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0AA,\n\t0x5121, 0x7103, 0x6116, 0xA061, 0x610C, 0x9022, 0x611E, 0xA0F6, 0x510B, 0x611F, 0x610D, 0x9029,\n\t0x6000, 0x7105, 0x6117, 0xA06D, 0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B8,\n\t0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA096, 0x5121, 0x7080, 0x6115, 0xA047,\n\t0x610A, 0x9015, 0x611D, 0xA0DC, 0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA083,\n\t0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0CA, 0x510F, 0x7005, 0x6112, 0x907F,\n\t0x6107, 0x8010, 0x611A, 0xA0A6, 0x5121, 0x7102, 0x6116, 0xA05C, 0x610C, 0x901F, 0x611E, 0xA0ED,\n\t0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA076, 0x5111, 0x7008, 0x6113, 0x90F1,\n\t0x6108, 0x8040, 0x611B, 0xA0C1, 0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09E,\n\t0x5121, 0x70FF, 0x6115, 0xA053, 0x610A, 0x901B, 0x611D, 0xA0E5, 0x510B, 0x6122, 0x610E, 0x903F,\n\t0x6001, 0x7124, 0x6118, 0xA08D, 0x5111, 0x700A, 0x6114, 0xA032, 0x6109, 0x8120, 0x611C, 0xA0D4,\n\t0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AF, 0x5121, 0x7103, 0x6116, 0xA065,\n\t0x610C, 0x9025, 0x611E, 0xA0FB, 0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06B,\n\t0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B6, 0x510F, 0x7003, 0x6110, 0x9043,\n\t0x6002, 0x800B, 0x6119, 0xA094, 0x5121, 0x7080, 0x6115, 0xA045, 0x610A, 0x9014, 0x611D, 0xA0DA,\n\t0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07D, 0x5111, 0x7009, 0x6114, 0x90F8,\n\t0x6109, 0x8060, 0x611C, 0xA0C8, 0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A4,\n\t0x5121, 0x7102, 0x6116, 0xA05A, 0x610C, 0x901E, 0x611E, 0xA0EB, 0x510B, 0x611F, 0x610D, 0x9030,\n\t0x6000, 0x7106, 0x6117, 0xA074, 0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BE,\n\t0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09C, 0x5121, 0x70FF, 0x6115, 0xA04F,\n\t0x610A, 0x901A, 0x611D, 0xA0E3, 0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08B,\n\t0x5111, 0x700A, 0x6114, 0xA02E, 0x6109, 0x80FE, 0x611C, 0xA0D2, 0x510F, 0x7006, 0x6112, 0x9084,\n\t0x6107, 0x8011, 0x611A, 0xA0AD, 0x5121, 0x7103, 0x6116, 0xA063, 0x610C, 0x9024, 0x611E, 0xA0F9,\n\t0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06F, 0x5111, 0x7007, 0x6113, 0x90D0,\n\t0x6108, 0x8019, 0x611B, 0xA0BA, 0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA098,\n\t0x5121, 0x7080, 0x6115, 0xA04B, 0x610A, 0x9016, 0x611D, 0xA0DE, 0x510B, 0x6122, 0x610E, 0x9039,\n\t0x6001, 0x7123, 0x6118, 0xA086, 0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CD,\n\t0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A8, 0x5121, 0x7102, 0x6116, 0xA05E,\n\t0x610C, 0x9021, 0x611E, 0xA0F3, 0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA079,\n\t0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C3, 0x510F, 0x7004, 0x6110, 0x9059,\n\t0x6002, 0x800E, 0x6119, 0xA0A0, 0x5121, 0x70FF, 0x6115, 0xA055, 0x610A, 0x901C, 0x611D, 0xA0E7,\n\t0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08F, 0x5111, 0x700A, 0x6114, 0xA036,\n\t0x6109, 0x8120, 0x611C, 0xA0D6, 0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B1,\n\t0x5121, 0x7103, 0x6116, 0xA067, 0x610C, 0x9026, 0x611E, 0xD0AB, 0x510B, 0x611F, 0x610D, 0x9027,\n\t0x6000, 0x7105, 0x6117, 0xA068, 0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B3,\n\t0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA091, 0x5121, 0x7080, 0x6115, 0xA03A,\n\t0x610A, 0x9012, 0x611D, 0xA0D7, 0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07A,\n\t0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C4, 0x510F, 0x7005, 0x6112, 0x9070,\n\t0x6107, 0x800F, 0x611A, 0xA0A1, 0x5121, 0x7102, 0x6116, 0xA056, 0x610C, 0x901D, 0x611E, 0xA0E8,\n\t0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA071, 0x5111, 0x7008, 0x6113, 0x90E0,\n\t0x6108, 0x8020, 0x611B, 0xA0BB, 0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA099,\n\t0x5121, 0x70FF, 0x6115, 0xA04C, 0x610A, 0x9017, 0x611D, 0xA0DF, 0x510B, 0x6122, 0x610E, 0x903C,\n\t0x6001, 0x7124, 0x6118, 0xA087, 0x5111, 0x700A, 0x6114, 0xA023, 0x6109, 0x80FE, 0x611C, 0xA0CE,\n\t0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0A9, 0x5121, 0x7103, 0x6116, 0xA05F,\n\t0x610C, 0x9022, 0x611E, 0xA0F5, 0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06C,\n\t0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B7, 0x510F, 0x7003, 0x6110, 0x9044,\n\t0x6002, 0x800C, 0x6119, 0xA095, 0x5121, 0x7080, 0x6115, 0xA046, 0x610A, 0x9015, 0x611D, 0xA0DB,\n\t0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA07E, 0x5111, 0x7009, 0x6114, 0x90FC,\n\t0x6109, 0x80F0, 0x611C, 0xA0C9, 0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A5,\n\t0x5121, 0x7102, 0x6116, 0xA05B, 0x610C, 0x901F, 0x611E, 0xA0EC, 0x510B, 0x611F, 0x610D, 0x9031,\n\t0x6000, 0x7106, 0x6117, 0xA075, 0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0BF,\n\t0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09D, 0x5121, 0x70FF, 0x6115, 0xA052,\n\t0x610A, 0x901B, 0x611D, 0xA0E4, 0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08C,\n\t0x5111, 0x700A, 0x6114, 0xA02F, 0x6109, 0x8120, 0x611C, 0xA0D3, 0x510F, 0x7006, 0x6112, 0x9088,\n\t0x6107, 0x8013, 0x611A, 0xA0AE, 0x5121, 0x7103, 0x6116, 0xA064, 0x610C, 0x9025, 0x611E, 0xA0FA,\n\t0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06A, 0x5111, 0x7007, 0x6113, 0x90C6,\n\t0x6108, 0x8018, 0x611B, 0xA0B5, 0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA093,\n\t0x5121, 0x7080, 0x6115, 0xA03D, 0x610A, 0x9014, 0x611D, 0xA0D9, 0x510B, 0x6122, 0x610E, 0x9037,\n\t0x6001, 0x7123, 0x6118, 0xA07C, 0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C7,\n\t0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A3, 0x5121, 0x7102, 0x6116, 0xA058,\n\t0x610C, 0x901E, 0x611E, 0xA0EA, 0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA073,\n\t0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BD, 0x510F, 0x7004, 0x6110, 0x9050,\n\t0x6002, 0x800D, 0x6119, 0xA09B, 0x5121, 0x70FF, 0x6115, 0xA04E, 0x610A, 0x901A, 0x611D, 0xA0E2,\n\t0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08A, 0x5111, 0x700A, 0x6114, 0xA02D,\n\t0x6109, 0x80FE, 0x611C, 0xA0D1, 0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AC,\n\t0x5121, 0x7103, 0x6116, 0xA062, 0x610C, 0x9024, 0x611E, 0xA0F7, 0x510B, 0x611F, 0x610D, 0x902A,\n\t0x6000, 0x7105, 0x6117, 0xA06E, 0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0B9,\n\t0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA097, 0x5121, 0x7080, 0x6115, 0xA04A,\n\t0x610A, 0x9016, 0x611D, 0xA0DD, 0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA085,\n\t0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CB, 0x510F, 0x7005, 0x6112, 0x9081,\n\t0x6107, 0x8010, 0x611A, 0xA0A7, 0x5121, 0x7102, 0x6116, 0xA05D, 0x610C, 0x9021, 0x611E, 0xA0EF,\n\t0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA077, 0x5111, 0x7008, 0x6113, 0x90F2,\n\t0x6108, 0x8040, 0x611B, 0xA0C2, 0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA09F,\n\t0x5121, 0x70FF, 0x6115, 0xA054, 0x610A, 0x901C, 0x611D, 0xA0E6, 0x510B, 0x6122, 0x610E, 0x9041,\n\t0x6001, 0x7124, 0x6118, 0xA08E, 0x5111, 0x700A, 0x6114, 0xA034, 0x6109, 0x8120, 0x611C, 0xA0D5,\n\t0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B0, 0x5121, 0x7103, 0x6116, 0xA066,\n\t0x610C, 0x9026, 0x611E, 0xA104, 0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA069,\n\t0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B4, 0x510F, 0x7003, 0x6110, 0x9042,\n\t0x6002, 0x800B, 0x6119, 0xA092, 0x5121, 0x7080, 0x6115, 0xA03B, 0x610A, 0x9012, 0x611D, 0xA0D8,\n\t0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07B, 0x5111, 0x7009, 0x6114, 0x90F4,\n\t0x6109, 0x8060, 0x611C, 0xA0C5, 0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A2,\n\t0x5121, 0x7102, 0x6116, 0xA057, 0x610C, 0x901D, 0x611E, 0xA0E9, 0x510B, 0x611F, 0x610D, 0x902C,\n\t0x6000, 0x7106, 0x6117, 0xA072, 0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BC,\n\t0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA09A, 0x5121, 0x70FF, 0x6115, 0xA04D,\n\t0x610A, 0x9017, 0x611D, 0xA0E1, 0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA089,\n\t0x5111, 0x700A, 0x6114, 0xA02B, 0x6109, 0x80FE, 0x611C, 0xA0CF, 0x510F, 0x7006, 0x6112, 0x9082,\n\t0x6107, 0x8011, 0x611A, 0xA0AA, 0x5121, 0x7103, 0x6116, 0xA061, 0x610C, 0x9022, 0x611E, 0xA0F6,\n\t0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06D, 0x5111, 0x7007, 0x6113, 0x90CC,\n\t0x6108, 0x8019, 0x611B, 0xA0B8, 0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA096,\n\t0x5121, 0x7080, 0x6115, 0xA047, 0x610A, 0x9015, 0x611D, 0xA0DC, 0x510B, 0x6122, 0x610E, 0x9038,\n\t0x6001, 0x7123, 0x6118, 0xA083, 0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0CA,\n\t0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A6, 0x5121, 0x7102, 0x6116, 0xA05C,\n\t0x610C, 0x901F, 0x611E, 0xA0ED, 0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA076,\n\t0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0C1, 0x510F, 0x7004, 0x6110, 0x9051,\n\t0x6002, 0x800E, 0x6119, 0xA09E, 0x5121, 0x70FF, 0x6115, 0xA053, 0x610A, 0x901B, 0x611D, 0xA0E5,\n\t0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08D, 0x5111, 0x700A, 0x6114, 0xA032,\n\t0x6109, 0x8120, 0x611C, 0xA0D4, 0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AF,\n\t0x5121, 0x7103, 0x6116, 0xA065, 0x610C, 0x9025, 0x611E, 0xA0FB, 0x510B, 0x611F, 0x610D, 0x9028,\n\t0x6000, 0x7105, 0x6117, 0xA06B, 0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B6,\n\t0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA094, 0x5121, 0x7080, 0x6115, 0xA045,\n\t0x610A, 0x9014, 0x611D, 0xA0DA, 0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07D,\n\t0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C8, 0x510F, 0x7005, 0x6112, 0x9078,\n\t0x6107, 0x800F, 0x611A, 0xA0A4, 0x5121, 0x7102, 0x6116, 0xA05A, 0x610C, 0x901E, 0x611E, 0xA0EB,\n\t0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA074, 0x5111, 0x7008, 0x6113, 0x90EE,\n\t0x6108, 0x8020, 0x611B, 0xA0BE, 0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09C,\n\t0x5121, 0x70FF, 0x6115, 0xA04F, 0x610A, 0x901A, 0x611D, 0xA0E3, 0x510B, 0x6122, 0x610E, 0x903E,\n\t0x6001, 0x7124, 0x6118, 0xA08B, 0x5111, 0x700A, 0x6114, 0xA02E, 0x6109, 0x80FE, 0x611C, 0xA0D2,\n\t0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AD, 0x5121, 0x7103, 0x6116, 0xA063,\n\t0x610C, 0x9024, 0x611E, 0xA0F9, 0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06F,\n\t0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0BA, 0x510F, 0x7003, 0x6110, 0x9048,\n\t0x6002, 0x800C, 0x6119, 0xA098, 0x5121, 0x7080, 0x6115, 0xA04B, 0x610A, 0x9016, 0x611D, 0xA0DE,\n\t0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA086, 0x5111, 0x7009, 0x6114, 0x90FD,\n\t0x6109, 0x80F0, 0x611C, 0xA0CD, 0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A8,\n\t0x5121, 0x7102, 0x6116, 0xA05E, 0x610C, 0x9021, 0x611E, 0xA0F3, 0x510B, 0x611F, 0x610D, 0x9033,\n\t0x6000, 0x7106, 0x6117, 0xA079, 0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C3,\n\t0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA0A0, 0x5121, 0x70FF, 0x6115, 0xA055,\n\t0x610A, 0x901C, 0x611D, 0xA0E7, 0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08F,\n\t0x5111, 0x700A, 0x6114, 0xA036, 0x6109, 0x8120, 0x611C, 0xA0D6, 0x510F, 0x7006, 0x6112, 0x9090,\n\t0x6107, 0x8013, 0x611A, 0xA0B1, 0x5121, 0x7103, 0x6116, 0xA067, 0x610C, 0x9026, 0x611E, 0xB0B2,\n\t0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA068, 0x5111, 0x7007, 0x6113, 0x90C0,\n\t0x6108, 0x8018, 0x611B, 0xA0B3, 0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA091,\n\t0x5121, 0x7080, 0x6115, 0xA03A, 0x610A, 0x9012, 0x611D, 0xA0D7, 0x510B, 0x6122, 0x610E, 0x9035,\n\t0x6001, 0x7123, 0x6118, 0xA07A, 0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C4,\n\t0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A1, 0x5121, 0x7102, 0x6116, 0xA056,\n\t0x610C, 0x901D, 0x611E, 0xA0E8, 0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA071,\n\t0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BB, 0x510F, 0x7004, 0x6110, 0x9049,\n\t0x6002, 0x800D, 0x6119, 0xA099, 0x5121, 0x70FF, 0x6115, 0xA04C, 0x610A, 0x9017, 0x611D, 0xA0DF,\n\t0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA087, 0x5111, 0x700A, 0x6114, 0xA023,\n\t0x6109, 0x80FE, 0x611C, 0xA0CE, 0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0A9,\n\t0x5121, 0x7103, 0x6116, 0xA05F, 0x610C, 0x9022, 0x611E, 0xA0F5, 0x510B, 0x611F, 0x610D, 0x9029,\n\t0x6000, 0x7105, 0x6117, 0xA06C, 0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B7,\n\t0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA095, 0x5121, 0x7080, 0x6115, 0xA046,\n\t0x610A, 0x9015, 0x611D, 0xA0DB, 0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA07E,\n\t0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0C9, 0x510F, 0x7005, 0x6112, 0x907F,\n\t0x6107, 0x8010, 0x611A, 0xA0A5, 0x5121, 0x7102, 0x6116, 0xA05B, 0x610C, 0x901F, 0x611E, 0xA0EC,\n\t0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA075, 0x5111, 0x7008, 0x6113, 0x90F1,\n\t0x6108, 0x8040, 0x611B, 0xA0BF, 0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09D,\n\t0x5121, 0x70FF, 0x6115, 0xA052, 0x610A, 0x901B, 0x611D, 0xA0E4, 0x510B, 0x6122, 0x610E, 0x903F,\n\t0x6001, 0x7124, 0x6118, 0xA08C, 0x5111, 0x700A, 0x6114, 0xA02F, 0x6109, 0x8120, 0x611C, 0xA0D3,\n\t0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AE, 0x5121, 0x7103, 0x6116, 0xA064,\n\t0x610C, 0x9025, 0x611E, 0xA0FA, 0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06A,\n\t0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B5, 0x510F, 0x7003, 0x6110, 0x9043,\n\t0x6002, 0x800B, 0x6119, 0xA093, 0x5121, 0x7080, 0x6115, 0xA03D, 0x610A, 0x9014, 0x611D, 0xA0D9,\n\t0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07C, 0x5111, 0x7009, 0x6114, 0x90F8,\n\t0x6109, 0x8060, 0x611C, 0xA0C7, 0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A3,\n\t0x5121, 0x7102, 0x6116, 0xA058, 0x610C, 0x901E, 0x611E, 0xA0EA, 0x510B, 0x611F, 0x610D, 0x9030,\n\t0x6000, 0x7106, 0x6117, 0xA073, 0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BD,\n\t0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09B, 0x5121, 0x70FF, 0x6115, 0xA04E,\n\t0x610A, 0x901A, 0x611D, 0xA0E2, 0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08A,\n\t0x5111, 0x700A, 0x6114, 0xA02D, 0x6109, 0x80FE, 0x611C, 0xA0D1, 0x510F, 0x7006, 0x6112, 0x9084,\n\t0x6107, 0x8011, 0x611A, 0xA0AC, 0x5121, 0x7103, 0x6116, 0xA062, 0x610C, 0x9024, 0x611E, 0xA0F7,\n\t0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06E, 0x5111, 0x7007, 0x6113, 0x90D0,\n\t0x6108, 0x8019, 0x611B, 0xA0B9, 0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA097,\n\t0x5121, 0x7080, 0x6115, 0xA04A, 0x610A, 0x9016, 0x611D, 0xA0DD, 0x510B, 0x6122, 0x610E, 0x9039,\n\t0x6001, 0x7123, 0x6118, 0xA085, 0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CB,\n\t0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A7, 0x5121, 0x7102, 0x6116, 0xA05D,\n\t0x610C, 0x9021, 0x611E, 0xA0EF, 0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA077,\n\t0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C2, 0x510F, 0x7004, 0x6110, 0x9059,\n\t0x6002, 0x800E, 0x6119, 0xA09F, 0x5121, 0x70FF, 0x6115, 0xA054, 0x610A, 0x901C, 0x611D, 0xA0E6,\n\t0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08E, 0x5111, 0x700A, 0x6114, 0xA034,\n\t0x6109, 0x8120, 0x611C, 0xA0D5, 0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B0,\n\t0x5121, 0x7103, 0x6116, 0xA066, 0x610C, 0x9026, 0x611E, 0xA104, 0x510B, 0x611F, 0x610D, 0x9027,\n\t0x6000, 0x7105, 0x6117, 0xA069, 0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B4,\n\t0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA092, 0x5121, 0x7080, 0x6115, 0xA03B,\n\t0x610A, 0x9012, 0x611D, 0xA0D8, 0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07B,\n\t0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C5, 0x510F, 0x7005, 0x6112, 0x9070,\n\t0x6107, 0x800F, 0x611A, 0xA0A2, 0x5121, 0x7102, 0x6116, 0xA057, 0x610C, 0x901D, 0x611E, 0xA0E9,\n\t0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA072, 0x5111, 0x7008, 0x6113, 0x90E0,\n\t0x6108, 0x8020, 0x611B, 0xA0BC, 0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA09A,\n\t0x5121, 0x70FF, 0x6115, 0xA04D, 0x610A, 0x9017, 0x611D, 0xA0E1, 0x510B, 0x6122, 0x610E, 0x903C,\n\t0x6001, 0x7124, 0x6118, 0xA089, 0x5111, 0x700A, 0x6114, 0xA02B, 0x6109, 0x80FE, 0x611C, 0xA0CF,\n\t0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0AA, 0x5121, 0x7103, 0x6116, 0xA061,\n\t0x610C, 0x9022, 0x611E, 0xA0F6, 0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06D,\n\t0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B8, 0x510F, 0x7003, 0x6110, 0x9044,\n\t0x6002, 0x800C, 0x6119, 0xA096, 0x5121, 0x7080, 0x6115, 0xA047, 0x610A, 0x9015, 0x611D, 0xA0DC,\n\t0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA083, 0x5111, 0x7009, 0x6114, 0x90FC,\n\t0x6109, 0x80F0, 0x611C, 0xA0CA, 0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A6,\n\t0x5121, 0x7102, 0x6116, 0xA05C, 0x610C, 0x901F, 0x611E, 0xA0ED, 0x510B, 0x611F, 0x610D, 0x9031,\n\t0x6000, 0x7106, 0x6117, 0xA076, 0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0C1,\n\t0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09E, 0x5121, 0x70FF, 0x6115, 0xA053,\n\t0x610A, 0x901B, 0x611D, 0xA0E5, 0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08D,\n\t0x5111, 0x700A, 0x6114, 0xA032, 0x6109, 0x8120, 0x611C, 0xA0D4, 0x510F, 0x7006, 0x6112, 0x9088,\n\t0x6107, 0x8013, 0x611A, 0xA0AF, 0x5121, 0x7103, 0x6116, 0xA065, 0x610C, 0x9025, 0x611E, 0xA0FB,\n\t0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06B, 0x5111, 0x7007, 0x6113, 0x90C6,\n\t0x6108, 0x8018, 0x611B, 0xA0B6, 0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA094,\n\t0x5121, 0x7080, 0x6115, 0xA045, 0x610A, 0x9014, 0x611D, 0xA0DA, 0x510B, 0x6122, 0x610E, 0x9037,\n\t0x6001, 0x7123, 0x6118, 0xA07D, 0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C8,\n\t0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A4, 0x5121, 0x7102, 0x6116, 0xA05A,\n\t0x610C, 0x901E, 0x611E, 0xA0EB, 0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA074,\n\t0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BE, 0x510F, 0x7004, 0x6110, 0x9050,\n\t0x6002, 0x800D, 0x6119, 0xA09C, 0x5121, 0x70FF, 0x6115, 0xA04F, 0x610A, 0x901A, 0x611D, 0xA0E3,\n\t0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08B, 0x5111, 0x700A, 0x6114, 0xA02E,\n\t0x6109, 0x80FE, 0x611C, 0xA0D2, 0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AD,\n\t0x5121, 0x7103, 0x6116, 0xA063, 0x610C, 0x9024, 0x611E, 0xA0F9, 0x510B, 0x611F, 0x610D, 0x902A,\n\t0x6000, 0x7105, 0x6117, 0xA06F, 0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0BA,\n\t0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA098, 0x5121, 0x7080, 0x6115, 0xA04B,\n\t0x610A, 0x9016, 0x611D, 0xA0DE, 0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA086,\n\t0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CD, 0x510F, 0x7005, 0x6112, 0x9081,\n\t0x6107, 0x8010, 0x611A, 0xA0A8, 0x5121, 0x7102, 0x6116, 0xA05E, 0x610C, 0x9021, 0x611E, 0xA0F3,\n\t0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA079, 0x5111, 0x7008, 0x6113, 0x90F2,\n\t0x6108, 0x8040, 0x611B, 0xA0C3, 0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA0A0,\n\t0x5121, 0x70FF, 0x6115, 0xA055, 0x610A, 0x901C, 0x611D, 0xA0E7, 0x510B, 0x6122, 0x610E, 0x9041,\n\t0x6001, 0x7124, 0x6118, 0xA08F, 0x5111, 0x700A, 0x6114, 0xA036, 0x6109, 0x8120, 0x611C, 0xA0D6,\n\t0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B1, 0x5121, 0x7103, 0x6116, 0xA067,\n\t0x610C, 0x9026, 0x611E, 0xD101, 0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA068,\n\t0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B3, 0x510F, 0x7003, 0x6110, 0x9042,\n\t0x6002, 0x800B, 0x6119, 0xA091, 0x5121, 0x7080, 0x6115, 0xA03A, 0x610A, 0x9012, 0x611D, 0xA0D7,\n\t0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07A, 0x5111, 0x7009, 0x6114, 0x90F4,\n\t0x6109, 0x8060, 0x611C, 0xA0C4, 0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A1,\n\t0x5121, 0x7102, 0x6116, 0xA056, 0x610C, 0x901D, 0x611E, 0xA0E8, 0x510B, 0x611F, 0x610D, 0x902C,\n\t0x6000, 0x7106, 0x6117, 0xA071, 0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BB,\n\t0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA099, 0x5121, 0x70FF, 0x6115, 0xA04C,\n\t0x610A, 0x9017, 0x611D, 0xA0DF, 0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA087,\n\t0x5111, 0x700A, 0x6114, 0xA023, 0x6109, 0x80FE, 0x611C, 0xA0CE, 0x510F, 0x7006, 0x6112, 0x9082,\n\t0x6107, 0x8011, 0x611A, 0xA0A9, 0x5121, 0x7103, 0x6116, 0xA05F, 0x610C, 0x9022, 0x611E, 0xA0F5,\n\t0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06C, 0x5111, 0x7007, 0x6113, 0x90CC,\n\t0x6108, 0x8019, 0x611B, 0xA0B7, 0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA095,\n\t0x5121, 0x7080, 0x6115, 0xA046, 0x610A, 0x9015, 0x611D, 0xA0DB, 0x510B, 0x6122, 0x610E, 0x9038,\n\t0x6001, 0x7123, 0x6118, 0xA07E, 0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0C9,\n\t0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A5, 0x5121, 0x7102, 0x6116, 0xA05B,\n\t0x610C, 0x901F, 0x611E, 0xA0EC, 0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA075,\n\t0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0BF, 0x510F, 0x7004, 0x6110, 0x9051,\n\t0x6002, 0x800E, 0x6119, 0xA09D, 0x5121, 0x70FF, 0x6115, 0xA052, 0x610A, 0x901B, 0x611D, 0xA0E4,\n\t0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08C, 0x5111, 0x700A, 0x6114, 0xA02F,\n\t0x6109, 0x8120, 0x611C, 0xA0D3, 0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AE,\n\t0x5121, 0x7103, 0x6116, 0xA064, 0x610C, 0x9025, 0x611E, 0xA0FA, 0x510B, 0x611F, 0x610D, 0x9028,\n\t0x6000, 0x7105, 0x6117, 0xA06A, 0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B5,\n\t0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA093, 0x5121, 0x7080, 0x6115, 0xA03D,\n\t0x610A, 0x9014, 0x611D, 0xA0D9, 0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07C,\n\t0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C7, 0x510F, 0x7005, 0x6112, 0x9078,\n\t0x6107, 0x800F, 0x611A, 0xA0A3, 0x5121, 0x7102, 0x6116, 0xA058, 0x610C, 0x901E, 0x611E, 0xA0EA,\n\t0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA073, 0x5111, 0x7008, 0x6113, 0x90EE,\n\t0x6108, 0x8020, 0x611B, 0xA0BD, 0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09B,\n\t0x5121, 0x70FF, 0x6115, 0xA04E, 0x610A, 0x901A, 0x611D, 0xA0E2, 0x510B, 0x6122, 0x610E, 0x903E,\n\t0x6001, 0x7124, 0x6118, 0xA08A, 0x5111, 0x700A, 0x6114, 0xA02D, 0x6109, 0x80FE, 0x611C, 0xA0D1,\n\t0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AC, 0x5121, 0x7103, 0x6116, 0xA062,\n\t0x610C, 0x9024, 0x611E, 0xA0F7, 0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06E,\n\t0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0B9, 0x510F, 0x7003, 0x6110, 0x9048,\n\t0x6002, 0x800C, 0x6119, 0xA097, 0x5121, 0x7080, 0x6115, 0xA04A, 0x610A, 0x9016, 0x611D, 0xA0DD,\n\t0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA085, 0x5111, 0x7009, 0x6114, 0x90FD,\n\t0x6109, 0x80F0, 0x611C, 0xA0CB, 0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A7,\n\t0x5121, 0x7102, 0x6116, 0xA05D, 0x610C, 0x9021, 0x611E, 0xA0EF, 0x510B, 0x611F, 0x610D, 0x9033,\n\t0x6000, 0x7106, 0x6117, 0xA077, 0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C2,\n\t0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA09F, 0x5121, 0x70FF, 0x6115, 0xA054,\n\t0x610A, 0x901C, 0x611D, 0xA0E6, 0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08E,\n\t0x5111, 0x700A, 0x6114, 0xA034, 0x6109, 0x8120, 0x611C, 0xA0D5, 0x510F, 0x7006, 0x6112, 0x9090,\n\t0x6107, 0x8013, 0x611A, 0xA0B0, 0x5121, 0x7103, 0x6116, 0xA066, 0x610C, 0x9026, 0x611E, 0xA104,\n\t0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA069, 0x5111, 0x7007, 0x6113, 0x90C0,\n\t0x6108, 0x8018, 0x611B, 0xA0B4, 0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA092,\n\t0x5121, 0x7080, 0x6115, 0xA03B, 0x610A, 0x9012, 0x611D, 0xA0D8, 0x510B, 0x6122, 0x610E, 0x9035,\n\t0x6001, 0x7123, 0x6118, 0xA07B, 0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C5,\n\t0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A2, 0x5121, 0x7102, 0x6116, 0xA057,\n\t0x610C, 0x901D, 0x611E, 0xA0E9, 0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA072,\n\t0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BC, 0x510F, 0x7004, 0x6110, 0x9049,\n\t0x6002, 0x800D, 0x6119, 0xA09A, 0x5121, 0x70FF, 0x6115, 0xA04D, 0x610A, 0x9017, 0x611D, 0xA0E1,\n\t0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA089, 0x5111, 0x700A, 0x6114, 0xA02B,\n\t0x6109, 0x80FE, 0x611C, 0xA0CF, 0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0AA,\n\t0x5121, 0x7103, 0x6116, 0xA061, 0x610C, 0x9022, 0x611E, 0xA0F6, 0x510B, 0x611F, 0x610D, 0x9029,\n\t0x6000, 0x7105, 0x6117, 0xA06D, 0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B8,\n\t0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA096, 0x5121, 0x7080, 0x6115, 0xA047,\n\t0x610A, 0x9015, 0x611D, 0xA0DC, 0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA083,\n\t0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0CA, 0x510F, 0x7005, 0x6112, 0x907F,\n\t0x6107, 0x8010, 0x611A, 0xA0A6, 0x5121, 0x7102, 0x6116, 0xA05C, 0x610C, 0x901F, 0x611E, 0xA0ED,\n\t0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA076, 0x5111, 0x7008, 0x6113, 0x90F1,\n\t0x6108, 0x8040, 0x611B, 0xA0C1, 0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09E,\n\t0x5121, 0x70FF, 0x6115, 0xA053, 0x610A, 0x901B, 0x611D, 0xA0E5, 0x510B, 0x6122, 0x610E, 0x903F,\n\t0x6001, 0x7124, 0x6118, 0xA08D, 0x5111, 0x700A, 0x6114, 0xA032, 0x6109, 0x8120, 0x611C, 0xA0D4,\n\t0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AF, 0x5121, 0x7103, 0x6116, 0xA065,\n\t0x610C, 0x9025, 0x611E, 0xA0FB, 0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06B,\n\t0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B6, 0x510F, 0x7003, 0x6110, 0x9043,\n\t0x6002, 0x800B, 0x6119, 0xA094, 0x5121, 0x7080, 0x6115, 0xA045, 0x610A, 0x9014, 0x611D, 0xA0DA,\n\t0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07D, 0x5111, 0x7009, 0x6114, 0x90F8,\n\t0x6109, 0x8060, 0x611C, 0xA0C8, 0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A4,\n\t0x5121, 0x7102, 0x6116, 0xA05A, 0x610C, 0x901E, 0x611E, 0xA0EB, 0x510B, 0x611F, 0x610D, 0x9030,\n\t0x6000, 0x7106, 0x6117, 0xA074, 0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BE,\n\t0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09C, 0x5121, 0x70FF, 0x6115, 0xA04F,\n\t0x610A, 0x901A, 0x611D, 0xA0E3, 0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08B,\n\t0x5111, 0x700A, 0x6114, 0xA02E, 0x6109, 0x80FE, 0x611C, 0xA0D2, 0x510F, 0x7006, 0x6112, 0x9084,\n\t0x6107, 0x8011, 0x611A, 0xA0AD, 0x5121, 0x7103, 0x6116, 0xA063, 0x610C, 0x9024, 0x611E, 0xA0F9,\n\t0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06F, 0x5111, 0x7007, 0x6113, 0x90D0,\n\t0x6108, 0x8019, 0x611B, 0xA0BA, 0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA098,\n\t0x5121, 0x7080, 0x6115, 0xA04B, 0x610A, 0x9016, 0x611D, 0xA0DE, 0x510B, 0x6122, 0x610E, 0x9039,\n\t0x6001, 0x7123, 0x6118, 0xA086, 0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CD,\n\t0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A8, 0x5121, 0x7102, 0x6116, 0xA05E,\n\t0x610C, 0x9021, 0x611E, 0xA0F3, 0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA079,\n\t0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C3, 0x510F, 0x7004, 0x6110, 0x9059,\n\t0x6002, 0x800E, 0x6119, 0xA0A0, 0x5121, 0x70FF, 0x6115, 0xA055, 0x610A, 0x901C, 0x611D, 0xA0E7,\n\t0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08F, 0x5111, 0x700A, 0x6114, 0xA036,\n\t0x6109, 0x8120, 0x611C, 0xA0D6, 0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B1,\n\t0x5121, 0x7103, 0x6116, 0xA067, 0x610C, 0x9026, 0x611E, 0xB0B2, 0x510B, 0x611F, 0x610D, 0x9027,\n\t0x6000, 0x7105, 0x6117, 0xA068, 0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B3,\n\t0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA091, 0x5121, 0x7080, 0x6115, 0xA03A,\n\t0x610A, 0x9012, 0x611D, 0xA0D7, 0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07A,\n\t0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C4, 0x510F, 0x7005, 0x6112, 0x9070,\n\t0x6107, 0x800F, 0x611A, 0xA0A1, 0x5121, 0x7102, 0x6116, 0xA056, 0x610C, 0x901D, 0x611E, 0xA0E8,\n\t0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA071, 0x5111, 0x7008, 0x6113, 0x90E0,\n\t0x6108, 0x8020, 0x611B, 0xA0BB, 0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA099,\n\t0x5121, 0x70FF, 0x6115, 0xA04C, 0x610A, 0x9017, 0x611D, 0xA0DF, 0x510B, 0x6122, 0x610E, 0x903C,\n\t0x6001, 0x7124, 0x6118, 0xA087, 0x5111, 0x700A, 0x6114, 0xA023, 0x6109, 0x80FE, 0x611C, 0xA0CE,\n\t0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0A9, 0x5121, 0x7103, 0x6116, 0xA05F,\n\t0x610C, 0x9022, 0x611E, 0xA0F5, 0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06C,\n\t0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B7, 0x510F, 0x7003, 0x6110, 0x9044,\n\t0x6002, 0x800C, 0x6119, 0xA095, 0x5121, 0x7080, 0x6115, 0xA046, 0x610A, 0x9015, 0x611D, 0xA0DB,\n\t0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA07E, 0x5111, 0x7009, 0x6114, 0x90FC,\n\t0x6109, 0x80F0, 0x611C, 0xA0C9, 0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A5,\n\t0x5121, 0x7102, 0x6116, 0xA05B, 0x610C, 0x901F, 0x611E, 0xA0EC, 0x510B, 0x611F, 0x610D, 0x9031,\n\t0x6000, 0x7106, 0x6117, 0xA075, 0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0BF,\n\t0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09D, 0x5121, 0x70FF, 0x6115, 0xA052,\n\t0x610A, 0x901B, 0x611D, 0xA0E4, 0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08C,\n\t0x5111, 0x700A, 0x6114, 0xA02F, 0x6109, 0x8120, 0x611C, 0xA0D3, 0x510F, 0x7006, 0x6112, 0x9088,\n\t0x6107, 0x8013, 0x611A, 0xA0AE, 0x5121, 0x7103, 0x6116, 0xA064, 0x610C, 0x9025, 0x611E, 0xA0FA,\n\t0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06A, 0x5111, 0x7007, 0x6113, 0x90C6,\n\t0x6108, 0x8018, 0x611B, 0xA0B5, 0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA093,\n\t0x5121, 0x7080, 0x6115, 0xA03D, 0x610A, 0x9014, 0x611D, 0xA0D9, 0x510B, 0x6122, 0x610E, 0x9037,\n\t0x6001, 0x7123, 0x6118, 0xA07C, 0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C7,\n\t0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A3, 0x5121, 0x7102, 0x6116, 0xA058,\n\t0x610C, 0x901E, 0x611E, 0xA0EA, 0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA073,\n\t0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BD, 0x510F, 0x7004, 0x6110, 0x9050,\n\t0x6002, 0x800D, 0x6119, 0xA09B, 0x5121, 0x70FF, 0x6115, 0xA04E, 0x610A, 0x901A, 0x611D, 0xA0E2,\n\t0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08A, 0x5111, 0x700A, 0x6114, 0xA02D,\n\t0x6109, 0x80FE, 0x611C, 0xA0D1, 0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AC,\n\t0x5121, 0x7103, 0x6116, 0xA062, 0x610C, 0x9024, 0x611E, 0xA0F7, 0x510B, 0x611F, 0x610D, 0x902A,\n\t0x6000, 0x7105, 0x6117, 0xA06E, 0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0B9,\n\t0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA097, 0x5121, 0x7080, 0x6115, 0xA04A,\n\t0x610A, 0x9016, 0x611D, 0xA0DD, 0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA085,\n\t0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CB, 0x510F, 0x7005, 0x6112, 0x9081,\n\t0x6107, 0x8010, 0x611A, 0xA0A7, 0x5121, 0x7102, 0x6116, 0xA05D, 0x610C, 0x9021, 0x611E, 0xA0EF,\n\t0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA077, 0x5111, 0x7008, 0x6113, 0x90F2,\n\t0x6108, 0x8040, 0x611B, 0xA0C2, 0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA09F,\n\t0x5121, 0x70FF, 0x6115, 0xA054, 0x610A, 0x901C, 0x611D, 0xA0E6, 0x510B, 0x6122, 0x610E, 0x9041,\n\t0x6001, 0x7124, 0x6118, 0xA08E, 0x5111, 0x700A, 0x6114, 0xA034, 0x6109, 0x8120, 0x611C, 0xA0D5,\n\t0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B0, 0x5121, 0x7103, 0x6116, 0xA066,\n\t0x610C, 0x9026, 0x611E, 0xA104, 0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA069,\n\t0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B4, 0x510F, 0x7003, 0x6110, 0x9042,\n\t0x6002, 0x800B, 0x6119, 0xA092, 0x5121, 0x7080, 0x6115, 0xA03B, 0x610A, 0x9012, 0x611D, 0xA0D8,\n\t0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07B, 0x5111, 0x7009, 0x6114, 0x90F4,\n\t0x6109, 0x8060, 0x611C, 0xA0C5, 0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A2,\n\t0x5121, 0x7102, 0x6116, 0xA057, 0x610C, 0x901D, 0x611E, 0xA0E9, 0x510B, 0x611F, 0x610D, 0x902C,\n\t0x6000, 0x7106, 0x6117, 0xA072, 0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BC,\n\t0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA09A, 0x5121, 0x70FF, 0x6115, 0xA04D,\n\t0x610A, 0x9017, 0x611D, 0xA0E1, 0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA089,\n\t0x5111, 0x700A, 0x6114, 0xA02B, 0x6109, 0x80FE, 0x611C, 0xA0CF, 0x510F, 0x7006, 0x6112, 0x9082,\n\t0x6107, 0x8011, 0x611A, 0xA0AA, 0x5121, 0x7103, 0x6116, 0xA061, 0x610C, 0x9022, 0x611E, 0xA0F6,\n\t0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06D, 0x5111, 0x7007, 0x6113, 0x90CC,\n\t0x6108, 0x8019, 0x611B, 0xA0B8, 0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA096,\n\t0x5121, 0x7080, 0x6115, 0xA047, 0x610A, 0x9015, 0x611D, 0xA0DC, 0x510B, 0x6122, 0x610E, 0x9038,\n\t0x6001, 0x7123, 0x6118, 0xA083, 0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0CA,\n\t0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A6, 0x5121, 0x7102, 0x6116, 0xA05C,\n\t0x610C, 0x901F, 0x611E, 0xA0ED, 0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA076,\n\t0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0C1, 0x510F, 0x7004, 0x6110, 0x9051,\n\t0x6002, 0x800E, 0x6119, 0xA09E, 0x5121, 0x70FF, 0x6115, 0xA053, 0x610A, 0x901B, 0x611D, 0xA0E5,\n\t0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08D, 0x5111, 0x700A, 0x6114, 0xA032,\n\t0x6109, 0x8120, 0x611C, 0xA0D4, 0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AF,\n\t0x5121, 0x7103, 0x6116, 0xA065, 0x610C, 0x9025, 0x611E, 0xA0FB, 0x510B, 0x611F, 0x610D, 0x9028,\n\t0x6000, 0x7105, 0x6117, 0xA06B, 0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B6,\n\t0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA094, 0x5121, 0x7080, 0x6115, 0xA045,\n\t0x610A, 0x9014, 0x611D, 0xA0DA, 0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07D,\n\t0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C8, 0x510F, 0x7005, 0x6112, 0x9078,\n\t0x6107, 0x800F, 0x611A, 0xA0A4, 0x5121, 0x7102, 0x6116, 0xA05A, 0x610C, 0x901E, 0x611E, 0xA0EB,\n\t0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA074, 0x5111, 0x7008, 0x6113, 0x90EE,\n\t0x6108, 0x8020, 0x611B, 0xA0BE, 0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09C,\n\t0x5121, 0x70FF, 0x6115, 0xA04F, 0x610A, 0x901A, 0x611D, 0xA0E3, 0x510B, 0x6122, 0x610E, 0x903E,\n\t0x6001, 0x7124, 0x6118, 0xA08B, 0x5111, 0x700A, 0x6114, 0xA02E, 0x6109, 0x80FE, 0x611C, 0xA0D2,\n\t0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AD, 0x5121, 0x7103, 0x6116, 0xA063,\n\t0x610C, 0x9024, 0x611E, 0xA0F9, 0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06F,\n\t0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0BA, 0x510F, 0x7003, 0x6110, 0x9048,\n\t0x6002, 0x800C, 0x6119, 0xA098, 0x5121, 0x7080, 0x6115, 0xA04B, 0x610A, 0x9016, 0x611D, 0xA0DE,\n\t0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA086, 0x5111, 0x7009, 0x6114, 0x90FD,\n\t0x6109, 0x80F0, 0x611C, 0xA0CD, 0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A8,\n\t0x5121, 0x7102, 0x6116, 0xA05E, 0x610C, 0x9021, 0x611E, 0xA0F3, 0x510B, 0x611F, 0x610D, 0x9033,\n\t0x6000, 0x7106, 0x6117, 0xA079, 0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C3,\n\t0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA0A0, 0x5121, 0x70FF, 0x6115, 0xA055,\n\t0x610A, 0x901C, 0x611D, 0xA0E7, 0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08F,\n\t0x5111, 0x700A, 0x6114, 0xA036, 0x6109, 0x8120, 0x611C, 0xA0D6, 0x510F, 0x7006, 0x6112, 0x9090,\n\t0x6107, 0x8013, 0x611A, 0xA0B1, 0x5121, 0x7103, 0x6116, 0xA067, 0x610C, 0x9026, 0x611E, 0xD100,\n\t0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA068, 0x5111, 0x7007, 0x6113, 0x90C0,\n\t0x6108, 0x8018, 0x611B, 0xA0B3, 0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA091,\n\t0x5121, 0x7080, 0x6115, 0xA03A, 0x610A, 0x9012, 0x611D, 0xA0D7, 0x510B, 0x6122, 0x610E, 0x9035,\n\t0x6001, 0x7123, 0x6118, 0xA07A, 0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C4,\n\t0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A1, 0x5121, 0x7102, 0x6116, 0xA056,\n\t0x610C, 0x901D, 0x611E, 0xA0E8, 0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA071,\n\t0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BB, 0x510F, 0x7004, 0x6110, 0x9049,\n\t0x6002, 0x800D, 0x6119, 0xA099, 0x5121, 0x70FF, 0x6115, 0xA04C, 0x610A, 0x9017, 0x611D, 0xA0DF,\n\t0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA087, 0x5111, 0x700A, 0x6114, 0xA023,\n\t0x6109, 0x80FE, 0x611C, 0xA0CE, 0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0A9,\n\t0x5121, 0x7103, 0x6116, 0xA05F, 0x610C, 0x9022, 0x611E, 0xA0F5, 0x510B, 0x611F, 0x610D, 0x9029,\n\t0x6000, 0x7105, 0x6117, 0xA06C, 0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B7,\n\t0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA095, 0x5121, 0x7080, 0x6115, 0xA046,\n\t0x610A, 0x9015, 0x611D, 0xA0DB, 0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA07E,\n\t0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0C9, 0x510F, 0x7005, 0x6112, 0x907F,\n\t0x6107, 0x8010, 0x611A, 0xA0A5, 0x5121, 0x7102, 0x6116, 0xA05B, 0x610C, 0x901F, 0x611E, 0xA0EC,\n\t0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA075, 0x5111, 0x7008, 0x6113, 0x90F1,\n\t0x6108, 0x8040, 0x611B, 0xA0BF, 0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09D,\n\t0x5121, 0x70FF, 0x6115, 0xA052, 0x610A, 0x901B, 0x611D, 0xA0E4, 0x510B, 0x6122, 0x610E, 0x903F,\n\t0x6001, 0x7124, 0x6118, 0xA08C, 0x5111, 0x700A, 0x6114, 0xA02F, 0x6109, 0x8120, 0x611C, 0xA0D3,\n\t0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AE, 0x5121, 0x7103, 0x6116, 0xA064,\n\t0x610C, 0x9025, 0x611E, 0xA0FA, 0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06A,\n\t0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B5, 0x510F, 0x7003, 0x6110, 0x9043,\n\t0x6002, 0x800B, 0x6119, 0xA093, 0x5121, 0x7080, 0x6115, 0xA03D, 0x610A, 0x9014, 0x611D, 0xA0D9,\n\t0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07C, 0x5111, 0x7009, 0x6114, 0x90F8,\n\t0x6109, 0x8060, 0x611C, 0xA0C7, 0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A3,\n\t0x5121, 0x7102, 0x6116, 0xA058, 0x610C, 0x901E, 0x611E, 0xA0EA, 0x510B, 0x611F, 0x610D, 0x9030,\n\t0x6000, 0x7106, 0x6117, 0xA073, 0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BD,\n\t0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09B, 0x5121, 0x70FF, 0x6115, 0xA04E,\n\t0x610A, 0x901A, 0x611D, 0xA0E2, 0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08A,\n\t0x5111, 0x700A, 0x6114, 0xA02D, 0x6109, 0x80FE, 0x611C, 0xA0D1, 0x510F, 0x7006, 0x6112, 0x9084,\n\t0x6107, 0x8011, 0x611A, 0xA0AC, 0x5121, 0x7103, 0x6116, 0xA062, 0x610C, 0x9024, 0x611E, 0xA0F7,\n\t0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06E, 0x5111, 0x7007, 0x6113, 0x90D0,\n\t0x6108, 0x8019, 0x611B, 0xA0B9, 0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA097,\n\t0x5121, 0x7080, 0x6115, 0xA04A, 0x610A, 0x9016, 0x611D, 0xA0DD, 0x510B, 0x6122, 0x610E, 0x9039,\n\t0x6001, 0x7123, 0x6118, 0xA085, 0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CB,\n\t0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A7, 0x5121, 0x7102, 0x6116, 0xA05D,\n\t0x610C, 0x9021, 0x611E, 0xA0EF, 0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA077,\n\t0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C2, 0x510F, 0x7004, 0x6110, 0x9059,\n\t0x6002, 0x800E, 0x6119, 0xA09F, 0x5121, 0x70FF, 0x6115, 0xA054, 0x610A, 0x901C, 0x611D, 0xA0E6,\n\t0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08E, 0x5111, 0x700A, 0x6114, 0xA034,\n\t0x6109, 0x8120, 0x611C, 0xA0D5, 0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B0,\n\t0x5121, 0x7103, 0x6116, 0xA066, 0x610C, 0x9026, 0x611E, 0xA104, 0x510B, 0x611F, 0x610D, 0x9027,\n\t0x6000, 0x7105, 0x6117, 0xA069, 0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B4,\n\t0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA092, 0x5121, 0x7080, 0x6115, 0xA03B,\n\t0x610A, 0x9012, 0x611D, 0xA0D8, 0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07B,\n\t0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C5, 0x510F, 0x7005, 0x6112, 0x9070,\n\t0x6107, 0x800F, 0x611A, 0xA0A2, 0x5121, 0x7102, 0x6116, 0xA057, 0x610C, 0x901D, 0x611E, 0xA0E9,\n\t0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA072, 0x5111, 0x7008, 0x6113, 0x90E0,\n\t0x6108, 0x8020, 0x611B, 0xA0BC, 0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA09A,\n\t0x5121, 0x70FF, 0x6115, 0xA04D, 0x610A, 0x9017, 0x611D, 0xA0E1, 0x510B, 0x6122, 0x610E, 0x903C,\n\t0x6001, 0x7124, 0x6118, 0xA089, 0x5111, 0x700A, 0x6114, 0xA02B, 0x6109, 0x80FE, 0x611C, 0xA0CF,\n\t0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0AA, 0x5121, 0x7103, 0x6116, 0xA061,\n\t0x610C, 0x9022, 0x611E, 0xA0F6, 0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06D,\n\t0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B8, 0x510F, 0x7003, 0x6110, 0x9044,\n\t0x6002, 0x800C, 0x6119, 0xA096, 0x5121, 0x7080, 0x6115, 0xA047, 0x610A, 0x9015, 0x611D, 0xA0DC,\n\t0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA083, 0x5111, 0x7009, 0x6114, 0x90FC,\n\t0x6109, 0x80F0, 0x611C, 0xA0CA, 0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A6,\n\t0x5121, 0x7102, 0x6116, 0xA05C, 0x610C, 0x901F, 0x611E, 0xA0ED, 0x510B, 0x611F, 0x610D, 0x9031,\n\t0x6000, 0x7106, 0x6117, 0xA076, 0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0C1,\n\t0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09E, 0x5121, 0x70FF, 0x6115, 0xA053,\n\t0x610A, 0x901B, 0x611D, 0xA0E5, 0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08D,\n\t0x5111, 0x700A, 0x6114, 0xA032, 0x6109, 0x8120, 0x611C, 0xA0D4, 0x510F, 0x7006, 0x6112, 0x9088,\n\t0x6107, 0x8013, 0x611A, 0xA0AF, 0x5121, 0x7103, 0x6116, 0xA065, 0x610C, 0x9025, 0x611E, 0xA0FB,\n\t0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06B, 0x5111, 0x7007, 0x6113, 0x90C6,\n\t0x6108, 0x8018, 0x611B, 0xA0B6, 0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA094,\n\t0x5121, 0x7080, 0x6115, 0xA045, 0x610A, 0x9014, 0x611D, 0xA0DA, 0x510B, 0x6122, 0x610E, 0x9037,\n\t0x6001, 0x7123, 0x6118, 0xA07D, 0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C8,\n\t0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A4, 0x5121, 0x7102, 0x6116, 0xA05A,\n\t0x610C, 0x901E, 0x611E, 0xA0EB, 0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA074,\n\t0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BE, 0x510F, 0x7004, 0x6110, 0x9050,\n\t0x6002, 0x800D, 0x6119, 0xA09C, 0x5121, 0x70FF, 0x6115, 0xA04F, 0x610A, 0x901A, 0x611D, 0xA0E3,\n\t0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08B, 0x5111, 0x700A, 0x6114, 0xA02E,\n\t0x6109, 0x80FE, 0x611C, 0xA0D2, 0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AD,\n\t0x5121, 0x7103, 0x6116, 0xA063, 0x610C, 0x9024, 0x611E, 0xA0F9, 0x510B, 0x611F, 0x610D, 0x902A,\n\t0x6000, 0x7105, 0x6117, 0xA06F, 0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0BA,\n\t0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA098, 0x5121, 0x7080, 0x6115, 0xA04B,\n\t0x610A, 0x9016, 0x611D, 0xA0DE, 0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA086,\n\t0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CD, 0x510F, 0x7005, 0x6112, 0x9081,\n\t0x6107, 0x8010, 0x611A, 0xA0A8, 0x5121, 0x7102, 0x6116, 0xA05E, 0x610C, 0x9021, 0x611E, 0xA0F3,\n\t0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA079, 0x5111, 0x7008, 0x6113, 0x90F2,\n\t0x6108, 0x8040, 0x611B, 0xA0C3, 0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA0A0,\n\t0x5121, 0x70FF, 0x6115, 0xA055, 0x610A, 0x901C, 0x611D, 0xA0E7, 0x510B, 0x6122, 0x610E, 0x9041,\n\t0x6001, 0x7124, 0x6118, 0xA08F, 0x5111, 0x700A, 0x6114, 0xA036, 0x6109, 0x8120, 0x611C, 0xA0D6,\n\t0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B1, 0x5121, 0x7103, 0x6116, 0xA067,\n\t0x610C, 0x9026, 0x611E, 0xB0B2, 0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA068,\n\t0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B3, 0x510F, 0x7003, 0x6110, 0x9042,\n\t0x6002, 0x800B, 0x6119, 0xA091, 0x5121, 0x7080, 0x6115, 0xA03A, 0x610A, 0x9012, 0x611D, 0xA0D7,\n\t0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07A, 0x5111, 0x7009, 0x6114, 0x90F4,\n\t0x6109, 0x8060, 0x611C, 0xA0C4, 0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A1,\n\t0x5121, 0x7102, 0x6116, 0xA056, 0x610C, 0x901D, 0x611E, 0xA0E8, 0x510B, 0x611F, 0x610D, 0x902C,\n\t0x6000, 0x7106, 0x6117, 0xA071, 0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BB,\n\t0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA099, 0x5121, 0x70FF, 0x6115, 0xA04C,\n\t0x610A, 0x9017, 0x611D, 0xA0DF, 0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA087,\n\t0x5111, 0x700A, 0x6114, 0xA023, 0x6109, 0x80FE, 0x611C, 0xA0CE, 0x510F, 0x7006, 0x6112, 0x9082,\n\t0x6107, 0x8011, 0x611A, 0xA0A9, 0x5121, 0x7103, 0x6116, 0xA05F, 0x610C, 0x9022, 0x611E, 0xA0F5,\n\t0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06C, 0x5111, 0x7007, 0x6113, 0x90CC,\n\t0x6108, 0x8019, 0x611B, 0xA0B7, 0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA095,\n\t0x5121, 0x7080, 0x6115, 0xA046, 0x610A, 0x9015, 0x611D, 0xA0DB, 0x510B, 0x6122, 0x610E, 0x9038,\n\t0x6001, 0x7123, 0x6118, 0xA07E, 0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0C9,\n\t0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A5, 0x5121, 0x7102, 0x6116, 0xA05B,\n\t0x610C, 0x901F, 0x611E, 0xA0EC, 0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA075,\n\t0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0BF, 0x510F, 0x7004, 0x6110, 0x9051,\n\t0x6002, 0x800E, 0x6119, 0xA09D, 0x5121, 0x70FF, 0x6115, 0xA052, 0x610A, 0x901B, 0x611D, 0xA0E4,\n\t0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08C, 0x5111, 0x700A, 0x6114, 0xA02F,\n\t0x6109, 0x8120, 0x611C, 0xA0D3, 0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AE,\n\t0x5121, 0x7103, 0x6116, 0xA064, 0x610C, 0x9025, 0x611E, 0xA0FA, 0x510B, 0x611F, 0x610D, 0x9028,\n\t0x6000, 0x7105, 0x6117, 0xA06A, 0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B5,\n\t0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA093, 0x5121, 0x7080, 0x6115, 0xA03D,\n\t0x610A, 0x9014, 0x611D, 0xA0D9, 0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07C,\n\t0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C7, 0x510F, 0x7005, 0x6112, 0x9078,\n\t0x6107, 0x800F, 0x611A, 0xA0A3, 0x5121, 0x7102, 0x6116, 0xA058, 0x610C, 0x901E, 0x611E, 0xA0EA,\n\t0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA073, 0x5111, 0x7008, 0x6113, 0x90EE,\n\t0x6108, 0x8020, 0x611B, 0xA0BD, 0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09B,\n\t0x5121, 0x70FF, 0x6115, 0xA04E, 0x610A, 0x901A, 0x611D, 0xA0E2, 0x510B, 0x6122, 0x610E, 0x903E,\n\t0x6001, 0x7124, 0x6118, 0xA08A, 0x5111, 0x700A, 0x6114, 0xA02D, 0x6109, 0x80FE, 0x611C, 0xA0D1,\n\t0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AC, 0x5121, 0x7103, 0x6116, 0xA062,\n\t0x610C, 0x9024, 0x611E, 0xA0F7, 0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06E,\n\t0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0B9, 0x510F, 0x7003, 0x6110, 0x9048,\n\t0x6002, 0x800C, 0x6119, 0xA097, 0x5121, 0x7080, 0x6115, 0xA04A, 0x610A, 0x9016, 0x611D, 0xA0DD,\n\t0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA085, 0x5111, 0x7009, 0x6114, 0x90FD,\n\t0x6109, 0x80F0, 0x611C, 0xA0CB, 0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A7,\n\t0x5121, 0x7102, 0x6116, 0xA05D, 0x610C, 0x9021, 0x611E, 0xA0EF, 0x510B, 0x611F, 0x610D, 0x9033,\n\t0x6000, 0x7106, 0x6117, 0xA077, 0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C2,\n\t0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA09F, 0x5121, 0x70FF, 0x6115, 0xA054,\n\t0x610A, 0x901C, 0x611D, 0xA0E6, 0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08E,\n\t0x5111, 0x700A, 0x6114, 0xA034, 0x6109, 0x8120, 0x611C, 0xA0D5, 0x510F, 0x7006, 0x6112, 0x9090,\n\t0x6107, 0x8013, 0x611A, 0xA0B0, 0x5121, 0x7103, 0x6116, 0xA066, 0x610C, 0x9026, 0x611E, 0xA104,\n\t0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA069, 0x5111, 0x7007, 0x6113, 0x90C0,\n\t0x6108, 0x8018, 0x611B, 0xA0B4, 0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA092,\n\t0x5121, 0x7080, 0x6115, 0xA03B, 0x610A, 0x9012, 0x611D, 0xA0D8, 0x510B, 0x6122, 0x610E, 0x9035,\n\t0x6001, 0x7123, 0x6118, 0xA07B, 0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C5,\n\t0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A2, 0x5121, 0x7102, 0x6116, 0xA057,\n\t0x610C, 0x901D, 0x611E, 0xA0E9, 0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA072,\n\t0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BC, 0x510F, 0x7004, 0x6110, 0x9049,\n\t0x6002, 0x800D, 0x6119, 0xA09A, 0x5121, 0x70FF, 0x6115, 0xA04D, 0x610A, 0x9017, 0x611D, 0xA0E1,\n\t0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA089, 0x5111, 0x700A, 0x6114, 0xA02B,\n\t0x6109, 0x80FE, 0x611C, 0xA0CF, 0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0AA,\n\t0x5121, 0x7103, 0x6116, 0xA061, 0x610C, 0x9022, 0x611E, 0xA0F6, 0x510B, 0x611F, 0x610D, 0x9029,\n\t0x6000, 0x7105, 0x6117, 0xA06D, 0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B8,\n\t0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA096, 0x5121, 0x7080, 0x6115, 0xA047,\n\t0x610A, 0x9015, 0x611D, 0xA0DC, 0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA083,\n\t0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0CA, 0x510F, 0x7005, 0x6112, 0x907F,\n\t0x6107, 0x8010, 0x611A, 0xA0A6, 0x5121, 0x7102, 0x6116, 0xA05C, 0x610C, 0x901F, 0x611E, 0xA0ED,\n\t0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA076, 0x5111, 0x7008, 0x6113, 0x90F1,\n\t0x6108, 0x8040, 0x611B, 0xA0C1, 0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09E,\n\t0x5121, 0x70FF, 0x6115, 0xA053, 0x610A, 0x901B, 0x611D, 0xA0E5, 0x510B, 0x6122, 0x610E, 0x903F,\n\t0x6001, 0x7124, 0x6118, 0xA08D, 0x5111, 0x700A, 0x6114, 0xA032, 0x6109, 0x8120, 0x611C, 0xA0D4,\n\t0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AF, 0x5121, 0x7103, 0x6116, 0xA065,\n\t0x610C, 0x9025, 0x611E, 0xA0FB, 0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06B,\n\t0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B6, 0x510F, 0x7003, 0x6110, 0x9043,\n\t0x6002, 0x800B, 0x6119, 0xA094, 0x5121, 0x7080, 0x6115, 0xA045, 0x610A, 0x9014, 0x611D, 0xA0DA,\n\t0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07D, 0x5111, 0x7009, 0x6114, 0x90F8,\n\t0x6109, 0x8060, 0x611C, 0xA0C8, 0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A4,\n\t0x5121, 0x7102, 0x6116, 0xA05A, 0x610C, 0x901E, 0x611E, 0xA0EB, 0x510B, 0x611F, 0x610D, 0x9030,\n\t0x6000, 0x7106, 0x6117, 0xA074, 0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BE,\n\t0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09C, 0x5121, 0x70FF, 0x6115, 0xA04F,\n\t0x610A, 0x901A, 0x611D, 0xA0E3, 0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08B,\n\t0x5111, 0x700A, 0x6114, 0xA02E, 0x6109, 0x80FE, 0x611C, 0xA0D2, 0x510F, 0x7006, 0x6112, 0x9084,\n\t0x6107, 0x8011, 0x611A, 0xA0AD, 0x5121, 0x7103, 0x6116, 0xA063, 0x610C, 0x9024, 0x611E, 0xA0F9,\n\t0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06F, 0x5111, 0x7007, 0x6113, 0x90D0,\n\t0x6108, 0x8019, 0x611B, 0xA0BA, 0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA098,\n\t0x5121, 0x7080, 0x6115, 0xA04B, 0x610A, 0x9016, 0x611D, 0xA0DE, 0x510B, 0x6122, 0x610E, 0x9039,\n\t0x6001, 0x7123, 0x6118, 0xA086, 0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CD,\n\t0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A8, 0x5121, 0x7102, 0x6116, 0xA05E,\n\t0x610C, 0x9021, 0x611E, 0xA0F3, 0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA079,\n\t0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C3, 0x510F, 0x7004, 0x6110, 0x9059,\n\t0x6002, 0x800E, 0x6119, 0xA0A0, 0x5121, 0x70FF, 0x6115, 0xA055, 0x610A, 0x901C, 0x611D, 0xA0E7,\n\t0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08F, 0x5111, 0x700A, 0x6114, 0xA036,\n\t0x6109, 0x8120, 0x611C, 0xA0D6, 0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B1,\n\t0x5121, 0x7103, 0x6116, 0xA067, 0x610C, 0x9026, 0x611E, 0xD125\n};\n\nstatic const UINT16 HuffTableLOM[512] = {\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007,\n\t0x2001, 0x4006, 0x3004, 0x700D, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600B,\n\t0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x8012, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x7010,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600C, 0x2001, 0x4003, 0x3002, 0x5009,\n\t0x2001, 0x4006, 0x3004, 0x9018, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A,\n\t0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x700E, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x600B, 0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x9013,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007,\n\t0x2001, 0x4006, 0x3004, 0x800F, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600C,\n\t0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x901C, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x700D,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600B, 0x2001, 0x4003, 0x3002, 0x5009,\n\t0x2001, 0x4006, 0x3004, 0x8015, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A,\n\t0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x7010, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x600C, 0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x901A,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007,\n\t0x2001, 0x4006, 0x3004, 0x700E, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600B,\n\t0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x9016, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x8011,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600C, 0x2001, 0x4003, 0x3002, 0x5009,\n\t0x2001, 0x4006, 0x3004, 0x901E, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A,\n\t0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x700D, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x600B, 0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x8012,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007,\n\t0x2001, 0x4006, 0x3004, 0x7010, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600C,\n\t0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x9019, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x700E,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600B, 0x2001, 0x4003, 0x3002, 0x5009,\n\t0x2001, 0x4006, 0x3004, 0x9014, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A,\n\t0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x800F, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x600C, 0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x901D,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007,\n\t0x2001, 0x4006, 0x3004, 0x700D, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600B,\n\t0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x8015, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x7010,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600C, 0x2001, 0x4003, 0x3002, 0x5009,\n\t0x2001, 0x4006, 0x3004, 0x901B, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A,\n\t0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x700E, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x600B, 0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x9017,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007,\n\t0x2001, 0x4006, 0x3004, 0x8011, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600C,\n\t0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x901F\n};\n\nstatic const BYTE HuffTableMask[39] = {\n\t0x11, /* 0 */\n\t0x9E, /* 1 */\n\t0xA1, /* 2 */\n\t0x00, /* 3 */\n\t0x00, /* 4 */\n\t0x01, /* 5 */\n\t0x00, /* 6 */\n\t0x03, /* 7 */\n\t0x00, /* 8 */\n\t0x07, /* 9 */\n\t0x00, /* 10 */\n\t0x0F, /* 11 */\n\t0x00, /* 12 */\n\t0x1F, /* 13 */\n\t0x00, /* 14 */\n\t0x3F, /* 15 */\n\t0x00, /* 16 */\n\t0x7F, /* 17 */\n\t0x00, /* 18 */\n\t0xFF, /* 19 */\n\t0x00, /* 20 */\n\t0xFF, /* 21 */\n\t0x01, /* 22 */\n\t0xFF, /* 23 */\n\t0x03, /* 24 */\n\t0xFF, /* 25 */\n\t0x07, /* 26 */\n\t0xFF, /* 27 */\n\t0x0F, /* 28 */\n\t0xFF, /* 29 */\n\t0x1F, /* 30 */\n\t0xFF, /* 31 */\n\t0x3F, /* 32 */\n\t0xFF, /* 33 */\n\t0x7F, /* 34 */\n\t0xFF, /* 35 */\n\t0xFF, /* 36 */\n\t0x00, /* 37 */\n\t0x00  /* 38 */\n};\n\nstatic const BYTE HuffLengthLEC[294] = {\n\t6,  /* 0 */\n\t6,  /* 1 */\n\t6,  /* 2 */\n\t7,  /* 3 */\n\t7,  /* 4 */\n\t7,  /* 5 */\n\t7,  /* 6 */\n\t7,  /* 7 */\n\t7,  /* 8 */\n\t7,  /* 9 */\n\t7,  /* 10 */\n\t8,  /* 11 */\n\t8,  /* 12 */\n\t8,  /* 13 */\n\t8,  /* 14 */\n\t8,  /* 15 */\n\t8,  /* 16 */\n\t8,  /* 17 */\n\t9,  /* 18 */\n\t8,  /* 19 */\n\t9,  /* 20 */\n\t9,  /* 21 */\n\t9,  /* 22 */\n\t9,  /* 23 */\n\t8,  /* 24 */\n\t8,  /* 25 */\n\t9,  /* 26 */\n\t9,  /* 27 */\n\t9,  /* 28 */\n\t9,  /* 29 */\n\t9,  /* 30 */\n\t9,  /* 31 */\n\t8,  /* 32 */\n\t9,  /* 33 */\n\t9,  /* 34 */\n\t10, /* 35 */\n\t9,  /* 36 */\n\t9,  /* 37 */\n\t9,  /* 38 */\n\t9,  /* 39 */\n\t9,  /* 40 */\n\t9,  /* 41 */\n\t9,  /* 42 */\n\t10, /* 43 */\n\t9,  /* 44 */\n\t10, /* 45 */\n\t10, /* 46 */\n\t10, /* 47 */\n\t9,  /* 48 */\n\t9,  /* 49 */\n\t10, /* 50 */\n\t9,  /* 51 */\n\t10, /* 52 */\n\t9,  /* 53 */\n\t10, /* 54 */\n\t9,  /* 55 */\n\t9,  /* 56 */\n\t9,  /* 57 */\n\t10, /* 58 */\n\t10, /* 59 */\n\t9,  /* 60 */\n\t10, /* 61 */\n\t9,  /* 62 */\n\t9,  /* 63 */\n\t8,  /* 64 */\n\t9,  /* 65 */\n\t9,  /* 66 */\n\t9,  /* 67 */\n\t9,  /* 68 */\n\t10, /* 69 */\n\t10, /* 70 */\n\t10, /* 71 */\n\t9,  /* 72 */\n\t9,  /* 73 */\n\t10, /* 74 */\n\t10, /* 75 */\n\t10, /* 76 */\n\t10, /* 77 */\n\t10, /* 78 */\n\t10, /* 79 */\n\t9,  /* 80 */\n\t9,  /* 81 */\n\t10, /* 82 */\n\t10, /* 83 */\n\t10, /* 84 */\n\t10, /* 85 */\n\t10, /* 86 */\n\t10, /* 87 */\n\t10, /* 88 */\n\t9,  /* 89 */\n\t10, /* 90 */\n\t10, /* 91 */\n\t10, /* 92 */\n\t10, /* 93 */\n\t10, /* 94 */\n\t10, /* 95 */\n\t8,  /* 96 */\n\t10, /* 97 */\n\t10, /* 98 */\n\t10, /* 99 */\n\t10, /* 100 */\n\t10, /* 101 */\n\t10, /* 102 */\n\t10, /* 103 */\n\t10, /* 104 */\n\t10, /* 105 */\n\t10, /* 106 */\n\t10, /* 107 */\n\t10, /* 108 */\n\t10, /* 109 */\n\t10, /* 110 */\n\t10, /* 111 */\n\t9,  /* 112 */\n\t10, /* 113 */\n\t10, /* 114 */\n\t10, /* 115 */\n\t10, /* 116 */\n\t10, /* 117 */\n\t10, /* 118 */\n\t10, /* 119 */\n\t9,  /* 120 */\n\t10, /* 121 */\n\t10, /* 122 */\n\t10, /* 123 */\n\t10, /* 124 */\n\t10, /* 125 */\n\t10, /* 126 */\n\t9,  /* 127 */\n\t7,  /* 128 */\n\t9,  /* 129 */\n\t9,  /* 130 */\n\t10, /* 131 */\n\t9,  /* 132 */\n\t10, /* 133 */\n\t10, /* 134 */\n\t10, /* 135 */\n\t9,  /* 136 */\n\t10, /* 137 */\n\t10, /* 138 */\n\t10, /* 139 */\n\t10, /* 140 */\n\t10, /* 141 */\n\t10, /* 142 */\n\t10, /* 143 */\n\t9,  /* 144 */\n\t10, /* 145 */\n\t10, /* 146 */\n\t10, /* 147 */\n\t10, /* 148 */\n\t10, /* 149 */\n\t10, /* 150 */\n\t10, /* 151 */\n\t10, /* 152 */\n\t10, /* 153 */\n\t10, /* 154 */\n\t10, /* 155 */\n\t10, /* 156 */\n\t10, /* 157 */\n\t10, /* 158 */\n\t10, /* 159 */\n\t10, /* 160 */\n\t10, /* 161 */\n\t10, /* 162 */\n\t10, /* 163 */\n\t10, /* 164 */\n\t10, /* 165 */\n\t10, /* 166 */\n\t10, /* 167 */\n\t10, /* 168 */\n\t10, /* 169 */\n\t10, /* 170 */\n\t13, /* 171 */\n\t10, /* 172 */\n\t10, /* 173 */\n\t10, /* 174 */\n\t10, /* 175 */\n\t10, /* 176 */\n\t10, /* 177 */\n\t11, /* 178 */\n\t10, /* 179 */\n\t10, /* 180 */\n\t10, /* 181 */\n\t10, /* 182 */\n\t10, /* 183 */\n\t10, /* 184 */\n\t10, /* 185 */\n\t10, /* 186 */\n\t10, /* 187 */\n\t10, /* 188 */\n\t10, /* 189 */\n\t10, /* 190 */\n\t10, /* 191 */\n\t9,  /* 192 */\n\t10, /* 193 */\n\t10, /* 194 */\n\t10, /* 195 */\n\t10, /* 196 */\n\t10, /* 197 */\n\t9,  /* 198 */\n\t10, /* 199 */\n\t10, /* 200 */\n\t10, /* 201 */\n\t10, /* 202 */\n\t10, /* 203 */\n\t9,  /* 204 */\n\t10, /* 205 */\n\t10, /* 206 */\n\t10, /* 207 */\n\t9,  /* 208 */\n\t10, /* 209 */\n\t10, /* 210 */\n\t10, /* 211 */\n\t10, /* 212 */\n\t10, /* 213 */\n\t10, /* 214 */\n\t10, /* 215 */\n\t10, /* 216 */\n\t10, /* 217 */\n\t10, /* 218 */\n\t10, /* 219 */\n\t10, /* 220 */\n\t10, /* 221 */\n\t10, /* 222 */\n\t10, /* 223 */\n\t9,  /* 224 */\n\t10, /* 225 */\n\t10, /* 226 */\n\t10, /* 227 */\n\t10, /* 228 */\n\t10, /* 229 */\n\t10, /* 230 */\n\t10, /* 231 */\n\t10, /* 232 */\n\t10, /* 233 */\n\t10, /* 234 */\n\t10, /* 235 */\n\t10, /* 236 */\n\t10, /* 237 */\n\t9,  /* 238 */\n\t10, /* 239 */\n\t8,  /* 240 */\n\t9,  /* 241 */\n\t9,  /* 242 */\n\t10, /* 243 */\n\t9,  /* 244 */\n\t10, /* 245 */\n\t10, /* 246 */\n\t10, /* 247 */\n\t9,  /* 248 */\n\t10, /* 249 */\n\t10, /* 250 */\n\t10, /* 251 */\n\t9,  /* 252 */\n\t9,  /* 253 */\n\t8,  /* 254 */\n\t7,  /* 255 */\n\t13, /* 256 */\n\t13, /* 257 */\n\t7,  /* 258 */\n\t7,  /* 259 */\n\t10, /* 260 */\n\t7,  /* 261 */\n\t7,  /* 262 */\n\t6,  /* 263 */\n\t6,  /* 264 */\n\t6,  /* 265 */\n\t6,  /* 266 */\n\t5,  /* 267 */\n\t6,  /* 268 */\n\t6,  /* 269 */\n\t6,  /* 270 */\n\t5,  /* 271 */\n\t6,  /* 272 */\n\t5,  /* 273 */\n\t6,  /* 274 */\n\t6,  /* 275 */\n\t6,  /* 276 */\n\t6,  /* 277 */\n\t6,  /* 278 */\n\t6,  /* 279 */\n\t6,  /* 280 */\n\t6,  /* 281 */\n\t6,  /* 282 */\n\t6,  /* 283 */\n\t6,  /* 284 */\n\t6,  /* 285 */\n\t6,  /* 286 */\n\t6,  /* 287 */\n\t8,  /* 288 */\n\t5,  /* 289 */\n\t6,  /* 290 */\n\t7,  /* 291 */\n\t7,  /* 292 */\n\t13  /* 293 */\n};\n\nstatic const BYTE HuffCodeLEC[588] = {\n\t0x04, /* 0 */\n\t0x00, /* 1 */\n\t0x24, /* 2 */\n\t0x00, /* 3 */\n\t0x14, /* 4 */\n\t0x00, /* 5 */\n\t0x11, /* 6 */\n\t0x00, /* 7 */\n\t0x51, /* 8 */\n\t0x00, /* 9 */\n\t0x31, /* 10 */\n\t0x00, /* 11 */\n\t0x71, /* 12 */\n\t0x00, /* 13 */\n\t0x09, /* 14 */\n\t0x00, /* 15 */\n\t0x49, /* 16 */\n\t0x00, /* 17 */\n\t0x29, /* 18 */\n\t0x00, /* 19 */\n\t0x69, /* 20 */\n\t0x00, /* 21 */\n\t0x15, /* 22 */\n\t0x00, /* 23 */\n\t0x95, /* 24 */\n\t0x00, /* 25 */\n\t0x55, /* 26 */\n\t0x00, /* 27 */\n\t0xD5, /* 28 */\n\t0x00, /* 29 */\n\t0x35, /* 30 */\n\t0x00, /* 31 */\n\t0xB5, /* 32 */\n\t0x00, /* 33 */\n\t0x75, /* 34 */\n\t0x00, /* 35 */\n\t0x1D, /* 36 */\n\t0x00, /* 37 */\n\t0xF5, /* 38 */\n\t0x00, /* 39 */\n\t0x1D, /* 40 */\n\t0x01, /* 41 */\n\t0x9D, /* 42 */\n\t0x00, /* 43 */\n\t0x9D, /* 44 */\n\t0x01, /* 45 */\n\t0x5D, /* 46 */\n\t0x00, /* 47 */\n\t0x0D, /* 48 */\n\t0x00, /* 49 */\n\t0x8D, /* 50 */\n\t0x00, /* 51 */\n\t0x5D, /* 52 */\n\t0x01, /* 53 */\n\t0xDD, /* 54 */\n\t0x00, /* 55 */\n\t0xDD, /* 56 */\n\t0x01, /* 57 */\n\t0x3D, /* 58 */\n\t0x00, /* 59 */\n\t0x3D, /* 60 */\n\t0x01, /* 61 */\n\t0xBD, /* 62 */\n\t0x00, /* 63 */\n\t0x4D, /* 64 */\n\t0x00, /* 65 */\n\t0xBD, /* 66 */\n\t0x01, /* 67 */\n\t0x7D, /* 68 */\n\t0x00, /* 69 */\n\t0x6B, /* 70 */\n\t0x00, /* 71 */\n\t0x7D, /* 72 */\n\t0x01, /* 73 */\n\t0xFD, /* 74 */\n\t0x00, /* 75 */\n\t0xFD, /* 76 */\n\t0x01, /* 77 */\n\t0x03, /* 78 */\n\t0x00, /* 79 */\n\t0x03, /* 80 */\n\t0x01, /* 81 */\n\t0x83, /* 82 */\n\t0x00, /* 83 */\n\t0x83, /* 84 */\n\t0x01, /* 85 */\n\t0x6B, /* 86 */\n\t0x02, /* 87 */\n\t0x43, /* 88 */\n\t0x00, /* 89 */\n\t0x6B, /* 90 */\n\t0x01, /* 91 */\n\t0x6B, /* 92 */\n\t0x03, /* 93 */\n\t0xEB, /* 94 */\n\t0x00, /* 95 */\n\t0x43, /* 96 */\n\t0x01, /* 97 */\n\t0xC3, /* 98 */\n\t0x00, /* 99 */\n\t0xEB, /* 100 */\n\t0x02, /* 101 */\n\t0xC3, /* 102 */\n\t0x01, /* 103 */\n\t0xEB, /* 104 */\n\t0x01, /* 105 */\n\t0x23, /* 106 */\n\t0x00, /* 107 */\n\t0xEB, /* 108 */\n\t0x03, /* 109 */\n\t0x23, /* 110 */\n\t0x01, /* 111 */\n\t0xA3, /* 112 */\n\t0x00, /* 113 */\n\t0xA3, /* 114 */\n\t0x01, /* 115 */\n\t0x1B, /* 116 */\n\t0x00, /* 117 */\n\t0x1B, /* 118 */\n\t0x02, /* 119 */\n\t0x63, /* 120 */\n\t0x00, /* 121 */\n\t0x1B, /* 122 */\n\t0x01, /* 123 */\n\t0x63, /* 124 */\n\t0x01, /* 125 */\n\t0xE3, /* 126 */\n\t0x00, /* 127 */\n\t0xCD, /* 128 */\n\t0x00, /* 129 */\n\t0xE3, /* 130 */\n\t0x01, /* 131 */\n\t0x13, /* 132 */\n\t0x00, /* 133 */\n\t0x13, /* 134 */\n\t0x01, /* 135 */\n\t0x93, /* 136 */\n\t0x00, /* 137 */\n\t0x1B, /* 138 */\n\t0x03, /* 139 */\n\t0x9B, /* 140 */\n\t0x00, /* 141 */\n\t0x9B, /* 142 */\n\t0x02, /* 143 */\n\t0x93, /* 144 */\n\t0x01, /* 145 */\n\t0x53, /* 146 */\n\t0x00, /* 147 */\n\t0x9B, /* 148 */\n\t0x01, /* 149 */\n\t0x9B, /* 150 */\n\t0x03, /* 151 */\n\t0x5B, /* 152 */\n\t0x00, /* 153 */\n\t0x5B, /* 154 */\n\t0x02, /* 155 */\n\t0x5B, /* 156 */\n\t0x01, /* 157 */\n\t0x5B, /* 158 */\n\t0x03, /* 159 */\n\t0x53, /* 160 */\n\t0x01, /* 161 */\n\t0xD3, /* 162 */\n\t0x00, /* 163 */\n\t0xDB, /* 164 */\n\t0x00, /* 165 */\n\t0xDB, /* 166 */\n\t0x02, /* 167 */\n\t0xDB, /* 168 */\n\t0x01, /* 169 */\n\t0xDB, /* 170 */\n\t0x03, /* 171 */\n\t0x3B, /* 172 */\n\t0x00, /* 173 */\n\t0x3B, /* 174 */\n\t0x02, /* 175 */\n\t0x3B, /* 176 */\n\t0x01, /* 177 */\n\t0xD3, /* 178 */\n\t0x01, /* 179 */\n\t0x3B, /* 180 */\n\t0x03, /* 181 */\n\t0xBB, /* 182 */\n\t0x00, /* 183 */\n\t0xBB, /* 184 */\n\t0x02, /* 185 */\n\t0xBB, /* 186 */\n\t0x01, /* 187 */\n\t0xBB, /* 188 */\n\t0x03, /* 189 */\n\t0x7B, /* 190 */\n\t0x00, /* 191 */\n\t0x2D, /* 192 */\n\t0x00, /* 193 */\n\t0x7B, /* 194 */\n\t0x02, /* 195 */\n\t0x7B, /* 196 */\n\t0x01, /* 197 */\n\t0x7B, /* 198 */\n\t0x03, /* 199 */\n\t0xFB, /* 200 */\n\t0x00, /* 201 */\n\t0xFB, /* 202 */\n\t0x02, /* 203 */\n\t0xFB, /* 204 */\n\t0x01, /* 205 */\n\t0xFB, /* 206 */\n\t0x03, /* 207 */\n\t0x07, /* 208 */\n\t0x00, /* 209 */\n\t0x07, /* 210 */\n\t0x02, /* 211 */\n\t0x07, /* 212 */\n\t0x01, /* 213 */\n\t0x07, /* 214 */\n\t0x03, /* 215 */\n\t0x87, /* 216 */\n\t0x00, /* 217 */\n\t0x87, /* 218 */\n\t0x02, /* 219 */\n\t0x87, /* 220 */\n\t0x01, /* 221 */\n\t0x87, /* 222 */\n\t0x03, /* 223 */\n\t0x33, /* 224 */\n\t0x00, /* 225 */\n\t0x47, /* 226 */\n\t0x00, /* 227 */\n\t0x47, /* 228 */\n\t0x02, /* 229 */\n\t0x47, /* 230 */\n\t0x01, /* 231 */\n\t0x47, /* 232 */\n\t0x03, /* 233 */\n\t0xC7, /* 234 */\n\t0x00, /* 235 */\n\t0xC7, /* 236 */\n\t0x02, /* 237 */\n\t0xC7, /* 238 */\n\t0x01, /* 239 */\n\t0x33, /* 240 */\n\t0x01, /* 241 */\n\t0xC7, /* 242 */\n\t0x03, /* 243 */\n\t0x27, /* 244 */\n\t0x00, /* 245 */\n\t0x27, /* 246 */\n\t0x02, /* 247 */\n\t0x27, /* 248 */\n\t0x01, /* 249 */\n\t0x27, /* 250 */\n\t0x03, /* 251 */\n\t0xA7, /* 252 */\n\t0x00, /* 253 */\n\t0xB3, /* 254 */\n\t0x00, /* 255 */\n\t0x19, /* 256 */\n\t0x00, /* 257 */\n\t0xB3, /* 258 */\n\t0x01, /* 259 */\n\t0x73, /* 260 */\n\t0x00, /* 261 */\n\t0xA7, /* 262 */\n\t0x02, /* 263 */\n\t0x73, /* 264 */\n\t0x01, /* 265 */\n\t0xA7, /* 266 */\n\t0x01, /* 267 */\n\t0xA7, /* 268 */\n\t0x03, /* 269 */\n\t0x67, /* 270 */\n\t0x00, /* 271 */\n\t0xF3, /* 272 */\n\t0x00, /* 273 */\n\t0x67, /* 274 */\n\t0x02, /* 275 */\n\t0x67, /* 276 */\n\t0x01, /* 277 */\n\t0x67, /* 278 */\n\t0x03, /* 279 */\n\t0xE7, /* 280 */\n\t0x00, /* 281 */\n\t0xE7, /* 282 */\n\t0x02, /* 283 */\n\t0xE7, /* 284 */\n\t0x01, /* 285 */\n\t0xE7, /* 286 */\n\t0x03, /* 287 */\n\t0xF3, /* 288 */\n\t0x01, /* 289 */\n\t0x17, /* 290 */\n\t0x00, /* 291 */\n\t0x17, /* 292 */\n\t0x02, /* 293 */\n\t0x17, /* 294 */\n\t0x01, /* 295 */\n\t0x17, /* 296 */\n\t0x03, /* 297 */\n\t0x97, /* 298 */\n\t0x00, /* 299 */\n\t0x97, /* 300 */\n\t0x02, /* 301 */\n\t0x97, /* 302 */\n\t0x01, /* 303 */\n\t0x97, /* 304 */\n\t0x03, /* 305 */\n\t0x57, /* 306 */\n\t0x00, /* 307 */\n\t0x57, /* 308 */\n\t0x02, /* 309 */\n\t0x57, /* 310 */\n\t0x01, /* 311 */\n\t0x57, /* 312 */\n\t0x03, /* 313 */\n\t0xD7, /* 314 */\n\t0x00, /* 315 */\n\t0xD7, /* 316 */\n\t0x02, /* 317 */\n\t0xD7, /* 318 */\n\t0x01, /* 319 */\n\t0xD7, /* 320 */\n\t0x03, /* 321 */\n\t0x37, /* 322 */\n\t0x00, /* 323 */\n\t0x37, /* 324 */\n\t0x02, /* 325 */\n\t0x37, /* 326 */\n\t0x01, /* 327 */\n\t0x37, /* 328 */\n\t0x03, /* 329 */\n\t0xB7, /* 330 */\n\t0x00, /* 331 */\n\t0xB7, /* 332 */\n\t0x02, /* 333 */\n\t0xB7, /* 334 */\n\t0x01, /* 335 */\n\t0xB7, /* 336 */\n\t0x03, /* 337 */\n\t0x77, /* 338 */\n\t0x00, /* 339 */\n\t0x77, /* 340 */\n\t0x02, /* 341 */\n\t0xFF, /* 342 */\n\t0x07, /* 343 */\n\t0x77, /* 344 */\n\t0x01, /* 345 */\n\t0x77, /* 346 */\n\t0x03, /* 347 */\n\t0xF7, /* 348 */\n\t0x00, /* 349 */\n\t0xF7, /* 350 */\n\t0x02, /* 351 */\n\t0xF7, /* 352 */\n\t0x01, /* 353 */\n\t0xF7, /* 354 */\n\t0x03, /* 355 */\n\t0xFF, /* 356 */\n\t0x03, /* 357 */\n\t0x0F, /* 358 */\n\t0x00, /* 359 */\n\t0x0F, /* 360 */\n\t0x02, /* 361 */\n\t0x0F, /* 362 */\n\t0x01, /* 363 */\n\t0x0F, /* 364 */\n\t0x03, /* 365 */\n\t0x8F, /* 366 */\n\t0x00, /* 367 */\n\t0x8F, /* 368 */\n\t0x02, /* 369 */\n\t0x8F, /* 370 */\n\t0x01, /* 371 */\n\t0x8F, /* 372 */\n\t0x03, /* 373 */\n\t0x4F, /* 374 */\n\t0x00, /* 375 */\n\t0x4F, /* 376 */\n\t0x02, /* 377 */\n\t0x4F, /* 378 */\n\t0x01, /* 379 */\n\t0x4F, /* 380 */\n\t0x03, /* 381 */\n\t0xCF, /* 382 */\n\t0x00, /* 383 */\n\t0x0B, /* 384 */\n\t0x00, /* 385 */\n\t0xCF, /* 386 */\n\t0x02, /* 387 */\n\t0xCF, /* 388 */\n\t0x01, /* 389 */\n\t0xCF, /* 390 */\n\t0x03, /* 391 */\n\t0x2F, /* 392 */\n\t0x00, /* 393 */\n\t0x2F, /* 394 */\n\t0x02, /* 395 */\n\t0x0B, /* 396 */\n\t0x01, /* 397 */\n\t0x2F, /* 398 */\n\t0x01, /* 399 */\n\t0x2F, /* 400 */\n\t0x03, /* 401 */\n\t0xAF, /* 402 */\n\t0x00, /* 403 */\n\t0xAF, /* 404 */\n\t0x02, /* 405 */\n\t0xAF, /* 406 */\n\t0x01, /* 407 */\n\t0x8B, /* 408 */\n\t0x00, /* 409 */\n\t0xAF, /* 410 */\n\t0x03, /* 411 */\n\t0x6F, /* 412 */\n\t0x00, /* 413 */\n\t0x6F, /* 414 */\n\t0x02, /* 415 */\n\t0x8B, /* 416 */\n\t0x01, /* 417 */\n\t0x6F, /* 418 */\n\t0x01, /* 419 */\n\t0x6F, /* 420 */\n\t0x03, /* 421 */\n\t0xEF, /* 422 */\n\t0x00, /* 423 */\n\t0xEF, /* 424 */\n\t0x02, /* 425 */\n\t0xEF, /* 426 */\n\t0x01, /* 427 */\n\t0xEF, /* 428 */\n\t0x03, /* 429 */\n\t0x1F, /* 430 */\n\t0x00, /* 431 */\n\t0x1F, /* 432 */\n\t0x02, /* 433 */\n\t0x1F, /* 434 */\n\t0x01, /* 435 */\n\t0x1F, /* 436 */\n\t0x03, /* 437 */\n\t0x9F, /* 438 */\n\t0x00, /* 439 */\n\t0x9F, /* 440 */\n\t0x02, /* 441 */\n\t0x9F, /* 442 */\n\t0x01, /* 443 */\n\t0x9F, /* 444 */\n\t0x03, /* 445 */\n\t0x5F, /* 446 */\n\t0x00, /* 447 */\n\t0x4B, /* 448 */\n\t0x00, /* 449 */\n\t0x5F, /* 450 */\n\t0x02, /* 451 */\n\t0x5F, /* 452 */\n\t0x01, /* 453 */\n\t0x5F, /* 454 */\n\t0x03, /* 455 */\n\t0xDF, /* 456 */\n\t0x00, /* 457 */\n\t0xDF, /* 458 */\n\t0x02, /* 459 */\n\t0xDF, /* 460 */\n\t0x01, /* 461 */\n\t0xDF, /* 462 */\n\t0x03, /* 463 */\n\t0x3F, /* 464 */\n\t0x00, /* 465 */\n\t0x3F, /* 466 */\n\t0x02, /* 467 */\n\t0x3F, /* 468 */\n\t0x01, /* 469 */\n\t0x3F, /* 470 */\n\t0x03, /* 471 */\n\t0xBF, /* 472 */\n\t0x00, /* 473 */\n\t0xBF, /* 474 */\n\t0x02, /* 475 */\n\t0x4B, /* 476 */\n\t0x01, /* 477 */\n\t0xBF, /* 478 */\n\t0x01, /* 479 */\n\t0xAD, /* 480 */\n\t0x00, /* 481 */\n\t0xCB, /* 482 */\n\t0x00, /* 483 */\n\t0xCB, /* 484 */\n\t0x01, /* 485 */\n\t0xBF, /* 486 */\n\t0x03, /* 487 */\n\t0x2B, /* 488 */\n\t0x00, /* 489 */\n\t0x7F, /* 490 */\n\t0x00, /* 491 */\n\t0x7F, /* 492 */\n\t0x02, /* 493 */\n\t0x7F, /* 494 */\n\t0x01, /* 495 */\n\t0x2B, /* 496 */\n\t0x01, /* 497 */\n\t0x7F, /* 498 */\n\t0x03, /* 499 */\n\t0xFF, /* 500 */\n\t0x00, /* 501 */\n\t0xFF, /* 502 */\n\t0x02, /* 503 */\n\t0xAB, /* 504 */\n\t0x00, /* 505 */\n\t0xAB, /* 506 */\n\t0x01, /* 507 */\n\t0x6D, /* 508 */\n\t0x00, /* 509 */\n\t0x59, /* 510 */\n\t0x00, /* 511 */\n\t0xFF, /* 512 */\n\t0x17, /* 513 */\n\t0xFF, /* 514 */\n\t0x0F, /* 515 */\n\t0x39, /* 516 */\n\t0x00, /* 517 */\n\t0x79, /* 518 */\n\t0x00, /* 519 */\n\t0xFF, /* 520 */\n\t0x01, /* 521 */\n\t0x05, /* 522 */\n\t0x00, /* 523 */\n\t0x45, /* 524 */\n\t0x00, /* 525 */\n\t0x34, /* 526 */\n\t0x00, /* 527 */\n\t0x0C, /* 528 */\n\t0x00, /* 529 */\n\t0x2C, /* 530 */\n\t0x00, /* 531 */\n\t0x1C, /* 532 */\n\t0x00, /* 533 */\n\t0x00, /* 534 */\n\t0x00, /* 535 */\n\t0x3C, /* 536 */\n\t0x00, /* 537 */\n\t0x02, /* 538 */\n\t0x00, /* 539 */\n\t0x22, /* 540 */\n\t0x00, /* 541 */\n\t0x10, /* 542 */\n\t0x00, /* 543 */\n\t0x12, /* 544 */\n\t0x00, /* 545 */\n\t0x08, /* 546 */\n\t0x00, /* 547 */\n\t0x32, /* 548 */\n\t0x00, /* 549 */\n\t0x0A, /* 550 */\n\t0x00, /* 551 */\n\t0x2A, /* 552 */\n\t0x00, /* 553 */\n\t0x1A, /* 554 */\n\t0x00, /* 555 */\n\t0x3A, /* 556 */\n\t0x00, /* 557 */\n\t0x06, /* 558 */\n\t0x00, /* 559 */\n\t0x26, /* 560 */\n\t0x00, /* 561 */\n\t0x16, /* 562 */\n\t0x00, /* 563 */\n\t0x36, /* 564 */\n\t0x00, /* 565 */\n\t0x0E, /* 566 */\n\t0x00, /* 567 */\n\t0x2E, /* 568 */\n\t0x00, /* 569 */\n\t0x1E, /* 570 */\n\t0x00, /* 571 */\n\t0x3E, /* 572 */\n\t0x00, /* 573 */\n\t0x01, /* 574 */\n\t0x00, /* 575 */\n\t0xED, /* 576 */\n\t0x00, /* 577 */\n\t0x18, /* 578 */\n\t0x00, /* 579 */\n\t0x21, /* 580 */\n\t0x00, /* 581 */\n\t0x25, /* 582 */\n\t0x00, /* 583 */\n\t0x65, /* 584 */\n\t0x00, /* 585 */\n\t0xFF, /* 586 */\n\t0x1F  /* 587 */\n};\n\nstatic const BYTE HuffLengthLOM[32] = {\n\t4, /* 0 */\n\t2, /* 1 */\n\t3, /* 2 */\n\t4, /* 3 */\n\t3, /* 4 */\n\t4, /* 5 */\n\t4, /* 6 */\n\t5, /* 7 */\n\t4, /* 8 */\n\t5, /* 9 */\n\t5, /* 10 */\n\t6, /* 11 */\n\t6, /* 12 */\n\t7, /* 13 */\n\t7, /* 14 */\n\t8, /* 15 */\n\t7, /* 16 */\n\t8, /* 17 */\n\t8, /* 18 */\n\t9, /* 19 */\n\t9, /* 20 */\n\t8, /* 21 */\n\t9, /* 22 */\n\t9, /* 23 */\n\t9, /* 24 */\n\t9, /* 25 */\n\t9, /* 26 */\n\t9, /* 27 */\n\t9, /* 28 */\n\t9, /* 29 */\n\t9, /* 30 */\n\t9  /* 31 */\n};\n\nstatic const UINT16 HuffCodeLOM[32] = {\n\t0x0001, /* 0 */\n\t0x0000, /* 1 */\n\t0x0002, /* 2 */\n\t0x0009, /* 3 */\n\t0x0006, /* 4 */\n\t0x0005, /* 5 */\n\t0x000D, /* 6 */\n\t0x000B, /* 7 */\n\t0x0003, /* 8 */\n\t0x001B, /* 9 */\n\t0x0007, /* 10 */\n\t0x0017, /* 11 */\n\t0x0037, /* 12 */\n\t0x000F, /* 13 */\n\t0x004F, /* 14 */\n\t0x006F, /* 15 */\n\t0x002F, /* 16 */\n\t0x00EF, /* 17 */\n\t0x001F, /* 18 */\n\t0x005F, /* 19 */\n\t0x015F, /* 20 */\n\t0x009F, /* 21 */\n\t0x00DF, /* 22 */\n\t0x01DF, /* 23 */\n\t0x003F, /* 24 */\n\t0x013F, /* 25 */\n\t0x00BF, /* 26 */\n\t0x01BF, /* 27 */\n\t0x007F, /* 28 */\n\t0x017F, /* 29 */\n\t0x00FF, /* 30 */\n\t0x01FF  /* 31 */\n};\n\nstatic const UINT32 CopyOffsetBitsLUT[32] = {\n\t0x0, /* 0 */\n\t0x0, /* 1 */\n\t0x0, /* 2 */\n\t0x0, /* 3 */\n\t0x1, /* 4 */\n\t0x1, /* 5 */\n\t0x2, /* 6 */\n\t0x2, /* 7 */\n\t0x3, /* 8 */\n\t0x3, /* 9 */\n\t0x4, /* 10 */\n\t0x4, /* 11 */\n\t0x5, /* 12 */\n\t0x5, /* 13 */\n\t0x6, /* 14 */\n\t0x6, /* 15 */\n\t0x7, /* 16 */\n\t0x7, /* 17 */\n\t0x8, /* 18 */\n\t0x8, /* 19 */\n\t0x9, /* 20 */\n\t0x9, /* 21 */\n\t0xA, /* 22 */\n\t0xA, /* 23 */\n\t0xB, /* 24 */\n\t0xB, /* 25 */\n\t0xC, /* 26 */\n\t0xC, /* 27 */\n\t0xD, /* 28 */\n\t0xD, /* 29 */\n\t0xE, /* 30 */\n\t0xE  /* 31 */\n};\n\nstatic const UINT32 CopyOffsetBaseLUT[32] = {\n\t0x1,    /* 0 */\n\t0x2,    /* 1 */\n\t0x3,    /* 2 */\n\t0x4,    /* 3 */\n\t0x5,    /* 4 */\n\t0x7,    /* 5 */\n\t0x9,    /* 6 */\n\t0xD,    /* 7 */\n\t0x11,   /* 8 */\n\t0x19,   /* 9 */\n\t0x21,   /* 10 */\n\t0x31,   /* 11 */\n\t0x41,   /* 12 */\n\t0x61,   /* 13 */\n\t0x81,   /* 14 */\n\t0xC1,   /* 15 */\n\t0x101,  /* 16 */\n\t0x181,  /* 17 */\n\t0x201,  /* 18 */\n\t0x301,  /* 19 */\n\t0x401,  /* 20 */\n\t0x601,  /* 21 */\n\t0x801,  /* 22 */\n\t0xC01,  /* 23 */\n\t0x1001, /* 24 */\n\t0x1801, /* 25 */\n\t0x2001, /* 26 */\n\t0x3001, /* 27 */\n\t0x4001, /* 28 */\n\t0x6001, /* 29 */\n\t0x8001, /* 30 */\n\t0xC001  /* 31 */\n};\n\nstatic const UINT32 LOMBitsLUT[30] = {\n\t0x0, /* 0 */\n\t0x0, /* 1 */\n\t0x0, /* 2 */\n\t0x0, /* 3 */\n\t0x0, /* 4 */\n\t0x0, /* 5 */\n\t0x0, /* 6 */\n\t0x0, /* 7 */\n\t0x1, /* 8 */\n\t0x1, /* 9 */\n\t0x1, /* 10 */\n\t0x1, /* 11 */\n\t0x2, /* 12 */\n\t0x2, /* 13 */\n\t0x2, /* 14 */\n\t0x2, /* 15 */\n\t0x3, /* 16 */\n\t0x3, /* 17 */\n\t0x3, /* 18 */\n\t0x3, /* 19 */\n\t0x4, /* 20 */\n\t0x4, /* 21 */\n\t0x4, /* 22 */\n\t0x4, /* 23 */\n\t0x6, /* 24 */\n\t0x6, /* 25 */\n\t0x8, /* 26 */\n\t0x8, /* 27 */\n\t0xE, /* 28 */\n\t0xE  /* 29 */\n};\n\nstatic const UINT32 LOMBaseLUT[30] = {\n\t0x2,   /* 0 */\n\t0x3,   /* 1 */\n\t0x4,   /* 2 */\n\t0x5,   /* 3 */\n\t0x6,   /* 4 */\n\t0x7,   /* 5 */\n\t0x8,   /* 6 */\n\t0x9,   /* 7 */\n\t0xA,   /* 8 */\n\t0xC,   /* 9 */\n\t0xE,   /* 10 */\n\t0x10,  /* 11 */\n\t0x12,  /* 12 */\n\t0x16,  /* 13 */\n\t0x1A,  /* 14 */\n\t0x1E,  /* 15 */\n\t0x22,  /* 16 */\n\t0x2A,  /* 17 */\n\t0x32,  /* 18 */\n\t0x3A,  /* 19 */\n\t0x42,  /* 20 */\n\t0x52,  /* 21 */\n\t0x62,  /* 22 */\n\t0x72,  /* 23 */\n\t0x82,  /* 24 */\n\t0xC2,  /* 25 */\n\t0x102, /* 26 */\n\t0x202, /* 27 */\n\t0x2,   /* 28 */\n\t0x2    /* 29 */\n};\n\nstatic INLINE UINT16 get_word(const BYTE* data)\n{\n\tUINT16 tmp = 0;\n\n\tWINPR_ASSERT(data);\n\ttmp = *data++;\n\ttmp |= *data << 8;\n\treturn tmp;\n}\n\nstatic INLINE UINT32 get_dword(const BYTE* data)\n{\n\tUINT32 tmp;\n\tWINPR_ASSERT(data);\n\ttmp = *data++;\n\ttmp |= (UINT32)*data++ << 8U;\n\ttmp |= (UINT32)*data++ << 16U;\n\ttmp |= (UINT32)*data++ << 24U;\n\treturn tmp;\n}\n\nstatic INLINE BOOL NCrushFetchBits(const BYTE** SrcPtr, const BYTE** SrcEnd, INT32* nbits,\n                                   UINT32* bits)\n{\n\tWINPR_ASSERT(SrcPtr);\n\tWINPR_ASSERT(SrcEnd);\n\tWINPR_ASSERT(nbits);\n\tWINPR_ASSERT(bits);\n\n\tif (*nbits < 16)\n\t{\n\t\tif ((*SrcPtr + 1) >= *SrcEnd)\n\t\t{\n\t\t\tif (*SrcPtr >= *SrcEnd)\n\t\t\t{\n\t\t\t\tif (*nbits < 0)\n\t\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t*bits += *(*SrcPtr)++ << *nbits;\n\t\t\t\t*nbits += 8;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUINT16 tmp = *(*SrcPtr)++;\n\t\t\ttmp |= (*(*SrcPtr)++) << 8;\n\t\t\t*bits += tmp << *nbits;\n\t\t\t*nbits += 16;\n\t\t}\n\t}\n\n\treturn TRUE;\n}\n\nstatic INLINE void NCrushWriteStart(UINT32* bits, UINT32* offset, UINT32* accumulator)\n{\n\tWINPR_ASSERT(bits);\n\tWINPR_ASSERT(offset);\n\tWINPR_ASSERT(accumulator);\n\n\t*bits = 0;\n\t*offset = 0;\n\t*accumulator = 0;\n}\n\nstatic INLINE void NCrushWriteBits(BYTE** DstPtr, UINT32* accumulator, UINT32* offset, UINT32 _bits,\n                                   UINT32 _nbits)\n{\n\tWINPR_ASSERT(DstPtr);\n\tWINPR_ASSERT(accumulator);\n\tWINPR_ASSERT(offset);\n\n\t*accumulator |= _bits << *offset;\n\t*offset += _nbits;\n\n\tif (*offset >= 16)\n\t{\n\t\t*(*DstPtr)++ = (*accumulator & 0xFF);\n\t\t*(*DstPtr)++ = ((*accumulator >> 8) & 0xFF);\n\t\t*accumulator >>= 16;\n\t\t*offset -= 16;\n\t}\n}\n\nstatic INLINE void NCrushWriteFinish(BYTE** DstPtr, UINT32 accumulator)\n{\n\tWINPR_ASSERT(DstPtr);\n\n\t*(*DstPtr)++ = accumulator & 0xFF;\n\t*(*DstPtr)++ = (accumulator >> 8) & 0xFF;\n}\n\nint ncrush_decompress(NCRUSH_CONTEXT* ncrush, const BYTE* pSrcData, UINT32 SrcSize,\n                      const BYTE** ppDstData, UINT32* pDstSize, UINT32 flags)\n{\n\tUINT32 index;\n\tUINT32 bits;\n\tINT32 nbits;\n\tconst BYTE* SrcPtr;\n\tconst BYTE* SrcEnd;\n\tUINT16 Mask;\n\tBYTE Literal;\n\tUINT32 IndexLEC;\n\tUINT32 BitLength;\n\tUINT32 MaskedBits;\n\tUINT32 CopyOffset;\n\tUINT32 CopyLength;\n\tUINT32 OldCopyOffset;\n\tBYTE* CopyOffsetPtr;\n\tUINT32 LengthOfMatch;\n\tUINT32 CopyOffsetIndex;\n\tUINT32 OffsetCacheIndex;\n\tBYTE* HistoryPtr;\n\tBYTE* HistoryBuffer;\n\tBYTE* HistoryBufferEnd;\n\tUINT32 CopyOffsetBits;\n\tUINT32 CopyOffsetBase;\n\tUINT32 LengthOfMatchBits;\n\tUINT32 LengthOfMatchBase;\n\n\tWINPR_ASSERT(ncrush);\n\tWINPR_ASSERT(pSrcData);\n\tWINPR_ASSERT(ppDstData);\n\tWINPR_ASSERT(pDstSize);\n\n\tif (ncrush->HistoryEndOffset != 65535)\n\t\treturn -1001;\n\n\tHistoryBuffer = ncrush->HistoryBuffer;\n\tHistoryBufferEnd = &HistoryBuffer[ncrush->HistoryEndOffset];\n\n\tif (flags & PACKET_AT_FRONT)\n\t{\n\t\tif ((ncrush->HistoryPtr - 32768) <= HistoryBuffer)\n\t\t\treturn -1002;\n\n\t\tMoveMemory(HistoryBuffer, (ncrush->HistoryPtr - 32768), 32768);\n\t\tncrush->HistoryPtr = &(HistoryBuffer[32768]);\n\t\tZeroMemory(&HistoryBuffer[32768], 32768);\n\t}\n\n\tif (flags & PACKET_FLUSHED)\n\t{\n\t\tncrush->HistoryPtr = HistoryBuffer;\n\t\tZeroMemory(HistoryBuffer, sizeof(ncrush->HistoryBuffer));\n\t\tZeroMemory(&(ncrush->OffsetCache), sizeof(ncrush->OffsetCache));\n\t}\n\n\tHistoryPtr = ncrush->HistoryPtr;\n\n\tif (!(flags & PACKET_COMPRESSED))\n\t{\n\t\t*ppDstData = pSrcData;\n\t\t*pDstSize = SrcSize;\n\t\treturn 1;\n\t}\n\n\tSrcEnd = &pSrcData[SrcSize];\n\tnbits = 32;\n\tbits = get_dword(pSrcData);\n\tSrcPtr = pSrcData + 4;\n\n\twhile (1)\n\t{\n\t\twhile (1)\n\t\t{\n\t\t\tMask = get_word(&HuffTableMask[29]);\n\t\t\tMaskedBits = bits & Mask;\n\t\t\tIndexLEC = HuffTableLEC[MaskedBits] & 0xFFF;\n\t\t\tBitLength = HuffTableLEC[MaskedBits] >> 12;\n\t\t\tbits >>= BitLength;\n\t\t\tnbits -= BitLength;\n\n\t\t\tif (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))\n\t\t\t\treturn -1;\n\n\t\t\tif (IndexLEC >= 256)\n\t\t\t\tbreak;\n\n\t\t\tif (HistoryPtr >= HistoryBufferEnd)\n\t\t\t{\n\t\t\t\tWLog_ERR(TAG, \"ncrush_decompress error: HistoryPtr (%p) >= HistoryBufferEnd (%p)\",\n\t\t\t\t         (void*)HistoryPtr, (void*)HistoryBufferEnd);\n\t\t\t\treturn -1003;\n\t\t\t}\n\n\t\t\tLiteral = (HuffTableLEC[MaskedBits] & 0xFF);\n\t\t\t*HistoryPtr++ = Literal;\n\t\t}\n\n\t\tif (IndexLEC == 256)\n\t\t\tbreak; /* EOS */\n\n\t\tCopyOffsetIndex = IndexLEC - 257;\n\n\t\tif (CopyOffsetIndex >= 32)\n\t\t{\n\t\t\tOffsetCacheIndex = IndexLEC - 289;\n\n\t\t\tif (OffsetCacheIndex >= 4)\n\t\t\t\treturn -1004;\n\n\t\t\tCopyOffset = ncrush->OffsetCache[OffsetCacheIndex];\n\t\t\tMask = get_word(&HuffTableMask[21]);\n\t\t\tMaskedBits = bits & Mask;\n\t\t\tLengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;\n\t\t\tBitLength = HuffTableLOM[MaskedBits] >> 12;\n\t\t\tbits >>= BitLength;\n\t\t\tnbits -= BitLength;\n\n\t\t\tif (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))\n\t\t\t\treturn -1;\n\n\t\t\tLengthOfMatchBits = LOMBitsLUT[LengthOfMatch];\n\t\t\tLengthOfMatchBase = LOMBaseLUT[LengthOfMatch];\n\n\t\t\tif (LengthOfMatchBits)\n\t\t\t{\n\t\t\t\tMask = get_word(&HuffTableMask[(2 * LengthOfMatchBits) + 3]);\n\t\t\t\tMaskedBits = bits & Mask;\n\t\t\t\tbits >>= LengthOfMatchBits;\n\t\t\t\tnbits -= LengthOfMatchBits;\n\t\t\t\tLengthOfMatchBase += MaskedBits;\n\n\t\t\t\tif (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))\n\t\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tOldCopyOffset = ncrush->OffsetCache[OffsetCacheIndex];\n\t\t\tncrush->OffsetCache[OffsetCacheIndex] = ncrush->OffsetCache[0];\n\t\t\tncrush->OffsetCache[0] = OldCopyOffset;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tCopyOffsetBits = CopyOffsetBitsLUT[CopyOffsetIndex];\n\t\t\tCopyOffsetBase = CopyOffsetBaseLUT[CopyOffsetIndex];\n\t\t\tCopyOffset = CopyOffsetBase - 1;\n\n\t\t\tif (CopyOffsetBits)\n\t\t\t{\n\t\t\t\tMask = get_word(&HuffTableMask[(2 * CopyOffsetBits) + 3]);\n\t\t\t\tMaskedBits = bits & Mask;\n\t\t\t\tCopyOffset = CopyOffsetBase + MaskedBits - 1;\n\t\t\t\tbits >>= CopyOffsetBits;\n\t\t\t\tnbits -= CopyOffsetBits;\n\n\t\t\t\tif (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))\n\t\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tMask = get_word(&HuffTableMask[21]);\n\t\t\tMaskedBits = bits & Mask;\n\t\t\tLengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;\n\t\t\tBitLength = HuffTableLOM[MaskedBits] >> 12;\n\t\t\tbits >>= BitLength;\n\t\t\tnbits -= BitLength;\n\n\t\t\tif (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))\n\t\t\t\treturn -1;\n\n\t\t\tLengthOfMatchBits = LOMBitsLUT[LengthOfMatch];\n\t\t\tLengthOfMatchBase = LOMBaseLUT[LengthOfMatch];\n\n\t\t\tif (LengthOfMatchBits)\n\t\t\t{\n\t\t\t\tMask = get_word(&HuffTableMask[(2 * LengthOfMatchBits) + 3]);\n\t\t\t\tMaskedBits = bits & Mask;\n\t\t\t\tbits >>= LengthOfMatchBits;\n\t\t\t\tnbits -= LengthOfMatchBits;\n\t\t\t\tLengthOfMatchBase += MaskedBits;\n\n\t\t\t\tif (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))\n\t\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tncrush->OffsetCache[3] = ncrush->OffsetCache[2];\n\t\t\tncrush->OffsetCache[2] = ncrush->OffsetCache[1];\n\t\t\tncrush->OffsetCache[1] = ncrush->OffsetCache[0];\n\t\t\tncrush->OffsetCache[0] = CopyOffset;\n\t\t}\n\n\t\tCopyOffsetPtr = &HistoryBuffer[(HistoryPtr - HistoryBuffer - CopyOffset) & 0xFFFF];\n\t\tLengthOfMatch = LengthOfMatchBase;\n\n\t\tif (LengthOfMatch < 2)\n\t\t\treturn -1005;\n\n\t\tif ((CopyOffsetPtr >= (HistoryBufferEnd - LengthOfMatch)) ||\n\t\t    (HistoryPtr >= (HistoryBufferEnd - LengthOfMatch)))\n\t\t\treturn -1006;\n\n\t\tCopyOffsetPtr = HistoryPtr - CopyOffset;\n\t\tindex = 0;\n\t\tCopyLength = (LengthOfMatch > CopyOffset) ? CopyOffset : LengthOfMatch;\n\n\t\tif (CopyOffsetPtr >= HistoryBuffer)\n\t\t{\n\t\t\twhile (CopyLength > 0)\n\t\t\t{\n\t\t\t\t*HistoryPtr++ = *CopyOffsetPtr++;\n\t\t\t\tCopyLength--;\n\t\t\t}\n\n\t\t\twhile (LengthOfMatch > CopyOffset)\n\t\t\t{\n\t\t\t\tindex = ((index >= CopyOffset)) ? 0 : index;\n\t\t\t\t*HistoryPtr++ = *(CopyOffsetPtr + index++);\n\t\t\t\tLengthOfMatch--;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tCopyOffsetPtr = HistoryBufferEnd - (CopyOffset - (HistoryPtr - HistoryBuffer));\n\t\t\tCopyOffsetPtr++;\n\n\t\t\twhile (CopyLength && (CopyOffsetPtr <= HistoryBufferEnd))\n\t\t\t{\n\t\t\t\t*HistoryPtr++ = *CopyOffsetPtr++;\n\t\t\t\tCopyLength--;\n\t\t\t}\n\n\t\t\tCopyOffsetPtr = HistoryBuffer;\n\n\t\t\twhile (LengthOfMatch > CopyOffset)\n\t\t\t{\n\t\t\t\tindex = ((index >= CopyOffset)) ? 0 : index;\n\t\t\t\t*HistoryPtr++ = *(CopyOffsetPtr + index++);\n\t\t\t\tLengthOfMatch--;\n\t\t\t}\n\t\t}\n\n\t\tLengthOfMatch = LengthOfMatchBase;\n\n\t\tif (LengthOfMatch == 2)\n\t\t\tcontinue;\n\t}\n\n\tif (IndexLEC != 256)\n\t\treturn -1;\n\n\tif (ncrush->HistoryBufferFence != 0xABABABAB)\n\t{\n\t\tWLog_ERR(TAG, \"NCrushDecompress: history buffer fence was overwritten, potential buffer \"\n\t\t              \"overflow detected!\");\n\t\treturn -1007;\n\t}\n\n\tconst intptr_t hsize = HistoryPtr - ncrush->HistoryPtr;\n\tWINPR_ASSERT(hsize >= 0);\n\tWINPR_ASSERT(hsize <= UINT32_MAX);\n\t*pDstSize = (UINT32)hsize;\n\t*ppDstData = ncrush->HistoryPtr;\n\tncrush->HistoryPtr = HistoryPtr;\n\treturn 1;\n}\n\nstatic int ncrush_hash_table_add(NCRUSH_CONTEXT* ncrush, const BYTE* pSrcData, UINT32 SrcSize,\n                                 UINT32 HistoryOffset)\n{\n\tconst BYTE* SrcPtr = pSrcData;\n\tUINT32 Hash;\n\tUINT32 Offset = HistoryOffset;\n\tUINT32 EndOffset = Offset + SrcSize - 8;\n\n\tWINPR_ASSERT(ncrush);\n\tWINPR_ASSERT(pSrcData);\n\tWINPR_ASSERT(Offset + SrcSize >= 8);\n\n\twhile (Offset < EndOffset)\n\t{\n\t\tHash = ncrush->HashTable[get_word(SrcPtr)];\n\t\tncrush->HashTable[get_word(SrcPtr)] = Offset;\n\t\tncrush->MatchTable[Offset] = Hash;\n\t\tSrcPtr++;\n\t\tOffset++;\n\t}\n\n\treturn 1;\n}\n\nstatic int ncrush_find_match_length(const BYTE* Ptr1, const BYTE* Ptr2, BYTE* HistoryPtr)\n{\n\tBYTE val1, val2;\n\tconst BYTE* Ptr = Ptr1;\n\n\tWINPR_ASSERT(Ptr1);\n\tWINPR_ASSERT(Ptr2);\n\tWINPR_ASSERT(HistoryPtr);\n\n\tdo\n\t{\n\t\tif (Ptr1 > HistoryPtr)\n\t\t\tbreak;\n\n\t\tval1 = *Ptr1++;\n\t\tval2 = *Ptr2++;\n\t} while (val1 == val2);\n\n\tconst intptr_t psize = Ptr1 - (Ptr + 1);\n\tWINPR_ASSERT(psize <= INT_MAX);\n\tWINPR_ASSERT(psize >= -INT_MAX);\n\treturn (int)psize;\n}\n\nstatic int ncrush_find_best_match(NCRUSH_CONTEXT* ncrush, UINT16 HistoryOffset,\n                                  UINT32* pMatchOffset)\n{\n\tint i, j;\n\tint Length;\n\tint MatchLength;\n\tBYTE* MatchPtr;\n\tUINT16 Offset;\n\tUINT16 NextOffset;\n\tUINT16 MatchOffset;\n\tBYTE* HistoryBuffer;\n\n\tWINPR_ASSERT(ncrush);\n\tWINPR_ASSERT(pMatchOffset);\n\n\tif (!ncrush->MatchTable[HistoryOffset])\n\t\treturn -1;\n\n\tMatchLength = 2;\n\tOffset = HistoryOffset;\n\tHistoryBuffer = (BYTE*)ncrush->HistoryBuffer;\n\tncrush->MatchTable[0] = HistoryOffset;\n\tMatchOffset = ncrush->MatchTable[HistoryOffset];\n\tNextOffset = ncrush->MatchTable[Offset];\n\tMatchPtr = &HistoryBuffer[MatchLength];\n\n\tfor (i = 0; i < 4; i++)\n\t{\n\t\tj = -1;\n\n\t\tif (j < 0)\n\t\t{\n\t\t\tOffset = ncrush->MatchTable[NextOffset];\n\n\t\t\tif (MatchPtr[NextOffset] == HistoryBuffer[HistoryOffset + MatchLength])\n\t\t\t\tj = 0;\n\t\t}\n\n\t\tif (j < 0)\n\t\t{\n\t\t\tNextOffset = ncrush->MatchTable[Offset];\n\n\t\t\tif (MatchPtr[Offset] == HistoryBuffer[HistoryOffset + MatchLength])\n\t\t\t\tj = 1;\n\t\t}\n\n\t\tif (j < 0)\n\t\t{\n\t\t\tOffset = ncrush->MatchTable[NextOffset];\n\n\t\t\tif (MatchPtr[NextOffset] == HistoryBuffer[HistoryOffset + MatchLength])\n\t\t\t\tj = 2;\n\t\t}\n\n\t\tif (j < 0)\n\t\t{\n\t\t\tNextOffset = ncrush->MatchTable[Offset];\n\n\t\t\tif (MatchPtr[Offset] == HistoryBuffer[HistoryOffset + MatchLength])\n\t\t\t\tj = 3;\n\t\t}\n\n\t\tif (j < 0)\n\t\t{\n\t\t\tOffset = ncrush->MatchTable[NextOffset];\n\n\t\t\tif (MatchPtr[NextOffset] == HistoryBuffer[HistoryOffset + MatchLength])\n\t\t\t\tj = 4;\n\t\t}\n\n\t\tif (j < 0)\n\t\t{\n\t\t\tNextOffset = ncrush->MatchTable[Offset];\n\n\t\t\tif (MatchPtr[Offset] == HistoryBuffer[HistoryOffset + MatchLength])\n\t\t\t\tj = 5;\n\t\t}\n\n\t\tif (j >= 0)\n\t\t{\n\t\t\tif ((j % 2) == 0)\n\t\t\t\tOffset = NextOffset;\n\n\t\t\tif ((Offset != HistoryOffset) && Offset)\n\t\t\t{\n\t\t\t\tLength = ncrush_find_match_length(&HistoryBuffer[HistoryOffset + 2],\n\t\t\t\t                                  &HistoryBuffer[Offset + 2], ncrush->HistoryPtr) +\n\t\t\t\t         2;\n\n\t\t\t\tif (Length < 2)\n\t\t\t\t\treturn -1;\n\n\t\t\t\tif (Length > 16)\n\t\t\t\t\tbreak;\n\n\t\t\t\tif (Length > MatchLength)\n\t\t\t\t{\n\t\t\t\t\tMatchLength = Length;\n\t\t\t\t\tMatchOffset = Offset;\n\t\t\t\t}\n\n\t\t\t\tif ((Length <= MatchLength) ||\n\t\t\t\t    (&HistoryBuffer[HistoryOffset + 2] < ncrush->HistoryPtr))\n\t\t\t\t{\n\t\t\t\t\tNextOffset = ncrush->MatchTable[Offset];\n\t\t\t\t\tMatchPtr = &HistoryBuffer[MatchLength];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tncrush->MatchTable[0] = 0;\n\t*pMatchOffset = MatchOffset;\n\treturn MatchLength;\n}\n\nstatic int ncrush_move_encoder_windows(NCRUSH_CONTEXT* ncrush, BYTE* HistoryPtr)\n{\n\tint i, j;\n\tint NewHash;\n\tint NewMatch;\n\tUINT32 HistoryOffset;\n\n\tWINPR_ASSERT(ncrush);\n\tWINPR_ASSERT(HistoryPtr);\n\n\tif (HistoryPtr < &ncrush->HistoryBuffer[32768])\n\t\treturn -1;\n\n\tif (HistoryPtr > &ncrush->HistoryBuffer[65536])\n\t\treturn -1;\n\n\tMoveMemory(ncrush->HistoryBuffer, HistoryPtr - 32768, 32768);\n\tconst intptr_t hsize = HistoryPtr - 32768 - ncrush->HistoryBuffer;\n\tWINPR_ASSERT(hsize <= UINT32_MAX);\n\tWINPR_ASSERT(hsize >= 0);\n\tHistoryOffset = (UINT32)hsize;\n\n\tfor (i = 0; i < 65536; i += 4)\n\t{\n\t\tNewHash = ncrush->HashTable[i + 0] - HistoryOffset;\n\t\tncrush->HashTable[i + 0] = (NewHash <= 0) ? 0 : NewHash;\n\t\tNewHash = ncrush->HashTable[i + 1] - HistoryOffset;\n\t\tncrush->HashTable[i + 1] = (NewHash <= 0) ? 0 : NewHash;\n\t\tNewHash = ncrush->HashTable[i + 2] - HistoryOffset;\n\t\tncrush->HashTable[i + 2] = (NewHash <= 0) ? 0 : NewHash;\n\t\tNewHash = ncrush->HashTable[i + 3] - HistoryOffset;\n\t\tncrush->HashTable[i + 3] = (NewHash <= 0) ? 0 : NewHash;\n\t}\n\n\tfor (j = 0; j < 32768; j += 4)\n\t{\n\t\tNewMatch = ncrush->MatchTable[HistoryOffset + j + 0] - HistoryOffset;\n\t\tncrush->MatchTable[j + 0] = (NewMatch <= 0) ? 0 : NewMatch;\n\t\tNewMatch = ncrush->MatchTable[HistoryOffset + j + 1] - HistoryOffset;\n\t\tncrush->MatchTable[j + 1] = (NewMatch <= 0) ? 0 : NewMatch;\n\t\tNewMatch = ncrush->MatchTable[HistoryOffset + j + 2] - HistoryOffset;\n\t\tncrush->MatchTable[j + 2] = (NewMatch <= 0) ? 0 : NewMatch;\n\t\tNewMatch = ncrush->MatchTable[HistoryOffset + j + 3] - HistoryOffset;\n\t\tncrush->MatchTable[j + 3] = (NewMatch <= 0) ? 0 : NewMatch;\n\t}\n\n\tZeroMemory(&ncrush->MatchTable[32768], 65536);\n\treturn 1;\n}\n\nint ncrush_compress(NCRUSH_CONTEXT* ncrush, const BYTE* pSrcData, UINT32 SrcSize, BYTE* pDstBuffer,\n                    const BYTE** ppDstData, UINT32* pDstSize, UINT32* pFlags)\n{\n\tBYTE Literal;\n\tconst BYTE* SrcPtr;\n\tBYTE* DstPtr;\n\tUINT32 bits;\n\tUINT32 offset;\n\tUINT16 Mask;\n\tUINT32 MaskedBits;\n\tUINT32 accumulator;\n\tconst BYTE* SrcEndPtr;\n\tBYTE* DstEndPtr;\n\tBYTE* HistoryPtr;\n\tBYTE* pDstData;\n\tUINT32 DstSize;\n\tBOOL PacketAtFront = FALSE;\n\tBOOL PacketFlushed = FALSE;\n\tUINT32 MatchLength;\n\tUINT32 IndexLEC;\n\tUINT32 IndexLOM;\n\tUINT32 IndexCO;\n\tUINT32 CodeLEC;\n\tUINT32 BitLength;\n\tUINT32 CopyOffset;\n\tUINT32 MatchOffset;\n\tUINT32 OldCopyOffset;\n\tUINT32* OffsetCache;\n\tUINT32 OffsetCacheIndex;\n\tUINT32 HistoryOffset;\n\tBYTE* HistoryBuffer;\n\tUINT32 HistoryBufferSize;\n\tBYTE* HistoryBufferEndPtr;\n\tUINT32 CopyOffsetIndex;\n\tUINT32 CopyOffsetBits;\n\tUINT32 CompressionLevel = 2;\n\n\tWINPR_ASSERT(ncrush);\n\n\tWINPR_ASSERT(ncrush);\n\tWINPR_ASSERT(pSrcData);\n\tWINPR_ASSERT(pDstBuffer);\n\tWINPR_ASSERT(ppDstData);\n\tWINPR_ASSERT(pDstSize);\n\tWINPR_ASSERT(pFlags);\n\n\tHistoryBuffer = ncrush->HistoryBuffer;\n\t*pFlags = 0;\n\n\tif ((SrcSize + ncrush->HistoryOffset) >= 65529)\n\t{\n\t\tif (ncrush->HistoryOffset == (ncrush->HistoryBufferSize + 1))\n\t\t{\n\t\t\tncrush->HistoryOffset = 0;\n\t\t\tncrush->HistoryPtr = HistoryBuffer;\n\t\t\tPacketFlushed = TRUE;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (ncrush_move_encoder_windows(ncrush, &(HistoryBuffer[ncrush->HistoryOffset])) < 0)\n\t\t\t\treturn -1001;\n\n\t\t\tncrush->HistoryPtr = &HistoryBuffer[32768];\n\t\t\tncrush->HistoryOffset = 32768;\n\t\t\tPacketAtFront = TRUE;\n\t\t}\n\t}\n\telse\n\t{\n\t\t*pFlags = 0;\n\t}\n\n\tpDstData = pDstBuffer;\n\t*ppDstData = pDstBuffer;\n\n\tif (!pDstData)\n\t\treturn -1002;\n\n\tDstSize = *pDstSize;\n\n\tif (DstSize < SrcSize)\n\t\treturn -1003;\n\n\tDstSize = SrcSize;\n\tNCrushWriteStart(&bits, &offset, &accumulator);\n\tDstPtr = pDstData;\n\tSrcPtr = pSrcData;\n\tSrcEndPtr = &pSrcData[SrcSize];\n\tDstEndPtr = &pDstData[DstSize - 1];\n\tOffsetCache = ncrush->OffsetCache;\n\tHistoryPtr = &HistoryBuffer[ncrush->HistoryOffset];\n\tHistoryBufferEndPtr = &HistoryBuffer[65536];\n\tHistoryBufferSize = ncrush->HistoryBufferSize;\n\tCopyOffset = 0;\n\tMatchOffset = 0;\n\tconst intptr_t thsize = HistoryPtr - HistoryBuffer;\n\tWINPR_ASSERT(thsize >= 0);\n\tWINPR_ASSERT(thsize <= UINT32_MAX);\n\tncrush_hash_table_add(ncrush, pSrcData, SrcSize, (UINT32)thsize);\n\tCopyMemory(HistoryPtr, pSrcData, SrcSize);\n\tncrush->HistoryPtr = &HistoryPtr[SrcSize];\n\n\twhile (SrcPtr < (SrcEndPtr - 2))\n\t{\n\t\tMatchLength = 0;\n\t\tconst intptr_t hsize = HistoryPtr - HistoryBuffer;\n\t\tWINPR_ASSERT(hsize <= UINT32_MAX);\n\t\tWINPR_ASSERT(hsize >= 0);\n\t\tHistoryOffset = (UINT32)hsize;\n\n\t\tif (ncrush->HistoryPtr && (HistoryPtr > ncrush->HistoryPtr))\n\t\t\treturn -1;\n\n\t\tif (HistoryOffset >= 65536)\n\t\t\treturn -1004;\n\n\t\tif (ncrush->MatchTable[HistoryOffset])\n\t\t{\n\t\t\tint rc;\n\n\t\t\tMatchOffset = 0;\n\t\t\trc = ncrush_find_best_match(ncrush, HistoryOffset, &MatchOffset);\n\n\t\t\tif (rc < 0)\n\t\t\t\treturn -1005;\n\t\t\tMatchLength = (UINT32)rc;\n\t\t}\n\n\t\tif (MatchLength)\n\t\t\tCopyOffset = (HistoryBufferSize - 1) & (HistoryPtr - &HistoryBuffer[MatchOffset]);\n\n\t\tif ((MatchLength == 2) && (CopyOffset >= 64))\n\t\t\tMatchLength = 0;\n\n\t\tif (MatchLength == 0)\n\t\t{\n\t\t\t/* Literal */\n\t\t\tLiteral = *SrcPtr++;\n\t\t\tHistoryPtr++;\n\n\t\t\tif ((DstPtr + 2) > DstEndPtr) /* PACKET_FLUSH #1 */\n\t\t\t{\n\t\t\t\tncrush_context_reset(ncrush, TRUE);\n\t\t\t\t*pFlags = PACKET_FLUSHED;\n\t\t\t\t*pFlags |= CompressionLevel;\n\t\t\t\t*ppDstData = pSrcData;\n\t\t\t\t*pDstSize = SrcSize;\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tIndexLEC = Literal;\n\t\t\tBitLength = HuffLengthLEC[IndexLEC];\n\t\t\tCodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);\n\n\t\t\tif (BitLength > 15)\n\t\t\t\treturn -1006;\n\n\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, CodeLEC, BitLength);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tHistoryPtr += MatchLength;\n\t\t\tSrcPtr += MatchLength;\n\n\t\t\tif (!MatchLength)\n\t\t\t\treturn -1007;\n\n\t\t\tif ((DstPtr + 8) > DstEndPtr) /* PACKET_FLUSH #2 */\n\t\t\t{\n\t\t\t\tncrush_context_reset(ncrush, TRUE);\n\t\t\t\t*pFlags = PACKET_FLUSHED;\n\t\t\t\t*pFlags |= CompressionLevel;\n\t\t\t\t*ppDstData = pSrcData;\n\t\t\t\t*pDstSize = SrcSize;\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tOffsetCacheIndex = 5;\n\n\t\t\tif ((CopyOffset == OffsetCache[0]) || (CopyOffset == OffsetCache[1]) ||\n\t\t\t    (CopyOffset == OffsetCache[2]) || (CopyOffset == OffsetCache[3]))\n\t\t\t{\n\t\t\t\tif (CopyOffset == OffsetCache[3])\n\t\t\t\t{\n\t\t\t\t\tOldCopyOffset = OffsetCache[3];\n\t\t\t\t\tOffsetCache[3] = OffsetCache[0];\n\t\t\t\t\tOffsetCache[0] = OldCopyOffset;\n\t\t\t\t\tOffsetCacheIndex = 3;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (CopyOffset == OffsetCache[2])\n\t\t\t\t\t{\n\t\t\t\t\t\tOldCopyOffset = OffsetCache[2];\n\t\t\t\t\t\tOffsetCache[2] = OffsetCache[0];\n\t\t\t\t\t\tOffsetCache[0] = OldCopyOffset;\n\t\t\t\t\t\tOffsetCacheIndex = 2;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (CopyOffset == OffsetCache[1])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOldCopyOffset = OffsetCache[1];\n\t\t\t\t\t\t\tOffsetCache[1] = OffsetCache[0];\n\t\t\t\t\t\t\tOffsetCache[0] = OldCopyOffset;\n\t\t\t\t\t\t\tOffsetCacheIndex = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CopyOffset == OffsetCache[0])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tOffsetCacheIndex = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tOffsetCache[3] = OffsetCache[2];\n\t\t\t\tOffsetCache[2] = OffsetCache[1];\n\t\t\t\tOffsetCache[1] = OffsetCache[0];\n\t\t\t\tOffsetCache[0] = CopyOffset;\n\t\t\t}\n\n\t\t\tif (OffsetCacheIndex >= 4)\n\t\t\t{\n\t\t\t\t/* CopyOffset not in OffsetCache */\n\t\t\t\tif (CopyOffset >= 256)\n\t\t\t\t\tbits = (CopyOffset >> 7) + 256;\n\t\t\t\telse\n\t\t\t\t\tbits = CopyOffset;\n\n\t\t\t\tCopyOffsetIndex = ncrush->HuffTableCopyOffset[bits + 2];\n\t\t\t\tCopyOffsetBits = CopyOffsetBitsLUT[CopyOffsetIndex];\n\t\t\t\tIndexLEC = 257 + CopyOffsetIndex;\n\t\t\t\tBitLength = HuffLengthLEC[IndexLEC];\n\t\t\t\tCodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);\n\n\t\t\t\tif (BitLength > 15)\n\t\t\t\t\treturn -1008;\n\n\t\t\t\tif (CopyOffsetBits > 18)\n\t\t\t\t\treturn -1009;\n\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, CodeLEC, BitLength);\n\t\t\t\tMask = ((1 << CopyOffsetBits) - 1);\n\t\t\t\tMaskedBits = CopyOffset & Mask;\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, MaskedBits, CopyOffsetBits);\n\n\t\t\t\tif ((MatchLength - 2) >= 768)\n\t\t\t\t\tIndexCO = 28;\n\t\t\t\telse\n\t\t\t\t\tIndexCO = ncrush->HuffTableLOM[MatchLength];\n\n\t\t\t\tBitLength = HuffLengthLOM[IndexCO];\n\t\t\t\tIndexLOM = LOMBitsLUT[IndexCO];\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, HuffCodeLOM[IndexCO], BitLength);\n\t\t\t\tMask = ((1 << IndexLOM) - 1);\n\t\t\t\tMaskedBits = (MatchLength - 2) & Mask;\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, MaskedBits, IndexLOM);\n\n\t\t\t\tif ((MaskedBits + LOMBaseLUT[IndexCO]) != MatchLength)\n\t\t\t\t\treturn -1010;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t/* CopyOffset in OffsetCache */\n\t\t\t\tIndexLEC = 289 + OffsetCacheIndex;\n\t\t\t\tBitLength = HuffLengthLEC[IndexLEC];\n\t\t\t\tCodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);\n\n\t\t\t\tif (BitLength >= 15)\n\t\t\t\t\treturn -1011;\n\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, CodeLEC, BitLength);\n\n\t\t\t\tif ((MatchLength - 2) >= 768)\n\t\t\t\t\tIndexCO = 28;\n\t\t\t\telse\n\t\t\t\t\tIndexCO = ncrush->HuffTableLOM[MatchLength];\n\n\t\t\t\tBitLength = HuffLengthLOM[IndexCO];\n\t\t\t\tIndexLOM = LOMBitsLUT[IndexCO];\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, HuffCodeLOM[IndexCO], BitLength);\n\t\t\t\tMask = ((1 << IndexLOM) - 1);\n\t\t\t\tMaskedBits = (MatchLength - 2) & Mask;\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, MaskedBits, IndexLOM);\n\n\t\t\t\tif ((MaskedBits + LOMBaseLUT[IndexCO]) != MatchLength)\n\t\t\t\t\treturn -1012;\n\t\t\t}\n\t\t}\n\n\t\tif (HistoryPtr >= HistoryBufferEndPtr)\n\t\t\treturn -1013;\n\t}\n\n\twhile (SrcPtr < SrcEndPtr)\n\t{\n\t\tif ((DstPtr + 2) > DstEndPtr) /* PACKET_FLUSH #3 */\n\t\t{\n\t\t\tncrush_context_reset(ncrush, TRUE);\n\t\t\t*pFlags = PACKET_FLUSHED;\n\t\t\t*pFlags |= CompressionLevel;\n\t\t\t*ppDstData = pSrcData;\n\t\t\t*pDstSize = SrcSize;\n\t\t\treturn 1;\n\t\t}\n\n\t\tLiteral = *SrcPtr++;\n\t\tHistoryPtr++;\n\t\tIndexLEC = Literal;\n\t\tBitLength = HuffLengthLEC[IndexLEC];\n\t\tCodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);\n\n\t\tif (BitLength > 15)\n\t\t\treturn -1014;\n\n\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, CodeLEC, BitLength);\n\t}\n\n\tif ((DstPtr + 4) >= DstEndPtr) /* PACKET_FLUSH #4 */\n\t{\n\t\tncrush_context_reset(ncrush, TRUE);\n\t\t*pFlags = PACKET_FLUSHED;\n\t\t*pFlags |= CompressionLevel;\n\t\t*ppDstData = pSrcData;\n\t\t*pDstSize = SrcSize;\n\t\treturn 1;\n\t}\n\n\tIndexLEC = 256;\n\tBitLength = HuffLengthLEC[IndexLEC];\n\n\tif (BitLength > 15)\n\t\treturn -1015;\n\n\tbits = get_word(&HuffCodeLEC[IndexLEC * 2]);\n\tNCrushWriteBits(&DstPtr, &accumulator, &offset, bits, BitLength);\n\tNCrushWriteFinish(&DstPtr, accumulator);\n\tconst intptr_t dsize = DstPtr - pDstData;\n\tWINPR_ASSERT(dsize <= UINT32_MAX);\n\tWINPR_ASSERT(dsize >= 0);\n\t*pDstSize = (UINT32)dsize;\n\n\tif (*pDstSize > SrcSize)\n\t\treturn -1016;\n\n\t*pFlags |= PACKET_COMPRESSED;\n\t*pFlags |= CompressionLevel;\n\n\tif (PacketAtFront)\n\t\t*pFlags |= PACKET_AT_FRONT;\n\n\tif (PacketFlushed)\n\t\t*pFlags |= PACKET_FLUSHED;\n\n\tncrush->HistoryOffset = HistoryPtr - HistoryBuffer;\n\n\tif (ncrush->HistoryOffset >= ncrush->HistoryBufferSize)\n\t\treturn -1;\n\n\treturn 1;\n}\n\nstatic int ncrush_generate_tables(NCRUSH_CONTEXT* context)\n{\n\tUINT32 k, i;\n\tint j, l;\n\tk = 0;\n\n\tWINPR_ASSERT(context);\n\n\tfor (i = 0; i < 28; i++)\n\t{\n\t\tfor (j = 0; j < 1 << LOMBitsLUT[i]; j++)\n\t\t{\n\t\t\tl = (k++) + 2;\n\t\t\tcontext->HuffTableLOM[l] = (int)i;\n\t\t}\n\t}\n\n\tfor (k = 2; k < 4096; k++)\n\t{\n\t\tif ((k - 2) >= 768)\n\t\t\ti = 28;\n\t\telse\n\t\t\ti = context->HuffTableLOM[k];\n\n\t\tif (((((1 << LOMBitsLUT[i]) - 1) & (k - 2)) + LOMBaseLUT[i]) != k)\n\t\t\treturn -1;\n\t}\n\n\tk = 0;\n\n\tfor (i = 0; i < 16; i++)\n\t{\n\t\tfor (j = 0; j < 1 << CopyOffsetBitsLUT[i]; j++)\n\t\t{\n\t\t\tl = k++ + 2;\n\t\t\tcontext->HuffTableCopyOffset[l] = i;\n\t\t}\n\t}\n\n\tk /= 128;\n\n\tfor (i = 16; i < 32; i++)\n\t{\n\t\tfor (j = 0; j < 1 << (CopyOffsetBitsLUT[i] - 7); j++)\n\t\t{\n\t\t\tl = k++ + 2 + 256;\n\t\t\tcontext->HuffTableCopyOffset[l] = i;\n\t\t}\n\t}\n\n\tif ((k + 256) > 1024)\n\t\treturn -1;\n\n\treturn 1;\n}\n\nvoid ncrush_context_reset(NCRUSH_CONTEXT* ncrush, BOOL flush)\n{\n\tWINPR_ASSERT(ncrush);\n\n\tZeroMemory(&(ncrush->HistoryBuffer), sizeof(ncrush->HistoryBuffer));\n\tZeroMemory(&(ncrush->OffsetCache), sizeof(ncrush->OffsetCache));\n\tZeroMemory(&(ncrush->MatchTable), sizeof(ncrush->MatchTable));\n\tZeroMemory(&(ncrush->HashTable), sizeof(ncrush->HashTable));\n\n\tif (flush)\n\t\tncrush->HistoryOffset = ncrush->HistoryBufferSize + 1;\n\telse\n\t\tncrush->HistoryOffset = 0;\n\n\tncrush->HistoryPtr = &(ncrush->HistoryBuffer[ncrush->HistoryOffset]);\n}\n\nNCRUSH_CONTEXT* ncrush_context_new(BOOL Compressor)\n{\n\tNCRUSH_CONTEXT* ncrush = (NCRUSH_CONTEXT*)calloc(1, sizeof(NCRUSH_CONTEXT));\n\n\tif (!ncrush)\n\t\tgoto fail;\n\n\tncrush->Compressor = Compressor;\n\tncrush->HistoryBufferSize = 65536;\n\tncrush->HistoryEndOffset = ncrush->HistoryBufferSize - 1;\n\tncrush->HistoryBufferFence = 0xABABABAB;\n\tncrush->HistoryOffset = 0;\n\tncrush->HistoryPtr = &(ncrush->HistoryBuffer[ncrush->HistoryOffset]);\n\n\tif (ncrush_generate_tables(ncrush) < 0)\n\t{\n\t\tWLog_DBG(TAG, \"ncrush_context_new: failed to initialize tables\");\n\t\tgoto fail;\n\t}\n\n\tncrush_context_reset(ncrush, FALSE);\n\n\treturn ncrush;\nfail:\n\tncrush_context_free(ncrush);\n\treturn NULL;\n}\n\nvoid ncrush_context_free(NCRUSH_CONTEXT* ncrush)\n{\n\tfree(ncrush);\n}\n"], "fixing_code": ["/**\n * FreeRDP: A Remote Desktop Protocol Implementation\n * NCrush (RDP6) Bulk Data Compression\n *\n * Copyright 2014 Marc-Andre Moreau <marcandre.moreau@gmail.com>\n * Copyright 2017 Armin Novak <armin.novak@thincast.com>\n * Copyright 2017 Thincast Technologies GmbH\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include <winpr/assert.h>\n\n#include <freerdp/config.h>\n\n#include <winpr/crt.h>\n#include <winpr/print.h>\n#include <winpr/bitstream.h>\n\n#include <freerdp/log.h>\n#include <freerdp/types.h>\n\n#include \"ncrush.h\"\n\n#define TAG FREERDP_TAG(\"codec\")\n\nstruct s_NCRUSH_CONTEXT\n{\n\tALIGN64 BOOL Compressor;\n\tALIGN64 BYTE* HistoryPtr;\n\tALIGN64 UINT32 HistoryOffset;\n\tALIGN64 UINT32 HistoryEndOffset;\n\tALIGN64 UINT32 HistoryBufferSize;\n\tALIGN64 BYTE HistoryBuffer[65536];\n\tALIGN64 UINT32 HistoryBufferFence;\n\tALIGN64 UINT32 OffsetCache[4];\n\tALIGN64 UINT16 HashTable[65536];\n\tALIGN64 UINT16 MatchTable[65536];\n\tALIGN64 BYTE HuffTableCopyOffset[1024];\n\tALIGN64 BYTE HuffTableLOM[4096];\n};\n\nstatic const UINT16 HuffTableLEC[8192] = {\n\t0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA068, 0x5111, 0x7007, 0x6113, 0x90C0,\n\t0x6108, 0x8018, 0x611B, 0xA0B3, 0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA091,\n\t0x5121, 0x7080, 0x6115, 0xA03A, 0x610A, 0x9012, 0x611D, 0xA0D7, 0x510B, 0x6122, 0x610E, 0x9035,\n\t0x6001, 0x7123, 0x6118, 0xA07A, 0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C4,\n\t0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A1, 0x5121, 0x7102, 0x6116, 0xA056,\n\t0x610C, 0x901D, 0x611E, 0xA0E8, 0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA071,\n\t0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BB, 0x510F, 0x7004, 0x6110, 0x9049,\n\t0x6002, 0x800D, 0x6119, 0xA099, 0x5121, 0x70FF, 0x6115, 0xA04C, 0x610A, 0x9017, 0x611D, 0xA0DF,\n\t0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA087, 0x5111, 0x700A, 0x6114, 0xA023,\n\t0x6109, 0x80FE, 0x611C, 0xA0CE, 0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0A9,\n\t0x5121, 0x7103, 0x6116, 0xA05F, 0x610C, 0x9022, 0x611E, 0xA0F5, 0x510B, 0x611F, 0x610D, 0x9029,\n\t0x6000, 0x7105, 0x6117, 0xA06C, 0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B7,\n\t0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA095, 0x5121, 0x7080, 0x6115, 0xA046,\n\t0x610A, 0x9015, 0x611D, 0xA0DB, 0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA07E,\n\t0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0C9, 0x510F, 0x7005, 0x6112, 0x907F,\n\t0x6107, 0x8010, 0x611A, 0xA0A5, 0x5121, 0x7102, 0x6116, 0xA05B, 0x610C, 0x901F, 0x611E, 0xA0EC,\n\t0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA075, 0x5111, 0x7008, 0x6113, 0x90F1,\n\t0x6108, 0x8040, 0x611B, 0xA0BF, 0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09D,\n\t0x5121, 0x70FF, 0x6115, 0xA052, 0x610A, 0x901B, 0x611D, 0xA0E4, 0x510B, 0x6122, 0x610E, 0x903F,\n\t0x6001, 0x7124, 0x6118, 0xA08C, 0x5111, 0x700A, 0x6114, 0xA02F, 0x6109, 0x8120, 0x611C, 0xA0D3,\n\t0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AE, 0x5121, 0x7103, 0x6116, 0xA064,\n\t0x610C, 0x9025, 0x611E, 0xA0FA, 0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06A,\n\t0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B5, 0x510F, 0x7003, 0x6110, 0x9043,\n\t0x6002, 0x800B, 0x6119, 0xA093, 0x5121, 0x7080, 0x6115, 0xA03D, 0x610A, 0x9014, 0x611D, 0xA0D9,\n\t0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07C, 0x5111, 0x7009, 0x6114, 0x90F8,\n\t0x6109, 0x8060, 0x611C, 0xA0C7, 0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A3,\n\t0x5121, 0x7102, 0x6116, 0xA058, 0x610C, 0x901E, 0x611E, 0xA0EA, 0x510B, 0x611F, 0x610D, 0x9030,\n\t0x6000, 0x7106, 0x6117, 0xA073, 0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BD,\n\t0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09B, 0x5121, 0x70FF, 0x6115, 0xA04E,\n\t0x610A, 0x901A, 0x611D, 0xA0E2, 0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08A,\n\t0x5111, 0x700A, 0x6114, 0xA02D, 0x6109, 0x80FE, 0x611C, 0xA0D1, 0x510F, 0x7006, 0x6112, 0x9084,\n\t0x6107, 0x8011, 0x611A, 0xA0AC, 0x5121, 0x7103, 0x6116, 0xA062, 0x610C, 0x9024, 0x611E, 0xA0F7,\n\t0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06E, 0x5111, 0x7007, 0x6113, 0x90D0,\n\t0x6108, 0x8019, 0x611B, 0xA0B9, 0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA097,\n\t0x5121, 0x7080, 0x6115, 0xA04A, 0x610A, 0x9016, 0x611D, 0xA0DD, 0x510B, 0x6122, 0x610E, 0x9039,\n\t0x6001, 0x7123, 0x6118, 0xA085, 0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CB,\n\t0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A7, 0x5121, 0x7102, 0x6116, 0xA05D,\n\t0x610C, 0x9021, 0x611E, 0xA0EF, 0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA077,\n\t0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C2, 0x510F, 0x7004, 0x6110, 0x9059,\n\t0x6002, 0x800E, 0x6119, 0xA09F, 0x5121, 0x70FF, 0x6115, 0xA054, 0x610A, 0x901C, 0x611D, 0xA0E6,\n\t0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08E, 0x5111, 0x700A, 0x6114, 0xA034,\n\t0x6109, 0x8120, 0x611C, 0xA0D5, 0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B0,\n\t0x5121, 0x7103, 0x6116, 0xA066, 0x610C, 0x9026, 0x611E, 0xA104, 0x510B, 0x611F, 0x610D, 0x9027,\n\t0x6000, 0x7105, 0x6117, 0xA069, 0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B4,\n\t0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA092, 0x5121, 0x7080, 0x6115, 0xA03B,\n\t0x610A, 0x9012, 0x611D, 0xA0D8, 0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07B,\n\t0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C5, 0x510F, 0x7005, 0x6112, 0x9070,\n\t0x6107, 0x800F, 0x611A, 0xA0A2, 0x5121, 0x7102, 0x6116, 0xA057, 0x610C, 0x901D, 0x611E, 0xA0E9,\n\t0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA072, 0x5111, 0x7008, 0x6113, 0x90E0,\n\t0x6108, 0x8020, 0x611B, 0xA0BC, 0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA09A,\n\t0x5121, 0x70FF, 0x6115, 0xA04D, 0x610A, 0x9017, 0x611D, 0xA0E1, 0x510B, 0x6122, 0x610E, 0x903C,\n\t0x6001, 0x7124, 0x6118, 0xA089, 0x5111, 0x700A, 0x6114, 0xA02B, 0x6109, 0x80FE, 0x611C, 0xA0CF,\n\t0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0AA, 0x5121, 0x7103, 0x6116, 0xA061,\n\t0x610C, 0x9022, 0x611E, 0xA0F6, 0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06D,\n\t0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B8, 0x510F, 0x7003, 0x6110, 0x9044,\n\t0x6002, 0x800C, 0x6119, 0xA096, 0x5121, 0x7080, 0x6115, 0xA047, 0x610A, 0x9015, 0x611D, 0xA0DC,\n\t0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA083, 0x5111, 0x7009, 0x6114, 0x90FC,\n\t0x6109, 0x80F0, 0x611C, 0xA0CA, 0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A6,\n\t0x5121, 0x7102, 0x6116, 0xA05C, 0x610C, 0x901F, 0x611E, 0xA0ED, 0x510B, 0x611F, 0x610D, 0x9031,\n\t0x6000, 0x7106, 0x6117, 0xA076, 0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0C1,\n\t0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09E, 0x5121, 0x70FF, 0x6115, 0xA053,\n\t0x610A, 0x901B, 0x611D, 0xA0E5, 0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08D,\n\t0x5111, 0x700A, 0x6114, 0xA032, 0x6109, 0x8120, 0x611C, 0xA0D4, 0x510F, 0x7006, 0x6112, 0x9088,\n\t0x6107, 0x8013, 0x611A, 0xA0AF, 0x5121, 0x7103, 0x6116, 0xA065, 0x610C, 0x9025, 0x611E, 0xA0FB,\n\t0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06B, 0x5111, 0x7007, 0x6113, 0x90C6,\n\t0x6108, 0x8018, 0x611B, 0xA0B6, 0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA094,\n\t0x5121, 0x7080, 0x6115, 0xA045, 0x610A, 0x9014, 0x611D, 0xA0DA, 0x510B, 0x6122, 0x610E, 0x9037,\n\t0x6001, 0x7123, 0x6118, 0xA07D, 0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C8,\n\t0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A4, 0x5121, 0x7102, 0x6116, 0xA05A,\n\t0x610C, 0x901E, 0x611E, 0xA0EB, 0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA074,\n\t0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BE, 0x510F, 0x7004, 0x6110, 0x9050,\n\t0x6002, 0x800D, 0x6119, 0xA09C, 0x5121, 0x70FF, 0x6115, 0xA04F, 0x610A, 0x901A, 0x611D, 0xA0E3,\n\t0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08B, 0x5111, 0x700A, 0x6114, 0xA02E,\n\t0x6109, 0x80FE, 0x611C, 0xA0D2, 0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AD,\n\t0x5121, 0x7103, 0x6116, 0xA063, 0x610C, 0x9024, 0x611E, 0xA0F9, 0x510B, 0x611F, 0x610D, 0x902A,\n\t0x6000, 0x7105, 0x6117, 0xA06F, 0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0BA,\n\t0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA098, 0x5121, 0x7080, 0x6115, 0xA04B,\n\t0x610A, 0x9016, 0x611D, 0xA0DE, 0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA086,\n\t0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CD, 0x510F, 0x7005, 0x6112, 0x9081,\n\t0x6107, 0x8010, 0x611A, 0xA0A8, 0x5121, 0x7102, 0x6116, 0xA05E, 0x610C, 0x9021, 0x611E, 0xA0F3,\n\t0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA079, 0x5111, 0x7008, 0x6113, 0x90F2,\n\t0x6108, 0x8040, 0x611B, 0xA0C3, 0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA0A0,\n\t0x5121, 0x70FF, 0x6115, 0xA055, 0x610A, 0x901C, 0x611D, 0xA0E7, 0x510B, 0x6122, 0x610E, 0x9041,\n\t0x6001, 0x7124, 0x6118, 0xA08F, 0x5111, 0x700A, 0x6114, 0xA036, 0x6109, 0x8120, 0x611C, 0xA0D6,\n\t0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B1, 0x5121, 0x7103, 0x6116, 0xA067,\n\t0x610C, 0x9026, 0x611E, 0xB0B2, 0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA068,\n\t0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B3, 0x510F, 0x7003, 0x6110, 0x9042,\n\t0x6002, 0x800B, 0x6119, 0xA091, 0x5121, 0x7080, 0x6115, 0xA03A, 0x610A, 0x9012, 0x611D, 0xA0D7,\n\t0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07A, 0x5111, 0x7009, 0x6114, 0x90F4,\n\t0x6109, 0x8060, 0x611C, 0xA0C4, 0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A1,\n\t0x5121, 0x7102, 0x6116, 0xA056, 0x610C, 0x901D, 0x611E, 0xA0E8, 0x510B, 0x611F, 0x610D, 0x902C,\n\t0x6000, 0x7106, 0x6117, 0xA071, 0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BB,\n\t0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA099, 0x5121, 0x70FF, 0x6115, 0xA04C,\n\t0x610A, 0x9017, 0x611D, 0xA0DF, 0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA087,\n\t0x5111, 0x700A, 0x6114, 0xA023, 0x6109, 0x80FE, 0x611C, 0xA0CE, 0x510F, 0x7006, 0x6112, 0x9082,\n\t0x6107, 0x8011, 0x611A, 0xA0A9, 0x5121, 0x7103, 0x6116, 0xA05F, 0x610C, 0x9022, 0x611E, 0xA0F5,\n\t0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06C, 0x5111, 0x7007, 0x6113, 0x90CC,\n\t0x6108, 0x8019, 0x611B, 0xA0B7, 0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA095,\n\t0x5121, 0x7080, 0x6115, 0xA046, 0x610A, 0x9015, 0x611D, 0xA0DB, 0x510B, 0x6122, 0x610E, 0x9038,\n\t0x6001, 0x7123, 0x6118, 0xA07E, 0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0C9,\n\t0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A5, 0x5121, 0x7102, 0x6116, 0xA05B,\n\t0x610C, 0x901F, 0x611E, 0xA0EC, 0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA075,\n\t0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0BF, 0x510F, 0x7004, 0x6110, 0x9051,\n\t0x6002, 0x800E, 0x6119, 0xA09D, 0x5121, 0x70FF, 0x6115, 0xA052, 0x610A, 0x901B, 0x611D, 0xA0E4,\n\t0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08C, 0x5111, 0x700A, 0x6114, 0xA02F,\n\t0x6109, 0x8120, 0x611C, 0xA0D3, 0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AE,\n\t0x5121, 0x7103, 0x6116, 0xA064, 0x610C, 0x9025, 0x611E, 0xA0FA, 0x510B, 0x611F, 0x610D, 0x9028,\n\t0x6000, 0x7105, 0x6117, 0xA06A, 0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B5,\n\t0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA093, 0x5121, 0x7080, 0x6115, 0xA03D,\n\t0x610A, 0x9014, 0x611D, 0xA0D9, 0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07C,\n\t0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C7, 0x510F, 0x7005, 0x6112, 0x9078,\n\t0x6107, 0x800F, 0x611A, 0xA0A3, 0x5121, 0x7102, 0x6116, 0xA058, 0x610C, 0x901E, 0x611E, 0xA0EA,\n\t0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA073, 0x5111, 0x7008, 0x6113, 0x90EE,\n\t0x6108, 0x8020, 0x611B, 0xA0BD, 0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09B,\n\t0x5121, 0x70FF, 0x6115, 0xA04E, 0x610A, 0x901A, 0x611D, 0xA0E2, 0x510B, 0x6122, 0x610E, 0x903E,\n\t0x6001, 0x7124, 0x6118, 0xA08A, 0x5111, 0x700A, 0x6114, 0xA02D, 0x6109, 0x80FE, 0x611C, 0xA0D1,\n\t0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AC, 0x5121, 0x7103, 0x6116, 0xA062,\n\t0x610C, 0x9024, 0x611E, 0xA0F7, 0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06E,\n\t0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0B9, 0x510F, 0x7003, 0x6110, 0x9048,\n\t0x6002, 0x800C, 0x6119, 0xA097, 0x5121, 0x7080, 0x6115, 0xA04A, 0x610A, 0x9016, 0x611D, 0xA0DD,\n\t0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA085, 0x5111, 0x7009, 0x6114, 0x90FD,\n\t0x6109, 0x80F0, 0x611C, 0xA0CB, 0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A7,\n\t0x5121, 0x7102, 0x6116, 0xA05D, 0x610C, 0x9021, 0x611E, 0xA0EF, 0x510B, 0x611F, 0x610D, 0x9033,\n\t0x6000, 0x7106, 0x6117, 0xA077, 0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C2,\n\t0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA09F, 0x5121, 0x70FF, 0x6115, 0xA054,\n\t0x610A, 0x901C, 0x611D, 0xA0E6, 0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08E,\n\t0x5111, 0x700A, 0x6114, 0xA034, 0x6109, 0x8120, 0x611C, 0xA0D5, 0x510F, 0x7006, 0x6112, 0x9090,\n\t0x6107, 0x8013, 0x611A, 0xA0B0, 0x5121, 0x7103, 0x6116, 0xA066, 0x610C, 0x9026, 0x611E, 0xA104,\n\t0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA069, 0x5111, 0x7007, 0x6113, 0x90C0,\n\t0x6108, 0x8018, 0x611B, 0xA0B4, 0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA092,\n\t0x5121, 0x7080, 0x6115, 0xA03B, 0x610A, 0x9012, 0x611D, 0xA0D8, 0x510B, 0x6122, 0x610E, 0x9035,\n\t0x6001, 0x7123, 0x6118, 0xA07B, 0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C5,\n\t0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A2, 0x5121, 0x7102, 0x6116, 0xA057,\n\t0x610C, 0x901D, 0x611E, 0xA0E9, 0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA072,\n\t0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BC, 0x510F, 0x7004, 0x6110, 0x9049,\n\t0x6002, 0x800D, 0x6119, 0xA09A, 0x5121, 0x70FF, 0x6115, 0xA04D, 0x610A, 0x9017, 0x611D, 0xA0E1,\n\t0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA089, 0x5111, 0x700A, 0x6114, 0xA02B,\n\t0x6109, 0x80FE, 0x611C, 0xA0CF, 0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0AA,\n\t0x5121, 0x7103, 0x6116, 0xA061, 0x610C, 0x9022, 0x611E, 0xA0F6, 0x510B, 0x611F, 0x610D, 0x9029,\n\t0x6000, 0x7105, 0x6117, 0xA06D, 0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B8,\n\t0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA096, 0x5121, 0x7080, 0x6115, 0xA047,\n\t0x610A, 0x9015, 0x611D, 0xA0DC, 0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA083,\n\t0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0CA, 0x510F, 0x7005, 0x6112, 0x907F,\n\t0x6107, 0x8010, 0x611A, 0xA0A6, 0x5121, 0x7102, 0x6116, 0xA05C, 0x610C, 0x901F, 0x611E, 0xA0ED,\n\t0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA076, 0x5111, 0x7008, 0x6113, 0x90F1,\n\t0x6108, 0x8040, 0x611B, 0xA0C1, 0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09E,\n\t0x5121, 0x70FF, 0x6115, 0xA053, 0x610A, 0x901B, 0x611D, 0xA0E5, 0x510B, 0x6122, 0x610E, 0x903F,\n\t0x6001, 0x7124, 0x6118, 0xA08D, 0x5111, 0x700A, 0x6114, 0xA032, 0x6109, 0x8120, 0x611C, 0xA0D4,\n\t0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AF, 0x5121, 0x7103, 0x6116, 0xA065,\n\t0x610C, 0x9025, 0x611E, 0xA0FB, 0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06B,\n\t0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B6, 0x510F, 0x7003, 0x6110, 0x9043,\n\t0x6002, 0x800B, 0x6119, 0xA094, 0x5121, 0x7080, 0x6115, 0xA045, 0x610A, 0x9014, 0x611D, 0xA0DA,\n\t0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07D, 0x5111, 0x7009, 0x6114, 0x90F8,\n\t0x6109, 0x8060, 0x611C, 0xA0C8, 0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A4,\n\t0x5121, 0x7102, 0x6116, 0xA05A, 0x610C, 0x901E, 0x611E, 0xA0EB, 0x510B, 0x611F, 0x610D, 0x9030,\n\t0x6000, 0x7106, 0x6117, 0xA074, 0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BE,\n\t0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09C, 0x5121, 0x70FF, 0x6115, 0xA04F,\n\t0x610A, 0x901A, 0x611D, 0xA0E3, 0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08B,\n\t0x5111, 0x700A, 0x6114, 0xA02E, 0x6109, 0x80FE, 0x611C, 0xA0D2, 0x510F, 0x7006, 0x6112, 0x9084,\n\t0x6107, 0x8011, 0x611A, 0xA0AD, 0x5121, 0x7103, 0x6116, 0xA063, 0x610C, 0x9024, 0x611E, 0xA0F9,\n\t0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06F, 0x5111, 0x7007, 0x6113, 0x90D0,\n\t0x6108, 0x8019, 0x611B, 0xA0BA, 0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA098,\n\t0x5121, 0x7080, 0x6115, 0xA04B, 0x610A, 0x9016, 0x611D, 0xA0DE, 0x510B, 0x6122, 0x610E, 0x9039,\n\t0x6001, 0x7123, 0x6118, 0xA086, 0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CD,\n\t0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A8, 0x5121, 0x7102, 0x6116, 0xA05E,\n\t0x610C, 0x9021, 0x611E, 0xA0F3, 0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA079,\n\t0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C3, 0x510F, 0x7004, 0x6110, 0x9059,\n\t0x6002, 0x800E, 0x6119, 0xA0A0, 0x5121, 0x70FF, 0x6115, 0xA055, 0x610A, 0x901C, 0x611D, 0xA0E7,\n\t0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08F, 0x5111, 0x700A, 0x6114, 0xA036,\n\t0x6109, 0x8120, 0x611C, 0xA0D6, 0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B1,\n\t0x5121, 0x7103, 0x6116, 0xA067, 0x610C, 0x9026, 0x611E, 0xD0AB, 0x510B, 0x611F, 0x610D, 0x9027,\n\t0x6000, 0x7105, 0x6117, 0xA068, 0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B3,\n\t0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA091, 0x5121, 0x7080, 0x6115, 0xA03A,\n\t0x610A, 0x9012, 0x611D, 0xA0D7, 0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07A,\n\t0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C4, 0x510F, 0x7005, 0x6112, 0x9070,\n\t0x6107, 0x800F, 0x611A, 0xA0A1, 0x5121, 0x7102, 0x6116, 0xA056, 0x610C, 0x901D, 0x611E, 0xA0E8,\n\t0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA071, 0x5111, 0x7008, 0x6113, 0x90E0,\n\t0x6108, 0x8020, 0x611B, 0xA0BB, 0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA099,\n\t0x5121, 0x70FF, 0x6115, 0xA04C, 0x610A, 0x9017, 0x611D, 0xA0DF, 0x510B, 0x6122, 0x610E, 0x903C,\n\t0x6001, 0x7124, 0x6118, 0xA087, 0x5111, 0x700A, 0x6114, 0xA023, 0x6109, 0x80FE, 0x611C, 0xA0CE,\n\t0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0A9, 0x5121, 0x7103, 0x6116, 0xA05F,\n\t0x610C, 0x9022, 0x611E, 0xA0F5, 0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06C,\n\t0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B7, 0x510F, 0x7003, 0x6110, 0x9044,\n\t0x6002, 0x800C, 0x6119, 0xA095, 0x5121, 0x7080, 0x6115, 0xA046, 0x610A, 0x9015, 0x611D, 0xA0DB,\n\t0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA07E, 0x5111, 0x7009, 0x6114, 0x90FC,\n\t0x6109, 0x80F0, 0x611C, 0xA0C9, 0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A5,\n\t0x5121, 0x7102, 0x6116, 0xA05B, 0x610C, 0x901F, 0x611E, 0xA0EC, 0x510B, 0x611F, 0x610D, 0x9031,\n\t0x6000, 0x7106, 0x6117, 0xA075, 0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0BF,\n\t0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09D, 0x5121, 0x70FF, 0x6115, 0xA052,\n\t0x610A, 0x901B, 0x611D, 0xA0E4, 0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08C,\n\t0x5111, 0x700A, 0x6114, 0xA02F, 0x6109, 0x8120, 0x611C, 0xA0D3, 0x510F, 0x7006, 0x6112, 0x9088,\n\t0x6107, 0x8013, 0x611A, 0xA0AE, 0x5121, 0x7103, 0x6116, 0xA064, 0x610C, 0x9025, 0x611E, 0xA0FA,\n\t0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06A, 0x5111, 0x7007, 0x6113, 0x90C6,\n\t0x6108, 0x8018, 0x611B, 0xA0B5, 0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA093,\n\t0x5121, 0x7080, 0x6115, 0xA03D, 0x610A, 0x9014, 0x611D, 0xA0D9, 0x510B, 0x6122, 0x610E, 0x9037,\n\t0x6001, 0x7123, 0x6118, 0xA07C, 0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C7,\n\t0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A3, 0x5121, 0x7102, 0x6116, 0xA058,\n\t0x610C, 0x901E, 0x611E, 0xA0EA, 0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA073,\n\t0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BD, 0x510F, 0x7004, 0x6110, 0x9050,\n\t0x6002, 0x800D, 0x6119, 0xA09B, 0x5121, 0x70FF, 0x6115, 0xA04E, 0x610A, 0x901A, 0x611D, 0xA0E2,\n\t0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08A, 0x5111, 0x700A, 0x6114, 0xA02D,\n\t0x6109, 0x80FE, 0x611C, 0xA0D1, 0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AC,\n\t0x5121, 0x7103, 0x6116, 0xA062, 0x610C, 0x9024, 0x611E, 0xA0F7, 0x510B, 0x611F, 0x610D, 0x902A,\n\t0x6000, 0x7105, 0x6117, 0xA06E, 0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0B9,\n\t0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA097, 0x5121, 0x7080, 0x6115, 0xA04A,\n\t0x610A, 0x9016, 0x611D, 0xA0DD, 0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA085,\n\t0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CB, 0x510F, 0x7005, 0x6112, 0x9081,\n\t0x6107, 0x8010, 0x611A, 0xA0A7, 0x5121, 0x7102, 0x6116, 0xA05D, 0x610C, 0x9021, 0x611E, 0xA0EF,\n\t0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA077, 0x5111, 0x7008, 0x6113, 0x90F2,\n\t0x6108, 0x8040, 0x611B, 0xA0C2, 0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA09F,\n\t0x5121, 0x70FF, 0x6115, 0xA054, 0x610A, 0x901C, 0x611D, 0xA0E6, 0x510B, 0x6122, 0x610E, 0x9041,\n\t0x6001, 0x7124, 0x6118, 0xA08E, 0x5111, 0x700A, 0x6114, 0xA034, 0x6109, 0x8120, 0x611C, 0xA0D5,\n\t0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B0, 0x5121, 0x7103, 0x6116, 0xA066,\n\t0x610C, 0x9026, 0x611E, 0xA104, 0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA069,\n\t0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B4, 0x510F, 0x7003, 0x6110, 0x9042,\n\t0x6002, 0x800B, 0x6119, 0xA092, 0x5121, 0x7080, 0x6115, 0xA03B, 0x610A, 0x9012, 0x611D, 0xA0D8,\n\t0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07B, 0x5111, 0x7009, 0x6114, 0x90F4,\n\t0x6109, 0x8060, 0x611C, 0xA0C5, 0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A2,\n\t0x5121, 0x7102, 0x6116, 0xA057, 0x610C, 0x901D, 0x611E, 0xA0E9, 0x510B, 0x611F, 0x610D, 0x902C,\n\t0x6000, 0x7106, 0x6117, 0xA072, 0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BC,\n\t0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA09A, 0x5121, 0x70FF, 0x6115, 0xA04D,\n\t0x610A, 0x9017, 0x611D, 0xA0E1, 0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA089,\n\t0x5111, 0x700A, 0x6114, 0xA02B, 0x6109, 0x80FE, 0x611C, 0xA0CF, 0x510F, 0x7006, 0x6112, 0x9082,\n\t0x6107, 0x8011, 0x611A, 0xA0AA, 0x5121, 0x7103, 0x6116, 0xA061, 0x610C, 0x9022, 0x611E, 0xA0F6,\n\t0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06D, 0x5111, 0x7007, 0x6113, 0x90CC,\n\t0x6108, 0x8019, 0x611B, 0xA0B8, 0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA096,\n\t0x5121, 0x7080, 0x6115, 0xA047, 0x610A, 0x9015, 0x611D, 0xA0DC, 0x510B, 0x6122, 0x610E, 0x9038,\n\t0x6001, 0x7123, 0x6118, 0xA083, 0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0CA,\n\t0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A6, 0x5121, 0x7102, 0x6116, 0xA05C,\n\t0x610C, 0x901F, 0x611E, 0xA0ED, 0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA076,\n\t0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0C1, 0x510F, 0x7004, 0x6110, 0x9051,\n\t0x6002, 0x800E, 0x6119, 0xA09E, 0x5121, 0x70FF, 0x6115, 0xA053, 0x610A, 0x901B, 0x611D, 0xA0E5,\n\t0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08D, 0x5111, 0x700A, 0x6114, 0xA032,\n\t0x6109, 0x8120, 0x611C, 0xA0D4, 0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AF,\n\t0x5121, 0x7103, 0x6116, 0xA065, 0x610C, 0x9025, 0x611E, 0xA0FB, 0x510B, 0x611F, 0x610D, 0x9028,\n\t0x6000, 0x7105, 0x6117, 0xA06B, 0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B6,\n\t0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA094, 0x5121, 0x7080, 0x6115, 0xA045,\n\t0x610A, 0x9014, 0x611D, 0xA0DA, 0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07D,\n\t0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C8, 0x510F, 0x7005, 0x6112, 0x9078,\n\t0x6107, 0x800F, 0x611A, 0xA0A4, 0x5121, 0x7102, 0x6116, 0xA05A, 0x610C, 0x901E, 0x611E, 0xA0EB,\n\t0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA074, 0x5111, 0x7008, 0x6113, 0x90EE,\n\t0x6108, 0x8020, 0x611B, 0xA0BE, 0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09C,\n\t0x5121, 0x70FF, 0x6115, 0xA04F, 0x610A, 0x901A, 0x611D, 0xA0E3, 0x510B, 0x6122, 0x610E, 0x903E,\n\t0x6001, 0x7124, 0x6118, 0xA08B, 0x5111, 0x700A, 0x6114, 0xA02E, 0x6109, 0x80FE, 0x611C, 0xA0D2,\n\t0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AD, 0x5121, 0x7103, 0x6116, 0xA063,\n\t0x610C, 0x9024, 0x611E, 0xA0F9, 0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06F,\n\t0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0BA, 0x510F, 0x7003, 0x6110, 0x9048,\n\t0x6002, 0x800C, 0x6119, 0xA098, 0x5121, 0x7080, 0x6115, 0xA04B, 0x610A, 0x9016, 0x611D, 0xA0DE,\n\t0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA086, 0x5111, 0x7009, 0x6114, 0x90FD,\n\t0x6109, 0x80F0, 0x611C, 0xA0CD, 0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A8,\n\t0x5121, 0x7102, 0x6116, 0xA05E, 0x610C, 0x9021, 0x611E, 0xA0F3, 0x510B, 0x611F, 0x610D, 0x9033,\n\t0x6000, 0x7106, 0x6117, 0xA079, 0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C3,\n\t0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA0A0, 0x5121, 0x70FF, 0x6115, 0xA055,\n\t0x610A, 0x901C, 0x611D, 0xA0E7, 0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08F,\n\t0x5111, 0x700A, 0x6114, 0xA036, 0x6109, 0x8120, 0x611C, 0xA0D6, 0x510F, 0x7006, 0x6112, 0x9090,\n\t0x6107, 0x8013, 0x611A, 0xA0B1, 0x5121, 0x7103, 0x6116, 0xA067, 0x610C, 0x9026, 0x611E, 0xB0B2,\n\t0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA068, 0x5111, 0x7007, 0x6113, 0x90C0,\n\t0x6108, 0x8018, 0x611B, 0xA0B3, 0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA091,\n\t0x5121, 0x7080, 0x6115, 0xA03A, 0x610A, 0x9012, 0x611D, 0xA0D7, 0x510B, 0x6122, 0x610E, 0x9035,\n\t0x6001, 0x7123, 0x6118, 0xA07A, 0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C4,\n\t0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A1, 0x5121, 0x7102, 0x6116, 0xA056,\n\t0x610C, 0x901D, 0x611E, 0xA0E8, 0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA071,\n\t0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BB, 0x510F, 0x7004, 0x6110, 0x9049,\n\t0x6002, 0x800D, 0x6119, 0xA099, 0x5121, 0x70FF, 0x6115, 0xA04C, 0x610A, 0x9017, 0x611D, 0xA0DF,\n\t0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA087, 0x5111, 0x700A, 0x6114, 0xA023,\n\t0x6109, 0x80FE, 0x611C, 0xA0CE, 0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0A9,\n\t0x5121, 0x7103, 0x6116, 0xA05F, 0x610C, 0x9022, 0x611E, 0xA0F5, 0x510B, 0x611F, 0x610D, 0x9029,\n\t0x6000, 0x7105, 0x6117, 0xA06C, 0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B7,\n\t0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA095, 0x5121, 0x7080, 0x6115, 0xA046,\n\t0x610A, 0x9015, 0x611D, 0xA0DB, 0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA07E,\n\t0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0C9, 0x510F, 0x7005, 0x6112, 0x907F,\n\t0x6107, 0x8010, 0x611A, 0xA0A5, 0x5121, 0x7102, 0x6116, 0xA05B, 0x610C, 0x901F, 0x611E, 0xA0EC,\n\t0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA075, 0x5111, 0x7008, 0x6113, 0x90F1,\n\t0x6108, 0x8040, 0x611B, 0xA0BF, 0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09D,\n\t0x5121, 0x70FF, 0x6115, 0xA052, 0x610A, 0x901B, 0x611D, 0xA0E4, 0x510B, 0x6122, 0x610E, 0x903F,\n\t0x6001, 0x7124, 0x6118, 0xA08C, 0x5111, 0x700A, 0x6114, 0xA02F, 0x6109, 0x8120, 0x611C, 0xA0D3,\n\t0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AE, 0x5121, 0x7103, 0x6116, 0xA064,\n\t0x610C, 0x9025, 0x611E, 0xA0FA, 0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06A,\n\t0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B5, 0x510F, 0x7003, 0x6110, 0x9043,\n\t0x6002, 0x800B, 0x6119, 0xA093, 0x5121, 0x7080, 0x6115, 0xA03D, 0x610A, 0x9014, 0x611D, 0xA0D9,\n\t0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07C, 0x5111, 0x7009, 0x6114, 0x90F8,\n\t0x6109, 0x8060, 0x611C, 0xA0C7, 0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A3,\n\t0x5121, 0x7102, 0x6116, 0xA058, 0x610C, 0x901E, 0x611E, 0xA0EA, 0x510B, 0x611F, 0x610D, 0x9030,\n\t0x6000, 0x7106, 0x6117, 0xA073, 0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BD,\n\t0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09B, 0x5121, 0x70FF, 0x6115, 0xA04E,\n\t0x610A, 0x901A, 0x611D, 0xA0E2, 0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08A,\n\t0x5111, 0x700A, 0x6114, 0xA02D, 0x6109, 0x80FE, 0x611C, 0xA0D1, 0x510F, 0x7006, 0x6112, 0x9084,\n\t0x6107, 0x8011, 0x611A, 0xA0AC, 0x5121, 0x7103, 0x6116, 0xA062, 0x610C, 0x9024, 0x611E, 0xA0F7,\n\t0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06E, 0x5111, 0x7007, 0x6113, 0x90D0,\n\t0x6108, 0x8019, 0x611B, 0xA0B9, 0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA097,\n\t0x5121, 0x7080, 0x6115, 0xA04A, 0x610A, 0x9016, 0x611D, 0xA0DD, 0x510B, 0x6122, 0x610E, 0x9039,\n\t0x6001, 0x7123, 0x6118, 0xA085, 0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CB,\n\t0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A7, 0x5121, 0x7102, 0x6116, 0xA05D,\n\t0x610C, 0x9021, 0x611E, 0xA0EF, 0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA077,\n\t0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C2, 0x510F, 0x7004, 0x6110, 0x9059,\n\t0x6002, 0x800E, 0x6119, 0xA09F, 0x5121, 0x70FF, 0x6115, 0xA054, 0x610A, 0x901C, 0x611D, 0xA0E6,\n\t0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08E, 0x5111, 0x700A, 0x6114, 0xA034,\n\t0x6109, 0x8120, 0x611C, 0xA0D5, 0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B0,\n\t0x5121, 0x7103, 0x6116, 0xA066, 0x610C, 0x9026, 0x611E, 0xA104, 0x510B, 0x611F, 0x610D, 0x9027,\n\t0x6000, 0x7105, 0x6117, 0xA069, 0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B4,\n\t0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA092, 0x5121, 0x7080, 0x6115, 0xA03B,\n\t0x610A, 0x9012, 0x611D, 0xA0D8, 0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07B,\n\t0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C5, 0x510F, 0x7005, 0x6112, 0x9070,\n\t0x6107, 0x800F, 0x611A, 0xA0A2, 0x5121, 0x7102, 0x6116, 0xA057, 0x610C, 0x901D, 0x611E, 0xA0E9,\n\t0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA072, 0x5111, 0x7008, 0x6113, 0x90E0,\n\t0x6108, 0x8020, 0x611B, 0xA0BC, 0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA09A,\n\t0x5121, 0x70FF, 0x6115, 0xA04D, 0x610A, 0x9017, 0x611D, 0xA0E1, 0x510B, 0x6122, 0x610E, 0x903C,\n\t0x6001, 0x7124, 0x6118, 0xA089, 0x5111, 0x700A, 0x6114, 0xA02B, 0x6109, 0x80FE, 0x611C, 0xA0CF,\n\t0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0AA, 0x5121, 0x7103, 0x6116, 0xA061,\n\t0x610C, 0x9022, 0x611E, 0xA0F6, 0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06D,\n\t0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B8, 0x510F, 0x7003, 0x6110, 0x9044,\n\t0x6002, 0x800C, 0x6119, 0xA096, 0x5121, 0x7080, 0x6115, 0xA047, 0x610A, 0x9015, 0x611D, 0xA0DC,\n\t0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA083, 0x5111, 0x7009, 0x6114, 0x90FC,\n\t0x6109, 0x80F0, 0x611C, 0xA0CA, 0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A6,\n\t0x5121, 0x7102, 0x6116, 0xA05C, 0x610C, 0x901F, 0x611E, 0xA0ED, 0x510B, 0x611F, 0x610D, 0x9031,\n\t0x6000, 0x7106, 0x6117, 0xA076, 0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0C1,\n\t0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09E, 0x5121, 0x70FF, 0x6115, 0xA053,\n\t0x610A, 0x901B, 0x611D, 0xA0E5, 0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08D,\n\t0x5111, 0x700A, 0x6114, 0xA032, 0x6109, 0x8120, 0x611C, 0xA0D4, 0x510F, 0x7006, 0x6112, 0x9088,\n\t0x6107, 0x8013, 0x611A, 0xA0AF, 0x5121, 0x7103, 0x6116, 0xA065, 0x610C, 0x9025, 0x611E, 0xA0FB,\n\t0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06B, 0x5111, 0x7007, 0x6113, 0x90C6,\n\t0x6108, 0x8018, 0x611B, 0xA0B6, 0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA094,\n\t0x5121, 0x7080, 0x6115, 0xA045, 0x610A, 0x9014, 0x611D, 0xA0DA, 0x510B, 0x6122, 0x610E, 0x9037,\n\t0x6001, 0x7123, 0x6118, 0xA07D, 0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C8,\n\t0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A4, 0x5121, 0x7102, 0x6116, 0xA05A,\n\t0x610C, 0x901E, 0x611E, 0xA0EB, 0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA074,\n\t0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BE, 0x510F, 0x7004, 0x6110, 0x9050,\n\t0x6002, 0x800D, 0x6119, 0xA09C, 0x5121, 0x70FF, 0x6115, 0xA04F, 0x610A, 0x901A, 0x611D, 0xA0E3,\n\t0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08B, 0x5111, 0x700A, 0x6114, 0xA02E,\n\t0x6109, 0x80FE, 0x611C, 0xA0D2, 0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AD,\n\t0x5121, 0x7103, 0x6116, 0xA063, 0x610C, 0x9024, 0x611E, 0xA0F9, 0x510B, 0x611F, 0x610D, 0x902A,\n\t0x6000, 0x7105, 0x6117, 0xA06F, 0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0BA,\n\t0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA098, 0x5121, 0x7080, 0x6115, 0xA04B,\n\t0x610A, 0x9016, 0x611D, 0xA0DE, 0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA086,\n\t0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CD, 0x510F, 0x7005, 0x6112, 0x9081,\n\t0x6107, 0x8010, 0x611A, 0xA0A8, 0x5121, 0x7102, 0x6116, 0xA05E, 0x610C, 0x9021, 0x611E, 0xA0F3,\n\t0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA079, 0x5111, 0x7008, 0x6113, 0x90F2,\n\t0x6108, 0x8040, 0x611B, 0xA0C3, 0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA0A0,\n\t0x5121, 0x70FF, 0x6115, 0xA055, 0x610A, 0x901C, 0x611D, 0xA0E7, 0x510B, 0x6122, 0x610E, 0x9041,\n\t0x6001, 0x7124, 0x6118, 0xA08F, 0x5111, 0x700A, 0x6114, 0xA036, 0x6109, 0x8120, 0x611C, 0xA0D6,\n\t0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B1, 0x5121, 0x7103, 0x6116, 0xA067,\n\t0x610C, 0x9026, 0x611E, 0xD101, 0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA068,\n\t0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B3, 0x510F, 0x7003, 0x6110, 0x9042,\n\t0x6002, 0x800B, 0x6119, 0xA091, 0x5121, 0x7080, 0x6115, 0xA03A, 0x610A, 0x9012, 0x611D, 0xA0D7,\n\t0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07A, 0x5111, 0x7009, 0x6114, 0x90F4,\n\t0x6109, 0x8060, 0x611C, 0xA0C4, 0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A1,\n\t0x5121, 0x7102, 0x6116, 0xA056, 0x610C, 0x901D, 0x611E, 0xA0E8, 0x510B, 0x611F, 0x610D, 0x902C,\n\t0x6000, 0x7106, 0x6117, 0xA071, 0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BB,\n\t0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA099, 0x5121, 0x70FF, 0x6115, 0xA04C,\n\t0x610A, 0x9017, 0x611D, 0xA0DF, 0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA087,\n\t0x5111, 0x700A, 0x6114, 0xA023, 0x6109, 0x80FE, 0x611C, 0xA0CE, 0x510F, 0x7006, 0x6112, 0x9082,\n\t0x6107, 0x8011, 0x611A, 0xA0A9, 0x5121, 0x7103, 0x6116, 0xA05F, 0x610C, 0x9022, 0x611E, 0xA0F5,\n\t0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06C, 0x5111, 0x7007, 0x6113, 0x90CC,\n\t0x6108, 0x8019, 0x611B, 0xA0B7, 0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA095,\n\t0x5121, 0x7080, 0x6115, 0xA046, 0x610A, 0x9015, 0x611D, 0xA0DB, 0x510B, 0x6122, 0x610E, 0x9038,\n\t0x6001, 0x7123, 0x6118, 0xA07E, 0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0C9,\n\t0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A5, 0x5121, 0x7102, 0x6116, 0xA05B,\n\t0x610C, 0x901F, 0x611E, 0xA0EC, 0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA075,\n\t0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0BF, 0x510F, 0x7004, 0x6110, 0x9051,\n\t0x6002, 0x800E, 0x6119, 0xA09D, 0x5121, 0x70FF, 0x6115, 0xA052, 0x610A, 0x901B, 0x611D, 0xA0E4,\n\t0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08C, 0x5111, 0x700A, 0x6114, 0xA02F,\n\t0x6109, 0x8120, 0x611C, 0xA0D3, 0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AE,\n\t0x5121, 0x7103, 0x6116, 0xA064, 0x610C, 0x9025, 0x611E, 0xA0FA, 0x510B, 0x611F, 0x610D, 0x9028,\n\t0x6000, 0x7105, 0x6117, 0xA06A, 0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B5,\n\t0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA093, 0x5121, 0x7080, 0x6115, 0xA03D,\n\t0x610A, 0x9014, 0x611D, 0xA0D9, 0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07C,\n\t0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C7, 0x510F, 0x7005, 0x6112, 0x9078,\n\t0x6107, 0x800F, 0x611A, 0xA0A3, 0x5121, 0x7102, 0x6116, 0xA058, 0x610C, 0x901E, 0x611E, 0xA0EA,\n\t0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA073, 0x5111, 0x7008, 0x6113, 0x90EE,\n\t0x6108, 0x8020, 0x611B, 0xA0BD, 0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09B,\n\t0x5121, 0x70FF, 0x6115, 0xA04E, 0x610A, 0x901A, 0x611D, 0xA0E2, 0x510B, 0x6122, 0x610E, 0x903E,\n\t0x6001, 0x7124, 0x6118, 0xA08A, 0x5111, 0x700A, 0x6114, 0xA02D, 0x6109, 0x80FE, 0x611C, 0xA0D1,\n\t0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AC, 0x5121, 0x7103, 0x6116, 0xA062,\n\t0x610C, 0x9024, 0x611E, 0xA0F7, 0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06E,\n\t0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0B9, 0x510F, 0x7003, 0x6110, 0x9048,\n\t0x6002, 0x800C, 0x6119, 0xA097, 0x5121, 0x7080, 0x6115, 0xA04A, 0x610A, 0x9016, 0x611D, 0xA0DD,\n\t0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA085, 0x5111, 0x7009, 0x6114, 0x90FD,\n\t0x6109, 0x80F0, 0x611C, 0xA0CB, 0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A7,\n\t0x5121, 0x7102, 0x6116, 0xA05D, 0x610C, 0x9021, 0x611E, 0xA0EF, 0x510B, 0x611F, 0x610D, 0x9033,\n\t0x6000, 0x7106, 0x6117, 0xA077, 0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C2,\n\t0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA09F, 0x5121, 0x70FF, 0x6115, 0xA054,\n\t0x610A, 0x901C, 0x611D, 0xA0E6, 0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08E,\n\t0x5111, 0x700A, 0x6114, 0xA034, 0x6109, 0x8120, 0x611C, 0xA0D5, 0x510F, 0x7006, 0x6112, 0x9090,\n\t0x6107, 0x8013, 0x611A, 0xA0B0, 0x5121, 0x7103, 0x6116, 0xA066, 0x610C, 0x9026, 0x611E, 0xA104,\n\t0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA069, 0x5111, 0x7007, 0x6113, 0x90C0,\n\t0x6108, 0x8018, 0x611B, 0xA0B4, 0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA092,\n\t0x5121, 0x7080, 0x6115, 0xA03B, 0x610A, 0x9012, 0x611D, 0xA0D8, 0x510B, 0x6122, 0x610E, 0x9035,\n\t0x6001, 0x7123, 0x6118, 0xA07B, 0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C5,\n\t0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A2, 0x5121, 0x7102, 0x6116, 0xA057,\n\t0x610C, 0x901D, 0x611E, 0xA0E9, 0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA072,\n\t0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BC, 0x510F, 0x7004, 0x6110, 0x9049,\n\t0x6002, 0x800D, 0x6119, 0xA09A, 0x5121, 0x70FF, 0x6115, 0xA04D, 0x610A, 0x9017, 0x611D, 0xA0E1,\n\t0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA089, 0x5111, 0x700A, 0x6114, 0xA02B,\n\t0x6109, 0x80FE, 0x611C, 0xA0CF, 0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0AA,\n\t0x5121, 0x7103, 0x6116, 0xA061, 0x610C, 0x9022, 0x611E, 0xA0F6, 0x510B, 0x611F, 0x610D, 0x9029,\n\t0x6000, 0x7105, 0x6117, 0xA06D, 0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B8,\n\t0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA096, 0x5121, 0x7080, 0x6115, 0xA047,\n\t0x610A, 0x9015, 0x611D, 0xA0DC, 0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA083,\n\t0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0CA, 0x510F, 0x7005, 0x6112, 0x907F,\n\t0x6107, 0x8010, 0x611A, 0xA0A6, 0x5121, 0x7102, 0x6116, 0xA05C, 0x610C, 0x901F, 0x611E, 0xA0ED,\n\t0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA076, 0x5111, 0x7008, 0x6113, 0x90F1,\n\t0x6108, 0x8040, 0x611B, 0xA0C1, 0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09E,\n\t0x5121, 0x70FF, 0x6115, 0xA053, 0x610A, 0x901B, 0x611D, 0xA0E5, 0x510B, 0x6122, 0x610E, 0x903F,\n\t0x6001, 0x7124, 0x6118, 0xA08D, 0x5111, 0x700A, 0x6114, 0xA032, 0x6109, 0x8120, 0x611C, 0xA0D4,\n\t0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AF, 0x5121, 0x7103, 0x6116, 0xA065,\n\t0x610C, 0x9025, 0x611E, 0xA0FB, 0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06B,\n\t0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B6, 0x510F, 0x7003, 0x6110, 0x9043,\n\t0x6002, 0x800B, 0x6119, 0xA094, 0x5121, 0x7080, 0x6115, 0xA045, 0x610A, 0x9014, 0x611D, 0xA0DA,\n\t0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07D, 0x5111, 0x7009, 0x6114, 0x90F8,\n\t0x6109, 0x8060, 0x611C, 0xA0C8, 0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A4,\n\t0x5121, 0x7102, 0x6116, 0xA05A, 0x610C, 0x901E, 0x611E, 0xA0EB, 0x510B, 0x611F, 0x610D, 0x9030,\n\t0x6000, 0x7106, 0x6117, 0xA074, 0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BE,\n\t0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09C, 0x5121, 0x70FF, 0x6115, 0xA04F,\n\t0x610A, 0x901A, 0x611D, 0xA0E3, 0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08B,\n\t0x5111, 0x700A, 0x6114, 0xA02E, 0x6109, 0x80FE, 0x611C, 0xA0D2, 0x510F, 0x7006, 0x6112, 0x9084,\n\t0x6107, 0x8011, 0x611A, 0xA0AD, 0x5121, 0x7103, 0x6116, 0xA063, 0x610C, 0x9024, 0x611E, 0xA0F9,\n\t0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06F, 0x5111, 0x7007, 0x6113, 0x90D0,\n\t0x6108, 0x8019, 0x611B, 0xA0BA, 0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA098,\n\t0x5121, 0x7080, 0x6115, 0xA04B, 0x610A, 0x9016, 0x611D, 0xA0DE, 0x510B, 0x6122, 0x610E, 0x9039,\n\t0x6001, 0x7123, 0x6118, 0xA086, 0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CD,\n\t0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A8, 0x5121, 0x7102, 0x6116, 0xA05E,\n\t0x610C, 0x9021, 0x611E, 0xA0F3, 0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA079,\n\t0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C3, 0x510F, 0x7004, 0x6110, 0x9059,\n\t0x6002, 0x800E, 0x6119, 0xA0A0, 0x5121, 0x70FF, 0x6115, 0xA055, 0x610A, 0x901C, 0x611D, 0xA0E7,\n\t0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08F, 0x5111, 0x700A, 0x6114, 0xA036,\n\t0x6109, 0x8120, 0x611C, 0xA0D6, 0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B1,\n\t0x5121, 0x7103, 0x6116, 0xA067, 0x610C, 0x9026, 0x611E, 0xB0B2, 0x510B, 0x611F, 0x610D, 0x9027,\n\t0x6000, 0x7105, 0x6117, 0xA068, 0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B3,\n\t0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA091, 0x5121, 0x7080, 0x6115, 0xA03A,\n\t0x610A, 0x9012, 0x611D, 0xA0D7, 0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07A,\n\t0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C4, 0x510F, 0x7005, 0x6112, 0x9070,\n\t0x6107, 0x800F, 0x611A, 0xA0A1, 0x5121, 0x7102, 0x6116, 0xA056, 0x610C, 0x901D, 0x611E, 0xA0E8,\n\t0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA071, 0x5111, 0x7008, 0x6113, 0x90E0,\n\t0x6108, 0x8020, 0x611B, 0xA0BB, 0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA099,\n\t0x5121, 0x70FF, 0x6115, 0xA04C, 0x610A, 0x9017, 0x611D, 0xA0DF, 0x510B, 0x6122, 0x610E, 0x903C,\n\t0x6001, 0x7124, 0x6118, 0xA087, 0x5111, 0x700A, 0x6114, 0xA023, 0x6109, 0x80FE, 0x611C, 0xA0CE,\n\t0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0A9, 0x5121, 0x7103, 0x6116, 0xA05F,\n\t0x610C, 0x9022, 0x611E, 0xA0F5, 0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06C,\n\t0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B7, 0x510F, 0x7003, 0x6110, 0x9044,\n\t0x6002, 0x800C, 0x6119, 0xA095, 0x5121, 0x7080, 0x6115, 0xA046, 0x610A, 0x9015, 0x611D, 0xA0DB,\n\t0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA07E, 0x5111, 0x7009, 0x6114, 0x90FC,\n\t0x6109, 0x80F0, 0x611C, 0xA0C9, 0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A5,\n\t0x5121, 0x7102, 0x6116, 0xA05B, 0x610C, 0x901F, 0x611E, 0xA0EC, 0x510B, 0x611F, 0x610D, 0x9031,\n\t0x6000, 0x7106, 0x6117, 0xA075, 0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0BF,\n\t0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09D, 0x5121, 0x70FF, 0x6115, 0xA052,\n\t0x610A, 0x901B, 0x611D, 0xA0E4, 0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08C,\n\t0x5111, 0x700A, 0x6114, 0xA02F, 0x6109, 0x8120, 0x611C, 0xA0D3, 0x510F, 0x7006, 0x6112, 0x9088,\n\t0x6107, 0x8013, 0x611A, 0xA0AE, 0x5121, 0x7103, 0x6116, 0xA064, 0x610C, 0x9025, 0x611E, 0xA0FA,\n\t0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06A, 0x5111, 0x7007, 0x6113, 0x90C6,\n\t0x6108, 0x8018, 0x611B, 0xA0B5, 0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA093,\n\t0x5121, 0x7080, 0x6115, 0xA03D, 0x610A, 0x9014, 0x611D, 0xA0D9, 0x510B, 0x6122, 0x610E, 0x9037,\n\t0x6001, 0x7123, 0x6118, 0xA07C, 0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C7,\n\t0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A3, 0x5121, 0x7102, 0x6116, 0xA058,\n\t0x610C, 0x901E, 0x611E, 0xA0EA, 0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA073,\n\t0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BD, 0x510F, 0x7004, 0x6110, 0x9050,\n\t0x6002, 0x800D, 0x6119, 0xA09B, 0x5121, 0x70FF, 0x6115, 0xA04E, 0x610A, 0x901A, 0x611D, 0xA0E2,\n\t0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08A, 0x5111, 0x700A, 0x6114, 0xA02D,\n\t0x6109, 0x80FE, 0x611C, 0xA0D1, 0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AC,\n\t0x5121, 0x7103, 0x6116, 0xA062, 0x610C, 0x9024, 0x611E, 0xA0F7, 0x510B, 0x611F, 0x610D, 0x902A,\n\t0x6000, 0x7105, 0x6117, 0xA06E, 0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0B9,\n\t0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA097, 0x5121, 0x7080, 0x6115, 0xA04A,\n\t0x610A, 0x9016, 0x611D, 0xA0DD, 0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA085,\n\t0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CB, 0x510F, 0x7005, 0x6112, 0x9081,\n\t0x6107, 0x8010, 0x611A, 0xA0A7, 0x5121, 0x7102, 0x6116, 0xA05D, 0x610C, 0x9021, 0x611E, 0xA0EF,\n\t0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA077, 0x5111, 0x7008, 0x6113, 0x90F2,\n\t0x6108, 0x8040, 0x611B, 0xA0C2, 0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA09F,\n\t0x5121, 0x70FF, 0x6115, 0xA054, 0x610A, 0x901C, 0x611D, 0xA0E6, 0x510B, 0x6122, 0x610E, 0x9041,\n\t0x6001, 0x7124, 0x6118, 0xA08E, 0x5111, 0x700A, 0x6114, 0xA034, 0x6109, 0x8120, 0x611C, 0xA0D5,\n\t0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B0, 0x5121, 0x7103, 0x6116, 0xA066,\n\t0x610C, 0x9026, 0x611E, 0xA104, 0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA069,\n\t0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B4, 0x510F, 0x7003, 0x6110, 0x9042,\n\t0x6002, 0x800B, 0x6119, 0xA092, 0x5121, 0x7080, 0x6115, 0xA03B, 0x610A, 0x9012, 0x611D, 0xA0D8,\n\t0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07B, 0x5111, 0x7009, 0x6114, 0x90F4,\n\t0x6109, 0x8060, 0x611C, 0xA0C5, 0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A2,\n\t0x5121, 0x7102, 0x6116, 0xA057, 0x610C, 0x901D, 0x611E, 0xA0E9, 0x510B, 0x611F, 0x610D, 0x902C,\n\t0x6000, 0x7106, 0x6117, 0xA072, 0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BC,\n\t0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA09A, 0x5121, 0x70FF, 0x6115, 0xA04D,\n\t0x610A, 0x9017, 0x611D, 0xA0E1, 0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA089,\n\t0x5111, 0x700A, 0x6114, 0xA02B, 0x6109, 0x80FE, 0x611C, 0xA0CF, 0x510F, 0x7006, 0x6112, 0x9082,\n\t0x6107, 0x8011, 0x611A, 0xA0AA, 0x5121, 0x7103, 0x6116, 0xA061, 0x610C, 0x9022, 0x611E, 0xA0F6,\n\t0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06D, 0x5111, 0x7007, 0x6113, 0x90CC,\n\t0x6108, 0x8019, 0x611B, 0xA0B8, 0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA096,\n\t0x5121, 0x7080, 0x6115, 0xA047, 0x610A, 0x9015, 0x611D, 0xA0DC, 0x510B, 0x6122, 0x610E, 0x9038,\n\t0x6001, 0x7123, 0x6118, 0xA083, 0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0CA,\n\t0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A6, 0x5121, 0x7102, 0x6116, 0xA05C,\n\t0x610C, 0x901F, 0x611E, 0xA0ED, 0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA076,\n\t0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0C1, 0x510F, 0x7004, 0x6110, 0x9051,\n\t0x6002, 0x800E, 0x6119, 0xA09E, 0x5121, 0x70FF, 0x6115, 0xA053, 0x610A, 0x901B, 0x611D, 0xA0E5,\n\t0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08D, 0x5111, 0x700A, 0x6114, 0xA032,\n\t0x6109, 0x8120, 0x611C, 0xA0D4, 0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AF,\n\t0x5121, 0x7103, 0x6116, 0xA065, 0x610C, 0x9025, 0x611E, 0xA0FB, 0x510B, 0x611F, 0x610D, 0x9028,\n\t0x6000, 0x7105, 0x6117, 0xA06B, 0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B6,\n\t0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA094, 0x5121, 0x7080, 0x6115, 0xA045,\n\t0x610A, 0x9014, 0x611D, 0xA0DA, 0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07D,\n\t0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C8, 0x510F, 0x7005, 0x6112, 0x9078,\n\t0x6107, 0x800F, 0x611A, 0xA0A4, 0x5121, 0x7102, 0x6116, 0xA05A, 0x610C, 0x901E, 0x611E, 0xA0EB,\n\t0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA074, 0x5111, 0x7008, 0x6113, 0x90EE,\n\t0x6108, 0x8020, 0x611B, 0xA0BE, 0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09C,\n\t0x5121, 0x70FF, 0x6115, 0xA04F, 0x610A, 0x901A, 0x611D, 0xA0E3, 0x510B, 0x6122, 0x610E, 0x903E,\n\t0x6001, 0x7124, 0x6118, 0xA08B, 0x5111, 0x700A, 0x6114, 0xA02E, 0x6109, 0x80FE, 0x611C, 0xA0D2,\n\t0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AD, 0x5121, 0x7103, 0x6116, 0xA063,\n\t0x610C, 0x9024, 0x611E, 0xA0F9, 0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06F,\n\t0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0BA, 0x510F, 0x7003, 0x6110, 0x9048,\n\t0x6002, 0x800C, 0x6119, 0xA098, 0x5121, 0x7080, 0x6115, 0xA04B, 0x610A, 0x9016, 0x611D, 0xA0DE,\n\t0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA086, 0x5111, 0x7009, 0x6114, 0x90FD,\n\t0x6109, 0x80F0, 0x611C, 0xA0CD, 0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A8,\n\t0x5121, 0x7102, 0x6116, 0xA05E, 0x610C, 0x9021, 0x611E, 0xA0F3, 0x510B, 0x611F, 0x610D, 0x9033,\n\t0x6000, 0x7106, 0x6117, 0xA079, 0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C3,\n\t0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA0A0, 0x5121, 0x70FF, 0x6115, 0xA055,\n\t0x610A, 0x901C, 0x611D, 0xA0E7, 0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08F,\n\t0x5111, 0x700A, 0x6114, 0xA036, 0x6109, 0x8120, 0x611C, 0xA0D6, 0x510F, 0x7006, 0x6112, 0x9090,\n\t0x6107, 0x8013, 0x611A, 0xA0B1, 0x5121, 0x7103, 0x6116, 0xA067, 0x610C, 0x9026, 0x611E, 0xD100,\n\t0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA068, 0x5111, 0x7007, 0x6113, 0x90C0,\n\t0x6108, 0x8018, 0x611B, 0xA0B3, 0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA091,\n\t0x5121, 0x7080, 0x6115, 0xA03A, 0x610A, 0x9012, 0x611D, 0xA0D7, 0x510B, 0x6122, 0x610E, 0x9035,\n\t0x6001, 0x7123, 0x6118, 0xA07A, 0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C4,\n\t0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A1, 0x5121, 0x7102, 0x6116, 0xA056,\n\t0x610C, 0x901D, 0x611E, 0xA0E8, 0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA071,\n\t0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BB, 0x510F, 0x7004, 0x6110, 0x9049,\n\t0x6002, 0x800D, 0x6119, 0xA099, 0x5121, 0x70FF, 0x6115, 0xA04C, 0x610A, 0x9017, 0x611D, 0xA0DF,\n\t0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA087, 0x5111, 0x700A, 0x6114, 0xA023,\n\t0x6109, 0x80FE, 0x611C, 0xA0CE, 0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0A9,\n\t0x5121, 0x7103, 0x6116, 0xA05F, 0x610C, 0x9022, 0x611E, 0xA0F5, 0x510B, 0x611F, 0x610D, 0x9029,\n\t0x6000, 0x7105, 0x6117, 0xA06C, 0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B7,\n\t0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA095, 0x5121, 0x7080, 0x6115, 0xA046,\n\t0x610A, 0x9015, 0x611D, 0xA0DB, 0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA07E,\n\t0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0C9, 0x510F, 0x7005, 0x6112, 0x907F,\n\t0x6107, 0x8010, 0x611A, 0xA0A5, 0x5121, 0x7102, 0x6116, 0xA05B, 0x610C, 0x901F, 0x611E, 0xA0EC,\n\t0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA075, 0x5111, 0x7008, 0x6113, 0x90F1,\n\t0x6108, 0x8040, 0x611B, 0xA0BF, 0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09D,\n\t0x5121, 0x70FF, 0x6115, 0xA052, 0x610A, 0x901B, 0x611D, 0xA0E4, 0x510B, 0x6122, 0x610E, 0x903F,\n\t0x6001, 0x7124, 0x6118, 0xA08C, 0x5111, 0x700A, 0x6114, 0xA02F, 0x6109, 0x8120, 0x611C, 0xA0D3,\n\t0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AE, 0x5121, 0x7103, 0x6116, 0xA064,\n\t0x610C, 0x9025, 0x611E, 0xA0FA, 0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06A,\n\t0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B5, 0x510F, 0x7003, 0x6110, 0x9043,\n\t0x6002, 0x800B, 0x6119, 0xA093, 0x5121, 0x7080, 0x6115, 0xA03D, 0x610A, 0x9014, 0x611D, 0xA0D9,\n\t0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07C, 0x5111, 0x7009, 0x6114, 0x90F8,\n\t0x6109, 0x8060, 0x611C, 0xA0C7, 0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A3,\n\t0x5121, 0x7102, 0x6116, 0xA058, 0x610C, 0x901E, 0x611E, 0xA0EA, 0x510B, 0x611F, 0x610D, 0x9030,\n\t0x6000, 0x7106, 0x6117, 0xA073, 0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BD,\n\t0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09B, 0x5121, 0x70FF, 0x6115, 0xA04E,\n\t0x610A, 0x901A, 0x611D, 0xA0E2, 0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08A,\n\t0x5111, 0x700A, 0x6114, 0xA02D, 0x6109, 0x80FE, 0x611C, 0xA0D1, 0x510F, 0x7006, 0x6112, 0x9084,\n\t0x6107, 0x8011, 0x611A, 0xA0AC, 0x5121, 0x7103, 0x6116, 0xA062, 0x610C, 0x9024, 0x611E, 0xA0F7,\n\t0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06E, 0x5111, 0x7007, 0x6113, 0x90D0,\n\t0x6108, 0x8019, 0x611B, 0xA0B9, 0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA097,\n\t0x5121, 0x7080, 0x6115, 0xA04A, 0x610A, 0x9016, 0x611D, 0xA0DD, 0x510B, 0x6122, 0x610E, 0x9039,\n\t0x6001, 0x7123, 0x6118, 0xA085, 0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CB,\n\t0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A7, 0x5121, 0x7102, 0x6116, 0xA05D,\n\t0x610C, 0x9021, 0x611E, 0xA0EF, 0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA077,\n\t0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C2, 0x510F, 0x7004, 0x6110, 0x9059,\n\t0x6002, 0x800E, 0x6119, 0xA09F, 0x5121, 0x70FF, 0x6115, 0xA054, 0x610A, 0x901C, 0x611D, 0xA0E6,\n\t0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08E, 0x5111, 0x700A, 0x6114, 0xA034,\n\t0x6109, 0x8120, 0x611C, 0xA0D5, 0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B0,\n\t0x5121, 0x7103, 0x6116, 0xA066, 0x610C, 0x9026, 0x611E, 0xA104, 0x510B, 0x611F, 0x610D, 0x9027,\n\t0x6000, 0x7105, 0x6117, 0xA069, 0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B4,\n\t0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA092, 0x5121, 0x7080, 0x6115, 0xA03B,\n\t0x610A, 0x9012, 0x611D, 0xA0D8, 0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07B,\n\t0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C5, 0x510F, 0x7005, 0x6112, 0x9070,\n\t0x6107, 0x800F, 0x611A, 0xA0A2, 0x5121, 0x7102, 0x6116, 0xA057, 0x610C, 0x901D, 0x611E, 0xA0E9,\n\t0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA072, 0x5111, 0x7008, 0x6113, 0x90E0,\n\t0x6108, 0x8020, 0x611B, 0xA0BC, 0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA09A,\n\t0x5121, 0x70FF, 0x6115, 0xA04D, 0x610A, 0x9017, 0x611D, 0xA0E1, 0x510B, 0x6122, 0x610E, 0x903C,\n\t0x6001, 0x7124, 0x6118, 0xA089, 0x5111, 0x700A, 0x6114, 0xA02B, 0x6109, 0x80FE, 0x611C, 0xA0CF,\n\t0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0AA, 0x5121, 0x7103, 0x6116, 0xA061,\n\t0x610C, 0x9022, 0x611E, 0xA0F6, 0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06D,\n\t0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B8, 0x510F, 0x7003, 0x6110, 0x9044,\n\t0x6002, 0x800C, 0x6119, 0xA096, 0x5121, 0x7080, 0x6115, 0xA047, 0x610A, 0x9015, 0x611D, 0xA0DC,\n\t0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA083, 0x5111, 0x7009, 0x6114, 0x90FC,\n\t0x6109, 0x80F0, 0x611C, 0xA0CA, 0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A6,\n\t0x5121, 0x7102, 0x6116, 0xA05C, 0x610C, 0x901F, 0x611E, 0xA0ED, 0x510B, 0x611F, 0x610D, 0x9031,\n\t0x6000, 0x7106, 0x6117, 0xA076, 0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0C1,\n\t0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09E, 0x5121, 0x70FF, 0x6115, 0xA053,\n\t0x610A, 0x901B, 0x611D, 0xA0E5, 0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08D,\n\t0x5111, 0x700A, 0x6114, 0xA032, 0x6109, 0x8120, 0x611C, 0xA0D4, 0x510F, 0x7006, 0x6112, 0x9088,\n\t0x6107, 0x8013, 0x611A, 0xA0AF, 0x5121, 0x7103, 0x6116, 0xA065, 0x610C, 0x9025, 0x611E, 0xA0FB,\n\t0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06B, 0x5111, 0x7007, 0x6113, 0x90C6,\n\t0x6108, 0x8018, 0x611B, 0xA0B6, 0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA094,\n\t0x5121, 0x7080, 0x6115, 0xA045, 0x610A, 0x9014, 0x611D, 0xA0DA, 0x510B, 0x6122, 0x610E, 0x9037,\n\t0x6001, 0x7123, 0x6118, 0xA07D, 0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C8,\n\t0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A4, 0x5121, 0x7102, 0x6116, 0xA05A,\n\t0x610C, 0x901E, 0x611E, 0xA0EB, 0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA074,\n\t0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BE, 0x510F, 0x7004, 0x6110, 0x9050,\n\t0x6002, 0x800D, 0x6119, 0xA09C, 0x5121, 0x70FF, 0x6115, 0xA04F, 0x610A, 0x901A, 0x611D, 0xA0E3,\n\t0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08B, 0x5111, 0x700A, 0x6114, 0xA02E,\n\t0x6109, 0x80FE, 0x611C, 0xA0D2, 0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AD,\n\t0x5121, 0x7103, 0x6116, 0xA063, 0x610C, 0x9024, 0x611E, 0xA0F9, 0x510B, 0x611F, 0x610D, 0x902A,\n\t0x6000, 0x7105, 0x6117, 0xA06F, 0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0BA,\n\t0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA098, 0x5121, 0x7080, 0x6115, 0xA04B,\n\t0x610A, 0x9016, 0x611D, 0xA0DE, 0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA086,\n\t0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CD, 0x510F, 0x7005, 0x6112, 0x9081,\n\t0x6107, 0x8010, 0x611A, 0xA0A8, 0x5121, 0x7102, 0x6116, 0xA05E, 0x610C, 0x9021, 0x611E, 0xA0F3,\n\t0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA079, 0x5111, 0x7008, 0x6113, 0x90F2,\n\t0x6108, 0x8040, 0x611B, 0xA0C3, 0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA0A0,\n\t0x5121, 0x70FF, 0x6115, 0xA055, 0x610A, 0x901C, 0x611D, 0xA0E7, 0x510B, 0x6122, 0x610E, 0x9041,\n\t0x6001, 0x7124, 0x6118, 0xA08F, 0x5111, 0x700A, 0x6114, 0xA036, 0x6109, 0x8120, 0x611C, 0xA0D6,\n\t0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B1, 0x5121, 0x7103, 0x6116, 0xA067,\n\t0x610C, 0x9026, 0x611E, 0xB0B2, 0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA068,\n\t0x5111, 0x7007, 0x6113, 0x90C0, 0x6108, 0x8018, 0x611B, 0xA0B3, 0x510F, 0x7003, 0x6110, 0x9042,\n\t0x6002, 0x800B, 0x6119, 0xA091, 0x5121, 0x7080, 0x6115, 0xA03A, 0x610A, 0x9012, 0x611D, 0xA0D7,\n\t0x510B, 0x6122, 0x610E, 0x9035, 0x6001, 0x7123, 0x6118, 0xA07A, 0x5111, 0x7009, 0x6114, 0x90F4,\n\t0x6109, 0x8060, 0x611C, 0xA0C4, 0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A1,\n\t0x5121, 0x7102, 0x6116, 0xA056, 0x610C, 0x901D, 0x611E, 0xA0E8, 0x510B, 0x611F, 0x610D, 0x902C,\n\t0x6000, 0x7106, 0x6117, 0xA071, 0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BB,\n\t0x510F, 0x7004, 0x6110, 0x9049, 0x6002, 0x800D, 0x6119, 0xA099, 0x5121, 0x70FF, 0x6115, 0xA04C,\n\t0x610A, 0x9017, 0x611D, 0xA0DF, 0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA087,\n\t0x5111, 0x700A, 0x6114, 0xA023, 0x6109, 0x80FE, 0x611C, 0xA0CE, 0x510F, 0x7006, 0x6112, 0x9082,\n\t0x6107, 0x8011, 0x611A, 0xA0A9, 0x5121, 0x7103, 0x6116, 0xA05F, 0x610C, 0x9022, 0x611E, 0xA0F5,\n\t0x510B, 0x611F, 0x610D, 0x9029, 0x6000, 0x7105, 0x6117, 0xA06C, 0x5111, 0x7007, 0x6113, 0x90CC,\n\t0x6108, 0x8019, 0x611B, 0xA0B7, 0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA095,\n\t0x5121, 0x7080, 0x6115, 0xA046, 0x610A, 0x9015, 0x611D, 0xA0DB, 0x510B, 0x6122, 0x610E, 0x9038,\n\t0x6001, 0x7123, 0x6118, 0xA07E, 0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0C9,\n\t0x510F, 0x7005, 0x6112, 0x907F, 0x6107, 0x8010, 0x611A, 0xA0A5, 0x5121, 0x7102, 0x6116, 0xA05B,\n\t0x610C, 0x901F, 0x611E, 0xA0EC, 0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA075,\n\t0x5111, 0x7008, 0x6113, 0x90F1, 0x6108, 0x8040, 0x611B, 0xA0BF, 0x510F, 0x7004, 0x6110, 0x9051,\n\t0x6002, 0x800E, 0x6119, 0xA09D, 0x5121, 0x70FF, 0x6115, 0xA052, 0x610A, 0x901B, 0x611D, 0xA0E4,\n\t0x510B, 0x6122, 0x610E, 0x903F, 0x6001, 0x7124, 0x6118, 0xA08C, 0x5111, 0x700A, 0x6114, 0xA02F,\n\t0x6109, 0x8120, 0x611C, 0xA0D3, 0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AE,\n\t0x5121, 0x7103, 0x6116, 0xA064, 0x610C, 0x9025, 0x611E, 0xA0FA, 0x510B, 0x611F, 0x610D, 0x9028,\n\t0x6000, 0x7105, 0x6117, 0xA06A, 0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B5,\n\t0x510F, 0x7003, 0x6110, 0x9043, 0x6002, 0x800B, 0x6119, 0xA093, 0x5121, 0x7080, 0x6115, 0xA03D,\n\t0x610A, 0x9014, 0x611D, 0xA0D9, 0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07C,\n\t0x5111, 0x7009, 0x6114, 0x90F8, 0x6109, 0x8060, 0x611C, 0xA0C7, 0x510F, 0x7005, 0x6112, 0x9078,\n\t0x6107, 0x800F, 0x611A, 0xA0A3, 0x5121, 0x7102, 0x6116, 0xA058, 0x610C, 0x901E, 0x611E, 0xA0EA,\n\t0x510B, 0x611F, 0x610D, 0x9030, 0x6000, 0x7106, 0x6117, 0xA073, 0x5111, 0x7008, 0x6113, 0x90EE,\n\t0x6108, 0x8020, 0x611B, 0xA0BD, 0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09B,\n\t0x5121, 0x70FF, 0x6115, 0xA04E, 0x610A, 0x901A, 0x611D, 0xA0E2, 0x510B, 0x6122, 0x610E, 0x903E,\n\t0x6001, 0x7124, 0x6118, 0xA08A, 0x5111, 0x700A, 0x6114, 0xA02D, 0x6109, 0x80FE, 0x611C, 0xA0D1,\n\t0x510F, 0x7006, 0x6112, 0x9084, 0x6107, 0x8011, 0x611A, 0xA0AC, 0x5121, 0x7103, 0x6116, 0xA062,\n\t0x610C, 0x9024, 0x611E, 0xA0F7, 0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06E,\n\t0x5111, 0x7007, 0x6113, 0x90D0, 0x6108, 0x8019, 0x611B, 0xA0B9, 0x510F, 0x7003, 0x6110, 0x9048,\n\t0x6002, 0x800C, 0x6119, 0xA097, 0x5121, 0x7080, 0x6115, 0xA04A, 0x610A, 0x9016, 0x611D, 0xA0DD,\n\t0x510B, 0x6122, 0x610E, 0x9039, 0x6001, 0x7123, 0x6118, 0xA085, 0x5111, 0x7009, 0x6114, 0x90FD,\n\t0x6109, 0x80F0, 0x611C, 0xA0CB, 0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A7,\n\t0x5121, 0x7102, 0x6116, 0xA05D, 0x610C, 0x9021, 0x611E, 0xA0EF, 0x510B, 0x611F, 0x610D, 0x9033,\n\t0x6000, 0x7106, 0x6117, 0xA077, 0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C2,\n\t0x510F, 0x7004, 0x6110, 0x9059, 0x6002, 0x800E, 0x6119, 0xA09F, 0x5121, 0x70FF, 0x6115, 0xA054,\n\t0x610A, 0x901C, 0x611D, 0xA0E6, 0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08E,\n\t0x5111, 0x700A, 0x6114, 0xA034, 0x6109, 0x8120, 0x611C, 0xA0D5, 0x510F, 0x7006, 0x6112, 0x9090,\n\t0x6107, 0x8013, 0x611A, 0xA0B0, 0x5121, 0x7103, 0x6116, 0xA066, 0x610C, 0x9026, 0x611E, 0xA104,\n\t0x510B, 0x611F, 0x610D, 0x9027, 0x6000, 0x7105, 0x6117, 0xA069, 0x5111, 0x7007, 0x6113, 0x90C0,\n\t0x6108, 0x8018, 0x611B, 0xA0B4, 0x510F, 0x7003, 0x6110, 0x9042, 0x6002, 0x800B, 0x6119, 0xA092,\n\t0x5121, 0x7080, 0x6115, 0xA03B, 0x610A, 0x9012, 0x611D, 0xA0D8, 0x510B, 0x6122, 0x610E, 0x9035,\n\t0x6001, 0x7123, 0x6118, 0xA07B, 0x5111, 0x7009, 0x6114, 0x90F4, 0x6109, 0x8060, 0x611C, 0xA0C5,\n\t0x510F, 0x7005, 0x6112, 0x9070, 0x6107, 0x800F, 0x611A, 0xA0A2, 0x5121, 0x7102, 0x6116, 0xA057,\n\t0x610C, 0x901D, 0x611E, 0xA0E9, 0x510B, 0x611F, 0x610D, 0x902C, 0x6000, 0x7106, 0x6117, 0xA072,\n\t0x5111, 0x7008, 0x6113, 0x90E0, 0x6108, 0x8020, 0x611B, 0xA0BC, 0x510F, 0x7004, 0x6110, 0x9049,\n\t0x6002, 0x800D, 0x6119, 0xA09A, 0x5121, 0x70FF, 0x6115, 0xA04D, 0x610A, 0x9017, 0x611D, 0xA0E1,\n\t0x510B, 0x6122, 0x610E, 0x903C, 0x6001, 0x7124, 0x6118, 0xA089, 0x5111, 0x700A, 0x6114, 0xA02B,\n\t0x6109, 0x80FE, 0x611C, 0xA0CF, 0x510F, 0x7006, 0x6112, 0x9082, 0x6107, 0x8011, 0x611A, 0xA0AA,\n\t0x5121, 0x7103, 0x6116, 0xA061, 0x610C, 0x9022, 0x611E, 0xA0F6, 0x510B, 0x611F, 0x610D, 0x9029,\n\t0x6000, 0x7105, 0x6117, 0xA06D, 0x5111, 0x7007, 0x6113, 0x90CC, 0x6108, 0x8019, 0x611B, 0xA0B8,\n\t0x510F, 0x7003, 0x6110, 0x9044, 0x6002, 0x800C, 0x6119, 0xA096, 0x5121, 0x7080, 0x6115, 0xA047,\n\t0x610A, 0x9015, 0x611D, 0xA0DC, 0x510B, 0x6122, 0x610E, 0x9038, 0x6001, 0x7123, 0x6118, 0xA083,\n\t0x5111, 0x7009, 0x6114, 0x90FC, 0x6109, 0x80F0, 0x611C, 0xA0CA, 0x510F, 0x7005, 0x6112, 0x907F,\n\t0x6107, 0x8010, 0x611A, 0xA0A6, 0x5121, 0x7102, 0x6116, 0xA05C, 0x610C, 0x901F, 0x611E, 0xA0ED,\n\t0x510B, 0x611F, 0x610D, 0x9031, 0x6000, 0x7106, 0x6117, 0xA076, 0x5111, 0x7008, 0x6113, 0x90F1,\n\t0x6108, 0x8040, 0x611B, 0xA0C1, 0x510F, 0x7004, 0x6110, 0x9051, 0x6002, 0x800E, 0x6119, 0xA09E,\n\t0x5121, 0x70FF, 0x6115, 0xA053, 0x610A, 0x901B, 0x611D, 0xA0E5, 0x510B, 0x6122, 0x610E, 0x903F,\n\t0x6001, 0x7124, 0x6118, 0xA08D, 0x5111, 0x700A, 0x6114, 0xA032, 0x6109, 0x8120, 0x611C, 0xA0D4,\n\t0x510F, 0x7006, 0x6112, 0x9088, 0x6107, 0x8013, 0x611A, 0xA0AF, 0x5121, 0x7103, 0x6116, 0xA065,\n\t0x610C, 0x9025, 0x611E, 0xA0FB, 0x510B, 0x611F, 0x610D, 0x9028, 0x6000, 0x7105, 0x6117, 0xA06B,\n\t0x5111, 0x7007, 0x6113, 0x90C6, 0x6108, 0x8018, 0x611B, 0xA0B6, 0x510F, 0x7003, 0x6110, 0x9043,\n\t0x6002, 0x800B, 0x6119, 0xA094, 0x5121, 0x7080, 0x6115, 0xA045, 0x610A, 0x9014, 0x611D, 0xA0DA,\n\t0x510B, 0x6122, 0x610E, 0x9037, 0x6001, 0x7123, 0x6118, 0xA07D, 0x5111, 0x7009, 0x6114, 0x90F8,\n\t0x6109, 0x8060, 0x611C, 0xA0C8, 0x510F, 0x7005, 0x6112, 0x9078, 0x6107, 0x800F, 0x611A, 0xA0A4,\n\t0x5121, 0x7102, 0x6116, 0xA05A, 0x610C, 0x901E, 0x611E, 0xA0EB, 0x510B, 0x611F, 0x610D, 0x9030,\n\t0x6000, 0x7106, 0x6117, 0xA074, 0x5111, 0x7008, 0x6113, 0x90EE, 0x6108, 0x8020, 0x611B, 0xA0BE,\n\t0x510F, 0x7004, 0x6110, 0x9050, 0x6002, 0x800D, 0x6119, 0xA09C, 0x5121, 0x70FF, 0x6115, 0xA04F,\n\t0x610A, 0x901A, 0x611D, 0xA0E3, 0x510B, 0x6122, 0x610E, 0x903E, 0x6001, 0x7124, 0x6118, 0xA08B,\n\t0x5111, 0x700A, 0x6114, 0xA02E, 0x6109, 0x80FE, 0x611C, 0xA0D2, 0x510F, 0x7006, 0x6112, 0x9084,\n\t0x6107, 0x8011, 0x611A, 0xA0AD, 0x5121, 0x7103, 0x6116, 0xA063, 0x610C, 0x9024, 0x611E, 0xA0F9,\n\t0x510B, 0x611F, 0x610D, 0x902A, 0x6000, 0x7105, 0x6117, 0xA06F, 0x5111, 0x7007, 0x6113, 0x90D0,\n\t0x6108, 0x8019, 0x611B, 0xA0BA, 0x510F, 0x7003, 0x6110, 0x9048, 0x6002, 0x800C, 0x6119, 0xA098,\n\t0x5121, 0x7080, 0x6115, 0xA04B, 0x610A, 0x9016, 0x611D, 0xA0DE, 0x510B, 0x6122, 0x610E, 0x9039,\n\t0x6001, 0x7123, 0x6118, 0xA086, 0x5111, 0x7009, 0x6114, 0x90FD, 0x6109, 0x80F0, 0x611C, 0xA0CD,\n\t0x510F, 0x7005, 0x6112, 0x9081, 0x6107, 0x8010, 0x611A, 0xA0A8, 0x5121, 0x7102, 0x6116, 0xA05E,\n\t0x610C, 0x9021, 0x611E, 0xA0F3, 0x510B, 0x611F, 0x610D, 0x9033, 0x6000, 0x7106, 0x6117, 0xA079,\n\t0x5111, 0x7008, 0x6113, 0x90F2, 0x6108, 0x8040, 0x611B, 0xA0C3, 0x510F, 0x7004, 0x6110, 0x9059,\n\t0x6002, 0x800E, 0x6119, 0xA0A0, 0x5121, 0x70FF, 0x6115, 0xA055, 0x610A, 0x901C, 0x611D, 0xA0E7,\n\t0x510B, 0x6122, 0x610E, 0x9041, 0x6001, 0x7124, 0x6118, 0xA08F, 0x5111, 0x700A, 0x6114, 0xA036,\n\t0x6109, 0x8120, 0x611C, 0xA0D6, 0x510F, 0x7006, 0x6112, 0x9090, 0x6107, 0x8013, 0x611A, 0xA0B1,\n\t0x5121, 0x7103, 0x6116, 0xA067, 0x610C, 0x9026, 0x611E, 0xD125\n};\n\nstatic const UINT16 HuffTableLOM[512] = {\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007,\n\t0x2001, 0x4006, 0x3004, 0x700D, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600B,\n\t0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x8012, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x7010,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600C, 0x2001, 0x4003, 0x3002, 0x5009,\n\t0x2001, 0x4006, 0x3004, 0x9018, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A,\n\t0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x700E, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x600B, 0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x9013,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007,\n\t0x2001, 0x4006, 0x3004, 0x800F, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600C,\n\t0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x901C, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x700D,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600B, 0x2001, 0x4003, 0x3002, 0x5009,\n\t0x2001, 0x4006, 0x3004, 0x8015, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A,\n\t0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x7010, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x600C, 0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x901A,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007,\n\t0x2001, 0x4006, 0x3004, 0x700E, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600B,\n\t0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x9016, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x8011,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600C, 0x2001, 0x4003, 0x3002, 0x5009,\n\t0x2001, 0x4006, 0x3004, 0x901E, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A,\n\t0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x700D, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x600B, 0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x8012,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007,\n\t0x2001, 0x4006, 0x3004, 0x7010, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600C,\n\t0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x9019, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x700E,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600B, 0x2001, 0x4003, 0x3002, 0x5009,\n\t0x2001, 0x4006, 0x3004, 0x9014, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A,\n\t0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x800F, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x600C, 0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x901D,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007,\n\t0x2001, 0x4006, 0x3004, 0x700D, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600B,\n\t0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x8015, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x7010,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600C, 0x2001, 0x4003, 0x3002, 0x5009,\n\t0x2001, 0x4006, 0x3004, 0x901B, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A,\n\t0x2001, 0x4003, 0x3002, 0x5007, 0x2001, 0x4006, 0x3004, 0x700E, 0x2001, 0x4000, 0x3002, 0x4008,\n\t0x2001, 0x4005, 0x3004, 0x600B, 0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x9017,\n\t0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x500A, 0x2001, 0x4003, 0x3002, 0x5007,\n\t0x2001, 0x4006, 0x3004, 0x8011, 0x2001, 0x4000, 0x3002, 0x4008, 0x2001, 0x4005, 0x3004, 0x600C,\n\t0x2001, 0x4003, 0x3002, 0x5009, 0x2001, 0x4006, 0x3004, 0x901F\n};\n\nstatic const BYTE HuffTableMask[39] = {\n\t0x11, /* 0 */\n\t0x9E, /* 1 */\n\t0xA1, /* 2 */\n\t0x00, /* 3 */\n\t0x00, /* 4 */\n\t0x01, /* 5 */\n\t0x00, /* 6 */\n\t0x03, /* 7 */\n\t0x00, /* 8 */\n\t0x07, /* 9 */\n\t0x00, /* 10 */\n\t0x0F, /* 11 */\n\t0x00, /* 12 */\n\t0x1F, /* 13 */\n\t0x00, /* 14 */\n\t0x3F, /* 15 */\n\t0x00, /* 16 */\n\t0x7F, /* 17 */\n\t0x00, /* 18 */\n\t0xFF, /* 19 */\n\t0x00, /* 20 */\n\t0xFF, /* 21 */\n\t0x01, /* 22 */\n\t0xFF, /* 23 */\n\t0x03, /* 24 */\n\t0xFF, /* 25 */\n\t0x07, /* 26 */\n\t0xFF, /* 27 */\n\t0x0F, /* 28 */\n\t0xFF, /* 29 */\n\t0x1F, /* 30 */\n\t0xFF, /* 31 */\n\t0x3F, /* 32 */\n\t0xFF, /* 33 */\n\t0x7F, /* 34 */\n\t0xFF, /* 35 */\n\t0xFF, /* 36 */\n\t0x00, /* 37 */\n\t0x00  /* 38 */\n};\n\nstatic const BYTE HuffLengthLEC[294] = {\n\t6,  /* 0 */\n\t6,  /* 1 */\n\t6,  /* 2 */\n\t7,  /* 3 */\n\t7,  /* 4 */\n\t7,  /* 5 */\n\t7,  /* 6 */\n\t7,  /* 7 */\n\t7,  /* 8 */\n\t7,  /* 9 */\n\t7,  /* 10 */\n\t8,  /* 11 */\n\t8,  /* 12 */\n\t8,  /* 13 */\n\t8,  /* 14 */\n\t8,  /* 15 */\n\t8,  /* 16 */\n\t8,  /* 17 */\n\t9,  /* 18 */\n\t8,  /* 19 */\n\t9,  /* 20 */\n\t9,  /* 21 */\n\t9,  /* 22 */\n\t9,  /* 23 */\n\t8,  /* 24 */\n\t8,  /* 25 */\n\t9,  /* 26 */\n\t9,  /* 27 */\n\t9,  /* 28 */\n\t9,  /* 29 */\n\t9,  /* 30 */\n\t9,  /* 31 */\n\t8,  /* 32 */\n\t9,  /* 33 */\n\t9,  /* 34 */\n\t10, /* 35 */\n\t9,  /* 36 */\n\t9,  /* 37 */\n\t9,  /* 38 */\n\t9,  /* 39 */\n\t9,  /* 40 */\n\t9,  /* 41 */\n\t9,  /* 42 */\n\t10, /* 43 */\n\t9,  /* 44 */\n\t10, /* 45 */\n\t10, /* 46 */\n\t10, /* 47 */\n\t9,  /* 48 */\n\t9,  /* 49 */\n\t10, /* 50 */\n\t9,  /* 51 */\n\t10, /* 52 */\n\t9,  /* 53 */\n\t10, /* 54 */\n\t9,  /* 55 */\n\t9,  /* 56 */\n\t9,  /* 57 */\n\t10, /* 58 */\n\t10, /* 59 */\n\t9,  /* 60 */\n\t10, /* 61 */\n\t9,  /* 62 */\n\t9,  /* 63 */\n\t8,  /* 64 */\n\t9,  /* 65 */\n\t9,  /* 66 */\n\t9,  /* 67 */\n\t9,  /* 68 */\n\t10, /* 69 */\n\t10, /* 70 */\n\t10, /* 71 */\n\t9,  /* 72 */\n\t9,  /* 73 */\n\t10, /* 74 */\n\t10, /* 75 */\n\t10, /* 76 */\n\t10, /* 77 */\n\t10, /* 78 */\n\t10, /* 79 */\n\t9,  /* 80 */\n\t9,  /* 81 */\n\t10, /* 82 */\n\t10, /* 83 */\n\t10, /* 84 */\n\t10, /* 85 */\n\t10, /* 86 */\n\t10, /* 87 */\n\t10, /* 88 */\n\t9,  /* 89 */\n\t10, /* 90 */\n\t10, /* 91 */\n\t10, /* 92 */\n\t10, /* 93 */\n\t10, /* 94 */\n\t10, /* 95 */\n\t8,  /* 96 */\n\t10, /* 97 */\n\t10, /* 98 */\n\t10, /* 99 */\n\t10, /* 100 */\n\t10, /* 101 */\n\t10, /* 102 */\n\t10, /* 103 */\n\t10, /* 104 */\n\t10, /* 105 */\n\t10, /* 106 */\n\t10, /* 107 */\n\t10, /* 108 */\n\t10, /* 109 */\n\t10, /* 110 */\n\t10, /* 111 */\n\t9,  /* 112 */\n\t10, /* 113 */\n\t10, /* 114 */\n\t10, /* 115 */\n\t10, /* 116 */\n\t10, /* 117 */\n\t10, /* 118 */\n\t10, /* 119 */\n\t9,  /* 120 */\n\t10, /* 121 */\n\t10, /* 122 */\n\t10, /* 123 */\n\t10, /* 124 */\n\t10, /* 125 */\n\t10, /* 126 */\n\t9,  /* 127 */\n\t7,  /* 128 */\n\t9,  /* 129 */\n\t9,  /* 130 */\n\t10, /* 131 */\n\t9,  /* 132 */\n\t10, /* 133 */\n\t10, /* 134 */\n\t10, /* 135 */\n\t9,  /* 136 */\n\t10, /* 137 */\n\t10, /* 138 */\n\t10, /* 139 */\n\t10, /* 140 */\n\t10, /* 141 */\n\t10, /* 142 */\n\t10, /* 143 */\n\t9,  /* 144 */\n\t10, /* 145 */\n\t10, /* 146 */\n\t10, /* 147 */\n\t10, /* 148 */\n\t10, /* 149 */\n\t10, /* 150 */\n\t10, /* 151 */\n\t10, /* 152 */\n\t10, /* 153 */\n\t10, /* 154 */\n\t10, /* 155 */\n\t10, /* 156 */\n\t10, /* 157 */\n\t10, /* 158 */\n\t10, /* 159 */\n\t10, /* 160 */\n\t10, /* 161 */\n\t10, /* 162 */\n\t10, /* 163 */\n\t10, /* 164 */\n\t10, /* 165 */\n\t10, /* 166 */\n\t10, /* 167 */\n\t10, /* 168 */\n\t10, /* 169 */\n\t10, /* 170 */\n\t13, /* 171 */\n\t10, /* 172 */\n\t10, /* 173 */\n\t10, /* 174 */\n\t10, /* 175 */\n\t10, /* 176 */\n\t10, /* 177 */\n\t11, /* 178 */\n\t10, /* 179 */\n\t10, /* 180 */\n\t10, /* 181 */\n\t10, /* 182 */\n\t10, /* 183 */\n\t10, /* 184 */\n\t10, /* 185 */\n\t10, /* 186 */\n\t10, /* 187 */\n\t10, /* 188 */\n\t10, /* 189 */\n\t10, /* 190 */\n\t10, /* 191 */\n\t9,  /* 192 */\n\t10, /* 193 */\n\t10, /* 194 */\n\t10, /* 195 */\n\t10, /* 196 */\n\t10, /* 197 */\n\t9,  /* 198 */\n\t10, /* 199 */\n\t10, /* 200 */\n\t10, /* 201 */\n\t10, /* 202 */\n\t10, /* 203 */\n\t9,  /* 204 */\n\t10, /* 205 */\n\t10, /* 206 */\n\t10, /* 207 */\n\t9,  /* 208 */\n\t10, /* 209 */\n\t10, /* 210 */\n\t10, /* 211 */\n\t10, /* 212 */\n\t10, /* 213 */\n\t10, /* 214 */\n\t10, /* 215 */\n\t10, /* 216 */\n\t10, /* 217 */\n\t10, /* 218 */\n\t10, /* 219 */\n\t10, /* 220 */\n\t10, /* 221 */\n\t10, /* 222 */\n\t10, /* 223 */\n\t9,  /* 224 */\n\t10, /* 225 */\n\t10, /* 226 */\n\t10, /* 227 */\n\t10, /* 228 */\n\t10, /* 229 */\n\t10, /* 230 */\n\t10, /* 231 */\n\t10, /* 232 */\n\t10, /* 233 */\n\t10, /* 234 */\n\t10, /* 235 */\n\t10, /* 236 */\n\t10, /* 237 */\n\t9,  /* 238 */\n\t10, /* 239 */\n\t8,  /* 240 */\n\t9,  /* 241 */\n\t9,  /* 242 */\n\t10, /* 243 */\n\t9,  /* 244 */\n\t10, /* 245 */\n\t10, /* 246 */\n\t10, /* 247 */\n\t9,  /* 248 */\n\t10, /* 249 */\n\t10, /* 250 */\n\t10, /* 251 */\n\t9,  /* 252 */\n\t9,  /* 253 */\n\t8,  /* 254 */\n\t7,  /* 255 */\n\t13, /* 256 */\n\t13, /* 257 */\n\t7,  /* 258 */\n\t7,  /* 259 */\n\t10, /* 260 */\n\t7,  /* 261 */\n\t7,  /* 262 */\n\t6,  /* 263 */\n\t6,  /* 264 */\n\t6,  /* 265 */\n\t6,  /* 266 */\n\t5,  /* 267 */\n\t6,  /* 268 */\n\t6,  /* 269 */\n\t6,  /* 270 */\n\t5,  /* 271 */\n\t6,  /* 272 */\n\t5,  /* 273 */\n\t6,  /* 274 */\n\t6,  /* 275 */\n\t6,  /* 276 */\n\t6,  /* 277 */\n\t6,  /* 278 */\n\t6,  /* 279 */\n\t6,  /* 280 */\n\t6,  /* 281 */\n\t6,  /* 282 */\n\t6,  /* 283 */\n\t6,  /* 284 */\n\t6,  /* 285 */\n\t6,  /* 286 */\n\t6,  /* 287 */\n\t8,  /* 288 */\n\t5,  /* 289 */\n\t6,  /* 290 */\n\t7,  /* 291 */\n\t7,  /* 292 */\n\t13  /* 293 */\n};\n\nstatic const BYTE HuffCodeLEC[588] = {\n\t0x04, /* 0 */\n\t0x00, /* 1 */\n\t0x24, /* 2 */\n\t0x00, /* 3 */\n\t0x14, /* 4 */\n\t0x00, /* 5 */\n\t0x11, /* 6 */\n\t0x00, /* 7 */\n\t0x51, /* 8 */\n\t0x00, /* 9 */\n\t0x31, /* 10 */\n\t0x00, /* 11 */\n\t0x71, /* 12 */\n\t0x00, /* 13 */\n\t0x09, /* 14 */\n\t0x00, /* 15 */\n\t0x49, /* 16 */\n\t0x00, /* 17 */\n\t0x29, /* 18 */\n\t0x00, /* 19 */\n\t0x69, /* 20 */\n\t0x00, /* 21 */\n\t0x15, /* 22 */\n\t0x00, /* 23 */\n\t0x95, /* 24 */\n\t0x00, /* 25 */\n\t0x55, /* 26 */\n\t0x00, /* 27 */\n\t0xD5, /* 28 */\n\t0x00, /* 29 */\n\t0x35, /* 30 */\n\t0x00, /* 31 */\n\t0xB5, /* 32 */\n\t0x00, /* 33 */\n\t0x75, /* 34 */\n\t0x00, /* 35 */\n\t0x1D, /* 36 */\n\t0x00, /* 37 */\n\t0xF5, /* 38 */\n\t0x00, /* 39 */\n\t0x1D, /* 40 */\n\t0x01, /* 41 */\n\t0x9D, /* 42 */\n\t0x00, /* 43 */\n\t0x9D, /* 44 */\n\t0x01, /* 45 */\n\t0x5D, /* 46 */\n\t0x00, /* 47 */\n\t0x0D, /* 48 */\n\t0x00, /* 49 */\n\t0x8D, /* 50 */\n\t0x00, /* 51 */\n\t0x5D, /* 52 */\n\t0x01, /* 53 */\n\t0xDD, /* 54 */\n\t0x00, /* 55 */\n\t0xDD, /* 56 */\n\t0x01, /* 57 */\n\t0x3D, /* 58 */\n\t0x00, /* 59 */\n\t0x3D, /* 60 */\n\t0x01, /* 61 */\n\t0xBD, /* 62 */\n\t0x00, /* 63 */\n\t0x4D, /* 64 */\n\t0x00, /* 65 */\n\t0xBD, /* 66 */\n\t0x01, /* 67 */\n\t0x7D, /* 68 */\n\t0x00, /* 69 */\n\t0x6B, /* 70 */\n\t0x00, /* 71 */\n\t0x7D, /* 72 */\n\t0x01, /* 73 */\n\t0xFD, /* 74 */\n\t0x00, /* 75 */\n\t0xFD, /* 76 */\n\t0x01, /* 77 */\n\t0x03, /* 78 */\n\t0x00, /* 79 */\n\t0x03, /* 80 */\n\t0x01, /* 81 */\n\t0x83, /* 82 */\n\t0x00, /* 83 */\n\t0x83, /* 84 */\n\t0x01, /* 85 */\n\t0x6B, /* 86 */\n\t0x02, /* 87 */\n\t0x43, /* 88 */\n\t0x00, /* 89 */\n\t0x6B, /* 90 */\n\t0x01, /* 91 */\n\t0x6B, /* 92 */\n\t0x03, /* 93 */\n\t0xEB, /* 94 */\n\t0x00, /* 95 */\n\t0x43, /* 96 */\n\t0x01, /* 97 */\n\t0xC3, /* 98 */\n\t0x00, /* 99 */\n\t0xEB, /* 100 */\n\t0x02, /* 101 */\n\t0xC3, /* 102 */\n\t0x01, /* 103 */\n\t0xEB, /* 104 */\n\t0x01, /* 105 */\n\t0x23, /* 106 */\n\t0x00, /* 107 */\n\t0xEB, /* 108 */\n\t0x03, /* 109 */\n\t0x23, /* 110 */\n\t0x01, /* 111 */\n\t0xA3, /* 112 */\n\t0x00, /* 113 */\n\t0xA3, /* 114 */\n\t0x01, /* 115 */\n\t0x1B, /* 116 */\n\t0x00, /* 117 */\n\t0x1B, /* 118 */\n\t0x02, /* 119 */\n\t0x63, /* 120 */\n\t0x00, /* 121 */\n\t0x1B, /* 122 */\n\t0x01, /* 123 */\n\t0x63, /* 124 */\n\t0x01, /* 125 */\n\t0xE3, /* 126 */\n\t0x00, /* 127 */\n\t0xCD, /* 128 */\n\t0x00, /* 129 */\n\t0xE3, /* 130 */\n\t0x01, /* 131 */\n\t0x13, /* 132 */\n\t0x00, /* 133 */\n\t0x13, /* 134 */\n\t0x01, /* 135 */\n\t0x93, /* 136 */\n\t0x00, /* 137 */\n\t0x1B, /* 138 */\n\t0x03, /* 139 */\n\t0x9B, /* 140 */\n\t0x00, /* 141 */\n\t0x9B, /* 142 */\n\t0x02, /* 143 */\n\t0x93, /* 144 */\n\t0x01, /* 145 */\n\t0x53, /* 146 */\n\t0x00, /* 147 */\n\t0x9B, /* 148 */\n\t0x01, /* 149 */\n\t0x9B, /* 150 */\n\t0x03, /* 151 */\n\t0x5B, /* 152 */\n\t0x00, /* 153 */\n\t0x5B, /* 154 */\n\t0x02, /* 155 */\n\t0x5B, /* 156 */\n\t0x01, /* 157 */\n\t0x5B, /* 158 */\n\t0x03, /* 159 */\n\t0x53, /* 160 */\n\t0x01, /* 161 */\n\t0xD3, /* 162 */\n\t0x00, /* 163 */\n\t0xDB, /* 164 */\n\t0x00, /* 165 */\n\t0xDB, /* 166 */\n\t0x02, /* 167 */\n\t0xDB, /* 168 */\n\t0x01, /* 169 */\n\t0xDB, /* 170 */\n\t0x03, /* 171 */\n\t0x3B, /* 172 */\n\t0x00, /* 173 */\n\t0x3B, /* 174 */\n\t0x02, /* 175 */\n\t0x3B, /* 176 */\n\t0x01, /* 177 */\n\t0xD3, /* 178 */\n\t0x01, /* 179 */\n\t0x3B, /* 180 */\n\t0x03, /* 181 */\n\t0xBB, /* 182 */\n\t0x00, /* 183 */\n\t0xBB, /* 184 */\n\t0x02, /* 185 */\n\t0xBB, /* 186 */\n\t0x01, /* 187 */\n\t0xBB, /* 188 */\n\t0x03, /* 189 */\n\t0x7B, /* 190 */\n\t0x00, /* 191 */\n\t0x2D, /* 192 */\n\t0x00, /* 193 */\n\t0x7B, /* 194 */\n\t0x02, /* 195 */\n\t0x7B, /* 196 */\n\t0x01, /* 197 */\n\t0x7B, /* 198 */\n\t0x03, /* 199 */\n\t0xFB, /* 200 */\n\t0x00, /* 201 */\n\t0xFB, /* 202 */\n\t0x02, /* 203 */\n\t0xFB, /* 204 */\n\t0x01, /* 205 */\n\t0xFB, /* 206 */\n\t0x03, /* 207 */\n\t0x07, /* 208 */\n\t0x00, /* 209 */\n\t0x07, /* 210 */\n\t0x02, /* 211 */\n\t0x07, /* 212 */\n\t0x01, /* 213 */\n\t0x07, /* 214 */\n\t0x03, /* 215 */\n\t0x87, /* 216 */\n\t0x00, /* 217 */\n\t0x87, /* 218 */\n\t0x02, /* 219 */\n\t0x87, /* 220 */\n\t0x01, /* 221 */\n\t0x87, /* 222 */\n\t0x03, /* 223 */\n\t0x33, /* 224 */\n\t0x00, /* 225 */\n\t0x47, /* 226 */\n\t0x00, /* 227 */\n\t0x47, /* 228 */\n\t0x02, /* 229 */\n\t0x47, /* 230 */\n\t0x01, /* 231 */\n\t0x47, /* 232 */\n\t0x03, /* 233 */\n\t0xC7, /* 234 */\n\t0x00, /* 235 */\n\t0xC7, /* 236 */\n\t0x02, /* 237 */\n\t0xC7, /* 238 */\n\t0x01, /* 239 */\n\t0x33, /* 240 */\n\t0x01, /* 241 */\n\t0xC7, /* 242 */\n\t0x03, /* 243 */\n\t0x27, /* 244 */\n\t0x00, /* 245 */\n\t0x27, /* 246 */\n\t0x02, /* 247 */\n\t0x27, /* 248 */\n\t0x01, /* 249 */\n\t0x27, /* 250 */\n\t0x03, /* 251 */\n\t0xA7, /* 252 */\n\t0x00, /* 253 */\n\t0xB3, /* 254 */\n\t0x00, /* 255 */\n\t0x19, /* 256 */\n\t0x00, /* 257 */\n\t0xB3, /* 258 */\n\t0x01, /* 259 */\n\t0x73, /* 260 */\n\t0x00, /* 261 */\n\t0xA7, /* 262 */\n\t0x02, /* 263 */\n\t0x73, /* 264 */\n\t0x01, /* 265 */\n\t0xA7, /* 266 */\n\t0x01, /* 267 */\n\t0xA7, /* 268 */\n\t0x03, /* 269 */\n\t0x67, /* 270 */\n\t0x00, /* 271 */\n\t0xF3, /* 272 */\n\t0x00, /* 273 */\n\t0x67, /* 274 */\n\t0x02, /* 275 */\n\t0x67, /* 276 */\n\t0x01, /* 277 */\n\t0x67, /* 278 */\n\t0x03, /* 279 */\n\t0xE7, /* 280 */\n\t0x00, /* 281 */\n\t0xE7, /* 282 */\n\t0x02, /* 283 */\n\t0xE7, /* 284 */\n\t0x01, /* 285 */\n\t0xE7, /* 286 */\n\t0x03, /* 287 */\n\t0xF3, /* 288 */\n\t0x01, /* 289 */\n\t0x17, /* 290 */\n\t0x00, /* 291 */\n\t0x17, /* 292 */\n\t0x02, /* 293 */\n\t0x17, /* 294 */\n\t0x01, /* 295 */\n\t0x17, /* 296 */\n\t0x03, /* 297 */\n\t0x97, /* 298 */\n\t0x00, /* 299 */\n\t0x97, /* 300 */\n\t0x02, /* 301 */\n\t0x97, /* 302 */\n\t0x01, /* 303 */\n\t0x97, /* 304 */\n\t0x03, /* 305 */\n\t0x57, /* 306 */\n\t0x00, /* 307 */\n\t0x57, /* 308 */\n\t0x02, /* 309 */\n\t0x57, /* 310 */\n\t0x01, /* 311 */\n\t0x57, /* 312 */\n\t0x03, /* 313 */\n\t0xD7, /* 314 */\n\t0x00, /* 315 */\n\t0xD7, /* 316 */\n\t0x02, /* 317 */\n\t0xD7, /* 318 */\n\t0x01, /* 319 */\n\t0xD7, /* 320 */\n\t0x03, /* 321 */\n\t0x37, /* 322 */\n\t0x00, /* 323 */\n\t0x37, /* 324 */\n\t0x02, /* 325 */\n\t0x37, /* 326 */\n\t0x01, /* 327 */\n\t0x37, /* 328 */\n\t0x03, /* 329 */\n\t0xB7, /* 330 */\n\t0x00, /* 331 */\n\t0xB7, /* 332 */\n\t0x02, /* 333 */\n\t0xB7, /* 334 */\n\t0x01, /* 335 */\n\t0xB7, /* 336 */\n\t0x03, /* 337 */\n\t0x77, /* 338 */\n\t0x00, /* 339 */\n\t0x77, /* 340 */\n\t0x02, /* 341 */\n\t0xFF, /* 342 */\n\t0x07, /* 343 */\n\t0x77, /* 344 */\n\t0x01, /* 345 */\n\t0x77, /* 346 */\n\t0x03, /* 347 */\n\t0xF7, /* 348 */\n\t0x00, /* 349 */\n\t0xF7, /* 350 */\n\t0x02, /* 351 */\n\t0xF7, /* 352 */\n\t0x01, /* 353 */\n\t0xF7, /* 354 */\n\t0x03, /* 355 */\n\t0xFF, /* 356 */\n\t0x03, /* 357 */\n\t0x0F, /* 358 */\n\t0x00, /* 359 */\n\t0x0F, /* 360 */\n\t0x02, /* 361 */\n\t0x0F, /* 362 */\n\t0x01, /* 363 */\n\t0x0F, /* 364 */\n\t0x03, /* 365 */\n\t0x8F, /* 366 */\n\t0x00, /* 367 */\n\t0x8F, /* 368 */\n\t0x02, /* 369 */\n\t0x8F, /* 370 */\n\t0x01, /* 371 */\n\t0x8F, /* 372 */\n\t0x03, /* 373 */\n\t0x4F, /* 374 */\n\t0x00, /* 375 */\n\t0x4F, /* 376 */\n\t0x02, /* 377 */\n\t0x4F, /* 378 */\n\t0x01, /* 379 */\n\t0x4F, /* 380 */\n\t0x03, /* 381 */\n\t0xCF, /* 382 */\n\t0x00, /* 383 */\n\t0x0B, /* 384 */\n\t0x00, /* 385 */\n\t0xCF, /* 386 */\n\t0x02, /* 387 */\n\t0xCF, /* 388 */\n\t0x01, /* 389 */\n\t0xCF, /* 390 */\n\t0x03, /* 391 */\n\t0x2F, /* 392 */\n\t0x00, /* 393 */\n\t0x2F, /* 394 */\n\t0x02, /* 395 */\n\t0x0B, /* 396 */\n\t0x01, /* 397 */\n\t0x2F, /* 398 */\n\t0x01, /* 399 */\n\t0x2F, /* 400 */\n\t0x03, /* 401 */\n\t0xAF, /* 402 */\n\t0x00, /* 403 */\n\t0xAF, /* 404 */\n\t0x02, /* 405 */\n\t0xAF, /* 406 */\n\t0x01, /* 407 */\n\t0x8B, /* 408 */\n\t0x00, /* 409 */\n\t0xAF, /* 410 */\n\t0x03, /* 411 */\n\t0x6F, /* 412 */\n\t0x00, /* 413 */\n\t0x6F, /* 414 */\n\t0x02, /* 415 */\n\t0x8B, /* 416 */\n\t0x01, /* 417 */\n\t0x6F, /* 418 */\n\t0x01, /* 419 */\n\t0x6F, /* 420 */\n\t0x03, /* 421 */\n\t0xEF, /* 422 */\n\t0x00, /* 423 */\n\t0xEF, /* 424 */\n\t0x02, /* 425 */\n\t0xEF, /* 426 */\n\t0x01, /* 427 */\n\t0xEF, /* 428 */\n\t0x03, /* 429 */\n\t0x1F, /* 430 */\n\t0x00, /* 431 */\n\t0x1F, /* 432 */\n\t0x02, /* 433 */\n\t0x1F, /* 434 */\n\t0x01, /* 435 */\n\t0x1F, /* 436 */\n\t0x03, /* 437 */\n\t0x9F, /* 438 */\n\t0x00, /* 439 */\n\t0x9F, /* 440 */\n\t0x02, /* 441 */\n\t0x9F, /* 442 */\n\t0x01, /* 443 */\n\t0x9F, /* 444 */\n\t0x03, /* 445 */\n\t0x5F, /* 446 */\n\t0x00, /* 447 */\n\t0x4B, /* 448 */\n\t0x00, /* 449 */\n\t0x5F, /* 450 */\n\t0x02, /* 451 */\n\t0x5F, /* 452 */\n\t0x01, /* 453 */\n\t0x5F, /* 454 */\n\t0x03, /* 455 */\n\t0xDF, /* 456 */\n\t0x00, /* 457 */\n\t0xDF, /* 458 */\n\t0x02, /* 459 */\n\t0xDF, /* 460 */\n\t0x01, /* 461 */\n\t0xDF, /* 462 */\n\t0x03, /* 463 */\n\t0x3F, /* 464 */\n\t0x00, /* 465 */\n\t0x3F, /* 466 */\n\t0x02, /* 467 */\n\t0x3F, /* 468 */\n\t0x01, /* 469 */\n\t0x3F, /* 470 */\n\t0x03, /* 471 */\n\t0xBF, /* 472 */\n\t0x00, /* 473 */\n\t0xBF, /* 474 */\n\t0x02, /* 475 */\n\t0x4B, /* 476 */\n\t0x01, /* 477 */\n\t0xBF, /* 478 */\n\t0x01, /* 479 */\n\t0xAD, /* 480 */\n\t0x00, /* 481 */\n\t0xCB, /* 482 */\n\t0x00, /* 483 */\n\t0xCB, /* 484 */\n\t0x01, /* 485 */\n\t0xBF, /* 486 */\n\t0x03, /* 487 */\n\t0x2B, /* 488 */\n\t0x00, /* 489 */\n\t0x7F, /* 490 */\n\t0x00, /* 491 */\n\t0x7F, /* 492 */\n\t0x02, /* 493 */\n\t0x7F, /* 494 */\n\t0x01, /* 495 */\n\t0x2B, /* 496 */\n\t0x01, /* 497 */\n\t0x7F, /* 498 */\n\t0x03, /* 499 */\n\t0xFF, /* 500 */\n\t0x00, /* 501 */\n\t0xFF, /* 502 */\n\t0x02, /* 503 */\n\t0xAB, /* 504 */\n\t0x00, /* 505 */\n\t0xAB, /* 506 */\n\t0x01, /* 507 */\n\t0x6D, /* 508 */\n\t0x00, /* 509 */\n\t0x59, /* 510 */\n\t0x00, /* 511 */\n\t0xFF, /* 512 */\n\t0x17, /* 513 */\n\t0xFF, /* 514 */\n\t0x0F, /* 515 */\n\t0x39, /* 516 */\n\t0x00, /* 517 */\n\t0x79, /* 518 */\n\t0x00, /* 519 */\n\t0xFF, /* 520 */\n\t0x01, /* 521 */\n\t0x05, /* 522 */\n\t0x00, /* 523 */\n\t0x45, /* 524 */\n\t0x00, /* 525 */\n\t0x34, /* 526 */\n\t0x00, /* 527 */\n\t0x0C, /* 528 */\n\t0x00, /* 529 */\n\t0x2C, /* 530 */\n\t0x00, /* 531 */\n\t0x1C, /* 532 */\n\t0x00, /* 533 */\n\t0x00, /* 534 */\n\t0x00, /* 535 */\n\t0x3C, /* 536 */\n\t0x00, /* 537 */\n\t0x02, /* 538 */\n\t0x00, /* 539 */\n\t0x22, /* 540 */\n\t0x00, /* 541 */\n\t0x10, /* 542 */\n\t0x00, /* 543 */\n\t0x12, /* 544 */\n\t0x00, /* 545 */\n\t0x08, /* 546 */\n\t0x00, /* 547 */\n\t0x32, /* 548 */\n\t0x00, /* 549 */\n\t0x0A, /* 550 */\n\t0x00, /* 551 */\n\t0x2A, /* 552 */\n\t0x00, /* 553 */\n\t0x1A, /* 554 */\n\t0x00, /* 555 */\n\t0x3A, /* 556 */\n\t0x00, /* 557 */\n\t0x06, /* 558 */\n\t0x00, /* 559 */\n\t0x26, /* 560 */\n\t0x00, /* 561 */\n\t0x16, /* 562 */\n\t0x00, /* 563 */\n\t0x36, /* 564 */\n\t0x00, /* 565 */\n\t0x0E, /* 566 */\n\t0x00, /* 567 */\n\t0x2E, /* 568 */\n\t0x00, /* 569 */\n\t0x1E, /* 570 */\n\t0x00, /* 571 */\n\t0x3E, /* 572 */\n\t0x00, /* 573 */\n\t0x01, /* 574 */\n\t0x00, /* 575 */\n\t0xED, /* 576 */\n\t0x00, /* 577 */\n\t0x18, /* 578 */\n\t0x00, /* 579 */\n\t0x21, /* 580 */\n\t0x00, /* 581 */\n\t0x25, /* 582 */\n\t0x00, /* 583 */\n\t0x65, /* 584 */\n\t0x00, /* 585 */\n\t0xFF, /* 586 */\n\t0x1F  /* 587 */\n};\n\nstatic const BYTE HuffLengthLOM[32] = {\n\t4, /* 0 */\n\t2, /* 1 */\n\t3, /* 2 */\n\t4, /* 3 */\n\t3, /* 4 */\n\t4, /* 5 */\n\t4, /* 6 */\n\t5, /* 7 */\n\t4, /* 8 */\n\t5, /* 9 */\n\t5, /* 10 */\n\t6, /* 11 */\n\t6, /* 12 */\n\t7, /* 13 */\n\t7, /* 14 */\n\t8, /* 15 */\n\t7, /* 16 */\n\t8, /* 17 */\n\t8, /* 18 */\n\t9, /* 19 */\n\t9, /* 20 */\n\t8, /* 21 */\n\t9, /* 22 */\n\t9, /* 23 */\n\t9, /* 24 */\n\t9, /* 25 */\n\t9, /* 26 */\n\t9, /* 27 */\n\t9, /* 28 */\n\t9, /* 29 */\n\t9, /* 30 */\n\t9  /* 31 */\n};\n\nstatic const UINT16 HuffCodeLOM[32] = {\n\t0x0001, /* 0 */\n\t0x0000, /* 1 */\n\t0x0002, /* 2 */\n\t0x0009, /* 3 */\n\t0x0006, /* 4 */\n\t0x0005, /* 5 */\n\t0x000D, /* 6 */\n\t0x000B, /* 7 */\n\t0x0003, /* 8 */\n\t0x001B, /* 9 */\n\t0x0007, /* 10 */\n\t0x0017, /* 11 */\n\t0x0037, /* 12 */\n\t0x000F, /* 13 */\n\t0x004F, /* 14 */\n\t0x006F, /* 15 */\n\t0x002F, /* 16 */\n\t0x00EF, /* 17 */\n\t0x001F, /* 18 */\n\t0x005F, /* 19 */\n\t0x015F, /* 20 */\n\t0x009F, /* 21 */\n\t0x00DF, /* 22 */\n\t0x01DF, /* 23 */\n\t0x003F, /* 24 */\n\t0x013F, /* 25 */\n\t0x00BF, /* 26 */\n\t0x01BF, /* 27 */\n\t0x007F, /* 28 */\n\t0x017F, /* 29 */\n\t0x00FF, /* 30 */\n\t0x01FF  /* 31 */\n};\n\nstatic const UINT32 CopyOffsetBitsLUT[32] = {\n\t0x0, /* 0 */\n\t0x0, /* 1 */\n\t0x0, /* 2 */\n\t0x0, /* 3 */\n\t0x1, /* 4 */\n\t0x1, /* 5 */\n\t0x2, /* 6 */\n\t0x2, /* 7 */\n\t0x3, /* 8 */\n\t0x3, /* 9 */\n\t0x4, /* 10 */\n\t0x4, /* 11 */\n\t0x5, /* 12 */\n\t0x5, /* 13 */\n\t0x6, /* 14 */\n\t0x6, /* 15 */\n\t0x7, /* 16 */\n\t0x7, /* 17 */\n\t0x8, /* 18 */\n\t0x8, /* 19 */\n\t0x9, /* 20 */\n\t0x9, /* 21 */\n\t0xA, /* 22 */\n\t0xA, /* 23 */\n\t0xB, /* 24 */\n\t0xB, /* 25 */\n\t0xC, /* 26 */\n\t0xC, /* 27 */\n\t0xD, /* 28 */\n\t0xD, /* 29 */\n\t0xE, /* 30 */\n\t0xE  /* 31 */\n};\n\nstatic const UINT32 CopyOffsetBaseLUT[32] = {\n\t0x1,    /* 0 */\n\t0x2,    /* 1 */\n\t0x3,    /* 2 */\n\t0x4,    /* 3 */\n\t0x5,    /* 4 */\n\t0x7,    /* 5 */\n\t0x9,    /* 6 */\n\t0xD,    /* 7 */\n\t0x11,   /* 8 */\n\t0x19,   /* 9 */\n\t0x21,   /* 10 */\n\t0x31,   /* 11 */\n\t0x41,   /* 12 */\n\t0x61,   /* 13 */\n\t0x81,   /* 14 */\n\t0xC1,   /* 15 */\n\t0x101,  /* 16 */\n\t0x181,  /* 17 */\n\t0x201,  /* 18 */\n\t0x301,  /* 19 */\n\t0x401,  /* 20 */\n\t0x601,  /* 21 */\n\t0x801,  /* 22 */\n\t0xC01,  /* 23 */\n\t0x1001, /* 24 */\n\t0x1801, /* 25 */\n\t0x2001, /* 26 */\n\t0x3001, /* 27 */\n\t0x4001, /* 28 */\n\t0x6001, /* 29 */\n\t0x8001, /* 30 */\n\t0xC001  /* 31 */\n};\n\nstatic const UINT32 LOMBitsLUT[30] = {\n\t0x0, /* 0 */\n\t0x0, /* 1 */\n\t0x0, /* 2 */\n\t0x0, /* 3 */\n\t0x0, /* 4 */\n\t0x0, /* 5 */\n\t0x0, /* 6 */\n\t0x0, /* 7 */\n\t0x1, /* 8 */\n\t0x1, /* 9 */\n\t0x1, /* 10 */\n\t0x1, /* 11 */\n\t0x2, /* 12 */\n\t0x2, /* 13 */\n\t0x2, /* 14 */\n\t0x2, /* 15 */\n\t0x3, /* 16 */\n\t0x3, /* 17 */\n\t0x3, /* 18 */\n\t0x3, /* 19 */\n\t0x4, /* 20 */\n\t0x4, /* 21 */\n\t0x4, /* 22 */\n\t0x4, /* 23 */\n\t0x6, /* 24 */\n\t0x6, /* 25 */\n\t0x8, /* 26 */\n\t0x8, /* 27 */\n\t0xE, /* 28 */\n\t0xE  /* 29 */\n};\n\nstatic const UINT32 LOMBaseLUT[30] = {\n\t0x2,   /* 0 */\n\t0x3,   /* 1 */\n\t0x4,   /* 2 */\n\t0x5,   /* 3 */\n\t0x6,   /* 4 */\n\t0x7,   /* 5 */\n\t0x8,   /* 6 */\n\t0x9,   /* 7 */\n\t0xA,   /* 8 */\n\t0xC,   /* 9 */\n\t0xE,   /* 10 */\n\t0x10,  /* 11 */\n\t0x12,  /* 12 */\n\t0x16,  /* 13 */\n\t0x1A,  /* 14 */\n\t0x1E,  /* 15 */\n\t0x22,  /* 16 */\n\t0x2A,  /* 17 */\n\t0x32,  /* 18 */\n\t0x3A,  /* 19 */\n\t0x42,  /* 20 */\n\t0x52,  /* 21 */\n\t0x62,  /* 22 */\n\t0x72,  /* 23 */\n\t0x82,  /* 24 */\n\t0xC2,  /* 25 */\n\t0x102, /* 26 */\n\t0x202, /* 27 */\n\t0x2,   /* 28 */\n\t0x2    /* 29 */\n};\n\nstatic INLINE UINT16 get_word(const BYTE* data)\n{\n\tUINT16 tmp = 0;\n\n\tWINPR_ASSERT(data);\n\ttmp = *data++;\n\ttmp |= *data << 8;\n\treturn tmp;\n}\n\nstatic INLINE UINT32 get_dword(const BYTE* data)\n{\n\tUINT32 tmp;\n\tWINPR_ASSERT(data);\n\ttmp = *data++;\n\ttmp |= (UINT32)*data++ << 8U;\n\ttmp |= (UINT32)*data++ << 16U;\n\ttmp |= (UINT32)*data++ << 24U;\n\treturn tmp;\n}\n\nstatic INLINE BOOL NCrushFetchBits(const BYTE** SrcPtr, const BYTE** SrcEnd, INT32* nbits,\n                                   UINT32* bits)\n{\n\tWINPR_ASSERT(SrcPtr);\n\tWINPR_ASSERT(SrcEnd);\n\tWINPR_ASSERT(nbits);\n\tWINPR_ASSERT(bits);\n\n\tif (*nbits < 16)\n\t{\n\t\tif ((*SrcPtr + 1) >= *SrcEnd)\n\t\t{\n\t\t\tif (*SrcPtr >= *SrcEnd)\n\t\t\t{\n\t\t\t\tif (*nbits < 0)\n\t\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t*bits += *(*SrcPtr)++ << *nbits;\n\t\t\t\t*nbits += 8;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUINT16 tmp = *(*SrcPtr)++;\n\t\t\ttmp |= (*(*SrcPtr)++) << 8;\n\t\t\t*bits += tmp << *nbits;\n\t\t\t*nbits += 16;\n\t\t}\n\t}\n\n\treturn TRUE;\n}\n\nstatic INLINE void NCrushWriteStart(UINT32* bits, UINT32* offset, UINT32* accumulator)\n{\n\tWINPR_ASSERT(bits);\n\tWINPR_ASSERT(offset);\n\tWINPR_ASSERT(accumulator);\n\n\t*bits = 0;\n\t*offset = 0;\n\t*accumulator = 0;\n}\n\nstatic INLINE void NCrushWriteBits(BYTE** DstPtr, UINT32* accumulator, UINT32* offset, UINT32 _bits,\n                                   UINT32 _nbits)\n{\n\tWINPR_ASSERT(DstPtr);\n\tWINPR_ASSERT(accumulator);\n\tWINPR_ASSERT(offset);\n\n\t*accumulator |= _bits << *offset;\n\t*offset += _nbits;\n\n\tif (*offset >= 16)\n\t{\n\t\t*(*DstPtr)++ = (*accumulator & 0xFF);\n\t\t*(*DstPtr)++ = ((*accumulator >> 8) & 0xFF);\n\t\t*accumulator >>= 16;\n\t\t*offset -= 16;\n\t}\n}\n\nstatic INLINE void NCrushWriteFinish(BYTE** DstPtr, UINT32 accumulator)\n{\n\tWINPR_ASSERT(DstPtr);\n\n\t*(*DstPtr)++ = accumulator & 0xFF;\n\t*(*DstPtr)++ = (accumulator >> 8) & 0xFF;\n}\n\nint ncrush_decompress(NCRUSH_CONTEXT* ncrush, const BYTE* pSrcData, UINT32 SrcSize,\n                      const BYTE** ppDstData, UINT32* pDstSize, UINT32 flags)\n{\n\tUINT32 index;\n\tBYTE Literal;\n\tUINT32 IndexLEC;\n\tUINT32 BitLength;\n\tUINT32 CopyOffset;\n\tUINT32 CopyLength;\n\tUINT32 OldCopyOffset;\n\tBYTE* CopyOffsetPtr;\n\tUINT32 LengthOfMatch;\n\tUINT32 CopyOffsetIndex;\n\tUINT32 OffsetCacheIndex;\n\tUINT32 CopyOffsetBits;\n\tUINT32 CopyOffsetBase;\n\tUINT32 LengthOfMatchBits;\n\tUINT32 LengthOfMatchBase;\n\n\tWINPR_ASSERT(ncrush);\n\tWINPR_ASSERT(pSrcData);\n\tWINPR_ASSERT(ppDstData);\n\tWINPR_ASSERT(pDstSize);\n\n\tif (ncrush->HistoryEndOffset != 65535)\n\t\treturn -1001;\n\n\tBYTE* HistoryBuffer = ncrush->HistoryBuffer;\n\tconst BYTE* HistoryBufferEnd = &HistoryBuffer[ncrush->HistoryEndOffset];\n\n\tif (flags & PACKET_AT_FRONT)\n\t{\n\t\tif ((ncrush->HistoryPtr - 32768) <= HistoryBuffer)\n\t\t\treturn -1002;\n\n\t\tMoveMemory(HistoryBuffer, (ncrush->HistoryPtr - 32768), 32768);\n\t\tncrush->HistoryPtr = &(HistoryBuffer[32768]);\n\t\tZeroMemory(&HistoryBuffer[32768], 32768);\n\t}\n\n\tif (flags & PACKET_FLUSHED)\n\t{\n\t\tncrush->HistoryPtr = HistoryBuffer;\n\t\tZeroMemory(HistoryBuffer, sizeof(ncrush->HistoryBuffer));\n\t\tZeroMemory(&(ncrush->OffsetCache), sizeof(ncrush->OffsetCache));\n\t}\n\n\tBYTE* HistoryPtr = ncrush->HistoryPtr;\n\n\tif (!(flags & PACKET_COMPRESSED))\n\t{\n\t\t*ppDstData = pSrcData;\n\t\t*pDstSize = SrcSize;\n\t\treturn 1;\n\t}\n\n\tconst BYTE* SrcEnd = &pSrcData[SrcSize];\n\tconst BYTE* SrcPtr = pSrcData + 4;\n\n\tINT32 nbits = 32;\n\tUINT32 bits = get_dword(pSrcData);\n\twhile (1)\n\t{\n\t\twhile (1)\n\t\t{\n\t\t\tconst UINT16 Mask = get_word(&HuffTableMask[29]);\n\t\t\tconst UINT32 MaskedBits = bits & Mask;\n\t\t\tif (MaskedBits >= ARRAYSIZE(HuffTableLEC))\n\t\t\t\treturn -1;\n\t\t\tIndexLEC = HuffTableLEC[MaskedBits] & 0xFFF;\n\t\t\tBitLength = HuffTableLEC[MaskedBits] >> 12;\n\t\t\tbits >>= BitLength;\n\t\t\tnbits -= BitLength;\n\n\t\t\tif (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))\n\t\t\t\treturn -1;\n\n\t\t\tif (IndexLEC >= 256)\n\t\t\t\tbreak;\n\n\t\t\tif (HistoryPtr >= HistoryBufferEnd)\n\t\t\t{\n\t\t\t\tWLog_ERR(TAG, \"ncrush_decompress error: HistoryPtr (%p) >= HistoryBufferEnd (%p)\",\n\t\t\t\t         (void*)HistoryPtr, (void*)HistoryBufferEnd);\n\t\t\t\treturn -1003;\n\t\t\t}\n\n\t\t\tLiteral = (HuffTableLEC[MaskedBits] & 0xFF);\n\t\t\t*HistoryPtr++ = Literal;\n\t\t}\n\n\t\tif (IndexLEC == 256)\n\t\t\tbreak; /* EOS */\n\n\t\tCopyOffsetIndex = IndexLEC - 257;\n\n\t\tif (CopyOffsetIndex >= 32)\n\t\t{\n\t\t\tOffsetCacheIndex = IndexLEC - 289;\n\n\t\t\tif (OffsetCacheIndex >= 4)\n\t\t\t\treturn -1004;\n\n\t\t\tCopyOffset = ncrush->OffsetCache[OffsetCacheIndex];\n\t\t\tconst UINT16 Mask = get_word(&HuffTableMask[21]);\n\t\t\tconst UINT32 MaskedBits = bits & Mask;\n\t\t\tif (MaskedBits > ARRAYSIZE(HuffTableLOM))\n\t\t\t\treturn -1;\n\t\t\tLengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;\n\t\t\tBitLength = HuffTableLOM[MaskedBits] >> 12;\n\t\t\tbits >>= BitLength;\n\t\t\tnbits -= BitLength;\n\n\t\t\tif (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))\n\t\t\t\treturn -1;\n\n\t\t\tif (LengthOfMatch >= ARRAYSIZE(LOMBitsLUT))\n\t\t\t\treturn -1;\n\n\t\t\tLengthOfMatchBits = LOMBitsLUT[LengthOfMatch];\n\n\t\t\tif (LengthOfMatch >= ARRAYSIZE(LOMBaseLUT))\n\t\t\t\treturn -1;\n\t\t\tLengthOfMatchBase = LOMBaseLUT[LengthOfMatch];\n\n\t\t\tif (LengthOfMatchBits)\n\t\t\t{\n\t\t\t\tconst size_t idx = (2ull * LengthOfMatchBits) + 3ull;\n\t\t\t\tif (idx >= ARRAYSIZE(HuffTableMask))\n\t\t\t\t\treturn -1;\n\n\t\t\t\tconst UINT16 Mask = get_word(&HuffTableMask[idx]);\n\t\t\t\tconst UINT32 MaskedBits = bits & Mask;\n\t\t\t\tbits >>= LengthOfMatchBits;\n\t\t\t\tnbits -= LengthOfMatchBits;\n\t\t\t\tLengthOfMatchBase += MaskedBits;\n\n\t\t\t\tif (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))\n\t\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tOldCopyOffset = ncrush->OffsetCache[OffsetCacheIndex];\n\t\t\tncrush->OffsetCache[OffsetCacheIndex] = ncrush->OffsetCache[0];\n\t\t\tncrush->OffsetCache[0] = OldCopyOffset;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (CopyOffsetIndex >= ARRAYSIZE(CopyOffsetBitsLUT))\n\t\t\t\treturn -1;\n\n\t\t\tCopyOffsetBits = CopyOffsetBitsLUT[CopyOffsetIndex];\n\n\t\t\tif (CopyOffsetIndex >= ARRAYSIZE(CopyOffsetBaseLUT))\n\t\t\t\treturn -1;\n\t\t\tCopyOffsetBase = CopyOffsetBaseLUT[CopyOffsetIndex];\n\t\t\tCopyOffset = CopyOffsetBase - 1;\n\n\t\t\tif (CopyOffsetBits)\n\t\t\t{\n\t\t\t\tconst size_t idx = (2ull * CopyOffsetBits) + 3ull;\n\t\t\t\tif (idx >= ARRAYSIZE(HuffTableMask))\n\t\t\t\t\treturn -1;\n\n\t\t\t\tconst UINT16 Mask = get_word(&HuffTableMask[idx]);\n\t\t\t\tconst UINT32 MaskedBits = bits & Mask;\n\t\t\t\tconst UINT32 tmp = CopyOffsetBase + MaskedBits;\n\t\t\t\tif (tmp < 1)\n\t\t\t\t\treturn -1;\n\t\t\t\tCopyOffset = tmp - 1;\n\t\t\t\tbits >>= CopyOffsetBits;\n\t\t\t\tnbits -= CopyOffsetBits;\n\n\t\t\t\tif (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))\n\t\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tconst UINT16 Mask = get_word(&HuffTableMask[21]);\n\t\t\tconst UINT32 MaskedBits = bits & Mask;\n\t\t\tif (MaskedBits >= ARRAYSIZE(HuffTableLOM))\n\t\t\t\treturn -1;\n\n\t\t\tLengthOfMatch = HuffTableLOM[MaskedBits] & 0xFFF;\n\t\t\tBitLength = HuffTableLOM[MaskedBits] >> 12;\n\t\t\tbits >>= BitLength;\n\t\t\tnbits -= BitLength;\n\n\t\t\tif (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))\n\t\t\t\treturn -1;\n\n\t\t\tif (LengthOfMatch >= ARRAYSIZE(LOMBitsLUT))\n\t\t\t\treturn -1;\n\n\t\t\tLengthOfMatchBits = LOMBitsLUT[LengthOfMatch];\n\n\t\t\tif (LengthOfMatch >= ARRAYSIZE(LOMBaseLUT))\n\t\t\t\treturn -1;\n\t\t\tLengthOfMatchBase = LOMBaseLUT[LengthOfMatch];\n\n\t\t\tif (LengthOfMatchBits)\n\t\t\t{\n\t\t\t\tconst size_t idx = (2ull * LengthOfMatchBits) + 3ull;\n\t\t\t\tif (idx >= ARRAYSIZE(HuffTableMask))\n\t\t\t\t\treturn -1;\n\n\t\t\t\tconst UINT16 Mask = get_word(&HuffTableMask[idx]);\n\t\t\t\tconst UINT32 MaskedBits = bits & Mask;\n\t\t\t\tbits >>= LengthOfMatchBits;\n\t\t\t\tnbits -= LengthOfMatchBits;\n\t\t\t\tLengthOfMatchBase += MaskedBits;\n\n\t\t\t\tif (!NCrushFetchBits(&SrcPtr, &SrcEnd, &nbits, &bits))\n\t\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tncrush->OffsetCache[3] = ncrush->OffsetCache[2];\n\t\t\tncrush->OffsetCache[2] = ncrush->OffsetCache[1];\n\t\t\tncrush->OffsetCache[1] = ncrush->OffsetCache[0];\n\t\t\tncrush->OffsetCache[0] = CopyOffset;\n\t\t}\n\n\t\tCopyOffsetPtr = &HistoryBuffer[(HistoryPtr - HistoryBuffer - CopyOffset) & 0xFFFF];\n\t\tLengthOfMatch = LengthOfMatchBase;\n\n\t\tif (LengthOfMatch < 2)\n\t\t\treturn -1005;\n\n\t\tif ((CopyOffsetPtr >= (HistoryBufferEnd - LengthOfMatch)) ||\n\t\t    (HistoryPtr >= (HistoryBufferEnd - LengthOfMatch)))\n\t\t\treturn -1006;\n\n\t\tCopyOffsetPtr = HistoryPtr - CopyOffset;\n\t\tindex = 0;\n\t\tCopyLength = (LengthOfMatch > CopyOffset) ? CopyOffset : LengthOfMatch;\n\n\t\tif (CopyOffsetPtr >= HistoryBuffer)\n\t\t{\n\t\t\twhile (CopyLength > 0)\n\t\t\t{\n\t\t\t\t*HistoryPtr++ = *CopyOffsetPtr++;\n\t\t\t\tCopyLength--;\n\t\t\t}\n\n\t\t\twhile (LengthOfMatch > CopyOffset)\n\t\t\t{\n\t\t\t\tindex = ((index >= CopyOffset)) ? 0 : index;\n\t\t\t\t*HistoryPtr++ = *(CopyOffsetPtr + index++);\n\t\t\t\tLengthOfMatch--;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tCopyOffsetPtr = HistoryBufferEnd - (CopyOffset - (HistoryPtr - HistoryBuffer));\n\t\t\tCopyOffsetPtr++;\n\n\t\t\twhile (CopyLength && (CopyOffsetPtr <= HistoryBufferEnd))\n\t\t\t{\n\t\t\t\t*HistoryPtr++ = *CopyOffsetPtr++;\n\t\t\t\tCopyLength--;\n\t\t\t}\n\n\t\t\tCopyOffsetPtr = HistoryBuffer;\n\n\t\t\twhile (LengthOfMatch > CopyOffset)\n\t\t\t{\n\t\t\t\tindex = ((index >= CopyOffset)) ? 0 : index;\n\t\t\t\t*HistoryPtr++ = *(CopyOffsetPtr + index++);\n\t\t\t\tLengthOfMatch--;\n\t\t\t}\n\t\t}\n\n\t\tLengthOfMatch = LengthOfMatchBase;\n\n\t\tif (LengthOfMatch == 2)\n\t\t\tcontinue;\n\t}\n\n\tif (IndexLEC != 256)\n\t\treturn -1;\n\n\tif (ncrush->HistoryBufferFence != 0xABABABAB)\n\t{\n\t\tWLog_ERR(TAG, \"NCrushDecompress: history buffer fence was overwritten, potential buffer \"\n\t\t              \"overflow detected!\");\n\t\treturn -1007;\n\t}\n\n\tconst intptr_t hsize = HistoryPtr - ncrush->HistoryPtr;\n\tWINPR_ASSERT(hsize >= 0);\n\tWINPR_ASSERT(hsize <= UINT32_MAX);\n\t*pDstSize = (UINT32)hsize;\n\t*ppDstData = ncrush->HistoryPtr;\n\tncrush->HistoryPtr = HistoryPtr;\n\treturn 1;\n}\n\nstatic int ncrush_hash_table_add(NCRUSH_CONTEXT* ncrush, const BYTE* pSrcData, UINT32 SrcSize,\n                                 UINT32 HistoryOffset)\n{\n\tconst BYTE* SrcPtr = pSrcData;\n\tUINT32 Hash;\n\tUINT32 Offset = HistoryOffset;\n\tUINT32 EndOffset = Offset + SrcSize - 8;\n\n\tWINPR_ASSERT(ncrush);\n\tWINPR_ASSERT(pSrcData);\n\tWINPR_ASSERT(Offset + SrcSize >= 8);\n\n\twhile (Offset < EndOffset)\n\t{\n\t\tHash = ncrush->HashTable[get_word(SrcPtr)];\n\t\tncrush->HashTable[get_word(SrcPtr)] = Offset;\n\t\tncrush->MatchTable[Offset] = Hash;\n\t\tSrcPtr++;\n\t\tOffset++;\n\t}\n\n\treturn 1;\n}\n\nstatic int ncrush_find_match_length(const BYTE* Ptr1, const BYTE* Ptr2, BYTE* HistoryPtr)\n{\n\tBYTE val1, val2;\n\tconst BYTE* Ptr = Ptr1;\n\n\tWINPR_ASSERT(Ptr1);\n\tWINPR_ASSERT(Ptr2);\n\tWINPR_ASSERT(HistoryPtr);\n\n\tdo\n\t{\n\t\tif (Ptr1 > HistoryPtr)\n\t\t\tbreak;\n\n\t\tval1 = *Ptr1++;\n\t\tval2 = *Ptr2++;\n\t} while (val1 == val2);\n\n\tconst intptr_t psize = Ptr1 - (Ptr + 1);\n\tWINPR_ASSERT(psize <= INT_MAX);\n\tWINPR_ASSERT(psize >= -INT_MAX);\n\treturn (int)psize;\n}\n\nstatic int ncrush_find_best_match(NCRUSH_CONTEXT* ncrush, UINT16 HistoryOffset,\n                                  UINT32* pMatchOffset)\n{\n\tint i, j;\n\tint Length;\n\tint MatchLength;\n\tBYTE* MatchPtr;\n\tUINT16 Offset;\n\tUINT16 NextOffset;\n\tUINT16 MatchOffset;\n\tBYTE* HistoryBuffer;\n\n\tWINPR_ASSERT(ncrush);\n\tWINPR_ASSERT(pMatchOffset);\n\n\tif (!ncrush->MatchTable[HistoryOffset])\n\t\treturn -1;\n\n\tMatchLength = 2;\n\tOffset = HistoryOffset;\n\tHistoryBuffer = (BYTE*)ncrush->HistoryBuffer;\n\tncrush->MatchTable[0] = HistoryOffset;\n\tMatchOffset = ncrush->MatchTable[HistoryOffset];\n\tNextOffset = ncrush->MatchTable[Offset];\n\tMatchPtr = &HistoryBuffer[MatchLength];\n\n\tfor (i = 0; i < 4; i++)\n\t{\n\t\tj = -1;\n\n\t\tif (j < 0)\n\t\t{\n\t\t\tOffset = ncrush->MatchTable[NextOffset];\n\n\t\t\tif (MatchPtr[NextOffset] == HistoryBuffer[HistoryOffset + MatchLength])\n\t\t\t\tj = 0;\n\t\t}\n\n\t\tif (j < 0)\n\t\t{\n\t\t\tNextOffset = ncrush->MatchTable[Offset];\n\n\t\t\tif (MatchPtr[Offset] == HistoryBuffer[HistoryOffset + MatchLength])\n\t\t\t\tj = 1;\n\t\t}\n\n\t\tif (j < 0)\n\t\t{\n\t\t\tOffset = ncrush->MatchTable[NextOffset];\n\n\t\t\tif (MatchPtr[NextOffset] == HistoryBuffer[HistoryOffset + MatchLength])\n\t\t\t\tj = 2;\n\t\t}\n\n\t\tif (j < 0)\n\t\t{\n\t\t\tNextOffset = ncrush->MatchTable[Offset];\n\n\t\t\tif (MatchPtr[Offset] == HistoryBuffer[HistoryOffset + MatchLength])\n\t\t\t\tj = 3;\n\t\t}\n\n\t\tif (j < 0)\n\t\t{\n\t\t\tOffset = ncrush->MatchTable[NextOffset];\n\n\t\t\tif (MatchPtr[NextOffset] == HistoryBuffer[HistoryOffset + MatchLength])\n\t\t\t\tj = 4;\n\t\t}\n\n\t\tif (j < 0)\n\t\t{\n\t\t\tNextOffset = ncrush->MatchTable[Offset];\n\n\t\t\tif (MatchPtr[Offset] == HistoryBuffer[HistoryOffset + MatchLength])\n\t\t\t\tj = 5;\n\t\t}\n\n\t\tif (j >= 0)\n\t\t{\n\t\t\tif ((j % 2) == 0)\n\t\t\t\tOffset = NextOffset;\n\n\t\t\tif ((Offset != HistoryOffset) && Offset)\n\t\t\t{\n\t\t\t\tLength = ncrush_find_match_length(&HistoryBuffer[HistoryOffset + 2],\n\t\t\t\t                                  &HistoryBuffer[Offset + 2], ncrush->HistoryPtr) +\n\t\t\t\t         2;\n\n\t\t\t\tif (Length < 2)\n\t\t\t\t\treturn -1;\n\n\t\t\t\tif (Length > 16)\n\t\t\t\t\tbreak;\n\n\t\t\t\tif (Length > MatchLength)\n\t\t\t\t{\n\t\t\t\t\tMatchLength = Length;\n\t\t\t\t\tMatchOffset = Offset;\n\t\t\t\t}\n\n\t\t\t\tif ((Length <= MatchLength) ||\n\t\t\t\t    (&HistoryBuffer[HistoryOffset + 2] < ncrush->HistoryPtr))\n\t\t\t\t{\n\t\t\t\t\tNextOffset = ncrush->MatchTable[Offset];\n\t\t\t\t\tMatchPtr = &HistoryBuffer[MatchLength];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tncrush->MatchTable[0] = 0;\n\t*pMatchOffset = MatchOffset;\n\treturn MatchLength;\n}\n\nstatic int ncrush_move_encoder_windows(NCRUSH_CONTEXT* ncrush, BYTE* HistoryPtr)\n{\n\tint i, j;\n\tint NewHash;\n\tint NewMatch;\n\tUINT32 HistoryOffset;\n\n\tWINPR_ASSERT(ncrush);\n\tWINPR_ASSERT(HistoryPtr);\n\n\tif (HistoryPtr < &ncrush->HistoryBuffer[32768])\n\t\treturn -1;\n\n\tif (HistoryPtr > &ncrush->HistoryBuffer[65536])\n\t\treturn -1;\n\n\tMoveMemory(ncrush->HistoryBuffer, HistoryPtr - 32768, 32768);\n\tconst intptr_t hsize = HistoryPtr - 32768 - ncrush->HistoryBuffer;\n\tWINPR_ASSERT(hsize <= UINT32_MAX);\n\tWINPR_ASSERT(hsize >= 0);\n\tHistoryOffset = (UINT32)hsize;\n\n\tfor (i = 0; i < 65536; i += 4)\n\t{\n\t\tNewHash = ncrush->HashTable[i + 0] - HistoryOffset;\n\t\tncrush->HashTable[i + 0] = (NewHash <= 0) ? 0 : NewHash;\n\t\tNewHash = ncrush->HashTable[i + 1] - HistoryOffset;\n\t\tncrush->HashTable[i + 1] = (NewHash <= 0) ? 0 : NewHash;\n\t\tNewHash = ncrush->HashTable[i + 2] - HistoryOffset;\n\t\tncrush->HashTable[i + 2] = (NewHash <= 0) ? 0 : NewHash;\n\t\tNewHash = ncrush->HashTable[i + 3] - HistoryOffset;\n\t\tncrush->HashTable[i + 3] = (NewHash <= 0) ? 0 : NewHash;\n\t}\n\n\tfor (j = 0; j < 32768; j += 4)\n\t{\n\t\tNewMatch = ncrush->MatchTable[HistoryOffset + j + 0] - HistoryOffset;\n\t\tncrush->MatchTable[j + 0] = (NewMatch <= 0) ? 0 : NewMatch;\n\t\tNewMatch = ncrush->MatchTable[HistoryOffset + j + 1] - HistoryOffset;\n\t\tncrush->MatchTable[j + 1] = (NewMatch <= 0) ? 0 : NewMatch;\n\t\tNewMatch = ncrush->MatchTable[HistoryOffset + j + 2] - HistoryOffset;\n\t\tncrush->MatchTable[j + 2] = (NewMatch <= 0) ? 0 : NewMatch;\n\t\tNewMatch = ncrush->MatchTable[HistoryOffset + j + 3] - HistoryOffset;\n\t\tncrush->MatchTable[j + 3] = (NewMatch <= 0) ? 0 : NewMatch;\n\t}\n\n\tZeroMemory(&ncrush->MatchTable[32768], 65536);\n\treturn 1;\n}\n\nint ncrush_compress(NCRUSH_CONTEXT* ncrush, const BYTE* pSrcData, UINT32 SrcSize, BYTE* pDstBuffer,\n                    const BYTE** ppDstData, UINT32* pDstSize, UINT32* pFlags)\n{\n\tBYTE Literal;\n\tconst BYTE* SrcPtr;\n\tBYTE* DstPtr;\n\tUINT32 bits;\n\tUINT32 offset;\n\tUINT16 Mask;\n\tUINT32 MaskedBits;\n\tUINT32 accumulator;\n\tconst BYTE* SrcEndPtr;\n\tBYTE* DstEndPtr;\n\tBYTE* HistoryPtr;\n\tBYTE* pDstData;\n\tUINT32 DstSize;\n\tBOOL PacketAtFront = FALSE;\n\tBOOL PacketFlushed = FALSE;\n\tUINT32 MatchLength;\n\tUINT32 IndexLEC;\n\tUINT32 IndexLOM;\n\tUINT32 IndexCO;\n\tUINT32 CodeLEC;\n\tUINT32 BitLength;\n\tUINT32 CopyOffset;\n\tUINT32 MatchOffset;\n\tUINT32 OldCopyOffset;\n\tUINT32* OffsetCache;\n\tUINT32 OffsetCacheIndex;\n\tUINT32 HistoryOffset;\n\tBYTE* HistoryBuffer;\n\tUINT32 HistoryBufferSize;\n\tBYTE* HistoryBufferEndPtr;\n\tUINT32 CopyOffsetIndex;\n\tUINT32 CopyOffsetBits;\n\tUINT32 CompressionLevel = 2;\n\n\tWINPR_ASSERT(ncrush);\n\n\tWINPR_ASSERT(ncrush);\n\tWINPR_ASSERT(pSrcData);\n\tWINPR_ASSERT(pDstBuffer);\n\tWINPR_ASSERT(ppDstData);\n\tWINPR_ASSERT(pDstSize);\n\tWINPR_ASSERT(pFlags);\n\n\tHistoryBuffer = ncrush->HistoryBuffer;\n\t*pFlags = 0;\n\n\tif ((SrcSize + ncrush->HistoryOffset) >= 65529)\n\t{\n\t\tif (ncrush->HistoryOffset == (ncrush->HistoryBufferSize + 1))\n\t\t{\n\t\t\tncrush->HistoryOffset = 0;\n\t\t\tncrush->HistoryPtr = HistoryBuffer;\n\t\t\tPacketFlushed = TRUE;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (ncrush_move_encoder_windows(ncrush, &(HistoryBuffer[ncrush->HistoryOffset])) < 0)\n\t\t\t\treturn -1001;\n\n\t\t\tncrush->HistoryPtr = &HistoryBuffer[32768];\n\t\t\tncrush->HistoryOffset = 32768;\n\t\t\tPacketAtFront = TRUE;\n\t\t}\n\t}\n\telse\n\t{\n\t\t*pFlags = 0;\n\t}\n\n\tpDstData = pDstBuffer;\n\t*ppDstData = pDstBuffer;\n\n\tif (!pDstData)\n\t\treturn -1002;\n\n\tDstSize = *pDstSize;\n\n\tif (DstSize < SrcSize)\n\t\treturn -1003;\n\n\tDstSize = SrcSize;\n\tNCrushWriteStart(&bits, &offset, &accumulator);\n\tDstPtr = pDstData;\n\tSrcPtr = pSrcData;\n\tSrcEndPtr = &pSrcData[SrcSize];\n\tDstEndPtr = &pDstData[DstSize - 1];\n\tOffsetCache = ncrush->OffsetCache;\n\tHistoryPtr = &HistoryBuffer[ncrush->HistoryOffset];\n\tHistoryBufferEndPtr = &HistoryBuffer[65536];\n\tHistoryBufferSize = ncrush->HistoryBufferSize;\n\tCopyOffset = 0;\n\tMatchOffset = 0;\n\tconst intptr_t thsize = HistoryPtr - HistoryBuffer;\n\tWINPR_ASSERT(thsize >= 0);\n\tWINPR_ASSERT(thsize <= UINT32_MAX);\n\tncrush_hash_table_add(ncrush, pSrcData, SrcSize, (UINT32)thsize);\n\tCopyMemory(HistoryPtr, pSrcData, SrcSize);\n\tncrush->HistoryPtr = &HistoryPtr[SrcSize];\n\n\twhile (SrcPtr < (SrcEndPtr - 2))\n\t{\n\t\tMatchLength = 0;\n\t\tconst intptr_t hsize = HistoryPtr - HistoryBuffer;\n\t\tWINPR_ASSERT(hsize <= UINT32_MAX);\n\t\tWINPR_ASSERT(hsize >= 0);\n\t\tHistoryOffset = (UINT32)hsize;\n\n\t\tif (ncrush->HistoryPtr && (HistoryPtr > ncrush->HistoryPtr))\n\t\t\treturn -1;\n\n\t\tif (HistoryOffset >= 65536)\n\t\t\treturn -1004;\n\n\t\tif (ncrush->MatchTable[HistoryOffset])\n\t\t{\n\t\t\tint rc;\n\n\t\t\tMatchOffset = 0;\n\t\t\trc = ncrush_find_best_match(ncrush, HistoryOffset, &MatchOffset);\n\n\t\t\tif (rc < 0)\n\t\t\t\treturn -1005;\n\t\t\tMatchLength = (UINT32)rc;\n\t\t}\n\n\t\tif (MatchLength)\n\t\t\tCopyOffset = (HistoryBufferSize - 1) & (HistoryPtr - &HistoryBuffer[MatchOffset]);\n\n\t\tif ((MatchLength == 2) && (CopyOffset >= 64))\n\t\t\tMatchLength = 0;\n\n\t\tif (MatchLength == 0)\n\t\t{\n\t\t\t/* Literal */\n\t\t\tLiteral = *SrcPtr++;\n\t\t\tHistoryPtr++;\n\n\t\t\tif ((DstPtr + 2) > DstEndPtr) /* PACKET_FLUSH #1 */\n\t\t\t{\n\t\t\t\tncrush_context_reset(ncrush, TRUE);\n\t\t\t\t*pFlags = PACKET_FLUSHED;\n\t\t\t\t*pFlags |= CompressionLevel;\n\t\t\t\t*ppDstData = pSrcData;\n\t\t\t\t*pDstSize = SrcSize;\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tIndexLEC = Literal;\n\t\t\tif (IndexLEC >= ARRAYSIZE(HuffLengthLEC))\n\t\t\t\treturn -1;\n\t\t\tBitLength = HuffLengthLEC[IndexLEC];\n\n\t\t\tif (IndexLEC * 2ull >= ARRAYSIZE(HuffCodeLEC))\n\t\t\t\treturn -1;\n\t\t\tCodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);\n\n\t\t\tif (BitLength > 15)\n\t\t\t\treturn -1006;\n\n\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, CodeLEC, BitLength);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tHistoryPtr += MatchLength;\n\t\t\tSrcPtr += MatchLength;\n\n\t\t\tif (!MatchLength)\n\t\t\t\treturn -1007;\n\n\t\t\tif ((DstPtr + 8) > DstEndPtr) /* PACKET_FLUSH #2 */\n\t\t\t{\n\t\t\t\tncrush_context_reset(ncrush, TRUE);\n\t\t\t\t*pFlags = PACKET_FLUSHED;\n\t\t\t\t*pFlags |= CompressionLevel;\n\t\t\t\t*ppDstData = pSrcData;\n\t\t\t\t*pDstSize = SrcSize;\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tOffsetCacheIndex = 5;\n\n\t\t\tif ((CopyOffset == OffsetCache[0]) || (CopyOffset == OffsetCache[1]) ||\n\t\t\t    (CopyOffset == OffsetCache[2]) || (CopyOffset == OffsetCache[3]))\n\t\t\t{\n\t\t\t\tif (CopyOffset == OffsetCache[3])\n\t\t\t\t{\n\t\t\t\t\tOldCopyOffset = OffsetCache[3];\n\t\t\t\t\tOffsetCache[3] = OffsetCache[0];\n\t\t\t\t\tOffsetCache[0] = OldCopyOffset;\n\t\t\t\t\tOffsetCacheIndex = 3;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (CopyOffset == OffsetCache[2])\n\t\t\t\t\t{\n\t\t\t\t\t\tOldCopyOffset = OffsetCache[2];\n\t\t\t\t\t\tOffsetCache[2] = OffsetCache[0];\n\t\t\t\t\t\tOffsetCache[0] = OldCopyOffset;\n\t\t\t\t\t\tOffsetCacheIndex = 2;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (CopyOffset == OffsetCache[1])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOldCopyOffset = OffsetCache[1];\n\t\t\t\t\t\t\tOffsetCache[1] = OffsetCache[0];\n\t\t\t\t\t\t\tOffsetCache[0] = OldCopyOffset;\n\t\t\t\t\t\t\tOffsetCacheIndex = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (CopyOffset == OffsetCache[0])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tOffsetCacheIndex = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tOffsetCache[3] = OffsetCache[2];\n\t\t\t\tOffsetCache[2] = OffsetCache[1];\n\t\t\t\tOffsetCache[1] = OffsetCache[0];\n\t\t\t\tOffsetCache[0] = CopyOffset;\n\t\t\t}\n\n\t\t\tif (OffsetCacheIndex >= 4)\n\t\t\t{\n\t\t\t\t/* CopyOffset not in OffsetCache */\n\t\t\t\tif (CopyOffset >= 256)\n\t\t\t\t\tbits = (CopyOffset >> 7) + 256;\n\t\t\t\telse\n\t\t\t\t\tbits = CopyOffset;\n\n\t\t\t\tCopyOffsetIndex = ncrush->HuffTableCopyOffset[bits + 2];\n\n\t\t\t\tif (CopyOffsetIndex >= ARRAYSIZE(CopyOffsetBitsLUT))\n\t\t\t\t\treturn -1;\n\n\t\t\t\tCopyOffsetBits = CopyOffsetBitsLUT[CopyOffsetIndex];\n\t\t\t\tIndexLEC = 257 + CopyOffsetIndex;\n\t\t\t\tif (IndexLEC >= ARRAYSIZE(HuffLengthLEC))\n\t\t\t\t\treturn -1;\n\t\t\t\tBitLength = HuffLengthLEC[IndexLEC];\n\n\t\t\t\tif (IndexLEC * 2ull >= ARRAYSIZE(HuffCodeLEC))\n\t\t\t\t\treturn -1;\n\t\t\t\tCodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);\n\n\t\t\t\tif (BitLength > 15)\n\t\t\t\t\treturn -1008;\n\n\t\t\t\tif (CopyOffsetBits > 18)\n\t\t\t\t\treturn -1009;\n\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, CodeLEC, BitLength);\n\t\t\t\tMask = ((1 << CopyOffsetBits) - 1);\n\t\t\t\tMaskedBits = CopyOffset & Mask;\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, MaskedBits, CopyOffsetBits);\n\n\t\t\t\tif ((MatchLength - 2) >= 768)\n\t\t\t\t\tIndexCO = 28;\n\t\t\t\telse\n\t\t\t\t\tIndexCO = ncrush->HuffTableLOM[MatchLength];\n\n\t\t\t\tif (IndexCO >= ARRAYSIZE(HuffLengthLOM))\n\t\t\t\t\treturn -1;\n\t\t\t\tBitLength = HuffLengthLOM[IndexCO];\n\n\t\t\t\tif (IndexCO >= ARRAYSIZE(LOMBitsLUT))\n\t\t\t\t\treturn -1;\n\t\t\t\tIndexLOM = LOMBitsLUT[IndexCO];\n\n\t\t\t\tif (IndexCO >= ARRAYSIZE(HuffCodeLOM))\n\t\t\t\t\treturn -1;\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, HuffCodeLOM[IndexCO], BitLength);\n\t\t\t\tMask = ((1 << IndexLOM) - 1);\n\t\t\t\tMaskedBits = (MatchLength - 2) & Mask;\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, MaskedBits, IndexLOM);\n\n\t\t\t\tif (IndexCO >= ARRAYSIZE(LOMBaseLUT))\n\t\t\t\t\treturn -1;\n\t\t\t\tif ((MaskedBits + LOMBaseLUT[IndexCO]) != MatchLength)\n\t\t\t\t\treturn -1010;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t/* CopyOffset in OffsetCache */\n\t\t\t\tIndexLEC = 289 + OffsetCacheIndex;\n\t\t\t\tif (IndexLEC >= ARRAYSIZE(HuffLengthLEC))\n\t\t\t\t\treturn -1;\n\t\t\t\tBitLength = HuffLengthLEC[IndexLEC];\n\t\t\t\tif (IndexLEC * 2ull >= ARRAYSIZE(HuffCodeLEC))\n\t\t\t\t\treturn -1;\n\t\t\t\tCodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);\n\n\t\t\t\tif (BitLength >= 15)\n\t\t\t\t\treturn -1011;\n\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, CodeLEC, BitLength);\n\n\t\t\t\tif ((MatchLength - 2) >= 768)\n\t\t\t\t\tIndexCO = 28;\n\t\t\t\telse\n\t\t\t\t\tIndexCO = ncrush->HuffTableLOM[MatchLength];\n\n\t\t\t\tif (IndexCO >= ARRAYSIZE(HuffLengthLOM))\n\t\t\t\t\treturn -1;\n\n\t\t\t\tBitLength = HuffLengthLOM[IndexCO];\n\n\t\t\t\tif (IndexCO >= ARRAYSIZE(LOMBitsLUT))\n\t\t\t\t\treturn -1;\n\t\t\t\tIndexLOM = LOMBitsLUT[IndexCO];\n\n\t\t\t\tif (IndexCO >= ARRAYSIZE(HuffCodeLOM))\n\t\t\t\t\treturn -1;\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, HuffCodeLOM[IndexCO], BitLength);\n\t\t\t\tMask = ((1 << IndexLOM) - 1);\n\t\t\t\tMaskedBits = (MatchLength - 2) & Mask;\n\t\t\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, MaskedBits, IndexLOM);\n\n\t\t\t\tif (IndexCO >= ARRAYSIZE(LOMBaseLUT))\n\t\t\t\t\treturn -1;\n\t\t\t\tif ((MaskedBits + LOMBaseLUT[IndexCO]) != MatchLength)\n\t\t\t\t\treturn -1012;\n\t\t\t}\n\t\t}\n\n\t\tif (HistoryPtr >= HistoryBufferEndPtr)\n\t\t\treturn -1013;\n\t}\n\n\twhile (SrcPtr < SrcEndPtr)\n\t{\n\t\tif ((DstPtr + 2) > DstEndPtr) /* PACKET_FLUSH #3 */\n\t\t{\n\t\t\tncrush_context_reset(ncrush, TRUE);\n\t\t\t*pFlags = PACKET_FLUSHED;\n\t\t\t*pFlags |= CompressionLevel;\n\t\t\t*ppDstData = pSrcData;\n\t\t\t*pDstSize = SrcSize;\n\t\t\treturn 1;\n\t\t}\n\n\t\tLiteral = *SrcPtr++;\n\t\tHistoryPtr++;\n\t\tIndexLEC = Literal;\n\t\tif (IndexLEC >= ARRAYSIZE(HuffLengthLEC))\n\t\t\treturn -1;\n\t\tif (IndexLEC * 2ull >= ARRAYSIZE(HuffCodeLEC))\n\t\t\treturn -1;\n\t\tBitLength = HuffLengthLEC[IndexLEC];\n\t\tCodeLEC = get_word(&HuffCodeLEC[IndexLEC * 2]);\n\n\t\tif (BitLength > 15)\n\t\t\treturn -1014;\n\n\t\tNCrushWriteBits(&DstPtr, &accumulator, &offset, CodeLEC, BitLength);\n\t}\n\n\tif ((DstPtr + 4) >= DstEndPtr) /* PACKET_FLUSH #4 */\n\t{\n\t\tncrush_context_reset(ncrush, TRUE);\n\t\t*pFlags = PACKET_FLUSHED;\n\t\t*pFlags |= CompressionLevel;\n\t\t*ppDstData = pSrcData;\n\t\t*pDstSize = SrcSize;\n\t\treturn 1;\n\t}\n\n\tIndexLEC = 256;\n\tBitLength = HuffLengthLEC[IndexLEC];\n\n\tif (BitLength > 15)\n\t\treturn -1015;\n\n\tbits = get_word(&HuffCodeLEC[IndexLEC * 2]);\n\tNCrushWriteBits(&DstPtr, &accumulator, &offset, bits, BitLength);\n\tNCrushWriteFinish(&DstPtr, accumulator);\n\tconst intptr_t dsize = DstPtr - pDstData;\n\tWINPR_ASSERT(dsize <= UINT32_MAX);\n\tWINPR_ASSERT(dsize >= 0);\n\t*pDstSize = (UINT32)dsize;\n\n\tif (*pDstSize > SrcSize)\n\t\treturn -1016;\n\n\t*pFlags |= PACKET_COMPRESSED;\n\t*pFlags |= CompressionLevel;\n\n\tif (PacketAtFront)\n\t\t*pFlags |= PACKET_AT_FRONT;\n\n\tif (PacketFlushed)\n\t\t*pFlags |= PACKET_FLUSHED;\n\n\tncrush->HistoryOffset = HistoryPtr - HistoryBuffer;\n\n\tif (ncrush->HistoryOffset >= ncrush->HistoryBufferSize)\n\t\treturn -1;\n\n\treturn 1;\n}\n\nstatic int ncrush_generate_tables(NCRUSH_CONTEXT* context)\n{\n\tUINT32 k, i;\n\tint j, l;\n\tk = 0;\n\n\tWINPR_ASSERT(context);\n\tWINPR_ASSERT(28 < ARRAYSIZE(LOMBitsLUT));\n\n\tfor (i = 0; i < 28; i++)\n\t{\n\t\tfor (j = 0; j < 1 << LOMBitsLUT[i]; j++)\n\t\t{\n\t\t\tl = (k++) + 2;\n\t\t\tcontext->HuffTableLOM[l] = (int)i;\n\t\t}\n\t}\n\n\tfor (k = 2; k < 4096; k++)\n\t{\n\t\tif ((k - 2) >= 768)\n\t\t\ti = 28;\n\t\telse\n\t\t\ti = context->HuffTableLOM[k];\n\n\t\tif (i >= ARRAYSIZE(LOMBitsLUT))\n\t\t\treturn -1;\n\t\tif (i >= ARRAYSIZE(LOMBaseLUT))\n\t\t\treturn -1;\n\n\t\tif (((((1 << LOMBitsLUT[i]) - 1) & (k - 2)) + LOMBaseLUT[i]) != k)\n\t\t\treturn -1;\n\t}\n\n\tk = 0;\n\n\tfor (i = 0; i < 16; i++)\n\t{\n\t\tfor (j = 0; j < 1 << CopyOffsetBitsLUT[i]; j++)\n\t\t{\n\t\t\tl = k++ + 2;\n\t\t\tcontext->HuffTableCopyOffset[l] = i;\n\t\t}\n\t}\n\n\tk /= 128;\n\n\tfor (i = 16; i < 32; i++)\n\t{\n\t\tfor (j = 0; j < 1 << (CopyOffsetBitsLUT[i] - 7); j++)\n\t\t{\n\t\t\tl = k++ + 2 + 256;\n\t\t\tcontext->HuffTableCopyOffset[l] = i;\n\t\t}\n\t}\n\n\tif ((k + 256) > 1024)\n\t\treturn -1;\n\n\treturn 1;\n}\n\nvoid ncrush_context_reset(NCRUSH_CONTEXT* ncrush, BOOL flush)\n{\n\tWINPR_ASSERT(ncrush);\n\n\tZeroMemory(&(ncrush->HistoryBuffer), sizeof(ncrush->HistoryBuffer));\n\tZeroMemory(&(ncrush->OffsetCache), sizeof(ncrush->OffsetCache));\n\tZeroMemory(&(ncrush->MatchTable), sizeof(ncrush->MatchTable));\n\tZeroMemory(&(ncrush->HashTable), sizeof(ncrush->HashTable));\n\n\tif (flush)\n\t\tncrush->HistoryOffset = ncrush->HistoryBufferSize + 1;\n\telse\n\t\tncrush->HistoryOffset = 0;\n\n\tncrush->HistoryPtr = &(ncrush->HistoryBuffer[ncrush->HistoryOffset]);\n}\n\nNCRUSH_CONTEXT* ncrush_context_new(BOOL Compressor)\n{\n\tNCRUSH_CONTEXT* ncrush = (NCRUSH_CONTEXT*)calloc(1, sizeof(NCRUSH_CONTEXT));\n\n\tif (!ncrush)\n\t\tgoto fail;\n\n\tncrush->Compressor = Compressor;\n\tncrush->HistoryBufferSize = 65536;\n\tncrush->HistoryEndOffset = ncrush->HistoryBufferSize - 1;\n\tncrush->HistoryBufferFence = 0xABABABAB;\n\tncrush->HistoryOffset = 0;\n\tncrush->HistoryPtr = &(ncrush->HistoryBuffer[ncrush->HistoryOffset]);\n\n\tif (ncrush_generate_tables(ncrush) < 0)\n\t{\n\t\tWLog_DBG(TAG, \"ncrush_context_new: failed to initialize tables\");\n\t\tgoto fail;\n\t}\n\n\tncrush_context_reset(ncrush, FALSE);\n\n\treturn ncrush;\nfail:\n\tncrush_context_free(ncrush);\n\treturn NULL;\n}\n\nvoid ncrush_context_free(NCRUSH_CONTEXT* ncrush)\n{\n\tfree(ncrush);\n}\n"], "filenames": ["libfreerdp/codec/ncrush.c"], "buggy_code_start_loc": [2019], "buggy_code_end_loc": [2885], "fixing_code_start_loc": [2018], "fixing_code_end_loc": [2966], "type": "CWE-120", "message": "FreeRDP is a free implementation of the Remote Desktop Protocol (RDP), released under the Apache license. In affected versions there is a Global-Buffer-Overflow in the ncrush_decompress function. Feeding crafted input into this function can trigger the overflow which has only been shown to cause a crash. This issue has been addressed in versions 2.11.0 and 3.0.0-beta3. Users are advised to upgrade. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2023-40589", "sourceIdentifier": "security-advisories@github.com", "published": "2023-08-31T19:15:11.360", "lastModified": "2024-01-12T13:15:11.610", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "FreeRDP is a free implementation of the Remote Desktop Protocol (RDP), released under the Apache license. In affected versions there is a Global-Buffer-Overflow in the ncrush_decompress function. Feeding crafted input into this function can trigger the overflow which has only been shown to cause a crash. This issue has been addressed in versions 2.11.0 and 3.0.0-beta3. Users are advised to upgrade. There are no known workarounds for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-120"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:freerdp:freerdp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.11.0", "matchCriteriaId": "80B02150-FC4E-43F5-A3DF-D8E585200977"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freerdp:freerdp:3.0.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "D8720D61-0B0D-40ED-B3C4-B452D83BF3C2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freerdp:freerdp:3.0.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "18A75D02-0E7A-4AAF-8E23-0CDCB1733FEA"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:37:*:*:*:*:*:*:*", "matchCriteriaId": "E30D0E6F-4AE8-4284-8716-991DFA48CC5D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:38:*:*:*:*:*:*:*", "matchCriteriaId": "CC559B26-5DFC-4B7A-A27C-B77DE755DFF9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:39:*:*:*:*:*:*:*", "matchCriteriaId": "B8EDB836-4E6A-4B71-B9B2-AA3E03E0F646"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}], "references": [{"url": "https://github.com/FreeRDP/FreeRDP/commit/16141a30f983dd6f7a6e5b0356084171942c9416", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/FreeRDP/FreeRDP/security/advisories/GHSA-gc34-mw6m-g42x", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2023/10/msg00008.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A6LLDAPEXRDJOM3PREDDD267SSNT77DP/", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IHMTGKCZXJPQOR5ZD2I4GPDNP2DKRXMF/", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OH2ATH2BKDNKCJAU4WPPXK4SHLE3UJUV/", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202401-16", "source": "security-advisories@github.com"}]}, "github_commit_url": "https://github.com/FreeRDP/FreeRDP/commit/16141a30f983dd6f7a6e5b0356084171942c9416"}}