{"buggy_code": ["<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nuse Shopware\\Components\\CSRFWhitelistAware;\n\nclass Shopware_Controllers_Frontend_Error extends Enlight_Controller_Action implements CSRFWhitelistAware\n{\n    /**\n     * Disable front plugins\n     */\n    public function init()\n    {\n        $this->Front()->Plugins()->ScriptRenderer()->setRender(false);\n        $this->Front()->Plugins()->ViewRenderer()->setNoRender(false);\n        $this->Front()->Plugins()->Json()->setRenderer(false);\n    }\n\n    /**\n     * Load correct template\n     */\n    public function preDispatch()\n    {\n        if ($this->Request()->getActionName() === 'service') {\n            return;\n        }\n        $templateModule = 'frontend';\n        if ($this->Request()->getModuleName() === 'backend') {\n            $templateModule = 'backend';\n            $this->enableBackendTheme();\n        }\n\n        if (strpos($this->Request()->getHeader('Content-Type'), 'application/json') === 0) {\n            $this->Front()->Plugins()->Json()->setRenderer();\n            $this->View()->assign('success', false);\n        } elseif ($this->Request()->isXmlHttpRequest() || !Shopware()->Container()->initialized('db')) {\n            $this->View()->loadTemplate($templateModule . '/error/exception.tpl');\n        } elseif (isset($_ENV['SHELL']) || PHP_SAPI === 'cli') {\n            $this->View()->loadTemplate($templateModule . '/error/cli.tpl');\n        } elseif (empty($_SERVER['SERVER_NAME'])) {\n            $this->View()->loadTemplate($templateModule . '/error/ajax.tpl');\n        } else {\n            $this->View()->loadTemplate($templateModule . '/error/index.tpl');\n        }\n\n        if ($this->isCsrfValidationException()) {\n            $backUrl = htmlspecialchars($_SERVER['HTTP_REFERER']);\n            if (!empty($backUrl)) {\n                $this->View()->assign('backUrl', $backUrl);\n            }\n            $this->View()->assign('isCsrfException', 'true');\n        }\n    }\n\n    /**\n     * Controller action that handles all error rendering\n     * either by itself or by delegating specific scenarios to other actions\n     */\n    public function errorAction()\n    {\n        $error = $this->Request()->getParam('error_handler');\n        if (empty($error)) {\n            return;\n        }\n\n        $code = $error->exception->getCode();\n        switch ($code) {\n            case Enlight_Controller_Exception::Controller_Dispatcher_Controller_Not_Found:\n            case Enlight_Controller_Exception::Controller_Dispatcher_Controller_No_Route:\n            case Enlight_Controller_Exception::PROPERTY_NOT_FOUND:\n            case Enlight_Controller_Exception::ActionNotFound:\n            case 404:\n                $this->forward('pageNotFoundError');\n                break;\n            case 400:\n            case 401:\n            case 413:\n                $this->forward('genericError', null, null, ['code' => $code]);\n                break;\n            default:\n                $this->forward('genericError', null, null, ['code' => 503]);\n                break;\n        }\n    }\n\n    /**\n     * Handles \"Page Not Found\" errors\n     */\n    public function pageNotFoundErrorAction()\n    {\n        $response = $this->Response();\n\n        $targetEmotionId = Shopware()->Config()->get('PageNotFoundDestination');\n        $targetErrorCode = Shopware()->Config()->get('PageNotFoundCode', 404);\n\n        $response->setStatusCode($targetErrorCode);\n\n        // Page not Found should not get logged in error handler\n        $response->unsetExceptions();\n\n        switch ($targetEmotionId) {\n            case -2:\n            case null:\n                $this->forward(\n                    Shopware()->Front()->Dispatcher()->getDefaultAction(),\n                    Shopware()->Front()->Dispatcher()->getDefaultControllerName()\n                );\n                break;\n            case -1:\n                $this->forward('genericError', null, null, ['code' => $targetErrorCode]);\n                break;\n            default:\n\n                // Try to load the emotion landingpage, render default error in case it is unavailable\n                try {\n                    $result = $this->get('shopware.emotion.emotion_landingpage_loader')->load(\n                        $targetEmotionId,\n                        $this->get('shopware_storefront.context_service')->getShopContext()\n                    );\n\n                    $this->View()->loadTemplate('frontend/campaign/index.tpl');\n                    $this->View()->assign(json_decode(json_encode($result), true));\n                } catch (\\Exception $ex) {\n                    $this->forward(\n                        Shopware()->Front()->Dispatcher()->getDefaultAction(),\n                        Shopware()->Front()->Dispatcher()->getDefaultControllerName()\n                    );\n                }\n        }\n    }\n\n    /**\n     * Generic error handling controller action\n     */\n    public function genericErrorAction()\n    {\n        $response = $this->Response();\n        $errorCode = $this->Request()->getParam('code', 503);\n        $response->setStatusCode($errorCode);\n\n        if ($this->Request()->getModuleName() === 'frontend') {\n            $this->View()->assign('Shop', Shopware()->Shop());\n        }\n\n        $error = $this->Request()->getParam('error_handler');\n\n        /*\n         * If the system is configured to display the exception data, we need\n         * to pass it to the template\n        */\n        if ($this->Front()->getParam('showException') || $this->Request()->getModuleName() === 'backend') {\n            $path = Shopware()->Container()->getParameter('kernel.root_dir') . '/';\n\n            /** @var \\Exception $exception */\n            $exception = $error->exception;\n            $errorFile = $exception->getFile();\n            $errorFile = str_replace($path, '', $errorFile);\n\n            $errorTrace = $error->exception->getTraceAsString();\n            $errorTrace = str_replace($path, '', $errorTrace);\n            $this->View()->assign([\n                'exception' => $exception,\n                'error' => $exception->getMessage(),\n                'error_message' => $exception->getMessage(),\n                'error_file' => $errorFile,\n                'error_trace' => $errorTrace,\n            ]);\n        }\n\n        if ($this->View()->getAssign('success') !== null) {\n            $this->Response()->setStatusCode(200);\n            $this->View()->clearAssign('exception');\n            $this->View()->assign('message', $error->exception->getMessage());\n        }\n    }\n\n    public function serviceAction()\n    {\n        $this->Response()->setStatusCode(503);\n        $this->Response()->headers->set('retry-after', '1800');\n    }\n\n    /**\n     * Returns a list with actions which should not be validated for CSRF protection\n     *\n     * @return string[]\n     */\n    public function getWhitelistedCSRFActions()\n    {\n        return [\n            'error',\n            'pageNotFoundError',\n            'genericError',\n            'service',\n        ];\n    }\n\n    /**\n     * Ensure the backend theme is enabled.\n     * This is important in cases when a backend request uses the storefront context eg. \"$shop->registerResources($this)\".\n     */\n    private function enableBackendTheme()\n    {\n        $directory = Shopware()->Container()->get('theme_path_resolver')->getExtJsThemeDirectory();\n        Shopware()->Container()->get('template')->setTemplateDir([\n            'backend' => $directory,\n            'include_dir' => '.',\n        ]);\n    }\n\n    /**\n     * Checks if the Response contains a CSRF Token validation exception\n     *\n     * @return bool\n     */\n    private function isCsrfValidationException()\n    {\n        $exceptions = $this->Response()->getException();\n        if (empty($exceptions)) {\n            return false;\n        }\n        foreach ($exceptions as $exception) {\n            if ($exception instanceof \\Shopware\\Components\\CSRFTokenValidationException) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nuse Shopware\\Components\\CSRFWhitelistAware;\n\nclass Shopware_Controllers_Frontend_Error extends Enlight_Controller_Action implements CSRFWhitelistAware\n{\n    /**\n     * Disable front plugins\n     */\n    public function init()\n    {\n        $this->Front()->Plugins()->ScriptRenderer()->setRender(false);\n        $this->Front()->Plugins()->ViewRenderer()->setNoRender(false);\n        $this->Front()->Plugins()->Json()->setRenderer(false);\n    }\n\n    /**\n     * Load correct template\n     */\n    public function preDispatch()\n    {\n        if ($this->Request()->getActionName() === 'service') {\n            return;\n        }\n        $templateModule = 'frontend';\n        if ($this->Request()->getModuleName() === 'backend') {\n            $templateModule = 'backend';\n            $this->enableBackendTheme();\n        }\n\n        if ($this->Request()->isXmlHttpRequest() || !Shopware()->Container()->initialized('db')) {\n            $this->View()->loadTemplate($templateModule . '/error/exception.tpl');\n        } elseif (isset($_ENV['SHELL']) || PHP_SAPI === 'cli') {\n            $this->View()->loadTemplate($templateModule . '/error/cli.tpl');\n        } elseif (empty($_SERVER['SERVER_NAME'])) {\n            $this->View()->loadTemplate($templateModule . '/error/ajax.tpl');\n        } else {\n            $this->View()->loadTemplate($templateModule . '/error/index.tpl');\n        }\n\n        if ($this->isCsrfValidationException()) {\n            $backUrl = htmlspecialchars($_SERVER['HTTP_REFERER']);\n            if (!empty($backUrl)) {\n                $this->View()->assign('backUrl', $backUrl);\n            }\n            $this->View()->assign('isCsrfException', 'true');\n        }\n    }\n\n    /**\n     * Controller action that handles all error rendering\n     * either by itself or by delegating specific scenarios to other actions\n     */\n    public function errorAction()\n    {\n        $error = $this->Request()->getParam('error_handler');\n        if (empty($error)) {\n            return;\n        }\n\n        $code = $error->exception->getCode();\n        switch ($code) {\n            case Enlight_Controller_Exception::Controller_Dispatcher_Controller_Not_Found:\n            case Enlight_Controller_Exception::Controller_Dispatcher_Controller_No_Route:\n            case Enlight_Controller_Exception::PROPERTY_NOT_FOUND:\n            case Enlight_Controller_Exception::ActionNotFound:\n            case 404:\n                $this->forward('pageNotFoundError');\n                break;\n            case 400:\n            case 401:\n            case 413:\n                $this->forward('genericError', null, null, ['code' => $code]);\n                break;\n            default:\n                $this->forward('genericError', null, null, ['code' => 503]);\n                break;\n        }\n    }\n\n    /**\n     * Handles \"Page Not Found\" errors\n     */\n    public function pageNotFoundErrorAction()\n    {\n        $response = $this->Response();\n\n        $targetEmotionId = Shopware()->Config()->get('PageNotFoundDestination');\n        $targetErrorCode = Shopware()->Config()->get('PageNotFoundCode', 404);\n\n        $response->setStatusCode($targetErrorCode);\n\n        // Page not Found should not get logged in error handler\n        $response->unsetExceptions();\n\n        switch ($targetEmotionId) {\n            case -2:\n            case null:\n                $this->forward(\n                    Shopware()->Front()->Dispatcher()->getDefaultAction(),\n                    Shopware()->Front()->Dispatcher()->getDefaultControllerName()\n                );\n                break;\n            case -1:\n                $this->forward('genericError', null, null, ['code' => $targetErrorCode]);\n                break;\n            default:\n\n                // Try to load the emotion landingpage, render default error in case it is unavailable\n                try {\n                    $result = $this->get('shopware.emotion.emotion_landingpage_loader')->load(\n                        $targetEmotionId,\n                        $this->get('shopware_storefront.context_service')->getShopContext()\n                    );\n\n                    $this->View()->loadTemplate('frontend/campaign/index.tpl');\n                    $this->View()->assign(json_decode(json_encode($result), true));\n                } catch (\\Exception $ex) {\n                    $this->forward(\n                        Shopware()->Front()->Dispatcher()->getDefaultAction(),\n                        Shopware()->Front()->Dispatcher()->getDefaultControllerName()\n                    );\n                }\n        }\n    }\n\n    /**\n     * Generic error handling controller action\n     */\n    public function genericErrorAction()\n    {\n        $response = $this->Response();\n        $errorCode = $this->Request()->getParam('code', 503);\n        $response->setStatusCode($errorCode);\n\n        if ($this->Request()->getModuleName() === 'frontend') {\n            $this->View()->assign('Shop', Shopware()->Shop());\n        }\n\n        $error = $this->Request()->getParam('error_handler');\n\n        /*\n         * If the system is configured to display the exception data, we need\n         * to pass it to the template\n        */\n        if ($this->Front()->getParam('showException') || $this->Request()->getModuleName() === 'backend') {\n            $path = Shopware()->Container()->getParameter('kernel.root_dir') . '/';\n\n            /** @var \\Exception $exception */\n            $exception = $error->exception;\n            $errorFile = $exception->getFile();\n            $errorFile = str_replace($path, '', $errorFile);\n\n            $errorTrace = $error->exception->getTraceAsString();\n            $errorTrace = str_replace($path, '', $errorTrace);\n            $this->View()->assign([\n                'exception' => $exception,\n                'error' => $exception->getMessage(),\n                'error_message' => $exception->getMessage(),\n                'error_file' => $errorFile,\n                'error_trace' => $errorTrace,\n            ]);\n        }\n\n        if ($this->View()->getAssign('success') !== null) {\n            $this->Response()->setStatusCode(200);\n            $this->View()->clearAssign('exception');\n            $this->View()->assign('message', $error->exception->getMessage());\n        }\n    }\n\n    public function serviceAction()\n    {\n        $this->Response()->setStatusCode(503);\n        $this->Response()->headers->set('retry-after', '1800');\n    }\n\n    /**\n     * Returns a list with actions which should not be validated for CSRF protection\n     *\n     * @return string[]\n     */\n    public function getWhitelistedCSRFActions()\n    {\n        return [\n            'error',\n            'pageNotFoundError',\n            'genericError',\n            'service',\n        ];\n    }\n\n    /**\n     * Ensure the backend theme is enabled.\n     * This is important in cases when a backend request uses the storefront context eg. \"$shop->registerResources($this)\".\n     */\n    private function enableBackendTheme()\n    {\n        $directory = Shopware()->Container()->get('theme_path_resolver')->getExtJsThemeDirectory();\n        Shopware()->Container()->get('template')->setTemplateDir([\n            'backend' => $directory,\n            'include_dir' => '.',\n        ]);\n    }\n\n    /**\n     * Checks if the Response contains a CSRF Token validation exception\n     *\n     * @return bool\n     */\n    private function isCsrfValidationException()\n    {\n        $exceptions = $this->Response()->getException();\n        if (empty($exceptions)) {\n            return false;\n        }\n        foreach ($exceptions as $exception) {\n            if ($exception instanceof \\Shopware\\Components\\CSRFTokenValidationException) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"], "filenames": ["engine/Shopware/Controllers/Frontend/Error.php"], "buggy_code_start_loc": [53], "buggy_code_end_loc": [57], "fixing_code_start_loc": [53], "fixing_code_end_loc": [54], "type": "CWE-209", "message": "Shopware is an open source eCommerce platform. Versions prior to 5.6.10 are vulnerable to system information leakage in error handling. Users are recommend to update to version 5.6.10. You can get the update to 5.6.10 regularly via the Auto-Updater or directly via the download overview.", "other": {"cve": {"id": "CVE-2021-32712", "sourceIdentifier": "security-advisories@github.com", "published": "2021-06-24T21:15:07.833", "lastModified": "2022-07-02T19:56:58.907", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Shopware is an open source eCommerce platform. Versions prior to 5.6.10 are vulnerable to system information leakage in error handling. Users are recommend to update to version 5.6.10. You can get the update to 5.6.10 regularly via the Auto-Updater or directly via the download overview."}, {"lang": "es", "value": "Shopware es una plataforma de comercio electr\u00f3nico de c\u00f3digo abierto. Unas versiones anteriores a 5.6.10 son vulnerables a la filtraci\u00f3n de informaci\u00f3n del sistema en el manejo de errores. Se recomienda a usuarios actualizar a versi\u00f3n 5.6.10. Puede obtener la actualizaci\u00f3n a versi\u00f3n 5.6.10 regularmente por medio del Auto-Updater o directamente por medio del resumen de descargas"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-209"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shopware:shopware:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.6.10", "matchCriteriaId": "123208B1-959D-462E-A523-A4AFD3CD875A"}]}]}], "references": [{"url": "https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-05-2021", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/shopware/shopware/commit/dcb24eb5ec757c991b5a4e2ddced379e5820744d", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/shopware/shopware/security/advisories/GHSA-9vxv-wpv4-f52p", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/shopware/shopware/commit/dcb24eb5ec757c991b5a4e2ddced379e5820744d"}}