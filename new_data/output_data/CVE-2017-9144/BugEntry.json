{"buggy_code": ["2017-05-10  7.0.5-6 John Cupitt <jcupitt@gmail.com>\n  * Revise DICOM window and rescale handling (reference \n    https://github.com/ImageMagick/ImageMagick/pull/484)\n\n2017-05-06  7.0.5-6 Cristy  <quetzlzacatenango@image...>\n  * Restore the -alpha Shape option (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31879).\n  * Fix transient PDF bug (reference\n    https://github.com/ImageMagick/ImageMagick/issues/463).\n  * The +opaque option now works on all channels (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31862).\n  * Ensure backwards compatibility for the -combine option (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31855).\n\n2017-04-24  7.0.5-5 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.5-5, GIT revision 19915:12eec43:20170424.\n\n2017-03-26  7.0.5-5 Cristy  <quetzlzacatenango@image...>\n  * Minimize buffer copies to improve OpenCL performance.\n  * Morphology thinning is no longer a no-op (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31650).\n  * Patch two PCD writer problems, corrupt output and dark pixels (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=3164).\n  * Support ICC based PDF's (reference\n    https://github.com/ImageMagick/ImageMagick/issues/417).\n  * Fix improper EPS clip path rendering (reference\n    http://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31722).\n\n2017-03-24  7.0.5-4 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.5-4, GIT revision 19754:350fff3:20170324.\n\n2017-03-21  7.0.5-4 Cristy  <quetzlzacatenango@image...>\n  * Respect -loop option for animate -window (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31619).\n\n2017-03-17  7.0.5-3 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.5-3, GIT revision 19741:070c3fb:20170317.\n\n2017-03-14  7.0.5-3 Cristy  <quetzlzacatenango@image...>\n  * Support namespaces for the security policy.\n  * Support the -authenticate option for PDF (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31530).\n\n2017-03-11  7.0.5-2 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.5-2, GIT revision 19696:da91a7c:20170311.\n\n2017-03-06  7.0.5-2 Cristy  <quetzlzacatenango@image...>\n  * Respect throttle policy (reference\n    https://github.com/ImageMagick/ImageMagick/issues/393).\n  * Return proper minima / maxima (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31377).\n\n2017-03-03  7.0.5-1 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.5-1, GIT revision 19662:b7f455a:20170303.\n\n2017-02-21  7.0.5-1 Cristy  <quetzlzacatenango@image...>\n  * Fix Spurious memory allocation message (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31438).\n  * Identical images should return inf for PSNR (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31487).\n\n2017-02-20  7.0.5-0 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.5-0, GIT revision 19616:505fea9:20170220.\n\n2017-02-20  7.0.5-0 Cristy  <quetzlzacatenango@image...>\n  * Fix transient bug with -separate option (reference\n    https://github.com/ImageMagick/ImageMagick/issues/385).\n\n2017-02-18  7.0.4-10 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-10, GIT revision 19608:fe757a2:20170218.\n\n2017-02-18  7.0.4-10 Dirk Lemstra <dirk@lem.....org>\n  * Fixed fd leak for webp coder (reference\n    https://github.com/ImageMagick/ImageMagick/pull/382)\n\n2017-02-15  7.0.4-10 Cristy  <quetzlzacatenango@image...>\n  * Prevent random pixel data for corrupt JPEG image (bug report from\n    Hirokazu Moriguchi, Sony).\n  * Restore -mattecolor option.\n  * Support pixel-cache and shred security policies.\n  * Bump Magick++ SO.  Previously a global replace changed matteColor to\n    alphaColor.\n\n2017-02-14  7.0.4-9 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-9, GIT revision 19580:d474b37:20170214.\n\n2017-02-14  7.0.4-9 Cristy  <quetzlzacatenango@image...>\n  * Revert patch that did not set update trait on alpha channel.\n\n2017-02-13  7.0.4-8 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-8, GIT revision 19574:7642384:20170213.\n\n2017-02-09  7.0.4-8 Dirk Lemstra <dirk@lem.....org>\n  * Fixed memory leak when creating nested exceptions in Magick++ (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=23&p=142634)\n\n2017-02-09  7.0.4-8 Cristy  <quetzlzacatenango@image...>\n  * Unbreak build without JPEG support (reference\n    https://github.com/ImageMagick/ImageMagick/pull/373).\n  * Document behavior change in the security policy (thanks to yoya @\n    https://blog.awm.jp/2017/02/09/imagemagick-en/).\n  * Return unbiased standard deviation for image statistics (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31377).\n  * Don't set update trait on alpha channel (private e-mail concerning\n    -levels-colors option).\n\n2017-02-04  7.0.4-7 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-7, GIT revision 19513:5783e57:20170204.\n\n2017-01-28  7.0.4-7 Cristy  <quetzlzacatenango@image...>\n  * Sanitize comments that include braces for the MIFF image format (reference\n    https://github.com/ImageMagick/ImageMagick/issues/368).\n\n2017-01-27  7.0.4-7 Glenn Randers-Pehrson <glennrp@image...>\n  * coders/png.c: Added support for a proposed new PNG chunk\n    (zxIf, read-only) that is currently being discussed on the\n    png-mng-misc at lists.sourceforge.net mailing list.  Enable\n    exIf and zxIf with CPPFLAGS=\"-DexIf_SUPPORTED -DxzIf_SUPPORTED\".\n    If exIf is enabled, only the uncompressed exIF chunk will be\n    written and the hex-encoded zTXt chunk containing the raw Exif\n    profile won't be written.\n\n2017-01-27  7.0.4-6 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-6, GIT revision 19442:4747de9:20170127.\n\n2017-01-27  7.0.4-6 Cristy  <quetzlzacatenango@image...>\n  * Uninitialized data in MAT image format (reference\n    https://github.com/ImageMagick/ImageMagick/issues/362).\n  * Properly auto-fit caption (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30887).\n  * Correction to composite Over operator (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31282).\n  * Respect gravity option (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31284).\n\n2017-01-22  7.0.4-6 Glenn Randers-Pehrson <glennrp@image...>\n  * Renamed read_vpag_chunk_callback() function to png_user_chunk_callback()\n    in coders/png.c\n  * Implemented a private PNG caNv (canvas) chunk for remembering the\n    original dimensions and offsets when an image is cropped.  Previously\n    we used the oFFs and vpAg chunks for this purpose, but this had potential\n    conflicts with other applications that also use the oFFs chunk.\n  * coders/png.c: Added support for a proposed new PNG chunk (exIf\n    read-write, eXIf read-only) that is currently being discussed on the\n    png-mng-misc at lists.sourceforge.net mailing list.\n\n2017-01-22  7.0.4-6 Dirk Lemstra <dirk@lem.....org>\n  * Replaced CoderSeekableStreamFlag with CoderDecoderSeekableStreamFlag and\n    CoderEncoderSeekableStreamFlag.\n\n2017-01-21  7.0.4-5 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-5, GIT revision 19381:7ae396f:20170121.\n\n2017-01-18  7.0.4-5 Cristy  <quetzlzacatenango@image...>\n  * Don't set background for transparent tiled images (reference\n    http://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31210).\n\n2017-01-14  7.0.4-4 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-4, GIT revision 19361:a12953c:20170114.\n\n2017-01-14  7.0.4-4 Dirk Lemstra <dirk@lem.....org>\n  * Added support for RGB555, RGB565, ARGB4444 and ARGB1555 to the\n    BMP encoder (reference\n    https://github.com/ImageMagick/ImageMagick/issues/344).\n\n2017-01-10  7.0.4-4 Cristy  <quetzlzacatenango@image...>\n  * Recognize XML policy closing tags (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31182).\n  * Fix memory leak in the MPC format.\n\n2017-01-07  7.0.4-3 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-3, GIT revision 19329:930ca78:20170107.\n\n2017-01-04  7.0.4-3 Cristy  <quetzlzacatenango@image...>\n  * Increase memory allocation for TIFF pixels (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31161).\n\n2017-01-03  7.0.4-2 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-2, GIT revision 19318:8766311:20170103.\n\n2017-01-02  7.0.4-2 Cristy  <quetzlzacatenango@image...>\n  * Validation unit test for MNG works again.\n\n2016-12-31  7.0.4-1 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-1, GIT revision 19292:c5ccfa8:20161231.\n\n2016-12-26  7.0.4-1 Cristy  <quetzlzacatenango@image...>\n  * Initialize draw_info alpha member to OpaqueAlpha.\n  * Monochrome images no longer have inverted colors (reference\n    https://github.com/ImageMagick/ImageMagick/issues/332).\n\n2016-12-18  7.0.4-0 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-0, GIT revision 19221:d5e8abc:20161218.\n\n2016-12-14  7.0.4-0 Cristy  <quetzlzacatenango@image...>\n * Do not close path for linejoins of round (reference\n   https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31039).\n\n2016-12-10  7.0.3-10 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-10, GIT revision 19191:338f088:20161210.\n\n2016-12-07  7.0.3-10 Cristy  <quetzlzacatenango@image...>\n  * Set colorspace to sRGB if -append has non-homogenous colorspaces (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29105).\n  * Respect connected-components:area-threshold define (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31006). \n  * Enable alpha channel if background color is non-opaque (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31016).\n  * Return correct offset for negative index for -fx option (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31019).\n  * Fixed improper scaling of certain FITS images (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31028).\n  * Properly center text label (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31027).\n\n2016-12-05  7.0.3-9 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-9, GIT revision 19139:6fed3f1:20161205.\n\n2016-11-26  7.0.3-9 Cristy  <quetzlzacatenango@image...>\n  * Support the compare -read-mask option.\n  * Support read-masks for the -modulate option.\n  * Prevent buffer overflow when streaming an image (reference\n    https://github.com/ImageMagick/ImageMagick/issues/312).\n  * Fix possible buffer overflow when writing compressed TIFFS (vulnerability\n    report from Cisco Talos, CVE-2016-8707).\n\n2016-11-15  7.0.3-8 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-8, GIT revision 19067:5aceded:20161125.\n\n2016-11-18  7.0.3-8 Cristy  <quetzlzacatenango@image...>\n  * Support the phash:colorspaces and phash:normalize options.\n  * If a convenient line break is not found, force it for caption: (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30887).\n  * Set alpha member of draw structure to OpaqueAlpha (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30894).\n  * Off by 1 error when computing the standard deviation (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=2&t=30866).\n  * Apply Debian patches, (reference\n    https://github.com/ImageMagick/ImageMagick/issues/304).\n  * Permit EPT images with just a TIFF or EPS image, not both (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30921).\n  * The -clone option no longer leaks memory.\n  * Render to clip mask rather than image for clip-path MVG graphics primitive.\n\n2016-11-15  7.0.3-7 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-7, GIT revision 19024:87aca83:20161115.\n\n2016-11-10  7.0.3-7 Cristy  <quetzlzacatenango@image...>\n  * Web pages were broken when we moved to HTTPS protocol.\n\n2016-11-08  7.0.3-6 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-6, GIT revision 19001:4cff747:20161108.\n\n2016-11-01  7.0.3-6 Cristy  <quetzlzacatenango@image...>\n  * Off by one memory allocation (reference\n    https://github.com/ImageMagick/ImageMagick/issues/296).\n  * The -extent option now matches the results of IMv6 (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=1&t=30779).\n  * Prevent fault in MSL interpreter (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30797).\n  * Mask composite produces proper results for the convert utility (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29675).\n    \n\n2016-10-10  7.0.3-5 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-5, GIT revision 18975:a8174a2:20161030.\n\n2016-10-16  7.0.3-5 Dirk Lemstra <dirk@lem.....org>\n  * Added layer RLE compression to the PSD encoder.\n\n2016-10-10  7.0.3-4 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-4, GIT revision 18937:83da034:20161010.\n\n2016-10-10  7.0.3-4 Dirk Lemstra <dirk@lem.....org>\n  * Fixed incorrect parsing with ordered dither. (reference\n    https://github.com/ImageMagick/ImageMagick/issues/254)\n\n2016-10-10  7.0.3-4 Cristy  <quetzlzacatenango@image...>\n  * Unit test pass again after small SUN image patch.\n\n2016-10-08  7.0.3-3 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-3, GIT revision 18924:d6614e7:20161008.\n\n2016-10-07  7.0.3-3 Dirk Lemstra <dirk@lem.....org>\n  * Fixed incorrect RLE decoding when reading a DCM image that contains\n    multiple segments.\n\n2016-10-02  7.0.3-2 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-2, GIT revision 18887:6b27c5b:20161002.\n\n2016-09-27  7.0.3-2 Dirk Lemstra <dirk@lem.....org>\n  * Fixed incorrect RLE decoding when reading an SGI image (reference \n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30514)\n\n2016-09-20  7.0.3-1 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-1, GIT revision 18851:ad91ea8:20160920.\n\n2016-09-16  7.0.3-1 Dirk Lemstra <dirk@lem.....org>\n  * Added layer RLE compression to the PSD encoder.\n  * Added define 'psd:preserve-opacity-mask' to preserve the opacity mask\n    in a PSD file.\n  * Fixed issue where the display window was used instead of the data window\n    when reading EXR files (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&p=137849).\n\n2016-09-05  7.0.3-0 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-0, GIT revision 18786:10aa64c:20160905.\n\n2016-08-29  7.0.3-0 Dirk Lemstra <dirk@lem.....org>\n  * Fixed reading DXT1 images with an alpha channel.\n  * Fixed incorrect padding calculation in PSD encoder.\n\n2016-08-27  7.0.2-10 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-10, GIT revision 18750:e3335b3:20160827.\n\n2016-08-27  7.0.2-10 Dirk Lemstra <dirk@lem.....org>\n  * Added define 'psd:additional-info' to preserve the additional information\n    in a PSD file.\n\n2016-08-15  7.0.2-10 Cristy  <quetzlzacatenango@image...>\n  * Prevent buffer overflow in BMP & SGI coders (bug report from\n    pwchen&rayzhong of tencent).\n  * Prevent buffer overflow and other problems in SIXEL, PDB, MAP, TIFF and\n    CALS coders (bug report from Donghai Zhu).\n  * The -stream option now increments the pixel pointer properly (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30327).\n\n2016-08-14  7.0.2-9 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-9, GIT revision 18707:2c02f09:20160814.\n\n2016-08-14  7.0.2-9 Cristy  <quetzlzacatenango@image...>\n  * Fix compile error in opencl.c (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30289).\n  * Eliminate compiler warning.\n\n2016-08-14  7.0.2-8 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-8, GIT revision 18698:74b1d5d:20160814.\n\n2016-08-07  7.0.2-8 Cristy  <quetzlzacatenango@image...>\n  * Prevent spurious removal of MPC cache files (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30256).\n  * Note alpha channel when combining 4 or more images (reference\n    https://github.com/ImageMagick/ImageMagick/issues/250).\n\n2016-08-06  7.0.2-7 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-7, GIT revision 10980:ecc03a2:20160806.\n\n2016-08-01  7.0.2-7 Cristy  <quetzlzacatenango@image...>\n  * Evaluate lazy pixel cache morphology to prevent buffer overflow (bug report\n    from Ibrahim M. El-Sayed).\n  * Prevent buffer overflow (bug report from Max Thrane).\n  * Prevent memory use after free (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30245).\n\n2016-07-30  7.0.2-6 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-6, GIT revision 18651:df24175:20160729.\n\n2016-07-29  7.0.2-6 Cristy  <quetzlzacatenango@image...>\n  * Support -region option (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=1&t=29692).\n\n2016-07-21  7.0.2-5 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-5, GIT revision 18627:2b5ddbd:20160721.\n\n2016-07-13  7.0.2-5 Cristy  <quetzlzacatenango@image...>\n  * Fix MVG stroke-opacity (reference\n    https://github.com/ImageMagick/ImageMagick/issues/229).\n  * Prevent possible buffer overflow when reading TIFF images (bug report from\n    Shi Pu of MS509 Team).\n  * Initialize index channel to get expected results from the stegano coder.\n\n2016-07-11  7.0.2-4 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-4, GIT revision 18591:50debe5:20160710.\n\n2016-07-10  7.0.2-4 Cristy  <quetzlzacatenango@image...>\n  * To comply with the SVG standard, use stroke-opacity for transparent strokes.\n  * Define CompositeChannels mask to Red, Green, Blue, Alpha, and Black.\n\n2016-07-09  7.0.2-3 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-3, GIT revision 18572:28560fc:20160709.\n\n2016-07-01  7.0.2-3 Cristy  <quetzlzacatenango@image...>\n  * Patch so -kuwahara option can preserve colormapped edges.\n  * The histogram coder now returns the correct extent.\n  * Use CopyMagickString() rather than CopyMagickMemory() for strings.\n\n2016-06-26  7.0.2-2 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-2, GIT revision 18514:a7b5b46:20160626.\n\n2016-06-23  7.0.2-2 Cristy  <quetzlzacatenango@image...>\n  * Correct for numerical instability (reference\n    https://github.com/ImageMagick/ImageMagick/issues/218).\n\t\t\t \n2016-06-21  7.0.2-1 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-1, GIT revision 18479:931319b:20160622.\n\n2016-06-17  7.0.2-1 Dirk Lemstra <dirk@lem.....org>\n  * Added support for GROUP4 compression to the FAX coder.\n\n2016-06-12  7.0.2-1 Cristy  <quetzlzacatenango@image...>\n  * Distort no longer converts grayscale image to sRGB (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=1&t=29895).\n  * Don't return a zero bounding box for QueryMultilineFontMetrics() (reference\n    https://github.com/ImageMagick/ImageMagick/issues/222).\n\n2016-06-12  7.0.2-0 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-0, GIT revision 10884:f0e15e8:20160612.\n\n2016-06-09  7.0.2-0 Cristy  <quetzlzacatenango@image...>\n  * Backoff finite precision epsilon (reference\n    https://github.com/ImageMagick/ImageMagick/issues/215).\n  * Fix drawing glitch for stroke widths greater than 2 (reference\n    https://github.com/ImageMagick/ImageMagick/issues/218).\n\n2016-06-05  7.0.1-10 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-10, GIT revision 18406:ba4ad2d:20160607.\n\n2016-06-04  7.0.1-10 Cristy  <quetzlzacatenango@image...>\n  * Deny indirect reads by policy, remove policy to permit, e.g.,\n    convert caption:@mytext.txt ...\n  * RLE check for pixel offset less than 0 (heap overflow report from Craig\n    Young).\n  * Properly initialze PES blocks (reference\n    https://github.com/ImageMagick/ImageMagick/issues/213).\n\n2016-06-03  7.0.1-9 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-9, GIT revision 10847:339f803:20160602.\n\n2016-06-02  7.0.1-9 Cristy  <quetzlzacatenango@image...>\n  * Fix small memory leak (patch provided by \u0410\u043d\u0434\u0440\u0435\u0439 \u0427\u0435\u0440\u043d\u044b\u0439).\n  * Coder path traversal is not authorized (bug report provided by\n    Masaaki Chida).\n  * Turn off alpha channel for the compare difference image (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29828).\n\n2016-05-31  7.0.1-8 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-8, GIT revision 18334:97775b5:20160531.\n\n2016-05-31  7.0.1-8 Cristy  <quetzlzacatenango@image...>\n  * Support configure script --enable-pipes option to enable pipes (|) in\n    filenames.\n  * Support configure script --enable-indirect-reads option to enable\n    indirect reads (@) in filenames.\n\n2016-05-30  7.0.1-7 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-7, GIT revision 18321:5511ef5:20160530.\n\n2016-05-25  7.0.1-7 Cristy  <quetzlzacatenango@image...>\n  * Security improvements to TEXT coder broke it (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29754).\n  * Fix stroke offset problem for -annotate (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29626).\n  * Don't interpret -fx option arguments (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29774);\n  * Add additional checks to DCM reader to prevent data-driven faults (bug\n    report from Hanno B\u00f6ck).\n\n2016-05-21  7.0.1-6 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-6, GIT revision 18241:d4f277c:20160521.\n\n2016-05-20  7.0.1-6 Cristy  <quetzlzacatenango@image...>\n  * Fixed proper placement of text annotation for east / west gravity.\n\n2016-05-18  7.0.1-5 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-5, GIT revision 10789:f7c2e89:20160518,\n\n2016-05-18  7.0.1-5 Cristy  <quetzlzacatenango@image...>\n  * Process channels independently for -channel -equalize (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29708).\n  * Fix pixel cache on disk regression (reference\n    https://github.com/ImageMagick/ImageMagick/issues/202).\n\n2016-05-15  7.0.1-4 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-4, GIT revision 10778:52dae14:20160516.\n\n2016-05-10  7.0.1-4 Cristy  <quetzlzacatenango@image...>\n  * Prevent possible shell command injection vulnerability through the\n    authenticate parameter of the PDF, PCL and XPS coders (report from\n    Erez Turjeman).\n  * Quote passwords when passed to a delegate program.\n  * Iterate channels over source image rather than destination (bug report\n    from Hanno B\u00f6ck).\n  * Can read geo-related EXIF metdata once-again (reference\n    https://github.com/ImageMagick/ImageMagick/issues/198).\n  * Sanitize all delegate emedded formatting characters.\n  * Don't sync pixel cache in AcquireAuthenticCacheView() (bug report from\n    Hanno B\u00f6ck).\n\n2016-05-09  7.0.1-3 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-3, GIT revision 10755:d540dda:20160509.\n\n2016-05-07  7.0.1-3 Cristy  <quetzlzacatenango@image...>\n  * Remove https delegate.\n\n2016-05-06  7.0.1-2 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-2, GIT revision 10741:5746147:20160507.\n\n2016-05-04  7.0.1-2 Cristy  <quetzlzacatenango@image...>\n  * Check for buffer overflow in magick/draw.c/DrawStrokePolygon().\n  * Replace show delegate title with image filename rather than label.\n  * Fix GetNextToken() off by one error.\n  * Remove support for internal ephemeral coder.\n\n2016-05-03  7.0.1-1 Cristy  <quetzlzacatenango@image...>\n  * New version 7.0.1-1, GIT revision 10723:9fc8a0c:20160503.\n\n2016-05-03  7.0.1-1 Cristy  <quetzlzacatenango@image...>\n  * Sanitize input filename for http / https delegates (improved patch).\n  * Fix for possible security vulnerabilities (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=4&t=29588).\n\n2016-04-30  7.0.1-0 Cristy  <quetzlzacatenango@image...>\n  * New version 7.0.1-0, GIT revision 10716:b527bce:20160430.\n\n2016-01-30  7.0.0-0 \tFahad-Alsaidi & ShamsaHamed\n  * Add support for languages that require complex text layout (reference\n    https://github.com/ImageMagick/ImageMagick/pull/88).\n\n2012-04-27  7.0.0-0 Anthony thyssen <A.Thyssen@griffith...>\n  * Allow the use of set and escapes when no images in memory\n    (unless you attempt to access per-image meta-data)\n    Currently does not include %[fx:...] and %[pixel:...]\n\n2012-10-05  7.0.0-0 Anthony thyssen <A.Thyssen@griffith...>\n  * Rather than replicate 'options' into 'artifacts' make a link\n    from image to image_info and lookup a global option if no artifact\n    is defined.\n\n2012-09-11  7.0.0-0 Nicolas Robidoux <nicolas.robidoux@gmail...>\n  * sigmoidal-contrast:\n  * Remove unnecessary initial ClampToQuantum.\n\n2012-09-10  7.0.0-0 Nicolas Robidoux <nicolas.robidoux@gmail...>\n  * sigmoidal-contrast:\n  * Direct computation, without LUT;\n  * Fix re-declaration of i (at the top, and inside a conditional).\n\n2012-09-04  7.0.0-0 Nicolas Robidoux <nicolas.robidoux@gmail...>\n  * Add tanh/atanh clone of legacy sigmoidal map (faster & more accurate).\n\n2012-08-08  7.0.0-0 Nicolas Robidoux <nicolas.robidoux@gmail...>\n  * Add final ClampToQuantum in sigmoidal colormap loop.\n  * Remove OpenMP calls from colormap update loops.\n\n2011-08-01  7.0.0-0 Cristy  <quetzlzacatenango@image...>\n  * New version 7.0.0-0.\n\n", "/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%                            RRRR   L      EEEEE                              %\n%                            R   R  L      E                                  %\n%                            RRRR   L      EEE                                %\n%                            R R    L      E                                  %\n%                            R  R   LLLLL  EEEEE                              %\n%                                                                             %\n%                                                                             %\n%                          Read URT RLE Image Format                          %\n%                                                                             %\n%                              Software Design                                %\n%                                   Cristy                                    %\n%                                 July 1992                                   %\n%                                                                             %\n%                                                                             %\n%  Copyright 1999-2017 ImageMagick Studio LLC, a non-profit organization      %\n%  dedicated to making software imaging solutions freely available.           %\n%                                                                             %\n%  You may not use this file except in compliance with the License.  You may  %\n%  obtain a copy of the License at                                            %\n%                                                                             %\n%    https://www.imagemagick.org/script/license.php                           %\n%                                                                             %\n%  Unless required by applicable law or agreed to in writing, software        %\n%  distributed under the License is distributed on an \"AS IS\" BASIS,          %\n%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   %\n%  See the License for the specific language governing permissions and        %\n%  limitations under the License.                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%\n*/\n\f\n/*\n  Include declarations.\n*/\n#include \"MagickCore/studio.h\"\n#include \"MagickCore/blob.h\"\n#include \"MagickCore/blob-private.h\"\n#include \"MagickCore/cache.h\"\n#include \"MagickCore/colormap.h\"\n#include \"MagickCore/colormap-private.h\"\n#include \"MagickCore/exception.h\"\n#include \"MagickCore/exception-private.h\"\n#include \"MagickCore/image.h\"\n#include \"MagickCore/image-private.h\"\n#include \"MagickCore/list.h\"\n#include \"MagickCore/magick.h\"\n#include \"MagickCore/memory_.h\"\n#include \"MagickCore/monitor.h\"\n#include \"MagickCore/monitor-private.h\"\n#include \"MagickCore/pixel-accessor.h\"\n#include \"MagickCore/pixel.h\"\n#include \"MagickCore/property.h\"\n#include \"MagickCore/quantum-private.h\"\n#include \"MagickCore/static.h\"\n#include \"MagickCore/string_.h\"\n#include \"MagickCore/module.h\"\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   I s R L E                                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  IsRLE() returns MagickTrue if the image format type, identified by the\n%  magick string, is RLE.\n%\n%  The format of the ReadRLEImage method is:\n%\n%      MagickBooleanType IsRLE(const unsigned char *magick,const size_t length)\n%\n%  A description of each parameter follows:\n%\n%    o magick: compare image format pattern against these bytes.\n%\n%    o length: Specifies the length of the magick string.\n%\n%\n*/\nstatic MagickBooleanType IsRLE(const unsigned char *magick,const size_t length)\n{\n  if (length < 2)\n    return(MagickFalse);\n  if (memcmp(magick,\"\\122\\314\",2) == 0)\n    return(MagickTrue);\n  return(MagickFalse);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   R e a d R L E I m a g e                                                   %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ReadRLEImage() reads a run-length encoded Utah Raster Toolkit\n%  image file and returns it.  It allocates the memory necessary for the new\n%  Image structure and returns a pointer to the new image.\n%\n%  The format of the ReadRLEImage method is:\n%\n%      Image *ReadRLEImage(const ImageInfo *image_info,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image_info: the image info.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n%\n*/\nstatic Image *ReadRLEImage(const ImageInfo *image_info,ExceptionInfo *exception)\n{\n#define SkipLinesOp  0x01\n#define SetColorOp  0x02\n#define SkipPixelsOp  0x03\n#define ByteDataOp  0x05\n#define RunDataOp  0x06\n#define EOFOp  0x07\n\n  char\n    magick[12];\n\n  Image\n    *image;\n\n  int\n    opcode,\n    operand,\n    status;\n\n  MagickStatusType\n    flags;\n\n  MagickSizeType\n    number_pixels;\n\n  MemoryInfo\n    *pixel_info;\n\n  Quantum\n    index;\n\n  register ssize_t\n    x;\n\n  register Quantum\n    *q;\n\n  register ssize_t\n    i;\n\n  register unsigned char\n    *p;\n\n  size_t\n    bits_per_pixel,\n    map_length,\n    number_colormaps,\n    number_planes,\n    number_planes_filled,\n    one,\n    pixel_info_length;\n\n  ssize_t\n    count,\n    offset,\n    y;\n\n  unsigned char\n    background_color[256],\n    *colormap,\n    pixel,\n    plane,\n    *pixels;\n\n  /*\n    Open image file.\n  */\n  assert(image_info != (const ImageInfo *) NULL);\n  assert(image_info->signature == MagickCoreSignature);\n  if (image_info->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\n      image_info->filename);\n  assert(exception != (ExceptionInfo *) NULL);\n  assert(exception->signature == MagickCoreSignature);\n  image=AcquireImage(image_info,exception);\n  status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);\n  if (status == MagickFalse)\n    return(DestroyImageList(image));\n  /*\n    Determine if this a RLE file.\n  */\n  count=ReadBlob(image,2,(unsigned char *) magick);\n  if ((count != 2) || (memcmp(magick,\"\\122\\314\",2) != 0))\n    ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n  do\n  {\n    /*\n      Read image header.\n    */\n    image->page.x=ReadBlobLSBShort(image);\n    image->page.y=ReadBlobLSBShort(image);\n    image->columns=ReadBlobLSBShort(image);\n    image->rows=ReadBlobLSBShort(image);\n    flags=(MagickStatusType) ReadBlobByte(image);\n    image->alpha_trait=flags & 0x04 ? BlendPixelTrait : UndefinedPixelTrait;\n    number_planes=(size_t) ReadBlobByte(image);\n    bits_per_pixel=(size_t) ReadBlobByte(image);\n    number_colormaps=(size_t) ReadBlobByte(image);\n    map_length=(unsigned char) ReadBlobByte(image);\n    if (map_length >= 22)\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    one=1;\n    map_length=one << map_length;\n    if ((number_planes == 0) || (number_planes == 2) ||\n        ((flags & 0x04) && (number_colormaps > 254)) || (bits_per_pixel != 8) ||\n        (image->columns == 0))\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    if (flags & 0x02)\n      {\n        /*\n          No background color-- initialize to black.\n        */\n        for (i=0; i < (ssize_t) number_planes; i++)\n          background_color[i]=0;\n        (void) ReadBlobByte(image);\n      }\n    else\n      {\n        /*\n          Initialize background color.\n        */\n        p=background_color;\n        for (i=0; i < (ssize_t) number_planes; i++)\n          *p++=(unsigned char) ReadBlobByte(image);\n      }\n    if ((number_planes & 0x01) == 0)\n      (void) ReadBlobByte(image);\n    if (EOFBlob(image) != MagickFalse)\n      {\n        ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\",\n          image->filename);\n        break;\n      }\n    colormap=(unsigned char *) NULL;\n    if (number_colormaps != 0)\n      {\n        /*\n          Read image colormaps.\n        */\n        colormap=(unsigned char *) AcquireQuantumMemory(number_colormaps,\n          3*map_length*sizeof(*colormap));\n        if (colormap == (unsigned char *) NULL)\n          ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n        p=colormap;\n        for (i=0; i < (ssize_t) number_colormaps; i++)\n          for (x=0; x < (ssize_t) map_length; x++)\n            *p++=(unsigned char) ScaleQuantumToChar(ScaleShortToQuantum(\n              ReadBlobLSBShort(image)));\n      }\n    if ((flags & 0x08) != 0)\n      {\n        char\n          *comment;\n\n        size_t\n          length;\n\n        /*\n          Read image comment.\n        */\n        length=ReadBlobLSBShort(image);\n        if (length != 0)\n          {\n            comment=(char *) AcquireQuantumMemory(length,sizeof(*comment));\n            if (comment == (char *) NULL)\n              ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n            count=ReadBlob(image,length-1,(unsigned char *) comment);\n            comment[length-1]='\\0';\n            (void) SetImageProperty(image,\"comment\",comment,exception);\n            comment=DestroyString(comment);\n            if ((length & 0x01) == 0)\n              (void) ReadBlobByte(image);\n          }\n      }\n    if (EOFBlob(image) != MagickFalse)\n      {\n        ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\",\n          image->filename);\n        break;\n      }\n    if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))\n      if (image->scene >= (image_info->scene+image_info->number_scenes-1))\n        break;\n    status=SetImageExtent(image,image->columns,image->rows,exception);\n    if (status == MagickFalse)\n      return(DestroyImageList(image));\n    /*\n      Allocate RLE pixels.\n    */\n    if (image->alpha_trait != UndefinedPixelTrait)\n      number_planes++;\n    number_pixels=(MagickSizeType) image->columns*image->rows;\n    number_planes_filled=(number_planes % 2 == 0) ? number_planes :\n      number_planes+1;\n    if ((number_pixels*number_planes_filled) != (size_t) (number_pixels*\n         number_planes_filled))\n      ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n    pixel_info=AcquireVirtualMemory(image->columns,image->rows*\n      MagickMax(number_planes_filled,4)*sizeof(*pixels));\n    if (pixel_info == (MemoryInfo *) NULL)\n      ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n    pixel_info_length=image->columns*image->rows*\n      MagickMax(number_planes_filled,4);\n    pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);\n    (void) ResetMagickMemory(pixels,0,pixel_info_length);\n    if ((flags & 0x01) && !(flags & 0x02))\n      {\n        ssize_t\n          j;\n\n        /*\n          Set background color.\n        */\n        p=pixels;\n        for (i=0; i < (ssize_t) number_pixels; i++)\n        {\n          if (image->alpha_trait == UndefinedPixelTrait)\n            for (j=0; j < (ssize_t) number_planes; j++)\n              *p++=background_color[j];\n          else\n            {\n              for (j=0; j < (ssize_t) (number_planes-1); j++)\n                *p++=background_color[j];\n              *p++=0;  /* initialize matte channel */\n            }\n        }\n      }\n    /*\n      Read runlength-encoded image.\n    */\n    plane=0;\n    x=0;\n    y=0;\n    opcode=ReadBlobByte(image);\n    do\n    {\n      switch (opcode & 0x3f)\n      {\n        case SkipLinesOp:\n        {\n          operand=ReadBlobByte(image);\n          if (opcode & 0x40)\n            operand=ReadBlobLSBSignedShort(image);\n          x=0;\n          y+=operand;\n          break;\n        }\n        case SetColorOp:\n        {\n          operand=ReadBlobByte(image);\n          plane=(unsigned char) operand;\n          if (plane == 255)\n            plane=(unsigned char) (number_planes-1);\n          x=0;\n          break;\n        }\n        case SkipPixelsOp:\n        {\n          operand=ReadBlobByte(image);\n          if (opcode & 0x40)\n            operand=ReadBlobLSBSignedShort(image);\n          x+=operand;\n          break;\n        }\n        case ByteDataOp:\n        {\n          operand=ReadBlobByte(image);\n          if (opcode & 0x40)\n            operand=ReadBlobLSBSignedShort(image);\n          offset=((image->rows-y-1)*image->columns*number_planes)+x*\n            number_planes+plane;\n          operand++;\n          if ((offset < 0) ||\n              (offset+((size_t) operand*number_planes) > pixel_info_length))\n            {\n              if (number_colormaps != 0)\n                colormap=(unsigned char *) RelinquishMagickMemory(colormap);\n              pixel_info=RelinquishVirtualMemory(pixel_info);\n              ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");\n            }\n          p=pixels+offset;\n          for (i=0; i < (ssize_t) operand; i++)\n          {\n            pixel=(unsigned char) ReadBlobByte(image);\n            if ((y < (ssize_t) image->rows) &&\n                ((x+i) < (ssize_t) image->columns))\n              *p=pixel;\n            p+=number_planes;\n          }\n          if (operand & 0x01)\n            (void) ReadBlobByte(image);\n          x+=operand;\n          break;\n        }\n        case RunDataOp:\n        {\n          operand=ReadBlobByte(image);\n          if (opcode & 0x40)\n            operand=ReadBlobLSBSignedShort(image);\n          pixel=(unsigned char) ReadBlobByte(image);\n          (void) ReadBlobByte(image);\n          offset=((image->rows-y-1)*image->columns*number_planes)+x*\n            number_planes+plane;\n          operand++;\n          if ((offset < 0) ||\n              (offset+((size_t) operand*number_planes) > pixel_info_length))\n            {\n              if (number_colormaps != 0)\n                colormap=(unsigned char *) RelinquishMagickMemory(colormap);\n              pixel_info=RelinquishVirtualMemory(pixel_info);\n              ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");\n            }\n          p=pixels+offset;\n          for (i=0; i < (ssize_t) operand; i++)\n          {\n            if ((y < (ssize_t) image->rows) &&\n                ((x+i) < (ssize_t) image->columns))\n              *p=pixel;\n            p+=number_planes;\n          }\n          x+=operand;\n          break;\n        }\n        default:\n          break;\n      }\n      opcode=ReadBlobByte(image);\n    } while (((opcode & 0x3f) != EOFOp) && (opcode != EOF));\n    if (number_colormaps != 0)\n      {\n        MagickStatusType\n          mask;\n\n        /*\n          Apply colormap affineation to image.\n        */\n        mask=(MagickStatusType) (map_length-1);\n        p=pixels;\n        x=(ssize_t) number_planes;\n        if (number_colormaps == 1)\n          for (i=0; i < (ssize_t) number_pixels; i++)\n          {\n            ValidateColormapValue(image,*p & mask,&index,exception);\n            *p=colormap[(ssize_t) index];\n            p++;\n          }\n        else\n          if ((number_planes >= 3) && (number_colormaps >= 3))\n            for (i=0; i < (ssize_t) number_pixels; i++)\n              for (x=0; x < (ssize_t) number_planes; x++)\n              {\n                ValidateColormapValue(image,(size_t) (x*map_length+\n                  (*p & mask)),&index,exception);\n                *p=colormap[(ssize_t) index];\n                p++;\n              }\n        if ((i < (ssize_t) number_pixels) || (x < (ssize_t) number_planes))\n          {\n            colormap=(unsigned char *) RelinquishMagickMemory(colormap);\n            pixel_info=RelinquishVirtualMemory(pixel_info);\n            ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");\n          }\n      }\n    /*\n      Initialize image structure.\n    */\n    if (number_planes >= 3)\n      {\n        /*\n          Convert raster image to DirectClass pixel packets.\n        */\n        p=pixels;\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            SetPixelRed(image,ScaleCharToQuantum(*p++),q);\n            SetPixelGreen(image,ScaleCharToQuantum(*p++),q);\n            SetPixelBlue(image,ScaleCharToQuantum(*p++),q);\n            if (image->alpha_trait != UndefinedPixelTrait)\n              SetPixelAlpha(image,ScaleCharToQuantum(*p++),q);\n            q+=GetPixelChannels(image);\n          }\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n      }\n    else\n      {\n        /*\n          Create colormap.\n        */\n        if (number_colormaps == 0)\n          map_length=256;\n        if (AcquireImageColormap(image,map_length,exception) == MagickFalse)\n          ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n        p=colormap;\n        if (number_colormaps == 1)\n          for (i=0; i < (ssize_t) image->colors; i++)\n          {\n            /*\n              Pseudocolor.\n            */\n            image->colormap[i].red=(MagickRealType)\n              ScaleCharToQuantum((unsigned char) i);\n            image->colormap[i].green=(MagickRealType)\n              ScaleCharToQuantum((unsigned char) i);\n            image->colormap[i].blue=(MagickRealType)\n              ScaleCharToQuantum((unsigned char) i);\n          }\n        else\n          if (number_colormaps > 1)\n            for (i=0; i < (ssize_t) image->colors; i++)\n            {\n              image->colormap[i].red=(MagickRealType)\n                ScaleCharToQuantum(*p);\n              image->colormap[i].green=(MagickRealType)\n                ScaleCharToQuantum(*(p+map_length));\n              image->colormap[i].blue=(MagickRealType)\n                ScaleCharToQuantum(*(p+map_length*2));\n              p++;\n            }\n        p=pixels;\n        if (image->alpha_trait == UndefinedPixelTrait)\n          {\n            /*\n              Convert raster image to PseudoClass pixel packets.\n            */\n            for (y=0; y < (ssize_t) image->rows; y++)\n            {\n              q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n              if (q == (Quantum *) NULL)\n                break;\n              for (x=0; x < (ssize_t) image->columns; x++)\n              {\n                SetPixelIndex(image,*p++,q);\n                q+=GetPixelChannels(image);\n              }\n              if (SyncAuthenticPixels(image,exception) == MagickFalse)\n                break;\n              if (image->previous == (Image *) NULL)\n                {\n                  status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)\n                    y,image->rows);\n                  if (status == MagickFalse)\n                    break;\n                }\n            }\n            (void) SyncImage(image,exception);\n          }\n        else\n          {\n            /*\n              Image has a matte channel-- promote to DirectClass.\n            */\n            for (y=0; y < (ssize_t) image->rows; y++)\n            {\n              q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n              if (q == (Quantum *) NULL)\n                break;\n              for (x=0; x < (ssize_t) image->columns; x++)\n              {\n                ValidateColormapValue(image,(ssize_t) *p++,&index,exception);\n                SetPixelRed(image,ClampToQuantum(image->colormap[(ssize_t)\n                  index].red),q);\n                ValidateColormapValue(image,(ssize_t) *p++,&index,exception);\n                SetPixelGreen(image,ClampToQuantum(image->colormap[(ssize_t)\n                  index].green),q);\n                ValidateColormapValue(image,(ssize_t) *p++,&index,exception);\n                SetPixelBlue(image,ClampToQuantum(image->colormap[(ssize_t)\n                  index].blue),q);\n                SetPixelAlpha(image,ScaleCharToQuantum(*p++),q);\n                q+=GetPixelChannels(image);\n              }\n              if (x < (ssize_t) image->columns)\n                break;\n              if (SyncAuthenticPixels(image,exception) == MagickFalse)\n                break;\n              if (image->previous == (Image *) NULL)\n                {\n                  status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)\n                    y,image->rows);\n                  if (status == MagickFalse)\n                    break;\n                }\n            }\n            image->colormap=(PixelInfo *) RelinquishMagickMemory(\n              image->colormap);\n            image->storage_class=DirectClass;\n            image->colors=0;\n          }\n      }\n    if (number_colormaps != 0)\n      colormap=(unsigned char *) RelinquishMagickMemory(colormap);\n    pixel_info=RelinquishVirtualMemory(pixel_info);\n    if (EOFBlob(image) != MagickFalse)\n      {\n        ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\",\n          image->filename);\n        break;\n      }\n    /*\n      Proceed to next image.\n    */\n    if (image_info->number_scenes != 0)\n      if (image->scene >= (image_info->scene+image_info->number_scenes-1))\n        break;\n    (void) ReadBlobByte(image);\n    count=ReadBlob(image,2,(unsigned char *) magick);\n    if ((count != 0) && (memcmp(magick,\"\\122\\314\",2) == 0))\n      {\n        /*\n          Allocate next image structure.\n        */\n        AcquireNextImage(image_info,image,exception);\n        if (GetNextImageInList(image) == (Image *) NULL)\n          {\n            image=DestroyImageList(image);\n            return((Image *) NULL);\n          }\n        image=SyncNextImageInList(image);\n        status=SetImageProgress(image,LoadImagesTag,TellBlob(image),\n          GetBlobSize(image));\n        if (status == MagickFalse)\n          break;\n      }\n  } while ((count != 0) && (memcmp(magick,\"\\122\\314\",2) == 0));\n  (void) CloseBlob(image);\n  return(GetFirstImageInList(image));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   R e g i s t e r R L E I m a g e                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  RegisterRLEImage() adds attributes for the RLE image format to\n%  the list of supported formats.  The attributes include the image format\n%  tag, a method to read and/or write the format, whether the format\n%  supports the saving of more than one frame to the same file or blob,\n%  whether the format supports native in-memory I/O, and a brief\n%  description of the format.\n%\n%  The format of the RegisterRLEImage method is:\n%\n%      size_t RegisterRLEImage(void)\n%\n*/\nModuleExport size_t RegisterRLEImage(void)\n{\n  MagickInfo\n    *entry;\n\n  entry=AcquireMagickInfo(\"RLE\",\"RLE\",\"Utah Run length encoded image\");\n  entry->decoder=(DecodeImageHandler *) ReadRLEImage;\n  entry->magick=(IsImageFormatHandler *) IsRLE;\n  entry->flags^=CoderAdjoinFlag;\n  (void) RegisterMagickInfo(entry);\n  return(MagickImageCoderSignature);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   U n r e g i s t e r R L E I m a g e                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  UnregisterRLEImage() removes format registrations made by the\n%  RLE module from the list of supported formats.\n%\n%  The format of the UnregisterRLEImage method is:\n%\n%      UnregisterRLEImage(void)\n%\n*/\nModuleExport void UnregisterRLEImage(void)\n{\n  (void) UnregisterMagickInfo(\"RLE\");\n}\n"], "fixing_code": ["2017-05-10  7.0.5-6 John Cupitt <jcupitt@gmail.com>\n  * Revise DICOM window and rescale handling (reference \n    https://github.com/ImageMagick/ImageMagick/pull/484)\n\n2017-05-06  7.0.5-6 Cristy  <quetzlzacatenango@image...>\n  * Restore the -alpha Shape option (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31879).\n  * Fix transient PDF bug (reference\n    https://github.com/ImageMagick/ImageMagick/issues/463).\n  * The +opaque option now works on all channels (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31862).\n  * Ensure backwards compatibility for the -combine option (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31855).\n  * Check for EOF conditions for RLE image format.\n\n2017-04-24  7.0.5-5 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.5-5, GIT revision 19915:12eec43:20170424.\n\n2017-03-26  7.0.5-5 Cristy  <quetzlzacatenango@image...>\n  * Minimize buffer copies to improve OpenCL performance.\n  * Morphology thinning is no longer a no-op (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31650).\n  * Patch two PCD writer problems, corrupt output and dark pixels (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=3164).\n  * Support ICC based PDF's (reference\n    https://github.com/ImageMagick/ImageMagick/issues/417).\n  * Fix improper EPS clip path rendering (reference\n    http://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31722).\n\n2017-03-24  7.0.5-4 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.5-4, GIT revision 19754:350fff3:20170324.\n\n2017-03-21  7.0.5-4 Cristy  <quetzlzacatenango@image...>\n  * Respect -loop option for animate -window (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31619).\n\n2017-03-17  7.0.5-3 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.5-3, GIT revision 19741:070c3fb:20170317.\n\n2017-03-14  7.0.5-3 Cristy  <quetzlzacatenango@image...>\n  * Support namespaces for the security policy.\n  * Support the -authenticate option for PDF (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31530).\n\n2017-03-11  7.0.5-2 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.5-2, GIT revision 19696:da91a7c:20170311.\n\n2017-03-06  7.0.5-2 Cristy  <quetzlzacatenango@image...>\n  * Respect throttle policy (reference\n    https://github.com/ImageMagick/ImageMagick/issues/393).\n  * Return proper minima / maxima (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31377).\n\n2017-03-03  7.0.5-1 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.5-1, GIT revision 19662:b7f455a:20170303.\n\n2017-02-21  7.0.5-1 Cristy  <quetzlzacatenango@image...>\n  * Fix Spurious memory allocation message (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31438).\n  * Identical images should return inf for PSNR (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31487).\n\n2017-02-20  7.0.5-0 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.5-0, GIT revision 19616:505fea9:20170220.\n\n2017-02-20  7.0.5-0 Cristy  <quetzlzacatenango@image...>\n  * Fix transient bug with -separate option (reference\n    https://github.com/ImageMagick/ImageMagick/issues/385).\n\n2017-02-18  7.0.4-10 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-10, GIT revision 19608:fe757a2:20170218.\n\n2017-02-18  7.0.4-10 Dirk Lemstra <dirk@lem.....org>\n  * Fixed fd leak for webp coder (reference\n    https://github.com/ImageMagick/ImageMagick/pull/382)\n\n2017-02-15  7.0.4-10 Cristy  <quetzlzacatenango@image...>\n  * Prevent random pixel data for corrupt JPEG image (bug report from\n    Hirokazu Moriguchi, Sony).\n  * Restore -mattecolor option.\n  * Support pixel-cache and shred security policies.\n  * Bump Magick++ SO.  Previously a global replace changed matteColor to\n    alphaColor.\n\n2017-02-14  7.0.4-9 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-9, GIT revision 19580:d474b37:20170214.\n\n2017-02-14  7.0.4-9 Cristy  <quetzlzacatenango@image...>\n  * Revert patch that did not set update trait on alpha channel.\n\n2017-02-13  7.0.4-8 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-8, GIT revision 19574:7642384:20170213.\n\n2017-02-09  7.0.4-8 Dirk Lemstra <dirk@lem.....org>\n  * Fixed memory leak when creating nested exceptions in Magick++ (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=23&p=142634)\n\n2017-02-09  7.0.4-8 Cristy  <quetzlzacatenango@image...>\n  * Unbreak build without JPEG support (reference\n    https://github.com/ImageMagick/ImageMagick/pull/373).\n  * Document behavior change in the security policy (thanks to yoya @\n    https://blog.awm.jp/2017/02/09/imagemagick-en/).\n  * Return unbiased standard deviation for image statistics (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31377).\n  * Don't set update trait on alpha channel (private e-mail concerning\n    -levels-colors option).\n\n2017-02-04  7.0.4-7 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-7, GIT revision 19513:5783e57:20170204.\n\n2017-01-28  7.0.4-7 Cristy  <quetzlzacatenango@image...>\n  * Sanitize comments that include braces for the MIFF image format (reference\n    https://github.com/ImageMagick/ImageMagick/issues/368).\n\n2017-01-27  7.0.4-7 Glenn Randers-Pehrson <glennrp@image...>\n  * coders/png.c: Added support for a proposed new PNG chunk\n    (zxIf, read-only) that is currently being discussed on the\n    png-mng-misc at lists.sourceforge.net mailing list.  Enable\n    exIf and zxIf with CPPFLAGS=\"-DexIf_SUPPORTED -DxzIf_SUPPORTED\".\n    If exIf is enabled, only the uncompressed exIF chunk will be\n    written and the hex-encoded zTXt chunk containing the raw Exif\n    profile won't be written.\n\n2017-01-27  7.0.4-6 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-6, GIT revision 19442:4747de9:20170127.\n\n2017-01-27  7.0.4-6 Cristy  <quetzlzacatenango@image...>\n  * Uninitialized data in MAT image format (reference\n    https://github.com/ImageMagick/ImageMagick/issues/362).\n  * Properly auto-fit caption (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30887).\n  * Correction to composite Over operator (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31282).\n  * Respect gravity option (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31284).\n\n2017-01-22  7.0.4-6 Glenn Randers-Pehrson <glennrp@image...>\n  * Renamed read_vpag_chunk_callback() function to png_user_chunk_callback()\n    in coders/png.c\n  * Implemented a private PNG caNv (canvas) chunk for remembering the\n    original dimensions and offsets when an image is cropped.  Previously\n    we used the oFFs and vpAg chunks for this purpose, but this had potential\n    conflicts with other applications that also use the oFFs chunk.\n  * coders/png.c: Added support for a proposed new PNG chunk (exIf\n    read-write, eXIf read-only) that is currently being discussed on the\n    png-mng-misc at lists.sourceforge.net mailing list.\n\n2017-01-22  7.0.4-6 Dirk Lemstra <dirk@lem.....org>\n  * Replaced CoderSeekableStreamFlag with CoderDecoderSeekableStreamFlag and\n    CoderEncoderSeekableStreamFlag.\n\n2017-01-21  7.0.4-5 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-5, GIT revision 19381:7ae396f:20170121.\n\n2017-01-18  7.0.4-5 Cristy  <quetzlzacatenango@image...>\n  * Don't set background for transparent tiled images (reference\n    http://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31210).\n\n2017-01-14  7.0.4-4 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-4, GIT revision 19361:a12953c:20170114.\n\n2017-01-14  7.0.4-4 Dirk Lemstra <dirk@lem.....org>\n  * Added support for RGB555, RGB565, ARGB4444 and ARGB1555 to the\n    BMP encoder (reference\n    https://github.com/ImageMagick/ImageMagick/issues/344).\n\n2017-01-10  7.0.4-4 Cristy  <quetzlzacatenango@image...>\n  * Recognize XML policy closing tags (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31182).\n  * Fix memory leak in the MPC format.\n\n2017-01-07  7.0.4-3 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-3, GIT revision 19329:930ca78:20170107.\n\n2017-01-04  7.0.4-3 Cristy  <quetzlzacatenango@image...>\n  * Increase memory allocation for TIFF pixels (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31161).\n\n2017-01-03  7.0.4-2 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-2, GIT revision 19318:8766311:20170103.\n\n2017-01-02  7.0.4-2 Cristy  <quetzlzacatenango@image...>\n  * Validation unit test for MNG works again.\n\n2016-12-31  7.0.4-1 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-1, GIT revision 19292:c5ccfa8:20161231.\n\n2016-12-26  7.0.4-1 Cristy  <quetzlzacatenango@image...>\n  * Initialize draw_info alpha member to OpaqueAlpha.\n  * Monochrome images no longer have inverted colors (reference\n    https://github.com/ImageMagick/ImageMagick/issues/332).\n\n2016-12-18  7.0.4-0 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.4-0, GIT revision 19221:d5e8abc:20161218.\n\n2016-12-14  7.0.4-0 Cristy  <quetzlzacatenango@image...>\n * Do not close path for linejoins of round (reference\n   https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31039).\n\n2016-12-10  7.0.3-10 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-10, GIT revision 19191:338f088:20161210.\n\n2016-12-07  7.0.3-10 Cristy  <quetzlzacatenango@image...>\n  * Set colorspace to sRGB if -append has non-homogenous colorspaces (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29105).\n  * Respect connected-components:area-threshold define (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31006). \n  * Enable alpha channel if background color is non-opaque (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31016).\n  * Return correct offset for negative index for -fx option (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31019).\n  * Fixed improper scaling of certain FITS images (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31028).\n  * Properly center text label (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=31027).\n\n2016-12-05  7.0.3-9 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-9, GIT revision 19139:6fed3f1:20161205.\n\n2016-11-26  7.0.3-9 Cristy  <quetzlzacatenango@image...>\n  * Support the compare -read-mask option.\n  * Support read-masks for the -modulate option.\n  * Prevent buffer overflow when streaming an image (reference\n    https://github.com/ImageMagick/ImageMagick/issues/312).\n  * Fix possible buffer overflow when writing compressed TIFFS (vulnerability\n    report from Cisco Talos, CVE-2016-8707).\n\n2016-11-15  7.0.3-8 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-8, GIT revision 19067:5aceded:20161125.\n\n2016-11-18  7.0.3-8 Cristy  <quetzlzacatenango@image...>\n  * Support the phash:colorspaces and phash:normalize options.\n  * If a convenient line break is not found, force it for caption: (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30887).\n  * Set alpha member of draw structure to OpaqueAlpha (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30894).\n  * Off by 1 error when computing the standard deviation (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=2&t=30866).\n  * Apply Debian patches, (reference\n    https://github.com/ImageMagick/ImageMagick/issues/304).\n  * Permit EPT images with just a TIFF or EPS image, not both (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30921).\n  * The -clone option no longer leaks memory.\n  * Render to clip mask rather than image for clip-path MVG graphics primitive.\n\n2016-11-15  7.0.3-7 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-7, GIT revision 19024:87aca83:20161115.\n\n2016-11-10  7.0.3-7 Cristy  <quetzlzacatenango@image...>\n  * Web pages were broken when we moved to HTTPS protocol.\n\n2016-11-08  7.0.3-6 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-6, GIT revision 19001:4cff747:20161108.\n\n2016-11-01  7.0.3-6 Cristy  <quetzlzacatenango@image...>\n  * Off by one memory allocation (reference\n    https://github.com/ImageMagick/ImageMagick/issues/296).\n  * The -extent option now matches the results of IMv6 (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=1&t=30779).\n  * Prevent fault in MSL interpreter (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30797).\n  * Mask composite produces proper results for the convert utility (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29675).\n    \n\n2016-10-10  7.0.3-5 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-5, GIT revision 18975:a8174a2:20161030.\n\n2016-10-16  7.0.3-5 Dirk Lemstra <dirk@lem.....org>\n  * Added layer RLE compression to the PSD encoder.\n\n2016-10-10  7.0.3-4 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-4, GIT revision 18937:83da034:20161010.\n\n2016-10-10  7.0.3-4 Dirk Lemstra <dirk@lem.....org>\n  * Fixed incorrect parsing with ordered dither. (reference\n    https://github.com/ImageMagick/ImageMagick/issues/254)\n\n2016-10-10  7.0.3-4 Cristy  <quetzlzacatenango@image...>\n  * Unit test pass again after small SUN image patch.\n\n2016-10-08  7.0.3-3 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-3, GIT revision 18924:d6614e7:20161008.\n\n2016-10-07  7.0.3-3 Dirk Lemstra <dirk@lem.....org>\n  * Fixed incorrect RLE decoding when reading a DCM image that contains\n    multiple segments.\n\n2016-10-02  7.0.3-2 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-2, GIT revision 18887:6b27c5b:20161002.\n\n2016-09-27  7.0.3-2 Dirk Lemstra <dirk@lem.....org>\n  * Fixed incorrect RLE decoding when reading an SGI image (reference \n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30514)\n\n2016-09-20  7.0.3-1 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-1, GIT revision 18851:ad91ea8:20160920.\n\n2016-09-16  7.0.3-1 Dirk Lemstra <dirk@lem.....org>\n  * Added layer RLE compression to the PSD encoder.\n  * Added define 'psd:preserve-opacity-mask' to preserve the opacity mask\n    in a PSD file.\n  * Fixed issue where the display window was used instead of the data window\n    when reading EXR files (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&p=137849).\n\n2016-09-05  7.0.3-0 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.3-0, GIT revision 18786:10aa64c:20160905.\n\n2016-08-29  7.0.3-0 Dirk Lemstra <dirk@lem.....org>\n  * Fixed reading DXT1 images with an alpha channel.\n  * Fixed incorrect padding calculation in PSD encoder.\n\n2016-08-27  7.0.2-10 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-10, GIT revision 18750:e3335b3:20160827.\n\n2016-08-27  7.0.2-10 Dirk Lemstra <dirk@lem.....org>\n  * Added define 'psd:additional-info' to preserve the additional information\n    in a PSD file.\n\n2016-08-15  7.0.2-10 Cristy  <quetzlzacatenango@image...>\n  * Prevent buffer overflow in BMP & SGI coders (bug report from\n    pwchen&rayzhong of tencent).\n  * Prevent buffer overflow and other problems in SIXEL, PDB, MAP, TIFF and\n    CALS coders (bug report from Donghai Zhu).\n  * The -stream option now increments the pixel pointer properly (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30327).\n\n2016-08-14  7.0.2-9 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-9, GIT revision 18707:2c02f09:20160814.\n\n2016-08-14  7.0.2-9 Cristy  <quetzlzacatenango@image...>\n  * Fix compile error in opencl.c (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30289).\n  * Eliminate compiler warning.\n\n2016-08-14  7.0.2-8 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-8, GIT revision 18698:74b1d5d:20160814.\n\n2016-08-07  7.0.2-8 Cristy  <quetzlzacatenango@image...>\n  * Prevent spurious removal of MPC cache files (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30256).\n  * Note alpha channel when combining 4 or more images (reference\n    https://github.com/ImageMagick/ImageMagick/issues/250).\n\n2016-08-06  7.0.2-7 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-7, GIT revision 10980:ecc03a2:20160806.\n\n2016-08-01  7.0.2-7 Cristy  <quetzlzacatenango@image...>\n  * Evaluate lazy pixel cache morphology to prevent buffer overflow (bug report\n    from Ibrahim M. El-Sayed).\n  * Prevent buffer overflow (bug report from Max Thrane).\n  * Prevent memory use after free (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=30245).\n\n2016-07-30  7.0.2-6 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-6, GIT revision 18651:df24175:20160729.\n\n2016-07-29  7.0.2-6 Cristy  <quetzlzacatenango@image...>\n  * Support -region option (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=1&t=29692).\n\n2016-07-21  7.0.2-5 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-5, GIT revision 18627:2b5ddbd:20160721.\n\n2016-07-13  7.0.2-5 Cristy  <quetzlzacatenango@image...>\n  * Fix MVG stroke-opacity (reference\n    https://github.com/ImageMagick/ImageMagick/issues/229).\n  * Prevent possible buffer overflow when reading TIFF images (bug report from\n    Shi Pu of MS509 Team).\n  * Initialize index channel to get expected results from the stegano coder.\n\n2016-07-11  7.0.2-4 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-4, GIT revision 18591:50debe5:20160710.\n\n2016-07-10  7.0.2-4 Cristy  <quetzlzacatenango@image...>\n  * To comply with the SVG standard, use stroke-opacity for transparent strokes.\n  * Define CompositeChannels mask to Red, Green, Blue, Alpha, and Black.\n\n2016-07-09  7.0.2-3 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-3, GIT revision 18572:28560fc:20160709.\n\n2016-07-01  7.0.2-3 Cristy  <quetzlzacatenango@image...>\n  * Patch so -kuwahara option can preserve colormapped edges.\n  * The histogram coder now returns the correct extent.\n  * Use CopyMagickString() rather than CopyMagickMemory() for strings.\n\n2016-06-26  7.0.2-2 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-2, GIT revision 18514:a7b5b46:20160626.\n\n2016-06-23  7.0.2-2 Cristy  <quetzlzacatenango@image...>\n  * Correct for numerical instability (reference\n    https://github.com/ImageMagick/ImageMagick/issues/218).\n\t\t\t \n2016-06-21  7.0.2-1 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-1, GIT revision 18479:931319b:20160622.\n\n2016-06-17  7.0.2-1 Dirk Lemstra <dirk@lem.....org>\n  * Added support for GROUP4 compression to the FAX coder.\n\n2016-06-12  7.0.2-1 Cristy  <quetzlzacatenango@image...>\n  * Distort no longer converts grayscale image to sRGB (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=1&t=29895).\n  * Don't return a zero bounding box for QueryMultilineFontMetrics() (reference\n    https://github.com/ImageMagick/ImageMagick/issues/222).\n\n2016-06-12  7.0.2-0 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.2-0, GIT revision 10884:f0e15e8:20160612.\n\n2016-06-09  7.0.2-0 Cristy  <quetzlzacatenango@image...>\n  * Backoff finite precision epsilon (reference\n    https://github.com/ImageMagick/ImageMagick/issues/215).\n  * Fix drawing glitch for stroke widths greater than 2 (reference\n    https://github.com/ImageMagick/ImageMagick/issues/218).\n\n2016-06-05  7.0.1-10 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-10, GIT revision 18406:ba4ad2d:20160607.\n\n2016-06-04  7.0.1-10 Cristy  <quetzlzacatenango@image...>\n  * Deny indirect reads by policy, remove policy to permit, e.g.,\n    convert caption:@mytext.txt ...\n  * RLE check for pixel offset less than 0 (heap overflow report from Craig\n    Young).\n  * Properly initialze PES blocks (reference\n    https://github.com/ImageMagick/ImageMagick/issues/213).\n\n2016-06-03  7.0.1-9 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-9, GIT revision 10847:339f803:20160602.\n\n2016-06-02  7.0.1-9 Cristy  <quetzlzacatenango@image...>\n  * Fix small memory leak (patch provided by \u0410\u043d\u0434\u0440\u0435\u0439 \u0427\u0435\u0440\u043d\u044b\u0439).\n  * Coder path traversal is not authorized (bug report provided by\n    Masaaki Chida).\n  * Turn off alpha channel for the compare difference image (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29828).\n\n2016-05-31  7.0.1-8 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-8, GIT revision 18334:97775b5:20160531.\n\n2016-05-31  7.0.1-8 Cristy  <quetzlzacatenango@image...>\n  * Support configure script --enable-pipes option to enable pipes (|) in\n    filenames.\n  * Support configure script --enable-indirect-reads option to enable\n    indirect reads (@) in filenames.\n\n2016-05-30  7.0.1-7 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-7, GIT revision 18321:5511ef5:20160530.\n\n2016-05-25  7.0.1-7 Cristy  <quetzlzacatenango@image...>\n  * Security improvements to TEXT coder broke it (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29754).\n  * Fix stroke offset problem for -annotate (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29626).\n  * Don't interpret -fx option arguments (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29774);\n  * Add additional checks to DCM reader to prevent data-driven faults (bug\n    report from Hanno B\u00f6ck).\n\n2016-05-21  7.0.1-6 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-6, GIT revision 18241:d4f277c:20160521.\n\n2016-05-20  7.0.1-6 Cristy  <quetzlzacatenango@image...>\n  * Fixed proper placement of text annotation for east / west gravity.\n\n2016-05-18  7.0.1-5 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-5, GIT revision 10789:f7c2e89:20160518,\n\n2016-05-18  7.0.1-5 Cristy  <quetzlzacatenango@image...>\n  * Process channels independently for -channel -equalize (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=29708).\n  * Fix pixel cache on disk regression (reference\n    https://github.com/ImageMagick/ImageMagick/issues/202).\n\n2016-05-15  7.0.1-4 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-4, GIT revision 10778:52dae14:20160516.\n\n2016-05-10  7.0.1-4 Cristy  <quetzlzacatenango@image...>\n  * Prevent possible shell command injection vulnerability through the\n    authenticate parameter of the PDF, PCL and XPS coders (report from\n    Erez Turjeman).\n  * Quote passwords when passed to a delegate program.\n  * Iterate channels over source image rather than destination (bug report\n    from Hanno B\u00f6ck).\n  * Can read geo-related EXIF metdata once-again (reference\n    https://github.com/ImageMagick/ImageMagick/issues/198).\n  * Sanitize all delegate emedded formatting characters.\n  * Don't sync pixel cache in AcquireAuthenticCacheView() (bug report from\n    Hanno B\u00f6ck).\n\n2016-05-09  7.0.1-3 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-3, GIT revision 10755:d540dda:20160509.\n\n2016-05-07  7.0.1-3 Cristy  <quetzlzacatenango@image...>\n  * Remove https delegate.\n\n2016-05-06  7.0.1-2 Cristy  <quetzlzacatenango@image...>\n  * Release ImageMagick version 7.0.1-2, GIT revision 10741:5746147:20160507.\n\n2016-05-04  7.0.1-2 Cristy  <quetzlzacatenango@image...>\n  * Check for buffer overflow in magick/draw.c/DrawStrokePolygon().\n  * Replace show delegate title with image filename rather than label.\n  * Fix GetNextToken() off by one error.\n  * Remove support for internal ephemeral coder.\n\n2016-05-03  7.0.1-1 Cristy  <quetzlzacatenango@image...>\n  * New version 7.0.1-1, GIT revision 10723:9fc8a0c:20160503.\n\n2016-05-03  7.0.1-1 Cristy  <quetzlzacatenango@image...>\n  * Sanitize input filename for http / https delegates (improved patch).\n  * Fix for possible security vulnerabilities (reference\n    https://www.imagemagick.org/discourse-server/viewtopic.php?f=4&t=29588).\n\n2016-04-30  7.0.1-0 Cristy  <quetzlzacatenango@image...>\n  * New version 7.0.1-0, GIT revision 10716:b527bce:20160430.\n\n2016-01-30  7.0.0-0 \tFahad-Alsaidi & ShamsaHamed\n  * Add support for languages that require complex text layout (reference\n    https://github.com/ImageMagick/ImageMagick/pull/88).\n\n2012-04-27  7.0.0-0 Anthony thyssen <A.Thyssen@griffith...>\n  * Allow the use of set and escapes when no images in memory\n    (unless you attempt to access per-image meta-data)\n    Currently does not include %[fx:...] and %[pixel:...]\n\n2012-10-05  7.0.0-0 Anthony thyssen <A.Thyssen@griffith...>\n  * Rather than replicate 'options' into 'artifacts' make a link\n    from image to image_info and lookup a global option if no artifact\n    is defined.\n\n2012-09-11  7.0.0-0 Nicolas Robidoux <nicolas.robidoux@gmail...>\n  * sigmoidal-contrast:\n  * Remove unnecessary initial ClampToQuantum.\n\n2012-09-10  7.0.0-0 Nicolas Robidoux <nicolas.robidoux@gmail...>\n  * sigmoidal-contrast:\n  * Direct computation, without LUT;\n  * Fix re-declaration of i (at the top, and inside a conditional).\n\n2012-09-04  7.0.0-0 Nicolas Robidoux <nicolas.robidoux@gmail...>\n  * Add tanh/atanh clone of legacy sigmoidal map (faster & more accurate).\n\n2012-08-08  7.0.0-0 Nicolas Robidoux <nicolas.robidoux@gmail...>\n  * Add final ClampToQuantum in sigmoidal colormap loop.\n  * Remove OpenMP calls from colormap update loops.\n\n2011-08-01  7.0.0-0 Cristy  <quetzlzacatenango@image...>\n  * New version 7.0.0-0.\n\n", "/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%                            RRRR   L      EEEEE                              %\n%                            R   R  L      E                                  %\n%                            RRRR   L      EEE                                %\n%                            R R    L      E                                  %\n%                            R  R   LLLLL  EEEEE                              %\n%                                                                             %\n%                                                                             %\n%                          Read URT RLE Image Format                          %\n%                                                                             %\n%                              Software Design                                %\n%                                   Cristy                                    %\n%                                 July 1992                                   %\n%                                                                             %\n%                                                                             %\n%  Copyright 1999-2017 ImageMagick Studio LLC, a non-profit organization      %\n%  dedicated to making software imaging solutions freely available.           %\n%                                                                             %\n%  You may not use this file except in compliance with the License.  You may  %\n%  obtain a copy of the License at                                            %\n%                                                                             %\n%    https://www.imagemagick.org/script/license.php                           %\n%                                                                             %\n%  Unless required by applicable law or agreed to in writing, software        %\n%  distributed under the License is distributed on an \"AS IS\" BASIS,          %\n%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   %\n%  See the License for the specific language governing permissions and        %\n%  limitations under the License.                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%\n*/\n\f\n/*\n  Include declarations.\n*/\n#include \"MagickCore/studio.h\"\n#include \"MagickCore/blob.h\"\n#include \"MagickCore/blob-private.h\"\n#include \"MagickCore/cache.h\"\n#include \"MagickCore/colormap.h\"\n#include \"MagickCore/colormap-private.h\"\n#include \"MagickCore/exception.h\"\n#include \"MagickCore/exception-private.h\"\n#include \"MagickCore/image.h\"\n#include \"MagickCore/image-private.h\"\n#include \"MagickCore/list.h\"\n#include \"MagickCore/magick.h\"\n#include \"MagickCore/memory_.h\"\n#include \"MagickCore/monitor.h\"\n#include \"MagickCore/monitor-private.h\"\n#include \"MagickCore/pixel-accessor.h\"\n#include \"MagickCore/pixel.h\"\n#include \"MagickCore/property.h\"\n#include \"MagickCore/quantum-private.h\"\n#include \"MagickCore/static.h\"\n#include \"MagickCore/string_.h\"\n#include \"MagickCore/module.h\"\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   I s R L E                                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  IsRLE() returns MagickTrue if the image format type, identified by the\n%  magick string, is RLE.\n%\n%  The format of the ReadRLEImage method is:\n%\n%      MagickBooleanType IsRLE(const unsigned char *magick,const size_t length)\n%\n%  A description of each parameter follows:\n%\n%    o magick: compare image format pattern against these bytes.\n%\n%    o length: Specifies the length of the magick string.\n%\n%\n*/\nstatic MagickBooleanType IsRLE(const unsigned char *magick,const size_t length)\n{\n  if (length < 2)\n    return(MagickFalse);\n  if (memcmp(magick,\"\\122\\314\",2) == 0)\n    return(MagickTrue);\n  return(MagickFalse);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   R e a d R L E I m a g e                                                   %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ReadRLEImage() reads a run-length encoded Utah Raster Toolkit\n%  image file and returns it.  It allocates the memory necessary for the new\n%  Image structure and returns a pointer to the new image.\n%\n%  The format of the ReadRLEImage method is:\n%\n%      Image *ReadRLEImage(const ImageInfo *image_info,ExceptionInfo *exception)\n%\n%  A description of each parameter follows:\n%\n%    o image_info: the image info.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n%\n*/\nstatic Image *ReadRLEImage(const ImageInfo *image_info,ExceptionInfo *exception)\n{\n#define SkipLinesOp  0x01\n#define SetColorOp  0x02\n#define SkipPixelsOp  0x03\n#define ByteDataOp  0x05\n#define RunDataOp  0x06\n#define EOFOp  0x07\n#define ThrowRLEException(exception,message) \\\n{ \\\n  if (colormap != (unsigned char *) NULL) \\\n    colormap=(unsigned char *) RelinquishMagickMemory(colormap); \\\n  if (pixel_info != (MemoryInfo *) NULL) \\\n    pixel_info=RelinquishVirtualMemory(pixel_info); \\\n  ThrowReaderException((exception),(message)); \\\n}\n\n  char\n    magick[12];\n\n  Image\n    *image;\n\n  int\n    opcode,\n    operand,\n    status;\n\n  MagickStatusType\n    flags;\n\n  MagickSizeType\n    number_pixels;\n\n  MemoryInfo\n    *pixel_info;\n\n  Quantum\n    index;\n\n  register ssize_t\n    x;\n\n  register Quantum\n    *q;\n\n  register ssize_t\n    i;\n\n  register unsigned char\n    *p;\n\n  size_t\n    bits_per_pixel,\n    map_length,\n    number_colormaps,\n    number_planes,\n    number_planes_filled,\n    one,\n    pixel_info_length;\n\n  ssize_t\n    count,\n    offset,\n    y;\n\n  unsigned char\n    background_color[256],\n    *colormap,\n    pixel,\n    plane,\n    *pixels;\n\n  /*\n    Open image file.\n  */\n  assert(image_info != (const ImageInfo *) NULL);\n  assert(image_info->signature == MagickCoreSignature);\n  if (image_info->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\n      image_info->filename);\n  assert(exception != (ExceptionInfo *) NULL);\n  assert(exception->signature == MagickCoreSignature);\n  image=AcquireImage(image_info,exception);\n  status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);\n  if (status == MagickFalse)\n    return(DestroyImageList(image));\n  /*\n    Determine if this a RLE file.\n  */\n  colormap=(unsigned char *) NULL;\n  pixel_info=(MemoryInfo *) NULL;\n  count=ReadBlob(image,2,(unsigned char *) magick);\n  if ((count != 2) || (memcmp(magick,\"\\122\\314\",2) != 0))\n    ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n  do\n  {\n    /*\n      Read image header.\n    */\n    image->page.x=(ssize_t) ReadBlobLSBShort(image);\n    image->page.y=(ssize_t) ReadBlobLSBShort(image);\n    image->columns=ReadBlobLSBShort(image);\n    image->rows=ReadBlobLSBShort(image);\n    flags=(MagickStatusType) ReadBlobByte(image);\n    image->alpha_trait=flags & 0x04 ? BlendPixelTrait : UndefinedPixelTrait;\n    number_planes=(size_t) ReadBlobByte(image);\n    bits_per_pixel=(size_t) ReadBlobByte(image);\n    number_colormaps=(size_t) ReadBlobByte(image);\n    map_length=(unsigned char) ReadBlobByte(image);\n    if (map_length >= 22)\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    if (EOFBlob(image) != MagickFalse)\n      ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n    one=1;\n    map_length=one << map_length;\n    if ((number_planes == 0) || (number_planes == 2) ||\n        ((flags & 0x04) && (number_colormaps > 254)) || (bits_per_pixel != 8) ||\n        (image->columns == 0))\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    if (flags & 0x02)\n      {\n        /*\n          No background color-- initialize to black.\n        */\n        for (i=0; i < (ssize_t) number_planes; i++)\n          background_color[i]=0;\n        (void) ReadBlobByte(image);\n      }\n    else\n      {\n        /*\n          Initialize background color.\n        */\n        p=background_color;\n        for (i=0; i < (ssize_t) number_planes; i++)\n          *p++=(unsigned char) ReadBlobByte(image);\n      }\n    if ((number_planes & 0x01) == 0)\n      (void) ReadBlobByte(image);\n    if (EOFBlob(image) != MagickFalse)\n      ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n    if (number_colormaps != 0)\n      {\n        /*\n          Read image colormaps.\n        */\n        colormap=(unsigned char *) AcquireQuantumMemory(number_colormaps,\n          3*map_length*sizeof(*colormap));\n        if (colormap == (unsigned char *) NULL)\n          ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n        p=colormap;\n        for (i=0; i < (ssize_t) number_colormaps; i++)\n          for (x=0; x < (ssize_t) map_length; x++)\n\t  {\n            *p++=(unsigned char) ScaleQuantumToChar(ScaleShortToQuantum(\n              ReadBlobLSBShort(image)));\n            if (EOFBlob(image) != MagickFalse)\n              ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n\t  }\n      }\n    if ((flags & 0x08) != 0)\n      {\n        char\n          *comment;\n\n        size_t\n          length;\n\n        /*\n          Read image comment.\n        */\n        length=ReadBlobLSBShort(image);\n        if (length != 0)\n          {\n            comment=(char *) AcquireQuantumMemory(length,sizeof(*comment));\n            if (comment == (char *) NULL)\n              ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n            count=ReadBlob(image,length-1,(unsigned char *) comment);\n            comment[length-1]='\\0';\n            (void) SetImageProperty(image,\"comment\",comment,exception);\n            comment=DestroyString(comment);\n            if ((length & 0x01) == 0)\n              (void) ReadBlobByte(image);\n          }\n      }\n    if (EOFBlob(image) != MagickFalse)\n      ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n    if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))\n      if (image->scene >= (image_info->scene+image_info->number_scenes-1))\n        break;\n    status=SetImageExtent(image,image->columns,image->rows,exception);\n    if (status == MagickFalse)\n      return(DestroyImageList(image));\n    /*\n      Allocate RLE pixels.\n    */\n    if (image->alpha_trait != UndefinedPixelTrait)\n      number_planes++;\n    number_pixels=(MagickSizeType) image->columns*image->rows;\n    number_planes_filled=(number_planes % 2 == 0) ? number_planes :\n      number_planes+1;\n    if ((number_pixels*number_planes_filled) != (size_t) (number_pixels*\n         number_planes_filled))\n      ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n    pixel_info=AcquireVirtualMemory(image->columns,image->rows*\n      MagickMax(number_planes_filled,4)*sizeof(*pixels));\n    if (pixel_info == (MemoryInfo *) NULL)\n      ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n    pixel_info_length=image->columns*image->rows*\n      MagickMax(number_planes_filled,4);\n    pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);\n    (void) ResetMagickMemory(pixels,0,pixel_info_length);\n    if ((flags & 0x01) && !(flags & 0x02))\n      {\n        ssize_t\n          j;\n\n        /*\n          Set background color.\n        */\n        p=pixels;\n        for (i=0; i < (ssize_t) number_pixels; i++)\n        {\n          if (image->alpha_trait == UndefinedPixelTrait)\n            for (j=0; j < (ssize_t) number_planes; j++)\n              *p++=background_color[j];\n          else\n            {\n              for (j=0; j < (ssize_t) (number_planes-1); j++)\n                *p++=background_color[j];\n              *p++=0;  /* initialize matte channel */\n            }\n        }\n      }\n    /*\n      Read runlength-encoded image.\n    */\n    plane=0;\n    x=0;\n    y=0;\n    opcode=ReadBlobByte(image);\n    if (opcode == EOF)\n      ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n    do\n    {\n      switch (opcode & 0x3f)\n      {\n        case SkipLinesOp:\n        {\n          operand=ReadBlobByte(image);\n          if (opcode == EOF)\n            ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n          if (opcode & 0x40)\n            {\n              operand=ReadBlobLSBSignedShort(image);\n              if (opcode == EOF)\n                ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n\t    }\n          x=0;\n          y+=operand;\n          break;\n        }\n        case SetColorOp:\n        {\n          operand=ReadBlobByte(image);\n          if (opcode == EOF)\n            ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n          plane=(unsigned char) operand;\n          if (plane == 255)\n            plane=(unsigned char) (number_planes-1);\n          x=0;\n          break;\n        }\n        case SkipPixelsOp:\n        {\n          operand=ReadBlobByte(image);\n          if (opcode == EOF)\n            ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n          if (opcode & 0x40)\n            {\n              operand=ReadBlobLSBSignedShort(image);\n              if (opcode == EOF)\n                ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n            }\n          x+=operand;\n          break;\n        }\n        case ByteDataOp:\n        {\n          operand=ReadBlobByte(image);\n          if (opcode == EOF)\n            ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n          if (opcode & 0x40)\n            {\n              operand=ReadBlobLSBSignedShort(image);\n              if (opcode == EOF)\n                ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n            }\n          offset=(ssize_t) (((image->rows-y-1)*image->columns*number_planes)+x*\n            number_planes+plane);\n          operand++;\n          if ((offset < 0) ||\n              ((offset+operand*number_planes) > (ssize_t) pixel_info_length))\n            {\n              if (number_colormaps != 0)\n                colormap=(unsigned char *) RelinquishMagickMemory(colormap);\n              pixel_info=RelinquishVirtualMemory(pixel_info);\n              ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");\n            }\n          p=pixels+offset;\n          for (i=0; i < (ssize_t) operand; i++)\n          {\n            pixel=(unsigned char) ReadBlobByte(image);\n            if ((y < (ssize_t) image->rows) &&\n                ((x+i) < (ssize_t) image->columns))\n              *p=pixel;\n            p+=number_planes;\n          }\n          if (operand & 0x01)\n            (void) ReadBlobByte(image);\n          x+=operand;\n          break;\n        }\n        case RunDataOp:\n        {\n          operand=ReadBlobByte(image);\n          if (opcode == EOF)\n            ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n          if (opcode & 0x40)\n            {\n              operand=ReadBlobLSBSignedShort(image);\n              if (opcode == EOF)\n                ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n            }\n          pixel=(unsigned char) ReadBlobByte(image);\n          (void) ReadBlobByte(image);\n          offset=(ssize_t) (((image->rows-y-1)*image->columns*number_planes)+x*\n            number_planes+plane);\n          operand++;\n          if ((offset < 0) ||\n              ((offset+operand*number_planes) > (ssize_t) pixel_info_length))\n            {\n              if (number_colormaps != 0)\n                colormap=(unsigned char *) RelinquishMagickMemory(colormap);\n              pixel_info=RelinquishVirtualMemory(pixel_info);\n              ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");\n            }\n          p=pixels+offset;\n          for (i=0; i < (ssize_t) operand; i++)\n          {\n            if ((y < (ssize_t) image->rows) &&\n                ((x+i) < (ssize_t) image->columns))\n              *p=pixel;\n            p+=number_planes;\n          }\n          x+=operand;\n          break;\n        }\n        default:\n          break;\n      }\n      opcode=ReadBlobByte(image);\n      if (opcode == EOF)\n        ThrowRLEException(CorruptImageError,\"UnexpectedEndOfFile\");\n    } while (((opcode & 0x3f) != EOFOp) && (opcode != EOF));\n    if (number_colormaps != 0)\n      {\n        MagickStatusType\n          mask;\n\n        /*\n          Apply colormap affineation to image.\n        */\n        mask=(MagickStatusType) (map_length-1);\n        p=pixels;\n        x=(ssize_t) number_planes;\n        if (number_colormaps == 1)\n          for (i=0; i < (ssize_t) number_pixels; i++)\n          {\n            ValidateColormapValue(image,(ssize_t) (*p & mask),&index,exception);\n            *p=colormap[(ssize_t) index];\n            p++;\n          }\n        else\n          if ((number_planes >= 3) && (number_colormaps >= 3))\n            for (i=0; i < (ssize_t) number_pixels; i++)\n              for (x=0; x < (ssize_t) number_planes; x++)\n              {\n                ValidateColormapValue(image,(ssize_t) (x*map_length+\n                  (*p & mask)),&index,exception);\n                *p=colormap[(ssize_t) index];\n                p++;\n              }\n        if ((i < (ssize_t) number_pixels) || (x < (ssize_t) number_planes))\n          {\n            colormap=(unsigned char *) RelinquishMagickMemory(colormap);\n            pixel_info=RelinquishVirtualMemory(pixel_info);\n            ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");\n          }\n      }\n    /*\n      Initialize image structure.\n    */\n    if (number_planes >= 3)\n      {\n        /*\n          Convert raster image to DirectClass pixel packets.\n        */\n        p=pixels;\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            SetPixelRed(image,ScaleCharToQuantum(*p++),q);\n            SetPixelGreen(image,ScaleCharToQuantum(*p++),q);\n            SetPixelBlue(image,ScaleCharToQuantum(*p++),q);\n            if (image->alpha_trait != UndefinedPixelTrait)\n              SetPixelAlpha(image,ScaleCharToQuantum(*p++),q);\n            q+=GetPixelChannels(image);\n          }\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n      }\n    else\n      {\n        /*\n          Create colormap.\n        */\n        if (number_colormaps == 0)\n          map_length=256;\n        if (AcquireImageColormap(image,map_length,exception) == MagickFalse)\n          ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n        p=colormap;\n        if (number_colormaps == 1)\n          for (i=0; i < (ssize_t) image->colors; i++)\n          {\n            /*\n              Pseudocolor.\n            */\n            image->colormap[i].red=(MagickRealType)\n              ScaleCharToQuantum((unsigned char) i);\n            image->colormap[i].green=(MagickRealType)\n              ScaleCharToQuantum((unsigned char) i);\n            image->colormap[i].blue=(MagickRealType)\n              ScaleCharToQuantum((unsigned char) i);\n          }\n        else\n          if (number_colormaps > 1)\n            for (i=0; i < (ssize_t) image->colors; i++)\n            {\n              image->colormap[i].red=(MagickRealType)\n                ScaleCharToQuantum(*p);\n              image->colormap[i].green=(MagickRealType)\n                ScaleCharToQuantum(*(p+map_length));\n              image->colormap[i].blue=(MagickRealType)\n                ScaleCharToQuantum(*(p+map_length*2));\n              p++;\n            }\n        p=pixels;\n        if (image->alpha_trait == UndefinedPixelTrait)\n          {\n            /*\n              Convert raster image to PseudoClass pixel packets.\n            */\n            for (y=0; y < (ssize_t) image->rows; y++)\n            {\n              q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n              if (q == (Quantum *) NULL)\n                break;\n              for (x=0; x < (ssize_t) image->columns; x++)\n              {\n                SetPixelIndex(image,(Quantum) *p++,q);\n                q+=GetPixelChannels(image);\n              }\n              if (SyncAuthenticPixels(image,exception) == MagickFalse)\n                break;\n              if (image->previous == (Image *) NULL)\n                {\n                  status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)\n                    y,image->rows);\n                  if (status == MagickFalse)\n                    break;\n                }\n            }\n            (void) SyncImage(image,exception);\n          }\n        else\n          {\n            /*\n              Image has a matte channel-- promote to DirectClass.\n            */\n            for (y=0; y < (ssize_t) image->rows; y++)\n            {\n              q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n              if (q == (Quantum *) NULL)\n                break;\n              for (x=0; x < (ssize_t) image->columns; x++)\n              {\n                ValidateColormapValue(image,(ssize_t) *p++,&index,exception);\n                SetPixelRed(image,ClampToQuantum(image->colormap[(ssize_t)\n                  index].red),q);\n                ValidateColormapValue(image,(ssize_t) *p++,&index,exception);\n                SetPixelGreen(image,ClampToQuantum(image->colormap[(ssize_t)\n                  index].green),q);\n                ValidateColormapValue(image,(ssize_t) *p++,&index,exception);\n                SetPixelBlue(image,ClampToQuantum(image->colormap[(ssize_t)\n                  index].blue),q);\n                SetPixelAlpha(image,ScaleCharToQuantum(*p++),q);\n                q+=GetPixelChannels(image);\n              }\n              if (x < (ssize_t) image->columns)\n                break;\n              if (SyncAuthenticPixels(image,exception) == MagickFalse)\n                break;\n              if (image->previous == (Image *) NULL)\n                {\n                  status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)\n                    y,image->rows);\n                  if (status == MagickFalse)\n                    break;\n                }\n            }\n            image->colormap=(PixelInfo *) RelinquishMagickMemory(\n              image->colormap);\n            image->storage_class=DirectClass;\n            image->colors=0;\n          }\n      }\n    if (number_colormaps != 0)\n      colormap=(unsigned char *) RelinquishMagickMemory(colormap);\n    pixel_info=RelinquishVirtualMemory(pixel_info);\n    if (EOFBlob(image) != MagickFalse)\n      {\n        ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\",\n          image->filename);\n        break;\n      }\n    /*\n      Proceed to next image.\n    */\n    if (image_info->number_scenes != 0)\n      if (image->scene >= (image_info->scene+image_info->number_scenes-1))\n        break;\n    (void) ReadBlobByte(image);\n    count=ReadBlob(image,2,(unsigned char *) magick);\n    if ((count != 0) && (memcmp(magick,\"\\122\\314\",2) == 0))\n      {\n        /*\n          Allocate next image structure.\n        */\n        AcquireNextImage(image_info,image,exception);\n        if (GetNextImageInList(image) == (Image *) NULL)\n          {\n            image=DestroyImageList(image);\n            return((Image *) NULL);\n          }\n        image=SyncNextImageInList(image);\n        status=SetImageProgress(image,LoadImagesTag,TellBlob(image),\n          GetBlobSize(image));\n        if (status == MagickFalse)\n          break;\n      }\n  } while ((count != 0) && (memcmp(magick,\"\\122\\314\",2) == 0));\n  (void) CloseBlob(image);\n  return(GetFirstImageInList(image));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   R e g i s t e r R L E I m a g e                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  RegisterRLEImage() adds attributes for the RLE image format to\n%  the list of supported formats.  The attributes include the image format\n%  tag, a method to read and/or write the format, whether the format\n%  supports the saving of more than one frame to the same file or blob,\n%  whether the format supports native in-memory I/O, and a brief\n%  description of the format.\n%\n%  The format of the RegisterRLEImage method is:\n%\n%      size_t RegisterRLEImage(void)\n%\n*/\nModuleExport size_t RegisterRLEImage(void)\n{\n  MagickInfo\n    *entry;\n\n  entry=AcquireMagickInfo(\"RLE\",\"RLE\",\"Utah Run length encoded image\");\n  entry->decoder=(DecodeImageHandler *) ReadRLEImage;\n  entry->magick=(IsImageFormatHandler *) IsRLE;\n  entry->flags^=CoderAdjoinFlag;\n  (void) RegisterMagickInfo(entry);\n  return(MagickImageCoderSignature);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   U n r e g i s t e r R L E I m a g e                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  UnregisterRLEImage() removes format registrations made by the\n%  RLE module from the list of supported formats.\n%\n%  The format of the UnregisterRLEImage method is:\n%\n%      UnregisterRLEImage(void)\n%\n*/\nModuleExport void UnregisterRLEImage(void)\n{\n  (void) UnregisterMagickInfo(\"RLE\");\n}\n"], "filenames": ["ChangeLog", "coders/rle.c"], "buggy_code_start_loc": [13, 137], "buggy_code_end_loc": [13, 577], "fixing_code_start_loc": [14, 138], "fixing_code_end_loc": [15, 614], "type": "CWE-20", "message": "In ImageMagick 7.0.5-5, a crafted RLE image can trigger a crash because of incorrect EOF handling in coders/rle.c.", "other": {"cve": {"id": "CVE-2017-9144", "sourceIdentifier": "cve@mitre.org", "published": "2017-05-22T14:29:00.387", "lastModified": "2020-10-15T16:12:26.153", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In ImageMagick 7.0.5-5, a crafted RLE image can trigger a crash because of incorrect EOF handling in coders/rle.c."}, {"lang": "es", "value": "En ImageMagick 7.0.5-5 una imagen RLE especialmente manipulada puede provocar un cierre inesperado debido a la gesti\u00f3n incorrecta de EQF en coders/rle.c."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:imagemagick:imagemagick:7.0.5-5:*:*:*:*:*:*:*", "matchCriteriaId": "72A65A02-CD63-4DDD-AFCC-FE6988F85E13"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "http://www.debian.org/security/2017/dsa-3863", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/98603", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/ImageMagick/ImageMagick/commit/f6240ee77847787f6d7618b669d3a2040a2d6d40", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ImageMagick/ImageMagick/commit/f6240ee77847787f6d7618b669d3a2040a2d6d40"}}