{"buggy_code": ["// libnotify - Copyright Mitko Kostov <mitko.kostov@gmail.com> (MIT Licensed)\n// fork of visionmedia's node-growl modified to work with libnotify on linux\n\n/**\n * Module dependencies.\n */\n\nvar child_process = require('child_process'),\n    path = require('path')\n\n/**\n * Node-libnotify version.\n */\n\nexports.version = '1.0.1'\n\n/**\n * Fetch the binary version when available.\n *\n * @param  {function} callback\n * @api public\n */\n\nexports.binVersion = function(callback) {\n  child_process.exec('notify-send -v', function(err, stdout, stderr){\n    if (err) callback(err)\n    else callback(null, stdout)\n  })\n}\n\n\n/**\n * Send libnotify notification _msg_ with _options_.\n *\n * Options:\n *\n *  - title   Notification title\n *  - time    Set the expiration time\n *  - image\n *    - path to an image sets -i ( you can also use stock icons )\n *\n * Examples:\n *\n *   growl.notify('New email')\n *   growl.notify('5 new emails', { title: 'Thunderbird' })\n *   growl.notify('Email sent', function(){\n *     // ... notification sent\n *   })\n *\n * @param {string} msg\n * @param {object} options\n * @param {function} callback\n * @api public\n */\n\nexports.notify = function(msg, options, callback) {\n  var image,\n      args = ['notify-send','\"' + msg + '\"'],\n      options = options || {}\n  this.binVersion(function(err, version){\n    if (err) return callback(err)\n    if (image = options.image) args.push('-i ' + image)\n    if (options.time) args.push('-t', options.time)\n    if (options.category) args.push('-c', options.category)\n    if (options.urgency) args.push('-u', options.urgency)\n    if (options.title) {\n      args.shift()\n      args.unshift('notify-send', '\"'+ options.title +'\"')\n    }\n    child_process.exec(args.join(' '), callback)\n  })\n}\n"], "fixing_code": ["// libnotify - Copyright Mitko Kostov <mitko.kostov@gmail.com> (MIT Licensed)\n// fork of visionmedia's node-growl modified to work with libnotify on linux\n\n/**\n * Module dependencies.\n */\n\nvar child_process = require('child_process'),\n    path = require('path')\n\n/**\n * Node-libnotify version.\n */\n\nexports.version = '1.0.1'\n\n/**\n * Fetch the binary version when available.\n *\n * @param  {function} callback\n * @api public\n */\n\nexports.binVersion = function(callback) {\n  child_process.exec('notify-send -v', function(err, stdout, stderr){\n    if (err) callback(err)\n    else callback(null, stdout)\n  })\n}\n\n\n/**\n * Send libnotify notification _msg_ with _options_.\n *\n * Options:\n *\n *  - title   Notification title\n *  - time    Set the expiration time\n *  - image\n *    - path to an image sets -i ( you can also use stock icons )\n *\n * Examples:\n *\n *   growl.notify('New email')\n *   growl.notify('5 new emails', { title: 'Thunderbird' })\n *   growl.notify('Email sent', function(){\n *     // ... notification sent\n *   })\n *\n * @param {string} msg\n * @param {object} options\n * @param {function} callback\n * @api public\n */\n\nexports.notify = function(msg, options, callback) {\n  var image,\n      args = [msg],\n      options = options || {}\n  this.binVersion(function(err, version){\n    if (err) return callback(err)\n    if (image = options.image) args.push('-i', image)\n    if (options.time) args.push('-t', options.time)\n    if (options.category) args.push('-c', options.category)\n    if (options.urgency) args.push('-u', options.urgency)\n    if (options.title) {\n      args.unshift(options.title)\n    }\n    child_process.execFile('notify-send', args, {}, callback)\n  })\n}\n"], "filenames": ["lib/libnotify.js"], "buggy_code_start_loc": [58], "buggy_code_end_loc": [71], "fixing_code_start_loc": [58], "fixing_code_end_loc": [70], "type": "CWE-74", "message": "libnotify before 1.0.4 for Node.js allows remote attackers to execute arbitrary commands via unspecified characters in a call to libnotify.notify.", "other": {"cve": {"id": "CVE-2013-7381", "sourceIdentifier": "cve@mitre.org", "published": "2020-02-12T15:15:11.633", "lastModified": "2020-02-14T14:47:10.937", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "libnotify before 1.0.4 for Node.js allows remote attackers to execute arbitrary commands via unspecified characters in a call to libnotify.notify."}, {"lang": "es", "value": "libnotify versiones anteriores a 1.0.4 para Node.js, permite a atacantes remotos ejecutar comandos arbitrarios por medio de caracteres no especificados en una llamada a libnotify.notify."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:libnotify_project:libnotify:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.0.4", "matchCriteriaId": "7E21EA54-E8E0-484A-AE64-AD10C30814D3"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2014/05/13/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2014/05/15/2", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/mytrile/node-libnotify/commit/dfe7801d73a0dda10663a0ff3d0ec8b4d5f0d448", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mytrile/node-libnotify/commit/dfe7801d73a0dda10663a0ff3d0ec8b4d5f0d448"}}