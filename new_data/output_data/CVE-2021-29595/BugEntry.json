{"buggy_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace depth_to_space {\n\n// This file has two implementation of DepthToSpace. Note that DepthToSpace only\n// works on 4D tensors.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n\n  auto data_type = output->type;\n  TF_LITE_ENSURE(context,\n                 data_type == kTfLiteFloat32 || data_type == kTfLiteUInt8 ||\n                     data_type == kTfLiteInt8 || data_type == kTfLiteInt32 ||\n                     data_type == kTfLiteInt64);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  const int block_size = params->block_size;\n  const int input_height = input->dims->data[1];\n  const int input_width = input->dims->data[2];\n  const int input_channels = input->dims->data[3];\n  int output_height = input_height * block_size;\n  int output_width = input_width * block_size;\n  int output_channels = input_channels / block_size / block_size;\n\n  TF_LITE_ENSURE_EQ(context, input_height, output_height / block_size);\n  TF_LITE_ENSURE_EQ(context, input_width, output_width / block_size);\n  TF_LITE_ENSURE_EQ(context, input_channels,\n                    output_channels * block_size * block_size);\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);\n  output_size->data[0] = input->dims->data[0];\n  output_size->data[1] = output_height;\n  output_size->data[2] = output_width;\n  output_size->data[3] = output_channels;\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n#define TF_LITE_DEPTH_TO_SPACE(type, scalar)                               \\\n  tflite::DepthToSpaceParams op_params;                                    \\\n  op_params.block_size = params->block_size;                               \\\n  type::DepthToSpace(op_params, GetTensorShape(input),                     \\\n                     GetTensorData<scalar>(input), GetTensorShape(output), \\\n                     GetTensorData<scalar>(output))\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, float);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, float);\n      }\n      break;\n    case kTfLiteUInt8:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, uint8_t);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, uint8_t);\n      }\n      break;\n    case kTfLiteInt8:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, int8_t);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, int8_t);\n      }\n      break;\n    case kTfLiteInt32:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, int32_t);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, int32_t);\n      }\n      break;\n    case kTfLiteInt64:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, int64_t);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, int64_t);\n      }\n      break;\n    default:\n      context->ReportError(context, \"Type '%s' not currently supported.\",\n                           TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n#undef TF_LITE_DEPTH_TO_SPACE\n\n  return kTfLiteOk;\n}\n\n}  // namespace depth_to_space\n\nTfLiteRegistration* Register_DEPTH_TO_SPACE_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, depth_to_space::Prepare,\n      depth_to_space::Eval<depth_to_space::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_DEPTH_TO_SPACE_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, depth_to_space::Prepare,\n      depth_to_space::Eval<depth_to_space::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_DEPTH_TO_SPACE() {\n  return Register_DEPTH_TO_SPACE_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include <initializer_list>\n#include <vector>\n\n#include <gmock/gmock.h>\n#include <gtest/gtest.h>\n#include \"flatbuffers/flatbuffers.h\"  // from @flatbuffers\n#include \"tensorflow/lite/kernels/test_util.h\"\n#include \"tensorflow/lite/schema/schema_generated.h\"\n\nnamespace tflite {\nnamespace {\n\nusing ::testing::ElementsAre;\nusing ::testing::ElementsAreArray;\n\nclass DepthToSpaceOpModel : public SingleOpModel {\n public:\n  DepthToSpaceOpModel(const TensorData& tensor_data, int block_size) {\n    input_ = AddInput(tensor_data);\n    output_ = AddOutput(tensor_data);\n    SetBuiltinOp(BuiltinOperator_DEPTH_TO_SPACE,\n                 BuiltinOptions_DepthToSpaceOptions,\n                 CreateDepthToSpaceOptions(builder_, block_size).Union());\n    BuildInterpreter({GetShape(input_)});\n  }\n\n  template <typename T>\n  void SetInput(std::initializer_list<T> data) {\n    PopulateTensor<T>(input_, data);\n  }\n  template <typename T>\n  std::vector<T> GetOutput() {\n    return ExtractVector<T>(output_);\n  }\n  std::vector<int> GetOutputShape() { return GetTensorShape(output_); }\n\n private:\n  int input_;\n  int output_;\n};\n\n#ifdef GTEST_HAS_DEATH_TEST\nTEST(DepthToSpaceOpModel, BadBlockSize) {\n  EXPECT_DEATH(DepthToSpaceOpModel({TensorType_FLOAT32, {1, 1, 1, 4}}, 4),\n               \"Cannot allocate tensors\");\n}\n#endif\n\nTEST(DepthToSpaceOpModel, Float32) {\n  DepthToSpaceOpModel m({TensorType_FLOAT32, {1, 1, 1, 4}}, 2);\n  m.SetInput<float>({1.4, 2.3, 3.2, 4.1});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<float>(), ElementsAreArray({1.4, 2.3, 3.2, 4.1}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 2, 2, 1));\n}\n\nTEST(DepthToSpaceOpModel, Uint8) {\n  DepthToSpaceOpModel m({TensorType_UINT8, {1, 1, 2, 4}}, 2);\n  m.SetInput<uint8_t>({1, 2, 3, 4, 5, 6, 7, 8});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<uint8_t>(),\n              ElementsAreArray({1, 2, 5, 6, 3, 4, 7, 8}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 2, 4, 1));\n}\n\nTEST(DepthToSpaceOpModel, int8) {\n  DepthToSpaceOpModel m({TensorType_INT8, {1, 2, 1, 4}}, 2);\n  m.SetInput<int8_t>({1, 2, 3, 4, 5, 6, 7, 8});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<int8_t>(),\n              ElementsAreArray({1, 2, 3, 4, 5, 6, 7, 8}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 4, 2, 1));\n}\n\nTEST(DepthToSpaceOpModel, Int32) {\n  DepthToSpaceOpModel m({TensorType_INT32, {1, 2, 2, 4}}, 2);\n  m.SetInput<int32_t>({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<int32_t>(),\n              ElementsAreArray(\n                  {1, 2, 5, 6, 3, 4, 7, 8, 9, 10, 13, 14, 11, 12, 15, 16}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 4, 4, 1));\n}\n\nTEST(DepthToSpaceOpModel, Int64) {\n  DepthToSpaceOpModel m({TensorType_INT64, {1, 1, 1, 1}}, 1);\n  m.SetInput<int64_t>({4});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<int64_t>(), ElementsAreArray({4}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 1, 1, 1));\n}\n\n}  // namespace\n}  // namespace tflite\n", "/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/depth_to_space.h\"\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\n// input/output tensor shape rank associations\nconstexpr int kBatchRank = 0;\nconstexpr int kHeightRank = 1;\nconstexpr int kWidthRank = 2;\nconstexpr int kDepthRank = 3;\n\nTfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n\n  auto data_type = output->type;\n  TF_LITE_ENSURE(context,\n                 data_type == kTfLiteFloat32 || data_type == kTfLiteInt8);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  const int block_size = params->block_size;\n  const int input_height = input->dims->data[kHeightRank];\n  const int input_width = input->dims->data[kWidthRank];\n  const int input_channels = input->dims->data[kDepthRank];\n  int output_height = input_height * block_size;\n  int output_width = input_width * block_size;\n  int output_channels = input_channels / block_size / block_size;\n\n  TF_LITE_ENSURE_EQ(context, input_height, output_height / block_size);\n  TF_LITE_ENSURE_EQ(context, input_width, output_width / block_size);\n  TF_LITE_ENSURE_EQ(context, input_channels,\n                    output_channels * block_size * block_size);\n\n  // We must update the output tensor dimensions.\n  // The dims storage is expected to be the same area in memory\n  // for both TfLiteTensor and TfLiteEvalTensor.  This is important\n  // because TfLiteTensor in the MicroInterpreter is a temporary\n  // allocation.  For the KernelRunner interpreter, TfLiteEvalTensor\n  // is a temporary allocation.  We must therefore relocate the dims\n  // from the FlatBuffer to the persistant storage arena.\n  TfLiteEvalTensor* output_eval =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n  TF_LITE_ENSURE_OK(context, tflite::micro::CreateWritableTensorDimsWithCopy(\n                                 context, output, output_eval));\n  output->dims->data[kBatchRank] = input->dims->data[kBatchRank];\n  output->dims->data[kHeightRank] = output_height;\n  output->dims->data[kWidthRank] = output_width;\n  output->dims->data[kDepthRank] = output_channels;\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  return CalculateOpData(context, node);\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);\n\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, kInputTensor);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  tflite::DepthToSpaceParams op_params;\n  op_params.block_size = static_cast<int32_t>(params->block_size);\n\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      reference_ops::DepthToSpace(op_params,\n                                  tflite::micro::GetTensorShape(input),\n                                  tflite::micro::GetTensorData<float>(input),\n                                  tflite::micro::GetTensorShape(output),\n                                  tflite::micro::GetTensorData<float>(output));\n      break;\n    case kTfLiteInt8:\n      reference_ops::DepthToSpace(op_params,\n                                  tflite::micro::GetTensorShape(input),\n                                  tflite::micro::GetTensorData<int8_t>(input),\n                                  tflite::micro::GetTensorShape(output),\n                                  tflite::micro::GetTensorData<int8_t>(output));\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(\n          context, \"DEPTH_TO_SPACE only supports FLOAT32 and INT8, got %s.\",\n          TfLiteTypeGetName(output->type));\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace\n\nTfLiteRegistration Register_DEPTH_TO_SPACE() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/Prepare,\n          /*invoke=*/Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace tflite\n"], "fixing_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace depth_to_space {\n\n// This file has two implementation of DepthToSpace. Note that DepthToSpace only\n// works on 4D tensors.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n\n  auto data_type = output->type;\n  TF_LITE_ENSURE(context,\n                 data_type == kTfLiteFloat32 || data_type == kTfLiteUInt8 ||\n                     data_type == kTfLiteInt8 || data_type == kTfLiteInt32 ||\n                     data_type == kTfLiteInt64);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  const int block_size = params->block_size;\n  TF_LITE_ENSURE(context, block_size > 0);\n  const int input_height = input->dims->data[1];\n  const int input_width = input->dims->data[2];\n  const int input_channels = input->dims->data[3];\n  int output_height = input_height * block_size;\n  int output_width = input_width * block_size;\n  int output_channels = input_channels / block_size / block_size;\n\n  TF_LITE_ENSURE_EQ(context, input_height, output_height / block_size);\n  TF_LITE_ENSURE_EQ(context, input_width, output_width / block_size);\n  TF_LITE_ENSURE_EQ(context, input_channels,\n                    output_channels * block_size * block_size);\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);\n  output_size->data[0] = input->dims->data[0];\n  output_size->data[1] = output_height;\n  output_size->data[2] = output_width;\n  output_size->data[3] = output_channels;\n\n  return context->ResizeTensor(context, output, output_size);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n#define TF_LITE_DEPTH_TO_SPACE(type, scalar)                               \\\n  tflite::DepthToSpaceParams op_params;                                    \\\n  op_params.block_size = params->block_size;                               \\\n  type::DepthToSpace(op_params, GetTensorShape(input),                     \\\n                     GetTensorData<scalar>(input), GetTensorShape(output), \\\n                     GetTensorData<scalar>(output))\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, float);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, float);\n      }\n      break;\n    case kTfLiteUInt8:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, uint8_t);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, uint8_t);\n      }\n      break;\n    case kTfLiteInt8:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, int8_t);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, int8_t);\n      }\n      break;\n    case kTfLiteInt32:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, int32_t);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, int32_t);\n      }\n      break;\n    case kTfLiteInt64:\n      if (kernel_type == kReference) {\n        TF_LITE_DEPTH_TO_SPACE(reference_ops, int64_t);\n      } else {\n        TF_LITE_DEPTH_TO_SPACE(optimized_ops, int64_t);\n      }\n      break;\n    default:\n      context->ReportError(context, \"Type '%s' not currently supported.\",\n                           TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n#undef TF_LITE_DEPTH_TO_SPACE\n\n  return kTfLiteOk;\n}\n\n}  // namespace depth_to_space\n\nTfLiteRegistration* Register_DEPTH_TO_SPACE_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, depth_to_space::Prepare,\n      depth_to_space::Eval<depth_to_space::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_DEPTH_TO_SPACE_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, depth_to_space::Prepare,\n      depth_to_space::Eval<depth_to_space::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_DEPTH_TO_SPACE() {\n  return Register_DEPTH_TO_SPACE_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include <initializer_list>\n#include <vector>\n\n#include <gmock/gmock.h>\n#include <gtest/gtest.h>\n#include \"flatbuffers/flatbuffers.h\"  // from @flatbuffers\n#include \"tensorflow/lite/kernels/test_util.h\"\n#include \"tensorflow/lite/schema/schema_generated.h\"\n\nnamespace tflite {\nnamespace {\n\nusing ::testing::ElementsAre;\nusing ::testing::ElementsAreArray;\n\nclass DepthToSpaceOpModel : public SingleOpModel {\n public:\n  DepthToSpaceOpModel(const TensorData& tensor_data, int block_size) {\n    input_ = AddInput(tensor_data);\n    output_ = AddOutput(tensor_data);\n    SetBuiltinOp(BuiltinOperator_DEPTH_TO_SPACE,\n                 BuiltinOptions_DepthToSpaceOptions,\n                 CreateDepthToSpaceOptions(builder_, block_size).Union());\n    BuildInterpreter({GetShape(input_)});\n  }\n\n  template <typename T>\n  void SetInput(std::initializer_list<T> data) {\n    PopulateTensor<T>(input_, data);\n  }\n  template <typename T>\n  std::vector<T> GetOutput() {\n    return ExtractVector<T>(output_);\n  }\n  std::vector<int> GetOutputShape() { return GetTensorShape(output_); }\n\n private:\n  int input_;\n  int output_;\n};\n\n#ifdef GTEST_HAS_DEATH_TEST\nTEST(DepthToSpaceOpModel, BadBlockSize) {\n  EXPECT_DEATH(DepthToSpaceOpModel({TensorType_FLOAT32, {1, 1, 1, 4}}, 4),\n               \"Cannot allocate tensors\");\n}\n\nTEST(DepthToSpaceOpModel, NoBlockSize) {\n  EXPECT_DEATH(DepthToSpaceOpModel({TensorType_FLOAT32, {1, 1, 1, 4}}, 0),\n               \"Cannot allocate tensors\");\n}\n#endif\n\nTEST(DepthToSpaceOpModel, Float32) {\n  DepthToSpaceOpModel m({TensorType_FLOAT32, {1, 1, 1, 4}}, 2);\n  m.SetInput<float>({1.4, 2.3, 3.2, 4.1});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<float>(), ElementsAreArray({1.4, 2.3, 3.2, 4.1}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 2, 2, 1));\n}\n\nTEST(DepthToSpaceOpModel, Uint8) {\n  DepthToSpaceOpModel m({TensorType_UINT8, {1, 1, 2, 4}}, 2);\n  m.SetInput<uint8_t>({1, 2, 3, 4, 5, 6, 7, 8});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<uint8_t>(),\n              ElementsAreArray({1, 2, 5, 6, 3, 4, 7, 8}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 2, 4, 1));\n}\n\nTEST(DepthToSpaceOpModel, int8) {\n  DepthToSpaceOpModel m({TensorType_INT8, {1, 2, 1, 4}}, 2);\n  m.SetInput<int8_t>({1, 2, 3, 4, 5, 6, 7, 8});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<int8_t>(),\n              ElementsAreArray({1, 2, 3, 4, 5, 6, 7, 8}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 4, 2, 1));\n}\n\nTEST(DepthToSpaceOpModel, Int32) {\n  DepthToSpaceOpModel m({TensorType_INT32, {1, 2, 2, 4}}, 2);\n  m.SetInput<int32_t>({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<int32_t>(),\n              ElementsAreArray(\n                  {1, 2, 5, 6, 3, 4, 7, 8, 9, 10, 13, 14, 11, 12, 15, 16}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 4, 4, 1));\n}\n\nTEST(DepthToSpaceOpModel, Int64) {\n  DepthToSpaceOpModel m({TensorType_INT64, {1, 1, 1, 1}}, 1);\n  m.SetInput<int64_t>({4});\n  m.Invoke();\n  EXPECT_THAT(m.GetOutput<int64_t>(), ElementsAreArray({4}));\n  EXPECT_THAT(m.GetOutputShape(), ElementsAre(1, 1, 1, 1));\n}\n\n}  // namespace\n}  // namespace tflite\n", "/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/depth_to_space.h\"\n\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/types.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/micro/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kOutputTensor = 0;\n\n// input/output tensor shape rank associations\nconstexpr int kBatchRank = 0;\nconstexpr int kHeightRank = 1;\nconstexpr int kWidthRank = 2;\nconstexpr int kDepthRank = 3;\n\nTfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);\n\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);\n\n  auto data_type = output->type;\n  TF_LITE_ENSURE(context,\n                 data_type == kTfLiteFloat32 || data_type == kTfLiteInt8);\n  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);\n\n  const int block_size = params->block_size;\n  TF_LITE_ENSURE(context, block_size > 0);\n  const int input_height = input->dims->data[kHeightRank];\n  const int input_width = input->dims->data[kWidthRank];\n  const int input_channels = input->dims->data[kDepthRank];\n  int output_height = input_height * block_size;\n  int output_width = input_width * block_size;\n  int output_channels = input_channels / block_size / block_size;\n\n  TF_LITE_ENSURE_EQ(context, input_height, output_height / block_size);\n  TF_LITE_ENSURE_EQ(context, input_width, output_width / block_size);\n  TF_LITE_ENSURE_EQ(context, input_channels,\n                    output_channels * block_size * block_size);\n\n  // We must update the output tensor dimensions.\n  // The dims storage is expected to be the same area in memory\n  // for both TfLiteTensor and TfLiteEvalTensor.  This is important\n  // because TfLiteTensor in the MicroInterpreter is a temporary\n  // allocation.  For the KernelRunner interpreter, TfLiteEvalTensor\n  // is a temporary allocation.  We must therefore relocate the dims\n  // from the FlatBuffer to the persistant storage arena.\n  TfLiteEvalTensor* output_eval =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n  TF_LITE_ENSURE_OK(context, tflite::micro::CreateWritableTensorDimsWithCopy(\n                                 context, output, output_eval));\n  output->dims->data[kBatchRank] = input->dims->data[kBatchRank];\n  output->dims->data[kHeightRank] = output_height;\n  output->dims->data[kWidthRank] = output_width;\n  output->dims->data[kDepthRank] = output_channels;\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  return CalculateOpData(context, node);\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);\n\n  const TfLiteEvalTensor* input =\n      tflite::micro::GetEvalInput(context, node, kInputTensor);\n  TfLiteEvalTensor* output =\n      tflite::micro::GetEvalOutput(context, node, kOutputTensor);\n\n  tflite::DepthToSpaceParams op_params;\n  op_params.block_size = static_cast<int32_t>(params->block_size);\n\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      reference_ops::DepthToSpace(op_params,\n                                  tflite::micro::GetTensorShape(input),\n                                  tflite::micro::GetTensorData<float>(input),\n                                  tflite::micro::GetTensorShape(output),\n                                  tflite::micro::GetTensorData<float>(output));\n      break;\n    case kTfLiteInt8:\n      reference_ops::DepthToSpace(op_params,\n                                  tflite::micro::GetTensorShape(input),\n                                  tflite::micro::GetTensorData<int8_t>(input),\n                                  tflite::micro::GetTensorShape(output),\n                                  tflite::micro::GetTensorData<int8_t>(output));\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(\n          context, \"DEPTH_TO_SPACE only supports FLOAT32 and INT8, got %s.\",\n          TfLiteTypeGetName(output->type));\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n\n}  // namespace\n\nTfLiteRegistration Register_DEPTH_TO_SPACE() {\n  return {/*init=*/nullptr,\n          /*free=*/nullptr,\n          /*prepare=*/Prepare,\n          /*invoke=*/Eval,\n          /*profiling_string=*/nullptr,\n          /*builtin_code=*/0,\n          /*custom_name=*/nullptr,\n          /*version=*/0};\n}\n\n}  // namespace tflite\n"], "filenames": ["tensorflow/lite/kernels/depth_to_space.cc", "tensorflow/lite/kernels/depth_to_space_test.cc", "tensorflow/lite/micro/kernels/depth_to_space.cc"], "buggy_code_start_loc": [63, 62, 56], "buggy_code_end_loc": [63, 62, 56], "fixing_code_start_loc": [64, 63, 57], "fixing_code_end_loc": [65, 68, 58], "type": "CWE-369", "message": "TensorFlow is an end-to-end open source platform for machine learning. The implementation of the `DepthToSpace` TFLite operator is vulnerable to a division by zero error(https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc#L63-L69). An attacker can craft a model such that `params->block_size` is 0. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29595", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:15.207", "lastModified": "2021-07-26T16:21:27.790", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. The implementation of the `DepthToSpace` TFLite operator is vulnerable to a division by zero error(https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc#L63-L69). An attacker can craft a model such that `params->block_size` is 0. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;La implementaci\u00f3n del operador \"DepthToSpace\" TFLite es vulnerable a un error de divisi\u00f3n por cero (https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc )#L63-.&#xa0;Un atacante puede dise\u00f1ar un modelo tal que \"params-)block_size\" sea 0. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.5.0.&#xa0;Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango compatible"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-369"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/106d8f4fb89335a2c52d7c895b7a7485465ca8d9", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vf94-36g5-69v8", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/106d8f4fb89335a2c52d7c895b7a7485465ca8d9"}}