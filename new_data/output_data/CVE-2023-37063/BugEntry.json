{"buggy_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Fhaculty\\Graph\\Graph;\nuse Fhaculty\\Graph\\Vertex;\n\n/**\n * Class Career.\n */\nclass Career extends Model\n{\n    public $table;\n    public $columns = [\n        'id',\n        'name',\n        'description',\n        'status',\n        'parent_id',\n        'created_at',\n        'updated_at',\n    ];\n\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_CAREER);\n    }\n\n    public function getCareerFromId($id)\n    {\n        if (api_get_configuration_value('use_career_external_id_as_identifier_in_diagrams')) {\n            // Try with the external career id.\n            $careerInfo = $this->getCareerFromExternalToInternal($id);\n        } else {\n            $careerInfo = $this->get($id);\n        }\n\n        return $careerInfo;\n    }\n\n    public function getCareerFromExternalToInternal($externalCareerId, $extraFieldVariable = 'external_career_id')\n    {\n        $careerExtraFieldValue = new ExtraFieldValue('career');\n        $careerValue = $careerExtraFieldValue->get_item_id_from_field_variable_and_field_value(\n            $extraFieldVariable,\n            $externalCareerId\n        );\n\n        $careerInfo = [];\n        if (isset($careerValue['item_id'])) {\n            $careerInfo = $this->get($careerValue['item_id']);\n        }\n\n        return $careerInfo;\n    }\n\n    public function getCareerIdFromInternalToExternal($internalCareerId)\n    {\n        $careerExtraFieldValue = new ExtraFieldValue('career');\n        $externalCareerValue = $careerExtraFieldValue->get_values_by_handler_and_field_variable(\n            $internalCareerId,\n            'external_career_id'\n        );\n\n        if (!empty($externalCareerValue) && isset($externalCareerValue['value'])) {\n            return $externalCareerValue['value'];\n        }\n\n        return null;\n    }\n\n    /**\n     * Get the count of elements.\n     *\n     * @return int\n     */\n    public function get_count()\n    {\n        $row = Database::select(\n            'count(*) as count',\n            $this->table,\n            [],\n            'first'\n        );\n\n        return $row['count'];\n    }\n\n    /**\n     * @param array $where_conditions\n     *\n     * @return array\n     */\n    public function get_all($where_conditions = [])\n    {\n        return Database::select(\n            '*',\n            $this->table,\n            ['where' => $where_conditions, 'order' => 'name ASC']\n        );\n    }\n\n    /**\n     * Order the careers by its hierarchy.\n     *\n     * @param $careers\n     */\n    public function orderCareersByHierarchy($careers, int $filterId = 0): array\n    {\n        $orderedCareers = [];\n        $filterAux = [];\n        foreach ($careers as &$career) {\n            if (is_null($career['parent_id'])) {\n                $orderedCareers[] = &$career;\n            } else {\n                $pid = $career['parent_id'];\n                if (!isset($careers[$pid])) {\n                    // Orphan child\n                    break;\n                } else {\n                    if (!isset($careers[$pid]['children'])) {\n                        $careers[$pid]['children'] = [];\n                    }\n                    $careers[$pid]['children'][] = &$career;\n                }\n            }\n            if (!empty($filterId) && $career['id'] == $filterId) {\n                $filterAux[0] = &$career;\n            }\n        }\n\n        return !empty($filterId) ? $filterAux : $orderedCareers;\n    }\n\n    /**\n     * Update all promotion status by career.\n     *\n     * @param int $career_id\n     * @param int $status    (1 or 0)\n     */\n    public function update_all_promotion_status_by_career_id($career_id, $status)\n    {\n        $promotion = new Promotion();\n        $promotion_list = $promotion->get_all_promotions_by_career_id($career_id);\n        if (!empty($promotion_list)) {\n            foreach ($promotion_list as $item) {\n                $params['id'] = $item['id'];\n                $params['status'] = $status;\n                $promotion->update($params);\n                $promotion->update_all_sessions_status_by_promotion_id($params['id'], $status);\n            }\n        }\n    }\n\n    /**\n     * Returns HTML the title + grid.\n     *\n     * @return string\n     */\n    public function display()\n    {\n        $html = '<div class=\"actions\" style=\"margin-bottom:20px\">';\n        $html .= '<a href=\"career_dashboard.php\">'.\n            Display::return_icon('back.png', get_lang('Back'), '', ICON_SIZE_MEDIUM).'</a>';\n        if (api_is_platform_admin()) {\n            $html .= '<a href=\"'.api_get_self().'?action=add\">'.\n                    Display::return_icon('new_career.png', get_lang('Add'), '', ICON_SIZE_MEDIUM).'</a>';\n        }\n        $html .= '</div>';\n        $html .= Display::grid_html('careers');\n\n        return $html;\n    }\n\n    /**\n     * @return array\n     */\n    public function get_status_list()\n    {\n        return [\n            CAREER_STATUS_ACTIVE => get_lang('Unarchived'),\n            CAREER_STATUS_INACTIVE => get_lang('Archived'),\n        ];\n    }\n\n    /**\n     * Return the name of the careers that can be parents of others.\n     */\n    public function getHierarchies(int $selfCareer = 0): array\n    {\n        $return = [];\n        $result = Database::select(\n            'name, id',\n            $this->table,\n            [\n                'where' => ['id != ?' => $selfCareer],\n                'order' => 'id ASC',\n            ]\n        );\n        foreach ($result as $item) {\n            $return[$item['id']] = $item['name'];\n        }\n        array_unshift($return, '--');\n\n        return $return;\n    }\n\n    /**\n     * Returns a Form validator Obj.\n     *\n     * @todo the form should be auto generated\n     *\n     * @param string $url\n     * @param string $action add, edit\n     *\n     * @return FormValidator\n     */\n    public function return_form($url, $action)\n    {\n        $form = new FormValidator('career', 'post', $url);\n        // Setting the form elements\n        $header = get_lang('Add');\n        if ($action == 'edit') {\n            $header = get_lang('Modify');\n        }\n\n        $id = isset($_GET['id']) ? (int) $_GET['id'] : '';\n        $form->addHeader($header);\n        $form->addHidden('id', $id);\n        $form->addElement('text', 'name', get_lang('Name'), ['size' => '70']);\n        $form->addHtmlEditor(\n            'description',\n            get_lang('Description'),\n            false,\n            false,\n            [\n                'ToolbarSet' => 'Careers',\n                'Width' => '100%',\n                'Height' => '250',\n            ]\n        );\n        $status_list = $this->get_status_list();\n        $form->addElement('select', 'status', get_lang('Status'), $status_list);\n\n        if (api_get_configuration_value('career_hierarchy_enable')) {\n            $hierarchyList = $this->getHierarchies((int) $id ?? 0);\n            $form->addElement('select', 'parent_id', get_lang('ParentCareer'), $hierarchyList);\n        }\n\n        if ($action == 'edit') {\n            $extraField = new ExtraField('career');\n            $extraField->addElements($form, $id);\n\n            $form->addElement('text', 'created_at', get_lang('CreatedAt'));\n            $form->freeze('created_at');\n            $form->addButtonSave(get_lang('Modify'));\n        } else {\n            $form->addButtonCreate(get_lang('Add'));\n        }\n\n        // Setting the defaults\n        $defaults = $this->get($id);\n\n        if (!empty($defaults['created_at'])) {\n            $defaults['created_at'] = api_convert_and_format_date($defaults['created_at']);\n        }\n        if (!empty($defaults['updated_at'])) {\n            $defaults['updated_at'] = api_convert_and_format_date($defaults['updated_at']);\n        }\n\n        $form->setDefaults($defaults);\n\n        // Setting the rules\n        $form->addRule('name', get_lang('ThisFieldIsRequired'), 'required');\n\n        return $form;\n    }\n\n    /**\n     * Copies the career to a new one.\n     *\n     * @param   int     Career ID\n     * @param   bool     Whether or not to copy the promotions inside\n     *\n     * @return int New career ID on success, false on failure\n     */\n    public function copy($id, $copy_promotions = false)\n    {\n        $career = $this->get($id);\n        $new = [];\n        foreach ($career as $key => $val) {\n            switch ($key) {\n                case 'id':\n                case 'updated_at':\n                    break;\n                case 'name':\n                    $val .= ' '.get_lang('CopyLabelSuffix');\n                    $new[$key] = $val;\n                    break;\n                case 'created_at':\n                    $val = api_get_utc_datetime();\n                    $new[$key] = $val;\n                    break;\n                default:\n                    $new[$key] = $val;\n                    break;\n            }\n        }\n        $cid = $this->save($new);\n        if ($copy_promotions) {\n            //Now also copy each session of the promotion as a new session and register it inside the promotion\n            $promotion = new Promotion();\n            $promo_list = $promotion->get_all_promotions_by_career_id($id);\n            if (!empty($promo_list)) {\n                foreach ($promo_list as $item) {\n                    $promotion->copy($item['id'], $cid, true);\n                }\n            }\n        }\n\n        return $cid;\n    }\n\n    /**\n     * @param int $career_id\n     *\n     * @return bool\n     */\n    public function get_status($career_id)\n    {\n        $table = Database::get_main_table(TABLE_CAREER);\n        $career_id = intval($career_id);\n        $sql = \"SELECT status FROM $table WHERE id = '$career_id'\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result) > 0) {\n            $data = Database::fetch_array($result);\n\n            return $data['status'];\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @param array $params\n     * @param bool  $show_query\n     *\n     * @return int\n     */\n    public function save($params, $show_query = false)\n    {\n        if (isset($params['description'])) {\n            $params['description'] = Security::remove_XSS($params['description']);\n        }\n\n        $id = parent::save($params);\n        if (!empty($id)) {\n            Event::addEvent(\n                LOG_CAREER_CREATE,\n                LOG_CAREER_ID,\n                $id,\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        }\n\n        return $id;\n    }\n\n    /**\n     * Delete a record from the career table and report in the default events log table.\n     *\n     * @param int $id The ID of the career to delete\n     *\n     * @return bool True if the career could be deleted, false otherwise\n     */\n    public function delete($id)\n    {\n        $res = parent::delete($id);\n        if ($res) {\n            $extraFieldValues = new ExtraFieldValue('career');\n            $extraFieldValues->deleteValuesByItem($id);\n            Event::addEvent(\n                LOG_CAREER_DELETE,\n                LOG_CAREER_ID,\n                $id,\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        }\n\n        return $res;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function update($params, $showQuery = false)\n    {\n        if (isset($params['description'])) {\n            $params['description'] = Security::remove_XSS($params['description']);\n        }\n\n        return parent::update($params, $showQuery);\n    }\n\n    /**\n     * @param array\n     * @param Graph $graph\n     *\n     * @return string\n     */\n    public static function renderDiagram($careerInfo, $graph)\n    {\n        if (!($graph instanceof Graph)) {\n            return '';\n        }\n\n        // Getting max column\n        $maxColumn = 0;\n        foreach ($graph->getVertices() as $vertex) {\n            $groupId = (int) $vertex->getGroup();\n            if ($groupId > $maxColumn) {\n                $maxColumn = $groupId;\n            }\n        }\n\n        $list = [];\n        /** @var Vertex $vertex */\n        foreach ($graph->getVertices() as $vertex) {\n            $group = $vertex->getAttribute('Group');\n            $groupData = explode(':', $group);\n            $group = $groupData[0];\n            $groupLabel = isset($groupData[1]) ? $groupData[1] : '';\n            $subGroup = $vertex->getAttribute('SubGroup');\n            $subGroupData = explode(':', $subGroup);\n            $column = $vertex->getGroup();\n            $row = $vertex->getAttribute('Row');\n            $subGroupId = $subGroupData[0];\n            $label = isset($subGroupData[1]) ? $subGroupData[1] : '';\n            $list[$group][$subGroupId]['columns'][$column][$row] = $vertex;\n            $list[$group][$subGroupId]['label'] = $label;\n            $list[$group]['label'] = $groupLabel;\n        }\n\n        $maxGroups = count($list);\n        $widthGroup = 30;\n        if (!empty($maxGroups)) {\n            $widthGroup = 85 / $maxGroups;\n        }\n\n        $connections = '';\n        $groupDrawLine = [];\n        $groupCourseList = [];\n        // Read Connections column\n        foreach ($list as $group => $subGroupList) {\n            foreach ($subGroupList as $subGroupData) {\n                $columns = isset($subGroupData['columns']) ? $subGroupData['columns'] : [];\n                $showGroupLine = true;\n                if (count($columns) == 1) {\n                    $showGroupLine = false;\n                }\n                $groupDrawLine[$group] = $showGroupLine;\n\n                //if ($showGroupLine == false) {\n                /** @var Vertex $vertex */\n                foreach ($columns as $row => $items) {\n                    foreach ($items as $vertex) {\n                        if ($vertex instanceof Vertex) {\n                            $groupCourseList[$group][] = $vertex->getId();\n                            $connectionList = $vertex->getAttribute('Connections');\n                            $firstConnection = '';\n                            $secondConnection = '';\n                            if (!empty($connectionList)) {\n                                $explode = explode('-', $connectionList);\n                                $pos = strpos($explode[0], 'SG');\n                                if ($pos === false) {\n                                    $pos = strpos($explode[0], 'G');\n                                    if (is_numeric($pos)) {\n                                        // group_123 id\n                                        $groupValueId = (int) str_replace(\n                                            'G',\n                                            '',\n                                            $explode[0]\n                                        );\n                                        $firstConnection = 'group_'.$groupValueId;\n                                        $groupDrawLine[$groupValueId] = true;\n                                    } else {\n                                        // Course block (row_123 id)\n                                        if (!empty($explode[0])) {\n                                            $firstConnection = 'row_'.(int) $explode[0];\n                                        }\n                                    }\n                                } else {\n                                    // subgroup__123 id\n                                    $firstConnection = 'subgroup_'.(int) str_replace('SG', '', $explode[0]);\n                                }\n\n                                $pos = strpos($explode[1], 'SG');\n                                if ($pos === false) {\n                                    $pos = strpos($explode[1], 'G');\n                                    if (is_numeric($pos)) {\n                                        $groupValueId = (int) str_replace(\n                                            'G',\n                                            '',\n                                            $explode[1]\n                                        );\n                                        $secondConnection = 'group_'.$groupValueId;\n                                        $groupDrawLine[$groupValueId] = true;\n                                    } else {\n                                        // Course block (row_123 id)\n                                        if (!empty($explode[0])) {\n                                            $secondConnection = 'row_'.(int) $explode[1];\n                                        }\n                                    }\n                                } else {\n                                    $secondConnection = 'subgroup_'.(int) str_replace('SG', '', $explode[1]);\n                                }\n\n                                if (!empty($firstConnection) && !empty($firstConnection)) {\n                                    $connections .= self::createConnection(\n                                        $firstConnection,\n                                        $secondConnection,\n                                        ['Left', 'Right']\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n                //}\n            }\n        }\n\n        $graphHtml = '<div class=\"container\">';\n        foreach ($list as $group => $subGroupList) {\n            $showGroupLine = false;\n            if (isset($groupDrawLine[$group]) && $groupDrawLine[$group]) {\n                $showGroupLine = true;\n            }\n            $graphHtml .= self::parseSubGroups(\n                $groupCourseList,\n                $group,\n                $list[$group]['label'],\n                $showGroupLine,\n                $subGroupList,\n                $widthGroup\n            );\n        }\n        $graphHtml .= '</div>';\n        $graphHtml .= $connections;\n\n        return $graphHtml;\n    }\n\n    /**\n     * @param array    $careerInfo\n     * @param Template $tpl\n     * @param int      $loadUserIdData\n     *\n     * @return string\n     */\n    public static function renderDiagramByColumn($careerInfo, $tpl, $loadUserIdData = 0, $showFooter = true)\n    {\n        $careerId = $careerInfo['id'] ?? 0;\n        if (empty($careerId)) {\n            return '';\n        }\n\n        $extraFieldValue = new ExtraFieldValue('career');\n        $item = $extraFieldValue->get_values_by_handler_and_field_variable(\n            $careerId,\n            'career_diagram',\n            false,\n            false,\n            false\n        );\n\n        $graph = null;\n        if (!empty($item) && isset($item['value']) && !empty($item['value'])) {\n            /** @var Graph $graph */\n            $graph = UnserializeApi::unserialize('career', $item['value']);\n        }\n\n        if (!($graph instanceof Graph)) {\n            return '';\n        }\n\n        // Getting max column\n        $maxColumn = 0;\n        foreach ($graph->getVertices() as $vertex) {\n            $groupId = (int) $vertex->getGroup();\n            if ($groupId > $maxColumn) {\n                $maxColumn = $groupId;\n            }\n        }\n\n        $userResult = [];\n        if (!empty($loadUserIdData)) {\n            $careerData = UserManager::getUserCareer($loadUserIdData, $careerId);\n            if (isset($careerData['extra_data']) && !empty($careerData['extra_data'])) {\n                $userResult = unserialize($careerData['extra_data']);\n            }\n        }\n\n        $list = [];\n        $subGroups = [];\n        /** @var Vertex $vertex */\n        foreach ($graph->getVertices() as $vertex) {\n            $column = $vertex->getGroup();\n            $group = $vertex->getAttribute('Group');\n\n            $groupData = explode(':', $group);\n            $group = $groupData[0];\n            $groupLabel = isset($groupData[1]) ? $groupData[1] : '';\n\n            $subGroup = $vertex->getAttribute('SubGroup');\n            $subGroupData = explode(':', $subGroup);\n\n            $row = $vertex->getAttribute('Row');\n            $subGroupId = $subGroupData[0];\n            $subGroupLabel = isset($subGroupData[1]) ? $subGroupData[1] : '';\n\n            if (!empty($subGroupId) && !in_array($subGroupId, $subGroups)) {\n                $subGroups[$subGroupId]['items'][] = $vertex->getId();\n                $subGroups[$subGroupId]['label'] = $subGroupLabel;\n            }\n\n            $list[$column]['rows'][$row]['items'][] = $vertex;\n            $list[$column]['rows'][$row]['label'] = $subGroupId;\n            $list[$column]['rows'][$row]['group'] = $group;\n            $list[$column]['rows'][$row]['group_label'] = $groupLabel;\n            $list[$column]['rows'][$row]['subgroup'] = $subGroup;\n            $list[$column]['rows'][$row]['subgroup_label'] = $subGroupLabel;\n            $list[$column]['label'] = $groupLabel;\n            $list[$column]['column'] = $column;\n        }\n\n        $groupCourseList = [];\n        $simpleConnectionList = [];\n\n        // Read Connections column\n        foreach ($list as $column => $groupList) {\n            foreach ($groupList['rows'] as $subGroupList) {\n                /** @var Vertex $vertex */\n                foreach ($subGroupList['items'] as $vertex) {\n                    if ($vertex instanceof Vertex) {\n                        $groupCourseList[$vertex->getAttribute('Column')][] = $vertex->getId();\n                        $connectionList = $vertex->getAttribute('Connections');\n                        if (empty($connectionList)) {\n                            continue;\n                        }\n                        $simpleFirstConnection = '';\n                        $simpleSecondConnection = '';\n\n                        $explode = explode('-', $connectionList);\n                        $pos = strpos($explode[0], 'SG');\n                        if ($pos === false) {\n                            $pos = strpos($explode[0], 'G');\n                            if (is_numeric($pos)) {\n                                // Is group\n                                $groupValueId = (int) str_replace(\n                                    'G',\n                                    '',\n                                    $explode[0]\n                                );\n                                $simpleFirstConnection = 'g'.(int) $groupValueId;\n                            } else {\n                                // Course block (row_123 id)\n                                if (!empty($explode[0])) {\n                                    $simpleFirstConnection = 'v'.$explode[0];\n                                }\n                            }\n                        } else {\n                            // subgroup__123 id\n                            $simpleFirstConnection = 'sg'.(int) str_replace('SG', '', $explode[0]);\n                        }\n\n                        $pos = false;\n                        if (isset($explode[1])) {\n                            $pos = strpos($explode[1], 'SG');\n                        }\n                        if ($pos === false) {\n                            if (isset($explode[1])) {\n                                $pos = strpos($explode[1], 'G');\n                                $value = $explode[1];\n                            }\n                            if (is_numeric($pos)) {\n                                $groupValueId = (int) str_replace(\n                                    'G',\n                                    '',\n                                    $value\n                                );\n                                $simpleSecondConnection = 'g'.(int) $groupValueId;\n                            } else {\n                                // Course block (row_123 id)\n                                if (!empty($explode[0]) && isset($explode[1])) {\n                                    $simpleSecondConnection = 'v'.(int) $explode[1];\n                                }\n                            }\n                        } else {\n                            $simpleSecondConnection = 'sg'.(int) str_replace('SG', '', $explode[1]);\n                        }\n\n                        if (!empty($simpleFirstConnection) && !empty($simpleSecondConnection)) {\n                            $simpleConnectionList[] = [\n                                'from' => $simpleFirstConnection,\n                                'to' => $simpleSecondConnection,\n                            ];\n                        }\n                    }\n                }\n            }\n        }\n\n        $graphHtml = '';\n        $groupsBetweenColumns = [];\n        foreach ($list as $column => $columnList) {\n            foreach ($columnList['rows'] as $subGroupList) {\n                $newGroup = $subGroupList['group'];\n                $label = $subGroupList['group_label'];\n                $newOrder[$newGroup]['items'][] = $subGroupList;\n                $newOrder[$newGroup]['label'] = $label;\n                $groupsBetweenColumns[$newGroup][] = $subGroupList;\n            }\n        }\n\n        // Creates graph\n        $graph = new stdClass();\n        $graph->blockWidth = 280;\n        $graph->blockHeight = 150;\n\n        $graph->xGap = 70;\n        $graph->yGap = 55;\n\n        $graph->xDiff = 70;\n        $graph->yDiff = 55;\n\n        if (!empty($userResult)) {\n            $graph->blockHeight = 180;\n            $graph->yGap = 60;\n            $graph->yDiff = 60;\n        }\n\n        foreach ($groupsBetweenColumns as $group => $items) {\n            self::parseColumnList($groupCourseList, $items, $graph, $simpleConnectionList, $userResult);\n        }\n\n        $graphHtml .= '<style>\n             .panel-title {\n                font-size: 11px;\n                height: 40px;\n             }\n\n             .panel-body{\n                min-height: 55px;\n             }\n             </style>';\n\n        // Create groups\n        if (!empty($graph->groupList)) {\n            $groupList = [];\n            $groupDiffX = 20;\n            $groupDiffY = 50;\n            $style = 'whiteSpace=wrap;rounded;html=1;strokeColor=red;fillColor=none;strokeWidth=2;align=left;verticalAlign=top;';\n            foreach ($graph->groupList as $id => $data) {\n                if (empty($id)) {\n                    continue;\n                }\n\n                $x = $data['min_x'] - $groupDiffX;\n                $y = $data['min_y'] - $groupDiffY;\n                $width = $data['max_width'] + ($groupDiffX * 2);\n                $height = $data['max_height'] + $groupDiffY * 2;\n                $label = '<h4>'.$data['label'].'</h4>';\n                $vertexData = \"var g$id = graph.insertVertex(parent, null, '$label', $x, $y, $width, $height, '$style');\";\n                $groupList[] = $vertexData;\n            }\n            $tpl->assign('group_list', $groupList);\n        }\n\n        // Create subgroups\n        $subGroupList = [];\n        $subGroupListData = [];\n        foreach ($subGroups as $subGroupId => $vertexData) {\n            $label = $vertexData['label'];\n            $vertexIdList = $vertexData['items'];\n            foreach ($vertexIdList as $rowId) {\n                $data = $graph->allData[$rowId];\n                $originalRow = $data['row'];\n                $column = $data['column'];\n                $x = $data['x'];\n                $y = $data['y'];\n                $width = $data['width'];\n                $height = $data['height'];\n\n                if (!isset($subGroupListData[$subGroupId])) {\n                    $subGroupListData[$subGroupId]['min_x'] = 1000;\n                    $subGroupListData[$subGroupId]['min_y'] = 1000;\n                    $subGroupListData[$subGroupId]['max_width'] = 0;\n                    $subGroupListData[$subGroupId]['max_height'] = 0;\n                    $subGroupListData[$subGroupId]['label'] = $label;\n                }\n\n                if ($x < $subGroupListData[$subGroupId]['min_x']) {\n                    $subGroupListData[$subGroupId]['min_x'] = $x;\n                }\n\n                if ($y < $subGroupListData[$subGroupId]['min_y']) {\n                    $subGroupListData[$subGroupId]['min_y'] = $y;\n                }\n\n                $subGroupListData[$subGroupId]['max_width'] = ($column + 1) * ($width + $graph->xGap) - $subGroupListData[$subGroupId]['min_x'];\n                $subGroupListData[$subGroupId]['max_height'] = ($originalRow + 1) * ($height + $graph->yGap) - $subGroupListData[$subGroupId]['min_y'];\n            }\n\n            $style = 'whiteSpace=wrap;rounded;dashed=1;strokeColor=blue;fillColor=none;strokeWidth=2;align=left;verticalAlign=bottom;';\n            $subGroupDiffX = 5;\n            foreach ($subGroupListData as $subGroupId => $data) {\n                $x = $data['min_x'] - $subGroupDiffX;\n                $y = $data['min_y'] - $subGroupDiffX;\n\n                $spaceForSubGroupTitle = 0;\n                if (!empty($data['label'])) {\n                    $spaceForSubGroupTitle = 40;\n                }\n\n                $width = $data['max_width'] + $subGroupDiffX * 2;\n                $height = $data['max_height'] + $subGroupDiffX * 2 + $spaceForSubGroupTitle;\n\n                $label = '<h4 style=\"background: white\">'.$data['label'].'</h4>';\n                $vertexData = \"var sg$subGroupId = graph.insertVertex(parent, null, '$label', $x, $y, $width, $height, '$style');\";\n                $subGroupList[] = $vertexData;\n            }\n        }\n\n        // Create connections (arrows)\n        if (!empty($simpleConnectionList)) {\n            $connectionList = [];\n            //$style = 'endArrow=classic;html=1;strokeWidth=4;exitX=1;exitY=0.5;entryX=0;entryY=0.5;';\n            $style = '';\n            foreach ($simpleConnectionList as $connection) {\n                $from = $connection['from'];\n                $to = $connection['to'];\n                $vertexData = \"var e1 = graph.insertEdge(parent, null, '', $from, $to, '$style')\";\n                $connectionList[] = $vertexData;\n            }\n            $tpl->assign('connections', $connectionList);\n        }\n\n        $tpl->assign('subgroup_list', $subGroupList);\n        $tpl->assign('vertex_list', $graph->elementList);\n\n        $graphHtml .= '<div id=\"graphContainer\"></div>';\n        if ($showFooter) {\n            $graphHtml .= self::renderDiagramFooter();\n        }\n\n        return $graphHtml;\n    }\n\n    /**\n     * @param $groupCourseList\n     * @param $columnList\n     * @param $graph\n     * @param $connections\n     * @param $userResult\n     *\n     * @return string\n     */\n    public static function parseColumnList($groupCourseList, $columnList, &$graph, &$connections, $userResult)\n    {\n        $graphHtml = '';\n        $newOrder = [];\n        foreach ($columnList as $subGroupList) {\n            $newGroup = $subGroupList['group'];\n            $label = $subGroupList['group_label'];\n            $newOrder[$newGroup]['items'][] = $subGroupList;\n            $newOrder[$newGroup]['label'] = $label;\n        }\n\n        foreach ($newOrder as $newGroup => $data) {\n            $label = $data['label'];\n            $subGroupList = $data['items'];\n\n            if (!isset($graph->groupList[$newGroup])) {\n                $graph->groupList[$newGroup]['min_x'] = 1000;\n                $graph->groupList[$newGroup]['min_y'] = 1000;\n                $graph->groupList[$newGroup]['max_width'] = 0;\n                $graph->groupList[$newGroup]['max_height'] = 0;\n                $graph->groupList[$newGroup]['label'] = $label;\n            }\n\n            $maxColumn = 0;\n            $maxRow = 0;\n            $minColumn = 100;\n            $minRow = 100;\n            foreach ($subGroupList as $item) {\n                /** @var Vertex $vertex */\n                foreach ($item['items'] as $vertex) {\n                    $column = $vertex->getAttribute('Column');\n                    $realRow = $vertex->getAttribute('Row');\n\n                    if ($column > $maxColumn) {\n                        $maxColumn = $column;\n                    }\n                    if ($realRow > $maxRow) {\n                        $maxRow = $realRow;\n                    }\n\n                    if ($column < $minColumn) {\n                        $minColumn = $column;\n                    }\n                    if ($realRow < $minRow) {\n                        $minRow = $realRow;\n                    }\n                }\n            }\n\n            if (!empty($newGroup)) {\n                $graphHtml .= '<div\n                    id =\"group_'.$newGroup.'\"\n                    class=\"group'.$newGroup.' group_class\"\n                    style=\"display:grid;\n                        align-self: start;\n                        grid-gap: 10px;\n                        justify-items: stretch;\n                        align-items: start;\n                        align-content: start;\n                        justify-content: stretch;\n                        grid-area:'.$minRow.'/'.$minColumn.'/'.$maxRow.'/'.$maxColumn.'\">'; //style=\"display:grid\"\n            }\n\n            $addRow = 0;\n            if (!empty($label)) {\n                $graphHtml .= \"<div class='my_label' style='grid-area:$minRow/$minColumn/$maxRow/$maxColumn'>$label</div>\";\n                $addRow = 1;\n            }\n\n            foreach ($subGroupList as $item) {\n                $graphHtml .= self::parseVertexList(\n                    $groupCourseList,\n                    $item['items'],\n                    $addRow,\n                    $graph,\n                    $newGroup,\n                    $connections,\n                    $userResult\n                );\n            }\n\n            if (!empty($newGroup)) {\n                $graphHtml .= '</div >';\n            }\n        }\n\n        return $graphHtml;\n    }\n\n    /**\n     * @param array    $groupCourseList\n     * @param array    $vertexList\n     * @param int      $addRow\n     * @param stdClass $graph\n     * @param int      $group\n     * @param array    $connections\n     * @param array    $userResult\n     *\n     * @return string\n     */\n    public static function parseVertexList($groupCourseList, $vertexList, $addRow, &$graph, $group, &$connections, $userResult)\n    {\n        if (empty($vertexList)) {\n            return '';\n        }\n\n        $graphHtml = '';\n        /** @var Vertex $vertex */\n        foreach ($vertexList as $vertex) {\n            $borderColor = 'green';\n            $column = $vertex->getAttribute('Column');\n            $realRow = $originalRow = $vertex->getAttribute('Row');\n            if ($addRow) {\n                $realRow = $realRow + $addRow;\n            }\n            $id = $vertex->getId();\n            $area = \"$realRow/$column\";\n            $graphHtml .= '<div\n                id = \"row_wrapper_'.$id.'\"\n                data= \"'.$originalRow.'-'.$column.'\"\n                style=\"\n                    align-self: start;\n                    justify-content: stretch;\n                    grid-area:'.$area.'\"\n            >';\n            $color = '';\n            if (!empty($vertex->getAttribute('DefinedColor'))) {\n                $color = $vertex->getAttribute('DefinedColor');\n            }\n            $content = '<div class=\"pull-left\">'.$vertex->getAttribute('Notes').'</div>';\n            $content .= '<div class=\"pull-right\">['.$id.']</div>';\n\n            if (!empty($userResult) && isset($userResult[$id]) && !empty($userResult[$id])) {\n                // Order by SortDate\n                $sortedByDate = $userResult[$id];\n                foreach ($sortedByDate as $resultId => &$result) {\n                    $result['resultId'] = $resultId;\n                }\n\n                usort($sortedByDate, function ($item1, $item2) {\n                    if (!isset($item1['SortDate']) || !isset($item2['SortDate'])) {\n                        return false;\n                    }\n\n                    return $item1['SortDate'] > $item2['SortDate'];\n                });\n\n                $lastItem = end($sortedByDate);\n                if ($lastItem && isset($lastItem['BgColor']) && !empty($lastItem['BgColor'])) {\n                    $color = $lastItem['BgColor'].'; color: '.$lastItem['Color'];\n                    $borderColor = $lastItem['BorderColor'];\n                }\n                $results = '';\n                $size = 2;\n                foreach ($sortedByDate as $iconData) {\n                    $resultId = $iconData['resultId'];\n                    $icon = '';\n                    switch ($iconData['Icon']) {\n                        case 0:\n                            $icon = Display::returnFontAwesomeIcon('times-circle', $size);\n                            break;\n                        case 1:\n                            $icon = Display::returnFontAwesomeIcon('check-circle', $size);\n                            break;\n                        case 2:\n                            $icon = Display::returnFontAwesomeIcon('info-circle', $size);\n                            break;\n                    }\n\n                    if (substr($resultId, 0, 1) == 2) {\n                        $iconData['Description'] = 'Result Id = '.$resultId;\n                    }\n\n                    if ('Joe Anonymous' === $iconData['TeacherUsername']) {\n                        $iconData['TeacherUsername'] = '';\n                    }\n\n                    if (!empty($icon)) {\n                        $params = [\n                            'id' => 'course_'.$id.'_'.$resultId,\n                            'data-toggle' => 'popover',\n                            'title' => 'Popover title',\n                            'class' => 'popup',\n                            'data-description' => $iconData['Description'],\n                            'data-period' => $iconData['Period'],\n                            'data-teacher-text' => $iconData['TeacherText'],\n                            'data-teacher' => $iconData['TeacherUsername'],\n                            'data-score' => $iconData['ScoreText'],\n                            'data-score-value' => $iconData['ScoreValue'],\n                            'data-info' => $iconData['Info'],\n                            'data-background-color' => $iconData['BgColor'],\n                            'data-color' => $iconData['Color'],\n                            'data-border-color' => $iconData['BorderColor'],\n                            'style' => 'color:'.$iconData['IconColor'],\n                        ];\n                        $results .= Display::url($icon, 'javascript:void(0);', $params);\n                    }\n                }\n\n                if (!empty($results)) {\n                    $content .= '<div class=\"row\"></div><div class=\"pull-left\">'.$results.'</div>';\n                }\n            }\n\n            $title = $vertex->getAttribute('graphviz.label');\n            if (!empty($vertex->getAttribute('LinkedElement'))) {\n                $title = Display::url($title, $vertex->getAttribute('LinkedElement').'&iframe=1');\n            }\n\n            $originalRow--;\n            $column--;\n\n            $graphHtml .= Display::panel(\n                $content,\n                $title,\n                null,\n                null,\n                null,\n                \"row_$id\",\n                $color\n            );\n\n            $panel = Display::panel(\n                $content,\n                $title,\n                null,\n                null,\n                null,\n                \"row_$id\",\n                $color\n            );\n\n            $x = $column * $graph->blockWidth + $graph->xDiff;\n            $y = $originalRow * $graph->blockHeight + $graph->yDiff;\n\n            $width = $graph->blockWidth - $graph->xGap;\n            $height = $graph->blockHeight - $graph->yGap;\n\n            $style = 'text;html=1;strokeColor='.$borderColor.';fillColor=#ffffff;overflow=fill;rounded=0;align=left;';\n\n            $panel = str_replace([\"\\n\", \"\\r\"], '', $panel);\n            $vertexData = \"var v$id = graph.insertVertex(parent, null, '\".addslashes($panel).\"', $x, $y, $width, $height, '$style');\";\n\n            $graph->elementList[$id] = $vertexData;\n            $graph->allData[$id] = [\n                'x' => $x,\n                'y' => $y,\n                'width' => $width,\n                'height' => $height,\n                'row' => $originalRow,\n                'column' => $column,\n                'label' => $title,\n            ];\n\n            if ($x < $graph->groupList[$group]['min_x']) {\n                $graph->groupList[$group]['min_x'] = $x;\n            }\n\n            if ($y < $graph->groupList[$group]['min_y']) {\n                $graph->groupList[$group]['min_y'] = $y;\n            }\n\n            $graph->groupList[$group]['max_width'] = ($column + 1) * ($width + $graph->xGap) - $graph->groupList[$group]['min_x'];\n            $graph->groupList[$group]['max_height'] = ($originalRow + 1) * ($height + ($graph->yGap)) - $graph->groupList[$group]['min_y'];\n\n            $graphHtml .= '</div>';\n            $arrow = $vertex->getAttribute('DrawArrowFrom');\n            $found = false;\n            if (!empty($arrow)) {\n                $pos = strpos($arrow, 'SG');\n                if ($pos === false) {\n                    $pos = strpos($arrow, 'G');\n                    if (is_numeric($pos)) {\n                        $parts = explode('G', $arrow);\n                        if (empty($parts[0]) && count($parts) == 2) {\n                            $groupArrow = $parts[1];\n                            $graphHtml .= self::createConnection(\n                                \"group_$groupArrow\",\n                                \"row_$id\",\n                                ['Left', 'Right']\n                            );\n                            $found = true;\n                            $connections[] = [\n                              'from' => \"g$groupArrow\",\n                              'to' => \"v$id\",\n                            ];\n                        }\n                    }\n                } else {\n                    // Case is only one subgroup value example: SG1\n                    $parts = explode('SG', $arrow);\n                    if (empty($parts[0]) && count($parts) == 2) {\n                        $subGroupArrow = $parts[1];\n                        $graphHtml .= self::createConnection(\n                            \"subgroup_$subGroupArrow\",\n                            \"row_$id\",\n                            ['Left', 'Right']\n                        );\n                        $found = true;\n                        $connections[] = [\n                            'from' => \"sg$subGroupArrow\",\n                            'to' => \"v$id\",\n                        ];\n                    }\n                }\n\n                if ($found == false) {\n                    // case is connected to 2 subgroups: Example SG1-SG2\n                    $parts = explode('-', $arrow);\n                    if (count($parts) == 2 && !empty($parts[0]) && !empty($parts[1])) {\n                        $defaultArrow = ['Top', 'Bottom'];\n                        $firstPrefix = '';\n                        $firstId = '';\n                        $secondId = '';\n                        $secondPrefix = '';\n                        if (is_numeric($pos = strpos($parts[0], 'SG'))) {\n                            $firstPrefix = 'sg';\n                            $firstId = str_replace('SG', '', $parts[0]);\n                        }\n\n                        if (is_numeric($pos = strpos($parts[1], 'SG'))) {\n                            $secondPrefix = 'sg';\n                            $secondId = str_replace('SG', '', $parts[1]);\n                        }\n                        if (!empty($secondId) && !empty($firstId)) {\n                            $connections[] = [\n                                'from' => $firstPrefix.$firstId,\n                                'to' => $secondPrefix.$secondId,\n                                $defaultArrow,\n                            ];\n                            $found = true;\n                        }\n                    }\n                }\n\n                if ($found == false) {\n                    // case DrawArrowFrom is an integer\n                    $defaultArrow = ['Left', 'Right'];\n                    if (isset($groupCourseList[$column]) &&\n                        in_array($arrow, $groupCourseList[$column])\n                    ) {\n                        $defaultArrow = ['Top', 'Bottom'];\n                    }\n                    $graphHtml .= self::createConnection(\n                        \"row_$arrow\",\n                        \"row_$id\",\n                        $defaultArrow\n                    );\n\n                    $connections[] = [\n                        'from' => \"v$arrow\",\n                        'to' => \"v$id\",\n                    ];\n                }\n            }\n        }\n\n        return $graphHtml;\n    }\n\n    /**\n     * @param array  $groupCourseList list of groups and their courses\n     * @param int    $group\n     * @param string $groupLabel\n     * @param bool   $showGroupLine\n     * @param array  $subGroupList\n     * @param $widthGroup\n     *\n     * @return string\n     */\n    public static function parseSubGroups(\n        $groupCourseList,\n        $group,\n        $groupLabel,\n        $showGroupLine,\n        $subGroupList,\n        $widthGroup\n    ) {\n        $topValue = 90;\n        $defaultSpace = 40;\n        $leftGroup = $defaultSpace.'px';\n        if ($group == 1) {\n            $leftGroup = 0;\n        }\n\n        $groupIdTag = \"group_$group\";\n        $borderLine = $showGroupLine === true ? 'border-style:solid;' : '';\n\n        $graphHtml = '<div\n            id=\"'.$groupIdTag.'\" class=\"career_group\"\n            style=\" '.$borderLine.' padding:15px; float:left; margin-left:'.$leftGroup.'; width:'.$widthGroup.'%\">';\n\n        if (!empty($groupLabel)) {\n            $graphHtml .= '<h3>'.$groupLabel.'</h3>';\n        }\n\n        foreach ($subGroupList as $subGroup => $subGroupData) {\n            $subGroupLabel = isset($subGroupData['label']) ? $subGroupData['label'] : '';\n            $columnList = isset($subGroupData['columns']) ? $subGroupData['columns'] : [];\n\n            if (empty($columnList)) {\n                continue;\n            }\n\n            $line = '';\n            if (!empty($subGroup)) {\n                $line = 'border-style:solid;';\n            }\n\n            // padding:15px;\n            $graphHtml .= '<div\n                id=\"subgroup_'.$subGroup.'\" class=\"career_subgroup\"\n                style=\"'.$line.' margin-bottom:20px; padding:15px; float:left; margin-left:0px; width:100%\">';\n            if (!empty($subGroupLabel)) {\n                $graphHtml .= '<h3>'.$subGroupLabel.'</h3>';\n            }\n            foreach ($columnList as $column => $rows) {\n                $leftColumn = $defaultSpace.'px';\n                if ($column == 1) {\n                    $leftColumn = 0;\n                }\n                if (count($columnList) == 1) {\n                    $leftColumn = 0;\n                }\n\n                $widthColumn = 85 / count($columnList);\n                $graphHtml .= '<div\n                    id=\"col_'.$column.'\" class=\"career_column\"\n                    style=\"padding:15px;float:left; margin-left:'.$leftColumn.'; width:'.$widthColumn.'%\">';\n                $maxRow = 0;\n                foreach ($rows as $row => $vertex) {\n                    if ($row > $maxRow) {\n                        $maxRow = $row;\n                    }\n                }\n\n                $newRowList = [];\n                $defaultSubGroup = -1;\n                $subGroupCountList = [];\n                for ($i = 0; $i < $maxRow; $i++) {\n                    /** @var Vertex $vertex */\n                    $vertex = isset($rows[$i + 1]) ? $rows[$i + 1] : null;\n                    if (!is_null($vertex)) {\n                        $subGroup = $vertex->getAttribute('SubGroup');\n                        if ($subGroup == '' || empty($subGroup)) {\n                            $defaultSubGroup = 0;\n                        } else {\n                            $defaultSubGroup = (int) $subGroup;\n                        }\n                    }\n                    $newRowList[$i + 1][$defaultSubGroup][] = $vertex;\n                    if (!isset($subGroupCountList[$defaultSubGroup])) {\n                        $subGroupCountList[$defaultSubGroup] = 1;\n                    } else {\n                        $subGroupCountList[$defaultSubGroup]++;\n                    }\n                }\n\n                $subGroup = null;\n                $subGroupAdded = [];\n                /** @var Vertex $vertex */\n                foreach ($newRowList as $row => $subGroupList) {\n                    foreach ($subGroupList as $subGroup => $vertexList) {\n                        if (!empty($subGroup) && $subGroup != -1) {\n                            if (!isset($subGroupAdded[$subGroup])) {\n                                $subGroupAdded[$subGroup] = 1;\n                            } else {\n                                $subGroupAdded[$subGroup]++;\n                            }\n                        }\n\n                        foreach ($vertexList as $vertex) {\n                            if (is_null($vertex)) {\n                                $graphHtml .= '<div class=\"career_empty\" style=\"height: 130px\">';\n                                $graphHtml .= '</div>';\n                                continue;\n                            }\n\n                            $id = $vertex->getId();\n                            $rowId = \"row_$row\";\n                            $graphHtml .= '<div id = \"row_'.$id.'\" class=\"'.$rowId.' career_row\" >';\n                            $color = '';\n                            if (!empty($vertex->getAttribute('DefinedColor'))) {\n                                $color = $vertex->getAttribute('DefinedColor');\n                            }\n                            $content = $vertex->getAttribute('Notes');\n                            $content .= '<div class=\"pull-right\">['.$id.']</div>';\n\n                            $title = $vertex->getAttribute('graphviz.label');\n                            if (!empty($vertex->getAttribute('LinkedElement'))) {\n                                $title = Display::url($title, $vertex->getAttribute('LinkedElement'));\n                            }\n\n                            $graphHtml .= Display::panel(\n                                $content,\n                                $title,\n                                null,\n                                null,\n                                null,\n                                null,\n                                $color\n                            );\n                            $graphHtml .= '</div>';\n\n                            $arrow = $vertex->getAttribute('DrawArrowFrom');\n                            $found = false;\n                            if (!empty($arrow)) {\n                                $pos = strpos($arrow, 'SG');\n                                if ($pos === false) {\n                                    $pos = strpos($arrow, 'G');\n                                    if (is_numeric($pos)) {\n                                        $parts = explode('G', $arrow);\n                                        if (empty($parts[0]) && count($parts) == 2) {\n                                            $groupArrow = $parts[1];\n                                            $graphHtml .= self::createConnection(\n                                                \"group_$groupArrow\",\n                                                \"row_$id\",\n                                                ['Left', 'Right']\n                                            );\n                                            $found = true;\n                                        }\n                                    }\n                                } else {\n                                    $parts = explode('SG', $arrow);\n                                    if (empty($parts[0]) && count($parts) == 2) {\n                                        $subGroupArrow = $parts[1];\n                                        $graphHtml .= self::createConnection(\n                                            \"subgroup_$subGroupArrow\",\n                                            \"row_$id\",\n                                            ['Left', 'Right']\n                                        );\n                                        $found = true;\n                                    }\n                                }\n                            }\n\n                            if ($found == false) {\n                                $defaultArrow = ['Left', 'Right'];\n                                if (isset($groupCourseList[$group]) &&\n                                    in_array($arrow, $groupCourseList[$group])\n                                ) {\n                                    $defaultArrow = ['Top', 'Bottom'];\n                                }\n                                $graphHtml .= self::createConnection(\n                                    \"row_$arrow\",\n                                    \"row_$id\",\n                                    $defaultArrow\n                                );\n                            }\n                        }\n                    }\n                }\n                $graphHtml .= '</div>';\n            }\n            $graphHtml .= '</div>';\n        }\n        $graphHtml .= '</div>';\n\n        return $graphHtml;\n    }\n\n    /**\n     * @param string $source\n     * @param string $target\n     * @param array  $anchor\n     *\n     * @return string\n     */\n    public static function createConnection($source, $target, $anchor = [])\n    {\n        if (empty($anchor)) {\n            // Default\n            $anchor = ['Bottom', 'Right'];\n        }\n\n        $anchor = implode('\",\"', $anchor);\n        $html = '<script>\n\n        var connectorPaintStyle = {\n            strokeWidth: 2,\n            stroke: \"#a31ed3\",\n            joinstyle: \"round\",\n            outlineStroke: \"white\",\n            outlineWidth: 2\n        },\n        // .. and this is the hover style.\n        connectorHoverStyle = {\n            strokeWidth: 3,\n            stroke: \"#216477\",\n            outlineWidth: 5,\n            outlineStroke: \"white\"\n        },\n        endpointHoverStyle = {\n            fill: \"#E80CAF\",\n            stroke: \"#E80CAF\"\n        };\n        jsPlumb.ready(function() { ';\n        $html .= 'jsPlumb.connect({\n            source:\"'.$source.'\",\n            target:\"'.$target.'\",\n            endpoint:[ \"Rectangle\", { width:1, height:1 }],\n            connector: [\"Flowchart\"],\n            paintStyle: connectorPaintStyle,\n            hoverPaintStyle: endpointHoverStyle,\n            anchor: [\"'.$anchor.'\"],\n            overlays: [\n                [\n                    \"Arrow\",\n                    {\n                        location:1,\n                        width:11,\n                        length:11\n                    }\n                ],\n            ],\n        });';\n        $html .= '});</script>'.PHP_EOL;\n\n        return $html;\n    }\n\n    public static function renderDiagramFooter(): string\n    {\n        $footer = '';\n        if (api_get_configuration_value('career_diagram_legend')) {\n            $footer .= get_lang('CareerDiagramLegend');\n        }\n        if (api_get_configuration_value('career_diagram_disclaimer')) {\n            $footer .= get_lang('CareerDiagramDisclaimer');\n        }\n\n        return $footer;\n    }\n\n    public static function addCareerFieldsToForm(FormValidator $form, array $values = [])\n    {\n        $career = new self();\n        $careerList = $career->get_all();\n        $list = array_column($careerList, 'name', 'id');\n\n        $url = api_get_path(WEB_AJAX_PATH).'career.ajax.php';\n\n        $form->addHtml('<script>\n                $(function () {\n                    var url = \"'.$url.'\";\n                    var $txtPromotion = $(\"#promotion_id\");\n\n                    $(\"#career_id\").on(\"change\", function () {\n                        var id = this.value;\n\n                        $txtPromotion.empty().append($(\"<option>\", {\n                            value: 0,\n                            text: \"'.get_lang('All').'\"\n                        }));\n\n                        $.getJSON(url, {\n                            \"career_id\": id,\n                            \"a\": \"get_promotions\"\n                        }).done(function (data) {\n                            $.each(data, function (index, value) {\n                                $txtPromotion.append($(\"<option>\", {\n                                    value: value.id,\n                                    text: value.name\n                                }));\n                            });\n\n                            $txtPromotion.selectpicker(\"refresh\");\n                        });\n                    });\n                });\n            </script>');\n        $form->addSelect(\n            'career_id',\n            get_lang('Career'),\n            $list,\n            [\n                'placeholder' => get_lang('SelectAnOption'),\n                'id' => 'career_id',\n            ]\n        );\n\n        $options = [\n            '0' => get_lang('All'),\n        ];\n        if (isset($values['promotion_id'])) {\n            $promotion = new Promotion();\n            $promotion = $promotion->get($values['promotion_id']);\n            if ($promotion) {\n                $options = [$promotion['id'] => $promotion['name']];\n            }\n        }\n\n        $form->addSelect(\n            'promotion_id',\n            get_lang('Promotion'),\n            $options,\n            ['id' => 'promotion_id']\n        );\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * Class Promotion\n * This class provides methods for the promotion management.\n * Include/require it in your code to use its features.\n */\nclass Promotion extends Model\n{\n    public $table;\n    public $columns = [\n        'id',\n        'name',\n        'description',\n        'career_id',\n        'status',\n        'created_at',\n        'updated_at',\n    ];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n        $this->table = Database::get_main_table(TABLE_PROMOTION);\n    }\n\n    /**\n     * Get the count of elements.\n     */\n    public function get_count()\n    {\n        $row = Database::select(\n            'count(*) as count',\n            $this->table,\n            [],\n            'first'\n        );\n\n        return $row['count'];\n    }\n\n    /**\n     * Copies the promotion to a new one.\n     *\n     * @param   int     Promotion ID\n     * @param   int     Career ID, in case we want to change it\n     * @param   bool     Whether or not to copy the sessions inside\n     *\n     * @return int New promotion ID on success, false on failure\n     */\n    public function copy($id, $career_id = null, $copy_sessions = false)\n    {\n        $pid = false;\n        $promotion = $this->get($id);\n        if (!empty($promotion)) {\n            $new = [];\n            foreach ($promotion as $key => $val) {\n                switch ($key) {\n                    case 'id':\n                    case 'updated_at':\n                        break;\n                    case 'name':\n                        $val .= ' '.get_lang('CopyLabelSuffix');\n                        $new[$key] = $val;\n                        break;\n                    case 'created_at':\n                        $val = api_get_utc_datetime();\n                        $new[$key] = $val;\n                        break;\n                    case 'career_id':\n                        if (!empty($career_id)) {\n                            $val = (int) $career_id;\n                        }\n                        $new[$key] = $val;\n                        break;\n                    default:\n                        $new[$key] = $val;\n                        break;\n                }\n            }\n\n            if ($copy_sessions) {\n                /**\n                 * When copying a session we do:\n                 * 1. Copy a new session from the source\n                 * 2. Copy all courses from the session (no user data, no user list)\n                 * 3. Create the promotion.\n                 */\n                $session_list = SessionManager::get_all_sessions_by_promotion($id);\n\n                if (!empty($session_list)) {\n                    $pid = $this->save($new);\n                    if (!empty($pid)) {\n                        $new_session_list = [];\n\n                        foreach ($session_list as $item) {\n                            $sid = SessionManager::copy(\n                                $item['id'],\n                                true,\n                                false,\n                                false,\n                                true\n                            );\n                            $new_session_list[] = $sid;\n                        }\n\n                        if (!empty($new_session_list)) {\n                            SessionManager::subscribe_sessions_to_promotion(\n                                $pid,\n                                $new_session_list\n                            );\n                        }\n                    }\n                }\n            } else {\n                $pid = $this->save($new);\n            }\n        }\n\n        return $pid;\n    }\n\n    /**\n     * Gets all promotions by career id.\n     *\n     * @param   int     career id\n     * @param bool $order\n     *\n     * @return array results\n     */\n    public function get_all_promotions_by_career_id($career_id, $order = false)\n    {\n        return Database::select(\n            '*',\n            $this->table,\n            [\n                'where' => ['career_id = ?' => $career_id],\n                'order' => $order,\n            ]\n        );\n    }\n\n    /**\n     * @return array\n     */\n    public function get_status_list()\n    {\n        return [\n            PROMOTION_STATUS_ACTIVE => get_lang('Active'),\n            PROMOTION_STATUS_INACTIVE => get_lang('Inactive'),\n        ];\n    }\n\n    /**\n     * Displays the title + grid.\n     *\n     * @return string html code\n     */\n    public function display()\n    {\n        // Action links\n        echo '<div class=\"actions\" style=\"margin-bottom:20px\">';\n        echo '<a href=\"career_dashboard.php\">'.\n            Display::return_icon(\n                'back.png',\n                get_lang('Back'),\n                '',\n                '32'\n            )\n            .'</a>';\n        echo '<a href=\"'.api_get_self().'?action=add\">'.\n            Display::return_icon(\n                'new_promotion.png',\n                get_lang('Add'),\n                '',\n                '32'\n            ).'</a>';\n        echo '<a href=\"'.api_get_path(WEB_CODE_PATH).'session/session_add.php\">'.\n            Display::return_icon(\n                'new_session.png',\n                get_lang('AddSession'),\n                '',\n                '32'\n            ).'</a>';\n        echo '</div>';\n        echo Display::grid_html('promotions');\n    }\n\n    /**\n     * Update all session status by promotion.\n     *\n     * @param int $promotion_id\n     * @param int $status       (1, 0)\n     */\n    public function update_all_sessions_status_by_promotion_id(\n        $promotion_id,\n        $status\n    ) {\n        $sessionList = SessionManager::get_all_sessions_by_promotion($promotion_id);\n        if (!empty($sessionList)) {\n            foreach ($sessionList as $item) {\n                SessionManager::set_session_status($item['id'], $status);\n            }\n        }\n    }\n\n    /**\n     * Returns a Form validator Obj.\n     *\n     * @param string $url\n     * @param string $action\n     *\n     * @return FormValidator\n     */\n    public function return_form($url, $action = 'add')\n    {\n        $form = new FormValidator('promotion', 'post', $url);\n        // Setting the form elements\n        $header = get_lang('Add');\n        if ($action == 'edit') {\n            $header = get_lang('Modify');\n        }\n\n        $id = isset($_GET['id']) ? (int) $_GET['id'] : '';\n\n        $form->addElement('header', '', $header);\n        $form->addElement('hidden', 'id', $id);\n        $form->addElement(\n            'text',\n            'name',\n            get_lang('Name'),\n            ['size' => '70', 'id' => 'name']\n        );\n        $form->addHtmlEditor(\n            'description',\n            get_lang('Description'),\n            false,\n            false,\n            [\n                'ToolbarSet' => 'Careers',\n                'Width' => '100%',\n                'Height' => '250',\n            ]\n        );\n        $career = new Career();\n        $careers = $career->get_all();\n        $career_list = [];\n        foreach ($careers as $item) {\n            $career_list[$item['id']] = $item['name'];\n        }\n        $form->addSelect(\n            'career_id',\n            get_lang('Career'),\n            $career_list,\n            ['id' => 'career_id']\n        );\n        $status_list = $this->get_status_list();\n        $form->addElement('select', 'status', get_lang('Status'), $status_list);\n        if ($action == 'edit') {\n            $form->addElement('text', 'created_at', get_lang('CreatedAt'));\n            $form->freeze('created_at');\n        }\n        if ($action == 'edit') {\n            $form->addButtonSave(get_lang('Modify'), 'submit');\n        } else {\n            $form->addButtonCreate(get_lang('Add'), 'submit');\n        }\n\n        // Setting the defaults\n        $defaults = $this->get($id);\n        if (!empty($defaults['created_at'])) {\n            $defaults['created_at'] = api_convert_and_format_date($defaults['created_at']);\n        }\n        if (!empty($defaults['updated_at'])) {\n            $defaults['updated_at'] = api_convert_and_format_date($defaults['updated_at']);\n        }\n        $form->setDefaults($defaults);\n\n        // Setting the rules\n        $form->addRule('name', get_lang('ThisFieldIsRequired'), 'required');\n\n        return $form;\n    }\n\n    /**\n     * @param array $params\n     * @param bool  $show_query\n     *\n     * @return bool\n     */\n    public function save($params, $show_query = false)\n    {\n        $id = parent::save($params, $show_query);\n        if (!empty($id)) {\n            Event::addEvent(\n                LOG_PROMOTION_CREATE,\n                LOG_PROMOTION_ID,\n                $id,\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        }\n\n        return $id;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return bool\n     */\n    public function delete($id)\n    {\n        if (parent::delete($id)) {\n            SessionManager::clear_session_ref_promotion($id);\n            Event::addEvent(\n                LOG_PROMOTION_DELETE,\n                LOG_PROMOTION_ID,\n                $id,\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        } else {\n            return false;\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Fhaculty\\Graph\\Graph;\nuse Fhaculty\\Graph\\Vertex;\n\n/**\n * Class Career.\n */\nclass Career extends Model\n{\n    public $table;\n    public $columns = [\n        'id',\n        'name',\n        'description',\n        'status',\n        'parent_id',\n        'created_at',\n        'updated_at',\n    ];\n\n    public function __construct()\n    {\n        $this->table = Database::get_main_table(TABLE_CAREER);\n    }\n\n    public function getCareerFromId($id)\n    {\n        if (api_get_configuration_value('use_career_external_id_as_identifier_in_diagrams')) {\n            // Try with the external career id.\n            $careerInfo = $this->getCareerFromExternalToInternal($id);\n        } else {\n            $careerInfo = $this->get($id);\n        }\n\n        return $careerInfo;\n    }\n\n    public function getCareerFromExternalToInternal($externalCareerId, $extraFieldVariable = 'external_career_id')\n    {\n        $careerExtraFieldValue = new ExtraFieldValue('career');\n        $careerValue = $careerExtraFieldValue->get_item_id_from_field_variable_and_field_value(\n            $extraFieldVariable,\n            $externalCareerId\n        );\n\n        $careerInfo = [];\n        if (isset($careerValue['item_id'])) {\n            $careerInfo = $this->get($careerValue['item_id']);\n        }\n\n        return $careerInfo;\n    }\n\n    public function getCareerIdFromInternalToExternal($internalCareerId)\n    {\n        $careerExtraFieldValue = new ExtraFieldValue('career');\n        $externalCareerValue = $careerExtraFieldValue->get_values_by_handler_and_field_variable(\n            $internalCareerId,\n            'external_career_id'\n        );\n\n        if (!empty($externalCareerValue) && isset($externalCareerValue['value'])) {\n            return $externalCareerValue['value'];\n        }\n\n        return null;\n    }\n\n    /**\n     * Get the count of elements.\n     *\n     * @return int\n     */\n    public function get_count()\n    {\n        $row = Database::select(\n            'count(*) as count',\n            $this->table,\n            [],\n            'first'\n        );\n\n        return $row['count'];\n    }\n\n    /**\n     * @param array $where_conditions\n     *\n     * @return array\n     */\n    public function get_all($where_conditions = [])\n    {\n        return Database::select(\n            '*',\n            $this->table,\n            ['where' => $where_conditions, 'order' => 'name ASC']\n        );\n    }\n\n    /**\n     * Order the careers by its hierarchy.\n     *\n     * @param $careers\n     */\n    public function orderCareersByHierarchy($careers, int $filterId = 0): array\n    {\n        $orderedCareers = [];\n        $filterAux = [];\n        foreach ($careers as &$career) {\n            if (is_null($career['parent_id'])) {\n                $orderedCareers[] = &$career;\n            } else {\n                $pid = $career['parent_id'];\n                if (!isset($careers[$pid])) {\n                    // Orphan child\n                    break;\n                } else {\n                    if (!isset($careers[$pid]['children'])) {\n                        $careers[$pid]['children'] = [];\n                    }\n                    $careers[$pid]['children'][] = &$career;\n                }\n            }\n            if (!empty($filterId) && $career['id'] == $filterId) {\n                $filterAux[0] = &$career;\n            }\n        }\n\n        return !empty($filterId) ? $filterAux : $orderedCareers;\n    }\n\n    /**\n     * Update all promotion status by career.\n     *\n     * @param int $career_id\n     * @param int $status    (1 or 0)\n     */\n    public function update_all_promotion_status_by_career_id($career_id, $status)\n    {\n        $promotion = new Promotion();\n        $promotion_list = $promotion->get_all_promotions_by_career_id($career_id);\n        if (!empty($promotion_list)) {\n            foreach ($promotion_list as $item) {\n                $params['id'] = $item['id'];\n                $params['status'] = $status;\n                $promotion->update($params);\n                $promotion->update_all_sessions_status_by_promotion_id($params['id'], $status);\n            }\n        }\n    }\n\n    /**\n     * Returns HTML the title + grid.\n     *\n     * @return string\n     */\n    public function display()\n    {\n        $html = '<div class=\"actions\" style=\"margin-bottom:20px\">';\n        $html .= '<a href=\"career_dashboard.php\">'.\n            Display::return_icon('back.png', get_lang('Back'), '', ICON_SIZE_MEDIUM).'</a>';\n        if (api_is_platform_admin()) {\n            $html .= '<a href=\"'.api_get_self().'?action=add\">'.\n                    Display::return_icon('new_career.png', get_lang('Add'), '', ICON_SIZE_MEDIUM).'</a>';\n        }\n        $html .= '</div>';\n        $html .= Display::grid_html('careers');\n\n        return $html;\n    }\n\n    /**\n     * @return array\n     */\n    public function get_status_list()\n    {\n        return [\n            CAREER_STATUS_ACTIVE => get_lang('Unarchived'),\n            CAREER_STATUS_INACTIVE => get_lang('Archived'),\n        ];\n    }\n\n    /**\n     * Return the name of the careers that can be parents of others.\n     */\n    public function getHierarchies(int $selfCareer = 0): array\n    {\n        $return = [];\n        $result = Database::select(\n            'name, id',\n            $this->table,\n            [\n                'where' => ['id != ?' => $selfCareer],\n                'order' => 'id ASC',\n            ]\n        );\n        foreach ($result as $item) {\n            $return[$item['id']] = $item['name'];\n        }\n        array_unshift($return, '--');\n\n        return $return;\n    }\n\n    /**\n     * Returns a Form validator Obj.\n     *\n     * @todo the form should be auto generated\n     *\n     * @param string $url\n     * @param string $action add, edit\n     *\n     * @return FormValidator\n     */\n    public function return_form($url, $action)\n    {\n        $form = new FormValidator('career', 'post', $url);\n        // Setting the form elements\n        $header = get_lang('Add');\n        if ($action == 'edit') {\n            $header = get_lang('Modify');\n        }\n\n        $id = isset($_GET['id']) ? (int) $_GET['id'] : '';\n        $form->addHeader($header);\n        $form->addHidden('id', $id);\n        $form->addText('name', get_lang('Name'), true, ['size' => '70']);\n        $form->addHtmlEditor(\n            'description',\n            get_lang('Description'),\n            false,\n            false,\n            [\n                'ToolbarSet' => 'Careers',\n                'Width' => '100%',\n                'Height' => '250',\n            ]\n        );\n        $status_list = $this->get_status_list();\n        $form->addElement('select', 'status', get_lang('Status'), $status_list);\n\n        if (api_get_configuration_value('career_hierarchy_enable')) {\n            $hierarchyList = $this->getHierarchies((int) $id ?? 0);\n            $form->addElement('select', 'parent_id', get_lang('ParentCareer'), $hierarchyList);\n        }\n\n        if ($action == 'edit') {\n            $extraField = new ExtraField('career');\n            $extraField->addElements($form, $id);\n\n            $form->addElement('text', 'created_at', get_lang('CreatedAt'));\n            $form->freeze('created_at');\n            $form->addButtonSave(get_lang('Modify'));\n        } else {\n            $form->addButtonCreate(get_lang('Add'));\n        }\n\n        // Setting the defaults\n        $defaults = $this->get($id);\n\n        if (!empty($defaults['created_at'])) {\n            $defaults['created_at'] = api_convert_and_format_date($defaults['created_at']);\n        }\n        if (!empty($defaults['updated_at'])) {\n            $defaults['updated_at'] = api_convert_and_format_date($defaults['updated_at']);\n        }\n\n        $form->setDefaults($defaults);\n\n        // Setting the rules\n        $form->addRule('name', get_lang('ThisFieldIsRequired'), 'required');\n\n        return $form;\n    }\n\n    /**\n     * Copies the career to a new one.\n     *\n     * @param   int     Career ID\n     * @param   bool     Whether or not to copy the promotions inside\n     *\n     * @return int New career ID on success, false on failure\n     */\n    public function copy($id, $copy_promotions = false)\n    {\n        $career = $this->get($id);\n        $new = [];\n        foreach ($career as $key => $val) {\n            switch ($key) {\n                case 'id':\n                case 'updated_at':\n                    break;\n                case 'name':\n                    $val .= ' '.get_lang('CopyLabelSuffix');\n                    $new[$key] = $val;\n                    break;\n                case 'created_at':\n                    $val = api_get_utc_datetime();\n                    $new[$key] = $val;\n                    break;\n                default:\n                    $new[$key] = $val;\n                    break;\n            }\n        }\n        $cid = $this->save($new);\n        if ($copy_promotions) {\n            //Now also copy each session of the promotion as a new session and register it inside the promotion\n            $promotion = new Promotion();\n            $promo_list = $promotion->get_all_promotions_by_career_id($id);\n            if (!empty($promo_list)) {\n                foreach ($promo_list as $item) {\n                    $promotion->copy($item['id'], $cid, true);\n                }\n            }\n        }\n\n        return $cid;\n    }\n\n    /**\n     * @param int $career_id\n     *\n     * @return bool\n     */\n    public function get_status($career_id)\n    {\n        $table = Database::get_main_table(TABLE_CAREER);\n        $career_id = intval($career_id);\n        $sql = \"SELECT status FROM $table WHERE id = '$career_id'\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result) > 0) {\n            $data = Database::fetch_array($result);\n\n            return $data['status'];\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @param array $params\n     * @param bool  $show_query\n     *\n     * @return int\n     */\n    public function save($params, $show_query = false)\n    {\n        if (isset($params['description'])) {\n            $params['description'] = Security::remove_XSS($params['description']);\n        }\n\n        $id = parent::save($params);\n        if (!empty($id)) {\n            Event::addEvent(\n                LOG_CAREER_CREATE,\n                LOG_CAREER_ID,\n                $id,\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        }\n\n        return $id;\n    }\n\n    /**\n     * Delete a record from the career table and report in the default events log table.\n     *\n     * @param int $id The ID of the career to delete\n     *\n     * @return bool True if the career could be deleted, false otherwise\n     */\n    public function delete($id)\n    {\n        $res = parent::delete($id);\n        if ($res) {\n            $extraFieldValues = new ExtraFieldValue('career');\n            $extraFieldValues->deleteValuesByItem($id);\n            Event::addEvent(\n                LOG_CAREER_DELETE,\n                LOG_CAREER_ID,\n                $id,\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        }\n\n        return $res;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function update($params, $showQuery = false)\n    {\n        if (isset($params['description'])) {\n            $params['description'] = Security::remove_XSS($params['description']);\n        }\n\n        return parent::update($params, $showQuery);\n    }\n\n    /**\n     * @param array\n     * @param Graph $graph\n     *\n     * @return string\n     */\n    public static function renderDiagram($careerInfo, $graph)\n    {\n        if (!($graph instanceof Graph)) {\n            return '';\n        }\n\n        // Getting max column\n        $maxColumn = 0;\n        foreach ($graph->getVertices() as $vertex) {\n            $groupId = (int) $vertex->getGroup();\n            if ($groupId > $maxColumn) {\n                $maxColumn = $groupId;\n            }\n        }\n\n        $list = [];\n        /** @var Vertex $vertex */\n        foreach ($graph->getVertices() as $vertex) {\n            $group = $vertex->getAttribute('Group');\n            $groupData = explode(':', $group);\n            $group = $groupData[0];\n            $groupLabel = isset($groupData[1]) ? $groupData[1] : '';\n            $subGroup = $vertex->getAttribute('SubGroup');\n            $subGroupData = explode(':', $subGroup);\n            $column = $vertex->getGroup();\n            $row = $vertex->getAttribute('Row');\n            $subGroupId = $subGroupData[0];\n            $label = isset($subGroupData[1]) ? $subGroupData[1] : '';\n            $list[$group][$subGroupId]['columns'][$column][$row] = $vertex;\n            $list[$group][$subGroupId]['label'] = $label;\n            $list[$group]['label'] = $groupLabel;\n        }\n\n        $maxGroups = count($list);\n        $widthGroup = 30;\n        if (!empty($maxGroups)) {\n            $widthGroup = 85 / $maxGroups;\n        }\n\n        $connections = '';\n        $groupDrawLine = [];\n        $groupCourseList = [];\n        // Read Connections column\n        foreach ($list as $group => $subGroupList) {\n            foreach ($subGroupList as $subGroupData) {\n                $columns = isset($subGroupData['columns']) ? $subGroupData['columns'] : [];\n                $showGroupLine = true;\n                if (count($columns) == 1) {\n                    $showGroupLine = false;\n                }\n                $groupDrawLine[$group] = $showGroupLine;\n\n                //if ($showGroupLine == false) {\n                /** @var Vertex $vertex */\n                foreach ($columns as $row => $items) {\n                    foreach ($items as $vertex) {\n                        if ($vertex instanceof Vertex) {\n                            $groupCourseList[$group][] = $vertex->getId();\n                            $connectionList = $vertex->getAttribute('Connections');\n                            $firstConnection = '';\n                            $secondConnection = '';\n                            if (!empty($connectionList)) {\n                                $explode = explode('-', $connectionList);\n                                $pos = strpos($explode[0], 'SG');\n                                if ($pos === false) {\n                                    $pos = strpos($explode[0], 'G');\n                                    if (is_numeric($pos)) {\n                                        // group_123 id\n                                        $groupValueId = (int) str_replace(\n                                            'G',\n                                            '',\n                                            $explode[0]\n                                        );\n                                        $firstConnection = 'group_'.$groupValueId;\n                                        $groupDrawLine[$groupValueId] = true;\n                                    } else {\n                                        // Course block (row_123 id)\n                                        if (!empty($explode[0])) {\n                                            $firstConnection = 'row_'.(int) $explode[0];\n                                        }\n                                    }\n                                } else {\n                                    // subgroup__123 id\n                                    $firstConnection = 'subgroup_'.(int) str_replace('SG', '', $explode[0]);\n                                }\n\n                                $pos = strpos($explode[1], 'SG');\n                                if ($pos === false) {\n                                    $pos = strpos($explode[1], 'G');\n                                    if (is_numeric($pos)) {\n                                        $groupValueId = (int) str_replace(\n                                            'G',\n                                            '',\n                                            $explode[1]\n                                        );\n                                        $secondConnection = 'group_'.$groupValueId;\n                                        $groupDrawLine[$groupValueId] = true;\n                                    } else {\n                                        // Course block (row_123 id)\n                                        if (!empty($explode[0])) {\n                                            $secondConnection = 'row_'.(int) $explode[1];\n                                        }\n                                    }\n                                } else {\n                                    $secondConnection = 'subgroup_'.(int) str_replace('SG', '', $explode[1]);\n                                }\n\n                                if (!empty($firstConnection) && !empty($firstConnection)) {\n                                    $connections .= self::createConnection(\n                                        $firstConnection,\n                                        $secondConnection,\n                                        ['Left', 'Right']\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n                //}\n            }\n        }\n\n        $graphHtml = '<div class=\"container\">';\n        foreach ($list as $group => $subGroupList) {\n            $showGroupLine = false;\n            if (isset($groupDrawLine[$group]) && $groupDrawLine[$group]) {\n                $showGroupLine = true;\n            }\n            $graphHtml .= self::parseSubGroups(\n                $groupCourseList,\n                $group,\n                $list[$group]['label'],\n                $showGroupLine,\n                $subGroupList,\n                $widthGroup\n            );\n        }\n        $graphHtml .= '</div>';\n        $graphHtml .= $connections;\n\n        return $graphHtml;\n    }\n\n    /**\n     * @param array    $careerInfo\n     * @param Template $tpl\n     * @param int      $loadUserIdData\n     *\n     * @return string\n     */\n    public static function renderDiagramByColumn($careerInfo, $tpl, $loadUserIdData = 0, $showFooter = true)\n    {\n        $careerId = $careerInfo['id'] ?? 0;\n        if (empty($careerId)) {\n            return '';\n        }\n\n        $extraFieldValue = new ExtraFieldValue('career');\n        $item = $extraFieldValue->get_values_by_handler_and_field_variable(\n            $careerId,\n            'career_diagram',\n            false,\n            false,\n            false\n        );\n\n        $graph = null;\n        if (!empty($item) && isset($item['value']) && !empty($item['value'])) {\n            /** @var Graph $graph */\n            $graph = UnserializeApi::unserialize('career', $item['value']);\n        }\n\n        if (!($graph instanceof Graph)) {\n            return '';\n        }\n\n        // Getting max column\n        $maxColumn = 0;\n        foreach ($graph->getVertices() as $vertex) {\n            $groupId = (int) $vertex->getGroup();\n            if ($groupId > $maxColumn) {\n                $maxColumn = $groupId;\n            }\n        }\n\n        $userResult = [];\n        if (!empty($loadUserIdData)) {\n            $careerData = UserManager::getUserCareer($loadUserIdData, $careerId);\n            if (isset($careerData['extra_data']) && !empty($careerData['extra_data'])) {\n                $userResult = unserialize($careerData['extra_data']);\n            }\n        }\n\n        $list = [];\n        $subGroups = [];\n        /** @var Vertex $vertex */\n        foreach ($graph->getVertices() as $vertex) {\n            $column = $vertex->getGroup();\n            $group = $vertex->getAttribute('Group');\n\n            $groupData = explode(':', $group);\n            $group = $groupData[0];\n            $groupLabel = isset($groupData[1]) ? $groupData[1] : '';\n\n            $subGroup = $vertex->getAttribute('SubGroup');\n            $subGroupData = explode(':', $subGroup);\n\n            $row = $vertex->getAttribute('Row');\n            $subGroupId = $subGroupData[0];\n            $subGroupLabel = isset($subGroupData[1]) ? $subGroupData[1] : '';\n\n            if (!empty($subGroupId) && !in_array($subGroupId, $subGroups)) {\n                $subGroups[$subGroupId]['items'][] = $vertex->getId();\n                $subGroups[$subGroupId]['label'] = $subGroupLabel;\n            }\n\n            $list[$column]['rows'][$row]['items'][] = $vertex;\n            $list[$column]['rows'][$row]['label'] = $subGroupId;\n            $list[$column]['rows'][$row]['group'] = $group;\n            $list[$column]['rows'][$row]['group_label'] = $groupLabel;\n            $list[$column]['rows'][$row]['subgroup'] = $subGroup;\n            $list[$column]['rows'][$row]['subgroup_label'] = $subGroupLabel;\n            $list[$column]['label'] = $groupLabel;\n            $list[$column]['column'] = $column;\n        }\n\n        $groupCourseList = [];\n        $simpleConnectionList = [];\n\n        // Read Connections column\n        foreach ($list as $column => $groupList) {\n            foreach ($groupList['rows'] as $subGroupList) {\n                /** @var Vertex $vertex */\n                foreach ($subGroupList['items'] as $vertex) {\n                    if ($vertex instanceof Vertex) {\n                        $groupCourseList[$vertex->getAttribute('Column')][] = $vertex->getId();\n                        $connectionList = $vertex->getAttribute('Connections');\n                        if (empty($connectionList)) {\n                            continue;\n                        }\n                        $simpleFirstConnection = '';\n                        $simpleSecondConnection = '';\n\n                        $explode = explode('-', $connectionList);\n                        $pos = strpos($explode[0], 'SG');\n                        if ($pos === false) {\n                            $pos = strpos($explode[0], 'G');\n                            if (is_numeric($pos)) {\n                                // Is group\n                                $groupValueId = (int) str_replace(\n                                    'G',\n                                    '',\n                                    $explode[0]\n                                );\n                                $simpleFirstConnection = 'g'.(int) $groupValueId;\n                            } else {\n                                // Course block (row_123 id)\n                                if (!empty($explode[0])) {\n                                    $simpleFirstConnection = 'v'.$explode[0];\n                                }\n                            }\n                        } else {\n                            // subgroup__123 id\n                            $simpleFirstConnection = 'sg'.(int) str_replace('SG', '', $explode[0]);\n                        }\n\n                        $pos = false;\n                        if (isset($explode[1])) {\n                            $pos = strpos($explode[1], 'SG');\n                        }\n                        if ($pos === false) {\n                            if (isset($explode[1])) {\n                                $pos = strpos($explode[1], 'G');\n                                $value = $explode[1];\n                            }\n                            if (is_numeric($pos)) {\n                                $groupValueId = (int) str_replace(\n                                    'G',\n                                    '',\n                                    $value\n                                );\n                                $simpleSecondConnection = 'g'.(int) $groupValueId;\n                            } else {\n                                // Course block (row_123 id)\n                                if (!empty($explode[0]) && isset($explode[1])) {\n                                    $simpleSecondConnection = 'v'.(int) $explode[1];\n                                }\n                            }\n                        } else {\n                            $simpleSecondConnection = 'sg'.(int) str_replace('SG', '', $explode[1]);\n                        }\n\n                        if (!empty($simpleFirstConnection) && !empty($simpleSecondConnection)) {\n                            $simpleConnectionList[] = [\n                                'from' => $simpleFirstConnection,\n                                'to' => $simpleSecondConnection,\n                            ];\n                        }\n                    }\n                }\n            }\n        }\n\n        $graphHtml = '';\n        $groupsBetweenColumns = [];\n        foreach ($list as $column => $columnList) {\n            foreach ($columnList['rows'] as $subGroupList) {\n                $newGroup = $subGroupList['group'];\n                $label = $subGroupList['group_label'];\n                $newOrder[$newGroup]['items'][] = $subGroupList;\n                $newOrder[$newGroup]['label'] = $label;\n                $groupsBetweenColumns[$newGroup][] = $subGroupList;\n            }\n        }\n\n        // Creates graph\n        $graph = new stdClass();\n        $graph->blockWidth = 280;\n        $graph->blockHeight = 150;\n\n        $graph->xGap = 70;\n        $graph->yGap = 55;\n\n        $graph->xDiff = 70;\n        $graph->yDiff = 55;\n\n        if (!empty($userResult)) {\n            $graph->blockHeight = 180;\n            $graph->yGap = 60;\n            $graph->yDiff = 60;\n        }\n\n        foreach ($groupsBetweenColumns as $group => $items) {\n            self::parseColumnList($groupCourseList, $items, $graph, $simpleConnectionList, $userResult);\n        }\n\n        $graphHtml .= '<style>\n             .panel-title {\n                font-size: 11px;\n                height: 40px;\n             }\n\n             .panel-body{\n                min-height: 55px;\n             }\n             </style>';\n\n        // Create groups\n        if (!empty($graph->groupList)) {\n            $groupList = [];\n            $groupDiffX = 20;\n            $groupDiffY = 50;\n            $style = 'whiteSpace=wrap;rounded;html=1;strokeColor=red;fillColor=none;strokeWidth=2;align=left;verticalAlign=top;';\n            foreach ($graph->groupList as $id => $data) {\n                if (empty($id)) {\n                    continue;\n                }\n\n                $x = $data['min_x'] - $groupDiffX;\n                $y = $data['min_y'] - $groupDiffY;\n                $width = $data['max_width'] + ($groupDiffX * 2);\n                $height = $data['max_height'] + $groupDiffY * 2;\n                $label = '<h4>'.$data['label'].'</h4>';\n                $vertexData = \"var g$id = graph.insertVertex(parent, null, '$label', $x, $y, $width, $height, '$style');\";\n                $groupList[] = $vertexData;\n            }\n            $tpl->assign('group_list', $groupList);\n        }\n\n        // Create subgroups\n        $subGroupList = [];\n        $subGroupListData = [];\n        foreach ($subGroups as $subGroupId => $vertexData) {\n            $label = $vertexData['label'];\n            $vertexIdList = $vertexData['items'];\n            foreach ($vertexIdList as $rowId) {\n                $data = $graph->allData[$rowId];\n                $originalRow = $data['row'];\n                $column = $data['column'];\n                $x = $data['x'];\n                $y = $data['y'];\n                $width = $data['width'];\n                $height = $data['height'];\n\n                if (!isset($subGroupListData[$subGroupId])) {\n                    $subGroupListData[$subGroupId]['min_x'] = 1000;\n                    $subGroupListData[$subGroupId]['min_y'] = 1000;\n                    $subGroupListData[$subGroupId]['max_width'] = 0;\n                    $subGroupListData[$subGroupId]['max_height'] = 0;\n                    $subGroupListData[$subGroupId]['label'] = $label;\n                }\n\n                if ($x < $subGroupListData[$subGroupId]['min_x']) {\n                    $subGroupListData[$subGroupId]['min_x'] = $x;\n                }\n\n                if ($y < $subGroupListData[$subGroupId]['min_y']) {\n                    $subGroupListData[$subGroupId]['min_y'] = $y;\n                }\n\n                $subGroupListData[$subGroupId]['max_width'] = ($column + 1) * ($width + $graph->xGap) - $subGroupListData[$subGroupId]['min_x'];\n                $subGroupListData[$subGroupId]['max_height'] = ($originalRow + 1) * ($height + $graph->yGap) - $subGroupListData[$subGroupId]['min_y'];\n            }\n\n            $style = 'whiteSpace=wrap;rounded;dashed=1;strokeColor=blue;fillColor=none;strokeWidth=2;align=left;verticalAlign=bottom;';\n            $subGroupDiffX = 5;\n            foreach ($subGroupListData as $subGroupId => $data) {\n                $x = $data['min_x'] - $subGroupDiffX;\n                $y = $data['min_y'] - $subGroupDiffX;\n\n                $spaceForSubGroupTitle = 0;\n                if (!empty($data['label'])) {\n                    $spaceForSubGroupTitle = 40;\n                }\n\n                $width = $data['max_width'] + $subGroupDiffX * 2;\n                $height = $data['max_height'] + $subGroupDiffX * 2 + $spaceForSubGroupTitle;\n\n                $label = '<h4 style=\"background: white\">'.$data['label'].'</h4>';\n                $vertexData = \"var sg$subGroupId = graph.insertVertex(parent, null, '$label', $x, $y, $width, $height, '$style');\";\n                $subGroupList[] = $vertexData;\n            }\n        }\n\n        // Create connections (arrows)\n        if (!empty($simpleConnectionList)) {\n            $connectionList = [];\n            //$style = 'endArrow=classic;html=1;strokeWidth=4;exitX=1;exitY=0.5;entryX=0;entryY=0.5;';\n            $style = '';\n            foreach ($simpleConnectionList as $connection) {\n                $from = $connection['from'];\n                $to = $connection['to'];\n                $vertexData = \"var e1 = graph.insertEdge(parent, null, '', $from, $to, '$style')\";\n                $connectionList[] = $vertexData;\n            }\n            $tpl->assign('connections', $connectionList);\n        }\n\n        $tpl->assign('subgroup_list', $subGroupList);\n        $tpl->assign('vertex_list', $graph->elementList);\n\n        $graphHtml .= '<div id=\"graphContainer\"></div>';\n        if ($showFooter) {\n            $graphHtml .= self::renderDiagramFooter();\n        }\n\n        return $graphHtml;\n    }\n\n    /**\n     * @param $groupCourseList\n     * @param $columnList\n     * @param $graph\n     * @param $connections\n     * @param $userResult\n     *\n     * @return string\n     */\n    public static function parseColumnList($groupCourseList, $columnList, &$graph, &$connections, $userResult)\n    {\n        $graphHtml = '';\n        $newOrder = [];\n        foreach ($columnList as $subGroupList) {\n            $newGroup = $subGroupList['group'];\n            $label = $subGroupList['group_label'];\n            $newOrder[$newGroup]['items'][] = $subGroupList;\n            $newOrder[$newGroup]['label'] = $label;\n        }\n\n        foreach ($newOrder as $newGroup => $data) {\n            $label = $data['label'];\n            $subGroupList = $data['items'];\n\n            if (!isset($graph->groupList[$newGroup])) {\n                $graph->groupList[$newGroup]['min_x'] = 1000;\n                $graph->groupList[$newGroup]['min_y'] = 1000;\n                $graph->groupList[$newGroup]['max_width'] = 0;\n                $graph->groupList[$newGroup]['max_height'] = 0;\n                $graph->groupList[$newGroup]['label'] = $label;\n            }\n\n            $maxColumn = 0;\n            $maxRow = 0;\n            $minColumn = 100;\n            $minRow = 100;\n            foreach ($subGroupList as $item) {\n                /** @var Vertex $vertex */\n                foreach ($item['items'] as $vertex) {\n                    $column = $vertex->getAttribute('Column');\n                    $realRow = $vertex->getAttribute('Row');\n\n                    if ($column > $maxColumn) {\n                        $maxColumn = $column;\n                    }\n                    if ($realRow > $maxRow) {\n                        $maxRow = $realRow;\n                    }\n\n                    if ($column < $minColumn) {\n                        $minColumn = $column;\n                    }\n                    if ($realRow < $minRow) {\n                        $minRow = $realRow;\n                    }\n                }\n            }\n\n            if (!empty($newGroup)) {\n                $graphHtml .= '<div\n                    id =\"group_'.$newGroup.'\"\n                    class=\"group'.$newGroup.' group_class\"\n                    style=\"display:grid;\n                        align-self: start;\n                        grid-gap: 10px;\n                        justify-items: stretch;\n                        align-items: start;\n                        align-content: start;\n                        justify-content: stretch;\n                        grid-area:'.$minRow.'/'.$minColumn.'/'.$maxRow.'/'.$maxColumn.'\">'; //style=\"display:grid\"\n            }\n\n            $addRow = 0;\n            if (!empty($label)) {\n                $graphHtml .= \"<div class='my_label' style='grid-area:$minRow/$minColumn/$maxRow/$maxColumn'>$label</div>\";\n                $addRow = 1;\n            }\n\n            foreach ($subGroupList as $item) {\n                $graphHtml .= self::parseVertexList(\n                    $groupCourseList,\n                    $item['items'],\n                    $addRow,\n                    $graph,\n                    $newGroup,\n                    $connections,\n                    $userResult\n                );\n            }\n\n            if (!empty($newGroup)) {\n                $graphHtml .= '</div >';\n            }\n        }\n\n        return $graphHtml;\n    }\n\n    /**\n     * @param array    $groupCourseList\n     * @param array    $vertexList\n     * @param int      $addRow\n     * @param stdClass $graph\n     * @param int      $group\n     * @param array    $connections\n     * @param array    $userResult\n     *\n     * @return string\n     */\n    public static function parseVertexList($groupCourseList, $vertexList, $addRow, &$graph, $group, &$connections, $userResult)\n    {\n        if (empty($vertexList)) {\n            return '';\n        }\n\n        $graphHtml = '';\n        /** @var Vertex $vertex */\n        foreach ($vertexList as $vertex) {\n            $borderColor = 'green';\n            $column = $vertex->getAttribute('Column');\n            $realRow = $originalRow = $vertex->getAttribute('Row');\n            if ($addRow) {\n                $realRow = $realRow + $addRow;\n            }\n            $id = $vertex->getId();\n            $area = \"$realRow/$column\";\n            $graphHtml .= '<div\n                id = \"row_wrapper_'.$id.'\"\n                data= \"'.$originalRow.'-'.$column.'\"\n                style=\"\n                    align-self: start;\n                    justify-content: stretch;\n                    grid-area:'.$area.'\"\n            >';\n            $color = '';\n            if (!empty($vertex->getAttribute('DefinedColor'))) {\n                $color = $vertex->getAttribute('DefinedColor');\n            }\n            $content = '<div class=\"pull-left\">'.$vertex->getAttribute('Notes').'</div>';\n            $content .= '<div class=\"pull-right\">['.$id.']</div>';\n\n            if (!empty($userResult) && isset($userResult[$id]) && !empty($userResult[$id])) {\n                // Order by SortDate\n                $sortedByDate = $userResult[$id];\n                foreach ($sortedByDate as $resultId => &$result) {\n                    $result['resultId'] = $resultId;\n                }\n\n                usort($sortedByDate, function ($item1, $item2) {\n                    if (!isset($item1['SortDate']) || !isset($item2['SortDate'])) {\n                        return false;\n                    }\n\n                    return $item1['SortDate'] > $item2['SortDate'];\n                });\n\n                $lastItem = end($sortedByDate);\n                if ($lastItem && isset($lastItem['BgColor']) && !empty($lastItem['BgColor'])) {\n                    $color = $lastItem['BgColor'].'; color: '.$lastItem['Color'];\n                    $borderColor = $lastItem['BorderColor'];\n                }\n                $results = '';\n                $size = 2;\n                foreach ($sortedByDate as $iconData) {\n                    $resultId = $iconData['resultId'];\n                    $icon = '';\n                    switch ($iconData['Icon']) {\n                        case 0:\n                            $icon = Display::returnFontAwesomeIcon('times-circle', $size);\n                            break;\n                        case 1:\n                            $icon = Display::returnFontAwesomeIcon('check-circle', $size);\n                            break;\n                        case 2:\n                            $icon = Display::returnFontAwesomeIcon('info-circle', $size);\n                            break;\n                    }\n\n                    if (substr($resultId, 0, 1) == 2) {\n                        $iconData['Description'] = 'Result Id = '.$resultId;\n                    }\n\n                    if ('Joe Anonymous' === $iconData['TeacherUsername']) {\n                        $iconData['TeacherUsername'] = '';\n                    }\n\n                    if (!empty($icon)) {\n                        $params = [\n                            'id' => 'course_'.$id.'_'.$resultId,\n                            'data-toggle' => 'popover',\n                            'title' => 'Popover title',\n                            'class' => 'popup',\n                            'data-description' => $iconData['Description'],\n                            'data-period' => $iconData['Period'],\n                            'data-teacher-text' => $iconData['TeacherText'],\n                            'data-teacher' => $iconData['TeacherUsername'],\n                            'data-score' => $iconData['ScoreText'],\n                            'data-score-value' => $iconData['ScoreValue'],\n                            'data-info' => $iconData['Info'],\n                            'data-background-color' => $iconData['BgColor'],\n                            'data-color' => $iconData['Color'],\n                            'data-border-color' => $iconData['BorderColor'],\n                            'style' => 'color:'.$iconData['IconColor'],\n                        ];\n                        $results .= Display::url($icon, 'javascript:void(0);', $params);\n                    }\n                }\n\n                if (!empty($results)) {\n                    $content .= '<div class=\"row\"></div><div class=\"pull-left\">'.$results.'</div>';\n                }\n            }\n\n            $title = $vertex->getAttribute('graphviz.label');\n            if (!empty($vertex->getAttribute('LinkedElement'))) {\n                $title = Display::url($title, $vertex->getAttribute('LinkedElement').'&iframe=1');\n            }\n\n            $originalRow--;\n            $column--;\n\n            $graphHtml .= Display::panel(\n                $content,\n                $title,\n                null,\n                null,\n                null,\n                \"row_$id\",\n                $color\n            );\n\n            $panel = Display::panel(\n                $content,\n                $title,\n                null,\n                null,\n                null,\n                \"row_$id\",\n                $color\n            );\n\n            $x = $column * $graph->blockWidth + $graph->xDiff;\n            $y = $originalRow * $graph->blockHeight + $graph->yDiff;\n\n            $width = $graph->blockWidth - $graph->xGap;\n            $height = $graph->blockHeight - $graph->yGap;\n\n            $style = 'text;html=1;strokeColor='.$borderColor.';fillColor=#ffffff;overflow=fill;rounded=0;align=left;';\n\n            $panel = str_replace([\"\\n\", \"\\r\"], '', $panel);\n            $vertexData = \"var v$id = graph.insertVertex(parent, null, '\".addslashes($panel).\"', $x, $y, $width, $height, '$style');\";\n\n            $graph->elementList[$id] = $vertexData;\n            $graph->allData[$id] = [\n                'x' => $x,\n                'y' => $y,\n                'width' => $width,\n                'height' => $height,\n                'row' => $originalRow,\n                'column' => $column,\n                'label' => $title,\n            ];\n\n            if ($x < $graph->groupList[$group]['min_x']) {\n                $graph->groupList[$group]['min_x'] = $x;\n            }\n\n            if ($y < $graph->groupList[$group]['min_y']) {\n                $graph->groupList[$group]['min_y'] = $y;\n            }\n\n            $graph->groupList[$group]['max_width'] = ($column + 1) * ($width + $graph->xGap) - $graph->groupList[$group]['min_x'];\n            $graph->groupList[$group]['max_height'] = ($originalRow + 1) * ($height + ($graph->yGap)) - $graph->groupList[$group]['min_y'];\n\n            $graphHtml .= '</div>';\n            $arrow = $vertex->getAttribute('DrawArrowFrom');\n            $found = false;\n            if (!empty($arrow)) {\n                $pos = strpos($arrow, 'SG');\n                if ($pos === false) {\n                    $pos = strpos($arrow, 'G');\n                    if (is_numeric($pos)) {\n                        $parts = explode('G', $arrow);\n                        if (empty($parts[0]) && count($parts) == 2) {\n                            $groupArrow = $parts[1];\n                            $graphHtml .= self::createConnection(\n                                \"group_$groupArrow\",\n                                \"row_$id\",\n                                ['Left', 'Right']\n                            );\n                            $found = true;\n                            $connections[] = [\n                              'from' => \"g$groupArrow\",\n                              'to' => \"v$id\",\n                            ];\n                        }\n                    }\n                } else {\n                    // Case is only one subgroup value example: SG1\n                    $parts = explode('SG', $arrow);\n                    if (empty($parts[0]) && count($parts) == 2) {\n                        $subGroupArrow = $parts[1];\n                        $graphHtml .= self::createConnection(\n                            \"subgroup_$subGroupArrow\",\n                            \"row_$id\",\n                            ['Left', 'Right']\n                        );\n                        $found = true;\n                        $connections[] = [\n                            'from' => \"sg$subGroupArrow\",\n                            'to' => \"v$id\",\n                        ];\n                    }\n                }\n\n                if ($found == false) {\n                    // case is connected to 2 subgroups: Example SG1-SG2\n                    $parts = explode('-', $arrow);\n                    if (count($parts) == 2 && !empty($parts[0]) && !empty($parts[1])) {\n                        $defaultArrow = ['Top', 'Bottom'];\n                        $firstPrefix = '';\n                        $firstId = '';\n                        $secondId = '';\n                        $secondPrefix = '';\n                        if (is_numeric($pos = strpos($parts[0], 'SG'))) {\n                            $firstPrefix = 'sg';\n                            $firstId = str_replace('SG', '', $parts[0]);\n                        }\n\n                        if (is_numeric($pos = strpos($parts[1], 'SG'))) {\n                            $secondPrefix = 'sg';\n                            $secondId = str_replace('SG', '', $parts[1]);\n                        }\n                        if (!empty($secondId) && !empty($firstId)) {\n                            $connections[] = [\n                                'from' => $firstPrefix.$firstId,\n                                'to' => $secondPrefix.$secondId,\n                                $defaultArrow,\n                            ];\n                            $found = true;\n                        }\n                    }\n                }\n\n                if ($found == false) {\n                    // case DrawArrowFrom is an integer\n                    $defaultArrow = ['Left', 'Right'];\n                    if (isset($groupCourseList[$column]) &&\n                        in_array($arrow, $groupCourseList[$column])\n                    ) {\n                        $defaultArrow = ['Top', 'Bottom'];\n                    }\n                    $graphHtml .= self::createConnection(\n                        \"row_$arrow\",\n                        \"row_$id\",\n                        $defaultArrow\n                    );\n\n                    $connections[] = [\n                        'from' => \"v$arrow\",\n                        'to' => \"v$id\",\n                    ];\n                }\n            }\n        }\n\n        return $graphHtml;\n    }\n\n    /**\n     * @param array  $groupCourseList list of groups and their courses\n     * @param int    $group\n     * @param string $groupLabel\n     * @param bool   $showGroupLine\n     * @param array  $subGroupList\n     * @param $widthGroup\n     *\n     * @return string\n     */\n    public static function parseSubGroups(\n        $groupCourseList,\n        $group,\n        $groupLabel,\n        $showGroupLine,\n        $subGroupList,\n        $widthGroup\n    ) {\n        $topValue = 90;\n        $defaultSpace = 40;\n        $leftGroup = $defaultSpace.'px';\n        if ($group == 1) {\n            $leftGroup = 0;\n        }\n\n        $groupIdTag = \"group_$group\";\n        $borderLine = $showGroupLine === true ? 'border-style:solid;' : '';\n\n        $graphHtml = '<div\n            id=\"'.$groupIdTag.'\" class=\"career_group\"\n            style=\" '.$borderLine.' padding:15px; float:left; margin-left:'.$leftGroup.'; width:'.$widthGroup.'%\">';\n\n        if (!empty($groupLabel)) {\n            $graphHtml .= '<h3>'.$groupLabel.'</h3>';\n        }\n\n        foreach ($subGroupList as $subGroup => $subGroupData) {\n            $subGroupLabel = isset($subGroupData['label']) ? $subGroupData['label'] : '';\n            $columnList = isset($subGroupData['columns']) ? $subGroupData['columns'] : [];\n\n            if (empty($columnList)) {\n                continue;\n            }\n\n            $line = '';\n            if (!empty($subGroup)) {\n                $line = 'border-style:solid;';\n            }\n\n            // padding:15px;\n            $graphHtml .= '<div\n                id=\"subgroup_'.$subGroup.'\" class=\"career_subgroup\"\n                style=\"'.$line.' margin-bottom:20px; padding:15px; float:left; margin-left:0px; width:100%\">';\n            if (!empty($subGroupLabel)) {\n                $graphHtml .= '<h3>'.$subGroupLabel.'</h3>';\n            }\n            foreach ($columnList as $column => $rows) {\n                $leftColumn = $defaultSpace.'px';\n                if ($column == 1) {\n                    $leftColumn = 0;\n                }\n                if (count($columnList) == 1) {\n                    $leftColumn = 0;\n                }\n\n                $widthColumn = 85 / count($columnList);\n                $graphHtml .= '<div\n                    id=\"col_'.$column.'\" class=\"career_column\"\n                    style=\"padding:15px;float:left; margin-left:'.$leftColumn.'; width:'.$widthColumn.'%\">';\n                $maxRow = 0;\n                foreach ($rows as $row => $vertex) {\n                    if ($row > $maxRow) {\n                        $maxRow = $row;\n                    }\n                }\n\n                $newRowList = [];\n                $defaultSubGroup = -1;\n                $subGroupCountList = [];\n                for ($i = 0; $i < $maxRow; $i++) {\n                    /** @var Vertex $vertex */\n                    $vertex = isset($rows[$i + 1]) ? $rows[$i + 1] : null;\n                    if (!is_null($vertex)) {\n                        $subGroup = $vertex->getAttribute('SubGroup');\n                        if ($subGroup == '' || empty($subGroup)) {\n                            $defaultSubGroup = 0;\n                        } else {\n                            $defaultSubGroup = (int) $subGroup;\n                        }\n                    }\n                    $newRowList[$i + 1][$defaultSubGroup][] = $vertex;\n                    if (!isset($subGroupCountList[$defaultSubGroup])) {\n                        $subGroupCountList[$defaultSubGroup] = 1;\n                    } else {\n                        $subGroupCountList[$defaultSubGroup]++;\n                    }\n                }\n\n                $subGroup = null;\n                $subGroupAdded = [];\n                /** @var Vertex $vertex */\n                foreach ($newRowList as $row => $subGroupList) {\n                    foreach ($subGroupList as $subGroup => $vertexList) {\n                        if (!empty($subGroup) && $subGroup != -1) {\n                            if (!isset($subGroupAdded[$subGroup])) {\n                                $subGroupAdded[$subGroup] = 1;\n                            } else {\n                                $subGroupAdded[$subGroup]++;\n                            }\n                        }\n\n                        foreach ($vertexList as $vertex) {\n                            if (is_null($vertex)) {\n                                $graphHtml .= '<div class=\"career_empty\" style=\"height: 130px\">';\n                                $graphHtml .= '</div>';\n                                continue;\n                            }\n\n                            $id = $vertex->getId();\n                            $rowId = \"row_$row\";\n                            $graphHtml .= '<div id = \"row_'.$id.'\" class=\"'.$rowId.' career_row\" >';\n                            $color = '';\n                            if (!empty($vertex->getAttribute('DefinedColor'))) {\n                                $color = $vertex->getAttribute('DefinedColor');\n                            }\n                            $content = $vertex->getAttribute('Notes');\n                            $content .= '<div class=\"pull-right\">['.$id.']</div>';\n\n                            $title = $vertex->getAttribute('graphviz.label');\n                            if (!empty($vertex->getAttribute('LinkedElement'))) {\n                                $title = Display::url($title, $vertex->getAttribute('LinkedElement'));\n                            }\n\n                            $graphHtml .= Display::panel(\n                                $content,\n                                $title,\n                                null,\n                                null,\n                                null,\n                                null,\n                                $color\n                            );\n                            $graphHtml .= '</div>';\n\n                            $arrow = $vertex->getAttribute('DrawArrowFrom');\n                            $found = false;\n                            if (!empty($arrow)) {\n                                $pos = strpos($arrow, 'SG');\n                                if ($pos === false) {\n                                    $pos = strpos($arrow, 'G');\n                                    if (is_numeric($pos)) {\n                                        $parts = explode('G', $arrow);\n                                        if (empty($parts[0]) && count($parts) == 2) {\n                                            $groupArrow = $parts[1];\n                                            $graphHtml .= self::createConnection(\n                                                \"group_$groupArrow\",\n                                                \"row_$id\",\n                                                ['Left', 'Right']\n                                            );\n                                            $found = true;\n                                        }\n                                    }\n                                } else {\n                                    $parts = explode('SG', $arrow);\n                                    if (empty($parts[0]) && count($parts) == 2) {\n                                        $subGroupArrow = $parts[1];\n                                        $graphHtml .= self::createConnection(\n                                            \"subgroup_$subGroupArrow\",\n                                            \"row_$id\",\n                                            ['Left', 'Right']\n                                        );\n                                        $found = true;\n                                    }\n                                }\n                            }\n\n                            if ($found == false) {\n                                $defaultArrow = ['Left', 'Right'];\n                                if (isset($groupCourseList[$group]) &&\n                                    in_array($arrow, $groupCourseList[$group])\n                                ) {\n                                    $defaultArrow = ['Top', 'Bottom'];\n                                }\n                                $graphHtml .= self::createConnection(\n                                    \"row_$arrow\",\n                                    \"row_$id\",\n                                    $defaultArrow\n                                );\n                            }\n                        }\n                    }\n                }\n                $graphHtml .= '</div>';\n            }\n            $graphHtml .= '</div>';\n        }\n        $graphHtml .= '</div>';\n\n        return $graphHtml;\n    }\n\n    /**\n     * @param string $source\n     * @param string $target\n     * @param array  $anchor\n     *\n     * @return string\n     */\n    public static function createConnection($source, $target, $anchor = [])\n    {\n        if (empty($anchor)) {\n            // Default\n            $anchor = ['Bottom', 'Right'];\n        }\n\n        $anchor = implode('\",\"', $anchor);\n        $html = '<script>\n\n        var connectorPaintStyle = {\n            strokeWidth: 2,\n            stroke: \"#a31ed3\",\n            joinstyle: \"round\",\n            outlineStroke: \"white\",\n            outlineWidth: 2\n        },\n        // .. and this is the hover style.\n        connectorHoverStyle = {\n            strokeWidth: 3,\n            stroke: \"#216477\",\n            outlineWidth: 5,\n            outlineStroke: \"white\"\n        },\n        endpointHoverStyle = {\n            fill: \"#E80CAF\",\n            stroke: \"#E80CAF\"\n        };\n        jsPlumb.ready(function() { ';\n        $html .= 'jsPlumb.connect({\n            source:\"'.$source.'\",\n            target:\"'.$target.'\",\n            endpoint:[ \"Rectangle\", { width:1, height:1 }],\n            connector: [\"Flowchart\"],\n            paintStyle: connectorPaintStyle,\n            hoverPaintStyle: endpointHoverStyle,\n            anchor: [\"'.$anchor.'\"],\n            overlays: [\n                [\n                    \"Arrow\",\n                    {\n                        location:1,\n                        width:11,\n                        length:11\n                    }\n                ],\n            ],\n        });';\n        $html .= '});</script>'.PHP_EOL;\n\n        return $html;\n    }\n\n    public static function renderDiagramFooter(): string\n    {\n        $footer = '';\n        if (api_get_configuration_value('career_diagram_legend')) {\n            $footer .= get_lang('CareerDiagramLegend');\n        }\n        if (api_get_configuration_value('career_diagram_disclaimer')) {\n            $footer .= get_lang('CareerDiagramDisclaimer');\n        }\n\n        return $footer;\n    }\n\n    public static function addCareerFieldsToForm(FormValidator $form, array $values = [])\n    {\n        $career = new self();\n        $careerList = $career->get_all();\n        $list = array_column($careerList, 'name', 'id');\n\n        $url = api_get_path(WEB_AJAX_PATH).'career.ajax.php';\n\n        $form->addHtml('<script>\n                $(function () {\n                    var url = \"'.$url.'\";\n                    var $txtPromotion = $(\"#promotion_id\");\n\n                    $(\"#career_id\").on(\"change\", function () {\n                        var id = this.value;\n\n                        $txtPromotion.empty().append($(\"<option>\", {\n                            value: 0,\n                            text: \"'.get_lang('All').'\"\n                        }));\n\n                        $.getJSON(url, {\n                            \"career_id\": id,\n                            \"a\": \"get_promotions\"\n                        }).done(function (data) {\n                            $.each(data, function (index, value) {\n                                $txtPromotion.append($(\"<option>\", {\n                                    value: value.id,\n                                    text: value.name\n                                }));\n                            });\n\n                            $txtPromotion.selectpicker(\"refresh\");\n                        });\n                    });\n                });\n            </script>');\n        $form->addSelect(\n            'career_id',\n            get_lang('Career'),\n            $list,\n            [\n                'placeholder' => get_lang('SelectAnOption'),\n                'id' => 'career_id',\n            ]\n        );\n\n        $options = [\n            '0' => get_lang('All'),\n        ];\n        if (isset($values['promotion_id'])) {\n            $promotion = new Promotion();\n            $promotion = $promotion->get($values['promotion_id']);\n            if ($promotion) {\n                $options = [$promotion['id'] => $promotion['name']];\n            }\n        }\n\n        $form->addSelect(\n            'promotion_id',\n            get_lang('Promotion'),\n            $options,\n            ['id' => 'promotion_id']\n        );\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * Class Promotion\n * This class provides methods for the promotion management.\n * Include/require it in your code to use its features.\n */\nclass Promotion extends Model\n{\n    public $table;\n    public $columns = [\n        'id',\n        'name',\n        'description',\n        'career_id',\n        'status',\n        'created_at',\n        'updated_at',\n    ];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n        $this->table = Database::get_main_table(TABLE_PROMOTION);\n    }\n\n    /**\n     * Get the count of elements.\n     */\n    public function get_count()\n    {\n        $row = Database::select(\n            'count(*) as count',\n            $this->table,\n            [],\n            'first'\n        );\n\n        return $row['count'];\n    }\n\n    /**\n     * Copies the promotion to a new one.\n     *\n     * @param   int     Promotion ID\n     * @param   int     Career ID, in case we want to change it\n     * @param   bool     Whether or not to copy the sessions inside\n     *\n     * @return int New promotion ID on success, false on failure\n     */\n    public function copy($id, $career_id = null, $copy_sessions = false)\n    {\n        $pid = false;\n        $promotion = $this->get($id);\n        if (!empty($promotion)) {\n            $new = [];\n            foreach ($promotion as $key => $val) {\n                switch ($key) {\n                    case 'id':\n                    case 'updated_at':\n                        break;\n                    case 'name':\n                        $val .= ' '.get_lang('CopyLabelSuffix');\n                        $new[$key] = $val;\n                        break;\n                    case 'created_at':\n                        $val = api_get_utc_datetime();\n                        $new[$key] = $val;\n                        break;\n                    case 'career_id':\n                        if (!empty($career_id)) {\n                            $val = (int) $career_id;\n                        }\n                        $new[$key] = $val;\n                        break;\n                    default:\n                        $new[$key] = $val;\n                        break;\n                }\n            }\n\n            if ($copy_sessions) {\n                /**\n                 * When copying a session we do:\n                 * 1. Copy a new session from the source\n                 * 2. Copy all courses from the session (no user data, no user list)\n                 * 3. Create the promotion.\n                 */\n                $session_list = SessionManager::get_all_sessions_by_promotion($id);\n\n                if (!empty($session_list)) {\n                    $pid = $this->save($new);\n                    if (!empty($pid)) {\n                        $new_session_list = [];\n\n                        foreach ($session_list as $item) {\n                            $sid = SessionManager::copy(\n                                $item['id'],\n                                true,\n                                false,\n                                false,\n                                true\n                            );\n                            $new_session_list[] = $sid;\n                        }\n\n                        if (!empty($new_session_list)) {\n                            SessionManager::subscribe_sessions_to_promotion(\n                                $pid,\n                                $new_session_list\n                            );\n                        }\n                    }\n                }\n            } else {\n                $pid = $this->save($new);\n            }\n        }\n\n        return $pid;\n    }\n\n    /**\n     * Gets all promotions by career id.\n     *\n     * @param   int     career id\n     * @param bool $order\n     *\n     * @return array results\n     */\n    public function get_all_promotions_by_career_id($career_id, $order = false)\n    {\n        return Database::select(\n            '*',\n            $this->table,\n            [\n                'where' => ['career_id = ?' => $career_id],\n                'order' => $order,\n            ]\n        );\n    }\n\n    /**\n     * @return array\n     */\n    public function get_status_list()\n    {\n        return [\n            PROMOTION_STATUS_ACTIVE => get_lang('Active'),\n            PROMOTION_STATUS_INACTIVE => get_lang('Inactive'),\n        ];\n    }\n\n    /**\n     * Displays the title + grid.\n     *\n     * @return string html code\n     */\n    public function display()\n    {\n        // Action links\n        echo '<div class=\"actions\" style=\"margin-bottom:20px\">';\n        echo '<a href=\"career_dashboard.php\">'.\n            Display::return_icon(\n                'back.png',\n                get_lang('Back'),\n                '',\n                '32'\n            )\n            .'</a>';\n        echo '<a href=\"'.api_get_self().'?action=add\">'.\n            Display::return_icon(\n                'new_promotion.png',\n                get_lang('Add'),\n                '',\n                '32'\n            ).'</a>';\n        echo '<a href=\"'.api_get_path(WEB_CODE_PATH).'session/session_add.php\">'.\n            Display::return_icon(\n                'new_session.png',\n                get_lang('AddSession'),\n                '',\n                '32'\n            ).'</a>';\n        echo '</div>';\n        echo Display::grid_html('promotions');\n    }\n\n    /**\n     * Update all session status by promotion.\n     *\n     * @param int $promotion_id\n     * @param int $status       (1, 0)\n     */\n    public function update_all_sessions_status_by_promotion_id(\n        $promotion_id,\n        $status\n    ) {\n        $sessionList = SessionManager::get_all_sessions_by_promotion($promotion_id);\n        if (!empty($sessionList)) {\n            foreach ($sessionList as $item) {\n                SessionManager::set_session_status($item['id'], $status);\n            }\n        }\n    }\n\n    /**\n     * Returns a Form validator Obj.\n     *\n     * @param string $url\n     * @param string $action\n     *\n     * @return FormValidator\n     */\n    public function return_form($url, $action = 'add')\n    {\n        $form = new FormValidator('promotion', 'post', $url);\n        // Setting the form elements\n        $header = get_lang('Add');\n        if ($action == 'edit') {\n            $header = get_lang('Modify');\n        }\n\n        $id = isset($_GET['id']) ? (int) $_GET['id'] : '';\n\n        $form->addHeader($header);\n        $form->addHidden('id', $id);\n        $form->addText('name', get_lang('Name'), true, ['size' => '70', 'id' => 'name']);\n        $form->addHtmlEditor(\n            'description',\n            get_lang('Description'),\n            false,\n            false,\n            [\n                'ToolbarSet' => 'Careers',\n                'Width' => '100%',\n                'Height' => '250',\n            ]\n        );\n        $career = new Career();\n        $careers = $career->get_all();\n        $career_list = [];\n        foreach ($careers as $item) {\n            $career_list[$item['id']] = $item['name'];\n        }\n        $form->addSelect(\n            'career_id',\n            get_lang('Career'),\n            $career_list,\n            ['id' => 'career_id']\n        );\n        $status_list = $this->get_status_list();\n        $form->addElement('select', 'status', get_lang('Status'), $status_list);\n        if ($action == 'edit') {\n            $form->addElement('text', 'created_at', get_lang('CreatedAt'));\n            $form->freeze('created_at');\n        }\n        if ($action == 'edit') {\n            $form->addButtonSave(get_lang('Modify'), 'submit');\n        } else {\n            $form->addButtonCreate(get_lang('Add'), 'submit');\n        }\n\n        // Setting the defaults\n        $defaults = $this->get($id);\n        if (!empty($defaults['created_at'])) {\n            $defaults['created_at'] = api_convert_and_format_date($defaults['created_at']);\n        }\n        if (!empty($defaults['updated_at'])) {\n            $defaults['updated_at'] = api_convert_and_format_date($defaults['updated_at']);\n        }\n        $form->setDefaults($defaults);\n\n        // Setting the rules\n        $form->addRule('name', get_lang('ThisFieldIsRequired'), 'required');\n\n        return $form;\n    }\n\n    /**\n     * @param array $params\n     * @param bool  $show_query\n     *\n     * @return bool\n     */\n    public function save($params, $show_query = false)\n    {\n        $id = parent::save($params, $show_query);\n        if (!empty($id)) {\n            Event::addEvent(\n                LOG_PROMOTION_CREATE,\n                LOG_PROMOTION_ID,\n                $id,\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        }\n\n        return $id;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return bool\n     */\n    public function delete($id)\n    {\n        if (parent::delete($id)) {\n            SessionManager::clear_session_ref_promotion($id);\n            Event::addEvent(\n                LOG_PROMOTION_DELETE,\n                LOG_PROMOTION_ID,\n                $id,\n                api_get_utc_datetime(),\n                api_get_user_id()\n            );\n        } else {\n            return false;\n        }\n    }\n}\n"], "filenames": ["main/inc/lib/career.lib.php", "main/inc/lib/promotion.lib.php"], "buggy_code_start_loc": [230, 230], "buggy_code_end_loc": [231, 238], "fixing_code_start_loc": [230, 230], "fixing_code_end_loc": [231, 233], "type": "CWE-79", "message": "Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the careers & promotions management section.", "other": {"cve": {"id": "CVE-2023-37063", "sourceIdentifier": "cve@mitre.org", "published": "2023-07-07T17:15:09.943", "lastModified": "2023-07-12T20:58:12.763", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the careers & promotions management section."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndIncluding": "1.11.20", "matchCriteriaId": "7C09DB8C-2B3F-4EE5-B478-546C468B1E04"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/546a18b0bd1446123f4e29f81f42e71b761f51b7", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-117-2023-06-06-Low-impact-Low-risk-XSS-through-admin-account-careers-amp-promotions-management", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/546a18b0bd1446123f4e29f81f42e71b761f51b7"}}