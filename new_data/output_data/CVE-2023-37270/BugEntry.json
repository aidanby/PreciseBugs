{"buggy_code": ["<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n/**\n * @package functions\\___\n */\n\ninclude_once( PHPWG_ROOT_PATH .'include/functions_plugins.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_user.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_cookie.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_session.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_category.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_html.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_tag.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_url.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/derivative_params.inc.php');\ninclude_once( PHPWG_ROOT_PATH .'include/derivative_std_params.inc.php');\ninclude_once( PHPWG_ROOT_PATH .'include/derivative.inc.php');\n\n\n/**\n * returns the current microsecond since Unix epoch\n *\n * @return int\n */\nfunction micro_seconds()\n{\n  $t1 = explode(' ', microtime());\n  $t2 = explode('.', $t1[0]);\n  $t2 = $t1[1].substr($t2[1], 0, 6);\n  return $t2;\n}\n\n/**\n * returns a float value coresponding to the number of seconds since\n * the unix epoch (1st January 1970) and the microseconds are precised\n * e.g. 1052343429.89276600\n *\n * @return float\n */\nfunction get_moment()\n{\n  return microtime(true);\n}\n\n/**\n * returns the number of seconds (with 3 decimals precision)\n * between the start time and the end time given\n *\n * @param float $start\n * @param float $end\n * @return string \"$TIME s\"\n */\nfunction get_elapsed_time($start, $end)\n{\n  return number_format($end - $start, 3, '.', ' ').' s';\n}\n\n/**\n * returns the part of the string after the last \".\"\n *\n * @param string $filename\n * @return string\n */\nfunction get_extension( $filename )\n{\n  return substr( strrchr( $filename, '.' ), 1, strlen ( $filename ) );\n}\n\n/**\n * returns the part of the string before the last \".\".\n * get_filename_wo_extension( 'test.tar.gz' ) = 'test.tar'\n *\n * @param string $filename\n * @return string\n */\nfunction get_filename_wo_extension( $filename )\n{\n  $pos = strrpos( $filename, '.' );\n  return ($pos===false) ? $filename : substr( $filename, 0, $pos);\n}\n\n/** no option for mkgetdir() */\ndefine('MKGETDIR_NONE', 0);\n/** sets mkgetdir() recursive */\ndefine('MKGETDIR_RECURSIVE', 1);\n/** sets mkgetdir() exit script on error */\ndefine('MKGETDIR_DIE_ON_ERROR', 2);\n/** sets mkgetdir() add a index.htm file */\ndefine('MKGETDIR_PROTECT_INDEX', 4);\n/** sets mkgetdir() add a .htaccess file*/\ndefine('MKGETDIR_PROTECT_HTACCESS', 8);\n/** default options for mkgetdir() = MKGETDIR_RECURSIVE | MKGETDIR_DIE_ON_ERROR | MKGETDIR_PROTECT_INDEX */\ndefine('MKGETDIR_DEFAULT', MKGETDIR_RECURSIVE | MKGETDIR_DIE_ON_ERROR | MKGETDIR_PROTECT_INDEX);\n\n/**\n * creates directory if not exists and ensures that directory is writable\n *\n * @param string $dir\n * @param int $flags combination of MKGETDIR_xxx\n * @return bool\n */\nfunction mkgetdir($dir, $flags=MKGETDIR_DEFAULT)\n{\n  if ( !is_dir($dir) )\n  {\n    global $conf;\n    if (substr(PHP_OS, 0, 3) == 'WIN')\n    {\n      $dir = str_replace('/', DIRECTORY_SEPARATOR, $dir);\n    }\n    $umask = umask(0);\n    $mkd = @mkdir($dir, $conf['chmod_value'], ($flags&MKGETDIR_RECURSIVE) ? true:false );\n    umask($umask);\n    if ($mkd==false)\n    {\n      !($flags&MKGETDIR_DIE_ON_ERROR) or fatal_error( \"$dir \".l10n('no write access'));\n      return false;\n    }\n    if( $flags&MKGETDIR_PROTECT_HTACCESS )\n    {\n      $file = $dir.'/.htaccess';\n      file_exists($file) or @file_put_contents( $file, 'deny from all' );\n    }\n    if( $flags&MKGETDIR_PROTECT_INDEX )\n    {\n      $file = $dir.'/index.htm';\n      file_exists($file) or @file_put_contents( $file, 'Not allowed!' );\n    }\n  }\n  if ( !is_writable($dir) )\n  {\n    !($flags&MKGETDIR_DIE_ON_ERROR) or fatal_error( \"$dir \".l10n('no write access'));\n    return false;\n  }\n  return true;\n}\n\n/**\n * finds out if a string is in ASCII, UTF-8 or other encoding\n *\n * @param string $str\n * @return int *0* if _$str_ is ASCII, *1* if UTF-8, *-1* otherwise\n */\nfunction qualify_utf8($Str)\n{\n  $ret = 0;\n  for ($i=0; $i<strlen($Str); $i++)\n  {\n    if (ord($Str[$i]) < 0x80) continue; # 0bbbbbbb\n    $ret = 1;\n    if ((ord($Str[$i]) & 0xE0) == 0xC0) $n=1; # 110bbbbb\n    elseif ((ord($Str[$i]) & 0xF0) == 0xE0) $n=2; # 1110bbbb\n    elseif ((ord($Str[$i]) & 0xF8) == 0xF0) $n=3; # 11110bbb\n    elseif ((ord($Str[$i]) & 0xFC) == 0xF8) $n=4; # 111110bb\n    elseif ((ord($Str[$i]) & 0xFE) == 0xFC) $n=5; # 1111110b\n    else return -1; # Does not match any model\n    for ($j=0; $j<$n; $j++)\n    { # n bytes matching 10bbbbbb follow ?\n      if ((++$i == strlen($Str)) || ((ord($Str[$i]) & 0xC0) != 0x80))\n        return -1;\n    }\n  }\n  return $ret;\n}\n\n/**\n * Remove accents from a UTF-8 or ISO-8859-1 string (from wordpress)\n *\n * @param string $string\n * @return string\n */\nfunction remove_accents($string)\n{\n  $utf = qualify_utf8($string);\n  if ( $utf == 0 )\n  {\n    return $string; // ascii\n  }\n\n  if ( $utf > 0 )\n  {\n    $chars = array(\n    // Decompositions for Latin-1 Supplement\n    \"\\xc3\\x80\"=>'A', \"\\xc3\\x81\"=>'A',\n    \"\\xc3\\x82\"=>'A', \"\\xc3\\x83\"=>'A',\n    \"\\xc3\\x84\"=>'A', \"\\xc3\\x85\"=>'A',\n    \"\\xc3\\x87\"=>'C', \"\\xc3\\x88\"=>'E',\n    \"\\xc3\\x89\"=>'E', \"\\xc3\\x8a\"=>'E',\n    \"\\xc3\\x8b\"=>'E', \"\\xc3\\x8c\"=>'I',\n    \"\\xc3\\x8d\"=>'I', \"\\xc3\\x8e\"=>'I',\n    \"\\xc3\\x8f\"=>'I', \"\\xc3\\x91\"=>'N',\n    \"\\xc3\\x92\"=>'O', \"\\xc3\\x93\"=>'O',\n    \"\\xc3\\x94\"=>'O', \"\\xc3\\x95\"=>'O',\n    \"\\xc3\\x96\"=>'O', \"\\xc3\\x99\"=>'U',\n    \"\\xc3\\x9a\"=>'U', \"\\xc3\\x9b\"=>'U',\n    \"\\xc3\\x9c\"=>'U', \"\\xc3\\x9d\"=>'Y',\n    \"\\xc3\\x9f\"=>'s', \"\\xc3\\xa0\"=>'a',\n    \"\\xc3\\xa1\"=>'a', \"\\xc3\\xa2\"=>'a',\n    \"\\xc3\\xa3\"=>'a', \"\\xc3\\xa4\"=>'a',\n    \"\\xc3\\xa5\"=>'a', \"\\xc3\\xa7\"=>'c',\n    \"\\xc3\\xa8\"=>'e', \"\\xc3\\xa9\"=>'e',\n    \"\\xc3\\xaa\"=>'e', \"\\xc3\\xab\"=>'e',\n    \"\\xc3\\xac\"=>'i', \"\\xc3\\xad\"=>'i',\n    \"\\xc3\\xae\"=>'i', \"\\xc3\\xaf\"=>'i',\n    \"\\xc3\\xb1\"=>'n', \"\\xc3\\xb2\"=>'o',\n    \"\\xc3\\xb3\"=>'o', \"\\xc3\\xb4\"=>'o',\n    \"\\xc3\\xb5\"=>'o', \"\\xc3\\xb6\"=>'o',\n    \"\\xc3\\xb9\"=>'u', \"\\xc3\\xba\"=>'u',\n    \"\\xc3\\xbb\"=>'u', \"\\xc3\\xbc\"=>'u',\n    \"\\xc3\\xbd\"=>'y', \"\\xc3\\xbf\"=>'y',\n    // Decompositions for Latin Extended-A\n    \"\\xc4\\x80\"=>'A', \"\\xc4\\x81\"=>'a',\n    \"\\xc4\\x82\"=>'A', \"\\xc4\\x83\"=>'a',\n    \"\\xc4\\x84\"=>'A', \"\\xc4\\x85\"=>'a',\n    \"\\xc4\\x86\"=>'C', \"\\xc4\\x87\"=>'c',\n    \"\\xc4\\x88\"=>'C', \"\\xc4\\x89\"=>'c',\n    \"\\xc4\\x8a\"=>'C', \"\\xc4\\x8b\"=>'c',\n    \"\\xc4\\x8c\"=>'C', \"\\xc4\\x8d\"=>'c',\n    \"\\xc4\\x8e\"=>'D', \"\\xc4\\x8f\"=>'d',\n    \"\\xc4\\x90\"=>'D', \"\\xc4\\x91\"=>'d',\n    \"\\xc4\\x92\"=>'E', \"\\xc4\\x93\"=>'e',\n    \"\\xc4\\x94\"=>'E', \"\\xc4\\x95\"=>'e',\n    \"\\xc4\\x96\"=>'E', \"\\xc4\\x97\"=>'e',\n    \"\\xc4\\x98\"=>'E', \"\\xc4\\x99\"=>'e',\n    \"\\xc4\\x9a\"=>'E', \"\\xc4\\x9b\"=>'e',\n    \"\\xc4\\x9c\"=>'G', \"\\xc4\\x9d\"=>'g',\n    \"\\xc4\\x9e\"=>'G', \"\\xc4\\x9f\"=>'g',\n    \"\\xc4\\xa0\"=>'G', \"\\xc4\\xa1\"=>'g',\n    \"\\xc4\\xa2\"=>'G', \"\\xc4\\xa3\"=>'g',\n    \"\\xc4\\xa4\"=>'H', \"\\xc4\\xa5\"=>'h',\n    \"\\xc4\\xa6\"=>'H', \"\\xc4\\xa7\"=>'h',\n    \"\\xc4\\xa8\"=>'I', \"\\xc4\\xa9\"=>'i',\n    \"\\xc4\\xaa\"=>'I', \"\\xc4\\xab\"=>'i',\n    \"\\xc4\\xac\"=>'I', \"\\xc4\\xad\"=>'i',\n    \"\\xc4\\xae\"=>'I', \"\\xc4\\xaf\"=>'i',\n    \"\\xc4\\xb0\"=>'I', \"\\xc4\\xb1\"=>'i',\n    \"\\xc4\\xb2\"=>'IJ', \"\\xc4\\xb3\"=>'ij',\n    \"\\xc4\\xb4\"=>'J', \"\\xc4\\xb5\"=>'j',\n    \"\\xc4\\xb6\"=>'K', \"\\xc4\\xb7\"=>'k',\n    \"\\xc4\\xb8\"=>'k', \"\\xc4\\xb9\"=>'L',\n    \"\\xc4\\xba\"=>'l', \"\\xc4\\xbb\"=>'L',\n    \"\\xc4\\xbc\"=>'l', \"\\xc4\\xbd\"=>'L',\n    \"\\xc4\\xbe\"=>'l', \"\\xc4\\xbf\"=>'L',\n    \"\\xc5\\x80\"=>'l', \"\\xc5\\x81\"=>'L',\n    \"\\xc5\\x82\"=>'l', \"\\xc5\\x83\"=>'N',\n    \"\\xc5\\x84\"=>'n', \"\\xc5\\x85\"=>'N',\n    \"\\xc5\\x86\"=>'n', \"\\xc5\\x87\"=>'N',\n    \"\\xc5\\x88\"=>'n', \"\\xc5\\x89\"=>'N',\n    \"\\xc5\\x8a\"=>'n', \"\\xc5\\x8b\"=>'N',\n    \"\\xc5\\x8c\"=>'O', \"\\xc5\\x8d\"=>'o',\n    \"\\xc5\\x8e\"=>'O', \"\\xc5\\x8f\"=>'o',\n    \"\\xc5\\x90\"=>'O', \"\\xc5\\x91\"=>'o',\n    \"\\xc5\\x92\"=>'OE', \"\\xc5\\x93\"=>'oe',\n    \"\\xc5\\x94\"=>'R', \"\\xc5\\x95\"=>'r',\n    \"\\xc5\\x96\"=>'R', \"\\xc5\\x97\"=>'r',\n    \"\\xc5\\x98\"=>'R', \"\\xc5\\x99\"=>'r',\n    \"\\xc5\\x9a\"=>'S', \"\\xc5\\x9b\"=>'s',\n    \"\\xc5\\x9c\"=>'S', \"\\xc5\\x9d\"=>'s',\n    \"\\xc5\\x9e\"=>'S', \"\\xc5\\x9f\"=>'s',\n    \"\\xc5\\xa0\"=>'S', \"\\xc5\\xa1\"=>'s',\n    \"\\xc5\\xa2\"=>'T', \"\\xc5\\xa3\"=>'t',\n    \"\\xc5\\xa4\"=>'T', \"\\xc5\\xa5\"=>'t',\n    \"\\xc5\\xa6\"=>'T', \"\\xc5\\xa7\"=>'t',\n    \"\\xc5\\xa8\"=>'U', \"\\xc5\\xa9\"=>'u',\n    \"\\xc5\\xaa\"=>'U', \"\\xc5\\xab\"=>'u',\n    \"\\xc5\\xac\"=>'U', \"\\xc5\\xad\"=>'u',\n    \"\\xc5\\xae\"=>'U', \"\\xc5\\xaf\"=>'u',\n    \"\\xc5\\xb0\"=>'U', \"\\xc5\\xb1\"=>'u',\n    \"\\xc5\\xb2\"=>'U', \"\\xc5\\xb3\"=>'u',\n    \"\\xc5\\xb4\"=>'W', \"\\xc5\\xb5\"=>'w',\n    \"\\xc5\\xb6\"=>'Y', \"\\xc5\\xb7\"=>'y',\n    \"\\xc5\\xb8\"=>'Y', \"\\xc5\\xb9\"=>'Z',\n    \"\\xc5\\xba\"=>'z', \"\\xc5\\xbb\"=>'Z',\n    \"\\xc5\\xbc\"=>'z', \"\\xc5\\xbd\"=>'Z',\n    \"\\xc5\\xbe\"=>'z', \"\\xc5\\xbf\"=>'s',\n    // Decompositions for Latin Extended-B\n    \"\\xc8\\x98\"=>'S', \"\\xc8\\x99\"=>'s',\n    \"\\xc8\\x9a\"=>'T', \"\\xc8\\x9b\"=>'t',\n    // Euro Sign\n    \"\\xe2\\x82\\xac\"=>'E',\n    // GBP (Pound) Sign\n    \"\\xc2\\xa3\"=>'');\n\n    $string = strtr($string, $chars);\n  }\n  else\n  {\n    // Assume ISO-8859-1 if not UTF-8\n    $chars['in'] = chr(128).chr(131).chr(138).chr(142).chr(154).chr(158)\n      .chr(159).chr(162).chr(165).chr(181).chr(192).chr(193).chr(194)\n      .chr(195).chr(196).chr(197).chr(199).chr(200).chr(201).chr(202)\n      .chr(203).chr(204).chr(205).chr(206).chr(207).chr(209).chr(210)\n      .chr(211).chr(212).chr(213).chr(214).chr(216).chr(217).chr(218)\n      .chr(219).chr(220).chr(221).chr(224).chr(225).chr(226).chr(227)\n      .chr(228).chr(229).chr(231).chr(232).chr(233).chr(234).chr(235)\n      .chr(236).chr(237).chr(238).chr(239).chr(241).chr(242).chr(243)\n      .chr(244).chr(245).chr(246).chr(248).chr(249).chr(250).chr(251)\n      .chr(252).chr(253).chr(255);\n\n    $chars['out'] = \"EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy\";\n\n    $string = strtr($string, $chars['in'], $chars['out']);\n    $double_chars['in'] = array(chr(140), chr(156), chr(198), chr(208), chr(222), chr(223), chr(230), chr(240), chr(254));\n    $double_chars['out'] = array('OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th');\n    $string = str_replace($double_chars['in'], $double_chars['out'], $string);\n  }\n\n  return $string;\n}\n\nif (function_exists('mb_strtolower') && defined('PWG_CHARSET'))\n{\n  /**\n   * removes accents from a string and converts it to lower case\n   *\n   * @param string $term\n   * @return string\n   */\n  function pwg_transliterate($term)\n  {\n    return remove_accents( mb_strtolower($term, PWG_CHARSET) );\n  }\n}\nelse\n{\n  /**\n   * @ignore\n   */\n  function pwg_transliterate($term)\n  {\n    return remove_accents( strtolower($term) );\n  }\n}\n\n/**\n * simplify a string to insert it into an URL\n *\n * @param string $str\n * @return string\n */\nfunction str2url($str)\n{\n  $str = $safe = pwg_transliterate($str);\n  $str = preg_replace('/[^\\x80-\\xffa-z0-9_\\s\\'\\:\\/\\[\\],-]/','',$str);\n  $str = preg_replace('/[\\s\\'\\:\\/\\[\\],-]+/',' ',trim($str));\n  $res = str_replace(' ','_',$str);\n\n  if (empty($res))\n  {\n    $res = str_replace(' ','_', $safe);\n  }\n\n  return $res;\n}\n\n/**\n * returns an array with a list of {language_code => language_name}\n *\n * @return string[]\n */\nfunction get_languages()\n{\n  $query = '\nSELECT id, name\n  FROM '.LANGUAGES_TABLE.'\n  ORDER BY name ASC\n;';\n  $result = pwg_query($query);\n\n  $languages = array();\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    if (is_dir(PHPWG_ROOT_PATH.'language/'.$row['id']))\n    {\n      $languages[ $row['id'] ] = $row['name'];\n    }\n  }\n\n  return $languages;\n}\n\n/**\n * log the visit into history table\n *\n * @param int $image_id\n * @param string $image_type\n * @return bool\n */\nfunction pwg_log($image_id = null, $image_type = null, $format_id = null)\n{\n  global $conf, $user, $page;\n\n  $update_last_visit = false;\n  if (empty($user['last_visit']) or strtotime($user['last_visit']) < time()-$conf['session_length'])\n  {\n    $update_last_visit = true;\n  }\n  $update_last_visit = trigger_change('pwg_log_update_last_visit', $update_last_visit);\n\n  if ($update_last_visit)\n  {\n    $query = '\nUPDATE '.USER_INFOS_TABLE.'\n  SET last_visit = NOW(),\n      lastmodified = lastmodified\n  WHERE user_id = '.$user['id'].'\n';\n    pwg_query($query);\n  }\n\n  $do_log = $conf['log'];\n  if (is_admin())\n  {\n    $do_log = $conf['history_admin'];\n  }\n  if (is_a_guest())\n  {\n    $do_log = $conf['history_guest'];\n  }\n\n  $do_log = trigger_change('pwg_log_allowed', $do_log, $image_id, $image_type);\n\n  if (!$do_log)\n  {\n    return false;\n  }\n\n  $tags_string = null;\n  if ('tags'==@$page['section'])\n  {\n    $tags_string = implode(',', $page['tag_ids']);\n  }\n\n  $ip = $_SERVER['REMOTE_ADDR'];\n  // In case of \"too long\" ipv6 address, we take only the 15 first chars.\n  //\n  // It would be \"cleaner\" to increase length of history.IP to 50 chars, but\n  // the alter table is very long on such a big table. We should plan this\n  // for a future version, once history table is kept \"smaller\".\n  if (strpos($ip,':') !== false and strlen($ip) > 15)\n  {\n    $ip = substr($ip, 0, 15);\n  }\n\n  // If plugin developers add their own sections, Piwigo will automatically add it in the history.section enum column\n  if (isset($page['section']))\n  {\n    // set cache if not available\n    if (!isset($conf['history_sections_cache']))\n    {\n      conf_update_param('history_sections_cache', get_enums(HISTORY_TABLE, 'section'), true);\n    }\n\n    $conf['history_sections_cache'] = safe_unserialize($conf['history_sections_cache']);\n\n    if (in_array($page['section'], $conf['history_sections_cache']))\n    {\n      $section = $page['section'];\n    }\n    elseif (preg_match('/^[a-zA-Z0-9_-]+$/', $page['section']))\n    {\n      $history_sections = get_enums(HISTORY_TABLE, 'section');\n      $history_sections[] = $page['section'];\n\n      // alter history table structure, to include a new section\n      pwg_query('ALTER TABLE '.HISTORY_TABLE.' CHANGE section section enum(\\''.implode(\"','\", array_unique($history_sections)).'\\') DEFAULT NULL;');\n\n      // and refresh cache\n      conf_update_param('history_sections_cache', get_enums(HISTORY_TABLE, 'section'), true);\n\n      $section = $page['section'];\n    }\n  }\n  \n  $query = '\nINSERT INTO '.HISTORY_TABLE.'\n  (\n    date,\n    time,\n    user_id,\n    IP,\n    section,\n    category_id,\n    image_id,\n    image_type,\n    format_id,\n    auth_key_id,\n    tag_ids\n  )\n  VALUES\n  (\n    CURRENT_DATE,\n    CURRENT_TIME,\n    '.$user['id'].',\n    \\''.$ip.'\\',\n    '.(isset($section) ? \"'\".$section.\"'\" : 'NULL').',\n    '.(isset($page['category']['id']) ? $page['category']['id'] : 'NULL').',\n    '.(isset($image_id) ? $image_id : 'NULL').',\n    '.(isset($image_type) ? \"'\".$image_type.\"'\" : 'NULL').',\n    '.(isset($format_id) ? $format_id : 'NULL').',\n    '.(isset($page['auth_key_id']) ? $page['auth_key_id'] : 'NULL').',\n    '.(isset($tags_string) ? \"'\".$tags_string.\"'\" : 'NULL').'\n  )\n;';\n  pwg_query($query);\n\n  $history_id = pwg_db_insert_id(HISTORY_TABLE);\n  if ($history_id % 1000 == 0)\n  {\n    include_once(PHPWG_ROOT_PATH.'admin/include/functions_history.inc.php');\n    history_summarize(50000);\n  }\n\n  if ($conf['history_autopurge_every'] > 0 and $history_id % $conf['history_autopurge_every'] == 0)\n  {\n    include_once(PHPWG_ROOT_PATH.'admin/include/functions_history.inc.php');\n    history_autopurge();\n  }\n\n  return true;\n}\n\nfunction pwg_activity($object, $object_id, $action, $details=array())\n{\n  global $user;\n\n  // in case of uploadAsync, do not log the automatic login as an independant activity\n  if (isset($_REQUEST['method']) and 'pwg.images.uploadAsync' == $_REQUEST['method'] and 'login' == $action)\n  {\n    return;\n  }\n\n  if (isset($_REQUEST['method']) and 'pwg.plugins.performAction' == $_REQUEST['method'] and $_REQUEST['action'] != $action)\n  {\n    // for example, if you \"restore\" a plugin, the internal sequence will perform deactivate/uninstall/install/activate.\n    // We only want to keep the last call to pwg_activity with the \"restore\" action.\n    return;\n  }\n\n  $object_ids = $object_id;\n  if (!is_array($object_id))\n  {\n    $object_ids = array($object_id);\n  }\n\n  if (isset($_REQUEST['method']))\n  {\n    $details['method'] = $_REQUEST['method'];\n  }\n  else\n  {\n    $details['script'] = script_basename();\n\n    if ('admin' == $details['script'] and isset($_GET['page']))\n    {\n      $details['script'].= '/'.$_GET['page'];\n    }\n  }\n\n  if ('autoupdate' == $action)\n  {\n    // autoupdate on a plugin can happen anywhere, the \"script/method\" is not meaningfull\n    unset($details['method']);\n    unset($details['script']);\n  }\n\n  $user_agent = null;\n  if ('user' == $object and 'login' == $action and isset($_SERVER['HTTP_USER_AGENT']))\n  {\n    $user_agent = strip_tags($_SERVER['HTTP_USER_AGENT']);\n  }\n\n  if ('photo' == $object and 'add' == $action and !isset($details['sync']))\n  {\n    $details['added_with'] = 'app';\n    if (isset($_SERVER['HTTP_REFERER']) and preg_match('/page=photos_add/', $_SERVER['HTTP_REFERER']))\n    {\n      $details['added_with'] = 'browser';\n    }\n  }\n\n  if (in_array($object, array('album', 'photo')) and 'delete' == $action and isset($_GET['page']) and 'site_update' == $_GET['page'])\n  {\n    $details['sync'] = true;\n  }\n\n  if ('tag' == $object and 'delete' == $action and isset($_POST['destination_tag']))\n  {\n    $details['action'] = 'merge';\n    $details['destination_tag'] = $_POST['destination_tag'];\n  }\n\n  $inserts = array();\n  $details_insert = pwg_db_real_escape_string(serialize($details));\n  $ip_address = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : null;\n  $session_id = !empty(session_id()) ? session_id() : 'none';\n\n  foreach ($object_ids as $loop_object_id)\n  {\n    $performed_by = $user['id'] ?? 0; // on a plugin autoupdate, $user is not yet loaded\n\n    if ('logout' == $action)\n    {\n      $performed_by = $loop_object_id;\n    }\n\n    $inserts[] = array(\n      'object' => $object,\n      'object_id' => $loop_object_id,\n      'action' => $action,\n      'performed_by' => $performed_by,\n      'session_idx' => $session_id,\n      'ip_address' => $ip_address,\n      'details' => $details_insert,\n      'user_agent' => $user_agent,\n    );\n  }\n\n  mass_inserts(ACTIVITY_TABLE, array_keys($inserts[0]), $inserts);\n}\n\n/**\n * Computes the difference between two dates.\n * returns a DateInterval object or a stdClass with the same attributes\n * http://stephenharris.info/date-intervals-in-php-5-2\n *\n * @param DateTime $date1\n * @param DateTime $date2\n * @return DateInterval|stdClass\n */\nfunction dateDiff($date1, $date2)\n{\n  if (version_compare(PHP_VERSION, '5.3.0') >= 0)\n  {\n    return $date1->diff($date2);\n  }\n\n  $diff = new stdClass();\n\n  //Make sure $date1 is ealier\n  $diff->invert = $date2 < $date1;\n  if ($diff->invert)\n  {\n    list($date1, $date2) = array($date2, $date1);\n  }\n\n  //Calculate R values\n  $R = ($date1 <= $date2 ? '+' : '-');\n  $r = ($date1 <= $date2 ? '' : '-');\n\n  //Calculate total days\n  $diff->days = round(abs($date1->format('U') - $date2->format('U'))/86400);\n\n  //A leap year work around - consistent with DateInterval\n  $leap_year = $date1->format('m-d') == '02-29';\n  if ($leap_year)\n  {\n    $date1->modify('-1 day');\n  }\n\n  //Years, months, days, hours\n  $periods = array('years'=>-1, 'months'=>-1, 'days'=>-1, 'hours'=>-1);\n\n  foreach ($periods as $period => &$i)\n  {\n    if ($period == 'days' && $leap_year)\n    {\n      $date1->modify('+1 day');\n    }\n\n    while ($date1 <= $date2 )\n    {\n      $date1->modify('+1 '.$period);\n      $i++;\n    }\n\n    //Reset date and record increments\n    $date1->modify('-1 '.$period);\n  }\n\n  list($diff->y, $diff->m, $diff->d, $diff->h) = array_values($periods);\n\n  //Minutes, seconds\n  $diff->s = round(abs($date1->format('U') - $date2->format('U')));\n  $diff->i = floor($diff->s/60);\n  $diff->s = $diff->s - $diff->i*60;\n\n  return $diff;\n}\n\n/**\n * converts a string into a DateTime object\n *\n * @param int|string timestamp or datetime string\n * @param string $format input format respecting date() syntax\n * @return DateTime|false\n */\nfunction str2DateTime($original, $format=null)\n{\n  if (empty($original))\n  {\n    return false;\n  }\n  \n  if ($original instanceof DateTime)\n  {\n    return $original;\n  }\n\n  if (!empty($format) && version_compare(PHP_VERSION, '5.3.0') >= 0)// from known date format\n  {\n    return DateTime::createFromFormat('!'.$format, $original); // ! char to reset fields to UNIX epoch\n  }\n  else\n  {\n    $t = trim($original, '0123456789');\n    if (empty($t)) // from timestamp\n    {\n      return new DateTime('@'.$original);\n    }\n    else // from unknown date format (assuming something like Y-m-d H:i:s)\n    {\n      $ymdhms = array();\n      $tok = strtok($original, '- :/');\n      while ($tok !== false)\n      {\n        $ymdhms[] = $tok;\n        $tok = strtok('- :/');\n      }\n\n      if (count($ymdhms)<3) return false;\n      if (!isset($ymdhms[3])) $ymdhms[3] = 0;\n      if (!isset($ymdhms[4])) $ymdhms[4] = 0;\n      if (!isset($ymdhms[5])) $ymdhms[5] = 0;\n\n      $date = new DateTime();\n      $date->setDate($ymdhms[0], $ymdhms[1], $ymdhms[2]);\n      $date->setTime($ymdhms[3], $ymdhms[4], $ymdhms[5]);\n      return $date;\n    }\n  }\n}\n\n/**\n * returns a formatted and localized date for display\n *\n * @param int|string timestamp or datetime string\n * @param array $show list of components displayed, default is ['day_name', 'day', 'month', 'year']\n *    THIS PARAMETER IS PLANNED TO CHANGE\n * @param string $format input format respecting date() syntax\n * @return string\n */\nfunction format_date($original, $show=null, $format=null)\n{\n  global $lang;\n\n  $date = str2DateTime($original, $format);\n\n  if (!$date)\n  {\n    return l10n('N/A');\n  }\n\n  if ($show === null || $show === true)\n  {\n    $show = array('day_name', 'day', 'month', 'year');\n  }\n\n  // TODO use IntlDateFormatter for proper i18n\n\n  $print = '';\n  if (in_array('day_name', $show))\n    $print.= $lang['day'][ $date->format('w') ].' ';\n\n  if (in_array('day', $show))\n    $print.= $date->format('j').' ';\n\n  if (in_array('month', $show))\n    $print.= $lang['month'][ $date->format('n') ].' ';\n\n  if (in_array('year', $show))\n    $print.= $date->format('Y').' ';\n\n  if (in_array('time', $show))\n  {\n    $temp = $date->format('H:i');\n    if ($temp != '00:00')\n    {\n      $print.= $temp.' ';\n    }\n  }\n\n  return trim($print);\n}\n\n/**\n * Format a \"From ... to ...\" string from two dates\n * @param string $from\n * @param string $to\n * @param boolean $full\n * @return string\n */\nfunction format_fromto($from, $to, $full=false)\n{\n  $from = str2DateTime($from);\n  $to = str2DateTime($to);\n\n  if ($from->format('Y-m-d') == $to->format('Y-m-d'))\n  {\n    return format_date($from);\n  }\n  else\n  {\n    if ($full || $from->format('Y') != $to->format('Y'))\n    {\n      $from_str = format_date($from);\n    }\n    else if ($from->format('m') != $to->format('m'))\n    {\n      $from_str = format_date($from, array('day_name', 'day', 'month'));\n    }\n    else\n    {\n      $from_str = format_date($from, array('day_name', 'day'));\n    }\n    $to_str = format_date($to);\n\n    return l10n('from %s to %s', $from_str, $to_str);\n  }\n}\n\n/**\n * Works out the time since the given date\n *\n * @param int|string timestamp or datetime string\n * @param string $stop year,month,week,day,hour,minute,second\n * @param string $format input format respecting date() syntax\n * @param bool $with_text append \"ago\" or \"in the future\"\n * @param bool $with_weeks\n * @return string\n */\nfunction time_since($original, $stop='minute', $format=null, $with_text=true, $with_week=true, $only_last_unit=false)\n{\n  $date = str2DateTime($original, $format);\n\n  if (!$date)\n  {\n    return l10n('N/A');\n  }\n\n  $now = new DateTime();\n  $diff = dateDiff($now, $date);\n\n  $chunks = array(\n    'year' => $diff->y,\n    'month' => $diff->m,\n    'week' => 0,\n    'day' => $diff->d,\n    'hour' => $diff->h,\n    'minute' => $diff->i,\n    'second' => $diff->s,\n  );\n\n  // DateInterval does not contain the number of weeks\n  if ($with_week)\n  {\n    $chunks['week'] = (int)floor($chunks['day']/7);\n    $chunks['day'] = $chunks['day'] - $chunks['week']*7;\n  }\n\n  $j = array_search($stop, array_keys($chunks));\n\n  $print = ''; $i=0;\n  \n  if (!$only_last_unit)\n  {\n    foreach ($chunks as $name => $value)\n    {\n      if ($value != 0)\n      {\n        $print.= ' '.l10n_dec('%d '.$name, '%d '.$name.'s', $value);\n      }\n      if (!empty($print) && $i >= $j)\n      {\n        break;\n      }\n      $i++;\n    }\n  } else {\n    $reversed_chunks_names = array_keys($chunks);\n    while ($print == '' && $i<count($reversed_chunks_names )) \n    {\n      $name = $reversed_chunks_names[$i];\n      $value = $chunks[$name];\n      if ($value != 0)\n      {\n        $print = l10n_dec('%d '.$name, '%d '.$name.'s', $value);\n      }\n      if (!empty($print) && $i >= $j)\n      {\n        break;\n      }\n      $i++;\n    }\n  }\n\n  $print = trim($print);\n\n  if ($with_text)\n  {\n    if ($diff->invert)\n    {\n      $print = l10n('%s ago', $print);\n    }\n    else\n    {\n      $print = l10n('%s in the future', $print);\n    }\n  }\n\n  return $print;\n}\n\n/**\n * transform a date string from a format to another (MySQL to d/M/Y for instance)\n *\n * @param string $original\n * @param string $format_in respecting date() syntax\n * @param string $format_out respecting date() syntax\n * @param string $default if _$original_ is empty\n * @return string\n */\nfunction transform_date($original, $format_in, $format_out, $default=null)\n{\n  if (empty($original)) return $default;\n  $date = str2DateTime($original, $format_in);\n  return $date->format($format_out);\n}\n\n/**\n * append a variable to _$debug_ global\n *\n * @param string $string\n */\nfunction pwg_debug( $string )\n{\n  global $debug,$t2,$page;\n\n  $now = explode( ' ', microtime() );\n  $now2 = explode( '.', $now[0] );\n  $now2 = $now[1].'.'.$now2[1];\n  $time = number_format( $now2 - $t2, 3, '.', ' ').' s';\n  $debug .= '<p>';\n  $debug.= '['.$time.', ';\n  $debug.= $page['count_queries'].' queries] : '.$string;\n  $debug.= \"</p>\\n\";\n}\n\n/**\n * Redirects to the given URL (HTTP method).\n * once this function called, the execution doesn't go further\n * (presence of an exit() instruction.\n *\n * @param string $url\n * @return void\n */\nfunction redirect_http( $url )\n{\n  if (ob_get_length () !== FALSE)\n  {\n    ob_clean();\n  }\n  // default url is on html format\n  $url = html_entity_decode($url);\n  header('Request-URI: '.$url);\n  header('Content-Location: '.$url);\n  header('Location: '.$url);\n  exit();\n}\n\n/**\n * Redirects to the given URL (HTML method).\n * once this function called, the execution doesn't go further\n * (presence of an exit() instruction.\n *\n * @param string $url\n * @param string $msg\n * @param integer $refresh_time\n * @return void\n */\nfunction redirect_html( $url , $msg = '', $refresh_time = 0)\n{\n  global $user, $template, $lang_info, $conf, $lang, $t2, $page, $debug;\n\n  if (!isset($lang_info) || !isset($template) )\n  {\n    $user = build_user( $conf['guest_id'], true);\n    load_language('common.lang');\n    trigger_notify('loading_lang');\n    load_language('lang', PHPWG_ROOT_PATH.PWG_LOCAL_DIR, array('no_fallback'=>true, 'local'=>true) );\n    $template = new Template(PHPWG_ROOT_PATH.'themes', get_default_theme());\n  }\n\telseif (defined('IN_ADMIN') and IN_ADMIN)\n\t{\n\t\t$template = new Template(PHPWG_ROOT_PATH.'themes', get_default_theme());\n\t}\n\n  if (empty($msg))\n  {\n    $msg = nl2br(l10n('Redirection...'));\n  }\n\n  $refresh = $refresh_time;\n  $url_link = $url;\n  $title = 'redirection';\n\n  $template->set_filenames( array( 'redirect' => 'redirect.tpl' ) );\n\n  include( PHPWG_ROOT_PATH.'include/page_header.php' );\n\n  $template->set_filenames( array( 'redirect' => 'redirect.tpl' ) );\n  $template->assign('REDIRECT_MSG', $msg);\n\n  $template->parse('redirect');\n\n  include( PHPWG_ROOT_PATH.'include/page_tail.php' );\n\n  exit();\n}\n\n/**\n * Redirects to the given URL (automatically choose HTTP or HTML method).\n * once this function called, the execution doesn't go further\n * (presence of an exit() instruction.\n *\n * @param string $url\n * @param string $msg\n * @param integer $refresh_time\n * @return void\n */\nfunction redirect( $url , $msg = '', $refresh_time = 0)\n{\n  global $conf;\n\n  // with RefeshTime <> 0, only html must be used\n  if ($conf['default_redirect_method']=='http'\n      and $refresh_time==0\n      and !headers_sent()\n    )\n  {\n    redirect_http($url);\n  }\n  else\n  {\n    redirect_html($url, $msg, $refresh_time);\n  }\n}\n\n/**\n * returns available themes\n *\n * @param bool $show_mobile\n * @return array\n */\nfunction get_pwg_themes($show_mobile=false)\n{\n  global $conf;\n\n  $themes = array();\n\n  $query = '\nSELECT\n    id,\n    name\n  FROM '.THEMES_TABLE.'\n  ORDER BY name ASC\n;';\n  $result = pwg_query($query);\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    if ($row['id'] == $conf['mobile_theme'])\n    {\n      if (!$show_mobile)\n      {\n        continue;\n      }\n      $row['name'] .= ' ('.l10n('Mobile').')';\n    }\n    if (check_theme_installed($row['id']))\n    {\n      $themes[ $row['id'] ] = $row['name'];\n    }\n  }\n\n  // plugins want remove some themes based on user status maybe?\n  $themes = trigger_change('get_pwg_themes', $themes);\n\n  return $themes;\n}\n\n/**\n * check if a theme is installed (directory exsists)\n *\n * @param string $theme_id\n * @return bool\n */\nfunction check_theme_installed($theme_id)\n{\n  global $conf;\n\n  return file_exists($conf['themes_dir'].'/'.$theme_id.'/'.'themeconf.inc.php');\n}\n\n/**\n * Transforms an original path to its pwg representative\n *\n * @param string $path\n * @param string $representative_ext\n * @return string\n */\nfunction original_to_representative($path, $representative_ext)\n{\n  $pos = strrpos($path, '/');\n  $path = substr_replace($path, 'pwg_representative/', $pos+1, 0);\n  $pos = strrpos($path, '.');\n  return substr_replace($path, $representative_ext, $pos+1);\n}\n\n/**\n * Transforms an original path to its format\n *\n * @param string $path\n * @param string $format_ext\n * @return string\n */\nfunction original_to_format($path, $format_ext)\n{\n  $pos = strrpos($path, '/');\n  $path = substr_replace($path, 'pwg_format/', $pos+1, 0);\n  $pos = strrpos($path, '.');\n  return substr_replace($path, $format_ext, $pos+1);\n}\n\n/**\n * get the full path of an image\n *\n * @param array $element_info element information from db (at least 'path')\n * @return string\n */\nfunction get_element_path($element_info)\n{\n  $path = $element_info['path'];\n  if ( !url_is_remote($path) )\n  {\n    $path = PHPWG_ROOT_PATH.$path;\n  }\n  return $path;\n}\n\n\n/**\n * fill the current user caddie with given elements, if not already in caddie\n *\n * @param int[] $elements_id\n */\nfunction fill_caddie($elements_id)\n{\n  global $user;\n\n  $query = '\nSELECT element_id\n  FROM '.CADDIE_TABLE.'\n  WHERE user_id = '.$user['id'].'\n;';\n  $in_caddie = query2array($query, null, 'element_id');\n\n  $caddiables = array_diff($elements_id, $in_caddie);\n\n  $datas = array();\n\n  foreach ($caddiables as $caddiable)\n  {\n    $datas[] = array(\n      'element_id' => $caddiable,\n      'user_id' => $user['id'],\n      );\n  }\n\n  if (count($caddiables) > 0)\n  {\n    mass_inserts(CADDIE_TABLE, array('element_id','user_id'), $datas);\n  }\n}\n\n/**\n * returns the element name from its filename.\n * removes file extension and replace underscores by spaces\n *\n * @param string $filename\n * @return string name\n */\nfunction get_name_from_file($filename)\n{\n  return str_replace('_',' ',get_filename_wo_extension($filename));\n}\n\n/**\n * translation function.\n * returns the corresponding value from _$lang_ if existing else the key is returned\n * if more than one parameter is provided sprintf is applied\n *\n * @param string $key\n * @param mixed $args,... optional arguments\n * @return string\n */\nfunction l10n($key)\n{\n  global $lang, $conf;\n\n  if ( ($val=@$lang[$key]) === null)\n  {\n    if ($conf['debug_l10n'] and !isset($lang[$key]) and !empty($key))\n    {\n      trigger_error('[l10n] language key \"'. $key .'\" not defined', E_USER_WARNING);\n    }\n    $val = $key;\n  }\n\n  if (func_num_args() > 1)\n  {\n    $args = func_get_args();\n    $val = vsprintf($val, array_slice($args, 1));\n  }\n\n  return $val;\n}\n\n/**\n * returns the printf value for strings including %d\n * returned value is concorded with decimal value (singular, plural)\n *\n * @param string $singular_key\n * @param string $plural_key\n * @param int $decimal\n * @return string\n */\nfunction l10n_dec($singular_key, $plural_key, $decimal)\n{\n  global $lang_info;\n\n  return\n    sprintf(\n      l10n((\n        (($decimal > 1) or ($decimal == 0 and $lang_info['zero_plural']))\n          ? $plural_key\n          : $singular_key\n        )), $decimal);\n}\n\n/**\n * returns a single element to use with l10n_args\n *\n * @param string $key translation key\n * @param mixed $args arguments to use on sprintf($key, args)\n *   if args is a array, each values are used on sprintf\n * @return string\n */\nfunction get_l10n_args($key, $args='')\n{\n  if (is_array($args))\n  {\n    $key_arg = array_merge(array($key), $args);\n  }\n  else\n  {\n    $key_arg = array($key,  $args);\n  }\n  return array('key_args' => $key_arg);\n}\n\n/**\n * returns a string formated with l10n elements.\n * it is usefull to \"prepare\" a text and translate it later\n * @see get_l10n_args()\n *\n * @param array $key_args one l10n_args element or array of l10n_args elements\n * @param string $sep used when translated elements are concatened\n * @return string\n */\nfunction l10n_args($key_args, $sep = \"\\n\")\n{\n  if (is_array($key_args))\n  {\n    foreach ($key_args as $key => $element)\n    {\n      if (isset($result))\n      {\n        $result .= $sep;\n      }\n      else\n      {\n        $result = '';\n      }\n\n      if ($key === 'key_args')\n      {\n        array_unshift($element, l10n(array_shift($element))); // translate the key\n        $result .= call_user_func_array('sprintf', $element);\n      }\n      else\n      {\n        $result .= l10n_args($element, $sep);\n      }\n    }\n  }\n  else\n  {\n    fatal_error('l10n_args: Invalid arguments');\n  }\n\n  return $result;\n}\n\n/**\n * returns the corresponding value from $themeconf if existing or an empty string\n *\n * @param string $key\n * @return string\n */\nfunction get_themeconf($key)\n{\n  return $GLOBALS['template']->get_themeconf($key);\n}\n\n/**\n * Returns webmaster mail address depending on $conf['webmaster_id']\n *\n * @return string\n */\nfunction get_webmaster_mail_address()\n{\n  global $conf;\n\n  $query = '\nSELECT '.$conf['user_fields']['email'].'\n  FROM '.USERS_TABLE.'\n  WHERE '.$conf['user_fields']['id'].' = '.$conf['webmaster_id'].'\n;';\n  list($email) = pwg_db_fetch_row(pwg_query($query));\n\n  $email = trigger_change('get_webmaster_mail_address', $email);\n\n  return $email;\n}\n\n/**\n * Add configuration parameters from database to global $conf array\n *\n * @param string $condition SQL condition\n * @return void\n */\nfunction load_conf_from_db($condition = '')\n{\n  global $conf;\n\n  $query = '\nSELECT param, value\n FROM '.CONFIG_TABLE.'\n '.(!empty($condition) ? 'WHERE '.$condition : '').'\n;';\n  $result = pwg_query($query);\n\n  if ((pwg_db_num_rows($result) == 0) and !empty($condition))\n  {\n    fatal_error('No configuration data');\n  }\n\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    $val = isset($row['value']) ? $row['value'] : '';\n    // If the field is true or false, the variable is transformed into a boolean value.\n    if ($val == 'true')\n    {\n      $val = true;\n    }\n    elseif ($val == 'false')\n    {\n      $val = false;\n    }\n    $conf[ $row['param'] ] = $val;\n  }\n\n  trigger_notify('load_conf', $condition);\n}\n\n/**\n * Add or update a config parameter\n *\n * @param string $param\n * @param string $value\n * @param boolean $updateGlobal update global *$conf* variable\n * @param callable $parser function to apply to the value before save in database\n      (eg: serialize, json_encode) will not be applied to *$conf* if *$parser* is *true*\n */\nfunction conf_update_param($param, $value, $updateGlobal=false, $parser=null)\n{\n  if ($parser != null)\n  {\n    $dbValue = call_user_func($parser, $value);\n  }\n  else if (is_array($value) || is_object($value))\n  {\n    $dbValue = addslashes(serialize($value));\n  }\n  else\n  {\n    $dbValue = boolean_to_string($value);\n  }\n\n  $query = '\nINSERT INTO\n  '.CONFIG_TABLE.' (param, value)\n  VALUES(\\''.$param.'\\', \\''.$dbValue.'\\')\n  ON DUPLICATE KEY UPDATE value = \\''.$dbValue.'\\'\n;';\n\n  pwg_query($query);\n\n  if ($updateGlobal)\n  {\n    global $conf;\n    $conf[$param] = $value;\n  }\n}\n\n/**\n * Delete one or more config parameters\n * @since 2.6\n *\n * @param string|string[] $params\n */\nfunction conf_delete_param($params)\n{\n  global $conf;\n\n  if (!is_array($params))\n  {\n    $params = array($params);\n  }\n  if (empty($params))\n  {\n    return;\n  }\n\n  $query = '\nDELETE FROM '.CONFIG_TABLE.'\n  WHERE param IN(\\''. implode('\\',\\'', $params) .'\\')\n;';\n  pwg_query($query);\n\n  foreach ($params as $param)\n  {\n    unset($conf[$param]);\n  }\n}\n\n/**\n * Return a default value for a configuration parameter.\n * @since 2.8\n *\n * @param string $param the configuration value to be extracted (if it exists)\n * @param mixed $default_value the default value for the configuration value if it does not exist.\n *\n * @return mixed The configuration value if the variable exists, otherwise the default.\n */\nfunction conf_get_param($param, $default_value=null)\n{\n  global $conf;\n  \n  if (isset($conf[$param]))\n  {\n    return $conf[$param];\n  }\n  return $default_value;\n}\n\n\n/**\n * Apply *unserialize* on a value only if it is a string\n * @since 2.7\n *\n * @param array|string $value\n * @return array\n */\nfunction safe_unserialize($value)\n{\n  if (is_string($value))\n  {\n    return unserialize($value);\n  }\n  return $value;\n}\n\n/**\n * Apply *json_decode* on a value only if it is a string\n * @since 2.7\n *\n * @param array|string $value\n * @return array\n */\nfunction safe_json_decode($value)\n{\n  if (is_string($value))\n  {\n    return json_decode($value, true);\n  }\n  return $value;\n}\n\n/**\n * Prepends and appends strings at each value of the given array.\n *\n * @param array $array\n * @param string $prepend_str\n * @param string $append_str\n * @return array\n */\nfunction prepend_append_array_items($array, $prepend_str, $append_str)\n{\n  array_walk($array, function(&$value, $key) use($prepend_str,$append_str) { $value = \"$prepend_str$value$append_str\"; } );\n  return $array;\n}\n\n/**\n * creates an simple hashmap based on a SQL query.\n * choose one to be the key, another one to be the value.\n * @deprecated 2.6\n *\n * @param string $query\n * @param string $keyname\n * @param string $valuename\n * @return array\n */\nfunction simple_hash_from_query($query, $keyname, $valuename)\n{\n\treturn query2array($query, $keyname, $valuename);\n}\n\n/**\n * creates an associative array based on a SQL query.\n * choose one to be the key\n * @deprecated 2.6\n *\n * @param string $query\n * @param string $keyname\n * @return array\n */\nfunction hash_from_query($query, $keyname)\n{\n\treturn query2array($query, $keyname);\n}\n\n/**\n * creates a numeric array based on a SQL query.\n * if _$fieldname_ is empty the returned value will be an array of arrays\n * if _$fieldname_ is provided the returned value will be a one dimension array\n * @deprecated 2.6\n *\n * @param string $query\n * @param string $fieldname\n * @return array\n */\nfunction array_from_query($query, $fieldname=false)\n{\n  if (false === $fieldname)\n  {\n\t\treturn query2array($query);\n  }\n  else\n  {\n\t\treturn query2array($query, null, $fieldname);\n  }\n}\n\n/**\n * Return the basename of the current script.\n * The lowercase case filename of the current script without extension\n *\n * @return string\n */\nfunction script_basename()\n{\n  global $conf;\n\n  foreach (array('SCRIPT_NAME', 'SCRIPT_FILENAME', 'PHP_SELF') as $value)\n  {\n    if (!empty($_SERVER[$value]))\n    {\n      $filename = strtolower($_SERVER[$value]);\n      if ($conf['php_extension_in_urls'] and get_extension($filename)!=='php')\n        continue;\n      $basename = basename($filename, '.php');\n      if (!empty($basename))\n      {\n        return $basename;\n      }\n    }\n  }\n  return '';\n}\n\n/**\n * Return $conf['filter_pages'] value for the current page\n *\n * @param string $value_name\n * @return mixed\n */\nfunction get_filter_page_value($value_name)\n{\n  global $conf;\n\n  $page_name = script_basename();\n\n  if (isset($conf['filter_pages'][$page_name][$value_name]))\n  {\n    return $conf['filter_pages'][$page_name][$value_name];\n  }\n  elseif (isset($conf['filter_pages']['default'][$value_name]))\n  {\n    return $conf['filter_pages']['default'][$value_name];\n  }\n  else\n  {\n    return null;\n  }\n}\n\n/**\n * return the character set used by Piwigo\n * @return string\n */\nfunction get_pwg_charset()\n{\n  $pwg_charset = 'utf-8';\n  if (defined('PWG_CHARSET'))\n  {\n    $pwg_charset = PWG_CHARSET;\n  }\n  return $pwg_charset;\n}\n\n/**\n * returns the parent (fallback) language of a language.\n * if _$lang_id_ is null it applies to the current language\n * @since 2.6\n *\n * @param string $lang_id\n * @return string|null\n */\nfunction get_parent_language($lang_id=null)\n{\n  if (empty($lang_id))\n  {\n    global $lang_info;\n    return !empty($lang_info['parent']) ? $lang_info['parent'] : null;\n  }\n  else\n  {\n    $f = PHPWG_ROOT_PATH.'language/'.$lang_id.'/common.lang.php';\n    if (file_exists($f))\n    {\n      include($f);\n      return !empty($lang_info['parent']) ? $lang_info['parent'] : null;\n    }\n  }\n  return null;\n}\n\n/**\n * includes a language file or returns the content of a language file\n *\n * tries to load in descending order:\n *   param language, user language, default language\n *\n * @param string $filename\n * @param string $dirname\n * @param mixed options can contain\n *     @option string language - language to load\n *     @option bool return - if true the file content is returned\n *     @option bool no_fallback - if true do not load default language\n *     @option bool|string force_fallback - force pre-loading of another language\n *        default language if *true* or specified language\n *     @option bool local - if true load file from local directory\n * @return boolean|string\n */\nfunction load_language($filename, $dirname = '', $options = array())\n{\n  global $user, $language_files;\n\n  // keep trace of plugins loaded files for switch_lang_to() function\n  if (!empty($dirname) && !empty($filename) && !@$options['return']\n    && !isset($language_files[$dirname][$filename]))\n  {\n    $language_files[$dirname][$filename] = $options;\n  }\n\n  if (!@$options['return'])\n  {\n    $filename .= '.php';\n  }\n  if (empty($dirname))\n  {\n    $dirname = PHPWG_ROOT_PATH;\n  }\n  $dirname .= 'language/';\n\n  $default_language = (defined('PHPWG_INSTALLED') and !defined('UPGRADES_PATH')) ?\n      get_default_language() : PHPWG_DEFAULT_LANGUAGE;\n\n  // construct list of potential languages\n  $languages = array();\n  if (!empty($options['language']))\n  { // explicit language\n    $languages[] = $options['language'];\n  }\n  if (!empty($user['language']))\n  { // use language\n    $languages[] = $user['language'];\n  }\n  if (($parent = get_parent_language()) != null)\n  { // parent language\n    // this is only for when the \"child\" language is missing\n    $languages[] = $parent;\n  }\n  if (isset($options['force_fallback']))\n  { // fallback language\n    // this is only for when the main language is missing\n    if ($options['force_fallback'] === true)\n    {\n      $options['force_fallback'] = $default_language;\n    }\n    $languages[] = $options['force_fallback'];\n  }\n  if (!@$options['no_fallback'])\n  { // default language\n    $languages[] = $default_language;\n  }\n\n  $languages = array_unique($languages);\n\n  // find first existing\n  $source_file       = '';\n  $selected_language = '';\n  foreach ($languages as $language)\n  {\n    $f = @$options['local'] ?\n      $dirname.$language.'.'.$filename:\n      $dirname.$language.'/'.$filename;\n\n    if (file_exists($f))\n    {\n      $selected_language = $language;\n      $source_file = $f;\n      break;\n    }\n  }\n  \n  if (!empty($source_file))\n  {\n    if (!@$options['return'])\n    {\n      // load forced fallback\n      if (isset($options['force_fallback']) && $options['force_fallback'] != $selected_language)\n      {\n        @include(str_replace($selected_language, $options['force_fallback'], $source_file));\n      }\n\n      // load language content\n      @include($source_file);\n      $load_lang = @$lang;\n      $load_lang_info = @$lang_info;\n\n      // access already existing values\n      global $lang, $lang_info;\n      if (!isset($lang)) $lang = array();\n      if (!isset($lang_info)) $lang_info = array();\n\n      // load parent language content directly in global\n      if (!empty($load_lang_info['parent']))\n        $parent_language = $load_lang_info['parent'];\n      else if (!empty($lang_info['parent']))\n        $parent_language = $lang_info['parent'];\n      else \n        $parent_language = null;\n\n      if (!empty($parent_language) && $parent_language != $selected_language)\n      {\n        @include(str_replace($selected_language, $parent_language, $source_file));\n      }\n\n      // merge contents\n      $lang = array_merge($lang, (array)$load_lang);\n      $lang_info = array_merge($lang_info, (array)$load_lang_info);\n      return true;\n    }\n    else\n    {\n      $content = @file_get_contents($source_file);\n      //Note: target charset is always utf-8 $content = convert_charset($content, 'utf-8', $target_charset);\n      return $content;\n    }\n  }\n\n  return false;\n}\n\n/**\n * converts a string from a character set to another character set\n *\n * @param string $str\n * @param string $source_charset\n * @param string $dest_charset\n */\nfunction convert_charset($str, $source_charset, $dest_charset)\n{\n  if ($source_charset==$dest_charset)\n    return $str;\n  if ($source_charset=='iso-8859-1' and $dest_charset=='utf-8')\n  {\n    return utf8_encode($str);\n  }\n  if ($source_charset=='utf-8' and $dest_charset=='iso-8859-1')\n  {\n    return utf8_decode($str);\n  }\n  if (function_exists('iconv'))\n  {\n    return iconv($source_charset, $dest_charset.'//TRANSLIT', $str);\n  }\n  if (function_exists('mb_convert_encoding'))\n  {\n    return mb_convert_encoding( $str, $dest_charset, $source_charset );\n  }\n  return $str; // TODO\n}\n\n/**\n * makes sure a index.htm protects the directory from browser file listing\n *\n * @param string $dir\n */\nfunction secure_directory($dir)\n{\n  $file = $dir.'/index.htm';\n  if (!file_exists($file))\n  {\n    @file_put_contents($file, 'Not allowed!');\n  }\n}\n\n/**\n * returns a \"secret key\" that is to be sent back when a user posts a form\n *\n * @param int $valid_after_seconds - key validity start time from now\n * @param string $aditionnal_data_to_hash\n * @return string\n */\nfunction get_ephemeral_key($valid_after_seconds, $aditionnal_data_to_hash = '')\n{\n\tglobal $conf;\n\t$time = round(microtime(true), 1);\n\treturn $time.':'.$valid_after_seconds.':'\n\t\t.hash_hmac(\n\t\t\t'md5',\n\t\t\t$time.substr($_SERVER['REMOTE_ADDR'],0,5).$valid_after_seconds.$aditionnal_data_to_hash,\n\t\t\t$conf['secret_key']);\n}\n\n/**\n * verify a key sent back with a form\n *\n * @param string $key\n * @param string $aditionnal_data_to_hash\n * @return bool\n */\nfunction verify_ephemeral_key($key, $aditionnal_data_to_hash = '')\n{\n\tglobal $conf;\n\t$time = microtime(true);\n\t$key = explode( ':', @$key );\n\tif ( count($key)!=3\n\t\tor $key[0]>$time-(float)$key[1] // page must have been retrieved more than X sec ago\n\t\tor $key[0]<$time-3600 // 60 minutes expiration\n\t\tor hash_hmac(\n\t\t\t  'md5', $key[0].substr($_SERVER['REMOTE_ADDR'],0,5).$key[1].$aditionnal_data_to_hash, $conf['secret_key']\n\t\t\t) != $key[2]\n\t  )\n\t{\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * return an array which will be sent to template to display navigation bar\n *\n * @param string $url base url of all links\n * @param int $nb_elements\n * @param int $start\n * @param int $nb_element_page\n * @param bool $clean_url\n * @param string $param_name\n * @return array\n */\nfunction create_navigation_bar($url, $nb_element, $start, $nb_element_page, $clean_url = false, $param_name='start')\n{\n  global $conf;\n\n  $navbar = array();\n  $pages_around = $conf['paginate_pages_around'];\n  $start_str = $clean_url ? '/'.$param_name.'-' : (strpos($url, '?')===false ? '?':'&amp;').$param_name.'=';\n\n  if (!isset($start) or !is_numeric($start) or (is_numeric($start) and $start < 0))\n  {\n    $start = 0;\n  }\n\n  // navigation bar useful only if more than one page to display !\n  if ($nb_element > $nb_element_page)\n  {\n    $url_start = $url.$start_str;\n\n    $cur_page = $navbar['CURRENT_PAGE'] = $start / $nb_element_page + 1;\n    $maximum = ceil($nb_element / $nb_element_page);\n\n    $start = $nb_element_page * round( $start / $nb_element_page );\n    $previous = $start - $nb_element_page;\n    $next = $start + $nb_element_page;\n    $last = ($maximum - 1) * $nb_element_page;\n\n    // link to first page and previous page?\n    if ($cur_page != 1)\n    {\n      $navbar['URL_FIRST'] = $url;\n      $navbar['URL_PREV'] = $previous > 0 ? $url_start.$previous : $url;\n    }\n    // link on next page and last page?\n    if ($cur_page != $maximum)\n    {\n      $navbar['URL_NEXT'] = $url_start.($next < $last ? $next : $last);\n      $navbar['URL_LAST'] = $url_start.$last;\n    }\n\n    // pages to display\n    $navbar['pages'] = array();\n    $navbar['pages'][1] = $url;\n    for ($i = max( floor($cur_page) - $pages_around , 2), $stop = min( ceil($cur_page) + $pages_around + 1, $maximum);\n         $i < $stop; $i++)\n    {\n      $navbar['pages'][$i] = $url.$start_str.(($i - 1) * $nb_element_page);\n    }\n    $navbar['pages'][$maximum] = $url_start.$last;\n    $navbar['NB_PAGE']=$maximum;\n  }\n  return $navbar;\n}\n\n/**\n * return an array which will be sent to template to display recent icon\n *\n * @param string $date\n * @param bool $is_child_date\n * @return array\n */\nfunction get_icon($date, $is_child_date = false)\n{\n  global $cache, $user;\n\n  if (empty($date))\n  {\n    return false;\n  }\n\n  if (!isset($cache['get_icon']['title']))\n  {\n    $cache['get_icon']['title'] = l10n(\n      'photos posted during the last %d days',\n      $user['recent_period']\n      );\n  }\n\n  $icon = array(\n    'TITLE' => $cache['get_icon']['title'],\n    'IS_CHILD_DATE' => $is_child_date,\n    );\n\n  if (isset($cache['get_icon'][$date]))\n  {\n    return $cache['get_icon'][$date] ? $icon : array();\n  }\n\n  if (!isset($cache['get_icon']['sql_recent_date']))\n  {\n    // Use MySql date in order to standardize all recent \"actions/queries\"\n    $cache['get_icon']['sql_recent_date'] = pwg_db_get_recent_period($user['recent_period']);\n  }\n\n  $cache['get_icon'][$date] = $date > $cache['get_icon']['sql_recent_date'];\n\n  return $cache['get_icon'][$date] ? $icon : array();\n}\n\n/**\n * check token comming from form posted or get params to prevent csrf attacks.\n * if pwg_token is empty action doesn't require token\n * else pwg_token is compare to server token\n *\n * @return void access denied if token given is not equal to server token\n */\nfunction check_pwg_token()\n{\n  if (!empty($_REQUEST['pwg_token']))\n  {\n    if (get_pwg_token() != $_REQUEST['pwg_token'])\n    {\n      access_denied();\n    }\n  }\n  else\n  {\n    bad_request('missing token');\n  }\n}\n\n/**\n * get pwg_token used to prevent csrf attacks\n *\n * @return string\n */\nfunction get_pwg_token()\n{\n  global $conf;\n\n  return hash_hmac('md5', session_id(), $conf['secret_key']);\n}\n\n/*\n * breaks the script execution if the given value doesn't match the given\n * pattern. This should happen only during hacking attempts.\n *\n * @param string $param_name\n * @param array $param_array\n * @param boolean $is_array\n * @param string $pattern\n * @param boolean $mandatory\n */\nfunction check_input_parameter($param_name, $param_array, $is_array, $pattern, $mandatory=false)\n{\n  $param_value = null;\n  if (isset($param_array[$param_name]))\n  {\n    $param_value = $param_array[$param_name];\n  }\n\n  // it's ok if the input parameter is null\n  if (empty($param_value))\n  {\n    if ($mandatory)\n    {\n      fatal_error('[Hacking attempt] the input parameter \"'.$param_name.'\" is not valid');\n    }\n    return true;\n  }\n\n  if ($is_array)\n  {\n    if (!is_array($param_value))\n    {\n      fatal_error('[Hacking attempt] the input parameter \"'.$param_name.'\" should be an array');\n    }\n\n    foreach ($param_value as $key => $item_to_check)\n    {\n      if (!preg_match(PATTERN_ID, $key) or !preg_match($pattern, $item_to_check))\n      {\n        fatal_error('[Hacking attempt] an item is not valid in input parameter \"'.$param_name.'\"');\n      }\n    }\n  }\n  else\n  {\n    if (!preg_match($pattern, $param_value))\n    {\n      fatal_error('[Hacking attempt] the input parameter \"'.$param_name.'\" is not valid');\n    }\n  }\n}\n\n/**\n * get localized privacy level values\n *\n * @return string[]\n */\nfunction get_privacy_level_options()\n{\n  global $conf;\n\n  $options = array();\n  $label = '';\n  foreach (array_reverse($conf['available_permission_levels']) as $level)\n  {\n    if (0 == $level)\n    {\n      $label = l10n('Everybody');\n    }\n    else\n    {\n      if (strlen($label))\n      {\n        $label .= ', ';\n      }\n      $label .= l10n( sprintf('Level %d', $level) );\n    }\n    $options[$level] = $label;\n  }\n  return $options;\n}\n\n\n/**\n * return the branch from the version. For example version 11.1.2 is on branch 11\n *\n * @param string $version\n * @return string\n */\nfunction get_branch_from_version($version)\n{\n  // the algorithm is a bit complicated to just retrieve the first digits before\n  // the first \".\". It's because before version 11.0.0, we used to take the 2 first\n  // digits, ie version 2.2.4 was on branch 2.2\n  return implode('.', array_slice(explode('.', $version), 0, 1));\n}\n\n/**\n * return the device type: mobile, tablet or desktop\n *\n * @return string\n */\nfunction get_device()\n{\n  $device = pwg_get_session_var('device');\n\n  if (is_null($device))\n  {\n    include_once(PHPWG_ROOT_PATH.'include/mdetect.php');\n    $uagent_obj = new uagent_info();\n    if ($uagent_obj->DetectSmartphone())\n    {\n      $device = 'mobile';\n    }\n    elseif ($uagent_obj->DetectTierTablet())\n    {\n      $device = 'tablet';\n    }\n    else\n    {\n      $device = 'desktop';\n    }\n    pwg_set_session_var('device', $device);\n  }\n\n  return $device;\n}\n\n/**\n * return true if mobile theme should be loaded\n *\n * @return bool\n */\nfunction mobile_theme()\n{\n  global $conf;\n\n  if (empty($conf['mobile_theme']))\n  {\n    return false;\n  }\n\n  if (isset($_GET['mobile']))\n  {\n    $is_mobile_theme = get_boolean($_GET['mobile']);\n    pwg_set_session_var('mobile_theme', $is_mobile_theme);\n  }\n  else\n  {\n    $is_mobile_theme = pwg_get_session_var('mobile_theme');\n  }\n\n  if (is_null($is_mobile_theme))\n  {\n    $is_mobile_theme = (get_device() == 'mobile');\n    pwg_set_session_var('mobile_theme', $is_mobile_theme);\n  }\n\n  return $is_mobile_theme;\n}\n\n/**\n * check url format\n *\n * @param string $url\n * @return bool\n */\nfunction url_check_format($url)\n{\n  if (strpos($url, '\"') !== false)\n  {\n    return false;\n  }\n\n  if (strncmp($url, 'http://', 7) !== 0 and strncmp($url, 'https://', 8) !== 0)\n  {\n    return false;\n  }\n\n  return filter_var($url, FILTER_VALIDATE_URL)!==false;\n}\n\n/**\n * check email format\n *\n * @param string $mail_address\n * @return bool\n */\nfunction email_check_format($mail_address)\n{\n  return filter_var($mail_address, FILTER_VALIDATE_EMAIL)!==false;\n}\n\n/**\n * returns the number of available comments for the connected user\n *\n * @return int\n */\nfunction get_nb_available_comments()\n{\n  global $user;\n  if (!isset($user['nb_available_comments']))\n  {\n    $where = array();\n    if ( !is_admin() )\n      $where[] = 'validated=\\'true\\'';\n    $where[] = get_sql_condition_FandF\n      (\n        array\n          (\n            'forbidden_categories' => 'category_id',\n            'forbidden_images' => 'ic.image_id'\n          ),\n        '', true\n      );\n\n    $query = '\nSELECT COUNT(DISTINCT(com.id))\n  FROM '.IMAGE_CATEGORY_TABLE.' AS ic\n    INNER JOIN '.COMMENTS_TABLE.' AS com\n    ON ic.image_id = com.image_id\n  WHERE '.implode('\n    AND ', $where);\n    list($user['nb_available_comments']) = pwg_db_fetch_row(pwg_query($query));\n\n    single_update(USER_CACHE_TABLE,\n      array('nb_available_comments'=>$user['nb_available_comments']),\n      array('user_id'=>$user['id'])\n      );\n  }\n  return $user['nb_available_comments'];\n}\n\n/**\n * Compare two versions with version_compare after having converted\n * single chars to their decimal values.\n * Needed because version_compare does not understand versions like '2.5.c'.\n * @since 2.6\n *\n * @param string $a\n * @param string $b\n * @param string $op\n */\nfunction safe_version_compare($a, $b, $op=null)\n{\n  $replace_chars   = function($m)  { return ord(strtolower($m[1])); };\n\n  // add dot before groups of letters (version_compare does the same thing)\n  $a = preg_replace('#([0-9]+)([a-z]+)#i', '$1.$2', $a);\n  $b = preg_replace('#([0-9]+)([a-z]+)#i', '$1.$2', $b);\n\n  // apply ord() to any single letter\n  $a = preg_replace_callback('#\\b([a-z]{1})\\b#i', $replace_chars, $a);\n  $b = preg_replace_callback('#\\b([a-z]{1})\\b#i', $replace_chars, $b);\n\n  if (empty($op))\n  {\n    return version_compare($a, $b);\n  }\n  else\n  {\n    return version_compare($a, $b, $op);\n  }\n}\n\n/**\n * Checks if the lounge needs to be emptied automatically.\n *\n * @since 12\n */\nfunction check_lounge()\n{\n  global $conf;\n\n  if (!isset($conf['lounge_active']) or !$conf['lounge_active'])\n  {\n    return;\n  }\n\n  if (isset($_REQUEST['method']) and in_array($_REQUEST['method'], array('pwg.images.upload', 'pwg.images.uploadAsync')))\n  {\n    return;\n  }\n\n  // is the oldest photo in the lounge older than lounge maximum waiting time?\n  $query = '\nSELECT\n    image_id,\n    date_available,\n    NOW() AS dbnow\n  FROM '.LOUNGE_TABLE.'\n    JOIN '.IMAGES_TABLE.' ON image_id = id\n  ORDER BY image_id ASC\n  LIMIT 1\n;';\n  $voyagers = query2array($query);\n  if (count($voyagers))\n  {\n    $voyager = $voyagers[0];\n    $age = strtotime($voyager['dbnow']) - strtotime($voyager['date_available']);\n\n    if ($age > $conf['lounge_max_duration'])\n    {\n      include_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\n      empty_lounge();\n    }\n  }\n}\n\n?>\n"], "fixing_code": ["<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n/**\n * @package functions\\___\n */\n\ninclude_once( PHPWG_ROOT_PATH .'include/functions_plugins.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_user.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_cookie.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_session.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_category.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_html.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_tag.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/functions_url.inc.php' );\ninclude_once( PHPWG_ROOT_PATH .'include/derivative_params.inc.php');\ninclude_once( PHPWG_ROOT_PATH .'include/derivative_std_params.inc.php');\ninclude_once( PHPWG_ROOT_PATH .'include/derivative.inc.php');\n\n\n/**\n * returns the current microsecond since Unix epoch\n *\n * @return int\n */\nfunction micro_seconds()\n{\n  $t1 = explode(' ', microtime());\n  $t2 = explode('.', $t1[0]);\n  $t2 = $t1[1].substr($t2[1], 0, 6);\n  return $t2;\n}\n\n/**\n * returns a float value coresponding to the number of seconds since\n * the unix epoch (1st January 1970) and the microseconds are precised\n * e.g. 1052343429.89276600\n *\n * @return float\n */\nfunction get_moment()\n{\n  return microtime(true);\n}\n\n/**\n * returns the number of seconds (with 3 decimals precision)\n * between the start time and the end time given\n *\n * @param float $start\n * @param float $end\n * @return string \"$TIME s\"\n */\nfunction get_elapsed_time($start, $end)\n{\n  return number_format($end - $start, 3, '.', ' ').' s';\n}\n\n/**\n * returns the part of the string after the last \".\"\n *\n * @param string $filename\n * @return string\n */\nfunction get_extension( $filename )\n{\n  return substr( strrchr( $filename, '.' ), 1, strlen ( $filename ) );\n}\n\n/**\n * returns the part of the string before the last \".\".\n * get_filename_wo_extension( 'test.tar.gz' ) = 'test.tar'\n *\n * @param string $filename\n * @return string\n */\nfunction get_filename_wo_extension( $filename )\n{\n  $pos = strrpos( $filename, '.' );\n  return ($pos===false) ? $filename : substr( $filename, 0, $pos);\n}\n\n/** no option for mkgetdir() */\ndefine('MKGETDIR_NONE', 0);\n/** sets mkgetdir() recursive */\ndefine('MKGETDIR_RECURSIVE', 1);\n/** sets mkgetdir() exit script on error */\ndefine('MKGETDIR_DIE_ON_ERROR', 2);\n/** sets mkgetdir() add a index.htm file */\ndefine('MKGETDIR_PROTECT_INDEX', 4);\n/** sets mkgetdir() add a .htaccess file*/\ndefine('MKGETDIR_PROTECT_HTACCESS', 8);\n/** default options for mkgetdir() = MKGETDIR_RECURSIVE | MKGETDIR_DIE_ON_ERROR | MKGETDIR_PROTECT_INDEX */\ndefine('MKGETDIR_DEFAULT', MKGETDIR_RECURSIVE | MKGETDIR_DIE_ON_ERROR | MKGETDIR_PROTECT_INDEX);\n\n/**\n * creates directory if not exists and ensures that directory is writable\n *\n * @param string $dir\n * @param int $flags combination of MKGETDIR_xxx\n * @return bool\n */\nfunction mkgetdir($dir, $flags=MKGETDIR_DEFAULT)\n{\n  if ( !is_dir($dir) )\n  {\n    global $conf;\n    if (substr(PHP_OS, 0, 3) == 'WIN')\n    {\n      $dir = str_replace('/', DIRECTORY_SEPARATOR, $dir);\n    }\n    $umask = umask(0);\n    $mkd = @mkdir($dir, $conf['chmod_value'], ($flags&MKGETDIR_RECURSIVE) ? true:false );\n    umask($umask);\n    if ($mkd==false)\n    {\n      !($flags&MKGETDIR_DIE_ON_ERROR) or fatal_error( \"$dir \".l10n('no write access'));\n      return false;\n    }\n    if( $flags&MKGETDIR_PROTECT_HTACCESS )\n    {\n      $file = $dir.'/.htaccess';\n      file_exists($file) or @file_put_contents( $file, 'deny from all' );\n    }\n    if( $flags&MKGETDIR_PROTECT_INDEX )\n    {\n      $file = $dir.'/index.htm';\n      file_exists($file) or @file_put_contents( $file, 'Not allowed!' );\n    }\n  }\n  if ( !is_writable($dir) )\n  {\n    !($flags&MKGETDIR_DIE_ON_ERROR) or fatal_error( \"$dir \".l10n('no write access'));\n    return false;\n  }\n  return true;\n}\n\n/**\n * finds out if a string is in ASCII, UTF-8 or other encoding\n *\n * @param string $str\n * @return int *0* if _$str_ is ASCII, *1* if UTF-8, *-1* otherwise\n */\nfunction qualify_utf8($Str)\n{\n  $ret = 0;\n  for ($i=0; $i<strlen($Str); $i++)\n  {\n    if (ord($Str[$i]) < 0x80) continue; # 0bbbbbbb\n    $ret = 1;\n    if ((ord($Str[$i]) & 0xE0) == 0xC0) $n=1; # 110bbbbb\n    elseif ((ord($Str[$i]) & 0xF0) == 0xE0) $n=2; # 1110bbbb\n    elseif ((ord($Str[$i]) & 0xF8) == 0xF0) $n=3; # 11110bbb\n    elseif ((ord($Str[$i]) & 0xFC) == 0xF8) $n=4; # 111110bb\n    elseif ((ord($Str[$i]) & 0xFE) == 0xFC) $n=5; # 1111110b\n    else return -1; # Does not match any model\n    for ($j=0; $j<$n; $j++)\n    { # n bytes matching 10bbbbbb follow ?\n      if ((++$i == strlen($Str)) || ((ord($Str[$i]) & 0xC0) != 0x80))\n        return -1;\n    }\n  }\n  return $ret;\n}\n\n/**\n * Remove accents from a UTF-8 or ISO-8859-1 string (from wordpress)\n *\n * @param string $string\n * @return string\n */\nfunction remove_accents($string)\n{\n  $utf = qualify_utf8($string);\n  if ( $utf == 0 )\n  {\n    return $string; // ascii\n  }\n\n  if ( $utf > 0 )\n  {\n    $chars = array(\n    // Decompositions for Latin-1 Supplement\n    \"\\xc3\\x80\"=>'A', \"\\xc3\\x81\"=>'A',\n    \"\\xc3\\x82\"=>'A', \"\\xc3\\x83\"=>'A',\n    \"\\xc3\\x84\"=>'A', \"\\xc3\\x85\"=>'A',\n    \"\\xc3\\x87\"=>'C', \"\\xc3\\x88\"=>'E',\n    \"\\xc3\\x89\"=>'E', \"\\xc3\\x8a\"=>'E',\n    \"\\xc3\\x8b\"=>'E', \"\\xc3\\x8c\"=>'I',\n    \"\\xc3\\x8d\"=>'I', \"\\xc3\\x8e\"=>'I',\n    \"\\xc3\\x8f\"=>'I', \"\\xc3\\x91\"=>'N',\n    \"\\xc3\\x92\"=>'O', \"\\xc3\\x93\"=>'O',\n    \"\\xc3\\x94\"=>'O', \"\\xc3\\x95\"=>'O',\n    \"\\xc3\\x96\"=>'O', \"\\xc3\\x99\"=>'U',\n    \"\\xc3\\x9a\"=>'U', \"\\xc3\\x9b\"=>'U',\n    \"\\xc3\\x9c\"=>'U', \"\\xc3\\x9d\"=>'Y',\n    \"\\xc3\\x9f\"=>'s', \"\\xc3\\xa0\"=>'a',\n    \"\\xc3\\xa1\"=>'a', \"\\xc3\\xa2\"=>'a',\n    \"\\xc3\\xa3\"=>'a', \"\\xc3\\xa4\"=>'a',\n    \"\\xc3\\xa5\"=>'a', \"\\xc3\\xa7\"=>'c',\n    \"\\xc3\\xa8\"=>'e', \"\\xc3\\xa9\"=>'e',\n    \"\\xc3\\xaa\"=>'e', \"\\xc3\\xab\"=>'e',\n    \"\\xc3\\xac\"=>'i', \"\\xc3\\xad\"=>'i',\n    \"\\xc3\\xae\"=>'i', \"\\xc3\\xaf\"=>'i',\n    \"\\xc3\\xb1\"=>'n', \"\\xc3\\xb2\"=>'o',\n    \"\\xc3\\xb3\"=>'o', \"\\xc3\\xb4\"=>'o',\n    \"\\xc3\\xb5\"=>'o', \"\\xc3\\xb6\"=>'o',\n    \"\\xc3\\xb9\"=>'u', \"\\xc3\\xba\"=>'u',\n    \"\\xc3\\xbb\"=>'u', \"\\xc3\\xbc\"=>'u',\n    \"\\xc3\\xbd\"=>'y', \"\\xc3\\xbf\"=>'y',\n    // Decompositions for Latin Extended-A\n    \"\\xc4\\x80\"=>'A', \"\\xc4\\x81\"=>'a',\n    \"\\xc4\\x82\"=>'A', \"\\xc4\\x83\"=>'a',\n    \"\\xc4\\x84\"=>'A', \"\\xc4\\x85\"=>'a',\n    \"\\xc4\\x86\"=>'C', \"\\xc4\\x87\"=>'c',\n    \"\\xc4\\x88\"=>'C', \"\\xc4\\x89\"=>'c',\n    \"\\xc4\\x8a\"=>'C', \"\\xc4\\x8b\"=>'c',\n    \"\\xc4\\x8c\"=>'C', \"\\xc4\\x8d\"=>'c',\n    \"\\xc4\\x8e\"=>'D', \"\\xc4\\x8f\"=>'d',\n    \"\\xc4\\x90\"=>'D', \"\\xc4\\x91\"=>'d',\n    \"\\xc4\\x92\"=>'E', \"\\xc4\\x93\"=>'e',\n    \"\\xc4\\x94\"=>'E', \"\\xc4\\x95\"=>'e',\n    \"\\xc4\\x96\"=>'E', \"\\xc4\\x97\"=>'e',\n    \"\\xc4\\x98\"=>'E', \"\\xc4\\x99\"=>'e',\n    \"\\xc4\\x9a\"=>'E', \"\\xc4\\x9b\"=>'e',\n    \"\\xc4\\x9c\"=>'G', \"\\xc4\\x9d\"=>'g',\n    \"\\xc4\\x9e\"=>'G', \"\\xc4\\x9f\"=>'g',\n    \"\\xc4\\xa0\"=>'G', \"\\xc4\\xa1\"=>'g',\n    \"\\xc4\\xa2\"=>'G', \"\\xc4\\xa3\"=>'g',\n    \"\\xc4\\xa4\"=>'H', \"\\xc4\\xa5\"=>'h',\n    \"\\xc4\\xa6\"=>'H', \"\\xc4\\xa7\"=>'h',\n    \"\\xc4\\xa8\"=>'I', \"\\xc4\\xa9\"=>'i',\n    \"\\xc4\\xaa\"=>'I', \"\\xc4\\xab\"=>'i',\n    \"\\xc4\\xac\"=>'I', \"\\xc4\\xad\"=>'i',\n    \"\\xc4\\xae\"=>'I', \"\\xc4\\xaf\"=>'i',\n    \"\\xc4\\xb0\"=>'I', \"\\xc4\\xb1\"=>'i',\n    \"\\xc4\\xb2\"=>'IJ', \"\\xc4\\xb3\"=>'ij',\n    \"\\xc4\\xb4\"=>'J', \"\\xc4\\xb5\"=>'j',\n    \"\\xc4\\xb6\"=>'K', \"\\xc4\\xb7\"=>'k',\n    \"\\xc4\\xb8\"=>'k', \"\\xc4\\xb9\"=>'L',\n    \"\\xc4\\xba\"=>'l', \"\\xc4\\xbb\"=>'L',\n    \"\\xc4\\xbc\"=>'l', \"\\xc4\\xbd\"=>'L',\n    \"\\xc4\\xbe\"=>'l', \"\\xc4\\xbf\"=>'L',\n    \"\\xc5\\x80\"=>'l', \"\\xc5\\x81\"=>'L',\n    \"\\xc5\\x82\"=>'l', \"\\xc5\\x83\"=>'N',\n    \"\\xc5\\x84\"=>'n', \"\\xc5\\x85\"=>'N',\n    \"\\xc5\\x86\"=>'n', \"\\xc5\\x87\"=>'N',\n    \"\\xc5\\x88\"=>'n', \"\\xc5\\x89\"=>'N',\n    \"\\xc5\\x8a\"=>'n', \"\\xc5\\x8b\"=>'N',\n    \"\\xc5\\x8c\"=>'O', \"\\xc5\\x8d\"=>'o',\n    \"\\xc5\\x8e\"=>'O', \"\\xc5\\x8f\"=>'o',\n    \"\\xc5\\x90\"=>'O', \"\\xc5\\x91\"=>'o',\n    \"\\xc5\\x92\"=>'OE', \"\\xc5\\x93\"=>'oe',\n    \"\\xc5\\x94\"=>'R', \"\\xc5\\x95\"=>'r',\n    \"\\xc5\\x96\"=>'R', \"\\xc5\\x97\"=>'r',\n    \"\\xc5\\x98\"=>'R', \"\\xc5\\x99\"=>'r',\n    \"\\xc5\\x9a\"=>'S', \"\\xc5\\x9b\"=>'s',\n    \"\\xc5\\x9c\"=>'S', \"\\xc5\\x9d\"=>'s',\n    \"\\xc5\\x9e\"=>'S', \"\\xc5\\x9f\"=>'s',\n    \"\\xc5\\xa0\"=>'S', \"\\xc5\\xa1\"=>'s',\n    \"\\xc5\\xa2\"=>'T', \"\\xc5\\xa3\"=>'t',\n    \"\\xc5\\xa4\"=>'T', \"\\xc5\\xa5\"=>'t',\n    \"\\xc5\\xa6\"=>'T', \"\\xc5\\xa7\"=>'t',\n    \"\\xc5\\xa8\"=>'U', \"\\xc5\\xa9\"=>'u',\n    \"\\xc5\\xaa\"=>'U', \"\\xc5\\xab\"=>'u',\n    \"\\xc5\\xac\"=>'U', \"\\xc5\\xad\"=>'u',\n    \"\\xc5\\xae\"=>'U', \"\\xc5\\xaf\"=>'u',\n    \"\\xc5\\xb0\"=>'U', \"\\xc5\\xb1\"=>'u',\n    \"\\xc5\\xb2\"=>'U', \"\\xc5\\xb3\"=>'u',\n    \"\\xc5\\xb4\"=>'W', \"\\xc5\\xb5\"=>'w',\n    \"\\xc5\\xb6\"=>'Y', \"\\xc5\\xb7\"=>'y',\n    \"\\xc5\\xb8\"=>'Y', \"\\xc5\\xb9\"=>'Z',\n    \"\\xc5\\xba\"=>'z', \"\\xc5\\xbb\"=>'Z',\n    \"\\xc5\\xbc\"=>'z', \"\\xc5\\xbd\"=>'Z',\n    \"\\xc5\\xbe\"=>'z', \"\\xc5\\xbf\"=>'s',\n    // Decompositions for Latin Extended-B\n    \"\\xc8\\x98\"=>'S', \"\\xc8\\x99\"=>'s',\n    \"\\xc8\\x9a\"=>'T', \"\\xc8\\x9b\"=>'t',\n    // Euro Sign\n    \"\\xe2\\x82\\xac\"=>'E',\n    // GBP (Pound) Sign\n    \"\\xc2\\xa3\"=>'');\n\n    $string = strtr($string, $chars);\n  }\n  else\n  {\n    // Assume ISO-8859-1 if not UTF-8\n    $chars['in'] = chr(128).chr(131).chr(138).chr(142).chr(154).chr(158)\n      .chr(159).chr(162).chr(165).chr(181).chr(192).chr(193).chr(194)\n      .chr(195).chr(196).chr(197).chr(199).chr(200).chr(201).chr(202)\n      .chr(203).chr(204).chr(205).chr(206).chr(207).chr(209).chr(210)\n      .chr(211).chr(212).chr(213).chr(214).chr(216).chr(217).chr(218)\n      .chr(219).chr(220).chr(221).chr(224).chr(225).chr(226).chr(227)\n      .chr(228).chr(229).chr(231).chr(232).chr(233).chr(234).chr(235)\n      .chr(236).chr(237).chr(238).chr(239).chr(241).chr(242).chr(243)\n      .chr(244).chr(245).chr(246).chr(248).chr(249).chr(250).chr(251)\n      .chr(252).chr(253).chr(255);\n\n    $chars['out'] = \"EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy\";\n\n    $string = strtr($string, $chars['in'], $chars['out']);\n    $double_chars['in'] = array(chr(140), chr(156), chr(198), chr(208), chr(222), chr(223), chr(230), chr(240), chr(254));\n    $double_chars['out'] = array('OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th');\n    $string = str_replace($double_chars['in'], $double_chars['out'], $string);\n  }\n\n  return $string;\n}\n\nif (function_exists('mb_strtolower') && defined('PWG_CHARSET'))\n{\n  /**\n   * removes accents from a string and converts it to lower case\n   *\n   * @param string $term\n   * @return string\n   */\n  function pwg_transliterate($term)\n  {\n    return remove_accents( mb_strtolower($term, PWG_CHARSET) );\n  }\n}\nelse\n{\n  /**\n   * @ignore\n   */\n  function pwg_transliterate($term)\n  {\n    return remove_accents( strtolower($term) );\n  }\n}\n\n/**\n * simplify a string to insert it into an URL\n *\n * @param string $str\n * @return string\n */\nfunction str2url($str)\n{\n  $str = $safe = pwg_transliterate($str);\n  $str = preg_replace('/[^\\x80-\\xffa-z0-9_\\s\\'\\:\\/\\[\\],-]/','',$str);\n  $str = preg_replace('/[\\s\\'\\:\\/\\[\\],-]+/',' ',trim($str));\n  $res = str_replace(' ','_',$str);\n\n  if (empty($res))\n  {\n    $res = str_replace(' ','_', $safe);\n  }\n\n  return $res;\n}\n\n/**\n * returns an array with a list of {language_code => language_name}\n *\n * @return string[]\n */\nfunction get_languages()\n{\n  $query = '\nSELECT id, name\n  FROM '.LANGUAGES_TABLE.'\n  ORDER BY name ASC\n;';\n  $result = pwg_query($query);\n\n  $languages = array();\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    if (is_dir(PHPWG_ROOT_PATH.'language/'.$row['id']))\n    {\n      $languages[ $row['id'] ] = $row['name'];\n    }\n  }\n\n  return $languages;\n}\n\n/**\n * log the visit into history table\n *\n * @param int $image_id\n * @param string $image_type\n * @return bool\n */\nfunction pwg_log($image_id = null, $image_type = null, $format_id = null)\n{\n  global $conf, $user, $page;\n\n  $update_last_visit = false;\n  if (empty($user['last_visit']) or strtotime($user['last_visit']) < time()-$conf['session_length'])\n  {\n    $update_last_visit = true;\n  }\n  $update_last_visit = trigger_change('pwg_log_update_last_visit', $update_last_visit);\n\n  if ($update_last_visit)\n  {\n    $query = '\nUPDATE '.USER_INFOS_TABLE.'\n  SET last_visit = NOW(),\n      lastmodified = lastmodified\n  WHERE user_id = '.$user['id'].'\n';\n    pwg_query($query);\n  }\n\n  $do_log = $conf['log'];\n  if (is_admin())\n  {\n    $do_log = $conf['history_admin'];\n  }\n  if (is_a_guest())\n  {\n    $do_log = $conf['history_guest'];\n  }\n\n  $do_log = trigger_change('pwg_log_allowed', $do_log, $image_id, $image_type);\n\n  if (!$do_log)\n  {\n    return false;\n  }\n\n  $tags_string = null;\n  if ('tags'==@$page['section'])\n  {\n    $tags_string = implode(',', $page['tag_ids']);\n  }\n\n  $ip = $_SERVER['REMOTE_ADDR'];\n  // In case of \"too long\" ipv6 address, we take only the 15 first chars.\n  //\n  // It would be \"cleaner\" to increase length of history.IP to 50 chars, but\n  // the alter table is very long on such a big table. We should plan this\n  // for a future version, once history table is kept \"smaller\".\n  if (strpos($ip,':') !== false and strlen($ip) > 15)\n  {\n    $ip = substr($ip, 0, 15);\n  }\n\n  // If plugin developers add their own sections, Piwigo will automatically add it in the history.section enum column\n  if (isset($page['section']))\n  {\n    // set cache if not available\n    if (!isset($conf['history_sections_cache']))\n    {\n      conf_update_param('history_sections_cache', get_enums(HISTORY_TABLE, 'section'), true);\n    }\n\n    $conf['history_sections_cache'] = safe_unserialize($conf['history_sections_cache']);\n\n    if (in_array($page['section'], $conf['history_sections_cache']))\n    {\n      $section = $page['section'];\n    }\n    elseif (preg_match('/^[a-zA-Z0-9_-]+$/', $page['section']))\n    {\n      $history_sections = get_enums(HISTORY_TABLE, 'section');\n      $history_sections[] = $page['section'];\n\n      // alter history table structure, to include a new section\n      pwg_query('ALTER TABLE '.HISTORY_TABLE.' CHANGE section section enum(\\''.implode(\"','\", array_unique($history_sections)).'\\') DEFAULT NULL;');\n\n      // and refresh cache\n      conf_update_param('history_sections_cache', get_enums(HISTORY_TABLE, 'section'), true);\n\n      $section = $page['section'];\n    }\n  }\n  \n  $query = '\nINSERT INTO '.HISTORY_TABLE.'\n  (\n    date,\n    time,\n    user_id,\n    IP,\n    section,\n    category_id,\n    image_id,\n    image_type,\n    format_id,\n    auth_key_id,\n    tag_ids\n  )\n  VALUES\n  (\n    CURRENT_DATE,\n    CURRENT_TIME,\n    '.$user['id'].',\n    \\''.$ip.'\\',\n    '.(isset($section) ? \"'\".$section.\"'\" : 'NULL').',\n    '.(isset($page['category']['id']) ? $page['category']['id'] : 'NULL').',\n    '.(isset($image_id) ? $image_id : 'NULL').',\n    '.(isset($image_type) ? \"'\".$image_type.\"'\" : 'NULL').',\n    '.(isset($format_id) ? $format_id : 'NULL').',\n    '.(isset($page['auth_key_id']) ? $page['auth_key_id'] : 'NULL').',\n    '.(isset($tags_string) ? \"'\".$tags_string.\"'\" : 'NULL').'\n  )\n;';\n  pwg_query($query);\n\n  $history_id = pwg_db_insert_id(HISTORY_TABLE);\n  if ($history_id % 1000 == 0)\n  {\n    include_once(PHPWG_ROOT_PATH.'admin/include/functions_history.inc.php');\n    history_summarize(50000);\n  }\n\n  if ($conf['history_autopurge_every'] > 0 and $history_id % $conf['history_autopurge_every'] == 0)\n  {\n    include_once(PHPWG_ROOT_PATH.'admin/include/functions_history.inc.php');\n    history_autopurge();\n  }\n\n  return true;\n}\n\nfunction pwg_activity($object, $object_id, $action, $details=array())\n{\n  global $user;\n\n  // in case of uploadAsync, do not log the automatic login as an independant activity\n  if (isset($_REQUEST['method']) and 'pwg.images.uploadAsync' == $_REQUEST['method'] and 'login' == $action)\n  {\n    return;\n  }\n\n  if (isset($_REQUEST['method']) and 'pwg.plugins.performAction' == $_REQUEST['method'] and $_REQUEST['action'] != $action)\n  {\n    // for example, if you \"restore\" a plugin, the internal sequence will perform deactivate/uninstall/install/activate.\n    // We only want to keep the last call to pwg_activity with the \"restore\" action.\n    return;\n  }\n\n  $object_ids = $object_id;\n  if (!is_array($object_id))\n  {\n    $object_ids = array($object_id);\n  }\n\n  if (isset($_REQUEST['method']))\n  {\n    $details['method'] = $_REQUEST['method'];\n  }\n  else\n  {\n    $details['script'] = script_basename();\n\n    if ('admin' == $details['script'] and isset($_GET['page']))\n    {\n      $details['script'].= '/'.$_GET['page'];\n    }\n  }\n\n  if ('autoupdate' == $action)\n  {\n    // autoupdate on a plugin can happen anywhere, the \"script/method\" is not meaningfull\n    unset($details['method']);\n    unset($details['script']);\n  }\n\n  $user_agent = null;\n  if ('user' == $object and 'login' == $action and isset($_SERVER['HTTP_USER_AGENT']))\n  {\n    $user_agent = strip_tags($_SERVER['HTTP_USER_AGENT']);\n  }\n\n  if ('photo' == $object and 'add' == $action and !isset($details['sync']))\n  {\n    $details['added_with'] = 'app';\n    if (isset($_SERVER['HTTP_REFERER']) and preg_match('/page=photos_add/', $_SERVER['HTTP_REFERER']))\n    {\n      $details['added_with'] = 'browser';\n    }\n  }\n\n  if (in_array($object, array('album', 'photo')) and 'delete' == $action and isset($_GET['page']) and 'site_update' == $_GET['page'])\n  {\n    $details['sync'] = true;\n  }\n\n  if ('tag' == $object and 'delete' == $action and isset($_POST['destination_tag']))\n  {\n    $details['action'] = 'merge';\n    $details['destination_tag'] = $_POST['destination_tag'];\n  }\n\n  $inserts = array();\n  $details_insert = pwg_db_real_escape_string(serialize($details));\n  $ip_address = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : null;\n  $session_id = !empty(session_id()) ? session_id() : 'none';\n\n  foreach ($object_ids as $loop_object_id)\n  {\n    $performed_by = $user['id'] ?? 0; // on a plugin autoupdate, $user is not yet loaded\n\n    if ('logout' == $action)\n    {\n      $performed_by = $loop_object_id;\n    }\n\n    $inserts[] = array(\n      'object' => $object,\n      'object_id' => $loop_object_id,\n      'action' => $action,\n      'performed_by' => $performed_by,\n      'session_idx' => $session_id,\n      'ip_address' => $ip_address,\n      'details' => $details_insert,\n      'user_agent' => pwg_db_real_escape_string($user_agent),\n    );\n  }\n\n  mass_inserts(ACTIVITY_TABLE, array_keys($inserts[0]), $inserts);\n}\n\n/**\n * Computes the difference between two dates.\n * returns a DateInterval object or a stdClass with the same attributes\n * http://stephenharris.info/date-intervals-in-php-5-2\n *\n * @param DateTime $date1\n * @param DateTime $date2\n * @return DateInterval|stdClass\n */\nfunction dateDiff($date1, $date2)\n{\n  if (version_compare(PHP_VERSION, '5.3.0') >= 0)\n  {\n    return $date1->diff($date2);\n  }\n\n  $diff = new stdClass();\n\n  //Make sure $date1 is ealier\n  $diff->invert = $date2 < $date1;\n  if ($diff->invert)\n  {\n    list($date1, $date2) = array($date2, $date1);\n  }\n\n  //Calculate R values\n  $R = ($date1 <= $date2 ? '+' : '-');\n  $r = ($date1 <= $date2 ? '' : '-');\n\n  //Calculate total days\n  $diff->days = round(abs($date1->format('U') - $date2->format('U'))/86400);\n\n  //A leap year work around - consistent with DateInterval\n  $leap_year = $date1->format('m-d') == '02-29';\n  if ($leap_year)\n  {\n    $date1->modify('-1 day');\n  }\n\n  //Years, months, days, hours\n  $periods = array('years'=>-1, 'months'=>-1, 'days'=>-1, 'hours'=>-1);\n\n  foreach ($periods as $period => &$i)\n  {\n    if ($period == 'days' && $leap_year)\n    {\n      $date1->modify('+1 day');\n    }\n\n    while ($date1 <= $date2 )\n    {\n      $date1->modify('+1 '.$period);\n      $i++;\n    }\n\n    //Reset date and record increments\n    $date1->modify('-1 '.$period);\n  }\n\n  list($diff->y, $diff->m, $diff->d, $diff->h) = array_values($periods);\n\n  //Minutes, seconds\n  $diff->s = round(abs($date1->format('U') - $date2->format('U')));\n  $diff->i = floor($diff->s/60);\n  $diff->s = $diff->s - $diff->i*60;\n\n  return $diff;\n}\n\n/**\n * converts a string into a DateTime object\n *\n * @param int|string timestamp or datetime string\n * @param string $format input format respecting date() syntax\n * @return DateTime|false\n */\nfunction str2DateTime($original, $format=null)\n{\n  if (empty($original))\n  {\n    return false;\n  }\n  \n  if ($original instanceof DateTime)\n  {\n    return $original;\n  }\n\n  if (!empty($format) && version_compare(PHP_VERSION, '5.3.0') >= 0)// from known date format\n  {\n    return DateTime::createFromFormat('!'.$format, $original); // ! char to reset fields to UNIX epoch\n  }\n  else\n  {\n    $t = trim($original, '0123456789');\n    if (empty($t)) // from timestamp\n    {\n      return new DateTime('@'.$original);\n    }\n    else // from unknown date format (assuming something like Y-m-d H:i:s)\n    {\n      $ymdhms = array();\n      $tok = strtok($original, '- :/');\n      while ($tok !== false)\n      {\n        $ymdhms[] = $tok;\n        $tok = strtok('- :/');\n      }\n\n      if (count($ymdhms)<3) return false;\n      if (!isset($ymdhms[3])) $ymdhms[3] = 0;\n      if (!isset($ymdhms[4])) $ymdhms[4] = 0;\n      if (!isset($ymdhms[5])) $ymdhms[5] = 0;\n\n      $date = new DateTime();\n      $date->setDate($ymdhms[0], $ymdhms[1], $ymdhms[2]);\n      $date->setTime($ymdhms[3], $ymdhms[4], $ymdhms[5]);\n      return $date;\n    }\n  }\n}\n\n/**\n * returns a formatted and localized date for display\n *\n * @param int|string timestamp or datetime string\n * @param array $show list of components displayed, default is ['day_name', 'day', 'month', 'year']\n *    THIS PARAMETER IS PLANNED TO CHANGE\n * @param string $format input format respecting date() syntax\n * @return string\n */\nfunction format_date($original, $show=null, $format=null)\n{\n  global $lang;\n\n  $date = str2DateTime($original, $format);\n\n  if (!$date)\n  {\n    return l10n('N/A');\n  }\n\n  if ($show === null || $show === true)\n  {\n    $show = array('day_name', 'day', 'month', 'year');\n  }\n\n  // TODO use IntlDateFormatter for proper i18n\n\n  $print = '';\n  if (in_array('day_name', $show))\n    $print.= $lang['day'][ $date->format('w') ].' ';\n\n  if (in_array('day', $show))\n    $print.= $date->format('j').' ';\n\n  if (in_array('month', $show))\n    $print.= $lang['month'][ $date->format('n') ].' ';\n\n  if (in_array('year', $show))\n    $print.= $date->format('Y').' ';\n\n  if (in_array('time', $show))\n  {\n    $temp = $date->format('H:i');\n    if ($temp != '00:00')\n    {\n      $print.= $temp.' ';\n    }\n  }\n\n  return trim($print);\n}\n\n/**\n * Format a \"From ... to ...\" string from two dates\n * @param string $from\n * @param string $to\n * @param boolean $full\n * @return string\n */\nfunction format_fromto($from, $to, $full=false)\n{\n  $from = str2DateTime($from);\n  $to = str2DateTime($to);\n\n  if ($from->format('Y-m-d') == $to->format('Y-m-d'))\n  {\n    return format_date($from);\n  }\n  else\n  {\n    if ($full || $from->format('Y') != $to->format('Y'))\n    {\n      $from_str = format_date($from);\n    }\n    else if ($from->format('m') != $to->format('m'))\n    {\n      $from_str = format_date($from, array('day_name', 'day', 'month'));\n    }\n    else\n    {\n      $from_str = format_date($from, array('day_name', 'day'));\n    }\n    $to_str = format_date($to);\n\n    return l10n('from %s to %s', $from_str, $to_str);\n  }\n}\n\n/**\n * Works out the time since the given date\n *\n * @param int|string timestamp or datetime string\n * @param string $stop year,month,week,day,hour,minute,second\n * @param string $format input format respecting date() syntax\n * @param bool $with_text append \"ago\" or \"in the future\"\n * @param bool $with_weeks\n * @return string\n */\nfunction time_since($original, $stop='minute', $format=null, $with_text=true, $with_week=true, $only_last_unit=false)\n{\n  $date = str2DateTime($original, $format);\n\n  if (!$date)\n  {\n    return l10n('N/A');\n  }\n\n  $now = new DateTime();\n  $diff = dateDiff($now, $date);\n\n  $chunks = array(\n    'year' => $diff->y,\n    'month' => $diff->m,\n    'week' => 0,\n    'day' => $diff->d,\n    'hour' => $diff->h,\n    'minute' => $diff->i,\n    'second' => $diff->s,\n  );\n\n  // DateInterval does not contain the number of weeks\n  if ($with_week)\n  {\n    $chunks['week'] = (int)floor($chunks['day']/7);\n    $chunks['day'] = $chunks['day'] - $chunks['week']*7;\n  }\n\n  $j = array_search($stop, array_keys($chunks));\n\n  $print = ''; $i=0;\n  \n  if (!$only_last_unit)\n  {\n    foreach ($chunks as $name => $value)\n    {\n      if ($value != 0)\n      {\n        $print.= ' '.l10n_dec('%d '.$name, '%d '.$name.'s', $value);\n      }\n      if (!empty($print) && $i >= $j)\n      {\n        break;\n      }\n      $i++;\n    }\n  } else {\n    $reversed_chunks_names = array_keys($chunks);\n    while ($print == '' && $i<count($reversed_chunks_names )) \n    {\n      $name = $reversed_chunks_names[$i];\n      $value = $chunks[$name];\n      if ($value != 0)\n      {\n        $print = l10n_dec('%d '.$name, '%d '.$name.'s', $value);\n      }\n      if (!empty($print) && $i >= $j)\n      {\n        break;\n      }\n      $i++;\n    }\n  }\n\n  $print = trim($print);\n\n  if ($with_text)\n  {\n    if ($diff->invert)\n    {\n      $print = l10n('%s ago', $print);\n    }\n    else\n    {\n      $print = l10n('%s in the future', $print);\n    }\n  }\n\n  return $print;\n}\n\n/**\n * transform a date string from a format to another (MySQL to d/M/Y for instance)\n *\n * @param string $original\n * @param string $format_in respecting date() syntax\n * @param string $format_out respecting date() syntax\n * @param string $default if _$original_ is empty\n * @return string\n */\nfunction transform_date($original, $format_in, $format_out, $default=null)\n{\n  if (empty($original)) return $default;\n  $date = str2DateTime($original, $format_in);\n  return $date->format($format_out);\n}\n\n/**\n * append a variable to _$debug_ global\n *\n * @param string $string\n */\nfunction pwg_debug( $string )\n{\n  global $debug,$t2,$page;\n\n  $now = explode( ' ', microtime() );\n  $now2 = explode( '.', $now[0] );\n  $now2 = $now[1].'.'.$now2[1];\n  $time = number_format( $now2 - $t2, 3, '.', ' ').' s';\n  $debug .= '<p>';\n  $debug.= '['.$time.', ';\n  $debug.= $page['count_queries'].' queries] : '.$string;\n  $debug.= \"</p>\\n\";\n}\n\n/**\n * Redirects to the given URL (HTTP method).\n * once this function called, the execution doesn't go further\n * (presence of an exit() instruction.\n *\n * @param string $url\n * @return void\n */\nfunction redirect_http( $url )\n{\n  if (ob_get_length () !== FALSE)\n  {\n    ob_clean();\n  }\n  // default url is on html format\n  $url = html_entity_decode($url);\n  header('Request-URI: '.$url);\n  header('Content-Location: '.$url);\n  header('Location: '.$url);\n  exit();\n}\n\n/**\n * Redirects to the given URL (HTML method).\n * once this function called, the execution doesn't go further\n * (presence of an exit() instruction.\n *\n * @param string $url\n * @param string $msg\n * @param integer $refresh_time\n * @return void\n */\nfunction redirect_html( $url , $msg = '', $refresh_time = 0)\n{\n  global $user, $template, $lang_info, $conf, $lang, $t2, $page, $debug;\n\n  if (!isset($lang_info) || !isset($template) )\n  {\n    $user = build_user( $conf['guest_id'], true);\n    load_language('common.lang');\n    trigger_notify('loading_lang');\n    load_language('lang', PHPWG_ROOT_PATH.PWG_LOCAL_DIR, array('no_fallback'=>true, 'local'=>true) );\n    $template = new Template(PHPWG_ROOT_PATH.'themes', get_default_theme());\n  }\n\telseif (defined('IN_ADMIN') and IN_ADMIN)\n\t{\n\t\t$template = new Template(PHPWG_ROOT_PATH.'themes', get_default_theme());\n\t}\n\n  if (empty($msg))\n  {\n    $msg = nl2br(l10n('Redirection...'));\n  }\n\n  $refresh = $refresh_time;\n  $url_link = $url;\n  $title = 'redirection';\n\n  $template->set_filenames( array( 'redirect' => 'redirect.tpl' ) );\n\n  include( PHPWG_ROOT_PATH.'include/page_header.php' );\n\n  $template->set_filenames( array( 'redirect' => 'redirect.tpl' ) );\n  $template->assign('REDIRECT_MSG', $msg);\n\n  $template->parse('redirect');\n\n  include( PHPWG_ROOT_PATH.'include/page_tail.php' );\n\n  exit();\n}\n\n/**\n * Redirects to the given URL (automatically choose HTTP or HTML method).\n * once this function called, the execution doesn't go further\n * (presence of an exit() instruction.\n *\n * @param string $url\n * @param string $msg\n * @param integer $refresh_time\n * @return void\n */\nfunction redirect( $url , $msg = '', $refresh_time = 0)\n{\n  global $conf;\n\n  // with RefeshTime <> 0, only html must be used\n  if ($conf['default_redirect_method']=='http'\n      and $refresh_time==0\n      and !headers_sent()\n    )\n  {\n    redirect_http($url);\n  }\n  else\n  {\n    redirect_html($url, $msg, $refresh_time);\n  }\n}\n\n/**\n * returns available themes\n *\n * @param bool $show_mobile\n * @return array\n */\nfunction get_pwg_themes($show_mobile=false)\n{\n  global $conf;\n\n  $themes = array();\n\n  $query = '\nSELECT\n    id,\n    name\n  FROM '.THEMES_TABLE.'\n  ORDER BY name ASC\n;';\n  $result = pwg_query($query);\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    if ($row['id'] == $conf['mobile_theme'])\n    {\n      if (!$show_mobile)\n      {\n        continue;\n      }\n      $row['name'] .= ' ('.l10n('Mobile').')';\n    }\n    if (check_theme_installed($row['id']))\n    {\n      $themes[ $row['id'] ] = $row['name'];\n    }\n  }\n\n  // plugins want remove some themes based on user status maybe?\n  $themes = trigger_change('get_pwg_themes', $themes);\n\n  return $themes;\n}\n\n/**\n * check if a theme is installed (directory exsists)\n *\n * @param string $theme_id\n * @return bool\n */\nfunction check_theme_installed($theme_id)\n{\n  global $conf;\n\n  return file_exists($conf['themes_dir'].'/'.$theme_id.'/'.'themeconf.inc.php');\n}\n\n/**\n * Transforms an original path to its pwg representative\n *\n * @param string $path\n * @param string $representative_ext\n * @return string\n */\nfunction original_to_representative($path, $representative_ext)\n{\n  $pos = strrpos($path, '/');\n  $path = substr_replace($path, 'pwg_representative/', $pos+1, 0);\n  $pos = strrpos($path, '.');\n  return substr_replace($path, $representative_ext, $pos+1);\n}\n\n/**\n * Transforms an original path to its format\n *\n * @param string $path\n * @param string $format_ext\n * @return string\n */\nfunction original_to_format($path, $format_ext)\n{\n  $pos = strrpos($path, '/');\n  $path = substr_replace($path, 'pwg_format/', $pos+1, 0);\n  $pos = strrpos($path, '.');\n  return substr_replace($path, $format_ext, $pos+1);\n}\n\n/**\n * get the full path of an image\n *\n * @param array $element_info element information from db (at least 'path')\n * @return string\n */\nfunction get_element_path($element_info)\n{\n  $path = $element_info['path'];\n  if ( !url_is_remote($path) )\n  {\n    $path = PHPWG_ROOT_PATH.$path;\n  }\n  return $path;\n}\n\n\n/**\n * fill the current user caddie with given elements, if not already in caddie\n *\n * @param int[] $elements_id\n */\nfunction fill_caddie($elements_id)\n{\n  global $user;\n\n  $query = '\nSELECT element_id\n  FROM '.CADDIE_TABLE.'\n  WHERE user_id = '.$user['id'].'\n;';\n  $in_caddie = query2array($query, null, 'element_id');\n\n  $caddiables = array_diff($elements_id, $in_caddie);\n\n  $datas = array();\n\n  foreach ($caddiables as $caddiable)\n  {\n    $datas[] = array(\n      'element_id' => $caddiable,\n      'user_id' => $user['id'],\n      );\n  }\n\n  if (count($caddiables) > 0)\n  {\n    mass_inserts(CADDIE_TABLE, array('element_id','user_id'), $datas);\n  }\n}\n\n/**\n * returns the element name from its filename.\n * removes file extension and replace underscores by spaces\n *\n * @param string $filename\n * @return string name\n */\nfunction get_name_from_file($filename)\n{\n  return str_replace('_',' ',get_filename_wo_extension($filename));\n}\n\n/**\n * translation function.\n * returns the corresponding value from _$lang_ if existing else the key is returned\n * if more than one parameter is provided sprintf is applied\n *\n * @param string $key\n * @param mixed $args,... optional arguments\n * @return string\n */\nfunction l10n($key)\n{\n  global $lang, $conf;\n\n  if ( ($val=@$lang[$key]) === null)\n  {\n    if ($conf['debug_l10n'] and !isset($lang[$key]) and !empty($key))\n    {\n      trigger_error('[l10n] language key \"'. $key .'\" not defined', E_USER_WARNING);\n    }\n    $val = $key;\n  }\n\n  if (func_num_args() > 1)\n  {\n    $args = func_get_args();\n    $val = vsprintf($val, array_slice($args, 1));\n  }\n\n  return $val;\n}\n\n/**\n * returns the printf value for strings including %d\n * returned value is concorded with decimal value (singular, plural)\n *\n * @param string $singular_key\n * @param string $plural_key\n * @param int $decimal\n * @return string\n */\nfunction l10n_dec($singular_key, $plural_key, $decimal)\n{\n  global $lang_info;\n\n  return\n    sprintf(\n      l10n((\n        (($decimal > 1) or ($decimal == 0 and $lang_info['zero_plural']))\n          ? $plural_key\n          : $singular_key\n        )), $decimal);\n}\n\n/**\n * returns a single element to use with l10n_args\n *\n * @param string $key translation key\n * @param mixed $args arguments to use on sprintf($key, args)\n *   if args is a array, each values are used on sprintf\n * @return string\n */\nfunction get_l10n_args($key, $args='')\n{\n  if (is_array($args))\n  {\n    $key_arg = array_merge(array($key), $args);\n  }\n  else\n  {\n    $key_arg = array($key,  $args);\n  }\n  return array('key_args' => $key_arg);\n}\n\n/**\n * returns a string formated with l10n elements.\n * it is usefull to \"prepare\" a text and translate it later\n * @see get_l10n_args()\n *\n * @param array $key_args one l10n_args element or array of l10n_args elements\n * @param string $sep used when translated elements are concatened\n * @return string\n */\nfunction l10n_args($key_args, $sep = \"\\n\")\n{\n  if (is_array($key_args))\n  {\n    foreach ($key_args as $key => $element)\n    {\n      if (isset($result))\n      {\n        $result .= $sep;\n      }\n      else\n      {\n        $result = '';\n      }\n\n      if ($key === 'key_args')\n      {\n        array_unshift($element, l10n(array_shift($element))); // translate the key\n        $result .= call_user_func_array('sprintf', $element);\n      }\n      else\n      {\n        $result .= l10n_args($element, $sep);\n      }\n    }\n  }\n  else\n  {\n    fatal_error('l10n_args: Invalid arguments');\n  }\n\n  return $result;\n}\n\n/**\n * returns the corresponding value from $themeconf if existing or an empty string\n *\n * @param string $key\n * @return string\n */\nfunction get_themeconf($key)\n{\n  return $GLOBALS['template']->get_themeconf($key);\n}\n\n/**\n * Returns webmaster mail address depending on $conf['webmaster_id']\n *\n * @return string\n */\nfunction get_webmaster_mail_address()\n{\n  global $conf;\n\n  $query = '\nSELECT '.$conf['user_fields']['email'].'\n  FROM '.USERS_TABLE.'\n  WHERE '.$conf['user_fields']['id'].' = '.$conf['webmaster_id'].'\n;';\n  list($email) = pwg_db_fetch_row(pwg_query($query));\n\n  $email = trigger_change('get_webmaster_mail_address', $email);\n\n  return $email;\n}\n\n/**\n * Add configuration parameters from database to global $conf array\n *\n * @param string $condition SQL condition\n * @return void\n */\nfunction load_conf_from_db($condition = '')\n{\n  global $conf;\n\n  $query = '\nSELECT param, value\n FROM '.CONFIG_TABLE.'\n '.(!empty($condition) ? 'WHERE '.$condition : '').'\n;';\n  $result = pwg_query($query);\n\n  if ((pwg_db_num_rows($result) == 0) and !empty($condition))\n  {\n    fatal_error('No configuration data');\n  }\n\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    $val = isset($row['value']) ? $row['value'] : '';\n    // If the field is true or false, the variable is transformed into a boolean value.\n    if ($val == 'true')\n    {\n      $val = true;\n    }\n    elseif ($val == 'false')\n    {\n      $val = false;\n    }\n    $conf[ $row['param'] ] = $val;\n  }\n\n  trigger_notify('load_conf', $condition);\n}\n\n/**\n * Add or update a config parameter\n *\n * @param string $param\n * @param string $value\n * @param boolean $updateGlobal update global *$conf* variable\n * @param callable $parser function to apply to the value before save in database\n      (eg: serialize, json_encode) will not be applied to *$conf* if *$parser* is *true*\n */\nfunction conf_update_param($param, $value, $updateGlobal=false, $parser=null)\n{\n  if ($parser != null)\n  {\n    $dbValue = call_user_func($parser, $value);\n  }\n  else if (is_array($value) || is_object($value))\n  {\n    $dbValue = addslashes(serialize($value));\n  }\n  else\n  {\n    $dbValue = boolean_to_string($value);\n  }\n\n  $query = '\nINSERT INTO\n  '.CONFIG_TABLE.' (param, value)\n  VALUES(\\''.$param.'\\', \\''.$dbValue.'\\')\n  ON DUPLICATE KEY UPDATE value = \\''.$dbValue.'\\'\n;';\n\n  pwg_query($query);\n\n  if ($updateGlobal)\n  {\n    global $conf;\n    $conf[$param] = $value;\n  }\n}\n\n/**\n * Delete one or more config parameters\n * @since 2.6\n *\n * @param string|string[] $params\n */\nfunction conf_delete_param($params)\n{\n  global $conf;\n\n  if (!is_array($params))\n  {\n    $params = array($params);\n  }\n  if (empty($params))\n  {\n    return;\n  }\n\n  $query = '\nDELETE FROM '.CONFIG_TABLE.'\n  WHERE param IN(\\''. implode('\\',\\'', $params) .'\\')\n;';\n  pwg_query($query);\n\n  foreach ($params as $param)\n  {\n    unset($conf[$param]);\n  }\n}\n\n/**\n * Return a default value for a configuration parameter.\n * @since 2.8\n *\n * @param string $param the configuration value to be extracted (if it exists)\n * @param mixed $default_value the default value for the configuration value if it does not exist.\n *\n * @return mixed The configuration value if the variable exists, otherwise the default.\n */\nfunction conf_get_param($param, $default_value=null)\n{\n  global $conf;\n  \n  if (isset($conf[$param]))\n  {\n    return $conf[$param];\n  }\n  return $default_value;\n}\n\n\n/**\n * Apply *unserialize* on a value only if it is a string\n * @since 2.7\n *\n * @param array|string $value\n * @return array\n */\nfunction safe_unserialize($value)\n{\n  if (is_string($value))\n  {\n    return unserialize($value);\n  }\n  return $value;\n}\n\n/**\n * Apply *json_decode* on a value only if it is a string\n * @since 2.7\n *\n * @param array|string $value\n * @return array\n */\nfunction safe_json_decode($value)\n{\n  if (is_string($value))\n  {\n    return json_decode($value, true);\n  }\n  return $value;\n}\n\n/**\n * Prepends and appends strings at each value of the given array.\n *\n * @param array $array\n * @param string $prepend_str\n * @param string $append_str\n * @return array\n */\nfunction prepend_append_array_items($array, $prepend_str, $append_str)\n{\n  array_walk($array, function(&$value, $key) use($prepend_str,$append_str) { $value = \"$prepend_str$value$append_str\"; } );\n  return $array;\n}\n\n/**\n * creates an simple hashmap based on a SQL query.\n * choose one to be the key, another one to be the value.\n * @deprecated 2.6\n *\n * @param string $query\n * @param string $keyname\n * @param string $valuename\n * @return array\n */\nfunction simple_hash_from_query($query, $keyname, $valuename)\n{\n\treturn query2array($query, $keyname, $valuename);\n}\n\n/**\n * creates an associative array based on a SQL query.\n * choose one to be the key\n * @deprecated 2.6\n *\n * @param string $query\n * @param string $keyname\n * @return array\n */\nfunction hash_from_query($query, $keyname)\n{\n\treturn query2array($query, $keyname);\n}\n\n/**\n * creates a numeric array based on a SQL query.\n * if _$fieldname_ is empty the returned value will be an array of arrays\n * if _$fieldname_ is provided the returned value will be a one dimension array\n * @deprecated 2.6\n *\n * @param string $query\n * @param string $fieldname\n * @return array\n */\nfunction array_from_query($query, $fieldname=false)\n{\n  if (false === $fieldname)\n  {\n\t\treturn query2array($query);\n  }\n  else\n  {\n\t\treturn query2array($query, null, $fieldname);\n  }\n}\n\n/**\n * Return the basename of the current script.\n * The lowercase case filename of the current script without extension\n *\n * @return string\n */\nfunction script_basename()\n{\n  global $conf;\n\n  foreach (array('SCRIPT_NAME', 'SCRIPT_FILENAME', 'PHP_SELF') as $value)\n  {\n    if (!empty($_SERVER[$value]))\n    {\n      $filename = strtolower($_SERVER[$value]);\n      if ($conf['php_extension_in_urls'] and get_extension($filename)!=='php')\n        continue;\n      $basename = basename($filename, '.php');\n      if (!empty($basename))\n      {\n        return $basename;\n      }\n    }\n  }\n  return '';\n}\n\n/**\n * Return $conf['filter_pages'] value for the current page\n *\n * @param string $value_name\n * @return mixed\n */\nfunction get_filter_page_value($value_name)\n{\n  global $conf;\n\n  $page_name = script_basename();\n\n  if (isset($conf['filter_pages'][$page_name][$value_name]))\n  {\n    return $conf['filter_pages'][$page_name][$value_name];\n  }\n  elseif (isset($conf['filter_pages']['default'][$value_name]))\n  {\n    return $conf['filter_pages']['default'][$value_name];\n  }\n  else\n  {\n    return null;\n  }\n}\n\n/**\n * return the character set used by Piwigo\n * @return string\n */\nfunction get_pwg_charset()\n{\n  $pwg_charset = 'utf-8';\n  if (defined('PWG_CHARSET'))\n  {\n    $pwg_charset = PWG_CHARSET;\n  }\n  return $pwg_charset;\n}\n\n/**\n * returns the parent (fallback) language of a language.\n * if _$lang_id_ is null it applies to the current language\n * @since 2.6\n *\n * @param string $lang_id\n * @return string|null\n */\nfunction get_parent_language($lang_id=null)\n{\n  if (empty($lang_id))\n  {\n    global $lang_info;\n    return !empty($lang_info['parent']) ? $lang_info['parent'] : null;\n  }\n  else\n  {\n    $f = PHPWG_ROOT_PATH.'language/'.$lang_id.'/common.lang.php';\n    if (file_exists($f))\n    {\n      include($f);\n      return !empty($lang_info['parent']) ? $lang_info['parent'] : null;\n    }\n  }\n  return null;\n}\n\n/**\n * includes a language file or returns the content of a language file\n *\n * tries to load in descending order:\n *   param language, user language, default language\n *\n * @param string $filename\n * @param string $dirname\n * @param mixed options can contain\n *     @option string language - language to load\n *     @option bool return - if true the file content is returned\n *     @option bool no_fallback - if true do not load default language\n *     @option bool|string force_fallback - force pre-loading of another language\n *        default language if *true* or specified language\n *     @option bool local - if true load file from local directory\n * @return boolean|string\n */\nfunction load_language($filename, $dirname = '', $options = array())\n{\n  global $user, $language_files;\n\n  // keep trace of plugins loaded files for switch_lang_to() function\n  if (!empty($dirname) && !empty($filename) && !@$options['return']\n    && !isset($language_files[$dirname][$filename]))\n  {\n    $language_files[$dirname][$filename] = $options;\n  }\n\n  if (!@$options['return'])\n  {\n    $filename .= '.php';\n  }\n  if (empty($dirname))\n  {\n    $dirname = PHPWG_ROOT_PATH;\n  }\n  $dirname .= 'language/';\n\n  $default_language = (defined('PHPWG_INSTALLED') and !defined('UPGRADES_PATH')) ?\n      get_default_language() : PHPWG_DEFAULT_LANGUAGE;\n\n  // construct list of potential languages\n  $languages = array();\n  if (!empty($options['language']))\n  { // explicit language\n    $languages[] = $options['language'];\n  }\n  if (!empty($user['language']))\n  { // use language\n    $languages[] = $user['language'];\n  }\n  if (($parent = get_parent_language()) != null)\n  { // parent language\n    // this is only for when the \"child\" language is missing\n    $languages[] = $parent;\n  }\n  if (isset($options['force_fallback']))\n  { // fallback language\n    // this is only for when the main language is missing\n    if ($options['force_fallback'] === true)\n    {\n      $options['force_fallback'] = $default_language;\n    }\n    $languages[] = $options['force_fallback'];\n  }\n  if (!@$options['no_fallback'])\n  { // default language\n    $languages[] = $default_language;\n  }\n\n  $languages = array_unique($languages);\n\n  // find first existing\n  $source_file       = '';\n  $selected_language = '';\n  foreach ($languages as $language)\n  {\n    $f = @$options['local'] ?\n      $dirname.$language.'.'.$filename:\n      $dirname.$language.'/'.$filename;\n\n    if (file_exists($f))\n    {\n      $selected_language = $language;\n      $source_file = $f;\n      break;\n    }\n  }\n  \n  if (!empty($source_file))\n  {\n    if (!@$options['return'])\n    {\n      // load forced fallback\n      if (isset($options['force_fallback']) && $options['force_fallback'] != $selected_language)\n      {\n        @include(str_replace($selected_language, $options['force_fallback'], $source_file));\n      }\n\n      // load language content\n      @include($source_file);\n      $load_lang = @$lang;\n      $load_lang_info = @$lang_info;\n\n      // access already existing values\n      global $lang, $lang_info;\n      if (!isset($lang)) $lang = array();\n      if (!isset($lang_info)) $lang_info = array();\n\n      // load parent language content directly in global\n      if (!empty($load_lang_info['parent']))\n        $parent_language = $load_lang_info['parent'];\n      else if (!empty($lang_info['parent']))\n        $parent_language = $lang_info['parent'];\n      else \n        $parent_language = null;\n\n      if (!empty($parent_language) && $parent_language != $selected_language)\n      {\n        @include(str_replace($selected_language, $parent_language, $source_file));\n      }\n\n      // merge contents\n      $lang = array_merge($lang, (array)$load_lang);\n      $lang_info = array_merge($lang_info, (array)$load_lang_info);\n      return true;\n    }\n    else\n    {\n      $content = @file_get_contents($source_file);\n      //Note: target charset is always utf-8 $content = convert_charset($content, 'utf-8', $target_charset);\n      return $content;\n    }\n  }\n\n  return false;\n}\n\n/**\n * converts a string from a character set to another character set\n *\n * @param string $str\n * @param string $source_charset\n * @param string $dest_charset\n */\nfunction convert_charset($str, $source_charset, $dest_charset)\n{\n  if ($source_charset==$dest_charset)\n    return $str;\n  if ($source_charset=='iso-8859-1' and $dest_charset=='utf-8')\n  {\n    return utf8_encode($str);\n  }\n  if ($source_charset=='utf-8' and $dest_charset=='iso-8859-1')\n  {\n    return utf8_decode($str);\n  }\n  if (function_exists('iconv'))\n  {\n    return iconv($source_charset, $dest_charset.'//TRANSLIT', $str);\n  }\n  if (function_exists('mb_convert_encoding'))\n  {\n    return mb_convert_encoding( $str, $dest_charset, $source_charset );\n  }\n  return $str; // TODO\n}\n\n/**\n * makes sure a index.htm protects the directory from browser file listing\n *\n * @param string $dir\n */\nfunction secure_directory($dir)\n{\n  $file = $dir.'/index.htm';\n  if (!file_exists($file))\n  {\n    @file_put_contents($file, 'Not allowed!');\n  }\n}\n\n/**\n * returns a \"secret key\" that is to be sent back when a user posts a form\n *\n * @param int $valid_after_seconds - key validity start time from now\n * @param string $aditionnal_data_to_hash\n * @return string\n */\nfunction get_ephemeral_key($valid_after_seconds, $aditionnal_data_to_hash = '')\n{\n\tglobal $conf;\n\t$time = round(microtime(true), 1);\n\treturn $time.':'.$valid_after_seconds.':'\n\t\t.hash_hmac(\n\t\t\t'md5',\n\t\t\t$time.substr($_SERVER['REMOTE_ADDR'],0,5).$valid_after_seconds.$aditionnal_data_to_hash,\n\t\t\t$conf['secret_key']);\n}\n\n/**\n * verify a key sent back with a form\n *\n * @param string $key\n * @param string $aditionnal_data_to_hash\n * @return bool\n */\nfunction verify_ephemeral_key($key, $aditionnal_data_to_hash = '')\n{\n\tglobal $conf;\n\t$time = microtime(true);\n\t$key = explode( ':', @$key );\n\tif ( count($key)!=3\n\t\tor $key[0]>$time-(float)$key[1] // page must have been retrieved more than X sec ago\n\t\tor $key[0]<$time-3600 // 60 minutes expiration\n\t\tor hash_hmac(\n\t\t\t  'md5', $key[0].substr($_SERVER['REMOTE_ADDR'],0,5).$key[1].$aditionnal_data_to_hash, $conf['secret_key']\n\t\t\t) != $key[2]\n\t  )\n\t{\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * return an array which will be sent to template to display navigation bar\n *\n * @param string $url base url of all links\n * @param int $nb_elements\n * @param int $start\n * @param int $nb_element_page\n * @param bool $clean_url\n * @param string $param_name\n * @return array\n */\nfunction create_navigation_bar($url, $nb_element, $start, $nb_element_page, $clean_url = false, $param_name='start')\n{\n  global $conf;\n\n  $navbar = array();\n  $pages_around = $conf['paginate_pages_around'];\n  $start_str = $clean_url ? '/'.$param_name.'-' : (strpos($url, '?')===false ? '?':'&amp;').$param_name.'=';\n\n  if (!isset($start) or !is_numeric($start) or (is_numeric($start) and $start < 0))\n  {\n    $start = 0;\n  }\n\n  // navigation bar useful only if more than one page to display !\n  if ($nb_element > $nb_element_page)\n  {\n    $url_start = $url.$start_str;\n\n    $cur_page = $navbar['CURRENT_PAGE'] = $start / $nb_element_page + 1;\n    $maximum = ceil($nb_element / $nb_element_page);\n\n    $start = $nb_element_page * round( $start / $nb_element_page );\n    $previous = $start - $nb_element_page;\n    $next = $start + $nb_element_page;\n    $last = ($maximum - 1) * $nb_element_page;\n\n    // link to first page and previous page?\n    if ($cur_page != 1)\n    {\n      $navbar['URL_FIRST'] = $url;\n      $navbar['URL_PREV'] = $previous > 0 ? $url_start.$previous : $url;\n    }\n    // link on next page and last page?\n    if ($cur_page != $maximum)\n    {\n      $navbar['URL_NEXT'] = $url_start.($next < $last ? $next : $last);\n      $navbar['URL_LAST'] = $url_start.$last;\n    }\n\n    // pages to display\n    $navbar['pages'] = array();\n    $navbar['pages'][1] = $url;\n    for ($i = max( floor($cur_page) - $pages_around , 2), $stop = min( ceil($cur_page) + $pages_around + 1, $maximum);\n         $i < $stop; $i++)\n    {\n      $navbar['pages'][$i] = $url.$start_str.(($i - 1) * $nb_element_page);\n    }\n    $navbar['pages'][$maximum] = $url_start.$last;\n    $navbar['NB_PAGE']=$maximum;\n  }\n  return $navbar;\n}\n\n/**\n * return an array which will be sent to template to display recent icon\n *\n * @param string $date\n * @param bool $is_child_date\n * @return array\n */\nfunction get_icon($date, $is_child_date = false)\n{\n  global $cache, $user;\n\n  if (empty($date))\n  {\n    return false;\n  }\n\n  if (!isset($cache['get_icon']['title']))\n  {\n    $cache['get_icon']['title'] = l10n(\n      'photos posted during the last %d days',\n      $user['recent_period']\n      );\n  }\n\n  $icon = array(\n    'TITLE' => $cache['get_icon']['title'],\n    'IS_CHILD_DATE' => $is_child_date,\n    );\n\n  if (isset($cache['get_icon'][$date]))\n  {\n    return $cache['get_icon'][$date] ? $icon : array();\n  }\n\n  if (!isset($cache['get_icon']['sql_recent_date']))\n  {\n    // Use MySql date in order to standardize all recent \"actions/queries\"\n    $cache['get_icon']['sql_recent_date'] = pwg_db_get_recent_period($user['recent_period']);\n  }\n\n  $cache['get_icon'][$date] = $date > $cache['get_icon']['sql_recent_date'];\n\n  return $cache['get_icon'][$date] ? $icon : array();\n}\n\n/**\n * check token comming from form posted or get params to prevent csrf attacks.\n * if pwg_token is empty action doesn't require token\n * else pwg_token is compare to server token\n *\n * @return void access denied if token given is not equal to server token\n */\nfunction check_pwg_token()\n{\n  if (!empty($_REQUEST['pwg_token']))\n  {\n    if (get_pwg_token() != $_REQUEST['pwg_token'])\n    {\n      access_denied();\n    }\n  }\n  else\n  {\n    bad_request('missing token');\n  }\n}\n\n/**\n * get pwg_token used to prevent csrf attacks\n *\n * @return string\n */\nfunction get_pwg_token()\n{\n  global $conf;\n\n  return hash_hmac('md5', session_id(), $conf['secret_key']);\n}\n\n/*\n * breaks the script execution if the given value doesn't match the given\n * pattern. This should happen only during hacking attempts.\n *\n * @param string $param_name\n * @param array $param_array\n * @param boolean $is_array\n * @param string $pattern\n * @param boolean $mandatory\n */\nfunction check_input_parameter($param_name, $param_array, $is_array, $pattern, $mandatory=false)\n{\n  $param_value = null;\n  if (isset($param_array[$param_name]))\n  {\n    $param_value = $param_array[$param_name];\n  }\n\n  // it's ok if the input parameter is null\n  if (empty($param_value))\n  {\n    if ($mandatory)\n    {\n      fatal_error('[Hacking attempt] the input parameter \"'.$param_name.'\" is not valid');\n    }\n    return true;\n  }\n\n  if ($is_array)\n  {\n    if (!is_array($param_value))\n    {\n      fatal_error('[Hacking attempt] the input parameter \"'.$param_name.'\" should be an array');\n    }\n\n    foreach ($param_value as $key => $item_to_check)\n    {\n      if (!preg_match(PATTERN_ID, $key) or !preg_match($pattern, $item_to_check))\n      {\n        fatal_error('[Hacking attempt] an item is not valid in input parameter \"'.$param_name.'\"');\n      }\n    }\n  }\n  else\n  {\n    if (!preg_match($pattern, $param_value))\n    {\n      fatal_error('[Hacking attempt] the input parameter \"'.$param_name.'\" is not valid');\n    }\n  }\n}\n\n/**\n * get localized privacy level values\n *\n * @return string[]\n */\nfunction get_privacy_level_options()\n{\n  global $conf;\n\n  $options = array();\n  $label = '';\n  foreach (array_reverse($conf['available_permission_levels']) as $level)\n  {\n    if (0 == $level)\n    {\n      $label = l10n('Everybody');\n    }\n    else\n    {\n      if (strlen($label))\n      {\n        $label .= ', ';\n      }\n      $label .= l10n( sprintf('Level %d', $level) );\n    }\n    $options[$level] = $label;\n  }\n  return $options;\n}\n\n\n/**\n * return the branch from the version. For example version 11.1.2 is on branch 11\n *\n * @param string $version\n * @return string\n */\nfunction get_branch_from_version($version)\n{\n  // the algorithm is a bit complicated to just retrieve the first digits before\n  // the first \".\". It's because before version 11.0.0, we used to take the 2 first\n  // digits, ie version 2.2.4 was on branch 2.2\n  return implode('.', array_slice(explode('.', $version), 0, 1));\n}\n\n/**\n * return the device type: mobile, tablet or desktop\n *\n * @return string\n */\nfunction get_device()\n{\n  $device = pwg_get_session_var('device');\n\n  if (is_null($device))\n  {\n    include_once(PHPWG_ROOT_PATH.'include/mdetect.php');\n    $uagent_obj = new uagent_info();\n    if ($uagent_obj->DetectSmartphone())\n    {\n      $device = 'mobile';\n    }\n    elseif ($uagent_obj->DetectTierTablet())\n    {\n      $device = 'tablet';\n    }\n    else\n    {\n      $device = 'desktop';\n    }\n    pwg_set_session_var('device', $device);\n  }\n\n  return $device;\n}\n\n/**\n * return true if mobile theme should be loaded\n *\n * @return bool\n */\nfunction mobile_theme()\n{\n  global $conf;\n\n  if (empty($conf['mobile_theme']))\n  {\n    return false;\n  }\n\n  if (isset($_GET['mobile']))\n  {\n    $is_mobile_theme = get_boolean($_GET['mobile']);\n    pwg_set_session_var('mobile_theme', $is_mobile_theme);\n  }\n  else\n  {\n    $is_mobile_theme = pwg_get_session_var('mobile_theme');\n  }\n\n  if (is_null($is_mobile_theme))\n  {\n    $is_mobile_theme = (get_device() == 'mobile');\n    pwg_set_session_var('mobile_theme', $is_mobile_theme);\n  }\n\n  return $is_mobile_theme;\n}\n\n/**\n * check url format\n *\n * @param string $url\n * @return bool\n */\nfunction url_check_format($url)\n{\n  if (strpos($url, '\"') !== false)\n  {\n    return false;\n  }\n\n  if (strncmp($url, 'http://', 7) !== 0 and strncmp($url, 'https://', 8) !== 0)\n  {\n    return false;\n  }\n\n  return filter_var($url, FILTER_VALIDATE_URL)!==false;\n}\n\n/**\n * check email format\n *\n * @param string $mail_address\n * @return bool\n */\nfunction email_check_format($mail_address)\n{\n  return filter_var($mail_address, FILTER_VALIDATE_EMAIL)!==false;\n}\n\n/**\n * returns the number of available comments for the connected user\n *\n * @return int\n */\nfunction get_nb_available_comments()\n{\n  global $user;\n  if (!isset($user['nb_available_comments']))\n  {\n    $where = array();\n    if ( !is_admin() )\n      $where[] = 'validated=\\'true\\'';\n    $where[] = get_sql_condition_FandF\n      (\n        array\n          (\n            'forbidden_categories' => 'category_id',\n            'forbidden_images' => 'ic.image_id'\n          ),\n        '', true\n      );\n\n    $query = '\nSELECT COUNT(DISTINCT(com.id))\n  FROM '.IMAGE_CATEGORY_TABLE.' AS ic\n    INNER JOIN '.COMMENTS_TABLE.' AS com\n    ON ic.image_id = com.image_id\n  WHERE '.implode('\n    AND ', $where);\n    list($user['nb_available_comments']) = pwg_db_fetch_row(pwg_query($query));\n\n    single_update(USER_CACHE_TABLE,\n      array('nb_available_comments'=>$user['nb_available_comments']),\n      array('user_id'=>$user['id'])\n      );\n  }\n  return $user['nb_available_comments'];\n}\n\n/**\n * Compare two versions with version_compare after having converted\n * single chars to their decimal values.\n * Needed because version_compare does not understand versions like '2.5.c'.\n * @since 2.6\n *\n * @param string $a\n * @param string $b\n * @param string $op\n */\nfunction safe_version_compare($a, $b, $op=null)\n{\n  $replace_chars   = function($m)  { return ord(strtolower($m[1])); };\n\n  // add dot before groups of letters (version_compare does the same thing)\n  $a = preg_replace('#([0-9]+)([a-z]+)#i', '$1.$2', $a);\n  $b = preg_replace('#([0-9]+)([a-z]+)#i', '$1.$2', $b);\n\n  // apply ord() to any single letter\n  $a = preg_replace_callback('#\\b([a-z]{1})\\b#i', $replace_chars, $a);\n  $b = preg_replace_callback('#\\b([a-z]{1})\\b#i', $replace_chars, $b);\n\n  if (empty($op))\n  {\n    return version_compare($a, $b);\n  }\n  else\n  {\n    return version_compare($a, $b, $op);\n  }\n}\n\n/**\n * Checks if the lounge needs to be emptied automatically.\n *\n * @since 12\n */\nfunction check_lounge()\n{\n  global $conf;\n\n  if (!isset($conf['lounge_active']) or !$conf['lounge_active'])\n  {\n    return;\n  }\n\n  if (isset($_REQUEST['method']) and in_array($_REQUEST['method'], array('pwg.images.upload', 'pwg.images.uploadAsync')))\n  {\n    return;\n  }\n\n  // is the oldest photo in the lounge older than lounge maximum waiting time?\n  $query = '\nSELECT\n    image_id,\n    date_available,\n    NOW() AS dbnow\n  FROM '.LOUNGE_TABLE.'\n    JOIN '.IMAGES_TABLE.' ON image_id = id\n  ORDER BY image_id ASC\n  LIMIT 1\n;';\n  $voyagers = query2array($query);\n  if (count($voyagers))\n  {\n    $voyager = $voyagers[0];\n    $age = strtotime($voyager['dbnow']) - strtotime($voyager['date_available']);\n\n    if ($age > $conf['lounge_max_duration'])\n    {\n      include_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\n      empty_lounge();\n    }\n  }\n}\n\n?>\n"], "filenames": ["include/functions.inc.php"], "buggy_code_start_loc": [621], "buggy_code_end_loc": [622], "fixing_code_start_loc": [621], "fixing_code_end_loc": [622], "type": "CWE-89", "message": "Piwigo is open source photo gallery software. Prior to version 13.8.0, there is a SQL Injection vulnerability in the login of the administrator screen. The SQL statement that acquires the HTTP Header `User-Agent` is vulnerable at the endpoint that records user information when logging in to the administrator screen. It is possible to execute arbitrary SQL statements. Someone who wants to exploit the vulnerability must be log in to the administrator screen, even with low privileges. Any SQL statement can be executed. Doing so may leak information from the database. Version 13.8.0 contains a fix for this issue. As another mitigation, those who want to execute a SQL statement verbatim with user-enterable parameters should be sure to escape the parameter contents appropriately.", "other": {"cve": {"id": "CVE-2023-37270", "sourceIdentifier": "security-advisories@github.com", "published": "2023-07-07T22:15:09.570", "lastModified": "2023-07-14T16:47:38.063", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Piwigo is open source photo gallery software. Prior to version 13.8.0, there is a SQL Injection vulnerability in the login of the administrator screen. The SQL statement that acquires the HTTP Header `User-Agent` is vulnerable at the endpoint that records user information when logging in to the administrator screen. It is possible to execute arbitrary SQL statements. Someone who wants to exploit the vulnerability must be log in to the administrator screen, even with low privileges. Any SQL statement can be executed. Doing so may leak information from the database. Version 13.8.0 contains a fix for this issue. As another mitigation, those who want to execute a SQL statement verbatim with user-enterable parameters should be sure to escape the parameter contents appropriately."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:piwigo:piwigo:*:*:*:*:*:*:*:*", "versionEndExcluding": "13.8.0", "matchCriteriaId": "E9188B4E-C34F-4967-8D30-2AE1AEB51C50"}]}]}], "references": [{"url": "https://github.com/Piwigo/Piwigo/blob/c01ec38bc43f09424a8d404719c35f963d63cf00/include/dblayer/functions_mysqli.inc.php#L491", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/Piwigo/Piwigo/blob/c01ec38bc43f09424a8d404719c35f963d63cf00/include/functions.inc.php#L621", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/Piwigo/Piwigo/commit/978425527d6c113887f845d75cf982bbb62d761a", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Piwigo/Piwigo/security/advisories/GHSA-934w-qj9p-3qcx", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://piwigo.org/release-13.8.0", "source": "security-advisories@github.com", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/Piwigo/Piwigo/commit/978425527d6c113887f845d75cf982bbb62d761a"}}