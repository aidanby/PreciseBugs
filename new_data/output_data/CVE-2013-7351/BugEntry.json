{"buggy_code": ["<?php\n// Shaarli 0.0.41 beta - Shaare your links...\n// The personal, minimalist, super-fast, no-database delicious clone. By sebsauvage.net\n// http://sebsauvage.net/wiki/doku.php?id=php:shaarli\n// Licence: http://www.opensource.org/licenses/zlib-license.php\n// Requires: php 5.1.x  (but autocomplete fields will only work if you have php 5.2.x)\n// -----------------------------------------------------------------------------------------------\n// NEVER TRUST IN PHP.INI\n// Some hosts do not define a default timezone in php.ini,\n// so we have to do this for avoid the strict standard error.\ndate_default_timezone_set('UTC');\n\n// -----------------------------------------------------------------------------------------------\n// Hardcoded parameter (These parameters can be overwritten by creating the file /config/options.php)\n$GLOBALS['config']['DATADIR'] = 'data'; // Data subdirectory\n$GLOBALS['config']['CONFIG_FILE'] = $GLOBALS['config']['DATADIR'].'/config.php'; // Configuration file (user login/password)\n$GLOBALS['config']['DATASTORE'] = $GLOBALS['config']['DATADIR'].'/datastore.php'; // Data storage file.\n$GLOBALS['config']['LINKS_PER_PAGE'] = 20; // Default links per page.\n$GLOBALS['config']['IPBANS_FILENAME'] = $GLOBALS['config']['DATADIR'].'/ipbans.php'; // File storage for failures and bans.\n$GLOBALS['config']['BAN_AFTER'] = 4;        // Ban IP after this many failures.\n$GLOBALS['config']['BAN_DURATION'] = 1800;  // Ban duration for IP address after login failures (in seconds) (1800 sec. = 30 minutes)\n$GLOBALS['config']['OPEN_SHAARLI'] = false; // If true, anyone can add/edit/delete links without having to login\n$GLOBALS['config']['HIDE_TIMESTAMPS'] = false; // If true, the moment when links were saved are not shown to users that are not logged in.\n$GLOBALS['config']['ENABLE_THUMBNAILS'] = true; // Enable thumbnails in links.\n$GLOBALS['config']['CACHEDIR'] = 'cache'; // Cache directory for thumbnails for SLOW services (like flickr)\n$GLOBALS['config']['PAGECACHE'] = 'pagecache'; // Page cache directory.\n$GLOBALS['config']['ENABLE_LOCALCACHE'] = true; // Enable Shaarli to store thumbnail in a local cache. Disable to reduce webspace usage.\n$GLOBALS['config']['PUBSUBHUB_URL'] = ''; // PubSubHubbub support. Put an empty string to disable, or put your hub url here to enable.\n$GLOBALS['config']['UPDATECHECK_FILENAME'] = $GLOBALS['config']['DATADIR'].'/lastupdatecheck.txt'; // For updates check of Shaarli.\n$GLOBALS['config']['UPDATECHECK_INTERVAL'] = 86400 ; // Updates check frequency for Shaarli. 86400 seconds=24 hours\n                                          // Note: You must have publisher.php in the same directory as Shaarli index.php\n// -----------------------------------------------------------------------------------------------\n// You should not touch below (or at your own risks !)\n// Optionnal config file.\nif (is_file($GLOBALS['config']['DATADIR'].'/options.php')) require($GLOBALS['config']['DATADIR'].'/options.php');\n\ndefine('shaarli_version','0.0.41 beta');\ndefine('PHPPREFIX','<?php /* '); // Prefix to encapsulate data in php code.\ndefine('PHPSUFFIX',' */ ?>'); // Suffix to encapsulate data in php code.\n\n// Force cookie path (but do not change lifetime)\n$cookie=session_get_cookie_params();\n$cookiedir = ''; if(dirname($_SERVER['SCRIPT_NAME'])!='/') $cookiedir=dirname($_SERVER[\"SCRIPT_NAME\"]).'/';\nsession_set_cookie_params($cookie['lifetime'],$cookiedir,$_SERVER['HTTP_HOST']); // Set default cookie expiration and path.\n\n// Set session parameters on server side.\ndefine('INACTIVITY_TIMEOUT',3600); // (in seconds). If the user does not access any page within this time, his/her session is considered expired.\nini_set('session.use_cookies', 1);       // Use cookies to store session.\nini_set('session.use_only_cookies', 1);  // Force cookies for session (phpsessionID forbidden in URL)\nini_set('session.use_trans_sid', false); // Prevent php to use sessionID in URL if cookies are disabled.\nsession_name('shaarli');\nif (session_id() == '') session_start();  // Start session if needed (Some server auto-start sessions).\n\n// PHP Settings\nini_set('max_input_time','60');  // High execution time in case of problematic imports/exports.\nini_set('memory_limit', '128M');  // Try to set max upload file size and read (May not work on some hosts).\nini_set('post_max_size', '16M');\nini_set('upload_max_filesize', '16M');\ncheckphpversion();\nerror_reporting(E_ALL^E_WARNING);  // See all error except warnings.\n//error_reporting(-1); // See all errors (for debugging only)\n\ninclude \"inc/rain.tpl.class.php\"; //include Rain TPL\nraintpl::$tpl_dir = \"tpl/\"; // template directory\nif (!is_dir('tmp')) { mkdir('tmp',0705); chmod('tmp',0705); }\nraintpl::$cache_dir = \"tmp/\"; // cache directory\n\nob_start();  // Output buffering for the page cache.\n\n\n// In case stupid admin has left magic_quotes enabled in php.ini:\nif (get_magic_quotes_gpc())\n{\n    function stripslashes_deep($value) { $value = is_array($value) ? array_map('stripslashes_deep', $value) : stripslashes($value); return $value; }\n    $_POST = array_map('stripslashes_deep', $_POST);\n    $_GET = array_map('stripslashes_deep', $_GET);\n    $_COOKIE = array_map('stripslashes_deep', $_COOKIE);\n}\n\n// Prevent caching on client side or proxy: (yes, it's ugly)\nheader(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\");\nheader(\"Cache-Control: no-store, no-cache, must-revalidate\");\nheader(\"Cache-Control: post-check=0, pre-check=0\", false);\nheader(\"Pragma: no-cache\");\n\n// Directories creations (Note that your web host may require differents rights than 705.)\nif (!is_writable(realpath(dirname(__FILE__)))) die('<pre>ERROR: Shaarli does not have the right to write in its own directory ('.realpath(dirname(__FILE__)).').</pre>');\nif (!is_dir($GLOBALS['config']['DATADIR'])) { mkdir($GLOBALS['config']['DATADIR'],0705); chmod($GLOBALS['config']['DATADIR'],0705); }\nif (!is_dir('tmp')) { mkdir('tmp',0705); chmod('tmp',0705); } // For RainTPL temporary files.\nif (!is_file($GLOBALS['config']['DATADIR'].'/.htaccess')) { file_put_contents($GLOBALS['config']['DATADIR'].'/.htaccess',\"Allow from none\\nDeny from all\\n\"); } // Protect data files.\n// Second check to see if Shaarli can write in its directory, because on some hosts is_writable() is not reliable.\nif (!is_file($GLOBALS['config']['DATADIR'].'/.htaccess')) die('<pre>ERROR: Shaarli does not have the right to write in its data directory ('.realpath($GLOBALS['config']['DATADIR']).').</pre>');\nif ($GLOBALS['config']['ENABLE_LOCALCACHE'])\n{\n    if (!is_dir($GLOBALS['config']['CACHEDIR'])) { mkdir($GLOBALS['config']['CACHEDIR'],0705); chmod($GLOBALS['config']['CACHEDIR'],0705); }\n    if (!is_file($GLOBALS['config']['CACHEDIR'].'/.htaccess')) { file_put_contents($GLOBALS['config']['CACHEDIR'].'/.htaccess',\"Allow from none\\nDeny from all\\n\"); } // Protect data files.\n}\n\n// Handling of old config file which do not have the new parameters.\nif (empty($GLOBALS['title'])) $GLOBALS['title']='Shared links on '.htmlspecialchars(indexUrl());\nif (empty($GLOBALS['timezone'])) $GLOBALS['timezone']=date_default_timezone_get();\nif (empty($GLOBALS['redirector'])) $GLOBALS['redirector']='';\nif (empty($GLOBALS['disablesessionprotection'])) $GLOBALS['disablesessionprotection']=false;\nif (empty($GLOBALS['disablejquery'])) $GLOBALS['disablejquery']=false;\nif (empty($GLOBALS['privateLinkByDefault'])) $GLOBALS['privateLinkByDefault']=false;\n// I really need to rewrite Shaarli with a proper configuation manager.\n\n// Run config screen if first run:\nif (!is_file($GLOBALS['config']['CONFIG_FILE'])) install();\n\nrequire $GLOBALS['config']['CONFIG_FILE'];  // Read login/password hash into $GLOBALS.\n\n\nautoLocale(); // Sniff browser language and set date format accordingly.\nheader('Content-Type: text/html; charset=utf-8'); // We use UTF-8 for proper international characters handling.\n\n// Check php version\nfunction checkphpversion()\n{\n    if (version_compare(PHP_VERSION, '5.1.0') < 0)\n    {\n        header('Content-Type: text/plain; charset=utf-8');\n        echo 'Your server supports php '.PHP_VERSION.'. Shaarli requires at least php 5.1.0, and thus cannot run. Sorry.';\n        exit;\n    }\n}\n\n// Checks if an update is available for Shaarli.\n// (at most once a day, and only for registered user.)\n// Output: '' = no new version.\n//         other= the available version.\nfunction checkUpdate()\n{\n    if (!isLoggedIn()) return ''; // Do not check versions for visitors.\n\n    // Get latest version number at most once a day.\n    if (!is_file($GLOBALS['config']['UPDATECHECK_FILENAME']) || (filemtime($GLOBALS['config']['UPDATECHECK_FILENAME'])<time()-($GLOBALS['config']['UPDATECHECK_INTERVAL'])))\n    {\n        $version=shaarli_version;\n        list($httpstatus,$headers,$data) = getHTTP('http://sebsauvage.net/files/shaarli_version.txt',2);\n        if (strpos($httpstatus,'200 OK')!==false) $version=$data;\n        // If failed, nevermind. We don't want to bother the user with that.\n        file_put_contents($GLOBALS['config']['UPDATECHECK_FILENAME'],$version); // touch file date\n    }\n    // Compare versions:\n    $newestversion=file_get_contents($GLOBALS['config']['UPDATECHECK_FILENAME']);\n    if (version_compare($newestversion,shaarli_version)==1) return $newestversion;\n    return '';\n}\n\n\n// -----------------------------------------------------------------------------------------------\n// Simple cache system (mainly for the RSS/ATOM feeds).\n\nclass pageCache\n{\n    private $url; // Full URL of the page to cache (typically the value returned by pageUrl())\n    private $shouldBeCached; // boolean: Should this url be cached ?\n    private $filename; // Name of the cache file for this url\n\n    /*\n         $url = url (typically the value returned by pageUrl())\n         $shouldBeCached = boolean. If false, the cache will be disabled.\n    */\n    public function __construct($url,$shouldBeCached)\n    {\n        $this->url = $url;\n        $this->filename = $GLOBALS['config']['PAGECACHE'].'/'.sha1($url).'.cache';\n        $this->shouldBeCached = $shouldBeCached;\n    }\n\n    // If the page should be cached and a cached version exists,\n    // returns the cached version (otherwise, return null).\n    public function cachedVersion()\n    {\n        if (!$this->shouldBeCached) return null;\n        if (is_file($this->filename)) { return file_get_contents($this->filename); exit; }\n        return null;\n    }\n\n    // Put a page in the cache.\n    public function cache($page)\n    {\n        if (!$this->shouldBeCached) return;\n        if (!is_dir($GLOBALS['config']['PAGECACHE'])) { mkdir($GLOBALS['config']['PAGECACHE'],0705); chmod($GLOBALS['config']['PAGECACHE'],0705); }\n        file_put_contents($this->filename,$page);\n    }\n\n    // Purge the whole cache.\n    // (call with pageCache::purgeCache())\n    public static function purgeCache()\n    {\n        if (is_dir($GLOBALS['config']['PAGECACHE']))\n        {\n            $handler = opendir($GLOBALS['config']['PAGECACHE']);\n            if ($handler!==false)\n            {\n                while (($filename = readdir($handler))!==false)\n                {\n                    if (endsWith($filename,'.cache')) { unlink($GLOBALS['config']['PAGECACHE'].'/'.$filename); }\n                }\n                closedir($handler);\n            }\n        }\n    }\n\n}\n\n\n// -----------------------------------------------------------------------------------------------\n// Log to text file\nfunction logm($message)\n{\n    $t = strval(date('Y/m/d_H:i:s')).' - '.$_SERVER[\"REMOTE_ADDR\"].' - '.strval($message).\"\\n\";\n    file_put_contents($GLOBALS['config']['DATADIR'].'/log.txt',$t,FILE_APPEND);\n}\n\n// Same as nl2br(), but escapes < and >\nfunction nl2br_escaped($html)\n{\n    return str_replace('>','&gt;',str_replace('<','&lt;',nl2br($html)));\n}\n\n/* Returns the small hash of a string\n   eg. smallHash('20111006_131924') --> yZH23w\n   Small hashes:\n     - are unique (well, as unique as crc32, at last)\n     - are always 6 characters long.\n     - only use the following characters: a-z A-Z 0-9 - _ @\n     - are NOT cryptographically secure (they CAN be forged)\n   In Shaarli, they are used as a tinyurl-like link to individual entries.\n*/\nfunction smallHash($text)\n{\n    $t = rtrim(base64_encode(hash('crc32',$text,true)),'=');\n    $t = str_replace('+','-',$t); // Get rid of characters which need encoding in URLs.\n    $t = str_replace('/','_',$t);\n    $t = str_replace('=','@',$t);\n    return $t;\n}\n\n// In a string, converts urls to clickable links.\n// Function inspired from http://www.php.net/manual/en/function.preg-replace.php#85722\nfunction text2clickable($url)\n{\n    $redir = empty($GLOBALS['redirector']) ? '' : $GLOBALS['redirector'];\n    return preg_replace('!(((?:https?|ftp|file)://|apt:|magnet:)\\S+[[:alnum:]]/?)!si','<a href=\"'.$redir.'$1\" rel=\"nofollow\">$1</a>',$url);\n}\n\n// This function inserts &nbsp; where relevant so that multiple spaces are properly displayed in HTML\n// even in the absence of <pre>  (This is used in description to keep text formatting)\nfunction keepMultipleSpaces($text)\n{\n    return str_replace('  ',' &nbsp;',$text);\n\n}\n// ------------------------------------------------------------------------------------------\n// Sniff browser language to display dates in the right format automatically.\n// (Note that is may not work on your server if the corresponding local is not installed.)\nfunction autoLocale()\n{\n    $loc='en_US'; // Default if browser does not send HTTP_ACCEPT_LANGUAGE\n    if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) // eg. \"fr,fr-fr;q=0.8,en;q=0.5,en-us;q=0.3\"\n    {   // (It's a bit crude, but it works very well. Prefered language is always presented first.)\n        if (preg_match('/([a-z]{2}(-[a-z]{2})?)/i',$_SERVER['HTTP_ACCEPT_LANGUAGE'],$matches)) $loc=$matches[1];\n    }\n    setlocale(LC_TIME,$loc);  // LC_TIME = Set local for date/time format only.\n}\n\n// ------------------------------------------------------------------------------------------\n// PubSubHubbub protocol support (if enabled)  [UNTESTED]\n// (Source: http://aldarone.fr/les-flux-rss-shaarli-et-pubsubhubbub/ )\nif (!empty($GLOBALS['config']['PUBSUBHUB_URL'])) include './publisher.php';\nfunction pubsubhub()\n{\n    if (!empty($GLOBALS['config']['PUBSUBHUB_URL']))\n    {\n       $p = new Publisher($GLOBALS['config']['PUBSUBHUB_URL']);\n       $topic_url = array (\n                       indexUrl().'?do=atom',\n                       indexUrl().'?do=rss'\n                    );\n       $p->publish_update($topic_url);\n    }\n}\n\n// ------------------------------------------------------------------------------------------\n// Session management\n\n// Returns the IP address of the client (Used to prevent session cookie hijacking.)\nfunction allIPs()\n{\n    $ip = $_SERVER[\"REMOTE_ADDR\"];\n    // Then we use more HTTP headers to prevent session hijacking from users behind the same proxy.\n    if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $ip=$ip.'_'.$_SERVER['HTTP_X_FORWARDED_FOR']; }\n    if (isset($_SERVER['HTTP_CLIENT_IP'])) { $ip=$ip.'_'.$_SERVER['HTTP_CLIENT_IP']; }\n    return $ip;\n}\n\n// Check that user/password is correct.\nfunction check_auth($login,$password)\n{\n    $hash = sha1($password.$login.$GLOBALS['salt']);\n    if ($login==$GLOBALS['login'] && $hash==$GLOBALS['hash'])\n    {   // Login/password is correct.\n        $_SESSION['uid'] = sha1(uniqid('',true).'_'.mt_rand()); // generate unique random number (different than phpsessionid)\n        $_SESSION['ip']=allIPs();                // We store IP address(es) of the client to make sure session is not hijacked.\n        $_SESSION['username']=$login;\n        $_SESSION['expires_on']=time()+INACTIVITY_TIMEOUT;  // Set session expiration.\n        logm('Login successful');\n        return True;\n    }\n    logm('Login failed for user '.$login);\n    return False;\n}\n\n// Returns true if the user is logged in.\nfunction isLoggedIn()\n{\n    if ($GLOBALS['config']['OPEN_SHAARLI']) return true;\n\n    if (!isset($GLOBALS['login'])) return false;  // Shaarli is not configured yet.\n\n    // If session does not exist on server side, or IP address has changed, or session has expired, logout.\n    if (empty($_SESSION['uid']) || ($GLOBALS['disablesessionprotection']==false && $_SESSION['ip']!=allIPs()) || time()>=$_SESSION['expires_on'])\n    {\n        logout();\n        return false;\n    }\n    if (!empty($_SESSION['longlastingsession']))  $_SESSION['expires_on']=time()+$_SESSION['longlastingsession']; // In case of \"Stay signed in\" checked.\n    else $_SESSION['expires_on']=time()+INACTIVITY_TIMEOUT; // Standard session expiration date.\n\n    return true;\n}\n\n// Force logout.\nfunction logout() { if (isset($_SESSION)) { unset($_SESSION['uid']); unset($_SESSION['ip']); unset($_SESSION['username']); unset($_SESSION['privateonly']); }  }\n\n\n// ------------------------------------------------------------------------------------------\n// Brute force protection system\n// Several consecutive failed logins will ban the IP address for 30 minutes.\nif (!is_file($GLOBALS['config']['IPBANS_FILENAME'])) file_put_contents($GLOBALS['config']['IPBANS_FILENAME'], \"<?php\\n\\$GLOBALS['IPBANS']=\".var_export(array('FAILURES'=>array(),'BANS'=>array()),true).\";\\n?>\");\ninclude $GLOBALS['config']['IPBANS_FILENAME'];\n// Signal a failed login. Will ban the IP if too many failures:\nfunction ban_loginFailed()\n{\n    $ip=$_SERVER[\"REMOTE_ADDR\"]; $gb=$GLOBALS['IPBANS'];\n    if (!isset($gb['FAILURES'][$ip])) $gb['FAILURES'][$ip]=0;\n    $gb['FAILURES'][$ip]++;\n    if ($gb['FAILURES'][$ip]>($GLOBALS['config']['BAN_AFTER']-1))\n    {\n        $gb['BANS'][$ip]=time()+$GLOBALS['config']['BAN_DURATION'];\n        logm('IP address banned from login');\n    }\n    $GLOBALS['IPBANS'] = $gb;\n    file_put_contents($GLOBALS['config']['IPBANS_FILENAME'], \"<?php\\n\\$GLOBALS['IPBANS']=\".var_export($gb,true).\";\\n?>\");\n}\n\n// Signals a successful login. Resets failed login counter.\nfunction ban_loginOk()\n{\n    $ip=$_SERVER[\"REMOTE_ADDR\"]; $gb=$GLOBALS['IPBANS'];\n    unset($gb['FAILURES'][$ip]); unset($gb['BANS'][$ip]);\n    $GLOBALS['IPBANS'] = $gb;\n    file_put_contents($GLOBALS['config']['IPBANS_FILENAME'], \"<?php\\n\\$GLOBALS['IPBANS']=\".var_export($gb,true).\";\\n?>\");\n}\n\n// Checks if the user CAN login. If 'true', the user can try to login.\nfunction ban_canLogin()\n{\n    $ip=$_SERVER[\"REMOTE_ADDR\"]; $gb=$GLOBALS['IPBANS'];\n    if (isset($gb['BANS'][$ip]))\n    {\n        // User is banned. Check if the ban has expired:\n        if ($gb['BANS'][$ip]<=time())\n        {   // Ban expired, user can try to login again.\n            logm('Ban lifted.');\n            unset($gb['FAILURES'][$ip]); unset($gb['BANS'][$ip]);\n            file_put_contents($GLOBALS['config']['IPBANS_FILENAME'], \"<?php\\n\\$GLOBALS['IPBANS']=\".var_export($gb,true).\";\\n?>\");\n            return true; // Ban has expired, user can login.\n        }\n        return false; // User is banned.\n    }\n    return true; // User is not banned.\n}\n\n// ------------------------------------------------------------------------------------------\n// Process login form: Check if login/password is correct.\nif (isset($_POST['login']))\n{\n    if (!ban_canLogin()) die('I said: NO. You are banned for the moment. Go away.');\n    if (isset($_POST['password']) && tokenOk($_POST['token']) && (check_auth($_POST['login'], $_POST['password'])))\n    {   // Login/password is ok.\n        ban_loginOk();\n        // If user wants to keep the session cookie even after the browser closes:\n        if (!empty($_POST['longlastingsession']))\n        {\n            $_SESSION['longlastingsession']=31536000;  // (31536000 seconds = 1 year)\n            $_SESSION['expires_on']=time()+$_SESSION['longlastingsession'];  // Set session expiration on server-side.\n\n            $cookiedir = ''; if(dirname($_SERVER['SCRIPT_NAME'])!='/') $cookiedir=dirname($_SERVER[\"SCRIPT_NAME\"]).'/';\n            session_set_cookie_params($_SESSION['longlastingsession'],$cookiedir,$_SERVER['HTTP_HOST']); // Set session cookie expiration on client side\n            // Note: Never forget the trailing slash on the cookie path !\n            session_regenerate_id(true);  // Send cookie with new expiration date to browser.\n        }\n        else // Standard session expiration (=when browser closes)\n        {\n            $cookiedir = ''; if(dirname($_SERVER['SCRIPT_NAME'])!='/') $cookiedir=dirname($_SERVER[\"SCRIPT_NAME\"]).'/';\n            session_set_cookie_params(0,$cookiedir,$_SERVER['HTTP_HOST']); // 0 means \"When browser closes\"\n            session_regenerate_id(true);\n        }\n        // Optional redirect after login:\n        if (isset($_GET['post'])) { header('Location: ?post='.urlencode($_GET['post']).(!empty($_GET['title'])?'&title='.urlencode($_GET['title']):'').(!empty($_GET['source'])?'&source='.urlencode($_GET['source']):'')); exit; }\n        if (isset($_POST['returnurl']))\n        {\n            if (endsWith($_POST['returnurl'],'?do=login')) { header('Location: ?'); exit; } // Prevent loops over login screen.\n            header('Location: '.$_POST['returnurl']); exit;\n        }\n        header('Location: ?'); exit;\n    }\n    else\n    {\n        ban_loginFailed();\n        $redir = '';\n        if (isset($_GET['post'])) { $redir = '&post='.urlencode($_GET['post']).(!empty($_GET['title'])?'&title='.urlencode($_GET['title']):'').(!empty($_GET['source'])?'&source='.urlencode($_GET['source']):'');  }\n        echo '<script language=\"JavaScript\">alert(\"Wrong login/password.\");document.location=\\'?do=login'.$redir.'\\';</script>'; // Redirect to login screen.\n        exit;\n    }\n}\n\n// ------------------------------------------------------------------------------------------\n// Misc utility functions:\n\n// Returns the server URL (including port and http/https), without path.\n// eg. \"http://myserver.com:8080\"\n// You can append $_SERVER['SCRIPT_NAME'] to get the current script URL.\nfunction serverUrl()\n{\n    $https = (!empty($_SERVER['HTTPS']) && (strtolower($_SERVER['HTTPS'])=='on')) || $_SERVER[\"SERVER_PORT\"]=='443'; // HTTPS detection.\n    $serverport = ($_SERVER[\"SERVER_PORT\"]=='80' || ($https && $_SERVER[\"SERVER_PORT\"]=='443') ? '' : ':'.$_SERVER[\"SERVER_PORT\"]);\n    return 'http'.($https?'s':'').'://'.$_SERVER['HTTP_HOST'].$serverport;\n}\n\n// Returns the absolute URL of current script, without the query.\n// (eg. http://sebsauvage.net/links/)\nfunction indexUrl()\n{\n    $scriptname = $_SERVER[\"SCRIPT_NAME\"];\n    // If the script is named 'index.php', we remove it (for better looking URLs,\n    // eg. http://mysite.com/shaarli/?abcde instead of http://mysite.com/shaarli/index.php?abcde)\n    if (endswith($scriptname,'index.php')) $scriptname = substr($scriptname,0,strlen($scriptname)-9);\n    return serverUrl() . $scriptname;\n}\n\n// Returns the absolute URL of current script, WITH the query.\n// (eg. http://sebsauvage.net/links/?toto=titi&spamspamspam=humbug)\nfunction pageUrl()\n{\n    return indexUrl().(!empty($_SERVER[\"QUERY_STRING\"]) ? '?'.$_SERVER[\"QUERY_STRING\"] : '');\n}\n\n// Convert post_max_size/upload_max_filesize (eg.'16M') parameters to bytes.\nfunction return_bytes($val)\n{\n    $val = trim($val); $last=strtolower($val[strlen($val)-1]);\n    switch($last)\n    {\n        case 'g': $val *= 1024;\n        case 'm': $val *= 1024;\n        case 'k': $val *= 1024;\n    }\n    return $val;\n}\n\n// Try to determine max file size for uploads (POST).\n// Returns an integer (in bytes)\nfunction getMaxFileSize()\n{\n    $size1 = return_bytes(ini_get('post_max_size'));\n    $size2 = return_bytes(ini_get('upload_max_filesize'));\n    // Return the smaller of two:\n    $maxsize = min($size1,$size2);\n    // FIXME: Then convert back to readable notations ? (eg. 2M instead of 2000000)\n    return $maxsize;\n}\n\n// Tells if a string start with a substring or not.\nfunction startsWith($haystack,$needle,$case=true)\n{\n    if($case){return (strcmp(substr($haystack, 0, strlen($needle)),$needle)===0);}\n    return (strcasecmp(substr($haystack, 0, strlen($needle)),$needle)===0);\n}\n\n// Tells if a string ends with a substring or not.\nfunction endsWith($haystack,$needle,$case=true)\n{\n    if($case){return (strcmp(substr($haystack, strlen($haystack) - strlen($needle)),$needle)===0);}\n    return (strcasecmp(substr($haystack, strlen($haystack) - strlen($needle)),$needle)===0);\n}\n\n/*  Converts a linkdate time (YYYYMMDD_HHMMSS) of an article to a timestamp (Unix epoch)\n    (used to build the ADD_DATE attribute in Netscape-bookmarks file)\n    PS: I could have used strptime(), but it does not exist on Windows. I'm too kind. */\nfunction linkdate2timestamp($linkdate)\n{\n    $Y=$M=$D=$h=$m=$s=0;\n    $r = sscanf($linkdate,'%4d%2d%2d_%2d%2d%2d',$Y,$M,$D,$h,$m,$s);\n    return mktime($h,$m,$s,$M,$D,$Y);\n}\n\n/*  Converts a linkdate time (YYYYMMDD_HHMMSS) of an article to a RFC822 date.\n    (used to build the pubDate attribute in RSS feed.)  */\nfunction linkdate2rfc822($linkdate)\n{\n    return date('r',linkdate2timestamp($linkdate)); // 'r' is for RFC822 date format.\n}\n\n/*  Converts a linkdate time (YYYYMMDD_HHMMSS) of an article to a ISO 8601 date.\n    (used to build the updated tags in ATOM feed.)  */\nfunction linkdate2iso8601($linkdate)\n{\n    return date('c',linkdate2timestamp($linkdate)); // 'c' is for ISO 8601 date format.\n}\n\n/*  Converts a linkdate time (YYYYMMDD_HHMMSS) of an article to a localized date format.\n    (used to display link date on screen)\n    The date format is automatically chosen according to locale/languages sniffed from browser headers (see autoLocale()). */\nfunction linkdate2locale($linkdate)\n{\n    return utf8_encode(strftime('%c',linkdate2timestamp($linkdate))); // %c is for automatic date format according to locale.\n    // Note that if you use a local which is not installed on your webserver,\n    // the date will not be displayed in the chosen locale, but probably in US notation.\n}\n\n// Parse HTTP response headers and return an associative array.\nfunction http_parse_headers_shaarli( $headers )\n{\n    $res=array();\n    foreach($headers as $header)\n    {\n        $i = strpos($header,': ');\n        if ($i!==false)\n        {\n            $key=substr($header,0,$i);\n            $value=substr($header,$i+2,strlen($header)-$i-2);\n            $res[$key]=$value;\n        }\n    }\n    return $res;\n}\n\n/* GET an URL.\n   Input: $url : url to get (http://...)\n          $timeout : Network timeout (will wait this many seconds for an anwser before giving up).\n   Output: An array.  [0] = HTTP status message (eg. \"HTTP/1.1 200 OK\") or error message\n                      [1] = associative array containing HTTP response headers (eg. echo getHTTP($url)[1]['Content-Type'])\n                      [2] = data\n    Example: list($httpstatus,$headers,$data) = getHTTP('http://sebauvage.net/');\n             if (strpos($httpstatus,'200 OK')!==false)\n                 echo 'Data type: '.htmlspecialchars($headers['Content-Type']);\n             else\n                 echo 'There was an error: '.htmlspecialchars($httpstatus)\n*/\nfunction getHTTP($url,$timeout=30)\n{\n    try\n    {\n        $options = array('http'=>array('method'=>'GET','timeout' => $timeout, 'user_agent' => 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:23.0) Gecko/20100101 Firefox/23.0')); // Force network timeout\n        $context = stream_context_create($options);\n        $data=file_get_contents($url,false,$context,-1, 4000000); // We download at most 4 Mb from source.\n        if (!$data) { return array('HTTP Error',array(),''); }\n        $httpStatus=$http_response_header[0]; // eg. \"HTTP/1.1 200 OK\"\n        $responseHeaders=http_parse_headers_shaarli($http_response_header);\n        return array($httpStatus,$responseHeaders,$data);\n    }\n    catch (Exception $e)  // getHTTP *can* fail silentely (we don't care if the title cannot be fetched)\n    {\n        return array($e->getMessage(),'','');\n    }\n}\n\n// Extract title from an HTML document.\n// (Returns an empty string if not found.)\nfunction html_extract_title($html)\n{\n  return preg_match('!<title>(.*?)</title>!is', $html, $matches) ? trim(str_replace(\"\\n\",' ', $matches[1])) : '' ;\n}\n\n// ------------------------------------------------------------------------------------------\n// Token management for XSRF protection\n// Token should be used in any form which acts on data (create,update,delete,import...).\nif (!isset($_SESSION['tokens'])) $_SESSION['tokens']=array();  // Token are attached to the session.\n\n// Returns a token.\nfunction getToken()\n{\n    $rnd = sha1(uniqid('',true).'_'.mt_rand().$GLOBALS['salt']);  // We generate a random string.\n    $_SESSION['tokens'][$rnd]=1;  // Store it on the server side.\n    return $rnd;\n}\n\n// Tells if a token is ok. Using this function will destroy the token.\n// true=token is ok.\nfunction tokenOk($token)\n{\n    if (isset($_SESSION['tokens'][$token]))\n    {\n        unset($_SESSION['tokens'][$token]); // Token is used: destroy it.\n        return true; // Token is ok.\n    }\n    return false; // Wrong token, or already used.\n}\n\n// ------------------------------------------------------------------------------------------\n/* This class is in charge of building the final page.\n   (This is basically a wrapper around RainTPL which pre-fills some fields.)\n   p = new pageBuilder;\n   p.assign('myfield','myvalue');\n   p.renderPage('mytemplate');\n\n*/\nclass pageBuilder\n{\n    private $tpl; // RainTPL template\n\n    function __construct()\n    {\n        $this->tpl=false;\n    }\n\n    private function initialize()\n    {\n        $this->tpl = new RainTPL;\n        $this->tpl->assign('newversion',checkUpdate());\n        $this->tpl->assign('feedurl',htmlspecialchars(indexUrl()));\n        $searchcrits=''; // Search criteria\n        if (!empty($_GET['searchtags'])) $searchcrits.='&searchtags='.urlencode($_GET['searchtags']);\n        elseif (!empty($_GET['searchterm'])) $searchcrits.='&searchterm='.urlencode($_GET['searchterm']);\n        $this->tpl->assign('searchcrits',$searchcrits);\n        $this->tpl->assign('source',indexUrl());\n        $this->tpl->assign('version',shaarli_version);\n        $this->tpl->assign('scripturl',indexUrl());\n        $this->tpl->assign('pagetitle','Shaarli');\n        $this->tpl->assign('privateonly',!empty($_SESSION['privateonly'])); // Show only private links ?\n        if (!empty($GLOBALS['title'])) $this->tpl->assign('pagetitle',$GLOBALS['title']);\n        if (!empty($GLOBALS['pagetitle'])) $this->tpl->assign('pagetitle',$GLOBALS['pagetitle']);\n        $this->tpl->assign('shaarlititle',empty($GLOBALS['title']) ? 'Shaarli': $GLOBALS['title'] );\n        return;\n    }\n\n    // The following assign() method is basically the same as RainTPL (except that it's lazy)\n    public function assign($what,$where)\n    {\n        if ($this->tpl===false) $this->initialize(); // Lazy initialization\n        $this->tpl->assign($what,$where);\n    }\n\n    // Render a specific page (using a template).\n    // eg. pb.renderPage('picwall')\n    public function renderPage($page)\n    {\n        if ($this->tpl===false) $this->initialize(); // Lazy initialization\n        $this->tpl->draw($page);\n    }\n}\n\n// ------------------------------------------------------------------------------------------\n/* Data storage for links.\n   This object behaves like an associative array.\n   Example:\n      $mylinks = new linkdb();\n      echo $mylinks['20110826_161819']['title'];\n      foreach($mylinks as $link)\n         echo $link['title'].' at url '.$link['url'].' ; description:'.$link['description'];\n\n   Available keys:\n       title : Title of the link\n       url : URL of the link. Can be absolute or relative. Relative URLs are permalinks (eg.'?m-ukcw')\n       description : description of the entry\n       private : Is this link private ? 0=no, other value=yes\n       linkdate : date of the creation of this entry, in the form YYYYMMDD_HHMMSS (eg.'20110914_192317')\n       tags : tags attached to this entry (separated by spaces)\n\n   We implement 3 interfaces:\n     - ArrayAccess so that this object behaves like an associative array.\n     - Iterator so that this object can be used in foreach() loops.\n     - Countable interface so that we can do a count() on this object.\n*/\nclass linkdb implements Iterator, Countable, ArrayAccess\n{\n    private $links; // List of links (associative array. Key=linkdate (eg. \"20110823_124546\"), value= associative array (keys:title,description...)\n    private $urls;  // List of all recorded URLs (key=url, value=linkdate) for fast reserve search (url-->linkdate)\n    private $keys;  // List of linkdate keys (for the Iterator interface implementation)\n    private $position; // Position in the $this->keys array. (for the Iterator interface implementation.)\n    private $loggedin; // Is the used logged in ? (used to filter private links)\n\n    // Constructor:\n    function __construct($isLoggedIn)\n    // Input : $isLoggedIn : is the used logged in ?\n    {\n        $this->loggedin = $isLoggedIn;\n        $this->checkdb(); // Make sure data file exists.\n        $this->readdb();  // Then read it.\n    }\n\n    // ---- Countable interface implementation\n    public function count() { return count($this->links); }\n\n    // ---- ArrayAccess interface implementation\n    public function offsetSet($offset, $value)\n    {\n        if (!$this->loggedin) die('You are not authorized to add a link.');\n        if (empty($value['linkdate']) || empty($value['url'])) die('Internal Error: A link should always have a linkdate and url.');\n        if (empty($offset)) die('You must specify a key.');\n        $this->links[$offset] = $value;\n        $this->urls[$value['url']]=$offset;\n    }\n    public function offsetExists($offset) { return array_key_exists($offset,$this->links); }\n    public function offsetUnset($offset)\n    {\n        if (!$this->loggedin) die('You are not authorized to delete a link.');\n        $url = $this->links[$offset]['url']; unset($this->urls[$url]);\n        unset($this->links[$offset]);\n    }\n    public function offsetGet($offset) { return isset($this->links[$offset]) ? $this->links[$offset] : null; }\n\n    // ---- Iterator interface implementation\n    function rewind() { $this->keys=array_keys($this->links); rsort($this->keys); $this->position=0; } // Start over for iteration, ordered by date (latest first).\n    function key() { return $this->keys[$this->position]; } // current key\n    function current() { return $this->links[$this->keys[$this->position]]; } // current value\n    function next() { ++$this->position; } // go to next item\n    function valid() { return isset($this->keys[$this->position]); }    // Check if current position is valid.\n\n    // ---- Misc methods\n    private function checkdb() // Check if db directory and file exists.\n    {\n        if (!file_exists($GLOBALS['config']['DATASTORE'])) // Create a dummy database for example.\n        {\n             $this->links = array();\n             $link = array('title'=>'Shaarli - sebsauvage.net','url'=>'http://sebsauvage.net/wiki/doku.php?id=php:shaarli','description'=>'Welcome to Shaarli ! This is a bookmark. To edit or delete me, you must first login.','private'=>0,'linkdate'=>'20110914_190000','tags'=>'opensource software');\n             $this->links[$link['linkdate']] = $link;\n             $link = array('title'=>'My secret stuff... - Pastebin.com','url'=>'http://sebsauvage.net/paste/?8434b27936c09649#bR7XsXhoTiLcqCpQbmOpBi3rq2zzQUC5hBI7ZT1O3x8=','description'=>'SShhhh!!  I\\'m a private link only YOU can see. You can delete me too.','private'=>1,'linkdate'=>'20110914_074522','tags'=>'secretstuff');\n             $this->links[$link['linkdate']] = $link;\n             file_put_contents($GLOBALS['config']['DATASTORE'], PHPPREFIX.base64_encode(gzdeflate(serialize($this->links))).PHPSUFFIX); // Write database to disk\n        }\n    }\n\n    // Read database from disk to memory\n    private function readdb()\n    {\n        // Read data\n        $this->links=(file_exists($GLOBALS['config']['DATASTORE']) ? unserialize(gzinflate(base64_decode(substr(file_get_contents($GLOBALS['config']['DATASTORE']),strlen(PHPPREFIX),-strlen(PHPSUFFIX))))) : array() );\n        // Note that gzinflate is faster than gzuncompress. See: http://www.php.net/manual/en/function.gzdeflate.php#96439\n\n        // If user is not logged in, filter private links.\n        if (!$this->loggedin)\n        {\n            $toremove=array();\n            foreach($this->links as $link) { if ($link['private']!=0) $toremove[]=$link['linkdate']; }\n            foreach($toremove as $linkdate) { unset($this->links[$linkdate]); }\n        }\n\n        // Keep the list of the mapping URLs-->linkdate up-to-date.\n        $this->urls=array();\n        foreach($this->links as $link) { $this->urls[$link['url']]=$link['linkdate']; }\n    }\n\n    // Save database from memory to disk.\n    public function savedb()\n    {\n        if (!$this->loggedin) die('You are not authorized to change the database.');\n        file_put_contents($GLOBALS['config']['DATASTORE'], PHPPREFIX.base64_encode(gzdeflate(serialize($this->links))).PHPSUFFIX);\n        invalidateCaches();\n    }\n\n    // Returns the link for a given URL (if it exists). false it does not exist.\n    public function getLinkFromUrl($url)\n    {\n        if (isset($this->urls[$url])) return $this->links[$this->urls[$url]];\n        return false;\n    }\n\n    // Case insentitive search among links (in url, title and description). Returns filtered list of links.\n    // eg. print_r($mydb->filterFulltext('hollandais'));\n    public function filterFulltext($searchterms)\n    {\n        // FIXME: explode(' ',$searchterms) and perform a AND search.\n        // FIXME: accept double-quotes to search for a string \"as is\" ?\n        $filtered=array();\n        $s = strtolower($searchterms);\n        foreach($this->links as $l)\n        {\n            $found=   (strpos(strtolower($l['title']),$s)!==false)\n                   || (strpos(strtolower($l['description']),$s)!==false)\n                   || (strpos(strtolower($l['url']),$s)!==false)\n                   || (strpos(strtolower($l['tags']),$s)!==false);\n            if ($found) $filtered[$l['linkdate']] = $l;\n        }\n        krsort($filtered);\n        return $filtered;\n    }\n\n    // Filter by tag.\n    // You can specify one or more tags (tags can be separated by space or comma).\n    // eg. print_r($mydb->filterTags('linux programming'));\n    public function filterTags($tags,$casesensitive=false)\n    {\n        $t = str_replace(',',' ',($casesensitive?$tags:strtolower($tags)));\n        $searchtags=explode(' ',$t);\n        $filtered=array();\n        foreach($this->links as $l)\n        {\n            $linktags = explode(' ',($casesensitive?$l['tags']:strtolower($l['tags'])));\n            if (count(array_intersect($linktags,$searchtags)) == count($searchtags))\n                $filtered[$l['linkdate']] = $l;\n        }\n        krsort($filtered);\n        return $filtered;\n    }\n\n    // Filter by day. Day must be in the form 'YYYYMMDD' (eg. '20120125')\n    // Sort order is: older articles first.\n    // eg. print_r($mydb->filterDay('20120125'));\n    public function filterDay($day)\n    {\n        $filtered=array();\n        foreach($this->links as $l)\n        {\n            if (startsWith($l['linkdate'],$day)) $filtered[$l['linkdate']] = $l;\n        }\n        ksort($filtered);\n        return $filtered;\n    }\n    // Filter by smallHash.\n    // Only 1 article is returned.\n    public function filterSmallHash($smallHash)\n    {\n        $filtered=array();\n        foreach($this->links as $l)\n        {\n            if ($smallHash==smallHash($l['linkdate'])) // Yes, this is ugly and slow\n            {\n                $filtered[$l['linkdate']] = $l;\n                return $filtered;\n            }\n        }\n        return $filtered;\n    }\n\n    // Returns the list of all tags\n    // Output: associative array key=tags, value=0\n    public function allTags()\n    {\n        $tags=array();\n        foreach($this->links as $link)\n            foreach(explode(' ',$link['tags']) as $tag)\n                if (!empty($tag)) $tags[$tag]=(empty($tags[$tag]) ? 1 : $tags[$tag]+1);\n        arsort($tags); // Sort tags by usage (most used tag first)\n        return $tags;\n    }\n\n    // Returns the list of days containing articles (oldest first)\n    // Output: An array containing days (in format YYYYMMDD).\n    public function days()\n    {\n        $linkdays=array();\n        foreach(array_keys($this->links) as $day)\n        {\n            $linkdays[substr($day,0,8)]=0;\n        }\n        $linkdays=array_keys($linkdays);\n        sort($linkdays);\n        return $linkdays;\n    }\n}\n\n// ------------------------------------------------------------------------------------------\n// Ouput the last N links in RSS 2.0 format.\nfunction showRSS()\n{\n    header('Content-Type: application/rss+xml; charset=utf-8');\n\n    // $usepermalink : If true, use permalink instead of final link.\n    // User just has to add 'permalink' in URL parameters. eg. http://mysite.com/shaarli/?do=rss&permalinks\n    $usepermalinks = isset($_GET['permalinks']);\n\n    // Cache system\n    $query = $_SERVER[\"QUERY_STRING\"];\n    $cache = new pageCache(pageUrl(),startsWith($query,'do=rss') && !isLoggedIn());\n    $cached = $cache->cachedVersion(); if (!empty($cached)) { echo $cached; exit; }\n\n    // If cached was not found (or not usable), then read the database and build the response:\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n\n    // Optionnaly filter the results:\n    $linksToDisplay=array();\n    if (!empty($_GET['searchterm'])) $linksToDisplay = $LINKSDB->filterFulltext($_GET['searchterm']);\n    elseif (!empty($_GET['searchtags']))   $linksToDisplay = $LINKSDB->filterTags(trim($_GET['searchtags']));\n    else $linksToDisplay = $LINKSDB;\n    $nblinksToDisplay = 50;  // Number of links to display.\n    if (!empty($_GET['nb']))  // In URL, you can specificy the number of links. Example: nb=200 or nb=all for all links.\n    { \n        $nblinksToDisplay = $_GET['nb']=='all' ? count($linksToDisplay) : max($_GET['nb']+0,1) ;\n    }\n\n    $pageaddr=htmlspecialchars(indexUrl());\n    echo '<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\">';\n    echo '<channel><title>'.htmlspecialchars($GLOBALS['title']).'</title><link>'.$pageaddr.'</link>';\n    echo '<description>Shared links</description><language>en-en</language><copyright>'.$pageaddr.'</copyright>'.\"\\n\\n\";\n    if (!empty($GLOBALS['config']['PUBSUBHUB_URL']))\n    {\n        echo '<!-- PubSubHubbub Discovery -->';\n        echo '<link rel=\"hub\" href=\"'.htmlspecialchars($GLOBALS['config']['PUBSUBHUB_URL']).'\" xmlns=\"http://www.w3.org/2005/Atom\" />';\n        echo '<link rel=\"self\" href=\"'.htmlspecialchars($pageaddr).'?do=rss\" xmlns=\"http://www.w3.org/2005/Atom\" />';\n        echo '<!-- End Of PubSubHubbub Discovery -->';\n    }\n    $i=0;\n    $keys=array(); foreach($linksToDisplay as $key=>$value) { $keys[]=$key; }  // No, I can't use array_keys().\n    while ($i<$nblinksToDisplay && $i<count($keys))\n    {\n        $link = $linksToDisplay[$keys[$i]];\n        $guid = $pageaddr.'?'.smallHash($link['linkdate']);\n        $rfc822date = linkdate2rfc822($link['linkdate']);\n        $absurl = htmlspecialchars($link['url']);\n        if (startsWith($absurl,'?')) $absurl=$pageaddr.$absurl;  // make permalink URL absolute\n        if ($usepermalinks===true)\n            echo '<item><title>'.htmlspecialchars($link['title']).'</title><guid isPermaLink=\"false\">'.$guid.'</guid><link>'.$guid.'</link>';\n        else\n            echo '<item><title>'.htmlspecialchars($link['title']).'</title><guid isPermaLink=\"false\">'.$guid.'</guid><link>'.$absurl.'</link>';\n        if (!$GLOBALS['config']['HIDE_TIMESTAMPS'] || isLoggedIn()) echo '<pubDate>'.htmlspecialchars($rfc822date).\"</pubDate>\\n\";\n        if ($link['tags']!='') // Adding tags to each RSS entry (as mentioned in RSS specification)\n        {\n            foreach(explode(' ',$link['tags']) as $tag) { echo '<category domain=\"'.htmlspecialchars($pageaddr).'\">'.htmlspecialchars($tag).'</category>'.\"\\n\"; }\n        }\n\n        // Add permalink in description\n        $descriptionlink = '(<a href=\"'.$guid.'\">Permalink</a>)';\n        // If user wants permalinks first, put the final link in description\n        if ($usepermalinks===true) $descriptionlink = '(<a href=\"'.$absurl.'\">Link</a>)';\n        if (strlen($link['description'])>0) $descriptionlink = '<br>'.$descriptionlink;\n        echo '<description><![CDATA['.nl2br(keepMultipleSpaces(text2clickable(htmlspecialchars($link['description'])))).$descriptionlink.']]></description>'.\"\\n</item>\\n\";\n        $i++;\n    }\n    echo '</channel></rss><!-- Cached version of '.pageUrl().' -->';\n\n    $cache->cache(ob_get_contents());\n    ob_end_flush();\n    exit;\n}\n\n// ------------------------------------------------------------------------------------------\n// Ouput the last N links in ATOM format.\nfunction showATOM()\n{\n    header('Content-Type: application/atom+xml; charset=utf-8');\n\n    // $usepermalink : If true, use permalink instead of final link.\n    // User just has to add 'permalink' in URL parameters. eg. http://mysite.com/shaarli/?do=atom&permalinks\n    $usepermalinks = isset($_GET['permalinks']);\n\n    // Cache system\n    $query = $_SERVER[\"QUERY_STRING\"];\n    $cache = new pageCache(pageUrl(),startsWith($query,'do=atom') && !isLoggedIn());\n    $cached = $cache->cachedVersion(); if (!empty($cached)) { echo $cached; exit; }\n    // If cached was not found (or not usable), then read the database and build the response:\n\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n\n\n    // Optionnaly filter the results:\n    $linksToDisplay=array();\n    if (!empty($_GET['searchterm'])) $linksToDisplay = $LINKSDB->filterFulltext($_GET['searchterm']);\n    elseif (!empty($_GET['searchtags']))   $linksToDisplay = $LINKSDB->filterTags(trim($_GET['searchtags']));\n    else $linksToDisplay = $LINKSDB;\n    $nblinksToDisplay = 50;  // Number of links to display.\n    if (!empty($_GET['nb']))  // In URL, you can specificy the number of links. Example: nb=200 or nb=all for all links.\n    { \n        $nblinksToDisplay = $_GET['nb']=='all' ? count($linksToDisplay) : max($_GET['nb']+0,1) ;\n    }\n\n    $pageaddr=htmlspecialchars(indexUrl());\n    $latestDate = '';\n    $entries='';\n    $i=0;\n    $keys=array(); foreach($linksToDisplay as $key=>$value) { $keys[]=$key; }  // No, I can't use array_keys().\n    while ($i<$nblinksToDisplay && $i<count($keys))\n    {\n        $link = $linksToDisplay[$keys[$i]];\n        $guid = $pageaddr.'?'.smallHash($link['linkdate']);\n        $iso8601date = linkdate2iso8601($link['linkdate']);\n        $latestDate = max($latestDate,$iso8601date);\n        $absurl = htmlspecialchars($link['url']);\n        if (startsWith($absurl,'?')) $absurl=$pageaddr.$absurl;  // make permalink URL absolute\n        $entries.='<entry><title>'.htmlspecialchars($link['title']).'</title>';\n        if ($usepermalinks===true)\n            $entries.='<link href=\"'.$guid.'\" /><id>'.$guid.'</id>';\n        else\n            $entries.='<link href=\"'.$absurl.'\" /><id>'.$guid.'</id>';\n        if (!$GLOBALS['config']['HIDE_TIMESTAMPS'] || isLoggedIn()) $entries.='<updated>'.htmlspecialchars($iso8601date).'</updated>';\n\n        // Add permalink in description\n        $descriptionlink = htmlspecialchars('(<a href=\"'.$guid.'\">Permalink</a>)');\n        // If user wants permalinks first, put the final link in description\n        if ($usepermalinks===true) $descriptionlink = htmlspecialchars('(<a href=\"'.$absurl.'\">Link</a>)');\n        if (strlen($link['description'])>0) $descriptionlink = '&lt;br&gt;'.$descriptionlink;\n\n        $entries.='<content type=\"html\">'.htmlspecialchars(nl2br(keepMultipleSpaces(text2clickable(htmlspecialchars($link['description']))))).$descriptionlink.\"</content>\\n\";\n        if ($link['tags']!='') // Adding tags to each ATOM entry (as mentioned in ATOM specification)\n        {\n            foreach(explode(' ',$link['tags']) as $tag)\n                { $entries.='<category scheme=\"'.htmlspecialchars($pageaddr,ENT_QUOTES).'\" term=\"'.htmlspecialchars($tag,ENT_QUOTES).'\" />'.\"\\n\"; }\n        }\n        $entries.=\"</entry>\\n\";\n        $i++;\n    }\n    $feed='<?xml version=\"1.0\" encoding=\"UTF-8\"?><feed xmlns=\"http://www.w3.org/2005/Atom\">';\n    $feed.='<title>'.htmlspecialchars($GLOBALS['title']).'</title>';\n    if (!$GLOBALS['config']['HIDE_TIMESTAMPS'] || isLoggedIn()) $feed.='<updated>'.htmlspecialchars($latestDate).'</updated>';\n    $feed.='<link rel=\"self\" href=\"'.htmlspecialchars(serverUrl().$_SERVER[\"REQUEST_URI\"]).'\" />';\n    if (!empty($GLOBALS['config']['PUBSUBHUB_URL']))\n    {\n        $feed.='<!-- PubSubHubbub Discovery -->';\n        $feed.='<link rel=\"hub\" href=\"'.htmlspecialchars($GLOBALS['config']['PUBSUBHUB_URL']).'\" />';\n        $feed.='<!-- End Of PubSubHubbub Discovery -->';\n    }\n    $feed.='<author><name>'.htmlspecialchars($pageaddr).'</name><uri>'.htmlspecialchars($pageaddr).'</uri></author>';\n    $feed.='<id>'.htmlspecialchars($pageaddr).'</id>'.\"\\n\\n\"; // Yes, I know I should use a real IRI (RFC3987), but the site URL will do.\n    $feed.=$entries;\n    $feed.='</feed><!-- Cached version of '.pageUrl().' -->';\n    echo $feed;\n\n    $cache->cache(ob_get_contents());\n    ob_end_flush();\n    exit;\n}\n\n// ------------------------------------------------------------------------------------------\n// Daily RSS feed: 1 RSS entry per day giving all the links on that day.\n// Gives the last 7 days (which have links).\n// This RSS feed cannot be filtered.\nfunction showDailyRSS()\n{\n    // Cache system\n    $query = $_SERVER[\"QUERY_STRING\"];\n    $cache = new pageCache(pageUrl(),startsWith($query,'do=dailyrss') && !isLoggedIn());\n    $cached = $cache->cachedVersion(); if (!empty($cached)) { echo $cached; exit; }\n    // If cached was not found (or not usable), then read the database and build the response:\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n\n    /* Some Shaarlies may have very few links, so we need to look\n       back in time (rsort()) until we have enough days ($nb_of_days).\n    */\n    $linkdates=array(); foreach($LINKSDB as $linkdate=>$value) { $linkdates[]=$linkdate; }\n    rsort($linkdates);\n    $nb_of_days=7; // We take 7 days.\n    $today=Date('Ymd');\n    $days=array();\n    foreach($linkdates as $linkdate)\n    {\n        $day=substr($linkdate,0,8); // Extract day (without time)\n        if (strcmp($day,$today)<0)\n        {\n            if (empty($days[$day])) $days[$day]=array();\n            $days[$day][]=$linkdate;\n        }\n        if (count($days)>$nb_of_days) break; // Have we collected enough days ?\n    }\n\n    // Build the RSS feed.\n    header('Content-Type: application/rss+xml; charset=utf-8');\n    $pageaddr=htmlspecialchars(indexUrl());\n    echo '<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\">';\n    echo '<channel><title>Daily - '.htmlspecialchars($GLOBALS['title']).'</title><link>'.$pageaddr.'</link>';\n    echo '<description>Daily shared links</description><language>en-en</language><copyright>'.$pageaddr.'</copyright>'.\"\\n\";\n\n    foreach($days as $day=>$linkdates) // For each day.\n    {\n        $daydate = utf8_encode(strftime('%A %d, %B %Y',linkdate2timestamp($day.'_000000'))); // Full text date\n        $rfc822date = linkdate2rfc822($day.'_000000');\n        $absurl=htmlspecialchars(indexUrl().'?do=daily&day='.$day);  // Absolute URL of the corresponding \"Daily\" page.\n        echo '<item><title>'.htmlspecialchars($GLOBALS['title'].' - '.$daydate).'</title><guid>'.$absurl.'</guid><link>'.$absurl.'</link>';\n        echo '<pubDate>'.htmlspecialchars($rfc822date).\"</pubDate>\";\n\n        // Build the HTML body of this RSS entry.\n        $html='';\n        $href='';\n        $links=array();\n        // We pre-format some fields for proper output.\n        foreach($linkdates as $linkdate)\n        {\n            $l = $LINKSDB[$linkdate];\n            $l['formatedDescription']=nl2br(keepMultipleSpaces(text2clickable(htmlspecialchars($l['description']))));\n            $l['thumbnail'] = thumbnail($l['url']);\n            $l['localdate']=linkdate2locale($l['linkdate']);\n            if (startsWith($l['url'],'?')) $l['url']=indexUrl().$l['url'];  // make permalink URL absolute\n            $links[$linkdate]=$l;\n        }\n        // Then build the HTML for this day:\n        $tpl = new RainTPL;\n        $tpl->assign('links',$links);\n        $html = $tpl->draw('dailyrss',$return_string=true);\n        echo \"\\n\";\n        echo '<description><![CDATA['.$html.']]></description>'.\"\\n</item>\\n\\n\";\n\n    }\n    echo '</channel></rss><!-- Cached version of '.pageUrl().' -->';\n\n    $cache->cache(ob_get_contents());\n    ob_end_flush();\n    exit;\n}\n\n// \"Daily\" page.\nfunction showDaily()\n{\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n\n\n    $day=Date('Ymd',strtotime('-1 day')); // Yesterday, in format YYYYMMDD.\n    if (isset($_GET['day'])) $day=$_GET['day'];\n\n    $days = $LINKSDB->days();\n    $i = array_search($day,$days);\n    if ($i==false) { $i=count($days)-1; $day=$days[$i]; }\n    $previousday='';\n    $nextday='';\n    if ($i!==false)\n    {\n        if ($i>1) $previousday=$days[$i-1];\n        if ($i<count($days)-1) $nextday=$days[$i+1];\n    }\n\n    $linksToDisplay=$LINKSDB->filterDay($day);\n    // We pre-format some fields for proper output.\n    foreach($linksToDisplay as $key=>$link)\n    {\n        $taglist = explode(' ',$link['tags']);\n        uasort($taglist, 'strcasecmp');\n        $linksToDisplay[$key]['taglist']=$taglist;\n        $linksToDisplay[$key]['formatedDescription']=nl2br(keepMultipleSpaces(text2clickable(htmlspecialchars($link['description']))));\n        $linksToDisplay[$key]['thumbnail'] = thumbnail($link['url']);\n    }\n\n    /* We need to spread the articles on 3 columns.\n       I did not want to use a javascript lib like http://masonry.desandro.com/\n       so I manually spread entries with a simple method: I roughly evaluate the\n       height of a div according to title and description length.\n    */\n    $columns=array(array(),array(),array()); // Entries to display, for each column.\n    $fill=array(0,0,0);  // Rough estimate of columns fill.\n    foreach($linksToDisplay as $key=>$link)\n    {\n        // Roughly estimate length of entry (by counting characters)\n        // Title: 30 chars = 1 line. 1 line is 30 pixels height.\n        // Description: 836 characters gives roughly 342 pixel height.\n        // This is not perfect, but it's usually ok.\n        $length=strlen($link['title'])+(342*strlen($link['description']))/836;\n        if ($link['thumbnail']) $length +=100; // 1 thumbnails roughly takes 100 pixels height.\n        // Then put in column which is the less filled:\n        $smallest=min($fill); // find smallest value in array.\n        $index=array_search($smallest,$fill); // find index of this smallest value.\n        array_push($columns[$index],$link); // Put entry in this column.\n        $fill[$index]+=$length;\n    }\n    $PAGE = new pageBuilder;\n    $PAGE->assign('linksToDisplay',$linksToDisplay);\n    $PAGE->assign('linkcount',count($LINKSDB));\n    $PAGE->assign('col1',$columns[0]);\n    $PAGE->assign('col1',$columns[0]);\n    $PAGE->assign('col2',$columns[1]);\n    $PAGE->assign('col3',$columns[2]);\n    $PAGE->assign('day',utf8_encode(strftime('%A %d, %B %Y',linkdate2timestamp($day.'_000000'))));\n    $PAGE->assign('previousday',$previousday);\n    $PAGE->assign('nextday',$nextday);\n    $PAGE->renderPage('daily');\n    exit;\n}\n\n\n// ------------------------------------------------------------------------------------------\n// Render HTML page (according to URL parameters and user rights)\nfunction renderPage()\n{\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n\n    // -------- Display login form.\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=login'))\n    {\n        if ($GLOBALS['config']['OPEN_SHAARLI']) { header('Location: ?'); exit; }  // No need to login for open Shaarli\n        $token=''; if (ban_canLogin()) $token=getToken(); // Do not waste token generation if not useful.\n        $PAGE = new pageBuilder;\n        $PAGE->assign('token',$token);\n        $PAGE->assign('returnurl',(isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER']:''));\n        $PAGE->renderPage('loginform');\n        exit;\n    }\n    // -------- User wants to logout.\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=logout'))\n    {\n        invalidateCaches();\n        logout();\n        header('Location: ?');\n        exit;\n    }\n\n    // -------- Picture wall\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=picwall'))\n    {\n        // Optionnaly filter the results:\n        $links=array();\n        if (!empty($_GET['searchterm'])) $links = $LINKSDB->filterFulltext($_GET['searchterm']);\n        elseif (!empty($_GET['searchtags']))   $links = $LINKSDB->filterTags(trim($_GET['searchtags']));\n        else $links = $LINKSDB;\n        $body='';\n        $linksToDisplay=array();\n\n        // Get only links which have a thumbnail.\n        foreach($links as $link)\n        {\n            $permalink='?'.htmlspecialchars(smallhash($link['linkdate']),ENT_QUOTES);\n            $thumb=lazyThumbnail($link['url'],$permalink);\n            if ($thumb!='') // Only output links which have a thumbnail.\n            {\n                $link['thumbnail']=$thumb; // Thumbnail HTML code.\n                $link['permalink']=$permalink;\n                $linksToDisplay[]=$link; // Add to array.\n            }\n        }\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->assign('linksToDisplay',$linksToDisplay);\n        $PAGE->renderPage('picwall');\n        exit;\n    }\n\n    // -------- Tag cloud\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=tagcloud'))\n    {\n        $tags= $LINKSDB->allTags();\n        // We sort tags alphabetically, then choose a font size according to count.\n        // First, find max value.\n        $maxcount=0; foreach($tags as $key=>$value) $maxcount=max($maxcount,$value);\n        ksort($tags);\n        $tagList=array();\n        foreach($tags as $key=>$value)\n        {\n            $tagList[$key] = array('count'=>$value,'size'=>max(40*$value/$maxcount,8));\n        }\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->assign('tags',$tagList);\n        $PAGE->renderPage('tagcloud');\n        exit;\n    }\n\n    // -------- User clicks on a tag in a link: The tag is added to the list of searched tags (searchtags=...)\n    if (isset($_GET['addtag']))\n    {\n        // Get previous URL (http_referer) and add the tag to the searchtags parameters in query.\n        if (empty($_SERVER['HTTP_REFERER'])) { header('Location: ?searchtags='.urlencode($_GET['addtag'])); exit; } // In case browser does not send HTTP_REFERER\n        parse_str(parse_url($_SERVER['HTTP_REFERER'],PHP_URL_QUERY), $params);\n        $params['searchtags'] = (empty($params['searchtags']) ?  trim($_GET['addtag']) : trim($params['searchtags']).' '.trim($_GET['addtag']));\n        unset($params['page']); // We also remove page (keeping the same page has no sense, since the results are different)\n        header('Location: ?'.http_build_query($params));\n        exit;\n    }\n\n    // -------- User clicks on a tag in result count: Remove the tag from the list of searched tags (searchtags=...)\n    if (isset($_GET['removetag']))\n    {\n        // Get previous URL (http_referer) and remove the tag from the searchtags parameters in query.\n        if (empty($_SERVER['HTTP_REFERER'])) { header('Location: ?'); exit; } // In case browser does not send HTTP_REFERER\n        parse_str(parse_url($_SERVER['HTTP_REFERER'],PHP_URL_QUERY), $params);\n        if (isset($params['searchtags']))\n        {\n            $tags = explode(' ',$params['searchtags']);\n            $tags=array_diff($tags, array($_GET['removetag'])); // Remove value from array $tags.\n            if (count($tags)==0) unset($params['searchtags']); else $params['searchtags'] = implode(' ',$tags);\n            unset($params['page']); // We also remove page (keeping the same page has no sense, since the results are different)\n        }\n        header('Location: ?'.http_build_query($params));\n        exit;\n    }\n\n    // -------- User wants to change the number of links per page (linksperpage=...)\n    if (isset($_GET['linksperpage']))\n    {\n        if (is_numeric($_GET['linksperpage'])) { $_SESSION['LINKS_PER_PAGE']=abs(intval($_GET['linksperpage'])); }\n        // Make sure the referer is from Shaarli itself.\n        $referer = '?';\n        if (!empty($_SERVER['HTTP_REFERER']) && strcmp(parse_url($_SERVER['HTTP_REFERER'],PHP_URL_HOST),$_SERVER['HTTP_HOST'])==0)\n            $referer = $_SERVER['HTTP_REFERER'];\n        header('Location: '.$referer);\n        exit;\n    }\n\n    // -------- User wants to see only private links (toggle)\n    if (isset($_GET['privateonly']))\n    {\n        if (empty($_SESSION['privateonly']))\n        {\n            $_SESSION['privateonly']=1; // See only private links\n        }\n        else\n        {\n            unset($_SESSION['privateonly']); // See all links\n        }\n        // Make sure the referer is from Shaarli itself.\n        $referer = '?';\n        if (!empty($_SERVER['HTTP_REFERER']) && strcmp(parse_url($_SERVER['HTTP_REFERER'],PHP_URL_HOST),$_SERVER['HTTP_HOST'])==0)\n            $referer = $_SERVER['HTTP_REFERER'];\n        header('Location: '.$referer);\n        exit;\n    }\n\n    // -------- Handle other actions allowed for non-logged in users:\n    if (!isLoggedIn())\n    {\n        // User tries to post new link but is not loggedin:\n        // Show login screen, then redirect to ?post=...\n        if (isset($_GET['post']))\n        {\n            header('Location: ?do=login&post='.urlencode($_GET['post']).(!empty($_GET['title'])?'&title='.urlencode($_GET['title']):'').(!empty($_GET['source'])?'&source='.urlencode($_GET['source']):'')); // Redirect to login page, then back to post link.\n            exit;\n        }\n        $PAGE = new pageBuilder;\n        buildLinkList($PAGE,$LINKSDB); // Compute list of links to display\n        $PAGE->renderPage('linklist');\n        exit; // Never remove this one ! All operations below are reserved for logged in user.\n    }\n\n    // -------- All other functions are reserved for the registered user:\n\n    // -------- Display the Tools menu if requested (import/export/bookmarklet...)\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=tools'))\n    {\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->assign('pageabsaddr',indexUrl());\n        $PAGE->renderPage('tools');\n        exit;\n    }\n\n    // -------- User wants to change his/her password.\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=changepasswd'))\n    {\n        if ($GLOBALS['config']['OPEN_SHAARLI']) die('You are not supposed to change a password on an Open Shaarli.');\n        if (!empty($_POST['setpassword']) && !empty($_POST['oldpassword']))\n        {\n            if (!tokenOk($_POST['token'])) die('Wrong token.'); // Go away !\n\n            // Make sure old password is correct.\n            $oldhash = sha1($_POST['oldpassword'].$GLOBALS['login'].$GLOBALS['salt']);\n            if ($oldhash!=$GLOBALS['hash']) { echo '<script language=\"JavaScript\">alert(\"The old password is not correct.\");document.location=\\'?do=changepasswd\\';</script>'; exit; }\n            // Save new password\n            $GLOBALS['salt'] = sha1(uniqid('',true).'_'.mt_rand()); // Salt renders rainbow-tables attacks useless.\n            $GLOBALS['hash'] = sha1($_POST['setpassword'].$GLOBALS['login'].$GLOBALS['salt']);\n            writeConfig();\n            echo '<script language=\"JavaScript\">alert(\"Your password has been changed.\");document.location=\\'?do=tools\\';</script>';\n            exit;\n        }\n        else // show the change password form.\n        {\n            $PAGE = new pageBuilder;\n            $PAGE->assign('linkcount',count($LINKSDB));\n            $PAGE->assign('token',getToken());\n            $PAGE->renderPage('changepassword');\n            exit;\n        }\n    }\n\n    // -------- User wants to change configuration\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=configure'))\n    {\n        if (!empty($_POST['title']) )\n        {\n            if (!tokenOk($_POST['token'])) die('Wrong token.'); // Go away !\n            $tz = 'UTC';\n            if (!empty($_POST['continent']) && !empty($_POST['city']))\n                if (isTZvalid($_POST['continent'],$_POST['city']))\n                    $tz = $_POST['continent'].'/'.$_POST['city'];\n            $GLOBALS['timezone'] = $tz;\n            $GLOBALS['title']=$_POST['title'];\n            $GLOBALS['redirector']=$_POST['redirector'];\n            $GLOBALS['disablesessionprotection']=!empty($_POST['disablesessionprotection']);\n            $GLOBALS['disablejquery']=!empty($_POST['disablejquery']);\n            $GLOBALS['privateLinkByDefault']=!empty($_POST['privateLinkByDefault']);\n            writeConfig();\n            echo '<script language=\"JavaScript\">alert(\"Configuration was saved.\");document.location=\\'?do=tools\\';</script>';\n            exit;\n        }\n        else // Show the configuration form.\n        {\n            $PAGE = new pageBuilder;\n            $PAGE->assign('linkcount',count($LINKSDB));\n            $PAGE->assign('token',getToken());\n            $PAGE->assign('title',htmlspecialchars( empty($GLOBALS['title']) ? '' : $GLOBALS['title'] , ENT_QUOTES));\n            $PAGE->assign('redirector',htmlspecialchars( empty($GLOBALS['redirector']) ? '' : $GLOBALS['redirector'] , ENT_QUOTES));\n            list($timezone_form,$timezone_js) = templateTZform($GLOBALS['timezone']);\n            $PAGE->assign('timezone_form',$timezone_form); // FIXME: put entire tz form generation in template ?\n            $PAGE->assign('timezone_js',$timezone_js);\n            $PAGE->renderPage('configure');\n            exit;\n        }\n    }\n\n    // -------- User wants to rename a tag or delete it\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=changetag'))\n    {\n        if (empty($_POST['fromtag']))\n        {\n            $PAGE = new pageBuilder;\n            $PAGE->assign('linkcount',count($LINKSDB));\n            $PAGE->assign('token',getToken());\n            $PAGE->renderPage('changetag');\n            exit;\n        }\n        if (!tokenOk($_POST['token'])) die('Wrong token.');\n\n        // Delete a tag:\n        if (!empty($_POST['deletetag']) && !empty($_POST['fromtag']))\n        {\n            $needle=trim($_POST['fromtag']);\n            $linksToAlter = $LINKSDB->filterTags($needle,true); // true for case-sensitive tag search.\n            foreach($linksToAlter as $key=>$value)\n            {\n                $tags = explode(' ',trim($value['tags']));\n                unset($tags[array_search($needle,$tags)]); // Remove tag.\n                $value['tags']=trim(implode(' ',$tags));\n                $LINKSDB[$key]=$value;\n            }\n            $LINKSDB->savedb(); // save to disk\n            echo '<script language=\"JavaScript\">alert(\"Tag was removed from '.count($linksToAlter).' links.\");document.location=\\'?\\';</script>';\n            exit;\n        }\n\n        // Rename a tag:\n        if (!empty($_POST['renametag']) && !empty($_POST['fromtag']) && !empty($_POST['totag']))\n        {\n            $needle=trim($_POST['fromtag']);\n            $linksToAlter = $LINKSDB->filterTags($needle,true); // true for case-sensitive tag search.\n            foreach($linksToAlter as $key=>$value)\n            {\n                $tags = explode(' ',trim($value['tags']));\n                $tags[array_search($needle,$tags)] = trim($_POST['totag']); // Remplace tags value.\n                $value['tags']=trim(implode(' ',$tags));\n                $LINKSDB[$key]=$value;\n            }\n            $LINKSDB->savedb(); // save to disk\n            echo '<script language=\"JavaScript\">alert(\"Tag was renamed in '.count($linksToAlter).' links.\");document.location=\\'?searchtags='.urlencode($_POST['totag']).'\\';</script>';\n            exit;\n        }\n    }\n\n    // -------- User wants to add a link without using the bookmarklet: show form.\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=addlink'))\n    {\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->renderPage('addlink');\n        exit;\n    }\n\n    // -------- User clicked the \"Save\" button when editing a link: Save link to database.\n    if (isset($_POST['save_edit']))\n    {\n        if (!tokenOk($_POST['token'])) die('Wrong token.'); // Go away !\n        $tags = trim(preg_replace('/\\s\\s+/',' ', $_POST['lf_tags'])); // Remove multiple spaces.\n        $linkdate=$_POST['lf_linkdate'];\n        $url = trim($_POST['lf_url']);\n        if (!startsWith($url,'http:') && !startsWith($url,'https:') && !startsWith($url,'ftp:') && !startsWith($url,'magnet:') && !startsWith($url,'?'))\n            $url = 'http://'.$url;\n        $link = array('title'=>trim($_POST['lf_title']),'url'=>$url,'description'=>trim($_POST['lf_description']),'private'=>(isset($_POST['lf_private']) ? 1 : 0),\n                      'linkdate'=>$linkdate,'tags'=>str_replace(',',' ',$tags));\n        if ($link['title']=='') $link['title']=$link['url']; // If title is empty, use the URL as title.\n        $LINKSDB[$linkdate] = $link;\n        $LINKSDB->savedb(); // save to disk\n        pubsubhub();\n\n        // If we are called from the bookmarklet, we must close the popup:\n        if (isset($_GET['source']) && $_GET['source']=='bookmarklet') { echo '<script language=\"JavaScript\">self.close();</script>'; exit; }\n        $returnurl = ( isset($_POST['returnurl']) ? $_POST['returnurl'] : '?' );\n        $returnurl .= '#'.smallHash($linkdate);  // Scroll to the link which has been edited.\n        header('Location: '.$returnurl); // After saving the link, redirect to the page the user was on.\n        exit;\n    }\n\n    // -------- User clicked the \"Cancel\" button when editing a link.\n    if (isset($_POST['cancel_edit']))\n    {\n        // If we are called from the bookmarklet, we must close the popup;\n        if (isset($_GET['source']) && $_GET['source']=='bookmarklet') { echo '<script language=\"JavaScript\">self.close();</script>'; exit; }\n        $returnurl = ( isset($_POST['returnurl']) ? $_POST['returnurl'] : '?' );\n        $returnurl .= '#'.smallHash($_POST['lf_linkdate']);  // Scroll to the link which has been edited.\n        header('Location: '.$returnurl); // After canceling, redirect to the page the user was on.\n        exit;\n    }\n\n    // -------- User clicked the \"Delete\" button when editing a link : Delete link from database.\n    if (isset($_POST['delete_link']))\n    {\n        if (!tokenOk($_POST['token'])) die('Wrong token.');\n        // We do not need to ask for confirmation:\n        // - confirmation is handled by javascript\n        // - we are protected from XSRF by the token.\n        $linkdate=$_POST['lf_linkdate'];\n        unset($LINKSDB[$linkdate]);\n        $LINKSDB->savedb(); // save to disk\n\n        // If we are called from the bookmarklet, we must close the popup:\n        if (isset($_GET['source']) && $_GET['source']=='bookmarklet') { echo '<script language=\"JavaScript\">self.close();</script>'; exit; }\n        $returnurl = ( isset($_POST['returnurl']) ? $_POST['returnurl'] : '?' );\n        if ($returnurl=='?') { $returnurl = (isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '?'); }\n        header('Location: '.$returnurl); // After deleting the link, redirect to the page the user was on.\n        exit;\n    }\n\n    // -------- User clicked the \"EDIT\" button on a link: Display link edit form.\n    if (isset($_GET['edit_link']))\n    {\n        $link = $LINKSDB[$_GET['edit_link']];  // Read database\n        if (!$link) { header('Location: ?'); exit; } // Link not found in database.\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->assign('link',$link);\n        $PAGE->assign('link_is_new',false);\n        $PAGE->assign('token',getToken()); // XSRF protection.\n        $PAGE->assign('http_referer',(isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : ''));\n        $PAGE->renderPage('editlink');\n        exit;\n    }\n\n    // -------- User want to post a new link: Display link edit form.\n    if (isset($_GET['post']))\n    {\n        $url=$_GET['post'];\n\n        // We remove the annoying parameters added by FeedBurner and GoogleFeedProxy (?utm_source=...)\n        $i=strpos($url,'&utm_source='); if ($i!==false) $url=substr($url,0,$i);\n        $i=strpos($url,'?utm_source='); if ($i!==false) $url=substr($url,0,$i);\n        $i=strpos($url,'#xtor=RSS-'); if ($i!==false) $url=substr($url,0,$i);\n\n        $link_is_new = false;\n        $link = $LINKSDB->getLinkFromUrl($url); // Check if URL is not already in database (in this case, we will edit the existing link)\n        if (!$link)\n        {\n            $link_is_new = true;  // This is a new link\n            $linkdate = strval(date('Ymd_His'));\n            $title = (empty($_GET['title']) ? '' : $_GET['title'] ); // Get title if it was provided in URL (by the bookmarklet).\n            $description = (empty($_GET['description']) ? '' : $_GET['description']); // Get description if it was provided in URL (by the bookmarklet). [Bronco added that]\n            $tags = (empty($_GET['tags']) ? '' : $_GET['tags'] ); // Get tags if it was provided in URL\n            $private = (!empty($_GET['private']) && $_GET['private'] === \"1\" ? 1 : 0); // Get private if it was provided in URL \n            if (($url!='') && parse_url($url,PHP_URL_SCHEME)=='') $url = 'http://'.$url;\n            // If this is an HTTP link, we try go get the page to extact the title (otherwise we will to straight to the edit form.)\n            if (empty($title) && parse_url($url,PHP_URL_SCHEME)=='http')\n            {\n                list($status,$headers,$data) = getHTTP($url,4); // Short timeout to keep the application responsive.\n                // FIXME: Decode charset according to specified in either 1) HTTP response headers or 2) <head> in html\n                if (strpos($status,'200 OK')!==false)\n \t\t\t\t\t {\n                        // Look for charset in html header.\n \t\t\t\t\t\tpreg_match('#<meta .*charset=.*>#Usi', $data, $meta);\n \n \t\t\t\t\t\t// If found, extract encoding.\n \t\t\t\t\t\tif (!empty($meta[0]))\n \t\t\t\t\t\t{\n \t\t\t\t\t\t\t// Get encoding specified in header.\n \t\t\t\t\t\t\tpreg_match('#charset=\"?(.*)\"#si', $meta[0], $enc);\n \t\t\t\t\t\t\t// If charset not found, use utf-8.\n\t\t\t\t\t\t\t$html_charset = (!empty($enc[1])) ? strtolower($enc[1]) : 'utf-8';\n \t\t\t\t\t\t}\n \t\t\t\t\t\telse { $html_charset = 'utf-8'; }\n \n \t\t\t\t\t\t// Extract title\n \t\t\t\t\t\t$title = html_extract_title($data);\n \t\t\t\t\t\tif (!empty($title))\n \t\t\t\t\t\t{\n \t\t\t\t\t\t\t// Re-encode title in utf-8 if necessary.\n \t\t\t\t\t\t\t$title = ($html_charset == 'iso-8859-1') ? utf8_encode($title) : $title;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n            }\n            if ($url=='') $url='?'.smallHash($linkdate); // In case of empty URL, this is just a text (with a link that point to itself)\n            $link = array('linkdate'=>$linkdate,'title'=>$title,'url'=>$url,'description'=>$description,'tags'=>$tags,'private'=>$private);\n        }\n\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->assign('link',$link);\n        $PAGE->assign('link_is_new',$link_is_new);\n        $PAGE->assign('token',getToken()); // XSRF protection.\n        $PAGE->assign('http_referer',(isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : ''));\n        $PAGE->renderPage('editlink');\n        exit;\n    }\n\n    // -------- Export as Netscape Bookmarks HTML file.\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=export'))\n    {\n        if (empty($_GET['what']))\n        {\n            $PAGE = new pageBuilder;\n            $PAGE->assign('linkcount',count($LINKSDB));\n            $PAGE->renderPage('export');\n            exit;\n        }\n        $exportWhat=$_GET['what'];\n        if (!array_intersect(array('all','public','private'),array($exportWhat))) die('What are you trying to export ???');\n\n        header('Content-Type: text/html; charset=utf-8');\n        header('Content-disposition: attachment; filename=bookmarks_'.$exportWhat.'_'.strval(date('Ymd_His')).'.html');\n        $currentdate=date('Y/m/d H:i:s');\n        echo <<<HTML\n<!DOCTYPE NETSCAPE-Bookmark-file-1>\n<!-- This is an automatically generated file.\n     It will be read and overwritten.\n     DO NOT EDIT! -->\n<!-- Shaarli {$exportWhat} bookmarks export on {$currentdate} -->\n<META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=UTF-8\">\n<TITLE>Bookmarks</TITLE>\n<H1>Bookmarks</H1>\nHTML;\n        foreach($LINKSDB as $link)\n        {\n            if ($exportWhat=='all' ||\n               ($exportWhat=='private' && $link['private']!=0) ||\n               ($exportWhat=='public' && $link['private']==0))\n            {\n                echo '<DT><A HREF=\"'.htmlspecialchars($link['url']).'\" ADD_DATE=\"'.linkdate2timestamp($link['linkdate']).'\" PRIVATE=\"'.$link['private'].'\"';\n                if ($link['tags']!='') echo ' TAGS=\"'.htmlspecialchars(str_replace(' ',',',$link['tags'])).'\"';\n                echo '>'.htmlspecialchars($link['title']).\"</A>\\n\";\n                if ($link['description']!='') echo '<DD>'.htmlspecialchars($link['description']).\"\\n\";\n            }\n        }\n                exit;\n    }\n\n    // -------- User is uploading a file for import\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=upload'))\n    {\n        // If file is too big, some form field may be missing.\n        if (!isset($_POST['token']) || (!isset($_FILES)) || (isset($_FILES['filetoupload']['size']) && $_FILES['filetoupload']['size']==0))\n        {\n            $returnurl = ( empty($_SERVER['HTTP_REFERER']) ? '?' : $_SERVER['HTTP_REFERER'] );\n            echo '<script language=\"JavaScript\">alert(\"The file you are trying to upload is probably bigger than what this webserver can accept ('.getMaxFileSize().' bytes). Please upload in smaller chunks.\");document.location=\\''.htmlspecialchars($returnurl).'\\';</script>';\n            exit;\n        }\n        if (!tokenOk($_POST['token'])) die('Wrong token.');\n        importFile();\n        exit;\n    }\n\n    // -------- Show upload/import dialog:\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=import'))\n    {\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->assign('token',getToken());\n        $PAGE->assign('maxfilesize',getMaxFileSize());\n        $PAGE->renderPage('import');\n        exit;\n    }\n\n    // -------- Otherwise, simply display search form and links:\n    $PAGE = new pageBuilder;\n    $PAGE->assign('linkcount',count($LINKSDB));\n    buildLinkList($PAGE,$LINKSDB); // Compute list of links to display\n    $PAGE->renderPage('linklist');\n    exit;\n}\n\n// -----------------------------------------------------------------------------------------------\n// Process the import file form.\nfunction importFile()\n{\n    if (!(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI'])) { die('Not allowed.'); }\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n    $filename=$_FILES['filetoupload']['name'];\n    $filesize=$_FILES['filetoupload']['size'];\n    $data=file_get_contents($_FILES['filetoupload']['tmp_name']);\n    $private = (empty($_POST['private']) ? 0 : 1); // Should the links be imported as private ?\n    $overwrite = !empty($_POST['overwrite']) ; // Should the imported links overwrite existing ones ?\n    $import_count=0;\n\n    // Sniff file type:\n    $type='unknown';\n    if (startsWith($data,'<!DOCTYPE NETSCAPE-Bookmark-file-1>')) $type='netscape'; // Netscape bookmark file (aka Firefox).\n\n    // Then import the bookmarks.\n    if ($type=='netscape')\n    {\n        // This is a standard Netscape-style bookmark file.\n        // This format is supported by all browsers (except IE, of course), also delicious, diigo and others.\n        foreach(explode('<DT>',$data) as $html) // explode is very fast\n        {\n            $link = array('linkdate'=>'','title'=>'','url'=>'','description'=>'','tags'=>'','private'=>0);\n            $d = explode('<DD>',$html);\n            if (startswith($d[0],'<A '))\n            {\n                $link['description'] = (isset($d[1]) ? html_entity_decode(trim($d[1]),ENT_QUOTES,'UTF-8') : '');  // Get description (optional)\n                preg_match('!<A .*?>(.*?)</A>!i',$d[0],$matches); $link['title'] = (isset($matches[1]) ? trim($matches[1]) : '');  // Get title\n                $link['title'] = html_entity_decode($link['title'],ENT_QUOTES,'UTF-8');\n                preg_match_all('! ([A-Z_]+)=\\\"(.*?)\"!i',$html,$matches,PREG_SET_ORDER);  // Get all other attributes\n                $raw_add_date=0;\n                foreach($matches as $m)\n                {\n                    $attr=$m[1]; $value=$m[2];\n                    if ($attr=='HREF') $link['url']=html_entity_decode($value,ENT_QUOTES,'UTF-8');\n                    elseif ($attr=='ADD_DATE')\n                    {\n                        $raw_add_date=intval($value);\n                        if ($raw_add_date>30000000000) $raw_add_date/=1000;\t//If larger than year 2920, then was likely stored in milliseconds instead of seconds\n                    }\n                    elseif ($attr=='PRIVATE') $link['private']=($value=='0'?0:1);\n                    elseif ($attr=='TAGS') $link['tags']=html_entity_decode(str_replace(',',' ',$value),ENT_QUOTES,'UTF-8');\n                }\n                if ($link['url']!='')\n                {\n                    if ($private==1) $link['private']=1;\n                    $dblink = $LINKSDB->getLinkFromUrl($link['url']); // See if the link is already in database.\n                    if ($dblink==false)\n                    {  // Link not in database, let's import it...\n                       if (empty($raw_add_date)) $raw_add_date=time(); // In case of shitty bookmark file with no ADD_DATE\n\n                       // Make sure date/time is not already used by another link.\n                       // (Some bookmark files have several different links with the same ADD_DATE)\n                       // We increment date by 1 second until we find a date which is not used in db.\n                       // (so that links that have the same date/time are more or less kept grouped by date, but do not conflict.)\n                       while (!empty($LINKSDB[date('Ymd_His',$raw_add_date)])) { $raw_add_date++; }// Yes, I know it's ugly.\n                       $link['linkdate']=date('Ymd_His',$raw_add_date);\n                       $LINKSDB[$link['linkdate']] = $link;\n                       $import_count++;\n                    }\n                    else // link already present in database.\n                    {\n                        if ($overwrite)\n                        {   // If overwrite is required, we import link data, except date/time.\n                            $link['linkdate']=$dblink['linkdate'];\n                            $LINKSDB[$link['linkdate']] = $link;\n                            $import_count++;\n                        }\n                    }\n\n                }\n            }\n        }\n        $LINKSDB->savedb();\n\n        echo '<script language=\"JavaScript\">alert(\"File '.$filename.' ('.$filesize.' bytes) was successfully processed: '.$import_count.' links imported.\");document.location=\\'?\\';</script>';\n    }\n    else\n    {\n        echo '<script language=\"JavaScript\">alert(\"File '.$filename.' ('.$filesize.' bytes) has an unknown file format. Nothing was imported.\");document.location=\\'?\\';</script>';\n    }\n}\n\n// -----------------------------------------------------------------------------------------------\n// Template for the list of links (<div id=\"linklist\">)\n// This function fills all the necessary fields in the $PAGE for the template 'linklist.html'\nfunction buildLinkList($PAGE,$LINKSDB)\n{\n    // ---- Filter link database according to parameters\n    $linksToDisplay=array();\n    $search_type='';\n    $search_crits='';\n    if (isset($_GET['searchterm'])) // Fulltext search\n    {\n        $linksToDisplay = $LINKSDB->filterFulltext(trim($_GET['searchterm']));\n        $search_crits=htmlspecialchars(trim($_GET['searchterm']));\n        $search_type='fulltext';\n    }\n    elseif (isset($_GET['searchtags'])) // Search by tag\n    {\n        $linksToDisplay = $LINKSDB->filterTags(trim($_GET['searchtags']));\n        $search_crits=explode(' ',trim($_GET['searchtags']));\n        $search_type='tags';\n    }\n    elseif (isset($_SERVER['QUERY_STRING']) && preg_match('/[a-zA-Z0-9-_@]{6}(&.+?)?/',$_SERVER['QUERY_STRING'])) // Detect smallHashes in URL\n    {\n        $linksToDisplay = $LINKSDB->filterSmallHash(substr(trim($_SERVER[\"QUERY_STRING\"], '/'),0,6));\n        if (count($linksToDisplay)==0)\n        {\n            header($_SERVER[\"SERVER_PROTOCOL\"].\" 404 Not Found\");\n            echo '<h1>404 Not found.</h1>Oh crap. The link you are trying to reach does not exist or has been deleted.';\n            echo '<br>You would mind <a href=\"?\">clicking here</a> ?';\n            exit;\n        }\n        $search_type='permalink';\n    }\n    else\n        $linksToDisplay = $LINKSDB;  // otherwise, display without filtering.\n\n    // Option: Show only private links\n    if (!empty($_SESSION['privateonly']))\n    {\n        $tmp = array();\n        foreach($linksToDisplay as $linkdate=>$link)\n        {\n            if ($link['private']!=0) $tmp[$linkdate]=$link;\n        }\n        $linksToDisplay=$tmp;\n    }\n\n    // ---- Handle paging.\n    /* Can someone explain to me why you get the following error when using array_keys() on an object which implements the interface ArrayAccess ???\n       \"Warning: array_keys() expects parameter 1 to be array, object given in ... \"\n       If my class implements ArrayAccess, why won't array_keys() accept it ?  ( $keys=array_keys($linksToDisplay); )\n    */\n    $keys=array(); foreach($linksToDisplay as $key=>$value) { $keys[]=$key; } // Stupid and ugly. Thanks php.\n\n    // If there is only a single link, we change on-the-fly the title of the page.\n    if (count($linksToDisplay)==1) $GLOBALS['pagetitle'] = $linksToDisplay[$keys[0]]['title'].' - '.$GLOBALS['title'];\n\n    // Select articles according to paging.\n    $pagecount = ceil(count($keys)/$_SESSION['LINKS_PER_PAGE']);\n    $pagecount = ($pagecount==0 ? 1 : $pagecount);\n    $page=( empty($_GET['page']) ? 1 : intval($_GET['page']));\n    $page = ( $page<1 ? 1 : $page );\n    $page = ( $page>$pagecount ? $pagecount : $page );\n    $i = ($page-1)*$_SESSION['LINKS_PER_PAGE']; // Start index.\n    $end = $i+$_SESSION['LINKS_PER_PAGE'];\n    $linkDisp=array(); // Links to display\n    while ($i<$end && $i<count($keys))\n    {\n        $link = $linksToDisplay[$keys[$i]];\n        $link['description']=nl2br(keepMultipleSpaces(text2clickable(htmlspecialchars($link['description']))));\n        $title=$link['title'];\n        $classLi =  $i%2!=0 ? '' : 'publicLinkHightLight';\n        $link['class'] = ($link['private']==0 ? $classLi : 'private');\n        $link['localdate']=linkdate2locale($link['linkdate']);\n        $taglist = explode(' ',$link['tags']);\n        uasort($taglist, 'strcasecmp');\n        $link['taglist']=$taglist;\n        $linkDisp[$keys[$i]] = $link;\n        $i++;\n    }\n\n    // Compute paging navigation\n    $searchterm= ( empty($_GET['searchterm']) ? '' : '&searchterm='.$_GET['searchterm'] );\n    $searchtags= ( empty($_GET['searchtags']) ? '' : '&searchtags='.$_GET['searchtags'] );\n    $paging='';\n    $previous_page_url=''; if ($i!=count($keys)) $previous_page_url='?page='.($page+1).$searchterm.$searchtags;\n    $next_page_url='';if ($page>1) $next_page_url='?page='.($page-1).$searchterm.$searchtags;\n\n    $token = ''; if (isLoggedIn()) $token=getToken();\n\n    // Fill all template fields.\n    $PAGE->assign('linkcount',count($LINKSDB));\n    $PAGE->assign('previous_page_url',$previous_page_url);\n    $PAGE->assign('next_page_url',$next_page_url);\n    $PAGE->assign('page_current',$page);\n    $PAGE->assign('page_max',$pagecount);\n    $PAGE->assign('result_count',count($linksToDisplay));\n    $PAGE->assign('search_type',$search_type);\n    $PAGE->assign('search_crits',$search_crits);\n    $PAGE->assign('redirector',empty($GLOBALS['redirector']) ? '' : $GLOBALS['redirector']); // optional redirector URL\n    $PAGE->assign('token',$token);\n    $PAGE->assign('links',$linkDisp);\n    return;\n}\n\n// Compute the thumbnail for a link.\n//\n// with a link to the original URL.\n// Understands various services (youtube.com...)\n// Input: $url = url for which the thumbnail must be found.\n//        $href = if provided, this URL will be followed instead of $url\n// Returns an associative array with thumbnail attributes (src,href,width,height,style,alt)\n// Some of them may be missing.\n// Return an empty array if no thumbnail available.\nfunction computeThumbnail($url,$href=false)\n{\n    if (!$GLOBALS['config']['ENABLE_THUMBNAILS']) return array();\n    if ($href==false) $href=$url;\n\n    // For most hosts, the URL of the thumbnail can be easily deduced from the URL of the link.\n    // (eg. http://www.youtube.com/watch?v=spVypYk4kto --->  http://img.youtube.com/vi/spVypYk4kto/default.jpg )\n    //                                     ^^^^^^^^^^^                                 ^^^^^^^^^^^\n    $domain = parse_url($url,PHP_URL_HOST);\n    if ($domain=='youtube.com' || $domain=='www.youtube.com')\n    {\n        parse_str(parse_url($url,PHP_URL_QUERY), $params); // Extract video ID and get thumbnail\n        if (!empty($params['v'])) return array('src'=>'http://img.youtube.com/vi/'.$params['v'].'/default.jpg',\n                                               'href'=>$href,'width'=>'120','height'=>'90','alt'=>'YouTube thumbnail');\n    }\n    if ($domain=='youtu.be') // Youtube short links\n    {\n        $path = parse_url($url,PHP_URL_PATH);\n        return array('src'=>'http://img.youtube.com/vi'.$path.'/default.jpg',\n                     'href'=>$href,'width'=>'120','height'=>'90','alt'=>'YouTube thumbnail');\n    }\n    if ($domain=='pix.toile-libre.org') // pix.toile-libre.org image hosting\n    {\n        parse_str(parse_url($url,PHP_URL_QUERY), $params); // Extract image filename.\n        if (!empty($params) && !empty($params['img'])) return array('src'=>'http://pix.toile-libre.org/upload/thumb/'.urlencode($params['img']),\n                                                                    'href'=>$href,'style'=>'max-width:120px; max-height:150px','alt'=>'pix.toile-libre.org thumbnail');\n    }\n\n    if ($domain=='imgur.com')\n    {\n        $path = parse_url($url,PHP_URL_PATH);\n        if (startsWith($path,'/a/')) return array(); // Thumbnails for albums are not available.\n        if (startsWith($path,'/r/')) return array('src'=>'http://i.imgur.com/'.basename($path).'s.jpg',\n                                                  'href'=>$href,'width'=>'90','height'=>'90','alt'=>'imgur.com thumbnail');\n        if (startsWith($path,'/gallery/')) return array('src'=>'http://i.imgur.com'.substr($path,8).'s.jpg',\n                                                        'href'=>$href,'width'=>'90','height'=>'90','alt'=>'imgur.com thumbnail');\n\n        if (substr_count($path,'/')==1) return array('src'=>'http://i.imgur.com/'.substr($path,1).'s.jpg',\n                                                     'href'=>$href,'width'=>'90','height'=>'90','alt'=>'imgur.com thumbnail');\n    }\n    if ($domain=='i.imgur.com')\n    {\n        $pi = pathinfo(parse_url($url,PHP_URL_PATH));\n        if (!empty($pi['filename'])) return array('src'=>'http://i.imgur.com/'.$pi['filename'].'s.jpg',\n                                                  'href'=>$href,'width'=>'90','height'=>'90','alt'=>'imgur.com thumbnail');\n    }\n    if ($domain=='dailymotion.com' || $domain=='www.dailymotion.com')\n    {\n        if (strpos($url,'dailymotion.com/video/')!==false)\n        {\n            $thumburl=str_replace('dailymotion.com/video/','dailymotion.com/thumbnail/video/',$url);\n            return array('src'=>$thumburl,\n                         'href'=>$href,'width'=>'120','style'=>'height:auto;','alt'=>'DailyMotion thumbnail');\n        }\n    }\n    if (endsWith($domain,'.imageshack.us'))\n    {\n        $ext=strtolower(pathinfo($url,PATHINFO_EXTENSION));\n        if ($ext=='jpg' || $ext=='jpeg' || $ext=='png' || $ext=='gif')\n        {\n            $thumburl = substr($url,0,strlen($url)-strlen($ext)).'th.'.$ext;\n            return array('src'=>$thumburl,\n                         'href'=>$href,'width'=>'120','style'=>'height:auto;','alt'=>'imageshack.us thumbnail');\n        }\n    }\n\n    // Some other hosts are SLOW AS HELL and usually require an extra HTTP request to get the thumbnail URL.\n    // So we deport the thumbnail generation in order not to slow down page generation\n    // (and we also cache the thumbnail)\n\n    if (!$GLOBALS['config']['ENABLE_LOCALCACHE']) return array(); // If local cache is disabled, no thumbnails for services which require the use a local cache.\n\n    if ($domain=='flickr.com' || endsWith($domain,'.flickr.com')\n        || $domain=='vimeo.com'\n        || $domain=='ted.com' || endsWith($domain,'.ted.com')\n        || $domain=='xkcd.com' || endsWith($domain,'.xkcd.com')\n    )\n    {\n        if ($domain=='vimeo.com')\n        {   // Make sure this vimeo url points to a video (/xxx... where xxx is numeric)\n            $path = parse_url($url,PHP_URL_PATH);\n            if (!preg_match('!/\\d+.+?!',$path)) return array(); // This is not a single video URL.\n        }\n        if ($domain=='xkcd.com' || endsWith($domain,'.xkcd.com'))\n        {   // Make sure this url points to a single comic (/xxx... where xxx is numeric)\n            $path = parse_url($url,PHP_URL_PATH);\n            if (!preg_match('!/\\d+.+?!',$path)) return array();\n        }\n        if ($domain=='ted.com' || endsWith($domain,'.ted.com'))\n        {   // Make sure this TED url points to a video (/talks/...)\n            $path = parse_url($url,PHP_URL_PATH);\n            if (\"/talks/\" !== substr($path,0,7)) return array(); // This is not a single video URL.\n        }\n        $sign = hash_hmac('sha256', $url, $GLOBALS['salt']); // We use the salt to sign data (it's random, secret, and specific to each installation)\n        return array('src'=>indexUrl().'?do=genthumbnail&hmac='.htmlspecialchars($sign).'&url='.urlencode($url),\n                     'href'=>$href,'width'=>'120','style'=>'height:auto;','alt'=>'thumbnail');\n    }\n\n    // For all other, we try to make a thumbnail of links ending with .jpg/jpeg/png/gif\n    // Technically speaking, we should download ALL links and check their Content-Type to see if they are images.\n    // But using the extension will do.\n    $ext=strtolower(pathinfo($url,PATHINFO_EXTENSION));\n    if ($ext=='jpg' || $ext=='jpeg' || $ext=='png' || $ext=='gif')\n    {\n        $sign = hash_hmac('sha256', $url, $GLOBALS['salt']); // We use the salt to sign data (it's random, secret, and specific to each installation)\n        return array('src'=>indexUrl().'?do=genthumbnail&hmac='.htmlspecialchars($sign).'&url='.urlencode($url),\n                     'href'=>$href,'width'=>'120','style'=>'height:auto;','alt'=>'thumbnail');\n    }\n    return array(); // No thumbnail.\n\n}\n\n\n// Returns the HTML code to display a thumbnail for a link\n// with a link to the original URL.\n// Understands various services (youtube.com...)\n// Input: $url = url for which the thumbnail must be found.\n//        $href = if provided, this URL will be followed instead of $url\n// Returns '' if no thumbnail available.\nfunction thumbnail($url,$href=false)\n{\n    $t = computeThumbnail($url,$href);\n    if (count($t)==0) return ''; // Empty array = no thumbnail for this URL.\n\n    $html='<a href=\"'.htmlspecialchars($t['href']).'\"><img src=\"'.htmlspecialchars($t['src']).'\"';\n    if (!empty($t['width']))  $html.=' width=\"'.htmlspecialchars($t['width']).'\"';\n    if (!empty($t['height'])) $html.=' height=\"'.htmlspecialchars($t['height']).'\"';\n    if (!empty($t['style']))  $html.=' style=\"'.htmlspecialchars($t['style']).'\"';\n    if (!empty($t['alt']))    $html.=' alt=\"'.htmlspecialchars($t['alt']).'\"';\n    $html.='></a>';\n    return $html;\n}\n\n\n// Returns the HTML code to display a thumbnail for a link\n// for the picture wall (using lazy image loading)\n// Understands various services (youtube.com...)\n// Input: $url = url for which the thumbnail must be found.\n//        $href = if provided, this URL will be followed instead of $url\n// Returns '' if no thumbnail available.\nfunction lazyThumbnail($url,$href=false)\n{\n    $t = computeThumbnail($url,$href);\n    if (count($t)==0) return ''; // Empty array = no thumbnail for this URL.\n\n    $html='<a href=\"'.htmlspecialchars($t['href']).'\">';\n\n    // Lazy image (only loaded by javascript when in the viewport).\n    if (!empty($GLOBALS['disablejquery'])) // (except if jQuery is disabled)\n        $html.='<img class=\"lazyimage\" src=\"'.htmlspecialchars($t['src']).'\"';\n    else\n        $html.='<img class=\"lazyimage\" src=\"#\" data-original=\"'.htmlspecialchars($t['src']).'\"';\n\n    if (!empty($t['width']))  $html.=' width=\"'.htmlspecialchars($t['width']).'\"';\n    if (!empty($t['height'])) $html.=' height=\"'.htmlspecialchars($t['height']).'\"';\n    if (!empty($t['style']))  $html.=' style=\"'.htmlspecialchars($t['style']).'\"';\n    if (!empty($t['alt']))    $html.=' alt=\"'.htmlspecialchars($t['alt']).'\"';\n    $html.='>';\n\n    // No-javascript fallback.\n    $html.='<noscript><img src=\"'.htmlspecialchars($t['src']).'\"';\n    if (!empty($t['width']))  $html.=' width=\"'.htmlspecialchars($t['width']).'\"';\n    if (!empty($t['height'])) $html.=' height=\"'.htmlspecialchars($t['height']).'\"';\n    if (!empty($t['style']))  $html.=' style=\"'.htmlspecialchars($t['style']).'\"';\n    if (!empty($t['alt']))    $html.=' alt=\"'.htmlspecialchars($t['alt']).'\"';\n    $html.='></noscript></a>';\n\n    return $html;\n}\n\n\n// -----------------------------------------------------------------------------------------------\n// Installation\n// This function should NEVER be called if the file data/config.php exists.\nfunction install()\n{\n    // On free.fr host, make sure the /sessions directory exists, otherwise login will not work.\n    if (endsWith($_SERVER['HTTP_HOST'],'.free.fr') && !is_dir($_SERVER['DOCUMENT_ROOT'].'/sessions')) mkdir($_SERVER['DOCUMENT_ROOT'].'/sessions',0705);\n\n\n    // This part makes sure sessions works correctly.\n    // (Because on some hosts, session.save_path may not be set correctly,\n    // or we may not have write access to it.)\n    if (isset($_GET['test_session']) && ( !isset($_SESSION) || !isset($_SESSION['session_tested']) || $_SESSION['session_tested']!='Working'))\n    {   // Step 2: Check if data in session is correct.\n        echo '<pre>Sessions do not seem to work correctly on your server.<br>';\n        echo 'Make sure the variable session.save_path is set correctly in your php config, and that you have write access to it.<br>';\n        echo 'It currently points to '.session_save_path().'<br><br><a href=\"?\">Click to try again.</a></pre>';\n        die;\n    }\n    if (!isset($_SESSION['session_tested']))\n    {   // Step 1 : Try to store data in session and reload page.\n        $_SESSION['session_tested'] = 'Working';  // Try to set a variable in session.\n        header('Location: '.indexUrl().'?test_session');  // Redirect to check stored data.\n    }\n    if (isset($_GET['test_session']))\n    {   // Step 3: Sessions are ok. Remove test parameter from URL.\n        header('Location: '.indexUrl());\n    }\n\n\n    if (!empty($_POST['setlogin']) && !empty($_POST['setpassword']))\n    {\n        $tz = 'UTC';\n        if (!empty($_POST['continent']) && !empty($_POST['city']))\n            if (isTZvalid($_POST['continent'],$_POST['city']))\n                $tz = $_POST['continent'].'/'.$_POST['city'];\n        $GLOBALS['timezone'] = $tz;\n        // Everything is ok, let's create config file.\n        $GLOBALS['login'] = $_POST['setlogin'];\n        $GLOBALS['salt'] = sha1(uniqid('',true).'_'.mt_rand()); // Salt renders rainbow-tables attacks useless.\n        $GLOBALS['hash'] = sha1($_POST['setpassword'].$GLOBALS['login'].$GLOBALS['salt']);\n        $GLOBALS['title'] = (empty($_POST['title']) ? 'Shared links on '.htmlspecialchars(indexUrl()) : $_POST['title'] );\n        writeConfig();\n        echo '<script language=\"JavaScript\">alert(\"Shaarli is now configured. Please enter your login/password and start shaaring your links !\");document.location=\\'?do=login\\';</script>';\n        exit;\n    }\n\n    // Display config form:\n    list($timezone_form,$timezone_js) = templateTZform();\n    $timezone_html=''; if ($timezone_form!='') $timezone_html='<tr><td valign=\"top\"><b>Timezone:</b></td><td>'.$timezone_form.'</td></tr>';\n\n    $PAGE = new pageBuilder;\n    $PAGE->assign('timezone_html',$timezone_html);\n    $PAGE->assign('timezone_js',$timezone_js);\n    $PAGE->renderPage('install');\n    exit;\n}\n\n// Generates the timezone selection form and javascript.\n// Input: (optional) current timezone (can be 'UTC/UTC'). It will be pre-selected.\n// Output: array(html,js)\n// Example: list($htmlform,$js) = templateTZform('Europe/Paris');  // Europe/Paris pre-selected.\n// Returns array('','') if server does not support timezones list. (eg. php 5.1 on free.fr)\nfunction templateTZform($ptz=false)\n{\n    if (function_exists('timezone_identifiers_list')) // because of old php version (5.1) which can be found on free.fr\n    {\n        // Try to split the provided timezone.\n        if ($ptz==false) { $l=timezone_identifiers_list(); $ptz=$l[0]; }\n        $spos=strpos($ptz,'/'); $pcontinent=substr($ptz,0,$spos); $pcity=substr($ptz,$spos+1);\n\n        // Display config form:\n        $timezone_form = '';\n        $timezone_js = '';\n        // The list is in the forme \"Europe/Paris\", \"America/Argentina/Buenos_Aires\"...\n        // We split the list in continents/cities.\n        $continents = array();\n        $cities = array();\n        foreach(timezone_identifiers_list() as $tz)\n        {\n            if ($tz=='UTC') $tz='UTC/UTC';\n            $spos = strpos($tz,'/');\n            if ($spos!==false)\n            {\n                $continent=substr($tz,0,$spos); $city=substr($tz,$spos+1);\n                $continents[$continent]=1;\n                if (!isset($cities[$continent])) $cities[$continent]='';\n                $cities[$continent].='<option value=\"'.$city.'\"'.($pcity==$city?'selected':'').'>'.$city.'</option>';\n            }\n        }\n        $continents_html = '';\n        $continents = array_keys($continents);\n        foreach($continents as $continent)\n            $continents_html.='<option  value=\"'.$continent.'\"'.($pcontinent==$continent?'selected':'').'>'.$continent.'</option>';\n        $cities_html = $cities[$pcontinent];\n        $timezone_form = \"Continent: <select name=\\\"continent\\\" id=\\\"continent\\\" onChange=\\\"onChangecontinent();\\\">${continents_html}</select>\";\n        $timezone_form .= \"&nbsp;&nbsp;&nbsp;&nbsp;City: <select name=\\\"city\\\" id=\\\"city\\\">${cities[$pcontinent]}</select><br />\";\n        $timezone_js = \"<script language=\\\"JavaScript\\\">\";\n        $timezone_js .= \"function onChangecontinent(){document.getElementById(\\\"city\\\").innerHTML = citiescontinent[document.getElementById(\\\"continent\\\").value];}\";\n        $timezone_js .= \"var citiescontinent = \".json_encode($cities).\";\" ;\n        $timezone_js .= \"</script>\" ;\n        return array($timezone_form,$timezone_js);\n    }\n    return array('','');\n}\n\n// Tells if a timezone is valid or not.\n// If not valid, returns false.\n// If system does not support timezone list, returns false.\nfunction isTZvalid($continent,$city)\n{\n    $tz = $continent.'/'.$city;\n    if (function_exists('timezone_identifiers_list')) // because of old php version (5.1) which can be found on free.fr\n    {\n        if (in_array($tz, timezone_identifiers_list())) // it's a valid timezone ?\n                    return true;\n    }\n    return false;\n}\nif (!function_exists('json_encode')) {\n    function json_encode($data) {\n        switch ($type = gettype($data)) {\n            case 'NULL':\n                return 'null';\n            case 'boolean':\n                return ($data ? 'true' : 'false');\n            case 'integer':\n            case 'double':\n            case 'float':\n                return $data;\n            case 'string':\n                return '\"' . addslashes($data) . '\"';\n            case 'object':\n                $data = get_object_vars($data);\n            case 'array':\n                $output_index_count = 0;\n                $output_indexed = array();\n                $output_associative = array();\n                foreach ($data as $key => $value) {\n                    $output_indexed[] = json_encode($value);\n                    $output_associative[] = json_encode($key) . ':' . json_encode($value);\n                    if ($output_index_count !== NULL && $output_index_count++ !== $key) {\n                        $output_index_count = NULL;\n                    }\n                }\n                if ($output_index_count !== NULL) {\n                    return '[' . implode(',', $output_indexed) . ']';\n                } else {\n                    return '{' . implode(',', $output_associative) . '}';\n                }\n            default:\n                return ''; // Not supported\n        }\n    }\n}\n\n// Webservices (for use with jQuery/jQueryUI)\n// eg.  index.php?ws=tags&term=minecr\nfunction processWS()\n{\n    if (empty($_GET['ws']) || empty($_GET['term'])) return;\n    $term = $_GET['term'];\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n    header('Content-Type: application/json; charset=utf-8');\n\n    // Search in tags (case insentitive, cumulative search)\n    if ($_GET['ws']=='tags')\n    {\n        $tags=explode(' ',str_replace(',',' ',$term)); $last = array_pop($tags); // Get the last term (\"a b c d\" ==> \"a b c\", \"d\")\n        $addtags=''; if ($tags) $addtags=implode(' ',$tags).' '; // We will pre-pend previous tags\n        $suggested=array();\n        /* To speed up things, we store list of tags in session */\n        if (empty($_SESSION['tags'])) $_SESSION['tags'] = $LINKSDB->allTags();\n        foreach($_SESSION['tags'] as $key=>$value)\n        {\n            if (startsWith($key,$last,$case=false) && !in_array($key,$tags)) $suggested[$addtags.$key.' ']=0;\n        }\n        echo json_encode(array_keys($suggested));\n        exit;\n    }\n\n    // Search a single tag (case sentitive, single tag search)\n    if ($_GET['ws']=='singletag')\n    {\n        /* To speed up things, we store list of tags in session */\n        if (empty($_SESSION['tags'])) $_SESSION['tags'] = $LINKSDB->allTags();\n        foreach($_SESSION['tags'] as $key=>$value)\n        {\n            if (startsWith($key,$term,$case=true)) $suggested[$key]=0;\n        }\n        echo json_encode(array_keys($suggested));\n        exit;\n    }\n}\n\n// Re-write configuration file according to globals.\n// Requires some $GLOBALS to be set (login,hash,salt,title).\n// If the config file cannot be saved, an error message is dislayed and the user is redirected to \"Tools\" menu.\n// (otherwise, the function simply returns.)\nfunction writeConfig()\n{\n    if (is_file($GLOBALS['config']['CONFIG_FILE']) && !isLoggedIn()) die('You are not authorized to alter config.'); // Only logged in user can alter config.\n    $config='<?php $GLOBALS[\\'login\\']='.var_export($GLOBALS['login'],true).'; $GLOBALS[\\'hash\\']='.var_export($GLOBALS['hash'],true).'; $GLOBALS[\\'salt\\']='.var_export($GLOBALS['salt'],true).'; ';\n    $config .='$GLOBALS[\\'timezone\\']='.var_export($GLOBALS['timezone'],true).'; date_default_timezone_set('.var_export($GLOBALS['timezone'],true).'); $GLOBALS[\\'title\\']='.var_export($GLOBALS['title'],true).';';\n    $config .= '$GLOBALS[\\'redirector\\']='.var_export($GLOBALS['redirector'],true).'; ';\n    $config .= '$GLOBALS[\\'disablesessionprotection\\']='.var_export($GLOBALS['disablesessionprotection'],true).'; ';\n    $config .= '$GLOBALS[\\'disablejquery\\']='.var_export($GLOBALS['disablejquery'],true).'; ';\n    $config .= '$GLOBALS[\\'privateLinkByDefault\\']='.var_export($GLOBALS['privateLinkByDefault'],true).'; ';\n    $config .= ' ?>';\n    if (!file_put_contents($GLOBALS['config']['CONFIG_FILE'],$config) || strcmp(file_get_contents($GLOBALS['config']['CONFIG_FILE']),$config)!=0)\n    {\n        echo '<script language=\"JavaScript\">alert(\"Shaarli could not create the config file. Please make sure Shaarli has the right to write in the folder is it installed in.\");document.location=\\'?\\';</script>';\n        exit;\n    }\n}\n\n/* Because some f*cking services like Flickr require an extra HTTP request to get the thumbnail URL,\n   I have deported the thumbnail URL code generation here, otherwise this would slow down page generation.\n   The following function takes the URL a link (eg. a flickr page) and return the proper thumbnail.\n   This function is called by passing the url:\n   http://mywebsite.com/shaarli/?do=genthumbnail&hmac=[HMAC]&url=[URL]\n   [URL] is the URL of the link (eg. a flickr page)\n   [HMAC] is the signature for the [URL] (so that these URL cannot be forged).\n   The function below will fetch the image from the webservice and store it in the cache.\n*/\nfunction genThumbnail()\n{\n    // Make sure the parameters in the URL were generated by us.\n    $sign = hash_hmac('sha256', $_GET['url'], $GLOBALS['salt']);\n    if ($sign!=$_GET['hmac']) die('Naughty boy !');\n\n    // Let's see if we don't already have the image for this URL in the cache.\n    $thumbname=hash('sha1',$_GET['url']).'.jpg';\n    if (is_file($GLOBALS['config']['CACHEDIR'].'/'.$thumbname))\n    {   // We have the thumbnail, just serve it:\n        header('Content-Type: image/jpeg');\n        echo file_get_contents($GLOBALS['config']['CACHEDIR'].'/'.$thumbname);\n        return;\n    }\n    // We may also serve a blank image (if service did not respond)\n    $blankname=hash('sha1',$_GET['url']).'.gif';\n    if (is_file($GLOBALS['config']['CACHEDIR'].'/'.$blankname))\n    {\n        header('Content-Type: image/gif');\n        echo file_get_contents($GLOBALS['config']['CACHEDIR'].'/'.$blankname);\n        return;\n    }\n\n    // Otherwise, generate the thumbnail.\n    $url = $_GET['url'];\n    $domain = parse_url($url,PHP_URL_HOST);\n\n    if ($domain=='flickr.com' || endsWith($domain,'.flickr.com'))\n    {\n        // Crude replacement to handle new Flickr domain policy (They prefer www. now)\n        $url = str_replace('http://flickr.com/','http://www.flickr.com/',$url);\n\n        // Is this a link to an image, or to a flickr page ?\n        $imageurl='';\n        if (endswith(parse_url($url,PHP_URL_PATH),'.jpg'))\n        {  // This is a direct link to an image. eg. http://farm1.staticflickr.com/5/5921913_ac83ed27bd_o.jpg\n            preg_match('!(http://farm\\d+\\.staticflickr\\.com/\\d+/\\d+_\\w+_)\\w.jpg!',$url,$matches);\n            if (!empty($matches[1])) $imageurl=$matches[1].'m.jpg';\n        }\n        else // this is a flickr page (html)\n        {\n            list($httpstatus,$headers,$data) = getHTTP($url,20); // Get the flickr html page.\n            if (strpos($httpstatus,'200 OK')!==false)\n            {\n                // Flickr now nicely provides the URL of the thumbnail in each flickr page.\n                preg_match('!<link rel=\\\"image_src\\\" href=\\\"(.+?)\\\"!',$data,$matches);\n                if (!empty($matches[1])) $imageurl=$matches[1];\n\n                // In albums (and some other pages), the link rel=\"image_src\" is not provided,\n                // but flickr provides:\n                // <meta property=\"og:image\" content=\"http://farm4.staticflickr.com/3398/3239339068_25d13535ff_z.jpg\" />\n                if ($imageurl=='')\n                {\n                    preg_match('!<meta property=\\\"og:image\\\" content=\\\"(.+?)\\\"!',$data,$matches);\n                    if (!empty($matches[1])) $imageurl=$matches[1];\n                }\n            }\n        }\n\n        if ($imageurl!='')\n        {   // Let's download the image.\n            list($httpstatus,$headers,$data) = getHTTP($imageurl,10); // Image is 240x120, so 10 seconds to download should be enough.\n            if (strpos($httpstatus,'200 OK')!==false)\n            {\n                file_put_contents($GLOBALS['config']['CACHEDIR'].'/'.$thumbname,$data); // Save image to cache.\n                header('Content-Type: image/jpeg');\n                echo $data;\n                return;\n            }\n        }\n    }\n\n    elseif ($domain=='vimeo.com' )\n    {\n        // This is more complex: we have to perform a HTTP request, then parse the result.\n        // Maybe we should deport this to javascript ? Example: http://stackoverflow.com/questions/1361149/get-img-thumbnails-from-vimeo/4285098#4285098\n        $vid = substr(parse_url($url,PHP_URL_PATH),1);\n        list($httpstatus,$headers,$data) = getHTTP('http://vimeo.com/api/v2/video/'.htmlspecialchars($vid).'.php',5);\n        if (strpos($httpstatus,'200 OK')!==false)\n        {\n            $t = unserialize($data);\n            $imageurl = $t[0]['thumbnail_medium'];\n            // Then we download the image and serve it to our client.\n            list($httpstatus,$headers,$data) = getHTTP($imageurl,10);\n            if (strpos($httpstatus,'200 OK')!==false)\n            {\n                file_put_contents($GLOBALS['config']['CACHEDIR'].'/'.$thumbname,$data); // Save image to cache.\n                header('Content-Type: image/jpeg');\n                echo $data;\n                return;\n            }\n        }\n    }\n\n    elseif ($domain=='ted.com' || endsWith($domain,'.ted.com'))\n    {\n        // The thumbnail for TED talks is located in the <link rel=\"image_src\" [...]> tag on that page\n        // http://www.ted.com/talks/mikko_hypponen_fighting_viruses_defending_the_net.html\n        // <link rel=\"image_src\" href=\"http://images.ted.com/images/ted/28bced335898ba54d4441809c5b1112ffaf36781_389x292.jpg\" />\n        list($httpstatus,$headers,$data) = getHTTP($url,5);\n        if (strpos($httpstatus,'200 OK')!==false)\n        {\n            // Extract the link to the thumbnail\n            preg_match('!link rel=\"image_src\" href=\"(http://images.ted.com/images/ted/.+_\\d+x\\d+\\.jpg)\"!',$data,$matches);\n            if (!empty($matches[1]))\n            {   // Let's download the image.\n                $imageurl=$matches[1];\n                list($httpstatus,$headers,$data) = getHTTP($imageurl,20); // No control on image size, so wait long enough.\n                if (strpos($httpstatus,'200 OK')!==false)\n                {\n                    $filepath=$GLOBALS['config']['CACHEDIR'].'/'.$thumbname;\n                    file_put_contents($filepath,$data); // Save image to cache.\n                    if (resizeImage($filepath))\n                    {\n                        header('Content-Type: image/jpeg');\n                        echo file_get_contents($filepath);\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    elseif ($domain=='xkcd.com' || endsWith($domain,'.xkcd.com'))\n    {\n        // There is no thumbnail available for xkcd comics, so download the whole image and resize it.\n        // http://xkcd.com/327/\n        // <img src=\"http://imgs.xkcd.com/comics/exploits_of_a_mom.png\" title=\"<BLABLA>\" alt=\"<BLABLA>\" />\n        list($httpstatus,$headers,$data) = getHTTP($url,5);\n        if (strpos($httpstatus,'200 OK')!==false)\n        {\n            // Extract the link to the thumbnail\n            preg_match('!<img src=\"(http://imgs.xkcd.com/comics/.*)\" title=\"[^s]!',$data,$matches);\n            if (!empty($matches[1]))\n            {   // Let's download the image.\n                $imageurl=$matches[1];\n                list($httpstatus,$headers,$data) = getHTTP($imageurl,20); // No control on image size, so wait long enough.\n                if (strpos($httpstatus,'200 OK')!==false)\n                {\n                    $filepath=$GLOBALS['config']['CACHEDIR'].'/'.$thumbname;\n                    file_put_contents($filepath,$data); // Save image to cache.\n                    if (resizeImage($filepath))\n                    {\n                        header('Content-Type: image/jpeg');\n                        echo file_get_contents($filepath);\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    else\n    {\n        // For all other domains, we try to download the image and make a thumbnail.\n        list($httpstatus,$headers,$data) = getHTTP($url,30);  // We allow 30 seconds max to download (and downloads are limited to 4 Mb)\n        if (strpos($httpstatus,'200 OK')!==false)\n        {\n            $filepath=$GLOBALS['config']['CACHEDIR'].'/'.$thumbname;\n            file_put_contents($filepath,$data); // Save image to cache.\n            if (resizeImage($filepath))\n            {\n                header('Content-Type: image/jpeg');\n                echo file_get_contents($filepath);\n                return;\n            }\n        }\n    }\n\n\n    // Otherwise, return an empty image (8x8 transparent gif)\n    $blankgif = base64_decode('R0lGODlhCAAIAIAAAP///////yH5BAEKAAEALAAAAAAIAAgAAAIHjI+py+1dAAA7');\n    file_put_contents($GLOBALS['config']['CACHEDIR'].'/'.$blankname,$blankgif); // Also put something in cache so that this URL is not requested twice.\n    header('Content-Type: image/gif');\n    echo $blankgif;\n}\n\n// Make a thumbnail of the image (to width: 120 pixels)\n// Returns true if success, false otherwise.\nfunction resizeImage($filepath)\n{\n    if (!function_exists('imagecreatefromjpeg')) return false; // GD not present: no thumbnail possible.\n\n    // Trick: some stupid people rename GIF as JPEG... or else.\n    // So we really try to open each image type whatever the extension is.\n    $header=file_get_contents($filepath,false,NULL,0,256); // Read first 256 bytes and try to sniff file type.\n    $im=false;\n    $i=strpos($header,'GIF8'); if (($i!==false) && ($i==0)) $im = imagecreatefromgif($filepath); // Well this is crude, but it should be enough.\n    $i=strpos($header,'PNG'); if (($i!==false) && ($i==1)) $im = imagecreatefrompng($filepath);\n    $i=strpos($header,'JFIF'); if ($i!==false) $im = imagecreatefromjpeg($filepath);\n    if (!$im) return false;  // Unable to open image (corrupted or not an image)\n    $w = imagesx($im);\n    $h = imagesy($im);\n    $ystart = 0; $yheight=$h;\n    if ($h>$w) { $ystart= ($h/2)-($w/2); $yheight=$w/2; }\n    $nw = 120;   // Desired width\n    $nh = min(floor(($h*$nw)/$w),120); // Compute new width/height, but maximum 120 pixels height.\n    // Resize image:\n    $im2 = imagecreatetruecolor($nw,$nh);\n    imagecopyresampled($im2, $im, 0, 0, 0, $ystart, $nw, $nh, $w, $yheight);\n    imageinterlace($im2,true); // For progressive JPEG.\n    $tempname=$filepath.'_TEMP.jpg';\n    imagejpeg($im2, $tempname, 90);\n    imagedestroy($im);\n    imagedestroy($im2);\n    unlink($filepath);\n    rename($tempname,$filepath);  // Overwrite original picture with thumbnail.\n    return true;\n}\n\n// Invalidate caches when the database is changed or the user logs out.\n// (eg. tags cache).\nfunction invalidateCaches()\n{\n    unset($_SESSION['tags']);  // Purge cache attached to session.\n    pageCache::purgeCache();   // Purge page cache shared by sessions.\n}\n\nif (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=genthumbnail')) { genThumbnail(); exit; }  // Thumbnail generation/cache does not need the link database.\nif (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=rss')) { showRSS(); exit; }\nif (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=atom')) { showATOM(); exit; }\nif (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=dailyrss')) { showDailyRSS(); exit; }\nif (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=daily')) { showDaily(); exit; }\nif (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'ws=')) { processWS(); exit; } // Webservices (for jQuery/jQueryUI)\nif (!isset($_SESSION['LINKS_PER_PAGE'])) $_SESSION['LINKS_PER_PAGE']=$GLOBALS['config']['LINKS_PER_PAGE'];\nrenderPage();\n?>\n"], "fixing_code": ["<?php\n// Shaarli 0.0.41 beta - Shaare your links...\n// The personal, minimalist, super-fast, no-database delicious clone. By sebsauvage.net\n// http://sebsauvage.net/wiki/doku.php?id=php:shaarli\n// Licence: http://www.opensource.org/licenses/zlib-license.php\n// Requires: php 5.1.x  (but autocomplete fields will only work if you have php 5.2.x)\n// -----------------------------------------------------------------------------------------------\n// NEVER TRUST IN PHP.INI\n// Some hosts do not define a default timezone in php.ini,\n// so we have to do this for avoid the strict standard error.\ndate_default_timezone_set('UTC');\n\n// -----------------------------------------------------------------------------------------------\n// Hardcoded parameter (These parameters can be overwritten by creating the file /config/options.php)\n$GLOBALS['config']['DATADIR'] = 'data'; // Data subdirectory\n$GLOBALS['config']['CONFIG_FILE'] = $GLOBALS['config']['DATADIR'].'/config.php'; // Configuration file (user login/password)\n$GLOBALS['config']['DATASTORE'] = $GLOBALS['config']['DATADIR'].'/datastore.php'; // Data storage file.\n$GLOBALS['config']['LINKS_PER_PAGE'] = 20; // Default links per page.\n$GLOBALS['config']['IPBANS_FILENAME'] = $GLOBALS['config']['DATADIR'].'/ipbans.php'; // File storage for failures and bans.\n$GLOBALS['config']['BAN_AFTER'] = 4;        // Ban IP after this many failures.\n$GLOBALS['config']['BAN_DURATION'] = 1800;  // Ban duration for IP address after login failures (in seconds) (1800 sec. = 30 minutes)\n$GLOBALS['config']['OPEN_SHAARLI'] = false; // If true, anyone can add/edit/delete links without having to login\n$GLOBALS['config']['HIDE_TIMESTAMPS'] = false; // If true, the moment when links were saved are not shown to users that are not logged in.\n$GLOBALS['config']['ENABLE_THUMBNAILS'] = true; // Enable thumbnails in links.\n$GLOBALS['config']['CACHEDIR'] = 'cache'; // Cache directory for thumbnails for SLOW services (like flickr)\n$GLOBALS['config']['PAGECACHE'] = 'pagecache'; // Page cache directory.\n$GLOBALS['config']['ENABLE_LOCALCACHE'] = true; // Enable Shaarli to store thumbnail in a local cache. Disable to reduce webspace usage.\n$GLOBALS['config']['PUBSUBHUB_URL'] = ''; // PubSubHubbub support. Put an empty string to disable, or put your hub url here to enable.\n$GLOBALS['config']['UPDATECHECK_FILENAME'] = $GLOBALS['config']['DATADIR'].'/lastupdatecheck.txt'; // For updates check of Shaarli.\n$GLOBALS['config']['UPDATECHECK_INTERVAL'] = 86400 ; // Updates check frequency for Shaarli. 86400 seconds=24 hours\n                                          // Note: You must have publisher.php in the same directory as Shaarli index.php\n// -----------------------------------------------------------------------------------------------\n// You should not touch below (or at your own risks !)\n// Optionnal config file.\nif (is_file($GLOBALS['config']['DATADIR'].'/options.php')) require($GLOBALS['config']['DATADIR'].'/options.php');\n\ndefine('shaarli_version','0.0.41 beta');\ndefine('PHPPREFIX','<?php /* '); // Prefix to encapsulate data in php code.\ndefine('PHPSUFFIX',' */ ?>'); // Suffix to encapsulate data in php code.\n\n// Force cookie path (but do not change lifetime)\n$cookie=session_get_cookie_params();\n$cookiedir = ''; if(dirname($_SERVER['SCRIPT_NAME'])!='/') $cookiedir=dirname($_SERVER[\"SCRIPT_NAME\"]).'/';\nsession_set_cookie_params($cookie['lifetime'],$cookiedir,$_SERVER['HTTP_HOST']); // Set default cookie expiration and path.\n\n// Set session parameters on server side.\ndefine('INACTIVITY_TIMEOUT',3600); // (in seconds). If the user does not access any page within this time, his/her session is considered expired.\nini_set('session.use_cookies', 1);       // Use cookies to store session.\nini_set('session.use_only_cookies', 1);  // Force cookies for session (phpsessionID forbidden in URL)\nini_set('session.use_trans_sid', false); // Prevent php to use sessionID in URL if cookies are disabled.\nsession_name('shaarli');\nif (session_id() == '') session_start();  // Start session if needed (Some server auto-start sessions).\n\n// PHP Settings\nini_set('max_input_time','60');  // High execution time in case of problematic imports/exports.\nini_set('memory_limit', '128M');  // Try to set max upload file size and read (May not work on some hosts).\nini_set('post_max_size', '16M');\nini_set('upload_max_filesize', '16M');\ncheckphpversion();\nerror_reporting(E_ALL^E_WARNING);  // See all error except warnings.\n//error_reporting(-1); // See all errors (for debugging only)\n\ninclude \"inc/rain.tpl.class.php\"; //include Rain TPL\nraintpl::$tpl_dir = \"tpl/\"; // template directory\nif (!is_dir('tmp')) { mkdir('tmp',0705); chmod('tmp',0705); }\nraintpl::$cache_dir = \"tmp/\"; // cache directory\n\nob_start();  // Output buffering for the page cache.\n\n\n// In case stupid admin has left magic_quotes enabled in php.ini:\nif (get_magic_quotes_gpc())\n{\n    function stripslashes_deep($value) { $value = is_array($value) ? array_map('stripslashes_deep', $value) : stripslashes($value); return $value; }\n    $_POST = array_map('stripslashes_deep', $_POST);\n    $_GET = array_map('stripslashes_deep', $_GET);\n    $_COOKIE = array_map('stripslashes_deep', $_COOKIE);\n}\n\n// Prevent caching on client side or proxy: (yes, it's ugly)\nheader(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\");\nheader(\"Cache-Control: no-store, no-cache, must-revalidate\");\nheader(\"Cache-Control: post-check=0, pre-check=0\", false);\nheader(\"Pragma: no-cache\");\n\n// Directories creations (Note that your web host may require differents rights than 705.)\nif (!is_writable(realpath(dirname(__FILE__)))) die('<pre>ERROR: Shaarli does not have the right to write in its own directory ('.realpath(dirname(__FILE__)).').</pre>');\nif (!is_dir($GLOBALS['config']['DATADIR'])) { mkdir($GLOBALS['config']['DATADIR'],0705); chmod($GLOBALS['config']['DATADIR'],0705); }\nif (!is_dir('tmp')) { mkdir('tmp',0705); chmod('tmp',0705); } // For RainTPL temporary files.\nif (!is_file($GLOBALS['config']['DATADIR'].'/.htaccess')) { file_put_contents($GLOBALS['config']['DATADIR'].'/.htaccess',\"Allow from none\\nDeny from all\\n\"); } // Protect data files.\n// Second check to see if Shaarli can write in its directory, because on some hosts is_writable() is not reliable.\nif (!is_file($GLOBALS['config']['DATADIR'].'/.htaccess')) die('<pre>ERROR: Shaarli does not have the right to write in its data directory ('.realpath($GLOBALS['config']['DATADIR']).').</pre>');\nif ($GLOBALS['config']['ENABLE_LOCALCACHE'])\n{\n    if (!is_dir($GLOBALS['config']['CACHEDIR'])) { mkdir($GLOBALS['config']['CACHEDIR'],0705); chmod($GLOBALS['config']['CACHEDIR'],0705); }\n    if (!is_file($GLOBALS['config']['CACHEDIR'].'/.htaccess')) { file_put_contents($GLOBALS['config']['CACHEDIR'].'/.htaccess',\"Allow from none\\nDeny from all\\n\"); } // Protect data files.\n}\n\n// Handling of old config file which do not have the new parameters.\nif (empty($GLOBALS['title'])) $GLOBALS['title']='Shared links on '.htmlspecialchars(indexUrl());\nif (empty($GLOBALS['timezone'])) $GLOBALS['timezone']=date_default_timezone_get();\nif (empty($GLOBALS['redirector'])) $GLOBALS['redirector']='';\nif (empty($GLOBALS['disablesessionprotection'])) $GLOBALS['disablesessionprotection']=false;\nif (empty($GLOBALS['disablejquery'])) $GLOBALS['disablejquery']=false;\nif (empty($GLOBALS['privateLinkByDefault'])) $GLOBALS['privateLinkByDefault']=false;\n// I really need to rewrite Shaarli with a proper configuation manager.\n\n// Run config screen if first run:\nif (!is_file($GLOBALS['config']['CONFIG_FILE'])) install();\n\nrequire $GLOBALS['config']['CONFIG_FILE'];  // Read login/password hash into $GLOBALS.\n\n\nautoLocale(); // Sniff browser language and set date format accordingly.\nheader('Content-Type: text/html; charset=utf-8'); // We use UTF-8 for proper international characters handling.\n\n// Check php version\nfunction checkphpversion()\n{\n    if (version_compare(PHP_VERSION, '5.1.0') < 0)\n    {\n        header('Content-Type: text/plain; charset=utf-8');\n        echo 'Your server supports php '.PHP_VERSION.'. Shaarli requires at least php 5.1.0, and thus cannot run. Sorry.';\n        exit;\n    }\n}\n\n// Checks if an update is available for Shaarli.\n// (at most once a day, and only for registered user.)\n// Output: '' = no new version.\n//         other= the available version.\nfunction checkUpdate()\n{\n    if (!isLoggedIn()) return ''; // Do not check versions for visitors.\n\n    // Get latest version number at most once a day.\n    if (!is_file($GLOBALS['config']['UPDATECHECK_FILENAME']) || (filemtime($GLOBALS['config']['UPDATECHECK_FILENAME'])<time()-($GLOBALS['config']['UPDATECHECK_INTERVAL'])))\n    {\n        $version=shaarli_version;\n        list($httpstatus,$headers,$data) = getHTTP('http://sebsauvage.net/files/shaarli_version.txt',2);\n        if (strpos($httpstatus,'200 OK')!==false) $version=$data;\n        // If failed, nevermind. We don't want to bother the user with that.\n        file_put_contents($GLOBALS['config']['UPDATECHECK_FILENAME'],$version); // touch file date\n    }\n    // Compare versions:\n    $newestversion=file_get_contents($GLOBALS['config']['UPDATECHECK_FILENAME']);\n    if (version_compare($newestversion,shaarli_version)==1) return $newestversion;\n    return '';\n}\n\n\n// -----------------------------------------------------------------------------------------------\n// Simple cache system (mainly for the RSS/ATOM feeds).\n\nclass pageCache\n{\n    private $url; // Full URL of the page to cache (typically the value returned by pageUrl())\n    private $shouldBeCached; // boolean: Should this url be cached ?\n    private $filename; // Name of the cache file for this url\n\n    /*\n         $url = url (typically the value returned by pageUrl())\n         $shouldBeCached = boolean. If false, the cache will be disabled.\n    */\n    public function __construct($url,$shouldBeCached)\n    {\n        $this->url = $url;\n        $this->filename = $GLOBALS['config']['PAGECACHE'].'/'.sha1($url).'.cache';\n        $this->shouldBeCached = $shouldBeCached;\n    }\n\n    // If the page should be cached and a cached version exists,\n    // returns the cached version (otherwise, return null).\n    public function cachedVersion()\n    {\n        if (!$this->shouldBeCached) return null;\n        if (is_file($this->filename)) { return file_get_contents($this->filename); exit; }\n        return null;\n    }\n\n    // Put a page in the cache.\n    public function cache($page)\n    {\n        if (!$this->shouldBeCached) return;\n        if (!is_dir($GLOBALS['config']['PAGECACHE'])) { mkdir($GLOBALS['config']['PAGECACHE'],0705); chmod($GLOBALS['config']['PAGECACHE'],0705); }\n        file_put_contents($this->filename,$page);\n    }\n\n    // Purge the whole cache.\n    // (call with pageCache::purgeCache())\n    public static function purgeCache()\n    {\n        if (is_dir($GLOBALS['config']['PAGECACHE']))\n        {\n            $handler = opendir($GLOBALS['config']['PAGECACHE']);\n            if ($handler!==false)\n            {\n                while (($filename = readdir($handler))!==false)\n                {\n                    if (endsWith($filename,'.cache')) { unlink($GLOBALS['config']['PAGECACHE'].'/'.$filename); }\n                }\n                closedir($handler);\n            }\n        }\n    }\n\n}\n\n\n// -----------------------------------------------------------------------------------------------\n// Log to text file\nfunction logm($message)\n{\n    $t = strval(date('Y/m/d_H:i:s')).' - '.$_SERVER[\"REMOTE_ADDR\"].' - '.strval($message).\"\\n\";\n    file_put_contents($GLOBALS['config']['DATADIR'].'/log.txt',$t,FILE_APPEND);\n}\n\n// Same as nl2br(), but escapes < and >\nfunction nl2br_escaped($html)\n{\n    return str_replace('>','&gt;',str_replace('<','&lt;',nl2br($html)));\n}\n\n/* Returns the small hash of a string\n   eg. smallHash('20111006_131924') --> yZH23w\n   Small hashes:\n     - are unique (well, as unique as crc32, at last)\n     - are always 6 characters long.\n     - only use the following characters: a-z A-Z 0-9 - _ @\n     - are NOT cryptographically secure (they CAN be forged)\n   In Shaarli, they are used as a tinyurl-like link to individual entries.\n*/\nfunction smallHash($text)\n{\n    $t = rtrim(base64_encode(hash('crc32',$text,true)),'=');\n    $t = str_replace('+','-',$t); // Get rid of characters which need encoding in URLs.\n    $t = str_replace('/','_',$t);\n    $t = str_replace('=','@',$t);\n    return $t;\n}\n\n// In a string, converts urls to clickable links.\n// Function inspired from http://www.php.net/manual/en/function.preg-replace.php#85722\nfunction text2clickable($url)\n{\n    $redir = empty($GLOBALS['redirector']) ? '' : $GLOBALS['redirector'];\n    return preg_replace('!(((?:https?|ftp|file)://|apt:|magnet:)\\S+[[:alnum:]]/?)!si','<a href=\"'.$redir.'$1\" rel=\"nofollow\">$1</a>',$url);\n}\n\n// This function inserts &nbsp; where relevant so that multiple spaces are properly displayed in HTML\n// even in the absence of <pre>  (This is used in description to keep text formatting)\nfunction keepMultipleSpaces($text)\n{\n    return str_replace('  ',' &nbsp;',$text);\n\n}\n// ------------------------------------------------------------------------------------------\n// Sniff browser language to display dates in the right format automatically.\n// (Note that is may not work on your server if the corresponding local is not installed.)\nfunction autoLocale()\n{\n    $loc='en_US'; // Default if browser does not send HTTP_ACCEPT_LANGUAGE\n    if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) // eg. \"fr,fr-fr;q=0.8,en;q=0.5,en-us;q=0.3\"\n    {   // (It's a bit crude, but it works very well. Prefered language is always presented first.)\n        if (preg_match('/([a-z]{2}(-[a-z]{2})?)/i',$_SERVER['HTTP_ACCEPT_LANGUAGE'],$matches)) $loc=$matches[1];\n    }\n    setlocale(LC_TIME,$loc);  // LC_TIME = Set local for date/time format only.\n}\n\n// ------------------------------------------------------------------------------------------\n// PubSubHubbub protocol support (if enabled)  [UNTESTED]\n// (Source: http://aldarone.fr/les-flux-rss-shaarli-et-pubsubhubbub/ )\nif (!empty($GLOBALS['config']['PUBSUBHUB_URL'])) include './publisher.php';\nfunction pubsubhub()\n{\n    if (!empty($GLOBALS['config']['PUBSUBHUB_URL']))\n    {\n       $p = new Publisher($GLOBALS['config']['PUBSUBHUB_URL']);\n       $topic_url = array (\n                       indexUrl().'?do=atom',\n                       indexUrl().'?do=rss'\n                    );\n       $p->publish_update($topic_url);\n    }\n}\n\n// ------------------------------------------------------------------------------------------\n// Session management\n\n// Returns the IP address of the client (Used to prevent session cookie hijacking.)\nfunction allIPs()\n{\n    $ip = $_SERVER[\"REMOTE_ADDR\"];\n    // Then we use more HTTP headers to prevent session hijacking from users behind the same proxy.\n    if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $ip=$ip.'_'.$_SERVER['HTTP_X_FORWARDED_FOR']; }\n    if (isset($_SERVER['HTTP_CLIENT_IP'])) { $ip=$ip.'_'.$_SERVER['HTTP_CLIENT_IP']; }\n    return $ip;\n}\n\n// Check that user/password is correct.\nfunction check_auth($login,$password)\n{\n    $hash = sha1($password.$login.$GLOBALS['salt']);\n    if ($login==$GLOBALS['login'] && $hash==$GLOBALS['hash'])\n    {   // Login/password is correct.\n        $_SESSION['uid'] = sha1(uniqid('',true).'_'.mt_rand()); // generate unique random number (different than phpsessionid)\n        $_SESSION['ip']=allIPs();                // We store IP address(es) of the client to make sure session is not hijacked.\n        $_SESSION['username']=$login;\n        $_SESSION['expires_on']=time()+INACTIVITY_TIMEOUT;  // Set session expiration.\n        logm('Login successful');\n        return True;\n    }\n    logm('Login failed for user '.$login);\n    return False;\n}\n\n// Returns true if the user is logged in.\nfunction isLoggedIn()\n{\n    if ($GLOBALS['config']['OPEN_SHAARLI']) return true;\n\n    if (!isset($GLOBALS['login'])) return false;  // Shaarli is not configured yet.\n\n    // If session does not exist on server side, or IP address has changed, or session has expired, logout.\n    if (empty($_SESSION['uid']) || ($GLOBALS['disablesessionprotection']==false && $_SESSION['ip']!=allIPs()) || time()>=$_SESSION['expires_on'])\n    {\n        logout();\n        return false;\n    }\n    if (!empty($_SESSION['longlastingsession']))  $_SESSION['expires_on']=time()+$_SESSION['longlastingsession']; // In case of \"Stay signed in\" checked.\n    else $_SESSION['expires_on']=time()+INACTIVITY_TIMEOUT; // Standard session expiration date.\n\n    return true;\n}\n\n// Force logout.\nfunction logout() { if (isset($_SESSION)) { unset($_SESSION['uid']); unset($_SESSION['ip']); unset($_SESSION['username']); unset($_SESSION['privateonly']); }  }\n\n\n// ------------------------------------------------------------------------------------------\n// Brute force protection system\n// Several consecutive failed logins will ban the IP address for 30 minutes.\nif (!is_file($GLOBALS['config']['IPBANS_FILENAME'])) file_put_contents($GLOBALS['config']['IPBANS_FILENAME'], \"<?php\\n\\$GLOBALS['IPBANS']=\".var_export(array('FAILURES'=>array(),'BANS'=>array()),true).\";\\n?>\");\ninclude $GLOBALS['config']['IPBANS_FILENAME'];\n// Signal a failed login. Will ban the IP if too many failures:\nfunction ban_loginFailed()\n{\n    $ip=$_SERVER[\"REMOTE_ADDR\"]; $gb=$GLOBALS['IPBANS'];\n    if (!isset($gb['FAILURES'][$ip])) $gb['FAILURES'][$ip]=0;\n    $gb['FAILURES'][$ip]++;\n    if ($gb['FAILURES'][$ip]>($GLOBALS['config']['BAN_AFTER']-1))\n    {\n        $gb['BANS'][$ip]=time()+$GLOBALS['config']['BAN_DURATION'];\n        logm('IP address banned from login');\n    }\n    $GLOBALS['IPBANS'] = $gb;\n    file_put_contents($GLOBALS['config']['IPBANS_FILENAME'], \"<?php\\n\\$GLOBALS['IPBANS']=\".var_export($gb,true).\";\\n?>\");\n}\n\n// Signals a successful login. Resets failed login counter.\nfunction ban_loginOk()\n{\n    $ip=$_SERVER[\"REMOTE_ADDR\"]; $gb=$GLOBALS['IPBANS'];\n    unset($gb['FAILURES'][$ip]); unset($gb['BANS'][$ip]);\n    $GLOBALS['IPBANS'] = $gb;\n    file_put_contents($GLOBALS['config']['IPBANS_FILENAME'], \"<?php\\n\\$GLOBALS['IPBANS']=\".var_export($gb,true).\";\\n?>\");\n}\n\n// Checks if the user CAN login. If 'true', the user can try to login.\nfunction ban_canLogin()\n{\n    $ip=$_SERVER[\"REMOTE_ADDR\"]; $gb=$GLOBALS['IPBANS'];\n    if (isset($gb['BANS'][$ip]))\n    {\n        // User is banned. Check if the ban has expired:\n        if ($gb['BANS'][$ip]<=time())\n        {   // Ban expired, user can try to login again.\n            logm('Ban lifted.');\n            unset($gb['FAILURES'][$ip]); unset($gb['BANS'][$ip]);\n            file_put_contents($GLOBALS['config']['IPBANS_FILENAME'], \"<?php\\n\\$GLOBALS['IPBANS']=\".var_export($gb,true).\";\\n?>\");\n            return true; // Ban has expired, user can login.\n        }\n        return false; // User is banned.\n    }\n    return true; // User is not banned.\n}\n\n// ------------------------------------------------------------------------------------------\n// Process login form: Check if login/password is correct.\nif (isset($_POST['login']))\n{\n    if (!ban_canLogin()) die('I said: NO. You are banned for the moment. Go away.');\n    if (isset($_POST['password']) && tokenOk($_POST['token']) && (check_auth($_POST['login'], $_POST['password'])))\n    {   // Login/password is ok.\n        ban_loginOk();\n        // If user wants to keep the session cookie even after the browser closes:\n        if (!empty($_POST['longlastingsession']))\n        {\n            $_SESSION['longlastingsession']=31536000;  // (31536000 seconds = 1 year)\n            $_SESSION['expires_on']=time()+$_SESSION['longlastingsession'];  // Set session expiration on server-side.\n\n            $cookiedir = ''; if(dirname($_SERVER['SCRIPT_NAME'])!='/') $cookiedir=dirname($_SERVER[\"SCRIPT_NAME\"]).'/';\n            session_set_cookie_params($_SESSION['longlastingsession'],$cookiedir,$_SERVER['HTTP_HOST']); // Set session cookie expiration on client side\n            // Note: Never forget the trailing slash on the cookie path !\n            session_regenerate_id(true);  // Send cookie with new expiration date to browser.\n        }\n        else // Standard session expiration (=when browser closes)\n        {\n            $cookiedir = ''; if(dirname($_SERVER['SCRIPT_NAME'])!='/') $cookiedir=dirname($_SERVER[\"SCRIPT_NAME\"]).'/';\n            session_set_cookie_params(0,$cookiedir,$_SERVER['HTTP_HOST']); // 0 means \"When browser closes\"\n            session_regenerate_id(true);\n        }\n        // Optional redirect after login:\n        if (isset($_GET['post'])) { header('Location: ?post='.urlencode($_GET['post']).(!empty($_GET['title'])?'&title='.urlencode($_GET['title']):'').(!empty($_GET['source'])?'&source='.urlencode($_GET['source']):'')); exit; }\n        if (isset($_POST['returnurl']))\n        {\n            if (endsWith($_POST['returnurl'],'?do=login')) { header('Location: ?'); exit; } // Prevent loops over login screen.\n            header('Location: '.$_POST['returnurl']); exit;\n        }\n        header('Location: ?'); exit;\n    }\n    else\n    {\n        ban_loginFailed();\n        $redir = '';\n        if (isset($_GET['post'])) { $redir = '&post='.urlencode($_GET['post']).(!empty($_GET['title'])?'&title='.urlencode($_GET['title']):'').(!empty($_GET['source'])?'&source='.urlencode($_GET['source']):'');  }\n        echo '<script language=\"JavaScript\">alert(\"Wrong login/password.\");document.location=\\'?do=login'.$redir.'\\';</script>'; // Redirect to login screen.\n        exit;\n    }\n}\n\n// ------------------------------------------------------------------------------------------\n// Misc utility functions:\n\n// Returns the server URL (including port and http/https), without path.\n// eg. \"http://myserver.com:8080\"\n// You can append $_SERVER['SCRIPT_NAME'] to get the current script URL.\nfunction serverUrl()\n{\n    $https = (!empty($_SERVER['HTTPS']) && (strtolower($_SERVER['HTTPS'])=='on')) || $_SERVER[\"SERVER_PORT\"]=='443'; // HTTPS detection.\n    $serverport = ($_SERVER[\"SERVER_PORT\"]=='80' || ($https && $_SERVER[\"SERVER_PORT\"]=='443') ? '' : ':'.$_SERVER[\"SERVER_PORT\"]);\n    return 'http'.($https?'s':'').'://'.$_SERVER['HTTP_HOST'].$serverport;\n}\n\n// Returns the absolute URL of current script, without the query.\n// (eg. http://sebsauvage.net/links/)\nfunction indexUrl()\n{\n    $scriptname = $_SERVER[\"SCRIPT_NAME\"];\n    // If the script is named 'index.php', we remove it (for better looking URLs,\n    // eg. http://mysite.com/shaarli/?abcde instead of http://mysite.com/shaarli/index.php?abcde)\n    if (endswith($scriptname,'index.php')) $scriptname = substr($scriptname,0,strlen($scriptname)-9);\n    return serverUrl() . $scriptname;\n}\n\n// Returns the absolute URL of current script, WITH the query.\n// (eg. http://sebsauvage.net/links/?toto=titi&spamspamspam=humbug)\nfunction pageUrl()\n{\n    return indexUrl().(!empty($_SERVER[\"QUERY_STRING\"]) ? '?'.$_SERVER[\"QUERY_STRING\"] : '');\n}\n\n// Convert post_max_size/upload_max_filesize (eg.'16M') parameters to bytes.\nfunction return_bytes($val)\n{\n    $val = trim($val); $last=strtolower($val[strlen($val)-1]);\n    switch($last)\n    {\n        case 'g': $val *= 1024;\n        case 'm': $val *= 1024;\n        case 'k': $val *= 1024;\n    }\n    return $val;\n}\n\n// Try to determine max file size for uploads (POST).\n// Returns an integer (in bytes)\nfunction getMaxFileSize()\n{\n    $size1 = return_bytes(ini_get('post_max_size'));\n    $size2 = return_bytes(ini_get('upload_max_filesize'));\n    // Return the smaller of two:\n    $maxsize = min($size1,$size2);\n    // FIXME: Then convert back to readable notations ? (eg. 2M instead of 2000000)\n    return $maxsize;\n}\n\n// Tells if a string start with a substring or not.\nfunction startsWith($haystack,$needle,$case=true)\n{\n    if($case){return (strcmp(substr($haystack, 0, strlen($needle)),$needle)===0);}\n    return (strcasecmp(substr($haystack, 0, strlen($needle)),$needle)===0);\n}\n\n// Tells if a string ends with a substring or not.\nfunction endsWith($haystack,$needle,$case=true)\n{\n    if($case){return (strcmp(substr($haystack, strlen($haystack) - strlen($needle)),$needle)===0);}\n    return (strcasecmp(substr($haystack, strlen($haystack) - strlen($needle)),$needle)===0);\n}\n\n/*  Converts a linkdate time (YYYYMMDD_HHMMSS) of an article to a timestamp (Unix epoch)\n    (used to build the ADD_DATE attribute in Netscape-bookmarks file)\n    PS: I could have used strptime(), but it does not exist on Windows. I'm too kind. */\nfunction linkdate2timestamp($linkdate)\n{\n    $Y=$M=$D=$h=$m=$s=0;\n    $r = sscanf($linkdate,'%4d%2d%2d_%2d%2d%2d',$Y,$M,$D,$h,$m,$s);\n    return mktime($h,$m,$s,$M,$D,$Y);\n}\n\n/*  Converts a linkdate time (YYYYMMDD_HHMMSS) of an article to a RFC822 date.\n    (used to build the pubDate attribute in RSS feed.)  */\nfunction linkdate2rfc822($linkdate)\n{\n    return date('r',linkdate2timestamp($linkdate)); // 'r' is for RFC822 date format.\n}\n\n/*  Converts a linkdate time (YYYYMMDD_HHMMSS) of an article to a ISO 8601 date.\n    (used to build the updated tags in ATOM feed.)  */\nfunction linkdate2iso8601($linkdate)\n{\n    return date('c',linkdate2timestamp($linkdate)); // 'c' is for ISO 8601 date format.\n}\n\n/*  Converts a linkdate time (YYYYMMDD_HHMMSS) of an article to a localized date format.\n    (used to display link date on screen)\n    The date format is automatically chosen according to locale/languages sniffed from browser headers (see autoLocale()). */\nfunction linkdate2locale($linkdate)\n{\n    return utf8_encode(strftime('%c',linkdate2timestamp($linkdate))); // %c is for automatic date format according to locale.\n    // Note that if you use a local which is not installed on your webserver,\n    // the date will not be displayed in the chosen locale, but probably in US notation.\n}\n\n// Parse HTTP response headers and return an associative array.\nfunction http_parse_headers_shaarli( $headers )\n{\n    $res=array();\n    foreach($headers as $header)\n    {\n        $i = strpos($header,': ');\n        if ($i!==false)\n        {\n            $key=substr($header,0,$i);\n            $value=substr($header,$i+2,strlen($header)-$i-2);\n            $res[$key]=$value;\n        }\n    }\n    return $res;\n}\n\n/* GET an URL.\n   Input: $url : url to get (http://...)\n          $timeout : Network timeout (will wait this many seconds for an anwser before giving up).\n   Output: An array.  [0] = HTTP status message (eg. \"HTTP/1.1 200 OK\") or error message\n                      [1] = associative array containing HTTP response headers (eg. echo getHTTP($url)[1]['Content-Type'])\n                      [2] = data\n    Example: list($httpstatus,$headers,$data) = getHTTP('http://sebauvage.net/');\n             if (strpos($httpstatus,'200 OK')!==false)\n                 echo 'Data type: '.htmlspecialchars($headers['Content-Type']);\n             else\n                 echo 'There was an error: '.htmlspecialchars($httpstatus)\n*/\nfunction getHTTP($url,$timeout=30)\n{\n    try\n    {\n        $options = array('http'=>array('method'=>'GET','timeout' => $timeout, 'user_agent' => 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:23.0) Gecko/20100101 Firefox/23.0')); // Force network timeout\n        $context = stream_context_create($options);\n        $data=file_get_contents($url,false,$context,-1, 4000000); // We download at most 4 Mb from source.\n        if (!$data) { return array('HTTP Error',array(),''); }\n        $httpStatus=$http_response_header[0]; // eg. \"HTTP/1.1 200 OK\"\n        $responseHeaders=http_parse_headers_shaarli($http_response_header);\n        return array($httpStatus,$responseHeaders,$data);\n    }\n    catch (Exception $e)  // getHTTP *can* fail silentely (we don't care if the title cannot be fetched)\n    {\n        return array($e->getMessage(),'','');\n    }\n}\n\n// Extract title from an HTML document.\n// (Returns an empty string if not found.)\nfunction html_extract_title($html)\n{\n  return preg_match('!<title>(.*?)</title>!is', $html, $matches) ? trim(str_replace(\"\\n\",' ', $matches[1])) : '' ;\n}\n\n// ------------------------------------------------------------------------------------------\n// Token management for XSRF protection\n// Token should be used in any form which acts on data (create,update,delete,import...).\nif (!isset($_SESSION['tokens'])) $_SESSION['tokens']=array();  // Token are attached to the session.\n\n// Returns a token.\nfunction getToken()\n{\n    $rnd = sha1(uniqid('',true).'_'.mt_rand().$GLOBALS['salt']);  // We generate a random string.\n    $_SESSION['tokens'][$rnd]=1;  // Store it on the server side.\n    return $rnd;\n}\n\n// Tells if a token is ok. Using this function will destroy the token.\n// true=token is ok.\nfunction tokenOk($token)\n{\n    if (isset($_SESSION['tokens'][$token]))\n    {\n        unset($_SESSION['tokens'][$token]); // Token is used: destroy it.\n        return true; // Token is ok.\n    }\n    return false; // Wrong token, or already used.\n}\n\n// ------------------------------------------------------------------------------------------\n/* This class is in charge of building the final page.\n   (This is basically a wrapper around RainTPL which pre-fills some fields.)\n   p = new pageBuilder;\n   p.assign('myfield','myvalue');\n   p.renderPage('mytemplate');\n\n*/\nclass pageBuilder\n{\n    private $tpl; // RainTPL template\n\n    function __construct()\n    {\n        $this->tpl=false;\n    }\n\n    private function initialize()\n    {\n        $this->tpl = new RainTPL;\n        $this->tpl->assign('newversion',checkUpdate());\n        $this->tpl->assign('feedurl',htmlspecialchars(indexUrl()));\n        $searchcrits=''; // Search criteria\n        if (!empty($_GET['searchtags'])) $searchcrits.='&searchtags='.urlencode($_GET['searchtags']);\n        elseif (!empty($_GET['searchterm'])) $searchcrits.='&searchterm='.urlencode($_GET['searchterm']);\n        $this->tpl->assign('searchcrits',$searchcrits);\n        $this->tpl->assign('source',indexUrl());\n        $this->tpl->assign('version',shaarli_version);\n        $this->tpl->assign('scripturl',indexUrl());\n        $this->tpl->assign('pagetitle','Shaarli');\n        $this->tpl->assign('privateonly',!empty($_SESSION['privateonly'])); // Show only private links ?\n        if (!empty($GLOBALS['title'])) $this->tpl->assign('pagetitle',$GLOBALS['title']);\n        if (!empty($GLOBALS['pagetitle'])) $this->tpl->assign('pagetitle',$GLOBALS['pagetitle']);\n        $this->tpl->assign('shaarlititle',empty($GLOBALS['title']) ? 'Shaarli': $GLOBALS['title'] );\n        return;\n    }\n\n    // The following assign() method is basically the same as RainTPL (except that it's lazy)\n    public function assign($what,$where)\n    {\n        if ($this->tpl===false) $this->initialize(); // Lazy initialization\n        $this->tpl->assign($what,$where);\n    }\n\n    // Render a specific page (using a template).\n    // eg. pb.renderPage('picwall')\n    public function renderPage($page)\n    {\n        if ($this->tpl===false) $this->initialize(); // Lazy initialization\n        $this->tpl->draw($page);\n    }\n}\n\n// ------------------------------------------------------------------------------------------\n/* Data storage for links.\n   This object behaves like an associative array.\n   Example:\n      $mylinks = new linkdb();\n      echo $mylinks['20110826_161819']['title'];\n      foreach($mylinks as $link)\n         echo $link['title'].' at url '.$link['url'].' ; description:'.$link['description'];\n\n   Available keys:\n       title : Title of the link\n       url : URL of the link. Can be absolute or relative. Relative URLs are permalinks (eg.'?m-ukcw')\n       description : description of the entry\n       private : Is this link private ? 0=no, other value=yes\n       linkdate : date of the creation of this entry, in the form YYYYMMDD_HHMMSS (eg.'20110914_192317')\n       tags : tags attached to this entry (separated by spaces)\n\n   We implement 3 interfaces:\n     - ArrayAccess so that this object behaves like an associative array.\n     - Iterator so that this object can be used in foreach() loops.\n     - Countable interface so that we can do a count() on this object.\n*/\nclass linkdb implements Iterator, Countable, ArrayAccess\n{\n    private $links; // List of links (associative array. Key=linkdate (eg. \"20110823_124546\"), value= associative array (keys:title,description...)\n    private $urls;  // List of all recorded URLs (key=url, value=linkdate) for fast reserve search (url-->linkdate)\n    private $keys;  // List of linkdate keys (for the Iterator interface implementation)\n    private $position; // Position in the $this->keys array. (for the Iterator interface implementation.)\n    private $loggedin; // Is the used logged in ? (used to filter private links)\n\n    // Constructor:\n    function __construct($isLoggedIn)\n    // Input : $isLoggedIn : is the used logged in ?\n    {\n        $this->loggedin = $isLoggedIn;\n        $this->checkdb(); // Make sure data file exists.\n        $this->readdb();  // Then read it.\n    }\n\n    // ---- Countable interface implementation\n    public function count() { return count($this->links); }\n\n    // ---- ArrayAccess interface implementation\n    public function offsetSet($offset, $value)\n    {\n        if (!$this->loggedin) die('You are not authorized to add a link.');\n        if (empty($value['linkdate']) || empty($value['url'])) die('Internal Error: A link should always have a linkdate and url.');\n        if (empty($offset)) die('You must specify a key.');\n        $this->links[$offset] = $value;\n        $this->urls[$value['url']]=$offset;\n    }\n    public function offsetExists($offset) { return array_key_exists($offset,$this->links); }\n    public function offsetUnset($offset)\n    {\n        if (!$this->loggedin) die('You are not authorized to delete a link.');\n        $url = $this->links[$offset]['url']; unset($this->urls[$url]);\n        unset($this->links[$offset]);\n    }\n    public function offsetGet($offset) { return isset($this->links[$offset]) ? $this->links[$offset] : null; }\n\n    // ---- Iterator interface implementation\n    function rewind() { $this->keys=array_keys($this->links); rsort($this->keys); $this->position=0; } // Start over for iteration, ordered by date (latest first).\n    function key() { return $this->keys[$this->position]; } // current key\n    function current() { return $this->links[$this->keys[$this->position]]; } // current value\n    function next() { ++$this->position; } // go to next item\n    function valid() { return isset($this->keys[$this->position]); }    // Check if current position is valid.\n\n    // ---- Misc methods\n    private function checkdb() // Check if db directory and file exists.\n    {\n        if (!file_exists($GLOBALS['config']['DATASTORE'])) // Create a dummy database for example.\n        {\n             $this->links = array();\n             $link = array('title'=>'Shaarli - sebsauvage.net','url'=>'http://sebsauvage.net/wiki/doku.php?id=php:shaarli','description'=>'Welcome to Shaarli ! This is a bookmark. To edit or delete me, you must first login.','private'=>0,'linkdate'=>'20110914_190000','tags'=>'opensource software');\n             $this->links[$link['linkdate']] = $link;\n             $link = array('title'=>'My secret stuff... - Pastebin.com','url'=>'http://sebsauvage.net/paste/?8434b27936c09649#bR7XsXhoTiLcqCpQbmOpBi3rq2zzQUC5hBI7ZT1O3x8=','description'=>'SShhhh!!  I\\'m a private link only YOU can see. You can delete me too.','private'=>1,'linkdate'=>'20110914_074522','tags'=>'secretstuff');\n             $this->links[$link['linkdate']] = $link;\n             file_put_contents($GLOBALS['config']['DATASTORE'], PHPPREFIX.base64_encode(gzdeflate(serialize($this->links))).PHPSUFFIX); // Write database to disk\n        }\n    }\n\n    // Read database from disk to memory\n    private function readdb()\n    {\n        // Read data\n        $this->links=(file_exists($GLOBALS['config']['DATASTORE']) ? unserialize(gzinflate(base64_decode(substr(file_get_contents($GLOBALS['config']['DATASTORE']),strlen(PHPPREFIX),-strlen(PHPSUFFIX))))) : array() );\n        // Note that gzinflate is faster than gzuncompress. See: http://www.php.net/manual/en/function.gzdeflate.php#96439\n\n        // If user is not logged in, filter private links.\n        if (!$this->loggedin)\n        {\n            $toremove=array();\n            foreach($this->links as $link) { if ($link['private']!=0) $toremove[]=$link['linkdate']; }\n            foreach($toremove as $linkdate) { unset($this->links[$linkdate]); }\n        }\n\n        // Keep the list of the mapping URLs-->linkdate up-to-date.\n        $this->urls=array();\n        foreach($this->links as $link) { $this->urls[$link['url']]=$link['linkdate']; }\n    }\n\n    // Save database from memory to disk.\n    public function savedb()\n    {\n        if (!$this->loggedin) die('You are not authorized to change the database.');\n        file_put_contents($GLOBALS['config']['DATASTORE'], PHPPREFIX.base64_encode(gzdeflate(serialize($this->links))).PHPSUFFIX);\n        invalidateCaches();\n    }\n\n    // Returns the link for a given URL (if it exists). false it does not exist.\n    public function getLinkFromUrl($url)\n    {\n        if (isset($this->urls[$url])) return $this->links[$this->urls[$url]];\n        return false;\n    }\n\n    // Case insentitive search among links (in url, title and description). Returns filtered list of links.\n    // eg. print_r($mydb->filterFulltext('hollandais'));\n    public function filterFulltext($searchterms)\n    {\n        // FIXME: explode(' ',$searchterms) and perform a AND search.\n        // FIXME: accept double-quotes to search for a string \"as is\" ?\n        $filtered=array();\n        $s = strtolower($searchterms);\n        foreach($this->links as $l)\n        {\n            $found=   (strpos(strtolower($l['title']),$s)!==false)\n                   || (strpos(strtolower($l['description']),$s)!==false)\n                   || (strpos(strtolower($l['url']),$s)!==false)\n                   || (strpos(strtolower($l['tags']),$s)!==false);\n            if ($found) $filtered[$l['linkdate']] = $l;\n        }\n        krsort($filtered);\n        return $filtered;\n    }\n\n    // Filter by tag.\n    // You can specify one or more tags (tags can be separated by space or comma).\n    // eg. print_r($mydb->filterTags('linux programming'));\n    public function filterTags($tags,$casesensitive=false)\n    {\n        $t = str_replace(',',' ',($casesensitive?$tags:strtolower($tags)));\n        $searchtags=explode(' ',$t);\n        $filtered=array();\n        foreach($this->links as $l)\n        {\n            $linktags = explode(' ',($casesensitive?$l['tags']:strtolower($l['tags'])));\n            if (count(array_intersect($linktags,$searchtags)) == count($searchtags))\n                $filtered[$l['linkdate']] = $l;\n        }\n        krsort($filtered);\n        return $filtered;\n    }\n\n    // Filter by day. Day must be in the form 'YYYYMMDD' (eg. '20120125')\n    // Sort order is: older articles first.\n    // eg. print_r($mydb->filterDay('20120125'));\n    public function filterDay($day)\n    {\n        $filtered=array();\n        foreach($this->links as $l)\n        {\n            if (startsWith($l['linkdate'],$day)) $filtered[$l['linkdate']] = $l;\n        }\n        ksort($filtered);\n        return $filtered;\n    }\n    // Filter by smallHash.\n    // Only 1 article is returned.\n    public function filterSmallHash($smallHash)\n    {\n        $filtered=array();\n        foreach($this->links as $l)\n        {\n            if ($smallHash==smallHash($l['linkdate'])) // Yes, this is ugly and slow\n            {\n                $filtered[$l['linkdate']] = $l;\n                return $filtered;\n            }\n        }\n        return $filtered;\n    }\n\n    // Returns the list of all tags\n    // Output: associative array key=tags, value=0\n    public function allTags()\n    {\n        $tags=array();\n        foreach($this->links as $link)\n            foreach(explode(' ',$link['tags']) as $tag)\n                if (!empty($tag)) $tags[$tag]=(empty($tags[$tag]) ? 1 : $tags[$tag]+1);\n        arsort($tags); // Sort tags by usage (most used tag first)\n        return $tags;\n    }\n\n    // Returns the list of days containing articles (oldest first)\n    // Output: An array containing days (in format YYYYMMDD).\n    public function days()\n    {\n        $linkdays=array();\n        foreach(array_keys($this->links) as $day)\n        {\n            $linkdays[substr($day,0,8)]=0;\n        }\n        $linkdays=array_keys($linkdays);\n        sort($linkdays);\n        return $linkdays;\n    }\n}\n\n// ------------------------------------------------------------------------------------------\n// Ouput the last N links in RSS 2.0 format.\nfunction showRSS()\n{\n    header('Content-Type: application/rss+xml; charset=utf-8');\n\n    // $usepermalink : If true, use permalink instead of final link.\n    // User just has to add 'permalink' in URL parameters. eg. http://mysite.com/shaarli/?do=rss&permalinks\n    $usepermalinks = isset($_GET['permalinks']);\n\n    // Cache system\n    $query = $_SERVER[\"QUERY_STRING\"];\n    $cache = new pageCache(pageUrl(),startsWith($query,'do=rss') && !isLoggedIn());\n    $cached = $cache->cachedVersion(); if (!empty($cached)) { echo $cached; exit; }\n\n    // If cached was not found (or not usable), then read the database and build the response:\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n\n    // Optionnaly filter the results:\n    $linksToDisplay=array();\n    if (!empty($_GET['searchterm'])) $linksToDisplay = $LINKSDB->filterFulltext($_GET['searchterm']);\n    elseif (!empty($_GET['searchtags']))   $linksToDisplay = $LINKSDB->filterTags(trim($_GET['searchtags']));\n    else $linksToDisplay = $LINKSDB;\n    $nblinksToDisplay = 50;  // Number of links to display.\n    if (!empty($_GET['nb']))  // In URL, you can specificy the number of links. Example: nb=200 or nb=all for all links.\n    { \n        $nblinksToDisplay = $_GET['nb']=='all' ? count($linksToDisplay) : max($_GET['nb']+0,1) ;\n    }\n\n    $pageaddr=htmlspecialchars(indexUrl());\n    echo '<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\">';\n    echo '<channel><title>'.htmlspecialchars($GLOBALS['title']).'</title><link>'.$pageaddr.'</link>';\n    echo '<description>Shared links</description><language>en-en</language><copyright>'.$pageaddr.'</copyright>'.\"\\n\\n\";\n    if (!empty($GLOBALS['config']['PUBSUBHUB_URL']))\n    {\n        echo '<!-- PubSubHubbub Discovery -->';\n        echo '<link rel=\"hub\" href=\"'.htmlspecialchars($GLOBALS['config']['PUBSUBHUB_URL']).'\" xmlns=\"http://www.w3.org/2005/Atom\" />';\n        echo '<link rel=\"self\" href=\"'.htmlspecialchars($pageaddr).'?do=rss\" xmlns=\"http://www.w3.org/2005/Atom\" />';\n        echo '<!-- End Of PubSubHubbub Discovery -->';\n    }\n    $i=0;\n    $keys=array(); foreach($linksToDisplay as $key=>$value) { $keys[]=$key; }  // No, I can't use array_keys().\n    while ($i<$nblinksToDisplay && $i<count($keys))\n    {\n        $link = $linksToDisplay[$keys[$i]];\n        $guid = $pageaddr.'?'.smallHash($link['linkdate']);\n        $rfc822date = linkdate2rfc822($link['linkdate']);\n        $absurl = htmlspecialchars($link['url']);\n        if (startsWith($absurl,'?')) $absurl=$pageaddr.$absurl;  // make permalink URL absolute\n        if ($usepermalinks===true)\n            echo '<item><title>'.htmlspecialchars($link['title']).'</title><guid isPermaLink=\"false\">'.$guid.'</guid><link>'.$guid.'</link>';\n        else\n            echo '<item><title>'.htmlspecialchars($link['title']).'</title><guid isPermaLink=\"false\">'.$guid.'</guid><link>'.$absurl.'</link>';\n        if (!$GLOBALS['config']['HIDE_TIMESTAMPS'] || isLoggedIn()) echo '<pubDate>'.htmlspecialchars($rfc822date).\"</pubDate>\\n\";\n        if ($link['tags']!='') // Adding tags to each RSS entry (as mentioned in RSS specification)\n        {\n            foreach(explode(' ',$link['tags']) as $tag) { echo '<category domain=\"'.htmlspecialchars($pageaddr).'\">'.htmlspecialchars($tag).'</category>'.\"\\n\"; }\n        }\n\n        // Add permalink in description\n        $descriptionlink = '(<a href=\"'.$guid.'\">Permalink</a>)';\n        // If user wants permalinks first, put the final link in description\n        if ($usepermalinks===true) $descriptionlink = '(<a href=\"'.$absurl.'\">Link</a>)';\n        if (strlen($link['description'])>0) $descriptionlink = '<br>'.$descriptionlink;\n        echo '<description><![CDATA['.nl2br(keepMultipleSpaces(text2clickable(htmlspecialchars($link['description'])))).$descriptionlink.']]></description>'.\"\\n</item>\\n\";\n        $i++;\n    }\n    echo '</channel></rss><!-- Cached version of '.htmlspecialchars(pageUrl()).' -->';\n\n    $cache->cache(ob_get_contents());\n    ob_end_flush();\n    exit;\n}\n\n// ------------------------------------------------------------------------------------------\n// Ouput the last N links in ATOM format.\nfunction showATOM()\n{\n    header('Content-Type: application/atom+xml; charset=utf-8');\n\n    // $usepermalink : If true, use permalink instead of final link.\n    // User just has to add 'permalink' in URL parameters. eg. http://mysite.com/shaarli/?do=atom&permalinks\n    $usepermalinks = isset($_GET['permalinks']);\n\n    // Cache system\n    $query = $_SERVER[\"QUERY_STRING\"];\n    $cache = new pageCache(pageUrl(),startsWith($query,'do=atom') && !isLoggedIn());\n    $cached = $cache->cachedVersion(); if (!empty($cached)) { echo $cached; exit; }\n    // If cached was not found (or not usable), then read the database and build the response:\n\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n\n\n    // Optionnaly filter the results:\n    $linksToDisplay=array();\n    if (!empty($_GET['searchterm'])) $linksToDisplay = $LINKSDB->filterFulltext($_GET['searchterm']);\n    elseif (!empty($_GET['searchtags']))   $linksToDisplay = $LINKSDB->filterTags(trim($_GET['searchtags']));\n    else $linksToDisplay = $LINKSDB;\n    $nblinksToDisplay = 50;  // Number of links to display.\n    if (!empty($_GET['nb']))  // In URL, you can specificy the number of links. Example: nb=200 or nb=all for all links.\n    { \n        $nblinksToDisplay = $_GET['nb']=='all' ? count($linksToDisplay) : max($_GET['nb']+0,1) ;\n    }\n\n    $pageaddr=htmlspecialchars(indexUrl());\n    $latestDate = '';\n    $entries='';\n    $i=0;\n    $keys=array(); foreach($linksToDisplay as $key=>$value) { $keys[]=$key; }  // No, I can't use array_keys().\n    while ($i<$nblinksToDisplay && $i<count($keys))\n    {\n        $link = $linksToDisplay[$keys[$i]];\n        $guid = $pageaddr.'?'.smallHash($link['linkdate']);\n        $iso8601date = linkdate2iso8601($link['linkdate']);\n        $latestDate = max($latestDate,$iso8601date);\n        $absurl = htmlspecialchars($link['url']);\n        if (startsWith($absurl,'?')) $absurl=$pageaddr.$absurl;  // make permalink URL absolute\n        $entries.='<entry><title>'.htmlspecialchars($link['title']).'</title>';\n        if ($usepermalinks===true)\n            $entries.='<link href=\"'.$guid.'\" /><id>'.$guid.'</id>';\n        else\n            $entries.='<link href=\"'.$absurl.'\" /><id>'.$guid.'</id>';\n        if (!$GLOBALS['config']['HIDE_TIMESTAMPS'] || isLoggedIn()) $entries.='<updated>'.htmlspecialchars($iso8601date).'</updated>';\n\n        // Add permalink in description\n        $descriptionlink = htmlspecialchars('(<a href=\"'.$guid.'\">Permalink</a>)');\n        // If user wants permalinks first, put the final link in description\n        if ($usepermalinks===true) $descriptionlink = htmlspecialchars('(<a href=\"'.$absurl.'\">Link</a>)');\n        if (strlen($link['description'])>0) $descriptionlink = '&lt;br&gt;'.$descriptionlink;\n\n        $entries.='<content type=\"html\">'.htmlspecialchars(nl2br(keepMultipleSpaces(text2clickable(htmlspecialchars($link['description']))))).$descriptionlink.\"</content>\\n\";\n        if ($link['tags']!='') // Adding tags to each ATOM entry (as mentioned in ATOM specification)\n        {\n            foreach(explode(' ',$link['tags']) as $tag)\n                { $entries.='<category scheme=\"'.htmlspecialchars($pageaddr,ENT_QUOTES).'\" term=\"'.htmlspecialchars($tag,ENT_QUOTES).'\" />'.\"\\n\"; }\n        }\n        $entries.=\"</entry>\\n\";\n        $i++;\n    }\n    $feed='<?xml version=\"1.0\" encoding=\"UTF-8\"?><feed xmlns=\"http://www.w3.org/2005/Atom\">';\n    $feed.='<title>'.htmlspecialchars($GLOBALS['title']).'</title>';\n    if (!$GLOBALS['config']['HIDE_TIMESTAMPS'] || isLoggedIn()) $feed.='<updated>'.htmlspecialchars($latestDate).'</updated>';\n    $feed.='<link rel=\"self\" href=\"'.htmlspecialchars(serverUrl().$_SERVER[\"REQUEST_URI\"]).'\" />';\n    if (!empty($GLOBALS['config']['PUBSUBHUB_URL']))\n    {\n        $feed.='<!-- PubSubHubbub Discovery -->';\n        $feed.='<link rel=\"hub\" href=\"'.htmlspecialchars($GLOBALS['config']['PUBSUBHUB_URL']).'\" />';\n        $feed.='<!-- End Of PubSubHubbub Discovery -->';\n    }\n    $feed.='<author><name>'.htmlspecialchars($pageaddr).'</name><uri>'.htmlspecialchars($pageaddr).'</uri></author>';\n    $feed.='<id>'.htmlspecialchars($pageaddr).'</id>'.\"\\n\\n\"; // Yes, I know I should use a real IRI (RFC3987), but the site URL will do.\n    $feed.=$entries;\n    $feed.='</feed><!-- Cached version of '.htmlspecialchars(pageUrl()).' -->';\n    echo $feed;\n\n    $cache->cache(ob_get_contents());\n    ob_end_flush();\n    exit;\n}\n\n// ------------------------------------------------------------------------------------------\n// Daily RSS feed: 1 RSS entry per day giving all the links on that day.\n// Gives the last 7 days (which have links).\n// This RSS feed cannot be filtered.\nfunction showDailyRSS()\n{\n    // Cache system\n    $query = $_SERVER[\"QUERY_STRING\"];\n    $cache = new pageCache(pageUrl(),startsWith($query,'do=dailyrss') && !isLoggedIn());\n    $cached = $cache->cachedVersion(); if (!empty($cached)) { echo $cached; exit; }\n    // If cached was not found (or not usable), then read the database and build the response:\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n\n    /* Some Shaarlies may have very few links, so we need to look\n       back in time (rsort()) until we have enough days ($nb_of_days).\n    */\n    $linkdates=array(); foreach($LINKSDB as $linkdate=>$value) { $linkdates[]=$linkdate; }\n    rsort($linkdates);\n    $nb_of_days=7; // We take 7 days.\n    $today=Date('Ymd');\n    $days=array();\n    foreach($linkdates as $linkdate)\n    {\n        $day=substr($linkdate,0,8); // Extract day (without time)\n        if (strcmp($day,$today)<0)\n        {\n            if (empty($days[$day])) $days[$day]=array();\n            $days[$day][]=$linkdate;\n        }\n        if (count($days)>$nb_of_days) break; // Have we collected enough days ?\n    }\n\n    // Build the RSS feed.\n    header('Content-Type: application/rss+xml; charset=utf-8');\n    $pageaddr=htmlspecialchars(indexUrl());\n    echo '<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\">';\n    echo '<channel><title>Daily - '.htmlspecialchars($GLOBALS['title']).'</title><link>'.$pageaddr.'</link>';\n    echo '<description>Daily shared links</description><language>en-en</language><copyright>'.$pageaddr.'</copyright>'.\"\\n\";\n\n    foreach($days as $day=>$linkdates) // For each day.\n    {\n        $daydate = utf8_encode(strftime('%A %d, %B %Y',linkdate2timestamp($day.'_000000'))); // Full text date\n        $rfc822date = linkdate2rfc822($day.'_000000');\n        $absurl=htmlspecialchars(indexUrl().'?do=daily&day='.$day);  // Absolute URL of the corresponding \"Daily\" page.\n        echo '<item><title>'.htmlspecialchars($GLOBALS['title'].' - '.$daydate).'</title><guid>'.$absurl.'</guid><link>'.$absurl.'</link>';\n        echo '<pubDate>'.htmlspecialchars($rfc822date).\"</pubDate>\";\n\n        // Build the HTML body of this RSS entry.\n        $html='';\n        $href='';\n        $links=array();\n        // We pre-format some fields for proper output.\n        foreach($linkdates as $linkdate)\n        {\n            $l = $LINKSDB[$linkdate];\n            $l['formatedDescription']=nl2br(keepMultipleSpaces(text2clickable(htmlspecialchars($l['description']))));\n            $l['thumbnail'] = thumbnail($l['url']);\n            $l['localdate']=linkdate2locale($l['linkdate']);\n            if (startsWith($l['url'],'?')) $l['url']=indexUrl().$l['url'];  // make permalink URL absolute\n            $links[$linkdate]=$l;\n        }\n        // Then build the HTML for this day:\n        $tpl = new RainTPL;\n        $tpl->assign('links',$links);\n        $html = $tpl->draw('dailyrss',$return_string=true);\n        echo \"\\n\";\n        echo '<description><![CDATA['.$html.']]></description>'.\"\\n</item>\\n\\n\";\n\n    }\n    echo '</channel></rss><!-- Cached version of '.htmlspecialchars(pageUrl()).' -->';\n\n    $cache->cache(ob_get_contents());\n    ob_end_flush();\n    exit;\n}\n\n// \"Daily\" page.\nfunction showDaily()\n{\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n\n\n    $day=Date('Ymd',strtotime('-1 day')); // Yesterday, in format YYYYMMDD.\n    if (isset($_GET['day'])) $day=$_GET['day'];\n\n    $days = $LINKSDB->days();\n    $i = array_search($day,$days);\n    if ($i==false) { $i=count($days)-1; $day=$days[$i]; }\n    $previousday='';\n    $nextday='';\n    if ($i!==false)\n    {\n        if ($i>1) $previousday=$days[$i-1];\n        if ($i<count($days)-1) $nextday=$days[$i+1];\n    }\n\n    $linksToDisplay=$LINKSDB->filterDay($day);\n    // We pre-format some fields for proper output.\n    foreach($linksToDisplay as $key=>$link)\n    {\n        $taglist = explode(' ',$link['tags']);\n        uasort($taglist, 'strcasecmp');\n        $linksToDisplay[$key]['taglist']=$taglist;\n        $linksToDisplay[$key]['formatedDescription']=nl2br(keepMultipleSpaces(text2clickable(htmlspecialchars($link['description']))));\n        $linksToDisplay[$key]['thumbnail'] = thumbnail($link['url']);\n    }\n\n    /* We need to spread the articles on 3 columns.\n       I did not want to use a javascript lib like http://masonry.desandro.com/\n       so I manually spread entries with a simple method: I roughly evaluate the\n       height of a div according to title and description length.\n    */\n    $columns=array(array(),array(),array()); // Entries to display, for each column.\n    $fill=array(0,0,0);  // Rough estimate of columns fill.\n    foreach($linksToDisplay as $key=>$link)\n    {\n        // Roughly estimate length of entry (by counting characters)\n        // Title: 30 chars = 1 line. 1 line is 30 pixels height.\n        // Description: 836 characters gives roughly 342 pixel height.\n        // This is not perfect, but it's usually ok.\n        $length=strlen($link['title'])+(342*strlen($link['description']))/836;\n        if ($link['thumbnail']) $length +=100; // 1 thumbnails roughly takes 100 pixels height.\n        // Then put in column which is the less filled:\n        $smallest=min($fill); // find smallest value in array.\n        $index=array_search($smallest,$fill); // find index of this smallest value.\n        array_push($columns[$index],$link); // Put entry in this column.\n        $fill[$index]+=$length;\n    }\n    $PAGE = new pageBuilder;\n    $PAGE->assign('linksToDisplay',$linksToDisplay);\n    $PAGE->assign('linkcount',count($LINKSDB));\n    $PAGE->assign('col1',$columns[0]);\n    $PAGE->assign('col1',$columns[0]);\n    $PAGE->assign('col2',$columns[1]);\n    $PAGE->assign('col3',$columns[2]);\n    $PAGE->assign('day',utf8_encode(strftime('%A %d, %B %Y',linkdate2timestamp($day.'_000000'))));\n    $PAGE->assign('previousday',$previousday);\n    $PAGE->assign('nextday',$nextday);\n    $PAGE->renderPage('daily');\n    exit;\n}\n\n\n// ------------------------------------------------------------------------------------------\n// Render HTML page (according to URL parameters and user rights)\nfunction renderPage()\n{\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n\n    // -------- Display login form.\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=login'))\n    {\n        if ($GLOBALS['config']['OPEN_SHAARLI']) { header('Location: ?'); exit; }  // No need to login for open Shaarli\n        $token=''; if (ban_canLogin()) $token=getToken(); // Do not waste token generation if not useful.\n        $PAGE = new pageBuilder;\n        $PAGE->assign('token',$token);\n        $PAGE->assign('returnurl',(isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER']:''));\n        $PAGE->renderPage('loginform');\n        exit;\n    }\n    // -------- User wants to logout.\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=logout'))\n    {\n        invalidateCaches();\n        logout();\n        header('Location: ?');\n        exit;\n    }\n\n    // -------- Picture wall\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=picwall'))\n    {\n        // Optionnaly filter the results:\n        $links=array();\n        if (!empty($_GET['searchterm'])) $links = $LINKSDB->filterFulltext($_GET['searchterm']);\n        elseif (!empty($_GET['searchtags']))   $links = $LINKSDB->filterTags(trim($_GET['searchtags']));\n        else $links = $LINKSDB;\n        $body='';\n        $linksToDisplay=array();\n\n        // Get only links which have a thumbnail.\n        foreach($links as $link)\n        {\n            $permalink='?'.htmlspecialchars(smallhash($link['linkdate']),ENT_QUOTES);\n            $thumb=lazyThumbnail($link['url'],$permalink);\n            if ($thumb!='') // Only output links which have a thumbnail.\n            {\n                $link['thumbnail']=$thumb; // Thumbnail HTML code.\n                $link['permalink']=$permalink;\n                $linksToDisplay[]=$link; // Add to array.\n            }\n        }\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->assign('linksToDisplay',$linksToDisplay);\n        $PAGE->renderPage('picwall');\n        exit;\n    }\n\n    // -------- Tag cloud\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=tagcloud'))\n    {\n        $tags= $LINKSDB->allTags();\n        // We sort tags alphabetically, then choose a font size according to count.\n        // First, find max value.\n        $maxcount=0; foreach($tags as $key=>$value) $maxcount=max($maxcount,$value);\n        ksort($tags);\n        $tagList=array();\n        foreach($tags as $key=>$value)\n        {\n            $tagList[$key] = array('count'=>$value,'size'=>max(40*$value/$maxcount,8));\n        }\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->assign('tags',$tagList);\n        $PAGE->renderPage('tagcloud');\n        exit;\n    }\n\n    // -------- User clicks on a tag in a link: The tag is added to the list of searched tags (searchtags=...)\n    if (isset($_GET['addtag']))\n    {\n        // Get previous URL (http_referer) and add the tag to the searchtags parameters in query.\n        if (empty($_SERVER['HTTP_REFERER'])) { header('Location: ?searchtags='.urlencode($_GET['addtag'])); exit; } // In case browser does not send HTTP_REFERER\n        parse_str(parse_url($_SERVER['HTTP_REFERER'],PHP_URL_QUERY), $params);\n        $params['searchtags'] = (empty($params['searchtags']) ?  trim($_GET['addtag']) : trim($params['searchtags']).' '.trim($_GET['addtag']));\n        unset($params['page']); // We also remove page (keeping the same page has no sense, since the results are different)\n        header('Location: ?'.http_build_query($params));\n        exit;\n    }\n\n    // -------- User clicks on a tag in result count: Remove the tag from the list of searched tags (searchtags=...)\n    if (isset($_GET['removetag']))\n    {\n        // Get previous URL (http_referer) and remove the tag from the searchtags parameters in query.\n        if (empty($_SERVER['HTTP_REFERER'])) { header('Location: ?'); exit; } // In case browser does not send HTTP_REFERER\n        parse_str(parse_url($_SERVER['HTTP_REFERER'],PHP_URL_QUERY), $params);\n        if (isset($params['searchtags']))\n        {\n            $tags = explode(' ',$params['searchtags']);\n            $tags=array_diff($tags, array($_GET['removetag'])); // Remove value from array $tags.\n            if (count($tags)==0) unset($params['searchtags']); else $params['searchtags'] = implode(' ',$tags);\n            unset($params['page']); // We also remove page (keeping the same page has no sense, since the results are different)\n        }\n        header('Location: ?'.http_build_query($params));\n        exit;\n    }\n\n    // -------- User wants to change the number of links per page (linksperpage=...)\n    if (isset($_GET['linksperpage']))\n    {\n        if (is_numeric($_GET['linksperpage'])) { $_SESSION['LINKS_PER_PAGE']=abs(intval($_GET['linksperpage'])); }\n        // Make sure the referer is from Shaarli itself.\n        $referer = '?';\n        if (!empty($_SERVER['HTTP_REFERER']) && strcmp(parse_url($_SERVER['HTTP_REFERER'],PHP_URL_HOST),$_SERVER['HTTP_HOST'])==0)\n            $referer = $_SERVER['HTTP_REFERER'];\n        header('Location: '.$referer);\n        exit;\n    }\n\n    // -------- User wants to see only private links (toggle)\n    if (isset($_GET['privateonly']))\n    {\n        if (empty($_SESSION['privateonly']))\n        {\n            $_SESSION['privateonly']=1; // See only private links\n        }\n        else\n        {\n            unset($_SESSION['privateonly']); // See all links\n        }\n        // Make sure the referer is from Shaarli itself.\n        $referer = '?';\n        if (!empty($_SERVER['HTTP_REFERER']) && strcmp(parse_url($_SERVER['HTTP_REFERER'],PHP_URL_HOST),$_SERVER['HTTP_HOST'])==0)\n            $referer = $_SERVER['HTTP_REFERER'];\n        header('Location: '.$referer);\n        exit;\n    }\n\n    // -------- Handle other actions allowed for non-logged in users:\n    if (!isLoggedIn())\n    {\n        // User tries to post new link but is not loggedin:\n        // Show login screen, then redirect to ?post=...\n        if (isset($_GET['post']))\n        {\n            header('Location: ?do=login&post='.urlencode($_GET['post']).(!empty($_GET['title'])?'&title='.urlencode($_GET['title']):'').(!empty($_GET['source'])?'&source='.urlencode($_GET['source']):'')); // Redirect to login page, then back to post link.\n            exit;\n        }\n        $PAGE = new pageBuilder;\n        buildLinkList($PAGE,$LINKSDB); // Compute list of links to display\n        $PAGE->renderPage('linklist');\n        exit; // Never remove this one ! All operations below are reserved for logged in user.\n    }\n\n    // -------- All other functions are reserved for the registered user:\n\n    // -------- Display the Tools menu if requested (import/export/bookmarklet...)\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=tools'))\n    {\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->assign('pageabsaddr',indexUrl());\n        $PAGE->renderPage('tools');\n        exit;\n    }\n\n    // -------- User wants to change his/her password.\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=changepasswd'))\n    {\n        if ($GLOBALS['config']['OPEN_SHAARLI']) die('You are not supposed to change a password on an Open Shaarli.');\n        if (!empty($_POST['setpassword']) && !empty($_POST['oldpassword']))\n        {\n            if (!tokenOk($_POST['token'])) die('Wrong token.'); // Go away !\n\n            // Make sure old password is correct.\n            $oldhash = sha1($_POST['oldpassword'].$GLOBALS['login'].$GLOBALS['salt']);\n            if ($oldhash!=$GLOBALS['hash']) { echo '<script language=\"JavaScript\">alert(\"The old password is not correct.\");document.location=\\'?do=changepasswd\\';</script>'; exit; }\n            // Save new password\n            $GLOBALS['salt'] = sha1(uniqid('',true).'_'.mt_rand()); // Salt renders rainbow-tables attacks useless.\n            $GLOBALS['hash'] = sha1($_POST['setpassword'].$GLOBALS['login'].$GLOBALS['salt']);\n            writeConfig();\n            echo '<script language=\"JavaScript\">alert(\"Your password has been changed.\");document.location=\\'?do=tools\\';</script>';\n            exit;\n        }\n        else // show the change password form.\n        {\n            $PAGE = new pageBuilder;\n            $PAGE->assign('linkcount',count($LINKSDB));\n            $PAGE->assign('token',getToken());\n            $PAGE->renderPage('changepassword');\n            exit;\n        }\n    }\n\n    // -------- User wants to change configuration\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=configure'))\n    {\n        if (!empty($_POST['title']) )\n        {\n            if (!tokenOk($_POST['token'])) die('Wrong token.'); // Go away !\n            $tz = 'UTC';\n            if (!empty($_POST['continent']) && !empty($_POST['city']))\n                if (isTZvalid($_POST['continent'],$_POST['city']))\n                    $tz = $_POST['continent'].'/'.$_POST['city'];\n            $GLOBALS['timezone'] = $tz;\n            $GLOBALS['title']=$_POST['title'];\n            $GLOBALS['redirector']=$_POST['redirector'];\n            $GLOBALS['disablesessionprotection']=!empty($_POST['disablesessionprotection']);\n            $GLOBALS['disablejquery']=!empty($_POST['disablejquery']);\n            $GLOBALS['privateLinkByDefault']=!empty($_POST['privateLinkByDefault']);\n            writeConfig();\n            echo '<script language=\"JavaScript\">alert(\"Configuration was saved.\");document.location=\\'?do=tools\\';</script>';\n            exit;\n        }\n        else // Show the configuration form.\n        {\n            $PAGE = new pageBuilder;\n            $PAGE->assign('linkcount',count($LINKSDB));\n            $PAGE->assign('token',getToken());\n            $PAGE->assign('title',htmlspecialchars( empty($GLOBALS['title']) ? '' : $GLOBALS['title'] , ENT_QUOTES));\n            $PAGE->assign('redirector',htmlspecialchars( empty($GLOBALS['redirector']) ? '' : $GLOBALS['redirector'] , ENT_QUOTES));\n            list($timezone_form,$timezone_js) = templateTZform($GLOBALS['timezone']);\n            $PAGE->assign('timezone_form',$timezone_form); // FIXME: put entire tz form generation in template ?\n            $PAGE->assign('timezone_js',$timezone_js);\n            $PAGE->renderPage('configure');\n            exit;\n        }\n    }\n\n    // -------- User wants to rename a tag or delete it\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=changetag'))\n    {\n        if (empty($_POST['fromtag']))\n        {\n            $PAGE = new pageBuilder;\n            $PAGE->assign('linkcount',count($LINKSDB));\n            $PAGE->assign('token',getToken());\n            $PAGE->renderPage('changetag');\n            exit;\n        }\n        if (!tokenOk($_POST['token'])) die('Wrong token.');\n\n        // Delete a tag:\n        if (!empty($_POST['deletetag']) && !empty($_POST['fromtag']))\n        {\n            $needle=trim($_POST['fromtag']);\n            $linksToAlter = $LINKSDB->filterTags($needle,true); // true for case-sensitive tag search.\n            foreach($linksToAlter as $key=>$value)\n            {\n                $tags = explode(' ',trim($value['tags']));\n                unset($tags[array_search($needle,$tags)]); // Remove tag.\n                $value['tags']=trim(implode(' ',$tags));\n                $LINKSDB[$key]=$value;\n            }\n            $LINKSDB->savedb(); // save to disk\n            echo '<script language=\"JavaScript\">alert(\"Tag was removed from '.count($linksToAlter).' links.\");document.location=\\'?\\';</script>';\n            exit;\n        }\n\n        // Rename a tag:\n        if (!empty($_POST['renametag']) && !empty($_POST['fromtag']) && !empty($_POST['totag']))\n        {\n            $needle=trim($_POST['fromtag']);\n            $linksToAlter = $LINKSDB->filterTags($needle,true); // true for case-sensitive tag search.\n            foreach($linksToAlter as $key=>$value)\n            {\n                $tags = explode(' ',trim($value['tags']));\n                $tags[array_search($needle,$tags)] = trim($_POST['totag']); // Remplace tags value.\n                $value['tags']=trim(implode(' ',$tags));\n                $LINKSDB[$key]=$value;\n            }\n            $LINKSDB->savedb(); // save to disk\n            echo '<script language=\"JavaScript\">alert(\"Tag was renamed in '.count($linksToAlter).' links.\");document.location=\\'?searchtags='.urlencode($_POST['totag']).'\\';</script>';\n            exit;\n        }\n    }\n\n    // -------- User wants to add a link without using the bookmarklet: show form.\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=addlink'))\n    {\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->renderPage('addlink');\n        exit;\n    }\n\n    // -------- User clicked the \"Save\" button when editing a link: Save link to database.\n    if (isset($_POST['save_edit']))\n    {\n        if (!tokenOk($_POST['token'])) die('Wrong token.'); // Go away !\n        $tags = trim(preg_replace('/\\s\\s+/',' ', $_POST['lf_tags'])); // Remove multiple spaces.\n        $linkdate=$_POST['lf_linkdate'];\n        $url = trim($_POST['lf_url']);\n        if (!startsWith($url,'http:') && !startsWith($url,'https:') && !startsWith($url,'ftp:') && !startsWith($url,'magnet:') && !startsWith($url,'?'))\n            $url = 'http://'.$url;\n        $link = array('title'=>trim($_POST['lf_title']),'url'=>$url,'description'=>trim($_POST['lf_description']),'private'=>(isset($_POST['lf_private']) ? 1 : 0),\n                      'linkdate'=>$linkdate,'tags'=>str_replace(',',' ',$tags));\n        if ($link['title']=='') $link['title']=$link['url']; // If title is empty, use the URL as title.\n        $LINKSDB[$linkdate] = $link;\n        $LINKSDB->savedb(); // save to disk\n        pubsubhub();\n\n        // If we are called from the bookmarklet, we must close the popup:\n        if (isset($_GET['source']) && $_GET['source']=='bookmarklet') { echo '<script language=\"JavaScript\">self.close();</script>'; exit; }\n        $returnurl = ( isset($_POST['returnurl']) ? $_POST['returnurl'] : '?' );\n        $returnurl .= '#'.smallHash($linkdate);  // Scroll to the link which has been edited.\n        header('Location: '.$returnurl); // After saving the link, redirect to the page the user was on.\n        exit;\n    }\n\n    // -------- User clicked the \"Cancel\" button when editing a link.\n    if (isset($_POST['cancel_edit']))\n    {\n        // If we are called from the bookmarklet, we must close the popup;\n        if (isset($_GET['source']) && $_GET['source']=='bookmarklet') { echo '<script language=\"JavaScript\">self.close();</script>'; exit; }\n        $returnurl = ( isset($_POST['returnurl']) ? $_POST['returnurl'] : '?' );\n        $returnurl .= '#'.smallHash($_POST['lf_linkdate']);  // Scroll to the link which has been edited.\n        header('Location: '.$returnurl); // After canceling, redirect to the page the user was on.\n        exit;\n    }\n\n    // -------- User clicked the \"Delete\" button when editing a link : Delete link from database.\n    if (isset($_POST['delete_link']))\n    {\n        if (!tokenOk($_POST['token'])) die('Wrong token.');\n        // We do not need to ask for confirmation:\n        // - confirmation is handled by javascript\n        // - we are protected from XSRF by the token.\n        $linkdate=$_POST['lf_linkdate'];\n        unset($LINKSDB[$linkdate]);\n        $LINKSDB->savedb(); // save to disk\n\n        // If we are called from the bookmarklet, we must close the popup:\n        if (isset($_GET['source']) && $_GET['source']=='bookmarklet') { echo '<script language=\"JavaScript\">self.close();</script>'; exit; }\n        $returnurl = ( isset($_POST['returnurl']) ? $_POST['returnurl'] : '?' );\n        if ($returnurl=='?') { $returnurl = (isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '?'); }\n        header('Location: '.$returnurl); // After deleting the link, redirect to the page the user was on.\n        exit;\n    }\n\n    // -------- User clicked the \"EDIT\" button on a link: Display link edit form.\n    if (isset($_GET['edit_link']))\n    {\n        $link = $LINKSDB[$_GET['edit_link']];  // Read database\n        if (!$link) { header('Location: ?'); exit; } // Link not found in database.\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->assign('link',$link);\n        $PAGE->assign('link_is_new',false);\n        $PAGE->assign('token',getToken()); // XSRF protection.\n        $PAGE->assign('http_referer',(isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : ''));\n        $PAGE->renderPage('editlink');\n        exit;\n    }\n\n    // -------- User want to post a new link: Display link edit form.\n    if (isset($_GET['post']))\n    {\n        $url=$_GET['post'];\n\n        // We remove the annoying parameters added by FeedBurner and GoogleFeedProxy (?utm_source=...)\n        $i=strpos($url,'&utm_source='); if ($i!==false) $url=substr($url,0,$i);\n        $i=strpos($url,'?utm_source='); if ($i!==false) $url=substr($url,0,$i);\n        $i=strpos($url,'#xtor=RSS-'); if ($i!==false) $url=substr($url,0,$i);\n\n        $link_is_new = false;\n        $link = $LINKSDB->getLinkFromUrl($url); // Check if URL is not already in database (in this case, we will edit the existing link)\n        if (!$link)\n        {\n            $link_is_new = true;  // This is a new link\n            $linkdate = strval(date('Ymd_His'));\n            $title = (empty($_GET['title']) ? '' : $_GET['title'] ); // Get title if it was provided in URL (by the bookmarklet).\n            $description = (empty($_GET['description']) ? '' : $_GET['description']); // Get description if it was provided in URL (by the bookmarklet). [Bronco added that]\n            $tags = (empty($_GET['tags']) ? '' : $_GET['tags'] ); // Get tags if it was provided in URL\n            $private = (!empty($_GET['private']) && $_GET['private'] === \"1\" ? 1 : 0); // Get private if it was provided in URL \n            if (($url!='') && parse_url($url,PHP_URL_SCHEME)=='') $url = 'http://'.$url;\n            // If this is an HTTP link, we try go get the page to extact the title (otherwise we will to straight to the edit form.)\n            if (empty($title) && parse_url($url,PHP_URL_SCHEME)=='http')\n            {\n                list($status,$headers,$data) = getHTTP($url,4); // Short timeout to keep the application responsive.\n                // FIXME: Decode charset according to specified in either 1) HTTP response headers or 2) <head> in html\n                if (strpos($status,'200 OK')!==false)\n \t\t\t\t\t {\n                        // Look for charset in html header.\n \t\t\t\t\t\tpreg_match('#<meta .*charset=.*>#Usi', $data, $meta);\n \n \t\t\t\t\t\t// If found, extract encoding.\n \t\t\t\t\t\tif (!empty($meta[0]))\n \t\t\t\t\t\t{\n \t\t\t\t\t\t\t// Get encoding specified in header.\n \t\t\t\t\t\t\tpreg_match('#charset=\"?(.*)\"#si', $meta[0], $enc);\n \t\t\t\t\t\t\t// If charset not found, use utf-8.\n\t\t\t\t\t\t\t$html_charset = (!empty($enc[1])) ? strtolower($enc[1]) : 'utf-8';\n \t\t\t\t\t\t}\n \t\t\t\t\t\telse { $html_charset = 'utf-8'; }\n \n \t\t\t\t\t\t// Extract title\n \t\t\t\t\t\t$title = html_extract_title($data);\n \t\t\t\t\t\tif (!empty($title))\n \t\t\t\t\t\t{\n \t\t\t\t\t\t\t// Re-encode title in utf-8 if necessary.\n \t\t\t\t\t\t\t$title = ($html_charset == 'iso-8859-1') ? utf8_encode($title) : $title;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n            }\n            if ($url=='') $url='?'.smallHash($linkdate); // In case of empty URL, this is just a text (with a link that point to itself)\n            $link = array('linkdate'=>$linkdate,'title'=>$title,'url'=>$url,'description'=>$description,'tags'=>$tags,'private'=>$private);\n        }\n\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->assign('link',$link);\n        $PAGE->assign('link_is_new',$link_is_new);\n        $PAGE->assign('token',getToken()); // XSRF protection.\n        $PAGE->assign('http_referer',(isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : ''));\n        $PAGE->renderPage('editlink');\n        exit;\n    }\n\n    // -------- Export as Netscape Bookmarks HTML file.\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=export'))\n    {\n        if (empty($_GET['what']))\n        {\n            $PAGE = new pageBuilder;\n            $PAGE->assign('linkcount',count($LINKSDB));\n            $PAGE->renderPage('export');\n            exit;\n        }\n        $exportWhat=$_GET['what'];\n        if (!array_intersect(array('all','public','private'),array($exportWhat))) die('What are you trying to export ???');\n\n        header('Content-Type: text/html; charset=utf-8');\n        header('Content-disposition: attachment; filename=bookmarks_'.$exportWhat.'_'.strval(date('Ymd_His')).'.html');\n        $currentdate=date('Y/m/d H:i:s');\n        echo <<<HTML\n<!DOCTYPE NETSCAPE-Bookmark-file-1>\n<!-- This is an automatically generated file.\n     It will be read and overwritten.\n     DO NOT EDIT! -->\n<!-- Shaarli {$exportWhat} bookmarks export on {$currentdate} -->\n<META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=UTF-8\">\n<TITLE>Bookmarks</TITLE>\n<H1>Bookmarks</H1>\nHTML;\n        foreach($LINKSDB as $link)\n        {\n            if ($exportWhat=='all' ||\n               ($exportWhat=='private' && $link['private']!=0) ||\n               ($exportWhat=='public' && $link['private']==0))\n            {\n                echo '<DT><A HREF=\"'.htmlspecialchars($link['url']).'\" ADD_DATE=\"'.linkdate2timestamp($link['linkdate']).'\" PRIVATE=\"'.$link['private'].'\"';\n                if ($link['tags']!='') echo ' TAGS=\"'.htmlspecialchars(str_replace(' ',',',$link['tags'])).'\"';\n                echo '>'.htmlspecialchars($link['title']).\"</A>\\n\";\n                if ($link['description']!='') echo '<DD>'.htmlspecialchars($link['description']).\"\\n\";\n            }\n        }\n                exit;\n    }\n\n    // -------- User is uploading a file for import\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=upload'))\n    {\n        // If file is too big, some form field may be missing.\n        if (!isset($_POST['token']) || (!isset($_FILES)) || (isset($_FILES['filetoupload']['size']) && $_FILES['filetoupload']['size']==0))\n        {\n            $returnurl = ( empty($_SERVER['HTTP_REFERER']) ? '?' : $_SERVER['HTTP_REFERER'] );\n            echo '<script language=\"JavaScript\">alert(\"The file you are trying to upload is probably bigger than what this webserver can accept ('.getMaxFileSize().' bytes). Please upload in smaller chunks.\");document.location=\\''.htmlspecialchars($returnurl).'\\';</script>';\n            exit;\n        }\n        if (!tokenOk($_POST['token'])) die('Wrong token.');\n        importFile();\n        exit;\n    }\n\n    // -------- Show upload/import dialog:\n    if (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=import'))\n    {\n        $PAGE = new pageBuilder;\n        $PAGE->assign('linkcount',count($LINKSDB));\n        $PAGE->assign('token',getToken());\n        $PAGE->assign('maxfilesize',getMaxFileSize());\n        $PAGE->renderPage('import');\n        exit;\n    }\n\n    // -------- Otherwise, simply display search form and links:\n    $PAGE = new pageBuilder;\n    $PAGE->assign('linkcount',count($LINKSDB));\n    buildLinkList($PAGE,$LINKSDB); // Compute list of links to display\n    $PAGE->renderPage('linklist');\n    exit;\n}\n\n// -----------------------------------------------------------------------------------------------\n// Process the import file form.\nfunction importFile()\n{\n    if (!(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI'])) { die('Not allowed.'); }\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n    $filename=$_FILES['filetoupload']['name'];\n    $filesize=$_FILES['filetoupload']['size'];\n    $data=file_get_contents($_FILES['filetoupload']['tmp_name']);\n    $private = (empty($_POST['private']) ? 0 : 1); // Should the links be imported as private ?\n    $overwrite = !empty($_POST['overwrite']) ; // Should the imported links overwrite existing ones ?\n    $import_count=0;\n\n    // Sniff file type:\n    $type='unknown';\n    if (startsWith($data,'<!DOCTYPE NETSCAPE-Bookmark-file-1>')) $type='netscape'; // Netscape bookmark file (aka Firefox).\n\n    // Then import the bookmarks.\n    if ($type=='netscape')\n    {\n        // This is a standard Netscape-style bookmark file.\n        // This format is supported by all browsers (except IE, of course), also delicious, diigo and others.\n        foreach(explode('<DT>',$data) as $html) // explode is very fast\n        {\n            $link = array('linkdate'=>'','title'=>'','url'=>'','description'=>'','tags'=>'','private'=>0);\n            $d = explode('<DD>',$html);\n            if (startswith($d[0],'<A '))\n            {\n                $link['description'] = (isset($d[1]) ? html_entity_decode(trim($d[1]),ENT_QUOTES,'UTF-8') : '');  // Get description (optional)\n                preg_match('!<A .*?>(.*?)</A>!i',$d[0],$matches); $link['title'] = (isset($matches[1]) ? trim($matches[1]) : '');  // Get title\n                $link['title'] = html_entity_decode($link['title'],ENT_QUOTES,'UTF-8');\n                preg_match_all('! ([A-Z_]+)=\\\"(.*?)\"!i',$html,$matches,PREG_SET_ORDER);  // Get all other attributes\n                $raw_add_date=0;\n                foreach($matches as $m)\n                {\n                    $attr=$m[1]; $value=$m[2];\n                    if ($attr=='HREF') $link['url']=html_entity_decode($value,ENT_QUOTES,'UTF-8');\n                    elseif ($attr=='ADD_DATE')\n                    {\n                        $raw_add_date=intval($value);\n                        if ($raw_add_date>30000000000) $raw_add_date/=1000;\t//If larger than year 2920, then was likely stored in milliseconds instead of seconds\n                    }\n                    elseif ($attr=='PRIVATE') $link['private']=($value=='0'?0:1);\n                    elseif ($attr=='TAGS') $link['tags']=html_entity_decode(str_replace(',',' ',$value),ENT_QUOTES,'UTF-8');\n                }\n                if ($link['url']!='')\n                {\n                    if ($private==1) $link['private']=1;\n                    $dblink = $LINKSDB->getLinkFromUrl($link['url']); // See if the link is already in database.\n                    if ($dblink==false)\n                    {  // Link not in database, let's import it...\n                       if (empty($raw_add_date)) $raw_add_date=time(); // In case of shitty bookmark file with no ADD_DATE\n\n                       // Make sure date/time is not already used by another link.\n                       // (Some bookmark files have several different links with the same ADD_DATE)\n                       // We increment date by 1 second until we find a date which is not used in db.\n                       // (so that links that have the same date/time are more or less kept grouped by date, but do not conflict.)\n                       while (!empty($LINKSDB[date('Ymd_His',$raw_add_date)])) { $raw_add_date++; }// Yes, I know it's ugly.\n                       $link['linkdate']=date('Ymd_His',$raw_add_date);\n                       $LINKSDB[$link['linkdate']] = $link;\n                       $import_count++;\n                    }\n                    else // link already present in database.\n                    {\n                        if ($overwrite)\n                        {   // If overwrite is required, we import link data, except date/time.\n                            $link['linkdate']=$dblink['linkdate'];\n                            $LINKSDB[$link['linkdate']] = $link;\n                            $import_count++;\n                        }\n                    }\n\n                }\n            }\n        }\n        $LINKSDB->savedb();\n\n        echo '<script language=\"JavaScript\">alert(\"File '.json_encode($filename).' ('.$filesize.' bytes) was successfully processed: '.$import_count.' links imported.\");document.location=\\'?\\';</script>';\n    }\n    else\n    {\n        echo '<script language=\"JavaScript\">alert(\"File '.json_encode($filename).' ('.$filesize.' bytes) has an unknown file format. Nothing was imported.\");document.location=\\'?\\';</script>';\n    }\n}\n\n// -----------------------------------------------------------------------------------------------\n// Template for the list of links (<div id=\"linklist\">)\n// This function fills all the necessary fields in the $PAGE for the template 'linklist.html'\nfunction buildLinkList($PAGE,$LINKSDB)\n{\n    // ---- Filter link database according to parameters\n    $linksToDisplay=array();\n    $search_type='';\n    $search_crits='';\n    if (isset($_GET['searchterm'])) // Fulltext search\n    {\n        $linksToDisplay = $LINKSDB->filterFulltext(trim($_GET['searchterm']));\n        $search_crits=htmlspecialchars(trim($_GET['searchterm']));\n        $search_type='fulltext';\n    }\n    elseif (isset($_GET['searchtags'])) // Search by tag\n    {\n        $linksToDisplay = $LINKSDB->filterTags(trim($_GET['searchtags']));\n        $search_crits=explode(' ',trim($_GET['searchtags']));\n        $search_type='tags';\n    }\n    elseif (isset($_SERVER['QUERY_STRING']) && preg_match('/[a-zA-Z0-9-_@]{6}(&.+?)?/',$_SERVER['QUERY_STRING'])) // Detect smallHashes in URL\n    {\n        $linksToDisplay = $LINKSDB->filterSmallHash(substr(trim($_SERVER[\"QUERY_STRING\"], '/'),0,6));\n        if (count($linksToDisplay)==0)\n        {\n            header($_SERVER[\"SERVER_PROTOCOL\"].\" 404 Not Found\");\n            echo '<h1>404 Not found.</h1>Oh crap. The link you are trying to reach does not exist or has been deleted.';\n            echo '<br>You would mind <a href=\"?\">clicking here</a> ?';\n            exit;\n        }\n        $search_type='permalink';\n    }\n    else\n        $linksToDisplay = $LINKSDB;  // otherwise, display without filtering.\n\n    // Option: Show only private links\n    if (!empty($_SESSION['privateonly']))\n    {\n        $tmp = array();\n        foreach($linksToDisplay as $linkdate=>$link)\n        {\n            if ($link['private']!=0) $tmp[$linkdate]=$link;\n        }\n        $linksToDisplay=$tmp;\n    }\n\n    // ---- Handle paging.\n    /* Can someone explain to me why you get the following error when using array_keys() on an object which implements the interface ArrayAccess ???\n       \"Warning: array_keys() expects parameter 1 to be array, object given in ... \"\n       If my class implements ArrayAccess, why won't array_keys() accept it ?  ( $keys=array_keys($linksToDisplay); )\n    */\n    $keys=array(); foreach($linksToDisplay as $key=>$value) { $keys[]=$key; } // Stupid and ugly. Thanks php.\n\n    // If there is only a single link, we change on-the-fly the title of the page.\n    if (count($linksToDisplay)==1) $GLOBALS['pagetitle'] = $linksToDisplay[$keys[0]]['title'].' - '.$GLOBALS['title'];\n\n    // Select articles according to paging.\n    $pagecount = ceil(count($keys)/$_SESSION['LINKS_PER_PAGE']);\n    $pagecount = ($pagecount==0 ? 1 : $pagecount);\n    $page=( empty($_GET['page']) ? 1 : intval($_GET['page']));\n    $page = ( $page<1 ? 1 : $page );\n    $page = ( $page>$pagecount ? $pagecount : $page );\n    $i = ($page-1)*$_SESSION['LINKS_PER_PAGE']; // Start index.\n    $end = $i+$_SESSION['LINKS_PER_PAGE'];\n    $linkDisp=array(); // Links to display\n    while ($i<$end && $i<count($keys))\n    {\n        $link = $linksToDisplay[$keys[$i]];\n        $link['description']=nl2br(keepMultipleSpaces(text2clickable(htmlspecialchars($link['description']))));\n        $title=$link['title'];\n        $classLi =  $i%2!=0 ? '' : 'publicLinkHightLight';\n        $link['class'] = ($link['private']==0 ? $classLi : 'private');\n        $link['localdate']=linkdate2locale($link['linkdate']);\n        $taglist = explode(' ',$link['tags']);\n        uasort($taglist, 'strcasecmp');\n        $link['taglist']=$taglist;\n        $linkDisp[$keys[$i]] = $link;\n        $i++;\n    }\n\n    // Compute paging navigation\n    $searchterm= ( empty($_GET['searchterm']) ? '' : '&searchterm='.$_GET['searchterm'] );\n    $searchtags= ( empty($_GET['searchtags']) ? '' : '&searchtags='.$_GET['searchtags'] );\n    $paging='';\n    $previous_page_url=''; if ($i!=count($keys)) $previous_page_url='?page='.($page+1).$searchterm.$searchtags;\n    $next_page_url='';if ($page>1) $next_page_url='?page='.($page-1).$searchterm.$searchtags;\n\n    $token = ''; if (isLoggedIn()) $token=getToken();\n\n    // Fill all template fields.\n    $PAGE->assign('linkcount',count($LINKSDB));\n    $PAGE->assign('previous_page_url',$previous_page_url);\n    $PAGE->assign('next_page_url',$next_page_url);\n    $PAGE->assign('page_current',$page);\n    $PAGE->assign('page_max',$pagecount);\n    $PAGE->assign('result_count',count($linksToDisplay));\n    $PAGE->assign('search_type',$search_type);\n    $PAGE->assign('search_crits',$search_crits);\n    $PAGE->assign('redirector',empty($GLOBALS['redirector']) ? '' : $GLOBALS['redirector']); // optional redirector URL\n    $PAGE->assign('token',$token);\n    $PAGE->assign('links',$linkDisp);\n    return;\n}\n\n// Compute the thumbnail for a link.\n//\n// with a link to the original URL.\n// Understands various services (youtube.com...)\n// Input: $url = url for which the thumbnail must be found.\n//        $href = if provided, this URL will be followed instead of $url\n// Returns an associative array with thumbnail attributes (src,href,width,height,style,alt)\n// Some of them may be missing.\n// Return an empty array if no thumbnail available.\nfunction computeThumbnail($url,$href=false)\n{\n    if (!$GLOBALS['config']['ENABLE_THUMBNAILS']) return array();\n    if ($href==false) $href=$url;\n\n    // For most hosts, the URL of the thumbnail can be easily deduced from the URL of the link.\n    // (eg. http://www.youtube.com/watch?v=spVypYk4kto --->  http://img.youtube.com/vi/spVypYk4kto/default.jpg )\n    //                                     ^^^^^^^^^^^                                 ^^^^^^^^^^^\n    $domain = parse_url($url,PHP_URL_HOST);\n    if ($domain=='youtube.com' || $domain=='www.youtube.com')\n    {\n        parse_str(parse_url($url,PHP_URL_QUERY), $params); // Extract video ID and get thumbnail\n        if (!empty($params['v'])) return array('src'=>'http://img.youtube.com/vi/'.$params['v'].'/default.jpg',\n                                               'href'=>$href,'width'=>'120','height'=>'90','alt'=>'YouTube thumbnail');\n    }\n    if ($domain=='youtu.be') // Youtube short links\n    {\n        $path = parse_url($url,PHP_URL_PATH);\n        return array('src'=>'http://img.youtube.com/vi'.$path.'/default.jpg',\n                     'href'=>$href,'width'=>'120','height'=>'90','alt'=>'YouTube thumbnail');\n    }\n    if ($domain=='pix.toile-libre.org') // pix.toile-libre.org image hosting\n    {\n        parse_str(parse_url($url,PHP_URL_QUERY), $params); // Extract image filename.\n        if (!empty($params) && !empty($params['img'])) return array('src'=>'http://pix.toile-libre.org/upload/thumb/'.urlencode($params['img']),\n                                                                    'href'=>$href,'style'=>'max-width:120px; max-height:150px','alt'=>'pix.toile-libre.org thumbnail');\n    }\n\n    if ($domain=='imgur.com')\n    {\n        $path = parse_url($url,PHP_URL_PATH);\n        if (startsWith($path,'/a/')) return array(); // Thumbnails for albums are not available.\n        if (startsWith($path,'/r/')) return array('src'=>'http://i.imgur.com/'.basename($path).'s.jpg',\n                                                  'href'=>$href,'width'=>'90','height'=>'90','alt'=>'imgur.com thumbnail');\n        if (startsWith($path,'/gallery/')) return array('src'=>'http://i.imgur.com'.substr($path,8).'s.jpg',\n                                                        'href'=>$href,'width'=>'90','height'=>'90','alt'=>'imgur.com thumbnail');\n\n        if (substr_count($path,'/')==1) return array('src'=>'http://i.imgur.com/'.substr($path,1).'s.jpg',\n                                                     'href'=>$href,'width'=>'90','height'=>'90','alt'=>'imgur.com thumbnail');\n    }\n    if ($domain=='i.imgur.com')\n    {\n        $pi = pathinfo(parse_url($url,PHP_URL_PATH));\n        if (!empty($pi['filename'])) return array('src'=>'http://i.imgur.com/'.$pi['filename'].'s.jpg',\n                                                  'href'=>$href,'width'=>'90','height'=>'90','alt'=>'imgur.com thumbnail');\n    }\n    if ($domain=='dailymotion.com' || $domain=='www.dailymotion.com')\n    {\n        if (strpos($url,'dailymotion.com/video/')!==false)\n        {\n            $thumburl=str_replace('dailymotion.com/video/','dailymotion.com/thumbnail/video/',$url);\n            return array('src'=>$thumburl,\n                         'href'=>$href,'width'=>'120','style'=>'height:auto;','alt'=>'DailyMotion thumbnail');\n        }\n    }\n    if (endsWith($domain,'.imageshack.us'))\n    {\n        $ext=strtolower(pathinfo($url,PATHINFO_EXTENSION));\n        if ($ext=='jpg' || $ext=='jpeg' || $ext=='png' || $ext=='gif')\n        {\n            $thumburl = substr($url,0,strlen($url)-strlen($ext)).'th.'.$ext;\n            return array('src'=>$thumburl,\n                         'href'=>$href,'width'=>'120','style'=>'height:auto;','alt'=>'imageshack.us thumbnail');\n        }\n    }\n\n    // Some other hosts are SLOW AS HELL and usually require an extra HTTP request to get the thumbnail URL.\n    // So we deport the thumbnail generation in order not to slow down page generation\n    // (and we also cache the thumbnail)\n\n    if (!$GLOBALS['config']['ENABLE_LOCALCACHE']) return array(); // If local cache is disabled, no thumbnails for services which require the use a local cache.\n\n    if ($domain=='flickr.com' || endsWith($domain,'.flickr.com')\n        || $domain=='vimeo.com'\n        || $domain=='ted.com' || endsWith($domain,'.ted.com')\n        || $domain=='xkcd.com' || endsWith($domain,'.xkcd.com')\n    )\n    {\n        if ($domain=='vimeo.com')\n        {   // Make sure this vimeo url points to a video (/xxx... where xxx is numeric)\n            $path = parse_url($url,PHP_URL_PATH);\n            if (!preg_match('!/\\d+.+?!',$path)) return array(); // This is not a single video URL.\n        }\n        if ($domain=='xkcd.com' || endsWith($domain,'.xkcd.com'))\n        {   // Make sure this url points to a single comic (/xxx... where xxx is numeric)\n            $path = parse_url($url,PHP_URL_PATH);\n            if (!preg_match('!/\\d+.+?!',$path)) return array();\n        }\n        if ($domain=='ted.com' || endsWith($domain,'.ted.com'))\n        {   // Make sure this TED url points to a video (/talks/...)\n            $path = parse_url($url,PHP_URL_PATH);\n            if (\"/talks/\" !== substr($path,0,7)) return array(); // This is not a single video URL.\n        }\n        $sign = hash_hmac('sha256', $url, $GLOBALS['salt']); // We use the salt to sign data (it's random, secret, and specific to each installation)\n        return array('src'=>indexUrl().'?do=genthumbnail&hmac='.htmlspecialchars($sign).'&url='.urlencode($url),\n                     'href'=>$href,'width'=>'120','style'=>'height:auto;','alt'=>'thumbnail');\n    }\n\n    // For all other, we try to make a thumbnail of links ending with .jpg/jpeg/png/gif\n    // Technically speaking, we should download ALL links and check their Content-Type to see if they are images.\n    // But using the extension will do.\n    $ext=strtolower(pathinfo($url,PATHINFO_EXTENSION));\n    if ($ext=='jpg' || $ext=='jpeg' || $ext=='png' || $ext=='gif')\n    {\n        $sign = hash_hmac('sha256', $url, $GLOBALS['salt']); // We use the salt to sign data (it's random, secret, and specific to each installation)\n        return array('src'=>indexUrl().'?do=genthumbnail&hmac='.htmlspecialchars($sign).'&url='.urlencode($url),\n                     'href'=>$href,'width'=>'120','style'=>'height:auto;','alt'=>'thumbnail');\n    }\n    return array(); // No thumbnail.\n\n}\n\n\n// Returns the HTML code to display a thumbnail for a link\n// with a link to the original URL.\n// Understands various services (youtube.com...)\n// Input: $url = url for which the thumbnail must be found.\n//        $href = if provided, this URL will be followed instead of $url\n// Returns '' if no thumbnail available.\nfunction thumbnail($url,$href=false)\n{\n    $t = computeThumbnail($url,$href);\n    if (count($t)==0) return ''; // Empty array = no thumbnail for this URL.\n\n    $html='<a href=\"'.htmlspecialchars($t['href']).'\"><img src=\"'.htmlspecialchars($t['src']).'\"';\n    if (!empty($t['width']))  $html.=' width=\"'.htmlspecialchars($t['width']).'\"';\n    if (!empty($t['height'])) $html.=' height=\"'.htmlspecialchars($t['height']).'\"';\n    if (!empty($t['style']))  $html.=' style=\"'.htmlspecialchars($t['style']).'\"';\n    if (!empty($t['alt']))    $html.=' alt=\"'.htmlspecialchars($t['alt']).'\"';\n    $html.='></a>';\n    return $html;\n}\n\n\n// Returns the HTML code to display a thumbnail for a link\n// for the picture wall (using lazy image loading)\n// Understands various services (youtube.com...)\n// Input: $url = url for which the thumbnail must be found.\n//        $href = if provided, this URL will be followed instead of $url\n// Returns '' if no thumbnail available.\nfunction lazyThumbnail($url,$href=false)\n{\n    $t = computeThumbnail($url,$href);\n    if (count($t)==0) return ''; // Empty array = no thumbnail for this URL.\n\n    $html='<a href=\"'.htmlspecialchars($t['href']).'\">';\n\n    // Lazy image (only loaded by javascript when in the viewport).\n    if (!empty($GLOBALS['disablejquery'])) // (except if jQuery is disabled)\n        $html.='<img class=\"lazyimage\" src=\"'.htmlspecialchars($t['src']).'\"';\n    else\n        $html.='<img class=\"lazyimage\" src=\"#\" data-original=\"'.htmlspecialchars($t['src']).'\"';\n\n    if (!empty($t['width']))  $html.=' width=\"'.htmlspecialchars($t['width']).'\"';\n    if (!empty($t['height'])) $html.=' height=\"'.htmlspecialchars($t['height']).'\"';\n    if (!empty($t['style']))  $html.=' style=\"'.htmlspecialchars($t['style']).'\"';\n    if (!empty($t['alt']))    $html.=' alt=\"'.htmlspecialchars($t['alt']).'\"';\n    $html.='>';\n\n    // No-javascript fallback.\n    $html.='<noscript><img src=\"'.htmlspecialchars($t['src']).'\"';\n    if (!empty($t['width']))  $html.=' width=\"'.htmlspecialchars($t['width']).'\"';\n    if (!empty($t['height'])) $html.=' height=\"'.htmlspecialchars($t['height']).'\"';\n    if (!empty($t['style']))  $html.=' style=\"'.htmlspecialchars($t['style']).'\"';\n    if (!empty($t['alt']))    $html.=' alt=\"'.htmlspecialchars($t['alt']).'\"';\n    $html.='></noscript></a>';\n\n    return $html;\n}\n\n\n// -----------------------------------------------------------------------------------------------\n// Installation\n// This function should NEVER be called if the file data/config.php exists.\nfunction install()\n{\n    // On free.fr host, make sure the /sessions directory exists, otherwise login will not work.\n    if (endsWith($_SERVER['HTTP_HOST'],'.free.fr') && !is_dir($_SERVER['DOCUMENT_ROOT'].'/sessions')) mkdir($_SERVER['DOCUMENT_ROOT'].'/sessions',0705);\n\n\n    // This part makes sure sessions works correctly.\n    // (Because on some hosts, session.save_path may not be set correctly,\n    // or we may not have write access to it.)\n    if (isset($_GET['test_session']) && ( !isset($_SESSION) || !isset($_SESSION['session_tested']) || $_SESSION['session_tested']!='Working'))\n    {   // Step 2: Check if data in session is correct.\n        echo '<pre>Sessions do not seem to work correctly on your server.<br>';\n        echo 'Make sure the variable session.save_path is set correctly in your php config, and that you have write access to it.<br>';\n        echo 'It currently points to '.session_save_path().'<br><br><a href=\"?\">Click to try again.</a></pre>';\n        die;\n    }\n    if (!isset($_SESSION['session_tested']))\n    {   // Step 1 : Try to store data in session and reload page.\n        $_SESSION['session_tested'] = 'Working';  // Try to set a variable in session.\n        header('Location: '.indexUrl().'?test_session');  // Redirect to check stored data.\n    }\n    if (isset($_GET['test_session']))\n    {   // Step 3: Sessions are ok. Remove test parameter from URL.\n        header('Location: '.indexUrl());\n    }\n\n\n    if (!empty($_POST['setlogin']) && !empty($_POST['setpassword']))\n    {\n        $tz = 'UTC';\n        if (!empty($_POST['continent']) && !empty($_POST['city']))\n            if (isTZvalid($_POST['continent'],$_POST['city']))\n                $tz = $_POST['continent'].'/'.$_POST['city'];\n        $GLOBALS['timezone'] = $tz;\n        // Everything is ok, let's create config file.\n        $GLOBALS['login'] = $_POST['setlogin'];\n        $GLOBALS['salt'] = sha1(uniqid('',true).'_'.mt_rand()); // Salt renders rainbow-tables attacks useless.\n        $GLOBALS['hash'] = sha1($_POST['setpassword'].$GLOBALS['login'].$GLOBALS['salt']);\n        $GLOBALS['title'] = (empty($_POST['title']) ? 'Shared links on '.htmlspecialchars(indexUrl()) : $_POST['title'] );\n        writeConfig();\n        echo '<script language=\"JavaScript\">alert(\"Shaarli is now configured. Please enter your login/password and start shaaring your links !\");document.location=\\'?do=login\\';</script>';\n        exit;\n    }\n\n    // Display config form:\n    list($timezone_form,$timezone_js) = templateTZform();\n    $timezone_html=''; if ($timezone_form!='') $timezone_html='<tr><td valign=\"top\"><b>Timezone:</b></td><td>'.$timezone_form.'</td></tr>';\n\n    $PAGE = new pageBuilder;\n    $PAGE->assign('timezone_html',$timezone_html);\n    $PAGE->assign('timezone_js',$timezone_js);\n    $PAGE->renderPage('install');\n    exit;\n}\n\n// Generates the timezone selection form and javascript.\n// Input: (optional) current timezone (can be 'UTC/UTC'). It will be pre-selected.\n// Output: array(html,js)\n// Example: list($htmlform,$js) = templateTZform('Europe/Paris');  // Europe/Paris pre-selected.\n// Returns array('','') if server does not support timezones list. (eg. php 5.1 on free.fr)\nfunction templateTZform($ptz=false)\n{\n    if (function_exists('timezone_identifiers_list')) // because of old php version (5.1) which can be found on free.fr\n    {\n        // Try to split the provided timezone.\n        if ($ptz==false) { $l=timezone_identifiers_list(); $ptz=$l[0]; }\n        $spos=strpos($ptz,'/'); $pcontinent=substr($ptz,0,$spos); $pcity=substr($ptz,$spos+1);\n\n        // Display config form:\n        $timezone_form = '';\n        $timezone_js = '';\n        // The list is in the forme \"Europe/Paris\", \"America/Argentina/Buenos_Aires\"...\n        // We split the list in continents/cities.\n        $continents = array();\n        $cities = array();\n        foreach(timezone_identifiers_list() as $tz)\n        {\n            if ($tz=='UTC') $tz='UTC/UTC';\n            $spos = strpos($tz,'/');\n            if ($spos!==false)\n            {\n                $continent=substr($tz,0,$spos); $city=substr($tz,$spos+1);\n                $continents[$continent]=1;\n                if (!isset($cities[$continent])) $cities[$continent]='';\n                $cities[$continent].='<option value=\"'.$city.'\"'.($pcity==$city?'selected':'').'>'.$city.'</option>';\n            }\n        }\n        $continents_html = '';\n        $continents = array_keys($continents);\n        foreach($continents as $continent)\n            $continents_html.='<option  value=\"'.$continent.'\"'.($pcontinent==$continent?'selected':'').'>'.$continent.'</option>';\n        $cities_html = $cities[$pcontinent];\n        $timezone_form = \"Continent: <select name=\\\"continent\\\" id=\\\"continent\\\" onChange=\\\"onChangecontinent();\\\">${continents_html}</select>\";\n        $timezone_form .= \"&nbsp;&nbsp;&nbsp;&nbsp;City: <select name=\\\"city\\\" id=\\\"city\\\">${cities[$pcontinent]}</select><br />\";\n        $timezone_js = \"<script language=\\\"JavaScript\\\">\";\n        $timezone_js .= \"function onChangecontinent(){document.getElementById(\\\"city\\\").innerHTML = citiescontinent[document.getElementById(\\\"continent\\\").value];}\";\n        $timezone_js .= \"var citiescontinent = \".json_encode($cities).\";\" ;\n        $timezone_js .= \"</script>\" ;\n        return array($timezone_form,$timezone_js);\n    }\n    return array('','');\n}\n\n// Tells if a timezone is valid or not.\n// If not valid, returns false.\n// If system does not support timezone list, returns false.\nfunction isTZvalid($continent,$city)\n{\n    $tz = $continent.'/'.$city;\n    if (function_exists('timezone_identifiers_list')) // because of old php version (5.1) which can be found on free.fr\n    {\n        if (in_array($tz, timezone_identifiers_list())) // it's a valid timezone ?\n                    return true;\n    }\n    return false;\n}\nif (!function_exists('json_encode')) {\n    function json_encode($data) {\n        switch ($type = gettype($data)) {\n            case 'NULL':\n                return 'null';\n            case 'boolean':\n                return ($data ? 'true' : 'false');\n            case 'integer':\n            case 'double':\n            case 'float':\n                return $data;\n            case 'string':\n                return '\"' . addslashes($data) . '\"';\n            case 'object':\n                $data = get_object_vars($data);\n            case 'array':\n                $output_index_count = 0;\n                $output_indexed = array();\n                $output_associative = array();\n                foreach ($data as $key => $value) {\n                    $output_indexed[] = json_encode($value);\n                    $output_associative[] = json_encode($key) . ':' . json_encode($value);\n                    if ($output_index_count !== NULL && $output_index_count++ !== $key) {\n                        $output_index_count = NULL;\n                    }\n                }\n                if ($output_index_count !== NULL) {\n                    return '[' . implode(',', $output_indexed) . ']';\n                } else {\n                    return '{' . implode(',', $output_associative) . '}';\n                }\n            default:\n                return ''; // Not supported\n        }\n    }\n}\n\n// Webservices (for use with jQuery/jQueryUI)\n// eg.  index.php?ws=tags&term=minecr\nfunction processWS()\n{\n    if (empty($_GET['ws']) || empty($_GET['term'])) return;\n    $term = $_GET['term'];\n    $LINKSDB=new linkdb(isLoggedIn() || $GLOBALS['config']['OPEN_SHAARLI']);  // Read links from database (and filter private links if used it not logged in).\n    header('Content-Type: application/json; charset=utf-8');\n\n    // Search in tags (case insentitive, cumulative search)\n    if ($_GET['ws']=='tags')\n    {\n        $tags=explode(' ',str_replace(',',' ',$term)); $last = array_pop($tags); // Get the last term (\"a b c d\" ==> \"a b c\", \"d\")\n        $addtags=''; if ($tags) $addtags=implode(' ',$tags).' '; // We will pre-pend previous tags\n        $suggested=array();\n        /* To speed up things, we store list of tags in session */\n        if (empty($_SESSION['tags'])) $_SESSION['tags'] = $LINKSDB->allTags();\n        foreach($_SESSION['tags'] as $key=>$value)\n        {\n            if (startsWith($key,$last,$case=false) && !in_array($key,$tags)) $suggested[$addtags.$key.' ']=0;\n        }\n        echo json_encode(array_keys($suggested));\n        exit;\n    }\n\n    // Search a single tag (case sentitive, single tag search)\n    if ($_GET['ws']=='singletag')\n    {\n        /* To speed up things, we store list of tags in session */\n        if (empty($_SESSION['tags'])) $_SESSION['tags'] = $LINKSDB->allTags();\n        foreach($_SESSION['tags'] as $key=>$value)\n        {\n            if (startsWith($key,$term,$case=true)) $suggested[$key]=0;\n        }\n        echo json_encode(array_keys($suggested));\n        exit;\n    }\n}\n\n// Re-write configuration file according to globals.\n// Requires some $GLOBALS to be set (login,hash,salt,title).\n// If the config file cannot be saved, an error message is dislayed and the user is redirected to \"Tools\" menu.\n// (otherwise, the function simply returns.)\nfunction writeConfig()\n{\n    if (is_file($GLOBALS['config']['CONFIG_FILE']) && !isLoggedIn()) die('You are not authorized to alter config.'); // Only logged in user can alter config.\n    $config='<?php $GLOBALS[\\'login\\']='.var_export($GLOBALS['login'],true).'; $GLOBALS[\\'hash\\']='.var_export($GLOBALS['hash'],true).'; $GLOBALS[\\'salt\\']='.var_export($GLOBALS['salt'],true).'; ';\n    $config .='$GLOBALS[\\'timezone\\']='.var_export($GLOBALS['timezone'],true).'; date_default_timezone_set('.var_export($GLOBALS['timezone'],true).'); $GLOBALS[\\'title\\']='.var_export($GLOBALS['title'],true).';';\n    $config .= '$GLOBALS[\\'redirector\\']='.var_export($GLOBALS['redirector'],true).'; ';\n    $config .= '$GLOBALS[\\'disablesessionprotection\\']='.var_export($GLOBALS['disablesessionprotection'],true).'; ';\n    $config .= '$GLOBALS[\\'disablejquery\\']='.var_export($GLOBALS['disablejquery'],true).'; ';\n    $config .= '$GLOBALS[\\'privateLinkByDefault\\']='.var_export($GLOBALS['privateLinkByDefault'],true).'; ';\n    $config .= ' ?>';\n    if (!file_put_contents($GLOBALS['config']['CONFIG_FILE'],$config) || strcmp(file_get_contents($GLOBALS['config']['CONFIG_FILE']),$config)!=0)\n    {\n        echo '<script language=\"JavaScript\">alert(\"Shaarli could not create the config file. Please make sure Shaarli has the right to write in the folder is it installed in.\");document.location=\\'?\\';</script>';\n        exit;\n    }\n}\n\n/* Because some f*cking services like Flickr require an extra HTTP request to get the thumbnail URL,\n   I have deported the thumbnail URL code generation here, otherwise this would slow down page generation.\n   The following function takes the URL a link (eg. a flickr page) and return the proper thumbnail.\n   This function is called by passing the url:\n   http://mywebsite.com/shaarli/?do=genthumbnail&hmac=[HMAC]&url=[URL]\n   [URL] is the URL of the link (eg. a flickr page)\n   [HMAC] is the signature for the [URL] (so that these URL cannot be forged).\n   The function below will fetch the image from the webservice and store it in the cache.\n*/\nfunction genThumbnail()\n{\n    // Make sure the parameters in the URL were generated by us.\n    $sign = hash_hmac('sha256', $_GET['url'], $GLOBALS['salt']);\n    if ($sign!=$_GET['hmac']) die('Naughty boy !');\n\n    // Let's see if we don't already have the image for this URL in the cache.\n    $thumbname=hash('sha1',$_GET['url']).'.jpg';\n    if (is_file($GLOBALS['config']['CACHEDIR'].'/'.$thumbname))\n    {   // We have the thumbnail, just serve it:\n        header('Content-Type: image/jpeg');\n        echo file_get_contents($GLOBALS['config']['CACHEDIR'].'/'.$thumbname);\n        return;\n    }\n    // We may also serve a blank image (if service did not respond)\n    $blankname=hash('sha1',$_GET['url']).'.gif';\n    if (is_file($GLOBALS['config']['CACHEDIR'].'/'.$blankname))\n    {\n        header('Content-Type: image/gif');\n        echo file_get_contents($GLOBALS['config']['CACHEDIR'].'/'.$blankname);\n        return;\n    }\n\n    // Otherwise, generate the thumbnail.\n    $url = $_GET['url'];\n    $domain = parse_url($url,PHP_URL_HOST);\n\n    if ($domain=='flickr.com' || endsWith($domain,'.flickr.com'))\n    {\n        // Crude replacement to handle new Flickr domain policy (They prefer www. now)\n        $url = str_replace('http://flickr.com/','http://www.flickr.com/',$url);\n\n        // Is this a link to an image, or to a flickr page ?\n        $imageurl='';\n        if (endswith(parse_url($url,PHP_URL_PATH),'.jpg'))\n        {  // This is a direct link to an image. eg. http://farm1.staticflickr.com/5/5921913_ac83ed27bd_o.jpg\n            preg_match('!(http://farm\\d+\\.staticflickr\\.com/\\d+/\\d+_\\w+_)\\w.jpg!',$url,$matches);\n            if (!empty($matches[1])) $imageurl=$matches[1].'m.jpg';\n        }\n        else // this is a flickr page (html)\n        {\n            list($httpstatus,$headers,$data) = getHTTP($url,20); // Get the flickr html page.\n            if (strpos($httpstatus,'200 OK')!==false)\n            {\n                // Flickr now nicely provides the URL of the thumbnail in each flickr page.\n                preg_match('!<link rel=\\\"image_src\\\" href=\\\"(.+?)\\\"!',$data,$matches);\n                if (!empty($matches[1])) $imageurl=$matches[1];\n\n                // In albums (and some other pages), the link rel=\"image_src\" is not provided,\n                // but flickr provides:\n                // <meta property=\"og:image\" content=\"http://farm4.staticflickr.com/3398/3239339068_25d13535ff_z.jpg\" />\n                if ($imageurl=='')\n                {\n                    preg_match('!<meta property=\\\"og:image\\\" content=\\\"(.+?)\\\"!',$data,$matches);\n                    if (!empty($matches[1])) $imageurl=$matches[1];\n                }\n            }\n        }\n\n        if ($imageurl!='')\n        {   // Let's download the image.\n            list($httpstatus,$headers,$data) = getHTTP($imageurl,10); // Image is 240x120, so 10 seconds to download should be enough.\n            if (strpos($httpstatus,'200 OK')!==false)\n            {\n                file_put_contents($GLOBALS['config']['CACHEDIR'].'/'.$thumbname,$data); // Save image to cache.\n                header('Content-Type: image/jpeg');\n                echo $data;\n                return;\n            }\n        }\n    }\n\n    elseif ($domain=='vimeo.com' )\n    {\n        // This is more complex: we have to perform a HTTP request, then parse the result.\n        // Maybe we should deport this to javascript ? Example: http://stackoverflow.com/questions/1361149/get-img-thumbnails-from-vimeo/4285098#4285098\n        $vid = substr(parse_url($url,PHP_URL_PATH),1);\n        list($httpstatus,$headers,$data) = getHTTP('http://vimeo.com/api/v2/video/'.htmlspecialchars($vid).'.php',5);\n        if (strpos($httpstatus,'200 OK')!==false)\n        {\n            $t = unserialize($data);\n            $imageurl = $t[0]['thumbnail_medium'];\n            // Then we download the image and serve it to our client.\n            list($httpstatus,$headers,$data) = getHTTP($imageurl,10);\n            if (strpos($httpstatus,'200 OK')!==false)\n            {\n                file_put_contents($GLOBALS['config']['CACHEDIR'].'/'.$thumbname,$data); // Save image to cache.\n                header('Content-Type: image/jpeg');\n                echo $data;\n                return;\n            }\n        }\n    }\n\n    elseif ($domain=='ted.com' || endsWith($domain,'.ted.com'))\n    {\n        // The thumbnail for TED talks is located in the <link rel=\"image_src\" [...]> tag on that page\n        // http://www.ted.com/talks/mikko_hypponen_fighting_viruses_defending_the_net.html\n        // <link rel=\"image_src\" href=\"http://images.ted.com/images/ted/28bced335898ba54d4441809c5b1112ffaf36781_389x292.jpg\" />\n        list($httpstatus,$headers,$data) = getHTTP($url,5);\n        if (strpos($httpstatus,'200 OK')!==false)\n        {\n            // Extract the link to the thumbnail\n            preg_match('!link rel=\"image_src\" href=\"(http://images.ted.com/images/ted/.+_\\d+x\\d+\\.jpg)\"!',$data,$matches);\n            if (!empty($matches[1]))\n            {   // Let's download the image.\n                $imageurl=$matches[1];\n                list($httpstatus,$headers,$data) = getHTTP($imageurl,20); // No control on image size, so wait long enough.\n                if (strpos($httpstatus,'200 OK')!==false)\n                {\n                    $filepath=$GLOBALS['config']['CACHEDIR'].'/'.$thumbname;\n                    file_put_contents($filepath,$data); // Save image to cache.\n                    if (resizeImage($filepath))\n                    {\n                        header('Content-Type: image/jpeg');\n                        echo file_get_contents($filepath);\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    elseif ($domain=='xkcd.com' || endsWith($domain,'.xkcd.com'))\n    {\n        // There is no thumbnail available for xkcd comics, so download the whole image and resize it.\n        // http://xkcd.com/327/\n        // <img src=\"http://imgs.xkcd.com/comics/exploits_of_a_mom.png\" title=\"<BLABLA>\" alt=\"<BLABLA>\" />\n        list($httpstatus,$headers,$data) = getHTTP($url,5);\n        if (strpos($httpstatus,'200 OK')!==false)\n        {\n            // Extract the link to the thumbnail\n            preg_match('!<img src=\"(http://imgs.xkcd.com/comics/.*)\" title=\"[^s]!',$data,$matches);\n            if (!empty($matches[1]))\n            {   // Let's download the image.\n                $imageurl=$matches[1];\n                list($httpstatus,$headers,$data) = getHTTP($imageurl,20); // No control on image size, so wait long enough.\n                if (strpos($httpstatus,'200 OK')!==false)\n                {\n                    $filepath=$GLOBALS['config']['CACHEDIR'].'/'.$thumbname;\n                    file_put_contents($filepath,$data); // Save image to cache.\n                    if (resizeImage($filepath))\n                    {\n                        header('Content-Type: image/jpeg');\n                        echo file_get_contents($filepath);\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    else\n    {\n        // For all other domains, we try to download the image and make a thumbnail.\n        list($httpstatus,$headers,$data) = getHTTP($url,30);  // We allow 30 seconds max to download (and downloads are limited to 4 Mb)\n        if (strpos($httpstatus,'200 OK')!==false)\n        {\n            $filepath=$GLOBALS['config']['CACHEDIR'].'/'.$thumbname;\n            file_put_contents($filepath,$data); // Save image to cache.\n            if (resizeImage($filepath))\n            {\n                header('Content-Type: image/jpeg');\n                echo file_get_contents($filepath);\n                return;\n            }\n        }\n    }\n\n\n    // Otherwise, return an empty image (8x8 transparent gif)\n    $blankgif = base64_decode('R0lGODlhCAAIAIAAAP///////yH5BAEKAAEALAAAAAAIAAgAAAIHjI+py+1dAAA7');\n    file_put_contents($GLOBALS['config']['CACHEDIR'].'/'.$blankname,$blankgif); // Also put something in cache so that this URL is not requested twice.\n    header('Content-Type: image/gif');\n    echo $blankgif;\n}\n\n// Make a thumbnail of the image (to width: 120 pixels)\n// Returns true if success, false otherwise.\nfunction resizeImage($filepath)\n{\n    if (!function_exists('imagecreatefromjpeg')) return false; // GD not present: no thumbnail possible.\n\n    // Trick: some stupid people rename GIF as JPEG... or else.\n    // So we really try to open each image type whatever the extension is.\n    $header=file_get_contents($filepath,false,NULL,0,256); // Read first 256 bytes and try to sniff file type.\n    $im=false;\n    $i=strpos($header,'GIF8'); if (($i!==false) && ($i==0)) $im = imagecreatefromgif($filepath); // Well this is crude, but it should be enough.\n    $i=strpos($header,'PNG'); if (($i!==false) && ($i==1)) $im = imagecreatefrompng($filepath);\n    $i=strpos($header,'JFIF'); if ($i!==false) $im = imagecreatefromjpeg($filepath);\n    if (!$im) return false;  // Unable to open image (corrupted or not an image)\n    $w = imagesx($im);\n    $h = imagesy($im);\n    $ystart = 0; $yheight=$h;\n    if ($h>$w) { $ystart= ($h/2)-($w/2); $yheight=$w/2; }\n    $nw = 120;   // Desired width\n    $nh = min(floor(($h*$nw)/$w),120); // Compute new width/height, but maximum 120 pixels height.\n    // Resize image:\n    $im2 = imagecreatetruecolor($nw,$nh);\n    imagecopyresampled($im2, $im, 0, 0, 0, $ystart, $nw, $nh, $w, $yheight);\n    imageinterlace($im2,true); // For progressive JPEG.\n    $tempname=$filepath.'_TEMP.jpg';\n    imagejpeg($im2, $tempname, 90);\n    imagedestroy($im);\n    imagedestroy($im2);\n    unlink($filepath);\n    rename($tempname,$filepath);  // Overwrite original picture with thumbnail.\n    return true;\n}\n\n// Invalidate caches when the database is changed or the user logs out.\n// (eg. tags cache).\nfunction invalidateCaches()\n{\n    unset($_SESSION['tags']);  // Purge cache attached to session.\n    pageCache::purgeCache();   // Purge page cache shared by sessions.\n}\n\nif (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=genthumbnail')) { genThumbnail(); exit; }  // Thumbnail generation/cache does not need the link database.\nif (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=rss')) { showRSS(); exit; }\nif (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=atom')) { showATOM(); exit; }\nif (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=dailyrss')) { showDailyRSS(); exit; }\nif (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'do=daily')) { showDaily(); exit; }\nif (isset($_SERVER[\"QUERY_STRING\"]) && startswith($_SERVER[\"QUERY_STRING\"],'ws=')) { processWS(); exit; } // Webservices (for jQuery/jQueryUI)\nif (!isset($_SESSION['LINKS_PER_PAGE'])) $_SESSION['LINKS_PER_PAGE']=$GLOBALS['config']['LINKS_PER_PAGE'];\nrenderPage();\n?>\n"], "filenames": ["index.php"], "buggy_code_start_loc": [945], "buggy_code_end_loc": [1755], "fixing_code_start_loc": [945], "fixing_code_end_loc": [1755], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in index.php in Shaarli allow remote attackers to inject arbitrary web script or HTML via the URL to the (1) showRSS, (2) showATOM, or (3) showDailyRSS function; a (4) file name to the importFile function; or (5) vectors related to bookmarks.", "other": {"cve": {"id": "CVE-2013-7351", "sourceIdentifier": "security@debian.org", "published": "2020-01-02T20:15:15.130", "lastModified": "2020-01-09T20:15:29.867", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in index.php in Shaarli allow remote attackers to inject arbitrary web script or HTML via the URL to the (1) showRSS, (2) showATOM, or (3) showDailyRSS function; a (4) file name to the importFile function; or (5) vectors related to bookmarks."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de tipo cross-site scripting (XSS) en el archivo index.php en Shaarli permiten a atacantes remotos inyectar script web o HTML arbitrario por medio de la URL en la funci\u00f3n (1) showRSS, (2) showATOM o (3) showDailyRSS; un (4) nombre de archivo en la funci\u00f3n importFile; o (5) vectores relacionados con marcadores."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shaarli_project:shaarli:-:*:*:*:*:*:*:*", "matchCriteriaId": "9D0345D4-5FA4-40FD-B35E-226B4EA356AE"}]}]}], "references": [{"url": "http://seclists.org/oss-sec/2014/q2/1", "source": "security@debian.org", "tags": ["Exploit", "Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://seclists.org/oss-sec/2014/q2/4", "source": "security@debian.org", "tags": ["Exploit", "Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/92215", "source": "security@debian.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/sebsauvage/Shaarli/commit/53da201749f8f362323ef278bf338f1d9f7a925a", "source": "security@debian.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/sebsauvage/Shaarli/issues/134", "source": "security@debian.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sebsauvage/Shaarli/commit/53da201749f8f362323ef278bf338f1d9f7a925a"}}