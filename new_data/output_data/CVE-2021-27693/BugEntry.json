{"buggy_code": ["package com.publiccms.controller.admin.sys;\r\n\r\nimport java.io.BufferedInputStream;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\n\r\nimport org.apache.commons.lang3.ArrayUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.http.HttpEntity;\r\nimport org.apache.http.client.methods.CloseableHttpResponse;\r\nimport org.apache.http.client.methods.HttpGet;\r\nimport org.apache.http.impl.client.CloseableHttpClient;\r\nimport org.apache.http.impl.client.HttpClients;\r\nimport org.apache.http.util.EntityUtils;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.ModelMap;\r\nimport org.springframework.web.bind.annotation.RequestAttribute;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\nimport org.springframework.web.bind.annotation.SessionAttribute;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport com.drew.imaging.FileType;\r\nimport com.drew.imaging.FileTypeDetector;\r\nimport com.publiccms.common.constants.CommonConstants;\r\nimport com.publiccms.common.handler.PageHandler;\r\nimport com.publiccms.common.tools.CmsFileUtils;\r\nimport com.publiccms.common.tools.CommonUtils;\r\nimport com.publiccms.common.tools.RequestUtils;\r\nimport com.publiccms.common.tools.VerificationUtils;\r\nimport com.publiccms.entities.log.LogUpload;\r\nimport com.publiccms.entities.sys.SysSite;\r\nimport com.publiccms.entities.sys.SysUser;\r\nimport com.publiccms.logic.component.site.SiteComponent;\r\nimport com.publiccms.logic.service.log.LogLoginService;\r\nimport com.publiccms.logic.service.log.LogUploadService;\r\nimport com.publiccms.views.pojo.entities.FileSize;\r\nimport com.publiccms.views.pojo.entities.UeditorConfig;\r\n\r\n/**\r\n *\r\n * UeditorAdminController\r\n * \r\n */\r\n@Controller\r\n@RequestMapping(\"ueditor\")\r\npublic class UeditorAdminController {\r\n    protected final Log log = LogFactory.getLog(getClass());\r\n    @Autowired\r\n    protected LogUploadService logUploadService;\r\n    @Autowired\r\n    protected SiteComponent siteComponent;\r\n\r\n    protected static final String ACTION_CONFIG = \"config\";\r\n    protected static final String ACTION_UPLOAD = \"upload\";\r\n    protected static final String ACTION_UPLOAD_SCRAW = \"uploadScraw\";\r\n    protected static final String ACTION_CATCHIMAGE = \"catchimage\";\r\n    protected static final String ACTION_LISTFILE = \"listfile\";\r\n\r\n    protected static final String FIELD_NAME = \"file\";\r\n    protected static final String SCRAW_TYPE = \".jpg\";\r\n\r\n    protected static final String[] IMAGE_ALLOW_FILES = new String[] { \".png\", \".jpg\", \".jpeg\", \".gif\", \".bmp\", \".svg\" };\r\n\r\n    protected static final String[] VIDEO_ALLOW_FILES = new String[] { \".flv\", \".swf\", \".mkv\", \".avi\", \".rm\", \".rmvb\", \".mpeg\",\r\n            \".mpg\", \".ogg\", \".ogv\", \".mov\", \".wmv\", \".mp4\", \".webm\", \".mp3\", \".wav\", \".mid\" };\r\n    public static final String[] ALLOW_FILES = ArrayUtils.addAll(ArrayUtils.addAll(VIDEO_ALLOW_FILES, IMAGE_ALLOW_FILES),\r\n            new String[] { \".rar\", \".zip\", \".tar\", \".gz\", \".7z\", \".bz2\", \".cab\", \".iso\", \".doc\", \".docx\", \".xls\", \".xlsx\", \".ppt\",\r\n                    \".pptx\", \".pdf\", \".txt\", \".md\", \".xml\" });\r\n\r\n    /**\r\n     * @param request\r\n     * @return view name\r\n     */\r\n    @RequestMapping(params = \"action=\" + ACTION_CONFIG)\r\n    @ResponseBody\r\n    public UeditorConfig config(HttpServletRequest request) {\r\n        String urlPrefix = siteComponent.getSite(request.getServerName()).getSitePath();\r\n        UeditorConfig config = new UeditorConfig();\r\n        config.setImageActionName(ACTION_UPLOAD);\r\n        config.setSnapscreenActionName(ACTION_UPLOAD);\r\n        config.setScrawlActionName(ACTION_UPLOAD_SCRAW);\r\n        config.setVideoActionName(ACTION_UPLOAD);\r\n        config.setFileActionName(ACTION_UPLOAD);\r\n        config.setCatcherActionName(ACTION_CATCHIMAGE);\r\n        config.setImageManagerActionName(ACTION_LISTFILE);\r\n        config.setFileManagerActionName(ACTION_LISTFILE);\r\n        config.setImageFieldName(FIELD_NAME);\r\n        config.setScrawlFieldName(FIELD_NAME);\r\n        config.setCatcherFieldName(FIELD_NAME);\r\n        config.setVideoFieldName(FIELD_NAME);\r\n        config.setFileFieldName(FIELD_NAME);\r\n        config.setImageUrlPrefix(urlPrefix);\r\n        config.setScrawlUrlPrefix(urlPrefix);\r\n        config.setSnapscreenUrlPrefix(urlPrefix);\r\n        config.setCatcherUrlPrefix(urlPrefix);\r\n        config.setVideoUrlPrefix(urlPrefix);\r\n        config.setFileUrlPrefix(urlPrefix);\r\n        config.setImageManagerUrlPrefix(urlPrefix);\r\n        config.setFileManagerUrlPrefix(urlPrefix);\r\n        config.setImageAllowFiles(IMAGE_ALLOW_FILES);\r\n        config.setCatcherAllowFiles(IMAGE_ALLOW_FILES);\r\n        config.setVideoAllowFiles(VIDEO_ALLOW_FILES);\r\n        config.setFileAllowFiles(ALLOW_FILES);\r\n        config.setImageManagerAllowFiles(IMAGE_ALLOW_FILES);\r\n        config.setFileManagerAllowFiles(ALLOW_FILES);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @param site\r\n     * @param admin\r\n     * @param file\r\n     * @param request\r\n     * @param model\r\n     * @return view name\r\n     */\r\n    @RequestMapping(params = \"action=\" + ACTION_UPLOAD)\r\n    public String upload(@RequestAttribute SysSite site, @SessionAttribute SysUser admin, MultipartFile file,\r\n            HttpServletRequest request, ModelMap model) {\r\n        if (null != file && !file.isEmpty()) {\r\n            String originalName = file.getOriginalFilename();\r\n            String suffix = CmsFileUtils.getSuffix(originalName);\r\n            if (ArrayUtils.contains(ALLOW_FILES, suffix)) {\r\n                String fileName = CmsFileUtils.getUploadFileName(suffix);\r\n                String filePath = siteComponent.getWebFilePath(site, fileName);\r\n                try {\r\n                    CmsFileUtils.upload(file, filePath);\r\n                    FileSize fileSize = CmsFileUtils.getFileSize(filePath, suffix);\r\n                    logUploadService.save(new LogUpload(site.getId(), admin.getId(), LogLoginService.CHANNEL_WEB_MANAGER,\r\n                            originalName, CmsFileUtils.getFileType(suffix), file.getSize(), fileSize.getWidth(),\r\n                            fileSize.getHeight(), RequestUtils.getIpAddress(request), CommonUtils.getDate(), fileName));\r\n                    Map<String, Object> map = getResultMap(true);\r\n                    map.put(\"size\", file.getSize());\r\n                    map.put(\"title\", originalName);\r\n                    map.put(\"url\", fileName);\r\n                    map.put(\"type\", suffix);\r\n                    map.put(\"original\", originalName);\r\n                    model.addAttribute(\"result\", map);\r\n                } catch (IllegalStateException | IOException e) {\r\n                    model.addAttribute(\"result\", getResultMap(false));\r\n                }\r\n            } else {\r\n                model.addAttribute(\"result\", getResultMap(false));\r\n            }\r\n        } else {\r\n            model.addAttribute(\"result\", getResultMap(false));\r\n        }\r\n        return \"common/mapResult\";\r\n    }\r\n\r\n    /**\r\n     * @param site\r\n     * @param admin\r\n     * @param file\r\n     * @param request\r\n     * @param session\r\n     * @return view name\r\n     */\r\n    @RequestMapping(params = \"action=\" + ACTION_UPLOAD_SCRAW)\r\n    @ResponseBody\r\n    public Map<String, Object> uploadScraw(@RequestAttribute SysSite site, @SessionAttribute SysUser admin, String file,\r\n            HttpServletRequest request, HttpSession session) {\r\n        if (CommonUtils.notEmpty(file)) {\r\n            byte[] data = VerificationUtils.base64Decode(file);\r\n            String fileName = CmsFileUtils.getUploadFileName(SCRAW_TYPE);\r\n            String filePath = siteComponent.getWebFilePath(site, fileName);\r\n            try {\r\n                CmsFileUtils.writeByteArrayToFile(filePath, data);\r\n                FileSize fileSize = CmsFileUtils.getFileSize(filePath, SCRAW_TYPE);\r\n                logUploadService.save(new LogUpload(site.getId(), admin.getId(), LogLoginService.CHANNEL_WEB_MANAGER,\r\n                        CommonConstants.BLANK, CmsFileUtils.FILE_TYPE_IMAGE, data.length, fileSize.getWidth(),\r\n                        fileSize.getHeight(), RequestUtils.getIpAddress(request), CommonUtils.getDate(), fileName));\r\n                Map<String, Object> map = getResultMap(true);\r\n                map.put(\"size\", data.length);\r\n                map.put(\"title\", fileName);\r\n                map.put(\"url\", fileName);\r\n                map.put(\"type\", SCRAW_TYPE);\r\n                map.put(\"original\", \"scraw\" + SCRAW_TYPE);\r\n                return map;\r\n            } catch (IllegalStateException | IOException e) {\r\n                log.error(e.getMessage(), e);\r\n                return getResultMap(false);\r\n            }\r\n        }\r\n        return getResultMap(false);\r\n    }\r\n\r\n    /**\r\n     * @param site\r\n     * @param admin\r\n     * @param request\r\n     * @param session\r\n     * @return view name\r\n     */\r\n    @RequestMapping(params = \"action=\" + ACTION_CATCHIMAGE)\r\n    @ResponseBody\r\n    public Map<String, Object> catchimage(@RequestAttribute SysSite site, @SessionAttribute SysUser admin,\r\n            HttpServletRequest request, HttpSession session) {\r\n        try (CloseableHttpClient httpclient = HttpClients.custom().setDefaultRequestConfig(CommonConstants.defaultRequestConfig)\r\n                .build();) {\r\n            String[] files = request.getParameterValues(FIELD_NAME + \"[]\");\r\n            if (CommonUtils.notEmpty(files)) {\r\n                List<Map<String, Object>> list = new ArrayList<>();\r\n                for (String image : files) {\r\n                    HttpGet httpget = new HttpGet(image);\r\n                    CloseableHttpResponse response = httpclient.execute(httpget);\r\n                    HttpEntity entity = response.getEntity();\r\n                    if (null != entity) {\r\n                        BufferedInputStream inputStream = new BufferedInputStream(entity.getContent());\r\n                        FileType fileType = FileTypeDetector.detectFileType(inputStream);\r\n                        String suffix = fileType.getCommonExtension();\r\n                        if (CommonUtils.notEmpty(suffix)) {\r\n                            String fileName = CmsFileUtils.getUploadFileName(suffix);\r\n                            String filePath = siteComponent.getWebFilePath(site, fileName);\r\n                            CmsFileUtils.copyInputStreamToFile(inputStream, filePath);\r\n                            FileSize fileSize = CmsFileUtils.getFileSize(filePath, suffix);\r\n                            logUploadService.save(new LogUpload(site.getId(), admin.getId(), LogLoginService.CHANNEL_WEB_MANAGER,\r\n                                    CommonConstants.BLANK, CmsFileUtils.getFileType(suffix), entity.getContentLength(),\r\n                                    fileSize.getWidth(), fileSize.getHeight(), RequestUtils.getIpAddress(request),\r\n                                    CommonUtils.getDate(), fileName));\r\n                            Map<String, Object> map = getResultMap(true);\r\n                            map.put(\"size\", entity.getContentLength());\r\n                            map.put(\"title\", fileName);\r\n                            map.put(\"url\", fileName);\r\n                            map.put(\"source\", image);\r\n                            list.add(map);\r\n                        }\r\n\r\n                    }\r\n                    EntityUtils.consume(entity);\r\n                }\r\n                Map<String, Object> map = getResultMap(true);\r\n                map.put(\"list\", list);\r\n                return map;\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(e.getMessage(), e);\r\n            return getResultMap(false);\r\n        }\r\n        return getResultMap(false);\r\n    }\r\n\r\n    /**\r\n     * @param admin\r\n     * @param start\r\n     * @param request\r\n     * @param session\r\n     * @return view name\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    @RequestMapping(params = \"action=\" + ACTION_LISTFILE)\r\n    @ResponseBody\r\n    public Map<String, Object> listfile(@SessionAttribute SysUser admin, Integer start, HttpServletRequest request,\r\n            HttpSession session) {\r\n        if (CommonUtils.empty(start)) {\r\n            start = 0;\r\n        }\r\n        PageHandler page = logUploadService.getPage(siteComponent.getSite(request.getServerName()).getId(), admin.getId(), null,\r\n                null, null, null, null, null, start / 20 + 1, 20);\r\n\r\n        Map<String, Object> map = getResultMap(true);\r\n        List<Map<String, Object>> list = new ArrayList<>();\r\n        for (LogUpload logUpload : ((List<LogUpload>) page.getList())) {\r\n            Map<String, Object> tempMap = getResultMap(true);\r\n            tempMap.put(\"url\", logUpload.getFilePath());\r\n            list.add(tempMap);\r\n        }\r\n        map.put(\"list\", list);\r\n        map.put(\"start\", start);\r\n        map.put(\"total\", page.getTotalCount());\r\n        return map;\r\n    }\r\n\r\n    protected static Map<String, Object> getResultMap(boolean success) {\r\n        Map<String, Object> map = new HashMap<>();\r\n        if (success) {\r\n            map.put(\"state\", \"SUCCESS\");\r\n        } else {\r\n            map.put(\"state\", \"error\");\r\n        }\r\n        return map;\r\n    }\r\n}"], "fixing_code": ["package com.publiccms.controller.admin.sys;\r\n\r\nimport java.io.BufferedInputStream;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpSession;\r\n\r\nimport org.apache.commons.lang3.ArrayUtils;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport org.apache.http.HttpEntity;\r\nimport org.apache.http.client.methods.CloseableHttpResponse;\r\nimport org.apache.http.client.methods.HttpGet;\r\nimport org.apache.http.impl.client.CloseableHttpClient;\r\nimport org.apache.http.impl.client.HttpClients;\r\nimport org.apache.http.util.EntityUtils;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.ModelMap;\r\nimport org.springframework.web.bind.annotation.RequestAttribute;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\nimport org.springframework.web.bind.annotation.SessionAttribute;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport com.drew.imaging.FileType;\r\nimport com.drew.imaging.FileTypeDetector;\r\nimport com.publiccms.common.constants.CommonConstants;\r\nimport com.publiccms.common.handler.PageHandler;\r\nimport com.publiccms.common.tools.CmsFileUtils;\r\nimport com.publiccms.common.tools.CommonUtils;\r\nimport com.publiccms.common.tools.RequestUtils;\r\nimport com.publiccms.common.tools.VerificationUtils;\r\nimport com.publiccms.entities.log.LogUpload;\r\nimport com.publiccms.entities.sys.SysSite;\r\nimport com.publiccms.entities.sys.SysUser;\r\nimport com.publiccms.logic.component.site.SiteComponent;\r\nimport com.publiccms.logic.service.log.LogLoginService;\r\nimport com.publiccms.logic.service.log.LogUploadService;\r\nimport com.publiccms.views.pojo.entities.FileSize;\r\nimport com.publiccms.views.pojo.entities.UeditorConfig;\r\n\r\n/**\r\n *\r\n * UeditorAdminController\r\n * \r\n */\r\n@Controller\r\n@RequestMapping(\"ueditor\")\r\npublic class UeditorAdminController {\r\n    protected final Log log = LogFactory.getLog(getClass());\r\n    @Autowired\r\n    protected LogUploadService logUploadService;\r\n    @Autowired\r\n    protected SiteComponent siteComponent;\r\n\r\n    protected static final String ACTION_CONFIG = \"config\";\r\n    protected static final String ACTION_UPLOAD = \"upload\";\r\n    protected static final String ACTION_UPLOAD_SCRAW = \"uploadScraw\";\r\n    protected static final String ACTION_CATCHIMAGE = \"catchimage\";\r\n    protected static final String ACTION_LISTFILE = \"listfile\";\r\n\r\n    protected static final String FIELD_NAME = \"file\";\r\n    protected static final String SCRAW_TYPE = \".jpg\";\r\n\r\n    protected static final String[] IMAGE_ALLOW_FILES = new String[] { \".png\", \".jpg\", \".jpeg\", \".gif\", \".bmp\", \".svg\" };\r\n\r\n    protected static final String[] VIDEO_ALLOW_FILES = new String[] { \".flv\", \".swf\", \".mkv\", \".avi\", \".rm\", \".rmvb\", \".mpeg\",\r\n            \".mpg\", \".ogg\", \".ogv\", \".mov\", \".wmv\", \".mp4\", \".webm\", \".mp3\", \".wav\", \".mid\" };\r\n    public static final String[] ALLOW_FILES = ArrayUtils.addAll(ArrayUtils.addAll(VIDEO_ALLOW_FILES, IMAGE_ALLOW_FILES),\r\n            new String[] { \".rar\", \".zip\", \".tar\", \".gz\", \".7z\", \".bz2\", \".cab\", \".iso\", \".doc\", \".docx\", \".xls\", \".xlsx\", \".ppt\",\r\n                    \".pptx\", \".pdf\", \".txt\", \".md\", \".xml\" });\r\n\r\n    /**\r\n     * @param request\r\n     * @return view name\r\n     */\r\n    @RequestMapping(params = \"action=\" + ACTION_CONFIG)\r\n    @ResponseBody\r\n    public UeditorConfig config(HttpServletRequest request) {\r\n        String urlPrefix = siteComponent.getSite(request.getServerName()).getSitePath();\r\n        UeditorConfig config = new UeditorConfig();\r\n        config.setImageActionName(ACTION_UPLOAD);\r\n        config.setSnapscreenActionName(ACTION_UPLOAD);\r\n        config.setScrawlActionName(ACTION_UPLOAD_SCRAW);\r\n        config.setVideoActionName(ACTION_UPLOAD);\r\n        config.setFileActionName(ACTION_UPLOAD);\r\n        config.setCatcherActionName(ACTION_CATCHIMAGE);\r\n        config.setImageManagerActionName(ACTION_LISTFILE);\r\n        config.setFileManagerActionName(ACTION_LISTFILE);\r\n        config.setImageFieldName(FIELD_NAME);\r\n        config.setScrawlFieldName(FIELD_NAME);\r\n        config.setCatcherFieldName(FIELD_NAME);\r\n        config.setVideoFieldName(FIELD_NAME);\r\n        config.setFileFieldName(FIELD_NAME);\r\n        config.setImageUrlPrefix(urlPrefix);\r\n        config.setScrawlUrlPrefix(urlPrefix);\r\n        config.setSnapscreenUrlPrefix(urlPrefix);\r\n        config.setCatcherUrlPrefix(urlPrefix);\r\n        config.setVideoUrlPrefix(urlPrefix);\r\n        config.setFileUrlPrefix(urlPrefix);\r\n        config.setImageManagerUrlPrefix(urlPrefix);\r\n        config.setFileManagerUrlPrefix(urlPrefix);\r\n        config.setImageAllowFiles(IMAGE_ALLOW_FILES);\r\n        config.setCatcherAllowFiles(IMAGE_ALLOW_FILES);\r\n        config.setVideoAllowFiles(VIDEO_ALLOW_FILES);\r\n        config.setFileAllowFiles(ALLOW_FILES);\r\n        config.setImageManagerAllowFiles(IMAGE_ALLOW_FILES);\r\n        config.setFileManagerAllowFiles(ALLOW_FILES);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @param site\r\n     * @param admin\r\n     * @param file\r\n     * @param request\r\n     * @param model\r\n     * @return view name\r\n     */\r\n    @RequestMapping(params = \"action=\" + ACTION_UPLOAD)\r\n    public String upload(@RequestAttribute SysSite site, @SessionAttribute SysUser admin, MultipartFile file,\r\n            HttpServletRequest request, ModelMap model) {\r\n        if (null != file && !file.isEmpty()) {\r\n            String originalName = file.getOriginalFilename();\r\n            String suffix = CmsFileUtils.getSuffix(originalName);\r\n            if (ArrayUtils.contains(ALLOW_FILES, suffix)) {\r\n                String fileName = CmsFileUtils.getUploadFileName(suffix);\r\n                String filePath = siteComponent.getWebFilePath(site, fileName);\r\n                try {\r\n                    CmsFileUtils.upload(file, filePath);\r\n                    FileSize fileSize = CmsFileUtils.getFileSize(filePath, suffix);\r\n                    logUploadService.save(new LogUpload(site.getId(), admin.getId(), LogLoginService.CHANNEL_WEB_MANAGER,\r\n                            originalName, CmsFileUtils.getFileType(suffix), file.getSize(), fileSize.getWidth(),\r\n                            fileSize.getHeight(), RequestUtils.getIpAddress(request), CommonUtils.getDate(), fileName));\r\n                    Map<String, Object> map = getResultMap(true);\r\n                    map.put(\"size\", file.getSize());\r\n                    map.put(\"title\", originalName);\r\n                    map.put(\"url\", fileName);\r\n                    map.put(\"type\", suffix);\r\n                    map.put(\"original\", originalName);\r\n                    model.addAttribute(\"result\", map);\r\n                } catch (IllegalStateException | IOException e) {\r\n                    model.addAttribute(\"result\", getResultMap(false));\r\n                }\r\n            } else {\r\n                model.addAttribute(\"result\", getResultMap(false));\r\n            }\r\n        } else {\r\n            model.addAttribute(\"result\", getResultMap(false));\r\n        }\r\n        return \"common/mapResult\";\r\n    }\r\n\r\n    /**\r\n     * @param site\r\n     * @param admin\r\n     * @param file\r\n     * @param request\r\n     * @param session\r\n     * @return view name\r\n     */\r\n    @RequestMapping(params = \"action=\" + ACTION_UPLOAD_SCRAW)\r\n    @ResponseBody\r\n    public Map<String, Object> uploadScraw(@RequestAttribute SysSite site, @SessionAttribute SysUser admin, String file,\r\n            HttpServletRequest request, HttpSession session) {\r\n        if (CommonUtils.notEmpty(file)) {\r\n            byte[] data = VerificationUtils.base64Decode(file);\r\n            String fileName = CmsFileUtils.getUploadFileName(SCRAW_TYPE);\r\n            String filePath = siteComponent.getWebFilePath(site, fileName);\r\n            try {\r\n                CmsFileUtils.writeByteArrayToFile(filePath, data);\r\n                FileSize fileSize = CmsFileUtils.getFileSize(filePath, SCRAW_TYPE);\r\n                logUploadService.save(new LogUpload(site.getId(), admin.getId(), LogLoginService.CHANNEL_WEB_MANAGER,\r\n                        CommonConstants.BLANK, CmsFileUtils.FILE_TYPE_IMAGE, data.length, fileSize.getWidth(),\r\n                        fileSize.getHeight(), RequestUtils.getIpAddress(request), CommonUtils.getDate(), fileName));\r\n                Map<String, Object> map = getResultMap(true);\r\n                map.put(\"size\", data.length);\r\n                map.put(\"title\", fileName);\r\n                map.put(\"url\", fileName);\r\n                map.put(\"type\", SCRAW_TYPE);\r\n                map.put(\"original\", \"scraw\" + SCRAW_TYPE);\r\n                return map;\r\n            } catch (IllegalStateException | IOException e) {\r\n                log.error(e.getMessage(), e);\r\n                return getResultMap(false);\r\n            }\r\n        }\r\n        return getResultMap(false);\r\n    }\r\n\r\n    /**\r\n     * @param site\r\n     * @param admin\r\n     * @param request\r\n     * @param session\r\n     * @return view name\r\n     */\r\n    @RequestMapping(params = \"action=\" + ACTION_CATCHIMAGE)\r\n    @ResponseBody\r\n    public Map<String, Object> catchimage(@RequestAttribute SysSite site, @SessionAttribute SysUser admin,\r\n            HttpServletRequest request, HttpSession session) {\r\n        try (CloseableHttpClient httpclient = HttpClients.custom().setDefaultRequestConfig(CommonConstants.defaultRequestConfig)\r\n                .build();) {\r\n            String[] files = request.getParameterValues(FIELD_NAME + \"[]\");\r\n            if (CommonUtils.notEmpty(files)) {\r\n                List<Map<String, Object>> list = new ArrayList<>();\r\n                for (String image : files) {\r\n                    HttpGet httpget = new HttpGet(image);\r\n                    CloseableHttpResponse response = httpclient.execute(httpget);\r\n                    HttpEntity entity = response.getEntity();\r\n                    if (null != entity) {\r\n                        BufferedInputStream inputStream = new BufferedInputStream(entity.getContent());\r\n                        FileType fileType = FileTypeDetector.detectFileType(inputStream);\r\n                        String suffix = fileType.getCommonExtension();\r\n                        if (null != fileType.getMimeType() && fileType.getMimeType().startsWith(\"image/\")\r\n                                && CommonUtils.notEmpty(suffix)) {\r\n                            String fileName = CmsFileUtils.getUploadFileName(suffix);\r\n                            String filePath = siteComponent.getWebFilePath(site, fileName);\r\n                            CmsFileUtils.copyInputStreamToFile(inputStream, filePath);\r\n                            FileSize fileSize = CmsFileUtils.getFileSize(filePath, suffix);\r\n                            logUploadService.save(new LogUpload(site.getId(), admin.getId(), LogLoginService.CHANNEL_WEB_MANAGER,\r\n                                    CommonConstants.BLANK, CmsFileUtils.getFileType(suffix), entity.getContentLength(),\r\n                                    fileSize.getWidth(), fileSize.getHeight(), RequestUtils.getIpAddress(request),\r\n                                    CommonUtils.getDate(), fileName));\r\n                            Map<String, Object> map = getResultMap(true);\r\n                            map.put(\"size\", entity.getContentLength());\r\n                            map.put(\"title\", fileName);\r\n                            map.put(\"url\", fileName);\r\n                            map.put(\"source\", image);\r\n                            list.add(map);\r\n                        }\r\n\r\n                    }\r\n                    EntityUtils.consume(entity);\r\n                }\r\n                if (list.isEmpty()) {\r\n                    return getResultMap(false);\r\n                } else {\r\n                    Map<String, Object> map = getResultMap(true);\r\n                    map.put(\"list\", list);\r\n                    return map;\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(e.getMessage(), e);\r\n            return getResultMap(false);\r\n        }\r\n        return getResultMap(false);\r\n    }\r\n\r\n    /**\r\n     * @param admin\r\n     * @param start\r\n     * @param request\r\n     * @param session\r\n     * @return view name\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    @RequestMapping(params = \"action=\" + ACTION_LISTFILE)\r\n    @ResponseBody\r\n    public Map<String, Object> listfile(@SessionAttribute SysUser admin, Integer start, HttpServletRequest request,\r\n            HttpSession session) {\r\n        if (CommonUtils.empty(start)) {\r\n            start = 0;\r\n        }\r\n        PageHandler page = logUploadService.getPage(siteComponent.getSite(request.getServerName()).getId(), admin.getId(), null,\r\n                null, null, null, null, null, start / 20 + 1, 20);\r\n\r\n        Map<String, Object> map = getResultMap(true);\r\n        List<Map<String, Object>> list = new ArrayList<>();\r\n        for (LogUpload logUpload : ((List<LogUpload>) page.getList())) {\r\n            Map<String, Object> tempMap = getResultMap(true);\r\n            tempMap.put(\"url\", logUpload.getFilePath());\r\n            list.add(tempMap);\r\n        }\r\n        map.put(\"list\", list);\r\n        map.put(\"start\", start);\r\n        map.put(\"total\", page.getTotalCount());\r\n        return map;\r\n    }\r\n\r\n    protected static Map<String, Object> getResultMap(boolean success) {\r\n        Map<String, Object> map = new HashMap<>();\r\n        if (success) {\r\n            map.put(\"state\", \"SUCCESS\");\r\n        } else {\r\n            map.put(\"state\", \"error\");\r\n        }\r\n        return map;\r\n    }\r\n}"], "filenames": ["publiccms-parent/publiccms-core/src/main/java/com/publiccms/controller/admin/sys/UeditorAdminController.java"], "buggy_code_start_loc": [221], "buggy_code_end_loc": [244], "fixing_code_start_loc": [221], "fixing_code_end_loc": [249], "type": "CWE-918", "message": "Server-side Request Forgery (SSRF) vulnerability in PublicCMS before 4.0.202011.b via /publiccms/admin/ueditor when the action is catchimage.", "other": {"cve": {"id": "CVE-2021-27693", "sourceIdentifier": "cve@mitre.org", "published": "2022-09-02T18:15:11.687", "lastModified": "2022-09-08T03:25:45.550", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Server-side Request Forgery (SSRF) vulnerability in PublicCMS before 4.0.202011.b via /publiccms/admin/ueditor when the action is catchimage."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Server-side Request Forgery (SSRF) en PublicCMS versiones anteriores a 4.0.202011.b, por medio de /publiccms/admin/ueditor cuando la acci\u00f3n es catchimage"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:publiccms:publiccms:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.0.202011.b", "matchCriteriaId": "C947C87C-1E2D-4732-9A7A-84652BCF240E"}]}]}], "references": [{"url": "https://github.com/sanluan/PublicCMS/commit/0f4c4872914b6a71305e121a7d9a19c07cde0338", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/sanluan/PublicCMS/issues/51", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sanluan/PublicCMS/commit/0f4c4872914b6a71305e121a7d9a19c07cde0338"}}