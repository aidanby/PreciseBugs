{"buggy_code": ["'use strict';\n\n/* eslint-disable no-loop-func */\n\n/*!\n * Collection\n * https://github.com/kobezzza/Collection\n *\n * Released under the MIT license\n * https://github.com/kobezzza/Collection/blob/master/LICENSE\n */\n\nimport $C, { Collection, P } from '../core';\n\nimport { isArray, isBoolean, isStructure, getSameAs, canExtendProto, getType } from '../helpers/types';\nimport { byLink, hasOwnProperty } from '../helpers/link';\nimport { any } from '../helpers/gcc';\n\nimport { EMPTY } from '../consts/primitives';\nimport { OBJECT_ASSIGN_NATIVE_SUPPORT } from '../consts/env';\n\nconst simpleType = {\n\t'array': true,\n\t'object': true\n};\n\nconst {\n\n\tcreate,\n\tdefineProperty,\n\tgetPrototypeOf,\n\tassign\n\n} = Object;\n\n/**\n * Extends the collection by another objects\n *\n * @param {(boolean|?$$Collection_extend)} deepOrParams - if true, then properties will be copied recursively\n *   OR additional parameters for extending:\n *\n *   * [withUndef = false] - if true, then the original value can be rewritten to undefined\n *   * [withDescriptor = false] - if true, then the descriptor of a property will be copied too\n *   * [withAccessors = false] - if true, then property accessors will be copied too, but not another descriptor properties;\n *   * [withProto = false] - if true, then properties will be copied with prototypes\n *   * [concatArray = false] - if true, then array properties will be concatenated (only if extending by an another array)\n *   * [concatFn = Array.prototype.concat] - function that will be concatenate arrays\n *   * [extendFilter] - function that will be filtering values for deep extending\n *   * [traits = false] - if true, then will be copied only new properties, or if -1, only old\n *   * [deep = false] - if true, then properties will be copied recursively\n *\n * @param {...Object} args - objects for extending\n * @return {(!Object|!Promise)}\n */\nCollection.prototype.extend = function (deepOrParams, args) {\n\tlet p = any(deepOrParams);\n\n\tif (p instanceof P === false) {\n\t\tif (isBoolean(p)) {\n\t\t\tp = {deep: p};\n\n\t\t} else {\n\t\t\tp = p || {};\n\t\t}\n\n\t\tthis._initParams(p);\n\t\tp = any(assign(Object.create(this.p), p));\n\n\t} else {\n\t\tp = any(Object.create(p));\n\t\tthis._initParams(p, false);\n\t}\n\n\tconst\n\t\twithDescriptor = p.withDescriptor && !p.withAccessors;\n\n\tif (p.withAccessors) {\n\t\tp.withDescriptor = true;\n\t}\n\n\tif (p.withProto) {\n\t\tp.notOwn = true;\n\t}\n\n\tlet\n\t\t{data} = this,\n\t\t{type} = p;\n\n\tif (!type || data === EMPTY) {\n\t\tfor (let i = 1; i < arguments.length; i++) {\n\t\t\ttype = getType(arguments[i], p.use);\n\n\t\t\tif (type) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tswitch (type) {\n\t\t\tcase 'object':\n\t\t\t\tdata = {};\n\t\t\t\tbreak;\n\n\t\t\tcase 'weakMap':\n\t\t\t\tdata = new WeakMap();\n\t\t\t\tbreak;\n\n\t\t\tcase 'weakSet':\n\t\t\t\tdata = new WeakSet();\n\t\t\t\tbreak;\n\n\t\t\tcase 'map':\n\t\t\t\tdata = new Map();\n\t\t\t\tbreak;\n\n\t\t\tcase 'set':\n\t\t\t\tdata = new Set();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tdata = [];\n\t\t}\n\t}\n\n\tconst dataIsSimple = simpleType[type];\n\tp.result = data;\n\n\tif (\n\t\t!p.deep &&\n\t\tp.withUndef &&\n\t\tp.mult &&\n\t\tdataIsSimple &&\n\t\tOBJECT_ASSIGN_NATIVE_SUPPORT &&\n\t\t!p.concatArray &&\n\t\t!p.withProto &&\n\t\t!p.withDescriptor &&\n\t\t!p.withAccessors &&\n\t\t!p.traits &&\n\t\t!p.extendFilter &&\n\t\t!p.filter.length &&\n\t\t!p.async &&\n\t\t!p.from &&\n\t\t!p.count &&\n\t\t!p.startIndex &&\n\t\t!p.endIndex &&\n\t\t!p.notOwn &&\n\t\t!p.reverse\n\t) {\n\t\tconst\n\t\t\targs = [];\n\n\t\tfor (let i = 1; i < arguments.length; i++) {\n\t\t\targs.push(arguments[i]);\n\t\t}\n\n\t\treturn assign(data, ...args);\n\t}\n\n\tlet setVal;\n\tswitch (type) {\n\t\tcase 'weakMap':\n\t\tcase 'map':\n\t\t\tsetVal = (data, key, val) => {\n\t\t\t\tif (p.traits && data.has(key) !== (p.traits === -1)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdata.set(key, val);\n\t\t\t};\n\n\t\t\tbreak;\n\n\t\tcase 'weakSet':\n\t\tcase 'set':\n\t\t\tsetVal = (data, key, val) => {\n\t\t\t\tif (p.traits && data.has(val) !== (p.traits === -1)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdata.add(val);\n\t\t\t};\n\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tsetVal = (data, key, val) => {\n\t\t\t\tif (p.traits && key in data !== (p.traits === -1)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (p.withUndef || val !== undefined) {\n\t\t\t\t\tdata[key] = val;\n\t\t\t\t}\n\t\t\t};\n\t}\n\n\tlet promise = {then(cb) {\n\t\tcb();\n\t\treturn this;\n\t}};\n\n\tif (p.async) {\n\t\tpromise = Promise.resolve();\n\t}\n\n\tif (p.notOwn && !dataIsSimple) {\n\t\tp.notOwn = false;\n\t}\n\n\tfor (let i = 1; i < arguments.length; i++) {\n\t\tconst\n\t\t\targ = arguments[i];\n\n\t\tif (!arg) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst\n\t\t\tisSimple = simpleType[getType(arg)];\n\n\t\tpromise = promise.then(() => $C(arg).forEach((el, key) => {\n\t\t\tif (dataIsSimple && isSimple && (withDescriptor || p.withAccessors && (el.get || el.set))) {\n\t\t\t\tif (p.traits && key in data !== (p.traits === -1)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (p.withAccessors) {\n\t\t\t\t\tdefineProperty(data, key, {\n\t\t\t\t\t\tget: el.get,\n\t\t\t\t\t\tset: el.set\n\t\t\t\t\t});\n\n\t\t\t\t} else if ('value' in el === false || el.value !== undefined || p.withUndef) {\n\t\t\t\t\tdefineProperty(data, key, el);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet\n\t\t\t\tsrc = byLink(data, [key]);\n\n\t\t\tconst\n\t\t\t\tval = isSimple ? arg[key] : el;\n\n\t\t\tif (data === val || val === arg) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet\n\t\t\t\tcanExtend = Boolean(val);\n\n\t\t\tif (canExtend && p.extendFilter) {\n\t\t\t\tcanExtend = p.extendFilter(data, val, key);\n\t\t\t}\n\n\t\t\tlet\n\t\t\t\tvalIsArray,\n\t\t\t\tstruct;\n\n\t\t\tif (canExtend) {\n\t\t\t\tvalIsArray = isArray(val);\n\t\t\t\tstruct = valIsArray ? [] : getSameAs(val);\n\t\t\t}\n\n\t\t\tif (p.deep && canExtend && (valIsArray || struct)) {\n\t\t\t\tconst\n\t\t\t\t\tisExtProto = p.withProto && dataIsSimple && canExtendProto(src);\n\n\t\t\t\tlet\n\t\t\t\t\tsrcIsArray = isArray(src);\n\n\t\t\t\tif (isExtProto && !(data.hasOwnProperty ? data.hasOwnProperty(key) : hasOwnProperty.call(data, key))) {\n\t\t\t\t\tsrc = srcIsArray ? src.slice() : create(src);\n\t\t\t\t\tbyLink(data, [key], {value: src});\n\t\t\t\t}\n\n\t\t\t\tlet clone;\n\t\t\t\tif (valIsArray) {\n\t\t\t\t\tlet\n\t\t\t\t\t\tisProto = false,\n\t\t\t\t\t\tconstruct;\n\n\t\t\t\t\tif (!srcIsArray && isExtProto && p.concatArray) {\n\t\t\t\t\t\tconstruct = getPrototypeOf(src);\n\t\t\t\t\t\tsrcIsArray = isProto = construct && isArray(construct);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (srcIsArray) {\n\t\t\t\t\t\tif (p.concatArray) {\n\t\t\t\t\t\t\tconst o = isProto ? construct : src;\n\t\t\t\t\t\t\tdata[key] = p.concatFn ? p.concatFn(o, val, key) : o.concat(val);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclone = src;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tclone = isStructure(src) ? src : struct || {};\n\t\t\t\t}\n\n\t\t\t\tconst\n\t\t\t\t\tchildExt = $C(clone).extend(p, val);\n\n\t\t\t\tif (p.async) {\n\t\t\t\t\treturn childExt.then((value) => byLink(data, [key], {value}));\n\t\t\t\t}\n\n\t\t\t\tbyLink(data, [key], {value: childExt});\n\n\t\t\t} else {\n\t\t\t\tsetVal(data, key, val);\n\t\t\t}\n\n\t\t}, p));\n\t}\n\n\treturn p.async ? promise.then(() => data) : data;\n};\n\n/**\n * Clones an object\n *\n * @param {?} obj - source object\n * @return {?}\n */\n$C.clone = function (obj) {\n\treturn JSON.parse(JSON.stringify(obj));\n};\n\n/**\n * Extends the specified object by another objects\n *\n * @see Collection.prototype.extend\n * @param {(boolean|?$$Collection_extend)} deepOrParams - additional parameters\n * @param {Object} target - source object\n * @param {...Object} args - objects for extending\n * @return {(!Object|!Promise)}\n */\n$C.extend = function (deepOrParams, target, args) {\n\targs = [deepOrParams];\n\n\tfor (let i = 2; i < arguments.length; i++) {\n\t\targs.push(arguments[i]);\n\t}\n\n\tconst obj = $C(target == null ? EMPTY : target);\n\treturn obj.extend.apply(obj, args);\n};\n\nObject.assign($C, {extend: $C.extend, clone: $C.clone});\n"], "fixing_code": ["'use strict';\n\n/* eslint-disable no-loop-func */\n\n/*!\n * Collection\n * https://github.com/kobezzza/Collection\n *\n * Released under the MIT license\n * https://github.com/kobezzza/Collection/blob/master/LICENSE\n */\n\nimport $C, { Collection, P } from '../core';\n\nimport { isArray, isBoolean, isStructure, getSameAs, canExtendProto, getType } from '../helpers/types';\nimport { byLink, hasOwnProperty } from '../helpers/link';\nimport { any } from '../helpers/gcc';\n\nimport { EMPTY } from '../consts/primitives';\nimport { OBJECT_ASSIGN_NATIVE_SUPPORT } from '../consts/env';\n\nconst simpleType = {\n\t'array': true,\n\t'object': true\n};\n\nconst {\n\n\tcreate,\n\tdefineProperty,\n\tgetPrototypeOf,\n\tassign\n\n} = Object;\n\n/**\n * Extends the collection by another objects\n *\n * @param {(boolean|?$$Collection_extend)} deepOrParams - if true, then properties will be copied recursively\n *   OR additional parameters for extending:\n *\n *   * [withUndef = false] - if true, then the original value can be rewritten to undefined\n *   * [withDescriptor = false] - if true, then the descriptor of a property will be copied too\n *   * [withAccessors = false] - if true, then property accessors will be copied too, but not another descriptor properties;\n *   * [withProto = false] - if true, then properties will be copied with prototypes\n *   * [concatArray = false] - if true, then array properties will be concatenated (only if extending by an another array)\n *   * [concatFn = Array.prototype.concat] - function that will be concatenate arrays\n *   * [extendFilter] - function that will be filtering values for deep extending\n *   * [traits = false] - if true, then will be copied only new properties, or if -1, only old\n *   * [deep = false] - if true, then properties will be copied recursively\n *\n * @param {...Object} args - objects for extending\n * @return {(!Object|!Promise)}\n */\nCollection.prototype.extend = function (deepOrParams, args) {\n\tlet p = any(deepOrParams);\n\n\tif (p instanceof P === false) {\n\t\tif (isBoolean(p)) {\n\t\t\tp = {deep: p};\n\n\t\t} else {\n\t\t\tp = p || {};\n\t\t}\n\n\t\tthis._initParams(p);\n\t\tp = any(assign(Object.create(this.p), p));\n\n\t} else {\n\t\tp = any(Object.create(p));\n\t\tthis._initParams(p, false);\n\t}\n\n\tconst\n\t\twithDescriptor = p.withDescriptor && !p.withAccessors;\n\n\tif (p.withAccessors) {\n\t\tp.withDescriptor = true;\n\t}\n\n\tif (p.withProto) {\n\t\tp.notOwn = true;\n\t}\n\n\tlet\n\t\t{data} = this,\n\t\t{type} = p;\n\n\tif (!type || data === EMPTY) {\n\t\tfor (let i = 1; i < arguments.length; i++) {\n\t\t\ttype = getType(arguments[i], p.use);\n\n\t\t\tif (type) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tswitch (type) {\n\t\t\tcase 'object':\n\t\t\t\tdata = {};\n\t\t\t\tbreak;\n\n\t\t\tcase 'weakMap':\n\t\t\t\tdata = new WeakMap();\n\t\t\t\tbreak;\n\n\t\t\tcase 'weakSet':\n\t\t\t\tdata = new WeakSet();\n\t\t\t\tbreak;\n\n\t\t\tcase 'map':\n\t\t\t\tdata = new Map();\n\t\t\t\tbreak;\n\n\t\t\tcase 'set':\n\t\t\t\tdata = new Set();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tdata = [];\n\t\t}\n\t}\n\n\tconst dataIsSimple = simpleType[type];\n\tp.result = data;\n\n\tif (\n\t\t!p.deep &&\n\t\tp.withUndef &&\n\t\tp.mult &&\n\t\tdataIsSimple &&\n\t\tOBJECT_ASSIGN_NATIVE_SUPPORT &&\n\t\t!p.concatArray &&\n\t\t!p.withProto &&\n\t\t!p.withDescriptor &&\n\t\t!p.withAccessors &&\n\t\t!p.traits &&\n\t\t!p.extendFilter &&\n\t\t!p.filter.length &&\n\t\t!p.async &&\n\t\t!p.from &&\n\t\t!p.count &&\n\t\t!p.startIndex &&\n\t\t!p.endIndex &&\n\t\t!p.notOwn &&\n\t\t!p.reverse\n\t) {\n\t\tconst\n\t\t\targs = [];\n\n\t\tfor (let i = 1; i < arguments.length; i++) {\n\t\t\targs.push(arguments[i]);\n\t\t}\n\n\t\treturn assign(data, ...args);\n\t}\n\n\tlet setVal;\n\tswitch (type) {\n\t\tcase 'weakMap':\n\t\tcase 'map':\n\t\t\tsetVal = (data, key, val) => {\n\t\t\t\tif (p.traits && data.has(key) !== (p.traits === -1)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdata.set(key, val);\n\t\t\t};\n\n\t\t\tbreak;\n\n\t\tcase 'weakSet':\n\t\tcase 'set':\n\t\t\tsetVal = (data, key, val) => {\n\t\t\t\tif (p.traits && data.has(val) !== (p.traits === -1)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdata.add(val);\n\t\t\t};\n\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tsetVal = (data, key, val) => {\n\t\t\t\tif (p.traits && key in data !== (p.traits === -1)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (p.withUndef || val !== undefined) {\n\t\t\t\t\tdata[key] = val;\n\t\t\t\t}\n\t\t\t};\n\t}\n\n\tlet promise = {then(cb) {\n\t\tcb();\n\t\treturn this;\n\t}};\n\n\tif (p.async) {\n\t\tpromise = Promise.resolve();\n\t}\n\n\tif (p.notOwn && !dataIsSimple) {\n\t\tp.notOwn = false;\n\t}\n\n\tfor (let i = 1; i < arguments.length; i++) {\n\t\tconst\n\t\t\targ = arguments[i];\n\n\t\tif (!arg) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst\n\t\t\tisSimple = simpleType[getType(arg)];\n\n\t\tpromise = promise.then(() => $C(arg).forEach((el, key) => {\n\t\t\tif (key === '__proto__') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (dataIsSimple && isSimple && (withDescriptor || p.withAccessors && (el.get || el.set))) {\n\t\t\t\tif (p.traits && key in data !== (p.traits === -1)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (p.withAccessors) {\n\t\t\t\t\tdefineProperty(data, key, {\n\t\t\t\t\t\tget: el.get,\n\t\t\t\t\t\tset: el.set\n\t\t\t\t\t});\n\n\t\t\t\t} else if ('value' in el === false || el.value !== undefined || p.withUndef) {\n\t\t\t\t\tdefineProperty(data, key, el);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet\n\t\t\t\tsrc = byLink(data, [key]);\n\n\t\t\tconst\n\t\t\t\tval = isSimple ? arg[key] : el;\n\n\t\t\tif (data === val || val === arg) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet\n\t\t\t\tcanExtend = Boolean(val);\n\n\t\t\tif (canExtend && p.extendFilter) {\n\t\t\t\tcanExtend = p.extendFilter(data, val, key);\n\t\t\t}\n\n\t\t\tlet\n\t\t\t\tvalIsArray,\n\t\t\t\tstruct;\n\n\t\t\tif (canExtend) {\n\t\t\t\tvalIsArray = isArray(val);\n\t\t\t\tstruct = valIsArray ? [] : getSameAs(val);\n\t\t\t}\n\n\t\t\tif (p.deep && canExtend && (valIsArray || struct)) {\n\t\t\t\tconst\n\t\t\t\t\tisExtProto = p.withProto && dataIsSimple && canExtendProto(src);\n\n\t\t\t\tlet\n\t\t\t\t\tsrcIsArray = isArray(src);\n\n\t\t\t\tif (isExtProto && !(data.hasOwnProperty ? data.hasOwnProperty(key) : hasOwnProperty.call(data, key))) {\n\t\t\t\t\tsrc = srcIsArray ? src.slice() : create(src);\n\t\t\t\t\tbyLink(data, [key], {value: src});\n\t\t\t\t}\n\n\t\t\t\tlet clone;\n\t\t\t\tif (valIsArray) {\n\t\t\t\t\tlet\n\t\t\t\t\t\tisProto = false,\n\t\t\t\t\t\tconstruct;\n\n\t\t\t\t\tif (!srcIsArray && isExtProto && p.concatArray) {\n\t\t\t\t\t\tconstruct = getPrototypeOf(src);\n\t\t\t\t\t\tsrcIsArray = isProto = construct && isArray(construct);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (srcIsArray) {\n\t\t\t\t\t\tif (p.concatArray) {\n\t\t\t\t\t\t\tconst o = isProto ? construct : src;\n\t\t\t\t\t\t\tdata[key] = p.concatFn ? p.concatFn(o, val, key) : o.concat(val);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclone = src;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tclone = isStructure(src) ? src : struct || {};\n\t\t\t\t}\n\n\t\t\t\tconst\n\t\t\t\t\tchildExt = $C(clone).extend(p, val);\n\n\t\t\t\tif (p.async) {\n\t\t\t\t\treturn childExt.then((value) => byLink(data, [key], {value}));\n\t\t\t\t}\n\n\t\t\t\tbyLink(data, [key], {value: childExt});\n\n\t\t\t} else {\n\t\t\t\tsetVal(data, key, val);\n\t\t\t}\n\n\t\t}, p));\n\t}\n\n\treturn p.async ? promise.then(() => data) : data;\n};\n\n/**\n * Clones an object\n *\n * @param {?} obj - source object\n * @return {?}\n */\n$C.clone = function (obj) {\n\treturn JSON.parse(JSON.stringify(obj));\n};\n\n/**\n * Extends the specified object by another objects\n *\n * @see Collection.prototype.extend\n * @param {(boolean|?$$Collection_extend)} deepOrParams - additional parameters\n * @param {Object} target - source object\n * @param {...Object} args - objects for extending\n * @return {(!Object|!Promise)}\n */\n$C.extend = function (deepOrParams, target, args) {\n\targs = [deepOrParams];\n\n\tfor (let i = 2; i < arguments.length; i++) {\n\t\targs.push(arguments[i]);\n\t}\n\n\tconst obj = $C(target == null ? EMPTY : target);\n\treturn obj.extend.apply(obj, args);\n};\n\nObject.assign($C, {extend: $C.extend, clone: $C.clone});\n"], "filenames": ["src/iterators/extend.js"], "buggy_code_start_loc": [220], "buggy_code_end_loc": [220], "fixing_code_start_loc": [221], "fixing_code_end_loc": [225], "type": "CWE-1321", "message": "Versions of the package collection.js before 6.8.1 are vulnerable to Prototype Pollution via the extend function in Collection.js/dist/node/iterators/extend.js.", "other": {"cve": {"id": "CVE-2023-26113", "sourceIdentifier": "report@snyk.io", "published": "2023-03-18T05:15:52.937", "lastModified": "2023-03-24T02:18:20.023", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Versions of the package collection.js before 6.8.1 are vulnerable to Prototype Pollution via the extend function in Collection.js/dist/node/iterators/extend.js."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:collection.js_project:collection.js:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "6.8.1", "matchCriteriaId": "27735FC6-ED7E-4FDD-8F74-1E22F837B8A4"}]}]}], "references": [{"url": "https://github.com/kobezzza/Collection/blob/be32c48e68f49d3be48a58e929d1ab8ff1d2d19c/dist/node/iterators/extend.js%23L324", "source": "report@snyk.io", "tags": ["Broken Link"]}, {"url": "https://github.com/kobezzza/Collection/commit/d3d937645f62f37d3115d6aa90bb510fd856e6a2", "source": "report@snyk.io", "tags": ["Patch"]}, {"url": "https://github.com/kobezzza/Collection/issues/27", "source": "report@snyk.io", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/kobezzza/Collection/releases/tag/v6.8.1", "source": "report@snyk.io", "tags": ["Patch", "Release Notes"]}, {"url": "https://security.snyk.io/vuln/SNYK-JS-COLLECTIONJS-3185148", "source": "report@snyk.io", "tags": ["Exploit", "Technical Description", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kobezzza/Collection/commit/d3d937645f62f37d3115d6aa90bb510fd856e6a2"}}