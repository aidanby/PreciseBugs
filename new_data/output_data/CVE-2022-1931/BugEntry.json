{"buggy_code": ["/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Updated:    6/9/19 9:44 PM\n *  Copyright (c) 2014-2019 Trudesk, Inc. All rights reserved.\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { observer } from 'mobx-react'\nimport { makeObservable, observable } from 'mobx'\nimport { each, without, uniq } from 'lodash'\n\nimport Log from '../../logger'\nimport axios from 'axios'\nimport { fetchTickets, deleteTicket, ticketEvent, unloadTickets, ticketUpdated } from 'actions/tickets'\nimport { fetchSearchResults } from 'actions/search'\nimport { showModal } from 'actions/common'\n\nimport PageTitle from 'components/PageTitle'\nimport Table from 'components/Table'\nimport TableHeader from 'components/Table/TableHeader'\nimport TableRow from 'components/Table/TableRow'\nimport TitlePagination from 'components/TitlePagination'\nimport PageContent from 'components/PageContent'\nimport TableCell from 'components/Table/TableCell'\nimport PageTitleButton from 'components/PageTitleButton'\nimport DropdownTrigger from 'components/Dropdown/DropdownTrigger'\nimport Dropdown from 'components/Dropdown'\nimport DropdownItem from 'components/Dropdown/DropdownItem'\nimport DropdownSeparator from 'components/Dropdown/DropdownSeperator'\n\nimport helpers from 'lib/helpers'\nimport socket from 'lib/socket'\nimport anime from 'animejs'\nimport moment from 'moment-timezone'\nimport SearchResults from 'components/SearchResults'\n\n@observer\nclass TicketsContainer extends React.Component {\n  @observable searchTerm = ''\n\n  selectedTickets = []\n  constructor (props) {\n    super(props)\n    makeObservable(this)\n\n    this.onTicketCreated = this.onTicketCreated.bind(this)\n    this.onTicketUpdated = this.onTicketUpdated.bind(this)\n    this.onTicketDeleted = this.onTicketDeleted.bind(this)\n  }\n  componentDidMount () {\n    socket.socket.on('$trudesk:client:ticket:created', this.onTicketCreated)\n    socket.socket.on('$trudesk:client:ticket:updated', this.onTicketUpdated)\n    socket.socket.on('$trudesk:client:ticket:deleted', this.onTicketDeleted)\n\n    this.props.fetchTickets({ limit: 50, page: this.props.page, type: this.props.view, filter: this.props.filter })\n  }\n\n  componentDidUpdate () {\n    if (this.timeline) {\n      this.timeline.pause()\n      this.timeline.seek(0)\n    }\n\n    anime.remove('tr.overdue td')\n\n    this.timeline = anime.timeline({\n      direction: 'alternate',\n      duration: 800,\n      autoPlay: false,\n      easing: 'steps(1)',\n      loop: true,\n      backgroundColor: 'blue'\n    })\n\n    this.timeline.add({\n      targets: 'tr.overdue td',\n      backgroundColor: '#b71c1c',\n      color: '#ffffff'\n    })\n\n    this.timeline.play()\n  }\n\n  componentWillUnmount () {\n    anime.remove('tr.overdue td')\n    this.timeline = null\n    this.props.unloadTickets()\n    socket.socket.off('$trudesk:client:ticket:created', this.onTicketCreated)\n    socket.socket.off('$trudesk:client:ticket:updated', this.onTicketUpdated)\n    socket.socket.off('$trudesk:client:ticket:deleted', this.onTicketDeleted)\n  }\n\n  onTicketCreated (ticket) {\n    if (this.props.page === '0') this.props.ticketEvent({ type: 'created', data: ticket })\n  }\n\n  onTicketUpdated (data) {\n    console.log(data)\n    this.props.ticketUpdated(data)\n  }\n\n  onTicketDeleted (id) {\n    this.props.ticketEvent({ type: 'deleted', data: id })\n  }\n\n  onTicketCheckChanged (e, id) {\n    if (e.target.checked) this.selectedTickets.push(id)\n    else this.selectedTickets = without(this.selectedTickets, id)\n\n    this.selectedTickets = uniq(this.selectedTickets)\n  }\n\n  onSetStatus (status) {\n    let statusText = ''\n    switch (status) {\n      case 0:\n        statusText = 'New'\n        break\n      case 1:\n        statusText = 'Open'\n        break\n      case 2:\n        statusText = 'Pending'\n        break\n      case 3:\n        statusText = 'Closed'\n    }\n\n    const batch = this.selectedTickets.map(id => {\n      return { id, status }\n    })\n\n    axios\n      .put(`/api/v2/tickets/batch`, { batch })\n      .then(res => {\n        if (res.data.success) {\n          helpers.UI.showSnackbar({ text: `Ticket status set to ${statusText}` })\n          this._clearChecked()\n        } else {\n          helpers.UI.showSnackbar('An unknown error occurred.', true)\n          Log.error(res.data.error)\n        }\n      })\n      .catch(error => {\n        Log.error(error)\n        helpers.UI.showSnackbar('An Error occurred. Please check console.', true)\n      })\n  }\n\n  onDeleteClicked () {\n    each(this.selectedTickets, id => {\n      this.props.deleteTicket({ id })\n    })\n\n    this._clearChecked()\n  }\n\n  onSearchTermChanged (e) {\n    this.searchTerm = e.target.value\n    if (this.searchTerm.length > 3) {\n      SearchResults.toggleAnimation(true, true)\n      this.props.fetchSearchResults({ term: this.searchTerm })\n    } else {\n      SearchResults.toggleAnimation(true, false)\n    }\n  }\n\n  _onSearchFocus (e) {\n    if (this.searchTerm.length > 3) SearchResults.toggleAnimation(true, true)\n  }\n\n  onSearchKeypress (e) {\n    if (this.searchTerm.length > 3) this.props.fetchSearchResults({ term: this.searchTerm })\n\n    // e.persist()\n    // if (e.charCode === 13) {\n    //   const searchString = e.target.value\n    //   if (searchString.length < 1) this.props.unloadTickets().then(this.props.fetchTickets({ type: this.props.view }))\n    //   else this.props.unloadTickets().then(this.props.fetchTickets({ type: 'search', searchString }))\n    // }\n  }\n\n  _selectAll () {\n    this.selectedTickets = []\n    const checkboxes = this.ticketsTable.querySelectorAll('td > input[type=\"checkbox\"]')\n    checkboxes.forEach(item => {\n      this.selectedTickets.push(item.dataset.ticket)\n      item.checked = true\n    })\n\n    this.selectedTickets = uniq(this.selectedTickets)\n  }\n\n  _clearChecked () {\n    this.selectedTickets = []\n    const checkboxes = this.ticketsTable.querySelectorAll('td > input[type=\"checkbox\"]')\n    checkboxes.forEach(item => {\n      item.checked = false\n    })\n\n    this.selectAllCheckbox.checked = false\n  }\n\n  onSelectAll (e) {\n    if (e.target.checked) this._selectAll()\n    else this._clearChecked()\n  }\n\n  render () {\n    const loadingItems = []\n    for (let i = 0; i < 51; i++) {\n      const cells = []\n      for (let k = 0; k < 10; k++) {\n        cells.push(\n          <TableCell key={k} className={'vam'}>\n            <div className={'loadingTextAnimation'} />\n          </TableCell>\n        )\n      }\n\n      loadingItems.push(<TableRow key={Math.random()}>{cells}</TableRow>)\n    }\n\n    const selectAllCheckbox = (\n      <div style={{ marginLeft: 17 }}>\n        <input\n          type='checkbox'\n          id={'select_all'}\n          style={{ display: 'none' }}\n          className='svgcheckinput'\n          onChange={e => this.onSelectAll(e)}\n          ref={r => (this.selectAllCheckbox = r)}\n        />\n        <label htmlFor={'select_all'} className='svgcheck'>\n          <svg width='16px' height='16px' viewBox='0 0 18 18'>\n            <path d='M1,9 L1,3.5 C1,2 2,1 3.5,1 L14.5,1 C16,1 17,2 17,3.5 L17,14.5 C17,16 16,17 14.5,17 L3.5,17 C2,17 1,16 1,14.5 L1,9 Z' />\n            <polyline points='1 9 7 14 15 4' />\n          </svg>\n        </label>\n      </div>\n    )\n\n    return (\n      <div>\n        <PageTitle\n          title={'Tickets'}\n          shadow={false}\n          rightComponent={\n            <div>\n              <div className={'uk-float-right'}>\n                <TitlePagination\n                  limit={50}\n                  total={this.props.totalCount}\n                  type={this.props.view}\n                  prevEnabled={this.props.prevEnabled}\n                  nextEnabled={this.props.nextEnabled}\n                  currentPage={this.props.page}\n                  prevPage={this.props.prevPage}\n                  nextPage={this.props.nextPage}\n                  filter={this.props.filter}\n                />\n                <PageTitleButton\n                  fontAwesomeIcon={'fa-refresh'}\n                  onButtonClick={e => {\n                    e.preventDefault()\n                    this.props\n                      .unloadTickets()\n                      .then(this.props.fetchTickets({ type: this.props.view, page: this.props.page }))\n                  }}\n                />\n                <PageTitleButton\n                  fontAwesomeIcon={'fa-filter'}\n                  onButtonClick={e => {\n                    e.preventDefault()\n                    this.props.showModal('FILTER_TICKET')\n                  }}\n                />\n                <DropdownTrigger pos={'bottom-right'} offset={5} extraClass={'uk-float-left'}>\n                  <PageTitleButton fontAwesomeIcon={'fa-tasks'} />\n                  <Dropdown small={true} width={120}>\n                    <DropdownItem text={'Create'} onClick={() => this.props.showModal('CREATE_TICKET')} />\n                    <DropdownSeparator />\n                    <DropdownItem text={'Set Open'} onClick={() => this.onSetStatus(1)} />\n                    <DropdownItem text={'Set Pending'} onClick={() => this.onSetStatus(2)} />\n                    <DropdownItem text={'Set Closed'} onClick={() => this.onSetStatus(3)} />\n                    {helpers.canUser('tickets:delete', true) && <DropdownSeparator />}\n                    {helpers.canUser('tickets:delete', true) && (\n                      <DropdownItem text={'Delete'} extraClass={'text-danger'} onClick={() => this.onDeleteClicked()} />\n                    )}\n                  </Dropdown>\n                </DropdownTrigger>\n                <div className={'uk-float-right'}>\n                  <div\n                    id={'ticket-search-box'}\n                    className='search-box uk-float-left nb'\n                    style={{ marginTop: 8, paddingLeft: 0 }}\n                  >\n                    <input\n                      type='text'\n                      id='tickets_Search'\n                      placeholder={'Search'}\n                      className={'ticket-top-search'}\n                      value={this.searchTerm}\n                      onChange={e => this.onSearchTermChanged(e)}\n                      onFocus={e => this._onSearchFocus(e)}\n                    />\n                  </div>\n                </div>\n              </div>\n              <SearchResults target={'#ticket-search-box'} ref={r => (this.searchContainer = r)} />\n            </div>\n          }\n        />\n        <PageContent padding={0} paddingBottom={0} extraClass={'uk-position-relative'}>\n          {/*<SpinLoader active={this.props.loading} />*/}\n          <Table\n            tableRef={ref => (this.ticketsTable = ref)}\n            style={{ margin: 0 }}\n            extraClass={'pDataTable'}\n            stickyHeader={true}\n            striped={true}\n            headers={[\n              <TableHeader key={0} width={45} height={50} component={selectAllCheckbox} />,\n              <TableHeader key={1} width={60} text={'Status'} />,\n              <TableHeader key={2} width={65} text={'#'} />,\n              <TableHeader key={3} width={'23%'} text={'Subject'} />,\n              <TableHeader key={4} width={110} text={'Created'} />,\n              <TableHeader key={5} width={125} text={'Requester'} />,\n              <TableHeader key={6} width={175} text={'Customer'} />,\n              <TableHeader key={7} text={'Assignee'} />,\n              <TableHeader key={8} width={110} text={'Due Date'} />,\n              <TableHeader key={9} text={'Updated'} />\n            ]}\n          >\n            {!this.props.loading && this.props.tickets.size < 1 && (\n              <TableRow clickable={false}>\n                <TableCell colSpan={10}>\n                  <h5 style={{ margin: 10 }}>No Tickets Found</h5>\n                </TableCell>\n              </TableRow>\n            )}\n            {this.props.loading && loadingItems}\n            {!this.props.loading &&\n              this.props.tickets.map(ticket => {\n                const status = () => {\n                  switch (ticket.get('status')) {\n                    case 0:\n                      return 'new'\n                    case 1:\n                      return 'open'\n                    case 2:\n                      return 'pending'\n                    case 3:\n                      return 'closed'\n                  }\n                }\n\n                const assignee = () => {\n                  const a = ticket.get('assignee')\n                  return !a ? '--' : a.get('fullname')\n                }\n\n                const updated = ticket.get('updated')\n                  ? helpers.formatDate(ticket.get('updated'), helpers.getShortDateFormat()) +\n                    ', ' +\n                    helpers.formatDate(ticket.get('updated'), helpers.getTimeFormat())\n                  : '--'\n\n                const dueDate = ticket.get('dueDate')\n                  ? helpers.formatDate(ticket.get('dueDate'), helpers.getShortDateFormat())\n                  : '--'\n\n                const isOverdue = () => {\n                  if (!this.props.common.showOverdue || [2, 3].indexOf(ticket.get('status')) !== -1) return false\n                  const overdueIn = ticket.getIn(['priority', 'overdueIn'])\n                  const now = moment()\n                  let updated = ticket.get('updated')\n                  if (updated) updated = moment(updated)\n                  else updated = moment(ticket.get('date'))\n\n                  const timeout = updated.clone().add(overdueIn, 'm')\n                  return now.isAfter(timeout)\n                }\n\n                return (\n                  <TableRow\n                    key={ticket.get('_id')}\n                    className={`ticket-${status()} ${isOverdue() ? 'overdue' : ''}`}\n                    clickable={true}\n                    onClick={e => {\n                      const td = e.target.closest('td')\n                      const input = td.getElementsByTagName('input')\n                      if (input.length > 0) return false\n                      History.pushState(null, `Ticket-${ticket.get('uid')}`, `/tickets/${ticket.get('uid')}`)\n                    }}\n                  >\n                    <TableCell\n                      className={'ticket-priority nbb vam'}\n                      style={{ borderColor: ticket.getIn(['priority', 'htmlColor']), padding: '18px 15px' }}\n                    >\n                      <input\n                        type='checkbox'\n                        id={`c_${ticket.get('_id')}`}\n                        data-ticket={ticket.get('_id')}\n                        style={{ display: 'none' }}\n                        onChange={e => this.onTicketCheckChanged(e, ticket.get('_id'))}\n                        className='svgcheckinput'\n                      />\n                      <label htmlFor={`c_${ticket.get('_id')}`} className='svgcheck'>\n                        <svg width='16px' height='16px' viewBox='0 0 18 18'>\n                          <path d='M1,9 L1,3.5 C1,2 2,1 3.5,1 L14.5,1 C16,1 17,2 17,3.5 L17,14.5 C17,16 16,17 14.5,17 L3.5,17 C2,17 1,16 1,14.5 L1,9 Z' />\n                          <polyline points='1 9 7 14 15 4' />\n                        </svg>\n                      </label>\n                    </TableCell>\n                    <TableCell className={`ticket-status ticket-${status()} vam nbb uk-text-center`}>\n                      <span className={'uk-display-inline-block'}>{status()[0].toUpperCase()}</span>\n                    </TableCell>\n                    <TableCell className={'vam nbb'}>{ticket.get('uid')}</TableCell>\n                    <TableCell className={'vam nbb'}>{ticket.get('subject')}</TableCell>\n                    <TableCell className={'vam nbb'}>\n                      {helpers.formatDate(ticket.get('date'), helpers.getShortDateFormat())}\n                    </TableCell>\n                    <TableCell className={'vam nbb'}>{ticket.getIn(['owner', 'fullname'])}</TableCell>\n                    <TableCell className={'vam nbb'}>{ticket.getIn(['group', 'name'])}</TableCell>\n                    <TableCell className={'vam nbb'}>{assignee()}</TableCell>\n                    <TableCell className={'vam nbb'}>{dueDate}</TableCell>\n                    <TableCell className={'vam nbb'}>{updated}</TableCell>\n                  </TableRow>\n                )\n              })}\n          </Table>\n        </PageContent>\n      </div>\n    )\n  }\n}\n\nTicketsContainer.propTypes = {\n  view: PropTypes.string.isRequired,\n  page: PropTypes.string.isRequired,\n  prevPage: PropTypes.number.isRequired,\n  nextPage: PropTypes.number.isRequired,\n  prevEnabled: PropTypes.bool.isRequired,\n  nextEnabled: PropTypes.bool.isRequired,\n  tickets: PropTypes.object.isRequired,\n  totalCount: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  fetchTickets: PropTypes.func.isRequired,\n  deleteTicket: PropTypes.func.isRequired,\n  ticketEvent: PropTypes.func.isRequired,\n  unloadTickets: PropTypes.func.isRequired,\n  ticketUpdated: PropTypes.func.isRequired,\n  showModal: PropTypes.func.isRequired,\n  fetchSearchResults: PropTypes.func.isRequired,\n  common: PropTypes.object.isRequired,\n  filter: PropTypes.object.isRequired\n}\n\nTicketsContainer.defaultProps = {\n  view: 'active',\n  page: 0,\n  prevEnabled: true,\n  nextEnabled: true\n}\n\nconst mapStateToProps = state => ({\n  tickets: state.ticketsState.tickets,\n  totalCount: state.ticketsState.totalCount,\n  prevPage: state.ticketsState.prevPage,\n  nextPage: state.ticketsState.nextPage,\n  loading: state.ticketsState.loading,\n  common: state.common\n})\n\nexport default connect(mapStateToProps, {\n  fetchTickets,\n  deleteTicket,\n  ticketEvent,\n  unloadTickets,\n  ticketUpdated,\n  fetchSearchResults,\n  showModal\n})(TicketsContainer)\n", "/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\nvar async = require('async')\nvar _ = require('lodash')\nvar winston = require('winston')\nvar ConversationSchema = require('../../../models/chat/conversation')\nvar MessageSchema = require('../../../models/chat/message')\n\nvar apiMessages = {}\n\n/**\n * @api {get} /api/v1/messages Get Messages\n * @apiName getMessages\n * @apiDescription Gets messages for the current logged in user\n * @apiVersion 0.1.8\n * @apiGroup Messages\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/messages\n *\n * @apiSuccess {boolean}    success             Successful?\n * @apiSuccess {array}      messages\n * @apiSuccess {object}     messages._id        The MongoDB ID\n * @apiSuccess {object}     messages.owner      Message Owner\n * @apiSuccess {object}     messages.from       Message From\n * @apiSuccess {string}     messages.subject    Message Subject\n * @apiSuccess {string}     messages.message    Message Text\n * @apiSuccess {date}       messages.date       Message Date\n * @apiSuccess {boolean}    messages.unread     Unread?\n * @apiSuccess {number}     messages.folder     Message Folder\n *\n */\n\napiMessages.getConversations = function (req, res) {\n  ConversationSchema.getConversations(req.user._id, function (err, conversations) {\n    if (err) return res.status(400).json({ success: false, error: err.message })\n\n    return res.json({ success: true, conversations: conversations })\n  })\n}\n\napiMessages.getRecentConversations = function (req, res) {\n  ConversationSchema.getConversations(req.user._id, function (err, conversations) {\n    if (err) return res.status(400).json({ success: false, error: err.message })\n\n    var result = []\n    async.eachSeries(\n      conversations,\n      function (item, done) {\n        var idx = _.findIndex(item.userMeta, function (mItem) {\n          return mItem.userId.toString() === req.user._id.toString()\n        })\n        if (idx === -1) {\n          return res.status(400).json({ success: false, error: 'Unable to attach to userMeta' })\n        }\n\n        MessageSchema.getMostRecentMessage(item._id, function (err, m) {\n          if (err) return done(err)\n          var r = item.toObject()\n\n          if (_.first(m) === undefined) {\n            return done()\n          }\n\n          if (item.userMeta[idx].deletedAt && item.userMeta[idx].deletedAt > _.first(m).createdAt) {\n            return done()\n          }\n\n          r.recentMessage = _.first(m)\n          if (!_.isUndefined(r.recentMessage)) {\n            r.recentMessage.__v = undefined\n            result.push(r)\n          }\n\n          return done()\n        })\n      },\n      function (err) {\n        if (err) return res.status(400).json({ success: false, error: err })\n        return res.json({ success: true, conversations: result })\n      }\n    )\n  })\n}\n\napiMessages.get = function (req, res) {\n  ConversationSchema.getConversations(req.user._id, function (err, conversations) {\n    if (err) return res.status(400).json({ success: false, error: err })\n    var fullConversations = []\n\n    async.forEach(\n      conversations,\n      function (item, done) {\n        MessageSchema.getFullConversation(item._id, function (err, messages) {\n          if (err) return done(err)\n          fullConversations.push({\n            cId: item._id,\n            p: item.participants,\n            messages: messages\n          })\n\n          return done()\n        })\n      },\n      function (err) {\n        if (err) return res.status(400).json({ success: false, error: err })\n        return res.json({ success: true, conversations: fullConversations })\n      }\n    )\n  })\n}\n\napiMessages.startConversation = function (req, res) {\n  var payload = req.body\n  var requester = payload.owner\n  var participants = payload.participants\n\n  // Check if Conversation with these participants exist\n  ConversationSchema.getConversations(participants, function (err, convo) {\n    if (err) {\n      return res.status(400).json({ success: false, error: err.message })\n    }\n\n    if (convo.length === 1) {\n      return res.json({ success: true, conversation: convo[0] })\n    }\n\n    var userMeta = []\n    _.each(participants, function (item) {\n      var meta = {\n        userId: item,\n        joinedAt: new Date()\n      }\n\n      if (requester === item) {\n        meta.lastRead = new Date()\n      }\n\n      userMeta.push(meta)\n    })\n\n    var Conversation = new ConversationSchema({\n      participants: participants,\n      userMeta: userMeta,\n      updatedAt: new Date()\n    })\n\n    Conversation.save(function (err, cSave) {\n      if (err) {\n        winston.debug(err)\n        return res.status(400).json({ success: false, error: err.message })\n      }\n\n      return res.json({ success: true, conversation: cSave })\n    })\n  })\n}\n\napiMessages.send = function (req, res) {\n  var payload = req.body\n  var cId = payload.cId\n  var owner = payload.owner\n  var message = payload.body\n  var matches = message.match(/^[Tt]#[0-9]*$/g)\n\n  if (!_.isNull(matches) && matches.length > 0) {\n    _.each(matches, function (m) {\n      message = message.replace(\n        m,\n        '<a href=\"/tickets/' +\n          m.replace('T#', '').replace('t#', '') +\n          '\">T#' +\n          m.replace('T#', '').replace('t#', '') +\n          '</a>'\n      )\n    })\n  }\n\n  async.waterfall(\n    [\n      function (done) {\n        // Updated conversation to save UpdatedAt field.\n        ConversationSchema.findOneAndUpdate({ _id: cId }, { updatedAt: new Date() }, { new: false }, function (\n          err,\n          convo\n        ) {\n          if (err) return done(err)\n          if (convo === null || convo === undefined) {\n            return done('Invalid Conversation: ' + convo)\n          }\n          return done(null, convo)\n        })\n      },\n      function (convo, done) {\n        var Message = new MessageSchema({\n          conversation: convo._id,\n          owner: owner,\n          body: message\n        })\n\n        Message.save(function (err, mSave) {\n          if (err) {\n            return done(err)\n          }\n\n          // Update conversation Meta!!\n          return done(null, mSave)\n        })\n      }\n    ],\n    function (err, mSave) {\n      if (err) {\n        winston.debug(err)\n        return res.status(400).json({ success: false, error: err.message })\n      }\n      return res.json({ success: true, message: mSave })\n    }\n  )\n}\n\napiMessages.getMessagesForConversation = function (req, res) {\n  var conversation = req.params.id\n  var page = req.query.page === undefined ? 0 : req.query.page\n  var limit = req.query.limit === undefined ? 10 : req.query.limit\n  if (_.isUndefined(conversation) || _.isNull(conversation)) {\n    return res.status(400).json({ success: false, error: 'Invalid Conversation' })\n  }\n\n  var response = {}\n  async.series(\n    [\n      function (done) {\n        ConversationSchema.getConversation(conversation, function (err, convo) {\n          if (err) return done(err)\n          if (!convo) return done({ message: 'Invalid Conversation' })\n\n          response.conversation = convo\n\n          return done()\n        })\n      },\n      function (done) {\n        MessageSchema.getConversationWithObject(\n          {\n            cid: conversation,\n            page: page,\n            limit: limit,\n            userMeta: response.conversation.userMeta,\n            requestingUser: req.user\n          },\n          function (err, messages) {\n            if (err) return done(err)\n\n            response.messages = messages\n\n            done()\n          }\n        )\n      }\n    ],\n    function (err) {\n      if (err) {\n        winston.debug(err)\n        return res.status(400).json({ success: false, error: err.message })\n      }\n\n      return res.json({\n        success: true,\n        conversation: response.conversation,\n        messages: response.messages\n      })\n    }\n  )\n}\n\napiMessages.deleteConversation = function (req, res) {\n  var conversation = req.params.id\n\n  if (_.isUndefined(conversation) || _.isNull(conversation)) {\n    return res.status(400).json({ success: false, error: 'Invalid Conversation' })\n  }\n\n  ConversationSchema.getConversation(conversation, function (err, convo) {\n    if (err) return res.status(400).json({ success: false, error: err.message })\n\n    var user = req.user\n    var idx = _.findIndex(convo.userMeta, function (item) {\n      return item.userId.toString() === user._id.toString()\n    })\n    if (idx === -1) {\n      return res.status(400).json({ success: false, error: 'Unable to attach to userMeta' })\n    }\n\n    convo.userMeta[idx].deletedAt = new Date()\n\n    convo.save(function (err, sConvo) {\n      if (err) return res.status(400).json({ success: false, error: err.message })\n\n      const cleanConvo = sConvo.toObject()\n      cleanConvo.participants.forEach(function (p) {\n        delete p._id\n        delete p.id\n        delete p.role\n      })\n\n      cleanConvo.userMeta.forEach(function (meta) {\n        delete meta.userId\n      })\n\n      return res.json({ success: true, conversation: cleanConvo })\n    })\n  })\n}\n\nmodule.exports = apiMessages\n", "/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\ndefine('pages/messages', [\n  'jquery',\n  'underscore',\n  'angular',\n  'uikit',\n  'moment',\n  'modules/helpers',\n  'modules/socket',\n  'history',\n  'isinview'\n], function ($, _, angular, UIKit, moment, helpers) {\n  var messagesPage = {}\n\n  messagesPage.init = function (callback) {\n    $(document).ready(function () {\n      var $messageScroller = $('#message-content.scrollable')\n\n      var $messagesWrapper = $('#messages')\n\n      var $scrollspy = $('#conversation-scrollspy')\n\n      var $spinner = $scrollspy.find('i')\n\n      var $searchBox = $('.search-box').find('input')\n\n      var $nextPage = 2\n\n      var $enabled = true\n\n      var $loading = false\n\n      // $inview             = null,\n\n      var $recentMessages = {}\n\n      var $convoId = $('#message-content[data-conversation-id]').attr('data-conversation-id')\n\n      var $loggedInAccountId = window.trudeskSessionService.getUser()._id\n\n      // Setup Context Menu\n      helpers.setupContextMenu('#convo-list > ul > li', function (action, target) {\n        var $li = $(target)\n        if (!$li.is('li')) {\n          $li = $(target).parents('li')\n        }\n        var convoId = $li.attr('data-conversation-id')\n        if (action.toLowerCase() === 'delete') {\n          UIKit.modal.confirm(\n            'Are you sure you want to delete this conversation?',\n            function () {\n              // Confirm\n              deleteConversation(convoId)\n            },\n            function () {\n              // Cancel\n            },\n            {\n              labels: {\n                Ok: 'YES'\n              },\n              confirmButtonClass: 'md-btn-danger'\n            }\n          )\n        }\n      })\n\n      $searchBox.off('keyup')\n      $searchBox.on('keyup', onSearchKeyUp)\n\n      $(window).off('$trudesk:ready.messages')\n      $(window).on('$trudesk:ready.messages', function () {\n        helpers.scrollToBottom($messageScroller)\n\n        // set active\n        if ($convoId !== undefined) {\n          var item = $('ul > li[data-conversation-id=\"' + $convoId + '\"]')\n          item.addClass('active')\n        }\n\n        // Remove All Chat Boxes\n        if (\n          $('#__page')\n            .text()\n            .toLowerCase() === 'messages'\n        ) {\n          $('.chat-box-position').each(function () {\n            var self = $(this)\n            self.remove()\n          })\n\n          $('.message-textbox')\n            .find('input')\n            .focus()\n\n          $messageScroller.scroll(function () {\n            if ($scrollspy.isInView($messageScroller)) {\n              var run = _.throttle(loadMoreMessages, 100)\n              run()\n            }\n          })\n        }\n      })\n\n      function deleteConversation (convoId) {\n        $.ajax({\n          url: '/api/v1/messages/conversation/' + convoId,\n          method: 'DELETE',\n          success: function (response) {\n            if (response.success) {\n              // Check if on conversation\n              var $convo = $('#message-content[data-conversation-id=\"' + response.conversation._id + '\"]')\n              if ($convo.length > 0) {\n                History.pushState(null, null, '/messages', false)\n              } else {\n                var $convoLI = $('#convo-list').find('li[data-conversation-id=\"' + response.conversation._id + '\"]')\n                if ($convoLI.length > 0) {\n                  $convoLI.remove()\n                }\n              }\n\n              $.event.trigger('$trudesk:chat:conversation:deleted', {\n                conversation: response.conversation\n              })\n\n              helpers.UI.showSnackbar('Conversation Deleted.', false)\n            }\n          },\n          error: function (error) {\n            console.log(error)\n          }\n        })\n      }\n\n      function onSearchKeyUp () {\n        var searchTerm = $searchBox.val().toLowerCase()\n        $('.all-user-list li').each(function () {\n          if ($(this).filter('[data-search-term *= ' + searchTerm + ']').length > 0 || searchTerm.length < 1) {\n            $(this).show()\n          } else {\n            $(this).hide()\n          }\n        })\n      }\n\n      function loadMoreMessages () {\n        if (!$enabled || $loading) return false\n        if (_.isUndefined($convoId)) return false\n        $loading = true\n        $spinner.removeClass('uk-hidden')\n\n        // Load Messages\n        $.ajax({\n          url: '/api/v1/messages/conversation/' + $convoId + '?page=' + $nextPage\n        })\n          .done(function (data) {\n            $spinner.addClass('uk-hidden')\n            var messages = data.messages\n            if (_.size(messages) < 1) {\n              $enabled = false\n              $loading = false\n              return false\n            }\n\n            var html = ''\n\n            _.each(messages, function (m) {\n              var h = buildMessageHTML(m)\n              if (h.length > 0) html += h\n            })\n\n            var stage = $('<div></div>')\n              .appendTo('body')\n              .addClass('stage')\n              .css({\n                opacity: 0,\n                visibility: 'hidden',\n                position: 'absolute',\n                top: '-9999em',\n                left: '-9999em'\n              })\n              .append(html)\n            var height = $(stage).outerHeight()\n            $(stage).remove()\n\n            $messagesWrapper.prepend(html)\n\n            UIKit.$html.trigger('changed.uk.dom')\n            $messageScroller.scrollTop(height, true)\n\n            $nextPage = $nextPage + 1\n            $loading = false\n          })\n          .error(function (err) {\n            console.log(err)\n          })\n      }\n\n      function buildMessageHTML (message) {\n        var html = ''\n        var loggedInAccountId = window.trudeskSessionService.getUser()._id\n        if (loggedInAccountId === undefined) return false\n        var left = true\n        if (message.owner._id.toString() === loggedInAccountId.toString()) {\n          left = false\n        }\n\n        var image = message.owner.image === undefined ? 'defaultProfile.jpg' : message.owner.image\n\n        if (left) {\n          html += '<div class=\"message message-left\">'\n          html +=\n            '<img class=\"profileImage\" src=\"/uploads/users/' +\n            image +\n            '\" data-userId=\"' +\n            message.owner._id +\n            '\" data-uk-tooltip=\"{pos:\\'left\\', animation: false}\" title=\"' +\n            message.owner.fullname +\n            ' - ' +\n            moment(message.createdAt)\n              .tz(helpers.getTimezone())\n              .format(helpers.getShortDateFormat() + ' ' + helpers.getTimeFormat()) +\n            '\"/>'\n          html += '<div class=\"message-body\">'\n          html += '<p>' + message.body + '</p>'\n          html += '</div>'\n          html += '</div>'\n        } else {\n          html += '<div class=\"message message-right\">'\n          html +=\n            '<div class=\"message-body\" data-uk-tooltip=\"{pos:\\'right\\', animation: false}\" title=\"' +\n            moment(message.createdAt)\n              .tz(helpers.getTimezone())\n              .format(helpers.getShortDateFormat() + ' ' + helpers.getTimeFormat()) +\n            '\">'\n          html += '<p>' + message.body + '</p>'\n          html += '</div>'\n          html += '</div>'\n        }\n\n        return html\n      }\n\n      // Remove all Events in the .conversation namespace for this page.\n      $(window).off('.conversation')\n\n      // On user Typing\n      $(window).on('$trudesk:chat:typing.conversation', function (event, data) {\n        var convoListItem = $('#convo-list').find('li[data-conversation-id=\"' + data.cid + '\"]')\n        if (convoListItem.length > 0) {\n          $recentMessages[data.cid] = convoListItem.find('.message-subject').text()\n          convoListItem.find('.message-subject').text(data.fromUser.fullname + ' is typing...')\n        }\n      })\n\n      $(window).on('$trudesk:chat:stoptyping.conversation', function (event, data) {\n        var convoListItem = $('#convo-list').find('li[data-conversation-id=\"' + data.cid + '\"]')\n        if (convoListItem.length > 0) {\n          convoListItem.find('.message-subject').text($recentMessages[data.cid])\n        }\n      })\n\n      // On Chat Message\n      $(window).on('$trudesk:chat:message.conversation', function (event, data) {\n        var message = {\n          _id: data.messageId,\n          conversation: data.conversation,\n          body: data.message,\n          owner: data.fromUser\n        }\n\n        var html = buildMessageHTML(message)\n        var messageWrapper = $('#message-content[data-conversation-id=\"' + message.conversation + '\"]')\n        if (messageWrapper.length > 0) {\n          messageWrapper.find('#messages').append(html)\n        }\n\n        var convoListItem = $('li[data-conversation-id=\"' + data.conversation + '\"]')\n        if (convoListItem.length > 0) {\n          convoListItem.attr('data-updatedAt', new Date())\n          var ul = convoListItem.parent('ul')\n          var li = ul.children('li')\n          li.detach().sort(function (a, b) {\n            return new Date($(a).attr('data-updatedAt')) < new Date($(b).attr('data-updatedAt'))\n          })\n\n          ul.append(li)\n\n          var fromName = message.owner.fullname\n          if (message.owner._id.toString() === $loggedInAccountId) {\n            fromName = 'You'\n          }\n\n          convoListItem.find('.message-subject').text(fromName + ': ' + message.body)\n          $recentMessages[message.conversation] = fromName + ': ' + message.body\n          var timezone = helpers.getTimezone()\n          convoListItem.find('.message-date').text(\n            moment\n              .utc()\n              .tz(timezone)\n              .calendar()\n          )\n        } else {\n          var convoUL = $('#convo-list > ul.message-items')\n          if (convoUL.length > 0) {\n            var partner = message.owner\n            if (message.owner._id.toString() === $loggedInAccountId.toString()) {\n              partner = data.toUser\n            }\n            var newLI = buildConversationListItem({\n              _id: message.conversation,\n              partner: partner,\n              updatedAt: new Date(),\n              recentMessage: message.owner.fullname + ': ' + message.body\n            })\n\n            var $injector = angular.injector(['ng', 'trudesk'])\n            $injector.invoke([\n              '$compile',\n              '$rootScope',\n              function ($compile, $rootScope) {\n                var $scope = convoUL.prepend(newLI).scope()\n                $compile(convoUL)($scope || $rootScope)\n                $rootScope.$digest()\n              }\n            ])\n          }\n        }\n\n        UIKit.$html.trigger('changed.uk.dom')\n        helpers.scrollToBottom($messageScroller)\n      })\n\n      function buildConversationListItem (data) {\n        var html = ''\n\n        html +=\n          '<li ng-click=\"loadConversation(\\'' +\n          data._id +\n          '\\');\" data-conversation-id=\"' +\n          data._id +\n          '\" data-updatedAt=\"' +\n          data.updatedAt +\n          '\">'\n        html += '<div class=\"profile-pic\">'\n        var imageUrl = 'defaultProfile.jpg'\n        if (data.partner.image) {\n          imageUrl = data.partner.image\n        }\n        html +=\n          '<img src=\"/uploads/users/' +\n          imageUrl +\n          '\" class=\"uk-border-circle profileImage\" data-userid=\"' +\n          data.partner._id +\n          '\" />'\n        html += '<span class=\"user-online uk-border-circle\" data-user-status-id=\"' + data.partner._id + '\"></span>'\n        html += '</div>'\n        html += '<div class=\"convo-info\">'\n        html += '<span class=\"message-from\">' + data.partner.fullname + '</span>'\n        html += '<span class=\"message-date\">' + moment(data.updatedAt).calendar() + '</span>'\n        html += '<span class=\"message-subject\">' + data.recentMessage + '</span>'\n        html += '</div>'\n        html += '</li>'\n\n        return html\n      }\n\n      if (typeof callback === 'function') {\n        return callback()\n      }\n    })\n  }\n\n  return messagesPage\n})\n"], "fixing_code": ["/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Updated:    6/9/19 9:44 PM\n *  Copyright (c) 2014-2019 Trudesk, Inc. All rights reserved.\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { observer } from 'mobx-react'\nimport { makeObservable, observable } from 'mobx'\nimport { each, without, uniq } from 'lodash'\n\nimport Log from '../../logger'\nimport axios from 'axios'\nimport { fetchTickets, deleteTicket, ticketEvent, unloadTickets, ticketUpdated } from 'actions/tickets'\nimport { fetchSearchResults } from 'actions/search'\nimport { showModal } from 'actions/common'\n\nimport PageTitle from 'components/PageTitle'\nimport Table from 'components/Table'\nimport TableHeader from 'components/Table/TableHeader'\nimport TableRow from 'components/Table/TableRow'\nimport TitlePagination from 'components/TitlePagination'\nimport PageContent from 'components/PageContent'\nimport TableCell from 'components/Table/TableCell'\nimport PageTitleButton from 'components/PageTitleButton'\nimport DropdownTrigger from 'components/Dropdown/DropdownTrigger'\nimport Dropdown from 'components/Dropdown'\nimport DropdownItem from 'components/Dropdown/DropdownItem'\nimport DropdownSeparator from 'components/Dropdown/DropdownSeperator'\n\nimport helpers from 'lib/helpers'\nimport socket from 'lib/socket'\nimport anime from 'animejs'\nimport moment from 'moment-timezone'\nimport SearchResults from 'components/SearchResults'\n\n@observer\nclass TicketsContainer extends React.Component {\n  @observable searchTerm = ''\n\n  selectedTickets = []\n  constructor (props) {\n    super(props)\n    makeObservable(this)\n\n    this.onTicketCreated = this.onTicketCreated.bind(this)\n    this.onTicketUpdated = this.onTicketUpdated.bind(this)\n    this.onTicketDeleted = this.onTicketDeleted.bind(this)\n  }\n  componentDidMount () {\n    socket.socket.on('$trudesk:client:ticket:created', this.onTicketCreated)\n    socket.socket.on('$trudesk:client:ticket:updated', this.onTicketUpdated)\n    socket.socket.on('$trudesk:client:ticket:deleted', this.onTicketDeleted)\n\n    this.props.fetchTickets({ limit: 50, page: this.props.page, type: this.props.view, filter: this.props.filter })\n  }\n\n  componentDidUpdate () {\n    if (this.timeline) {\n      this.timeline.pause()\n      this.timeline.seek(0)\n    }\n\n    anime.remove('tr.overdue td')\n\n    this.timeline = anime.timeline({\n      direction: 'alternate',\n      duration: 800,\n      autoPlay: false,\n      easing: 'steps(1)',\n      loop: true,\n      backgroundColor: 'blue'\n    })\n\n    this.timeline.add({\n      targets: 'tr.overdue td',\n      backgroundColor: '#b71c1c',\n      color: '#ffffff'\n    })\n\n    this.timeline.play()\n  }\n\n  componentWillUnmount () {\n    anime.remove('tr.overdue td')\n    this.timeline = null\n    this.props.unloadTickets()\n    socket.socket.off('$trudesk:client:ticket:created', this.onTicketCreated)\n    socket.socket.off('$trudesk:client:ticket:updated', this.onTicketUpdated)\n    socket.socket.off('$trudesk:client:ticket:deleted', this.onTicketDeleted)\n  }\n\n  onTicketCreated (ticket) {\n    if (this.props.page === '0') this.props.ticketEvent({ type: 'created', data: ticket })\n  }\n\n  onTicketUpdated (data) {\n    this.props.ticketUpdated(data)\n  }\n\n  onTicketDeleted (id) {\n    this.props.ticketEvent({ type: 'deleted', data: id })\n  }\n\n  onTicketCheckChanged (e, id) {\n    if (e.target.checked) this.selectedTickets.push(id)\n    else this.selectedTickets = without(this.selectedTickets, id)\n\n    this.selectedTickets = uniq(this.selectedTickets)\n  }\n\n  onSetStatus (status) {\n    let statusText = ''\n    switch (status) {\n      case 0:\n        statusText = 'New'\n        break\n      case 1:\n        statusText = 'Open'\n        break\n      case 2:\n        statusText = 'Pending'\n        break\n      case 3:\n        statusText = 'Closed'\n    }\n\n    const batch = this.selectedTickets.map(id => {\n      return { id, status }\n    })\n\n    axios\n      .put(`/api/v2/tickets/batch`, { batch })\n      .then(res => {\n        if (res.data.success) {\n          helpers.UI.showSnackbar({ text: `Ticket status set to ${statusText}` })\n          this._clearChecked()\n        } else {\n          helpers.UI.showSnackbar('An unknown error occurred.', true)\n          Log.error(res.data.error)\n        }\n      })\n      .catch(error => {\n        Log.error(error)\n        helpers.UI.showSnackbar('An Error occurred. Please check console.', true)\n      })\n  }\n\n  onDeleteClicked () {\n    each(this.selectedTickets, id => {\n      this.props.deleteTicket({ id })\n    })\n\n    this._clearChecked()\n  }\n\n  onSearchTermChanged (e) {\n    this.searchTerm = e.target.value\n    if (this.searchTerm.length > 3) {\n      SearchResults.toggleAnimation(true, true)\n      this.props.fetchSearchResults({ term: this.searchTerm })\n    } else {\n      SearchResults.toggleAnimation(true, false)\n    }\n  }\n\n  _onSearchFocus (e) {\n    if (this.searchTerm.length > 3) SearchResults.toggleAnimation(true, true)\n  }\n\n  onSearchKeypress (e) {\n    if (this.searchTerm.length > 3) this.props.fetchSearchResults({ term: this.searchTerm })\n\n    // e.persist()\n    // if (e.charCode === 13) {\n    //   const searchString = e.target.value\n    //   if (searchString.length < 1) this.props.unloadTickets().then(this.props.fetchTickets({ type: this.props.view }))\n    //   else this.props.unloadTickets().then(this.props.fetchTickets({ type: 'search', searchString }))\n    // }\n  }\n\n  _selectAll () {\n    this.selectedTickets = []\n    const checkboxes = this.ticketsTable.querySelectorAll('td > input[type=\"checkbox\"]')\n    checkboxes.forEach(item => {\n      this.selectedTickets.push(item.dataset.ticket)\n      item.checked = true\n    })\n\n    this.selectedTickets = uniq(this.selectedTickets)\n  }\n\n  _clearChecked () {\n    this.selectedTickets = []\n    const checkboxes = this.ticketsTable.querySelectorAll('td > input[type=\"checkbox\"]')\n    checkboxes.forEach(item => {\n      item.checked = false\n    })\n\n    this.selectAllCheckbox.checked = false\n  }\n\n  onSelectAll (e) {\n    if (e.target.checked) this._selectAll()\n    else this._clearChecked()\n  }\n\n  render () {\n    const loadingItems = []\n    for (let i = 0; i < 51; i++) {\n      const cells = []\n      for (let k = 0; k < 10; k++) {\n        cells.push(\n          <TableCell key={k} className={'vam'}>\n            <div className={'loadingTextAnimation'} />\n          </TableCell>\n        )\n      }\n\n      loadingItems.push(<TableRow key={Math.random()}>{cells}</TableRow>)\n    }\n\n    const selectAllCheckbox = (\n      <div style={{ marginLeft: 17 }}>\n        <input\n          type='checkbox'\n          id={'select_all'}\n          style={{ display: 'none' }}\n          className='svgcheckinput'\n          onChange={e => this.onSelectAll(e)}\n          ref={r => (this.selectAllCheckbox = r)}\n        />\n        <label htmlFor={'select_all'} className='svgcheck'>\n          <svg width='16px' height='16px' viewBox='0 0 18 18'>\n            <path d='M1,9 L1,3.5 C1,2 2,1 3.5,1 L14.5,1 C16,1 17,2 17,3.5 L17,14.5 C17,16 16,17 14.5,17 L3.5,17 C2,17 1,16 1,14.5 L1,9 Z' />\n            <polyline points='1 9 7 14 15 4' />\n          </svg>\n        </label>\n      </div>\n    )\n\n    return (\n      <div>\n        <PageTitle\n          title={'Tickets'}\n          shadow={false}\n          rightComponent={\n            <div>\n              <div className={'uk-float-right'}>\n                <TitlePagination\n                  limit={50}\n                  total={this.props.totalCount}\n                  type={this.props.view}\n                  prevEnabled={this.props.prevEnabled}\n                  nextEnabled={this.props.nextEnabled}\n                  currentPage={this.props.page}\n                  prevPage={this.props.prevPage}\n                  nextPage={this.props.nextPage}\n                  filter={this.props.filter}\n                />\n                <PageTitleButton\n                  fontAwesomeIcon={'fa-refresh'}\n                  onButtonClick={e => {\n                    e.preventDefault()\n                    this.props\n                      .unloadTickets()\n                      .then(this.props.fetchTickets({ type: this.props.view, page: this.props.page }))\n                  }}\n                />\n                <PageTitleButton\n                  fontAwesomeIcon={'fa-filter'}\n                  onButtonClick={e => {\n                    e.preventDefault()\n                    this.props.showModal('FILTER_TICKET')\n                  }}\n                />\n                <DropdownTrigger pos={'bottom-right'} offset={5} extraClass={'uk-float-left'}>\n                  <PageTitleButton fontAwesomeIcon={'fa-tasks'} />\n                  <Dropdown small={true} width={120}>\n                    <DropdownItem text={'Create'} onClick={() => this.props.showModal('CREATE_TICKET')} />\n                    <DropdownSeparator />\n                    <DropdownItem text={'Set Open'} onClick={() => this.onSetStatus(1)} />\n                    <DropdownItem text={'Set Pending'} onClick={() => this.onSetStatus(2)} />\n                    <DropdownItem text={'Set Closed'} onClick={() => this.onSetStatus(3)} />\n                    {helpers.canUser('tickets:delete', true) && <DropdownSeparator />}\n                    {helpers.canUser('tickets:delete', true) && (\n                      <DropdownItem text={'Delete'} extraClass={'text-danger'} onClick={() => this.onDeleteClicked()} />\n                    )}\n                  </Dropdown>\n                </DropdownTrigger>\n                <div className={'uk-float-right'}>\n                  <div\n                    id={'ticket-search-box'}\n                    className='search-box uk-float-left nb'\n                    style={{ marginTop: 8, paddingLeft: 0 }}\n                  >\n                    <input\n                      type='text'\n                      id='tickets_Search'\n                      placeholder={'Search'}\n                      className={'ticket-top-search'}\n                      value={this.searchTerm}\n                      onChange={e => this.onSearchTermChanged(e)}\n                      onFocus={e => this._onSearchFocus(e)}\n                    />\n                  </div>\n                </div>\n              </div>\n              <SearchResults target={'#ticket-search-box'} ref={r => (this.searchContainer = r)} />\n            </div>\n          }\n        />\n        <PageContent padding={0} paddingBottom={0} extraClass={'uk-position-relative'}>\n          {/*<SpinLoader active={this.props.loading} />*/}\n          <Table\n            tableRef={ref => (this.ticketsTable = ref)}\n            style={{ margin: 0 }}\n            extraClass={'pDataTable'}\n            stickyHeader={true}\n            striped={true}\n            headers={[\n              <TableHeader key={0} width={45} height={50} component={selectAllCheckbox} />,\n              <TableHeader key={1} width={60} text={'Status'} />,\n              <TableHeader key={2} width={65} text={'#'} />,\n              <TableHeader key={3} width={'23%'} text={'Subject'} />,\n              <TableHeader key={4} width={110} text={'Created'} />,\n              <TableHeader key={5} width={125} text={'Requester'} />,\n              <TableHeader key={6} width={175} text={'Customer'} />,\n              <TableHeader key={7} text={'Assignee'} />,\n              <TableHeader key={8} width={110} text={'Due Date'} />,\n              <TableHeader key={9} text={'Updated'} />\n            ]}\n          >\n            {!this.props.loading && this.props.tickets.size < 1 && (\n              <TableRow clickable={false}>\n                <TableCell colSpan={10}>\n                  <h5 style={{ margin: 10 }}>No Tickets Found</h5>\n                </TableCell>\n              </TableRow>\n            )}\n            {this.props.loading && loadingItems}\n            {!this.props.loading &&\n              this.props.tickets.map(ticket => {\n                const status = () => {\n                  switch (ticket.get('status')) {\n                    case 0:\n                      return 'new'\n                    case 1:\n                      return 'open'\n                    case 2:\n                      return 'pending'\n                    case 3:\n                      return 'closed'\n                  }\n                }\n\n                const assignee = () => {\n                  const a = ticket.get('assignee')\n                  return !a ? '--' : a.get('fullname')\n                }\n\n                const updated = ticket.get('updated')\n                  ? helpers.formatDate(ticket.get('updated'), helpers.getShortDateFormat()) +\n                    ', ' +\n                    helpers.formatDate(ticket.get('updated'), helpers.getTimeFormat())\n                  : '--'\n\n                const dueDate = ticket.get('dueDate')\n                  ? helpers.formatDate(ticket.get('dueDate'), helpers.getShortDateFormat())\n                  : '--'\n\n                const isOverdue = () => {\n                  if (!this.props.common.showOverdue || [2, 3].indexOf(ticket.get('status')) !== -1) return false\n                  const overdueIn = ticket.getIn(['priority', 'overdueIn'])\n                  const now = moment()\n                  let updated = ticket.get('updated')\n                  if (updated) updated = moment(updated)\n                  else updated = moment(ticket.get('date'))\n\n                  const timeout = updated.clone().add(overdueIn, 'm')\n                  return now.isAfter(timeout)\n                }\n\n                return (\n                  <TableRow\n                    key={ticket.get('_id')}\n                    className={`ticket-${status()} ${isOverdue() ? 'overdue' : ''}`}\n                    clickable={true}\n                    onClick={e => {\n                      const td = e.target.closest('td')\n                      const input = td.getElementsByTagName('input')\n                      if (input.length > 0) return false\n                      History.pushState(null, `Ticket-${ticket.get('uid')}`, `/tickets/${ticket.get('uid')}`)\n                    }}\n                  >\n                    <TableCell\n                      className={'ticket-priority nbb vam'}\n                      style={{ borderColor: ticket.getIn(['priority', 'htmlColor']), padding: '18px 15px' }}\n                    >\n                      <input\n                        type='checkbox'\n                        id={`c_${ticket.get('_id')}`}\n                        data-ticket={ticket.get('_id')}\n                        style={{ display: 'none' }}\n                        onChange={e => this.onTicketCheckChanged(e, ticket.get('_id'))}\n                        className='svgcheckinput'\n                      />\n                      <label htmlFor={`c_${ticket.get('_id')}`} className='svgcheck'>\n                        <svg width='16px' height='16px' viewBox='0 0 18 18'>\n                          <path d='M1,9 L1,3.5 C1,2 2,1 3.5,1 L14.5,1 C16,1 17,2 17,3.5 L17,14.5 C17,16 16,17 14.5,17 L3.5,17 C2,17 1,16 1,14.5 L1,9 Z' />\n                          <polyline points='1 9 7 14 15 4' />\n                        </svg>\n                      </label>\n                    </TableCell>\n                    <TableCell className={`ticket-status ticket-${status()} vam nbb uk-text-center`}>\n                      <span className={'uk-display-inline-block'}>{status()[0].toUpperCase()}</span>\n                    </TableCell>\n                    <TableCell className={'vam nbb'}>{ticket.get('uid')}</TableCell>\n                    <TableCell className={'vam nbb'}>{ticket.get('subject')}</TableCell>\n                    <TableCell className={'vam nbb'}>\n                      {helpers.formatDate(ticket.get('date'), helpers.getShortDateFormat())}\n                    </TableCell>\n                    <TableCell className={'vam nbb'}>{ticket.getIn(['owner', 'fullname'])}</TableCell>\n                    <TableCell className={'vam nbb'}>{ticket.getIn(['group', 'name'])}</TableCell>\n                    <TableCell className={'vam nbb'}>{assignee()}</TableCell>\n                    <TableCell className={'vam nbb'}>{dueDate}</TableCell>\n                    <TableCell className={'vam nbb'}>{updated}</TableCell>\n                  </TableRow>\n                )\n              })}\n          </Table>\n        </PageContent>\n      </div>\n    )\n  }\n}\n\nTicketsContainer.propTypes = {\n  view: PropTypes.string.isRequired,\n  page: PropTypes.string.isRequired,\n  prevPage: PropTypes.number.isRequired,\n  nextPage: PropTypes.number.isRequired,\n  prevEnabled: PropTypes.bool.isRequired,\n  nextEnabled: PropTypes.bool.isRequired,\n  tickets: PropTypes.object.isRequired,\n  totalCount: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  fetchTickets: PropTypes.func.isRequired,\n  deleteTicket: PropTypes.func.isRequired,\n  ticketEvent: PropTypes.func.isRequired,\n  unloadTickets: PropTypes.func.isRequired,\n  ticketUpdated: PropTypes.func.isRequired,\n  showModal: PropTypes.func.isRequired,\n  fetchSearchResults: PropTypes.func.isRequired,\n  common: PropTypes.object.isRequired,\n  filter: PropTypes.object.isRequired\n}\n\nTicketsContainer.defaultProps = {\n  view: 'active',\n  page: 0,\n  prevEnabled: true,\n  nextEnabled: true\n}\n\nconst mapStateToProps = state => ({\n  tickets: state.ticketsState.tickets,\n  totalCount: state.ticketsState.totalCount,\n  prevPage: state.ticketsState.prevPage,\n  nextPage: state.ticketsState.nextPage,\n  loading: state.ticketsState.loading,\n  common: state.common\n})\n\nexport default connect(mapStateToProps, {\n  fetchTickets,\n  deleteTicket,\n  ticketEvent,\n  unloadTickets,\n  ticketUpdated,\n  fetchSearchResults,\n  showModal\n})(TicketsContainer)\n", "/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\nvar async = require('async')\nvar _ = require('lodash')\nvar winston = require('../../../logger')\nvar ConversationSchema = require('../../../models/chat/conversation')\nvar MessageSchema = require('../../../models/chat/message')\nvar UserSchema = require('../../../models/user')\n\nvar apiMessages = {}\n\n/**\n * @api {get} /api/v1/messages Get Messages\n * @apiName getMessages\n * @apiDescription Gets messages for the current logged in user\n * @apiVersion 0.1.8\n * @apiGroup Messages\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/messages\n *\n * @apiSuccess {boolean}    success             Successful?\n * @apiSuccess {array}      messages\n * @apiSuccess {object}     messages._id        The MongoDB ID\n * @apiSuccess {object}     messages.owner      Message Owner\n * @apiSuccess {object}     messages.from       Message From\n * @apiSuccess {string}     messages.subject    Message Subject\n * @apiSuccess {string}     messages.message    Message Text\n * @apiSuccess {date}       messages.date       Message Date\n * @apiSuccess {boolean}    messages.unread     Unread?\n * @apiSuccess {number}     messages.folder     Message Folder\n *\n */\n\napiMessages.getConversations = function (req, res) {\n  ConversationSchema.getConversations(req.user._id, function (err, conversations) {\n    if (err) return res.status(400).json({ success: false, error: err.message })\n\n    return res.json({ success: true, conversations: conversations })\n  })\n}\n\napiMessages.getRecentConversations = function (req, res) {\n  ConversationSchema.getConversations(req.user._id, function (err, conversations) {\n    if (err) return res.status(400).json({ success: false, error: err.message })\n\n    var result = []\n    async.eachSeries(\n      conversations,\n      function (item, done) {\n        var idx = _.findIndex(item.userMeta, function (mItem) {\n          return mItem.userId.toString() === req.user._id.toString()\n        })\n        if (idx === -1) {\n          return res.status(400).json({ success: false, error: 'Unable to attach to userMeta' })\n        }\n\n        MessageSchema.getMostRecentMessage(item._id, function (err, m) {\n          if (err) return done(err)\n          var r = item.toObject()\n\n          if (_.first(m) === undefined) {\n            return done()\n          }\n\n          if (item.userMeta[idx].deletedAt && item.userMeta[idx].deletedAt > _.first(m).createdAt) {\n            return done()\n          }\n\n          r.recentMessage = _.first(m)\n          if (!_.isUndefined(r.recentMessage)) {\n            r.recentMessage.__v = undefined\n            result.push(r)\n          }\n\n          return done()\n        })\n      },\n      function (err) {\n        if (err) return res.status(400).json({ success: false, error: err })\n        return res.json({ success: true, conversations: result })\n      }\n    )\n  })\n}\n\napiMessages.get = function (req, res) {\n  ConversationSchema.getConversations(req.user._id, function (err, conversations) {\n    if (err) return res.status(400).json({ success: false, error: err })\n    var fullConversations = []\n\n    async.forEach(\n      conversations,\n      function (item, done) {\n        MessageSchema.getFullConversation(item._id, function (err, messages) {\n          if (err) return done(err)\n          fullConversations.push({\n            cId: item._id,\n            p: item.participants,\n            messages: messages\n          })\n\n          return done()\n        })\n      },\n      function (err) {\n        if (err) return res.status(400).json({ success: false, error: err })\n        return res.json({ success: true, conversations: fullConversations })\n      }\n    )\n  })\n}\n\napiMessages.startConversation = function (req, res) {\n  var payload = req.body\n  var requester = payload.owner\n  var participants = payload.participants\n\n  // Check if Conversation with these participants exist\n  ConversationSchema.getConversations(participants, function (err, convo) {\n    if (err) {\n      return res.status(400).json({ success: false, error: err.message })\n    }\n\n    if (convo.length === 1) {\n      return res.json({ success: true, conversation: convo[0] })\n    }\n\n    var userMeta = []\n    _.each(participants, function (item) {\n      var meta = {\n        userId: item,\n        joinedAt: new Date()\n      }\n\n      if (requester === item) {\n        meta.lastRead = new Date()\n      }\n\n      userMeta.push(meta)\n    })\n\n    var Conversation = new ConversationSchema({\n      participants: participants,\n      userMeta: userMeta,\n      updatedAt: new Date()\n    })\n\n    Conversation.save(function (err, cSave) {\n      if (err) {\n        winston.debug(err)\n        return res.status(400).json({ success: false, error: err.message })\n      }\n\n      return res.json({ success: true, conversation: cSave })\n    })\n  })\n}\n\napiMessages.send = function (req, res) {\n  var payload = req.body\n  var cId = payload.cId\n  var owner = payload.owner\n  var message = payload.body\n  var matches = message.match(/^[Tt]#[0-9]*$/g)\n\n  if (!_.isNull(matches) && matches.length > 0) {\n    _.each(matches, function (m) {\n      message = message.replace(\n        m,\n        '<a href=\"/tickets/' +\n          m.replace('T#', '').replace('t#', '') +\n          '\">T#' +\n          m.replace('T#', '').replace('t#', '') +\n          '</a>'\n      )\n    })\n  }\n\n  async.waterfall(\n    [\n      function (done) {\n        ConversationSchema.findOne({ _id: cId }, function (err, convo) {\n          if (err || !convo) return done('Invalid Conversation')\n\n          return done(null, convo)\n        })\n      },\n      function (convo, done) {\n        // Updated conversation to save UpdatedAt field.\n        convo.updatedAt = new Date()\n        convo.save(function (err, savedConvo) {\n          if (err) return done(err)\n\n          return done(null, savedConvo)\n        })\n      },\n      function (convo, done) {\n        UserSchema.findOne({ _id: owner }, function (err, user) {\n          if (err || !user) return done('Invalid Conversation')\n\n          return done(null, user, convo)\n        })\n      },\n      function (user, convo, done) {\n        const Message = new MessageSchema({\n          conversation: convo._id,\n          owner: user._id,\n          body: message\n        })\n\n        Message.save(function (err, mSave) {\n          if (err) {\n            return done(err)\n          }\n\n          // Update conversation Meta!!\n          return done(null, mSave)\n        })\n      }\n    ],\n    function (err, mSave) {\n      if (err) {\n        winston.debug(err)\n        return res.status(400).json({ success: false, error: err.message })\n      }\n      return res.json({ success: true, message: mSave })\n    }\n  )\n}\n\napiMessages.getMessagesForConversation = function (req, res) {\n  var conversation = req.params.id\n  var page = req.query.page === undefined ? 0 : req.query.page\n  var limit = req.query.limit === undefined ? 10 : req.query.limit\n  if (_.isUndefined(conversation) || _.isNull(conversation)) {\n    return res.status(400).json({ success: false, error: 'Invalid Conversation' })\n  }\n\n  var response = {}\n  async.series(\n    [\n      function (done) {\n        ConversationSchema.getConversation(conversation, function (err, convo) {\n          if (err) return done(err)\n          if (!convo) return done({ message: 'Invalid Conversation' })\n\n          response.conversation = convo\n\n          return done()\n        })\n      },\n      function (done) {\n        MessageSchema.getConversationWithObject(\n          {\n            cid: conversation,\n            page: page,\n            limit: limit,\n            userMeta: response.conversation.userMeta,\n            requestingUser: req.user\n          },\n          function (err, messages) {\n            if (err) return done(err)\n\n            response.messages = messages\n\n            done()\n          }\n        )\n      }\n    ],\n    function (err) {\n      if (err) {\n        winston.debug(err)\n        return res.status(400).json({ success: false, error: err.message })\n      }\n\n      return res.json({\n        success: true,\n        conversation: response.conversation,\n        messages: response.messages\n      })\n    }\n  )\n}\n\napiMessages.deleteConversation = function (req, res) {\n  var conversation = req.params.id\n\n  if (_.isUndefined(conversation) || _.isNull(conversation)) {\n    return res.status(400).json({ success: false, error: 'Invalid Conversation' })\n  }\n\n  ConversationSchema.getConversation(conversation, function (err, convo) {\n    if (err) return res.status(400).json({ success: false, error: err.message })\n\n    var user = req.user\n    var idx = _.findIndex(convo.userMeta, function (item) {\n      return item.userId.toString() === user._id.toString()\n    })\n    if (idx === -1) {\n      return res.status(400).json({ success: false, error: 'Unable to attach to userMeta' })\n    }\n\n    convo.userMeta[idx].deletedAt = new Date()\n\n    convo.save(function (err, sConvo) {\n      if (err) return res.status(400).json({ success: false, error: err.message })\n\n      const cleanConvo = sConvo.toObject()\n      cleanConvo.participants.forEach(function (p) {\n        delete p._id\n        delete p.id\n        delete p.role\n      })\n\n      cleanConvo.userMeta.forEach(function (meta) {\n        delete meta.userId\n      })\n\n      return res.json({ success: true, conversation: cleanConvo })\n    })\n  })\n}\n\nmodule.exports = apiMessages\n", "/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\ndefine('pages/messages', [\n  'jquery',\n  'underscore',\n  'angular',\n  'uikit',\n  'moment',\n  'modules/helpers',\n  'modules/socket',\n  'history',\n  'isinview'\n], function ($, _, angular, UIKit, moment, helpers) {\n  const messagesPage = {}\n\n  messagesPage.init = function (callback) {\n    $(document).ready(function () {\n      const $messageScroller = $('#message-content.scrollable')\n      const $messagesWrapper = $('#messages')\n      const $scrollspy = $('#conversation-scrollspy')\n      const $spinner = $scrollspy.find('i')\n      const $searchBox = $('.search-box').find('input')\n      let $nextPage = 2\n      let $enabled = true\n      let $loading = false\n      // $inview             = null,\n      const $recentMessages = {}\n      const $convoId = $('#message-content[data-conversation-id]').attr('data-conversation-id')\n      const $loggedInAccountId = window.trudeskSessionService.getUser()._id\n\n      setTimeout(function () {\n        $('script#preloader').remove()\n      }, 1000)\n\n      // Setup Context Menu\n      helpers.setupContextMenu('#convo-list > ul > li', function (action, target) {\n        let $li = $(target)\n        if (!$li.is('li')) {\n          $li = $(target).parents('li')\n        }\n        const convoId = $li.attr('data-conversation-id')\n        if (action.toLowerCase() === 'delete') {\n          UIKit.modal.confirm(\n            'Are you sure you want to delete this conversation?',\n            function () {\n              // Confirm\n              deleteConversation(convoId)\n            },\n            function () {\n              // Cancel\n            },\n            {\n              labels: {\n                Ok: 'YES'\n              },\n              confirmButtonClass: 'md-btn-danger'\n            }\n          )\n        }\n      })\n\n      $searchBox.off('keyup')\n      $searchBox.on('keyup', onSearchKeyUp)\n\n      $(window).off('$trudesk:ready.messages')\n      $(window).on('$trudesk:ready.messages', function () {\n        helpers.scrollToBottom($messageScroller)\n\n        // set active\n        if ($convoId !== undefined) {\n          const item = $('ul > li[data-conversation-id=\"' + $convoId + '\"]')\n          item.addClass('active')\n        }\n\n        // Remove All Chat Boxes\n        if (\n          $('#__page')\n            .text()\n            .toLowerCase() === 'messages'\n        ) {\n          $('.chat-box-position').each(function () {\n            const self = $(this)\n            self.remove()\n          })\n\n          $('.message-textbox')\n            .find('input')\n            .focus()\n\n          $messageScroller.scroll(function () {\n            if ($scrollspy.isInView($messageScroller)) {\n              const run = _.throttle(loadMoreMessages, 100)\n              run()\n            }\n          })\n        }\n      })\n\n      function deleteConversation (convoId) {\n        $.ajax({\n          url: '/api/v1/messages/conversation/' + convoId,\n          method: 'DELETE',\n          success: function (response) {\n            if (response.success) {\n              // Check if on conversation\n              const $convo = $('#message-content[data-conversation-id=\"' + response.conversation._id + '\"]')\n              if ($convo.length > 0) {\n                History.pushState(null, null, '/messages', false)\n              } else {\n                const $convoLI = $('#convo-list').find('li[data-conversation-id=\"' + response.conversation._id + '\"]')\n                if ($convoLI.length > 0) {\n                  $convoLI.remove()\n                }\n              }\n\n              $.event.trigger('$trudesk:chat:conversation:deleted', {\n                conversation: response.conversation\n              })\n\n              helpers.UI.showSnackbar('Conversation Deleted.', false)\n            }\n          },\n          error: function (error) {\n            console.log(error)\n          }\n        })\n      }\n\n      function onSearchKeyUp () {\n        const searchTerm = $searchBox.val().toLowerCase()\n        $('.all-user-list li').each(function () {\n          if ($(this).filter('[data-search-term *= ' + searchTerm + ']').length > 0 || searchTerm.length < 1) {\n            $(this).show()\n          } else {\n            $(this).hide()\n          }\n        })\n      }\n\n      function loadMoreMessages () {\n        if (!$enabled || $loading) return false\n        if (_.isUndefined($convoId)) return false\n        $loading = true\n        $spinner.removeClass('uk-hidden')\n\n        // Load Messages\n        $.ajax({\n          url: '/api/v1/messages/conversation/' + $convoId + '?page=' + $nextPage\n        })\n          .done(function (data) {\n            $spinner.addClass('uk-hidden')\n            const messages = data.messages\n            if (_.size(messages) < 1) {\n              $enabled = false\n              $loading = false\n              return false\n            }\n\n            let html = ''\n\n            _.each(messages, function (m) {\n              const h = buildMessageHTML(m)\n              if (h.length > 0) html += h\n            })\n\n            const stage = $('<div></div>')\n              .appendTo('body')\n              .addClass('stage')\n              .css({\n                opacity: 0,\n                visibility: 'hidden',\n                position: 'absolute',\n                top: '-9999em',\n                left: '-9999em'\n              })\n              .append(html)\n            const height = $(stage).outerHeight()\n            $(stage).remove()\n\n            $messagesWrapper.prepend(html)\n\n            UIKit.$html.trigger('changed.uk.dom')\n            $messageScroller.scrollTop(height, true)\n\n            $nextPage = $nextPage + 1\n            $loading = false\n          })\n          .error(function (err) {\n            console.log(err)\n          })\n      }\n\n      function buildMessageHTML (message) {\n        let html = ''\n        const loggedInAccountId = window.trudeskSessionService.getUser()._id\n        if (loggedInAccountId === undefined) return false\n        let left = true\n        if (message.owner._id.toString() === loggedInAccountId.toString()) {\n          left = false\n        }\n\n        const image = message.owner.image === undefined ? 'defaultProfile.jpg' : message.owner.image\n\n        if (left) {\n          html += '<div class=\"message message-left\">'\n          html +=\n            '<img class=\"profileImage\" src=\"/uploads/users/' +\n            image +\n            '\" data-userId=\"' +\n            message.owner._id +\n            '\" data-uk-tooltip=\"{pos:\\'left\\', animation: false}\" title=\"' +\n            message.owner.fullname +\n            ' - ' +\n            moment(message.createdAt)\n              .tz(helpers.getTimezone())\n              .format(helpers.getShortDateFormat() + ' ' + helpers.getTimeFormat()) +\n            '\"/>'\n          html += '<div class=\"message-body\">'\n          html += '<p>' + message.body + '</p>'\n          html += '</div>'\n          html += '</div>'\n        } else {\n          html += '<div class=\"message message-right\">'\n          html +=\n            '<div class=\"message-body\" data-uk-tooltip=\"{pos:\\'right\\', animation: false}\" title=\"' +\n            moment(message.createdAt)\n              .tz(helpers.getTimezone())\n              .format(helpers.getShortDateFormat() + ' ' + helpers.getTimeFormat()) +\n            '\">'\n          html += '<p>' + message.body + '</p>'\n          html += '</div>'\n          html += '</div>'\n        }\n\n        return html\n      }\n\n      // Remove all Events in the .conversation namespace for this page.\n      $(window).off('.conversation')\n\n      // On user Typing\n      $(window).on('$trudesk:chat:typing.conversation', function (event, data) {\n        const convoListItem = $('#convo-list').find('li[data-conversation-id=\"' + data.cid + '\"]')\n        if (convoListItem.length > 0) {\n          $recentMessages[data.cid] = convoListItem.find('.message-subject').text()\n          convoListItem.find('.message-subject').text(data.fromUser.fullname + ' is typing...')\n        }\n      })\n\n      $(window).on('$trudesk:chat:stoptyping.conversation', function (event, data) {\n        const convoListItem = $('#convo-list').find('li[data-conversation-id=\"' + data.cid + '\"]')\n        if (convoListItem.length > 0) {\n          convoListItem.find('.message-subject').text($recentMessages[data.cid])\n        }\n      })\n\n      // On Chat Message\n      $(window).on('$trudesk:chat:message.conversation', function (event, data) {\n        const message = {\n          _id: data.messageId,\n          conversation: data.conversation,\n          body: data.message,\n          owner: data.fromUser\n        }\n\n        const html = buildMessageHTML(message)\n        const messageWrapper = $('#message-content[data-conversation-id=\"' + message.conversation + '\"]')\n        if (messageWrapper.length > 0) {\n          messageWrapper.find('#messages').append(html)\n        }\n\n        const convoListItem = $('li[data-conversation-id=\"' + data.conversation + '\"]')\n        if (convoListItem.length > 0) {\n          convoListItem.attr('data-updatedAt', new Date())\n          const ul = convoListItem.parent('ul')\n          const li = ul.children('li')\n          li.detach().sort(function (a, b) {\n            return new Date($(a).attr('data-updatedAt')) < new Date($(b).attr('data-updatedAt'))\n          })\n\n          ul.append(li)\n\n          let fromName = message.owner.fullname\n          if (message.owner._id.toString() === $loggedInAccountId) {\n            fromName = 'You'\n          }\n\n          convoListItem.find('.message-subject').text(fromName + ': ' + message.body)\n          $recentMessages[message.conversation] = fromName + ': ' + message.body\n          const timezone = helpers.getTimezone()\n          convoListItem.find('.message-date').text(\n            moment\n              .utc()\n              .tz(timezone)\n              .calendar()\n          )\n        } else {\n          const convoUL = $('#convo-list > ul.message-items')\n          if (convoUL.length > 0) {\n            let partner = message.owner\n            if (message.owner._id.toString() === $loggedInAccountId.toString()) {\n              partner = data.toUser\n            }\n            const newLI = buildConversationListItem({\n              _id: message.conversation,\n              partner: partner,\n              updatedAt: new Date(),\n              recentMessage: message.owner.fullname + ': ' + message.body\n            })\n\n            const $injector = angular.injector(['ng', 'trudesk'])\n            $injector.invoke([\n              '$compile',\n              '$rootScope',\n              function ($compile, $rootScope) {\n                const $scope = convoUL.prepend(newLI).scope()\n                $compile(convoUL)($scope || $rootScope)\n                $rootScope.$digest()\n              }\n            ])\n          }\n        }\n\n        UIKit.$html.trigger('changed.uk.dom')\n        helpers.scrollToBottom($messageScroller)\n      })\n\n      function buildConversationListItem (data) {\n        let html = ''\n\n        html +=\n          '<li ng-click=\"loadConversation(\\'' +\n          data._id +\n          '\\');\" data-conversation-id=\"' +\n          data._id +\n          '\" data-updatedAt=\"' +\n          data.updatedAt +\n          '\">'\n        html += '<div class=\"profile-pic\">'\n        let imageUrl = 'defaultProfile.jpg'\n        if (data.partner.image) {\n          imageUrl = data.partner.image\n        }\n        html +=\n          '<img src=\"/uploads/users/' +\n          imageUrl +\n          '\" class=\"uk-border-circle profileImage\" data-userid=\"' +\n          data.partner._id +\n          '\" />'\n        html += '<span class=\"user-online uk-border-circle\" data-user-status-id=\"' + data.partner._id + '\"></span>'\n        html += '</div>'\n        html += '<div class=\"convo-info\">'\n        html += '<span class=\"message-from\">' + data.partner.fullname + '</span>'\n        html += '<span class=\"message-date\">' + moment(data.updatedAt).calendar() + '</span>'\n        html += '<span class=\"message-subject\">' + data.recentMessage + '</span>'\n        html += '</div>'\n        html += '</li>'\n\n        return html\n      }\n\n      if (typeof callback === 'function') {\n        return callback()\n      }\n    })\n  }\n\n  return messagesPage\n})\n"], "filenames": ["src/client/containers/Tickets/TicketsContainer.jsx", "src/controllers/api/v1/messages.js", "src/public/js/pages/messages.js"], "buggy_code_start_loc": [107, 17, 26], "buggy_code_end_loc": [108, 210, 360], "fixing_code_start_loc": [106, 17, 26], "fixing_code_end_loc": [106, 221, 353], "type": "CWE-662", "message": "Incorrect Synchronization in GitHub repository polonel/trudesk prior to 1.2.3.", "other": {"cve": {"id": "CVE-2022-1931", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-31T02:15:07.303", "lastModified": "2022-06-08T18:10:05.153", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Incorrect Synchronization in GitHub repository polonel/trudesk prior to 1.2.3."}, {"lang": "es", "value": "Una Sincronizaci\u00f3n Incorrecta en el repositorio de GitHub polonel/trudesk versiones anteriores a 1.2.3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-662"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-821"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:trudesk_project:trudesk:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.3", "matchCriteriaId": "D498F5B4-C37B-4226-A1FF-580B69B2AB0E"}]}]}], "references": [{"url": "https://github.com/polonel/trudesk/commit/314540864dbf2c0eaa99aa42c3d317de9501eb67", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/50c4cb63-65db-41c5-a16d-0560d7131fde", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/polonel/trudesk/commit/314540864dbf2c0eaa99aa42c3d317de9501eb67"}}