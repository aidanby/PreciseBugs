{"buggy_code": ["/*\n * Licensed to Jasig under one or more contributor license\n * agreements. See the NOTICE file distributed with this work\n * for additional information regarding copyright ownership.\n * Jasig licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a\n * copy of the License at:\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nusing System;\nusing System.Collections.Specialized;\nusing System.Text;\nusing System.Web;\n\nnamespace DotNetCasClient.Utils\n{\n    /// <summary>\n    /// An internal class used to generate and modify URLs\n    /// as needed for redirection and external communication.\n    /// </summary>\n    /// <remarks>\n    /// See https://wiki.jasig.org/display/CASC/UrlUtil+Methods for additional\n    /// information including sample output of each method.\n    /// </remarks>\n    /// <author>Scott Holodak</author>\n    public sealed class UrlUtil\n    {\n        /// <summary>\n        /// Constructs the URL to use for redirection to the CAS server for login\n        /// </summary>\n        /// <remarks>\n        /// The server name is not parsed from the request for security reasons, which\n        /// is why the service and server name configuration parameters exist.\n        /// </remarks>\n        /// <returns>The redirection URL to use</returns>\n        public static string ConstructLoginRedirectUrl(bool gateway, bool renew)\n        {\n            if (gateway && renew)\n            {\n                throw new ArgumentException(\"Gateway and Renew parameters are mutually exclusive and cannot both be True\");\n            }\n\n            CasAuthentication.Initialize();\n\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(CasAuthentication.FormsLoginUrl);\n            ub.QueryItems.Set(CasAuthentication.TicketValidator.ServiceParameterName, HttpUtility.UrlEncode(ConstructServiceUrl(gateway)));\n\n            if (renew)\n            {\n                ub.QueryItems.Add(\"renew\", \"true\");\n            }\n            else if (gateway)\n            {\n                ub.QueryItems.Add(\"gateway\", \"true\");\n            }\n\n            string url = ub.Uri.AbsoluteUri;\n\n            return url;\n        }\n\n        /// <summary>\n        /// Constructs a service URL using configured values in the following order:\n        /// 1.  if not empty, the value configured for Service is used\n        /// - otherwise -\n        /// 2.  the value configured for ServerName is used together with HttpRequest\n        ///     data\n        /// </summary>\n        /// <remarks>\n        /// The server name is not parsed from the request for security reasons, which\n        /// is why the service and server name configuration parameters exist, per Jasig\n        /// website.\n        /// </remarks>\n        /// <returns>the service URL to use, not encoded</returns>\n        public static string ConstructServiceUrl(bool gateway)\n        {\n            CasAuthentication.Initialize();\n\n            HttpContext context = HttpContext.Current;\n            HttpRequest request = context.Request;\n\n            StringBuilder buffer = new StringBuilder();\n            if (!(CasAuthentication.ServerName.StartsWith(\"https://\") || CasAuthentication.ServerName.StartsWith(\"http://\")))\n            {\n                buffer.Append(request.IsSecureConnection ? \"https://\" : \"http://\");\n            }\n            buffer.Append(CasAuthentication.ServerName);\n\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(buffer.ToString());\n            ub.Path = request.Url.AbsolutePath;\n            ub.QueryItems.Add(request.QueryString);\n            ub.QueryItems.Remove(CasAuthentication.TicketValidator.ServiceParameterName);\n            ub.QueryItems.Remove(CasAuthentication.TicketValidator.ArtifactParameterName);\n\n            if (gateway)\n            {\n                ub.QueryItems.Set(CasAuthentication.GatewayParameterName, \"true\");\n            }\n            else\n            {\n                ub.QueryItems.Remove(CasAuthentication.GatewayParameterName);\n            }\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Constructs a URL used to check the validitiy of a service ticket, with or without a proxy \n        /// callback URL, and with or without requiring renewed credentials.\n        /// </summary>\n        /// <remarks>See CAS Protocol specification, section 2.5</remarks>\n        /// <param name=\"serviceTicket\">The service ticket to validate.</param>\n        /// <param name=\"renew\">\n        /// Whether or not renewed credentials are required.  If True, ticket validation\n        /// will fail for Single Sign On credentials.\n        /// </param>\n        /// <param name=\"gateway\">\n        /// whether or not to include gatewayResponse=true in the request (client specific).\n        /// </param>\n        /// <param name=\"customParameters\">custom parameters to add to the validation URL</param>\n        /// <returns>The service ticket validation URL to use</returns>\n        public static string ConstructValidateUrl(string serviceTicket, bool gateway, bool renew, NameValueCollection customParameters)\n        {\n            if (gateway && renew)\n            {\n                throw new ArgumentException(\"Gateway and Renew parameters are mutually exclusive and cannot both be True\");\n            }\n\n            CasAuthentication.Initialize();\n\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(EnhancedUriBuilder.Combine(CasAuthentication.CasServerUrlPrefix, CasAuthentication.TicketValidator.UrlSuffix));\n            ub.QueryItems.Add(CasAuthentication.TicketValidator.ServiceParameterName, HttpUtility.UrlEncode(ConstructServiceUrl(gateway)));\n            ub.QueryItems.Add(CasAuthentication.TicketValidator.ArtifactParameterName, serviceTicket);\n\n            if (renew)\n            {\n                ub.QueryItems.Set(\"renew\", \"true\");\n            }\n\n            if (customParameters != null)\n            {\n                for (int i = 0; i < customParameters.Count; i++)\n                {\n                    string key = customParameters.AllKeys[i];\n                    string value = customParameters[i];\n\n                    ub.QueryItems.Add(key, value);\n                }\n            }\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Constructs a proxy callback URL containing a ProxyCallbackParameter \n        /// (proxyResponse by default).  This URL is sent to the CAS server during a proxy\n        /// ticket request and is then connected to by the CAS server. If the 'CasProxyCallbackUrl' settings is specified,\n        /// its value will be used to construct the proxy url. Otherwise, `ServerName` will be used.\n        /// If the CAS server cannot successfully connect (generally due to SSL configuration issues), the\n        /// CAS server will refuse to send a proxy ticket. \n        /// </summary>\n        /// <returns>the proxy callback URL to use</returns>\n        public static string ConstructProxyCallbackUrl(bool gateway)\n        {\n            CasAuthentication.Initialize();\n\n            HttpContext context = HttpContext.Current;\n            HttpRequest request = context.Request;\n\n            EnhancedUriBuilder ub = null;\n            if (CasAuthentication.CasProxyCallbackUrl != null && CasAuthentication.CasProxyCallbackUrl.Length > 0)\n            {\n                ub = new EnhancedUriBuilder(CasAuthentication.CasProxyCallbackUrl);\n            }\n            else\n            {\n                ub = new EnhancedUriBuilder(CasAuthentication.ServerName);\n            }\n            ub.Path = request.Url.AbsolutePath;\n            ub.QueryItems.Add(request.QueryString);\n            ub.QueryItems.Remove(CasAuthentication.TicketValidator.ArtifactParameterName);\n\n            if (gateway)\n            {\n                ub.QueryItems.Set(CasAuthentication.GatewayParameterName, \"true\");\n            }\n            else\n            {\n                ub.QueryItems.Remove(CasAuthentication.GatewayParameterName);\n            }\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Constructs a proxy callback URL containing a ProxyCallbackParameter \n        /// (proxyResponse by default).  This URL is sent to the CAS server during a proxy\n        /// ticket request and is then connected to by the CAS server.  If the CAS server\n        /// cannot successfully connect (generally due to SSL configuration issues), the\n        /// CAS server will refuse to send a proxy ticket. \n        /// </summary>\n        /// <remarks>\n        /// This is a .NET implementation specific method used to eliminate the need for \n        /// a special HTTP Handler.  Essentially, if the client detects an incoming request\n        /// with the ProxyCallbackParameter in the URL (i.e., proxyResponse), that request \n        /// is treated specially and behaves as if it were handled by an HTTP Handler.  In \n        /// other words, this behavior may or may not short circuit the request event \n        /// processing and will not allow the underlying page to execute and transmit back to\n        /// the client.  If your application does coincidentally make use of the key \n        /// 'proxyResponse' as a URL parameter, you will need to configure a custom \n        /// proxyCallbackParameter value which does not conflict with the URL parameters in\n        /// your application.\n        /// </remarks>\n        /// <returns>the proxy callback URL to use</returns>\n        public static string ConstructProxyCallbackUrl()\n        {\n            CasAuthentication.Initialize();\n\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(ConstructProxyCallbackUrl(false));\n            ub.QueryItems.Set(CasAuthentication.ProxyCallbackParameterName, \"true\");\n\n            return ub.Uri.AbsoluteUri;\n        }\n        \n        /// <summary>\n        /// Constructs a proxy ticket request URL containing both a proxy granting \n        /// ticket and a URL Encoded targetServiceUrl.  The URL returned will generally only\n        /// be executed by the CAS client as a part of a proxy redirection in \n        /// CasAuthentication.ProxyRedirect(...) or CasAuthentication.GetProxyTicketIdFor(...)\n        /// but may also be used by applications which require low-level access to the proxy\n        /// ticket request functionality.\n        /// </summary>\n        /// <param name=\"proxyGrantingTicketId\">\n        /// The proxy granting ticket used to authorize the request for a proxy ticket on the \n        /// CAS server\n        /// </param>\n        /// <param name=\"targetService\">\n        /// The target service URL to request a proxy ticket request URL for\n        /// </param>\n        /// <returns>The URL to use to request a proxy ticket for the targetService specified</returns>\n        public static string ConstructProxyTicketRequestUrl(string proxyGrantingTicketId, string targetService)\n        {\n            CasAuthentication.Initialize();\n\n            if (String.IsNullOrEmpty(proxyGrantingTicketId))\n            {\n                throw new ArgumentException(\"For proxy ticket requests, proxyGrantingTicketId cannot be null and must be specified.\");\n            }\n\n            if (String.IsNullOrEmpty(targetService))\n            {\n                throw new ArgumentException(\"For proxy ticket requests, targetService cannot be null and must be specified.\");\n            }\n\n            // TODO: Make \"proxy\" configurable.\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(EnhancedUriBuilder.Combine(CasAuthentication.CasServerUrlPrefix, \"proxy\"));\n            ub.QueryItems.Add(\"pgt\", proxyGrantingTicketId);\n            ub.QueryItems.Add(\"targetService\", HttpUtility.UrlEncode(targetService));\n\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Attempts to request a proxy ticket for the targetService specified and\n        /// returns a URL appropriate for redirection to the targetService containing\n        /// a ticket.\n        /// </summary>\n        /// <param name=\"targetService\">The target service for proxy authentication</param>\n        /// <returns>The URL of the target service with a proxy ticket included</returns>\n        public static string GetProxyRedirectUrl(string targetService)\n        {\n            return GetProxyRedirectUrl(targetService, CasAuthentication.TicketValidator.ArtifactParameterName);\n        }\n\n        /// <summary>\n        /// Attempts to request a proxy ticket for the targetService specified and\n        /// returns a URL appropriate for redirection to the targetService containing\n        /// a ticket.\n        /// </summary>\n        /// <param name=\"targetService\">The target service for proxy authentication</param>\n        /// <param name=\"proxyTicketUrlParameter\">\n        /// The name of the ticket URL parameter expected by the target service (ticket by\n        /// default)\n        /// </param>\n        /// <returns>The URL of the target service with a proxy ticket included</returns>\n        public static string GetProxyRedirectUrl(string targetService, string proxyTicketUrlParameter)\n        {\n            CasAuthentication.Initialize();\n            \n            // Todo: Is ResolveUrl(...) appropriate/necessary?  If the URL starts with ~, it shouldn't require proxy authentication\n            string resolvedUrl = ResolveUrl(targetService);\n            string proxyTicket = CasAuthentication.GetProxyTicketIdFor(resolvedUrl);\n\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(resolvedUrl);\n            ub.QueryItems[proxyTicketUrlParameter] = proxyTicket;\n\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Constructs the URL to use for redirection to the CAS server for single\n        /// signout.  The CAS server will invalidate the ticket granting ticket and\n        /// redirect back to the current page.  The web application must then call\n        /// ClearAuthCookie and revoke the ticket from the ServiceTicketManager to sign \n        /// the client out.\n        /// </summary>\n        /// <returns>the redirection URL to use, not encoded</returns>\n        public static string ConstructSingleSignOutRedirectUrl()\n        {\n            CasAuthentication.Initialize();\n\n            // TODO: Make \"logout\" configurable\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(EnhancedUriBuilder.Combine(CasAuthentication.CasServerUrlPrefix, \"logout\"));\n            ub.QueryItems.Set(CasAuthentication.TicketValidator.ServiceParameterName, HttpUtility.UrlEncode(ConstructServiceUrl(false)));\n\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Returns a copy of the URL supplied modified to remove CAS protocol-specific\n        /// URL parameters.\n        /// </summary>\n        /// <param name=\"url\">The URL to remove CAS artifacts from</param>\n        /// <returns>The URL supplied without CAS artifacts</returns>\n        public static string RemoveCasArtifactsFromUrl(string url)\n        {\n            CommonUtils.AssertNotNullOrEmpty(url, \"url parameter can not be null or empty.\");\n\n            CasAuthentication.Initialize();\n\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(url);\n            ub.QueryItems.Remove(CasAuthentication.TicketValidator.ArtifactParameterName);\n            ub.QueryItems.Remove(CasAuthentication.TicketValidator.ServiceParameterName);\n            ub.QueryItems.Remove(CasAuthentication.GatewayParameterName);\n            ub.QueryItems.Remove(CasAuthentication.ProxyCallbackParameterName);\n            \n            // ++ NETC-28\n            Uri uriServerName;\n            if (CasAuthentication.ServerName.StartsWith(\"http://\", StringComparison.InvariantCultureIgnoreCase) ||\n                CasAuthentication.ServerName.StartsWith(\"https://\", StringComparison.InvariantCultureIgnoreCase))\n            {\n                uriServerName = new Uri(CasAuthentication.ServerName);\n            }\n            else\n            {\n                // .NET URIs require scheme\n                uriServerName = new Uri(\"https://\" + CasAuthentication.ServerName);\n            }\n\n            ub.Scheme = uriServerName.Scheme;\n            ub.Host = uriServerName.Host;\n            ub.Port = uriServerName.Port;\n\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Resolves a relative ~/Url to a Url that is meaningful to the\n        /// client.\n        /// <remarks>\n        /// Derived from: http://weblogs.asp.net/palermo4/archive/2004/06/18/getting-the-absolute-path-in-asp-net-part-2.aspx\n        /// </remarks>        \n        /// </summary>\n        /// <author>J. Michael Palermo IV</author>\n        /// <author>Scott Holodak</author>\n        /// <param name=\"url\">The Url to resolve</param>\n        /// <returns>The fullly resolved Url</returns>\n        internal static string ResolveUrl(string url)\n        {\n            CommonUtils.AssertNotNullOrEmpty(url, \"url parameter can not be null or empty.\");\n            if (url[0] != '~') return url;\n\n            CasAuthentication.Initialize();\n\n            string applicationPath = HttpContext.Current.Request.ApplicationPath;\n            if (url.Length == 1) return applicationPath;\n\n            // assume url looks like ~somePage \n            int indexOfUrl = 1;\n\n            // determine the middle character \n            string midPath = ((applicationPath ?? string.Empty).Length > 1) ? \"/\" : string.Empty;\n\n            // if url looks like ~/ or ~\\ change the indexOfUrl to 2 \n            if (url[1] == '/' || url[1] == '\\\\') indexOfUrl = 2;\n\n            return applicationPath + midPath + url.Substring(indexOfUrl);\n        }    \n    }\n}\n"], "fixing_code": ["/*\n * Licensed to Jasig under one or more contributor license\n * agreements. See the NOTICE file distributed with this work\n * for additional information regarding copyright ownership.\n * Jasig licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a\n * copy of the License at:\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nusing System;\nusing System.Collections.Specialized;\nusing System.Text;\nusing System.Web;\n\nnamespace DotNetCasClient.Utils\n{\n    /// <summary>\n    /// An internal class used to generate and modify URLs\n    /// as needed for redirection and external communication.\n    /// </summary>\n    /// <remarks>\n    /// See https://wiki.jasig.org/display/CASC/UrlUtil+Methods for additional\n    /// information including sample output of each method.\n    /// </remarks>\n    /// <author>Scott Holodak</author>\n    public sealed class UrlUtil\n    {\n        /// <summary>\n        /// Constructs the URL to use for redirection to the CAS server for login\n        /// </summary>\n        /// <remarks>\n        /// The server name is not parsed from the request for security reasons, which\n        /// is why the service and server name configuration parameters exist.\n        /// </remarks>\n        /// <returns>The redirection URL to use</returns>\n        public static string ConstructLoginRedirectUrl(bool gateway, bool renew)\n        {\n            if (gateway && renew)\n            {\n                throw new ArgumentException(\"Gateway and Renew parameters are mutually exclusive and cannot both be True\");\n            }\n\n            CasAuthentication.Initialize();\n\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(CasAuthentication.FormsLoginUrl);\n            ub.QueryItems.Set(CasAuthentication.TicketValidator.ServiceParameterName, HttpUtility.UrlEncode(ConstructServiceUrl(gateway)));\n\n            if (renew)\n            {\n                ub.QueryItems.Add(\"renew\", \"true\");\n            }\n            else if (gateway)\n            {\n                ub.QueryItems.Add(\"gateway\", \"true\");\n            }\n\n            string url = ub.Uri.AbsoluteUri;\n\n            return url;\n        }\n\n        /// <summary>\n        /// Constructs a service URL using configured values in the following order:\n        /// 1.  if not empty, the value configured for Service is used\n        /// - otherwise -\n        /// 2.  the value configured for ServerName is used together with HttpRequest\n        ///     data\n        /// </summary>\n        /// <remarks>\n        /// The server name is not parsed from the request for security reasons, which\n        /// is why the service and server name configuration parameters exist, per Jasig\n        /// website.\n        /// </remarks>\n        /// <returns>the service URL to use, not encoded</returns>\n        public static string ConstructServiceUrl(bool gateway)\n        {\n            CasAuthentication.Initialize();\n\n            HttpContext context = HttpContext.Current;\n            HttpRequest request = context.Request;\n\n            StringBuilder buffer = new StringBuilder();\n            if (!(CasAuthentication.ServerName.StartsWith(\"https://\") || CasAuthentication.ServerName.StartsWith(\"http://\")))\n            {\n                buffer.Append(request.IsSecureConnection ? \"https://\" : \"http://\");\n            }\n            buffer.Append(CasAuthentication.ServerName);\n\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(buffer.ToString());\n            ub.Path = request.Url.AbsolutePath;\n            ub.QueryItems.Add(request.QueryString);\n            ub.QueryItems.Remove(CasAuthentication.TicketValidator.ServiceParameterName);\n            ub.QueryItems.Remove(CasAuthentication.TicketValidator.ArtifactParameterName);\n\n            if (gateway)\n            {\n                ub.QueryItems.Set(CasAuthentication.GatewayParameterName, \"true\");\n            }\n            else\n            {\n                ub.QueryItems.Remove(CasAuthentication.GatewayParameterName);\n            }\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Constructs a URL used to check the validitiy of a service ticket, with or without a proxy \n        /// callback URL, and with or without requiring renewed credentials.\n        /// </summary>\n        /// <remarks>See CAS Protocol specification, section 2.5</remarks>\n        /// <param name=\"serviceTicket\">The service ticket to validate.</param>\n        /// <param name=\"renew\">\n        /// Whether or not renewed credentials are required.  If True, ticket validation\n        /// will fail for Single Sign On credentials.\n        /// </param>\n        /// <param name=\"gateway\">\n        /// whether or not to include gatewayResponse=true in the request (client specific).\n        /// </param>\n        /// <param name=\"customParameters\">custom parameters to add to the validation URL</param>\n        /// <returns>The service ticket validation URL to use</returns>\n        public static string ConstructValidateUrl(string serviceTicket, bool gateway, bool renew, NameValueCollection customParameters)\n        {\n            if (gateway && renew)\n            {\n                throw new ArgumentException(\"Gateway and Renew parameters are mutually exclusive and cannot both be True\");\n            }\n\n            CasAuthentication.Initialize();\n\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(EnhancedUriBuilder.Combine(CasAuthentication.CasServerUrlPrefix, CasAuthentication.TicketValidator.UrlSuffix));\n            ub.QueryItems.Add(CasAuthentication.TicketValidator.ServiceParameterName, HttpUtility.UrlEncode(ConstructServiceUrl(gateway)));\n            ub.QueryItems.Add(CasAuthentication.TicketValidator.ArtifactParameterName, HttpUtility.UrlEncode(serviceTicket));\n\n            if (renew)\n            {\n                ub.QueryItems.Set(\"renew\", \"true\");\n            }\n\n            if (customParameters != null)\n            {\n                for (int i = 0; i < customParameters.Count; i++)\n                {\n                    string key = customParameters.AllKeys[i];\n                    string value = customParameters[i];\n\n                    ub.QueryItems.Add(key, value);\n                }\n            }\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Constructs a proxy callback URL containing a ProxyCallbackParameter \n        /// (proxyResponse by default).  This URL is sent to the CAS server during a proxy\n        /// ticket request and is then connected to by the CAS server. If the 'CasProxyCallbackUrl' settings is specified,\n        /// its value will be used to construct the proxy url. Otherwise, `ServerName` will be used.\n        /// If the CAS server cannot successfully connect (generally due to SSL configuration issues), the\n        /// CAS server will refuse to send a proxy ticket. \n        /// </summary>\n        /// <returns>the proxy callback URL to use</returns>\n        public static string ConstructProxyCallbackUrl(bool gateway)\n        {\n            CasAuthentication.Initialize();\n\n            HttpContext context = HttpContext.Current;\n            HttpRequest request = context.Request;\n\n            EnhancedUriBuilder ub = null;\n            if (CasAuthentication.CasProxyCallbackUrl != null && CasAuthentication.CasProxyCallbackUrl.Length > 0)\n            {\n                ub = new EnhancedUriBuilder(CasAuthentication.CasProxyCallbackUrl);\n            }\n            else\n            {\n                ub = new EnhancedUriBuilder(CasAuthentication.ServerName);\n            }\n            ub.Path = request.Url.AbsolutePath;\n            ub.QueryItems.Add(request.QueryString);\n            ub.QueryItems.Remove(CasAuthentication.TicketValidator.ArtifactParameterName);\n\n            if (gateway)\n            {\n                ub.QueryItems.Set(CasAuthentication.GatewayParameterName, \"true\");\n            }\n            else\n            {\n                ub.QueryItems.Remove(CasAuthentication.GatewayParameterName);\n            }\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Constructs a proxy callback URL containing a ProxyCallbackParameter \n        /// (proxyResponse by default).  This URL is sent to the CAS server during a proxy\n        /// ticket request and is then connected to by the CAS server.  If the CAS server\n        /// cannot successfully connect (generally due to SSL configuration issues), the\n        /// CAS server will refuse to send a proxy ticket. \n        /// </summary>\n        /// <remarks>\n        /// This is a .NET implementation specific method used to eliminate the need for \n        /// a special HTTP Handler.  Essentially, if the client detects an incoming request\n        /// with the ProxyCallbackParameter in the URL (i.e., proxyResponse), that request \n        /// is treated specially and behaves as if it were handled by an HTTP Handler.  In \n        /// other words, this behavior may or may not short circuit the request event \n        /// processing and will not allow the underlying page to execute and transmit back to\n        /// the client.  If your application does coincidentally make use of the key \n        /// 'proxyResponse' as a URL parameter, you will need to configure a custom \n        /// proxyCallbackParameter value which does not conflict with the URL parameters in\n        /// your application.\n        /// </remarks>\n        /// <returns>the proxy callback URL to use</returns>\n        public static string ConstructProxyCallbackUrl()\n        {\n            CasAuthentication.Initialize();\n\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(ConstructProxyCallbackUrl(false));\n            ub.QueryItems.Set(CasAuthentication.ProxyCallbackParameterName, \"true\");\n\n            return ub.Uri.AbsoluteUri;\n        }\n        \n        /// <summary>\n        /// Constructs a proxy ticket request URL containing both a proxy granting \n        /// ticket and a URL Encoded targetServiceUrl.  The URL returned will generally only\n        /// be executed by the CAS client as a part of a proxy redirection in \n        /// CasAuthentication.ProxyRedirect(...) or CasAuthentication.GetProxyTicketIdFor(...)\n        /// but may also be used by applications which require low-level access to the proxy\n        /// ticket request functionality.\n        /// </summary>\n        /// <param name=\"proxyGrantingTicketId\">\n        /// The proxy granting ticket used to authorize the request for a proxy ticket on the \n        /// CAS server\n        /// </param>\n        /// <param name=\"targetService\">\n        /// The target service URL to request a proxy ticket request URL for\n        /// </param>\n        /// <returns>The URL to use to request a proxy ticket for the targetService specified</returns>\n        public static string ConstructProxyTicketRequestUrl(string proxyGrantingTicketId, string targetService)\n        {\n            CasAuthentication.Initialize();\n\n            if (String.IsNullOrEmpty(proxyGrantingTicketId))\n            {\n                throw new ArgumentException(\"For proxy ticket requests, proxyGrantingTicketId cannot be null and must be specified.\");\n            }\n\n            if (String.IsNullOrEmpty(targetService))\n            {\n                throw new ArgumentException(\"For proxy ticket requests, targetService cannot be null and must be specified.\");\n            }\n\n            // TODO: Make \"proxy\" configurable.\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(EnhancedUriBuilder.Combine(CasAuthentication.CasServerUrlPrefix, \"proxy\"));\n            ub.QueryItems.Add(\"pgt\", proxyGrantingTicketId);\n            ub.QueryItems.Add(\"targetService\", HttpUtility.UrlEncode(targetService));\n\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Attempts to request a proxy ticket for the targetService specified and\n        /// returns a URL appropriate for redirection to the targetService containing\n        /// a ticket.\n        /// </summary>\n        /// <param name=\"targetService\">The target service for proxy authentication</param>\n        /// <returns>The URL of the target service with a proxy ticket included</returns>\n        public static string GetProxyRedirectUrl(string targetService)\n        {\n            return GetProxyRedirectUrl(targetService, CasAuthentication.TicketValidator.ArtifactParameterName);\n        }\n\n        /// <summary>\n        /// Attempts to request a proxy ticket for the targetService specified and\n        /// returns a URL appropriate for redirection to the targetService containing\n        /// a ticket.\n        /// </summary>\n        /// <param name=\"targetService\">The target service for proxy authentication</param>\n        /// <param name=\"proxyTicketUrlParameter\">\n        /// The name of the ticket URL parameter expected by the target service (ticket by\n        /// default)\n        /// </param>\n        /// <returns>The URL of the target service with a proxy ticket included</returns>\n        public static string GetProxyRedirectUrl(string targetService, string proxyTicketUrlParameter)\n        {\n            CasAuthentication.Initialize();\n            \n            // Todo: Is ResolveUrl(...) appropriate/necessary?  If the URL starts with ~, it shouldn't require proxy authentication\n            string resolvedUrl = ResolveUrl(targetService);\n            string proxyTicket = CasAuthentication.GetProxyTicketIdFor(resolvedUrl);\n\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(resolvedUrl);\n            ub.QueryItems[proxyTicketUrlParameter] = proxyTicket;\n\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Constructs the URL to use for redirection to the CAS server for single\n        /// signout.  The CAS server will invalidate the ticket granting ticket and\n        /// redirect back to the current page.  The web application must then call\n        /// ClearAuthCookie and revoke the ticket from the ServiceTicketManager to sign \n        /// the client out.\n        /// </summary>\n        /// <returns>the redirection URL to use, not encoded</returns>\n        public static string ConstructSingleSignOutRedirectUrl()\n        {\n            CasAuthentication.Initialize();\n\n            // TODO: Make \"logout\" configurable\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(EnhancedUriBuilder.Combine(CasAuthentication.CasServerUrlPrefix, \"logout\"));\n            ub.QueryItems.Set(CasAuthentication.TicketValidator.ServiceParameterName, HttpUtility.UrlEncode(ConstructServiceUrl(false)));\n\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Returns a copy of the URL supplied modified to remove CAS protocol-specific\n        /// URL parameters.\n        /// </summary>\n        /// <param name=\"url\">The URL to remove CAS artifacts from</param>\n        /// <returns>The URL supplied without CAS artifacts</returns>\n        public static string RemoveCasArtifactsFromUrl(string url)\n        {\n            CommonUtils.AssertNotNullOrEmpty(url, \"url parameter can not be null or empty.\");\n\n            CasAuthentication.Initialize();\n\n            EnhancedUriBuilder ub = new EnhancedUriBuilder(url);\n            ub.QueryItems.Remove(CasAuthentication.TicketValidator.ArtifactParameterName);\n            ub.QueryItems.Remove(CasAuthentication.TicketValidator.ServiceParameterName);\n            ub.QueryItems.Remove(CasAuthentication.GatewayParameterName);\n            ub.QueryItems.Remove(CasAuthentication.ProxyCallbackParameterName);\n            \n            // ++ NETC-28\n            Uri uriServerName;\n            if (CasAuthentication.ServerName.StartsWith(\"http://\", StringComparison.InvariantCultureIgnoreCase) ||\n                CasAuthentication.ServerName.StartsWith(\"https://\", StringComparison.InvariantCultureIgnoreCase))\n            {\n                uriServerName = new Uri(CasAuthentication.ServerName);\n            }\n            else\n            {\n                // .NET URIs require scheme\n                uriServerName = new Uri(\"https://\" + CasAuthentication.ServerName);\n            }\n\n            ub.Scheme = uriServerName.Scheme;\n            ub.Host = uriServerName.Host;\n            ub.Port = uriServerName.Port;\n\n            return ub.Uri.AbsoluteUri;\n        }\n\n        /// <summary>\n        /// Resolves a relative ~/Url to a Url that is meaningful to the\n        /// client.\n        /// <remarks>\n        /// Derived from: http://weblogs.asp.net/palermo4/archive/2004/06/18/getting-the-absolute-path-in-asp-net-part-2.aspx\n        /// </remarks>        \n        /// </summary>\n        /// <author>J. Michael Palermo IV</author>\n        /// <author>Scott Holodak</author>\n        /// <param name=\"url\">The Url to resolve</param>\n        /// <returns>The fullly resolved Url</returns>\n        internal static string ResolveUrl(string url)\n        {\n            CommonUtils.AssertNotNullOrEmpty(url, \"url parameter can not be null or empty.\");\n            if (url[0] != '~') return url;\n\n            CasAuthentication.Initialize();\n\n            string applicationPath = HttpContext.Current.Request.ApplicationPath;\n            if (url.Length == 1) return applicationPath;\n\n            // assume url looks like ~somePage \n            int indexOfUrl = 1;\n\n            // determine the middle character \n            string midPath = ((applicationPath ?? string.Empty).Length > 1) ? \"/\" : string.Empty;\n\n            // if url looks like ~/ or ~\\ change the indexOfUrl to 2 \n            if (url[1] == '/' || url[1] == '\\\\') indexOfUrl = 2;\n\n            return applicationPath + midPath + url.Substring(indexOfUrl);\n        }    \n    }\n}\n"], "filenames": ["DotNetCasClient/Utils/UrlUtil.cs"], "buggy_code_start_loc": [142], "buggy_code_end_loc": [143], "fixing_code_start_loc": [142], "fixing_code_end_loc": [143], "type": "CWE-74", "message": "A URL parameter injection vulnerability was found in the back-channel ticket validation step of the CAS protocol in Jasig Java CAS Client before 3.3.2, .NET CAS Client before 1.0.2, and phpCAS before 1.3.3 that allow remote attackers to inject arbitrary web script or HTML via the (1) service parameter to validation/AbstractUrlBasedTicketValidator.java or (2) pgtUrl parameter to validation/Cas20ServiceTicketValidator.java.", "other": {"cve": {"id": "CVE-2014-4172", "sourceIdentifier": "cve@mitre.org", "published": "2020-01-24T19:15:12.010", "lastModified": "2020-02-12T15:18:54.907", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A URL parameter injection vulnerability was found in the back-channel ticket validation step of the CAS protocol in Jasig Java CAS Client before 3.3.2, .NET CAS Client before 1.0.2, and phpCAS before 1.3.3 that allow remote attackers to inject arbitrary web script or HTML via the (1) service parameter to validation/AbstractUrlBasedTicketValidator.java or (2) pgtUrl parameter to validation/Cas20ServiceTicketValidator.java."}, {"lang": "es", "value": "Se detect\u00f3 una vulnerabilidad de inyecci\u00f3n de par\u00e1metros de URL en el paso de validaci\u00f3n de tickets del canal posterior del protocolo CAS en Jasig Java CAS Client versiones anteriores a 3.3.2, .NET CAS Client versiones anteriores a 1.0.2 y phpCAS versiones anteriores a 1.3.3, que permiten a atacantes remotos inyectar script web o HTML arbitrario por medio del (1) par\u00e1metro service en el archivo validation/AbstractUrlBasedTicketValidator.java o del (2) par\u00e1metro pgtUrl en el archivo validation/Cas20ServiceTicketValidator.java."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:apereo:.net_cas_client:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.2", "matchCriteriaId": "D0D3881B-F7F5-4E0F-B76F-EFA42ECB0E75"}, {"vulnerable": true, "criteria": "cpe:2.3:a:apereo:java_cas_client:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.3.2", "matchCriteriaId": "3A6BA56C-70FF-46A7-8648-E412BEA54EB9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:apereo:phpcas:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.3", "matchCriteriaId": "949AB748-0980-4F16-8031-42A413597117"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "16F59A04-14CF-49E2-9973-645477EA09DA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:20:*:*:*:*:*:*:*", "matchCriteriaId": "FF47C9F0-D8DA-4B55-89EB-9B2C9383ADB9"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2014-August/137182.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=759718", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1131350", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/95673", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/Jasig/dotnet-cas-client/commit/f0e030014fb7a39e5f38469f43199dc590fd0e8d", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Jasig/java-cas-client/commit/ae37092100c8eaec610dab6d83e5e05a8ee58814", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Jasig/phpCAS/blob/master/docs/ChangeLog", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/Jasig/phpCAS/pull/125", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://issues.jasig.org/browse/CASC-228", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2014/dsa-3017.en.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.mail-archive.com/cas-user@lists.jasig.org/msg17338.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Jasig/dotnet-cas-client/commit/f0e030014fb7a39e5f38469f43199dc590fd0e8d"}}