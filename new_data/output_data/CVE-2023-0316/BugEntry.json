{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor;\n\nuse Exception;\nuse Froxlor\\Database\\Database;\nuse PDO;\n\n/**\n * Class SImExporter\n *\n * Import/Export settings to JSON\n */\nclass SImExporter\n{\n\t/**\n\t * settings which are not being exported\n\t *\n\t * @var array\n\t */\n\tprivate static $no_export = [\n\t\t'panel.adminmail',\n\t\t'admin.show_news_feed',\n\t\t'system.lastaccountnumber',\n\t\t'system.lastguid',\n\t\t'system.ipaddress',\n\t\t'system.last_traffic_run',\n\t\t'system.hostname',\n\t\t'system.mysql_access_host',\n\t\t'system.lastcronrun',\n\t\t'system.defaultip',\n\t\t'system.defaultsslip',\n\t\t'system.last_tasks_run',\n\t\t'system.last_archive_run',\n\t\t'system.leprivatekey',\n\t\t'system.lepublickey'\n\t];\n\n\tpublic static function export()\n\t{\n\t\t$settings_definitions = [];\n\t\tforeach (PhpHelper::loadConfigArrayDir('./actions/admin/settings/')['groups'] as $group) {\n\t\t\tforeach ($group['fields'] as $field) {\n\t\t\t\t$settings_definitions[$field['settinggroup']][$field['varname']] = $field;\n\t\t\t}\n\t\t}\n\n\t\t$result_stmt = Database::query(\"\n\t\t\tSELECT * FROM `\" . TABLE_PANEL_SETTINGS . \"` ORDER BY `settingid` ASC\n\t\t\");\n\t\t$_data = [];\n\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t$index = $row['settinggroup'] . \".\" . $row['varname'];\n\t\t\tif (!in_array($index, self::$no_export)) {\n\t\t\t\t$_data[$index] = $row['value'];\n\t\t\t}\n\n\t\t\tif (array_key_exists($row['settinggroup'], $settings_definitions) && array_key_exists($row['varname'], $settings_definitions[$row['settinggroup']])) {\n\t\t\t\t// Export image file\n\t\t\t\tif ($settings_definitions[$row['settinggroup']][$row['varname']]['type'] === \"image\") {\n\t\t\t\t\tif ($row['value'] === \"\") {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$_data[$index . '.image_data'] = base64_encode(file_get_contents(explode('?', $row['value'], 2)[0]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// add checksum for validation\n\t\t$_data['_sha'] = sha1(var_export($_data, true));\n\t\t$_export = json_encode($_data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);\n\t\tif (!$_export) {\n\t\t\tthrow new Exception(\"Error exporting settings: \" . json_last_error_msg());\n\t\t}\n\n\t\treturn $_export;\n\t}\n\n\tpublic static function import($json_str = null)\n\t{\n\t\t// decode data\n\t\t$_data = json_decode($json_str, true);\n\t\tif ($_data) {\n\t\t\t// get validity check data\n\t\t\t$_sha = isset($_data['_sha']) ? $_data['_sha'] : false;\n\t\t\t$_version = isset($_data['panel.version']) ? $_data['panel.version'] : false;\n\t\t\t$_dbversion = isset($_data['panel.db_version']) ? $_data['panel.db_version'] : false;\n\t\t\t// check if we have everything we need\n\t\t\tif (!$_sha || !$_version || !$_dbversion) {\n\t\t\t\tthrow new Exception(\"Invalid froxlor settings data. Unable to import.\");\n\t\t\t}\n\t\t\t// validate import file\n\t\t\tunset($_data['_sha']);\n\t\t\t// compare\n\t\t\tif ($_sha != sha1(var_export($_data, true))) {\n\t\t\t\tthrow new Exception(\"SHA check of import data failed. Unable to import.\");\n\t\t\t}\n\t\t\t// do not import version info - but we need that to possibly update settings\n\t\t\t// when there were changes in the variable-name or similar\n\t\t\tunset($_data['panel.version']);\n\t\t\tunset($_data['panel.db_version']);\n\t\t\t// validate we got ssl enabled ips when ssl is enabled\n\t\t\t// otherwise deactivate it\n\t\t\tif ($_data['system.use_ssl'] == 1) {\n\t\t\t\t$result_ssl_ipsandports_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(*) as count_ssl_ip FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='1'\n\t\t\t\t\");\n\t\t\t\t$result = Database::pexecute_first($result_ssl_ipsandports_stmt);\n\t\t\t\tif ($result['count_ssl_ip'] <= 0) {\n\t\t\t\t\t// no ssl-ip -> deactivate\n\t\t\t\t\t$_data['system.use_ssl'] = 0;\n\t\t\t\t\t// deactivate other ssl-related settings\n\t\t\t\t\t$_data['system.leenabled'] = 0;\n\t\t\t\t\t$_data['system.le_froxlor_enabled'] = 0;\n\t\t\t\t\t$_data['system.le_froxlor_redirect'] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// store new data\n\t\t\tforeach ($_data as $index => $value) {\n\t\t\t\t$index_split = explode('.', $index, 3);\n\n\t\t\t\t// Catch image_data and save it\n\t\t\t\tif (isset($index_split[2]) && $index_split[2] === 'image_data' && !empty($_data[$index_split[0] . '.' . $index_split[1]])) {\n\t\t\t\t\t$path = Froxlor::getInstallDir() . '/img/';\n\t\t\t\t\tif (!is_dir($path) && !mkdir($path, 0775)) {\n\t\t\t\t\t\tthrow new Exception(\"img directory does not exist and cannot be created\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Make sure we can write to the upload directory\n\t\t\t\t\tif (!is_writable($path)) {\n\t\t\t\t\t\tif (!chmod($path, 0775)) {\n\t\t\t\t\t\t\tthrow new Exception(\"Cannot write to img directory\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfile_put_contents(Froxlor::getInstallDir() . '/' . explode('?', $_data[$index_split[0] . '.' . $index_split[1]], 2)[0], base64_decode($value));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tSettings::Set($index, $value);\n\t\t\t}\n\t\t\t// save to DB\n\t\t\tSettings::Flush();\n\t\t\t// all good\n\t\t\treturn true;\n\t\t}\n\t\tthrow new Exception(\"Invalid JSON data: \" . json_last_error_msg());\n\t}\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor;\n\nuse Exception;\nuse Froxlor\\Database\\Database;\nuse PDO;\n\n/**\n * Class SImExporter\n *\n * Import/Export settings to JSON\n */\nclass SImExporter\n{\n\t/**\n\t * settings which are not being exported\n\t *\n\t * @var array\n\t */\n\tprivate static $no_export = [\n\t\t'panel.adminmail',\n\t\t'admin.show_news_feed',\n\t\t'system.lastaccountnumber',\n\t\t'system.lastguid',\n\t\t'system.ipaddress',\n\t\t'system.last_traffic_run',\n\t\t'system.hostname',\n\t\t'system.mysql_access_host',\n\t\t'system.lastcronrun',\n\t\t'system.defaultip',\n\t\t'system.defaultsslip',\n\t\t'system.last_tasks_run',\n\t\t'system.last_archive_run',\n\t\t'system.leprivatekey',\n\t\t'system.lepublickey'\n\t];\n\n\tpublic static function export()\n\t{\n\t\t$settings_definitions = [];\n\t\tforeach (PhpHelper::loadConfigArrayDir('./actions/admin/settings/')['groups'] as $group) {\n\t\t\tforeach ($group['fields'] as $field) {\n\t\t\t\t$settings_definitions[$field['settinggroup']][$field['varname']] = $field;\n\t\t\t}\n\t\t}\n\n\t\t$result_stmt = Database::query(\"\n\t\t\tSELECT * FROM `\" . TABLE_PANEL_SETTINGS . \"` ORDER BY `settingid` ASC\n\t\t\");\n\t\t$_data = [];\n\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t$index = $row['settinggroup'] . \".\" . $row['varname'];\n\t\t\tif (!in_array($index, self::$no_export)) {\n\t\t\t\t$_data[$index] = $row['value'];\n\t\t\t}\n\n\t\t\tif (array_key_exists($row['settinggroup'], $settings_definitions) && array_key_exists($row['varname'], $settings_definitions[$row['settinggroup']])) {\n\t\t\t\t// Export image file\n\t\t\t\tif ($settings_definitions[$row['settinggroup']][$row['varname']]['type'] === \"image\") {\n\t\t\t\t\tif ($row['value'] === \"\") {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$_data[$index . '.image_data'] = base64_encode(file_get_contents(explode('?', $row['value'], 2)[0]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// add checksum for validation\n\t\t$_data['_sha'] = sha1(var_export($_data, true));\n\t\t$_export = json_encode($_data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);\n\t\tif (!$_export) {\n\t\t\tthrow new Exception(\"Error exporting settings: \" . json_last_error_msg());\n\t\t}\n\n\t\treturn $_export;\n\t}\n\n\tpublic static function import($json_str = null)\n\t{\n\t\t// decode data\n\t\t$_data = json_decode($json_str, true);\n\t\tif ($_data) {\n\t\t\t// get validity check data\n\t\t\t$_sha = isset($_data['_sha']) ? $_data['_sha'] : false;\n\t\t\t$_version = isset($_data['panel.version']) ? $_data['panel.version'] : false;\n\t\t\t$_dbversion = isset($_data['panel.db_version']) ? $_data['panel.db_version'] : false;\n\t\t\t// check if we have everything we need\n\t\t\tif (!$_sha || !$_version || !$_dbversion) {\n\t\t\t\tthrow new Exception(\"Invalid froxlor settings data. Unable to import.\");\n\t\t\t}\n\t\t\t// validate import file\n\t\t\tunset($_data['_sha']);\n\t\t\t// compare\n\t\t\tif ($_sha != sha1(var_export($_data, true))) {\n\t\t\t\tthrow new Exception(\"SHA check of import data failed. Unable to import.\");\n\t\t\t}\n\t\t\t// do not import version info - but we need that to possibly update settings\n\t\t\t// when there were changes in the variable-name or similar\n\t\t\tunset($_data['panel.version']);\n\t\t\tunset($_data['panel.db_version']);\n\t\t\t// validate we got ssl enabled ips when ssl is enabled\n\t\t\t// otherwise deactivate it\n\t\t\tif ($_data['system.use_ssl'] == 1) {\n\t\t\t\t$result_ssl_ipsandports_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(*) as count_ssl_ip FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='1'\n\t\t\t\t\");\n\t\t\t\t$result = Database::pexecute_first($result_ssl_ipsandports_stmt);\n\t\t\t\tif ($result['count_ssl_ip'] <= 0) {\n\t\t\t\t\t// no ssl-ip -> deactivate\n\t\t\t\t\t$_data['system.use_ssl'] = 0;\n\t\t\t\t\t// deactivate other ssl-related settings\n\t\t\t\t\t$_data['system.leenabled'] = 0;\n\t\t\t\t\t$_data['system.le_froxlor_enabled'] = 0;\n\t\t\t\t\t$_data['system.le_froxlor_redirect'] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// store new data\n\t\t\tforeach ($_data as $index => $value) {\n\t\t\t\t$index_split = explode('.', $index, 3);\n\n\t\t\t\t// Catch image_data and save it\n\t\t\t\tif (isset($index_split[2]) && $index_split[2] === 'image_data' && !empty($_data[$index_split[0] . '.' . $index_split[1]])) {\n\t\t\t\t\t$path = Froxlor::getInstallDir() . '/img/';\n\t\t\t\t\tif (!is_dir($path) && !mkdir($path, 0775)) {\n\t\t\t\t\t\tthrow new Exception(\"img directory does not exist and cannot be created\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Make sure we can write to the upload directory\n\t\t\t\t\tif (!is_writable($path)) {\n\t\t\t\t\t\tif (!chmod($path, 0775)) {\n\t\t\t\t\t\t\tthrow new Exception(\"Cannot write to img directory\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$img_data = base64_decode($value);\n\t\t\t\t\t$img_filename = Froxlor::getInstallDir() . '/' . str_replace('../', '', explode('?', $_data[$index_split[0] . '.' . $index_split[1]], 2)[0]);\n\n\t\t\t\t\tfile_put_contents($img_filename, $img_data);\n\n\t\t\t\t\tif (function_exists('finfo_open')) {\n\t\t\t\t\t\t$finfo = finfo_open(FILEINFO_MIME_TYPE);\n\t\t\t\t\t\t$mimetype = finfo_file($finfo, $img_filename);\n\t\t\t\t\t\tfinfo_close($finfo);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$mimetype = mime_content_type($img_filename);\n\t\t\t\t\t}\n\t\t\t\t\tif (empty($mimetype)) {\n\t\t\t\t\t\t$mimetype = 'application/octet-stream';\n\t\t\t\t\t}\n\t\t\t\t\tif (!in_array($mimetype, ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'])) {\n\t\t\t\t\t\t@unlink($img_filename);\n\t\t\t\t\t\tthrow new Exception(\"Uploaded file is not a valid image\");\n\t\t\t\t\t}\n\n\t\t\t\t\t$spl = explode('.', $img_filename);\n\t\t\t\t\t$file_extension = strtolower(array_pop($spl));\n\t\t\t\t\tunset($spl);\n\n\t\t\t\t\tif (!in_array($file_extension, [\n\t\t\t\t\t\t'jpeg',\n\t\t\t\t\t\t'jpg',\n\t\t\t\t\t\t'png',\n\t\t\t\t\t\t'gif'\n\t\t\t\t\t])) {\n\t\t\t\t\t\t@unlink($img_filename);\n\t\t\t\t\t\tthrow new Exception(\"Invalid file-extension, use one of: jpeg, jpg, png, gif\");\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tSettings::Set($index, $value);\n\t\t\t}\n\t\t\t// save to DB\n\t\t\tSettings::Flush();\n\t\t\t// all good\n\t\t\treturn true;\n\t\t}\n\t\tthrow new Exception(\"Invalid JSON data: \" . json_last_error_msg());\n\t}\n}\n"], "filenames": ["lib/Froxlor/SImExporter.php"], "buggy_code_start_loc": [160], "buggy_code_end_loc": [161], "fixing_code_start_loc": [160], "fixing_code_end_loc": [193], "type": "CWE-29", "message": "Path Traversal: '\\..\\filename' in GitHub repository froxlor/froxlor prior to 2.0.0.", "other": {"cve": {"id": "CVE-2023-0316", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-16T01:15:09.200", "lastModified": "2023-01-24T15:07:13.147", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Path Traversal: '\\..\\filename' in GitHub repository froxlor/froxlor prior to 2.0.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-29"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.0", "matchCriteriaId": "9A3D0E3C-79A7-4CC2-9CFD-0C2196523F25"}]}]}], "references": [{"url": "https://github.com/froxlor/froxlor/commit/983d9294603925018225d672795bd8b4a526f41e", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/c190e42a-4806-47aa-aa1e-ff5d6407e244", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/froxlor/froxlor/commit/983d9294603925018225d672795bd8b4a526f41e"}}