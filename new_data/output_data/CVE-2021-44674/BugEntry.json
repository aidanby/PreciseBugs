{"buggy_code": ["<?php\n/**\n#  Copyright 2003-2015 Opmantek Limited (www.opmantek.com)\n#\n#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM\n#\n#  This file is part of Open-AudIT.\n#\n#  Open-AudIT is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as published\n#  by the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  Open-AudIT is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#\n#  You should have received a copy of the GNU Affero General Public License\n#  along with Open-AudIT (most likely in a file named LICENSE).\n#  If not, see <http://www.gnu.org/licenses/>\n#\n#  For further information on Open-AudIT or for a license other than AGPL please see\n#  www.opmantek.com or email contact@opmantek.com\n#\n# *****************************************************************************\n*\n* PHP version 5.3.3\n*\n* @category  Controller\n* @package   Devices\n* @author    Mark Unwin <marku@opmantek.com>\n* @copyright 2014 Opmantek\n* @license   http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @version   GIT: Open-AudIT_4.3.0\n* @link      http://www.open-audit.org\n*/\n\n/**\n* Base Object Devices\n*\n* @access   public\n* @category Controller\n* @package  Devices\n* @author   Mark Unwin <marku@opmantek.com>\n* @license  http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @link     http://www.open-audit.org\n */\nclass Devices extends MY_Controller\n{\n    /**\n    * Constructor\n    *\n    * @access    public\n    */\n    public function __construct()\n    {\n        parent::__construct();\n        $this->load->helper('network');\n        $this->load->model('m_devices');\n        // inputRead();\n        $this->response = response_create();\n        $this->output->url = $this->config->config['oa_web_index'];\n    }\n\n    /**\n     * [index description]\n     * @return [type] [description]\n     */\n    public function index()\n    {\n    }\n\n    /**\n     * [_remap description]\n     * @return [type] [description]\n     */\n    public function _remap()\n    {\n        $this->{$this->response->meta->action}();\n    }\n\n    /**\n     * [collection description]\n     * @return [type] [description]\n     */\n    private function collection()\n    {\n        $timer_start = microtime(true);\n        if ($this->response->meta->sub_resource !== '' &&  ($this->response->meta->sub_resource !== 'report' && $this->response->meta->sub_resource !== 'query' && $this->response->meta->sub_resource !== 'group')) {\n            $this->response->data = $this->m_devices->collection_sub_resource();\n        } else if ($this->response->meta->sub_resource !== '' && $this->response->meta->sub_resource === 'report') {\n            $this->response->data = $this->m_devices->report();\n        } else if ($this->response->meta->sub_resource !== '' && $this->response->meta->sub_resource === 'query') {\n            $this->response->data = $this->m_devices->query();\n        } else if ($this->response->meta->sub_resource !== '' && $this->response->meta->sub_resource === 'group') {\n            $this->response->data = $this->m_devices->group();\n        } else if ( ! empty($this->response->meta->groupby)) {\n            $this->response->data = $this->m_devices->collection_group_by();\n        } else {\n            $this->m_devices->collection(null, 1);\n        }\n        if (is_array($this->response->data)) {\n            $this->response->meta->filtered = count($this->response->data);\n        } else {\n            $this->response->meta->filtered = 0;\n        }\n\n        $timer_end = microtime(true);\n        $entry = new stdClass();\n        $entry->time = ($timer_end - $timer_start);\n        $entry->detail = 'm_devices::collection';\n        $entry->time_now = time();\n        $GLOBALS['timer_log'][] = $entry;\n\n        output($this->response);\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->summary = 'finish';\n        $log->status = 'success';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n     * [read description]\n     * @return [type] [description]\n     */\n    private function read()\n    {\n        $timer_start = microtime(true);\n        $this->load->model('m_orgs');\n        $this->load->model('m_locations');\n        $this->load->model('m_devices_components');\n        // if we're displaying a web page, get ALL the data\n        if (($this->response->meta->format === 'screen' && $this->response->meta->include === '') OR $this->response->meta->include === '*' OR $this->response->meta->include === 'all') {\n            $this->response->meta->include = 'application,attachment,audit_log,bios,certificate,change_log,credential,discovery_log,disk,dns,edit_log,field,file,image,ip,location,log,memory,module,monitor,motherboard,netstat,network,nmap,optical,pagefile,partition,policy,print_queue,processor,purchase,rack_devices,radio,route,san,scsi,server,server_item,service,share,software,software_key,sound,task,usb,user,user_group,variable,video,vm,windows';\n        }\n        if ($this->response->meta->sub_resource !== '') {\n            if (empty($this->response->meta->sub_resource_id)) {\n                $this->response->meta->sub_resource_id = 0;\n            }\n            if ($this->response->meta->sub_resource === 'partition_graph') {\n                $this->response->data = $this->m_devices_components->graph($this->response->meta->id, $this->response->meta->sub_resource_id, 'partition', 30);\n                $this->response->meta->action = 'read_partition_graph';\n            } else {\n                $this->response->data = $this->m_devices_components->read($this->response->meta->id, $this->response->meta->current, $this->response->meta->sub_resource, $this->response->meta->filter, $this->response->meta->properties);\n                $this->response->meta->format = 'json';\n            }\n        } else {\n            $this->response->data = $this->m_devices->read($this->response->meta->id);\n            // create the related links\n            if ( ! empty($this->response->data)) {\n                $related = $this->m_devices->get_related_tables();\n                $this->response->data[0]->links->relationships = $related;\n                unset($related);\n            }\n            // get any additionally included tables\n            if ( ! empty($this->response->meta->include) && ! empty($this->response->data)) {\n                $temp = explode(',', $this->response->meta->include);\n                foreach ($temp as $table) {\n                    if ($table !== 'field' && $table !== 'application' && $table !== 'rack_devices') {\n                        $result = false;\n                        $result = $this->m_devices->read_sub_resource(\n                            $this->response->meta->id,\n                            $table, // sub_resource\n                            @$this->response->meta->sub_resource_id, // sub id\n                            $this->response->meta->properties,\n                            '', // sort\n                            $this->response->meta->current,\n                            $this->response->meta->limit\n                        );\n                        if ($result !== false) {\n                            $this->response->included = array_merge($this->response->included, $result);\n                        }\n                    } else if ($table === 'field') {\n                        $result = false;\n                        $result = $this->m_devices->get_device_fields($this->response->meta->id);\n                        $this->response->included = array_merge($this->response->included, $result);\n                    } else if ($table === 'application') {\n                        $result = false;\n                        $result = $this->m_devices->get_device_applications($this->response->meta->id);\n                        $this->response->included = array_merge($this->response->included, $result);\n                    } else if ($table === 'rack_devices') {\n                        $result = false;\n                        $result = $this->m_devices->get_device_rack($this->response->meta->id);\n                        $this->response->included = array_merge($this->response->included, $result);\n                        if ( ! empty($result[0]->attributes->rack_id)) {\n                            $this->load->model('m_racks');\n                            $rack = $this->m_racks->read($result[0]->attributes->rack_id);\n                            $this->response->included = array_merge($this->response->included, $rack);\n                        }\n                    }\n                }\n                // # populate the credentials associated from the last discovery\n                if ( ! empty($this->response->data[0]->attributes->credentials)) {\n                    $credentials = @json_decode($this->response->data[0]->attributes->credentials);\n                    if ( ! empty($credentials)) {\n                        $this->load->model('m_credentials');\n                        foreach ($credentials as $credential_id) {\n                            $credential = $this->m_credentials->read($credential_id);\n                            if ( ! empty($credential)) {\n                                unset($credential[0]->attributes->credentials);\n                            }\n                            if (is_array($credential)) {\n                                $this->response->included = array_merge($this->response->included, $credential);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        $this->response->meta->total = count($this->response->data);\n        $this->response->meta->filtered = count($this->response->data);\n        if ($this->response->meta->format === 'screen') {\n            // return a list of all orgs and locations so we can create the edit functionality on the web page\n            if (isset($this->response->data[0]->attributes->org_id)) {\n                $this->response->included = array_merge($this->response->included, $this->m_orgs->collection($this->user->id));\n            }\n            if (isset($this->response->data[0]->attributes->location_id)) {\n                $this->response->included = array_merge($this->response->included, $this->m_locations->collection($this->user->id));\n            }\n        } else {\n            // return only the details of the linked org and location\n            if (isset($this->response->data[0]->attributes->org_id)) {\n                $this->response->included = array_merge($this->response->included, $this->m_orgs->read($this->response->data[0]->attributes->org_id));\n            }\n            if (isset($this->response->data[0]->attributes->location_id)) {\n                $this->response->included = array_merge($this->response->included, $this->m_locations->read($this->response->data[0]->attributes->location_id));\n            }\n        }\n        if (is_null($this->response->data)) {\n            log_error('ERR-0002');\n        }\n        output($this->response);\n    }\n\n    /**\n     * [create description]\n     * @return [type] [description]\n     */\n    private function create()\n    {\n        $timer_start = microtime(true);\n        $this->load->helper('snmp_model');\n        $this->load->helper('mac');\n        if (empty($_POST['input_type']) OR $_POST['input_type'] === 'manual_input') {\n            $device = new stdClass();\n            foreach ($this->response->meta->received_data->attributes as $key => $value) {\n                if ($value !== '') {\n                    $device->$key = $value;\n                }\n            }\n            $device->last_seen_by = 'web form';\n            $device->last_seen = $this->config->config['timestamp'];\n            $this->load->model('m_devices');\n            $id = $this->m_devices->create($device);\n            $device->id = $id;\n            $mac = '';\n            if ( ! empty($device->mac)) {\n                $mac = strtolower($device->mac);\n            }\n            if ( ! empty($device->ip) && ! empty($device->netmask)) {\n                $this->load->helper('network');\n                $network = network_details($device->ip . ' ' . $device->netmask);\n                if (empty($network->error)) {\n                    $this->load->model('m_devices_components');\n                    $device_ip = new stdClass();\n                    $device_ip->mac = $mac;\n                    $device_ip->net_index = '';\n                    $device_ip->ip = $network->address;\n                    $device_ip->netmask = $network->netmask;\n                    $device_ip->cidr = $network->network_slash;\n                    $device_ip->version = 4;\n                    $device_ip->network = $network->network . '/' . $network->network_slash;\n                    $device_ip->set_by = '';\n                    $input = array();\n                    $input[] = $device_ip;\n                    $parameters = new stdClass();\n                    $parameters->table = 'ip';\n                    $parameters->details = $device;\n                    $parameters->input = $input;\n                    $this->m_devices_components->process_component($parameters);\n                }\n            }\n\n            $timer_end = microtime(true);\n            $entry = new stdClass();\n            $entry->time = ($timer_end - $timer_start);\n            $entry->detail = 'm_devices::create';\n            $entry->time_now = time();\n            $GLOBALS['timer_log'][] = $entry;\n        }\n\n        if ( ! empty($_POST['input_type']) && $_POST['input_type'] === 'audit_input') {\n            unset($_POST['data']);\n            unset($_FILES);\n            $input = $_POST['upload_input'];\n            $discovery_id = null;\n            include 'include_input_devices.php';\n        }\n\n        if ( ! empty($_POST['input_type']) && $_POST['input_type'] === 'file_input') {\n            unset($_POST['data']);\n            $discovery_id = null;\n            include 'include_input_devices.php';\n        }\n\n        $log = new stdClass();\n        $log->type = 'system';\n        $log->detail = 'Finished creating device.';\n        $log->severity = 7;\n        $log->status = 'finish';\n        $log->object = 'devices';\n        $log->function = 'devices::create';\n        stdLog($log);\n\n        if (empty($id) && ! empty($details->id)) {\n            $id = $details->id;\n        }\n\n        if ($this->response->meta->format === 'json') {\n            $this->response->data = $this->m_devices->read($id);\n            output($this->response);\n        } else {\n            redirect('devices/' . $id);\n        }\n    }\n\n    /**\n     * [update description]\n     * @return [type] [description]\n     */\n    private function update()\n    {\n        $this->m_devices->update();\n        // TODO - replace this old function\n        if ($this->response->meta->format === 'json') {\n            if ( ! empty($this->response->meta->received_data->attributes->status) && $this->response->meta->received_data->attributes->status === 'deleted') {\n                output($this->response);\n            } else {\n                $this->response->data = $this->m_devices->read($this->response->meta->id);\n                output($this->response);\n            }\n        }\n        exit();\n    }\n\n    /**\n     * [create_form description]\n     * @return [type] [description]\n     */\n    private function create_form()\n    {\n        $this->response->dictionary = $this->m_devices->dictionary();\n        $this->load->model('m_orgs');\n        $this->response->included = array_merge($this->response->included, $this->m_orgs->collection($this->user->id));\n        $this->load->model('m_locations');\n        $this->response->included = array_merge($this->response->included, $this->m_locations->collection($this->user->id));\n        $this->load->model('m_attributes');\n        $this->response->included = array_merge($this->response->included, $this->m_attributes->collection($this->user->id));\n        output($this->response);\n    }\n\n    /**\n     * [execute description]\n     * @return [type] [description]\n     */\n    private function execute()\n    {\n        $this->response->meta->format = 'json';\n        $this->response->meta->debug = true;\n        output($this->response);\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->status = 'finish';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n     * [bulk_update_form description]\n     * @return [type] [description]\n     */\n    private function bulk_update_form()\n    {\n        $timer_start = microtime(true);\n        if (empty($this->response->meta->ids)) {\n            $this->response->meta->ids = '0';\n        }\n        $sql = \"SELECT system.id, system.icon, system.type, system.name, system.domain, system.ip, system.description, system.os_family, system.status, orgs.name FROM system LEFT JOIN orgs ON (system.org_id = orgs.id) \" . $this->response->meta->internal->filter . \" AND system.id IN (\" . $this->response->meta->ids . \")\";\n        $query = $this->db->query($sql);\n        // TODO - change the below to use this->response->included\n        $this->response->devices = $query->result();\n\n        if (empty($this->response->meta->sub_resource)) {\n            $this->load->model('m_locations');\n            $this->load->model('m_fields');\n            $this->load->model('m_attributes');\n            $this->response->included = array_merge($this->response->included, $this->m_attributes->collection($this->user->id));\n            $this->response->included = array_merge($this->response->included, $this->m_orgs->collection($this->user->id));\n            $this->response->included = array_merge($this->response->included, $this->m_locations->collection($this->user->id));\n            unset($temp);\n            $temp = @$this->m_fields->collection($this->user->id);\n            if ( ! empty($temp)) {\n                $this->response->included = array_merge($this->response->included, $this->m_fields->collection($this->user->id));\n            }\n        } elseif ($this->response->meta->sub_resource === 'credential') {\n            $this->response->meta->action = 'create_form_credentials';\n        }\n\n        $timer_end = microtime(true);\n        $entry = new stdClass();\n        $entry->time = ($timer_end - $timer_start);\n        $entry->detail = 'm_devices::bulk_update_form';\n        $entry->time_now = time();\n        $GLOBALS['timer_log'][] = $entry;\n\n        output($this->response);\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->status = 'finish';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n     * [sub_resource_read description]\n     * @return [type] [description]\n     */\n    private function sub_resource_read()\n    {\n        $current = $this->response->meta->current;\n        if (is_array($this->response->meta->filter)) {\n            foreach ($this->response->meta->filter as $temp_filter) {\n                if ($temp_filter->name === $this->response->meta->sub_resource . '.current') {\n                    $current = $temp_filter->value;\n                }\n            }\n        }\n        if (empty($this->response->meta->sub_resource_id)) {\n            $this->response->meta->sub_resource_id = 0;\n        }\n        $this->response->data = $this->m_devices->read_sub_resource($this->response->meta->id, $this->response->meta->sub_resource, $this->response->meta->sub_resource_id, $this->response->meta->properties, '', $current, '');\n        $this->response->meta->total = 0;\n        if (is_array($this->response->data)) {\n            $this->response->meta->total = count($this->response->data);\n        }\n        $this->response->meta->filtered = $this->response->meta->total;\n        output($this->response);\n    }\n\n    /**\n     * [sub_resource_delete description]\n     * @return [type] [description]\n     */\n    private function sub_resource_delete()\n    {\n        if (empty($this->response->meta->sub_resource_id)) {\n            $this->response->meta->sub_resource_id = 0;\n        }\n        $this->m_devices->sub_resource_delete($this->response->meta->id, $this->response->meta->sub_resource, $this->response->meta->sub_resource_id);\n        if ($this->response->meta->format === 'json') {\n            output($this->response);\n        } else {\n            redirect('devices');\n        }\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->status = 'finish';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n     * [sub_resource_create_form description]\n     * @return [type] [description]\n     */\n    private function sub_resource_create_form()\n    {\n        if ($this->response->meta->sub_resource === 'credential') {\n            $this->response->meta->action = 'create_form_credentials';\n            $this->response->data = array();\n            $temp = new stdClass();\n            $temp->type = $this->response->meta->collection;\n            $this->response->data[] = $temp;\n            unset($temp);\n            output($this->response);\n        } elseif ($this->response->meta->sub_resource === 'discovery') {\n            \n            // NOTE - removed because setting this (for use in Audit My PC), means the script submits to the IP, not localhost and\n            //        therefore the logs are rejected.\n            // NOTE #2 - Need to account for Collectors from Enterprise and Cloud\n            // if ($this->config->config['default_network_address'] == '') {\n            //     $this->config->config['default_network_address'] = 'http://127.0.0.1/open-audit/';\n            // }\n            // NOTE #3 - Improved version of above to account for vintage Windows running as per include_input_discoveries.php\n           \n            if (php_uname('s') === 'Windows NT' &&\n                    exec('whoami') === 'nt authority\\system' &&\n                    ! empty($this->config->config['discovery_use_vintage_service']) &&\n                    $this->config->config['discovery_use_vintage_service'] === 'y') {\n                if ($this->config->config['default_network_address'] === '') {\n                    $this->config->config['default_network_address'] = 'http://127.0.0.1/open-audit/';\n                } else {\n                    // leave it alone and use the config item as is\n                }\n            } else {\n                $this->config->config['default_network_address'] = 'http://127.0.0.1/open-audit/';\n            }\n\n            $ids = array();\n            if ( ! empty($this->response->meta->id)) {\n                $ids[] = intval($this->response->meta->id);\n            }\n            if ( ! empty($this->response->meta->ids)) {\n                $ids = array_merge($ids, explode(',', $this->response->meta->ids));\n            }\n            $device_names = array();\n            $this->load->model('m_discoveries');\n            $this->load->model('m_collection');\n            $this->load->model('m_discovery_scan_options');\n            foreach ($ids as $id) {\n                $this->response->data = $this->m_devices->read($id);\n                $sql = \"SELECT * FROM discoveries WHERE name = 'Device Discovery - \" . $this->response->data[0]->attributes->name . \"' AND system_id = \" . intval($id);\n                $query = $this->db->query($sql);\n                $result = $query->result();\n                if ( ! empty($result)) {\n                    // Check we have this discovery as it may have been removed\n                    $discovery = $this->m_discoveries->read($result[0]->id);\n                    if ( ! empty($discovery)) {\n                        // We already have a previously created device discovery - use that\n                        $discovery_id = $result[0]->id;\n                        $this->m_discoveries->queue($discovery_id);\n                        $this->load->model('m_queue');\n                        $this->m_queue->start();\n                    } else {\n                        unset($result);\n                    }\n                }\n                if (empty($result)) {\n                    // make a new one and run it\n                    $data = new stdClass();\n                    $data->name = 'Device Discovery - ' . $this->response->data[0]->attributes->name;\n                    $device_names[] = $this->response->data[0]->attributes->name;\n                    if (empty($data->name)) {\n                        $data->name = ip_address_from_db($this->response->data[0]->attributes->ip);\n                    }\n                    $data->system_id = $this->response->data[0]->attributes->id;\n                    $data->org_id = $this->response->data[0]->attributes->org_id;\n                    $data->type = 'subnet';\n                    $data->network_address = $this->config->config['default_network_address'];\n                    $data->other = new stdClass();\n                    $data->subnet = ip_address_from_db($this->response->data[0]->attributes->ip);\n                    $data->scan_options = new stdClass();\n                    $data->match_options = new stdClass();\n                    if ( ! empty($this->response->data[0]->attributes->discovery_id)) {\n                        $discovery = $this->m_discoveries->read($this->response->data[0]->attributes->discovery_id);\n                        if ( ! empty($discovery[0]->attributes->scan_options)) {\n                            $data->scan_options = $discovery[0]->attributes->scan_options;\n                        } else {\n                            $this->response->data[0]->attributes->discovery_id = 0;\n                        }\n                        if ( ! empty($discovery[0]->attributes->match_options)) {\n                            $data->match_options = $discovery[0]->attributes->match_options;\n                        }\n                    }\n                    if (empty($this->response->data[0]->attributes->discovery_id)) {\n                        $do_not_use = array('name', 'org_id', 'description', 'options', 'edited_by', 'edited_date');\n                        $discovery_scan_options = $this->m_discovery_scan_options->read($this->config->config['discovery_default_scan_option']);\n                        if ( ! empty($discovery_scan_options->data)) {\n                            foreach ($discovery_scan_options->data as $item) {\n                                foreach ($item as $key => $value) {\n                                    if ( ! in_array($key, $do_not_use)) {\n                                        $data->scan_options->{$key} = $value;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (empty($data->other->match->match_hostname)) {\n                        // use the defaults\n                        $match_rules = array('match_dbus', 'match_dns_fqdn', 'match_fqdn', 'match_hostname', 'match_hostname_dbus', 'match_hostname_serial', 'match_hostname_uuid', 'match_ip', 'match_mac', 'match_mac_vmware', 'match_serial', 'match_serial_type', 'match_sysname', 'match_sysname_serial', 'match_uuid');\n                        foreach ($match_rules as $item) {\n                            $data->match_options->{$item} = @$this->config->config[$item];\n                        }\n                    }\n                    $discovery_id = $this->m_discoveries->create($data);\n                    $this->m_discoveries->queue($discovery_id);\n                    $this->load->model('m_queue');\n                    $this->m_queue->start();\n                    sleep(2);\n                }\n            }\n            $message = htmlentities('Discovery started for devices: ' . htmlentities(implode(', ', $device_names)));\n            $this->session->set_flashdata('success', $message);\n            unset($this->response->data);\n            $this->response->data = array();\n            if ($this->response->meta->format !== 'json') {\n                redirect('devices');\n            } else {\n                $this->response->data = $this->m_discoveries->read($discovery_id);\n                output($this->response);\n            }\n        } elseif ($this->response->meta->sub_resource === 'attachment') {\n            $this->response->meta->action = 'create_form_attachment';\n            $this->response->data = array();\n            $temp = new stdClass();\n            $temp->type = $this->response->meta->collection;\n            $this->response->data[] = $temp;\n            unset($temp);\n            output($this->response);\n        } elseif ($this->response->meta->sub_resource === 'image') {\n            $this->response->meta->action = 'create_form_image';\n            $this->response->data = array();\n            $temp = new stdClass();\n            $temp->type = $this->response->meta->collection;\n            $this->response->data[] = $temp;\n            unset($temp);\n            output($this->response);\n        } else {\n            redirect('devices');\n        }\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->status = 'success';\n        $log->summary = 'finish';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n     * [sub_resource_create description]\n     * @return [type] [description]\n     */\n    private function sub_resource_create()\n    {\n        if ($this->m_devices->sub_resource_create()) {\n            $this->response->meta->succeeded = true;\n        } else {\n            $this->response->meta->succeeded = false;\n        }\n        if ($this->response->meta->format === 'json') {\n            output($this->response);\n        } else {\n            if ( ! empty($this->response->meta->id)) {\n                redirect('devices/' . $this->response->meta->id);\n            } else {\n                redirect('devices');\n            }\n        }\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->status = 'finish';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n     * [sub_resource_download description]\n     * @return [type] [description]\n     */\n    private function sub_resource_download()\n    {\n        if (empty($this->response->meta->sub_resource_id)) {\n            $this->response->meta->sub_resource_id = 0;\n        }\n        $attachment = $this->m_devices->read_sub_resource($this->response->meta->id, $this->response->meta->sub_resource, $this->response->meta->sub_resource_id, '*', '', '', '');\n        $this->load->helper('file');\n        if (php_uname('s') === 'Windows NT') {\n            $temp = explode('\\\\', $attachment[0]->attributes->filename);\n        } else {\n            $temp = explode('/', $attachment[0]->attributes->filename);\n        }\n        $filename = $temp[count($temp)-1];\n        $filename = preg_replace('/'.$this->response->meta->id.'_/', '', $filename, 1);\n        header('Content-Type: '.get_mime_by_extension($attachment[0]->attributes->filename));\n        header('Content-Disposition: attachment;filename=\"'.$filename.'\"');\n        header('Cache-Control: max-age=0');\n        readfile($attachment[0]->attributes->filename);\n    }\n\n    /**\n     * [delete description]\n     * @return [type] [description]\n     */\n    private function delete()\n    {\n        $this->response->meta->format = 'json';\n        $this->response->meta->debug = true;\n        output($this->response);\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->status = 'finish';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n    * Supply a HTML form for the user to upload a collection of objects in CSV\n    *\n    * @access public\n    * @return NULL\n    */\n    public function import_form()\n    {\n        include 'include_import_form.php';\n    }\n\n    /**\n    * Process the supplied data and create a new object\n    *\n    * @access public\n    * @return NULL\n    */\n    public function import()\n    {\n        include 'include_import.php';\n    }\n\n    /**\n    * Accept a device id and provide a JSON export of most fields\n    *\n    * @access public\n    * @return NULL\n    */\n    public function export()\n    {\n        $this->response->meta->format = 'json';\n        $this->response->meta->include = 'bios,certificate,disk,dns,ip,log,memory,module,monitor,motherboard,netstat,network,nmap,optical,pagefile,partition,policy,print_queue,processor,radio,route,san,scsi,server,server_item,service,share,software,software_key,sound,task,usb,user,user_group,variable,video,vm,windows';\n        $device = new stdClass();\n\n        $sql = 'SELECT * FROM system WHERE id = ?';\n        $query = $this->db->query($sql, array(intval($this->response->meta->id)));\n        $result = $query->result();\n        unset($result[0]->id);\n        unset($result[0]->first_seen);\n        unset($result[0]->last_seen);\n        foreach ($result[0] as $key => $value) {\n            if (empty($value)) {\n                unset($result[0]->{$key});\n            }\n        }\n        $device->sys = $result[0];\n\n        $temp = explode(',', $this->response->meta->include);\n        foreach ($temp as $table) {\n            $sql = \"SELECT * FROM `{$table}` WHERE system_id = ? AND current = 'y'\";\n            $query = $this->db->query($sql, array(intval($this->response->meta->id)));\n            $result = $query->result();\n            if ( ! empty($result)) {\n                for ($i=0; $i < count($result); $i++) {\n                    unset($result[$i]->id);\n                    unset($result[$i]->system_id);\n                    unset($result[$i]->current);\n                    unset($result[$i]->first_seen);\n                    unset($result[$i]->last_seen);\n                }\n                $device->{$table} = $result;\n            }\n        }\n        echo json_encode($device);\n    }\n}\n", "<?php\n/**\n#  Copyright 2003-2015 Opmantek Limited (www.opmantek.com)\n#\n#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM\n#\n#  This file is part of Open-AudIT.\n#\n#  Open-AudIT is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as published\n#  by the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  Open-AudIT is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#\n#  You should have received a copy of the GNU Affero General Public License\n#  along with Open-AudIT (most likely in a file named LICENSE).\n#  If not, see <http://www.gnu.org/licenses/>\n#\n#  For further information on Open-AudIT or for a license other than AGPL please see\n#  www.opmantek.com or email contact@opmantek.com\n#\n# *****************************************************************************\n*\n* PHP version 5.3.3\n* \n* @category  Model\n* @package   Devices\n* @author    Mark Unwin <marku@opmantek.com>\n* @copyright 2014 Opmantek\n* @license   http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @version   GIT: Open-AudIT_4.3.0\n* @link      http://www.open-audit.org\n*/\n\n/**\n* Base Model Devices\n*\n* @access   public\n* @category Model\n* @package  Devices\n* @author   Mark Unwin <marku@opmantek.com>\n* @license  http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @link     http://www.open-audit.org\n */\nclass M_devices extends MY_Model\n{\n    /**\n    * Constructor\n    *\n    * @access public\n    */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * [_build_filter description]\n     * @return [type] [description]\n     */\n    private function _build_filter()\n    {\n        $CI = & get_instance();\n        $reserved = ' properties limit sub_resource action sort current offset format graph report_name ';\n        $filter = '';\n        foreach ($CI->response->meta->filter as $item) {\n            if (strpos(' '.$item->name.' ', $reserved) === false) {\n                if ($item->name === 'id') {\n                    $item->name = 'system.id';\n                }\n                if ( ! empty($item->name) && $item->operator !== 'in') {\n                    if (stripos($item->name, 'current') !== false && $item->value !== 'y' && $item->value !== 'n') {\n                        // we ignore this value\n                    } else {\n                        $filter .= ' AND ' . $item->name . ' ' . $item->operator . ' ' . '\"' . $item->value . '\"';\n                    }\n                }\n                if ( ! empty($item->name) && $item->operator === 'in') {\n                    $filter .= ' AND ' . $item->name . ' in ' . $item->value;\n                }\n            }\n        }\n        return($filter);\n    }\n\n    /**\n     * [_build_join description]\n     * @return [type] [description]\n     */\n    private function _build_join()\n    {\n        $CI = & get_instance();\n        $join = '';\n        $tables = '';\n        if (count($CI->response->meta->filter) > 0) {\n            foreach ($CI->response->meta->filter as $item) {\n                if (strpos($item->name, '.') !== false) {\n                    $table = substr($item->name, 0, strpos($item->name, '.'));\n                    if ($table !== 'system' && stripos($tables, ' ' . $table . ' ') === false) {\n                        if ($table === 'change_log' OR $table === 'edit_log' OR $table === 'audit_log') {\n                            $join .= ' LEFT JOIN `' . $table . '` ON (system.id = `' . $table . '`.system_id) ';\n                        } else {\n                            $join .= ' LEFT JOIN `' . $table . '` ON (system.id = `' . $table . '`.system_id AND ' . $table . '.current = \"' . $CI->response->meta->current . '\") ';\n                        }\n                    }\n                    $tables .= \" {$table} \";\n                }\n            }\n        }\n        $CI->response->meta->internal->join = $join;\n        return($join);\n    }\n\n    /**\n     * [get_related_tables description]\n     * @param  string $id [description]\n     * @return [type]     [description]\n     */\n    public function get_related_tables($id = '')\n    {\n        $CI = & get_instance();\n        if ($id === '') {\n            $id = intval($CI->response->meta->id);\n        } else {\n            $id = intval($id);\n        }\n        if (empty($id)) {\n            return false;\n        }\n        $return = array();\n        $tables = array('audit_log', 'bios', 'certificate', 'change_log', 'credential', 'disk', 'dns', 'edit_log', 'field', 'file', 'ip', 'log', 'memory', 'module', 'monitor', 'motherboard', 'netstat', 'network', 'optical', 'partition', 'pagefile', 'policy', 'print_queue', 'processor', 'radio', 'route', 'san', 'scsi', 'service', 'server', 'server_item', 'share', 'software', 'software_key', 'sound', 'task', 'usb', 'user', 'user_group', 'variable', 'video', 'vm', 'windows');\n        foreach ($tables as $table) {\n            $sql = \"SELECT COUNT(*) AS `count` FROM `{$table}` WHERE system_id = \" . intval($id);\n            $result = $this->run_sql($sql, array());\n            if ( ! empty($result[0]->count) && intval($result[0]->count) > 0) {\n                $item = new stdClass();\n                $item->$table = new stdClass();\n                $item->$table->links = new stdClass();\n                $item->$table->links->self = $CI->config->config['base_url'] . 'index.php/devices/' . $id . '/' . $table;\n                $return[] = $item;\n                unset($item);\n            }\n        }\n        return ($return);\n    }\n\n    /**\n     * [read description]\n     * @param  int $id The system.id of the device in question\n     * @return [type]     [description]\n     */\n    public function read($id = 0)\n    {\n        if (empty($id)) {\n            $log = new stdClass();\n            $log->file = 'system';\n            $log->level = 5;\n            $log->message = 'No device ID for read, returning false';\n            stdlog($log);\n            return false;\n        }\n        $CI = & get_instance();\n        if ($CI->response->meta->collection === 'devices' && ! empty($CI->response->meta->properties)) {\n            $properties = $CI->response->meta->properties;\n        } else {\n            $properties = '*';\n        }\n        $sql = \"SELECT {$properties} FROM `system` WHERE system.id = ?\";\n        $result = $this->run_sql($sql, array($id));\n\n        // Populate our collector name if it exists\n        if ( ! empty($result)) {\n            if ( ! empty($result[0]->collector_uuid)) {\n                $result[0]->collector_name = '';\n                $sql = 'SELECT `name` FROM `collectors` WHERE `uuid` = ?';\n                $data = array((string)$result[0]->collector_uuid);\n                $collector = $this->run_sql($sql, $data);\n                if ( ! empty($collector[0]->{'name'})) {\n                    $result[0]->collector_name = $collector[0]->{'name'};\n                }\n            }\n\n            $result = $this->format_data($result, 'devices');\n\n            // format our uptime from unixtime to human readable\n            $result[0]->attributes->uptime_formatted = '';\n            if ( ! empty($result[0]->attributes->uptime)) {\n                $seconds = intval($result[0]->attributes->uptime);\n                $date_time_f = new \\DateTime('@0');\n                $date_time_t = new \\DateTime(\"@{$seconds}\");\n                $result[0]->attributes->uptime_formatted = $date_time_f->diff($date_time_t)->format('%a days, %H:%i:%S');\n            }\n        }\n        return($result);\n    }\n\n    /**\n     * [get_device_fields description]\n     * @param  int $device_id The system.id of the device in question\n     * @return [type]            [description]\n     */\n    public function get_device_fields($device_id = 0)\n    {\n        $CI = & get_instance();\n        $CI->load->model('m_orgs');\n        $CI->load->model('m_fields');\n        $CI->load->model('m_groups');\n        $log = new stdClass();\n        $log->file = 'system';\n        $log->level = 7;\n\n        if (empty($device_id)) {\n            $log->message = 'No device ID for fields, returning false';\n            stdlog($log);\n            return false;\n        }\n\n        // get the org_id of the device\n        $sql = 'SELECT system.org_id FROM system WHERE `system`.`id` = ?';\n        $data = array (intval($device_id));\n        $result = $this->run_sql($sql, $data);\n        $device_org_id = intval($result[0]->org_id);\n\n        // get the fields\n        $sql = \"SELECT fields.*, groups.sql AS `group_sql`, groups.name as `group_name`, field.value FROM fields LEFT JOIN groups ON fields.group_id = groups.id LEFT JOIN field ON (fields.id = field.fields_id AND field.system_id = {$device_id}) ORDER BY fields.name\";\n        $fields = $this->run_sql($sql, array());\n        // this is our array of field.id's that are acceptable on this device\n        $field_list = array();\n        if ( ! empty($fields)) {\n            foreach ($fields as $field) {\n                // get this field.org_id children\n                $orgs = array($field->org_id);\n                $orgs = array_merge($orgs, $CI->m_orgs->get_children($field->org_id));\n                foreach ($orgs as $value) {\n                    if (intval($device_org_id) === intval($value)) {\n                        $sql = 'SELECT COUNT(*) AS `count` FROM (' . str_replace('@filter', '1=1', $field->group_sql) . \") a WHERE a.id = {$device_id}\";\n                        $result = $this->run_sql($sql, $data);\n                        if ( ! empty($result) && intval($result[0]->count) === 1) {\n                            $field_list[] = $field;\n                        }\n                    }\n                }\n            }\n            // remove the sql and group name\n            foreach ($field_list as &$field) {\n                unset($field->group_sql);\n                unset($field->group_name);\n            }\n        }\n        $result = $this->format_data($field_list, 'fields');\n        return($result);\n    }\n\n    /**\n     * [get_device_applications description]\n     * @param  int $device_id The system.id of the device in question\n     * @return [type]            [description]\n     */\n    public function get_device_applications($device_id = 0)\n    {\n        $CI = & get_instance();\n        $CI->load->model('m_orgs');\n        $CI->load->model('m_fields');\n        $CI->load->model('m_groups');\n        $log = new stdClass();\n        $log->file = 'system';\n        $log->level = 7;\n\n        if (empty($device_id)) {\n            $log->message = 'No device ID for applications, returning false';\n            stdlog($log);\n            return false;\n        }\n\n        $sql = 'SELECT applications.id AS `applications.id`, applications.name AS `applications.name`, applications.description AS `applications.description`, application.id AS `id` FROM applications LEFT JOIN application ON applications.id = application.applications_id LEFT JOIN system ON (application.system_id = system.id) WHERE system.id = ? ORDER BY applications.name';\n        $application = $this->run_sql($sql, array(intval($device_id)));\n        $result = $this->format_data($application, 'application');\n        return($result);\n    }\n\n    /**\n     * [get_device_rack description]\n     * @param  int $id The system.id of the device in question\n     * @return [type]      [description]\n     */\n    public function get_device_rack($id = 0)\n    {\n        $sql = 'SELECT rack_devices.*, racks.name AS `racks.name`, racks.id AS `racks.id` FROM rack_devices LEFT JOIN `racks` ON (racks.id = rack_devices.rack_id) WHERE system_id = ?';\n        $query = $this->run_sql($sql, array(intval($id)));\n        $result = $this->format_data($query, 'rack_devices');\n        return($result);\n    }\n\n    /**\n     * [read_sub_resource description]\n     * @param  string $id              system.id\n     * @param  string $sub_resource    [description]\n     * @param  string $sub_resource_id [description]\n     * @param  string $properties      [description]\n     * @param  string $sort            [description]\n     * @param  string $current         [description]\n     * @param  string $limit           [description]\n     * @return [type]                  [description]\n     */\n    public function read_sub_resource($id = '', $sub_resource = '', $sub_resource_id = '', $properties = '', $sort = '', $current = 'y', $limit = '')\n    {\n        $CI = & get_instance();\n        $log = new stdClass();\n        $log->file = 'system';\n        $log->level = 7;\n\n        $id = intval($id);\n        if (empty($id)) {\n            $log->message = 'No ID, returning false';\n            stdlog($log);\n            return false;\n        }\n        if (empty($sub_resource)) {\n            $log->message = 'No sub_resource, returning false';\n            stdlog($log);\n            return false;\n        }\n        if (empty($sub_resource_id)) {\n            $sub_resource_id = '';\n        } else {\n            $sub_resource_id = ' AND `' . $sub_resource . '`.id = ' . intval($sub_resource_id);\n            $current = '';\n        }\n        if (empty($properties) OR $properties === '*') {\n            $properties = '`' . $sub_resource . '`.*';\n        }\n        if ( ! empty($limit)) {\n            $limit = ' LIMIT ' . intval($limit);\n        }\n\n        $filter = $this->_build_filter();\n\n        if ($sub_resource === 'location') {\n            $sql = 'SELECT location_id, locations.name AS `location_name`, location_level, location_suite, location_room, location_rack, location_rack_position, location_rack_size, location_latitude, location_longitude FROM system LEFT JOIN locations ON (system.location_id = locations.id) WHERE system.id = ?';\n            $data = array($id);\n\n        } else if ($sub_resource === 'purchase') {\n            $sql = 'SELECT asset_number, asset_tag, end_of_life, end_of_service, purchase_invoice, purchase_order_number, purchase_cost_center, purchase_vendor, purchase_date, purchase_service_contract_number, lease_expiry_date, purchase_amount, warranty_duration, warranty_expires, warranty_type FROM system WHERE id = ?';\n            $data = array($id);\n\n        } else if ($sub_resource === 'discovery_log') {\n            $sql = 'SELECT discovery_log.id, discovery_log.discovery_id, discoveries.name AS `discoveries.name`, discovery_log.timestamp, discovery_log.file, discovery_log.function, discovery_log.message, discovery_log.command_status, discovery_log.command_output, discovery_log.command_time_to_execute, discovery_log.command FROM discovery_log LEFT JOIN discoveries ON (discovery_log.discovery_id = discoveries.id) WHERE discovery_log.system_id = ? ' . $limit;\n            $data = array($id);\n\n        } else if ($sub_resource === 'edit_log') {\n            $sql = 'SELECT edit_log.*, users.full_name FROM edit_log LEFT JOIN users ON edit_log.user_id = users.id WHERE system_id = ? ' . $limit;\n            $data = array($id);\n\n        } else if ($sub_resource === 'network') {\n            $sql = \"SELECT network.*, floor((system.sysuptime - network.iflastchange) /60/60/24/100) as days_since_changed, IF((network.ifadminstatus = 'down') OR (network.ifadminstatus = 'up' AND (network.ip_enabled != 'up' AND network.ip_enabled != 'dormant') AND (((system.sysuptime - network.iflastchange) > 60480000) OR (system.sysuptime < network.iflastchange))), 'available', 'used') AS available  FROM network LEFT JOIN system ON (network.system_id = system.id AND network.current = 'y') WHERE system.id = ? \";\n            $data = array($id);\n\n        } else if ($sub_resource === 'certificate') {\n            $sql = \"SELECT certificate.*, IF(certificate.valid_to > DATE(NOW() - INTERVAL 7 day) AND certificate.valid_to < DATE(NOW() + INTERVAL 7 day), 'expiring_week', IF(certificate.valid_to > DATE(NOW()) AND certificate.valid_to < DATE(NOW() + INTERVAL 30 day), 'expiring_month', IF(certificate.valid_to < DATE(NOW()), 'expired', ''))) AS status FROM certificate WHERE certificate.system_id = ? \" . $limit;\n            $data = array($id);\n\n        } else {\n            $currency = false;\n            $first_seen = false;\n            if ($this->db->table_exists($sub_resource) && $this->db->field_exists('current', $sub_resource)) {\n                $currency = true;\n            }\n            if ($this->db->table_exists($sub_resource) && $this->db->field_exists('first_seen', $sub_resource)) {\n                $first_seen = true;\n            }\n            if ($currency) {\n                if ( ! empty($CI->response->meta->internal->as_at)) {\n                    if ($this->db->field_exists('first_seen', $sub_resource) && $this->db->field_exists('last_seen', $sub_resource)) {\n                        $filter .= ' AND DATE(' . $sub_resource . '.first_seen) <= \"' . $CI->response->meta->internal->as_at . '\" AND DATE(' . $sub_resource . '.last_seen) >= \"' . $CI->response->meta->internal->as_at . '\"';\n                    }\n                }\n                $currency = 'AND `' . $sub_resource . \"`.`current` = '\" . $current . \"'\" ;\n                if ($current === 'y') {\n                    $currency = 'AND `' . $sub_resource . \"`.`current` = '\" . $current . \"'\" ;\n                }\n                if ($current === 'n') {\n                    $currency = 'AND `' . $sub_resource . \"`.`current` = '\" . $current . \"'\" ;\n                }\n                if ($current === '' or $current === 'all') {\n                    $currency = '';\n                }\n                if ($current === 'delta' && $first_seen) {\n                    $properties .= \", IF((`{$sub_resource}`.first_seen = (SELECT first_seen FROM `{$sub_resource}` WHERE system_id = {$id} ORDER BY first_seen LIMIT 1)), 'y', 'n') as original_install\";\n                    $currency = \"AND current = 'y' or `{$sub_resource}`.first_seen = (SELECT first_seen FROM `{$sub_resource}` WHERE system_id = {$id} ORDER BY first_seen LIMIT 1)\";\n                }\n                if ($current === 'delta' && ! $first_seen) {\n                    $currency = '';\n                }\n                if ($current === 'full' && $first_seen) {\n                    $properties .= \", IF((`{$sub_resource}`.first_seen = (SELECT first_seen FROM `{$sub_resource}` WHERE system_id = {$id} ORDER BY first_seen LIMIT 1)), 'y', 'n') as original_install\";\n                    $currency = '';\n                }\n                if ($current === 'full' && ! $first_seen) {\n                    $currency = '';\n                }\n            } else {\n                $currency = '';\n            }\n            $sql = \"SELECT {$properties}, system.name AS `system.name` FROM `{$sub_resource}` LEFT JOIN system ON (system.id = `{$sub_resource}`.system_id) WHERE system.id = {$id} {$sub_resource_id} {$currency} {$filter} {$limit} {$sort}\";\n            $data = array($CI->user->id);\n        }\n\n        $result = $this->run_sql($sql, $data);\n\n        if ($sub_resource === 'credential' && ! empty($result)) {\n            $this->load->library('encrypt');\n            for ($i=0; $i < count($result); $i++) {\n                if (! empty($result[$i]->credentials)) {\n                    $result[$i]->credentials = json_decode(simpleDecrypt($result[$i]->credentials));\n                }\n            }\n        }\n\n        $result = $this->format_data($result, 'devices/' . $id . '/' . $sub_resource);\n        if (count($result) === 0) {\n            return false;\n        } else {\n            return ($result);\n        }\n    }\n\n    /**\n     * [sub_resource_delete description]\n     * @param  integer $id              [description]\n     * @param  integer $sub_resource    [description]\n     * @param  integer $sub_resource_id [description]\n     * @return [type]                   [description]\n     */\n    public function sub_resource_delete($id = 0, $sub_resource = 0, $sub_resource_id = 0)\n    {\n        $CI = & get_instance();\n        if (empty($id)) {\n            if ( ! empty($CI->response->meta->id)) {\n                $id = intval($CI->response->meta->id);\n            }\n        }\n        if (empty($id)) {\n            return false;\n        }\n\n        if (empty($sub_resource)) {\n            if ( ! empty($CI->response->meta->sub_resource)) {\n                $sub_resource = intval($CI->response->meta->sub_resource);\n            }\n        }\n        if (empty($sub_resource)) {\n            return false;\n        }\n\n        if (empty($sub_resource_id)) {\n            if ( ! empty($CI->response->meta->sub_resource_id)) {\n                $sub_resource_id = intval($CI->response->meta->sub_resource_id);\n            }\n        }\n        if (empty($sub_resource_id)) {\n            return false;\n        }\n        if ($sub_resource === 'attachment') {\n            $sql = 'SELECT * FROM attachment WHERE id = ' . intval($sub_resource_id);\n            $attachment = $this->run_sql($sql, array());\n            if (unlink($attachment[0]->filename)) {\n                // good\n            } else {\n                // TODO - log an error here\n                echo 'Could not delete ' . $attachment[0]->filename . '.';\n                return false;\n            }\n        }\n        if ($sub_resource === 'image') {\n\n            // $sql = \"SELECT * FROM image WHERE id = \" . intval($sub_resource_id);\n            // $image = $this->run_sql($sql, array());\n            // if (unlink($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . $image[0]->filename)) {\n            //     // good\n            // } else {\n            //     // TODO - log an error here\n            //     echo \"Could not delete \" . $image[0]->filename . \".\";\n            //     return false;\n            // }\n\n        }\n        $sql = 'DELETE FROM `' . (string)$sub_resource . '` WHERE `system_id` = ? AND id = ?';\n        $data = array(intval($id), intval($sub_resource_id));\n        $this->run_sql($sql, $data);\n        if ($this->db->affected_rows() > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * [sub_resource_create description]\n     * @param  integer $id           [description]\n     * @param  string  $sub_resource [description]\n     * @param  string  $data         [description]\n     * @return [type]                [description]\n     */\n    public function sub_resource_create($id = 0, $sub_resource = '', $data = '')\n    {\n        $CI = & get_instance();\n        $log = new stdClass();\n        $log->file = 'system';\n        $log->level = 7;\n        $log->message = 'sub_resource_create start.';\n        stdlog($log);\n\n        if ( ! empty($id)) {\n            $device_ids[] = $id;\n        } elseif ( ! empty($CI->response->meta->received_data->ids)) {\n            $device_ids = explode(',', $CI->response->meta->received_data->ids);\n        } elseif ( ! empty($CI->response->meta->id)) {\n            $device_ids = array($CI->response->meta->id);\n        } elseif ( ! empty($CI->response->meta->ids)) {\n            $device_ids = explode(',', $CI->response->meta->ids);\n        } else {\n            $log->level = 5;\n            $log->message = 'No ID, nor list of IDs supplied to sub_resource_create.';\n            stdlog($log);\n            log_error('ERR-0021', 'm_devices::sub_resource_create', 'No ID, nor list of IDs supplied to sub_resource_create.');\n            return false;\n        }\n\n        if (empty($sub_resource)) {\n            $sub_resource = $CI->response->meta->sub_resource;\n        }\n\n        if ($sub_resource === 'credential' OR ( ! empty($CI->response->meta->sub_resource) && $CI->response->meta->sub_resource === 'credential')) {\n            $this->load->library('encrypt');\n\n            foreach ($device_ids as $id) {\n                if ( ! empty($data->credentials)) {\n                    $credentials = (string)simpleEncrypt(json_encode($data->credentials));\n                } else if ( ! empty($CI->response->meta->received_data->attributes->credentials)) {\n                    $credentials = (string)simpleEncrypt(json_encode($CI->response->meta->received_data->attributes->credentials));\n                } else {\n                    $log->level = 5;\n                    $log->message = 'No credentials supplied to sub_resource_create.';\n                    stdlog($log);\n                    log_error('ERR-0021', 'm_devices::sub_resource_create', 'No credentials supplied to sub_resource_create.');\n                    return false;\n                }\n\n                if ( ! empty($data->type)) {\n                    $type = $data->type;\n                } else if ( ! empty($CI->response->meta->received_data->attributes->type)) {\n                    $type = $CI->response->meta->received_data->attributes->type;\n                } else {\n                    $log->level = 5;\n                    $log->message = 'No credential type supplied to sub_resource_create.';\n                    stdlog($log);\n                    log_error('ERR-0021', 'm_devices::sub_resource_create', 'No credential type supplied to sub_resource_create.');\n                    return false;\n                }\n\n                if ( ! empty($data->name)) {\n                    $name = $data->name;\n                } else if ( ! empty($CI->response->meta->received_data->attributes->name)) {\n                    $name = $CI->response->meta->received_data->attributes->name;\n                } else {\n                    $name = '';\n                }\n\n                if ( ! empty($data->description)) {\n                    $description = $data->description;\n                } else if ( ! empty($CI->response->meta->received_data->attributes->description)) {\n                    $description = $CI->response->meta->received_data->attributes->description;\n                } else {\n                    $description = '';\n                }\n\n                if ( ! empty($CI->user->full_name)) {\n                    $user = $CI->user->full_name;\n                } else {\n                    $user = '';\n                }\n\n                // we only store a SINGLE credential set of each type per device - delete any existing\n                $sql ='DELETE FROM `credential` WHERE `system_id` = ? AND `type` = ?';\n                $data = array(intval($id), (string)$type);\n                $this->run_sql($sql, $data);\n                // insert the new credentials\n                $sql = \"INSERT INTO `credential` VALUES (NULL, ?, 'y', ?, ?, ?, ?, ?, NOW())\";\n                $data = array(intval($id), (string)$name, (string)$description, (string)$type, (string)$credentials, (string)$user);\n                $this->run_sql($sql, $data);\n            }\n            return true;\n        } else if ($sub_resource === 'attachment') {\n            if (empty($_FILES['attachment'])) {\n                $log->severity = 5;\n                $log->summary = 'No file provided for sub_resource_create.';\n                $log->status = 'error';\n                stdlog($log);\n                log_error('ERR-0024', 'm_devices::sub_resource_create', 'No image file provided for sub_resource_create.');\n                return false;\n            }\n            $target = BASEPATH . '../application/attachments/' . $CI->response->meta->id . '_' . basename($_FILES['attachment']['name']);\n            if ( ! empty($CI->response->meta->cloud_id)) {\n                if ( ! file_exists(BASEPATH . '../application/attachments/' . $CI->response->meta->cloud_id)) {\n                    mkdir(BASEPATH . '../application/attachments/' . $CI->response->meta->cloud_id);\n                }\n                if ( ! file_exists(BASEPATH . '../application/attachments/' . $CI->response->meta->cloud_id)) {\n                    $log->severity = 5;\n                    $log->summary = 'No cloud attachments directory.';\n                    $log->detail = 'The cloud attachments directory does not exist and cannot be created. Error: ' . error_get_last();\n                    $log->status = 'error';\n                    stdlog($log);\n                    log_error('ERR-0037', 'm_devices::sub_resource_create', 'The cloud attachments directory does not exist and cannot be created.');\n                    return false;\n                } else {\n                    $target = BASEPATH . '../application/attachments/' . $CI->response->meta->cloud_id . '/' . $CI->response->meta->id . '_' . basename($_FILES['attachment']['name']);\n                }\n            }\n            if (@move_uploaded_file($_FILES['attachment']['tmp_name'], $target)) {\n                $sql = 'INSERT INTO `attachment` VALUES (NULL, ?, ?, ?, ?, NOW())';\n                $data = array(intval($CI->response->meta->id),\n                        $CI->response->meta->received_data->attributes->name,\n                        \"{$target}\",\n                        $CI->user->full_name);\n                $this->db->query($sql, $data);\n                return true;\n            } else {\n                $log->severity = 5;\n                $log->summary = 'Unable to move uploaded file.';\n                $log->status = 'error';\n                $log->detail = error_get_last();\n                stdlog($log);\n                log_error('ERR-0038', 'm_devices::sub_resource_create', 'Cannot move the uploaded attachment to $target.');\n                return false;\n            }\n        } else if ($sub_resource === 'image') {\n            if (empty($_FILES['attachment']) && empty($CI->response->meta->received_data->attributes->filename)) {\n                $log->severity = 5;\n                $log->summary = 'No image file provided for sub_resource_create.';\n                $log->status = 'error';\n                stdlog($log);\n                log_error('ERR-0024', 'm_devices::sub_resource_create', 'No image file provided for sub_resource_create.');\n                return false;\n            }\n            if ( ! file_exists($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images')) {\n                mkdir($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images');\n            }\n            if ( ! file_exists($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images')) {\n                $log->severity = 5;\n                $log->summary = 'No custom_images directory.';\n                $log->detail = 'The custom_images directory does not exist and cannot be created. Error: ' . error_get_last();\n                $log->status = 'error';\n                stdlog($log);\n                log_error('ERR-0037', 'm_devices::sub_resource_create', 'The custom_images directory does not exist and cannot be created.');\n                $sql = 'DELETE FROM `image` WHERE `id` = ' . $dbid;\n                $this->db->query($sql, array());\n                return false;\n            }\n            if ( ! empty($CI->response->meta->cloud_id)) {\n                if ( ! file_exists($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . $CI->response->meta->cloud_id)) {\n                    mkdir($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . $CI->response->meta->cloud_id);\n                }\n                if ( ! file_exists($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . $CI->response->meta->cloud_id)) {\n                    $log->severity = 5;\n                    $log->summary = 'No cloud custom_images directory.';\n                    $log->detail = 'The cloud custom_images directory does not exist and cannot be created. Error: ' . error_get_last();\n                    $log->status = 'error';\n                    stdlog($log);\n                    log_error('ERR-0037', 'm_devices::sub_resource_create', 'The cloud custom_images directory does not exist and cannot be created.');\n                    $sql = 'DELETE FROM `image` WHERE `id` = ' . $dbid;\n                    $this->db->query($sql, array());\n                    return false;\n                }\n            }\n\n            if ( ! empty($_FILES['attachment']['name'])) {\n                $filename = (string)basename($_FILES['attachment']['name']);\n                // Ensure we only accept JPG, PNG and SVG files\n                if(function_exists('mime_content_type')) {\n                    $mime_type = mime_content_type($_FILES['attachment']['tmp_name']);\n                } else {\n                    $mime_type = '';\n                }\n                // $filetypes = array('image/png', 'image/svg+xml', 'image/svg', 'image/jpeg', '');\n                // $extensions = array('jpg', 'jpeg', 'png', 'svg');\n                // disabled SVG for now because of XSS issues when requesting the direct image\n                $filetypes = array('image/png', 'image/jpeg', '');\n                $extensions = array('jpg', 'jpeg', 'png');\n                $temp = explode('.', $filename);\n                $extension = strtolower($temp[count($temp)-1]);\n                if ( ! in_array($mime_type, $filetypes) OR ! in_array($extension, $extensions)) {\n                    unlink($_FILES['attachment']['tmp_name']);\n                    $log->severity = 5;\n                    $log->summary = 'Invalid file uploaded.';\n                    $log->detail = 'Only jpg, png and svg files are accepted.';\n                    $log->status = 'error';\n                    stdlog($log);\n                    log_error('ERR-0040', 'm_devices::sub_resource_create', 'Only jpg, png and svg files are accepted (' . $extension . ') (' . $mime_type . ')');\n                    return false;\n                }\n            }\n\n            if ( ! empty($filename)) {\n                $target = $_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . $filename;\n                if ( ! empty($CI->response->meta->cloud_id)) {\n                    $target = $_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . $CI->response->meta->cloud_id . '/' . $filename;\n                }\n                if (@move_uploaded_file($_FILES['attachment']['tmp_name'], $target)) {\n                    $sql = 'INSERT INTO `image` VALUES (NULL, ?, ?, ?, ?, ?, NOW())';\n                    $data = array(intval($CI->response->meta->id),\n                            $CI->response->meta->received_data->attributes->name,\n                            $filename,\n                            $CI->response->meta->received_data->attributes->orientation,\n                            $CI->user->full_name);\n                    $this->db->query($sql, $data);\n                    return true;\n                } else {\n                    $log->severity = 5;\n                    $log->summary = 'Unable to move uploaded file';\n                    $log->detail = 'Cannot move the uploaded image file to $target. Error: ' . error_get_last();\n                    $log->status = 'error';\n                    stdlog($log);\n                    log_error('ERR-0038', 'm_devices::sub_resource_create', 'Cannot move the uploaded image file to $target.');\n                    return false;\n                }\n            } else if ( ! empty($CI->response->meta->received_data->attributes->filename)) {\n                $sql = 'INSERT INTO `image` VALUES (NULL, ?, ?, ?, ?, ?, NOW())';\n                $data = array(intval($CI->response->meta->id),\n                        $CI->response->meta->received_data->attributes->name,\n                        $CI->response->meta->received_data->attributes->filename,\n                        $CI->response->meta->received_data->attributes->orientation,\n                        $CI->user->full_name);\n                $this->db->query($sql, $data);\n                return true;\n            } else {\n                $log->severity = 5;\n                $log->summary = 'No file uploaded, nor selected';\n                $log->detail = 'No file was uploaded, nor selected from the existing files.';\n                $log->status = 'error';\n                stdlog($log);\n                log_error('ERR-0038', 'm_devices::sub_resource_create', 'No file uploaded, nor selected.');\n                return false;\n            }\n        } else if ($sub_resource === 'application') {\n            $sql = \"INSERT INTO application VALUES (NULL, ?, ?, 'y', ?, NOW())\";\n            $data = array(intval($CI->response->meta->id),\n                            intval($CI->response->meta->received_data->attributes->{'applications_id'}),\n                            $CI->user->full_name);\n            $this->db->query($sql, $data);\n            return true;\n        } else if ($sub_resource === 'cluster') {\n            $sql = \"INSERT INTO cluster VALUES (NULL, ?, ?, ?, 'y', ?, NOW())\";\n            $data = array(intval($CI->response->meta->id),\n                            intval($CI->response->meta->received_data->attributes->{'clusters_id'}),\n                            $CI->response->meta->received_data->attributes->{'role'},\n                            $CI->user->full_name);\n            $this->db->query($sql, $data);\n            return true;\n        } else {\n            $log->summary = 'sub_resource not equal to attachment, credential or image - exiting.';\n            stdlog($log);\n                log_error('ERR-0021', 'm_devices::sub_resource_create', 'sub_resource not equal to attachment, credential or image.');\n            return false;\n        }\n    }\n\n    /**\n     * Count the number of rows a user is allowed to see\n     * @return int The count\n     */\n    public function count()\n    {\n        $CI = & get_instance();\n        $org_list = implode(',', array_unique(array_merge($CI->user->orgs, $CI->m_orgs->get_user_descendants($CI->user->id))));\n        $sql = \"SELECT COUNT(id) AS `count` FROM system WHERE org_id IN ({$org_list})\";\n        $result = $this->run_sql($sql, array());\n        return intval($result[0]->count);\n    }\n\n    /**\n     * [collection description]\n     * @param  [type] $user_id  [description]\n     * @param  [type] $response [description]\n     * @return [type]           [description]\n     */\n    public function collection($user_id = null, $response = null)\n    {\n        $CI = & get_instance();\n        if (! empty($user_id)) {\n            $org_list = implode(',', array_unique(array_merge($CI->user->orgs, $CI->m_orgs->get_user_descendants($user_id))));\n            $sql = \"SELECT * FROM system WHERE org_id IN ({$org_list})\";\n            $result = $this->run_sql($sql, array());\n            $result = $this->format_data($result, 'system');\n            return $result;\n        }\n        if (! empty($response)) {\n            $CI->response->meta->total = $this->count();\n            $sql = \"SELECT {$CI->response->meta->internal->properties}, orgs.name AS `orgs.name` FROM system LEFT JOIN orgs ON (system.org_id = orgs.id) \" .\n                    $CI->response->meta->internal->join . ' ' .\n                    $CI->response->meta->internal->filter . ' ' .\n                    $CI->response->meta->internal->groupby . ' ' .\n                    $CI->response->meta->internal->sort . ' ' .\n                    $CI->response->meta->internal->limit;\n            $result = $this->run_sql($sql, array());\n            $result = $this->format_data($result, 'system');\n            #$CI->response->data = $this->format_data($result, 'system');\n            #$CI->response->meta->filtered = count($CI->response->data);\n\n            if (isset($result[0]->attributes->{'system.type'}) and isset($result[0]->attributes->{'system.last_seen_by'})) {\n                for ($i=0; $i < count($result); $i++) {\n                    # BAD\n                    if ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'nmap' and ($result[$i]->{'attributes'}->{'system.type'} === 'unclassified' or $result[$i]->{'attributes'}->{'system.type'} === 'unknown')) {\n                        $result[$i]->attributes->audit_class = 'fa fa-times text-danger';\n                        $result[$i]->attributes->audit_text = 'Nmap discovered, data retrieval will be very limited.';\n\n                    # NOT GOOD\n                    } else if ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'nmap' and $result[$i]->{'attributes'}->{'system.type'} !== 'unclassified' and $result[$i]->{'attributes'}->{'system.type'} !== 'unknown') {\n                        $result[$i]->attributes->audit_class = 'fa fa-exclamation-triangle text-warning';\n                        $result[$i]->attributes->audit_text = 'Last discovery only Nmap worked. This may be an issue, or it may be a device of a type we cannot audit.';\n\n                    } else if ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'cloud') {\n                        #$result[$i]->attributes->audit_class = 'fa fa-times text-info';\n                        $result[$i]->attributes->audit_class = 'fa fa-exclamation-triangle text-warning';\n                        $result[$i]->attributes->audit_text = 'Cloud import, data retrieval will be very limited.';\n\n                    } else if ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'integrations') {\n                        #$result[$i]->attributes->audit_class = 'fa fa-times text-info';\n                        $result[$i]->attributes->audit_class = 'fa fa-exclamation-triangle text-warning';\n                        $result[$i]->attributes->audit_text = 'Integration import, data retrieval will be very limited.';\n\n                    } else if ($result[$i]->{'attributes'}->{'system.type'} === 'computer' and ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'ssh' or $result[$i]->{'attributes'}->{'system.last_seen_by'} === 'windows' or $result[$i]->{'attributes'}->{'system.last_seen_by'} === 'wmi' or $result[$i]->{'attributes'}->{'system.last_seen_by'} === 'snmp')) {\n                        $result[$i]->attributes->audit_class = 'fa fa-exclamation-triangle text-warning';\n                        $result[$i]->attributes->audit_text = 'Partially discovered computer. Data retrieval limited.';\n\n                    } else if ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'web form') {\n                        $result[$i]->attributes->audit_class = 'fa fa-exclamation-triangle text-warning';\n                        $result[$i]->attributes->audit_text = 'Manually created ' . $result[$i]->{'attributes'}->{'system.type'} . '. Data retrieval limited.';\n\n                    # GOOD\n                    } else if ($result[$i]->{'attributes'}->{'system.type'} === 'computer' and ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'audit_wmi' or $result[$i]->{'attributes'}->{'system.last_seen_by'} === 'audit_ssh')) {\n                        $result[$i]->attributes->audit_class = 'fa fa-check text-success';\n                        $result[$i]->attributes->audit_text = 'Discovered and audited computer.';\n\n                    } else if ($result[$i]->{'attributes'}->{'system.type'} === 'computer' and $result[$i]->{'attributes'}->{'system.last_seen_by'} === 'audit') {\n                        $result[$i]->attributes->audit_class = 'fa fa-check text-success';\n                        $result[$i]->attributes->audit_text = 'Audited computer.';\n\n                    } else if ($result[$i]->{'attributes'}->{'system.type'} !== 'computer' and !empty($result[$i]->{'attributes'}->{'system.snmp_oid'})) {\n                        $result[$i]->attributes->audit_class = 'fa fa-check text-success';\n                        $result[$i]->attributes->audit_text = 'Discovered and audited ' . $result[$i]->{'attributes'}->{'system.type'} . '.';\n\n                    # BAD - FALLBACK\n                    } else {\n                        $result[$i]->attributes->audit_class = 'fa fa-question text-danger';\n                        $result[$i]->attributes->audit_text = 'Limited information available.';\n                    }\n                }\n            }\n            $CI->response->data = $result;\n            $CI->response->meta->filtered = count($CI->response->data);\n\n        }\n    }\n\n    /**\n     * [collection_group_by description]\n     * @return [type] [description]\n     */\n    public function collection_group_by()\n    {\n        $CI = & get_instance();\n        $sql = \"SELECT id, COUNT(*) AS `count`, {$CI->response->meta->groupby} FROM system {$CI->response->meta->internal->groupby} {$CI->response->meta->internal->sort} {$CI->response->meta->internal->limit}\";\n        if (!empty($CI->response->meta->internal->properties)) {\n            $sql = \"SELECT {$CI->response->meta->internal->properties}, COUNT(*) AS `count`, {$CI->response->meta->groupby} FROM system {$CI->response->meta->internal->groupby} {$CI->response->meta->internal->sort} {$CI->response->meta->internal->limit}\";\n        }\n        $result = $this->run_sql($sql, array());\n        $result = $this->format_data($result, 'devices');\n        return $result;\n    }\n\n    /**\n     * [collection_sub_resource description]\n     * @return [type] [description]\n     */\n    public function collection_sub_resource()\n    {\n        $CI = & get_instance();\n        $filter = $this->_build_filter();\n        if (is_array($CI->user->org_list)) {\n            $CI->user->org_list = implode(',', $CI->user->org_list);\n        }\n        if ( ! empty($CI->response->meta->groupby)) {\n            if ( ! empty($CI->response->meta->internal->properties)) {\n                $CI->response->meta->internal->properties .= ', COUNT(*) AS `count`';\n            } else {\n                $CI->response->meta->internal->properties = 'COUNT(*) AS `count`';\n            }\n            // get the total count (with a GROUPBY)\n            $sql = \"SELECT COUNT(*) AS `count` FROM `{$CI->response->meta->sub_resource}` LEFT JOIN system ON (system.id = `{$CI->response->meta->sub_resource}`.system_id) WHERE system.org_id IN (\" . $CI->user->org_list . \") {$filter} {$CI->response->meta->internal->groupby}\";\n            $result = $this->run_sql($sql, array());\n            $CI->response->meta->total = intval(COUNT($result));\n        } else {\n            // get the total count (without a LIMIT and GROUPBY)\n            $sql = \"SELECT COUNT(*) AS `count` FROM `{$CI->response->meta->sub_resource}` LEFT JOIN system ON (system.id = `{$CI->response->meta->sub_resource}`.system_id) WHERE system.org_id IN (\" . $CI->user->org_list . \") {$filter}\";\n            $result = $this->run_sql($sql, array());\n            $CI->response->meta->total = 0;\n            if ( ! empty($result[0]->count)) {\n                $CI->response->meta->total = intval($result[0]->count);\n            }\n        }\n        if ($CI->response->meta->internal->properties === '*' OR $CI->response->meta->internal->properties === $CI->response->meta->sub_resource.'.*') {\n            $columns = $this->get_all_columns($CI->response->meta->sub_resource);\n        } else {\n            $columns = $CI->response->meta->internal->properties;\n        }\n        $sql = \"SELECT {$columns}, system.name AS `system.name` FROM `{$CI->response->meta->sub_resource}` LEFT JOIN system ON (system.id = `{$CI->response->meta->sub_resource}`.system_id) WHERE system.org_id IN ({$CI->user->org_list}) {$filter} {$CI->response->meta->internal->groupby} {$CI->response->meta->internal->sort} {$CI->response->meta->internal->limit}\";\n        $result = $this->run_sql($sql, array());\n        $result = $this->format_data($result, $CI->response->meta->sub_resource);\n        if ($CI->response->meta->sub_resource === 'credential' && count($result) > 0) {\n            foreach ($result as &$item) {\n                if ( ! empty($item->attributes->credentials)) {\n                    $item->attributes->credentials = json_decode(simpleDecrypt($item->attributes->credentials));\n                }\n            }\n        }\n\n        unset($item);\n        foreach ($result as &$item) {\n            $item->links->self = $CI->config->config['base_url'] . 'index.php/devices?sub_resource=' . $CI->response->meta->sub_resource;\n        }\n        unset($item);\n        return $result;\n    }\n\n    /**\n     * [report description]\n     * @return [type] [description]\n     */\n    public function report()\n    {\n        $CI = & get_instance();\n        $filter = $this->_build_filter();\n        $join = $this->_build_join();\n\n        $sql = \"SELECT system.id FROM system {$join} WHERE system.org_id IN (\" . $CI->user->org_list . \") {$filter} {$CI->response->meta->internal->groupby}\";\n        $result = $this->run_sql($sql, array());\n        foreach ($result as $temp) {\n            $temp_ids[] = $temp->id;\n        }\n        $system_id_list = implode(',', $temp_ids);\n        unset($temp, $temp_ids);\n\n        $sql = 'SELECT * FROM oa_report WHERE report_id = ' . @intval($CI->response->meta->sub_resource_id);\n        $result = $this->run_sql($sql, array());\n        $report = $result[0];\n        $CI->response->meta->sub_resource_name = $report->report_name;\n                         \n        // not how reports should be used\n        $report->report_sql = str_ireplace('LEFT JOIN oa_group_sys ON system.id = oa_group_sys.system_id', '', $report->report_sql);\n        // not how reports should be used\n        $report->report_sql = str_ireplace('LEFT JOIN oa_group_sys ON oa_group_sys.system_id = system.id', '', $report->report_sql);\n        // not how reports should be used\n        $report->report_sql = str_ireplace('LEFT JOIN oa_group_sys ON (system.id = oa_group_sys.system_id)', '', $report->report_sql);\n        // THIS is how reports _should_ be used\n        $report->report_sql = str_ireplace('LEFT JOIN oa_group_sys ON (oa_group_sys.system_id = system.id)', '', $report->report_sql);\n        $report->report_sql = str_ireplace('oa_group_sys.group_id = @group', 'system.id IN (' . $system_id_list . ')', $report->report_sql);\n        $report->report_sql = str_ireplace('system.id = oa_group_sys.system_id', 'system.id IN (' . $system_id_list . ')', $report->report_sql);\n\n        $result = $this->run_sql($report->report_sql, array());\n        $CI->response->meta->total = count($result);\n        if ( ! empty($CI->response->meta->limit)) {\n            $result = array_splice($result, $CI->response->meta->offset, $CI->response->meta->limit);\n        }\n        $result = $this->format_data($result, 'devices');\n        return($result);\n    }\n\n    /**\n     * [query description]\n     * @return [type] [description]\n     */\n    public function query()\n    {\n        $CI = & get_instance();\n\n        $group_id = 0;\n        if (is_array($CI->response->meta->filter)) {\n            for ($i=0; $i < count($CI->response->meta->filter); $i++) {\n                if ($CI->response->meta->filter[$i]->name === 'group') {\n                    $group_id = intval($CI->response->meta->filter[$i]->value);\n                    unset($CI->response->meta->filter[$i]);\n                }\n            }\n        }\n\n        $filter = $this->_build_filter();\n        $join = $this->_build_join();\n\n        $sql = 'SELECT * FROM queries WHERE id = ' . @intval($CI->response->meta->sub_resource_id);\n        $result = $this->run_sql($sql, array());\n        $query = $result[0];\n        $CI->response->meta->sub_resource_name = $query->menu_category . ' - ' . $query->name;\n\n        if ( ! empty($group_id)) {\n            $my_sql = '/* m_devices_components::read */' . 'SELECT `sql` FROM `groups` WHERE `id` = ' . intval($group_id);\n            $my_query = $this->db->query($my_sql);\n            $result = $my_query->result();\n            $group_sql = $result[0]->sql;\n            $device_sql = \"WHERE system.id IN (SELECT system.id FROM system WHERE system.org_id IN ({$CI->user->org_list}))\";\n            $group_sql = str_replace('WHERE @filter', $device_sql, $group_sql);\n            $group_sql = \" AND system.id IN ({$group_sql})\";\n        } else {\n            $group_sql = '';\n        }\n\n        $device_sql = \"WHERE system.id IN (SELECT system.id FROM system {$join} WHERE system.org_id IN ({$CI->user->org_list}) {$filter} {$CI->response->meta->internal->groupby})\";\n        $sql = $query->sql;\n        $sql = str_replace('WHERE @filter', $device_sql . $group_sql, $sql);\n        $result = $this->run_sql($sql, array());\n        $CI->response->meta->total = 0;\n\n        if ( ! empty($result)) {\n            for ($i=0; $i < count($result); $i++) {\n                foreach ($CI->response->meta->filter as $item) {\n                    if (isset($result[$i]->{$item->name})) {\n                        if ($item->operator === '=') {\n                            if ($result[$i]->{$item->name} !== $item->value) {\n                                unset($result[$i]);\n                            }\n                        }\n                        if ($item->operator === '!=') {\n                            if ($result[$i]->{$item->name} === $item->value) {\n                                unset($result[$i]);\n                            }\n                        }\n                    }\n                }\n            }\n            $CI->response->meta->total = count($result);\n        }\n\n        if ( ! empty($CI->response->meta->limit) && ! empty($result)) {\n            $result = array_splice($result, $CI->response->meta->offset, $CI->response->meta->limit);\n        }\n        $result = $this->format_data($result, 'devices');\n        return($result);\n    }\n\n    /**\n     * [group description]\n     * @return [type] [description]\n     */\n    public function group()\n    {\n        $CI = & get_instance();\n        $filter = $this->_build_filter();\n\n        $sql = 'SELECT * FROM groups WHERE id = ' . @intval($CI->response->meta->sub_resource_id);\n        $result = $this->run_sql($sql, array());\n        $group = $result[0];\n        $CI->response->meta->sub_resource_name = $group->name;\n\n        $filter = '';\n        if ( ! empty($CI->response->meta->filter)) {\n            foreach ($CI->response->meta->filter as $filter_entry) {\n                $filter .= ' AND ' . $filter_entry->name . ' ' . $filter_entry->operator . ' ' . '\"' . $filter_entry->value . '\"';\n            }\n        }\n\n        $device_sql = \"WHERE system.id IN (SELECT system.id FROM system WHERE system.org_id IN ({$CI->user->org_list}) {$filter}\";\n        if ( ! empty($CI->response->meta->requestor)) {\n            $device_sql = \"WHERE system.id IN (SELECT system.id FROM system WHERE system.org_id IN ({$CI->user->org_list}) AND system.oae_manage = 'y') {$filter}\";\n        }\n\n        $sql = $group->sql;\n        $sql = str_replace('WHERE @filter', $device_sql, $sql);\n        $sql = str_ireplace('SELECT DISTINCT(system.id)', 'SELECT system.id AS `system.id`, system.icon AS `system.icon`, system.type AS `system.type`, system.name AS `system.name`, system.domain AS `system.domain`, system.ip AS `system.ip`, system.description AS `system.description`, system.manufacturer AS `system.manufacturer`, system.os_family AS `system.os_family`, system.status AS `system.status`', $sql);\n        $result = $this->run_sql($sql, array());\n\n        if ( ! empty($result)) {\n            for ($i=0; $i < count($result); $i++) {\n                foreach ($CI->response->meta->filter as $item) {\n                    if (isset($result[$i]->{$item->name})) {\n                        if ($item->operator === '=') {\n                            if ($result[$i]->{$item->name} !== $item->value) {\n                                unset($result[$i]);\n                            }\n                        }\n                        if ($item->operator === '!=') {\n                            if ($result[$i]->{$item->name} === $item->value) {\n                                unset($result[$i]);\n                            }\n                        }\n                    }\n                }\n            }\n            $CI->response->meta->total = count($result);\n        } else {\n            $CI->response->meta->total = 0;\n        }\n\n        if ( ! empty($CI->response->meta->limit) && ! empty($result)) {\n            $result = array_splice($result, $CI->response->meta->offset, $CI->response->meta->limit);\n        }\n        $result = $this->format_data($result, 'devices');\n        return($result);\n    }\n\n    /**\n     * [update description]\n     * @param  [type] $device [description]\n     * @return [type]         [description]\n     */\n    public function update($device = null)\n    {\n        $CI = & get_instance();\n        $this->db->db_debug = false;\n\n        // account for a single id or multiple id's\n        $ids = array();\n\n        if ( ! is_null($device)) {\n            if (empty($device->id)) {\n                // TODO - throw an error\n                return;\n            } else {\n                $ids[] = $device->id;\n            }\n            if ( ! empty($device->last_seen_by)) {\n                $source = $device->last_seen_by;\n            } else {\n                $source = 'user';\n            }\n            $received_data = $device;\n        } else {\n            if ( ! empty($CI->response->meta->id)) {\n                $ids[] = $CI->response->meta->id;\n            } elseif ( ! empty($CI->response->meta->ids)) {\n                $ids = explode(',', $CI->response->meta->ids);\n            }\n            // set our last seen by\n            if ( ! empty($CI->response->received_data->attributes->last_seen_by)) {\n                $source = $CI->response->received_data->attributes->last_seen_by;\n            } else {\n                $source = 'user';\n            }\n            $received_data = $CI->response->meta->received_data->attributes;\n        }\n\n        if ( ! empty($CI->response->meta->received_data->attributes->status) && $CI->response->meta->received_data->attributes->status === 'deleted' && ! empty($CI->config->config['device_auto_delete']) && $CI->config->config['device_auto_delete'] === 'y') {\n            $sql = 'DELETE FROM `system` WHERE id IN ( ' . implode(',', $ids) . ')';\n            $data = array();\n            $this->run_sql($sql, $data);\n            return;\n        }\n\n        $CI->load->model('m_edit_log');\n        $CI->load->model('m_orgs');\n        $system_fields = implode(' ', $this->db->list_fields('system'));\n        $system_fields .= ' ';\n        $sql = 'SELECT id, name, group_id, org_id FROM fields';\n        $fields = $this->run_sql($sql, array());\n\n        // loop through our supplied data and test if it's a custom field or a system field,\n        // then update any supplied device id's\n        foreach ($received_data as $key => $value) {\n            $previous_value = '';\n\n            // check our custom fields\n            if ( ! empty($fields)) {\n                foreach ($fields as $field) {\n                    if ((string)$key === (string)$field->name) {\n                        // we have a custom field\n                        // check if this device is in the org and group associated with the field\n                        $field_orgs = $CI->m_orgs->get_children($field->org_id);\n                        $field_orgs[] = $field->org_id;\n                        $field_orgs = implode(',', $field_orgs);\n                        $sql = 'SELECT `sql` FROM `groups` WHERE id = ?';\n                        $data = array($field->group_id);\n                        $result = $this->run_sql($sql, $data);\n                        $test_sql = $result[0]->sql;\n                        if ( ! empty($CI->response->meta->requestor)) {\n                            $test_sql = str_replace('@filter', 'system.org_id IN (' . $field_orgs . ') AND system.oae_manage = \"y\"', $test_sql);\n                        } else {\n                            $test_sql = str_replace('@filter', 'system.org_id IN (' . $field_orgs . ')', $test_sql);\n                        }\n                        $test_sql .= ' AND system.id = ?';\n                        // get the original value (if it exists)\n                        foreach ($ids as $id) {\n                            $result = $this->run_sql($test_sql, array(intval($id)));\n                            // Only proceed if our system.id is in the fields assigned group\n                            if ( ! empty($result)) {\n                                $sql = 'SELECT id, value, fields_id FROM field WHERE system_id = ? AND fields_id = ?';\n                                $result = $this->run_sql($sql, array(intval($id), $field->id));\n                                if (isset($result[0]->value)) {\n                                    // If our column exists, it must have a value (even blank) - update it\n                                    $previous_value = $result[0]->value;\n                                    $sql = 'UPDATE field SET value = ?, timestamp = NOW() WHERE id = ?';\n                                    $result = $this->run_sql($sql, array((string)$value, $result[0]->id));\n                                    $CI->m_edit_log->create(intval($id), 'Field data was updated', 'field', $field->name, '', $value, $previous_value);\n                                } else {\n                                    // The row doesn't exist - insert a new one\n                                    $sql = 'INSERT INTO field VALUES (NULL, ?, ?, NOW(), ?)';\n                                    $result = $this->run_sql($sql, array(intval($id), intval($field->id), (string)$value));\n                                    $previous_value = '';\n                                    $CI->m_edit_log->create(intval($id), 'Field data was created', 'field', $field->name, '', $value, '');\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // now check the regular system table fields\n            if ((is_string($value) or is_int($value)) && (string)$value === '' && ($key === 'system.id' OR $key === 'id' OR $key === 'system.oae_manage' OR $key === 'oae_manage' OR $key === 'system.status' OR $key === 'status' OR $key === 'system.nmis_manage' OR $key === 'nmis_manage' OR $key === 'system.environment' OR $key === 'environment' OR $key === 'system.location_id' OR $key === 'location_id' OR $key === 'system.org_id' OR $key === 'org_id' OR $key === 'system.type' OR $key === 'type')) {\n                // We cannot set these fields to blank, they MUST contain a value\n\n            } else {\n                if (stripos($system_fields, ' '.$key.' ') !== false) {\n                    // we have a field from the system table\n                    foreach ($ids as $id) {\n                        // get the current value\n                        $sql = \"SELECT `{$key}` AS `{$key}` FROM `system` WHERE `id` = ?\";\n                        $data = array(intval($id));\n                        $result = $this->run_sql($sql, $data);\n                        $previous_value = @$result[0]->{$key};\n\n                        // get the current entry in the edit_log\n                        $sql = \"SELECT * FROM `edit_log` WHERE `system_id` = ? AND `db_table` = 'system' AND `db_column` = ? ORDER BY `timestamp` DESC LIMIT 1\";\n                        $data = array(intval($id), \"{$key}\");\n                        $result = $this->run_sql($sql, $data);\n                        if ( ! empty($result[0]->weight)) {\n                            $previous_weight = intval($result[0]->weight);\n                        } else {\n                            $previous_weight = 10000;\n                        }\n                        // calculate the weight\n                        $weight = intval($this->weight($source));\n                        if ((is_string($value) or is_int($value)) && $weight <= $previous_weight && (string)$value !== (string)$previous_value) {\n                            if ($key !== 'id' && $key !== 'last_seen' && $key !== 'last_seen_by' && $key !== 'first_seen') {\n                                // update the system table\n                                $sql = \"UPDATE `system` SET `{$key}` = ? WHERE id = ?\";\n                                $data = array((string)$value, intval($id));\n                                $this->run_sql($sql, $data);\n                                // insert an entry into the edit table\n                                $sql = \"INSERT INTO edit_log VALUES (NULL, ?, ?, 'Data was changed', ?, ?, 'system', ?, NOW(), ?, ?)\";\n                                $data = array(@intval($CI->user->id), intval($id), (string)$source, intval($weight), (string)$key, (string)$value, (string)$previous_value);\n                                $this->run_sql($sql, $data);\n                                // Special case the 'type' - set the icon to match\n                                if ($key === 'type') {\n                                    $sql = \"UPDATE `system` SET `icon` = '\" . str_replace(' ', '_', $value) . \"' WHERE id = ?\";\n                                    $data = array(intval($id));\n                                    $this->run_sql($sql, $data);\n                                }\n                            }\n                        } else {\n                            // We have an existing edit_log entry with a more important change - don't touch the `system`.`$key` value\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n    * Pass in a string detailing what has attempted to set a value and receive a result containing the weight\n    *\n    * @param   string $set_by The source\n    * @access  public\n    * @return  int the integer containing the weighted value\n    */\n    public function weight($set_by = 'user')\n    {\n\n        // We assign a weight to the submitted data and compare it to what we already have for each column\n        // Valid weights and the sources are:\n        // 1000 - user or import (import should set as user as well)\n        // 1500 - rules\n        // 2000 - audit, audit_ssh, audit_wmi, windows, wmi\n        // 3000 - snmp, ssh, nmis (note - ssh and snmp because they may contain data from nmap)\n        // 4000 - ipmi\n        // 5000 - ad (active directory)\n        // 6000 - nmap\n        // The lower the value, the higher the priority is given\n\n        switch ($set_by) {\n            case 'user':\n                $weight = 1000;\n                break;\n\n            case 'rules':\n                $weight = 1500;\n                break;\n\n            case 'audit':\n            case 'audit_ssh':\n            case 'audit_wmi':\n            case 'windows':\n            case 'wmi':\n                $weight = 2000;\n                break;\n\n            case 'cloud':\n            case 'nmis':\n            case 'snmp':\n            case 'ssh':\n                $weight = 3000;\n                break;\n\n            case 'ipmi':\n            case 'integrations':\n                $weight = 4000;\n                break;\n\n            case 'ad':\n            case 'active directory':\n                $weight = 5000;\n                break;\n\n            case 'nmap':\n                $weight = 6000;\n                break;\n            \n            default:\n                $weight = 10000;\n                break;\n        }\n        return($weight);\n    }\n\n    /**\n    * Pass in a resultset and have the integer columns return as INT types, not strings\n    * Columns named id, free, size, speed, total or used will be converted to integer types.\n    * Columns names ending in _id, _count, _percent or _Size will be converted to integer types\n    *\n    * @param   array $result the result of a query, an array of objects\n    * @access  public\n    * @return  array an array of objects with the integer columns set as int types\n    */\n    public function from_db($result)\n    {\n        unset($item);\n        foreach ($result as &$item) {\n            foreach ($item as $key => $value) {\n                if ($key === 'id' OR $key === 'free' OR $key === 'size' OR $key === 'speed' OR $key === 'total' OR $key === 'used' OR\n                strrpos($key, '_id') === strlen($key)-3 OR strrpos($key, '_count') === strlen($key)-6 OR\n                strrpos($key, '_percent') === strlen($key)-8 OR strrpos($key, '_size') === strlen($key)-5 ) {\n                    $item->$key = (int) intval($value);\n                }\n            }\n        }\n        unset($item);\n        return($result);\n    }\n\n    /**\n    * Insert a new device into the system table using whatever values we have and insert corresponding rows into the sys_edit_log table\n    *\n    * @param array $details the array of attributes from the system table\n    * @access  public\n    *\n    * @return string $id which is the id of the device in the system table\n    */\n    public function create(&$details)\n    {\n\n        // nasty hack because when a simplexmlobject is sent (ie, from audit_windows.vbs)\n        // the foreach iterators below don't work.\n        // if we cast it to an \"object\", it stays as a SimpleXMLObject and doesn't work\n        // because our XML is quite simple, we can cast it to an array and back to a 'normal'\n        // object and the foreach below works.\n\n        $details = (object) $details;\n        $details = (array) $details;\n        $details = (object) $details;\n        // this is an insert - we do NOT want a system.id\n        unset($details->id);\n\n        // get a name we can use\n        if ( ! empty($details->name)) {\n            $name = $details->name;\n        } elseif ( ! empty($details->hostname)) {\n            $name = $details->hostname;\n            $details->name = $details->hostname;\n        } elseif ( ! empty($details->sysName)) {\n            $name = $details->sysName;\n            $details->name = $details->sysName;\n        } elseif ( ! empty($details->dns_hostname)) {\n            $name = $details->dns_hostname;\n            $details->name = $details->dns_hostname;\n        } elseif ( ! empty($details->ip)) {\n            $name = $details->ip;\n            $details->name = $details->ip;\n        }\n\n        if ( ! isset($details->ip)) {\n            $details->ip = '';\n        }\n\n        $log_details = new stdClass();\n        $log_details->ip = ip_address_from_db($details->ip);\n        $log_details->message = 'System insert start for '.ip_address_from_db($details->ip);\n        $log_details->severity = 7;\n        $log_details->file = 'system';\n        stdlog($log_details);\n\n        // remove some characters from the OS string\n        if ( ! empty($details->os_name)) {\n            $details->os_name = str_ireplace('(r)', '', $details->os_name);\n            $details->os_name = str_ireplace('(tm)', '', $details->os_name);\n        }\n\n\n        if (empty($details->status)) {\n            $details->status = 'production';\n        }\n        if (empty($details->type)) {\n            $details->type = 'unknown';\n        } else {\n            $details->type = strtolower($details->type);\n        }\n        if (empty($details->environment)) {\n            $details->environment = 'production';\n        }\n\n        // we now set a default location - 1 the location_id\n        if ( ! isset($details->location_id)) {\n            $details->location_id = 1;\n        }\n\n        // Set the form factor to virtual if required\n        if ( ! empty($details->manufacturer)) {\n            if ((strripos($details->manufacturer, 'vmware') !== false) OR (strripos($details->manufacturer, 'parallels') !== false) OR (strripos($details->manufacturer, 'virtual') !== false)) {\n                if ( ! isset($details->class) OR $details->class !== 'hypervisor') {\n                    $details->form_factor = 'Virtual';\n                }\n            }\n        }\n        if ( ! empty($details->model)) {\n            if (strripos($details->model, 'bhyve') !== false) {\n                if ( ! isset($details->class) OR $details->class !== 'hypervisor') {\n                    $details->form_factor = 'Virtual';\n                }\n            }\n        }\n\n        // Pad the IP address\n        if ( ! empty($details->ip)) {\n            $details->ip = ip_address_to_db($details->ip);\n        }\n\n        if ( ! empty($details->hostname) && ! empty($details->domain) && empty($details->fqdn)) {\n            $details->fqdn = $details->hostname . '.' . $details->domain;\n        }\n\n        $sql = 'SHOW COLUMNS FROM system';\n        $columns = $this->run_sql($sql, array());\n\n        $sql = 'INSERT INTO system ( ';\n        foreach ($details as $key => $value) {\n            if ((is_string($value) or is_string($value)) && $key > '') {\n                // need to iterate through available columns and only insert where $key == valid column name\n                foreach ($columns as $column) {\n                    if ((string)$key === (string)$column->Field) {\n                        $sql .= $key.', ';\n                    }\n                }\n            }\n        }\n        $sql = mb_substr($sql, 0, mb_strlen($sql)-2);\n        $sql .= ' ) VALUES ( ';\n        foreach ($details as $key => $value) {\n            if ((is_string($value) or is_string($value)) && $key != '') {\n                foreach ($columns as $column) {\n                    if ((string)$key === (string)$column->Field) {\n                        $sql .= \"'\".mysqli_real_escape_string($this->db->conn_id, str_replace('\"', '', $value)).\"', \";\n                    }\n                }\n            }\n        }\n        $sql = mb_substr($sql, 0, mb_strlen($sql)-2);\n        $sql .= ')';\n\n        $query = $this->db->query($sql);\n        $details->id = $this->db->insert_id();\n\n        // set the weight for these $details\n        $weight = $this->weight($details->last_seen_by);\n\n        // insert entries into the edit_log table for these $details columns\n        foreach ($details as $key => $value) {\n            if ($key > '') {\n                foreach ($columns as $column) {\n                    if ((string)$key === (string)$column->Field) {\n                        if (is_string($value) or is_string($value)) {\n                            $sql = \"INSERT INTO edit_log VALUES (NULL, 0, ?, '', ?, ?, 'system', ?, ?, ?, ?)\";\n                            $data = array(intval($details->id), \"{$details->last_seen_by}\", \"{$weight}\", \"{$key}\", \"{$details->last_seen}\", \"{$value}\", '');\n                            $query = $this->db->query($sql, $data);\n                        }\n                    }\n                }\n            }\n        }\n\n        // update the device icon\n        $this->reset_icons($details->id);\n\n        // insert a subnet so we have a default\n        if ( ! isset($details->subnet) OR $details->subnet === '') {\n            $details->subnet = '0.0.0.0';\n        }\n\n        $log_details->ip = ip_address_from_db($details->ip);\n        $log_details->message = 'System insert end for '.ip_address_from_db($details->ip);\n        stdlog($log_details);\n        unset($log_details);\n        return $details->id;\n    }\n\n    /**\n    * Reset the icon for a single device or all devices.\n    *\n    * @param int $id The system.id of a given system\n    * @access  public\n    *\n    * @return int returns the count of the number of icons affected\n    */\n    public function reset_icons($id = '')\n    {\n        if ($id !== '') {\n            $sql = 'SELECT id, type, os_name, os_family, os_group, manufacturer FROM system WHERE id = ' . intval($id);\n        } else {\n            $sql = 'SELECT id, type, os_name, os_family, os_group, manufacturer FROM system';\n        }\n        $query = $this->db->query($sql);\n        $result = $query->result();\n        $count = $query->num_rows();\n        // we set computer icons by OS, everything else by type\n        foreach ($result as $details) {\n            if ($details->type === 'computer') {\n                // determine icon for computer\n                // most generic to most specific\n                $details->icon = 'computer';\n\n                // manufacturer based\n                if (strripos($details->manufacturer, 'apple') !== false) {\n                    $details->icon = 'apple';\n                }\n                if (strripos($details->manufacturer, 'vmware') !== false) {\n                    $details->icon = 'vmware';\n                }\n                if (strripos($details->manufacturer, 'xen') !== false) {\n                    $details->icon = 'xen';\n                }\n                if (strripos($details->manufacturer, 'google') !== false) {\n                    $details->icon = 'google_kvm';\n                }\n\n                // os_group based\n                if (strripos($details->os_group, 'linux') !== false) {\n                    $details->icon = 'linux';\n                }\n                if (strripos($details->os_group, 'apple') !== false) {\n                    $details->icon = 'apple';\n                }\n                if (strripos($details->os_group, 'windows') !== false) {\n                    $details->icon = 'windows';\n                }\n\n                // os name based\n                if ((strripos($details->os_name, 'osx') !== false) OR (strpos(strtolower($details->os_name), 'ios') !== false)) {\n                    $details->icon = 'apple';\n                }\n                if (strripos($details->os_name, 'aix') !== false) {\n                    $details->icon = 'aix';\n                }\n                if (strripos($details->os_name, 'amazon') !== false) {\n                    $details->icon = 'amazon';\n                }\n                if (strripos($details->os_name, 'arch') !== false) {\n                    $details->icon = 'arch';\n                }\n                if (strripos($details->os_name, 'bsd') !== false) {\n                    $details->icon = 'bsd';\n                }\n                if (strripos($details->os_name, 'centos') !== false) {\n                    $details->icon = 'centos';\n                }\n                if (strripos($details->os_name, 'debian') !== false) {\n                    $details->icon = 'debian';\n                }\n                if (strripos($details->os_name, 'fedora') !== false) {\n                    $details->icon = 'fedora';\n                }\n                if (strripos($details->os_name, 'hp-ux') !== false) {\n                    $details->icon = 'hp-ux';\n                }\n                if ((strripos($details->os_name, 'mandriva') !== false) OR (strripos($details->os_name, 'mandrake') !== false)) {\n                    $details->icon = 'mandriva';\n                }\n                if (strripos($details->os_name, 'mint') !== false) {\n                    $details->icon = 'mint';\n                }\n                if (strripos($details->os_name, 'novell') !== false) {\n                    $details->icon = 'novell';\n                }\n                if (strripos($details->os_name, 'oracle') !== false) {\n                    $details->icon = 'oracle';\n                }\n                if (strripos($details->os_name, 'slackware') !== false) {\n                    $details->icon = 'slackware';\n                }\n                if (strripos($details->os_name, 'solaris') !== false) {\n                    $details->icon = 'solaris';\n                }\n                if (strripos($details->os_name, 'solus') !== false) {\n                    $details->icon = 'solus';\n                }\n                if (strripos($details->os_name, 'suse') !== false) {\n                    $details->icon = 'suse';\n                }\n                if ((strripos($details->os_name, 'red hat') !== false) OR (strripos($details->os_name, 'redhat') !== false)) {\n                    $details->icon = 'redhat';\n                }\n                if (strripos($details->os_name, 'ubuntu') !== false) {\n                    $details->icon = 'ubuntu';\n                }\n                if (strripos($details->os_name, 'vmware') !== false) {\n                    $details->icon = 'vmware';\n                }\n                if (strripos($details->os_name, 'windows') !== false) {\n                    $details->icon = 'windows';\n                }\n                if (strripos($details->os_name, 'microsoft') !== false) {\n                    $details->icon = 'windows';\n                }\n            } else {\n                // device is not type=computer\n                // base the icon on the type\n                if (strpos($details->type, '|') === false) {\n                    // if the type does not contain a |, use it.\n                    // Nmap will often return a pipe separated list when it guesses\n                    $details->icon = str_replace(' ', '_', $details->type);\n                } else {\n                    // we have a pipe (likely an nmap list) so just just unknown\n                    $details->icon = 'unknown';\n                }\n            }\n\n            $sql = 'UPDATE system SET icon = ? WHERE id = ?';\n            $data = array(\"{$details->icon}\", intval($details->id));\n            $query = $this->db->query($sql, $data);\n        }\n\n        return ($count);\n    }\n\n    /**\n     * [update_devices_icons description]\n     * @param  string $id [description]\n     * @return [type]     [description]\n     */\n    public function update_devices_icons($id = '')\n    {\n        if ($id !== '') {\n            $sql = 'SELECT system.id, type, os_name, os_family, os_group, manufacturer FROM system LEFT JOIN oa_group_sys ON oa_group_sys.system_id = system.id WHERE oa_group_sys.group_id = ' . intval($id);\n        } else {\n            $sql = 'SELECT id, type, os_name, os_family, os_group, manufacturer FROM system';\n        }\n        $query = $this->db->query($sql);\n        $result = $query->result();\n        $count = $query->num_rows();\n        // we set computer icons by OS, everything else by type\n        foreach ($result as $details) {\n            if ($details->type === 'computer') {\n                // determine icon for computer\n                // most generic to most specific\n\n                // manufacturer based\n                if (strripos($details->manufacturer, 'apple') !== false) {\n                    $details->icon = 'apple';\n                }\n                if (strripos($details->manufacturer, 'vmware') !== false) {\n                    $details->icon = 'vmware';\n                }\n                if (strripos($details->manufacturer, 'xen') !== false) {\n                    $details->icon = 'xen';\n                }\n                if (strripos($details->manufacturer, 'google') !== false) {\n                    $details->icon = 'google_kvm';\n                }\n\n                // os_group based\n                if (strripos($details->os_group, 'linux') !== false) {\n                    $details->icon = 'linux';\n                }\n                if (strripos($details->os_group, 'apple') !== false) {\n                    $details->icon = 'apple';\n                }\n                if (strripos($details->os_group, 'windows') !== false) {\n                    $details->icon = 'windows';\n                }\n\n                // os name based\n                if ((strripos($details->os_name, 'osx') !== false) OR (strpos(strtolower($details->os_name), 'ios') !== false)) {\n                    $details->icon = 'apple';\n                }\n                if (strripos($details->os_name, 'aix') !== false) {\n                    $details->icon = 'aix';\n                }\n                if (strripos($details->os_name, 'amazon') !== false) {\n                    $details->icon = 'amazon';\n                }\n                if (strripos($details->os_name, 'bsd') !== false) {\n                    $details->icon = 'bsd';\n                }\n                if (strripos($details->os_name, 'centos') !== false) {\n                    $details->icon = 'centos';\n                }\n                if (strripos($details->os_name, 'debian') !== false) {\n                    $details->icon = 'debian';\n                }\n                if (strripos($details->os_name, 'fedora') !== false) {\n                    $details->icon = 'fedora';\n                }\n                if (strripos($details->os_name, 'hp-ux') !== false) {\n                    $details->icon = 'hp-ux';\n                }\n                if ((strripos($details->os_name, 'mandriva') !== false) OR (strripos($details->os_name, 'mandrake') !== false)) {\n                    $details->icon = 'mandriva';\n                }\n                if (strripos($details->os_name, 'mint') !== false) {\n                    $details->icon = 'mint';\n                }\n                if (strripos($details->os_name, 'novell') !== false) {\n                    $details->icon = 'novell';\n                }\n                if (strripos($details->os_name, 'oracle') !== false) {\n                    $details->icon = 'oracle';\n                }\n                if (strripos($details->os_name, 'slackware') !== false) {\n                    $details->icon = 'slackware';\n                }\n                if (strripos($details->os_name, 'suse') !== false) {\n                    $details->icon = 'suse';\n                }\n                if ((strripos($details->os_name, 'red hat') !== false) OR (strripos($details->os_name, 'redhat') !== false)) {\n                    $details->icon = 'redhat';\n                }\n                if (strripos($details->os_name, 'ubuntu') !== false) {\n                    $details->icon = 'ubuntu';\n                }\n                if (strripos($details->os_name, 'vmware') !== false) {\n                    $details->icon = 'vmware';\n                }\n                if (strripos($details->os_name, 'windows') !== false) {\n                    $details->icon = 'windows';\n                }\n                if (strripos($details->os_name, 'microsoft') !== false) {\n                    $details->icon = 'windows';\n                }\n            } else {\n                // device is not type=computer\n                // base the icon on the type\n                if (strpos($details->type, '|') === false) {\n                    // if the type does not contain a |, use it.\n                    // Nmap will often return a pipe separated list when it guesses\n                    $details->icon = str_replace(' ', '_', $details->type);\n                } else {\n                    // we have a pipe (likely an nmap list) so just just unknown\n                    $details->icon = 'unknown';\n                }\n            }\n            $sql = '/* m_devices::update_icons */ ' . 'UPDATE system SET icon = ? WHERE id = ?';\n            $data = array(\"{$details->icon}\", intval($details->id));\n            $query = $this->db->query($sql, $data);\n        }\n        return ($count);\n    }\n\n    /**\n     * [model_guess description]\n     * @param  [type] $device [description]\n     * @return [type]         [description]\n     */\n    public function model_guess($device)\n    {\n        if (stripos($device->manufacturer, 'Ubiquiti') !== false) {\n            if (stripos($device->sysDescr, 'UAP') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP';\n            }\n            if (stripos($device->sysDescr, 'UAP-LR') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-LR';\n            }\n            if (stripos($device->sysDescr, 'UAP-Pro') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-Pro';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-EDU') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-EDU';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-HD') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-HD';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-Lite') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-Lite';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-LR') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-LR';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-PRO') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-Pro';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-PRO-Gen2') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-Pro gen 2';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-SHD') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-SHD';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-Mesh-Pro') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-Mesh-Pro';\n            }\n            if (stripos($device->sysDescr, 'UAP-Outdoor') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-Outdoor';\n            }\n        }\n        return($device);\n    }\n\n    /**\n     * [dictionary description]\n     * @return [type] [description]\n     */\n    public function dictionary()\n    {\n        $CI = & get_instance();\n        $collection = 'devices';\n        $CI->temp_dictionary->link = str_replace('$collection', $collection, $CI->temp_dictionary->link);\n        $this->load->helper('collections');\n\n        $dictionary = new stdClass();\n        $dictionary->table = $collection;\n        $dictionary->about = '';\n        $dictionary->marketing = '';\n        $dictionary->notes = '';\n        $dictionary->columns = new stdClass();\n        $dictionary->attributes = new stdClass();\n        $dictionary->attributes->fields = $this->db->list_fields('system');\n        $dictionary->attributes->create = array();\n        $dictionary->attributes->update = array();\n        $dictionary->sentence = 'Open-AudIT tracks every device on your network. Change a device - see it. Move a device - see it. Remove a device - see it.';\n        $dictionary->marketing = '<p>Devices on your network need to be managed. But how do you keep your records up to date? A spreadsheet - defintley not. That will be out of date in hours, if not days. Why manually try to keep up. Use Open-AudIT to automatically scan your networks and record your devices - manufacturer, model, serial and more than 100 other attributes. Full lists of software, services, disks, open ports, users, etc. Automatically see if an attribute has been added, removed or changed.<br /><br />Once Open-AudIT is setup, you can sit back and relax. Have change reports emailed to you on a schedule, for example - what new devices did we discover this week? What new software was installed this week? Were there any hardware changes last month?<br /><br />Expand on the stored fields easily with your own custom attributes.<br /><br />Even add devices that aren\\'t connected to your network or those devices your Open-AudIT server cannot reach.<br /><br />Computers, switches, routers, printers or any other device on your network - Open-AudIT can audit them all.<br /><br />' . $CI->temp_dictionary->link . '<br /><br /></p>';\n        $dictionary->about = '<p>Devices on your network need to be managed. But how do you keep your records up to date? A spreadsheet - defintley not. That will be out of date in hours, if not days. Why manually try to keep up. Use Open-AudIT to automatically scan your networks and record your devices - manufacturer, model, serial and more than 100 other attributes. Full lists of software, services, disks, open ports, users, etc. Automatically see if an attribute has been added, removed or changed.<br /><br />Once Open-AudIT is setup, you can sit back and relax. Have change reports emailed to you on a schedule, for example - what new devices did we discover this week? What new software was installed this week? Were there any hardware changes last month?<br /><br />Expand on the stored fields easily with your own custom attributes.<br /><br />Computers, switches, routers, printers or any other device on your network - Open-AudIT can audit them all.<br /><br />' . $CI->temp_dictionary->link . '<br /><br /></p>';\n        $dictionary->product = 'community';\n\n        $dictionary->columns->id = $CI->temp_dictionary->id;\n        $dictionary->columns->name = $CI->temp_dictionary->name;\n        $dictionary->columns->org_id = $CI->temp_dictionary->org_id;\n        $dictionary->columns->last_seen = 'The last time that Open-AudIT retrieved details of this device.';\n        $dictionary->columns->last_seen_by = 'The process that was used last to retrieve details about the device';\n        return $dictionary;\n    }\n}\n// End of file m_devices.php\n// Location: ./models/m_devices.php\n"], "fixing_code": ["<?php\n/**\n#  Copyright 2003-2015 Opmantek Limited (www.opmantek.com)\n#\n#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM\n#\n#  This file is part of Open-AudIT.\n#\n#  Open-AudIT is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as published\n#  by the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  Open-AudIT is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#\n#  You should have received a copy of the GNU Affero General Public License\n#  along with Open-AudIT (most likely in a file named LICENSE).\n#  If not, see <http://www.gnu.org/licenses/>\n#\n#  For further information on Open-AudIT or for a license other than AGPL please see\n#  www.opmantek.com or email contact@opmantek.com\n#\n# *****************************************************************************\n*\n* PHP version 5.3.3\n*\n* @category  Controller\n* @package   Devices\n* @author    Mark Unwin <marku@opmantek.com>\n* @copyright 2014 Opmantek\n* @license   http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @version   GIT: Open-AudIT_4.3.0\n* @link      http://www.open-audit.org\n*/\n\n/**\n* Base Object Devices\n*\n* @access   public\n* @category Controller\n* @package  Devices\n* @author   Mark Unwin <marku@opmantek.com>\n* @license  http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @link     http://www.open-audit.org\n */\nclass Devices extends MY_Controller\n{\n    /**\n    * Constructor\n    *\n    * @access    public\n    */\n    public function __construct()\n    {\n        parent::__construct();\n        $this->load->helper('network');\n        $this->load->model('m_devices');\n        // inputRead();\n        $this->response = response_create();\n        $this->output->url = $this->config->config['oa_web_index'];\n    }\n\n    /**\n     * [index description]\n     * @return [type] [description]\n     */\n    public function index()\n    {\n    }\n\n    /**\n     * [_remap description]\n     * @return [type] [description]\n     */\n    public function _remap()\n    {\n        $this->{$this->response->meta->action}();\n    }\n\n    /**\n     * [collection description]\n     * @return [type] [description]\n     */\n    private function collection()\n    {\n        $timer_start = microtime(true);\n        if ($this->response->meta->sub_resource !== '' &&  ($this->response->meta->sub_resource !== 'report' && $this->response->meta->sub_resource !== 'query' && $this->response->meta->sub_resource !== 'group')) {\n            $this->response->data = $this->m_devices->collection_sub_resource();\n        } else if ($this->response->meta->sub_resource !== '' && $this->response->meta->sub_resource === 'report') {\n            $this->response->data = $this->m_devices->report();\n        } else if ($this->response->meta->sub_resource !== '' && $this->response->meta->sub_resource === 'query') {\n            $this->response->data = $this->m_devices->query();\n        } else if ($this->response->meta->sub_resource !== '' && $this->response->meta->sub_resource === 'group') {\n            $this->response->data = $this->m_devices->group();\n        } else if ( ! empty($this->response->meta->groupby)) {\n            $this->response->data = $this->m_devices->collection_group_by();\n        } else {\n            $this->m_devices->collection(null, 1);\n        }\n        if (is_array($this->response->data)) {\n            $this->response->meta->filtered = count($this->response->data);\n        } else {\n            $this->response->meta->filtered = 0;\n        }\n\n        $timer_end = microtime(true);\n        $entry = new stdClass();\n        $entry->time = ($timer_end - $timer_start);\n        $entry->detail = 'm_devices::collection';\n        $entry->time_now = time();\n        $GLOBALS['timer_log'][] = $entry;\n\n        output($this->response);\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->summary = 'finish';\n        $log->status = 'success';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n     * [read description]\n     * @return [type] [description]\n     */\n    private function read()\n    {\n        $timer_start = microtime(true);\n        $this->load->model('m_orgs');\n        $this->load->model('m_locations');\n        $this->load->model('m_devices_components');\n        // if we're displaying a web page, get ALL the data\n        if (($this->response->meta->format === 'screen' && $this->response->meta->include === '') OR $this->response->meta->include === '*' OR $this->response->meta->include === 'all') {\n            $this->response->meta->include = 'application,attachment,audit_log,bios,certificate,change_log,credential,discovery_log,disk,dns,edit_log,field,file,image,ip,location,log,memory,module,monitor,motherboard,netstat,network,nmap,optical,pagefile,partition,policy,print_queue,processor,purchase,rack_devices,radio,route,san,scsi,server,server_item,service,share,software,software_key,sound,task,usb,user,user_group,variable,video,vm,windows';\n        }\n        if ($this->response->meta->sub_resource !== '') {\n            if (empty($this->response->meta->sub_resource_id)) {\n                $this->response->meta->sub_resource_id = 0;\n            }\n            if ($this->response->meta->sub_resource === 'partition_graph') {\n                $this->response->data = $this->m_devices_components->graph($this->response->meta->id, $this->response->meta->sub_resource_id, 'partition', 30);\n                $this->response->meta->action = 'read_partition_graph';\n            } else {\n                $this->response->data = $this->m_devices_components->read($this->response->meta->id, $this->response->meta->current, $this->response->meta->sub_resource, $this->response->meta->filter, $this->response->meta->properties);\n                $this->response->meta->format = 'json';\n            }\n        } else {\n            $this->response->data = $this->m_devices->read($this->response->meta->id);\n            // create the related links\n            if ( ! empty($this->response->data)) {\n                $related = $this->m_devices->get_related_tables();\n                $this->response->data[0]->links->relationships = $related;\n                unset($related);\n            }\n            // get any additionally included tables\n            if ( ! empty($this->response->meta->include) && ! empty($this->response->data)) {\n                $temp = explode(',', $this->response->meta->include);\n                foreach ($temp as $table) {\n                    if ($table !== 'field' && $table !== 'application' && $table !== 'rack_devices') {\n                        $result = false;\n                        $result = $this->m_devices->read_sub_resource(\n                            $this->response->meta->id,\n                            $table, // sub_resource\n                            @$this->response->meta->sub_resource_id, // sub id\n                            $this->response->meta->properties,\n                            '', // sort\n                            $this->response->meta->current,\n                            $this->response->meta->limit\n                        );\n                        if ($result !== false) {\n                            $this->response->included = array_merge($this->response->included, $result);\n                        }\n                    } else if ($table === 'field') {\n                        $result = false;\n                        $result = $this->m_devices->get_device_fields($this->response->meta->id);\n                        $this->response->included = array_merge($this->response->included, $result);\n                    } else if ($table === 'application') {\n                        $result = false;\n                        $result = $this->m_devices->get_device_applications($this->response->meta->id);\n                        $this->response->included = array_merge($this->response->included, $result);\n                    } else if ($table === 'rack_devices') {\n                        $result = false;\n                        $result = $this->m_devices->get_device_rack($this->response->meta->id);\n                        $this->response->included = array_merge($this->response->included, $result);\n                        if ( ! empty($result[0]->attributes->rack_id)) {\n                            $this->load->model('m_racks');\n                            $rack = $this->m_racks->read($result[0]->attributes->rack_id);\n                            $this->response->included = array_merge($this->response->included, $rack);\n                        }\n                    }\n                }\n                // # populate the credentials associated from the last discovery\n                if ( ! empty($this->response->data[0]->attributes->credentials)) {\n                    $credentials = @json_decode($this->response->data[0]->attributes->credentials);\n                    if ( ! empty($credentials)) {\n                        $this->load->model('m_credentials');\n                        foreach ($credentials as $credential_id) {\n                            $credential = $this->m_credentials->read($credential_id);\n                            if ( ! empty($credential)) {\n                                unset($credential[0]->attributes->credentials);\n                            }\n                            if (is_array($credential)) {\n                                $this->response->included = array_merge($this->response->included, $credential);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        $this->response->meta->total = count($this->response->data);\n        $this->response->meta->filtered = count($this->response->data);\n        if ($this->response->meta->format === 'screen') {\n            // return a list of all orgs and locations so we can create the edit functionality on the web page\n            if (isset($this->response->data[0]->attributes->org_id)) {\n                $this->response->included = array_merge($this->response->included, $this->m_orgs->collection($this->user->id));\n            }\n            if (isset($this->response->data[0]->attributes->location_id)) {\n                $this->response->included = array_merge($this->response->included, $this->m_locations->collection($this->user->id));\n            }\n        } else {\n            // return only the details of the linked org and location\n            if (isset($this->response->data[0]->attributes->org_id)) {\n                $this->response->included = array_merge($this->response->included, $this->m_orgs->read($this->response->data[0]->attributes->org_id));\n            }\n            if (isset($this->response->data[0]->attributes->location_id)) {\n                $this->response->included = array_merge($this->response->included, $this->m_locations->read($this->response->data[0]->attributes->location_id));\n            }\n        }\n        if (is_null($this->response->data)) {\n            log_error('ERR-0002');\n        }\n        output($this->response);\n    }\n\n    /**\n     * [create description]\n     * @return [type] [description]\n     */\n    private function create()\n    {\n        $timer_start = microtime(true);\n        $this->load->helper('snmp_model');\n        $this->load->helper('mac');\n        if (empty($_POST['input_type']) OR $_POST['input_type'] === 'manual_input') {\n            $device = new stdClass();\n            foreach ($this->response->meta->received_data->attributes as $key => $value) {\n                if ($value !== '') {\n                    $device->$key = $value;\n                }\n            }\n            $device->last_seen_by = 'web form';\n            $device->last_seen = $this->config->config['timestamp'];\n            $this->load->model('m_devices');\n            $id = $this->m_devices->create($device);\n            $device->id = $id;\n            $mac = '';\n            if ( ! empty($device->mac)) {\n                $mac = strtolower($device->mac);\n            }\n            if ( ! empty($device->ip) && ! empty($device->netmask)) {\n                $this->load->helper('network');\n                $network = network_details($device->ip . ' ' . $device->netmask);\n                if (empty($network->error)) {\n                    $this->load->model('m_devices_components');\n                    $device_ip = new stdClass();\n                    $device_ip->mac = $mac;\n                    $device_ip->net_index = '';\n                    $device_ip->ip = $network->address;\n                    $device_ip->netmask = $network->netmask;\n                    $device_ip->cidr = $network->network_slash;\n                    $device_ip->version = 4;\n                    $device_ip->network = $network->network . '/' . $network->network_slash;\n                    $device_ip->set_by = '';\n                    $input = array();\n                    $input[] = $device_ip;\n                    $parameters = new stdClass();\n                    $parameters->table = 'ip';\n                    $parameters->details = $device;\n                    $parameters->input = $input;\n                    $this->m_devices_components->process_component($parameters);\n                }\n            }\n\n            $timer_end = microtime(true);\n            $entry = new stdClass();\n            $entry->time = ($timer_end - $timer_start);\n            $entry->detail = 'm_devices::create';\n            $entry->time_now = time();\n            $GLOBALS['timer_log'][] = $entry;\n        }\n\n        if ( ! empty($_POST['input_type']) && $_POST['input_type'] === 'audit_input') {\n            unset($_POST['data']);\n            unset($_FILES);\n            $input = $_POST['upload_input'];\n            $discovery_id = null;\n            include 'include_input_devices.php';\n        }\n\n        if ( ! empty($_POST['input_type']) && $_POST['input_type'] === 'file_input') {\n            unset($_POST['data']);\n            $discovery_id = null;\n            include 'include_input_devices.php';\n        }\n\n        $log = new stdClass();\n        $log->type = 'system';\n        $log->detail = 'Finished creating device.';\n        $log->severity = 7;\n        $log->status = 'finish';\n        $log->object = 'devices';\n        $log->function = 'devices::create';\n        stdLog($log);\n\n        if (empty($id) && ! empty($details->id)) {\n            $id = $details->id;\n        }\n\n        if ($this->response->meta->format === 'json') {\n            $this->response->data = $this->m_devices->read($id);\n            output($this->response);\n        } else {\n            redirect('devices/' . $id);\n        }\n    }\n\n    /**\n     * [update description]\n     * @return [type] [description]\n     */\n    private function update()\n    {\n        $this->m_devices->update();\n        // TODO - replace this old function\n        if ($this->response->meta->format === 'json') {\n            if ( ! empty($this->response->meta->received_data->attributes->status) && $this->response->meta->received_data->attributes->status === 'deleted') {\n                output($this->response);\n            } else {\n                $this->response->data = $this->m_devices->read($this->response->meta->id);\n                output($this->response);\n            }\n        }\n        exit();\n    }\n\n    /**\n     * [create_form description]\n     * @return [type] [description]\n     */\n    private function create_form()\n    {\n        $this->response->dictionary = $this->m_devices->dictionary();\n        $this->load->model('m_orgs');\n        $this->response->included = array_merge($this->response->included, $this->m_orgs->collection($this->user->id));\n        $this->load->model('m_locations');\n        $this->response->included = array_merge($this->response->included, $this->m_locations->collection($this->user->id));\n        $this->load->model('m_attributes');\n        $this->response->included = array_merge($this->response->included, $this->m_attributes->collection($this->user->id));\n        output($this->response);\n    }\n\n    /**\n     * [execute description]\n     * @return [type] [description]\n     */\n    private function execute()\n    {\n        $this->response->meta->format = 'json';\n        $this->response->meta->debug = true;\n        output($this->response);\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->status = 'finish';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n     * [bulk_update_form description]\n     * @return [type] [description]\n     */\n    private function bulk_update_form()\n    {\n        $timer_start = microtime(true);\n        if (empty($this->response->meta->ids)) {\n            $this->response->meta->ids = '0';\n        }\n        $sql = \"SELECT system.id, system.icon, system.type, system.name, system.domain, system.ip, system.description, system.os_family, system.status, orgs.name FROM system LEFT JOIN orgs ON (system.org_id = orgs.id) \" . $this->response->meta->internal->filter . \" AND system.id IN (\" . $this->response->meta->ids . \")\";\n        $query = $this->db->query($sql);\n        // TODO - change the below to use this->response->included\n        $this->response->devices = $query->result();\n\n        if (empty($this->response->meta->sub_resource)) {\n            $this->load->model('m_locations');\n            $this->load->model('m_fields');\n            $this->load->model('m_attributes');\n            $this->response->included = array_merge($this->response->included, $this->m_attributes->collection($this->user->id));\n            $this->response->included = array_merge($this->response->included, $this->m_orgs->collection($this->user->id));\n            $this->response->included = array_merge($this->response->included, $this->m_locations->collection($this->user->id));\n            unset($temp);\n            $temp = @$this->m_fields->collection($this->user->id);\n            if ( ! empty($temp)) {\n                $this->response->included = array_merge($this->response->included, $this->m_fields->collection($this->user->id));\n            }\n        } elseif ($this->response->meta->sub_resource === 'credential') {\n            $this->response->meta->action = 'create_form_credentials';\n        }\n\n        $timer_end = microtime(true);\n        $entry = new stdClass();\n        $entry->time = ($timer_end - $timer_start);\n        $entry->detail = 'm_devices::bulk_update_form';\n        $entry->time_now = time();\n        $GLOBALS['timer_log'][] = $entry;\n\n        output($this->response);\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->status = 'finish';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n     * [sub_resource_read description]\n     * @return [type] [description]\n     */\n    private function sub_resource_read()\n    {\n        $current = $this->response->meta->current;\n        if (is_array($this->response->meta->filter)) {\n            foreach ($this->response->meta->filter as $temp_filter) {\n                if ($temp_filter->name === $this->response->meta->sub_resource . '.current') {\n                    $current = $temp_filter->value;\n                }\n            }\n        }\n        if (empty($this->response->meta->sub_resource_id)) {\n            $this->response->meta->sub_resource_id = 0;\n        }\n        $this->response->data = $this->m_devices->read_sub_resource($this->response->meta->id, $this->response->meta->sub_resource, $this->response->meta->sub_resource_id, $this->response->meta->properties, '', $current, '');\n        $this->response->meta->total = 0;\n        if (is_array($this->response->data)) {\n            $this->response->meta->total = count($this->response->data);\n        }\n        $this->response->meta->filtered = $this->response->meta->total;\n        output($this->response);\n    }\n\n    /**\n     * [sub_resource_delete description]\n     * @return [type] [description]\n     */\n    private function sub_resource_delete()\n    {\n        if (empty($this->response->meta->sub_resource_id)) {\n            $this->response->meta->sub_resource_id = 0;\n        }\n        $this->m_devices->sub_resource_delete($this->response->meta->id, $this->response->meta->sub_resource, $this->response->meta->sub_resource_id);\n        if ($this->response->meta->format === 'json') {\n            output($this->response);\n        } else {\n            redirect('devices');\n        }\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->status = 'finish';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n     * [sub_resource_create_form description]\n     * @return [type] [description]\n     */\n    private function sub_resource_create_form()\n    {\n        if ($this->response->meta->sub_resource === 'credential') {\n            $this->response->meta->action = 'create_form_credentials';\n            $this->response->data = array();\n            $temp = new stdClass();\n            $temp->type = $this->response->meta->collection;\n            $this->response->data[] = $temp;\n            unset($temp);\n            output($this->response);\n        } elseif ($this->response->meta->sub_resource === 'discovery') {\n            \n            // NOTE - removed because setting this (for use in Audit My PC), means the script submits to the IP, not localhost and\n            //        therefore the logs are rejected.\n            // NOTE #2 - Need to account for Collectors from Enterprise and Cloud\n            // if ($this->config->config['default_network_address'] == '') {\n            //     $this->config->config['default_network_address'] = 'http://127.0.0.1/open-audit/';\n            // }\n            // NOTE #3 - Improved version of above to account for vintage Windows running as per include_input_discoveries.php\n           \n            if (php_uname('s') === 'Windows NT' &&\n                    exec('whoami') === 'nt authority\\system' &&\n                    ! empty($this->config->config['discovery_use_vintage_service']) &&\n                    $this->config->config['discovery_use_vintage_service'] === 'y') {\n                if ($this->config->config['default_network_address'] === '') {\n                    $this->config->config['default_network_address'] = 'http://127.0.0.1/open-audit/';\n                } else {\n                    // leave it alone and use the config item as is\n                }\n            } else {\n                $this->config->config['default_network_address'] = 'http://127.0.0.1/open-audit/';\n            }\n\n            $ids = array();\n            if ( ! empty($this->response->meta->id)) {\n                $ids[] = intval($this->response->meta->id);\n            }\n            if ( ! empty($this->response->meta->ids)) {\n                $ids = array_merge($ids, explode(',', $this->response->meta->ids));\n            }\n            $device_names = array();\n            $this->load->model('m_discoveries');\n            $this->load->model('m_collection');\n            $this->load->model('m_discovery_scan_options');\n            foreach ($ids as $id) {\n                $this->response->data = $this->m_devices->read($id);\n                $sql = \"SELECT * FROM discoveries WHERE name = 'Device Discovery - \" . $this->response->data[0]->attributes->name . \"' AND system_id = \" . intval($id);\n                $query = $this->db->query($sql);\n                $result = $query->result();\n                if ( ! empty($result)) {\n                    // Check we have this discovery as it may have been removed\n                    $discovery = $this->m_discoveries->read($result[0]->id);\n                    if ( ! empty($discovery)) {\n                        // We already have a previously created device discovery - use that\n                        $discovery_id = $result[0]->id;\n                        $this->m_discoveries->queue($discovery_id);\n                        $this->load->model('m_queue');\n                        $this->m_queue->start();\n                    } else {\n                        unset($result);\n                    }\n                }\n                if (empty($result)) {\n                    // make a new one and run it\n                    $data = new stdClass();\n                    $data->name = 'Device Discovery - ' . $this->response->data[0]->attributes->name;\n                    $device_names[] = $this->response->data[0]->attributes->name;\n                    if (empty($data->name)) {\n                        $data->name = ip_address_from_db($this->response->data[0]->attributes->ip);\n                    }\n                    $data->system_id = $this->response->data[0]->attributes->id;\n                    $data->org_id = $this->response->data[0]->attributes->org_id;\n                    $data->type = 'subnet';\n                    $data->network_address = $this->config->config['default_network_address'];\n                    $data->other = new stdClass();\n                    $data->subnet = ip_address_from_db($this->response->data[0]->attributes->ip);\n                    $data->scan_options = new stdClass();\n                    $data->match_options = new stdClass();\n                    if ( ! empty($this->response->data[0]->attributes->discovery_id)) {\n                        $discovery = $this->m_discoveries->read($this->response->data[0]->attributes->discovery_id);\n                        if ( ! empty($discovery[0]->attributes->scan_options)) {\n                            $data->scan_options = $discovery[0]->attributes->scan_options;\n                        } else {\n                            $this->response->data[0]->attributes->discovery_id = 0;\n                        }\n                        if ( ! empty($discovery[0]->attributes->match_options)) {\n                            $data->match_options = $discovery[0]->attributes->match_options;\n                        }\n                    }\n                    if (empty($this->response->data[0]->attributes->discovery_id)) {\n                        $do_not_use = array('name', 'org_id', 'description', 'options', 'edited_by', 'edited_date');\n                        $discovery_scan_options = $this->m_discovery_scan_options->read($this->config->config['discovery_default_scan_option']);\n                        if ( ! empty($discovery_scan_options->data)) {\n                            foreach ($discovery_scan_options->data as $item) {\n                                foreach ($item as $key => $value) {\n                                    if ( ! in_array($key, $do_not_use)) {\n                                        $data->scan_options->{$key} = $value;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (empty($data->other->match->match_hostname)) {\n                        // use the defaults\n                        $match_rules = array('match_dbus', 'match_dns_fqdn', 'match_fqdn', 'match_hostname', 'match_hostname_dbus', 'match_hostname_serial', 'match_hostname_uuid', 'match_ip', 'match_mac', 'match_mac_vmware', 'match_serial', 'match_serial_type', 'match_sysname', 'match_sysname_serial', 'match_uuid');\n                        foreach ($match_rules as $item) {\n                            $data->match_options->{$item} = @$this->config->config[$item];\n                        }\n                    }\n                    $discovery_id = $this->m_discoveries->create($data);\n                    $this->m_discoveries->queue($discovery_id);\n                    $this->load->model('m_queue');\n                    $this->m_queue->start();\n                    sleep(2);\n                }\n            }\n            $message = htmlentities('Discovery started for devices: ' . htmlentities(implode(', ', $device_names)));\n            $this->session->set_flashdata('success', $message);\n            unset($this->response->data);\n            $this->response->data = array();\n            if ($this->response->meta->format !== 'json') {\n                redirect('devices');\n            } else {\n                $this->response->data = $this->m_discoveries->read($discovery_id);\n                output($this->response);\n            }\n        } elseif ($this->response->meta->sub_resource === 'attachment') {\n            $this->response->meta->action = 'create_form_attachment';\n            $this->response->data = array();\n            $temp = new stdClass();\n            $temp->type = $this->response->meta->collection;\n            $this->response->data[] = $temp;\n            unset($temp);\n            output($this->response);\n        } elseif ($this->response->meta->sub_resource === 'image') {\n            $this->response->meta->action = 'create_form_image';\n            $this->response->data = array();\n            $temp = new stdClass();\n            $temp->type = $this->response->meta->collection;\n            $this->response->data[] = $temp;\n            unset($temp);\n            output($this->response);\n        } else {\n            redirect('devices');\n        }\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->status = 'success';\n        $log->summary = 'finish';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n     * [sub_resource_create description]\n     * @return [type] [description]\n     */\n    private function sub_resource_create()\n    {\n        if ($this->m_devices->sub_resource_create()) {\n            $this->response->meta->succeeded = true;\n        } else {\n            $this->response->meta->succeeded = false;\n        }\n        if ($this->response->meta->format === 'json') {\n            output($this->response);\n        } else {\n            if ( ! empty($this->response->meta->id)) {\n                redirect('devices/' . $this->response->meta->id);\n            } else {\n                redirect('devices');\n            }\n        }\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->status = 'finish';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n     * [sub_resource_download description]\n     * @return [type] [description]\n     */\n    private function sub_resource_download()\n    {\n        if (empty($this->response->meta->sub_resource_id)) {\n            $this->response->meta->sub_resource_id = 0;\n        }\n        $attachment = $this->m_devices->read_sub_resource($this->response->meta->id, $this->response->meta->sub_resource, $this->response->meta->sub_resource_id, '*', '', '', '');\n        $this->load->helper('file');\n        header('Content-Type: '.get_mime_by_extension($attachment[0]->attributes->filename));\n        header('Content-Disposition: attachment;filename=\"'.basename($attachment[0]->attributes->filename).'\"');\n        header('Cache-Control: max-age=0');\n        readfile($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . basename($attachment[0]->attributes->filename));\n    }\n\n    /**\n     * [delete description]\n     * @return [type] [description]\n     */\n    private function delete()\n    {\n        $this->response->meta->format = 'json';\n        $this->response->meta->debug = true;\n        output($this->response);\n        $log = new stdClass();\n        $log->type = 'access';\n        $log->detail = json_encode($this->response->meta);\n        $log->severity = 7;\n        $log->status = 'finish';\n        $log->object = $this->response->meta->collection;\n        $log->function = strtolower($this->response->meta->collection) . '::' . strtolower($this->response->meta->action);\n        stdLog($log);\n    }\n\n    /**\n    * Supply a HTML form for the user to upload a collection of objects in CSV\n    *\n    * @access public\n    * @return NULL\n    */\n    public function import_form()\n    {\n        include 'include_import_form.php';\n    }\n\n    /**\n    * Process the supplied data and create a new object\n    *\n    * @access public\n    * @return NULL\n    */\n    public function import()\n    {\n        include 'include_import.php';\n    }\n\n    /**\n    * Accept a device id and provide a JSON export of most fields\n    *\n    * @access public\n    * @return NULL\n    */\n    public function export()\n    {\n        $this->response->meta->format = 'json';\n        $this->response->meta->include = 'bios,certificate,disk,dns,ip,log,memory,module,monitor,motherboard,netstat,network,nmap,optical,pagefile,partition,policy,print_queue,processor,radio,route,san,scsi,server,server_item,service,share,software,software_key,sound,task,usb,user,user_group,variable,video,vm,windows';\n        $device = new stdClass();\n\n        $sql = 'SELECT * FROM system WHERE id = ?';\n        $query = $this->db->query($sql, array(intval($this->response->meta->id)));\n        $result = $query->result();\n        unset($result[0]->id);\n        unset($result[0]->first_seen);\n        unset($result[0]->last_seen);\n        foreach ($result[0] as $key => $value) {\n            if (empty($value)) {\n                unset($result[0]->{$key});\n            }\n        }\n        $device->sys = $result[0];\n\n        $temp = explode(',', $this->response->meta->include);\n        foreach ($temp as $table) {\n            $sql = \"SELECT * FROM `{$table}` WHERE system_id = ? AND current = 'y'\";\n            $query = $this->db->query($sql, array(intval($this->response->meta->id)));\n            $result = $query->result();\n            if ( ! empty($result)) {\n                for ($i=0; $i < count($result); $i++) {\n                    unset($result[$i]->id);\n                    unset($result[$i]->system_id);\n                    unset($result[$i]->current);\n                    unset($result[$i]->first_seen);\n                    unset($result[$i]->last_seen);\n                }\n                $device->{$table} = $result;\n            }\n        }\n        echo json_encode($device);\n    }\n}\n", "<?php\n/**\n#  Copyright 2003-2015 Opmantek Limited (www.opmantek.com)\n#\n#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM\n#\n#  This file is part of Open-AudIT.\n#\n#  Open-AudIT is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as published\n#  by the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  Open-AudIT is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#\n#  You should have received a copy of the GNU Affero General Public License\n#  along with Open-AudIT (most likely in a file named LICENSE).\n#  If not, see <http://www.gnu.org/licenses/>\n#\n#  For further information on Open-AudIT or for a license other than AGPL please see\n#  www.opmantek.com or email contact@opmantek.com\n#\n# *****************************************************************************\n*\n* PHP version 5.3.3\n* \n* @category  Model\n* @package   Devices\n* @author    Mark Unwin <marku@opmantek.com>\n* @copyright 2014 Opmantek\n* @license   http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @version   GIT: Open-AudIT_4.3.0\n* @link      http://www.open-audit.org\n*/\n\n/**\n* Base Model Devices\n*\n* @access   public\n* @category Model\n* @package  Devices\n* @author   Mark Unwin <marku@opmantek.com>\n* @license  http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @link     http://www.open-audit.org\n */\nclass M_devices extends MY_Model\n{\n    /**\n    * Constructor\n    *\n    * @access public\n    */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * [_build_filter description]\n     * @return [type] [description]\n     */\n    private function _build_filter()\n    {\n        $CI = & get_instance();\n        $reserved = ' properties limit sub_resource action sort current offset format graph report_name ';\n        $filter = '';\n        foreach ($CI->response->meta->filter as $item) {\n            if (strpos(' '.$item->name.' ', $reserved) === false) {\n                if ($item->name === 'id') {\n                    $item->name = 'system.id';\n                }\n                if ( ! empty($item->name) && $item->operator !== 'in') {\n                    if (stripos($item->name, 'current') !== false && $item->value !== 'y' && $item->value !== 'n') {\n                        // we ignore this value\n                    } else {\n                        $filter .= ' AND ' . $item->name . ' ' . $item->operator . ' ' . '\"' . $item->value . '\"';\n                    }\n                }\n                if ( ! empty($item->name) && $item->operator === 'in') {\n                    $filter .= ' AND ' . $item->name . ' in ' . $item->value;\n                }\n            }\n        }\n        return($filter);\n    }\n\n    /**\n     * [_build_join description]\n     * @return [type] [description]\n     */\n    private function _build_join()\n    {\n        $CI = & get_instance();\n        $join = '';\n        $tables = '';\n        if (count($CI->response->meta->filter) > 0) {\n            foreach ($CI->response->meta->filter as $item) {\n                if (strpos($item->name, '.') !== false) {\n                    $table = substr($item->name, 0, strpos($item->name, '.'));\n                    if ($table !== 'system' && stripos($tables, ' ' . $table . ' ') === false) {\n                        if ($table === 'change_log' OR $table === 'edit_log' OR $table === 'audit_log') {\n                            $join .= ' LEFT JOIN `' . $table . '` ON (system.id = `' . $table . '`.system_id) ';\n                        } else {\n                            $join .= ' LEFT JOIN `' . $table . '` ON (system.id = `' . $table . '`.system_id AND ' . $table . '.current = \"' . $CI->response->meta->current . '\") ';\n                        }\n                    }\n                    $tables .= \" {$table} \";\n                }\n            }\n        }\n        $CI->response->meta->internal->join = $join;\n        return($join);\n    }\n\n    /**\n     * [get_related_tables description]\n     * @param  string $id [description]\n     * @return [type]     [description]\n     */\n    public function get_related_tables($id = '')\n    {\n        $CI = & get_instance();\n        if ($id === '') {\n            $id = intval($CI->response->meta->id);\n        } else {\n            $id = intval($id);\n        }\n        if (empty($id)) {\n            return false;\n        }\n        $return = array();\n        $tables = array('audit_log', 'bios', 'certificate', 'change_log', 'credential', 'disk', 'dns', 'edit_log', 'field', 'file', 'ip', 'log', 'memory', 'module', 'monitor', 'motherboard', 'netstat', 'network', 'optical', 'partition', 'pagefile', 'policy', 'print_queue', 'processor', 'radio', 'route', 'san', 'scsi', 'service', 'server', 'server_item', 'share', 'software', 'software_key', 'sound', 'task', 'usb', 'user', 'user_group', 'variable', 'video', 'vm', 'windows');\n        foreach ($tables as $table) {\n            $sql = \"SELECT COUNT(*) AS `count` FROM `{$table}` WHERE system_id = \" . intval($id);\n            $result = $this->run_sql($sql, array());\n            if ( ! empty($result[0]->count) && intval($result[0]->count) > 0) {\n                $item = new stdClass();\n                $item->$table = new stdClass();\n                $item->$table->links = new stdClass();\n                $item->$table->links->self = $CI->config->config['base_url'] . 'index.php/devices/' . $id . '/' . $table;\n                $return[] = $item;\n                unset($item);\n            }\n        }\n        return ($return);\n    }\n\n    /**\n     * [read description]\n     * @param  int $id The system.id of the device in question\n     * @return [type]     [description]\n     */\n    public function read($id = 0)\n    {\n        if (empty($id)) {\n            $log = new stdClass();\n            $log->file = 'system';\n            $log->level = 5;\n            $log->message = 'No device ID for read, returning false';\n            stdlog($log);\n            return false;\n        }\n        $CI = & get_instance();\n        if ($CI->response->meta->collection === 'devices' && ! empty($CI->response->meta->properties)) {\n            $properties = $CI->response->meta->properties;\n        } else {\n            $properties = '*';\n        }\n        $sql = \"SELECT {$properties} FROM `system` WHERE system.id = ?\";\n        $result = $this->run_sql($sql, array($id));\n\n        // Populate our collector name if it exists\n        if ( ! empty($result)) {\n            if ( ! empty($result[0]->collector_uuid)) {\n                $result[0]->collector_name = '';\n                $sql = 'SELECT `name` FROM `collectors` WHERE `uuid` = ?';\n                $data = array((string)$result[0]->collector_uuid);\n                $collector = $this->run_sql($sql, $data);\n                if ( ! empty($collector[0]->{'name'})) {\n                    $result[0]->collector_name = $collector[0]->{'name'};\n                }\n            }\n\n            $result = $this->format_data($result, 'devices');\n\n            // format our uptime from unixtime to human readable\n            $result[0]->attributes->uptime_formatted = '';\n            if ( ! empty($result[0]->attributes->uptime)) {\n                $seconds = intval($result[0]->attributes->uptime);\n                $date_time_f = new \\DateTime('@0');\n                $date_time_t = new \\DateTime(\"@{$seconds}\");\n                $result[0]->attributes->uptime_formatted = $date_time_f->diff($date_time_t)->format('%a days, %H:%i:%S');\n            }\n        }\n        return($result);\n    }\n\n    /**\n     * [get_device_fields description]\n     * @param  int $device_id The system.id of the device in question\n     * @return [type]            [description]\n     */\n    public function get_device_fields($device_id = 0)\n    {\n        $CI = & get_instance();\n        $CI->load->model('m_orgs');\n        $CI->load->model('m_fields');\n        $CI->load->model('m_groups');\n        $log = new stdClass();\n        $log->file = 'system';\n        $log->level = 7;\n\n        if (empty($device_id)) {\n            $log->message = 'No device ID for fields, returning false';\n            stdlog($log);\n            return false;\n        }\n\n        // get the org_id of the device\n        $sql = 'SELECT system.org_id FROM system WHERE `system`.`id` = ?';\n        $data = array (intval($device_id));\n        $result = $this->run_sql($sql, $data);\n        $device_org_id = intval($result[0]->org_id);\n\n        // get the fields\n        $sql = \"SELECT fields.*, groups.sql AS `group_sql`, groups.name as `group_name`, field.value FROM fields LEFT JOIN groups ON fields.group_id = groups.id LEFT JOIN field ON (fields.id = field.fields_id AND field.system_id = {$device_id}) ORDER BY fields.name\";\n        $fields = $this->run_sql($sql, array());\n        // this is our array of field.id's that are acceptable on this device\n        $field_list = array();\n        if ( ! empty($fields)) {\n            foreach ($fields as $field) {\n                // get this field.org_id children\n                $orgs = array($field->org_id);\n                $orgs = array_merge($orgs, $CI->m_orgs->get_children($field->org_id));\n                foreach ($orgs as $value) {\n                    if (intval($device_org_id) === intval($value)) {\n                        $sql = 'SELECT COUNT(*) AS `count` FROM (' . str_replace('@filter', '1=1', $field->group_sql) . \") a WHERE a.id = {$device_id}\";\n                        $result = $this->run_sql($sql, $data);\n                        if ( ! empty($result) && intval($result[0]->count) === 1) {\n                            $field_list[] = $field;\n                        }\n                    }\n                }\n            }\n            // remove the sql and group name\n            foreach ($field_list as &$field) {\n                unset($field->group_sql);\n                unset($field->group_name);\n            }\n        }\n        $result = $this->format_data($field_list, 'fields');\n        return($result);\n    }\n\n    /**\n     * [get_device_applications description]\n     * @param  int $device_id The system.id of the device in question\n     * @return [type]            [description]\n     */\n    public function get_device_applications($device_id = 0)\n    {\n        $CI = & get_instance();\n        $CI->load->model('m_orgs');\n        $CI->load->model('m_fields');\n        $CI->load->model('m_groups');\n        $log = new stdClass();\n        $log->file = 'system';\n        $log->level = 7;\n\n        if (empty($device_id)) {\n            $log->message = 'No device ID for applications, returning false';\n            stdlog($log);\n            return false;\n        }\n\n        $sql = 'SELECT applications.id AS `applications.id`, applications.name AS `applications.name`, applications.description AS `applications.description`, application.id AS `id` FROM applications LEFT JOIN application ON applications.id = application.applications_id LEFT JOIN system ON (application.system_id = system.id) WHERE system.id = ? ORDER BY applications.name';\n        $application = $this->run_sql($sql, array(intval($device_id)));\n        $result = $this->format_data($application, 'application');\n        return($result);\n    }\n\n    /**\n     * [get_device_rack description]\n     * @param  int $id The system.id of the device in question\n     * @return [type]      [description]\n     */\n    public function get_device_rack($id = 0)\n    {\n        $sql = 'SELECT rack_devices.*, racks.name AS `racks.name`, racks.id AS `racks.id` FROM rack_devices LEFT JOIN `racks` ON (racks.id = rack_devices.rack_id) WHERE system_id = ?';\n        $query = $this->run_sql($sql, array(intval($id)));\n        $result = $this->format_data($query, 'rack_devices');\n        return($result);\n    }\n\n    /**\n     * [read_sub_resource description]\n     * @param  string $id              system.id\n     * @param  string $sub_resource    [description]\n     * @param  string $sub_resource_id [description]\n     * @param  string $properties      [description]\n     * @param  string $sort            [description]\n     * @param  string $current         [description]\n     * @param  string $limit           [description]\n     * @return [type]                  [description]\n     */\n    public function read_sub_resource($id = '', $sub_resource = '', $sub_resource_id = '', $properties = '', $sort = '', $current = 'y', $limit = '')\n    {\n        $CI = & get_instance();\n        $log = new stdClass();\n        $log->file = 'system';\n        $log->level = 7;\n\n        $id = intval($id);\n        if (empty($id)) {\n            $log->message = 'No ID, returning false';\n            stdlog($log);\n            return false;\n        }\n        if (empty($sub_resource)) {\n            $log->message = 'No sub_resource, returning false';\n            stdlog($log);\n            return false;\n        }\n        if (empty($sub_resource_id)) {\n            $sub_resource_id = '';\n        } else {\n            $sub_resource_id = ' AND `' . $sub_resource . '`.id = ' . intval($sub_resource_id);\n            $current = '';\n        }\n        if (empty($properties) OR $properties === '*') {\n            $properties = '`' . $sub_resource . '`.*';\n        }\n        if ( ! empty($limit)) {\n            $limit = ' LIMIT ' . intval($limit);\n        }\n\n        $filter = $this->_build_filter();\n\n        if ($sub_resource === 'location') {\n            $sql = 'SELECT location_id, locations.name AS `location_name`, location_level, location_suite, location_room, location_rack, location_rack_position, location_rack_size, location_latitude, location_longitude FROM system LEFT JOIN locations ON (system.location_id = locations.id) WHERE system.id = ?';\n            $data = array($id);\n\n        } else if ($sub_resource === 'purchase') {\n            $sql = 'SELECT asset_number, asset_tag, end_of_life, end_of_service, purchase_invoice, purchase_order_number, purchase_cost_center, purchase_vendor, purchase_date, purchase_service_contract_number, lease_expiry_date, purchase_amount, warranty_duration, warranty_expires, warranty_type FROM system WHERE id = ?';\n            $data = array($id);\n\n        } else if ($sub_resource === 'discovery_log') {\n            $sql = 'SELECT discovery_log.id, discovery_log.discovery_id, discoveries.name AS `discoveries.name`, discovery_log.timestamp, discovery_log.file, discovery_log.function, discovery_log.message, discovery_log.command_status, discovery_log.command_output, discovery_log.command_time_to_execute, discovery_log.command FROM discovery_log LEFT JOIN discoveries ON (discovery_log.discovery_id = discoveries.id) WHERE discovery_log.system_id = ? ' . $limit;\n            $data = array($id);\n\n        } else if ($sub_resource === 'edit_log') {\n            $sql = 'SELECT edit_log.*, users.full_name FROM edit_log LEFT JOIN users ON edit_log.user_id = users.id WHERE system_id = ? ' . $limit;\n            $data = array($id);\n\n        } else if ($sub_resource === 'network') {\n            $sql = \"SELECT network.*, floor((system.sysuptime - network.iflastchange) /60/60/24/100) as days_since_changed, IF((network.ifadminstatus = 'down') OR (network.ifadminstatus = 'up' AND (network.ip_enabled != 'up' AND network.ip_enabled != 'dormant') AND (((system.sysuptime - network.iflastchange) > 60480000) OR (system.sysuptime < network.iflastchange))), 'available', 'used') AS available  FROM network LEFT JOIN system ON (network.system_id = system.id AND network.current = 'y') WHERE system.id = ? \";\n            $data = array($id);\n\n        } else if ($sub_resource === 'certificate') {\n            $sql = \"SELECT certificate.*, IF(certificate.valid_to > DATE(NOW() - INTERVAL 7 day) AND certificate.valid_to < DATE(NOW() + INTERVAL 7 day), 'expiring_week', IF(certificate.valid_to > DATE(NOW()) AND certificate.valid_to < DATE(NOW() + INTERVAL 30 day), 'expiring_month', IF(certificate.valid_to < DATE(NOW()), 'expired', ''))) AS status FROM certificate WHERE certificate.system_id = ? \" . $limit;\n            $data = array($id);\n\n        } else {\n            $currency = false;\n            $first_seen = false;\n            if ($this->db->table_exists($sub_resource) && $this->db->field_exists('current', $sub_resource)) {\n                $currency = true;\n            }\n            if ($this->db->table_exists($sub_resource) && $this->db->field_exists('first_seen', $sub_resource)) {\n                $first_seen = true;\n            }\n            if ($currency) {\n                if ( ! empty($CI->response->meta->internal->as_at)) {\n                    if ($this->db->field_exists('first_seen', $sub_resource) && $this->db->field_exists('last_seen', $sub_resource)) {\n                        $filter .= ' AND DATE(' . $sub_resource . '.first_seen) <= \"' . $CI->response->meta->internal->as_at . '\" AND DATE(' . $sub_resource . '.last_seen) >= \"' . $CI->response->meta->internal->as_at . '\"';\n                    }\n                }\n                $currency = 'AND `' . $sub_resource . \"`.`current` = '\" . $current . \"'\" ;\n                if ($current === 'y') {\n                    $currency = 'AND `' . $sub_resource . \"`.`current` = '\" . $current . \"'\" ;\n                }\n                if ($current === 'n') {\n                    $currency = 'AND `' . $sub_resource . \"`.`current` = '\" . $current . \"'\" ;\n                }\n                if ($current === '' or $current === 'all') {\n                    $currency = '';\n                }\n                if ($current === 'delta' && $first_seen) {\n                    $properties .= \", IF((`{$sub_resource}`.first_seen = (SELECT first_seen FROM `{$sub_resource}` WHERE system_id = {$id} ORDER BY first_seen LIMIT 1)), 'y', 'n') as original_install\";\n                    $currency = \"AND current = 'y' or `{$sub_resource}`.first_seen = (SELECT first_seen FROM `{$sub_resource}` WHERE system_id = {$id} ORDER BY first_seen LIMIT 1)\";\n                }\n                if ($current === 'delta' && ! $first_seen) {\n                    $currency = '';\n                }\n                if ($current === 'full' && $first_seen) {\n                    $properties .= \", IF((`{$sub_resource}`.first_seen = (SELECT first_seen FROM `{$sub_resource}` WHERE system_id = {$id} ORDER BY first_seen LIMIT 1)), 'y', 'n') as original_install\";\n                    $currency = '';\n                }\n                if ($current === 'full' && ! $first_seen) {\n                    $currency = '';\n                }\n            } else {\n                $currency = '';\n            }\n            $sql = \"SELECT {$properties}, system.name AS `system.name` FROM `{$sub_resource}` LEFT JOIN system ON (system.id = `{$sub_resource}`.system_id) WHERE system.id = {$id} {$sub_resource_id} {$currency} {$filter} {$limit} {$sort}\";\n            $data = array($CI->user->id);\n        }\n\n        $result = $this->run_sql($sql, $data);\n\n        if ($sub_resource === 'credential' && ! empty($result)) {\n            $this->load->library('encrypt');\n            for ($i=0; $i < count($result); $i++) {\n                if (! empty($result[$i]->credentials)) {\n                    $result[$i]->credentials = json_decode(simpleDecrypt($result[$i]->credentials));\n                }\n            }\n        }\n\n        $result = $this->format_data($result, 'devices/' . $id . '/' . $sub_resource);\n        if (count($result) === 0) {\n            return false;\n        } else {\n            return ($result);\n        }\n    }\n\n    /**\n     * [sub_resource_delete description]\n     * @param  integer $id              [description]\n     * @param  integer $sub_resource    [description]\n     * @param  integer $sub_resource_id [description]\n     * @return [type]                   [description]\n     */\n    public function sub_resource_delete($id = 0, $sub_resource = 0, $sub_resource_id = 0)\n    {\n        $CI = & get_instance();\n        if (empty($id)) {\n            if ( ! empty($CI->response->meta->id)) {\n                $id = intval($CI->response->meta->id);\n            }\n        }\n        if (empty($id)) {\n            return false;\n        }\n\n        if (empty($sub_resource)) {\n            if ( ! empty($CI->response->meta->sub_resource)) {\n                $sub_resource = intval($CI->response->meta->sub_resource);\n            }\n        }\n        if (empty($sub_resource)) {\n            return false;\n        }\n\n        if (empty($sub_resource_id)) {\n            if ( ! empty($CI->response->meta->sub_resource_id)) {\n                $sub_resource_id = intval($CI->response->meta->sub_resource_id);\n            }\n        }\n        if (empty($sub_resource_id)) {\n            return false;\n        }\n        if ($sub_resource === 'attachment') {\n            $sql = 'SELECT * FROM attachment WHERE id = ' . intval($sub_resource_id);\n            $attachment = $this->run_sql($sql, array());\n            if (unlink($attachment[0]->filename)) {\n                // good\n            } else {\n                // TODO - log an error here\n                echo 'Could not delete ' . $attachment[0]->filename . '.';\n                return false;\n            }\n        }\n        if ($sub_resource === 'image') {\n\n            // $sql = \"SELECT * FROM image WHERE id = \" . intval($sub_resource_id);\n            // $image = $this->run_sql($sql, array());\n            // if (unlink($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . $image[0]->filename)) {\n            //     // good\n            // } else {\n            //     // TODO - log an error here\n            //     echo \"Could not delete \" . $image[0]->filename . \".\";\n            //     return false;\n            // }\n\n        }\n        $sql = 'DELETE FROM `' . (string)$sub_resource . '` WHERE `system_id` = ? AND id = ?';\n        $data = array(intval($id), intval($sub_resource_id));\n        $this->run_sql($sql, $data);\n        if ($this->db->affected_rows() > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * [sub_resource_create description]\n     * @param  integer $id           [description]\n     * @param  string  $sub_resource [description]\n     * @param  string  $data         [description]\n     * @return [type]                [description]\n     */\n    public function sub_resource_create($id = 0, $sub_resource = '', $data = '')\n    {\n        $CI = & get_instance();\n        $log = new stdClass();\n        $log->file = 'system';\n        $log->level = 7;\n        $log->message = 'sub_resource_create start.';\n        stdlog($log);\n\n        if ( ! empty($id)) {\n            $device_ids[] = $id;\n        } elseif ( ! empty($CI->response->meta->received_data->ids)) {\n            $device_ids = explode(',', $CI->response->meta->received_data->ids);\n        } elseif ( ! empty($CI->response->meta->id)) {\n            $device_ids = array($CI->response->meta->id);\n        } elseif ( ! empty($CI->response->meta->ids)) {\n            $device_ids = explode(',', $CI->response->meta->ids);\n        } else {\n            $log->level = 5;\n            $log->message = 'No ID, nor list of IDs supplied to sub_resource_create.';\n            stdlog($log);\n            log_error('ERR-0021', 'm_devices::sub_resource_create', 'No ID, nor list of IDs supplied to sub_resource_create.');\n            return false;\n        }\n\n        if (empty($sub_resource)) {\n            $sub_resource = $CI->response->meta->sub_resource;\n        }\n\n        if ($sub_resource === 'credential' OR ( ! empty($CI->response->meta->sub_resource) && $CI->response->meta->sub_resource === 'credential')) {\n            $this->load->library('encrypt');\n\n            foreach ($device_ids as $id) {\n                if ( ! empty($data->credentials)) {\n                    $credentials = (string)simpleEncrypt(json_encode($data->credentials));\n                } else if ( ! empty($CI->response->meta->received_data->attributes->credentials)) {\n                    $credentials = (string)simpleEncrypt(json_encode($CI->response->meta->received_data->attributes->credentials));\n                } else {\n                    $log->level = 5;\n                    $log->message = 'No credentials supplied to sub_resource_create.';\n                    stdlog($log);\n                    log_error('ERR-0021', 'm_devices::sub_resource_create', 'No credentials supplied to sub_resource_create.');\n                    return false;\n                }\n\n                if ( ! empty($data->type)) {\n                    $type = $data->type;\n                } else if ( ! empty($CI->response->meta->received_data->attributes->type)) {\n                    $type = $CI->response->meta->received_data->attributes->type;\n                } else {\n                    $log->level = 5;\n                    $log->message = 'No credential type supplied to sub_resource_create.';\n                    stdlog($log);\n                    log_error('ERR-0021', 'm_devices::sub_resource_create', 'No credential type supplied to sub_resource_create.');\n                    return false;\n                }\n\n                if ( ! empty($data->name)) {\n                    $name = $data->name;\n                } else if ( ! empty($CI->response->meta->received_data->attributes->name)) {\n                    $name = $CI->response->meta->received_data->attributes->name;\n                } else {\n                    $name = '';\n                }\n\n                if ( ! empty($data->description)) {\n                    $description = $data->description;\n                } else if ( ! empty($CI->response->meta->received_data->attributes->description)) {\n                    $description = $CI->response->meta->received_data->attributes->description;\n                } else {\n                    $description = '';\n                }\n\n                if ( ! empty($CI->user->full_name)) {\n                    $user = $CI->user->full_name;\n                } else {\n                    $user = '';\n                }\n\n                // we only store a SINGLE credential set of each type per device - delete any existing\n                $sql ='DELETE FROM `credential` WHERE `system_id` = ? AND `type` = ?';\n                $data = array(intval($id), (string)$type);\n                $this->run_sql($sql, $data);\n                // insert the new credentials\n                $sql = \"INSERT INTO `credential` VALUES (NULL, ?, 'y', ?, ?, ?, ?, ?, NOW())\";\n                $data = array(intval($id), (string)$name, (string)$description, (string)$type, (string)$credentials, (string)$user);\n                $this->run_sql($sql, $data);\n            }\n            return true;\n        } else if ($sub_resource === 'attachment') {\n            if (empty($_FILES['attachment'])) {\n                $log->severity = 5;\n                $log->summary = 'No file provided for sub_resource_create.';\n                $log->status = 'error';\n                stdlog($log);\n                log_error('ERR-0024', 'm_devices::sub_resource_create', 'No image file provided for sub_resource_create.');\n                return false;\n            }\n            $target = BASEPATH . '../application/attachments/' . $CI->response->meta->id . '_' . basename($_FILES['attachment']['name']);\n            if ( ! empty($CI->response->meta->cloud_id)) {\n                if ( ! file_exists(BASEPATH . '../application/attachments/' . $CI->response->meta->cloud_id)) {\n                    mkdir(BASEPATH . '../application/attachments/' . $CI->response->meta->cloud_id);\n                }\n                if ( ! file_exists(BASEPATH . '../application/attachments/' . $CI->response->meta->cloud_id)) {\n                    $log->severity = 5;\n                    $log->summary = 'No cloud attachments directory.';\n                    $log->detail = 'The cloud attachments directory does not exist and cannot be created. Error: ' . error_get_last();\n                    $log->status = 'error';\n                    stdlog($log);\n                    log_error('ERR-0037', 'm_devices::sub_resource_create', 'The cloud attachments directory does not exist and cannot be created.');\n                    return false;\n                } else {\n                    $target = BASEPATH . '../application/attachments/' . $CI->response->meta->cloud_id . '/' . $CI->response->meta->id . '_' . basename($_FILES['attachment']['name']);\n                }\n            }\n            if (@move_uploaded_file($_FILES['attachment']['tmp_name'], $target)) {\n                $sql = 'INSERT INTO `attachment` VALUES (NULL, ?, ?, ?, ?, NOW())';\n                $data = array(intval($CI->response->meta->id),\n                        $CI->response->meta->received_data->attributes->name,\n                        \"{$target}\",\n                        $CI->user->full_name);\n                $this->db->query($sql, $data);\n                return true;\n            } else {\n                $log->severity = 5;\n                $log->summary = 'Unable to move uploaded file.';\n                $log->status = 'error';\n                $log->detail = error_get_last();\n                stdlog($log);\n                log_error('ERR-0038', 'm_devices::sub_resource_create', 'Cannot move the uploaded attachment to $target.');\n                return false;\n            }\n        } else if ($sub_resource === 'image') {\n            if (empty($_FILES['attachment']) && empty($CI->response->meta->received_data->attributes->filename)) {\n                $log->severity = 5;\n                $log->summary = 'No image file provided for sub_resource_create.';\n                $log->status = 'error';\n                stdlog($log);\n                log_error('ERR-0024', 'm_devices::sub_resource_create', 'No image file provided for sub_resource_create.');\n                return false;\n            }\n            if ( ! file_exists($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images')) {\n                mkdir($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images');\n            }\n            if ( ! file_exists($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images')) {\n                $log->severity = 5;\n                $log->summary = 'No custom_images directory.';\n                $log->detail = 'The custom_images directory does not exist and cannot be created. Error: ' . error_get_last();\n                $log->status = 'error';\n                stdlog($log);\n                log_error('ERR-0037', 'm_devices::sub_resource_create', 'The custom_images directory does not exist and cannot be created.');\n                $sql = 'DELETE FROM `image` WHERE `id` = ' . $dbid;\n                $this->db->query($sql, array());\n                return false;\n            }\n            if ( ! empty($CI->response->meta->cloud_id)) {\n                if ( ! file_exists($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . $CI->response->meta->cloud_id)) {\n                    mkdir($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . $CI->response->meta->cloud_id);\n                }\n                if ( ! file_exists($_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . $CI->response->meta->cloud_id)) {\n                    $log->severity = 5;\n                    $log->summary = 'No cloud custom_images directory.';\n                    $log->detail = 'The cloud custom_images directory does not exist and cannot be created. Error: ' . error_get_last();\n                    $log->status = 'error';\n                    stdlog($log);\n                    log_error('ERR-0037', 'm_devices::sub_resource_create', 'The cloud custom_images directory does not exist and cannot be created.');\n                    $sql = 'DELETE FROM `image` WHERE `id` = ' . $dbid;\n                    $this->db->query($sql, array());\n                    return false;\n                }\n            }\n\n            if ( ! empty($_FILES['attachment']['name'])) {\n                $filename = (string)basename($_FILES['attachment']['name']);\n                // Ensure we only accept JPG, PNG and SVG files\n                if(function_exists('mime_content_type')) {\n                    $mime_type = mime_content_type($_FILES['attachment']['tmp_name']);\n                } else {\n                    $mime_type = '';\n                }\n                // $filetypes = array('image/png', 'image/svg+xml', 'image/svg', 'image/jpeg', '');\n                // $extensions = array('jpg', 'jpeg', 'png', 'svg');\n                // disabled SVG for now because of XSS issues when requesting the direct image\n                $filetypes = array('image/png', 'image/jpeg', '');\n                $extensions = array('jpg', 'jpeg', 'png');\n                $temp = explode('.', $filename);\n                $extension = strtolower($temp[count($temp)-1]);\n                if ( ! in_array($mime_type, $filetypes) OR ! in_array($extension, $extensions)) {\n                    unlink($_FILES['attachment']['tmp_name']);\n                    $log->severity = 5;\n                    $log->summary = 'Invalid file uploaded.';\n                    $log->detail = 'Only jpg, png and svg files are accepted.';\n                    $log->status = 'error';\n                    stdlog($log);\n                    log_error('ERR-0040', 'm_devices::sub_resource_create', 'Only jpg, png and svg files are accepted (' . $extension . ') (' . $mime_type . ')');\n                    return false;\n                }\n            }\n\n            if ( ! empty($filename)) {\n                $target = $_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . $filename;\n                if ( ! empty($CI->response->meta->cloud_id)) {\n                    $target = $_SERVER['DOCUMENT_ROOT'] . '/open-audit/custom_images/' . $CI->response->meta->cloud_id . '/' . $filename;\n                }\n                if (@move_uploaded_file($_FILES['attachment']['tmp_name'], $target)) {\n                    $sql = 'INSERT INTO `image` VALUES (NULL, ?, ?, ?, ?, ?, NOW())';\n                    $data = array(intval($CI->response->meta->id),\n                            $CI->response->meta->received_data->attributes->name,\n                            $filename,\n                            $CI->response->meta->received_data->attributes->orientation,\n                            $CI->user->full_name);\n                    $this->db->query($sql, $data);\n                    return true;\n                } else {\n                    $log->severity = 5;\n                    $log->summary = 'Unable to move uploaded file';\n                    $log->detail = 'Cannot move the uploaded image file to $target. Error: ' . error_get_last();\n                    $log->status = 'error';\n                    stdlog($log);\n                    log_error('ERR-0038', 'm_devices::sub_resource_create', 'Cannot move the uploaded image file to $target.');\n                    return false;\n                }\n            } else if ( ! empty($CI->response->meta->received_data->attributes->filename)) {\n                $sql = 'INSERT INTO `image` VALUES (NULL, ?, ?, ?, ?, ?, NOW())';\n                $data = array(intval($CI->response->meta->id),\n                        $CI->response->meta->received_data->attributes->name,\n                        basename($CI->response->meta->received_data->attributes->filename),\n                        $CI->response->meta->received_data->attributes->orientation,\n                        $CI->user->full_name);\n                $this->db->query($sql, $data);\n                return true;\n            } else {\n                $log->severity = 5;\n                $log->summary = 'No file uploaded, nor selected';\n                $log->detail = 'No file was uploaded, nor selected from the existing files.';\n                $log->status = 'error';\n                stdlog($log);\n                log_error('ERR-0038', 'm_devices::sub_resource_create', 'No file uploaded, nor selected.');\n                return false;\n            }\n        } else if ($sub_resource === 'application') {\n            $sql = \"INSERT INTO application VALUES (NULL, ?, ?, 'y', ?, NOW())\";\n            $data = array(intval($CI->response->meta->id),\n                            intval($CI->response->meta->received_data->attributes->{'applications_id'}),\n                            $CI->user->full_name);\n            $this->db->query($sql, $data);\n            return true;\n        } else if ($sub_resource === 'cluster') {\n            $sql = \"INSERT INTO cluster VALUES (NULL, ?, ?, ?, 'y', ?, NOW())\";\n            $data = array(intval($CI->response->meta->id),\n                            intval($CI->response->meta->received_data->attributes->{'clusters_id'}),\n                            $CI->response->meta->received_data->attributes->{'role'},\n                            $CI->user->full_name);\n            $this->db->query($sql, $data);\n            return true;\n        } else {\n            $log->summary = 'sub_resource not equal to attachment, credential or image - exiting.';\n            stdlog($log);\n                log_error('ERR-0021', 'm_devices::sub_resource_create', 'sub_resource not equal to attachment, credential or image.');\n            return false;\n        }\n    }\n\n    /**\n     * Count the number of rows a user is allowed to see\n     * @return int The count\n     */\n    public function count()\n    {\n        $CI = & get_instance();\n        $org_list = implode(',', array_unique(array_merge($CI->user->orgs, $CI->m_orgs->get_user_descendants($CI->user->id))));\n        $sql = \"SELECT COUNT(id) AS `count` FROM system WHERE org_id IN ({$org_list})\";\n        $result = $this->run_sql($sql, array());\n        return intval($result[0]->count);\n    }\n\n    /**\n     * [collection description]\n     * @param  [type] $user_id  [description]\n     * @param  [type] $response [description]\n     * @return [type]           [description]\n     */\n    public function collection($user_id = null, $response = null)\n    {\n        $CI = & get_instance();\n        if (! empty($user_id)) {\n            $org_list = implode(',', array_unique(array_merge($CI->user->orgs, $CI->m_orgs->get_user_descendants($user_id))));\n            $sql = \"SELECT * FROM system WHERE org_id IN ({$org_list})\";\n            $result = $this->run_sql($sql, array());\n            $result = $this->format_data($result, 'system');\n            return $result;\n        }\n        if (! empty($response)) {\n            $CI->response->meta->total = $this->count();\n            $sql = \"SELECT {$CI->response->meta->internal->properties}, orgs.name AS `orgs.name` FROM system LEFT JOIN orgs ON (system.org_id = orgs.id) \" .\n                    $CI->response->meta->internal->join . ' ' .\n                    $CI->response->meta->internal->filter . ' ' .\n                    $CI->response->meta->internal->groupby . ' ' .\n                    $CI->response->meta->internal->sort . ' ' .\n                    $CI->response->meta->internal->limit;\n            $result = $this->run_sql($sql, array());\n            $result = $this->format_data($result, 'system');\n            #$CI->response->data = $this->format_data($result, 'system');\n            #$CI->response->meta->filtered = count($CI->response->data);\n\n            if (isset($result[0]->attributes->{'system.type'}) and isset($result[0]->attributes->{'system.last_seen_by'})) {\n                for ($i=0; $i < count($result); $i++) {\n                    # BAD\n                    if ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'nmap' and ($result[$i]->{'attributes'}->{'system.type'} === 'unclassified' or $result[$i]->{'attributes'}->{'system.type'} === 'unknown')) {\n                        $result[$i]->attributes->audit_class = 'fa fa-times text-danger';\n                        $result[$i]->attributes->audit_text = 'Nmap discovered, data retrieval will be very limited.';\n\n                    # NOT GOOD\n                    } else if ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'nmap' and $result[$i]->{'attributes'}->{'system.type'} !== 'unclassified' and $result[$i]->{'attributes'}->{'system.type'} !== 'unknown') {\n                        $result[$i]->attributes->audit_class = 'fa fa-exclamation-triangle text-warning';\n                        $result[$i]->attributes->audit_text = 'Last discovery only Nmap worked. This may be an issue, or it may be a device of a type we cannot audit.';\n\n                    } else if ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'cloud') {\n                        #$result[$i]->attributes->audit_class = 'fa fa-times text-info';\n                        $result[$i]->attributes->audit_class = 'fa fa-exclamation-triangle text-warning';\n                        $result[$i]->attributes->audit_text = 'Cloud import, data retrieval will be very limited.';\n\n                    } else if ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'integrations') {\n                        #$result[$i]->attributes->audit_class = 'fa fa-times text-info';\n                        $result[$i]->attributes->audit_class = 'fa fa-exclamation-triangle text-warning';\n                        $result[$i]->attributes->audit_text = 'Integration import, data retrieval will be very limited.';\n\n                    } else if ($result[$i]->{'attributes'}->{'system.type'} === 'computer' and ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'ssh' or $result[$i]->{'attributes'}->{'system.last_seen_by'} === 'windows' or $result[$i]->{'attributes'}->{'system.last_seen_by'} === 'wmi' or $result[$i]->{'attributes'}->{'system.last_seen_by'} === 'snmp')) {\n                        $result[$i]->attributes->audit_class = 'fa fa-exclamation-triangle text-warning';\n                        $result[$i]->attributes->audit_text = 'Partially discovered computer. Data retrieval limited.';\n\n                    } else if ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'web form') {\n                        $result[$i]->attributes->audit_class = 'fa fa-exclamation-triangle text-warning';\n                        $result[$i]->attributes->audit_text = 'Manually created ' . $result[$i]->{'attributes'}->{'system.type'} . '. Data retrieval limited.';\n\n                    # GOOD\n                    } else if ($result[$i]->{'attributes'}->{'system.type'} === 'computer' and ($result[$i]->{'attributes'}->{'system.last_seen_by'} === 'audit_wmi' or $result[$i]->{'attributes'}->{'system.last_seen_by'} === 'audit_ssh')) {\n                        $result[$i]->attributes->audit_class = 'fa fa-check text-success';\n                        $result[$i]->attributes->audit_text = 'Discovered and audited computer.';\n\n                    } else if ($result[$i]->{'attributes'}->{'system.type'} === 'computer' and $result[$i]->{'attributes'}->{'system.last_seen_by'} === 'audit') {\n                        $result[$i]->attributes->audit_class = 'fa fa-check text-success';\n                        $result[$i]->attributes->audit_text = 'Audited computer.';\n\n                    } else if ($result[$i]->{'attributes'}->{'system.type'} !== 'computer' and !empty($result[$i]->{'attributes'}->{'system.snmp_oid'})) {\n                        $result[$i]->attributes->audit_class = 'fa fa-check text-success';\n                        $result[$i]->attributes->audit_text = 'Discovered and audited ' . $result[$i]->{'attributes'}->{'system.type'} . '.';\n\n                    # BAD - FALLBACK\n                    } else {\n                        $result[$i]->attributes->audit_class = 'fa fa-question text-danger';\n                        $result[$i]->attributes->audit_text = 'Limited information available.';\n                    }\n                }\n            }\n            $CI->response->data = $result;\n            $CI->response->meta->filtered = count($CI->response->data);\n\n        }\n    }\n\n    /**\n     * [collection_group_by description]\n     * @return [type] [description]\n     */\n    public function collection_group_by()\n    {\n        $CI = & get_instance();\n        $sql = \"SELECT id, COUNT(*) AS `count`, {$CI->response->meta->groupby} FROM system {$CI->response->meta->internal->groupby} {$CI->response->meta->internal->sort} {$CI->response->meta->internal->limit}\";\n        if (!empty($CI->response->meta->internal->properties)) {\n            $sql = \"SELECT {$CI->response->meta->internal->properties}, COUNT(*) AS `count`, {$CI->response->meta->groupby} FROM system {$CI->response->meta->internal->groupby} {$CI->response->meta->internal->sort} {$CI->response->meta->internal->limit}\";\n        }\n        $result = $this->run_sql($sql, array());\n        $result = $this->format_data($result, 'devices');\n        return $result;\n    }\n\n    /**\n     * [collection_sub_resource description]\n     * @return [type] [description]\n     */\n    public function collection_sub_resource()\n    {\n        $CI = & get_instance();\n        $filter = $this->_build_filter();\n        if (is_array($CI->user->org_list)) {\n            $CI->user->org_list = implode(',', $CI->user->org_list);\n        }\n        if ( ! empty($CI->response->meta->groupby)) {\n            if ( ! empty($CI->response->meta->internal->properties)) {\n                $CI->response->meta->internal->properties .= ', COUNT(*) AS `count`';\n            } else {\n                $CI->response->meta->internal->properties = 'COUNT(*) AS `count`';\n            }\n            // get the total count (with a GROUPBY)\n            $sql = \"SELECT COUNT(*) AS `count` FROM `{$CI->response->meta->sub_resource}` LEFT JOIN system ON (system.id = `{$CI->response->meta->sub_resource}`.system_id) WHERE system.org_id IN (\" . $CI->user->org_list . \") {$filter} {$CI->response->meta->internal->groupby}\";\n            $result = $this->run_sql($sql, array());\n            $CI->response->meta->total = intval(COUNT($result));\n        } else {\n            // get the total count (without a LIMIT and GROUPBY)\n            $sql = \"SELECT COUNT(*) AS `count` FROM `{$CI->response->meta->sub_resource}` LEFT JOIN system ON (system.id = `{$CI->response->meta->sub_resource}`.system_id) WHERE system.org_id IN (\" . $CI->user->org_list . \") {$filter}\";\n            $result = $this->run_sql($sql, array());\n            $CI->response->meta->total = 0;\n            if ( ! empty($result[0]->count)) {\n                $CI->response->meta->total = intval($result[0]->count);\n            }\n        }\n        if ($CI->response->meta->internal->properties === '*' OR $CI->response->meta->internal->properties === $CI->response->meta->sub_resource.'.*') {\n            $columns = $this->get_all_columns($CI->response->meta->sub_resource);\n        } else {\n            $columns = $CI->response->meta->internal->properties;\n        }\n        $sql = \"SELECT {$columns}, system.name AS `system.name` FROM `{$CI->response->meta->sub_resource}` LEFT JOIN system ON (system.id = `{$CI->response->meta->sub_resource}`.system_id) WHERE system.org_id IN ({$CI->user->org_list}) {$filter} {$CI->response->meta->internal->groupby} {$CI->response->meta->internal->sort} {$CI->response->meta->internal->limit}\";\n        $result = $this->run_sql($sql, array());\n        $result = $this->format_data($result, $CI->response->meta->sub_resource);\n        if ($CI->response->meta->sub_resource === 'credential' && count($result) > 0) {\n            foreach ($result as &$item) {\n                if ( ! empty($item->attributes->credentials)) {\n                    $item->attributes->credentials = json_decode(simpleDecrypt($item->attributes->credentials));\n                }\n            }\n        }\n\n        unset($item);\n        foreach ($result as &$item) {\n            $item->links->self = $CI->config->config['base_url'] . 'index.php/devices?sub_resource=' . $CI->response->meta->sub_resource;\n        }\n        unset($item);\n        return $result;\n    }\n\n    /**\n     * [report description]\n     * @return [type] [description]\n     */\n    public function report()\n    {\n        $CI = & get_instance();\n        $filter = $this->_build_filter();\n        $join = $this->_build_join();\n\n        $sql = \"SELECT system.id FROM system {$join} WHERE system.org_id IN (\" . $CI->user->org_list . \") {$filter} {$CI->response->meta->internal->groupby}\";\n        $result = $this->run_sql($sql, array());\n        foreach ($result as $temp) {\n            $temp_ids[] = $temp->id;\n        }\n        $system_id_list = implode(',', $temp_ids);\n        unset($temp, $temp_ids);\n\n        $sql = 'SELECT * FROM oa_report WHERE report_id = ' . @intval($CI->response->meta->sub_resource_id);\n        $result = $this->run_sql($sql, array());\n        $report = $result[0];\n        $CI->response->meta->sub_resource_name = $report->report_name;\n                         \n        // not how reports should be used\n        $report->report_sql = str_ireplace('LEFT JOIN oa_group_sys ON system.id = oa_group_sys.system_id', '', $report->report_sql);\n        // not how reports should be used\n        $report->report_sql = str_ireplace('LEFT JOIN oa_group_sys ON oa_group_sys.system_id = system.id', '', $report->report_sql);\n        // not how reports should be used\n        $report->report_sql = str_ireplace('LEFT JOIN oa_group_sys ON (system.id = oa_group_sys.system_id)', '', $report->report_sql);\n        // THIS is how reports _should_ be used\n        $report->report_sql = str_ireplace('LEFT JOIN oa_group_sys ON (oa_group_sys.system_id = system.id)', '', $report->report_sql);\n        $report->report_sql = str_ireplace('oa_group_sys.group_id = @group', 'system.id IN (' . $system_id_list . ')', $report->report_sql);\n        $report->report_sql = str_ireplace('system.id = oa_group_sys.system_id', 'system.id IN (' . $system_id_list . ')', $report->report_sql);\n\n        $result = $this->run_sql($report->report_sql, array());\n        $CI->response->meta->total = count($result);\n        if ( ! empty($CI->response->meta->limit)) {\n            $result = array_splice($result, $CI->response->meta->offset, $CI->response->meta->limit);\n        }\n        $result = $this->format_data($result, 'devices');\n        return($result);\n    }\n\n    /**\n     * [query description]\n     * @return [type] [description]\n     */\n    public function query()\n    {\n        $CI = & get_instance();\n\n        $group_id = 0;\n        if (is_array($CI->response->meta->filter)) {\n            for ($i=0; $i < count($CI->response->meta->filter); $i++) {\n                if ($CI->response->meta->filter[$i]->name === 'group') {\n                    $group_id = intval($CI->response->meta->filter[$i]->value);\n                    unset($CI->response->meta->filter[$i]);\n                }\n            }\n        }\n\n        $filter = $this->_build_filter();\n        $join = $this->_build_join();\n\n        $sql = 'SELECT * FROM queries WHERE id = ' . @intval($CI->response->meta->sub_resource_id);\n        $result = $this->run_sql($sql, array());\n        $query = $result[0];\n        $CI->response->meta->sub_resource_name = $query->menu_category . ' - ' . $query->name;\n\n        if ( ! empty($group_id)) {\n            $my_sql = '/* m_devices_components::read */' . 'SELECT `sql` FROM `groups` WHERE `id` = ' . intval($group_id);\n            $my_query = $this->db->query($my_sql);\n            $result = $my_query->result();\n            $group_sql = $result[0]->sql;\n            $device_sql = \"WHERE system.id IN (SELECT system.id FROM system WHERE system.org_id IN ({$CI->user->org_list}))\";\n            $group_sql = str_replace('WHERE @filter', $device_sql, $group_sql);\n            $group_sql = \" AND system.id IN ({$group_sql})\";\n        } else {\n            $group_sql = '';\n        }\n\n        $device_sql = \"WHERE system.id IN (SELECT system.id FROM system {$join} WHERE system.org_id IN ({$CI->user->org_list}) {$filter} {$CI->response->meta->internal->groupby})\";\n        $sql = $query->sql;\n        $sql = str_replace('WHERE @filter', $device_sql . $group_sql, $sql);\n        $result = $this->run_sql($sql, array());\n        $CI->response->meta->total = 0;\n\n        if ( ! empty($result)) {\n            for ($i=0; $i < count($result); $i++) {\n                foreach ($CI->response->meta->filter as $item) {\n                    if (isset($result[$i]->{$item->name})) {\n                        if ($item->operator === '=') {\n                            if ($result[$i]->{$item->name} !== $item->value) {\n                                unset($result[$i]);\n                            }\n                        }\n                        if ($item->operator === '!=') {\n                            if ($result[$i]->{$item->name} === $item->value) {\n                                unset($result[$i]);\n                            }\n                        }\n                    }\n                }\n            }\n            $CI->response->meta->total = count($result);\n        }\n\n        if ( ! empty($CI->response->meta->limit) && ! empty($result)) {\n            $result = array_splice($result, $CI->response->meta->offset, $CI->response->meta->limit);\n        }\n        $result = $this->format_data($result, 'devices');\n        return($result);\n    }\n\n    /**\n     * [group description]\n     * @return [type] [description]\n     */\n    public function group()\n    {\n        $CI = & get_instance();\n        $filter = $this->_build_filter();\n\n        $sql = 'SELECT * FROM groups WHERE id = ' . @intval($CI->response->meta->sub_resource_id);\n        $result = $this->run_sql($sql, array());\n        $group = $result[0];\n        $CI->response->meta->sub_resource_name = $group->name;\n\n        $filter = '';\n        if ( ! empty($CI->response->meta->filter)) {\n            foreach ($CI->response->meta->filter as $filter_entry) {\n                $filter .= ' AND ' . $filter_entry->name . ' ' . $filter_entry->operator . ' ' . '\"' . $filter_entry->value . '\"';\n            }\n        }\n\n        $device_sql = \"WHERE system.id IN (SELECT system.id FROM system WHERE system.org_id IN ({$CI->user->org_list}) {$filter}\";\n        if ( ! empty($CI->response->meta->requestor)) {\n            $device_sql = \"WHERE system.id IN (SELECT system.id FROM system WHERE system.org_id IN ({$CI->user->org_list}) AND system.oae_manage = 'y') {$filter}\";\n        }\n\n        $sql = $group->sql;\n        $sql = str_replace('WHERE @filter', $device_sql, $sql);\n        $sql = str_ireplace('SELECT DISTINCT(system.id)', 'SELECT system.id AS `system.id`, system.icon AS `system.icon`, system.type AS `system.type`, system.name AS `system.name`, system.domain AS `system.domain`, system.ip AS `system.ip`, system.description AS `system.description`, system.manufacturer AS `system.manufacturer`, system.os_family AS `system.os_family`, system.status AS `system.status`', $sql);\n        $result = $this->run_sql($sql, array());\n\n        if ( ! empty($result)) {\n            for ($i=0; $i < count($result); $i++) {\n                foreach ($CI->response->meta->filter as $item) {\n                    if (isset($result[$i]->{$item->name})) {\n                        if ($item->operator === '=') {\n                            if ($result[$i]->{$item->name} !== $item->value) {\n                                unset($result[$i]);\n                            }\n                        }\n                        if ($item->operator === '!=') {\n                            if ($result[$i]->{$item->name} === $item->value) {\n                                unset($result[$i]);\n                            }\n                        }\n                    }\n                }\n            }\n            $CI->response->meta->total = count($result);\n        } else {\n            $CI->response->meta->total = 0;\n        }\n\n        if ( ! empty($CI->response->meta->limit) && ! empty($result)) {\n            $result = array_splice($result, $CI->response->meta->offset, $CI->response->meta->limit);\n        }\n        $result = $this->format_data($result, 'devices');\n        return($result);\n    }\n\n    /**\n     * [update description]\n     * @param  [type] $device [description]\n     * @return [type]         [description]\n     */\n    public function update($device = null)\n    {\n        $CI = & get_instance();\n        $this->db->db_debug = false;\n\n        // account for a single id or multiple id's\n        $ids = array();\n\n        if ( ! is_null($device)) {\n            if (empty($device->id)) {\n                // TODO - throw an error\n                return;\n            } else {\n                $ids[] = $device->id;\n            }\n            if ( ! empty($device->last_seen_by)) {\n                $source = $device->last_seen_by;\n            } else {\n                $source = 'user';\n            }\n            $received_data = $device;\n        } else {\n            if ( ! empty($CI->response->meta->id)) {\n                $ids[] = $CI->response->meta->id;\n            } elseif ( ! empty($CI->response->meta->ids)) {\n                $ids = explode(',', $CI->response->meta->ids);\n            }\n            // set our last seen by\n            if ( ! empty($CI->response->received_data->attributes->last_seen_by)) {\n                $source = $CI->response->received_data->attributes->last_seen_by;\n            } else {\n                $source = 'user';\n            }\n            $received_data = $CI->response->meta->received_data->attributes;\n        }\n\n        if ( ! empty($CI->response->meta->received_data->attributes->status) && $CI->response->meta->received_data->attributes->status === 'deleted' && ! empty($CI->config->config['device_auto_delete']) && $CI->config->config['device_auto_delete'] === 'y') {\n            $sql = 'DELETE FROM `system` WHERE id IN ( ' . implode(',', $ids) . ')';\n            $data = array();\n            $this->run_sql($sql, $data);\n            return;\n        }\n\n        $CI->load->model('m_edit_log');\n        $CI->load->model('m_orgs');\n        $system_fields = implode(' ', $this->db->list_fields('system'));\n        $system_fields .= ' ';\n        $sql = 'SELECT id, name, group_id, org_id FROM fields';\n        $fields = $this->run_sql($sql, array());\n\n        // loop through our supplied data and test if it's a custom field or a system field,\n        // then update any supplied device id's\n        foreach ($received_data as $key => $value) {\n            $previous_value = '';\n\n            // check our custom fields\n            if ( ! empty($fields)) {\n                foreach ($fields as $field) {\n                    if ((string)$key === (string)$field->name) {\n                        // we have a custom field\n                        // check if this device is in the org and group associated with the field\n                        $field_orgs = $CI->m_orgs->get_children($field->org_id);\n                        $field_orgs[] = $field->org_id;\n                        $field_orgs = implode(',', $field_orgs);\n                        $sql = 'SELECT `sql` FROM `groups` WHERE id = ?';\n                        $data = array($field->group_id);\n                        $result = $this->run_sql($sql, $data);\n                        $test_sql = $result[0]->sql;\n                        if ( ! empty($CI->response->meta->requestor)) {\n                            $test_sql = str_replace('@filter', 'system.org_id IN (' . $field_orgs . ') AND system.oae_manage = \"y\"', $test_sql);\n                        } else {\n                            $test_sql = str_replace('@filter', 'system.org_id IN (' . $field_orgs . ')', $test_sql);\n                        }\n                        $test_sql .= ' AND system.id = ?';\n                        // get the original value (if it exists)\n                        foreach ($ids as $id) {\n                            $result = $this->run_sql($test_sql, array(intval($id)));\n                            // Only proceed if our system.id is in the fields assigned group\n                            if ( ! empty($result)) {\n                                $sql = 'SELECT id, value, fields_id FROM field WHERE system_id = ? AND fields_id = ?';\n                                $result = $this->run_sql($sql, array(intval($id), $field->id));\n                                if (isset($result[0]->value)) {\n                                    // If our column exists, it must have a value (even blank) - update it\n                                    $previous_value = $result[0]->value;\n                                    $sql = 'UPDATE field SET value = ?, timestamp = NOW() WHERE id = ?';\n                                    $result = $this->run_sql($sql, array((string)$value, $result[0]->id));\n                                    $CI->m_edit_log->create(intval($id), 'Field data was updated', 'field', $field->name, '', $value, $previous_value);\n                                } else {\n                                    // The row doesn't exist - insert a new one\n                                    $sql = 'INSERT INTO field VALUES (NULL, ?, ?, NOW(), ?)';\n                                    $result = $this->run_sql($sql, array(intval($id), intval($field->id), (string)$value));\n                                    $previous_value = '';\n                                    $CI->m_edit_log->create(intval($id), 'Field data was created', 'field', $field->name, '', $value, '');\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // now check the regular system table fields\n            if ((is_string($value) or is_int($value)) && (string)$value === '' && ($key === 'system.id' OR $key === 'id' OR $key === 'system.oae_manage' OR $key === 'oae_manage' OR $key === 'system.status' OR $key === 'status' OR $key === 'system.nmis_manage' OR $key === 'nmis_manage' OR $key === 'system.environment' OR $key === 'environment' OR $key === 'system.location_id' OR $key === 'location_id' OR $key === 'system.org_id' OR $key === 'org_id' OR $key === 'system.type' OR $key === 'type')) {\n                // We cannot set these fields to blank, they MUST contain a value\n\n            } else {\n                if (stripos($system_fields, ' '.$key.' ') !== false) {\n                    // we have a field from the system table\n                    foreach ($ids as $id) {\n                        // get the current value\n                        $sql = \"SELECT `{$key}` AS `{$key}` FROM `system` WHERE `id` = ?\";\n                        $data = array(intval($id));\n                        $result = $this->run_sql($sql, $data);\n                        $previous_value = @$result[0]->{$key};\n\n                        // get the current entry in the edit_log\n                        $sql = \"SELECT * FROM `edit_log` WHERE `system_id` = ? AND `db_table` = 'system' AND `db_column` = ? ORDER BY `timestamp` DESC LIMIT 1\";\n                        $data = array(intval($id), \"{$key}\");\n                        $result = $this->run_sql($sql, $data);\n                        if ( ! empty($result[0]->weight)) {\n                            $previous_weight = intval($result[0]->weight);\n                        } else {\n                            $previous_weight = 10000;\n                        }\n                        // calculate the weight\n                        $weight = intval($this->weight($source));\n                        if ((is_string($value) or is_int($value)) && $weight <= $previous_weight && (string)$value !== (string)$previous_value) {\n                            if ($key !== 'id' && $key !== 'last_seen' && $key !== 'last_seen_by' && $key !== 'first_seen') {\n                                // update the system table\n                                $sql = \"UPDATE `system` SET `{$key}` = ? WHERE id = ?\";\n                                $data = array((string)$value, intval($id));\n                                $this->run_sql($sql, $data);\n                                // insert an entry into the edit table\n                                $sql = \"INSERT INTO edit_log VALUES (NULL, ?, ?, 'Data was changed', ?, ?, 'system', ?, NOW(), ?, ?)\";\n                                $data = array(@intval($CI->user->id), intval($id), (string)$source, intval($weight), (string)$key, (string)$value, (string)$previous_value);\n                                $this->run_sql($sql, $data);\n                                // Special case the 'type' - set the icon to match\n                                if ($key === 'type') {\n                                    $sql = \"UPDATE `system` SET `icon` = '\" . str_replace(' ', '_', $value) . \"' WHERE id = ?\";\n                                    $data = array(intval($id));\n                                    $this->run_sql($sql, $data);\n                                }\n                            }\n                        } else {\n                            // We have an existing edit_log entry with a more important change - don't touch the `system`.`$key` value\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n    * Pass in a string detailing what has attempted to set a value and receive a result containing the weight\n    *\n    * @param   string $set_by The source\n    * @access  public\n    * @return  int the integer containing the weighted value\n    */\n    public function weight($set_by = 'user')\n    {\n\n        // We assign a weight to the submitted data and compare it to what we already have for each column\n        // Valid weights and the sources are:\n        // 1000 - user or import (import should set as user as well)\n        // 1500 - rules\n        // 2000 - audit, audit_ssh, audit_wmi, windows, wmi\n        // 3000 - snmp, ssh, nmis (note - ssh and snmp because they may contain data from nmap)\n        // 4000 - ipmi\n        // 5000 - ad (active directory)\n        // 6000 - nmap\n        // The lower the value, the higher the priority is given\n\n        switch ($set_by) {\n            case 'user':\n                $weight = 1000;\n                break;\n\n            case 'rules':\n                $weight = 1500;\n                break;\n\n            case 'audit':\n            case 'audit_ssh':\n            case 'audit_wmi':\n            case 'windows':\n            case 'wmi':\n                $weight = 2000;\n                break;\n\n            case 'cloud':\n            case 'nmis':\n            case 'snmp':\n            case 'ssh':\n                $weight = 3000;\n                break;\n\n            case 'ipmi':\n            case 'integrations':\n                $weight = 4000;\n                break;\n\n            case 'ad':\n            case 'active directory':\n                $weight = 5000;\n                break;\n\n            case 'nmap':\n                $weight = 6000;\n                break;\n            \n            default:\n                $weight = 10000;\n                break;\n        }\n        return($weight);\n    }\n\n    /**\n    * Pass in a resultset and have the integer columns return as INT types, not strings\n    * Columns named id, free, size, speed, total or used will be converted to integer types.\n    * Columns names ending in _id, _count, _percent or _Size will be converted to integer types\n    *\n    * @param   array $result the result of a query, an array of objects\n    * @access  public\n    * @return  array an array of objects with the integer columns set as int types\n    */\n    public function from_db($result)\n    {\n        unset($item);\n        foreach ($result as &$item) {\n            foreach ($item as $key => $value) {\n                if ($key === 'id' OR $key === 'free' OR $key === 'size' OR $key === 'speed' OR $key === 'total' OR $key === 'used' OR\n                strrpos($key, '_id') === strlen($key)-3 OR strrpos($key, '_count') === strlen($key)-6 OR\n                strrpos($key, '_percent') === strlen($key)-8 OR strrpos($key, '_size') === strlen($key)-5 ) {\n                    $item->$key = (int) intval($value);\n                }\n            }\n        }\n        unset($item);\n        return($result);\n    }\n\n    /**\n    * Insert a new device into the system table using whatever values we have and insert corresponding rows into the sys_edit_log table\n    *\n    * @param array $details the array of attributes from the system table\n    * @access  public\n    *\n    * @return string $id which is the id of the device in the system table\n    */\n    public function create(&$details)\n    {\n\n        // nasty hack because when a simplexmlobject is sent (ie, from audit_windows.vbs)\n        // the foreach iterators below don't work.\n        // if we cast it to an \"object\", it stays as a SimpleXMLObject and doesn't work\n        // because our XML is quite simple, we can cast it to an array and back to a 'normal'\n        // object and the foreach below works.\n\n        $details = (object) $details;\n        $details = (array) $details;\n        $details = (object) $details;\n        // this is an insert - we do NOT want a system.id\n        unset($details->id);\n\n        // get a name we can use\n        if ( ! empty($details->name)) {\n            $name = $details->name;\n        } elseif ( ! empty($details->hostname)) {\n            $name = $details->hostname;\n            $details->name = $details->hostname;\n        } elseif ( ! empty($details->sysName)) {\n            $name = $details->sysName;\n            $details->name = $details->sysName;\n        } elseif ( ! empty($details->dns_hostname)) {\n            $name = $details->dns_hostname;\n            $details->name = $details->dns_hostname;\n        } elseif ( ! empty($details->ip)) {\n            $name = $details->ip;\n            $details->name = $details->ip;\n        }\n\n        if ( ! isset($details->ip)) {\n            $details->ip = '';\n        }\n\n        $log_details = new stdClass();\n        $log_details->ip = ip_address_from_db($details->ip);\n        $log_details->message = 'System insert start for '.ip_address_from_db($details->ip);\n        $log_details->severity = 7;\n        $log_details->file = 'system';\n        stdlog($log_details);\n\n        // remove some characters from the OS string\n        if ( ! empty($details->os_name)) {\n            $details->os_name = str_ireplace('(r)', '', $details->os_name);\n            $details->os_name = str_ireplace('(tm)', '', $details->os_name);\n        }\n\n\n        if (empty($details->status)) {\n            $details->status = 'production';\n        }\n        if (empty($details->type)) {\n            $details->type = 'unknown';\n        } else {\n            $details->type = strtolower($details->type);\n        }\n        if (empty($details->environment)) {\n            $details->environment = 'production';\n        }\n\n        // we now set a default location - 1 the location_id\n        if ( ! isset($details->location_id)) {\n            $details->location_id = 1;\n        }\n\n        // Set the form factor to virtual if required\n        if ( ! empty($details->manufacturer)) {\n            if ((strripos($details->manufacturer, 'vmware') !== false) OR (strripos($details->manufacturer, 'parallels') !== false) OR (strripos($details->manufacturer, 'virtual') !== false)) {\n                if ( ! isset($details->class) OR $details->class !== 'hypervisor') {\n                    $details->form_factor = 'Virtual';\n                }\n            }\n        }\n        if ( ! empty($details->model)) {\n            if (strripos($details->model, 'bhyve') !== false) {\n                if ( ! isset($details->class) OR $details->class !== 'hypervisor') {\n                    $details->form_factor = 'Virtual';\n                }\n            }\n        }\n\n        // Pad the IP address\n        if ( ! empty($details->ip)) {\n            $details->ip = ip_address_to_db($details->ip);\n        }\n\n        if ( ! empty($details->hostname) && ! empty($details->domain) && empty($details->fqdn)) {\n            $details->fqdn = $details->hostname . '.' . $details->domain;\n        }\n\n        $sql = 'SHOW COLUMNS FROM system';\n        $columns = $this->run_sql($sql, array());\n\n        $sql = 'INSERT INTO system ( ';\n        foreach ($details as $key => $value) {\n            if ((is_string($value) or is_string($value)) && $key > '') {\n                // need to iterate through available columns and only insert where $key == valid column name\n                foreach ($columns as $column) {\n                    if ((string)$key === (string)$column->Field) {\n                        $sql .= $key.', ';\n                    }\n                }\n            }\n        }\n        $sql = mb_substr($sql, 0, mb_strlen($sql)-2);\n        $sql .= ' ) VALUES ( ';\n        foreach ($details as $key => $value) {\n            if ((is_string($value) or is_string($value)) && $key != '') {\n                foreach ($columns as $column) {\n                    if ((string)$key === (string)$column->Field) {\n                        $sql .= \"'\".mysqli_real_escape_string($this->db->conn_id, str_replace('\"', '', $value)).\"', \";\n                    }\n                }\n            }\n        }\n        $sql = mb_substr($sql, 0, mb_strlen($sql)-2);\n        $sql .= ')';\n\n        $query = $this->db->query($sql);\n        $details->id = $this->db->insert_id();\n\n        // set the weight for these $details\n        $weight = $this->weight($details->last_seen_by);\n\n        // insert entries into the edit_log table for these $details columns\n        foreach ($details as $key => $value) {\n            if ($key > '') {\n                foreach ($columns as $column) {\n                    if ((string)$key === (string)$column->Field) {\n                        if (is_string($value) or is_string($value)) {\n                            $sql = \"INSERT INTO edit_log VALUES (NULL, 0, ?, '', ?, ?, 'system', ?, ?, ?, ?)\";\n                            $data = array(intval($details->id), \"{$details->last_seen_by}\", \"{$weight}\", \"{$key}\", \"{$details->last_seen}\", \"{$value}\", '');\n                            $query = $this->db->query($sql, $data);\n                        }\n                    }\n                }\n            }\n        }\n\n        // update the device icon\n        $this->reset_icons($details->id);\n\n        // insert a subnet so we have a default\n        if ( ! isset($details->subnet) OR $details->subnet === '') {\n            $details->subnet = '0.0.0.0';\n        }\n\n        $log_details->ip = ip_address_from_db($details->ip);\n        $log_details->message = 'System insert end for '.ip_address_from_db($details->ip);\n        stdlog($log_details);\n        unset($log_details);\n        return $details->id;\n    }\n\n    /**\n    * Reset the icon for a single device or all devices.\n    *\n    * @param int $id The system.id of a given system\n    * @access  public\n    *\n    * @return int returns the count of the number of icons affected\n    */\n    public function reset_icons($id = '')\n    {\n        if ($id !== '') {\n            $sql = 'SELECT id, type, os_name, os_family, os_group, manufacturer FROM system WHERE id = ' . intval($id);\n        } else {\n            $sql = 'SELECT id, type, os_name, os_family, os_group, manufacturer FROM system';\n        }\n        $query = $this->db->query($sql);\n        $result = $query->result();\n        $count = $query->num_rows();\n        // we set computer icons by OS, everything else by type\n        foreach ($result as $details) {\n            if ($details->type === 'computer') {\n                // determine icon for computer\n                // most generic to most specific\n                $details->icon = 'computer';\n\n                // manufacturer based\n                if (strripos($details->manufacturer, 'apple') !== false) {\n                    $details->icon = 'apple';\n                }\n                if (strripos($details->manufacturer, 'vmware') !== false) {\n                    $details->icon = 'vmware';\n                }\n                if (strripos($details->manufacturer, 'xen') !== false) {\n                    $details->icon = 'xen';\n                }\n                if (strripos($details->manufacturer, 'google') !== false) {\n                    $details->icon = 'google_kvm';\n                }\n\n                // os_group based\n                if (strripos($details->os_group, 'linux') !== false) {\n                    $details->icon = 'linux';\n                }\n                if (strripos($details->os_group, 'apple') !== false) {\n                    $details->icon = 'apple';\n                }\n                if (strripos($details->os_group, 'windows') !== false) {\n                    $details->icon = 'windows';\n                }\n\n                // os name based\n                if ((strripos($details->os_name, 'osx') !== false) OR (strpos(strtolower($details->os_name), 'ios') !== false)) {\n                    $details->icon = 'apple';\n                }\n                if (strripos($details->os_name, 'aix') !== false) {\n                    $details->icon = 'aix';\n                }\n                if (strripos($details->os_name, 'amazon') !== false) {\n                    $details->icon = 'amazon';\n                }\n                if (strripos($details->os_name, 'arch') !== false) {\n                    $details->icon = 'arch';\n                }\n                if (strripos($details->os_name, 'bsd') !== false) {\n                    $details->icon = 'bsd';\n                }\n                if (strripos($details->os_name, 'centos') !== false) {\n                    $details->icon = 'centos';\n                }\n                if (strripos($details->os_name, 'debian') !== false) {\n                    $details->icon = 'debian';\n                }\n                if (strripos($details->os_name, 'fedora') !== false) {\n                    $details->icon = 'fedora';\n                }\n                if (strripos($details->os_name, 'hp-ux') !== false) {\n                    $details->icon = 'hp-ux';\n                }\n                if ((strripos($details->os_name, 'mandriva') !== false) OR (strripos($details->os_name, 'mandrake') !== false)) {\n                    $details->icon = 'mandriva';\n                }\n                if (strripos($details->os_name, 'mint') !== false) {\n                    $details->icon = 'mint';\n                }\n                if (strripos($details->os_name, 'novell') !== false) {\n                    $details->icon = 'novell';\n                }\n                if (strripos($details->os_name, 'oracle') !== false) {\n                    $details->icon = 'oracle';\n                }\n                if (strripos($details->os_name, 'slackware') !== false) {\n                    $details->icon = 'slackware';\n                }\n                if (strripos($details->os_name, 'solaris') !== false) {\n                    $details->icon = 'solaris';\n                }\n                if (strripos($details->os_name, 'solus') !== false) {\n                    $details->icon = 'solus';\n                }\n                if (strripos($details->os_name, 'suse') !== false) {\n                    $details->icon = 'suse';\n                }\n                if ((strripos($details->os_name, 'red hat') !== false) OR (strripos($details->os_name, 'redhat') !== false)) {\n                    $details->icon = 'redhat';\n                }\n                if (strripos($details->os_name, 'ubuntu') !== false) {\n                    $details->icon = 'ubuntu';\n                }\n                if (strripos($details->os_name, 'vmware') !== false) {\n                    $details->icon = 'vmware';\n                }\n                if (strripos($details->os_name, 'windows') !== false) {\n                    $details->icon = 'windows';\n                }\n                if (strripos($details->os_name, 'microsoft') !== false) {\n                    $details->icon = 'windows';\n                }\n            } else {\n                // device is not type=computer\n                // base the icon on the type\n                if (strpos($details->type, '|') === false) {\n                    // if the type does not contain a |, use it.\n                    // Nmap will often return a pipe separated list when it guesses\n                    $details->icon = str_replace(' ', '_', $details->type);\n                } else {\n                    // we have a pipe (likely an nmap list) so just just unknown\n                    $details->icon = 'unknown';\n                }\n            }\n\n            $sql = 'UPDATE system SET icon = ? WHERE id = ?';\n            $data = array(\"{$details->icon}\", intval($details->id));\n            $query = $this->db->query($sql, $data);\n        }\n\n        return ($count);\n    }\n\n    /**\n     * [update_devices_icons description]\n     * @param  string $id [description]\n     * @return [type]     [description]\n     */\n    public function update_devices_icons($id = '')\n    {\n        if ($id !== '') {\n            $sql = 'SELECT system.id, type, os_name, os_family, os_group, manufacturer FROM system LEFT JOIN oa_group_sys ON oa_group_sys.system_id = system.id WHERE oa_group_sys.group_id = ' . intval($id);\n        } else {\n            $sql = 'SELECT id, type, os_name, os_family, os_group, manufacturer FROM system';\n        }\n        $query = $this->db->query($sql);\n        $result = $query->result();\n        $count = $query->num_rows();\n        // we set computer icons by OS, everything else by type\n        foreach ($result as $details) {\n            if ($details->type === 'computer') {\n                // determine icon for computer\n                // most generic to most specific\n\n                // manufacturer based\n                if (strripos($details->manufacturer, 'apple') !== false) {\n                    $details->icon = 'apple';\n                }\n                if (strripos($details->manufacturer, 'vmware') !== false) {\n                    $details->icon = 'vmware';\n                }\n                if (strripos($details->manufacturer, 'xen') !== false) {\n                    $details->icon = 'xen';\n                }\n                if (strripos($details->manufacturer, 'google') !== false) {\n                    $details->icon = 'google_kvm';\n                }\n\n                // os_group based\n                if (strripos($details->os_group, 'linux') !== false) {\n                    $details->icon = 'linux';\n                }\n                if (strripos($details->os_group, 'apple') !== false) {\n                    $details->icon = 'apple';\n                }\n                if (strripos($details->os_group, 'windows') !== false) {\n                    $details->icon = 'windows';\n                }\n\n                // os name based\n                if ((strripos($details->os_name, 'osx') !== false) OR (strpos(strtolower($details->os_name), 'ios') !== false)) {\n                    $details->icon = 'apple';\n                }\n                if (strripos($details->os_name, 'aix') !== false) {\n                    $details->icon = 'aix';\n                }\n                if (strripos($details->os_name, 'amazon') !== false) {\n                    $details->icon = 'amazon';\n                }\n                if (strripos($details->os_name, 'bsd') !== false) {\n                    $details->icon = 'bsd';\n                }\n                if (strripos($details->os_name, 'centos') !== false) {\n                    $details->icon = 'centos';\n                }\n                if (strripos($details->os_name, 'debian') !== false) {\n                    $details->icon = 'debian';\n                }\n                if (strripos($details->os_name, 'fedora') !== false) {\n                    $details->icon = 'fedora';\n                }\n                if (strripos($details->os_name, 'hp-ux') !== false) {\n                    $details->icon = 'hp-ux';\n                }\n                if ((strripos($details->os_name, 'mandriva') !== false) OR (strripos($details->os_name, 'mandrake') !== false)) {\n                    $details->icon = 'mandriva';\n                }\n                if (strripos($details->os_name, 'mint') !== false) {\n                    $details->icon = 'mint';\n                }\n                if (strripos($details->os_name, 'novell') !== false) {\n                    $details->icon = 'novell';\n                }\n                if (strripos($details->os_name, 'oracle') !== false) {\n                    $details->icon = 'oracle';\n                }\n                if (strripos($details->os_name, 'slackware') !== false) {\n                    $details->icon = 'slackware';\n                }\n                if (strripos($details->os_name, 'suse') !== false) {\n                    $details->icon = 'suse';\n                }\n                if ((strripos($details->os_name, 'red hat') !== false) OR (strripos($details->os_name, 'redhat') !== false)) {\n                    $details->icon = 'redhat';\n                }\n                if (strripos($details->os_name, 'ubuntu') !== false) {\n                    $details->icon = 'ubuntu';\n                }\n                if (strripos($details->os_name, 'vmware') !== false) {\n                    $details->icon = 'vmware';\n                }\n                if (strripos($details->os_name, 'windows') !== false) {\n                    $details->icon = 'windows';\n                }\n                if (strripos($details->os_name, 'microsoft') !== false) {\n                    $details->icon = 'windows';\n                }\n            } else {\n                // device is not type=computer\n                // base the icon on the type\n                if (strpos($details->type, '|') === false) {\n                    // if the type does not contain a |, use it.\n                    // Nmap will often return a pipe separated list when it guesses\n                    $details->icon = str_replace(' ', '_', $details->type);\n                } else {\n                    // we have a pipe (likely an nmap list) so just just unknown\n                    $details->icon = 'unknown';\n                }\n            }\n            $sql = '/* m_devices::update_icons */ ' . 'UPDATE system SET icon = ? WHERE id = ?';\n            $data = array(\"{$details->icon}\", intval($details->id));\n            $query = $this->db->query($sql, $data);\n        }\n        return ($count);\n    }\n\n    /**\n     * [model_guess description]\n     * @param  [type] $device [description]\n     * @return [type]         [description]\n     */\n    public function model_guess($device)\n    {\n        if (stripos($device->manufacturer, 'Ubiquiti') !== false) {\n            if (stripos($device->sysDescr, 'UAP') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP';\n            }\n            if (stripos($device->sysDescr, 'UAP-LR') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-LR';\n            }\n            if (stripos($device->sysDescr, 'UAP-Pro') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-Pro';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-EDU') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-EDU';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-HD') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-HD';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-Lite') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-Lite';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-LR') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-LR';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-PRO') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-Pro';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-PRO-Gen2') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-Pro gen 2';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-SHD') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-SHD';\n            }\n            if (stripos($device->sysDescr, 'UAP-AC-Mesh-Pro') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-AC-Mesh-Pro';\n            }\n            if (stripos($device->sysDescr, 'UAP-Outdoor') !== false) {\n                $device->type = 'wap';\n                $device->model = 'UniFi AP-Outdoor';\n            }\n        }\n        return($device);\n    }\n\n    /**\n     * [dictionary description]\n     * @return [type] [description]\n     */\n    public function dictionary()\n    {\n        $CI = & get_instance();\n        $collection = 'devices';\n        $CI->temp_dictionary->link = str_replace('$collection', $collection, $CI->temp_dictionary->link);\n        $this->load->helper('collections');\n\n        $dictionary = new stdClass();\n        $dictionary->table = $collection;\n        $dictionary->about = '';\n        $dictionary->marketing = '';\n        $dictionary->notes = '';\n        $dictionary->columns = new stdClass();\n        $dictionary->attributes = new stdClass();\n        $dictionary->attributes->fields = $this->db->list_fields('system');\n        $dictionary->attributes->create = array();\n        $dictionary->attributes->update = array();\n        $dictionary->sentence = 'Open-AudIT tracks every device on your network. Change a device - see it. Move a device - see it. Remove a device - see it.';\n        $dictionary->marketing = '<p>Devices on your network need to be managed. But how do you keep your records up to date? A spreadsheet - defintley not. That will be out of date in hours, if not days. Why manually try to keep up. Use Open-AudIT to automatically scan your networks and record your devices - manufacturer, model, serial and more than 100 other attributes. Full lists of software, services, disks, open ports, users, etc. Automatically see if an attribute has been added, removed or changed.<br /><br />Once Open-AudIT is setup, you can sit back and relax. Have change reports emailed to you on a schedule, for example - what new devices did we discover this week? What new software was installed this week? Were there any hardware changes last month?<br /><br />Expand on the stored fields easily with your own custom attributes.<br /><br />Even add devices that aren\\'t connected to your network or those devices your Open-AudIT server cannot reach.<br /><br />Computers, switches, routers, printers or any other device on your network - Open-AudIT can audit them all.<br /><br />' . $CI->temp_dictionary->link . '<br /><br /></p>';\n        $dictionary->about = '<p>Devices on your network need to be managed. But how do you keep your records up to date? A spreadsheet - defintley not. That will be out of date in hours, if not days. Why manually try to keep up. Use Open-AudIT to automatically scan your networks and record your devices - manufacturer, model, serial and more than 100 other attributes. Full lists of software, services, disks, open ports, users, etc. Automatically see if an attribute has been added, removed or changed.<br /><br />Once Open-AudIT is setup, you can sit back and relax. Have change reports emailed to you on a schedule, for example - what new devices did we discover this week? What new software was installed this week? Were there any hardware changes last month?<br /><br />Expand on the stored fields easily with your own custom attributes.<br /><br />Computers, switches, routers, printers or any other device on your network - Open-AudIT can audit them all.<br /><br />' . $CI->temp_dictionary->link . '<br /><br /></p>';\n        $dictionary->product = 'community';\n\n        $dictionary->columns->id = $CI->temp_dictionary->id;\n        $dictionary->columns->name = $CI->temp_dictionary->name;\n        $dictionary->columns->org_id = $CI->temp_dictionary->org_id;\n        $dictionary->columns->last_seen = 'The last time that Open-AudIT retrieved details of this device.';\n        $dictionary->columns->last_seen_by = 'The process that was used last to retrieve details about the device';\n        return $dictionary;\n    }\n}\n// End of file m_devices.php\n// Location: ./models/m_devices.php\n"], "filenames": ["code_igniter/application/controllers/devices.php", "code_igniter/application/models/m_devices.php"], "buggy_code_start_loc": [688, 734], "buggy_code_end_loc": [699, 735], "fixing_code_start_loc": [687, 734], "fixing_code_end_loc": [692, 735], "type": "CWE-22", "message": "An information exposure issue has been discovered in Opmantek Open-AudIT 4.2.0. The vulnerability allows an authenticated attacker to read file outside of the restricted directory.", "other": {"cve": {"id": "CVE-2021-44674", "sourceIdentifier": "cve@mitre.org", "published": "2022-01-03T13:15:09.997", "lastModified": "2022-01-11T16:36:29.893", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An information exposure issue has been discovered in Opmantek Open-AudIT 4.2.0. The vulnerability allows an authenticated attacker to read file outside of the restricted directory."}, {"lang": "es", "value": "Se ha detectado un problema de exposici\u00f3n de informaci\u00f3n en Opmantek Open-AudIT versi\u00f3n 4.2.0. La vulnerabilidad permite a un atacante autenticado leer archivos fuera del directorio restringido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opmantek:open-audit:4.2.0:*:*:*:-:*:*:*", "matchCriteriaId": "D09D56F9-AD39-4557-AB0F-149C7A570B1E"}]}]}], "references": [{"url": "http://open-audit.com", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "http://opmantek.com", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://community.opmantek.com/display/OA/Release+Notes+for+Open-AudIT+v4.3.0", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/Opmantek/open-audit/commit/d27b649283aa6a01a15e5a3df1520d7aa69a5e18", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Opmantek/open-audit/commit/d27b649283aa6a01a15e5a3df1520d7aa69a5e18"}}