{"buggy_code": ["<h1 style=\"font-size:110%;font-family:Arial, sans-serif;\"><%= error %></h1>", "<% if failed_multiple_queues? && !params[:queue] %>\n<h1>All Failed Queues: <%= Resque::Failure.queues.size %> total</h1>\n<% else %>\n<h1>Failed Jobs <%= \"on '#{params[:queue]}'\" if params[:queue] %> <%= \"with class '#{params[:class]}'\" if params[:class] %></h1>\n<% end %>\n\n<% unless failed_size.zero? %>\n<form method=\"POST\" action=\"<%= u \"failed#{'/' + params[:queue] if params[:queue]}/clear\" %>\">\n  <input type=\"submit\" name=\"\" value=\"Clear <%= params[:queue] ? \"'#{params[:queue]}'\" : 'Failed' %> Jobs\" class=\"confirmSubmission\" />\n</form>\n\n<% unless params[:queue] %>\n  <form method=\"POST\" action=\"<%= u \"failed/clear_retried\" %>\">\n    <input type=\"submit\" name=\"\" value=\"Clear Retried Jobs\" onclick='return confirm(\"Are you absolutely sure? This cannot be undone.\");' />\n  </form>\n<% end %>\n<form method=\"POST\" action=\"<%= u \"failed#{'/' + params[:queue] if params[:queue]}/requeue/all\" %>\">\n  <input type=\"submit\" name=\"\" value=\"Retry <%= params[:queue] ? \"'#{params[:queue]}'\" : 'Failed' %> Jobs\" class=\"confirmSubmission\" />\n</form>\n<% end %>\n\n<% if failed_multiple_queues? && !params[:queue] %>\n<%= partial :failed_queues_overview %>\n<% else %>\n<p class='sub'><%= page_entries_info failed_start_at, failed_end_at, failed_size, 'job' %></p>\n\n\n<ul class='failed'>\n  <% Resque::Failure.each(failed_start_at, failed_per_page, params[:queue], params[:class], failed_order) do |id, job| %>\n    <%= partial :failed_job, :id => id, :job => job, :queue => \"failed#{'/' + params[:queue] if params[:queue]}\" %>\n  <% end %>\n</ul>\n\n<%= partial :next_more, :start => failed_start_at, :size => failed_size, :per_page => failed_per_page if failed_size > 0 %>\n<% end %>\n", "<% if key = params[:key] %>\n  <h1>Key \"<%= key %>\" is a <%= resque.redis.type key %></h1>\n  <h2>size: <%= redis_get_size(key) %></h2>\n  <table>\n    <tr>\n      <td>\n        <%= redis_get_value_as_array(key) %>\n      </td>\n    </tr>\n  </table>\n<% end %>\n", "<% @subtabs = resque.queues unless partial? || params[:id].nil? %>\n\n<% if current_queue = params[:id] %>\n\n  <h1>Pending jobs on <span class='hl'><%= h current_queue %></span></h1>\n  <form method=\"POST\" action=\"<%=u \"/queues/#{current_queue}/remove\" %>\" class='remove-queue'>\n    <input type='submit' name='' value='Remove Queue' class=\"confirmSubmission\" />\n  </form>\n  <p class='sub'><%= page_entries_info start = params[:start].to_i, start + 19, size = resque.size(current_queue), 'job' %></p>\n  <table class='jobs'>\n    <tr>\n      <th>Class</th>\n      <th>Args</th>\n    </tr>\n    <% for job in (jobs = resque.peek(current_queue, start, 20)) %>\n    <tr>\n      <td class='class'><%= partial :job_class, :job => job %></td>\n      <td class='args'><%=h job['args'].inspect %></td>\n    </tr>\n    <% end %>\n    <% if jobs.empty? %>\n    <tr>\n      <td class='no-data' colspan='2'>There are no pending jobs in this queue</td>\n    </tr>\n    <% end %>\n  </table>\n  <%= partial :next_more, :start => start, :size => size, :per_page => 20 %>\n<% else %>\n\n  <h1 class='wi'>Queues</h1>\n  <p class='intro'>The list below contains all the registered queues with the number of jobs currently in the queue. Select a queue from above to view all jobs currently pending on the queue.</p>\n  <table class='queues'>\n    <tr>\n      <th>Name</th>\n      <th>Jobs</th>\n    </tr>\n    <% resque.queues.sort_by { |q| q.to_s }.each do |queue| %>\n    <tr>\n      <td class='queue'><a class=\"queue\" href=\"<%= u \"queues/#{queue}\" %>\"><%= queue %></a></td>\n      <td class='size'><%= resque.size queue %></td>\n    </tr>\n    <% end %>\n    <% if failed_multiple_queues? %>\n      <% Resque::Failure.queues.sort_by { |q| q.to_s }.each_with_index do |queue, i| %>\n      <tr class=\"<%= Resque::Failure.count(queue).zero? ? \"failed\" : \"failure\" %><%= \" first_failure\" if i.zero? %>\">\n        <td class='queue failed'><a class=\"queue\" href=\"<%= u \"failed/#{queue}\" %>\"><%= queue %></a></td>\n        <td class='size'><%= Resque::Failure.count(queue) %></td>\n      </tr>\n      <% end %>\n    <% else %>\n      <tr class=\"<%= Resque::Failure.count.zero? ? \"failed\" : \"failure\" %>\">\n        <td class='queue failed'><a class=\"queue\" href=\"<%= u :failed %>\">failed</a></td>\n        <td class='size'><%= Resque::Failure.count %></td>\n      </tr>\n    <% end %>\n  </table>\n\n<% end %>\n"], "fixing_code": ["<h1 style=\"font-size:110%;font-family:Arial, sans-serif;\"><%= escape_html(error) %></h1>\n", "<% if failed_multiple_queues? && !params[:queue] %>\n<h1>All Failed Queues: <%= Resque::Failure.queues.size %> total</h1>\n<% else %>\n<h1>Failed Jobs <%= \"on '#{escape_html(params[:queue])}'\" if params[:queue] %> <%= \"with class '#{escape_html(params[:class])}'\" if params[:class] %></h1>\n<% end %>\n\n<% unless failed_size.zero? %>\n<form method=\"POST\" action=\"<%= u \"failed#{'/' + params[:queue] if params[:queue]}/clear\" %>\">\n  <input type=\"submit\" name=\"\" value=\"Clear <%= params[:queue] ? \"'#{escape_html(params[:queue])}'\" : 'Failed' %> Jobs\" class=\"confirmSubmission\" />\n</form>\n\n<% unless params[:queue] %>\n  <form method=\"POST\" action=\"<%= u \"failed/clear_retried\" %>\">\n    <input type=\"submit\" name=\"\" value=\"Clear Retried Jobs\" onclick='return confirm(\"Are you absolutely sure? This cannot be undone.\");' />\n  </form>\n<% end %>\n<form method=\"POST\" action=\"<%= u \"failed#{'/' + params[:queue] if params[:queue]}/requeue/all\" %>\">\n  <input type=\"submit\" name=\"\" value=\"Retry <%= params[:queue] ? \"'#{escape_html(params[:queue])}'\" : 'Failed' %> Jobs\" class=\"confirmSubmission\" />\n</form>\n<% end %>\n\n<% if failed_multiple_queues? && !params[:queue] %>\n<%= partial :failed_queues_overview %>\n<% else %>\n<p class='sub'><%= page_entries_info failed_start_at, failed_end_at, failed_size, 'job' %></p>\n\n\n<ul class='failed'>\n  <% Resque::Failure.each(failed_start_at, failed_per_page, params[:queue], params[:class], failed_order) do |id, job| %>\n    <%= partial :failed_job, :id => id, :job => job, :queue => \"failed#{'/' + params[:queue] if params[:queue]}\" %>\n  <% end %>\n</ul>\n\n<%= partial :next_more, :start => failed_start_at, :size => failed_size, :per_page => failed_per_page if failed_size > 0 %>\n<% end %>\n", "<% if key = params[:key] %>\n  <h1>Key \"<%= escape_html(key) %>\" is a <%= resque.redis.type key %></h1>\n  <h2>size: <%= redis_get_size(key) %></h2>\n  <table>\n    <tr>\n      <td>\n        <%= redis_get_value_as_array(key) %>\n      </td>\n    </tr>\n  </table>\n<% end %>\n", "<% @subtabs = resque.queues unless partial? || params[:id].nil? %>\n\n<% if current_queue = params[:id] %>\n\n  <h1>Pending jobs on <span class='hl'><%= h escape_html(current_queue) %></span></h1>\n  <form method=\"POST\" action=\"<%=u \"/queues/#{current_queue}/remove\" %>\" class='remove-queue'>\n    <input type='submit' name='' value='Remove Queue' class=\"confirmSubmission\" />\n  </form>\n  <p class='sub'><%= page_entries_info start = params[:start].to_i, start + 19, size = resque.size(current_queue), 'job' %></p>\n  <table class='jobs'>\n    <tr>\n      <th>Class</th>\n      <th>Args</th>\n    </tr>\n    <% for job in (jobs = resque.peek(current_queue, start, 20)) %>\n    <tr>\n      <td class='class'><%= partial :job_class, :job => job %></td>\n      <td class='args'><%=h job['args'].inspect %></td>\n    </tr>\n    <% end %>\n    <% if jobs.empty? %>\n    <tr>\n      <td class='no-data' colspan='2'>There are no pending jobs in this queue</td>\n    </tr>\n    <% end %>\n  </table>\n  <%= partial :next_more, :start => start, :size => size, :per_page => 20 %>\n<% else %>\n\n  <h1 class='wi'>Queues</h1>\n  <p class='intro'>The list below contains all the registered queues with the number of jobs currently in the queue. Select a queue from above to view all jobs currently pending on the queue.</p>\n  <table class='queues'>\n    <tr>\n      <th>Name</th>\n      <th>Jobs</th>\n    </tr>\n    <% resque.queues.sort_by { |q| q.to_s }.each do |queue| %>\n    <tr>\n      <td class='queue'><a class=\"queue\" href=\"<%= u \"queues/#{queue}\" %>\"><%= queue %></a></td>\n      <td class='size'><%= resque.size queue %></td>\n    </tr>\n    <% end %>\n    <% if failed_multiple_queues? %>\n      <% Resque::Failure.queues.sort_by { |q| q.to_s }.each_with_index do |queue, i| %>\n      <tr class=\"<%= Resque::Failure.count(queue).zero? ? \"failed\" : \"failure\" %><%= \" first_failure\" if i.zero? %>\">\n        <td class='queue failed'><a class=\"queue\" href=\"<%= u \"failed/#{queue}\" %>\"><%= queue %></a></td>\n        <td class='size'><%= Resque::Failure.count(queue) %></td>\n      </tr>\n      <% end %>\n    <% else %>\n      <tr class=\"<%= Resque::Failure.count.zero? ? \"failed\" : \"failure\" %>\">\n        <td class='queue failed'><a class=\"queue\" href=\"<%= u :failed %>\">failed</a></td>\n        <td class='size'><%= Resque::Failure.count %></td>\n      </tr>\n    <% end %>\n  </table>\n\n<% end %>\n"], "filenames": ["lib/resque/server/views/error.erb", "lib/resque/server/views/failed.erb", "lib/resque/server/views/key_string.erb", "lib/resque/server/views/queues.erb"], "buggy_code_start_loc": [1, 4, 2, 5], "buggy_code_end_loc": [2, 19, 3, 6], "fixing_code_start_loc": [1, 4, 2, 5], "fixing_code_end_loc": [2, 19, 3, 6], "type": "CWE-79", "message": "Resque is a Redis-backed Ruby library for creating background jobs, placing them on multiple queues, and processing them later. The following paths in resque-web have been found to be vulnerable to reflected XSS: \"/failed/?class=<script>alert(document.cookie)</script>\" and \"/queues/><img src=a onerror=alert(document.cookie)>\". This issue has been patched in version 2.2.1.", "other": {"cve": {"id": "CVE-2023-50725", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-22T20:15:07.657", "lastModified": "2024-01-03T03:20:02.863", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Resque is a Redis-backed Ruby library for creating background jobs, placing them on multiple queues, and processing them later. The following paths in resque-web have been found to be vulnerable to reflected XSS: \"/failed/?class=<script>alert(document.cookie)</script>\" and \"/queues/><img src=a onerror=alert(document.cookie)>\". This issue has been patched in version 2.2.1."}, {"lang": "es", "value": "Resque es una librer\u00eda Ruby respaldada por Redis para crear jobs en segundo plano, colocarlos en varias colas y procesarlos m\u00e1s tarde. Se ha descubierto que las siguientes rutas en resque-web son vulnerables al XSS reflejado: \"/failed/?class=\" y \"/queues/&gt;\". Este problema se solucion\u00f3 en la versi\u00f3n 2.2.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 4.2}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:resque:resque:*:*:*:*:*:ruby:*:*", "versionEndExcluding": "2.2.1", "matchCriteriaId": "C9D16E9F-4E53-4657-99FF-1CD6DB37F6C9"}]}]}], "references": [{"url": "https://github.com/resque/resque/commit/ee99d2ed6cc75d9d384483b70c2d96d312115f07", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/resque/resque/pull/1790", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/resque/resque/security/advisories/GHSA-gc3j-vvwf-4rp8", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/rubysec/ruby-advisory-db/blob/master/gems/resque/CVE-2023-50725.yml", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/resque/resque/commit/ee99d2ed6cc75d9d384483b70c2d96d312115f07"}}