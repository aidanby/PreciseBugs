{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\BruteforceProtectedControllerInterface;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\Authenticator\\AdminLoginAuthenticator;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\BruteforceProtectionHandler;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\CsrfProtectionHandler;\nuse Pimcore\\Config;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Controller\\KernelResponseEventInterface;\nuse Pimcore\\Event\\Admin\\Login\\LoginRedirectEvent;\nuse Pimcore\\Event\\Admin\\Login\\LostPasswordEvent;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Http\\ResponseHelper;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Tool;\nuse Pimcore\\Tool\\Authentication;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\HttpKernel\\Event\\ResponseEvent;\nuse Symfony\\Component\\RateLimiter\\RateLimiterFactory;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Security\\Core\\Security;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Contracts\\Translation\\LocaleAwareInterface;\n\n/**\n * @internal\n */\nclass LoginController extends AdminController implements BruteforceProtectedControllerInterface, KernelControllerEventInterface, KernelResponseEventInterface\n{\n    public function __construct(\n        protected ResponseHelper $responseHelper,\n    ) {\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        // use browser language for login page if possible\n        $locale = 'en';\n\n        $availableLocales = Tool\\Admin::getLanguages();\n        foreach ($event->getRequest()->getLanguages() as $userLocale) {\n            if (in_array($userLocale, $availableLocales)) {\n                $locale = $userLocale;\n\n                break;\n            }\n        }\n\n        if ($this->getTranslator() instanceof LocaleAwareInterface) {\n            $this->getTranslator()->setLocale($locale);\n        }\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function onKernelResponseEvent(ResponseEvent $event)\n    {\n        $response = $event->getResponse();\n        $response->headers->set('X-Frame-Options', 'deny', true);\n        $this->responseHelper->disableCache($response, true);\n    }\n\n    /**\n     * @Route(\"/login\", name=\"pimcore_admin_login\")\n     * @Route(\"/login/\", name=\"pimcore_admin_login_fallback\")\n     */\n    public function loginAction(Request $request, CsrfProtectionHandler $csrfProtection, Config $config)\n    {\n        if ($request->get('_route') === 'pimcore_admin_login_fallback') {\n            return $this->redirectToRoute('pimcore_admin_login', $request->query->all(), Response::HTTP_MOVED_PERMANENTLY);\n        }\n\n        $csrfProtection->regenerateCsrfToken();\n\n        $user = $this->getAdminUser();\n        if ($user instanceof UserInterface) {\n            return $this->redirectToRoute('pimcore_admin_index');\n        }\n\n        $params = $this->buildLoginPageViewParams($config);\n\n        $session_gc_maxlifetime = ini_get('session.gc_maxlifetime');\n        if (empty($session_gc_maxlifetime)) {\n            $session_gc_maxlifetime = 120;\n        }\n\n        $params['csrfTokenRefreshInterval'] = ((int)$session_gc_maxlifetime - 60) * 1000;\n\n        if ($request->get('too_many_attempts')) {\n            $params['error'] = $request->get('too_many_attempts');\n        }\n        if ($request->get('auth_failed')) {\n            $params['error'] = 'error_auth_failed';\n        }\n        if ($request->get('session_expired')) {\n            $params['error'] = 'error_session_expired';\n        }\n        if ($request->get('deeplink')) {\n            $params['deeplink'] = true;\n        }\n\n        $params['browserSupported'] = $this->detectBrowser();\n        $params['debug'] = \\Pimcore::inDebugMode();\n\n        return $this->render('@PimcoreAdmin/Admin/Login/login.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/csrf-token\", name=\"pimcore_admin_login_csrf_token\")\n     */\n    public function csrfTokenAction(Request $request, CsrfProtectionHandler $csrfProtection)\n    {\n        if (!$this->getAdminUser()) {\n            $csrfProtection->regenerateCsrfToken();\n        }\n\n        return $this->json([\n           'csrfToken' => $csrfProtection->getCsrfToken(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/logout\", name=\"pimcore_admin_logout\" , methods={\"POST\"})\n     */\n    public function logoutAction()\n    {\n        // this route will never be matched, but will be handled by the logout handler\n    }\n\n    /**\n     * Dummy route used to check authentication\n     *\n     * @Route(\"/login/login\", name=\"pimcore_admin_login_check\")\n     *\n     * @see AdminLoginAuthenticator for the security implementation\n     * @see AdminAuthenticator for the security implementation (Authenticator Based Security)\n     */\n    public function loginCheckAction()\n    {\n        // just in case the authenticator didn't redirect\n        return new RedirectResponse($this->generateUrl('pimcore_admin_login'));\n    }\n\n    /**\n     * @Route(\"/login/lostpassword\", name=\"pimcore_admin_login_lostpassword\")\n     */\n    public function lostpasswordAction(Request $request, ?BruteforceProtectionHandler $bruteforceProtectionHandler, CsrfProtectionHandler $csrfProtection, Config $config, EventDispatcherInterface $eventDispatcher, RateLimiterFactory $resetPasswordLimiter)\n    {\n        $params = $this->buildLoginPageViewParams($config);\n        $error = null;\n\n        if ($request->getMethod() === 'POST' && $username = $request->get('username')) {\n            $user = User::getByName($username);\n            if (!$user instanceof User) {\n                $error = 'user_unknown';\n            }\n\n            // TODO Pimcore 11: remove this BC layer, only the RateLimiter would be valid\n            if ($bruteforceProtectionHandler) {\n                try {\n                    $bruteforceProtectionHandler->checkProtection($username, $request);\n                } catch (\\Exception $e) {\n                    $error = 'user_reset_password_too_many_attempts';\n                }\n            } else {\n                $limiter = $resetPasswordLimiter->create($request->getClientIp());\n\n                if (false === $limiter->consume(1)->isAccepted()) {\n                    $error = 'user_reset_password_too_many_attempts';\n                }\n            }\n\n            if (!$error) {\n                if (!$user->isActive()) {\n                    $error = 'user_inactive';\n                }\n                if (!$user->getEmail()) {\n                    $error = 'user_no_email_address';\n                }\n                if (!$user->getPassword()) {\n                    $error = 'user_no_password';\n                }\n            }\n\n            if (!$error) {\n                $token = Authentication::generateToken($user->getName());\n\n                $loginUrl = $this->generateUrl('pimcore_admin_login_check', [\n                    'token' => $token,\n                    'reset' => 'true',\n                ], UrlGeneratorInterface::ABSOLUTE_URL);\n\n                try {\n                    $event = new LostPasswordEvent($user, $loginUrl);\n                    $eventDispatcher->dispatch($event, AdminEvents::LOGIN_LOSTPASSWORD);\n\n                    // only send mail if it wasn't prevented in event\n                    if ($event->getSendMail()) {\n                        $mail = Tool::getMail([$user->getEmail()], 'Pimcore lost password service');\n                        $mail->setIgnoreDebugMode(true);\n                        $mail->text(\"Login to pimcore and change your password using the following link. This temporary login link will expire in 24 hours: \\r\\n\\r\\n\" . $loginUrl);\n                        $mail->send();\n                    }\n\n                    // directly return event response\n                    if ($event->hasResponse()) {\n                        return $event->getResponse();\n                    }\n                } catch (\\Exception $e) {\n                    Logger::error('Error sending password recovery email: ' . $e->getMessage());\n                    $error = 'lost_password_email_error';\n                }\n            }\n\n            if ($error) {\n                Logger::error('Lost password service: ' . $error);\n                $bruteforceProtectionHandler?->addEntry($request->get('username'), $request);\n            }\n        }\n\n        $csrfProtection->regenerateCsrfToken();\n\n        if ($error) {\n            $params['reset_error'] = 'Please make sure you are entering a correct input.';\n            if ($error === 'user_reset_password_too_many_attempts') {\n                $params['reset_error'] = 'Too many attempts. Please retry later.';\n            }\n        }\n\n        return $this->render('@PimcoreAdmin/Admin/Login/lostpassword.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/deeplink\", name=\"pimcore_admin_login_deeplink\")\n     */\n    public function deeplinkAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        // check for deeplink\n        $queryString = $_SERVER['QUERY_STRING'];\n\n        if (preg_match('/(document|asset|object)_([0-9]+)_([a-z]+)/', $queryString, $deeplink)) {\n            $deeplink = $deeplink[0];\n            $perspective = strip_tags($request->get('perspective', ''));\n\n            if (strpos($queryString, 'token')) {\n                $event = new LoginRedirectEvent('pimcore_admin_login', [\n                    'deeplink' => $deeplink,\n                    'perspective' => $perspective,\n                ]);\n                $eventDispatcher->dispatch($event, AdminEvents::LOGIN_REDIRECT);\n\n                $url = $this->generateUrl($event->getRouteName(), $event->getRouteParams());\n                $url .= '&' . $queryString;\n\n                return $this->redirect($url);\n            } elseif ($queryString) {\n                $event = new LoginRedirectEvent('pimcore_admin_login', [\n                    'deeplink' => 'true',\n                    'perspective' => $perspective,\n                ]);\n                $eventDispatcher->dispatch($event, AdminEvents::LOGIN_REDIRECT);\n\n                return $this->render('@PimcoreAdmin/Admin/Login/deeplink.html.twig', [\n                    'tab' => $deeplink,\n                    'redirect' => $this->generateUrl($event->getRouteName(), $event->getRouteParams()),\n                ]);\n            }\n        }\n    }\n\n    protected function buildLoginPageViewParams(Config $config): array\n    {\n        return [\n            'config' => $config,\n            'pluginCssPaths' => $this->getBundleManager()->getCssPaths(),\n        ];\n    }\n\n    /**\n     * @Route(\"/login/2fa\", name=\"pimcore_admin_2fa\")\n     */\n    public function twoFactorAuthenticationAction(Request $request, ?BruteforceProtectionHandler $bruteforceProtectionHandler, Config $config)\n    {\n        $params = $this->buildLoginPageViewParams($config);\n\n        if ($request->hasSession()) {\n            // we have to call the check here manually, because BruteforceProtectionListener uses the 'username' from the request\n            $bruteforceProtectionHandler?->checkProtection($this->getAdminUser()->getName(), $request);\n\n            $session = $request->getSession();\n            $authException = $session->get(Security::AUTHENTICATION_ERROR);\n            if ($authException instanceof AuthenticationException) {\n                $session->remove(Security::AUTHENTICATION_ERROR);\n\n                $params['error'] = $authException->getMessage();\n\n                $bruteforceProtectionHandler?->addEntry($this->getAdminUser()->getName(), $request);\n            }\n        } else {\n            $params['error'] = 'No session available, it either timed out or cookies are not enabled.';\n        }\n\n        return $this->render('@PimcoreAdmin/Admin/Login/twoFactorAuthentication.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/2fa-verify\", name=\"pimcore_admin_2fa-verify\")\n     *\n     * @param Request $request\n     */\n    public function twoFactorAuthenticationVerifyAction(Request $request)\n    {\n    }\n\n    /**\n     * @return bool\n     */\n    public function detectBrowser()\n    {\n        $supported = false;\n        $browser = new \\Browser();\n        $browserVersion = (int)$browser->getVersion();\n\n        if ($browser->getBrowser() == \\Browser::BROWSER_FIREFOX && $browserVersion >= 72) {\n            $supported = true;\n        }\n        if ($browser->getBrowser() == \\Browser::BROWSER_CHROME && $browserVersion >= 84) {\n            $supported = true;\n        }\n        if ($browser->getBrowser() == \\Browser::BROWSER_SAFARI && $browserVersion >= 13.1) {\n            $supported = true;\n        }\n        if ($browser->getBrowser() == \\Browser::BROWSER_EDGE && $browserVersion >= 90) {\n            $supported = true;\n        }\n\n        return $supported;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\BruteforceProtectedControllerInterface;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\Authenticator\\AdminLoginAuthenticator;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\BruteforceProtectionHandler;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\CsrfProtectionHandler;\nuse Pimcore\\Config;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Controller\\KernelResponseEventInterface;\nuse Pimcore\\Event\\Admin\\Login\\LoginRedirectEvent;\nuse Pimcore\\Event\\Admin\\Login\\LostPasswordEvent;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Http\\ResponseHelper;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Security\\SecurityHelper;\nuse Pimcore\\Tool;\nuse Pimcore\\Tool\\Authentication;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\HttpKernel\\Event\\ResponseEvent;\nuse Symfony\\Component\\RateLimiter\\RateLimiterFactory;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Security\\Core\\Security;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Contracts\\Translation\\LocaleAwareInterface;\n\n/**\n * @internal\n */\nclass LoginController extends AdminController implements BruteforceProtectedControllerInterface, KernelControllerEventInterface, KernelResponseEventInterface\n{\n    public function __construct(\n        protected ResponseHelper $responseHelper,\n    ) {\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        // use browser language for login page if possible\n        $locale = 'en';\n\n        $availableLocales = Tool\\Admin::getLanguages();\n        foreach ($event->getRequest()->getLanguages() as $userLocale) {\n            if (in_array($userLocale, $availableLocales)) {\n                $locale = $userLocale;\n\n                break;\n            }\n        }\n\n        if ($this->getTranslator() instanceof LocaleAwareInterface) {\n            $this->getTranslator()->setLocale($locale);\n        }\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function onKernelResponseEvent(ResponseEvent $event)\n    {\n        $response = $event->getResponse();\n        $response->headers->set('X-Frame-Options', 'deny', true);\n        $this->responseHelper->disableCache($response, true);\n    }\n\n    /**\n     * @Route(\"/login\", name=\"pimcore_admin_login\")\n     * @Route(\"/login/\", name=\"pimcore_admin_login_fallback\")\n     */\n    public function loginAction(Request $request, CsrfProtectionHandler $csrfProtection, Config $config)\n    {\n        if ($request->get('_route') === 'pimcore_admin_login_fallback') {\n            return $this->redirectToRoute('pimcore_admin_login', $request->query->all(), Response::HTTP_MOVED_PERMANENTLY);\n        }\n\n        $csrfProtection->regenerateCsrfToken();\n\n        $user = $this->getAdminUser();\n        if ($user instanceof UserInterface) {\n            return $this->redirectToRoute('pimcore_admin_index');\n        }\n\n        $params = $this->buildLoginPageViewParams($config);\n\n        $session_gc_maxlifetime = ini_get('session.gc_maxlifetime');\n        if (empty($session_gc_maxlifetime)) {\n            $session_gc_maxlifetime = 120;\n        }\n\n        $params['csrfTokenRefreshInterval'] = ((int)$session_gc_maxlifetime - 60) * 1000;\n\n        if ($request->get('too_many_attempts')) {\n            $params['error'] = SecurityHelper::convertHtmlSpecialChars($request->get('too_many_attempts'));\n        }\n        if ($request->get('auth_failed')) {\n            $params['error'] = 'error_auth_failed';\n        }\n        if ($request->get('session_expired')) {\n            $params['error'] = 'error_session_expired';\n        }\n        if ($request->get('deeplink')) {\n            $params['deeplink'] = true;\n        }\n\n        $params['browserSupported'] = $this->detectBrowser();\n        $params['debug'] = \\Pimcore::inDebugMode();\n\n        return $this->render('@PimcoreAdmin/Admin/Login/login.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/csrf-token\", name=\"pimcore_admin_login_csrf_token\")\n     */\n    public function csrfTokenAction(Request $request, CsrfProtectionHandler $csrfProtection)\n    {\n        if (!$this->getAdminUser()) {\n            $csrfProtection->regenerateCsrfToken();\n        }\n\n        return $this->json([\n           'csrfToken' => $csrfProtection->getCsrfToken(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/logout\", name=\"pimcore_admin_logout\" , methods={\"POST\"})\n     */\n    public function logoutAction()\n    {\n        // this route will never be matched, but will be handled by the logout handler\n    }\n\n    /**\n     * Dummy route used to check authentication\n     *\n     * @Route(\"/login/login\", name=\"pimcore_admin_login_check\")\n     *\n     * @see AdminLoginAuthenticator for the security implementation\n     * @see AdminAuthenticator for the security implementation (Authenticator Based Security)\n     */\n    public function loginCheckAction()\n    {\n        // just in case the authenticator didn't redirect\n        return new RedirectResponse($this->generateUrl('pimcore_admin_login'));\n    }\n\n    /**\n     * @Route(\"/login/lostpassword\", name=\"pimcore_admin_login_lostpassword\")\n     */\n    public function lostpasswordAction(Request $request, ?BruteforceProtectionHandler $bruteforceProtectionHandler, CsrfProtectionHandler $csrfProtection, Config $config, EventDispatcherInterface $eventDispatcher, RateLimiterFactory $resetPasswordLimiter)\n    {\n        $params = $this->buildLoginPageViewParams($config);\n        $error = null;\n\n        if ($request->getMethod() === 'POST' && $username = $request->get('username')) {\n            $user = User::getByName($username);\n            if (!$user instanceof User) {\n                $error = 'user_unknown';\n            }\n\n            // TODO Pimcore 11: remove this BC layer, only the RateLimiter would be valid\n            if ($bruteforceProtectionHandler) {\n                try {\n                    $bruteforceProtectionHandler->checkProtection($username, $request);\n                } catch (\\Exception $e) {\n                    $error = 'user_reset_password_too_many_attempts';\n                }\n            } else {\n                $limiter = $resetPasswordLimiter->create($request->getClientIp());\n\n                if (false === $limiter->consume(1)->isAccepted()) {\n                    $error = 'user_reset_password_too_many_attempts';\n                }\n            }\n\n            if (!$error) {\n                if (!$user->isActive()) {\n                    $error = 'user_inactive';\n                }\n                if (!$user->getEmail()) {\n                    $error = 'user_no_email_address';\n                }\n                if (!$user->getPassword()) {\n                    $error = 'user_no_password';\n                }\n            }\n\n            if (!$error) {\n                $token = Authentication::generateToken($user->getName());\n\n                $loginUrl = $this->generateUrl('pimcore_admin_login_check', [\n                    'token' => $token,\n                    'reset' => 'true',\n                ], UrlGeneratorInterface::ABSOLUTE_URL);\n\n                try {\n                    $event = new LostPasswordEvent($user, $loginUrl);\n                    $eventDispatcher->dispatch($event, AdminEvents::LOGIN_LOSTPASSWORD);\n\n                    // only send mail if it wasn't prevented in event\n                    if ($event->getSendMail()) {\n                        $mail = Tool::getMail([$user->getEmail()], 'Pimcore lost password service');\n                        $mail->setIgnoreDebugMode(true);\n                        $mail->text(\"Login to pimcore and change your password using the following link. This temporary login link will expire in 24 hours: \\r\\n\\r\\n\" . $loginUrl);\n                        $mail->send();\n                    }\n\n                    // directly return event response\n                    if ($event->hasResponse()) {\n                        return $event->getResponse();\n                    }\n                } catch (\\Exception $e) {\n                    Logger::error('Error sending password recovery email: ' . $e->getMessage());\n                    $error = 'lost_password_email_error';\n                }\n            }\n\n            if ($error) {\n                Logger::error('Lost password service: ' . $error);\n                $bruteforceProtectionHandler?->addEntry($request->get('username'), $request);\n            }\n        }\n\n        $csrfProtection->regenerateCsrfToken();\n\n        if ($error) {\n            $params['reset_error'] = 'Please make sure you are entering a correct input.';\n            if ($error === 'user_reset_password_too_many_attempts') {\n                $params['reset_error'] = 'Too many attempts. Please retry later.';\n            }\n        }\n\n        return $this->render('@PimcoreAdmin/Admin/Login/lostpassword.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/deeplink\", name=\"pimcore_admin_login_deeplink\")\n     */\n    public function deeplinkAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        // check for deeplink\n        $queryString = $_SERVER['QUERY_STRING'];\n\n        if (preg_match('/(document|asset|object)_([0-9]+)_([a-z]+)/', $queryString, $deeplink)) {\n            $deeplink = $deeplink[0];\n            $perspective = strip_tags($request->get('perspective', ''));\n\n            if (strpos($queryString, 'token')) {\n                $event = new LoginRedirectEvent('pimcore_admin_login', [\n                    'deeplink' => $deeplink,\n                    'perspective' => $perspective,\n                ]);\n                $eventDispatcher->dispatch($event, AdminEvents::LOGIN_REDIRECT);\n\n                $url = $this->generateUrl($event->getRouteName(), $event->getRouteParams());\n                $url .= '&' . $queryString;\n\n                return $this->redirect($url);\n            } elseif ($queryString) {\n                $event = new LoginRedirectEvent('pimcore_admin_login', [\n                    'deeplink' => 'true',\n                    'perspective' => $perspective,\n                ]);\n                $eventDispatcher->dispatch($event, AdminEvents::LOGIN_REDIRECT);\n\n                return $this->render('@PimcoreAdmin/Admin/Login/deeplink.html.twig', [\n                    'tab' => $deeplink,\n                    'redirect' => $this->generateUrl($event->getRouteName(), $event->getRouteParams()),\n                ]);\n            }\n        }\n    }\n\n    protected function buildLoginPageViewParams(Config $config): array\n    {\n        return [\n            'config' => $config,\n            'pluginCssPaths' => $this->getBundleManager()->getCssPaths(),\n        ];\n    }\n\n    /**\n     * @Route(\"/login/2fa\", name=\"pimcore_admin_2fa\")\n     */\n    public function twoFactorAuthenticationAction(Request $request, ?BruteforceProtectionHandler $bruteforceProtectionHandler, Config $config)\n    {\n        $params = $this->buildLoginPageViewParams($config);\n\n        if ($request->hasSession()) {\n            // we have to call the check here manually, because BruteforceProtectionListener uses the 'username' from the request\n            $bruteforceProtectionHandler?->checkProtection($this->getAdminUser()->getName(), $request);\n\n            $session = $request->getSession();\n            $authException = $session->get(Security::AUTHENTICATION_ERROR);\n            if ($authException instanceof AuthenticationException) {\n                $session->remove(Security::AUTHENTICATION_ERROR);\n\n                $params['error'] = $authException->getMessage();\n\n                $bruteforceProtectionHandler?->addEntry($this->getAdminUser()->getName(), $request);\n            }\n        } else {\n            $params['error'] = 'No session available, it either timed out or cookies are not enabled.';\n        }\n\n        return $this->render('@PimcoreAdmin/Admin/Login/twoFactorAuthentication.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/2fa-verify\", name=\"pimcore_admin_2fa-verify\")\n     *\n     * @param Request $request\n     */\n    public function twoFactorAuthenticationVerifyAction(Request $request)\n    {\n    }\n\n    /**\n     * @return bool\n     */\n    public function detectBrowser()\n    {\n        $supported = false;\n        $browser = new \\Browser();\n        $browserVersion = (int)$browser->getVersion();\n\n        if ($browser->getBrowser() == \\Browser::BROWSER_FIREFOX && $browserVersion >= 72) {\n            $supported = true;\n        }\n        if ($browser->getBrowser() == \\Browser::BROWSER_CHROME && $browserVersion >= 84) {\n            $supported = true;\n        }\n        if ($browser->getBrowser() == \\Browser::BROWSER_SAFARI && $browserVersion >= 13.1) {\n            $supported = true;\n        }\n        if ($browser->getBrowser() == \\Browser::BROWSER_EDGE && $browserVersion >= 90) {\n            $supported = true;\n        }\n\n        return $supported;\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/LoginController.php"], "buggy_code_start_loc": [31], "buggy_code_end_loc": [118], "fixing_code_start_loc": [32], "fixing_code_end_loc": [119], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in GitHub repository pimcore/pimcore prior to 10.5.21.", "other": {"cve": {"id": "CVE-2023-2341", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-27T14:15:09.083", "lastModified": "2023-05-04T20:08:13.433", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in GitHub repository pimcore/pimcore prior to 10.5.21."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.5, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.21", "matchCriteriaId": "72C537D6-67BA-4562-B853-F99E6C14315C"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/66f1089fb1b9bcd575bfce9b1d4abb0f0499df11", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/cf3901ac-a649-478f-ab08-094ef759c11d", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/66f1089fb1b9bcd575bfce9b1d4abb0f0499df11"}}