{"buggy_code": ["# JSON Editor - History\n\nhttps://github.com/josdejong/jsoneditor\n\n\n## 2021-09-01, version 9.5.5\n\n- Fix `setMode` not throwing an exception anymore in case of a parse error\n  (regression since `9.5.4`).\n\n\n## 2021-08-25, version 9.5.4\n\n- Use `noreferrer` for window.open, see #1365. Thanks @rajitbanerjee.\n- Fix #1363: parsing error contains html characters.\n- Fix opening the Transform or Sort modal in code mode with invalid JSON \n  contents not triggering the `onError` callback (see #1364).\n- Change the default behavior of error handling to open a basic alert instead\n  of logging the error in the console (see #1364).\n\n\n## 2021-07-28, version 9.5.3\n\n- Fix #1356: background of tree mode is transparent instead of white.\n- Fix #473: enum dropdown not working on referenced schemas and templates,\n  see #1355. Thanks @mpccolorado.\n\n\n## 2021-07-22, version 9.5.2\n\n- Fix #675: Relative image urls in CSS replaced with absolute urls by build \n  script, see #1354. Thanks @esulu.\n\n\n## 2021-06-30, version 9.5.1\n\n- Upgrade to `jsonrepair@2.2.1`.\n\n\n## 2021-06-05, version 9.5.0\n\n- Implemented new method `JSONEditor.validate(): Promise<ValidationError[]>`.\n  Thanks @ChrisAcrobat.\n\n\n## 2021-06-02, version 9.4.2\n\n- Fix #1311: exception being thrown under certain conditions when switching \n  from `code` mode to `preview` mode.\n- Rename spin animation of `selectr` to prevent conflicts with tailwind, \n  see #1333. Thanks @mdix.\n\n\n## 2021-04-25, version 9.4.1\n\n- Improvements in the Korean translation. Thanks @luasenvy.\n\n\n## 2021-04-17, version 9.4.0\n\n- Added Korean translation. Thanks @luasenvy.\n- Added Spanish translation. Thanks @joabac.\n- Fix #1282: JSON schema enum dropdown not working for conditionals like \n  `oneOf`, `anyOf`, `allOf`. Thanks @maufl.\n- Fix #1307: losing caret position when calling `refresh()` during `onChange`\n  callback.\n\n\n## 2021-04-10, version 9.3.1\n\n- Introduced a new sass variable `$jse-icons-url`, see #1268. Thanks @ppetkow.\n\n\n## 2021-04-01, version 9.3.0\n\n- Improved Russian translation. Thanks @PunKHS.\n- Upgraded dependencies to `jsonrepair@2.1.0`.\n\n\n## 2021-02-24, version 9.2.0\n\n- Added Russian translation. Thanks @PunKHS.\n- Changed shortcut keys for Format and Compact in code mode from `Ctrl+\\` and\n  `Ctrl+Shift+\\` to `Ctrl+I` and `Ctrl+Shift+I` respectively, because not all\n  browsers and operating systems support this key combination.\n\n\n## 2021-02-14, version 9.1.10\n\n- Fixed resolving a JSON schema reference linking to an other schema, see #1239.\n  Thanks @Hagartinger.\n- Upgraded to latest dependencies (`vanilla-picker@2.11.2`).\n\n\n## 2021-01-23, version 9.1.9\n\n- Fix `jsoneditor-minimalist` bundle being too large. Regression since `v9.1.5` \n  (caused by a recent upgrade to Webpack 5). Thanks @cbmgit.\n\n\n## 2021-01-16, version 9.1.8\n\n- Replaced `simple-json-repair` with `jsonrepair` (library was renamed).\n\n\n## 2020-12-30, version 9.1.7\n\n- Fix #1206: library bundle broken on IE 11, regression introduced in v9.1.6.\n\n\n## 2020-12-23, version 9.1.6\n\n- Fix #1192: enum dropdown from a JSON schema not rendered when using\n  `additionalProperties`. Thanks @maufl.\n- Fix #1191: clarify docs about configuration option `ajv`.\n- Fix #1193: simplify and fix example 20_custom_css_style_for_nodes.html.\n\n\n## 2020-12-14, version 9.1.5\n\n- Fix #1185: enum dropdown not selecting actual value when this is not a string.\n- Fix selected value of enum dropdown not updated when changed programmatically. \n\n\n## 2020-11-23, version 9.1.4\n\n- Fix #1119: list of keys in navigation bar missing a scroll bar. \n  Thanks @tanmayrajani.\n\n\n## 2020-11-19, version 9.1.3\n\n- Fix #1158: JSON schema_findSchema not found if using internal references. Thanks @maufl.\n- Update dependencies: `vanilla-picker@2.11.0`.\n\n\n## 2020-11-07, version 9.1.2\n\n- Fix #1126: fire `onEvent` for boolean checkbox and enum selectbox too.\n- Log a clear error in the console when the returned value of `onEditable` is \n  invalid. See #1112.\n- Updated dependency to `ajv@6.12.6`.\n- Extract the JSON repair functionality into a separate, \n  library `simple-json-repair` with many improvements.\n\n\n## 2020-09-23, version 9.1.1\n\n- Fix #1111: Enum dropdown not showing when using patternProperties for schema.\n  Thanks @ziga-miklic.\n- Fixed JSONEditor not working when opened in a new window, see #1098.\n  Thanks @joshkel.\n- Fix quick-key `Ctrl+D` (duplicate) not working.\n- Define \"charset: utf-8\" in all HTML examples.\n\n\n## 2020-09-15, version 9.1.0\n\n- Implemented German translation (`de`). Thanks @s-a.\n- Fix quick-keys `Ctrl-\\` (format) and `Ctrl-Shift-\\` (compact) not working\n  in `code` mode.\n- Updated dependencies to `ajv@6.12.5`.\n\n\n## 2020-09-09, version 9.0.5\n\n- Fix #1090: autocomplete firing on dragging or clicking a node.\n- Fix #1096: editor crashing when passing an empty string as `name`.\n- Updated dependencies to `ajv@6.12.4`.\n\n\n## 2020-08-15, version 9.0.4\n\n- Updated dependencies to `ace-builds@1.4.12`, `ajv@6.12.3`.\n- Fix #1077: change the `main` field in `package.json` to point to the actual\n  bundled and minified file instead of a node.js index file.\n\n\n## 2020-07-02, version 9.0.3\n\n- Fix regression introduced in `v9.0.2` in the select boxes in the \n  Transform model not lighlighting the matches correctly.\n\n\n## 2020-07-01, version 9.0.2\n\n- Fix #1029: XSS vulnerabilities. Thanks @onemoreflag for reporting.\n- Fix #1017: unable to style the color of a value containing a color.\n  Thanks @p3x-robot. \n\n\n## 2020-06-24, version 9.0.1\n\n- Fixed broken link to the Ace editor website (https://ace.c9.io/).\n  Thanks @p3x-robot.\n- Fix #1027: create IE11 Array polyfills `find` and `findIndex` in such a way \n  that they are not iterable.\n\n\n## 2020-05-24, version 9.0.0\n\n- Implemented option `limitDragging`, see #962. This is a breaking change when \n  using a JSON schema: dragging is more restrictive by default in that case.\n  Set `limitDragging: false` to keep the old, non-restricted behavior.\n\n\n## 2020-05-13, version 8.6.8\n\n- Fix #936: too many return characters inserted when pasting formatted text\n  from OpenOffice.\n\n\n## 2020-05-10, version 8.6.7\n\n- Fix #858: the `dist/jsoneditor.js` bundle containing a link to a \n  non-existing source map.\n- Fix #978: in some special cases the caret was jumping to the beginning of the \n  line whilst typing.\n- Update dependencies to `ajv@6.12.2`.\n\n\n## 2020-04-21, version 8.6.6\n\n- Fix #969: adding a new property to an empty object or array is broken.\n  Regression introduced in `v8.6.5`.\n\n\n## 2020-04-19, version 8.6.5\n\n- Fix #964: translation of titles of some context menu items not working.\n- Update dependencies to `ace-builds@1.4.11`, `ajv@6.12.1`.\n\n\n## 2020-03-29, version 8.6.4\n\n- Fix #921: `sortObjectKeys` emits `onChange` events.\n- Fix #946: `language` not working in modes `text`, `code`, and `preview`.\n- Revert reckoning with the order of object properties when updating an\n  object (introduced in `v8.6.2`). See #917. \n- Implement support for repairing line separate JSON. \n\n\n## 2020-03-18, version 8.6.3\n\n- Fix #932: `JSONEditor.update` broken, did not always recognize when the \n  input changed. Regression introduced in `v8.6.2`. \n\n\n## 2020-03-18, version 8.6.2\n\n- Fixed #917, #926: Keep order of properties when updating an object.  \n- Fixed #928: Custom root name not reflected in path of navigation bar.\n- Upgraded to `ajv@6.12.0`\n\n\n## 2020-02-17, version 8.6.1\n\n- Fixed #908: editor throwing an exception when switching from `'preview'`\n  to `'code'` mode.\n\n\n## 2020-02-16, version 8.6.0\n\n- Fixed #906: Implemented turning Python objects containing `True`, `False` \n  and `None` into valid JSON using repair.\n\n\n## 2020-02-06, version 8.5.3\n\n- Fix #892: the undo/redo buttons in mode `code` being broken when custom \n  loading an old version of Ace Editor.\n\n\n## 2020-02-05, version 8.5.2\n\n- Fix undo/redo buttons in mode `code` not always updating.\n\n\n## 2020-02-05, version 8.5.1\n\n- Fix broken build.\n\n\n## 2020-02-05, version 8.5.0\n\n- Implemented support for customizing the query language used in the \n  Transform modal. New options `createQuery`, `executeQuery`, and \n  `queryDescription` are available for this now. An example is available\n  in `examples/23_custom_query_language.html`. See #857, #871.\n- Implement undo/redo buttons in `code` mode.\n- Fix history (undo/redo) being cleared in mode `code` and `text` after \n  transforming or sorting.\n\n\n## 2020-01-25, version 8.4.1\n\n- Fix `console.log` in production code. Oopsie.\n\n\n## 2020-01-25, version 8.4.0\n\n- Added CSS classes `jsoneditor-expanded` and `jsoneditor-collapsed` on array \n  and object nodes reflecting there state.\n\n\n## 2020-01-18, version 8.3.0\n\n- Update dependency `ajv` to `v6.11.0`. \n- Fix #790: editor breaking when missing a translation containing a \n  placeholder.\n\n\n## 2020-01-16, version 8.2.0\n\n- Make it easy to create custom styling by overriding default SASS variable \n  values, see #881. Thanks @petermanders89.\n- Update `ace` to `v1.4.8`.\n\n\n## 2020-01-06, version 8.1.2\n\n- Fix #873: buttons Format, Compact, and Repair not supporting \n  internationalization.\n- Fix #877: Some CSS styling issues when used in combination with Materialize.\n- Updated dependency `vanilla-picker` to `v2.10.1`.\n\n\n## 2019-12-28, version 8.1.1\n\n- Fixed the file size reported in `preview` mode show `KB` and `MB` instead\n  of `KiB` and `MiB` in order to match the size reported by filesystems.\n\n\n## 2019-12-18, version 8.1.0\n\n- Implemented `popupAnchor` allowing to select a custom anchor element. \n  See #869 and #870.  \n- Fixed #502: CSS rule `* { font-family: ... }` resulting in Ace editor (`code` \n  mode) not having a mono-space font anymore.\n\n\n## 2019-12-11, version 8.0.0\n\n- Implemented option `timestampFormat` which allows customizing the formatting\n  of timestamp tags. See also option `timestampTag`. Thanks @smallp.\n- Changed the behavior of `timestampTag` to fallback on the built-in rules when\n  the function does not return a boolean. See #856.  \n- Reverted the heuristics introduced in `v7.3.0` to check whether some field\n  contains a timestamp based on the field name, because they can give wrong \n  timestamps in case of values in seconds instead of the assumed milliseconds \n  (see #847, #856). \n\n\n## 2019-12-08, version 7.5.0\n\n- Extended the callback `onValidationError` to also report parse errors,\n  and distinguish between JSON schema validation errors and custom errors.\n  See #861 and #612. Thanks @meirotstein.\n\n\n## 2019-12-01, version 7.4.0\n\n- Implemented callback function `onValidationError`, see #612, #854. \n  Thanks @meirotstein.\n- Fixed #850: make autocomplete options robust against non-string inputs\n  like `null`, `123`, `true`, `false`. \n\n\n## 2019-12-01, version 7.3.1\n\n- Fixed #855: `onFocus` and `onBlur` not working in modes `text` and `code` \n  when editor was created without main menu bar, and `editor.destroy()` \n  throwing an exception.\n\n\n## 2019-11-27, version 7.3.0\n\n- Implemented callbacks `onFocus` and `onBlur` (PR #809, issue #727). \n  Thanks @123survesh.\n- Fixed #847: allow customizing the in rules determining whether a value\n  is a timestamp or not by passing a callback function to `timestampTag`.\n\n\n## 2019-10-27, version 7.2.1\n\n- Fixed #826: editor not allowing indentation `0`.\n- Fixed #828: do not expand/collapse when clicking the text of a node\n  in modes `view` or `form`.\n- Fixed #829: z-index issue of context-menu button and conflicting css names.\n\n\n## 2019-10-23, version 7.2.0\n\n- Implemented Japanese translation (`ja`). Thanks @yutakiyama.\n- Implemented French translation (`fr-FR`), and some improvements in the\n  translation. Thanks @yannickyvin.\n- Upgraded to the latest version of Ace editor, 1.4.7.\n- Fixed #824: Parse errors not displayed with bottom right error icon in modes\n  `code` and `text`.\n\n\n## 2019-10-13, version 7.1.0\n\n- Upgraded to the latest version of Ace editor 1.4.6. Changed implementation\n  to use `ace-builds` directly instead of `brace` (still using Ace 1.2.9).\n- Improved Portuguese translation. Thanks @victorananias.\n\n\n## 2019-10-06, version 7.0.5\n\n- Upgraded dependencies: `vanilla-picker@2.10.0`.\n- Minor documentation improvements. Thanks @slash-arun.\n- Minor styling fixes.\n\n\n## 2019-09-11, version 7.0.4\n\n- Fixed #723: schema error popup and color picker not always fully visible.\n- Fixed wrong text color in search box when using JSONEditor in combination\n  with bootstrap. See #791. Thanks @dmitry-kulikov.\n- Fixed react examples not working out of the box when cloning or downloading\n  the git repository of JSONEditor. See #787, #788. Thanks @vishwasnavadak.\n\n\n## 2019-09-04, version 7.0.3\n\n- Fixed `index.js` pointing to non-transpiled code. See #783.\n- Fixed absolute url of images in SASS. Thanks @moonbreezee.\n\n\n## 2019-09-02, version 7.0.2\n\n- Fix #781: race condition when destroying the editor right after setting data.\n\n\n## 2019-09-01, version 7.0.1\n\n- Fix npm package missing `dist` folder.\n\n\n## 2019-09-01, version 7.0.0\n\n- Converted the code largely to ES6, put Babel transpiler in place.\n- Dropped support for bower, removed the `dist` folder from the git repository.\n- Fixed #586: caret position lost when switching browser tabs.\n\n\n## 2019-08-28, version 6.4.1\n\n- Fix styling of autocompletion dropdown broken. Regression since `v6.4.0`.\n\n\n## 2019-08-28, version 6.4.0\n\n- Replaces CSS with SASS internally, improvements in styling. Thanks @ppetkow.\n- Fixed #761: JSON schema errors not rendered in the gutter for mode `code`\n  when the path contained a property with a forward slash, and errors not\n  clickable in the error table.\n- Fixed #777: option `sortObjectKeys` broken.\n\n\n## 2019-08-15, version 6.3.0\n\n- Fixed #755: JSONEditor throwing an exception in mode `code`, `text`, and\n  `preview` when `statusBar: false`.\n- When duplicating an object property, move focus to the field and do not\n  immediately add the ` (copy)` suffix. See #766.\n- Fixed #769: option `name` not working anymore. Regression since `v6.1.0`.\n- Fixed #763: `autocomplete.trigger: 'focus'` throws an error when opening the\n  context menu. Thanks @Thaina.\n- Updated dependencies `json-source-map@0.6.1`\n\n\n## 2019-08-01, version 6.2.1\n\n- Updated Chinese translation. Thanks @SargerasWang.\n\n\n## 2019-07-28, version 6.2.0\n\n- Implemented new mode `preview`, capable of working with large JSON documents\n  up to 500 MiB.\n- Repair button is now capable of turning MongoDB documents into valid JSON.\n- Fixed #730: in `code` mode, there was an initial undo action which clears\n  the content.\n- Upgraded dependencies `vanilla-picker@2.9.2`, `mobius1-selectr@2.4.13`,\n  `ajv@6.10.2`.\n\n\n## 2019-06-22, version 6.1.0\n\n- Implemented menu options `sort` and `transform` for modes `code` and `text`.\n- Implemented new context menu item `extract`.\n- Minor tweaks in the way paths are displayed in the sort and transform modals.\n\n\n## 2019-06-12, version 6.0.0\n\n- Breaking change: upgraded dependency `ajv@6.10.0`, supporting JSON schema\n  draft-07 alongside draft-06 and draft-04.\n- Upgraded dependency `vanilla-picker@2.8.1`.\n- Use JSON schema title as name for the root object if defined (see #635).\n\n\n## 2019-06-08, version 5.34.0\n\n- Extended the autocomplete feature with new options `filter` and `trigger`.\n  Thanks @Gcaufy.\n- Removed :hover style on disabled buttons. Thanks @Gcaufy.\n- Upgraded dependency `mobius1-selectr@2.4.12`.\n\n\n## 2019-05-29, version 5.33.0\n\n- Fixed #697: JSON Schema enum dropdown not working inside an array.\n- Fixed #698: When using `onCreateMenu`, `node.path` is null when clicking\n  on an append node or when multiple nodes are selected.\n- Upgraded dependencies to `mobius1-selectr@2.4.10`, `vanilla-picker@2.8.0`.\n- Remove :hover style on disabled buttons. Thanks @Gcaufy.\n\n\n## 2019-04-27, version 5.32.5\n\n- Fixed a bug in the JMESPath query wizard which didn't correctly handle\n  selecting multiple fields.\n- Fixed context menu not working when multiple nodes are selected.\n\n\n## 2019-04-10, version 5.32.4\n\n- Fixed #682 and #687: JSONEditor not being able to handle JSON schema\n  validation errors when the root of the document is an Array. Thanks @DusuWen.\n\n\n## 2019-04-04, version 5.32.3\n\n- Fixed #684: `const` used in bundled library.\n\n\n## 2019-04-03, version 5.32.2\n\n- Fixed #416: Clipped action menu for append nodes.\n- Improve detection of value type in transform modal.\n- Styling improvements in the transform modal.\n- Fix CSS class for default/non-default schema values not applied to enums,\n  see (#666).\n- Fixed #671: Improved handling of duplicate property names, which could cause\n  values to be cleared when used as a controlled component in for example React.\n\n\n## 2019-03-28, version 5.32.1\n\n- Fixed a regression in parsing JSON paths: numbers where parsed as strings\n  instead of a numeric value. See #679. Thanks @AdamVig.\n- Fixed using hyphens in the path of custom validation errors (see #665).\n  Thanks @tobiasfriden.\n\n\n## 2019-03-20, version 5.32.0\n\n- Implemented support for reckoning with JSON schema default values: custom\n  styling can be applied for default and non-default values. Thanks @AdamVig.\n- Fixed #667: resolving JSON Schema examples and descriptions did not always\n  work for referenced schemas. Thanks @AdamVig.\n- Fixed #676: JSON Paths containing array properties with a `]` not parsed\n  correctly.\n\n\n## 2019-03-14, version 5.31.1\n\n- Fix IE11 issue.\n- Some fixes in the Simplified Chinese translation.\n  Thanks @@adf0001 and @yuxizhe.\n\n\n## 2019-03-10, version 5.31.0\n\n- Display JSON schema examples in tooltip (#664). Thanks @AdamVig.\n\n\n## 2019-03-02, version 5.30.0\n\n- Implemented a new option `onCreateMenu` to customize the action menu.\n  Thanks @RobAley.\n\n\n## 2019-02-20, version 5.29.1\n\n- Fixed #661: JSONEditor broken on IE11 caused by duplicate JSON entries\n  in a translation.\n\n\n## 2019-02-16, version 5.29.0\n\n- Added Simplified Chinese localization. Thanks @long2ice.\n- Added Turkish localization. Thanks @beratpostalci.\n- Improved JSON schema titles on fields. Fixes #321. Thanks @AdamVig.\n- Fixes in resolving JSON schemas, see #651. Thanks @AdamVig.\n- Fix #657: `onClassName` throwing an error when a node is removed.\n\n\n## 2019-01-23, version 5.28.2\n\n- Fix #639: Occurrence of non-ES5 `const` declaration in published code.\n  Regression introduced in `v5.28.0`.\n\n\n## 2019-01-22, version 5.28.1\n\n- Fix #637: Vertical white border left/right from the main menu in some\n  specific circumstances.\n- Fix #638: Cannot expand after collapse. Regression introduced in v5.28.0.\n\n\n## 2019-01-21, version 5.28.0\n\n- Implemented new option `maxVisibleChilds` to customize the maximum number\n  childs that is rendered by default. Thanks @20goto10.\n- Implemented new option `onClassName`, allowing customized and dynamic\n  styling of nodes. See 20_custom_css_style_for_nodes.html for a demo.\n  Thanks @maestr0.\n- Make the method `refresh()` public.\n\n\n## 2019-01-16, version 5.27.1\n\n- Improved navigating deeply nested paths via the navigation bar, see #619.\n  Thanks @meirotstein.\n- Sdd title from schema description to show the tips for user input.\n  Thanks @tylerchen.\n- Fix JSON Schema not resolving refs `$ref`, and not creating enum dropdowns.\n  Thanks @tylerchen.\n\n\n## 2019-01-05, version 5.27.0\n\n- Implemented customizing object and array names via a new option\n  `onNodeName`. Thanks @bnanchen.\n- Visibility of schema validation errors at the bottom of mode code and text\n  are now toggleable. Thanks @meirotstein.\n- Fixed text of the mode switcher not being translated. Thanks @antfu.\n\n\n## 2018-12-06, version 5.26.3\n\n- Fixed #610: JSON Repair now removes trailing commas.\n- Upgraded devDependency `gulp` to v4. Thanks @maestr0.\n\n\n## 2018-11-13, version 5.26.2\n\n- Fixed dragging and selecting multiple nodes not working\n  (regression introduced in `v5.26.1`).\n\n\n## 2018-11-13, version 5.26.1\n\n- Fixed `.update()` throwing an exception when replacing a JSON object\n  with `null`. Thanks @DullReferenceException.\n- Fixed #598: Search field can't be focused in object view.\n\n\n## 2018-11-12, version 5.26.0\n\n- Implemented option `mainMenuBar` to enable/disable the main menu bar.\n  Thanks @tanmayrajani.\n\n\n## 2018-10-29, version 5.25.0\n\n- Implemented options `enableSort` and `enableTransform` so you can turn off\n  these features. Thanks @tanmayrajani.\n- Fixed #590: validation failing in code and text mode when status\n  bar is disabled.\n- Fixed #589: the path in the navigation bar is not updated\n  when duplicating or removing a node, and neither after an undo/redo action.\n- Fixed duplicate and remove of the action menu of multiple selected\n  nodes not working.\n- Fixed not preventing default selection of text when selecting nodes.\n- Fixed #595: navigation bar path link not working.\n\n\n## 2018-10-08, version 5.24.7\n\n- Fix #582: parse error annotations not always up to date in\n  code editor. Thanks @meirotstein.\n\n\n## 2018-09-12, version 5.24.6\n\n- Fix #548: `import JSONEditor from 'jsoneditor'` not working in\n  TypeScript projects (gave a constructor is undefined error).\n\n\n## 2018-09-06, version 5.24.5\n\n- Fixed a bug in textmode on IE 11, not loading the editor when\n  `Promise` is undefined.\n\n\n## 2018-09-06, version 5.24.4\n\n- Fixed #576: Visualization in mode `view` when an array\n  with more than 100 items is rendered.\n- Fixed JSONEditor not working on IE11: continue and throw console\n  errors when `Promise` is undefined. Regression since `v5.23.0`.\n- Fixed `onClose` of color picker not being fired when clicking outside\n  the picker to close it.\n- Upgraded dependencies `brace`, `mobius1-selectr`, `vanilla-picker`.\n- Upgraded devDependency `mocha`.\n\n\n## 2018-08-29, version 5.24.3\n\n- Fixed color picker not working in ES6 projects.\n- Fixed color picker closing immediately after the first `onChange`\n  event, and `onChange` events are now debounced like all text inputs.\n\n\n## 2018-08-27, version 5.24.2\n\n- Improved error and validation messaging in `text` mode.\n  Thanks @meirotstein.\n  - Clicking a message now selects the line where the error occurs.\n  - Icon bottom right showing when there are warnings or errors.\n- Fixed field still editable after moving a node from an object\n  to an array, changing the field from a property into an index.\n\n\n## 2018-08-26, version 5.24.1\n\n- Context menu and color picker are now absolutely positioned, and\n  can overflow the borders of the editor.\n- Fixed #568: mode switcher disappearing when selecting the current\n  mode again.\n- Fixed `transform` not creating/removing expand button when the type\n  of a node changed.\n\n\n## 2018-08-22, version 5.24.0\n\n- Implemented a color picker, and allow hooking in a custom color\n  picker. new options are `colorPicker` and `onColorPicker`.\n- Implemented a timestamp tag displayed right from timestamps,\n  with corresponding option `timestampTag`.\n\n\n## 2018-08-17, version 5.23.1\n\n- Fixed #566: transform function broken, regression since `v5.20.0`.\n\n\n## 2018-08-15, version 5.23.0\n\n- Implemented support for custom validation using a new `onValidate` callback.\n- In tree mode, nodes containing a validation error now have a className\n  `jsoneditor-validation-error` which can be used for custom styling.\n\n\n## 2018-08-13, version 5.22.0\n\n- Implemented `onEvent` callback triggered when an event occurs in a JSON\n  field or value. Thanks @cristinabarrantes.\n\n\n## 2018-08-12, version 5.21.0\n\n- Show validation errors inline instead of at the bottom when in code\n  mode. Thanks @meirotstein.\n- Fix #562: allow `$` character in property names of of a JSON schema.\n\n\n## 2018-08-10, version 5.20.0\n\n_Good news: JSONEditor is finally framework friendly and can now be easily\nintegrated in React, Vue, and Angular!_\n\n- Implemented new methods `update` and `updateText`, which maintain the state\n  of the editor (expanded nodes, search, selection). This makes it easy to\n  integrate in frameworks like React.\n- Implemented options `onChangeJSON(json)` and `onChangeText(jsonString)`.\n- Added two React examples to the `examples` folder.\n- Fixed menu buttons \"Sort\" and \"Transform\" being available in modes `view`\n  and `form`.\n\n\n## 2018-08-02, version 5.19.2\n\n- Fixed #558: scrolling to search results and automatically scrolling up/down\n  when dragging an item broken (regression since v5.19.1).\n\n\n## 2018-07-28, version 5.19.1\n\n- Fixed #557: inner contents of the scrollable area being displayed outside of\n  the editor (on Chrome only).\n\n\n## 2018-07-11, version 5.19.0\n\n- No more grayed out icons of the context menu, see #532.\n- Added Sort and Transform buttons to the main menu.\n- Fixes and improvements in the Transform dialog.\n\n\n## 2018-06-27, version 5.18.0\n\n- Implemented JMESPath support for advanced filtering, sorting, and\n  transforming of JSON documents.\n- Implemented a new option `modalAnchor` to control at which part of the\n  screen the modals are displayed.\n- Fixed #544: JSON Schema errors sometimes not being displayed in the\n  editor.\n\n\n## 2018-06-03, version 5.17.1\n\n- Fixed a bug in a translation text.\n\n\n## 2018-06-03, version 5.17.0\n\n- Implemented advanced sorting for arrays.\n\n\n## 2018-05-23, version 5.16.0\n\n- Better handling of JSON documents containing large arrays:\n  - Only displays the first 100 items of large arrays,\n    with buttons \"show more\" and \"show all\" to render more items.\n  - Search results are now limited to max 1000 matches,\n    and search does no longer expand the paths to all matches\n    but only expands the path of the current search result.\n- Fixed index numbers of Array items not being updated after sorting.\n\n\n## 2018-05-02, version 5.15.0\n\n- Implemented selection API: `onSelectionChanged`, `onTextSelectionChanged`,\n  `getSelection`, `getTextSelection`, `setSelection`, `setTextSelection`,\n  and `getNodesByRange`. Thanks @meirotstein.\n\n\n## 2018-03-21, version 5.14.1\n\n- Fixed absolute path of css image `jsoneditor-icons.svg`, which could.\n  give issues with webpack plugin \"file-loader\". Thanks @landru29.\n\n\n## 2018-02-25, version 5.14.0\n\n- Implemented support for translations. Thanks @mariohmol.\n- Fixed a bug sometimes occurring when dragging items from array to\n  object, see #509. Thanks @43081j.\n- Fixed autocomplete not accepting returned `null` values, see #512.\n  Thanks @43081j.\n- Fixed memory inefficiency when working with large JSON Schema's\n  generating many errors. Thanks @43081j.\n\n\n## 2018-02-07, version 5.13.3\n\n- Fixed a positioning issue with JSON Schema errors in text/code mode.\n\n\n## 2018-01-18, version 5.13.2\n\n- Fixed view mode opening links in a new tab instead of current tab\n  when Ctrl key is not down. Thanks @LEW21.\n- Fixed #502: code editor not showing a monospaced font some cases.\n\n\n## 2017-12-28, version 5.13.1\n\n- Fixed another occurrence of #494: properties not escaped in the\n  navigation bar.\n\n\n## 2017-12-28, version 5.13.0\n\n- Implemented cursor position in text mode. Thanks @meirotstein.\n- Fixed #494: properties not escaped in the navigation bar.\n  Thanks @meirotstein.\n\n\n## 2017-12-18, version 5.12.0\n\n- Implemented #482: Include `caseSensitive` option for autocomplete.\n  Thanks @israelito3000.\n- Upgraded dependencies\n  - `ajv@5.5.2`\n\n\n## 2017-11-22, version 5.11.0\n\n- Upgraded dependencies\n  - `ajv@5.4.0`\n  - `brace@0.11.0`\n- Fixed dropdown for JSON Schema enums when defined inside pattern\n  properties. Thanks @alquist.\n- Fixed code containing a non UTF-8 character. Thanks @alshakero.\n\n\n## 2017-11-15, version 5.10.1\n\n- Some styling tweaks in the navigation bar and status bar.\n- Don't display status bar in `text` mode (which doesn't yet support\n  row and col counts).\n\n\n## 2017-11-15, version 5.10.0\n\n- Implemented a navigation bar showing the path. Thanks @meirotstein.\n- Implemented a status bar showing cursor location.\n  Thanks @meirotstein.\n- Implemented repairing JSON objects containing left and right single\n  and double quotes (which you get when typing a JSON object in Word)\n  in `text` and `code` mode.\n- Implemented repairing JSON objects containing special white space\n  characters like non-breaking space.\n- Upgraded dependency `ajv` to version `5.3.0`.\n- Fixed #481: A polyfill required `DocumentType` which is not defined\n  in all environments.\n\n\n## 2017-09-16, version 5.9.6\n\n- Fixed displaying a dropdown for enums inside composite schemas.\n  Thanks @hachichaud.\n- Fixed #461: Urls opening twice on Firefox and Safari.\n\n\n## 2017-08-26, version 5.9.5\n\n- Fixed a regression introduced in `v5.9.4`: after using the context\n  menu once, it was not possible to set focus to an other input field\n  anymore.\n\n\n## 2017-08-20, version 5.9.4\n\n- Fixed #447: context menus not working in Shadow DOM. Thanks @tomalec.\n\n\n## 2017-07-24, version 5.9.3\n\n- Fixed broken multi-selection (regression).\n\n\n## 2017-07-13, version 5.9.2\n\n- Fixed a bug in the JSON sanitizer.\n\n\n## 2017-07-13, version 5.9.1\n\n- `setText` method of tree mode now automatically sanitizes JSON input\n  when needed.\n- Fixed #430: automatically fix unescaped control characters in\n  JSON input.\n\n\n## 2017-07-10, version 5.9.0\n\n- Implemented support for JSON schema references `$ref`, see #302.\n  Thanks @meirotstein.\n- Fixed #429: JSONEditor no longer accepting an empty array for option\n  `modes`. Thanks @trystan2k.\n- Fixed JSONEditor picking the first entry of `modes` as initial mode\n  instead of option `mode`.\n\n\n## 2017-07-08, version 5.8.2\n\n- Select first option from `modes` instead of `tree` when `mode` is not\n  configured. Thanks @bag-man.\n- Some fixes and improvements in the API of autocompletion.\n  Thanks @israelito3000.\n\n\n## 2017-07-03, version 5.8.1\n\n- Fixed broken minified bundles in folder `dist` (again...).\n\n\n## 2017-07-02, version 5.8.0\n\n- Implemented support for autocompletion. Thanks @israelito3000.\n\n\n## 2017-06-27, version 5.7.2\n\n- Fixed broken minified bundles in folder `dist`\n  (reverted to `uglify-js@2.8.22` for now).\n\n\n## 2017-06-25, version 5.7.1\n\n- Upgraded dependency `ajv` to version `5.2.0`. Resolves warnings in\n  Webpack build processes.\n\n\n## 2017-05-26, version 5.7.0\n\n- Implemented support for template items. Thanks @israelito3000.\n- Upgraded dependencies to the latest versions. Thanks @andreykaipov.\n\n\n## 2017-04-15, version 5.6.0\n\n- Implemented readonly option for modes `text` and `code.`\n  Thanks @walkerrandolphsmith.\n- Upgraded dependencies (`brance` and `ajv`) to the latest versions.\n- Fixed not being able to move focus to enum select box when clicking\n  a JSON Schema warning.\n- Fixed #309: already loaded version of Ace being overwritten by the\n  embedded version of JSONEditor.\n- Fixed #368: Mode selection drop down not fully visible on small screen.\n- Fixed #253: Optimize the input experience of Chinese IME.\n  Thanks @chinesedfan.\n\n\n## 2017-01-06, version 5.5.11\n\n- Fixed embedded version of jsoneditor ace theme not being loaded in\n  minimalist version (see #55).\n- Fixed a styling issue in the SearchBox of Ace editor (mode `code`).\n- Fixed #347: CSS more robust against global settings of div position.\n- Added docs and example on how to use a custom version of Ace editor.\n\n\n## 2016-11-02, version 5.5.10\n\n- Fixed #85: pressing enter in an input in a form containing a JSONEditor too\n  breaks submitting the form.\n\n\n## 2016-10-17, version 5.5.9\n\n- Fixed #329: Editor showing duplicate key warnings for keys defined on the\n  Object prototype, like `toString` and `watch`.\n\n\n## 2016-09-27, version 5.5.8\n\n- Fixed #314: JSON schema validation throwing an error \"Unexpected token ' in\n  JSON at position 0\" in specific cases. Thanks @apostrophest\n\n\n## 2016-08-17, version 5.5.7\n\n- Fixed #308: wrong positioning of label \"empty array\" when `onEditable`\n  returns false.\n\n\n## 2016-06-15, version 5.5.6\n\n- Fixed #303: editor contents collapsed when the parent div of the JSONEditor\n  has no height set.\n- Improved example 04_load_and_save.html. Thanks @RDCH106.\n\n\n## 2016-05-24, version 5.5.5\n\n- Fixed #298: Switch mode button disappears when switching from text/code to\n  tree/form/view mode when the JSON contained errors.\n- Fixed enum drop downs not working when the JSONEditor is configured with\n  a name.\n\n\n## 2016-05-22, version 5.5.4\n\n- Fixed #285: an issue with the enum drop down when having defined multiple\n  enums in a JSON schema.\n- Fixed a (harmless) error in the console when clicking right from an enum\n  drop down.\n\n\n## 2016-05-22, version 5.5.3\n\n- Fixed #299: reverted the fix of #268 by trimming text in fields and values.\n\n\n## 2016-04-18, version 5.5.2\n\n- Fixed #294: Fields reset their caret location on every key press in Firefox.\n\n\n## 2016-04-16, version 5.5.1\n\n- Fixed enum select boxes not being rendered/removed when setting or removing\n  a JSON schema via `editor.setSchema(schema)`.\n\n\n## 2016-04-16, version 5.5.0\n\n- Implemented a dropdown for values having an JSON Schema enum.\n  Thanks @tdakanalis.\n- Fixed #291, #292: Some CSS broken when using the editor in combination with\n  bootstrap. Thanks @nucleartide.\n\n## 2016-04-09, version 5.4.0\n\n- Upgraded all dependencies (`ajv`, `brace`, etc).\n- Fixed #289: Some CSS breaking when using the editor in combination with\n  materialize.css or bootstrap.\n- Fixed #290: `setText()` not working in mode text or code.\n\n\n## 2016-04-06, version 5.3.0\n\n- Implemented support for sorting object keys naturally. Thanks @edufelipe.\n- Sorting object keys or array items via the context menu is now also naturally\n  sorted.\n- Fixed #283: improved JSON schema error message in case of no\n  additionalProperties.\n- Fixed #286: Calling `get()` or `getText()` caused the editor to lose focus.\n  A regression introduced in v5.2.0.\n\n\n## 2016-03-20, version 5.2.0\n\n- Implemented method `editor.destroy()` to properly cleanup the editor (#278).\n- Fixed #268: JSONEditor now trims text in fields and values.\n- Fixed #280: Some CSS issues when used in combination with bootstrap.\n\n\n## 2016-02-15, version 5.1.5\n\n- Fixed #272: Checkbox for boolean values visible in view mode.\n\n\n## 2016-02-13, version 5.1.4\n\n- Fixed broken example 04_load_and_save.html. See #265.\n\n\n## 2016-02-03, version 5.1.3\n\n- Fixed #264: Clicking items in the context menu not working on Firefox.\n\n\n## 2016-01-21, version 5.1.2\n\n- Improvements in sanitizing invalid JSON.\n- Updated dependencies to the latest version.\n- Fixed clicking format/compact not triggering an onChange event.\n- Fixed #259: when having a JSONEditor inside an HTML form, clicking an entry\n  in the context menu did submit the form.\n- Fixed browserify build, see #260. Thanks @onip.\n\n\n## 2016-01-16, version 5.1.1\n\n- Fixed #257: Improving error messages for enum errors failed when the\n  schema contains references.\n- Fixed #255: Removed wrong console warning about the option `search`.\n- Fixed error thrown when option `search` is false (see #256). Thanks @MiroHibler.\n\n\n## 2016-01-14, version 5.1.0\n\n- Implemented support for JSON schema validation, powered by `ajv`.\n- Implemented #197: display an error in case of duplicate keys in an object.\n- Implemented #183: display a checkbox left from boolean values, so you can\n  easily switch between true/false.\n- Implemented debouncing of keyboard input, resulting in much less history\n  actions whilst typing.\n- Added a minimalist bundle to the `dist` folder, excluding `ace` and `ajv`.\n- Fixed #222: editor throwing `onChange` events when switching mode.\n- Fixed an error throw when switching to mode \"code\" via the menu.\n- Fixed interfering shortcut keys: changed quick keys to select multiple fields\n  from `Shift+Arrow Up/Down` to `Ctrl+Shift+Arrow Up/Down`.\n\n\n\n## 2015-12-31, version 5.0.1\n\n- Fixed a bug in positioning of the context menu for multiple selected nodes.\n- Fixed #130: option `onEditable` not available in mode `form`.\n- Fixed #202: removed `version` field from bower.json.\n\n\n## 2015-12-31, version 5.0.0\n\n- New design.\n- Implemented selection of multiple nodes, allowing to move/duplicate/remove\n  multiple nodes at once (See #106).\n- Implemented a new option `escapeUnicode`, which will show the hexadecimal \n  unicode instead of the character itself. (See #93 and #230).\n- Implemented method `getMode`.\n- Implemented option `onModeChange(oldMode, newMode)`.\n- Implemented #203: Objects and arrays in mode `form` and `view` are now\n  expandable by clicking the field names too.\n- Replaced the PNG icon images with SVG. Thanks @1j01.\n- Renamed all CSS classes They now have prefixes `.jsoneditor-` to prevent\n  name collisions with css frameworks like bootstrap.\n- Renamed options `change`, `editable`, `error` to respectively `onChange`,\n  `onEditable`, and `onError`. Old options are still working and give a \n  deprecation warning.\n- Colors of values are now customizable using CSS. \n- JSONEditor new throws a warning in the console in case of unknown options.\n- Fixed #93 and #227: html codes like `&amp;` not escaped.\n- Fixed #149: Memory leak when switching mode from/to `code` mode, web worker\n  of Ace editor wasn't cleaned up.\n- Fixed #234: Remove dependency on a fork of the `jsonlint` project on github.\n- Fixed: disabled `Ctrl+L` quick key to go to a line, instead use the default\n  browser behavior of selecting the address bar.\n- Fixed #38: clear search results after a new JSON object is set.\n- Fixed #242: row stays highlighted when dragging outside editor.\n- Fixed quick-keys Shift+Alt+Arrows not registering actions in history.\n- Fixed #104: context menus are now positioned relative to the elements of the \n  editor instead of an absolute position in the window.\n\n\n## 2015-06-13, version 4.2.1\n\n- Fixed #161: Cannot select text in Ace editor on systems using Chinese fonts.\n\n\n## 2015-05-14, version 4.2.0\n\n- Implemented option `theme`, allowing to set a custom theme for the Ace \n  editor. Thanks @nfvs.\n- Implemented option `ace`, which allows to pass a custom instance of the Ace\n  instead of the embedded version.\n- Fixed #186: binding issue to `jsonlint.parse`.\n- Fixed `editor.get()` manipulating the code when containing an error.\n\n\n## 2015-03-15, version 4.1.1\n\n- Added missing file `index.js` to the bower package.\n  \n\n## 2015-03-15, version 4.1.0\n\n- Implemented a function `focus()` for modes tree, view, and form.\n- Added `./src` folder to the distributed package, needed for usage via\n  node.js/browserify.\n\n\n## 2015-02-28, version 4.0.0\n\n- Ace editor and jsonlint are now packed with jsoneditor.js by default.\n  This makes the library about 4 times larger. If Ace is not needed, a custom\n  build of the library can be done.\n- The distribution files are now moved from the root to the `/dist` folder.\n- Reworked the source code to CommonJS modules, using `brace` to load Ace.\n- JSONP is now automatically stripped from JSON. Thanks @yanivefraim.\n- Fixed bugs in the JSON sanitizer, no longer manipulating JSON-like structures\n  inside strings.\n\n\n## 2015-01-25, version 3.2.0\n\n- Implemented shortcut keys `Ctrl+\\` to format and `Ctrl+Shift+\\` to compact\n  JSON when in mode `text` or `code`.\n- Before an error is thrown because of invalid text, the editor first tries to\n  sanitize the text (replace JavaScript notation with JSON notation), and only\n  after that throws the error.\n- Fixed Node.path() not working for a JSON Object `\"\"`. Thanks @tomalec.\n- Minor styling improvements.\n- Fixed configured indentation not being applied to Ace editor.\n\n\n## 2014-09-03, version 3.1.2\n\n- Some fixes/improvements in `parseJS` (to parse a JSON object from a JavaScript\n  object).\n- Fixed the lack of a semi colon at end of the bundled files.\n\n\n## 2014-08-01, version 3.1.1\n\n- Replaced parsing of JavaScript objects into JSON from `eval` to a dedicated\n  `parseJS` function.\n\n\n## 2014-07-28, version 3.1.0\n\n- JSONEditor now accepts JavaScript objects as input, and can turn them into\n  valid JSON. For example `{a:2,b:'str'}` can be turned into `{\"a\":2,\"b\":\"str\"}`.\n- Implemented an option `editable`, a callback function, which allows to set \n  individual nodes (their field and/or value) editable or read-only.\n- Fixed: shortcut keys to manipulate the nodes are now disabled when mode \n  is `form` or `view`.\n\n\n## 2014-05-31, version 3.0.0\n\n- Large code reorganization.\n- Editor must be loaded as `new JSONEditor(...)` instead of \n  `new jsoneditor.JSONEditor(...)`.\n- Css is not automatically loaded anymore when using AMD.\n- Web application has been moved to another project.\n\n\n## 2014-01-03, version 2.3.6\n\n- Fixed positioning issue of the action menu.\n\n\n## 2013-12-09, version 2.3.5\n\n- Fixed a positioning issue of the action menu again.\n- Fixed an issue with non-breaking space characters.\n\n\n## 2013-11-19, version 2.3.4\n\n- Dropped support for IE8, cleaned up legacy code for old browsers.\n- Disabled saving files using HTML5 on Firefox to prevent a Firefox bug\n  blocking cut/paste functionality in editable divs after using a.download.\n\n\n## 2013-10-17, version 2.3.3\n\n- Added support for search (Ctrl+F) in the code editor Ace.\n- Fixed a positioning issue of the action menu when in bootstrap modal.\n  (thanks tsash).\n\n\n## 2013-09-26, version 2.3.2\n\n- The web application is now available offline. Thanks ayanamist.\n\n\n## 2013-09-24, version 2.3.1\n\n- Fixed non-working action menu when in bootstrap modal (z-index issue).\n- Fixed missing main field in package.json.\n\n\n## 2013-09-13, version 2.3.0\n\n- Implemented an option `modes`, which creates a menu in the editor\n  where the user can switch between the selected editor modes.\n- Fixed wrong title on fields with value `null`.\n- Fixed buggy loading of files in the web application.\n\n\n## 2013-08-01, version 2.2.2\n\n- Fixed non working option `indentation`.\n- Fixed css not being loaded with AMD in case of multiple scripts.\n- Fixed a security error in the server side file retriever script of\n  the web application.\n\n\n## 2013-05-27, version 2.2.1\n\n- Fixed undefined options in TextEditor. Thanks Wiseon3.\n- Fixed non-working save function on Firefox 21. Thanks youxiachai.\n\n\n## 2013-05-04, version 2.2.0\n\n- Unified JSONFormatter and JSONEditor in one editor with a switchable mode.\n- Urls are navigable now.\n- Improved error and log handling.\n- Added jsoneditor to package managers npm and bower.\n\n\n## 2013-03-11, version 2.1.1\n\n- Fixed an issue with console outputs on IE8, causing the editor not to work\n  at all on IE8.\n\n\n## 2013-03-08, version 2.1.0\n\n- Replaced the plain text editor with code editor Ace, which brings in syntax\n  highlighting and code inspection.\n- Improved the splitter between the two panels. Panels can be hided.\n\n\n## 2013-02-26, version 2.0.2\n\n- Fixed: dragarea of the root node was wrongly visible is removed now.\n\n\n## 2013-02-21, version 2.0.1\n\n- Fixed undefined variable in the redo method.\n- Removed the \"hide ads\" button. Not allowed by Google AdSense, sorry.\n\n\n## 2013-02-09, version 2.0.0\n\n- Implemented a context menu, replacing the action buttons on the right side of\n  the editor and the inline action buttons. This gives a cleaner interface,\n  more space for the actual contents, and more room for new controls (like\n  insert and sort).\n- Implemented shortcut keys. The JSON Editor can be used with just a keyboard.\n- Implemented sort action, which sorts the childs of an array or object.\n- Implemented auto scrolling up and down when dragging a node and reaching\n  the top or bottom of the editor.\n- Added support for CommonJS and RequireJS.\n- Added more examples.\n- Improved performance and memory usage.\n- Implemented a new mode 'form', in which only values are editable and the\n  fields are fixed.\n- Minor improvements and bug fixes.\n\n\n## 2012-12-08, version 1.7.0\n\n- Implemented two modes: 'editor' (default), and 'viewer'. In viewer mode,\n  the data and datastructure is read-only.\n- Implemented methods set(json, name), setName(name), and getName(), which\n  allows for setting and getting the field name of the root node.\n- Fixed an issue where the search bar does not work when there is no global\n  window.editor object.\n\n\n## 2012-11-26, version 1.6.2\n\n- Fixed a bug in the change callback handler, resulting in an infinite loop\n  when requesting the contents of the editor inside the callback (issue #19).\n\n\n## 2012-11-21, version 1.6.1\n\n- Added a request header \"Accept: application/json\" when loading files and urls.\n\n\n## 2012-11-03, version 1.6.0\n\n- Added feature to the web application to load and save files from disk and url.\n- Improved error messages in the web application using JSONLint.\n- Made the web application pass the W3C markup validation service.\n- Added option 'change' to both editor and formatter, which allows to set a\n  callback which is triggered when the contents of the editor or formatter\n  changes.\n- Changed the default indentation of the JSONFormatter to 4 spaces.\n- Renamed options 'enableSearch' and 'enableHistory' to 'search' and 'history'\n  respectively.\n- Added parameter 'json' to the JSONFormatter constructor.\n- Added option 'indentation' to the JSONFormatter.\n\n\n## 2012-10-08, version 1.5.1\n\n- Replaced the paid Chrome App with a free, hosted Chrome App (with ads).\n\n\n## 2012-10-02, version 1.5.0\n\n- Implemented history: undo/redo all actions.\n- Created menu icons (instead of text buttons).\n- Cleaned up the code (removed unused params, improved comments, etc).\n- Minor performance improvements.\n\n\n## 2012-08-31, version 1.4.4\n\n- Changed: description of advertisement now gives information about the Chrome\n  App (without ads).\n- Changed: Chrome App is now configured to be available offline.\n- Fixed: When zooming your browser window, the fields/values did get wrapped\n  on Chrome (thanks Henri Gourvest), and on Firefox sometimes the jsoneditor\n  disappeared due to wrapping of the interface contents.\n\n\n## 2012-08-25, version 1.4.3\n\n- Changed: changed code for the buttons to copy from formatter to editor and\n  vice versa, no inline javascript (gives security policy errors in chrome app).\n\n\n## 2012-08-25, version 1.4.2\n\n- Changed: other bootstrapping mechanism for the chrome app, in a separate\n  javascript file, as inline javascript is not allowed (security policy).\n- Fixed: drop down menu for changing the field type did throw javascript errors\n  (did not break any functionality though).\n\n\n## 2012-08-23, version 1.4.1\n\n- New: Chrome app created.\n\n\n## 2012-08-23, version 1.4.0\n\n- New: Improved icon, logo, and interface header.\n\n\n## 2012-08-19, version 1.3.0\n\n- New: Added buttons next and previous to the search box in the upper right.\n- New: Escape characters are automatically inserted before \" and \\ missing\n  and escape character, making the string contents valid JSON. New lines are\n  automatically replaced with \\n. (Thanks Steve Clay)\n- Changed: all icons have been put in a single sprite. This will improve page\n  load times as there are much less server requests needed to load the editor.\n\n\n## 2012-08-12, version 1.2.0\n\n- New: Added search functionality. Search results are expanded and highlighted.\n  Quickkeys in the search box: Enter (next), Shift+Enter (previous), Ctrl+Enter\n  (search again).\n- New: The position of the vertical separator between left and right panel is\n  stored.\n- New: Link to the sourcecode on github added at the bottom of the page.\n- Changed: Refinements in the layout: fonts, colors, icons.\n- Fixed: leading an trailing spaces not being displayed in the editor.\n- Fixed: wrapping of long words and urls in Chrome.\n- Fixed: ignoring functions and undefined values in the loaded JSON object\n  (they where interpreted as empty object and string instead of being ignored).\n\n\n## 2012-07-01, version 1.1.1\n\n- Fixed global event listener for the focus/blur events, causing changes in\n  fields and values not always being registered.\n- Fixed a css issue with Firefox (box-sizing of the editor).\n\n\n## 2012-04-24, version 1.1\n\n- Fixed a bug. Dragging an object down which has been expanded and collapsed\n  again did not work.\n- Using a minified version of jsoneditor.js, to improve page load time and\n  save bandwidth.\n\n\n## 2012-04-21, version 1.0\n\n- Values are no longer aligned in one global column, but placed directly right\n  from the field. Having field and value close together improves readability,\n  especially in case of deeply nested data.\n- Values are colorized by their type: strings are green, values read, booleans\n  blue, and null is purple.\n- Font is changed to a monotype font for better readability.\n- Special characters like \\t are now handled nicely.\n- Overall performance and memory usage improved.\n- When clicking on whitespace, focus is set to the closest field or value.\n- some other small interface tweaks.\n- Fixed a bug with casting a value from type auto to string and vice versa\n  (the value was not casted at all).\n\n\n## 2012-03-01, version 0.9.10\n\n- Nicer looking select box for the field types, with icons.\n- Improved drag and drop: better visualized, and now working in all browsers.\n- Previous values will be restored after changing the type of a field. When\n  changing the type back, the previous value or childs will be restored.\n- When hovering buttons (fieldtype, duplicate, delete, add) or when dragging\n  a field, corresponding field including its childs is highlighted. This makes\n  it easier to see what part of the data will be edited.\n- Errors are now displayed in a message window on top of the page instead of\n  an alert which pops up.\n- Fixed a bug with displaying enters in fields.\n- Fixed a bug where the last trailing enter was removed when setting json\n  in the editor.\n- Added a fix to get around Internet Explorer 8 issues with vertical scrollbars.\n\n\n## 2012-01-29, version 0.9.9\n\n- Fields can be duplicated\n- Support for drag and drop:\n  - fields in the editor itself can be moved via drag and drop\n  - fields can be exported from the editor as JSON\n  - external JSON can be dropped inside the editor\n- When changing type from array to object and vice versa, childs will be\n  maintained instead of removed.\n- Updated interface. Works now in IE8 too.\n\n\n## 2012-01-16, version 0.9.8\n\n- Improved the performance of expanding a node with all its childs.\n\n\n## 2012-01-09, version 0.9.7\n\n- Added functionality to expand/collapse a node and all its childs. Click\n  the expand button of a node while holding Ctrl down.\n- Small interface improvements\n\n\n## 2011-11-28, version 0.9.6\n\n- First fully usable version of the JSON editor\n", "'use strict'\n\nimport './polyfills'\nimport naturalSort from 'javascript-natural-sort'\nimport jsonrepair from 'jsonrepair'\nimport jsonlint from './assets/jsonlint/jsonlint'\nimport jsonMap from 'json-source-map'\nimport { translate } from './i18n'\n\nconst MAX_ITEMS_FIELDS_COLLECTION = 10000\nconst YEAR_2000 = 946684800000\n\n/**\n * Parse JSON using the parser built-in in the browser.\n * On exception, the jsonString is validated and a detailed error is thrown.\n * @param {String} jsonString\n * @return {JSON} json\n */\nexport function parse (jsonString) {\n  try {\n    return JSON.parse(jsonString)\n  } catch (err) {\n    // try to throw a more detailed error message using validate\n    validate(jsonString)\n\n    // rethrow the original error\n    throw err\n  }\n}\n\n/**\n * Try to fix the JSON string. If not successful, return the original string\n * @param {string} jsonString\n */\nexport function tryJsonRepair (jsonString) {\n  try {\n    return jsonrepair(jsonString)\n  } catch (err) {\n    // repair was not successful, return original text\n    return jsonString\n  }\n}\n\n/**\n * Escape unicode characters.\n * For example input '\\u2661' (length 1) will output '\\\\u2661' (length 5).\n * @param {string} text\n * @return {string}\n */\nexport function escapeUnicodeChars (\n  // see https://www.wikiwand.com/en/UTF-16\n  text\n) {\n  return (\n    // note: we leave surrogate pairs as two individual chars,\n    // as JSON doesn't interpret them as a single unicode char.\n    text.replace(\n      /[\\u007F-\\uFFFF]/g,\n      c => '\\\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4)\n    )\n  )\n}\n\n/**\n * Validate a string containing a JSON object\n * This method uses JSONLint to validate the String. If JSONLint is not\n * available, the built-in JSON parser of the browser is used.\n * @param {String} jsonString   String with an (invalid) JSON object\n * @throws Error\n */\nexport function validate (jsonString) {\n  if (typeof (jsonlint) !== 'undefined') {\n    jsonlint.parse(jsonString)\n  } else {\n    JSON.parse(jsonString)\n  }\n}\n\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\nexport function extend (a, b) {\n  for (const prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      a[prop] = b[prop]\n    }\n  }\n  return a\n}\n\n/**\n * Remove all properties from object a\n * @param {Object} a\n * @return {Object} a\n */\nexport function clear (a) {\n  for (const prop in a) {\n    if (hasOwnProperty(a, prop)) {\n      delete a[prop]\n    }\n  }\n  return a\n}\n\n/**\n * Get the type of an object\n * @param {*} object\n * @return {String} type\n */\nexport function getType (object) {\n  if (object === null) {\n    return 'null'\n  }\n  if (object === undefined) {\n    return 'undefined'\n  }\n  if ((object instanceof Number) || (typeof object === 'number')) {\n    return 'number'\n  }\n  if ((object instanceof String) || (typeof object === 'string')) {\n    return 'string'\n  }\n  if ((object instanceof Boolean) || (typeof object === 'boolean')) {\n    return 'boolean'\n  }\n  if (object instanceof RegExp) {\n    return 'regexp'\n  }\n  if (isArray(object)) {\n    return 'array'\n  }\n\n  return 'object'\n}\n\n/**\n * Test whether a text contains a url (matches when a string starts\n * with 'http://*' or 'https://*' and has no whitespace characters)\n * @param {String} text\n */\nconst isUrlRegex = /^https?:\\/\\/\\S+$/\n\nexport function isUrl (text) {\n  return (typeof text === 'string' || text instanceof String) &&\n      isUrlRegex.test(text)\n}\n\n/**\n * Tes whether given object is an Array\n * @param {*} obj\n * @returns {boolean} returns true when obj is an array\n */\nexport function isArray (obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]'\n}\n\n/**\n * Gets a DOM element's Window.  This is normally just the global `window`\n * variable, but if we opened a child window, it may be different.\n * @param {HTMLElement} element\n * @return {Window}\n */\nexport function getWindow (element) {\n  return element.ownerDocument.defaultView\n}\n\n/**\n * Retrieve the absolute left value of a DOM element\n * @param {Element} elem    A dom element, for example a div\n * @return {Number} left    The absolute left position of this element\n *                          in the browser page.\n */\nexport function getAbsoluteLeft (elem) {\n  const rect = elem.getBoundingClientRect()\n  return rect.left + window.pageXOffset || document.scrollLeft || 0\n}\n\n/**\n * Retrieve the absolute top value of a DOM element\n * @param {Element} elem    A dom element, for example a div\n * @return {Number} top     The absolute top position of this element\n *                          in the browser page.\n */\nexport function getAbsoluteTop (elem) {\n  const rect = elem.getBoundingClientRect()\n  return rect.top + window.pageYOffset || document.scrollTop || 0\n}\n\n/**\n * add a className to the given elements style\n * @param {Element} elem\n * @param {String} className\n */\nexport function addClassName (elem, className) {\n  const classes = elem.className.split(' ')\n  if (classes.indexOf(className) === -1) {\n    classes.push(className) // add the class to the array\n    elem.className = classes.join(' ')\n  }\n}\n\n/**\n * remove all classes from the given elements style\n * @param {Element} elem\n */\nexport function removeAllClassNames (elem) {\n  elem.className = ''\n}\n\n/**\n * add a className to the given elements style\n * @param {Element} elem\n * @param {String} className\n */\nexport function removeClassName (elem, className) {\n  const classes = elem.className.split(' ')\n  const index = classes.indexOf(className)\n  if (index !== -1) {\n    classes.splice(index, 1) // remove the class from the array\n    elem.className = classes.join(' ')\n  }\n}\n\n/**\n * Strip the formatting from the contents of a div\n * the formatting from the div itself is not stripped, only from its childs.\n * @param {Element} divElement\n */\nexport function stripFormatting (divElement) {\n  const childs = divElement.childNodes\n  for (let i = 0, iMax = childs.length; i < iMax; i++) {\n    const child = childs[i]\n\n    // remove the style\n    if (child.style) {\n      // TODO: test if child.attributes does contain style\n      child.removeAttribute('style')\n    }\n\n    // remove all attributes\n    const attributes = child.attributes\n    if (attributes) {\n      for (let j = attributes.length - 1; j >= 0; j--) {\n        const attribute = attributes[j]\n        if (attribute.specified === true) {\n          child.removeAttribute(attribute.name)\n        }\n      }\n    }\n\n    // recursively strip childs\n    stripFormatting(child)\n  }\n}\n\n/**\n * Set focus to the end of an editable div\n * code from Nico Burns\n * http://stackoverflow.com/users/140293/nico-burns\n * http://stackoverflow.com/questions/1125292/how-to-move-cursor-to-end-of-contenteditable-entity\n * @param {Element} contentEditableElement   A content editable div\n */\nexport function setEndOfContentEditable (contentEditableElement) {\n  let range, selection\n  if (document.createRange) {\n    range = document.createRange()// Create a range (a range is a like the selection but invisible)\n    range.selectNodeContents(contentEditableElement)// Select the entire contents of the element with the range\n    range.collapse(false)// collapse the range to the end point. false means collapse to end rather than the start\n    selection = window.getSelection()// get the selection object (allows you to change selection)\n    selection.removeAllRanges()// remove any selections already made\n    selection.addRange(range)// make the range you have just created the visible selection\n  }\n}\n\n/**\n * Select all text of a content editable div.\n * http://stackoverflow.com/a/3806004/1262753\n * @param {Element} contentEditableElement   A content editable div\n */\nexport function selectContentEditable (contentEditableElement) {\n  if (!contentEditableElement || contentEditableElement.nodeName !== 'DIV') {\n    return\n  }\n\n  let sel, range\n  if (window.getSelection && document.createRange) {\n    range = document.createRange()\n    range.selectNodeContents(contentEditableElement)\n    sel = window.getSelection()\n    sel.removeAllRanges()\n    sel.addRange(range)\n  }\n}\n\n/**\n * Get text selection\n * http://stackoverflow.com/questions/4687808/contenteditable-selected-text-save-and-restore\n * @return {Range | TextRange | null} range\n */\nexport function getSelection () {\n  if (window.getSelection) {\n    const sel = window.getSelection()\n    if (sel.getRangeAt && sel.rangeCount) {\n      return sel.getRangeAt(0)\n    }\n  }\n  return null\n}\n\n/**\n * Set text selection\n * http://stackoverflow.com/questions/4687808/contenteditable-selected-text-save-and-restore\n * @param {Range | TextRange | null} range\n */\nexport function setSelection (range) {\n  if (range) {\n    if (window.getSelection) {\n      const sel = window.getSelection()\n      sel.removeAllRanges()\n      sel.addRange(range)\n    }\n  }\n}\n\n/**\n * Get selected text range\n * @return {Object} params  object containing parameters:\n *                              {Number}  startOffset\n *                              {Number}  endOffset\n *                              {Element} container  HTML element holding the\n *                                                   selected text element\n *                          Returns null if no text selection is found\n */\nexport function getSelectionOffset () {\n  const range = getSelection()\n\n  if (range && 'startOffset' in range && 'endOffset' in range &&\n      range.startContainer && (range.startContainer === range.endContainer)) {\n    return {\n      startOffset: range.startOffset,\n      endOffset: range.endOffset,\n      container: range.startContainer.parentNode\n    }\n  }\n\n  return null\n}\n\n/**\n * Set selected text range in given element\n * @param {Object} params   An object containing:\n *                              {Element} container\n *                              {Number} startOffset\n *                              {Number} endOffset\n */\nexport function setSelectionOffset (params) {\n  if (document.createRange && window.getSelection) {\n    const selection = window.getSelection()\n    if (selection) {\n      const range = document.createRange()\n\n      if (!params.container.firstChild) {\n        params.container.appendChild(document.createTextNode(''))\n      }\n\n      // TODO: do not suppose that the first child of the container is a textnode,\n      //       but recursively find the textnodes\n      range.setStart(params.container.firstChild, params.startOffset)\n      range.setEnd(params.container.firstChild, params.endOffset)\n\n      setSelection(range)\n    }\n  }\n}\n/**\n * Get the inner text of an HTML element (for example a div element)\n * @param {Element} element\n * @param {Object} [buffer]\n * @return {String} innerText\n */\nexport function getInnerText (element, buffer) {\n  const first = (buffer === undefined)\n  if (first) {\n    buffer = {\n      _text: '',\n      flush: function () {\n        const text = this._text\n        this._text = ''\n        return text\n      },\n      set: function (text) {\n        this._text = text\n      }\n    }\n  }\n\n  // text node\n  if (element.nodeValue) {\n    // remove return characters and the whitespace surrounding return characters\n    const trimmedValue = element.nodeValue.replace(/\\s*\\n\\s*/g, '')\n    if (trimmedValue !== '') {\n      return buffer.flush() + trimmedValue\n    } else {\n      // ignore empty text\n      return ''\n    }\n  }\n\n  // divs or other HTML elements\n  if (element.hasChildNodes()) {\n    const childNodes = element.childNodes\n    let innerText = ''\n\n    for (let i = 0, iMax = childNodes.length; i < iMax; i++) {\n      const child = childNodes[i]\n\n      if (child.nodeName === 'DIV' || child.nodeName === 'P') {\n        const prevChild = childNodes[i - 1]\n        const prevName = prevChild ? prevChild.nodeName : undefined\n        if (prevName && prevName !== 'DIV' && prevName !== 'P' && prevName !== 'BR') {\n          if (innerText !== '') {\n            innerText += '\\n'\n          }\n          buffer.flush()\n        }\n        innerText += getInnerText(child, buffer)\n        buffer.set('\\n')\n      } else if (child.nodeName === 'BR') {\n        innerText += buffer.flush()\n        buffer.set('\\n')\n      } else {\n        innerText += getInnerText(child, buffer)\n      }\n    }\n\n    return innerText\n  }\n\n  // br or unknown\n  return ''\n}\n\n/**\n * Test whether an element has the provided parent node somewhere up the node tree.\n * @param {Element} elem\n * @param {Element} parent\n * @return {boolean}\n */\nexport function hasParentNode (elem, parent) {\n  let e = elem ? elem.parentNode : undefined\n\n  while (e) {\n    if (e === parent) {\n      return true\n    }\n    e = e.parentNode\n  }\n\n  return false\n}\n\n/**\n * Returns the version of Internet Explorer or a -1\n * (indicating the use of another browser).\n * Source: http://msdn.microsoft.com/en-us/library/ms537509(v=vs.85).aspx\n * @return {Number} Internet Explorer version, or -1 in case of an other browser\n */\nexport function getInternetExplorerVersion () {\n  if (_ieVersion === -1) {\n    let rv = -1 // Return value assumes failure.\n    if (typeof navigator !== 'undefined' && navigator.appName === 'Microsoft Internet Explorer') {\n      const ua = navigator.userAgent\n      const re = /MSIE ([0-9]+[.0-9]+)/\n      if (re.exec(ua) != null) {\n        rv = parseFloat(RegExp.$1)\n      }\n    }\n\n    _ieVersion = rv\n  }\n\n  return _ieVersion\n}\n\n/**\n * cached internet explorer version\n * @type {Number}\n * @private\n */\nlet _ieVersion = -1\n\n/**\n * Test whether the current browser is Firefox\n * @returns {boolean} isFirefox\n */\nexport function isFirefox () {\n  return (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Firefox') !== -1)\n}\n\n/**\n * Add an event listener. Works for all browsers\n * @param {Element}     element    An html element\n * @param {string}      action     The action, for example \"click\",\n *                                 without the prefix \"on\"\n * @param {function}    listener   The callback function to be executed\n * @param {boolean}     [useCapture] false by default\n * @return {function}   the created event listener\n */\nexport function addEventListener (element, action, listener, useCapture) {\n  if (element.addEventListener) {\n    if (useCapture === undefined) { useCapture = false }\n\n    if (action === 'mousewheel' && isFirefox()) {\n      action = 'DOMMouseScroll' // For Firefox\n    }\n\n    element.addEventListener(action, listener, useCapture)\n    return listener\n  } else if (element.attachEvent) {\n    // Old IE browsers\n    const f = () => listener.call(element, window.event)\n    element.attachEvent('on' + action, f)\n    return f\n  }\n}\n\n/**\n * Remove an event listener from an element\n * @param {Element}  element   An html dom element\n * @param {string}   action    The name of the event, for example \"mousedown\"\n * @param {function} listener  The listener function\n * @param {boolean}  [useCapture]   false by default\n */\nexport function removeEventListener (element, action, listener, useCapture) {\n  if (element.removeEventListener) {\n    if (useCapture === undefined) { useCapture = false }\n\n    if (action === 'mousewheel' && isFirefox()) {\n      action = 'DOMMouseScroll' // For Firefox\n    }\n\n    element.removeEventListener(action, listener, useCapture)\n  } else if (element.detachEvent) {\n    // Old IE browsers\n    element.detachEvent('on' + action, listener)\n  }\n}\n\n/**\n * Test if an element is a child of a parent element.\n * @param {Element} elem\n * @param {Element} parent\n * @return {boolean} returns true if elem is a child of the parent\n */\nexport function isChildOf (elem, parent) {\n  let e = elem.parentNode\n  while (e) {\n    if (e === parent) {\n      return true\n    }\n    e = e.parentNode\n  }\n\n  return false\n}\n\n/**\n * Parse a JSON path like '.items[3].name' into an array\n * @param {string} jsonPath\n * @return {Array}\n */\nexport function parsePath (jsonPath) {\n  const path = []\n  let i = 0\n\n  function parseProperty () {\n    let prop = ''\n    while (jsonPath[i] !== undefined && /[\\w$]/.test(jsonPath[i])) {\n      prop += jsonPath[i]\n      i++\n    }\n\n    if (prop === '') {\n      throw new Error('Invalid JSON path: property name expected at index ' + i)\n    }\n\n    return prop\n  }\n\n  function parseIndex (end) {\n    let name = ''\n    while (jsonPath[i] !== undefined && jsonPath[i] !== end) {\n      name += jsonPath[i]\n      i++\n    }\n\n    if (jsonPath[i] !== end) {\n      throw new Error('Invalid JSON path: unexpected end, character ' + end + ' expected')\n    }\n\n    return name\n  }\n\n  while (jsonPath[i] !== undefined) {\n    if (jsonPath[i] === '.') {\n      i++\n      path.push(parseProperty())\n    } else if (jsonPath[i] === '[') {\n      i++\n\n      if (jsonPath[i] === '\\'' || jsonPath[i] === '\"') {\n        const end = jsonPath[i]\n        i++\n\n        path.push(parseIndex(end))\n\n        if (jsonPath[i] !== end) {\n          throw new Error('Invalid JSON path: closing quote \\' expected at index ' + i)\n        }\n        i++\n      } else {\n        let index = parseIndex(']').trim()\n        if (index.length === 0) {\n          throw new Error('Invalid JSON path: array value expected at index ' + i)\n        }\n        // Coerce numeric indices to numbers, but ignore star\n        index = index === '*' ? index : JSON.parse(index)\n        path.push(index)\n      }\n\n      if (jsonPath[i] !== ']') {\n        throw new Error('Invalid JSON path: closing bracket ] expected at index ' + i)\n      }\n      i++\n    } else {\n      throw new Error('Invalid JSON path: unexpected character \"' + jsonPath[i] + '\" at index ' + i)\n    }\n  }\n\n  return path\n}\n\n/**\n * Stringify an array with a path in a JSON path like '.items[3].name'\n * @param {Array.<string | number>} path\n * @returns {string}\n */\nexport function stringifyPath (path) {\n  return path\n    .map(p => {\n      if (typeof p === 'number') {\n        return ('[' + p + ']')\n      } else if (typeof p === 'string' && p.match(/^[A-Za-z0-9_$]+$/)) {\n        return '.' + p\n      } else {\n        return '[\"' + p + '\"]'\n      }\n    })\n    .join('')\n}\n\n/**\n * Improve the error message of a JSON schema error\n * @param {Object} error\n * @return {Object} The error\n */\nexport function improveSchemaError (error) {\n  if (error.keyword === 'enum' && Array.isArray(error.schema)) {\n    let enums = error.schema\n    if (enums) {\n      enums = enums.map(value => JSON.stringify(value))\n\n      if (enums.length > 5) {\n        const more = ['(' + (enums.length - 5) + ' more...)']\n        enums = enums.slice(0, 5)\n        enums.push(more)\n      }\n      error.message = 'should be equal to one of: ' + enums.join(', ')\n    }\n  }\n\n  if (error.keyword === 'additionalProperties') {\n    error.message = 'should NOT have additional property: ' + error.params.additionalProperty\n  }\n\n  return error\n}\n\n/**\n * Test whether something is a Promise\n * @param {*} object\n * @returns {boolean} Returns true when object is a promise, false otherwise\n */\nexport function isPromise (object) {\n  return object && typeof object.then === 'function' && typeof object.catch === 'function'\n}\n\n/**\n * Test whether a custom validation error has the correct structure\n * @param {*} validationError The error to be checked.\n * @returns {boolean} Returns true if the structure is ok, false otherwise\n */\nexport function isValidValidationError (validationError) {\n  return typeof validationError === 'object' &&\n      Array.isArray(validationError.path) &&\n      typeof validationError.message === 'string'\n}\n\n/**\n * Test whether the child rect fits completely inside the parent rect.\n * @param {ClientRect} parent\n * @param {ClientRect} child\n * @param {number} margin\n */\nexport function insideRect (parent, child, margin) {\n  const _margin = margin !== undefined ? margin : 0\n  return child.left - _margin >= parent.left &&\n      child.right + _margin <= parent.right &&\n      child.top - _margin >= parent.top &&\n      child.bottom + _margin <= parent.bottom\n}\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds.\n *\n * Source: https://davidwalsh.name/javascript-debounce-function\n *\n * @param {function} func\n * @param {number} wait                 Number in milliseconds\n * @param {boolean} [immediate=false]   If `immediate` is passed, trigger the\n *                                      function on the leading edge, instead\n *                                      of the trailing.\n * @return {function} Return the debounced function\n */\nexport function debounce (func, wait, immediate) {\n  let timeout\n  return function () {\n    const context = this; const args = arguments\n    const later = () => {\n      timeout = null\n      if (!immediate) func.apply(context, args)\n    }\n    const callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow) func.apply(context, args)\n  }\n}\n\n/**\n * Determines the difference between two texts.\n * Can only detect one removed or inserted block of characters.\n * @param {string} oldText\n * @param {string} newText\n * @return {{start: number, end: number}} Returns the start and end\n *                                        of the changed part in newText.\n */\nexport function textDiff (oldText, newText) {\n  const len = newText.length\n  let start = 0\n  let oldEnd = oldText.length\n  let newEnd = newText.length\n\n  while (newText.charAt(start) === oldText.charAt(start) &&\n  start < len) {\n    start++\n  }\n\n  while (newText.charAt(newEnd - 1) === oldText.charAt(oldEnd - 1) &&\n  newEnd > start && oldEnd > 0) {\n    newEnd--\n    oldEnd--\n  }\n\n  return { start: start, end: newEnd }\n}\n\n/**\n * Return an object with the selection range or cursor position (if both have the same value)\n * Support also old browsers (IE8-)\n * Source: http://ourcodeworld.com/articles/read/282/how-to-get-the-current-cursor-position-and-selection-within-a-text-input-or-textarea-in-javascript\n * @param {DOMElement} el A dom element of a textarea or input text.\n * @return {Object} reference Object with 2 properties (start and end) with the identifier of the location of the cursor and selected text.\n **/\nexport function getInputSelection (el) {\n  let startIndex = 0; let endIndex = 0; let normalizedValue; let range; let textInputRange; let len; let endRange\n\n  if (typeof el.selectionStart === 'number' && typeof el.selectionEnd === 'number') {\n    startIndex = el.selectionStart\n    endIndex = el.selectionEnd\n  } else {\n    range = document.selection.createRange()\n\n    if (range && range.parentElement() === el) {\n      len = el.value.length\n      normalizedValue = el.value.replace(/\\r\\n/g, '\\n')\n\n      // Create a working TextRange that lives only in the input\n      textInputRange = el.createTextRange()\n      textInputRange.moveToBookmark(range.getBookmark())\n\n      // Check if the startIndex and endIndex of the selection are at the very end\n      // of the input, since moveStart/moveEnd doesn't return what we want\n      // in those cases\n      endRange = el.createTextRange()\n      endRange.collapse(false)\n\n      if (textInputRange.compareEndPoints('StartToEnd', endRange) > -1) {\n        startIndex = endIndex = len\n      } else {\n        startIndex = -textInputRange.moveStart('character', -len)\n        startIndex += normalizedValue.slice(0, startIndex).split('\\n').length - 1\n\n        if (textInputRange.compareEndPoints('EndToEnd', endRange) > -1) {\n          endIndex = len\n        } else {\n          endIndex = -textInputRange.moveEnd('character', -len)\n          endIndex += normalizedValue.slice(0, endIndex).split('\\n').length - 1\n        }\n      }\n    }\n  }\n\n  return {\n    startIndex: startIndex,\n    endIndex: endIndex,\n    start: _positionForIndex(startIndex),\n    end: _positionForIndex(endIndex)\n  }\n\n  /**\n   * Returns textarea row and column position for certain index\n   * @param {Number} index text index\n   * @returns {{row: Number, column: Number}}\n   */\n  function _positionForIndex (index) {\n    const textTillIndex = el.value.substring(0, index)\n    const row = (textTillIndex.match(/\\n/g) || []).length + 1\n    const col = textTillIndex.length - textTillIndex.lastIndexOf('\\n')\n\n    return {\n      row: row,\n      column: col\n    }\n  }\n}\n\n/**\n * Returns the index for certain position in text element\n * @param {DOMElement} el A dom element of a textarea or input text.\n * @param {Number} row row value, > 0, if exceeds rows number - last row will be returned\n * @param {Number} column column value, > 0, if exceeds column length - end of column will be returned\n * @returns {Number} index of position in text, -1 if not found\n */\nexport function getIndexForPosition (el, row, column) {\n  const text = el.value || ''\n  if (row > 0 && column > 0) {\n    const rows = text.split('\\n', row)\n    row = Math.min(rows.length, row)\n    column = Math.min(rows[row - 1].length, column - 1)\n    const columnCount = (row === 1 ? column : column + 1) // count new line on multiple rows\n    return rows.slice(0, row - 1).join('\\n').length + columnCount\n  }\n  return -1\n}\n\n/**\n * Returns location of json paths in certain json string\n * @param {String} text json string\n * @param {Array<String>} paths array of json paths\n * @returns {Array<{path: String, line: Number, row: Number}>}\n */\nexport function getPositionForPath (text, paths) {\n  const result = []\n  let jsmap\n  if (!paths || !paths.length) {\n    return result\n  }\n\n  try {\n    jsmap = jsonMap.parse(text)\n  } catch (err) {\n    return result\n  }\n\n  paths.forEach(path => {\n    const pathArr = parsePath(path)\n    const pointerName = compileJSONPointer(pathArr)\n    const pointer = jsmap.pointers[pointerName]\n    if (pointer) {\n      result.push({\n        path: path,\n        line: pointer.key ? pointer.key.line : (pointer.value ? pointer.value.line : 0),\n        column: pointer.key ? pointer.key.column : (pointer.value ? pointer.value.column : 0)\n      })\n    }\n  })\n\n  return result\n}\n\n/**\n * Compile a JSON Pointer\n * WARNING: this is an incomplete implementation\n * @param {Array.<string | number>} path\n * @return {string}\n */\nexport function compileJSONPointer (path) {\n  return path\n    .map(p => ('/' + String(p)\n      .replace(/~/g, '~0')\n      .replace(/\\//g, '~1')\n    ))\n    .join('')\n}\n\n/**\n * Get the applied color given a color name or code\n * Source: https://stackoverflow.com/questions/6386090/validating-css-color-names/33184805\n * @param {string} color\n * @returns {string | null} returns the color if the input is a valid\n *                   color, and returns null otherwise. Example output:\n *                   'rgba(255,0,0,0.7)' or 'rgb(255,0,0)'\n */\nexport function getColorCSS (color) {\n  const ele = document.createElement('div')\n  ele.style.color = color\n  return ele.style.color.split(/\\s+/).join('').toLowerCase() || null\n}\n\n/**\n * Test if a string contains a valid color name or code.\n * @param {string} color\n * @returns {boolean} returns true if a valid color, false otherwise\n */\nexport function isValidColor (color) {\n  return !!getColorCSS(color)\n}\n\n/**\n * Make a tooltip for a field based on the field's schema.\n * @param {object} schema JSON schema\n * @param {string} [locale] Locale code (for example, zh-CN)\n * @returns {string} Field tooltip, may be empty string if all relevant schema properties are missing\n */\nexport function makeFieldTooltip (schema, locale) {\n  if (!schema) {\n    return ''\n  }\n\n  let tooltip = ''\n  if (schema.title) {\n    tooltip += schema.title\n  }\n\n  if (schema.description) {\n    if (tooltip.length > 0) {\n      tooltip += '\\n'\n    }\n    tooltip += schema.description\n  }\n\n  if (schema.default) {\n    if (tooltip.length > 0) {\n      tooltip += '\\n\\n'\n    }\n    tooltip += translate('default', undefined, locale) + '\\n'\n    tooltip += JSON.stringify(schema.default, null, 2)\n  }\n\n  if (Array.isArray(schema.examples) && schema.examples.length > 0) {\n    if (tooltip.length > 0) {\n      tooltip += '\\n\\n'\n    }\n    tooltip += translate('examples', undefined, locale) + '\\n'\n    schema.examples.forEach((example, index) => {\n      tooltip += JSON.stringify(example, null, 2)\n      if (index !== schema.examples.length - 1) {\n        tooltip += '\\n'\n      }\n    })\n  }\n\n  return tooltip\n}\n\n/**\n * Get a nested property from an object.\n * Returns undefined when the property does not exist.\n * @param {Object} object\n * @param {string[]} path\n * @return {*}\n */\nexport function get (object, path) {\n  let value = object\n\n  for (let i = 0; i < path.length && value !== undefined && value !== null; i++) {\n    value = value[path[i]]\n  }\n\n  return value\n}\n\n/**\n * Find a unique name. Suffix the name with ' (copy)', '(copy 2)', etc\n * until a unique name is found\n * @param {string} name\n * @param {Array} existingPropNames    Array with existing prop names\n */\nexport function findUniqueName (name, existingPropNames) {\n  const strippedName = name.replace(/ \\(copy( \\d+)?\\)$/, '')\n  let validName = strippedName\n  let i = 1\n\n  while (existingPropNames.indexOf(validName) !== -1) {\n    const copy = 'copy' + (i > 1 ? (' ' + i) : '')\n    validName = strippedName + ' (' + copy + ')'\n    i++\n  }\n\n  return validName\n}\n\n/**\n * Get the child paths of an array\n * @param {JSON} json\n * @param {boolean} [includeObjects=false] If true, object and array paths are returned as well\n * @return {string[]}\n */\nexport function getChildPaths (json, includeObjects) {\n  const pathsMap = {}\n\n  function getObjectChildPaths (json, pathsMap, rootPath, includeObjects) {\n    const isValue = !Array.isArray(json) && !isObject(json)\n\n    if (isValue || includeObjects) {\n      pathsMap[rootPath || ''] = true\n    }\n\n    if (isObject(json)) {\n      Object.keys(json).forEach(field => {\n        getObjectChildPaths(json[field], pathsMap, rootPath + '.' + field, includeObjects)\n      })\n    }\n  }\n\n  if (Array.isArray(json)) {\n    const max = Math.min(json.length, MAX_ITEMS_FIELDS_COLLECTION)\n    for (let i = 0; i < max; i++) {\n      const item = json[i]\n      getObjectChildPaths(item, pathsMap, '', includeObjects)\n    }\n  } else {\n    pathsMap[''] = true\n  }\n\n  return Object.keys(pathsMap).sort()\n}\n\n/**\n * Sort object keys using natural sort\n * @param {Array} array\n * @param {String} [path] JSON pointer\n * @param {'asc' | 'desc'} [direction]\n */\nexport function sort (array, path, direction) {\n  const parsedPath = path && path !== '.' ? parsePath(path) : []\n  const sign = direction === 'desc' ? -1 : 1\n\n  const sortedArray = array.slice()\n  sortedArray.sort((a, b) => {\n    const aValue = get(a, parsedPath)\n    const bValue = get(b, parsedPath)\n\n    return sign * (aValue > bValue ? 1 : aValue < bValue ? -1 : 0)\n  })\n\n  return sortedArray\n}\n\n/**\n * Sort object keys using natural sort\n * @param {Object} object\n * @param {'asc' | 'desc'} [direction]\n */\nexport function sortObjectKeys (object, direction) {\n  const sign = (direction === 'desc') ? -1 : 1\n  const sortedFields = Object.keys(object).sort((a, b) => sign * naturalSort(a, b))\n\n  const sortedObject = {}\n  sortedFields.forEach(field => {\n    sortedObject[field] = object[field]\n  })\n\n  return sortedObject\n}\n\n/**\n * Cast contents of a string to the correct type.\n * This can be a string, a number, a boolean, etc\n * @param {String} str\n * @return {*} castedStr\n * @private\n */\nexport function parseString (str) {\n  if (str === '') {\n    return ''\n  }\n\n  const lower = str.toLowerCase()\n  if (lower === 'null') {\n    return null\n  }\n  if (lower === 'true') {\n    return true\n  }\n  if (lower === 'false') {\n    return false\n  }\n\n  const num = Number(str) // will nicely fail with '123ab'\n  const numFloat = parseFloat(str) // will nicely fail with '  '\n  if (!isNaN(num) && !isNaN(numFloat)) {\n    return num\n  }\n\n  return str\n}\n\n/**\n * Test whether some field contains a timestamp in milliseconds after the year 2000.\n * @param {string} field\n * @param {number} value\n * @return {boolean}\n */\nexport function isTimestamp (field, value) {\n  return typeof value === 'number' &&\n    value > YEAR_2000 &&\n    isFinite(value) &&\n    Math.floor(value) === value &&\n    !isNaN(new Date(value).valueOf())\n}\n\n/**\n * Return a human readable document size\n * For example formatSize(7570718) outputs '7.6 MB'\n * @param {number} size\n * @return {string} Returns a human readable size\n */\nexport function formatSize (size) {\n  if (size < 900) {\n    return size.toFixed() + ' B'\n  }\n\n  const KB = size / 1000\n  if (KB < 900) {\n    return KB.toFixed(1) + ' KB'\n  }\n\n  const MB = KB / 1000\n  if (MB < 900) {\n    return MB.toFixed(1) + ' MB'\n  }\n\n  const GB = MB / 1000\n  if (GB < 900) {\n    return GB.toFixed(1) + ' GB'\n  }\n\n  const TB = GB / 1000\n  return TB.toFixed(1) + ' TB'\n}\n\n/**\n * Limit text to a maximum number of characters\n * @param {string} text\n * @param {number} maxCharacterCount\n * @return {string} Returns the limited text,\n *                  ending with '...' if the max was exceeded\n */\nexport function limitCharacters (text, maxCharacterCount) {\n  if (text.length <= maxCharacterCount) {\n    return text\n  }\n\n  return text.slice(0, maxCharacterCount) + '...'\n}\n\n/**\n * Test whether a value is an Object\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject (value) {\n  return typeof value === 'object' && value !== null && !Array.isArray(value)\n}\n\n/**\n * Helper function to test whether an array contains an item\n * @param {Array} array\n * @param {*} item\n * @return {boolean} Returns true if `item` is in `array`, returns false otherwise.\n */\nexport function contains (array, item) {\n  return array.indexOf(item) !== -1\n}\n\n/**\n * Checks if validation has changed from the previous execution\n * @param {Array} currErr current validation errors\n * @param {Array} prevErr previous validation errors\n */\nexport function isValidationErrorChanged (currErr, prevErr) {\n  if (!prevErr && !currErr) { return false }\n  if ((prevErr && !currErr) || (!prevErr && currErr)) { return true }\n  if (prevErr.length !== currErr.length) { return true }\n\n  for (let i = 0; i < currErr.length; ++i) {\n    let pErr\n    if (currErr[i].type === 'error') {\n      pErr = prevErr.find(p => p.line === currErr[i].line)\n    } else {\n      pErr = prevErr.find(p => p.dataPath === currErr[i].dataPath && p.schemaPath === currErr[i].schemaPath)\n    }\n    if (!pErr) {\n      return true\n    }\n  }\n\n  return false\n}\n\nfunction hasOwnProperty (object, key) {\n  return Object.prototype.hasOwnProperty.call(object, key)\n}\n"], "fixing_code": ["# JSON Editor - History\n\nhttps://github.com/josdejong/jsoneditor\n\n\n## not yet published, version 9.5.6\n\n- Fix inefficient regex to replace return characters. \n\n\n## 2021-09-01, version 9.5.5\n\n- Fix `setMode` not throwing an exception anymore in case of a parse error\n  (regression since `9.5.4`).\n\n\n## 2021-08-25, version 9.5.4\n\n- Use `noreferrer` for window.open, see #1365. Thanks @rajitbanerjee.\n- Fix #1363: parsing error contains html characters.\n- Fix opening the Transform or Sort modal in code mode with invalid JSON \n  contents not triggering the `onError` callback (see #1364).\n- Change the default behavior of error handling to open a basic alert instead\n  of logging the error in the console (see #1364).\n\n\n## 2021-07-28, version 9.5.3\n\n- Fix #1356: background of tree mode is transparent instead of white.\n- Fix #473: enum dropdown not working on referenced schemas and templates,\n  see #1355. Thanks @mpccolorado.\n\n\n## 2021-07-22, version 9.5.2\n\n- Fix #675: Relative image urls in CSS replaced with absolute urls by build \n  script, see #1354. Thanks @esulu.\n\n\n## 2021-06-30, version 9.5.1\n\n- Upgrade to `jsonrepair@2.2.1`.\n\n\n## 2021-06-05, version 9.5.0\n\n- Implemented new method `JSONEditor.validate(): Promise<ValidationError[]>`.\n  Thanks @ChrisAcrobat.\n\n\n## 2021-06-02, version 9.4.2\n\n- Fix #1311: exception being thrown under certain conditions when switching \n  from `code` mode to `preview` mode.\n- Rename spin animation of `selectr` to prevent conflicts with tailwind, \n  see #1333. Thanks @mdix.\n\n\n## 2021-04-25, version 9.4.1\n\n- Improvements in the Korean translation. Thanks @luasenvy.\n\n\n## 2021-04-17, version 9.4.0\n\n- Added Korean translation. Thanks @luasenvy.\n- Added Spanish translation. Thanks @joabac.\n- Fix #1282: JSON schema enum dropdown not working for conditionals like \n  `oneOf`, `anyOf`, `allOf`. Thanks @maufl.\n- Fix #1307: losing caret position when calling `refresh()` during `onChange`\n  callback.\n\n\n## 2021-04-10, version 9.3.1\n\n- Introduced a new sass variable `$jse-icons-url`, see #1268. Thanks @ppetkow.\n\n\n## 2021-04-01, version 9.3.0\n\n- Improved Russian translation. Thanks @PunKHS.\n- Upgraded dependencies to `jsonrepair@2.1.0`.\n\n\n## 2021-02-24, version 9.2.0\n\n- Added Russian translation. Thanks @PunKHS.\n- Changed shortcut keys for Format and Compact in code mode from `Ctrl+\\` and\n  `Ctrl+Shift+\\` to `Ctrl+I` and `Ctrl+Shift+I` respectively, because not all\n  browsers and operating systems support this key combination.\n\n\n## 2021-02-14, version 9.1.10\n\n- Fixed resolving a JSON schema reference linking to an other schema, see #1239.\n  Thanks @Hagartinger.\n- Upgraded to latest dependencies (`vanilla-picker@2.11.2`).\n\n\n## 2021-01-23, version 9.1.9\n\n- Fix `jsoneditor-minimalist` bundle being too large. Regression since `v9.1.5` \n  (caused by a recent upgrade to Webpack 5). Thanks @cbmgit.\n\n\n## 2021-01-16, version 9.1.8\n\n- Replaced `simple-json-repair` with `jsonrepair` (library was renamed).\n\n\n## 2020-12-30, version 9.1.7\n\n- Fix #1206: library bundle broken on IE 11, regression introduced in v9.1.6.\n\n\n## 2020-12-23, version 9.1.6\n\n- Fix #1192: enum dropdown from a JSON schema not rendered when using\n  `additionalProperties`. Thanks @maufl.\n- Fix #1191: clarify docs about configuration option `ajv`.\n- Fix #1193: simplify and fix example 20_custom_css_style_for_nodes.html.\n\n\n## 2020-12-14, version 9.1.5\n\n- Fix #1185: enum dropdown not selecting actual value when this is not a string.\n- Fix selected value of enum dropdown not updated when changed programmatically. \n\n\n## 2020-11-23, version 9.1.4\n\n- Fix #1119: list of keys in navigation bar missing a scroll bar. \n  Thanks @tanmayrajani.\n\n\n## 2020-11-19, version 9.1.3\n\n- Fix #1158: JSON schema_findSchema not found if using internal references. Thanks @maufl.\n- Update dependencies: `vanilla-picker@2.11.0`.\n\n\n## 2020-11-07, version 9.1.2\n\n- Fix #1126: fire `onEvent` for boolean checkbox and enum selectbox too.\n- Log a clear error in the console when the returned value of `onEditable` is \n  invalid. See #1112.\n- Updated dependency to `ajv@6.12.6`.\n- Extract the JSON repair functionality into a separate, \n  library `simple-json-repair` with many improvements.\n\n\n## 2020-09-23, version 9.1.1\n\n- Fix #1111: Enum dropdown not showing when using patternProperties for schema.\n  Thanks @ziga-miklic.\n- Fixed JSONEditor not working when opened in a new window, see #1098.\n  Thanks @joshkel.\n- Fix quick-key `Ctrl+D` (duplicate) not working.\n- Define \"charset: utf-8\" in all HTML examples.\n\n\n## 2020-09-15, version 9.1.0\n\n- Implemented German translation (`de`). Thanks @s-a.\n- Fix quick-keys `Ctrl-\\` (format) and `Ctrl-Shift-\\` (compact) not working\n  in `code` mode.\n- Updated dependencies to `ajv@6.12.5`.\n\n\n## 2020-09-09, version 9.0.5\n\n- Fix #1090: autocomplete firing on dragging or clicking a node.\n- Fix #1096: editor crashing when passing an empty string as `name`.\n- Updated dependencies to `ajv@6.12.4`.\n\n\n## 2020-08-15, version 9.0.4\n\n- Updated dependencies to `ace-builds@1.4.12`, `ajv@6.12.3`.\n- Fix #1077: change the `main` field in `package.json` to point to the actual\n  bundled and minified file instead of a node.js index file.\n\n\n## 2020-07-02, version 9.0.3\n\n- Fix regression introduced in `v9.0.2` in the select boxes in the \n  Transform model not lighlighting the matches correctly.\n\n\n## 2020-07-01, version 9.0.2\n\n- Fix #1029: XSS vulnerabilities. Thanks @onemoreflag for reporting.\n- Fix #1017: unable to style the color of a value containing a color.\n  Thanks @p3x-robot. \n\n\n## 2020-06-24, version 9.0.1\n\n- Fixed broken link to the Ace editor website (https://ace.c9.io/).\n  Thanks @p3x-robot.\n- Fix #1027: create IE11 Array polyfills `find` and `findIndex` in such a way \n  that they are not iterable.\n\n\n## 2020-05-24, version 9.0.0\n\n- Implemented option `limitDragging`, see #962. This is a breaking change when \n  using a JSON schema: dragging is more restrictive by default in that case.\n  Set `limitDragging: false` to keep the old, non-restricted behavior.\n\n\n## 2020-05-13, version 8.6.8\n\n- Fix #936: too many return characters inserted when pasting formatted text\n  from OpenOffice.\n\n\n## 2020-05-10, version 8.6.7\n\n- Fix #858: the `dist/jsoneditor.js` bundle containing a link to a \n  non-existing source map.\n- Fix #978: in some special cases the caret was jumping to the beginning of the \n  line whilst typing.\n- Update dependencies to `ajv@6.12.2`.\n\n\n## 2020-04-21, version 8.6.6\n\n- Fix #969: adding a new property to an empty object or array is broken.\n  Regression introduced in `v8.6.5`.\n\n\n## 2020-04-19, version 8.6.5\n\n- Fix #964: translation of titles of some context menu items not working.\n- Update dependencies to `ace-builds@1.4.11`, `ajv@6.12.1`.\n\n\n## 2020-03-29, version 8.6.4\n\n- Fix #921: `sortObjectKeys` emits `onChange` events.\n- Fix #946: `language` not working in modes `text`, `code`, and `preview`.\n- Revert reckoning with the order of object properties when updating an\n  object (introduced in `v8.6.2`). See #917. \n- Implement support for repairing line separate JSON. \n\n\n## 2020-03-18, version 8.6.3\n\n- Fix #932: `JSONEditor.update` broken, did not always recognize when the \n  input changed. Regression introduced in `v8.6.2`. \n\n\n## 2020-03-18, version 8.6.2\n\n- Fixed #917, #926: Keep order of properties when updating an object.  \n- Fixed #928: Custom root name not reflected in path of navigation bar.\n- Upgraded to `ajv@6.12.0`\n\n\n## 2020-02-17, version 8.6.1\n\n- Fixed #908: editor throwing an exception when switching from `'preview'`\n  to `'code'` mode.\n\n\n## 2020-02-16, version 8.6.0\n\n- Fixed #906: Implemented turning Python objects containing `True`, `False` \n  and `None` into valid JSON using repair.\n\n\n## 2020-02-06, version 8.5.3\n\n- Fix #892: the undo/redo buttons in mode `code` being broken when custom \n  loading an old version of Ace Editor.\n\n\n## 2020-02-05, version 8.5.2\n\n- Fix undo/redo buttons in mode `code` not always updating.\n\n\n## 2020-02-05, version 8.5.1\n\n- Fix broken build.\n\n\n## 2020-02-05, version 8.5.0\n\n- Implemented support for customizing the query language used in the \n  Transform modal. New options `createQuery`, `executeQuery`, and \n  `queryDescription` are available for this now. An example is available\n  in `examples/23_custom_query_language.html`. See #857, #871.\n- Implement undo/redo buttons in `code` mode.\n- Fix history (undo/redo) being cleared in mode `code` and `text` after \n  transforming or sorting.\n\n\n## 2020-01-25, version 8.4.1\n\n- Fix `console.log` in production code. Oopsie.\n\n\n## 2020-01-25, version 8.4.0\n\n- Added CSS classes `jsoneditor-expanded` and `jsoneditor-collapsed` on array \n  and object nodes reflecting there state.\n\n\n## 2020-01-18, version 8.3.0\n\n- Update dependency `ajv` to `v6.11.0`. \n- Fix #790: editor breaking when missing a translation containing a \n  placeholder.\n\n\n## 2020-01-16, version 8.2.0\n\n- Make it easy to create custom styling by overriding default SASS variable \n  values, see #881. Thanks @petermanders89.\n- Update `ace` to `v1.4.8`.\n\n\n## 2020-01-06, version 8.1.2\n\n- Fix #873: buttons Format, Compact, and Repair not supporting \n  internationalization.\n- Fix #877: Some CSS styling issues when used in combination with Materialize.\n- Updated dependency `vanilla-picker` to `v2.10.1`.\n\n\n## 2019-12-28, version 8.1.1\n\n- Fixed the file size reported in `preview` mode show `KB` and `MB` instead\n  of `KiB` and `MiB` in order to match the size reported by filesystems.\n\n\n## 2019-12-18, version 8.1.0\n\n- Implemented `popupAnchor` allowing to select a custom anchor element. \n  See #869 and #870.  \n- Fixed #502: CSS rule `* { font-family: ... }` resulting in Ace editor (`code` \n  mode) not having a mono-space font anymore.\n\n\n## 2019-12-11, version 8.0.0\n\n- Implemented option `timestampFormat` which allows customizing the formatting\n  of timestamp tags. See also option `timestampTag`. Thanks @smallp.\n- Changed the behavior of `timestampTag` to fallback on the built-in rules when\n  the function does not return a boolean. See #856.  \n- Reverted the heuristics introduced in `v7.3.0` to check whether some field\n  contains a timestamp based on the field name, because they can give wrong \n  timestamps in case of values in seconds instead of the assumed milliseconds \n  (see #847, #856). \n\n\n## 2019-12-08, version 7.5.0\n\n- Extended the callback `onValidationError` to also report parse errors,\n  and distinguish between JSON schema validation errors and custom errors.\n  See #861 and #612. Thanks @meirotstein.\n\n\n## 2019-12-01, version 7.4.0\n\n- Implemented callback function `onValidationError`, see #612, #854. \n  Thanks @meirotstein.\n- Fixed #850: make autocomplete options robust against non-string inputs\n  like `null`, `123`, `true`, `false`. \n\n\n## 2019-12-01, version 7.3.1\n\n- Fixed #855: `onFocus` and `onBlur` not working in modes `text` and `code` \n  when editor was created without main menu bar, and `editor.destroy()` \n  throwing an exception.\n\n\n## 2019-11-27, version 7.3.0\n\n- Implemented callbacks `onFocus` and `onBlur` (PR #809, issue #727). \n  Thanks @123survesh.\n- Fixed #847: allow customizing the in rules determining whether a value\n  is a timestamp or not by passing a callback function to `timestampTag`.\n\n\n## 2019-10-27, version 7.2.1\n\n- Fixed #826: editor not allowing indentation `0`.\n- Fixed #828: do not expand/collapse when clicking the text of a node\n  in modes `view` or `form`.\n- Fixed #829: z-index issue of context-menu button and conflicting css names.\n\n\n## 2019-10-23, version 7.2.0\n\n- Implemented Japanese translation (`ja`). Thanks @yutakiyama.\n- Implemented French translation (`fr-FR`), and some improvements in the\n  translation. Thanks @yannickyvin.\n- Upgraded to the latest version of Ace editor, 1.4.7.\n- Fixed #824: Parse errors not displayed with bottom right error icon in modes\n  `code` and `text`.\n\n\n## 2019-10-13, version 7.1.0\n\n- Upgraded to the latest version of Ace editor 1.4.6. Changed implementation\n  to use `ace-builds` directly instead of `brace` (still using Ace 1.2.9).\n- Improved Portuguese translation. Thanks @victorananias.\n\n\n## 2019-10-06, version 7.0.5\n\n- Upgraded dependencies: `vanilla-picker@2.10.0`.\n- Minor documentation improvements. Thanks @slash-arun.\n- Minor styling fixes.\n\n\n## 2019-09-11, version 7.0.4\n\n- Fixed #723: schema error popup and color picker not always fully visible.\n- Fixed wrong text color in search box when using JSONEditor in combination\n  with bootstrap. See #791. Thanks @dmitry-kulikov.\n- Fixed react examples not working out of the box when cloning or downloading\n  the git repository of JSONEditor. See #787, #788. Thanks @vishwasnavadak.\n\n\n## 2019-09-04, version 7.0.3\n\n- Fixed `index.js` pointing to non-transpiled code. See #783.\n- Fixed absolute url of images in SASS. Thanks @moonbreezee.\n\n\n## 2019-09-02, version 7.0.2\n\n- Fix #781: race condition when destroying the editor right after setting data.\n\n\n## 2019-09-01, version 7.0.1\n\n- Fix npm package missing `dist` folder.\n\n\n## 2019-09-01, version 7.0.0\n\n- Converted the code largely to ES6, put Babel transpiler in place.\n- Dropped support for bower, removed the `dist` folder from the git repository.\n- Fixed #586: caret position lost when switching browser tabs.\n\n\n## 2019-08-28, version 6.4.1\n\n- Fix styling of autocompletion dropdown broken. Regression since `v6.4.0`.\n\n\n## 2019-08-28, version 6.4.0\n\n- Replaces CSS with SASS internally, improvements in styling. Thanks @ppetkow.\n- Fixed #761: JSON schema errors not rendered in the gutter for mode `code`\n  when the path contained a property with a forward slash, and errors not\n  clickable in the error table.\n- Fixed #777: option `sortObjectKeys` broken.\n\n\n## 2019-08-15, version 6.3.0\n\n- Fixed #755: JSONEditor throwing an exception in mode `code`, `text`, and\n  `preview` when `statusBar: false`.\n- When duplicating an object property, move focus to the field and do not\n  immediately add the ` (copy)` suffix. See #766.\n- Fixed #769: option `name` not working anymore. Regression since `v6.1.0`.\n- Fixed #763: `autocomplete.trigger: 'focus'` throws an error when opening the\n  context menu. Thanks @Thaina.\n- Updated dependencies `json-source-map@0.6.1`\n\n\n## 2019-08-01, version 6.2.1\n\n- Updated Chinese translation. Thanks @SargerasWang.\n\n\n## 2019-07-28, version 6.2.0\n\n- Implemented new mode `preview`, capable of working with large JSON documents\n  up to 500 MiB.\n- Repair button is now capable of turning MongoDB documents into valid JSON.\n- Fixed #730: in `code` mode, there was an initial undo action which clears\n  the content.\n- Upgraded dependencies `vanilla-picker@2.9.2`, `mobius1-selectr@2.4.13`,\n  `ajv@6.10.2`.\n\n\n## 2019-06-22, version 6.1.0\n\n- Implemented menu options `sort` and `transform` for modes `code` and `text`.\n- Implemented new context menu item `extract`.\n- Minor tweaks in the way paths are displayed in the sort and transform modals.\n\n\n## 2019-06-12, version 6.0.0\n\n- Breaking change: upgraded dependency `ajv@6.10.0`, supporting JSON schema\n  draft-07 alongside draft-06 and draft-04.\n- Upgraded dependency `vanilla-picker@2.8.1`.\n- Use JSON schema title as name for the root object if defined (see #635).\n\n\n## 2019-06-08, version 5.34.0\n\n- Extended the autocomplete feature with new options `filter` and `trigger`.\n  Thanks @Gcaufy.\n- Removed :hover style on disabled buttons. Thanks @Gcaufy.\n- Upgraded dependency `mobius1-selectr@2.4.12`.\n\n\n## 2019-05-29, version 5.33.0\n\n- Fixed #697: JSON Schema enum dropdown not working inside an array.\n- Fixed #698: When using `onCreateMenu`, `node.path` is null when clicking\n  on an append node or when multiple nodes are selected.\n- Upgraded dependencies to `mobius1-selectr@2.4.10`, `vanilla-picker@2.8.0`.\n- Remove :hover style on disabled buttons. Thanks @Gcaufy.\n\n\n## 2019-04-27, version 5.32.5\n\n- Fixed a bug in the JMESPath query wizard which didn't correctly handle\n  selecting multiple fields.\n- Fixed context menu not working when multiple nodes are selected.\n\n\n## 2019-04-10, version 5.32.4\n\n- Fixed #682 and #687: JSONEditor not being able to handle JSON schema\n  validation errors when the root of the document is an Array. Thanks @DusuWen.\n\n\n## 2019-04-04, version 5.32.3\n\n- Fixed #684: `const` used in bundled library.\n\n\n## 2019-04-03, version 5.32.2\n\n- Fixed #416: Clipped action menu for append nodes.\n- Improve detection of value type in transform modal.\n- Styling improvements in the transform modal.\n- Fix CSS class for default/non-default schema values not applied to enums,\n  see (#666).\n- Fixed #671: Improved handling of duplicate property names, which could cause\n  values to be cleared when used as a controlled component in for example React.\n\n\n## 2019-03-28, version 5.32.1\n\n- Fixed a regression in parsing JSON paths: numbers where parsed as strings\n  instead of a numeric value. See #679. Thanks @AdamVig.\n- Fixed using hyphens in the path of custom validation errors (see #665).\n  Thanks @tobiasfriden.\n\n\n## 2019-03-20, version 5.32.0\n\n- Implemented support for reckoning with JSON schema default values: custom\n  styling can be applied for default and non-default values. Thanks @AdamVig.\n- Fixed #667: resolving JSON Schema examples and descriptions did not always\n  work for referenced schemas. Thanks @AdamVig.\n- Fixed #676: JSON Paths containing array properties with a `]` not parsed\n  correctly.\n\n\n## 2019-03-14, version 5.31.1\n\n- Fix IE11 issue.\n- Some fixes in the Simplified Chinese translation.\n  Thanks @@adf0001 and @yuxizhe.\n\n\n## 2019-03-10, version 5.31.0\n\n- Display JSON schema examples in tooltip (#664). Thanks @AdamVig.\n\n\n## 2019-03-02, version 5.30.0\n\n- Implemented a new option `onCreateMenu` to customize the action menu.\n  Thanks @RobAley.\n\n\n## 2019-02-20, version 5.29.1\n\n- Fixed #661: JSONEditor broken on IE11 caused by duplicate JSON entries\n  in a translation.\n\n\n## 2019-02-16, version 5.29.0\n\n- Added Simplified Chinese localization. Thanks @long2ice.\n- Added Turkish localization. Thanks @beratpostalci.\n- Improved JSON schema titles on fields. Fixes #321. Thanks @AdamVig.\n- Fixes in resolving JSON schemas, see #651. Thanks @AdamVig.\n- Fix #657: `onClassName` throwing an error when a node is removed.\n\n\n## 2019-01-23, version 5.28.2\n\n- Fix #639: Occurrence of non-ES5 `const` declaration in published code.\n  Regression introduced in `v5.28.0`.\n\n\n## 2019-01-22, version 5.28.1\n\n- Fix #637: Vertical white border left/right from the main menu in some\n  specific circumstances.\n- Fix #638: Cannot expand after collapse. Regression introduced in v5.28.0.\n\n\n## 2019-01-21, version 5.28.0\n\n- Implemented new option `maxVisibleChilds` to customize the maximum number\n  childs that is rendered by default. Thanks @20goto10.\n- Implemented new option `onClassName`, allowing customized and dynamic\n  styling of nodes. See 20_custom_css_style_for_nodes.html for a demo.\n  Thanks @maestr0.\n- Make the method `refresh()` public.\n\n\n## 2019-01-16, version 5.27.1\n\n- Improved navigating deeply nested paths via the navigation bar, see #619.\n  Thanks @meirotstein.\n- Sdd title from schema description to show the tips for user input.\n  Thanks @tylerchen.\n- Fix JSON Schema not resolving refs `$ref`, and not creating enum dropdowns.\n  Thanks @tylerchen.\n\n\n## 2019-01-05, version 5.27.0\n\n- Implemented customizing object and array names via a new option\n  `onNodeName`. Thanks @bnanchen.\n- Visibility of schema validation errors at the bottom of mode code and text\n  are now toggleable. Thanks @meirotstein.\n- Fixed text of the mode switcher not being translated. Thanks @antfu.\n\n\n## 2018-12-06, version 5.26.3\n\n- Fixed #610: JSON Repair now removes trailing commas.\n- Upgraded devDependency `gulp` to v4. Thanks @maestr0.\n\n\n## 2018-11-13, version 5.26.2\n\n- Fixed dragging and selecting multiple nodes not working\n  (regression introduced in `v5.26.1`).\n\n\n## 2018-11-13, version 5.26.1\n\n- Fixed `.update()` throwing an exception when replacing a JSON object\n  with `null`. Thanks @DullReferenceException.\n- Fixed #598: Search field can't be focused in object view.\n\n\n## 2018-11-12, version 5.26.0\n\n- Implemented option `mainMenuBar` to enable/disable the main menu bar.\n  Thanks @tanmayrajani.\n\n\n## 2018-10-29, version 5.25.0\n\n- Implemented options `enableSort` and `enableTransform` so you can turn off\n  these features. Thanks @tanmayrajani.\n- Fixed #590: validation failing in code and text mode when status\n  bar is disabled.\n- Fixed #589: the path in the navigation bar is not updated\n  when duplicating or removing a node, and neither after an undo/redo action.\n- Fixed duplicate and remove of the action menu of multiple selected\n  nodes not working.\n- Fixed not preventing default selection of text when selecting nodes.\n- Fixed #595: navigation bar path link not working.\n\n\n## 2018-10-08, version 5.24.7\n\n- Fix #582: parse error annotations not always up to date in\n  code editor. Thanks @meirotstein.\n\n\n## 2018-09-12, version 5.24.6\n\n- Fix #548: `import JSONEditor from 'jsoneditor'` not working in\n  TypeScript projects (gave a constructor is undefined error).\n\n\n## 2018-09-06, version 5.24.5\n\n- Fixed a bug in textmode on IE 11, not loading the editor when\n  `Promise` is undefined.\n\n\n## 2018-09-06, version 5.24.4\n\n- Fixed #576: Visualization in mode `view` when an array\n  with more than 100 items is rendered.\n- Fixed JSONEditor not working on IE11: continue and throw console\n  errors when `Promise` is undefined. Regression since `v5.23.0`.\n- Fixed `onClose` of color picker not being fired when clicking outside\n  the picker to close it.\n- Upgraded dependencies `brace`, `mobius1-selectr`, `vanilla-picker`.\n- Upgraded devDependency `mocha`.\n\n\n## 2018-08-29, version 5.24.3\n\n- Fixed color picker not working in ES6 projects.\n- Fixed color picker closing immediately after the first `onChange`\n  event, and `onChange` events are now debounced like all text inputs.\n\n\n## 2018-08-27, version 5.24.2\n\n- Improved error and validation messaging in `text` mode.\n  Thanks @meirotstein.\n  - Clicking a message now selects the line where the error occurs.\n  - Icon bottom right showing when there are warnings or errors.\n- Fixed field still editable after moving a node from an object\n  to an array, changing the field from a property into an index.\n\n\n## 2018-08-26, version 5.24.1\n\n- Context menu and color picker are now absolutely positioned, and\n  can overflow the borders of the editor.\n- Fixed #568: mode switcher disappearing when selecting the current\n  mode again.\n- Fixed `transform` not creating/removing expand button when the type\n  of a node changed.\n\n\n## 2018-08-22, version 5.24.0\n\n- Implemented a color picker, and allow hooking in a custom color\n  picker. new options are `colorPicker` and `onColorPicker`.\n- Implemented a timestamp tag displayed right from timestamps,\n  with corresponding option `timestampTag`.\n\n\n## 2018-08-17, version 5.23.1\n\n- Fixed #566: transform function broken, regression since `v5.20.0`.\n\n\n## 2018-08-15, version 5.23.0\n\n- Implemented support for custom validation using a new `onValidate` callback.\n- In tree mode, nodes containing a validation error now have a className\n  `jsoneditor-validation-error` which can be used for custom styling.\n\n\n## 2018-08-13, version 5.22.0\n\n- Implemented `onEvent` callback triggered when an event occurs in a JSON\n  field or value. Thanks @cristinabarrantes.\n\n\n## 2018-08-12, version 5.21.0\n\n- Show validation errors inline instead of at the bottom when in code\n  mode. Thanks @meirotstein.\n- Fix #562: allow `$` character in property names of of a JSON schema.\n\n\n## 2018-08-10, version 5.20.0\n\n_Good news: JSONEditor is finally framework friendly and can now be easily\nintegrated in React, Vue, and Angular!_\n\n- Implemented new methods `update` and `updateText`, which maintain the state\n  of the editor (expanded nodes, search, selection). This makes it easy to\n  integrate in frameworks like React.\n- Implemented options `onChangeJSON(json)` and `onChangeText(jsonString)`.\n- Added two React examples to the `examples` folder.\n- Fixed menu buttons \"Sort\" and \"Transform\" being available in modes `view`\n  and `form`.\n\n\n## 2018-08-02, version 5.19.2\n\n- Fixed #558: scrolling to search results and automatically scrolling up/down\n  when dragging an item broken (regression since v5.19.1).\n\n\n## 2018-07-28, version 5.19.1\n\n- Fixed #557: inner contents of the scrollable area being displayed outside of\n  the editor (on Chrome only).\n\n\n## 2018-07-11, version 5.19.0\n\n- No more grayed out icons of the context menu, see #532.\n- Added Sort and Transform buttons to the main menu.\n- Fixes and improvements in the Transform dialog.\n\n\n## 2018-06-27, version 5.18.0\n\n- Implemented JMESPath support for advanced filtering, sorting, and\n  transforming of JSON documents.\n- Implemented a new option `modalAnchor` to control at which part of the\n  screen the modals are displayed.\n- Fixed #544: JSON Schema errors sometimes not being displayed in the\n  editor.\n\n\n## 2018-06-03, version 5.17.1\n\n- Fixed a bug in a translation text.\n\n\n## 2018-06-03, version 5.17.0\n\n- Implemented advanced sorting for arrays.\n\n\n## 2018-05-23, version 5.16.0\n\n- Better handling of JSON documents containing large arrays:\n  - Only displays the first 100 items of large arrays,\n    with buttons \"show more\" and \"show all\" to render more items.\n  - Search results are now limited to max 1000 matches,\n    and search does no longer expand the paths to all matches\n    but only expands the path of the current search result.\n- Fixed index numbers of Array items not being updated after sorting.\n\n\n## 2018-05-02, version 5.15.0\n\n- Implemented selection API: `onSelectionChanged`, `onTextSelectionChanged`,\n  `getSelection`, `getTextSelection`, `setSelection`, `setTextSelection`,\n  and `getNodesByRange`. Thanks @meirotstein.\n\n\n## 2018-03-21, version 5.14.1\n\n- Fixed absolute path of css image `jsoneditor-icons.svg`, which could.\n  give issues with webpack plugin \"file-loader\". Thanks @landru29.\n\n\n## 2018-02-25, version 5.14.0\n\n- Implemented support for translations. Thanks @mariohmol.\n- Fixed a bug sometimes occurring when dragging items from array to\n  object, see #509. Thanks @43081j.\n- Fixed autocomplete not accepting returned `null` values, see #512.\n  Thanks @43081j.\n- Fixed memory inefficiency when working with large JSON Schema's\n  generating many errors. Thanks @43081j.\n\n\n## 2018-02-07, version 5.13.3\n\n- Fixed a positioning issue with JSON Schema errors in text/code mode.\n\n\n## 2018-01-18, version 5.13.2\n\n- Fixed view mode opening links in a new tab instead of current tab\n  when Ctrl key is not down. Thanks @LEW21.\n- Fixed #502: code editor not showing a monospaced font some cases.\n\n\n## 2017-12-28, version 5.13.1\n\n- Fixed another occurrence of #494: properties not escaped in the\n  navigation bar.\n\n\n## 2017-12-28, version 5.13.0\n\n- Implemented cursor position in text mode. Thanks @meirotstein.\n- Fixed #494: properties not escaped in the navigation bar.\n  Thanks @meirotstein.\n\n\n## 2017-12-18, version 5.12.0\n\n- Implemented #482: Include `caseSensitive` option for autocomplete.\n  Thanks @israelito3000.\n- Upgraded dependencies\n  - `ajv@5.5.2`\n\n\n## 2017-11-22, version 5.11.0\n\n- Upgraded dependencies\n  - `ajv@5.4.0`\n  - `brace@0.11.0`\n- Fixed dropdown for JSON Schema enums when defined inside pattern\n  properties. Thanks @alquist.\n- Fixed code containing a non UTF-8 character. Thanks @alshakero.\n\n\n## 2017-11-15, version 5.10.1\n\n- Some styling tweaks in the navigation bar and status bar.\n- Don't display status bar in `text` mode (which doesn't yet support\n  row and col counts).\n\n\n## 2017-11-15, version 5.10.0\n\n- Implemented a navigation bar showing the path. Thanks @meirotstein.\n- Implemented a status bar showing cursor location.\n  Thanks @meirotstein.\n- Implemented repairing JSON objects containing left and right single\n  and double quotes (which you get when typing a JSON object in Word)\n  in `text` and `code` mode.\n- Implemented repairing JSON objects containing special white space\n  characters like non-breaking space.\n- Upgraded dependency `ajv` to version `5.3.0`.\n- Fixed #481: A polyfill required `DocumentType` which is not defined\n  in all environments.\n\n\n## 2017-09-16, version 5.9.6\n\n- Fixed displaying a dropdown for enums inside composite schemas.\n  Thanks @hachichaud.\n- Fixed #461: Urls opening twice on Firefox and Safari.\n\n\n## 2017-08-26, version 5.9.5\n\n- Fixed a regression introduced in `v5.9.4`: after using the context\n  menu once, it was not possible to set focus to an other input field\n  anymore.\n\n\n## 2017-08-20, version 5.9.4\n\n- Fixed #447: context menus not working in Shadow DOM. Thanks @tomalec.\n\n\n## 2017-07-24, version 5.9.3\n\n- Fixed broken multi-selection (regression).\n\n\n## 2017-07-13, version 5.9.2\n\n- Fixed a bug in the JSON sanitizer.\n\n\n## 2017-07-13, version 5.9.1\n\n- `setText` method of tree mode now automatically sanitizes JSON input\n  when needed.\n- Fixed #430: automatically fix unescaped control characters in\n  JSON input.\n\n\n## 2017-07-10, version 5.9.0\n\n- Implemented support for JSON schema references `$ref`, see #302.\n  Thanks @meirotstein.\n- Fixed #429: JSONEditor no longer accepting an empty array for option\n  `modes`. Thanks @trystan2k.\n- Fixed JSONEditor picking the first entry of `modes` as initial mode\n  instead of option `mode`.\n\n\n## 2017-07-08, version 5.8.2\n\n- Select first option from `modes` instead of `tree` when `mode` is not\n  configured. Thanks @bag-man.\n- Some fixes and improvements in the API of autocompletion.\n  Thanks @israelito3000.\n\n\n## 2017-07-03, version 5.8.1\n\n- Fixed broken minified bundles in folder `dist` (again...).\n\n\n## 2017-07-02, version 5.8.0\n\n- Implemented support for autocompletion. Thanks @israelito3000.\n\n\n## 2017-06-27, version 5.7.2\n\n- Fixed broken minified bundles in folder `dist`\n  (reverted to `uglify-js@2.8.22` for now).\n\n\n## 2017-06-25, version 5.7.1\n\n- Upgraded dependency `ajv` to version `5.2.0`. Resolves warnings in\n  Webpack build processes.\n\n\n## 2017-05-26, version 5.7.0\n\n- Implemented support for template items. Thanks @israelito3000.\n- Upgraded dependencies to the latest versions. Thanks @andreykaipov.\n\n\n## 2017-04-15, version 5.6.0\n\n- Implemented readonly option for modes `text` and `code.`\n  Thanks @walkerrandolphsmith.\n- Upgraded dependencies (`brance` and `ajv`) to the latest versions.\n- Fixed not being able to move focus to enum select box when clicking\n  a JSON Schema warning.\n- Fixed #309: already loaded version of Ace being overwritten by the\n  embedded version of JSONEditor.\n- Fixed #368: Mode selection drop down not fully visible on small screen.\n- Fixed #253: Optimize the input experience of Chinese IME.\n  Thanks @chinesedfan.\n\n\n## 2017-01-06, version 5.5.11\n\n- Fixed embedded version of jsoneditor ace theme not being loaded in\n  minimalist version (see #55).\n- Fixed a styling issue in the SearchBox of Ace editor (mode `code`).\n- Fixed #347: CSS more robust against global settings of div position.\n- Added docs and example on how to use a custom version of Ace editor.\n\n\n## 2016-11-02, version 5.5.10\n\n- Fixed #85: pressing enter in an input in a form containing a JSONEditor too\n  breaks submitting the form.\n\n\n## 2016-10-17, version 5.5.9\n\n- Fixed #329: Editor showing duplicate key warnings for keys defined on the\n  Object prototype, like `toString` and `watch`.\n\n\n## 2016-09-27, version 5.5.8\n\n- Fixed #314: JSON schema validation throwing an error \"Unexpected token ' in\n  JSON at position 0\" in specific cases. Thanks @apostrophest\n\n\n## 2016-08-17, version 5.5.7\n\n- Fixed #308: wrong positioning of label \"empty array\" when `onEditable`\n  returns false.\n\n\n## 2016-06-15, version 5.5.6\n\n- Fixed #303: editor contents collapsed when the parent div of the JSONEditor\n  has no height set.\n- Improved example 04_load_and_save.html. Thanks @RDCH106.\n\n\n## 2016-05-24, version 5.5.5\n\n- Fixed #298: Switch mode button disappears when switching from text/code to\n  tree/form/view mode when the JSON contained errors.\n- Fixed enum drop downs not working when the JSONEditor is configured with\n  a name.\n\n\n## 2016-05-22, version 5.5.4\n\n- Fixed #285: an issue with the enum drop down when having defined multiple\n  enums in a JSON schema.\n- Fixed a (harmless) error in the console when clicking right from an enum\n  drop down.\n\n\n## 2016-05-22, version 5.5.3\n\n- Fixed #299: reverted the fix of #268 by trimming text in fields and values.\n\n\n## 2016-04-18, version 5.5.2\n\n- Fixed #294: Fields reset their caret location on every key press in Firefox.\n\n\n## 2016-04-16, version 5.5.1\n\n- Fixed enum select boxes not being rendered/removed when setting or removing\n  a JSON schema via `editor.setSchema(schema)`.\n\n\n## 2016-04-16, version 5.5.0\n\n- Implemented a dropdown for values having an JSON Schema enum.\n  Thanks @tdakanalis.\n- Fixed #291, #292: Some CSS broken when using the editor in combination with\n  bootstrap. Thanks @nucleartide.\n\n## 2016-04-09, version 5.4.0\n\n- Upgraded all dependencies (`ajv`, `brace`, etc).\n- Fixed #289: Some CSS breaking when using the editor in combination with\n  materialize.css or bootstrap.\n- Fixed #290: `setText()` not working in mode text or code.\n\n\n## 2016-04-06, version 5.3.0\n\n- Implemented support for sorting object keys naturally. Thanks @edufelipe.\n- Sorting object keys or array items via the context menu is now also naturally\n  sorted.\n- Fixed #283: improved JSON schema error message in case of no\n  additionalProperties.\n- Fixed #286: Calling `get()` or `getText()` caused the editor to lose focus.\n  A regression introduced in v5.2.0.\n\n\n## 2016-03-20, version 5.2.0\n\n- Implemented method `editor.destroy()` to properly cleanup the editor (#278).\n- Fixed #268: JSONEditor now trims text in fields and values.\n- Fixed #280: Some CSS issues when used in combination with bootstrap.\n\n\n## 2016-02-15, version 5.1.5\n\n- Fixed #272: Checkbox for boolean values visible in view mode.\n\n\n## 2016-02-13, version 5.1.4\n\n- Fixed broken example 04_load_and_save.html. See #265.\n\n\n## 2016-02-03, version 5.1.3\n\n- Fixed #264: Clicking items in the context menu not working on Firefox.\n\n\n## 2016-01-21, version 5.1.2\n\n- Improvements in sanitizing invalid JSON.\n- Updated dependencies to the latest version.\n- Fixed clicking format/compact not triggering an onChange event.\n- Fixed #259: when having a JSONEditor inside an HTML form, clicking an entry\n  in the context menu did submit the form.\n- Fixed browserify build, see #260. Thanks @onip.\n\n\n## 2016-01-16, version 5.1.1\n\n- Fixed #257: Improving error messages for enum errors failed when the\n  schema contains references.\n- Fixed #255: Removed wrong console warning about the option `search`.\n- Fixed error thrown when option `search` is false (see #256). Thanks @MiroHibler.\n\n\n## 2016-01-14, version 5.1.0\n\n- Implemented support for JSON schema validation, powered by `ajv`.\n- Implemented #197: display an error in case of duplicate keys in an object.\n- Implemented #183: display a checkbox left from boolean values, so you can\n  easily switch between true/false.\n- Implemented debouncing of keyboard input, resulting in much less history\n  actions whilst typing.\n- Added a minimalist bundle to the `dist` folder, excluding `ace` and `ajv`.\n- Fixed #222: editor throwing `onChange` events when switching mode.\n- Fixed an error throw when switching to mode \"code\" via the menu.\n- Fixed interfering shortcut keys: changed quick keys to select multiple fields\n  from `Shift+Arrow Up/Down` to `Ctrl+Shift+Arrow Up/Down`.\n\n\n\n## 2015-12-31, version 5.0.1\n\n- Fixed a bug in positioning of the context menu for multiple selected nodes.\n- Fixed #130: option `onEditable` not available in mode `form`.\n- Fixed #202: removed `version` field from bower.json.\n\n\n## 2015-12-31, version 5.0.0\n\n- New design.\n- Implemented selection of multiple nodes, allowing to move/duplicate/remove\n  multiple nodes at once (See #106).\n- Implemented a new option `escapeUnicode`, which will show the hexadecimal \n  unicode instead of the character itself. (See #93 and #230).\n- Implemented method `getMode`.\n- Implemented option `onModeChange(oldMode, newMode)`.\n- Implemented #203: Objects and arrays in mode `form` and `view` are now\n  expandable by clicking the field names too.\n- Replaced the PNG icon images with SVG. Thanks @1j01.\n- Renamed all CSS classes They now have prefixes `.jsoneditor-` to prevent\n  name collisions with css frameworks like bootstrap.\n- Renamed options `change`, `editable`, `error` to respectively `onChange`,\n  `onEditable`, and `onError`. Old options are still working and give a \n  deprecation warning.\n- Colors of values are now customizable using CSS. \n- JSONEditor new throws a warning in the console in case of unknown options.\n- Fixed #93 and #227: html codes like `&amp;` not escaped.\n- Fixed #149: Memory leak when switching mode from/to `code` mode, web worker\n  of Ace editor wasn't cleaned up.\n- Fixed #234: Remove dependency on a fork of the `jsonlint` project on github.\n- Fixed: disabled `Ctrl+L` quick key to go to a line, instead use the default\n  browser behavior of selecting the address bar.\n- Fixed #38: clear search results after a new JSON object is set.\n- Fixed #242: row stays highlighted when dragging outside editor.\n- Fixed quick-keys Shift+Alt+Arrows not registering actions in history.\n- Fixed #104: context menus are now positioned relative to the elements of the \n  editor instead of an absolute position in the window.\n\n\n## 2015-06-13, version 4.2.1\n\n- Fixed #161: Cannot select text in Ace editor on systems using Chinese fonts.\n\n\n## 2015-05-14, version 4.2.0\n\n- Implemented option `theme`, allowing to set a custom theme for the Ace \n  editor. Thanks @nfvs.\n- Implemented option `ace`, which allows to pass a custom instance of the Ace\n  instead of the embedded version.\n- Fixed #186: binding issue to `jsonlint.parse`.\n- Fixed `editor.get()` manipulating the code when containing an error.\n\n\n## 2015-03-15, version 4.1.1\n\n- Added missing file `index.js` to the bower package.\n  \n\n## 2015-03-15, version 4.1.0\n\n- Implemented a function `focus()` for modes tree, view, and form.\n- Added `./src` folder to the distributed package, needed for usage via\n  node.js/browserify.\n\n\n## 2015-02-28, version 4.0.0\n\n- Ace editor and jsonlint are now packed with jsoneditor.js by default.\n  This makes the library about 4 times larger. If Ace is not needed, a custom\n  build of the library can be done.\n- The distribution files are now moved from the root to the `/dist` folder.\n- Reworked the source code to CommonJS modules, using `brace` to load Ace.\n- JSONP is now automatically stripped from JSON. Thanks @yanivefraim.\n- Fixed bugs in the JSON sanitizer, no longer manipulating JSON-like structures\n  inside strings.\n\n\n## 2015-01-25, version 3.2.0\n\n- Implemented shortcut keys `Ctrl+\\` to format and `Ctrl+Shift+\\` to compact\n  JSON when in mode `text` or `code`.\n- Before an error is thrown because of invalid text, the editor first tries to\n  sanitize the text (replace JavaScript notation with JSON notation), and only\n  after that throws the error.\n- Fixed Node.path() not working for a JSON Object `\"\"`. Thanks @tomalec.\n- Minor styling improvements.\n- Fixed configured indentation not being applied to Ace editor.\n\n\n## 2014-09-03, version 3.1.2\n\n- Some fixes/improvements in `parseJS` (to parse a JSON object from a JavaScript\n  object).\n- Fixed the lack of a semi colon at end of the bundled files.\n\n\n## 2014-08-01, version 3.1.1\n\n- Replaced parsing of JavaScript objects into JSON from `eval` to a dedicated\n  `parseJS` function.\n\n\n## 2014-07-28, version 3.1.0\n\n- JSONEditor now accepts JavaScript objects as input, and can turn them into\n  valid JSON. For example `{a:2,b:'str'}` can be turned into `{\"a\":2,\"b\":\"str\"}`.\n- Implemented an option `editable`, a callback function, which allows to set \n  individual nodes (their field and/or value) editable or read-only.\n- Fixed: shortcut keys to manipulate the nodes are now disabled when mode \n  is `form` or `view`.\n\n\n## 2014-05-31, version 3.0.0\n\n- Large code reorganization.\n- Editor must be loaded as `new JSONEditor(...)` instead of \n  `new jsoneditor.JSONEditor(...)`.\n- Css is not automatically loaded anymore when using AMD.\n- Web application has been moved to another project.\n\n\n## 2014-01-03, version 2.3.6\n\n- Fixed positioning issue of the action menu.\n\n\n## 2013-12-09, version 2.3.5\n\n- Fixed a positioning issue of the action menu again.\n- Fixed an issue with non-breaking space characters.\n\n\n## 2013-11-19, version 2.3.4\n\n- Dropped support for IE8, cleaned up legacy code for old browsers.\n- Disabled saving files using HTML5 on Firefox to prevent a Firefox bug\n  blocking cut/paste functionality in editable divs after using a.download.\n\n\n## 2013-10-17, version 2.3.3\n\n- Added support for search (Ctrl+F) in the code editor Ace.\n- Fixed a positioning issue of the action menu when in bootstrap modal.\n  (thanks tsash).\n\n\n## 2013-09-26, version 2.3.2\n\n- The web application is now available offline. Thanks ayanamist.\n\n\n## 2013-09-24, version 2.3.1\n\n- Fixed non-working action menu when in bootstrap modal (z-index issue).\n- Fixed missing main field in package.json.\n\n\n## 2013-09-13, version 2.3.0\n\n- Implemented an option `modes`, which creates a menu in the editor\n  where the user can switch between the selected editor modes.\n- Fixed wrong title on fields with value `null`.\n- Fixed buggy loading of files in the web application.\n\n\n## 2013-08-01, version 2.2.2\n\n- Fixed non working option `indentation`.\n- Fixed css not being loaded with AMD in case of multiple scripts.\n- Fixed a security error in the server side file retriever script of\n  the web application.\n\n\n## 2013-05-27, version 2.2.1\n\n- Fixed undefined options in TextEditor. Thanks Wiseon3.\n- Fixed non-working save function on Firefox 21. Thanks youxiachai.\n\n\n## 2013-05-04, version 2.2.0\n\n- Unified JSONFormatter and JSONEditor in one editor with a switchable mode.\n- Urls are navigable now.\n- Improved error and log handling.\n- Added jsoneditor to package managers npm and bower.\n\n\n## 2013-03-11, version 2.1.1\n\n- Fixed an issue with console outputs on IE8, causing the editor not to work\n  at all on IE8.\n\n\n## 2013-03-08, version 2.1.0\n\n- Replaced the plain text editor with code editor Ace, which brings in syntax\n  highlighting and code inspection.\n- Improved the splitter between the two panels. Panels can be hided.\n\n\n## 2013-02-26, version 2.0.2\n\n- Fixed: dragarea of the root node was wrongly visible is removed now.\n\n\n## 2013-02-21, version 2.0.1\n\n- Fixed undefined variable in the redo method.\n- Removed the \"hide ads\" button. Not allowed by Google AdSense, sorry.\n\n\n## 2013-02-09, version 2.0.0\n\n- Implemented a context menu, replacing the action buttons on the right side of\n  the editor and the inline action buttons. This gives a cleaner interface,\n  more space for the actual contents, and more room for new controls (like\n  insert and sort).\n- Implemented shortcut keys. The JSON Editor can be used with just a keyboard.\n- Implemented sort action, which sorts the childs of an array or object.\n- Implemented auto scrolling up and down when dragging a node and reaching\n  the top or bottom of the editor.\n- Added support for CommonJS and RequireJS.\n- Added more examples.\n- Improved performance and memory usage.\n- Implemented a new mode 'form', in which only values are editable and the\n  fields are fixed.\n- Minor improvements and bug fixes.\n\n\n## 2012-12-08, version 1.7.0\n\n- Implemented two modes: 'editor' (default), and 'viewer'. In viewer mode,\n  the data and datastructure is read-only.\n- Implemented methods set(json, name), setName(name), and getName(), which\n  allows for setting and getting the field name of the root node.\n- Fixed an issue where the search bar does not work when there is no global\n  window.editor object.\n\n\n## 2012-11-26, version 1.6.2\n\n- Fixed a bug in the change callback handler, resulting in an infinite loop\n  when requesting the contents of the editor inside the callback (issue #19).\n\n\n## 2012-11-21, version 1.6.1\n\n- Added a request header \"Accept: application/json\" when loading files and urls.\n\n\n## 2012-11-03, version 1.6.0\n\n- Added feature to the web application to load and save files from disk and url.\n- Improved error messages in the web application using JSONLint.\n- Made the web application pass the W3C markup validation service.\n- Added option 'change' to both editor and formatter, which allows to set a\n  callback which is triggered when the contents of the editor or formatter\n  changes.\n- Changed the default indentation of the JSONFormatter to 4 spaces.\n- Renamed options 'enableSearch' and 'enableHistory' to 'search' and 'history'\n  respectively.\n- Added parameter 'json' to the JSONFormatter constructor.\n- Added option 'indentation' to the JSONFormatter.\n\n\n## 2012-10-08, version 1.5.1\n\n- Replaced the paid Chrome App with a free, hosted Chrome App (with ads).\n\n\n## 2012-10-02, version 1.5.0\n\n- Implemented history: undo/redo all actions.\n- Created menu icons (instead of text buttons).\n- Cleaned up the code (removed unused params, improved comments, etc).\n- Minor performance improvements.\n\n\n## 2012-08-31, version 1.4.4\n\n- Changed: description of advertisement now gives information about the Chrome\n  App (without ads).\n- Changed: Chrome App is now configured to be available offline.\n- Fixed: When zooming your browser window, the fields/values did get wrapped\n  on Chrome (thanks Henri Gourvest), and on Firefox sometimes the jsoneditor\n  disappeared due to wrapping of the interface contents.\n\n\n## 2012-08-25, version 1.4.3\n\n- Changed: changed code for the buttons to copy from formatter to editor and\n  vice versa, no inline javascript (gives security policy errors in chrome app).\n\n\n## 2012-08-25, version 1.4.2\n\n- Changed: other bootstrapping mechanism for the chrome app, in a separate\n  javascript file, as inline javascript is not allowed (security policy).\n- Fixed: drop down menu for changing the field type did throw javascript errors\n  (did not break any functionality though).\n\n\n## 2012-08-23, version 1.4.1\n\n- New: Chrome app created.\n\n\n## 2012-08-23, version 1.4.0\n\n- New: Improved icon, logo, and interface header.\n\n\n## 2012-08-19, version 1.3.0\n\n- New: Added buttons next and previous to the search box in the upper right.\n- New: Escape characters are automatically inserted before \" and \\ missing\n  and escape character, making the string contents valid JSON. New lines are\n  automatically replaced with \\n. (Thanks Steve Clay)\n- Changed: all icons have been put in a single sprite. This will improve page\n  load times as there are much less server requests needed to load the editor.\n\n\n## 2012-08-12, version 1.2.0\n\n- New: Added search functionality. Search results are expanded and highlighted.\n  Quickkeys in the search box: Enter (next), Shift+Enter (previous), Ctrl+Enter\n  (search again).\n- New: The position of the vertical separator between left and right panel is\n  stored.\n- New: Link to the sourcecode on github added at the bottom of the page.\n- Changed: Refinements in the layout: fonts, colors, icons.\n- Fixed: leading an trailing spaces not being displayed in the editor.\n- Fixed: wrapping of long words and urls in Chrome.\n- Fixed: ignoring functions and undefined values in the loaded JSON object\n  (they where interpreted as empty object and string instead of being ignored).\n\n\n## 2012-07-01, version 1.1.1\n\n- Fixed global event listener for the focus/blur events, causing changes in\n  fields and values not always being registered.\n- Fixed a css issue with Firefox (box-sizing of the editor).\n\n\n## 2012-04-24, version 1.1\n\n- Fixed a bug. Dragging an object down which has been expanded and collapsed\n  again did not work.\n- Using a minified version of jsoneditor.js, to improve page load time and\n  save bandwidth.\n\n\n## 2012-04-21, version 1.0\n\n- Values are no longer aligned in one global column, but placed directly right\n  from the field. Having field and value close together improves readability,\n  especially in case of deeply nested data.\n- Values are colorized by their type: strings are green, values read, booleans\n  blue, and null is purple.\n- Font is changed to a monotype font for better readability.\n- Special characters like \\t are now handled nicely.\n- Overall performance and memory usage improved.\n- When clicking on whitespace, focus is set to the closest field or value.\n- some other small interface tweaks.\n- Fixed a bug with casting a value from type auto to string and vice versa\n  (the value was not casted at all).\n\n\n## 2012-03-01, version 0.9.10\n\n- Nicer looking select box for the field types, with icons.\n- Improved drag and drop: better visualized, and now working in all browsers.\n- Previous values will be restored after changing the type of a field. When\n  changing the type back, the previous value or childs will be restored.\n- When hovering buttons (fieldtype, duplicate, delete, add) or when dragging\n  a field, corresponding field including its childs is highlighted. This makes\n  it easier to see what part of the data will be edited.\n- Errors are now displayed in a message window on top of the page instead of\n  an alert which pops up.\n- Fixed a bug with displaying enters in fields.\n- Fixed a bug where the last trailing enter was removed when setting json\n  in the editor.\n- Added a fix to get around Internet Explorer 8 issues with vertical scrollbars.\n\n\n## 2012-01-29, version 0.9.9\n\n- Fields can be duplicated\n- Support for drag and drop:\n  - fields in the editor itself can be moved via drag and drop\n  - fields can be exported from the editor as JSON\n  - external JSON can be dropped inside the editor\n- When changing type from array to object and vice versa, childs will be\n  maintained instead of removed.\n- Updated interface. Works now in IE8 too.\n\n\n## 2012-01-16, version 0.9.8\n\n- Improved the performance of expanding a node with all its childs.\n\n\n## 2012-01-09, version 0.9.7\n\n- Added functionality to expand/collapse a node and all its childs. Click\n  the expand button of a node while holding Ctrl down.\n- Small interface improvements\n\n\n## 2011-11-28, version 0.9.6\n\n- First fully usable version of the JSON editor\n", "'use strict'\n\nimport './polyfills'\nimport naturalSort from 'javascript-natural-sort'\nimport jsonrepair from 'jsonrepair'\nimport jsonlint from './assets/jsonlint/jsonlint'\nimport jsonMap from 'json-source-map'\nimport { translate } from './i18n'\n\nconst MAX_ITEMS_FIELDS_COLLECTION = 10000\nconst YEAR_2000 = 946684800000\n\n/**\n * Parse JSON using the parser built-in in the browser.\n * On exception, the jsonString is validated and a detailed error is thrown.\n * @param {String} jsonString\n * @return {JSON} json\n */\nexport function parse (jsonString) {\n  try {\n    return JSON.parse(jsonString)\n  } catch (err) {\n    // try to throw a more detailed error message using validate\n    validate(jsonString)\n\n    // rethrow the original error\n    throw err\n  }\n}\n\n/**\n * Try to fix the JSON string. If not successful, return the original string\n * @param {string} jsonString\n */\nexport function tryJsonRepair (jsonString) {\n  try {\n    return jsonrepair(jsonString)\n  } catch (err) {\n    // repair was not successful, return original text\n    return jsonString\n  }\n}\n\n/**\n * Escape unicode characters.\n * For example input '\\u2661' (length 1) will output '\\\\u2661' (length 5).\n * @param {string} text\n * @return {string}\n */\nexport function escapeUnicodeChars (\n  // see https://www.wikiwand.com/en/UTF-16\n  text\n) {\n  return (\n    // note: we leave surrogate pairs as two individual chars,\n    // as JSON doesn't interpret them as a single unicode char.\n    text.replace(\n      /[\\u007F-\\uFFFF]/g,\n      c => '\\\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4)\n    )\n  )\n}\n\n/**\n * Validate a string containing a JSON object\n * This method uses JSONLint to validate the String. If JSONLint is not\n * available, the built-in JSON parser of the browser is used.\n * @param {String} jsonString   String with an (invalid) JSON object\n * @throws Error\n */\nexport function validate (jsonString) {\n  if (typeof (jsonlint) !== 'undefined') {\n    jsonlint.parse(jsonString)\n  } else {\n    JSON.parse(jsonString)\n  }\n}\n\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\nexport function extend (a, b) {\n  for (const prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      a[prop] = b[prop]\n    }\n  }\n  return a\n}\n\n/**\n * Remove all properties from object a\n * @param {Object} a\n * @return {Object} a\n */\nexport function clear (a) {\n  for (const prop in a) {\n    if (hasOwnProperty(a, prop)) {\n      delete a[prop]\n    }\n  }\n  return a\n}\n\n/**\n * Get the type of an object\n * @param {*} object\n * @return {String} type\n */\nexport function getType (object) {\n  if (object === null) {\n    return 'null'\n  }\n  if (object === undefined) {\n    return 'undefined'\n  }\n  if ((object instanceof Number) || (typeof object === 'number')) {\n    return 'number'\n  }\n  if ((object instanceof String) || (typeof object === 'string')) {\n    return 'string'\n  }\n  if ((object instanceof Boolean) || (typeof object === 'boolean')) {\n    return 'boolean'\n  }\n  if (object instanceof RegExp) {\n    return 'regexp'\n  }\n  if (isArray(object)) {\n    return 'array'\n  }\n\n  return 'object'\n}\n\n/**\n * Test whether a text contains a url (matches when a string starts\n * with 'http://*' or 'https://*' and has no whitespace characters)\n * @param {String} text\n */\nconst isUrlRegex = /^https?:\\/\\/\\S+$/\n\nexport function isUrl (text) {\n  return (typeof text === 'string' || text instanceof String) &&\n      isUrlRegex.test(text)\n}\n\n/**\n * Tes whether given object is an Array\n * @param {*} obj\n * @returns {boolean} returns true when obj is an array\n */\nexport function isArray (obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]'\n}\n\n/**\n * Gets a DOM element's Window.  This is normally just the global `window`\n * variable, but if we opened a child window, it may be different.\n * @param {HTMLElement} element\n * @return {Window}\n */\nexport function getWindow (element) {\n  return element.ownerDocument.defaultView\n}\n\n/**\n * Retrieve the absolute left value of a DOM element\n * @param {Element} elem    A dom element, for example a div\n * @return {Number} left    The absolute left position of this element\n *                          in the browser page.\n */\nexport function getAbsoluteLeft (elem) {\n  const rect = elem.getBoundingClientRect()\n  return rect.left + window.pageXOffset || document.scrollLeft || 0\n}\n\n/**\n * Retrieve the absolute top value of a DOM element\n * @param {Element} elem    A dom element, for example a div\n * @return {Number} top     The absolute top position of this element\n *                          in the browser page.\n */\nexport function getAbsoluteTop (elem) {\n  const rect = elem.getBoundingClientRect()\n  return rect.top + window.pageYOffset || document.scrollTop || 0\n}\n\n/**\n * add a className to the given elements style\n * @param {Element} elem\n * @param {String} className\n */\nexport function addClassName (elem, className) {\n  const classes = elem.className.split(' ')\n  if (classes.indexOf(className) === -1) {\n    classes.push(className) // add the class to the array\n    elem.className = classes.join(' ')\n  }\n}\n\n/**\n * remove all classes from the given elements style\n * @param {Element} elem\n */\nexport function removeAllClassNames (elem) {\n  elem.className = ''\n}\n\n/**\n * add a className to the given elements style\n * @param {Element} elem\n * @param {String} className\n */\nexport function removeClassName (elem, className) {\n  const classes = elem.className.split(' ')\n  const index = classes.indexOf(className)\n  if (index !== -1) {\n    classes.splice(index, 1) // remove the class from the array\n    elem.className = classes.join(' ')\n  }\n}\n\n/**\n * Strip the formatting from the contents of a div\n * the formatting from the div itself is not stripped, only from its childs.\n * @param {Element} divElement\n */\nexport function stripFormatting (divElement) {\n  const childs = divElement.childNodes\n  for (let i = 0, iMax = childs.length; i < iMax; i++) {\n    const child = childs[i]\n\n    // remove the style\n    if (child.style) {\n      // TODO: test if child.attributes does contain style\n      child.removeAttribute('style')\n    }\n\n    // remove all attributes\n    const attributes = child.attributes\n    if (attributes) {\n      for (let j = attributes.length - 1; j >= 0; j--) {\n        const attribute = attributes[j]\n        if (attribute.specified === true) {\n          child.removeAttribute(attribute.name)\n        }\n      }\n    }\n\n    // recursively strip childs\n    stripFormatting(child)\n  }\n}\n\n/**\n * Set focus to the end of an editable div\n * code from Nico Burns\n * http://stackoverflow.com/users/140293/nico-burns\n * http://stackoverflow.com/questions/1125292/how-to-move-cursor-to-end-of-contenteditable-entity\n * @param {Element} contentEditableElement   A content editable div\n */\nexport function setEndOfContentEditable (contentEditableElement) {\n  let range, selection\n  if (document.createRange) {\n    range = document.createRange()// Create a range (a range is a like the selection but invisible)\n    range.selectNodeContents(contentEditableElement)// Select the entire contents of the element with the range\n    range.collapse(false)// collapse the range to the end point. false means collapse to end rather than the start\n    selection = window.getSelection()// get the selection object (allows you to change selection)\n    selection.removeAllRanges()// remove any selections already made\n    selection.addRange(range)// make the range you have just created the visible selection\n  }\n}\n\n/**\n * Select all text of a content editable div.\n * http://stackoverflow.com/a/3806004/1262753\n * @param {Element} contentEditableElement   A content editable div\n */\nexport function selectContentEditable (contentEditableElement) {\n  if (!contentEditableElement || contentEditableElement.nodeName !== 'DIV') {\n    return\n  }\n\n  let sel, range\n  if (window.getSelection && document.createRange) {\n    range = document.createRange()\n    range.selectNodeContents(contentEditableElement)\n    sel = window.getSelection()\n    sel.removeAllRanges()\n    sel.addRange(range)\n  }\n}\n\n/**\n * Get text selection\n * http://stackoverflow.com/questions/4687808/contenteditable-selected-text-save-and-restore\n * @return {Range | TextRange | null} range\n */\nexport function getSelection () {\n  if (window.getSelection) {\n    const sel = window.getSelection()\n    if (sel.getRangeAt && sel.rangeCount) {\n      return sel.getRangeAt(0)\n    }\n  }\n  return null\n}\n\n/**\n * Set text selection\n * http://stackoverflow.com/questions/4687808/contenteditable-selected-text-save-and-restore\n * @param {Range | TextRange | null} range\n */\nexport function setSelection (range) {\n  if (range) {\n    if (window.getSelection) {\n      const sel = window.getSelection()\n      sel.removeAllRanges()\n      sel.addRange(range)\n    }\n  }\n}\n\n/**\n * Get selected text range\n * @return {Object} params  object containing parameters:\n *                              {Number}  startOffset\n *                              {Number}  endOffset\n *                              {Element} container  HTML element holding the\n *                                                   selected text element\n *                          Returns null if no text selection is found\n */\nexport function getSelectionOffset () {\n  const range = getSelection()\n\n  if (range && 'startOffset' in range && 'endOffset' in range &&\n      range.startContainer && (range.startContainer === range.endContainer)) {\n    return {\n      startOffset: range.startOffset,\n      endOffset: range.endOffset,\n      container: range.startContainer.parentNode\n    }\n  }\n\n  return null\n}\n\n/**\n * Set selected text range in given element\n * @param {Object} params   An object containing:\n *                              {Element} container\n *                              {Number} startOffset\n *                              {Number} endOffset\n */\nexport function setSelectionOffset (params) {\n  if (document.createRange && window.getSelection) {\n    const selection = window.getSelection()\n    if (selection) {\n      const range = document.createRange()\n\n      if (!params.container.firstChild) {\n        params.container.appendChild(document.createTextNode(''))\n      }\n\n      // TODO: do not suppose that the first child of the container is a textnode,\n      //       but recursively find the textnodes\n      range.setStart(params.container.firstChild, params.startOffset)\n      range.setEnd(params.container.firstChild, params.endOffset)\n\n      setSelection(range)\n    }\n  }\n}\n/**\n * Get the inner text of an HTML element (for example a div element)\n * @param {Element} element\n * @param {Object} [buffer]\n * @return {String} innerText\n */\nexport function getInnerText (element, buffer) {\n  const first = (buffer === undefined)\n  if (first) {\n    buffer = {\n      _text: '',\n      flush: function () {\n        const text = this._text\n        this._text = ''\n        return text\n      },\n      set: function (text) {\n        this._text = text\n      }\n    }\n  }\n\n  // text node\n  if (element.nodeValue) {\n    // remove return characters and the whitespaces surrounding those return characters\n    const trimmedValue = element.nodeValue.replace(/(\\b|^)\\s*\\n\\s*(\\b|$)/g, '')\n    if (trimmedValue !== '') {\n      return buffer.flush() + trimmedValue\n    } else {\n      // ignore empty text\n      return ''\n    }\n  }\n\n  // divs or other HTML elements\n  if (element.hasChildNodes()) {\n    const childNodes = element.childNodes\n    let innerText = ''\n\n    for (let i = 0, iMax = childNodes.length; i < iMax; i++) {\n      const child = childNodes[i]\n\n      if (child.nodeName === 'DIV' || child.nodeName === 'P') {\n        const prevChild = childNodes[i - 1]\n        const prevName = prevChild ? prevChild.nodeName : undefined\n        if (prevName && prevName !== 'DIV' && prevName !== 'P' && prevName !== 'BR') {\n          if (innerText !== '') {\n            innerText += '\\n'\n          }\n          buffer.flush()\n        }\n        innerText += getInnerText(child, buffer)\n        buffer.set('\\n')\n      } else if (child.nodeName === 'BR') {\n        innerText += buffer.flush()\n        buffer.set('\\n')\n      } else {\n        innerText += getInnerText(child, buffer)\n      }\n    }\n\n    return innerText\n  }\n\n  // br or unknown\n  return ''\n}\n\n/**\n * Test whether an element has the provided parent node somewhere up the node tree.\n * @param {Element} elem\n * @param {Element} parent\n * @return {boolean}\n */\nexport function hasParentNode (elem, parent) {\n  let e = elem ? elem.parentNode : undefined\n\n  while (e) {\n    if (e === parent) {\n      return true\n    }\n    e = e.parentNode\n  }\n\n  return false\n}\n\n/**\n * Returns the version of Internet Explorer or a -1\n * (indicating the use of another browser).\n * Source: http://msdn.microsoft.com/en-us/library/ms537509(v=vs.85).aspx\n * @return {Number} Internet Explorer version, or -1 in case of an other browser\n */\nexport function getInternetExplorerVersion () {\n  if (_ieVersion === -1) {\n    let rv = -1 // Return value assumes failure.\n    if (typeof navigator !== 'undefined' && navigator.appName === 'Microsoft Internet Explorer') {\n      const ua = navigator.userAgent\n      const re = /MSIE ([0-9]+[.0-9]+)/\n      if (re.exec(ua) != null) {\n        rv = parseFloat(RegExp.$1)\n      }\n    }\n\n    _ieVersion = rv\n  }\n\n  return _ieVersion\n}\n\n/**\n * cached internet explorer version\n * @type {Number}\n * @private\n */\nlet _ieVersion = -1\n\n/**\n * Test whether the current browser is Firefox\n * @returns {boolean} isFirefox\n */\nexport function isFirefox () {\n  return (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Firefox') !== -1)\n}\n\n/**\n * Add an event listener. Works for all browsers\n * @param {Element}     element    An html element\n * @param {string}      action     The action, for example \"click\",\n *                                 without the prefix \"on\"\n * @param {function}    listener   The callback function to be executed\n * @param {boolean}     [useCapture] false by default\n * @return {function}   the created event listener\n */\nexport function addEventListener (element, action, listener, useCapture) {\n  if (element.addEventListener) {\n    if (useCapture === undefined) { useCapture = false }\n\n    if (action === 'mousewheel' && isFirefox()) {\n      action = 'DOMMouseScroll' // For Firefox\n    }\n\n    element.addEventListener(action, listener, useCapture)\n    return listener\n  } else if (element.attachEvent) {\n    // Old IE browsers\n    const f = () => listener.call(element, window.event)\n    element.attachEvent('on' + action, f)\n    return f\n  }\n}\n\n/**\n * Remove an event listener from an element\n * @param {Element}  element   An html dom element\n * @param {string}   action    The name of the event, for example \"mousedown\"\n * @param {function} listener  The listener function\n * @param {boolean}  [useCapture]   false by default\n */\nexport function removeEventListener (element, action, listener, useCapture) {\n  if (element.removeEventListener) {\n    if (useCapture === undefined) { useCapture = false }\n\n    if (action === 'mousewheel' && isFirefox()) {\n      action = 'DOMMouseScroll' // For Firefox\n    }\n\n    element.removeEventListener(action, listener, useCapture)\n  } else if (element.detachEvent) {\n    // Old IE browsers\n    element.detachEvent('on' + action, listener)\n  }\n}\n\n/**\n * Test if an element is a child of a parent element.\n * @param {Element} elem\n * @param {Element} parent\n * @return {boolean} returns true if elem is a child of the parent\n */\nexport function isChildOf (elem, parent) {\n  let e = elem.parentNode\n  while (e) {\n    if (e === parent) {\n      return true\n    }\n    e = e.parentNode\n  }\n\n  return false\n}\n\n/**\n * Parse a JSON path like '.items[3].name' into an array\n * @param {string} jsonPath\n * @return {Array}\n */\nexport function parsePath (jsonPath) {\n  const path = []\n  let i = 0\n\n  function parseProperty () {\n    let prop = ''\n    while (jsonPath[i] !== undefined && /[\\w$]/.test(jsonPath[i])) {\n      prop += jsonPath[i]\n      i++\n    }\n\n    if (prop === '') {\n      throw new Error('Invalid JSON path: property name expected at index ' + i)\n    }\n\n    return prop\n  }\n\n  function parseIndex (end) {\n    let name = ''\n    while (jsonPath[i] !== undefined && jsonPath[i] !== end) {\n      name += jsonPath[i]\n      i++\n    }\n\n    if (jsonPath[i] !== end) {\n      throw new Error('Invalid JSON path: unexpected end, character ' + end + ' expected')\n    }\n\n    return name\n  }\n\n  while (jsonPath[i] !== undefined) {\n    if (jsonPath[i] === '.') {\n      i++\n      path.push(parseProperty())\n    } else if (jsonPath[i] === '[') {\n      i++\n\n      if (jsonPath[i] === '\\'' || jsonPath[i] === '\"') {\n        const end = jsonPath[i]\n        i++\n\n        path.push(parseIndex(end))\n\n        if (jsonPath[i] !== end) {\n          throw new Error('Invalid JSON path: closing quote \\' expected at index ' + i)\n        }\n        i++\n      } else {\n        let index = parseIndex(']').trim()\n        if (index.length === 0) {\n          throw new Error('Invalid JSON path: array value expected at index ' + i)\n        }\n        // Coerce numeric indices to numbers, but ignore star\n        index = index === '*' ? index : JSON.parse(index)\n        path.push(index)\n      }\n\n      if (jsonPath[i] !== ']') {\n        throw new Error('Invalid JSON path: closing bracket ] expected at index ' + i)\n      }\n      i++\n    } else {\n      throw new Error('Invalid JSON path: unexpected character \"' + jsonPath[i] + '\" at index ' + i)\n    }\n  }\n\n  return path\n}\n\n/**\n * Stringify an array with a path in a JSON path like '.items[3].name'\n * @param {Array.<string | number>} path\n * @returns {string}\n */\nexport function stringifyPath (path) {\n  return path\n    .map(p => {\n      if (typeof p === 'number') {\n        return ('[' + p + ']')\n      } else if (typeof p === 'string' && p.match(/^[A-Za-z0-9_$]+$/)) {\n        return '.' + p\n      } else {\n        return '[\"' + p + '\"]'\n      }\n    })\n    .join('')\n}\n\n/**\n * Improve the error message of a JSON schema error\n * @param {Object} error\n * @return {Object} The error\n */\nexport function improveSchemaError (error) {\n  if (error.keyword === 'enum' && Array.isArray(error.schema)) {\n    let enums = error.schema\n    if (enums) {\n      enums = enums.map(value => JSON.stringify(value))\n\n      if (enums.length > 5) {\n        const more = ['(' + (enums.length - 5) + ' more...)']\n        enums = enums.slice(0, 5)\n        enums.push(more)\n      }\n      error.message = 'should be equal to one of: ' + enums.join(', ')\n    }\n  }\n\n  if (error.keyword === 'additionalProperties') {\n    error.message = 'should NOT have additional property: ' + error.params.additionalProperty\n  }\n\n  return error\n}\n\n/**\n * Test whether something is a Promise\n * @param {*} object\n * @returns {boolean} Returns true when object is a promise, false otherwise\n */\nexport function isPromise (object) {\n  return object && typeof object.then === 'function' && typeof object.catch === 'function'\n}\n\n/**\n * Test whether a custom validation error has the correct structure\n * @param {*} validationError The error to be checked.\n * @returns {boolean} Returns true if the structure is ok, false otherwise\n */\nexport function isValidValidationError (validationError) {\n  return typeof validationError === 'object' &&\n      Array.isArray(validationError.path) &&\n      typeof validationError.message === 'string'\n}\n\n/**\n * Test whether the child rect fits completely inside the parent rect.\n * @param {ClientRect} parent\n * @param {ClientRect} child\n * @param {number} margin\n */\nexport function insideRect (parent, child, margin) {\n  const _margin = margin !== undefined ? margin : 0\n  return child.left - _margin >= parent.left &&\n      child.right + _margin <= parent.right &&\n      child.top - _margin >= parent.top &&\n      child.bottom + _margin <= parent.bottom\n}\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds.\n *\n * Source: https://davidwalsh.name/javascript-debounce-function\n *\n * @param {function} func\n * @param {number} wait                 Number in milliseconds\n * @param {boolean} [immediate=false]   If `immediate` is passed, trigger the\n *                                      function on the leading edge, instead\n *                                      of the trailing.\n * @return {function} Return the debounced function\n */\nexport function debounce (func, wait, immediate) {\n  let timeout\n  return function () {\n    const context = this; const args = arguments\n    const later = () => {\n      timeout = null\n      if (!immediate) func.apply(context, args)\n    }\n    const callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow) func.apply(context, args)\n  }\n}\n\n/**\n * Determines the difference between two texts.\n * Can only detect one removed or inserted block of characters.\n * @param {string} oldText\n * @param {string} newText\n * @return {{start: number, end: number}} Returns the start and end\n *                                        of the changed part in newText.\n */\nexport function textDiff (oldText, newText) {\n  const len = newText.length\n  let start = 0\n  let oldEnd = oldText.length\n  let newEnd = newText.length\n\n  while (newText.charAt(start) === oldText.charAt(start) &&\n  start < len) {\n    start++\n  }\n\n  while (newText.charAt(newEnd - 1) === oldText.charAt(oldEnd - 1) &&\n  newEnd > start && oldEnd > 0) {\n    newEnd--\n    oldEnd--\n  }\n\n  return { start: start, end: newEnd }\n}\n\n/**\n * Return an object with the selection range or cursor position (if both have the same value)\n * Support also old browsers (IE8-)\n * Source: http://ourcodeworld.com/articles/read/282/how-to-get-the-current-cursor-position-and-selection-within-a-text-input-or-textarea-in-javascript\n * @param {DOMElement} el A dom element of a textarea or input text.\n * @return {Object} reference Object with 2 properties (start and end) with the identifier of the location of the cursor and selected text.\n **/\nexport function getInputSelection (el) {\n  let startIndex = 0; let endIndex = 0; let normalizedValue; let range; let textInputRange; let len; let endRange\n\n  if (typeof el.selectionStart === 'number' && typeof el.selectionEnd === 'number') {\n    startIndex = el.selectionStart\n    endIndex = el.selectionEnd\n  } else {\n    range = document.selection.createRange()\n\n    if (range && range.parentElement() === el) {\n      len = el.value.length\n      normalizedValue = el.value.replace(/\\r\\n/g, '\\n')\n\n      // Create a working TextRange that lives only in the input\n      textInputRange = el.createTextRange()\n      textInputRange.moveToBookmark(range.getBookmark())\n\n      // Check if the startIndex and endIndex of the selection are at the very end\n      // of the input, since moveStart/moveEnd doesn't return what we want\n      // in those cases\n      endRange = el.createTextRange()\n      endRange.collapse(false)\n\n      if (textInputRange.compareEndPoints('StartToEnd', endRange) > -1) {\n        startIndex = endIndex = len\n      } else {\n        startIndex = -textInputRange.moveStart('character', -len)\n        startIndex += normalizedValue.slice(0, startIndex).split('\\n').length - 1\n\n        if (textInputRange.compareEndPoints('EndToEnd', endRange) > -1) {\n          endIndex = len\n        } else {\n          endIndex = -textInputRange.moveEnd('character', -len)\n          endIndex += normalizedValue.slice(0, endIndex).split('\\n').length - 1\n        }\n      }\n    }\n  }\n\n  return {\n    startIndex: startIndex,\n    endIndex: endIndex,\n    start: _positionForIndex(startIndex),\n    end: _positionForIndex(endIndex)\n  }\n\n  /**\n   * Returns textarea row and column position for certain index\n   * @param {Number} index text index\n   * @returns {{row: Number, column: Number}}\n   */\n  function _positionForIndex (index) {\n    const textTillIndex = el.value.substring(0, index)\n    const row = (textTillIndex.match(/\\n/g) || []).length + 1\n    const col = textTillIndex.length - textTillIndex.lastIndexOf('\\n')\n\n    return {\n      row: row,\n      column: col\n    }\n  }\n}\n\n/**\n * Returns the index for certain position in text element\n * @param {DOMElement} el A dom element of a textarea or input text.\n * @param {Number} row row value, > 0, if exceeds rows number - last row will be returned\n * @param {Number} column column value, > 0, if exceeds column length - end of column will be returned\n * @returns {Number} index of position in text, -1 if not found\n */\nexport function getIndexForPosition (el, row, column) {\n  const text = el.value || ''\n  if (row > 0 && column > 0) {\n    const rows = text.split('\\n', row)\n    row = Math.min(rows.length, row)\n    column = Math.min(rows[row - 1].length, column - 1)\n    const columnCount = (row === 1 ? column : column + 1) // count new line on multiple rows\n    return rows.slice(0, row - 1).join('\\n').length + columnCount\n  }\n  return -1\n}\n\n/**\n * Returns location of json paths in certain json string\n * @param {String} text json string\n * @param {Array<String>} paths array of json paths\n * @returns {Array<{path: String, line: Number, row: Number}>}\n */\nexport function getPositionForPath (text, paths) {\n  const result = []\n  let jsmap\n  if (!paths || !paths.length) {\n    return result\n  }\n\n  try {\n    jsmap = jsonMap.parse(text)\n  } catch (err) {\n    return result\n  }\n\n  paths.forEach(path => {\n    const pathArr = parsePath(path)\n    const pointerName = compileJSONPointer(pathArr)\n    const pointer = jsmap.pointers[pointerName]\n    if (pointer) {\n      result.push({\n        path: path,\n        line: pointer.key ? pointer.key.line : (pointer.value ? pointer.value.line : 0),\n        column: pointer.key ? pointer.key.column : (pointer.value ? pointer.value.column : 0)\n      })\n    }\n  })\n\n  return result\n}\n\n/**\n * Compile a JSON Pointer\n * WARNING: this is an incomplete implementation\n * @param {Array.<string | number>} path\n * @return {string}\n */\nexport function compileJSONPointer (path) {\n  return path\n    .map(p => ('/' + String(p)\n      .replace(/~/g, '~0')\n      .replace(/\\//g, '~1')\n    ))\n    .join('')\n}\n\n/**\n * Get the applied color given a color name or code\n * Source: https://stackoverflow.com/questions/6386090/validating-css-color-names/33184805\n * @param {string} color\n * @returns {string | null} returns the color if the input is a valid\n *                   color, and returns null otherwise. Example output:\n *                   'rgba(255,0,0,0.7)' or 'rgb(255,0,0)'\n */\nexport function getColorCSS (color) {\n  const ele = document.createElement('div')\n  ele.style.color = color\n  return ele.style.color.split(/\\s+/).join('').toLowerCase() || null\n}\n\n/**\n * Test if a string contains a valid color name or code.\n * @param {string} color\n * @returns {boolean} returns true if a valid color, false otherwise\n */\nexport function isValidColor (color) {\n  return !!getColorCSS(color)\n}\n\n/**\n * Make a tooltip for a field based on the field's schema.\n * @param {object} schema JSON schema\n * @param {string} [locale] Locale code (for example, zh-CN)\n * @returns {string} Field tooltip, may be empty string if all relevant schema properties are missing\n */\nexport function makeFieldTooltip (schema, locale) {\n  if (!schema) {\n    return ''\n  }\n\n  let tooltip = ''\n  if (schema.title) {\n    tooltip += schema.title\n  }\n\n  if (schema.description) {\n    if (tooltip.length > 0) {\n      tooltip += '\\n'\n    }\n    tooltip += schema.description\n  }\n\n  if (schema.default) {\n    if (tooltip.length > 0) {\n      tooltip += '\\n\\n'\n    }\n    tooltip += translate('default', undefined, locale) + '\\n'\n    tooltip += JSON.stringify(schema.default, null, 2)\n  }\n\n  if (Array.isArray(schema.examples) && schema.examples.length > 0) {\n    if (tooltip.length > 0) {\n      tooltip += '\\n\\n'\n    }\n    tooltip += translate('examples', undefined, locale) + '\\n'\n    schema.examples.forEach((example, index) => {\n      tooltip += JSON.stringify(example, null, 2)\n      if (index !== schema.examples.length - 1) {\n        tooltip += '\\n'\n      }\n    })\n  }\n\n  return tooltip\n}\n\n/**\n * Get a nested property from an object.\n * Returns undefined when the property does not exist.\n * @param {Object} object\n * @param {string[]} path\n * @return {*}\n */\nexport function get (object, path) {\n  let value = object\n\n  for (let i = 0; i < path.length && value !== undefined && value !== null; i++) {\n    value = value[path[i]]\n  }\n\n  return value\n}\n\n/**\n * Find a unique name. Suffix the name with ' (copy)', '(copy 2)', etc\n * until a unique name is found\n * @param {string} name\n * @param {Array} existingPropNames    Array with existing prop names\n */\nexport function findUniqueName (name, existingPropNames) {\n  const strippedName = name.replace(/ \\(copy( \\d+)?\\)$/, '')\n  let validName = strippedName\n  let i = 1\n\n  while (existingPropNames.indexOf(validName) !== -1) {\n    const copy = 'copy' + (i > 1 ? (' ' + i) : '')\n    validName = strippedName + ' (' + copy + ')'\n    i++\n  }\n\n  return validName\n}\n\n/**\n * Get the child paths of an array\n * @param {JSON} json\n * @param {boolean} [includeObjects=false] If true, object and array paths are returned as well\n * @return {string[]}\n */\nexport function getChildPaths (json, includeObjects) {\n  const pathsMap = {}\n\n  function getObjectChildPaths (json, pathsMap, rootPath, includeObjects) {\n    const isValue = !Array.isArray(json) && !isObject(json)\n\n    if (isValue || includeObjects) {\n      pathsMap[rootPath || ''] = true\n    }\n\n    if (isObject(json)) {\n      Object.keys(json).forEach(field => {\n        getObjectChildPaths(json[field], pathsMap, rootPath + '.' + field, includeObjects)\n      })\n    }\n  }\n\n  if (Array.isArray(json)) {\n    const max = Math.min(json.length, MAX_ITEMS_FIELDS_COLLECTION)\n    for (let i = 0; i < max; i++) {\n      const item = json[i]\n      getObjectChildPaths(item, pathsMap, '', includeObjects)\n    }\n  } else {\n    pathsMap[''] = true\n  }\n\n  return Object.keys(pathsMap).sort()\n}\n\n/**\n * Sort object keys using natural sort\n * @param {Array} array\n * @param {String} [path] JSON pointer\n * @param {'asc' | 'desc'} [direction]\n */\nexport function sort (array, path, direction) {\n  const parsedPath = path && path !== '.' ? parsePath(path) : []\n  const sign = direction === 'desc' ? -1 : 1\n\n  const sortedArray = array.slice()\n  sortedArray.sort((a, b) => {\n    const aValue = get(a, parsedPath)\n    const bValue = get(b, parsedPath)\n\n    return sign * (aValue > bValue ? 1 : aValue < bValue ? -1 : 0)\n  })\n\n  return sortedArray\n}\n\n/**\n * Sort object keys using natural sort\n * @param {Object} object\n * @param {'asc' | 'desc'} [direction]\n */\nexport function sortObjectKeys (object, direction) {\n  const sign = (direction === 'desc') ? -1 : 1\n  const sortedFields = Object.keys(object).sort((a, b) => sign * naturalSort(a, b))\n\n  const sortedObject = {}\n  sortedFields.forEach(field => {\n    sortedObject[field] = object[field]\n  })\n\n  return sortedObject\n}\n\n/**\n * Cast contents of a string to the correct type.\n * This can be a string, a number, a boolean, etc\n * @param {String} str\n * @return {*} castedStr\n * @private\n */\nexport function parseString (str) {\n  if (str === '') {\n    return ''\n  }\n\n  const lower = str.toLowerCase()\n  if (lower === 'null') {\n    return null\n  }\n  if (lower === 'true') {\n    return true\n  }\n  if (lower === 'false') {\n    return false\n  }\n\n  const num = Number(str) // will nicely fail with '123ab'\n  const numFloat = parseFloat(str) // will nicely fail with '  '\n  if (!isNaN(num) && !isNaN(numFloat)) {\n    return num\n  }\n\n  return str\n}\n\n/**\n * Test whether some field contains a timestamp in milliseconds after the year 2000.\n * @param {string} field\n * @param {number} value\n * @return {boolean}\n */\nexport function isTimestamp (field, value) {\n  return typeof value === 'number' &&\n    value > YEAR_2000 &&\n    isFinite(value) &&\n    Math.floor(value) === value &&\n    !isNaN(new Date(value).valueOf())\n}\n\n/**\n * Return a human readable document size\n * For example formatSize(7570718) outputs '7.6 MB'\n * @param {number} size\n * @return {string} Returns a human readable size\n */\nexport function formatSize (size) {\n  if (size < 900) {\n    return size.toFixed() + ' B'\n  }\n\n  const KB = size / 1000\n  if (KB < 900) {\n    return KB.toFixed(1) + ' KB'\n  }\n\n  const MB = KB / 1000\n  if (MB < 900) {\n    return MB.toFixed(1) + ' MB'\n  }\n\n  const GB = MB / 1000\n  if (GB < 900) {\n    return GB.toFixed(1) + ' GB'\n  }\n\n  const TB = GB / 1000\n  return TB.toFixed(1) + ' TB'\n}\n\n/**\n * Limit text to a maximum number of characters\n * @param {string} text\n * @param {number} maxCharacterCount\n * @return {string} Returns the limited text,\n *                  ending with '...' if the max was exceeded\n */\nexport function limitCharacters (text, maxCharacterCount) {\n  if (text.length <= maxCharacterCount) {\n    return text\n  }\n\n  return text.slice(0, maxCharacterCount) + '...'\n}\n\n/**\n * Test whether a value is an Object\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject (value) {\n  return typeof value === 'object' && value !== null && !Array.isArray(value)\n}\n\n/**\n * Helper function to test whether an array contains an item\n * @param {Array} array\n * @param {*} item\n * @return {boolean} Returns true if `item` is in `array`, returns false otherwise.\n */\nexport function contains (array, item) {\n  return array.indexOf(item) !== -1\n}\n\n/**\n * Checks if validation has changed from the previous execution\n * @param {Array} currErr current validation errors\n * @param {Array} prevErr previous validation errors\n */\nexport function isValidationErrorChanged (currErr, prevErr) {\n  if (!prevErr && !currErr) { return false }\n  if ((prevErr && !currErr) || (!prevErr && currErr)) { return true }\n  if (prevErr.length !== currErr.length) { return true }\n\n  for (let i = 0; i < currErr.length; ++i) {\n    let pErr\n    if (currErr[i].type === 'error') {\n      pErr = prevErr.find(p => p.line === currErr[i].line)\n    } else {\n      pErr = prevErr.find(p => p.dataPath === currErr[i].dataPath && p.schemaPath === currErr[i].schemaPath)\n    }\n    if (!pErr) {\n      return true\n    }\n  }\n\n  return false\n}\n\nfunction hasOwnProperty (object, key) {\n  return Object.prototype.hasOwnProperty.call(object, key)\n}\n"], "filenames": ["HISTORY.md", "src/js/util.js"], "buggy_code_start_loc": [3, 402], "buggy_code_end_loc": [3, 404], "fixing_code_start_loc": [4, 402], "fixing_code_end_loc": [9, 404], "type": "CWE-400", "message": "jsoneditor is vulnerable to Inefficient Regular Expression Complexity", "other": {"cve": {"id": "CVE-2021-3822", "sourceIdentifier": "security@huntr.dev", "published": "2021-09-27T13:15:07.940", "lastModified": "2022-07-29T16:40:17.870", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "jsoneditor is vulnerable to Inefficient Regular Expression Complexity"}, {"lang": "es", "value": "jsoneditor es vulnerable a una Complejidad de Expresiones Regulares Ineficientes"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-400"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-1333"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jsoneditoronline:jsoneditor:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.5.6", "matchCriteriaId": "66CD8218-FC66-4EAE-8F13-DE5D2ED6B631"}]}]}], "references": [{"url": "https://github.com/josdejong/jsoneditor/commit/092e386cf49f2a1450625617da8e0137ed067c3e", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/1e3ed803-b7ed-42f1-a4ea-c4c75da9de73", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/josdejong/jsoneditor/commit/092e386cf49f2a1450625617da8e0137ed067c3e"}}