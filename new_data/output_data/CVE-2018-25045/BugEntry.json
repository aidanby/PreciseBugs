{"buggy_code": ["{% load static %}\n{% load i18n %}\n{% load rest_framework %}\n\n<!DOCTYPE html>\n<html>\n  <head>\n    {% block head %}\n\n      {% block meta %}\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <meta name=\"robots\" content=\"NONE,NOARCHIVE\" />\n      {% endblock %}\n\n      <title>{% block title %}{% if name %}{{ name }} \u2013 {% endif %}Django REST framework{% endblock %}</title>\n\n      {% block style %}\n        {% block bootstrap_theme %}\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"rest_framework/css/bootstrap.min.css\" %}\"/>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"rest_framework/css/bootstrap-tweaks.css\" %}\"/>\n        {% endblock %}\n\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"rest_framework/css/prettify.css\" %}\"/>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"rest_framework/css/default.css\" %}\"/>\n        {% if code_style %}<style>{{ code_style }}</style>{% endif %}\n      {% endblock %}\n\n    {% endblock %}\n  </head>\n\n  {% block body %}\n  <body class=\"{% block bodyclass %}{% endblock %}\">\n\n    <div class=\"wrapper\">\n      {% block navbar %}\n        <div class=\"navbar navbar-static-top {% block bootstrap_navbar_variant %}navbar-inverse{% endblock %}\"\n             role=\"navigation\" aria-label=\"{% trans \"navbar\" %}\">\n          <div class=\"container\">\n            <span>\n              {% block branding %}\n                <a class='navbar-brand' rel=\"nofollow\" href='https://www.django-rest-framework.org/'>\n                    Django REST framework\n                </a>\n              {% endblock %}\n            </span>\n            <ul class=\"nav navbar-nav pull-right\">\n              {% block userlinks %}\n                {% if user.is_authenticated %}\n                  {% optional_logout request user %}\n                {% else %}\n                  {% optional_login request %}\n                {% endif %}\n              {% endblock %}\n            </ul>\n          </div>\n        </div>\n      {% endblock %}\n\n      <div class=\"container\">\n        {% block breadcrumbs %}\n          <ul class=\"breadcrumb\">\n            {% for breadcrumb_name, breadcrumb_url in breadcrumblist %}\n              {% if forloop.last %}\n                <li class=\"active\"><a href=\"{{ breadcrumb_url }}\">{{ breadcrumb_name }}</a></li>\n              {% else %}\n                <li><a href=\"{{ breadcrumb_url }}\">{{ breadcrumb_name }}</a></li>\n              {% endif %}\n            {% empty %}\n              {% block breadcrumbs_empty %}&nbsp;{% endblock breadcrumbs_empty %}\n            {% endfor %}\n          </ul>\n        {% endblock %}\n\n        <!-- Content -->\n        <div id=\"content\" role=\"main\" aria-label=\"{% trans \"content\" %}\">\n          {% block content %}\n\n          <div class=\"region\"  aria-label=\"{% trans \"request form\" %}\">\n          {% if 'GET' in allowed_methods %}\n            <form id=\"get-form\" class=\"pull-right\">\n              <fieldset>\n                {% if api_settings.URL_FORMAT_OVERRIDE %}\n                  <div class=\"btn-group format-selection\">\n                    <a class=\"btn btn-primary js-tooltip\" href=\"{{ request.get_full_path }}\" rel=\"nofollow\" title=\"Make a GET request on the {{ name }} resource\">GET</a>\n\n                    <button class=\"btn btn-primary dropdown-toggle js-tooltip\" data-toggle=\"dropdown\" title=\"Specify a format for the GET request\">\n                      <span class=\"caret\"></span>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                      {% for format in available_formats %}\n                        <li>\n                          <a class=\"js-tooltip format-option\" href=\"{% add_query_param request api_settings.URL_FORMAT_OVERRIDE format %}\" rel=\"nofollow\" title=\"Make a GET request on the {{ name }} resource with the format set to `{{ format }}`\">{{ format }}</a>\n                        </li>\n                      {% endfor %}\n                    </ul>\n                  </div>\n                {% else %}\n                  <a class=\"btn btn-primary js-tooltip\" href=\"{{ request.get_full_path }}\" rel=\"nofollow\" title=\"Make a GET request on the {{ name }} resource\">GET</a>\n                {% endif %}\n              </fieldset>\n            </form>\n          {% endif %}\n\n          {% if options_form %}\n            <form class=\"button-form\" action=\"{{ request.get_full_path }}\" data-method=\"OPTIONS\">\n              <button class=\"btn btn-primary js-tooltip\" title=\"Make an OPTIONS request on the {{ name }} resource\">OPTIONS</button>\n            </form>\n          {% endif %}\n\n          {% if delete_form %}\n            <button class=\"btn btn-danger button-form js-tooltip\" title=\"Make a DELETE request on the {{ name }} resource\" data-toggle=\"modal\" data-target=\"#deleteModal\">DELETE</button>\n\n            <!-- Delete Modal -->\n            <div class=\"modal fade\" id=\"deleteModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n              <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                  <div class=\"modal-body\">\n                    <h4 class=\"text-center\">Are you sure you want to delete this {{ name }}?</h4>\n                  </div>\n                  <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Cancel</button>\n                    <form class=\"button-form\" action=\"{{ request.get_full_path }}\" data-method=\"DELETE\">\n                      <button class=\"btn btn-danger\">Delete</button>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          {% endif %}\n\n          {% if extra_actions %}\n            <div class=\"dropdown\" style=\"float: right; margin-right: 10px\">\n              <button class=\"btn btn-default\" id=\"extra-actions-menu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n                {% trans \"Extra Actions\" %}\n                <span class=\"caret\"></span>\n              </button>\n              <ul class=\"dropdown-menu\" aria-labelledby=\"extra-actions-menu\">\n                {% for action_name, url in extra_actions|items %}\n                <li><a href=\"{{ url }}\">{{ action_name }}</a></li>\n                {% endfor %}\n              </ul>\n            </div>\n          {% endif %}\n\n          {% if filter_form %}\n            <button style=\"float: right; margin-right: 10px\" data-toggle=\"modal\" data-target=\"#filtersModal\" class=\"btn btn-default\">\n              <span class=\"glyphicon glyphicon-wrench\" aria-hidden=\"true\"></span>\n              {% trans \"Filters\" %}\n            </button>\n          {% endif %}\n          </div>\n\n            <div class=\"content-main\" role=\"main\"  aria-label=\"{% trans \"main content\" %}\">\n              <div class=\"page-header\">\n                <h1>{{ name }}</h1>\n              </div>\n              <div style=\"float:left\">\n                {% block description %}\n                  {{ description }}\n                {% endblock %}\n              </div>\n\n              {% if paginator %}\n                <nav style=\"float: right\">\n                  {% get_pagination_html paginator %}\n                </nav>\n              {% endif %}\n\n              <div class=\"request-info\" style=\"clear: both\" aria-label=\"{% trans \"request info\" %}\">\n                <pre class=\"prettyprint\"><b>{{ request.method }}</b> {{ request.get_full_path }}</pre>\n              </div>\n\n              <div class=\"response-info\" aria-label=\"{% trans \"response info\" %}\">\n                <pre class=\"prettyprint\"><span class=\"meta nocode\"><b>HTTP {{ response.status_code }} {{ response.status_text }}</b>{% autoescape off %}{% for key, val in response_headers|items %}\n<b>{{ key }}:</b> <span class=\"lit\">{{ val|break_long_headers|urlize_quoted_links }}</span>{% endfor %}\n\n</span>{{ content|urlize_quoted_links }}</pre>{% endautoescape %}\n              </div>\n            </div>\n\n            {% if display_edit_forms %}\n              {% if post_form or raw_data_post_form %}\n                <div {% if post_form %}class=\"tabbable\"{% endif %}>\n                  {% if post_form %}\n                    <ul class=\"nav nav-tabs form-switcher\">\n                      <li>\n                        <a name='html-tab' href=\"#post-object-form\" data-toggle=\"tab\">HTML form</a>\n                      </li>\n                      <li>\n                        <a name='raw-tab' href=\"#post-generic-content-form\" data-toggle=\"tab\">Raw data</a>\n                      </li>\n                    </ul>\n                  {% endif %}\n\n                  <div class=\"well tab-content\">\n                    {% if post_form %}\n                      <div class=\"tab-pane\" id=\"post-object-form\">\n                        {% with form=post_form %}\n                          <form action=\"{{ request.get_full_path }}\" method=\"POST\" enctype=\"multipart/form-data\" class=\"form-horizontal\" novalidate>\n                            <fieldset>\n                              {% csrf_token %}\n                              {{ post_form }}\n                              <div class=\"form-actions\">\n                                <button class=\"btn btn-primary js-tooltip\" title=\"Make a POST request on the {{ name }} resource\">POST</button>\n                              </div>\n                            </fieldset>\n                          </form>\n                        {% endwith %}\n                      </div>\n                    {% endif %}\n\n                    <div {% if post_form %}class=\"tab-pane\"{% endif %} id=\"post-generic-content-form\">\n                      {% with form=raw_data_post_form %}\n                        <form action=\"{{ request.get_full_path }}\" method=\"POST\" class=\"form-horizontal\">\n                          <fieldset>\n                            {% include \"rest_framework/raw_data_form.html\" %}\n                            <div class=\"form-actions\">\n                              <button class=\"btn btn-primary js-tooltip\" title=\"Make a POST request on the {{ name }} resource\">POST</button>\n                            </div>\n                          </fieldset>\n                        </form>\n                      {% endwith %}\n                    </div>\n                  </div>\n                </div>\n              {% endif %}\n\n              {% if put_form or raw_data_put_form or raw_data_patch_form %}\n                <div {% if put_form %}class=\"tabbable\"{% endif %}>\n                  {% if put_form %}\n                    <ul class=\"nav nav-tabs form-switcher\">\n                      <li>\n                        <a name='html-tab' href=\"#put-object-form\" data-toggle=\"tab\">HTML form</a>\n                      </li>\n                      <li>\n                        <a  name='raw-tab' href=\"#put-generic-content-form\" data-toggle=\"tab\">Raw data</a>\n                      </li>\n                    </ul>\n                  {% endif %}\n\n                  <div class=\"well tab-content\">\n                    {% if put_form %}\n                      <div class=\"tab-pane\" id=\"put-object-form\">\n                        <form action=\"{{ request.get_full_path }}\" data-method=\"PUT\" enctype=\"multipart/form-data\" class=\"form-horizontal\" novalidate>\n                          <fieldset>\n                            {{ put_form }}\n                            <div class=\"form-actions\">\n                              <button class=\"btn btn-primary js-tooltip\" title=\"Make a PUT request on the {{ name }} resource\">PUT</button>\n                            </div>\n                          </fieldset>\n                        </form>\n                      </div>\n                    {% endif %}\n\n                    <div {% if put_form %}class=\"tab-pane\"{% endif %} id=\"put-generic-content-form\">\n                      {% with form=raw_data_put_or_patch_form %}\n                        <form action=\"{{ request.get_full_path }}\" data-method=\"PUT\" class=\"form-horizontal\">\n                          <fieldset>\n                            {% include \"rest_framework/raw_data_form.html\" %}\n                            <div class=\"form-actions\">\n                              {% if raw_data_put_form %}\n                                <button class=\"btn btn-primary js-tooltip\" title=\"Make a PUT request on the {{ name }} resource\">PUT</button>\n                              {% endif %}\n                              {% if raw_data_patch_form %}\n                              <button data-method=\"PATCH\" class=\"btn btn-primary js-tooltip\" title=\"Make a PATCH request on the {{ name }} resource\">PATCH</button>\n                                {% endif %}\n                            </div>\n                          </fieldset>\n                        </form>\n                      {% endwith %}\n                    </div>\n                  </div>\n                </div>\n              {% endif %}\n            {% endif %}\n          {% endblock content %}\n        </div><!-- /.content -->\n      </div><!-- /.container -->\n    </div><!-- ./wrapper -->\n\n    {% if filter_form %}\n      {{ filter_form }}\n    {% endif %}\n\n    {% block script %}\n      <script>\n        window.drf = {\n          csrfHeaderName: \"{{ csrf_header_name|default:'X-CSRFToken' }}\",\n          csrfCookieName: \"{{ csrf_cookie_name|default:'csrftoken' }}\"\n        };\n      </script>\n      <script src=\"{% static \"rest_framework/js/jquery-3.3.1.min.js\" %}\"></script>\n      <script src=\"{% static \"rest_framework/js/ajax-form.js\" %}\"></script>\n      <script src=\"{% static \"rest_framework/js/csrf.js\" %}\"></script>\n      <script src=\"{% static \"rest_framework/js/bootstrap.min.js\" %}\"></script>\n      <script src=\"{% static \"rest_framework/js/prettify-min.js\" %}\"></script>\n      <script src=\"{% static \"rest_framework/js/default.js\" %}\"></script>\n      <script>\n        $(document).ready(function() {\n          $('form').ajaxForm();\n        });\n      </script>\n    {% endblock %}\n\n  </body>\n  {% endblock %}\n</html>\n", "from __future__ import absolute_import, unicode_literals\n\nimport re\nfrom collections import OrderedDict\n\nfrom django import template\nfrom django.template import loader\nfrom django.urls import NoReverseMatch, reverse\nfrom django.utils import six\nfrom django.utils.encoding import force_text, iri_to_uri\nfrom django.utils.html import escape, format_html, smart_urlquote\nfrom django.utils.safestring import SafeData, mark_safe\n\nfrom rest_framework.compat import apply_markdown, pygments_highlight\nfrom rest_framework.renderers import HTMLFormRenderer\nfrom rest_framework.utils.urls import replace_query_param\n\nregister = template.Library()\n\n# Regex for adding classes to html snippets\nclass_re = re.compile(r'(?<=class=[\"\\'])(.*)(?=[\"\\'])')\n\n\n@register.tag(name='code')\ndef highlight_code(parser, token):\n    code = token.split_contents()[-1]\n    nodelist = parser.parse(('endcode',))\n    parser.delete_first_token()\n    return CodeNode(code, nodelist)\n\n\nclass CodeNode(template.Node):\n    style = 'emacs'\n\n    def __init__(self, lang, code):\n        self.lang = lang\n        self.nodelist = code\n\n    def render(self, context):\n        text = self.nodelist.render(context)\n        return pygments_highlight(text, self.lang, self.style)\n\n\n@register.filter()\ndef with_location(fields, location):\n    return [\n        field for field in fields\n        if field.location == location\n    ]\n\n\n@register.simple_tag\ndef form_for_link(link):\n    import coreschema\n    properties = OrderedDict([\n        (field.name, field.schema or coreschema.String())\n        for field in link.fields\n    ])\n    required = [\n        field.name\n        for field in link.fields\n        if field.required\n    ]\n    schema = coreschema.Object(properties=properties, required=required)\n    return mark_safe(coreschema.render_to_form(schema))\n\n\n@register.simple_tag\ndef render_markdown(markdown_text):\n    if apply_markdown is None:\n        return markdown_text\n    return mark_safe(apply_markdown(markdown_text))\n\n\n@register.simple_tag\ndef get_pagination_html(pager):\n    return pager.to_html()\n\n\n@register.simple_tag\ndef render_form(serializer, template_pack=None):\n    style = {'template_pack': template_pack} if template_pack else {}\n    renderer = HTMLFormRenderer()\n    return renderer.render(serializer.data, None, {'style': style})\n\n\n@register.simple_tag\ndef render_field(field, style):\n    renderer = style.get('renderer', HTMLFormRenderer())\n    return renderer.render_field(field, style)\n\n\n@register.simple_tag\ndef optional_login(request):\n    \"\"\"\n    Include a login snippet if REST framework's login view is in the URLconf.\n    \"\"\"\n    try:\n        login_url = reverse('rest_framework:login')\n    except NoReverseMatch:\n        return ''\n\n    snippet = \"<li><a href='{href}?next={next}'>Log in</a></li>\"\n    snippet = format_html(snippet, href=login_url, next=escape(request.path))\n\n    return mark_safe(snippet)\n\n\n@register.simple_tag\ndef optional_docs_login(request):\n    \"\"\"\n    Include a login snippet if REST framework's login view is in the URLconf.\n    \"\"\"\n    try:\n        login_url = reverse('rest_framework:login')\n    except NoReverseMatch:\n        return 'log in'\n\n    snippet = \"<a href='{href}?next={next}'>log in</a>\"\n    snippet = format_html(snippet, href=login_url, next=escape(request.path))\n\n    return mark_safe(snippet)\n\n\n@register.simple_tag\ndef optional_logout(request, user):\n    \"\"\"\n    Include a logout snippet if REST framework's logout view is in the URLconf.\n    \"\"\"\n    try:\n        logout_url = reverse('rest_framework:logout')\n    except NoReverseMatch:\n        snippet = format_html('<li class=\"navbar-text\">{user}</li>', user=escape(user))\n        return mark_safe(snippet)\n\n    snippet = \"\"\"<li class=\"dropdown\">\n        <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n            {user}\n            <b class=\"caret\"></b>\n        </a>\n        <ul class=\"dropdown-menu\">\n            <li><a href='{href}?next={next}'>Log out</a></li>\n        </ul>\n    </li>\"\"\"\n    snippet = format_html(snippet, user=escape(user), href=logout_url, next=escape(request.path))\n\n    return mark_safe(snippet)\n\n\n@register.simple_tag\ndef add_query_param(request, key, val):\n    \"\"\"\n    Add a query parameter to the current request url, and return the new url.\n    \"\"\"\n    iri = request.get_full_path()\n    uri = iri_to_uri(iri)\n    return escape(replace_query_param(uri, key, val))\n\n\n@register.filter\ndef as_string(value):\n    if value is None:\n        return ''\n    return '%s' % value\n\n\n@register.filter\ndef as_list_of_strings(value):\n    return [\n        '' if (item is None) else ('%s' % item)\n        for item in value\n    ]\n\n\n@register.filter\ndef add_class(value, css_class):\n    \"\"\"\n    https://stackoverflow.com/questions/4124220/django-adding-css-classes-when-rendering-form-fields-in-a-template\n\n    Inserts classes into template variables that contain HTML tags,\n    useful for modifying forms without needing to change the Form objects.\n\n    Usage:\n\n        {{ field.label_tag|add_class:\"control-label\" }}\n\n    In the case of REST Framework, the filter is used to add Bootstrap-specific\n    classes to the forms.\n    \"\"\"\n    html = six.text_type(value)\n    match = class_re.search(html)\n    if match:\n        m = re.search(r'^%s$|^%s\\s|\\s%s\\s|\\s%s$' % (css_class, css_class,\n                                                    css_class, css_class),\n                      match.group(1))\n        if not m:\n            return mark_safe(class_re.sub(match.group(1) + \" \" + css_class,\n                                          html))\n    else:\n        return mark_safe(html.replace('>', ' class=\"%s\">' % css_class, 1))\n    return value\n\n\n@register.filter\ndef format_value(value):\n    if getattr(value, 'is_hyperlink', False):\n        name = six.text_type(value.obj)\n        return mark_safe('<a href=%s>%s</a>' % (value, escape(name)))\n    if value is None or isinstance(value, bool):\n        return mark_safe('<code>%s</code>' % {True: 'true', False: 'false', None: 'null'}[value])\n    elif isinstance(value, list):\n        if any([isinstance(item, (list, dict)) for item in value]):\n            template = loader.get_template('rest_framework/admin/list_value.html')\n        else:\n            template = loader.get_template('rest_framework/admin/simple_list_value.html')\n        context = {'value': value}\n        return template.render(context)\n    elif isinstance(value, dict):\n        template = loader.get_template('rest_framework/admin/dict_value.html')\n        context = {'value': value}\n        return template.render(context)\n    elif isinstance(value, six.string_types):\n        if (\n            (value.startswith('http:') or value.startswith('https:')) and not\n            re.search(r'\\s', value)\n        ):\n            return mark_safe('<a href=\"{value}\">{value}</a>'.format(value=escape(value)))\n        elif '@' in value and not re.search(r'\\s', value):\n            return mark_safe('<a href=\"mailto:{value}\">{value}</a>'.format(value=escape(value)))\n        elif '\\n' in value:\n            return mark_safe('<pre>%s</pre>' % escape(value))\n    return six.text_type(value)\n\n\n@register.filter\ndef items(value):\n    \"\"\"\n    Simple filter to return the items of the dict. Useful when the dict may\n    have a key 'items' which is resolved first in Django tempalte dot-notation\n    lookup.  See issue #4931\n    Also see: https://stackoverflow.com/questions/15416662/django-template-loop-over-dictionary-items-with-items-as-key\n    \"\"\"\n    if value is None:\n        # `{% for k, v in value.items %}` doesn't raise when value is None or\n        # not in the context, so neither should `{% for k, v in value|items %}`\n        return []\n    return value.items()\n\n\n@register.filter\ndef data(value):\n    \"\"\"\n    Simple filter to access `data` attribute of object,\n    specifically coreapi.Document.\n\n    As per `items` filter above, allows accessing `document.data` when\n    Document contains Link keyed-at \"data\".\n\n    See issue #5395\n    \"\"\"\n    return value.data\n\n\n@register.filter\ndef schema_links(section, sec_key=None):\n    \"\"\"\n    Recursively find every link in a schema, even nested.\n    \"\"\"\n    NESTED_FORMAT = '%s > %s'  # this format is used in docs/js/api.js:normalizeKeys\n    links = section.links\n    if section.data:\n        data = section.data.items()\n        for sub_section_key, sub_section in data:\n            new_links = schema_links(sub_section, sec_key=sub_section_key)\n            links.update(new_links)\n\n    if sec_key is not None:\n        new_links = OrderedDict()\n        for link_key, link in links.items():\n            new_key = NESTED_FORMAT % (sec_key, link_key)\n            new_links.update({new_key: link})\n        return new_links\n\n    return links\n\n\n@register.filter\ndef add_nested_class(value):\n    if isinstance(value, dict):\n        return 'class=nested'\n    if isinstance(value, list) and any([isinstance(item, (list, dict)) for item in value]):\n        return 'class=nested'\n    return ''\n\n\n# Bunch of stuff cloned from urlize\nTRAILING_PUNCTUATION = ['.', ',', ':', ';', '.)', '\"', \"']\", \"'}\", \"'\"]\nWRAPPING_PUNCTUATION = [('(', ')'), ('<', '>'), ('[', ']'), ('&lt;', '&gt;'),\n                        ('\"', '\"'), (\"'\", \"'\")]\nword_split_re = re.compile(r'(\\s+)')\nsimple_url_re = re.compile(r'^https?://\\[?\\w', re.IGNORECASE)\nsimple_url_2_re = re.compile(r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)$', re.IGNORECASE)\nsimple_email_re = re.compile(r'^\\S+@\\S+\\.\\S+$')\n\n\ndef smart_urlquote_wrapper(matched_url):\n    \"\"\"\n    Simple wrapper for smart_urlquote. ValueError(\"Invalid IPv6 URL\") can\n    be raised here, see issue #1386\n    \"\"\"\n    try:\n        return smart_urlquote(matched_url)\n    except ValueError:\n        return None\n\n\n@register.filter(needs_autoescape=True)\ndef urlize_quoted_links(text, trim_url_limit=None, nofollow=True, autoescape=True):\n    \"\"\"\n    Converts any URLs in text into clickable links.\n\n    Works on http://, https://, www. links, and also on links ending in one of\n    the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).\n    Links can have trailing punctuation (periods, commas, close-parens) and\n    leading punctuation (opening parens) and it'll still do the right thing.\n\n    If trim_url_limit is not None, the URLs in link text longer than this limit\n    will truncated to trim_url_limit-3 characters and appended with an ellipsis.\n\n    If nofollow is True, the URLs in link text will get a rel=\"nofollow\"\n    attribute.\n\n    If autoescape is True, the link text and URLs will get autoescaped.\n    \"\"\"\n    def trim_url(x, limit=trim_url_limit):\n        return limit is not None and (len(x) > limit and ('%s...' % x[:max(0, limit - 3)])) or x\n\n    safe_input = isinstance(text, SafeData)\n    words = word_split_re.split(force_text(text))\n    for i, word in enumerate(words):\n        if '.' in word or '@' in word or ':' in word:\n            # Deal with punctuation.\n            lead, middle, trail = '', word, ''\n            for punctuation in TRAILING_PUNCTUATION:\n                if middle.endswith(punctuation):\n                    middle = middle[:-len(punctuation)]\n                    trail = punctuation + trail\n            for opening, closing in WRAPPING_PUNCTUATION:\n                if middle.startswith(opening):\n                    middle = middle[len(opening):]\n                    lead = lead + opening\n                # Keep parentheses at the end only if they're balanced.\n                if (\n                    middle.endswith(closing) and\n                    middle.count(closing) == middle.count(opening) + 1\n                ):\n                    middle = middle[:-len(closing)]\n                    trail = closing + trail\n\n            # Make URL we want to point to.\n            url = None\n            nofollow_attr = ' rel=\"nofollow\"' if nofollow else ''\n            if simple_url_re.match(middle):\n                url = smart_urlquote_wrapper(middle)\n            elif simple_url_2_re.match(middle):\n                url = smart_urlquote_wrapper('http://%s' % middle)\n            elif ':' not in middle and simple_email_re.match(middle):\n                local, domain = middle.rsplit('@', 1)\n                try:\n                    domain = domain.encode('idna').decode('ascii')\n                except UnicodeError:\n                    continue\n                url = 'mailto:%s@%s' % (local, domain)\n                nofollow_attr = ''\n\n            # Make link.\n            if url:\n                trimmed = trim_url(middle)\n                if autoescape and not safe_input:\n                    lead, trail = escape(lead), escape(trail)\n                    url, trimmed = escape(url), escape(trimmed)\n                middle = '<a href=\"%s\"%s>%s</a>' % (url, nofollow_attr, trimmed)\n                words[i] = mark_safe('%s%s%s' % (lead, middle, trail))\n            else:\n                if safe_input:\n                    words[i] = mark_safe(word)\n                elif autoescape:\n                    words[i] = escape(word)\n        elif safe_input:\n            words[i] = mark_safe(word)\n        elif autoescape:\n            words[i] = escape(word)\n    return ''.join(words)\n\n\n@register.filter\ndef break_long_headers(header):\n    \"\"\"\n    Breaks headers longer than 160 characters (~page length)\n    when possible (are comma separated)\n    \"\"\"\n    if len(header) > 160 and ',' in header:\n        header = mark_safe('<br> ' + ', <br>'.join(header.split(',')))\n    return header\n", "# encoding: utf-8\nfrom __future__ import unicode_literals\n\nimport unittest\n\nfrom django.template import Context, Template\nfrom django.test import TestCase\n\nfrom rest_framework.compat import coreapi, coreschema\nfrom rest_framework.relations import Hyperlink\nfrom rest_framework.templatetags import rest_framework\nfrom rest_framework.templatetags.rest_framework import (\n    add_nested_class, add_query_param, as_string, break_long_headers,\n    format_value, get_pagination_html, schema_links, urlize_quoted_links\n)\nfrom rest_framework.test import APIRequestFactory\n\nfactory = APIRequestFactory()\n\n\ndef format_html(html):\n    \"\"\"\n    Helper function that formats HTML in order for easier comparison\n    :param html: raw HTML text to be formatted\n    :return: Cleaned HTML with no newlines or spaces\n    \"\"\"\n    return html.replace('\\n', '').replace(' ', '')\n\n\nclass TemplateTagTests(TestCase):\n\n    def test_add_query_param_with_non_latin_character(self):\n        # Ensure we don't double-escape non-latin characters\n        # that are present in the querystring.\n        # See #1314.\n        request = factory.get(\"/\", {'q': '\u67e5\u8be2'})\n        json_url = add_query_param(request, \"format\", \"json\")\n        self.assertIn(\"q=%E6%9F%A5%E8%AF%A2\", json_url)\n        self.assertIn(\"format=json\", json_url)\n\n    def test_format_value_boolean_or_none(self):\n        \"\"\"\n        Tests format_value with booleans and None\n        \"\"\"\n        self.assertEqual(format_value(True), '<code>true</code>')\n        self.assertEqual(format_value(False), '<code>false</code>')\n        self.assertEqual(format_value(None), '<code>null</code>')\n\n    def test_format_value_hyperlink(self):\n        \"\"\"\n        Tests format_value with a URL\n        \"\"\"\n        url = 'http://url.com'\n        name = 'name_of_url'\n        hyperlink = Hyperlink(url, name)\n        self.assertEqual(format_value(hyperlink), '<a href=%s>%s</a>' % (url, name))\n\n    def test_format_value_list(self):\n        \"\"\"\n        Tests format_value with a list of strings\n        \"\"\"\n        list_items = ['item1', 'item2', 'item3']\n        self.assertEqual(format_value(list_items), '\\n item1, item2, item3\\n')\n        self.assertEqual(format_value([]), '\\n\\n')\n\n    def test_format_value_dict(self):\n        \"\"\"\n        Tests format_value with a dict\n        \"\"\"\n        test_dict = {'a': 'b'}\n        expected_dict_format = \"\"\"\n        <table class=\"table table-striped\">\n            <tbody>\n                <tr>\n                    <th>a</th>\n                    <td>b</td>\n                </tr>\n            </tbody>\n        </table>\"\"\"\n        self.assertEqual(\n            format_html(format_value(test_dict)),\n            format_html(expected_dict_format)\n        )\n\n    def test_format_value_table(self):\n        \"\"\"\n        Tests format_value with a list of lists/dicts\n        \"\"\"\n        list_of_lists = [['list1'], ['list2'], ['list3']]\n        expected_list_format = \"\"\"\n        <tableclass=\"tabletable-striped\">\n            <tbody>\n               <tr>\n                  <th>0</th>\n                  <td>list1</td>\n               </tr>\n               <tr>\n                  <th>1</th>\n                  <td>list2</td>\n               </tr>\n               <tr>\n                  <th>2</th>\n                  <td>list3</td>\n               </tr>\n            </tbody>\n            </table>\"\"\"\n        self.assertEqual(\n            format_html(format_value(list_of_lists)),\n            format_html(expected_list_format)\n        )\n\n        expected_dict_format = \"\"\"\n        <tableclass=\"tabletable-striped\">\n            <tbody>\n                <tr>\n                    <th>0</th>\n                    <td>\n                        <tableclass=\"tabletable-striped\">\n                            <tbody>\n                                <tr>\n                                    <th>item1</th>\n                                    <td>value1</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </td>\n                </tr>\n                <tr>\n                    <th>1</th>\n                    <td>\n                        <tableclass=\"tabletable-striped\">\n                            <tbody>\n                                <tr>\n                                    <th>item2</th>\n                                    <td>value2</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </td>\n                </tr>\n                <tr>\n                    <th>2</th>\n                    <td>\n                        <tableclass=\"tabletable-striped\">\n                            <tbody>\n                                <tr>\n                                    <th>item3</th>\n                                    <td>value3</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\"\"\"\n\n        list_of_dicts = [{'item1': 'value1'}, {'item2': 'value2'}, {'item3': 'value3'}]\n        self.assertEqual(\n            format_html(format_value(list_of_dicts)),\n            format_html(expected_dict_format)\n        )\n\n    def test_format_value_simple_string(self):\n        \"\"\"\n        Tests format_value with a simple string\n        \"\"\"\n        simple_string = 'this is an example of a string'\n        self.assertEqual(format_value(simple_string), simple_string)\n\n    def test_format_value_string_hyperlink(self):\n        \"\"\"\n        Tests format_value with a url\n        \"\"\"\n        url = 'http://www.example.com'\n        self.assertEqual(format_value(url), '<a href=\"http://www.example.com\">http://www.example.com</a>')\n\n    def test_format_value_string_email(self):\n        \"\"\"\n        Tests format_value with an email address\n        \"\"\"\n        email = 'something@somewhere.com'\n        self.assertEqual(format_value(email), '<a href=\"mailto:something@somewhere.com\">something@somewhere.com</a>')\n\n    def test_format_value_string_newlines(self):\n        \"\"\"\n        Tests format_value with a string with newline characters\n        :return:\n        \"\"\"\n        text = 'Dear user, \\n this is a message \\n from,\\nsomeone'\n        self.assertEqual(format_value(text), '<pre>Dear user, \\n this is a message \\n from,\\nsomeone</pre>')\n\n    def test_format_value_object(self):\n        \"\"\"\n        Tests that format_value with a object returns the object's __str__ method\n        \"\"\"\n        obj = object()\n        self.assertEqual(format_value(obj), obj.__str__())\n\n    def test_add_nested_class(self):\n        \"\"\"\n        Tests that add_nested_class returns the proper class\n        \"\"\"\n        positive_cases = [\n            [['item']],\n            [{'item1': 'value1'}],\n            {'item1': 'value1'}\n        ]\n\n        negative_cases = [\n            ['list'],\n            '',\n            None,\n            True,\n            False\n        ]\n\n        for case in positive_cases:\n            self.assertEqual(add_nested_class(case), 'class=nested')\n\n        for case in negative_cases:\n            self.assertEqual(add_nested_class(case), '')\n\n    def test_as_string_with_none(self):\n        result = as_string(None)\n        assert result == ''\n\n    def test_get_pagination_html(self):\n        class MockPager(object):\n            def __init__(self):\n                self.called = False\n\n            def to_html(self):\n                self.called = True\n\n        pager = MockPager()\n        get_pagination_html(pager)\n        assert pager.called is True\n\n    def test_break_long_lines(self):\n        header = 'long test header,' * 20\n        expected_header = '<br> ' + ', <br>'.join(header.split(','))\n        assert break_long_headers(header) == expected_header\n\n\nclass Issue1386Tests(TestCase):\n    \"\"\"\n    Covers #1386\n    \"\"\"\n\n    def test_issue_1386(self):\n        \"\"\"\n        Test function urlize_quoted_links with different args\n        \"\"\"\n        correct_urls = [\n            \"asdf.com\",\n            \"asdf.net\",\n            \"www.as_df.org\",\n            \"as.d8f.ghj8.gov\",\n        ]\n        for i in correct_urls:\n            res = urlize_quoted_links(i)\n            self.assertNotEqual(res, i)\n            self.assertIn(i, res)\n\n        incorrect_urls = [\n            \"mailto://asdf@fdf.com\",\n            \"asdf.netnet\",\n        ]\n        for i in incorrect_urls:\n            res = urlize_quoted_links(i)\n            self.assertEqual(i, res)\n\n        # example from issue #1386, this shouldn't raise an exception\n        urlize_quoted_links(\"asdf:[/p]zxcv.com\")\n\n    def test_smart_urlquote_wrapper_handles_value_error(self):\n        def mock_smart_urlquote(url):\n            raise ValueError\n\n        old = rest_framework.smart_urlquote\n        rest_framework.smart_urlquote = mock_smart_urlquote\n        assert rest_framework.smart_urlquote_wrapper('test') is None\n        rest_framework.smart_urlquote = old\n\n\nclass URLizerTests(TestCase):\n    \"\"\"\n    Test if JSON URLs are transformed into links well\n    \"\"\"\n    def _urlize_dict_check(self, data):\n        \"\"\"\n        For all items in dict test assert that the value is urlized key\n        \"\"\"\n        for original, urlized in data.items():\n            assert urlize_quoted_links(original, nofollow=False) == urlized\n\n    def test_json_with_url(self):\n        \"\"\"\n        Test if JSON URLs are transformed into links well\n        \"\"\"\n        data = {}\n        data['\"url\": \"http://api/users/1/\", '] = \\\n            '&quot;url&quot;: &quot;<a href=\"http://api/users/1/\">http://api/users/1/</a>&quot;, '\n        data['\"foo_set\": [\\n    \"http://api/foos/1/\"\\n], '] = \\\n            '&quot;foo_set&quot;: [\\n    &quot;<a href=\"http://api/foos/1/\">http://api/foos/1/</a>&quot;\\n], '\n        self._urlize_dict_check(data)\n\n    def test_template_render_with_noautoescape(self):\n        \"\"\"\n        Test if the autoescape value is getting passed to urlize_quoted_links filter.\n        \"\"\"\n        template = Template(\"{% load rest_framework %}\"\n                            \"{% autoescape off %}{{ content|urlize_quoted_links }}\"\n                            \"{% endautoescape %}\")\n        rendered = template.render(Context({'content': '\"http://example.com\"'}))\n        assert rendered == '\"<a href=\"http://example.com\" rel=\"nofollow\">http://example.com</a>\"'\n\n\n@unittest.skipUnless(coreapi, 'coreapi is not installed')\nclass SchemaLinksTests(TestCase):\n\n    def test_schema_with_empty_links(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'users': {\n                    'list': {}\n                }\n            }\n        )\n        section = schema['users']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 0\n\n    def test_single_action(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'users': {\n                    'list': coreapi.Link(\n                        url='/users/',\n                        action='get',\n                        fields=[]\n                    )\n                }\n            }\n        )\n        section = schema['users']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 1\n        assert 'list' in flat_links\n\n    def test_default_actions(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'users': {\n                    'create': coreapi.Link(\n                        url='/users/',\n                        action='post',\n                        fields=[]\n                    ),\n                    'list': coreapi.Link(\n                        url='/users/',\n                        action='get',\n                        fields=[]\n                    ),\n                    'read': coreapi.Link(\n                        url='/users/{id}/',\n                        action='get',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    ),\n                    'update': coreapi.Link(\n                        url='/users/{id}/',\n                        action='patch',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    )\n                }\n            }\n        )\n        section = schema['users']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 4\n        assert 'list' in flat_links\n        assert 'create' in flat_links\n        assert 'read' in flat_links\n        assert 'update' in flat_links\n\n    def test_default_actions_and_single_custom_action(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'users': {\n                    'create': coreapi.Link(\n                        url='/users/',\n                        action='post',\n                        fields=[]\n                    ),\n                    'list': coreapi.Link(\n                        url='/users/',\n                        action='get',\n                        fields=[]\n                    ),\n                    'read': coreapi.Link(\n                        url='/users/{id}/',\n                        action='get',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    ),\n                    'update': coreapi.Link(\n                        url='/users/{id}/',\n                        action='patch',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    ),\n                    'friends': coreapi.Link(\n                        url='/users/{id}/friends',\n                        action='get',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    )\n                }\n            }\n        )\n        section = schema['users']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 5\n        assert 'list' in flat_links\n        assert 'create' in flat_links\n        assert 'read' in flat_links\n        assert 'update' in flat_links\n        assert 'friends' in flat_links\n\n    def test_default_actions_and_single_custom_action_two_methods(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'users': {\n                    'create': coreapi.Link(\n                        url='/users/',\n                        action='post',\n                        fields=[]\n                    ),\n                    'list': coreapi.Link(\n                        url='/users/',\n                        action='get',\n                        fields=[]\n                    ),\n                    'read': coreapi.Link(\n                        url='/users/{id}/',\n                        action='get',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    ),\n                    'update': coreapi.Link(\n                        url='/users/{id}/',\n                        action='patch',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    ),\n                    'friends': {\n                        'list': coreapi.Link(\n                            url='/users/{id}/friends',\n                            action='get',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        ),\n                        'create': coreapi.Link(\n                            url='/users/{id}/friends',\n                            action='post',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        )\n                    }\n                }\n            }\n        )\n        section = schema['users']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 6\n        assert 'list' in flat_links\n        assert 'create' in flat_links\n        assert 'read' in flat_links\n        assert 'update' in flat_links\n        assert 'friends > list' in flat_links\n        assert 'friends > create' in flat_links\n\n    def test_multiple_nested_routes(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'animals': {\n                    'dog': {\n                        'vet': {\n                            'list': coreapi.Link(\n                                url='/animals/dog/{id}/vet',\n                                action='get',\n                                fields=[\n                                    coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                                ]\n                            )\n                        },\n                        'read': coreapi.Link(\n                            url='/animals/dog/{id}',\n                            action='get',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        )\n                    },\n                    'cat': {\n                        'list': coreapi.Link(\n                            url='/animals/cat/',\n                            action='get',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        ),\n                        'create': coreapi.Link(\n                            url='/aniamls/cat',\n                            action='post',\n                            fields=[]\n                        )\n                    }\n                }\n            }\n        )\n        section = schema['animals']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 4\n        assert 'cat > create' in flat_links\n        assert 'cat > list' in flat_links\n        assert 'dog > read' in flat_links\n        assert 'dog > vet > list' in flat_links\n\n    def test_multiple_resources_with_multiple_nested_routes(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'animals': {\n                    'dog': {\n                        'vet': {\n                            'list': coreapi.Link(\n                                url='/animals/dog/{id}/vet',\n                                action='get',\n                                fields=[\n                                    coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                                ]\n                            )\n                        },\n                        'read': coreapi.Link(\n                            url='/animals/dog/{id}',\n                            action='get',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        )\n                    },\n                    'cat': {\n                        'list': coreapi.Link(\n                            url='/animals/cat/',\n                            action='get',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        ),\n                        'create': coreapi.Link(\n                            url='/aniamls/cat',\n                            action='post',\n                            fields=[]\n                        )\n                    }\n                },\n                'farmers': {\n                    'silo': {\n                        'soy': {\n                            'list': coreapi.Link(\n                                url='/farmers/silo/{id}/soy',\n                                action='get',\n                                fields=[\n                                    coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                                ]\n                            )\n                        },\n                        'list': coreapi.Link(\n                            url='/farmers/silo',\n                            action='get',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        )\n                    }\n                }\n            }\n        )\n        section = schema['animals']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 4\n        assert 'cat > create' in flat_links\n        assert 'cat > list' in flat_links\n        assert 'dog > read' in flat_links\n        assert 'dog > vet > list' in flat_links\n\n        section = schema['farmers']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 2\n        assert 'silo > list' in flat_links\n        assert 'silo > soy > list' in flat_links\n"], "fixing_code": ["{% load static %}\n{% load i18n %}\n{% load rest_framework %}\n\n<!DOCTYPE html>\n<html>\n  <head>\n    {% block head %}\n\n      {% block meta %}\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <meta name=\"robots\" content=\"NONE,NOARCHIVE\" />\n      {% endblock %}\n\n      <title>{% block title %}{% if name %}{{ name }} \u2013 {% endif %}Django REST framework{% endblock %}</title>\n\n      {% block style %}\n        {% block bootstrap_theme %}\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"rest_framework/css/bootstrap.min.css\" %}\"/>\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"rest_framework/css/bootstrap-tweaks.css\" %}\"/>\n        {% endblock %}\n\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"rest_framework/css/prettify.css\" %}\"/>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"rest_framework/css/default.css\" %}\"/>\n        {% if code_style %}<style>{{ code_style }}</style>{% endif %}\n      {% endblock %}\n\n    {% endblock %}\n  </head>\n\n  {% block body %}\n  <body class=\"{% block bodyclass %}{% endblock %}\">\n\n    <div class=\"wrapper\">\n      {% block navbar %}\n        <div class=\"navbar navbar-static-top {% block bootstrap_navbar_variant %}navbar-inverse{% endblock %}\"\n             role=\"navigation\" aria-label=\"{% trans \"navbar\" %}\">\n          <div class=\"container\">\n            <span>\n              {% block branding %}\n                <a class='navbar-brand' rel=\"nofollow\" href='https://www.django-rest-framework.org/'>\n                    Django REST framework\n                </a>\n              {% endblock %}\n            </span>\n            <ul class=\"nav navbar-nav pull-right\">\n              {% block userlinks %}\n                {% if user.is_authenticated %}\n                  {% optional_logout request user %}\n                {% else %}\n                  {% optional_login request %}\n                {% endif %}\n              {% endblock %}\n            </ul>\n          </div>\n        </div>\n      {% endblock %}\n\n      <div class=\"container\">\n        {% block breadcrumbs %}\n          <ul class=\"breadcrumb\">\n            {% for breadcrumb_name, breadcrumb_url in breadcrumblist %}\n              {% if forloop.last %}\n                <li class=\"active\"><a href=\"{{ breadcrumb_url }}\">{{ breadcrumb_name }}</a></li>\n              {% else %}\n                <li><a href=\"{{ breadcrumb_url }}\">{{ breadcrumb_name }}</a></li>\n              {% endif %}\n            {% empty %}\n              {% block breadcrumbs_empty %}&nbsp;{% endblock breadcrumbs_empty %}\n            {% endfor %}\n          </ul>\n        {% endblock %}\n\n        <!-- Content -->\n        <div id=\"content\" role=\"main\" aria-label=\"{% trans \"content\" %}\">\n          {% block content %}\n\n          <div class=\"region\"  aria-label=\"{% trans \"request form\" %}\">\n          {% if 'GET' in allowed_methods %}\n            <form id=\"get-form\" class=\"pull-right\">\n              <fieldset>\n                {% if api_settings.URL_FORMAT_OVERRIDE %}\n                  <div class=\"btn-group format-selection\">\n                    <a class=\"btn btn-primary js-tooltip\" href=\"{{ request.get_full_path }}\" rel=\"nofollow\" title=\"Make a GET request on the {{ name }} resource\">GET</a>\n\n                    <button class=\"btn btn-primary dropdown-toggle js-tooltip\" data-toggle=\"dropdown\" title=\"Specify a format for the GET request\">\n                      <span class=\"caret\"></span>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                      {% for format in available_formats %}\n                        <li>\n                          <a class=\"js-tooltip format-option\" href=\"{% add_query_param request api_settings.URL_FORMAT_OVERRIDE format %}\" rel=\"nofollow\" title=\"Make a GET request on the {{ name }} resource with the format set to `{{ format }}`\">{{ format }}</a>\n                        </li>\n                      {% endfor %}\n                    </ul>\n                  </div>\n                {% else %}\n                  <a class=\"btn btn-primary js-tooltip\" href=\"{{ request.get_full_path }}\" rel=\"nofollow\" title=\"Make a GET request on the {{ name }} resource\">GET</a>\n                {% endif %}\n              </fieldset>\n            </form>\n          {% endif %}\n\n          {% if options_form %}\n            <form class=\"button-form\" action=\"{{ request.get_full_path }}\" data-method=\"OPTIONS\">\n              <button class=\"btn btn-primary js-tooltip\" title=\"Make an OPTIONS request on the {{ name }} resource\">OPTIONS</button>\n            </form>\n          {% endif %}\n\n          {% if delete_form %}\n            <button class=\"btn btn-danger button-form js-tooltip\" title=\"Make a DELETE request on the {{ name }} resource\" data-toggle=\"modal\" data-target=\"#deleteModal\">DELETE</button>\n\n            <!-- Delete Modal -->\n            <div class=\"modal fade\" id=\"deleteModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n              <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                  <div class=\"modal-body\">\n                    <h4 class=\"text-center\">Are you sure you want to delete this {{ name }}?</h4>\n                  </div>\n                  <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Cancel</button>\n                    <form class=\"button-form\" action=\"{{ request.get_full_path }}\" data-method=\"DELETE\">\n                      <button class=\"btn btn-danger\">Delete</button>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          {% endif %}\n\n          {% if extra_actions %}\n            <div class=\"dropdown\" style=\"float: right; margin-right: 10px\">\n              <button class=\"btn btn-default\" id=\"extra-actions-menu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n                {% trans \"Extra Actions\" %}\n                <span class=\"caret\"></span>\n              </button>\n              <ul class=\"dropdown-menu\" aria-labelledby=\"extra-actions-menu\">\n                {% for action_name, url in extra_actions|items %}\n                <li><a href=\"{{ url }}\">{{ action_name }}</a></li>\n                {% endfor %}\n              </ul>\n            </div>\n          {% endif %}\n\n          {% if filter_form %}\n            <button style=\"float: right; margin-right: 10px\" data-toggle=\"modal\" data-target=\"#filtersModal\" class=\"btn btn-default\">\n              <span class=\"glyphicon glyphicon-wrench\" aria-hidden=\"true\"></span>\n              {% trans \"Filters\" %}\n            </button>\n          {% endif %}\n          </div>\n\n            <div class=\"content-main\" role=\"main\"  aria-label=\"{% trans \"main content\" %}\">\n              <div class=\"page-header\">\n                <h1>{{ name }}</h1>\n              </div>\n              <div style=\"float:left\">\n                {% block description %}\n                  {{ description }}\n                {% endblock %}\n              </div>\n\n              {% if paginator %}\n                <nav style=\"float: right\">\n                  {% get_pagination_html paginator %}\n                </nav>\n              {% endif %}\n\n              <div class=\"request-info\" style=\"clear: both\" aria-label=\"{% trans \"request info\" %}\">\n                <pre class=\"prettyprint\"><b>{{ request.method }}</b> {{ request.get_full_path }}</pre>\n              </div>\n\n              <div class=\"response-info\" aria-label=\"{% trans \"response info\" %}\">\n                <pre class=\"prettyprint\"><span class=\"meta nocode\"><b>HTTP {{ response.status_code }} {{ response.status_text }}</b>{% for key, val in response_headers|items %}\n<b>{{ key }}:</b> <span class=\"lit\">{{ val|break_long_headers|urlize_quoted_links }}</span>{% endfor %}\n\n</span>{{ content|urlize_quoted_links }}</pre>\n              </div>\n            </div>\n\n            {% if display_edit_forms %}\n              {% if post_form or raw_data_post_form %}\n                <div {% if post_form %}class=\"tabbable\"{% endif %}>\n                  {% if post_form %}\n                    <ul class=\"nav nav-tabs form-switcher\">\n                      <li>\n                        <a name='html-tab' href=\"#post-object-form\" data-toggle=\"tab\">HTML form</a>\n                      </li>\n                      <li>\n                        <a name='raw-tab' href=\"#post-generic-content-form\" data-toggle=\"tab\">Raw data</a>\n                      </li>\n                    </ul>\n                  {% endif %}\n\n                  <div class=\"well tab-content\">\n                    {% if post_form %}\n                      <div class=\"tab-pane\" id=\"post-object-form\">\n                        {% with form=post_form %}\n                          <form action=\"{{ request.get_full_path }}\" method=\"POST\" enctype=\"multipart/form-data\" class=\"form-horizontal\" novalidate>\n                            <fieldset>\n                              {% csrf_token %}\n                              {{ post_form }}\n                              <div class=\"form-actions\">\n                                <button class=\"btn btn-primary js-tooltip\" title=\"Make a POST request on the {{ name }} resource\">POST</button>\n                              </div>\n                            </fieldset>\n                          </form>\n                        {% endwith %}\n                      </div>\n                    {% endif %}\n\n                    <div {% if post_form %}class=\"tab-pane\"{% endif %} id=\"post-generic-content-form\">\n                      {% with form=raw_data_post_form %}\n                        <form action=\"{{ request.get_full_path }}\" method=\"POST\" class=\"form-horizontal\">\n                          <fieldset>\n                            {% include \"rest_framework/raw_data_form.html\" %}\n                            <div class=\"form-actions\">\n                              <button class=\"btn btn-primary js-tooltip\" title=\"Make a POST request on the {{ name }} resource\">POST</button>\n                            </div>\n                          </fieldset>\n                        </form>\n                      {% endwith %}\n                    </div>\n                  </div>\n                </div>\n              {% endif %}\n\n              {% if put_form or raw_data_put_form or raw_data_patch_form %}\n                <div {% if put_form %}class=\"tabbable\"{% endif %}>\n                  {% if put_form %}\n                    <ul class=\"nav nav-tabs form-switcher\">\n                      <li>\n                        <a name='html-tab' href=\"#put-object-form\" data-toggle=\"tab\">HTML form</a>\n                      </li>\n                      <li>\n                        <a  name='raw-tab' href=\"#put-generic-content-form\" data-toggle=\"tab\">Raw data</a>\n                      </li>\n                    </ul>\n                  {% endif %}\n\n                  <div class=\"well tab-content\">\n                    {% if put_form %}\n                      <div class=\"tab-pane\" id=\"put-object-form\">\n                        <form action=\"{{ request.get_full_path }}\" data-method=\"PUT\" enctype=\"multipart/form-data\" class=\"form-horizontal\" novalidate>\n                          <fieldset>\n                            {{ put_form }}\n                            <div class=\"form-actions\">\n                              <button class=\"btn btn-primary js-tooltip\" title=\"Make a PUT request on the {{ name }} resource\">PUT</button>\n                            </div>\n                          </fieldset>\n                        </form>\n                      </div>\n                    {% endif %}\n\n                    <div {% if put_form %}class=\"tab-pane\"{% endif %} id=\"put-generic-content-form\">\n                      {% with form=raw_data_put_or_patch_form %}\n                        <form action=\"{{ request.get_full_path }}\" data-method=\"PUT\" class=\"form-horizontal\">\n                          <fieldset>\n                            {% include \"rest_framework/raw_data_form.html\" %}\n                            <div class=\"form-actions\">\n                              {% if raw_data_put_form %}\n                                <button class=\"btn btn-primary js-tooltip\" title=\"Make a PUT request on the {{ name }} resource\">PUT</button>\n                              {% endif %}\n                              {% if raw_data_patch_form %}\n                              <button data-method=\"PATCH\" class=\"btn btn-primary js-tooltip\" title=\"Make a PATCH request on the {{ name }} resource\">PATCH</button>\n                                {% endif %}\n                            </div>\n                          </fieldset>\n                        </form>\n                      {% endwith %}\n                    </div>\n                  </div>\n                </div>\n              {% endif %}\n            {% endif %}\n          {% endblock content %}\n        </div><!-- /.content -->\n      </div><!-- /.container -->\n    </div><!-- ./wrapper -->\n\n    {% if filter_form %}\n      {{ filter_form }}\n    {% endif %}\n\n    {% block script %}\n      <script>\n        window.drf = {\n          csrfHeaderName: \"{{ csrf_header_name|default:'X-CSRFToken' }}\",\n          csrfCookieName: \"{{ csrf_cookie_name|default:'csrftoken' }}\"\n        };\n      </script>\n      <script src=\"{% static \"rest_framework/js/jquery-3.3.1.min.js\" %}\"></script>\n      <script src=\"{% static \"rest_framework/js/ajax-form.js\" %}\"></script>\n      <script src=\"{% static \"rest_framework/js/csrf.js\" %}\"></script>\n      <script src=\"{% static \"rest_framework/js/bootstrap.min.js\" %}\"></script>\n      <script src=\"{% static \"rest_framework/js/prettify-min.js\" %}\"></script>\n      <script src=\"{% static \"rest_framework/js/default.js\" %}\"></script>\n      <script>\n        $(document).ready(function() {\n          $('form').ajaxForm();\n        });\n      </script>\n    {% endblock %}\n\n  </body>\n  {% endblock %}\n</html>\n", "from __future__ import absolute_import, unicode_literals\n\nimport re\nfrom collections import OrderedDict\n\nfrom django import template\nfrom django.template import loader\nfrom django.urls import NoReverseMatch, reverse\nfrom django.utils import six\nfrom django.utils.encoding import force_text, iri_to_uri\nfrom django.utils.html import escape, format_html, smart_urlquote\nfrom django.utils.safestring import SafeData, mark_safe\n\nfrom rest_framework.compat import apply_markdown, pygments_highlight\nfrom rest_framework.renderers import HTMLFormRenderer\nfrom rest_framework.utils.urls import replace_query_param\n\nregister = template.Library()\n\n# Regex for adding classes to html snippets\nclass_re = re.compile(r'(?<=class=[\"\\'])(.*)(?=[\"\\'])')\n\n\n@register.tag(name='code')\ndef highlight_code(parser, token):\n    code = token.split_contents()[-1]\n    nodelist = parser.parse(('endcode',))\n    parser.delete_first_token()\n    return CodeNode(code, nodelist)\n\n\nclass CodeNode(template.Node):\n    style = 'emacs'\n\n    def __init__(self, lang, code):\n        self.lang = lang\n        self.nodelist = code\n\n    def render(self, context):\n        text = self.nodelist.render(context)\n        return pygments_highlight(text, self.lang, self.style)\n\n\n@register.filter()\ndef with_location(fields, location):\n    return [\n        field for field in fields\n        if field.location == location\n    ]\n\n\n@register.simple_tag\ndef form_for_link(link):\n    import coreschema\n    properties = OrderedDict([\n        (field.name, field.schema or coreschema.String())\n        for field in link.fields\n    ])\n    required = [\n        field.name\n        for field in link.fields\n        if field.required\n    ]\n    schema = coreschema.Object(properties=properties, required=required)\n    return mark_safe(coreschema.render_to_form(schema))\n\n\n@register.simple_tag\ndef render_markdown(markdown_text):\n    if apply_markdown is None:\n        return markdown_text\n    return mark_safe(apply_markdown(markdown_text))\n\n\n@register.simple_tag\ndef get_pagination_html(pager):\n    return pager.to_html()\n\n\n@register.simple_tag\ndef render_form(serializer, template_pack=None):\n    style = {'template_pack': template_pack} if template_pack else {}\n    renderer = HTMLFormRenderer()\n    return renderer.render(serializer.data, None, {'style': style})\n\n\n@register.simple_tag\ndef render_field(field, style):\n    renderer = style.get('renderer', HTMLFormRenderer())\n    return renderer.render_field(field, style)\n\n\n@register.simple_tag\ndef optional_login(request):\n    \"\"\"\n    Include a login snippet if REST framework's login view is in the URLconf.\n    \"\"\"\n    try:\n        login_url = reverse('rest_framework:login')\n    except NoReverseMatch:\n        return ''\n\n    snippet = \"<li><a href='{href}?next={next}'>Log in</a></li>\"\n    snippet = format_html(snippet, href=login_url, next=escape(request.path))\n\n    return mark_safe(snippet)\n\n\n@register.simple_tag\ndef optional_docs_login(request):\n    \"\"\"\n    Include a login snippet if REST framework's login view is in the URLconf.\n    \"\"\"\n    try:\n        login_url = reverse('rest_framework:login')\n    except NoReverseMatch:\n        return 'log in'\n\n    snippet = \"<a href='{href}?next={next}'>log in</a>\"\n    snippet = format_html(snippet, href=login_url, next=escape(request.path))\n\n    return mark_safe(snippet)\n\n\n@register.simple_tag\ndef optional_logout(request, user):\n    \"\"\"\n    Include a logout snippet if REST framework's logout view is in the URLconf.\n    \"\"\"\n    try:\n        logout_url = reverse('rest_framework:logout')\n    except NoReverseMatch:\n        snippet = format_html('<li class=\"navbar-text\">{user}</li>', user=escape(user))\n        return mark_safe(snippet)\n\n    snippet = \"\"\"<li class=\"dropdown\">\n        <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n            {user}\n            <b class=\"caret\"></b>\n        </a>\n        <ul class=\"dropdown-menu\">\n            <li><a href='{href}?next={next}'>Log out</a></li>\n        </ul>\n    </li>\"\"\"\n    snippet = format_html(snippet, user=escape(user), href=logout_url, next=escape(request.path))\n\n    return mark_safe(snippet)\n\n\n@register.simple_tag\ndef add_query_param(request, key, val):\n    \"\"\"\n    Add a query parameter to the current request url, and return the new url.\n    \"\"\"\n    iri = request.get_full_path()\n    uri = iri_to_uri(iri)\n    return escape(replace_query_param(uri, key, val))\n\n\n@register.filter\ndef as_string(value):\n    if value is None:\n        return ''\n    return '%s' % value\n\n\n@register.filter\ndef as_list_of_strings(value):\n    return [\n        '' if (item is None) else ('%s' % item)\n        for item in value\n    ]\n\n\n@register.filter\ndef add_class(value, css_class):\n    \"\"\"\n    https://stackoverflow.com/questions/4124220/django-adding-css-classes-when-rendering-form-fields-in-a-template\n\n    Inserts classes into template variables that contain HTML tags,\n    useful for modifying forms without needing to change the Form objects.\n\n    Usage:\n\n        {{ field.label_tag|add_class:\"control-label\" }}\n\n    In the case of REST Framework, the filter is used to add Bootstrap-specific\n    classes to the forms.\n    \"\"\"\n    html = six.text_type(value)\n    match = class_re.search(html)\n    if match:\n        m = re.search(r'^%s$|^%s\\s|\\s%s\\s|\\s%s$' % (css_class, css_class,\n                                                    css_class, css_class),\n                      match.group(1))\n        if not m:\n            return mark_safe(class_re.sub(match.group(1) + \" \" + css_class,\n                                          html))\n    else:\n        return mark_safe(html.replace('>', ' class=\"%s\">' % css_class, 1))\n    return value\n\n\n@register.filter\ndef format_value(value):\n    if getattr(value, 'is_hyperlink', False):\n        name = six.text_type(value.obj)\n        return mark_safe('<a href=%s>%s</a>' % (value, escape(name)))\n    if value is None or isinstance(value, bool):\n        return mark_safe('<code>%s</code>' % {True: 'true', False: 'false', None: 'null'}[value])\n    elif isinstance(value, list):\n        if any([isinstance(item, (list, dict)) for item in value]):\n            template = loader.get_template('rest_framework/admin/list_value.html')\n        else:\n            template = loader.get_template('rest_framework/admin/simple_list_value.html')\n        context = {'value': value}\n        return template.render(context)\n    elif isinstance(value, dict):\n        template = loader.get_template('rest_framework/admin/dict_value.html')\n        context = {'value': value}\n        return template.render(context)\n    elif isinstance(value, six.string_types):\n        if (\n            (value.startswith('http:') or value.startswith('https:')) and not\n            re.search(r'\\s', value)\n        ):\n            return mark_safe('<a href=\"{value}\">{value}</a>'.format(value=escape(value)))\n        elif '@' in value and not re.search(r'\\s', value):\n            return mark_safe('<a href=\"mailto:{value}\">{value}</a>'.format(value=escape(value)))\n        elif '\\n' in value:\n            return mark_safe('<pre>%s</pre>' % escape(value))\n    return six.text_type(value)\n\n\n@register.filter\ndef items(value):\n    \"\"\"\n    Simple filter to return the items of the dict. Useful when the dict may\n    have a key 'items' which is resolved first in Django tempalte dot-notation\n    lookup.  See issue #4931\n    Also see: https://stackoverflow.com/questions/15416662/django-template-loop-over-dictionary-items-with-items-as-key\n    \"\"\"\n    if value is None:\n        # `{% for k, v in value.items %}` doesn't raise when value is None or\n        # not in the context, so neither should `{% for k, v in value|items %}`\n        return []\n    return value.items()\n\n\n@register.filter\ndef data(value):\n    \"\"\"\n    Simple filter to access `data` attribute of object,\n    specifically coreapi.Document.\n\n    As per `items` filter above, allows accessing `document.data` when\n    Document contains Link keyed-at \"data\".\n\n    See issue #5395\n    \"\"\"\n    return value.data\n\n\n@register.filter\ndef schema_links(section, sec_key=None):\n    \"\"\"\n    Recursively find every link in a schema, even nested.\n    \"\"\"\n    NESTED_FORMAT = '%s > %s'  # this format is used in docs/js/api.js:normalizeKeys\n    links = section.links\n    if section.data:\n        data = section.data.items()\n        for sub_section_key, sub_section in data:\n            new_links = schema_links(sub_section, sec_key=sub_section_key)\n            links.update(new_links)\n\n    if sec_key is not None:\n        new_links = OrderedDict()\n        for link_key, link in links.items():\n            new_key = NESTED_FORMAT % (sec_key, link_key)\n            new_links.update({new_key: link})\n        return new_links\n\n    return links\n\n\n@register.filter\ndef add_nested_class(value):\n    if isinstance(value, dict):\n        return 'class=nested'\n    if isinstance(value, list) and any([isinstance(item, (list, dict)) for item in value]):\n        return 'class=nested'\n    return ''\n\n\n# Bunch of stuff cloned from urlize\nTRAILING_PUNCTUATION = ['.', ',', ':', ';', '.)', '\"', \"']\", \"'}\", \"'\"]\nWRAPPING_PUNCTUATION = [('(', ')'), ('<', '>'), ('[', ']'), ('&lt;', '&gt;'),\n                        ('\"', '\"'), (\"'\", \"'\")]\nword_split_re = re.compile(r'(\\s+)')\nsimple_url_re = re.compile(r'^https?://\\[?\\w', re.IGNORECASE)\nsimple_url_2_re = re.compile(r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)$', re.IGNORECASE)\nsimple_email_re = re.compile(r'^\\S+@\\S+\\.\\S+$')\n\n\ndef smart_urlquote_wrapper(matched_url):\n    \"\"\"\n    Simple wrapper for smart_urlquote. ValueError(\"Invalid IPv6 URL\") can\n    be raised here, see issue #1386\n    \"\"\"\n    try:\n        return smart_urlquote(matched_url)\n    except ValueError:\n        return None\n\n\n@register.filter(needs_autoescape=True)\ndef urlize_quoted_links(text, trim_url_limit=None, nofollow=True, autoescape=True):\n    \"\"\"\n    Converts any URLs in text into clickable links.\n\n    Works on http://, https://, www. links, and also on links ending in one of\n    the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).\n    Links can have trailing punctuation (periods, commas, close-parens) and\n    leading punctuation (opening parens) and it'll still do the right thing.\n\n    If trim_url_limit is not None, the URLs in link text longer than this limit\n    will truncated to trim_url_limit-3 characters and appended with an ellipsis.\n\n    If nofollow is True, the URLs in link text will get a rel=\"nofollow\"\n    attribute.\n\n    If autoescape is True, the link text and URLs will get autoescaped.\n    \"\"\"\n    def trim_url(x, limit=trim_url_limit):\n        return limit is not None and (len(x) > limit and ('%s...' % x[:max(0, limit - 3)])) or x\n\n    safe_input = isinstance(text, SafeData)\n\n    # Unfortunately, Django built-in cannot be used here, because escaping\n    # is to be performed on words, which have been forcibly coerced to text\n    def conditional_escape(text):\n        return escape(text) if autoescape and not safe_input else text\n\n    words = word_split_re.split(force_text(text))\n    for i, word in enumerate(words):\n        if '.' in word or '@' in word or ':' in word:\n            # Deal with punctuation.\n            lead, middle, trail = '', word, ''\n            for punctuation in TRAILING_PUNCTUATION:\n                if middle.endswith(punctuation):\n                    middle = middle[:-len(punctuation)]\n                    trail = punctuation + trail\n            for opening, closing in WRAPPING_PUNCTUATION:\n                if middle.startswith(opening):\n                    middle = middle[len(opening):]\n                    lead = lead + opening\n                # Keep parentheses at the end only if they're balanced.\n                if (\n                    middle.endswith(closing) and\n                    middle.count(closing) == middle.count(opening) + 1\n                ):\n                    middle = middle[:-len(closing)]\n                    trail = closing + trail\n\n            # Make URL we want to point to.\n            url = None\n            nofollow_attr = ' rel=\"nofollow\"' if nofollow else ''\n            if simple_url_re.match(middle):\n                url = smart_urlquote_wrapper(middle)\n            elif simple_url_2_re.match(middle):\n                url = smart_urlquote_wrapper('http://%s' % middle)\n            elif ':' not in middle and simple_email_re.match(middle):\n                local, domain = middle.rsplit('@', 1)\n                try:\n                    domain = domain.encode('idna').decode('ascii')\n                except UnicodeError:\n                    continue\n                url = 'mailto:%s@%s' % (local, domain)\n                nofollow_attr = ''\n\n            # Make link.\n            if url:\n                trimmed = trim_url(middle)\n                lead, trail = conditional_escape(lead), conditional_escape(trail)\n                url, trimmed = conditional_escape(url), conditional_escape(trimmed)\n                middle = '<a href=\"%s\"%s>%s</a>' % (url, nofollow_attr, trimmed)\n                words[i] = '%s%s%s' % (lead, middle, trail)\n            else:\n                words[i] = conditional_escape(word)\n        else:\n            words[i] = conditional_escape(word)\n    return mark_safe(''.join(words))\n\n\n@register.filter\ndef break_long_headers(header):\n    \"\"\"\n    Breaks headers longer than 160 characters (~page length)\n    when possible (are comma separated)\n    \"\"\"\n    if len(header) > 160 and ',' in header:\n        header = mark_safe('<br> ' + ', <br>'.join(header.split(',')))\n    return header\n", "# encoding: utf-8\nfrom __future__ import unicode_literals\n\nimport unittest\n\nfrom django.template import Context, Template\nfrom django.test import TestCase\n\nfrom rest_framework.compat import coreapi, coreschema\nfrom rest_framework.relations import Hyperlink\nfrom rest_framework.templatetags import rest_framework\nfrom rest_framework.templatetags.rest_framework import (\n    add_nested_class, add_query_param, as_string, break_long_headers,\n    format_value, get_pagination_html, schema_links, urlize_quoted_links\n)\nfrom rest_framework.test import APIRequestFactory\n\nfactory = APIRequestFactory()\n\n\ndef format_html(html):\n    \"\"\"\n    Helper function that formats HTML in order for easier comparison\n    :param html: raw HTML text to be formatted\n    :return: Cleaned HTML with no newlines or spaces\n    \"\"\"\n    return html.replace('\\n', '').replace(' ', '')\n\n\nclass TemplateTagTests(TestCase):\n\n    def test_add_query_param_with_non_latin_character(self):\n        # Ensure we don't double-escape non-latin characters\n        # that are present in the querystring.\n        # See #1314.\n        request = factory.get(\"/\", {'q': '\u67e5\u8be2'})\n        json_url = add_query_param(request, \"format\", \"json\")\n        self.assertIn(\"q=%E6%9F%A5%E8%AF%A2\", json_url)\n        self.assertIn(\"format=json\", json_url)\n\n    def test_format_value_boolean_or_none(self):\n        \"\"\"\n        Tests format_value with booleans and None\n        \"\"\"\n        self.assertEqual(format_value(True), '<code>true</code>')\n        self.assertEqual(format_value(False), '<code>false</code>')\n        self.assertEqual(format_value(None), '<code>null</code>')\n\n    def test_format_value_hyperlink(self):\n        \"\"\"\n        Tests format_value with a URL\n        \"\"\"\n        url = 'http://url.com'\n        name = 'name_of_url'\n        hyperlink = Hyperlink(url, name)\n        self.assertEqual(format_value(hyperlink), '<a href=%s>%s</a>' % (url, name))\n\n    def test_format_value_list(self):\n        \"\"\"\n        Tests format_value with a list of strings\n        \"\"\"\n        list_items = ['item1', 'item2', 'item3']\n        self.assertEqual(format_value(list_items), '\\n item1, item2, item3\\n')\n        self.assertEqual(format_value([]), '\\n\\n')\n\n    def test_format_value_dict(self):\n        \"\"\"\n        Tests format_value with a dict\n        \"\"\"\n        test_dict = {'a': 'b'}\n        expected_dict_format = \"\"\"\n        <table class=\"table table-striped\">\n            <tbody>\n                <tr>\n                    <th>a</th>\n                    <td>b</td>\n                </tr>\n            </tbody>\n        </table>\"\"\"\n        self.assertEqual(\n            format_html(format_value(test_dict)),\n            format_html(expected_dict_format)\n        )\n\n    def test_format_value_table(self):\n        \"\"\"\n        Tests format_value with a list of lists/dicts\n        \"\"\"\n        list_of_lists = [['list1'], ['list2'], ['list3']]\n        expected_list_format = \"\"\"\n        <tableclass=\"tabletable-striped\">\n            <tbody>\n               <tr>\n                  <th>0</th>\n                  <td>list1</td>\n               </tr>\n               <tr>\n                  <th>1</th>\n                  <td>list2</td>\n               </tr>\n               <tr>\n                  <th>2</th>\n                  <td>list3</td>\n               </tr>\n            </tbody>\n            </table>\"\"\"\n        self.assertEqual(\n            format_html(format_value(list_of_lists)),\n            format_html(expected_list_format)\n        )\n\n        expected_dict_format = \"\"\"\n        <tableclass=\"tabletable-striped\">\n            <tbody>\n                <tr>\n                    <th>0</th>\n                    <td>\n                        <tableclass=\"tabletable-striped\">\n                            <tbody>\n                                <tr>\n                                    <th>item1</th>\n                                    <td>value1</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </td>\n                </tr>\n                <tr>\n                    <th>1</th>\n                    <td>\n                        <tableclass=\"tabletable-striped\">\n                            <tbody>\n                                <tr>\n                                    <th>item2</th>\n                                    <td>value2</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </td>\n                </tr>\n                <tr>\n                    <th>2</th>\n                    <td>\n                        <tableclass=\"tabletable-striped\">\n                            <tbody>\n                                <tr>\n                                    <th>item3</th>\n                                    <td>value3</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\"\"\"\n\n        list_of_dicts = [{'item1': 'value1'}, {'item2': 'value2'}, {'item3': 'value3'}]\n        self.assertEqual(\n            format_html(format_value(list_of_dicts)),\n            format_html(expected_dict_format)\n        )\n\n    def test_format_value_simple_string(self):\n        \"\"\"\n        Tests format_value with a simple string\n        \"\"\"\n        simple_string = 'this is an example of a string'\n        self.assertEqual(format_value(simple_string), simple_string)\n\n    def test_format_value_string_hyperlink(self):\n        \"\"\"\n        Tests format_value with a url\n        \"\"\"\n        url = 'http://www.example.com'\n        self.assertEqual(format_value(url), '<a href=\"http://www.example.com\">http://www.example.com</a>')\n\n    def test_format_value_string_email(self):\n        \"\"\"\n        Tests format_value with an email address\n        \"\"\"\n        email = 'something@somewhere.com'\n        self.assertEqual(format_value(email), '<a href=\"mailto:something@somewhere.com\">something@somewhere.com</a>')\n\n    def test_format_value_string_newlines(self):\n        \"\"\"\n        Tests format_value with a string with newline characters\n        :return:\n        \"\"\"\n        text = 'Dear user, \\n this is a message \\n from,\\nsomeone'\n        self.assertEqual(format_value(text), '<pre>Dear user, \\n this is a message \\n from,\\nsomeone</pre>')\n\n    def test_format_value_object(self):\n        \"\"\"\n        Tests that format_value with a object returns the object's __str__ method\n        \"\"\"\n        obj = object()\n        self.assertEqual(format_value(obj), obj.__str__())\n\n    def test_add_nested_class(self):\n        \"\"\"\n        Tests that add_nested_class returns the proper class\n        \"\"\"\n        positive_cases = [\n            [['item']],\n            [{'item1': 'value1'}],\n            {'item1': 'value1'}\n        ]\n\n        negative_cases = [\n            ['list'],\n            '',\n            None,\n            True,\n            False\n        ]\n\n        for case in positive_cases:\n            self.assertEqual(add_nested_class(case), 'class=nested')\n\n        for case in negative_cases:\n            self.assertEqual(add_nested_class(case), '')\n\n    def test_as_string_with_none(self):\n        result = as_string(None)\n        assert result == ''\n\n    def test_get_pagination_html(self):\n        class MockPager(object):\n            def __init__(self):\n                self.called = False\n\n            def to_html(self):\n                self.called = True\n\n        pager = MockPager()\n        get_pagination_html(pager)\n        assert pager.called is True\n\n    def test_break_long_lines(self):\n        header = 'long test header,' * 20\n        expected_header = '<br> ' + ', <br>'.join(header.split(','))\n        assert break_long_headers(header) == expected_header\n\n\nclass Issue1386Tests(TestCase):\n    \"\"\"\n    Covers #1386\n    \"\"\"\n\n    def test_issue_1386(self):\n        \"\"\"\n        Test function urlize_quoted_links with different args\n        \"\"\"\n        correct_urls = [\n            \"asdf.com\",\n            \"asdf.net\",\n            \"www.as_df.org\",\n            \"as.d8f.ghj8.gov\",\n        ]\n        for i in correct_urls:\n            res = urlize_quoted_links(i)\n            self.assertNotEqual(res, i)\n            self.assertIn(i, res)\n\n        incorrect_urls = [\n            \"mailto://asdf@fdf.com\",\n            \"asdf.netnet\",\n        ]\n        for i in incorrect_urls:\n            res = urlize_quoted_links(i)\n            self.assertEqual(i, res)\n\n        # example from issue #1386, this shouldn't raise an exception\n        urlize_quoted_links(\"asdf:[/p]zxcv.com\")\n\n    def test_smart_urlquote_wrapper_handles_value_error(self):\n        def mock_smart_urlquote(url):\n            raise ValueError\n\n        old = rest_framework.smart_urlquote\n        rest_framework.smart_urlquote = mock_smart_urlquote\n        assert rest_framework.smart_urlquote_wrapper('test') is None\n        rest_framework.smart_urlquote = old\n\n\nclass URLizerTests(TestCase):\n    \"\"\"\n    Test if JSON URLs are transformed into links well\n    \"\"\"\n    def _urlize_dict_check(self, data):\n        \"\"\"\n        For all items in dict test assert that the value is urlized key\n        \"\"\"\n        for original, urlized in data.items():\n            assert urlize_quoted_links(original, nofollow=False) == urlized\n\n    def test_json_with_url(self):\n        \"\"\"\n        Test if JSON URLs are transformed into links well\n        \"\"\"\n        data = {}\n        data['\"url\": \"http://api/users/1/\", '] = \\\n            '&quot;url&quot;: &quot;<a href=\"http://api/users/1/\">http://api/users/1/</a>&quot;, '\n        data['\"foo_set\": [\\n    \"http://api/foos/1/\"\\n], '] = \\\n            '&quot;foo_set&quot;: [\\n    &quot;<a href=\"http://api/foos/1/\">http://api/foos/1/</a>&quot;\\n], '\n        self._urlize_dict_check(data)\n\n    def test_template_render_with_autoescape(self):\n        \"\"\"\n        Test that HTML is correctly escaped in Browsable API views.\n        \"\"\"\n        template = Template(\"{% load rest_framework %}{{ content|urlize_quoted_links }}\")\n        rendered = template.render(Context({'content': '<script>alert()</script> http://example.com'}))\n        assert rendered == '&lt;script&gt;alert()&lt;/script&gt;' \\\n                           ' <a href=\"http://example.com\" rel=\"nofollow\">http://example.com</a>'\n\n    def test_template_render_with_noautoescape(self):\n        \"\"\"\n        Test if the autoescape value is getting passed to urlize_quoted_links filter.\n        \"\"\"\n        template = Template(\"{% load rest_framework %}\"\n                            \"{% autoescape off %}{{ content|urlize_quoted_links }}\"\n                            \"{% endautoescape %}\")\n        rendered = template.render(Context({'content': '<b> \"http://example.com\" </b>'}))\n        assert rendered == '<b> \"<a href=\"http://example.com\" rel=\"nofollow\">http://example.com</a>\" </b>'\n\n\n@unittest.skipUnless(coreapi, 'coreapi is not installed')\nclass SchemaLinksTests(TestCase):\n\n    def test_schema_with_empty_links(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'users': {\n                    'list': {}\n                }\n            }\n        )\n        section = schema['users']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 0\n\n    def test_single_action(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'users': {\n                    'list': coreapi.Link(\n                        url='/users/',\n                        action='get',\n                        fields=[]\n                    )\n                }\n            }\n        )\n        section = schema['users']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 1\n        assert 'list' in flat_links\n\n    def test_default_actions(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'users': {\n                    'create': coreapi.Link(\n                        url='/users/',\n                        action='post',\n                        fields=[]\n                    ),\n                    'list': coreapi.Link(\n                        url='/users/',\n                        action='get',\n                        fields=[]\n                    ),\n                    'read': coreapi.Link(\n                        url='/users/{id}/',\n                        action='get',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    ),\n                    'update': coreapi.Link(\n                        url='/users/{id}/',\n                        action='patch',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    )\n                }\n            }\n        )\n        section = schema['users']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 4\n        assert 'list' in flat_links\n        assert 'create' in flat_links\n        assert 'read' in flat_links\n        assert 'update' in flat_links\n\n    def test_default_actions_and_single_custom_action(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'users': {\n                    'create': coreapi.Link(\n                        url='/users/',\n                        action='post',\n                        fields=[]\n                    ),\n                    'list': coreapi.Link(\n                        url='/users/',\n                        action='get',\n                        fields=[]\n                    ),\n                    'read': coreapi.Link(\n                        url='/users/{id}/',\n                        action='get',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    ),\n                    'update': coreapi.Link(\n                        url='/users/{id}/',\n                        action='patch',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    ),\n                    'friends': coreapi.Link(\n                        url='/users/{id}/friends',\n                        action='get',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    )\n                }\n            }\n        )\n        section = schema['users']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 5\n        assert 'list' in flat_links\n        assert 'create' in flat_links\n        assert 'read' in flat_links\n        assert 'update' in flat_links\n        assert 'friends' in flat_links\n\n    def test_default_actions_and_single_custom_action_two_methods(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'users': {\n                    'create': coreapi.Link(\n                        url='/users/',\n                        action='post',\n                        fields=[]\n                    ),\n                    'list': coreapi.Link(\n                        url='/users/',\n                        action='get',\n                        fields=[]\n                    ),\n                    'read': coreapi.Link(\n                        url='/users/{id}/',\n                        action='get',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    ),\n                    'update': coreapi.Link(\n                        url='/users/{id}/',\n                        action='patch',\n                        fields=[\n                            coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                        ]\n                    ),\n                    'friends': {\n                        'list': coreapi.Link(\n                            url='/users/{id}/friends',\n                            action='get',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        ),\n                        'create': coreapi.Link(\n                            url='/users/{id}/friends',\n                            action='post',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        )\n                    }\n                }\n            }\n        )\n        section = schema['users']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 6\n        assert 'list' in flat_links\n        assert 'create' in flat_links\n        assert 'read' in flat_links\n        assert 'update' in flat_links\n        assert 'friends > list' in flat_links\n        assert 'friends > create' in flat_links\n\n    def test_multiple_nested_routes(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'animals': {\n                    'dog': {\n                        'vet': {\n                            'list': coreapi.Link(\n                                url='/animals/dog/{id}/vet',\n                                action='get',\n                                fields=[\n                                    coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                                ]\n                            )\n                        },\n                        'read': coreapi.Link(\n                            url='/animals/dog/{id}',\n                            action='get',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        )\n                    },\n                    'cat': {\n                        'list': coreapi.Link(\n                            url='/animals/cat/',\n                            action='get',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        ),\n                        'create': coreapi.Link(\n                            url='/aniamls/cat',\n                            action='post',\n                            fields=[]\n                        )\n                    }\n                }\n            }\n        )\n        section = schema['animals']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 4\n        assert 'cat > create' in flat_links\n        assert 'cat > list' in flat_links\n        assert 'dog > read' in flat_links\n        assert 'dog > vet > list' in flat_links\n\n    def test_multiple_resources_with_multiple_nested_routes(self):\n        schema = coreapi.Document(\n            url='',\n            title='Example API',\n            content={\n                'animals': {\n                    'dog': {\n                        'vet': {\n                            'list': coreapi.Link(\n                                url='/animals/dog/{id}/vet',\n                                action='get',\n                                fields=[\n                                    coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                                ]\n                            )\n                        },\n                        'read': coreapi.Link(\n                            url='/animals/dog/{id}',\n                            action='get',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        )\n                    },\n                    'cat': {\n                        'list': coreapi.Link(\n                            url='/animals/cat/',\n                            action='get',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        ),\n                        'create': coreapi.Link(\n                            url='/aniamls/cat',\n                            action='post',\n                            fields=[]\n                        )\n                    }\n                },\n                'farmers': {\n                    'silo': {\n                        'soy': {\n                            'list': coreapi.Link(\n                                url='/farmers/silo/{id}/soy',\n                                action='get',\n                                fields=[\n                                    coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                                ]\n                            )\n                        },\n                        'list': coreapi.Link(\n                            url='/farmers/silo',\n                            action='get',\n                            fields=[\n                                coreapi.Field('id', required=True, location='path', schema=coreschema.String())\n                            ]\n                        )\n                    }\n                }\n            }\n        )\n        section = schema['animals']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 4\n        assert 'cat > create' in flat_links\n        assert 'cat > list' in flat_links\n        assert 'dog > read' in flat_links\n        assert 'dog > vet > list' in flat_links\n\n        section = schema['farmers']\n        flat_links = schema_links(section)\n        assert len(flat_links) is 2\n        assert 'silo > list' in flat_links\n        assert 'silo > soy > list' in flat_links\n"], "filenames": ["rest_framework/templates/rest_framework/base.html", "rest_framework/templatetags/rest_framework.py", "tests/test_templatetags.py"], "buggy_code_start_loc": [174, 338, 307], "buggy_code_end_loc": [178, 394, 317], "fixing_code_start_loc": [174, 339, 308], "fixing_code_end_loc": [178, 394, 326], "type": "CWE-79", "message": "Django REST framework (aka django-rest-framework) before 3.9.1 allows XSS because the default DRF Browsable API view templates disable autoescaping.", "other": {"cve": {"id": "CVE-2018-25045", "sourceIdentifier": "cve@mitre.org", "published": "2022-07-23T02:15:07.267", "lastModified": "2022-07-29T03:31:16.790", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Django REST framework (aka django-rest-framework) before 3.9.1 allows XSS because the default DRF Browsable API view templates disable autoescaping."}, {"lang": "es", "value": "El marco REST de Django (tambi\u00e9n se conoce como django-rest-framework) versiones anteriores a 3.9.1, permite un ataque de tipo XSS porque las plantillas de visualizaci\u00f3n de la API navegable de DRF por defecto deshabilitan el auto escapado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:django-rest-framework:django_rest_framework:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.9.1", "matchCriteriaId": "A87B462A-AF33-47AE-A524-A5338CFE1319"}]}]}], "references": [{"url": "https://github.com/encode/django-rest-framework/commit/4bb9a3c48427867ef1e46f7dee945a4c25a4f9b8", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/encode/django-rest-framework/pull/6191", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/encode/django-rest-framework/pull/6330", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/encode/django-rest-framework/commit/4bb9a3c48427867ef1e46f7dee945a4c25a4f9b8"}}