{"buggy_code": ["import isArrayLike from './isArrayLike';\nimport getIterator from './getIterator';\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nexport default function createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n", "var async = require('../lib');\nvar {expect} = require('chai');\n\ndescribe('mapValues', () => {\n    var obj = {a: 1, b: 2, c: 3, d: 4};\n\n    context('mapValuesLimit', () => {\n        it('basics', (done) => {\n            var running = 0;\n            var concurrency = {\n                a: 2,\n                b: 2,\n                c: 2,\n                d: 1\n            };\n            async.mapValuesLimit(obj, 2, (val, key, next) => {\n                running++;\n                async.setImmediate(() => {\n                    expect(running).to.equal(concurrency[key]);\n                    running--;\n                    next(null, key + val);\n                });\n            }, (err, result) => {\n                expect(running).to.equal(0);\n                expect(err).to.eql(null);\n                expect(result).to.eql({a: 'a1', b: 'b2', c: 'c3', d: 'd4'});\n                done();\n            });\n        });\n\n        it('error', (done) => {\n            async.mapValuesLimit(obj, 1, (val, key, next) => {\n                if (key === 'b') {\n                    return next(new Error(\"fail\"));\n                }\n                next(null, val);\n            }, (err, result) => {\n                expect(err).to.not.eql(null);\n                expect(result).to.eql({a: 1});\n                done();\n            });\n        });\n\n        it('canceled', (done) => {\n            var callOrder = [];\n            async.mapValuesLimit(obj, 2, (val, key, next) => {\n                callOrder.push(val, key);\n                async.setImmediate(() => {\n                    if (key === 'b') {\n                        return next(false);\n                    }\n                    next(null, val);\n                });\n            }, () => {\n                throw new Error('should not get here');\n            });\n\n            setTimeout(() => {\n                expect(callOrder).to.eql([1, 'a', 2, 'b', 3, 'c']);\n                done();\n            }, 50);\n        });\n    });\n\n    context('mapValues', () => {\n        it('basics', (done) => {\n            var running = 0;\n            var concurrency = {\n                a: 4,\n                b: 3,\n                c: 2,\n                d: 1\n            };\n            async.mapValues(obj, (val, key, next) => {\n                running++;\n                async.setImmediate(() => {\n                    expect(running).to.equal(concurrency[key]);\n                    running--;\n                    next(null, key + val);\n                });\n            }, (err, result) => {\n                expect(running).to.equal(0);\n                expect(err).to.eql(null);\n                expect(result).to.eql({a: 'a1', b: 'b2', c: 'c3', d: 'd4'});\n                done();\n            });\n        });\n\n        it('canceled', (done) => {\n            var callOrder = [];\n            async.mapValues(obj, (val, key, next) => {\n                callOrder.push(val, key);\n                if (key === 'b') {\n                    return next(false, val);\n                }\n                next(null, val);\n            }, () => {\n                throw new Error('should not get here');\n            });\n\n            setTimeout(() => {\n                expect(callOrder).to.eql([1, 'a', 2, 'b']);\n                done();\n            }, 25);\n        });\n    });\n\n    context('mapValuesSeries', () => {\n        it('basics', (done) => {\n            var running = 0;\n            var concurrency = {\n                a: 1,\n                b: 1,\n                c: 1,\n                d: 1\n            };\n            async.mapValuesSeries(obj, (val, key, next) => {\n                running++;\n                async.setImmediate(() => {\n                    expect(running).to.equal(concurrency[key]);\n                    running--;\n                    next(null, key + val);\n                });\n            }, (err, result) => {\n                expect(running).to.equal(0);\n                expect(err).to.eql(null);\n                expect(result).to.eql({a: 'a1', b: 'b2', c: 'c3', d: 'd4'});\n                done();\n            });\n        });\n\n        it('canceled', (done) => {\n            var callOrder = [];\n            async.mapValuesSeries(obj, (val, key, next) => {\n                callOrder.push(val, key);\n                async.setImmediate(() => {\n                    if (key === 'b') {\n                        return next(false, val);\n                    }\n                    next(null, val);\n                });\n            }, () => {\n                throw new Error('should not get here');\n            });\n\n            setTimeout(() => {\n                expect(callOrder).to.eql([1, 'a', 2, 'b']);\n                done();\n            }, 50);\n        });\n    });\n});\n"], "fixing_code": ["import isArrayLike from './isArrayLike';\nimport getIterator from './getIterator';\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nexport default function createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n", "var async = require('../lib');\nvar {expect} = require('chai');\n\ndescribe('mapValues', () => {\n    var obj = {a: 1, b: 2, c: 3, d: 4};\n\n    context('mapValuesLimit', () => {\n        it('basics', (done) => {\n            var running = 0;\n            var concurrency = {\n                a: 2,\n                b: 2,\n                c: 2,\n                d: 1\n            };\n            async.mapValuesLimit(obj, 2, (val, key, next) => {\n                running++;\n                async.setImmediate(() => {\n                    expect(running).to.equal(concurrency[key]);\n                    running--;\n                    next(null, key + val);\n                });\n            }, (err, result) => {\n                expect(running).to.equal(0);\n                expect(err).to.eql(null);\n                expect(result).to.eql({a: 'a1', b: 'b2', c: 'c3', d: 'd4'});\n                done();\n            });\n        });\n\n        it('error', (done) => {\n            async.mapValuesLimit(obj, 1, (val, key, next) => {\n                if (key === 'b') {\n                    return next(new Error(\"fail\"));\n                }\n                next(null, val);\n            }, (err, result) => {\n                expect(err).to.not.eql(null);\n                expect(result).to.eql({a: 1});\n                done();\n            });\n        });\n\n        it('canceled', (done) => {\n            var callOrder = [];\n            async.mapValuesLimit(obj, 2, (val, key, next) => {\n                callOrder.push(val, key);\n                async.setImmediate(() => {\n                    if (key === 'b') {\n                        return next(false);\n                    }\n                    next(null, val);\n                });\n            }, () => {\n                throw new Error('should not get here');\n            });\n\n            setTimeout(() => {\n                expect(callOrder).to.eql([1, 'a', 2, 'b', 3, 'c']);\n                done();\n            }, 50);\n        });\n\n        it('prototype pollution', (done) => {\n            var input = JSON.parse('{\"a\": 1, \"b\": 2, \"__proto__\": { \"exploit\": true }}');\n\n            async.mapValues(input, (val, key, next) => {\n                next(null, val)\n            }, (err, result) => {\n                expect(result.exploit).to.equal(undefined)\n                done(err);\n            })\n        })\n    });\n\n    context('mapValues', () => {\n        it('basics', (done) => {\n            var running = 0;\n            var concurrency = {\n                a: 4,\n                b: 3,\n                c: 2,\n                d: 1\n            };\n            async.mapValues(obj, (val, key, next) => {\n                running++;\n                async.setImmediate(() => {\n                    expect(running).to.equal(concurrency[key]);\n                    running--;\n                    next(null, key + val);\n                });\n            }, (err, result) => {\n                expect(running).to.equal(0);\n                expect(err).to.eql(null);\n                expect(result).to.eql({a: 'a1', b: 'b2', c: 'c3', d: 'd4'});\n                done();\n            });\n        });\n\n        it('canceled', (done) => {\n            var callOrder = [];\n            async.mapValues(obj, (val, key, next) => {\n                callOrder.push(val, key);\n                if (key === 'b') {\n                    return next(false, val);\n                }\n                next(null, val);\n            }, () => {\n                throw new Error('should not get here');\n            });\n\n            setTimeout(() => {\n                expect(callOrder).to.eql([1, 'a', 2, 'b']);\n                done();\n            }, 25);\n        });\n    });\n\n    context('mapValuesSeries', () => {\n        it('basics', (done) => {\n            var running = 0;\n            var concurrency = {\n                a: 1,\n                b: 1,\n                c: 1,\n                d: 1\n            };\n            async.mapValuesSeries(obj, (val, key, next) => {\n                running++;\n                async.setImmediate(() => {\n                    expect(running).to.equal(concurrency[key]);\n                    running--;\n                    next(null, key + val);\n                });\n            }, (err, result) => {\n                expect(running).to.equal(0);\n                expect(err).to.eql(null);\n                expect(result).to.eql({a: 'a1', b: 'b2', c: 'c3', d: 'd4'});\n                done();\n            });\n        });\n\n        it('canceled', (done) => {\n            var callOrder = [];\n            async.mapValuesSeries(obj, (val, key, next) => {\n                callOrder.push(val, key);\n                async.setImmediate(() => {\n                    if (key === 'b') {\n                        return next(false, val);\n                    }\n                    next(null, val);\n                });\n            }, () => {\n                throw new Error('should not get here');\n            });\n\n            setTimeout(() => {\n                expect(callOrder).to.eql([1, 'a', 2, 'b']);\n                done();\n            }, 50);\n        });\n    });\n});\n"], "filenames": ["lib/internal/iterator.js", "test/mapValues.js"], "buggy_code_start_loc": [28, 62], "buggy_code_end_loc": [28, 62], "fixing_code_start_loc": [29, 63], "fixing_code_end_loc": [32, 74], "type": "CWE-1321", "message": "In Async before 2.6.4 and 3.x before 3.2.2, a malicious user can obtain privileges via the mapValues() method, aka lib/internal/iterator.js createObjectIterator prototype pollution.", "other": {"cve": {"id": "CVE-2021-43138", "sourceIdentifier": "cve@mitre.org", "published": "2022-04-06T17:15:08.650", "lastModified": "2023-02-23T20:20:03.553", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Async before 2.6.4 and 3.x before 3.2.2, a malicious user can obtain privileges via the mapValues() method, aka lib/internal/iterator.js createObjectIterator prototype pollution."}, {"lang": "es", "value": "En Async antes de la versi\u00f3n 2.6.4 y 3.x antes de la versi\u00f3n 3.2.2, un usuario malicioso puede obtener privilegios a trav\u00e9s del m\u00e9todo mapValues(), tambi\u00e9n conocido como contaminaci\u00f3n del prototipo lib/internal/iterator.js createObjectIterator"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:async_project:async:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.6.4", "matchCriteriaId": "B72E3857-6DDB-46B0-BC63-3D946C7C5022"}, {"vulnerable": true, "criteria": "cpe:2.3:a:async_project:async:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0.0", "versionEndExcluding": "3.2.2", "matchCriteriaId": "213DEB60-8A87-402F-B27F-7DE272760E8D"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:36:*:*:*:*:*:*:*", "matchCriteriaId": "5C675112-476C-4D7C-BCB9-A2FB2D0BC9FD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:37:*:*:*:*:*:*:*", "matchCriteriaId": "E30D0E6F-4AE8-4284-8716-991DFA48CC5D"}]}]}], "references": [{"url": "https://github.com/caolan/async/blob/master/lib/internal/iterator.js", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/caolan/async/blob/master/lib/mapValuesLimit.js", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/caolan/async/blob/v2.6.4/CHANGELOG.md#v264", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/caolan/async/compare/v2.6.3...v2.6.4", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/caolan/async/pull/1828", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://jsfiddle.net/oz5twjd9/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MTEUUTNIEBHGKUKKLNUZSV7IEP6IP3Q3/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UM6XJ73Q3NAM5KSGCOKJ2ZIA6GUWUJLK/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d"}}