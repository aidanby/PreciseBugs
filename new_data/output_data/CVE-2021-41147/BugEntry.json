{"buggy_code": ["<?php\n/**\n * Copyright (c) Enalean, 2012. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\n\nclass Cardwall_OnTop_ColumnMappingFieldValueDao extends DataAccessObject\n{\n\n    public function searchMappingFieldValues($cardwall_tracker_id)\n    {\n        $cardwall_tracker_id = $this->da->escapeInt($cardwall_tracker_id);\n        $sql = \"SELECT *\n                FROM plugin_cardwall_on_top_column_mapping_field_value\n                WHERE cardwall_tracker_id = $cardwall_tracker_id\";\n        return $this->retrieve($sql);\n    }\n\n    public function save($cardwall_tracker_id, $tracker_id, $field_id, $value_id, $column_id)\n    {\n        $cardwall_tracker_id = $this->da->escapeInt($cardwall_tracker_id);\n        $tracker_id          = $this->da->escapeInt($tracker_id);\n        if ($field_id === null) {\n            $field_id = \" NULL \";\n        } else {\n            $field_id = $this->da->escapeInt($field_id);\n        }\n        $sql = \"REPLACE INTO plugin_cardwall_on_top_column_mapping_field_value (cardwall_tracker_id, tracker_id, field_id, value_id, column_id)\n                VALUES ($cardwall_tracker_id, $tracker_id, $field_id, $value_id, $column_id)\";\n        if ($this->update($sql)) {\n            return $this->da->affectedRows();\n        }\n    }\n\n    public function deleteForColumn($cardwall_tracker_id, $column_id)\n    {\n        $cardwall_tracker_id = $this->da->escapeInt($cardwall_tracker_id);\n        $column_id           = $this->da->escapeInt($column_id);\n        $sql = \"DELETE FROM plugin_cardwall_on_top_column_mapping_field_value\n                WHERE cardwall_tracker_id = $cardwall_tracker_id\n                AND column_id  = $column_id\";\n        return $this->update($sql);\n    }\n\n    public function deleteAllFieldValues($cardwall_tracker_id, $tracker_id, $field_id, $column_id)\n    {\n        $cardwall_tracker_id = $this->da->escapeInt($cardwall_tracker_id);\n        $tracker_id          = $this->da->escapeInt($tracker_id);\n        $field_id            = $this->da->escapeInt($field_id);\n        $column_id           = $this->da->escapeInt($column_id);\n        $sql = \"DELETE FROM plugin_cardwall_on_top_column_mapping_field_value\n                WHERE cardwall_tracker_id = $cardwall_tracker_id\n                AND tracker_id = $tracker_id\n                AND field_id   = $field_id\n                AND column_id  = $column_id\";\n        return $this->update($sql);\n    }\n\n    public function delete($cardwall_tracker_id, $tracker_id)\n    {\n        $cardwall_tracker_id = $this->da->escapeInt($cardwall_tracker_id);\n        $tracker_id          = $this->da->escapeInt($tracker_id);\n        $sql = \"DELETE FROM plugin_cardwall_on_top_column_mapping_field_value\n                WHERE tracker_id          = $tracker_id\n                  AND cardwall_tracker_id = $cardwall_tracker_id\";\n        return $this->update($sql);\n    }\n\n    public function duplicate($from_cardwall_tracker_id, $to_cardwall_tracker_id, array $tracker_mapping, array $field_mapping, array $column_mapping)\n    {\n        $from_cardwall_tracker_id = $this->da->escapeInt($from_cardwall_tracker_id);\n        $to_cardwall_tracker_id   = $this->da->escapeInt($to_cardwall_tracker_id);\n\n        $to_value_when_then = ' WHEN 100 THEN 100 ';\n        $to_field_when_then = '';\n        $all_values         = array(100 => 100);\n        foreach ($field_mapping as $mapping) {\n            $from                = $this->da->escapeInt($mapping['from']);\n            $to                  = $this->da->escapeInt($mapping['to']);\n            $to_field_when_then .= \" WHEN $from THEN $to \";\n\n            foreach ($mapping['values'] as $from => $to) {\n                $all_values[$from] = $to;\n            }\n            $to_value_when_then .= $this->associativeToSQLWhenThen($mapping['values']);\n        }\n        $to_field_stmt   = $this->getSQLCase('field_id', $to_field_when_then);\n        $to_value_stmt   = $this->getSQLCase('value_id', $to_value_when_then);\n        $to_tracker_stmt = $this->associativeToSQLCase($tracker_mapping, 'tracker_id');\n        if (count($column_mapping) > 0) {\n            $to_column_stmt  = $this->associativeToSQLCase($column_mapping, 'column_id');\n        } else {\n            $to_column_stmt  = $this->associativeToSQLCase($all_values, 'column_id');\n        }\n\n        $sql = \"INSERT INTO plugin_cardwall_on_top_column_mapping_field_value (cardwall_tracker_id, tracker_id, field_id, value_id, column_id)\n                SELECT $to_cardwall_tracker_id, $to_tracker_stmt, $to_field_stmt, $to_value_stmt, $to_column_stmt\n                FROM plugin_cardwall_on_top_column_mapping_field_value\n                WHERE cardwall_tracker_id = $from_cardwall_tracker_id\";\n        return $this->update($sql);\n    }\n\n    private function associativeToSQLCase(array $mapping, $field_name)\n    {\n        $when_then = $this->associativeToSQLWhenThen($mapping);\n        return $this->getSQLCase($field_name, $when_then);\n    }\n\n    private function associativeToSQLWhenThen(array $mapping)\n    {\n        $stmt = '';\n        foreach ($mapping as $from => $to) {\n            $from  = $this->da->escapeInt($from);\n            $to    = $this->da->escapeInt($to);\n            $stmt .= \" WHEN $from THEN $to \";\n        }\n        return $stmt;\n    }\n\n    private function getSQLCase($field_name, $when_then)\n    {\n        $stmt = \" CASE $field_name\n                  $when_then\n                  ELSE NULL\n                  END \";\n        return $stmt;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright (c) Enalean, 2012-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\n\nclass Cardwall_OnTop_ColumnMappingFieldValueDao extends DataAccessObject\n{\n\n    public function searchMappingFieldValues($cardwall_tracker_id)\n    {\n        $cardwall_tracker_id = $this->da->escapeInt($cardwall_tracker_id);\n        $sql = \"SELECT *\n                FROM plugin_cardwall_on_top_column_mapping_field_value\n                WHERE cardwall_tracker_id = $cardwall_tracker_id\";\n        return $this->retrieve($sql);\n    }\n\n    public function save($cardwall_tracker_id, $tracker_id, $field_id, $value_id, $column_id)\n    {\n        $cardwall_tracker_id = $this->da->escapeInt($cardwall_tracker_id);\n        $tracker_id          = $this->da->escapeInt($tracker_id);\n        $value_id            = $this->da->escapeInt($value_id);\n        $column_id           = $this->da->escapeInt($column_id);\n        if ($field_id === null) {\n            $field_id = \" NULL \";\n        } else {\n            $field_id = $this->da->escapeInt($field_id);\n        }\n        $sql = \"REPLACE INTO plugin_cardwall_on_top_column_mapping_field_value (cardwall_tracker_id, tracker_id, field_id, value_id, column_id)\n                VALUES ($cardwall_tracker_id, $tracker_id, $field_id, $value_id, $column_id)\";\n        if ($this->update($sql)) {\n            return $this->da->affectedRows();\n        }\n    }\n\n    public function deleteForColumn($cardwall_tracker_id, $column_id)\n    {\n        $cardwall_tracker_id = $this->da->escapeInt($cardwall_tracker_id);\n        $column_id           = $this->da->escapeInt($column_id);\n        $sql = \"DELETE FROM plugin_cardwall_on_top_column_mapping_field_value\n                WHERE cardwall_tracker_id = $cardwall_tracker_id\n                AND column_id  = $column_id\";\n        return $this->update($sql);\n    }\n\n    public function deleteAllFieldValues($cardwall_tracker_id, $tracker_id, $field_id, $column_id)\n    {\n        $cardwall_tracker_id = $this->da->escapeInt($cardwall_tracker_id);\n        $tracker_id          = $this->da->escapeInt($tracker_id);\n        $field_id            = $this->da->escapeInt($field_id);\n        $column_id           = $this->da->escapeInt($column_id);\n        $sql = \"DELETE FROM plugin_cardwall_on_top_column_mapping_field_value\n                WHERE cardwall_tracker_id = $cardwall_tracker_id\n                AND tracker_id = $tracker_id\n                AND field_id   = $field_id\n                AND column_id  = $column_id\";\n        return $this->update($sql);\n    }\n\n    public function delete($cardwall_tracker_id, $tracker_id)\n    {\n        $cardwall_tracker_id = $this->da->escapeInt($cardwall_tracker_id);\n        $tracker_id          = $this->da->escapeInt($tracker_id);\n        $sql = \"DELETE FROM plugin_cardwall_on_top_column_mapping_field_value\n                WHERE tracker_id          = $tracker_id\n                  AND cardwall_tracker_id = $cardwall_tracker_id\";\n        return $this->update($sql);\n    }\n\n    public function duplicate($from_cardwall_tracker_id, $to_cardwall_tracker_id, array $tracker_mapping, array $field_mapping, array $column_mapping)\n    {\n        $from_cardwall_tracker_id = $this->da->escapeInt($from_cardwall_tracker_id);\n        $to_cardwall_tracker_id   = $this->da->escapeInt($to_cardwall_tracker_id);\n\n        $to_value_when_then = ' WHEN 100 THEN 100 ';\n        $to_field_when_then = '';\n        $all_values         = array(100 => 100);\n        foreach ($field_mapping as $mapping) {\n            $from                = $this->da->escapeInt($mapping['from']);\n            $to                  = $this->da->escapeInt($mapping['to']);\n            $to_field_when_then .= \" WHEN $from THEN $to \";\n\n            foreach ($mapping['values'] as $from => $to) {\n                $all_values[$from] = $to;\n            }\n            $to_value_when_then .= $this->associativeToSQLWhenThen($mapping['values']);\n        }\n        $to_field_stmt   = $this->getSQLCase('field_id', $to_field_when_then);\n        $to_value_stmt   = $this->getSQLCase('value_id', $to_value_when_then);\n        $to_tracker_stmt = $this->associativeToSQLCase($tracker_mapping, 'tracker_id');\n        if (count($column_mapping) > 0) {\n            $to_column_stmt  = $this->associativeToSQLCase($column_mapping, 'column_id');\n        } else {\n            $to_column_stmt  = $this->associativeToSQLCase($all_values, 'column_id');\n        }\n\n        $sql = \"INSERT INTO plugin_cardwall_on_top_column_mapping_field_value (cardwall_tracker_id, tracker_id, field_id, value_id, column_id)\n                SELECT $to_cardwall_tracker_id, $to_tracker_stmt, $to_field_stmt, $to_value_stmt, $to_column_stmt\n                FROM plugin_cardwall_on_top_column_mapping_field_value\n                WHERE cardwall_tracker_id = $from_cardwall_tracker_id\";\n        return $this->update($sql);\n    }\n\n    private function associativeToSQLCase(array $mapping, $field_name)\n    {\n        $when_then = $this->associativeToSQLWhenThen($mapping);\n        return $this->getSQLCase($field_name, $when_then);\n    }\n\n    private function associativeToSQLWhenThen(array $mapping)\n    {\n        $stmt = '';\n        foreach ($mapping as $from => $to) {\n            $from  = $this->da->escapeInt($from);\n            $to    = $this->da->escapeInt($to);\n            $stmt .= \" WHEN $from THEN $to \";\n        }\n        return $stmt;\n    }\n\n    private function getSQLCase($field_name, $when_then)\n    {\n        $stmt = \" CASE $field_name\n                  $when_then\n                  ELSE NULL\n                  END \";\n        return $stmt;\n    }\n}\n"], "filenames": ["plugins/cardwall/include/OnTop/ColumnMappingFieldValueDao.class.php"], "buggy_code_start_loc": [3], "buggy_code_end_loc": [37], "fixing_code_start_loc": [3], "fixing_code_end_loc": [40], "type": "CWE-89", "message": "Tuleap Open ALM is a libre and open source tool for end to end traceability of application and system developments. Prior to version 11.16.99.173 of Community Edition and versions 11.16-6 and 11.15-8 of Enterprise Edition, an attacker with admin rights in one agile dashboard service can execute arbitrary SQL queries. Tuleap Community Edition 11.16.99.173, Tuleap Enterprise Edition 11.16-6, and Tuleap Enterprise Edition 11.15-8 contain a patch for this issue.", "other": {"cve": {"id": "CVE-2021-41147", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-15T14:15:08.247", "lastModified": "2021-10-21T14:57:49.380", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tuleap Open ALM is a libre and open source tool for end to end traceability of application and system developments. Prior to version 11.16.99.173 of Community Edition and versions 11.16-6 and 11.15-8 of Enterprise Edition, an attacker with admin rights in one agile dashboard service can execute arbitrary SQL queries. Tuleap Community Edition 11.16.99.173, Tuleap Enterprise Edition 11.16-6, and Tuleap Enterprise Edition 11.15-8 contain a patch for this issue."}, {"lang": "es", "value": "Tuleap Open ALM es una herramienta libre y de c\u00f3digo abierto para la trazabilidad de extremo a extremo de los desarrollos de aplicaciones y sistemas. En versiones anteriores a 11.16.99.173 de Community Edition y versiones 11.16-6 y 11.15-8 de Enterprise Edition, un atacante con derechos de administrador en un servicio de tablero \u00e1gil puede ejecutar consultas SQL arbitrarias. Tuleap Community Edition versi\u00f3n 11.16.99.173, Tuleap Enterprise Edition versi\u00f3n 11.16-6 y Tuleap Enterprise Edition versi\u00f3n 11.15-8 contienen un parche para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:community:*:*:*", "versionEndExcluding": "11.16.99.173", "matchCriteriaId": "8B915FD8-6D43-4E50-8969-92697EEF5E27"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "11.15-1", "versionEndExcluding": "11.15-8", "matchCriteriaId": "A27A3110-C7F5-4618-A28D-09898CB6608B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "11.16-1", "versionEndExcluding": "11.16-6", "matchCriteriaId": "34E67CE9-C542-43FD-B473-D70F96CED515"}]}]}], "references": [{"url": "https://github.com/Enalean/tuleap/commit/d6b2f8b8c5098938bc094726a4826479ddbee941", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-j2mq-65wv-prmp", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=d6b2f8b8c5098938bc094726a4826479ddbee941", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://tuleap.net/plugins/tracker/?aid=15131", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Enalean/tuleap/commit/d6b2f8b8c5098938bc094726a4826479ddbee941"}}