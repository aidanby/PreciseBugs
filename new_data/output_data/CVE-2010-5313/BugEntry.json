{"buggy_code": ["/*\n * Kernel-based Virtual Machine driver for Linux\n *\n * derived from drivers/kvm/kvm_main.c\n *\n * Copyright (C) 2006 Qumranet, Inc.\n * Copyright (C) 2008 Qumranet, Inc.\n * Copyright IBM Corporation, 2008\n * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n *\n * Authors:\n *   Avi Kivity   <avi@qumranet.com>\n *   Yaniv Kamay  <yaniv@qumranet.com>\n *   Amit Shah    <amit.shah@qumranet.com>\n *   Ben-Ami Yassour <benami@il.ibm.com>\n *\n * This work is licensed under the terms of the GNU GPL, version 2.  See\n * the COPYING file in the top-level directory.\n *\n */\n\n#include <linux/kvm_host.h>\n#include \"irq.h\"\n#include \"mmu.h\"\n#include \"i8254.h\"\n#include \"tss.h\"\n#include \"kvm_cache_regs.h\"\n#include \"x86.h\"\n\n#include <linux/clocksource.h>\n#include <linux/interrupt.h>\n#include <linux/kvm.h>\n#include <linux/fs.h>\n#include <linux/vmalloc.h>\n#include <linux/module.h>\n#include <linux/mman.h>\n#include <linux/highmem.h>\n#include <linux/iommu.h>\n#include <linux/intel-iommu.h>\n#include <linux/cpufreq.h>\n#include <linux/user-return-notifier.h>\n#include <linux/srcu.h>\n#include <linux/slab.h>\n#include <linux/perf_event.h>\n#include <linux/uaccess.h>\n#include <linux/hash.h>\n#include <trace/events/kvm.h>\n\n#define CREATE_TRACE_POINTS\n#include \"trace.h\"\n\n#include <asm/debugreg.h>\n#include <asm/msr.h>\n#include <asm/desc.h>\n#include <asm/mtrr.h>\n#include <asm/mce.h>\n#include <asm/i387.h>\n#include <asm/xcr.h>\n#include <asm/pvclock.h>\n#include <asm/div64.h>\n\n#define MAX_IO_MSRS 256\n#define CR0_RESERVED_BITS\t\t\t\t\t\t\\\n\t(~(unsigned long)(X86_CR0_PE | X86_CR0_MP | X86_CR0_EM | X86_CR0_TS \\\n\t\t\t  | X86_CR0_ET | X86_CR0_NE | X86_CR0_WP | X86_CR0_AM \\\n\t\t\t  | X86_CR0_NW | X86_CR0_CD | X86_CR0_PG))\n#define CR4_RESERVED_BITS\t\t\t\t\t\t\\\n\t(~(unsigned long)(X86_CR4_VME | X86_CR4_PVI | X86_CR4_TSD | X86_CR4_DE\\\n\t\t\t  | X86_CR4_PSE | X86_CR4_PAE | X86_CR4_MCE\t\\\n\t\t\t  | X86_CR4_PGE | X86_CR4_PCE | X86_CR4_OSFXSR\t\\\n\t\t\t  | X86_CR4_OSXSAVE \\\n\t\t\t  | X86_CR4_OSXMMEXCPT | X86_CR4_VMXE))\n\n#define CR8_RESERVED_BITS (~(unsigned long)X86_CR8_TPR)\n\n#define KVM_MAX_MCE_BANKS 32\n#define KVM_MCE_CAP_SUPPORTED (MCG_CTL_P | MCG_SER_P)\n\n/* EFER defaults:\n * - enable syscall per default because its emulated by KVM\n * - enable LME and LMA per default on 64 bit KVM\n */\n#ifdef CONFIG_X86_64\nstatic u64 __read_mostly efer_reserved_bits = 0xfffffffffffffafeULL;\n#else\nstatic u64 __read_mostly efer_reserved_bits = 0xfffffffffffffffeULL;\n#endif\n\n#define VM_STAT(x) offsetof(struct kvm, stat.x), KVM_STAT_VM\n#define VCPU_STAT(x) offsetof(struct kvm_vcpu, stat.x), KVM_STAT_VCPU\n\nstatic void update_cr8_intercept(struct kvm_vcpu *vcpu);\nstatic int kvm_dev_ioctl_get_supported_cpuid(struct kvm_cpuid2 *cpuid,\n\t\t\t\t    struct kvm_cpuid_entry2 __user *entries);\n\nstruct kvm_x86_ops *kvm_x86_ops;\nEXPORT_SYMBOL_GPL(kvm_x86_ops);\n\nint ignore_msrs = 0;\nmodule_param_named(ignore_msrs, ignore_msrs, bool, S_IRUGO | S_IWUSR);\n\n#define KVM_NR_SHARED_MSRS 16\n\nstruct kvm_shared_msrs_global {\n\tint nr;\n\tu32 msrs[KVM_NR_SHARED_MSRS];\n};\n\nstruct kvm_shared_msrs {\n\tstruct user_return_notifier urn;\n\tbool registered;\n\tstruct kvm_shared_msr_values {\n\t\tu64 host;\n\t\tu64 curr;\n\t} values[KVM_NR_SHARED_MSRS];\n};\n\nstatic struct kvm_shared_msrs_global __read_mostly shared_msrs_global;\nstatic DEFINE_PER_CPU(struct kvm_shared_msrs, shared_msrs);\n\nstruct kvm_stats_debugfs_item debugfs_entries[] = {\n\t{ \"pf_fixed\", VCPU_STAT(pf_fixed) },\n\t{ \"pf_guest\", VCPU_STAT(pf_guest) },\n\t{ \"tlb_flush\", VCPU_STAT(tlb_flush) },\n\t{ \"invlpg\", VCPU_STAT(invlpg) },\n\t{ \"exits\", VCPU_STAT(exits) },\n\t{ \"io_exits\", VCPU_STAT(io_exits) },\n\t{ \"mmio_exits\", VCPU_STAT(mmio_exits) },\n\t{ \"signal_exits\", VCPU_STAT(signal_exits) },\n\t{ \"irq_window\", VCPU_STAT(irq_window_exits) },\n\t{ \"nmi_window\", VCPU_STAT(nmi_window_exits) },\n\t{ \"halt_exits\", VCPU_STAT(halt_exits) },\n\t{ \"halt_wakeup\", VCPU_STAT(halt_wakeup) },\n\t{ \"hypercalls\", VCPU_STAT(hypercalls) },\n\t{ \"request_irq\", VCPU_STAT(request_irq_exits) },\n\t{ \"irq_exits\", VCPU_STAT(irq_exits) },\n\t{ \"host_state_reload\", VCPU_STAT(host_state_reload) },\n\t{ \"efer_reload\", VCPU_STAT(efer_reload) },\n\t{ \"fpu_reload\", VCPU_STAT(fpu_reload) },\n\t{ \"insn_emulation\", VCPU_STAT(insn_emulation) },\n\t{ \"insn_emulation_fail\", VCPU_STAT(insn_emulation_fail) },\n\t{ \"irq_injections\", VCPU_STAT(irq_injections) },\n\t{ \"nmi_injections\", VCPU_STAT(nmi_injections) },\n\t{ \"mmu_shadow_zapped\", VM_STAT(mmu_shadow_zapped) },\n\t{ \"mmu_pte_write\", VM_STAT(mmu_pte_write) },\n\t{ \"mmu_pte_updated\", VM_STAT(mmu_pte_updated) },\n\t{ \"mmu_pde_zapped\", VM_STAT(mmu_pde_zapped) },\n\t{ \"mmu_flooded\", VM_STAT(mmu_flooded) },\n\t{ \"mmu_recycled\", VM_STAT(mmu_recycled) },\n\t{ \"mmu_cache_miss\", VM_STAT(mmu_cache_miss) },\n\t{ \"mmu_unsync\", VM_STAT(mmu_unsync) },\n\t{ \"remote_tlb_flush\", VM_STAT(remote_tlb_flush) },\n\t{ \"largepages\", VM_STAT(lpages) },\n\t{ NULL }\n};\n\nu64 __read_mostly host_xcr0;\n\nstatic inline void kvm_async_pf_hash_reset(struct kvm_vcpu *vcpu)\n{\n\tint i;\n\tfor (i = 0; i < roundup_pow_of_two(ASYNC_PF_PER_VCPU); i++)\n\t\tvcpu->arch.apf.gfns[i] = ~0;\n}\n\nstatic void kvm_on_user_return(struct user_return_notifier *urn)\n{\n\tunsigned slot;\n\tstruct kvm_shared_msrs *locals\n\t\t= container_of(urn, struct kvm_shared_msrs, urn);\n\tstruct kvm_shared_msr_values *values;\n\n\tfor (slot = 0; slot < shared_msrs_global.nr; ++slot) {\n\t\tvalues = &locals->values[slot];\n\t\tif (values->host != values->curr) {\n\t\t\twrmsrl(shared_msrs_global.msrs[slot], values->host);\n\t\t\tvalues->curr = values->host;\n\t\t}\n\t}\n\tlocals->registered = false;\n\tuser_return_notifier_unregister(urn);\n}\n\nstatic void shared_msr_update(unsigned slot, u32 msr)\n{\n\tstruct kvm_shared_msrs *smsr;\n\tu64 value;\n\n\tsmsr = &__get_cpu_var(shared_msrs);\n\t/* only read, and nobody should modify it at this time,\n\t * so don't need lock */\n\tif (slot >= shared_msrs_global.nr) {\n\t\tprintk(KERN_ERR \"kvm: invalid MSR slot!\");\n\t\treturn;\n\t}\n\trdmsrl_safe(msr, &value);\n\tsmsr->values[slot].host = value;\n\tsmsr->values[slot].curr = value;\n}\n\nvoid kvm_define_shared_msr(unsigned slot, u32 msr)\n{\n\tif (slot >= shared_msrs_global.nr)\n\t\tshared_msrs_global.nr = slot + 1;\n\tshared_msrs_global.msrs[slot] = msr;\n\t/* we need ensured the shared_msr_global have been updated */\n\tsmp_wmb();\n}\nEXPORT_SYMBOL_GPL(kvm_define_shared_msr);\n\nstatic void kvm_shared_msr_cpu_online(void)\n{\n\tunsigned i;\n\n\tfor (i = 0; i < shared_msrs_global.nr; ++i)\n\t\tshared_msr_update(i, shared_msrs_global.msrs[i]);\n}\n\nvoid kvm_set_shared_msr(unsigned slot, u64 value, u64 mask)\n{\n\tstruct kvm_shared_msrs *smsr = &__get_cpu_var(shared_msrs);\n\n\tif (((value ^ smsr->values[slot].curr) & mask) == 0)\n\t\treturn;\n\tsmsr->values[slot].curr = value;\n\twrmsrl(shared_msrs_global.msrs[slot], value);\n\tif (!smsr->registered) {\n\t\tsmsr->urn.on_user_return = kvm_on_user_return;\n\t\tuser_return_notifier_register(&smsr->urn);\n\t\tsmsr->registered = true;\n\t}\n}\nEXPORT_SYMBOL_GPL(kvm_set_shared_msr);\n\nstatic void drop_user_return_notifiers(void *ignore)\n{\n\tstruct kvm_shared_msrs *smsr = &__get_cpu_var(shared_msrs);\n\n\tif (smsr->registered)\n\t\tkvm_on_user_return(&smsr->urn);\n}\n\nu64 kvm_get_apic_base(struct kvm_vcpu *vcpu)\n{\n\tif (irqchip_in_kernel(vcpu->kvm))\n\t\treturn vcpu->arch.apic_base;\n\telse\n\t\treturn vcpu->arch.apic_base;\n}\nEXPORT_SYMBOL_GPL(kvm_get_apic_base);\n\nvoid kvm_set_apic_base(struct kvm_vcpu *vcpu, u64 data)\n{\n\t/* TODO: reserve bits check */\n\tif (irqchip_in_kernel(vcpu->kvm))\n\t\tkvm_lapic_set_base(vcpu, data);\n\telse\n\t\tvcpu->arch.apic_base = data;\n}\nEXPORT_SYMBOL_GPL(kvm_set_apic_base);\n\n#define EXCPT_BENIGN\t\t0\n#define EXCPT_CONTRIBUTORY\t1\n#define EXCPT_PF\t\t2\n\nstatic int exception_class(int vector)\n{\n\tswitch (vector) {\n\tcase PF_VECTOR:\n\t\treturn EXCPT_PF;\n\tcase DE_VECTOR:\n\tcase TS_VECTOR:\n\tcase NP_VECTOR:\n\tcase SS_VECTOR:\n\tcase GP_VECTOR:\n\t\treturn EXCPT_CONTRIBUTORY;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn EXCPT_BENIGN;\n}\n\nstatic void kvm_multiple_exception(struct kvm_vcpu *vcpu,\n\t\tunsigned nr, bool has_error, u32 error_code,\n\t\tbool reinject)\n{\n\tu32 prev_nr;\n\tint class1, class2;\n\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\n\tif (!vcpu->arch.exception.pending) {\n\tqueue:\n\t\tvcpu->arch.exception.pending = true;\n\t\tvcpu->arch.exception.has_error_code = has_error;\n\t\tvcpu->arch.exception.nr = nr;\n\t\tvcpu->arch.exception.error_code = error_code;\n\t\tvcpu->arch.exception.reinject = reinject;\n\t\treturn;\n\t}\n\n\t/* to check exception */\n\tprev_nr = vcpu->arch.exception.nr;\n\tif (prev_nr == DF_VECTOR) {\n\t\t/* triple fault -> shutdown */\n\t\tkvm_make_request(KVM_REQ_TRIPLE_FAULT, vcpu);\n\t\treturn;\n\t}\n\tclass1 = exception_class(prev_nr);\n\tclass2 = exception_class(nr);\n\tif ((class1 == EXCPT_CONTRIBUTORY && class2 == EXCPT_CONTRIBUTORY)\n\t\t|| (class1 == EXCPT_PF && class2 != EXCPT_BENIGN)) {\n\t\t/* generate double fault per SDM Table 5-5 */\n\t\tvcpu->arch.exception.pending = true;\n\t\tvcpu->arch.exception.has_error_code = true;\n\t\tvcpu->arch.exception.nr = DF_VECTOR;\n\t\tvcpu->arch.exception.error_code = 0;\n\t} else\n\t\t/* replace previous exception with a new one in a hope\n\t\t   that instruction re-execution will regenerate lost\n\t\t   exception */\n\t\tgoto queue;\n}\n\nvoid kvm_queue_exception(struct kvm_vcpu *vcpu, unsigned nr)\n{\n\tkvm_multiple_exception(vcpu, nr, false, 0, false);\n}\nEXPORT_SYMBOL_GPL(kvm_queue_exception);\n\nvoid kvm_requeue_exception(struct kvm_vcpu *vcpu, unsigned nr)\n{\n\tkvm_multiple_exception(vcpu, nr, false, 0, true);\n}\nEXPORT_SYMBOL_GPL(kvm_requeue_exception);\n\nvoid kvm_inject_page_fault(struct kvm_vcpu *vcpu, struct x86_exception *fault)\n{\n\t++vcpu->stat.pf_guest;\n\tvcpu->arch.cr2 = fault->address;\n\tkvm_queue_exception_e(vcpu, PF_VECTOR, fault->error_code);\n}\n\nvoid kvm_propagate_fault(struct kvm_vcpu *vcpu, struct x86_exception *fault)\n{\n\tif (mmu_is_nested(vcpu) && !fault->nested_page_fault)\n\t\tvcpu->arch.nested_mmu.inject_page_fault(vcpu, fault);\n\telse\n\t\tvcpu->arch.mmu.inject_page_fault(vcpu, fault);\n}\n\nvoid kvm_inject_nmi(struct kvm_vcpu *vcpu)\n{\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\tvcpu->arch.nmi_pending = 1;\n}\nEXPORT_SYMBOL_GPL(kvm_inject_nmi);\n\nvoid kvm_queue_exception_e(struct kvm_vcpu *vcpu, unsigned nr, u32 error_code)\n{\n\tkvm_multiple_exception(vcpu, nr, true, error_code, false);\n}\nEXPORT_SYMBOL_GPL(kvm_queue_exception_e);\n\nvoid kvm_requeue_exception_e(struct kvm_vcpu *vcpu, unsigned nr, u32 error_code)\n{\n\tkvm_multiple_exception(vcpu, nr, true, error_code, true);\n}\nEXPORT_SYMBOL_GPL(kvm_requeue_exception_e);\n\n/*\n * Checks if cpl <= required_cpl; if true, return true.  Otherwise queue\n * a #GP and return false.\n */\nbool kvm_require_cpl(struct kvm_vcpu *vcpu, int required_cpl)\n{\n\tif (kvm_x86_ops->get_cpl(vcpu) <= required_cpl)\n\t\treturn true;\n\tkvm_queue_exception_e(vcpu, GP_VECTOR, 0);\n\treturn false;\n}\nEXPORT_SYMBOL_GPL(kvm_require_cpl);\n\n/*\n * This function will be used to read from the physical memory of the currently\n * running guest. The difference to kvm_read_guest_page is that this function\n * can read from guest physical or from the guest's guest physical memory.\n */\nint kvm_read_guest_page_mmu(struct kvm_vcpu *vcpu, struct kvm_mmu *mmu,\n\t\t\t    gfn_t ngfn, void *data, int offset, int len,\n\t\t\t    u32 access)\n{\n\tgfn_t real_gfn;\n\tgpa_t ngpa;\n\n\tngpa     = gfn_to_gpa(ngfn);\n\treal_gfn = mmu->translate_gpa(vcpu, ngpa, access);\n\tif (real_gfn == UNMAPPED_GVA)\n\t\treturn -EFAULT;\n\n\treal_gfn = gpa_to_gfn(real_gfn);\n\n\treturn kvm_read_guest_page(vcpu->kvm, real_gfn, data, offset, len);\n}\nEXPORT_SYMBOL_GPL(kvm_read_guest_page_mmu);\n\nint kvm_read_nested_guest_page(struct kvm_vcpu *vcpu, gfn_t gfn,\n\t\t\t       void *data, int offset, int len, u32 access)\n{\n\treturn kvm_read_guest_page_mmu(vcpu, vcpu->arch.walk_mmu, gfn,\n\t\t\t\t       data, offset, len, access);\n}\n\n/*\n * Load the pae pdptrs.  Return true is they are all valid.\n */\nint load_pdptrs(struct kvm_vcpu *vcpu, struct kvm_mmu *mmu, unsigned long cr3)\n{\n\tgfn_t pdpt_gfn = cr3 >> PAGE_SHIFT;\n\tunsigned offset = ((cr3 & (PAGE_SIZE-1)) >> 5) << 2;\n\tint i;\n\tint ret;\n\tu64 pdpte[ARRAY_SIZE(mmu->pdptrs)];\n\n\tret = kvm_read_guest_page_mmu(vcpu, mmu, pdpt_gfn, pdpte,\n\t\t\t\t      offset * sizeof(u64), sizeof(pdpte),\n\t\t\t\t      PFERR_USER_MASK|PFERR_WRITE_MASK);\n\tif (ret < 0) {\n\t\tret = 0;\n\t\tgoto out;\n\t}\n\tfor (i = 0; i < ARRAY_SIZE(pdpte); ++i) {\n\t\tif (is_present_gpte(pdpte[i]) &&\n\t\t    (pdpte[i] & vcpu->arch.mmu.rsvd_bits_mask[0][2])) {\n\t\t\tret = 0;\n\t\t\tgoto out;\n\t\t}\n\t}\n\tret = 1;\n\n\tmemcpy(mmu->pdptrs, pdpte, sizeof(mmu->pdptrs));\n\t__set_bit(VCPU_EXREG_PDPTR,\n\t\t  (unsigned long *)&vcpu->arch.regs_avail);\n\t__set_bit(VCPU_EXREG_PDPTR,\n\t\t  (unsigned long *)&vcpu->arch.regs_dirty);\nout:\n\n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(load_pdptrs);\n\nstatic bool pdptrs_changed(struct kvm_vcpu *vcpu)\n{\n\tu64 pdpte[ARRAY_SIZE(vcpu->arch.walk_mmu->pdptrs)];\n\tbool changed = true;\n\tint offset;\n\tgfn_t gfn;\n\tint r;\n\n\tif (is_long_mode(vcpu) || !is_pae(vcpu))\n\t\treturn false;\n\n\tif (!test_bit(VCPU_EXREG_PDPTR,\n\t\t      (unsigned long *)&vcpu->arch.regs_avail))\n\t\treturn true;\n\n\tgfn = (vcpu->arch.cr3 & ~31u) >> PAGE_SHIFT;\n\toffset = (vcpu->arch.cr3 & ~31u) & (PAGE_SIZE - 1);\n\tr = kvm_read_nested_guest_page(vcpu, gfn, pdpte, offset, sizeof(pdpte),\n\t\t\t\t       PFERR_USER_MASK | PFERR_WRITE_MASK);\n\tif (r < 0)\n\t\tgoto out;\n\tchanged = memcmp(pdpte, vcpu->arch.walk_mmu->pdptrs, sizeof(pdpte)) != 0;\nout:\n\n\treturn changed;\n}\n\nint kvm_set_cr0(struct kvm_vcpu *vcpu, unsigned long cr0)\n{\n\tunsigned long old_cr0 = kvm_read_cr0(vcpu);\n\tunsigned long update_bits = X86_CR0_PG | X86_CR0_WP |\n\t\t\t\t    X86_CR0_CD | X86_CR0_NW;\n\n\tcr0 |= X86_CR0_ET;\n\n#ifdef CONFIG_X86_64\n\tif (cr0 & 0xffffffff00000000UL)\n\t\treturn 1;\n#endif\n\n\tcr0 &= ~CR0_RESERVED_BITS;\n\n\tif ((cr0 & X86_CR0_NW) && !(cr0 & X86_CR0_CD))\n\t\treturn 1;\n\n\tif ((cr0 & X86_CR0_PG) && !(cr0 & X86_CR0_PE))\n\t\treturn 1;\n\n\tif (!is_paging(vcpu) && (cr0 & X86_CR0_PG)) {\n#ifdef CONFIG_X86_64\n\t\tif ((vcpu->arch.efer & EFER_LME)) {\n\t\t\tint cs_db, cs_l;\n\n\t\t\tif (!is_pae(vcpu))\n\t\t\t\treturn 1;\n\t\t\tkvm_x86_ops->get_cs_db_l_bits(vcpu, &cs_db, &cs_l);\n\t\t\tif (cs_l)\n\t\t\t\treturn 1;\n\t\t} else\n#endif\n\t\tif (is_pae(vcpu) && !load_pdptrs(vcpu, vcpu->arch.walk_mmu,\n\t\t\t\t\t\t vcpu->arch.cr3))\n\t\t\treturn 1;\n\t}\n\n\tkvm_x86_ops->set_cr0(vcpu, cr0);\n\n\tif ((cr0 ^ old_cr0) & X86_CR0_PG)\n\t\tkvm_clear_async_pf_completion_queue(vcpu);\n\n\tif ((cr0 ^ old_cr0) & update_bits)\n\t\tkvm_mmu_reset_context(vcpu);\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_set_cr0);\n\nvoid kvm_lmsw(struct kvm_vcpu *vcpu, unsigned long msw)\n{\n\t(void)kvm_set_cr0(vcpu, kvm_read_cr0_bits(vcpu, ~0x0eul) | (msw & 0x0f));\n}\nEXPORT_SYMBOL_GPL(kvm_lmsw);\n\nint __kvm_set_xcr(struct kvm_vcpu *vcpu, u32 index, u64 xcr)\n{\n\tu64 xcr0;\n\n\t/* Only support XCR_XFEATURE_ENABLED_MASK(xcr0) now  */\n\tif (index != XCR_XFEATURE_ENABLED_MASK)\n\t\treturn 1;\n\txcr0 = xcr;\n\tif (kvm_x86_ops->get_cpl(vcpu) != 0)\n\t\treturn 1;\n\tif (!(xcr0 & XSTATE_FP))\n\t\treturn 1;\n\tif ((xcr0 & XSTATE_YMM) && !(xcr0 & XSTATE_SSE))\n\t\treturn 1;\n\tif (xcr0 & ~host_xcr0)\n\t\treturn 1;\n\tvcpu->arch.xcr0 = xcr0;\n\tvcpu->guest_xcr0_loaded = 0;\n\treturn 0;\n}\n\nint kvm_set_xcr(struct kvm_vcpu *vcpu, u32 index, u64 xcr)\n{\n\tif (__kvm_set_xcr(vcpu, index, xcr)) {\n\t\tkvm_inject_gp(vcpu, 0);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_set_xcr);\n\nstatic bool guest_cpuid_has_xsave(struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_cpuid_entry2 *best;\n\n\tbest = kvm_find_cpuid_entry(vcpu, 1, 0);\n\treturn best && (best->ecx & bit(X86_FEATURE_XSAVE));\n}\n\nstatic void update_cpuid(struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_cpuid_entry2 *best;\n\n\tbest = kvm_find_cpuid_entry(vcpu, 1, 0);\n\tif (!best)\n\t\treturn;\n\n\t/* Update OSXSAVE bit */\n\tif (cpu_has_xsave && best->function == 0x1) {\n\t\tbest->ecx &= ~(bit(X86_FEATURE_OSXSAVE));\n\t\tif (kvm_read_cr4_bits(vcpu, X86_CR4_OSXSAVE))\n\t\t\tbest->ecx |= bit(X86_FEATURE_OSXSAVE);\n\t}\n}\n\nint kvm_set_cr4(struct kvm_vcpu *vcpu, unsigned long cr4)\n{\n\tunsigned long old_cr4 = kvm_read_cr4(vcpu);\n\tunsigned long pdptr_bits = X86_CR4_PGE | X86_CR4_PSE | X86_CR4_PAE;\n\n\tif (cr4 & CR4_RESERVED_BITS)\n\t\treturn 1;\n\n\tif (!guest_cpuid_has_xsave(vcpu) && (cr4 & X86_CR4_OSXSAVE))\n\t\treturn 1;\n\n\tif (is_long_mode(vcpu)) {\n\t\tif (!(cr4 & X86_CR4_PAE))\n\t\t\treturn 1;\n\t} else if (is_paging(vcpu) && (cr4 & X86_CR4_PAE)\n\t\t   && ((cr4 ^ old_cr4) & pdptr_bits)\n\t\t   && !load_pdptrs(vcpu, vcpu->arch.walk_mmu, vcpu->arch.cr3))\n\t\treturn 1;\n\n\tif (cr4 & X86_CR4_VMXE)\n\t\treturn 1;\n\n\tkvm_x86_ops->set_cr4(vcpu, cr4);\n\n\tif ((cr4 ^ old_cr4) & pdptr_bits)\n\t\tkvm_mmu_reset_context(vcpu);\n\n\tif ((cr4 ^ old_cr4) & X86_CR4_OSXSAVE)\n\t\tupdate_cpuid(vcpu);\n\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_set_cr4);\n\nint kvm_set_cr3(struct kvm_vcpu *vcpu, unsigned long cr3)\n{\n\tif (cr3 == vcpu->arch.cr3 && !pdptrs_changed(vcpu)) {\n\t\tkvm_mmu_sync_roots(vcpu);\n\t\tkvm_mmu_flush_tlb(vcpu);\n\t\treturn 0;\n\t}\n\n\tif (is_long_mode(vcpu)) {\n\t\tif (cr3 & CR3_L_MODE_RESERVED_BITS)\n\t\t\treturn 1;\n\t} else {\n\t\tif (is_pae(vcpu)) {\n\t\t\tif (cr3 & CR3_PAE_RESERVED_BITS)\n\t\t\t\treturn 1;\n\t\t\tif (is_paging(vcpu) &&\n\t\t\t    !load_pdptrs(vcpu, vcpu->arch.walk_mmu, cr3))\n\t\t\t\treturn 1;\n\t\t}\n\t\t/*\n\t\t * We don't check reserved bits in nonpae mode, because\n\t\t * this isn't enforced, and VMware depends on this.\n\t\t */\n\t}\n\n\t/*\n\t * Does the new cr3 value map to physical memory? (Note, we\n\t * catch an invalid cr3 even in real-mode, because it would\n\t * cause trouble later on when we turn on paging anyway.)\n\t *\n\t * A real CPU would silently accept an invalid cr3 and would\n\t * attempt to use it - with largely undefined (and often hard\n\t * to debug) behavior on the guest side.\n\t */\n\tif (unlikely(!gfn_to_memslot(vcpu->kvm, cr3 >> PAGE_SHIFT)))\n\t\treturn 1;\n\tvcpu->arch.cr3 = cr3;\n\tvcpu->arch.mmu.new_cr3(vcpu);\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_set_cr3);\n\nint __kvm_set_cr8(struct kvm_vcpu *vcpu, unsigned long cr8)\n{\n\tif (cr8 & CR8_RESERVED_BITS)\n\t\treturn 1;\n\tif (irqchip_in_kernel(vcpu->kvm))\n\t\tkvm_lapic_set_tpr(vcpu, cr8);\n\telse\n\t\tvcpu->arch.cr8 = cr8;\n\treturn 0;\n}\n\nvoid kvm_set_cr8(struct kvm_vcpu *vcpu, unsigned long cr8)\n{\n\tif (__kvm_set_cr8(vcpu, cr8))\n\t\tkvm_inject_gp(vcpu, 0);\n}\nEXPORT_SYMBOL_GPL(kvm_set_cr8);\n\nunsigned long kvm_get_cr8(struct kvm_vcpu *vcpu)\n{\n\tif (irqchip_in_kernel(vcpu->kvm))\n\t\treturn kvm_lapic_get_cr8(vcpu);\n\telse\n\t\treturn vcpu->arch.cr8;\n}\nEXPORT_SYMBOL_GPL(kvm_get_cr8);\n\nstatic int __kvm_set_dr(struct kvm_vcpu *vcpu, int dr, unsigned long val)\n{\n\tswitch (dr) {\n\tcase 0 ... 3:\n\t\tvcpu->arch.db[dr] = val;\n\t\tif (!(vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP))\n\t\t\tvcpu->arch.eff_db[dr] = val;\n\t\tbreak;\n\tcase 4:\n\t\tif (kvm_read_cr4_bits(vcpu, X86_CR4_DE))\n\t\t\treturn 1; /* #UD */\n\t\t/* fall through */\n\tcase 6:\n\t\tif (val & 0xffffffff00000000ULL)\n\t\t\treturn -1; /* #GP */\n\t\tvcpu->arch.dr6 = (val & DR6_VOLATILE) | DR6_FIXED_1;\n\t\tbreak;\n\tcase 5:\n\t\tif (kvm_read_cr4_bits(vcpu, X86_CR4_DE))\n\t\t\treturn 1; /* #UD */\n\t\t/* fall through */\n\tdefault: /* 7 */\n\t\tif (val & 0xffffffff00000000ULL)\n\t\t\treturn -1; /* #GP */\n\t\tvcpu->arch.dr7 = (val & DR7_VOLATILE) | DR7_FIXED_1;\n\t\tif (!(vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP)) {\n\t\t\tkvm_x86_ops->set_dr7(vcpu, vcpu->arch.dr7);\n\t\t\tvcpu->arch.switch_db_regs = (val & DR7_BP_EN_MASK);\n\t\t}\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nint kvm_set_dr(struct kvm_vcpu *vcpu, int dr, unsigned long val)\n{\n\tint res;\n\n\tres = __kvm_set_dr(vcpu, dr, val);\n\tif (res > 0)\n\t\tkvm_queue_exception(vcpu, UD_VECTOR);\n\telse if (res < 0)\n\t\tkvm_inject_gp(vcpu, 0);\n\n\treturn res;\n}\nEXPORT_SYMBOL_GPL(kvm_set_dr);\n\nstatic int _kvm_get_dr(struct kvm_vcpu *vcpu, int dr, unsigned long *val)\n{\n\tswitch (dr) {\n\tcase 0 ... 3:\n\t\t*val = vcpu->arch.db[dr];\n\t\tbreak;\n\tcase 4:\n\t\tif (kvm_read_cr4_bits(vcpu, X86_CR4_DE))\n\t\t\treturn 1;\n\t\t/* fall through */\n\tcase 6:\n\t\t*val = vcpu->arch.dr6;\n\t\tbreak;\n\tcase 5:\n\t\tif (kvm_read_cr4_bits(vcpu, X86_CR4_DE))\n\t\t\treturn 1;\n\t\t/* fall through */\n\tdefault: /* 7 */\n\t\t*val = vcpu->arch.dr7;\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nint kvm_get_dr(struct kvm_vcpu *vcpu, int dr, unsigned long *val)\n{\n\tif (_kvm_get_dr(vcpu, dr, val)) {\n\t\tkvm_queue_exception(vcpu, UD_VECTOR);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_get_dr);\n\n/*\n * List of msr numbers which we expose to userspace through KVM_GET_MSRS\n * and KVM_SET_MSRS, and KVM_GET_MSR_INDEX_LIST.\n *\n * This list is modified at module load time to reflect the\n * capabilities of the host cpu. This capabilities test skips MSRs that are\n * kvm-specific. Those are put in the beginning of the list.\n */\n\n#define KVM_SAVE_MSRS_BEGIN\t8\nstatic u32 msrs_to_save[] = {\n\tMSR_KVM_SYSTEM_TIME, MSR_KVM_WALL_CLOCK,\n\tMSR_KVM_SYSTEM_TIME_NEW, MSR_KVM_WALL_CLOCK_NEW,\n\tHV_X64_MSR_GUEST_OS_ID, HV_X64_MSR_HYPERCALL,\n\tHV_X64_MSR_APIC_ASSIST_PAGE, MSR_KVM_ASYNC_PF_EN,\n\tMSR_IA32_SYSENTER_CS, MSR_IA32_SYSENTER_ESP, MSR_IA32_SYSENTER_EIP,\n\tMSR_STAR,\n#ifdef CONFIG_X86_64\n\tMSR_CSTAR, MSR_KERNEL_GS_BASE, MSR_SYSCALL_MASK, MSR_LSTAR,\n#endif\n\tMSR_IA32_TSC, MSR_IA32_CR_PAT, MSR_VM_HSAVE_PA\n};\n\nstatic unsigned num_msrs_to_save;\n\nstatic u32 emulated_msrs[] = {\n\tMSR_IA32_MISC_ENABLE,\n\tMSR_IA32_MCG_STATUS,\n\tMSR_IA32_MCG_CTL,\n};\n\nstatic int set_efer(struct kvm_vcpu *vcpu, u64 efer)\n{\n\tu64 old_efer = vcpu->arch.efer;\n\n\tif (efer & efer_reserved_bits)\n\t\treturn 1;\n\n\tif (is_paging(vcpu)\n\t    && (vcpu->arch.efer & EFER_LME) != (efer & EFER_LME))\n\t\treturn 1;\n\n\tif (efer & EFER_FFXSR) {\n\t\tstruct kvm_cpuid_entry2 *feat;\n\n\t\tfeat = kvm_find_cpuid_entry(vcpu, 0x80000001, 0);\n\t\tif (!feat || !(feat->edx & bit(X86_FEATURE_FXSR_OPT)))\n\t\t\treturn 1;\n\t}\n\n\tif (efer & EFER_SVME) {\n\t\tstruct kvm_cpuid_entry2 *feat;\n\n\t\tfeat = kvm_find_cpuid_entry(vcpu, 0x80000001, 0);\n\t\tif (!feat || !(feat->ecx & bit(X86_FEATURE_SVM)))\n\t\t\treturn 1;\n\t}\n\n\tefer &= ~EFER_LMA;\n\tefer |= vcpu->arch.efer & EFER_LMA;\n\n\tkvm_x86_ops->set_efer(vcpu, efer);\n\n\tvcpu->arch.mmu.base_role.nxe = (efer & EFER_NX) && !tdp_enabled;\n\n\t/* Update reserved bits */\n\tif ((efer ^ old_efer) & EFER_NX)\n\t\tkvm_mmu_reset_context(vcpu);\n\n\treturn 0;\n}\n\nvoid kvm_enable_efer_bits(u64 mask)\n{\n       efer_reserved_bits &= ~mask;\n}\nEXPORT_SYMBOL_GPL(kvm_enable_efer_bits);\n\n\n/*\n * Writes msr value into into the appropriate \"register\".\n * Returns 0 on success, non-0 otherwise.\n * Assumes vcpu_load() was already called.\n */\nint kvm_set_msr(struct kvm_vcpu *vcpu, u32 msr_index, u64 data)\n{\n\treturn kvm_x86_ops->set_msr(vcpu, msr_index, data);\n}\n\n/*\n * Adapt set_msr() to msr_io()'s calling convention\n */\nstatic int do_set_msr(struct kvm_vcpu *vcpu, unsigned index, u64 *data)\n{\n\treturn kvm_set_msr(vcpu, index, *data);\n}\n\nstatic void kvm_write_wall_clock(struct kvm *kvm, gpa_t wall_clock)\n{\n\tint version;\n\tint r;\n\tstruct pvclock_wall_clock wc;\n\tstruct timespec boot;\n\n\tif (!wall_clock)\n\t\treturn;\n\n\tr = kvm_read_guest(kvm, wall_clock, &version, sizeof(version));\n\tif (r)\n\t\treturn;\n\n\tif (version & 1)\n\t\t++version;  /* first time write, random junk */\n\n\t++version;\n\n\tkvm_write_guest(kvm, wall_clock, &version, sizeof(version));\n\n\t/*\n\t * The guest calculates current wall clock time by adding\n\t * system time (updated by kvm_guest_time_update below) to the\n\t * wall clock specified here.  guest system time equals host\n\t * system time for us, thus we must fill in host boot time here.\n\t */\n\tgetboottime(&boot);\n\n\twc.sec = boot.tv_sec;\n\twc.nsec = boot.tv_nsec;\n\twc.version = version;\n\n\tkvm_write_guest(kvm, wall_clock, &wc, sizeof(wc));\n\n\tversion++;\n\tkvm_write_guest(kvm, wall_clock, &version, sizeof(version));\n}\n\nstatic uint32_t div_frac(uint32_t dividend, uint32_t divisor)\n{\n\tuint32_t quotient, remainder;\n\n\t/* Don't try to replace with do_div(), this one calculates\n\t * \"(dividend << 32) / divisor\" */\n\t__asm__ ( \"divl %4\"\n\t\t  : \"=a\" (quotient), \"=d\" (remainder)\n\t\t  : \"0\" (0), \"1\" (dividend), \"r\" (divisor) );\n\treturn quotient;\n}\n\nstatic void kvm_get_time_scale(uint32_t scaled_khz, uint32_t base_khz,\n\t\t\t       s8 *pshift, u32 *pmultiplier)\n{\n\tuint64_t scaled64;\n\tint32_t  shift = 0;\n\tuint64_t tps64;\n\tuint32_t tps32;\n\n\ttps64 = base_khz * 1000LL;\n\tscaled64 = scaled_khz * 1000LL;\n\twhile (tps64 > scaled64*2 || tps64 & 0xffffffff00000000ULL) {\n\t\ttps64 >>= 1;\n\t\tshift--;\n\t}\n\n\ttps32 = (uint32_t)tps64;\n\twhile (tps32 <= scaled64 || scaled64 & 0xffffffff00000000ULL) {\n\t\tif (scaled64 & 0xffffffff00000000ULL || tps32 & 0x80000000)\n\t\t\tscaled64 >>= 1;\n\t\telse\n\t\t\ttps32 <<= 1;\n\t\tshift++;\n\t}\n\n\t*pshift = shift;\n\t*pmultiplier = div_frac(scaled64, tps32);\n\n\tpr_debug(\"%s: base_khz %u => %u, shift %d, mul %u\\n\",\n\t\t __func__, base_khz, scaled_khz, shift, *pmultiplier);\n}\n\nstatic inline u64 get_kernel_ns(void)\n{\n\tstruct timespec ts;\n\n\tWARN_ON(preemptible());\n\tktime_get_ts(&ts);\n\tmonotonic_to_bootbased(&ts);\n\treturn timespec_to_ns(&ts);\n}\n\nstatic DEFINE_PER_CPU(unsigned long, cpu_tsc_khz);\nunsigned long max_tsc_khz;\n\nstatic inline int kvm_tsc_changes_freq(void)\n{\n\tint cpu = get_cpu();\n\tint ret = !boot_cpu_has(X86_FEATURE_CONSTANT_TSC) &&\n\t\t  cpufreq_quick_get(cpu) != 0;\n\tput_cpu();\n\treturn ret;\n}\n\nstatic inline u64 nsec_to_cycles(u64 nsec)\n{\n\tu64 ret;\n\n\tWARN_ON(preemptible());\n\tif (kvm_tsc_changes_freq())\n\t\tprintk_once(KERN_WARNING\n\t\t \"kvm: unreliable cycle conversion on adjustable rate TSC\\n\");\n\tret = nsec * __get_cpu_var(cpu_tsc_khz);\n\tdo_div(ret, USEC_PER_SEC);\n\treturn ret;\n}\n\nstatic void kvm_arch_set_tsc_khz(struct kvm *kvm, u32 this_tsc_khz)\n{\n\t/* Compute a scale to convert nanoseconds in TSC cycles */\n\tkvm_get_time_scale(this_tsc_khz, NSEC_PER_SEC / 1000,\n\t\t\t   &kvm->arch.virtual_tsc_shift,\n\t\t\t   &kvm->arch.virtual_tsc_mult);\n\tkvm->arch.virtual_tsc_khz = this_tsc_khz;\n}\n\nstatic u64 compute_guest_tsc(struct kvm_vcpu *vcpu, s64 kernel_ns)\n{\n\tu64 tsc = pvclock_scale_delta(kernel_ns-vcpu->arch.last_tsc_nsec,\n\t\t\t\t      vcpu->kvm->arch.virtual_tsc_mult,\n\t\t\t\t      vcpu->kvm->arch.virtual_tsc_shift);\n\ttsc += vcpu->arch.last_tsc_write;\n\treturn tsc;\n}\n\nvoid kvm_write_tsc(struct kvm_vcpu *vcpu, u64 data)\n{\n\tstruct kvm *kvm = vcpu->kvm;\n\tu64 offset, ns, elapsed;\n\tunsigned long flags;\n\ts64 sdiff;\n\n\tspin_lock_irqsave(&kvm->arch.tsc_write_lock, flags);\n\toffset = data - native_read_tsc();\n\tns = get_kernel_ns();\n\telapsed = ns - kvm->arch.last_tsc_nsec;\n\tsdiff = data - kvm->arch.last_tsc_write;\n\tif (sdiff < 0)\n\t\tsdiff = -sdiff;\n\n\t/*\n\t * Special case: close write to TSC within 5 seconds of\n\t * another CPU is interpreted as an attempt to synchronize\n\t * The 5 seconds is to accomodate host load / swapping as\n\t * well as any reset of TSC during the boot process.\n\t *\n\t * In that case, for a reliable TSC, we can match TSC offsets,\n\t * or make a best guest using elapsed value.\n\t */\n\tif (sdiff < nsec_to_cycles(5ULL * NSEC_PER_SEC) &&\n\t    elapsed < 5ULL * NSEC_PER_SEC) {\n\t\tif (!check_tsc_unstable()) {\n\t\t\toffset = kvm->arch.last_tsc_offset;\n\t\t\tpr_debug(\"kvm: matched tsc offset for %llu\\n\", data);\n\t\t} else {\n\t\t\tu64 delta = nsec_to_cycles(elapsed);\n\t\t\toffset += delta;\n\t\t\tpr_debug(\"kvm: adjusted tsc offset by %llu\\n\", delta);\n\t\t}\n\t\tns = kvm->arch.last_tsc_nsec;\n\t}\n\tkvm->arch.last_tsc_nsec = ns;\n\tkvm->arch.last_tsc_write = data;\n\tkvm->arch.last_tsc_offset = offset;\n\tkvm_x86_ops->write_tsc_offset(vcpu, offset);\n\tspin_unlock_irqrestore(&kvm->arch.tsc_write_lock, flags);\n\n\t/* Reset of TSC must disable overshoot protection below */\n\tvcpu->arch.hv_clock.tsc_timestamp = 0;\n\tvcpu->arch.last_tsc_write = data;\n\tvcpu->arch.last_tsc_nsec = ns;\n}\nEXPORT_SYMBOL_GPL(kvm_write_tsc);\n\nstatic int kvm_guest_time_update(struct kvm_vcpu *v)\n{\n\tunsigned long flags;\n\tstruct kvm_vcpu_arch *vcpu = &v->arch;\n\tvoid *shared_kaddr;\n\tunsigned long this_tsc_khz;\n\ts64 kernel_ns, max_kernel_ns;\n\tu64 tsc_timestamp;\n\n\t/* Keep irq disabled to prevent changes to the clock */\n\tlocal_irq_save(flags);\n\tkvm_get_msr(v, MSR_IA32_TSC, &tsc_timestamp);\n\tkernel_ns = get_kernel_ns();\n\tthis_tsc_khz = __get_cpu_var(cpu_tsc_khz);\n\n\tif (unlikely(this_tsc_khz == 0)) {\n\t\tlocal_irq_restore(flags);\n\t\tkvm_make_request(KVM_REQ_CLOCK_UPDATE, v);\n\t\treturn 1;\n\t}\n\n\t/*\n\t * We may have to catch up the TSC to match elapsed wall clock\n\t * time for two reasons, even if kvmclock is used.\n\t *   1) CPU could have been running below the maximum TSC rate\n\t *   2) Broken TSC compensation resets the base at each VCPU\n\t *      entry to avoid unknown leaps of TSC even when running\n\t *      again on the same CPU.  This may cause apparent elapsed\n\t *      time to disappear, and the guest to stand still or run\n\t *\tvery slowly.\n\t */\n\tif (vcpu->tsc_catchup) {\n\t\tu64 tsc = compute_guest_tsc(v, kernel_ns);\n\t\tif (tsc > tsc_timestamp) {\n\t\t\tkvm_x86_ops->adjust_tsc_offset(v, tsc - tsc_timestamp);\n\t\t\ttsc_timestamp = tsc;\n\t\t}\n\t}\n\n\tlocal_irq_restore(flags);\n\n\tif (!vcpu->time_page)\n\t\treturn 0;\n\n\t/*\n\t * Time as measured by the TSC may go backwards when resetting the base\n\t * tsc_timestamp.  The reason for this is that the TSC resolution is\n\t * higher than the resolution of the other clock scales.  Thus, many\n\t * possible measurments of the TSC correspond to one measurement of any\n\t * other clock, and so a spread of values is possible.  This is not a\n\t * problem for the computation of the nanosecond clock; with TSC rates\n\t * around 1GHZ, there can only be a few cycles which correspond to one\n\t * nanosecond value, and any path through this code will inevitably\n\t * take longer than that.  However, with the kernel_ns value itself,\n\t * the precision may be much lower, down to HZ granularity.  If the\n\t * first sampling of TSC against kernel_ns ends in the low part of the\n\t * range, and the second in the high end of the range, we can get:\n\t *\n\t * (TSC - offset_low) * S + kns_old > (TSC - offset_high) * S + kns_new\n\t *\n\t * As the sampling errors potentially range in the thousands of cycles,\n\t * it is possible such a time value has already been observed by the\n\t * guest.  To protect against this, we must compute the system time as\n\t * observed by the guest and ensure the new system time is greater.\n\t */\n\tmax_kernel_ns = 0;\n\tif (vcpu->hv_clock.tsc_timestamp && vcpu->last_guest_tsc) {\n\t\tmax_kernel_ns = vcpu->last_guest_tsc -\n\t\t\t\tvcpu->hv_clock.tsc_timestamp;\n\t\tmax_kernel_ns = pvclock_scale_delta(max_kernel_ns,\n\t\t\t\t    vcpu->hv_clock.tsc_to_system_mul,\n\t\t\t\t    vcpu->hv_clock.tsc_shift);\n\t\tmax_kernel_ns += vcpu->last_kernel_ns;\n\t}\n\n\tif (unlikely(vcpu->hw_tsc_khz != this_tsc_khz)) {\n\t\tkvm_get_time_scale(NSEC_PER_SEC / 1000, this_tsc_khz,\n\t\t\t\t   &vcpu->hv_clock.tsc_shift,\n\t\t\t\t   &vcpu->hv_clock.tsc_to_system_mul);\n\t\tvcpu->hw_tsc_khz = this_tsc_khz;\n\t}\n\n\tif (max_kernel_ns > kernel_ns)\n\t\tkernel_ns = max_kernel_ns;\n\n\t/* With all the info we got, fill in the values */\n\tvcpu->hv_clock.tsc_timestamp = tsc_timestamp;\n\tvcpu->hv_clock.system_time = kernel_ns + v->kvm->arch.kvmclock_offset;\n\tvcpu->last_kernel_ns = kernel_ns;\n\tvcpu->last_guest_tsc = tsc_timestamp;\n\tvcpu->hv_clock.flags = 0;\n\n\t/*\n\t * The interface expects us to write an even number signaling that the\n\t * update is finished. Since the guest won't see the intermediate\n\t * state, we just increase by 2 at the end.\n\t */\n\tvcpu->hv_clock.version += 2;\n\n\tshared_kaddr = kmap_atomic(vcpu->time_page, KM_USER0);\n\n\tmemcpy(shared_kaddr + vcpu->time_offset, &vcpu->hv_clock,\n\t       sizeof(vcpu->hv_clock));\n\n\tkunmap_atomic(shared_kaddr, KM_USER0);\n\n\tmark_page_dirty(v->kvm, vcpu->time >> PAGE_SHIFT);\n\treturn 0;\n}\n\nstatic bool msr_mtrr_valid(unsigned msr)\n{\n\tswitch (msr) {\n\tcase 0x200 ... 0x200 + 2 * KVM_NR_VAR_MTRR - 1:\n\tcase MSR_MTRRfix64K_00000:\n\tcase MSR_MTRRfix16K_80000:\n\tcase MSR_MTRRfix16K_A0000:\n\tcase MSR_MTRRfix4K_C0000:\n\tcase MSR_MTRRfix4K_C8000:\n\tcase MSR_MTRRfix4K_D0000:\n\tcase MSR_MTRRfix4K_D8000:\n\tcase MSR_MTRRfix4K_E0000:\n\tcase MSR_MTRRfix4K_E8000:\n\tcase MSR_MTRRfix4K_F0000:\n\tcase MSR_MTRRfix4K_F8000:\n\tcase MSR_MTRRdefType:\n\tcase MSR_IA32_CR_PAT:\n\t\treturn true;\n\tcase 0x2f8:\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nstatic bool valid_pat_type(unsigned t)\n{\n\treturn t < 8 && (1 << t) & 0xf3; /* 0, 1, 4, 5, 6, 7 */\n}\n\nstatic bool valid_mtrr_type(unsigned t)\n{\n\treturn t < 8 && (1 << t) & 0x73; /* 0, 1, 4, 5, 6 */\n}\n\nstatic bool mtrr_valid(struct kvm_vcpu *vcpu, u32 msr, u64 data)\n{\n\tint i;\n\n\tif (!msr_mtrr_valid(msr))\n\t\treturn false;\n\n\tif (msr == MSR_IA32_CR_PAT) {\n\t\tfor (i = 0; i < 8; i++)\n\t\t\tif (!valid_pat_type((data >> (i * 8)) & 0xff))\n\t\t\t\treturn false;\n\t\treturn true;\n\t} else if (msr == MSR_MTRRdefType) {\n\t\tif (data & ~0xcff)\n\t\t\treturn false;\n\t\treturn valid_mtrr_type(data & 0xff);\n\t} else if (msr >= MSR_MTRRfix64K_00000 && msr <= MSR_MTRRfix4K_F8000) {\n\t\tfor (i = 0; i < 8 ; i++)\n\t\t\tif (!valid_mtrr_type((data >> (i * 8)) & 0xff))\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t/* variable MTRRs */\n\treturn valid_mtrr_type(data & 0xff);\n}\n\nstatic int set_msr_mtrr(struct kvm_vcpu *vcpu, u32 msr, u64 data)\n{\n\tu64 *p = (u64 *)&vcpu->arch.mtrr_state.fixed_ranges;\n\n\tif (!mtrr_valid(vcpu, msr, data))\n\t\treturn 1;\n\n\tif (msr == MSR_MTRRdefType) {\n\t\tvcpu->arch.mtrr_state.def_type = data;\n\t\tvcpu->arch.mtrr_state.enabled = (data & 0xc00) >> 10;\n\t} else if (msr == MSR_MTRRfix64K_00000)\n\t\tp[0] = data;\n\telse if (msr == MSR_MTRRfix16K_80000 || msr == MSR_MTRRfix16K_A0000)\n\t\tp[1 + msr - MSR_MTRRfix16K_80000] = data;\n\telse if (msr >= MSR_MTRRfix4K_C0000 && msr <= MSR_MTRRfix4K_F8000)\n\t\tp[3 + msr - MSR_MTRRfix4K_C0000] = data;\n\telse if (msr == MSR_IA32_CR_PAT)\n\t\tvcpu->arch.pat = data;\n\telse {\t/* Variable MTRRs */\n\t\tint idx, is_mtrr_mask;\n\t\tu64 *pt;\n\n\t\tidx = (msr - 0x200) / 2;\n\t\tis_mtrr_mask = msr - 0x200 - 2 * idx;\n\t\tif (!is_mtrr_mask)\n\t\t\tpt =\n\t\t\t  (u64 *)&vcpu->arch.mtrr_state.var_ranges[idx].base_lo;\n\t\telse\n\t\t\tpt =\n\t\t\t  (u64 *)&vcpu->arch.mtrr_state.var_ranges[idx].mask_lo;\n\t\t*pt = data;\n\t}\n\n\tkvm_mmu_reset_context(vcpu);\n\treturn 0;\n}\n\nstatic int set_msr_mce(struct kvm_vcpu *vcpu, u32 msr, u64 data)\n{\n\tu64 mcg_cap = vcpu->arch.mcg_cap;\n\tunsigned bank_num = mcg_cap & 0xff;\n\n\tswitch (msr) {\n\tcase MSR_IA32_MCG_STATUS:\n\t\tvcpu->arch.mcg_status = data;\n\t\tbreak;\n\tcase MSR_IA32_MCG_CTL:\n\t\tif (!(mcg_cap & MCG_CTL_P))\n\t\t\treturn 1;\n\t\tif (data != 0 && data != ~(u64)0)\n\t\t\treturn -1;\n\t\tvcpu->arch.mcg_ctl = data;\n\t\tbreak;\n\tdefault:\n\t\tif (msr >= MSR_IA32_MC0_CTL &&\n\t\t    msr < MSR_IA32_MC0_CTL + 4 * bank_num) {\n\t\t\tu32 offset = msr - MSR_IA32_MC0_CTL;\n\t\t\t/* only 0 or all 1s can be written to IA32_MCi_CTL\n\t\t\t * some Linux kernels though clear bit 10 in bank 4 to\n\t\t\t * workaround a BIOS/GART TBL issue on AMD K8s, ignore\n\t\t\t * this to avoid an uncatched #GP in the guest\n\t\t\t */\n\t\t\tif ((offset & 0x3) == 0 &&\n\t\t\t    data != 0 && (data | (1 << 10)) != ~(u64)0)\n\t\t\t\treturn -1;\n\t\t\tvcpu->arch.mce_banks[offset] = data;\n\t\t\tbreak;\n\t\t}\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstatic int xen_hvm_config(struct kvm_vcpu *vcpu, u64 data)\n{\n\tstruct kvm *kvm = vcpu->kvm;\n\tint lm = is_long_mode(vcpu);\n\tu8 *blob_addr = lm ? (u8 *)(long)kvm->arch.xen_hvm_config.blob_addr_64\n\t\t: (u8 *)(long)kvm->arch.xen_hvm_config.blob_addr_32;\n\tu8 blob_size = lm ? kvm->arch.xen_hvm_config.blob_size_64\n\t\t: kvm->arch.xen_hvm_config.blob_size_32;\n\tu32 page_num = data & ~PAGE_MASK;\n\tu64 page_addr = data & PAGE_MASK;\n\tu8 *page;\n\tint r;\n\n\tr = -E2BIG;\n\tif (page_num >= blob_size)\n\t\tgoto out;\n\tr = -ENOMEM;\n\tpage = kzalloc(PAGE_SIZE, GFP_KERNEL);\n\tif (!page)\n\t\tgoto out;\n\tr = -EFAULT;\n\tif (copy_from_user(page, blob_addr + (page_num * PAGE_SIZE), PAGE_SIZE))\n\t\tgoto out_free;\n\tif (kvm_write_guest(kvm, page_addr, page, PAGE_SIZE))\n\t\tgoto out_free;\n\tr = 0;\nout_free:\n\tkfree(page);\nout:\n\treturn r;\n}\n\nstatic bool kvm_hv_hypercall_enabled(struct kvm *kvm)\n{\n\treturn kvm->arch.hv_hypercall & HV_X64_MSR_HYPERCALL_ENABLE;\n}\n\nstatic bool kvm_hv_msr_partition_wide(u32 msr)\n{\n\tbool r = false;\n\tswitch (msr) {\n\tcase HV_X64_MSR_GUEST_OS_ID:\n\tcase HV_X64_MSR_HYPERCALL:\n\t\tr = true;\n\t\tbreak;\n\t}\n\n\treturn r;\n}\n\nstatic int set_msr_hyperv_pw(struct kvm_vcpu *vcpu, u32 msr, u64 data)\n{\n\tstruct kvm *kvm = vcpu->kvm;\n\n\tswitch (msr) {\n\tcase HV_X64_MSR_GUEST_OS_ID:\n\t\tkvm->arch.hv_guest_os_id = data;\n\t\t/* setting guest os id to zero disables hypercall page */\n\t\tif (!kvm->arch.hv_guest_os_id)\n\t\t\tkvm->arch.hv_hypercall &= ~HV_X64_MSR_HYPERCALL_ENABLE;\n\t\tbreak;\n\tcase HV_X64_MSR_HYPERCALL: {\n\t\tu64 gfn;\n\t\tunsigned long addr;\n\t\tu8 instructions[4];\n\n\t\t/* if guest os id is not set hypercall should remain disabled */\n\t\tif (!kvm->arch.hv_guest_os_id)\n\t\t\tbreak;\n\t\tif (!(data & HV_X64_MSR_HYPERCALL_ENABLE)) {\n\t\t\tkvm->arch.hv_hypercall = data;\n\t\t\tbreak;\n\t\t}\n\t\tgfn = data >> HV_X64_MSR_HYPERCALL_PAGE_ADDRESS_SHIFT;\n\t\taddr = gfn_to_hva(kvm, gfn);\n\t\tif (kvm_is_error_hva(addr))\n\t\t\treturn 1;\n\t\tkvm_x86_ops->patch_hypercall(vcpu, instructions);\n\t\t((unsigned char *)instructions)[3] = 0xc3; /* ret */\n\t\tif (copy_to_user((void __user *)addr, instructions, 4))\n\t\t\treturn 1;\n\t\tkvm->arch.hv_hypercall = data;\n\t\tbreak;\n\t}\n\tdefault:\n\t\tpr_unimpl(vcpu, \"HYPER-V unimplemented wrmsr: 0x%x \"\n\t\t\t  \"data 0x%llx\\n\", msr, data);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstatic int set_msr_hyperv(struct kvm_vcpu *vcpu, u32 msr, u64 data)\n{\n\tswitch (msr) {\n\tcase HV_X64_MSR_APIC_ASSIST_PAGE: {\n\t\tunsigned long addr;\n\n\t\tif (!(data & HV_X64_MSR_APIC_ASSIST_PAGE_ENABLE)) {\n\t\t\tvcpu->arch.hv_vapic = data;\n\t\t\tbreak;\n\t\t}\n\t\taddr = gfn_to_hva(vcpu->kvm, data >>\n\t\t\t\t  HV_X64_MSR_APIC_ASSIST_PAGE_ADDRESS_SHIFT);\n\t\tif (kvm_is_error_hva(addr))\n\t\t\treturn 1;\n\t\tif (clear_user((void __user *)addr, PAGE_SIZE))\n\t\t\treturn 1;\n\t\tvcpu->arch.hv_vapic = data;\n\t\tbreak;\n\t}\n\tcase HV_X64_MSR_EOI:\n\t\treturn kvm_hv_vapic_msr_write(vcpu, APIC_EOI, data);\n\tcase HV_X64_MSR_ICR:\n\t\treturn kvm_hv_vapic_msr_write(vcpu, APIC_ICR, data);\n\tcase HV_X64_MSR_TPR:\n\t\treturn kvm_hv_vapic_msr_write(vcpu, APIC_TASKPRI, data);\n\tdefault:\n\t\tpr_unimpl(vcpu, \"HYPER-V unimplemented wrmsr: 0x%x \"\n\t\t\t  \"data 0x%llx\\n\", msr, data);\n\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\nstatic int kvm_pv_enable_async_pf(struct kvm_vcpu *vcpu, u64 data)\n{\n\tgpa_t gpa = data & ~0x3f;\n\n\t/* Bits 2:5 are resrved, Should be zero */\n\tif (data & 0x3c)\n\t\treturn 1;\n\n\tvcpu->arch.apf.msr_val = data;\n\n\tif (!(data & KVM_ASYNC_PF_ENABLED)) {\n\t\tkvm_clear_async_pf_completion_queue(vcpu);\n\t\tkvm_async_pf_hash_reset(vcpu);\n\t\treturn 0;\n\t}\n\n\tif (kvm_gfn_to_hva_cache_init(vcpu->kvm, &vcpu->arch.apf.data, gpa))\n\t\treturn 1;\n\n\tvcpu->arch.apf.send_user_only = !(data & KVM_ASYNC_PF_SEND_ALWAYS);\n\tkvm_async_pf_wakeup_all(vcpu);\n\treturn 0;\n}\n\nint kvm_set_msr_common(struct kvm_vcpu *vcpu, u32 msr, u64 data)\n{\n\tswitch (msr) {\n\tcase MSR_EFER:\n\t\treturn set_efer(vcpu, data);\n\tcase MSR_K7_HWCR:\n\t\tdata &= ~(u64)0x40;\t/* ignore flush filter disable */\n\t\tdata &= ~(u64)0x100;\t/* ignore ignne emulation enable */\n\t\tif (data != 0) {\n\t\t\tpr_unimpl(vcpu, \"unimplemented HWCR wrmsr: 0x%llx\\n\",\n\t\t\t\tdata);\n\t\t\treturn 1;\n\t\t}\n\t\tbreak;\n\tcase MSR_FAM10H_MMIO_CONF_BASE:\n\t\tif (data != 0) {\n\t\t\tpr_unimpl(vcpu, \"unimplemented MMIO_CONF_BASE wrmsr: \"\n\t\t\t\t\"0x%llx\\n\", data);\n\t\t\treturn 1;\n\t\t}\n\t\tbreak;\n\tcase MSR_AMD64_NB_CFG:\n\t\tbreak;\n\tcase MSR_IA32_DEBUGCTLMSR:\n\t\tif (!data) {\n\t\t\t/* We support the non-activated case already */\n\t\t\tbreak;\n\t\t} else if (data & ~(DEBUGCTLMSR_LBR | DEBUGCTLMSR_BTF)) {\n\t\t\t/* Values other than LBR and BTF are vendor-specific,\n\t\t\t   thus reserved and should throw a #GP */\n\t\t\treturn 1;\n\t\t}\n\t\tpr_unimpl(vcpu, \"%s: MSR_IA32_DEBUGCTLMSR 0x%llx, nop\\n\",\n\t\t\t__func__, data);\n\t\tbreak;\n\tcase MSR_IA32_UCODE_REV:\n\tcase MSR_IA32_UCODE_WRITE:\n\tcase MSR_VM_HSAVE_PA:\n\tcase MSR_AMD64_PATCH_LOADER:\n\t\tbreak;\n\tcase 0x200 ... 0x2ff:\n\t\treturn set_msr_mtrr(vcpu, msr, data);\n\tcase MSR_IA32_APICBASE:\n\t\tkvm_set_apic_base(vcpu, data);\n\t\tbreak;\n\tcase APIC_BASE_MSR ... APIC_BASE_MSR + 0x3ff:\n\t\treturn kvm_x2apic_msr_write(vcpu, msr, data);\n\tcase MSR_IA32_MISC_ENABLE:\n\t\tvcpu->arch.ia32_misc_enable_msr = data;\n\t\tbreak;\n\tcase MSR_KVM_WALL_CLOCK_NEW:\n\tcase MSR_KVM_WALL_CLOCK:\n\t\tvcpu->kvm->arch.wall_clock = data;\n\t\tkvm_write_wall_clock(vcpu->kvm, data);\n\t\tbreak;\n\tcase MSR_KVM_SYSTEM_TIME_NEW:\n\tcase MSR_KVM_SYSTEM_TIME: {\n\t\tif (vcpu->arch.time_page) {\n\t\t\tkvm_release_page_dirty(vcpu->arch.time_page);\n\t\t\tvcpu->arch.time_page = NULL;\n\t\t}\n\n\t\tvcpu->arch.time = data;\n\t\tkvm_make_request(KVM_REQ_CLOCK_UPDATE, vcpu);\n\n\t\t/* we verify if the enable bit is set... */\n\t\tif (!(data & 1))\n\t\t\tbreak;\n\n\t\t/* ...but clean it before doing the actual write */\n\t\tvcpu->arch.time_offset = data & ~(PAGE_MASK | 1);\n\n\t\tvcpu->arch.time_page =\n\t\t\t\tgfn_to_page(vcpu->kvm, data >> PAGE_SHIFT);\n\n\t\tif (is_error_page(vcpu->arch.time_page)) {\n\t\t\tkvm_release_page_clean(vcpu->arch.time_page);\n\t\t\tvcpu->arch.time_page = NULL;\n\t\t}\n\t\tbreak;\n\t}\n\tcase MSR_KVM_ASYNC_PF_EN:\n\t\tif (kvm_pv_enable_async_pf(vcpu, data))\n\t\t\treturn 1;\n\t\tbreak;\n\tcase MSR_IA32_MCG_CTL:\n\tcase MSR_IA32_MCG_STATUS:\n\tcase MSR_IA32_MC0_CTL ... MSR_IA32_MC0_CTL + 4 * KVM_MAX_MCE_BANKS - 1:\n\t\treturn set_msr_mce(vcpu, msr, data);\n\n\t/* Performance counters are not protected by a CPUID bit,\n\t * so we should check all of them in the generic path for the sake of\n\t * cross vendor migration.\n\t * Writing a zero into the event select MSRs disables them,\n\t * which we perfectly emulate ;-). Any other value should be at least\n\t * reported, some guests depend on them.\n\t */\n\tcase MSR_P6_EVNTSEL0:\n\tcase MSR_P6_EVNTSEL1:\n\tcase MSR_K7_EVNTSEL0:\n\tcase MSR_K7_EVNTSEL1:\n\tcase MSR_K7_EVNTSEL2:\n\tcase MSR_K7_EVNTSEL3:\n\t\tif (data != 0)\n\t\t\tpr_unimpl(vcpu, \"unimplemented perfctr wrmsr: \"\n\t\t\t\t\"0x%x data 0x%llx\\n\", msr, data);\n\t\tbreak;\n\t/* at least RHEL 4 unconditionally writes to the perfctr registers,\n\t * so we ignore writes to make it happy.\n\t */\n\tcase MSR_P6_PERFCTR0:\n\tcase MSR_P6_PERFCTR1:\n\tcase MSR_K7_PERFCTR0:\n\tcase MSR_K7_PERFCTR1:\n\tcase MSR_K7_PERFCTR2:\n\tcase MSR_K7_PERFCTR3:\n\t\tpr_unimpl(vcpu, \"unimplemented perfctr wrmsr: \"\n\t\t\t\"0x%x data 0x%llx\\n\", msr, data);\n\t\tbreak;\n\tcase MSR_K7_CLK_CTL:\n\t\t/*\n\t\t * Ignore all writes to this no longer documented MSR.\n\t\t * Writes are only relevant for old K7 processors,\n\t\t * all pre-dating SVM, but a recommended workaround from\n\t\t * AMD for these chips. It is possible to speicify the\n\t\t * affected processor models on the command line, hence\n\t\t * the need to ignore the workaround.\n\t\t */\n\t\tbreak;\n\tcase HV_X64_MSR_GUEST_OS_ID ... HV_X64_MSR_SINT15:\n\t\tif (kvm_hv_msr_partition_wide(msr)) {\n\t\t\tint r;\n\t\t\tmutex_lock(&vcpu->kvm->lock);\n\t\t\tr = set_msr_hyperv_pw(vcpu, msr, data);\n\t\t\tmutex_unlock(&vcpu->kvm->lock);\n\t\t\treturn r;\n\t\t} else\n\t\t\treturn set_msr_hyperv(vcpu, msr, data);\n\t\tbreak;\n\tdefault:\n\t\tif (msr && (msr == vcpu->kvm->arch.xen_hvm_config.msr))\n\t\t\treturn xen_hvm_config(vcpu, data);\n\t\tif (!ignore_msrs) {\n\t\t\tpr_unimpl(vcpu, \"unhandled wrmsr: 0x%x data %llx\\n\",\n\t\t\t\tmsr, data);\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tpr_unimpl(vcpu, \"ignored wrmsr: 0x%x data %llx\\n\",\n\t\t\t\tmsr, data);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_set_msr_common);\n\n\n/*\n * Reads an msr value (of 'msr_index') into 'pdata'.\n * Returns 0 on success, non-0 otherwise.\n * Assumes vcpu_load() was already called.\n */\nint kvm_get_msr(struct kvm_vcpu *vcpu, u32 msr_index, u64 *pdata)\n{\n\treturn kvm_x86_ops->get_msr(vcpu, msr_index, pdata);\n}\n\nstatic int get_msr_mtrr(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata)\n{\n\tu64 *p = (u64 *)&vcpu->arch.mtrr_state.fixed_ranges;\n\n\tif (!msr_mtrr_valid(msr))\n\t\treturn 1;\n\n\tif (msr == MSR_MTRRdefType)\n\t\t*pdata = vcpu->arch.mtrr_state.def_type +\n\t\t\t (vcpu->arch.mtrr_state.enabled << 10);\n\telse if (msr == MSR_MTRRfix64K_00000)\n\t\t*pdata = p[0];\n\telse if (msr == MSR_MTRRfix16K_80000 || msr == MSR_MTRRfix16K_A0000)\n\t\t*pdata = p[1 + msr - MSR_MTRRfix16K_80000];\n\telse if (msr >= MSR_MTRRfix4K_C0000 && msr <= MSR_MTRRfix4K_F8000)\n\t\t*pdata = p[3 + msr - MSR_MTRRfix4K_C0000];\n\telse if (msr == MSR_IA32_CR_PAT)\n\t\t*pdata = vcpu->arch.pat;\n\telse {\t/* Variable MTRRs */\n\t\tint idx, is_mtrr_mask;\n\t\tu64 *pt;\n\n\t\tidx = (msr - 0x200) / 2;\n\t\tis_mtrr_mask = msr - 0x200 - 2 * idx;\n\t\tif (!is_mtrr_mask)\n\t\t\tpt =\n\t\t\t  (u64 *)&vcpu->arch.mtrr_state.var_ranges[idx].base_lo;\n\t\telse\n\t\t\tpt =\n\t\t\t  (u64 *)&vcpu->arch.mtrr_state.var_ranges[idx].mask_lo;\n\t\t*pdata = *pt;\n\t}\n\n\treturn 0;\n}\n\nstatic int get_msr_mce(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata)\n{\n\tu64 data;\n\tu64 mcg_cap = vcpu->arch.mcg_cap;\n\tunsigned bank_num = mcg_cap & 0xff;\n\n\tswitch (msr) {\n\tcase MSR_IA32_P5_MC_ADDR:\n\tcase MSR_IA32_P5_MC_TYPE:\n\t\tdata = 0;\n\t\tbreak;\n\tcase MSR_IA32_MCG_CAP:\n\t\tdata = vcpu->arch.mcg_cap;\n\t\tbreak;\n\tcase MSR_IA32_MCG_CTL:\n\t\tif (!(mcg_cap & MCG_CTL_P))\n\t\t\treturn 1;\n\t\tdata = vcpu->arch.mcg_ctl;\n\t\tbreak;\n\tcase MSR_IA32_MCG_STATUS:\n\t\tdata = vcpu->arch.mcg_status;\n\t\tbreak;\n\tdefault:\n\t\tif (msr >= MSR_IA32_MC0_CTL &&\n\t\t    msr < MSR_IA32_MC0_CTL + 4 * bank_num) {\n\t\t\tu32 offset = msr - MSR_IA32_MC0_CTL;\n\t\t\tdata = vcpu->arch.mce_banks[offset];\n\t\t\tbreak;\n\t\t}\n\t\treturn 1;\n\t}\n\t*pdata = data;\n\treturn 0;\n}\n\nstatic int get_msr_hyperv_pw(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata)\n{\n\tu64 data = 0;\n\tstruct kvm *kvm = vcpu->kvm;\n\n\tswitch (msr) {\n\tcase HV_X64_MSR_GUEST_OS_ID:\n\t\tdata = kvm->arch.hv_guest_os_id;\n\t\tbreak;\n\tcase HV_X64_MSR_HYPERCALL:\n\t\tdata = kvm->arch.hv_hypercall;\n\t\tbreak;\n\tdefault:\n\t\tpr_unimpl(vcpu, \"Hyper-V unhandled rdmsr: 0x%x\\n\", msr);\n\t\treturn 1;\n\t}\n\n\t*pdata = data;\n\treturn 0;\n}\n\nstatic int get_msr_hyperv(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata)\n{\n\tu64 data = 0;\n\n\tswitch (msr) {\n\tcase HV_X64_MSR_VP_INDEX: {\n\t\tint r;\n\t\tstruct kvm_vcpu *v;\n\t\tkvm_for_each_vcpu(r, v, vcpu->kvm)\n\t\t\tif (v == vcpu)\n\t\t\t\tdata = r;\n\t\tbreak;\n\t}\n\tcase HV_X64_MSR_EOI:\n\t\treturn kvm_hv_vapic_msr_read(vcpu, APIC_EOI, pdata);\n\tcase HV_X64_MSR_ICR:\n\t\treturn kvm_hv_vapic_msr_read(vcpu, APIC_ICR, pdata);\n\tcase HV_X64_MSR_TPR:\n\t\treturn kvm_hv_vapic_msr_read(vcpu, APIC_TASKPRI, pdata);\n\tdefault:\n\t\tpr_unimpl(vcpu, \"Hyper-V unhandled rdmsr: 0x%x\\n\", msr);\n\t\treturn 1;\n\t}\n\t*pdata = data;\n\treturn 0;\n}\n\nint kvm_get_msr_common(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata)\n{\n\tu64 data;\n\n\tswitch (msr) {\n\tcase MSR_IA32_PLATFORM_ID:\n\tcase MSR_IA32_UCODE_REV:\n\tcase MSR_IA32_EBL_CR_POWERON:\n\tcase MSR_IA32_DEBUGCTLMSR:\n\tcase MSR_IA32_LASTBRANCHFROMIP:\n\tcase MSR_IA32_LASTBRANCHTOIP:\n\tcase MSR_IA32_LASTINTFROMIP:\n\tcase MSR_IA32_LASTINTTOIP:\n\tcase MSR_K8_SYSCFG:\n\tcase MSR_K7_HWCR:\n\tcase MSR_VM_HSAVE_PA:\n\tcase MSR_P6_PERFCTR0:\n\tcase MSR_P6_PERFCTR1:\n\tcase MSR_P6_EVNTSEL0:\n\tcase MSR_P6_EVNTSEL1:\n\tcase MSR_K7_EVNTSEL0:\n\tcase MSR_K7_PERFCTR0:\n\tcase MSR_K8_INT_PENDING_MSG:\n\tcase MSR_AMD64_NB_CFG:\n\tcase MSR_FAM10H_MMIO_CONF_BASE:\n\t\tdata = 0;\n\t\tbreak;\n\tcase MSR_MTRRcap:\n\t\tdata = 0x500 | KVM_NR_VAR_MTRR;\n\t\tbreak;\n\tcase 0x200 ... 0x2ff:\n\t\treturn get_msr_mtrr(vcpu, msr, pdata);\n\tcase 0xcd: /* fsb frequency */\n\t\tdata = 3;\n\t\tbreak;\n\t\t/*\n\t\t * MSR_EBC_FREQUENCY_ID\n\t\t * Conservative value valid for even the basic CPU models.\n\t\t * Models 0,1: 000 in bits 23:21 indicating a bus speed of\n\t\t * 100MHz, model 2 000 in bits 18:16 indicating 100MHz,\n\t\t * and 266MHz for model 3, or 4. Set Core Clock\n\t\t * Frequency to System Bus Frequency Ratio to 1 (bits\n\t\t * 31:24) even though these are only valid for CPU\n\t\t * models > 2, however guests may end up dividing or\n\t\t * multiplying by zero otherwise.\n\t\t */\n\tcase MSR_EBC_FREQUENCY_ID:\n\t\tdata = 1 << 24;\n\t\tbreak;\n\tcase MSR_IA32_APICBASE:\n\t\tdata = kvm_get_apic_base(vcpu);\n\t\tbreak;\n\tcase APIC_BASE_MSR ... APIC_BASE_MSR + 0x3ff:\n\t\treturn kvm_x2apic_msr_read(vcpu, msr, pdata);\n\t\tbreak;\n\tcase MSR_IA32_MISC_ENABLE:\n\t\tdata = vcpu->arch.ia32_misc_enable_msr;\n\t\tbreak;\n\tcase MSR_IA32_PERF_STATUS:\n\t\t/* TSC increment by tick */\n\t\tdata = 1000ULL;\n\t\t/* CPU multiplier */\n\t\tdata |= (((uint64_t)4ULL) << 40);\n\t\tbreak;\n\tcase MSR_EFER:\n\t\tdata = vcpu->arch.efer;\n\t\tbreak;\n\tcase MSR_KVM_WALL_CLOCK:\n\tcase MSR_KVM_WALL_CLOCK_NEW:\n\t\tdata = vcpu->kvm->arch.wall_clock;\n\t\tbreak;\n\tcase MSR_KVM_SYSTEM_TIME:\n\tcase MSR_KVM_SYSTEM_TIME_NEW:\n\t\tdata = vcpu->arch.time;\n\t\tbreak;\n\tcase MSR_KVM_ASYNC_PF_EN:\n\t\tdata = vcpu->arch.apf.msr_val;\n\t\tbreak;\n\tcase MSR_IA32_P5_MC_ADDR:\n\tcase MSR_IA32_P5_MC_TYPE:\n\tcase MSR_IA32_MCG_CAP:\n\tcase MSR_IA32_MCG_CTL:\n\tcase MSR_IA32_MCG_STATUS:\n\tcase MSR_IA32_MC0_CTL ... MSR_IA32_MC0_CTL + 4 * KVM_MAX_MCE_BANKS - 1:\n\t\treturn get_msr_mce(vcpu, msr, pdata);\n\tcase MSR_K7_CLK_CTL:\n\t\t/*\n\t\t * Provide expected ramp-up count for K7. All other\n\t\t * are set to zero, indicating minimum divisors for\n\t\t * every field.\n\t\t *\n\t\t * This prevents guest kernels on AMD host with CPU\n\t\t * type 6, model 8 and higher from exploding due to\n\t\t * the rdmsr failing.\n\t\t */\n\t\tdata = 0x20000000;\n\t\tbreak;\n\tcase HV_X64_MSR_GUEST_OS_ID ... HV_X64_MSR_SINT15:\n\t\tif (kvm_hv_msr_partition_wide(msr)) {\n\t\t\tint r;\n\t\t\tmutex_lock(&vcpu->kvm->lock);\n\t\t\tr = get_msr_hyperv_pw(vcpu, msr, pdata);\n\t\t\tmutex_unlock(&vcpu->kvm->lock);\n\t\t\treturn r;\n\t\t} else\n\t\t\treturn get_msr_hyperv(vcpu, msr, pdata);\n\t\tbreak;\n\tdefault:\n\t\tif (!ignore_msrs) {\n\t\t\tpr_unimpl(vcpu, \"unhandled rdmsr: 0x%x\\n\", msr);\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tpr_unimpl(vcpu, \"ignored rdmsr: 0x%x\\n\", msr);\n\t\t\tdata = 0;\n\t\t}\n\t\tbreak;\n\t}\n\t*pdata = data;\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_get_msr_common);\n\n/*\n * Read or write a bunch of msrs. All parameters are kernel addresses.\n *\n * @return number of msrs set successfully.\n */\nstatic int __msr_io(struct kvm_vcpu *vcpu, struct kvm_msrs *msrs,\n\t\t    struct kvm_msr_entry *entries,\n\t\t    int (*do_msr)(struct kvm_vcpu *vcpu,\n\t\t\t\t  unsigned index, u64 *data))\n{\n\tint i, idx;\n\n\tidx = srcu_read_lock(&vcpu->kvm->srcu);\n\tfor (i = 0; i < msrs->nmsrs; ++i)\n\t\tif (do_msr(vcpu, entries[i].index, &entries[i].data))\n\t\t\tbreak;\n\tsrcu_read_unlock(&vcpu->kvm->srcu, idx);\n\n\treturn i;\n}\n\n/*\n * Read or write a bunch of msrs. Parameters are user addresses.\n *\n * @return number of msrs set successfully.\n */\nstatic int msr_io(struct kvm_vcpu *vcpu, struct kvm_msrs __user *user_msrs,\n\t\t  int (*do_msr)(struct kvm_vcpu *vcpu,\n\t\t\t\tunsigned index, u64 *data),\n\t\t  int writeback)\n{\n\tstruct kvm_msrs msrs;\n\tstruct kvm_msr_entry *entries;\n\tint r, n;\n\tunsigned size;\n\n\tr = -EFAULT;\n\tif (copy_from_user(&msrs, user_msrs, sizeof msrs))\n\t\tgoto out;\n\n\tr = -E2BIG;\n\tif (msrs.nmsrs >= MAX_IO_MSRS)\n\t\tgoto out;\n\n\tr = -ENOMEM;\n\tsize = sizeof(struct kvm_msr_entry) * msrs.nmsrs;\n\tentries = kmalloc(size, GFP_KERNEL);\n\tif (!entries)\n\t\tgoto out;\n\n\tr = -EFAULT;\n\tif (copy_from_user(entries, user_msrs->entries, size))\n\t\tgoto out_free;\n\n\tr = n = __msr_io(vcpu, &msrs, entries, do_msr);\n\tif (r < 0)\n\t\tgoto out_free;\n\n\tr = -EFAULT;\n\tif (writeback && copy_to_user(user_msrs->entries, entries, size))\n\t\tgoto out_free;\n\n\tr = n;\n\nout_free:\n\tkfree(entries);\nout:\n\treturn r;\n}\n\nint kvm_dev_ioctl_check_extension(long ext)\n{\n\tint r;\n\n\tswitch (ext) {\n\tcase KVM_CAP_IRQCHIP:\n\tcase KVM_CAP_HLT:\n\tcase KVM_CAP_MMU_SHADOW_CACHE_CONTROL:\n\tcase KVM_CAP_SET_TSS_ADDR:\n\tcase KVM_CAP_EXT_CPUID:\n\tcase KVM_CAP_CLOCKSOURCE:\n\tcase KVM_CAP_PIT:\n\tcase KVM_CAP_NOP_IO_DELAY:\n\tcase KVM_CAP_MP_STATE:\n\tcase KVM_CAP_SYNC_MMU:\n\tcase KVM_CAP_REINJECT_CONTROL:\n\tcase KVM_CAP_IRQ_INJECT_STATUS:\n\tcase KVM_CAP_ASSIGN_DEV_IRQ:\n\tcase KVM_CAP_IRQFD:\n\tcase KVM_CAP_IOEVENTFD:\n\tcase KVM_CAP_PIT2:\n\tcase KVM_CAP_PIT_STATE2:\n\tcase KVM_CAP_SET_IDENTITY_MAP_ADDR:\n\tcase KVM_CAP_XEN_HVM:\n\tcase KVM_CAP_ADJUST_CLOCK:\n\tcase KVM_CAP_VCPU_EVENTS:\n\tcase KVM_CAP_HYPERV:\n\tcase KVM_CAP_HYPERV_VAPIC:\n\tcase KVM_CAP_HYPERV_SPIN:\n\tcase KVM_CAP_PCI_SEGMENT:\n\tcase KVM_CAP_DEBUGREGS:\n\tcase KVM_CAP_X86_ROBUST_SINGLESTEP:\n\tcase KVM_CAP_XSAVE:\n\tcase KVM_CAP_ASYNC_PF:\n\t\tr = 1;\n\t\tbreak;\n\tcase KVM_CAP_COALESCED_MMIO:\n\t\tr = KVM_COALESCED_MMIO_PAGE_OFFSET;\n\t\tbreak;\n\tcase KVM_CAP_VAPIC:\n\t\tr = !kvm_x86_ops->cpu_has_accelerated_tpr();\n\t\tbreak;\n\tcase KVM_CAP_NR_VCPUS:\n\t\tr = KVM_MAX_VCPUS;\n\t\tbreak;\n\tcase KVM_CAP_NR_MEMSLOTS:\n\t\tr = KVM_MEMORY_SLOTS;\n\t\tbreak;\n\tcase KVM_CAP_PV_MMU:\t/* obsolete */\n\t\tr = 0;\n\t\tbreak;\n\tcase KVM_CAP_IOMMU:\n\t\tr = iommu_found();\n\t\tbreak;\n\tcase KVM_CAP_MCE:\n\t\tr = KVM_MAX_MCE_BANKS;\n\t\tbreak;\n\tcase KVM_CAP_XCRS:\n\t\tr = cpu_has_xsave;\n\t\tbreak;\n\tdefault:\n\t\tr = 0;\n\t\tbreak;\n\t}\n\treturn r;\n\n}\n\nlong kvm_arch_dev_ioctl(struct file *filp,\n\t\t\tunsigned int ioctl, unsigned long arg)\n{\n\tvoid __user *argp = (void __user *)arg;\n\tlong r;\n\n\tswitch (ioctl) {\n\tcase KVM_GET_MSR_INDEX_LIST: {\n\t\tstruct kvm_msr_list __user *user_msr_list = argp;\n\t\tstruct kvm_msr_list msr_list;\n\t\tunsigned n;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&msr_list, user_msr_list, sizeof msr_list))\n\t\t\tgoto out;\n\t\tn = msr_list.nmsrs;\n\t\tmsr_list.nmsrs = num_msrs_to_save + ARRAY_SIZE(emulated_msrs);\n\t\tif (copy_to_user(user_msr_list, &msr_list, sizeof msr_list))\n\t\t\tgoto out;\n\t\tr = -E2BIG;\n\t\tif (n < msr_list.nmsrs)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(user_msr_list->indices, &msrs_to_save,\n\t\t\t\t num_msrs_to_save * sizeof(u32)))\n\t\t\tgoto out;\n\t\tif (copy_to_user(user_msr_list->indices + num_msrs_to_save,\n\t\t\t\t &emulated_msrs,\n\t\t\t\t ARRAY_SIZE(emulated_msrs) * sizeof(u32)))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_GET_SUPPORTED_CPUID: {\n\t\tstruct kvm_cpuid2 __user *cpuid_arg = argp;\n\t\tstruct kvm_cpuid2 cpuid;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&cpuid, cpuid_arg, sizeof cpuid))\n\t\t\tgoto out;\n\t\tr = kvm_dev_ioctl_get_supported_cpuid(&cpuid,\n\t\t\t\t\t\t      cpuid_arg->entries);\n\t\tif (r)\n\t\t\tgoto out;\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(cpuid_arg, &cpuid, sizeof cpuid))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_X86_GET_MCE_CAP_SUPPORTED: {\n\t\tu64 mce_cap;\n\n\t\tmce_cap = KVM_MCE_CAP_SUPPORTED;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &mce_cap, sizeof mce_cap))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tdefault:\n\t\tr = -EINVAL;\n\t}\nout:\n\treturn r;\n}\n\nstatic void wbinvd_ipi(void *garbage)\n{\n\twbinvd();\n}\n\nstatic bool need_emulate_wbinvd(struct kvm_vcpu *vcpu)\n{\n\treturn vcpu->kvm->arch.iommu_domain &&\n\t\t!(vcpu->kvm->arch.iommu_flags & KVM_IOMMU_CACHE_COHERENCY);\n}\n\nvoid kvm_arch_vcpu_load(struct kvm_vcpu *vcpu, int cpu)\n{\n\t/* Address WBINVD may be executed by guest */\n\tif (need_emulate_wbinvd(vcpu)) {\n\t\tif (kvm_x86_ops->has_wbinvd_exit())\n\t\t\tcpumask_set_cpu(cpu, vcpu->arch.wbinvd_dirty_mask);\n\t\telse if (vcpu->cpu != -1 && vcpu->cpu != cpu)\n\t\t\tsmp_call_function_single(vcpu->cpu,\n\t\t\t\t\twbinvd_ipi, NULL, 1);\n\t}\n\n\tkvm_x86_ops->vcpu_load(vcpu, cpu);\n\tif (unlikely(vcpu->cpu != cpu) || check_tsc_unstable()) {\n\t\t/* Make sure TSC doesn't go backwards */\n\t\ts64 tsc_delta = !vcpu->arch.last_host_tsc ? 0 :\n\t\t\t\tnative_read_tsc() - vcpu->arch.last_host_tsc;\n\t\tif (tsc_delta < 0)\n\t\t\tmark_tsc_unstable(\"KVM discovered backwards TSC\");\n\t\tif (check_tsc_unstable()) {\n\t\t\tkvm_x86_ops->adjust_tsc_offset(vcpu, -tsc_delta);\n\t\t\tvcpu->arch.tsc_catchup = 1;\n\t\t\tkvm_make_request(KVM_REQ_CLOCK_UPDATE, vcpu);\n\t\t}\n\t\tif (vcpu->cpu != cpu)\n\t\t\tkvm_migrate_timers(vcpu);\n\t\tvcpu->cpu = cpu;\n\t}\n}\n\nvoid kvm_arch_vcpu_put(struct kvm_vcpu *vcpu)\n{\n\tkvm_x86_ops->vcpu_put(vcpu);\n\tkvm_put_guest_fpu(vcpu);\n\tvcpu->arch.last_host_tsc = native_read_tsc();\n}\n\nstatic int is_efer_nx(void)\n{\n\tunsigned long long efer = 0;\n\n\trdmsrl_safe(MSR_EFER, &efer);\n\treturn efer & EFER_NX;\n}\n\nstatic void cpuid_fix_nx_cap(struct kvm_vcpu *vcpu)\n{\n\tint i;\n\tstruct kvm_cpuid_entry2 *e, *entry;\n\n\tentry = NULL;\n\tfor (i = 0; i < vcpu->arch.cpuid_nent; ++i) {\n\t\te = &vcpu->arch.cpuid_entries[i];\n\t\tif (e->function == 0x80000001) {\n\t\t\tentry = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (entry && (entry->edx & (1 << 20)) && !is_efer_nx()) {\n\t\tentry->edx &= ~(1 << 20);\n\t\tprintk(KERN_INFO \"kvm: guest NX capability removed\\n\");\n\t}\n}\n\n/* when an old userspace process fills a new kernel module */\nstatic int kvm_vcpu_ioctl_set_cpuid(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_cpuid *cpuid,\n\t\t\t\t    struct kvm_cpuid_entry __user *entries)\n{\n\tint r, i;\n\tstruct kvm_cpuid_entry *cpuid_entries;\n\n\tr = -E2BIG;\n\tif (cpuid->nent > KVM_MAX_CPUID_ENTRIES)\n\t\tgoto out;\n\tr = -ENOMEM;\n\tcpuid_entries = vmalloc(sizeof(struct kvm_cpuid_entry) * cpuid->nent);\n\tif (!cpuid_entries)\n\t\tgoto out;\n\tr = -EFAULT;\n\tif (copy_from_user(cpuid_entries, entries,\n\t\t\t   cpuid->nent * sizeof(struct kvm_cpuid_entry)))\n\t\tgoto out_free;\n\tfor (i = 0; i < cpuid->nent; i++) {\n\t\tvcpu->arch.cpuid_entries[i].function = cpuid_entries[i].function;\n\t\tvcpu->arch.cpuid_entries[i].eax = cpuid_entries[i].eax;\n\t\tvcpu->arch.cpuid_entries[i].ebx = cpuid_entries[i].ebx;\n\t\tvcpu->arch.cpuid_entries[i].ecx = cpuid_entries[i].ecx;\n\t\tvcpu->arch.cpuid_entries[i].edx = cpuid_entries[i].edx;\n\t\tvcpu->arch.cpuid_entries[i].index = 0;\n\t\tvcpu->arch.cpuid_entries[i].flags = 0;\n\t\tvcpu->arch.cpuid_entries[i].padding[0] = 0;\n\t\tvcpu->arch.cpuid_entries[i].padding[1] = 0;\n\t\tvcpu->arch.cpuid_entries[i].padding[2] = 0;\n\t}\n\tvcpu->arch.cpuid_nent = cpuid->nent;\n\tcpuid_fix_nx_cap(vcpu);\n\tr = 0;\n\tkvm_apic_set_version(vcpu);\n\tkvm_x86_ops->cpuid_update(vcpu);\n\tupdate_cpuid(vcpu);\n\nout_free:\n\tvfree(cpuid_entries);\nout:\n\treturn r;\n}\n\nstatic int kvm_vcpu_ioctl_set_cpuid2(struct kvm_vcpu *vcpu,\n\t\t\t\t     struct kvm_cpuid2 *cpuid,\n\t\t\t\t     struct kvm_cpuid_entry2 __user *entries)\n{\n\tint r;\n\n\tr = -E2BIG;\n\tif (cpuid->nent > KVM_MAX_CPUID_ENTRIES)\n\t\tgoto out;\n\tr = -EFAULT;\n\tif (copy_from_user(&vcpu->arch.cpuid_entries, entries,\n\t\t\t   cpuid->nent * sizeof(struct kvm_cpuid_entry2)))\n\t\tgoto out;\n\tvcpu->arch.cpuid_nent = cpuid->nent;\n\tkvm_apic_set_version(vcpu);\n\tkvm_x86_ops->cpuid_update(vcpu);\n\tupdate_cpuid(vcpu);\n\treturn 0;\n\nout:\n\treturn r;\n}\n\nstatic int kvm_vcpu_ioctl_get_cpuid2(struct kvm_vcpu *vcpu,\n\t\t\t\t     struct kvm_cpuid2 *cpuid,\n\t\t\t\t     struct kvm_cpuid_entry2 __user *entries)\n{\n\tint r;\n\n\tr = -E2BIG;\n\tif (cpuid->nent < vcpu->arch.cpuid_nent)\n\t\tgoto out;\n\tr = -EFAULT;\n\tif (copy_to_user(entries, &vcpu->arch.cpuid_entries,\n\t\t\t vcpu->arch.cpuid_nent * sizeof(struct kvm_cpuid_entry2)))\n\t\tgoto out;\n\treturn 0;\n\nout:\n\tcpuid->nent = vcpu->arch.cpuid_nent;\n\treturn r;\n}\n\nstatic void cpuid_mask(u32 *word, int wordnum)\n{\n\t*word &= boot_cpu_data.x86_capability[wordnum];\n}\n\nstatic void do_cpuid_1_ent(struct kvm_cpuid_entry2 *entry, u32 function,\n\t\t\t   u32 index)\n{\n\tentry->function = function;\n\tentry->index = index;\n\tcpuid_count(entry->function, entry->index,\n\t\t    &entry->eax, &entry->ebx, &entry->ecx, &entry->edx);\n\tentry->flags = 0;\n}\n\n#define F(x) bit(X86_FEATURE_##x)\n\nstatic void do_cpuid_ent(struct kvm_cpuid_entry2 *entry, u32 function,\n\t\t\t u32 index, int *nent, int maxnent)\n{\n\tunsigned f_nx = is_efer_nx() ? F(NX) : 0;\n#ifdef CONFIG_X86_64\n\tunsigned f_gbpages = (kvm_x86_ops->get_lpage_level() == PT_PDPE_LEVEL)\n\t\t\t\t? F(GBPAGES) : 0;\n\tunsigned f_lm = F(LM);\n#else\n\tunsigned f_gbpages = 0;\n\tunsigned f_lm = 0;\n#endif\n\tunsigned f_rdtscp = kvm_x86_ops->rdtscp_supported() ? F(RDTSCP) : 0;\n\n\t/* cpuid 1.edx */\n\tconst u32 kvm_supported_word0_x86_features =\n\t\tF(FPU) | F(VME) | F(DE) | F(PSE) |\n\t\tF(TSC) | F(MSR) | F(PAE) | F(MCE) |\n\t\tF(CX8) | F(APIC) | 0 /* Reserved */ | F(SEP) |\n\t\tF(MTRR) | F(PGE) | F(MCA) | F(CMOV) |\n\t\tF(PAT) | F(PSE36) | 0 /* PSN */ | F(CLFLSH) |\n\t\t0 /* Reserved, DS, ACPI */ | F(MMX) |\n\t\tF(FXSR) | F(XMM) | F(XMM2) | F(SELFSNOOP) |\n\t\t0 /* HTT, TM, Reserved, PBE */;\n\t/* cpuid 0x80000001.edx */\n\tconst u32 kvm_supported_word1_x86_features =\n\t\tF(FPU) | F(VME) | F(DE) | F(PSE) |\n\t\tF(TSC) | F(MSR) | F(PAE) | F(MCE) |\n\t\tF(CX8) | F(APIC) | 0 /* Reserved */ | F(SYSCALL) |\n\t\tF(MTRR) | F(PGE) | F(MCA) | F(CMOV) |\n\t\tF(PAT) | F(PSE36) | 0 /* Reserved */ |\n\t\tf_nx | 0 /* Reserved */ | F(MMXEXT) | F(MMX) |\n\t\tF(FXSR) | F(FXSR_OPT) | f_gbpages | f_rdtscp |\n\t\t0 /* Reserved */ | f_lm | F(3DNOWEXT) | F(3DNOW);\n\t/* cpuid 1.ecx */\n\tconst u32 kvm_supported_word4_x86_features =\n\t\tF(XMM3) | F(PCLMULQDQ) | 0 /* DTES64, MONITOR */ |\n\t\t0 /* DS-CPL, VMX, SMX, EST */ |\n\t\t0 /* TM2 */ | F(SSSE3) | 0 /* CNXT-ID */ | 0 /* Reserved */ |\n\t\t0 /* Reserved */ | F(CX16) | 0 /* xTPR Update, PDCM */ |\n\t\t0 /* Reserved, DCA */ | F(XMM4_1) |\n\t\tF(XMM4_2) | F(X2APIC) | F(MOVBE) | F(POPCNT) |\n\t\t0 /* Reserved*/ | F(AES) | F(XSAVE) | 0 /* OSXSAVE */ | F(AVX) |\n\t\tF(F16C);\n\t/* cpuid 0x80000001.ecx */\n\tconst u32 kvm_supported_word6_x86_features =\n\t\tF(LAHF_LM) | F(CMP_LEGACY) | 0 /*SVM*/ | 0 /* ExtApicSpace */ |\n\t\tF(CR8_LEGACY) | F(ABM) | F(SSE4A) | F(MISALIGNSSE) |\n\t\tF(3DNOWPREFETCH) | 0 /* OSVW */ | 0 /* IBS */ | F(XOP) |\n\t\t0 /* SKINIT, WDT, LWP */ | F(FMA4) | F(TBM);\n\n\t/* all calls to cpuid_count() should be made on the same cpu */\n\tget_cpu();\n\tdo_cpuid_1_ent(entry, function, index);\n\t++*nent;\n\n\tswitch (function) {\n\tcase 0:\n\t\tentry->eax = min(entry->eax, (u32)0xd);\n\t\tbreak;\n\tcase 1:\n\t\tentry->edx &= kvm_supported_word0_x86_features;\n\t\tcpuid_mask(&entry->edx, 0);\n\t\tentry->ecx &= kvm_supported_word4_x86_features;\n\t\tcpuid_mask(&entry->ecx, 4);\n\t\t/* we support x2apic emulation even if host does not support\n\t\t * it since we emulate x2apic in software */\n\t\tentry->ecx |= F(X2APIC);\n\t\tbreak;\n\t/* function 2 entries are STATEFUL. That is, repeated cpuid commands\n\t * may return different values. This forces us to get_cpu() before\n\t * issuing the first command, and also to emulate this annoying behavior\n\t * in kvm_emulate_cpuid() using KVM_CPUID_FLAG_STATE_READ_NEXT */\n\tcase 2: {\n\t\tint t, times = entry->eax & 0xff;\n\n\t\tentry->flags |= KVM_CPUID_FLAG_STATEFUL_FUNC;\n\t\tentry->flags |= KVM_CPUID_FLAG_STATE_READ_NEXT;\n\t\tfor (t = 1; t < times && *nent < maxnent; ++t) {\n\t\t\tdo_cpuid_1_ent(&entry[t], function, 0);\n\t\t\tentry[t].flags |= KVM_CPUID_FLAG_STATEFUL_FUNC;\n\t\t\t++*nent;\n\t\t}\n\t\tbreak;\n\t}\n\t/* function 4 and 0xb have additional index. */\n\tcase 4: {\n\t\tint i, cache_type;\n\n\t\tentry->flags |= KVM_CPUID_FLAG_SIGNIFCANT_INDEX;\n\t\t/* read more entries until cache_type is zero */\n\t\tfor (i = 1; *nent < maxnent; ++i) {\n\t\t\tcache_type = entry[i - 1].eax & 0x1f;\n\t\t\tif (!cache_type)\n\t\t\t\tbreak;\n\t\t\tdo_cpuid_1_ent(&entry[i], function, i);\n\t\t\tentry[i].flags |=\n\t\t\t       KVM_CPUID_FLAG_SIGNIFCANT_INDEX;\n\t\t\t++*nent;\n\t\t}\n\t\tbreak;\n\t}\n\tcase 0xb: {\n\t\tint i, level_type;\n\n\t\tentry->flags |= KVM_CPUID_FLAG_SIGNIFCANT_INDEX;\n\t\t/* read more entries until level_type is zero */\n\t\tfor (i = 1; *nent < maxnent; ++i) {\n\t\t\tlevel_type = entry[i - 1].ecx & 0xff00;\n\t\t\tif (!level_type)\n\t\t\t\tbreak;\n\t\t\tdo_cpuid_1_ent(&entry[i], function, i);\n\t\t\tentry[i].flags |=\n\t\t\t       KVM_CPUID_FLAG_SIGNIFCANT_INDEX;\n\t\t\t++*nent;\n\t\t}\n\t\tbreak;\n\t}\n\tcase 0xd: {\n\t\tint i;\n\n\t\tentry->flags |= KVM_CPUID_FLAG_SIGNIFCANT_INDEX;\n\t\tfor (i = 1; *nent < maxnent; ++i) {\n\t\t\tif (entry[i - 1].eax == 0 && i != 2)\n\t\t\t\tbreak;\n\t\t\tdo_cpuid_1_ent(&entry[i], function, i);\n\t\t\tentry[i].flags |=\n\t\t\t       KVM_CPUID_FLAG_SIGNIFCANT_INDEX;\n\t\t\t++*nent;\n\t\t}\n\t\tbreak;\n\t}\n\tcase KVM_CPUID_SIGNATURE: {\n\t\tchar signature[12] = \"KVMKVMKVM\\0\\0\";\n\t\tu32 *sigptr = (u32 *)signature;\n\t\tentry->eax = 0;\n\t\tentry->ebx = sigptr[0];\n\t\tentry->ecx = sigptr[1];\n\t\tentry->edx = sigptr[2];\n\t\tbreak;\n\t}\n\tcase KVM_CPUID_FEATURES:\n\t\tentry->eax = (1 << KVM_FEATURE_CLOCKSOURCE) |\n\t\t\t     (1 << KVM_FEATURE_NOP_IO_DELAY) |\n\t\t\t     (1 << KVM_FEATURE_CLOCKSOURCE2) |\n\t\t\t     (1 << KVM_FEATURE_CLOCKSOURCE_STABLE_BIT);\n\t\tentry->ebx = 0;\n\t\tentry->ecx = 0;\n\t\tentry->edx = 0;\n\t\tbreak;\n\tcase 0x80000000:\n\t\tentry->eax = min(entry->eax, 0x8000001a);\n\t\tbreak;\n\tcase 0x80000001:\n\t\tentry->edx &= kvm_supported_word1_x86_features;\n\t\tcpuid_mask(&entry->edx, 1);\n\t\tentry->ecx &= kvm_supported_word6_x86_features;\n\t\tcpuid_mask(&entry->ecx, 6);\n\t\tbreak;\n\t}\n\n\tkvm_x86_ops->set_supported_cpuid(function, entry);\n\n\tput_cpu();\n}\n\n#undef F\n\nstatic int kvm_dev_ioctl_get_supported_cpuid(struct kvm_cpuid2 *cpuid,\n\t\t\t\t     struct kvm_cpuid_entry2 __user *entries)\n{\n\tstruct kvm_cpuid_entry2 *cpuid_entries;\n\tint limit, nent = 0, r = -E2BIG;\n\tu32 func;\n\n\tif (cpuid->nent < 1)\n\t\tgoto out;\n\tif (cpuid->nent > KVM_MAX_CPUID_ENTRIES)\n\t\tcpuid->nent = KVM_MAX_CPUID_ENTRIES;\n\tr = -ENOMEM;\n\tcpuid_entries = vmalloc(sizeof(struct kvm_cpuid_entry2) * cpuid->nent);\n\tif (!cpuid_entries)\n\t\tgoto out;\n\n\tdo_cpuid_ent(&cpuid_entries[0], 0, 0, &nent, cpuid->nent);\n\tlimit = cpuid_entries[0].eax;\n\tfor (func = 1; func <= limit && nent < cpuid->nent; ++func)\n\t\tdo_cpuid_ent(&cpuid_entries[nent], func, 0,\n\t\t\t     &nent, cpuid->nent);\n\tr = -E2BIG;\n\tif (nent >= cpuid->nent)\n\t\tgoto out_free;\n\n\tdo_cpuid_ent(&cpuid_entries[nent], 0x80000000, 0, &nent, cpuid->nent);\n\tlimit = cpuid_entries[nent - 1].eax;\n\tfor (func = 0x80000001; func <= limit && nent < cpuid->nent; ++func)\n\t\tdo_cpuid_ent(&cpuid_entries[nent], func, 0,\n\t\t\t     &nent, cpuid->nent);\n\n\n\n\tr = -E2BIG;\n\tif (nent >= cpuid->nent)\n\t\tgoto out_free;\n\n\tdo_cpuid_ent(&cpuid_entries[nent], KVM_CPUID_SIGNATURE, 0, &nent,\n\t\t     cpuid->nent);\n\n\tr = -E2BIG;\n\tif (nent >= cpuid->nent)\n\t\tgoto out_free;\n\n\tdo_cpuid_ent(&cpuid_entries[nent], KVM_CPUID_FEATURES, 0, &nent,\n\t\t     cpuid->nent);\n\n\tr = -E2BIG;\n\tif (nent >= cpuid->nent)\n\t\tgoto out_free;\n\n\tr = -EFAULT;\n\tif (copy_to_user(entries, cpuid_entries,\n\t\t\t nent * sizeof(struct kvm_cpuid_entry2)))\n\t\tgoto out_free;\n\tcpuid->nent = nent;\n\tr = 0;\n\nout_free:\n\tvfree(cpuid_entries);\nout:\n\treturn r;\n}\n\nstatic int kvm_vcpu_ioctl_get_lapic(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_lapic_state *s)\n{\n\tmemcpy(s->regs, vcpu->arch.apic->regs, sizeof *s);\n\n\treturn 0;\n}\n\nstatic int kvm_vcpu_ioctl_set_lapic(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_lapic_state *s)\n{\n\tmemcpy(vcpu->arch.apic->regs, s->regs, sizeof *s);\n\tkvm_apic_post_state_restore(vcpu);\n\tupdate_cr8_intercept(vcpu);\n\n\treturn 0;\n}\n\nstatic int kvm_vcpu_ioctl_interrupt(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_interrupt *irq)\n{\n\tif (irq->irq < 0 || irq->irq >= 256)\n\t\treturn -EINVAL;\n\tif (irqchip_in_kernel(vcpu->kvm))\n\t\treturn -ENXIO;\n\n\tkvm_queue_interrupt(vcpu, irq->irq, false);\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\n\treturn 0;\n}\n\nstatic int kvm_vcpu_ioctl_nmi(struct kvm_vcpu *vcpu)\n{\n\tkvm_inject_nmi(vcpu);\n\n\treturn 0;\n}\n\nstatic int vcpu_ioctl_tpr_access_reporting(struct kvm_vcpu *vcpu,\n\t\t\t\t\t   struct kvm_tpr_access_ctl *tac)\n{\n\tif (tac->flags)\n\t\treturn -EINVAL;\n\tvcpu->arch.tpr_access_reporting = !!tac->enabled;\n\treturn 0;\n}\n\nstatic int kvm_vcpu_ioctl_x86_setup_mce(struct kvm_vcpu *vcpu,\n\t\t\t\t\tu64 mcg_cap)\n{\n\tint r;\n\tunsigned bank_num = mcg_cap & 0xff, bank;\n\n\tr = -EINVAL;\n\tif (!bank_num || bank_num >= KVM_MAX_MCE_BANKS)\n\t\tgoto out;\n\tif (mcg_cap & ~(KVM_MCE_CAP_SUPPORTED | 0xff | 0xff0000))\n\t\tgoto out;\n\tr = 0;\n\tvcpu->arch.mcg_cap = mcg_cap;\n\t/* Init IA32_MCG_CTL to all 1s */\n\tif (mcg_cap & MCG_CTL_P)\n\t\tvcpu->arch.mcg_ctl = ~(u64)0;\n\t/* Init IA32_MCi_CTL to all 1s */\n\tfor (bank = 0; bank < bank_num; bank++)\n\t\tvcpu->arch.mce_banks[bank*4] = ~(u64)0;\nout:\n\treturn r;\n}\n\nstatic int kvm_vcpu_ioctl_x86_set_mce(struct kvm_vcpu *vcpu,\n\t\t\t\t      struct kvm_x86_mce *mce)\n{\n\tu64 mcg_cap = vcpu->arch.mcg_cap;\n\tunsigned bank_num = mcg_cap & 0xff;\n\tu64 *banks = vcpu->arch.mce_banks;\n\n\tif (mce->bank >= bank_num || !(mce->status & MCI_STATUS_VAL))\n\t\treturn -EINVAL;\n\t/*\n\t * if IA32_MCG_CTL is not all 1s, the uncorrected error\n\t * reporting is disabled\n\t */\n\tif ((mce->status & MCI_STATUS_UC) && (mcg_cap & MCG_CTL_P) &&\n\t    vcpu->arch.mcg_ctl != ~(u64)0)\n\t\treturn 0;\n\tbanks += 4 * mce->bank;\n\t/*\n\t * if IA32_MCi_CTL is not all 1s, the uncorrected error\n\t * reporting is disabled for the bank\n\t */\n\tif ((mce->status & MCI_STATUS_UC) && banks[0] != ~(u64)0)\n\t\treturn 0;\n\tif (mce->status & MCI_STATUS_UC) {\n\t\tif ((vcpu->arch.mcg_status & MCG_STATUS_MCIP) ||\n\t\t    !kvm_read_cr4_bits(vcpu, X86_CR4_MCE)) {\n\t\t\tprintk(KERN_DEBUG \"kvm: set_mce: \"\n\t\t\t       \"injects mce exception while \"\n\t\t\t       \"previous one is in progress!\\n\");\n\t\t\tkvm_make_request(KVM_REQ_TRIPLE_FAULT, vcpu);\n\t\t\treturn 0;\n\t\t}\n\t\tif (banks[1] & MCI_STATUS_VAL)\n\t\t\tmce->status |= MCI_STATUS_OVER;\n\t\tbanks[2] = mce->addr;\n\t\tbanks[3] = mce->misc;\n\t\tvcpu->arch.mcg_status = mce->mcg_status;\n\t\tbanks[1] = mce->status;\n\t\tkvm_queue_exception(vcpu, MC_VECTOR);\n\t} else if (!(banks[1] & MCI_STATUS_VAL)\n\t\t   || !(banks[1] & MCI_STATUS_UC)) {\n\t\tif (banks[1] & MCI_STATUS_VAL)\n\t\t\tmce->status |= MCI_STATUS_OVER;\n\t\tbanks[2] = mce->addr;\n\t\tbanks[3] = mce->misc;\n\t\tbanks[1] = mce->status;\n\t} else\n\t\tbanks[1] |= MCI_STATUS_OVER;\n\treturn 0;\n}\n\nstatic void kvm_vcpu_ioctl_x86_get_vcpu_events(struct kvm_vcpu *vcpu,\n\t\t\t\t\t       struct kvm_vcpu_events *events)\n{\n\tevents->exception.injected =\n\t\tvcpu->arch.exception.pending &&\n\t\t!kvm_exception_is_soft(vcpu->arch.exception.nr);\n\tevents->exception.nr = vcpu->arch.exception.nr;\n\tevents->exception.has_error_code = vcpu->arch.exception.has_error_code;\n\tevents->exception.pad = 0;\n\tevents->exception.error_code = vcpu->arch.exception.error_code;\n\n\tevents->interrupt.injected =\n\t\tvcpu->arch.interrupt.pending && !vcpu->arch.interrupt.soft;\n\tevents->interrupt.nr = vcpu->arch.interrupt.nr;\n\tevents->interrupt.soft = 0;\n\tevents->interrupt.shadow =\n\t\tkvm_x86_ops->get_interrupt_shadow(vcpu,\n\t\t\tKVM_X86_SHADOW_INT_MOV_SS | KVM_X86_SHADOW_INT_STI);\n\n\tevents->nmi.injected = vcpu->arch.nmi_injected;\n\tevents->nmi.pending = vcpu->arch.nmi_pending;\n\tevents->nmi.masked = kvm_x86_ops->get_nmi_mask(vcpu);\n\tevents->nmi.pad = 0;\n\n\tevents->sipi_vector = vcpu->arch.sipi_vector;\n\n\tevents->flags = (KVM_VCPUEVENT_VALID_NMI_PENDING\n\t\t\t | KVM_VCPUEVENT_VALID_SIPI_VECTOR\n\t\t\t | KVM_VCPUEVENT_VALID_SHADOW);\n\tmemset(&events->reserved, 0, sizeof(events->reserved));\n}\n\nstatic int kvm_vcpu_ioctl_x86_set_vcpu_events(struct kvm_vcpu *vcpu,\n\t\t\t\t\t      struct kvm_vcpu_events *events)\n{\n\tif (events->flags & ~(KVM_VCPUEVENT_VALID_NMI_PENDING\n\t\t\t      | KVM_VCPUEVENT_VALID_SIPI_VECTOR\n\t\t\t      | KVM_VCPUEVENT_VALID_SHADOW))\n\t\treturn -EINVAL;\n\n\tvcpu->arch.exception.pending = events->exception.injected;\n\tvcpu->arch.exception.nr = events->exception.nr;\n\tvcpu->arch.exception.has_error_code = events->exception.has_error_code;\n\tvcpu->arch.exception.error_code = events->exception.error_code;\n\n\tvcpu->arch.interrupt.pending = events->interrupt.injected;\n\tvcpu->arch.interrupt.nr = events->interrupt.nr;\n\tvcpu->arch.interrupt.soft = events->interrupt.soft;\n\tif (vcpu->arch.interrupt.pending && irqchip_in_kernel(vcpu->kvm))\n\t\tkvm_pic_clear_isr_ack(vcpu->kvm);\n\tif (events->flags & KVM_VCPUEVENT_VALID_SHADOW)\n\t\tkvm_x86_ops->set_interrupt_shadow(vcpu,\n\t\t\t\t\t\t  events->interrupt.shadow);\n\n\tvcpu->arch.nmi_injected = events->nmi.injected;\n\tif (events->flags & KVM_VCPUEVENT_VALID_NMI_PENDING)\n\t\tvcpu->arch.nmi_pending = events->nmi.pending;\n\tkvm_x86_ops->set_nmi_mask(vcpu, events->nmi.masked);\n\n\tif (events->flags & KVM_VCPUEVENT_VALID_SIPI_VECTOR)\n\t\tvcpu->arch.sipi_vector = events->sipi_vector;\n\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\n\treturn 0;\n}\n\nstatic void kvm_vcpu_ioctl_x86_get_debugregs(struct kvm_vcpu *vcpu,\n\t\t\t\t\t     struct kvm_debugregs *dbgregs)\n{\n\tmemcpy(dbgregs->db, vcpu->arch.db, sizeof(vcpu->arch.db));\n\tdbgregs->dr6 = vcpu->arch.dr6;\n\tdbgregs->dr7 = vcpu->arch.dr7;\n\tdbgregs->flags = 0;\n\tmemset(&dbgregs->reserved, 0, sizeof(dbgregs->reserved));\n}\n\nstatic int kvm_vcpu_ioctl_x86_set_debugregs(struct kvm_vcpu *vcpu,\n\t\t\t\t\t    struct kvm_debugregs *dbgregs)\n{\n\tif (dbgregs->flags)\n\t\treturn -EINVAL;\n\n\tmemcpy(vcpu->arch.db, dbgregs->db, sizeof(vcpu->arch.db));\n\tvcpu->arch.dr6 = dbgregs->dr6;\n\tvcpu->arch.dr7 = dbgregs->dr7;\n\n\treturn 0;\n}\n\nstatic void kvm_vcpu_ioctl_x86_get_xsave(struct kvm_vcpu *vcpu,\n\t\t\t\t\t struct kvm_xsave *guest_xsave)\n{\n\tif (cpu_has_xsave)\n\t\tmemcpy(guest_xsave->region,\n\t\t\t&vcpu->arch.guest_fpu.state->xsave,\n\t\t\txstate_size);\n\telse {\n\t\tmemcpy(guest_xsave->region,\n\t\t\t&vcpu->arch.guest_fpu.state->fxsave,\n\t\t\tsizeof(struct i387_fxsave_struct));\n\t\t*(u64 *)&guest_xsave->region[XSAVE_HDR_OFFSET / sizeof(u32)] =\n\t\t\tXSTATE_FPSSE;\n\t}\n}\n\nstatic int kvm_vcpu_ioctl_x86_set_xsave(struct kvm_vcpu *vcpu,\n\t\t\t\t\tstruct kvm_xsave *guest_xsave)\n{\n\tu64 xstate_bv =\n\t\t*(u64 *)&guest_xsave->region[XSAVE_HDR_OFFSET / sizeof(u32)];\n\n\tif (cpu_has_xsave)\n\t\tmemcpy(&vcpu->arch.guest_fpu.state->xsave,\n\t\t\tguest_xsave->region, xstate_size);\n\telse {\n\t\tif (xstate_bv & ~XSTATE_FPSSE)\n\t\t\treturn -EINVAL;\n\t\tmemcpy(&vcpu->arch.guest_fpu.state->fxsave,\n\t\t\tguest_xsave->region, sizeof(struct i387_fxsave_struct));\n\t}\n\treturn 0;\n}\n\nstatic void kvm_vcpu_ioctl_x86_get_xcrs(struct kvm_vcpu *vcpu,\n\t\t\t\t\tstruct kvm_xcrs *guest_xcrs)\n{\n\tif (!cpu_has_xsave) {\n\t\tguest_xcrs->nr_xcrs = 0;\n\t\treturn;\n\t}\n\n\tguest_xcrs->nr_xcrs = 1;\n\tguest_xcrs->flags = 0;\n\tguest_xcrs->xcrs[0].xcr = XCR_XFEATURE_ENABLED_MASK;\n\tguest_xcrs->xcrs[0].value = vcpu->arch.xcr0;\n}\n\nstatic int kvm_vcpu_ioctl_x86_set_xcrs(struct kvm_vcpu *vcpu,\n\t\t\t\t       struct kvm_xcrs *guest_xcrs)\n{\n\tint i, r = 0;\n\n\tif (!cpu_has_xsave)\n\t\treturn -EINVAL;\n\n\tif (guest_xcrs->nr_xcrs > KVM_MAX_XCRS || guest_xcrs->flags)\n\t\treturn -EINVAL;\n\n\tfor (i = 0; i < guest_xcrs->nr_xcrs; i++)\n\t\t/* Only support XCR0 currently */\n\t\tif (guest_xcrs->xcrs[0].xcr == XCR_XFEATURE_ENABLED_MASK) {\n\t\t\tr = __kvm_set_xcr(vcpu, XCR_XFEATURE_ENABLED_MASK,\n\t\t\t\tguest_xcrs->xcrs[0].value);\n\t\t\tbreak;\n\t\t}\n\tif (r)\n\t\tr = -EINVAL;\n\treturn r;\n}\n\nlong kvm_arch_vcpu_ioctl(struct file *filp,\n\t\t\t unsigned int ioctl, unsigned long arg)\n{\n\tstruct kvm_vcpu *vcpu = filp->private_data;\n\tvoid __user *argp = (void __user *)arg;\n\tint r;\n\tunion {\n\t\tstruct kvm_lapic_state *lapic;\n\t\tstruct kvm_xsave *xsave;\n\t\tstruct kvm_xcrs *xcrs;\n\t\tvoid *buffer;\n\t} u;\n\n\tu.buffer = NULL;\n\tswitch (ioctl) {\n\tcase KVM_GET_LAPIC: {\n\t\tr = -EINVAL;\n\t\tif (!vcpu->arch.apic)\n\t\t\tgoto out;\n\t\tu.lapic = kzalloc(sizeof(struct kvm_lapic_state), GFP_KERNEL);\n\n\t\tr = -ENOMEM;\n\t\tif (!u.lapic)\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_get_lapic(vcpu, u.lapic);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, u.lapic, sizeof(struct kvm_lapic_state)))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_LAPIC: {\n\t\tr = -EINVAL;\n\t\tif (!vcpu->arch.apic)\n\t\t\tgoto out;\n\t\tu.lapic = kmalloc(sizeof(struct kvm_lapic_state), GFP_KERNEL);\n\t\tr = -ENOMEM;\n\t\tif (!u.lapic)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(u.lapic, argp, sizeof(struct kvm_lapic_state)))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_set_lapic(vcpu, u.lapic);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_INTERRUPT: {\n\t\tstruct kvm_interrupt irq;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&irq, argp, sizeof irq))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_interrupt(vcpu, &irq);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_NMI: {\n\t\tr = kvm_vcpu_ioctl_nmi(vcpu);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_CPUID: {\n\t\tstruct kvm_cpuid __user *cpuid_arg = argp;\n\t\tstruct kvm_cpuid cpuid;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&cpuid, cpuid_arg, sizeof cpuid))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_set_cpuid(vcpu, &cpuid, cpuid_arg->entries);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tbreak;\n\t}\n\tcase KVM_SET_CPUID2: {\n\t\tstruct kvm_cpuid2 __user *cpuid_arg = argp;\n\t\tstruct kvm_cpuid2 cpuid;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&cpuid, cpuid_arg, sizeof cpuid))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_set_cpuid2(vcpu, &cpuid,\n\t\t\t\t\t      cpuid_arg->entries);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tbreak;\n\t}\n\tcase KVM_GET_CPUID2: {\n\t\tstruct kvm_cpuid2 __user *cpuid_arg = argp;\n\t\tstruct kvm_cpuid2 cpuid;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&cpuid, cpuid_arg, sizeof cpuid))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_get_cpuid2(vcpu, &cpuid,\n\t\t\t\t\t      cpuid_arg->entries);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(cpuid_arg, &cpuid, sizeof cpuid))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_GET_MSRS:\n\t\tr = msr_io(vcpu, argp, kvm_get_msr, 1);\n\t\tbreak;\n\tcase KVM_SET_MSRS:\n\t\tr = msr_io(vcpu, argp, do_set_msr, 0);\n\t\tbreak;\n\tcase KVM_TPR_ACCESS_REPORTING: {\n\t\tstruct kvm_tpr_access_ctl tac;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&tac, argp, sizeof tac))\n\t\t\tgoto out;\n\t\tr = vcpu_ioctl_tpr_access_reporting(vcpu, &tac);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &tac, sizeof tac))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t};\n\tcase KVM_SET_VAPIC_ADDR: {\n\t\tstruct kvm_vapic_addr va;\n\n\t\tr = -EINVAL;\n\t\tif (!irqchip_in_kernel(vcpu->kvm))\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&va, argp, sizeof va))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tkvm_lapic_set_vapic_addr(vcpu, va.vapic_addr);\n\t\tbreak;\n\t}\n\tcase KVM_X86_SETUP_MCE: {\n\t\tu64 mcg_cap;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&mcg_cap, argp, sizeof mcg_cap))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_x86_setup_mce(vcpu, mcg_cap);\n\t\tbreak;\n\t}\n\tcase KVM_X86_SET_MCE: {\n\t\tstruct kvm_x86_mce mce;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&mce, argp, sizeof mce))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_x86_set_mce(vcpu, &mce);\n\t\tbreak;\n\t}\n\tcase KVM_GET_VCPU_EVENTS: {\n\t\tstruct kvm_vcpu_events events;\n\n\t\tkvm_vcpu_ioctl_x86_get_vcpu_events(vcpu, &events);\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &events, sizeof(struct kvm_vcpu_events)))\n\t\t\tbreak;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_VCPU_EVENTS: {\n\t\tstruct kvm_vcpu_events events;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&events, argp, sizeof(struct kvm_vcpu_events)))\n\t\t\tbreak;\n\n\t\tr = kvm_vcpu_ioctl_x86_set_vcpu_events(vcpu, &events);\n\t\tbreak;\n\t}\n\tcase KVM_GET_DEBUGREGS: {\n\t\tstruct kvm_debugregs dbgregs;\n\n\t\tkvm_vcpu_ioctl_x86_get_debugregs(vcpu, &dbgregs);\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &dbgregs,\n\t\t\t\t sizeof(struct kvm_debugregs)))\n\t\t\tbreak;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_DEBUGREGS: {\n\t\tstruct kvm_debugregs dbgregs;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&dbgregs, argp,\n\t\t\t\t   sizeof(struct kvm_debugregs)))\n\t\t\tbreak;\n\n\t\tr = kvm_vcpu_ioctl_x86_set_debugregs(vcpu, &dbgregs);\n\t\tbreak;\n\t}\n\tcase KVM_GET_XSAVE: {\n\t\tu.xsave = kzalloc(sizeof(struct kvm_xsave), GFP_KERNEL);\n\t\tr = -ENOMEM;\n\t\tif (!u.xsave)\n\t\t\tbreak;\n\n\t\tkvm_vcpu_ioctl_x86_get_xsave(vcpu, u.xsave);\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, u.xsave, sizeof(struct kvm_xsave)))\n\t\t\tbreak;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_XSAVE: {\n\t\tu.xsave = kzalloc(sizeof(struct kvm_xsave), GFP_KERNEL);\n\t\tr = -ENOMEM;\n\t\tif (!u.xsave)\n\t\t\tbreak;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(u.xsave, argp, sizeof(struct kvm_xsave)))\n\t\t\tbreak;\n\n\t\tr = kvm_vcpu_ioctl_x86_set_xsave(vcpu, u.xsave);\n\t\tbreak;\n\t}\n\tcase KVM_GET_XCRS: {\n\t\tu.xcrs = kzalloc(sizeof(struct kvm_xcrs), GFP_KERNEL);\n\t\tr = -ENOMEM;\n\t\tif (!u.xcrs)\n\t\t\tbreak;\n\n\t\tkvm_vcpu_ioctl_x86_get_xcrs(vcpu, u.xcrs);\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, u.xcrs,\n\t\t\t\t sizeof(struct kvm_xcrs)))\n\t\t\tbreak;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_XCRS: {\n\t\tu.xcrs = kzalloc(sizeof(struct kvm_xcrs), GFP_KERNEL);\n\t\tr = -ENOMEM;\n\t\tif (!u.xcrs)\n\t\t\tbreak;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(u.xcrs, argp,\n\t\t\t\t   sizeof(struct kvm_xcrs)))\n\t\t\tbreak;\n\n\t\tr = kvm_vcpu_ioctl_x86_set_xcrs(vcpu, u.xcrs);\n\t\tbreak;\n\t}\n\tdefault:\n\t\tr = -EINVAL;\n\t}\nout:\n\tkfree(u.buffer);\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_set_tss_addr(struct kvm *kvm, unsigned long addr)\n{\n\tint ret;\n\n\tif (addr > (unsigned int)(-3 * PAGE_SIZE))\n\t\treturn -1;\n\tret = kvm_x86_ops->set_tss_addr(kvm, addr);\n\treturn ret;\n}\n\nstatic int kvm_vm_ioctl_set_identity_map_addr(struct kvm *kvm,\n\t\t\t\t\t      u64 ident_addr)\n{\n\tkvm->arch.ept_identity_map_addr = ident_addr;\n\treturn 0;\n}\n\nstatic int kvm_vm_ioctl_set_nr_mmu_pages(struct kvm *kvm,\n\t\t\t\t\t  u32 kvm_nr_mmu_pages)\n{\n\tif (kvm_nr_mmu_pages < KVM_MIN_ALLOC_MMU_PAGES)\n\t\treturn -EINVAL;\n\n\tmutex_lock(&kvm->slots_lock);\n\tspin_lock(&kvm->mmu_lock);\n\n\tkvm_mmu_change_mmu_pages(kvm, kvm_nr_mmu_pages);\n\tkvm->arch.n_requested_mmu_pages = kvm_nr_mmu_pages;\n\n\tspin_unlock(&kvm->mmu_lock);\n\tmutex_unlock(&kvm->slots_lock);\n\treturn 0;\n}\n\nstatic int kvm_vm_ioctl_get_nr_mmu_pages(struct kvm *kvm)\n{\n\treturn kvm->arch.n_max_mmu_pages;\n}\n\nstatic int kvm_vm_ioctl_get_irqchip(struct kvm *kvm, struct kvm_irqchip *chip)\n{\n\tint r;\n\n\tr = 0;\n\tswitch (chip->chip_id) {\n\tcase KVM_IRQCHIP_PIC_MASTER:\n\t\tmemcpy(&chip->chip.pic,\n\t\t\t&pic_irqchip(kvm)->pics[0],\n\t\t\tsizeof(struct kvm_pic_state));\n\t\tbreak;\n\tcase KVM_IRQCHIP_PIC_SLAVE:\n\t\tmemcpy(&chip->chip.pic,\n\t\t\t&pic_irqchip(kvm)->pics[1],\n\t\t\tsizeof(struct kvm_pic_state));\n\t\tbreak;\n\tcase KVM_IRQCHIP_IOAPIC:\n\t\tr = kvm_get_ioapic(kvm, &chip->chip.ioapic);\n\t\tbreak;\n\tdefault:\n\t\tr = -EINVAL;\n\t\tbreak;\n\t}\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_set_irqchip(struct kvm *kvm, struct kvm_irqchip *chip)\n{\n\tint r;\n\n\tr = 0;\n\tswitch (chip->chip_id) {\n\tcase KVM_IRQCHIP_PIC_MASTER:\n\t\tspin_lock(&pic_irqchip(kvm)->lock);\n\t\tmemcpy(&pic_irqchip(kvm)->pics[0],\n\t\t\t&chip->chip.pic,\n\t\t\tsizeof(struct kvm_pic_state));\n\t\tspin_unlock(&pic_irqchip(kvm)->lock);\n\t\tbreak;\n\tcase KVM_IRQCHIP_PIC_SLAVE:\n\t\tspin_lock(&pic_irqchip(kvm)->lock);\n\t\tmemcpy(&pic_irqchip(kvm)->pics[1],\n\t\t\t&chip->chip.pic,\n\t\t\tsizeof(struct kvm_pic_state));\n\t\tspin_unlock(&pic_irqchip(kvm)->lock);\n\t\tbreak;\n\tcase KVM_IRQCHIP_IOAPIC:\n\t\tr = kvm_set_ioapic(kvm, &chip->chip.ioapic);\n\t\tbreak;\n\tdefault:\n\t\tr = -EINVAL;\n\t\tbreak;\n\t}\n\tkvm_pic_update_irq(pic_irqchip(kvm));\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_get_pit(struct kvm *kvm, struct kvm_pit_state *ps)\n{\n\tint r = 0;\n\n\tmutex_lock(&kvm->arch.vpit->pit_state.lock);\n\tmemcpy(ps, &kvm->arch.vpit->pit_state, sizeof(struct kvm_pit_state));\n\tmutex_unlock(&kvm->arch.vpit->pit_state.lock);\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_set_pit(struct kvm *kvm, struct kvm_pit_state *ps)\n{\n\tint r = 0;\n\n\tmutex_lock(&kvm->arch.vpit->pit_state.lock);\n\tmemcpy(&kvm->arch.vpit->pit_state, ps, sizeof(struct kvm_pit_state));\n\tkvm_pit_load_count(kvm, 0, ps->channels[0].count, 0);\n\tmutex_unlock(&kvm->arch.vpit->pit_state.lock);\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_get_pit2(struct kvm *kvm, struct kvm_pit_state2 *ps)\n{\n\tint r = 0;\n\n\tmutex_lock(&kvm->arch.vpit->pit_state.lock);\n\tmemcpy(ps->channels, &kvm->arch.vpit->pit_state.channels,\n\t\tsizeof(ps->channels));\n\tps->flags = kvm->arch.vpit->pit_state.flags;\n\tmutex_unlock(&kvm->arch.vpit->pit_state.lock);\n\tmemset(&ps->reserved, 0, sizeof(ps->reserved));\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_set_pit2(struct kvm *kvm, struct kvm_pit_state2 *ps)\n{\n\tint r = 0, start = 0;\n\tu32 prev_legacy, cur_legacy;\n\tmutex_lock(&kvm->arch.vpit->pit_state.lock);\n\tprev_legacy = kvm->arch.vpit->pit_state.flags & KVM_PIT_FLAGS_HPET_LEGACY;\n\tcur_legacy = ps->flags & KVM_PIT_FLAGS_HPET_LEGACY;\n\tif (!prev_legacy && cur_legacy)\n\t\tstart = 1;\n\tmemcpy(&kvm->arch.vpit->pit_state.channels, &ps->channels,\n\t       sizeof(kvm->arch.vpit->pit_state.channels));\n\tkvm->arch.vpit->pit_state.flags = ps->flags;\n\tkvm_pit_load_count(kvm, 0, kvm->arch.vpit->pit_state.channels[0].count, start);\n\tmutex_unlock(&kvm->arch.vpit->pit_state.lock);\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_reinject(struct kvm *kvm,\n\t\t\t\t struct kvm_reinject_control *control)\n{\n\tif (!kvm->arch.vpit)\n\t\treturn -ENXIO;\n\tmutex_lock(&kvm->arch.vpit->pit_state.lock);\n\tkvm->arch.vpit->pit_state.pit_timer.reinject = control->pit_reinject;\n\tmutex_unlock(&kvm->arch.vpit->pit_state.lock);\n\treturn 0;\n}\n\n/*\n * Get (and clear) the dirty memory log for a memory slot.\n */\nint kvm_vm_ioctl_get_dirty_log(struct kvm *kvm,\n\t\t\t\t      struct kvm_dirty_log *log)\n{\n\tint r, i;\n\tstruct kvm_memory_slot *memslot;\n\tunsigned long n;\n\tunsigned long is_dirty = 0;\n\n\tmutex_lock(&kvm->slots_lock);\n\n\tr = -EINVAL;\n\tif (log->slot >= KVM_MEMORY_SLOTS)\n\t\tgoto out;\n\n\tmemslot = &kvm->memslots->memslots[log->slot];\n\tr = -ENOENT;\n\tif (!memslot->dirty_bitmap)\n\t\tgoto out;\n\n\tn = kvm_dirty_bitmap_bytes(memslot);\n\n\tfor (i = 0; !is_dirty && i < n/sizeof(long); i++)\n\t\tis_dirty = memslot->dirty_bitmap[i];\n\n\t/* If nothing is dirty, don't bother messing with page tables. */\n\tif (is_dirty) {\n\t\tstruct kvm_memslots *slots, *old_slots;\n\t\tunsigned long *dirty_bitmap;\n\n\t\tdirty_bitmap = memslot->dirty_bitmap_head;\n\t\tif (memslot->dirty_bitmap == dirty_bitmap)\n\t\t\tdirty_bitmap += n / sizeof(long);\n\t\tmemset(dirty_bitmap, 0, n);\n\n\t\tr = -ENOMEM;\n\t\tslots = kzalloc(sizeof(struct kvm_memslots), GFP_KERNEL);\n\t\tif (!slots)\n\t\t\tgoto out;\n\t\tmemcpy(slots, kvm->memslots, sizeof(struct kvm_memslots));\n\t\tslots->memslots[log->slot].dirty_bitmap = dirty_bitmap;\n\t\tslots->generation++;\n\n\t\told_slots = kvm->memslots;\n\t\trcu_assign_pointer(kvm->memslots, slots);\n\t\tsynchronize_srcu_expedited(&kvm->srcu);\n\t\tdirty_bitmap = old_slots->memslots[log->slot].dirty_bitmap;\n\t\tkfree(old_slots);\n\n\t\tspin_lock(&kvm->mmu_lock);\n\t\tkvm_mmu_slot_remove_write_access(kvm, log->slot);\n\t\tspin_unlock(&kvm->mmu_lock);\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(log->dirty_bitmap, dirty_bitmap, n))\n\t\t\tgoto out;\n\t} else {\n\t\tr = -EFAULT;\n\t\tif (clear_user(log->dirty_bitmap, n))\n\t\t\tgoto out;\n\t}\n\n\tr = 0;\nout:\n\tmutex_unlock(&kvm->slots_lock);\n\treturn r;\n}\n\nlong kvm_arch_vm_ioctl(struct file *filp,\n\t\t       unsigned int ioctl, unsigned long arg)\n{\n\tstruct kvm *kvm = filp->private_data;\n\tvoid __user *argp = (void __user *)arg;\n\tint r = -ENOTTY;\n\t/*\n\t * This union makes it completely explicit to gcc-3.x\n\t * that these two variables' stack usage should be\n\t * combined, not added together.\n\t */\n\tunion {\n\t\tstruct kvm_pit_state ps;\n\t\tstruct kvm_pit_state2 ps2;\n\t\tstruct kvm_pit_config pit_config;\n\t} u;\n\n\tswitch (ioctl) {\n\tcase KVM_SET_TSS_ADDR:\n\t\tr = kvm_vm_ioctl_set_tss_addr(kvm, arg);\n\t\tif (r < 0)\n\t\t\tgoto out;\n\t\tbreak;\n\tcase KVM_SET_IDENTITY_MAP_ADDR: {\n\t\tu64 ident_addr;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&ident_addr, argp, sizeof ident_addr))\n\t\t\tgoto out;\n\t\tr = kvm_vm_ioctl_set_identity_map_addr(kvm, ident_addr);\n\t\tif (r < 0)\n\t\t\tgoto out;\n\t\tbreak;\n\t}\n\tcase KVM_SET_NR_MMU_PAGES:\n\t\tr = kvm_vm_ioctl_set_nr_mmu_pages(kvm, arg);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tbreak;\n\tcase KVM_GET_NR_MMU_PAGES:\n\t\tr = kvm_vm_ioctl_get_nr_mmu_pages(kvm);\n\t\tbreak;\n\tcase KVM_CREATE_IRQCHIP: {\n\t\tstruct kvm_pic *vpic;\n\n\t\tmutex_lock(&kvm->lock);\n\t\tr = -EEXIST;\n\t\tif (kvm->arch.vpic)\n\t\t\tgoto create_irqchip_unlock;\n\t\tr = -ENOMEM;\n\t\tvpic = kvm_create_pic(kvm);\n\t\tif (vpic) {\n\t\t\tr = kvm_ioapic_init(kvm);\n\t\t\tif (r) {\n\t\t\t\tkvm_io_bus_unregister_dev(kvm, KVM_PIO_BUS,\n\t\t\t\t\t\t\t  &vpic->dev);\n\t\t\t\tkfree(vpic);\n\t\t\t\tgoto create_irqchip_unlock;\n\t\t\t}\n\t\t} else\n\t\t\tgoto create_irqchip_unlock;\n\t\tsmp_wmb();\n\t\tkvm->arch.vpic = vpic;\n\t\tsmp_wmb();\n\t\tr = kvm_setup_default_irq_routing(kvm);\n\t\tif (r) {\n\t\t\tmutex_lock(&kvm->irq_lock);\n\t\t\tkvm_ioapic_destroy(kvm);\n\t\t\tkvm_destroy_pic(kvm);\n\t\t\tmutex_unlock(&kvm->irq_lock);\n\t\t}\n\tcreate_irqchip_unlock:\n\t\tmutex_unlock(&kvm->lock);\n\t\tbreak;\n\t}\n\tcase KVM_CREATE_PIT:\n\t\tu.pit_config.flags = KVM_PIT_SPEAKER_DUMMY;\n\t\tgoto create_pit;\n\tcase KVM_CREATE_PIT2:\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&u.pit_config, argp,\n\t\t\t\t   sizeof(struct kvm_pit_config)))\n\t\t\tgoto out;\n\tcreate_pit:\n\t\tmutex_lock(&kvm->slots_lock);\n\t\tr = -EEXIST;\n\t\tif (kvm->arch.vpit)\n\t\t\tgoto create_pit_unlock;\n\t\tr = -ENOMEM;\n\t\tkvm->arch.vpit = kvm_create_pit(kvm, u.pit_config.flags);\n\t\tif (kvm->arch.vpit)\n\t\t\tr = 0;\n\tcreate_pit_unlock:\n\t\tmutex_unlock(&kvm->slots_lock);\n\t\tbreak;\n\tcase KVM_IRQ_LINE_STATUS:\n\tcase KVM_IRQ_LINE: {\n\t\tstruct kvm_irq_level irq_event;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&irq_event, argp, sizeof irq_event))\n\t\t\tgoto out;\n\t\tr = -ENXIO;\n\t\tif (irqchip_in_kernel(kvm)) {\n\t\t\t__s32 status;\n\t\t\tstatus = kvm_set_irq(kvm, KVM_USERSPACE_IRQ_SOURCE_ID,\n\t\t\t\t\tirq_event.irq, irq_event.level);\n\t\t\tif (ioctl == KVM_IRQ_LINE_STATUS) {\n\t\t\t\tr = -EFAULT;\n\t\t\t\tirq_event.status = status;\n\t\t\t\tif (copy_to_user(argp, &irq_event,\n\t\t\t\t\t\t\tsizeof irq_event))\n\t\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tr = 0;\n\t\t}\n\t\tbreak;\n\t}\n\tcase KVM_GET_IRQCHIP: {\n\t\t/* 0: PIC master, 1: PIC slave, 2: IOAPIC */\n\t\tstruct kvm_irqchip *chip = kmalloc(sizeof(*chip), GFP_KERNEL);\n\n\t\tr = -ENOMEM;\n\t\tif (!chip)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(chip, argp, sizeof *chip))\n\t\t\tgoto get_irqchip_out;\n\t\tr = -ENXIO;\n\t\tif (!irqchip_in_kernel(kvm))\n\t\t\tgoto get_irqchip_out;\n\t\tr = kvm_vm_ioctl_get_irqchip(kvm, chip);\n\t\tif (r)\n\t\t\tgoto get_irqchip_out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, chip, sizeof *chip))\n\t\t\tgoto get_irqchip_out;\n\t\tr = 0;\n\tget_irqchip_out:\n\t\tkfree(chip);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tbreak;\n\t}\n\tcase KVM_SET_IRQCHIP: {\n\t\t/* 0: PIC master, 1: PIC slave, 2: IOAPIC */\n\t\tstruct kvm_irqchip *chip = kmalloc(sizeof(*chip), GFP_KERNEL);\n\n\t\tr = -ENOMEM;\n\t\tif (!chip)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(chip, argp, sizeof *chip))\n\t\t\tgoto set_irqchip_out;\n\t\tr = -ENXIO;\n\t\tif (!irqchip_in_kernel(kvm))\n\t\t\tgoto set_irqchip_out;\n\t\tr = kvm_vm_ioctl_set_irqchip(kvm, chip);\n\t\tif (r)\n\t\t\tgoto set_irqchip_out;\n\t\tr = 0;\n\tset_irqchip_out:\n\t\tkfree(chip);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tbreak;\n\t}\n\tcase KVM_GET_PIT: {\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&u.ps, argp, sizeof(struct kvm_pit_state)))\n\t\t\tgoto out;\n\t\tr = -ENXIO;\n\t\tif (!kvm->arch.vpit)\n\t\t\tgoto out;\n\t\tr = kvm_vm_ioctl_get_pit(kvm, &u.ps);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &u.ps, sizeof(struct kvm_pit_state)))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_PIT: {\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&u.ps, argp, sizeof u.ps))\n\t\t\tgoto out;\n\t\tr = -ENXIO;\n\t\tif (!kvm->arch.vpit)\n\t\t\tgoto out;\n\t\tr = kvm_vm_ioctl_set_pit(kvm, &u.ps);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_GET_PIT2: {\n\t\tr = -ENXIO;\n\t\tif (!kvm->arch.vpit)\n\t\t\tgoto out;\n\t\tr = kvm_vm_ioctl_get_pit2(kvm, &u.ps2);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &u.ps2, sizeof(u.ps2)))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_PIT2: {\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&u.ps2, argp, sizeof(u.ps2)))\n\t\t\tgoto out;\n\t\tr = -ENXIO;\n\t\tif (!kvm->arch.vpit)\n\t\t\tgoto out;\n\t\tr = kvm_vm_ioctl_set_pit2(kvm, &u.ps2);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_REINJECT_CONTROL: {\n\t\tstruct kvm_reinject_control control;\n\t\tr =  -EFAULT;\n\t\tif (copy_from_user(&control, argp, sizeof(control)))\n\t\t\tgoto out;\n\t\tr = kvm_vm_ioctl_reinject(kvm, &control);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_XEN_HVM_CONFIG: {\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&kvm->arch.xen_hvm_config, argp,\n\t\t\t\t   sizeof(struct kvm_xen_hvm_config)))\n\t\t\tgoto out;\n\t\tr = -EINVAL;\n\t\tif (kvm->arch.xen_hvm_config.flags)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_CLOCK: {\n\t\tstruct kvm_clock_data user_ns;\n\t\tu64 now_ns;\n\t\ts64 delta;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&user_ns, argp, sizeof(user_ns)))\n\t\t\tgoto out;\n\n\t\tr = -EINVAL;\n\t\tif (user_ns.flags)\n\t\t\tgoto out;\n\n\t\tr = 0;\n\t\tlocal_irq_disable();\n\t\tnow_ns = get_kernel_ns();\n\t\tdelta = user_ns.clock - now_ns;\n\t\tlocal_irq_enable();\n\t\tkvm->arch.kvmclock_offset = delta;\n\t\tbreak;\n\t}\n\tcase KVM_GET_CLOCK: {\n\t\tstruct kvm_clock_data user_ns;\n\t\tu64 now_ns;\n\n\t\tlocal_irq_disable();\n\t\tnow_ns = get_kernel_ns();\n\t\tuser_ns.clock = kvm->arch.kvmclock_offset + now_ns;\n\t\tlocal_irq_enable();\n\t\tuser_ns.flags = 0;\n\t\tmemset(&user_ns.pad, 0, sizeof(user_ns.pad));\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &user_ns, sizeof(user_ns)))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\n\tdefault:\n\t\t;\n\t}\nout:\n\treturn r;\n}\n\nstatic void kvm_init_msr_list(void)\n{\n\tu32 dummy[2];\n\tunsigned i, j;\n\n\t/* skip the first msrs in the list. KVM-specific */\n\tfor (i = j = KVM_SAVE_MSRS_BEGIN; i < ARRAY_SIZE(msrs_to_save); i++) {\n\t\tif (rdmsr_safe(msrs_to_save[i], &dummy[0], &dummy[1]) < 0)\n\t\t\tcontinue;\n\t\tif (j < i)\n\t\t\tmsrs_to_save[j] = msrs_to_save[i];\n\t\tj++;\n\t}\n\tnum_msrs_to_save = j;\n}\n\nstatic int vcpu_mmio_write(struct kvm_vcpu *vcpu, gpa_t addr, int len,\n\t\t\t   const void *v)\n{\n\tif (vcpu->arch.apic &&\n\t    !kvm_iodevice_write(&vcpu->arch.apic->dev, addr, len, v))\n\t\treturn 0;\n\n\treturn kvm_io_bus_write(vcpu->kvm, KVM_MMIO_BUS, addr, len, v);\n}\n\nstatic int vcpu_mmio_read(struct kvm_vcpu *vcpu, gpa_t addr, int len, void *v)\n{\n\tif (vcpu->arch.apic &&\n\t    !kvm_iodevice_read(&vcpu->arch.apic->dev, addr, len, v))\n\t\treturn 0;\n\n\treturn kvm_io_bus_read(vcpu->kvm, KVM_MMIO_BUS, addr, len, v);\n}\n\nstatic void kvm_set_segment(struct kvm_vcpu *vcpu,\n\t\t\tstruct kvm_segment *var, int seg)\n{\n\tkvm_x86_ops->set_segment(vcpu, var, seg);\n}\n\nvoid kvm_get_segment(struct kvm_vcpu *vcpu,\n\t\t     struct kvm_segment *var, int seg)\n{\n\tkvm_x86_ops->get_segment(vcpu, var, seg);\n}\n\nstatic gpa_t translate_gpa(struct kvm_vcpu *vcpu, gpa_t gpa, u32 access)\n{\n\treturn gpa;\n}\n\nstatic gpa_t translate_nested_gpa(struct kvm_vcpu *vcpu, gpa_t gpa, u32 access)\n{\n\tgpa_t t_gpa;\n\tstruct x86_exception exception;\n\n\tBUG_ON(!mmu_is_nested(vcpu));\n\n\t/* NPT walks are always user-walks */\n\taccess |= PFERR_USER_MASK;\n\tt_gpa  = vcpu->arch.mmu.gva_to_gpa(vcpu, gpa, access, &exception);\n\n\treturn t_gpa;\n}\n\ngpa_t kvm_mmu_gva_to_gpa_read(struct kvm_vcpu *vcpu, gva_t gva,\n\t\t\t      struct x86_exception *exception)\n{\n\tu32 access = (kvm_x86_ops->get_cpl(vcpu) == 3) ? PFERR_USER_MASK : 0;\n\treturn vcpu->arch.walk_mmu->gva_to_gpa(vcpu, gva, access, exception);\n}\n\n gpa_t kvm_mmu_gva_to_gpa_fetch(struct kvm_vcpu *vcpu, gva_t gva,\n\t\t\t\tstruct x86_exception *exception)\n{\n\tu32 access = (kvm_x86_ops->get_cpl(vcpu) == 3) ? PFERR_USER_MASK : 0;\n\taccess |= PFERR_FETCH_MASK;\n\treturn vcpu->arch.walk_mmu->gva_to_gpa(vcpu, gva, access, exception);\n}\n\ngpa_t kvm_mmu_gva_to_gpa_write(struct kvm_vcpu *vcpu, gva_t gva,\n\t\t\t       struct x86_exception *exception)\n{\n\tu32 access = (kvm_x86_ops->get_cpl(vcpu) == 3) ? PFERR_USER_MASK : 0;\n\taccess |= PFERR_WRITE_MASK;\n\treturn vcpu->arch.walk_mmu->gva_to_gpa(vcpu, gva, access, exception);\n}\n\n/* uses this to access any guest's mapped memory without checking CPL */\ngpa_t kvm_mmu_gva_to_gpa_system(struct kvm_vcpu *vcpu, gva_t gva,\n\t\t\t\tstruct x86_exception *exception)\n{\n\treturn vcpu->arch.walk_mmu->gva_to_gpa(vcpu, gva, 0, exception);\n}\n\nstatic int kvm_read_guest_virt_helper(gva_t addr, void *val, unsigned int bytes,\n\t\t\t\t      struct kvm_vcpu *vcpu, u32 access,\n\t\t\t\t      struct x86_exception *exception)\n{\n\tvoid *data = val;\n\tint r = X86EMUL_CONTINUE;\n\n\twhile (bytes) {\n\t\tgpa_t gpa = vcpu->arch.walk_mmu->gva_to_gpa(vcpu, addr, access,\n\t\t\t\t\t\t\t    exception);\n\t\tunsigned offset = addr & (PAGE_SIZE-1);\n\t\tunsigned toread = min(bytes, (unsigned)PAGE_SIZE - offset);\n\t\tint ret;\n\n\t\tif (gpa == UNMAPPED_GVA)\n\t\t\treturn X86EMUL_PROPAGATE_FAULT;\n\t\tret = kvm_read_guest(vcpu->kvm, gpa, data, toread);\n\t\tif (ret < 0) {\n\t\t\tr = X86EMUL_IO_NEEDED;\n\t\t\tgoto out;\n\t\t}\n\n\t\tbytes -= toread;\n\t\tdata += toread;\n\t\taddr += toread;\n\t}\nout:\n\treturn r;\n}\n\n/* used for instruction fetching */\nstatic int kvm_fetch_guest_virt(gva_t addr, void *val, unsigned int bytes,\n\t\t\t\tstruct kvm_vcpu *vcpu,\n\t\t\t\tstruct x86_exception *exception)\n{\n\tu32 access = (kvm_x86_ops->get_cpl(vcpu) == 3) ? PFERR_USER_MASK : 0;\n\treturn kvm_read_guest_virt_helper(addr, val, bytes, vcpu,\n\t\t\t\t\t  access | PFERR_FETCH_MASK,\n\t\t\t\t\t  exception);\n}\n\nstatic int kvm_read_guest_virt(gva_t addr, void *val, unsigned int bytes,\n\t\t\t       struct kvm_vcpu *vcpu,\n\t\t\t       struct x86_exception *exception)\n{\n\tu32 access = (kvm_x86_ops->get_cpl(vcpu) == 3) ? PFERR_USER_MASK : 0;\n\treturn kvm_read_guest_virt_helper(addr, val, bytes, vcpu, access,\n\t\t\t\t\t  exception);\n}\n\nstatic int kvm_read_guest_virt_system(gva_t addr, void *val, unsigned int bytes,\n\t\t\t\t      struct kvm_vcpu *vcpu,\n\t\t\t\t      struct x86_exception *exception)\n{\n\treturn kvm_read_guest_virt_helper(addr, val, bytes, vcpu, 0, exception);\n}\n\nstatic int kvm_write_guest_virt_system(gva_t addr, void *val,\n\t\t\t\t       unsigned int bytes,\n\t\t\t\t       struct kvm_vcpu *vcpu,\n\t\t\t\t       struct x86_exception *exception)\n{\n\tvoid *data = val;\n\tint r = X86EMUL_CONTINUE;\n\n\twhile (bytes) {\n\t\tgpa_t gpa =  vcpu->arch.walk_mmu->gva_to_gpa(vcpu, addr,\n\t\t\t\t\t\t\t     PFERR_WRITE_MASK,\n\t\t\t\t\t\t\t     exception);\n\t\tunsigned offset = addr & (PAGE_SIZE-1);\n\t\tunsigned towrite = min(bytes, (unsigned)PAGE_SIZE - offset);\n\t\tint ret;\n\n\t\tif (gpa == UNMAPPED_GVA)\n\t\t\treturn X86EMUL_PROPAGATE_FAULT;\n\t\tret = kvm_write_guest(vcpu->kvm, gpa, data, towrite);\n\t\tif (ret < 0) {\n\t\t\tr = X86EMUL_IO_NEEDED;\n\t\t\tgoto out;\n\t\t}\n\n\t\tbytes -= towrite;\n\t\tdata += towrite;\n\t\taddr += towrite;\n\t}\nout:\n\treturn r;\n}\n\nstatic int emulator_read_emulated(unsigned long addr,\n\t\t\t\t  void *val,\n\t\t\t\t  unsigned int bytes,\n\t\t\t\t  struct x86_exception *exception,\n\t\t\t\t  struct kvm_vcpu *vcpu)\n{\n\tgpa_t                 gpa;\n\n\tif (vcpu->mmio_read_completed) {\n\t\tmemcpy(val, vcpu->mmio_data, bytes);\n\t\ttrace_kvm_mmio(KVM_TRACE_MMIO_READ, bytes,\n\t\t\t       vcpu->mmio_phys_addr, *(u64 *)val);\n\t\tvcpu->mmio_read_completed = 0;\n\t\treturn X86EMUL_CONTINUE;\n\t}\n\n\tgpa = kvm_mmu_gva_to_gpa_read(vcpu, addr, exception);\n\n\tif (gpa == UNMAPPED_GVA)\n\t\treturn X86EMUL_PROPAGATE_FAULT;\n\n\t/* For APIC access vmexit */\n\tif ((gpa & PAGE_MASK) == APIC_DEFAULT_PHYS_BASE)\n\t\tgoto mmio;\n\n\tif (kvm_read_guest_virt(addr, val, bytes, vcpu, exception)\n\t    == X86EMUL_CONTINUE)\n\t\treturn X86EMUL_CONTINUE;\n\nmmio:\n\t/*\n\t * Is this MMIO handled locally?\n\t */\n\tif (!vcpu_mmio_read(vcpu, gpa, bytes, val)) {\n\t\ttrace_kvm_mmio(KVM_TRACE_MMIO_READ, bytes, gpa, *(u64 *)val);\n\t\treturn X86EMUL_CONTINUE;\n\t}\n\n\ttrace_kvm_mmio(KVM_TRACE_MMIO_READ_UNSATISFIED, bytes, gpa, 0);\n\n\tvcpu->mmio_needed = 1;\n\tvcpu->run->exit_reason = KVM_EXIT_MMIO;\n\tvcpu->run->mmio.phys_addr = vcpu->mmio_phys_addr = gpa;\n\tvcpu->run->mmio.len = vcpu->mmio_size = bytes;\n\tvcpu->run->mmio.is_write = vcpu->mmio_is_write = 0;\n\n\treturn X86EMUL_IO_NEEDED;\n}\n\nint emulator_write_phys(struct kvm_vcpu *vcpu, gpa_t gpa,\n\t\t\tconst void *val, int bytes)\n{\n\tint ret;\n\n\tret = kvm_write_guest(vcpu->kvm, gpa, val, bytes);\n\tif (ret < 0)\n\t\treturn 0;\n\tkvm_mmu_pte_write(vcpu, gpa, val, bytes, 1);\n\treturn 1;\n}\n\nstatic int emulator_write_emulated_onepage(unsigned long addr,\n\t\t\t\t\t   const void *val,\n\t\t\t\t\t   unsigned int bytes,\n\t\t\t\t\t   struct x86_exception *exception,\n\t\t\t\t\t   struct kvm_vcpu *vcpu)\n{\n\tgpa_t                 gpa;\n\n\tgpa = kvm_mmu_gva_to_gpa_write(vcpu, addr, exception);\n\n\tif (gpa == UNMAPPED_GVA)\n\t\treturn X86EMUL_PROPAGATE_FAULT;\n\n\t/* For APIC access vmexit */\n\tif ((gpa & PAGE_MASK) == APIC_DEFAULT_PHYS_BASE)\n\t\tgoto mmio;\n\n\tif (emulator_write_phys(vcpu, gpa, val, bytes))\n\t\treturn X86EMUL_CONTINUE;\n\nmmio:\n\ttrace_kvm_mmio(KVM_TRACE_MMIO_WRITE, bytes, gpa, *(u64 *)val);\n\t/*\n\t * Is this MMIO handled locally?\n\t */\n\tif (!vcpu_mmio_write(vcpu, gpa, bytes, val))\n\t\treturn X86EMUL_CONTINUE;\n\n\tvcpu->mmio_needed = 1;\n\tvcpu->run->exit_reason = KVM_EXIT_MMIO;\n\tvcpu->run->mmio.phys_addr = vcpu->mmio_phys_addr = gpa;\n\tvcpu->run->mmio.len = vcpu->mmio_size = bytes;\n\tvcpu->run->mmio.is_write = vcpu->mmio_is_write = 1;\n\tmemcpy(vcpu->run->mmio.data, val, bytes);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nint emulator_write_emulated(unsigned long addr,\n\t\t\t    const void *val,\n\t\t\t    unsigned int bytes,\n\t\t\t    struct x86_exception *exception,\n\t\t\t    struct kvm_vcpu *vcpu)\n{\n\t/* Crossing a page boundary? */\n\tif (((addr + bytes - 1) ^ addr) & PAGE_MASK) {\n\t\tint rc, now;\n\n\t\tnow = -addr & ~PAGE_MASK;\n\t\trc = emulator_write_emulated_onepage(addr, val, now, exception,\n\t\t\t\t\t\t     vcpu);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\treturn rc;\n\t\taddr += now;\n\t\tval += now;\n\t\tbytes -= now;\n\t}\n\treturn emulator_write_emulated_onepage(addr, val, bytes, exception,\n\t\t\t\t\t       vcpu);\n}\n\n#define CMPXCHG_TYPE(t, ptr, old, new) \\\n\t(cmpxchg((t *)(ptr), *(t *)(old), *(t *)(new)) == *(t *)(old))\n\n#ifdef CONFIG_X86_64\n#  define CMPXCHG64(ptr, old, new) CMPXCHG_TYPE(u64, ptr, old, new)\n#else\n#  define CMPXCHG64(ptr, old, new) \\\n\t(cmpxchg64((u64 *)(ptr), *(u64 *)(old), *(u64 *)(new)) == *(u64 *)(old))\n#endif\n\nstatic int emulator_cmpxchg_emulated(unsigned long addr,\n\t\t\t\t     const void *old,\n\t\t\t\t     const void *new,\n\t\t\t\t     unsigned int bytes,\n\t\t\t\t     struct x86_exception *exception,\n\t\t\t\t     struct kvm_vcpu *vcpu)\n{\n\tgpa_t gpa;\n\tstruct page *page;\n\tchar *kaddr;\n\tbool exchanged;\n\n\t/* guests cmpxchg8b have to be emulated atomically */\n\tif (bytes > 8 || (bytes & (bytes - 1)))\n\t\tgoto emul_write;\n\n\tgpa = kvm_mmu_gva_to_gpa_write(vcpu, addr, NULL);\n\n\tif (gpa == UNMAPPED_GVA ||\n\t    (gpa & PAGE_MASK) == APIC_DEFAULT_PHYS_BASE)\n\t\tgoto emul_write;\n\n\tif (((gpa + bytes - 1) & PAGE_MASK) != (gpa & PAGE_MASK))\n\t\tgoto emul_write;\n\n\tpage = gfn_to_page(vcpu->kvm, gpa >> PAGE_SHIFT);\n\tif (is_error_page(page)) {\n\t\tkvm_release_page_clean(page);\n\t\tgoto emul_write;\n\t}\n\n\tkaddr = kmap_atomic(page, KM_USER0);\n\tkaddr += offset_in_page(gpa);\n\tswitch (bytes) {\n\tcase 1:\n\t\texchanged = CMPXCHG_TYPE(u8, kaddr, old, new);\n\t\tbreak;\n\tcase 2:\n\t\texchanged = CMPXCHG_TYPE(u16, kaddr, old, new);\n\t\tbreak;\n\tcase 4:\n\t\texchanged = CMPXCHG_TYPE(u32, kaddr, old, new);\n\t\tbreak;\n\tcase 8:\n\t\texchanged = CMPXCHG64(kaddr, old, new);\n\t\tbreak;\n\tdefault:\n\t\tBUG();\n\t}\n\tkunmap_atomic(kaddr, KM_USER0);\n\tkvm_release_page_dirty(page);\n\n\tif (!exchanged)\n\t\treturn X86EMUL_CMPXCHG_FAILED;\n\n\tkvm_mmu_pte_write(vcpu, gpa, new, bytes, 1);\n\n\treturn X86EMUL_CONTINUE;\n\nemul_write:\n\tprintk_once(KERN_WARNING \"kvm: emulating exchange as write\\n\");\n\n\treturn emulator_write_emulated(addr, new, bytes, exception, vcpu);\n}\n\nstatic int kernel_pio(struct kvm_vcpu *vcpu, void *pd)\n{\n\t/* TODO: String I/O for in kernel device */\n\tint r;\n\n\tif (vcpu->arch.pio.in)\n\t\tr = kvm_io_bus_read(vcpu->kvm, KVM_PIO_BUS, vcpu->arch.pio.port,\n\t\t\t\t    vcpu->arch.pio.size, pd);\n\telse\n\t\tr = kvm_io_bus_write(vcpu->kvm, KVM_PIO_BUS,\n\t\t\t\t     vcpu->arch.pio.port, vcpu->arch.pio.size,\n\t\t\t\t     pd);\n\treturn r;\n}\n\n\nstatic int emulator_pio_in_emulated(int size, unsigned short port, void *val,\n\t\t\t     unsigned int count, struct kvm_vcpu *vcpu)\n{\n\tif (vcpu->arch.pio.count)\n\t\tgoto data_avail;\n\n\ttrace_kvm_pio(0, port, size, 1);\n\n\tvcpu->arch.pio.port = port;\n\tvcpu->arch.pio.in = 1;\n\tvcpu->arch.pio.count  = count;\n\tvcpu->arch.pio.size = size;\n\n\tif (!kernel_pio(vcpu, vcpu->arch.pio_data)) {\n\tdata_avail:\n\t\tmemcpy(val, vcpu->arch.pio_data, size * count);\n\t\tvcpu->arch.pio.count = 0;\n\t\treturn 1;\n\t}\n\n\tvcpu->run->exit_reason = KVM_EXIT_IO;\n\tvcpu->run->io.direction = KVM_EXIT_IO_IN;\n\tvcpu->run->io.size = size;\n\tvcpu->run->io.data_offset = KVM_PIO_PAGE_OFFSET * PAGE_SIZE;\n\tvcpu->run->io.count = count;\n\tvcpu->run->io.port = port;\n\n\treturn 0;\n}\n\nstatic int emulator_pio_out_emulated(int size, unsigned short port,\n\t\t\t      const void *val, unsigned int count,\n\t\t\t      struct kvm_vcpu *vcpu)\n{\n\ttrace_kvm_pio(1, port, size, 1);\n\n\tvcpu->arch.pio.port = port;\n\tvcpu->arch.pio.in = 0;\n\tvcpu->arch.pio.count = count;\n\tvcpu->arch.pio.size = size;\n\n\tmemcpy(vcpu->arch.pio_data, val, size * count);\n\n\tif (!kernel_pio(vcpu, vcpu->arch.pio_data)) {\n\t\tvcpu->arch.pio.count = 0;\n\t\treturn 1;\n\t}\n\n\tvcpu->run->exit_reason = KVM_EXIT_IO;\n\tvcpu->run->io.direction = KVM_EXIT_IO_OUT;\n\tvcpu->run->io.size = size;\n\tvcpu->run->io.data_offset = KVM_PIO_PAGE_OFFSET * PAGE_SIZE;\n\tvcpu->run->io.count = count;\n\tvcpu->run->io.port = port;\n\n\treturn 0;\n}\n\nstatic unsigned long get_segment_base(struct kvm_vcpu *vcpu, int seg)\n{\n\treturn kvm_x86_ops->get_segment_base(vcpu, seg);\n}\n\nint emulate_invlpg(struct kvm_vcpu *vcpu, gva_t address)\n{\n\tkvm_mmu_invlpg(vcpu, address);\n\treturn X86EMUL_CONTINUE;\n}\n\nint kvm_emulate_wbinvd(struct kvm_vcpu *vcpu)\n{\n\tif (!need_emulate_wbinvd(vcpu))\n\t\treturn X86EMUL_CONTINUE;\n\n\tif (kvm_x86_ops->has_wbinvd_exit()) {\n\t\tint cpu = get_cpu();\n\n\t\tcpumask_set_cpu(cpu, vcpu->arch.wbinvd_dirty_mask);\n\t\tsmp_call_function_many(vcpu->arch.wbinvd_dirty_mask,\n\t\t\t\twbinvd_ipi, NULL, 1);\n\t\tput_cpu();\n\t\tcpumask_clear(vcpu->arch.wbinvd_dirty_mask);\n\t} else\n\t\twbinvd();\n\treturn X86EMUL_CONTINUE;\n}\nEXPORT_SYMBOL_GPL(kvm_emulate_wbinvd);\n\nint emulate_clts(struct kvm_vcpu *vcpu)\n{\n\tkvm_x86_ops->set_cr0(vcpu, kvm_read_cr0_bits(vcpu, ~X86_CR0_TS));\n\tkvm_x86_ops->fpu_activate(vcpu);\n\treturn X86EMUL_CONTINUE;\n}\n\nint emulator_get_dr(int dr, unsigned long *dest, struct kvm_vcpu *vcpu)\n{\n\treturn _kvm_get_dr(vcpu, dr, dest);\n}\n\nint emulator_set_dr(int dr, unsigned long value, struct kvm_vcpu *vcpu)\n{\n\n\treturn __kvm_set_dr(vcpu, dr, value);\n}\n\nstatic u64 mk_cr_64(u64 curr_cr, u32 new_val)\n{\n\treturn (curr_cr & ~((1ULL << 32) - 1)) | new_val;\n}\n\nstatic unsigned long emulator_get_cr(int cr, struct kvm_vcpu *vcpu)\n{\n\tunsigned long value;\n\n\tswitch (cr) {\n\tcase 0:\n\t\tvalue = kvm_read_cr0(vcpu);\n\t\tbreak;\n\tcase 2:\n\t\tvalue = vcpu->arch.cr2;\n\t\tbreak;\n\tcase 3:\n\t\tvalue = vcpu->arch.cr3;\n\t\tbreak;\n\tcase 4:\n\t\tvalue = kvm_read_cr4(vcpu);\n\t\tbreak;\n\tcase 8:\n\t\tvalue = kvm_get_cr8(vcpu);\n\t\tbreak;\n\tdefault:\n\t\tvcpu_printf(vcpu, \"%s: unexpected cr %u\\n\", __func__, cr);\n\t\treturn 0;\n\t}\n\n\treturn value;\n}\n\nstatic int emulator_set_cr(int cr, unsigned long val, struct kvm_vcpu *vcpu)\n{\n\tint res = 0;\n\n\tswitch (cr) {\n\tcase 0:\n\t\tres = kvm_set_cr0(vcpu, mk_cr_64(kvm_read_cr0(vcpu), val));\n\t\tbreak;\n\tcase 2:\n\t\tvcpu->arch.cr2 = val;\n\t\tbreak;\n\tcase 3:\n\t\tres = kvm_set_cr3(vcpu, val);\n\t\tbreak;\n\tcase 4:\n\t\tres = kvm_set_cr4(vcpu, mk_cr_64(kvm_read_cr4(vcpu), val));\n\t\tbreak;\n\tcase 8:\n\t\tres = __kvm_set_cr8(vcpu, val & 0xfUL);\n\t\tbreak;\n\tdefault:\n\t\tvcpu_printf(vcpu, \"%s: unexpected cr %u\\n\", __func__, cr);\n\t\tres = -1;\n\t}\n\n\treturn res;\n}\n\nstatic int emulator_get_cpl(struct kvm_vcpu *vcpu)\n{\n\treturn kvm_x86_ops->get_cpl(vcpu);\n}\n\nstatic void emulator_get_gdt(struct desc_ptr *dt, struct kvm_vcpu *vcpu)\n{\n\tkvm_x86_ops->get_gdt(vcpu, dt);\n}\n\nstatic void emulator_get_idt(struct desc_ptr *dt, struct kvm_vcpu *vcpu)\n{\n\tkvm_x86_ops->get_idt(vcpu, dt);\n}\n\nstatic unsigned long emulator_get_cached_segment_base(int seg,\n\t\t\t\t\t\t      struct kvm_vcpu *vcpu)\n{\n\treturn get_segment_base(vcpu, seg);\n}\n\nstatic bool emulator_get_cached_descriptor(struct desc_struct *desc, int seg,\n\t\t\t\t\t   struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_segment var;\n\n\tkvm_get_segment(vcpu, &var, seg);\n\n\tif (var.unusable)\n\t\treturn false;\n\n\tif (var.g)\n\t\tvar.limit >>= 12;\n\tset_desc_limit(desc, var.limit);\n\tset_desc_base(desc, (unsigned long)var.base);\n\tdesc->type = var.type;\n\tdesc->s = var.s;\n\tdesc->dpl = var.dpl;\n\tdesc->p = var.present;\n\tdesc->avl = var.avl;\n\tdesc->l = var.l;\n\tdesc->d = var.db;\n\tdesc->g = var.g;\n\n\treturn true;\n}\n\nstatic void emulator_set_cached_descriptor(struct desc_struct *desc, int seg,\n\t\t\t\t\t   struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_segment var;\n\n\t/* needed to preserve selector */\n\tkvm_get_segment(vcpu, &var, seg);\n\n\tvar.base = get_desc_base(desc);\n\tvar.limit = get_desc_limit(desc);\n\tif (desc->g)\n\t\tvar.limit = (var.limit << 12) | 0xfff;\n\tvar.type = desc->type;\n\tvar.present = desc->p;\n\tvar.dpl = desc->dpl;\n\tvar.db = desc->d;\n\tvar.s = desc->s;\n\tvar.l = desc->l;\n\tvar.g = desc->g;\n\tvar.avl = desc->avl;\n\tvar.present = desc->p;\n\tvar.unusable = !var.present;\n\tvar.padding = 0;\n\n\tkvm_set_segment(vcpu, &var, seg);\n\treturn;\n}\n\nstatic u16 emulator_get_segment_selector(int seg, struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_segment kvm_seg;\n\n\tkvm_get_segment(vcpu, &kvm_seg, seg);\n\treturn kvm_seg.selector;\n}\n\nstatic void emulator_set_segment_selector(u16 sel, int seg,\n\t\t\t\t\t  struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_segment kvm_seg;\n\n\tkvm_get_segment(vcpu, &kvm_seg, seg);\n\tkvm_seg.selector = sel;\n\tkvm_set_segment(vcpu, &kvm_seg, seg);\n}\n\nstatic struct x86_emulate_ops emulate_ops = {\n\t.read_std            = kvm_read_guest_virt_system,\n\t.write_std           = kvm_write_guest_virt_system,\n\t.fetch               = kvm_fetch_guest_virt,\n\t.read_emulated       = emulator_read_emulated,\n\t.write_emulated      = emulator_write_emulated,\n\t.cmpxchg_emulated    = emulator_cmpxchg_emulated,\n\t.pio_in_emulated     = emulator_pio_in_emulated,\n\t.pio_out_emulated    = emulator_pio_out_emulated,\n\t.get_cached_descriptor = emulator_get_cached_descriptor,\n\t.set_cached_descriptor = emulator_set_cached_descriptor,\n\t.get_segment_selector = emulator_get_segment_selector,\n\t.set_segment_selector = emulator_set_segment_selector,\n\t.get_cached_segment_base = emulator_get_cached_segment_base,\n\t.get_gdt             = emulator_get_gdt,\n\t.get_idt\t     = emulator_get_idt,\n\t.get_cr              = emulator_get_cr,\n\t.set_cr              = emulator_set_cr,\n\t.cpl                 = emulator_get_cpl,\n\t.get_dr              = emulator_get_dr,\n\t.set_dr              = emulator_set_dr,\n\t.set_msr             = kvm_set_msr,\n\t.get_msr             = kvm_get_msr,\n};\n\nstatic void cache_all_regs(struct kvm_vcpu *vcpu)\n{\n\tkvm_register_read(vcpu, VCPU_REGS_RAX);\n\tkvm_register_read(vcpu, VCPU_REGS_RSP);\n\tkvm_register_read(vcpu, VCPU_REGS_RIP);\n\tvcpu->arch.regs_dirty = ~0;\n}\n\nstatic void toggle_interruptibility(struct kvm_vcpu *vcpu, u32 mask)\n{\n\tu32 int_shadow = kvm_x86_ops->get_interrupt_shadow(vcpu, mask);\n\t/*\n\t * an sti; sti; sequence only disable interrupts for the first\n\t * instruction. So, if the last instruction, be it emulated or\n\t * not, left the system with the INT_STI flag enabled, it\n\t * means that the last instruction is an sti. We should not\n\t * leave the flag on in this case. The same goes for mov ss\n\t */\n\tif (!(int_shadow & mask))\n\t\tkvm_x86_ops->set_interrupt_shadow(vcpu, mask);\n}\n\nstatic void inject_emulated_exception(struct kvm_vcpu *vcpu)\n{\n\tstruct x86_emulate_ctxt *ctxt = &vcpu->arch.emulate_ctxt;\n\tif (ctxt->exception.vector == PF_VECTOR)\n\t\tkvm_propagate_fault(vcpu, &ctxt->exception);\n\telse if (ctxt->exception.error_code_valid)\n\t\tkvm_queue_exception_e(vcpu, ctxt->exception.vector,\n\t\t\t\t      ctxt->exception.error_code);\n\telse\n\t\tkvm_queue_exception(vcpu, ctxt->exception.vector);\n}\n\nstatic void init_emulate_ctxt(struct kvm_vcpu *vcpu)\n{\n\tstruct decode_cache *c = &vcpu->arch.emulate_ctxt.decode;\n\tint cs_db, cs_l;\n\n\tcache_all_regs(vcpu);\n\n\tkvm_x86_ops->get_cs_db_l_bits(vcpu, &cs_db, &cs_l);\n\n\tvcpu->arch.emulate_ctxt.vcpu = vcpu;\n\tvcpu->arch.emulate_ctxt.eflags = kvm_x86_ops->get_rflags(vcpu);\n\tvcpu->arch.emulate_ctxt.eip = kvm_rip_read(vcpu);\n\tvcpu->arch.emulate_ctxt.mode =\n\t\t(!is_protmode(vcpu)) ? X86EMUL_MODE_REAL :\n\t\t(vcpu->arch.emulate_ctxt.eflags & X86_EFLAGS_VM)\n\t\t? X86EMUL_MODE_VM86 : cs_l\n\t\t? X86EMUL_MODE_PROT64 :\tcs_db\n\t\t? X86EMUL_MODE_PROT32 : X86EMUL_MODE_PROT16;\n\tmemset(c, 0, sizeof(struct decode_cache));\n\tmemcpy(c->regs, vcpu->arch.regs, sizeof c->regs);\n}\n\nint kvm_inject_realmode_interrupt(struct kvm_vcpu *vcpu, int irq)\n{\n\tstruct decode_cache *c = &vcpu->arch.emulate_ctxt.decode;\n\tint ret;\n\n\tinit_emulate_ctxt(vcpu);\n\n\tvcpu->arch.emulate_ctxt.decode.op_bytes = 2;\n\tvcpu->arch.emulate_ctxt.decode.ad_bytes = 2;\n\tvcpu->arch.emulate_ctxt.decode.eip = vcpu->arch.emulate_ctxt.eip;\n\tret = emulate_int_real(&vcpu->arch.emulate_ctxt, &emulate_ops, irq);\n\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn EMULATE_FAIL;\n\n\tvcpu->arch.emulate_ctxt.eip = c->eip;\n\tmemcpy(vcpu->arch.regs, c->regs, sizeof c->regs);\n\tkvm_rip_write(vcpu, vcpu->arch.emulate_ctxt.eip);\n\tkvm_x86_ops->set_rflags(vcpu, vcpu->arch.emulate_ctxt.eflags);\n\n\tif (irq == NMI_VECTOR)\n\t\tvcpu->arch.nmi_pending = false;\n\telse\n\t\tvcpu->arch.interrupt.pending = false;\n\n\treturn EMULATE_DONE;\n}\nEXPORT_SYMBOL_GPL(kvm_inject_realmode_interrupt);\n\nstatic int handle_emulation_failure(struct kvm_vcpu *vcpu)\n{\n\t++vcpu->stat.insn_emulation_fail;\n\ttrace_kvm_emulate_insn_failed(vcpu);\n\tvcpu->run->exit_reason = KVM_EXIT_INTERNAL_ERROR;\n\tvcpu->run->internal.suberror = KVM_INTERNAL_ERROR_EMULATION;\n\tvcpu->run->internal.ndata = 0;\n\tkvm_queue_exception(vcpu, UD_VECTOR);\n\treturn EMULATE_FAIL;\n}\n\nstatic bool reexecute_instruction(struct kvm_vcpu *vcpu, gva_t gva)\n{\n\tgpa_t gpa;\n\n\tif (tdp_enabled)\n\t\treturn false;\n\n\t/*\n\t * if emulation was due to access to shadowed page table\n\t * and it failed try to unshadow page and re-entetr the\n\t * guest to let CPU execute the instruction.\n\t */\n\tif (kvm_mmu_unprotect_page_virt(vcpu, gva))\n\t\treturn true;\n\n\tgpa = kvm_mmu_gva_to_gpa_system(vcpu, gva, NULL);\n\n\tif (gpa == UNMAPPED_GVA)\n\t\treturn true; /* let cpu generate fault */\n\n\tif (!kvm_is_error_hva(gfn_to_hva(vcpu->kvm, gpa >> PAGE_SHIFT)))\n\t\treturn true;\n\n\treturn false;\n}\n\nint emulate_instruction(struct kvm_vcpu *vcpu,\n\t\t\tunsigned long cr2,\n\t\t\tu16 error_code,\n\t\t\tint emulation_type)\n{\n\tint r;\n\tstruct decode_cache *c = &vcpu->arch.emulate_ctxt.decode;\n\n\tkvm_clear_exception_queue(vcpu);\n\tvcpu->arch.mmio_fault_cr2 = cr2;\n\t/*\n\t * TODO: fix emulate.c to use guest_read/write_register\n\t * instead of direct ->regs accesses, can save hundred cycles\n\t * on Intel for instructions that don't read/change RSP, for\n\t * for example.\n\t */\n\tcache_all_regs(vcpu);\n\n\tif (!(emulation_type & EMULTYPE_NO_DECODE)) {\n\t\tinit_emulate_ctxt(vcpu);\n\t\tvcpu->arch.emulate_ctxt.interruptibility = 0;\n\t\tvcpu->arch.emulate_ctxt.have_exception = false;\n\t\tvcpu->arch.emulate_ctxt.perm_ok = false;\n\n\t\tr = x86_decode_insn(&vcpu->arch.emulate_ctxt);\n\t\tif (r == X86EMUL_PROPAGATE_FAULT)\n\t\t\tgoto done;\n\n\t\ttrace_kvm_emulate_insn_start(vcpu);\n\n\t\t/* Only allow emulation of specific instructions on #UD\n\t\t * (namely VMMCALL, sysenter, sysexit, syscall)*/\n\t\tif (emulation_type & EMULTYPE_TRAP_UD) {\n\t\t\tif (!c->twobyte)\n\t\t\t\treturn EMULATE_FAIL;\n\t\t\tswitch (c->b) {\n\t\t\tcase 0x01: /* VMMCALL */\n\t\t\t\tif (c->modrm_mod != 3 || c->modrm_rm != 1)\n\t\t\t\t\treturn EMULATE_FAIL;\n\t\t\t\tbreak;\n\t\t\tcase 0x34: /* sysenter */\n\t\t\tcase 0x35: /* sysexit */\n\t\t\t\tif (c->modrm_mod != 0 || c->modrm_rm != 0)\n\t\t\t\t\treturn EMULATE_FAIL;\n\t\t\t\tbreak;\n\t\t\tcase 0x05: /* syscall */\n\t\t\t\tif (c->modrm_mod != 0 || c->modrm_rm != 0)\n\t\t\t\t\treturn EMULATE_FAIL;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn EMULATE_FAIL;\n\t\t\t}\n\n\t\t\tif (!(c->modrm_reg == 0 || c->modrm_reg == 3))\n\t\t\t\treturn EMULATE_FAIL;\n\t\t}\n\n\t\t++vcpu->stat.insn_emulation;\n\t\tif (r)  {\n\t\t\tif (reexecute_instruction(vcpu, cr2))\n\t\t\t\treturn EMULATE_DONE;\n\t\t\tif (emulation_type & EMULTYPE_SKIP)\n\t\t\t\treturn EMULATE_FAIL;\n\t\t\treturn handle_emulation_failure(vcpu);\n\t\t}\n\t}\n\n\tif (emulation_type & EMULTYPE_SKIP) {\n\t\tkvm_rip_write(vcpu, vcpu->arch.emulate_ctxt.decode.eip);\n\t\treturn EMULATE_DONE;\n\t}\n\n\t/* this is needed for vmware backdor interface to work since it\n\t   changes registers values  during IO operation */\n\tmemcpy(c->regs, vcpu->arch.regs, sizeof c->regs);\n\nrestart:\n\tr = x86_emulate_insn(&vcpu->arch.emulate_ctxt);\n\n\tif (r == EMULATION_FAILED) {\n\t\tif (reexecute_instruction(vcpu, cr2))\n\t\t\treturn EMULATE_DONE;\n\n\t\treturn handle_emulation_failure(vcpu);\n\t}\n\ndone:\n\tif (vcpu->arch.emulate_ctxt.have_exception) {\n\t\tinject_emulated_exception(vcpu);\n\t\tr = EMULATE_DONE;\n\t} else if (vcpu->arch.pio.count) {\n\t\tif (!vcpu->arch.pio.in)\n\t\t\tvcpu->arch.pio.count = 0;\n\t\tr = EMULATE_DO_MMIO;\n\t} else if (vcpu->mmio_needed) {\n\t\tif (vcpu->mmio_is_write)\n\t\t\tvcpu->mmio_needed = 0;\n\t\tr = EMULATE_DO_MMIO;\n\t} else if (r == EMULATION_RESTART)\n\t\tgoto restart;\n\telse\n\t\tr = EMULATE_DONE;\n\n\ttoggle_interruptibility(vcpu, vcpu->arch.emulate_ctxt.interruptibility);\n\tkvm_x86_ops->set_rflags(vcpu, vcpu->arch.emulate_ctxt.eflags);\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\tmemcpy(vcpu->arch.regs, c->regs, sizeof c->regs);\n\tkvm_rip_write(vcpu, vcpu->arch.emulate_ctxt.eip);\n\n\treturn r;\n}\nEXPORT_SYMBOL_GPL(emulate_instruction);\n\nint kvm_fast_pio_out(struct kvm_vcpu *vcpu, int size, unsigned short port)\n{\n\tunsigned long val = kvm_register_read(vcpu, VCPU_REGS_RAX);\n\tint ret = emulator_pio_out_emulated(size, port, &val, 1, vcpu);\n\t/* do not return to emulator after return from userspace */\n\tvcpu->arch.pio.count = 0;\n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(kvm_fast_pio_out);\n\nstatic void tsc_bad(void *info)\n{\n\t__get_cpu_var(cpu_tsc_khz) = 0;\n}\n\nstatic void tsc_khz_changed(void *data)\n{\n\tstruct cpufreq_freqs *freq = data;\n\tunsigned long khz = 0;\n\n\tif (data)\n\t\tkhz = freq->new;\n\telse if (!boot_cpu_has(X86_FEATURE_CONSTANT_TSC))\n\t\tkhz = cpufreq_quick_get(raw_smp_processor_id());\n\tif (!khz)\n\t\tkhz = tsc_khz;\n\t__get_cpu_var(cpu_tsc_khz) = khz;\n}\n\nstatic int kvmclock_cpufreq_notifier(struct notifier_block *nb, unsigned long val,\n\t\t\t\t     void *data)\n{\n\tstruct cpufreq_freqs *freq = data;\n\tstruct kvm *kvm;\n\tstruct kvm_vcpu *vcpu;\n\tint i, send_ipi = 0;\n\n\t/*\n\t * We allow guests to temporarily run on slowing clocks,\n\t * provided we notify them after, or to run on accelerating\n\t * clocks, provided we notify them before.  Thus time never\n\t * goes backwards.\n\t *\n\t * However, we have a problem.  We can't atomically update\n\t * the frequency of a given CPU from this function; it is\n\t * merely a notifier, which can be called from any CPU.\n\t * Changing the TSC frequency at arbitrary points in time\n\t * requires a recomputation of local variables related to\n\t * the TSC for each VCPU.  We must flag these local variables\n\t * to be updated and be sure the update takes place with the\n\t * new frequency before any guests proceed.\n\t *\n\t * Unfortunately, the combination of hotplug CPU and frequency\n\t * change creates an intractable locking scenario; the order\n\t * of when these callouts happen is undefined with respect to\n\t * CPU hotplug, and they can race with each other.  As such,\n\t * merely setting per_cpu(cpu_tsc_khz) = X during a hotadd is\n\t * undefined; you can actually have a CPU frequency change take\n\t * place in between the computation of X and the setting of the\n\t * variable.  To protect against this problem, all updates of\n\t * the per_cpu tsc_khz variable are done in an interrupt\n\t * protected IPI, and all callers wishing to update the value\n\t * must wait for a synchronous IPI to complete (which is trivial\n\t * if the caller is on the CPU already).  This establishes the\n\t * necessary total order on variable updates.\n\t *\n\t * Note that because a guest time update may take place\n\t * anytime after the setting of the VCPU's request bit, the\n\t * correct TSC value must be set before the request.  However,\n\t * to ensure the update actually makes it to any guest which\n\t * starts running in hardware virtualization between the set\n\t * and the acquisition of the spinlock, we must also ping the\n\t * CPU after setting the request bit.\n\t *\n\t */\n\n\tif (val == CPUFREQ_PRECHANGE && freq->old > freq->new)\n\t\treturn 0;\n\tif (val == CPUFREQ_POSTCHANGE && freq->old < freq->new)\n\t\treturn 0;\n\n\tsmp_call_function_single(freq->cpu, tsc_khz_changed, freq, 1);\n\n\tspin_lock(&kvm_lock);\n\tlist_for_each_entry(kvm, &vm_list, vm_list) {\n\t\tkvm_for_each_vcpu(i, vcpu, kvm) {\n\t\t\tif (vcpu->cpu != freq->cpu)\n\t\t\t\tcontinue;\n\t\t\tkvm_make_request(KVM_REQ_CLOCK_UPDATE, vcpu);\n\t\t\tif (vcpu->cpu != smp_processor_id())\n\t\t\t\tsend_ipi = 1;\n\t\t}\n\t}\n\tspin_unlock(&kvm_lock);\n\n\tif (freq->old < freq->new && send_ipi) {\n\t\t/*\n\t\t * We upscale the frequency.  Must make the guest\n\t\t * doesn't see old kvmclock values while running with\n\t\t * the new frequency, otherwise we risk the guest sees\n\t\t * time go backwards.\n\t\t *\n\t\t * In case we update the frequency for another cpu\n\t\t * (which might be in guest context) send an interrupt\n\t\t * to kick the cpu out of guest context.  Next time\n\t\t * guest context is entered kvmclock will be updated,\n\t\t * so the guest will not see stale values.\n\t\t */\n\t\tsmp_call_function_single(freq->cpu, tsc_khz_changed, freq, 1);\n\t}\n\treturn 0;\n}\n\nstatic struct notifier_block kvmclock_cpufreq_notifier_block = {\n\t.notifier_call  = kvmclock_cpufreq_notifier\n};\n\nstatic int kvmclock_cpu_notifier(struct notifier_block *nfb,\n\t\t\t\t\tunsigned long action, void *hcpu)\n{\n\tunsigned int cpu = (unsigned long)hcpu;\n\n\tswitch (action) {\n\t\tcase CPU_ONLINE:\n\t\tcase CPU_DOWN_FAILED:\n\t\t\tsmp_call_function_single(cpu, tsc_khz_changed, NULL, 1);\n\t\t\tbreak;\n\t\tcase CPU_DOWN_PREPARE:\n\t\t\tsmp_call_function_single(cpu, tsc_bad, NULL, 1);\n\t\t\tbreak;\n\t}\n\treturn NOTIFY_OK;\n}\n\nstatic struct notifier_block kvmclock_cpu_notifier_block = {\n\t.notifier_call  = kvmclock_cpu_notifier,\n\t.priority = -INT_MAX\n};\n\nstatic void kvm_timer_init(void)\n{\n\tint cpu;\n\n\tmax_tsc_khz = tsc_khz;\n\tregister_hotcpu_notifier(&kvmclock_cpu_notifier_block);\n\tif (!boot_cpu_has(X86_FEATURE_CONSTANT_TSC)) {\n#ifdef CONFIG_CPU_FREQ\n\t\tstruct cpufreq_policy policy;\n\t\tmemset(&policy, 0, sizeof(policy));\n\t\tcpu = get_cpu();\n\t\tcpufreq_get_policy(&policy, cpu);\n\t\tif (policy.cpuinfo.max_freq)\n\t\t\tmax_tsc_khz = policy.cpuinfo.max_freq;\n\t\tput_cpu();\n#endif\n\t\tcpufreq_register_notifier(&kvmclock_cpufreq_notifier_block,\n\t\t\t\t\t  CPUFREQ_TRANSITION_NOTIFIER);\n\t}\n\tpr_debug(\"kvm: max_tsc_khz = %ld\\n\", max_tsc_khz);\n\tfor_each_online_cpu(cpu)\n\t\tsmp_call_function_single(cpu, tsc_khz_changed, NULL, 1);\n}\n\nstatic DEFINE_PER_CPU(struct kvm_vcpu *, current_vcpu);\n\nstatic int kvm_is_in_guest(void)\n{\n\treturn percpu_read(current_vcpu) != NULL;\n}\n\nstatic int kvm_is_user_mode(void)\n{\n\tint user_mode = 3;\n\n\tif (percpu_read(current_vcpu))\n\t\tuser_mode = kvm_x86_ops->get_cpl(percpu_read(current_vcpu));\n\n\treturn user_mode != 0;\n}\n\nstatic unsigned long kvm_get_guest_ip(void)\n{\n\tunsigned long ip = 0;\n\n\tif (percpu_read(current_vcpu))\n\t\tip = kvm_rip_read(percpu_read(current_vcpu));\n\n\treturn ip;\n}\n\nstatic struct perf_guest_info_callbacks kvm_guest_cbs = {\n\t.is_in_guest\t\t= kvm_is_in_guest,\n\t.is_user_mode\t\t= kvm_is_user_mode,\n\t.get_guest_ip\t\t= kvm_get_guest_ip,\n};\n\nvoid kvm_before_handle_nmi(struct kvm_vcpu *vcpu)\n{\n\tpercpu_write(current_vcpu, vcpu);\n}\nEXPORT_SYMBOL_GPL(kvm_before_handle_nmi);\n\nvoid kvm_after_handle_nmi(struct kvm_vcpu *vcpu)\n{\n\tpercpu_write(current_vcpu, NULL);\n}\nEXPORT_SYMBOL_GPL(kvm_after_handle_nmi);\n\nint kvm_arch_init(void *opaque)\n{\n\tint r;\n\tstruct kvm_x86_ops *ops = (struct kvm_x86_ops *)opaque;\n\n\tif (kvm_x86_ops) {\n\t\tprintk(KERN_ERR \"kvm: already loaded the other module\\n\");\n\t\tr = -EEXIST;\n\t\tgoto out;\n\t}\n\n\tif (!ops->cpu_has_kvm_support()) {\n\t\tprintk(KERN_ERR \"kvm: no hardware support\\n\");\n\t\tr = -EOPNOTSUPP;\n\t\tgoto out;\n\t}\n\tif (ops->disabled_by_bios()) {\n\t\tprintk(KERN_ERR \"kvm: disabled by bios\\n\");\n\t\tr = -EOPNOTSUPP;\n\t\tgoto out;\n\t}\n\n\tr = kvm_mmu_module_init();\n\tif (r)\n\t\tgoto out;\n\n\tkvm_init_msr_list();\n\n\tkvm_x86_ops = ops;\n\tkvm_mmu_set_nonpresent_ptes(0ull, 0ull);\n\tkvm_mmu_set_mask_ptes(PT_USER_MASK, PT_ACCESSED_MASK,\n\t\t\tPT_DIRTY_MASK, PT64_NX_MASK, 0);\n\n\tkvm_timer_init();\n\n\tperf_register_guest_info_callbacks(&kvm_guest_cbs);\n\n\tif (cpu_has_xsave)\n\t\thost_xcr0 = xgetbv(XCR_XFEATURE_ENABLED_MASK);\n\n\treturn 0;\n\nout:\n\treturn r;\n}\n\nvoid kvm_arch_exit(void)\n{\n\tperf_unregister_guest_info_callbacks(&kvm_guest_cbs);\n\n\tif (!boot_cpu_has(X86_FEATURE_CONSTANT_TSC))\n\t\tcpufreq_unregister_notifier(&kvmclock_cpufreq_notifier_block,\n\t\t\t\t\t    CPUFREQ_TRANSITION_NOTIFIER);\n\tunregister_hotcpu_notifier(&kvmclock_cpu_notifier_block);\n\tkvm_x86_ops = NULL;\n\tkvm_mmu_module_exit();\n}\n\nint kvm_emulate_halt(struct kvm_vcpu *vcpu)\n{\n\t++vcpu->stat.halt_exits;\n\tif (irqchip_in_kernel(vcpu->kvm)) {\n\t\tvcpu->arch.mp_state = KVM_MP_STATE_HALTED;\n\t\treturn 1;\n\t} else {\n\t\tvcpu->run->exit_reason = KVM_EXIT_HLT;\n\t\treturn 0;\n\t}\n}\nEXPORT_SYMBOL_GPL(kvm_emulate_halt);\n\nstatic inline gpa_t hc_gpa(struct kvm_vcpu *vcpu, unsigned long a0,\n\t\t\t   unsigned long a1)\n{\n\tif (is_long_mode(vcpu))\n\t\treturn a0;\n\telse\n\t\treturn a0 | ((gpa_t)a1 << 32);\n}\n\nint kvm_hv_hypercall(struct kvm_vcpu *vcpu)\n{\n\tu64 param, ingpa, outgpa, ret;\n\tuint16_t code, rep_idx, rep_cnt, res = HV_STATUS_SUCCESS, rep_done = 0;\n\tbool fast, longmode;\n\tint cs_db, cs_l;\n\n\t/*\n\t * hypercall generates UD from non zero cpl and real mode\n\t * per HYPER-V spec\n\t */\n\tif (kvm_x86_ops->get_cpl(vcpu) != 0 || !is_protmode(vcpu)) {\n\t\tkvm_queue_exception(vcpu, UD_VECTOR);\n\t\treturn 0;\n\t}\n\n\tkvm_x86_ops->get_cs_db_l_bits(vcpu, &cs_db, &cs_l);\n\tlongmode = is_long_mode(vcpu) && cs_l == 1;\n\n\tif (!longmode) {\n\t\tparam = ((u64)kvm_register_read(vcpu, VCPU_REGS_RDX) << 32) |\n\t\t\t(kvm_register_read(vcpu, VCPU_REGS_RAX) & 0xffffffff);\n\t\tingpa = ((u64)kvm_register_read(vcpu, VCPU_REGS_RBX) << 32) |\n\t\t\t(kvm_register_read(vcpu, VCPU_REGS_RCX) & 0xffffffff);\n\t\toutgpa = ((u64)kvm_register_read(vcpu, VCPU_REGS_RDI) << 32) |\n\t\t\t(kvm_register_read(vcpu, VCPU_REGS_RSI) & 0xffffffff);\n\t}\n#ifdef CONFIG_X86_64\n\telse {\n\t\tparam = kvm_register_read(vcpu, VCPU_REGS_RCX);\n\t\tingpa = kvm_register_read(vcpu, VCPU_REGS_RDX);\n\t\toutgpa = kvm_register_read(vcpu, VCPU_REGS_R8);\n\t}\n#endif\n\n\tcode = param & 0xffff;\n\tfast = (param >> 16) & 0x1;\n\trep_cnt = (param >> 32) & 0xfff;\n\trep_idx = (param >> 48) & 0xfff;\n\n\ttrace_kvm_hv_hypercall(code, fast, rep_cnt, rep_idx, ingpa, outgpa);\n\n\tswitch (code) {\n\tcase HV_X64_HV_NOTIFY_LONG_SPIN_WAIT:\n\t\tkvm_vcpu_on_spin(vcpu);\n\t\tbreak;\n\tdefault:\n\t\tres = HV_STATUS_INVALID_HYPERCALL_CODE;\n\t\tbreak;\n\t}\n\n\tret = res | (((u64)rep_done & 0xfff) << 32);\n\tif (longmode) {\n\t\tkvm_register_write(vcpu, VCPU_REGS_RAX, ret);\n\t} else {\n\t\tkvm_register_write(vcpu, VCPU_REGS_RDX, ret >> 32);\n\t\tkvm_register_write(vcpu, VCPU_REGS_RAX, ret & 0xffffffff);\n\t}\n\n\treturn 1;\n}\n\nint kvm_emulate_hypercall(struct kvm_vcpu *vcpu)\n{\n\tunsigned long nr, a0, a1, a2, a3, ret;\n\tint r = 1;\n\n\tif (kvm_hv_hypercall_enabled(vcpu->kvm))\n\t\treturn kvm_hv_hypercall(vcpu);\n\n\tnr = kvm_register_read(vcpu, VCPU_REGS_RAX);\n\ta0 = kvm_register_read(vcpu, VCPU_REGS_RBX);\n\ta1 = kvm_register_read(vcpu, VCPU_REGS_RCX);\n\ta2 = kvm_register_read(vcpu, VCPU_REGS_RDX);\n\ta3 = kvm_register_read(vcpu, VCPU_REGS_RSI);\n\n\ttrace_kvm_hypercall(nr, a0, a1, a2, a3);\n\n\tif (!is_long_mode(vcpu)) {\n\t\tnr &= 0xFFFFFFFF;\n\t\ta0 &= 0xFFFFFFFF;\n\t\ta1 &= 0xFFFFFFFF;\n\t\ta2 &= 0xFFFFFFFF;\n\t\ta3 &= 0xFFFFFFFF;\n\t}\n\n\tif (kvm_x86_ops->get_cpl(vcpu) != 0) {\n\t\tret = -KVM_EPERM;\n\t\tgoto out;\n\t}\n\n\tswitch (nr) {\n\tcase KVM_HC_VAPIC_POLL_IRQ:\n\t\tret = 0;\n\t\tbreak;\n\tcase KVM_HC_MMU_OP:\n\t\tr = kvm_pv_mmu_op(vcpu, a0, hc_gpa(vcpu, a1, a2), &ret);\n\t\tbreak;\n\tdefault:\n\t\tret = -KVM_ENOSYS;\n\t\tbreak;\n\t}\nout:\n\tkvm_register_write(vcpu, VCPU_REGS_RAX, ret);\n\t++vcpu->stat.hypercalls;\n\treturn r;\n}\nEXPORT_SYMBOL_GPL(kvm_emulate_hypercall);\n\nint kvm_fix_hypercall(struct kvm_vcpu *vcpu)\n{\n\tchar instruction[3];\n\tunsigned long rip = kvm_rip_read(vcpu);\n\n\t/*\n\t * Blow out the MMU to ensure that no other VCPU has an active mapping\n\t * to ensure that the updated hypercall appears atomically across all\n\t * VCPUs.\n\t */\n\tkvm_mmu_zap_all(vcpu->kvm);\n\n\tkvm_x86_ops->patch_hypercall(vcpu, instruction);\n\n\treturn emulator_write_emulated(rip, instruction, 3, NULL, vcpu);\n}\n\nvoid realmode_lgdt(struct kvm_vcpu *vcpu, u16 limit, unsigned long base)\n{\n\tstruct desc_ptr dt = { limit, base };\n\n\tkvm_x86_ops->set_gdt(vcpu, &dt);\n}\n\nvoid realmode_lidt(struct kvm_vcpu *vcpu, u16 limit, unsigned long base)\n{\n\tstruct desc_ptr dt = { limit, base };\n\n\tkvm_x86_ops->set_idt(vcpu, &dt);\n}\n\nstatic int move_to_next_stateful_cpuid_entry(struct kvm_vcpu *vcpu, int i)\n{\n\tstruct kvm_cpuid_entry2 *e = &vcpu->arch.cpuid_entries[i];\n\tint j, nent = vcpu->arch.cpuid_nent;\n\n\te->flags &= ~KVM_CPUID_FLAG_STATE_READ_NEXT;\n\t/* when no next entry is found, the current entry[i] is reselected */\n\tfor (j = i + 1; ; j = (j + 1) % nent) {\n\t\tstruct kvm_cpuid_entry2 *ej = &vcpu->arch.cpuid_entries[j];\n\t\tif (ej->function == e->function) {\n\t\t\tej->flags |= KVM_CPUID_FLAG_STATE_READ_NEXT;\n\t\t\treturn j;\n\t\t}\n\t}\n\treturn 0; /* silence gcc, even though control never reaches here */\n}\n\n/* find an entry with matching function, matching index (if needed), and that\n * should be read next (if it's stateful) */\nstatic int is_matching_cpuid_entry(struct kvm_cpuid_entry2 *e,\n\tu32 function, u32 index)\n{\n\tif (e->function != function)\n\t\treturn 0;\n\tif ((e->flags & KVM_CPUID_FLAG_SIGNIFCANT_INDEX) && e->index != index)\n\t\treturn 0;\n\tif ((e->flags & KVM_CPUID_FLAG_STATEFUL_FUNC) &&\n\t    !(e->flags & KVM_CPUID_FLAG_STATE_READ_NEXT))\n\t\treturn 0;\n\treturn 1;\n}\n\nstruct kvm_cpuid_entry2 *kvm_find_cpuid_entry(struct kvm_vcpu *vcpu,\n\t\t\t\t\t      u32 function, u32 index)\n{\n\tint i;\n\tstruct kvm_cpuid_entry2 *best = NULL;\n\n\tfor (i = 0; i < vcpu->arch.cpuid_nent; ++i) {\n\t\tstruct kvm_cpuid_entry2 *e;\n\n\t\te = &vcpu->arch.cpuid_entries[i];\n\t\tif (is_matching_cpuid_entry(e, function, index)) {\n\t\t\tif (e->flags & KVM_CPUID_FLAG_STATEFUL_FUNC)\n\t\t\t\tmove_to_next_stateful_cpuid_entry(vcpu, i);\n\t\t\tbest = e;\n\t\t\tbreak;\n\t\t}\n\t\t/*\n\t\t * Both basic or both extended?\n\t\t */\n\t\tif (((e->function ^ function) & 0x80000000) == 0)\n\t\t\tif (!best || e->function > best->function)\n\t\t\t\tbest = e;\n\t}\n\treturn best;\n}\nEXPORT_SYMBOL_GPL(kvm_find_cpuid_entry);\n\nint cpuid_maxphyaddr(struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_cpuid_entry2 *best;\n\n\tbest = kvm_find_cpuid_entry(vcpu, 0x80000000, 0);\n\tif (!best || best->eax < 0x80000008)\n\t\tgoto not_found;\n\tbest = kvm_find_cpuid_entry(vcpu, 0x80000008, 0);\n\tif (best)\n\t\treturn best->eax & 0xff;\nnot_found:\n\treturn 36;\n}\n\nvoid kvm_emulate_cpuid(struct kvm_vcpu *vcpu)\n{\n\tu32 function, index;\n\tstruct kvm_cpuid_entry2 *best;\n\n\tfunction = kvm_register_read(vcpu, VCPU_REGS_RAX);\n\tindex = kvm_register_read(vcpu, VCPU_REGS_RCX);\n\tkvm_register_write(vcpu, VCPU_REGS_RAX, 0);\n\tkvm_register_write(vcpu, VCPU_REGS_RBX, 0);\n\tkvm_register_write(vcpu, VCPU_REGS_RCX, 0);\n\tkvm_register_write(vcpu, VCPU_REGS_RDX, 0);\n\tbest = kvm_find_cpuid_entry(vcpu, function, index);\n\tif (best) {\n\t\tkvm_register_write(vcpu, VCPU_REGS_RAX, best->eax);\n\t\tkvm_register_write(vcpu, VCPU_REGS_RBX, best->ebx);\n\t\tkvm_register_write(vcpu, VCPU_REGS_RCX, best->ecx);\n\t\tkvm_register_write(vcpu, VCPU_REGS_RDX, best->edx);\n\t}\n\tkvm_x86_ops->skip_emulated_instruction(vcpu);\n\ttrace_kvm_cpuid(function,\n\t\t\tkvm_register_read(vcpu, VCPU_REGS_RAX),\n\t\t\tkvm_register_read(vcpu, VCPU_REGS_RBX),\n\t\t\tkvm_register_read(vcpu, VCPU_REGS_RCX),\n\t\t\tkvm_register_read(vcpu, VCPU_REGS_RDX));\n}\nEXPORT_SYMBOL_GPL(kvm_emulate_cpuid);\n\n/*\n * Check if userspace requested an interrupt window, and that the\n * interrupt window is open.\n *\n * No need to exit to userspace if we already have an interrupt queued.\n */\nstatic int dm_request_for_irq_injection(struct kvm_vcpu *vcpu)\n{\n\treturn (!irqchip_in_kernel(vcpu->kvm) && !kvm_cpu_has_interrupt(vcpu) &&\n\t\tvcpu->run->request_interrupt_window &&\n\t\tkvm_arch_interrupt_allowed(vcpu));\n}\n\nstatic void post_kvm_run_save(struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_run *kvm_run = vcpu->run;\n\n\tkvm_run->if_flag = (kvm_get_rflags(vcpu) & X86_EFLAGS_IF) != 0;\n\tkvm_run->cr8 = kvm_get_cr8(vcpu);\n\tkvm_run->apic_base = kvm_get_apic_base(vcpu);\n\tif (irqchip_in_kernel(vcpu->kvm))\n\t\tkvm_run->ready_for_interrupt_injection = 1;\n\telse\n\t\tkvm_run->ready_for_interrupt_injection =\n\t\t\tkvm_arch_interrupt_allowed(vcpu) &&\n\t\t\t!kvm_cpu_has_interrupt(vcpu) &&\n\t\t\t!kvm_event_needs_reinjection(vcpu);\n}\n\nstatic void vapic_enter(struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_lapic *apic = vcpu->arch.apic;\n\tstruct page *page;\n\n\tif (!apic || !apic->vapic_addr)\n\t\treturn;\n\n\tpage = gfn_to_page(vcpu->kvm, apic->vapic_addr >> PAGE_SHIFT);\n\n\tvcpu->arch.apic->vapic_page = page;\n}\n\nstatic void vapic_exit(struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_lapic *apic = vcpu->arch.apic;\n\tint idx;\n\n\tif (!apic || !apic->vapic_addr)\n\t\treturn;\n\n\tidx = srcu_read_lock(&vcpu->kvm->srcu);\n\tkvm_release_page_dirty(apic->vapic_page);\n\tmark_page_dirty(vcpu->kvm, apic->vapic_addr >> PAGE_SHIFT);\n\tsrcu_read_unlock(&vcpu->kvm->srcu, idx);\n}\n\nstatic void update_cr8_intercept(struct kvm_vcpu *vcpu)\n{\n\tint max_irr, tpr;\n\n\tif (!kvm_x86_ops->update_cr8_intercept)\n\t\treturn;\n\n\tif (!vcpu->arch.apic)\n\t\treturn;\n\n\tif (!vcpu->arch.apic->vapic_addr)\n\t\tmax_irr = kvm_lapic_find_highest_irr(vcpu);\n\telse\n\t\tmax_irr = -1;\n\n\tif (max_irr != -1)\n\t\tmax_irr >>= 4;\n\n\ttpr = kvm_lapic_get_cr8(vcpu);\n\n\tkvm_x86_ops->update_cr8_intercept(vcpu, tpr, max_irr);\n}\n\nstatic void inject_pending_event(struct kvm_vcpu *vcpu)\n{\n\t/* try to reinject previous events if any */\n\tif (vcpu->arch.exception.pending) {\n\t\ttrace_kvm_inj_exception(vcpu->arch.exception.nr,\n\t\t\t\t\tvcpu->arch.exception.has_error_code,\n\t\t\t\t\tvcpu->arch.exception.error_code);\n\t\tkvm_x86_ops->queue_exception(vcpu, vcpu->arch.exception.nr,\n\t\t\t\t\t  vcpu->arch.exception.has_error_code,\n\t\t\t\t\t  vcpu->arch.exception.error_code,\n\t\t\t\t\t  vcpu->arch.exception.reinject);\n\t\treturn;\n\t}\n\n\tif (vcpu->arch.nmi_injected) {\n\t\tkvm_x86_ops->set_nmi(vcpu);\n\t\treturn;\n\t}\n\n\tif (vcpu->arch.interrupt.pending) {\n\t\tkvm_x86_ops->set_irq(vcpu);\n\t\treturn;\n\t}\n\n\t/* try to inject new event if pending */\n\tif (vcpu->arch.nmi_pending) {\n\t\tif (kvm_x86_ops->nmi_allowed(vcpu)) {\n\t\t\tvcpu->arch.nmi_pending = false;\n\t\t\tvcpu->arch.nmi_injected = true;\n\t\t\tkvm_x86_ops->set_nmi(vcpu);\n\t\t}\n\t} else if (kvm_cpu_has_interrupt(vcpu)) {\n\t\tif (kvm_x86_ops->interrupt_allowed(vcpu)) {\n\t\t\tkvm_queue_interrupt(vcpu, kvm_cpu_get_interrupt(vcpu),\n\t\t\t\t\t    false);\n\t\t\tkvm_x86_ops->set_irq(vcpu);\n\t\t}\n\t}\n}\n\nstatic void kvm_load_guest_xcr0(struct kvm_vcpu *vcpu)\n{\n\tif (kvm_read_cr4_bits(vcpu, X86_CR4_OSXSAVE) &&\n\t\t\t!vcpu->guest_xcr0_loaded) {\n\t\t/* kvm_set_xcr() also depends on this */\n\t\txsetbv(XCR_XFEATURE_ENABLED_MASK, vcpu->arch.xcr0);\n\t\tvcpu->guest_xcr0_loaded = 1;\n\t}\n}\n\nstatic void kvm_put_guest_xcr0(struct kvm_vcpu *vcpu)\n{\n\tif (vcpu->guest_xcr0_loaded) {\n\t\tif (vcpu->arch.xcr0 != host_xcr0)\n\t\t\txsetbv(XCR_XFEATURE_ENABLED_MASK, host_xcr0);\n\t\tvcpu->guest_xcr0_loaded = 0;\n\t}\n}\n\nstatic int vcpu_enter_guest(struct kvm_vcpu *vcpu)\n{\n\tint r;\n\tbool req_int_win = !irqchip_in_kernel(vcpu->kvm) &&\n\t\tvcpu->run->request_interrupt_window;\n\n\tif (vcpu->requests) {\n\t\tif (kvm_check_request(KVM_REQ_MMU_RELOAD, vcpu))\n\t\t\tkvm_mmu_unload(vcpu);\n\t\tif (kvm_check_request(KVM_REQ_MIGRATE_TIMER, vcpu))\n\t\t\t__kvm_migrate_timers(vcpu);\n\t\tif (kvm_check_request(KVM_REQ_CLOCK_UPDATE, vcpu)) {\n\t\t\tr = kvm_guest_time_update(vcpu);\n\t\t\tif (unlikely(r))\n\t\t\t\tgoto out;\n\t\t}\n\t\tif (kvm_check_request(KVM_REQ_MMU_SYNC, vcpu))\n\t\t\tkvm_mmu_sync_roots(vcpu);\n\t\tif (kvm_check_request(KVM_REQ_TLB_FLUSH, vcpu))\n\t\t\tkvm_x86_ops->tlb_flush(vcpu);\n\t\tif (kvm_check_request(KVM_REQ_REPORT_TPR_ACCESS, vcpu)) {\n\t\t\tvcpu->run->exit_reason = KVM_EXIT_TPR_ACCESS;\n\t\t\tr = 0;\n\t\t\tgoto out;\n\t\t}\n\t\tif (kvm_check_request(KVM_REQ_TRIPLE_FAULT, vcpu)) {\n\t\t\tvcpu->run->exit_reason = KVM_EXIT_SHUTDOWN;\n\t\t\tr = 0;\n\t\t\tgoto out;\n\t\t}\n\t\tif (kvm_check_request(KVM_REQ_DEACTIVATE_FPU, vcpu)) {\n\t\t\tvcpu->fpu_active = 0;\n\t\t\tkvm_x86_ops->fpu_deactivate(vcpu);\n\t\t}\n\t\tif (kvm_check_request(KVM_REQ_APF_HALT, vcpu)) {\n\t\t\t/* Page is swapped out. Do synthetic halt */\n\t\t\tvcpu->arch.apf.halted = true;\n\t\t\tr = 1;\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tr = kvm_mmu_reload(vcpu);\n\tif (unlikely(r))\n\t\tgoto out;\n\n\tif (kvm_check_request(KVM_REQ_EVENT, vcpu) || req_int_win) {\n\t\tinject_pending_event(vcpu);\n\n\t\t/* enable NMI/IRQ window open exits if needed */\n\t\tif (vcpu->arch.nmi_pending)\n\t\t\tkvm_x86_ops->enable_nmi_window(vcpu);\n\t\telse if (kvm_cpu_has_interrupt(vcpu) || req_int_win)\n\t\t\tkvm_x86_ops->enable_irq_window(vcpu);\n\n\t\tif (kvm_lapic_enabled(vcpu)) {\n\t\t\tupdate_cr8_intercept(vcpu);\n\t\t\tkvm_lapic_sync_to_vapic(vcpu);\n\t\t}\n\t}\n\n\tpreempt_disable();\n\n\tkvm_x86_ops->prepare_guest_switch(vcpu);\n\tif (vcpu->fpu_active)\n\t\tkvm_load_guest_fpu(vcpu);\n\tkvm_load_guest_xcr0(vcpu);\n\n\tatomic_set(&vcpu->guest_mode, 1);\n\tsmp_wmb();\n\n\tlocal_irq_disable();\n\n\tif (!atomic_read(&vcpu->guest_mode) || vcpu->requests\n\t    || need_resched() || signal_pending(current)) {\n\t\tatomic_set(&vcpu->guest_mode, 0);\n\t\tsmp_wmb();\n\t\tlocal_irq_enable();\n\t\tpreempt_enable();\n\t\tkvm_x86_ops->cancel_injection(vcpu);\n\t\tr = 1;\n\t\tgoto out;\n\t}\n\n\tsrcu_read_unlock(&vcpu->kvm->srcu, vcpu->srcu_idx);\n\n\tkvm_guest_enter();\n\n\tif (unlikely(vcpu->arch.switch_db_regs)) {\n\t\tset_debugreg(0, 7);\n\t\tset_debugreg(vcpu->arch.eff_db[0], 0);\n\t\tset_debugreg(vcpu->arch.eff_db[1], 1);\n\t\tset_debugreg(vcpu->arch.eff_db[2], 2);\n\t\tset_debugreg(vcpu->arch.eff_db[3], 3);\n\t}\n\n\ttrace_kvm_entry(vcpu->vcpu_id);\n\tkvm_x86_ops->run(vcpu);\n\n\t/*\n\t * If the guest has used debug registers, at least dr7\n\t * will be disabled while returning to the host.\n\t * If we don't have active breakpoints in the host, we don't\n\t * care about the messed up debug address registers. But if\n\t * we have some of them active, restore the old state.\n\t */\n\tif (hw_breakpoint_active())\n\t\thw_breakpoint_restore();\n\n\tkvm_get_msr(vcpu, MSR_IA32_TSC, &vcpu->arch.last_guest_tsc);\n\n\tatomic_set(&vcpu->guest_mode, 0);\n\tsmp_wmb();\n\tlocal_irq_enable();\n\n\t++vcpu->stat.exits;\n\n\t/*\n\t * We must have an instruction between local_irq_enable() and\n\t * kvm_guest_exit(), so the timer interrupt isn't delayed by\n\t * the interrupt shadow.  The stat.exits increment will do nicely.\n\t * But we need to prevent reordering, hence this barrier():\n\t */\n\tbarrier();\n\n\tkvm_guest_exit();\n\n\tpreempt_enable();\n\n\tvcpu->srcu_idx = srcu_read_lock(&vcpu->kvm->srcu);\n\n\t/*\n\t * Profile KVM exit RIPs:\n\t */\n\tif (unlikely(prof_on == KVM_PROFILING)) {\n\t\tunsigned long rip = kvm_rip_read(vcpu);\n\t\tprofile_hit(KVM_PROFILING, (void *)rip);\n\t}\n\n\n\tkvm_lapic_sync_from_vapic(vcpu);\n\n\tr = kvm_x86_ops->handle_exit(vcpu);\nout:\n\treturn r;\n}\n\n\nstatic int __vcpu_run(struct kvm_vcpu *vcpu)\n{\n\tint r;\n\tstruct kvm *kvm = vcpu->kvm;\n\n\tif (unlikely(vcpu->arch.mp_state == KVM_MP_STATE_SIPI_RECEIVED)) {\n\t\tpr_debug(\"vcpu %d received sipi with vector # %x\\n\",\n\t\t\t vcpu->vcpu_id, vcpu->arch.sipi_vector);\n\t\tkvm_lapic_reset(vcpu);\n\t\tr = kvm_arch_vcpu_reset(vcpu);\n\t\tif (r)\n\t\t\treturn r;\n\t\tvcpu->arch.mp_state = KVM_MP_STATE_RUNNABLE;\n\t}\n\n\tvcpu->srcu_idx = srcu_read_lock(&kvm->srcu);\n\tvapic_enter(vcpu);\n\n\tr = 1;\n\twhile (r > 0) {\n\t\tif (vcpu->arch.mp_state == KVM_MP_STATE_RUNNABLE &&\n\t\t    !vcpu->arch.apf.halted)\n\t\t\tr = vcpu_enter_guest(vcpu);\n\t\telse {\n\t\t\tsrcu_read_unlock(&kvm->srcu, vcpu->srcu_idx);\n\t\t\tkvm_vcpu_block(vcpu);\n\t\t\tvcpu->srcu_idx = srcu_read_lock(&kvm->srcu);\n\t\t\tif (kvm_check_request(KVM_REQ_UNHALT, vcpu))\n\t\t\t{\n\t\t\t\tswitch(vcpu->arch.mp_state) {\n\t\t\t\tcase KVM_MP_STATE_HALTED:\n\t\t\t\t\tvcpu->arch.mp_state =\n\t\t\t\t\t\tKVM_MP_STATE_RUNNABLE;\n\t\t\t\tcase KVM_MP_STATE_RUNNABLE:\n\t\t\t\t\tvcpu->arch.apf.halted = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase KVM_MP_STATE_SIPI_RECEIVED:\n\t\t\t\tdefault:\n\t\t\t\t\tr = -EINTR;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (r <= 0)\n\t\t\tbreak;\n\n\t\tclear_bit(KVM_REQ_PENDING_TIMER, &vcpu->requests);\n\t\tif (kvm_cpu_has_pending_timer(vcpu))\n\t\t\tkvm_inject_pending_timer_irqs(vcpu);\n\n\t\tif (dm_request_for_irq_injection(vcpu)) {\n\t\t\tr = -EINTR;\n\t\t\tvcpu->run->exit_reason = KVM_EXIT_INTR;\n\t\t\t++vcpu->stat.request_irq_exits;\n\t\t}\n\n\t\tkvm_check_async_pf_completion(vcpu);\n\n\t\tif (signal_pending(current)) {\n\t\t\tr = -EINTR;\n\t\t\tvcpu->run->exit_reason = KVM_EXIT_INTR;\n\t\t\t++vcpu->stat.signal_exits;\n\t\t}\n\t\tif (need_resched()) {\n\t\t\tsrcu_read_unlock(&kvm->srcu, vcpu->srcu_idx);\n\t\t\tkvm_resched(vcpu);\n\t\t\tvcpu->srcu_idx = srcu_read_lock(&kvm->srcu);\n\t\t}\n\t}\n\n\tsrcu_read_unlock(&kvm->srcu, vcpu->srcu_idx);\n\n\tvapic_exit(vcpu);\n\n\treturn r;\n}\n\nint kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *kvm_run)\n{\n\tint r;\n\tsigset_t sigsaved;\n\n\tif (vcpu->sigset_active)\n\t\tsigprocmask(SIG_SETMASK, &vcpu->sigset, &sigsaved);\n\n\tif (unlikely(vcpu->arch.mp_state == KVM_MP_STATE_UNINITIALIZED)) {\n\t\tkvm_vcpu_block(vcpu);\n\t\tclear_bit(KVM_REQ_UNHALT, &vcpu->requests);\n\t\tr = -EAGAIN;\n\t\tgoto out;\n\t}\n\n\t/* re-sync apic's tpr */\n\tif (!irqchip_in_kernel(vcpu->kvm))\n\t\tkvm_set_cr8(vcpu, kvm_run->cr8);\n\n\tif (vcpu->arch.pio.count || vcpu->mmio_needed) {\n\t\tif (vcpu->mmio_needed) {\n\t\t\tmemcpy(vcpu->mmio_data, kvm_run->mmio.data, 8);\n\t\t\tvcpu->mmio_read_completed = 1;\n\t\t\tvcpu->mmio_needed = 0;\n\t\t}\n\t\tvcpu->srcu_idx = srcu_read_lock(&vcpu->kvm->srcu);\n\t\tr = emulate_instruction(vcpu, 0, 0, EMULTYPE_NO_DECODE);\n\t\tsrcu_read_unlock(&vcpu->kvm->srcu, vcpu->srcu_idx);\n\t\tif (r != EMULATE_DONE) {\n\t\t\tr = 0;\n\t\t\tgoto out;\n\t\t}\n\t}\n\tif (kvm_run->exit_reason == KVM_EXIT_HYPERCALL)\n\t\tkvm_register_write(vcpu, VCPU_REGS_RAX,\n\t\t\t\t     kvm_run->hypercall.ret);\n\n\tr = __vcpu_run(vcpu);\n\nout:\n\tpost_kvm_run_save(vcpu);\n\tif (vcpu->sigset_active)\n\t\tsigprocmask(SIG_SETMASK, &sigsaved, NULL);\n\n\treturn r;\n}\n\nint kvm_arch_vcpu_ioctl_get_regs(struct kvm_vcpu *vcpu, struct kvm_regs *regs)\n{\n\tregs->rax = kvm_register_read(vcpu, VCPU_REGS_RAX);\n\tregs->rbx = kvm_register_read(vcpu, VCPU_REGS_RBX);\n\tregs->rcx = kvm_register_read(vcpu, VCPU_REGS_RCX);\n\tregs->rdx = kvm_register_read(vcpu, VCPU_REGS_RDX);\n\tregs->rsi = kvm_register_read(vcpu, VCPU_REGS_RSI);\n\tregs->rdi = kvm_register_read(vcpu, VCPU_REGS_RDI);\n\tregs->rsp = kvm_register_read(vcpu, VCPU_REGS_RSP);\n\tregs->rbp = kvm_register_read(vcpu, VCPU_REGS_RBP);\n#ifdef CONFIG_X86_64\n\tregs->r8 = kvm_register_read(vcpu, VCPU_REGS_R8);\n\tregs->r9 = kvm_register_read(vcpu, VCPU_REGS_R9);\n\tregs->r10 = kvm_register_read(vcpu, VCPU_REGS_R10);\n\tregs->r11 = kvm_register_read(vcpu, VCPU_REGS_R11);\n\tregs->r12 = kvm_register_read(vcpu, VCPU_REGS_R12);\n\tregs->r13 = kvm_register_read(vcpu, VCPU_REGS_R13);\n\tregs->r14 = kvm_register_read(vcpu, VCPU_REGS_R14);\n\tregs->r15 = kvm_register_read(vcpu, VCPU_REGS_R15);\n#endif\n\n\tregs->rip = kvm_rip_read(vcpu);\n\tregs->rflags = kvm_get_rflags(vcpu);\n\n\treturn 0;\n}\n\nint kvm_arch_vcpu_ioctl_set_regs(struct kvm_vcpu *vcpu, struct kvm_regs *regs)\n{\n\tkvm_register_write(vcpu, VCPU_REGS_RAX, regs->rax);\n\tkvm_register_write(vcpu, VCPU_REGS_RBX, regs->rbx);\n\tkvm_register_write(vcpu, VCPU_REGS_RCX, regs->rcx);\n\tkvm_register_write(vcpu, VCPU_REGS_RDX, regs->rdx);\n\tkvm_register_write(vcpu, VCPU_REGS_RSI, regs->rsi);\n\tkvm_register_write(vcpu, VCPU_REGS_RDI, regs->rdi);\n\tkvm_register_write(vcpu, VCPU_REGS_RSP, regs->rsp);\n\tkvm_register_write(vcpu, VCPU_REGS_RBP, regs->rbp);\n#ifdef CONFIG_X86_64\n\tkvm_register_write(vcpu, VCPU_REGS_R8, regs->r8);\n\tkvm_register_write(vcpu, VCPU_REGS_R9, regs->r9);\n\tkvm_register_write(vcpu, VCPU_REGS_R10, regs->r10);\n\tkvm_register_write(vcpu, VCPU_REGS_R11, regs->r11);\n\tkvm_register_write(vcpu, VCPU_REGS_R12, regs->r12);\n\tkvm_register_write(vcpu, VCPU_REGS_R13, regs->r13);\n\tkvm_register_write(vcpu, VCPU_REGS_R14, regs->r14);\n\tkvm_register_write(vcpu, VCPU_REGS_R15, regs->r15);\n#endif\n\n\tkvm_rip_write(vcpu, regs->rip);\n\tkvm_set_rflags(vcpu, regs->rflags);\n\n\tvcpu->arch.exception.pending = false;\n\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\n\treturn 0;\n}\n\nvoid kvm_get_cs_db_l_bits(struct kvm_vcpu *vcpu, int *db, int *l)\n{\n\tstruct kvm_segment cs;\n\n\tkvm_get_segment(vcpu, &cs, VCPU_SREG_CS);\n\t*db = cs.db;\n\t*l = cs.l;\n}\nEXPORT_SYMBOL_GPL(kvm_get_cs_db_l_bits);\n\nint kvm_arch_vcpu_ioctl_get_sregs(struct kvm_vcpu *vcpu,\n\t\t\t\t  struct kvm_sregs *sregs)\n{\n\tstruct desc_ptr dt;\n\n\tkvm_get_segment(vcpu, &sregs->cs, VCPU_SREG_CS);\n\tkvm_get_segment(vcpu, &sregs->ds, VCPU_SREG_DS);\n\tkvm_get_segment(vcpu, &sregs->es, VCPU_SREG_ES);\n\tkvm_get_segment(vcpu, &sregs->fs, VCPU_SREG_FS);\n\tkvm_get_segment(vcpu, &sregs->gs, VCPU_SREG_GS);\n\tkvm_get_segment(vcpu, &sregs->ss, VCPU_SREG_SS);\n\n\tkvm_get_segment(vcpu, &sregs->tr, VCPU_SREG_TR);\n\tkvm_get_segment(vcpu, &sregs->ldt, VCPU_SREG_LDTR);\n\n\tkvm_x86_ops->get_idt(vcpu, &dt);\n\tsregs->idt.limit = dt.size;\n\tsregs->idt.base = dt.address;\n\tkvm_x86_ops->get_gdt(vcpu, &dt);\n\tsregs->gdt.limit = dt.size;\n\tsregs->gdt.base = dt.address;\n\n\tsregs->cr0 = kvm_read_cr0(vcpu);\n\tsregs->cr2 = vcpu->arch.cr2;\n\tsregs->cr3 = vcpu->arch.cr3;\n\tsregs->cr4 = kvm_read_cr4(vcpu);\n\tsregs->cr8 = kvm_get_cr8(vcpu);\n\tsregs->efer = vcpu->arch.efer;\n\tsregs->apic_base = kvm_get_apic_base(vcpu);\n\n\tmemset(sregs->interrupt_bitmap, 0, sizeof sregs->interrupt_bitmap);\n\n\tif (vcpu->arch.interrupt.pending && !vcpu->arch.interrupt.soft)\n\t\tset_bit(vcpu->arch.interrupt.nr,\n\t\t\t(unsigned long *)sregs->interrupt_bitmap);\n\n\treturn 0;\n}\n\nint kvm_arch_vcpu_ioctl_get_mpstate(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_mp_state *mp_state)\n{\n\tmp_state->mp_state = vcpu->arch.mp_state;\n\treturn 0;\n}\n\nint kvm_arch_vcpu_ioctl_set_mpstate(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_mp_state *mp_state)\n{\n\tvcpu->arch.mp_state = mp_state->mp_state;\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\treturn 0;\n}\n\nint kvm_task_switch(struct kvm_vcpu *vcpu, u16 tss_selector, int reason,\n\t\t    bool has_error_code, u32 error_code)\n{\n\tstruct decode_cache *c = &vcpu->arch.emulate_ctxt.decode;\n\tint ret;\n\n\tinit_emulate_ctxt(vcpu);\n\n\tret = emulator_task_switch(&vcpu->arch.emulate_ctxt,\n\t\t\t\t   tss_selector, reason, has_error_code,\n\t\t\t\t   error_code);\n\n\tif (ret)\n\t\treturn EMULATE_FAIL;\n\n\tmemcpy(vcpu->arch.regs, c->regs, sizeof c->regs);\n\tkvm_rip_write(vcpu, vcpu->arch.emulate_ctxt.eip);\n\tkvm_x86_ops->set_rflags(vcpu, vcpu->arch.emulate_ctxt.eflags);\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\treturn EMULATE_DONE;\n}\nEXPORT_SYMBOL_GPL(kvm_task_switch);\n\nint kvm_arch_vcpu_ioctl_set_sregs(struct kvm_vcpu *vcpu,\n\t\t\t\t  struct kvm_sregs *sregs)\n{\n\tint mmu_reset_needed = 0;\n\tint pending_vec, max_bits;\n\tstruct desc_ptr dt;\n\n\tdt.size = sregs->idt.limit;\n\tdt.address = sregs->idt.base;\n\tkvm_x86_ops->set_idt(vcpu, &dt);\n\tdt.size = sregs->gdt.limit;\n\tdt.address = sregs->gdt.base;\n\tkvm_x86_ops->set_gdt(vcpu, &dt);\n\n\tvcpu->arch.cr2 = sregs->cr2;\n\tmmu_reset_needed |= vcpu->arch.cr3 != sregs->cr3;\n\tvcpu->arch.cr3 = sregs->cr3;\n\n\tkvm_set_cr8(vcpu, sregs->cr8);\n\n\tmmu_reset_needed |= vcpu->arch.efer != sregs->efer;\n\tkvm_x86_ops->set_efer(vcpu, sregs->efer);\n\tkvm_set_apic_base(vcpu, sregs->apic_base);\n\n\tmmu_reset_needed |= kvm_read_cr0(vcpu) != sregs->cr0;\n\tkvm_x86_ops->set_cr0(vcpu, sregs->cr0);\n\tvcpu->arch.cr0 = sregs->cr0;\n\n\tmmu_reset_needed |= kvm_read_cr4(vcpu) != sregs->cr4;\n\tkvm_x86_ops->set_cr4(vcpu, sregs->cr4);\n\tif (sregs->cr4 & X86_CR4_OSXSAVE)\n\t\tupdate_cpuid(vcpu);\n\tif (!is_long_mode(vcpu) && is_pae(vcpu)) {\n\t\tload_pdptrs(vcpu, vcpu->arch.walk_mmu, vcpu->arch.cr3);\n\t\tmmu_reset_needed = 1;\n\t}\n\n\tif (mmu_reset_needed)\n\t\tkvm_mmu_reset_context(vcpu);\n\n\tmax_bits = (sizeof sregs->interrupt_bitmap) << 3;\n\tpending_vec = find_first_bit(\n\t\t(const unsigned long *)sregs->interrupt_bitmap, max_bits);\n\tif (pending_vec < max_bits) {\n\t\tkvm_queue_interrupt(vcpu, pending_vec, false);\n\t\tpr_debug(\"Set back pending irq %d\\n\", pending_vec);\n\t\tif (irqchip_in_kernel(vcpu->kvm))\n\t\t\tkvm_pic_clear_isr_ack(vcpu->kvm);\n\t}\n\n\tkvm_set_segment(vcpu, &sregs->cs, VCPU_SREG_CS);\n\tkvm_set_segment(vcpu, &sregs->ds, VCPU_SREG_DS);\n\tkvm_set_segment(vcpu, &sregs->es, VCPU_SREG_ES);\n\tkvm_set_segment(vcpu, &sregs->fs, VCPU_SREG_FS);\n\tkvm_set_segment(vcpu, &sregs->gs, VCPU_SREG_GS);\n\tkvm_set_segment(vcpu, &sregs->ss, VCPU_SREG_SS);\n\n\tkvm_set_segment(vcpu, &sregs->tr, VCPU_SREG_TR);\n\tkvm_set_segment(vcpu, &sregs->ldt, VCPU_SREG_LDTR);\n\n\tupdate_cr8_intercept(vcpu);\n\n\t/* Older userspace won't unhalt the vcpu on reset. */\n\tif (kvm_vcpu_is_bsp(vcpu) && kvm_rip_read(vcpu) == 0xfff0 &&\n\t    sregs->cs.selector == 0xf000 && sregs->cs.base == 0xffff0000 &&\n\t    !is_protmode(vcpu))\n\t\tvcpu->arch.mp_state = KVM_MP_STATE_RUNNABLE;\n\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\n\treturn 0;\n}\n\nint kvm_arch_vcpu_ioctl_set_guest_debug(struct kvm_vcpu *vcpu,\n\t\t\t\t\tstruct kvm_guest_debug *dbg)\n{\n\tunsigned long rflags;\n\tint i, r;\n\n\tif (dbg->control & (KVM_GUESTDBG_INJECT_DB | KVM_GUESTDBG_INJECT_BP)) {\n\t\tr = -EBUSY;\n\t\tif (vcpu->arch.exception.pending)\n\t\t\tgoto out;\n\t\tif (dbg->control & KVM_GUESTDBG_INJECT_DB)\n\t\t\tkvm_queue_exception(vcpu, DB_VECTOR);\n\t\telse\n\t\t\tkvm_queue_exception(vcpu, BP_VECTOR);\n\t}\n\n\t/*\n\t * Read rflags as long as potentially injected trace flags are still\n\t * filtered out.\n\t */\n\trflags = kvm_get_rflags(vcpu);\n\n\tvcpu->guest_debug = dbg->control;\n\tif (!(vcpu->guest_debug & KVM_GUESTDBG_ENABLE))\n\t\tvcpu->guest_debug = 0;\n\n\tif (vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP) {\n\t\tfor (i = 0; i < KVM_NR_DB_REGS; ++i)\n\t\t\tvcpu->arch.eff_db[i] = dbg->arch.debugreg[i];\n\t\tvcpu->arch.switch_db_regs =\n\t\t\t(dbg->arch.debugreg[7] & DR7_BP_EN_MASK);\n\t} else {\n\t\tfor (i = 0; i < KVM_NR_DB_REGS; i++)\n\t\t\tvcpu->arch.eff_db[i] = vcpu->arch.db[i];\n\t\tvcpu->arch.switch_db_regs = (vcpu->arch.dr7 & DR7_BP_EN_MASK);\n\t}\n\n\tif (vcpu->guest_debug & KVM_GUESTDBG_SINGLESTEP)\n\t\tvcpu->arch.singlestep_rip = kvm_rip_read(vcpu) +\n\t\t\tget_segment_base(vcpu, VCPU_SREG_CS);\n\n\t/*\n\t * Trigger an rflags update that will inject or remove the trace\n\t * flags.\n\t */\n\tkvm_set_rflags(vcpu, rflags);\n\n\tkvm_x86_ops->set_guest_debug(vcpu, dbg);\n\n\tr = 0;\n\nout:\n\n\treturn r;\n}\n\n/*\n * Translate a guest virtual address to a guest physical address.\n */\nint kvm_arch_vcpu_ioctl_translate(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_translation *tr)\n{\n\tunsigned long vaddr = tr->linear_address;\n\tgpa_t gpa;\n\tint idx;\n\n\tidx = srcu_read_lock(&vcpu->kvm->srcu);\n\tgpa = kvm_mmu_gva_to_gpa_system(vcpu, vaddr, NULL);\n\tsrcu_read_unlock(&vcpu->kvm->srcu, idx);\n\ttr->physical_address = gpa;\n\ttr->valid = gpa != UNMAPPED_GVA;\n\ttr->writeable = 1;\n\ttr->usermode = 0;\n\n\treturn 0;\n}\n\nint kvm_arch_vcpu_ioctl_get_fpu(struct kvm_vcpu *vcpu, struct kvm_fpu *fpu)\n{\n\tstruct i387_fxsave_struct *fxsave =\n\t\t\t&vcpu->arch.guest_fpu.state->fxsave;\n\n\tmemcpy(fpu->fpr, fxsave->st_space, 128);\n\tfpu->fcw = fxsave->cwd;\n\tfpu->fsw = fxsave->swd;\n\tfpu->ftwx = fxsave->twd;\n\tfpu->last_opcode = fxsave->fop;\n\tfpu->last_ip = fxsave->rip;\n\tfpu->last_dp = fxsave->rdp;\n\tmemcpy(fpu->xmm, fxsave->xmm_space, sizeof fxsave->xmm_space);\n\n\treturn 0;\n}\n\nint kvm_arch_vcpu_ioctl_set_fpu(struct kvm_vcpu *vcpu, struct kvm_fpu *fpu)\n{\n\tstruct i387_fxsave_struct *fxsave =\n\t\t\t&vcpu->arch.guest_fpu.state->fxsave;\n\n\tmemcpy(fxsave->st_space, fpu->fpr, 128);\n\tfxsave->cwd = fpu->fcw;\n\tfxsave->swd = fpu->fsw;\n\tfxsave->twd = fpu->ftwx;\n\tfxsave->fop = fpu->last_opcode;\n\tfxsave->rip = fpu->last_ip;\n\tfxsave->rdp = fpu->last_dp;\n\tmemcpy(fxsave->xmm_space, fpu->xmm, sizeof fxsave->xmm_space);\n\n\treturn 0;\n}\n\nint fx_init(struct kvm_vcpu *vcpu)\n{\n\tint err;\n\n\terr = fpu_alloc(&vcpu->arch.guest_fpu);\n\tif (err)\n\t\treturn err;\n\n\tfpu_finit(&vcpu->arch.guest_fpu);\n\n\t/*\n\t * Ensure guest xcr0 is valid for loading\n\t */\n\tvcpu->arch.xcr0 = XSTATE_FP;\n\n\tvcpu->arch.cr0 |= X86_CR0_ET;\n\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(fx_init);\n\nstatic void fx_free(struct kvm_vcpu *vcpu)\n{\n\tfpu_free(&vcpu->arch.guest_fpu);\n}\n\nvoid kvm_load_guest_fpu(struct kvm_vcpu *vcpu)\n{\n\tif (vcpu->guest_fpu_loaded)\n\t\treturn;\n\n\t/*\n\t * Restore all possible states in the guest,\n\t * and assume host would use all available bits.\n\t * Guest xcr0 would be loaded later.\n\t */\n\tkvm_put_guest_xcr0(vcpu);\n\tvcpu->guest_fpu_loaded = 1;\n\tunlazy_fpu(current);\n\tfpu_restore_checking(&vcpu->arch.guest_fpu);\n\ttrace_kvm_fpu(1);\n}\n\nvoid kvm_put_guest_fpu(struct kvm_vcpu *vcpu)\n{\n\tkvm_put_guest_xcr0(vcpu);\n\n\tif (!vcpu->guest_fpu_loaded)\n\t\treturn;\n\n\tvcpu->guest_fpu_loaded = 0;\n\tfpu_save_init(&vcpu->arch.guest_fpu);\n\t++vcpu->stat.fpu_reload;\n\tkvm_make_request(KVM_REQ_DEACTIVATE_FPU, vcpu);\n\ttrace_kvm_fpu(0);\n}\n\nvoid kvm_arch_vcpu_free(struct kvm_vcpu *vcpu)\n{\n\tif (vcpu->arch.time_page) {\n\t\tkvm_release_page_dirty(vcpu->arch.time_page);\n\t\tvcpu->arch.time_page = NULL;\n\t}\n\n\tfree_cpumask_var(vcpu->arch.wbinvd_dirty_mask);\n\tfx_free(vcpu);\n\tkvm_x86_ops->vcpu_free(vcpu);\n}\n\nstruct kvm_vcpu *kvm_arch_vcpu_create(struct kvm *kvm,\n\t\t\t\t\t\tunsigned int id)\n{\n\tif (check_tsc_unstable() && atomic_read(&kvm->online_vcpus) != 0)\n\t\tprintk_once(KERN_WARNING\n\t\t\"kvm: SMP vm created on host with unstable TSC; \"\n\t\t\"guest TSC will not be reliable\\n\");\n\treturn kvm_x86_ops->vcpu_create(kvm, id);\n}\n\nint kvm_arch_vcpu_setup(struct kvm_vcpu *vcpu)\n{\n\tint r;\n\n\tvcpu->arch.mtrr_state.have_fixed = 1;\n\tvcpu_load(vcpu);\n\tr = kvm_arch_vcpu_reset(vcpu);\n\tif (r == 0)\n\t\tr = kvm_mmu_setup(vcpu);\n\tvcpu_put(vcpu);\n\tif (r < 0)\n\t\tgoto free_vcpu;\n\n\treturn 0;\nfree_vcpu:\n\tkvm_x86_ops->vcpu_free(vcpu);\n\treturn r;\n}\n\nvoid kvm_arch_vcpu_destroy(struct kvm_vcpu *vcpu)\n{\n\tvcpu->arch.apf.msr_val = 0;\n\n\tvcpu_load(vcpu);\n\tkvm_mmu_unload(vcpu);\n\tvcpu_put(vcpu);\n\n\tfx_free(vcpu);\n\tkvm_x86_ops->vcpu_free(vcpu);\n}\n\nint kvm_arch_vcpu_reset(struct kvm_vcpu *vcpu)\n{\n\tvcpu->arch.nmi_pending = false;\n\tvcpu->arch.nmi_injected = false;\n\n\tvcpu->arch.switch_db_regs = 0;\n\tmemset(vcpu->arch.db, 0, sizeof(vcpu->arch.db));\n\tvcpu->arch.dr6 = DR6_FIXED_1;\n\tvcpu->arch.dr7 = DR7_FIXED_1;\n\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\tvcpu->arch.apf.msr_val = 0;\n\n\tkvm_clear_async_pf_completion_queue(vcpu);\n\tkvm_async_pf_hash_reset(vcpu);\n\tvcpu->arch.apf.halted = false;\n\n\treturn kvm_x86_ops->vcpu_reset(vcpu);\n}\n\nint kvm_arch_hardware_enable(void *garbage)\n{\n\tstruct kvm *kvm;\n\tstruct kvm_vcpu *vcpu;\n\tint i;\n\n\tkvm_shared_msr_cpu_online();\n\tlist_for_each_entry(kvm, &vm_list, vm_list)\n\t\tkvm_for_each_vcpu(i, vcpu, kvm)\n\t\t\tif (vcpu->cpu == smp_processor_id())\n\t\t\t\tkvm_make_request(KVM_REQ_CLOCK_UPDATE, vcpu);\n\treturn kvm_x86_ops->hardware_enable(garbage);\n}\n\nvoid kvm_arch_hardware_disable(void *garbage)\n{\n\tkvm_x86_ops->hardware_disable(garbage);\n\tdrop_user_return_notifiers(garbage);\n}\n\nint kvm_arch_hardware_setup(void)\n{\n\treturn kvm_x86_ops->hardware_setup();\n}\n\nvoid kvm_arch_hardware_unsetup(void)\n{\n\tkvm_x86_ops->hardware_unsetup();\n}\n\nvoid kvm_arch_check_processor_compat(void *rtn)\n{\n\tkvm_x86_ops->check_processor_compatibility(rtn);\n}\n\nint kvm_arch_vcpu_init(struct kvm_vcpu *vcpu)\n{\n\tstruct page *page;\n\tstruct kvm *kvm;\n\tint r;\n\n\tBUG_ON(vcpu->kvm == NULL);\n\tkvm = vcpu->kvm;\n\n\tvcpu->arch.emulate_ctxt.ops = &emulate_ops;\n\tvcpu->arch.walk_mmu = &vcpu->arch.mmu;\n\tvcpu->arch.mmu.root_hpa = INVALID_PAGE;\n\tvcpu->arch.mmu.translate_gpa = translate_gpa;\n\tvcpu->arch.nested_mmu.translate_gpa = translate_nested_gpa;\n\tif (!irqchip_in_kernel(kvm) || kvm_vcpu_is_bsp(vcpu))\n\t\tvcpu->arch.mp_state = KVM_MP_STATE_RUNNABLE;\n\telse\n\t\tvcpu->arch.mp_state = KVM_MP_STATE_UNINITIALIZED;\n\n\tpage = alloc_page(GFP_KERNEL | __GFP_ZERO);\n\tif (!page) {\n\t\tr = -ENOMEM;\n\t\tgoto fail;\n\t}\n\tvcpu->arch.pio_data = page_address(page);\n\n\tif (!kvm->arch.virtual_tsc_khz)\n\t\tkvm_arch_set_tsc_khz(kvm, max_tsc_khz);\n\n\tr = kvm_mmu_create(vcpu);\n\tif (r < 0)\n\t\tgoto fail_free_pio_data;\n\n\tif (irqchip_in_kernel(kvm)) {\n\t\tr = kvm_create_lapic(vcpu);\n\t\tif (r < 0)\n\t\t\tgoto fail_mmu_destroy;\n\t}\n\n\tvcpu->arch.mce_banks = kzalloc(KVM_MAX_MCE_BANKS * sizeof(u64) * 4,\n\t\t\t\t       GFP_KERNEL);\n\tif (!vcpu->arch.mce_banks) {\n\t\tr = -ENOMEM;\n\t\tgoto fail_free_lapic;\n\t}\n\tvcpu->arch.mcg_cap = KVM_MAX_MCE_BANKS;\n\n\tif (!zalloc_cpumask_var(&vcpu->arch.wbinvd_dirty_mask, GFP_KERNEL))\n\t\tgoto fail_free_mce_banks;\n\n\tkvm_async_pf_hash_reset(vcpu);\n\n\treturn 0;\nfail_free_mce_banks:\n\tkfree(vcpu->arch.mce_banks);\nfail_free_lapic:\n\tkvm_free_lapic(vcpu);\nfail_mmu_destroy:\n\tkvm_mmu_destroy(vcpu);\nfail_free_pio_data:\n\tfree_page((unsigned long)vcpu->arch.pio_data);\nfail:\n\treturn r;\n}\n\nvoid kvm_arch_vcpu_uninit(struct kvm_vcpu *vcpu)\n{\n\tint idx;\n\n\tkfree(vcpu->arch.mce_banks);\n\tkvm_free_lapic(vcpu);\n\tidx = srcu_read_lock(&vcpu->kvm->srcu);\n\tkvm_mmu_destroy(vcpu);\n\tsrcu_read_unlock(&vcpu->kvm->srcu, idx);\n\tfree_page((unsigned long)vcpu->arch.pio_data);\n}\n\nint kvm_arch_init_vm(struct kvm *kvm)\n{\n\tINIT_LIST_HEAD(&kvm->arch.active_mmu_pages);\n\tINIT_LIST_HEAD(&kvm->arch.assigned_dev_head);\n\n\t/* Reserve bit 0 of irq_sources_bitmap for userspace irq source */\n\tset_bit(KVM_USERSPACE_IRQ_SOURCE_ID, &kvm->arch.irq_sources_bitmap);\n\n\tspin_lock_init(&kvm->arch.tsc_write_lock);\n\n\treturn 0;\n}\n\nstatic void kvm_unload_vcpu_mmu(struct kvm_vcpu *vcpu)\n{\n\tvcpu_load(vcpu);\n\tkvm_mmu_unload(vcpu);\n\tvcpu_put(vcpu);\n}\n\nstatic void kvm_free_vcpus(struct kvm *kvm)\n{\n\tunsigned int i;\n\tstruct kvm_vcpu *vcpu;\n\n\t/*\n\t * Unpin any mmu pages first.\n\t */\n\tkvm_for_each_vcpu(i, vcpu, kvm) {\n\t\tkvm_clear_async_pf_completion_queue(vcpu);\n\t\tkvm_unload_vcpu_mmu(vcpu);\n\t}\n\tkvm_for_each_vcpu(i, vcpu, kvm)\n\t\tkvm_arch_vcpu_free(vcpu);\n\n\tmutex_lock(&kvm->lock);\n\tfor (i = 0; i < atomic_read(&kvm->online_vcpus); i++)\n\t\tkvm->vcpus[i] = NULL;\n\n\tatomic_set(&kvm->online_vcpus, 0);\n\tmutex_unlock(&kvm->lock);\n}\n\nvoid kvm_arch_sync_events(struct kvm *kvm)\n{\n\tkvm_free_all_assigned_devices(kvm);\n\tkvm_free_pit(kvm);\n}\n\nvoid kvm_arch_destroy_vm(struct kvm *kvm)\n{\n\tkvm_iommu_unmap_guest(kvm);\n\tkfree(kvm->arch.vpic);\n\tkfree(kvm->arch.vioapic);\n\tkvm_free_vcpus(kvm);\n\tif (kvm->arch.apic_access_page)\n\t\tput_page(kvm->arch.apic_access_page);\n\tif (kvm->arch.ept_identity_pagetable)\n\t\tput_page(kvm->arch.ept_identity_pagetable);\n}\n\nint kvm_arch_prepare_memory_region(struct kvm *kvm,\n\t\t\t\tstruct kvm_memory_slot *memslot,\n\t\t\t\tstruct kvm_memory_slot old,\n\t\t\t\tstruct kvm_userspace_memory_region *mem,\n\t\t\t\tint user_alloc)\n{\n\tint npages = memslot->npages;\n\tint map_flags = MAP_PRIVATE | MAP_ANONYMOUS;\n\n\t/* Prevent internal slot pages from being moved by fork()/COW. */\n\tif (memslot->id >= KVM_MEMORY_SLOTS)\n\t\tmap_flags = MAP_SHARED | MAP_ANONYMOUS;\n\n\t/*To keep backward compatibility with older userspace,\n\t *x86 needs to hanlde !user_alloc case.\n\t */\n\tif (!user_alloc) {\n\t\tif (npages && !old.rmap) {\n\t\t\tunsigned long userspace_addr;\n\n\t\t\tdown_write(&current->mm->mmap_sem);\n\t\t\tuserspace_addr = do_mmap(NULL, 0,\n\t\t\t\t\t\t npages * PAGE_SIZE,\n\t\t\t\t\t\t PROT_READ | PROT_WRITE,\n\t\t\t\t\t\t map_flags,\n\t\t\t\t\t\t 0);\n\t\t\tup_write(&current->mm->mmap_sem);\n\n\t\t\tif (IS_ERR((void *)userspace_addr))\n\t\t\t\treturn PTR_ERR((void *)userspace_addr);\n\n\t\t\tmemslot->userspace_addr = userspace_addr;\n\t\t}\n\t}\n\n\n\treturn 0;\n}\n\nvoid kvm_arch_commit_memory_region(struct kvm *kvm,\n\t\t\t\tstruct kvm_userspace_memory_region *mem,\n\t\t\t\tstruct kvm_memory_slot old,\n\t\t\t\tint user_alloc)\n{\n\n\tint npages = mem->memory_size >> PAGE_SHIFT;\n\n\tif (!user_alloc && !old.user_alloc && old.rmap && !npages) {\n\t\tint ret;\n\n\t\tdown_write(&current->mm->mmap_sem);\n\t\tret = do_munmap(current->mm, old.userspace_addr,\n\t\t\t\told.npages * PAGE_SIZE);\n\t\tup_write(&current->mm->mmap_sem);\n\t\tif (ret < 0)\n\t\t\tprintk(KERN_WARNING\n\t\t\t       \"kvm_vm_ioctl_set_memory_region: \"\n\t\t\t       \"failed to munmap memory\\n\");\n\t}\n\n\tspin_lock(&kvm->mmu_lock);\n\tif (!kvm->arch.n_requested_mmu_pages) {\n\t\tunsigned int nr_mmu_pages = kvm_mmu_calculate_mmu_pages(kvm);\n\t\tkvm_mmu_change_mmu_pages(kvm, nr_mmu_pages);\n\t}\n\n\tkvm_mmu_slot_remove_write_access(kvm, mem->slot);\n\tspin_unlock(&kvm->mmu_lock);\n}\n\nvoid kvm_arch_flush_shadow(struct kvm *kvm)\n{\n\tkvm_mmu_zap_all(kvm);\n\tkvm_reload_remote_mmus(kvm);\n}\n\nint kvm_arch_vcpu_runnable(struct kvm_vcpu *vcpu)\n{\n\treturn (vcpu->arch.mp_state == KVM_MP_STATE_RUNNABLE &&\n\t\t!vcpu->arch.apf.halted)\n\t\t|| !list_empty_careful(&vcpu->async_pf.done)\n\t\t|| vcpu->arch.mp_state == KVM_MP_STATE_SIPI_RECEIVED\n\t\t|| vcpu->arch.nmi_pending ||\n\t\t(kvm_arch_interrupt_allowed(vcpu) &&\n\t\t kvm_cpu_has_interrupt(vcpu));\n}\n\nvoid kvm_vcpu_kick(struct kvm_vcpu *vcpu)\n{\n\tint me;\n\tint cpu = vcpu->cpu;\n\n\tif (waitqueue_active(&vcpu->wq)) {\n\t\twake_up_interruptible(&vcpu->wq);\n\t\t++vcpu->stat.halt_wakeup;\n\t}\n\n\tme = get_cpu();\n\tif (cpu != me && (unsigned)cpu < nr_cpu_ids && cpu_online(cpu))\n\t\tif (atomic_xchg(&vcpu->guest_mode, 0))\n\t\t\tsmp_send_reschedule(cpu);\n\tput_cpu();\n}\n\nint kvm_arch_interrupt_allowed(struct kvm_vcpu *vcpu)\n{\n\treturn kvm_x86_ops->interrupt_allowed(vcpu);\n}\n\nbool kvm_is_linear_rip(struct kvm_vcpu *vcpu, unsigned long linear_rip)\n{\n\tunsigned long current_rip = kvm_rip_read(vcpu) +\n\t\tget_segment_base(vcpu, VCPU_SREG_CS);\n\n\treturn current_rip == linear_rip;\n}\nEXPORT_SYMBOL_GPL(kvm_is_linear_rip);\n\nunsigned long kvm_get_rflags(struct kvm_vcpu *vcpu)\n{\n\tunsigned long rflags;\n\n\trflags = kvm_x86_ops->get_rflags(vcpu);\n\tif (vcpu->guest_debug & KVM_GUESTDBG_SINGLESTEP)\n\t\trflags &= ~X86_EFLAGS_TF;\n\treturn rflags;\n}\nEXPORT_SYMBOL_GPL(kvm_get_rflags);\n\nvoid kvm_set_rflags(struct kvm_vcpu *vcpu, unsigned long rflags)\n{\n\tif (vcpu->guest_debug & KVM_GUESTDBG_SINGLESTEP &&\n\t    kvm_is_linear_rip(vcpu, vcpu->arch.singlestep_rip))\n\t\trflags |= X86_EFLAGS_TF;\n\tkvm_x86_ops->set_rflags(vcpu, rflags);\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n}\nEXPORT_SYMBOL_GPL(kvm_set_rflags);\n\nvoid kvm_arch_async_page_ready(struct kvm_vcpu *vcpu, struct kvm_async_pf *work)\n{\n\tint r;\n\n\tif (!vcpu->arch.mmu.direct_map || !work->arch.direct_map ||\n\t      is_error_page(work->page))\n\t\treturn;\n\n\tr = kvm_mmu_reload(vcpu);\n\tif (unlikely(r))\n\t\treturn;\n\n\tvcpu->arch.mmu.page_fault(vcpu, work->gva, 0, true);\n}\n\nstatic inline u32 kvm_async_pf_hash_fn(gfn_t gfn)\n{\n\treturn hash_32(gfn & 0xffffffff, order_base_2(ASYNC_PF_PER_VCPU));\n}\n\nstatic inline u32 kvm_async_pf_next_probe(u32 key)\n{\n\treturn (key + 1) & (roundup_pow_of_two(ASYNC_PF_PER_VCPU) - 1);\n}\n\nstatic void kvm_add_async_pf_gfn(struct kvm_vcpu *vcpu, gfn_t gfn)\n{\n\tu32 key = kvm_async_pf_hash_fn(gfn);\n\n\twhile (vcpu->arch.apf.gfns[key] != ~0)\n\t\tkey = kvm_async_pf_next_probe(key);\n\n\tvcpu->arch.apf.gfns[key] = gfn;\n}\n\nstatic u32 kvm_async_pf_gfn_slot(struct kvm_vcpu *vcpu, gfn_t gfn)\n{\n\tint i;\n\tu32 key = kvm_async_pf_hash_fn(gfn);\n\n\tfor (i = 0; i < roundup_pow_of_two(ASYNC_PF_PER_VCPU) &&\n\t\t     (vcpu->arch.apf.gfns[key] != gfn &&\n\t\t      vcpu->arch.apf.gfns[key] != ~0); i++)\n\t\tkey = kvm_async_pf_next_probe(key);\n\n\treturn key;\n}\n\nbool kvm_find_async_pf_gfn(struct kvm_vcpu *vcpu, gfn_t gfn)\n{\n\treturn vcpu->arch.apf.gfns[kvm_async_pf_gfn_slot(vcpu, gfn)] == gfn;\n}\n\nstatic void kvm_del_async_pf_gfn(struct kvm_vcpu *vcpu, gfn_t gfn)\n{\n\tu32 i, j, k;\n\n\ti = j = kvm_async_pf_gfn_slot(vcpu, gfn);\n\twhile (true) {\n\t\tvcpu->arch.apf.gfns[i] = ~0;\n\t\tdo {\n\t\t\tj = kvm_async_pf_next_probe(j);\n\t\t\tif (vcpu->arch.apf.gfns[j] == ~0)\n\t\t\t\treturn;\n\t\t\tk = kvm_async_pf_hash_fn(vcpu->arch.apf.gfns[j]);\n\t\t\t/*\n\t\t\t * k lies cyclically in ]i,j]\n\t\t\t * |    i.k.j |\n\t\t\t * |....j i.k.| or  |.k..j i...|\n\t\t\t */\n\t\t} while ((i <= j) ? (i < k && k <= j) : (i < k || k <= j));\n\t\tvcpu->arch.apf.gfns[i] = vcpu->arch.apf.gfns[j];\n\t\ti = j;\n\t}\n}\n\nstatic int apf_put_user(struct kvm_vcpu *vcpu, u32 val)\n{\n\n\treturn kvm_write_guest_cached(vcpu->kvm, &vcpu->arch.apf.data, &val,\n\t\t\t\t      sizeof(val));\n}\n\nvoid kvm_arch_async_page_not_present(struct kvm_vcpu *vcpu,\n\t\t\t\t     struct kvm_async_pf *work)\n{\n\tstruct x86_exception fault;\n\n\ttrace_kvm_async_pf_not_present(work->arch.token, work->gva);\n\tkvm_add_async_pf_gfn(vcpu, work->arch.gfn);\n\n\tif (!(vcpu->arch.apf.msr_val & KVM_ASYNC_PF_ENABLED) ||\n\t    (vcpu->arch.apf.send_user_only &&\n\t     kvm_x86_ops->get_cpl(vcpu) == 0))\n\t\tkvm_make_request(KVM_REQ_APF_HALT, vcpu);\n\telse if (!apf_put_user(vcpu, KVM_PV_REASON_PAGE_NOT_PRESENT)) {\n\t\tfault.vector = PF_VECTOR;\n\t\tfault.error_code_valid = true;\n\t\tfault.error_code = 0;\n\t\tfault.nested_page_fault = false;\n\t\tfault.address = work->arch.token;\n\t\tkvm_inject_page_fault(vcpu, &fault);\n\t}\n}\n\nvoid kvm_arch_async_page_present(struct kvm_vcpu *vcpu,\n\t\t\t\t struct kvm_async_pf *work)\n{\n\tstruct x86_exception fault;\n\n\ttrace_kvm_async_pf_ready(work->arch.token, work->gva);\n\tif (is_error_page(work->page))\n\t\twork->arch.token = ~0; /* broadcast wakeup */\n\telse\n\t\tkvm_del_async_pf_gfn(vcpu, work->arch.gfn);\n\n\tif ((vcpu->arch.apf.msr_val & KVM_ASYNC_PF_ENABLED) &&\n\t    !apf_put_user(vcpu, KVM_PV_REASON_PAGE_READY)) {\n\t\tfault.vector = PF_VECTOR;\n\t\tfault.error_code_valid = true;\n\t\tfault.error_code = 0;\n\t\tfault.nested_page_fault = false;\n\t\tfault.address = work->arch.token;\n\t\tkvm_inject_page_fault(vcpu, &fault);\n\t}\n\tvcpu->arch.apf.halted = false;\n}\n\nbool kvm_arch_can_inject_async_page_present(struct kvm_vcpu *vcpu)\n{\n\tif (!(vcpu->arch.apf.msr_val & KVM_ASYNC_PF_ENABLED))\n\t\treturn true;\n\telse\n\t\treturn !kvm_event_needs_reinjection(vcpu) &&\n\t\t\tkvm_x86_ops->interrupt_allowed(vcpu);\n}\n\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_exit);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_inj_virq);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_page_fault);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_msr);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_cr);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_nested_vmrun);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_nested_vmexit);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_nested_vmexit_inject);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_nested_intr_vmexit);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_invlpga);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_skinit);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_nested_intercepts);\n"], "fixing_code": ["/*\n * Kernel-based Virtual Machine driver for Linux\n *\n * derived from drivers/kvm/kvm_main.c\n *\n * Copyright (C) 2006 Qumranet, Inc.\n * Copyright (C) 2008 Qumranet, Inc.\n * Copyright IBM Corporation, 2008\n * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n *\n * Authors:\n *   Avi Kivity   <avi@qumranet.com>\n *   Yaniv Kamay  <yaniv@qumranet.com>\n *   Amit Shah    <amit.shah@qumranet.com>\n *   Ben-Ami Yassour <benami@il.ibm.com>\n *\n * This work is licensed under the terms of the GNU GPL, version 2.  See\n * the COPYING file in the top-level directory.\n *\n */\n\n#include <linux/kvm_host.h>\n#include \"irq.h\"\n#include \"mmu.h\"\n#include \"i8254.h\"\n#include \"tss.h\"\n#include \"kvm_cache_regs.h\"\n#include \"x86.h\"\n\n#include <linux/clocksource.h>\n#include <linux/interrupt.h>\n#include <linux/kvm.h>\n#include <linux/fs.h>\n#include <linux/vmalloc.h>\n#include <linux/module.h>\n#include <linux/mman.h>\n#include <linux/highmem.h>\n#include <linux/iommu.h>\n#include <linux/intel-iommu.h>\n#include <linux/cpufreq.h>\n#include <linux/user-return-notifier.h>\n#include <linux/srcu.h>\n#include <linux/slab.h>\n#include <linux/perf_event.h>\n#include <linux/uaccess.h>\n#include <linux/hash.h>\n#include <trace/events/kvm.h>\n\n#define CREATE_TRACE_POINTS\n#include \"trace.h\"\n\n#include <asm/debugreg.h>\n#include <asm/msr.h>\n#include <asm/desc.h>\n#include <asm/mtrr.h>\n#include <asm/mce.h>\n#include <asm/i387.h>\n#include <asm/xcr.h>\n#include <asm/pvclock.h>\n#include <asm/div64.h>\n\n#define MAX_IO_MSRS 256\n#define CR0_RESERVED_BITS\t\t\t\t\t\t\\\n\t(~(unsigned long)(X86_CR0_PE | X86_CR0_MP | X86_CR0_EM | X86_CR0_TS \\\n\t\t\t  | X86_CR0_ET | X86_CR0_NE | X86_CR0_WP | X86_CR0_AM \\\n\t\t\t  | X86_CR0_NW | X86_CR0_CD | X86_CR0_PG))\n#define CR4_RESERVED_BITS\t\t\t\t\t\t\\\n\t(~(unsigned long)(X86_CR4_VME | X86_CR4_PVI | X86_CR4_TSD | X86_CR4_DE\\\n\t\t\t  | X86_CR4_PSE | X86_CR4_PAE | X86_CR4_MCE\t\\\n\t\t\t  | X86_CR4_PGE | X86_CR4_PCE | X86_CR4_OSFXSR\t\\\n\t\t\t  | X86_CR4_OSXSAVE \\\n\t\t\t  | X86_CR4_OSXMMEXCPT | X86_CR4_VMXE))\n\n#define CR8_RESERVED_BITS (~(unsigned long)X86_CR8_TPR)\n\n#define KVM_MAX_MCE_BANKS 32\n#define KVM_MCE_CAP_SUPPORTED (MCG_CTL_P | MCG_SER_P)\n\n/* EFER defaults:\n * - enable syscall per default because its emulated by KVM\n * - enable LME and LMA per default on 64 bit KVM\n */\n#ifdef CONFIG_X86_64\nstatic u64 __read_mostly efer_reserved_bits = 0xfffffffffffffafeULL;\n#else\nstatic u64 __read_mostly efer_reserved_bits = 0xfffffffffffffffeULL;\n#endif\n\n#define VM_STAT(x) offsetof(struct kvm, stat.x), KVM_STAT_VM\n#define VCPU_STAT(x) offsetof(struct kvm_vcpu, stat.x), KVM_STAT_VCPU\n\nstatic void update_cr8_intercept(struct kvm_vcpu *vcpu);\nstatic int kvm_dev_ioctl_get_supported_cpuid(struct kvm_cpuid2 *cpuid,\n\t\t\t\t    struct kvm_cpuid_entry2 __user *entries);\n\nstruct kvm_x86_ops *kvm_x86_ops;\nEXPORT_SYMBOL_GPL(kvm_x86_ops);\n\nint ignore_msrs = 0;\nmodule_param_named(ignore_msrs, ignore_msrs, bool, S_IRUGO | S_IWUSR);\n\n#define KVM_NR_SHARED_MSRS 16\n\nstruct kvm_shared_msrs_global {\n\tint nr;\n\tu32 msrs[KVM_NR_SHARED_MSRS];\n};\n\nstruct kvm_shared_msrs {\n\tstruct user_return_notifier urn;\n\tbool registered;\n\tstruct kvm_shared_msr_values {\n\t\tu64 host;\n\t\tu64 curr;\n\t} values[KVM_NR_SHARED_MSRS];\n};\n\nstatic struct kvm_shared_msrs_global __read_mostly shared_msrs_global;\nstatic DEFINE_PER_CPU(struct kvm_shared_msrs, shared_msrs);\n\nstruct kvm_stats_debugfs_item debugfs_entries[] = {\n\t{ \"pf_fixed\", VCPU_STAT(pf_fixed) },\n\t{ \"pf_guest\", VCPU_STAT(pf_guest) },\n\t{ \"tlb_flush\", VCPU_STAT(tlb_flush) },\n\t{ \"invlpg\", VCPU_STAT(invlpg) },\n\t{ \"exits\", VCPU_STAT(exits) },\n\t{ \"io_exits\", VCPU_STAT(io_exits) },\n\t{ \"mmio_exits\", VCPU_STAT(mmio_exits) },\n\t{ \"signal_exits\", VCPU_STAT(signal_exits) },\n\t{ \"irq_window\", VCPU_STAT(irq_window_exits) },\n\t{ \"nmi_window\", VCPU_STAT(nmi_window_exits) },\n\t{ \"halt_exits\", VCPU_STAT(halt_exits) },\n\t{ \"halt_wakeup\", VCPU_STAT(halt_wakeup) },\n\t{ \"hypercalls\", VCPU_STAT(hypercalls) },\n\t{ \"request_irq\", VCPU_STAT(request_irq_exits) },\n\t{ \"irq_exits\", VCPU_STAT(irq_exits) },\n\t{ \"host_state_reload\", VCPU_STAT(host_state_reload) },\n\t{ \"efer_reload\", VCPU_STAT(efer_reload) },\n\t{ \"fpu_reload\", VCPU_STAT(fpu_reload) },\n\t{ \"insn_emulation\", VCPU_STAT(insn_emulation) },\n\t{ \"insn_emulation_fail\", VCPU_STAT(insn_emulation_fail) },\n\t{ \"irq_injections\", VCPU_STAT(irq_injections) },\n\t{ \"nmi_injections\", VCPU_STAT(nmi_injections) },\n\t{ \"mmu_shadow_zapped\", VM_STAT(mmu_shadow_zapped) },\n\t{ \"mmu_pte_write\", VM_STAT(mmu_pte_write) },\n\t{ \"mmu_pte_updated\", VM_STAT(mmu_pte_updated) },\n\t{ \"mmu_pde_zapped\", VM_STAT(mmu_pde_zapped) },\n\t{ \"mmu_flooded\", VM_STAT(mmu_flooded) },\n\t{ \"mmu_recycled\", VM_STAT(mmu_recycled) },\n\t{ \"mmu_cache_miss\", VM_STAT(mmu_cache_miss) },\n\t{ \"mmu_unsync\", VM_STAT(mmu_unsync) },\n\t{ \"remote_tlb_flush\", VM_STAT(remote_tlb_flush) },\n\t{ \"largepages\", VM_STAT(lpages) },\n\t{ NULL }\n};\n\nu64 __read_mostly host_xcr0;\n\nstatic inline void kvm_async_pf_hash_reset(struct kvm_vcpu *vcpu)\n{\n\tint i;\n\tfor (i = 0; i < roundup_pow_of_two(ASYNC_PF_PER_VCPU); i++)\n\t\tvcpu->arch.apf.gfns[i] = ~0;\n}\n\nstatic void kvm_on_user_return(struct user_return_notifier *urn)\n{\n\tunsigned slot;\n\tstruct kvm_shared_msrs *locals\n\t\t= container_of(urn, struct kvm_shared_msrs, urn);\n\tstruct kvm_shared_msr_values *values;\n\n\tfor (slot = 0; slot < shared_msrs_global.nr; ++slot) {\n\t\tvalues = &locals->values[slot];\n\t\tif (values->host != values->curr) {\n\t\t\twrmsrl(shared_msrs_global.msrs[slot], values->host);\n\t\t\tvalues->curr = values->host;\n\t\t}\n\t}\n\tlocals->registered = false;\n\tuser_return_notifier_unregister(urn);\n}\n\nstatic void shared_msr_update(unsigned slot, u32 msr)\n{\n\tstruct kvm_shared_msrs *smsr;\n\tu64 value;\n\n\tsmsr = &__get_cpu_var(shared_msrs);\n\t/* only read, and nobody should modify it at this time,\n\t * so don't need lock */\n\tif (slot >= shared_msrs_global.nr) {\n\t\tprintk(KERN_ERR \"kvm: invalid MSR slot!\");\n\t\treturn;\n\t}\n\trdmsrl_safe(msr, &value);\n\tsmsr->values[slot].host = value;\n\tsmsr->values[slot].curr = value;\n}\n\nvoid kvm_define_shared_msr(unsigned slot, u32 msr)\n{\n\tif (slot >= shared_msrs_global.nr)\n\t\tshared_msrs_global.nr = slot + 1;\n\tshared_msrs_global.msrs[slot] = msr;\n\t/* we need ensured the shared_msr_global have been updated */\n\tsmp_wmb();\n}\nEXPORT_SYMBOL_GPL(kvm_define_shared_msr);\n\nstatic void kvm_shared_msr_cpu_online(void)\n{\n\tunsigned i;\n\n\tfor (i = 0; i < shared_msrs_global.nr; ++i)\n\t\tshared_msr_update(i, shared_msrs_global.msrs[i]);\n}\n\nvoid kvm_set_shared_msr(unsigned slot, u64 value, u64 mask)\n{\n\tstruct kvm_shared_msrs *smsr = &__get_cpu_var(shared_msrs);\n\n\tif (((value ^ smsr->values[slot].curr) & mask) == 0)\n\t\treturn;\n\tsmsr->values[slot].curr = value;\n\twrmsrl(shared_msrs_global.msrs[slot], value);\n\tif (!smsr->registered) {\n\t\tsmsr->urn.on_user_return = kvm_on_user_return;\n\t\tuser_return_notifier_register(&smsr->urn);\n\t\tsmsr->registered = true;\n\t}\n}\nEXPORT_SYMBOL_GPL(kvm_set_shared_msr);\n\nstatic void drop_user_return_notifiers(void *ignore)\n{\n\tstruct kvm_shared_msrs *smsr = &__get_cpu_var(shared_msrs);\n\n\tif (smsr->registered)\n\t\tkvm_on_user_return(&smsr->urn);\n}\n\nu64 kvm_get_apic_base(struct kvm_vcpu *vcpu)\n{\n\tif (irqchip_in_kernel(vcpu->kvm))\n\t\treturn vcpu->arch.apic_base;\n\telse\n\t\treturn vcpu->arch.apic_base;\n}\nEXPORT_SYMBOL_GPL(kvm_get_apic_base);\n\nvoid kvm_set_apic_base(struct kvm_vcpu *vcpu, u64 data)\n{\n\t/* TODO: reserve bits check */\n\tif (irqchip_in_kernel(vcpu->kvm))\n\t\tkvm_lapic_set_base(vcpu, data);\n\telse\n\t\tvcpu->arch.apic_base = data;\n}\nEXPORT_SYMBOL_GPL(kvm_set_apic_base);\n\n#define EXCPT_BENIGN\t\t0\n#define EXCPT_CONTRIBUTORY\t1\n#define EXCPT_PF\t\t2\n\nstatic int exception_class(int vector)\n{\n\tswitch (vector) {\n\tcase PF_VECTOR:\n\t\treturn EXCPT_PF;\n\tcase DE_VECTOR:\n\tcase TS_VECTOR:\n\tcase NP_VECTOR:\n\tcase SS_VECTOR:\n\tcase GP_VECTOR:\n\t\treturn EXCPT_CONTRIBUTORY;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn EXCPT_BENIGN;\n}\n\nstatic void kvm_multiple_exception(struct kvm_vcpu *vcpu,\n\t\tunsigned nr, bool has_error, u32 error_code,\n\t\tbool reinject)\n{\n\tu32 prev_nr;\n\tint class1, class2;\n\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\n\tif (!vcpu->arch.exception.pending) {\n\tqueue:\n\t\tvcpu->arch.exception.pending = true;\n\t\tvcpu->arch.exception.has_error_code = has_error;\n\t\tvcpu->arch.exception.nr = nr;\n\t\tvcpu->arch.exception.error_code = error_code;\n\t\tvcpu->arch.exception.reinject = reinject;\n\t\treturn;\n\t}\n\n\t/* to check exception */\n\tprev_nr = vcpu->arch.exception.nr;\n\tif (prev_nr == DF_VECTOR) {\n\t\t/* triple fault -> shutdown */\n\t\tkvm_make_request(KVM_REQ_TRIPLE_FAULT, vcpu);\n\t\treturn;\n\t}\n\tclass1 = exception_class(prev_nr);\n\tclass2 = exception_class(nr);\n\tif ((class1 == EXCPT_CONTRIBUTORY && class2 == EXCPT_CONTRIBUTORY)\n\t\t|| (class1 == EXCPT_PF && class2 != EXCPT_BENIGN)) {\n\t\t/* generate double fault per SDM Table 5-5 */\n\t\tvcpu->arch.exception.pending = true;\n\t\tvcpu->arch.exception.has_error_code = true;\n\t\tvcpu->arch.exception.nr = DF_VECTOR;\n\t\tvcpu->arch.exception.error_code = 0;\n\t} else\n\t\t/* replace previous exception with a new one in a hope\n\t\t   that instruction re-execution will regenerate lost\n\t\t   exception */\n\t\tgoto queue;\n}\n\nvoid kvm_queue_exception(struct kvm_vcpu *vcpu, unsigned nr)\n{\n\tkvm_multiple_exception(vcpu, nr, false, 0, false);\n}\nEXPORT_SYMBOL_GPL(kvm_queue_exception);\n\nvoid kvm_requeue_exception(struct kvm_vcpu *vcpu, unsigned nr)\n{\n\tkvm_multiple_exception(vcpu, nr, false, 0, true);\n}\nEXPORT_SYMBOL_GPL(kvm_requeue_exception);\n\nvoid kvm_inject_page_fault(struct kvm_vcpu *vcpu, struct x86_exception *fault)\n{\n\t++vcpu->stat.pf_guest;\n\tvcpu->arch.cr2 = fault->address;\n\tkvm_queue_exception_e(vcpu, PF_VECTOR, fault->error_code);\n}\n\nvoid kvm_propagate_fault(struct kvm_vcpu *vcpu, struct x86_exception *fault)\n{\n\tif (mmu_is_nested(vcpu) && !fault->nested_page_fault)\n\t\tvcpu->arch.nested_mmu.inject_page_fault(vcpu, fault);\n\telse\n\t\tvcpu->arch.mmu.inject_page_fault(vcpu, fault);\n}\n\nvoid kvm_inject_nmi(struct kvm_vcpu *vcpu)\n{\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\tvcpu->arch.nmi_pending = 1;\n}\nEXPORT_SYMBOL_GPL(kvm_inject_nmi);\n\nvoid kvm_queue_exception_e(struct kvm_vcpu *vcpu, unsigned nr, u32 error_code)\n{\n\tkvm_multiple_exception(vcpu, nr, true, error_code, false);\n}\nEXPORT_SYMBOL_GPL(kvm_queue_exception_e);\n\nvoid kvm_requeue_exception_e(struct kvm_vcpu *vcpu, unsigned nr, u32 error_code)\n{\n\tkvm_multiple_exception(vcpu, nr, true, error_code, true);\n}\nEXPORT_SYMBOL_GPL(kvm_requeue_exception_e);\n\n/*\n * Checks if cpl <= required_cpl; if true, return true.  Otherwise queue\n * a #GP and return false.\n */\nbool kvm_require_cpl(struct kvm_vcpu *vcpu, int required_cpl)\n{\n\tif (kvm_x86_ops->get_cpl(vcpu) <= required_cpl)\n\t\treturn true;\n\tkvm_queue_exception_e(vcpu, GP_VECTOR, 0);\n\treturn false;\n}\nEXPORT_SYMBOL_GPL(kvm_require_cpl);\n\n/*\n * This function will be used to read from the physical memory of the currently\n * running guest. The difference to kvm_read_guest_page is that this function\n * can read from guest physical or from the guest's guest physical memory.\n */\nint kvm_read_guest_page_mmu(struct kvm_vcpu *vcpu, struct kvm_mmu *mmu,\n\t\t\t    gfn_t ngfn, void *data, int offset, int len,\n\t\t\t    u32 access)\n{\n\tgfn_t real_gfn;\n\tgpa_t ngpa;\n\n\tngpa     = gfn_to_gpa(ngfn);\n\treal_gfn = mmu->translate_gpa(vcpu, ngpa, access);\n\tif (real_gfn == UNMAPPED_GVA)\n\t\treturn -EFAULT;\n\n\treal_gfn = gpa_to_gfn(real_gfn);\n\n\treturn kvm_read_guest_page(vcpu->kvm, real_gfn, data, offset, len);\n}\nEXPORT_SYMBOL_GPL(kvm_read_guest_page_mmu);\n\nint kvm_read_nested_guest_page(struct kvm_vcpu *vcpu, gfn_t gfn,\n\t\t\t       void *data, int offset, int len, u32 access)\n{\n\treturn kvm_read_guest_page_mmu(vcpu, vcpu->arch.walk_mmu, gfn,\n\t\t\t\t       data, offset, len, access);\n}\n\n/*\n * Load the pae pdptrs.  Return true is they are all valid.\n */\nint load_pdptrs(struct kvm_vcpu *vcpu, struct kvm_mmu *mmu, unsigned long cr3)\n{\n\tgfn_t pdpt_gfn = cr3 >> PAGE_SHIFT;\n\tunsigned offset = ((cr3 & (PAGE_SIZE-1)) >> 5) << 2;\n\tint i;\n\tint ret;\n\tu64 pdpte[ARRAY_SIZE(mmu->pdptrs)];\n\n\tret = kvm_read_guest_page_mmu(vcpu, mmu, pdpt_gfn, pdpte,\n\t\t\t\t      offset * sizeof(u64), sizeof(pdpte),\n\t\t\t\t      PFERR_USER_MASK|PFERR_WRITE_MASK);\n\tif (ret < 0) {\n\t\tret = 0;\n\t\tgoto out;\n\t}\n\tfor (i = 0; i < ARRAY_SIZE(pdpte); ++i) {\n\t\tif (is_present_gpte(pdpte[i]) &&\n\t\t    (pdpte[i] & vcpu->arch.mmu.rsvd_bits_mask[0][2])) {\n\t\t\tret = 0;\n\t\t\tgoto out;\n\t\t}\n\t}\n\tret = 1;\n\n\tmemcpy(mmu->pdptrs, pdpte, sizeof(mmu->pdptrs));\n\t__set_bit(VCPU_EXREG_PDPTR,\n\t\t  (unsigned long *)&vcpu->arch.regs_avail);\n\t__set_bit(VCPU_EXREG_PDPTR,\n\t\t  (unsigned long *)&vcpu->arch.regs_dirty);\nout:\n\n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(load_pdptrs);\n\nstatic bool pdptrs_changed(struct kvm_vcpu *vcpu)\n{\n\tu64 pdpte[ARRAY_SIZE(vcpu->arch.walk_mmu->pdptrs)];\n\tbool changed = true;\n\tint offset;\n\tgfn_t gfn;\n\tint r;\n\n\tif (is_long_mode(vcpu) || !is_pae(vcpu))\n\t\treturn false;\n\n\tif (!test_bit(VCPU_EXREG_PDPTR,\n\t\t      (unsigned long *)&vcpu->arch.regs_avail))\n\t\treturn true;\n\n\tgfn = (vcpu->arch.cr3 & ~31u) >> PAGE_SHIFT;\n\toffset = (vcpu->arch.cr3 & ~31u) & (PAGE_SIZE - 1);\n\tr = kvm_read_nested_guest_page(vcpu, gfn, pdpte, offset, sizeof(pdpte),\n\t\t\t\t       PFERR_USER_MASK | PFERR_WRITE_MASK);\n\tif (r < 0)\n\t\tgoto out;\n\tchanged = memcmp(pdpte, vcpu->arch.walk_mmu->pdptrs, sizeof(pdpte)) != 0;\nout:\n\n\treturn changed;\n}\n\nint kvm_set_cr0(struct kvm_vcpu *vcpu, unsigned long cr0)\n{\n\tunsigned long old_cr0 = kvm_read_cr0(vcpu);\n\tunsigned long update_bits = X86_CR0_PG | X86_CR0_WP |\n\t\t\t\t    X86_CR0_CD | X86_CR0_NW;\n\n\tcr0 |= X86_CR0_ET;\n\n#ifdef CONFIG_X86_64\n\tif (cr0 & 0xffffffff00000000UL)\n\t\treturn 1;\n#endif\n\n\tcr0 &= ~CR0_RESERVED_BITS;\n\n\tif ((cr0 & X86_CR0_NW) && !(cr0 & X86_CR0_CD))\n\t\treturn 1;\n\n\tif ((cr0 & X86_CR0_PG) && !(cr0 & X86_CR0_PE))\n\t\treturn 1;\n\n\tif (!is_paging(vcpu) && (cr0 & X86_CR0_PG)) {\n#ifdef CONFIG_X86_64\n\t\tif ((vcpu->arch.efer & EFER_LME)) {\n\t\t\tint cs_db, cs_l;\n\n\t\t\tif (!is_pae(vcpu))\n\t\t\t\treturn 1;\n\t\t\tkvm_x86_ops->get_cs_db_l_bits(vcpu, &cs_db, &cs_l);\n\t\t\tif (cs_l)\n\t\t\t\treturn 1;\n\t\t} else\n#endif\n\t\tif (is_pae(vcpu) && !load_pdptrs(vcpu, vcpu->arch.walk_mmu,\n\t\t\t\t\t\t vcpu->arch.cr3))\n\t\t\treturn 1;\n\t}\n\n\tkvm_x86_ops->set_cr0(vcpu, cr0);\n\n\tif ((cr0 ^ old_cr0) & X86_CR0_PG)\n\t\tkvm_clear_async_pf_completion_queue(vcpu);\n\n\tif ((cr0 ^ old_cr0) & update_bits)\n\t\tkvm_mmu_reset_context(vcpu);\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_set_cr0);\n\nvoid kvm_lmsw(struct kvm_vcpu *vcpu, unsigned long msw)\n{\n\t(void)kvm_set_cr0(vcpu, kvm_read_cr0_bits(vcpu, ~0x0eul) | (msw & 0x0f));\n}\nEXPORT_SYMBOL_GPL(kvm_lmsw);\n\nint __kvm_set_xcr(struct kvm_vcpu *vcpu, u32 index, u64 xcr)\n{\n\tu64 xcr0;\n\n\t/* Only support XCR_XFEATURE_ENABLED_MASK(xcr0) now  */\n\tif (index != XCR_XFEATURE_ENABLED_MASK)\n\t\treturn 1;\n\txcr0 = xcr;\n\tif (kvm_x86_ops->get_cpl(vcpu) != 0)\n\t\treturn 1;\n\tif (!(xcr0 & XSTATE_FP))\n\t\treturn 1;\n\tif ((xcr0 & XSTATE_YMM) && !(xcr0 & XSTATE_SSE))\n\t\treturn 1;\n\tif (xcr0 & ~host_xcr0)\n\t\treturn 1;\n\tvcpu->arch.xcr0 = xcr0;\n\tvcpu->guest_xcr0_loaded = 0;\n\treturn 0;\n}\n\nint kvm_set_xcr(struct kvm_vcpu *vcpu, u32 index, u64 xcr)\n{\n\tif (__kvm_set_xcr(vcpu, index, xcr)) {\n\t\tkvm_inject_gp(vcpu, 0);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_set_xcr);\n\nstatic bool guest_cpuid_has_xsave(struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_cpuid_entry2 *best;\n\n\tbest = kvm_find_cpuid_entry(vcpu, 1, 0);\n\treturn best && (best->ecx & bit(X86_FEATURE_XSAVE));\n}\n\nstatic void update_cpuid(struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_cpuid_entry2 *best;\n\n\tbest = kvm_find_cpuid_entry(vcpu, 1, 0);\n\tif (!best)\n\t\treturn;\n\n\t/* Update OSXSAVE bit */\n\tif (cpu_has_xsave && best->function == 0x1) {\n\t\tbest->ecx &= ~(bit(X86_FEATURE_OSXSAVE));\n\t\tif (kvm_read_cr4_bits(vcpu, X86_CR4_OSXSAVE))\n\t\t\tbest->ecx |= bit(X86_FEATURE_OSXSAVE);\n\t}\n}\n\nint kvm_set_cr4(struct kvm_vcpu *vcpu, unsigned long cr4)\n{\n\tunsigned long old_cr4 = kvm_read_cr4(vcpu);\n\tunsigned long pdptr_bits = X86_CR4_PGE | X86_CR4_PSE | X86_CR4_PAE;\n\n\tif (cr4 & CR4_RESERVED_BITS)\n\t\treturn 1;\n\n\tif (!guest_cpuid_has_xsave(vcpu) && (cr4 & X86_CR4_OSXSAVE))\n\t\treturn 1;\n\n\tif (is_long_mode(vcpu)) {\n\t\tif (!(cr4 & X86_CR4_PAE))\n\t\t\treturn 1;\n\t} else if (is_paging(vcpu) && (cr4 & X86_CR4_PAE)\n\t\t   && ((cr4 ^ old_cr4) & pdptr_bits)\n\t\t   && !load_pdptrs(vcpu, vcpu->arch.walk_mmu, vcpu->arch.cr3))\n\t\treturn 1;\n\n\tif (cr4 & X86_CR4_VMXE)\n\t\treturn 1;\n\n\tkvm_x86_ops->set_cr4(vcpu, cr4);\n\n\tif ((cr4 ^ old_cr4) & pdptr_bits)\n\t\tkvm_mmu_reset_context(vcpu);\n\n\tif ((cr4 ^ old_cr4) & X86_CR4_OSXSAVE)\n\t\tupdate_cpuid(vcpu);\n\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_set_cr4);\n\nint kvm_set_cr3(struct kvm_vcpu *vcpu, unsigned long cr3)\n{\n\tif (cr3 == vcpu->arch.cr3 && !pdptrs_changed(vcpu)) {\n\t\tkvm_mmu_sync_roots(vcpu);\n\t\tkvm_mmu_flush_tlb(vcpu);\n\t\treturn 0;\n\t}\n\n\tif (is_long_mode(vcpu)) {\n\t\tif (cr3 & CR3_L_MODE_RESERVED_BITS)\n\t\t\treturn 1;\n\t} else {\n\t\tif (is_pae(vcpu)) {\n\t\t\tif (cr3 & CR3_PAE_RESERVED_BITS)\n\t\t\t\treturn 1;\n\t\t\tif (is_paging(vcpu) &&\n\t\t\t    !load_pdptrs(vcpu, vcpu->arch.walk_mmu, cr3))\n\t\t\t\treturn 1;\n\t\t}\n\t\t/*\n\t\t * We don't check reserved bits in nonpae mode, because\n\t\t * this isn't enforced, and VMware depends on this.\n\t\t */\n\t}\n\n\t/*\n\t * Does the new cr3 value map to physical memory? (Note, we\n\t * catch an invalid cr3 even in real-mode, because it would\n\t * cause trouble later on when we turn on paging anyway.)\n\t *\n\t * A real CPU would silently accept an invalid cr3 and would\n\t * attempt to use it - with largely undefined (and often hard\n\t * to debug) behavior on the guest side.\n\t */\n\tif (unlikely(!gfn_to_memslot(vcpu->kvm, cr3 >> PAGE_SHIFT)))\n\t\treturn 1;\n\tvcpu->arch.cr3 = cr3;\n\tvcpu->arch.mmu.new_cr3(vcpu);\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_set_cr3);\n\nint __kvm_set_cr8(struct kvm_vcpu *vcpu, unsigned long cr8)\n{\n\tif (cr8 & CR8_RESERVED_BITS)\n\t\treturn 1;\n\tif (irqchip_in_kernel(vcpu->kvm))\n\t\tkvm_lapic_set_tpr(vcpu, cr8);\n\telse\n\t\tvcpu->arch.cr8 = cr8;\n\treturn 0;\n}\n\nvoid kvm_set_cr8(struct kvm_vcpu *vcpu, unsigned long cr8)\n{\n\tif (__kvm_set_cr8(vcpu, cr8))\n\t\tkvm_inject_gp(vcpu, 0);\n}\nEXPORT_SYMBOL_GPL(kvm_set_cr8);\n\nunsigned long kvm_get_cr8(struct kvm_vcpu *vcpu)\n{\n\tif (irqchip_in_kernel(vcpu->kvm))\n\t\treturn kvm_lapic_get_cr8(vcpu);\n\telse\n\t\treturn vcpu->arch.cr8;\n}\nEXPORT_SYMBOL_GPL(kvm_get_cr8);\n\nstatic int __kvm_set_dr(struct kvm_vcpu *vcpu, int dr, unsigned long val)\n{\n\tswitch (dr) {\n\tcase 0 ... 3:\n\t\tvcpu->arch.db[dr] = val;\n\t\tif (!(vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP))\n\t\t\tvcpu->arch.eff_db[dr] = val;\n\t\tbreak;\n\tcase 4:\n\t\tif (kvm_read_cr4_bits(vcpu, X86_CR4_DE))\n\t\t\treturn 1; /* #UD */\n\t\t/* fall through */\n\tcase 6:\n\t\tif (val & 0xffffffff00000000ULL)\n\t\t\treturn -1; /* #GP */\n\t\tvcpu->arch.dr6 = (val & DR6_VOLATILE) | DR6_FIXED_1;\n\t\tbreak;\n\tcase 5:\n\t\tif (kvm_read_cr4_bits(vcpu, X86_CR4_DE))\n\t\t\treturn 1; /* #UD */\n\t\t/* fall through */\n\tdefault: /* 7 */\n\t\tif (val & 0xffffffff00000000ULL)\n\t\t\treturn -1; /* #GP */\n\t\tvcpu->arch.dr7 = (val & DR7_VOLATILE) | DR7_FIXED_1;\n\t\tif (!(vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP)) {\n\t\t\tkvm_x86_ops->set_dr7(vcpu, vcpu->arch.dr7);\n\t\t\tvcpu->arch.switch_db_regs = (val & DR7_BP_EN_MASK);\n\t\t}\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nint kvm_set_dr(struct kvm_vcpu *vcpu, int dr, unsigned long val)\n{\n\tint res;\n\n\tres = __kvm_set_dr(vcpu, dr, val);\n\tif (res > 0)\n\t\tkvm_queue_exception(vcpu, UD_VECTOR);\n\telse if (res < 0)\n\t\tkvm_inject_gp(vcpu, 0);\n\n\treturn res;\n}\nEXPORT_SYMBOL_GPL(kvm_set_dr);\n\nstatic int _kvm_get_dr(struct kvm_vcpu *vcpu, int dr, unsigned long *val)\n{\n\tswitch (dr) {\n\tcase 0 ... 3:\n\t\t*val = vcpu->arch.db[dr];\n\t\tbreak;\n\tcase 4:\n\t\tif (kvm_read_cr4_bits(vcpu, X86_CR4_DE))\n\t\t\treturn 1;\n\t\t/* fall through */\n\tcase 6:\n\t\t*val = vcpu->arch.dr6;\n\t\tbreak;\n\tcase 5:\n\t\tif (kvm_read_cr4_bits(vcpu, X86_CR4_DE))\n\t\t\treturn 1;\n\t\t/* fall through */\n\tdefault: /* 7 */\n\t\t*val = vcpu->arch.dr7;\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nint kvm_get_dr(struct kvm_vcpu *vcpu, int dr, unsigned long *val)\n{\n\tif (_kvm_get_dr(vcpu, dr, val)) {\n\t\tkvm_queue_exception(vcpu, UD_VECTOR);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_get_dr);\n\n/*\n * List of msr numbers which we expose to userspace through KVM_GET_MSRS\n * and KVM_SET_MSRS, and KVM_GET_MSR_INDEX_LIST.\n *\n * This list is modified at module load time to reflect the\n * capabilities of the host cpu. This capabilities test skips MSRs that are\n * kvm-specific. Those are put in the beginning of the list.\n */\n\n#define KVM_SAVE_MSRS_BEGIN\t8\nstatic u32 msrs_to_save[] = {\n\tMSR_KVM_SYSTEM_TIME, MSR_KVM_WALL_CLOCK,\n\tMSR_KVM_SYSTEM_TIME_NEW, MSR_KVM_WALL_CLOCK_NEW,\n\tHV_X64_MSR_GUEST_OS_ID, HV_X64_MSR_HYPERCALL,\n\tHV_X64_MSR_APIC_ASSIST_PAGE, MSR_KVM_ASYNC_PF_EN,\n\tMSR_IA32_SYSENTER_CS, MSR_IA32_SYSENTER_ESP, MSR_IA32_SYSENTER_EIP,\n\tMSR_STAR,\n#ifdef CONFIG_X86_64\n\tMSR_CSTAR, MSR_KERNEL_GS_BASE, MSR_SYSCALL_MASK, MSR_LSTAR,\n#endif\n\tMSR_IA32_TSC, MSR_IA32_CR_PAT, MSR_VM_HSAVE_PA\n};\n\nstatic unsigned num_msrs_to_save;\n\nstatic u32 emulated_msrs[] = {\n\tMSR_IA32_MISC_ENABLE,\n\tMSR_IA32_MCG_STATUS,\n\tMSR_IA32_MCG_CTL,\n};\n\nstatic int set_efer(struct kvm_vcpu *vcpu, u64 efer)\n{\n\tu64 old_efer = vcpu->arch.efer;\n\n\tif (efer & efer_reserved_bits)\n\t\treturn 1;\n\n\tif (is_paging(vcpu)\n\t    && (vcpu->arch.efer & EFER_LME) != (efer & EFER_LME))\n\t\treturn 1;\n\n\tif (efer & EFER_FFXSR) {\n\t\tstruct kvm_cpuid_entry2 *feat;\n\n\t\tfeat = kvm_find_cpuid_entry(vcpu, 0x80000001, 0);\n\t\tif (!feat || !(feat->edx & bit(X86_FEATURE_FXSR_OPT)))\n\t\t\treturn 1;\n\t}\n\n\tif (efer & EFER_SVME) {\n\t\tstruct kvm_cpuid_entry2 *feat;\n\n\t\tfeat = kvm_find_cpuid_entry(vcpu, 0x80000001, 0);\n\t\tif (!feat || !(feat->ecx & bit(X86_FEATURE_SVM)))\n\t\t\treturn 1;\n\t}\n\n\tefer &= ~EFER_LMA;\n\tefer |= vcpu->arch.efer & EFER_LMA;\n\n\tkvm_x86_ops->set_efer(vcpu, efer);\n\n\tvcpu->arch.mmu.base_role.nxe = (efer & EFER_NX) && !tdp_enabled;\n\n\t/* Update reserved bits */\n\tif ((efer ^ old_efer) & EFER_NX)\n\t\tkvm_mmu_reset_context(vcpu);\n\n\treturn 0;\n}\n\nvoid kvm_enable_efer_bits(u64 mask)\n{\n       efer_reserved_bits &= ~mask;\n}\nEXPORT_SYMBOL_GPL(kvm_enable_efer_bits);\n\n\n/*\n * Writes msr value into into the appropriate \"register\".\n * Returns 0 on success, non-0 otherwise.\n * Assumes vcpu_load() was already called.\n */\nint kvm_set_msr(struct kvm_vcpu *vcpu, u32 msr_index, u64 data)\n{\n\treturn kvm_x86_ops->set_msr(vcpu, msr_index, data);\n}\n\n/*\n * Adapt set_msr() to msr_io()'s calling convention\n */\nstatic int do_set_msr(struct kvm_vcpu *vcpu, unsigned index, u64 *data)\n{\n\treturn kvm_set_msr(vcpu, index, *data);\n}\n\nstatic void kvm_write_wall_clock(struct kvm *kvm, gpa_t wall_clock)\n{\n\tint version;\n\tint r;\n\tstruct pvclock_wall_clock wc;\n\tstruct timespec boot;\n\n\tif (!wall_clock)\n\t\treturn;\n\n\tr = kvm_read_guest(kvm, wall_clock, &version, sizeof(version));\n\tif (r)\n\t\treturn;\n\n\tif (version & 1)\n\t\t++version;  /* first time write, random junk */\n\n\t++version;\n\n\tkvm_write_guest(kvm, wall_clock, &version, sizeof(version));\n\n\t/*\n\t * The guest calculates current wall clock time by adding\n\t * system time (updated by kvm_guest_time_update below) to the\n\t * wall clock specified here.  guest system time equals host\n\t * system time for us, thus we must fill in host boot time here.\n\t */\n\tgetboottime(&boot);\n\n\twc.sec = boot.tv_sec;\n\twc.nsec = boot.tv_nsec;\n\twc.version = version;\n\n\tkvm_write_guest(kvm, wall_clock, &wc, sizeof(wc));\n\n\tversion++;\n\tkvm_write_guest(kvm, wall_clock, &version, sizeof(version));\n}\n\nstatic uint32_t div_frac(uint32_t dividend, uint32_t divisor)\n{\n\tuint32_t quotient, remainder;\n\n\t/* Don't try to replace with do_div(), this one calculates\n\t * \"(dividend << 32) / divisor\" */\n\t__asm__ ( \"divl %4\"\n\t\t  : \"=a\" (quotient), \"=d\" (remainder)\n\t\t  : \"0\" (0), \"1\" (dividend), \"r\" (divisor) );\n\treturn quotient;\n}\n\nstatic void kvm_get_time_scale(uint32_t scaled_khz, uint32_t base_khz,\n\t\t\t       s8 *pshift, u32 *pmultiplier)\n{\n\tuint64_t scaled64;\n\tint32_t  shift = 0;\n\tuint64_t tps64;\n\tuint32_t tps32;\n\n\ttps64 = base_khz * 1000LL;\n\tscaled64 = scaled_khz * 1000LL;\n\twhile (tps64 > scaled64*2 || tps64 & 0xffffffff00000000ULL) {\n\t\ttps64 >>= 1;\n\t\tshift--;\n\t}\n\n\ttps32 = (uint32_t)tps64;\n\twhile (tps32 <= scaled64 || scaled64 & 0xffffffff00000000ULL) {\n\t\tif (scaled64 & 0xffffffff00000000ULL || tps32 & 0x80000000)\n\t\t\tscaled64 >>= 1;\n\t\telse\n\t\t\ttps32 <<= 1;\n\t\tshift++;\n\t}\n\n\t*pshift = shift;\n\t*pmultiplier = div_frac(scaled64, tps32);\n\n\tpr_debug(\"%s: base_khz %u => %u, shift %d, mul %u\\n\",\n\t\t __func__, base_khz, scaled_khz, shift, *pmultiplier);\n}\n\nstatic inline u64 get_kernel_ns(void)\n{\n\tstruct timespec ts;\n\n\tWARN_ON(preemptible());\n\tktime_get_ts(&ts);\n\tmonotonic_to_bootbased(&ts);\n\treturn timespec_to_ns(&ts);\n}\n\nstatic DEFINE_PER_CPU(unsigned long, cpu_tsc_khz);\nunsigned long max_tsc_khz;\n\nstatic inline int kvm_tsc_changes_freq(void)\n{\n\tint cpu = get_cpu();\n\tint ret = !boot_cpu_has(X86_FEATURE_CONSTANT_TSC) &&\n\t\t  cpufreq_quick_get(cpu) != 0;\n\tput_cpu();\n\treturn ret;\n}\n\nstatic inline u64 nsec_to_cycles(u64 nsec)\n{\n\tu64 ret;\n\n\tWARN_ON(preemptible());\n\tif (kvm_tsc_changes_freq())\n\t\tprintk_once(KERN_WARNING\n\t\t \"kvm: unreliable cycle conversion on adjustable rate TSC\\n\");\n\tret = nsec * __get_cpu_var(cpu_tsc_khz);\n\tdo_div(ret, USEC_PER_SEC);\n\treturn ret;\n}\n\nstatic void kvm_arch_set_tsc_khz(struct kvm *kvm, u32 this_tsc_khz)\n{\n\t/* Compute a scale to convert nanoseconds in TSC cycles */\n\tkvm_get_time_scale(this_tsc_khz, NSEC_PER_SEC / 1000,\n\t\t\t   &kvm->arch.virtual_tsc_shift,\n\t\t\t   &kvm->arch.virtual_tsc_mult);\n\tkvm->arch.virtual_tsc_khz = this_tsc_khz;\n}\n\nstatic u64 compute_guest_tsc(struct kvm_vcpu *vcpu, s64 kernel_ns)\n{\n\tu64 tsc = pvclock_scale_delta(kernel_ns-vcpu->arch.last_tsc_nsec,\n\t\t\t\t      vcpu->kvm->arch.virtual_tsc_mult,\n\t\t\t\t      vcpu->kvm->arch.virtual_tsc_shift);\n\ttsc += vcpu->arch.last_tsc_write;\n\treturn tsc;\n}\n\nvoid kvm_write_tsc(struct kvm_vcpu *vcpu, u64 data)\n{\n\tstruct kvm *kvm = vcpu->kvm;\n\tu64 offset, ns, elapsed;\n\tunsigned long flags;\n\ts64 sdiff;\n\n\tspin_lock_irqsave(&kvm->arch.tsc_write_lock, flags);\n\toffset = data - native_read_tsc();\n\tns = get_kernel_ns();\n\telapsed = ns - kvm->arch.last_tsc_nsec;\n\tsdiff = data - kvm->arch.last_tsc_write;\n\tif (sdiff < 0)\n\t\tsdiff = -sdiff;\n\n\t/*\n\t * Special case: close write to TSC within 5 seconds of\n\t * another CPU is interpreted as an attempt to synchronize\n\t * The 5 seconds is to accomodate host load / swapping as\n\t * well as any reset of TSC during the boot process.\n\t *\n\t * In that case, for a reliable TSC, we can match TSC offsets,\n\t * or make a best guest using elapsed value.\n\t */\n\tif (sdiff < nsec_to_cycles(5ULL * NSEC_PER_SEC) &&\n\t    elapsed < 5ULL * NSEC_PER_SEC) {\n\t\tif (!check_tsc_unstable()) {\n\t\t\toffset = kvm->arch.last_tsc_offset;\n\t\t\tpr_debug(\"kvm: matched tsc offset for %llu\\n\", data);\n\t\t} else {\n\t\t\tu64 delta = nsec_to_cycles(elapsed);\n\t\t\toffset += delta;\n\t\t\tpr_debug(\"kvm: adjusted tsc offset by %llu\\n\", delta);\n\t\t}\n\t\tns = kvm->arch.last_tsc_nsec;\n\t}\n\tkvm->arch.last_tsc_nsec = ns;\n\tkvm->arch.last_tsc_write = data;\n\tkvm->arch.last_tsc_offset = offset;\n\tkvm_x86_ops->write_tsc_offset(vcpu, offset);\n\tspin_unlock_irqrestore(&kvm->arch.tsc_write_lock, flags);\n\n\t/* Reset of TSC must disable overshoot protection below */\n\tvcpu->arch.hv_clock.tsc_timestamp = 0;\n\tvcpu->arch.last_tsc_write = data;\n\tvcpu->arch.last_tsc_nsec = ns;\n}\nEXPORT_SYMBOL_GPL(kvm_write_tsc);\n\nstatic int kvm_guest_time_update(struct kvm_vcpu *v)\n{\n\tunsigned long flags;\n\tstruct kvm_vcpu_arch *vcpu = &v->arch;\n\tvoid *shared_kaddr;\n\tunsigned long this_tsc_khz;\n\ts64 kernel_ns, max_kernel_ns;\n\tu64 tsc_timestamp;\n\n\t/* Keep irq disabled to prevent changes to the clock */\n\tlocal_irq_save(flags);\n\tkvm_get_msr(v, MSR_IA32_TSC, &tsc_timestamp);\n\tkernel_ns = get_kernel_ns();\n\tthis_tsc_khz = __get_cpu_var(cpu_tsc_khz);\n\n\tif (unlikely(this_tsc_khz == 0)) {\n\t\tlocal_irq_restore(flags);\n\t\tkvm_make_request(KVM_REQ_CLOCK_UPDATE, v);\n\t\treturn 1;\n\t}\n\n\t/*\n\t * We may have to catch up the TSC to match elapsed wall clock\n\t * time for two reasons, even if kvmclock is used.\n\t *   1) CPU could have been running below the maximum TSC rate\n\t *   2) Broken TSC compensation resets the base at each VCPU\n\t *      entry to avoid unknown leaps of TSC even when running\n\t *      again on the same CPU.  This may cause apparent elapsed\n\t *      time to disappear, and the guest to stand still or run\n\t *\tvery slowly.\n\t */\n\tif (vcpu->tsc_catchup) {\n\t\tu64 tsc = compute_guest_tsc(v, kernel_ns);\n\t\tif (tsc > tsc_timestamp) {\n\t\t\tkvm_x86_ops->adjust_tsc_offset(v, tsc - tsc_timestamp);\n\t\t\ttsc_timestamp = tsc;\n\t\t}\n\t}\n\n\tlocal_irq_restore(flags);\n\n\tif (!vcpu->time_page)\n\t\treturn 0;\n\n\t/*\n\t * Time as measured by the TSC may go backwards when resetting the base\n\t * tsc_timestamp.  The reason for this is that the TSC resolution is\n\t * higher than the resolution of the other clock scales.  Thus, many\n\t * possible measurments of the TSC correspond to one measurement of any\n\t * other clock, and so a spread of values is possible.  This is not a\n\t * problem for the computation of the nanosecond clock; with TSC rates\n\t * around 1GHZ, there can only be a few cycles which correspond to one\n\t * nanosecond value, and any path through this code will inevitably\n\t * take longer than that.  However, with the kernel_ns value itself,\n\t * the precision may be much lower, down to HZ granularity.  If the\n\t * first sampling of TSC against kernel_ns ends in the low part of the\n\t * range, and the second in the high end of the range, we can get:\n\t *\n\t * (TSC - offset_low) * S + kns_old > (TSC - offset_high) * S + kns_new\n\t *\n\t * As the sampling errors potentially range in the thousands of cycles,\n\t * it is possible such a time value has already been observed by the\n\t * guest.  To protect against this, we must compute the system time as\n\t * observed by the guest and ensure the new system time is greater.\n\t */\n\tmax_kernel_ns = 0;\n\tif (vcpu->hv_clock.tsc_timestamp && vcpu->last_guest_tsc) {\n\t\tmax_kernel_ns = vcpu->last_guest_tsc -\n\t\t\t\tvcpu->hv_clock.tsc_timestamp;\n\t\tmax_kernel_ns = pvclock_scale_delta(max_kernel_ns,\n\t\t\t\t    vcpu->hv_clock.tsc_to_system_mul,\n\t\t\t\t    vcpu->hv_clock.tsc_shift);\n\t\tmax_kernel_ns += vcpu->last_kernel_ns;\n\t}\n\n\tif (unlikely(vcpu->hw_tsc_khz != this_tsc_khz)) {\n\t\tkvm_get_time_scale(NSEC_PER_SEC / 1000, this_tsc_khz,\n\t\t\t\t   &vcpu->hv_clock.tsc_shift,\n\t\t\t\t   &vcpu->hv_clock.tsc_to_system_mul);\n\t\tvcpu->hw_tsc_khz = this_tsc_khz;\n\t}\n\n\tif (max_kernel_ns > kernel_ns)\n\t\tkernel_ns = max_kernel_ns;\n\n\t/* With all the info we got, fill in the values */\n\tvcpu->hv_clock.tsc_timestamp = tsc_timestamp;\n\tvcpu->hv_clock.system_time = kernel_ns + v->kvm->arch.kvmclock_offset;\n\tvcpu->last_kernel_ns = kernel_ns;\n\tvcpu->last_guest_tsc = tsc_timestamp;\n\tvcpu->hv_clock.flags = 0;\n\n\t/*\n\t * The interface expects us to write an even number signaling that the\n\t * update is finished. Since the guest won't see the intermediate\n\t * state, we just increase by 2 at the end.\n\t */\n\tvcpu->hv_clock.version += 2;\n\n\tshared_kaddr = kmap_atomic(vcpu->time_page, KM_USER0);\n\n\tmemcpy(shared_kaddr + vcpu->time_offset, &vcpu->hv_clock,\n\t       sizeof(vcpu->hv_clock));\n\n\tkunmap_atomic(shared_kaddr, KM_USER0);\n\n\tmark_page_dirty(v->kvm, vcpu->time >> PAGE_SHIFT);\n\treturn 0;\n}\n\nstatic bool msr_mtrr_valid(unsigned msr)\n{\n\tswitch (msr) {\n\tcase 0x200 ... 0x200 + 2 * KVM_NR_VAR_MTRR - 1:\n\tcase MSR_MTRRfix64K_00000:\n\tcase MSR_MTRRfix16K_80000:\n\tcase MSR_MTRRfix16K_A0000:\n\tcase MSR_MTRRfix4K_C0000:\n\tcase MSR_MTRRfix4K_C8000:\n\tcase MSR_MTRRfix4K_D0000:\n\tcase MSR_MTRRfix4K_D8000:\n\tcase MSR_MTRRfix4K_E0000:\n\tcase MSR_MTRRfix4K_E8000:\n\tcase MSR_MTRRfix4K_F0000:\n\tcase MSR_MTRRfix4K_F8000:\n\tcase MSR_MTRRdefType:\n\tcase MSR_IA32_CR_PAT:\n\t\treturn true;\n\tcase 0x2f8:\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nstatic bool valid_pat_type(unsigned t)\n{\n\treturn t < 8 && (1 << t) & 0xf3; /* 0, 1, 4, 5, 6, 7 */\n}\n\nstatic bool valid_mtrr_type(unsigned t)\n{\n\treturn t < 8 && (1 << t) & 0x73; /* 0, 1, 4, 5, 6 */\n}\n\nstatic bool mtrr_valid(struct kvm_vcpu *vcpu, u32 msr, u64 data)\n{\n\tint i;\n\n\tif (!msr_mtrr_valid(msr))\n\t\treturn false;\n\n\tif (msr == MSR_IA32_CR_PAT) {\n\t\tfor (i = 0; i < 8; i++)\n\t\t\tif (!valid_pat_type((data >> (i * 8)) & 0xff))\n\t\t\t\treturn false;\n\t\treturn true;\n\t} else if (msr == MSR_MTRRdefType) {\n\t\tif (data & ~0xcff)\n\t\t\treturn false;\n\t\treturn valid_mtrr_type(data & 0xff);\n\t} else if (msr >= MSR_MTRRfix64K_00000 && msr <= MSR_MTRRfix4K_F8000) {\n\t\tfor (i = 0; i < 8 ; i++)\n\t\t\tif (!valid_mtrr_type((data >> (i * 8)) & 0xff))\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t/* variable MTRRs */\n\treturn valid_mtrr_type(data & 0xff);\n}\n\nstatic int set_msr_mtrr(struct kvm_vcpu *vcpu, u32 msr, u64 data)\n{\n\tu64 *p = (u64 *)&vcpu->arch.mtrr_state.fixed_ranges;\n\n\tif (!mtrr_valid(vcpu, msr, data))\n\t\treturn 1;\n\n\tif (msr == MSR_MTRRdefType) {\n\t\tvcpu->arch.mtrr_state.def_type = data;\n\t\tvcpu->arch.mtrr_state.enabled = (data & 0xc00) >> 10;\n\t} else if (msr == MSR_MTRRfix64K_00000)\n\t\tp[0] = data;\n\telse if (msr == MSR_MTRRfix16K_80000 || msr == MSR_MTRRfix16K_A0000)\n\t\tp[1 + msr - MSR_MTRRfix16K_80000] = data;\n\telse if (msr >= MSR_MTRRfix4K_C0000 && msr <= MSR_MTRRfix4K_F8000)\n\t\tp[3 + msr - MSR_MTRRfix4K_C0000] = data;\n\telse if (msr == MSR_IA32_CR_PAT)\n\t\tvcpu->arch.pat = data;\n\telse {\t/* Variable MTRRs */\n\t\tint idx, is_mtrr_mask;\n\t\tu64 *pt;\n\n\t\tidx = (msr - 0x200) / 2;\n\t\tis_mtrr_mask = msr - 0x200 - 2 * idx;\n\t\tif (!is_mtrr_mask)\n\t\t\tpt =\n\t\t\t  (u64 *)&vcpu->arch.mtrr_state.var_ranges[idx].base_lo;\n\t\telse\n\t\t\tpt =\n\t\t\t  (u64 *)&vcpu->arch.mtrr_state.var_ranges[idx].mask_lo;\n\t\t*pt = data;\n\t}\n\n\tkvm_mmu_reset_context(vcpu);\n\treturn 0;\n}\n\nstatic int set_msr_mce(struct kvm_vcpu *vcpu, u32 msr, u64 data)\n{\n\tu64 mcg_cap = vcpu->arch.mcg_cap;\n\tunsigned bank_num = mcg_cap & 0xff;\n\n\tswitch (msr) {\n\tcase MSR_IA32_MCG_STATUS:\n\t\tvcpu->arch.mcg_status = data;\n\t\tbreak;\n\tcase MSR_IA32_MCG_CTL:\n\t\tif (!(mcg_cap & MCG_CTL_P))\n\t\t\treturn 1;\n\t\tif (data != 0 && data != ~(u64)0)\n\t\t\treturn -1;\n\t\tvcpu->arch.mcg_ctl = data;\n\t\tbreak;\n\tdefault:\n\t\tif (msr >= MSR_IA32_MC0_CTL &&\n\t\t    msr < MSR_IA32_MC0_CTL + 4 * bank_num) {\n\t\t\tu32 offset = msr - MSR_IA32_MC0_CTL;\n\t\t\t/* only 0 or all 1s can be written to IA32_MCi_CTL\n\t\t\t * some Linux kernels though clear bit 10 in bank 4 to\n\t\t\t * workaround a BIOS/GART TBL issue on AMD K8s, ignore\n\t\t\t * this to avoid an uncatched #GP in the guest\n\t\t\t */\n\t\t\tif ((offset & 0x3) == 0 &&\n\t\t\t    data != 0 && (data | (1 << 10)) != ~(u64)0)\n\t\t\t\treturn -1;\n\t\t\tvcpu->arch.mce_banks[offset] = data;\n\t\t\tbreak;\n\t\t}\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstatic int xen_hvm_config(struct kvm_vcpu *vcpu, u64 data)\n{\n\tstruct kvm *kvm = vcpu->kvm;\n\tint lm = is_long_mode(vcpu);\n\tu8 *blob_addr = lm ? (u8 *)(long)kvm->arch.xen_hvm_config.blob_addr_64\n\t\t: (u8 *)(long)kvm->arch.xen_hvm_config.blob_addr_32;\n\tu8 blob_size = lm ? kvm->arch.xen_hvm_config.blob_size_64\n\t\t: kvm->arch.xen_hvm_config.blob_size_32;\n\tu32 page_num = data & ~PAGE_MASK;\n\tu64 page_addr = data & PAGE_MASK;\n\tu8 *page;\n\tint r;\n\n\tr = -E2BIG;\n\tif (page_num >= blob_size)\n\t\tgoto out;\n\tr = -ENOMEM;\n\tpage = kzalloc(PAGE_SIZE, GFP_KERNEL);\n\tif (!page)\n\t\tgoto out;\n\tr = -EFAULT;\n\tif (copy_from_user(page, blob_addr + (page_num * PAGE_SIZE), PAGE_SIZE))\n\t\tgoto out_free;\n\tif (kvm_write_guest(kvm, page_addr, page, PAGE_SIZE))\n\t\tgoto out_free;\n\tr = 0;\nout_free:\n\tkfree(page);\nout:\n\treturn r;\n}\n\nstatic bool kvm_hv_hypercall_enabled(struct kvm *kvm)\n{\n\treturn kvm->arch.hv_hypercall & HV_X64_MSR_HYPERCALL_ENABLE;\n}\n\nstatic bool kvm_hv_msr_partition_wide(u32 msr)\n{\n\tbool r = false;\n\tswitch (msr) {\n\tcase HV_X64_MSR_GUEST_OS_ID:\n\tcase HV_X64_MSR_HYPERCALL:\n\t\tr = true;\n\t\tbreak;\n\t}\n\n\treturn r;\n}\n\nstatic int set_msr_hyperv_pw(struct kvm_vcpu *vcpu, u32 msr, u64 data)\n{\n\tstruct kvm *kvm = vcpu->kvm;\n\n\tswitch (msr) {\n\tcase HV_X64_MSR_GUEST_OS_ID:\n\t\tkvm->arch.hv_guest_os_id = data;\n\t\t/* setting guest os id to zero disables hypercall page */\n\t\tif (!kvm->arch.hv_guest_os_id)\n\t\t\tkvm->arch.hv_hypercall &= ~HV_X64_MSR_HYPERCALL_ENABLE;\n\t\tbreak;\n\tcase HV_X64_MSR_HYPERCALL: {\n\t\tu64 gfn;\n\t\tunsigned long addr;\n\t\tu8 instructions[4];\n\n\t\t/* if guest os id is not set hypercall should remain disabled */\n\t\tif (!kvm->arch.hv_guest_os_id)\n\t\t\tbreak;\n\t\tif (!(data & HV_X64_MSR_HYPERCALL_ENABLE)) {\n\t\t\tkvm->arch.hv_hypercall = data;\n\t\t\tbreak;\n\t\t}\n\t\tgfn = data >> HV_X64_MSR_HYPERCALL_PAGE_ADDRESS_SHIFT;\n\t\taddr = gfn_to_hva(kvm, gfn);\n\t\tif (kvm_is_error_hva(addr))\n\t\t\treturn 1;\n\t\tkvm_x86_ops->patch_hypercall(vcpu, instructions);\n\t\t((unsigned char *)instructions)[3] = 0xc3; /* ret */\n\t\tif (copy_to_user((void __user *)addr, instructions, 4))\n\t\t\treturn 1;\n\t\tkvm->arch.hv_hypercall = data;\n\t\tbreak;\n\t}\n\tdefault:\n\t\tpr_unimpl(vcpu, \"HYPER-V unimplemented wrmsr: 0x%x \"\n\t\t\t  \"data 0x%llx\\n\", msr, data);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstatic int set_msr_hyperv(struct kvm_vcpu *vcpu, u32 msr, u64 data)\n{\n\tswitch (msr) {\n\tcase HV_X64_MSR_APIC_ASSIST_PAGE: {\n\t\tunsigned long addr;\n\n\t\tif (!(data & HV_X64_MSR_APIC_ASSIST_PAGE_ENABLE)) {\n\t\t\tvcpu->arch.hv_vapic = data;\n\t\t\tbreak;\n\t\t}\n\t\taddr = gfn_to_hva(vcpu->kvm, data >>\n\t\t\t\t  HV_X64_MSR_APIC_ASSIST_PAGE_ADDRESS_SHIFT);\n\t\tif (kvm_is_error_hva(addr))\n\t\t\treturn 1;\n\t\tif (clear_user((void __user *)addr, PAGE_SIZE))\n\t\t\treturn 1;\n\t\tvcpu->arch.hv_vapic = data;\n\t\tbreak;\n\t}\n\tcase HV_X64_MSR_EOI:\n\t\treturn kvm_hv_vapic_msr_write(vcpu, APIC_EOI, data);\n\tcase HV_X64_MSR_ICR:\n\t\treturn kvm_hv_vapic_msr_write(vcpu, APIC_ICR, data);\n\tcase HV_X64_MSR_TPR:\n\t\treturn kvm_hv_vapic_msr_write(vcpu, APIC_TASKPRI, data);\n\tdefault:\n\t\tpr_unimpl(vcpu, \"HYPER-V unimplemented wrmsr: 0x%x \"\n\t\t\t  \"data 0x%llx\\n\", msr, data);\n\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\nstatic int kvm_pv_enable_async_pf(struct kvm_vcpu *vcpu, u64 data)\n{\n\tgpa_t gpa = data & ~0x3f;\n\n\t/* Bits 2:5 are resrved, Should be zero */\n\tif (data & 0x3c)\n\t\treturn 1;\n\n\tvcpu->arch.apf.msr_val = data;\n\n\tif (!(data & KVM_ASYNC_PF_ENABLED)) {\n\t\tkvm_clear_async_pf_completion_queue(vcpu);\n\t\tkvm_async_pf_hash_reset(vcpu);\n\t\treturn 0;\n\t}\n\n\tif (kvm_gfn_to_hva_cache_init(vcpu->kvm, &vcpu->arch.apf.data, gpa))\n\t\treturn 1;\n\n\tvcpu->arch.apf.send_user_only = !(data & KVM_ASYNC_PF_SEND_ALWAYS);\n\tkvm_async_pf_wakeup_all(vcpu);\n\treturn 0;\n}\n\nint kvm_set_msr_common(struct kvm_vcpu *vcpu, u32 msr, u64 data)\n{\n\tswitch (msr) {\n\tcase MSR_EFER:\n\t\treturn set_efer(vcpu, data);\n\tcase MSR_K7_HWCR:\n\t\tdata &= ~(u64)0x40;\t/* ignore flush filter disable */\n\t\tdata &= ~(u64)0x100;\t/* ignore ignne emulation enable */\n\t\tif (data != 0) {\n\t\t\tpr_unimpl(vcpu, \"unimplemented HWCR wrmsr: 0x%llx\\n\",\n\t\t\t\tdata);\n\t\t\treturn 1;\n\t\t}\n\t\tbreak;\n\tcase MSR_FAM10H_MMIO_CONF_BASE:\n\t\tif (data != 0) {\n\t\t\tpr_unimpl(vcpu, \"unimplemented MMIO_CONF_BASE wrmsr: \"\n\t\t\t\t\"0x%llx\\n\", data);\n\t\t\treturn 1;\n\t\t}\n\t\tbreak;\n\tcase MSR_AMD64_NB_CFG:\n\t\tbreak;\n\tcase MSR_IA32_DEBUGCTLMSR:\n\t\tif (!data) {\n\t\t\t/* We support the non-activated case already */\n\t\t\tbreak;\n\t\t} else if (data & ~(DEBUGCTLMSR_LBR | DEBUGCTLMSR_BTF)) {\n\t\t\t/* Values other than LBR and BTF are vendor-specific,\n\t\t\t   thus reserved and should throw a #GP */\n\t\t\treturn 1;\n\t\t}\n\t\tpr_unimpl(vcpu, \"%s: MSR_IA32_DEBUGCTLMSR 0x%llx, nop\\n\",\n\t\t\t__func__, data);\n\t\tbreak;\n\tcase MSR_IA32_UCODE_REV:\n\tcase MSR_IA32_UCODE_WRITE:\n\tcase MSR_VM_HSAVE_PA:\n\tcase MSR_AMD64_PATCH_LOADER:\n\t\tbreak;\n\tcase 0x200 ... 0x2ff:\n\t\treturn set_msr_mtrr(vcpu, msr, data);\n\tcase MSR_IA32_APICBASE:\n\t\tkvm_set_apic_base(vcpu, data);\n\t\tbreak;\n\tcase APIC_BASE_MSR ... APIC_BASE_MSR + 0x3ff:\n\t\treturn kvm_x2apic_msr_write(vcpu, msr, data);\n\tcase MSR_IA32_MISC_ENABLE:\n\t\tvcpu->arch.ia32_misc_enable_msr = data;\n\t\tbreak;\n\tcase MSR_KVM_WALL_CLOCK_NEW:\n\tcase MSR_KVM_WALL_CLOCK:\n\t\tvcpu->kvm->arch.wall_clock = data;\n\t\tkvm_write_wall_clock(vcpu->kvm, data);\n\t\tbreak;\n\tcase MSR_KVM_SYSTEM_TIME_NEW:\n\tcase MSR_KVM_SYSTEM_TIME: {\n\t\tif (vcpu->arch.time_page) {\n\t\t\tkvm_release_page_dirty(vcpu->arch.time_page);\n\t\t\tvcpu->arch.time_page = NULL;\n\t\t}\n\n\t\tvcpu->arch.time = data;\n\t\tkvm_make_request(KVM_REQ_CLOCK_UPDATE, vcpu);\n\n\t\t/* we verify if the enable bit is set... */\n\t\tif (!(data & 1))\n\t\t\tbreak;\n\n\t\t/* ...but clean it before doing the actual write */\n\t\tvcpu->arch.time_offset = data & ~(PAGE_MASK | 1);\n\n\t\tvcpu->arch.time_page =\n\t\t\t\tgfn_to_page(vcpu->kvm, data >> PAGE_SHIFT);\n\n\t\tif (is_error_page(vcpu->arch.time_page)) {\n\t\t\tkvm_release_page_clean(vcpu->arch.time_page);\n\t\t\tvcpu->arch.time_page = NULL;\n\t\t}\n\t\tbreak;\n\t}\n\tcase MSR_KVM_ASYNC_PF_EN:\n\t\tif (kvm_pv_enable_async_pf(vcpu, data))\n\t\t\treturn 1;\n\t\tbreak;\n\tcase MSR_IA32_MCG_CTL:\n\tcase MSR_IA32_MCG_STATUS:\n\tcase MSR_IA32_MC0_CTL ... MSR_IA32_MC0_CTL + 4 * KVM_MAX_MCE_BANKS - 1:\n\t\treturn set_msr_mce(vcpu, msr, data);\n\n\t/* Performance counters are not protected by a CPUID bit,\n\t * so we should check all of them in the generic path for the sake of\n\t * cross vendor migration.\n\t * Writing a zero into the event select MSRs disables them,\n\t * which we perfectly emulate ;-). Any other value should be at least\n\t * reported, some guests depend on them.\n\t */\n\tcase MSR_P6_EVNTSEL0:\n\tcase MSR_P6_EVNTSEL1:\n\tcase MSR_K7_EVNTSEL0:\n\tcase MSR_K7_EVNTSEL1:\n\tcase MSR_K7_EVNTSEL2:\n\tcase MSR_K7_EVNTSEL3:\n\t\tif (data != 0)\n\t\t\tpr_unimpl(vcpu, \"unimplemented perfctr wrmsr: \"\n\t\t\t\t\"0x%x data 0x%llx\\n\", msr, data);\n\t\tbreak;\n\t/* at least RHEL 4 unconditionally writes to the perfctr registers,\n\t * so we ignore writes to make it happy.\n\t */\n\tcase MSR_P6_PERFCTR0:\n\tcase MSR_P6_PERFCTR1:\n\tcase MSR_K7_PERFCTR0:\n\tcase MSR_K7_PERFCTR1:\n\tcase MSR_K7_PERFCTR2:\n\tcase MSR_K7_PERFCTR3:\n\t\tpr_unimpl(vcpu, \"unimplemented perfctr wrmsr: \"\n\t\t\t\"0x%x data 0x%llx\\n\", msr, data);\n\t\tbreak;\n\tcase MSR_K7_CLK_CTL:\n\t\t/*\n\t\t * Ignore all writes to this no longer documented MSR.\n\t\t * Writes are only relevant for old K7 processors,\n\t\t * all pre-dating SVM, but a recommended workaround from\n\t\t * AMD for these chips. It is possible to speicify the\n\t\t * affected processor models on the command line, hence\n\t\t * the need to ignore the workaround.\n\t\t */\n\t\tbreak;\n\tcase HV_X64_MSR_GUEST_OS_ID ... HV_X64_MSR_SINT15:\n\t\tif (kvm_hv_msr_partition_wide(msr)) {\n\t\t\tint r;\n\t\t\tmutex_lock(&vcpu->kvm->lock);\n\t\t\tr = set_msr_hyperv_pw(vcpu, msr, data);\n\t\t\tmutex_unlock(&vcpu->kvm->lock);\n\t\t\treturn r;\n\t\t} else\n\t\t\treturn set_msr_hyperv(vcpu, msr, data);\n\t\tbreak;\n\tdefault:\n\t\tif (msr && (msr == vcpu->kvm->arch.xen_hvm_config.msr))\n\t\t\treturn xen_hvm_config(vcpu, data);\n\t\tif (!ignore_msrs) {\n\t\t\tpr_unimpl(vcpu, \"unhandled wrmsr: 0x%x data %llx\\n\",\n\t\t\t\tmsr, data);\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tpr_unimpl(vcpu, \"ignored wrmsr: 0x%x data %llx\\n\",\n\t\t\t\tmsr, data);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_set_msr_common);\n\n\n/*\n * Reads an msr value (of 'msr_index') into 'pdata'.\n * Returns 0 on success, non-0 otherwise.\n * Assumes vcpu_load() was already called.\n */\nint kvm_get_msr(struct kvm_vcpu *vcpu, u32 msr_index, u64 *pdata)\n{\n\treturn kvm_x86_ops->get_msr(vcpu, msr_index, pdata);\n}\n\nstatic int get_msr_mtrr(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata)\n{\n\tu64 *p = (u64 *)&vcpu->arch.mtrr_state.fixed_ranges;\n\n\tif (!msr_mtrr_valid(msr))\n\t\treturn 1;\n\n\tif (msr == MSR_MTRRdefType)\n\t\t*pdata = vcpu->arch.mtrr_state.def_type +\n\t\t\t (vcpu->arch.mtrr_state.enabled << 10);\n\telse if (msr == MSR_MTRRfix64K_00000)\n\t\t*pdata = p[0];\n\telse if (msr == MSR_MTRRfix16K_80000 || msr == MSR_MTRRfix16K_A0000)\n\t\t*pdata = p[1 + msr - MSR_MTRRfix16K_80000];\n\telse if (msr >= MSR_MTRRfix4K_C0000 && msr <= MSR_MTRRfix4K_F8000)\n\t\t*pdata = p[3 + msr - MSR_MTRRfix4K_C0000];\n\telse if (msr == MSR_IA32_CR_PAT)\n\t\t*pdata = vcpu->arch.pat;\n\telse {\t/* Variable MTRRs */\n\t\tint idx, is_mtrr_mask;\n\t\tu64 *pt;\n\n\t\tidx = (msr - 0x200) / 2;\n\t\tis_mtrr_mask = msr - 0x200 - 2 * idx;\n\t\tif (!is_mtrr_mask)\n\t\t\tpt =\n\t\t\t  (u64 *)&vcpu->arch.mtrr_state.var_ranges[idx].base_lo;\n\t\telse\n\t\t\tpt =\n\t\t\t  (u64 *)&vcpu->arch.mtrr_state.var_ranges[idx].mask_lo;\n\t\t*pdata = *pt;\n\t}\n\n\treturn 0;\n}\n\nstatic int get_msr_mce(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata)\n{\n\tu64 data;\n\tu64 mcg_cap = vcpu->arch.mcg_cap;\n\tunsigned bank_num = mcg_cap & 0xff;\n\n\tswitch (msr) {\n\tcase MSR_IA32_P5_MC_ADDR:\n\tcase MSR_IA32_P5_MC_TYPE:\n\t\tdata = 0;\n\t\tbreak;\n\tcase MSR_IA32_MCG_CAP:\n\t\tdata = vcpu->arch.mcg_cap;\n\t\tbreak;\n\tcase MSR_IA32_MCG_CTL:\n\t\tif (!(mcg_cap & MCG_CTL_P))\n\t\t\treturn 1;\n\t\tdata = vcpu->arch.mcg_ctl;\n\t\tbreak;\n\tcase MSR_IA32_MCG_STATUS:\n\t\tdata = vcpu->arch.mcg_status;\n\t\tbreak;\n\tdefault:\n\t\tif (msr >= MSR_IA32_MC0_CTL &&\n\t\t    msr < MSR_IA32_MC0_CTL + 4 * bank_num) {\n\t\t\tu32 offset = msr - MSR_IA32_MC0_CTL;\n\t\t\tdata = vcpu->arch.mce_banks[offset];\n\t\t\tbreak;\n\t\t}\n\t\treturn 1;\n\t}\n\t*pdata = data;\n\treturn 0;\n}\n\nstatic int get_msr_hyperv_pw(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata)\n{\n\tu64 data = 0;\n\tstruct kvm *kvm = vcpu->kvm;\n\n\tswitch (msr) {\n\tcase HV_X64_MSR_GUEST_OS_ID:\n\t\tdata = kvm->arch.hv_guest_os_id;\n\t\tbreak;\n\tcase HV_X64_MSR_HYPERCALL:\n\t\tdata = kvm->arch.hv_hypercall;\n\t\tbreak;\n\tdefault:\n\t\tpr_unimpl(vcpu, \"Hyper-V unhandled rdmsr: 0x%x\\n\", msr);\n\t\treturn 1;\n\t}\n\n\t*pdata = data;\n\treturn 0;\n}\n\nstatic int get_msr_hyperv(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata)\n{\n\tu64 data = 0;\n\n\tswitch (msr) {\n\tcase HV_X64_MSR_VP_INDEX: {\n\t\tint r;\n\t\tstruct kvm_vcpu *v;\n\t\tkvm_for_each_vcpu(r, v, vcpu->kvm)\n\t\t\tif (v == vcpu)\n\t\t\t\tdata = r;\n\t\tbreak;\n\t}\n\tcase HV_X64_MSR_EOI:\n\t\treturn kvm_hv_vapic_msr_read(vcpu, APIC_EOI, pdata);\n\tcase HV_X64_MSR_ICR:\n\t\treturn kvm_hv_vapic_msr_read(vcpu, APIC_ICR, pdata);\n\tcase HV_X64_MSR_TPR:\n\t\treturn kvm_hv_vapic_msr_read(vcpu, APIC_TASKPRI, pdata);\n\tdefault:\n\t\tpr_unimpl(vcpu, \"Hyper-V unhandled rdmsr: 0x%x\\n\", msr);\n\t\treturn 1;\n\t}\n\t*pdata = data;\n\treturn 0;\n}\n\nint kvm_get_msr_common(struct kvm_vcpu *vcpu, u32 msr, u64 *pdata)\n{\n\tu64 data;\n\n\tswitch (msr) {\n\tcase MSR_IA32_PLATFORM_ID:\n\tcase MSR_IA32_UCODE_REV:\n\tcase MSR_IA32_EBL_CR_POWERON:\n\tcase MSR_IA32_DEBUGCTLMSR:\n\tcase MSR_IA32_LASTBRANCHFROMIP:\n\tcase MSR_IA32_LASTBRANCHTOIP:\n\tcase MSR_IA32_LASTINTFROMIP:\n\tcase MSR_IA32_LASTINTTOIP:\n\tcase MSR_K8_SYSCFG:\n\tcase MSR_K7_HWCR:\n\tcase MSR_VM_HSAVE_PA:\n\tcase MSR_P6_PERFCTR0:\n\tcase MSR_P6_PERFCTR1:\n\tcase MSR_P6_EVNTSEL0:\n\tcase MSR_P6_EVNTSEL1:\n\tcase MSR_K7_EVNTSEL0:\n\tcase MSR_K7_PERFCTR0:\n\tcase MSR_K8_INT_PENDING_MSG:\n\tcase MSR_AMD64_NB_CFG:\n\tcase MSR_FAM10H_MMIO_CONF_BASE:\n\t\tdata = 0;\n\t\tbreak;\n\tcase MSR_MTRRcap:\n\t\tdata = 0x500 | KVM_NR_VAR_MTRR;\n\t\tbreak;\n\tcase 0x200 ... 0x2ff:\n\t\treturn get_msr_mtrr(vcpu, msr, pdata);\n\tcase 0xcd: /* fsb frequency */\n\t\tdata = 3;\n\t\tbreak;\n\t\t/*\n\t\t * MSR_EBC_FREQUENCY_ID\n\t\t * Conservative value valid for even the basic CPU models.\n\t\t * Models 0,1: 000 in bits 23:21 indicating a bus speed of\n\t\t * 100MHz, model 2 000 in bits 18:16 indicating 100MHz,\n\t\t * and 266MHz for model 3, or 4. Set Core Clock\n\t\t * Frequency to System Bus Frequency Ratio to 1 (bits\n\t\t * 31:24) even though these are only valid for CPU\n\t\t * models > 2, however guests may end up dividing or\n\t\t * multiplying by zero otherwise.\n\t\t */\n\tcase MSR_EBC_FREQUENCY_ID:\n\t\tdata = 1 << 24;\n\t\tbreak;\n\tcase MSR_IA32_APICBASE:\n\t\tdata = kvm_get_apic_base(vcpu);\n\t\tbreak;\n\tcase APIC_BASE_MSR ... APIC_BASE_MSR + 0x3ff:\n\t\treturn kvm_x2apic_msr_read(vcpu, msr, pdata);\n\t\tbreak;\n\tcase MSR_IA32_MISC_ENABLE:\n\t\tdata = vcpu->arch.ia32_misc_enable_msr;\n\t\tbreak;\n\tcase MSR_IA32_PERF_STATUS:\n\t\t/* TSC increment by tick */\n\t\tdata = 1000ULL;\n\t\t/* CPU multiplier */\n\t\tdata |= (((uint64_t)4ULL) << 40);\n\t\tbreak;\n\tcase MSR_EFER:\n\t\tdata = vcpu->arch.efer;\n\t\tbreak;\n\tcase MSR_KVM_WALL_CLOCK:\n\tcase MSR_KVM_WALL_CLOCK_NEW:\n\t\tdata = vcpu->kvm->arch.wall_clock;\n\t\tbreak;\n\tcase MSR_KVM_SYSTEM_TIME:\n\tcase MSR_KVM_SYSTEM_TIME_NEW:\n\t\tdata = vcpu->arch.time;\n\t\tbreak;\n\tcase MSR_KVM_ASYNC_PF_EN:\n\t\tdata = vcpu->arch.apf.msr_val;\n\t\tbreak;\n\tcase MSR_IA32_P5_MC_ADDR:\n\tcase MSR_IA32_P5_MC_TYPE:\n\tcase MSR_IA32_MCG_CAP:\n\tcase MSR_IA32_MCG_CTL:\n\tcase MSR_IA32_MCG_STATUS:\n\tcase MSR_IA32_MC0_CTL ... MSR_IA32_MC0_CTL + 4 * KVM_MAX_MCE_BANKS - 1:\n\t\treturn get_msr_mce(vcpu, msr, pdata);\n\tcase MSR_K7_CLK_CTL:\n\t\t/*\n\t\t * Provide expected ramp-up count for K7. All other\n\t\t * are set to zero, indicating minimum divisors for\n\t\t * every field.\n\t\t *\n\t\t * This prevents guest kernels on AMD host with CPU\n\t\t * type 6, model 8 and higher from exploding due to\n\t\t * the rdmsr failing.\n\t\t */\n\t\tdata = 0x20000000;\n\t\tbreak;\n\tcase HV_X64_MSR_GUEST_OS_ID ... HV_X64_MSR_SINT15:\n\t\tif (kvm_hv_msr_partition_wide(msr)) {\n\t\t\tint r;\n\t\t\tmutex_lock(&vcpu->kvm->lock);\n\t\t\tr = get_msr_hyperv_pw(vcpu, msr, pdata);\n\t\t\tmutex_unlock(&vcpu->kvm->lock);\n\t\t\treturn r;\n\t\t} else\n\t\t\treturn get_msr_hyperv(vcpu, msr, pdata);\n\t\tbreak;\n\tdefault:\n\t\tif (!ignore_msrs) {\n\t\t\tpr_unimpl(vcpu, \"unhandled rdmsr: 0x%x\\n\", msr);\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tpr_unimpl(vcpu, \"ignored rdmsr: 0x%x\\n\", msr);\n\t\t\tdata = 0;\n\t\t}\n\t\tbreak;\n\t}\n\t*pdata = data;\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(kvm_get_msr_common);\n\n/*\n * Read or write a bunch of msrs. All parameters are kernel addresses.\n *\n * @return number of msrs set successfully.\n */\nstatic int __msr_io(struct kvm_vcpu *vcpu, struct kvm_msrs *msrs,\n\t\t    struct kvm_msr_entry *entries,\n\t\t    int (*do_msr)(struct kvm_vcpu *vcpu,\n\t\t\t\t  unsigned index, u64 *data))\n{\n\tint i, idx;\n\n\tidx = srcu_read_lock(&vcpu->kvm->srcu);\n\tfor (i = 0; i < msrs->nmsrs; ++i)\n\t\tif (do_msr(vcpu, entries[i].index, &entries[i].data))\n\t\t\tbreak;\n\tsrcu_read_unlock(&vcpu->kvm->srcu, idx);\n\n\treturn i;\n}\n\n/*\n * Read or write a bunch of msrs. Parameters are user addresses.\n *\n * @return number of msrs set successfully.\n */\nstatic int msr_io(struct kvm_vcpu *vcpu, struct kvm_msrs __user *user_msrs,\n\t\t  int (*do_msr)(struct kvm_vcpu *vcpu,\n\t\t\t\tunsigned index, u64 *data),\n\t\t  int writeback)\n{\n\tstruct kvm_msrs msrs;\n\tstruct kvm_msr_entry *entries;\n\tint r, n;\n\tunsigned size;\n\n\tr = -EFAULT;\n\tif (copy_from_user(&msrs, user_msrs, sizeof msrs))\n\t\tgoto out;\n\n\tr = -E2BIG;\n\tif (msrs.nmsrs >= MAX_IO_MSRS)\n\t\tgoto out;\n\n\tr = -ENOMEM;\n\tsize = sizeof(struct kvm_msr_entry) * msrs.nmsrs;\n\tentries = kmalloc(size, GFP_KERNEL);\n\tif (!entries)\n\t\tgoto out;\n\n\tr = -EFAULT;\n\tif (copy_from_user(entries, user_msrs->entries, size))\n\t\tgoto out_free;\n\n\tr = n = __msr_io(vcpu, &msrs, entries, do_msr);\n\tif (r < 0)\n\t\tgoto out_free;\n\n\tr = -EFAULT;\n\tif (writeback && copy_to_user(user_msrs->entries, entries, size))\n\t\tgoto out_free;\n\n\tr = n;\n\nout_free:\n\tkfree(entries);\nout:\n\treturn r;\n}\n\nint kvm_dev_ioctl_check_extension(long ext)\n{\n\tint r;\n\n\tswitch (ext) {\n\tcase KVM_CAP_IRQCHIP:\n\tcase KVM_CAP_HLT:\n\tcase KVM_CAP_MMU_SHADOW_CACHE_CONTROL:\n\tcase KVM_CAP_SET_TSS_ADDR:\n\tcase KVM_CAP_EXT_CPUID:\n\tcase KVM_CAP_CLOCKSOURCE:\n\tcase KVM_CAP_PIT:\n\tcase KVM_CAP_NOP_IO_DELAY:\n\tcase KVM_CAP_MP_STATE:\n\tcase KVM_CAP_SYNC_MMU:\n\tcase KVM_CAP_REINJECT_CONTROL:\n\tcase KVM_CAP_IRQ_INJECT_STATUS:\n\tcase KVM_CAP_ASSIGN_DEV_IRQ:\n\tcase KVM_CAP_IRQFD:\n\tcase KVM_CAP_IOEVENTFD:\n\tcase KVM_CAP_PIT2:\n\tcase KVM_CAP_PIT_STATE2:\n\tcase KVM_CAP_SET_IDENTITY_MAP_ADDR:\n\tcase KVM_CAP_XEN_HVM:\n\tcase KVM_CAP_ADJUST_CLOCK:\n\tcase KVM_CAP_VCPU_EVENTS:\n\tcase KVM_CAP_HYPERV:\n\tcase KVM_CAP_HYPERV_VAPIC:\n\tcase KVM_CAP_HYPERV_SPIN:\n\tcase KVM_CAP_PCI_SEGMENT:\n\tcase KVM_CAP_DEBUGREGS:\n\tcase KVM_CAP_X86_ROBUST_SINGLESTEP:\n\tcase KVM_CAP_XSAVE:\n\tcase KVM_CAP_ASYNC_PF:\n\t\tr = 1;\n\t\tbreak;\n\tcase KVM_CAP_COALESCED_MMIO:\n\t\tr = KVM_COALESCED_MMIO_PAGE_OFFSET;\n\t\tbreak;\n\tcase KVM_CAP_VAPIC:\n\t\tr = !kvm_x86_ops->cpu_has_accelerated_tpr();\n\t\tbreak;\n\tcase KVM_CAP_NR_VCPUS:\n\t\tr = KVM_MAX_VCPUS;\n\t\tbreak;\n\tcase KVM_CAP_NR_MEMSLOTS:\n\t\tr = KVM_MEMORY_SLOTS;\n\t\tbreak;\n\tcase KVM_CAP_PV_MMU:\t/* obsolete */\n\t\tr = 0;\n\t\tbreak;\n\tcase KVM_CAP_IOMMU:\n\t\tr = iommu_found();\n\t\tbreak;\n\tcase KVM_CAP_MCE:\n\t\tr = KVM_MAX_MCE_BANKS;\n\t\tbreak;\n\tcase KVM_CAP_XCRS:\n\t\tr = cpu_has_xsave;\n\t\tbreak;\n\tdefault:\n\t\tr = 0;\n\t\tbreak;\n\t}\n\treturn r;\n\n}\n\nlong kvm_arch_dev_ioctl(struct file *filp,\n\t\t\tunsigned int ioctl, unsigned long arg)\n{\n\tvoid __user *argp = (void __user *)arg;\n\tlong r;\n\n\tswitch (ioctl) {\n\tcase KVM_GET_MSR_INDEX_LIST: {\n\t\tstruct kvm_msr_list __user *user_msr_list = argp;\n\t\tstruct kvm_msr_list msr_list;\n\t\tunsigned n;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&msr_list, user_msr_list, sizeof msr_list))\n\t\t\tgoto out;\n\t\tn = msr_list.nmsrs;\n\t\tmsr_list.nmsrs = num_msrs_to_save + ARRAY_SIZE(emulated_msrs);\n\t\tif (copy_to_user(user_msr_list, &msr_list, sizeof msr_list))\n\t\t\tgoto out;\n\t\tr = -E2BIG;\n\t\tif (n < msr_list.nmsrs)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(user_msr_list->indices, &msrs_to_save,\n\t\t\t\t num_msrs_to_save * sizeof(u32)))\n\t\t\tgoto out;\n\t\tif (copy_to_user(user_msr_list->indices + num_msrs_to_save,\n\t\t\t\t &emulated_msrs,\n\t\t\t\t ARRAY_SIZE(emulated_msrs) * sizeof(u32)))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_GET_SUPPORTED_CPUID: {\n\t\tstruct kvm_cpuid2 __user *cpuid_arg = argp;\n\t\tstruct kvm_cpuid2 cpuid;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&cpuid, cpuid_arg, sizeof cpuid))\n\t\t\tgoto out;\n\t\tr = kvm_dev_ioctl_get_supported_cpuid(&cpuid,\n\t\t\t\t\t\t      cpuid_arg->entries);\n\t\tif (r)\n\t\t\tgoto out;\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(cpuid_arg, &cpuid, sizeof cpuid))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_X86_GET_MCE_CAP_SUPPORTED: {\n\t\tu64 mce_cap;\n\n\t\tmce_cap = KVM_MCE_CAP_SUPPORTED;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &mce_cap, sizeof mce_cap))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tdefault:\n\t\tr = -EINVAL;\n\t}\nout:\n\treturn r;\n}\n\nstatic void wbinvd_ipi(void *garbage)\n{\n\twbinvd();\n}\n\nstatic bool need_emulate_wbinvd(struct kvm_vcpu *vcpu)\n{\n\treturn vcpu->kvm->arch.iommu_domain &&\n\t\t!(vcpu->kvm->arch.iommu_flags & KVM_IOMMU_CACHE_COHERENCY);\n}\n\nvoid kvm_arch_vcpu_load(struct kvm_vcpu *vcpu, int cpu)\n{\n\t/* Address WBINVD may be executed by guest */\n\tif (need_emulate_wbinvd(vcpu)) {\n\t\tif (kvm_x86_ops->has_wbinvd_exit())\n\t\t\tcpumask_set_cpu(cpu, vcpu->arch.wbinvd_dirty_mask);\n\t\telse if (vcpu->cpu != -1 && vcpu->cpu != cpu)\n\t\t\tsmp_call_function_single(vcpu->cpu,\n\t\t\t\t\twbinvd_ipi, NULL, 1);\n\t}\n\n\tkvm_x86_ops->vcpu_load(vcpu, cpu);\n\tif (unlikely(vcpu->cpu != cpu) || check_tsc_unstable()) {\n\t\t/* Make sure TSC doesn't go backwards */\n\t\ts64 tsc_delta = !vcpu->arch.last_host_tsc ? 0 :\n\t\t\t\tnative_read_tsc() - vcpu->arch.last_host_tsc;\n\t\tif (tsc_delta < 0)\n\t\t\tmark_tsc_unstable(\"KVM discovered backwards TSC\");\n\t\tif (check_tsc_unstable()) {\n\t\t\tkvm_x86_ops->adjust_tsc_offset(vcpu, -tsc_delta);\n\t\t\tvcpu->arch.tsc_catchup = 1;\n\t\t\tkvm_make_request(KVM_REQ_CLOCK_UPDATE, vcpu);\n\t\t}\n\t\tif (vcpu->cpu != cpu)\n\t\t\tkvm_migrate_timers(vcpu);\n\t\tvcpu->cpu = cpu;\n\t}\n}\n\nvoid kvm_arch_vcpu_put(struct kvm_vcpu *vcpu)\n{\n\tkvm_x86_ops->vcpu_put(vcpu);\n\tkvm_put_guest_fpu(vcpu);\n\tvcpu->arch.last_host_tsc = native_read_tsc();\n}\n\nstatic int is_efer_nx(void)\n{\n\tunsigned long long efer = 0;\n\n\trdmsrl_safe(MSR_EFER, &efer);\n\treturn efer & EFER_NX;\n}\n\nstatic void cpuid_fix_nx_cap(struct kvm_vcpu *vcpu)\n{\n\tint i;\n\tstruct kvm_cpuid_entry2 *e, *entry;\n\n\tentry = NULL;\n\tfor (i = 0; i < vcpu->arch.cpuid_nent; ++i) {\n\t\te = &vcpu->arch.cpuid_entries[i];\n\t\tif (e->function == 0x80000001) {\n\t\t\tentry = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (entry && (entry->edx & (1 << 20)) && !is_efer_nx()) {\n\t\tentry->edx &= ~(1 << 20);\n\t\tprintk(KERN_INFO \"kvm: guest NX capability removed\\n\");\n\t}\n}\n\n/* when an old userspace process fills a new kernel module */\nstatic int kvm_vcpu_ioctl_set_cpuid(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_cpuid *cpuid,\n\t\t\t\t    struct kvm_cpuid_entry __user *entries)\n{\n\tint r, i;\n\tstruct kvm_cpuid_entry *cpuid_entries;\n\n\tr = -E2BIG;\n\tif (cpuid->nent > KVM_MAX_CPUID_ENTRIES)\n\t\tgoto out;\n\tr = -ENOMEM;\n\tcpuid_entries = vmalloc(sizeof(struct kvm_cpuid_entry) * cpuid->nent);\n\tif (!cpuid_entries)\n\t\tgoto out;\n\tr = -EFAULT;\n\tif (copy_from_user(cpuid_entries, entries,\n\t\t\t   cpuid->nent * sizeof(struct kvm_cpuid_entry)))\n\t\tgoto out_free;\n\tfor (i = 0; i < cpuid->nent; i++) {\n\t\tvcpu->arch.cpuid_entries[i].function = cpuid_entries[i].function;\n\t\tvcpu->arch.cpuid_entries[i].eax = cpuid_entries[i].eax;\n\t\tvcpu->arch.cpuid_entries[i].ebx = cpuid_entries[i].ebx;\n\t\tvcpu->arch.cpuid_entries[i].ecx = cpuid_entries[i].ecx;\n\t\tvcpu->arch.cpuid_entries[i].edx = cpuid_entries[i].edx;\n\t\tvcpu->arch.cpuid_entries[i].index = 0;\n\t\tvcpu->arch.cpuid_entries[i].flags = 0;\n\t\tvcpu->arch.cpuid_entries[i].padding[0] = 0;\n\t\tvcpu->arch.cpuid_entries[i].padding[1] = 0;\n\t\tvcpu->arch.cpuid_entries[i].padding[2] = 0;\n\t}\n\tvcpu->arch.cpuid_nent = cpuid->nent;\n\tcpuid_fix_nx_cap(vcpu);\n\tr = 0;\n\tkvm_apic_set_version(vcpu);\n\tkvm_x86_ops->cpuid_update(vcpu);\n\tupdate_cpuid(vcpu);\n\nout_free:\n\tvfree(cpuid_entries);\nout:\n\treturn r;\n}\n\nstatic int kvm_vcpu_ioctl_set_cpuid2(struct kvm_vcpu *vcpu,\n\t\t\t\t     struct kvm_cpuid2 *cpuid,\n\t\t\t\t     struct kvm_cpuid_entry2 __user *entries)\n{\n\tint r;\n\n\tr = -E2BIG;\n\tif (cpuid->nent > KVM_MAX_CPUID_ENTRIES)\n\t\tgoto out;\n\tr = -EFAULT;\n\tif (copy_from_user(&vcpu->arch.cpuid_entries, entries,\n\t\t\t   cpuid->nent * sizeof(struct kvm_cpuid_entry2)))\n\t\tgoto out;\n\tvcpu->arch.cpuid_nent = cpuid->nent;\n\tkvm_apic_set_version(vcpu);\n\tkvm_x86_ops->cpuid_update(vcpu);\n\tupdate_cpuid(vcpu);\n\treturn 0;\n\nout:\n\treturn r;\n}\n\nstatic int kvm_vcpu_ioctl_get_cpuid2(struct kvm_vcpu *vcpu,\n\t\t\t\t     struct kvm_cpuid2 *cpuid,\n\t\t\t\t     struct kvm_cpuid_entry2 __user *entries)\n{\n\tint r;\n\n\tr = -E2BIG;\n\tif (cpuid->nent < vcpu->arch.cpuid_nent)\n\t\tgoto out;\n\tr = -EFAULT;\n\tif (copy_to_user(entries, &vcpu->arch.cpuid_entries,\n\t\t\t vcpu->arch.cpuid_nent * sizeof(struct kvm_cpuid_entry2)))\n\t\tgoto out;\n\treturn 0;\n\nout:\n\tcpuid->nent = vcpu->arch.cpuid_nent;\n\treturn r;\n}\n\nstatic void cpuid_mask(u32 *word, int wordnum)\n{\n\t*word &= boot_cpu_data.x86_capability[wordnum];\n}\n\nstatic void do_cpuid_1_ent(struct kvm_cpuid_entry2 *entry, u32 function,\n\t\t\t   u32 index)\n{\n\tentry->function = function;\n\tentry->index = index;\n\tcpuid_count(entry->function, entry->index,\n\t\t    &entry->eax, &entry->ebx, &entry->ecx, &entry->edx);\n\tentry->flags = 0;\n}\n\n#define F(x) bit(X86_FEATURE_##x)\n\nstatic void do_cpuid_ent(struct kvm_cpuid_entry2 *entry, u32 function,\n\t\t\t u32 index, int *nent, int maxnent)\n{\n\tunsigned f_nx = is_efer_nx() ? F(NX) : 0;\n#ifdef CONFIG_X86_64\n\tunsigned f_gbpages = (kvm_x86_ops->get_lpage_level() == PT_PDPE_LEVEL)\n\t\t\t\t? F(GBPAGES) : 0;\n\tunsigned f_lm = F(LM);\n#else\n\tunsigned f_gbpages = 0;\n\tunsigned f_lm = 0;\n#endif\n\tunsigned f_rdtscp = kvm_x86_ops->rdtscp_supported() ? F(RDTSCP) : 0;\n\n\t/* cpuid 1.edx */\n\tconst u32 kvm_supported_word0_x86_features =\n\t\tF(FPU) | F(VME) | F(DE) | F(PSE) |\n\t\tF(TSC) | F(MSR) | F(PAE) | F(MCE) |\n\t\tF(CX8) | F(APIC) | 0 /* Reserved */ | F(SEP) |\n\t\tF(MTRR) | F(PGE) | F(MCA) | F(CMOV) |\n\t\tF(PAT) | F(PSE36) | 0 /* PSN */ | F(CLFLSH) |\n\t\t0 /* Reserved, DS, ACPI */ | F(MMX) |\n\t\tF(FXSR) | F(XMM) | F(XMM2) | F(SELFSNOOP) |\n\t\t0 /* HTT, TM, Reserved, PBE */;\n\t/* cpuid 0x80000001.edx */\n\tconst u32 kvm_supported_word1_x86_features =\n\t\tF(FPU) | F(VME) | F(DE) | F(PSE) |\n\t\tF(TSC) | F(MSR) | F(PAE) | F(MCE) |\n\t\tF(CX8) | F(APIC) | 0 /* Reserved */ | F(SYSCALL) |\n\t\tF(MTRR) | F(PGE) | F(MCA) | F(CMOV) |\n\t\tF(PAT) | F(PSE36) | 0 /* Reserved */ |\n\t\tf_nx | 0 /* Reserved */ | F(MMXEXT) | F(MMX) |\n\t\tF(FXSR) | F(FXSR_OPT) | f_gbpages | f_rdtscp |\n\t\t0 /* Reserved */ | f_lm | F(3DNOWEXT) | F(3DNOW);\n\t/* cpuid 1.ecx */\n\tconst u32 kvm_supported_word4_x86_features =\n\t\tF(XMM3) | F(PCLMULQDQ) | 0 /* DTES64, MONITOR */ |\n\t\t0 /* DS-CPL, VMX, SMX, EST */ |\n\t\t0 /* TM2 */ | F(SSSE3) | 0 /* CNXT-ID */ | 0 /* Reserved */ |\n\t\t0 /* Reserved */ | F(CX16) | 0 /* xTPR Update, PDCM */ |\n\t\t0 /* Reserved, DCA */ | F(XMM4_1) |\n\t\tF(XMM4_2) | F(X2APIC) | F(MOVBE) | F(POPCNT) |\n\t\t0 /* Reserved*/ | F(AES) | F(XSAVE) | 0 /* OSXSAVE */ | F(AVX) |\n\t\tF(F16C);\n\t/* cpuid 0x80000001.ecx */\n\tconst u32 kvm_supported_word6_x86_features =\n\t\tF(LAHF_LM) | F(CMP_LEGACY) | 0 /*SVM*/ | 0 /* ExtApicSpace */ |\n\t\tF(CR8_LEGACY) | F(ABM) | F(SSE4A) | F(MISALIGNSSE) |\n\t\tF(3DNOWPREFETCH) | 0 /* OSVW */ | 0 /* IBS */ | F(XOP) |\n\t\t0 /* SKINIT, WDT, LWP */ | F(FMA4) | F(TBM);\n\n\t/* all calls to cpuid_count() should be made on the same cpu */\n\tget_cpu();\n\tdo_cpuid_1_ent(entry, function, index);\n\t++*nent;\n\n\tswitch (function) {\n\tcase 0:\n\t\tentry->eax = min(entry->eax, (u32)0xd);\n\t\tbreak;\n\tcase 1:\n\t\tentry->edx &= kvm_supported_word0_x86_features;\n\t\tcpuid_mask(&entry->edx, 0);\n\t\tentry->ecx &= kvm_supported_word4_x86_features;\n\t\tcpuid_mask(&entry->ecx, 4);\n\t\t/* we support x2apic emulation even if host does not support\n\t\t * it since we emulate x2apic in software */\n\t\tentry->ecx |= F(X2APIC);\n\t\tbreak;\n\t/* function 2 entries are STATEFUL. That is, repeated cpuid commands\n\t * may return different values. This forces us to get_cpu() before\n\t * issuing the first command, and also to emulate this annoying behavior\n\t * in kvm_emulate_cpuid() using KVM_CPUID_FLAG_STATE_READ_NEXT */\n\tcase 2: {\n\t\tint t, times = entry->eax & 0xff;\n\n\t\tentry->flags |= KVM_CPUID_FLAG_STATEFUL_FUNC;\n\t\tentry->flags |= KVM_CPUID_FLAG_STATE_READ_NEXT;\n\t\tfor (t = 1; t < times && *nent < maxnent; ++t) {\n\t\t\tdo_cpuid_1_ent(&entry[t], function, 0);\n\t\t\tentry[t].flags |= KVM_CPUID_FLAG_STATEFUL_FUNC;\n\t\t\t++*nent;\n\t\t}\n\t\tbreak;\n\t}\n\t/* function 4 and 0xb have additional index. */\n\tcase 4: {\n\t\tint i, cache_type;\n\n\t\tentry->flags |= KVM_CPUID_FLAG_SIGNIFCANT_INDEX;\n\t\t/* read more entries until cache_type is zero */\n\t\tfor (i = 1; *nent < maxnent; ++i) {\n\t\t\tcache_type = entry[i - 1].eax & 0x1f;\n\t\t\tif (!cache_type)\n\t\t\t\tbreak;\n\t\t\tdo_cpuid_1_ent(&entry[i], function, i);\n\t\t\tentry[i].flags |=\n\t\t\t       KVM_CPUID_FLAG_SIGNIFCANT_INDEX;\n\t\t\t++*nent;\n\t\t}\n\t\tbreak;\n\t}\n\tcase 0xb: {\n\t\tint i, level_type;\n\n\t\tentry->flags |= KVM_CPUID_FLAG_SIGNIFCANT_INDEX;\n\t\t/* read more entries until level_type is zero */\n\t\tfor (i = 1; *nent < maxnent; ++i) {\n\t\t\tlevel_type = entry[i - 1].ecx & 0xff00;\n\t\t\tif (!level_type)\n\t\t\t\tbreak;\n\t\t\tdo_cpuid_1_ent(&entry[i], function, i);\n\t\t\tentry[i].flags |=\n\t\t\t       KVM_CPUID_FLAG_SIGNIFCANT_INDEX;\n\t\t\t++*nent;\n\t\t}\n\t\tbreak;\n\t}\n\tcase 0xd: {\n\t\tint i;\n\n\t\tentry->flags |= KVM_CPUID_FLAG_SIGNIFCANT_INDEX;\n\t\tfor (i = 1; *nent < maxnent; ++i) {\n\t\t\tif (entry[i - 1].eax == 0 && i != 2)\n\t\t\t\tbreak;\n\t\t\tdo_cpuid_1_ent(&entry[i], function, i);\n\t\t\tentry[i].flags |=\n\t\t\t       KVM_CPUID_FLAG_SIGNIFCANT_INDEX;\n\t\t\t++*nent;\n\t\t}\n\t\tbreak;\n\t}\n\tcase KVM_CPUID_SIGNATURE: {\n\t\tchar signature[12] = \"KVMKVMKVM\\0\\0\";\n\t\tu32 *sigptr = (u32 *)signature;\n\t\tentry->eax = 0;\n\t\tentry->ebx = sigptr[0];\n\t\tentry->ecx = sigptr[1];\n\t\tentry->edx = sigptr[2];\n\t\tbreak;\n\t}\n\tcase KVM_CPUID_FEATURES:\n\t\tentry->eax = (1 << KVM_FEATURE_CLOCKSOURCE) |\n\t\t\t     (1 << KVM_FEATURE_NOP_IO_DELAY) |\n\t\t\t     (1 << KVM_FEATURE_CLOCKSOURCE2) |\n\t\t\t     (1 << KVM_FEATURE_CLOCKSOURCE_STABLE_BIT);\n\t\tentry->ebx = 0;\n\t\tentry->ecx = 0;\n\t\tentry->edx = 0;\n\t\tbreak;\n\tcase 0x80000000:\n\t\tentry->eax = min(entry->eax, 0x8000001a);\n\t\tbreak;\n\tcase 0x80000001:\n\t\tentry->edx &= kvm_supported_word1_x86_features;\n\t\tcpuid_mask(&entry->edx, 1);\n\t\tentry->ecx &= kvm_supported_word6_x86_features;\n\t\tcpuid_mask(&entry->ecx, 6);\n\t\tbreak;\n\t}\n\n\tkvm_x86_ops->set_supported_cpuid(function, entry);\n\n\tput_cpu();\n}\n\n#undef F\n\nstatic int kvm_dev_ioctl_get_supported_cpuid(struct kvm_cpuid2 *cpuid,\n\t\t\t\t     struct kvm_cpuid_entry2 __user *entries)\n{\n\tstruct kvm_cpuid_entry2 *cpuid_entries;\n\tint limit, nent = 0, r = -E2BIG;\n\tu32 func;\n\n\tif (cpuid->nent < 1)\n\t\tgoto out;\n\tif (cpuid->nent > KVM_MAX_CPUID_ENTRIES)\n\t\tcpuid->nent = KVM_MAX_CPUID_ENTRIES;\n\tr = -ENOMEM;\n\tcpuid_entries = vmalloc(sizeof(struct kvm_cpuid_entry2) * cpuid->nent);\n\tif (!cpuid_entries)\n\t\tgoto out;\n\n\tdo_cpuid_ent(&cpuid_entries[0], 0, 0, &nent, cpuid->nent);\n\tlimit = cpuid_entries[0].eax;\n\tfor (func = 1; func <= limit && nent < cpuid->nent; ++func)\n\t\tdo_cpuid_ent(&cpuid_entries[nent], func, 0,\n\t\t\t     &nent, cpuid->nent);\n\tr = -E2BIG;\n\tif (nent >= cpuid->nent)\n\t\tgoto out_free;\n\n\tdo_cpuid_ent(&cpuid_entries[nent], 0x80000000, 0, &nent, cpuid->nent);\n\tlimit = cpuid_entries[nent - 1].eax;\n\tfor (func = 0x80000001; func <= limit && nent < cpuid->nent; ++func)\n\t\tdo_cpuid_ent(&cpuid_entries[nent], func, 0,\n\t\t\t     &nent, cpuid->nent);\n\n\n\n\tr = -E2BIG;\n\tif (nent >= cpuid->nent)\n\t\tgoto out_free;\n\n\tdo_cpuid_ent(&cpuid_entries[nent], KVM_CPUID_SIGNATURE, 0, &nent,\n\t\t     cpuid->nent);\n\n\tr = -E2BIG;\n\tif (nent >= cpuid->nent)\n\t\tgoto out_free;\n\n\tdo_cpuid_ent(&cpuid_entries[nent], KVM_CPUID_FEATURES, 0, &nent,\n\t\t     cpuid->nent);\n\n\tr = -E2BIG;\n\tif (nent >= cpuid->nent)\n\t\tgoto out_free;\n\n\tr = -EFAULT;\n\tif (copy_to_user(entries, cpuid_entries,\n\t\t\t nent * sizeof(struct kvm_cpuid_entry2)))\n\t\tgoto out_free;\n\tcpuid->nent = nent;\n\tr = 0;\n\nout_free:\n\tvfree(cpuid_entries);\nout:\n\treturn r;\n}\n\nstatic int kvm_vcpu_ioctl_get_lapic(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_lapic_state *s)\n{\n\tmemcpy(s->regs, vcpu->arch.apic->regs, sizeof *s);\n\n\treturn 0;\n}\n\nstatic int kvm_vcpu_ioctl_set_lapic(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_lapic_state *s)\n{\n\tmemcpy(vcpu->arch.apic->regs, s->regs, sizeof *s);\n\tkvm_apic_post_state_restore(vcpu);\n\tupdate_cr8_intercept(vcpu);\n\n\treturn 0;\n}\n\nstatic int kvm_vcpu_ioctl_interrupt(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_interrupt *irq)\n{\n\tif (irq->irq < 0 || irq->irq >= 256)\n\t\treturn -EINVAL;\n\tif (irqchip_in_kernel(vcpu->kvm))\n\t\treturn -ENXIO;\n\n\tkvm_queue_interrupt(vcpu, irq->irq, false);\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\n\treturn 0;\n}\n\nstatic int kvm_vcpu_ioctl_nmi(struct kvm_vcpu *vcpu)\n{\n\tkvm_inject_nmi(vcpu);\n\n\treturn 0;\n}\n\nstatic int vcpu_ioctl_tpr_access_reporting(struct kvm_vcpu *vcpu,\n\t\t\t\t\t   struct kvm_tpr_access_ctl *tac)\n{\n\tif (tac->flags)\n\t\treturn -EINVAL;\n\tvcpu->arch.tpr_access_reporting = !!tac->enabled;\n\treturn 0;\n}\n\nstatic int kvm_vcpu_ioctl_x86_setup_mce(struct kvm_vcpu *vcpu,\n\t\t\t\t\tu64 mcg_cap)\n{\n\tint r;\n\tunsigned bank_num = mcg_cap & 0xff, bank;\n\n\tr = -EINVAL;\n\tif (!bank_num || bank_num >= KVM_MAX_MCE_BANKS)\n\t\tgoto out;\n\tif (mcg_cap & ~(KVM_MCE_CAP_SUPPORTED | 0xff | 0xff0000))\n\t\tgoto out;\n\tr = 0;\n\tvcpu->arch.mcg_cap = mcg_cap;\n\t/* Init IA32_MCG_CTL to all 1s */\n\tif (mcg_cap & MCG_CTL_P)\n\t\tvcpu->arch.mcg_ctl = ~(u64)0;\n\t/* Init IA32_MCi_CTL to all 1s */\n\tfor (bank = 0; bank < bank_num; bank++)\n\t\tvcpu->arch.mce_banks[bank*4] = ~(u64)0;\nout:\n\treturn r;\n}\n\nstatic int kvm_vcpu_ioctl_x86_set_mce(struct kvm_vcpu *vcpu,\n\t\t\t\t      struct kvm_x86_mce *mce)\n{\n\tu64 mcg_cap = vcpu->arch.mcg_cap;\n\tunsigned bank_num = mcg_cap & 0xff;\n\tu64 *banks = vcpu->arch.mce_banks;\n\n\tif (mce->bank >= bank_num || !(mce->status & MCI_STATUS_VAL))\n\t\treturn -EINVAL;\n\t/*\n\t * if IA32_MCG_CTL is not all 1s, the uncorrected error\n\t * reporting is disabled\n\t */\n\tif ((mce->status & MCI_STATUS_UC) && (mcg_cap & MCG_CTL_P) &&\n\t    vcpu->arch.mcg_ctl != ~(u64)0)\n\t\treturn 0;\n\tbanks += 4 * mce->bank;\n\t/*\n\t * if IA32_MCi_CTL is not all 1s, the uncorrected error\n\t * reporting is disabled for the bank\n\t */\n\tif ((mce->status & MCI_STATUS_UC) && banks[0] != ~(u64)0)\n\t\treturn 0;\n\tif (mce->status & MCI_STATUS_UC) {\n\t\tif ((vcpu->arch.mcg_status & MCG_STATUS_MCIP) ||\n\t\t    !kvm_read_cr4_bits(vcpu, X86_CR4_MCE)) {\n\t\t\tprintk(KERN_DEBUG \"kvm: set_mce: \"\n\t\t\t       \"injects mce exception while \"\n\t\t\t       \"previous one is in progress!\\n\");\n\t\t\tkvm_make_request(KVM_REQ_TRIPLE_FAULT, vcpu);\n\t\t\treturn 0;\n\t\t}\n\t\tif (banks[1] & MCI_STATUS_VAL)\n\t\t\tmce->status |= MCI_STATUS_OVER;\n\t\tbanks[2] = mce->addr;\n\t\tbanks[3] = mce->misc;\n\t\tvcpu->arch.mcg_status = mce->mcg_status;\n\t\tbanks[1] = mce->status;\n\t\tkvm_queue_exception(vcpu, MC_VECTOR);\n\t} else if (!(banks[1] & MCI_STATUS_VAL)\n\t\t   || !(banks[1] & MCI_STATUS_UC)) {\n\t\tif (banks[1] & MCI_STATUS_VAL)\n\t\t\tmce->status |= MCI_STATUS_OVER;\n\t\tbanks[2] = mce->addr;\n\t\tbanks[3] = mce->misc;\n\t\tbanks[1] = mce->status;\n\t} else\n\t\tbanks[1] |= MCI_STATUS_OVER;\n\treturn 0;\n}\n\nstatic void kvm_vcpu_ioctl_x86_get_vcpu_events(struct kvm_vcpu *vcpu,\n\t\t\t\t\t       struct kvm_vcpu_events *events)\n{\n\tevents->exception.injected =\n\t\tvcpu->arch.exception.pending &&\n\t\t!kvm_exception_is_soft(vcpu->arch.exception.nr);\n\tevents->exception.nr = vcpu->arch.exception.nr;\n\tevents->exception.has_error_code = vcpu->arch.exception.has_error_code;\n\tevents->exception.pad = 0;\n\tevents->exception.error_code = vcpu->arch.exception.error_code;\n\n\tevents->interrupt.injected =\n\t\tvcpu->arch.interrupt.pending && !vcpu->arch.interrupt.soft;\n\tevents->interrupt.nr = vcpu->arch.interrupt.nr;\n\tevents->interrupt.soft = 0;\n\tevents->interrupt.shadow =\n\t\tkvm_x86_ops->get_interrupt_shadow(vcpu,\n\t\t\tKVM_X86_SHADOW_INT_MOV_SS | KVM_X86_SHADOW_INT_STI);\n\n\tevents->nmi.injected = vcpu->arch.nmi_injected;\n\tevents->nmi.pending = vcpu->arch.nmi_pending;\n\tevents->nmi.masked = kvm_x86_ops->get_nmi_mask(vcpu);\n\tevents->nmi.pad = 0;\n\n\tevents->sipi_vector = vcpu->arch.sipi_vector;\n\n\tevents->flags = (KVM_VCPUEVENT_VALID_NMI_PENDING\n\t\t\t | KVM_VCPUEVENT_VALID_SIPI_VECTOR\n\t\t\t | KVM_VCPUEVENT_VALID_SHADOW);\n\tmemset(&events->reserved, 0, sizeof(events->reserved));\n}\n\nstatic int kvm_vcpu_ioctl_x86_set_vcpu_events(struct kvm_vcpu *vcpu,\n\t\t\t\t\t      struct kvm_vcpu_events *events)\n{\n\tif (events->flags & ~(KVM_VCPUEVENT_VALID_NMI_PENDING\n\t\t\t      | KVM_VCPUEVENT_VALID_SIPI_VECTOR\n\t\t\t      | KVM_VCPUEVENT_VALID_SHADOW))\n\t\treturn -EINVAL;\n\n\tvcpu->arch.exception.pending = events->exception.injected;\n\tvcpu->arch.exception.nr = events->exception.nr;\n\tvcpu->arch.exception.has_error_code = events->exception.has_error_code;\n\tvcpu->arch.exception.error_code = events->exception.error_code;\n\n\tvcpu->arch.interrupt.pending = events->interrupt.injected;\n\tvcpu->arch.interrupt.nr = events->interrupt.nr;\n\tvcpu->arch.interrupt.soft = events->interrupt.soft;\n\tif (vcpu->arch.interrupt.pending && irqchip_in_kernel(vcpu->kvm))\n\t\tkvm_pic_clear_isr_ack(vcpu->kvm);\n\tif (events->flags & KVM_VCPUEVENT_VALID_SHADOW)\n\t\tkvm_x86_ops->set_interrupt_shadow(vcpu,\n\t\t\t\t\t\t  events->interrupt.shadow);\n\n\tvcpu->arch.nmi_injected = events->nmi.injected;\n\tif (events->flags & KVM_VCPUEVENT_VALID_NMI_PENDING)\n\t\tvcpu->arch.nmi_pending = events->nmi.pending;\n\tkvm_x86_ops->set_nmi_mask(vcpu, events->nmi.masked);\n\n\tif (events->flags & KVM_VCPUEVENT_VALID_SIPI_VECTOR)\n\t\tvcpu->arch.sipi_vector = events->sipi_vector;\n\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\n\treturn 0;\n}\n\nstatic void kvm_vcpu_ioctl_x86_get_debugregs(struct kvm_vcpu *vcpu,\n\t\t\t\t\t     struct kvm_debugregs *dbgregs)\n{\n\tmemcpy(dbgregs->db, vcpu->arch.db, sizeof(vcpu->arch.db));\n\tdbgregs->dr6 = vcpu->arch.dr6;\n\tdbgregs->dr7 = vcpu->arch.dr7;\n\tdbgregs->flags = 0;\n\tmemset(&dbgregs->reserved, 0, sizeof(dbgregs->reserved));\n}\n\nstatic int kvm_vcpu_ioctl_x86_set_debugregs(struct kvm_vcpu *vcpu,\n\t\t\t\t\t    struct kvm_debugregs *dbgregs)\n{\n\tif (dbgregs->flags)\n\t\treturn -EINVAL;\n\n\tmemcpy(vcpu->arch.db, dbgregs->db, sizeof(vcpu->arch.db));\n\tvcpu->arch.dr6 = dbgregs->dr6;\n\tvcpu->arch.dr7 = dbgregs->dr7;\n\n\treturn 0;\n}\n\nstatic void kvm_vcpu_ioctl_x86_get_xsave(struct kvm_vcpu *vcpu,\n\t\t\t\t\t struct kvm_xsave *guest_xsave)\n{\n\tif (cpu_has_xsave)\n\t\tmemcpy(guest_xsave->region,\n\t\t\t&vcpu->arch.guest_fpu.state->xsave,\n\t\t\txstate_size);\n\telse {\n\t\tmemcpy(guest_xsave->region,\n\t\t\t&vcpu->arch.guest_fpu.state->fxsave,\n\t\t\tsizeof(struct i387_fxsave_struct));\n\t\t*(u64 *)&guest_xsave->region[XSAVE_HDR_OFFSET / sizeof(u32)] =\n\t\t\tXSTATE_FPSSE;\n\t}\n}\n\nstatic int kvm_vcpu_ioctl_x86_set_xsave(struct kvm_vcpu *vcpu,\n\t\t\t\t\tstruct kvm_xsave *guest_xsave)\n{\n\tu64 xstate_bv =\n\t\t*(u64 *)&guest_xsave->region[XSAVE_HDR_OFFSET / sizeof(u32)];\n\n\tif (cpu_has_xsave)\n\t\tmemcpy(&vcpu->arch.guest_fpu.state->xsave,\n\t\t\tguest_xsave->region, xstate_size);\n\telse {\n\t\tif (xstate_bv & ~XSTATE_FPSSE)\n\t\t\treturn -EINVAL;\n\t\tmemcpy(&vcpu->arch.guest_fpu.state->fxsave,\n\t\t\tguest_xsave->region, sizeof(struct i387_fxsave_struct));\n\t}\n\treturn 0;\n}\n\nstatic void kvm_vcpu_ioctl_x86_get_xcrs(struct kvm_vcpu *vcpu,\n\t\t\t\t\tstruct kvm_xcrs *guest_xcrs)\n{\n\tif (!cpu_has_xsave) {\n\t\tguest_xcrs->nr_xcrs = 0;\n\t\treturn;\n\t}\n\n\tguest_xcrs->nr_xcrs = 1;\n\tguest_xcrs->flags = 0;\n\tguest_xcrs->xcrs[0].xcr = XCR_XFEATURE_ENABLED_MASK;\n\tguest_xcrs->xcrs[0].value = vcpu->arch.xcr0;\n}\n\nstatic int kvm_vcpu_ioctl_x86_set_xcrs(struct kvm_vcpu *vcpu,\n\t\t\t\t       struct kvm_xcrs *guest_xcrs)\n{\n\tint i, r = 0;\n\n\tif (!cpu_has_xsave)\n\t\treturn -EINVAL;\n\n\tif (guest_xcrs->nr_xcrs > KVM_MAX_XCRS || guest_xcrs->flags)\n\t\treturn -EINVAL;\n\n\tfor (i = 0; i < guest_xcrs->nr_xcrs; i++)\n\t\t/* Only support XCR0 currently */\n\t\tif (guest_xcrs->xcrs[0].xcr == XCR_XFEATURE_ENABLED_MASK) {\n\t\t\tr = __kvm_set_xcr(vcpu, XCR_XFEATURE_ENABLED_MASK,\n\t\t\t\tguest_xcrs->xcrs[0].value);\n\t\t\tbreak;\n\t\t}\n\tif (r)\n\t\tr = -EINVAL;\n\treturn r;\n}\n\nlong kvm_arch_vcpu_ioctl(struct file *filp,\n\t\t\t unsigned int ioctl, unsigned long arg)\n{\n\tstruct kvm_vcpu *vcpu = filp->private_data;\n\tvoid __user *argp = (void __user *)arg;\n\tint r;\n\tunion {\n\t\tstruct kvm_lapic_state *lapic;\n\t\tstruct kvm_xsave *xsave;\n\t\tstruct kvm_xcrs *xcrs;\n\t\tvoid *buffer;\n\t} u;\n\n\tu.buffer = NULL;\n\tswitch (ioctl) {\n\tcase KVM_GET_LAPIC: {\n\t\tr = -EINVAL;\n\t\tif (!vcpu->arch.apic)\n\t\t\tgoto out;\n\t\tu.lapic = kzalloc(sizeof(struct kvm_lapic_state), GFP_KERNEL);\n\n\t\tr = -ENOMEM;\n\t\tif (!u.lapic)\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_get_lapic(vcpu, u.lapic);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, u.lapic, sizeof(struct kvm_lapic_state)))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_LAPIC: {\n\t\tr = -EINVAL;\n\t\tif (!vcpu->arch.apic)\n\t\t\tgoto out;\n\t\tu.lapic = kmalloc(sizeof(struct kvm_lapic_state), GFP_KERNEL);\n\t\tr = -ENOMEM;\n\t\tif (!u.lapic)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(u.lapic, argp, sizeof(struct kvm_lapic_state)))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_set_lapic(vcpu, u.lapic);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_INTERRUPT: {\n\t\tstruct kvm_interrupt irq;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&irq, argp, sizeof irq))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_interrupt(vcpu, &irq);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_NMI: {\n\t\tr = kvm_vcpu_ioctl_nmi(vcpu);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_CPUID: {\n\t\tstruct kvm_cpuid __user *cpuid_arg = argp;\n\t\tstruct kvm_cpuid cpuid;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&cpuid, cpuid_arg, sizeof cpuid))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_set_cpuid(vcpu, &cpuid, cpuid_arg->entries);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tbreak;\n\t}\n\tcase KVM_SET_CPUID2: {\n\t\tstruct kvm_cpuid2 __user *cpuid_arg = argp;\n\t\tstruct kvm_cpuid2 cpuid;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&cpuid, cpuid_arg, sizeof cpuid))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_set_cpuid2(vcpu, &cpuid,\n\t\t\t\t\t      cpuid_arg->entries);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tbreak;\n\t}\n\tcase KVM_GET_CPUID2: {\n\t\tstruct kvm_cpuid2 __user *cpuid_arg = argp;\n\t\tstruct kvm_cpuid2 cpuid;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&cpuid, cpuid_arg, sizeof cpuid))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_get_cpuid2(vcpu, &cpuid,\n\t\t\t\t\t      cpuid_arg->entries);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(cpuid_arg, &cpuid, sizeof cpuid))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_GET_MSRS:\n\t\tr = msr_io(vcpu, argp, kvm_get_msr, 1);\n\t\tbreak;\n\tcase KVM_SET_MSRS:\n\t\tr = msr_io(vcpu, argp, do_set_msr, 0);\n\t\tbreak;\n\tcase KVM_TPR_ACCESS_REPORTING: {\n\t\tstruct kvm_tpr_access_ctl tac;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&tac, argp, sizeof tac))\n\t\t\tgoto out;\n\t\tr = vcpu_ioctl_tpr_access_reporting(vcpu, &tac);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &tac, sizeof tac))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t};\n\tcase KVM_SET_VAPIC_ADDR: {\n\t\tstruct kvm_vapic_addr va;\n\n\t\tr = -EINVAL;\n\t\tif (!irqchip_in_kernel(vcpu->kvm))\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&va, argp, sizeof va))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tkvm_lapic_set_vapic_addr(vcpu, va.vapic_addr);\n\t\tbreak;\n\t}\n\tcase KVM_X86_SETUP_MCE: {\n\t\tu64 mcg_cap;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&mcg_cap, argp, sizeof mcg_cap))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_x86_setup_mce(vcpu, mcg_cap);\n\t\tbreak;\n\t}\n\tcase KVM_X86_SET_MCE: {\n\t\tstruct kvm_x86_mce mce;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&mce, argp, sizeof mce))\n\t\t\tgoto out;\n\t\tr = kvm_vcpu_ioctl_x86_set_mce(vcpu, &mce);\n\t\tbreak;\n\t}\n\tcase KVM_GET_VCPU_EVENTS: {\n\t\tstruct kvm_vcpu_events events;\n\n\t\tkvm_vcpu_ioctl_x86_get_vcpu_events(vcpu, &events);\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &events, sizeof(struct kvm_vcpu_events)))\n\t\t\tbreak;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_VCPU_EVENTS: {\n\t\tstruct kvm_vcpu_events events;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&events, argp, sizeof(struct kvm_vcpu_events)))\n\t\t\tbreak;\n\n\t\tr = kvm_vcpu_ioctl_x86_set_vcpu_events(vcpu, &events);\n\t\tbreak;\n\t}\n\tcase KVM_GET_DEBUGREGS: {\n\t\tstruct kvm_debugregs dbgregs;\n\n\t\tkvm_vcpu_ioctl_x86_get_debugregs(vcpu, &dbgregs);\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &dbgregs,\n\t\t\t\t sizeof(struct kvm_debugregs)))\n\t\t\tbreak;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_DEBUGREGS: {\n\t\tstruct kvm_debugregs dbgregs;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&dbgregs, argp,\n\t\t\t\t   sizeof(struct kvm_debugregs)))\n\t\t\tbreak;\n\n\t\tr = kvm_vcpu_ioctl_x86_set_debugregs(vcpu, &dbgregs);\n\t\tbreak;\n\t}\n\tcase KVM_GET_XSAVE: {\n\t\tu.xsave = kzalloc(sizeof(struct kvm_xsave), GFP_KERNEL);\n\t\tr = -ENOMEM;\n\t\tif (!u.xsave)\n\t\t\tbreak;\n\n\t\tkvm_vcpu_ioctl_x86_get_xsave(vcpu, u.xsave);\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, u.xsave, sizeof(struct kvm_xsave)))\n\t\t\tbreak;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_XSAVE: {\n\t\tu.xsave = kzalloc(sizeof(struct kvm_xsave), GFP_KERNEL);\n\t\tr = -ENOMEM;\n\t\tif (!u.xsave)\n\t\t\tbreak;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(u.xsave, argp, sizeof(struct kvm_xsave)))\n\t\t\tbreak;\n\n\t\tr = kvm_vcpu_ioctl_x86_set_xsave(vcpu, u.xsave);\n\t\tbreak;\n\t}\n\tcase KVM_GET_XCRS: {\n\t\tu.xcrs = kzalloc(sizeof(struct kvm_xcrs), GFP_KERNEL);\n\t\tr = -ENOMEM;\n\t\tif (!u.xcrs)\n\t\t\tbreak;\n\n\t\tkvm_vcpu_ioctl_x86_get_xcrs(vcpu, u.xcrs);\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, u.xcrs,\n\t\t\t\t sizeof(struct kvm_xcrs)))\n\t\t\tbreak;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_XCRS: {\n\t\tu.xcrs = kzalloc(sizeof(struct kvm_xcrs), GFP_KERNEL);\n\t\tr = -ENOMEM;\n\t\tif (!u.xcrs)\n\t\t\tbreak;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(u.xcrs, argp,\n\t\t\t\t   sizeof(struct kvm_xcrs)))\n\t\t\tbreak;\n\n\t\tr = kvm_vcpu_ioctl_x86_set_xcrs(vcpu, u.xcrs);\n\t\tbreak;\n\t}\n\tdefault:\n\t\tr = -EINVAL;\n\t}\nout:\n\tkfree(u.buffer);\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_set_tss_addr(struct kvm *kvm, unsigned long addr)\n{\n\tint ret;\n\n\tif (addr > (unsigned int)(-3 * PAGE_SIZE))\n\t\treturn -1;\n\tret = kvm_x86_ops->set_tss_addr(kvm, addr);\n\treturn ret;\n}\n\nstatic int kvm_vm_ioctl_set_identity_map_addr(struct kvm *kvm,\n\t\t\t\t\t      u64 ident_addr)\n{\n\tkvm->arch.ept_identity_map_addr = ident_addr;\n\treturn 0;\n}\n\nstatic int kvm_vm_ioctl_set_nr_mmu_pages(struct kvm *kvm,\n\t\t\t\t\t  u32 kvm_nr_mmu_pages)\n{\n\tif (kvm_nr_mmu_pages < KVM_MIN_ALLOC_MMU_PAGES)\n\t\treturn -EINVAL;\n\n\tmutex_lock(&kvm->slots_lock);\n\tspin_lock(&kvm->mmu_lock);\n\n\tkvm_mmu_change_mmu_pages(kvm, kvm_nr_mmu_pages);\n\tkvm->arch.n_requested_mmu_pages = kvm_nr_mmu_pages;\n\n\tspin_unlock(&kvm->mmu_lock);\n\tmutex_unlock(&kvm->slots_lock);\n\treturn 0;\n}\n\nstatic int kvm_vm_ioctl_get_nr_mmu_pages(struct kvm *kvm)\n{\n\treturn kvm->arch.n_max_mmu_pages;\n}\n\nstatic int kvm_vm_ioctl_get_irqchip(struct kvm *kvm, struct kvm_irqchip *chip)\n{\n\tint r;\n\n\tr = 0;\n\tswitch (chip->chip_id) {\n\tcase KVM_IRQCHIP_PIC_MASTER:\n\t\tmemcpy(&chip->chip.pic,\n\t\t\t&pic_irqchip(kvm)->pics[0],\n\t\t\tsizeof(struct kvm_pic_state));\n\t\tbreak;\n\tcase KVM_IRQCHIP_PIC_SLAVE:\n\t\tmemcpy(&chip->chip.pic,\n\t\t\t&pic_irqchip(kvm)->pics[1],\n\t\t\tsizeof(struct kvm_pic_state));\n\t\tbreak;\n\tcase KVM_IRQCHIP_IOAPIC:\n\t\tr = kvm_get_ioapic(kvm, &chip->chip.ioapic);\n\t\tbreak;\n\tdefault:\n\t\tr = -EINVAL;\n\t\tbreak;\n\t}\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_set_irqchip(struct kvm *kvm, struct kvm_irqchip *chip)\n{\n\tint r;\n\n\tr = 0;\n\tswitch (chip->chip_id) {\n\tcase KVM_IRQCHIP_PIC_MASTER:\n\t\tspin_lock(&pic_irqchip(kvm)->lock);\n\t\tmemcpy(&pic_irqchip(kvm)->pics[0],\n\t\t\t&chip->chip.pic,\n\t\t\tsizeof(struct kvm_pic_state));\n\t\tspin_unlock(&pic_irqchip(kvm)->lock);\n\t\tbreak;\n\tcase KVM_IRQCHIP_PIC_SLAVE:\n\t\tspin_lock(&pic_irqchip(kvm)->lock);\n\t\tmemcpy(&pic_irqchip(kvm)->pics[1],\n\t\t\t&chip->chip.pic,\n\t\t\tsizeof(struct kvm_pic_state));\n\t\tspin_unlock(&pic_irqchip(kvm)->lock);\n\t\tbreak;\n\tcase KVM_IRQCHIP_IOAPIC:\n\t\tr = kvm_set_ioapic(kvm, &chip->chip.ioapic);\n\t\tbreak;\n\tdefault:\n\t\tr = -EINVAL;\n\t\tbreak;\n\t}\n\tkvm_pic_update_irq(pic_irqchip(kvm));\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_get_pit(struct kvm *kvm, struct kvm_pit_state *ps)\n{\n\tint r = 0;\n\n\tmutex_lock(&kvm->arch.vpit->pit_state.lock);\n\tmemcpy(ps, &kvm->arch.vpit->pit_state, sizeof(struct kvm_pit_state));\n\tmutex_unlock(&kvm->arch.vpit->pit_state.lock);\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_set_pit(struct kvm *kvm, struct kvm_pit_state *ps)\n{\n\tint r = 0;\n\n\tmutex_lock(&kvm->arch.vpit->pit_state.lock);\n\tmemcpy(&kvm->arch.vpit->pit_state, ps, sizeof(struct kvm_pit_state));\n\tkvm_pit_load_count(kvm, 0, ps->channels[0].count, 0);\n\tmutex_unlock(&kvm->arch.vpit->pit_state.lock);\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_get_pit2(struct kvm *kvm, struct kvm_pit_state2 *ps)\n{\n\tint r = 0;\n\n\tmutex_lock(&kvm->arch.vpit->pit_state.lock);\n\tmemcpy(ps->channels, &kvm->arch.vpit->pit_state.channels,\n\t\tsizeof(ps->channels));\n\tps->flags = kvm->arch.vpit->pit_state.flags;\n\tmutex_unlock(&kvm->arch.vpit->pit_state.lock);\n\tmemset(&ps->reserved, 0, sizeof(ps->reserved));\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_set_pit2(struct kvm *kvm, struct kvm_pit_state2 *ps)\n{\n\tint r = 0, start = 0;\n\tu32 prev_legacy, cur_legacy;\n\tmutex_lock(&kvm->arch.vpit->pit_state.lock);\n\tprev_legacy = kvm->arch.vpit->pit_state.flags & KVM_PIT_FLAGS_HPET_LEGACY;\n\tcur_legacy = ps->flags & KVM_PIT_FLAGS_HPET_LEGACY;\n\tif (!prev_legacy && cur_legacy)\n\t\tstart = 1;\n\tmemcpy(&kvm->arch.vpit->pit_state.channels, &ps->channels,\n\t       sizeof(kvm->arch.vpit->pit_state.channels));\n\tkvm->arch.vpit->pit_state.flags = ps->flags;\n\tkvm_pit_load_count(kvm, 0, kvm->arch.vpit->pit_state.channels[0].count, start);\n\tmutex_unlock(&kvm->arch.vpit->pit_state.lock);\n\treturn r;\n}\n\nstatic int kvm_vm_ioctl_reinject(struct kvm *kvm,\n\t\t\t\t struct kvm_reinject_control *control)\n{\n\tif (!kvm->arch.vpit)\n\t\treturn -ENXIO;\n\tmutex_lock(&kvm->arch.vpit->pit_state.lock);\n\tkvm->arch.vpit->pit_state.pit_timer.reinject = control->pit_reinject;\n\tmutex_unlock(&kvm->arch.vpit->pit_state.lock);\n\treturn 0;\n}\n\n/*\n * Get (and clear) the dirty memory log for a memory slot.\n */\nint kvm_vm_ioctl_get_dirty_log(struct kvm *kvm,\n\t\t\t\t      struct kvm_dirty_log *log)\n{\n\tint r, i;\n\tstruct kvm_memory_slot *memslot;\n\tunsigned long n;\n\tunsigned long is_dirty = 0;\n\n\tmutex_lock(&kvm->slots_lock);\n\n\tr = -EINVAL;\n\tif (log->slot >= KVM_MEMORY_SLOTS)\n\t\tgoto out;\n\n\tmemslot = &kvm->memslots->memslots[log->slot];\n\tr = -ENOENT;\n\tif (!memslot->dirty_bitmap)\n\t\tgoto out;\n\n\tn = kvm_dirty_bitmap_bytes(memslot);\n\n\tfor (i = 0; !is_dirty && i < n/sizeof(long); i++)\n\t\tis_dirty = memslot->dirty_bitmap[i];\n\n\t/* If nothing is dirty, don't bother messing with page tables. */\n\tif (is_dirty) {\n\t\tstruct kvm_memslots *slots, *old_slots;\n\t\tunsigned long *dirty_bitmap;\n\n\t\tdirty_bitmap = memslot->dirty_bitmap_head;\n\t\tif (memslot->dirty_bitmap == dirty_bitmap)\n\t\t\tdirty_bitmap += n / sizeof(long);\n\t\tmemset(dirty_bitmap, 0, n);\n\n\t\tr = -ENOMEM;\n\t\tslots = kzalloc(sizeof(struct kvm_memslots), GFP_KERNEL);\n\t\tif (!slots)\n\t\t\tgoto out;\n\t\tmemcpy(slots, kvm->memslots, sizeof(struct kvm_memslots));\n\t\tslots->memslots[log->slot].dirty_bitmap = dirty_bitmap;\n\t\tslots->generation++;\n\n\t\told_slots = kvm->memslots;\n\t\trcu_assign_pointer(kvm->memslots, slots);\n\t\tsynchronize_srcu_expedited(&kvm->srcu);\n\t\tdirty_bitmap = old_slots->memslots[log->slot].dirty_bitmap;\n\t\tkfree(old_slots);\n\n\t\tspin_lock(&kvm->mmu_lock);\n\t\tkvm_mmu_slot_remove_write_access(kvm, log->slot);\n\t\tspin_unlock(&kvm->mmu_lock);\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(log->dirty_bitmap, dirty_bitmap, n))\n\t\t\tgoto out;\n\t} else {\n\t\tr = -EFAULT;\n\t\tif (clear_user(log->dirty_bitmap, n))\n\t\t\tgoto out;\n\t}\n\n\tr = 0;\nout:\n\tmutex_unlock(&kvm->slots_lock);\n\treturn r;\n}\n\nlong kvm_arch_vm_ioctl(struct file *filp,\n\t\t       unsigned int ioctl, unsigned long arg)\n{\n\tstruct kvm *kvm = filp->private_data;\n\tvoid __user *argp = (void __user *)arg;\n\tint r = -ENOTTY;\n\t/*\n\t * This union makes it completely explicit to gcc-3.x\n\t * that these two variables' stack usage should be\n\t * combined, not added together.\n\t */\n\tunion {\n\t\tstruct kvm_pit_state ps;\n\t\tstruct kvm_pit_state2 ps2;\n\t\tstruct kvm_pit_config pit_config;\n\t} u;\n\n\tswitch (ioctl) {\n\tcase KVM_SET_TSS_ADDR:\n\t\tr = kvm_vm_ioctl_set_tss_addr(kvm, arg);\n\t\tif (r < 0)\n\t\t\tgoto out;\n\t\tbreak;\n\tcase KVM_SET_IDENTITY_MAP_ADDR: {\n\t\tu64 ident_addr;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&ident_addr, argp, sizeof ident_addr))\n\t\t\tgoto out;\n\t\tr = kvm_vm_ioctl_set_identity_map_addr(kvm, ident_addr);\n\t\tif (r < 0)\n\t\t\tgoto out;\n\t\tbreak;\n\t}\n\tcase KVM_SET_NR_MMU_PAGES:\n\t\tr = kvm_vm_ioctl_set_nr_mmu_pages(kvm, arg);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tbreak;\n\tcase KVM_GET_NR_MMU_PAGES:\n\t\tr = kvm_vm_ioctl_get_nr_mmu_pages(kvm);\n\t\tbreak;\n\tcase KVM_CREATE_IRQCHIP: {\n\t\tstruct kvm_pic *vpic;\n\n\t\tmutex_lock(&kvm->lock);\n\t\tr = -EEXIST;\n\t\tif (kvm->arch.vpic)\n\t\t\tgoto create_irqchip_unlock;\n\t\tr = -ENOMEM;\n\t\tvpic = kvm_create_pic(kvm);\n\t\tif (vpic) {\n\t\t\tr = kvm_ioapic_init(kvm);\n\t\t\tif (r) {\n\t\t\t\tkvm_io_bus_unregister_dev(kvm, KVM_PIO_BUS,\n\t\t\t\t\t\t\t  &vpic->dev);\n\t\t\t\tkfree(vpic);\n\t\t\t\tgoto create_irqchip_unlock;\n\t\t\t}\n\t\t} else\n\t\t\tgoto create_irqchip_unlock;\n\t\tsmp_wmb();\n\t\tkvm->arch.vpic = vpic;\n\t\tsmp_wmb();\n\t\tr = kvm_setup_default_irq_routing(kvm);\n\t\tif (r) {\n\t\t\tmutex_lock(&kvm->irq_lock);\n\t\t\tkvm_ioapic_destroy(kvm);\n\t\t\tkvm_destroy_pic(kvm);\n\t\t\tmutex_unlock(&kvm->irq_lock);\n\t\t}\n\tcreate_irqchip_unlock:\n\t\tmutex_unlock(&kvm->lock);\n\t\tbreak;\n\t}\n\tcase KVM_CREATE_PIT:\n\t\tu.pit_config.flags = KVM_PIT_SPEAKER_DUMMY;\n\t\tgoto create_pit;\n\tcase KVM_CREATE_PIT2:\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&u.pit_config, argp,\n\t\t\t\t   sizeof(struct kvm_pit_config)))\n\t\t\tgoto out;\n\tcreate_pit:\n\t\tmutex_lock(&kvm->slots_lock);\n\t\tr = -EEXIST;\n\t\tif (kvm->arch.vpit)\n\t\t\tgoto create_pit_unlock;\n\t\tr = -ENOMEM;\n\t\tkvm->arch.vpit = kvm_create_pit(kvm, u.pit_config.flags);\n\t\tif (kvm->arch.vpit)\n\t\t\tr = 0;\n\tcreate_pit_unlock:\n\t\tmutex_unlock(&kvm->slots_lock);\n\t\tbreak;\n\tcase KVM_IRQ_LINE_STATUS:\n\tcase KVM_IRQ_LINE: {\n\t\tstruct kvm_irq_level irq_event;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&irq_event, argp, sizeof irq_event))\n\t\t\tgoto out;\n\t\tr = -ENXIO;\n\t\tif (irqchip_in_kernel(kvm)) {\n\t\t\t__s32 status;\n\t\t\tstatus = kvm_set_irq(kvm, KVM_USERSPACE_IRQ_SOURCE_ID,\n\t\t\t\t\tirq_event.irq, irq_event.level);\n\t\t\tif (ioctl == KVM_IRQ_LINE_STATUS) {\n\t\t\t\tr = -EFAULT;\n\t\t\t\tirq_event.status = status;\n\t\t\t\tif (copy_to_user(argp, &irq_event,\n\t\t\t\t\t\t\tsizeof irq_event))\n\t\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tr = 0;\n\t\t}\n\t\tbreak;\n\t}\n\tcase KVM_GET_IRQCHIP: {\n\t\t/* 0: PIC master, 1: PIC slave, 2: IOAPIC */\n\t\tstruct kvm_irqchip *chip = kmalloc(sizeof(*chip), GFP_KERNEL);\n\n\t\tr = -ENOMEM;\n\t\tif (!chip)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(chip, argp, sizeof *chip))\n\t\t\tgoto get_irqchip_out;\n\t\tr = -ENXIO;\n\t\tif (!irqchip_in_kernel(kvm))\n\t\t\tgoto get_irqchip_out;\n\t\tr = kvm_vm_ioctl_get_irqchip(kvm, chip);\n\t\tif (r)\n\t\t\tgoto get_irqchip_out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, chip, sizeof *chip))\n\t\t\tgoto get_irqchip_out;\n\t\tr = 0;\n\tget_irqchip_out:\n\t\tkfree(chip);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tbreak;\n\t}\n\tcase KVM_SET_IRQCHIP: {\n\t\t/* 0: PIC master, 1: PIC slave, 2: IOAPIC */\n\t\tstruct kvm_irqchip *chip = kmalloc(sizeof(*chip), GFP_KERNEL);\n\n\t\tr = -ENOMEM;\n\t\tif (!chip)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(chip, argp, sizeof *chip))\n\t\t\tgoto set_irqchip_out;\n\t\tr = -ENXIO;\n\t\tif (!irqchip_in_kernel(kvm))\n\t\t\tgoto set_irqchip_out;\n\t\tr = kvm_vm_ioctl_set_irqchip(kvm, chip);\n\t\tif (r)\n\t\t\tgoto set_irqchip_out;\n\t\tr = 0;\n\tset_irqchip_out:\n\t\tkfree(chip);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tbreak;\n\t}\n\tcase KVM_GET_PIT: {\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&u.ps, argp, sizeof(struct kvm_pit_state)))\n\t\t\tgoto out;\n\t\tr = -ENXIO;\n\t\tif (!kvm->arch.vpit)\n\t\t\tgoto out;\n\t\tr = kvm_vm_ioctl_get_pit(kvm, &u.ps);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &u.ps, sizeof(struct kvm_pit_state)))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_PIT: {\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&u.ps, argp, sizeof u.ps))\n\t\t\tgoto out;\n\t\tr = -ENXIO;\n\t\tif (!kvm->arch.vpit)\n\t\t\tgoto out;\n\t\tr = kvm_vm_ioctl_set_pit(kvm, &u.ps);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_GET_PIT2: {\n\t\tr = -ENXIO;\n\t\tif (!kvm->arch.vpit)\n\t\t\tgoto out;\n\t\tr = kvm_vm_ioctl_get_pit2(kvm, &u.ps2);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &u.ps2, sizeof(u.ps2)))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_PIT2: {\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&u.ps2, argp, sizeof(u.ps2)))\n\t\t\tgoto out;\n\t\tr = -ENXIO;\n\t\tif (!kvm->arch.vpit)\n\t\t\tgoto out;\n\t\tr = kvm_vm_ioctl_set_pit2(kvm, &u.ps2);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_REINJECT_CONTROL: {\n\t\tstruct kvm_reinject_control control;\n\t\tr =  -EFAULT;\n\t\tif (copy_from_user(&control, argp, sizeof(control)))\n\t\t\tgoto out;\n\t\tr = kvm_vm_ioctl_reinject(kvm, &control);\n\t\tif (r)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_XEN_HVM_CONFIG: {\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&kvm->arch.xen_hvm_config, argp,\n\t\t\t\t   sizeof(struct kvm_xen_hvm_config)))\n\t\t\tgoto out;\n\t\tr = -EINVAL;\n\t\tif (kvm->arch.xen_hvm_config.flags)\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\tcase KVM_SET_CLOCK: {\n\t\tstruct kvm_clock_data user_ns;\n\t\tu64 now_ns;\n\t\ts64 delta;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&user_ns, argp, sizeof(user_ns)))\n\t\t\tgoto out;\n\n\t\tr = -EINVAL;\n\t\tif (user_ns.flags)\n\t\t\tgoto out;\n\n\t\tr = 0;\n\t\tlocal_irq_disable();\n\t\tnow_ns = get_kernel_ns();\n\t\tdelta = user_ns.clock - now_ns;\n\t\tlocal_irq_enable();\n\t\tkvm->arch.kvmclock_offset = delta;\n\t\tbreak;\n\t}\n\tcase KVM_GET_CLOCK: {\n\t\tstruct kvm_clock_data user_ns;\n\t\tu64 now_ns;\n\n\t\tlocal_irq_disable();\n\t\tnow_ns = get_kernel_ns();\n\t\tuser_ns.clock = kvm->arch.kvmclock_offset + now_ns;\n\t\tlocal_irq_enable();\n\t\tuser_ns.flags = 0;\n\t\tmemset(&user_ns.pad, 0, sizeof(user_ns.pad));\n\n\t\tr = -EFAULT;\n\t\tif (copy_to_user(argp, &user_ns, sizeof(user_ns)))\n\t\t\tgoto out;\n\t\tr = 0;\n\t\tbreak;\n\t}\n\n\tdefault:\n\t\t;\n\t}\nout:\n\treturn r;\n}\n\nstatic void kvm_init_msr_list(void)\n{\n\tu32 dummy[2];\n\tunsigned i, j;\n\n\t/* skip the first msrs in the list. KVM-specific */\n\tfor (i = j = KVM_SAVE_MSRS_BEGIN; i < ARRAY_SIZE(msrs_to_save); i++) {\n\t\tif (rdmsr_safe(msrs_to_save[i], &dummy[0], &dummy[1]) < 0)\n\t\t\tcontinue;\n\t\tif (j < i)\n\t\t\tmsrs_to_save[j] = msrs_to_save[i];\n\t\tj++;\n\t}\n\tnum_msrs_to_save = j;\n}\n\nstatic int vcpu_mmio_write(struct kvm_vcpu *vcpu, gpa_t addr, int len,\n\t\t\t   const void *v)\n{\n\tif (vcpu->arch.apic &&\n\t    !kvm_iodevice_write(&vcpu->arch.apic->dev, addr, len, v))\n\t\treturn 0;\n\n\treturn kvm_io_bus_write(vcpu->kvm, KVM_MMIO_BUS, addr, len, v);\n}\n\nstatic int vcpu_mmio_read(struct kvm_vcpu *vcpu, gpa_t addr, int len, void *v)\n{\n\tif (vcpu->arch.apic &&\n\t    !kvm_iodevice_read(&vcpu->arch.apic->dev, addr, len, v))\n\t\treturn 0;\n\n\treturn kvm_io_bus_read(vcpu->kvm, KVM_MMIO_BUS, addr, len, v);\n}\n\nstatic void kvm_set_segment(struct kvm_vcpu *vcpu,\n\t\t\tstruct kvm_segment *var, int seg)\n{\n\tkvm_x86_ops->set_segment(vcpu, var, seg);\n}\n\nvoid kvm_get_segment(struct kvm_vcpu *vcpu,\n\t\t     struct kvm_segment *var, int seg)\n{\n\tkvm_x86_ops->get_segment(vcpu, var, seg);\n}\n\nstatic gpa_t translate_gpa(struct kvm_vcpu *vcpu, gpa_t gpa, u32 access)\n{\n\treturn gpa;\n}\n\nstatic gpa_t translate_nested_gpa(struct kvm_vcpu *vcpu, gpa_t gpa, u32 access)\n{\n\tgpa_t t_gpa;\n\tstruct x86_exception exception;\n\n\tBUG_ON(!mmu_is_nested(vcpu));\n\n\t/* NPT walks are always user-walks */\n\taccess |= PFERR_USER_MASK;\n\tt_gpa  = vcpu->arch.mmu.gva_to_gpa(vcpu, gpa, access, &exception);\n\n\treturn t_gpa;\n}\n\ngpa_t kvm_mmu_gva_to_gpa_read(struct kvm_vcpu *vcpu, gva_t gva,\n\t\t\t      struct x86_exception *exception)\n{\n\tu32 access = (kvm_x86_ops->get_cpl(vcpu) == 3) ? PFERR_USER_MASK : 0;\n\treturn vcpu->arch.walk_mmu->gva_to_gpa(vcpu, gva, access, exception);\n}\n\n gpa_t kvm_mmu_gva_to_gpa_fetch(struct kvm_vcpu *vcpu, gva_t gva,\n\t\t\t\tstruct x86_exception *exception)\n{\n\tu32 access = (kvm_x86_ops->get_cpl(vcpu) == 3) ? PFERR_USER_MASK : 0;\n\taccess |= PFERR_FETCH_MASK;\n\treturn vcpu->arch.walk_mmu->gva_to_gpa(vcpu, gva, access, exception);\n}\n\ngpa_t kvm_mmu_gva_to_gpa_write(struct kvm_vcpu *vcpu, gva_t gva,\n\t\t\t       struct x86_exception *exception)\n{\n\tu32 access = (kvm_x86_ops->get_cpl(vcpu) == 3) ? PFERR_USER_MASK : 0;\n\taccess |= PFERR_WRITE_MASK;\n\treturn vcpu->arch.walk_mmu->gva_to_gpa(vcpu, gva, access, exception);\n}\n\n/* uses this to access any guest's mapped memory without checking CPL */\ngpa_t kvm_mmu_gva_to_gpa_system(struct kvm_vcpu *vcpu, gva_t gva,\n\t\t\t\tstruct x86_exception *exception)\n{\n\treturn vcpu->arch.walk_mmu->gva_to_gpa(vcpu, gva, 0, exception);\n}\n\nstatic int kvm_read_guest_virt_helper(gva_t addr, void *val, unsigned int bytes,\n\t\t\t\t      struct kvm_vcpu *vcpu, u32 access,\n\t\t\t\t      struct x86_exception *exception)\n{\n\tvoid *data = val;\n\tint r = X86EMUL_CONTINUE;\n\n\twhile (bytes) {\n\t\tgpa_t gpa = vcpu->arch.walk_mmu->gva_to_gpa(vcpu, addr, access,\n\t\t\t\t\t\t\t    exception);\n\t\tunsigned offset = addr & (PAGE_SIZE-1);\n\t\tunsigned toread = min(bytes, (unsigned)PAGE_SIZE - offset);\n\t\tint ret;\n\n\t\tif (gpa == UNMAPPED_GVA)\n\t\t\treturn X86EMUL_PROPAGATE_FAULT;\n\t\tret = kvm_read_guest(vcpu->kvm, gpa, data, toread);\n\t\tif (ret < 0) {\n\t\t\tr = X86EMUL_IO_NEEDED;\n\t\t\tgoto out;\n\t\t}\n\n\t\tbytes -= toread;\n\t\tdata += toread;\n\t\taddr += toread;\n\t}\nout:\n\treturn r;\n}\n\n/* used for instruction fetching */\nstatic int kvm_fetch_guest_virt(gva_t addr, void *val, unsigned int bytes,\n\t\t\t\tstruct kvm_vcpu *vcpu,\n\t\t\t\tstruct x86_exception *exception)\n{\n\tu32 access = (kvm_x86_ops->get_cpl(vcpu) == 3) ? PFERR_USER_MASK : 0;\n\treturn kvm_read_guest_virt_helper(addr, val, bytes, vcpu,\n\t\t\t\t\t  access | PFERR_FETCH_MASK,\n\t\t\t\t\t  exception);\n}\n\nstatic int kvm_read_guest_virt(gva_t addr, void *val, unsigned int bytes,\n\t\t\t       struct kvm_vcpu *vcpu,\n\t\t\t       struct x86_exception *exception)\n{\n\tu32 access = (kvm_x86_ops->get_cpl(vcpu) == 3) ? PFERR_USER_MASK : 0;\n\treturn kvm_read_guest_virt_helper(addr, val, bytes, vcpu, access,\n\t\t\t\t\t  exception);\n}\n\nstatic int kvm_read_guest_virt_system(gva_t addr, void *val, unsigned int bytes,\n\t\t\t\t      struct kvm_vcpu *vcpu,\n\t\t\t\t      struct x86_exception *exception)\n{\n\treturn kvm_read_guest_virt_helper(addr, val, bytes, vcpu, 0, exception);\n}\n\nstatic int kvm_write_guest_virt_system(gva_t addr, void *val,\n\t\t\t\t       unsigned int bytes,\n\t\t\t\t       struct kvm_vcpu *vcpu,\n\t\t\t\t       struct x86_exception *exception)\n{\n\tvoid *data = val;\n\tint r = X86EMUL_CONTINUE;\n\n\twhile (bytes) {\n\t\tgpa_t gpa =  vcpu->arch.walk_mmu->gva_to_gpa(vcpu, addr,\n\t\t\t\t\t\t\t     PFERR_WRITE_MASK,\n\t\t\t\t\t\t\t     exception);\n\t\tunsigned offset = addr & (PAGE_SIZE-1);\n\t\tunsigned towrite = min(bytes, (unsigned)PAGE_SIZE - offset);\n\t\tint ret;\n\n\t\tif (gpa == UNMAPPED_GVA)\n\t\t\treturn X86EMUL_PROPAGATE_FAULT;\n\t\tret = kvm_write_guest(vcpu->kvm, gpa, data, towrite);\n\t\tif (ret < 0) {\n\t\t\tr = X86EMUL_IO_NEEDED;\n\t\t\tgoto out;\n\t\t}\n\n\t\tbytes -= towrite;\n\t\tdata += towrite;\n\t\taddr += towrite;\n\t}\nout:\n\treturn r;\n}\n\nstatic int emulator_read_emulated(unsigned long addr,\n\t\t\t\t  void *val,\n\t\t\t\t  unsigned int bytes,\n\t\t\t\t  struct x86_exception *exception,\n\t\t\t\t  struct kvm_vcpu *vcpu)\n{\n\tgpa_t                 gpa;\n\n\tif (vcpu->mmio_read_completed) {\n\t\tmemcpy(val, vcpu->mmio_data, bytes);\n\t\ttrace_kvm_mmio(KVM_TRACE_MMIO_READ, bytes,\n\t\t\t       vcpu->mmio_phys_addr, *(u64 *)val);\n\t\tvcpu->mmio_read_completed = 0;\n\t\treturn X86EMUL_CONTINUE;\n\t}\n\n\tgpa = kvm_mmu_gva_to_gpa_read(vcpu, addr, exception);\n\n\tif (gpa == UNMAPPED_GVA)\n\t\treturn X86EMUL_PROPAGATE_FAULT;\n\n\t/* For APIC access vmexit */\n\tif ((gpa & PAGE_MASK) == APIC_DEFAULT_PHYS_BASE)\n\t\tgoto mmio;\n\n\tif (kvm_read_guest_virt(addr, val, bytes, vcpu, exception)\n\t    == X86EMUL_CONTINUE)\n\t\treturn X86EMUL_CONTINUE;\n\nmmio:\n\t/*\n\t * Is this MMIO handled locally?\n\t */\n\tif (!vcpu_mmio_read(vcpu, gpa, bytes, val)) {\n\t\ttrace_kvm_mmio(KVM_TRACE_MMIO_READ, bytes, gpa, *(u64 *)val);\n\t\treturn X86EMUL_CONTINUE;\n\t}\n\n\ttrace_kvm_mmio(KVM_TRACE_MMIO_READ_UNSATISFIED, bytes, gpa, 0);\n\n\tvcpu->mmio_needed = 1;\n\tvcpu->run->exit_reason = KVM_EXIT_MMIO;\n\tvcpu->run->mmio.phys_addr = vcpu->mmio_phys_addr = gpa;\n\tvcpu->run->mmio.len = vcpu->mmio_size = bytes;\n\tvcpu->run->mmio.is_write = vcpu->mmio_is_write = 0;\n\n\treturn X86EMUL_IO_NEEDED;\n}\n\nint emulator_write_phys(struct kvm_vcpu *vcpu, gpa_t gpa,\n\t\t\tconst void *val, int bytes)\n{\n\tint ret;\n\n\tret = kvm_write_guest(vcpu->kvm, gpa, val, bytes);\n\tif (ret < 0)\n\t\treturn 0;\n\tkvm_mmu_pte_write(vcpu, gpa, val, bytes, 1);\n\treturn 1;\n}\n\nstatic int emulator_write_emulated_onepage(unsigned long addr,\n\t\t\t\t\t   const void *val,\n\t\t\t\t\t   unsigned int bytes,\n\t\t\t\t\t   struct x86_exception *exception,\n\t\t\t\t\t   struct kvm_vcpu *vcpu)\n{\n\tgpa_t                 gpa;\n\n\tgpa = kvm_mmu_gva_to_gpa_write(vcpu, addr, exception);\n\n\tif (gpa == UNMAPPED_GVA)\n\t\treturn X86EMUL_PROPAGATE_FAULT;\n\n\t/* For APIC access vmexit */\n\tif ((gpa & PAGE_MASK) == APIC_DEFAULT_PHYS_BASE)\n\t\tgoto mmio;\n\n\tif (emulator_write_phys(vcpu, gpa, val, bytes))\n\t\treturn X86EMUL_CONTINUE;\n\nmmio:\n\ttrace_kvm_mmio(KVM_TRACE_MMIO_WRITE, bytes, gpa, *(u64 *)val);\n\t/*\n\t * Is this MMIO handled locally?\n\t */\n\tif (!vcpu_mmio_write(vcpu, gpa, bytes, val))\n\t\treturn X86EMUL_CONTINUE;\n\n\tvcpu->mmio_needed = 1;\n\tvcpu->run->exit_reason = KVM_EXIT_MMIO;\n\tvcpu->run->mmio.phys_addr = vcpu->mmio_phys_addr = gpa;\n\tvcpu->run->mmio.len = vcpu->mmio_size = bytes;\n\tvcpu->run->mmio.is_write = vcpu->mmio_is_write = 1;\n\tmemcpy(vcpu->run->mmio.data, val, bytes);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nint emulator_write_emulated(unsigned long addr,\n\t\t\t    const void *val,\n\t\t\t    unsigned int bytes,\n\t\t\t    struct x86_exception *exception,\n\t\t\t    struct kvm_vcpu *vcpu)\n{\n\t/* Crossing a page boundary? */\n\tif (((addr + bytes - 1) ^ addr) & PAGE_MASK) {\n\t\tint rc, now;\n\n\t\tnow = -addr & ~PAGE_MASK;\n\t\trc = emulator_write_emulated_onepage(addr, val, now, exception,\n\t\t\t\t\t\t     vcpu);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\treturn rc;\n\t\taddr += now;\n\t\tval += now;\n\t\tbytes -= now;\n\t}\n\treturn emulator_write_emulated_onepage(addr, val, bytes, exception,\n\t\t\t\t\t       vcpu);\n}\n\n#define CMPXCHG_TYPE(t, ptr, old, new) \\\n\t(cmpxchg((t *)(ptr), *(t *)(old), *(t *)(new)) == *(t *)(old))\n\n#ifdef CONFIG_X86_64\n#  define CMPXCHG64(ptr, old, new) CMPXCHG_TYPE(u64, ptr, old, new)\n#else\n#  define CMPXCHG64(ptr, old, new) \\\n\t(cmpxchg64((u64 *)(ptr), *(u64 *)(old), *(u64 *)(new)) == *(u64 *)(old))\n#endif\n\nstatic int emulator_cmpxchg_emulated(unsigned long addr,\n\t\t\t\t     const void *old,\n\t\t\t\t     const void *new,\n\t\t\t\t     unsigned int bytes,\n\t\t\t\t     struct x86_exception *exception,\n\t\t\t\t     struct kvm_vcpu *vcpu)\n{\n\tgpa_t gpa;\n\tstruct page *page;\n\tchar *kaddr;\n\tbool exchanged;\n\n\t/* guests cmpxchg8b have to be emulated atomically */\n\tif (bytes > 8 || (bytes & (bytes - 1)))\n\t\tgoto emul_write;\n\n\tgpa = kvm_mmu_gva_to_gpa_write(vcpu, addr, NULL);\n\n\tif (gpa == UNMAPPED_GVA ||\n\t    (gpa & PAGE_MASK) == APIC_DEFAULT_PHYS_BASE)\n\t\tgoto emul_write;\n\n\tif (((gpa + bytes - 1) & PAGE_MASK) != (gpa & PAGE_MASK))\n\t\tgoto emul_write;\n\n\tpage = gfn_to_page(vcpu->kvm, gpa >> PAGE_SHIFT);\n\tif (is_error_page(page)) {\n\t\tkvm_release_page_clean(page);\n\t\tgoto emul_write;\n\t}\n\n\tkaddr = kmap_atomic(page, KM_USER0);\n\tkaddr += offset_in_page(gpa);\n\tswitch (bytes) {\n\tcase 1:\n\t\texchanged = CMPXCHG_TYPE(u8, kaddr, old, new);\n\t\tbreak;\n\tcase 2:\n\t\texchanged = CMPXCHG_TYPE(u16, kaddr, old, new);\n\t\tbreak;\n\tcase 4:\n\t\texchanged = CMPXCHG_TYPE(u32, kaddr, old, new);\n\t\tbreak;\n\tcase 8:\n\t\texchanged = CMPXCHG64(kaddr, old, new);\n\t\tbreak;\n\tdefault:\n\t\tBUG();\n\t}\n\tkunmap_atomic(kaddr, KM_USER0);\n\tkvm_release_page_dirty(page);\n\n\tif (!exchanged)\n\t\treturn X86EMUL_CMPXCHG_FAILED;\n\n\tkvm_mmu_pte_write(vcpu, gpa, new, bytes, 1);\n\n\treturn X86EMUL_CONTINUE;\n\nemul_write:\n\tprintk_once(KERN_WARNING \"kvm: emulating exchange as write\\n\");\n\n\treturn emulator_write_emulated(addr, new, bytes, exception, vcpu);\n}\n\nstatic int kernel_pio(struct kvm_vcpu *vcpu, void *pd)\n{\n\t/* TODO: String I/O for in kernel device */\n\tint r;\n\n\tif (vcpu->arch.pio.in)\n\t\tr = kvm_io_bus_read(vcpu->kvm, KVM_PIO_BUS, vcpu->arch.pio.port,\n\t\t\t\t    vcpu->arch.pio.size, pd);\n\telse\n\t\tr = kvm_io_bus_write(vcpu->kvm, KVM_PIO_BUS,\n\t\t\t\t     vcpu->arch.pio.port, vcpu->arch.pio.size,\n\t\t\t\t     pd);\n\treturn r;\n}\n\n\nstatic int emulator_pio_in_emulated(int size, unsigned short port, void *val,\n\t\t\t     unsigned int count, struct kvm_vcpu *vcpu)\n{\n\tif (vcpu->arch.pio.count)\n\t\tgoto data_avail;\n\n\ttrace_kvm_pio(0, port, size, 1);\n\n\tvcpu->arch.pio.port = port;\n\tvcpu->arch.pio.in = 1;\n\tvcpu->arch.pio.count  = count;\n\tvcpu->arch.pio.size = size;\n\n\tif (!kernel_pio(vcpu, vcpu->arch.pio_data)) {\n\tdata_avail:\n\t\tmemcpy(val, vcpu->arch.pio_data, size * count);\n\t\tvcpu->arch.pio.count = 0;\n\t\treturn 1;\n\t}\n\n\tvcpu->run->exit_reason = KVM_EXIT_IO;\n\tvcpu->run->io.direction = KVM_EXIT_IO_IN;\n\tvcpu->run->io.size = size;\n\tvcpu->run->io.data_offset = KVM_PIO_PAGE_OFFSET * PAGE_SIZE;\n\tvcpu->run->io.count = count;\n\tvcpu->run->io.port = port;\n\n\treturn 0;\n}\n\nstatic int emulator_pio_out_emulated(int size, unsigned short port,\n\t\t\t      const void *val, unsigned int count,\n\t\t\t      struct kvm_vcpu *vcpu)\n{\n\ttrace_kvm_pio(1, port, size, 1);\n\n\tvcpu->arch.pio.port = port;\n\tvcpu->arch.pio.in = 0;\n\tvcpu->arch.pio.count = count;\n\tvcpu->arch.pio.size = size;\n\n\tmemcpy(vcpu->arch.pio_data, val, size * count);\n\n\tif (!kernel_pio(vcpu, vcpu->arch.pio_data)) {\n\t\tvcpu->arch.pio.count = 0;\n\t\treturn 1;\n\t}\n\n\tvcpu->run->exit_reason = KVM_EXIT_IO;\n\tvcpu->run->io.direction = KVM_EXIT_IO_OUT;\n\tvcpu->run->io.size = size;\n\tvcpu->run->io.data_offset = KVM_PIO_PAGE_OFFSET * PAGE_SIZE;\n\tvcpu->run->io.count = count;\n\tvcpu->run->io.port = port;\n\n\treturn 0;\n}\n\nstatic unsigned long get_segment_base(struct kvm_vcpu *vcpu, int seg)\n{\n\treturn kvm_x86_ops->get_segment_base(vcpu, seg);\n}\n\nint emulate_invlpg(struct kvm_vcpu *vcpu, gva_t address)\n{\n\tkvm_mmu_invlpg(vcpu, address);\n\treturn X86EMUL_CONTINUE;\n}\n\nint kvm_emulate_wbinvd(struct kvm_vcpu *vcpu)\n{\n\tif (!need_emulate_wbinvd(vcpu))\n\t\treturn X86EMUL_CONTINUE;\n\n\tif (kvm_x86_ops->has_wbinvd_exit()) {\n\t\tint cpu = get_cpu();\n\n\t\tcpumask_set_cpu(cpu, vcpu->arch.wbinvd_dirty_mask);\n\t\tsmp_call_function_many(vcpu->arch.wbinvd_dirty_mask,\n\t\t\t\twbinvd_ipi, NULL, 1);\n\t\tput_cpu();\n\t\tcpumask_clear(vcpu->arch.wbinvd_dirty_mask);\n\t} else\n\t\twbinvd();\n\treturn X86EMUL_CONTINUE;\n}\nEXPORT_SYMBOL_GPL(kvm_emulate_wbinvd);\n\nint emulate_clts(struct kvm_vcpu *vcpu)\n{\n\tkvm_x86_ops->set_cr0(vcpu, kvm_read_cr0_bits(vcpu, ~X86_CR0_TS));\n\tkvm_x86_ops->fpu_activate(vcpu);\n\treturn X86EMUL_CONTINUE;\n}\n\nint emulator_get_dr(int dr, unsigned long *dest, struct kvm_vcpu *vcpu)\n{\n\treturn _kvm_get_dr(vcpu, dr, dest);\n}\n\nint emulator_set_dr(int dr, unsigned long value, struct kvm_vcpu *vcpu)\n{\n\n\treturn __kvm_set_dr(vcpu, dr, value);\n}\n\nstatic u64 mk_cr_64(u64 curr_cr, u32 new_val)\n{\n\treturn (curr_cr & ~((1ULL << 32) - 1)) | new_val;\n}\n\nstatic unsigned long emulator_get_cr(int cr, struct kvm_vcpu *vcpu)\n{\n\tunsigned long value;\n\n\tswitch (cr) {\n\tcase 0:\n\t\tvalue = kvm_read_cr0(vcpu);\n\t\tbreak;\n\tcase 2:\n\t\tvalue = vcpu->arch.cr2;\n\t\tbreak;\n\tcase 3:\n\t\tvalue = vcpu->arch.cr3;\n\t\tbreak;\n\tcase 4:\n\t\tvalue = kvm_read_cr4(vcpu);\n\t\tbreak;\n\tcase 8:\n\t\tvalue = kvm_get_cr8(vcpu);\n\t\tbreak;\n\tdefault:\n\t\tvcpu_printf(vcpu, \"%s: unexpected cr %u\\n\", __func__, cr);\n\t\treturn 0;\n\t}\n\n\treturn value;\n}\n\nstatic int emulator_set_cr(int cr, unsigned long val, struct kvm_vcpu *vcpu)\n{\n\tint res = 0;\n\n\tswitch (cr) {\n\tcase 0:\n\t\tres = kvm_set_cr0(vcpu, mk_cr_64(kvm_read_cr0(vcpu), val));\n\t\tbreak;\n\tcase 2:\n\t\tvcpu->arch.cr2 = val;\n\t\tbreak;\n\tcase 3:\n\t\tres = kvm_set_cr3(vcpu, val);\n\t\tbreak;\n\tcase 4:\n\t\tres = kvm_set_cr4(vcpu, mk_cr_64(kvm_read_cr4(vcpu), val));\n\t\tbreak;\n\tcase 8:\n\t\tres = __kvm_set_cr8(vcpu, val & 0xfUL);\n\t\tbreak;\n\tdefault:\n\t\tvcpu_printf(vcpu, \"%s: unexpected cr %u\\n\", __func__, cr);\n\t\tres = -1;\n\t}\n\n\treturn res;\n}\n\nstatic int emulator_get_cpl(struct kvm_vcpu *vcpu)\n{\n\treturn kvm_x86_ops->get_cpl(vcpu);\n}\n\nstatic void emulator_get_gdt(struct desc_ptr *dt, struct kvm_vcpu *vcpu)\n{\n\tkvm_x86_ops->get_gdt(vcpu, dt);\n}\n\nstatic void emulator_get_idt(struct desc_ptr *dt, struct kvm_vcpu *vcpu)\n{\n\tkvm_x86_ops->get_idt(vcpu, dt);\n}\n\nstatic unsigned long emulator_get_cached_segment_base(int seg,\n\t\t\t\t\t\t      struct kvm_vcpu *vcpu)\n{\n\treturn get_segment_base(vcpu, seg);\n}\n\nstatic bool emulator_get_cached_descriptor(struct desc_struct *desc, int seg,\n\t\t\t\t\t   struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_segment var;\n\n\tkvm_get_segment(vcpu, &var, seg);\n\n\tif (var.unusable)\n\t\treturn false;\n\n\tif (var.g)\n\t\tvar.limit >>= 12;\n\tset_desc_limit(desc, var.limit);\n\tset_desc_base(desc, (unsigned long)var.base);\n\tdesc->type = var.type;\n\tdesc->s = var.s;\n\tdesc->dpl = var.dpl;\n\tdesc->p = var.present;\n\tdesc->avl = var.avl;\n\tdesc->l = var.l;\n\tdesc->d = var.db;\n\tdesc->g = var.g;\n\n\treturn true;\n}\n\nstatic void emulator_set_cached_descriptor(struct desc_struct *desc, int seg,\n\t\t\t\t\t   struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_segment var;\n\n\t/* needed to preserve selector */\n\tkvm_get_segment(vcpu, &var, seg);\n\n\tvar.base = get_desc_base(desc);\n\tvar.limit = get_desc_limit(desc);\n\tif (desc->g)\n\t\tvar.limit = (var.limit << 12) | 0xfff;\n\tvar.type = desc->type;\n\tvar.present = desc->p;\n\tvar.dpl = desc->dpl;\n\tvar.db = desc->d;\n\tvar.s = desc->s;\n\tvar.l = desc->l;\n\tvar.g = desc->g;\n\tvar.avl = desc->avl;\n\tvar.present = desc->p;\n\tvar.unusable = !var.present;\n\tvar.padding = 0;\n\n\tkvm_set_segment(vcpu, &var, seg);\n\treturn;\n}\n\nstatic u16 emulator_get_segment_selector(int seg, struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_segment kvm_seg;\n\n\tkvm_get_segment(vcpu, &kvm_seg, seg);\n\treturn kvm_seg.selector;\n}\n\nstatic void emulator_set_segment_selector(u16 sel, int seg,\n\t\t\t\t\t  struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_segment kvm_seg;\n\n\tkvm_get_segment(vcpu, &kvm_seg, seg);\n\tkvm_seg.selector = sel;\n\tkvm_set_segment(vcpu, &kvm_seg, seg);\n}\n\nstatic struct x86_emulate_ops emulate_ops = {\n\t.read_std            = kvm_read_guest_virt_system,\n\t.write_std           = kvm_write_guest_virt_system,\n\t.fetch               = kvm_fetch_guest_virt,\n\t.read_emulated       = emulator_read_emulated,\n\t.write_emulated      = emulator_write_emulated,\n\t.cmpxchg_emulated    = emulator_cmpxchg_emulated,\n\t.pio_in_emulated     = emulator_pio_in_emulated,\n\t.pio_out_emulated    = emulator_pio_out_emulated,\n\t.get_cached_descriptor = emulator_get_cached_descriptor,\n\t.set_cached_descriptor = emulator_set_cached_descriptor,\n\t.get_segment_selector = emulator_get_segment_selector,\n\t.set_segment_selector = emulator_set_segment_selector,\n\t.get_cached_segment_base = emulator_get_cached_segment_base,\n\t.get_gdt             = emulator_get_gdt,\n\t.get_idt\t     = emulator_get_idt,\n\t.get_cr              = emulator_get_cr,\n\t.set_cr              = emulator_set_cr,\n\t.cpl                 = emulator_get_cpl,\n\t.get_dr              = emulator_get_dr,\n\t.set_dr              = emulator_set_dr,\n\t.set_msr             = kvm_set_msr,\n\t.get_msr             = kvm_get_msr,\n};\n\nstatic void cache_all_regs(struct kvm_vcpu *vcpu)\n{\n\tkvm_register_read(vcpu, VCPU_REGS_RAX);\n\tkvm_register_read(vcpu, VCPU_REGS_RSP);\n\tkvm_register_read(vcpu, VCPU_REGS_RIP);\n\tvcpu->arch.regs_dirty = ~0;\n}\n\nstatic void toggle_interruptibility(struct kvm_vcpu *vcpu, u32 mask)\n{\n\tu32 int_shadow = kvm_x86_ops->get_interrupt_shadow(vcpu, mask);\n\t/*\n\t * an sti; sti; sequence only disable interrupts for the first\n\t * instruction. So, if the last instruction, be it emulated or\n\t * not, left the system with the INT_STI flag enabled, it\n\t * means that the last instruction is an sti. We should not\n\t * leave the flag on in this case. The same goes for mov ss\n\t */\n\tif (!(int_shadow & mask))\n\t\tkvm_x86_ops->set_interrupt_shadow(vcpu, mask);\n}\n\nstatic void inject_emulated_exception(struct kvm_vcpu *vcpu)\n{\n\tstruct x86_emulate_ctxt *ctxt = &vcpu->arch.emulate_ctxt;\n\tif (ctxt->exception.vector == PF_VECTOR)\n\t\tkvm_propagate_fault(vcpu, &ctxt->exception);\n\telse if (ctxt->exception.error_code_valid)\n\t\tkvm_queue_exception_e(vcpu, ctxt->exception.vector,\n\t\t\t\t      ctxt->exception.error_code);\n\telse\n\t\tkvm_queue_exception(vcpu, ctxt->exception.vector);\n}\n\nstatic void init_emulate_ctxt(struct kvm_vcpu *vcpu)\n{\n\tstruct decode_cache *c = &vcpu->arch.emulate_ctxt.decode;\n\tint cs_db, cs_l;\n\n\tcache_all_regs(vcpu);\n\n\tkvm_x86_ops->get_cs_db_l_bits(vcpu, &cs_db, &cs_l);\n\n\tvcpu->arch.emulate_ctxt.vcpu = vcpu;\n\tvcpu->arch.emulate_ctxt.eflags = kvm_x86_ops->get_rflags(vcpu);\n\tvcpu->arch.emulate_ctxt.eip = kvm_rip_read(vcpu);\n\tvcpu->arch.emulate_ctxt.mode =\n\t\t(!is_protmode(vcpu)) ? X86EMUL_MODE_REAL :\n\t\t(vcpu->arch.emulate_ctxt.eflags & X86_EFLAGS_VM)\n\t\t? X86EMUL_MODE_VM86 : cs_l\n\t\t? X86EMUL_MODE_PROT64 :\tcs_db\n\t\t? X86EMUL_MODE_PROT32 : X86EMUL_MODE_PROT16;\n\tmemset(c, 0, sizeof(struct decode_cache));\n\tmemcpy(c->regs, vcpu->arch.regs, sizeof c->regs);\n}\n\nint kvm_inject_realmode_interrupt(struct kvm_vcpu *vcpu, int irq)\n{\n\tstruct decode_cache *c = &vcpu->arch.emulate_ctxt.decode;\n\tint ret;\n\n\tinit_emulate_ctxt(vcpu);\n\n\tvcpu->arch.emulate_ctxt.decode.op_bytes = 2;\n\tvcpu->arch.emulate_ctxt.decode.ad_bytes = 2;\n\tvcpu->arch.emulate_ctxt.decode.eip = vcpu->arch.emulate_ctxt.eip;\n\tret = emulate_int_real(&vcpu->arch.emulate_ctxt, &emulate_ops, irq);\n\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn EMULATE_FAIL;\n\n\tvcpu->arch.emulate_ctxt.eip = c->eip;\n\tmemcpy(vcpu->arch.regs, c->regs, sizeof c->regs);\n\tkvm_rip_write(vcpu, vcpu->arch.emulate_ctxt.eip);\n\tkvm_x86_ops->set_rflags(vcpu, vcpu->arch.emulate_ctxt.eflags);\n\n\tif (irq == NMI_VECTOR)\n\t\tvcpu->arch.nmi_pending = false;\n\telse\n\t\tvcpu->arch.interrupt.pending = false;\n\n\treturn EMULATE_DONE;\n}\nEXPORT_SYMBOL_GPL(kvm_inject_realmode_interrupt);\n\nstatic int handle_emulation_failure(struct kvm_vcpu *vcpu)\n{\n\tint r = EMULATE_DONE;\n\n\t++vcpu->stat.insn_emulation_fail;\n\ttrace_kvm_emulate_insn_failed(vcpu);\n\tif (!is_guest_mode(vcpu)) {\n\t\tvcpu->run->exit_reason = KVM_EXIT_INTERNAL_ERROR;\n\t\tvcpu->run->internal.suberror = KVM_INTERNAL_ERROR_EMULATION;\n\t\tvcpu->run->internal.ndata = 0;\n\t\tr = EMULATE_FAIL;\n\t}\n\tkvm_queue_exception(vcpu, UD_VECTOR);\n\n\treturn r;\n}\n\nstatic bool reexecute_instruction(struct kvm_vcpu *vcpu, gva_t gva)\n{\n\tgpa_t gpa;\n\n\tif (tdp_enabled)\n\t\treturn false;\n\n\t/*\n\t * if emulation was due to access to shadowed page table\n\t * and it failed try to unshadow page and re-entetr the\n\t * guest to let CPU execute the instruction.\n\t */\n\tif (kvm_mmu_unprotect_page_virt(vcpu, gva))\n\t\treturn true;\n\n\tgpa = kvm_mmu_gva_to_gpa_system(vcpu, gva, NULL);\n\n\tif (gpa == UNMAPPED_GVA)\n\t\treturn true; /* let cpu generate fault */\n\n\tif (!kvm_is_error_hva(gfn_to_hva(vcpu->kvm, gpa >> PAGE_SHIFT)))\n\t\treturn true;\n\n\treturn false;\n}\n\nint emulate_instruction(struct kvm_vcpu *vcpu,\n\t\t\tunsigned long cr2,\n\t\t\tu16 error_code,\n\t\t\tint emulation_type)\n{\n\tint r;\n\tstruct decode_cache *c = &vcpu->arch.emulate_ctxt.decode;\n\n\tkvm_clear_exception_queue(vcpu);\n\tvcpu->arch.mmio_fault_cr2 = cr2;\n\t/*\n\t * TODO: fix emulate.c to use guest_read/write_register\n\t * instead of direct ->regs accesses, can save hundred cycles\n\t * on Intel for instructions that don't read/change RSP, for\n\t * for example.\n\t */\n\tcache_all_regs(vcpu);\n\n\tif (!(emulation_type & EMULTYPE_NO_DECODE)) {\n\t\tinit_emulate_ctxt(vcpu);\n\t\tvcpu->arch.emulate_ctxt.interruptibility = 0;\n\t\tvcpu->arch.emulate_ctxt.have_exception = false;\n\t\tvcpu->arch.emulate_ctxt.perm_ok = false;\n\n\t\tr = x86_decode_insn(&vcpu->arch.emulate_ctxt);\n\t\tif (r == X86EMUL_PROPAGATE_FAULT)\n\t\t\tgoto done;\n\n\t\ttrace_kvm_emulate_insn_start(vcpu);\n\n\t\t/* Only allow emulation of specific instructions on #UD\n\t\t * (namely VMMCALL, sysenter, sysexit, syscall)*/\n\t\tif (emulation_type & EMULTYPE_TRAP_UD) {\n\t\t\tif (!c->twobyte)\n\t\t\t\treturn EMULATE_FAIL;\n\t\t\tswitch (c->b) {\n\t\t\tcase 0x01: /* VMMCALL */\n\t\t\t\tif (c->modrm_mod != 3 || c->modrm_rm != 1)\n\t\t\t\t\treturn EMULATE_FAIL;\n\t\t\t\tbreak;\n\t\t\tcase 0x34: /* sysenter */\n\t\t\tcase 0x35: /* sysexit */\n\t\t\t\tif (c->modrm_mod != 0 || c->modrm_rm != 0)\n\t\t\t\t\treturn EMULATE_FAIL;\n\t\t\t\tbreak;\n\t\t\tcase 0x05: /* syscall */\n\t\t\t\tif (c->modrm_mod != 0 || c->modrm_rm != 0)\n\t\t\t\t\treturn EMULATE_FAIL;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn EMULATE_FAIL;\n\t\t\t}\n\n\t\t\tif (!(c->modrm_reg == 0 || c->modrm_reg == 3))\n\t\t\t\treturn EMULATE_FAIL;\n\t\t}\n\n\t\t++vcpu->stat.insn_emulation;\n\t\tif (r)  {\n\t\t\tif (reexecute_instruction(vcpu, cr2))\n\t\t\t\treturn EMULATE_DONE;\n\t\t\tif (emulation_type & EMULTYPE_SKIP)\n\t\t\t\treturn EMULATE_FAIL;\n\t\t\treturn handle_emulation_failure(vcpu);\n\t\t}\n\t}\n\n\tif (emulation_type & EMULTYPE_SKIP) {\n\t\tkvm_rip_write(vcpu, vcpu->arch.emulate_ctxt.decode.eip);\n\t\treturn EMULATE_DONE;\n\t}\n\n\t/* this is needed for vmware backdor interface to work since it\n\t   changes registers values  during IO operation */\n\tmemcpy(c->regs, vcpu->arch.regs, sizeof c->regs);\n\nrestart:\n\tr = x86_emulate_insn(&vcpu->arch.emulate_ctxt);\n\n\tif (r == EMULATION_FAILED) {\n\t\tif (reexecute_instruction(vcpu, cr2))\n\t\t\treturn EMULATE_DONE;\n\n\t\treturn handle_emulation_failure(vcpu);\n\t}\n\ndone:\n\tif (vcpu->arch.emulate_ctxt.have_exception) {\n\t\tinject_emulated_exception(vcpu);\n\t\tr = EMULATE_DONE;\n\t} else if (vcpu->arch.pio.count) {\n\t\tif (!vcpu->arch.pio.in)\n\t\t\tvcpu->arch.pio.count = 0;\n\t\tr = EMULATE_DO_MMIO;\n\t} else if (vcpu->mmio_needed) {\n\t\tif (vcpu->mmio_is_write)\n\t\t\tvcpu->mmio_needed = 0;\n\t\tr = EMULATE_DO_MMIO;\n\t} else if (r == EMULATION_RESTART)\n\t\tgoto restart;\n\telse\n\t\tr = EMULATE_DONE;\n\n\ttoggle_interruptibility(vcpu, vcpu->arch.emulate_ctxt.interruptibility);\n\tkvm_x86_ops->set_rflags(vcpu, vcpu->arch.emulate_ctxt.eflags);\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\tmemcpy(vcpu->arch.regs, c->regs, sizeof c->regs);\n\tkvm_rip_write(vcpu, vcpu->arch.emulate_ctxt.eip);\n\n\treturn r;\n}\nEXPORT_SYMBOL_GPL(emulate_instruction);\n\nint kvm_fast_pio_out(struct kvm_vcpu *vcpu, int size, unsigned short port)\n{\n\tunsigned long val = kvm_register_read(vcpu, VCPU_REGS_RAX);\n\tint ret = emulator_pio_out_emulated(size, port, &val, 1, vcpu);\n\t/* do not return to emulator after return from userspace */\n\tvcpu->arch.pio.count = 0;\n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(kvm_fast_pio_out);\n\nstatic void tsc_bad(void *info)\n{\n\t__get_cpu_var(cpu_tsc_khz) = 0;\n}\n\nstatic void tsc_khz_changed(void *data)\n{\n\tstruct cpufreq_freqs *freq = data;\n\tunsigned long khz = 0;\n\n\tif (data)\n\t\tkhz = freq->new;\n\telse if (!boot_cpu_has(X86_FEATURE_CONSTANT_TSC))\n\t\tkhz = cpufreq_quick_get(raw_smp_processor_id());\n\tif (!khz)\n\t\tkhz = tsc_khz;\n\t__get_cpu_var(cpu_tsc_khz) = khz;\n}\n\nstatic int kvmclock_cpufreq_notifier(struct notifier_block *nb, unsigned long val,\n\t\t\t\t     void *data)\n{\n\tstruct cpufreq_freqs *freq = data;\n\tstruct kvm *kvm;\n\tstruct kvm_vcpu *vcpu;\n\tint i, send_ipi = 0;\n\n\t/*\n\t * We allow guests to temporarily run on slowing clocks,\n\t * provided we notify them after, or to run on accelerating\n\t * clocks, provided we notify them before.  Thus time never\n\t * goes backwards.\n\t *\n\t * However, we have a problem.  We can't atomically update\n\t * the frequency of a given CPU from this function; it is\n\t * merely a notifier, which can be called from any CPU.\n\t * Changing the TSC frequency at arbitrary points in time\n\t * requires a recomputation of local variables related to\n\t * the TSC for each VCPU.  We must flag these local variables\n\t * to be updated and be sure the update takes place with the\n\t * new frequency before any guests proceed.\n\t *\n\t * Unfortunately, the combination of hotplug CPU and frequency\n\t * change creates an intractable locking scenario; the order\n\t * of when these callouts happen is undefined with respect to\n\t * CPU hotplug, and they can race with each other.  As such,\n\t * merely setting per_cpu(cpu_tsc_khz) = X during a hotadd is\n\t * undefined; you can actually have a CPU frequency change take\n\t * place in between the computation of X and the setting of the\n\t * variable.  To protect against this problem, all updates of\n\t * the per_cpu tsc_khz variable are done in an interrupt\n\t * protected IPI, and all callers wishing to update the value\n\t * must wait for a synchronous IPI to complete (which is trivial\n\t * if the caller is on the CPU already).  This establishes the\n\t * necessary total order on variable updates.\n\t *\n\t * Note that because a guest time update may take place\n\t * anytime after the setting of the VCPU's request bit, the\n\t * correct TSC value must be set before the request.  However,\n\t * to ensure the update actually makes it to any guest which\n\t * starts running in hardware virtualization between the set\n\t * and the acquisition of the spinlock, we must also ping the\n\t * CPU after setting the request bit.\n\t *\n\t */\n\n\tif (val == CPUFREQ_PRECHANGE && freq->old > freq->new)\n\t\treturn 0;\n\tif (val == CPUFREQ_POSTCHANGE && freq->old < freq->new)\n\t\treturn 0;\n\n\tsmp_call_function_single(freq->cpu, tsc_khz_changed, freq, 1);\n\n\tspin_lock(&kvm_lock);\n\tlist_for_each_entry(kvm, &vm_list, vm_list) {\n\t\tkvm_for_each_vcpu(i, vcpu, kvm) {\n\t\t\tif (vcpu->cpu != freq->cpu)\n\t\t\t\tcontinue;\n\t\t\tkvm_make_request(KVM_REQ_CLOCK_UPDATE, vcpu);\n\t\t\tif (vcpu->cpu != smp_processor_id())\n\t\t\t\tsend_ipi = 1;\n\t\t}\n\t}\n\tspin_unlock(&kvm_lock);\n\n\tif (freq->old < freq->new && send_ipi) {\n\t\t/*\n\t\t * We upscale the frequency.  Must make the guest\n\t\t * doesn't see old kvmclock values while running with\n\t\t * the new frequency, otherwise we risk the guest sees\n\t\t * time go backwards.\n\t\t *\n\t\t * In case we update the frequency for another cpu\n\t\t * (which might be in guest context) send an interrupt\n\t\t * to kick the cpu out of guest context.  Next time\n\t\t * guest context is entered kvmclock will be updated,\n\t\t * so the guest will not see stale values.\n\t\t */\n\t\tsmp_call_function_single(freq->cpu, tsc_khz_changed, freq, 1);\n\t}\n\treturn 0;\n}\n\nstatic struct notifier_block kvmclock_cpufreq_notifier_block = {\n\t.notifier_call  = kvmclock_cpufreq_notifier\n};\n\nstatic int kvmclock_cpu_notifier(struct notifier_block *nfb,\n\t\t\t\t\tunsigned long action, void *hcpu)\n{\n\tunsigned int cpu = (unsigned long)hcpu;\n\n\tswitch (action) {\n\t\tcase CPU_ONLINE:\n\t\tcase CPU_DOWN_FAILED:\n\t\t\tsmp_call_function_single(cpu, tsc_khz_changed, NULL, 1);\n\t\t\tbreak;\n\t\tcase CPU_DOWN_PREPARE:\n\t\t\tsmp_call_function_single(cpu, tsc_bad, NULL, 1);\n\t\t\tbreak;\n\t}\n\treturn NOTIFY_OK;\n}\n\nstatic struct notifier_block kvmclock_cpu_notifier_block = {\n\t.notifier_call  = kvmclock_cpu_notifier,\n\t.priority = -INT_MAX\n};\n\nstatic void kvm_timer_init(void)\n{\n\tint cpu;\n\n\tmax_tsc_khz = tsc_khz;\n\tregister_hotcpu_notifier(&kvmclock_cpu_notifier_block);\n\tif (!boot_cpu_has(X86_FEATURE_CONSTANT_TSC)) {\n#ifdef CONFIG_CPU_FREQ\n\t\tstruct cpufreq_policy policy;\n\t\tmemset(&policy, 0, sizeof(policy));\n\t\tcpu = get_cpu();\n\t\tcpufreq_get_policy(&policy, cpu);\n\t\tif (policy.cpuinfo.max_freq)\n\t\t\tmax_tsc_khz = policy.cpuinfo.max_freq;\n\t\tput_cpu();\n#endif\n\t\tcpufreq_register_notifier(&kvmclock_cpufreq_notifier_block,\n\t\t\t\t\t  CPUFREQ_TRANSITION_NOTIFIER);\n\t}\n\tpr_debug(\"kvm: max_tsc_khz = %ld\\n\", max_tsc_khz);\n\tfor_each_online_cpu(cpu)\n\t\tsmp_call_function_single(cpu, tsc_khz_changed, NULL, 1);\n}\n\nstatic DEFINE_PER_CPU(struct kvm_vcpu *, current_vcpu);\n\nstatic int kvm_is_in_guest(void)\n{\n\treturn percpu_read(current_vcpu) != NULL;\n}\n\nstatic int kvm_is_user_mode(void)\n{\n\tint user_mode = 3;\n\n\tif (percpu_read(current_vcpu))\n\t\tuser_mode = kvm_x86_ops->get_cpl(percpu_read(current_vcpu));\n\n\treturn user_mode != 0;\n}\n\nstatic unsigned long kvm_get_guest_ip(void)\n{\n\tunsigned long ip = 0;\n\n\tif (percpu_read(current_vcpu))\n\t\tip = kvm_rip_read(percpu_read(current_vcpu));\n\n\treturn ip;\n}\n\nstatic struct perf_guest_info_callbacks kvm_guest_cbs = {\n\t.is_in_guest\t\t= kvm_is_in_guest,\n\t.is_user_mode\t\t= kvm_is_user_mode,\n\t.get_guest_ip\t\t= kvm_get_guest_ip,\n};\n\nvoid kvm_before_handle_nmi(struct kvm_vcpu *vcpu)\n{\n\tpercpu_write(current_vcpu, vcpu);\n}\nEXPORT_SYMBOL_GPL(kvm_before_handle_nmi);\n\nvoid kvm_after_handle_nmi(struct kvm_vcpu *vcpu)\n{\n\tpercpu_write(current_vcpu, NULL);\n}\nEXPORT_SYMBOL_GPL(kvm_after_handle_nmi);\n\nint kvm_arch_init(void *opaque)\n{\n\tint r;\n\tstruct kvm_x86_ops *ops = (struct kvm_x86_ops *)opaque;\n\n\tif (kvm_x86_ops) {\n\t\tprintk(KERN_ERR \"kvm: already loaded the other module\\n\");\n\t\tr = -EEXIST;\n\t\tgoto out;\n\t}\n\n\tif (!ops->cpu_has_kvm_support()) {\n\t\tprintk(KERN_ERR \"kvm: no hardware support\\n\");\n\t\tr = -EOPNOTSUPP;\n\t\tgoto out;\n\t}\n\tif (ops->disabled_by_bios()) {\n\t\tprintk(KERN_ERR \"kvm: disabled by bios\\n\");\n\t\tr = -EOPNOTSUPP;\n\t\tgoto out;\n\t}\n\n\tr = kvm_mmu_module_init();\n\tif (r)\n\t\tgoto out;\n\n\tkvm_init_msr_list();\n\n\tkvm_x86_ops = ops;\n\tkvm_mmu_set_nonpresent_ptes(0ull, 0ull);\n\tkvm_mmu_set_mask_ptes(PT_USER_MASK, PT_ACCESSED_MASK,\n\t\t\tPT_DIRTY_MASK, PT64_NX_MASK, 0);\n\n\tkvm_timer_init();\n\n\tperf_register_guest_info_callbacks(&kvm_guest_cbs);\n\n\tif (cpu_has_xsave)\n\t\thost_xcr0 = xgetbv(XCR_XFEATURE_ENABLED_MASK);\n\n\treturn 0;\n\nout:\n\treturn r;\n}\n\nvoid kvm_arch_exit(void)\n{\n\tperf_unregister_guest_info_callbacks(&kvm_guest_cbs);\n\n\tif (!boot_cpu_has(X86_FEATURE_CONSTANT_TSC))\n\t\tcpufreq_unregister_notifier(&kvmclock_cpufreq_notifier_block,\n\t\t\t\t\t    CPUFREQ_TRANSITION_NOTIFIER);\n\tunregister_hotcpu_notifier(&kvmclock_cpu_notifier_block);\n\tkvm_x86_ops = NULL;\n\tkvm_mmu_module_exit();\n}\n\nint kvm_emulate_halt(struct kvm_vcpu *vcpu)\n{\n\t++vcpu->stat.halt_exits;\n\tif (irqchip_in_kernel(vcpu->kvm)) {\n\t\tvcpu->arch.mp_state = KVM_MP_STATE_HALTED;\n\t\treturn 1;\n\t} else {\n\t\tvcpu->run->exit_reason = KVM_EXIT_HLT;\n\t\treturn 0;\n\t}\n}\nEXPORT_SYMBOL_GPL(kvm_emulate_halt);\n\nstatic inline gpa_t hc_gpa(struct kvm_vcpu *vcpu, unsigned long a0,\n\t\t\t   unsigned long a1)\n{\n\tif (is_long_mode(vcpu))\n\t\treturn a0;\n\telse\n\t\treturn a0 | ((gpa_t)a1 << 32);\n}\n\nint kvm_hv_hypercall(struct kvm_vcpu *vcpu)\n{\n\tu64 param, ingpa, outgpa, ret;\n\tuint16_t code, rep_idx, rep_cnt, res = HV_STATUS_SUCCESS, rep_done = 0;\n\tbool fast, longmode;\n\tint cs_db, cs_l;\n\n\t/*\n\t * hypercall generates UD from non zero cpl and real mode\n\t * per HYPER-V spec\n\t */\n\tif (kvm_x86_ops->get_cpl(vcpu) != 0 || !is_protmode(vcpu)) {\n\t\tkvm_queue_exception(vcpu, UD_VECTOR);\n\t\treturn 0;\n\t}\n\n\tkvm_x86_ops->get_cs_db_l_bits(vcpu, &cs_db, &cs_l);\n\tlongmode = is_long_mode(vcpu) && cs_l == 1;\n\n\tif (!longmode) {\n\t\tparam = ((u64)kvm_register_read(vcpu, VCPU_REGS_RDX) << 32) |\n\t\t\t(kvm_register_read(vcpu, VCPU_REGS_RAX) & 0xffffffff);\n\t\tingpa = ((u64)kvm_register_read(vcpu, VCPU_REGS_RBX) << 32) |\n\t\t\t(kvm_register_read(vcpu, VCPU_REGS_RCX) & 0xffffffff);\n\t\toutgpa = ((u64)kvm_register_read(vcpu, VCPU_REGS_RDI) << 32) |\n\t\t\t(kvm_register_read(vcpu, VCPU_REGS_RSI) & 0xffffffff);\n\t}\n#ifdef CONFIG_X86_64\n\telse {\n\t\tparam = kvm_register_read(vcpu, VCPU_REGS_RCX);\n\t\tingpa = kvm_register_read(vcpu, VCPU_REGS_RDX);\n\t\toutgpa = kvm_register_read(vcpu, VCPU_REGS_R8);\n\t}\n#endif\n\n\tcode = param & 0xffff;\n\tfast = (param >> 16) & 0x1;\n\trep_cnt = (param >> 32) & 0xfff;\n\trep_idx = (param >> 48) & 0xfff;\n\n\ttrace_kvm_hv_hypercall(code, fast, rep_cnt, rep_idx, ingpa, outgpa);\n\n\tswitch (code) {\n\tcase HV_X64_HV_NOTIFY_LONG_SPIN_WAIT:\n\t\tkvm_vcpu_on_spin(vcpu);\n\t\tbreak;\n\tdefault:\n\t\tres = HV_STATUS_INVALID_HYPERCALL_CODE;\n\t\tbreak;\n\t}\n\n\tret = res | (((u64)rep_done & 0xfff) << 32);\n\tif (longmode) {\n\t\tkvm_register_write(vcpu, VCPU_REGS_RAX, ret);\n\t} else {\n\t\tkvm_register_write(vcpu, VCPU_REGS_RDX, ret >> 32);\n\t\tkvm_register_write(vcpu, VCPU_REGS_RAX, ret & 0xffffffff);\n\t}\n\n\treturn 1;\n}\n\nint kvm_emulate_hypercall(struct kvm_vcpu *vcpu)\n{\n\tunsigned long nr, a0, a1, a2, a3, ret;\n\tint r = 1;\n\n\tif (kvm_hv_hypercall_enabled(vcpu->kvm))\n\t\treturn kvm_hv_hypercall(vcpu);\n\n\tnr = kvm_register_read(vcpu, VCPU_REGS_RAX);\n\ta0 = kvm_register_read(vcpu, VCPU_REGS_RBX);\n\ta1 = kvm_register_read(vcpu, VCPU_REGS_RCX);\n\ta2 = kvm_register_read(vcpu, VCPU_REGS_RDX);\n\ta3 = kvm_register_read(vcpu, VCPU_REGS_RSI);\n\n\ttrace_kvm_hypercall(nr, a0, a1, a2, a3);\n\n\tif (!is_long_mode(vcpu)) {\n\t\tnr &= 0xFFFFFFFF;\n\t\ta0 &= 0xFFFFFFFF;\n\t\ta1 &= 0xFFFFFFFF;\n\t\ta2 &= 0xFFFFFFFF;\n\t\ta3 &= 0xFFFFFFFF;\n\t}\n\n\tif (kvm_x86_ops->get_cpl(vcpu) != 0) {\n\t\tret = -KVM_EPERM;\n\t\tgoto out;\n\t}\n\n\tswitch (nr) {\n\tcase KVM_HC_VAPIC_POLL_IRQ:\n\t\tret = 0;\n\t\tbreak;\n\tcase KVM_HC_MMU_OP:\n\t\tr = kvm_pv_mmu_op(vcpu, a0, hc_gpa(vcpu, a1, a2), &ret);\n\t\tbreak;\n\tdefault:\n\t\tret = -KVM_ENOSYS;\n\t\tbreak;\n\t}\nout:\n\tkvm_register_write(vcpu, VCPU_REGS_RAX, ret);\n\t++vcpu->stat.hypercalls;\n\treturn r;\n}\nEXPORT_SYMBOL_GPL(kvm_emulate_hypercall);\n\nint kvm_fix_hypercall(struct kvm_vcpu *vcpu)\n{\n\tchar instruction[3];\n\tunsigned long rip = kvm_rip_read(vcpu);\n\n\t/*\n\t * Blow out the MMU to ensure that no other VCPU has an active mapping\n\t * to ensure that the updated hypercall appears atomically across all\n\t * VCPUs.\n\t */\n\tkvm_mmu_zap_all(vcpu->kvm);\n\n\tkvm_x86_ops->patch_hypercall(vcpu, instruction);\n\n\treturn emulator_write_emulated(rip, instruction, 3, NULL, vcpu);\n}\n\nvoid realmode_lgdt(struct kvm_vcpu *vcpu, u16 limit, unsigned long base)\n{\n\tstruct desc_ptr dt = { limit, base };\n\n\tkvm_x86_ops->set_gdt(vcpu, &dt);\n}\n\nvoid realmode_lidt(struct kvm_vcpu *vcpu, u16 limit, unsigned long base)\n{\n\tstruct desc_ptr dt = { limit, base };\n\n\tkvm_x86_ops->set_idt(vcpu, &dt);\n}\n\nstatic int move_to_next_stateful_cpuid_entry(struct kvm_vcpu *vcpu, int i)\n{\n\tstruct kvm_cpuid_entry2 *e = &vcpu->arch.cpuid_entries[i];\n\tint j, nent = vcpu->arch.cpuid_nent;\n\n\te->flags &= ~KVM_CPUID_FLAG_STATE_READ_NEXT;\n\t/* when no next entry is found, the current entry[i] is reselected */\n\tfor (j = i + 1; ; j = (j + 1) % nent) {\n\t\tstruct kvm_cpuid_entry2 *ej = &vcpu->arch.cpuid_entries[j];\n\t\tif (ej->function == e->function) {\n\t\t\tej->flags |= KVM_CPUID_FLAG_STATE_READ_NEXT;\n\t\t\treturn j;\n\t\t}\n\t}\n\treturn 0; /* silence gcc, even though control never reaches here */\n}\n\n/* find an entry with matching function, matching index (if needed), and that\n * should be read next (if it's stateful) */\nstatic int is_matching_cpuid_entry(struct kvm_cpuid_entry2 *e,\n\tu32 function, u32 index)\n{\n\tif (e->function != function)\n\t\treturn 0;\n\tif ((e->flags & KVM_CPUID_FLAG_SIGNIFCANT_INDEX) && e->index != index)\n\t\treturn 0;\n\tif ((e->flags & KVM_CPUID_FLAG_STATEFUL_FUNC) &&\n\t    !(e->flags & KVM_CPUID_FLAG_STATE_READ_NEXT))\n\t\treturn 0;\n\treturn 1;\n}\n\nstruct kvm_cpuid_entry2 *kvm_find_cpuid_entry(struct kvm_vcpu *vcpu,\n\t\t\t\t\t      u32 function, u32 index)\n{\n\tint i;\n\tstruct kvm_cpuid_entry2 *best = NULL;\n\n\tfor (i = 0; i < vcpu->arch.cpuid_nent; ++i) {\n\t\tstruct kvm_cpuid_entry2 *e;\n\n\t\te = &vcpu->arch.cpuid_entries[i];\n\t\tif (is_matching_cpuid_entry(e, function, index)) {\n\t\t\tif (e->flags & KVM_CPUID_FLAG_STATEFUL_FUNC)\n\t\t\t\tmove_to_next_stateful_cpuid_entry(vcpu, i);\n\t\t\tbest = e;\n\t\t\tbreak;\n\t\t}\n\t\t/*\n\t\t * Both basic or both extended?\n\t\t */\n\t\tif (((e->function ^ function) & 0x80000000) == 0)\n\t\t\tif (!best || e->function > best->function)\n\t\t\t\tbest = e;\n\t}\n\treturn best;\n}\nEXPORT_SYMBOL_GPL(kvm_find_cpuid_entry);\n\nint cpuid_maxphyaddr(struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_cpuid_entry2 *best;\n\n\tbest = kvm_find_cpuid_entry(vcpu, 0x80000000, 0);\n\tif (!best || best->eax < 0x80000008)\n\t\tgoto not_found;\n\tbest = kvm_find_cpuid_entry(vcpu, 0x80000008, 0);\n\tif (best)\n\t\treturn best->eax & 0xff;\nnot_found:\n\treturn 36;\n}\n\nvoid kvm_emulate_cpuid(struct kvm_vcpu *vcpu)\n{\n\tu32 function, index;\n\tstruct kvm_cpuid_entry2 *best;\n\n\tfunction = kvm_register_read(vcpu, VCPU_REGS_RAX);\n\tindex = kvm_register_read(vcpu, VCPU_REGS_RCX);\n\tkvm_register_write(vcpu, VCPU_REGS_RAX, 0);\n\tkvm_register_write(vcpu, VCPU_REGS_RBX, 0);\n\tkvm_register_write(vcpu, VCPU_REGS_RCX, 0);\n\tkvm_register_write(vcpu, VCPU_REGS_RDX, 0);\n\tbest = kvm_find_cpuid_entry(vcpu, function, index);\n\tif (best) {\n\t\tkvm_register_write(vcpu, VCPU_REGS_RAX, best->eax);\n\t\tkvm_register_write(vcpu, VCPU_REGS_RBX, best->ebx);\n\t\tkvm_register_write(vcpu, VCPU_REGS_RCX, best->ecx);\n\t\tkvm_register_write(vcpu, VCPU_REGS_RDX, best->edx);\n\t}\n\tkvm_x86_ops->skip_emulated_instruction(vcpu);\n\ttrace_kvm_cpuid(function,\n\t\t\tkvm_register_read(vcpu, VCPU_REGS_RAX),\n\t\t\tkvm_register_read(vcpu, VCPU_REGS_RBX),\n\t\t\tkvm_register_read(vcpu, VCPU_REGS_RCX),\n\t\t\tkvm_register_read(vcpu, VCPU_REGS_RDX));\n}\nEXPORT_SYMBOL_GPL(kvm_emulate_cpuid);\n\n/*\n * Check if userspace requested an interrupt window, and that the\n * interrupt window is open.\n *\n * No need to exit to userspace if we already have an interrupt queued.\n */\nstatic int dm_request_for_irq_injection(struct kvm_vcpu *vcpu)\n{\n\treturn (!irqchip_in_kernel(vcpu->kvm) && !kvm_cpu_has_interrupt(vcpu) &&\n\t\tvcpu->run->request_interrupt_window &&\n\t\tkvm_arch_interrupt_allowed(vcpu));\n}\n\nstatic void post_kvm_run_save(struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_run *kvm_run = vcpu->run;\n\n\tkvm_run->if_flag = (kvm_get_rflags(vcpu) & X86_EFLAGS_IF) != 0;\n\tkvm_run->cr8 = kvm_get_cr8(vcpu);\n\tkvm_run->apic_base = kvm_get_apic_base(vcpu);\n\tif (irqchip_in_kernel(vcpu->kvm))\n\t\tkvm_run->ready_for_interrupt_injection = 1;\n\telse\n\t\tkvm_run->ready_for_interrupt_injection =\n\t\t\tkvm_arch_interrupt_allowed(vcpu) &&\n\t\t\t!kvm_cpu_has_interrupt(vcpu) &&\n\t\t\t!kvm_event_needs_reinjection(vcpu);\n}\n\nstatic void vapic_enter(struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_lapic *apic = vcpu->arch.apic;\n\tstruct page *page;\n\n\tif (!apic || !apic->vapic_addr)\n\t\treturn;\n\n\tpage = gfn_to_page(vcpu->kvm, apic->vapic_addr >> PAGE_SHIFT);\n\n\tvcpu->arch.apic->vapic_page = page;\n}\n\nstatic void vapic_exit(struct kvm_vcpu *vcpu)\n{\n\tstruct kvm_lapic *apic = vcpu->arch.apic;\n\tint idx;\n\n\tif (!apic || !apic->vapic_addr)\n\t\treturn;\n\n\tidx = srcu_read_lock(&vcpu->kvm->srcu);\n\tkvm_release_page_dirty(apic->vapic_page);\n\tmark_page_dirty(vcpu->kvm, apic->vapic_addr >> PAGE_SHIFT);\n\tsrcu_read_unlock(&vcpu->kvm->srcu, idx);\n}\n\nstatic void update_cr8_intercept(struct kvm_vcpu *vcpu)\n{\n\tint max_irr, tpr;\n\n\tif (!kvm_x86_ops->update_cr8_intercept)\n\t\treturn;\n\n\tif (!vcpu->arch.apic)\n\t\treturn;\n\n\tif (!vcpu->arch.apic->vapic_addr)\n\t\tmax_irr = kvm_lapic_find_highest_irr(vcpu);\n\telse\n\t\tmax_irr = -1;\n\n\tif (max_irr != -1)\n\t\tmax_irr >>= 4;\n\n\ttpr = kvm_lapic_get_cr8(vcpu);\n\n\tkvm_x86_ops->update_cr8_intercept(vcpu, tpr, max_irr);\n}\n\nstatic void inject_pending_event(struct kvm_vcpu *vcpu)\n{\n\t/* try to reinject previous events if any */\n\tif (vcpu->arch.exception.pending) {\n\t\ttrace_kvm_inj_exception(vcpu->arch.exception.nr,\n\t\t\t\t\tvcpu->arch.exception.has_error_code,\n\t\t\t\t\tvcpu->arch.exception.error_code);\n\t\tkvm_x86_ops->queue_exception(vcpu, vcpu->arch.exception.nr,\n\t\t\t\t\t  vcpu->arch.exception.has_error_code,\n\t\t\t\t\t  vcpu->arch.exception.error_code,\n\t\t\t\t\t  vcpu->arch.exception.reinject);\n\t\treturn;\n\t}\n\n\tif (vcpu->arch.nmi_injected) {\n\t\tkvm_x86_ops->set_nmi(vcpu);\n\t\treturn;\n\t}\n\n\tif (vcpu->arch.interrupt.pending) {\n\t\tkvm_x86_ops->set_irq(vcpu);\n\t\treturn;\n\t}\n\n\t/* try to inject new event if pending */\n\tif (vcpu->arch.nmi_pending) {\n\t\tif (kvm_x86_ops->nmi_allowed(vcpu)) {\n\t\t\tvcpu->arch.nmi_pending = false;\n\t\t\tvcpu->arch.nmi_injected = true;\n\t\t\tkvm_x86_ops->set_nmi(vcpu);\n\t\t}\n\t} else if (kvm_cpu_has_interrupt(vcpu)) {\n\t\tif (kvm_x86_ops->interrupt_allowed(vcpu)) {\n\t\t\tkvm_queue_interrupt(vcpu, kvm_cpu_get_interrupt(vcpu),\n\t\t\t\t\t    false);\n\t\t\tkvm_x86_ops->set_irq(vcpu);\n\t\t}\n\t}\n}\n\nstatic void kvm_load_guest_xcr0(struct kvm_vcpu *vcpu)\n{\n\tif (kvm_read_cr4_bits(vcpu, X86_CR4_OSXSAVE) &&\n\t\t\t!vcpu->guest_xcr0_loaded) {\n\t\t/* kvm_set_xcr() also depends on this */\n\t\txsetbv(XCR_XFEATURE_ENABLED_MASK, vcpu->arch.xcr0);\n\t\tvcpu->guest_xcr0_loaded = 1;\n\t}\n}\n\nstatic void kvm_put_guest_xcr0(struct kvm_vcpu *vcpu)\n{\n\tif (vcpu->guest_xcr0_loaded) {\n\t\tif (vcpu->arch.xcr0 != host_xcr0)\n\t\t\txsetbv(XCR_XFEATURE_ENABLED_MASK, host_xcr0);\n\t\tvcpu->guest_xcr0_loaded = 0;\n\t}\n}\n\nstatic int vcpu_enter_guest(struct kvm_vcpu *vcpu)\n{\n\tint r;\n\tbool req_int_win = !irqchip_in_kernel(vcpu->kvm) &&\n\t\tvcpu->run->request_interrupt_window;\n\n\tif (vcpu->requests) {\n\t\tif (kvm_check_request(KVM_REQ_MMU_RELOAD, vcpu))\n\t\t\tkvm_mmu_unload(vcpu);\n\t\tif (kvm_check_request(KVM_REQ_MIGRATE_TIMER, vcpu))\n\t\t\t__kvm_migrate_timers(vcpu);\n\t\tif (kvm_check_request(KVM_REQ_CLOCK_UPDATE, vcpu)) {\n\t\t\tr = kvm_guest_time_update(vcpu);\n\t\t\tif (unlikely(r))\n\t\t\t\tgoto out;\n\t\t}\n\t\tif (kvm_check_request(KVM_REQ_MMU_SYNC, vcpu))\n\t\t\tkvm_mmu_sync_roots(vcpu);\n\t\tif (kvm_check_request(KVM_REQ_TLB_FLUSH, vcpu))\n\t\t\tkvm_x86_ops->tlb_flush(vcpu);\n\t\tif (kvm_check_request(KVM_REQ_REPORT_TPR_ACCESS, vcpu)) {\n\t\t\tvcpu->run->exit_reason = KVM_EXIT_TPR_ACCESS;\n\t\t\tr = 0;\n\t\t\tgoto out;\n\t\t}\n\t\tif (kvm_check_request(KVM_REQ_TRIPLE_FAULT, vcpu)) {\n\t\t\tvcpu->run->exit_reason = KVM_EXIT_SHUTDOWN;\n\t\t\tr = 0;\n\t\t\tgoto out;\n\t\t}\n\t\tif (kvm_check_request(KVM_REQ_DEACTIVATE_FPU, vcpu)) {\n\t\t\tvcpu->fpu_active = 0;\n\t\t\tkvm_x86_ops->fpu_deactivate(vcpu);\n\t\t}\n\t\tif (kvm_check_request(KVM_REQ_APF_HALT, vcpu)) {\n\t\t\t/* Page is swapped out. Do synthetic halt */\n\t\t\tvcpu->arch.apf.halted = true;\n\t\t\tr = 1;\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tr = kvm_mmu_reload(vcpu);\n\tif (unlikely(r))\n\t\tgoto out;\n\n\tif (kvm_check_request(KVM_REQ_EVENT, vcpu) || req_int_win) {\n\t\tinject_pending_event(vcpu);\n\n\t\t/* enable NMI/IRQ window open exits if needed */\n\t\tif (vcpu->arch.nmi_pending)\n\t\t\tkvm_x86_ops->enable_nmi_window(vcpu);\n\t\telse if (kvm_cpu_has_interrupt(vcpu) || req_int_win)\n\t\t\tkvm_x86_ops->enable_irq_window(vcpu);\n\n\t\tif (kvm_lapic_enabled(vcpu)) {\n\t\t\tupdate_cr8_intercept(vcpu);\n\t\t\tkvm_lapic_sync_to_vapic(vcpu);\n\t\t}\n\t}\n\n\tpreempt_disable();\n\n\tkvm_x86_ops->prepare_guest_switch(vcpu);\n\tif (vcpu->fpu_active)\n\t\tkvm_load_guest_fpu(vcpu);\n\tkvm_load_guest_xcr0(vcpu);\n\n\tatomic_set(&vcpu->guest_mode, 1);\n\tsmp_wmb();\n\n\tlocal_irq_disable();\n\n\tif (!atomic_read(&vcpu->guest_mode) || vcpu->requests\n\t    || need_resched() || signal_pending(current)) {\n\t\tatomic_set(&vcpu->guest_mode, 0);\n\t\tsmp_wmb();\n\t\tlocal_irq_enable();\n\t\tpreempt_enable();\n\t\tkvm_x86_ops->cancel_injection(vcpu);\n\t\tr = 1;\n\t\tgoto out;\n\t}\n\n\tsrcu_read_unlock(&vcpu->kvm->srcu, vcpu->srcu_idx);\n\n\tkvm_guest_enter();\n\n\tif (unlikely(vcpu->arch.switch_db_regs)) {\n\t\tset_debugreg(0, 7);\n\t\tset_debugreg(vcpu->arch.eff_db[0], 0);\n\t\tset_debugreg(vcpu->arch.eff_db[1], 1);\n\t\tset_debugreg(vcpu->arch.eff_db[2], 2);\n\t\tset_debugreg(vcpu->arch.eff_db[3], 3);\n\t}\n\n\ttrace_kvm_entry(vcpu->vcpu_id);\n\tkvm_x86_ops->run(vcpu);\n\n\t/*\n\t * If the guest has used debug registers, at least dr7\n\t * will be disabled while returning to the host.\n\t * If we don't have active breakpoints in the host, we don't\n\t * care about the messed up debug address registers. But if\n\t * we have some of them active, restore the old state.\n\t */\n\tif (hw_breakpoint_active())\n\t\thw_breakpoint_restore();\n\n\tkvm_get_msr(vcpu, MSR_IA32_TSC, &vcpu->arch.last_guest_tsc);\n\n\tatomic_set(&vcpu->guest_mode, 0);\n\tsmp_wmb();\n\tlocal_irq_enable();\n\n\t++vcpu->stat.exits;\n\n\t/*\n\t * We must have an instruction between local_irq_enable() and\n\t * kvm_guest_exit(), so the timer interrupt isn't delayed by\n\t * the interrupt shadow.  The stat.exits increment will do nicely.\n\t * But we need to prevent reordering, hence this barrier():\n\t */\n\tbarrier();\n\n\tkvm_guest_exit();\n\n\tpreempt_enable();\n\n\tvcpu->srcu_idx = srcu_read_lock(&vcpu->kvm->srcu);\n\n\t/*\n\t * Profile KVM exit RIPs:\n\t */\n\tif (unlikely(prof_on == KVM_PROFILING)) {\n\t\tunsigned long rip = kvm_rip_read(vcpu);\n\t\tprofile_hit(KVM_PROFILING, (void *)rip);\n\t}\n\n\n\tkvm_lapic_sync_from_vapic(vcpu);\n\n\tr = kvm_x86_ops->handle_exit(vcpu);\nout:\n\treturn r;\n}\n\n\nstatic int __vcpu_run(struct kvm_vcpu *vcpu)\n{\n\tint r;\n\tstruct kvm *kvm = vcpu->kvm;\n\n\tif (unlikely(vcpu->arch.mp_state == KVM_MP_STATE_SIPI_RECEIVED)) {\n\t\tpr_debug(\"vcpu %d received sipi with vector # %x\\n\",\n\t\t\t vcpu->vcpu_id, vcpu->arch.sipi_vector);\n\t\tkvm_lapic_reset(vcpu);\n\t\tr = kvm_arch_vcpu_reset(vcpu);\n\t\tif (r)\n\t\t\treturn r;\n\t\tvcpu->arch.mp_state = KVM_MP_STATE_RUNNABLE;\n\t}\n\n\tvcpu->srcu_idx = srcu_read_lock(&kvm->srcu);\n\tvapic_enter(vcpu);\n\n\tr = 1;\n\twhile (r > 0) {\n\t\tif (vcpu->arch.mp_state == KVM_MP_STATE_RUNNABLE &&\n\t\t    !vcpu->arch.apf.halted)\n\t\t\tr = vcpu_enter_guest(vcpu);\n\t\telse {\n\t\t\tsrcu_read_unlock(&kvm->srcu, vcpu->srcu_idx);\n\t\t\tkvm_vcpu_block(vcpu);\n\t\t\tvcpu->srcu_idx = srcu_read_lock(&kvm->srcu);\n\t\t\tif (kvm_check_request(KVM_REQ_UNHALT, vcpu))\n\t\t\t{\n\t\t\t\tswitch(vcpu->arch.mp_state) {\n\t\t\t\tcase KVM_MP_STATE_HALTED:\n\t\t\t\t\tvcpu->arch.mp_state =\n\t\t\t\t\t\tKVM_MP_STATE_RUNNABLE;\n\t\t\t\tcase KVM_MP_STATE_RUNNABLE:\n\t\t\t\t\tvcpu->arch.apf.halted = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase KVM_MP_STATE_SIPI_RECEIVED:\n\t\t\t\tdefault:\n\t\t\t\t\tr = -EINTR;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (r <= 0)\n\t\t\tbreak;\n\n\t\tclear_bit(KVM_REQ_PENDING_TIMER, &vcpu->requests);\n\t\tif (kvm_cpu_has_pending_timer(vcpu))\n\t\t\tkvm_inject_pending_timer_irqs(vcpu);\n\n\t\tif (dm_request_for_irq_injection(vcpu)) {\n\t\t\tr = -EINTR;\n\t\t\tvcpu->run->exit_reason = KVM_EXIT_INTR;\n\t\t\t++vcpu->stat.request_irq_exits;\n\t\t}\n\n\t\tkvm_check_async_pf_completion(vcpu);\n\n\t\tif (signal_pending(current)) {\n\t\t\tr = -EINTR;\n\t\t\tvcpu->run->exit_reason = KVM_EXIT_INTR;\n\t\t\t++vcpu->stat.signal_exits;\n\t\t}\n\t\tif (need_resched()) {\n\t\t\tsrcu_read_unlock(&kvm->srcu, vcpu->srcu_idx);\n\t\t\tkvm_resched(vcpu);\n\t\t\tvcpu->srcu_idx = srcu_read_lock(&kvm->srcu);\n\t\t}\n\t}\n\n\tsrcu_read_unlock(&kvm->srcu, vcpu->srcu_idx);\n\n\tvapic_exit(vcpu);\n\n\treturn r;\n}\n\nint kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *kvm_run)\n{\n\tint r;\n\tsigset_t sigsaved;\n\n\tif (vcpu->sigset_active)\n\t\tsigprocmask(SIG_SETMASK, &vcpu->sigset, &sigsaved);\n\n\tif (unlikely(vcpu->arch.mp_state == KVM_MP_STATE_UNINITIALIZED)) {\n\t\tkvm_vcpu_block(vcpu);\n\t\tclear_bit(KVM_REQ_UNHALT, &vcpu->requests);\n\t\tr = -EAGAIN;\n\t\tgoto out;\n\t}\n\n\t/* re-sync apic's tpr */\n\tif (!irqchip_in_kernel(vcpu->kvm))\n\t\tkvm_set_cr8(vcpu, kvm_run->cr8);\n\n\tif (vcpu->arch.pio.count || vcpu->mmio_needed) {\n\t\tif (vcpu->mmio_needed) {\n\t\t\tmemcpy(vcpu->mmio_data, kvm_run->mmio.data, 8);\n\t\t\tvcpu->mmio_read_completed = 1;\n\t\t\tvcpu->mmio_needed = 0;\n\t\t}\n\t\tvcpu->srcu_idx = srcu_read_lock(&vcpu->kvm->srcu);\n\t\tr = emulate_instruction(vcpu, 0, 0, EMULTYPE_NO_DECODE);\n\t\tsrcu_read_unlock(&vcpu->kvm->srcu, vcpu->srcu_idx);\n\t\tif (r != EMULATE_DONE) {\n\t\t\tr = 0;\n\t\t\tgoto out;\n\t\t}\n\t}\n\tif (kvm_run->exit_reason == KVM_EXIT_HYPERCALL)\n\t\tkvm_register_write(vcpu, VCPU_REGS_RAX,\n\t\t\t\t     kvm_run->hypercall.ret);\n\n\tr = __vcpu_run(vcpu);\n\nout:\n\tpost_kvm_run_save(vcpu);\n\tif (vcpu->sigset_active)\n\t\tsigprocmask(SIG_SETMASK, &sigsaved, NULL);\n\n\treturn r;\n}\n\nint kvm_arch_vcpu_ioctl_get_regs(struct kvm_vcpu *vcpu, struct kvm_regs *regs)\n{\n\tregs->rax = kvm_register_read(vcpu, VCPU_REGS_RAX);\n\tregs->rbx = kvm_register_read(vcpu, VCPU_REGS_RBX);\n\tregs->rcx = kvm_register_read(vcpu, VCPU_REGS_RCX);\n\tregs->rdx = kvm_register_read(vcpu, VCPU_REGS_RDX);\n\tregs->rsi = kvm_register_read(vcpu, VCPU_REGS_RSI);\n\tregs->rdi = kvm_register_read(vcpu, VCPU_REGS_RDI);\n\tregs->rsp = kvm_register_read(vcpu, VCPU_REGS_RSP);\n\tregs->rbp = kvm_register_read(vcpu, VCPU_REGS_RBP);\n#ifdef CONFIG_X86_64\n\tregs->r8 = kvm_register_read(vcpu, VCPU_REGS_R8);\n\tregs->r9 = kvm_register_read(vcpu, VCPU_REGS_R9);\n\tregs->r10 = kvm_register_read(vcpu, VCPU_REGS_R10);\n\tregs->r11 = kvm_register_read(vcpu, VCPU_REGS_R11);\n\tregs->r12 = kvm_register_read(vcpu, VCPU_REGS_R12);\n\tregs->r13 = kvm_register_read(vcpu, VCPU_REGS_R13);\n\tregs->r14 = kvm_register_read(vcpu, VCPU_REGS_R14);\n\tregs->r15 = kvm_register_read(vcpu, VCPU_REGS_R15);\n#endif\n\n\tregs->rip = kvm_rip_read(vcpu);\n\tregs->rflags = kvm_get_rflags(vcpu);\n\n\treturn 0;\n}\n\nint kvm_arch_vcpu_ioctl_set_regs(struct kvm_vcpu *vcpu, struct kvm_regs *regs)\n{\n\tkvm_register_write(vcpu, VCPU_REGS_RAX, regs->rax);\n\tkvm_register_write(vcpu, VCPU_REGS_RBX, regs->rbx);\n\tkvm_register_write(vcpu, VCPU_REGS_RCX, regs->rcx);\n\tkvm_register_write(vcpu, VCPU_REGS_RDX, regs->rdx);\n\tkvm_register_write(vcpu, VCPU_REGS_RSI, regs->rsi);\n\tkvm_register_write(vcpu, VCPU_REGS_RDI, regs->rdi);\n\tkvm_register_write(vcpu, VCPU_REGS_RSP, regs->rsp);\n\tkvm_register_write(vcpu, VCPU_REGS_RBP, regs->rbp);\n#ifdef CONFIG_X86_64\n\tkvm_register_write(vcpu, VCPU_REGS_R8, regs->r8);\n\tkvm_register_write(vcpu, VCPU_REGS_R9, regs->r9);\n\tkvm_register_write(vcpu, VCPU_REGS_R10, regs->r10);\n\tkvm_register_write(vcpu, VCPU_REGS_R11, regs->r11);\n\tkvm_register_write(vcpu, VCPU_REGS_R12, regs->r12);\n\tkvm_register_write(vcpu, VCPU_REGS_R13, regs->r13);\n\tkvm_register_write(vcpu, VCPU_REGS_R14, regs->r14);\n\tkvm_register_write(vcpu, VCPU_REGS_R15, regs->r15);\n#endif\n\n\tkvm_rip_write(vcpu, regs->rip);\n\tkvm_set_rflags(vcpu, regs->rflags);\n\n\tvcpu->arch.exception.pending = false;\n\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\n\treturn 0;\n}\n\nvoid kvm_get_cs_db_l_bits(struct kvm_vcpu *vcpu, int *db, int *l)\n{\n\tstruct kvm_segment cs;\n\n\tkvm_get_segment(vcpu, &cs, VCPU_SREG_CS);\n\t*db = cs.db;\n\t*l = cs.l;\n}\nEXPORT_SYMBOL_GPL(kvm_get_cs_db_l_bits);\n\nint kvm_arch_vcpu_ioctl_get_sregs(struct kvm_vcpu *vcpu,\n\t\t\t\t  struct kvm_sregs *sregs)\n{\n\tstruct desc_ptr dt;\n\n\tkvm_get_segment(vcpu, &sregs->cs, VCPU_SREG_CS);\n\tkvm_get_segment(vcpu, &sregs->ds, VCPU_SREG_DS);\n\tkvm_get_segment(vcpu, &sregs->es, VCPU_SREG_ES);\n\tkvm_get_segment(vcpu, &sregs->fs, VCPU_SREG_FS);\n\tkvm_get_segment(vcpu, &sregs->gs, VCPU_SREG_GS);\n\tkvm_get_segment(vcpu, &sregs->ss, VCPU_SREG_SS);\n\n\tkvm_get_segment(vcpu, &sregs->tr, VCPU_SREG_TR);\n\tkvm_get_segment(vcpu, &sregs->ldt, VCPU_SREG_LDTR);\n\n\tkvm_x86_ops->get_idt(vcpu, &dt);\n\tsregs->idt.limit = dt.size;\n\tsregs->idt.base = dt.address;\n\tkvm_x86_ops->get_gdt(vcpu, &dt);\n\tsregs->gdt.limit = dt.size;\n\tsregs->gdt.base = dt.address;\n\n\tsregs->cr0 = kvm_read_cr0(vcpu);\n\tsregs->cr2 = vcpu->arch.cr2;\n\tsregs->cr3 = vcpu->arch.cr3;\n\tsregs->cr4 = kvm_read_cr4(vcpu);\n\tsregs->cr8 = kvm_get_cr8(vcpu);\n\tsregs->efer = vcpu->arch.efer;\n\tsregs->apic_base = kvm_get_apic_base(vcpu);\n\n\tmemset(sregs->interrupt_bitmap, 0, sizeof sregs->interrupt_bitmap);\n\n\tif (vcpu->arch.interrupt.pending && !vcpu->arch.interrupt.soft)\n\t\tset_bit(vcpu->arch.interrupt.nr,\n\t\t\t(unsigned long *)sregs->interrupt_bitmap);\n\n\treturn 0;\n}\n\nint kvm_arch_vcpu_ioctl_get_mpstate(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_mp_state *mp_state)\n{\n\tmp_state->mp_state = vcpu->arch.mp_state;\n\treturn 0;\n}\n\nint kvm_arch_vcpu_ioctl_set_mpstate(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_mp_state *mp_state)\n{\n\tvcpu->arch.mp_state = mp_state->mp_state;\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\treturn 0;\n}\n\nint kvm_task_switch(struct kvm_vcpu *vcpu, u16 tss_selector, int reason,\n\t\t    bool has_error_code, u32 error_code)\n{\n\tstruct decode_cache *c = &vcpu->arch.emulate_ctxt.decode;\n\tint ret;\n\n\tinit_emulate_ctxt(vcpu);\n\n\tret = emulator_task_switch(&vcpu->arch.emulate_ctxt,\n\t\t\t\t   tss_selector, reason, has_error_code,\n\t\t\t\t   error_code);\n\n\tif (ret)\n\t\treturn EMULATE_FAIL;\n\n\tmemcpy(vcpu->arch.regs, c->regs, sizeof c->regs);\n\tkvm_rip_write(vcpu, vcpu->arch.emulate_ctxt.eip);\n\tkvm_x86_ops->set_rflags(vcpu, vcpu->arch.emulate_ctxt.eflags);\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\treturn EMULATE_DONE;\n}\nEXPORT_SYMBOL_GPL(kvm_task_switch);\n\nint kvm_arch_vcpu_ioctl_set_sregs(struct kvm_vcpu *vcpu,\n\t\t\t\t  struct kvm_sregs *sregs)\n{\n\tint mmu_reset_needed = 0;\n\tint pending_vec, max_bits;\n\tstruct desc_ptr dt;\n\n\tdt.size = sregs->idt.limit;\n\tdt.address = sregs->idt.base;\n\tkvm_x86_ops->set_idt(vcpu, &dt);\n\tdt.size = sregs->gdt.limit;\n\tdt.address = sregs->gdt.base;\n\tkvm_x86_ops->set_gdt(vcpu, &dt);\n\n\tvcpu->arch.cr2 = sregs->cr2;\n\tmmu_reset_needed |= vcpu->arch.cr3 != sregs->cr3;\n\tvcpu->arch.cr3 = sregs->cr3;\n\n\tkvm_set_cr8(vcpu, sregs->cr8);\n\n\tmmu_reset_needed |= vcpu->arch.efer != sregs->efer;\n\tkvm_x86_ops->set_efer(vcpu, sregs->efer);\n\tkvm_set_apic_base(vcpu, sregs->apic_base);\n\n\tmmu_reset_needed |= kvm_read_cr0(vcpu) != sregs->cr0;\n\tkvm_x86_ops->set_cr0(vcpu, sregs->cr0);\n\tvcpu->arch.cr0 = sregs->cr0;\n\n\tmmu_reset_needed |= kvm_read_cr4(vcpu) != sregs->cr4;\n\tkvm_x86_ops->set_cr4(vcpu, sregs->cr4);\n\tif (sregs->cr4 & X86_CR4_OSXSAVE)\n\t\tupdate_cpuid(vcpu);\n\tif (!is_long_mode(vcpu) && is_pae(vcpu)) {\n\t\tload_pdptrs(vcpu, vcpu->arch.walk_mmu, vcpu->arch.cr3);\n\t\tmmu_reset_needed = 1;\n\t}\n\n\tif (mmu_reset_needed)\n\t\tkvm_mmu_reset_context(vcpu);\n\n\tmax_bits = (sizeof sregs->interrupt_bitmap) << 3;\n\tpending_vec = find_first_bit(\n\t\t(const unsigned long *)sregs->interrupt_bitmap, max_bits);\n\tif (pending_vec < max_bits) {\n\t\tkvm_queue_interrupt(vcpu, pending_vec, false);\n\t\tpr_debug(\"Set back pending irq %d\\n\", pending_vec);\n\t\tif (irqchip_in_kernel(vcpu->kvm))\n\t\t\tkvm_pic_clear_isr_ack(vcpu->kvm);\n\t}\n\n\tkvm_set_segment(vcpu, &sregs->cs, VCPU_SREG_CS);\n\tkvm_set_segment(vcpu, &sregs->ds, VCPU_SREG_DS);\n\tkvm_set_segment(vcpu, &sregs->es, VCPU_SREG_ES);\n\tkvm_set_segment(vcpu, &sregs->fs, VCPU_SREG_FS);\n\tkvm_set_segment(vcpu, &sregs->gs, VCPU_SREG_GS);\n\tkvm_set_segment(vcpu, &sregs->ss, VCPU_SREG_SS);\n\n\tkvm_set_segment(vcpu, &sregs->tr, VCPU_SREG_TR);\n\tkvm_set_segment(vcpu, &sregs->ldt, VCPU_SREG_LDTR);\n\n\tupdate_cr8_intercept(vcpu);\n\n\t/* Older userspace won't unhalt the vcpu on reset. */\n\tif (kvm_vcpu_is_bsp(vcpu) && kvm_rip_read(vcpu) == 0xfff0 &&\n\t    sregs->cs.selector == 0xf000 && sregs->cs.base == 0xffff0000 &&\n\t    !is_protmode(vcpu))\n\t\tvcpu->arch.mp_state = KVM_MP_STATE_RUNNABLE;\n\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\n\treturn 0;\n}\n\nint kvm_arch_vcpu_ioctl_set_guest_debug(struct kvm_vcpu *vcpu,\n\t\t\t\t\tstruct kvm_guest_debug *dbg)\n{\n\tunsigned long rflags;\n\tint i, r;\n\n\tif (dbg->control & (KVM_GUESTDBG_INJECT_DB | KVM_GUESTDBG_INJECT_BP)) {\n\t\tr = -EBUSY;\n\t\tif (vcpu->arch.exception.pending)\n\t\t\tgoto out;\n\t\tif (dbg->control & KVM_GUESTDBG_INJECT_DB)\n\t\t\tkvm_queue_exception(vcpu, DB_VECTOR);\n\t\telse\n\t\t\tkvm_queue_exception(vcpu, BP_VECTOR);\n\t}\n\n\t/*\n\t * Read rflags as long as potentially injected trace flags are still\n\t * filtered out.\n\t */\n\trflags = kvm_get_rflags(vcpu);\n\n\tvcpu->guest_debug = dbg->control;\n\tif (!(vcpu->guest_debug & KVM_GUESTDBG_ENABLE))\n\t\tvcpu->guest_debug = 0;\n\n\tif (vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP) {\n\t\tfor (i = 0; i < KVM_NR_DB_REGS; ++i)\n\t\t\tvcpu->arch.eff_db[i] = dbg->arch.debugreg[i];\n\t\tvcpu->arch.switch_db_regs =\n\t\t\t(dbg->arch.debugreg[7] & DR7_BP_EN_MASK);\n\t} else {\n\t\tfor (i = 0; i < KVM_NR_DB_REGS; i++)\n\t\t\tvcpu->arch.eff_db[i] = vcpu->arch.db[i];\n\t\tvcpu->arch.switch_db_regs = (vcpu->arch.dr7 & DR7_BP_EN_MASK);\n\t}\n\n\tif (vcpu->guest_debug & KVM_GUESTDBG_SINGLESTEP)\n\t\tvcpu->arch.singlestep_rip = kvm_rip_read(vcpu) +\n\t\t\tget_segment_base(vcpu, VCPU_SREG_CS);\n\n\t/*\n\t * Trigger an rflags update that will inject or remove the trace\n\t * flags.\n\t */\n\tkvm_set_rflags(vcpu, rflags);\n\n\tkvm_x86_ops->set_guest_debug(vcpu, dbg);\n\n\tr = 0;\n\nout:\n\n\treturn r;\n}\n\n/*\n * Translate a guest virtual address to a guest physical address.\n */\nint kvm_arch_vcpu_ioctl_translate(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_translation *tr)\n{\n\tunsigned long vaddr = tr->linear_address;\n\tgpa_t gpa;\n\tint idx;\n\n\tidx = srcu_read_lock(&vcpu->kvm->srcu);\n\tgpa = kvm_mmu_gva_to_gpa_system(vcpu, vaddr, NULL);\n\tsrcu_read_unlock(&vcpu->kvm->srcu, idx);\n\ttr->physical_address = gpa;\n\ttr->valid = gpa != UNMAPPED_GVA;\n\ttr->writeable = 1;\n\ttr->usermode = 0;\n\n\treturn 0;\n}\n\nint kvm_arch_vcpu_ioctl_get_fpu(struct kvm_vcpu *vcpu, struct kvm_fpu *fpu)\n{\n\tstruct i387_fxsave_struct *fxsave =\n\t\t\t&vcpu->arch.guest_fpu.state->fxsave;\n\n\tmemcpy(fpu->fpr, fxsave->st_space, 128);\n\tfpu->fcw = fxsave->cwd;\n\tfpu->fsw = fxsave->swd;\n\tfpu->ftwx = fxsave->twd;\n\tfpu->last_opcode = fxsave->fop;\n\tfpu->last_ip = fxsave->rip;\n\tfpu->last_dp = fxsave->rdp;\n\tmemcpy(fpu->xmm, fxsave->xmm_space, sizeof fxsave->xmm_space);\n\n\treturn 0;\n}\n\nint kvm_arch_vcpu_ioctl_set_fpu(struct kvm_vcpu *vcpu, struct kvm_fpu *fpu)\n{\n\tstruct i387_fxsave_struct *fxsave =\n\t\t\t&vcpu->arch.guest_fpu.state->fxsave;\n\n\tmemcpy(fxsave->st_space, fpu->fpr, 128);\n\tfxsave->cwd = fpu->fcw;\n\tfxsave->swd = fpu->fsw;\n\tfxsave->twd = fpu->ftwx;\n\tfxsave->fop = fpu->last_opcode;\n\tfxsave->rip = fpu->last_ip;\n\tfxsave->rdp = fpu->last_dp;\n\tmemcpy(fxsave->xmm_space, fpu->xmm, sizeof fxsave->xmm_space);\n\n\treturn 0;\n}\n\nint fx_init(struct kvm_vcpu *vcpu)\n{\n\tint err;\n\n\terr = fpu_alloc(&vcpu->arch.guest_fpu);\n\tif (err)\n\t\treturn err;\n\n\tfpu_finit(&vcpu->arch.guest_fpu);\n\n\t/*\n\t * Ensure guest xcr0 is valid for loading\n\t */\n\tvcpu->arch.xcr0 = XSTATE_FP;\n\n\tvcpu->arch.cr0 |= X86_CR0_ET;\n\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(fx_init);\n\nstatic void fx_free(struct kvm_vcpu *vcpu)\n{\n\tfpu_free(&vcpu->arch.guest_fpu);\n}\n\nvoid kvm_load_guest_fpu(struct kvm_vcpu *vcpu)\n{\n\tif (vcpu->guest_fpu_loaded)\n\t\treturn;\n\n\t/*\n\t * Restore all possible states in the guest,\n\t * and assume host would use all available bits.\n\t * Guest xcr0 would be loaded later.\n\t */\n\tkvm_put_guest_xcr0(vcpu);\n\tvcpu->guest_fpu_loaded = 1;\n\tunlazy_fpu(current);\n\tfpu_restore_checking(&vcpu->arch.guest_fpu);\n\ttrace_kvm_fpu(1);\n}\n\nvoid kvm_put_guest_fpu(struct kvm_vcpu *vcpu)\n{\n\tkvm_put_guest_xcr0(vcpu);\n\n\tif (!vcpu->guest_fpu_loaded)\n\t\treturn;\n\n\tvcpu->guest_fpu_loaded = 0;\n\tfpu_save_init(&vcpu->arch.guest_fpu);\n\t++vcpu->stat.fpu_reload;\n\tkvm_make_request(KVM_REQ_DEACTIVATE_FPU, vcpu);\n\ttrace_kvm_fpu(0);\n}\n\nvoid kvm_arch_vcpu_free(struct kvm_vcpu *vcpu)\n{\n\tif (vcpu->arch.time_page) {\n\t\tkvm_release_page_dirty(vcpu->arch.time_page);\n\t\tvcpu->arch.time_page = NULL;\n\t}\n\n\tfree_cpumask_var(vcpu->arch.wbinvd_dirty_mask);\n\tfx_free(vcpu);\n\tkvm_x86_ops->vcpu_free(vcpu);\n}\n\nstruct kvm_vcpu *kvm_arch_vcpu_create(struct kvm *kvm,\n\t\t\t\t\t\tunsigned int id)\n{\n\tif (check_tsc_unstable() && atomic_read(&kvm->online_vcpus) != 0)\n\t\tprintk_once(KERN_WARNING\n\t\t\"kvm: SMP vm created on host with unstable TSC; \"\n\t\t\"guest TSC will not be reliable\\n\");\n\treturn kvm_x86_ops->vcpu_create(kvm, id);\n}\n\nint kvm_arch_vcpu_setup(struct kvm_vcpu *vcpu)\n{\n\tint r;\n\n\tvcpu->arch.mtrr_state.have_fixed = 1;\n\tvcpu_load(vcpu);\n\tr = kvm_arch_vcpu_reset(vcpu);\n\tif (r == 0)\n\t\tr = kvm_mmu_setup(vcpu);\n\tvcpu_put(vcpu);\n\tif (r < 0)\n\t\tgoto free_vcpu;\n\n\treturn 0;\nfree_vcpu:\n\tkvm_x86_ops->vcpu_free(vcpu);\n\treturn r;\n}\n\nvoid kvm_arch_vcpu_destroy(struct kvm_vcpu *vcpu)\n{\n\tvcpu->arch.apf.msr_val = 0;\n\n\tvcpu_load(vcpu);\n\tkvm_mmu_unload(vcpu);\n\tvcpu_put(vcpu);\n\n\tfx_free(vcpu);\n\tkvm_x86_ops->vcpu_free(vcpu);\n}\n\nint kvm_arch_vcpu_reset(struct kvm_vcpu *vcpu)\n{\n\tvcpu->arch.nmi_pending = false;\n\tvcpu->arch.nmi_injected = false;\n\n\tvcpu->arch.switch_db_regs = 0;\n\tmemset(vcpu->arch.db, 0, sizeof(vcpu->arch.db));\n\tvcpu->arch.dr6 = DR6_FIXED_1;\n\tvcpu->arch.dr7 = DR7_FIXED_1;\n\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n\tvcpu->arch.apf.msr_val = 0;\n\n\tkvm_clear_async_pf_completion_queue(vcpu);\n\tkvm_async_pf_hash_reset(vcpu);\n\tvcpu->arch.apf.halted = false;\n\n\treturn kvm_x86_ops->vcpu_reset(vcpu);\n}\n\nint kvm_arch_hardware_enable(void *garbage)\n{\n\tstruct kvm *kvm;\n\tstruct kvm_vcpu *vcpu;\n\tint i;\n\n\tkvm_shared_msr_cpu_online();\n\tlist_for_each_entry(kvm, &vm_list, vm_list)\n\t\tkvm_for_each_vcpu(i, vcpu, kvm)\n\t\t\tif (vcpu->cpu == smp_processor_id())\n\t\t\t\tkvm_make_request(KVM_REQ_CLOCK_UPDATE, vcpu);\n\treturn kvm_x86_ops->hardware_enable(garbage);\n}\n\nvoid kvm_arch_hardware_disable(void *garbage)\n{\n\tkvm_x86_ops->hardware_disable(garbage);\n\tdrop_user_return_notifiers(garbage);\n}\n\nint kvm_arch_hardware_setup(void)\n{\n\treturn kvm_x86_ops->hardware_setup();\n}\n\nvoid kvm_arch_hardware_unsetup(void)\n{\n\tkvm_x86_ops->hardware_unsetup();\n}\n\nvoid kvm_arch_check_processor_compat(void *rtn)\n{\n\tkvm_x86_ops->check_processor_compatibility(rtn);\n}\n\nint kvm_arch_vcpu_init(struct kvm_vcpu *vcpu)\n{\n\tstruct page *page;\n\tstruct kvm *kvm;\n\tint r;\n\n\tBUG_ON(vcpu->kvm == NULL);\n\tkvm = vcpu->kvm;\n\n\tvcpu->arch.emulate_ctxt.ops = &emulate_ops;\n\tvcpu->arch.walk_mmu = &vcpu->arch.mmu;\n\tvcpu->arch.mmu.root_hpa = INVALID_PAGE;\n\tvcpu->arch.mmu.translate_gpa = translate_gpa;\n\tvcpu->arch.nested_mmu.translate_gpa = translate_nested_gpa;\n\tif (!irqchip_in_kernel(kvm) || kvm_vcpu_is_bsp(vcpu))\n\t\tvcpu->arch.mp_state = KVM_MP_STATE_RUNNABLE;\n\telse\n\t\tvcpu->arch.mp_state = KVM_MP_STATE_UNINITIALIZED;\n\n\tpage = alloc_page(GFP_KERNEL | __GFP_ZERO);\n\tif (!page) {\n\t\tr = -ENOMEM;\n\t\tgoto fail;\n\t}\n\tvcpu->arch.pio_data = page_address(page);\n\n\tif (!kvm->arch.virtual_tsc_khz)\n\t\tkvm_arch_set_tsc_khz(kvm, max_tsc_khz);\n\n\tr = kvm_mmu_create(vcpu);\n\tif (r < 0)\n\t\tgoto fail_free_pio_data;\n\n\tif (irqchip_in_kernel(kvm)) {\n\t\tr = kvm_create_lapic(vcpu);\n\t\tif (r < 0)\n\t\t\tgoto fail_mmu_destroy;\n\t}\n\n\tvcpu->arch.mce_banks = kzalloc(KVM_MAX_MCE_BANKS * sizeof(u64) * 4,\n\t\t\t\t       GFP_KERNEL);\n\tif (!vcpu->arch.mce_banks) {\n\t\tr = -ENOMEM;\n\t\tgoto fail_free_lapic;\n\t}\n\tvcpu->arch.mcg_cap = KVM_MAX_MCE_BANKS;\n\n\tif (!zalloc_cpumask_var(&vcpu->arch.wbinvd_dirty_mask, GFP_KERNEL))\n\t\tgoto fail_free_mce_banks;\n\n\tkvm_async_pf_hash_reset(vcpu);\n\n\treturn 0;\nfail_free_mce_banks:\n\tkfree(vcpu->arch.mce_banks);\nfail_free_lapic:\n\tkvm_free_lapic(vcpu);\nfail_mmu_destroy:\n\tkvm_mmu_destroy(vcpu);\nfail_free_pio_data:\n\tfree_page((unsigned long)vcpu->arch.pio_data);\nfail:\n\treturn r;\n}\n\nvoid kvm_arch_vcpu_uninit(struct kvm_vcpu *vcpu)\n{\n\tint idx;\n\n\tkfree(vcpu->arch.mce_banks);\n\tkvm_free_lapic(vcpu);\n\tidx = srcu_read_lock(&vcpu->kvm->srcu);\n\tkvm_mmu_destroy(vcpu);\n\tsrcu_read_unlock(&vcpu->kvm->srcu, idx);\n\tfree_page((unsigned long)vcpu->arch.pio_data);\n}\n\nint kvm_arch_init_vm(struct kvm *kvm)\n{\n\tINIT_LIST_HEAD(&kvm->arch.active_mmu_pages);\n\tINIT_LIST_HEAD(&kvm->arch.assigned_dev_head);\n\n\t/* Reserve bit 0 of irq_sources_bitmap for userspace irq source */\n\tset_bit(KVM_USERSPACE_IRQ_SOURCE_ID, &kvm->arch.irq_sources_bitmap);\n\n\tspin_lock_init(&kvm->arch.tsc_write_lock);\n\n\treturn 0;\n}\n\nstatic void kvm_unload_vcpu_mmu(struct kvm_vcpu *vcpu)\n{\n\tvcpu_load(vcpu);\n\tkvm_mmu_unload(vcpu);\n\tvcpu_put(vcpu);\n}\n\nstatic void kvm_free_vcpus(struct kvm *kvm)\n{\n\tunsigned int i;\n\tstruct kvm_vcpu *vcpu;\n\n\t/*\n\t * Unpin any mmu pages first.\n\t */\n\tkvm_for_each_vcpu(i, vcpu, kvm) {\n\t\tkvm_clear_async_pf_completion_queue(vcpu);\n\t\tkvm_unload_vcpu_mmu(vcpu);\n\t}\n\tkvm_for_each_vcpu(i, vcpu, kvm)\n\t\tkvm_arch_vcpu_free(vcpu);\n\n\tmutex_lock(&kvm->lock);\n\tfor (i = 0; i < atomic_read(&kvm->online_vcpus); i++)\n\t\tkvm->vcpus[i] = NULL;\n\n\tatomic_set(&kvm->online_vcpus, 0);\n\tmutex_unlock(&kvm->lock);\n}\n\nvoid kvm_arch_sync_events(struct kvm *kvm)\n{\n\tkvm_free_all_assigned_devices(kvm);\n\tkvm_free_pit(kvm);\n}\n\nvoid kvm_arch_destroy_vm(struct kvm *kvm)\n{\n\tkvm_iommu_unmap_guest(kvm);\n\tkfree(kvm->arch.vpic);\n\tkfree(kvm->arch.vioapic);\n\tkvm_free_vcpus(kvm);\n\tif (kvm->arch.apic_access_page)\n\t\tput_page(kvm->arch.apic_access_page);\n\tif (kvm->arch.ept_identity_pagetable)\n\t\tput_page(kvm->arch.ept_identity_pagetable);\n}\n\nint kvm_arch_prepare_memory_region(struct kvm *kvm,\n\t\t\t\tstruct kvm_memory_slot *memslot,\n\t\t\t\tstruct kvm_memory_slot old,\n\t\t\t\tstruct kvm_userspace_memory_region *mem,\n\t\t\t\tint user_alloc)\n{\n\tint npages = memslot->npages;\n\tint map_flags = MAP_PRIVATE | MAP_ANONYMOUS;\n\n\t/* Prevent internal slot pages from being moved by fork()/COW. */\n\tif (memslot->id >= KVM_MEMORY_SLOTS)\n\t\tmap_flags = MAP_SHARED | MAP_ANONYMOUS;\n\n\t/*To keep backward compatibility with older userspace,\n\t *x86 needs to hanlde !user_alloc case.\n\t */\n\tif (!user_alloc) {\n\t\tif (npages && !old.rmap) {\n\t\t\tunsigned long userspace_addr;\n\n\t\t\tdown_write(&current->mm->mmap_sem);\n\t\t\tuserspace_addr = do_mmap(NULL, 0,\n\t\t\t\t\t\t npages * PAGE_SIZE,\n\t\t\t\t\t\t PROT_READ | PROT_WRITE,\n\t\t\t\t\t\t map_flags,\n\t\t\t\t\t\t 0);\n\t\t\tup_write(&current->mm->mmap_sem);\n\n\t\t\tif (IS_ERR((void *)userspace_addr))\n\t\t\t\treturn PTR_ERR((void *)userspace_addr);\n\n\t\t\tmemslot->userspace_addr = userspace_addr;\n\t\t}\n\t}\n\n\n\treturn 0;\n}\n\nvoid kvm_arch_commit_memory_region(struct kvm *kvm,\n\t\t\t\tstruct kvm_userspace_memory_region *mem,\n\t\t\t\tstruct kvm_memory_slot old,\n\t\t\t\tint user_alloc)\n{\n\n\tint npages = mem->memory_size >> PAGE_SHIFT;\n\n\tif (!user_alloc && !old.user_alloc && old.rmap && !npages) {\n\t\tint ret;\n\n\t\tdown_write(&current->mm->mmap_sem);\n\t\tret = do_munmap(current->mm, old.userspace_addr,\n\t\t\t\told.npages * PAGE_SIZE);\n\t\tup_write(&current->mm->mmap_sem);\n\t\tif (ret < 0)\n\t\t\tprintk(KERN_WARNING\n\t\t\t       \"kvm_vm_ioctl_set_memory_region: \"\n\t\t\t       \"failed to munmap memory\\n\");\n\t}\n\n\tspin_lock(&kvm->mmu_lock);\n\tif (!kvm->arch.n_requested_mmu_pages) {\n\t\tunsigned int nr_mmu_pages = kvm_mmu_calculate_mmu_pages(kvm);\n\t\tkvm_mmu_change_mmu_pages(kvm, nr_mmu_pages);\n\t}\n\n\tkvm_mmu_slot_remove_write_access(kvm, mem->slot);\n\tspin_unlock(&kvm->mmu_lock);\n}\n\nvoid kvm_arch_flush_shadow(struct kvm *kvm)\n{\n\tkvm_mmu_zap_all(kvm);\n\tkvm_reload_remote_mmus(kvm);\n}\n\nint kvm_arch_vcpu_runnable(struct kvm_vcpu *vcpu)\n{\n\treturn (vcpu->arch.mp_state == KVM_MP_STATE_RUNNABLE &&\n\t\t!vcpu->arch.apf.halted)\n\t\t|| !list_empty_careful(&vcpu->async_pf.done)\n\t\t|| vcpu->arch.mp_state == KVM_MP_STATE_SIPI_RECEIVED\n\t\t|| vcpu->arch.nmi_pending ||\n\t\t(kvm_arch_interrupt_allowed(vcpu) &&\n\t\t kvm_cpu_has_interrupt(vcpu));\n}\n\nvoid kvm_vcpu_kick(struct kvm_vcpu *vcpu)\n{\n\tint me;\n\tint cpu = vcpu->cpu;\n\n\tif (waitqueue_active(&vcpu->wq)) {\n\t\twake_up_interruptible(&vcpu->wq);\n\t\t++vcpu->stat.halt_wakeup;\n\t}\n\n\tme = get_cpu();\n\tif (cpu != me && (unsigned)cpu < nr_cpu_ids && cpu_online(cpu))\n\t\tif (atomic_xchg(&vcpu->guest_mode, 0))\n\t\t\tsmp_send_reschedule(cpu);\n\tput_cpu();\n}\n\nint kvm_arch_interrupt_allowed(struct kvm_vcpu *vcpu)\n{\n\treturn kvm_x86_ops->interrupt_allowed(vcpu);\n}\n\nbool kvm_is_linear_rip(struct kvm_vcpu *vcpu, unsigned long linear_rip)\n{\n\tunsigned long current_rip = kvm_rip_read(vcpu) +\n\t\tget_segment_base(vcpu, VCPU_SREG_CS);\n\n\treturn current_rip == linear_rip;\n}\nEXPORT_SYMBOL_GPL(kvm_is_linear_rip);\n\nunsigned long kvm_get_rflags(struct kvm_vcpu *vcpu)\n{\n\tunsigned long rflags;\n\n\trflags = kvm_x86_ops->get_rflags(vcpu);\n\tif (vcpu->guest_debug & KVM_GUESTDBG_SINGLESTEP)\n\t\trflags &= ~X86_EFLAGS_TF;\n\treturn rflags;\n}\nEXPORT_SYMBOL_GPL(kvm_get_rflags);\n\nvoid kvm_set_rflags(struct kvm_vcpu *vcpu, unsigned long rflags)\n{\n\tif (vcpu->guest_debug & KVM_GUESTDBG_SINGLESTEP &&\n\t    kvm_is_linear_rip(vcpu, vcpu->arch.singlestep_rip))\n\t\trflags |= X86_EFLAGS_TF;\n\tkvm_x86_ops->set_rflags(vcpu, rflags);\n\tkvm_make_request(KVM_REQ_EVENT, vcpu);\n}\nEXPORT_SYMBOL_GPL(kvm_set_rflags);\n\nvoid kvm_arch_async_page_ready(struct kvm_vcpu *vcpu, struct kvm_async_pf *work)\n{\n\tint r;\n\n\tif (!vcpu->arch.mmu.direct_map || !work->arch.direct_map ||\n\t      is_error_page(work->page))\n\t\treturn;\n\n\tr = kvm_mmu_reload(vcpu);\n\tif (unlikely(r))\n\t\treturn;\n\n\tvcpu->arch.mmu.page_fault(vcpu, work->gva, 0, true);\n}\n\nstatic inline u32 kvm_async_pf_hash_fn(gfn_t gfn)\n{\n\treturn hash_32(gfn & 0xffffffff, order_base_2(ASYNC_PF_PER_VCPU));\n}\n\nstatic inline u32 kvm_async_pf_next_probe(u32 key)\n{\n\treturn (key + 1) & (roundup_pow_of_two(ASYNC_PF_PER_VCPU) - 1);\n}\n\nstatic void kvm_add_async_pf_gfn(struct kvm_vcpu *vcpu, gfn_t gfn)\n{\n\tu32 key = kvm_async_pf_hash_fn(gfn);\n\n\twhile (vcpu->arch.apf.gfns[key] != ~0)\n\t\tkey = kvm_async_pf_next_probe(key);\n\n\tvcpu->arch.apf.gfns[key] = gfn;\n}\n\nstatic u32 kvm_async_pf_gfn_slot(struct kvm_vcpu *vcpu, gfn_t gfn)\n{\n\tint i;\n\tu32 key = kvm_async_pf_hash_fn(gfn);\n\n\tfor (i = 0; i < roundup_pow_of_two(ASYNC_PF_PER_VCPU) &&\n\t\t     (vcpu->arch.apf.gfns[key] != gfn &&\n\t\t      vcpu->arch.apf.gfns[key] != ~0); i++)\n\t\tkey = kvm_async_pf_next_probe(key);\n\n\treturn key;\n}\n\nbool kvm_find_async_pf_gfn(struct kvm_vcpu *vcpu, gfn_t gfn)\n{\n\treturn vcpu->arch.apf.gfns[kvm_async_pf_gfn_slot(vcpu, gfn)] == gfn;\n}\n\nstatic void kvm_del_async_pf_gfn(struct kvm_vcpu *vcpu, gfn_t gfn)\n{\n\tu32 i, j, k;\n\n\ti = j = kvm_async_pf_gfn_slot(vcpu, gfn);\n\twhile (true) {\n\t\tvcpu->arch.apf.gfns[i] = ~0;\n\t\tdo {\n\t\t\tj = kvm_async_pf_next_probe(j);\n\t\t\tif (vcpu->arch.apf.gfns[j] == ~0)\n\t\t\t\treturn;\n\t\t\tk = kvm_async_pf_hash_fn(vcpu->arch.apf.gfns[j]);\n\t\t\t/*\n\t\t\t * k lies cyclically in ]i,j]\n\t\t\t * |    i.k.j |\n\t\t\t * |....j i.k.| or  |.k..j i...|\n\t\t\t */\n\t\t} while ((i <= j) ? (i < k && k <= j) : (i < k || k <= j));\n\t\tvcpu->arch.apf.gfns[i] = vcpu->arch.apf.gfns[j];\n\t\ti = j;\n\t}\n}\n\nstatic int apf_put_user(struct kvm_vcpu *vcpu, u32 val)\n{\n\n\treturn kvm_write_guest_cached(vcpu->kvm, &vcpu->arch.apf.data, &val,\n\t\t\t\t      sizeof(val));\n}\n\nvoid kvm_arch_async_page_not_present(struct kvm_vcpu *vcpu,\n\t\t\t\t     struct kvm_async_pf *work)\n{\n\tstruct x86_exception fault;\n\n\ttrace_kvm_async_pf_not_present(work->arch.token, work->gva);\n\tkvm_add_async_pf_gfn(vcpu, work->arch.gfn);\n\n\tif (!(vcpu->arch.apf.msr_val & KVM_ASYNC_PF_ENABLED) ||\n\t    (vcpu->arch.apf.send_user_only &&\n\t     kvm_x86_ops->get_cpl(vcpu) == 0))\n\t\tkvm_make_request(KVM_REQ_APF_HALT, vcpu);\n\telse if (!apf_put_user(vcpu, KVM_PV_REASON_PAGE_NOT_PRESENT)) {\n\t\tfault.vector = PF_VECTOR;\n\t\tfault.error_code_valid = true;\n\t\tfault.error_code = 0;\n\t\tfault.nested_page_fault = false;\n\t\tfault.address = work->arch.token;\n\t\tkvm_inject_page_fault(vcpu, &fault);\n\t}\n}\n\nvoid kvm_arch_async_page_present(struct kvm_vcpu *vcpu,\n\t\t\t\t struct kvm_async_pf *work)\n{\n\tstruct x86_exception fault;\n\n\ttrace_kvm_async_pf_ready(work->arch.token, work->gva);\n\tif (is_error_page(work->page))\n\t\twork->arch.token = ~0; /* broadcast wakeup */\n\telse\n\t\tkvm_del_async_pf_gfn(vcpu, work->arch.gfn);\n\n\tif ((vcpu->arch.apf.msr_val & KVM_ASYNC_PF_ENABLED) &&\n\t    !apf_put_user(vcpu, KVM_PV_REASON_PAGE_READY)) {\n\t\tfault.vector = PF_VECTOR;\n\t\tfault.error_code_valid = true;\n\t\tfault.error_code = 0;\n\t\tfault.nested_page_fault = false;\n\t\tfault.address = work->arch.token;\n\t\tkvm_inject_page_fault(vcpu, &fault);\n\t}\n\tvcpu->arch.apf.halted = false;\n}\n\nbool kvm_arch_can_inject_async_page_present(struct kvm_vcpu *vcpu)\n{\n\tif (!(vcpu->arch.apf.msr_val & KVM_ASYNC_PF_ENABLED))\n\t\treturn true;\n\telse\n\t\treturn !kvm_event_needs_reinjection(vcpu) &&\n\t\t\tkvm_x86_ops->interrupt_allowed(vcpu);\n}\n\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_exit);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_inj_virq);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_page_fault);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_msr);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_cr);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_nested_vmrun);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_nested_vmexit);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_nested_vmexit_inject);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_nested_intr_vmexit);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_invlpga);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_skinit);\nEXPORT_TRACEPOINT_SYMBOL_GPL(kvm_nested_intercepts);\n"], "filenames": ["arch/x86/kvm/x86.c"], "buggy_code_start_loc": [4316], "buggy_code_end_loc": [4324], "fixing_code_start_loc": [4317], "fixing_code_end_loc": [4330], "type": "CWE-362", "message": "Race condition in arch/x86/kvm/x86.c in the Linux kernel before 2.6.38 allows L2 guest OS users to cause a denial of service (L1 guest OS crash) via a crafted instruction that triggers an L2 emulation failure report, a similar issue to CVE-2014-7842.", "other": {"cve": {"id": "CVE-2010-5313", "sourceIdentifier": "cve@mitre.org", "published": "2014-11-30T01:59:00.087", "lastModified": "2016-11-28T19:07:26.487", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Race condition in arch/x86/kvm/x86.c in the Linux kernel before 2.6.38 allows L2 guest OS users to cause a denial of service (L1 guest OS crash) via a crafted instruction that triggers an L2 emulation failure report, a similar issue to CVE-2014-7842."}, {"lang": "es", "value": "Condici\u00f3n de carrera en arch/x86/kvm/x86.c en el kernel de Linux anterior a 2.6.38 permite a usuarios del sistema operativo L2 invitado causar una denegaci\u00f3n de servicio (ca\u00edda del sistema operativo L1 invitado) a trav\u00e9s de una instrucci\u00f3n manipulada que provoca un informe de fallo de emulaci\u00f3n en L2, un problema similar a CVE-2014-7842."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:C", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "COMPLETE", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-362"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.6.37", "matchCriteriaId": "D027E796-4AE3-4965-B207-23256BA42202"}]}]}], "references": [{"url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=fc3a9157d3148ab91039c75423da8ef97be3e105", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2015-04/msg00000.html", "source": "cve@mitre.org"}, {"url": "http://mirror.linux.org.au/linux/kernel/v2.6/ChangeLog-2.6.38", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2016-0855.html", "source": "cve@mitre.org"}, {"url": "http://www.openwall.com/lists/oss-security/2014/11/13/7", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "http://www.oracle.com/technetwork/topics/security/linuxbulletinapr2016-2952096.html", "source": "cve@mitre.org"}, {"url": "http://www.oracle.com/technetwork/topics/security/linuxbulletinjan2016-2867209.html", "source": "cve@mitre.org"}, {"url": "http://www.oracle.com/technetwork/topics/security/linuxbulletinoct2015-2719645.html", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/71363", "source": "cve@mitre.org"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1163762", "source": "cve@mitre.org"}, {"url": "https://github.com/torvalds/linux/commit/fc3a9157d3148ab91039c75423da8ef97be3e105", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/fc3a9157d3148ab91039c75423da8ef97be3e105"}}