{"buggy_code": ["/*\n * SPDX-License-Identifier: ISC\n *\n * Copyright (c) 1999-2005, 2010-2015 Todd C. Miller <Todd.Miller@sudo.ws>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * Sponsored in part by the Defense Advanced Research Projects\n * Agency (DARPA) and Air Force Research Laboratory, Air Force\n * Materiel Command, USAF, under agreement number F39502-99-1-0512.\n */\n\n/*\n * This is an open source non-commercial project. Dear PVS-Studio, please check it.\n * PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n */\n\n#include <config.h>\n\n#include <sys/types.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <pwd.h>\n\n#include \"sudoers.h\"\n#include \"sudo_auth.h\"\n\n#define DESLEN\t\t\t13\n#define HAS_AGEINFO(p, l)\t(l == 18 && p[DESLEN] == ',')\n\nint\nsudo_passwd_init(struct passwd *pw, sudo_auth *auth)\n{\n    debug_decl(sudo_passwd_init, SUDOERS_DEBUG_AUTH);\n\n    /* Only initialize once. */\n    if (auth->data != NULL)\n\tdebug_return_int(AUTH_SUCCESS);\n\n#ifdef HAVE_SKEYACCESS\n    if (skeyaccess(pw, user_tty, NULL, NULL) == 0)\n\tdebug_return_int(AUTH_FAILURE);\n#endif\n    sudo_setspent();\n    auth->data = sudo_getepw(pw);\n    sudo_endspent();\n    debug_return_int(auth->data ? AUTH_SUCCESS : AUTH_FATAL);\n}\n\n#ifdef HAVE_CRYPT\nint\nsudo_passwd_verify(struct passwd *pw, char *pass, sudo_auth *auth, struct sudo_conv_callback *callback)\n{\n    char sav, *epass;\n    char *pw_epasswd = auth->data;\n    size_t pw_len;\n    int matched = 0;\n    debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);\n\n    /* An empty plain-text password must match an empty encrypted password. */\n    if (pass[0] == '\\0')\n\tdebug_return_int(pw_epasswd[0] ? AUTH_FAILURE : AUTH_SUCCESS);\n\n    /*\n     * Truncate to 8 chars if standard DES since not all crypt()'s do this.\n     * If this turns out not to be safe we will have to use OS #ifdef's (sigh).\n     */\n    sav = pass[8];\n    pw_len = strlen(pw_epasswd);\n    if (pw_len == DESLEN || HAS_AGEINFO(pw_epasswd, pw_len))\n\tpass[8] = '\\0';\n\n    /*\n     * Normal UN*X password check.\n     * HP-UX may add aging info (separated by a ',') at the end so\n     * only compare the first DESLEN characters in that case.\n     */\n    epass = (char *) crypt(pass, pw_epasswd);\n    pass[8] = sav;\n    if (epass != NULL) {\n\tif (HAS_AGEINFO(pw_epasswd, pw_len) && strlen(epass) == DESLEN)\n\t    matched = !strncmp(pw_epasswd, epass, DESLEN);\n\telse\n\t    matched = !strcmp(pw_epasswd, epass);\n    }\n\n    debug_return_int(matched ? AUTH_SUCCESS : AUTH_FAILURE);\n}\n#else\nint\nsudo_passwd_verify(struct passwd *pw, char *pass, sudo_auth *auth, struct sudo_conv_callback *callback)\n{\n    char *pw_passwd = auth->data;\n    int matched;\n    debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);\n\n    /* Simple string compare for systems without crypt(). */\n    matched = !strcmp(pass, pw_passwd);\n\n    debug_return_int(matched ? AUTH_SUCCESS : AUTH_FAILURE);\n}\n#endif\n\nint\nsudo_passwd_cleanup(struct passwd *pw, sudo_auth *auth, bool force)\n{\n    char *pw_epasswd = auth->data;\n    debug_decl(sudo_passwd_cleanup, SUDOERS_DEBUG_AUTH);\n\n    if (pw_epasswd != NULL)\n\tfreezero(pw_epasswd, strlen(pw_epasswd));\n\n    debug_return_int(AUTH_SUCCESS);\n}\n"], "fixing_code": ["/*\n * SPDX-License-Identifier: ISC\n *\n * Copyright (c) 1999-2005, 2010-2015 Todd C. Miller <Todd.Miller@sudo.ws>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * Sponsored in part by the Defense Advanced Research Projects\n * Agency (DARPA) and Air Force Research Laboratory, Air Force\n * Materiel Command, USAF, under agreement number F39502-99-1-0512.\n */\n\n/*\n * This is an open source non-commercial project. Dear PVS-Studio, please check it.\n * PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n */\n\n#include <config.h>\n\n#include <sys/types.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <pwd.h>\n\n#include \"sudoers.h\"\n#include \"sudo_auth.h\"\n\n#define DESLEN\t\t\t13\n#define HAS_AGEINFO(p, l)\t(l == 18 && p[DESLEN] == ',')\n\nint\nsudo_passwd_init(struct passwd *pw, sudo_auth *auth)\n{\n    debug_decl(sudo_passwd_init, SUDOERS_DEBUG_AUTH);\n\n    /* Only initialize once. */\n    if (auth->data != NULL)\n\tdebug_return_int(AUTH_SUCCESS);\n\n#ifdef HAVE_SKEYACCESS\n    if (skeyaccess(pw, user_tty, NULL, NULL) == 0)\n\tdebug_return_int(AUTH_FAILURE);\n#endif\n    sudo_setspent();\n    auth->data = sudo_getepw(pw);\n    sudo_endspent();\n    debug_return_int(auth->data ? AUTH_SUCCESS : AUTH_FATAL);\n}\n\n#ifdef HAVE_CRYPT\nint\nsudo_passwd_verify(struct passwd *pw, char *pass, sudo_auth *auth, struct sudo_conv_callback *callback)\n{\n    char des_pass[9], *epass;\n    char *pw_epasswd = auth->data;\n    size_t pw_len;\n    int matched = 0;\n    debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);\n\n    /* An empty plain-text password must match an empty encrypted password. */\n    if (pass[0] == '\\0')\n\tdebug_return_int(pw_epasswd[0] ? AUTH_FAILURE : AUTH_SUCCESS);\n\n    /*\n     * Truncate to 8 chars if standard DES since not all crypt()'s do this.\n     */\n    pw_len = strlen(pw_epasswd);\n    if (pw_len == DESLEN || HAS_AGEINFO(pw_epasswd, pw_len)) {\n\tstrlcpy(des_pass, pass, sizeof(des_pass));\n\tpass = des_pass;\n    }\n\n    /*\n     * Normal UN*X password check.\n     * HP-UX may add aging info (separated by a ',') at the end so\n     * only compare the first DESLEN characters in that case.\n     */\n    epass = (char *) crypt(pass, pw_epasswd);\n    if (epass != NULL) {\n\tif (HAS_AGEINFO(pw_epasswd, pw_len) && strlen(epass) == DESLEN)\n\t    matched = !strncmp(pw_epasswd, epass, DESLEN);\n\telse\n\t    matched = !strcmp(pw_epasswd, epass);\n    }\n\n    debug_return_int(matched ? AUTH_SUCCESS : AUTH_FAILURE);\n}\n#else\nint\nsudo_passwd_verify(struct passwd *pw, char *pass, sudo_auth *auth, struct sudo_conv_callback *callback)\n{\n    char *pw_passwd = auth->data;\n    int matched;\n    debug_decl(sudo_passwd_verify, SUDOERS_DEBUG_AUTH);\n\n    /* Simple string compare for systems without crypt(). */\n    matched = !strcmp(pass, pw_passwd);\n\n    debug_return_int(matched ? AUTH_SUCCESS : AUTH_FAILURE);\n}\n#endif\n\nint\nsudo_passwd_cleanup(struct passwd *pw, sudo_auth *auth, bool force)\n{\n    char *pw_epasswd = auth->data;\n    debug_decl(sudo_passwd_cleanup, SUDOERS_DEBUG_AUTH);\n\n    if (pw_epasswd != NULL)\n\tfreezero(pw_epasswd, strlen(pw_epasswd));\n\n    debug_return_int(AUTH_SUCCESS);\n}\n"], "filenames": ["plugins/sudoers/auth/passwd.c"], "buggy_code_start_loc": [66], "buggy_code_end_loc": [92], "fixing_code_start_loc": [66], "fixing_code_end_loc": [90], "type": "CWE-125", "message": "Sudo 1.8.0 through 1.9.12, with the crypt() password backend, contains a plugins/sudoers/auth/passwd.c array-out-of-bounds error that can result in a heap-based buffer over-read. This can be triggered by arbitrary local users with access to Sudo by entering a password of seven characters or fewer. The impact could vary depending on the system libraries, compiler, and processor architecture.", "other": {"cve": {"id": "CVE-2022-43995", "sourceIdentifier": "cve@mitre.org", "published": "2022-11-02T14:15:16.187", "lastModified": "2022-12-06T00:15:07.750", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Sudo 1.8.0 through 1.9.12, with the crypt() password backend, contains a plugins/sudoers/auth/passwd.c array-out-of-bounds error that can result in a heap-based buffer over-read. This can be triggered by arbitrary local users with access to Sudo by entering a password of seven characters or fewer. The impact could vary depending on the system libraries, compiler, and processor architecture."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sudo_project:sudo:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.8.0", "versionEndExcluding": "1.9.12", "matchCriteriaId": "E76D2160-BE9D-4C9E-B2AB-B52B3C84DAD7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sudo_project:sudo:1.9.12:-:*:*:*:*:*:*", "matchCriteriaId": "30B5DA3F-091D-4627-A5C0-2D1487A378B0"}]}]}], "references": [{"url": "https://bugzilla.redhat.com/show_bug.cgi?id=2139911", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/sudo-project/sudo/commit/bd209b9f16fcd1270c13db27ae3329c677d48050", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://news.ycombinator.com/item?id=33465707", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202211-08", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.sudo.ws/security/advisories/", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/sudo-project/sudo/commit/bd209b9f16fcd1270c13db27ae3329c677d48050"}}