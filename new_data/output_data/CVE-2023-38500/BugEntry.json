{"buggy_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer;\n\nuse LogicException;\nuse TYPO3\\HtmlSanitizer\\Behavior\\NodeInterface;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Tag;\n\n/**\n * Declares behavior used by node visitors\n * (and any component used during sanitization)\n */\nclass Behavior\n{\n    /**\n     * not having any behavioral capabilities\n     */\n    public const BLUNT = 0;\n\n    /**\n     * in case an unexpected tag was found, encode the whole tag as HTML\n     */\n    public const ENCODE_INVALID_TAG = 1;\n\n    /**\n     * in case an unexpected attribute was found, encode the whole tag as HTML\n     */\n    public const ENCODE_INVALID_ATTR = 2;\n\n    /**\n     * remove children at nodes that did not expect children\n     */\n    public const REMOVE_UNEXPECTED_CHILDREN = 4;\n\n    /**\n     * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n     * custom elements must contain a hyphen (`-`), start with ASCII lower alpha\n     */\n    public const ALLOW_CUSTOM_ELEMENTS = 8;\n\n    /**\n     * in case an unexpected comment was found, encode the whole comment as HTML\n     */\n    public const ENCODE_INVALID_COMMENT = 16;\n\n    /**\n     * in case an unexpected CDATA section was found, encode the whole CDATA section as HTML\n     */\n    public const ENCODE_INVALID_CDATA_SECTION = 32;\n\n    /**\n     * @var int\n     */\n    protected $flags = 0;\n\n    /**\n     * @var string\n     */\n    protected $name = 'undefined';\n\n    /**\n     * Node names as array index, e.g. `['strong' => new Tag('strong', '#comment' => new Comment()]`\n     * @var array<string, ?NodeInterface>\n     */\n    protected $nodes = [\n        // v2.1.0: adding `#comment` and `#cdata-section` hints for backward compatibility, will be removed with v3.0.0\n        '#comment' => null,\n        '#cdata-section' => null,\n    ];\n\n    public function withFlags(int $flags): self\n    {\n        if ($flags === $this->flags) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->flags = $flags;\n        return $target;\n    }\n\n    public function withName(string $name): self\n    {\n        if ($name === $this->name) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->name = $name;\n        return $target;\n    }\n\n    /**\n     * @todo deprecate\n     */\n    public function withTags(Tag ...$tags): self\n    {\n        return $this->withNodes(...$tags);\n    }\n\n    /**\n     * @todo deprecate\n     */\n    public function withoutTags(Tag ...$tags): self\n    {\n        return $this->withoutNodes(...$tags);\n    }\n\n    public function withNodes(NodeInterface ...$nodes): self\n    {\n        $names = array_map([$this, 'getNodeName'], $nodes);\n        $this->assertScalarUniqueness($names);\n        // uses node name as array index, e.g. `['#comment' => new Comment()]`\n        $indexedNodes = array_combine($names, $nodes);\n        if (!is_array($indexedNodes)) {\n            return $this;\n        }\n        $this->assertNodeUniqueness($indexedNodes);\n        $target = clone $this;\n        $target->nodes = array_merge($target->nodes, $indexedNodes);\n        return $target;\n    }\n\n    public function withoutNodes(NodeInterface ...$nodes): self\n    {\n        $names = array_map([$this, 'getNodeName'], $nodes);\n        $filteredNodes = array_filter(\n            $this->nodes,\n            static function (?NodeInterface $node, string $name) use ($nodes, $names) {\n                return $node === null && !in_array($name, $names, true)\n                    || $node !== null && !in_array($node, $nodes, true);\n            },\n            ARRAY_FILTER_USE_BOTH\n        );\n        if ($filteredNodes === $this->nodes) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->nodes = $filteredNodes;\n        return $target;\n    }\n\n    public function getFlags(): int\n    {\n        return $this->flags;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * @return list<Tag>\n     */\n    public function getTags(): array\n    {\n        return array_filter(\n            $this->nodes,\n            static function (NodeInterface $node) {\n                return $node instanceof Tag;\n            }\n        );\n    }\n\n    public function getTag(string $name): ?Tag\n    {\n        $name = strtolower($name);\n        $node = $this->nodes[$name] ?? null;\n        return $node instanceof Tag ? $node : null;\n    }\n\n    /**\n     * @return list<NodeInterface>\n     */\n    public function getNodes(): array\n    {\n        return $this->nodes;\n    }\n\n    public function getNode(string $name): ?NodeInterface\n    {\n        $name = strtolower($name);\n        return $this->nodes[$name] ?? null;\n    }\n\n    public function hasNode(string $name): bool\n    {\n        return array_key_exists($name, $this->nodes);\n    }\n\n    public function shallEncodeInvalidTag(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_TAG) === self::ENCODE_INVALID_TAG;\n    }\n\n    public function shallEncodeInvalidAttr(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_ATTR) === self::ENCODE_INVALID_ATTR;\n    }\n\n    public function shallEncodeInvalidComment(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_COMMENT) === self::ENCODE_INVALID_COMMENT;\n    }\n\n    public function shallEncodeInvalidCdataSection(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_CDATA_SECTION) === self::ENCODE_INVALID_CDATA_SECTION;\n    }\n\n    public function shallRemoveUnexpectedChildren(): bool\n    {\n        return ($this->flags & self::REMOVE_UNEXPECTED_CHILDREN) === self::REMOVE_UNEXPECTED_CHILDREN;\n    }\n\n    public function shallAllowCustomElements(): bool\n    {\n        return ($this->flags & self::ALLOW_CUSTOM_ELEMENTS) === self::ALLOW_CUSTOM_ELEMENTS;\n    }\n\n    /**\n     * @param list<string> $names\n     * @throws LogicException\n     */\n    protected function assertScalarUniqueness(array $names): void\n    {\n        $ambiguousNames = array_diff_assoc($names, array_unique($names));\n        if ($ambiguousNames !== []) {\n            throw new LogicException(\n                sprintf(\n                    'Ambiguous tag names %s.',\n                    implode(', ', $ambiguousNames)\n                ),\n                1625591503\n            );\n        }\n    }\n\n    /**\n     * @param array<string, NodeInterface> $nodes\n     */\n    protected function assertNodeUniqueness(array $nodes): void\n    {\n        $existingNodeNames = array_intersect_key(array_filter($this->nodes), $nodes);\n        if ($existingNodeNames !== []) {\n            throw new LogicException(\n                sprintf(\n                    'Cannot redeclare node names %s. Remove duplicates first',\n                    implode(', ', array_keys($existingNodeNames))\n                ),\n                1625391217\n            );\n        }\n    }\n\n    protected function getNodeName(NodeInterface $node): string\n    {\n        return strtolower($node->getName());\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Behavior;\n\n/**\n * Model of CDATA node.\n */\nclass CdataSection implements NodeInterface\n{\n    public function getName(): string\n    {\n        return '#cdata-section';\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Behavior;\n\n/**\n * Model of comment node.\n */\nclass Comment implements NodeInterface\n{\n    public function getName(): string\n    {\n        return '#comment';\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Builder;\n\nuse DOMNode;\nuse DOMText;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Attr\\UriAttrValueBuilder;\nuse TYPO3\\HtmlSanitizer\\Behavior\\NodeInterface;\nuse TYPO3\\HtmlSanitizer\\Sanitizer;\nuse TYPO3\\HtmlSanitizer\\Visitor\\CommonVisitor;\n\n/**\n * Builder, creating a `Sanitizer` instance with \"common\"\n * behavior for tags, attributes and values.\n */\nclass CommonBuilder implements BuilderInterface\n{\n    /**\n     * @var Behavior\\Attr[]\n     */\n    protected $globalAttrs;\n\n    /**\n     * @var Behavior\\Attr\n     */\n    protected $hrefAttr;\n\n    /**\n     * @var Behavior\\Attr\n     */\n    protected $srcAttr;\n\n    /**\n     * @var Behavior\\Attr\n     * @deprecated not used anymore\n     */\n    protected $srcsetAttr;\n\n    public function __construct()\n    {\n        $bluntUriAttrValueBuilder = new UriAttrValueBuilder();\n        $uriAttrValueBuilders = $this->createUriAttrValueBuilders();\n\n        $this->globalAttrs = $this->createGlobalAttrs();\n\n        $this->hrefAttr = (new Behavior\\Attr('href'))\n            ->addValues(...($uriAttrValueBuilders['href'] ?? $bluntUriAttrValueBuilder)->getValues());\n        $this->srcAttr = (new Behavior\\Attr('src'))\n            ->addValues(...($uriAttrValueBuilders['src'] ?? $bluntUriAttrValueBuilder)->getValues());\n\n        // @deprecated not used anymore\n        $srcsetAttrValueBuilder = (new UriAttrValueBuilder())\n            ->allowLocal(true)\n            ->allowSchemes('http', 'https');\n        $this->srcsetAttr = (new Behavior\\Attr('src'))\n            ->addValues(...$srcsetAttrValueBuilder->getValues());\n    }\n\n    public function build(): Sanitizer\n    {\n        $behavior = $this->createBehavior();\n        $visitor = new CommonVisitor($behavior);\n        return new Sanitizer($behavior, $visitor);\n    }\n\n    protected function createBehavior(): Behavior\n    {\n        return (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('common')\n            ->withTags(...array_values($this->createBasicTags()))\n            ->withTags(...array_values($this->createMediaTags()))\n            ->withTags(...array_values($this->createTableTags()))\n            ->withNodes(...array_values($this->createSpecialNodes()));\n    }\n\n    protected function createBasicTags(): array\n    {\n        $names = [\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#content_sectioning\n            'address', 'article', 'aside', 'footer', 'header',\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'main', 'nav', 'section',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#text_content\n            'blockquote', 'dd', 'div', 'dl', 'dt', 'figcaption', 'figure', 'li', 'ol', 'p', 'pre', 'ul',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#inline_text_semantics\n            'a', 'abbr',  'b', 'bdi', 'bdo', 'cite', 'code', 'data', 'dfn', 'em', 'i', 'kbd', 'mark',\n            'q', 'rb', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'small', 'span', 'strong', 'sub', 'sup',\n            'time', 'u', 'var', 'wbr',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#demarcating_edits\n            'del', 'ins',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#forms\n            'button', 'datalist', 'label', 'legend', 'meter', 'output', 'progress',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#interactive_elements\n            'details', 'dialog', 'menu', 'summary',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#web_components\n            // 'slot', 'template',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#obsolete_and_deprecated_elements\n            'acronym', 'big', 'center', 'font', 'nobr', 'strike', 'tt',\n        ];\n\n        $tags = [];\n        foreach ($names as $name) {\n            $tags[$name] = (new Behavior\\Tag($name, Behavior\\Tag::ALLOW_CHILDREN))\n                ->addAttrs(...$this->globalAttrs);\n        }\n        $tags['a']->addAttrs(\n            $this->hrefAttr,\n            ...$this->createAttrs(\n                // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\n                'download', 'hreflang', 'ping', 'rel', 'referrerpolicy', 'target', 'type',\n                // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#deprecated_attributes\n                'charset', 'name', 'rev'\n            )\n        );\n        $tags['br'] = (new Behavior\\Tag('br'))->addAttrs(...$this->globalAttrs);\n        $tags['hr'] = (new Behavior\\Tag('hr'))->addAttrs(...$this->globalAttrs);\n        $tags['label']->addAttrs(...$this->createAttrs('for'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\n        $tags['li']->addAttrs(...$this->createAttrs('value', 'type'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\n        $tags['meta'] = (new Behavior\\Tag('meta', Behavior\\Tag::PURGE_WITHOUT_ATTRS))\n            ->addAttrs(...$this->globalAttrs)\n            ->addAttrs((new Behavior\\Attr('content'))->addValues(new Behavior\\RegExpAttrValue('#^[\\w]*$#')));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\n        $tags['ol']->addAttrs(...$this->createAttrs('reversed', 'start', 'type'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font\n        $tags['font']->addAttrs(...$this->createAttrs('color', 'face', 'size'));\n\n        return $tags;\n    }\n\n    protected function createMediaTags(): array\n    {\n        $tags = [];\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#image_and_multimedia\n        $tags['audio'] = (new Behavior\\Tag('audio', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('autoplay', 'controls', 'loop', 'muted', 'preload'));\n        $tags['video'] = (new Behavior\\Tag('video', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('autoplay', 'controls', 'height', 'loop', 'muted', 'playsinline', 'poster', 'preload', 'width'));\n        $tags['img'] = (new Behavior\\Tag('img', Behavior\\Tag::PURGE_WITHOUT_ATTRS))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('align', 'alt', 'border', 'decoding', 'fetchpriority', 'height', 'loading', 'name', 'sizes', 'srcset', 'width'));\n        $tags['track'] = (new Behavior\\Tag('track', Behavior\\Tag::PURGE_WITHOUT_ATTRS))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('default', 'kind', 'label', 'srclang'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#embedded_content\n        $tags['picture'] = (new Behavior\\Tag('picture', Behavior\\Tag::ALLOW_CHILDREN))->addAttrs(...$this->globalAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source\n        $tags['source'] = (new Behavior\\Tag('source'))\n            ->addAttrs(...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('media', 'sizes', 'src', 'srcset', 'type'));\n        return $tags;\n    }\n\n    protected function createTableTags(): array\n    {\n        // // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#table_content\n        $tags = [];\n        // declarations related to <table> elements\n        $commonTableAttrs = $this->createAttrs('align', 'valign', 'bgcolor');\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\n        $tags['table'] = (new Behavior\\Tag('table', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('border', 'cellpadding', 'cellspacing', 'summary'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n        $tags['caption'] = (new Behavior\\Tag('caption', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('align'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead\n        $tags['thead'] = (new Behavior\\Tag('thead', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody\n        $tags['tbody'] = (new Behavior\\Tag('tbody', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot\n        $tags['tfoot'] = (new Behavior\\Tag('tfoot', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        $tags['tr'] = (new Behavior\\Tag('tr', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\n        $tags['td'] = (new Behavior\\Tag('td', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('abbr', 'axis', 'headers', 'colspan', 'rowspan', 'scope', 'width', 'height'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th\n        $tags['th'] = (new Behavior\\Tag('th', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('colspan', 'rowspan', 'scope'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup\n        $tags['colgroup'] = (new Behavior\\Tag('colgroup', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('span'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col\n        $tags['col'] = (new Behavior\\Tag('col')) // no children here\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('span', 'width'));\n        return $tags;\n    }\n\n    /**\n     * @return array<string, Behavior\\NodeInterface>\n     */\n    protected function createSpecialNodes(): array\n    {\n        $nodes = [];\n        $nodes['#cdata-section'] = (new Behavior\\NodeHandler(\n            new Behavior\\CdataSection(),\n            new Behavior\\Handler\\ClosureHandler(\n                static function (NodeInterface $node, ?DOMNode $domNode) {\n                    return $domNode !== null ? new DOMText(trim($domNode->nodeValue)) : null;\n                }\n            )\n        ));\n        return $nodes;\n    }\n\n    /**\n     * @return Behavior\\Attr[]\n     */\n    protected function createGlobalAttrs(): array\n    {\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\n        $attrs = $this->createAttrs(\n            'class',\n            'id',\n            'dir',\n            'lang',\n            'nonce',\n            'xml:lang',\n            'itemid',\n            'itemprop',\n            'itemref',\n            'itemscope',\n            'itemtype',\n            'role',\n            'tabindex',\n            'title',\n            'translate'\n        );\n        $attrs[] = new Behavior\\Attr('aria-', Behavior\\Attr::NAME_PREFIX);\n        $attrs[] = new Behavior\\Attr('data-', Behavior\\Attr::NAME_PREFIX);\n        return $attrs;\n    }\n\n    /**\n     * @return array<'href'|'src', UriAttrValueBuilder>\n     */\n    protected function createUriAttrValueBuilders(): array\n    {\n        return [\n            'href' => (new UriAttrValueBuilder())\n                ->allowLocal(true)\n                ->allowSchemes('http', 'https', 'mailto', 'tel')\n                // https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml\n                // + addressing files\n                ->allowSchemes('afp', 'file', 'ftp', 'git', 'nfs', 's3', 'sftp', 'smb', 'svn')\n                // + addressing resources\n                ->allowSchemes('geo', 'maps', 'news', 'snews', 'spotify', 'vnc', 'webcal')\n                // + addressing applications\n                ->allowSchemes('facetime', 'irc', 'ircs', 'jabber', 'skype', 'slack', 'sms', 'xmpp')\n                // emails, see https://datatracker.ietf.org/doc/html/rfc2392\n                ->allowSchemes('mid'),\n            'src' => (new UriAttrValueBuilder())\n                ->allowLocal(true)\n                ->allowSchemes('http', 'https')\n                // emails, see https://datatracker.ietf.org/doc/html/rfc2392\n                ->allowSchemes('cid')\n                ->allowDataMediaTypes('audio', 'image', 'video'),\n        ];\n    }\n\n    /**\n     * @param string ...$names\n     * @return Behavior\\Attr[]\n     */\n    protected function createAttrs(string ...$names): array\n    {\n        return array_map(\n            function (string $name) {\n                return new Behavior\\Attr($name);\n            },\n            $names\n        );\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer;\n\nuse DOMDocumentFragment;\nuse DOMNode;\nuse DOMNodeList;\nuse Masterminds\\HTML5;\nuse TYPO3\\HtmlSanitizer\\Serializer\\Rules;\nuse TYPO3\\HtmlSanitizer\\Serializer\\RulesInterface;\nuse TYPO3\\HtmlSanitizer\\Visitor\\VisitorInterface;\n\n/**\n * HTML Sanitizer in a nutshell:\n *\n * + `Behavior` contains declarative settings for a particular process for sanitizing HTML.\n * + `Visitor` (multiple different visitors can exist at the same time) are actually doing the\n *   work based on the declared `Behavior`. Visitors can modify nodes or mark them for deletion.\n * + `Sanitizer` can be considered as the working instance, invoking visitors, parsing and\n *   serializing HTML. In general this instance does not contain much logic on how to handle\n *   particular nodes, attributes or values\n *\n * This `Sanitizer` class is agnostic specific configuration - it's purpose is to parse HTML,\n * invoke all registered visitors (they actually do the work and contain specific logic) and\n * finally provide HTML serialization as string again.\n */\nclass Sanitizer\n{\n    protected const mastermindsDefaultOptions = [\n        // Whether the serializer should aggressively encode all characters as entities.\n        'encode_entities' => false,\n        // Prevents the parser from automatically assigning the HTML5 namespace to the DOM document.\n        // (adjusted due to https://github.com/Masterminds/html5-php/issues/181#issuecomment-643767471)\n        'disable_html_ns' => true,\n    ];\n\n    /**\n     * @var VisitorInterface[]\n     */\n    protected $visitors = [];\n\n    /**\n     * @var ?Behavior\n     */\n    protected $behavior = null;\n\n    /**\n     * @var HTML5\n     */\n    protected $parser;\n\n    /**\n     * @var DOMDocumentFragment\n     * @deprecated since v2.1.0, not required anymore\n     */\n    protected $root;\n\n    /**\n     * @var Context\n     */\n    protected $context;\n\n    /**\n     * @param Behavior|VisitorInterface ...$items\n     *\n     * @todo use `__construct(Behavior $behavior, VisitorInterface ...$visitors)`\n     * (which would have been a breaking change with a PHP fatal error)\n     */\n    public function __construct(...$items)\n    {\n        $this->visitors = [];\n        foreach ($items as $item) {\n            if ($item instanceof VisitorInterface) {\n                $this->visitors[] = $item;\n            } elseif ($item instanceof Behavior && $this->behavior === null) {\n                $this->behavior = $item;\n            }\n        }\n        $this->parser = $this->createParser();\n    }\n\n    public function sanitize(string $html, InitiatorInterface $initiator = null): string\n    {\n        $root = $this->parse($html);\n        // @todo drop deprecated property\n        $this->root = $root;\n        $this->handle($root, $initiator);\n        $rules = $this->createRules($initiator);\n        $serialized = $this->serialize($root, $rules);\n        $this->closeRulesStream($rules);\n        return $serialized;\n    }\n\n    protected function parse(string $html): DOMDocumentFragment\n    {\n        return $this->parser->parseFragment($html);\n    }\n\n    protected function handle(DOMNode $domNode, InitiatorInterface $initiator = null): DOMNode\n    {\n        $this->context = new Context($this->parser, $initiator);\n        $this->beforeTraverse();\n        $this->traverseNodeList($domNode->childNodes);\n        $this->afterTraverse();\n        return $domNode;\n    }\n\n    /**\n     * Custom implementation of `\\Masterminds\\HTML5::save` and `\\Masterminds\\HTML5::saveHTML`.\n     */\n    protected function serialize(DOMNode $domNode, RulesInterface $rules): string\n    {\n        $rules->traverse($domNode);\n        return stream_get_contents($rules->getStream(), -1, 0);\n    }\n\n    protected function beforeTraverse(): void\n    {\n        foreach ($this->visitors as $visitor) {\n            $visitor->beforeTraverse($this->context);\n        }\n    }\n\n    protected function traverse(DOMNode $domNode): void\n    {\n        foreach ($this->visitors as $visitor) {\n            $result = $visitor->enterNode($domNode);\n            $domNode = $this->replaceNode($domNode, $result);\n            if ($domNode === null) {\n                return;\n            }\n        }\n\n        if ($domNode->hasChildNodes()) {\n            $this->traverseNodeList($domNode->childNodes);\n        }\n\n        foreach ($this->visitors as $visitor) {\n            $result = $visitor->leaveNode($domNode);\n            $domNode = $this->replaceNode($domNode, $result);\n            if ($domNode === null) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * Traverses node-list (child-nodes) in reverse(!) order to allow\n     * directly removing child nodes, keeping node-list indexes.\n     *\n     * @param DOMNodeList $domNodeList\n     */\n    protected function traverseNodeList(DOMNodeList $domNodeList): void\n    {\n        for ($i = $domNodeList->length - 1; $i >= 0; $i--) {\n            /** @var DOMNode $item */\n            $item = $domNodeList->item($i);\n            $this->traverse($item);\n        }\n    }\n\n    protected function afterTraverse(): void\n    {\n        foreach ($this->visitors as $visitor) {\n            $visitor->afterTraverse($this->context);\n        }\n    }\n\n    protected function replaceNode(DOMNode $source, ?DOMNode $target): ?DOMNode\n    {\n        if ($target === null) {\n            $source->parentNode->removeChild($source);\n        } elseif ($source !== $target) {\n            if ($source->ownerDocument !== $target->ownerDocument) {\n                $source->ownerDocument->importNode($target);\n            }\n            $source->parentNode->replaceChild($target, $source);\n        }\n        return $target;\n    }\n\n    protected function createRules(InitiatorInterface $initiator = null): Rules\n    {\n        $stream = fopen('php://temp', 'wb');\n        return (new Rules($stream, self::mastermindsDefaultOptions))\n            ->withBehavior($this->behavior ?? new Behavior())\n            ->withInitiator($initiator);\n    }\n\n    protected function closeRulesStream(RulesInterface $rules): bool\n    {\n        return fclose($rules->getStream());\n    }\n\n    protected function createParser(): HTML5\n    {\n        return new HTML5(self::mastermindsDefaultOptions);\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Serializer;\n\nuse DOMCharacterData;\nuse DOMElement;\nuse DOMNode;\nuse Masterminds\\HTML5\\Elements;\nuse Masterminds\\HTML5\\Serializer\\OutputRules;\nuse Masterminds\\HTML5\\Serializer\\Traverser;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\InitiatorInterface;\n\nclass Rules extends OutputRules implements RulesInterface\n{\n    /**\n     * @var array\n     */\n    protected $options;\n\n    /**\n     * @var ?Traverser\n     */\n    protected $traverser;\n\n    /**\n     * @var ?Behavior\n     */\n    protected $behavior;\n\n    /**\n     * @var ?InitiatorInterface\n     */\n    protected $initiator;\n\n    /**\n     * @param Behavior $behavior\n     * @param resource$output\n     * @param array $options\n     * @return self\n     */\n    public static function create(Behavior $behavior, $output, array $options = []): self\n    {\n        $target = new self($output, $options);\n        $target->options = $options;\n        $target->behavior = $behavior;\n        return $target;\n    }\n\n    /**\n     * @param resource $output\n     * @param array $options\n     */\n    public function __construct($output, $options = [])\n    {\n        $this->options = (array)$options;\n        parent::__construct($output, $this->options);\n    }\n\n    public function withBehavior(Behavior $behavior): self\n    {\n        if ($this->behavior === $behavior) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->behavior = $behavior;\n        return $target;\n    }\n\n    public function withInitiator(?InitiatorInterface $initiator): self\n    {\n        if ($this->initiator === $initiator) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->initiator = $initiator;\n        return $target;\n    }\n\n    public function traverse(DOMNode $domNode): void\n    {\n        $traverser = new Traverser($domNode, $this->out, $this, $this->options);\n        $traverser->walk();\n        // release the traverser to avoid cyclic references and allow PHP\n        // to free memory without waiting for gc_collect_cycles\n        $this->unsetTraverser();\n    }\n\n    /**\n     * @return resource\n     */\n    public function getStream()\n    {\n        return $this->out;\n    }\n\n    public function getOptions(): array\n    {\n        return $this->options;\n    }\n\n    public function element($domNode): void\n    {\n        if (!$domNode instanceof DOMElement) {\n            return;\n        }\n        // process non-raw-text elements and `<svg>` or `<math>` elements as usual\n        if (!$this->isRawText($domNode)\n            || in_array($this->resolveNodeName($domNode), ['svg', 'math'], true)\n        ) {\n            parent::element($domNode);\n            return;\n        }\n\n        $this->openTag($domNode);\n        if ($this->shallAllowInsecureRawText($domNode)) {\n            // the potentially insecure case, not encoding node data\n            foreach ($domNode->childNodes as $child) {\n                if ($child instanceof DOMCharacterData) {\n                    $this->wr($child->data);\n                } elseif ($child instanceof DOMElement) {\n                    $this->element($child);\n                }\n            }\n        } elseif ($domNode->hasChildNodes()) {\n            // enforce encoding for those raw text elements (different to original implementation)\n            $this->traverser->children($domNode->childNodes);\n        }\n        if (!$this->isVoid($domNode)) {\n            $this->closeTag($domNode);\n        }\n    }\n\n    public function text($domNode): void\n    {\n        if (!$domNode instanceof DOMNode) {\n            return;\n        }\n        // @todo if allowed as text raw element\n        $parentDomNode = $domNode->parentNode ?? null;\n        if (!$this->isRawText($parentDomNode) || !$this->shallAllowInsecureRawText($parentDomNode)) {\n            $this->wr($this->enc($domNode->data));\n            return;\n        }\n        // the potentially insecure case, not encoding node data\n        $this->wr($domNode->data);\n    }\n\n    /**\n     * If the element has a declared namespace in the HTML, MathML or\n     * SVG namespaces, we use the localName instead of the tagName.\n     */\n    protected function resolveNodeName(DOMElement $domNode): string\n    {\n        return $this->traverser->isLocalElement($domNode) ? $domNode->localName : $domNode->tagName;\n    }\n\n    protected function shallAllowInsecureRawText(?DOMNode $domNode): bool\n    {\n        if (!$domNode instanceof DOMNode || !$this->behavior instanceof Behavior) {\n            return false;\n        }\n        $tag = $this->behavior->getTag($domNode->nodeName);\n        return $tag instanceof Behavior\\Tag && $tag->shallAllowInsecureRawText();\n    }\n\n    protected function isRawText(?DOMNode $domNode): bool\n    {\n        return $domNode instanceof DOMNode\n            && !empty($domNode->tagName)\n            && Elements::isA($domNode->localName, Elements::TEXT_RAW);\n    }\n\n    protected function isVoid(?DOMNode $domNode): bool\n    {\n        return $domNode instanceof DOMNode\n            && !empty($domNode->tagName)\n            && Elements::isA($domNode->localName, Elements::VOID_TAG);\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Visitor;\n\nuse DOMAttr;\nuse DOMCdataSection;\nuse DOMComment;\nuse DOMElement;\nuse DOMNode;\nuse DOMText;\nuse Psr\\Log\\LoggerAwareInterface;\nuse Psr\\Log\\LoggerAwareTrait;\nuse Psr\\Log\\NullLogger;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Context;\n\n/**\n * Node visitor handling most common aspects for tag, attribute\n * and values as declared in provided `Behavior` instance.\n */\nclass CommonVisitor extends AbstractVisitor implements LoggerAwareInterface\n{\n    use LoggerAwareTrait;\n\n    /**\n     * @var Behavior\n     */\n    protected $behavior;\n\n    /**\n     * @var Context\n     */\n    protected $context;\n\n    public function __construct(Behavior $behavior)\n    {\n        $this->logger = new NullLogger();\n        $this->behavior = $behavior;\n    }\n\n    public function beforeTraverse(Context $context): void\n    {\n        $this->context = $context;\n        // v2.1.0: adding `#comment` and `#cdata-section` nodes for backward compatibility, will be removed with v3.0.0\n        if ($this->behavior->hasNode('#comment') && $this->behavior->getNode('#comment') === null) {\n            $this->behavior = $this->behavior->withNodes(new Behavior\\Comment());\n        }\n        if ($this->behavior->hasNode('#cdata-section') && $this->behavior->getNode('#cdata-section') === null) {\n            $this->behavior = $this->behavior->withNodes(new Behavior\\CdataSection());\n        }\n    }\n\n    public function enterNode(DOMNode $domNode): ?DOMNode\n    {\n        if (!$domNode instanceof DOMCdataSection\n            && !$domNode instanceof DOMComment\n            && !$domNode instanceof DOMElement\n        ) {\n            return $domNode;\n        }\n\n        $node = $this->behavior->getNode($domNode->nodeName);\n        if (!$node instanceof Behavior\\NodeInterface) {\n            return $this->handleInvalidNode($domNode);\n        }\n\n        if ($node instanceof Behavior\\NodeHandler) {\n            if ($node->shallHandleFirst()) {\n                $domNode = $node->getHandler()->handle($node->getNode(), $domNode, $this->context, $this->behavior);\n            }\n            if ($node->shallProcessDefaults() && $domNode instanceof DOMElement) {\n                $domNode = $this->enterDomElement($domNode, $node->getNode());\n            }\n            if (!$node->shallHandleFirst()) {\n                $domNode = $node->getHandler()->handle($node->getNode(), $domNode, $this->context, $this->behavior);\n            }\n        } elseif ($domNode instanceof DOMElement) {\n            $domNode = $this->enterDomElement($domNode, $node);\n        }\n        return $domNode;\n    }\n\n    protected function enterDomElement(?DOMNode $domNode, Behavior\\NodeInterface $node): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement || !$node instanceof Behavior\\Tag) {\n            return $domNode;\n        }\n        $domNode = $this->processAttributes($domNode, $node);\n        $domNode = $this->processChildren($domNode, $node);\n        // completely remove node, in case it is expected to exist with attributes only\n        if ($domNode instanceof DOMElement && $domNode->attributes->length === 0 && $node->shallPurgeWithoutAttrs()) {\n            return null;\n        }\n        return $this->handleMandatoryAttributes($domNode, $node);\n    }\n\n    public function leaveNode(DOMNode $domNode): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        $tag = $this->behavior->getTag($domNode->nodeName);\n        if ($tag === null) {\n            // pass custom elements, in case it has been declared\n            if ($this->behavior->shallAllowCustomElements() && $this->isCustomElement($domNode)) {\n                return $domNode;\n            }\n            // unexpected node, that should have been handled in `enterNode` already\n            return null;\n        }\n        // completely remove node, in case it is expected to exist with children only\n        if (!$this->hasNonEmptyChildren($domNode) && $tag->shallPurgeWithoutChildren()) {\n            return null;\n        }\n        return $domNode;\n    }\n\n    protected function processAttributes(?DOMNode $domNode, Behavior\\Tag $tag): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        // reverse processing of attributes,\n        // allowing to directly remove attribute nodes\n        for ($i = $domNode->attributes->length - 1; $i >= 0; $i--) {\n            /** @var DOMAttr $attribute */\n            $attribute = $domNode->attributes->item($i);\n            try {\n                $this->processAttribute($domNode, $tag, $attribute);\n            } catch (Behavior\\NodeException $exception) {\n                return $exception->getDomNode();\n            }\n        }\n        return $domNode;\n    }\n\n    protected function processChildren(?DOMNode $domNode, Behavior\\Tag $tag): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        if (!$tag->shallAllowChildren()\n            && $domNode->childNodes->length > 0\n            && $this->behavior->shallRemoveUnexpectedChildren()\n        ) {\n            $this->log('Found unexpected children for {nodeName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeName' => $domNode->nodeName,\n            ]);\n            // reverse processing of children,\n            // allowing to directly remove child nodes\n            for ($i = $domNode->childNodes->length - 1; $i >= 0; $i--) {\n                /** @var DOMNode $child */\n                $child = $domNode->childNodes->item($i);\n                $domNode->removeChild($child);\n            }\n        }\n        return $domNode;\n    }\n\n    /**\n     * @throws Behavior\\NodeException\n     */\n    protected function processAttribute(DOMElement $domNode, Behavior\\Tag $tag, DOMAttr $attribute): void\n    {\n        $name = strtolower($attribute->name);\n        $attr = $tag->getAttr($name);\n        if ($attr === null || !$attr->matchesValue($attribute->value)) {\n            $this->log('Found invalid attribute {nodeName}.{attrName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeName' => $domNode->nodeName,\n                'attrName' => $attribute->nodeName,\n            ]);\n            $this->handleInvalidAttr($domNode, $name);\n        }\n    }\n\n    protected function handleMandatoryAttributes(?DOMNode $domNode, Behavior\\Tag $tag): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        foreach ($tag->getAttrs() as $attr) {\n            if ($attr->isMandatory() && !$domNode->hasAttribute($attr->getName())) {\n                $this->log('Missing mandatory attribute {nodeName}.{attrName}', [\n                    'behavior' => $this->behavior->getName(),\n                    'nodeName' => $domNode->nodeName,\n                    'attrName' => $attr->getName(),\n                ]);\n                return $this->handleInvalidNode($domNode);\n            }\n        }\n        return $domNode;\n    }\n\n    protected function handleInvalidNode(DOMNode $domNode): ?DOMNode\n    {\n        if ($domNode instanceof DOMComment && $this->behavior->shallEncodeInvalidComment()) {\n            return $this->convertToText($domNode);\n        }\n        if ($domNode instanceof DOMCdataSection && $this->behavior->shallEncodeInvalidCdataSection()) {\n            return $this->convertToText($domNode);\n        }\n        if ($domNode instanceof DOMElement) {\n            // pass custom elements, in case it has been declared\n            if ($this->behavior->shallAllowCustomElements() && $this->isCustomElement($domNode)) {\n                $this->log('Allowed custom element {nodeName}', [\n                    'behavior' => $this->behavior->getName(),\n                    'nodeName' => $domNode->nodeName,\n                ]);\n                return $domNode;\n            }\n            $this->log('Found unexpected tag {nodeName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeName' => $domNode->nodeName,\n            ]);\n            if ($this->behavior->shallEncodeInvalidTag()) {\n                return $this->convertToText($domNode);\n            }\n        }\n        return null;\n    }\n\n    /**\n     * @throws Behavior\\NodeException\n     */\n    protected function handleInvalidAttr(DOMNode $domNode, string $name): void\n    {\n        if ($this->behavior->shallEncodeInvalidAttr()) {\n            throw Behavior\\NodeException::create()->withDomNode($this->convertToText($domNode));\n        }\n        if (!$domNode instanceof DOMElement) {\n            throw Behavior\\NodeException::create()->withDomNode(null);\n        }\n        $domNode->removeAttribute($name);\n    }\n\n    /**\n     * Converts node/element to text node, basically disarming tags.\n     * (`<script>` --> `&lt;script&gt;` when DOM is serialized as string)\n     */\n    protected function convertToText(DOMNode $domNode): DOMText\n    {\n        $text = new DOMText();\n        $text->nodeValue = $this->context->parser->saveHTML($domNode);\n        return $text;\n    }\n\n    /**\n     * Determines whether a node has children. This is a special\n     * handling for nodes that only allow text nodes that still can be empty.\n     *\n     * For instance `<script></script>` is considered empty,\n     * albeit `$domNode->childNodes->length === 1`.\n     */\n    protected function hasNonEmptyChildren(DOMNode $domNode): bool\n    {\n        if ($domNode->childNodes->length === 0) {\n            return false;\n        }\n        for ($i = $domNode->childNodes->length - 1; $i >= 0; $i--) {\n            $child = $domNode->childNodes->item($i);\n            if (!$child instanceof DOMText\n                || trim($child->textContent) !== ''\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Whether given node name can be considered as custom element.\n     * (see https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name)\n     */\n    protected function isCustomElement(DOMNode $domNode): bool\n    {\n        return $domNode instanceof DOMElement\n            && preg_match('#^[a-z][a-z0-9]*-.+#', $domNode->nodeName) > 0;\n    }\n\n    protected function log(string $message, array $context = [], $level = null): void\n    {\n        // @todo consider given minimum log-level\n        if (!isset($context['initiator'])) {\n            $context['initiator'] = (string)$this->context->initiator;\n        }\n        $this->logger->debug($message, $context);\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Tests;\n\nuse LogicException;\nuse PHPUnit\\Framework\\TestCase;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Tag;\n\nclass BehaviorTest extends TestCase\n{\n    public function ambiguityIsDetectedDataProvider(): array\n    {\n        return [\n            [ ['same'], ['same'], 1625391217 ],\n            [ ['same', 'same'], [], 1625591503 ],\n            [ ['same', 'same'], ['same'], 1625591503 ],\n            [ [], ['same', 'same'], 1625591503 ],\n            [ ['same'], ['same', 'same'], 1625591503 ],\n        ];\n    }\n\n    /**\n     * @param string[] $originalNames\n     * @param string[] $additionalNames\n     * @param int $code\n     * @test\n     * @dataProvider ambiguityIsDetectedDataProvider\n     */\n    public function ambiguityIsDetected(array $originalNames, array $additionalNames, int $code = 0): void\n    {\n        $this->expectException(LogicException::class);\n        $this->expectExceptionCode($code);\n        $behavior = new Behavior();\n        if (!empty($originalNames)) {\n            $behavior = $behavior->withTags(...$this->createTags(...$originalNames));\n        }\n        if (!empty($additionalNames)) {\n            $behavior->withTags(...$this->createTags(...$additionalNames));\n        }\n    }\n\n    /**\n     * @param string ...$names\n     * @return Tag[]\n     */\n    private function createTags(string ...$names): array\n    {\n        return array_map(\n            function (string $name) {\n                return new Tag($name);\n            },\n            $names\n        );\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Tests;\n\nuse PHPUnit\\Framework\\TestCase;\nuse TYPO3\\HtmlSanitizer\\Builder\\CommonBuilder;\n\nclass CommonBuilderTest extends TestCase\n{\n    public function isSanitizedDataProvider(): array\n    {\n        return [\n            '#010' => [\n                '<unknown unknown=\"unknown\">value</unknown>',\n                '&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;',\n            ],\n            '#011' => [\n                '<div class=\"nested\"><unknown unknown=\"unknown\">value</unknown></div>',\n                '<div class=\"nested\">&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;</div>',\n            ],\n            '#012' => [\n                '&lt;script&gt;alert(1)&lt;/script&gt;',\n                '&lt;script&gt;alert(1)&lt;/script&gt;',\n            ],\n            '#013' => [\n                '<unknown unknown=\"unknown\">value</unknown>' .\n                    '<unknown unknown=\"unknown\">value</unknown>',\n                '&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;' .\n                    '&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;'\n            ],\n            '#014' => [\n                '<unknown>value</unknown><unknown>value</unknown>' .\n                    '<div unknown=\"unknown\">value</div>' .\n                    '<unknown>value</unknown><unknown>value</unknown>',\n                '&lt;unknown&gt;value&lt;/unknown&gt;&lt;unknown&gt;value&lt;/unknown&gt;' .\n                    '<div>value</div>' .\n                    '&lt;unknown&gt;value&lt;/unknown&gt;&lt;unknown&gt;value&lt;/unknown&gt;'\n            ],\n            '#015' => [\n                '<unknown unknown=\"unknown\" class=\"nested\"><div class=\"nested\">value</div></unknown>',\n                // '&lt;unknown unknown=\"unknown\" class=\"nested\"&gt;<div class=\"nested\">value</div>&lt;/unknown&gt;',\n                // @todo invalidating nested nodes due invalid parent node is currently expected - topic for discussion\n                '&lt;unknown unknown=\"unknown\" class=\"nested\"&gt;&lt;div class=\"nested\"&gt;value&lt;/div&gt;&lt;/unknown&gt;',\n            ],\n            // @todo bug in https://github.com/Masterminds/html5-php/issues\n            // '#013' => [\n            //    '<strong>Given that x < y and y > z...</strong>',\n            //    '<strong>Given that x &lt; y and y &gt; z...</strong>',\n            // ],\n            '#020' => [\n                '<div unknown=\"unknown\">value</div>',\n                '<div>value</div>',\n            ],\n            '#030' => [\n                '<div class=\"class\">value</div>',\n                '<div class=\"class\">value</div>',\n            ],\n            '#031' => [\n                '<div data-value=\"value\">value</div>',\n                '<div data-value=\"value\">value</div>',\n            ],\n            '#032' => [\n                '<div data-bool>value</div>',\n                '<div data-bool>value</div>',\n            ],\n            '#040' => [\n                '<img src=\"mailto:noreply@typo3.org\" onerror=\"alert(1)\">',\n                '',\n            ],\n            '#041' => [\n                '<img src=\"https://typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"https://typo3.org/logo.svg\">',\n            ],\n            '#042' => [\n                '<img src=\"http://typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"http://typo3.org/logo.svg\">',\n            ],\n            '#043' => [\n                '<img src=\"/typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"/typo3.org/logo.svg\">',\n            ],\n            '#044' => [\n                '<img src=\"typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"typo3.org/logo.svg\">',\n            ],\n            '#045' => [\n                '<img src=\"//typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '',\n            ],\n            '#046' => [\n                '<img src=\"/typo3.org/logo.svg\" alt=\"logo\" loading=\"lazy\" fetchpriority=\"low\" decoding=\"async\" width=\"100\" height=\"100\" sizes=\"33.3vw\" name=\"logo\" align=\"left\" border=\"0\">',\n                '<img src=\"/typo3.org/logo.svg\" alt=\"logo\" loading=\"lazy\" fetchpriority=\"low\" decoding=\"async\" width=\"100\" height=\"100\" sizes=\"33.3vw\" name=\"logo\" align=\"left\" border=\"0\">',\n            ],\n            '#047' => [\n                '<img src=\"data:text/html,<script>alert(1)</script>\">',\n                '',\n            ],\n            '#048' => [\n                '<img src=\"data:image/png,...\"><img src=\"data:image/png;,...\"><img src=\"data:image/png;base64,...\"><img src=\"data:image/svg+xml;base64,...\">',\n                '<img src=\"data:image/png,...\"><img src=\"data:image/png;,...\"><img src=\"data:image/png;base64,...\"><img src=\"data:image/svg+xml;base64,...\">',\n            ],\n            '#049' => [\n                '<a href=\"git://github.com/typo3/typo3\">GitHub</a>',\n                '<a href=\"git://github.com/typo3/typo3\">GitHub</a>',\n            ],\n            '#050' => [\n                '<a href=\"https://typo3.org/\" role=\"button\">value</a>',\n                '<a href=\"https://typo3.org/\" role=\"button\">value</a>',\n            ],\n            '#051' => [\n                '<a href=\"ssh://example.org/\" role=\"button\">value</a>',\n                '<a role=\"button\">value</a>',\n            ],\n            '#052' => [\n                '<a href=\"javascript:alert(1)\" role=\"button\">value</a>',\n                '<a role=\"button\">value</a>',\n            ],\n            '#053' => [\n                '<a href=\"data:text/html;...\" role=\"button\">value</a>',\n                '<a role=\"button\">value</a>',\n            ],\n            '#054' => [\n                '<a href=\"#anchor\">anchor</a><a name=\"anchor\">content</a>',\n                '<a href=\"#anchor\">anchor</a><a name=\"anchor\">content</a>',\n            ],\n            '#055' => [\n                '<a href=\"tel:123456789\">anchor</a>',\n                '<a href=\"tel:123456789\">anchor</a>',\n            ],\n            '#090' => [\n                '<p data-bool><span data-bool><strong data-bool>value</strong></span></p>',\n                '<p data-bool><span data-bool><strong data-bool>value</strong></span></p>'\n            ],\n            '#100' => [\n                '<table><caption>c</caption><thead><tr><th>h</th></tr></thead><tbody><tr><td>b</td></tr></tbody><tfoot><tr><td>f</td></tr></tfoot></table>',\n                '<table><caption>c</caption><thead><tr><th>h</th></tr></thead><tbody><tr><td>b</td></tr></tbody><tfoot><tr><td>f</td></tr></tfoot></table>',\n            ],\n            '#101' => [\n                '<table align=\"left\" border=\"2\" cellpadding=\"2\" cellspacing=\"2\" class=\"table\" summary=\"summary\"></table>',\n                '<table align=\"left\" border=\"2\" cellpadding=\"2\" cellspacing=\"2\" class=\"table\" summary=\"summary\"></table>',\n            ],\n            '#102' => [\n                '<caption align=\"left\">caption</caption>',\n                '<caption align=\"left\">caption</caption>',\n            ],\n            '#104' => [\n                '<tr align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tr>',\n                '<tr align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tr>',\n            ],\n            '#105' => [\n                '<td abbr=\"abbr\" align=\"left\" valign=\"top\" colspan=\"2\" rowspan=\"2\" bgcolor=\"#cc0000\" axis=\"axis,axis\" headers=\"head,head\" scope=\"scope\" width=\"100\" height=\"100\">value</td>',\n                '<td abbr=\"abbr\" align=\"left\" valign=\"top\" colspan=\"2\" rowspan=\"2\" bgcolor=\"#cc0000\" axis=\"axis,axis\" headers=\"head,head\" scope=\"scope\" width=\"100\" height=\"100\">value</td>',\n            ],\n            '#106' => [\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n            ],\n            '#107' => [\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n            ],\n            '#108' => [\n                '<tfoot align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tfoot>',\n                '<tfoot align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tfoot>',\n            ],\n            '#109' => [\n                '<colgroup align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" span=\"1\"><col><col span=\"2\" align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" width=\"100\"></colgroup>',\n                '<colgroup align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" span=\"1\"><col><col span=\"2\" align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" width=\"100\"></colgroup>',\n            ],\n            '#120' => [\n                '<figure><img src=\"https://typo3.org/logo.svg\" alt=\"logo\"><figcaption>TYPO3 logo</figcaption></figure>',\n                '<figure><img src=\"https://typo3.org/logo.svg\" alt=\"logo\"><figcaption>TYPO3 logo</figcaption></figure>',\n            ],\n            '#121' => [\n                '<picture><source srcset=\"/logo-800.png\" media=\"(min-width: 800px)\" type=\"image/png\" sizes=\"33.3vw\"></picture>',\n                '<picture><source srcset=\"/logo-800.png\" media=\"(min-width: 800px)\" type=\"image/png\" sizes=\"33.3vw\"></picture>'\n            ],\n            '#122' => [\n                '<video controls src=\"/video.mp4\"><track default kind=\"captions\" srclang=\"en\" src=\"/video.vtt\"></video>',\n                '<video controls src=\"/video.mp4\"><track default kind=\"captions\" srclang=\"en\" src=\"/video.vtt\"></video>',\n            ],\n            '200' => [\n                '<ul><li>item</li><li>item</li></ul>',\n                '<ul><li>item</li><li>item</li></ul>',\n            ],\n            '201' => [\n                '<ol reversed start=\"3\" type=\"I\"><li>item</li><li value=\"13\">item</li></ol>',\n                '<ol reversed start=\"3\" type=\"I\"><li>item</li><li value=\"13\">item</li></ol>',\n            ],\n            '#900' => [\n                '<div id=\"main\">' .\n                    '<a href=\"https://typo3.org/\" data-type=\"url\" wrong-attr=\"is-removed\">TYPO3</a><br>' .\n                    '(the <script>alert(1)</script> tag shall be encoded to HTML entities)'.\n                '</div>',\n                '<div id=\"main\">' .\n                    '<a href=\"https://typo3.org/\" data-type=\"url\">TYPO3</a><br>' .\n                    '(the &lt;script&gt;alert(1)&lt;/script&gt; tag shall be encoded to HTML entities)'.\n                '</div>',\n            ],\n            '#901' => [\n                '<div itemprop=\"tel\" itemscope>' .\n                    '<span itemprop=\"value\">+1-234-56789</span>' .\n                    '<meta itemprop=\"type\" content=\"voice\">' .\n                '</div>',\n                '<div itemprop=\"tel\" itemscope>' .\n                    '<span itemprop=\"value\">+1-234-56789</span>' .\n                    '<meta itemprop=\"type\" content=\"voice\">' .\n                '</div>'\n            ],\n            '#902' => [\n                '<div><meta http-equiv=\"refresh\" content=\"1;https://evil.typo3.org/\" name=\"referrer\" charset=\"utf-8\"></div>',\n                '<div></div>'\n            ],\n            '#903' => [\n                '<font class=\"font\" color=\"#000000\" face=\"Verdana,Arial\" size=\"13\">value</font>',\n                '<font class=\"font\" color=\"#000000\" face=\"Verdana,Arial\" size=\"13\">value</font>'\n            ],\n            '#904' => [\n                '<img src=\"cid:DC117C9322DEB502C3B16769A8A64E08@example.test\">',\n                '<img src=\"cid:DC117C9322DEB502C3B16769A8A64E08@example.test\">',\n            ],\n            '#905' => [\n                '<a href=\"mid:D89CD33E-F9CF-4CA0-BCE3-AC89E5D41DE1@example.test/DC117C9322DEB502C3B16769A8A64E08@example.test\">see previous message</a>',\n                '<a href=\"mid:D89CD33E-F9CF-4CA0-BCE3-AC89E5D41DE1@example.test/DC117C9322DEB502C3B16769A8A64E08@example.test\">see previous message</a>',\n            ],\n            '#906' => [\n                '<center>value</center><strike>value</strike><nobr>value</nobr>',\n                '<center>value</center><strike>value</strike><nobr>value</nobr>',\n            ],\n            '#907' => [\n                '<script>alert(1)</script>'\n                . '<script type=\"application/javascript\">alert(2)</script>'\n                . '<script type=\"application/ecmascript\">alert(3)</script>',\n                '&lt;script&gt;alert(1)&lt;/script&gt;'\n                . '&lt;script type=\"application/javascript\"&gt;alert(2)&lt;/script&gt;'\n                . '&lt;script type=\"application/ecmascript\"&gt;alert(3)&lt;/script&gt;'\n            ],\n            '#908' => [\n                '<a href=\"xmpp:user@example.org?message\">value</a>',\n                '<a href=\"xmpp:user@example.org?message\">value</a>',\n            ],\n            '#909' => [\n                '<!-- #comment -->',\n                '<!-- #comment -->',\n            ],\n            '#910' => [\n                '<![CDATA[ #cdata ]]>',\n                '#cdata',\n            ],\n            '#911' => [\n                '#text',\n                '#text',\n            ],\n            '#921' => [\n                '<![CDATA[<any><span data-value=\"value\"></any>*/]]>',\n                '&lt;any&gt;&lt;span data-value=\"value\"&gt;&lt;/any&gt;*/',\n            ],\n            '#930' => [\n                '<br><any>value</any></br>',\n                '<br>&lt;any&gt;value&lt;/any&gt;<br>',\n            ],\n            '#931' => [\n                '<hr><any>value</any></hr>',\n                '<hr>&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#932' => [\n                '<wbr><any>value</any></wbr>',\n                '<wbr>&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#933' => [\n                '<source><any>value</any></source>',\n                '<source>&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#934' => [\n                '<img src=\"/typo3.org/logo.svg\"><any>value</any></img>',\n                '<img src=\"/typo3.org/logo.svg\">&lt;any&gt;value&lt;/any&gt;',\n            ],\n        ];\n    }\n\n    /**\n     * @param string $payload\n     * @param string $expectation\n     * @test\n     * @dataProvider isSanitizedDataProvider\n     */\n    public function isSanitized(string $payload, string $expectation): void\n    {\n        $builder = new CommonBuilder();\n        $sanitizer = $builder->build();\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Tests;\n\nuse DOMNode;\nuse DOMText;\nuse Masterminds\\HTML5\\Elements;\nuse PHPUnit\\Framework\\TestCase;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Attr\\UriAttrValueBuilder;\nuse TYPO3\\HtmlSanitizer\\Behavior\\NodeInterface;\nuse TYPO3\\HtmlSanitizer\\Sanitizer;\nuse TYPO3\\HtmlSanitizer\\Visitor\\CommonVisitor;\n\nclass ScenarioTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function missingBehaviorTriggersDeprecationError(): void\n    {\n        $this->markTestSkipped('see https://github.com/TYPO3/html-sanitizer/issues/99');\n\n        $this->expectDeprecation();\n        $this->expectDeprecationMessage(\n            'Add `Behavior` when creating new `Sanitizer` instances, e.g. `new Sanitizer($behavior, $visitor)`'\n        );\n        $behavior = new Behavior();\n        $visitor = new CommonVisitor($behavior);\n        new Sanitizer($visitor);\n    }\n\n    public static function allTagsAreRemovedOnMissingDeclarationDataProvider(): array\n    {\n        return [\n            ['<div class=\"content\">value</div><span class=\"content\">value</span>', ''],\n            ['<!--any--><div class=\"content\">value</div>', '<!--any-->'],\n            ['<!--any--!><div class=\"content\">value</div>', '<!--any-->'],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider allTagsAreRemovedOnMissingDeclarationDataProvider\n     */\n    public function allTagsAreRemovedOnMissingDeclaration(string $payload, string $expectation): void\n    {\n        $behavior = new Behavior();\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function tagFlagsAreProcessedDataProvider(): array\n    {\n        return [\n            [\n                Behavior\\Tag::ALLOW_CHILDREN | Behavior\\Tag::PURGE_WITHOUT_CHILDREN,\n                implode(\"\\n\", [\n                    '<div></div><div data-test=\"test\"></div>',\n                    '<div>test</div><div data-test=\"test\">test</div>',\n                    '<div><!-- --></div><div data-test=\"test\"><!-- --></div>',\n                    '<div><!-- test --></div><div data-test=\"test\"><!-- test --></div>',\n                    '<div><i></i></div><div data-test=\"test\"><i></i></div>',\n                ]),\n                implode(\"\\n\", [\n                    '',\n                    '<div>test</div><div data-test=\"test\">test</div>',\n                    '<div><!-- --></div><div data-test=\"test\"><!-- --></div>',\n                    '<div><!-- test --></div><div data-test=\"test\"><!-- test --></div>',\n                    '<div><i></i></div><div data-test=\"test\"><i></i></div>',\n                ]),\n            ],\n            [\n                Behavior\\Tag::ALLOW_CHILDREN | Behavior\\Tag::PURGE_WITHOUT_CHILDREN,\n                implode(\"\\n\", [\n                    '<script></script><script data-test=\"test\"></script>',\n                    '<script>test</script><script data-test=\"test\">test</script>',\n                    '<script><!-- --></script><script data-test=\"test\"><!-- --></script>',\n                    '<script><!-- test --></script><script data-test=\"test\"><!-- test --></script>',\n                ]),\n                implode(\"\\n\", [\n                    '',\n                    '<script>test</script><script data-test=\"test\">test</script>',\n                    '<script>&lt;!-- --&gt;</script><script data-test=\"test\">&lt;!-- --&gt;</script>',\n                    '<script>&lt;!-- test --&gt;</script><script data-test=\"test\">&lt;!-- test --&gt;</script>',\n                ]),\n            ],\n            [\n                Behavior\\Tag::ALLOW_CHILDREN | Behavior\\Tag::PURGE_WITHOUT_CHILDREN | Behavior\\Tag::ALLOW_INSECURE_RAW_TEXT,\n                implode(\"\\n\", [\n                    '<script></script><script data-test=\"test\"></script>',\n                    '<script>test</script><script data-test=\"test\">test</script>',\n                    '<script><!-- --></script><script data-test=\"test\"><!-- --></script>',\n                    '<script><!-- test --></script><script data-test=\"test\"><!-- test --></script>',\n                ]),\n                implode(\"\\n\", [\n                    '',\n                    '<script>test</script><script data-test=\"test\">test</script>',\n                    '<script><!-- --></script><script data-test=\"test\"><!-- --></script>',\n                    '<script><!-- test --></script><script data-test=\"test\"><!-- test --></script>',\n                ]),\n            ],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider tagFlagsAreProcessedDataProvider\n     */\n    public function tagFlagsAreProcessed(int $flags, string $payload, string $expectation): void\n    {\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withTags(\n                (new Behavior\\Tag('i')), // just used as DOM child element\n                (new Behavior\\Tag('div', $flags))->addAttrs((new Behavior\\Attr('data-test'))),\n                (new Behavior\\Tag('script', $flags))->addAttrs((new Behavior\\Attr('data-test')))\n            );\n\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function tagIsHandledDataProcessor(): array\n    {\n        $node = new Behavior\\Tag('div');\n        $asTextHandler = new Behavior\\Handler\\AsTextHandler();\n        $closureHandler = new Behavior\\Handler\\ClosureHandler(\n            static function (NodeInterface $node, ?DOMNode $domNode): ?\\DOMNode {\n                if ($domNode === null) {\n                    return null;\n                }\n                return new DOMText(sprintf('Handled <%s>', $domNode->nodeName));\n            }\n        );\n\n        return [\n            [\n                new Behavior\\NodeHandler(\n                    $node,\n                    $asTextHandler\n                ),\n                '<div invalid-attr=\"value\"><i>unexpected</i></div>',\n                '&lt;div invalid-attr=\"value\"&gt;&lt;i&gt;unexpected&lt;/i&gt;&lt;/div&gt;',\n            ],\n            [\n                new Behavior\\NodeHandler(\n                    $node,\n                    $asTextHandler,\n                    Behavior\\NodeHandler::PROCESS_DEFAULTS\n                ),\n                '<div invalid-attr=\"value\"><i>unexpected</i></div>',\n                '&lt;div&gt;&lt;/div&gt;',\n            ],\n            [\n                new Behavior\\NodeHandler(\n                    $node,\n                    $asTextHandler,\n                    Behavior\\NodeHandler::PROCESS_DEFAULTS | Behavior\\NodeHandler::HANDLE_FIRST\n                ),\n                '<div invalid-attr=\"value\"><i>unexpected</i></div>',\n                '&lt;div invalid-attr=\"value\"&gt;&lt;i&gt;unexpected&lt;/i&gt;&lt;/div&gt;',\n            ],\n            [\n                new Behavior\\NodeHandler(\n                    $node,\n                    $closureHandler\n                ),\n                '<div invalid-attr=\"value\"><i>unexpected</i></div>',\n                'Handled &lt;div&gt;',\n            ],\n            [\n                new Behavior\\NodeHandler(\n                    $node,\n                    $closureHandler,\n                    Behavior\\NodeHandler::PROCESS_DEFAULTS\n                ),\n                '<div invalid-attr=\"value\"><i>unexpected</i></div>',\n                'Handled &lt;div&gt;',\n            ],\n            [\n                new Behavior\\NodeHandler(\n                    $node,\n                    $closureHandler,\n                    Behavior\\NodeHandler::PROCESS_DEFAULTS | Behavior\\NodeHandler::HANDLE_FIRST\n                ),\n                '<div invalid-attr=\"value\"><i>unexpected</i></div>',\n                'Handled &lt;div&gt;',\n            ],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider tagIsHandledDataProcessor\n     */\n    public function tagIsHandled(Behavior\\NodeHandler $nodeHandler, string $payload, string $expectation): void\n    {\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withNodes($nodeHandler);\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function commentsAreHandledDataProvider(): array\n    {\n        return [\n            'not allowed' => [\n                false,\n                Behavior::BLUNT,\n                '<div><!-- before -->test<!-- after --></div>',\n                '<div>test</div>'\n            ],\n            'allowed' => [\n                true,\n                Behavior::BLUNT,\n                '<div><!-- before -->test<!-- after --></div>',\n                '<div><!-- before -->test<!-- after --></div>'\n            ],\n            'not allowed, encoded' => [\n                false,\n                Behavior::ENCODE_INVALID_COMMENT,\n                '<div><!-- before -->test<!-- after --></div>',\n                '<div>&lt;!-- before --&gt;test&lt;!-- after --&gt;</div>',\n            ],\n            'allowed, encoded' => [\n                true,\n                Behavior::ENCODE_INVALID_COMMENT,\n                '<div><!-- before -->test<!-- after --></div>',\n                '<div><!-- before -->test<!-- after --></div>'\n            ],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider commentsAreHandledDataProvider\n     */\n    public function commentsAreHandled(bool $allowed, int $flags, string $payload, string $expectation): void\n    {\n        $behavior = (new Behavior())\n            ->withFlags($flags)\n            ->withName('scenario-test')\n            ->withTags(new Behavior\\Tag('div', Behavior\\Tag::ALLOW_CHILDREN));\n        $comment = new Behavior\\Comment();\n        $behavior = $allowed ? $behavior->withNodes($comment) : $behavior->withoutNodes($comment);\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function cdataSectionsAreHandledDataProvider(): array\n    {\n        return [\n            'not allowed' => [\n                false,\n                Behavior::BLUNT,\n                '<div><![CDATA[ before ]]>test<![CDATA[ after ]]></div>',\n                '<div>test</div>'\n            ],\n            'allowed' => [\n                true,\n                Behavior::BLUNT,\n                '<div><![CDATA[ before ]]>test<![CDATA[ after ]]></div>',\n                '<div><![CDATA[ before ]]>test<![CDATA[ after ]]></div>'\n            ],\n            'not allowed, encoded' => [\n                false,\n                Behavior::ENCODE_INVALID_CDATA_SECTION,\n                '<div><![CDATA[ before ]]>test<![CDATA[ after ]]></div>',\n                '<div>&lt;![CDATA[ before ]]&gt;test&lt;![CDATA[ after ]]&gt;</div>',\n            ],\n            'allowed, encoded' => [\n                true,\n                Behavior::ENCODE_INVALID_CDATA_SECTION,\n                '<div><![CDATA[ before ]]>test<![CDATA[ after ]]></div>',\n                '<div><![CDATA[ before ]]>test<![CDATA[ after ]]></div>'\n            ],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider cdataSectionsAreHandledDataProvider\n     */\n    public function cdataSectionsAreHandled(bool $allowed, int $flags, string $payload, string $expectation): void\n    {\n        $behavior = (new Behavior())\n            ->withFlags($flags)\n            ->withName('scenario-test')\n            ->withTags(new Behavior\\Tag('div', Behavior\\Tag::ALLOW_CHILDREN));\n        $cdataSection = new Behavior\\CdataSection();\n        $behavior = $allowed ? $behavior->withNodes($cdataSection) : $behavior->withoutNodes($cdataSection);\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function rawTextElementsAreHandledDataProvider(): \\Generator\n    {\n        foreach (Elements::$html5 as $name => $flags) {\n            if (($flags & Elements::TEXT_RAW) !== Elements::TEXT_RAW) {\n                continue;\n            }\n            yield $name => [\n                sprintf('<%1$s><any>value</any></%1$s>', $name),\n                sprintf('<%1$s>&lt;any&gt;value&lt;/any&gt;</%1$s>', $name),\n            ];\n        };\n    }\n\n    /**\n     * @test\n     * @dataProvider rawTextElementsAreHandledDataProvider\n     */\n    public function rawTextElementsAreHandled(string $payload, string $expectation): void\n    {\n        $elements = array_filter(\n            Elements::$html5,\n            static function (int $flags) {\n                return ($flags & Elements::TEXT_RAW) === Elements::TEXT_RAW;\n            }\n        );\n        $behavior = (new Behavior())\n            ->withName('scenario-test')\n            ->withTags(...array_map(\n                static function (string $name) {\n                    return new Behavior\\Tag($name, Behavior\\Tag::ALLOW_CHILDREN);\n                },\n                array_keys($elements)\n            ));\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    /**\n     * @test\n     */\n    public function isJsonLdScriptAllowed(): void\n    {\n        $payload = implode(\"\\n\" , [\n            // tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '1:<script>alert(1)</script>',\n            // `type` attr will be removed -> no attrs -> tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '2:<script type>alert(2)</script>',\n            // `type` attr will be removed -> no attrs -> tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '3:<script type=\"application/javascript\">alert(2)</script>',\n            // `type` attr will be removed -> no attrs -> tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '4:<script type=\"application/ecmascript\">alert(3)</script>',\n            // tag will be encoded due to incompleteness, mandatory `type` attr is missing\n            '5:<script id=\"identifier\">alert(1)</script>',\n            // tag will be encoded due to incompleteness, mandatory `type` attr mismatches\n            '6:<script id=\"identifier\" type=\"application/javascript\">alert(2)</script>',\n            // tag will be removed due to `PURGE_WITHOUT_CHILDREN`\n            '7:<script type=\"application/ld+json\"></script>',\n            // rest is keep, since `type` attr value matches and child content is given\n            '8:<script type=\"application/ld+json\">alert(4)</script>',\n            '9:<script type=\"application/ld+json\">{\"@id\": \"https://github.com/TYPO3/html-sanitizer\"}</script>',\n            '10:<script type=\"application/ld+json\">{{\"@type\":\"Answer\",\"text\":\"Usually the answer is <b>42</b>.\"}</script>',\n        ]);\n        $expectation = implode(\"\\n\" , [\n            '1:',\n            '2:',\n            '3:',\n            '4:',\n            '5:&lt;script id=\"identifier\"&gt;alert(1)&lt;/script&gt;',\n            '6:&lt;script id=\"identifier\"&gt;alert(2)&lt;/script&gt;',\n            '7:',\n            '8:<script type=\"application/ld+json\">alert(4)</script>',\n            '9:<script type=\"application/ld+json\">{\"@id\": \"https://github.com/TYPO3/html-sanitizer\"}</script>',\n            '10:<script type=\"application/ld+json\">{{\"@type\":\"Answer\",\"text\":\"Usually the answer is <b>42</b>.\"}</script>',\n        ]);\n\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withTags(\n                (new Behavior\\Tag(\n                    'script',\n                    Behavior\\Tag::PURGE_WITHOUT_ATTRS | Behavior\\Tag::PURGE_WITHOUT_CHILDREN\n                        | Behavior\\Tag::ALLOW_CHILDREN | Behavior\\Tag::ALLOW_INSECURE_RAW_TEXT\n                ))->addAttrs(\n                    (new Behavior\\Attr('id')),\n                    (new Behavior\\Attr('type', Behavior\\Attr::MANDATORY))\n                        ->addValues(new Behavior\\DatasetAttrValue('application/ld+json'))\n                )\n            );\n\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    /**\n     * @test\n     */\n    public function iframeSandboxIsAllowed(): void\n    {\n        $payload = implode(\"\\n\" , [\n            '1:<iframe src=\"https://example.org/\"></iframe>',\n            '2:<iframe src=\"https://example.org/\" sandbox></iframe>',\n            '3:<iframe src=\"https://example.org/\" sandbox=\"\"></iframe>',\n            // `sandbox` will be removed, since token is not valid\n            '4:<iframe src=\"https://example.org/\" sandbox=\"allow-non-existing-property\"></iframe>',\n            '5:<iframe src=\"https://example.org/\" allow=\"fullscreen\" sandbox=\"allow-downloads allow-modals\"></iframe>',\n            '6:<iframe src=\"https://example.org/\" sandbox=\"allow-downloads allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-scripts\"></iframe>',\n        ]);\n        $expectation = implode(\"\\n\" , [\n            '1:&lt;iframe src=\"https://example.org/\"&gt;&lt;/iframe&gt;',\n            '2:<iframe src=\"https://example.org/\" sandbox></iframe>',\n            '3:<iframe src=\"https://example.org/\" sandbox></iframe>',\n            '4:&lt;iframe src=\"https://example.org/\"&gt;&lt;/iframe&gt;',\n            '5:<iframe src=\"https://example.org/\" allow=\"fullscreen\" sandbox=\"allow-downloads allow-modals\"></iframe>',\n            '6:<iframe src=\"https://example.org/\" sandbox=\"allow-downloads allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-scripts\"></iframe>',\n        ]);\n\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withTags(\n                (new Behavior\\Tag('iframe'))->addAttrs(\n                    (new Behavior\\Attr('id')),\n                    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allow\n                    (new Behavior\\Attr('allow'))->withValues(\n                        new Behavior\\MultiTokenAttrValue(' ', 'fullscreen')\n                    ),\n                    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox\n                    (new Behavior\\Attr('sandbox', Behavior\\Attr::MANDATORY))->withValues(\n                        new Behavior\\EmptyAttrValue(),\n                        new Behavior\\MultiTokenAttrValue(\n                            ' ',\n                            'allow-downloads',\n                            'allow-modals',\n                            'allow-orientation-lock',\n                            'allow-pointer-lock',\n                            'allow-popups',\n                            'allow-scripts'\n                        )\n                    ),\n                    (new Behavior\\Attr('src'))->withValues(\n                        ...(new UriAttrValueBuilder())->allowSchemes('http', 'https')->getValues()\n                    )\n                )\n            );\n\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n}\n"], "fixing_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer;\n\nuse LogicException;\nuse TYPO3\\HtmlSanitizer\\Behavior\\CdataSection;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Comment;\nuse TYPO3\\HtmlSanitizer\\Behavior\\NodeInterface;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Tag;\n\n/**\n * Declares behavior used by node visitors\n * (and any component used during sanitization)\n */\nclass Behavior\n{\n    /**\n     * not having any behavioral capabilities\n     */\n    public const BLUNT = 0;\n\n    /**\n     * in case an unexpected tag was found, encode the whole tag as HTML\n     */\n    public const ENCODE_INVALID_TAG = 1;\n\n    /**\n     * in case an unexpected attribute was found, encode the whole tag as HTML\n     */\n    public const ENCODE_INVALID_ATTR = 2;\n\n    /**\n     * remove children at nodes that did not expect children\n     */\n    public const REMOVE_UNEXPECTED_CHILDREN = 4;\n\n    /**\n     * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n     * custom elements must contain a hyphen (`-`), start with ASCII lower alpha\n     */\n    public const ALLOW_CUSTOM_ELEMENTS = 8;\n\n    /**\n     * in case an unexpected comment was found, encode the whole comment as HTML\n     */\n    public const ENCODE_INVALID_COMMENT = 16;\n\n    /**\n     * in case an unexpected CDATA section was found, encode the whole CDATA section as HTML\n     */\n    public const ENCODE_INVALID_CDATA_SECTION = 32;\n\n    /**\n     * @var int\n     */\n    protected $flags = 0;\n\n    /**\n     * @var string\n     */\n    protected $name = 'undefined';\n\n    /**\n     * Node names as array index, e.g. `['strong' => new Tag('strong', '#comment' => new Comment()]`\n     * @var array<string, ?NodeInterface>\n     */\n    protected $nodes = [];\n\n    public function __construct()\n    {\n        // v2.1.0: adding `#comment` and `#cdata-section` hints for backward compatibility, will be removed with v3.0.0\n        $this->nodes = array_merge($this->nodes, [\n            '#comment' => new Comment(),\n            '#cdata-section' => new CdataSection(),\n        ]);\n    }\n\n    public function withFlags(int $flags): self\n    {\n        if ($flags === $this->flags) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->flags = $flags;\n        return $target;\n    }\n\n    public function withName(string $name): self\n    {\n        if ($name === $this->name) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->name = $name;\n        return $target;\n    }\n\n    /**\n     * @todo deprecate\n     */\n    public function withTags(Tag ...$tags): self\n    {\n        return $this->withNodes(...$tags);\n    }\n\n    /**\n     * @todo deprecate\n     */\n    public function withoutTags(Tag ...$tags): self\n    {\n        return $this->withoutNodes(...$tags);\n    }\n\n    public function withNodes(NodeInterface ...$nodes): self\n    {\n        $names = array_map([$this, 'getNodeName'], $nodes);\n        $this->assertScalarUniqueness($names);\n        // uses node name as array index, e.g. `['#comment' => new Comment()]`\n        $indexedNodes = array_combine($names, $nodes);\n        if (!is_array($indexedNodes)) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->nodes = array_merge($target->nodes, $indexedNodes);\n        return $target;\n    }\n\n    public function withoutNodes(NodeInterface ...$nodes): self\n    {\n        $names = array_map([$this, 'getNodeName'], $nodes);\n        $filteredNodes = array_filter(\n            $this->nodes,\n            static function (NodeInterface $node, string $name) use ($nodes, $names) {\n                return !in_array($name, $names, true) && !in_array($node, $nodes, true);\n            },\n            ARRAY_FILTER_USE_BOTH\n        );\n        if ($filteredNodes === $this->nodes) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->nodes = $filteredNodes;\n        return $target;\n    }\n\n    public function getFlags(): int\n    {\n        return $this->flags;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * @return list<Tag>\n     */\n    public function getTags(): array\n    {\n        return array_filter(\n            $this->nodes,\n            static function (NodeInterface $node) {\n                return $node instanceof Tag;\n            }\n        );\n    }\n\n    public function getTag(string $name): ?Tag\n    {\n        $name = strtolower($name);\n        $node = $this->nodes[$name] ?? null;\n        return $node instanceof Tag ? $node : null;\n    }\n\n    /**\n     * @return list<NodeInterface>\n     */\n    public function getNodes(): array\n    {\n        return $this->nodes;\n    }\n\n    public function getNode(string $name): ?NodeInterface\n    {\n        $name = strtolower($name);\n        return $this->nodes[$name] ?? null;\n    }\n\n    public function hasNode(string $name): bool\n    {\n        return array_key_exists($name, $this->nodes);\n    }\n\n    public function shallEncodeInvalidTag(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_TAG) === self::ENCODE_INVALID_TAG;\n    }\n\n    public function shallEncodeInvalidAttr(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_ATTR) === self::ENCODE_INVALID_ATTR;\n    }\n\n    public function shallEncodeInvalidComment(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_COMMENT) === self::ENCODE_INVALID_COMMENT;\n    }\n\n    public function shallEncodeInvalidCdataSection(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_CDATA_SECTION) === self::ENCODE_INVALID_CDATA_SECTION;\n    }\n\n    public function shallRemoveUnexpectedChildren(): bool\n    {\n        return ($this->flags & self::REMOVE_UNEXPECTED_CHILDREN) === self::REMOVE_UNEXPECTED_CHILDREN;\n    }\n\n    public function shallAllowCustomElements(): bool\n    {\n        return ($this->flags & self::ALLOW_CUSTOM_ELEMENTS) === self::ALLOW_CUSTOM_ELEMENTS;\n    }\n\n    /**\n     * @param list<string> $names\n     * @throws LogicException\n     */\n    protected function assertScalarUniqueness(array $names): void\n    {\n        $ambiguousNames = array_diff_assoc($names, array_unique($names));\n        if ($ambiguousNames !== []) {\n            throw new LogicException(\n                sprintf(\n                    'Ambiguous tag names %s.',\n                    implode(', ', $ambiguousNames)\n                ),\n                1625591503\n            );\n        }\n    }\n\n    protected function getNodeName(NodeInterface $node): string\n    {\n        return strtolower($node->getName());\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Behavior;\n\nuse DOMNode;\nuse DOMText;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Context;\n\n/**\n * Model of CDATA node.\n */\nclass CdataSection implements NodeInterface, HandlerInterface\n{\n    /**\n     * @var bool\n     */\n    protected $secure = true;\n\n    public function __construct(bool $secure = true)\n    {\n        $this->secure = $secure;\n    }\n\n    public function getName(): string\n    {\n        return '#cdata-section';\n    }\n\n    public function handle(NodeInterface $node, ?DOMNode $domNode, Context $context, Behavior $behavior = null): ?DOMNode\n    {\n        if (!$this->secure || $domNode === null) {\n            return $domNode;\n        }\n        return new DOMText(trim($domNode->nodeValue));\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Behavior;\n\nuse DOMComment;\nuse DOMNode;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Context;\n\n/**\n * Model of comment node.\n */\nclass Comment implements NodeInterface, HandlerInterface\n{\n    /**\n     * @var bool\n     */\n    protected $secure = true;\n\n    public function __construct(bool $secure = true)\n    {\n        $this->secure = $secure;\n    }\n\n    public function getName(): string\n    {\n        return '#comment';\n    }\n\n    public function handle(NodeInterface $node, ?DOMNode $domNode, Context $context, Behavior $behavior = null): ?DOMNode\n    {\n        if (!$this->secure || $domNode === null) {\n            return $domNode;\n        }\n        return new DOMComment(htmlspecialchars($domNode->textContent, ENT_QUOTES, 'UTF-8', false));\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Builder;\n\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Attr\\UriAttrValueBuilder;\nuse TYPO3\\HtmlSanitizer\\Sanitizer;\nuse TYPO3\\HtmlSanitizer\\Visitor\\CommonVisitor;\n\n/**\n * Builder, creating a `Sanitizer` instance with \"common\"\n * behavior for tags, attributes and values.\n */\nclass CommonBuilder implements BuilderInterface\n{\n    /**\n     * @var Behavior\\Attr[]\n     */\n    protected $globalAttrs;\n\n    /**\n     * @var Behavior\\Attr\n     */\n    protected $hrefAttr;\n\n    /**\n     * @var Behavior\\Attr\n     */\n    protected $srcAttr;\n\n    /**\n     * @var Behavior\\Attr\n     * @deprecated not used anymore\n     */\n    protected $srcsetAttr;\n\n    public function __construct()\n    {\n        $bluntUriAttrValueBuilder = new UriAttrValueBuilder();\n        $uriAttrValueBuilders = $this->createUriAttrValueBuilders();\n\n        $this->globalAttrs = $this->createGlobalAttrs();\n\n        $this->hrefAttr = (new Behavior\\Attr('href'))\n            ->addValues(...($uriAttrValueBuilders['href'] ?? $bluntUriAttrValueBuilder)->getValues());\n        $this->srcAttr = (new Behavior\\Attr('src'))\n            ->addValues(...($uriAttrValueBuilders['src'] ?? $bluntUriAttrValueBuilder)->getValues());\n\n        // @deprecated not used anymore\n        $srcsetAttrValueBuilder = (new UriAttrValueBuilder())\n            ->allowLocal(true)\n            ->allowSchemes('http', 'https');\n        $this->srcsetAttr = (new Behavior\\Attr('src'))\n            ->addValues(...$srcsetAttrValueBuilder->getValues());\n    }\n\n    public function build(): Sanitizer\n    {\n        $behavior = $this->createBehavior();\n        $visitor = new CommonVisitor($behavior);\n        return new Sanitizer($behavior, $visitor);\n    }\n\n    protected function createBehavior(): Behavior\n    {\n        return (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('common')\n            ->withTags(...array_values($this->createBasicTags()))\n            ->withTags(...array_values($this->createMediaTags()))\n            ->withTags(...array_values($this->createTableTags()));\n    }\n\n    protected function createBasicTags(): array\n    {\n        $names = [\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#content_sectioning\n            'address', 'article', 'aside', 'footer', 'header',\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'main', 'nav', 'section',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#text_content\n            'blockquote', 'dd', 'div', 'dl', 'dt', 'figcaption', 'figure', 'li', 'ol', 'p', 'pre', 'ul',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#inline_text_semantics\n            'a', 'abbr',  'b', 'bdi', 'bdo', 'cite', 'code', 'data', 'dfn', 'em', 'i', 'kbd', 'mark',\n            'q', 'rb', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'small', 'span', 'strong', 'sub', 'sup',\n            'time', 'u', 'var', 'wbr',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#demarcating_edits\n            'del', 'ins',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#forms\n            'button', 'datalist', 'label', 'legend', 'meter', 'output', 'progress',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#interactive_elements\n            'details', 'dialog', 'menu', 'summary',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#web_components\n            // 'slot', 'template',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#obsolete_and_deprecated_elements\n            'acronym', 'big', 'center', 'font', 'nobr', 'strike', 'tt',\n        ];\n\n        $tags = [];\n        foreach ($names as $name) {\n            $tags[$name] = (new Behavior\\Tag($name, Behavior\\Tag::ALLOW_CHILDREN))\n                ->addAttrs(...$this->globalAttrs);\n        }\n        $tags['a']->addAttrs(\n            $this->hrefAttr,\n            ...$this->createAttrs(\n                // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\n                'download', 'hreflang', 'ping', 'rel', 'referrerpolicy', 'target', 'type',\n                // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#deprecated_attributes\n                'charset', 'name', 'rev'\n            )\n        );\n        $tags['br'] = (new Behavior\\Tag('br'))->addAttrs(...$this->globalAttrs);\n        $tags['hr'] = (new Behavior\\Tag('hr'))->addAttrs(...$this->globalAttrs);\n        $tags['label']->addAttrs(...$this->createAttrs('for'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\n        $tags['li']->addAttrs(...$this->createAttrs('value', 'type'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\n        $tags['meta'] = (new Behavior\\Tag('meta', Behavior\\Tag::PURGE_WITHOUT_ATTRS))\n            ->addAttrs(...$this->globalAttrs)\n            ->addAttrs((new Behavior\\Attr('content'))->addValues(new Behavior\\RegExpAttrValue('#^[\\w]*$#')));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\n        $tags['ol']->addAttrs(...$this->createAttrs('reversed', 'start', 'type'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font\n        $tags['font']->addAttrs(...$this->createAttrs('color', 'face', 'size'));\n\n        return $tags;\n    }\n\n    protected function createMediaTags(): array\n    {\n        $tags = [];\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#image_and_multimedia\n        $tags['audio'] = (new Behavior\\Tag('audio', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('autoplay', 'controls', 'loop', 'muted', 'preload'));\n        $tags['video'] = (new Behavior\\Tag('video', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('autoplay', 'controls', 'height', 'loop', 'muted', 'playsinline', 'poster', 'preload', 'width'));\n        $tags['img'] = (new Behavior\\Tag('img', Behavior\\Tag::PURGE_WITHOUT_ATTRS))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('align', 'alt', 'border', 'decoding', 'fetchpriority', 'height', 'loading', 'name', 'sizes', 'srcset', 'width'));\n        $tags['track'] = (new Behavior\\Tag('track', Behavior\\Tag::PURGE_WITHOUT_ATTRS))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('default', 'kind', 'label', 'srclang'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#embedded_content\n        $tags['picture'] = (new Behavior\\Tag('picture', Behavior\\Tag::ALLOW_CHILDREN))->addAttrs(...$this->globalAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source\n        $tags['source'] = (new Behavior\\Tag('source'))\n            ->addAttrs(...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('media', 'sizes', 'src', 'srcset', 'type'));\n        return $tags;\n    }\n\n    protected function createTableTags(): array\n    {\n        // // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#table_content\n        $tags = [];\n        // declarations related to <table> elements\n        $commonTableAttrs = $this->createAttrs('align', 'valign', 'bgcolor');\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\n        $tags['table'] = (new Behavior\\Tag('table', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('border', 'cellpadding', 'cellspacing', 'summary'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n        $tags['caption'] = (new Behavior\\Tag('caption', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('align'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead\n        $tags['thead'] = (new Behavior\\Tag('thead', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody\n        $tags['tbody'] = (new Behavior\\Tag('tbody', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot\n        $tags['tfoot'] = (new Behavior\\Tag('tfoot', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        $tags['tr'] = (new Behavior\\Tag('tr', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\n        $tags['td'] = (new Behavior\\Tag('td', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('abbr', 'axis', 'headers', 'colspan', 'rowspan', 'scope', 'width', 'height'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th\n        $tags['th'] = (new Behavior\\Tag('th', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('colspan', 'rowspan', 'scope'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup\n        $tags['colgroup'] = (new Behavior\\Tag('colgroup', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('span'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col\n        $tags['col'] = (new Behavior\\Tag('col')) // no children here\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('span', 'width'));\n        return $tags;\n    }\n\n    /**\n     * @return Behavior\\Attr[]\n     */\n    protected function createGlobalAttrs(): array\n    {\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\n        $attrs = $this->createAttrs(\n            'class',\n            'id',\n            'dir',\n            'lang',\n            'nonce',\n            'xml:lang',\n            'itemid',\n            'itemprop',\n            'itemref',\n            'itemscope',\n            'itemtype',\n            'role',\n            'tabindex',\n            'title',\n            'translate'\n        );\n        $attrs[] = new Behavior\\Attr('aria-', Behavior\\Attr::NAME_PREFIX);\n        $attrs[] = new Behavior\\Attr('data-', Behavior\\Attr::NAME_PREFIX);\n        return $attrs;\n    }\n\n    /**\n     * @return array<'href'|'src', UriAttrValueBuilder>\n     */\n    protected function createUriAttrValueBuilders(): array\n    {\n        return [\n            'href' => (new UriAttrValueBuilder())\n                ->allowLocal(true)\n                ->allowSchemes('http', 'https', 'mailto', 'tel')\n                // https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml\n                // + addressing files\n                ->allowSchemes('afp', 'file', 'ftp', 'git', 'nfs', 's3', 'sftp', 'smb', 'svn')\n                // + addressing resources\n                ->allowSchemes('geo', 'maps', 'news', 'snews', 'spotify', 'vnc', 'webcal')\n                // + addressing applications\n                ->allowSchemes('facetime', 'irc', 'ircs', 'jabber', 'skype', 'slack', 'sms', 'xmpp')\n                // emails, see https://datatracker.ietf.org/doc/html/rfc2392\n                ->allowSchemes('mid'),\n            'src' => (new UriAttrValueBuilder())\n                ->allowLocal(true)\n                ->allowSchemes('http', 'https')\n                // emails, see https://datatracker.ietf.org/doc/html/rfc2392\n                ->allowSchemes('cid')\n                ->allowDataMediaTypes('audio', 'image', 'video'),\n        ];\n    }\n\n    /**\n     * @param string ...$names\n     * @return Behavior\\Attr[]\n     */\n    protected function createAttrs(string ...$names): array\n    {\n        return array_map(\n            function (string $name) {\n                return new Behavior\\Attr($name);\n            },\n            $names\n        );\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer;\n\nuse DOMDocumentFragment;\nuse DOMNode;\nuse DOMNodeList;\nuse Masterminds\\HTML5;\nuse TYPO3\\HtmlSanitizer\\Serializer\\Rules;\nuse TYPO3\\HtmlSanitizer\\Serializer\\RulesInterface;\nuse TYPO3\\HtmlSanitizer\\Visitor\\VisitorInterface;\n\n/**\n * HTML Sanitizer in a nutshell:\n *\n * + `Behavior` contains declarative settings for a particular process for sanitizing HTML.\n * + `Visitor` (multiple different visitors can exist at the same time) are actually doing the\n *   work based on the declared `Behavior`. Visitors can modify nodes or mark them for deletion.\n * + `Sanitizer` can be considered as the working instance, invoking visitors, parsing and\n *   serializing HTML. In general this instance does not contain much logic on how to handle\n *   particular nodes, attributes or values\n *\n * This `Sanitizer` class is agnostic specific configuration - it's purpose is to parse HTML,\n * invoke all registered visitors (they actually do the work and contain specific logic) and\n * finally provide HTML serialization as string again.\n */\nclass Sanitizer\n{\n    protected const mastermindsDefaultOptions = [\n        // Whether the serializer should aggressively encode all characters as entities.\n        'encode_entities' => false,\n        'encode_attributes' => true,\n        // Prevents the parser from automatically assigning the HTML5 namespace to the DOM document.\n        // (adjusted due to https://github.com/Masterminds/html5-php/issues/181#issuecomment-643767471)\n        'disable_html_ns' => true,\n    ];\n\n    /**\n     * @var VisitorInterface[]\n     */\n    protected $visitors = [];\n\n    /**\n     * @var ?Behavior\n     */\n    protected $behavior = null;\n\n    /**\n     * @var HTML5\n     */\n    protected $parser;\n\n    /**\n     * @var DOMDocumentFragment\n     * @deprecated since v2.1.0, not required anymore\n     */\n    protected $root;\n\n    /**\n     * @var Context\n     */\n    protected $context;\n\n    /**\n     * @param Behavior|VisitorInterface ...$items\n     *\n     * @todo use `__construct(Behavior $behavior, VisitorInterface ...$visitors)`\n     * (which would have been a breaking change with a PHP fatal error)\n     */\n    public function __construct(...$items)\n    {\n        $this->visitors = [];\n        foreach ($items as $item) {\n            if ($item instanceof VisitorInterface) {\n                $this->visitors[] = $item;\n            } elseif ($item instanceof Behavior && $this->behavior === null) {\n                $this->behavior = $item;\n            }\n        }\n        $this->parser = $this->createParser();\n    }\n\n    public function sanitize(string $html, InitiatorInterface $initiator = null): string\n    {\n        $root = $this->parse($html);\n        // @todo drop deprecated property\n        $this->root = $root;\n        $this->handle($root, $initiator);\n        $rules = $this->createRules($initiator);\n        $serialized = $this->serialize($root, $rules);\n        $this->closeRulesStream($rules);\n        return $serialized;\n    }\n\n    protected function parse(string $html): DOMDocumentFragment\n    {\n        return $this->parser->parseFragment($html);\n    }\n\n    protected function handle(DOMNode $domNode, InitiatorInterface $initiator = null): DOMNode\n    {\n        $this->context = new Context($this->parser, $initiator);\n        $this->beforeTraverse();\n        $this->traverseNodeList($domNode->childNodes);\n        $this->afterTraverse();\n        return $domNode;\n    }\n\n    /**\n     * Custom implementation of `\\Masterminds\\HTML5::save` and `\\Masterminds\\HTML5::saveHTML`.\n     */\n    protected function serialize(DOMNode $domNode, RulesInterface $rules): string\n    {\n        $rules->traverse($domNode);\n        return stream_get_contents($rules->getStream(), -1, 0);\n    }\n\n    protected function beforeTraverse(): void\n    {\n        foreach ($this->visitors as $visitor) {\n            $visitor->beforeTraverse($this->context);\n        }\n    }\n\n    protected function traverse(DOMNode $domNode): void\n    {\n        foreach ($this->visitors as $visitor) {\n            $result = $visitor->enterNode($domNode);\n            $domNode = $this->replaceNode($domNode, $result);\n            if ($domNode === null) {\n                return;\n            }\n        }\n\n        if ($domNode->hasChildNodes()) {\n            $this->traverseNodeList($domNode->childNodes);\n        }\n\n        foreach ($this->visitors as $visitor) {\n            $result = $visitor->leaveNode($domNode);\n            $domNode = $this->replaceNode($domNode, $result);\n            if ($domNode === null) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * Traverses node-list (child-nodes) in reverse(!) order to allow\n     * directly removing child nodes, keeping node-list indexes.\n     *\n     * @param DOMNodeList $domNodeList\n     */\n    protected function traverseNodeList(DOMNodeList $domNodeList): void\n    {\n        for ($i = $domNodeList->length - 1; $i >= 0; $i--) {\n            /** @var DOMNode $item */\n            $item = $domNodeList->item($i);\n            $this->traverse($item);\n        }\n    }\n\n    protected function afterTraverse(): void\n    {\n        foreach ($this->visitors as $visitor) {\n            $visitor->afterTraverse($this->context);\n        }\n    }\n\n    protected function replaceNode(DOMNode $source, ?DOMNode $target): ?DOMNode\n    {\n        if ($target === null) {\n            $source->parentNode->removeChild($source);\n        } elseif ($source !== $target) {\n            if ($source->ownerDocument !== $target->ownerDocument) {\n                $source->ownerDocument->importNode($target);\n            }\n            $source->parentNode->replaceChild($target, $source);\n        }\n        return $target;\n    }\n\n    protected function createRules(InitiatorInterface $initiator = null): Rules\n    {\n        $stream = fopen('php://temp', 'wb');\n        return (new Rules($stream, self::mastermindsDefaultOptions))\n            ->withBehavior($this->behavior ?? new Behavior())\n            ->withInitiator($initiator);\n    }\n\n    protected function closeRulesStream(RulesInterface $rules): bool\n    {\n        return fclose($rules->getStream());\n    }\n\n    protected function createParser(): HTML5\n    {\n        return new HTML5(self::mastermindsDefaultOptions);\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Serializer;\n\nuse DOMCharacterData;\nuse DOMElement;\nuse DOMNode;\nuse Masterminds\\HTML5\\Elements;\nuse Masterminds\\HTML5\\Serializer\\OutputRules;\nuse Masterminds\\HTML5\\Serializer\\Traverser;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\InitiatorInterface;\n\nclass Rules extends OutputRules implements RulesInterface\n{\n    /**\n     * @var array\n     */\n    protected $options;\n\n    /**\n     * @var ?Traverser\n     */\n    protected $traverser;\n\n    /**\n     * @var ?Behavior\n     */\n    protected $behavior;\n\n    /**\n     * @var ?InitiatorInterface\n     */\n    protected $initiator;\n\n    /**\n     * @var bool\n     */\n    protected $encodeAttributes;\n\n    /**\n     * @param Behavior $behavior\n     * @param resource$output\n     * @param array $options\n     * @return self\n     */\n    public static function create(Behavior $behavior, $output, array $options = []): self\n    {\n        $target = new self($output, $options);\n        $target->options = $options;\n        $target->behavior = $behavior;\n        return $target;\n    }\n\n    /**\n     * @param resource $output\n     * @param array $options\n     */\n    public function __construct($output, $options = [])\n    {\n        $this->options = (array)$options;\n        $this->encodeAttributes = !empty($options['encode_attributes']);\n        parent::__construct($output, $this->options);\n    }\n\n    public function withBehavior(Behavior $behavior): self\n    {\n        if ($this->behavior === $behavior) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->behavior = $behavior;\n        return $target;\n    }\n\n    public function withInitiator(?InitiatorInterface $initiator): self\n    {\n        if ($this->initiator === $initiator) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->initiator = $initiator;\n        return $target;\n    }\n\n    public function traverse(DOMNode $domNode): void\n    {\n        $traverser = new Traverser($domNode, $this->out, $this, $this->options);\n        $traverser->walk();\n        // release the traverser to avoid cyclic references and allow PHP\n        // to free memory without waiting for gc_collect_cycles\n        $this->unsetTraverser();\n    }\n\n    /**\n     * @return resource\n     */\n    public function getStream()\n    {\n        return $this->out;\n    }\n\n    public function getOptions(): array\n    {\n        return $this->options;\n    }\n\n    public function element($domNode): void\n    {\n        if (!$domNode instanceof DOMElement) {\n            return;\n        }\n        // process non-raw-text elements and `<svg>` or `<math>` elements as usual\n        if (!$this->isRawText($domNode)\n            || in_array($this->resolveNodeName($domNode), ['svg', 'math'], true)\n        ) {\n            parent::element($domNode);\n            return;\n        }\n\n        $this->openTag($domNode);\n        if ($this->shallAllowInsecureRawText($domNode)) {\n            // the potentially insecure case, not encoding node data\n            foreach ($domNode->childNodes as $child) {\n                if ($child instanceof DOMCharacterData) {\n                    $this->wr($child->data);\n                } elseif ($child instanceof DOMElement) {\n                    $this->element($child);\n                }\n            }\n        } elseif ($domNode->hasChildNodes()) {\n            // enforce encoding for those raw text elements (different to original implementation)\n            $this->traverser->children($domNode->childNodes);\n        }\n        if (!$this->isVoid($domNode)) {\n            $this->closeTag($domNode);\n        }\n    }\n\n    public function text($domNode): void\n    {\n        if (!$domNode instanceof DOMNode) {\n            return;\n        }\n        // @todo if allowed as text raw element\n        $parentDomNode = $domNode->parentNode ?? null;\n        if (!$this->isRawText($parentDomNode) || !$this->shallAllowInsecureRawText($parentDomNode)) {\n            $this->wr($this->enc($domNode->data));\n            return;\n        }\n        // the potentially insecure case, not encoding node data\n        $this->wr($domNode->data);\n    }\n\n    protected function enc($text, $attribute = false): string\n    {\n        if ($attribute && $this->encodeAttributes && !$this->encode) {\n            // In contrast to parent::enc() (when $this->encode is true),\n            // we are using htmlspecialchars() instead of htmlentities() as\n            // colons and slashes do not need to be aggressively escaped.\n            $value = htmlspecialchars(\n                $text,\n                ENT_HTML5 | ENT_SUBSTITUTE | ENT_QUOTES,\n                'UTF-8',\n                // $double_encode: true\n                // (name is misleading, it actually means: disable-automagic/always-encode)\n                // Our input is always entity decoded by the parser and we do not\n                // want to consider our input to possibly contain valid entities\n                // we rather want to treat it as pure text, that is *always* to be encoded.\n                true\n            );\n            // htmlspecialchars does escaping, but it doesn't match the requirements of\n            // HTML5 section 8.3 to ecape non breaking spaces\n            // https://www.w3.org/TR/2013/CR-html5-20130806/syntax.html#escapingString\n            $value = implode('&nbsp;', mb_split(\"\\xc2\\xa0\", $value));\n            return $value;\n        }\n        return parent::enc($text, $attribute);\n    }\n\n    /**\n     * If the element has a declared namespace in the HTML, MathML or\n     * SVG namespaces, we use the localName instead of the tagName.\n     */\n    protected function resolveNodeName(DOMElement $domNode): string\n    {\n        return $this->traverser->isLocalElement($domNode) ? $domNode->localName : $domNode->tagName;\n    }\n\n    protected function shallAllowInsecureRawText(?DOMNode $domNode): bool\n    {\n        if (!$domNode instanceof DOMNode || !$this->behavior instanceof Behavior) {\n            return false;\n        }\n        $tag = $this->behavior->getTag($domNode->nodeName);\n        return $tag instanceof Behavior\\Tag && $tag->shallAllowInsecureRawText();\n    }\n\n    protected function isRawText(?DOMNode $domNode): bool\n    {\n        return $domNode instanceof DOMNode\n            && !empty($domNode->tagName)\n            && Elements::isA($domNode->localName, Elements::TEXT_RAW);\n    }\n\n    protected function isVoid(?DOMNode $domNode): bool\n    {\n        return $domNode instanceof DOMNode\n            && !empty($domNode->tagName)\n            && Elements::isA($domNode->localName, Elements::VOID_TAG);\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Visitor;\n\nuse DOMAttr;\nuse DOMCdataSection;\nuse DOMComment;\nuse DOMElement;\nuse DOMNode;\nuse DOMText;\nuse Psr\\Log\\LoggerAwareInterface;\nuse Psr\\Log\\LoggerAwareTrait;\nuse Psr\\Log\\NullLogger;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Context;\n\n/**\n * Node visitor handling most common aspects for tag, attribute\n * and values as declared in provided `Behavior` instance.\n */\nclass CommonVisitor extends AbstractVisitor implements LoggerAwareInterface\n{\n    use LoggerAwareTrait;\n\n    /**\n     * @var Behavior\n     */\n    protected $behavior;\n\n    /**\n     * @var Context\n     */\n    protected $context;\n\n    public function __construct(Behavior $behavior)\n    {\n        $this->logger = new NullLogger();\n        $this->behavior = $behavior;\n    }\n\n    public function beforeTraverse(Context $context): void\n    {\n        $this->context = $context;\n        // v2.1.0: adding `#comment` and `#cdata-section` nodes for backward compatibility, will be removed with v3.0.0\n        if ($this->behavior->hasNode('#comment') && $this->behavior->getNode('#comment') === null) {\n            $this->behavior = $this->behavior->withNodes(new Behavior\\Comment());\n        }\n        if ($this->behavior->hasNode('#cdata-section') && $this->behavior->getNode('#cdata-section') === null) {\n            $this->behavior = $this->behavior->withNodes(new Behavior\\CdataSection());\n        }\n    }\n\n    public function enterNode(DOMNode $domNode): ?DOMNode\n    {\n        if (!$domNode instanceof DOMCdataSection\n            && !$domNode instanceof DOMComment\n            && !$domNode instanceof DOMElement\n        ) {\n            return $domNode;\n        }\n\n        $node = $this->behavior->getNode($domNode->nodeName);\n        if (!$node instanceof Behavior\\NodeInterface) {\n            return $this->handleInvalidNode($domNode);\n        }\n\n        if ($node instanceof Behavior\\NodeHandler) {\n            if ($node->shallHandleFirst()) {\n                $domNode = $node->getHandler()->handle($node->getNode(), $domNode, $this->context, $this->behavior);\n            }\n            if ($node->shallProcessDefaults() && $domNode instanceof DOMElement) {\n                $domNode = $this->enterDomElement($domNode, $node->getNode());\n            }\n            if (!$node->shallHandleFirst()) {\n                $domNode = $node->getHandler()->handle($node->getNode(), $domNode, $this->context, $this->behavior);\n            }\n        } elseif ($node instanceof Behavior\\HandlerInterface) {\n            $domNode = $node->handle($node, $domNode, $this->context, $this->behavior);\n            $domNode = $domNode instanceof DOMElement ? $this->enterDomElement($domNode, $node) : $domNode;\n        } elseif ($domNode instanceof DOMElement) {\n            $domNode = $this->enterDomElement($domNode, $node);\n        }\n        return $domNode;\n    }\n\n    protected function enterDomElement(?DOMNode $domNode, Behavior\\NodeInterface $node): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement || !$node instanceof Behavior\\Tag) {\n            return $domNode;\n        }\n        $domNode = $this->processAttributes($domNode, $node);\n        $domNode = $this->processChildren($domNode, $node);\n        // completely remove node, in case it is expected to exist with attributes only\n        if ($domNode instanceof DOMElement && $domNode->attributes->length === 0 && $node->shallPurgeWithoutAttrs()) {\n            return null;\n        }\n        return $this->handleMandatoryAttributes($domNode, $node);\n    }\n\n    public function leaveNode(DOMNode $domNode): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        $tag = $this->behavior->getTag($domNode->nodeName);\n        if ($tag === null) {\n            // pass custom elements, in case it has been declared\n            if ($this->behavior->shallAllowCustomElements() && $this->isCustomElement($domNode)) {\n                return $domNode;\n            }\n            // unexpected node, that should have been handled in `enterNode` already\n            return null;\n        }\n        // completely remove node, in case it is expected to exist with children only\n        if (!$this->hasNonEmptyChildren($domNode) && $tag->shallPurgeWithoutChildren()) {\n            return null;\n        }\n        return $domNode;\n    }\n\n    protected function processAttributes(?DOMNode $domNode, Behavior\\Tag $tag): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        // reverse processing of attributes,\n        // allowing to directly remove attribute nodes\n        for ($i = $domNode->attributes->length - 1; $i >= 0; $i--) {\n            /** @var DOMAttr $attribute */\n            $attribute = $domNode->attributes->item($i);\n            try {\n                $this->processAttribute($domNode, $tag, $attribute);\n            } catch (Behavior\\NodeException $exception) {\n                return $exception->getDomNode();\n            }\n        }\n        return $domNode;\n    }\n\n    protected function processChildren(?DOMNode $domNode, Behavior\\Tag $tag): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        if (!$tag->shallAllowChildren()\n            && $domNode->childNodes->length > 0\n            && $this->behavior->shallRemoveUnexpectedChildren()\n        ) {\n            $this->log('Found unexpected children for {nodeName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeName' => $domNode->nodeName,\n            ]);\n            // reverse processing of children,\n            // allowing to directly remove child nodes\n            for ($i = $domNode->childNodes->length - 1; $i >= 0; $i--) {\n                /** @var DOMNode $child */\n                $child = $domNode->childNodes->item($i);\n                $domNode->removeChild($child);\n            }\n        }\n        return $domNode;\n    }\n\n    /**\n     * @throws Behavior\\NodeException\n     */\n    protected function processAttribute(DOMElement $domNode, Behavior\\Tag $tag, DOMAttr $attribute): void\n    {\n        $name = strtolower($attribute->name);\n        $attr = $tag->getAttr($name);\n        if ($attr === null || !$attr->matchesValue($attribute->value)) {\n            $this->log('Found invalid attribute {nodeName}.{attrName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeName' => $domNode->nodeName,\n                'attrName' => $attribute->nodeName,\n            ]);\n            $this->handleInvalidAttr($domNode, $name);\n        }\n    }\n\n    protected function handleMandatoryAttributes(?DOMNode $domNode, Behavior\\Tag $tag): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        foreach ($tag->getAttrs() as $attr) {\n            if ($attr->isMandatory() && !$domNode->hasAttribute($attr->getName())) {\n                $this->log('Missing mandatory attribute {nodeName}.{attrName}', [\n                    'behavior' => $this->behavior->getName(),\n                    'nodeName' => $domNode->nodeName,\n                    'attrName' => $attr->getName(),\n                ]);\n                return $this->handleInvalidNode($domNode);\n            }\n        }\n        return $domNode;\n    }\n\n    protected function handleInvalidNode(DOMNode $domNode): ?DOMNode\n    {\n        if ($domNode instanceof DOMComment && $this->behavior->shallEncodeInvalidComment()) {\n            return $this->convertToText($domNode);\n        }\n        if ($domNode instanceof DOMCdataSection && $this->behavior->shallEncodeInvalidCdataSection()) {\n            return $this->convertToText($domNode);\n        }\n        if ($domNode instanceof DOMElement) {\n            // pass custom elements, in case it has been declared\n            if ($this->behavior->shallAllowCustomElements() && $this->isCustomElement($domNode)) {\n                $this->log('Allowed custom element {nodeName}', [\n                    'behavior' => $this->behavior->getName(),\n                    'nodeName' => $domNode->nodeName,\n                ]);\n                return $domNode;\n            }\n            $this->log('Found unexpected tag {nodeName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeName' => $domNode->nodeName,\n            ]);\n            if ($this->behavior->shallEncodeInvalidTag()) {\n                return $this->convertToText($domNode);\n            }\n        }\n        return null;\n    }\n\n    /**\n     * @throws Behavior\\NodeException\n     */\n    protected function handleInvalidAttr(DOMNode $domNode, string $name): void\n    {\n        if ($this->behavior->shallEncodeInvalidAttr()) {\n            throw Behavior\\NodeException::create()->withDomNode($this->convertToText($domNode));\n        }\n        if (!$domNode instanceof DOMElement) {\n            throw Behavior\\NodeException::create()->withDomNode(null);\n        }\n        $domNode->removeAttribute($name);\n    }\n\n    /**\n     * Converts node/element to text node, basically disarming tags.\n     * (`<script>` --> `&lt;script&gt;` when DOM is serialized as string)\n     */\n    protected function convertToText(DOMNode $domNode): DOMText\n    {\n        $text = new DOMText();\n        $text->nodeValue = $this->context->parser->saveHTML($domNode);\n        return $text;\n    }\n\n    /**\n     * Determines whether a node has children. This is a special\n     * handling for nodes that only allow text nodes that still can be empty.\n     *\n     * For instance `<script></script>` is considered empty,\n     * albeit `$domNode->childNodes->length === 1`.\n     */\n    protected function hasNonEmptyChildren(DOMNode $domNode): bool\n    {\n        if ($domNode->childNodes->length === 0) {\n            return false;\n        }\n        for ($i = $domNode->childNodes->length - 1; $i >= 0; $i--) {\n            $child = $domNode->childNodes->item($i);\n            if (!$child instanceof DOMText\n                || trim($child->textContent) !== ''\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Whether given node name can be considered as custom element.\n     * (see https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name)\n     */\n    protected function isCustomElement(DOMNode $domNode): bool\n    {\n        return $domNode instanceof DOMElement\n            && preg_match('#^[a-z][a-z0-9]*-.+#', $domNode->nodeName) > 0;\n    }\n\n    protected function log(string $message, array $context = [], $level = null): void\n    {\n        // @todo consider given minimum log-level\n        if (!isset($context['initiator'])) {\n            $context['initiator'] = (string)$this->context->initiator;\n        }\n        $this->logger->debug($message, $context);\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Tests;\n\nuse LogicException;\nuse PHPUnit\\Framework\\TestCase;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Tag;\n\nclass BehaviorTest extends TestCase\n{\n    public function ambiguityIsDetectedDataProvider(): array\n    {\n        return [\n            [ ['same', 'same'], [], 1625591503 ],\n            [ ['same', 'same'], ['same'], 1625591503 ],\n            [ [], ['same', 'same'], 1625591503 ],\n            [ ['same'], ['same', 'same'], 1625591503 ],\n        ];\n    }\n\n    /**\n     * @param string[] $originalNames\n     * @param string[] $additionalNames\n     * @param int $code\n     * @test\n     * @dataProvider ambiguityIsDetectedDataProvider\n     */\n    public function ambiguityIsDetected(array $originalNames, array $additionalNames, int $code = 0): void\n    {\n        $this->expectException(LogicException::class);\n        $this->expectExceptionCode($code);\n        $behavior = new Behavior();\n        if (!empty($originalNames)) {\n            $behavior = $behavior->withTags(...$this->createTags(...$originalNames));\n        }\n        if (!empty($additionalNames)) {\n            $behavior->withTags(...$this->createTags(...$additionalNames));\n        }\n    }\n\n    /**\n     * @param string ...$names\n     * @return Tag[]\n     */\n    private function createTags(string ...$names): array\n    {\n        return array_map(\n            function (string $name) {\n                return new Tag($name);\n            },\n            $names\n        );\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Tests;\n\nuse PHPUnit\\Framework\\TestCase;\nuse TYPO3\\HtmlSanitizer\\Builder\\CommonBuilder;\n\nclass CommonBuilderTest extends TestCase\n{\n    public function isSanitizedDataProvider(): array\n    {\n        return [\n            '#010' => [\n                '<unknown unknown=\"unknown\">value</unknown>',\n                '&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;',\n            ],\n            '#011' => [\n                '<div class=\"nested\"><unknown unknown=\"unknown\">value</unknown></div>',\n                '<div class=\"nested\">&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;</div>',\n            ],\n            '#012' => [\n                '&lt;script&gt;alert(1)&lt;/script&gt;',\n                '&lt;script&gt;alert(1)&lt;/script&gt;',\n            ],\n            '#013' => [\n                '<unknown unknown=\"unknown\">value</unknown>' .\n                    '<unknown unknown=\"unknown\">value</unknown>',\n                '&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;' .\n                    '&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;'\n            ],\n            '#014' => [\n                '<unknown>value</unknown><unknown>value</unknown>' .\n                    '<div unknown=\"unknown\">value</div>' .\n                    '<unknown>value</unknown><unknown>value</unknown>',\n                '&lt;unknown&gt;value&lt;/unknown&gt;&lt;unknown&gt;value&lt;/unknown&gt;' .\n                    '<div>value</div>' .\n                    '&lt;unknown&gt;value&lt;/unknown&gt;&lt;unknown&gt;value&lt;/unknown&gt;'\n            ],\n            '#015' => [\n                '<unknown unknown=\"unknown\" class=\"nested\"><div class=\"nested\">value</div></unknown>',\n                // '&lt;unknown unknown=\"unknown\" class=\"nested\"&gt;<div class=\"nested\">value</div>&lt;/unknown&gt;',\n                // @todo invalidating nested nodes due invalid parent node is currently expected - topic for discussion\n                '&lt;unknown unknown=\"unknown\" class=\"nested\"&gt;&lt;div class=\"nested\"&gt;value&lt;/div&gt;&lt;/unknown&gt;',\n            ],\n            // @todo bug in https://github.com/Masterminds/html5-php/issues\n            // '#013' => [\n            //    '<strong>Given that x < y and y > z...</strong>',\n            //    '<strong>Given that x &lt; y and y &gt; z...</strong>',\n            // ],\n            '#020' => [\n                '<div unknown=\"unknown\">value</div>',\n                '<div>value</div>',\n            ],\n            '#030' => [\n                '<div class=\"class\">value</div>',\n                '<div class=\"class\">value</div>',\n            ],\n            '#031' => [\n                '<div data-value=\"value\">value</div>',\n                '<div data-value=\"value\">value</div>',\n            ],\n            '#032' => [\n                '<div data-bool>value</div>',\n                '<div data-bool>value</div>',\n            ],\n            '#040' => [\n                '<img src=\"mailto:noreply@typo3.org\" onerror=\"alert(1)\">',\n                '',\n            ],\n            '#041' => [\n                '<img src=\"https://typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"https://typo3.org/logo.svg\">',\n            ],\n            '#042' => [\n                '<img src=\"http://typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"http://typo3.org/logo.svg\">',\n            ],\n            '#043' => [\n                '<img src=\"/typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"/typo3.org/logo.svg\">',\n            ],\n            '#044' => [\n                '<img src=\"typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"typo3.org/logo.svg\">',\n            ],\n            '#045' => [\n                '<img src=\"//typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '',\n            ],\n            '#046' => [\n                '<img src=\"/typo3.org/logo.svg\" alt=\"logo\" loading=\"lazy\" fetchpriority=\"low\" decoding=\"async\" width=\"100\" height=\"100\" sizes=\"33.3vw\" name=\"logo\" align=\"left\" border=\"0\">',\n                '<img src=\"/typo3.org/logo.svg\" alt=\"logo\" loading=\"lazy\" fetchpriority=\"low\" decoding=\"async\" width=\"100\" height=\"100\" sizes=\"33.3vw\" name=\"logo\" align=\"left\" border=\"0\">',\n            ],\n            '#047' => [\n                '<img src=\"data:text/html,<script>alert(1)</script>\">',\n                '',\n            ],\n            '#048' => [\n                '<img src=\"data:image/png,...\"><img src=\"data:image/png;,...\"><img src=\"data:image/png;base64,...\"><img src=\"data:image/svg+xml;base64,...\">',\n                '<img src=\"data:image/png,...\"><img src=\"data:image/png;,...\"><img src=\"data:image/png;base64,...\"><img src=\"data:image/svg+xml;base64,...\">',\n            ],\n            '#049' => [\n                '<a href=\"git://github.com/typo3/typo3\">GitHub</a>',\n                '<a href=\"git://github.com/typo3/typo3\">GitHub</a>',\n            ],\n            '#050' => [\n                '<a href=\"https://typo3.org/\" role=\"button\">value</a>',\n                '<a href=\"https://typo3.org/\" role=\"button\">value</a>',\n            ],\n            '#051' => [\n                '<a href=\"ssh://example.org/\" role=\"button\">value</a>',\n                '<a role=\"button\">value</a>',\n            ],\n            '#052' => [\n                '<a href=\"javascript:alert(1)\" role=\"button\">value</a>',\n                '<a role=\"button\">value</a>',\n            ],\n            '#053' => [\n                '<a href=\"data:text/html;...\" role=\"button\">value</a>',\n                '<a role=\"button\">value</a>',\n            ],\n            '#054' => [\n                '<a href=\"#anchor\">anchor</a><a name=\"anchor\">content</a>',\n                '<a href=\"#anchor\">anchor</a><a name=\"anchor\">content</a>',\n            ],\n            '#055' => [\n                '<a href=\"tel:123456789\">anchor</a>',\n                '<a href=\"tel:123456789\">anchor</a>',\n            ],\n            '#090' => [\n                '<p data-bool><span data-bool><strong data-bool>value</strong></span></p>',\n                '<p data-bool><span data-bool><strong data-bool>value</strong></span></p>'\n            ],\n            '#100' => [\n                '<table><caption>c</caption><thead><tr><th>h</th></tr></thead><tbody><tr><td>b</td></tr></tbody><tfoot><tr><td>f</td></tr></tfoot></table>',\n                '<table><caption>c</caption><thead><tr><th>h</th></tr></thead><tbody><tr><td>b</td></tr></tbody><tfoot><tr><td>f</td></tr></tfoot></table>',\n            ],\n            '#101' => [\n                '<table align=\"left\" border=\"2\" cellpadding=\"2\" cellspacing=\"2\" class=\"table\" summary=\"summary\"></table>',\n                '<table align=\"left\" border=\"2\" cellpadding=\"2\" cellspacing=\"2\" class=\"table\" summary=\"summary\"></table>',\n            ],\n            '#102' => [\n                '<caption align=\"left\">caption</caption>',\n                '<caption align=\"left\">caption</caption>',\n            ],\n            '#104' => [\n                '<tr align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tr>',\n                '<tr align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tr>',\n            ],\n            '#105' => [\n                '<td abbr=\"abbr\" align=\"left\" valign=\"top\" colspan=\"2\" rowspan=\"2\" bgcolor=\"#cc0000\" axis=\"axis,axis\" headers=\"head,head\" scope=\"scope\" width=\"100\" height=\"100\">value</td>',\n                '<td abbr=\"abbr\" align=\"left\" valign=\"top\" colspan=\"2\" rowspan=\"2\" bgcolor=\"#cc0000\" axis=\"axis,axis\" headers=\"head,head\" scope=\"scope\" width=\"100\" height=\"100\">value</td>',\n            ],\n            '#106' => [\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n            ],\n            '#107' => [\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n            ],\n            '#108' => [\n                '<tfoot align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tfoot>',\n                '<tfoot align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tfoot>',\n            ],\n            '#109' => [\n                '<colgroup align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" span=\"1\"><col><col span=\"2\" align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" width=\"100\"></colgroup>',\n                '<colgroup align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" span=\"1\"><col><col span=\"2\" align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" width=\"100\"></colgroup>',\n            ],\n            '#120' => [\n                '<figure><img src=\"https://typo3.org/logo.svg\" alt=\"logo\"><figcaption>TYPO3 logo</figcaption></figure>',\n                '<figure><img src=\"https://typo3.org/logo.svg\" alt=\"logo\"><figcaption>TYPO3 logo</figcaption></figure>',\n            ],\n            '#121' => [\n                '<picture><source srcset=\"/logo-800.png\" media=\"(min-width: 800px)\" type=\"image/png\" sizes=\"33.3vw\"></picture>',\n                '<picture><source srcset=\"/logo-800.png\" media=\"(min-width: 800px)\" type=\"image/png\" sizes=\"33.3vw\"></picture>'\n            ],\n            '#122' => [\n                '<video controls src=\"/video.mp4\"><track default kind=\"captions\" srclang=\"en\" src=\"/video.vtt\"></video>',\n                '<video controls src=\"/video.mp4\"><track default kind=\"captions\" srclang=\"en\" src=\"/video.vtt\"></video>',\n            ],\n            '200' => [\n                '<ul><li>item</li><li>item</li></ul>',\n                '<ul><li>item</li><li>item</li></ul>',\n            ],\n            '201' => [\n                '<ol reversed start=\"3\" type=\"I\"><li>item</li><li value=\"13\">item</li></ol>',\n                '<ol reversed start=\"3\" type=\"I\"><li>item</li><li value=\"13\">item</li></ol>',\n            ],\n            '#900' => [\n                '<div id=\"main\">' .\n                    '<a href=\"https://typo3.org/\" data-type=\"url\" wrong-attr=\"is-removed\">TYPO3</a><br>' .\n                    '(the <script>alert(1)</script> tag shall be encoded to HTML entities)'.\n                '</div>',\n                '<div id=\"main\">' .\n                    '<a href=\"https://typo3.org/\" data-type=\"url\">TYPO3</a><br>' .\n                    '(the &lt;script&gt;alert(1)&lt;/script&gt; tag shall be encoded to HTML entities)'.\n                '</div>',\n            ],\n            '#901' => [\n                '<div itemprop=\"tel\" itemscope>' .\n                    '<span itemprop=\"value\">+1-234-56789</span>' .\n                    '<meta itemprop=\"type\" content=\"voice\">' .\n                '</div>',\n                '<div itemprop=\"tel\" itemscope>' .\n                    '<span itemprop=\"value\">+1-234-56789</span>' .\n                    '<meta itemprop=\"type\" content=\"voice\">' .\n                '</div>'\n            ],\n            '#902' => [\n                '<div><meta http-equiv=\"refresh\" content=\"1;https://evil.typo3.org/\" name=\"referrer\" charset=\"utf-8\"></div>',\n                '<div></div>'\n            ],\n            '#903' => [\n                '<font class=\"font\" color=\"#000000\" face=\"Verdana,Arial\" size=\"13\">value</font>',\n                '<font class=\"font\" color=\"#000000\" face=\"Verdana,Arial\" size=\"13\">value</font>'\n            ],\n            '#904' => [\n                '<img src=\"cid:DC117C9322DEB502C3B16769A8A64E08@example.test\">',\n                '<img src=\"cid:DC117C9322DEB502C3B16769A8A64E08@example.test\">',\n            ],\n            '#905' => [\n                '<a href=\"mid:D89CD33E-F9CF-4CA0-BCE3-AC89E5D41DE1@example.test/DC117C9322DEB502C3B16769A8A64E08@example.test\">see previous message</a>',\n                '<a href=\"mid:D89CD33E-F9CF-4CA0-BCE3-AC89E5D41DE1@example.test/DC117C9322DEB502C3B16769A8A64E08@example.test\">see previous message</a>',\n            ],\n            '#906' => [\n                '<center>value</center><strike>value</strike><nobr>value</nobr>',\n                '<center>value</center><strike>value</strike><nobr>value</nobr>',\n            ],\n            '#907' => [\n                '<script>alert(1)</script>'\n                . '<script type=\"application/javascript\">alert(2)</script>'\n                . '<script type=\"application/ecmascript\">alert(3)</script>',\n                '&lt;script&gt;alert(1)&lt;/script&gt;'\n                . '&lt;script type=\"application/javascript\"&gt;alert(2)&lt;/script&gt;'\n                . '&lt;script type=\"application/ecmascript\"&gt;alert(3)&lt;/script&gt;'\n            ],\n            '#908' => [\n                '<a href=\"xmpp:user@example.org?message\">value</a>',\n                '<a href=\"xmpp:user@example.org?message\">value</a>',\n            ],\n            '#909' => [\n                '<!-- #comment -->',\n                '<!-- #comment -->',\n            ],\n            '#910' => [\n                '<!-- <\"comment\"> -->',\n                '<!-- &lt;&quot;comment&quot;&gt; -->',\n            ],\n            '#911' => [\n                '<!-- &lt;&quot;comment&quot;&gt; -->',\n                '<!-- &lt;&quot;comment&quot;&gt; -->',\n            ],\n            '#915' => [\n                '#text',\n                '#text',\n            ],\n            '#920' => [\n                '<![CDATA[ #cdata ]]>',\n                '#cdata',\n            ],\n            '#921' => [\n                '<![CDATA[<any><span data-value=\"value\"></any>*/]]>',\n                '&lt;any&gt;&lt;span data-value=\"value\"&gt;&lt;/any&gt;*/',\n            ],\n            '#930' => [\n                '<br><any>value</any></br>',\n                '<br>&lt;any&gt;value&lt;/any&gt;<br>',\n            ],\n            '#931' => [\n                '<hr><any>value</any></hr>',\n                '<hr>&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#932' => [\n                '<wbr><any>value</any></wbr>',\n                '<wbr>&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#933' => [\n                '<source><any>value</any></source>',\n                '<source>&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#934' => [\n                '<img src=\"/typo3.org/logo.svg\"><any>value</any></img>',\n                '<img src=\"/typo3.org/logo.svg\">&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#935' => [\n                '<p class=\"</p><script>alert(1)\">value</p>',\n                '<p class=\"&lt;/p&gt;&lt;script&gt;alert(1)\">value</p>',\n            ],\n            '#936' => [\n                '<p class=\"{&quot;json&quot;:true}\">value</p>',\n                '<p class=\"{&quot;json&quot;:true}\">value</p>',\n            ],\n        ];\n    }\n\n    /**\n     * @param string $payload\n     * @param string $expectation\n     * @test\n     * @dataProvider isSanitizedDataProvider\n     */\n    public function isSanitized(string $payload, string $expectation): void\n    {\n        $builder = new CommonBuilder();\n        $sanitizer = $builder->build();\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Tests;\n\nuse DOMNode;\nuse DOMText;\nuse Masterminds\\HTML5\\Elements;\nuse PHPUnit\\Framework\\TestCase;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Attr\\UriAttrValueBuilder;\nuse TYPO3\\HtmlSanitizer\\Behavior\\NodeInterface;\nuse TYPO3\\HtmlSanitizer\\Sanitizer;\nuse TYPO3\\HtmlSanitizer\\Visitor\\CommonVisitor;\n\nclass ScenarioTest extends TestCase\n{\n    /**\n     * @test\n     */\n    public function missingBehaviorTriggersDeprecationError(): void\n    {\n        $this->markTestSkipped('see https://github.com/TYPO3/html-sanitizer/issues/99');\n\n        $this->expectDeprecation();\n        $this->expectDeprecationMessage(\n            'Add `Behavior` when creating new `Sanitizer` instances, e.g. `new Sanitizer($behavior, $visitor)`'\n        );\n        $behavior = new Behavior();\n        $visitor = new CommonVisitor($behavior);\n        new Sanitizer($visitor);\n    }\n\n    public static function allTagsAreRemovedOnMissingDeclarationDataProvider(): array\n    {\n        return [\n            ['<div class=\"content\">value</div><span class=\"content\">value</span>', ''],\n            ['<!--any--><div class=\"content\">value</div>', '<!--any-->'],\n            ['<!--any--!><div class=\"content\">value</div>', '<!--any-->'],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider allTagsAreRemovedOnMissingDeclarationDataProvider\n     */\n    public function allTagsAreRemovedOnMissingDeclaration(string $payload, string $expectation): void\n    {\n        $behavior = new Behavior();\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function tagFlagsAreProcessedDataProvider(): array\n    {\n        return [\n            [\n                Behavior\\Tag::ALLOW_CHILDREN | Behavior\\Tag::PURGE_WITHOUT_CHILDREN,\n                implode(\"\\n\", [\n                    '<div></div><div data-test=\"test\"></div>',\n                    '<div>test</div><div data-test=\"test\">test</div>',\n                    '<div><!-- --></div><div data-test=\"test\"><!-- --></div>',\n                    '<div><!-- test --></div><div data-test=\"test\"><!-- test --></div>',\n                    '<div><i></i></div><div data-test=\"test\"><i></i></div>',\n                ]),\n                implode(\"\\n\", [\n                    '',\n                    '<div>test</div><div data-test=\"test\">test</div>',\n                    '<div><!-- --></div><div data-test=\"test\"><!-- --></div>',\n                    '<div><!-- test --></div><div data-test=\"test\"><!-- test --></div>',\n                    '<div><i></i></div><div data-test=\"test\"><i></i></div>',\n                ]),\n            ],\n            [\n                Behavior\\Tag::ALLOW_CHILDREN | Behavior\\Tag::PURGE_WITHOUT_CHILDREN,\n                implode(\"\\n\", [\n                    '<script></script><script data-test=\"test\"></script>',\n                    '<script>test</script><script data-test=\"test\">test</script>',\n                    '<script><!-- --></script><script data-test=\"test\"><!-- --></script>',\n                    '<script><!-- test --></script><script data-test=\"test\"><!-- test --></script>',\n                ]),\n                implode(\"\\n\", [\n                    '',\n                    '<script>test</script><script data-test=\"test\">test</script>',\n                    '<script>&lt;!-- --&gt;</script><script data-test=\"test\">&lt;!-- --&gt;</script>',\n                    '<script>&lt;!-- test --&gt;</script><script data-test=\"test\">&lt;!-- test --&gt;</script>',\n                ]),\n            ],\n            [\n                Behavior\\Tag::ALLOW_CHILDREN | Behavior\\Tag::PURGE_WITHOUT_CHILDREN | Behavior\\Tag::ALLOW_INSECURE_RAW_TEXT,\n                implode(\"\\n\", [\n                    '<script></script><script data-test=\"test\"></script>',\n                    '<script>test</script><script data-test=\"test\">test</script>',\n                    '<script><!-- --></script><script data-test=\"test\"><!-- --></script>',\n                    '<script><!-- test --></script><script data-test=\"test\"><!-- test --></script>',\n                ]),\n                implode(\"\\n\", [\n                    '',\n                    '<script>test</script><script data-test=\"test\">test</script>',\n                    '<script><!-- --></script><script data-test=\"test\"><!-- --></script>',\n                    '<script><!-- test --></script><script data-test=\"test\"><!-- test --></script>',\n                ]),\n            ],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider tagFlagsAreProcessedDataProvider\n     */\n    public function tagFlagsAreProcessed(int $flags, string $payload, string $expectation): void\n    {\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withTags(\n                (new Behavior\\Tag('i')), // just used as DOM child element\n                (new Behavior\\Tag('div', $flags))->addAttrs((new Behavior\\Attr('data-test'))),\n                (new Behavior\\Tag('script', $flags))->addAttrs((new Behavior\\Attr('data-test')))\n            );\n\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function tagIsHandledDataProcessor(): array\n    {\n        $node = new Behavior\\Tag('div');\n        $asTextHandler = new Behavior\\Handler\\AsTextHandler();\n        $closureHandler = new Behavior\\Handler\\ClosureHandler(\n            static function (NodeInterface $node, ?DOMNode $domNode): ?\\DOMNode {\n                if ($domNode === null) {\n                    return null;\n                }\n                return new DOMText(sprintf('Handled <%s>', $domNode->nodeName));\n            }\n        );\n\n        return [\n            [\n                new Behavior\\NodeHandler(\n                    $node,\n                    $asTextHandler\n                ),\n                '<div invalid-attr=\"value\"><i>unexpected</i></div>',\n                '&lt;div invalid-attr=\"value\"&gt;&lt;i&gt;unexpected&lt;/i&gt;&lt;/div&gt;',\n            ],\n            [\n                new Behavior\\NodeHandler(\n                    $node,\n                    $asTextHandler,\n                    Behavior\\NodeHandler::PROCESS_DEFAULTS\n                ),\n                '<div invalid-attr=\"value\"><i>unexpected</i></div>',\n                '&lt;div&gt;&lt;/div&gt;',\n            ],\n            [\n                new Behavior\\NodeHandler(\n                    $node,\n                    $asTextHandler,\n                    Behavior\\NodeHandler::PROCESS_DEFAULTS | Behavior\\NodeHandler::HANDLE_FIRST\n                ),\n                '<div invalid-attr=\"value\"><i>unexpected</i></div>',\n                '&lt;div invalid-attr=\"value\"&gt;&lt;i&gt;unexpected&lt;/i&gt;&lt;/div&gt;',\n            ],\n            [\n                new Behavior\\NodeHandler(\n                    $node,\n                    $closureHandler\n                ),\n                '<div invalid-attr=\"value\"><i>unexpected</i></div>',\n                'Handled &lt;div&gt;',\n            ],\n            [\n                new Behavior\\NodeHandler(\n                    $node,\n                    $closureHandler,\n                    Behavior\\NodeHandler::PROCESS_DEFAULTS\n                ),\n                '<div invalid-attr=\"value\"><i>unexpected</i></div>',\n                'Handled &lt;div&gt;',\n            ],\n            [\n                new Behavior\\NodeHandler(\n                    $node,\n                    $closureHandler,\n                    Behavior\\NodeHandler::PROCESS_DEFAULTS | Behavior\\NodeHandler::HANDLE_FIRST\n                ),\n                '<div invalid-attr=\"value\"><i>unexpected</i></div>',\n                'Handled &lt;div&gt;',\n            ],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider tagIsHandledDataProcessor\n     */\n    public function tagIsHandled(Behavior\\NodeHandler $nodeHandler, string $payload, string $expectation): void\n    {\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withNodes($nodeHandler);\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function commentsAreHandledDataProvider(): array\n    {\n        return [\n            'not allowed' => [\n                false,\n                null,\n                Behavior::BLUNT,\n                '<div><!-- before -->test<!-- after --></div>',\n                '<div>test</div>'\n            ],\n            'allowed, insecure' => [\n                true,\n                false,\n                Behavior::BLUNT,\n                '<div><!-- before -->test<!-- after --></div>',\n                '<div><!-- before -->test<!-- after --></div>'\n            ],\n            'allowed, secure' => [\n                true,\n                true,\n                Behavior::BLUNT,\n                '<div><!-- before -->test<!-- after --></div>',\n                '<div><!-- before -->test<!-- after --></div>'\n            ],\n            'not allowed, encode invalid' => [\n                false,\n                null,\n                Behavior::ENCODE_INVALID_COMMENT,\n                '<div><!-- before -->test<!-- after --></div>',\n                '<div>&lt;!-- before --&gt;test&lt;!-- after --&gt;</div>',\n            ],\n            'allowed, insecure, encode invalid' => [\n                true,\n                false,\n                Behavior::ENCODE_INVALID_COMMENT,\n                '<div><!-- before -->test<!-- after --></div>',\n                '<div><!-- before -->test<!-- after --></div>'\n            ],\n            'allowed, secure, encode invalid' => [\n                true,\n                true,\n                Behavior::ENCODE_INVALID_COMMENT,\n                '<div><!-- before -->test<!-- after --></div>',\n                '<div><!-- before -->test<!-- after --></div>'\n            ],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider commentsAreHandledDataProvider\n     */\n    public function commentsAreHandled(bool $allowed, ?bool $secure, int $flags, string $payload, string $expectation): void\n    {\n        $behavior = (new Behavior())\n            ->withFlags($flags)\n            ->withName('scenario-test')\n            ->withTags(new Behavior\\Tag('div', Behavior\\Tag::ALLOW_CHILDREN));\n        $comment = new Behavior\\Comment($secure ?? true);\n        $behavior = $allowed ? $behavior->withNodes($comment) : $behavior->withoutNodes($comment);\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function cdataSectionsAreHandledDataProvider(): array\n    {\n        return [\n            'not allowed' => [\n                false,\n                null,\n                Behavior::BLUNT,\n                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>',\n                '<div>.test.</div>'\n            ],\n            'allowed, insecure' => [\n                true,\n                false,\n                Behavior::BLUNT,\n                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>',\n                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>'\n            ],\n            'allowed, secure' => [\n                true,\n                true,\n                Behavior::BLUNT,\n                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>',\n                '<div>before.test.after</div>'\n            ],\n            'not allowed, encode invalid' => [\n                false,\n                null,\n                Behavior::ENCODE_INVALID_CDATA_SECTION,\n                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>',\n                '<div>&lt;![CDATA[ before ]]&gt;.test.&lt;![CDATA[ after ]]&gt;</div>',\n            ],\n            'allowed, insecure, encode invalid' => [\n                true,\n                false,\n                Behavior::ENCODE_INVALID_CDATA_SECTION,\n                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>',\n                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>'\n            ],\n            'allowed, secure, encode invalid' => [\n                true,\n                true,\n                Behavior::ENCODE_INVALID_CDATA_SECTION,\n                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>',\n                '<div>before.test.after</div>'\n            ],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider cdataSectionsAreHandledDataProvider\n     */\n    public function cdataSectionsAreHandled(bool $allowed, ?bool $secure, int $flags, string $payload, string $expectation): void\n    {\n        $behavior = (new Behavior())\n            ->withFlags($flags)\n            ->withName('scenario-test')\n            ->withTags(new Behavior\\Tag('div', Behavior\\Tag::ALLOW_CHILDREN));\n        $cdataSection = new Behavior\\CdataSection($secure ?? true);\n        $behavior = $allowed ? $behavior->withNodes($cdataSection) : $behavior->withoutNodes($cdataSection);\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function rawTextElementsAreHandledDataProvider(): \\Generator\n    {\n        foreach (Elements::$html5 as $name => $flags) {\n            if (($flags & Elements::TEXT_RAW) !== Elements::TEXT_RAW) {\n                continue;\n            }\n            yield $name => [\n                sprintf('<%1$s><any>value</any></%1$s>', $name),\n                sprintf('<%1$s>&lt;any&gt;value&lt;/any&gt;</%1$s>', $name),\n            ];\n        };\n    }\n\n    /**\n     * @test\n     * @dataProvider rawTextElementsAreHandledDataProvider\n     */\n    public function rawTextElementsAreHandled(string $payload, string $expectation): void\n    {\n        $elements = array_filter(\n            Elements::$html5,\n            static function (int $flags) {\n                return ($flags & Elements::TEXT_RAW) === Elements::TEXT_RAW;\n            }\n        );\n        $behavior = (new Behavior())\n            ->withName('scenario-test')\n            ->withTags(...array_map(\n                static function (string $name) {\n                    return new Behavior\\Tag($name, Behavior\\Tag::ALLOW_CHILDREN);\n                },\n                array_keys($elements)\n            ));\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    /**\n     * @test\n     */\n    public function isJsonLdScriptAllowed(): void\n    {\n        $payload = implode(\"\\n\" , [\n            // tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '1:<script>alert(1)</script>',\n            // `type` attr will be removed -> no attrs -> tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '2:<script type>alert(2)</script>',\n            // `type` attr will be removed -> no attrs -> tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '3:<script type=\"application/javascript\">alert(2)</script>',\n            // `type` attr will be removed -> no attrs -> tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '4:<script type=\"application/ecmascript\">alert(3)</script>',\n            // tag will be encoded due to incompleteness, mandatory `type` attr is missing\n            '5:<script id=\"identifier\">alert(1)</script>',\n            // tag will be encoded due to incompleteness, mandatory `type` attr mismatches\n            '6:<script id=\"identifier\" type=\"application/javascript\">alert(2)</script>',\n            // tag will be removed due to `PURGE_WITHOUT_CHILDREN`\n            '7:<script type=\"application/ld+json\"></script>',\n            // rest is keep, since `type` attr value matches and child content is given\n            '8:<script type=\"application/ld+json\">alert(4)</script>',\n            '9:<script type=\"application/ld+json\">{\"@id\": \"https://github.com/TYPO3/html-sanitizer\"}</script>',\n            '10:<script type=\"application/ld+json\">{{\"@type\":\"Answer\",\"text\":\"Usually the answer is <b>42</b>.\"}</script>',\n        ]);\n        $expectation = implode(\"\\n\" , [\n            '1:',\n            '2:',\n            '3:',\n            '4:',\n            '5:&lt;script id=\"identifier\"&gt;alert(1)&lt;/script&gt;',\n            '6:&lt;script id=\"identifier\"&gt;alert(2)&lt;/script&gt;',\n            '7:',\n            '8:<script type=\"application/ld+json\">alert(4)</script>',\n            '9:<script type=\"application/ld+json\">{\"@id\": \"https://github.com/TYPO3/html-sanitizer\"}</script>',\n            '10:<script type=\"application/ld+json\">{{\"@type\":\"Answer\",\"text\":\"Usually the answer is <b>42</b>.\"}</script>',\n        ]);\n\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withTags(\n                (new Behavior\\Tag(\n                    'script',\n                    Behavior\\Tag::PURGE_WITHOUT_ATTRS | Behavior\\Tag::PURGE_WITHOUT_CHILDREN\n                        | Behavior\\Tag::ALLOW_CHILDREN | Behavior\\Tag::ALLOW_INSECURE_RAW_TEXT\n                ))->addAttrs(\n                    (new Behavior\\Attr('id')),\n                    (new Behavior\\Attr('type', Behavior\\Attr::MANDATORY))\n                        ->addValues(new Behavior\\DatasetAttrValue('application/ld+json'))\n                )\n            );\n\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    /**\n     * @test\n     */\n    public function iframeSandboxIsAllowed(): void\n    {\n        $payload = implode(\"\\n\" , [\n            '1:<iframe src=\"https://example.org/\"></iframe>',\n            '2:<iframe src=\"https://example.org/\" sandbox></iframe>',\n            '3:<iframe src=\"https://example.org/\" sandbox=\"\"></iframe>',\n            // `sandbox` will be removed, since token is not valid\n            '4:<iframe src=\"https://example.org/\" sandbox=\"allow-non-existing-property\"></iframe>',\n            '5:<iframe src=\"https://example.org/\" allow=\"fullscreen\" sandbox=\"allow-downloads allow-modals\"></iframe>',\n            '6:<iframe src=\"https://example.org/\" sandbox=\"allow-downloads allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-scripts\"></iframe>',\n        ]);\n        $expectation = implode(\"\\n\" , [\n            '1:&lt;iframe src=\"https://example.org/\"&gt;&lt;/iframe&gt;',\n            '2:<iframe src=\"https://example.org/\" sandbox></iframe>',\n            '3:<iframe src=\"https://example.org/\" sandbox></iframe>',\n            '4:&lt;iframe src=\"https://example.org/\"&gt;&lt;/iframe&gt;',\n            '5:<iframe src=\"https://example.org/\" allow=\"fullscreen\" sandbox=\"allow-downloads allow-modals\"></iframe>',\n            '6:<iframe src=\"https://example.org/\" sandbox=\"allow-downloads allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-scripts\"></iframe>',\n        ]);\n\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withTags(\n                (new Behavior\\Tag('iframe'))->addAttrs(\n                    (new Behavior\\Attr('id')),\n                    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allow\n                    (new Behavior\\Attr('allow'))->withValues(\n                        new Behavior\\MultiTokenAttrValue(' ', 'fullscreen')\n                    ),\n                    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox\n                    (new Behavior\\Attr('sandbox', Behavior\\Attr::MANDATORY))->withValues(\n                        new Behavior\\EmptyAttrValue(),\n                        new Behavior\\MultiTokenAttrValue(\n                            ' ',\n                            'allow-downloads',\n                            'allow-modals',\n                            'allow-orientation-lock',\n                            'allow-pointer-lock',\n                            'allow-popups',\n                            'allow-scripts'\n                        )\n                    ),\n                    (new Behavior\\Attr('src'))->withValues(\n                        ...(new UriAttrValueBuilder())->allowSchemes('http', 'https')->getValues()\n                    )\n                )\n            );\n\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function attributesAreEncodedDataProvider(): \\Generator\n    {\n        yield 'preserve entities' => [\n\t        '<a title=\"Insert &amp;\"></a>',\n\t        '<a title=\"Insert &amp;\"></a>',\n        ];\n        yield 'encode single quotes' => [\n\t        '<a title=\"\\'\"></a>',\n\t        '<a title=\"&apos;\"></a>',\n        ];\n        yield 'encode single quotes from entity' => [\n\t        '<a title=\"&#039;\"></a>',\n\t        '<a title=\"&apos;\"></a>',\n        ];\n        yield 'encode double quotes' => [\n\t        \"<a title='\" . '\"' . \"'></a>\",\n\t        '<a title=\"&quot;\"></a>',\n        ];\n        yield 'preserve double quote encoding' => [\n\t        '<a title=\"&quot;\"></a>',\n\t        '<a title=\"&quot;\"></a>',\n        ];\n        yield 'preserve double encoded entities' => [\n\t        '<a title=\"Insert &amp;amp; to write an &amp;\"></a>',\n\t        '<a title=\"Insert &amp;amp; to write an &amp;\"></a>',\n        ];\n        yield 'preserve URLs without \"agressive\" entity encoding' => [\n\t        '<a title=\"https://example.com/\"></a>',\n\t        '<a title=\"https://example.com/\"></a>',\n        ];\n        yield 'encode tag specifiers' => [\n            '<a id=\"</noscript><script>alert(1)</script>\"></a>',\n            '<a id=\"&lt;/noscript&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"></a>',\n        ];\n        // Invalid input seems to be removed during parsing step (where?)\n        // therefore ENT_SUBSTITUTE can not operate during serialization\n        // @todo: check masterminds/html5-php whether that behavior is\n        // intended\n        //yield 'substitute invalid unicode in attributes' => [\n        //    \"<a title='Hello \\x80, Good morning'></a>\",\n        //    \"<a title='Hello \\xEF\\xBF\\xBD, Good morning'></a>\",\n        //];\n        yield 'escape non breaking space' => [\n            \"<a title='Hello\\xc2\\xa0World'></a>\",\n            '<a title=\"Hello&nbsp;World\"></a>',\n        ];\n        yield 'encodes json values' => [\n            \"<div data-value='{\\\"Hello\\\":[{\\\"w\\\":\\\"o\\\",\\\"r\\\":\\\"ld\\\"}]}'></a>\",\n            '<div data-value=\"{&quot;Hello&quot;:[{&quot;w&quot;:&quot;o&quot;,&quot;r&quot;:&quot;ld&quot;}]}\"></div>'\n        ];\n        yield 'encodes json values containing html' => [\n            \"<div data-value='{\\\"Hello\\\":\\\"&lt;span&gt;World&lt;\\/span&gt;\\\"}'></div>\",\n            '<div data-value=\"{&quot;Hello&quot;:&quot;&lt;span&gt;World&lt;\\/span&gt;&quot;}\"></div>'\n        ];\n\n    }\n\n    /**\n     * @test\n     * @dataProvider attributesAreEncodedDataProvider\n     */\n    public function attributesAreEncoded(string $payload, string $expectation): void\n    {\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withTags(\n                (new Behavior\\Tag('a', Behavior\\Tag::ALLOW_CHILDREN))->addAttrs(\n                    new Behavior\\Attr('id'),\n                    new Behavior\\Attr('title')\n                ),\n                (new Behavior\\Tag('div', Behavior\\Tag::ALLOW_CHILDREN))->addAttrs(\n                    new Behavior\\Attr('data-value')\n                )\n            );\n\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function specialTagsAreHandledDataProvider(): \\Generator\n    {\n        yield 'noscript attribute' => [\n            '<noscript><p id=\"</noscript><script>alert(1)</script>\"></p>',\n            '<noscript><p id=\"&lt;/noscript&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"></p></noscript>',\n        ];\n        yield 'noscript namespaced attribute' => [\n            '<noscript><p test:id=\"</noscript><script>alert(1)</script>\"></p>',\n            '<noscript><p test:id=\"&lt;/noscript&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"></p></noscript>',\n        ];\n        yield 'noscript comment' => [\n            '<noscript><!--</noscript><script>alert(2)</script>--></noscript>',\n            '<noscript><!--&lt;/noscript&gt;&lt;script&gt;alert(2)&lt;/script&gt;--></noscript>',\n        ];\n        yield 'noscript raw text' => [\n            '<noscript><style></noscript><script>alert(3)</script>',\n            '<noscript><style>&lt;/noscript&gt;&lt;script&gt;alert(3)&lt;/script&gt;</style></noscript>',\n        ];\n        yield 'noscript event attribute' => [\n            '<noscript><p onmouseover=\"alert(4)\">value</p></noscript>',\n            '<noscript><p>value</p></noscript>',\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider specialTagsAreHandledDataProvider\n     */\n    public function specialTagsAreHandled(string $payload, string $expectation): void\n    {\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withTags(\n                (new Behavior\\Tag('style', Behavior\\Tag::ALLOW_CHILDREN)),\n                (new Behavior\\Tag('noscript', Behavior\\Tag::ALLOW_CHILDREN)),\n                (new Behavior\\Tag('p', Behavior\\Tag::ALLOW_CHILDREN))->addAttrs(\n                    new Behavior\\Attr('id'),\n                    new Behavior\\Attr('test:id')\n                )\n            );\n\n        $sanitizer = new Sanitizer(\n            $behavior,\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n}\n"], "filenames": ["src/Behavior.php", "src/Behavior/CdataSection.php", "src/Behavior/Comment.php", "src/Builder/CommonBuilder.php", "src/Sanitizer.php", "src/Serializer/Rules.php", "src/Visitor/CommonVisitor.php", "tests/BehaviorTest.php", "tests/CommonBuilderTest.php", "tests/ScenarioTest.php"], "buggy_code_start_loc": [17, 16, 16, 17, 43, 48, 88, 27, 258, 233], "buggy_code_end_loc": [267, 25, 25, 232, 43, 160, 88, 28, 288, 484], "fixing_code_start_loc": [18, 17, 17, 16, 44, 49, 89, 26, 259, 234], "fixing_code_end_loc": [254, 49, 49, 210, 45, 193, 92, 26, 305, 653], "type": "CWE-79", "message": "TYPO3 HTML Sanitizer is an HTML sanitizer, written in PHP, aiming to provide cross-site-scripting-safe markup based on explicitly allowed tags, attributes and values. Starting in version 1.0.0 and prior to versions 1.5.1 and 2.1.2, due to an encoding issue in the serialization layer, malicious markup nested in a `noscript` element was not encoded correctly. `noscript` is disabled in the default configuration, but might have been enabled in custom scenarios. This allows bypassing the cross-site scripting mechanism of TYPO3 HTML Sanitizer. Versions 1.5.1 and 2.1.2 fix the problem.", "other": {"cve": {"id": "CVE-2023-38500", "sourceIdentifier": "security-advisories@github.com", "published": "2023-07-25T21:15:11.083", "lastModified": "2023-08-02T19:14:48.317", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TYPO3 HTML Sanitizer is an HTML sanitizer, written in PHP, aiming to provide cross-site-scripting-safe markup based on explicitly allowed tags, attributes and values. Starting in version 1.0.0 and prior to versions 1.5.1 and 2.1.2, due to an encoding issue in the serialization layer, malicious markup nested in a `noscript` element was not encoded correctly. `noscript` is disabled in the default configuration, but might have been enabled in custom scenarios. This allows bypassing the cross-site scripting mechanism of TYPO3 HTML Sanitizer. Versions 1.5.1 and 2.1.2 fix the problem."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 2.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:typo3:html_sanitizer:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0.0", "versionEndExcluding": "1.5.1", "matchCriteriaId": "694BBC2E-09A9-4001-8B3E-DCDEEDDCA867"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:html_sanitizer:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.1.2", "matchCriteriaId": "75A963C2-ABB8-4AFC-A699-D47FEA291B67"}]}]}], "references": [{"url": "https://github.com/TYPO3/html-sanitizer/commit/e3026f589fef0be8c3574ee3f0a0bfbe33d7ebdb", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/TYPO3/html-sanitizer/security/advisories/GHSA-59jf-3q9v-rh6g", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://typo3.org/security/advisory/typo3-core-sa-2023-002", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/TYPO3/html-sanitizer/commit/e3026f589fef0be8c3574ee3f0a0bfbe33d7ebdb"}}