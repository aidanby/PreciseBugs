{"buggy_code": ["# -----------------------------------------------------------------------------\n#  Copyright (c) Jupyter Development Team\n#\n#  Distributed under the terms of the BSD License.  The full license is in\n#  the file COPYING, distributed as part of this software.\n# -----------------------------------------------------------------------------\nimport json\n\nfrom tornado.log import access_log\n\nfrom .prometheus.log_functions import prometheus_log_method\n\n\ndef log_request(handler):\n    \"\"\"log a bit more information about each request than tornado's default\n\n    - move static file get success to debug-level (reduces noise)\n    - get proxied IP instead of proxy IP\n    - log referer for redirect and failed requests\n    - log user-agent for failed requests\n    \"\"\"\n    status = handler.get_status()\n    request = handler.request\n    try:\n        logger = handler.log\n    except AttributeError:\n        logger = access_log\n\n    if status < 300 or status == 304:\n        # Successes (or 304 FOUND) are debug-level\n        log_method = logger.debug\n    elif status < 400:\n        log_method = logger.info\n    elif status < 500:\n        log_method = logger.warning\n    else:\n        log_method = logger.error\n\n    request_time = 1000.0 * handler.request.request_time()\n    ns = dict(\n        status=status,\n        method=request.method,\n        ip=request.remote_ip,\n        uri=request.uri,\n        request_time=request_time,\n    )\n    msg = \"{status} {method} {uri} ({ip}) {request_time:.2f}ms\"\n    if status >= 400:\n        # log bad referers\n        ns[\"referer\"] = request.headers.get(\"Referer\", \"None\")\n        msg = msg + \" referer={referer}\"\n    if status >= 500 and status != 502:\n        # log all headers if it caused an error\n        log_method(json.dumps(dict(request.headers), indent=2))\n    log_method(msg.format(**ns))\n    prometheus_log_method(handler)\n"], "fixing_code": ["# -----------------------------------------------------------------------------\n#  Copyright (c) Jupyter Development Team\n#\n#  Distributed under the terms of the BSD License.  The full license is in\n#  the file COPYING, distributed as part of this software.\n# -----------------------------------------------------------------------------\nimport json\n\nfrom tornado.log import access_log\n\nfrom .prometheus.log_functions import prometheus_log_method\n\n\ndef log_request(handler):\n    \"\"\"log a bit more information about each request than tornado's default\n\n    - move static file get success to debug-level (reduces noise)\n    - get proxied IP instead of proxy IP\n    - log referer for redirect and failed requests\n    - log user-agent for failed requests\n    \"\"\"\n    status = handler.get_status()\n    request = handler.request\n    try:\n        logger = handler.log\n    except AttributeError:\n        logger = access_log\n\n    if status < 300 or status == 304:\n        # Successes (or 304 FOUND) are debug-level\n        log_method = logger.debug\n    elif status < 400:\n        log_method = logger.info\n    elif status < 500:\n        log_method = logger.warning\n    else:\n        log_method = logger.error\n\n    request_time = 1000.0 * handler.request.request_time()\n    ns = dict(\n        status=status,\n        method=request.method,\n        ip=request.remote_ip,\n        uri=request.uri,\n        request_time=request_time,\n    )\n    msg = \"{status} {method} {uri} ({ip}) {request_time:.2f}ms\"\n    if status >= 400:\n        # log bad referers\n        ns[\"referer\"] = request.headers.get(\"Referer\", \"None\")\n        msg = msg + \" referer={referer}\"\n    if status >= 500 and status != 502:\n        # Log a subset of the headers if it caused an error.\n        headers = {}\n        for header in ['Host', 'Accept', 'Referer', 'User-Agent']:\n            if header in request.headers:\n                headers[header] = request.headers[header]\n        log_method(json.dumps(headers, indent=2))\n    log_method(msg.format(**ns))\n    prometheus_log_method(handler)\n"], "filenames": ["jupyter_server/log.py"], "buggy_code_start_loc": [53], "buggy_code_end_loc": [55], "fixing_code_start_loc": [53], "fixing_code_end_loc": [59], "type": "CWE-532", "message": "The Jupyter Server provides the backend (i.e. the core services, APIs, and REST endpoints) for Jupyter web applications. Prior to version 1.15.4, unauthorized actors can access sensitive information from server logs. Anytime a 5xx error is triggered, the auth cookie and other header values are recorded in Jupyter Server logs by default. Considering these logs do not require root access, an attacker can monitor these logs, steal sensitive auth/cookie information, and gain access to the Jupyter server. Jupyter Server version 1.15.4 contains a patch for this issue. There are currently no known workarounds.", "other": {"cve": {"id": "CVE-2022-24757", "sourceIdentifier": "security-advisories@github.com", "published": "2022-03-23T21:15:08.143", "lastModified": "2022-04-04T20:46:19.313", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The Jupyter Server provides the backend (i.e. the core services, APIs, and REST endpoints) for Jupyter web applications. Prior to version 1.15.4, unauthorized actors can access sensitive information from server logs. Anytime a 5xx error is triggered, the auth cookie and other header values are recorded in Jupyter Server logs by default. Considering these logs do not require root access, an attacker can monitor these logs, steal sensitive auth/cookie information, and gain access to the Jupyter server. Jupyter Server version 1.15.4 contains a patch for this issue. There are currently no known workarounds."}, {"lang": "es", "value": "Jupyter Server proporciona el backend (es decir, los servicios centrales, las API y los endpoints REST) para las aplicaciones web Jupyter. En versiones anteriores a 1.15.4, actores no autorizados pueden acceder a informaci\u00f3n confidencial desde los registros del servidor. Cada vez que sea producido un error 5xx, la cookie de autenticidad y otros valores del encabezado son registrados en los registros del servidor Jupyter por defecto. Teniendo en cuenta que estos registros no requieren acceso root, un atacante puede monitorear estos registros, robar informaci\u00f3n confidencial de auth/cookie, y conseguir acceso a Jupyter Server. Jupyter Server versi\u00f3n 1.15.4, contiene un parche para este problema. Actualmente no son conocidas medidas de mitigaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-532"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jupyter:jupyter_server:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.15.4", "matchCriteriaId": "7D9A0726-07BF-4358-9900-837C03C7D733"}]}]}], "references": [{"url": "https://github.com/jupyter-server/jupyter_server/commit/a5683aca0b0e412672ac6218d09f74d44ca0de5a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jupyter-server/jupyter_server/security/advisories/GHSA-p737-p57g-4cpr", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jupyter-server/jupyter_server/commit/a5683aca0b0e412672ac6218d09f74d44ca0de5a"}}