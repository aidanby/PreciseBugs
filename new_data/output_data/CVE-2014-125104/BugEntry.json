{"buggy_code": ["<?php\n\nclass VaultPress_Hotfixes {\n\tfunction __construct() {\n\t\tglobal $wp_version;\n\n\t\tif ( version_compare( $wp_version, '3.0.2', '<' ) )\n\t\t\tadd_filter( 'query', array( $this, 'r16625' ) );\n\n\t\tif ( defined( 'XMLRPC_REQUEST' ) && XMLRPC_REQUEST && version_compare( $wp_version, '3.0.3', '<' ) )\n\t\t\tadd_action( 'xmlrpc_call', array( $this, 'r16803' ) );\n\n\t\tif ( version_compare( $wp_version, '3.3.2', '<' ) ) {\n\t\t\tadd_filter( 'pre_kses', array( $this, 'r17172_wp_kses' ), 1, 3 );\n\t\t\tadd_filter( 'clean_url', array( $this, 'r17172_esc_url' ), 1, 3 );\n\t\t}\n\n\t\tif ( version_compare( $wp_version, '3.1.3', '<' ) ) {\n\t\t\tadd_filter( 'sanitize_file_name', array( $this, 'r17990' ) );\n\n\t\t\tif ( !empty( $_POST ) )\n\t\t\t\t$this->r17994( $_POST );\n\t\t\t// Protect add_meta, update_meta used by the XML-RPC API\n\t\t\tadd_filter( 'wp_xmlrpc_server_class', create_function( '$class', 'return \\'VaultPress_XMLRPC_Server_r17994\\';' ) );\n\n\t\t\t// clean post_mime_type and guid (r17994)\n\t\t\tadd_filter( 'pre_post_mime_type', array( $this, 'r17994_sanitize_mime_type' ) );\n\t\t\tadd_filter( 'post_mime_type', array( $this, 'r17994_sanitize_mime_type' ) );\n\t\t\tadd_filter( 'pre_post_guid', 'esc_url_raw' );\n\t\t\tadd_filter( 'post_guid', 'esc_url' );\n\t\t}\n\n\t\tif ( version_compare( $wp_version, '3.1.4', '<' ) ) {\n\t\t\tadd_filter( 'wp_insert_post_data', array( $this, 'r18368' ), 1, 2 );\n\n\t\t\t// Add click jacking protection\n\t\t\t// login_init does not exist before 17826.\n\t\t\t$action = isset( $_REQUEST['action'] ) ? $_REQUEST['action'] : 'login';\n\t\t\tadd_action( 'login_form_' . $action, array( $this, 'r17826_send_frame_options_header' ), 10, 0 );\n\t\t\tadd_action( 'admin_init', array( $this, 'r17826_send_frame_options_header' ), 10, 0 );\n\n\t\t\tadd_filter( 'sanitize_option_WPLANG', array( $this, 'r18346_sanitize_lang_on_save' ) );\n\t\t\tadd_filter( 'sanitize_option_new_admin_email', array( $this, 'r18346_sanitize_admin_email_on_save' ) );\n\t\t}\n\t\tadd_filter( 'option_new_admin_email', array( $this, 'r18346_sanitize_admin_email' ) );\n\n\t\tif ( version_compare( $wp_version, '3.3.2', '<' ) ) {\n\t\t\tremove_filter( 'comment_text', 'make_clickable' );\n\t\t\tadd_filter( 'comment_text', array( $this, 'r20493_make_clickable' ), 9 );\n\n\t\t\tadd_filter( 'comment_post_redirect', array( $this, 'r20486_comment_post_redirect' ) );\n\t\t}\n\n\t\t// WooThemes < 3.8.3, foxypress, asset-manager, wordpress-member-private-conversation.\n\t\t$end_execution = false;\n\t\tif ( isset( $_SERVER['SCRIPT_FILENAME'] ) )\n\t\t\tforeach ( array( 'preview-shortcode-external.php', 'uploadify.php', 'doupload.php', 'cef-upload.php', 'upload.php' ) as $vulnerable_script )\n\t\t\t\tif ( $vulnerable_script == basename( $_SERVER['SCRIPT_FILENAME'] ) ) {\n\t\t\t\t\tswitch( $vulnerable_script ) {\n\t\t\t\t\t\tcase 'upload.php':\n\t\t\t\t\t\t\t$pma_config_file = realpath( dirname( $_SERVER['SCRIPT_FILENAME'] ) . DIRECTORY_SEPARATOR . 'paam-config-ajax.php' );\n\t\t\t\t\t\t\tif ( !in_array( $pma_config_file, get_included_files() ) )\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$end_execution = true;\n\t\t\t\t\t\t\tbreak 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\tif ( $end_execution )\n\t\t\tdie( 'Disabled for security reasons' );\n\n\t\tif ( version_compare(  $wp_version, '3.3.2', '>') && version_compare( $wp_version, '3.4.1', '<' ) ) {\n\t\t\tadd_filter( 'map_meta_cap', array( $this, 'r21138_xmlrpc_edit_posts' ), 10, 4 );\n\t\t\tadd_action( 'map_meta_cap', array( $this, 'r21152_unfiltered_html' ), 10, 4 );\n\t\t}\n\n\t\t// https://core.trac.wordpress.org/changeset/21083\n\t\tif ( version_compare( $wp_version, '3.3', '>=') && version_compare( $wp_version, '3.3.3', '<' ) )\n\t\t\tadd_filter( 'editable_slug', 'esc_textarea' ); \n\n\t\tadd_filter( 'get_pagenum_link', array( $this, 'get_pagenum_link' ) );\n\n\t\tadd_filter( 'jetpack_xmlrpc_methods', array( $this, 'disable_jetpack_xmlrpc_methods_293' ), 20, 3 );\n\t\tadd_filter( 'xmlrpc_methods', array( $this, 'disable_xmlrpc_methods_293' ), 20 );\n\n\t\t// Protect All-in-one SEO from non-authorized users making changes, and script injection attacks.          \n\t\tadd_action( 'wp_ajax_aioseop_ajax_save_meta', array( $this, 'protect_aioseo_ajax' ), 1 );\n\t}\n\n\tfunction disable_jetpack_xmlrpc_methods_293( $jetpack_methods, $core_methods, $user = false ) {\n\t\tif ( $this->needs_jetpack_293_fix() && !$user )\n\t\t\tunset( $jetpack_methods['jetpack.jsonAPI'], $jetpack_methods['jetpack.verifyAction'] );\n\t\treturn $jetpack_methods;\n\t}\n\n\tfunction disable_xmlrpc_methods_293( $core_methods ) {\n\t\tif ( $this->needs_jetpack_293_fix() )\n\t\t\tunset( $core_methods['jetpack.verifyAction'] );\n\t\treturn $core_methods;\n\t}\n\n\tfunction needs_jetpack_293_fix() {\n\t\tif ( ! defined( 'JETPACK__VERSION' ) )\n\t\t\treturn false;\n\t\t$secure_jetpacks = array(\n\t\t\t'1.9' => '1.9.3',\n\t\t\t'2.0' => '2.0.5',\n\t\t\t'2.1' => '2.1.3',\n\t\t\t'2.2' => '2.2.6',\n\t\t\t'2.3' => '2.3.6',\n\t\t\t'2.4' => '2.4.3',\n\t\t\t'2.5' => '2.5.1',\n\t\t\t'2.6' => '2.6.2',\n\t\t\t'2.7' => '2.7.1',\n\t\t\t'2.8' => '2.8.1',\n\t\t\t'2.9' => '2.9.3',\n\t\t);\n\t\t$float_version = (string) floatval( JETPACK__VERSION );\n\t\tif ( ! isset( $secure_jetpacks[ $float_version ] ) )\n\t\t\treturn false;\n\t\treturn version_compare( JETPACK__VERSION, $secure_jetpacks[ $float_version ], '<' );\n\t}\n\n\tfunction r21138_xmlrpc_edit_posts( $caps, $cap, $user_id, $args ) {\n\t\tif ( ! isset( $args[0] ) || isset( $args[1] ) && $args[1] === 'hotfixed' )\n\t\t\treturn $caps;\n\t\tforeach ( get_post_types( array(), 'objects' ) as $post_type_object ) {\n\t\t\tif ( $cap === $post_type_object->cap->edit_posts )\n\t\t\t\treturn map_meta_cap( $post_type_object->cap->edit_post, $user_id, $args[0], 'hotfixed' );\n\t\t}\n\t\treturn $caps;\n\t}\n\n\tfunction r21152_unfiltered_html( $caps, $cap, $user_id, $args ) {\n\t\tif ( $cap !== 'unfiltered_html' )\n\t\t\treturn $caps;\n\t\tif ( defined( 'DISALLOW_UNFILTERED_HTML' ) && DISALLOW_UNFILTERED_HTML )\n\t\t\treturn $caps;\n\t\t$key = array_search( 'do_not_allow', $caps );\n\t\tif ( false !== $key )\n\t\t\treturn $caps;\n\t\tif ( is_multisite() && ! is_super_admin( $user_id ) )\n\t\t\t$caps[$key] = 'do_not_allow';\n\t\treturn $caps;\n\t}\n\n\tfunction get_pagenum_link( $url ) {\n\t\treturn esc_url_raw( $url );\n\t}\n\n\tfunction r20486_comment_post_redirect( $location ) {\n\t\t$location = wp_sanitize_redirect( $location );\n\t\t$location = wp_validate_redirect( $location, admin_url() );\n\n\t\treturn $location;\n\t}\n\n\tfunction r20493_make_clickable( $text ) {\n\t\t$r = '';\n\t\t$textarr = preg_split( '/(<[^<>]+>)/', $text, -1, PREG_SPLIT_DELIM_CAPTURE ); // split out HTML tags\n\t\tforeach ( $textarr as $piece ) {\n\t\t\tif ( empty( $piece ) || ( $piece[0] == '<' && ! preg_match('|^<\\s*[\\w]{1,20}+://|', $piece) ) ) {\n\t\t\t\t$r .= $piece;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Long strings might contain expensive edge cases ...\n\t\t\tif ( 10000 < strlen( $piece ) ) {\n\t\t\t\t// ... break it up\n\t\t\t\tforeach ( $this->r20493_split_str_by_whitespace( $piece, 2100 ) as $chunk ) { // 2100: Extra room for scheme and leading and trailing paretheses\n\t\t\t\t\tif ( 2101 < strlen( $chunk ) ) {\n\t\t\t\t\t\t$r .= $chunk; // Too big, no whitespace: bail.\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$r .= $this->r20493_make_clickable( $chunk );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$ret = \" $piece \"; // Pad with whitespace to simplify the regexes\n\n\t\t\t\t$url_clickable = '~\n\t\t\t\t\t([\\\\s(<.,;:!?])                                        # 1: Leading whitespace, or punctuation\n\t\t\t\t\t(                                                      # 2: URL\n\t\t\t\t\t\t[\\\\w]{1,20}+://                                # Scheme and hier-part prefix\n\t\t\t\t\t\t(?=\\S{1,2000}\\s)                               # Limit to URLs less than about 2000 characters long\n\t\t\t\t\t\t[\\\\w\\\\x80-\\\\xff#%\\\\~/@\\\\[\\\\]*(+=&$-]*+         # Non-punctuation URL character\n\t\t\t\t\t\t(?:                                            # Unroll the Loop: Only allow puctuation URL character if followed by a non-punctuation URL character\n\t\t\t\t\t\t\t[\\'.,;:!?)]                            # Punctuation URL character\n\t\t\t\t\t\t\t[\\\\w\\\\x80-\\\\xff#%\\\\~/@\\\\[\\\\]*(+=&$-]++ # Non-punctuation URL character\n\t\t\t\t\t\t)*\n\t\t\t\t\t)\n\t\t\t\t\t(\\)?)                                                  # 3: Trailing closing parenthesis (for parethesis balancing post processing)\n\t\t\t\t~xS'; // The regex is a non-anchored pattern and does not have a single fixed starting character.\n\t\t\t\t      // Tell PCRE to spend more time optimizing since, when used on a page load, it will probably be used several times.\n\n\t\t\t\t$ret = preg_replace_callback( $url_clickable, array( $this, 'r20493_make_url_clickable_cb') , $ret );\n\n\t\t\t\t$ret = preg_replace_callback( '#([\\s>])((www|ftp)\\.[\\w\\\\x80-\\\\xff\\#$%&~/.\\-;:=,?@\\[\\]+]+)#is', '_make_web_ftp_clickable_cb', $ret );\n\t\t\t\t$ret = preg_replace_callback( '#([\\s>])([.0-9a-z_+-]+)@(([0-9a-z-]+\\.)+[0-9a-z]{2,})#i', '_make_email_clickable_cb', $ret );\n\n\t\t\t\t$ret = substr( $ret, 1, -1 ); // Remove our whitespace padding.\n\t\t\t\t$r .= $ret;\n\t\t\t}\n\t\t}\n\n\t\t// Cleanup of accidental links within links\n\t\t$r = preg_replace( '#(<a( [^>]+?>|>))<a [^>]+?>([^>]+?)</a></a>#i', \"$1$3</a>\", $r );\n\t\treturn $r;\n\t}\n\n\tfunction r20493_make_url_clickable_cb($matches) {\n\t\t$url = $matches[2];\n\n\t\tif ( ')' == $matches[3] && strpos( $url, '(' ) ) {\n\t\t\t// If the trailing character is a closing parethesis, and the URL has an opening parenthesis in it, add the closing parenthesis to the URL.\n\t\t\t// Then we can let the parenthesis balancer do its thing below.\n\t\t\t$url .= $matches[3];\n\t\t\t$suffix = '';\n\t\t} else {\n\t\t\t$suffix = $matches[3];\n\t\t}\n\n\t\t// Include parentheses in the URL only if paired\n\t\twhile ( substr_count( $url, '(' ) < substr_count( $url, ')' ) ) {\n\t\t\t$suffix = strrchr( $url, ')' ) . $suffix;\n\t\t\t$url = substr( $url, 0, strrpos( $url, ')' ) );\n\t\t}\n\n\t\t$url = esc_url($url);\n\t\tif ( empty($url) )\n\t\t\treturn $matches[0];\n\n\t\treturn $matches[1] . \"<a href=\\\"$url\\\" rel=\\\"nofollow\\\">$url</a>\" . $suffix;\n\t}\n\n\tfunction r20493_split_str_by_whitespace( $string, $goal ) {\n\t\t$chunks = array();\n\n\t\t$string_nullspace = strtr( $string, \"\\r\\n\\t\\v\\f \", \"\\000\\000\\000\\000\\000\\000\" );\n\n\t\twhile ( $goal < strlen( $string_nullspace ) ) {\n\t\t\t$pos = strrpos( substr( $string_nullspace, 0, $goal + 1 ), \"\\000\" );\n\n\t\t\tif ( false === $pos ) {\n\t\t\t\t$pos = strpos( $string_nullspace, \"\\000\", $goal + 1 );\n\t\t\t\tif ( false === $pos ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$chunks[] = substr( $string, 0, $pos + 1 );\n\t\t\t$string = substr( $string, $pos + 1 );\n\t\t\t$string_nullspace = substr( $string_nullspace, $pos + 1 );\n\t\t}\n\n\t\tif ( $string ) {\n\t\t\t$chunks[] = $string;\n\t\t}\n\n\t\treturn $chunks;\n\t}\n\n\tfunction r16625( $query ) {\n\t\t// Hotfixes: http://core.trac.wordpress.org/changeset/16625\n\n\t\t// Punt as fast as possible if this isn't an UPDATE\n\t\tif ( substr( $query, 0, 6 ) != \"UPDATE\" )\n\t\t\treturn $query;\n\t\tglobal $wpdb;\n\n\t\t// Determine what the prefix of the bad query would look like and punt if this query doesn't match\n\t\t$badstring = \"UPDATE $wpdb->posts SET to_ping = TRIM(REPLACE(to_ping, '\";\n\t\tif ( substr( $query, 0, strlen( $badstring ) ) != $badstring )\n\t\t\treturn $query;\n\n\t\t// Pull the post_id which is the last thing in the origin query, after a space, no quotes\n\t\t$query_parts = explode( \" \", $query );\n\t\t$post_id = array_pop( $query_parts );\n\n\t\t// Chop off the beginning and end of the original query to get our unsanitized $tb_ping\n\t\t$tb_ping = substr(\n\t\t\t$query,\n\t\t\tstrlen( $badstring ),\n\t\t\t(\n\t\t\t\tstrlen( $query ) - (\n\t\t\t\t\tstrlen( $badstring ) + strlen( sprintf( \"', '')) WHERE ID = %d\", $post_id ) )\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\n\t\t// Return the fixed query\n\t\treturn $wpdb->prepare( \"UPDATE $wpdb->posts SET to_ping = TRIM(REPLACE(to_ping, %s, '')) WHERE ID = %d\", $tb_ping, $post_id );\n\t}\n\n\tfunction r16803( $xmlrpc_method ) {\n\t\t// Hotfixes: http://core.trac.wordpress.org/changeset/16803\n\t\tglobal $wp_xmlrpc_server;\n\t\t// Pretend that we are an xmlrpc method, freshly called\n\t\t$args = $wp_xmlrpc_server->message->params;\n\t\t$error_code = 401;\n\t\tswitch( $xmlrpc_method ) {\n\t\t\t\tcase 'metaWeblog.newPost':\n\t\t\t\t\t\t$content_struct = $args[3];\n\t\t\t\t\t\t$publish = isset( $args[4] ) ? $args[4] : 0;\n\t\t\t\t\t\tif ( !empty( $content_struct['post_type'] ) ) {\n\t\t\t\t\t\t\t\tif ( $content_struct['post_type'] == 'page' ) {\n\t\t\t\t\t\t\t\t\t\tif ( $publish || 'publish' == $content_struct['page_status'] )\n\t\t\t\t\t\t\t\t\t\t\t\t$cap  = 'publish_pages';\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$cap = 'edit_pages';\n\t\t\t\t\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish pages on this site.' );\n\t\t\t\t\t\t\t\t} elseif ( $content_struct['post_type'] == 'post' ) {\n\t\t\t\t\t\t\t\t\t\tif ( $publish || 'publish' == $content_struct['post_status'] )\n\t\t\t\t\t\t\t\t\t\t\t\t$cap  = 'publish_posts';\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$cap = 'edit_posts';\n\t\t\t\t\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$error_message = __( 'Invalid post type.' );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ( $publish || 'publish' == $content_struct['post_status'] )\n\t\t\t\t\t\t\t\t\t\t$cap  = 'publish_posts';\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t$cap = 'edit_posts';\n\t\t\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( current_user_can( $cap ) )\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'metaWeblog.editPost':\n\t\t\t\t\t\t$post_ID = (int) $args[0];\n\t\t\t\t\t\t$content_struct = $args[3];\n\t\t\t\t\t\t$publish = $args[4];\n\t\t\t\t\t\t$cap = ( $publish ) ? 'publish_posts' : 'edit_posts';\n\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );\n\t\t\t\t\t\tif ( !empty( $content_struct['post_type'] ) ) {\n\t\t\t\t\t\t\t\tif ( $content_struct['post_type'] == 'page' ) {\n\t\t\t\t\t\t\t\t\t\tif ( $publish || 'publish' == $content_struct['page_status'] )\n\t\t\t\t\t\t\t\t\t\t\t\t$cap  = 'publish_pages';\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$cap = 'edit_pages';\n\t\t\t\t\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish pages on this site.' );\n\t\t\t\t\t\t\t\t} elseif ( $content_struct['post_type'] == 'post' ) {\n\t\t\t\t\t\t\t\t\t\tif ( $publish || 'publish' == $content_struct['post_status'] )\n\t\t\t\t\t\t\t\t\t\t\t\t$cap  = 'publish_posts';\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$cap = 'edit_posts';\n\t\t\t\t\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$error_message = __( 'Invalid post type.' );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ( $publish || 'publish' == $content_struct['post_status'] )\n\t\t\t\t\t\t\t\t\t\t$cap  = 'publish_posts';\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t$cap = 'edit_posts';\n\t\t\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( current_user_can( $cap ) )\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'mt.publishPost':\n\t\t\t\t\t\t$post_ID = (int) $args[0];\n\t\t\t\t\t\tif ( current_user_can( 'publish_posts' ) && current_user_can( 'edit_post', $post_ID ) )\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t$error_message = __( 'Sorry, you cannot edit this post.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'blogger.deletePost':\n\t\t\t\t\t\t$post_ID = (int) $args[1];\n\t\t\t\t\t\tif ( current_user_can( 'delete_post', $post_ID ) )\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t$error_message = __( 'Sorry, you do not have the right to delete this post.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'wp.getPageStatusList':\n\t\t\t\t\t\tif ( current_user_can( 'edit_pages' ) )\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t$error_code = 403;\n\t\t\t\t\t\t$error_message = __( 'You are not allowed access to details about this site.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'wp.deleteComment':\n\t\t\t\tcase 'wp.editComment':\n\t\t\t\t\t\t$comment_ID = (int) $args[3];\n\t\t\t\t\t\tif ( !$comment = get_comment( $comment_ID ) )\n\t\t\t\t\t\t\t\treturn true; // This will be handled in the calling function explicitly\n\t\t\t\t\t\tif ( current_user_can( 'edit_post', $comment->comment_post_ID ) )\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t$error_code = 403;\n\t\t\t\t\t\t$error_message = __( 'You are not allowed to moderate comments on this site.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t\treturn true;\n\t\t}\n\t\t// If we are here then this was a handlable xmlrpc call and the capability checks above all failed\n\t\t// ( otherwise they would have returned to the do_action from the switch statement above ) so it's\n\t\t// time to exit with whatever error we've determined is the problem (thus short circuiting the\n\t\t// original XMLRPC method call, and enforcing the above capability checks -- with an ax.  We'll\n\t\t// mimic the behavior from the end of IXR_Server::serve()\n\t\t$r = new IXR_Error( $error_code, $error_message );\n\t\t$resultxml = $r->getXml();\n\t\t$xml = <<<EOD\n<methodResponse>\n  <params>\n\t<param>\n\t  <value>\n\t\t$resultxml\n\t  </value>\n\t</param>\n  </params>\n</methodResponse>\nEOD;\n\t\t$wp_xmlrpc_server->output( $xml );\n\t\t// For good measure...\n\t\tdie();\n\t}\n\n\tfunction r17172_esc_url( $url, $original_url, $_context ) {\n\t\t$url = $original_url;\n\n\t\tif ( '' == $url )\n\t\t\treturn $url;\n\t\t$url = preg_replace('|[^a-z0-9-~+_.?#=!&;,/:%@$\\|*\\'()\\\\x80-\\\\xff]|i', '', $url);\n\t\t$strip = array('%0d', '%0a', '%0D', '%0A');\n\t\t$url = _deep_replace($strip, $url);\n\t\t$url = str_replace(';//', '://', $url);\n\t\t/* If the URL doesn't appear to contain a scheme, we\n\t\t * presume it needs http:// appended (unless a relative\n\t\t * link starting with /, # or ? or a php file).\n\t\t */\n\t\tif ( strpos($url, ':') === false && ! in_array( $url[0], array( '/', '#', '?' ) ) &&\n\t\t\t! preg_match('/^[a-z0-9-]+?\\.php/i', $url) )\n\t\t\t$url = 'http://' . $url;\n\n\t\t// Replace ampersands and single quotes only when displaying.\n\t\tif ( 'display' == $_context ) {\n\t\t\t$url = wp_kses_normalize_entities( $url );\n\t\t\t$url = str_replace( '&amp;', '&#038;', $url );\n\t\t\t$url = str_replace( \"'\", '&#039;', $url );\n\t\t}\n\n\t\t$protocols = array ('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn');\n\t\tif ( VaultPress_kses::wp_kses_bad_protocol( $url, $protocols ) != $url )\n\t\t\treturn '';\n\t\treturn $url;\n\t}\n\n\t// http://core.trac.wordpress.org/changeset/17172\n\t// http://core.trac.wordpress.org/changeset/20541\n\tfunction r17172_wp_kses( $string, $html, $protocols ) {\n\t\treturn VaultPress_kses::wp_kses( $string, $html, $protocols );\n\t}\n\n\t// http://core.trac.wordpress.org/changeset/17990\n\tfunction r17990( $filename ) {\n\t\t$parts = explode('.', $filename);\n\t\t$filename = array_shift($parts);\n\t\t$extension = array_pop($parts);\n\t\t$mimes = get_allowed_mime_types();\n\n\t\t// Loop over any intermediate extensions.  Munge them with a trailing underscore if they are a 2 - 5 character\n\t\t// long alpha string not in the extension whitelist.\n\t\tforeach ( (array) $parts as $part) {\n\t\t\t$filename .= '.' . $part;\n\n\t\t\tif ( preg_match(\"/^[a-zA-Z]{2,5}\\d?$/\", $part) ) {\n\t\t\t\t$allowed = false;\n\t\t\t\tforeach ( $mimes as $ext_preg => $mime_match ) {\n\t\t\t\t\t$ext_preg = '!^(' . $ext_preg . ')$!i';\n\t\t\t\t\tif ( preg_match( $ext_preg, $part ) ) {\n\t\t\t\t\t\t$allowed = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( !$allowed )\n\t\t\t\t\t$filename .= '_';\n\t\t\t}\n\t\t}\n\t\t$filename .= '.' . $extension;\n\t\treturn $filename;\n\t}\n\n\t/*\n\t * Hotfixes: http://core.trac.wordpress.org/changeset/18368\n\t */\n\tfunction r18368( $post, $raw_post ) {\n\t\tif ( isset( $post['filter'] ) || isset ( $raw_post['filter'] ) ) {\n\t\t\tunset( $post['filter'], $raw_post['filter'] ); // to ensure the post is properly sanitized\n\t\t\t$post = sanitize_post($post, 'db');\n\t\t}\n\t\tif ( empty( $post['ID'] ) )\n\t\t\tunset( $post['ID'] ); // sanitize_post\n\t\tunset( $post['filter'] ); // sanitize_post\n\t\treturn $post;\n\t}\n\n\t/**\n\t * Protect WordPress internal metadata.\n\t *\n\t * The post data is passed as a parameter to (unit) test this method.\n\t * @param $post_data|array the $_POST array.\n\t */\n\tfunction r17994( &$post_data ) {\n\t\t// Protect admin-ajax add_meta\n\t\t$metakeyselect = isset( $post_data['metakeyselect'] ) ? stripslashes( trim( $post_data['metakeyselect'] ) ) : '';\n\t\t$metakeyinput = isset( $post_data['metakeyinput'] ) ? stripslashes( trim( $post_data['metakeyinput'] ) ) : '';\n\n\t\tif ( ( $metakeyselect && '_' == $metakeyselect[0] ) || ( $metakeyinput && '_' == $metakeyinput[0] ) ) {\n\t\t\tunset( $_POST['metakeyselect'], $_POST['metakeyinput'] );\n\t\t}\n\n\t\t// Protect admin-ajax update_meta\n\t\tif ( isset( $post_data['meta'] ) ) {\n\t\t\tforeach ( (array)$post_data['meta'] as $mid => $value ) {\n\t\t\t\t$key = stripslashes( $post_data['meta'][$mid]['key'] );\n\t\t\t\tif ( $key && '_' == $key[0] )\n\t\t\t\t\tunset( $post_data['meta'][$mid] );\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction r17994_sanitize_mime_type( $mime_type ) {\n\t\t$sani_mime_type = preg_replace( '/[^\\-*.a-zA-Z0-9\\/+]/', '', $mime_type );\n\t\treturn apply_filters( 'sanitize_mime_type', $sani_mime_type, $mime_type );\n\t}\n\n\tfunction r17826_send_frame_options_header() {\n \t\t@header( 'X-Frame-Options: SAMEORIGIN' );\n \t}\n\n\tfunction r18346_sanitize_admin_email_on_save($value) {\n\t\t$value = sanitize_email( $value );\n\t\tif ( !is_email( $value ) ) {\n\t\t\t$value = get_option( 'new_admin_email' ); // Resets option to stored value in the case of failed sanitization\n\t\t\tif ( function_exists( 'add_settings_error' ) )\n\t\t\t\tadd_settings_error( 'new_admin_email', 'invalid_admin_email', __( 'The email address entered did not appear to be a valid email address. Please enter a valid email address.' ) );\n\t\t}\n\t\treturn $value;\n\t}\n\n\tfunction r18346_sanitize_admin_email( $value ) {\n\t\treturn sanitize_email( $value ); // Is it enough ?\n\t}\n\n\tfunction r18346_sanitize_lang_on_save( $value ) {\n\t\t$value = $this->r18346_sanitize_lang( $value ); // sanitize the new value.\n\t\tif ( empty( $value ) )\n\t\t\t$value = get_option( 'WPLANG' );\n\t\treturn $value;\n\t}\n\n\tfunction r18346_sanitize_lang( $value ) {\n\t\t$allowed = apply_filters( 'available_languages', get_available_languages() ); // add a filter to unit test\n\t\tif ( !empty( $value ) && !in_array( $value, $allowed ) )\n\t\t\treturn false;\n\t\telse\n\t\t\treturn $value;\n\t}\n\n\t// Protect All-in-one SEO AJAX calls from script injection and changes without privileges. Affects versions <= 2.1.5\n\tfunction protect_aioseo_ajax() {\n\t\tif ( defined( 'AIOSEOP_VERSION' ) && version_compare( AIOSEOP_VERSION, '2.1.5', '>' ) )\n\t\t\treturn;\n\n\t\tif ( ! isset( $_POST['post_id'] ) || ! isset( $_POST['target_meta'] ) )\n\t\t\tdie();\n\n\t\t// Ensure the current user has permission to write to the post.\n\t\tif ( ! current_user_can( 'edit_post', intval( $_POST['post_id'] ) ) )\n\t\t\tdie();\n\n\t\t// Limit the fields that can be written to\n\t\tif ( ! in_array( $_POST['target_meta'], array( 'title', 'description', 'keywords' ) ) )\n\t\t\tdie();\n\n\t\t// Strip tags from the metadata value.\n\t\t$_POST['new_meta'] = strip_tags( $_POST['new_meta'] );\n\t}\n}\n\nglobal $wp_version;\n$needs_class_fix = version_compare( $wp_version, '3.1', '>=') && version_compare( $wp_version, '3.1.3', '<' );\nif ( defined( 'XMLRPC_REQUEST' ) && XMLRPC_REQUEST && $needs_class_fix ) {\n\tinclude_once( ABSPATH . WPINC . '/class-IXR.php' );\n\tinclude_once( ABSPATH . WPINC . '/class-wp-xmlrpc-server.php' );\n\n\tclass VaultPress_XMLRPC_Server_r17994 extends wp_xmlrpc_server {\n\t\tfunction set_custom_fields( $post_id, $fields ) {\n\t\t\tforeach( $fields as $k => $meta ) {\n\t\t\t\t$key = stripslashes( trim( $meta['key'] ) );\n\t\t\t\tif ( $key && '_' ==  $key[0] )\n\t\t\t\t\tunset( $fields[$k] );\n\t\t\t}\n\t\t\tparent::set_custom_fields( $post_id, $fields );\n\t\t}\n\t}\n}\n\nclass VaultPress_kses {\n\tstatic function wp_kses($string, $allowed_html, $allowed_protocols = array ()) {\n\t\t$string = wp_kses_no_null($string);\n\t\t$string = wp_kses_js_entities($string);\n\t\t$string = wp_kses_normalize_entities($string);\n\t\treturn VaultPress_kses::wp_kses_split($string, $allowed_html, $allowed_protocols);\n\t}\n\n\tstatic function wp_kses_split($string, $allowed_html, $allowed_protocols) {\n\t\tglobal $pass_allowed_html, $pass_allowed_protocols;\n\t\t$pass_allowed_html = $allowed_html;\n\t\t$pass_allowed_protocols = $allowed_protocols;\n\t\treturn preg_replace_callback( '%(<!--.*?(-->|$))|(<[^>]*(>|$)|>)%', 'VaultPress_kses::_vp_kses_split_callback', $string );\n\t}\n\n\tstatic function _vp_kses_split_callback( $match ) {\n\t\tglobal $pass_allowed_html, $pass_allowed_protocols;\n\t\treturn VaultPress_kses::wp_kses_split2( $match[0], $pass_allowed_html, $pass_allowed_protocols );\n\t}\n\n\tstatic function wp_kses_split2($string, $allowed_html, $allowed_protocols) {\n\t\t$string = wp_kses_stripslashes($string);\n\n\t\tif (substr($string, 0, 1) != '<')\n\t\t\treturn '&gt;';\n\t\t# It matched a \">\" character\n\n\t\tif ( '<!--' == substr( $string, 0, 4 ) ) {\n\t\t\t$string = str_replace( array('<!--', '-->'), '', $string );\n\t\t\twhile ( $string != ($newstring = VaultPress_kses::wp_kses($string, $allowed_html, $allowed_protocols)) )\n\t\t\t\t$string = $newstring;\n\t\t\tif ( $string == '' )\n\t\t\t\treturn '';\n\t\t\t// prevent multiple dashes in comments\n\t\t\t$string = preg_replace('/--+/', '-', $string);\n\t\t\t// prevent three dashes closing a comment\n\t\t\t$string = preg_replace('/-$/', '', $string);\n\t\t\treturn \"<!--{$string}-->\";\n\t\t}\n\t\t# Allow HTML comments\n\n\t\tif (!preg_match('%^<\\s*(/\\s*)?([a-zA-Z0-9]+)([^>]*)>?$%', $string, $matches))\n\t\t\treturn '';\n\t\t# It's seriously malformed\n\n\t\t$slash = trim($matches[1]);\n\t\t$elem = $matches[2];\n\t\t$attrlist = $matches[3];\n\n\t\tif ( ! isset($allowed_html[strtolower($elem)]) )\n\t\t\treturn '';\n\t\t# They are using a not allowed HTML element\n\n\t\tif ($slash != '')\n\t\t\treturn \"</$elem>\";\n\t\t# No attributes are allowed for closing elements\n\n\t\treturn VaultPress_kses::wp_kses_attr( $elem, $attrlist, $allowed_html, $allowed_protocols );\n\t}\n\n\tstatic function wp_kses_attr($element, $attr, $allowed_html, $allowed_protocols) {\n\t\t# Is there a closing XHTML slash at the end of the attributes?\n\n\t\t$xhtml_slash = '';\n\t\tif (preg_match('%\\s*/\\s*$%', $attr))\n\t\t\t$xhtml_slash = ' /';\n\n\t\t# Are any attributes allowed at all for this element?\n\t\tif ( ! isset($allowed_html[strtolower($element)]) || count($allowed_html[strtolower($element)]) == 0 )\n\t\t\treturn \"<$element$xhtml_slash>\";\n\n\t\t# Split it\n\t\t$attrarr = VaultPress_kses::wp_kses_hair($attr, $allowed_protocols);\n\n\t\t# Go through $attrarr, and save the allowed attributes for this element\n\t\t# in $attr2\n\t\t$attr2 = '';\n\n\t\t$allowed_attr = $allowed_html[strtolower($element)];\n\t\tforeach ($attrarr as $arreach) {\n\t\t\tif ( ! isset( $allowed_attr[strtolower($arreach['name'])] ) )\n\t\t\t\tcontinue; # the attribute is not allowed\n\n\t\t\t$current = $allowed_attr[strtolower($arreach['name'])];\n\t\t\tif ( $current == '' )\n\t\t\t\tcontinue; # the attribute is not allowed\n\n\t\t\tif ( strtolower( $arreach['name'] ) == 'style' ) {\n\t\t\t\t$orig_value = $arreach['value'];\n\t\t\t\t$value = safecss_filter_attr( $orig_value );\n\n\t\t\t\tif ( empty( $value ) )\n\t\t\t\t\tcontinue;\n\n\t\t\t\t$arreach['value'] = $value;\n\t\t\t\t$arreach['whole'] = str_replace( $orig_value, $value, $arreach['whole'] );\n\t\t\t}\n\n\t\t\tif ( ! is_array($current) ) {\n\t\t\t\t$attr2 .= ' '.$arreach['whole'];\n\t\t\t# there are no checks\n\n\t\t\t} else {\n\t\t\t\t# there are some checks\n\t\t\t\t$ok = true;\n\t\t\t\tforeach ($current as $currkey => $currval) {\n\t\t\t\t\tif ( ! wp_kses_check_attr_val($arreach['value'], $arreach['vless'], $currkey, $currval) ) {\n\t\t\t\t\t\t$ok = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( $ok )\n\t\t\t\t\t$attr2 .= ' '.$arreach['whole']; # it passed them\n\t\t\t} # if !is_array($current)\n\t\t} # foreach\n\n\t\t# Remove any \"<\" or \">\" characters\n\t\t$attr2 = preg_replace('/[<>]/', '', $attr2);\n\n\t\treturn \"<$element$attr2$xhtml_slash>\";\n\t}\n\n\tstatic function wp_kses_hair($attr, $allowed_protocols) {\n\t\t$attrarr = array ();\n\t\t$mode = 0;\n\t\t$attrname = '';\n\t\t$uris = array('xmlns', 'profile', 'href', 'src', 'cite', 'classid', 'codebase', 'data', 'usemap', 'longdesc', 'action');\n\n\t\t# Loop through the whole attribute list\n\n\t\twhile (strlen($attr) != 0) {\n\t\t\t$working = 0; # Was the last operation successful?\n\n\t\t\tswitch ($mode) {\n\t\t\t\tcase 0 : # attribute name, href for instance\n\n\t\t\t\t\tif (preg_match('/^([-a-zA-Z]+)/', $attr, $match)) {\n\t\t\t\t\t\t$attrname = $match[1];\n\t\t\t\t\t\t$working = $mode = 1;\n\t\t\t\t\t\t$attr = preg_replace('/^[-a-zA-Z]+/', '', $attr);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1 : # equals sign or valueless (\"selected\")\n\n\t\t\t\t\tif (preg_match('/^\\s*=\\s*/', $attr)) # equals sign\n\t\t\t\t\t\t{\n\t\t\t\t\t\t$working = 1;\n\t\t\t\t\t\t$mode = 2;\n\t\t\t\t\t\t$attr = preg_replace('/^\\s*=\\s*/', '', $attr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (preg_match('/^\\s+/', $attr)) # valueless\n\t\t\t\t\t\t{\n\t\t\t\t\t\t$working = 1;\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\t\tif(false === array_key_exists($attrname, $attrarr)) {\n\t\t\t\t\t\t\t$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$attr = preg_replace('/^\\s+/', '', $attr);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2 : # attribute value, a URL after href= for instance\n\n\t\t\t\t\tif (preg_match('%^\"([^\"]*)\"(\\s+|/?$)%', $attr, $match))\n\t\t\t\t\t\t# \"value\"\n\t\t\t\t\t\t{\n\t\t\t\t\t\t$thisval = $match[1];\n\t\t\t\t\t\tif ( in_array(strtolower($attrname), $uris) )\n\t\t\t\t\t\t\t$thisval = VaultPress_kses::wp_kses_bad_protocol($thisval, $allowed_protocols);\n\n\t\t\t\t\t\tif(false === array_key_exists($attrname, $attrarr)) {\n\t\t\t\t\t\t\t$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => \"$attrname=\\\"$thisval\\\"\", 'vless' => 'n');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$working = 1;\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\t\t$attr = preg_replace('/^\"[^\"]*\"(\\s+|$)/', '', $attr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (preg_match(\"%^'([^']*)'(\\s+|/?$)%\", $attr, $match))\n\t\t\t\t\t\t# 'value'\n\t\t\t\t\t\t{\n\t\t\t\t\t\t$thisval = $match[1];\n\t\t\t\t\t\tif ( in_array(strtolower($attrname), $uris) )\n\t\t\t\t\t\t\t$thisval = VaultPress_kses::wp_kses_bad_protocol($thisval, $allowed_protocols);\n\n\t\t\t\t\t\tif(false === array_key_exists($attrname, $attrarr)) {\n\t\t\t\t\t\t\t$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => \"$attrname='$thisval'\", 'vless' => 'n');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$working = 1;\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\t\t$attr = preg_replace(\"/^'[^']*'(\\s+|$)/\", '', $attr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (preg_match(\"%^([^\\s\\\"']+)(\\s+|/?$)%\", $attr, $match))\n\t\t\t\t\t\t# value\n\t\t\t\t\t\t{\n\t\t\t\t\t\t$thisval = $match[1];\n\t\t\t\t\t\tif ( in_array(strtolower($attrname), $uris) )\n\t\t\t\t\t\t\t$thisval = VaultPress_kses::wp_kses_bad_protocol($thisval, $allowed_protocols);\n\n\t\t\t\t\t\tif(false === array_key_exists($attrname, $attrarr)) {\n\t\t\t\t\t\t\t$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => \"$attrname=\\\"$thisval\\\"\", 'vless' => 'n');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t# We add quotes to conform to W3C's HTML spec.\n\t\t\t\t\t\t$working = 1;\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\t\t$attr = preg_replace(\"%^[^\\s\\\"']+(\\s+|$)%\", '', $attr);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t} # switch\n\n\t\t\tif ($working == 0) # not well formed, remove and try again\n\t\t\t{\n\t\t\t\t$attr = wp_kses_html_error($attr);\n\t\t\t\t$mode = 0;\n\t\t\t}\n\t\t} # while\n\n\t\tif ($mode == 1 && false === array_key_exists($attrname, $attrarr))\n\t\t\t# special case, for when the attribute list ends with a valueless\n\t\t\t# attribute like \"selected\"\n\t\t\t$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');\n\n\t\treturn $attrarr;\n\t}\n\n\tstatic function wp_kses_bad_protocol($string, $allowed_protocols) {\n\t\t$string = wp_kses_no_null($string);\n\t\t$iterations = 0;\n\n\t\tdo {\n\t\t\t$original_string = $string;\n\t\t\t$string = VaultPress_kses::wp_kses_bad_protocol_once($string, $allowed_protocols);\n\t\t} while ( $original_string != $string && ++$iterations < 6 );\n\n\t\tif ( $original_string != $string )\n\t\t\treturn '';\n\n\t\treturn $string;\n\t}\n\n\tstatic function wp_kses_bad_protocol_once($string, $allowed_protocols, $count = 1) {\n\t\t$string2 = preg_split( '/:|&#0*58;|&#x0*3a;/i', $string, 2 );\n\t\tif ( isset($string2[1]) && ! preg_match('%/\\?%', $string2[0]) ) {\n\t\t\t$string = trim( $string2[1] );\n\t\t\t$protocol = VaultPress_kses::wp_kses_bad_protocol_once2( $string2[0], $allowed_protocols );\n\t\t\tif ( 'feed:' == $protocol ) {\n\t\t\t\tif ( $count > 2 )\n\t\t\t\t\treturn '';\n\t\t\t\t$string = VaultPress_kses::wp_kses_bad_protocol_once( $string, $allowed_protocols, ++$count );\n\t\t\t\tif ( empty( $string ) )\n\t\t\t\t\treturn $string;\n\t\t\t}\n\t\t\t$string = $protocol . $string;\n\t\t}\n\n\t\treturn $string;\n\t}\n\n\tstatic function wp_kses_bad_protocol_once2( $string, $allowed_protocols ) {\n\t\t$string2 = wp_kses_decode_entities($string);\n\t\t$string2 = preg_replace('/\\s/', '', $string2);\n\t\t$string2 = wp_kses_no_null($string2);\n\t\t$string2 = strtolower($string2);\n\n\t\t$allowed = false;\n\t\tforeach ( (array) $allowed_protocols as $one_protocol )\n\t\t\tif ( strtolower($one_protocol) == $string2 ) {\n\t\t\t\t$allowed = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\tif ($allowed)\n\t\t\treturn \"$string2:\";\n\t\telse\n\t\t\treturn '';\n\t}\n\n}\n\nif ( !function_exists( 'get_available_languages' ) ) {\n\tfunction get_available_languages( $dir = null ) {\n\t\t$languages = array();\n\t\tforeach( glob( ( is_null( $dir) ? WP_LANG_DIR : $dir ) . '/*.mo' ) as $lang_file )\n\t\t\tif ( false === strpos( $lang_file, 'continents-cities' ) )\n\t\t\t\t$languages[] = basename($lang_file, '.mo');\n\t\treturn $languages;\n\t}\n}\n", "=== VaultPress ===\nContributors: automattic, apokalyptik, briancolinger, josephscott, shaunandrews, xknown, thingalon\nTags: security, malware, virus, backups, scanning\nRequires at least: 2.9.2\nTested up to: 3.9.1\nStable tag: 1.6\nLicense: GPLv2\n\nVaultPress is a subscription service offering realtime backup, automated security scanning, and support from WordPress experts.\n\n== Description ==\n\n[VaultPress](http://vaultpress.com/?utm_source=plugin-readme&utm_medium=description&utm_campaign=1.0) is a real-time backup and security scanning service designed and built by [Automattic](http://automattic.com/), the same company that operates 25+ million sites on WordPress.com.\n\nThe VaultPress plugin provides the required functionality to backup and synchronize every post, comment, media file, revision and dashboard settings on our servers. To start safeguarding your site, you need to sign up for a VaultPress subscription.\n\n[wpvideo TxdSIdpO]\n\nFor more information, check out [VaultPress.com](http://vaultpress.com/).\n\n== Installation ==\n\n1. Search for VaultPress in the WordPress.org plugin directory and click install. Or, upload the files to your `wp-content/vaultpress/` folder.\n2. Visit `wp-admin/plugins.php` and activate the VaultPress plugin.\n3. Head to `wp-admin/admin.php?page=vaultpress` and enter your site&rsquo;s registration key. You can purchase your registration key at [VaultPress.com](http://vaultpress.com/plugin/?utm_source=plugin-readme&utm_medium=installation&utm_campaign=1.0)\n\nYou can find more detailed instructions at [http://vaultpress.com/](http://help.vaultpress.com/install-vaultpress/?utm_source=plugin-readme&utm_medium=description&utm_campaign=1.0)\n\n== Frequently Asked Questions ==\n\nView our full list of FAQs at [http://help.vaultpress.com/faq/](http://help.vaultpress.com/faq/?utm_source=plugin-readme&utm_medium=faq&utm_campaign=1.0)\n\n= What\u2019s included in each VaultPress plan? =\n\nAll plans include Daily or Realtime Backups, Downloadable Archives for Restoring, Vitality Statistics, and the Activity Log.\n\nThe Lite plan provides Daily Backups, a 30-day backup archive and automated restores.\n\nThe Basic plan provides Realtime Backups to protect your changes as they happen and support services.\n\nThe Premium plan provides priority recovery and support services, along with site migration assistance. The Premium plan provides automated security scanning of Core, Theme, and Plugin files.\n\nUpdate-to-date pricing and features can always be found on the [Plans &amp; Pricing](http://vaultpress.com/plugin/?utm_source=plugin-readme&utm_medium=installation&utm_campaign=1.0) page.\n\n= How many sites can I protect with VaultPress? =\n\nA VaultPress subscription is for a single WordPress site. You can purchase additional subscriptions for each of your WordPress sites, and manage them all with in one place.\n\n= Does VaultPress work with WordPress 3.0 Multisite installs? =\n\nYes, VaultPress supports Multisite installs. Each site will require its own subscription.\n\n== Changelog ==\n= 1.6 =\n* Bugfix: Better handling for Multisite table prefixes.\n* Bugfix: Do not use the deprecated wpdb::escape() method.\n\n= 1.5.9 =\n* Feature: If available, use command line md5sum and sha1sum to get checksums for large files.\n\n= 1.5.8 =\n* Security: Add a new security hotfix.\n\n= 1.5.7 =\n* Bugfix: Avoid PHP 5.4 warnings due to invalid constructor names.\n* Security: Add a new security hotfix.\n\n= 1.5.6 =\n* Bugfix: Avoid PHP 5.4 warnings.\n* Bugfix: Some servers with restrictive security filters make database restores fail.\n* Feature: Add a new restore method to VaultPress_Database.\n\n= 1.5.2 =\n* Bugfix: Adding less greedy patterns for cache directories.\n\n= 1.5.1 =\n* Feature: Adding file exclusion patterns to avoid backing up cache and backup directories.\n\n= 1.5 =\n* Bugfix: Don't show admin notices on the about page.\n\n= 1.4.9 =\n* Bugfix: Clean up PHP5 strict warnings.\n\n= 1.4.8 =\n* Feature: Include styles and images with the plugin instead of loading them externally.\n\n= 1.4.7 =\n* Bugfix: Some servers have SSL configuration problems, which breaks the plugin when SSL verification is enforced.\n\n= 1.4.6 =\n* Bugfix: PHP 5.4 notices\n* Feature: Add the possibility to ignore frequent updates on some postmeta keys.\n\n= 1.3.9 =\n* Feature: Request decoding (base64/rot13)\n* Feature: Response encoding (base64/rot13)\n\n= 1.3.8 =\n* Bugfix: Validate IPv4-mapped IPv6 addresses in the internal firewall.\n* Bugfix: Fix hooks not being properly added under certain circumstances.\n\n= 1.3.7 =\n* Bugfix: Protect against infinite loop due to a PHP bug.\n* Bugfix: Encode remote ping requests.\n\n= 1.0 =\n* First public release!\n", "<?php\n/*\n * Plugin Name: VaultPress\n * Plugin URI: http://vaultpress.com/?utm_source=plugin-uri&amp;utm_medium=plugin-description&amp;utm_campaign=1.0\n * Description: Protect your content, themes, plugins, and settings with <strong>realtime backup</strong> and <strong>automated security scanning</strong> from <a href=\"http://vaultpress.com/?utm_source=wp-admin&amp;utm_medium=plugin-description&amp;utm_campaign=1.0\" rel=\"nofollow\">VaultPress</a>. Activate, enter your registration key, and never worry again. <a href=\"http://vaultpress.com/help/?utm_source=wp-admin&amp;utm_medium=plugin-description&amp;utm_campaign=1.0\" rel=\"nofollow\">Need some help?</a>\n * Version: 1.6\n * Author: Automattic\n * Author URI: http://vaultpress.com/?utm_source=author-uri&amp;utm_medium=plugin-description&amp;utm_campaign=1.0\n * License: GPL2+\n * Text Domain: vaultpress\n * Domain Path: /languages/\n */\n\n// don't call the file directly\nif ( !defined( 'ABSPATH' ) )\n\treturn;\n\nclass VaultPress {\n\tvar $option_name    = 'vaultpress';\n\tvar $db_version     = 3;\n\tvar $plugin_version = '1.6';\n\n\tfunction __construct() {\n\t\tregister_activation_hook( __FILE__, array( $this, 'activate' ) );\n\t\tregister_deactivation_hook( __FILE__, array( $this, 'deactivate' ) );\n\n\t\t$options = get_option( $this->option_name );\n\t\tif ( !is_array( $options ) )\n\t\t\t$options = array();\n\n\t\t$defaults = array(\n\t\t\t'db_version'            => 0,\n\t\t\t'key'                   => '',\n\t\t\t'secret'                => '',\n\t\t\t'connection'            => false,\n\t\t\t'service_ips'           => false\n\t\t);\n\n\t\t$this->options = wp_parse_args( $options, $defaults );\n\t\t$this->reset_pings();\n\n\t\t$this->upgrade();\n\n\t\tif ( is_admin() )\n\t\t\t$this->add_admin_actions_and_filters();\n\n\t\tif ( $this->is_registered() ) {\n\t\t\t$do_not_backup = $this->get_option( 'do_not_backup' ) || $this->get_option( 'do_not_send_backup_pings' );\n\t\t\tif ( $do_not_backup )\n\t\t\t\t$this->add_vp_required_filters();\n\t\t\telse\n\t\t\t\t$this->add_listener_actions_and_filters();\n\t\t}\n\t}\n\n\tstatic function &init() {\n\t\tstatic $instance = false;\n\n\t\tif ( !$instance ) {\n\t\t\t$instance = new VaultPress();\n\t\t}\n\n\t\treturn $instance;\n\t}\n\n\tfunction activate( $network_wide ) {\n\t\t$type = $network_wide ? 'network' : 'single';\n\t\t$this->update_option( 'activated', $type );\n\n\t\t// force a connection check after an activation\n\t\t$this->clear_connection();\n\t}\n\n\tfunction deactivate() {\n\t\tif ( $this->is_registered() )\n\t\t\t$this->contact_service( 'plugin_status', array( 'vp_plugin_status' => 'deactivated' ) );\n\t}\n\n\tfunction upgrade() {\n\t\t$current_db_version = $this->get_option( 'db_version' );\n\n\t\tif ( $current_db_version < 1 ) {\n\t\t\t$this->options['connection']  = get_option( 'vaultpress_connection' );\n\t\t\t$this->options['key']         = get_option( 'vaultpress_key' );\n\t\t\t$this->options['secret']      = get_option( 'vaultpress_secret' );\n\t\t\t$this->options['service_ips'] = get_option( 'vaultpress_service_ips' );\n\n\t\t\t// remove old options\n\t\t\t$old_options = array(\n\t\t\t\t'vaultpress_connection',\n\t\t\t\t'vaultpress_hostname',\n\t\t\t\t'vaultpress_key',\n\t\t\t\t'vaultpress_secret',\n\t\t\t\t'vaultpress_service_ips',\n\t\t\t\t'vaultpress_timeout',\n\t\t\t\t'vp_allow_remote_execution',\n\t\t\t\t'vp_debug_request_signing',\n\t\t\t\t'vp_disable_firewall',\n\t\t\t);\n\n\t\t\tforeach ( $old_options as $option )\n\t\t\t\tdelete_option( $option );\n\n\t\t\t$this->options['db_version'] = $this->db_version;\n\t\t\t$this->update_options();\n\t\t}\n\n\t\tif ( $current_db_version < 2 ) {\n\t\t\t$this->delete_option( 'timeout' );\n\t\t\t$this->delete_option( 'disable_firewall' );\n\t\t\t$this->update_option( 'db_version', $this->db_version );\n\t\t\t$this->clear_connection();\n\t\t}\n\n\t\tif ( $current_db_version < 3 ) {\n\t\t\t$this->update_firewall();\n\t\t\t$this->update_option( 'db_version', $this->db_version );\n\t\t\t$this->clear_connection();\n\t\t}\n\t}\n\n\tfunction get_option( $key ) {\n\t\tif ( 'hostname' == $key ) {\n\t\t\tif ( defined( 'VAULTPRESS_HOSTNAME' ) )\n\t\t\t\treturn VAULTPRESS_HOSTNAME;\n\t\t\telse\n\t\t\t\treturn 'vaultpress.com';\n\t\t}\n\n\t\tif ( 'timeout' == $key ) {\n\t\t\tif ( defined( 'VAULTPRESS_TIMEOUT' ) )\n\t\t\t\treturn VAULTPRESS_TIMEOUT;\n\t\t\telse\n\t\t\t\treturn 60;\n\t\t}\n\n\t\tif ( 'disable_firewall' == $key ) {\n\t\t\tif ( defined( 'VAULTPRESS_DISABLE_FIREWALL' ) )\n\t\t\t\treturn VAULTPRESS_DISABLE_FIREWALL;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif ( isset( $this->options[$key] ) )\n\t\t\treturn $this->options[$key];\n\n\t\treturn false;\n\t}\n\n\tfunction update_option( $key, $value ) {\n\t\t$this->options[$key] = $value;\n\t\t$this->update_options();\n\t}\n\n\tfunction delete_option( $key ) {\n\t\tunset( $this->options[$key] );\n\t\t$this->update_options();\n\t}\n\n\tfunction update_options() {\n\t\tupdate_option( $this->option_name, $this->options );\n\t}\n\n\tfunction admin_init() {\n\t\tif ( !current_user_can( 'manage_options' ) )\n\t\t\treturn;\n\n\t\tload_plugin_textdomain( 'vaultpress', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/' );\n\t}\n\n\tfunction admin_head() {\n\t\tif ( !current_user_can( 'manage_options' ) )\n\t\t\treturn;\n\n\t\tif ( $activated = $this->get_option( 'activated' ) ) {\n\t\t\tif ( 'network' == $activated ) {\n\t\t\t\tadd_action( 'network_admin_notices', array( $this, 'activated_notice' ) );\n\t\t\t} else {\n\t\t\t\tforeach ( array( 'user_admin_notices', 'admin_notices' ) as $filter )\n\t\t\t\t\tadd_action( $filter, array( $this, 'activated_notice' ) );\n\t\t\t}\n\t\t}\n\n\t\t// ask the user to connect their site w/ VP\n\t\tif ( !$this->is_registered() ) {\n\t\t\tforeach ( array( 'user_admin_notices', 'admin_notices' ) as $filter )\n\t\t\t\tadd_action( $filter, array( $this, 'connect_notice' ) );\n\n\t\t// if we have an error make sure to let the user know about it\n\t\t} else {\n\t\t\t$error_code = $this->get_option( 'connection_error_code' );\n\t\t \tif ( !empty( $error_code ) ) {\n\t\t\t\tforeach ( array( 'user_admin_notices', 'admin_notices' ) as $filter )\n\t\t\t\t\tadd_action( $filter, array( $this, 'error_notice' ) );\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction admin_menu() {\n\t\t// if Jetpack is loaded then we need to wait for that menu to be added\n\t\tif ( class_exists( 'Jetpack' ) )\n\t\t\tadd_action( 'jetpack_admin_menu', array( $this, 'load_menu' ) );\n\t\telse\n\t\t\t$this->load_menu();\n\t}\n\n\tfunction load_menu() {\n\t\tif ( class_exists( 'Jetpack' ) ) {\n\t\t\t$hook = add_submenu_page( 'jetpack', 'VaultPress', 'VaultPress', 'manage_options', 'vaultpress', array( $this, 'ui' ) );\n\t\t} else {\n\t\t\t$hook = add_menu_page( 'VaultPress', 'VaultPress', 'manage_options', 'vaultpress', array( $this, 'ui' ), 'div' );\n\t\t}\n\n\t\tadd_action( \"load-$hook\", array( $this, 'ui_load' ) );\n\t\tadd_action( 'admin_print_styles', array( $this, 'styles' ) );\n\t}\n\n\tfunction styles() {\n\t\tif ( !current_user_can( 'manage_options' ) || !is_admin() )\n\t\t\treturn;\n\n\t\twp_enqueue_style( 'vaultpress-nav', plugins_url( '/nav-styles.css', __FILE__ ), false, date( 'Ymd' ) );\n\n\t\tif ( isset( $_GET['page'] ) && 'vaultpress' == $_GET['page'] )\n\t\t\twp_enqueue_style( 'vaultpress', plugins_url( '/styles.css', __FILE__ ), false, date( 'Ymd' ) );\n\t}\n\n\t// display a security threat notice if one exists\n\tfunction toolbar( $wp_admin_bar ) {\n\t\tglobal $wp_version;\n\n\t\t// these new toolbar functions were introduced in 3.3\n\t\t// http://codex.wordpress.org/Function_Reference/add_node\n\t\tif ( version_compare( $wp_version, '3.3', '<') )\n\t\t\treturn;\n\n\t\tif ( !current_user_can( 'manage_options' ) )\n\t\t\treturn;\n\n\t\t$messages = $this->get_messages();\n\t\tif ( !empty( $messages['security_notice_count'] ) ) {\n\t\t\t$count = (int)$messages['security_notice_count'];\n\t\t\tif ( $count > 0 ) {\n\t\t\t\t$count = number_format( $count, 0 );\n\t\t\t\t$wp_admin_bar->add_node( array(\n\t\t\t\t\t'id' => 'vp-notice',\n\t\t\t\t\t'title' => '<strong><span class=\"ab-icon\"></span>' .\n\t\t\t\t\t\tsprintf( _n( '%s Security Threat', '%s Security Threats', $count , 'vaultpress'), $count ) .\n\t\t\t\t\t' </strong>',\n\t\t\t\t\t'parent' => 'top-secondary',\n\t\t\t\t\t'href' => sprintf( 'https://dashboard.vaultpress.com/%d/security/', $messages['site_id'] ),\n\t\t\t\t\t'meta'  => array(\n\t\t\t\t\t\t'title' => __( 'Visit VaultPress Security' , 'vaultpress'),\n\t\t\t\t\t\t'onclick' => 'window.open( this.href ); return false;',\n\t\t\t\t\t\t'class' => 'error'\n\t\t\t\t\t),\n\t\t\t\t) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// get any messages from the VP servers\n\tfunction get_messages( $force_reload = false ) {\n\t\t$last_contact = $this->get_option( 'messages_last_contact' );\n\n\t\t// only run the messages check every 30 minutes\n\t\tif ( ( time() - (int)$last_contact ) > 1800 || $force_reload ) {\n\t\t\t$messages = base64_decode( $this->contact_service( 'messages', array() ) );\n\t\t\t$messages = unserialize( $messages );\n\t\t\t$this->update_option( 'messages_last_contact', time() );\n\t\t\t$this->update_option( 'messages', $messages );\n\t\t} else {\n\t\t\t$messages = $this->get_option( 'messages' );\n\t\t}\n\n\t\treturn $messages;\n\t}\n\n\tfunction server_url() {\n\t\tif ( !isset( $this->_server_url ) ) {\n\t\t\t$scheme = is_ssl() ? 'https' : 'http';\n\t\t\t$this->_server_url = sprintf( '%s://%s/', $scheme, $this->get_option( 'hostname' ) );\n\t\t}\n\n\t\treturn $this->_server_url;\n\t}\n\n\t// show message if plugin is activated but not connected to VaultPress\n\tfunction connect_notice() {\n\t\tif ( isset( $_GET['page'] ) && 'vaultpress' == $_GET['page'] )\n\t\t\treturn;\n\n\t\t$message = sprintf(\n\t\t\t__( 'You must enter your registration key before VaultPress can back up and secure your site. <a href=\"%1$s\">Register&nbsp;VaultPress</a>', 'vaultpress' ),\n\t\t\tadmin_url( 'admin.php?page=vaultpress' )\n\t\t);\n\t\t$this->ui_message( $message, 'notice', __( 'VaultPress needs your attention!', 'vaultpress' ) );\n\t}\n\n\t// show message after activation\n\tfunction activated_notice() {\n\t\tif ( 'network' == $this->get_option( 'activated' ) ) {\n\t\t\t$message = sprintf(\n\t\t\t\t__( 'Each site will need to be registered with VaultPress separately. You can purchase new keys from your <a href=\"%1$s\">VaultPress&nbsp;Dashboard</a>.', 'vaultpress' ),\n\t\t\t\t'https://dashboard.vaultpress.com/'\n\t\t\t);\n\t\t\t$this->ui_message( $message, 'activated', __( 'VaultPress has been activated across your network!', 'vaultpress' ) );\n\n\t\t// key and secret already exist in db\n\t\t} elseif ( $this->is_registered() ) {\n\t\t\tif ( $this->check_connection() ) {\n\t\t\t\t$message = sprintf(\n\t\t\t\t\t__( 'VaultPress has been registered and is currently backing up your site. <a href=\"%1$s\">View Backup Status</a>', 'vaultpress' ),\n\t\t\t\t\tadmin_url( 'admin.php?page=vaultpress' )\n\t\t\t\t);\n\t\t\t\t$this->ui_message( $message, 'registered',  __( 'VaultPress has been activated!', 'vaultpress' ) );\n\t\t\t}\n\t\t}\n\n\t\t$this->delete_option( 'activated' );\n\t}\n\n\tfunction error_notice() {\n\t\t$error_message = $this->get_option( 'connection_error_message' );\n\n\t\t// link to the VaultPress page if we're not already there\n\t\tif ( !isset( $_GET['page'] ) || 'vaultpress' != $_GET['page'] )\n\t\t\t$error_message .= ' ' . sprintf( '<a href=\"%s\">%s</a>', admin_url( 'admin.php?page=vaultpress' ), __( 'Visit&nbsp;the&nbsp;VaultPress&nbsp;page' , 'vaultpress') );\n\n\t\t$screen = get_current_screen();\n\t\tif ( !in_array( $screen->id, array( 'about', 'about-user', 'about-network' ) ) && !empty( $error_message ) )\n\t\t\t$this->ui_message( $error_message, 'error' );\n\t}\n\n\tfunction ui() {\n\t\tif ( !empty( $_GET['error'] ) ) {\n\t\t\t$this->error_notice();\n\t\t\t$this->clear_connection();\n\t\t}\n\n\t\tif ( !$this->is_registered() ) {\n\t\t\t$this->ui_register();\n\t\t\treturn;\n\t\t}\n\n\t\t$status = $this->contact_service( 'status' );\n\t\tif ( !$status ) {\n\t\t\t$error_code = $this->get_option( 'connection_error_code' );\n\t\t\tif ( 0 == $error_code )\n\t\t\t\t$this->ui_fatal_error();\n\t\t\telse\n\t\t\t\t$this->ui_register();\n\t\t\treturn;\n\t\t}\n\n\t\t$ticker = $this->contact_service( 'ticker' );\n\t\tif ( is_array( $ticker ) && isset( $ticker['faultCode'] ) ) {\n\t\t\t$this->error_notice();\n\t\t\t$this->ui_register();\n\t\t\treturn;\n\t\t}\n\n\t\t$this->ui_main();\n\t}\n\n\tfunction ui_load() {\n\t\tif ( !current_user_can( 'manage_options' ) )\n\t\t\treturn;\n\n\t\t// run code that might be updating the registration key\n\t\tif ( isset( $_POST['action'] ) && 'register' == $_POST['action'] ) {\n\t\t\tcheck_admin_referer( 'vaultpress_register' );\n\n\t\t\t// reset the connection info so messages don't cross\n\t\t\t$this->clear_connection();\n\n\t\t\t$registration_key = trim( $_POST[ 'registration_key' ] );\n\t\t\tif ( empty( $registration_key ) ) {\n\t\t\t\t$this->update_option( 'connection_error_code', 1 );\n\t\t\t\t$this->update_option(\n\t\t\t\t\t'connection_error_message',\n\t\t\t\t\tsprintf(\n\t\t\t\t\t\t__( '<strong>That\\'s not a valid registration key.</strong> Head over to the <a href=\"%1$s\" title=\"Sign in to your VaultPress Dashboard\">VaultPress&nbsp;Dashboard</a> to find your key.', 'vaultpress' ),\n\t\t\t\t\t\t'https://dashboard.vaultpress.com/'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\twp_redirect( admin_url( 'admin.php?page=vaultpress&error=true' ) );\n\t\t\t\texit();\n\t\t\t}\n\n\t\t\t// try to register the plugin\n\t\t\t$nonce = wp_create_nonce( 'vp_register_' . $registration_key );\n\t\t\t$args = array( 'registration_key' =>  $registration_key, 'nonce' => $nonce );\n\t\t\t$response = $this->contact_service( 'register', $args );\n\n\t\t\t// we received an error from the VaultPress servers\n\t\t\tif ( !empty( $response['faultCode'] ) ) {\n\t\t\t\t$this->update_option( 'connection_error_code',    $response['faultCode'] );\n\t\t\t\t$this->update_option( 'connection_error_message', $response['faultString'] );\n\t\t\t\twp_redirect( admin_url( 'admin.php?page=vaultpress&error=true' ) );\n\t\t\t\texit();\n\t\t\t}\n\n\t\t\t// make sure the returned data looks valid\n\t\t\tif ( empty( $response['key'] ) || empty( $response['secret'] ) || empty( $response['nonce'] ) || $nonce != $response['nonce'] ) {\n\t\t\t\t$this->update_option( 'connection_error_code', 1 );\n\t\t\t\t$this->update_option( 'connection_error_message', sprintf( __( 'There was a problem trying to register your subscription. Please try again. If you&rsquo;re still having issues please <a href=\"%1$s\">contact the VaultPress&nbsp;Safekeepers</a>.', 'vaultpress' ), 'http://vaultpress.com/contact/' ) );\n\t\t\t\twp_redirect( admin_url( 'admin.php?page=vaultpress&error=true' ) );\n\t\t\t\texit();\n\t\t\t}\n\n\t\t\t// need to update these values in the db so the servers can try connecting to the plugin\n\t\t\t$this->update_option( 'key', $response['key'] );\n\t\t\t$this->update_option( 'secret', $response['secret'] );\n\t\t\tif ( $this->check_connection( true ) ) {\n\t\t\t\twp_redirect( admin_url( 'admin.php?page=vaultpress' ) );\n\t\t\t\texit();\n\t\t\t}\n\n\t\t\t// reset the key and secret\n\t\t\t$this->update_option( 'key', '' );\n\t\t\t$this->update_option( 'secret', '' );\n\t\t\twp_redirect( admin_url( 'admin.php?page=vaultpress&error=true' ) );\n\t\t\texit();\n\t\t}\n\t}\n\n\tfunction ui_register() {\n?>\n\t<div id=\"vp-wrap\" class=\"wrap\">\n\t\t<div id=\"vp-head\">\n\t\t\t<h2>VaultPress<a href=\"https://dashboard.vaultpress.com/\" class=\"vp-visit-dashboard\" target=\"_blank\"><?php _e( 'Visit Dashboard', 'vaultpress' ); ?></a></h2>\n\t\t</div>\n\n\t\t<div id=\"vp_registration\">\n\t\t\t<div class=\"vp_view-plans\">\n\t\t\t\t<h1><?php _e( 'The VaultPress plugin <strong>requires a monthly&nbsp;subscription</strong>.', 'vaultpress' ); ?></h1>\n\t\t\t\t<p><?php _e( 'Get realtime backups, automated security scanning, and support from WordPress&nbsp;experts.', 'vaultpress' ); ?></p>\n\t\t\t\t<p class=\"vp_plans-btn\"><a href=\"https://vaultpress.com/plugin/?utm_source=plugin-unregistered&amp;utm_medium=view-plans-and-pricing&amp;utm_campaign=1.0-plugin\"><strong><?php _e( 'View plans and pricing&nbsp;&raquo;', 'vaultpress' ); ?></strong></a></p>\n\t\t\t</div>\n\n\t\t\t<div class=\"vp_register-plugin\">\n\t\t\t\t<h3><?php _e( 'Already have a VaultPress&nbsp;account?', 'vaultpress' ); ?></h3>\n\t\t\t\t<p><?php _e( 'Paste your registration key&nbsp;below:', 'vaultpress' ); ?></p>\n\t\t\t\t<form method=\"post\" action=\"\">\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<textarea placeholder=\"<?php echo esc_attr( __( 'Enter your key here...', 'vaultpress' ) ); ?>\" name=\"registration_key\"></textarea>\n\t\t\t\t\t\t<button><strong><?php _e( 'Register ', 'vaultpress' ); ?></strong></button>\n\t\t\t\t\t\t<input type=\"hidden\" name=\"action\" value=\"register\" />\n\t\t\t\t\t\t<?php wp_nonce_field( 'vaultpress_register' ); ?>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n<?php\n\t}\n\n\tfunction ui_main() {\n?>\n\t<div id=\"vp-wrap\" class=\"wrap\">\n\t\t<?php\n\t\t\t$response = base64_decode( $this->contact_service( 'plugin_ui' ) );\n\t\t\techo $response;\n\t\t?>\n\t</div>\n<?php\n\t}\n\n\tfunction ui_fatal_error() {\n\t?>\n\t\t<div id=\"vp-wrap\" class=\"wrap\">\n\t\t\t<h2>VaultPress</h2>\n\n\t\t\t<p><?php printf( __( 'Yikes! We&rsquo;ve run into a serious issue and can&rsquo;t connect to %1$s.', 'vaultpress' ), esc_html( $this->get_option( 'hostname' ) ) ); ?></p>\n\t\t\t<p><?php printf( __( 'Please make sure that your website is accessible via the Internet. If you&rsquo;re still having issues please <a href=\"%1$s\">contact the VaultPress&nbsp;Safekeepers</a>.', 'vaultpress' ), 'http://vaultpress.com/contact/' ); ?></p>\n\t\t</div>\n\t<?php\n\t}\n\n\tfunction ui_message( $message, $type = 'notice', $heading = '' ) {\n\t\tif ( empty( $heading ) ) {\n\t\t\tswitch ( $type ) {\n\t\t\t\tcase 'error':\n\t\t\t\t\t$heading = __( 'Oops... there seems to be a problem.', 'vaultpress' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'success':\n\t\t\t\t\t$heading = __( 'Yay! Things look good.', 'vaultpress' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t$heading = __( 'VaultPress needs your attention!', 'vaultpress' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n?>\n\t\t<div id=\"vp-notice\" class=\"vp-<?php echo $type; ?> updated\">\n\t\t\t<div class=\"vp-message\">\n\t\t\t\t<h3><?php echo $heading; ?></h3>\n\t\t\t\t<p><?php echo $message; ?></p>\n\t\t\t</div>\n\t\t</div>\n<?php\n\t}\n\n\tfunction get_config( $key ) {\n\t\t$val = get_option( $key );\n\t\tif ( $val )\n\t\t\treturn $val;\n\t\tswitch( $key ) {\n\t\t\tcase '_vp_config_option_name_ignore':\n\t\t\t\t$val = $this->get_option_name_ignore( true );\n\t\t\t\tupdate_option( '_vp_config_option_name_ignore', $val );\n\t\t\t\tbreak;\n\t\t\tcase '_vp_config_post_meta_name_ignore':\n\t\t\t\t$val = $this->get_post_meta_name_ignore( true );\n\t\t\t\tupdate_option( '_vp_config_post_meta_name_ignore', $val );\n\t\t\t\tbreak;\n\t\t\tcase '_vp_config_should_ignore_files':\n\t\t\t\t$val = $this->get_should_ignore_files( true );\n\t\t\t\tupdate_option( '_vp_config_should_ignore_files', $val );\n\t\t\t\tbreak;\n\t\t}\n\t\treturn $val;\n\t}\n\n\t// Option name patterns to ignore\n\tfunction get_option_name_ignore( $return_defaults = false ) {\n\t\t$defaults = array(\n\t\t\t'vaultpress',\n\t\t\t'cron',\n\t\t\t'wpsupercache_gc_time',\n\t\t\t'rewrite_rules',\n\t\t\t'akismet_spam_count',\n\t\t\t'/_transient_/',\n\t\t\t'/^_vp_/',\n\t\t);\n\t\tif ( $return_defaults )\n\t\t\treturn $defaults;\n\t\t$ignore_names = $this->get_config( '_vp_config_option_name_ignore' );\n\t\treturn array_unique( array_merge( $defaults, $ignore_names ) );\n\t}\n\n\t// post meta name patterns to ignore\n\tfunction get_post_meta_name_ignore( $return_defaults = false ) {\n\t\t$defaults = array(\n\t\t\t'pvc_views'\n\t\t);\n\t\tif ( $return_defaults )\n\t\t\treturn $defaults;\n\t\t$ignore_names = $this->get_config( '_vp_config_post_meta_name_ignore' );\n\t\treturn array_unique( array_merge( $defaults, $ignore_names ) );\n\t}\n\n\t// file name patterns to ignore\n\tfunction get_should_ignore_files( $return_defaults = false ) {\n\t\t$defaults = array();\n\t\tif ( $return_defaults )\n\t\t\treturn $defaults;\n\t\t$ignore_names = (array) $this->get_config( '_vp_config_should_ignore_files' );\n\t\treturn array_unique( array_merge( $defaults, $ignore_names ) );\n\t}\n\n\t###\n\t### Section: Backup Notification Hooks\n\t###\n\n\t// Handle Handle Notifying VaultPress of Options Activity At this point the options table has already been modified\n\t//\n\t// Note: we handle deleted, instead of delete because VaultPress backs up options by name (which are unique,) that\n\t// means that we do not need to resolve an id like we would for, say, a post.\n\tfunction option_handler( $option_name ) {\n\t\tglobal $wpdb;\n\t\t// Step 1 -- exclusionary rules, don't send these options to vaultpress, because they\n\t\t// either change constantly and/or are inconsequential to the blog itself and/or they\n\t\t// are specific to the VaultPress plugin process and we want to avoid recursion\n\t\t$should_ping = true;\n\t\t$ignore_names = $this->get_option_name_ignore();\n\t\tforeach( (array)$ignore_names as $val ) {\n\t\t\tif ( $val{0} == '/' ) {\n\t\t\t\tif ( preg_match( $val, $option_name ) )\n\t\t\t\t\t$should_ping = false;\n\t\t\t} else {\n\t\t\t\tif ( $val == $option_name )\n\t\t\t\t\t$should_ping = false;\n\t\t\t}\n\t\t\tif ( !$should_ping )\n\t\t\t\tbreak;\n\t\t}\n\t\tif ( $should_ping )\n\t\t\t$this->add_ping( 'db', array( 'option' => $option_name ) );\n\n\t\t// Step 2 -- If WordPress is about to kick off a some \"cron\" action, we need to\n\t\t// flush vaultpress, because the \"remote\" cron threads done via http fetch will\n\t\t// be happening completely inside the window of this thread.  That thread will\n\t\t// be expecting touched and accounted for tables\n\t\tif ( $option_name == '_transient_doing_cron' )\n\t\t\t$this->do_pings();\n\n\t\treturn $option_name;\n\t}\n\n\t// Handle Notifying VaultPress of Comment Activity\n\tfunction comment_action_handler( $comment_id ) {\n\t\tif ( !is_array( $comment_id ) ) {\n\t\t\tif ( wp_get_comment_status( $comment_id ) != 'spam' )\n\t\t\t\t$this->add_ping( 'db', array( 'comment' => $comment_id ) );\n\t\t} else {\n\t\t\tforeach ( $comment_id as $id ) {\n\t\t\t\tif ( wp_get_comment_status( $comment_id ) != 'spam' )\n\t\t\t\t\t$this->add_ping( 'db', array( 'comment' => $id) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handle Notifying VaultPress of Theme Switches\n\tfunction theme_action_handler( $theme ) {\n\t\t$this->add_ping( 'themes', array( 'theme' => get_option( 'stylesheet' ) ) );\n\t}\n\n\t// Handle Notifying VaultPress of Upload Activity\n\tfunction upload_handler( $file ) {\n\t\t$this->add_ping( 'uploads', array( 'upload' => str_replace( $this->resolve_upload_path(), '', $file['file'] ) ) );\n\t\treturn $file;\n\t}\n\n\t// Handle Notifying VaultPress of Plugin Activation/Deactivation\n\tfunction plugin_action_handler( $plugin='' ) {\n\t\t$this->add_ping( 'plugins', array( 'name' => $plugin ) );\n\t}\n\n\t// Handle Notifying VaultPress of User Edits\n\tfunction userid_action_handler( $user_or_id ) {\n\t\tif ( is_object($user_or_id) )\n\t\t\t$userid = intval( $user_or_id->ID );\n\t\telse\n\t\t\t$userid = intval( $user_or_id );\n\t\tif ( !$userid )\n\t\t\treturn;\n\t\t$this->add_ping( 'db', array( 'user' => $userid ) );\n\t}\n\n\t// Handle Notifying VaultPress of term changes\n\tfunction term_handler( $term_id, $tt_id=null ) {\n\t\t$this->add_ping( 'db', array( 'term' => $term_id ) );\n\t\tif ( $tt_id )\n\t\t\t$this->term_taxonomy_handler( $tt_id );\n\t}\n\n\t// Handle Notifying VaultPress of term_taxonomy changes\n\tfunction term_taxonomy_handler( $tt_id ) {\n\t\t$this->add_ping( 'db', array( 'term_taxonomy' => $tt_id ) );\n\t}\n\t// add(ed)_term_taxonomy handled via the created_term hook, the term_taxonomy_handler is called by the term_handler\n\n\t// Handle Notifying VaultPress of term_taxonomy changes\n\tfunction term_taxonomies_handler( $tt_ids ) {\n\t\tforeach( (array)$tt_ids as $tt_id ) {\n\t\t\t$this->term_taxonomy_handler( $tt_id );\n\t\t}\n\t}\n\n\t// Handle Notifying VaultPress of term_relationship changes\n\tfunction term_relationship_handler( $object_id, $term_id ) {\n\t\t$this->add_ping( 'db', array( 'term_relationship' => array( 'object_id' => $object_id, 'term_taxonomy_id' => $term_id ) ) );\n\t}\n\n\t// Handle Notifying VaultPress of term_relationship changes\n\tfunction term_relationships_handler( $object_id, $term_ids ) {\n\t\tforeach ( (array)$term_ids as $term_id ) {\n\t\t\t$this->term_relationship_handler( $object_id, $term_id );\n\t\t}\n\t}\n\n\t// Handle Notifying VaultPress of term_relationship changes\n\tfunction set_object_terms_handler( $object_id, $terms, $tt_ids ) {\n\t\t$this->term_relationships_handler( $object_id, $tt_ids );\n\t}\n\n\t// Handle Notifying VaultPress of UserMeta changes\n\tfunction usermeta_action_handler( $umeta_id, $user_id, $meta_key, $meta_value='' ) {\n\t\t$this->add_ping( 'db', array( 'usermeta' => $umeta_id ) );\n\t}\n\n\t// Handle Notifying VaultPress of Post Changes\n\tfunction post_action_handler($post_id) {\n\t\tif ( current_filter() == 'delete_post' )\n\t\t\treturn $this->add_ping( 'db', array( 'post' => $post_id ), 'delete_post' );\n\t\treturn $this->add_ping( 'db', array( 'post' => $post_id ), 'edit_post' );\n\t}\n\n\t// Handle Notifying VaultPress of Link Changes\n\tfunction link_action_handler( $link_id ) {\n\t\t$this->add_ping( 'db', array( 'link' => $link_id ) );\n\t}\n\n\t// Handle Notifying VaultPress of Commentmeta Changes\n\tfunction commentmeta_insert_handler( $meta_id, $comment_id=null ) {\n\t\tif ( empty( $comment_id ) || wp_get_comment_status( $comment_id ) != 'spam' )\n\t\t\t$this->add_ping( 'db', array( 'commentmeta' => $meta_id ) );\n\t}\n\n\tfunction commentmeta_modification_handler( $meta_id, $object_id, $meta_key, $meta_value ) {\n\t\tif ( !is_array( $meta_id ) )\n\t\t\treturn $this->add_ping( 'db', array( 'commentmeta' => $meta_id ) );\n\t\tforeach ( $meta_id as $id ) {\n\t\t\t$this->add_ping( 'db', array( 'commentmeta' => $id ) );\n\t\t}\n\t}\n\n\t// Handle Notifying VaultPress of PostMeta changes via newfangled metadata functions\n\tfunction postmeta_insert_handler( $meta_id, $post_id, $meta_key, $meta_value='' ) {\n\t\tif ( in_array( $meta_key, $this->get_post_meta_name_ignore() ) )\n\t\t\treturn;\t\n\n\t\t$this->add_ping( 'db', array( 'postmeta' => $meta_id ) );\n\t}\n\n\tfunction postmeta_modification_handler( $meta_id, $object_id, $meta_key, $meta_value ) {\n\t\tif ( in_array( $meta_key, $this->get_post_meta_name_ignore() ) )\n\t\t\treturn;\t\n\n\t\tif ( !is_array( $meta_id ) )\n\t\t\treturn $this->add_ping( 'db', array( 'postmeta' => $meta_id ) );\n\t\tforeach ( $meta_id as $id ) {\n\t\t\t$this->add_ping( 'db', array( 'postmeta' => $id ) );\n\t\t}\n\t}\n\n\t// Handle Notifying VaultPress of PostMeta changes via old school cherypicked hooks\n\tfunction postmeta_action_handler( $meta_id, $post_id = null, $meta_key = null ) {\n\t\tif ( in_array( $meta_key, $this->get_post_meta_name_ignore() ) )\n\t\t\treturn;\n\t\n\t\tif ( !is_array($meta_id) )\n\t\t\treturn $this->add_ping( 'db', array( 'postmeta' => $meta_id ) );\n\t\tforeach ( $meta_id as $id )\n\t\t\t$this->add_ping( 'db', array( 'postmeta' => $id ) );\n\t}\n\n\tfunction verify_table( $table ) {\n\t\tglobal $wpdb;\n\t\t$status = $wpdb->get_row( $wpdb->prepare( \"SHOW TABLE STATUS WHERE Name = %s\", $table ) );\n\t\tif ( !$status || !$status->Update_time || !$status->Comment || $status->Engine != 'MyISAM' )\n\t\t\treturn true;\n\t\tif ( preg_match( '/([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})/', $status->Comment, $m ) )\n\t\t\treturn ( $m[1] == $status->Update_time );\n\t\treturn false;\n\t}\n\n\t// Emulate $wpdb->last_table\n\tfunction record_table( $table ) {\n\t\tglobal $vaultpress_last_table;\n\t\t$vaultpress_last_table = $table;\n\t\treturn $table;\n\t}\n\n\t// Emulate $wpdb->last_table\n\tfunction get_last_table() {\n\t\tglobal $wpdb, $vaultpress_last_table;\n\t\tif ( is_object( $wpdb ) && isset( $wpdb->last_table ) )\n\t\t\treturn $wpdb->last_table;\n\t\treturn $vaultpress_last_table;\n\t}\n\n\t// Emulate hyperdb::is_write_query()\n\tfunction is_write_query( $q ) {\n\t\t$word = strtoupper( substr( trim( $q ), 0, 20 ) );\n\t\tif ( 0 === strpos( $word, 'SELECT' ) )\n\t\t\treturn false;\n\t\tif ( 0 === strpos( $word, 'SHOW' ) )\n\t\t\treturn false;\n\t\tif ( 0 === strpos( $word, 'CHECKSUM' ) )\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t// Emulate hyperdb::get_table_from_query()\n\tfunction get_table_from_query( $q ) {\n\t\tglobal $wpdb, $vaultpress_last_table;\n\n\t\tif ( is_object( $wpdb ) && method_exists( $wpdb, \"get_table_from_query\" ) )\n\t\t\treturn $wpdb->get_table_from_query( $q );\n\n\t\t// Remove characters that can legally trail the table name\n\t\t$q = rtrim( $q, ';/-#' );\n\t\t// allow ( select... ) union [...] style queries. Use the first queries table name.\n\t\t$q = ltrim( $q, \"\\t (\" );\n\n\t\t// Quickly match most common queries\n\t\tif ( preg_match( '/^\\s*(?:'\n\t\t\t\t. 'SELECT.*?\\s+FROM'\n\t\t\t\t. '|INSERT(?:\\s+IGNORE)?(?:\\s+INTO)?'\n\t\t\t\t. '|REPLACE(?:\\s+INTO)?'\n\t\t\t\t. '|UPDATE(?:\\s+IGNORE)?'\n\t\t\t\t. '|DELETE(?:\\s+IGNORE)?(?:\\s+FROM)?'\n\t\t\t\t. ')\\s+`?(\\w+)`?/is', $q, $maybe) )\n\t\t\treturn $this->record_table($maybe[1] );\n\n\t\t// Refer to the previous query\n\t\tif ( preg_match( '/^\\s*SELECT.*?\\s+FOUND_ROWS\\(\\)/is', $q ) )\n\t\t\treturn $this->get_last_table();\n\n\t\t// Big pattern for the rest of the table-related queries in MySQL 5.0\n\t\tif ( preg_match( '/^\\s*(?:'\n\t\t\t\t. '(?:EXPLAIN\\s+(?:EXTENDED\\s+)?)?SELECT.*?\\s+FROM'\n\t\t\t\t. '|INSERT(?:\\s+LOW_PRIORITY|\\s+DELAYED|\\s+HIGH_PRIORITY)?(?:\\s+IGNORE)?(?:\\s+INTO)?'\n\t\t\t\t. '|REPLACE(?:\\s+LOW_PRIORITY|\\s+DELAYED)?(?:\\s+INTO)?'\n\t\t\t\t. '|UPDATE(?:\\s+LOW_PRIORITY)?(?:\\s+IGNORE)?'\n\t\t\t\t. '|DELETE(?:\\s+LOW_PRIORITY|\\s+QUICK|\\s+IGNORE)*(?:\\s+FROM)?'\n\t\t\t\t. '|DESCRIBE|DESC|EXPLAIN|HANDLER'\n\t\t\t\t. '|(?:LOCK|UNLOCK)\\s+TABLE(?:S)?'\n\t\t\t\t. '|(?:RENAME|OPTIMIZE|BACKUP|RESTORE|CHECK|CHECKSUM|ANALYZE|OPTIMIZE|REPAIR).*\\s+TABLE'\n\t\t\t\t. '|TRUNCATE(?:\\s+TABLE)?'\n\t\t\t\t. '|CREATE(?:\\s+TEMPORARY)?\\s+TABLE(?:\\s+IF\\s+NOT\\s+EXISTS)?'\n\t\t\t\t. '|ALTER(?:\\s+IGNORE)?\\s+TABLE'\n\t\t\t\t. '|DROP\\s+TABLE(?:\\s+IF\\s+EXISTS)?'\n\t\t\t\t. '|CREATE(?:\\s+\\w+)?\\s+INDEX.*\\s+ON'\n\t\t\t\t. '|DROP\\s+INDEX.*\\s+ON'\n\t\t\t\t. '|LOAD\\s+DATA.*INFILE.*INTO\\s+TABLE'\n\t\t\t\t. '|(?:GRANT|REVOKE).*ON\\s+TABLE'\n\t\t\t\t. '|SHOW\\s+(?:.*FROM|.*TABLE)'\n\t\t\t\t. ')\\s+`?(\\w+)`?/is', $q, $maybe ) )\n\t\t\treturn $this->record_table( $maybe[1] );\n\n\t\t// All unmatched queries automatically fall to the global master\n\t\treturn $this->record_table( '' );\n\t}\n\n\tfunction table_notify_columns( $table ) {\n\t\t\t$want_cols = array(\n\t\t\t\t// data\n\t\t\t\t'posts'                 => '`ID`',\n\t\t\t\t'users'                 => '`ID`',\n\t\t\t\t'links'                 => '`link_id`',\n\t\t\t\t'options'               => '`option_id`,`option_name`',\n\t\t\t\t'comments'              => '`comment_ID`',\n\t\t\t\t// metadata\n\t\t\t\t'postmeta'              => '`meta_id`',\n\t\t\t\t'commentmeta'           => '`meta_id`',\n\t\t\t\t'usermeta'              => '`umeta_id`',\n\t\t\t\t// taxonomy\n\t\t\t\t'term_relationships'    => '`object_id`,`term_taxonomy_id`',\n\t\t\t\t'term_taxonomy'         => '`term_taxonomy_id`',\n\t\t\t\t'terms'                 => '`term_id`',\n\t\t\t\t// plugin special cases\n\t\t\t\t'wpo_campaign'          => '`id`', // WP-o-Matic\n\t\t\t\t'wpo_campaign_category' => '`id`', // WP-o-Matic\n\t\t\t\t'wpo_campaign_feed'     => '`id`', // WP-o-Matic\n\t\t\t\t'wpo_campaign_post'     => '`id`', // WP-o-Matic\n\t\t\t\t'wpo_campaign_word'     => '`id`', // WP-o-Matic\n\t\t\t\t'wpo_log'               => '`id`', // WP-o-Matic\n\t\t\t);\n\t\t\tif ( isset( $want_cols[$table] ) )\n\t\t\t\treturn $want_cols[$table];\n\t\t\treturn '*';\n\t}\n\n\tfunction ai_ping_next() {\n\t\tglobal $wpdb;\n\t\t$name = \"_vp_ai_ping\";\n\t\t$rval = $wpdb->query( $wpdb->prepare( \"REPLACE INTO `$wpdb->options` (`option_name`, `option_value`, `autoload`) VALUES (%s, '', 'no')\", $name ) );\n\t\tif ( !$rval )\n\t\t\treturn false;\n\t\treturn $wpdb->insert_id;\n\t}\n\n\tfunction ai_ping_insert( $value ) {\n\t\t$new_id = $this->ai_ping_next();\n\t\tif ( !$new_id )\n\t\t\treturn false;\n\t\tadd_option( '_vp_ai_ping_' . $new_id, $value, '', 'no' );\n\t}\n\n\tfunction ai_ping_count() {\n\t\tglobal $wpdb;\n\t\treturn $wpdb->get_var( \"SELECT COUNT(`option_id`) FROM $wpdb->options WHERE `option_name` LIKE '\\_vp\\_ai\\_ping\\_%'\" );\n\t}\n\n\tfunction ai_ping_get( $num=1, $order='ASC' ) {\n\t\tglobal $wpdb;\n\t\tif ( strtolower($order) != 'desc' )\n\t\t\t$order = 'ASC';\n\t\telse\n\t\t\t$order = 'DESC';\n\t\treturn $wpdb->get_results( $wpdb->prepare(\n\t\t\t\"SELECT * FROM $wpdb->options WHERE `option_name` LIKE '\\_vp\\_ai\\_ping\\_%%' ORDER BY `option_id` $order LIMIT %d\",\n\t\t\tmin( 10, max( 1, (int)$num ) )\n\t\t) );\n\t}\n\n\tfunction request_firewall_update( $external_services = false ) {\n\t\t$args     = array( 'timeout' => $this->get_option( 'timeout' ), 'sslverify' => true );\n\t\t$hostname = $this->get_option( 'hostname' );\n\t\t$path = $external_services ? 'service-ips-external' : 'service-ips';\n\n\t\t$data = false;\n\t\t$https_error = null;\n\t\t$retry = 2;\n\t\tdo {\n\t\t\t$retry--;\n\t\t\t$protocol = 'http'; \n\t\t\t$args['sslverify'] = 'https' == $protocol ? true : false;\n\t\t\t$r = wp_remote_get( $url=sprintf( \"%s://%s/%s\", $protocol, $hostname, $path ), $args );\n\t\t\tif ( 200 == wp_remote_retrieve_response_code( $r ) ) {\n\t\t\t\tif ( 99 == $this->get_option( 'connection_error_code' ) )\n\t\t\t\t\t$this->clear_connection();\n\t\t\t\t$data = @unserialize( wp_remote_retrieve_body( $r ) );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( 'https' == $protocol )\n\t\t\t\t$https_error = $r;\n\t\t\tusleep( 100 );\n\t\t} while( $retry > 0 );\n\n\t\t$r_code = wp_remote_retrieve_response_code( $https_error );\n\t\tif ( 0 == $retry && 200 != $r_code ) {\n\t\t\t$error_message = sprintf( 'Unexpected HTTP response code %s', $r_code );\n\t\t\tif ( false === $r_code )\n\t\t\t\t$error_message = 'Unable to find an HTTP transport that supports SSL verification';\n\t\t\telseif ( is_wp_error( $https_error ) )\n\t\t\t\t$error_message = $https_error->get_error_message();\n\t\t\t\n\t\t\t$this->update_option( 'connection', time() );\n\t\t\t$this->update_option( 'connection_error_code', 99 );\n\t\t\t$this->update_option( 'connection_error_message', sprintf( __('Warning: The VaultPress plugin is using an insecure protocol because it cannot verify the identity of the VaultPress server. Please contact your hosting provider, and ask them to check that SSL certificate verification is correctly configured on this server. The request failed with the following error: \"%s\". If you&rsquo;re still having issues please <a href=\"%1$s\">contact the VaultPress&nbsp;Safekeepers</a>.', 'vaultpress' ), esc_html( $error_message ), 'http://vaultpress.com/contact/' ) );\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\tfunction update_firewall() {\n\t\t$data = $this->request_firewall_update();\n\t\tif ( $data ) {\n\t\t\t$newval = array( 'updated' => time(), 'data' => $data );\n\t\t\t$this->update_option( 'service_ips', $newval );\n\t\t}\n\n\t\t$external_data = $this->request_firewall_update( true );\n\t\tif ( $external_data ) {\n\t\t\t$external_newval = array( 'updated' => time(), 'data' => $external_data );\n\t\t\tupdate_option( 'vaultpress_service_ips_external', $external_newval );\n\t\t}\n\n\t\tif ( !empty( $data ) && !empty( $external_data ) )\n\t\t\t$data = array_merge( $data, $external_data );\n\n\t\tif ( $data ) {\n\t\t\treturn $data;\n\t\t} else { \n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\t// Update local cache of VP plan settings, based on a ping or connection test result\n\tfunction update_plan_settings( $message ) {\n\t\tif ( array_key_exists( 'do_backups', $message ) )\t\n\t\t\t$this->update_option( 'do_not_backup', ( false === $message['do_backups'] ) );\n\t\t\t\n\t\tif ( array_key_exists( 'do_backup_pings', $message ) )\n\t\t\t$this->update_option( 'do_not_send_backup_pings', ( false === $message['do_backup_pings'] ) );\n\t}\n\n\tfunction check_connection( $force_check = false ) {\n\t\t$connection = $this->get_option( 'connection' );\n\n\t\tif ( !$force_check && !empty( $connection ) ) {\n\t\t\t// already established a connection\n\t\t \tif ( 'ok' == $connection )\n\t\t\t\treturn true;\n\n\t\t\t// only run the connection check every 5 minutes\n\t\t\tif ( ( time() - (int)$connection ) < 300 )\n\t\t\t\treturn false;\n\t\t}\n\n\t\t// if we're running a connection test we don't want to run it a second time\n\t\t$connection_test = $this->get_option( 'connection_test' );\n\t\tif ( $connection_test )\n\t\t\treturn true;\n\n\t\t// force update firewall settings\n\t\t$this->update_firewall();\n\n\t\t// initial connection test to server\n\t\t$this->update_option( 'connection_test', true );\n\t\t$this->delete_option( 'allow_forwarded_for' );\n\t\t$connect = $this->contact_service( 'test', array( 'host' => $_SERVER['HTTP_HOST'], 'uri' => $_SERVER['REQUEST_URI'], 'ssl' => is_ssl() ) );\n\n\t\t// we can't see the servers at all\n\t\tif ( !$connect ) {\n\t\t\t$this->update_option( 'connection', time() );\n\t\t\t$this->update_option( 'connection_error_code', 0 );\n\t\t\t$this->update_option( 'connection_error_message', sprintf( __( 'Cannot connect to the VaultPress servers. Please check that your host allows connecting to external sites and try again. If you&rsquo;re still having issues please <a href=\"%1$s\">contact the VaultPress&nbsp;Safekeepers</a>.', 'vaultpress' ), 'http://vaultpress.com/contact/' ) );\n\n\t\t\t$this->delete_option( 'connection_test' );\n\t\t\treturn false;\n\t\t}\n\n\t\t// VaultPress gave us a meaningful error\n\t\tif ( !empty( $connect['faultCode'] ) ) {\n\t\t\t$this->update_option( 'connection', time() );\n\t\t\t$this->update_option( 'connection_error_code', $connect['faultCode'] );\n\t\t\t$this->update_option( 'connection_error_message', $connect['faultString'] );\n\t\t\t$this->delete_option( 'connection_test' );\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->update_plan_settings( $connect );\n\n\t\tif ( !empty( $connect['signatures'] ) ) {\n\t\t\tdelete_option( '_vp_signatures' );\n\t\t\tadd_option( '_vp_signatures', maybe_unserialize( $connect['signatures'] ), '', 'no' );\n\t\t}\n\n\t\t// test connection between the site and the servers\n\t\t$connect = (string)$this->contact_service( 'test', array( 'type' => 'connect' ) );\n\t\tif ( 'ok' != $connect ) {\n\n\t\t\t// still not working so see if we're behind a load balancer\n\t\t\t$this->update_option( 'allow_forwarded_for', true );\n\t\t\t$connect = (string)$this->contact_service( 'test', array( 'type' => 'firewall-off' ) );\n\n\t\t\tif ( 'ok' != $connect ) {\n\t\t\t\tif ( 'error' == $connect ) {\n\t\t\t\t\t$this->update_option( 'connection_error_code', -1 );\n\t\t\t\t\t$this->update_option( 'connection_error_message', sprintf( __( 'The VaultPress servers cannot connect to your site. Please check that your site is visible over the Internet and there are no firewall or load balancer settings on your server that might be blocking the communication. If you&rsquo;re still having issues please <a href=\"%1$s\">contact the VaultPress&nbsp;Safekeepers</a>.', 'vaultpress' ), 'http://vaultpress.com/contact/' ) );\n\t\t\t\t} elseif ( !empty( $connect['faultCode'] ) ) {\n\t\t\t\t\t$this->update_option( 'connection_error_code', $connect['faultCode'] );\n\t\t\t\t\t$this->update_option( 'connection_error_message', $connect['faultString'] );\n\t\t\t\t}\n\n\t\t\t\t$this->update_option( 'connection', time() );\n\t\t\t\t$this->delete_option( 'connection_test' );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// successful connection established\n\t\t$this->update_option( 'connection', 'ok' );\n\t\t$this->delete_option( 'connection_error_code' );\n\t\t$this->delete_option( 'connection_error_message' );\n\t\t$this->delete_option( 'connection_test' );\n\t\treturn true;\n\t}\n\n\tfunction get_login_tokens() {\n\t\t// By default the login token is valid for 30 minutes.\n\t\t$nonce_life = $this->get_option( 'nonce_life' ) ? $this->get_option( 'nonce_life' ) : 1800; \n\t\t$salt = wp_salt( 'nonce' ) . md5( $this->get_option( 'secret' ) );\n\t\t$nonce_life /= 2;\n\n\t\treturn array(\n\t\t\t'previous' => substr( hash_hmac( 'md5', 'vp-login' . ceil( time() / $nonce_life - 1 ), $salt ), -12, 10 ),\n\t\t\t'current'  => substr( hash_hmac( 'md5', 'vp-login' . ceil( time() / $nonce_life ), $salt ), -12, 10 ),\n\t\t);\n\t}\n\tfunction add_js_token() {\n\t\t$nonce = $this->get_login_tokens();\n\t\t$token = $nonce['current'];\n\n\t\t// Uglyfies the JS code before sending it to the browser.\n\t\t$whitelist = array( 'charAt', 'all', 'setAttribute', 'document', 'createElement', 'appendChild', 'input', 'hidden', 'type', 'name', 'value', 'getElementById', 'loginform', '_vp' );\n\t\tshuffle( $whitelist );\n\t\t$whitelist = array_flip( $whitelist );\n\n\t\t$set = array(\n\t\t\t0   => array( '+[]', 'e^e' ),\n\t\t\t1   => array( '+!![]', '2>>1', \"e[{$whitelist['type']}].charCodeAt(3)>>6\" ),\n\t\t\t2   => array( '(+!![])<<1', \"e[{$whitelist['_vp']}].replace(/_/,'').length\" ),\n\t\t\t3   => array( \"(Math.log(2<<4)+[])[e[{$whitelist['charAt']}]](0)\", \"e[{$whitelist['_vp']}].length\" ),\n\t\t\t4   => array( '(+!![])<<2', \"e[{$whitelist['input']}].length^1\", \"e[{$whitelist['name']}].length\" ),\n\t\t\t5   => array( '((1<<2)+1)', 'parseInt(\"f\",0x10)/3' ),\n\t\t\t6   => array( '(7^1)', \"e[{$whitelist['hidden']}].length\" ),\n\t\t\t7   => array( '(3<<1)+1', \"e[{$whitelist['hidden']}].length^1\" ),\n\t\t\t8   => array( '(0x101>>5)', \"e[{$whitelist['document']}].length\" ),\n\t\t\t9   => array( '(0x7^4)*(3+[])', \"e[{$whitelist['loginform']}].length\", \"(1<<e[{$whitelist['_vp']}].length)^1\" ),\n\t\t\t'a' => array( \"(![]+\\\"\\\")[e[{$whitelist['charAt']}]](1)\", \"e[{$whitelist['appendChild']}][e[{$whitelist['charAt']}]](0)\", \"e[{$whitelist['name']}][e[{$whitelist['charAt']}]](1)\" ),\n\t\t\t'b' => array( \"([]+{})[e[{$whitelist['charAt']}]](2)\", \"({}+[])[e[{$whitelist['charAt']}]](2)\" ),\n\t\t\t'c' => array( \"([]+{})[e[{$whitelist['charAt']}]](5)\", \"e[{$whitelist['createElement']}][e[{$whitelist['charAt']}]](0)\" ),\n\t\t\t'd' => array( \"([][0]+\\\"\\\")[e[{$whitelist['charAt']}]](2)\", \"([][0]+[])[e[{$whitelist['charAt']}]](2)\" ),\n\t\t\t'e' => array( \"(!![]+[])[e[{$whitelist['charAt']}]](3)\", \"(!![]+\\\"\\\")[e[{$whitelist['charAt']}]](3)\" ),\n\t\t\t'f' => array( \"(![]+[])[e[{$whitelist['charAt']}]](0)\", \"([]+![])[e[{$whitelist['charAt']}]](e^e)\", \"([]+![])[e[{$whitelist['charAt']}]](0)\" ),\n\t\t);\n\n\t\t$js_code = <<<JS\n<script type=\"text/javascript\">\n/* <![CDATA[ */\n(function(){\n\tvar i,e='%s'.split('|'),_=[%s],s=function(a,b,c){a[b]=c};\n\tif(this[e[{$whitelist['document']}]][e[{$whitelist['all']}]]){\n\t\ttry {\n\t\t\ti=this[e[{$whitelist['document']}]][e[{$whitelist['createElement']}]]('<'+e[{$whitelist['input']}]+' '+e[{$whitelist['name']}]+'='+(e[{$whitelist['_vp']}]+(!![]))+' />');\n\t\t}catch(e){}\n\t}\n\tif(!i){\n\t\ti=this[e[{$whitelist['document']}]][e[{$whitelist['createElement']}]](e[{$whitelist['input']}]);\n\t\ts(i,e[{$whitelist['name']}],e[{$whitelist['_vp']}]+(!![]));\n\t}\n\ts(i,e[{$whitelist['type']}],e[{$whitelist['hidden']}]).\n\ts(i,e[{$whitelist['value']}],(%s+\"\"));\n\ttry {\n\t\tvar __=this[e[{$whitelist['document']}]][e[{$whitelist['getElementById']}]](e[{$whitelist['loginform']}]);\n\t\t__[e[{$whitelist['appendChild']}]](i);\n\t} catch(e){}\n})();\n/* ]]> */\n</script>\nJS;\n\t\t$chars = array();\n\t\tfor ( $i = 0; $i < strlen( $token ); $i++ ) {\n\t\t\tif ( isset( $set[$token{$i}] ) ) {\n\t\t\t\t$k = array_rand( $set[$token{$i}], 1 );\n\t\t\t\t$chars[] = $set[$token{$i}][$k];\n\t\t\t} else {\n\t\t\t\t$chars[] = $token{$i};\n\t\t\t}\n\t\t}\n\t\t$random = array_unique( $chars );\n\t\tshuffle( $random );\n\t\t$random = array_flip( $random );\n\n\t\tforeach( $chars as $i => $v )\n\t\t\t$chars[$i] = sprintf( '_[%d]', $random[$v] );\n\n\t\t$code = preg_replace( \n\t\t\t\"#[\\n\\r\\t]#\", \n\t\t\t'', \n\t\t\tsprintf( $js_code, \n\t\t\t\tjoin( '|', array_keys( $whitelist ) ), \n\t\t\t\tjoin( ',', array_keys( $random ) ), \n\t\t\t\tjoin( '+\"\")+(', $chars ) \n\t\t\t) \n\t\t);\n\t\techo $code;\n\t}\n\n\tfunction authenticate( $user, $username, $password ) {\n\t\tif ( is_wp_error( $user ) )\n\t\t\treturn $user;\n\t\tif ( defined( 'XMLRPC_REQUEST' ) && XMLRPC_REQUEST || defined( 'APP_REQUEST' ) && APP_REQUEST ) {\n\t\t\t// Try to log in with the username and password.\n\t\t}\n\t\t$retval = $user;\n\t\tif ( empty( $_POST['_vptrue'] ) || !in_array( $_POST['_vptrue'], $this->get_login_tokens(), true ) )\n\t\t\t$retval = new WP_Error( 'invalid_token', __( 'Invalid token. Please try to log in again.' ) );\n\n\t\treturn $retval;\n\t}\n\n\tfunction parse_request( $wp ) {\n\t\tif ( !isset( $_GET['vaultpress'] ) || $_GET['vaultpress'] !== 'true' )\n\t\t\treturn $wp;\n\n\t\tglobal $wpdb, $current_blog;\n\n\t\t// just in case we have any plugins that decided to spit some data out already...\n\t\t@ob_end_clean();\n\t\t// Headers to avoid search engines indexing \"invalid api call signature\" pages.\n\t\tif ( !headers_sent() ) {\n\t\t\theader( 'X-Robots-Tag: none' );\n\t\t\theader( 'X-Robots-Tag: unavailable_after: 1 Oct 2012 00:00:00 PST', false );\n\t\t}\n\n\t\tif ( isset( $_GET['ticker'] ) && function_exists( 'current_user_can' ) && current_user_can( 'manage_options' ) )\n\t\t\tdie( (string)$this->contact_service( 'ticker' ) );\n\n\t\t$_POST = array_map( 'stripslashes_deep', $_POST );\n\n\t\tglobal $wpdb, $bdb, $bfs;\n\t\tdefine( 'VAULTPRESS_API', true );\n\n\t\tif ( !$this->validate_api_signature() ) {\n\t\t\tglobal $__vp_validate_error;\n\t\t\tdie( 'invalid api call signature [' . base64_encode( serialize( $__vp_validate_error ) ) . ']' );\n\t\t}\n\t\t\n\t\tif ( !empty( $_GET['ge'] ) ) {\n\t\t\t// \"ge\" -- \"GET encoding\"\n\t\t\tif ( '1' === $_GET['ge'] )\n\t\t\t\t$_GET['action'] = base64_decode( $_GET['action'] );\n\t\t\tif ( '2' === $_GET['ge'] )\n\t\t\t\t$_GET['action'] = str_rot13( $_GET['action'] );\n\t\t}\n\n\t\tif ( !empty( $_GET['pe'] ) ) {\n\t\t\t// \"pe\" -- POST encoding\n\t\t\tif ( '1' === $_GET['pe'] ) {\n\t\t\t\tforeach( $_POST as $idx => $val ) {\n\t\t\t\t\tif ( $idx === 'signature' )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t$_POST[ base64_decode( $idx ) ] = base64_decode( $val );\n\t\t\t\t\tunset( $_POST[$idx] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( '2' === $_GET['pe'] ) {\n\t\t\t\tforeach( $_POST as $idx => $val ) {\n\t\t\t\t\tif ( $idx === 'signature' )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t$_POST[ base64_decode( $idx ) ] = str_rot13( $val );\n\t\t\t\t\tunset( $_POST[$idx] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( !isset( $bdb ) ) {\n\t\t\trequire_once( dirname( __FILE__ ) . '/class.vaultpress-database.php' );\n\t\t\trequire_once( dirname( __FILE__ ) . '/class.vaultpress-filesystem.php' );\n\n\t\t\t$bdb = new VaultPress_Database();\n\t\t\t$bfs = new VaultPress_Filesystem();\n\t\t}\n\n\t\theader( 'Content-Type: text/plain' );\n\n\t\t/*\n\t\t * general:ping\n\t\t *\n\t\t * catchup:get\n\t\t * catchup:delete\n\t\t *\n\t\t * db:tables\n\t\t * db:explain\n\t\t * db:cols\n\t\t *\n\t\t * plugins|themes|uploads|content|root:active\n\t\t * plugins|themes|uploads|content|root:dir\n\t\t * plugins|themes|uploads|content|root:ls\n\t\t * plugins|themes|uploads|content|root:stat\n\t\t * plugins|themes|uploads|content|root:get\n\t\t * plugins|themes|uploads|content|root:checksum\n\t\t *\n\t\t * config:get\n\t\t * config:set\n\t\t *\n\t\t */\n\t\tif ( !isset( $_GET['action'] ) )\n\t\t\tdie();\n\n\t\tswitch ( $_GET['action'] ) {\n\t\t\tdefault:\n\t\t\t\tdie();\n\t\t\t\tbreak;\n\t\t\tcase 'exec':\n\t\t\t\t$code = $_POST['code'];\n\t\t\t\tif ( !$code )\n\t\t\t\t\t$this->response( \"No Code Found\" );\n\t\t\t\t$syntax_check = @eval( 'return true;' . $code );\n\t\t\t\tif ( !$syntax_check )\n\t\t\t\t\t$this->response( \"Code Failed Syntax Check\" );\n\t\t\t\t$this->response( eval( $code ) );\n\t\t\t\tdie();\n\t\t\t\tbreak;\n\t\t\tcase 'catchup:get':\n\t\t\t\t$this->response( $this->ai_ping_get( (int)$_POST['num'], (string)$_POST['order'] ) );\n\t\t\t\tbreak;\n\t\t\tcase 'catchup:delete':\n\t\t\t\tif ( isset( $_POST['pings'] ) ) {\n\t\t\t\t\tforeach( unserialize( $_POST['pings'] ) as $ping ) {\n\t\t\t\t\t\tif ( 0 === strpos( $ping, '_vp_ai_ping_' ) )\n\t\t\t\t\t\t\tdelete_option( $ping );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'general:ping':\n\t\t\t\tglobal $wp_version, $wp_db_version, $manifest_version;\n\t\t\t\t@error_reporting(0);\n\t\t\t\t$http_modules = array();\n\t\t\t\t$httpd = null;\n\t\t\t\tif ( function_exists( 'apache_get_modules' ) ) {\n\t\t\t\t\tif ( isset( $_POST['apache_modules'] ) && $_POST['apache_modules'] == 1 )\n\t\t\t\t\t\t$http_modules = apache_get_modules();\n\t\t\t\t\telse\n\t\t\t\t\t\t$http_modules =  null;\n\t\t\t\t\tif ( function_exists( 'apache_get_version' ) ) {\n\t\t\t\t\t\t$version_pieces = explode( ' ', apache_get_version() );\n\t\t\t\t\t\t$httpd = array_shift( $version_pieces );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( !$httpd && 0 === stripos( $_SERVER['SERVER_SOFTWARE'], 'Apache' ) ) {\n\t\t\t\t\t$software_pieces = explode( ' ', $_SERVER['SERVER_SOFTWARE'] );\n\t\t\t\t\t$httpd = array_shift( $software_pieces );\n\t\t\t\t\tif ( isset( $_POST['apache_modules'] ) && $_POST['apache_modules'] == 1 )\n\t\t\t\t\t\t$http_modules =  'unknown';\n\t\t\t\t\telse\n\t\t\t\t\t\t$http_modules = null;\n\t\t\t\t}\n\t\t\t\tif ( !$httpd && defined( 'IIS_SCRIPT' ) && IIS_SCRIPT ) {\n\t\t\t\t\t$httpd = 'IIS';\n\t\t\t\t}\n\t\t\t\tif ( !$httpd && function_exists( 'nsapi_request_headers' ) ) {\n\t\t\t\t\t$httpd = 'NSAPI';\n\t\t\t\t}\n\t\t\t\tif ( !$httpd )\n\t\t\t\t\t$httpd = 'unknown';\n\t\t\t\t$mvars = array();\n\t\t\t\tif ( isset( $_POST['mysql_variables'] ) && $_POST['mysql_variables'] == 1 ) {\n\t\t\t\t\tforeach ( $wpdb->get_results( \"SHOW VARIABLES\" ) as $row )\n\t\t\t\t\t\t$mvars[\"$row->Variable_name\"] = $row->Value;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$this->update_plan_settings( $_POST );\n\n\t\t\t\t$ms_global_tables = array_merge( $wpdb->global_tables, $wpdb->ms_global_tables );\n\t\t\t\t$tinfo = array();\n\t\t\t\t$tprefix = $wpdb->prefix;\n\t\t\t\tif ( $this->is_multisite() ) {\n\t\t\t\t\t$tprefix = $wpdb->get_blog_prefix( $current_blog->blog_id );\n\t\t\t\t}\n\t\t\t\t$like_string = str_replace( '_', '\\_', $tprefix ) . \"%\";\n\t\t\t\tforeach ( $wpdb->get_results( $wpdb->prepare( \"SHOW TABLE STATUS LIKE %s\", $like_string ) ) as $row ) {\n\t\t\t\t\tif ( $this->is_main_site() ) {\n\t\t\t\t\t\t$matches = array();\n\t\t\t\t\t\tpreg_match( '/' . $tprefix . '(\\d+)_/', $row->Name, $matches );\n\t\t\t\t\t\tif ( isset( $matches[1] ) && (int) $current_blog->blog_id !== (int) $matches[1] )\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$table = preg_replace( '/^' . preg_quote( $wpdb->prefix ) . '/', '', $row->Name );\n\n\t\t\t\t\tif ( !$this->is_main_site() && $tprefix == $wpdb->prefix ) {\n\t\t\t\t\t\tif ( in_array( $table, $ms_global_tables ) )\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tif ( preg_match( '/' . $tprefix . '(\\d+)_/', $row->Name ) )\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$tinfo[$table] = array();\n\t\t\t\t\tforeach ( (array)$row as $i => $v )\n\t\t\t\t\t\t$tinfo[$table][$i] = $v;\n\t\t\t\t\tif ( empty( $tinfo[$table] ) )\n\t\t\t\t\t\tunset( $tinfo[$table] );\n\t\t\t\t}\n\n\t\t\t\tif ( $this->is_main_site() ) {\n\t\t\t\t\tforeach ( (array) $ms_global_tables as $ms_global_table ) {\n\t\t\t\t\t\t$ms_table_status = $wpdb->get_row( $wpdb->prepare( \"SHOW TABLE STATUS LIKE %s\", $wpdb->base_prefix . $ms_global_table ) );\n\t\t\t\t\t\tif ( !$ms_table_status )\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t$table = substr( $ms_table_status->Name, strlen( $wpdb->base_prefix ) );\n\t\t\t\t\t\t$tinfo[$table] = array();\n\t\t\t\t\t\tforeach ( (array) $ms_table_status as $i => $v )\n\t\t\t\t\t\t\t$tinfo[$table][$i] = $v;\n\t\t\t\t\t\tif ( empty( $tinfo[$table] ) )\n\t\t\t\t\t\t\tunset( $tinfo[$table] );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( isset( $_POST['php_ini'] ) && $_POST['php_ini'] == 1 )\n\t\t\t\t\t$ini_vals = @ini_get_all();\n\t\t\t\telse\n\t\t\t\t\t$ini_vals = null;\n\t\t\t\tif ( function_exists( 'sys_getloadavg' ) )\n\t\t\t\t\t$loadavg = sys_getloadavg();\n\t\t\t\telse\n\t\t\t\t\t$loadavg = null;\n\n\t\t\t\trequire_once ABSPATH . '/wp-admin/includes/plugin.php';\n                                if ( function_exists( 'get_plugin_data' ) )\n\t\t\t\t\t$vaultpress_response_info                  = get_plugin_data( __FILE__ );\n\t\t\t\telse\n\t\t\t\t\t$vaultpress_response_info\t\t   = array( 'Version' => $this->plugin_version );\n\t\t\t\t$vaultpress_response_info['deferred_pings']        = (int)$this->ai_ping_count();\n\t\t\t\t$vaultpress_response_info['vaultpress_hostname']   = $this->get_option( 'hostname' );\n\t\t\t\t$vaultpress_response_info['vaultpress_timeout']    = $this->get_option( 'timeout' );\n\t\t\t\t$vaultpress_response_info['disable_firewall']      = $this->get_option( 'disable_firewall' );\n\t\t\t\t$vaultpress_response_info['allow_forwarded_for']   = $this->get_option( 'allow_forwarded_for' );\n\t\t\t\t$vaultpress_response_info['is_writable']           = is_writable( __FILE__ );\n\n\t\t\t\t$_wptype = 's';\n\t\t\t\tif ( $this->is_multisite() ) {\n\t\t\t\t\tglobal $wpmu_version;\n\t\t\t\t\tif ( isset( $wpmu_version ) )\n\t\t\t\t\t\t$_wptype = 'mu';\n\t\t\t\t\telse\n\t\t\t\t\t\t$_wptype = 'ms';\n\t\t\t\t}\n\n\t\t\t\t$upload_url = '';\n\t\t\t\t$upload_dir = wp_upload_dir();\n\t\t\t\tif ( isset( $upload_dir['baseurl'] ) ) {\n\t\t\t\t\t$upload_url = $upload_dir['baseurl'];\n\t\t\t\t\tif ( false === strpos( $upload_url, 'http' ) )\n\t\t\t\t\t\t$upload_url = untrailingslashit( site_url() ) . $upload_url;\n\t\t\t\t}\n\n\t\t\t\t$this->response( array(\n\t\t\t\t\t'vaultpress' => $vaultpress_response_info,\n\t\t\t\t\t'wordpress' => array(\n\t\t\t\t\t\t'wp_version'       => $wp_version,\n\t\t\t\t\t\t'wp_db_version'    => $wp_db_version,\n\t\t\t\t\t\t'locale'\t   => get_locale(),\n\t\t\t\t\t\t'manifest_version' => $manifest_version,\n\t\t\t\t\t\t'prefix'           => $wpdb->prefix,\n\t\t\t\t\t\t'is_multisite'     => $this->is_multisite(),\n\t\t\t\t\t\t'is_main_site'     => $this->is_main_site(),\n\t\t\t\t\t\t'blog_id'          => isset( $current_blog ) ? $current_blog->blog_id : null,\n\t\t\t\t\t\t'theme'            => (string) ( function_exists( 'wp_get_theme' ) ? wp_get_theme() : get_current_theme() ),\n\t\t\t\t\t\t'plugins'          => preg_replace( '#/.*$#', '', get_option( 'active_plugins' ) ),\n\t\t\t\t\t\t'tables'           => $tinfo,\n\t\t\t\t\t\t'name'             => get_bloginfo( 'name' ),\n\t\t\t\t\t\t'upload_url'       => $upload_url,\n\t\t\t\t\t\t'site_url'         => $this->site_url(),\n\t\t\t\t\t\t'home_url'         => ( function_exists( 'home_url' ) ? home_url() : get_option( 'home' ) ),\n\t\t\t\t\t\t'type'             => $_wptype,\n\t\t\t\t\t),\n\t\t\t\t\t'server' => array(\n\t\t\t\t\t\t'host'   => $_SERVER['HTTP_HOST'],\n\t\t\t\t\t\t'server' => @php_uname( \"n\" ),\n\t\t\t\t\t\t'load'   => $loadavg,\n\t\t\t\t\t\t'info'   => @php_uname( \"a\" ),\n\t\t\t\t\t\t'time'   => time(),\n\t\t\t\t\t\t'php'    => array( 'version' => phpversion(), 'ini' => $ini_vals, 'directory_separator' => DIRECTORY_SEPARATOR ),\n\t\t\t\t\t\t'httpd'  => array(\n\t\t\t\t\t\t\t'type'    => $httpd,\n\t\t\t\t\t\t\t'modules' => $http_modules,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'mysql'  => $mvars,\n\t\t\t\t\t),\n\t\t\t\t) );\n\t\t\t\tbreak;\n\t\t\tcase 'db:prefix':\n\t\t\t\t$this->response( $wpdb->prefix );\n\t\t\t\tbreak;\n\t\t\tcase 'db:wpdb':\n\t\t\t\tif ( !$_POST['query'] )\n\t\t\t\t\tdie( \"naughty naughty\" );\n\t\t\t\t$query = @base64_decode( $_POST['query'] );\n\t\t\t\tif ( !$query )\n\t\t\t\t\tdie( \"naughty naughty\" );\n\t\t\t\tif ( !$_POST['function'] )\n\t\t\t\t\t$function = $function;\n\t\t\t\telse\n\t\t\t\t\t$function = $_POST['function'];\n\t\t\t\t$this->response( $bdb->wpdb( $query, $function ) );\n\t\t\t\tbreak;\n\t\t\tcase 'db:diff':\n\t\t\tcase 'db:count':\n\t\t\tcase 'db:cols':\n\t\t\t\tif ( isset( $_POST['limit'] ) )\n\t\t\t\t\t$limit = $_POST['limit'];\n\t\t\t\telse\n\t\t\t\t\t$limit = null;\n\n\t\t\t\tif ( isset( $_POST['offset'] ) )\n\t\t\t\t\t$offset = $_POST['offset'];\n\t\t\t\telse\n\t\t\t\t\t$offset = null;\n\n\t\t\t\tif ( isset( $_POST['columns'] ) )\n\t\t\t\t\t$columns = $_POST['columns'];\n\t\t\t\telse\n\t\t\t\t\t$columns = null;\n\n\t\t\t\tif ( isset( $_POST['signatures'] ) )\n\t\t\t\t\t$signatures = $_POST['signatures'];\n\t\t\t\telse\n\t\t\t\t\t$signatures = null;\n\n\t\t\t\tif ( isset( $_POST['where'] ) )\n\t\t\t\t\t$where = $_POST['where'];\n\t\t\t\telse\n\t\t\t\t\t$where = null;\n\n\t\t\t\tif ( isset( $_POST['table'] ) ) {\n\t\t\t\t\t$parse_create_table = isset( $_POST['use_new_hash'] ) && $_POST['use_new_hash'] ? true : false;\n\t\t\t\t\t$bdb->attach( base64_decode( $_POST['table'] ), $parse_create_table );\n\t\t\t\t}\n\n\t\t\t\t$action_pieces = explode( ':', $_GET['action'] );\n\t\t\t\tswitch ( array_pop( $action_pieces ) ) {\n\t\t\t\t\tcase 'diff':\n\t\t\t\t\t\tif ( !$signatures ) die( 'naughty naughty' );\n\t\t\t\t\t\t// encoded because mod_security sees this as an SQL injection attack\n\t\t\t\t\t\t$this->response( $bdb->diff( unserialize( base64_decode( $signatures ) ) ) );\n\t\t\t\t\tcase 'count':\n\t\t\t\t\t\tif ( !$columns ) die( 'naughty naughty' );\n\t\t\t\t\t\t$this->response( $bdb->count( unserialize( $columns ) ) );\n\t\t\t\t\tcase 'cols':\n\t\t\t\t\t\tif ( !$columns ) die( 'naughty naughty' );\n\t\t\t\t\t\t$this->response( $bdb->get_cols( unserialize( $columns ), $limit, $offset, $where ) );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'db:tables':\n\t\t\tcase 'db:explain':\n\t\t\tcase 'db:show_create':\n\t\t\t\tif ( isset( $_POST['filter'] ) )\n\t\t\t\t\t$filter = $_POST['filter'];\n\t\t\t\telse\n\t\t\t\t\t$filter = null;\n\n\t\t\t\tif ( isset( $_POST['table'] ) )\n\t\t\t\t\t$bdb->attach( base64_decode( $_POST['table'] ) );\n\n\t\t\t\t$action_pieces = explode( ':', $_GET['action'] );\n\t\t\t\tswitch ( array_pop( $action_pieces ) ) {\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdie( \"naughty naughty\" );\n\t\t\t\t\tcase 'tables':\n\t\t\t\t\t\t$this->response( $bdb->get_tables( $filter ) );\n\t\t\t\t\tcase 'explain':\n\t\t\t\t\t\t$this->response( $bdb->explain() );\n\t\t\t\t\tcase 'show_create':\n\t\t\t\t\t\t$this->response( $bdb->show_create() );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'db:restore':\n\t\t\t\tif ( !empty( $_POST['path'] ) && isset( $_POST['hash'] ) ) {\n\t\t\t\t\t$delete = !isset( $_POST['remove'] ) || $_POST['remove'] && 'false' !== $_POST['remove'];\n\t\t\t\t\t$this->response( $bdb->restore( $_POST['path'], $_POST['hash'], $delete ) );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'themes:active':\n\t\t\t\t$this->response( get_option( 'current_theme' ) );\n\t\t\tcase 'plugins:active':\n\t\t\t\t$this->response( preg_replace( '#/.*$#', '', get_option( 'active_plugins' ) ) );\n\t\t\t\tbreak;\n\t\t\tcase 'plugins:checksum': case 'uploads:checksum': case 'themes:checksum': case 'content:checksum': case 'root:checksum':\n\t\t\tcase 'plugins:ls':       case 'uploads:ls':       case 'themes:ls':       case 'content:ls':       case 'root:ls':\n\t\t\tcase 'plugins:dir':      case 'uploads:dir':      case 'themes:dir':      case 'content:dir':      case 'root:dir':\n\t\t\tcase 'plugins:stat':     case 'uploads:stat':     case 'themes:stat':     case 'content:stat':     case 'root:stat':\n\t\t\tcase 'plugins:get':      case 'uploads:get':      case 'themes:get':      case 'content:get':      case 'root:get':\n\n\t\t\t\t$action_pieces = explode( ':', $_GET['action'] );\n\t\t\t\t$bfs->want( array_shift( $action_pieces ) );\n\n\t\t\t\tif ( isset( $_POST['path'] ) )\n\t\t\t\t\t$path = $_POST['path'];\n\t\t\t\telse\n\t\t\t\t\t$path = '';\n\n\t\t\t\tif ( !$bfs->validate( $path ) )\n\t\t\t\t\tdie( \"naughty naughty\" );\n\n\t\t\t\tif ( isset( $_POST['sha1'] ) && $_POST['sha1'] )\n\t\t\t\t\t$sha1 = true;\n\t\t\t\telse\n\t\t\t\t\t$sha1 = false;\n\n\t\t\t\tif ( isset( $_POST['md5'] ) && $_POST['md5'] )\n\t\t\t\t\t$md5 = true;\n\t\t\t\telse\n\t\t\t\t\t$md5 = false;\n\n\t\t\t\tif ( isset( $_POST['limit'] ) && $_POST['limit'] )\n\t\t\t\t\t$limit=$_POST['limit'];\n\t\t\t\telse\n\t\t\t\t\t$limit = false;\n\n\t\t\t\tif ( isset( $_POST['offset'] ) && $_POST['offset'] )\n\t\t\t\t\t$offset = $_POST['offset'];\n\t\t\t\telse\n\t\t\t\t\t$offset = false;\n\n\t\t\t\tif ( isset( $_POST['recursive'] ) )\n\t\t\t\t\t$recursive = (bool)$_POST['recursive'];\n\t\t\t\telse\n\t\t\t\t\t$recursive = false;\n\n\t\t\t\tif ( isset( $_POST['full_list'] ) )\n\t\t\t\t\t$full_list = (bool)$_POST['full_list'];\n\t\t\t\telse\n\t\t\t\t\t$full_list = false;\n\n\t\t\t\t$action_pieces = explode( ':', $_GET['action'] );\n\t\t\t\tswitch ( array_pop( $action_pieces ) ) {\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdie( \"naughty naughty\" );\n\t\t\t\t\tcase 'checksum':\n\t\t\t\t\t\t$list = array();\n\t\t\t\t\t\t$this->response( $bfs->dir_checksum( $path, $list, $recursive ) );\n\t\t\t\t\tcase 'dir':\n\t\t\t\t\t\t$this->response( $bfs->dir_examine( $path, $recursive ) );\n\t\t\t\t\tcase 'stat':\n\t\t\t\t\t\t$this->response( $bfs->stat( $bfs->dir.$path ) );\n\t\t\t\t\tcase 'get':\n\t\t\t\t\t\t$bfs->fdump( $bfs->dir.$path );\n\t\t\t\t\tcase 'ls':\n\t\t\t\t\t\t$this->response( $bfs->ls( $path, $md5, $sha1, $limit, $offset, $full_list ) );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'config:get':\n\t\t\t\tif ( !isset( $_POST['key'] ) || !$_POST['key'] )\n\t\t\t\t\t$this->response( false );\n\t\t\t\t$key = '_vp_config_' . base64_decode( $_POST['key'] );\n\t\t\t\t$this->response( base64_encode( maybe_serialize( $this->get_config( $key ) ) ) );\n\t\t\t\tbreak;\n\t\t\tcase 'config:set':\n\t\t\t\tif ( !isset( $_POST['key'] ) || !$_POST['key'] ) {\n\t\t\t\t\t$this->response( false );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$key = '_vp_config_' . base64_decode( $_POST['key'] );\n\t\t\t\tif ( !isset( $_POST['val'] ) || !$_POST['val'] ) {\n\t\t\t\t\tif ( !isset($_POST['delete']) || !$_POST['delete'] ) {\n\t\t\t\t\t\t$this->response( false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->response( delete_option( $key ) );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$val = maybe_unserialize( base64_decode( $_POST['val'] ) );\n\t\t\t\t$this->response( update_option( $key, $val ) );\n\t\t\t\tbreak;\n\t\t}\n\t\tdie();\n\t}\n\n\tfunction _fix_ixr_null_to_string( &$args ) {\n\t\tif ( is_array( $args ) )\n\t\t\tforeach ( $args as $k => $v )\n\t\t\t\t$args[$k] = $this->_fix_ixr_null_to_string( $v );\n\t\telse if ( is_object( $args ) )\n\t\t\tforeach ( get_object_vars( $args ) as $k => $v )\n\t\t\t$args->$k = $this->_fix_ixr_null_to_string( $v );\n\t\telse\n\t\t\treturn null == $args ? '' : $args;\n\t\treturn $args;\n\t}\n\n\tfunction contact_service( $action, $args = array() ) {\n\t\tif ( 'test' != $action && 'register' != $action && !$this->check_connection() )\n\t\t\treturn false;\n\n\t\tglobal $current_user;\n\t\tif ( !isset( $args['args'] ) )\n\t\t\t$args['args'] = '';\n\t\t$old_timeout = ini_get( 'default_socket_timeout' );\n\t\t$timeout = $this->get_option( 'timeout' );\n\t\tif ( function_exists( 'ini_set' ) )\n\t\t\tini_set( 'default_socket_timeout', $timeout );\n\t\t$hostname = $this->get_option( 'hostname' );\n\n\t\tif ( !class_exists( 'VaultPress_IXR_SSL_Client' ) )\n\t\t\trequire_once( dirname( __FILE__ ) . '/class.vaultpress-ixr-ssl-client.php' );\n\t\t$client = new VaultPress_IXR_SSL_Client( $hostname, '/xmlrpc.php', 80, $timeout );\n\n\t\tif ( 'vaultpress.com' == $hostname )\n\t\t\t$client->ssl();\n\n\t\t// Begin audit trail breadcrumbs\n\t\tif ( isset( $current_user ) && is_object( $current_user ) && isset( $current_user->ID ) ) {\n\t\t\t$args['cause_user_id'] = intval( $current_user->ID );\n\t\t\t$args['cause_user_login'] = (string)$current_user->user_login;\n\t\t} else {\n\t\t\t$args['cause_user_id'] = -1;\n\t\t\t$args['cause_user_login'] = '';\n\t\t}\n\t\t$args['cause_ip'] = $_SERVER['REMOTE_ADDR'];\n\t\t$args['cause_uri'] = $_SERVER['REQUEST_URI'];\n\t\t$args['cause_method'] = $_SERVER['REQUEST_METHOD'];\n\t\t// End audit trail breadcrumbs\n\n\t\t$args['version']   = $this->plugin_version;\n\t\t$args['locale']    = get_locale();\n\t\t$args['site_url']  = $this->site_url();\n\n\t\t$salt              = md5( time() . serialize( $_SERVER ) );\n\t\t$args['key']       = $this->get_option( 'key' );\n\t\t$this->_fix_ixr_null_to_string( $args );\n\t\t$args['signature'] = $this->sign_string( serialize( $args ), $this->get_option( 'secret' ), $salt ).\":$salt\";\n\n\t\t$client->query( 'vaultpress.'.$action, new IXR_Base64( serialize( $args ) ) );\n\t\t$rval = $client->message ? $client->getResponse() : '';\n\t\tif ( function_exists( 'ini_set' ) )\n\t\t\tini_set( 'default_socket_timeout', $old_timeout );\n\n\t\t// we got an error from the servers\n\t\tif ( is_array( $rval ) && isset( $rval['faultCode'] ) ) {\n\t\t\t$this->update_option( 'connection', time() );\n\t\t\t$this->update_option( 'connection_error_code', $rval['faultCode'] );\n\t\t\t$this->update_option( 'connection_error_message', $rval['faultString'] );\n\t\t}\n\n\t\treturn $rval;\n\t}\n\n\tfunction validate_api_signature() {\n\t\tglobal $__vp_validate_error;\n\t\tif ( !empty( $_POST['signature'] ) ) {\n\t\t\tif ( is_string( $_POST['signature'] ) ) {\n\t\t\t\t$sig = $_POST['signature'];\n\t\t\t} else {\n\t\t\t\t$__vp_validate_error = array( 'error' => 'invalid_signature_format' );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$__vp_validate_error = array( 'error' => 'no_signature' );\n\t\t\treturn false;\n\t\t}\n\n\t\t$secret = $this->get_option( 'secret' );\n\t\tif ( !$secret ) {\n\t\t\t$__vp_validate_error = array( 'error' => 'missing_secret' );\n\t\t\treturn false;\n\t\t}\n\t\tif ( !$this->get_option( 'disable_firewall' ) ) {\n\t\t\t$rxs = $this->get_option( 'service_ips' );\n\t\t\t$service_ips_external = get_option( 'vaultpress_service_ips_external' );\n\t\t\tif ( !empty( $rxs['data'] ) && !empty( $service_ips_external['data'] ) )\n\t\t\t\t$rxs['data'] = array_merge( $rxs['data'], $service_ips_external['data'] );\n\t\t\tif ( $rxs ) {\n\t\t\t\t$timeout = time() - 86400;\n\t\t\t\tif ( $rxs ) {\n\t\t\t\t\tif ( $rxs['updated'] < $timeout )\n\t\t\t\t\t\t$refetch = true;\n\t\t\t\t\telse\n\t\t\t\t\t\t$refetch = false;\n\t\t\t\t\t$rxs = $rxs['data'];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$refetch = true;\n\t\t\t}\n\t\t\tif ( $refetch ) {\n\t\t\t\tif ( $data = $this->update_firewall() )\n\t\t\t\t\t$rxs = $data;\n\t\t\t}\n\t\t\tif ( !$this->validate_ip_address( $rxs ) )\n\t\t\t\treturn false;\n\t\t}\n\t\t$sig = explode( ':', $sig );\n\t\tif ( !is_array( $sig ) || count( $sig ) != 2 || !isset( $sig[0] ) || !isset( $sig[1] ) ) {\n\t\t\t$__vp_validate_error = array( 'error' => 'invalid_signature_format' );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Pass 1 -- new method\n\t\t$uri = preg_replace( '/^[^?]+\\?/', '?', $_SERVER['REQUEST_URI'] );\n\t\t$post = $_POST;\n\t\tunset( $post['signature'] );\n\t\t// Work around for dd-formmailer plugin\n\t\tif ( isset( $post['_REPEATED'] ) )\n\t\t\tunset( $post['_REPEATED'] );\n\t\tksort( $post );\n\t\t$to_sign = serialize( array( 'uri' => $uri, 'post' => $post ) );\n\t\t$signature = $this->sign_string( $to_sign, $secret, $sig[1] );\n\t\tif ( $sig[0] === $signature )\n\t\t\treturn true;\n\n\t\t$__vp_validate_error = array( 'error' => 'invalid_signed_data' );\n\t\treturn false;\n\t}\n\n\tfunction ip_in_cidr( $ip, $cidr ) {\n\t\tlist ($net, $mask) = explode( '/', $cidr );\n\t\treturn ( ip2long( $ip ) & ~((1 << (32 - $mask)) - 1) ) == ( ip2long( $net ) & ~((1 << (32 - $mask)) - 1) );\n}\n\n\tfunction ip_in_cidrs( $ip, $cidrs ) {\n\t\tforeach ( (array)$cidrs as $cidr ) {\n\t\t\tif ( $this->ip_in_cidr( $ip, $cidr ) ) {\n\t\t\t\treturn $cidr;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction validate_ip_address( $rxs ) {\n\t\tglobal $__vp_validate_error;\n\t\tif ( empty( $rxs ) ) {\n\t\t\t$__vp_validate_error = array( 'error' => 'empty_vp_ip_range' );\n\t\t\treturn false;\n\t\t}\n\n\t\t$remote_ips = array();\n\n\t\tif ( $this->get_option( 'allow_forwarded_for') && !empty( $_SERVER['HTTP_X_FORWARDED_FOR'] ) )\n\t\t\t$remote_ips = explode( ',', $_SERVER['HTTP_X_FORWARDED_FOR'] );\n\n\t\tif ( !empty( $_SERVER['REMOTE_ADDR'] ) )\n\t\t\t$remote_ips[] = $_SERVER['REMOTE_ADDR'];\n\n\t\tif ( empty( $remote_ips ) ) {\n\t\t\t$__vp_validate_error = array( 'error' => 'no_remote_addr', 'detail' => (int) $this->get_option( 'allow_forwarded_for' ) ); // shouldn't happen\n\t\t\treturn false;\n\t\t}\n\n\t\t$iprx = '/^([0-9]+\\.[0-9]+\\.[0-9]+\\.)([0-9]+)$/';\n\n\t\tforeach ( $remote_ips as $_remote_ip ) {\n\t\t\t$remote_ip = preg_replace( '#^::(ffff:)?#', '', $_remote_ip );\n\t\t\tif ( !preg_match( $iprx, $remote_ip, $r ) ) {\n\t\t\t\t$__vp_validate_error = array( 'error' => \"remote_addr_fail\", 'detail' => $_remote_ip );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tforeach ( (array)$rxs as $begin => $end ) {\n\t\t\t\tif ( !preg_match( $iprx, $begin, $b ) )\n\t\t\t\t\tcontinue;\n\t\t\t\tif ( !preg_match( $iprx, $end, $e ) )\n\t\t\t\t\tcontinue;\n\t\t\t\tif ( $r[1] != $b[1] || $r[1] != $e[1] )\n\t\t\t\t\tcontinue;\n\t\t\t\t$me = $r[2];\n\t\t\t\t$b = min( (int)$b[2], (int)$e[2] );\n\t\t\t\t$e = max( (int)$b[2], (int)$e[2] );\n\t\t\t\tif ( $me >= $b &&  $me <= $e ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$__vp_validate_error = array( 'error' => 'remote_addr_fail', 'detail' => $remote_ips );\n\n\t\treturn false;\n\t}\n\n\tfunction sign_string( $string, $secret, $salt ) {\n\t\treturn hash_hmac( 'sha1', \"$string:$salt\", $secret );\n\t}\n\n\tfunction response( $response, $raw = false ) {\n\t\t// \"re\" -- \"Response Encoding\"\n\t\tif ( !empty( $_GET['re'] ) )\n\t\t\theader( sprintf( 'X-VP-Encoded: X%d', abs( intval( $_GET['re'] ) ) ) );\n\t\tif ( $raw ) {\n\t\t\tif ( !isset( $_GET['re'] ) )\n\t\t\t\tdie( $response );\n\t\t\telse if ( '1' === $_GET['re'] )\n\t\t\t\tdie( base64_encode( $response ) );\n\t\t\telse if ( '2' === $_GET['re'] )\n\t\t\t\tdie( str_rot13( $response ) );\n\t\t\telse \n\t\t\t\tdie( $response );\n\t\t}\n\t\tlist( $usec, $sec ) = explode( \" \", microtime() );\n\t\t$r = new stdClass();\n\t\t$r->req_vector = floatval( $_GET['vector'] );\n\t\t$r->rsp_vector = ( (float)$usec + (float)$sec );\n\t\tif ( function_exists( \"getrusage\" ) )\n\t\t\t$r->rusage = getrusage();\n\t\telse\n\t\t\t$r->rusage = false;\n\t\tif ( function_exists( \"memory_get_peak_usage\" ) )\n\t\t\t$r->peak_memory_usage = memory_get_peak_usage( true );\n\t\telse\n\t\t\t$r->peak_memory_usage = false;\n\t\tif ( function_exists( \"memory_get_usage\" ) )\n\t\t\t$r->memory_usage = memory_get_usage( true );\n\t\telse\n\t\t\t$r->memory_usage = false;\n\t\t$r->response = $response;\n\t\tif ( !isset( $_GET['re'] ) )\n\t\t\tdie( serialize( $r )  );\n\t\telse if ( '1' === $_GET['re'] )\n\t\t\tdie( base64_encode( serialize( $r )  ) );\n\t\telse if ( '2' === $_GET['re'] )\n\t\t\tdie( str_rot13( serialize( $r )  ) );\n\t\telse \n\t\t\tdie( serialize( $r ) );\n\t}\n\n\tfunction reset_pings() {\n\t\tglobal $vaultpress_pings;\n\t\t$vaultpress_pings = array(\n\t\t\t'version'      => 1,\n\t\t\t'count'        => 0,\n\t\t\t'editedtables' => array(),\n\t\t\t'plugins'      => array(),\n\t\t\t'themes'       => array(),\n\t\t\t'uploads'      => array(),\n\t\t\t'db'           => array(),\n\t\t\t'debug'        => array(),\n\t\t\t'security'     => array(),\n\t\t);\n\t}\n\n\tfunction add_ping( $type, $data, $hook=null ) {\n\t\tglobal $vaultpress_pings;\n\t\tif ( defined( 'WP_IMPORTING' ) && constant( 'WP_IMPORTING' ) )\n\t\t\treturn;\n\t\tif ( !array_key_exists( $type, $vaultpress_pings ) )\n\t\t\treturn;\n\n\t\tswitch( $type ) {\n\t\t\tcase 'editedtables';\n\t\t\t\t$vaultpress_pings[$type] = $data;\n\t\t\t\treturn;\n\t\t\tcase 'uploads':\n\t\t\tcase 'themes':\n\t\t\tcase 'plugins':\n\t\t\t\tif ( !is_array( $data ) ) {\n\t\t\t\t\t$data = array( $data );\n\t\t\t\t}\n\t\t\t\tforeach ( $data as $val ) {\n\t\t\t\t\tif ( in_array( $data, $vaultpress_pings[$type] ) )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t$vaultpress_pings['count']++;\n\t\t\t\t\t$vaultpress_pings[$type][]=$val;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'db':\n\t\t\t\t$_keys = array_keys( $data );\n\t\t\t\t$subtype = array_shift( $_keys );\n\t\t\t\tif ( !isset( $vaultpress_pings[$type][$subtype] ) )\n\t\t\t\t\t$vaultpress_pings[$type][$subtype] = array();\n\t\t\t\tif ( in_array( $data, $vaultpress_pings[$type][$subtype] ) )\n\t\t\t\t\treturn;\n\t\t\t\t$vaultpress_pings['count']++;\n\t\t\t\t$vaultpress_pings[$type][$subtype][] = $data;\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\tif ( in_array( $data, $vaultpress_pings[$type] ) )\n\t\t\t\t\treturn;\n\t\t\t\t$vaultpress_pings['count']++;\n\t\t\t\t$vaultpress_pings[$type][] = $data;\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\tfunction do_pings() {\n\t\tglobal $wpdb, $vaultpress_pings, $__vp_recursive_ping_lock;\n\t\tif ( defined( 'WP_IMPORTING' ) && constant( 'WP_IMPORTING' ) )\n\t\t\treturn;\n\n\t\tif ( !isset( $wpdb ) ) {\n\t\t\t$wpdb = new wpdb( DB_USER, DB_PASSWORD, DB_NAME, DB_HOST );\n\t\t\t$close_wpdb = true;\n\t\t} else {\n\t\t\t$close_wpdb = false;\n\t\t}\n\n\t\tif ( !$vaultpress_pings['count'] )\n\t\t\treturn;\n\n\t\t// Short circuit the contact process if we know that we can't contact the service\n\t\tif ( isset( $__vp_recursive_ping_lock ) && $__vp_recursive_ping_lock ) {\n\t\t\t$this->ai_ping_insert( serialize( $vaultpress_pings ) );\n\t\t\tif ( $close_wpdb ) {\n\t\t\t\t$wpdb->__destruct();\n\t\t\t\tunset( $wpdb );\n\t\t\t}\n\t\t\t$this->reset_pings();\n\t\t\treturn;\n\t\t}\n\n\t\t$ping_attempts = 0;\n\t\tdo {\n\t\t\t$ping_attempts++;\n\t\t\t$rval = $this->contact_service( 'ping', array( 'args' => $vaultpress_pings ) );\n\t\t\tif ( $rval || $ping_attempts >= 3 )\n\t\t\t\tbreak;\n\t\t\tif ( !$rval )\n\t\t\t\tusleep(500000);\n\t\t} while ( true );\n\t\tif ( !$rval ) {\n\t\t\t$__vp_recursive_ping_lock = true;\n\t\t\t$this->ai_ping_insert( serialize( $vaultpress_pings ) );\n\t\t}\n\t\t$this->reset_pings();\n\t\tif ( $close_wpdb ) {\n\t\t\t$wpdb->__destruct();\n\t\t\tunset( $wpdb );\n\t\t}\n\t\treturn $rval;\n\t}\n\n\tfunction resolve_content_dir() {\n\t\t// Take the easy way out\n\t\tif ( defined( 'WP_CONTENT_DIR' ) ) {\n\t\t\tif ( substr( WP_CONTENT_DIR, -1 ) != DIRECTORY_SEPARATOR )\n\t\t\t\treturn WP_CONTENT_DIR . DIRECTORY_SEPARATOR;\n\t\t\treturn WP_CONTENT_DIR;\n\t\t}\n\t\t// Best guess\n\t\tif ( defined( 'ABSPATH' ) ) {\n\t\t\tif ( substr( ABSPATH, -1 ) != DIRECTORY_SEPARATOR )\n\t\t\t\treturn ABSPATH . DIRECTORY_SEPARATOR . 'wp-content' . DIRECTORY_SEPARATOR;\n\t\t\treturn ABSPATH . 'wp-content' . DIRECTORY_SEPARATOR;\n\t\t}\n\t\t// Run with a solid assumption: WP_CONTENT_DIR/vaultpress/vaultpress.php\n\t\treturn dirname( dirname( __FILE__ ) ) . DIRECTORY_SEPARATOR;\n\t}\n\n\tfunction resolve_upload_path() {\n\t\t$upload_path = false;\n\t\t$upload_dir = wp_upload_dir();\n\n\t\tif ( isset( $upload_dir['basedir'] ) )\n\t\t\t$upload_path = $upload_dir['basedir'];\n\n\t\t// Nothing recorded? use a best guess!\n\t\tif ( !$upload_path || $upload_path == realpath( ABSPATH ) )\n\t\t\treturn $this->resolve_content_dir() . 'uploads' . DIRECTORY_SEPARATOR;\n\n\t\tif ( substr( $upload_path, -1 ) != DIRECTORY_SEPARATOR )\n\t\t\t$upload_path .= DIRECTORY_SEPARATOR;\n\n\t\treturn $upload_path;\n\t}\n\n\tfunction load_first( $value ) {\n\t\t$value = array_unique( $value ); // just in case there are duplicates\n\t\treturn array_merge(\n\t\t\tpreg_grep( '/vaultpress\\.php$/', $value ),\n\t\t\tpreg_grep( '/vaultpress\\.php$/', $value, PREG_GREP_INVERT )\n\t\t);\n\t}\n\n\tfunction is_multisite() {\n\t\tif ( function_exists( 'is_multisite' ) )\n\t\t\treturn is_multisite();\n\n\t\treturn false;\n\t}\n\n\tfunction is_main_site() {\n\t\tif ( !function_exists( 'is_main_site' ) || !$this->is_multisite() )\n\t\t\treturn true;\n\n\t\treturn is_main_site();\n\t}\n\n\tfunction is_registered() {\n\t\t$key    = $this->get_option( 'key' );\n\t\t$secret = $this->get_option( 'secret' );\n\t\treturn !empty( $key ) && !empty( $secret );\n\t}\n\n\tfunction clear_connection() {\n\t\t$this->delete_option( 'connection' );\n\t\t$this->delete_option( 'connection_error_code' );\n\t\t$this->delete_option( 'connection_error_message' );\n\t\t$this->delete_option( 'connection_test' );\n\t}\n\n\tfunction site_url() {\n\t\t$site_url = '';\n\n\t\t// compatibility for WordPress MU Domain Mapping plugin\n\t\tif ( defined( 'DOMAIN_MAPPING' ) && DOMAIN_MAPPING ) {\n\t\t\tif ( !function_exists( 'domain_mapping_siteurl' ) ) {\n\n\t\t\t\tif ( !function_exists( 'is_plugin_active' ) )\n\t\t\t\t\trequire_once ABSPATH . '/wp-admin/includes/plugin.php';\n\n\t\t\t\t$plugin = 'wordpress-mu-domain-mapping/domain_mapping.php';\n\t\t\t\tif ( is_plugin_active( $plugin ) )\n\t\t\t\t\tinclude_once( WP_PLUGIN_DIR . '/' . $plugin );\n\t\t\t}\n\n\t\t\tif ( function_exists( 'domain_mapping_siteurl' ) )\n\t\t\t\t$site_url = domain_mapping_siteurl( false );\n\t\t}\n\n\t\tif ( empty( $site_url ) )\n\t\t\t$site_url = site_url();\n\n\t\treturn $site_url;\n\t}\n\n\tfunction add_admin_actions_and_filters() {\n\t\tadd_action( 'admin_init', array( $this, 'admin_init' ) );\n\t\tadd_action( 'admin_menu', array( $this, 'admin_menu' ), 5 ); # Priority 5, so it's called before Jetpack's admin_menu.\n\t\tadd_action( 'admin_head', array( $this, 'admin_head' ) );\n\t}\n\n\tfunction add_listener_actions_and_filters() {\n\t\tadd_action( 'admin_bar_menu', array( $this, 'toolbar' ), 999 );\n\t\tadd_action( 'admin_bar_init', array( $this, 'styles' ) );\n\n\t\t// Comments\n\t\tadd_action( 'delete_comment',        array( $this, 'comment_action_handler' ) );\n\t\tadd_action( 'wp_set_comment_status', array( $this, 'comment_action_handler' ) );\n\t\tadd_action( 'trashed_comment',       array( $this, 'comment_action_handler' ) );\n\t\tadd_action( 'untrashed_comment',     array( $this, 'comment_action_handler' ) );\n\t\tadd_action( 'wp_insert_comment',     array( $this, 'comment_action_handler' ) );\n\t\tadd_action( 'comment_post',          array( $this, 'comment_action_handler' ) );\n\t\tadd_action( 'edit_comment',          array( $this, 'comment_action_handler' ) );\n\n\t\t// Commentmeta\n\t\tadd_action( 'added_comment_meta',   array( $this, 'commentmeta_insert_handler' ), 10, 2 );\n\t\tadd_action( 'updated_comment_meta', array( $this, 'commentmeta_modification_handler' ), 10, 4 );\n\t\tadd_action( 'deleted_comment_meta', array( $this, 'commentmeta_modification_handler' ), 10, 4 );\n\n\t\t// Users\n\t\tif ( $this->is_main_site() ) {\n\t\t\tadd_action( 'user_register',  array( $this, 'userid_action_handler' ) );\n\t\t\tadd_action( 'password_reset', array( $this, 'userid_action_handler' ) );\n\t\t\tadd_action( 'profile_update', array( $this, 'userid_action_handler' ) );\n\t\t\tadd_action( 'user_register',  array( $this, 'userid_action_handler' ) );\n\t\t\tadd_action( 'deleted_user',   array( $this, 'userid_action_handler' ) );\n\t\t}\n\n\t\t// Usermeta\n\t\tif ( $this->is_main_site() ) {\n\t\t\tadd_action( 'added_usermeta',  array( $this, 'usermeta_action_handler' ), 10, 4 );\n\t\t\tadd_action( 'update_usermeta', array( $this, 'usermeta_action_handler' ), 10, 4 );\n\t\t\tadd_action( 'delete_usermeta', array( $this, 'usermeta_action_handler' ), 10, 4 );\n\t\t}\n\n\t\t// Posts\n\t\tadd_action( 'delete_post',              array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'trash_post',               array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'untrash_post',             array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'edit_post',                array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'save_post',                array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'wp_insert_post',           array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'edit_attachment',          array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'add_attachment',           array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'delete_attachment',        array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'private_to_published',     array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'wp_restore_post_revision', array( $this, 'post_action_handler' ) );\n\n\t\t// Postmeta\n\t\tadd_action( 'added_post_meta',   array( $this, 'postmeta_insert_handler' ), 10, 4 );\n\t\tadd_action( 'update_post_meta',  array( $this, 'postmeta_modification_handler' ), 10, 4 );\n\t\tadd_action( 'updated_post_meta', array( $this, 'postmeta_modification_handler' ), 10, 4 );\n\t\tadd_action( 'delete_post_meta',  array( $this, 'postmeta_modification_handler' ), 10, 4 );\n\t\tadd_action( 'deleted_post_meta', array( $this, 'postmeta_modification_handler' ), 10, 4 );\n\t\tadd_action( 'added_postmeta',    array( $this, 'postmeta_action_handler' ), 10, 3 );\n\t\tadd_action( 'update_postmeta',   array( $this, 'postmeta_action_handler' ), 10, 3 );\n\t\tadd_action( 'delete_postmeta',   array( $this, 'postmeta_action_handler' ), 10, 3 );\n\n\t\t// Links\n\t\tadd_action( 'edit_link',   array( $this, 'link_action_handler' ) );\n\t\tadd_action( 'add_link',    array( $this, 'link_action_handler' ) );\n\t\tadd_action( 'delete_link', array( $this, 'link_action_handler' ) );\n\n\t\t// Taxonomy\n\t\tadd_action( 'created_term',              array( $this, 'term_handler' ), 2 );\n\t\tadd_action( 'edited_terms',              array( $this, 'term_handler' ), 2 );\n\t\tadd_action( 'delete_term',               array( $this, 'term_handler' ), 2 );\n\t\tadd_action( 'edit_term_taxonomy',        array( $this, 'term_taxonomy_handler' ) );\n\t\tadd_action( 'delete_term_taxonomy',      array( $this, 'term_taxonomy_handler' ) );\n\t\tadd_action( 'edit_term_taxonomies',      array( $this, 'term_taxonomies_handler' ) );\n\t\tadd_action( 'add_term_relationship',     array( $this, 'term_relationship_handler' ), 10, 2 );\n\t\tadd_action( 'delete_term_relationships', array( $this, 'term_relationships_handler' ), 10, 2 );\n\t\tadd_action( 'set_object_terms',          array( $this, 'set_object_terms_handler' ), 10, 3 );\n\n\t\t// Files\n\t\tif ( $this->is_main_site() ) {\n\t\t\tadd_action( 'switch_theme',      array( $this, 'theme_action_handler' ) );\n\t\t\tadd_action( 'activate_plugin',   array( $this, 'plugin_action_handler' ) );\n\t\t\tadd_action( 'deactivate_plugin', array( $this, 'plugin_action_handler' ) );\n\t\t}\n\t\tadd_action( 'wp_handle_upload',  array( $this, 'upload_handler' ) );\n\n\t\t// Options\n\t\tadd_action( 'deleted_option', array( $this, 'option_handler' ), 1 );\n\t\tadd_action( 'updated_option', array( $this, 'option_handler' ), 1 );\n\t\tadd_action( 'added_option',   array( $this, 'option_handler' ), 1 );\n\n\t\t$this->add_vp_required_filters();\n\t}\n\n\tfunction add_vp_required_filters() {\n\t\t// Log ins\n\t\tif ( $this->get_option( 'login_lockdown' ) ) {\n\t\t\tadd_action( 'login_form', array( $this, 'add_js_token' ) );\n\t\t\tadd_filter( 'authenticate', array( $this, 'authenticate' ), 999 );\n\t\t}\n\n\t\t// Report back to VaultPress\n\t\tadd_action( 'shutdown', array( $this, 'do_pings' ) );\n\n\t\t// VaultPress likes being first in line\n\t\tadd_filter( 'pre_update_option_active_plugins', array( $this, 'load_first' ) );\n\t}\n}\n\n$vaultpress = VaultPress::init();\n\nif ( isset( $_GET['vaultpress'] ) && $_GET['vaultpress'] ) {\n\tif ( !function_exists( 'wp_magic_quotes' ) ) {\n\t\t// If already slashed, strip.\n\t\tif ( get_magic_quotes_gpc() ) {\n\t\t\t$_GET    = stripslashes_deep( $_GET    );\n\t\t\t$_POST   = stripslashes_deep( $_POST   );\n\t\t\t$_COOKIE = stripslashes_deep( $_COOKIE );\n\t\t}\n\n\t\t// Escape with wpdb.\n\t\t$_GET    = add_magic_quotes( $_GET    );\n\t\t$_POST   = add_magic_quotes( $_POST   );\n\t\t$_COOKIE = add_magic_quotes( $_COOKIE );\n\t\t$_SERVER = add_magic_quotes( $_SERVER );\n\n\t\t// Force REQUEST to be GET + POST.  If SERVER, COOKIE, or ENV are needed, use those superglobals directly.\n\t\t$_REQUEST = array_merge( $_GET, $_POST );\n\t} else {\n\t\twp_magic_quotes();\n\t}\n\n\tif ( !function_exists( 'wp_get_current_user' ) )\n\t\tinclude ABSPATH . '/wp-includes/pluggable.php';\n\n\t// TODO: this prevents some error notices but do we need it? is there a better way to check capabilities/logged in user/etc?\n\tif ( function_exists( 'wp_cookie_constants' ) && !defined( 'AUTH_COOKIE' ) )\n\t\twp_cookie_constants();\n\n\t$vaultpress->parse_request( null );\n\n\tdie();\n}\n\n// only load hotfixes if it's not a VP request\nrequire_once( dirname( __FILE__ ) . '/class.vaultpress-hotfixes.php' );\n$hotfixes = new VaultPress_Hotfixes();\n\ninclude_once( dirname( __FILE__ ) . '/cron-tasks.php' );\n"], "fixing_code": ["<?php\n\nclass VaultPress_Hotfixes {\n\tfunction __construct() {\n\t\tglobal $wp_version;\n\n\t\tif ( version_compare( $wp_version, '3.0.2', '<' ) )\n\t\t\tadd_filter( 'query', array( $this, 'r16625' ) );\n\n\t\tif ( defined( 'XMLRPC_REQUEST' ) && XMLRPC_REQUEST && version_compare( $wp_version, '3.0.3', '<' ) )\n\t\t\tadd_action( 'xmlrpc_call', array( $this, 'r16803' ) );\n\n\t\tif ( version_compare( $wp_version, '3.3.2', '<' ) ) {\n\t\t\tadd_filter( 'pre_kses', array( $this, 'r17172_wp_kses' ), 1, 3 );\n\t\t\tadd_filter( 'clean_url', array( $this, 'r17172_esc_url' ), 1, 3 );\n\t\t}\n\n\t\tif ( version_compare( $wp_version, '3.1.3', '<' ) ) {\n\t\t\tadd_filter( 'sanitize_file_name', array( $this, 'r17990' ) );\n\n\t\t\tif ( !empty( $_POST ) )\n\t\t\t\t$this->r17994( $_POST );\n\t\t\t// Protect add_meta, update_meta used by the XML-RPC API\n\t\t\tadd_filter( 'wp_xmlrpc_server_class', create_function( '$class', 'return \\'VaultPress_XMLRPC_Server_r17994\\';' ) );\n\n\t\t\t// clean post_mime_type and guid (r17994)\n\t\t\tadd_filter( 'pre_post_mime_type', array( $this, 'r17994_sanitize_mime_type' ) );\n\t\t\tadd_filter( 'post_mime_type', array( $this, 'r17994_sanitize_mime_type' ) );\n\t\t\tadd_filter( 'pre_post_guid', 'esc_url_raw' );\n\t\t\tadd_filter( 'post_guid', 'esc_url' );\n\t\t}\n\n\t\tif ( version_compare( $wp_version, '3.1.4', '<' ) ) {\n\t\t\tadd_filter( 'wp_insert_post_data', array( $this, 'r18368' ), 1, 2 );\n\n\t\t\t// Add click jacking protection\n\t\t\t// login_init does not exist before 17826.\n\t\t\t$action = isset( $_REQUEST['action'] ) ? $_REQUEST['action'] : 'login';\n\t\t\tadd_action( 'login_form_' . $action, array( $this, 'r17826_send_frame_options_header' ), 10, 0 );\n\t\t\tadd_action( 'admin_init', array( $this, 'r17826_send_frame_options_header' ), 10, 0 );\n\n\t\t\tadd_filter( 'sanitize_option_WPLANG', array( $this, 'r18346_sanitize_lang_on_save' ) );\n\t\t\tadd_filter( 'sanitize_option_new_admin_email', array( $this, 'r18346_sanitize_admin_email_on_save' ) );\n\t\t}\n\t\tadd_filter( 'option_new_admin_email', array( $this, 'r18346_sanitize_admin_email' ) );\n\n\t\tif ( version_compare( $wp_version, '3.3.2', '<' ) ) {\n\t\t\tremove_filter( 'comment_text', 'make_clickable' );\n\t\t\tadd_filter( 'comment_text', array( $this, 'r20493_make_clickable' ), 9 );\n\n\t\t\tadd_filter( 'comment_post_redirect', array( $this, 'r20486_comment_post_redirect' ) );\n\t\t}\n\n\t\t// WooThemes < 3.8.3, foxypress, asset-manager, wordpress-member-private-conversation.\n\t\t$end_execution = false;\n\t\tif ( isset( $_SERVER['SCRIPT_FILENAME'] ) )\n\t\t\tforeach ( array( 'preview-shortcode-external.php', 'uploadify.php', 'doupload.php', 'cef-upload.php', 'upload.php' ) as $vulnerable_script )\n\t\t\t\tif ( $vulnerable_script == basename( $_SERVER['SCRIPT_FILENAME'] ) ) {\n\t\t\t\t\tswitch( $vulnerable_script ) {\n\t\t\t\t\t\tcase 'upload.php':\n\t\t\t\t\t\t\t$pma_config_file = realpath( dirname( $_SERVER['SCRIPT_FILENAME'] ) . DIRECTORY_SEPARATOR . 'paam-config-ajax.php' );\n\t\t\t\t\t\t\tif ( !in_array( $pma_config_file, get_included_files() ) )\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$end_execution = true;\n\t\t\t\t\t\t\tbreak 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\tif ( $end_execution )\n\t\t\tdie( 'Disabled for security reasons' );\n\n\t\tif ( version_compare(  $wp_version, '3.3.2', '>') && version_compare( $wp_version, '3.4.1', '<' ) ) {\n\t\t\tadd_filter( 'map_meta_cap', array( $this, 'r21138_xmlrpc_edit_posts' ), 10, 4 );\n\t\t\tadd_action( 'map_meta_cap', array( $this, 'r21152_unfiltered_html' ), 10, 4 );\n\t\t}\n\n\t\t// https://core.trac.wordpress.org/changeset/21083\n\t\tif ( version_compare( $wp_version, '3.3', '>=') && version_compare( $wp_version, '3.3.3', '<' ) )\n\t\t\tadd_filter( 'editable_slug', 'esc_textarea' ); \n\n\t\tadd_filter( 'get_pagenum_link', array( $this, 'get_pagenum_link' ) );\n\n\t\tadd_filter( 'jetpack_xmlrpc_methods', array( $this, 'disable_jetpack_xmlrpc_methods_293' ), 20, 3 );\n\t\tadd_filter( 'xmlrpc_methods', array( $this, 'disable_xmlrpc_methods_293' ), 20 );\n\n\t\t// Protect All-in-one SEO from non-authorized users making changes, and script injection attacks.          \n\t\tadd_action( 'wp_ajax_aioseop_ajax_save_meta', array( $this, 'protect_aioseo_ajax' ), 1 );\n\n\t\t// Protect The MailPoet plugin (wysija-newsletters) from remote file upload. Affects versions <= 2.6.6\n\t\tadd_action( 'admin_init', array( $this , 'protect_wysija_newsletters_verify_capability' ), 1 );\n\t}\n\n\tfunction disable_jetpack_xmlrpc_methods_293( $jetpack_methods, $core_methods, $user = false ) {\n\t\tif ( $this->needs_jetpack_293_fix() && !$user )\n\t\t\tunset( $jetpack_methods['jetpack.jsonAPI'], $jetpack_methods['jetpack.verifyAction'] );\n\t\treturn $jetpack_methods;\n\t}\n\n\tfunction disable_xmlrpc_methods_293( $core_methods ) {\n\t\tif ( $this->needs_jetpack_293_fix() )\n\t\t\tunset( $core_methods['jetpack.verifyAction'] );\n\t\treturn $core_methods;\n\t}\n\n\tfunction needs_jetpack_293_fix() {\n\t\tif ( ! defined( 'JETPACK__VERSION' ) )\n\t\t\treturn false;\n\t\t$secure_jetpacks = array(\n\t\t\t'1.9' => '1.9.3',\n\t\t\t'2.0' => '2.0.5',\n\t\t\t'2.1' => '2.1.3',\n\t\t\t'2.2' => '2.2.6',\n\t\t\t'2.3' => '2.3.6',\n\t\t\t'2.4' => '2.4.3',\n\t\t\t'2.5' => '2.5.1',\n\t\t\t'2.6' => '2.6.2',\n\t\t\t'2.7' => '2.7.1',\n\t\t\t'2.8' => '2.8.1',\n\t\t\t'2.9' => '2.9.3',\n\t\t);\n\t\t$float_version = (string) floatval( JETPACK__VERSION );\n\t\tif ( ! isset( $secure_jetpacks[ $float_version ] ) )\n\t\t\treturn false;\n\t\treturn version_compare( JETPACK__VERSION, $secure_jetpacks[ $float_version ], '<' );\n\t}\n\n\tfunction r21138_xmlrpc_edit_posts( $caps, $cap, $user_id, $args ) {\n\t\tif ( ! isset( $args[0] ) || isset( $args[1] ) && $args[1] === 'hotfixed' )\n\t\t\treturn $caps;\n\t\tforeach ( get_post_types( array(), 'objects' ) as $post_type_object ) {\n\t\t\tif ( $cap === $post_type_object->cap->edit_posts )\n\t\t\t\treturn map_meta_cap( $post_type_object->cap->edit_post, $user_id, $args[0], 'hotfixed' );\n\t\t}\n\t\treturn $caps;\n\t}\n\n\tfunction r21152_unfiltered_html( $caps, $cap, $user_id, $args ) {\n\t\tif ( $cap !== 'unfiltered_html' )\n\t\t\treturn $caps;\n\t\tif ( defined( 'DISALLOW_UNFILTERED_HTML' ) && DISALLOW_UNFILTERED_HTML )\n\t\t\treturn $caps;\n\t\t$key = array_search( 'do_not_allow', $caps );\n\t\tif ( false !== $key )\n\t\t\treturn $caps;\n\t\tif ( is_multisite() && ! is_super_admin( $user_id ) )\n\t\t\t$caps[$key] = 'do_not_allow';\n\t\treturn $caps;\n\t}\n\n\tfunction get_pagenum_link( $url ) {\n\t\treturn esc_url_raw( $url );\n\t}\n\n\tfunction r20486_comment_post_redirect( $location ) {\n\t\t$location = wp_sanitize_redirect( $location );\n\t\t$location = wp_validate_redirect( $location, admin_url() );\n\n\t\treturn $location;\n\t}\n\n\tfunction r20493_make_clickable( $text ) {\n\t\t$r = '';\n\t\t$textarr = preg_split( '/(<[^<>]+>)/', $text, -1, PREG_SPLIT_DELIM_CAPTURE ); // split out HTML tags\n\t\tforeach ( $textarr as $piece ) {\n\t\t\tif ( empty( $piece ) || ( $piece[0] == '<' && ! preg_match('|^<\\s*[\\w]{1,20}+://|', $piece) ) ) {\n\t\t\t\t$r .= $piece;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Long strings might contain expensive edge cases ...\n\t\t\tif ( 10000 < strlen( $piece ) ) {\n\t\t\t\t// ... break it up\n\t\t\t\tforeach ( $this->r20493_split_str_by_whitespace( $piece, 2100 ) as $chunk ) { // 2100: Extra room for scheme and leading and trailing paretheses\n\t\t\t\t\tif ( 2101 < strlen( $chunk ) ) {\n\t\t\t\t\t\t$r .= $chunk; // Too big, no whitespace: bail.\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$r .= $this->r20493_make_clickable( $chunk );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$ret = \" $piece \"; // Pad with whitespace to simplify the regexes\n\n\t\t\t\t$url_clickable = '~\n\t\t\t\t\t([\\\\s(<.,;:!?])                                        # 1: Leading whitespace, or punctuation\n\t\t\t\t\t(                                                      # 2: URL\n\t\t\t\t\t\t[\\\\w]{1,20}+://                                # Scheme and hier-part prefix\n\t\t\t\t\t\t(?=\\S{1,2000}\\s)                               # Limit to URLs less than about 2000 characters long\n\t\t\t\t\t\t[\\\\w\\\\x80-\\\\xff#%\\\\~/@\\\\[\\\\]*(+=&$-]*+         # Non-punctuation URL character\n\t\t\t\t\t\t(?:                                            # Unroll the Loop: Only allow puctuation URL character if followed by a non-punctuation URL character\n\t\t\t\t\t\t\t[\\'.,;:!?)]                            # Punctuation URL character\n\t\t\t\t\t\t\t[\\\\w\\\\x80-\\\\xff#%\\\\~/@\\\\[\\\\]*(+=&$-]++ # Non-punctuation URL character\n\t\t\t\t\t\t)*\n\t\t\t\t\t)\n\t\t\t\t\t(\\)?)                                                  # 3: Trailing closing parenthesis (for parethesis balancing post processing)\n\t\t\t\t~xS'; // The regex is a non-anchored pattern and does not have a single fixed starting character.\n\t\t\t\t      // Tell PCRE to spend more time optimizing since, when used on a page load, it will probably be used several times.\n\n\t\t\t\t$ret = preg_replace_callback( $url_clickable, array( $this, 'r20493_make_url_clickable_cb') , $ret );\n\n\t\t\t\t$ret = preg_replace_callback( '#([\\s>])((www|ftp)\\.[\\w\\\\x80-\\\\xff\\#$%&~/.\\-;:=,?@\\[\\]+]+)#is', '_make_web_ftp_clickable_cb', $ret );\n\t\t\t\t$ret = preg_replace_callback( '#([\\s>])([.0-9a-z_+-]+)@(([0-9a-z-]+\\.)+[0-9a-z]{2,})#i', '_make_email_clickable_cb', $ret );\n\n\t\t\t\t$ret = substr( $ret, 1, -1 ); // Remove our whitespace padding.\n\t\t\t\t$r .= $ret;\n\t\t\t}\n\t\t}\n\n\t\t// Cleanup of accidental links within links\n\t\t$r = preg_replace( '#(<a( [^>]+?>|>))<a [^>]+?>([^>]+?)</a></a>#i', \"$1$3</a>\", $r );\n\t\treturn $r;\n\t}\n\n\tfunction r20493_make_url_clickable_cb($matches) {\n\t\t$url = $matches[2];\n\n\t\tif ( ')' == $matches[3] && strpos( $url, '(' ) ) {\n\t\t\t// If the trailing character is a closing parethesis, and the URL has an opening parenthesis in it, add the closing parenthesis to the URL.\n\t\t\t// Then we can let the parenthesis balancer do its thing below.\n\t\t\t$url .= $matches[3];\n\t\t\t$suffix = '';\n\t\t} else {\n\t\t\t$suffix = $matches[3];\n\t\t}\n\n\t\t// Include parentheses in the URL only if paired\n\t\twhile ( substr_count( $url, '(' ) < substr_count( $url, ')' ) ) {\n\t\t\t$suffix = strrchr( $url, ')' ) . $suffix;\n\t\t\t$url = substr( $url, 0, strrpos( $url, ')' ) );\n\t\t}\n\n\t\t$url = esc_url($url);\n\t\tif ( empty($url) )\n\t\t\treturn $matches[0];\n\n\t\treturn $matches[1] . \"<a href=\\\"$url\\\" rel=\\\"nofollow\\\">$url</a>\" . $suffix;\n\t}\n\n\tfunction r20493_split_str_by_whitespace( $string, $goal ) {\n\t\t$chunks = array();\n\n\t\t$string_nullspace = strtr( $string, \"\\r\\n\\t\\v\\f \", \"\\000\\000\\000\\000\\000\\000\" );\n\n\t\twhile ( $goal < strlen( $string_nullspace ) ) {\n\t\t\t$pos = strrpos( substr( $string_nullspace, 0, $goal + 1 ), \"\\000\" );\n\n\t\t\tif ( false === $pos ) {\n\t\t\t\t$pos = strpos( $string_nullspace, \"\\000\", $goal + 1 );\n\t\t\t\tif ( false === $pos ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$chunks[] = substr( $string, 0, $pos + 1 );\n\t\t\t$string = substr( $string, $pos + 1 );\n\t\t\t$string_nullspace = substr( $string_nullspace, $pos + 1 );\n\t\t}\n\n\t\tif ( $string ) {\n\t\t\t$chunks[] = $string;\n\t\t}\n\n\t\treturn $chunks;\n\t}\n\n\tfunction r16625( $query ) {\n\t\t// Hotfixes: http://core.trac.wordpress.org/changeset/16625\n\n\t\t// Punt as fast as possible if this isn't an UPDATE\n\t\tif ( substr( $query, 0, 6 ) != \"UPDATE\" )\n\t\t\treturn $query;\n\t\tglobal $wpdb;\n\n\t\t// Determine what the prefix of the bad query would look like and punt if this query doesn't match\n\t\t$badstring = \"UPDATE $wpdb->posts SET to_ping = TRIM(REPLACE(to_ping, '\";\n\t\tif ( substr( $query, 0, strlen( $badstring ) ) != $badstring )\n\t\t\treturn $query;\n\n\t\t// Pull the post_id which is the last thing in the origin query, after a space, no quotes\n\t\t$query_parts = explode( \" \", $query );\n\t\t$post_id = array_pop( $query_parts );\n\n\t\t// Chop off the beginning and end of the original query to get our unsanitized $tb_ping\n\t\t$tb_ping = substr(\n\t\t\t$query,\n\t\t\tstrlen( $badstring ),\n\t\t\t(\n\t\t\t\tstrlen( $query ) - (\n\t\t\t\t\tstrlen( $badstring ) + strlen( sprintf( \"', '')) WHERE ID = %d\", $post_id ) )\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\n\t\t// Return the fixed query\n\t\treturn $wpdb->prepare( \"UPDATE $wpdb->posts SET to_ping = TRIM(REPLACE(to_ping, %s, '')) WHERE ID = %d\", $tb_ping, $post_id );\n\t}\n\n\tfunction r16803( $xmlrpc_method ) {\n\t\t// Hotfixes: http://core.trac.wordpress.org/changeset/16803\n\t\tglobal $wp_xmlrpc_server;\n\t\t// Pretend that we are an xmlrpc method, freshly called\n\t\t$args = $wp_xmlrpc_server->message->params;\n\t\t$error_code = 401;\n\t\tswitch( $xmlrpc_method ) {\n\t\t\t\tcase 'metaWeblog.newPost':\n\t\t\t\t\t\t$content_struct = $args[3];\n\t\t\t\t\t\t$publish = isset( $args[4] ) ? $args[4] : 0;\n\t\t\t\t\t\tif ( !empty( $content_struct['post_type'] ) ) {\n\t\t\t\t\t\t\t\tif ( $content_struct['post_type'] == 'page' ) {\n\t\t\t\t\t\t\t\t\t\tif ( $publish || 'publish' == $content_struct['page_status'] )\n\t\t\t\t\t\t\t\t\t\t\t\t$cap  = 'publish_pages';\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$cap = 'edit_pages';\n\t\t\t\t\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish pages on this site.' );\n\t\t\t\t\t\t\t\t} elseif ( $content_struct['post_type'] == 'post' ) {\n\t\t\t\t\t\t\t\t\t\tif ( $publish || 'publish' == $content_struct['post_status'] )\n\t\t\t\t\t\t\t\t\t\t\t\t$cap  = 'publish_posts';\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$cap = 'edit_posts';\n\t\t\t\t\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$error_message = __( 'Invalid post type.' );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ( $publish || 'publish' == $content_struct['post_status'] )\n\t\t\t\t\t\t\t\t\t\t$cap  = 'publish_posts';\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t$cap = 'edit_posts';\n\t\t\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( current_user_can( $cap ) )\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'metaWeblog.editPost':\n\t\t\t\t\t\t$post_ID = (int) $args[0];\n\t\t\t\t\t\t$content_struct = $args[3];\n\t\t\t\t\t\t$publish = $args[4];\n\t\t\t\t\t\t$cap = ( $publish ) ? 'publish_posts' : 'edit_posts';\n\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );\n\t\t\t\t\t\tif ( !empty( $content_struct['post_type'] ) ) {\n\t\t\t\t\t\t\t\tif ( $content_struct['post_type'] == 'page' ) {\n\t\t\t\t\t\t\t\t\t\tif ( $publish || 'publish' == $content_struct['page_status'] )\n\t\t\t\t\t\t\t\t\t\t\t\t$cap  = 'publish_pages';\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$cap = 'edit_pages';\n\t\t\t\t\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish pages on this site.' );\n\t\t\t\t\t\t\t\t} elseif ( $content_struct['post_type'] == 'post' ) {\n\t\t\t\t\t\t\t\t\t\tif ( $publish || 'publish' == $content_struct['post_status'] )\n\t\t\t\t\t\t\t\t\t\t\t\t$cap  = 'publish_posts';\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t$cap = 'edit_posts';\n\t\t\t\t\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$error_message = __( 'Invalid post type.' );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ( $publish || 'publish' == $content_struct['post_status'] )\n\t\t\t\t\t\t\t\t\t\t$cap  = 'publish_posts';\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t$cap = 'edit_posts';\n\t\t\t\t\t\t\t\t$error_message = __( 'Sorry, you are not allowed to publish posts on this site.' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( current_user_can( $cap ) )\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'mt.publishPost':\n\t\t\t\t\t\t$post_ID = (int) $args[0];\n\t\t\t\t\t\tif ( current_user_can( 'publish_posts' ) && current_user_can( 'edit_post', $post_ID ) )\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t$error_message = __( 'Sorry, you cannot edit this post.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'blogger.deletePost':\n\t\t\t\t\t\t$post_ID = (int) $args[1];\n\t\t\t\t\t\tif ( current_user_can( 'delete_post', $post_ID ) )\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t$error_message = __( 'Sorry, you do not have the right to delete this post.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'wp.getPageStatusList':\n\t\t\t\t\t\tif ( current_user_can( 'edit_pages' ) )\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t$error_code = 403;\n\t\t\t\t\t\t$error_message = __( 'You are not allowed access to details about this site.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'wp.deleteComment':\n\t\t\t\tcase 'wp.editComment':\n\t\t\t\t\t\t$comment_ID = (int) $args[3];\n\t\t\t\t\t\tif ( !$comment = get_comment( $comment_ID ) )\n\t\t\t\t\t\t\t\treturn true; // This will be handled in the calling function explicitly\n\t\t\t\t\t\tif ( current_user_can( 'edit_post', $comment->comment_post_ID ) )\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t$error_code = 403;\n\t\t\t\t\t\t$error_message = __( 'You are not allowed to moderate comments on this site.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t\treturn true;\n\t\t}\n\t\t// If we are here then this was a handlable xmlrpc call and the capability checks above all failed\n\t\t// ( otherwise they would have returned to the do_action from the switch statement above ) so it's\n\t\t// time to exit with whatever error we've determined is the problem (thus short circuiting the\n\t\t// original XMLRPC method call, and enforcing the above capability checks -- with an ax.  We'll\n\t\t// mimic the behavior from the end of IXR_Server::serve()\n\t\t$r = new IXR_Error( $error_code, $error_message );\n\t\t$resultxml = $r->getXml();\n\t\t$xml = <<<EOD\n<methodResponse>\n  <params>\n\t<param>\n\t  <value>\n\t\t$resultxml\n\t  </value>\n\t</param>\n  </params>\n</methodResponse>\nEOD;\n\t\t$wp_xmlrpc_server->output( $xml );\n\t\t// For good measure...\n\t\tdie();\n\t}\n\n\tfunction r17172_esc_url( $url, $original_url, $_context ) {\n\t\t$url = $original_url;\n\n\t\tif ( '' == $url )\n\t\t\treturn $url;\n\t\t$url = preg_replace('|[^a-z0-9-~+_.?#=!&;,/:%@$\\|*\\'()\\\\x80-\\\\xff]|i', '', $url);\n\t\t$strip = array('%0d', '%0a', '%0D', '%0A');\n\t\t$url = _deep_replace($strip, $url);\n\t\t$url = str_replace(';//', '://', $url);\n\t\t/* If the URL doesn't appear to contain a scheme, we\n\t\t * presume it needs http:// appended (unless a relative\n\t\t * link starting with /, # or ? or a php file).\n\t\t */\n\t\tif ( strpos($url, ':') === false && ! in_array( $url[0], array( '/', '#', '?' ) ) &&\n\t\t\t! preg_match('/^[a-z0-9-]+?\\.php/i', $url) )\n\t\t\t$url = 'http://' . $url;\n\n\t\t// Replace ampersands and single quotes only when displaying.\n\t\tif ( 'display' == $_context ) {\n\t\t\t$url = wp_kses_normalize_entities( $url );\n\t\t\t$url = str_replace( '&amp;', '&#038;', $url );\n\t\t\t$url = str_replace( \"'\", '&#039;', $url );\n\t\t}\n\n\t\t$protocols = array ('http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn');\n\t\tif ( VaultPress_kses::wp_kses_bad_protocol( $url, $protocols ) != $url )\n\t\t\treturn '';\n\t\treturn $url;\n\t}\n\n\t// http://core.trac.wordpress.org/changeset/17172\n\t// http://core.trac.wordpress.org/changeset/20541\n\tfunction r17172_wp_kses( $string, $html, $protocols ) {\n\t\treturn VaultPress_kses::wp_kses( $string, $html, $protocols );\n\t}\n\n\t// http://core.trac.wordpress.org/changeset/17990\n\tfunction r17990( $filename ) {\n\t\t$parts = explode('.', $filename);\n\t\t$filename = array_shift($parts);\n\t\t$extension = array_pop($parts);\n\t\t$mimes = get_allowed_mime_types();\n\n\t\t// Loop over any intermediate extensions.  Munge them with a trailing underscore if they are a 2 - 5 character\n\t\t// long alpha string not in the extension whitelist.\n\t\tforeach ( (array) $parts as $part) {\n\t\t\t$filename .= '.' . $part;\n\n\t\t\tif ( preg_match(\"/^[a-zA-Z]{2,5}\\d?$/\", $part) ) {\n\t\t\t\t$allowed = false;\n\t\t\t\tforeach ( $mimes as $ext_preg => $mime_match ) {\n\t\t\t\t\t$ext_preg = '!^(' . $ext_preg . ')$!i';\n\t\t\t\t\tif ( preg_match( $ext_preg, $part ) ) {\n\t\t\t\t\t\t$allowed = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( !$allowed )\n\t\t\t\t\t$filename .= '_';\n\t\t\t}\n\t\t}\n\t\t$filename .= '.' . $extension;\n\t\treturn $filename;\n\t}\n\n\t/*\n\t * Hotfixes: http://core.trac.wordpress.org/changeset/18368\n\t */\n\tfunction r18368( $post, $raw_post ) {\n\t\tif ( isset( $post['filter'] ) || isset ( $raw_post['filter'] ) ) {\n\t\t\tunset( $post['filter'], $raw_post['filter'] ); // to ensure the post is properly sanitized\n\t\t\t$post = sanitize_post($post, 'db');\n\t\t}\n\t\tif ( empty( $post['ID'] ) )\n\t\t\tunset( $post['ID'] ); // sanitize_post\n\t\tunset( $post['filter'] ); // sanitize_post\n\t\treturn $post;\n\t}\n\n\t/**\n\t * Protect WordPress internal metadata.\n\t *\n\t * The post data is passed as a parameter to (unit) test this method.\n\t * @param $post_data|array the $_POST array.\n\t */\n\tfunction r17994( &$post_data ) {\n\t\t// Protect admin-ajax add_meta\n\t\t$metakeyselect = isset( $post_data['metakeyselect'] ) ? stripslashes( trim( $post_data['metakeyselect'] ) ) : '';\n\t\t$metakeyinput = isset( $post_data['metakeyinput'] ) ? stripslashes( trim( $post_data['metakeyinput'] ) ) : '';\n\n\t\tif ( ( $metakeyselect && '_' == $metakeyselect[0] ) || ( $metakeyinput && '_' == $metakeyinput[0] ) ) {\n\t\t\tunset( $_POST['metakeyselect'], $_POST['metakeyinput'] );\n\t\t}\n\n\t\t// Protect admin-ajax update_meta\n\t\tif ( isset( $post_data['meta'] ) ) {\n\t\t\tforeach ( (array)$post_data['meta'] as $mid => $value ) {\n\t\t\t\t$key = stripslashes( $post_data['meta'][$mid]['key'] );\n\t\t\t\tif ( $key && '_' == $key[0] )\n\t\t\t\t\tunset( $post_data['meta'][$mid] );\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction r17994_sanitize_mime_type( $mime_type ) {\n\t\t$sani_mime_type = preg_replace( '/[^\\-*.a-zA-Z0-9\\/+]/', '', $mime_type );\n\t\treturn apply_filters( 'sanitize_mime_type', $sani_mime_type, $mime_type );\n\t}\n\n\tfunction r17826_send_frame_options_header() {\n \t\t@header( 'X-Frame-Options: SAMEORIGIN' );\n \t}\n\n\tfunction r18346_sanitize_admin_email_on_save($value) {\n\t\t$value = sanitize_email( $value );\n\t\tif ( !is_email( $value ) ) {\n\t\t\t$value = get_option( 'new_admin_email' ); // Resets option to stored value in the case of failed sanitization\n\t\t\tif ( function_exists( 'add_settings_error' ) )\n\t\t\t\tadd_settings_error( 'new_admin_email', 'invalid_admin_email', __( 'The email address entered did not appear to be a valid email address. Please enter a valid email address.' ) );\n\t\t}\n\t\treturn $value;\n\t}\n\n\tfunction r18346_sanitize_admin_email( $value ) {\n\t\treturn sanitize_email( $value ); // Is it enough ?\n\t}\n\n\tfunction r18346_sanitize_lang_on_save( $value ) {\n\t\t$value = $this->r18346_sanitize_lang( $value ); // sanitize the new value.\n\t\tif ( empty( $value ) )\n\t\t\t$value = get_option( 'WPLANG' );\n\t\treturn $value;\n\t}\n\n\tfunction r18346_sanitize_lang( $value ) {\n\t\t$allowed = apply_filters( 'available_languages', get_available_languages() ); // add a filter to unit test\n\t\tif ( !empty( $value ) && !in_array( $value, $allowed ) )\n\t\t\treturn false;\n\t\telse\n\t\t\treturn $value;\n\t}\n\n\t// Protect All-in-one SEO AJAX calls from script injection and changes without privileges. Affects versions <= 2.1.5\n\tfunction protect_aioseo_ajax() {\n\t\tif ( defined( 'AIOSEOP_VERSION' ) && version_compare( AIOSEOP_VERSION, '2.1.5', '>' ) )\n\t\t\treturn;\n\n\t\tif ( ! isset( $_POST['post_id'] ) || ! isset( $_POST['target_meta'] ) )\n\t\t\tdie();\n\n\t\t// Ensure the current user has permission to write to the post.\n\t\tif ( ! current_user_can( 'edit_post', intval( $_POST['post_id'] ) ) )\n\t\t\tdie();\n\n\t\t// Limit the fields that can be written to\n\t\tif ( ! in_array( $_POST['target_meta'], array( 'title', 'description', 'keywords' ) ) )\n\t\t\tdie();\n\n\t\t// Strip tags from the metadata value.\n\t\t$_POST['new_meta'] = strip_tags( $_POST['new_meta'] );\n\t}\n\n\t// Protect The MailPoet plugin (wysija-newsletters) from remote file upload. Affects versions <= 2.6.6\n\tfunction protect_wysija_newsletters_verify_capability() {\n\t\tif ( !class_exists( 'WYSIJA_object' ) )\n\t\t\treturn true;\n\t\tif ( version_compare( WYSIJA::get_version(), '2.6.7', '>=' ) )\n\t\t\treturn true;\n\t\tif ( !defined( 'DOING_AJAX' ) && !defined( 'WYSIJA_ITF' ) )\n\t\t\treturn true;\n        if( isset( $_REQUEST['page'] ) && substr( $_REQUEST['page'] ,0 ,7 ) == 'wysija_' ){\n\n            switch( $_REQUEST['page'] ){\n                case 'wysija_campaigns':\n                    $role_needed = 'wysija_newsletters';\n                    break;\n                case 'wysija_subscribers':\n                    $role_needed = 'wysija_subscribers';\n                    break;\n                case 'wysija_config':\n                    $role_needed = 'wysija_config';\n                    break;\n                case 'wysija_statistics':\n                    $role_needed = 'wysija_stats_dashboard';\n                    break;\n                default:\n                    $role_needed = 'switch_themes';\n            }\n\n            if( current_user_can( $role_needed ) ){\n                return true;\n            } else{\n                die( 'You are not allowed here.' );\n            }\n\n        }else{\n            // this is not a wysija interface/action we can let it pass\n            return true;\n        }\n    }\n}\n\nglobal $wp_version;\n$needs_class_fix = version_compare( $wp_version, '3.1', '>=') && version_compare( $wp_version, '3.1.3', '<' );\nif ( defined( 'XMLRPC_REQUEST' ) && XMLRPC_REQUEST && $needs_class_fix ) {\n\tinclude_once( ABSPATH . WPINC . '/class-IXR.php' );\n\tinclude_once( ABSPATH . WPINC . '/class-wp-xmlrpc-server.php' );\n\n\tclass VaultPress_XMLRPC_Server_r17994 extends wp_xmlrpc_server {\n\t\tfunction set_custom_fields( $post_id, $fields ) {\n\t\t\tforeach( $fields as $k => $meta ) {\n\t\t\t\t$key = stripslashes( trim( $meta['key'] ) );\n\t\t\t\tif ( $key && '_' ==  $key[0] )\n\t\t\t\t\tunset( $fields[$k] );\n\t\t\t}\n\t\t\tparent::set_custom_fields( $post_id, $fields );\n\t\t}\n\t}\n}\n\nclass VaultPress_kses {\n\tstatic function wp_kses($string, $allowed_html, $allowed_protocols = array ()) {\n\t\t$string = wp_kses_no_null($string);\n\t\t$string = wp_kses_js_entities($string);\n\t\t$string = wp_kses_normalize_entities($string);\n\t\treturn VaultPress_kses::wp_kses_split($string, $allowed_html, $allowed_protocols);\n\t}\n\n\tstatic function wp_kses_split($string, $allowed_html, $allowed_protocols) {\n\t\tglobal $pass_allowed_html, $pass_allowed_protocols;\n\t\t$pass_allowed_html = $allowed_html;\n\t\t$pass_allowed_protocols = $allowed_protocols;\n\t\treturn preg_replace_callback( '%(<!--.*?(-->|$))|(<[^>]*(>|$)|>)%', 'VaultPress_kses::_vp_kses_split_callback', $string );\n\t}\n\n\tstatic function _vp_kses_split_callback( $match ) {\n\t\tglobal $pass_allowed_html, $pass_allowed_protocols;\n\t\treturn VaultPress_kses::wp_kses_split2( $match[0], $pass_allowed_html, $pass_allowed_protocols );\n\t}\n\n\tstatic function wp_kses_split2($string, $allowed_html, $allowed_protocols) {\n\t\t$string = wp_kses_stripslashes($string);\n\n\t\tif (substr($string, 0, 1) != '<')\n\t\t\treturn '&gt;';\n\t\t# It matched a \">\" character\n\n\t\tif ( '<!--' == substr( $string, 0, 4 ) ) {\n\t\t\t$string = str_replace( array('<!--', '-->'), '', $string );\n\t\t\twhile ( $string != ($newstring = VaultPress_kses::wp_kses($string, $allowed_html, $allowed_protocols)) )\n\t\t\t\t$string = $newstring;\n\t\t\tif ( $string == '' )\n\t\t\t\treturn '';\n\t\t\t// prevent multiple dashes in comments\n\t\t\t$string = preg_replace('/--+/', '-', $string);\n\t\t\t// prevent three dashes closing a comment\n\t\t\t$string = preg_replace('/-$/', '', $string);\n\t\t\treturn \"<!--{$string}-->\";\n\t\t}\n\t\t# Allow HTML comments\n\n\t\tif (!preg_match('%^<\\s*(/\\s*)?([a-zA-Z0-9]+)([^>]*)>?$%', $string, $matches))\n\t\t\treturn '';\n\t\t# It's seriously malformed\n\n\t\t$slash = trim($matches[1]);\n\t\t$elem = $matches[2];\n\t\t$attrlist = $matches[3];\n\n\t\tif ( ! isset($allowed_html[strtolower($elem)]) )\n\t\t\treturn '';\n\t\t# They are using a not allowed HTML element\n\n\t\tif ($slash != '')\n\t\t\treturn \"</$elem>\";\n\t\t# No attributes are allowed for closing elements\n\n\t\treturn VaultPress_kses::wp_kses_attr( $elem, $attrlist, $allowed_html, $allowed_protocols );\n\t}\n\n\tstatic function wp_kses_attr($element, $attr, $allowed_html, $allowed_protocols) {\n\t\t# Is there a closing XHTML slash at the end of the attributes?\n\n\t\t$xhtml_slash = '';\n\t\tif (preg_match('%\\s*/\\s*$%', $attr))\n\t\t\t$xhtml_slash = ' /';\n\n\t\t# Are any attributes allowed at all for this element?\n\t\tif ( ! isset($allowed_html[strtolower($element)]) || count($allowed_html[strtolower($element)]) == 0 )\n\t\t\treturn \"<$element$xhtml_slash>\";\n\n\t\t# Split it\n\t\t$attrarr = VaultPress_kses::wp_kses_hair($attr, $allowed_protocols);\n\n\t\t# Go through $attrarr, and save the allowed attributes for this element\n\t\t# in $attr2\n\t\t$attr2 = '';\n\n\t\t$allowed_attr = $allowed_html[strtolower($element)];\n\t\tforeach ($attrarr as $arreach) {\n\t\t\tif ( ! isset( $allowed_attr[strtolower($arreach['name'])] ) )\n\t\t\t\tcontinue; # the attribute is not allowed\n\n\t\t\t$current = $allowed_attr[strtolower($arreach['name'])];\n\t\t\tif ( $current == '' )\n\t\t\t\tcontinue; # the attribute is not allowed\n\n\t\t\tif ( strtolower( $arreach['name'] ) == 'style' ) {\n\t\t\t\t$orig_value = $arreach['value'];\n\t\t\t\t$value = safecss_filter_attr( $orig_value );\n\n\t\t\t\tif ( empty( $value ) )\n\t\t\t\t\tcontinue;\n\n\t\t\t\t$arreach['value'] = $value;\n\t\t\t\t$arreach['whole'] = str_replace( $orig_value, $value, $arreach['whole'] );\n\t\t\t}\n\n\t\t\tif ( ! is_array($current) ) {\n\t\t\t\t$attr2 .= ' '.$arreach['whole'];\n\t\t\t# there are no checks\n\n\t\t\t} else {\n\t\t\t\t# there are some checks\n\t\t\t\t$ok = true;\n\t\t\t\tforeach ($current as $currkey => $currval) {\n\t\t\t\t\tif ( ! wp_kses_check_attr_val($arreach['value'], $arreach['vless'], $currkey, $currval) ) {\n\t\t\t\t\t\t$ok = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( $ok )\n\t\t\t\t\t$attr2 .= ' '.$arreach['whole']; # it passed them\n\t\t\t} # if !is_array($current)\n\t\t} # foreach\n\n\t\t# Remove any \"<\" or \">\" characters\n\t\t$attr2 = preg_replace('/[<>]/', '', $attr2);\n\n\t\treturn \"<$element$attr2$xhtml_slash>\";\n\t}\n\n\tstatic function wp_kses_hair($attr, $allowed_protocols) {\n\t\t$attrarr = array ();\n\t\t$mode = 0;\n\t\t$attrname = '';\n\t\t$uris = array('xmlns', 'profile', 'href', 'src', 'cite', 'classid', 'codebase', 'data', 'usemap', 'longdesc', 'action');\n\n\t\t# Loop through the whole attribute list\n\n\t\twhile (strlen($attr) != 0) {\n\t\t\t$working = 0; # Was the last operation successful?\n\n\t\t\tswitch ($mode) {\n\t\t\t\tcase 0 : # attribute name, href for instance\n\n\t\t\t\t\tif (preg_match('/^([-a-zA-Z]+)/', $attr, $match)) {\n\t\t\t\t\t\t$attrname = $match[1];\n\t\t\t\t\t\t$working = $mode = 1;\n\t\t\t\t\t\t$attr = preg_replace('/^[-a-zA-Z]+/', '', $attr);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1 : # equals sign or valueless (\"selected\")\n\n\t\t\t\t\tif (preg_match('/^\\s*=\\s*/', $attr)) # equals sign\n\t\t\t\t\t\t{\n\t\t\t\t\t\t$working = 1;\n\t\t\t\t\t\t$mode = 2;\n\t\t\t\t\t\t$attr = preg_replace('/^\\s*=\\s*/', '', $attr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (preg_match('/^\\s+/', $attr)) # valueless\n\t\t\t\t\t\t{\n\t\t\t\t\t\t$working = 1;\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\t\tif(false === array_key_exists($attrname, $attrarr)) {\n\t\t\t\t\t\t\t$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$attr = preg_replace('/^\\s+/', '', $attr);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2 : # attribute value, a URL after href= for instance\n\n\t\t\t\t\tif (preg_match('%^\"([^\"]*)\"(\\s+|/?$)%', $attr, $match))\n\t\t\t\t\t\t# \"value\"\n\t\t\t\t\t\t{\n\t\t\t\t\t\t$thisval = $match[1];\n\t\t\t\t\t\tif ( in_array(strtolower($attrname), $uris) )\n\t\t\t\t\t\t\t$thisval = VaultPress_kses::wp_kses_bad_protocol($thisval, $allowed_protocols);\n\n\t\t\t\t\t\tif(false === array_key_exists($attrname, $attrarr)) {\n\t\t\t\t\t\t\t$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => \"$attrname=\\\"$thisval\\\"\", 'vless' => 'n');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$working = 1;\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\t\t$attr = preg_replace('/^\"[^\"]*\"(\\s+|$)/', '', $attr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (preg_match(\"%^'([^']*)'(\\s+|/?$)%\", $attr, $match))\n\t\t\t\t\t\t# 'value'\n\t\t\t\t\t\t{\n\t\t\t\t\t\t$thisval = $match[1];\n\t\t\t\t\t\tif ( in_array(strtolower($attrname), $uris) )\n\t\t\t\t\t\t\t$thisval = VaultPress_kses::wp_kses_bad_protocol($thisval, $allowed_protocols);\n\n\t\t\t\t\t\tif(false === array_key_exists($attrname, $attrarr)) {\n\t\t\t\t\t\t\t$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => \"$attrname='$thisval'\", 'vless' => 'n');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$working = 1;\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\t\t$attr = preg_replace(\"/^'[^']*'(\\s+|$)/\", '', $attr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (preg_match(\"%^([^\\s\\\"']+)(\\s+|/?$)%\", $attr, $match))\n\t\t\t\t\t\t# value\n\t\t\t\t\t\t{\n\t\t\t\t\t\t$thisval = $match[1];\n\t\t\t\t\t\tif ( in_array(strtolower($attrname), $uris) )\n\t\t\t\t\t\t\t$thisval = VaultPress_kses::wp_kses_bad_protocol($thisval, $allowed_protocols);\n\n\t\t\t\t\t\tif(false === array_key_exists($attrname, $attrarr)) {\n\t\t\t\t\t\t\t$attrarr[$attrname] = array ('name' => $attrname, 'value' => $thisval, 'whole' => \"$attrname=\\\"$thisval\\\"\", 'vless' => 'n');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t# We add quotes to conform to W3C's HTML spec.\n\t\t\t\t\t\t$working = 1;\n\t\t\t\t\t\t$mode = 0;\n\t\t\t\t\t\t$attr = preg_replace(\"%^[^\\s\\\"']+(\\s+|$)%\", '', $attr);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t} # switch\n\n\t\t\tif ($working == 0) # not well formed, remove and try again\n\t\t\t{\n\t\t\t\t$attr = wp_kses_html_error($attr);\n\t\t\t\t$mode = 0;\n\t\t\t}\n\t\t} # while\n\n\t\tif ($mode == 1 && false === array_key_exists($attrname, $attrarr))\n\t\t\t# special case, for when the attribute list ends with a valueless\n\t\t\t# attribute like \"selected\"\n\t\t\t$attrarr[$attrname] = array ('name' => $attrname, 'value' => '', 'whole' => $attrname, 'vless' => 'y');\n\n\t\treturn $attrarr;\n\t}\n\n\tstatic function wp_kses_bad_protocol($string, $allowed_protocols) {\n\t\t$string = wp_kses_no_null($string);\n\t\t$iterations = 0;\n\n\t\tdo {\n\t\t\t$original_string = $string;\n\t\t\t$string = VaultPress_kses::wp_kses_bad_protocol_once($string, $allowed_protocols);\n\t\t} while ( $original_string != $string && ++$iterations < 6 );\n\n\t\tif ( $original_string != $string )\n\t\t\treturn '';\n\n\t\treturn $string;\n\t}\n\n\tstatic function wp_kses_bad_protocol_once($string, $allowed_protocols, $count = 1) {\n\t\t$string2 = preg_split( '/:|&#0*58;|&#x0*3a;/i', $string, 2 );\n\t\tif ( isset($string2[1]) && ! preg_match('%/\\?%', $string2[0]) ) {\n\t\t\t$string = trim( $string2[1] );\n\t\t\t$protocol = VaultPress_kses::wp_kses_bad_protocol_once2( $string2[0], $allowed_protocols );\n\t\t\tif ( 'feed:' == $protocol ) {\n\t\t\t\tif ( $count > 2 )\n\t\t\t\t\treturn '';\n\t\t\t\t$string = VaultPress_kses::wp_kses_bad_protocol_once( $string, $allowed_protocols, ++$count );\n\t\t\t\tif ( empty( $string ) )\n\t\t\t\t\treturn $string;\n\t\t\t}\n\t\t\t$string = $protocol . $string;\n\t\t}\n\n\t\treturn $string;\n\t}\n\n\tstatic function wp_kses_bad_protocol_once2( $string, $allowed_protocols ) {\n\t\t$string2 = wp_kses_decode_entities($string);\n\t\t$string2 = preg_replace('/\\s/', '', $string2);\n\t\t$string2 = wp_kses_no_null($string2);\n\t\t$string2 = strtolower($string2);\n\n\t\t$allowed = false;\n\t\tforeach ( (array) $allowed_protocols as $one_protocol )\n\t\t\tif ( strtolower($one_protocol) == $string2 ) {\n\t\t\t\t$allowed = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\tif ($allowed)\n\t\t\treturn \"$string2:\";\n\t\telse\n\t\t\treturn '';\n\t}\n\n}\n\nif ( !function_exists( 'get_available_languages' ) ) {\n\tfunction get_available_languages( $dir = null ) {\n\t\t$languages = array();\n\t\tforeach( glob( ( is_null( $dir) ? WP_LANG_DIR : $dir ) . '/*.mo' ) as $lang_file )\n\t\t\tif ( false === strpos( $lang_file, 'continents-cities' ) )\n\t\t\t\t$languages[] = basename($lang_file, '.mo');\n\t\treturn $languages;\n\t}\n}\n", "=== VaultPress ===\nContributors: automattic, apokalyptik, briancolinger, josephscott, shaunandrews, xknown, thingalon\nTags: security, malware, virus, backups, scanning\nRequires at least: 2.9.2\nTested up to: 3.9.1\nStable tag: 1.6.1\nLicense: GPLv2\n\nVaultPress is a subscription service offering realtime backup, automated security scanning, and support from WordPress experts.\n\n== Description ==\n\n[VaultPress](http://vaultpress.com/?utm_source=plugin-readme&utm_medium=description&utm_campaign=1.0) is a real-time backup and security scanning service designed and built by [Automattic](http://automattic.com/), the same company that operates 25+ million sites on WordPress.com.\n\nThe VaultPress plugin provides the required functionality to backup and synchronize every post, comment, media file, revision and dashboard settings on our servers. To start safeguarding your site, you need to sign up for a VaultPress subscription.\n\n[wpvideo TxdSIdpO]\n\nFor more information, check out [VaultPress.com](http://vaultpress.com/).\n\n== Installation ==\n\n1. Search for VaultPress in the WordPress.org plugin directory and click install. Or, upload the files to your `wp-content/vaultpress/` folder.\n2. Visit `wp-admin/plugins.php` and activate the VaultPress plugin.\n3. Head to `wp-admin/admin.php?page=vaultpress` and enter your site&rsquo;s registration key. You can purchase your registration key at [VaultPress.com](http://vaultpress.com/plugin/?utm_source=plugin-readme&utm_medium=installation&utm_campaign=1.0)\n\nYou can find more detailed instructions at [http://vaultpress.com/](http://help.vaultpress.com/install-vaultpress/?utm_source=plugin-readme&utm_medium=description&utm_campaign=1.0)\n\n== Frequently Asked Questions ==\n\nView our full list of FAQs at [http://help.vaultpress.com/faq/](http://help.vaultpress.com/faq/?utm_source=plugin-readme&utm_medium=faq&utm_campaign=1.0)\n\n= What\u2019s included in each VaultPress plan? =\n\nAll plans include Daily or Realtime Backups, Downloadable Archives for Restoring, Vitality Statistics, and the Activity Log.\n\nThe Lite plan provides Daily Backups, a 30-day backup archive and automated restores.\n\nThe Basic plan provides Realtime Backups to protect your changes as they happen and support services.\n\nThe Premium plan provides priority recovery and support services, along with site migration assistance. The Premium plan provides automated security scanning of Core, Theme, and Plugin files.\n\nUpdate-to-date pricing and features can always be found on the [Plans &amp; Pricing](http://vaultpress.com/plugin/?utm_source=plugin-readme&utm_medium=installation&utm_campaign=1.0) page.\n\n= How many sites can I protect with VaultPress? =\n\nA VaultPress subscription is for a single WordPress site. You can purchase additional subscriptions for each of your WordPress sites, and manage them all with in one place.\n\n= Does VaultPress work with WordPress 3.0 Multisite installs? =\n\nYes, VaultPress supports Multisite installs. Each site will require its own subscription.\n\n== Changelog ==\n= 1.6.1 =\n* Security: Add a new security hotfix.\n\n= 1.6 =\n* Bugfix: Better handling for Multisite table prefixes.\n* Bugfix: Do not use the deprecated wpdb::escape() method.\n\n= 1.5.9 =\n* Feature: If available, use command line md5sum and sha1sum to get checksums for large files.\n\n= 1.5.8 =\n* Security: Add a new security hotfix.\n\n= 1.5.7 =\n* Bugfix: Avoid PHP 5.4 warnings due to invalid constructor names.\n* Security: Add a new security hotfix.\n\n= 1.5.6 =\n* Bugfix: Avoid PHP 5.4 warnings.\n* Bugfix: Some servers with restrictive security filters make database restores fail.\n* Feature: Add a new restore method to VaultPress_Database.\n\n= 1.5.2 =\n* Bugfix: Adding less greedy patterns for cache directories.\n\n= 1.5.1 =\n* Feature: Adding file exclusion patterns to avoid backing up cache and backup directories.\n\n= 1.5 =\n* Bugfix: Don't show admin notices on the about page.\n\n= 1.4.9 =\n* Bugfix: Clean up PHP5 strict warnings.\n\n= 1.4.8 =\n* Feature: Include styles and images with the plugin instead of loading them externally.\n\n= 1.4.7 =\n* Bugfix: Some servers have SSL configuration problems, which breaks the plugin when SSL verification is enforced.\n\n= 1.4.6 =\n* Bugfix: PHP 5.4 notices\n* Feature: Add the possibility to ignore frequent updates on some postmeta keys.\n\n= 1.3.9 =\n* Feature: Request decoding (base64/rot13)\n* Feature: Response encoding (base64/rot13)\n\n= 1.3.8 =\n* Bugfix: Validate IPv4-mapped IPv6 addresses in the internal firewall.\n* Bugfix: Fix hooks not being properly added under certain circumstances.\n\n= 1.3.7 =\n* Bugfix: Protect against infinite loop due to a PHP bug.\n* Bugfix: Encode remote ping requests.\n\n= 1.0 =\n* First public release!\n", "<?php\n/*\n * Plugin Name: VaultPress\n * Plugin URI: http://vaultpress.com/?utm_source=plugin-uri&amp;utm_medium=plugin-description&amp;utm_campaign=1.0\n * Description: Protect your content, themes, plugins, and settings with <strong>realtime backup</strong> and <strong>automated security scanning</strong> from <a href=\"http://vaultpress.com/?utm_source=wp-admin&amp;utm_medium=plugin-description&amp;utm_campaign=1.0\" rel=\"nofollow\">VaultPress</a>. Activate, enter your registration key, and never worry again. <a href=\"http://vaultpress.com/help/?utm_source=wp-admin&amp;utm_medium=plugin-description&amp;utm_campaign=1.0\" rel=\"nofollow\">Need some help?</a>\n * Version: 1.6.1\n * Author: Automattic\n * Author URI: http://vaultpress.com/?utm_source=author-uri&amp;utm_medium=plugin-description&amp;utm_campaign=1.0\n * License: GPL2+\n * Text Domain: vaultpress\n * Domain Path: /languages/\n */\n\n// don't call the file directly\nif ( !defined( 'ABSPATH' ) )\n\treturn;\n\nclass VaultPress {\n\tvar $option_name    = 'vaultpress';\n\tvar $db_version     = 3;\n\tvar $plugin_version = '1.6.1';\n\n\tfunction __construct() {\n\t\tregister_activation_hook( __FILE__, array( $this, 'activate' ) );\n\t\tregister_deactivation_hook( __FILE__, array( $this, 'deactivate' ) );\n\n\t\t$options = get_option( $this->option_name );\n\t\tif ( !is_array( $options ) )\n\t\t\t$options = array();\n\n\t\t$defaults = array(\n\t\t\t'db_version'            => 0,\n\t\t\t'key'                   => '',\n\t\t\t'secret'                => '',\n\t\t\t'connection'            => false,\n\t\t\t'service_ips'           => false\n\t\t);\n\n\t\t$this->options = wp_parse_args( $options, $defaults );\n\t\t$this->reset_pings();\n\n\t\t$this->upgrade();\n\n\t\tif ( is_admin() )\n\t\t\t$this->add_admin_actions_and_filters();\n\n\t\tif ( $this->is_registered() ) {\n\t\t\t$do_not_backup = $this->get_option( 'do_not_backup' ) || $this->get_option( 'do_not_send_backup_pings' );\n\t\t\tif ( $do_not_backup )\n\t\t\t\t$this->add_vp_required_filters();\n\t\t\telse\n\t\t\t\t$this->add_listener_actions_and_filters();\n\t\t}\n\t}\n\n\tstatic function &init() {\n\t\tstatic $instance = false;\n\n\t\tif ( !$instance ) {\n\t\t\t$instance = new VaultPress();\n\t\t}\n\n\t\treturn $instance;\n\t}\n\n\tfunction activate( $network_wide ) {\n\t\t$type = $network_wide ? 'network' : 'single';\n\t\t$this->update_option( 'activated', $type );\n\n\t\t// force a connection check after an activation\n\t\t$this->clear_connection();\n\t}\n\n\tfunction deactivate() {\n\t\tif ( $this->is_registered() )\n\t\t\t$this->contact_service( 'plugin_status', array( 'vp_plugin_status' => 'deactivated' ) );\n\t}\n\n\tfunction upgrade() {\n\t\t$current_db_version = $this->get_option( 'db_version' );\n\n\t\tif ( $current_db_version < 1 ) {\n\t\t\t$this->options['connection']  = get_option( 'vaultpress_connection' );\n\t\t\t$this->options['key']         = get_option( 'vaultpress_key' );\n\t\t\t$this->options['secret']      = get_option( 'vaultpress_secret' );\n\t\t\t$this->options['service_ips'] = get_option( 'vaultpress_service_ips' );\n\n\t\t\t// remove old options\n\t\t\t$old_options = array(\n\t\t\t\t'vaultpress_connection',\n\t\t\t\t'vaultpress_hostname',\n\t\t\t\t'vaultpress_key',\n\t\t\t\t'vaultpress_secret',\n\t\t\t\t'vaultpress_service_ips',\n\t\t\t\t'vaultpress_timeout',\n\t\t\t\t'vp_allow_remote_execution',\n\t\t\t\t'vp_debug_request_signing',\n\t\t\t\t'vp_disable_firewall',\n\t\t\t);\n\n\t\t\tforeach ( $old_options as $option )\n\t\t\t\tdelete_option( $option );\n\n\t\t\t$this->options['db_version'] = $this->db_version;\n\t\t\t$this->update_options();\n\t\t}\n\n\t\tif ( $current_db_version < 2 ) {\n\t\t\t$this->delete_option( 'timeout' );\n\t\t\t$this->delete_option( 'disable_firewall' );\n\t\t\t$this->update_option( 'db_version', $this->db_version );\n\t\t\t$this->clear_connection();\n\t\t}\n\n\t\tif ( $current_db_version < 3 ) {\n\t\t\t$this->update_firewall();\n\t\t\t$this->update_option( 'db_version', $this->db_version );\n\t\t\t$this->clear_connection();\n\t\t}\n\t}\n\n\tfunction get_option( $key ) {\n\t\tif ( 'hostname' == $key ) {\n\t\t\tif ( defined( 'VAULTPRESS_HOSTNAME' ) )\n\t\t\t\treturn VAULTPRESS_HOSTNAME;\n\t\t\telse\n\t\t\t\treturn 'vaultpress.com';\n\t\t}\n\n\t\tif ( 'timeout' == $key ) {\n\t\t\tif ( defined( 'VAULTPRESS_TIMEOUT' ) )\n\t\t\t\treturn VAULTPRESS_TIMEOUT;\n\t\t\telse\n\t\t\t\treturn 60;\n\t\t}\n\n\t\tif ( 'disable_firewall' == $key ) {\n\t\t\tif ( defined( 'VAULTPRESS_DISABLE_FIREWALL' ) )\n\t\t\t\treturn VAULTPRESS_DISABLE_FIREWALL;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif ( isset( $this->options[$key] ) )\n\t\t\treturn $this->options[$key];\n\n\t\treturn false;\n\t}\n\n\tfunction update_option( $key, $value ) {\n\t\t$this->options[$key] = $value;\n\t\t$this->update_options();\n\t}\n\n\tfunction delete_option( $key ) {\n\t\tunset( $this->options[$key] );\n\t\t$this->update_options();\n\t}\n\n\tfunction update_options() {\n\t\tupdate_option( $this->option_name, $this->options );\n\t}\n\n\tfunction admin_init() {\n\t\tif ( !current_user_can( 'manage_options' ) )\n\t\t\treturn;\n\n\t\tload_plugin_textdomain( 'vaultpress', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/' );\n\t}\n\n\tfunction admin_head() {\n\t\tif ( !current_user_can( 'manage_options' ) )\n\t\t\treturn;\n\n\t\tif ( $activated = $this->get_option( 'activated' ) ) {\n\t\t\tif ( 'network' == $activated ) {\n\t\t\t\tadd_action( 'network_admin_notices', array( $this, 'activated_notice' ) );\n\t\t\t} else {\n\t\t\t\tforeach ( array( 'user_admin_notices', 'admin_notices' ) as $filter )\n\t\t\t\t\tadd_action( $filter, array( $this, 'activated_notice' ) );\n\t\t\t}\n\t\t}\n\n\t\t// ask the user to connect their site w/ VP\n\t\tif ( !$this->is_registered() ) {\n\t\t\tforeach ( array( 'user_admin_notices', 'admin_notices' ) as $filter )\n\t\t\t\tadd_action( $filter, array( $this, 'connect_notice' ) );\n\n\t\t// if we have an error make sure to let the user know about it\n\t\t} else {\n\t\t\t$error_code = $this->get_option( 'connection_error_code' );\n\t\t \tif ( !empty( $error_code ) ) {\n\t\t\t\tforeach ( array( 'user_admin_notices', 'admin_notices' ) as $filter )\n\t\t\t\t\tadd_action( $filter, array( $this, 'error_notice' ) );\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction admin_menu() {\n\t\t// if Jetpack is loaded then we need to wait for that menu to be added\n\t\tif ( class_exists( 'Jetpack' ) )\n\t\t\tadd_action( 'jetpack_admin_menu', array( $this, 'load_menu' ) );\n\t\telse\n\t\t\t$this->load_menu();\n\t}\n\n\tfunction load_menu() {\n\t\tif ( class_exists( 'Jetpack' ) ) {\n\t\t\t$hook = add_submenu_page( 'jetpack', 'VaultPress', 'VaultPress', 'manage_options', 'vaultpress', array( $this, 'ui' ) );\n\t\t} else {\n\t\t\t$hook = add_menu_page( 'VaultPress', 'VaultPress', 'manage_options', 'vaultpress', array( $this, 'ui' ), 'div' );\n\t\t}\n\n\t\tadd_action( \"load-$hook\", array( $this, 'ui_load' ) );\n\t\tadd_action( 'admin_print_styles', array( $this, 'styles' ) );\n\t}\n\n\tfunction styles() {\n\t\tif ( !current_user_can( 'manage_options' ) || !is_admin() )\n\t\t\treturn;\n\n\t\twp_enqueue_style( 'vaultpress-nav', plugins_url( '/nav-styles.css', __FILE__ ), false, date( 'Ymd' ) );\n\n\t\tif ( isset( $_GET['page'] ) && 'vaultpress' == $_GET['page'] )\n\t\t\twp_enqueue_style( 'vaultpress', plugins_url( '/styles.css', __FILE__ ), false, date( 'Ymd' ) );\n\t}\n\n\t// display a security threat notice if one exists\n\tfunction toolbar( $wp_admin_bar ) {\n\t\tglobal $wp_version;\n\n\t\t// these new toolbar functions were introduced in 3.3\n\t\t// http://codex.wordpress.org/Function_Reference/add_node\n\t\tif ( version_compare( $wp_version, '3.3', '<') )\n\t\t\treturn;\n\n\t\tif ( !current_user_can( 'manage_options' ) )\n\t\t\treturn;\n\n\t\t$messages = $this->get_messages();\n\t\tif ( !empty( $messages['security_notice_count'] ) ) {\n\t\t\t$count = (int)$messages['security_notice_count'];\n\t\t\tif ( $count > 0 ) {\n\t\t\t\t$count = number_format( $count, 0 );\n\t\t\t\t$wp_admin_bar->add_node( array(\n\t\t\t\t\t'id' => 'vp-notice',\n\t\t\t\t\t'title' => '<strong><span class=\"ab-icon\"></span>' .\n\t\t\t\t\t\tsprintf( _n( '%s Security Threat', '%s Security Threats', $count , 'vaultpress'), $count ) .\n\t\t\t\t\t' </strong>',\n\t\t\t\t\t'parent' => 'top-secondary',\n\t\t\t\t\t'href' => sprintf( 'https://dashboard.vaultpress.com/%d/security/', $messages['site_id'] ),\n\t\t\t\t\t'meta'  => array(\n\t\t\t\t\t\t'title' => __( 'Visit VaultPress Security' , 'vaultpress'),\n\t\t\t\t\t\t'onclick' => 'window.open( this.href ); return false;',\n\t\t\t\t\t\t'class' => 'error'\n\t\t\t\t\t),\n\t\t\t\t) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// get any messages from the VP servers\n\tfunction get_messages( $force_reload = false ) {\n\t\t$last_contact = $this->get_option( 'messages_last_contact' );\n\n\t\t// only run the messages check every 30 minutes\n\t\tif ( ( time() - (int)$last_contact ) > 1800 || $force_reload ) {\n\t\t\t$messages = base64_decode( $this->contact_service( 'messages', array() ) );\n\t\t\t$messages = unserialize( $messages );\n\t\t\t$this->update_option( 'messages_last_contact', time() );\n\t\t\t$this->update_option( 'messages', $messages );\n\t\t} else {\n\t\t\t$messages = $this->get_option( 'messages' );\n\t\t}\n\n\t\treturn $messages;\n\t}\n\n\tfunction server_url() {\n\t\tif ( !isset( $this->_server_url ) ) {\n\t\t\t$scheme = is_ssl() ? 'https' : 'http';\n\t\t\t$this->_server_url = sprintf( '%s://%s/', $scheme, $this->get_option( 'hostname' ) );\n\t\t}\n\n\t\treturn $this->_server_url;\n\t}\n\n\t// show message if plugin is activated but not connected to VaultPress\n\tfunction connect_notice() {\n\t\tif ( isset( $_GET['page'] ) && 'vaultpress' == $_GET['page'] )\n\t\t\treturn;\n\n\t\t$message = sprintf(\n\t\t\t__( 'You must enter your registration key before VaultPress can back up and secure your site. <a href=\"%1$s\">Register&nbsp;VaultPress</a>', 'vaultpress' ),\n\t\t\tadmin_url( 'admin.php?page=vaultpress' )\n\t\t);\n\t\t$this->ui_message( $message, 'notice', __( 'VaultPress needs your attention!', 'vaultpress' ) );\n\t}\n\n\t// show message after activation\n\tfunction activated_notice() {\n\t\tif ( 'network' == $this->get_option( 'activated' ) ) {\n\t\t\t$message = sprintf(\n\t\t\t\t__( 'Each site will need to be registered with VaultPress separately. You can purchase new keys from your <a href=\"%1$s\">VaultPress&nbsp;Dashboard</a>.', 'vaultpress' ),\n\t\t\t\t'https://dashboard.vaultpress.com/'\n\t\t\t);\n\t\t\t$this->ui_message( $message, 'activated', __( 'VaultPress has been activated across your network!', 'vaultpress' ) );\n\n\t\t// key and secret already exist in db\n\t\t} elseif ( $this->is_registered() ) {\n\t\t\tif ( $this->check_connection() ) {\n\t\t\t\t$message = sprintf(\n\t\t\t\t\t__( 'VaultPress has been registered and is currently backing up your site. <a href=\"%1$s\">View Backup Status</a>', 'vaultpress' ),\n\t\t\t\t\tadmin_url( 'admin.php?page=vaultpress' )\n\t\t\t\t);\n\t\t\t\t$this->ui_message( $message, 'registered',  __( 'VaultPress has been activated!', 'vaultpress' ) );\n\t\t\t}\n\t\t}\n\n\t\t$this->delete_option( 'activated' );\n\t}\n\n\tfunction error_notice() {\n\t\t$error_message = $this->get_option( 'connection_error_message' );\n\n\t\t// link to the VaultPress page if we're not already there\n\t\tif ( !isset( $_GET['page'] ) || 'vaultpress' != $_GET['page'] )\n\t\t\t$error_message .= ' ' . sprintf( '<a href=\"%s\">%s</a>', admin_url( 'admin.php?page=vaultpress' ), __( 'Visit&nbsp;the&nbsp;VaultPress&nbsp;page' , 'vaultpress') );\n\n\t\t$screen = get_current_screen();\n\t\tif ( !in_array( $screen->id, array( 'about', 'about-user', 'about-network' ) ) && !empty( $error_message ) )\n\t\t\t$this->ui_message( $error_message, 'error' );\n\t}\n\n\tfunction ui() {\n\t\tif ( !empty( $_GET['error'] ) ) {\n\t\t\t$this->error_notice();\n\t\t\t$this->clear_connection();\n\t\t}\n\n\t\tif ( !$this->is_registered() ) {\n\t\t\t$this->ui_register();\n\t\t\treturn;\n\t\t}\n\n\t\t$status = $this->contact_service( 'status' );\n\t\tif ( !$status ) {\n\t\t\t$error_code = $this->get_option( 'connection_error_code' );\n\t\t\tif ( 0 == $error_code )\n\t\t\t\t$this->ui_fatal_error();\n\t\t\telse\n\t\t\t\t$this->ui_register();\n\t\t\treturn;\n\t\t}\n\n\t\t$ticker = $this->contact_service( 'ticker' );\n\t\tif ( is_array( $ticker ) && isset( $ticker['faultCode'] ) ) {\n\t\t\t$this->error_notice();\n\t\t\t$this->ui_register();\n\t\t\treturn;\n\t\t}\n\n\t\t$this->ui_main();\n\t}\n\n\tfunction ui_load() {\n\t\tif ( !current_user_can( 'manage_options' ) )\n\t\t\treturn;\n\n\t\t// run code that might be updating the registration key\n\t\tif ( isset( $_POST['action'] ) && 'register' == $_POST['action'] ) {\n\t\t\tcheck_admin_referer( 'vaultpress_register' );\n\n\t\t\t// reset the connection info so messages don't cross\n\t\t\t$this->clear_connection();\n\n\t\t\t$registration_key = trim( $_POST[ 'registration_key' ] );\n\t\t\tif ( empty( $registration_key ) ) {\n\t\t\t\t$this->update_option( 'connection_error_code', 1 );\n\t\t\t\t$this->update_option(\n\t\t\t\t\t'connection_error_message',\n\t\t\t\t\tsprintf(\n\t\t\t\t\t\t__( '<strong>That\\'s not a valid registration key.</strong> Head over to the <a href=\"%1$s\" title=\"Sign in to your VaultPress Dashboard\">VaultPress&nbsp;Dashboard</a> to find your key.', 'vaultpress' ),\n\t\t\t\t\t\t'https://dashboard.vaultpress.com/'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\twp_redirect( admin_url( 'admin.php?page=vaultpress&error=true' ) );\n\t\t\t\texit();\n\t\t\t}\n\n\t\t\t// try to register the plugin\n\t\t\t$nonce = wp_create_nonce( 'vp_register_' . $registration_key );\n\t\t\t$args = array( 'registration_key' =>  $registration_key, 'nonce' => $nonce );\n\t\t\t$response = $this->contact_service( 'register', $args );\n\n\t\t\t// we received an error from the VaultPress servers\n\t\t\tif ( !empty( $response['faultCode'] ) ) {\n\t\t\t\t$this->update_option( 'connection_error_code',    $response['faultCode'] );\n\t\t\t\t$this->update_option( 'connection_error_message', $response['faultString'] );\n\t\t\t\twp_redirect( admin_url( 'admin.php?page=vaultpress&error=true' ) );\n\t\t\t\texit();\n\t\t\t}\n\n\t\t\t// make sure the returned data looks valid\n\t\t\tif ( empty( $response['key'] ) || empty( $response['secret'] ) || empty( $response['nonce'] ) || $nonce != $response['nonce'] ) {\n\t\t\t\t$this->update_option( 'connection_error_code', 1 );\n\t\t\t\t$this->update_option( 'connection_error_message', sprintf( __( 'There was a problem trying to register your subscription. Please try again. If you&rsquo;re still having issues please <a href=\"%1$s\">contact the VaultPress&nbsp;Safekeepers</a>.', 'vaultpress' ), 'http://vaultpress.com/contact/' ) );\n\t\t\t\twp_redirect( admin_url( 'admin.php?page=vaultpress&error=true' ) );\n\t\t\t\texit();\n\t\t\t}\n\n\t\t\t// need to update these values in the db so the servers can try connecting to the plugin\n\t\t\t$this->update_option( 'key', $response['key'] );\n\t\t\t$this->update_option( 'secret', $response['secret'] );\n\t\t\tif ( $this->check_connection( true ) ) {\n\t\t\t\twp_redirect( admin_url( 'admin.php?page=vaultpress' ) );\n\t\t\t\texit();\n\t\t\t}\n\n\t\t\t// reset the key and secret\n\t\t\t$this->update_option( 'key', '' );\n\t\t\t$this->update_option( 'secret', '' );\n\t\t\twp_redirect( admin_url( 'admin.php?page=vaultpress&error=true' ) );\n\t\t\texit();\n\t\t}\n\t}\n\n\tfunction ui_register() {\n?>\n\t<div id=\"vp-wrap\" class=\"wrap\">\n\t\t<div id=\"vp-head\">\n\t\t\t<h2>VaultPress<a href=\"https://dashboard.vaultpress.com/\" class=\"vp-visit-dashboard\" target=\"_blank\"><?php _e( 'Visit Dashboard', 'vaultpress' ); ?></a></h2>\n\t\t</div>\n\n\t\t<div id=\"vp_registration\">\n\t\t\t<div class=\"vp_view-plans\">\n\t\t\t\t<h1><?php _e( 'The VaultPress plugin <strong>requires a monthly&nbsp;subscription</strong>.', 'vaultpress' ); ?></h1>\n\t\t\t\t<p><?php _e( 'Get realtime backups, automated security scanning, and support from WordPress&nbsp;experts.', 'vaultpress' ); ?></p>\n\t\t\t\t<p class=\"vp_plans-btn\"><a href=\"https://vaultpress.com/plugin/?utm_source=plugin-unregistered&amp;utm_medium=view-plans-and-pricing&amp;utm_campaign=1.0-plugin\"><strong><?php _e( 'View plans and pricing&nbsp;&raquo;', 'vaultpress' ); ?></strong></a></p>\n\t\t\t</div>\n\n\t\t\t<div class=\"vp_register-plugin\">\n\t\t\t\t<h3><?php _e( 'Already have a VaultPress&nbsp;account?', 'vaultpress' ); ?></h3>\n\t\t\t\t<p><?php _e( 'Paste your registration key&nbsp;below:', 'vaultpress' ); ?></p>\n\t\t\t\t<form method=\"post\" action=\"\">\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<textarea placeholder=\"<?php echo esc_attr( __( 'Enter your key here...', 'vaultpress' ) ); ?>\" name=\"registration_key\"></textarea>\n\t\t\t\t\t\t<button><strong><?php _e( 'Register ', 'vaultpress' ); ?></strong></button>\n\t\t\t\t\t\t<input type=\"hidden\" name=\"action\" value=\"register\" />\n\t\t\t\t\t\t<?php wp_nonce_field( 'vaultpress_register' ); ?>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n<?php\n\t}\n\n\tfunction ui_main() {\n?>\n\t<div id=\"vp-wrap\" class=\"wrap\">\n\t\t<?php\n\t\t\t$response = base64_decode( $this->contact_service( 'plugin_ui' ) );\n\t\t\techo $response;\n\t\t?>\n\t</div>\n<?php\n\t}\n\n\tfunction ui_fatal_error() {\n\t?>\n\t\t<div id=\"vp-wrap\" class=\"wrap\">\n\t\t\t<h2>VaultPress</h2>\n\n\t\t\t<p><?php printf( __( 'Yikes! We&rsquo;ve run into a serious issue and can&rsquo;t connect to %1$s.', 'vaultpress' ), esc_html( $this->get_option( 'hostname' ) ) ); ?></p>\n\t\t\t<p><?php printf( __( 'Please make sure that your website is accessible via the Internet. If you&rsquo;re still having issues please <a href=\"%1$s\">contact the VaultPress&nbsp;Safekeepers</a>.', 'vaultpress' ), 'http://vaultpress.com/contact/' ); ?></p>\n\t\t</div>\n\t<?php\n\t}\n\n\tfunction ui_message( $message, $type = 'notice', $heading = '' ) {\n\t\tif ( empty( $heading ) ) {\n\t\t\tswitch ( $type ) {\n\t\t\t\tcase 'error':\n\t\t\t\t\t$heading = __( 'Oops... there seems to be a problem.', 'vaultpress' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'success':\n\t\t\t\t\t$heading = __( 'Yay! Things look good.', 'vaultpress' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t$heading = __( 'VaultPress needs your attention!', 'vaultpress' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n?>\n\t\t<div id=\"vp-notice\" class=\"vp-<?php echo $type; ?> updated\">\n\t\t\t<div class=\"vp-message\">\n\t\t\t\t<h3><?php echo $heading; ?></h3>\n\t\t\t\t<p><?php echo $message; ?></p>\n\t\t\t</div>\n\t\t</div>\n<?php\n\t}\n\n\tfunction get_config( $key ) {\n\t\t$val = get_option( $key );\n\t\tif ( $val )\n\t\t\treturn $val;\n\t\tswitch( $key ) {\n\t\t\tcase '_vp_config_option_name_ignore':\n\t\t\t\t$val = $this->get_option_name_ignore( true );\n\t\t\t\tupdate_option( '_vp_config_option_name_ignore', $val );\n\t\t\t\tbreak;\n\t\t\tcase '_vp_config_post_meta_name_ignore':\n\t\t\t\t$val = $this->get_post_meta_name_ignore( true );\n\t\t\t\tupdate_option( '_vp_config_post_meta_name_ignore', $val );\n\t\t\t\tbreak;\n\t\t\tcase '_vp_config_should_ignore_files':\n\t\t\t\t$val = $this->get_should_ignore_files( true );\n\t\t\t\tupdate_option( '_vp_config_should_ignore_files', $val );\n\t\t\t\tbreak;\n\t\t}\n\t\treturn $val;\n\t}\n\n\t// Option name patterns to ignore\n\tfunction get_option_name_ignore( $return_defaults = false ) {\n\t\t$defaults = array(\n\t\t\t'vaultpress',\n\t\t\t'cron',\n\t\t\t'wpsupercache_gc_time',\n\t\t\t'rewrite_rules',\n\t\t\t'akismet_spam_count',\n\t\t\t'/_transient_/',\n\t\t\t'/^_vp_/',\n\t\t);\n\t\tif ( $return_defaults )\n\t\t\treturn $defaults;\n\t\t$ignore_names = $this->get_config( '_vp_config_option_name_ignore' );\n\t\treturn array_unique( array_merge( $defaults, $ignore_names ) );\n\t}\n\n\t// post meta name patterns to ignore\n\tfunction get_post_meta_name_ignore( $return_defaults = false ) {\n\t\t$defaults = array(\n\t\t\t'pvc_views'\n\t\t);\n\t\tif ( $return_defaults )\n\t\t\treturn $defaults;\n\t\t$ignore_names = $this->get_config( '_vp_config_post_meta_name_ignore' );\n\t\treturn array_unique( array_merge( $defaults, $ignore_names ) );\n\t}\n\n\t// file name patterns to ignore\n\tfunction get_should_ignore_files( $return_defaults = false ) {\n\t\t$defaults = array();\n\t\tif ( $return_defaults )\n\t\t\treturn $defaults;\n\t\t$ignore_names = (array) $this->get_config( '_vp_config_should_ignore_files' );\n\t\treturn array_unique( array_merge( $defaults, $ignore_names ) );\n\t}\n\n\t###\n\t### Section: Backup Notification Hooks\n\t###\n\n\t// Handle Handle Notifying VaultPress of Options Activity At this point the options table has already been modified\n\t//\n\t// Note: we handle deleted, instead of delete because VaultPress backs up options by name (which are unique,) that\n\t// means that we do not need to resolve an id like we would for, say, a post.\n\tfunction option_handler( $option_name ) {\n\t\tglobal $wpdb;\n\t\t// Step 1 -- exclusionary rules, don't send these options to vaultpress, because they\n\t\t// either change constantly and/or are inconsequential to the blog itself and/or they\n\t\t// are specific to the VaultPress plugin process and we want to avoid recursion\n\t\t$should_ping = true;\n\t\t$ignore_names = $this->get_option_name_ignore();\n\t\tforeach( (array)$ignore_names as $val ) {\n\t\t\tif ( $val{0} == '/' ) {\n\t\t\t\tif ( preg_match( $val, $option_name ) )\n\t\t\t\t\t$should_ping = false;\n\t\t\t} else {\n\t\t\t\tif ( $val == $option_name )\n\t\t\t\t\t$should_ping = false;\n\t\t\t}\n\t\t\tif ( !$should_ping )\n\t\t\t\tbreak;\n\t\t}\n\t\tif ( $should_ping )\n\t\t\t$this->add_ping( 'db', array( 'option' => $option_name ) );\n\n\t\t// Step 2 -- If WordPress is about to kick off a some \"cron\" action, we need to\n\t\t// flush vaultpress, because the \"remote\" cron threads done via http fetch will\n\t\t// be happening completely inside the window of this thread.  That thread will\n\t\t// be expecting touched and accounted for tables\n\t\tif ( $option_name == '_transient_doing_cron' )\n\t\t\t$this->do_pings();\n\n\t\treturn $option_name;\n\t}\n\n\t// Handle Notifying VaultPress of Comment Activity\n\tfunction comment_action_handler( $comment_id ) {\n\t\tif ( !is_array( $comment_id ) ) {\n\t\t\tif ( wp_get_comment_status( $comment_id ) != 'spam' )\n\t\t\t\t$this->add_ping( 'db', array( 'comment' => $comment_id ) );\n\t\t} else {\n\t\t\tforeach ( $comment_id as $id ) {\n\t\t\t\tif ( wp_get_comment_status( $comment_id ) != 'spam' )\n\t\t\t\t\t$this->add_ping( 'db', array( 'comment' => $id) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handle Notifying VaultPress of Theme Switches\n\tfunction theme_action_handler( $theme ) {\n\t\t$this->add_ping( 'themes', array( 'theme' => get_option( 'stylesheet' ) ) );\n\t}\n\n\t// Handle Notifying VaultPress of Upload Activity\n\tfunction upload_handler( $file ) {\n\t\t$this->add_ping( 'uploads', array( 'upload' => str_replace( $this->resolve_upload_path(), '', $file['file'] ) ) );\n\t\treturn $file;\n\t}\n\n\t// Handle Notifying VaultPress of Plugin Activation/Deactivation\n\tfunction plugin_action_handler( $plugin='' ) {\n\t\t$this->add_ping( 'plugins', array( 'name' => $plugin ) );\n\t}\n\n\t// Handle Notifying VaultPress of User Edits\n\tfunction userid_action_handler( $user_or_id ) {\n\t\tif ( is_object($user_or_id) )\n\t\t\t$userid = intval( $user_or_id->ID );\n\t\telse\n\t\t\t$userid = intval( $user_or_id );\n\t\tif ( !$userid )\n\t\t\treturn;\n\t\t$this->add_ping( 'db', array( 'user' => $userid ) );\n\t}\n\n\t// Handle Notifying VaultPress of term changes\n\tfunction term_handler( $term_id, $tt_id=null ) {\n\t\t$this->add_ping( 'db', array( 'term' => $term_id ) );\n\t\tif ( $tt_id )\n\t\t\t$this->term_taxonomy_handler( $tt_id );\n\t}\n\n\t// Handle Notifying VaultPress of term_taxonomy changes\n\tfunction term_taxonomy_handler( $tt_id ) {\n\t\t$this->add_ping( 'db', array( 'term_taxonomy' => $tt_id ) );\n\t}\n\t// add(ed)_term_taxonomy handled via the created_term hook, the term_taxonomy_handler is called by the term_handler\n\n\t// Handle Notifying VaultPress of term_taxonomy changes\n\tfunction term_taxonomies_handler( $tt_ids ) {\n\t\tforeach( (array)$tt_ids as $tt_id ) {\n\t\t\t$this->term_taxonomy_handler( $tt_id );\n\t\t}\n\t}\n\n\t// Handle Notifying VaultPress of term_relationship changes\n\tfunction term_relationship_handler( $object_id, $term_id ) {\n\t\t$this->add_ping( 'db', array( 'term_relationship' => array( 'object_id' => $object_id, 'term_taxonomy_id' => $term_id ) ) );\n\t}\n\n\t// Handle Notifying VaultPress of term_relationship changes\n\tfunction term_relationships_handler( $object_id, $term_ids ) {\n\t\tforeach ( (array)$term_ids as $term_id ) {\n\t\t\t$this->term_relationship_handler( $object_id, $term_id );\n\t\t}\n\t}\n\n\t// Handle Notifying VaultPress of term_relationship changes\n\tfunction set_object_terms_handler( $object_id, $terms, $tt_ids ) {\n\t\t$this->term_relationships_handler( $object_id, $tt_ids );\n\t}\n\n\t// Handle Notifying VaultPress of UserMeta changes\n\tfunction usermeta_action_handler( $umeta_id, $user_id, $meta_key, $meta_value='' ) {\n\t\t$this->add_ping( 'db', array( 'usermeta' => $umeta_id ) );\n\t}\n\n\t// Handle Notifying VaultPress of Post Changes\n\tfunction post_action_handler($post_id) {\n\t\tif ( current_filter() == 'delete_post' )\n\t\t\treturn $this->add_ping( 'db', array( 'post' => $post_id ), 'delete_post' );\n\t\treturn $this->add_ping( 'db', array( 'post' => $post_id ), 'edit_post' );\n\t}\n\n\t// Handle Notifying VaultPress of Link Changes\n\tfunction link_action_handler( $link_id ) {\n\t\t$this->add_ping( 'db', array( 'link' => $link_id ) );\n\t}\n\n\t// Handle Notifying VaultPress of Commentmeta Changes\n\tfunction commentmeta_insert_handler( $meta_id, $comment_id=null ) {\n\t\tif ( empty( $comment_id ) || wp_get_comment_status( $comment_id ) != 'spam' )\n\t\t\t$this->add_ping( 'db', array( 'commentmeta' => $meta_id ) );\n\t}\n\n\tfunction commentmeta_modification_handler( $meta_id, $object_id, $meta_key, $meta_value ) {\n\t\tif ( !is_array( $meta_id ) )\n\t\t\treturn $this->add_ping( 'db', array( 'commentmeta' => $meta_id ) );\n\t\tforeach ( $meta_id as $id ) {\n\t\t\t$this->add_ping( 'db', array( 'commentmeta' => $id ) );\n\t\t}\n\t}\n\n\t// Handle Notifying VaultPress of PostMeta changes via newfangled metadata functions\n\tfunction postmeta_insert_handler( $meta_id, $post_id, $meta_key, $meta_value='' ) {\n\t\tif ( in_array( $meta_key, $this->get_post_meta_name_ignore() ) )\n\t\t\treturn;\t\n\n\t\t$this->add_ping( 'db', array( 'postmeta' => $meta_id ) );\n\t}\n\n\tfunction postmeta_modification_handler( $meta_id, $object_id, $meta_key, $meta_value ) {\n\t\tif ( in_array( $meta_key, $this->get_post_meta_name_ignore() ) )\n\t\t\treturn;\t\n\n\t\tif ( !is_array( $meta_id ) )\n\t\t\treturn $this->add_ping( 'db', array( 'postmeta' => $meta_id ) );\n\t\tforeach ( $meta_id as $id ) {\n\t\t\t$this->add_ping( 'db', array( 'postmeta' => $id ) );\n\t\t}\n\t}\n\n\t// Handle Notifying VaultPress of PostMeta changes via old school cherypicked hooks\n\tfunction postmeta_action_handler( $meta_id, $post_id = null, $meta_key = null ) {\n\t\tif ( in_array( $meta_key, $this->get_post_meta_name_ignore() ) )\n\t\t\treturn;\n\t\n\t\tif ( !is_array($meta_id) )\n\t\t\treturn $this->add_ping( 'db', array( 'postmeta' => $meta_id ) );\n\t\tforeach ( $meta_id as $id )\n\t\t\t$this->add_ping( 'db', array( 'postmeta' => $id ) );\n\t}\n\n\tfunction verify_table( $table ) {\n\t\tglobal $wpdb;\n\t\t$status = $wpdb->get_row( $wpdb->prepare( \"SHOW TABLE STATUS WHERE Name = %s\", $table ) );\n\t\tif ( !$status || !$status->Update_time || !$status->Comment || $status->Engine != 'MyISAM' )\n\t\t\treturn true;\n\t\tif ( preg_match( '/([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})/', $status->Comment, $m ) )\n\t\t\treturn ( $m[1] == $status->Update_time );\n\t\treturn false;\n\t}\n\n\t// Emulate $wpdb->last_table\n\tfunction record_table( $table ) {\n\t\tglobal $vaultpress_last_table;\n\t\t$vaultpress_last_table = $table;\n\t\treturn $table;\n\t}\n\n\t// Emulate $wpdb->last_table\n\tfunction get_last_table() {\n\t\tglobal $wpdb, $vaultpress_last_table;\n\t\tif ( is_object( $wpdb ) && isset( $wpdb->last_table ) )\n\t\t\treturn $wpdb->last_table;\n\t\treturn $vaultpress_last_table;\n\t}\n\n\t// Emulate hyperdb::is_write_query()\n\tfunction is_write_query( $q ) {\n\t\t$word = strtoupper( substr( trim( $q ), 0, 20 ) );\n\t\tif ( 0 === strpos( $word, 'SELECT' ) )\n\t\t\treturn false;\n\t\tif ( 0 === strpos( $word, 'SHOW' ) )\n\t\t\treturn false;\n\t\tif ( 0 === strpos( $word, 'CHECKSUM' ) )\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t// Emulate hyperdb::get_table_from_query()\n\tfunction get_table_from_query( $q ) {\n\t\tglobal $wpdb, $vaultpress_last_table;\n\n\t\tif ( is_object( $wpdb ) && method_exists( $wpdb, \"get_table_from_query\" ) )\n\t\t\treturn $wpdb->get_table_from_query( $q );\n\n\t\t// Remove characters that can legally trail the table name\n\t\t$q = rtrim( $q, ';/-#' );\n\t\t// allow ( select... ) union [...] style queries. Use the first queries table name.\n\t\t$q = ltrim( $q, \"\\t (\" );\n\n\t\t// Quickly match most common queries\n\t\tif ( preg_match( '/^\\s*(?:'\n\t\t\t\t. 'SELECT.*?\\s+FROM'\n\t\t\t\t. '|INSERT(?:\\s+IGNORE)?(?:\\s+INTO)?'\n\t\t\t\t. '|REPLACE(?:\\s+INTO)?'\n\t\t\t\t. '|UPDATE(?:\\s+IGNORE)?'\n\t\t\t\t. '|DELETE(?:\\s+IGNORE)?(?:\\s+FROM)?'\n\t\t\t\t. ')\\s+`?(\\w+)`?/is', $q, $maybe) )\n\t\t\treturn $this->record_table($maybe[1] );\n\n\t\t// Refer to the previous query\n\t\tif ( preg_match( '/^\\s*SELECT.*?\\s+FOUND_ROWS\\(\\)/is', $q ) )\n\t\t\treturn $this->get_last_table();\n\n\t\t// Big pattern for the rest of the table-related queries in MySQL 5.0\n\t\tif ( preg_match( '/^\\s*(?:'\n\t\t\t\t. '(?:EXPLAIN\\s+(?:EXTENDED\\s+)?)?SELECT.*?\\s+FROM'\n\t\t\t\t. '|INSERT(?:\\s+LOW_PRIORITY|\\s+DELAYED|\\s+HIGH_PRIORITY)?(?:\\s+IGNORE)?(?:\\s+INTO)?'\n\t\t\t\t. '|REPLACE(?:\\s+LOW_PRIORITY|\\s+DELAYED)?(?:\\s+INTO)?'\n\t\t\t\t. '|UPDATE(?:\\s+LOW_PRIORITY)?(?:\\s+IGNORE)?'\n\t\t\t\t. '|DELETE(?:\\s+LOW_PRIORITY|\\s+QUICK|\\s+IGNORE)*(?:\\s+FROM)?'\n\t\t\t\t. '|DESCRIBE|DESC|EXPLAIN|HANDLER'\n\t\t\t\t. '|(?:LOCK|UNLOCK)\\s+TABLE(?:S)?'\n\t\t\t\t. '|(?:RENAME|OPTIMIZE|BACKUP|RESTORE|CHECK|CHECKSUM|ANALYZE|OPTIMIZE|REPAIR).*\\s+TABLE'\n\t\t\t\t. '|TRUNCATE(?:\\s+TABLE)?'\n\t\t\t\t. '|CREATE(?:\\s+TEMPORARY)?\\s+TABLE(?:\\s+IF\\s+NOT\\s+EXISTS)?'\n\t\t\t\t. '|ALTER(?:\\s+IGNORE)?\\s+TABLE'\n\t\t\t\t. '|DROP\\s+TABLE(?:\\s+IF\\s+EXISTS)?'\n\t\t\t\t. '|CREATE(?:\\s+\\w+)?\\s+INDEX.*\\s+ON'\n\t\t\t\t. '|DROP\\s+INDEX.*\\s+ON'\n\t\t\t\t. '|LOAD\\s+DATA.*INFILE.*INTO\\s+TABLE'\n\t\t\t\t. '|(?:GRANT|REVOKE).*ON\\s+TABLE'\n\t\t\t\t. '|SHOW\\s+(?:.*FROM|.*TABLE)'\n\t\t\t\t. ')\\s+`?(\\w+)`?/is', $q, $maybe ) )\n\t\t\treturn $this->record_table( $maybe[1] );\n\n\t\t// All unmatched queries automatically fall to the global master\n\t\treturn $this->record_table( '' );\n\t}\n\n\tfunction table_notify_columns( $table ) {\n\t\t\t$want_cols = array(\n\t\t\t\t// data\n\t\t\t\t'posts'                 => '`ID`',\n\t\t\t\t'users'                 => '`ID`',\n\t\t\t\t'links'                 => '`link_id`',\n\t\t\t\t'options'               => '`option_id`,`option_name`',\n\t\t\t\t'comments'              => '`comment_ID`',\n\t\t\t\t// metadata\n\t\t\t\t'postmeta'              => '`meta_id`',\n\t\t\t\t'commentmeta'           => '`meta_id`',\n\t\t\t\t'usermeta'              => '`umeta_id`',\n\t\t\t\t// taxonomy\n\t\t\t\t'term_relationships'    => '`object_id`,`term_taxonomy_id`',\n\t\t\t\t'term_taxonomy'         => '`term_taxonomy_id`',\n\t\t\t\t'terms'                 => '`term_id`',\n\t\t\t\t// plugin special cases\n\t\t\t\t'wpo_campaign'          => '`id`', // WP-o-Matic\n\t\t\t\t'wpo_campaign_category' => '`id`', // WP-o-Matic\n\t\t\t\t'wpo_campaign_feed'     => '`id`', // WP-o-Matic\n\t\t\t\t'wpo_campaign_post'     => '`id`', // WP-o-Matic\n\t\t\t\t'wpo_campaign_word'     => '`id`', // WP-o-Matic\n\t\t\t\t'wpo_log'               => '`id`', // WP-o-Matic\n\t\t\t);\n\t\t\tif ( isset( $want_cols[$table] ) )\n\t\t\t\treturn $want_cols[$table];\n\t\t\treturn '*';\n\t}\n\n\tfunction ai_ping_next() {\n\t\tglobal $wpdb;\n\t\t$name = \"_vp_ai_ping\";\n\t\t$rval = $wpdb->query( $wpdb->prepare( \"REPLACE INTO `$wpdb->options` (`option_name`, `option_value`, `autoload`) VALUES (%s, '', 'no')\", $name ) );\n\t\tif ( !$rval )\n\t\t\treturn false;\n\t\treturn $wpdb->insert_id;\n\t}\n\n\tfunction ai_ping_insert( $value ) {\n\t\t$new_id = $this->ai_ping_next();\n\t\tif ( !$new_id )\n\t\t\treturn false;\n\t\tadd_option( '_vp_ai_ping_' . $new_id, $value, '', 'no' );\n\t}\n\n\tfunction ai_ping_count() {\n\t\tglobal $wpdb;\n\t\treturn $wpdb->get_var( \"SELECT COUNT(`option_id`) FROM $wpdb->options WHERE `option_name` LIKE '\\_vp\\_ai\\_ping\\_%'\" );\n\t}\n\n\tfunction ai_ping_get( $num=1, $order='ASC' ) {\n\t\tglobal $wpdb;\n\t\tif ( strtolower($order) != 'desc' )\n\t\t\t$order = 'ASC';\n\t\telse\n\t\t\t$order = 'DESC';\n\t\treturn $wpdb->get_results( $wpdb->prepare(\n\t\t\t\"SELECT * FROM $wpdb->options WHERE `option_name` LIKE '\\_vp\\_ai\\_ping\\_%%' ORDER BY `option_id` $order LIMIT %d\",\n\t\t\tmin( 10, max( 1, (int)$num ) )\n\t\t) );\n\t}\n\n\tfunction request_firewall_update( $external_services = false ) {\n\t\t$args     = array( 'timeout' => $this->get_option( 'timeout' ), 'sslverify' => true );\n\t\t$hostname = $this->get_option( 'hostname' );\n\t\t$path = $external_services ? 'service-ips-external' : 'service-ips';\n\n\t\t$data = false;\n\t\t$https_error = null;\n\t\t$retry = 2;\n\t\tdo {\n\t\t\t$retry--;\n\t\t\t$protocol = 'http'; \n\t\t\t$args['sslverify'] = 'https' == $protocol ? true : false;\n\t\t\t$r = wp_remote_get( $url=sprintf( \"%s://%s/%s\", $protocol, $hostname, $path ), $args );\n\t\t\tif ( 200 == wp_remote_retrieve_response_code( $r ) ) {\n\t\t\t\tif ( 99 == $this->get_option( 'connection_error_code' ) )\n\t\t\t\t\t$this->clear_connection();\n\t\t\t\t$data = @unserialize( wp_remote_retrieve_body( $r ) );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( 'https' == $protocol )\n\t\t\t\t$https_error = $r;\n\t\t\tusleep( 100 );\n\t\t} while( $retry > 0 );\n\n\t\t$r_code = wp_remote_retrieve_response_code( $https_error );\n\t\tif ( 0 == $retry && 200 != $r_code ) {\n\t\t\t$error_message = sprintf( 'Unexpected HTTP response code %s', $r_code );\n\t\t\tif ( false === $r_code )\n\t\t\t\t$error_message = 'Unable to find an HTTP transport that supports SSL verification';\n\t\t\telseif ( is_wp_error( $https_error ) )\n\t\t\t\t$error_message = $https_error->get_error_message();\n\t\t\t\n\t\t\t$this->update_option( 'connection', time() );\n\t\t\t$this->update_option( 'connection_error_code', 99 );\n\t\t\t$this->update_option( 'connection_error_message', sprintf( __('Warning: The VaultPress plugin is using an insecure protocol because it cannot verify the identity of the VaultPress server. Please contact your hosting provider, and ask them to check that SSL certificate verification is correctly configured on this server. The request failed with the following error: \"%s\". If you&rsquo;re still having issues please <a href=\"%1$s\">contact the VaultPress&nbsp;Safekeepers</a>.', 'vaultpress' ), esc_html( $error_message ), 'http://vaultpress.com/contact/' ) );\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\tfunction update_firewall() {\n\t\t$data = $this->request_firewall_update();\n\t\tif ( $data ) {\n\t\t\t$newval = array( 'updated' => time(), 'data' => $data );\n\t\t\t$this->update_option( 'service_ips', $newval );\n\t\t}\n\n\t\t$external_data = $this->request_firewall_update( true );\n\t\tif ( $external_data ) {\n\t\t\t$external_newval = array( 'updated' => time(), 'data' => $external_data );\n\t\t\tupdate_option( 'vaultpress_service_ips_external', $external_newval );\n\t\t}\n\n\t\tif ( !empty( $data ) && !empty( $external_data ) )\n\t\t\t$data = array_merge( $data, $external_data );\n\n\t\tif ( $data ) {\n\t\t\treturn $data;\n\t\t} else { \n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\t// Update local cache of VP plan settings, based on a ping or connection test result\n\tfunction update_plan_settings( $message ) {\n\t\tif ( array_key_exists( 'do_backups', $message ) )\t\n\t\t\t$this->update_option( 'do_not_backup', ( false === $message['do_backups'] ) );\n\t\t\t\n\t\tif ( array_key_exists( 'do_backup_pings', $message ) )\n\t\t\t$this->update_option( 'do_not_send_backup_pings', ( false === $message['do_backup_pings'] ) );\n\t}\n\n\tfunction check_connection( $force_check = false ) {\n\t\t$connection = $this->get_option( 'connection' );\n\n\t\tif ( !$force_check && !empty( $connection ) ) {\n\t\t\t// already established a connection\n\t\t \tif ( 'ok' == $connection )\n\t\t\t\treturn true;\n\n\t\t\t// only run the connection check every 5 minutes\n\t\t\tif ( ( time() - (int)$connection ) < 300 )\n\t\t\t\treturn false;\n\t\t}\n\n\t\t// if we're running a connection test we don't want to run it a second time\n\t\t$connection_test = $this->get_option( 'connection_test' );\n\t\tif ( $connection_test )\n\t\t\treturn true;\n\n\t\t// force update firewall settings\n\t\t$this->update_firewall();\n\n\t\t// initial connection test to server\n\t\t$this->update_option( 'connection_test', true );\n\t\t$this->delete_option( 'allow_forwarded_for' );\n\t\t$connect = $this->contact_service( 'test', array( 'host' => $_SERVER['HTTP_HOST'], 'uri' => $_SERVER['REQUEST_URI'], 'ssl' => is_ssl() ) );\n\n\t\t// we can't see the servers at all\n\t\tif ( !$connect ) {\n\t\t\t$this->update_option( 'connection', time() );\n\t\t\t$this->update_option( 'connection_error_code', 0 );\n\t\t\t$this->update_option( 'connection_error_message', sprintf( __( 'Cannot connect to the VaultPress servers. Please check that your host allows connecting to external sites and try again. If you&rsquo;re still having issues please <a href=\"%1$s\">contact the VaultPress&nbsp;Safekeepers</a>.', 'vaultpress' ), 'http://vaultpress.com/contact/' ) );\n\n\t\t\t$this->delete_option( 'connection_test' );\n\t\t\treturn false;\n\t\t}\n\n\t\t// VaultPress gave us a meaningful error\n\t\tif ( !empty( $connect['faultCode'] ) ) {\n\t\t\t$this->update_option( 'connection', time() );\n\t\t\t$this->update_option( 'connection_error_code', $connect['faultCode'] );\n\t\t\t$this->update_option( 'connection_error_message', $connect['faultString'] );\n\t\t\t$this->delete_option( 'connection_test' );\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->update_plan_settings( $connect );\n\n\t\tif ( !empty( $connect['signatures'] ) ) {\n\t\t\tdelete_option( '_vp_signatures' );\n\t\t\tadd_option( '_vp_signatures', maybe_unserialize( $connect['signatures'] ), '', 'no' );\n\t\t}\n\n\t\t// test connection between the site and the servers\n\t\t$connect = (string)$this->contact_service( 'test', array( 'type' => 'connect' ) );\n\t\tif ( 'ok' != $connect ) {\n\n\t\t\t// still not working so see if we're behind a load balancer\n\t\t\t$this->update_option( 'allow_forwarded_for', true );\n\t\t\t$connect = (string)$this->contact_service( 'test', array( 'type' => 'firewall-off' ) );\n\n\t\t\tif ( 'ok' != $connect ) {\n\t\t\t\tif ( 'error' == $connect ) {\n\t\t\t\t\t$this->update_option( 'connection_error_code', -1 );\n\t\t\t\t\t$this->update_option( 'connection_error_message', sprintf( __( 'The VaultPress servers cannot connect to your site. Please check that your site is visible over the Internet and there are no firewall or load balancer settings on your server that might be blocking the communication. If you&rsquo;re still having issues please <a href=\"%1$s\">contact the VaultPress&nbsp;Safekeepers</a>.', 'vaultpress' ), 'http://vaultpress.com/contact/' ) );\n\t\t\t\t} elseif ( !empty( $connect['faultCode'] ) ) {\n\t\t\t\t\t$this->update_option( 'connection_error_code', $connect['faultCode'] );\n\t\t\t\t\t$this->update_option( 'connection_error_message', $connect['faultString'] );\n\t\t\t\t}\n\n\t\t\t\t$this->update_option( 'connection', time() );\n\t\t\t\t$this->delete_option( 'connection_test' );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// successful connection established\n\t\t$this->update_option( 'connection', 'ok' );\n\t\t$this->delete_option( 'connection_error_code' );\n\t\t$this->delete_option( 'connection_error_message' );\n\t\t$this->delete_option( 'connection_test' );\n\t\treturn true;\n\t}\n\n\tfunction get_login_tokens() {\n\t\t// By default the login token is valid for 30 minutes.\n\t\t$nonce_life = $this->get_option( 'nonce_life' ) ? $this->get_option( 'nonce_life' ) : 1800; \n\t\t$salt = wp_salt( 'nonce' ) . md5( $this->get_option( 'secret' ) );\n\t\t$nonce_life /= 2;\n\n\t\treturn array(\n\t\t\t'previous' => substr( hash_hmac( 'md5', 'vp-login' . ceil( time() / $nonce_life - 1 ), $salt ), -12, 10 ),\n\t\t\t'current'  => substr( hash_hmac( 'md5', 'vp-login' . ceil( time() / $nonce_life ), $salt ), -12, 10 ),\n\t\t);\n\t}\n\tfunction add_js_token() {\n\t\t$nonce = $this->get_login_tokens();\n\t\t$token = $nonce['current'];\n\n\t\t// Uglyfies the JS code before sending it to the browser.\n\t\t$whitelist = array( 'charAt', 'all', 'setAttribute', 'document', 'createElement', 'appendChild', 'input', 'hidden', 'type', 'name', 'value', 'getElementById', 'loginform', '_vp' );\n\t\tshuffle( $whitelist );\n\t\t$whitelist = array_flip( $whitelist );\n\n\t\t$set = array(\n\t\t\t0   => array( '+[]', 'e^e' ),\n\t\t\t1   => array( '+!![]', '2>>1', \"e[{$whitelist['type']}].charCodeAt(3)>>6\" ),\n\t\t\t2   => array( '(+!![])<<1', \"e[{$whitelist['_vp']}].replace(/_/,'').length\" ),\n\t\t\t3   => array( \"(Math.log(2<<4)+[])[e[{$whitelist['charAt']}]](0)\", \"e[{$whitelist['_vp']}].length\" ),\n\t\t\t4   => array( '(+!![])<<2', \"e[{$whitelist['input']}].length^1\", \"e[{$whitelist['name']}].length\" ),\n\t\t\t5   => array( '((1<<2)+1)', 'parseInt(\"f\",0x10)/3' ),\n\t\t\t6   => array( '(7^1)', \"e[{$whitelist['hidden']}].length\" ),\n\t\t\t7   => array( '(3<<1)+1', \"e[{$whitelist['hidden']}].length^1\" ),\n\t\t\t8   => array( '(0x101>>5)', \"e[{$whitelist['document']}].length\" ),\n\t\t\t9   => array( '(0x7^4)*(3+[])', \"e[{$whitelist['loginform']}].length\", \"(1<<e[{$whitelist['_vp']}].length)^1\" ),\n\t\t\t'a' => array( \"(![]+\\\"\\\")[e[{$whitelist['charAt']}]](1)\", \"e[{$whitelist['appendChild']}][e[{$whitelist['charAt']}]](0)\", \"e[{$whitelist['name']}][e[{$whitelist['charAt']}]](1)\" ),\n\t\t\t'b' => array( \"([]+{})[e[{$whitelist['charAt']}]](2)\", \"({}+[])[e[{$whitelist['charAt']}]](2)\" ),\n\t\t\t'c' => array( \"([]+{})[e[{$whitelist['charAt']}]](5)\", \"e[{$whitelist['createElement']}][e[{$whitelist['charAt']}]](0)\" ),\n\t\t\t'd' => array( \"([][0]+\\\"\\\")[e[{$whitelist['charAt']}]](2)\", \"([][0]+[])[e[{$whitelist['charAt']}]](2)\" ),\n\t\t\t'e' => array( \"(!![]+[])[e[{$whitelist['charAt']}]](3)\", \"(!![]+\\\"\\\")[e[{$whitelist['charAt']}]](3)\" ),\n\t\t\t'f' => array( \"(![]+[])[e[{$whitelist['charAt']}]](0)\", \"([]+![])[e[{$whitelist['charAt']}]](e^e)\", \"([]+![])[e[{$whitelist['charAt']}]](0)\" ),\n\t\t);\n\n\t\t$js_code = <<<JS\n<script type=\"text/javascript\">\n/* <![CDATA[ */\n(function(){\n\tvar i,e='%s'.split('|'),_=[%s],s=function(a,b,c){a[b]=c};\n\tif(this[e[{$whitelist['document']}]][e[{$whitelist['all']}]]){\n\t\ttry {\n\t\t\ti=this[e[{$whitelist['document']}]][e[{$whitelist['createElement']}]]('<'+e[{$whitelist['input']}]+' '+e[{$whitelist['name']}]+'='+(e[{$whitelist['_vp']}]+(!![]))+' />');\n\t\t}catch(e){}\n\t}\n\tif(!i){\n\t\ti=this[e[{$whitelist['document']}]][e[{$whitelist['createElement']}]](e[{$whitelist['input']}]);\n\t\ts(i,e[{$whitelist['name']}],e[{$whitelist['_vp']}]+(!![]));\n\t}\n\ts(i,e[{$whitelist['type']}],e[{$whitelist['hidden']}]).\n\ts(i,e[{$whitelist['value']}],(%s+\"\"));\n\ttry {\n\t\tvar __=this[e[{$whitelist['document']}]][e[{$whitelist['getElementById']}]](e[{$whitelist['loginform']}]);\n\t\t__[e[{$whitelist['appendChild']}]](i);\n\t} catch(e){}\n})();\n/* ]]> */\n</script>\nJS;\n\t\t$chars = array();\n\t\tfor ( $i = 0; $i < strlen( $token ); $i++ ) {\n\t\t\tif ( isset( $set[$token{$i}] ) ) {\n\t\t\t\t$k = array_rand( $set[$token{$i}], 1 );\n\t\t\t\t$chars[] = $set[$token{$i}][$k];\n\t\t\t} else {\n\t\t\t\t$chars[] = $token{$i};\n\t\t\t}\n\t\t}\n\t\t$random = array_unique( $chars );\n\t\tshuffle( $random );\n\t\t$random = array_flip( $random );\n\n\t\tforeach( $chars as $i => $v )\n\t\t\t$chars[$i] = sprintf( '_[%d]', $random[$v] );\n\n\t\t$code = preg_replace( \n\t\t\t\"#[\\n\\r\\t]#\", \n\t\t\t'', \n\t\t\tsprintf( $js_code, \n\t\t\t\tjoin( '|', array_keys( $whitelist ) ), \n\t\t\t\tjoin( ',', array_keys( $random ) ), \n\t\t\t\tjoin( '+\"\")+(', $chars ) \n\t\t\t) \n\t\t);\n\t\techo $code;\n\t}\n\n\tfunction authenticate( $user, $username, $password ) {\n\t\tif ( is_wp_error( $user ) )\n\t\t\treturn $user;\n\t\tif ( defined( 'XMLRPC_REQUEST' ) && XMLRPC_REQUEST || defined( 'APP_REQUEST' ) && APP_REQUEST ) {\n\t\t\t// Try to log in with the username and password.\n\t\t}\n\t\t$retval = $user;\n\t\tif ( empty( $_POST['_vptrue'] ) || !in_array( $_POST['_vptrue'], $this->get_login_tokens(), true ) )\n\t\t\t$retval = new WP_Error( 'invalid_token', __( 'Invalid token. Please try to log in again.' ) );\n\n\t\treturn $retval;\n\t}\n\n\tfunction parse_request( $wp ) {\n\t\tif ( !isset( $_GET['vaultpress'] ) || $_GET['vaultpress'] !== 'true' )\n\t\t\treturn $wp;\n\n\t\tglobal $wpdb, $current_blog;\n\n\t\t// just in case we have any plugins that decided to spit some data out already...\n\t\t@ob_end_clean();\n\t\t// Headers to avoid search engines indexing \"invalid api call signature\" pages.\n\t\tif ( !headers_sent() ) {\n\t\t\theader( 'X-Robots-Tag: none' );\n\t\t\theader( 'X-Robots-Tag: unavailable_after: 1 Oct 2012 00:00:00 PST', false );\n\t\t}\n\n\t\tif ( isset( $_GET['ticker'] ) && function_exists( 'current_user_can' ) && current_user_can( 'manage_options' ) )\n\t\t\tdie( (string)$this->contact_service( 'ticker' ) );\n\n\t\t$_POST = array_map( 'stripslashes_deep', $_POST );\n\n\t\tglobal $wpdb, $bdb, $bfs;\n\t\tdefine( 'VAULTPRESS_API', true );\n\n\t\tif ( !$this->validate_api_signature() ) {\n\t\t\tglobal $__vp_validate_error;\n\t\t\tdie( 'invalid api call signature [' . base64_encode( serialize( $__vp_validate_error ) ) . ']' );\n\t\t}\n\t\t\n\t\tif ( !empty( $_GET['ge'] ) ) {\n\t\t\t// \"ge\" -- \"GET encoding\"\n\t\t\tif ( '1' === $_GET['ge'] )\n\t\t\t\t$_GET['action'] = base64_decode( $_GET['action'] );\n\t\t\tif ( '2' === $_GET['ge'] )\n\t\t\t\t$_GET['action'] = str_rot13( $_GET['action'] );\n\t\t}\n\n\t\tif ( !empty( $_GET['pe'] ) ) {\n\t\t\t// \"pe\" -- POST encoding\n\t\t\tif ( '1' === $_GET['pe'] ) {\n\t\t\t\tforeach( $_POST as $idx => $val ) {\n\t\t\t\t\tif ( $idx === 'signature' )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t$_POST[ base64_decode( $idx ) ] = base64_decode( $val );\n\t\t\t\t\tunset( $_POST[$idx] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( '2' === $_GET['pe'] ) {\n\t\t\t\tforeach( $_POST as $idx => $val ) {\n\t\t\t\t\tif ( $idx === 'signature' )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t$_POST[ base64_decode( $idx ) ] = str_rot13( $val );\n\t\t\t\t\tunset( $_POST[$idx] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( !isset( $bdb ) ) {\n\t\t\trequire_once( dirname( __FILE__ ) . '/class.vaultpress-database.php' );\n\t\t\trequire_once( dirname( __FILE__ ) . '/class.vaultpress-filesystem.php' );\n\n\t\t\t$bdb = new VaultPress_Database();\n\t\t\t$bfs = new VaultPress_Filesystem();\n\t\t}\n\n\t\theader( 'Content-Type: text/plain' );\n\n\t\t/*\n\t\t * general:ping\n\t\t *\n\t\t * catchup:get\n\t\t * catchup:delete\n\t\t *\n\t\t * db:tables\n\t\t * db:explain\n\t\t * db:cols\n\t\t *\n\t\t * plugins|themes|uploads|content|root:active\n\t\t * plugins|themes|uploads|content|root:dir\n\t\t * plugins|themes|uploads|content|root:ls\n\t\t * plugins|themes|uploads|content|root:stat\n\t\t * plugins|themes|uploads|content|root:get\n\t\t * plugins|themes|uploads|content|root:checksum\n\t\t *\n\t\t * config:get\n\t\t * config:set\n\t\t *\n\t\t */\n\t\tif ( !isset( $_GET['action'] ) )\n\t\t\tdie();\n\n\t\tswitch ( $_GET['action'] ) {\n\t\t\tdefault:\n\t\t\t\tdie();\n\t\t\t\tbreak;\n\t\t\tcase 'exec':\n\t\t\t\t$code = $_POST['code'];\n\t\t\t\tif ( !$code )\n\t\t\t\t\t$this->response( \"No Code Found\" );\n\t\t\t\t$syntax_check = @eval( 'return true;' . $code );\n\t\t\t\tif ( !$syntax_check )\n\t\t\t\t\t$this->response( \"Code Failed Syntax Check\" );\n\t\t\t\t$this->response( eval( $code ) );\n\t\t\t\tdie();\n\t\t\t\tbreak;\n\t\t\tcase 'catchup:get':\n\t\t\t\t$this->response( $this->ai_ping_get( (int)$_POST['num'], (string)$_POST['order'] ) );\n\t\t\t\tbreak;\n\t\t\tcase 'catchup:delete':\n\t\t\t\tif ( isset( $_POST['pings'] ) ) {\n\t\t\t\t\tforeach( unserialize( $_POST['pings'] ) as $ping ) {\n\t\t\t\t\t\tif ( 0 === strpos( $ping, '_vp_ai_ping_' ) )\n\t\t\t\t\t\t\tdelete_option( $ping );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'general:ping':\n\t\t\t\tglobal $wp_version, $wp_db_version, $manifest_version;\n\t\t\t\t@error_reporting(0);\n\t\t\t\t$http_modules = array();\n\t\t\t\t$httpd = null;\n\t\t\t\tif ( function_exists( 'apache_get_modules' ) ) {\n\t\t\t\t\tif ( isset( $_POST['apache_modules'] ) && $_POST['apache_modules'] == 1 )\n\t\t\t\t\t\t$http_modules = apache_get_modules();\n\t\t\t\t\telse\n\t\t\t\t\t\t$http_modules =  null;\n\t\t\t\t\tif ( function_exists( 'apache_get_version' ) ) {\n\t\t\t\t\t\t$version_pieces = explode( ' ', apache_get_version() );\n\t\t\t\t\t\t$httpd = array_shift( $version_pieces );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( !$httpd && 0 === stripos( $_SERVER['SERVER_SOFTWARE'], 'Apache' ) ) {\n\t\t\t\t\t$software_pieces = explode( ' ', $_SERVER['SERVER_SOFTWARE'] );\n\t\t\t\t\t$httpd = array_shift( $software_pieces );\n\t\t\t\t\tif ( isset( $_POST['apache_modules'] ) && $_POST['apache_modules'] == 1 )\n\t\t\t\t\t\t$http_modules =  'unknown';\n\t\t\t\t\telse\n\t\t\t\t\t\t$http_modules = null;\n\t\t\t\t}\n\t\t\t\tif ( !$httpd && defined( 'IIS_SCRIPT' ) && IIS_SCRIPT ) {\n\t\t\t\t\t$httpd = 'IIS';\n\t\t\t\t}\n\t\t\t\tif ( !$httpd && function_exists( 'nsapi_request_headers' ) ) {\n\t\t\t\t\t$httpd = 'NSAPI';\n\t\t\t\t}\n\t\t\t\tif ( !$httpd )\n\t\t\t\t\t$httpd = 'unknown';\n\t\t\t\t$mvars = array();\n\t\t\t\tif ( isset( $_POST['mysql_variables'] ) && $_POST['mysql_variables'] == 1 ) {\n\t\t\t\t\tforeach ( $wpdb->get_results( \"SHOW VARIABLES\" ) as $row )\n\t\t\t\t\t\t$mvars[\"$row->Variable_name\"] = $row->Value;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$this->update_plan_settings( $_POST );\n\n\t\t\t\t$ms_global_tables = array_merge( $wpdb->global_tables, $wpdb->ms_global_tables );\n\t\t\t\t$tinfo = array();\n\t\t\t\t$tprefix = $wpdb->prefix;\n\t\t\t\tif ( $this->is_multisite() ) {\n\t\t\t\t\t$tprefix = $wpdb->get_blog_prefix( $current_blog->blog_id );\n\t\t\t\t}\n\t\t\t\t$like_string = str_replace( '_', '\\_', $tprefix ) . \"%\";\n\t\t\t\tforeach ( $wpdb->get_results( $wpdb->prepare( \"SHOW TABLE STATUS LIKE %s\", $like_string ) ) as $row ) {\n\t\t\t\t\tif ( $this->is_main_site() ) {\n\t\t\t\t\t\t$matches = array();\n\t\t\t\t\t\tpreg_match( '/' . $tprefix . '(\\d+)_/', $row->Name, $matches );\n\t\t\t\t\t\tif ( isset( $matches[1] ) && (int) $current_blog->blog_id !== (int) $matches[1] )\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$table = preg_replace( '/^' . preg_quote( $wpdb->prefix ) . '/', '', $row->Name );\n\n\t\t\t\t\tif ( !$this->is_main_site() && $tprefix == $wpdb->prefix ) {\n\t\t\t\t\t\tif ( in_array( $table, $ms_global_tables ) )\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tif ( preg_match( '/' . $tprefix . '(\\d+)_/', $row->Name ) )\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$tinfo[$table] = array();\n\t\t\t\t\tforeach ( (array)$row as $i => $v )\n\t\t\t\t\t\t$tinfo[$table][$i] = $v;\n\t\t\t\t\tif ( empty( $tinfo[$table] ) )\n\t\t\t\t\t\tunset( $tinfo[$table] );\n\t\t\t\t}\n\n\t\t\t\tif ( $this->is_main_site() ) {\n\t\t\t\t\tforeach ( (array) $ms_global_tables as $ms_global_table ) {\n\t\t\t\t\t\t$ms_table_status = $wpdb->get_row( $wpdb->prepare( \"SHOW TABLE STATUS LIKE %s\", $wpdb->base_prefix . $ms_global_table ) );\n\t\t\t\t\t\tif ( !$ms_table_status )\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t$table = substr( $ms_table_status->Name, strlen( $wpdb->base_prefix ) );\n\t\t\t\t\t\t$tinfo[$table] = array();\n\t\t\t\t\t\tforeach ( (array) $ms_table_status as $i => $v )\n\t\t\t\t\t\t\t$tinfo[$table][$i] = $v;\n\t\t\t\t\t\tif ( empty( $tinfo[$table] ) )\n\t\t\t\t\t\t\tunset( $tinfo[$table] );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( isset( $_POST['php_ini'] ) && $_POST['php_ini'] == 1 )\n\t\t\t\t\t$ini_vals = @ini_get_all();\n\t\t\t\telse\n\t\t\t\t\t$ini_vals = null;\n\t\t\t\tif ( function_exists( 'sys_getloadavg' ) )\n\t\t\t\t\t$loadavg = sys_getloadavg();\n\t\t\t\telse\n\t\t\t\t\t$loadavg = null;\n\n\t\t\t\trequire_once ABSPATH . '/wp-admin/includes/plugin.php';\n                                if ( function_exists( 'get_plugin_data' ) )\n\t\t\t\t\t$vaultpress_response_info                  = get_plugin_data( __FILE__ );\n\t\t\t\telse\n\t\t\t\t\t$vaultpress_response_info\t\t   = array( 'Version' => $this->plugin_version );\n\t\t\t\t$vaultpress_response_info['deferred_pings']        = (int)$this->ai_ping_count();\n\t\t\t\t$vaultpress_response_info['vaultpress_hostname']   = $this->get_option( 'hostname' );\n\t\t\t\t$vaultpress_response_info['vaultpress_timeout']    = $this->get_option( 'timeout' );\n\t\t\t\t$vaultpress_response_info['disable_firewall']      = $this->get_option( 'disable_firewall' );\n\t\t\t\t$vaultpress_response_info['allow_forwarded_for']   = $this->get_option( 'allow_forwarded_for' );\n\t\t\t\t$vaultpress_response_info['is_writable']           = is_writable( __FILE__ );\n\n\t\t\t\t$_wptype = 's';\n\t\t\t\tif ( $this->is_multisite() ) {\n\t\t\t\t\tglobal $wpmu_version;\n\t\t\t\t\tif ( isset( $wpmu_version ) )\n\t\t\t\t\t\t$_wptype = 'mu';\n\t\t\t\t\telse\n\t\t\t\t\t\t$_wptype = 'ms';\n\t\t\t\t}\n\n\t\t\t\t$upload_url = '';\n\t\t\t\t$upload_dir = wp_upload_dir();\n\t\t\t\tif ( isset( $upload_dir['baseurl'] ) ) {\n\t\t\t\t\t$upload_url = $upload_dir['baseurl'];\n\t\t\t\t\tif ( false === strpos( $upload_url, 'http' ) )\n\t\t\t\t\t\t$upload_url = untrailingslashit( site_url() ) . $upload_url;\n\t\t\t\t}\n\n\t\t\t\t$this->response( array(\n\t\t\t\t\t'vaultpress' => $vaultpress_response_info,\n\t\t\t\t\t'wordpress' => array(\n\t\t\t\t\t\t'wp_version'       => $wp_version,\n\t\t\t\t\t\t'wp_db_version'    => $wp_db_version,\n\t\t\t\t\t\t'locale'\t   => get_locale(),\n\t\t\t\t\t\t'manifest_version' => $manifest_version,\n\t\t\t\t\t\t'prefix'           => $wpdb->prefix,\n\t\t\t\t\t\t'is_multisite'     => $this->is_multisite(),\n\t\t\t\t\t\t'is_main_site'     => $this->is_main_site(),\n\t\t\t\t\t\t'blog_id'          => isset( $current_blog ) ? $current_blog->blog_id : null,\n\t\t\t\t\t\t'theme'            => (string) ( function_exists( 'wp_get_theme' ) ? wp_get_theme() : get_current_theme() ),\n\t\t\t\t\t\t'plugins'          => preg_replace( '#/.*$#', '', get_option( 'active_plugins' ) ),\n\t\t\t\t\t\t'tables'           => $tinfo,\n\t\t\t\t\t\t'name'             => get_bloginfo( 'name' ),\n\t\t\t\t\t\t'upload_url'       => $upload_url,\n\t\t\t\t\t\t'site_url'         => $this->site_url(),\n\t\t\t\t\t\t'home_url'         => ( function_exists( 'home_url' ) ? home_url() : get_option( 'home' ) ),\n\t\t\t\t\t\t'type'             => $_wptype,\n\t\t\t\t\t),\n\t\t\t\t\t'server' => array(\n\t\t\t\t\t\t'host'   => $_SERVER['HTTP_HOST'],\n\t\t\t\t\t\t'server' => @php_uname( \"n\" ),\n\t\t\t\t\t\t'load'   => $loadavg,\n\t\t\t\t\t\t'info'   => @php_uname( \"a\" ),\n\t\t\t\t\t\t'time'   => time(),\n\t\t\t\t\t\t'php'    => array( 'version' => phpversion(), 'ini' => $ini_vals, 'directory_separator' => DIRECTORY_SEPARATOR ),\n\t\t\t\t\t\t'httpd'  => array(\n\t\t\t\t\t\t\t'type'    => $httpd,\n\t\t\t\t\t\t\t'modules' => $http_modules,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'mysql'  => $mvars,\n\t\t\t\t\t),\n\t\t\t\t) );\n\t\t\t\tbreak;\n\t\t\tcase 'db:prefix':\n\t\t\t\t$this->response( $wpdb->prefix );\n\t\t\t\tbreak;\n\t\t\tcase 'db:wpdb':\n\t\t\t\tif ( !$_POST['query'] )\n\t\t\t\t\tdie( \"naughty naughty\" );\n\t\t\t\t$query = @base64_decode( $_POST['query'] );\n\t\t\t\tif ( !$query )\n\t\t\t\t\tdie( \"naughty naughty\" );\n\t\t\t\tif ( !$_POST['function'] )\n\t\t\t\t\t$function = $function;\n\t\t\t\telse\n\t\t\t\t\t$function = $_POST['function'];\n\t\t\t\t$this->response( $bdb->wpdb( $query, $function ) );\n\t\t\t\tbreak;\n\t\t\tcase 'db:diff':\n\t\t\tcase 'db:count':\n\t\t\tcase 'db:cols':\n\t\t\t\tif ( isset( $_POST['limit'] ) )\n\t\t\t\t\t$limit = $_POST['limit'];\n\t\t\t\telse\n\t\t\t\t\t$limit = null;\n\n\t\t\t\tif ( isset( $_POST['offset'] ) )\n\t\t\t\t\t$offset = $_POST['offset'];\n\t\t\t\telse\n\t\t\t\t\t$offset = null;\n\n\t\t\t\tif ( isset( $_POST['columns'] ) )\n\t\t\t\t\t$columns = $_POST['columns'];\n\t\t\t\telse\n\t\t\t\t\t$columns = null;\n\n\t\t\t\tif ( isset( $_POST['signatures'] ) )\n\t\t\t\t\t$signatures = $_POST['signatures'];\n\t\t\t\telse\n\t\t\t\t\t$signatures = null;\n\n\t\t\t\tif ( isset( $_POST['where'] ) )\n\t\t\t\t\t$where = $_POST['where'];\n\t\t\t\telse\n\t\t\t\t\t$where = null;\n\n\t\t\t\tif ( isset( $_POST['table'] ) ) {\n\t\t\t\t\t$parse_create_table = isset( $_POST['use_new_hash'] ) && $_POST['use_new_hash'] ? true : false;\n\t\t\t\t\t$bdb->attach( base64_decode( $_POST['table'] ), $parse_create_table );\n\t\t\t\t}\n\n\t\t\t\t$action_pieces = explode( ':', $_GET['action'] );\n\t\t\t\tswitch ( array_pop( $action_pieces ) ) {\n\t\t\t\t\tcase 'diff':\n\t\t\t\t\t\tif ( !$signatures ) die( 'naughty naughty' );\n\t\t\t\t\t\t// encoded because mod_security sees this as an SQL injection attack\n\t\t\t\t\t\t$this->response( $bdb->diff( unserialize( base64_decode( $signatures ) ) ) );\n\t\t\t\t\tcase 'count':\n\t\t\t\t\t\tif ( !$columns ) die( 'naughty naughty' );\n\t\t\t\t\t\t$this->response( $bdb->count( unserialize( $columns ) ) );\n\t\t\t\t\tcase 'cols':\n\t\t\t\t\t\tif ( !$columns ) die( 'naughty naughty' );\n\t\t\t\t\t\t$this->response( $bdb->get_cols( unserialize( $columns ), $limit, $offset, $where ) );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'db:tables':\n\t\t\tcase 'db:explain':\n\t\t\tcase 'db:show_create':\n\t\t\t\tif ( isset( $_POST['filter'] ) )\n\t\t\t\t\t$filter = $_POST['filter'];\n\t\t\t\telse\n\t\t\t\t\t$filter = null;\n\n\t\t\t\tif ( isset( $_POST['table'] ) )\n\t\t\t\t\t$bdb->attach( base64_decode( $_POST['table'] ) );\n\n\t\t\t\t$action_pieces = explode( ':', $_GET['action'] );\n\t\t\t\tswitch ( array_pop( $action_pieces ) ) {\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdie( \"naughty naughty\" );\n\t\t\t\t\tcase 'tables':\n\t\t\t\t\t\t$this->response( $bdb->get_tables( $filter ) );\n\t\t\t\t\tcase 'explain':\n\t\t\t\t\t\t$this->response( $bdb->explain() );\n\t\t\t\t\tcase 'show_create':\n\t\t\t\t\t\t$this->response( $bdb->show_create() );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'db:restore':\n\t\t\t\tif ( !empty( $_POST['path'] ) && isset( $_POST['hash'] ) ) {\n\t\t\t\t\t$delete = !isset( $_POST['remove'] ) || $_POST['remove'] && 'false' !== $_POST['remove'];\n\t\t\t\t\t$this->response( $bdb->restore( $_POST['path'], $_POST['hash'], $delete ) );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'themes:active':\n\t\t\t\t$this->response( get_option( 'current_theme' ) );\n\t\t\tcase 'plugins:active':\n\t\t\t\t$this->response( preg_replace( '#/.*$#', '', get_option( 'active_plugins' ) ) );\n\t\t\t\tbreak;\n\t\t\tcase 'plugins:checksum': case 'uploads:checksum': case 'themes:checksum': case 'content:checksum': case 'root:checksum':\n\t\t\tcase 'plugins:ls':       case 'uploads:ls':       case 'themes:ls':       case 'content:ls':       case 'root:ls':\n\t\t\tcase 'plugins:dir':      case 'uploads:dir':      case 'themes:dir':      case 'content:dir':      case 'root:dir':\n\t\t\tcase 'plugins:stat':     case 'uploads:stat':     case 'themes:stat':     case 'content:stat':     case 'root:stat':\n\t\t\tcase 'plugins:get':      case 'uploads:get':      case 'themes:get':      case 'content:get':      case 'root:get':\n\n\t\t\t\t$action_pieces = explode( ':', $_GET['action'] );\n\t\t\t\t$bfs->want( array_shift( $action_pieces ) );\n\n\t\t\t\tif ( isset( $_POST['path'] ) )\n\t\t\t\t\t$path = $_POST['path'];\n\t\t\t\telse\n\t\t\t\t\t$path = '';\n\n\t\t\t\tif ( !$bfs->validate( $path ) )\n\t\t\t\t\tdie( \"naughty naughty\" );\n\n\t\t\t\tif ( isset( $_POST['sha1'] ) && $_POST['sha1'] )\n\t\t\t\t\t$sha1 = true;\n\t\t\t\telse\n\t\t\t\t\t$sha1 = false;\n\n\t\t\t\tif ( isset( $_POST['md5'] ) && $_POST['md5'] )\n\t\t\t\t\t$md5 = true;\n\t\t\t\telse\n\t\t\t\t\t$md5 = false;\n\n\t\t\t\tif ( isset( $_POST['limit'] ) && $_POST['limit'] )\n\t\t\t\t\t$limit=$_POST['limit'];\n\t\t\t\telse\n\t\t\t\t\t$limit = false;\n\n\t\t\t\tif ( isset( $_POST['offset'] ) && $_POST['offset'] )\n\t\t\t\t\t$offset = $_POST['offset'];\n\t\t\t\telse\n\t\t\t\t\t$offset = false;\n\n\t\t\t\tif ( isset( $_POST['recursive'] ) )\n\t\t\t\t\t$recursive = (bool)$_POST['recursive'];\n\t\t\t\telse\n\t\t\t\t\t$recursive = false;\n\n\t\t\t\tif ( isset( $_POST['full_list'] ) )\n\t\t\t\t\t$full_list = (bool)$_POST['full_list'];\n\t\t\t\telse\n\t\t\t\t\t$full_list = false;\n\n\t\t\t\t$action_pieces = explode( ':', $_GET['action'] );\n\t\t\t\tswitch ( array_pop( $action_pieces ) ) {\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdie( \"naughty naughty\" );\n\t\t\t\t\tcase 'checksum':\n\t\t\t\t\t\t$list = array();\n\t\t\t\t\t\t$this->response( $bfs->dir_checksum( $path, $list, $recursive ) );\n\t\t\t\t\tcase 'dir':\n\t\t\t\t\t\t$this->response( $bfs->dir_examine( $path, $recursive ) );\n\t\t\t\t\tcase 'stat':\n\t\t\t\t\t\t$this->response( $bfs->stat( $bfs->dir.$path ) );\n\t\t\t\t\tcase 'get':\n\t\t\t\t\t\t$bfs->fdump( $bfs->dir.$path );\n\t\t\t\t\tcase 'ls':\n\t\t\t\t\t\t$this->response( $bfs->ls( $path, $md5, $sha1, $limit, $offset, $full_list ) );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'config:get':\n\t\t\t\tif ( !isset( $_POST['key'] ) || !$_POST['key'] )\n\t\t\t\t\t$this->response( false );\n\t\t\t\t$key = '_vp_config_' . base64_decode( $_POST['key'] );\n\t\t\t\t$this->response( base64_encode( maybe_serialize( $this->get_config( $key ) ) ) );\n\t\t\t\tbreak;\n\t\t\tcase 'config:set':\n\t\t\t\tif ( !isset( $_POST['key'] ) || !$_POST['key'] ) {\n\t\t\t\t\t$this->response( false );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$key = '_vp_config_' . base64_decode( $_POST['key'] );\n\t\t\t\tif ( !isset( $_POST['val'] ) || !$_POST['val'] ) {\n\t\t\t\t\tif ( !isset($_POST['delete']) || !$_POST['delete'] ) {\n\t\t\t\t\t\t$this->response( false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->response( delete_option( $key ) );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$val = maybe_unserialize( base64_decode( $_POST['val'] ) );\n\t\t\t\t$this->response( update_option( $key, $val ) );\n\t\t\t\tbreak;\n\t\t}\n\t\tdie();\n\t}\n\n\tfunction _fix_ixr_null_to_string( &$args ) {\n\t\tif ( is_array( $args ) )\n\t\t\tforeach ( $args as $k => $v )\n\t\t\t\t$args[$k] = $this->_fix_ixr_null_to_string( $v );\n\t\telse if ( is_object( $args ) )\n\t\t\tforeach ( get_object_vars( $args ) as $k => $v )\n\t\t\t$args->$k = $this->_fix_ixr_null_to_string( $v );\n\t\telse\n\t\t\treturn null == $args ? '' : $args;\n\t\treturn $args;\n\t}\n\n\tfunction contact_service( $action, $args = array() ) {\n\t\tif ( 'test' != $action && 'register' != $action && !$this->check_connection() )\n\t\t\treturn false;\n\n\t\tglobal $current_user;\n\t\tif ( !isset( $args['args'] ) )\n\t\t\t$args['args'] = '';\n\t\t$old_timeout = ini_get( 'default_socket_timeout' );\n\t\t$timeout = $this->get_option( 'timeout' );\n\t\tif ( function_exists( 'ini_set' ) )\n\t\t\tini_set( 'default_socket_timeout', $timeout );\n\t\t$hostname = $this->get_option( 'hostname' );\n\n\t\tif ( !class_exists( 'VaultPress_IXR_SSL_Client' ) )\n\t\t\trequire_once( dirname( __FILE__ ) . '/class.vaultpress-ixr-ssl-client.php' );\n\t\t$client = new VaultPress_IXR_SSL_Client( $hostname, '/xmlrpc.php', 80, $timeout );\n\n\t\tif ( 'vaultpress.com' == $hostname )\n\t\t\t$client->ssl();\n\n\t\t// Begin audit trail breadcrumbs\n\t\tif ( isset( $current_user ) && is_object( $current_user ) && isset( $current_user->ID ) ) {\n\t\t\t$args['cause_user_id'] = intval( $current_user->ID );\n\t\t\t$args['cause_user_login'] = (string)$current_user->user_login;\n\t\t} else {\n\t\t\t$args['cause_user_id'] = -1;\n\t\t\t$args['cause_user_login'] = '';\n\t\t}\n\t\t$args['cause_ip'] = $_SERVER['REMOTE_ADDR'];\n\t\t$args['cause_uri'] = $_SERVER['REQUEST_URI'];\n\t\t$args['cause_method'] = $_SERVER['REQUEST_METHOD'];\n\t\t// End audit trail breadcrumbs\n\n\t\t$args['version']   = $this->plugin_version;\n\t\t$args['locale']    = get_locale();\n\t\t$args['site_url']  = $this->site_url();\n\n\t\t$salt              = md5( time() . serialize( $_SERVER ) );\n\t\t$args['key']       = $this->get_option( 'key' );\n\t\t$this->_fix_ixr_null_to_string( $args );\n\t\t$args['signature'] = $this->sign_string( serialize( $args ), $this->get_option( 'secret' ), $salt ).\":$salt\";\n\n\t\t$client->query( 'vaultpress.'.$action, new IXR_Base64( serialize( $args ) ) );\n\t\t$rval = $client->message ? $client->getResponse() : '';\n\t\tif ( function_exists( 'ini_set' ) )\n\t\t\tini_set( 'default_socket_timeout', $old_timeout );\n\n\t\t// we got an error from the servers\n\t\tif ( is_array( $rval ) && isset( $rval['faultCode'] ) ) {\n\t\t\t$this->update_option( 'connection', time() );\n\t\t\t$this->update_option( 'connection_error_code', $rval['faultCode'] );\n\t\t\t$this->update_option( 'connection_error_message', $rval['faultString'] );\n\t\t}\n\n\t\treturn $rval;\n\t}\n\n\tfunction validate_api_signature() {\n\t\tglobal $__vp_validate_error;\n\t\tif ( !empty( $_POST['signature'] ) ) {\n\t\t\tif ( is_string( $_POST['signature'] ) ) {\n\t\t\t\t$sig = $_POST['signature'];\n\t\t\t} else {\n\t\t\t\t$__vp_validate_error = array( 'error' => 'invalid_signature_format' );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$__vp_validate_error = array( 'error' => 'no_signature' );\n\t\t\treturn false;\n\t\t}\n\n\t\t$secret = $this->get_option( 'secret' );\n\t\tif ( !$secret ) {\n\t\t\t$__vp_validate_error = array( 'error' => 'missing_secret' );\n\t\t\treturn false;\n\t\t}\n\t\tif ( !$this->get_option( 'disable_firewall' ) ) {\n\t\t\t$rxs = $this->get_option( 'service_ips' );\n\t\t\t$service_ips_external = get_option( 'vaultpress_service_ips_external' );\n\t\t\tif ( !empty( $rxs['data'] ) && !empty( $service_ips_external['data'] ) )\n\t\t\t\t$rxs['data'] = array_merge( $rxs['data'], $service_ips_external['data'] );\n\t\t\tif ( $rxs ) {\n\t\t\t\t$timeout = time() - 86400;\n\t\t\t\tif ( $rxs ) {\n\t\t\t\t\tif ( $rxs['updated'] < $timeout )\n\t\t\t\t\t\t$refetch = true;\n\t\t\t\t\telse\n\t\t\t\t\t\t$refetch = false;\n\t\t\t\t\t$rxs = $rxs['data'];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$refetch = true;\n\t\t\t}\n\t\t\tif ( $refetch ) {\n\t\t\t\tif ( $data = $this->update_firewall() )\n\t\t\t\t\t$rxs = $data;\n\t\t\t}\n\t\t\tif ( !$this->validate_ip_address( $rxs ) )\n\t\t\t\treturn false;\n\t\t}\n\t\t$sig = explode( ':', $sig );\n\t\tif ( !is_array( $sig ) || count( $sig ) != 2 || !isset( $sig[0] ) || !isset( $sig[1] ) ) {\n\t\t\t$__vp_validate_error = array( 'error' => 'invalid_signature_format' );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Pass 1 -- new method\n\t\t$uri = preg_replace( '/^[^?]+\\?/', '?', $_SERVER['REQUEST_URI'] );\n\t\t$post = $_POST;\n\t\tunset( $post['signature'] );\n\t\t// Work around for dd-formmailer plugin\n\t\tif ( isset( $post['_REPEATED'] ) )\n\t\t\tunset( $post['_REPEATED'] );\n\t\tksort( $post );\n\t\t$to_sign = serialize( array( 'uri' => $uri, 'post' => $post ) );\n\t\t$signature = $this->sign_string( $to_sign, $secret, $sig[1] );\n\t\tif ( $sig[0] === $signature )\n\t\t\treturn true;\n\n\t\t$__vp_validate_error = array( 'error' => 'invalid_signed_data' );\n\t\treturn false;\n\t}\n\n\tfunction ip_in_cidr( $ip, $cidr ) {\n\t\tlist ($net, $mask) = explode( '/', $cidr );\n\t\treturn ( ip2long( $ip ) & ~((1 << (32 - $mask)) - 1) ) == ( ip2long( $net ) & ~((1 << (32 - $mask)) - 1) );\n}\n\n\tfunction ip_in_cidrs( $ip, $cidrs ) {\n\t\tforeach ( (array)$cidrs as $cidr ) {\n\t\t\tif ( $this->ip_in_cidr( $ip, $cidr ) ) {\n\t\t\t\treturn $cidr;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction validate_ip_address( $rxs ) {\n\t\tglobal $__vp_validate_error;\n\t\tif ( empty( $rxs ) ) {\n\t\t\t$__vp_validate_error = array( 'error' => 'empty_vp_ip_range' );\n\t\t\treturn false;\n\t\t}\n\n\t\t$remote_ips = array();\n\n\t\tif ( $this->get_option( 'allow_forwarded_for') && !empty( $_SERVER['HTTP_X_FORWARDED_FOR'] ) )\n\t\t\t$remote_ips = explode( ',', $_SERVER['HTTP_X_FORWARDED_FOR'] );\n\n\t\tif ( !empty( $_SERVER['REMOTE_ADDR'] ) )\n\t\t\t$remote_ips[] = $_SERVER['REMOTE_ADDR'];\n\n\t\tif ( empty( $remote_ips ) ) {\n\t\t\t$__vp_validate_error = array( 'error' => 'no_remote_addr', 'detail' => (int) $this->get_option( 'allow_forwarded_for' ) ); // shouldn't happen\n\t\t\treturn false;\n\t\t}\n\n\t\t$iprx = '/^([0-9]+\\.[0-9]+\\.[0-9]+\\.)([0-9]+)$/';\n\n\t\tforeach ( $remote_ips as $_remote_ip ) {\n\t\t\t$remote_ip = preg_replace( '#^::(ffff:)?#', '', $_remote_ip );\n\t\t\tif ( !preg_match( $iprx, $remote_ip, $r ) ) {\n\t\t\t\t$__vp_validate_error = array( 'error' => \"remote_addr_fail\", 'detail' => $_remote_ip );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tforeach ( (array)$rxs as $begin => $end ) {\n\t\t\t\tif ( !preg_match( $iprx, $begin, $b ) )\n\t\t\t\t\tcontinue;\n\t\t\t\tif ( !preg_match( $iprx, $end, $e ) )\n\t\t\t\t\tcontinue;\n\t\t\t\tif ( $r[1] != $b[1] || $r[1] != $e[1] )\n\t\t\t\t\tcontinue;\n\t\t\t\t$me = $r[2];\n\t\t\t\t$b = min( (int)$b[2], (int)$e[2] );\n\t\t\t\t$e = max( (int)$b[2], (int)$e[2] );\n\t\t\t\tif ( $me >= $b &&  $me <= $e ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$__vp_validate_error = array( 'error' => 'remote_addr_fail', 'detail' => $remote_ips );\n\n\t\treturn false;\n\t}\n\n\tfunction sign_string( $string, $secret, $salt ) {\n\t\treturn hash_hmac( 'sha1', \"$string:$salt\", $secret );\n\t}\n\n\tfunction response( $response, $raw = false ) {\n\t\t// \"re\" -- \"Response Encoding\"\n\t\tif ( !empty( $_GET['re'] ) )\n\t\t\theader( sprintf( 'X-VP-Encoded: X%d', abs( intval( $_GET['re'] ) ) ) );\n\t\tif ( $raw ) {\n\t\t\tif ( !isset( $_GET['re'] ) )\n\t\t\t\tdie( $response );\n\t\t\telse if ( '1' === $_GET['re'] )\n\t\t\t\tdie( base64_encode( $response ) );\n\t\t\telse if ( '2' === $_GET['re'] )\n\t\t\t\tdie( str_rot13( $response ) );\n\t\t\telse \n\t\t\t\tdie( $response );\n\t\t}\n\t\tlist( $usec, $sec ) = explode( \" \", microtime() );\n\t\t$r = new stdClass();\n\t\t$r->req_vector = floatval( $_GET['vector'] );\n\t\t$r->rsp_vector = ( (float)$usec + (float)$sec );\n\t\tif ( function_exists( \"getrusage\" ) )\n\t\t\t$r->rusage = getrusage();\n\t\telse\n\t\t\t$r->rusage = false;\n\t\tif ( function_exists( \"memory_get_peak_usage\" ) )\n\t\t\t$r->peak_memory_usage = memory_get_peak_usage( true );\n\t\telse\n\t\t\t$r->peak_memory_usage = false;\n\t\tif ( function_exists( \"memory_get_usage\" ) )\n\t\t\t$r->memory_usage = memory_get_usage( true );\n\t\telse\n\t\t\t$r->memory_usage = false;\n\t\t$r->response = $response;\n\t\tif ( !isset( $_GET['re'] ) )\n\t\t\tdie( serialize( $r )  );\n\t\telse if ( '1' === $_GET['re'] )\n\t\t\tdie( base64_encode( serialize( $r )  ) );\n\t\telse if ( '2' === $_GET['re'] )\n\t\t\tdie( str_rot13( serialize( $r )  ) );\n\t\telse \n\t\t\tdie( serialize( $r ) );\n\t}\n\n\tfunction reset_pings() {\n\t\tglobal $vaultpress_pings;\n\t\t$vaultpress_pings = array(\n\t\t\t'version'      => 1,\n\t\t\t'count'        => 0,\n\t\t\t'editedtables' => array(),\n\t\t\t'plugins'      => array(),\n\t\t\t'themes'       => array(),\n\t\t\t'uploads'      => array(),\n\t\t\t'db'           => array(),\n\t\t\t'debug'        => array(),\n\t\t\t'security'     => array(),\n\t\t);\n\t}\n\n\tfunction add_ping( $type, $data, $hook=null ) {\n\t\tglobal $vaultpress_pings;\n\t\tif ( defined( 'WP_IMPORTING' ) && constant( 'WP_IMPORTING' ) )\n\t\t\treturn;\n\t\tif ( !array_key_exists( $type, $vaultpress_pings ) )\n\t\t\treturn;\n\n\t\tswitch( $type ) {\n\t\t\tcase 'editedtables';\n\t\t\t\t$vaultpress_pings[$type] = $data;\n\t\t\t\treturn;\n\t\t\tcase 'uploads':\n\t\t\tcase 'themes':\n\t\t\tcase 'plugins':\n\t\t\t\tif ( !is_array( $data ) ) {\n\t\t\t\t\t$data = array( $data );\n\t\t\t\t}\n\t\t\t\tforeach ( $data as $val ) {\n\t\t\t\t\tif ( in_array( $data, $vaultpress_pings[$type] ) )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t$vaultpress_pings['count']++;\n\t\t\t\t\t$vaultpress_pings[$type][]=$val;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'db':\n\t\t\t\t$_keys = array_keys( $data );\n\t\t\t\t$subtype = array_shift( $_keys );\n\t\t\t\tif ( !isset( $vaultpress_pings[$type][$subtype] ) )\n\t\t\t\t\t$vaultpress_pings[$type][$subtype] = array();\n\t\t\t\tif ( in_array( $data, $vaultpress_pings[$type][$subtype] ) )\n\t\t\t\t\treturn;\n\t\t\t\t$vaultpress_pings['count']++;\n\t\t\t\t$vaultpress_pings[$type][$subtype][] = $data;\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\tif ( in_array( $data, $vaultpress_pings[$type] ) )\n\t\t\t\t\treturn;\n\t\t\t\t$vaultpress_pings['count']++;\n\t\t\t\t$vaultpress_pings[$type][] = $data;\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\tfunction do_pings() {\n\t\tglobal $wpdb, $vaultpress_pings, $__vp_recursive_ping_lock;\n\t\tif ( defined( 'WP_IMPORTING' ) && constant( 'WP_IMPORTING' ) )\n\t\t\treturn;\n\n\t\tif ( !isset( $wpdb ) ) {\n\t\t\t$wpdb = new wpdb( DB_USER, DB_PASSWORD, DB_NAME, DB_HOST );\n\t\t\t$close_wpdb = true;\n\t\t} else {\n\t\t\t$close_wpdb = false;\n\t\t}\n\n\t\tif ( !$vaultpress_pings['count'] )\n\t\t\treturn;\n\n\t\t// Short circuit the contact process if we know that we can't contact the service\n\t\tif ( isset( $__vp_recursive_ping_lock ) && $__vp_recursive_ping_lock ) {\n\t\t\t$this->ai_ping_insert( serialize( $vaultpress_pings ) );\n\t\t\tif ( $close_wpdb ) {\n\t\t\t\t$wpdb->__destruct();\n\t\t\t\tunset( $wpdb );\n\t\t\t}\n\t\t\t$this->reset_pings();\n\t\t\treturn;\n\t\t}\n\n\t\t$ping_attempts = 0;\n\t\tdo {\n\t\t\t$ping_attempts++;\n\t\t\t$rval = $this->contact_service( 'ping', array( 'args' => $vaultpress_pings ) );\n\t\t\tif ( $rval || $ping_attempts >= 3 )\n\t\t\t\tbreak;\n\t\t\tif ( !$rval )\n\t\t\t\tusleep(500000);\n\t\t} while ( true );\n\t\tif ( !$rval ) {\n\t\t\t$__vp_recursive_ping_lock = true;\n\t\t\t$this->ai_ping_insert( serialize( $vaultpress_pings ) );\n\t\t}\n\t\t$this->reset_pings();\n\t\tif ( $close_wpdb ) {\n\t\t\t$wpdb->__destruct();\n\t\t\tunset( $wpdb );\n\t\t}\n\t\treturn $rval;\n\t}\n\n\tfunction resolve_content_dir() {\n\t\t// Take the easy way out\n\t\tif ( defined( 'WP_CONTENT_DIR' ) ) {\n\t\t\tif ( substr( WP_CONTENT_DIR, -1 ) != DIRECTORY_SEPARATOR )\n\t\t\t\treturn WP_CONTENT_DIR . DIRECTORY_SEPARATOR;\n\t\t\treturn WP_CONTENT_DIR;\n\t\t}\n\t\t// Best guess\n\t\tif ( defined( 'ABSPATH' ) ) {\n\t\t\tif ( substr( ABSPATH, -1 ) != DIRECTORY_SEPARATOR )\n\t\t\t\treturn ABSPATH . DIRECTORY_SEPARATOR . 'wp-content' . DIRECTORY_SEPARATOR;\n\t\t\treturn ABSPATH . 'wp-content' . DIRECTORY_SEPARATOR;\n\t\t}\n\t\t// Run with a solid assumption: WP_CONTENT_DIR/vaultpress/vaultpress.php\n\t\treturn dirname( dirname( __FILE__ ) ) . DIRECTORY_SEPARATOR;\n\t}\n\n\tfunction resolve_upload_path() {\n\t\t$upload_path = false;\n\t\t$upload_dir = wp_upload_dir();\n\n\t\tif ( isset( $upload_dir['basedir'] ) )\n\t\t\t$upload_path = $upload_dir['basedir'];\n\n\t\t// Nothing recorded? use a best guess!\n\t\tif ( !$upload_path || $upload_path == realpath( ABSPATH ) )\n\t\t\treturn $this->resolve_content_dir() . 'uploads' . DIRECTORY_SEPARATOR;\n\n\t\tif ( substr( $upload_path, -1 ) != DIRECTORY_SEPARATOR )\n\t\t\t$upload_path .= DIRECTORY_SEPARATOR;\n\n\t\treturn $upload_path;\n\t}\n\n\tfunction load_first( $value ) {\n\t\t$value = array_unique( $value ); // just in case there are duplicates\n\t\treturn array_merge(\n\t\t\tpreg_grep( '/vaultpress\\.php$/', $value ),\n\t\t\tpreg_grep( '/vaultpress\\.php$/', $value, PREG_GREP_INVERT )\n\t\t);\n\t}\n\n\tfunction is_multisite() {\n\t\tif ( function_exists( 'is_multisite' ) )\n\t\t\treturn is_multisite();\n\n\t\treturn false;\n\t}\n\n\tfunction is_main_site() {\n\t\tif ( !function_exists( 'is_main_site' ) || !$this->is_multisite() )\n\t\t\treturn true;\n\n\t\treturn is_main_site();\n\t}\n\n\tfunction is_registered() {\n\t\t$key    = $this->get_option( 'key' );\n\t\t$secret = $this->get_option( 'secret' );\n\t\treturn !empty( $key ) && !empty( $secret );\n\t}\n\n\tfunction clear_connection() {\n\t\t$this->delete_option( 'connection' );\n\t\t$this->delete_option( 'connection_error_code' );\n\t\t$this->delete_option( 'connection_error_message' );\n\t\t$this->delete_option( 'connection_test' );\n\t}\n\n\tfunction site_url() {\n\t\t$site_url = '';\n\n\t\t// compatibility for WordPress MU Domain Mapping plugin\n\t\tif ( defined( 'DOMAIN_MAPPING' ) && DOMAIN_MAPPING ) {\n\t\t\tif ( !function_exists( 'domain_mapping_siteurl' ) ) {\n\n\t\t\t\tif ( !function_exists( 'is_plugin_active' ) )\n\t\t\t\t\trequire_once ABSPATH . '/wp-admin/includes/plugin.php';\n\n\t\t\t\t$plugin = 'wordpress-mu-domain-mapping/domain_mapping.php';\n\t\t\t\tif ( is_plugin_active( $plugin ) )\n\t\t\t\t\tinclude_once( WP_PLUGIN_DIR . '/' . $plugin );\n\t\t\t}\n\n\t\t\tif ( function_exists( 'domain_mapping_siteurl' ) )\n\t\t\t\t$site_url = domain_mapping_siteurl( false );\n\t\t}\n\n\t\tif ( empty( $site_url ) )\n\t\t\t$site_url = site_url();\n\n\t\treturn $site_url;\n\t}\n\n\tfunction add_admin_actions_and_filters() {\n\t\tadd_action( 'admin_init', array( $this, 'admin_init' ) );\n\t\tadd_action( 'admin_menu', array( $this, 'admin_menu' ), 5 ); # Priority 5, so it's called before Jetpack's admin_menu.\n\t\tadd_action( 'admin_head', array( $this, 'admin_head' ) );\n\t}\n\n\tfunction add_listener_actions_and_filters() {\n\t\tadd_action( 'admin_bar_menu', array( $this, 'toolbar' ), 999 );\n\t\tadd_action( 'admin_bar_init', array( $this, 'styles' ) );\n\n\t\t// Comments\n\t\tadd_action( 'delete_comment',        array( $this, 'comment_action_handler' ) );\n\t\tadd_action( 'wp_set_comment_status', array( $this, 'comment_action_handler' ) );\n\t\tadd_action( 'trashed_comment',       array( $this, 'comment_action_handler' ) );\n\t\tadd_action( 'untrashed_comment',     array( $this, 'comment_action_handler' ) );\n\t\tadd_action( 'wp_insert_comment',     array( $this, 'comment_action_handler' ) );\n\t\tadd_action( 'comment_post',          array( $this, 'comment_action_handler' ) );\n\t\tadd_action( 'edit_comment',          array( $this, 'comment_action_handler' ) );\n\n\t\t// Commentmeta\n\t\tadd_action( 'added_comment_meta',   array( $this, 'commentmeta_insert_handler' ), 10, 2 );\n\t\tadd_action( 'updated_comment_meta', array( $this, 'commentmeta_modification_handler' ), 10, 4 );\n\t\tadd_action( 'deleted_comment_meta', array( $this, 'commentmeta_modification_handler' ), 10, 4 );\n\n\t\t// Users\n\t\tif ( $this->is_main_site() ) {\n\t\t\tadd_action( 'user_register',  array( $this, 'userid_action_handler' ) );\n\t\t\tadd_action( 'password_reset', array( $this, 'userid_action_handler' ) );\n\t\t\tadd_action( 'profile_update', array( $this, 'userid_action_handler' ) );\n\t\t\tadd_action( 'user_register',  array( $this, 'userid_action_handler' ) );\n\t\t\tadd_action( 'deleted_user',   array( $this, 'userid_action_handler' ) );\n\t\t}\n\n\t\t// Usermeta\n\t\tif ( $this->is_main_site() ) {\n\t\t\tadd_action( 'added_usermeta',  array( $this, 'usermeta_action_handler' ), 10, 4 );\n\t\t\tadd_action( 'update_usermeta', array( $this, 'usermeta_action_handler' ), 10, 4 );\n\t\t\tadd_action( 'delete_usermeta', array( $this, 'usermeta_action_handler' ), 10, 4 );\n\t\t}\n\n\t\t// Posts\n\t\tadd_action( 'delete_post',              array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'trash_post',               array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'untrash_post',             array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'edit_post',                array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'save_post',                array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'wp_insert_post',           array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'edit_attachment',          array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'add_attachment',           array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'delete_attachment',        array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'private_to_published',     array( $this, 'post_action_handler' ) );\n\t\tadd_action( 'wp_restore_post_revision', array( $this, 'post_action_handler' ) );\n\n\t\t// Postmeta\n\t\tadd_action( 'added_post_meta',   array( $this, 'postmeta_insert_handler' ), 10, 4 );\n\t\tadd_action( 'update_post_meta',  array( $this, 'postmeta_modification_handler' ), 10, 4 );\n\t\tadd_action( 'updated_post_meta', array( $this, 'postmeta_modification_handler' ), 10, 4 );\n\t\tadd_action( 'delete_post_meta',  array( $this, 'postmeta_modification_handler' ), 10, 4 );\n\t\tadd_action( 'deleted_post_meta', array( $this, 'postmeta_modification_handler' ), 10, 4 );\n\t\tadd_action( 'added_postmeta',    array( $this, 'postmeta_action_handler' ), 10, 3 );\n\t\tadd_action( 'update_postmeta',   array( $this, 'postmeta_action_handler' ), 10, 3 );\n\t\tadd_action( 'delete_postmeta',   array( $this, 'postmeta_action_handler' ), 10, 3 );\n\n\t\t// Links\n\t\tadd_action( 'edit_link',   array( $this, 'link_action_handler' ) );\n\t\tadd_action( 'add_link',    array( $this, 'link_action_handler' ) );\n\t\tadd_action( 'delete_link', array( $this, 'link_action_handler' ) );\n\n\t\t// Taxonomy\n\t\tadd_action( 'created_term',              array( $this, 'term_handler' ), 2 );\n\t\tadd_action( 'edited_terms',              array( $this, 'term_handler' ), 2 );\n\t\tadd_action( 'delete_term',               array( $this, 'term_handler' ), 2 );\n\t\tadd_action( 'edit_term_taxonomy',        array( $this, 'term_taxonomy_handler' ) );\n\t\tadd_action( 'delete_term_taxonomy',      array( $this, 'term_taxonomy_handler' ) );\n\t\tadd_action( 'edit_term_taxonomies',      array( $this, 'term_taxonomies_handler' ) );\n\t\tadd_action( 'add_term_relationship',     array( $this, 'term_relationship_handler' ), 10, 2 );\n\t\tadd_action( 'delete_term_relationships', array( $this, 'term_relationships_handler' ), 10, 2 );\n\t\tadd_action( 'set_object_terms',          array( $this, 'set_object_terms_handler' ), 10, 3 );\n\n\t\t// Files\n\t\tif ( $this->is_main_site() ) {\n\t\t\tadd_action( 'switch_theme',      array( $this, 'theme_action_handler' ) );\n\t\t\tadd_action( 'activate_plugin',   array( $this, 'plugin_action_handler' ) );\n\t\t\tadd_action( 'deactivate_plugin', array( $this, 'plugin_action_handler' ) );\n\t\t}\n\t\tadd_action( 'wp_handle_upload',  array( $this, 'upload_handler' ) );\n\n\t\t// Options\n\t\tadd_action( 'deleted_option', array( $this, 'option_handler' ), 1 );\n\t\tadd_action( 'updated_option', array( $this, 'option_handler' ), 1 );\n\t\tadd_action( 'added_option',   array( $this, 'option_handler' ), 1 );\n\n\t\t$this->add_vp_required_filters();\n\t}\n\n\tfunction add_vp_required_filters() {\n\t\t// Log ins\n\t\tif ( $this->get_option( 'login_lockdown' ) ) {\n\t\t\tadd_action( 'login_form', array( $this, 'add_js_token' ) );\n\t\t\tadd_filter( 'authenticate', array( $this, 'authenticate' ), 999 );\n\t\t}\n\n\t\t// Report back to VaultPress\n\t\tadd_action( 'shutdown', array( $this, 'do_pings' ) );\n\n\t\t// VaultPress likes being first in line\n\t\tadd_filter( 'pre_update_option_active_plugins', array( $this, 'load_first' ) );\n\t}\n}\n\n$vaultpress = VaultPress::init();\n\nif ( isset( $_GET['vaultpress'] ) && $_GET['vaultpress'] ) {\n\tif ( !function_exists( 'wp_magic_quotes' ) ) {\n\t\t// If already slashed, strip.\n\t\tif ( get_magic_quotes_gpc() ) {\n\t\t\t$_GET    = stripslashes_deep( $_GET    );\n\t\t\t$_POST   = stripslashes_deep( $_POST   );\n\t\t\t$_COOKIE = stripslashes_deep( $_COOKIE );\n\t\t}\n\n\t\t// Escape with wpdb.\n\t\t$_GET    = add_magic_quotes( $_GET    );\n\t\t$_POST   = add_magic_quotes( $_POST   );\n\t\t$_COOKIE = add_magic_quotes( $_COOKIE );\n\t\t$_SERVER = add_magic_quotes( $_SERVER );\n\n\t\t// Force REQUEST to be GET + POST.  If SERVER, COOKIE, or ENV are needed, use those superglobals directly.\n\t\t$_REQUEST = array_merge( $_GET, $_POST );\n\t} else {\n\t\twp_magic_quotes();\n\t}\n\n\tif ( !function_exists( 'wp_get_current_user' ) )\n\t\tinclude ABSPATH . '/wp-includes/pluggable.php';\n\n\t// TODO: this prevents some error notices but do we need it? is there a better way to check capabilities/logged in user/etc?\n\tif ( function_exists( 'wp_cookie_constants' ) && !defined( 'AUTH_COOKIE' ) )\n\t\twp_cookie_constants();\n\n\t$vaultpress->parse_request( null );\n\n\tdie();\n}\n\n// only load hotfixes if it's not a VP request\nrequire_once( dirname( __FILE__ ) . '/class.vaultpress-hotfixes.php' );\n$hotfixes = new VaultPress_Hotfixes();\n\ninclude_once( dirname( __FILE__ ) . '/cron-tasks.php' );\n"], "filenames": ["class.vaultpress-hotfixes.php", "readme.txt", "vaultpress.php"], "buggy_code_start_loc": [87, 6, 6], "buggy_code_end_loc": [576, 53, 22], "fixing_code_start_loc": [88, 6, 6], "fixing_code_end_loc": [619, 57, 22], "type": "CWE-434", "message": "A vulnerability was found in VaultPress Plugin up to 1.6.0 on WordPress. It has been declared as critical. Affected by this vulnerability is the function protect_aioseo_ajax of the file class.vaultpress-hotfixes.php of the component MailPoet Plugin. The manipulation leads to unrestricted upload. The attack can be launched remotely. Upgrading to version 1.6.1 is able to address this issue. The name of the patch is e3b92b14edca6291c5f998d54c90cbe98a1fb0e3. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-230263.", "other": {"cve": {"id": "CVE-2014-125104", "sourceIdentifier": "cna@vuldb.com", "published": "2023-06-01T13:15:10.087", "lastModified": "2023-06-08T15:34:11.237", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in VaultPress Plugin up to 1.6.0 on WordPress. It has been declared as critical. Affected by this vulnerability is the function protect_aioseo_ajax of the file class.vaultpress-hotfixes.php of the component MailPoet Plugin. The manipulation leads to unrestricted upload. The attack can be launched remotely. Upgrading to version 1.6.1 is able to address this issue. The name of the patch is e3b92b14edca6291c5f998d54c90cbe98a1fb0e3. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-230263."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:automattic:vaultpress:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "1.6.1", "matchCriteriaId": "6EC94A3B-50F7-4CE6-85CB-EC3D37F9E3C0"}]}]}], "references": [{"url": "https://github.com/wp-plugins/vaultpress/commit/e3b92b14edca6291c5f998d54c90cbe98a1fb0e3", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/wp-plugins/vaultpress/releases/tag/1.6.1", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.230263", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.230263", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wp-plugins/vaultpress/commit/e3b92b14edca6291c5f998d54c90cbe98a1fb0e3"}}