{"buggy_code": ["/**\n * OpenKM, Open Document Management System (http://www.openkm.com)\n * Copyright (c) 2006-2016 Paco Avila & Josep Llort\n * <p>\n * No bytes were intentionally harmed during the development of this application.\n * <p>\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n * <p>\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * <p>\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\npackage com.openkm.extractor;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\n\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\n/**\n * Text extractor for OpenOffice documents.\n */\npublic class OpenOfficeTextExtractor extends AbstractTextExtractor {\n\n\t/**\n\t * Logger instance.\n\t */\n\tprivate static final Logger logger = LoggerFactory.getLogger(OpenOfficeTextExtractor.class);\n\n\t/**\n\t * Creates a new <code>OpenOfficeTextExtractor</code> instance.\n\t */\n\tpublic OpenOfficeTextExtractor() {\n\t\tsuper(new String[]{\"application/vnd.oasis.opendocument.database\", \"application/vnd.oasis.opendocument.formula\",\n\t\t\t\t\"application/vnd.oasis.opendocument.graphics\", \"application/vnd.oasis.opendocument.presentation\",\n\t\t\t\t\"application/vnd.oasis.opendocument.spreadsheet\", \"application/vnd.oasis.opendocument.text\",\n\t\t\t\t\"application/vnd.sun.xml.calc\", \"application/vnd.sun.xml.draw\", \"application/vnd.sun.xml.impress\",\n\t\t\t\t\"application/vnd.sun.xml.writer\"});\n\t}\n\n\t// -------------------------------------------------------< TextExtractor >\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tpublic String extractText(InputStream stream, String type, String encoding) throws IOException {\n\t\ttry {\n\t\t\tSAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n\t\t\tsaxParserFactory.setValidating(false);\n\t\t\tSAXParser saxParser = saxParserFactory.newSAXParser();\n\t\t\tXMLReader xmlReader = saxParser.getXMLReader();\n\t\t\txmlReader.setFeature(\"http://xml.org/sax/features/validation\", false);\n\t\t\txmlReader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\n\t\t\tZipInputStream zis = new ZipInputStream(stream);\n\t\t\tZipEntry ze = zis.getNextEntry();\n\n\t\t\twhile (ze != null && !ze.getName().equals(\"content.xml\")) {\n\t\t\t\tze = zis.getNextEntry();\n\t\t\t}\n\n\t\t\tOpenOfficeContentHandler contentHandler = new OpenOfficeContentHandler();\n\t\t\txmlReader.setContentHandler(contentHandler);\n\n\t\t\ttry {\n\t\t\t\txmlReader.parse(new InputSource(zis));\n\t\t\t} finally {\n\t\t\t\tzis.close();\n\t\t\t}\n\n\t\t\treturn contentHandler.getContent();\n\t\t} catch (ParserConfigurationException | SAXException e) {\n\t\t\tlogger.warn(\"Failed to extract OpenOffice text content\", e);\n\t\t\tthrow new IOException(e.getMessage(), e);\n\t\t} finally {\n\t\t\tstream.close();\n\t\t}\n\t}\n\n\t// --------------------------------------------< OpenOfficeContentHandler >\n\n\tprivate static class OpenOfficeContentHandler extends DefaultHandler {\n\t\tprivate StringBuffer content;\n\t\tprivate boolean appendChar;\n\n\t\tpublic OpenOfficeContentHandler() {\n\t\t\tcontent = new StringBuffer();\n\t\t\tappendChar = false;\n\t\t}\n\n\t\t/**\n\t\t * Returns the text content extracted from parsed content.xml\n\t\t */\n\t\tpublic String getContent() {\n\t\t\treturn content.toString();\n\t\t}\n\n\t\tpublic void startElement(String namespaceURI, String localName, String rawName, Attributes atts) throws SAXException {\n\t\t\tif (rawName.startsWith(\"text:\")) {\n\t\t\t\tappendChar = true;\n\t\t\t}\n\t\t}\n\n\t\tpublic void characters(char[] ch, int start, int length) throws SAXException {\n\t\t\tif (appendChar) {\n\t\t\t\tcontent.append(ch, start, length).append(\" \");\n\t\t\t}\n\t\t}\n\n\t\tpublic void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n\t\t\tappendChar = false;\n\t\t}\n\t}\n}\n", "/**\n * OpenKM, Open Document Management System (http://www.openkm.com)\n * Copyright (c) 2006-2016 Paco Avila & Josep Llort\n * <p>\n * No bytes were intentionally harmed during the development of this application.\n * <p>\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n * <p>\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * <p>\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\npackage com.openkm.extractor;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\n\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport java.io.CharArrayWriter;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\n\n/**\n * Text extractor for XML documents. This class extracts the text content\n * and attribute values from XML documents.\n * <p>\n * This class can handle any XML-based format (<code>application/xml+something</code>), not just the base XML content\n * types reported by {@link #getContentTypes()}. However, it often makes sense to use more specialized extractors that\n * better understand the specific content type.\n */\npublic class XMLTextExtractor extends AbstractTextExtractor {\n\n\t/**\n\t * Logger instance.\n\t */\n\tprivate static final Logger logger = LoggerFactory.getLogger(XMLTextExtractor.class);\n\n\t/**\n\t * Creates a new <code>XMLTextExtractor</code> instance.\n\t */\n\tpublic XMLTextExtractor() {\n\t\tsuper(new String[]{\"text/xml\", \"application/xml\", \"application/vnd.scribus\"});\n\t}\n\n\t// -------------------------------------------------------< TextExtractor >\n\n\t/**\n\t * Returns a reader for the text content of the given XML document.\n\t * Returns an empty reader if the given encoding is not supported or\n\t * if the XML document could not be parsed.\n\t *\n\t * @param stream XML document\n\t * @param type XML content type\n\t * @param encoding character encoding, or <code>null</code>\n\t * @return reader for the text content of the given XML document,\n\t *         or an empty reader if the document could not be parsed\n\t * @throws IOException if the XML document stream can not be closed\n\t */\n\tpublic String extractText(InputStream stream, String type, String encoding) throws IOException {\n\t\ttry {\n\t\t\tCharArrayWriter writer = new CharArrayWriter();\n\t\t\tExtractorHandler handler = new ExtractorHandler(writer);\n\n\t\t\t// TODO: Use a pull parser to avoid the memory overhead\n\t\t\tSAXParserFactory factory = SAXParserFactory.newInstance();\n\t\t\tSAXParser parser = factory.newSAXParser();\n\t\t\tXMLReader reader = parser.getXMLReader();\n\t\t\treader.setContentHandler(handler);\n\t\t\treader.setErrorHandler(handler);\n\n\t\t\t// It is unspecified whether the XML parser closes the stream when\n\t\t\t// done parsing. To ensure that the stream gets closed just once,\n\t\t\t// we prevent the parser from closing it by catching the close()\n\t\t\t// call and explicitly close the stream in a finally block.\n\t\t\tInputSource source = new InputSource(new FilterInputStream(stream) {\n\t\t\t\tpublic void close() {\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (encoding != null) {\n\t\t\t\ttry {\n\t\t\t\t\tCharset.forName(encoding);\n\t\t\t\t\tsource.setEncoding(encoding);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlogger.warn(\"Unsupported encoding '{}', using default ({}) instead.\",\n\t\t\t\t\t\t\tnew Object[]{encoding, System.getProperty(\"file.encoding\")});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treader.parse(source);\n\t\t\treturn writer.toString();\n\t\t} catch (ParserConfigurationException | SAXException e) {\n\t\t\tlogger.warn(\"Failed to extract XML text content\", e);\n\t\t\tthrow new IOException(e.getMessage(), e);\n\t\t} finally {\n\t\t\tstream.close();\n\t\t}\n\t}\n}\n"], "fixing_code": ["/**\n * OpenKM, Open Document Management System (http://www.openkm.com)\n * Copyright (c) 2006-2016 Paco Avila & Josep Llort\n * <p>\n * No bytes were intentionally harmed during the development of this application.\n * <p>\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n * <p>\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * <p>\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\npackage com.openkm.extractor;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\n\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\n/**\n * Text extractor for OpenOffice documents.\n */\npublic class OpenOfficeTextExtractor extends AbstractTextExtractor {\n\n\t/**\n\t * Logger instance.\n\t */\n\tprivate static final Logger logger = LoggerFactory.getLogger(OpenOfficeTextExtractor.class);\n\n\t/**\n\t * Creates a new <code>OpenOfficeTextExtractor</code> instance.\n\t */\n\tpublic OpenOfficeTextExtractor() {\n\t\tsuper(new String[]{\"application/vnd.oasis.opendocument.database\", \"application/vnd.oasis.opendocument.formula\",\n\t\t\t\t\"application/vnd.oasis.opendocument.graphics\", \"application/vnd.oasis.opendocument.presentation\",\n\t\t\t\t\"application/vnd.oasis.opendocument.spreadsheet\", \"application/vnd.oasis.opendocument.text\",\n\t\t\t\t\"application/vnd.sun.xml.calc\", \"application/vnd.sun.xml.draw\", \"application/vnd.sun.xml.impress\",\n\t\t\t\t\"application/vnd.sun.xml.writer\"});\n\t}\n\n\t// -------------------------------------------------------< TextExtractor >\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tpublic String extractText(InputStream stream, String type, String encoding) throws IOException {\n\t\ttry {\n\t\t\tSAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n\t\t\tsaxParserFactory.setValidating(false);\n\t\t\tSAXParser saxParser = saxParserFactory.newSAXParser();\n\t\t\tXMLReader xmlReader = saxParser.getXMLReader();\n\t\t\txmlReader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\t\t\txmlReader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n\t\t\txmlReader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n\t\t\txmlReader.setFeature(\"http://xml.org/sax/features/validation\", false);\n\n\t\t\tZipInputStream zis = new ZipInputStream(stream);\n\t\t\tZipEntry ze = zis.getNextEntry();\n\n\t\t\twhile (ze != null && !ze.getName().equals(\"content.xml\")) {\n\t\t\t\tze = zis.getNextEntry();\n\t\t\t}\n\n\t\t\tOpenOfficeContentHandler contentHandler = new OpenOfficeContentHandler();\n\t\t\txmlReader.setContentHandler(contentHandler);\n\n\t\t\ttry {\n\t\t\t\txmlReader.parse(new InputSource(zis));\n\t\t\t} finally {\n\t\t\t\tzis.close();\n\t\t\t}\n\n\t\t\treturn contentHandler.getContent();\n\t\t} catch (ParserConfigurationException | SAXException e) {\n\t\t\tlogger.warn(\"Failed to extract OpenOffice text content\", e);\n\t\t\tthrow new IOException(e.getMessage(), e);\n\t\t} finally {\n\t\t\tstream.close();\n\t\t}\n\t}\n\n\t// --------------------------------------------< OpenOfficeContentHandler >\n\n\tprivate static class OpenOfficeContentHandler extends DefaultHandler {\n\t\tprivate StringBuffer content;\n\t\tprivate boolean appendChar;\n\n\t\tpublic OpenOfficeContentHandler() {\n\t\t\tcontent = new StringBuffer();\n\t\t\tappendChar = false;\n\t\t}\n\n\t\t/**\n\t\t * Returns the text content extracted from parsed content.xml\n\t\t */\n\t\tpublic String getContent() {\n\t\t\treturn content.toString();\n\t\t}\n\n\t\tpublic void startElement(String namespaceURI, String localName, String rawName, Attributes atts) throws SAXException {\n\t\t\tif (rawName.startsWith(\"text:\")) {\n\t\t\t\tappendChar = true;\n\t\t\t}\n\t\t}\n\n\t\tpublic void characters(char[] ch, int start, int length) throws SAXException {\n\t\t\tif (appendChar) {\n\t\t\t\tcontent.append(ch, start, length).append(\" \");\n\t\t\t}\n\t\t}\n\n\t\tpublic void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n\t\t\tappendChar = false;\n\t\t}\n\t}\n}\n", "/**\n * OpenKM, Open Document Management System (http://www.openkm.com)\n * Copyright (c) 2006-2016 Paco Avila & Josep Llort\n * <p>\n * No bytes were intentionally harmed during the development of this application.\n * <p>\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n * <p>\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * <p>\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\npackage com.openkm.extractor;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\n\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport java.io.CharArrayWriter;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\n\n/**\n * Text extractor for XML documents. This class extracts the text content\n * and attribute values from XML documents.\n * <p>\n * This class can handle any XML-based format (<code>application/xml+something</code>), not just the base XML content\n * types reported by {@link #getContentTypes()}. However, it often makes sense to use more specialized extractors that\n * better understand the specific content type.\n */\npublic class XMLTextExtractor extends AbstractTextExtractor {\n\n\t/**\n\t * Logger instance.\n\t */\n\tprivate static final Logger logger = LoggerFactory.getLogger(XMLTextExtractor.class);\n\n\t/**\n\t * Creates a new <code>XMLTextExtractor</code> instance.\n\t */\n\tpublic XMLTextExtractor() {\n\t\tsuper(new String[]{\"text/xml\", \"application/xml\", \"application/vnd.scribus\"});\n\t}\n\n\t// -------------------------------------------------------< TextExtractor >\n\n\t/**\n\t * Returns a reader for the text content of the given XML document.\n\t * Returns an empty reader if the given encoding is not supported or\n\t * if the XML document could not be parsed.\n\t *\n\t * @param stream XML document\n\t * @param type XML content type\n\t * @param encoding character encoding, or <code>null</code>\n\t * @return reader for the text content of the given XML document,\n\t *         or an empty reader if the document could not be parsed\n\t * @throws IOException if the XML document stream can not be closed\n\t */\n\tpublic String extractText(InputStream stream, String type, String encoding) throws IOException {\n\t\ttry {\n\t\t\tCharArrayWriter writer = new CharArrayWriter();\n\t\t\tExtractorHandler handler = new ExtractorHandler(writer);\n\n\t\t\t// TODO: Use a pull parser to avoid the memory overhead\n\t\t\tSAXParserFactory factory = SAXParserFactory.newInstance();\n\t\t\tSAXParser parser = factory.newSAXParser();\n\t\t\tXMLReader reader = parser.getXMLReader();\n\t\t\treader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\t\t\treader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n\t\t\treader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n\t\t\treader.setFeature(\"http://xml.org/sax/features/validation\", false);\n\t\t\treader.setContentHandler(handler);\n\t\t\treader.setErrorHandler(handler);\n\n\t\t\t// It is unspecified whether the XML parser closes the stream when\n\t\t\t// done parsing. To ensure that the stream gets closed just once,\n\t\t\t// we prevent the parser from closing it by catching the close()\n\t\t\t// call and explicitly close the stream in a finally block.\n\t\t\tInputSource source = new InputSource(new FilterInputStream(stream) {\n\t\t\t\tpublic void close() {\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (encoding != null) {\n\t\t\t\ttry {\n\t\t\t\t\tCharset.forName(encoding);\n\t\t\t\t\tsource.setEncoding(encoding);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlogger.warn(\"Unsupported encoding '{}', using default ({}) instead.\",\n\t\t\t\t\t\t\tnew Object[]{encoding, System.getProperty(\"file.encoding\")});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treader.parse(source);\n\t\t\treturn writer.toString();\n\t\t} catch (ParserConfigurationException | SAXException e) {\n\t\t\tlogger.warn(\"Failed to extract XML text content\", e);\n\t\t\tthrow new IOException(e.getMessage(), e);\n\t\t} finally {\n\t\t\tstream.close();\n\t\t}\n\t}\n}\n"], "filenames": ["src/main/java/com/openkm/extractor/OpenOfficeTextExtractor.java", "src/main/java/com/openkm/extractor/XMLTextExtractor.java"], "buggy_code_start_loc": [71, 83], "buggy_code_end_loc": [74, 83], "fixing_code_start_loc": [72, 84], "fixing_code_end_loc": [75, 88], "type": "CWE-611", "message": "An issue discovered in OpenKM v6.3.10 allows attackers to obtain sensitive information via the XMLTextExtractor function.", "other": {"cve": {"id": "CVE-2021-33950", "sourceIdentifier": "cve@mitre.org", "published": "2023-02-17T18:15:11.403", "lastModified": "2023-02-28T20:06:17.763", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue discovered in OpenKM v6.3.10 allows attackers to obtain sensitive information via the XMLTextExtractor function."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openkm:openkm:6.3.10:*:*:*:community:*:*:*", "matchCriteriaId": "3A369378-79A5-4C69-9ED8-7880B4687FA2"}]}]}], "references": [{"url": "https://github.com/openkm/document-management-system/commit/ce1d82329615aea6aa9f2cc6508c1fe7891e34b5", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/openkm/document-management-system/issues/287", "source": "cve@mitre.org", "tags": ["Issue Tracking"]}, {"url": "https://github.com/openkm/document-management-system/pull/288", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/openkm/document-management-system/commit/ce1d82329615aea6aa9f2cc6508c1fe7891e34b5"}}