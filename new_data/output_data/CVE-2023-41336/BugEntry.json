{"buggy_code": ["<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\UX\\Autocomplete\\Form;\n\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Doctrine\\ORM\\Query\\Parameter;\nuse Doctrine\\ORM\\Utility\\PersisterHelper;\nuse Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\Form\\FormEvent;\nuse Symfony\\Component\\Form\\FormEvents;\n\n/**\n * Helps transform ParentEntityAutocompleteType into a EntityType that will not load all options.\n *\n * @internal\n */\nfinal class AutocompleteEntityTypeSubscriber implements EventSubscriberInterface\n{\n    public function __construct(\n        private ?string $autocompleteUrl = null\n    ) {\n    }\n\n    public function preSetData(FormEvent $event)\n    {\n        $form = $event->getForm();\n        $data = $event->getData() ?: [];\n\n        $options = $form->getConfig()->getOptions();\n        $options['compound'] = false;\n        $options['choices'] = is_iterable($data) ? $data : [$data];\n        // pass to AutocompleteChoiceTypeExtension\n        $options['autocomplete'] = true;\n        $options['autocomplete_url'] = $this->autocompleteUrl;\n        unset($options['searchable_fields'], $options['security'], $options['filter_query']);\n\n        $form->add('autocomplete', EntityType::class, $options);\n    }\n\n    public function preSubmit(FormEvent $event)\n    {\n        $data = $event->getData();\n        $form = $event->getForm();\n        $options = $form->get('autocomplete')->getConfig()->getOptions();\n\n        if (!isset($data['autocomplete']) || '' === $data['autocomplete']) {\n            $options['choices'] = [];\n        } else {\n            /** @var EntityManagerInterface $em */\n            $em = $options['em'];\n            $repository = $em->getRepository($options['class']);\n\n            $idField = $options['id_reader']->getIdField();\n            $idType = PersisterHelper::getTypeOfField($idField, $em->getClassMetadata($options['class']), $em)[0];\n\n            if ($options['multiple']) {\n                $params = [];\n                $idx = 0;\n\n                foreach ($data['autocomplete'] as $id) {\n                    $params[\":id_$idx\"] = new Parameter(\"id_$idx\", $id, $idType);\n                    ++$idx;\n                }\n\n                $queryBuilder = $repository->createQueryBuilder('o');\n\n                if ($params) {\n                    $queryBuilder\n                        ->where(sprintf(\"o.$idField IN (%s)\", implode(', ', array_keys($params))))\n                        ->setParameters(new ArrayCollection($params));\n                }\n\n                $options['choices'] = $queryBuilder->getQuery()->getResult();\n            } else {\n                $options['choices'] = $repository->createQueryBuilder('o')\n                    ->where(\"o.$idField = :id\")\n                    ->setParameter('id', $data['autocomplete'], $idType)\n                    ->getQuery()\n                    ->getResult();\n            }\n        }\n\n        // reset some critical lazy options\n        unset($options['em'], $options['loader'], $options['empty_data'], $options['choice_list'], $options['choices_as_values']);\n\n        $form->add('autocomplete', EntityType::class, $options);\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            FormEvents::PRE_SET_DATA => 'preSetData',\n            FormEvents::PRE_SUBMIT => 'preSubmit',\n        ];\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\UX\\Autocomplete\\Tests\\Functional;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\nuse Symfony\\UX\\Autocomplete\\Tests\\Fixtures\\Factory\\CategoryFactory;\nuse Symfony\\UX\\Autocomplete\\Tests\\Fixtures\\Factory\\IngredientFactory;\nuse Zenstruck\\Browser\\Test\\HasBrowser;\nuse Zenstruck\\Foundry\\Test\\Factories;\nuse Zenstruck\\Foundry\\Test\\ResetDatabase;\n\n// tests CategoryAutocompleteType\nclass AutocompleteFormRenderingTest extends KernelTestCase\n{\n    use Factories;\n    use HasBrowser;\n    use ResetDatabase;\n\n    public function testFieldsRenderWithStimulusController()\n    {\n        $this->browser()\n            ->throwExceptions()\n            ->get('/test-form')\n            ->assertElementAttributeContains('#product_category_autocomplete', 'data-controller', 'custom-autocomplete symfony--ux-autocomplete--autocomplete')\n            ->assertElementAttributeContains('#product_category_autocomplete', 'data-symfony--ux-autocomplete--autocomplete-url-value', '/test/autocomplete/category_autocomplete_type')\n            ->assertElementAttributeContains('#product_category_autocomplete', 'data-symfony--ux-autocomplete--autocomplete-min-characters-value', '2')\n            ->assertElementAttributeContains('#product_category_autocomplete', 'data-symfony--ux-autocomplete--autocomplete-max-results-value', '25')\n\n            ->assertElementAttributeContains('#product_portionSize', 'data-controller', 'symfony--ux-autocomplete--autocomplete')\n            ->assertElementAttributeContains('#product_tags', 'data-controller', 'symfony--ux-autocomplete--autocomplete')\n            ->assertElementAttributeContains('#product_tags', 'data-symfony--ux-autocomplete--autocomplete-tom-select-options-value', 'createOnBlur')\n        ;\n    }\n\n    public function testCategoryFieldSubmitsCorrectly()\n    {\n        $firstCat = CategoryFactory::createOne(['name' => 'First cat']);\n        CategoryFactory::createOne(['name' => 'in space']);\n        CategoryFactory::createOne(['name' => 'ate pizza']);\n\n        $this->browser()\n            ->throwExceptions()\n            ->get('/test-form')\n            // the field renders empty (but the placeholder is there)\n            ->assertElementCount('#product_category_autocomplete option', 1)\n            ->assertNotContains('First cat')\n            ->post('/test-form', [\n                'body' => [\n                    'product' => ['category' => ['autocomplete' => $firstCat->getId()]],\n                ],\n            ])\n            // the one option + placeholder now shows up\n            ->assertElementCount('#product_category_autocomplete option', 2)\n            ->assertContains('First cat')\n        ;\n    }\n\n    public function testProperlyLoadsChoicesWithIdValueObjects()\n    {\n        $ingredient1 = IngredientFactory::createOne(['name' => 'Flour']);\n        $ingredient2 = IngredientFactory::createOne(['name' => 'Sugar']);\n\n        $this->browser()\n            ->throwExceptions()\n            ->get('/test-form')\n            ->assertElementCount('#product_ingredients_autocomplete option', 0)\n            ->assertNotContains('Flour')\n            ->assertNotContains('Sugar')\n            ->post('/test-form', [\n                'body' => [\n                    'product' => [\n                        'ingredients' => [\n                            'autocomplete' => [\n                                (string) $ingredient1->getId(),\n                                (string) $ingredient2->getId(),\n                            ],\n                        ],\n                    ],\n                ],\n            ])\n            // assert that selected options are not lost\n            ->assertElementCount('#product_ingredients_autocomplete option', 2)\n            ->assertContains('Flour')\n            ->assertContains('Sugar')\n        ;\n    }\n\n    public function testMultipleDoesNotFailWithoutSelectedChoices()\n    {\n        $this->browser()\n            ->throwExceptions()\n            ->get('/test-form')\n            ->assertElementCount('#product_ingredients_autocomplete option', 0)\n            ->assertNotContains('Flour')\n            ->assertNotContains('Sugar')\n            ->post('/test-form', [\n                'body' => [\n                    'product' => [\n                        'ingredients' => [\n                            'autocomplete' => [],\n                        ],\n                    ],\n                ],\n            ])\n            ->assertElementCount('#product_ingredients_autocomplete option', 0)\n        ;\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\UX\\Autocomplete\\Form;\n\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Doctrine\\ORM\\Utility\\PersisterHelper;\nuse Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\Form\\FormEvent;\nuse Symfony\\Component\\Form\\FormEvents;\n\n/**\n * Helps transform ParentEntityAutocompleteType into a EntityType that will not load all options.\n *\n * @internal\n */\nfinal class AutocompleteEntityTypeSubscriber implements EventSubscriberInterface\n{\n    public function __construct(\n        private ?string $autocompleteUrl = null\n    ) {\n    }\n\n    public function preSetData(FormEvent $event)\n    {\n        $form = $event->getForm();\n        $data = $event->getData() ?: [];\n\n        $options = $form->getConfig()->getOptions();\n        $options['compound'] = false;\n        $options['choices'] = is_iterable($data) ? $data : [$data];\n        // pass to AutocompleteChoiceTypeExtension\n        $options['autocomplete'] = true;\n        $options['autocomplete_url'] = $this->autocompleteUrl;\n        unset($options['searchable_fields'], $options['security'], $options['filter_query']);\n\n        $form->add('autocomplete', EntityType::class, $options);\n    }\n\n    public function preSubmit(FormEvent $event)\n    {\n        $data = $event->getData();\n        $form = $event->getForm();\n        $options = $form->get('autocomplete')->getConfig()->getOptions();\n\n        /** @var EntityManagerInterface $em */\n        $em = $options['em'];\n        $repository = $em->getRepository($options['class']);\n        $queryBuilder = $options['query_builder'] ?: $repository->createQueryBuilder('o');\n        $rootAlias = $queryBuilder->getRootAliases()[0];\n\n        if (!isset($data['autocomplete']) || '' === $data['autocomplete']) {\n            $options['choices'] = [];\n        } else {\n            $idField = $options['id_reader']->getIdField();\n            $idType = PersisterHelper::getTypeOfField($idField, $em->getClassMetadata($options['class']), $em)[0];\n\n            if ($options['multiple']) {\n                $params = [];\n                $idx = 0;\n\n                foreach ($data['autocomplete'] as $id) {\n                    $params[\":id_$idx\"] = [$id, $idType];\n                    ++$idx;\n                }\n\n                if ($params) {\n                    $queryBuilder\n                        ->andWhere(sprintf(\"$rootAlias.$idField IN (%s)\", implode(', ', array_keys($params))))\n                    ;\n                    foreach ($params as $key => $param) {\n                        $queryBuilder->setParameter($key, $param[0], $param[1]);\n                    }\n                }\n\n                $options['choices'] = $queryBuilder->getQuery()->getResult();\n            } else {\n                $options['choices'] = $queryBuilder\n                    ->andWhere(\"$rootAlias.$idField = :id\")\n                    ->setParameter('id', $data['autocomplete'], $idType)\n                    ->getQuery()\n                    ->getResult();\n            }\n        }\n\n        // reset some critical lazy options\n        unset($options['em'], $options['loader'], $options['empty_data'], $options['choice_list'], $options['choices_as_values']);\n\n        $form->add('autocomplete', EntityType::class, $options);\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            FormEvents::PRE_SET_DATA => 'preSetData',\n            FormEvents::PRE_SUBMIT => 'preSubmit',\n        ];\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\UX\\Autocomplete\\Tests\\Functional;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\nuse Symfony\\UX\\Autocomplete\\Tests\\Fixtures\\Factory\\CategoryFactory;\nuse Symfony\\UX\\Autocomplete\\Tests\\Fixtures\\Factory\\IngredientFactory;\nuse Zenstruck\\Browser\\Test\\HasBrowser;\nuse Zenstruck\\Foundry\\Test\\Factories;\nuse Zenstruck\\Foundry\\Test\\ResetDatabase;\n\n// tests CategoryAutocompleteType\nclass AutocompleteFormRenderingTest extends KernelTestCase\n{\n    use Factories;\n    use HasBrowser;\n    use ResetDatabase;\n\n    public function testFieldsRenderWithStimulusController()\n    {\n        $this->browser()\n            ->throwExceptions()\n            ->get('/test-form')\n            ->assertElementAttributeContains('#product_category_autocomplete', 'data-controller', 'custom-autocomplete symfony--ux-autocomplete--autocomplete')\n            ->assertElementAttributeContains('#product_category_autocomplete', 'data-symfony--ux-autocomplete--autocomplete-url-value', '/test/autocomplete/category_autocomplete_type')\n            ->assertElementAttributeContains('#product_category_autocomplete', 'data-symfony--ux-autocomplete--autocomplete-min-characters-value', '2')\n            ->assertElementAttributeContains('#product_category_autocomplete', 'data-symfony--ux-autocomplete--autocomplete-max-results-value', '25')\n\n            ->assertElementAttributeContains('#product_portionSize', 'data-controller', 'symfony--ux-autocomplete--autocomplete')\n            ->assertElementAttributeContains('#product_tags', 'data-controller', 'symfony--ux-autocomplete--autocomplete')\n            ->assertElementAttributeContains('#product_tags', 'data-symfony--ux-autocomplete--autocomplete-tom-select-options-value', 'createOnBlur')\n        ;\n    }\n\n    public function testCategoryFieldSubmitsCorrectly()\n    {\n        $firstCat = CategoryFactory::createOne(['name' => 'First cat']);\n        CategoryFactory::createOne(['name' => 'in space']);\n        CategoryFactory::createOne(['name' => 'ate pizza']);\n        $fooCat = CategoryFactory::createOne(['name' => 'I contain \"foo\" which CategoryAutocompleteType uses its query_builder option.']);\n\n        $this->browser()\n            ->throwExceptions()\n            ->get('/test-form')\n            // the field renders empty (but the placeholder is there)\n            ->assertElementCount('#product_category_autocomplete option', 1)\n            ->assertNotContains('First cat')\n\n            ->post('/test-form', [\n                'body' => [\n                    'product' => ['category' => ['autocomplete' => $firstCat->getId()]],\n                ],\n            ])\n            // the option does NOT match something returned by query_builder\n            // so ONLY the placeholder shows up\n            ->assertElementCount('#product_category_autocomplete option', 1)\n            ->assertNotContains('First cat')\n\n            ->assertNotContains('First cat')\n            ->post('/test-form', [\n                'body' => [\n                    'product' => ['category' => ['autocomplete' => $fooCat->getId()]],\n                ],\n            ])\n            // the one option + placeholder now shows up\n            ->assertElementCount('#product_category_autocomplete option', 2)\n            ->assertContains('which CategoryAutocompleteType uses')\n        ;\n    }\n\n    public function testProperlyLoadsChoicesWithIdValueObjects()\n    {\n        $ingredient1 = IngredientFactory::createOne(['name' => 'Flour']);\n        $ingredient2 = IngredientFactory::createOne(['name' => 'Sugar']);\n\n        $this->browser()\n            ->throwExceptions()\n            ->get('/test-form')\n            ->assertElementCount('#product_ingredients_autocomplete option', 0)\n            ->assertNotContains('Flour')\n            ->assertNotContains('Sugar')\n            ->post('/test-form', [\n                'body' => [\n                    'product' => [\n                        'ingredients' => [\n                            'autocomplete' => [\n                                (string) $ingredient1->getId(),\n                                (string) $ingredient2->getId(),\n                            ],\n                        ],\n                    ],\n                ],\n            ])\n            // assert that selected options are not lost\n            ->assertElementCount('#product_ingredients_autocomplete option', 2)\n            ->assertContains('Flour')\n            ->assertContains('Sugar')\n        ;\n    }\n\n    public function testMultipleDoesNotFailWithoutSelectedChoices()\n    {\n        $this->browser()\n            ->throwExceptions()\n            ->get('/test-form')\n            ->assertElementCount('#product_ingredients_autocomplete option', 0)\n            ->assertNotContains('Flour')\n            ->assertNotContains('Sugar')\n            ->post('/test-form', [\n                'body' => [\n                    'product' => [\n                        'ingredients' => [\n                            'autocomplete' => [],\n                        ],\n                    ],\n                ],\n            ])\n            ->assertElementCount('#product_ingredients_autocomplete option', 0)\n        ;\n    }\n}\n"], "filenames": ["src/Form/AutocompleteEntityTypeSubscriber.php", "tests/Functional/AutocompleteFormRenderingTest.php"], "buggy_code_start_loc": [14, 48], "buggy_code_end_loc": [88, 64], "fixing_code_start_loc": [13, 49], "fixing_code_end_loc": [89, 77], "type": "CWE-20", "message": "ux-autocomplete is a JavaScript Autocomplete functionality for Symfony. Under certain circumstances, an attacker could successfully submit an entity id for an `EntityType` that is *not* part of the valid choices. The problem has been fixed in `symfony/ux-autocomplete` version 2.11.2.", "other": {"cve": {"id": "CVE-2023-41336", "sourceIdentifier": "security-advisories@github.com", "published": "2023-09-11T20:15:10.983", "lastModified": "2023-09-15T17:32:13.337", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ux-autocomplete is a JavaScript Autocomplete functionality for Symfony. Under certain circumstances, an attacker could successfully submit an entity id for an `EntityType` that is *not* part of the valid choices. The problem has been fixed in `symfony/ux-autocomplete` version 2.11.2."}, {"lang": "es", "value": "ux-autocomplete es una funcionalidad de Autocompletar de JavaScript para Symfony. En determinadas circunstancias, un atacante podr\u00eda enviar con \u00e9xito una identificaci\u00f3n de entidad para un \"EntityType\" que *no* forma parte de las opciones v\u00e1lidas. El problema se ha solucionado en `symfony/ux-autocomplete` versi\u00f3n 2.11.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:symfony:ux_autocomplete:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.11.2", "matchCriteriaId": "846E08AE-565A-414A-BC15-93A06E530C5B"}]}]}], "references": [{"url": "https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/ux-autocomplete/CVE-2023-41336.yaml", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/symfony/ux-autocomplete/commit/fabcb2eee14b9e84a45b276711853a560b5d770c", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/symfony/ux-autocomplete/security/advisories/GHSA-4cpv-669c-r79x", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://symfony.com/bundles/ux-autocomplete/current/index.html#usage-in-a-form-with-ajax", "source": "security-advisories@github.com", "tags": ["Product"]}]}, "github_commit_url": "https://github.com/symfony/ux-autocomplete/commit/fabcb2eee14b9e84a45b276711853a560b5d770c"}}