{"buggy_code": ["<?php\n\nnamespace Crater\\Http\\Controllers\\V1\\Admin\\Invoice;\n\nuse Crater\\Http\\Controllers\\Controller;\nuse Crater\\Http\\Requests;\nuse Crater\\Http\\Requests\\DeleteInvoiceRequest;\nuse Crater\\Http\\Resources\\InvoiceResource;\nuse Crater\\Jobs\\GenerateInvoicePdfJob;\nuse Crater\\Models\\Invoice;\nuse Illuminate\\Http\\Request;\n\nclass InvoicesController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', Invoice::class);\n\n        $limit = $request->has('limit') ? $request->limit : 10;\n\n        $invoices = Invoice::whereCompany()\n            ->join('customers', 'customers.id', '=', 'invoices.customer_id')\n            ->applyFilters($request->all())\n            ->select('invoices.*', 'customers.name')\n            ->latest()\n            ->paginateData($limit);\n\n        return (InvoiceResource::collection($invoices))\n            ->additional(['meta' => [\n                'invoice_total_count' => Invoice::whereCompany()->count(),\n            ]]);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function store(Requests\\InvoicesRequest $request)\n    {\n        $this->authorize('create', Invoice::class);\n\n        $invoice = Invoice::createInvoice($request);\n\n        if ($request->has('invoiceSend')) {\n            $invoice->send($request->subject, $request->body);\n        }\n\n        GenerateInvoicePdfJob::dispatch($invoice);\n\n        return new InvoiceResource($invoice);\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\Crater\\Models\\Invoice $invoice\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function show(Request $request, Invoice $invoice)\n    {\n        $this->authorize('view', $invoice);\n\n        return new InvoiceResource($invoice);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request $request\n     * @param  Invoice $invoice\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function update(Requests\\InvoicesRequest $request, Invoice $invoice)\n    {\n        $this->authorize('update', $invoice);\n\n        $invoice = $invoice->updateInvoice($request);\n\n        if (is_string($invoice)) {\n            return respondJson($invoice, $invoice);\n        }\n\n        GenerateInvoicePdfJob::dispatch($invoice, true);\n\n        return new InvoiceResource($invoice);\n    }\n\n    /**\n     * delete the specified resources in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function delete(DeleteInvoiceRequest $request)\n    {\n        $this->authorize('delete multiple invoices');\n\n        Invoice::destroy($request->ids);\n\n        return response()->json([\n            'success' => true,\n        ]);\n    }\n}\n", "<?php\n\nnamespace Crater\\Http\\Controllers\\V1\\Admin\\Payment;\n\nuse Crater\\Http\\Controllers\\Controller;\nuse Crater\\Http\\Requests\\PaymentMethodRequest;\nuse Crater\\Http\\Resources\\PaymentMethodResource;\nuse Crater\\Models\\PaymentMethod;\nuse Illuminate\\Http\\Request;\n\nclass PaymentMethodsController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', PaymentMethod::class);\n\n        $limit = $request->has('limit') ? $request->limit : 5;\n\n        $paymentMethods = PaymentMethod::applyFilters($request->all())\n            ->where('type', PaymentMethod::TYPE_GENERAL)\n            ->whereCompany()\n            ->latest()\n            ->paginateData($limit);\n\n        return PaymentMethodResource::collection($paymentMethods);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(PaymentMethodRequest $request)\n    {\n        $this->authorize('create', PaymentMethod::class);\n\n        $paymentMethod = PaymentMethod::createPaymentMethod($request);\n\n        return new PaymentMethodResource($paymentMethod);\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\Crater\\Models\\PaymentMethod  $paymentMethod\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(PaymentMethod $paymentMethod)\n    {\n        $this->authorize('view', $paymentMethod);\n\n        return new PaymentMethodResource($paymentMethod);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Crater\\Models\\PaymentMethod  $paymentMethod\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(PaymentMethodRequest $request, PaymentMethod $paymentMethod)\n    {\n        $this->authorize('update', $paymentMethod);\n\n        $paymentMethod->update($request->getPaymentMethodPayload());\n\n        return new PaymentMethodResource($paymentMethod);\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\Crater\\Models\\PaymentMethod  $paymentMethod\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(PaymentMethod $paymentMethod)\n    {\n        $this->authorize('delete', $paymentMethod);\n\n        $payments = $paymentMethod->payments;\n\n        if ($payments->count() > 0) {\n            return respondJson('payments_attached', 'Payments Attached.');\n        }\n\n        $paymentMethod->delete();\n\n        return response()->json([\n            'success' => 'Payment method deleted successfully',\n        ]);\n    }\n}\n", "<?php\n\nnamespace Crater\\Http\\Controllers\\V1\\PDF;\n\nuse Crater\\Http\\Controllers\\Controller;\nuse Crater\\Models\\Expense;\n\nclass DownloadReceiptController extends Controller\n{\n    /**\n     * Handle the incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  Expense $expense\n     * @param   string $hash\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function __invoke(Expense $expense)\n    {\n        if ($expense) {\n            $media = $expense->getFirstMedia('receipts');\n            if ($media) {\n                $imagePath = $media->getPath();\n                $response = \\Response::download($imagePath, $media->file_name);\n                if (ob_get_contents()) {\n                    ob_end_clean();\n                }\n\n                return $response;\n            }\n        }\n\n        return response()->json([\n            'error' => 'receipt_not_found',\n        ]);\n    }\n}\n", "<?php\n\nnamespace Crater\\Models;\n\nuse App;\nuse Barryvdh\\DomPDF\\Facade as PDF;\nuse Carbon\\Carbon;\nuse Crater\\Mail\\SendInvoiceMail;\nuse Crater\\Services\\SerialNumberFormatter;\nuse Crater\\Traits\\GeneratesPdfTrait;\nuse Crater\\Traits\\HasCustomFieldsTrait;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Str;\nuse Nwidart\\Modules\\Facades\\Module;\nuse Spatie\\MediaLibrary\\HasMedia;\nuse Spatie\\MediaLibrary\\InteractsWithMedia;\nuse Vinkla\\Hashids\\Facades\\Hashids;\n\nclass Invoice extends Model implements HasMedia\n{\n    use HasFactory;\n    use InteractsWithMedia;\n    use GeneratesPdfTrait;\n    use HasCustomFieldsTrait;\n\n    public const STATUS_DRAFT = 'DRAFT';\n    public const STATUS_SENT = 'SENT';\n    public const STATUS_VIEWED = 'VIEWED';\n    public const STATUS_OVERDUE = 'OVERDUE';\n    public const STATUS_COMPLETED = 'COMPLETED';\n\n    public const STATUS_DUE = 'DUE';\n    public const STATUS_UNPAID = 'UNPAID';\n    public const STATUS_PARTIALLY_PAID = 'PARTIALLY_PAID';\n    public const STATUS_PAID = 'PAID';\n\n    protected $dates = [\n        'created_at',\n        'updated_at',\n        'deleted_at',\n        'invoice_date',\n        'due_date'\n    ];\n\n    protected $casts = [\n        'total' => 'integer',\n        'tax' => 'integer',\n        'sub_total' => 'integer',\n        'discount' => 'float',\n        'discount_val' => 'integer',\n        'exchange_rate' => 'float'\n    ];\n\n    protected $guarded = [\n        'id',\n    ];\n\n    protected $appends = [\n        'formattedCreatedAt',\n        'formattedInvoiceDate',\n        'formattedDueDate',\n        'invoicePdfUrl',\n    ];\n\n    public function transactions()\n    {\n        return $this->hasMany(Transaction::class);\n    }\n\n    public function emailLogs()\n    {\n        return $this->morphMany('App\\Models\\EmailLog', 'mailable');\n    }\n\n    public function items()\n    {\n        return $this->hasMany('Crater\\Models\\InvoiceItem');\n    }\n\n    public function taxes()\n    {\n        return $this->hasMany(Tax::class);\n    }\n\n    public function payments()\n    {\n        return $this->hasMany(Payment::class);\n    }\n\n    public function currency()\n    {\n        return $this->belongsTo(Currency::class);\n    }\n\n    public function company()\n    {\n        return $this->belongsTo(Company::class);\n    }\n\n    public function customer()\n    {\n        return $this->belongsTo(Customer::class, 'customer_id');\n    }\n\n    public function recurringInvoice()\n    {\n        return $this->belongsTo(RecurringInvoice::class);\n    }\n\n    public function creator()\n    {\n        return $this->belongsTo(User::class, 'creator_id');\n    }\n\n    public function getInvoicePdfUrlAttribute()\n    {\n        return url('/invoices/pdf/'.$this->unique_hash);\n    }\n\n    public function getPaymentModuleEnabledAttribute()\n    {\n        if (Module::has('Payments')) {\n            return Module::isEnabled('Payments');\n        }\n\n        return false;\n    }\n\n    public function getAllowEditAttribute()\n    {\n        $retrospective_edit = CompanySetting::getSetting('retrospective_edits', $this->company_id);\n\n        $allowed = true;\n\n        $status = [\n            self::STATUS_DRAFT,\n            self::STATUS_SENT,\n            self::STATUS_VIEWED,\n            self::STATUS_OVERDUE,\n            self::STATUS_COMPLETED,\n        ];\n\n        if ($retrospective_edit == 'disable_on_invoice_sent' && (in_array($this->status, $status)) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {\n            $allowed = false;\n        } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {\n            $allowed = false;\n        } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {\n            $allowed = false;\n        }\n\n        return $allowed;\n    }\n\n    public function getPreviousStatus()\n    {\n        if ($this->due_date < Carbon::now()) {\n            return self::STATUS_OVERDUE;\n        } elseif ($this->viewed) {\n            return self::STATUS_VIEWED;\n        } elseif ($this->sent) {\n            return self::STATUS_SENT;\n        } else {\n            return self::STATUS_DRAFT;\n        }\n    }\n\n    public function getFormattedCreatedAtAttribute($value)\n    {\n        $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);\n\n        return Carbon::parse($this->created_at)->format($dateFormat);\n    }\n\n    public function getFormattedDueDateAttribute($value)\n    {\n        $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);\n\n        return Carbon::parse($this->due_date)->format($dateFormat);\n    }\n\n    public function getFormattedInvoiceDateAttribute($value)\n    {\n        $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);\n\n        return Carbon::parse($this->invoice_date)->format($dateFormat);\n    }\n\n    public function scopeWhereStatus($query, $status)\n    {\n        return $query->where('invoices.status', $status);\n    }\n\n    public function scopeWherePaidStatus($query, $status)\n    {\n        return $query->where('invoices.paid_status', $status);\n    }\n\n    public function scopeWhereDueStatus($query, $status)\n    {\n        return $query->whereIn('invoices.paid_status', [\n            self::STATUS_UNPAID,\n            self::STATUS_PARTIALLY_PAID,\n        ]);\n    }\n\n    public function scopeWhereInvoiceNumber($query, $invoiceNumber)\n    {\n        return $query->where('invoices.invoice_number', 'LIKE', '%'.$invoiceNumber.'%');\n    }\n\n    public function scopeInvoicesBetween($query, $start, $end)\n    {\n        return $query->whereBetween(\n            'invoices.invoice_date',\n            [$start->format('Y-m-d'), $end->format('Y-m-d')]\n        );\n    }\n\n    public function scopeWhereSearch($query, $search)\n    {\n        foreach (explode(' ', $search) as $term) {\n            $query->whereHas('customer', function ($query) use ($term) {\n                $query->where('name', 'LIKE', '%'.$term.'%')\n                    ->orWhere('contact_name', 'LIKE', '%'.$term.'%')\n                    ->orWhere('company_name', 'LIKE', '%'.$term.'%');\n            });\n        }\n    }\n\n    public function scopeWhereOrder($query, $orderByField, $orderBy)\n    {\n        $query->orderBy($orderByField, $orderBy);\n    }\n\n    public function scopeApplyFilters($query, array $filters)\n    {\n        $filters = collect($filters);\n\n        if ($filters->get('search')) {\n            $query->whereSearch($filters->get('search'));\n        }\n\n        if ($filters->get('status')) {\n            if (\n                $filters->get('status') == self::STATUS_UNPAID ||\n                $filters->get('status') == self::STATUS_PARTIALLY_PAID ||\n                $filters->get('status') == self::STATUS_PAID\n            ) {\n                $query->wherePaidStatus($filters->get('status'));\n            } elseif ($filters->get('status') == self::STATUS_DUE) {\n                $query->whereDueStatus($filters->get('status'));\n            } else {\n                $query->whereStatus($filters->get('status'));\n            }\n        }\n\n        if ($filters->get('paid_status')) {\n            $query->wherePaidStatus($filters->get('status'));\n        }\n\n        if ($filters->get('invoice_id')) {\n            $query->whereInvoice($filters->get('invoice_id'));\n        }\n\n        if ($filters->get('invoice_number')) {\n            $query->whereInvoiceNumber($filters->get('invoice_number'));\n        }\n\n        if ($filters->get('from_date') && $filters->get('to_date')) {\n            $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));\n            $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));\n            $query->invoicesBetween($start, $end);\n        }\n\n        if ($filters->get('customer_id')) {\n            $query->whereCustomer($filters->get('customer_id'));\n        }\n\n        if ($filters->get('orderByField') || $filters->get('orderBy')) {\n            $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';\n            $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';\n            $query->whereOrder($field, $orderBy);\n        }\n    }\n\n    public function scopeWhereInvoice($query, $invoice_id)\n    {\n        $query->orWhere('id', $invoice_id);\n    }\n\n    public function scopeWhereCompany($query)\n    {\n        $query->where('invoices.company_id', request()->header('company'));\n    }\n\n    public function scopeWhereCompanyId($query, $company)\n    {\n        $query->where('invoices.company_id', $company);\n    }\n\n    public function scopeWhereCustomer($query, $customer_id)\n    {\n        $query->where('invoices.customer_id', $customer_id);\n    }\n\n    public function scopePaginateData($query, $limit)\n    {\n        if ($limit == 'all') {\n            return $query->get();\n        }\n\n        return $query->paginate($limit);\n    }\n\n    public static function createInvoice($request)\n    {\n        $data = $request->getInvoicePayload();\n\n        if ($request->has('invoiceSend')) {\n            $data['status'] = Invoice::STATUS_SENT;\n        }\n\n        $invoice = Invoice::create($data);\n\n        $serial = (new SerialNumberFormatter())\n            ->setModel($invoice)\n            ->setCompany($invoice->company_id)\n            ->setCustomer($invoice->customer_id)\n            ->setNextNumbers();\n\n        $invoice->sequence_number = $serial->nextSequenceNumber;\n        $invoice->customer_sequence_number = $serial->nextCustomerSequenceNumber;\n        $invoice->unique_hash = Hashids::connection(Invoice::class)->encode($invoice->id);\n        $invoice->save();\n\n        self::createItems($invoice, $request->items);\n\n        $company_currency = CompanySetting::getSetting('currency', $request->header('company'));\n\n        if ((string)$data['currency_id'] !== $company_currency) {\n            ExchangeRateLog::addExchangeRateLog($invoice);\n        }\n\n        if ($request->has('taxes') && (! empty($request->taxes))) {\n            self::createTaxes($invoice, $request->taxes);\n        }\n\n        if ($request->customFields) {\n            $invoice->addCustomFields($request->customFields);\n        }\n\n        $invoice = Invoice::with([\n            'items',\n            'items.fields',\n            'items.fields.customField',\n            'customer',\n            'taxes'\n        ])\n            ->find($invoice->id);\n\n        return $invoice;\n    }\n\n    public function updateInvoice($request)\n    {\n        $serial = (new SerialNumberFormatter())\n            ->setModel($this)\n            ->setCompany($this->company_id)\n            ->setCustomer($request->customer_id)\n            ->setModelObject($this->id)\n            ->setNextNumbers();\n\n        $data = $request->getInvoicePayload();\n        $oldTotal = $this->total;\n\n        $total_paid_amount = $this->total - $this->due_amount;\n\n        if ($total_paid_amount > 0 && $this->customer_id !== $request->customer_id) {\n            return 'customer_cannot_be_changed_after_payment_is_added';\n        }\n\n        if ($request->total < $total_paid_amount) {\n            return 'total_invoice_amount_must_be_more_than_paid_amount';\n        }\n\n        if ($oldTotal != $request->total) {\n            $oldTotal = (int) round($request->total) - (int) $oldTotal;\n        } else {\n            $oldTotal = 0;\n        }\n\n        $data['due_amount'] = ($this->due_amount + $oldTotal);\n        $data['base_due_amount'] = $data['due_amount'] * $data['exchange_rate'];\n        $data['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;\n\n        $this->changeInvoiceStatus($data['due_amount']);\n\n        $this->update($data);\n\n        $company_currency = CompanySetting::getSetting('currency', $request->header('company'));\n\n        if ((string)$data['currency_id'] !== $company_currency) {\n            ExchangeRateLog::addExchangeRateLog($this);\n        }\n\n        $this->items->map(function ($item) {\n            $fields = $item->fields()->get();\n\n            $fields->map(function ($field) {\n                $field->delete();\n            });\n        });\n\n        $this->items()->delete();\n        $this->taxes()->delete();\n\n        self::createItems($this, $request->items);\n\n        if ($request->has('taxes') && (! empty($request->taxes))) {\n            self::createTaxes($this, $request->taxes);\n        }\n\n        if ($request->customFields) {\n            $this->updateCustomFields($request->customFields);\n        }\n\n        $invoice = Invoice::with([\n            'items',\n            'items.fields',\n            'items.fields.customField',\n            'customer',\n            'taxes'\n        ])\n            ->find($this->id);\n\n        return $invoice;\n    }\n\n    public function sendInvoiceData($data)\n    {\n        $data['invoice'] = $this->toArray();\n        $data['customer'] = $this->customer->toArray();\n        $data['company'] = Company::find($this->company_id);\n        $data['body'] = $this->getEmailBody($data['body']);\n        $data['attach']['data'] = ($this->getEmailAttachmentSetting()) ? $this->getPDFData() : null;\n\n        return $data;\n    }\n\n    public function preview($data)\n    {\n        $data = $this->sendInvoiceData($data);\n\n        return [\n            'type' => 'preview',\n            'view' => new SendInvoiceMail($data)\n        ];\n    }\n\n    public function send($data)\n    {\n        $data = $this->sendInvoiceData($data);\n\n        \\Mail::to($data['to'])->send(new SendInvoiceMail($data));\n\n        if ($this->status == Invoice::STATUS_DRAFT) {\n            $this->status = Invoice::STATUS_SENT;\n            $this->sent = true;\n            $this->save();\n        }\n\n        return [\n            'success' => true,\n            'type' => 'send',\n        ];\n    }\n\n    public static function createItems($invoice, $invoiceItems)\n    {\n        $exchange_rate = $invoice->exchange_rate;\n\n        foreach ($invoiceItems as $invoiceItem) {\n            $invoiceItem['company_id'] = $invoice->company_id;\n            $invoiceItem['exchange_rate'] = $exchange_rate;\n            $invoiceItem['base_price'] = $invoiceItem['price'] * $exchange_rate;\n            $invoiceItem['base_discount_val'] = $invoiceItem['discount_val'] * $exchange_rate;\n            $invoiceItem['base_tax'] = $invoiceItem['tax'] * $exchange_rate;\n            $invoiceItem['base_total'] = $invoiceItem['total'] * $exchange_rate;\n\n            if (array_key_exists('recurring_invoice_id', $invoiceItem)) {\n                unset($invoiceItem['recurring_invoice_id']);\n            }\n\n            $item = $invoice->items()->create($invoiceItem);\n\n            if (array_key_exists('taxes', $invoiceItem) && $invoiceItem['taxes']) {\n                foreach ($invoiceItem['taxes'] as $tax) {\n                    $tax['company_id'] = $invoice->company_id;\n                    if (gettype($tax['amount']) !== \"NULL\") {\n                        if (array_key_exists('recurring_invoice_id', $invoiceItem)) {\n                            unset($invoiceItem['recurring_invoice_id']);\n                        }\n\n                        $item->taxes()->create($tax);\n                    }\n                }\n            }\n\n            if (array_key_exists('custom_fields', $invoiceItem) && $invoiceItem['custom_fields']) {\n                $item->addCustomFields($invoiceItem['custom_fields']);\n            }\n        }\n    }\n\n    public static function createTaxes($invoice, $taxes)\n    {\n        $exchange_rate = $invoice->exchange_rate;\n\n        foreach ($taxes as $tax) {\n            $tax['company_id'] = $invoice->company_id;\n            $tax['exchnage_rate'] = $invoice->exchange_rate;\n            $tax['base_amount'] = $tax['amount'] * $exchange_rate;\n            $tax['currency_id'] = $invoice->currency_id;\n\n            if (gettype($tax['amount']) !== \"NULL\") {\n                if (array_key_exists('recurring_invoice_id', $tax)) {\n                    unset($tax['recurring_invoice_id']);\n                }\n\n                $invoice->taxes()->create($tax);\n            }\n        }\n    }\n\n    public function getPDFData()\n    {\n        $taxes = collect();\n\n        if ($this->tax_per_item === 'YES') {\n            foreach ($this->items as $item) {\n                foreach ($item->taxes as $tax) {\n                    $found = $taxes->filter(function ($item) use ($tax) {\n                        return $item->tax_type_id == $tax->tax_type_id;\n                    })->first();\n\n                    if ($found) {\n                        $found->amount += $tax->amount;\n                    } else {\n                        $taxes->push($tax);\n                    }\n                }\n            }\n        }\n\n        $invoiceTemplate = self::find($this->id)->template_name;\n\n        $company = Company::find($this->company_id);\n        $locale = CompanySetting::getSetting('language', $company->id);\n        $customFields = CustomField::where('model_type', 'Item')->get();\n\n        App::setLocale($locale);\n\n        $logo = $company->logo_path;\n\n        view()->share([\n            'invoice' => $this,\n            'customFields' => $customFields,\n            'company_address' => $this->getCompanyAddress(),\n            'shipping_address' => $this->getCustomerShippingAddress(),\n            'billing_address' => $this->getCustomerBillingAddress(),\n            'notes' => $this->getNotes(),\n            'logo' => $logo ?? null,\n            'taxes' => $taxes,\n        ]);\n\n        return PDF::loadView('app.pdf.invoice.'.$invoiceTemplate);\n    }\n\n    public function getEmailAttachmentSetting()\n    {\n        $invoiceAsAttachment = CompanySetting::getSetting('invoice_email_attachment', $this->company_id);\n\n        if ($invoiceAsAttachment == 'NO') {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function getCompanyAddress()\n    {\n        if ($this->company && (! $this->company->address()->exists())) {\n            return false;\n        }\n\n        $format = CompanySetting::getSetting('invoice_company_address_format', $this->company_id);\n\n        return $this->getFormattedString($format);\n    }\n\n    public function getCustomerShippingAddress()\n    {\n        if ($this->customer && (! $this->customer->shippingAddress()->exists())) {\n            return false;\n        }\n\n        $format = CompanySetting::getSetting('invoice_shipping_address_format', $this->company_id);\n\n        return $this->getFormattedString($format);\n    }\n\n    public function getCustomerBillingAddress()\n    {\n        if ($this->customer && (! $this->customer->billingAddress()->exists())) {\n            return false;\n        }\n\n        $format = CompanySetting::getSetting('invoice_billing_address_format', $this->company_id);\n\n        return $this->getFormattedString($format);\n    }\n\n    public function getNotes()\n    {\n        return $this->getFormattedString($this->notes);\n    }\n\n    public function getEmailBody($body)\n    {\n        $values = array_merge($this->getFieldsArray(), $this->getExtraFields());\n\n        $body = strtr($body, $values);\n\n        return preg_replace('/{(.*?)}/', '', $body);\n    }\n\n    public function getExtraFields()\n    {\n        return [\n            '{INVOICE_DATE}' => $this->formattedInvoiceDate,\n            '{INVOICE_DUE_DATE}' => $this->formattedDueDate,\n            '{INVOICE_NUMBER}' => $this->invoice_number,\n            '{INVOICE_REF_NUMBER}' => $this->reference_number,\n            '{INVOICE_LINK}' => url('/customer/invoices/pdf/'.$this->unique_hash),\n        ];\n    }\n\n    public static function invoiceTemplates()\n    {\n        $templates = Storage::disk('views')->files('/app/pdf/invoice');\n        $invoiceTemplates = [];\n\n        foreach ($templates as $key => $template) {\n            $templateName = Str::before(basename($template), '.blade.php');\n            $invoiceTemplates[$key]['name'] = $templateName;\n            $invoiceTemplates[$key]['path'] = vite_asset('img/PDF/'.$templateName.'.png');\n        }\n\n        return $invoiceTemplates;\n    }\n\n    public function addInvoicePayment($amount)\n    {\n        $this->due_amount += $amount;\n        $this->base_due_amount = $this->due_amount * $this->exchange_rate;\n\n        $this->changeInvoiceStatus($this->due_amount);\n    }\n\n    public function subtractInvoicePayment($amount)\n    {\n        $this->due_amount -= $amount;\n        $this->base_due_amount = $this->due_amount * $this->exchange_rate;\n\n        $this->changeInvoiceStatus($this->due_amount);\n    }\n\n    public function changeInvoiceStatus($amount)\n    {\n        if ($amount < 0) {\n            return [\n                'error' => 'invalid_amount',\n            ];\n        }\n\n        if ($amount == 0) {\n            $this->status = Invoice::STATUS_COMPLETED;\n            $this->paid_status = Invoice::STATUS_PAID;\n        } elseif ($amount == $this->total) {\n            $this->status = $this->getPreviousStatus();\n            $this->paid_status = Invoice::STATUS_UNPAID;\n        } else {\n            $this->status = $this->getPreviousStatus();\n            $this->paid_status = Invoice::STATUS_PARTIALLY_PAID;\n        }\n\n        $this->save();\n    }\n}\n", "<?php\n\nnamespace Crater\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass PaymentMethod extends Model\n{\n    use HasFactory;\n\n    protected $guarded = [\n        'id'\n    ];\n\n    public const TYPE_GENERAL = 'GENERAL';\n    public const TYPE_MODULE = 'MODULE';\n\n    protected $casts = [\n        'settings' => 'array',\n        'use_test_env' => 'boolean'\n    ];\n\n    public function setSettingsAttribute($value)\n    {\n        $this->attributes['settings'] = json_encode($value);\n    }\n\n    public function payments()\n    {\n        return $this->hasMany(Payment::class);\n    }\n\n    public function company()\n    {\n        return $this->belongsTo(Company::class);\n    }\n\n    public function scopeWhereCompanyId($query, $id)\n    {\n        $query->where('company_id', $id);\n    }\n\n    public function scopeWhereCompany($query)\n    {\n        $query->where('company_id', request()->header('company'));\n    }\n\n    public function scopeWherePaymentMethod($query, $payment_id)\n    {\n        $query->orWhere('id', $payment_id);\n    }\n\n    public function scopeWhereSearch($query, $search)\n    {\n        $query->where('name', 'LIKE', '%'.$search.'%');\n    }\n\n    public function scopeApplyFilters($query, array $filters)\n    {\n        $filters = collect($filters);\n\n        if ($filters->get('method_id')) {\n            $query->wherePaymentMethod($filters->get('method_id'));\n        }\n\n        if ($filters->get('company_id')) {\n            $query->whereCompany($filters->get('company_id'));\n        }\n\n        if ($filters->get('search')) {\n            $query->whereSearch($filters->get('search'));\n        }\n    }\n\n    public function scopePaginateData($query, $limit)\n    {\n        if ($limit == 'all') {\n            return $query->get();\n        }\n\n        return $query->paginate($limit);\n    }\n\n    public static function createPaymentMethod($request)\n    {\n        $data = $request->getPaymentMethodPayload();\n\n        $paymentMethod = self::create($data);\n\n        return $paymentMethod;\n    }\n\n    public static function getSettings($id)\n    {\n        $settings = PaymentMethod::find($id)\n            ->settings;\n\n        return $settings;\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Crater\\Http\\Controllers\\V1\\Admin\\Invoice;\n\nuse Crater\\Http\\Controllers\\Controller;\nuse Crater\\Http\\Requests;\nuse Crater\\Http\\Requests\\DeleteInvoiceRequest;\nuse Crater\\Http\\Resources\\InvoiceResource;\nuse Crater\\Jobs\\GenerateInvoicePdfJob;\nuse Crater\\Models\\Invoice;\nuse Illuminate\\Http\\Request;\n\nclass InvoicesController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', Invoice::class);\n\n        $limit = $request->has('limit') ? $request->limit : 10;\n\n        $invoices = Invoice::whereCompany()\n            ->join('customers', 'customers.id', '=', 'invoices.customer_id')\n            ->applyFilters($request->all())\n            ->select('invoices.*', 'customers.name')\n            ->latest()\n            ->paginateData($limit);\n\n        return (InvoiceResource::collection($invoices))\n            ->additional(['meta' => [\n                'invoice_total_count' => Invoice::whereCompany()->count(),\n            ]]);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function store(Requests\\InvoicesRequest $request)\n    {\n        $this->authorize('create', Invoice::class);\n\n        $invoice = Invoice::createInvoice($request);\n\n        if ($request->has('invoiceSend')) {\n            $invoice->send($request->subject, $request->body);\n        }\n\n        GenerateInvoicePdfJob::dispatch($invoice);\n\n        return new InvoiceResource($invoice);\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\Crater\\Models\\Invoice $invoice\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function show(Request $request, Invoice $invoice)\n    {\n        $this->authorize('view', $invoice);\n\n        return new InvoiceResource($invoice);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request $request\n     * @param  Invoice $invoice\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function update(Requests\\InvoicesRequest $request, Invoice $invoice)\n    {\n        $this->authorize('update', $invoice);\n\n        $invoice = $invoice->updateInvoice($request);\n\n        if (is_string($invoice)) {\n            return respondJson($invoice, $invoice);\n        }\n\n        GenerateInvoicePdfJob::dispatch($invoice, true);\n\n        return new InvoiceResource($invoice);\n    }\n\n    /**\n     * delete the specified resources in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function delete(DeleteInvoiceRequest $request)\n    {\n        $this->authorize('delete multiple invoices');\n\n        Invoice::deleteInvoices($request->ids);\n\n        return response()->json([\n            'success' => true,\n        ]);\n    }\n}\n", "<?php\n\nnamespace Crater\\Http\\Controllers\\V1\\Admin\\Payment;\n\nuse Crater\\Http\\Controllers\\Controller;\nuse Crater\\Http\\Requests\\PaymentMethodRequest;\nuse Crater\\Http\\Resources\\PaymentMethodResource;\nuse Crater\\Models\\PaymentMethod;\nuse Illuminate\\Http\\Request;\n\nclass PaymentMethodsController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', PaymentMethod::class);\n\n        $limit = $request->has('limit') ? $request->limit : 5;\n\n        $paymentMethods = PaymentMethod::applyFilters($request->all())\n            ->where('type', PaymentMethod::TYPE_GENERAL)\n            ->whereCompany()\n            ->latest()\n            ->paginateData($limit);\n\n        return PaymentMethodResource::collection($paymentMethods);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(PaymentMethodRequest $request)\n    {\n        $this->authorize('create', PaymentMethod::class);\n\n        $paymentMethod = PaymentMethod::createPaymentMethod($request);\n\n        return new PaymentMethodResource($paymentMethod);\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\Crater\\Models\\PaymentMethod  $paymentMethod\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(PaymentMethod $paymentMethod)\n    {\n        $this->authorize('view', $paymentMethod);\n\n        return new PaymentMethodResource($paymentMethod);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Crater\\Models\\PaymentMethod  $paymentMethod\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(PaymentMethodRequest $request, PaymentMethod $paymentMethod)\n    {\n        $this->authorize('update', $paymentMethod);\n\n        $paymentMethod->update($request->getPaymentMethodPayload());\n\n        return new PaymentMethodResource($paymentMethod);\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\Crater\\Models\\PaymentMethod  $paymentMethod\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(PaymentMethod $paymentMethod)\n    {\n        $this->authorize('delete', $paymentMethod);\n\n        if ($paymentMethod->payments()->exists()) {\n            return respondJson('payments_attached', 'Payments Attached.');\n        }\n\n        if ($paymentMethod->expenses()->exists()) {\n            return respondJson('expenses_attached', 'Expenses Attached.');\n        }\n\n        $paymentMethod->delete();\n\n        return response()->json([\n            'success' => 'Payment method deleted successfully',\n        ]);\n    }\n}\n", "<?php\n\nnamespace Crater\\Http\\Controllers\\V1\\PDF;\n\nuse Crater\\Http\\Controllers\\Controller;\nuse Crater\\Models\\Expense;\n\nclass DownloadReceiptController extends Controller\n{\n    /**\n     * Handle the incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  Expense $expense\n     * @param   string $hash\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function __invoke(Expense $expense)\n    {\n        $this->authorize('view', $expense);\n\n        if ($expense) {\n            $media = $expense->getFirstMedia('receipts');\n            if ($media) {\n                $imagePath = $media->getPath();\n                $response = \\Response::download($imagePath, $media->file_name);\n                if (ob_get_contents()) {\n                    ob_end_clean();\n                }\n\n                return $response;\n            }\n        }\n\n        return response()->json([\n            'error' => 'receipt_not_found',\n        ]);\n    }\n}\n", "<?php\n\nnamespace Crater\\Models;\n\nuse App;\nuse Barryvdh\\DomPDF\\Facade as PDF;\nuse Carbon\\Carbon;\nuse Crater\\Mail\\SendInvoiceMail;\nuse Crater\\Services\\SerialNumberFormatter;\nuse Crater\\Traits\\GeneratesPdfTrait;\nuse Crater\\Traits\\HasCustomFieldsTrait;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Str;\nuse Nwidart\\Modules\\Facades\\Module;\nuse Spatie\\MediaLibrary\\HasMedia;\nuse Spatie\\MediaLibrary\\InteractsWithMedia;\nuse Vinkla\\Hashids\\Facades\\Hashids;\n\nclass Invoice extends Model implements HasMedia\n{\n    use HasFactory;\n    use InteractsWithMedia;\n    use GeneratesPdfTrait;\n    use HasCustomFieldsTrait;\n\n    public const STATUS_DRAFT = 'DRAFT';\n    public const STATUS_SENT = 'SENT';\n    public const STATUS_VIEWED = 'VIEWED';\n    public const STATUS_OVERDUE = 'OVERDUE';\n    public const STATUS_COMPLETED = 'COMPLETED';\n\n    public const STATUS_DUE = 'DUE';\n    public const STATUS_UNPAID = 'UNPAID';\n    public const STATUS_PARTIALLY_PAID = 'PARTIALLY_PAID';\n    public const STATUS_PAID = 'PAID';\n\n    protected $dates = [\n        'created_at',\n        'updated_at',\n        'deleted_at',\n        'invoice_date',\n        'due_date'\n    ];\n\n    protected $casts = [\n        'total' => 'integer',\n        'tax' => 'integer',\n        'sub_total' => 'integer',\n        'discount' => 'float',\n        'discount_val' => 'integer',\n        'exchange_rate' => 'float'\n    ];\n\n    protected $guarded = [\n        'id',\n    ];\n\n    protected $appends = [\n        'formattedCreatedAt',\n        'formattedInvoiceDate',\n        'formattedDueDate',\n        'invoicePdfUrl',\n    ];\n\n    public function transactions()\n    {\n        return $this->hasMany(Transaction::class);\n    }\n\n    public function emailLogs()\n    {\n        return $this->morphMany('App\\Models\\EmailLog', 'mailable');\n    }\n\n    public function items()\n    {\n        return $this->hasMany('Crater\\Models\\InvoiceItem');\n    }\n\n    public function taxes()\n    {\n        return $this->hasMany(Tax::class);\n    }\n\n    public function payments()\n    {\n        return $this->hasMany(Payment::class);\n    }\n\n    public function currency()\n    {\n        return $this->belongsTo(Currency::class);\n    }\n\n    public function company()\n    {\n        return $this->belongsTo(Company::class);\n    }\n\n    public function customer()\n    {\n        return $this->belongsTo(Customer::class, 'customer_id');\n    }\n\n    public function recurringInvoice()\n    {\n        return $this->belongsTo(RecurringInvoice::class);\n    }\n\n    public function creator()\n    {\n        return $this->belongsTo(User::class, 'creator_id');\n    }\n\n    public function getInvoicePdfUrlAttribute()\n    {\n        return url('/invoices/pdf/'.$this->unique_hash);\n    }\n\n    public function getPaymentModuleEnabledAttribute()\n    {\n        if (Module::has('Payments')) {\n            return Module::isEnabled('Payments');\n        }\n\n        return false;\n    }\n\n    public function getAllowEditAttribute()\n    {\n        $retrospective_edit = CompanySetting::getSetting('retrospective_edits', $this->company_id);\n\n        $allowed = true;\n\n        $status = [\n            self::STATUS_DRAFT,\n            self::STATUS_SENT,\n            self::STATUS_VIEWED,\n            self::STATUS_OVERDUE,\n            self::STATUS_COMPLETED,\n        ];\n\n        if ($retrospective_edit == 'disable_on_invoice_sent' && (in_array($this->status, $status)) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {\n            $allowed = false;\n        } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {\n            $allowed = false;\n        } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {\n            $allowed = false;\n        }\n\n        return $allowed;\n    }\n\n    public function getPreviousStatus()\n    {\n        if ($this->due_date < Carbon::now()) {\n            return self::STATUS_OVERDUE;\n        } elseif ($this->viewed) {\n            return self::STATUS_VIEWED;\n        } elseif ($this->sent) {\n            return self::STATUS_SENT;\n        } else {\n            return self::STATUS_DRAFT;\n        }\n    }\n\n    public function getFormattedCreatedAtAttribute($value)\n    {\n        $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);\n\n        return Carbon::parse($this->created_at)->format($dateFormat);\n    }\n\n    public function getFormattedDueDateAttribute($value)\n    {\n        $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);\n\n        return Carbon::parse($this->due_date)->format($dateFormat);\n    }\n\n    public function getFormattedInvoiceDateAttribute($value)\n    {\n        $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);\n\n        return Carbon::parse($this->invoice_date)->format($dateFormat);\n    }\n\n    public function scopeWhereStatus($query, $status)\n    {\n        return $query->where('invoices.status', $status);\n    }\n\n    public function scopeWherePaidStatus($query, $status)\n    {\n        return $query->where('invoices.paid_status', $status);\n    }\n\n    public function scopeWhereDueStatus($query, $status)\n    {\n        return $query->whereIn('invoices.paid_status', [\n            self::STATUS_UNPAID,\n            self::STATUS_PARTIALLY_PAID,\n        ]);\n    }\n\n    public function scopeWhereInvoiceNumber($query, $invoiceNumber)\n    {\n        return $query->where('invoices.invoice_number', 'LIKE', '%'.$invoiceNumber.'%');\n    }\n\n    public function scopeInvoicesBetween($query, $start, $end)\n    {\n        return $query->whereBetween(\n            'invoices.invoice_date',\n            [$start->format('Y-m-d'), $end->format('Y-m-d')]\n        );\n    }\n\n    public function scopeWhereSearch($query, $search)\n    {\n        foreach (explode(' ', $search) as $term) {\n            $query->whereHas('customer', function ($query) use ($term) {\n                $query->where('name', 'LIKE', '%'.$term.'%')\n                    ->orWhere('contact_name', 'LIKE', '%'.$term.'%')\n                    ->orWhere('company_name', 'LIKE', '%'.$term.'%');\n            });\n        }\n    }\n\n    public function scopeWhereOrder($query, $orderByField, $orderBy)\n    {\n        $query->orderBy($orderByField, $orderBy);\n    }\n\n    public function scopeApplyFilters($query, array $filters)\n    {\n        $filters = collect($filters);\n\n        if ($filters->get('search')) {\n            $query->whereSearch($filters->get('search'));\n        }\n\n        if ($filters->get('status')) {\n            if (\n                $filters->get('status') == self::STATUS_UNPAID ||\n                $filters->get('status') == self::STATUS_PARTIALLY_PAID ||\n                $filters->get('status') == self::STATUS_PAID\n            ) {\n                $query->wherePaidStatus($filters->get('status'));\n            } elseif ($filters->get('status') == self::STATUS_DUE) {\n                $query->whereDueStatus($filters->get('status'));\n            } else {\n                $query->whereStatus($filters->get('status'));\n            }\n        }\n\n        if ($filters->get('paid_status')) {\n            $query->wherePaidStatus($filters->get('status'));\n        }\n\n        if ($filters->get('invoice_id')) {\n            $query->whereInvoice($filters->get('invoice_id'));\n        }\n\n        if ($filters->get('invoice_number')) {\n            $query->whereInvoiceNumber($filters->get('invoice_number'));\n        }\n\n        if ($filters->get('from_date') && $filters->get('to_date')) {\n            $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));\n            $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));\n            $query->invoicesBetween($start, $end);\n        }\n\n        if ($filters->get('customer_id')) {\n            $query->whereCustomer($filters->get('customer_id'));\n        }\n\n        if ($filters->get('orderByField') || $filters->get('orderBy')) {\n            $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';\n            $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';\n            $query->whereOrder($field, $orderBy);\n        }\n    }\n\n    public function scopeWhereInvoice($query, $invoice_id)\n    {\n        $query->orWhere('id', $invoice_id);\n    }\n\n    public function scopeWhereCompany($query)\n    {\n        $query->where('invoices.company_id', request()->header('company'));\n    }\n\n    public function scopeWhereCompanyId($query, $company)\n    {\n        $query->where('invoices.company_id', $company);\n    }\n\n    public function scopeWhereCustomer($query, $customer_id)\n    {\n        $query->where('invoices.customer_id', $customer_id);\n    }\n\n    public function scopePaginateData($query, $limit)\n    {\n        if ($limit == 'all') {\n            return $query->get();\n        }\n\n        return $query->paginate($limit);\n    }\n\n    public static function createInvoice($request)\n    {\n        $data = $request->getInvoicePayload();\n\n        if ($request->has('invoiceSend')) {\n            $data['status'] = Invoice::STATUS_SENT;\n        }\n\n        $invoice = Invoice::create($data);\n\n        $serial = (new SerialNumberFormatter())\n            ->setModel($invoice)\n            ->setCompany($invoice->company_id)\n            ->setCustomer($invoice->customer_id)\n            ->setNextNumbers();\n\n        $invoice->sequence_number = $serial->nextSequenceNumber;\n        $invoice->customer_sequence_number = $serial->nextCustomerSequenceNumber;\n        $invoice->unique_hash = Hashids::connection(Invoice::class)->encode($invoice->id);\n        $invoice->save();\n\n        self::createItems($invoice, $request->items);\n\n        $company_currency = CompanySetting::getSetting('currency', $request->header('company'));\n\n        if ((string)$data['currency_id'] !== $company_currency) {\n            ExchangeRateLog::addExchangeRateLog($invoice);\n        }\n\n        if ($request->has('taxes') && (! empty($request->taxes))) {\n            self::createTaxes($invoice, $request->taxes);\n        }\n\n        if ($request->customFields) {\n            $invoice->addCustomFields($request->customFields);\n        }\n\n        $invoice = Invoice::with([\n            'items',\n            'items.fields',\n            'items.fields.customField',\n            'customer',\n            'taxes'\n        ])\n            ->find($invoice->id);\n\n        return $invoice;\n    }\n\n    public function updateInvoice($request)\n    {\n        $serial = (new SerialNumberFormatter())\n            ->setModel($this)\n            ->setCompany($this->company_id)\n            ->setCustomer($request->customer_id)\n            ->setModelObject($this->id)\n            ->setNextNumbers();\n\n        $data = $request->getInvoicePayload();\n        $oldTotal = $this->total;\n\n        $total_paid_amount = $this->total - $this->due_amount;\n\n        if ($total_paid_amount > 0 && $this->customer_id !== $request->customer_id) {\n            return 'customer_cannot_be_changed_after_payment_is_added';\n        }\n\n        if ($request->total < $total_paid_amount) {\n            return 'total_invoice_amount_must_be_more_than_paid_amount';\n        }\n\n        if ($oldTotal != $request->total) {\n            $oldTotal = (int) round($request->total) - (int) $oldTotal;\n        } else {\n            $oldTotal = 0;\n        }\n\n        $data['due_amount'] = ($this->due_amount + $oldTotal);\n        $data['base_due_amount'] = $data['due_amount'] * $data['exchange_rate'];\n        $data['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;\n\n        $this->changeInvoiceStatus($data['due_amount']);\n\n        $this->update($data);\n\n        $company_currency = CompanySetting::getSetting('currency', $request->header('company'));\n\n        if ((string)$data['currency_id'] !== $company_currency) {\n            ExchangeRateLog::addExchangeRateLog($this);\n        }\n\n        $this->items->map(function ($item) {\n            $fields = $item->fields()->get();\n\n            $fields->map(function ($field) {\n                $field->delete();\n            });\n        });\n\n        $this->items()->delete();\n        $this->taxes()->delete();\n\n        self::createItems($this, $request->items);\n\n        if ($request->has('taxes') && (! empty($request->taxes))) {\n            self::createTaxes($this, $request->taxes);\n        }\n\n        if ($request->customFields) {\n            $this->updateCustomFields($request->customFields);\n        }\n\n        $invoice = Invoice::with([\n            'items',\n            'items.fields',\n            'items.fields.customField',\n            'customer',\n            'taxes'\n        ])\n            ->find($this->id);\n\n        return $invoice;\n    }\n\n    public function sendInvoiceData($data)\n    {\n        $data['invoice'] = $this->toArray();\n        $data['customer'] = $this->customer->toArray();\n        $data['company'] = Company::find($this->company_id);\n        $data['body'] = $this->getEmailBody($data['body']);\n        $data['attach']['data'] = ($this->getEmailAttachmentSetting()) ? $this->getPDFData() : null;\n\n        return $data;\n    }\n\n    public function preview($data)\n    {\n        $data = $this->sendInvoiceData($data);\n\n        return [\n            'type' => 'preview',\n            'view' => new SendInvoiceMail($data)\n        ];\n    }\n\n    public function send($data)\n    {\n        $data = $this->sendInvoiceData($data);\n\n        \\Mail::to($data['to'])->send(new SendInvoiceMail($data));\n\n        if ($this->status == Invoice::STATUS_DRAFT) {\n            $this->status = Invoice::STATUS_SENT;\n            $this->sent = true;\n            $this->save();\n        }\n\n        return [\n            'success' => true,\n            'type' => 'send',\n        ];\n    }\n\n    public static function createItems($invoice, $invoiceItems)\n    {\n        $exchange_rate = $invoice->exchange_rate;\n\n        foreach ($invoiceItems as $invoiceItem) {\n            $invoiceItem['company_id'] = $invoice->company_id;\n            $invoiceItem['exchange_rate'] = $exchange_rate;\n            $invoiceItem['base_price'] = $invoiceItem['price'] * $exchange_rate;\n            $invoiceItem['base_discount_val'] = $invoiceItem['discount_val'] * $exchange_rate;\n            $invoiceItem['base_tax'] = $invoiceItem['tax'] * $exchange_rate;\n            $invoiceItem['base_total'] = $invoiceItem['total'] * $exchange_rate;\n\n            if (array_key_exists('recurring_invoice_id', $invoiceItem)) {\n                unset($invoiceItem['recurring_invoice_id']);\n            }\n\n            $item = $invoice->items()->create($invoiceItem);\n\n            if (array_key_exists('taxes', $invoiceItem) && $invoiceItem['taxes']) {\n                foreach ($invoiceItem['taxes'] as $tax) {\n                    $tax['company_id'] = $invoice->company_id;\n                    if (gettype($tax['amount']) !== \"NULL\") {\n                        if (array_key_exists('recurring_invoice_id', $invoiceItem)) {\n                            unset($invoiceItem['recurring_invoice_id']);\n                        }\n\n                        $item->taxes()->create($tax);\n                    }\n                }\n            }\n\n            if (array_key_exists('custom_fields', $invoiceItem) && $invoiceItem['custom_fields']) {\n                $item->addCustomFields($invoiceItem['custom_fields']);\n            }\n        }\n    }\n\n    public static function createTaxes($invoice, $taxes)\n    {\n        $exchange_rate = $invoice->exchange_rate;\n\n        foreach ($taxes as $tax) {\n            $tax['company_id'] = $invoice->company_id;\n            $tax['exchnage_rate'] = $invoice->exchange_rate;\n            $tax['base_amount'] = $tax['amount'] * $exchange_rate;\n            $tax['currency_id'] = $invoice->currency_id;\n\n            if (gettype($tax['amount']) !== \"NULL\") {\n                if (array_key_exists('recurring_invoice_id', $tax)) {\n                    unset($tax['recurring_invoice_id']);\n                }\n\n                $invoice->taxes()->create($tax);\n            }\n        }\n    }\n\n    public function getPDFData()\n    {\n        $taxes = collect();\n\n        if ($this->tax_per_item === 'YES') {\n            foreach ($this->items as $item) {\n                foreach ($item->taxes as $tax) {\n                    $found = $taxes->filter(function ($item) use ($tax) {\n                        return $item->tax_type_id == $tax->tax_type_id;\n                    })->first();\n\n                    if ($found) {\n                        $found->amount += $tax->amount;\n                    } else {\n                        $taxes->push($tax);\n                    }\n                }\n            }\n        }\n\n        $invoiceTemplate = self::find($this->id)->template_name;\n\n        $company = Company::find($this->company_id);\n        $locale = CompanySetting::getSetting('language', $company->id);\n        $customFields = CustomField::where('model_type', 'Item')->get();\n\n        App::setLocale($locale);\n\n        $logo = $company->logo_path;\n\n        view()->share([\n            'invoice' => $this,\n            'customFields' => $customFields,\n            'company_address' => $this->getCompanyAddress(),\n            'shipping_address' => $this->getCustomerShippingAddress(),\n            'billing_address' => $this->getCustomerBillingAddress(),\n            'notes' => $this->getNotes(),\n            'logo' => $logo ?? null,\n            'taxes' => $taxes,\n        ]);\n\n        return PDF::loadView('app.pdf.invoice.'.$invoiceTemplate);\n    }\n\n    public function getEmailAttachmentSetting()\n    {\n        $invoiceAsAttachment = CompanySetting::getSetting('invoice_email_attachment', $this->company_id);\n\n        if ($invoiceAsAttachment == 'NO') {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function getCompanyAddress()\n    {\n        if ($this->company && (! $this->company->address()->exists())) {\n            return false;\n        }\n\n        $format = CompanySetting::getSetting('invoice_company_address_format', $this->company_id);\n\n        return $this->getFormattedString($format);\n    }\n\n    public function getCustomerShippingAddress()\n    {\n        if ($this->customer && (! $this->customer->shippingAddress()->exists())) {\n            return false;\n        }\n\n        $format = CompanySetting::getSetting('invoice_shipping_address_format', $this->company_id);\n\n        return $this->getFormattedString($format);\n    }\n\n    public function getCustomerBillingAddress()\n    {\n        if ($this->customer && (! $this->customer->billingAddress()->exists())) {\n            return false;\n        }\n\n        $format = CompanySetting::getSetting('invoice_billing_address_format', $this->company_id);\n\n        return $this->getFormattedString($format);\n    }\n\n    public function getNotes()\n    {\n        return $this->getFormattedString($this->notes);\n    }\n\n    public function getEmailBody($body)\n    {\n        $values = array_merge($this->getFieldsArray(), $this->getExtraFields());\n\n        $body = strtr($body, $values);\n\n        return preg_replace('/{(.*?)}/', '', $body);\n    }\n\n    public function getExtraFields()\n    {\n        return [\n            '{INVOICE_DATE}' => $this->formattedInvoiceDate,\n            '{INVOICE_DUE_DATE}' => $this->formattedDueDate,\n            '{INVOICE_NUMBER}' => $this->invoice_number,\n            '{INVOICE_REF_NUMBER}' => $this->reference_number,\n            '{INVOICE_LINK}' => url('/customer/invoices/pdf/'.$this->unique_hash),\n        ];\n    }\n\n    public static function invoiceTemplates()\n    {\n        $templates = Storage::disk('views')->files('/app/pdf/invoice');\n        $invoiceTemplates = [];\n\n        foreach ($templates as $key => $template) {\n            $templateName = Str::before(basename($template), '.blade.php');\n            $invoiceTemplates[$key]['name'] = $templateName;\n            $invoiceTemplates[$key]['path'] = vite_asset('img/PDF/'.$templateName.'.png');\n        }\n\n        return $invoiceTemplates;\n    }\n\n    public function addInvoicePayment($amount)\n    {\n        $this->due_amount += $amount;\n        $this->base_due_amount = $this->due_amount * $this->exchange_rate;\n\n        $this->changeInvoiceStatus($this->due_amount);\n    }\n\n    public function subtractInvoicePayment($amount)\n    {\n        $this->due_amount -= $amount;\n        $this->base_due_amount = $this->due_amount * $this->exchange_rate;\n\n        $this->changeInvoiceStatus($this->due_amount);\n    }\n\n    public function changeInvoiceStatus($amount)\n    {\n        if ($amount < 0) {\n            return [\n                'error' => 'invalid_amount',\n            ];\n        }\n\n        if ($amount == 0) {\n            $this->status = Invoice::STATUS_COMPLETED;\n            $this->paid_status = Invoice::STATUS_PAID;\n        } elseif ($amount == $this->total) {\n            $this->status = $this->getPreviousStatus();\n            $this->paid_status = Invoice::STATUS_UNPAID;\n        } else {\n            $this->status = $this->getPreviousStatus();\n            $this->paid_status = Invoice::STATUS_PARTIALLY_PAID;\n        }\n\n        $this->save();\n    }\n\n    public static function deleteInvoices($ids)\n    {\n        foreach ($ids as $id) {\n            $invoice = self::find($id);\n\n            if ($invoice->transactions()->exists()) {\n                $invoice->transactions()->delete();\n            }\n\n            $invoice->delete();\n        }\n\n        return true;\n    }\n}\n", "<?php\n\nnamespace Crater\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass PaymentMethod extends Model\n{\n    use HasFactory;\n\n    protected $guarded = [\n        'id'\n    ];\n\n    public const TYPE_GENERAL = 'GENERAL';\n    public const TYPE_MODULE = 'MODULE';\n\n    protected $casts = [\n        'settings' => 'array',\n        'use_test_env' => 'boolean'\n    ];\n\n    public function setSettingsAttribute($value)\n    {\n        $this->attributes['settings'] = json_encode($value);\n    }\n\n    public function payments()\n    {\n        return $this->hasMany(Payment::class);\n    }\n\n    public function expenses()\n    {\n        return $this->hasMany(Expense::class);\n    }\n\n    public function company()\n    {\n        return $this->belongsTo(Company::class);\n    }\n\n    public function scopeWhereCompanyId($query, $id)\n    {\n        $query->where('company_id', $id);\n    }\n\n    public function scopeWhereCompany($query)\n    {\n        $query->where('company_id', request()->header('company'));\n    }\n\n    public function scopeWherePaymentMethod($query, $payment_id)\n    {\n        $query->orWhere('id', $payment_id);\n    }\n\n    public function scopeWhereSearch($query, $search)\n    {\n        $query->where('name', 'LIKE', '%'.$search.'%');\n    }\n\n    public function scopeApplyFilters($query, array $filters)\n    {\n        $filters = collect($filters);\n\n        if ($filters->get('method_id')) {\n            $query->wherePaymentMethod($filters->get('method_id'));\n        }\n\n        if ($filters->get('company_id')) {\n            $query->whereCompany($filters->get('company_id'));\n        }\n\n        if ($filters->get('search')) {\n            $query->whereSearch($filters->get('search'));\n        }\n    }\n\n    public function scopePaginateData($query, $limit)\n    {\n        if ($limit == 'all') {\n            return $query->get();\n        }\n\n        return $query->paginate($limit);\n    }\n\n    public static function createPaymentMethod($request)\n    {\n        $data = $request->getPaymentMethodPayload();\n\n        $paymentMethod = self::create($data);\n\n        return $paymentMethod;\n    }\n\n    public static function getSettings($id)\n    {\n        $settings = PaymentMethod::find($id)\n            ->settings;\n\n        return $settings;\n    }\n}\n"], "filenames": ["app/Http/Controllers/V1/Admin/Invoice/InvoicesController.php", "app/Http/Controllers/V1/Admin/Payment/PaymentMethodsController.php", "app/Http/Controllers/V1/PDF/DownloadReceiptController.php", "app/Models/Invoice.php", "app/Models/PaymentMethod.php"], "buggy_code_start_loc": [105, 87, 19, 700, 31], "buggy_code_end_loc": [106, 91, 19, 700, 31], "fixing_code_start_loc": [105, 87, 20, 701, 32], "fixing_code_end_loc": [106, 93, 22, 716, 37], "type": "CWE-862", "message": "Improper Access Control in GitHub repository crater-invoice/crater prior to 6.0.2.", "other": {"cve": {"id": "CVE-2022-0203", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-26T13:15:07.813", "lastModified": "2022-02-02T14:23:46.720", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Access Control in GitHub repository crater-invoice/crater prior to 6.0.2."}, {"lang": "es", "value": "Un Control de Acceso Inapropiado en el repositorio de GitHub crater-invoice/crater versiones anteriores a 6.0.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:craterapp:crater:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.0.2", "matchCriteriaId": "21E7A2D5-C842-40A0-8206-10FFCEF06A17"}]}]}], "references": [{"url": "https://github.com/crater-invoice/crater/commit/dd324c8bb6b17009f82afe8bc830caec7241e992", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/395fc553-2b90-4e69-ba07-a316e1c06406", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/crater-invoice/crater/commit/dd324c8bb6b17009f82afe8bc830caec7241e992"}}