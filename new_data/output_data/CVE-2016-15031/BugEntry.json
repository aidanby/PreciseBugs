{"buggy_code": ["<?php\n// Extend this class to re-use db connection\nclass dbConn {\n\tpublic $conn;\n\tpublic function __construct(){\n\n\t\tinclude 'config.php';\n\t\t// Connect to server and select database.\n\t\t$this->conn = new PDO('mysql:host='.$host.';dbname='.$db_name.';charset=utf8', $username, $password);\n\t\t$this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\t}\n};\n\nclass selectEmail extends dbConn {\n\n\t\tpublic function emailPull($id) {\n\n\t\tinclude 'config.php';\n\n\t\ttry {\n\t\t\t$edb = new dbConn;\n\t\t\t$eerr = '';\n\t\t\t}\n\n\t\tcatch (PDOException $e) {\n\t\t\t$eerr = \"Error: \" . $e->getMessage();\n\t\t}\n\n\t\t//Queries database\n\t\t$estmt = $edb->conn->query(\"SELECT email, username FROM $tbl_name WHERE id = '$id'\");\n\n\t\t$eresult = $estmt->fetch(PDO::FETCH_ASSOC);\n\n\t\treturn $eresult;\n\n\t}\n\n};\n\nclass loginForm extends dbConn {\n\n\tpublic function checkLogin($tbl_name, $myusername, $mypassword) {\n\n\t\ttry {\n\n\t\t\t$db = new dbConn;\n\n\t\t\t$err = '';\n\t\t\t}\n\n\t\tcatch (PDOException $e) {\n\t\t\t$err = \"Error: \" . $e->getMessage();\n\t\t}\n\n\t\t$stmt = $stmt = $db->conn->query(\"SELECT * FROM $tbl_name WHERE username='$myusername'\");\n\n\t\t// Gets query result\n\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);\n\n\t// Checks password entered against db password hash\n\t\tif(password_verify($mypassword, $result['password']) && $result['verified'] == '1' ){\n\n\t\t\t// Register $myusername, $mypassword and return \"true\"\n\t\t\t$success = 'true';\n\n\t\t}\n\n\t\telseif(password_verify($mypassword, $result['password']) && $result['verified'] == '0' ){\n\n\t\t\t// Register $myusername, $mypassword and return \"true\"\n\t\t\t$success = \"<div class=\\\"alert alert-danger alert-dismissable\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-hidden=\\\"true\\\">&times;</button>Your account has been created, but you cannot log in until it has been verified</div>\";\n\n\t\t}\n\n\t\telse {\n\t\t\t//return the error message\n\t\t\t$success = \"<div class=\\\"alert alert-danger alert-dismissable\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-hidden=\\\"true\\\">&times;</button>Wrong Username or Password</div>\";\n\t\t}\n\n\t\treturn $success;\n\n\t}\n};\n\nclass mailSender {\n\n\tpublic function sendMail($email, $user, $id, $type) {\n\t\trequire 'scripts/PHPMailer/PHPMailerAutoload.php';\n\t\tinclude 'config.php';\n\n\t\t$finishedtext = $active_email;\n\n\t\t// ADD $_SERVER['SERVER_PORT'] TO $verifyurl STRING AFTER $_SERVER['SERVER_NAME'] FOR DEV URLS USING PORTS OTHER THAN 80\n\t\t// substr() trims \"createuser.php\" off of the current URL and replaces with verifyuser.php\n\t\t// Can pass 1 (verified) or 0 (unverified/blocked) into url for \"v\" parameter\n\t\t$verifyurl = substr($base_url . $_SERVER['PHP_SELF'],0, -strlen(basename($_SERVER['PHP_SELF']))) . \"verifyuser.php?v=1&uid=\" . $id;\n\t\t\t//substr($base_url . $_SERVER['PHP_SELF'],0, -14) . \"verifyuser.php?v=1&uid=\" . $id;\n\n\t\t// Create a new PHPMailer instance\n\t\t// ADD sendmail_path = \"env -i /usr/sbin/sendmail -t -i\" to php.ini on UNIX servers\n\t\t$mail = new PHPMailer;\n\t\t//Sets mail header so HTML renders\n\t\t$mail->isHTML(true);\n\t\t//Formatting options\n\t\t$mail->CharSet = \"text/html; charset=UTF-8;\";\n\t\t$mail->WordWrap = 80;\n\t\t// Set who the message is to be sent from\n\t\t$mail->setFrom($from_email, $from_name);\n\t\t$mail->AddReplyTo($from_email, $from_name);\n\t\t/****\n\t\t* Set who the message is to be sent to\n\t\t* CAN BE SET TO addAddress(youremail@website.com, 'Your Name') FOR PRIVATE USER APPROVAL BY MODERATOR\n\t\t* SET TO addAddress($email, $user) FOR USER SELF-VERIFICATION\n\t\t*****/\n\t\t$mail->addAddress($email, $user);\n\n\t\t//Sets message body content based on type (verification or confirmation)\n\t\tif ($type == 'Verify') {\n\t\t\t//Set the subject line\n\t\t\t$mail->Subject = $user . ' Account Verification';\n\t\t\t//Set the body of the message\n\t\t\t$mail->Body = $verifymsg . '<br><a href=\"'.$verifyurl.'\">'.$verifyurl.'</a>';\n\t\t\t$mail->AltBody  =  $verifymsg . $verifyurl;\n\t\t}\n\t\telseif ($type == 'Active') {\n\t\t\t//Set the subject line\n\t\t\t$mail->Subject = $site_name . ' Account Created!';\n\t\t\t//Set the body of the message\n\t\t\t$mail->Body = $active_email . '<br><a href=\"'.$signin_url.'\">'.$signin_url.'</a>';\n\t\t\t$mail->AltBody  =  $active_email . $signin_url;\n\n\t\t};\n\n\t\t//SMTP Settings\n\t\tif ($mailServerType == 'smtp'){\n\t\t\t$mail->IsSMTP(); //Enable SMTP\n\t\t\t$mail->SMTPAuth = true; //SMTP Authentication\n\t\t\t$mail->Host = $smtp_server; //SMTP Host\n\t\t\t//Defaults: Non-Encrypted = 25, SSL = 465, TLS = 587\n\t\t\t$mail->SMTPSecure = $smtp_security; // Sets the prefix to the server\n\t\t\t$mail->Port = $smtp_port; //SMTP Port\n\t\t\t//SMTP user auth\n\t\t\t$mail->Username = $smtp_user; //SMTP Username\n\t\t\t$mail->Password = $smtp_pw; //SMTP Password\n\t\t\t//********************\n\t\t\t$mail->SMTPDebug = 0; //Set to 0 to disable debugging (for production)\n\t\t}\n\n\t\ttry\n\t\t\t{\n\t\t\t\t$mail->Send();\n\t\t\t}\n\t\tcatch (phpmailerException $e)\n\t\t\t{\n\t\t\t\techo $e->errorMessage();// Error messages from PHPMailer\n\t\t\t}\n\t\tcatch (Exception $e)\n\t\t\t{\n\t\t\t\techo $e->getMessage();// Something else\n\t\t\t}\n\n\t}\n\n};\n\nclass newUserForm extends dbConn {\n\n\tpublic function createUser($usr, $uid, $email, $pw) {\n\n\t\tinclude 'config.php';\n\n\t\ttry {\n\n\t\t\t$db = new dbConn;\n\n\t\t\t$err = '';\n\t\t\t// prepare sql and bind parameters\n\t\t\t$stmt = $db->conn->prepare(\"INSERT INTO $tbl_name (id, username, password, email)\n\t\t\tVALUES (:id, :username, :password, :email)\");\n\t\t\t$stmt->bindParam(':id', $uid);\n\t\t\t$stmt->bindParam(':username', $usr);\n\t\t\t$stmt->bindParam(':email', $email);\n\t\t\t$stmt->bindParam(':password', $pw);\n\t\t\t$stmt->execute();\n\t\t}\n\t\tcatch (PDOException $e) {\n\t\t\t$err = \"Error: \" . $e->getMessage();\n\t\t}\n\n\t\t//Determines returned value ('true' or error code)\n\t\tif ($err == '') {\n\t\t\t$success = 'true';\n\t\t}\n\t\telse {\n\t\t\t$success = $err;\n\t\t};\n\n\t\treturn $success;\n\t}\n};\n\nclass verify extends dbConn {\n\tfunction verifyUser($uid, $verify) {\n\n\t\tinclude 'config.php';\n\n\t\ttry {\n\n\t\t$vdb = new dbConn;\n\n\t\t$verr = '';\n\n\t\t// prepare sql and bind parameters\n\t\t$vstmt = $vdb->conn->prepare(\"UPDATE $tbl_name SET verified = :verify WHERE id = :uid\");\n\t\t$vstmt->bindParam(':uid', $uid);\n\t\t$vstmt->bindParam(':verify', $verify);\n\t\t$vstmt->execute();\n\n\t} catch(PDOException $v) {\n\t\t$verr = \"Error: \" . $v->getMessage();\n\t}\n\n\t// Connect to server and select database.\n\n\n\t//Determines returned value ('true' or error code)\n\tif($verr == ''){\n\t\t$vresponse = 'true'; }\n\telse{\n\t\t$vresponse = $verr; };\n\n\treturn $vresponse;\n\t}\n\n};\n\nfunction mySqlErrors ($response) {\n\t//Returns custom error messages instead of MySQL errors\n\tswitch(substr($response, 0, 22)){\n\t\tcase 'Error: SQLSTATE[23000]':\n\t\t\techo \"<div class=\\\"alert alert-danger alert-dismissable\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-hidden=\\\"true\\\">&times;</button>Username already exists</div>\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\techo \"<div class=\\\"alert alert-danger alert-dismissable\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-hidden=\\\"true\\\">&times;</button>An error occurred... try again</div>\";\n\t}\n}\n\n?>\n"], "fixing_code": ["<?php\n// Extend this class to re-use db connection\nclass dbConn {\n\tpublic $conn;\n\tpublic function __construct(){\n\n\t\tinclude 'config.php';\n\t\t// Connect to server and select database.\n\t\t$this->conn = new PDO('mysql:host='.$host.';dbname='.$db_name.';charset=utf8', $username, $password);\n\t\t$this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\t}\n};\n\nclass selectEmail extends dbConn {\n\n\t\tpublic function emailPull($id) {\n\n\t\tinclude 'config.php';\n\n\t\ttry {\n\t\t\t$edb = new dbConn;\n\t\t\t$eerr = '';\n\t\t\t}\n\n\t\tcatch (PDOException $e) {\n\t\t\t$eerr = \"Error: \" . $e->getMessage();\n\t\t}\n\n\t\t//Queries database\n\t\t$estmt = $edb->conn->query(\"SELECT email, username FROM $tbl_name WHERE id = '$id'\");\n            //http://www.w3schools.com/php/php_mysql_prepared_statements.asp\n        \n\n\t\t$eresult = $estmt->fetch(PDO::FETCH_ASSOC);\n\n\t\treturn $eresult;\n\n\t}\n\n};\n\nclass loginForm extends dbConn {\n\n\tpublic function checkLogin($tbl_name, $myusername, $mypassword) {\n\n\t\ttry {\n\n\t\t\t$db = new dbConn;\n\n\t\t\t$err = '';\n\t\t\t}\n\n\t\tcatch (PDOException $e) {\n\t\t\t$err = \"Error: \" . $e->getMessage();\n\t\t}\n\n\t\t$stmt = $stmt = $db->conn->prepare(\"SELECT * FROM $tbl_name WHERE username= :myusername\");\n        $stmt->bindParm(':myusername', $myusrname);\n        $myusrname = $myusername;\n        stmt->execute();\n        \n\n\t\t// Gets query result\n\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);\n\n\t// Checks password entered against db password hash\n\t\tif(password_verify($mypassword, $result['password']) && $result['verified'] == '1' ){\n\n\t\t\t// Register $myusername, $mypassword and return \"true\"\n\t\t\t$success = 'true';\n\n\t\t}\n\n\t\telseif(password_verify($mypassword, $result['password']) && $result['verified'] == '0' ){\n\n\t\t\t// Register $myusername, $mypassword and return \"true\"\n\t\t\t$success = \"<div class=\\\"alert alert-danger alert-dismissable\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-hidden=\\\"true\\\">&times;</button>Your account has been created, but you cannot log in until it has been verified</div>\";\n\n\t\t}\n\n\t\telse {\n\t\t\t//return the error message\n\t\t\t$success = \"<div class=\\\"alert alert-danger alert-dismissable\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-hidden=\\\"true\\\">&times;</button>Wrong Username or Password</div>\";\n\t\t}\n\n\t\treturn $success;\n\n\t}\n};\n\nclass mailSender {\n\n\tpublic function sendMail($email, $user, $id, $type) {\n\t\trequire 'scripts/PHPMailer/PHPMailerAutoload.php';\n\t\tinclude 'config.php';\n\n\t\t$finishedtext = $active_email;\n\n\t\t// ADD $_SERVER['SERVER_PORT'] TO $verifyurl STRING AFTER $_SERVER['SERVER_NAME'] FOR DEV URLS USING PORTS OTHER THAN 80\n\t\t// substr() trims \"createuser.php\" off of the current URL and replaces with verifyuser.php\n\t\t// Can pass 1 (verified) or 0 (unverified/blocked) into url for \"v\" parameter\n\t\t$verifyurl = substr($base_url . $_SERVER['PHP_SELF'],0, -strlen(basename($_SERVER['PHP_SELF']))) . \"verifyuser.php?v=1&uid=\" . $id;\n\t\t\t//substr($base_url . $_SERVER['PHP_SELF'],0, -14) . \"verifyuser.php?v=1&uid=\" . $id;\n\n\t\t// Create a new PHPMailer instance\n\t\t// ADD sendmail_path = \"env -i /usr/sbin/sendmail -t -i\" to php.ini on UNIX servers\n\t\t$mail = new PHPMailer;\n\t\t//Sets mail header so HTML renders\n\t\t$mail->isHTML(true);\n\t\t//Formatting options\n\t\t$mail->CharSet = \"text/html; charset=UTF-8;\";\n\t\t$mail->WordWrap = 80;\n\t\t// Set who the message is to be sent from\n\t\t$mail->setFrom($from_email, $from_name);\n\t\t$mail->AddReplyTo($from_email, $from_name);\n\t\t/****\n\t\t* Set who the message is to be sent to\n\t\t* CAN BE SET TO addAddress(youremail@website.com, 'Your Name') FOR PRIVATE USER APPROVAL BY MODERATOR\n\t\t* SET TO addAddress($email, $user) FOR USER SELF-VERIFICATION\n\t\t*****/\n\t\t$mail->addAddress($email, $user);\n\n\t\t//Sets message body content based on type (verification or confirmation)\n\t\tif ($type == 'Verify') {\n\t\t\t//Set the subject line\n\t\t\t$mail->Subject = $user . ' Account Verification';\n\t\t\t//Set the body of the message\n\t\t\t$mail->Body = $verifymsg . '<br><a href=\"'.$verifyurl.'\">'.$verifyurl.'</a>';\n\t\t\t$mail->AltBody  =  $verifymsg . $verifyurl;\n\t\t}\n\t\telseif ($type == 'Active') {\n\t\t\t//Set the subject line\n\t\t\t$mail->Subject = $site_name . ' Account Created!';\n\t\t\t//Set the body of the message\n\t\t\t$mail->Body = $active_email . '<br><a href=\"'.$signin_url.'\">'.$signin_url.'</a>';\n\t\t\t$mail->AltBody  =  $active_email . $signin_url;\n\n\t\t};\n\n\t\t//SMTP Settings\n\t\tif ($mailServerType == 'smtp'){\n\t\t\t$mail->IsSMTP(); //Enable SMTP\n\t\t\t$mail->SMTPAuth = true; //SMTP Authentication\n\t\t\t$mail->Host = $smtp_server; //SMTP Host\n\t\t\t//Defaults: Non-Encrypted = 25, SSL = 465, TLS = 587\n\t\t\t$mail->SMTPSecure = $smtp_security; // Sets the prefix to the server\n\t\t\t$mail->Port = $smtp_port; //SMTP Port\n\t\t\t//SMTP user auth\n\t\t\t$mail->Username = $smtp_user; //SMTP Username\n\t\t\t$mail->Password = $smtp_pw; //SMTP Password\n\t\t\t//********************\n\t\t\t$mail->SMTPDebug = 0; //Set to 0 to disable debugging (for production)\n\t\t}\n\n\t\ttry\n\t\t\t{\n\t\t\t\t$mail->Send();\n\t\t\t}\n\t\tcatch (phpmailerException $e)\n\t\t\t{\n\t\t\t\techo $e->errorMessage();// Error messages from PHPMailer\n\t\t\t}\n\t\tcatch (Exception $e)\n\t\t\t{\n\t\t\t\techo $e->getMessage();// Something else\n\t\t\t}\n\n\t}\n\n};\n\nclass newUserForm extends dbConn {\n\n\tpublic function createUser($usr, $uid, $email, $pw) {\n\n\t\tinclude 'config.php';\n\n\t\ttry {\n\n\t\t\t$db = new dbConn;\n\n\t\t\t$err = '';\n\t\t\t// prepare sql and bind parameters\n\t\t\t$stmt = $db->conn->prepare(\"INSERT INTO $tbl_name (id, username, password, email)\n\t\t\tVALUES (:id, :username, :password, :email)\");\n\t\t\t$stmt->bindParam(':id', $uid);\n\t\t\t$stmt->bindParam(':username', $usr);\n\t\t\t$stmt->bindParam(':email', $email);\n\t\t\t$stmt->bindParam(':password', $pw);\n\t\t\t$stmt->execute();\n\t\t}\n\t\tcatch (PDOException $e) {\n\t\t\t$err = \"Error: \" . $e->getMessage();\n\t\t}\n\n\t\t//Determines returned value ('true' or error code)\n\t\tif ($err == '') {\n\t\t\t$success = 'true';\n\t\t}\n\t\telse {\n\t\t\t$success = $err;\n\t\t};\n\n\t\treturn $success;\n\t}\n};\n\nclass verify extends dbConn {\n\tfunction verifyUser($uid, $verify) {\n\n\t\tinclude 'config.php';\n\n\t\ttry {\n\n\t\t$vdb = new dbConn;\n\n\t\t$verr = '';\n\n\t\t// prepare sql and bind parameters\n\t\t$vstmt = $vdb->conn->prepare(\"UPDATE $tbl_name SET verified = :verify WHERE id = :uid\");\n\t\t$vstmt->bindParam(':uid', $uid);\n\t\t$vstmt->bindParam(':verify', $verify);\n\t\t$vstmt->execute();\n\n\t} catch(PDOException $v) {\n\t\t$verr = \"Error: \" . $v->getMessage();\n\t}\n\n\t// Connect to server and select database.\n\n\n\t//Determines returned value ('true' or error code)\n\tif($verr == ''){\n\t\t$vresponse = 'true'; }\n\telse{\n\t\t$vresponse = $verr; };\n\n\treturn $vresponse;\n\t}\n\n};\n\nfunction mySqlErrors ($response) {\n\t//Returns custom error messages instead of MySQL errors\n\tswitch(substr($response, 0, 22)){\n\t\tcase 'Error: SQLSTATE[23000]':\n\t\t\techo \"<div class=\\\"alert alert-danger alert-dismissable\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-hidden=\\\"true\\\">&times;</button>Username already exists</div>\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\techo \"<div class=\\\"alert alert-danger alert-dismissable\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-hidden=\\\"true\\\">&times;</button>An error occurred... try again</div>\";\n\t}\n}\n\n?>\n"], "filenames": ["login/scripts/class.loginscript.php"], "buggy_code_start_loc": [30], "buggy_code_end_loc": [56], "fixing_code_start_loc": [31], "fixing_code_end_loc": [62], "type": "CWE-89", "message": "A vulnerability was found in PHP-Login 1.0. It has been declared as critical. This vulnerability affects the function checkLogin of the file login/scripts/class.loginscript.php of the component POST Parameter Handler. The manipulation of the argument myusername leads to sql injection. The attack can be initiated remotely. Upgrading to version 2.0 is able to address this issue. The name of the patch is 0083ec652786ddbb81335ea20da590df40035679. It is recommended to upgrade the affected component. VDB-228022 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2016-15031", "sourceIdentifier": "cna@vuldb.com", "published": "2023-05-06T01:15:08.827", "lastModified": "2023-05-12T16:22:35.657", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in PHP-Login 1.0. It has been declared as critical. This vulnerability affects the function checkLogin of the file login/scripts/class.loginscript.php of the component POST Parameter Handler. The manipulation of the argument myusername leads to sql injection. The attack can be initiated remotely. Upgrading to version 2.0 is able to address this issue. The name of the patch is 0083ec652786ddbb81335ea20da590df40035679. It is recommended to upgrade the affected component. VDB-228022 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:php-login_project:php-login:1.0:*:*:*:*:*:*:*", "matchCriteriaId": "D0365A48-5D57-4162-9ADC-4B26808E5E34"}]}]}], "references": [{"url": "https://github.com/ipoelnet/php-login/commit/0083ec652786ddbb81335ea20da590df40035679", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/ipoelnet/php-login/releases/tag/v2.0", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.228022", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.228022", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ipoelnet/php-login/commit/0083ec652786ddbb81335ea20da590df40035679"}}