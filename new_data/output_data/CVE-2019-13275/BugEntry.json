{"buggy_code": ["<?php\n\nnamespace WP_STATISTICS;\n\nclass Pages {\n\t/**\n\t * Check Active Record Pages\n\t *\n\t * @return mixed\n\t */\n\tpublic static function active() {\n\t\treturn ( has_filter( 'wp_statistics_active_pages' ) ) ? apply_filters( 'wp_statistics_active_pages', true ) : Option::get( 'pages' );\n\t}\n\n\t/**\n\t * Get WordPress Page Type\n\t */\n\tpublic static function get_page_type() {\n\n\t\t//Set Default Option\n\t\t$current_page = array( \"type\" => \"unknown\", \"id\" => 0 );\n\n\t\t//Check Query object\n\t\t$id = get_queried_object_id();\n\t\tif ( is_numeric( $id ) and $id > 0 ) {\n\t\t\t$current_page['id'] = $id;\n\t\t}\n\n\t\t//WooCommerce Product\n\t\tif ( class_exists( 'WooCommerce' ) ) {\n\t\t\tif ( is_product() ) {\n\t\t\t\treturn wp_parse_args( array( \"type\" => \"product\" ), $current_page );\n\t\t\t}\n\t\t}\n\n\t\t//Home Page or Front Page\n\t\tif ( is_front_page() || is_home() ) {\n\t\t\treturn wp_parse_args( array( \"type\" => \"home\" ), $current_page );\n\t\t}\n\n\t\t//attachment View\n\t\tif ( is_attachment() ) {\n\t\t\t$current_page['type'] = \"attachment\";\n\t\t}\n\n\t\t//is Archive Page\n\t\tif ( is_archive() ) {\n\t\t\t$current_page['type'] = \"archive\";\n\t\t}\n\n\t\t//Single Post Fro All Post Type\n\t\tif ( is_singular() ) {\n\t\t\t$current_page['type'] = \"post\";\n\t\t}\n\n\t\t//Single Page\n\t\tif ( is_page() ) {\n\t\t\t$current_page['type'] = \"page\";\n\t\t}\n\n\t\t//Category Page\n\t\tif ( is_category() ) {\n\t\t\t$current_page['type'] = \"category\";\n\t\t}\n\n\t\t//Tag Page\n\t\tif ( is_tag() ) {\n\t\t\t$current_page['type'] = \"post_tag\";\n\t\t}\n\n\t\t//is Custom Term From Taxonomy\n\t\tif ( is_tax() ) {\n\t\t\t$current_page['type'] = \"tax\";\n\t\t}\n\n\t\t//is Author Page\n\t\tif ( is_author() ) {\n\t\t\t$current_page['type'] = \"author\";\n\t\t}\n\n\t\t//is search page\n\t\t$search_query = filter_var( get_search_query( false ), FILTER_SANITIZE_STRING );\n\t\tif ( trim( $search_query ) != \"\" ) {\n\t\t\treturn array( \"type\" => \"search\", \"id\" => 0, \"search_query\" => $search_query );\n\t\t}\n\n\t\t//is 404 Page\n\t\tif ( is_404() ) {\n\t\t\t$current_page['type'] = \"404\";\n\t\t}\n\n\t\t// Add WordPress Feed\n\t\tif ( is_feed() ) {\n\t\t\t$current_page['type'] = \"feed\";\n\t\t}\n\n\t\t// Add WordPress Login Page\n\t\tif ( Helper::is_login_page() ) {\n\t\t\t$current_page['type'] = \"loginpage\";\n\t\t}\n\n\t\treturn apply_filters( 'wp_statistics_current_page', $current_page );\n\t}\n\n\t/**\n\t * Check Track All Page WP-Statistics\n\t *\n\t * @return bool\n\t */\n\tpublic static function is_track_all_page() {\n\t\treturn apply_filters( 'wp_statistics_track_all_pages', Option::get( 'track_all_pages' ) || is_single() || is_page() || is_front_page() );\n\t}\n\n\t/**\n\t * Get Page Url\n\t *\n\t * @return bool|mixed|string\n\t */\n\tpublic static function get_page_uri() {\n\n\t\t// Get the site's path from the URL.\n\t\t$site_uri     = parse_url( site_url(), PHP_URL_PATH );\n\t\t$site_uri_len = strlen( $site_uri );\n\n\t\t// Get the site's path from the URL.\n\t\t$home_uri     = parse_url( home_url(), PHP_URL_PATH );\n\t\t$home_uri_len = strlen( $home_uri );\n\n\t\t// Get the current page URI.\n\t\t$page_uri = $_SERVER[\"REQUEST_URI\"];\n\n\t\t/*\n\t\t * We need to check which URI is longer in case one contains the other.\n\t\t * For example home_uri might be \"/site/wp\" and site_uri might be \"/site\".\n\t\t * In that case we want to check to see if the page_uri starts with \"/site/wp\" before\n\t\t * we check for \"/site\", but in the reverse case, we need to swap the order of the check.\n\t\t */\n\t\tif ( $site_uri_len > $home_uri_len ) {\n\t\t\tif ( substr( $page_uri, 0, $site_uri_len ) == $site_uri ) {\n\t\t\t\t$page_uri = substr( $page_uri, $site_uri_len );\n\t\t\t}\n\n\t\t\tif ( substr( $page_uri, 0, $home_uri_len ) == $home_uri ) {\n\t\t\t\t$page_uri = substr( $page_uri, $home_uri_len );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( substr( $page_uri, 0, $home_uri_len ) == $home_uri ) {\n\t\t\t\t$page_uri = substr( $page_uri, $home_uri_len );\n\t\t\t}\n\n\t\t\tif ( substr( $page_uri, 0, $site_uri_len ) == $site_uri ) {\n\t\t\t\t$page_uri = substr( $page_uri, $site_uri_len );\n\t\t\t}\n\t\t}\n\n\t\t//Sanitize Xss injection\n\t\t$page_uri = filter_var( $page_uri, FILTER_SANITIZE_STRING );\n\n\t\t// If we're at the root (aka the URI is blank), let's make sure to indicate it.\n\t\tif ( $page_uri == '' ) {\n\t\t\t$page_uri = '/';\n\t\t}\n\n\t\treturn apply_filters( 'wp_statistics_page_uri', $page_uri );\n\t}\n\n\t/**\n\t * Sanitize Page Url For Push to Database\n\t */\n\tpublic static function sanitize_page_uri() {\n\n\t\t// Get Current WordPress Page\n\t\t$current_page = self::get_page_type();\n\n\t\t// Get the current page URI.\n\t\t$page_uri = Pages::get_page_uri();\n\n\t\t// Get String Search Wordpress\n\t\tif ( array_key_exists( \"search_query\", $current_page ) and ! empty( $current_page[\"search_query\"] ) ) {\n\t\t\t$page_uri = \"?s=\" . $current_page['search_query'];\n\t\t}\n\n\t\t// Sanitize for WordPress Login Page\n\t\tif ( $current_page['type'] == \"loginpage\" ) {\n\t\t\t$page_uri = Helper::RemoveQueryStringUrl( $page_uri );\n\t\t}\n\n\t\t// Check Strip Url Parameter\n\t\tif ( Option::get( 'strip_uri_parameters' ) and array_key_exists( \"search_query\", $current_page ) === false ) {\n\t\t\t$temp = explode( '?', $page_uri );\n\t\t\tif ( $temp !== false ) {\n\t\t\t\t$page_uri = $temp[0];\n\t\t\t}\n\t\t}\n\n\t\t// Limit the URI length to 255 characters, otherwise we may overrun the SQL field size.\n\t\treturn substr( $page_uri, 0, 255 );\n\t}\n\n\t/**\n\t * Record Page in Database\n\t */\n\tpublic static function record() {\n\t\tglobal $wpdb;\n\n\t\t// Get Current WordPress Page\n\t\t$current_page = self::get_page_type();\n\n\t\t// If we didn't find a page id, we don't have anything else to do.\n\t\tif ( $current_page['type'] == \"unknown\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Get Page uri\n\t\t$page_uri = self::sanitize_page_uri();\n\n\t\t// Check if we have already been to this page today.\n\t\t$exist = $wpdb->get_row( \"SELECT `page_id` FROM `\" . DB::table( 'pages' ) . \"` WHERE `date` = '\" . TimeZone::getCurrentDate( 'Y-m-d' ) . \"' \" . ( array_key_exists( \"search_query\", $current_page ) === true ? \"AND `uri` = '\" . $page_uri . \"'\" : \"\" ) . \"AND `type` = '{$current_page['type']}' AND `id` = {$current_page['id']}\", ARRAY_A );\n\n\t\t// Update Exist Page\n\t\tif ( null !== $exist ) {\n\n\t\t\t$wpdb->query( $wpdb->prepare( \"UPDATE `\" . DB::table( 'pages' ) . \"` SET `count` = `count` + 1 WHERE `date` = '\" . TimeZone::getCurrentDate( 'Y-m-d' ) . \"' \" . ( array_key_exists( \"search_query\", $current_page ) === true ? \"AND `uri` = '\" . $page_uri . \"'\" : \"\" ) . \"AND `type` = '{$current_page['type']}' AND `id` = %d\", $current_page['id'] ) );\n\t\t\t$page_id = $exist['page_id'];\n\n\t\t} else {\n\n\t\t\t// Prepare Pages Data\n\t\t\t$pages = array(\n\t\t\t\t'uri'   => $page_uri,\n\t\t\t\t'date'  => TimeZone::getCurrentDate( 'Y-m-d' ),\n\t\t\t\t'count' => 1,\n\t\t\t\t'id'    => $current_page['id'],\n\t\t\t\t'type'  => $current_page['type']\n\t\t\t);\n\t\t\t$pages = apply_filters( 'wp_statistics_pages_information', $pages );\n\n\t\t\t// Added to DB\n\t\t\t$page_id = self::save_page( $pages );\n\t\t}\n\n\t\treturn ( isset( $page_id ) ? $page_id : false );\n\t}\n\n\t/**\n\t * Add new row to Pages Table\n\t *\n\t * @param array $page\n\t * @return int\n\t */\n\tpublic static function save_page( $page = array() ) {\n\t\tglobal $wpdb;\n\n\t\t# Add Filter Insert ignore\n\t\tadd_filter( 'query', array( '\\WP_STATISTICS\\DB', 'insert_ignore' ), 10 );\n\n\t\t# Save to WordPress Database\n\t\t$wpdb->insert( DB::table( 'pages' ), $page );\n\n\t\t# Get Page ID\n\t\t$page_id = $wpdb->insert_id;\n\n\t\t# Remove ignore filter\n\t\tremove_filter( 'query', array( '\\WP_STATISTICS\\DB', 'insert_ignore' ), 10 );\n\n\t\t# Do Action After Save New Visitor\n\t\tdo_action( 'wp_statistics_save_page', $page_id, $page );\n\n\t\treturn $page_id;\n\t}\n\n\t/**\n\t * Get Page information\n\t *\n\t * @param $page_id\n\t * @param string $type\n\t * @return array\n\t */\n\tpublic static function get_page_info( $page_id, $type = 'post' ) {\n\n\t\t//Create Empty Object\n\t\t$arg      = array();\n\t\t$defaults = array(\n\t\t\t'link'      => '',\n\t\t\t'edit_link' => '',\n\t\t\t'object_id' => $page_id,\n\t\t\t'title'     => '-',\n\t\t\t'meta'      => array()\n\t\t);\n\n\t\tif ( ! empty( $type ) ) {\n\t\t\tswitch ( $type ) {\n\t\t\t\tcase \"product\":\n\t\t\t\tcase \"attachment\":\n\t\t\t\tcase \"post\":\n\t\t\t\tcase \"page\":\n\t\t\t\t\t$arg = array(\n\t\t\t\t\t\t'title'     => esc_html( get_the_title( $page_id ) ),\n\t\t\t\t\t\t'link'      => get_the_permalink( $page_id ),\n\t\t\t\t\t\t'edit_link' => get_edit_post_link( $page_id ),\n\t\t\t\t\t\t'meta'      => array(\n\t\t\t\t\t\t\t'post_type' => get_post_type( $page_id )\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"category\":\n\t\t\t\tcase \"post_tag\":\n\t\t\t\tcase \"tax\":\n\t\t\t\t\t$term = get_term( $page_id );\n\t\t\t\t\t$arg  = array(\n\t\t\t\t\t\t'title'     => esc_html( $term->name ),\n\t\t\t\t\t\t'link'      => ( is_wp_error( get_term_link( $page_id ) ) === true ? '' : get_term_link( $page_id ) ),\n\t\t\t\t\t\t'edit_link' => get_edit_term_link( $page_id ),\n\t\t\t\t\t\t'meta'      => array(\n\t\t\t\t\t\t\t'taxonomy'         => $term->taxonomy,\n\t\t\t\t\t\t\t'term_taxonomy_id' => $term->term_taxonomy_id,\n\t\t\t\t\t\t\t'count'            => $term->count,\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"home\":\n\t\t\t\t\t$arg = array(\n\t\t\t\t\t\t'title' => __( 'Home Page', 'wp-statistics' ),\n\t\t\t\t\t\t'link'  => get_site_url()\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"author\":\n\t\t\t\t\t$user_info = get_userdata( $page_id );\n\t\t\t\t\t$arg       = array(\n\t\t\t\t\t\t'title'     => ( $user_info->display_name != \"\" ? esc_html( $user_info->display_name ) : esc_html( $user_info->first_name . ' ' . $user_info->last_name ) ),\n\t\t\t\t\t\t'link'      => get_author_posts_url( $page_id ),\n\t\t\t\t\t\t'edit_link' => get_edit_user_link( $page_id ),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"feed\":\n\t\t\t\t\t$result['title'] = __( 'Feed', 'wp-statistics' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"loginpage\":\n\t\t\t\t\t$result['title'] = __( 'Login Page', 'wp-statistics' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"search\":\n\t\t\t\t\t$result['title'] = __( 'Search Page', 'wp-statistics' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"404\":\n\t\t\t\t\t$result['title'] = __( '404 not found', 'wp-statistics' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"archive\":\n\t\t\t\t\t$result['title'] = __( 'Post Archive', 'wp-statistics' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn wp_parse_args( $arg, $defaults );\n\t}\n\n\t/**\n\t * Get Top number of Hits Pages\n\t *\n\t * @param array $args\n\t * @return array\n\t */\n\tpublic static function getTop( $args = array() ) {\n\t\tglobal $wpdb;\n\n\t\t// Define the array of defaults\n\t\t$defaults = array(\n\t\t\t'per_page' => 10,\n\t\t\t'paged'    => 1\n\t\t);\n\t\t$args     = wp_parse_args( $args, $defaults );\n\n\t\t// Get List Of Pages\n\t\t$list   = array();\n\t\t$result = $wpdb->get_results( \"SELECT `pages`.`uri`,`pages`.`id`,`pages`.`type`, SUM(`pages`.`count`) + IFNULL(`historical`.`value`, 0) AS `count_sum` FROM `\" . DB::table( 'pages' ) . \"` `pages` LEFT JOIN `\" . DB::table( 'historical' ) . \"` `historical` ON `pages`.`uri`=`historical`.`uri` AND `historical`.`category`='uri' GROUP BY `uri` ORDER BY `count_sum` DESC LIMIT \" . ( $args['paged'] - 1 ) * $args['per_page'] . \",\" . $args['per_page'] );\n\t\tforeach ( $result as $item ) {\n\n\t\t\t// Lookup the post title.\n\t\t\t$page_info = Pages::get_page_info( $item->id, $item->type );\n\n\t\t\t// Push to list\n\t\t\t$list[] = array(\n\t\t\t\t'title'     => $page_info['title'],\n\t\t\t\t'link'      => $page_info['link'],\n\t\t\t\t'str_url'   => htmlentities( urldecode( $item->uri ), ENT_QUOTES ),\n\t\t\t\t'hits_page' => Menus::admin_url( 'pages', array( 'page-uri' => htmlentities( $item->uri, ENT_QUOTES ) ) ), # Convert to page-id in next Version [//TODO]\n\t\t\t\t'number'    => number_format_i18n( $item->count_sum )\n\t\t\t);\n\t\t}\n\n\t\treturn $list;\n\t}\n\n\t/**\n\t * Count Number Page in DB Table\n\t *\n\t * @param string $group_by\n\t * @return mixed\n\t */\n\tpublic static function TotalCount( $group_by = 'uri' ) {\n\t\tglobal $wpdb;\n\t\treturn $wpdb->get_var( \"SELECT COUNT(*) FROM `\" . DB::table( 'pages' ) . \"` `pages` GROUP BY `{$group_by}`\" );\n\t}\n}"], "fixing_code": ["<?php\n\nnamespace WP_STATISTICS;\n\nclass Pages {\n\t/**\n\t * Check Active Record Pages\n\t *\n\t * @return mixed\n\t */\n\tpublic static function active() {\n\t\treturn ( has_filter( 'wp_statistics_active_pages' ) ) ? apply_filters( 'wp_statistics_active_pages', true ) : Option::get( 'pages' );\n\t}\n\n\t/**\n\t * Get WordPress Page Type\n\t */\n\tpublic static function get_page_type() {\n\n\t\t//Set Default Option\n\t\t$current_page = array( \"type\" => \"unknown\", \"id\" => 0 );\n\n\t\t//Check Query object\n\t\t$id = get_queried_object_id();\n\t\tif ( is_numeric( $id ) and $id > 0 ) {\n\t\t\t$current_page['id'] = $id;\n\t\t}\n\n\t\t//WooCommerce Product\n\t\tif ( class_exists( 'WooCommerce' ) ) {\n\t\t\tif ( is_product() ) {\n\t\t\t\treturn wp_parse_args( array( \"type\" => \"product\" ), $current_page );\n\t\t\t}\n\t\t}\n\n\t\t//Home Page or Front Page\n\t\tif ( is_front_page() || is_home() ) {\n\t\t\treturn wp_parse_args( array( \"type\" => \"home\" ), $current_page );\n\t\t}\n\n\t\t//attachment View\n\t\tif ( is_attachment() ) {\n\t\t\t$current_page['type'] = \"attachment\";\n\t\t}\n\n\t\t//is Archive Page\n\t\tif ( is_archive() ) {\n\t\t\t$current_page['type'] = \"archive\";\n\t\t}\n\n\t\t//Single Post Fro All Post Type\n\t\tif ( is_singular() ) {\n\t\t\t$current_page['type'] = \"post\";\n\t\t}\n\n\t\t//Single Page\n\t\tif ( is_page() ) {\n\t\t\t$current_page['type'] = \"page\";\n\t\t}\n\n\t\t//Category Page\n\t\tif ( is_category() ) {\n\t\t\t$current_page['type'] = \"category\";\n\t\t}\n\n\t\t//Tag Page\n\t\tif ( is_tag() ) {\n\t\t\t$current_page['type'] = \"post_tag\";\n\t\t}\n\n\t\t//is Custom Term From Taxonomy\n\t\tif ( is_tax() ) {\n\t\t\t$current_page['type'] = \"tax\";\n\t\t}\n\n\t\t//is Author Page\n\t\tif ( is_author() ) {\n\t\t\t$current_page['type'] = \"author\";\n\t\t}\n\n\t\t//is search page\n\t\t$search_query = filter_var( get_search_query( false ), FILTER_SANITIZE_STRING );\n\t\tif ( trim( $search_query ) != \"\" ) {\n\t\t\treturn array( \"type\" => \"search\", \"id\" => 0, \"search_query\" => $search_query );\n\t\t}\n\n\t\t//is 404 Page\n\t\tif ( is_404() ) {\n\t\t\t$current_page['type'] = \"404\";\n\t\t}\n\n\t\t// Add WordPress Feed\n\t\tif ( is_feed() ) {\n\t\t\t$current_page['type'] = \"feed\";\n\t\t}\n\n\t\t// Add WordPress Login Page\n\t\tif ( Helper::is_login_page() ) {\n\t\t\t$current_page['type'] = \"loginpage\";\n\t\t}\n\n\t\treturn apply_filters( 'wp_statistics_current_page', $current_page );\n\t}\n\n\t/**\n\t * Check Track All Page WP-Statistics\n\t *\n\t * @return bool\n\t */\n\tpublic static function is_track_all_page() {\n\t\treturn apply_filters( 'wp_statistics_track_all_pages', Option::get( 'track_all_pages' ) || is_single() || is_page() || is_front_page() );\n\t}\n\n\t/**\n\t * Get Page Url\n\t *\n\t * @return bool|mixed|string\n\t */\n\tpublic static function get_page_uri() {\n\n\t\t// Get the site's path from the URL.\n\t\t$site_uri     = parse_url( site_url(), PHP_URL_PATH );\n\t\t$site_uri_len = strlen( $site_uri );\n\n\t\t// Get the site's path from the URL.\n\t\t$home_uri     = parse_url( home_url(), PHP_URL_PATH );\n\t\t$home_uri_len = strlen( $home_uri );\n\n\t\t// Get the current page URI.\n\t\t$page_uri = $_SERVER[\"REQUEST_URI\"];\n\n\t\t/*\n\t\t * We need to check which URI is longer in case one contains the other.\n\t\t * For example home_uri might be \"/site/wp\" and site_uri might be \"/site\".\n\t\t * In that case we want to check to see if the page_uri starts with \"/site/wp\" before\n\t\t * we check for \"/site\", but in the reverse case, we need to swap the order of the check.\n\t\t */\n\t\tif ( $site_uri_len > $home_uri_len ) {\n\t\t\tif ( substr( $page_uri, 0, $site_uri_len ) == $site_uri ) {\n\t\t\t\t$page_uri = substr( $page_uri, $site_uri_len );\n\t\t\t}\n\n\t\t\tif ( substr( $page_uri, 0, $home_uri_len ) == $home_uri ) {\n\t\t\t\t$page_uri = substr( $page_uri, $home_uri_len );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( substr( $page_uri, 0, $home_uri_len ) == $home_uri ) {\n\t\t\t\t$page_uri = substr( $page_uri, $home_uri_len );\n\t\t\t}\n\n\t\t\tif ( substr( $page_uri, 0, $site_uri_len ) == $site_uri ) {\n\t\t\t\t$page_uri = substr( $page_uri, $site_uri_len );\n\t\t\t}\n\t\t}\n\n\t\t//Sanitize Xss injection\n\t\t$page_uri = filter_var( $page_uri, FILTER_SANITIZE_STRING );\n\n\t\t// If we're at the root (aka the URI is blank), let's make sure to indicate it.\n\t\tif ( $page_uri == '' ) {\n\t\t\t$page_uri = '/';\n\t\t}\n\n\t\treturn apply_filters( 'wp_statistics_page_uri', $page_uri );\n\t}\n\n\t/**\n\t * Sanitize Page Url For Push to Database\n\t */\n\tpublic static function sanitize_page_uri() {\n\n\t\t// Get Current WordPress Page\n\t\t$current_page = self::get_page_type();\n\n\t\t// Get the current page URI.\n\t\t$page_uri = Pages::get_page_uri();\n\n\t\t// Get String Search Wordpress\n\t\tif ( array_key_exists( \"search_query\", $current_page ) and ! empty( $current_page[\"search_query\"] ) ) {\n\t\t\t$page_uri = \"?s=\" . $current_page['search_query'];\n\t\t}\n\n\t\t// Sanitize for WordPress Login Page\n\t\tif ( $current_page['type'] == \"loginpage\" ) {\n\t\t\t$page_uri = Helper::RemoveQueryStringUrl( $page_uri );\n\t\t}\n\n\t\t// Check Strip Url Parameter\n\t\tif ( Option::get( 'strip_uri_parameters' ) and array_key_exists( \"search_query\", $current_page ) === false ) {\n\t\t\t$temp = explode( '?', $page_uri );\n\t\t\tif ( $temp !== false ) {\n\t\t\t\t$page_uri = $temp[0];\n\t\t\t}\n\t\t}\n\n\t\t// Limit the URI length to 255 characters, otherwise we may overrun the SQL field size.\n\t\treturn substr( $page_uri, 0, 255 );\n\t}\n\n\t/**\n\t * Record Page in Database\n\t */\n\tpublic static function record() {\n\t\tglobal $wpdb;\n\n\t\t// Get Current WordPress Page\n\t\t$current_page = self::get_page_type();\n\n\t\t// If we didn't find a page id, we don't have anything else to do.\n\t\tif ( $current_page['type'] == \"unknown\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Get Page uri\n\t\t$page_uri = self::sanitize_page_uri();\n\n\t\t// Check if we have already been to this page today.\n\t\t$exist = $wpdb->get_row( \"SELECT `page_id` FROM `\" . DB::table( 'pages' ) . \"` WHERE `date` = '\" . TimeZone::getCurrentDate( 'Y-m-d' ) . \"' \" . ( array_key_exists( \"search_query\", $current_page ) === true ? \"AND `uri` = '\" . esc_sql( $page_uri ) . \"'\" : \"\" ) . \"AND `type` = '{$current_page['type']}' AND `id` = {$current_page['id']}\", ARRAY_A );\n\n\t\t// Update Exist Page\n\t\tif ( null !== $exist ) {\n\n\t\t\t$wpdb->query( $wpdb->prepare( \"UPDATE `\" . DB::table( 'pages' ) . \"` SET `count` = `count` + 1 WHERE `date` = '\" . TimeZone::getCurrentDate( 'Y-m-d' ) . \"' \" . ( array_key_exists( \"search_query\", $current_page ) === true ? \"AND `uri` = '\" . esc_sql( $page_uri ) . \"'\" : \"\" ) . \"AND `type` = '{$current_page['type']}' AND `id` = %d\", $current_page['id'] ) );\n\t\t\t$page_id = $exist['page_id'];\n\n\t\t} else {\n\n\t\t\t// Prepare Pages Data\n\t\t\t$pages = array(\n\t\t\t\t'uri'   => $page_uri,\n\t\t\t\t'date'  => TimeZone::getCurrentDate( 'Y-m-d' ),\n\t\t\t\t'count' => 1,\n\t\t\t\t'id'    => $current_page['id'],\n\t\t\t\t'type'  => $current_page['type']\n\t\t\t);\n\t\t\t$pages = apply_filters( 'wp_statistics_pages_information', $pages );\n\n\t\t\t// Added to DB\n\t\t\t$page_id = self::save_page( $pages );\n\t\t}\n\n\t\treturn ( isset( $page_id ) ? $page_id : false );\n\t}\n\n\t/**\n\t * Add new row to Pages Table\n\t *\n\t * @param array $page\n\t * @return int\n\t */\n\tpublic static function save_page( $page = array() ) {\n\t\tglobal $wpdb;\n\n\t\t# Add Filter Insert ignore\n\t\tadd_filter( 'query', array( '\\WP_STATISTICS\\DB', 'insert_ignore' ), 10 );\n\n\t\t# Save to WordPress Database\n\t\t$wpdb->insert( DB::table( 'pages' ), $page );\n\n\t\t# Get Page ID\n\t\t$page_id = $wpdb->insert_id;\n\n\t\t# Remove ignore filter\n\t\tremove_filter( 'query', array( '\\WP_STATISTICS\\DB', 'insert_ignore' ), 10 );\n\n\t\t# Do Action After Save New Visitor\n\t\tdo_action( 'wp_statistics_save_page', $page_id, $page );\n\n\t\treturn $page_id;\n\t}\n\n\t/**\n\t * Get Page information\n\t *\n\t * @param $page_id\n\t * @param string $type\n\t * @return array\n\t */\n\tpublic static function get_page_info( $page_id, $type = 'post' ) {\n\n\t\t//Create Empty Object\n\t\t$arg      = array();\n\t\t$defaults = array(\n\t\t\t'link'      => '',\n\t\t\t'edit_link' => '',\n\t\t\t'object_id' => $page_id,\n\t\t\t'title'     => '-',\n\t\t\t'meta'      => array()\n\t\t);\n\n\t\tif ( ! empty( $type ) ) {\n\t\t\tswitch ( $type ) {\n\t\t\t\tcase \"product\":\n\t\t\t\tcase \"attachment\":\n\t\t\t\tcase \"post\":\n\t\t\t\tcase \"page\":\n\t\t\t\t\t$arg = array(\n\t\t\t\t\t\t'title'     => esc_html( get_the_title( $page_id ) ),\n\t\t\t\t\t\t'link'      => get_the_permalink( $page_id ),\n\t\t\t\t\t\t'edit_link' => get_edit_post_link( $page_id ),\n\t\t\t\t\t\t'meta'      => array(\n\t\t\t\t\t\t\t'post_type' => get_post_type( $page_id )\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"category\":\n\t\t\t\tcase \"post_tag\":\n\t\t\t\tcase \"tax\":\n\t\t\t\t\t$term = get_term( $page_id );\n\t\t\t\t\t$arg  = array(\n\t\t\t\t\t\t'title'     => esc_html( $term->name ),\n\t\t\t\t\t\t'link'      => ( is_wp_error( get_term_link( $page_id ) ) === true ? '' : get_term_link( $page_id ) ),\n\t\t\t\t\t\t'edit_link' => get_edit_term_link( $page_id ),\n\t\t\t\t\t\t'meta'      => array(\n\t\t\t\t\t\t\t'taxonomy'         => $term->taxonomy,\n\t\t\t\t\t\t\t'term_taxonomy_id' => $term->term_taxonomy_id,\n\t\t\t\t\t\t\t'count'            => $term->count,\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"home\":\n\t\t\t\t\t$arg = array(\n\t\t\t\t\t\t'title' => __( 'Home Page', 'wp-statistics' ),\n\t\t\t\t\t\t'link'  => get_site_url()\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"author\":\n\t\t\t\t\t$user_info = get_userdata( $page_id );\n\t\t\t\t\t$arg       = array(\n\t\t\t\t\t\t'title'     => ( $user_info->display_name != \"\" ? esc_html( $user_info->display_name ) : esc_html( $user_info->first_name . ' ' . $user_info->last_name ) ),\n\t\t\t\t\t\t'link'      => get_author_posts_url( $page_id ),\n\t\t\t\t\t\t'edit_link' => get_edit_user_link( $page_id ),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"feed\":\n\t\t\t\t\t$result['title'] = __( 'Feed', 'wp-statistics' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"loginpage\":\n\t\t\t\t\t$result['title'] = __( 'Login Page', 'wp-statistics' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"search\":\n\t\t\t\t\t$result['title'] = __( 'Search Page', 'wp-statistics' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"404\":\n\t\t\t\t\t$result['title'] = __( '404 not found', 'wp-statistics' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"archive\":\n\t\t\t\t\t$result['title'] = __( 'Post Archive', 'wp-statistics' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn wp_parse_args( $arg, $defaults );\n\t}\n\n\t/**\n\t * Get Top number of Hits Pages\n\t *\n\t * @param array $args\n\t * @return array\n\t */\n\tpublic static function getTop( $args = array() ) {\n\t\tglobal $wpdb;\n\n\t\t// Define the array of defaults\n\t\t$defaults = array(\n\t\t\t'per_page' => 10,\n\t\t\t'paged'    => 1\n\t\t);\n\t\t$args     = wp_parse_args( $args, $defaults );\n\n\t\t// Get List Of Pages\n\t\t$list   = array();\n\t\t$result = $wpdb->get_results( \"SELECT `pages`.`uri`,`pages`.`id`,`pages`.`type`, SUM(`pages`.`count`) + IFNULL(`historical`.`value`, 0) AS `count_sum` FROM `\" . DB::table( 'pages' ) . \"` `pages` LEFT JOIN `\" . DB::table( 'historical' ) . \"` `historical` ON `pages`.`uri`=`historical`.`uri` AND `historical`.`category`='uri' GROUP BY `uri` ORDER BY `count_sum` DESC LIMIT \" . ( $args['paged'] - 1 ) * $args['per_page'] . \",\" . $args['per_page'] );\n\t\tforeach ( $result as $item ) {\n\n\t\t\t// Lookup the post title.\n\t\t\t$page_info = Pages::get_page_info( $item->id, $item->type );\n\n\t\t\t// Push to list\n\t\t\t$list[] = array(\n\t\t\t\t'title'     => $page_info['title'],\n\t\t\t\t'link'      => $page_info['link'],\n\t\t\t\t'str_url'   => htmlentities( urldecode( $item->uri ), ENT_QUOTES ),\n\t\t\t\t'hits_page' => Menus::admin_url( 'pages', array( 'page-uri' => htmlentities( $item->uri, ENT_QUOTES ) ) ), # Convert to page-id in next Version [//TODO]\n\t\t\t\t'number'    => number_format_i18n( $item->count_sum )\n\t\t\t);\n\t\t}\n\n\t\treturn $list;\n\t}\n\n\t/**\n\t * Count Number Page in DB Table\n\t *\n\t * @param string $group_by\n\t * @return mixed\n\t */\n\tpublic static function TotalCount( $group_by = 'uri' ) {\n\t\tglobal $wpdb;\n\t\treturn $wpdb->get_var( \"SELECT COUNT(*) FROM `\" . DB::table( 'pages' ) . \"` `pages` GROUP BY `{$group_by}`\" );\n\t}\n}"], "filenames": ["includes/class-wp-statistics-pages.php"], "buggy_code_start_loc": [218], "buggy_code_end_loc": [224], "fixing_code_start_loc": [218], "fixing_code_end_loc": [224], "type": "CWE-89", "message": "An issue was discovered in the VeronaLabs wp-statistics plugin before 12.6.7 for WordPress. The v1/hit endpoint of the API, when the non-default \"use cache plugin\" setting is enabled, is vulnerable to unauthenticated blind SQL Injection.", "other": {"cve": {"id": "CVE-2019-13275", "sourceIdentifier": "cve@mitre.org", "published": "2019-07-04T19:15:10.643", "lastModified": "2019-07-10T13:50:22.623", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in the VeronaLabs wp-statistics plugin before 12.6.7 for WordPress. The v1/hit endpoint of the API, when the non-default \"use cache plugin\" setting is enabled, is vulnerable to unauthenticated blind SQL Injection."}, {"lang": "es", "value": "Se ha descubierto un fallo en el plugin VeronaLabs wp-statistics en versiones anteriores a la 12.6.7 para WordPress. El punto final v1/hit de la API, cuando est\u00e1 habilitada la configuraci\u00f3n no predeterminada \"use cache plugin\", es vulnerable a una inyecci\u00f3n SQL ciega no autenticados."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:veronalabs:wp_statistics:*:*:*:*:*:wordpress:*:*", "versionEndIncluding": "12.6.6", "matchCriteriaId": "F8DB9B6A-EBA7-4C01-809B-F7EF3E01BA31"}]}]}], "references": [{"url": "https://github.com/wp-statistics/wp-statistics/commit/bd46721b97794a1b1520e24ff5023b6da738dd75", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://wordpress.org/plugins/wp-statistics/#developers", "source": "cve@mitre.org", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/9412", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wp-statistics/wp-statistics/commit/bd46721b97794a1b1520e24ff5023b6da738dd75"}}