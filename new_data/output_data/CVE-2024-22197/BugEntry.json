{"buggy_code": ["package system\n\nimport (\n    \"github.com/0xJacky/Nginx-UI/api\"\n    \"github.com/0xJacky/Nginx-UI/settings\"\n    \"github.com/gin-gonic/gin\"\n    \"net/http\"\n)\n\nfunc GetSettings(c *gin.Context) {\n    c.JSON(http.StatusOK, gin.H{\n        \"server\": settings.ServerSettings,\n        \"nginx\":  settings.NginxSettings,\n        \"openai\": settings.OpenAISettings,\n    })\n}\n\nfunc SaveSettings(c *gin.Context) {\n    var json struct {\n        Server settings.Server `json:\"server\"`\n        Nginx  settings.Nginx  `json:\"nginx\"`\n        Openai settings.OpenAI `json:\"openai\"`\n    }\n\n    if !api.BindAndValid(c, &json) {\n        return\n    }\n\n    settings.ServerSettings = json.Server\n    settings.NginxSettings = json.Nginx\n    settings.OpenAISettings = json.Openai\n\n    settings.ReflectFrom()\n\n    err := settings.Save()\n    if err != nil {\n        api.ErrHandler(c, err)\n        return\n    }\n\n    GetSettings(c)\n}\n", "package settings\n\ntype Nginx struct {\n\tAccessLogPath string `json:\"access_log_path\"`\n\tErrorLogPath  string `json:\"error_log_path\"`\n\tConfigDir     string `json:\"config_dir\"`\n\tPIDPath       string `json:\"pid_path\"`\n\tTestConfigCmd string `json:\"test_config_cmd\"`\n\tReloadCmd     string `json:\"reload_cmd\"`\n\tRestartCmd    string `json:\"restart_cmd\"`\n}\n\nvar NginxSettings = Nginx{\n\tAccessLogPath: \"\",\n\tErrorLogPath:  \"\",\n}\n", "package settings\n\ntype Server struct {\n\tHttpHost          string `json:\"http_host\"`\n\tHttpPort          string `json:\"http_port\"`\n\tRunMode           string `json:\"run_mode\"`\n\tJwtSecret         string `json:\"jwt_secret\"`\n\tNodeSecret        string `json:\"node_secret\"`\n\tHTTPChallengePort string `json:\"http_challenge_port\"`\n\tEmail             string `json:\"email\"`\n\tDatabase          string `json:\"database\"`\n\tStartCmd          string `json:\"start_cmd\"`\n\tCADir             string `json:\"ca_dir\"`\n\tDemo              bool   `json:\"demo\"`\n\tPageSize          int    `json:\"page_size\"`\n\tGithubProxy       string `json:\"github_proxy\"`\n}\n\nvar ServerSettings = Server{\n\tHttpHost:          \"0.0.0.0\",\n\tHttpPort:          \"9000\",\n\tRunMode:           \"debug\",\n\tHTTPChallengePort: \"9180\",\n\tDatabase:          \"database\",\n\tStartCmd:          \"login\",\n\tDemo:              false,\n\tPageSize:          10,\n\tCADir:             \"\",\n\tGithubProxy:       \"\",\n}\n"], "fixing_code": ["package system\n\nimport (\n\t\"github.com/0xJacky/Nginx-UI/api\"\n\t\"github.com/0xJacky/Nginx-UI/settings\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n\t\"reflect\"\n)\n\nfunc GetSettings(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H{\n\t\t\"server\": settings.ServerSettings,\n\t\t\"nginx\":  settings.NginxSettings,\n\t\t\"openai\": settings.OpenAISettings,\n\t})\n}\n\nfunc SaveSettings(c *gin.Context) {\n\tvar json struct {\n\t\tServer settings.Server `json:\"server\"`\n\t\tNginx  settings.Nginx  `json:\"nginx\"`\n\t\tOpenai settings.OpenAI `json:\"openai\"`\n\t}\n\n\tif !api.BindAndValid(c, &json) {\n\t\treturn\n\t}\n\n\t// todo: omit protected fields when binding\n\tfillSettings(&settings.ServerSettings, &json.Server)\n\tfillSettings(&settings.NginxSettings, &json.Nginx)\n\tfillSettings(&settings.OpenAISettings, &json.Openai)\n\n\tsettings.ReflectFrom()\n\n\terr := settings.Save()\n\tif err != nil {\n\t\tapi.ErrHandler(c, err)\n\t\treturn\n\t}\n\n\tGetSettings(c)\n}\n\nfunc fillSettings(targetSettings interface{}, newSettings interface{}) {\n\ts := reflect.TypeOf(targetSettings).Elem()\n\tvt := reflect.ValueOf(targetSettings).Elem()\n\tvn := reflect.ValueOf(newSettings).Elem()\n\n\t// copy the values from new to target settings if it is not protected\n\tfor i := 0; i < s.NumField(); i++ {\n\t\tif s.Field(i).Tag.Get(\"protected\") != \"true\" {\n\t\t\tvt.Field(i).Set(vn.Field(i))\n\t\t}\n\t}\n}\n", "package settings\n\ntype Nginx struct {\n\tAccessLogPath string `json:\"access_log_path\"`\n\tErrorLogPath  string `json:\"error_log_path\"`\n\tConfigDir     string `json:\"config_dir\" protected:\"true\"`\n\tPIDPath       string `json:\"pid_path\" protected:\"true\"`\n\tTestConfigCmd string `json:\"test_config_cmd\" protected:\"true\"`\n\tReloadCmd     string `json:\"reload_cmd\" protected:\"true\"`\n\tRestartCmd    string `json:\"restart_cmd\" protected:\"true\"`\n}\n\nvar NginxSettings = Nginx{\n\tAccessLogPath: \"\",\n\tErrorLogPath:  \"\",\n}\n", "package settings\n\ntype Server struct {\n\tHttpHost          string `json:\"http_host\" protected:\"true\"`\n\tHttpPort          string `json:\"http_port\" protected:\"true\"`\n\tRunMode           string `json:\"run_mode\" protected:\"true\"`\n\tJwtSecret         string `json:\"jwt_secret\" protected:\"true\"`\n\tNodeSecret        string `json:\"node_secret\" protected:\"true\"`\n\tHTTPChallengePort string `json:\"http_challenge_port\"`\n\tEmail             string `json:\"email\" protected:\"true\"`\n\tDatabase          string `json:\"database\" protected:\"true\"`\n\tStartCmd          string `json:\"start_cmd\" protected:\"true\"`\n\tCADir             string `json:\"ca_dir\"`\n\tDemo              bool   `json:\"demo\" protected:\"true\"`\n\tPageSize          int    `json:\"page_size\" protected:\"true\"`\n\tGithubProxy       string `json:\"github_proxy\"`\n}\n\nvar ServerSettings = Server{\n\tHttpHost:          \"0.0.0.0\",\n\tHttpPort:          \"9000\",\n\tRunMode:           \"debug\",\n\tHTTPChallengePort: \"9180\",\n\tDatabase:          \"database\",\n\tStartCmd:          \"login\",\n\tDemo:              false,\n\tPageSize:          10,\n\tCADir:             \"\",\n\tGithubProxy:       \"\",\n}\n"], "filenames": ["api/system/settings.go", "settings/nginx.go", "settings/server.go"], "buggy_code_start_loc": [4, 6, 4], "buggy_code_end_loc": [42, 11, 16], "fixing_code_start_loc": [4, 6, 4], "fixing_code_end_loc": [58, 11, 16], "type": "CWE-77", "message": "Nginx-ui is online statistics for Server Indicators\u200b\u200b Monitor CPU usage, memory usage, load average, and disk usage in real-time. The `Home > Preference` page exposes a small list of nginx settings such as `Nginx Access Log Path` and `Nginx Error Log Path`. However, the API also exposes `test_config_cmd`, `reload_cmd` and `restart_cmd`. While the UI doesn't allow users to modify any of these settings, it is possible to do so by sending a request to the API. This issue may lead to authenticated Remote Code Execution, Privilege Escalation, and Information Disclosure. This issue has been patched in version 2.0.0.beta.9.", "other": {"cve": {"id": "CVE-2024-22197", "sourceIdentifier": "security-advisories@github.com", "published": "2024-01-11T18:15:45.140", "lastModified": "2024-02-29T01:44:05.423", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Nginx-ui is online statistics for Server Indicators\u200b\u200b Monitor CPU usage, memory usage, load average, and disk usage in real-time. The `Home > Preference` page exposes a small list of nginx settings such as `Nginx Access Log Path` and `Nginx Error Log Path`. However, the API also exposes `test_config_cmd`, `reload_cmd` and `restart_cmd`. While the UI doesn't allow users to modify any of these settings, it is possible to do so by sending a request to the API. This issue may lead to authenticated Remote Code Execution, Privilege Escalation, and Information Disclosure. This issue has been patched in version 2.0.0.beta.9."}, {"lang": "es", "value": "Nginx-ui son estad\u00edsticas en l\u00ednea para indicadores del servidor. Supervise el uso de la CPU, el uso de la memoria, el promedio de carga y el uso del disco en tiempo real. La p\u00e1gina `Home &gt; Preference` expone una peque\u00f1a lista de configuraciones de nginx, como `Nginx Access Log Path` y `Nginx Error Log Path`. Sin embargo, la API tambi\u00e9n expone `test_config_cmd`, `reload_cmd` y `restart_cmd`. Si bien la interfaz de usuario no permite a los usuarios modificar ninguna de estas configuraciones, es posible hacerlo enviando una solicitud a la API. Este problema puede provocar una ejecuci\u00f3n remota de c\u00f3digo, una escalada de privilegios y una divulgaci\u00f3n de informaci\u00f3n autenticada. Este problema se solucion\u00f3 en la versi\u00f3n 2.0.0.beta.9."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.0", "matchCriteriaId": "B4426F94-540E-497C-AE75-04126AF12112"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "3C287A7F-66B4-406A-B87B-B954A1CA6D44"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "25DD91AC-465B-4A43-A79F-4DE47243741C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "115588C7-D947-4576-9E6C-B5AF1FCE9A29"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta4:*:*:*:*:*:*", "matchCriteriaId": "BBB20EA3-F3CF-42AF-A217-D5DF7A7ADD70"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta4_patch:*:*:*:*:*:*", "matchCriteriaId": "81A6C732-FBF2-44A8-B810-456E54B59A09"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta5:*:*:*:*:*:*", "matchCriteriaId": "8C5664E5-150E-4B4B-BA0C-420738820FF1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta5_patch:*:*:*:*:*:*", "matchCriteriaId": "7E764AA1-3060-441F-8F14-ADD165316741"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta6:*:*:*:*:*:*", "matchCriteriaId": "04A3E84F-91AA-420A-B908-3393E037AC44"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta6_patch:*:*:*:*:*:*", "matchCriteriaId": "828EAE87-24E5-4F31-B301-BA2F96BDEA42"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta6_patch2:*:*:*:*:*:*", "matchCriteriaId": "45710D36-954A-4450-B622-CB0F368DF544"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta7:*:*:*:*:*:*", "matchCriteriaId": "2B57EEFB-5518-4BD5-998A-34B6690A6F4C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta8:*:*:*:*:*:*", "matchCriteriaId": "8EDF4CEE-F24D-441B-92A8-7F5A2B41487E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nginxui:nginx_ui:2.0.0:beta8_patch:*:*:*:*:*:*", "matchCriteriaId": "F0275FDF-BAE8-4909-8991-6FCE34B8905E"}]}]}], "references": [{"url": "https://github.com/0xJacky/nginx-ui/commit/827e76c46e63c52114a62a899f61313039c754e3", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-pxmr-q2x3-9x9m", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/0xJacky/nginx-ui/commit/827e76c46e63c52114a62a899f61313039c754e3"}}