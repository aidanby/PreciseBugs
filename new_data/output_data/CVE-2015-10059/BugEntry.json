{"buggy_code": ["/**\n * Service for communication with the API.\n *  \n * @class app.api.apiService\n * @memberOf app.api\n * @example apiService.listCountries(function(response) { var countries = response.data });\t\n */\n\n/**\n * Factory to create the controller.\n * \n * @function factory\n * @memberOf app.api.apiService\n * @param {string} Service name\n * @param {fn} Service function\n * @param {$http} $http - Angulars $http object\n * @param {$localStorage} $localStorage - Interface to the local storage\n */\n\nngApp.factory('apiService', ['$http', '$localStorage',function($http, $localStorage) {\n\n\t/**\n\t * Expiration  time in seconds for each API function.\n\t * \n\t * @var {object} expirationTime - Expiration time\n\t * @memberOf app.api.apiService\n\t * @private\n\t */\n\tvar expirationTime = {\n\t\tlistCountries: 60,\n\t\tlistCities: 60,\n\t\tlistPlacesByCity: 60,\n\t};\n\n\t/**\n\t * If url in localStorage and not expired return this data,\n\t * else get data using $http request.\n\t * \n\t * @private\n\t * @function get\n\t * @memberOf app.api.apiService\n\t * @param {string} URL\n\t * @returns\n\t */\n\tvar get = function(url, fn, callback) {\n\t\tvar now = new Date(); // current date and time\n\t\tif(!$localStorage[fn] // not cached before\n\t\t\t|| !$localStorage[fn].loadTime // or: loadTime invalid\n\t\t\t||  (now - Date.parse($localStorage[fn].loadTime)) / 1000 > expirationTime[fn]) { // or: cache expired because: now - loadTime > expirationTime\n\t\t\t$http.get(url).success(function(data, status) { // get using $http, execute a function\n\t\t\t\tdata.loadTime = now; // now loaded\n\t\t\t\t$localStorage[fn] = data; // store to localStorage\n\t\t\t\tcallback($localStorage[fn]); // execute callback with data from cache and cache time\n\t\t\t}).error(function(data, status) { // failed to get data\n\t\t\t\tif(!$localStorage[fn]) { // nothing set\n\t\t\t\t\t$localStorage[fn] = { // fallback\n\t\t\t\t\t\t\tdata: {}, // no data\n\t\t\t\t\t\t\tloadTime: undefined, // undefined load time\n\t\t\t\t\t\t\tstatus: status // error status\n\t\t\t\t\t};\n\t\t\t\t} // else: use old data\n\t\t\t\tcallback($localStorage[fn]); // execute callback with fallback data from cache\n\t\t\t});\n\t\t} else { // cached and is up to date\n\t\t\tcallback($localStorage[fn]); // execute callback with data from cache and cache time\n\t\t}\t\t\n\t};\n\n\treturn {\n\t\t/**\n\t\t * URL to the API\n\t\t * @var {string} URL\n\t\t * @memberOf app.api.apiService \n\t\t */\n\t\turl: 'api/',\n\n\t\t/**\n\t\t * API-key wich should be used to communicated with the API.\n\t\t *\n\t\t * @var {string} API-key\n\t\t * @memberOf app.api.apiService\n\t\t */\n\t\tapikey: '',\n\n\t\t/**\n\t\t * Language wich should be returned by the API.\n\t\t *\n\t\t * @var {string} Language\n\t\t * @memberOf app.api.apiService\n\t\t */\n\t\tlang: 'de',\n\n\t\t/**\n\t\t * Executes a callback with a list of all countries as parameter\n\t\t *\n\t\t * @function listCountries\n\t\t * @memberOf app.api.apiService\n\t\t * @see {@link http://veganguide.org/api|vg.browse.listCountries}\n\t\t * @param {fn} callback - Function to execute\n\t\t */\n\t\tlistCountries: function(callback) {\n\t\t\tget('api/JSON_Dummies/Countries.json', 'listCountries', callback);\n\t\t\t///get(this.url + \"?apikey=\" + this.apikey + \"&lang=\" + this.lang, 'listCountries', callback);\n\t\t},\n\n\t\t/**\n\t\t * Executes a callback with a list of all cities as parameter\n\t\t *\n\t\t * @function listCities\n\t\t * @memberOf app.api.apiService\n\t\t * @see {@link http://veganguide.org/api|vg.browse.listCities}\n\t\t * @param {string} country - Cities should be in this country\n\t\t * @param {fn} callback - Function to execute\n\t\t */\n\t\tlistCities: function(country, callback) {\n\t\t\tget('api/JSON_Dummies/Cities_Germany.json', 'listCities', callback);\n\t\t\t//get('this.url + \"?apikey=\" + this.apikey + \"&lang=\" + this.lang + \"&country=\" + country', 'listCities', callback);\n\t\t},\n\n\t\t/**\n\t\t * Executes a callback with a list of all places as parameter\n\t\t *\n\t\t * @function listPlacesByCity\n\t\t * @memberOf app.api.apiService\n\t\t * @see {@link http://veganguide.org/api|vg.browse.listCities}\n\t\t * @param {string} country - Cities should be in this country\n\t\t * @param {string} city - Cities should be in this city\n\t\t * @param {fn} callback - Function to execute\n\t\t */\n\t\tlistPlacesByCity: function(country, city, callback) {\n\t\t\tget('api/JSON_Dummies/Lokale_Leipzig.json', 'listPlacesByCity',  callback);\n\t\t\t//get(this.url + \"?apikey=\" + this.apikey + \"&lang=\" + this.lang + \"&country=\" + country + \"&city=\" + city',  callback);\n\t\t}\n\t};\n}]);\n", "CACHE MANIFEST\n# rev 20150511-0746\n\nCACHE:\nassets/css/veganguide.css\nassets/lib/jquery-1.11.1.min.js\nassets/lib/jquery.mobile-1.4.5.min.css\nassets/lib/jquery.mobile-1.4.5.min.js\nassets/lib/ng-order-object-by.js\nassets/lib/angular.min.js\nassets/lib/angular-route.min.js\nassets/lib/angular-animate.min.js\nassets/lib/ng-order-object-by.js\nassets/lib/ngStorage.min.js\nassets/lib/ng-transitions.css\nassets/themes/jquery.mobile.icons.min.css\nassets/themes/veganguide.min.css\nassets/themes/images/icons-18-black.png\nassets/themes/images/icons-18-white.png\nassets/themes/images/icons-36-black.png\nassets/themes/images/icons-36-white.png\nassets/themes/images/ajax-loader.gif\nassets/css/veganguide.css\nassets/themes/veganguide.min.css\nassets/themes/jquery.mobile.icons.min.css\napp/app.module.js\napp/app.routes.js\napp/shared/jqm/jqmDirective.js\napp/shared/filter/uniqueFilter.js\napp/shared/filter/noFaultyFilter.js\napp/shared/api/apiService.js\napp/components/menu/menuController.js\napp/components/list/countries/listCountriesModel.js\napp/components/list/countries/listCountriesController.js\napp/components/list/cities/listCitiesModel.js\napp/components/list/cities/listCitiesController.js\napp/components/list/places/listPlacesModel.js\napp/components/list/places/listPlacesController.js\napp/components/menu/menuView.html\napp/components/list/countries/listCountriesView.html\napp/components/list/cities/listCitiesView.html\napp/components/list/places/listPlacesView.html\n\nNETWORK:\n*"], "fixing_code": ["/**\n * Service for communication with the API.\n *  \n * @class app.api.apiService\n * @memberOf app.api\n * @example apiService.listCountries(function(response) { var countries = response.data });\t\n */\n\n/**\n * Factory to create the controller.\n * \n * @function factory\n * @memberOf app.api.apiService\n * @param {string} Service name\n * @param {fn} Service function\n * @param {$http} $http - Angulars $http object\n * @param {$localStorage} $localStorage - Interface to the local storage\n */\n\nngApp.factory('apiService', ['$http', '$localStorage',function($http, $localStorage) {\n\n\t/**\n\t * Expiration  time in seconds for each API function.\n\t * \n\t * @var {object} expirationTime - Expiration time\n\t * @memberOf app.api.apiService\n\t * @private\n\t */\n\tvar expirationTime = {\n\t\tlistCountries: 60,\n\t\tlistCities: 60,\n\t\tlistPlacesByCity: 60,\n\t};\n\n\t/**\n\t * If url in localStorage and not expired return this data,\n\t * else get data using $http request.\n\t * \n\t * @private\n\t * @function get\n\t * @memberOf app.api.apiService\n\t * @param {string} URL\n\t * @returns nothing\n\t */\n\tvar get = function(url, fn, callback) {\n\t\tvar now = new Date(); // current date and time\n\t\tif(!$localStorage[fn] // not cached before\n\t\t\t|| !$localStorage[fn].loadTime // or: loadTime invalid\n\t\t\t||  (now - Date.parse($localStorage[fn].loadTime)) / 1000 > expirationTime[fn]) { // or: cache expired because: now - loadTime > expirationTime\n\t\t\t$http.get(url).success(function(data, status) { // get using $http, execute a function\n\t\t\t\tdata.loadTime = now; // now loaded\n\t\t\t\t$localStorage[fn] = data; // store to localStorage\n\t\t\t\tcallback($localStorage[fn]); // execute callback with data from cache and cache time\n\t\t\t}).error(function(data, status) { // failed to get data\n\t\t\t\tif(!$localStorage[fn]) { // nothing set\n\t\t\t\t\t$localStorage[fn] = { // fallback\n\t\t\t\t\t\t\tdata: {}, // no data\n\t\t\t\t\t\t\tloadTime: undefined, // undefined load time\n\t\t\t\t\t\t\tstatus: status // error status\n\t\t\t\t\t};\n\t\t\t\t} // else: use old data\n\t\t\t\tcallback($localStorage[fn]); // execute callback with fallback data from cache\n\t\t\t});\n\t\t} else { // cached and is up to date\n\t\t\tcallback($localStorage[fn]); // execute callback with data from cache and cache time\n\t\t}\t\t\n\t};\n\n\t/**\n\t * Decode the string into a safe placeholder.\n\t * If it contains unsafe characters an empty string will be returned.\n\t * \n\t * @private\n\t * @function placeholder\n\t * @memberOf app.api.apiService\n\t * @param {string} placeholder - A maybe unsafe placeholder used in an $http Request\n\t * @returns {string} Safe Placeholder\n\t */\n\tvar safe = function(placeholder) {\n\t\tvar reg = /^[a-zA-Z0-9\\-_]+$/;\n\t\tif(reg.test) {\n\t\t\treturn placeholder;\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t};\n\n\treturn {\n\t\t/**\n\t\t * URL to the API\n\t\t * @var {string} URL\n\t\t * @memberOf app.api.apiService \n\t\t */\n\t\turl: 'api/',\n\n\t\t/**\n\t\t * API-key wich should be used to communicated with the API.\n\t\t *\n\t\t * @var {string} API-key\n\t\t * @memberOf app.api.apiService\n\t\t */\n\t\tapikey: '',\n\n\t\t/**\n\t\t * Language wich should be returned by the API.\n\t\t *\n\t\t * @var {string} Language\n\t\t * @memberOf app.api.apiService\n\t\t */\n\t\tlang: 'de',\n\n\t\t/**\n\t\t * Executes a callback with a list of all countries as parameter\n\t\t *\n\t\t * @function listCountries\n\t\t * @memberOf app.api.apiService\n\t\t * @see {@link http://veganguide.org/api|vg.browse.listCountries}\n\t\t * @param {fn} callback - Function to execute\n\t\t */\n\t\tlistCountries: function(callback) {\n\t\t\tget('api/JSON_Dummies/Countries.json', 'listCountries', callback);\n\t\t\t///get(this.url + '?apikey=' + this.apikey + '&lang=' + this.lang, 'listCountries', callback);\n\t\t},\n\n\t\t/**\n\t\t * Executes a callback with a list of all cities as parameter\n\t\t *\n\t\t * @function listCities\n\t\t * @memberOf app.api.apiService\n\t\t * @see {@link http://veganguide.org/api|vg.browse.listCities}\n\t\t * @param {string} country - Cities should be in this country\n\t\t * @param {fn} callback - Function to execute\n\t\t */\n\t\tlistCities: function(country, callback) {\n\t\t\tget('api/JSON_Dummies/Cities_Germany.json', 'listCities', callback);\n\t\t\t//get(this.url + '?apikey=' + this.apikey + '&lang=' + this.lang + '&country=' + safe(country), 'listCities', callback);\n\t\t},\n\n\t\t/**\n\t\t * Executes a callback with a list of all places as parameter\n\t\t *\n\t\t * @function listPlacesByCity\n\t\t * @memberOf app.api.apiService\n\t\t * @see {@link http://veganguide.org/api|vg.browse.listCities}\n\t\t * @param {string} country - Cities should be in this country\n\t\t * @param {string} city - Cities should be in this city\n\t\t * @param {fn} callback - Function to execute\n\t\t */\n\t\tlistPlacesByCity: function(country, city, callback) {\n\t\t\tget('api/JSON_Dummies/Lokale_Leipzig.json', 'listPlacesByCity',  callback);\n\t\t\t//get(this.url + '?apikey=' + this.apikey + '&lang=' + this.lang + '&country=' + safe(country) + '&city=' + safe(city),  callback);\n\t\t}\n\t};\n}]);\n", "CACHE MANIFEST\n# rev 20150511-0827\n\nCACHE:\nassets/css/veganguide.css\nassets/lib/jquery-1.11.1.min.js\nassets/lib/jquery.mobile-1.4.5.min.css\nassets/lib/jquery.mobile-1.4.5.min.js\nassets/lib/ng-order-object-by.js\nassets/lib/angular.min.js\nassets/lib/angular-route.min.js\nassets/lib/angular-animate.min.js\nassets/lib/ng-order-object-by.js\nassets/lib/ngStorage.min.js\nassets/lib/ng-transitions.css\nassets/themes/jquery.mobile.icons.min.css\nassets/themes/veganguide.min.css\nassets/themes/images/icons-18-black.png\nassets/themes/images/icons-18-white.png\nassets/themes/images/icons-36-black.png\nassets/themes/images/icons-36-white.png\nassets/themes/images/ajax-loader.gif\nassets/css/veganguide.css\nassets/themes/veganguide.min.css\nassets/themes/jquery.mobile.icons.min.css\napp/app.module.js\napp/app.routes.js\napp/shared/jqm/jqmDirective.js\napp/shared/filter/uniqueFilter.js\napp/shared/filter/noFaultyFilter.js\napp/shared/api/apiService.js\napp/components/menu/menuController.js\napp/components/list/countries/listCountriesModel.js\napp/components/list/countries/listCountriesController.js\napp/components/list/cities/listCitiesModel.js\napp/components/list/cities/listCitiesController.js\napp/components/list/places/listPlacesModel.js\napp/components/list/places/listPlacesController.js\napp/components/menu/menuView.html\napp/components/list/countries/listCountriesView.html\napp/components/list/cities/listCitiesView.html\napp/components/list/places/listPlacesView.html\n\nNETWORK:\n*"], "filenames": ["p05-integration/app/shared/api/apiService.js", "p05-integration/cache.manifest"], "buggy_code_start_loc": [43, 2], "buggy_code_end_loc": [133, 3], "fixing_code_start_loc": [43, 2], "fixing_code_end_loc": [152, 3], "type": "CWE-79", "message": "A vulnerability has been found in s134328 Webapplication-Veganguide and classified as problematic. This vulnerability affects unknown code of the file p05-integration/app/shared/api/apiService.js. The manipulation of the argument country/city leads to cross site scripting. The attack can be initiated remotely. The name of the patch is 2aa760fa4e779e40a28206a32ac22ac10356f519. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-218416.", "other": {"cve": {"id": "CVE-2015-10059", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-17T13:15:10.330", "lastModified": "2023-01-24T19:13:30.737", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in s134328 Webapplication-Veganguide and classified as problematic. This vulnerability affects unknown code of the file p05-integration/app/shared/api/apiService.js. The manipulation of the argument country/city leads to cross site scripting. The attack can be initiated remotely. The name of the patch is 2aa760fa4e779e40a28206a32ac22ac10356f519. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-218416."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:webapplication-veganguide_project:webapplication-veganguide:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-05-11", "matchCriteriaId": "37F6B4DC-75F7-43B5-A9FC-9C68C6362438"}]}]}], "references": [{"url": "https://github.com/s134328/Webapplication-Veganguide/commit/2aa760fa4e779e40a28206a32ac22ac10356f519", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218416", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.218416", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/s134328/Webapplication-Veganguide/commit/2aa760fa4e779e40a28206a32ac22ac10356f519"}}