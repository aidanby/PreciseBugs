{"buggy_code": ["<?php\n\n$tpl = erLhcoreClassTemplate::getInstance('lhcannedmsg/showsuggester.tpl.php');\n\n$chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\n$tpl->set('chat',$chat);\n\nif ( erLhcoreClassChat::hasAccessToRead($chat) ) {\n\n    $tpl->set('keyword','');\n\n    if (isset($_GET['keyword']) && $_GET['keyword'] != '') {\n        $tpl->set('keyword',strip_tags($_GET['keyword']));\n    }\n\n    echo json_encode(array('error' => false, 'result' => $tpl->fetch()));\n}\n\nexit;\n\n?>", "<?php\n\n$tpl = erLhcoreClassTemplate::getInstance('lhcannedmsg/subject.tpl.php');\n$canned = erLhcoreClassModelCannedMsg::fetch($Params['user_parameters']['canned_id']);\n\nif ($canned instanceof erLhcoreClassModelCannedMsg)\n{\n    if (ezcInputForm::hasPostData()) {\n\n        if (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || !$currentUser->validateCSFRToken($_SERVER['HTTP_X_CSRFTOKEN'])) {\n            $response = array('error' => true, 'message' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/subject','Invalid CSRF token'));\n        }\n\n        $db = ezcDbInstance::get();\n        $db->beginTransaction();\n        $response = array();\n        if (is_numeric($Params['user_parameters_unordered']['subject'])) {\n            if ($Params['user_parameters_unordered']['status'] == 'true') {\n                $subjectChat = erLhcoreClassModelCannedMsgSubject::findOne(array('filter' => array('canned_id' => $canned->id, 'subject_id' => $Params['user_parameters_unordered']['subject'])));\n\n                if (!($subjectChat instanceof erLhcoreClassModelCannedMsgSubject)) {\n                    $subjectChat = new erLhcoreClassModelCannedMsgSubject();\n                }\n\n                $subjectChat->canned_id = $canned->id;\n                $subjectChat->subject_id = $Params['user_parameters_unordered']['subject'];\n                $subjectChat->saveThis();\n\n                $response = array('error' => false, 'message' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/subject','Subject selected!'));\n\n            } else {\n                $subjectChat = erLhcoreClassModelCannedMsgSubject::findOne(array('filter' => array('canned_id' => $canned->id, 'subject_id' => $Params['user_parameters_unordered']['subject'])));\n\n                if ($subjectChat instanceof erLhcoreClassModelCannedMsgSubject) {\n                    $subjectChat->removeThis();\n                }\n\n                $response = array('error' => false, 'message' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/subject','Subject unselected!'));\n            }\n        } else {\n            $response = array('error' => false, 'message' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/subject','Please choose a subject'));\n        }\n\n        $db->commit();\n        echo json_encode($response);\n        exit;\n    }\n\n    if (isset($_GET['getsubjects'])) {\n        $tpl = erLhcoreClassTemplate::getInstance('lhcannedmsg/getsubjects.tpl.php');\n        $tpl->set('canned', erLhcoreClassModelCannedMsg::fetch($Params['user_parameters']['canned_id']));\n        echo $tpl->fetch();\n        exit;\n    }\n\n    $tpl->set('canned', $canned);\n    echo $tpl->fetch();\n    exit;\n} else {\n    $tpl->setFile( 'lhchat/errors/adminchatnopermission.tpl.php');\n    $tpl->set('show_close_button',true);\n    $tpl->set('auto_close_dialog',true);\n    $tpl->set('chat_id',(int)$Params['user_parameters']['chat_id']);\n    echo $tpl->fetch();\n    exit;\n}\n\nexit;\n\n?>", "<?php\n\n$response = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.blockuser', array());\n\n$chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\n$currentUser = erLhcoreClassUser::instance();\n\n// We are just in modal window\nif (!ezcInputForm::hasPostData()) {\n    $tpl = erLhcoreClassTemplate::getInstance('lhchat/blockuser.tpl.php');\n    $tpl->set('chat', $chat);\n    print $tpl->fetch();\n    exit;\n}\n\nif (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || !$currentUser->validateCSFRToken($_SERVER['HTTP_X_CSRFTOKEN'])) {\n\techo json_encode(array('error' => 'true', 'result' => 'Invalid CSRF Token' ));\n\texit;\n}\n\n$Errors = array();\n\nif (!($currentUser->hasAccessTo('lhchat','allowblockusers') || $chat->user_id == $currentUser->getUserID())) {\n    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/blockedusers','User blocking failed, perhaps you do not have permission to block users?');\n}\n\n$definition = array(\n    'btype' => new ezcInputFormDefinitionElement(\n        ezcInputFormDefinitionElement::OPTIONAL, 'int', array( 'min_range' => 0, 'max_range' => 4),FILTER_REQUIRE_ARRAY\n    ),\n    'btype_email' => new ezcInputFormDefinitionElement(\n        ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n    ),\n    'btype_online_user' => new ezcInputFormDefinitionElement(\n        ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n    ),\n    'expires' => new ezcInputFormDefinitionElement(\n        ezcInputFormDefinitionElement::OPTIONAL, 'int', array( 'min_range' => 0, 'max_range' => 360)\n    )\n);\n\n$form = new ezcInputForm(INPUT_POST, $definition);\n$params = array();\n\nif ((!$form->hasValidData('btype') || empty($form->btype)) && !$form->hasValidData('btype_email') && !$form->hasValidData('btype_online_user')) {\n    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/blockedusers', 'Please choose a block type!');\n} elseif ($form->hasValidData('btype') && !empty($form->btype)) {\n    if (in_array(erLhcoreClassModelChatBlockedUser::BLOCK_IP,$form->btype) && in_array(erLhcoreClassModelChatBlockedUser::BLOCK_NICK,$form->btype)) {\n        $params['btype'] = erLhcoreClassModelChatBlockedUser::BLOCK_ALL_IP_NICK;\n    } elseif (in_array(erLhcoreClassModelChatBlockedUser::BLOCK_IP,$form->btype) && in_array(erLhcoreClassModelChatBlockedUser::BLOCK_NICK_DEP,$form->btype)) {\n        $params['btype'] = erLhcoreClassModelChatBlockedUser::BLOCK_ALL_IP_NICK_DEP;\n    } else {\n        $btype = $form->btype;\n        $params['btype'] = array_shift($btype);\n    }\n}\n\nif ($form->hasValidData('btype_email') && $chat->email != '') {\n    $params['email'] = $chat->email;\n} elseif ($form->hasValidData('btype_email') && $chat->email != '') {\n    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/blockedusers', 'Chat does not have an e-mail set!');\n}\n\nif ($form->hasValidData('btype_online_user') && $chat->online_user_id > 0) {\n    $params['online_user_id'] = $chat->online_user_id;\n} elseif ($form->hasValidData('btype_online_user') && $chat->online_user_id == 0) {\n    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/blockedusers', 'Chat does not have online user');\n}\n\nif (!$form->hasValidData('expires')) {\n    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/blockedusers', 'Please choose expire option!');\n} else {\n    if ($form->expires > 0) {\n        $params['expires'] = time() + ($form->expires * 24 * 3600);\n    } else {\n        $params['expires'] = 0;\n    }\n}\n\n$params['chat'] = $chat;\n\n$params['user'] =  $currentUser->getUserData(true);\n\nif (empty($Errors)) {\n    erLhcoreClassModelChatBlockedUser::blockChat($params);\n    $tpl = erLhcoreClassTemplate::getInstance('lhkernel/alert_success.tpl.php');\n    $tpl->set('msg', erTranslationClassLhTranslation::getInstance()->getTranslation('chat/blockedusers', 'Visitor was blocked!'));\n    echo json_encode(array('error' => false, 'result' => $tpl->fetch()));\n} else {\n    $tpl = erLhcoreClassTemplate::getInstance('lhkernel/validation_error.tpl.php');\n    $tpl->set('errors', $Errors);\n    echo json_encode(array('error' => true, 'result' => $tpl->fetch()));\n}\n\nexit;\n\n?>", "<?php\n\n$tpl = erLhcoreClassTemplate::getInstance('lhchat/changestatus.tpl.php');\n$chat = erLhcoreClassChat::getSession()->load('erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\n$tpl->set('chat', $chat);\n\nif (erLhcoreClassChat::hasAccessToRead($chat)) {\n    $currentUser = erLhcoreClassUser::instance();\n    \n    if (isset($_POST['ChatStatus']) && is_numeric($_POST['ChatStatus'])) {\n        \n        $userData = $currentUser->getUserData();\n        $changeStatus = (int) $_POST['ChatStatus'];\n\n        if (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || !$currentUser->validateCSFRToken($_SERVER['HTTP_X_CSRFTOKEN'])) {\n            echo json_encode(array(\n                'error' => 'true',\n                'result' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat', 'Invalid CSRF token!')\n            ));\n            exit();\n        }\n\n        if (in_array($changeStatus, array(\n            erLhcoreClassModelChat::STATUS_ACTIVE_CHAT,\n            erLhcoreClassModelChat::STATUS_PENDING_CHAT,\n            erLhcoreClassModelChat::STATUS_CLOSED_CHAT,\n            erLhcoreClassModelChat::STATUS_CHATBOX_CHAT,\n            erLhcoreClassModelChat::STATUS_OPERATORS_CHAT,\n            erLhcoreClassModelChat::STATUS_BOT_CHAT\n        ))) {\n            \n            erLhcoreClassChatHelper::changeStatus(array(\n                'user' => $userData,\n                'chat' => $chat,\n                'status' => $changeStatus,\n                'allow_close_remote' => $currentUser->hasAccessTo('lhchat', 'allowcloseremote')\n            ));\n            \n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.data_changed',array('chat' => & $chat, 'user' => $currentUser));\n            \n            echo json_encode(array(\n                'error' => 'false',\n                'is_owner' => $chat->user_id == $userData->id\n            ));\n            exit();\n        } else {\n            echo json_encode(array(\n                'error' => 'true',\n                'result' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat', 'Invalid chat status')\n            ));\n            exit();\n        }\n    }\n}\n\nprint $tpl->fetch();\nexit();\n\n?>", "<?php\n\n$activated = 'false';\n$result = 'false';\n$ott = '';\n$ru = '';\n\n$tpl = erLhcoreClassTemplate::getInstance('lhchat/checkchatstatus.tpl.php');\n$tpl->set('theme',false);\n\nif (isset($Params['user_parameters_unordered']['theme']) && ($themeId = erLhcoreClassChat::extractTheme($Params['user_parameters_unordered']['theme'])) !== false) {\n    try {\n        $theme = erLhAbstractModelWidgetTheme::fetch($themeId);\n        $theme->translate();\n        $tpl->set('theme',$theme);\n    } catch (Exception $e) {\n\n    }\n} else {\n    $defaultTheme = erLhcoreClassModelChatConfig::fetch('default_theme_id')->current_value;\n    if ($defaultTheme > 0) {\n        try {\n            $theme = erLhAbstractModelWidgetTheme::fetch($defaultTheme);\n            $theme->translate();\n            $tpl->set('theme',$theme);\n        } catch (Exception $e) {\n             \n        }\n    }\n}\n\n$responseArray = array();\n\ntry {\n    \n    $db = ezcDbInstance::get();\n    $db->beginTransaction();\n    \n    $chat = erLhcoreClassModelChat::fetch($Params['user_parameters']['chat_id']);\n    \n    if ($chat instanceof erLhcoreClassModelChat && $chat->hash === $Params['user_parameters']['hash']) {\n\n    \t// Main unasnwered chats callback\n    \tif ( $chat->na_cb_executed == 0 && $chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT && erLhcoreClassModelChatConfig::fetch('run_unaswered_chat_workflow')->current_value > 0) {    \t\t\n    \t\t$delay = time()-(erLhcoreClassModelChatConfig::fetch('run_unaswered_chat_workflow')->current_value*60);    \t\t\n    \t\tif ($chat->time < $delay) {    \t\t\n    \t\t\terLhcoreClassChatWorkflow::unansweredChatWorkflow($chat);\n    \t\t}\n    \t}\n    \t\n    \tif ( $chat->nc_cb_executed == 0 && $chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT) {      \t\t  \t\t\n    \t\t$department = $chat->department;    \t\t   \t\t\n    \t\tif ($department !== false) {    \t\t\t\n    \t\t\t$options = $department->inform_options_array;   \t\t \t\t\t\t\n    \t\t\t$delay = time()-$department->inform_delay;    \t\t\t\n    \t\t\tif ($chat->time < $delay) {\n    \t\t\t\terLhcoreClassChatWorkflow::newChatInformWorkflow(array('department' => $department,'options' => $options),$chat);\n    \t\t\t}\n    \t\t} else {\n    \t\t\t$chat->nc_cb_executed = 1;\n    \t\t\t$chat->updateThis(array('update' => array('nc_cb_executed')));\n    \t\t}\n    \t}\n    \t\n    \t$contactRedirected = false;\n    \t\n    \tif ($chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT) {\n    \t\t$department = $chat->department;\n    \t\tif ($department !== false) {\n    \t\t\t$delay = time()-$department->delay_lm;\n    \t\t\tif ($department->delay_lm > 0 && $chat->pnd_time < $delay) {\n    \t\t\t\t$baseURL = (isset($Params['user_parameters_unordered']['mode']) && $Params['user_parameters_unordered']['mode'] == 'widget') ? erLhcoreClassDesign::baseurl('chat/chatwidget') : erLhcoreClassDesign::baseurl('chat/startchat');\n    \t\t\t\t$ru = $baseURL.'/(department)/'.$department->id.'/(offline)/true/(leaveamessage)/true/(chatprefill)/'.$chat->id.'_'.$chat->hash;\n    \t\t\t\t\n    \t\t\t\t$msg = new erLhcoreClassModelmsg();\n    \t\t\t\t$msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/checkchatstatus','Visitor has been redirected to contact form');\n    \t\t\t\t$msg->chat_id = $chat->id;\n    \t\t\t\t$msg->user_id = -1;\n    \t\t\t\t$msg->time = time();    \t\t\t\t\n    \t\t\t\terLhcoreClassChat::getSession()->save($msg);\n    \t\t\t\t\n    \t\t\t\t// We do not store last msg time for chat here, because in any case none of opeators has opened it\n    \t\t\t\t$contactRedirected = true;\n    \t\t\t\t\n    \t\t\t\tif ($chat->status_sub != erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM) {\n        \t\t\t\t$chat->status_sub = erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM;\n        \t\t\t\t$chat->updateThis(array('update' => array('status_sub')));\n    \t\t\t\t}\n    \t\t\t\t\n    \t\t\t} else {\n                    if (erLhcoreClassModelChatConfig::fetchCache('disable_live_autoassign')->current_value == 0) {\n    \t\t\t\t    erLhcoreClassChatWorkflow::autoAssign($chat,$department, array('user_init' => true));\n                    }\n    \t\t\t}\n    \t\t}   \t\t\n    \t}    \t\n    \t\n\t    if ( erLhcoreClassChat::isOnline($chat->dep_id,false,array('online_timeout' => (int)erLhcoreClassModelChatConfig::fetch('sync_sound_settings')->data['online_timeout'])) ) {\n\t         $tpl->set('is_online',true);\n\t    } else {\n\t         $tpl->set('is_online',false);\n\t    }\n\n\t    if ( $chat->chat_initiator == erLhcoreClassModelChat::CHAT_INITIATOR_PROACTIVE ) {\n\t         $tpl->set('is_proactive_based',true);\n\t    } else {\n\t         $tpl->set('is_proactive_based',false);\n\t    }\n\n\t    if ($chat->status == erLhcoreClassModelChat::STATUS_ACTIVE_CHAT) {\n\t       $activated = 'true';\n\t       $tpl->set('is_activated',true);\n\t    } else {\n\t       $tpl->set('is_activated',false);\n\t    }\n\n\t    if ($chat->status == erLhcoreClassModelChat::STATUS_CLOSED_CHAT) {\n\t    \t$activated = 'true';\n\t    \t$tpl->set('is_closed',true);\n\t    \t$responseArray['closed'] = true;\n\t    } else {\n\t    \t$tpl->set('is_closed',false);\n\t    }\n\t    \n\t    if ($chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM && $contactRedirected == false) {\n\t    \t$activated = 'false';\n\t    \t$department = $chat->department;\n\t    \tif ($department !== false) {\n\t    \t\t$baseURL = (isset($Params['user_parameters_unordered']['mode']) && $Params['user_parameters_unordered']['mode'] == 'widget') ? erLhcoreClassDesign::baseurl('chat/chatwidget') : erLhcoreClassDesign::baseurl('chat/startchat');\n\t    \t\t$ru = $baseURL.'/(department)/'.$department->id.'/(offline)/true/(leaveamessage)/true/(chatprefill)/'.$chat->id.'_'.$chat->hash;\n\t    \t\t\n\t    \t\t$msg = new erLhcoreClassModelmsg();\n\t    \t\t$msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/checkchatstatus','Visitor has been redirected to contact form');\n\t    \t\t$msg->chat_id = $chat->id;\n\t    \t\t$msg->user_id = -1;\n\t    \t\t$msg->time = time();\n\t    \t\terLhcoreClassChat::getSession()->save($msg);\n\t    \t\t// We do not store last msg time for chat here, because in any case none of opeators has opened it\n\t    \t}\n\t    }\n\t    \n\t    $tpl->set('chat', $chat);\n    } else {\n        $responseArray['error'] = 'false';\n        $responseArray['result'] = '';\n        $responseArray['activated'] = 'true';\n        $responseArray['closed'] = true;\n        echo json_encode($responseArray);\n        exit;\n    }\n    \n    $db->commit();\n} catch (Exception $e) {\n    $db->rollback();\n    exit;\n}\n\n$responseArray['error'] = 'false';\n$responseArray['ru'] = $ru;\n$responseArray['ott'] = $ott;\n$responseArray['result'] = $tpl->fetch();\n$responseArray['activated'] = $activated;\n$responseArray['uid'] = (int)$chat->user_id;\n$responseArray['status'] = (int)$chat->status;\n\nerLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.checkchatstatus',array('chat' => & $chat, 'response' => & $responseArray));\n\necho json_encode($responseArray);\nexit;\n?>", "<?php \r\n\r\ntry {\r\n    $chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\r\n\r\n    if ( erLhcoreClassChat::hasAccessToRead($chat) )\r\n    {\r\n        if (is_numeric($Params['user_parameters']['msg_id'])) {\r\n            $lastMessageObj = erLhcoreClassModelmsg::fetch($Params['user_parameters']['msg_id']);\r\n            if ($lastMessageObj instanceof erLhcoreClassModelmsg) {\r\n                $lastMessage = $lastMessageObj->getState();\r\n            }\r\n        } else {\r\n            $lastMessage = erLhcoreClassChat::getGetLastChatMessageEdit($chat->id, $currentUser->getUserID());\r\n        }\r\n\r\n\t\tif (isset($lastMessage['msg'])) {\r\n\t\t    if ($lastMessage['user_id'] == $currentUser->getUserID()) {\r\n                $array = array();\r\n                $array['id'] = $lastMessage['id'];\r\n                $array['msg'] = preg_replace('#\\[translation\\](.*?)\\[/translation\\]#is', '', $lastMessage['msg']);\r\n                $array['error'] = 'f';\r\n\r\n                erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_edit_previous_admin_returned',array('response' => & $array));\r\n\r\n                echo json_encode($array);\r\n            } else {\r\n                echo json_encode(array('error' => 't','result' => 'You can edit your own message!'));\r\n            }\r\n\t\t} else {\r\n\t\t\techo json_encode(array('error' => 't','result' => 'No last message was found!'));\r\n\t\t}\r\n\t}\r\n} catch (Exception $e) {\r\n\techo json_encode(array('error' => 't', 'result' => 'Message could not be found!'));\r\n}\r\nexit;\r\n\r\n\r\n?>", "<?php\r\n\r\ntry {\r\n\t$Chat = erLhcoreClassChat::getSession ()->load ( 'erLhcoreClassModelChat', $Params ['user_parameters'] ['chat_id'] );\r\n\t\r\n\tif (erLhcoreClassChat::hasAccessToRead ( $Chat )) {\r\n\t\t\t\t\t\r\n\t\t$msg = erLhcoreClassModelmsg::fetch ( $Params ['user_parameters'] ['msgid'] );\r\n\t\t\r\n\t\tif ($msg->chat_id == $Chat->id) {\r\n\t\t\t\r\n\t\t\t$tpl = erLhcoreClassTemplate::getInstance ( 'lhchat/syncadmin.tpl.php' );\r\n\t\t\t$tpl->set ( 'messages', array (\r\n\t\t\t\t\t( array ) $msg \r\n\t\t\t) );\r\n\t\t\t$tpl->set ( 'chat', $Chat );\r\n\t\t\t\t\t\r\n\t\t\techo json_encode ( array (\r\n\t\t\t\t\t'error' => 'f',\r\n\t\t\t\t\t'msg' => trim ( $tpl->fetch () ) \r\n\t\t\t) );\r\n\t\t\texit;\r\n\t\t}\r\n\t}\r\n\r\n} catch ( Exception $e ) {\r\n\t\r\n}\r\n\r\necho json_encode ( array (\r\n\t\t'error' => 't'\r\n) );\r\n\r\nexit();", "<?php\r\n\r\n$db = ezcDbInstance::get();\r\n\r\n$db->beginTransaction();\r\n\r\ntry {\r\n    $chat = erLhcoreClassModelChat::fetchAndLock($Params['user_parameters']['chat_id']);\r\n\r\n    if (!($chat instanceof erLhcoreClassModelChat)) {\r\n        throw new Exception('Chat could not be found!');\r\n    }\r\n\r\n    if (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || !$currentUser->validateCSFRToken($_SERVER['HTTP_X_CSRFTOKEN'])) {\r\n        throw new Exception('Invalid CSRF token!');\r\n    }\r\n\r\n    $msgStatus = '';\r\n\r\n    if (in_array($chat->status_sub,array(erLhcoreClassModelChat::STATUS_SUB_SURVEY_COMPLETED, erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT, erLhcoreClassModelChat::STATUS_SUB_SURVEY_SHOW, erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM))) {\r\n        $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n        $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','Visitor has already left a chat. Hold can not be applied.'), 'time' => time()));\r\n        $msgStatus = $tpl->fetch();\r\n        echo json_encode(array('error' => false, 'hold' => false, 'msg' => $msgStatus));\r\n        exit;\r\n    }\r\n\r\n    if (isset($_POST['sel']) && $_POST['sel'] == 'true') {\r\n\r\n        $hold = false;\r\n        $visitorHoldRemove = false;\r\n\r\n        $chatVariables = $chat->chat_variables_array;\r\n\r\n        if (isset($chatVariables['lhc_hldu'])) {\r\n            unset($chatVariables['lhc_hldu']);\r\n            $visitorHoldRemove = true;\r\n            $chat->chat_variables = json_encode($chatVariables);\r\n            $chat->chat_variables_array = $chatVariables;\r\n        }\r\n\r\n        $chat->status_sub = 0;\r\n        $chat->last_op_msg_time = time();\r\n        $chat->last_user_msg_time = time()-1;\r\n\r\n        if (isset($_POST['op']) && $_POST['op'] == 'usr') {\r\n            $chat->updateThis(array('update' => array('status_sub','last_op_msg_time','last_user_msg_time','chat_variables')));\r\n\r\n            // Hold status change\r\n            $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n            $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','Visitor hold removed!'), 'time' => time()));\r\n            $msgStatus = $tpl->fetch();\r\n\r\n        } else {\r\n\r\n            $fields = array('status_sub','last_op_msg_time','last_user_msg_time');\r\n\r\n            if ($visitorHoldRemove == true) {\r\n                $fields[] = 'chat_variables';\r\n            }\r\n\r\n            $chat->updateThis(array('update' => $fields));\r\n\r\n            if ($chat->auto_responder !== false) {\r\n                $chat->auto_responder->active_send_status = 0;\r\n                $chat->auto_responder->saveThis();\r\n            }\r\n\r\n            // Hold status change\r\n            $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n            $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','Hold removed!'), 'time' => time()));\r\n            $msgStatus = $tpl->fetch();\r\n        }\r\n\r\n    } else {\r\n\r\n        $chat->status_sub = erLhcoreClassModelChat::STATUS_SUB_ON_HOLD;\r\n        $hold = true;\r\n\r\n        if (isset($_POST['op']) && $_POST['op'] == 'usr') {\r\n\r\n            $chatVariables = $chat->chat_variables_array;\r\n            $chatVariables['lhc_hldu'] = 1;\r\n            $chat->chat_variables = json_encode($chatVariables);\r\n            $chat->chat_variables_array = $chatVariables;\r\n            $chat->last_op_msg_time = time();\r\n            $chat->last_user_msg_time = time()-1;\r\n            $chat->updateThis(array('update' => array('status_sub','chat_variables','last_op_msg_time','last_user_msg_time')));\r\n\r\n            $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n            $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','Visitor hold added!'), 'time' => time()));\r\n            $msgStatus = $tpl->fetch();\r\n\r\n        } else {\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.holdaction_defaultmsg',array('msg' => & $msgText, 'chat' => & $chat));\r\n\r\n            $holdMessageSet = false;\r\n\r\n            if ($chat->auto_responder !== false) {\r\n                if ($chat->auto_responder->auto_responder !== false && $chat->auto_responder->auto_responder->wait_timeout_hold != '') {\r\n                    $msgText = $chat->auto_responder->auto_responder->wait_timeout_hold;\r\n\r\n                    $currentUser = erLhcoreClassUser::instance();\r\n                    $userData = $currentUser->getUserData();\r\n\r\n                    $msg = new erLhcoreClassModelmsg();\r\n                    $msg->msg = $msgText;\r\n                    $msg->chat_id = $chat->id;\r\n                    $msg->user_id = $currentUser->getUserID();\r\n                    $msg->time = time();\r\n                    $msg->name_support = $userData->name_support;\r\n\r\n                    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_msg_admin_saved', array('msg' => & $msg, 'chat' => & $chat));\r\n\r\n                    $msg->saveThis();\r\n\r\n                    $chat->last_msg_id = $msg->id;\r\n\r\n                    $holdMessageSet = true;\r\n                }\r\n\r\n                $chat->auto_responder->active_send_status = 0;\r\n                $chat->auto_responder->saveThis();\r\n            }\r\n\r\n            if ($holdMessageSet === false) {\r\n                $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n                $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','Hold added!'), 'time' => time()));\r\n                $msgStatus = $tpl->fetch();\r\n            }\r\n\r\n            $chatVariables = $chat->chat_variables_array;\r\n\r\n            $updateFields = array('last_msg_id','last_op_msg_time','last_user_msg_time','status_sub');\r\n\r\n            if (isset($chatVariables['lhc_hldu'])) {\r\n                unset($chatVariables['lhc_hldu']);\r\n                $chat->chat_variables = json_encode($chatVariables);\r\n                $chat->chat_variables_array = $chatVariables;\r\n                $updateFields[] = 'chat_variables';\r\n            }\r\n\r\n            $chat->last_op_msg_time = time();\r\n            $chat->last_user_msg_time = time()-1;\r\n            $chat->updateThis(array('update' => $updateFields));\r\n        }\r\n    }\r\n\r\n    $db->commit();\r\n\r\n    echo json_encode(array('error' => false, 'hold' => $hold, 'msg' => $msgStatus));\r\n\r\n} catch (Exception $e) {\r\n    $db->rollback();\r\n    echo json_encode(array('error' => true, 'msg' => $e->getMessage()));\r\n}\r\n\r\nexit;\r\n?>", "<?php \r\n\r\nif (is_numeric($Params['user_parameters']['chat_id']))\r\n{\r\n    $chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\r\n    if ( erLhcoreClassChat::hasAccessToRead($chat) )\r\n    {\r\n         $browse = erLhcoreClassCoBrowse::getBrowseInstance($chat);\r\n         \r\n         $changes = array();\r\n         $changes[] = array('lmsg' => $browse->mtime > 0 ? $browse->mtime_front : '');\r\n         $changes[] = array('finished' => array('status' => !$browse->is_sharing,'text' => $browse->is_sharing == 0 ? erTranslationClassLhTranslation::getInstance()->getTranslation('cobrowse/browse','Screen sharing session has finished') : erTranslationClassLhTranslation::getInstance()->getTranslation('cobrowse/browse','Screen is shared')));\r\n         if ($browse->finished == 1) {\r\n         \t$changes[] = array('clear' => true); \r\n         }\r\n         $changes[] = array('url' => $browse->url);\r\n         $changes[] = array('base' => $browse->url);\r\n         if ($browse->initialize != '') {\r\n         \t$changes[] = json_decode($browse->initialize);\r\n         }\r\n\r\n         echo json_encode($changes);          \r\n    }\r\n}\r\n\r\nexit;\r\n?>", "<?php\r\n\r\nif (is_numeric($Params['user_parameters']['chat_id'])) {\r\n    /*\r\n     * If online user mode we have to make different check\r\n     * */\r\n    $browse = false;\r\n    if ($Params['user_parameters_unordered']['cobrowsemode'] == 'onlineuser') {\r\n        $onlineUser = erLhcoreClassModelChatOnlineUser::fetch($Params['user_parameters']['chat_id']);\r\n        $browse = erLhcoreClassCoBrowse::getBrowseInstanceByOnlineUser($onlineUser);\r\n    } else {\r\n        $chat = erLhcoreClassChat::getSession()->load('erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\r\n        if (erLhcoreClassChat::hasAccessToRead($chat)) {\r\n            $browse = erLhcoreClassCoBrowse::getBrowseInstance($chat);\r\n        }\r\n    }\r\n\r\n    if ($browse instanceof erLhcoreClassModelCoBrowse) {\r\n        if ($browse->modifications != '') {\r\n            $changes = json_decode($browse->modifications);\r\n            $changes[] = array('url' => $browse->url);\r\n            $changes[] = array('lmsg' => $browse->mtime > 0 ? $browse->mtime_front : '');\r\n            $changes[] = array('finished' => array('status' => !$browse->is_sharing, 'text' => $browse->is_sharing == 0 ? erTranslationClassLhTranslation::getInstance()->getTranslation('cobrowse/browse', 'Screen sharing session has finished') : erTranslationClassLhTranslation::getInstance()->getTranslation('cobrowse/browse', 'Screen is shared')));\r\n            if ($browse->finished == 1) {\r\n                $changes[] = array('clear' => true);\r\n            }\r\n            array_unshift($changes, array('base' => $browse->url));\r\n            echo json_encode($changes);\r\n            $browse->modifications = '';\r\n            $browse->saveThis();\r\n        } else {\r\n            $changes = array();\r\n            $changes[] = array('lmsg' => $browse->mtime > 0 ? $browse->mtime_front : '');\r\n            $changes[] = array('finished' => array('status' => !$browse->is_sharing, 'text' => $browse->is_sharing == 0 ? erTranslationClassLhTranslation::getInstance()->getTranslation('cobrowse/browse', 'Screen sharing session has finished') : erTranslationClassLhTranslation::getInstance()->getTranslation('cobrowse/browse', 'Screen is shared')));\r\n            if ($browse->finished == 1) {\r\n                $changes[] = array('clear' => true);\r\n            }\r\n            array_unshift($changes, array('base' => $browse->url));\r\n            echo json_encode($changes);\r\n        }\r\n    }\r\n}\r\n\r\nexit;\r\n?>", "<?php\n\n$currentUser = erLhcoreClassUser::instance();\n$userData = $currentUser->getUserData(true);\n\nif (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || !$currentUser->validateCSFRToken($_SERVER['HTTP_X_CSRFTOKEN'])) {\n    echo json_encode(array('error' => true, 'active' => true));\n    exit;\n}\n\n// We have to check is operator really inactive or it's just a tab trying to set inactive mode\nif ($Params['user_parameters']['status'] == 'true') {\n    $activityTimeout = erLhcoreClassModelUserSetting::getSetting('trackactivitytimeout',-1);\n\n    // If there is no individual setting user global one\n    if ($activityTimeout == -1) {\n        $activityTimeout = (int)erLhcoreClassModelChatConfig::fetchCache('activity_timeout')->current_value*60;\n    }\n\n    // Operator was still active in another tab, do nothing\n    if ($activityTimeout > (time() - $userData->lastd_activity)) {\n        echo json_encode(array('error' => false, 'active' => true));\n        exit;\n    }\n}\n\nif ($Params['user_parameters']['status'] == 'true') {\n\t$userData->inactive_mode = 1;\n} else {\n\t$userData->inactive_mode = 0;\n}\n\nerLhcoreClassUser::getSession()->update($userData);\n\n// Construct temporary object to change inactive modes\n$userDataTemp = new stdClass();\n$userDataTemp->id = $userData->id;\n\nif ($userData->hide_online == 0) { // change status only if he's not offline manually\n    $userDataTemp->hide_online = $userData->inactive_mode;\n    $userDataTemp->always_on = $userData->always_on;\n\n    erLhcoreClassUserDep::setHideOnlineStatus($userDataTemp);\n}\n\nerLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.operator_inactivemode_changed',array('user' => & $userData, 'reason' => 'user_action'));\n\n\necho json_encode(array('error' => false, 'active' => false));\n\nexit;\n\n?>", "<?php\n$currentUser = erLhcoreClassUser::instance();\nif (!$currentUser->isLogged() && !$currentUser->authenticate($_POST['username'],$_POST['password']))\n{\n    exit;\n}\n\ntry {\n\t$chatTransfer = erLhcoreClassTransfer::getSession()->load( 'erLhcoreClassModelTransfer', $Params['user_parameters']['transfer_id']);\n\t$chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $chatTransfer->chat_id);\n} catch (Exception $e) {\n\texit;\n}\n\n// Set new chat owner\n$currentUser = erLhcoreClassUser::instance();\n$chat->user_id = $currentUser->getUserID();\n\nif  ($chatTransfer->dep_id > 0) {\n\t$chat->dep_id = $chatTransfer->dep_id;\n\n\t// User does not have access to chat in this department, that mean we do not have to do anything\n\tif (!erLhcoreClassChat::hasAccessToRead($chat)){\n\t\texit;\n\t}\n}\n\nif ( !erLhcoreClassChat::hasAccessToRead($chat) )\n{\n\tif ($currentUser->getUserID() == $chatTransfer->transfer_to_user_id) {\n\t\t$chat->dep_id = erLhcoreClassUserDep::getDefaultUserDepartment();\n\t} else {\n\t\texit; // User does not have permission to assign chat to himself\n\t}\n}\n\n// All ok, we can make changes\nerLhcoreClassChat::getSession()->update($chat);\nerLhcoreClassTransfer::getSession()->delete($chatTransfer);\n\nerLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.chat_transfer_accepted',array('chat' => & $chat));\n\necho json_encode(array('error' => 'false'));\nexit;\n?>", "<?php\n\n$currentUser = erLhcoreClassUser::instance();\nif (!$currentUser->isLogged() && !$currentUser->authenticate($_POST['username'],$_POST['password']))\n{\n    exit;\n}\n\n$transfer = erLhcoreClassTransfer::getTransferByChat($Params['user_parameters']['chat_id']);\n\n$chatTransfer = erLhcoreClassTransfer::getSession()->load( 'erLhcoreClassModelTransfer', $transfer['id']);\n$chat_id = $chatTransfer->chat_id;\nerLhcoreClassTransfer::getSession()->delete($chatTransfer);\n\n$chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $chat_id);\n\n// Set new chat owner\n$chat->user_id = $currentUser->getUserID();\n    \nerLhcoreClassChat::getSession()->update($chat);\n\nerLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.chat_transfer_accepted',array('chat' => & $chat));\n\necho json_encode(array('error' => 'false'));\nexit;\n\n?>", "<?php\n$currentUser = erLhcoreClassUser::instance();\nif (!$currentUser->isLogged() && !$currentUser->authenticate($_POST['username'],$_POST['password']))\n{\n    exit;\n}\n\n$chat = erLhcoreClassModelChat::fetch($Params['user_parameters']['chat_id']);\n\nif ( erLhcoreClassChat::hasAccessToRead($chat) )\n{\n\t\t// If status is pending change status to active\t\t\n        $operatorAccepted = false;\n        $chatDataChanged = false;\n        \n        if ($chat->user_id == 0) {\n        \t$currentUser = erLhcoreClassUser::instance();\n        \t$chat->user_id = $currentUser->getUserID();\n        \t$chatDataChanged = true;\n        }\n         \n        // If status is pending change status to active\n        if ($chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT || $chat->status == erLhcoreClassModelChat::STATUS_BOT_CHAT) {\n        \t$chat->status = erLhcoreClassModelChat::STATUS_ACTIVE_CHAT;\n        \n        \tif ($chat->wait_time == 0) {\n        \t\t$chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\n        \t}\n        \n        \t$chat->user_id = $currentUser->getUserID();\n        \t$operatorAccepted = true;\n        \t$chatDataChanged = true;\n        }\n         \n        if ($chat->support_informed == 0 || $chat->has_unread_messages == 1 ||  $chat->unread_messages_informed == 1) {\n        \t$chatDataChanged = true;\n        }\n\n        // Check does chat transfer record exists if operator opened chat directly\n        if ($chat->transfer_uid > 0) {\n            erLhcoreClassTransfer::handleTransferredChatOpen($chat, $currentUser->getUserID());\n        }\n\n        $chat->support_informed = 1;\n        $chat->has_unread_messages = 0;\n        $chat->unread_messages_informed = 0;\n        erLhcoreClassChat::getSession()->update($chat);\n                \n        $ownerString = 'No data';\n        $user = $chat->getChatOwner();\n        if ($user !== false)\n        {\n            $ownerString = $user->name.' '.$user->surname;\n        }\n        \n        $cannedmsg = erLhcoreClassModelCannedMsg::getCannedMessages($chat->dep_id,$currentUser->getUserID());\n        \n    \techo json_encode(array('operator' => (string)$currentUser->getUserData(true)->name_support,'error' => false, 'canned_messages' => array_values($cannedmsg), 'chat' => $chat, 'ownerstring' => $ownerString));\n    \t\n\t    flush();\n\t    session_write_close();\n\t    \n\t    if ( function_exists('fastcgi_finish_request') ) {\n\t        fastcgi_finish_request();\n\t    };\n\t    \n\t    if ($chatDataChanged == true) {\n\t    \terLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.data_changed',array('chat' => & $chat,'user' => $currentUser));\n\t    }\n    \t    \n\t    if ($operatorAccepted == true) {\n\t    \terLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.accept',array('chat' => & $chat,'user' => $currentUser));\n\t    \terLhcoreClassChat::updateActiveChats($chat->user_id);\n\t    \terLhcoreClassChatWorkflow::presendCannedMsg($chat);\n\t    \t$options = $chat->department->inform_options_array;\n\t    \terLhcoreClassChatWorkflow::chatAcceptedWorkflow(array('department' => $chat->department,'options' => $options),$chat);\n\t    };\t    \n\t    \n} else {\n    echo json_encode(array('error' => true,'error_string' => 'You do not have permission to read this chat!'));\n}\n\nexit;\n?>", "<?php\n\n$currentUser = erLhcoreClassUser::instance();\nif (!$currentUser->isLogged() && !$currentUser->authenticate($_POST['username'],$_POST['password']))\n{\n    exit;\n}\n\n//erLhcoreClassLog::write(print_r($_POST,true));\n//[chats] => 2|5,2,5,2;8|0,5,2,0,5,2\n//$_POST['chats']   = '6|5,1,4;8|0,5,2,0,5,2';\n\nif ($currentUser->isLogged() && isset($_POST['chats']))\n{\n    $arrayReturn = array();\n\n    $chats = explode(';',$_POST['chats']);\n\n    foreach ($chats as $chatContent)\n    {\n        $paramsExecution = explode('|',$chatContent);\n\n        $chat_id = $paramsExecution[0];\n        $msgIDs = isset($paramsExecution[1]) ? $paramsExecution[1] : '';\n\n        $chatsMessages = array();\n        $chatStatusMessage = '';\n\n        // Get messages from with needs to synchronise\n        $masgIDArray  = array_unique(explode(',',$msgIDs));\n\n        // From this messages we can fetch msg's\n        $minMessageID = min($masgIDArray);\n\n        $Chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $chat_id);\n\n        if ( erLhcoreClassChat::hasAccessToRead($Chat) )\n        {\n            if ( ($Chat->last_msg_id > (int)$minMessageID) && count($Messages = erLhcoreClassChat::getPendingMessages($chat_id,(int)$minMessageID)) > 0)\n            {\n                foreach ($Messages as $msgIndex => $msg)\n                {\n                    foreach ($masgIDArray as $msgID)\n                    {\n                        if ($msgID < $msg['id']) {\n\n                            if (strpos($_SERVER['HTTP_USER_AGENT'],'Dart/') !== false) {\n                                $msg['msg'] = str_replace('\"//','\"'. (erLhcoreClassSystem::$httpsMode == true ? 'https:' : 'http:') . '//' ,erLhcoreClassBBCode::make_clickable($msg['msg'], array('sender' => $msg['user_id'])));\n                            } else {\n                                $msg['msg'] = erLhcoreClassBBCodePlain::make_clickable($msg['msg'], array('sender' => $msg['user_id']));\n                            }\n\n                            $chatsMessages[$msgID][] = $msg;\n                        }\n                    }\n                }\n                \n                if ($Chat->has_unread_messages == 1 || $Chat->unread_messages_informed == 1 ) {\n                \t$Chat->has_unread_messages = 0;\n                \t$Chat->unread_messages_informed = 0;\n                \t$Chat->saveThis();\n                }                \n            }\n        }\n\n        if ($Chat->is_user_typing) {\n            $chatStatusMessage = $Chat->user_typing_txt;\n        } elseif ($Chat->user_status_front == 1) {\n            $chatStatusMessage = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/userleftchat','Visitor has left the chat!');\n        } elseif ($Chat->user_status_front == 0) {\n            $chatStatusMessage = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/userjoined','Visitor has joined the chat!');\n        }\n\n        $arrayReturn[$chat_id]['messages'] = $chatsMessages;\n        $arrayReturn[$chat_id]['chat_status'] = $chatStatusMessage;\n        $arrayReturn[$chat_id]['chat_scode'] = (int)$Chat->user_status_front;\n\n        if ($Chat->user_typing_txt != '') {\n            $arrayReturn[$chat_id]['tt'] = $Chat->user_typing_txt;\n        }\n    }\n\n    echo json_encode(array(\"error\" => false,'result' => $arrayReturn));\n} else {\n    echo json_encode(array(\"error\" => true));\n}\n\n\n\n\n\nexit;\n?>", "<?php\n\n// Debug\n//erLhcoreClassLog::write(print_r($_POST,true));\n\n@ini_set('session.cookie_samesite', 'None');\n@ini_set('session.cookie_secure', true);\n\n$currentUser = erLhcoreClassUser::instance();\n\nif ($currentUser->authenticate($_POST['username'],$_POST['password']))\n{     \n        echo json_encode(\n            array('result' => true)\n        );\n          \n} else {\n\n    if (($userAttempt = erLhcoreClassModelUser::findOne(array('filter' => array('username' => $_POST['Username'])))) instanceof erLhcoreClassModelUser) {\n        erLhcoreClassModelUserLogin::logUserAction(array(\n            'type' => erLhcoreClassModelUserLogin::TYPE_LOGIN_ATTEMPT,\n            'user_id' => $userAttempt->id,\n            'msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('user/login','Failed login. XML_CHECK_LOGIN')\n        ));\n\n        erLhcoreClassModelUserLogin::disableIfRequired($userAttempt);\n    }\n\n    echo json_encode(\n            array('result' => false)\n        );    \n}\n  \n\nexit;\n?>", "<?php\r\n$currentUser = erLhcoreClassUser::instance();\r\nif (!$currentUser->isLogged() && !$currentUser->authenticate($_POST['username'],$_POST['password']))\r\n{\r\n    exit;\r\n}\r\n\r\n$userData = $currentUser->getUserData(true);\r\necho json_encode(array('online' => $userData->hide_online == 1));\r\n\r\nexit;\r\n?>", "<?php\n\n$currentUser = erLhcoreClassUser::instance();\nif (!$currentUser->isLogged() && !$currentUser->authenticate($_POST['username'],$_POST['password']))\n{\n    exit;\n}\n\n$onlineUsers = erLhcoreClassChat::getOnlineUsers(array($currentUser->getUserID()));\n\necho json_encode(array('result' => $onlineUsers));\n\nexit;\n\n?>", "<?php\r\n\r\n$tpl = erLhcoreClassTemplate::getInstance( 'lhxml/userinfo.tpl.php' );\r\n\r\ntry {\r\n\t$onlineUsers = erLhcoreClassModelChatOnlineUser::fetch((int)$Params['user_parameters']['user_id']);\r\n\t$tpl->set('onlineUsers',$onlineUsers);\r\n\techo json_encode(array('user' => $tpl->fetch()));\r\n} catch (Exception $e) {\r\n\techo json_encode(array('user' => '-'));\r\n}\r\n\r\nexit;\r\n?>"], "fixing_code": ["<?php\n\nheader('Content-type: application/json');\n\n$tpl = erLhcoreClassTemplate::getInstance('lhcannedmsg/showsuggester.tpl.php');\n\n$chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\n$tpl->set('chat',$chat);\n\nif ( erLhcoreClassChat::hasAccessToRead($chat) ) {\n\n    $tpl->set('keyword','');\n\n    if (isset($_GET['keyword']) && $_GET['keyword'] != '') {\n        $tpl->set('keyword',strip_tags($_GET['keyword']));\n    }\n\n    echo json_encode(array('error' => false, 'result' => $tpl->fetch()));\n}\n\nexit;\n\n?>", "<?php\n\n$tpl = erLhcoreClassTemplate::getInstance('lhcannedmsg/subject.tpl.php');\n$canned = erLhcoreClassModelCannedMsg::fetch($Params['user_parameters']['canned_id']);\n\nif ($canned instanceof erLhcoreClassModelCannedMsg)\n{\n    if (ezcInputForm::hasPostData()) {\n\n        if (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || !$currentUser->validateCSFRToken($_SERVER['HTTP_X_CSRFTOKEN'])) {\n            $response = array('error' => true, 'message' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/subject','Invalid CSRF token'));\n        }\n\n        $db = ezcDbInstance::get();\n        $db->beginTransaction();\n        $response = array();\n        if (is_numeric($Params['user_parameters_unordered']['subject'])) {\n            if ($Params['user_parameters_unordered']['status'] == 'true') {\n                $subjectChat = erLhcoreClassModelCannedMsgSubject::findOne(array('filter' => array('canned_id' => $canned->id, 'subject_id' => $Params['user_parameters_unordered']['subject'])));\n\n                if (!($subjectChat instanceof erLhcoreClassModelCannedMsgSubject)) {\n                    $subjectChat = new erLhcoreClassModelCannedMsgSubject();\n                }\n\n                $subjectChat->canned_id = $canned->id;\n                $subjectChat->subject_id = $Params['user_parameters_unordered']['subject'];\n                $subjectChat->saveThis();\n\n                $response = array('error' => false, 'message' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/subject','Subject selected!'));\n\n            } else {\n                $subjectChat = erLhcoreClassModelCannedMsgSubject::findOne(array('filter' => array('canned_id' => $canned->id, 'subject_id' => $Params['user_parameters_unordered']['subject'])));\n\n                if ($subjectChat instanceof erLhcoreClassModelCannedMsgSubject) {\n                    $subjectChat->removeThis();\n                }\n\n                $response = array('error' => false, 'message' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/subject','Subject unselected!'));\n            }\n        } else {\n            $response = array('error' => false, 'message' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/subject','Please choose a subject'));\n        }\n\n        $db->commit();\n        header('Content-type: application/json');\n        echo json_encode($response);\n        exit;\n    }\n\n    if (isset($_GET['getsubjects'])) {\n        $tpl = erLhcoreClassTemplate::getInstance('lhcannedmsg/getsubjects.tpl.php');\n        $tpl->set('canned', erLhcoreClassModelCannedMsg::fetch($Params['user_parameters']['canned_id']));\n        echo $tpl->fetch();\n        exit;\n    }\n\n    $tpl->set('canned', $canned);\n    echo $tpl->fetch();\n    exit;\n} else {\n    $tpl->setFile( 'lhchat/errors/adminchatnopermission.tpl.php');\n    $tpl->set('show_close_button',true);\n    $tpl->set('auto_close_dialog',true);\n    $tpl->set('chat_id',(int)$Params['user_parameters']['chat_id']);\n    echo $tpl->fetch();\n    exit;\n}\n\nexit;\n\n?>", "<?php\n\n$response = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.blockuser', array());\n\n$chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\n$currentUser = erLhcoreClassUser::instance();\n\n// We are just in modal window\nif (!ezcInputForm::hasPostData()) {\n    $tpl = erLhcoreClassTemplate::getInstance('lhchat/blockuser.tpl.php');\n    $tpl->set('chat', $chat);\n    print $tpl->fetch();\n    exit;\n}\n\nif (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || !$currentUser->validateCSFRToken($_SERVER['HTTP_X_CSRFTOKEN'])) {\n\techo json_encode(array('error' => 'true', 'result' => 'Invalid CSRF Token' ));\n\texit;\n}\n\n$Errors = array();\n\nif (!($currentUser->hasAccessTo('lhchat','allowblockusers') || $chat->user_id == $currentUser->getUserID())) {\n    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/blockedusers','User blocking failed, perhaps you do not have permission to block users?');\n}\n\n$definition = array(\n    'btype' => new ezcInputFormDefinitionElement(\n        ezcInputFormDefinitionElement::OPTIONAL, 'int', array( 'min_range' => 0, 'max_range' => 4),FILTER_REQUIRE_ARRAY\n    ),\n    'btype_email' => new ezcInputFormDefinitionElement(\n        ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n    ),\n    'btype_online_user' => new ezcInputFormDefinitionElement(\n        ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n    ),\n    'expires' => new ezcInputFormDefinitionElement(\n        ezcInputFormDefinitionElement::OPTIONAL, 'int', array( 'min_range' => 0, 'max_range' => 360)\n    )\n);\n\n$form = new ezcInputForm(INPUT_POST, $definition);\n$params = array();\n\nif ((!$form->hasValidData('btype') || empty($form->btype)) && !$form->hasValidData('btype_email') && !$form->hasValidData('btype_online_user')) {\n    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/blockedusers', 'Please choose a block type!');\n} elseif ($form->hasValidData('btype') && !empty($form->btype)) {\n    if (in_array(erLhcoreClassModelChatBlockedUser::BLOCK_IP,$form->btype) && in_array(erLhcoreClassModelChatBlockedUser::BLOCK_NICK,$form->btype)) {\n        $params['btype'] = erLhcoreClassModelChatBlockedUser::BLOCK_ALL_IP_NICK;\n    } elseif (in_array(erLhcoreClassModelChatBlockedUser::BLOCK_IP,$form->btype) && in_array(erLhcoreClassModelChatBlockedUser::BLOCK_NICK_DEP,$form->btype)) {\n        $params['btype'] = erLhcoreClassModelChatBlockedUser::BLOCK_ALL_IP_NICK_DEP;\n    } else {\n        $btype = $form->btype;\n        $params['btype'] = array_shift($btype);\n    }\n}\n\nif ($form->hasValidData('btype_email') && $chat->email != '') {\n    $params['email'] = $chat->email;\n} elseif ($form->hasValidData('btype_email') && $chat->email != '') {\n    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/blockedusers', 'Chat does not have an e-mail set!');\n}\n\nif ($form->hasValidData('btype_online_user') && $chat->online_user_id > 0) {\n    $params['online_user_id'] = $chat->online_user_id;\n} elseif ($form->hasValidData('btype_online_user') && $chat->online_user_id == 0) {\n    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/blockedusers', 'Chat does not have online user');\n}\n\nif (!$form->hasValidData('expires')) {\n    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/blockedusers', 'Please choose expire option!');\n} else {\n    if ($form->expires > 0) {\n        $params['expires'] = time() + ($form->expires * 24 * 3600);\n    } else {\n        $params['expires'] = 0;\n    }\n}\n\n$params['chat'] = $chat;\n\n$params['user'] =  $currentUser->getUserData(true);\n\nif (empty($Errors)) {\n    erLhcoreClassModelChatBlockedUser::blockChat($params);\n    $tpl = erLhcoreClassTemplate::getInstance('lhkernel/alert_success.tpl.php');\n    $tpl->set('msg', erTranslationClassLhTranslation::getInstance()->getTranslation('chat/blockedusers', 'Visitor was blocked!'));\n    header('Content-type: application/json');\n    echo json_encode(array('error' => false, 'result' => $tpl->fetch()));\n} else {\n    $tpl = erLhcoreClassTemplate::getInstance('lhkernel/validation_error.tpl.php');\n    $tpl->set('errors', $Errors);\n    header('Content-type: application/json');\n    echo json_encode(array('error' => true, 'result' => $tpl->fetch()));\n}\n\nexit;\n\n?>", "<?php\n\n$tpl = erLhcoreClassTemplate::getInstance('lhchat/changestatus.tpl.php');\n$chat = erLhcoreClassChat::getSession()->load('erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\n$tpl->set('chat', $chat);\n\nif (erLhcoreClassChat::hasAccessToRead($chat)) {\n    $currentUser = erLhcoreClassUser::instance();\n    \n    if (isset($_POST['ChatStatus']) && is_numeric($_POST['ChatStatus'])) {\n        \n        $userData = $currentUser->getUserData();\n        $changeStatus = (int) $_POST['ChatStatus'];\n\n        if (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || !$currentUser->validateCSFRToken($_SERVER['HTTP_X_CSRFTOKEN'])) {\n            header('Content-type: application/json');\n            echo json_encode(array(\n                'error' => 'true',\n                'result' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat', 'Invalid CSRF token!')\n            ));\n            exit();\n        }\n\n        if (in_array($changeStatus, array(\n            erLhcoreClassModelChat::STATUS_ACTIVE_CHAT,\n            erLhcoreClassModelChat::STATUS_PENDING_CHAT,\n            erLhcoreClassModelChat::STATUS_CLOSED_CHAT,\n            erLhcoreClassModelChat::STATUS_CHATBOX_CHAT,\n            erLhcoreClassModelChat::STATUS_OPERATORS_CHAT,\n            erLhcoreClassModelChat::STATUS_BOT_CHAT\n        ))) {\n            \n            erLhcoreClassChatHelper::changeStatus(array(\n                'user' => $userData,\n                'chat' => $chat,\n                'status' => $changeStatus,\n                'allow_close_remote' => $currentUser->hasAccessTo('lhchat', 'allowcloseremote')\n            ));\n            \n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.data_changed',array('chat' => & $chat, 'user' => $currentUser));\n\n            header('Content-type: application/json');\n            echo json_encode(array(\n                'error' => 'false',\n                'is_owner' => $chat->user_id == $userData->id\n            ));\n            exit();\n        } else {\n\n            header('Content-type: application/json');\n            echo json_encode(array(\n                'error' => 'true',\n                'result' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat', 'Invalid chat status')\n            ));\n            exit();\n        }\n    }\n}\n\nprint $tpl->fetch();\nexit();\n\n?>", "<?php\n\nheader('Content-type: application/json');\n\n$activated = 'false';\n$result = 'false';\n$ott = '';\n$ru = '';\n\n$tpl = erLhcoreClassTemplate::getInstance('lhchat/checkchatstatus.tpl.php');\n$tpl->set('theme',false);\n\nif (isset($Params['user_parameters_unordered']['theme']) && ($themeId = erLhcoreClassChat::extractTheme($Params['user_parameters_unordered']['theme'])) !== false) {\n    try {\n        $theme = erLhAbstractModelWidgetTheme::fetch($themeId);\n        $theme->translate();\n        $tpl->set('theme',$theme);\n    } catch (Exception $e) {\n\n    }\n} else {\n    $defaultTheme = erLhcoreClassModelChatConfig::fetch('default_theme_id')->current_value;\n    if ($defaultTheme > 0) {\n        try {\n            $theme = erLhAbstractModelWidgetTheme::fetch($defaultTheme);\n            $theme->translate();\n            $tpl->set('theme',$theme);\n        } catch (Exception $e) {\n             \n        }\n    }\n}\n\n$responseArray = array();\n\ntry {\n    \n    $db = ezcDbInstance::get();\n    $db->beginTransaction();\n    \n    $chat = erLhcoreClassModelChat::fetch($Params['user_parameters']['chat_id']);\n    \n    if ($chat instanceof erLhcoreClassModelChat && $chat->hash === $Params['user_parameters']['hash']) {\n\n    \t// Main unasnwered chats callback\n    \tif ( $chat->na_cb_executed == 0 && $chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT && erLhcoreClassModelChatConfig::fetch('run_unaswered_chat_workflow')->current_value > 0) {    \t\t\n    \t\t$delay = time()-(erLhcoreClassModelChatConfig::fetch('run_unaswered_chat_workflow')->current_value*60);    \t\t\n    \t\tif ($chat->time < $delay) {    \t\t\n    \t\t\terLhcoreClassChatWorkflow::unansweredChatWorkflow($chat);\n    \t\t}\n    \t}\n    \t\n    \tif ( $chat->nc_cb_executed == 0 && $chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT) {      \t\t  \t\t\n    \t\t$department = $chat->department;    \t\t   \t\t\n    \t\tif ($department !== false) {    \t\t\t\n    \t\t\t$options = $department->inform_options_array;   \t\t \t\t\t\t\n    \t\t\t$delay = time()-$department->inform_delay;    \t\t\t\n    \t\t\tif ($chat->time < $delay) {\n    \t\t\t\terLhcoreClassChatWorkflow::newChatInformWorkflow(array('department' => $department,'options' => $options),$chat);\n    \t\t\t}\n    \t\t} else {\n    \t\t\t$chat->nc_cb_executed = 1;\n    \t\t\t$chat->updateThis(array('update' => array('nc_cb_executed')));\n    \t\t}\n    \t}\n    \t\n    \t$contactRedirected = false;\n    \t\n    \tif ($chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT) {\n    \t\t$department = $chat->department;\n    \t\tif ($department !== false) {\n    \t\t\t$delay = time()-$department->delay_lm;\n    \t\t\tif ($department->delay_lm > 0 && $chat->pnd_time < $delay) {\n    \t\t\t\t$baseURL = (isset($Params['user_parameters_unordered']['mode']) && $Params['user_parameters_unordered']['mode'] == 'widget') ? erLhcoreClassDesign::baseurl('chat/chatwidget') : erLhcoreClassDesign::baseurl('chat/startchat');\n    \t\t\t\t$ru = $baseURL.'/(department)/'.$department->id.'/(offline)/true/(leaveamessage)/true/(chatprefill)/'.$chat->id.'_'.$chat->hash;\n    \t\t\t\t\n    \t\t\t\t$msg = new erLhcoreClassModelmsg();\n    \t\t\t\t$msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/checkchatstatus','Visitor has been redirected to contact form');\n    \t\t\t\t$msg->chat_id = $chat->id;\n    \t\t\t\t$msg->user_id = -1;\n    \t\t\t\t$msg->time = time();    \t\t\t\t\n    \t\t\t\terLhcoreClassChat::getSession()->save($msg);\n    \t\t\t\t\n    \t\t\t\t// We do not store last msg time for chat here, because in any case none of opeators has opened it\n    \t\t\t\t$contactRedirected = true;\n    \t\t\t\t\n    \t\t\t\tif ($chat->status_sub != erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM) {\n        \t\t\t\t$chat->status_sub = erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM;\n        \t\t\t\t$chat->updateThis(array('update' => array('status_sub')));\n    \t\t\t\t}\n    \t\t\t\t\n    \t\t\t} else {\n                    if (erLhcoreClassModelChatConfig::fetchCache('disable_live_autoassign')->current_value == 0) {\n    \t\t\t\t    erLhcoreClassChatWorkflow::autoAssign($chat,$department, array('user_init' => true));\n                    }\n    \t\t\t}\n    \t\t}   \t\t\n    \t}    \t\n    \t\n\t    if ( erLhcoreClassChat::isOnline($chat->dep_id,false,array('online_timeout' => (int)erLhcoreClassModelChatConfig::fetch('sync_sound_settings')->data['online_timeout'])) ) {\n\t         $tpl->set('is_online',true);\n\t    } else {\n\t         $tpl->set('is_online',false);\n\t    }\n\n\t    if ( $chat->chat_initiator == erLhcoreClassModelChat::CHAT_INITIATOR_PROACTIVE ) {\n\t         $tpl->set('is_proactive_based',true);\n\t    } else {\n\t         $tpl->set('is_proactive_based',false);\n\t    }\n\n\t    if ($chat->status == erLhcoreClassModelChat::STATUS_ACTIVE_CHAT) {\n\t       $activated = 'true';\n\t       $tpl->set('is_activated',true);\n\t    } else {\n\t       $tpl->set('is_activated',false);\n\t    }\n\n\t    if ($chat->status == erLhcoreClassModelChat::STATUS_CLOSED_CHAT) {\n\t    \t$activated = 'true';\n\t    \t$tpl->set('is_closed',true);\n\t    \t$responseArray['closed'] = true;\n\t    } else {\n\t    \t$tpl->set('is_closed',false);\n\t    }\n\t    \n\t    if ($chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM && $contactRedirected == false) {\n\t    \t$activated = 'false';\n\t    \t$department = $chat->department;\n\t    \tif ($department !== false) {\n\t    \t\t$baseURL = (isset($Params['user_parameters_unordered']['mode']) && $Params['user_parameters_unordered']['mode'] == 'widget') ? erLhcoreClassDesign::baseurl('chat/chatwidget') : erLhcoreClassDesign::baseurl('chat/startchat');\n\t    \t\t$ru = $baseURL.'/(department)/'.$department->id.'/(offline)/true/(leaveamessage)/true/(chatprefill)/'.$chat->id.'_'.$chat->hash;\n\t    \t\t\n\t    \t\t$msg = new erLhcoreClassModelmsg();\n\t    \t\t$msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/checkchatstatus','Visitor has been redirected to contact form');\n\t    \t\t$msg->chat_id = $chat->id;\n\t    \t\t$msg->user_id = -1;\n\t    \t\t$msg->time = time();\n\t    \t\terLhcoreClassChat::getSession()->save($msg);\n\t    \t\t// We do not store last msg time for chat here, because in any case none of opeators has opened it\n\t    \t}\n\t    }\n\t    \n\t    $tpl->set('chat', $chat);\n    } else {\n        $responseArray['error'] = 'false';\n        $responseArray['result'] = '';\n        $responseArray['activated'] = 'true';\n        $responseArray['closed'] = true;\n        echo json_encode($responseArray);\n        exit;\n    }\n    \n    $db->commit();\n} catch (Exception $e) {\n    $db->rollback();\n    exit;\n}\n\n$responseArray['error'] = 'false';\n$responseArray['ru'] = $ru;\n$responseArray['ott'] = $ott;\n$responseArray['result'] = $tpl->fetch();\n$responseArray['activated'] = $activated;\n$responseArray['uid'] = (int)$chat->user_id;\n$responseArray['status'] = (int)$chat->status;\n\nerLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.checkchatstatus',array('chat' => & $chat, 'response' => & $responseArray));\n\necho json_encode($responseArray);\nexit;\n?>", "<?php\r\n\r\nheader('Content-type: application/json');\r\n\r\ntry {\r\n    $chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\r\n\r\n    if ( erLhcoreClassChat::hasAccessToRead($chat) )\r\n    {\r\n        if (is_numeric($Params['user_parameters']['msg_id'])) {\r\n            $lastMessageObj = erLhcoreClassModelmsg::fetch($Params['user_parameters']['msg_id']);\r\n            if ($lastMessageObj instanceof erLhcoreClassModelmsg) {\r\n                $lastMessage = $lastMessageObj->getState();\r\n            }\r\n        } else {\r\n            $lastMessage = erLhcoreClassChat::getGetLastChatMessageEdit($chat->id, $currentUser->getUserID());\r\n        }\r\n\r\n\t\tif (isset($lastMessage['msg'])) {\r\n\t\t    if ($lastMessage['user_id'] == $currentUser->getUserID()) {\r\n                $array = array();\r\n                $array['id'] = $lastMessage['id'];\r\n                $array['msg'] = preg_replace('#\\[translation\\](.*?)\\[/translation\\]#is', '', $lastMessage['msg']);\r\n                $array['error'] = 'f';\r\n\r\n                erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_edit_previous_admin_returned',array('response' => & $array));\r\n\r\n                echo json_encode($array);\r\n            } else {\r\n                echo json_encode(array('error' => 't','result' => 'You can edit your own message!'));\r\n            }\r\n\t\t} else {\r\n\t\t\techo json_encode(array('error' => 't','result' => 'No last message was found!'));\r\n\t\t}\r\n\t}\r\n} catch (Exception $e) {\r\n\techo json_encode(array('error' => 't', 'result' => 'Message could not be found!'));\r\n}\r\nexit;\r\n\r\n\r\n?>", "<?php\r\n\r\nheader('Content-type: application/json');\r\n\r\ntry {\r\n\t$Chat = erLhcoreClassChat::getSession ()->load ( 'erLhcoreClassModelChat', $Params ['user_parameters'] ['chat_id'] );\r\n\t\r\n\tif (erLhcoreClassChat::hasAccessToRead ( $Chat )) {\r\n\t\t\t\t\t\r\n\t\t$msg = erLhcoreClassModelmsg::fetch ( $Params ['user_parameters'] ['msgid'] );\r\n\t\t\r\n\t\tif ($msg->chat_id == $Chat->id) {\r\n\t\t\t\r\n\t\t\t$tpl = erLhcoreClassTemplate::getInstance ( 'lhchat/syncadmin.tpl.php' );\r\n\t\t\t$tpl->set ( 'messages', array (\r\n\t\t\t\t\t( array ) $msg \r\n\t\t\t) );\r\n\t\t\t$tpl->set ( 'chat', $Chat );\r\n\t\t\t\t\t\r\n\t\t\techo json_encode ( array (\r\n\t\t\t\t\t'error' => 'f',\r\n\t\t\t\t\t'msg' => trim ( $tpl->fetch () ) \r\n\t\t\t) );\r\n\t\t\texit;\r\n\t\t}\r\n\t}\r\n\r\n} catch ( Exception $e ) {\r\n\t\r\n}\r\n\r\necho json_encode ( array (\r\n\t\t'error' => 't'\r\n) );\r\n\r\nexit();", "<?php\r\n\r\nheader('Content-type: application/json');\r\n\r\n$db = ezcDbInstance::get();\r\n\r\n$db->beginTransaction();\r\n\r\ntry {\r\n    $chat = erLhcoreClassModelChat::fetchAndLock($Params['user_parameters']['chat_id']);\r\n\r\n    if (!($chat instanceof erLhcoreClassModelChat)) {\r\n        throw new Exception('Chat could not be found!');\r\n    }\r\n\r\n    if (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || !$currentUser->validateCSFRToken($_SERVER['HTTP_X_CSRFTOKEN'])) {\r\n        throw new Exception('Invalid CSRF token!');\r\n    }\r\n\r\n    $msgStatus = '';\r\n\r\n    if (in_array($chat->status_sub,array(erLhcoreClassModelChat::STATUS_SUB_SURVEY_COMPLETED, erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT, erLhcoreClassModelChat::STATUS_SUB_SURVEY_SHOW, erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM))) {\r\n        $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n        $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','Visitor has already left a chat. Hold can not be applied.'), 'time' => time()));\r\n        $msgStatus = $tpl->fetch();\r\n        echo json_encode(array('error' => false, 'hold' => false, 'msg' => $msgStatus));\r\n        exit;\r\n    }\r\n\r\n    if (isset($_POST['sel']) && $_POST['sel'] == 'true') {\r\n\r\n        $hold = false;\r\n        $visitorHoldRemove = false;\r\n\r\n        $chatVariables = $chat->chat_variables_array;\r\n\r\n        if (isset($chatVariables['lhc_hldu'])) {\r\n            unset($chatVariables['lhc_hldu']);\r\n            $visitorHoldRemove = true;\r\n            $chat->chat_variables = json_encode($chatVariables);\r\n            $chat->chat_variables_array = $chatVariables;\r\n        }\r\n\r\n        $chat->status_sub = 0;\r\n        $chat->last_op_msg_time = time();\r\n        $chat->last_user_msg_time = time()-1;\r\n\r\n        if (isset($_POST['op']) && $_POST['op'] == 'usr') {\r\n            $chat->updateThis(array('update' => array('status_sub','last_op_msg_time','last_user_msg_time','chat_variables')));\r\n\r\n            // Hold status change\r\n            $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n            $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','Visitor hold removed!'), 'time' => time()));\r\n            $msgStatus = $tpl->fetch();\r\n\r\n        } else {\r\n\r\n            $fields = array('status_sub','last_op_msg_time','last_user_msg_time');\r\n\r\n            if ($visitorHoldRemove == true) {\r\n                $fields[] = 'chat_variables';\r\n            }\r\n\r\n            $chat->updateThis(array('update' => $fields));\r\n\r\n            if ($chat->auto_responder !== false) {\r\n                $chat->auto_responder->active_send_status = 0;\r\n                $chat->auto_responder->saveThis();\r\n            }\r\n\r\n            // Hold status change\r\n            $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n            $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','Hold removed!'), 'time' => time()));\r\n            $msgStatus = $tpl->fetch();\r\n        }\r\n\r\n    } else {\r\n\r\n        $chat->status_sub = erLhcoreClassModelChat::STATUS_SUB_ON_HOLD;\r\n        $hold = true;\r\n\r\n        if (isset($_POST['op']) && $_POST['op'] == 'usr') {\r\n\r\n            $chatVariables = $chat->chat_variables_array;\r\n            $chatVariables['lhc_hldu'] = 1;\r\n            $chat->chat_variables = json_encode($chatVariables);\r\n            $chat->chat_variables_array = $chatVariables;\r\n            $chat->last_op_msg_time = time();\r\n            $chat->last_user_msg_time = time()-1;\r\n            $chat->updateThis(array('update' => array('status_sub','chat_variables','last_op_msg_time','last_user_msg_time')));\r\n\r\n            $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n            $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','Visitor hold added!'), 'time' => time()));\r\n            $msgStatus = $tpl->fetch();\r\n\r\n        } else {\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.holdaction_defaultmsg',array('msg' => & $msgText, 'chat' => & $chat));\r\n\r\n            $holdMessageSet = false;\r\n\r\n            if ($chat->auto_responder !== false) {\r\n                if ($chat->auto_responder->auto_responder !== false && $chat->auto_responder->auto_responder->wait_timeout_hold != '') {\r\n                    $msgText = $chat->auto_responder->auto_responder->wait_timeout_hold;\r\n\r\n                    $currentUser = erLhcoreClassUser::instance();\r\n                    $userData = $currentUser->getUserData();\r\n\r\n                    $msg = new erLhcoreClassModelmsg();\r\n                    $msg->msg = $msgText;\r\n                    $msg->chat_id = $chat->id;\r\n                    $msg->user_id = $currentUser->getUserID();\r\n                    $msg->time = time();\r\n                    $msg->name_support = $userData->name_support;\r\n\r\n                    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_msg_admin_saved', array('msg' => & $msg, 'chat' => & $chat));\r\n\r\n                    $msg->saveThis();\r\n\r\n                    $chat->last_msg_id = $msg->id;\r\n\r\n                    $holdMessageSet = true;\r\n                }\r\n\r\n                $chat->auto_responder->active_send_status = 0;\r\n                $chat->auto_responder->saveThis();\r\n            }\r\n\r\n            if ($holdMessageSet === false) {\r\n                $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n                $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','Hold added!'), 'time' => time()));\r\n                $msgStatus = $tpl->fetch();\r\n            }\r\n\r\n            $chatVariables = $chat->chat_variables_array;\r\n\r\n            $updateFields = array('last_msg_id','last_op_msg_time','last_user_msg_time','status_sub');\r\n\r\n            if (isset($chatVariables['lhc_hldu'])) {\r\n                unset($chatVariables['lhc_hldu']);\r\n                $chat->chat_variables = json_encode($chatVariables);\r\n                $chat->chat_variables_array = $chatVariables;\r\n                $updateFields[] = 'chat_variables';\r\n            }\r\n\r\n            $chat->last_op_msg_time = time();\r\n            $chat->last_user_msg_time = time()-1;\r\n            $chat->updateThis(array('update' => $updateFields));\r\n        }\r\n    }\r\n\r\n    $db->commit();\r\n\r\n    echo json_encode(array('error' => false, 'hold' => $hold, 'msg' => $msgStatus));\r\n\r\n} catch (Exception $e) {\r\n    $db->rollback();\r\n    echo json_encode(array('error' => true, 'msg' => $e->getMessage()));\r\n}\r\n\r\nexit;\r\n?>", "<?php\r\nheader('Content-type: application/json');\r\n\r\nif (is_numeric($Params['user_parameters']['chat_id']))\r\n{\r\n    $chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\r\n    if ( erLhcoreClassChat::hasAccessToRead($chat) )\r\n    {\r\n         $browse = erLhcoreClassCoBrowse::getBrowseInstance($chat);\r\n         \r\n         $changes = array();\r\n         $changes[] = array('lmsg' => $browse->mtime > 0 ? $browse->mtime_front : '');\r\n         $changes[] = array('finished' => array('status' => !$browse->is_sharing,'text' => $browse->is_sharing == 0 ? erTranslationClassLhTranslation::getInstance()->getTranslation('cobrowse/browse','Screen sharing session has finished') : erTranslationClassLhTranslation::getInstance()->getTranslation('cobrowse/browse','Screen is shared')));\r\n         if ($browse->finished == 1) {\r\n         \t$changes[] = array('clear' => true); \r\n         }\r\n         $changes[] = array('url' => $browse->url);\r\n         $changes[] = array('base' => $browse->url);\r\n         if ($browse->initialize != '') {\r\n         \t$changes[] = json_decode($browse->initialize);\r\n         }\r\n\r\n         echo json_encode($changes);          \r\n    }\r\n}\r\n\r\nexit;\r\n?>", "<?php\r\n\r\nheader('Content-type: application/json');\r\n\r\nif (is_numeric($Params['user_parameters']['chat_id'])) {\r\n    /*\r\n     * If online user mode we have to make different check\r\n     * */\r\n    $browse = false;\r\n    if ($Params['user_parameters_unordered']['cobrowsemode'] == 'onlineuser') {\r\n        $onlineUser = erLhcoreClassModelChatOnlineUser::fetch($Params['user_parameters']['chat_id']);\r\n        $browse = erLhcoreClassCoBrowse::getBrowseInstanceByOnlineUser($onlineUser);\r\n    } else {\r\n        $chat = erLhcoreClassChat::getSession()->load('erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\r\n        if (erLhcoreClassChat::hasAccessToRead($chat)) {\r\n            $browse = erLhcoreClassCoBrowse::getBrowseInstance($chat);\r\n        }\r\n    }\r\n\r\n    if ($browse instanceof erLhcoreClassModelCoBrowse) {\r\n        if ($browse->modifications != '') {\r\n            $changes = json_decode($browse->modifications);\r\n            $changes[] = array('url' => $browse->url);\r\n            $changes[] = array('lmsg' => $browse->mtime > 0 ? $browse->mtime_front : '');\r\n            $changes[] = array('finished' => array('status' => !$browse->is_sharing, 'text' => $browse->is_sharing == 0 ? erTranslationClassLhTranslation::getInstance()->getTranslation('cobrowse/browse', 'Screen sharing session has finished') : erTranslationClassLhTranslation::getInstance()->getTranslation('cobrowse/browse', 'Screen is shared')));\r\n            if ($browse->finished == 1) {\r\n                $changes[] = array('clear' => true);\r\n            }\r\n            array_unshift($changes, array('base' => $browse->url));\r\n            echo json_encode($changes);\r\n            $browse->modifications = '';\r\n            $browse->saveThis();\r\n        } else {\r\n            $changes = array();\r\n            $changes[] = array('lmsg' => $browse->mtime > 0 ? $browse->mtime_front : '');\r\n            $changes[] = array('finished' => array('status' => !$browse->is_sharing, 'text' => $browse->is_sharing == 0 ? erTranslationClassLhTranslation::getInstance()->getTranslation('cobrowse/browse', 'Screen sharing session has finished') : erTranslationClassLhTranslation::getInstance()->getTranslation('cobrowse/browse', 'Screen is shared')));\r\n            if ($browse->finished == 1) {\r\n                $changes[] = array('clear' => true);\r\n            }\r\n            array_unshift($changes, array('base' => $browse->url));\r\n            echo json_encode($changes);\r\n        }\r\n    }\r\n}\r\n\r\nexit;\r\n?>", "<?php\nheader('Content-type: application/json');\n\n$currentUser = erLhcoreClassUser::instance();\n$userData = $currentUser->getUserData(true);\n\nif (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || !$currentUser->validateCSFRToken($_SERVER['HTTP_X_CSRFTOKEN'])) {\n    echo json_encode(array('error' => true, 'active' => true));\n    exit;\n}\n\n// We have to check is operator really inactive or it's just a tab trying to set inactive mode\nif ($Params['user_parameters']['status'] == 'true') {\n    $activityTimeout = erLhcoreClassModelUserSetting::getSetting('trackactivitytimeout',-1);\n\n    // If there is no individual setting user global one\n    if ($activityTimeout == -1) {\n        $activityTimeout = (int)erLhcoreClassModelChatConfig::fetchCache('activity_timeout')->current_value*60;\n    }\n\n    // Operator was still active in another tab, do nothing\n    if ($activityTimeout > (time() - $userData->lastd_activity)) {\n        echo json_encode(array('error' => false, 'active' => true));\n        exit;\n    }\n}\n\nif ($Params['user_parameters']['status'] == 'true') {\n\t$userData->inactive_mode = 1;\n} else {\n\t$userData->inactive_mode = 0;\n}\n\nerLhcoreClassUser::getSession()->update($userData);\n\n// Construct temporary object to change inactive modes\n$userDataTemp = new stdClass();\n$userDataTemp->id = $userData->id;\n\nif ($userData->hide_online == 0) { // change status only if he's not offline manually\n    $userDataTemp->hide_online = $userData->inactive_mode;\n    $userDataTemp->always_on = $userData->always_on;\n\n    erLhcoreClassUserDep::setHideOnlineStatus($userDataTemp);\n}\n\nerLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.operator_inactivemode_changed',array('user' => & $userData, 'reason' => 'user_action'));\n\n\necho json_encode(array('error' => false, 'active' => false));\n\nexit;\n\n?>", "<?php\n\nheader('Content-type: application/json');\n\n$currentUser = erLhcoreClassUser::instance();\nif (!$currentUser->isLogged() && !$currentUser->authenticate($_POST['username'],$_POST['password']))\n{\n    exit;\n}\n\ntry {\n\t$chatTransfer = erLhcoreClassTransfer::getSession()->load( 'erLhcoreClassModelTransfer', $Params['user_parameters']['transfer_id']);\n\t$chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $chatTransfer->chat_id);\n} catch (Exception $e) {\n\texit;\n}\n\n// Set new chat owner\n$currentUser = erLhcoreClassUser::instance();\n$chat->user_id = $currentUser->getUserID();\n\nif  ($chatTransfer->dep_id > 0) {\n\t$chat->dep_id = $chatTransfer->dep_id;\n\n\t// User does not have access to chat in this department, that mean we do not have to do anything\n\tif (!erLhcoreClassChat::hasAccessToRead($chat)){\n\t\texit;\n\t}\n}\n\nif ( !erLhcoreClassChat::hasAccessToRead($chat) )\n{\n\tif ($currentUser->getUserID() == $chatTransfer->transfer_to_user_id) {\n\t\t$chat->dep_id = erLhcoreClassUserDep::getDefaultUserDepartment();\n\t} else {\n\t\texit; // User does not have permission to assign chat to himself\n\t}\n}\n\n// All ok, we can make changes\nerLhcoreClassChat::getSession()->update($chat);\nerLhcoreClassTransfer::getSession()->delete($chatTransfer);\n\nerLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.chat_transfer_accepted',array('chat' => & $chat));\n\necho json_encode(array('error' => 'false'));\nexit;\n?>", "<?php\n\nheader('Content-type: application/json');\n\n$currentUser = erLhcoreClassUser::instance();\nif (!$currentUser->isLogged() && !$currentUser->authenticate($_POST['username'],$_POST['password']))\n{\n    exit;\n}\n\n$transfer = erLhcoreClassTransfer::getTransferByChat($Params['user_parameters']['chat_id']);\n\n$chatTransfer = erLhcoreClassTransfer::getSession()->load( 'erLhcoreClassModelTransfer', $transfer['id']);\n$chat_id = $chatTransfer->chat_id;\nerLhcoreClassTransfer::getSession()->delete($chatTransfer);\n\n$chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $chat_id);\n\n// Set new chat owner\n$chat->user_id = $currentUser->getUserID();\n    \nerLhcoreClassChat::getSession()->update($chat);\n\nerLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.chat_transfer_accepted',array('chat' => & $chat));\n\necho json_encode(array('error' => 'false'));\nexit;\n\n?>", "<?php\n\nheader('Content-type: application/json');\n\n$currentUser = erLhcoreClassUser::instance();\nif (!$currentUser->isLogged() && !$currentUser->authenticate($_POST['username'],$_POST['password']))\n{\n    exit;\n}\n\n$chat = erLhcoreClassModelChat::fetch($Params['user_parameters']['chat_id']);\n\nif ( erLhcoreClassChat::hasAccessToRead($chat) )\n{\n\t\t// If status is pending change status to active\t\t\n        $operatorAccepted = false;\n        $chatDataChanged = false;\n        \n        if ($chat->user_id == 0) {\n        \t$currentUser = erLhcoreClassUser::instance();\n        \t$chat->user_id = $currentUser->getUserID();\n        \t$chatDataChanged = true;\n        }\n         \n        // If status is pending change status to active\n        if ($chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT || $chat->status == erLhcoreClassModelChat::STATUS_BOT_CHAT) {\n        \t$chat->status = erLhcoreClassModelChat::STATUS_ACTIVE_CHAT;\n        \n        \tif ($chat->wait_time == 0) {\n        \t\t$chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\n        \t}\n        \n        \t$chat->user_id = $currentUser->getUserID();\n        \t$operatorAccepted = true;\n        \t$chatDataChanged = true;\n        }\n         \n        if ($chat->support_informed == 0 || $chat->has_unread_messages == 1 ||  $chat->unread_messages_informed == 1) {\n        \t$chatDataChanged = true;\n        }\n\n        // Check does chat transfer record exists if operator opened chat directly\n        if ($chat->transfer_uid > 0) {\n            erLhcoreClassTransfer::handleTransferredChatOpen($chat, $currentUser->getUserID());\n        }\n\n        $chat->support_informed = 1;\n        $chat->has_unread_messages = 0;\n        $chat->unread_messages_informed = 0;\n        erLhcoreClassChat::getSession()->update($chat);\n                \n        $ownerString = 'No data';\n        $user = $chat->getChatOwner();\n        if ($user !== false)\n        {\n            $ownerString = $user->name.' '.$user->surname;\n        }\n        \n        $cannedmsg = erLhcoreClassModelCannedMsg::getCannedMessages($chat->dep_id,$currentUser->getUserID());\n        \n    \techo json_encode(array('operator' => (string)$currentUser->getUserData(true)->name_support,'error' => false, 'canned_messages' => array_values($cannedmsg), 'chat' => $chat, 'ownerstring' => $ownerString));\n    \t\n\t    flush();\n\t    session_write_close();\n\t    \n\t    if ( function_exists('fastcgi_finish_request') ) {\n\t        fastcgi_finish_request();\n\t    };\n\t    \n\t    if ($chatDataChanged == true) {\n\t    \terLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.data_changed',array('chat' => & $chat,'user' => $currentUser));\n\t    }\n    \t    \n\t    if ($operatorAccepted == true) {\n\t    \terLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.accept',array('chat' => & $chat,'user' => $currentUser));\n\t    \terLhcoreClassChat::updateActiveChats($chat->user_id);\n\t    \terLhcoreClassChatWorkflow::presendCannedMsg($chat);\n\t    \t$options = $chat->department->inform_options_array;\n\t    \terLhcoreClassChatWorkflow::chatAcceptedWorkflow(array('department' => $chat->department,'options' => $options),$chat);\n\t    };\t    \n\t    \n} else {\n    echo json_encode(array('error' => true,'error_string' => 'You do not have permission to read this chat!'));\n}\n\nexit;\n?>", "<?php\n\nheader('Content-type: application/json');\n\n$currentUser = erLhcoreClassUser::instance();\nif (!$currentUser->isLogged() && !$currentUser->authenticate($_POST['username'],$_POST['password']))\n{\n    exit;\n}\n\n//erLhcoreClassLog::write(print_r($_POST,true));\n//[chats] => 2|5,2,5,2;8|0,5,2,0,5,2\n//$_POST['chats']   = '6|5,1,4;8|0,5,2,0,5,2';\n\nif ($currentUser->isLogged() && isset($_POST['chats']))\n{\n    $arrayReturn = array();\n\n    $chats = explode(';',$_POST['chats']);\n\n    foreach ($chats as $chatContent)\n    {\n        $paramsExecution = explode('|',$chatContent);\n\n        $chat_id = $paramsExecution[0];\n        $msgIDs = isset($paramsExecution[1]) ? $paramsExecution[1] : '';\n\n        $chatsMessages = array();\n        $chatStatusMessage = '';\n\n        // Get messages from with needs to synchronise\n        $masgIDArray  = array_unique(explode(',',$msgIDs));\n\n        // From this messages we can fetch msg's\n        $minMessageID = min($masgIDArray);\n\n        $Chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $chat_id);\n\n        if ( erLhcoreClassChat::hasAccessToRead($Chat) )\n        {\n            if ( ($Chat->last_msg_id > (int)$minMessageID) && count($Messages = erLhcoreClassChat::getPendingMessages($chat_id,(int)$minMessageID)) > 0)\n            {\n                foreach ($Messages as $msgIndex => $msg)\n                {\n                    foreach ($masgIDArray as $msgID)\n                    {\n                        if ($msgID < $msg['id']) {\n\n                            if (strpos($_SERVER['HTTP_USER_AGENT'],'Dart/') !== false) {\n                                $msg['msg'] = str_replace('\"//','\"'. (erLhcoreClassSystem::$httpsMode == true ? 'https:' : 'http:') . '//' ,erLhcoreClassBBCode::make_clickable($msg['msg'], array('sender' => $msg['user_id'])));\n                            } else {\n                                $msg['msg'] = erLhcoreClassBBCodePlain::make_clickable($msg['msg'], array('sender' => $msg['user_id']));\n                            }\n\n                            $chatsMessages[$msgID][] = $msg;\n                        }\n                    }\n                }\n                \n                if ($Chat->has_unread_messages == 1 || $Chat->unread_messages_informed == 1 ) {\n                \t$Chat->has_unread_messages = 0;\n                \t$Chat->unread_messages_informed = 0;\n                \t$Chat->saveThis();\n                }                \n            }\n        }\n\n        if ($Chat->is_user_typing) {\n            $chatStatusMessage = $Chat->user_typing_txt;\n        } elseif ($Chat->user_status_front == 1) {\n            $chatStatusMessage = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/userleftchat','Visitor has left the chat!');\n        } elseif ($Chat->user_status_front == 0) {\n            $chatStatusMessage = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/userjoined','Visitor has joined the chat!');\n        }\n\n        $arrayReturn[$chat_id]['messages'] = $chatsMessages;\n        $arrayReturn[$chat_id]['chat_status'] = $chatStatusMessage;\n        $arrayReturn[$chat_id]['chat_scode'] = (int)$Chat->user_status_front;\n\n        if ($Chat->user_typing_txt != '') {\n            $arrayReturn[$chat_id]['tt'] = $Chat->user_typing_txt;\n        }\n    }\n\n    echo json_encode(array(\"error\" => false,'result' => $arrayReturn));\n} else {\n    echo json_encode(array(\"error\" => true));\n}\n\n\n\n\n\nexit;\n?>", "<?php\n\n// Debug\n//erLhcoreClassLog::write(print_r($_POST,true));\n\nheader('Content-type: application/json');\n\n@ini_set('session.cookie_samesite', 'None');\n@ini_set('session.cookie_secure', true);\n\n$currentUser = erLhcoreClassUser::instance();\n\nif ($currentUser->authenticate($_POST['username'],$_POST['password']))\n{     \n        echo json_encode(\n            array('result' => true)\n        );\n          \n} else {\n\n    if (($userAttempt = erLhcoreClassModelUser::findOne(array('filter' => array('username' => $_POST['Username'])))) instanceof erLhcoreClassModelUser) {\n        erLhcoreClassModelUserLogin::logUserAction(array(\n            'type' => erLhcoreClassModelUserLogin::TYPE_LOGIN_ATTEMPT,\n            'user_id' => $userAttempt->id,\n            'msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('user/login','Failed login. XML_CHECK_LOGIN')\n        ));\n\n        erLhcoreClassModelUserLogin::disableIfRequired($userAttempt);\n    }\n\n    echo json_encode(\n            array('result' => false)\n        );    \n}\n  \n\nexit;\n?>", "<?php\r\nheader('Content-type: application/json');\r\n\r\n$currentUser = erLhcoreClassUser::instance();\r\nif (!$currentUser->isLogged() && !$currentUser->authenticate($_POST['username'],$_POST['password']))\r\n{\r\n    exit;\r\n}\r\n\r\n$userData = $currentUser->getUserData(true);\r\necho json_encode(array('online' => $userData->hide_online == 1));\r\n\r\nexit;\r\n?>", "<?php\n\nheader('Content-type: application/json');\n\n$currentUser = erLhcoreClassUser::instance();\nif (!$currentUser->isLogged() && !$currentUser->authenticate($_POST['username'],$_POST['password']))\n{\n    exit;\n}\n\n$onlineUsers = erLhcoreClassChat::getOnlineUsers(array($currentUser->getUserID()));\n\necho json_encode(array('result' => $onlineUsers));\n\nexit;\n\n?>", "<?php\r\n\r\nheader('Content-type: application/json');\r\n\r\n$tpl = erLhcoreClassTemplate::getInstance( 'lhxml/userinfo.tpl.php' );\r\n\r\ntry {\r\n\t$onlineUsers = erLhcoreClassModelChatOnlineUser::fetch((int)$Params['user_parameters']['user_id']);\r\n\t$tpl->set('onlineUsers',$onlineUsers);\r\n\techo json_encode(array('user' => $tpl->fetch()));\r\n} catch (Exception $e) {\r\n\techo json_encode(array('user' => '-'));\r\n}\r\n\r\nexit;\r\n?>"], "filenames": ["lhc_web/modules/lhcannedmsg/showsuggester.php", "lhc_web/modules/lhcannedmsg/subject.php", "lhc_web/modules/lhchat/blockuser.php", "lhc_web/modules/lhchat/changestatus.php", "lhc_web/modules/lhchat/checkchatstatus.php", "lhc_web/modules/lhchat/editprevious.php", "lhc_web/modules/lhchat/getmessageadmin.php", "lhc_web/modules/lhchat/holdaction.php", "lhc_web/modules/lhcobrowse/checkinitializer.php", "lhc_web/modules/lhcobrowse/checkmirrorchanges.php", "lhc_web/modules/lhuser/setinactive.php", "lhc_web/modules/lhxml/accepttransfer.php", "lhc_web/modules/lhxml/accepttransferbychat.php", "lhc_web/modules/lhxml/chatdata.php", "lhc_web/modules/lhxml/chatssynchro.php", "lhc_web/modules/lhxml/checklogin.php", "lhc_web/modules/lhxml/getuseronlinestatus.php", "lhc_web/modules/lhxml/transferchat.php", "lhc_web/modules/lhxml/userinfo.php"], "buggy_code_start_loc": [1, 44, 87, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1], "buggy_code_end_loc": [1, 44, 91, 46, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1], "fixing_code_start_loc": [2, 45, 88, 16, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2], "fixing_code_end_loc": [4, 46, 94, 51, 4, 4, 4, 4, 3, 4, 3, 5, 4, 5, 4, 7, 4, 4, 4], "type": "CWE-79", "message": "XSS in livehelperchat in GitHub repository livehelperchat/livehelperchat prior to 3.97. This vulnerability has the potential to deface websites, result in compromised user accounts, and can run malicious code on web pages, which can lead to a compromise of the user\u00e2\u20ac\u2122s device.", "other": {"cve": {"id": "CVE-2022-1234", "sourceIdentifier": "security@huntr.dev", "published": "2022-04-06T04:15:09.147", "lastModified": "2022-04-13T15:03:31.103", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XSS in livehelperchat in GitHub repository livehelperchat/livehelperchat prior to 3.97. This vulnerability has the potential to deface websites, result in compromised user accounts, and can run malicious code on web pages, which can lead to a compromise of the user\u00e2\u20ac\u2122s device."}, {"lang": "es", "value": "Una vulnerabilidad de tipo XSS en livehelperchat en el repositorio de GitHub livehelperchat/livehelperchat versiones anteriores a 3.97. Esta vulnerabilidad presenta el potencial de desfigurar sitios web, resultar en cuentas de usuario comprometidas, y puede ejecutar c\u00f3digo malicioso en las p\u00e1ginas web, lo que puede conllevar a un compromiso del dispositivo del usuario"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:livehelperchat:live_helper_chat:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.97", "matchCriteriaId": "F349805D-9BF0-4730-9824-F4A3DB5272A3"}]}]}], "references": [{"url": "https://github.com/livehelperchat/livehelperchat/commit/a09aa0d793818dc4cae78ac4bcfb557d4fd2a30d", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/0d235252-0882-4053-85c1-b41b94c814d4", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/livehelperchat/livehelperchat/commit/a09aa0d793818dc4cae78ac4bcfb557d4fd2a30d"}}