{"buggy_code": ["Surpass\n=====\n\nA PHP package mainly developed for Laravel to manage uploading images using Ajax and displaying thumbnails.\n\n(Example)  \n!['Kitsilano'](http://i.imgur.com/cJ6t50G.png)\n\nRequirements\n====\n\njQuery, jQuery UI and \n[blueimp/jQuery-File-Upload](https://github.com/blueimp/jQuery-File-Upload)\n\n\nInstallation&setting for Laravel\n====\n\nAfter installation using composer, add the followings to the array in  app/config/app.php\n\n    'providers' => array(  \n        ...Others...,  \n        'Sukohi\\Surpass\\SurpassServiceProvider', \n    )\n\n\n    'aliases' => array(  \n        ...Others...,  \n        'Surpass' =>'Sukohi\\Surpass\\Facades\\Surpass',\n    )\n\nAnd execute the followings.  \n**Note: If you get errors after updating, also execute them.**\n\n    php artisan migrate --package=sukohi/surpass\n    \n    php artisan view:publish sukohi/surpass\n\nUsage\n====\n\n(See also a folder named \"exaple\" which has some files.)\n\n**Upload  (in Controller)**\n\n\t$surpass = Surpass::path('img/uploads')\n\t\t\t\t\t->dir('dir_name')\n\t\t\t\t\t->ids([\n\t\t\t\t\t\t'input' => 'image_upload',\n\t\t\t\t\t\t'preview' => 'preview_images'\n\t\t\t\t\t])\n\t\t\t\t\t->maxFiles(5)\n\t\t\t\t\t->alert('You can upload up to %d files.')\n\t\t\t\t\t->formData([\n\t\t\t\t\t\t'key_1' => 'value_1', \n\t\t\t\t\t\t'key_2' => 'value_2', \n\t\t\t\t\t\t'key_3' => 'value_3'\n\t\t\t\t\t])\n\t\t\t\t\t->preview(['maxHeight' => 120])\n\t\t\t\t\t->css([\n\t\t\t\t\t\t'div' => 'div_class', \n\t\t\t\t\t\t'button' => 'button_class', \n\t\t\t\t\t\t'preview' => 'preview_class', \n\t\t\t\t\t\t'loading' => 'loading_class'\n\t\t\t\t\t])\n\t\t\t\t\t->progress('<img src=\"http://example.com/img/ajax-loader.gif\"><br>Uploading..')\n\t\t\t\t\t->callback([\n\t\t\t\t\t\t'upload' => 'alert(\"Uploading..\");', \n\t\t\t\t\t\t'done' => 'alert(\"Done.\");',\n\t\t\t\t\t\t'failed' => 'alert(\"Failed..\");', \n\t\t\t\t\t\t'remove' => 'alert(\"Removed\");', \n\t\t\t\t\t\t'load' => 'alert(\"Loading..\");',\n                        'timeout' => 'alert(\"Timeout..\");',\n                        'file_type_error' => 'alert(\"Only image files are allowed\");'\n\t\t\t\t\t])\n\t\t\t\t\t->timeout(3000) // 3 seconds\n\t\t\t\t\t->overwrite(false)   // When using overwriting-mode\n\t\t\t\t\t->resize(['maxWidth' => '100', 'maxHeight' => '50'], $force_crop = false)   // Client Resizing(See \"About resizing\")\n\t\t\t\t\t->dropZone('drop_zone_id')  // See \"Drop Zone\"\n\t\t\t\t\t->button('Remove');\n\t$surpass->load([1, 2, 3]);    // These are IDs of DB that you saved image(s) in the past.\n\n\treturn View::make('surpass', [\n\t\t\t\n\t\t'surpass' => $surpass\n\t\t\t\n\t]);\n\n**Upload  (in View)**\n\n    (in View)    \n    \n    Note: Need to load jQuery, jQuery UI and jQuery-File-Upload(Loading order is important.See the below.)\n    \n    @section('content')\n    \n        <form>\n        \t<input \n        \t\tid=\"image_upload\" \n        \t\tname=\"image_upload\" \n        \t\ttitle=\"Select Image\" \n        \t\tdata-url=\"http://example.com/upload\" \n        \t\tdata-remove-url=\"http://example.com/remove\" \n        \t\taccept=\"image/*\" \n        \t\ttype=\"file\" multiple>\n        \t\t\n    \t\t<!-- Preview(s) will be displayed here -->\n        \t{{ $surpass->html('preview') }}\n        </form>\n    @stop\n    \n    @section('script')\n    \n        <!-- Load required JS files. -->\n        <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js\"></script>\n        <script src=\"bower_components/blueimp-file-upload/js/vendor/jquery.ui.widget.js\"></script>\n        <script src=\"bower_components/blueimp-load-image/js/load-image.all.min.js\"></script>\n        <script src=\"bower_components/blueimp-canvas-to-blob/js/canvas-to-blob.js\"></script>\n        <script src=\"bower_components/blueimp-file-upload/js/jquery.iframe-transport.js\"></script>\n        <script src=\"bower_components/blueimp-file-upload/js/jquery.fileupload.js\"></script>\n        <script src=\"bower_components/blueimp-file-upload/js/jquery.fileupload-process.js\"></script>\n        <script src=\"bower_components/blueimp-file-upload/js/jquery.fileupload-image.js\"></script>\n        <script src=\"bower_components/blueimp-tmpl/js/tmpl.min.js\"></script>\n    \n        <!-- JS code (including script tag) will be displayed here -->\n        {{ $surpass->html('js') }}\n    @stop\n\n**Upload (Ajax)**\n\t\n\t*Important: To save images you want, you need to make a specific dir which must be writable in advance.\n\t\n    // To save an image and the data into DB\n\n\t$surpass = Surpass::path('img/uploads')\n\t\t\t\t\t->id('input', 'image_upload');\n\t$attributes = array('alt' => 'alt_value', 'title' => 'title_value');  // Skippable\n\n\tif($surpass->save($attributes = array())) {\n\t\n\t    // You can get the data of saved image like this.\n\t\n\t\t$load_item = $surpass->loadSaved();\n\t\t$id = $load_item->id;\n\t\t$dir = $load_item->dir;\n\t\t$filename = $load_item->filename;\n\t\t$path = $load_item->path;\n\t\t$url = $load_item->url;\n\t\t$attributes = $load_item->attributes;\n\t\t$tag = $load_item->tag;\n\t\t\n\t\t// You can save attributes also here. (Of course you can do that at other places.)\n\t\t\n\t\t$id = $load_item->id;\n\t\t$surpass->saveAttributes($id, array(\n\t\t    'key_1' => 'value_1',\n\t\t    'key_2' => 'value_2',\n\t\t    'key_3' => 'value_3'\n\t\t));\n\t\t\n\t}\n\t\n\treturn $surpass->result();  // This will return json.\n\t\n*Note: If uploading completed, the result data(json) has the following values.\n\n1.result : true / false  \n2.insertId  \n3.path  \n4.dir  \n5.filename  \n6.file_path  \n7.extension  \n8.width  \n9.height  \n10.mime_type  \n11.saveMode : overwrite / insert\n\n**Remove (Ajax)**\n\n    // To remove an image and the data into DB\n\n\t$surpass = Surpass::path('img/uploads');\n\t\n\tif($surpass->remove()) {\n\t\t// Something..\n\t}\n\t\n\treturn $surpass->result();  // This will return json.\n\t\n**Minimal Way**\n\n(in Contoller)\n    \n\n\t$surpass = Surpass::path('img/uploads')->dir('dir_name');\n\t$surpass->load([1, 2, 3]);\n(in View)\nSee above. \n\t\n(in Upload Ajax)\n\n\t$surpass = Surpass::path('img/uploads');\n\t$dir = $surpass->requestDir();\n\t\n\tif($surpass->save()) {\n\t\t// Something..\n\t}\n\t\n\treturn $surpass->result();\n(in Remove Ajax)\n\t\n\t\n\t$surpass = Surpass::path('img/uploads');\n\t\n\tif($surpass->remove()) {\n\t\t// Something..\n\t}\n\t\n\treturn $surpass->result();\n\n**Refresh**  \nThis method will remove all data and images that don't already exist.  \n\n    $surpass = Surpass::path('img/uploads');\n    $surpass->refresh();\n\t\n**Remove by ID**\n\t\n    $surpass = Surpass::path('img/uploads')\n\t\t\t\t\t->removeById(1);\n\t// or\n    $surpass = Surpass::path('img/uploads')\n\t\t\t\t\t->removeById([1, 2, 3]);\n**Load with validation**\n\n    $ids = [1, 2, 3];\n    $surpass->load($ids, $old_flag = true);\n    // If $old_flag is true, $ids will be replaced with Input::old() value(s) automatically.\n    \n**Get image file id(s) when submitting**\n\t\n    Surpass::imageFileId('dir_name');\n    Surpass::imageFileIds('dir_name');\n\t\n**About Saved IDs**\n\nAfeter uploading image(s) with Ajax, the preview(s) have hidden-input-tag(s) named \"surpass_ids[]\" (and of course the value(s) are ID of DB saved at the time).  \nSo when submitting, you can receive those data as array.\n\n**with Multiple file-inputs**\n\n    (in Controller)\n\t$surpass = Surpass::path('img/uploads');\n\t$surpass_x = clone $surpass->dir('xxx')\n\t\t\t\t\t->ids([\n\t\t\t\t\t\t'input' => 'input-xxx',\n\t\t\t\t\t\t'preview' => 'preview-xxx'\n\t\t\t\t\t]);\n\t$surpass_y = clone $surpass->dir('yyy')\n\t\t\t\t\t->ids([\n\t\t\t\t\t\t'input' => 'input-yyy',\n\t\t\t\t\t\t'preview' => 'preview-yyy'\n\t\t\t\t\t]);\n\treturn View::make('view', [\n\t\t'surpass_x' => $surpass_x,\n\t\t'surpass_y' => $surpass_y\n\t]);\n\t\n\t(in View)\n\t<input \n\t\tid=\"input-xxx\" \n\t\tname=\"input-xxx\" \n\t\ttitle=\"Select Image\" \n\t\tdata-url=\"http://example.com/upload\" \n\t\tdata-remove-url=\"http://example.com/remove\" \n\t\taccept=\"image/*\" \n\t\ttype=\"file\" multiple>\n\t{{ $surpass_x->html('preview') }}\n\t<input \n\t\tid=\"input-yyy\" \n\t\tname=\"input-yyy\" \n\t\ttitle=\"Select Image\" \n\t\tdata-url=\"http://example.com/upload\" \n\t\tdata-remove-url=\"http://example.com/remove\" \n\t\taccept=\"image/*\" \n\t\ttype=\"file\" multiple>\n\t{{ $surpass_y->html('preview') }}\n    // JS\n    {{ $surpass_x->html('js') }}\n    {{ $surpass_y->html('js') }}\n\n**Set filename length**\n\n    Surpass::filenameLength(10);    // Default: 10\n\n**Insert**\n\n    $insert_id = Surpass::path('path')\n                    ->dir('dir')\n                    ->insert('file_path', $attributes = array());\n\n    *Note: This method is to save image(s) and their data directly like seeding.  \n    So, in usual you should use save() method.\n\n**Drop Zone**\n\nIf you'd like to upload images through Drop Zone(using Drag and Drop), add a div-tag like the below.\n    \n    (in Controller)\n    \n    $surpass->dropZone('drop_zone_id');\n    \n    \n    (in View)\n    \n    <div id=\"drop_zone_id\">Drop images here!</div>\n\n**Save Attributes**\n\n    $id = 1;    // Here means ID of \"image_files\" table.\n    $surpass->saveAttributes($id, array(\n        'key_1' => 'value_1',\n        'key_2' => 'value_2',\n        'key_3' => 'value_3'\n    ));\n    \n    *Note: The old attributes data will be removed.\n\nLicense\n====\n\nThis package is licensed under the MIT License.\n\nCopyright 2014 Sukohi Kuhoh", "<?php namespace Sukohi\\Surpass;\n\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Response;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\File;\nuse Illuminate\\Support\\Facades\\URL;\nuse Carbon\\Carbon;\nuse Exception;\n\nclass Surpass {\n\n    const TABLE = 'image_files';\n    const DIR_HIDDEN_NAME = 'surpass_hidden_dir';\n    const ID_HIDDEN_NAME = 'surpass_ids';\n    const KEY_HIDDEN_NAME = 'surpass_keys';\n    const KEY_OVERWRITE_ID = 'surpass_overwrite_id';\n    private $_path, $_dir, $_progress;\n    private $_alert = 'You can upload up to %d files.';\n    private $_button = 'Remove';\n    private $_drop_zone_id, $_id_hidden_name = '';\n    private $_max_files = 5;\n    private $_filename_length = 10;\n    private $_timeout = 0;\n    private $_form_data, $_result, $_load, $_resize_params, $_css = array();\n    private $_overwrite = false;\n    private $_ids = array(\n\n        'input' => 'image_upload',\n        'preview' => 'preview_images'\n\n    );\n    private $_callbacks = array(\n        'add' => '',\n        'done' => ''\n    );\n    private $_preview_params = array(\n\n        'maxHeight' => 120\n\n    );\n\n    public function path($path) {\n\n        $this->_path = $path;\n        return $this;\n\n    }\n\n    public function dir($dir) {\n\n        $this->_dir = $dir;\n        $this->_id_hidden_name = self::ID_HIDDEN_NAME .'_'. $dir;\n        return $this;\n\n    }\n\n    public function id($mode, $id) {\n\n        $this->_ids[$mode] = $id;\n        return $this;\n\n    }\n\n    public function ids($ids) {\n\n        $this->_ids = $ids;\n        return $this;\n\n    }\n\n    public function renderId($mode) {\n\n        return $this->_ids[$mode];\n\n    }\n\n    public function maxFiles($max_files) {\n\n        $this->_max_files = $max_files;\n        return $this;\n\n    }\n\n    public function alert($alert) {\n\n        $this->_alert = $alert;\n        return $this;\n\n    }\n\n    public function formData($form_data) {\n\n        $this->_form_data = $form_data;\n        return $this;\n\n    }\n\n    public function button($label) {\n\n        $this->_button = $label;\n        return $this;\n\n    }\n\n    public function preview($params) {\n\n        $this->_preview_params = $params;\n        return $this;\n\n    }\n\n    public function resize($size, $force_crop = true) {\n\n        $this->_resize_params = ['size' => $size, 'force_crop' => $force_crop];\n        return $this;\n\n    }\n\n    public function timeout($milliseconds) {\n\n        $this->_timeout = intval($milliseconds);\n        return $this;\n\n    }\n\n    public function overwrite($bool = false) {\n\n        $this->_overwrite = $bool;\n        return $this;\n\n    }\n\n    public function css($css) {\n\n        $this->_css = $css;\n        return $this;\n\n    }\n\n    public function progress($content) {\n\n        $this->_progress = $content;\n        return $this;\n\n    }\n\n    public function callback($callbacks) {\n\n        $this->_callbacks = $callbacks;\n        return $this;\n\n    }\n\n    public function dropZone($id) {\n\n        $this->_drop_zone_id = $id;\n        return $this;\n\n    }\n\n    public function renderCss($mode) {\n\n        return (!empty($this->_css[$mode])) ? ' class=\"'. $this->_css[$mode] .'\"' : '';\n\n    }\n\n    public function html($mode) {\n\n        if($mode == 'preview') {\n\n            return View::make('packages.sukohi.surpass.preview', array(\n                'id' => $this->renderId('preview'),\n                'css' => $this->renderCss('preview')\n            ))->render();\n\n        } else if($mode == 'js') {\n\n            $load_data = [];\n\n            if(!empty($this->_load)) {\n\n                foreach ($this->_load as $id => $load) {\n\n                    $load_data[] = array(\n\n                        'id' => $id,\n                        'url' => $load->url,\n                        'filename' => $load->filename\n\n                    );\n\n                }\n\n            }\n            $this->_form_data[self::DIR_HIDDEN_NAME] = $this->_dir;\n            $this->_form_data[self::KEY_HIDDEN_NAME] = json_encode($this->_ids);\n\n            return View::make('packages.sukohi.surpass.js', array(\n\n                'max_file' => $this->_max_files,\n                'load_data' => $load_data,\n                'form_data' => $this->_form_data,\n                'alert' => sprintf($this->_alert, $this->_max_files),\n                'button_label' => $this->_button,\n                'preview_params' => $this->_preview_params,\n                'resize_params' => $this->_resize_params,\n                'progress' => $this->_progress,\n                'callbacks' => $this->_callbacks,\n                'drop_zone_id' => $this->_drop_zone_id,\n                'id_hidden_name' => $this->_id_hidden_name,\n                'dir' => strtolower($this->_dir),\n                'dir_studly' => studly_case($this->_dir),\n                'input_id' => $this->renderId('input'),\n                'preview_id' => $this->renderId('preview'),\n                'css_div' => Surpass::renderCss('div'),\n                'css_loading' => Surpass::renderCss('loading'),\n                'css_button' => Surpass::renderCss('button'),\n                'overwrite' => $this->_overwrite,\n                'timeout' => $this->_timeout\n\n            ))->render();\n\n        }\n\n    }\n\n    public function filenameLength($length) {\n\n        $this->_filename_length = $length;\n        return $this;\n\n    }\n\n    public function insert($file_path, $attributes = array()) {\n\n        if(!File::exists($file_path)) {\n\n            return -1;\n\n        }\n\n        DB::beginTransaction();\n\n        try {\n\n            $extension = File::extension($file_path);\n            $filename = $this->filename($extension);\n            $size = File::size($file_path);\n            $save_dir = $this->filePath($this->_dir);\n\n            if(!File::exists($save_dir)) {\n\n                File::makeDirectory($save_dir);\n\n            }\n\n            $save_path = $save_dir .'/'. $filename;\n            File::copy($file_path, $save_path);\n            DB::commit();\n\n        } catch (Exception $e) {\n\n            DB::rollback();\n            return -1;\n\n        }\n\n        return $this->saveData($filename, $extension, $size, $attributes);\n\n    }\n\n    public function save($attributes = array()) {\n\n        $this->dir(Input::get(self::DIR_HIDDEN_NAME));\n        $this->ids(json_decode(Input::get(self::KEY_HIDDEN_NAME), true));\n        $result = false;\n        $id = $width = $height = -1;\n        $mime_type = '';\n        $input_id = $this->_ids['input'];\n        $extension = Input::file($input_id)->getClientOriginalExtension();\n        $filename = $this->filename($extension);\n        $file_size = Input::file($input_id)->getSize();\n        $error_message = '';\n\n        DB::beginTransaction();\n\n        try {\n\n            $save_path = $this->filePath($this->_dir);\n\n            if(!file_exists($save_path)) {\n\n                throw new Exception('The directory doesn\\'t exist.');\n\n            } else if(!is_writable($save_path)) {\n\n                throw new Exception('The directory is not writable.');\n\n            }\n\n            Input::file($input_id)->move($save_path, $filename);\n            $id = $this->saveData($filename, $extension, $file_size, $attributes);\n            DB::commit();\n            list($width, $height, $image_type) = getimagesize($save_path .'/'. $filename);\n            $mime_type = image_type_to_mime_type ($image_type);\n            $result = true;\n\n        } catch (Exception $e) {\n\n            $error_message = $e->getMessage();\n            $filename = null;\n            DB::rollback();\n\n        }\n\n        $this->_result = array(\n            'result' => $result,\n            'insertId' => $id,\n            'path' => $this->_path,\n            'dir' => $this->_dir,\n            'filename' => $filename,\n            'file_path' => $this->_path .'/'. $this->_dir .'/'. $filename,\n            'extension' => $extension,\n            'width' => $width,\n            'height' => $height,\n            'mime_type' => $mime_type,\n            'saveMode' => ($this->isOverwrite()) ? 'overwrite' : 'insert'\n        );\n\n        if(!empty($error_message)) {\n\n            $this->_result['error_message'] = $error_message;\n\n        }\n\n        return $result;\n\n    }\n\n    public function saveAttributes($id, $attributes) {\n\n        return DB::table(self::TABLE)->where('id', $id)->update(array(\n            'attributes' => json_encode($attributes)\n        ));\n\n    }\n\n    public function remove() {\n\n        $result = $this->removeById(intval(Input::get('remove_id')));\n        $this->_result = array('result' => $result);\n        return $result;\n\n    }\n\n    public function removeById($ids = '') {\n\n        $result = false;\n\n        if(empty($ids)) {\n\n            return $result;\n\n        }\n\n        if(!is_array($ids)) {\n\n            $ids = array($ids);\n\n        }\n\n        DB::beginTransaction();\n\n        try {\n\n            foreach ($ids as $id) {\n\n                $db = DB::table(self::TABLE)->where('id', '=', $id);\n                $image_file = $db->select('dir', 'filename')->first();\n                $remove_path = $this->filePath($image_file->dir, $image_file->filename);\n                File::delete($remove_path);\n                $db->delete();\n\n            }\n\n            DB::commit();\n            $result = true;\n\n        } catch (Exception $e) {\n\n            DB::rollback();\n\n        }\n\n        return $result;\n\n    }\n\n    public function result() {\n\n        $result = $this->_result;\n        $this->_result = array();\n        return Response::json($result);\n\n    }\n\n    public function refresh() {\n\n        DB::beginTransaction();\n\n        try {\n\n            $image_files = DB::table(self::TABLE)->select('id', 'dir', 'filename')->get();\n            $exists_image_paths = array();\n\n            foreach ($image_files as $key => $image_file) {\n\n                $path = $this->filePath($image_file->dir, $image_file->filename);\n\n                if(!file_exists($path)) {\n\n                    DB::table(self::TABLE)\n                        ->where('id', '=', $image_file->id)\n                        ->delete();\n\n                } else {\n\n                    $exists_image_paths[] = public_path($this->_path .'/'. $image_file->dir .'/'. $image_file->filename);\n\n                }\n\n            }\n\n            $files = File::allFiles($this->_path);\n\n            foreach ($files as $file) {\n\n                $remove_path = $file->getRealPath();\n\n                if(!in_array($remove_path, $exists_image_paths)) {\n\n                    File::delete($remove_path);\n\n                }\n\n            }\n\n            DB::commit();\n            return true;\n\n        } catch (Exception $e) {\n\n            DB::rollback();\n            return false;\n\n        }\n\n    }\n\n    public function load($ids=array(), $old_flag=true) {\n\n        if(!is_array($ids)) {\n\n            $ids = [$ids];\n\n        }\n\n        if($old_flag\n            && Input::old($this->_id_hidden_name)\n            && is_array(Input::old($this->_id_hidden_name))) {\n\n            $ids = Input::old($this->_id_hidden_name);\n\n        }\n\n        if(!empty($ids)) {\n\n            $this->_load = array();\n            $image_files = DB::table(self::TABLE)\n                ->select('id', 'dir', 'filename', 'extension', 'size', 'created_at', 'attributes')\n                ->whereIn('id', $ids)\n                ->get();\n\n            foreach ($image_files as $image_file) {\n\n                $this->addLoadObject(array(\n\n                    'id' => $image_file->id,\n                    'dir' => $image_file->dir,\n                    'filename' => $image_file->filename,\n                    'extension' => $image_file->extension,\n                    'size' => $image_file->size,\n                    'created_at' => $image_file->created_at,\n                    'attributes' => json_decode($image_file->attributes, true)\n\n                ));\n\n            }\n\n        }\n\n        return $this;\n\n    }\n\n    public function loadSaved() {\n\n        $keys = array_keys($this->_load);\n        return $this->_load[end($keys)];\n\n    }\n\n    public function loadData() {\n\n        return $this->_load;\n\n    }\n\n    public function imageFileId($dir) {\n\n        $ids = Surpass::imageFileIds($dir);\n\n        if(!empty($ids)) {\n\n            return $ids[0];\n\n        }\n\n        return '';\n\n    }\n\n    public function imageFileIds($dir) {\n\n        $this->dir($dir);\n        $id_hidden_name = Input::get($this->_id_hidden_name);\n        $ids = !empty($id_hidden_name) ? Input::get($this->_id_hidden_name) : [];\n        sort($ids);\n        return $ids;\n\n    }\n\n    private function filePath($dir, $filename='') {\n\n        $path = $this->_path .'/'. $dir;\n\n        if(!empty($filename)) {\n\n            $path .= '/'. $filename;\n\n        }\n\n        return public_path($path);\n\n    }\n\n    private function fileUrl($dir, $filename) {\n\n        return URL::to($this->_path .'/'. $dir .'/'. $filename);\n\n    }\n\n    private function addLoadObject($params) {\n\n        $id = $params['id'];\n        $dir = $params['dir'];\n        $filename = $params['filename'];\n        $attributes = $params['attributes'];\n\n        $load = new \\stdClass;\n        $load->id = $id;\n        $load->dir = $dir;\n        $load->filename = $filename;\n        $load->path = $this->filePath($dir, $filename);\n        $load->url = $this->fileUrl($dir, $filename);\n        $load->attributes = $attributes;\n        $load->tag = '<img src=\"'. $load->url .'\"'. $this->generateAttribute($attributes) .'>';\n        $this->_load[$id] = $load;\n\n    }\n\n    private function generateAttribute($attributes) {\n\n        $return = '';\n\n        if(!empty($attributes)) {\n\n            foreach ($attributes as $key => $value) {\n\n                $return .= ' '. $key .'=\"'. $value .'\"';\n\n            }\n\n        }\n\n        return $return;\n\n    }\n\n    private function filename($extension) {\n\n        return str_random($this->_filename_length) .'.'. $extension;\n\n    }\n\n    private function isOverwrite() {\n\n        return (Input::has(self::KEY_OVERWRITE_ID) && Input::get(self::KEY_OVERWRITE_ID) > 0);\n\n    }\n\n    private function saveData($filename, $extension, $size, $attributes) {\n\n        $save_params = array(\n\n            'dir' => $this->_dir,\n            'filename' => $filename,\n            'extension' => $extension,\n            'size' => $size,\n            'created_at' => Carbon::now(),\n            'attributes' => (!empty($attributes)) ? json_encode($attributes) : ''\n\n        );\n\n        if($this->isOverwrite()) {\n\n            $id = Input::get(self::KEY_OVERWRITE_ID);\n            DB::table(self::TABLE)->where('id', $id)->update($save_params);\n\n        } else {\n\n            $id = DB::table(self::TABLE)->insertGetId($save_params);\n\n        }\n\n        if($id > 0) {\n\n            $save_params['id'] = $id;\n            $save_params['attributes'] = $attributes;\n            $this->addLoadObject($save_params);\n\n        } else {\n\n            $id = -1;\n            throw new Exception('Save Failed.');\n\n        }\n\n        return $id;\n\n    }\n\n}"], "fixing_code": ["Surpass\n=====\n\nA PHP package mainly developed for Laravel to manage uploading images using Ajax and displaying thumbnails.\n\n(Example)  \n!['Kitsilano'](http://i.imgur.com/cJ6t50G.png)\n\nRequirements\n====\n\njQuery, jQuery UI and \n[blueimp/jQuery-File-Upload](https://github.com/blueimp/jQuery-File-Upload)\n\n\nInstallation&setting for Laravel\n====\n\nAfter installation using composer, add the followings to the array in  app/config/app.php\n\n    'providers' => array(  \n        ...Others...,  \n        'Sukohi\\Surpass\\SurpassServiceProvider', \n    )\n\n\n    'aliases' => array(  \n        ...Others...,  \n        'Surpass' =>'Sukohi\\Surpass\\Facades\\Surpass',\n    )\n\nAnd execute the followings.  \n**Note: If you get errors after updating, also execute them.**\n\n    php artisan migrate --package=sukohi/surpass\n    \n    php artisan view:publish sukohi/surpass\n\nUsage\n====\n\n(See also a folder named \"exaple\" which has some files.)\n\n**Upload  (in Controller)**\n\n\t$surpass = Surpass::path('img/uploads')\n\t\t\t\t\t->dir('dir_name')\n\t\t\t\t\t->ids([\n\t\t\t\t\t\t'input' => 'image_upload',\n\t\t\t\t\t\t'preview' => 'preview_images'\n\t\t\t\t\t])\n\t\t\t\t\t->maxFiles(5)\n\t\t\t\t\t->alert('You can upload up to %d files.')\n\t\t\t\t\t->formData([\n\t\t\t\t\t\t'key_1' => 'value_1', \n\t\t\t\t\t\t'key_2' => 'value_2', \n\t\t\t\t\t\t'key_3' => 'value_3'\n\t\t\t\t\t])\n\t\t\t\t\t->preview(['maxHeight' => 120])\n\t\t\t\t\t->css([\n\t\t\t\t\t\t'div' => 'div_class', \n\t\t\t\t\t\t'button' => 'button_class', \n\t\t\t\t\t\t'preview' => 'preview_class', \n\t\t\t\t\t\t'loading' => 'loading_class'\n\t\t\t\t\t])\n\t\t\t\t\t->progress('<img src=\"http://example.com/img/ajax-loader.gif\"><br>Uploading..')\n\t\t\t\t\t->callback([\n\t\t\t\t\t\t'upload' => 'alert(\"Uploading..\");', \n\t\t\t\t\t\t'done' => 'alert(\"Done.\");',\n\t\t\t\t\t\t'failed' => 'alert(\"Failed..\");', \n\t\t\t\t\t\t'remove' => 'alert(\"Removed\");', \n\t\t\t\t\t\t'load' => 'alert(\"Loading..\");',\n                        'timeout' => 'alert(\"Timeout..\");',\n                        'file_type_error' => 'alert(\"Only image files are allowed\");'\n\t\t\t\t\t])\n\t\t\t\t\t->timeout(3000) // 3 seconds\n\t\t\t\t\t->overwrite(false)   // When using overwriting-mode\n\t\t\t\t\t->resize(['maxWidth' => '100', 'maxHeight' => '50'], $force_crop = false)   // Client Resizing(See \"About resizing\")\n\t\t\t\t\t->dropZone('drop_zone_id')  // See \"Drop Zone\"\n\t\t\t\t\t->button('Remove');\n\t$surpass->load([1, 2, 3]);    // These are IDs of DB that you saved image(s) in the past.\n\n\treturn View::make('surpass', [\n\t\t\t\n\t\t'surpass' => $surpass\n\t\t\t\n\t]);\n\t\n\t\n*Note: method dir('dir_name') can no longer receive \"/\" and \".\" to protect from directory traversal attack.\n\n**Upload  (in View)**\n\n    (in View)    \n    \n    Note: Need to load jQuery, jQuery UI and jQuery-File-Upload(Loading order is important.See the below.)\n    \n    @section('content')\n    \n        <form>\n        \t<input \n        \t\tid=\"image_upload\" \n        \t\tname=\"image_upload\" \n        \t\ttitle=\"Select Image\" \n        \t\tdata-url=\"http://example.com/upload\" \n        \t\tdata-remove-url=\"http://example.com/remove\" \n        \t\taccept=\"image/*\" \n        \t\ttype=\"file\" multiple>\n        \t\t\n    \t\t<!-- Preview(s) will be displayed here -->\n        \t{{ $surpass->html('preview') }}\n        </form>\n    @stop\n    \n    @section('script')\n    \n        <!-- Load required JS files. -->\n        <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js\"></script>\n        <script src=\"bower_components/blueimp-file-upload/js/vendor/jquery.ui.widget.js\"></script>\n        <script src=\"bower_components/blueimp-load-image/js/load-image.all.min.js\"></script>\n        <script src=\"bower_components/blueimp-canvas-to-blob/js/canvas-to-blob.js\"></script>\n        <script src=\"bower_components/blueimp-file-upload/js/jquery.iframe-transport.js\"></script>\n        <script src=\"bower_components/blueimp-file-upload/js/jquery.fileupload.js\"></script>\n        <script src=\"bower_components/blueimp-file-upload/js/jquery.fileupload-process.js\"></script>\n        <script src=\"bower_components/blueimp-file-upload/js/jquery.fileupload-image.js\"></script>\n        <script src=\"bower_components/blueimp-tmpl/js/tmpl.min.js\"></script>\n    \n        <!-- JS code (including script tag) will be displayed here -->\n        {{ $surpass->html('js') }}\n    @stop\n\n**Upload (Ajax)**\n\t\n\t*Important: To save images you want, you need to make a specific dir which must be writable in advance.\n\t\n    // To save an image and the data into DB\n\n\t$surpass = Surpass::path('img/uploads')\n\t\t\t\t\t->id('input', 'image_upload');\n\t$attributes = array('alt' => 'alt_value', 'title' => 'title_value');  // Skippable\n\n\tif($surpass->save($attributes = array())) {\n\t\n\t    // You can get the data of saved image like this.\n\t\n\t\t$load_item = $surpass->loadSaved();\n\t\t$id = $load_item->id;\n\t\t$dir = $load_item->dir;\n\t\t$filename = $load_item->filename;\n\t\t$path = $load_item->path;\n\t\t$url = $load_item->url;\n\t\t$attributes = $load_item->attributes;\n\t\t$tag = $load_item->tag;\n\t\t\n\t\t// You can save attributes also here. (Of course you can do that at other places.)\n\t\t\n\t\t$id = $load_item->id;\n\t\t$surpass->saveAttributes($id, array(\n\t\t    'key_1' => 'value_1',\n\t\t    'key_2' => 'value_2',\n\t\t    'key_3' => 'value_3'\n\t\t));\n\t\t\n\t}\n\t\n\treturn $surpass->result();  // This will return json.\n\t\n*Note: If uploading completed, the result data(json) has the following values.\n\n1.result : true / false  \n2.insertId  \n3.path  \n4.dir  \n5.filename  \n6.file_path  \n7.extension  \n8.width  \n9.height  \n10.mime_type  \n11.saveMode : overwrite / insert\n\n**Remove (Ajax)**\n\n    // To remove an image and the data into DB\n\n\t$surpass = Surpass::path('img/uploads');\n\t\n\tif($surpass->remove()) {\n\t\t// Something..\n\t}\n\t\n\treturn $surpass->result();  // This will return json.\n\t\n**Minimal Way**\n\n(in Contoller)\n    \n\n\t$surpass = Surpass::path('img/uploads')->dir('dir_name');\n\t$surpass->load([1, 2, 3]);\n(in View)\nSee above. \n\t\n(in Upload Ajax)\n\n\t$surpass = Surpass::path('img/uploads');\n\t$dir = $surpass->requestDir();\n\t\n\tif($surpass->save()) {\n\t\t// Something..\n\t}\n\t\n\treturn $surpass->result();\n(in Remove Ajax)\n\t\n\t\n\t$surpass = Surpass::path('img/uploads');\n\t\n\tif($surpass->remove()) {\n\t\t// Something..\n\t}\n\t\n\treturn $surpass->result();\n\n**Refresh**  \nThis method will remove all data and images that don't already exist.  \n\n    $surpass = Surpass::path('img/uploads');\n    $surpass->refresh();\n\t\n**Remove by ID**\n\t\n    $surpass = Surpass::path('img/uploads')\n\t\t\t\t\t->removeById(1);\n\t// or\n    $surpass = Surpass::path('img/uploads')\n\t\t\t\t\t->removeById([1, 2, 3]);\n**Load with validation**\n\n    $ids = [1, 2, 3];\n    $surpass->load($ids, $old_flag = true);\n    // If $old_flag is true, $ids will be replaced with Input::old() value(s) automatically.\n    \n**Get image file id(s) when submitting**\n\t\n    Surpass::imageFileId('dir_name');\n    Surpass::imageFileIds('dir_name');\n\t\n**About Saved IDs**\n\nAfeter uploading image(s) with Ajax, the preview(s) have hidden-input-tag(s) named \"surpass_ids[]\" (and of course the value(s) are ID of DB saved at the time).  \nSo when submitting, you can receive those data as array.\n\n**with Multiple file-inputs**\n\n    (in Controller)\n\t$surpass = Surpass::path('img/uploads');\n\t$surpass_x = clone $surpass->dir('xxx')\n\t\t\t\t\t->ids([\n\t\t\t\t\t\t'input' => 'input-xxx',\n\t\t\t\t\t\t'preview' => 'preview-xxx'\n\t\t\t\t\t]);\n\t$surpass_y = clone $surpass->dir('yyy')\n\t\t\t\t\t->ids([\n\t\t\t\t\t\t'input' => 'input-yyy',\n\t\t\t\t\t\t'preview' => 'preview-yyy'\n\t\t\t\t\t]);\n\treturn View::make('view', [\n\t\t'surpass_x' => $surpass_x,\n\t\t'surpass_y' => $surpass_y\n\t]);\n\t\n\t(in View)\n\t<input \n\t\tid=\"input-xxx\" \n\t\tname=\"input-xxx\" \n\t\ttitle=\"Select Image\" \n\t\tdata-url=\"http://example.com/upload\" \n\t\tdata-remove-url=\"http://example.com/remove\" \n\t\taccept=\"image/*\" \n\t\ttype=\"file\" multiple>\n\t{{ $surpass_x->html('preview') }}\n\t<input \n\t\tid=\"input-yyy\" \n\t\tname=\"input-yyy\" \n\t\ttitle=\"Select Image\" \n\t\tdata-url=\"http://example.com/upload\" \n\t\tdata-remove-url=\"http://example.com/remove\" \n\t\taccept=\"image/*\" \n\t\ttype=\"file\" multiple>\n\t{{ $surpass_y->html('preview') }}\n    // JS\n    {{ $surpass_x->html('js') }}\n    {{ $surpass_y->html('js') }}\n\n**Set filename length**\n\n    Surpass::filenameLength(10);    // Default: 10\n\n**Insert**\n\n    $insert_id = Surpass::path('path')\n                    ->dir('dir')\n                    ->insert('file_path', $attributes = array());\n\n    *Note: This method is to save image(s) and their data directly like seeding.  \n    So, in usual you should use save() method.\n\n**Drop Zone**\n\nIf you'd like to upload images through Drop Zone(using Drag and Drop), add a div-tag like the below.\n    \n    (in Controller)\n    \n    $surpass->dropZone('drop_zone_id');\n    \n    \n    (in View)\n    \n    <div id=\"drop_zone_id\">Drop images here!</div>\n\n**Save Attributes**\n\n    $id = 1;    // Here means ID of \"image_files\" table.\n    $surpass->saveAttributes($id, array(\n        'key_1' => 'value_1',\n        'key_2' => 'value_2',\n        'key_3' => 'value_3'\n    ));\n    \n    *Note: The old attributes data will be removed.\n\nLicense\n====\n\nThis package is licensed under the MIT License.\n\nCopyright 2014 Sukohi Kuhoh", "<?php namespace Sukohi\\Surpass;\n\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Response;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\File;\nuse Illuminate\\Support\\Facades\\URL;\nuse Carbon\\Carbon;\nuse Exception;\n\nclass Surpass {\n\n    const TABLE = 'image_files';\n    const DIR_HIDDEN_NAME = 'surpass_hidden_dir';\n    const ID_HIDDEN_NAME = 'surpass_ids';\n    const KEY_HIDDEN_NAME = 'surpass_keys';\n    const KEY_OVERWRITE_ID = 'surpass_overwrite_id';\n    private $_path, $_dir, $_progress;\n    private $_alert = 'You can upload up to %d files.';\n    private $_button = 'Remove';\n    private $_drop_zone_id, $_id_hidden_name = '';\n    private $_max_files = 5;\n    private $_filename_length = 10;\n    private $_timeout = 0;\n    private $_form_data, $_result, $_load, $_resize_params, $_css = array();\n    private $_overwrite = false;\n    private $_ids = array(\n\n        'input' => 'image_upload',\n        'preview' => 'preview_images'\n\n    );\n    private $_callbacks = array(\n        'add' => '',\n        'done' => ''\n    );\n    private $_preview_params = array(\n\n        'maxHeight' => 120\n\n    );\n\n    public function path($path) {\n\n        $this->_path = $path;\n        return $this;\n\n    }\n\n    public function dir($dir) {\n\n        $this->_dir = str_replace([\"\\0\", '/', '.'], '', $dir);\n        $this->_id_hidden_name = self::ID_HIDDEN_NAME .'_'. $dir;\n        return $this;\n\n    }\n\n    public function id($mode, $id) {\n\n        $this->_ids[$mode] = $id;\n        return $this;\n\n    }\n\n    public function ids($ids) {\n\n        $this->_ids = $ids;\n        return $this;\n\n    }\n\n    public function renderId($mode) {\n\n        return $this->_ids[$mode];\n\n    }\n\n    public function maxFiles($max_files) {\n\n        $this->_max_files = $max_files;\n        return $this;\n\n    }\n\n    public function alert($alert) {\n\n        $this->_alert = $alert;\n        return $this;\n\n    }\n\n    public function formData($form_data) {\n\n        $this->_form_data = $form_data;\n        return $this;\n\n    }\n\n    public function button($label) {\n\n        $this->_button = $label;\n        return $this;\n\n    }\n\n    public function preview($params) {\n\n        $this->_preview_params = $params;\n        return $this;\n\n    }\n\n    public function resize($size, $force_crop = true) {\n\n        $this->_resize_params = ['size' => $size, 'force_crop' => $force_crop];\n        return $this;\n\n    }\n\n    public function timeout($milliseconds) {\n\n        $this->_timeout = intval($milliseconds);\n        return $this;\n\n    }\n\n    public function overwrite($bool = false) {\n\n        $this->_overwrite = $bool;\n        return $this;\n\n    }\n\n    public function css($css) {\n\n        $this->_css = $css;\n        return $this;\n\n    }\n\n    public function progress($content) {\n\n        $this->_progress = $content;\n        return $this;\n\n    }\n\n    public function callback($callbacks) {\n\n        $this->_callbacks = $callbacks;\n        return $this;\n\n    }\n\n    public function dropZone($id) {\n\n        $this->_drop_zone_id = $id;\n        return $this;\n\n    }\n\n    public function renderCss($mode) {\n\n        return (!empty($this->_css[$mode])) ? ' class=\"'. $this->_css[$mode] .'\"' : '';\n\n    }\n\n    public function html($mode) {\n\n        if($mode == 'preview') {\n\n            return View::make('packages.sukohi.surpass.preview', array(\n                'id' => $this->renderId('preview'),\n                'css' => $this->renderCss('preview')\n            ))->render();\n\n        } else if($mode == 'js') {\n\n            $load_data = [];\n\n            if(!empty($this->_load)) {\n\n                foreach ($this->_load as $id => $load) {\n\n                    $load_data[] = array(\n\n                        'id' => $id,\n                        'url' => $load->url,\n                        'filename' => $load->filename\n\n                    );\n\n                }\n\n            }\n            $this->_form_data[self::DIR_HIDDEN_NAME] = $this->_dir;\n            $this->_form_data[self::KEY_HIDDEN_NAME] = json_encode($this->_ids);\n\n            return View::make('packages.sukohi.surpass.js', array(\n\n                'max_file' => $this->_max_files,\n                'load_data' => $load_data,\n                'form_data' => $this->_form_data,\n                'alert' => sprintf($this->_alert, $this->_max_files),\n                'button_label' => $this->_button,\n                'preview_params' => $this->_preview_params,\n                'resize_params' => $this->_resize_params,\n                'progress' => $this->_progress,\n                'callbacks' => $this->_callbacks,\n                'drop_zone_id' => $this->_drop_zone_id,\n                'id_hidden_name' => $this->_id_hidden_name,\n                'dir' => strtolower($this->_dir),\n                'dir_studly' => studly_case($this->_dir),\n                'input_id' => $this->renderId('input'),\n                'preview_id' => $this->renderId('preview'),\n                'css_div' => Surpass::renderCss('div'),\n                'css_loading' => Surpass::renderCss('loading'),\n                'css_button' => Surpass::renderCss('button'),\n                'overwrite' => $this->_overwrite,\n                'timeout' => $this->_timeout\n\n            ))->render();\n\n        }\n\n    }\n\n    public function filenameLength($length) {\n\n        $this->_filename_length = $length;\n        return $this;\n\n    }\n\n    public function insert($file_path, $attributes = array()) {\n\n        if(!File::exists($file_path)) {\n\n            return -1;\n\n        }\n\n        DB::beginTransaction();\n\n        try {\n\n            $extension = File::extension($file_path);\n            $filename = $this->filename($extension);\n            $size = File::size($file_path);\n            $save_dir = $this->filePath($this->_dir);\n\n            if(!File::exists($save_dir)) {\n\n                File::makeDirectory($save_dir);\n\n            }\n\n            $save_path = $save_dir .'/'. $filename;\n            File::copy($file_path, $save_path);\n            DB::commit();\n\n        } catch (Exception $e) {\n\n            DB::rollback();\n            return -1;\n\n        }\n\n        return $this->saveData($filename, $extension, $size, $attributes);\n\n    }\n\n    public function save($attributes = array()) {\n\n        $this->dir(Input::get(self::DIR_HIDDEN_NAME));\n        $this->ids(json_decode(Input::get(self::KEY_HIDDEN_NAME), true));\n        $result = false;\n        $id = $width = $height = -1;\n        $mime_type = '';\n        $input_id = $this->_ids['input'];\n        $extension = Input::file($input_id)->getClientOriginalExtension();\n        $filename = $this->filename($extension);\n        $file_size = Input::file($input_id)->getSize();\n        $error_message = '';\n\n        DB::beginTransaction();\n\n        try {\n\n            $save_path = $this->filePath($this->_dir);\n\n            if(!file_exists($save_path)) {\n\n                throw new Exception('The directory doesn\\'t exist.');\n\n            } else if(!is_writable($save_path)) {\n\n                throw new Exception('The directory is not writable.');\n\n            }\n\n            Input::file($input_id)->move($save_path, $filename);\n            $id = $this->saveData($filename, $extension, $file_size, $attributes);\n            DB::commit();\n            list($width, $height, $image_type) = getimagesize($save_path .'/'. $filename);\n            $mime_type = image_type_to_mime_type ($image_type);\n            $result = true;\n\n        } catch (Exception $e) {\n\n            $error_message = $e->getMessage();\n            $filename = null;\n            DB::rollback();\n\n        }\n\n        $this->_result = array(\n            'result' => $result,\n            'insertId' => $id,\n            'path' => $this->_path,\n            'dir' => $this->_dir,\n            'filename' => $filename,\n            'file_path' => $this->_path .'/'. $this->_dir .'/'. $filename,\n            'extension' => $extension,\n            'width' => $width,\n            'height' => $height,\n            'mime_type' => $mime_type,\n            'saveMode' => ($this->isOverwrite()) ? 'overwrite' : 'insert'\n        );\n\n        if(!empty($error_message)) {\n\n            $this->_result['error_message'] = $error_message;\n\n        }\n\n        return $result;\n\n    }\n\n    public function saveAttributes($id, $attributes) {\n\n        return DB::table(self::TABLE)->where('id', $id)->update(array(\n            'attributes' => json_encode($attributes)\n        ));\n\n    }\n\n    public function remove() {\n\n        $result = $this->removeById(intval(Input::get('remove_id')));\n        $this->_result = array('result' => $result);\n        return $result;\n\n    }\n\n    public function removeById($ids = '') {\n\n        $result = false;\n\n        if(empty($ids)) {\n\n            return $result;\n\n        }\n\n        if(!is_array($ids)) {\n\n            $ids = array($ids);\n\n        }\n\n        DB::beginTransaction();\n\n        try {\n\n            foreach ($ids as $id) {\n\n                $db = DB::table(self::TABLE)->where('id', '=', $id);\n                $image_file = $db->select('dir', 'filename')->first();\n                $remove_path = $this->filePath($image_file->dir, $image_file->filename);\n                File::delete($remove_path);\n                $db->delete();\n\n            }\n\n            DB::commit();\n            $result = true;\n\n        } catch (Exception $e) {\n\n            DB::rollback();\n\n        }\n\n        return $result;\n\n    }\n\n    public function result() {\n\n        $result = $this->_result;\n        $this->_result = array();\n        return Response::json($result);\n\n    }\n\n    public function refresh() {\n\n        DB::beginTransaction();\n\n        try {\n\n            $image_files = DB::table(self::TABLE)->select('id', 'dir', 'filename')->get();\n            $exists_image_paths = array();\n\n            foreach ($image_files as $key => $image_file) {\n\n                $path = $this->filePath($image_file->dir, $image_file->filename);\n\n                if(!file_exists($path)) {\n\n                    DB::table(self::TABLE)\n                        ->where('id', '=', $image_file->id)\n                        ->delete();\n\n                } else {\n\n                    $exists_image_paths[] = public_path($this->_path .'/'. $image_file->dir .'/'. $image_file->filename);\n\n                }\n\n            }\n\n            $files = File::allFiles($this->_path);\n\n            foreach ($files as $file) {\n\n                $remove_path = $file->getRealPath();\n\n                if(!in_array($remove_path, $exists_image_paths)) {\n\n                    File::delete($remove_path);\n\n                }\n\n            }\n\n            DB::commit();\n            return true;\n\n        } catch (Exception $e) {\n\n            DB::rollback();\n            return false;\n\n        }\n\n    }\n\n    public function load($ids=array(), $old_flag=true) {\n\n        if(!is_array($ids)) {\n\n            $ids = [$ids];\n\n        }\n\n        if($old_flag\n            && Input::old($this->_id_hidden_name)\n            && is_array(Input::old($this->_id_hidden_name))) {\n\n            $ids = Input::old($this->_id_hidden_name);\n\n        }\n\n        if(!empty($ids)) {\n\n            $this->_load = array();\n            $image_files = DB::table(self::TABLE)\n                ->select('id', 'dir', 'filename', 'extension', 'size', 'created_at', 'attributes')\n                ->whereIn('id', $ids)\n                ->get();\n\n            foreach ($image_files as $image_file) {\n\n                $this->addLoadObject(array(\n\n                    'id' => $image_file->id,\n                    'dir' => $image_file->dir,\n                    'filename' => $image_file->filename,\n                    'extension' => $image_file->extension,\n                    'size' => $image_file->size,\n                    'created_at' => $image_file->created_at,\n                    'attributes' => json_decode($image_file->attributes, true)\n\n                ));\n\n            }\n\n        }\n\n        return $this;\n\n    }\n\n    public function loadSaved() {\n\n        $keys = array_keys($this->_load);\n        return $this->_load[end($keys)];\n\n    }\n\n    public function loadData() {\n\n        return $this->_load;\n\n    }\n\n    public function imageFileId($dir) {\n\n        $ids = Surpass::imageFileIds($dir);\n\n        if(!empty($ids)) {\n\n            return $ids[0];\n\n        }\n\n        return '';\n\n    }\n\n    public function imageFileIds($dir) {\n\n        $this->dir($dir);\n        $id_hidden_name = Input::get($this->_id_hidden_name);\n        $ids = !empty($id_hidden_name) ? Input::get($this->_id_hidden_name) : [];\n        sort($ids);\n        return $ids;\n\n    }\n\n    private function filePath($dir, $filename='') {\n\n        $path = $this->_path .'/'. $dir;\n\n        if(!empty($filename)) {\n\n            $path .= '/'. $filename;\n\n        }\n\n        return public_path($path);\n\n    }\n\n    private function fileUrl($dir, $filename) {\n\n        return URL::to($this->_path .'/'. $dir .'/'. $filename);\n\n    }\n\n    private function addLoadObject($params) {\n\n        $id = $params['id'];\n        $dir = $params['dir'];\n        $filename = $params['filename'];\n        $attributes = $params['attributes'];\n\n        $load = new \\stdClass;\n        $load->id = $id;\n        $load->dir = $dir;\n        $load->filename = $filename;\n        $load->path = $this->filePath($dir, $filename);\n        $load->url = $this->fileUrl($dir, $filename);\n        $load->attributes = $attributes;\n        $load->tag = '<img src=\"'. $load->url .'\"'. $this->generateAttribute($attributes) .'>';\n        $this->_load[$id] = $load;\n\n    }\n\n    private function generateAttribute($attributes) {\n\n        $return = '';\n\n        if(!empty($attributes)) {\n\n            foreach ($attributes as $key => $value) {\n\n                $return .= ' '. $key .'=\"'. $value .'\"';\n\n            }\n\n        }\n\n        return $return;\n\n    }\n\n    private function filename($extension) {\n\n        return str_random($this->_filename_length) .'.'. $extension;\n\n    }\n\n    private function isOverwrite() {\n\n        return (Input::has(self::KEY_OVERWRITE_ID) && Input::get(self::KEY_OVERWRITE_ID) > 0);\n\n    }\n\n    private function saveData($filename, $extension, $size, $attributes) {\n\n        $save_params = array(\n\n            'dir' => $this->_dir,\n            'filename' => $filename,\n            'extension' => $extension,\n            'size' => $size,\n            'created_at' => Carbon::now(),\n            'attributes' => (!empty($attributes)) ? json_encode($attributes) : ''\n\n        );\n\n        if($this->isOverwrite()) {\n\n            $id = Input::get(self::KEY_OVERWRITE_ID);\n            DB::table(self::TABLE)->where('id', $id)->update($save_params);\n\n        } else {\n\n            $id = DB::table(self::TABLE)->insertGetId($save_params);\n\n        }\n\n        if($id > 0) {\n\n            $save_params['id'] = $id;\n            $save_params['attributes'] = $attributes;\n            $this->addLoadObject($save_params);\n\n        } else {\n\n            $id = -1;\n            throw new Exception('Save Failed.');\n\n        }\n\n        return $id;\n\n    }\n\n}"], "filenames": ["README.md", "src/Sukohi/Surpass/Surpass.php"], "buggy_code_start_loc": [87, 53], "buggy_code_end_loc": [87, 54], "fixing_code_start_loc": [88, 53], "fixing_code_end_loc": [91, 54], "type": "CWE-22", "message": "A vulnerability has been found in SUKOHI Surpass and classified as critical. This vulnerability affects unknown code of the file src/Sukohi/Surpass/Surpass.php. The manipulation of the argument dir leads to pathname traversal. Upgrading to version 1.0.0 is able to address this issue. The name of the patch is d22337d453a2a14194cdb02bf12cdf9d9f827aa7. It is recommended to upgrade the affected component. VDB-217642 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10030", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-08T10:15:11.537", "lastModified": "2023-01-12T16:54:40.017", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in SUKOHI Surpass and classified as critical. This vulnerability affects unknown code of the file src/Sukohi/Surpass/Surpass.php. The manipulation of the argument dir leads to pathname traversal. Upgrading to version 1.0.0 is able to address this issue. The name of the patch is d22337d453a2a14194cdb02bf12cdf9d9f827aa7. It is recommended to upgrade the affected component. VDB-217642 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-21"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:surpass_project:surpass:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.0", "matchCriteriaId": "AE9E710D-6C53-45E6-8303-051AB5F9DC20"}]}]}], "references": [{"url": "https://github.com/SUKOHI/Surpass/commit/d22337d453a2a14194cdb02bf12cdf9d9f827aa7", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/SUKOHI/Surpass/releases/tag/1.0.0", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217642", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217642", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/SUKOHI/Surpass/commit/d22337d453a2a14194cdb02bf12cdf9d9f827aa7"}}