{"buggy_code": ["Version 0.9.3, Beta 4\n=============\n\nlibmdb:\n* Fix build failure with emscripten #299\n\nVersion 0.9.3, Beta 3\n=============\n\nlibmdb / libmdbsql:\n* Fix build when _XOPEN_SOURCE was already defined on the platform #298\n\nVersion 0.9.3, Beta 2\n=============\n\nlibmdb:\n* Migrate to g_memdup2 #287 #288\n\nlibmdbsql:\n* Allow double quoted (\") database names #291\n* Allow spaces in database names #292 #293\n\nDocs:\n* Add JET version for access 2013/2016/2019 to docs #286\n\nVersion 0.9.3, Beta 1\n=============\n\nlibmdb:\n* Support files created with Access 2019 #260 #277\n* Fix a warning when reading in binary property values #262\n* Fix signed-unsigned comparison warning #269\n\nlibmdbsql:\n* Support negative floating point literals #274 #279\n* Comparison operators behaved incorrectly when the constant was on the left #283 #285\n* Improved support for file paths in `CONNECT TO` statements #275 #280 #282\n\nODBC:\n* unixODBC now uses the `--libdir` passed at configure-time #261\n* Fix a segfault in PyODBC when `SQLGetTypeInfo` is called on an unsupported data type #278\n\nVersion 0.9.2\n=============\n\nMDB Tools 0.9.2 is a security and bug-fix release. Due to a number of memory\nerrors uncovered by OSS-Fuzz, all users who use MDB Tools to read data from\nuntrusted sources are encouraged to upgrade to 0.9.2 as soon as possible.\n\nThe release also includes some minor improvements and behavior changes,\ndescribed below.\n\nlibmdb:\n* Fix infinite loop with malformed input (oss-fuzz/28789)\n* Fix buffer overrun and some out of bounds memory accesses (oss-fuzz/28832 + oss-fuzz/28807)\n* Fix potential memory leak (oss-fuzz/28791)\n* Improved bounds and return value checking (oss-fuzz/29328 + oss-fuzz/29329)\n* Add support for numeric scale/precision on JET3 databases and floating-point column types\n* `mdb_col_to_string` now prints a warning and returns `\"\"` for any unsupported data type\n* Improved warning with invalid row data #253\n\nCommand-line tools:\n* All CLI tools which accept string arguments are now locale-aware (#237)\n* All CLI tools now accept a `--version` argument (#232)\n* `mdb-export`: Fix issue where exported SQL field sizes were sometimes twice the necessary size (#112)\n* `mdb-export`: Improved handling of BLOBs (#250)\n* `mdb-export`: Implement a serial type and relations for MySQL (#257)\n* `mdb-queries` now has long option names `--list`, `--newline`, and `--delimiter`\n* `mdb-schema`: Exit with an error code if the requested table is not found\n\nODBC:\n* `SQLBindCol` now respects its TargetType (fCType) argument and converts bound data to the requested type (#23 #242)\n* `SQLFetchCol` now returns `SQL_SUCCESS_WITH_INFO` if a bound column was truncated, and `SQL_ERROR` if a bound value is out of range of the target type.\n* Fix handling of numeric types in ODBC driver (#255)\n\nBuild and documentation:\n* Updated man pages with new SQL features and correct `MDBOPTS` information (#203)\n* Add generated API documentation (#239)\n* Move `HACKING` to `HACKING.md` (with a relocation notice) and `TODO` to `TODO.md`\n* Fuzz-test all pull requests (#230)\n* Add `-DHAVE_GLIB` to library's `pkg-config --cflags` if needed (#254)\n\n\nVersion 0.9.1\n=============\n\n* MDB Tools has migrated from Travis CI to GitHub Actions for automated builds\n* Fix a build error with msys2 (Windows) when GLib was disabled\n* Remove dependency on math.h #228\n* mdb-export now uses scientific notation only for very small numbers #84\n* mdb-schema no longer emits illegal ALTER TABLE statements for SQLite relationships #82\n* mdb-schema now omits the namespace for PostgreSQL indexes and constraints #93\n* Automatically detect character encoding of JET3 databases #224\n* JET3: Transcode Latin-1 text to UTF-8 when iconv is not present\n* JET4: Transcode Unicode text to UTF-8 when iconv is not present (using `wcstombs`) #223\n* Fix a buffer overrun with binary string fields OSS-Fuzz/28779 #216\n* Fix a stack overflow with malformed input OSS-Fuzz/28780 #217\n* Improved validation of date input OSS-Fuzz/28790 #219\n* Fix a potential buffer overrun when compiled without iconv OSS-Fuzz/28773 #220\n* Fix an extra newline that appeared at the `mdb-sql` prompt when Readline was not present\n* Fix potential stack corruption with malformed input\n* mdb-export has a new --escape-invisible flag for C-style escaping of tabs and newlines #222\n* Print a warning if MDBOPTS=use_index is set at run-time but libmswstr was absent at compile-time #215 #226\n* Improved support for databases that were improperly closed #120\n* Remove warnings about mdb_find_row and row_size that did not necessarily indicate a problem\n\n\nVersion 0.9.0\n=============\n\nMDB Tools is under new management! Update your bookmarks and tell your favorite\nsearch engine that this is our new home on the WWW:\n\n    https://github.com/mdbtools/mdbtools\n\nMDB Tools 0.9.0 builds off the fork of cyberemissary on GitHub, collects many\nyears of unapplied patches, and includes a number of internal improvements.\nBesides a host of security fixes, GLib is now completely optional, files can\nbe opened completely in-memory, and many global variables have been eliminated\nto facilitate thread safety.\n\nThe core library, libmdb, is believed to be thread-safe in the sense that\nseveral handles can be opened simultaneously and passed between threads.\nHowever, individual handles are NOT thread-safe, so don't try to do work\non a single handle from multiple threads without implementing your own\nlocking mechanism.\n\nThe auxiliary libraries, libmdbsql and ODBC, still have some non-reentrant\nfunction calls. Thread safety is not promised, though the situation is\nsignificantly improved from the 0.7 days.\n\nThe ABI has some slight changes (mostly having to do with struct layouts) so\nyou'll need to bump your SO numbers and such. The main changes to the API are\nthe introduction of a new function for in-memory parsing:\n\n  MdbHandle *mdb_open_buffer(void *buffer, size_t len, MdbFileFlags flags);\n\nAnd the modification of the \"mdb_set_date_fmt\" function to include a handle\nparameter, so that date formats can be set in a non-global fashion:\n\n  void mdb_set_date_fmt(MdbHandle *mdb, const char *);\n\nThe above function is the most common reason that old projects will fail to\ncompile on 0.9, and the fix is straightforward.\n\nThe previously-deprecated functions mdb_init() and mdb_exit() have been\nremoved. These functions did nothing; any calls to them should be excised with\nprejudice.\n\nThis release introduces two new CLI tools (mdb-count and mdb-queries) and\ndeprecates mdb-array, mdb-header, and mdb-parsecsv. Several man pages have been\nadded or otherwise brought up to date.\n\nThe GNOME-based GUI tool that formerly shipped with MDB Tools has been moved to\na separate project, here:\n\n    https://github.com/mdbtools/gmdb2\n\nIt seems to compile but should probably be classified as abandonware. The\nproject uses a deprecated GUI toolkit, and as such gmdb2 is no longer included\nin Linux distros that used to carry it.\n\nVersion 0.7.1\n=============\nautogen.sh is no more. Use \"autoreconf -if\" to bootstrap the configuration.\n\nautoconf/automake has been updated to more recent standards.\n- config.guess  config.sub  depcomp  install-sh  ltmain.sh  missing  ylwrap\n  files are now in build-aux/ directory\nYou'll now need autoconf >= 2.58\n\nAn experimental (buggy) version of ODBC driver that supports UCS-2 interface\nis now available: libmdbodbcW.so\nNote that libmdbodbc supports UTF-8 really well, so that this is usually not\nneeded.\n\nVersion 0.3\n===========\nThe organization of the project files has changed a bit from that last release.\nThe autoconf stuff has been moved to the root directory.  The include directory\nhas also been moved from src/include to include\n\n", "dnl Process this file with autoconf to produce a configure script.\nAC_INIT([mdbtools],[0.9.3-beta4],[https://github.com/mdbtools/mdbtools/issues],[],[https://github.com/mdbtools/mdbtools])\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_SRCDIR(src/extras/mdb-dump.c)\nAM_INIT_AUTOMAKE([foreign dist-zip])\n\nMDBTOOLS_VERSION_MAJOR=0\nMDBTOOLS_VERSION_MINOR=9\nMDBTOOLS_VERSION_MICRO=3\n\n# Update these numbers with every release\n# See https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\nVERSION_INFO=3:3:0\nAC_SUBST(VERSION_INFO)\nAC_SUBST(MDBTOOLS_CFLAGS)\n\nAM_MAINTAINER_MODE([enable])\nAM_SILENT_RULES([yes])\n\nAC_PROG_CC(gcc)\nAC_PROG_CXX\ndnl Checks for programs.\nAC_PROG_MAKE_SET\nm4_pattern_allow([AM_PROG_AR], [AM_PROG_AR])\nLT_INIT([win32-dll])\nAC_PROG_LEX\nAC_PROG_YACC\n\ndnl Checks for header files.\nAC_HEADER_STDC\nAC_CHECK_HEADERS(fcntl.h limits.h unistd.h xlocale.h)\nAC_CHECK_LIB(mswstr, DBLCMapStringW)\nAC_CHECK_DECLS([program_invocation_short_name], [], [], [[\n                #define _GNU_SOURCE\n                #include <errno.h>]])\n\ndnl Checks for library functions.\nVL_LIB_READLINE\nAC_CHECK_FUNCS(strptime fmemopen gmtime_r reallocf wcstombs_l vasprintf vasnprintf)\n\ndnl Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_TYPE_SIZE_T\n\nAM_ICONV\nAM_GCC_ATTRIBUTE_ALIAS\n\ndnl Enable large files on 32-bit systems\nAC_SYS_LARGEFILE\n\ndnl no optional stuff by default\nOPTDIRS=\"\"\n\ndnl ---------------------------------------------------------------------\ndnl Compile time options\ndnl ---------------------------------------------------------------------\n\nsql=true\nAC_MSG_CHECKING( Are we using flex )\nif test \"x$LEX\" = \"xflex\"; then\nLFLAGS=\"$LFLAGS -i -8\"\nAC_MSG_RESULT( yes );\nelse\nAC_MSG_RESULT( no - SQL engine disable);\nsql=false\nfi\n\nif $YACC -V | grep \"bison.* 3[.]\" >/dev/null 2>&1; then\n    if $YACC -Wno-conflicts-sr -V >/dev/null 2>&1; then\n        YFLAGS=\"$YFLAGS -Wno-conflicts-sr\"\n    fi\n    if $YACC -Wno-yacc -V >/dev/null 2>&1; then\n        YFLAGS=\"$YFLAGS -Wno-yacc\"\n    fi\nelse\n    AC_MSG_WARN([Bison 3.0+ is not available: SQL disabled.])\n    sql=false\nfi\n\nif test \"x$sql\" = \"xtrue\"; then\n\tCFLAGS=\"$CFLAGS -DSQL\"\n\tOPTDIRS=\"$OPTDIRS sql\"\nfi\n\nAM_CONDITIONAL(SQL, test x$sql = xtrue)\nAC_SUBST(SQL)\nAC_SUBST(LFLAGS)\n\nCFLAGS=\"$CFLAGS -Wall -Werror\"\nAS_CASE([$host],\n        [*mingw*|*cygwin*], [LDFLAGS=\"$LDFLAGS -no-undefined\"], [])\nAS_CASE([$host],\n        [*mingw*], [LDFLAGS=\"$LDFLAGS -lWs2_32\"], [])\n\ndnl Fuzz testing\n\nAC_ARG_ENABLE([fuzz-testing], AS_HELP_STRING([--enable-fuzz-testing], [\"Enable fuzz testing (requires Clang 6 or later)\"]), [\n   AC_MSG_CHECKING([whether $CC accepts -fsanitize=fuzzer])\n   tmp_saved_flags=$[]_AC_LANG_PREFIX[]FLAGS\n   _AC_LANG_PREFIX[]FLAGS=\"$[]_AC_LANG_PREFIX[]FLAGS -fsanitize=fuzzer\"\n   AC_LINK_IFELSE([AC_LANG_PROGRAM()],\n       [\n        AC_MSG_RESULT(yes)\n        OPTDIRS=\"$OPTDIRS fuzz\"\n        fuzzer=yes],\n        AC_MSG_RESULT(no)\n       AC_MSG_FAILURE([-fsanitize=fuzzer not supported (Required with --enable-fuzz-testing)]))\n   _AC_LANG_PREFIX[]FLAGS=$tmp_saved_flags\n], [fuzzer=no])\nAM_CONDITIONAL([FUZZER_ENABLED], test \"x$fuzzer\" = \"xyes\")\n\nAC_ARG_VAR([LIB_FUZZING_ENGINE], [Location of prebuilt fuzzing engine library])\nAC_SUBST([LIB_FUZZING_ENGINE])\n\ndnl Enable -Wl,--as-needed by default to prevent overlinking\n\nAC_ARG_ENABLE([as-needed],\n  AS_HELP_STRING([--disable-as-needed],[disable overlinking protection]),\n  [enable_as_needed=$enableval], [enable_as_needed=yes])\n\nif test \"x$enable_as_needed\" != \"xno\"; then\n  AC_MSG_CHECKING([whether $LD accepts --as-needed])\n  case `$LD --as-needed -v 2>&1 </dev/null` in\n  *GNU* | *'with BFD'*)\n    LDFLAGS=\"$LDFLAGS -Wl,--as-needed\"\n    AC_MSG_RESULT([yes])\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n\ndnl check for iODBC\n\nAC_ARG_WITH(iodbc,\n  AS_HELP_STRING([--with-iodbc=/path/to/iodbc], [build odbc driver against iODBC]))\nif test \"$with_iodbc\"; then\n\tHAVE_ODBC=true\n\tODBC_CFLAGS=$(iodbc-config --prefix=\"$with_iodbc\" --cflags)\n\tODBC_LIBS=$(iodbc-config --prefix=\"$with_iodbc\" --libs)\n\tODBC_LDFLAGS=\"\"\n\tCFLAGS=\"$CFLAGS -DIODBC\"\n\n\tOLDLDFLAGS=$LDFLAGS\n\tLDFLAGS=\"$LDFLAGS $ODBC_LIBS\"\n\tAC_CHECK_LIB(iodbcinst, SQLGetPrivateProfileString, [FOO=bar],\n                 AC_MSG_ERROR([Could not find SQLGetPrivateProfileString in -liodbcinst]))\n\tLDFLAGS=$OLDLDFLAGS\nfi\n\ndnl check for unixODBC\nAC_ARG_WITH(unixodbc,\n  AS_HELP_STRING([--with-unixodbc=/path/to/unixodbc], [build odbc driver against unixODBC]))\nif test \"$with_unixodbc\"; then\n\tHAVE_ODBC=true\n\tODBC_CFLAGS=\"-I$with_unixodbc/include\"\n\tODBC_LIBS=\"-L$with_unixodbc/$libdir\"\n\tCFLAGS=\"$CFLAGS -DUNIXODBC\"\n\n\tdnl SIZEOF_LONG_INT and HAVE_LONG_LONG are required by some versions of unixODBC\n\tdnl https://github.com/lurcher/unixODBC/issues/40\n\tAC_CHECK_SIZEOF([long int])\n\tAC_CHECK_TYPES([long long])\n\n\tOLDLDFLAGS=$LDFLAGS\n\tLDFLAGS=\"$LDFLAGS $ODBC_LIBS\"\n\tAC_CHECK_LIB(odbcinst, SQLGetPrivateProfileString, [ODBC_LIBS=\"$ODBC_LIBS -lodbcinst\"],\n                 AC_MSG_ERROR([Could not find SQLGetPrivateProfileString in -lodbcinst]))\n\tLDFLAGS=$OLDLDFLAGS\n\n\tOLDLDFLAGS=$LDFLAGS\n\tLDFLAGS=\"$LDFLAGS -Wl,-Bsymbolic-functions\"\n\tAC_MSG_CHECKING([for -Bsymbolic-functions linker flag])\n\tAC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],\n\t\t\t\t[AC_MSG_RESULT(yes)\n\t\t\t\tODBC_LDFLAGS=\"-Wl,-Bsymbolic-functions\"],\n\t\t\t\t[AC_MSG_RESULT(no)\n\t\t\t\tODBC_LDFLAGS=\"\"])\n\tLDFLAGS=$OLDLDFLAGS\nfi\n\nif test \"x$HAVE_ODBC\" = \"xtrue\"; then\n\tif test \"x$sql\" != \"xtrue\" ; then\n\t\tAC_MSG_ERROR([ODBC requires flex and bison for the SQL engine])\n\tfi\n\n\tAC_SUBST(ODBC_CFLAGS)\n\tAC_SUBST(ODBC_LIBS)\n\tAC_SUBST(ODBC_LDFLAGS)\n\tOPTDIRS=\"$OPTDIRS odbc\"\nfi\n\ndnl Conditionally build odbc wide version\nAM_CONDITIONAL(ICONV, test \"$am_cv_func_iconv\" = \"yes\")\n\ndnl Testing presence of pkg-config\nAC_MSG_CHECKING([pkg-config m4 macros])\nif test m4_ifdef([PKG_CHECK_MODULES], [yes], [no]) = yes; then\n\tAC_MSG_RESULT([yes]);\nelse\n\tAC_MSG_RESULT([no]);\n\tAC_MSG_ERROR([\npkg-config is required.\nSee pkg-config.freedesktop.org])\nfi\n\ndnl See if GLib is present and wanted\nAC_ARG_ENABLE(glib,\n    AS_HELP_STRING([--disable-glib], [do not link with GLib]),\n        [enable_glib=$enableval], [enable_glib=yes])\n\nif test \"$enable_glib\" = \"yes\"; then\n    GLIB_PACKAGE=glib-2.0\n    PKG_CHECK_MODULES([GLIB], [$GLIB_PACKAGE], HAVE_GLIB=true, HAVE_GLIB=false)\n    if test \"x$HAVE_GLIB\" = \"xtrue\"; then\n        GLIB_CFLAGS=\"$GLIB_CFLAGS -DHAVE_GLIB=1\"\n        AC_CHECK_LIB($GLIB_PACKAGE, g_memdup2, [GLIB_CFLAGS=\"$GLIB_CFLAGS -DHAVE_G_MEMDUP2=1\"])\n        AC_SUBST(GLIB_PACKAGE)\n    else\n        enable_glib=no\n    fi\nfi\nAM_CONDITIONAL(FAKE_GLIB, test \"x$enable_glib\" != \"xyes\")\n\nAC_SUBST([OPTDIRS])\nAC_CONFIG_FILES([src/Makefile])\n\n##################################################\n# Check for txt2man\n##################################################\n\nAC_ARG_ENABLE(man,\n  AS_HELP_STRING([--disable-man], [disable man generation]),\n  enable_man=\"$enableval\", [enable_man=yes])\nif test \"$enable_man\" = yes; then\n  if ! which gawk > /dev/null; then\n    AC_MSG_ERROR([Could not find GNU awk. Install it or configure with --disable-man if you are not interested in manuals.])\n  fi\nfi\nAM_CONDITIONAL(ENABLE_MAN, test \"$enable_man\" = yes)\n\n##################################################\n# Check for bash-completion.\n##################################################\n\nAC_ARG_WITH([bash-completion-dir],\n  AS_HELP_STRING([--with-bash-completion-dir[=PATH]],\n  [Install the bash auto-completion script in this directory. @<:@default=yes@:>@]),\n  [],\n  [with_bash_completion_dir=yes])\n\nif test \"x$with_bash_completion_dir\" = \"xyes\"; then\n  PKG_CHECK_MODULES([BASH_COMPLETION], [bash-completion >= 2.0],\n    [BASH_COMPLETION_DIR=\"`pkg-config --variable=completionsdir bash-completion`\"],\n    [BASH_COMPLETION_DIR=\"$datadir/bash-completion/completions\"])\nelse\n  BASH_COMPLETION_DIR=\"$with_bash_completion_dir\"\nfi\n\nAC_SUBST([BASH_COMPLETION_DIR])\nAM_CONDITIONAL([ENABLE_BASH_COMPLETION],[test \"x$with_bash_completion_dir\" != \"xno\"])\n\nAC_CONFIG_FILES([\nlibmdb.pc\nlibmdbsql.pc\nsrc/util/Makefile\nsrc/util/bash-completion/Makefile\nsrc/extras/Makefile\nMakefile\ninclude/Makefile\nsrc/libmdb/Makefile\nsrc/sql/Makefile\nsrc/odbc/Makefile\nsrc/fuzz/Makefile\ndoc/Makefile\ninclude/mdbver.h])\nAC_OUTPUT\n\n##################################################\n# Print summary\n##################################################\n\n\nbold_red=$(tput bold 2>/dev/null)$(tput setf 4 2>/dev/null)\nbold_green=$(tput bold 2>/dev/null)$(tput setf 2 2>/dev/null)\nbold=$(tput bold 2>/dev/null)\nreset=$(tput sgr0 2>/dev/null)\nAC_MSG_NOTICE([])\nAC_MSG_NOTICE([${bold}MDB Tools $VERSION - Configuration summary${reset}])\nAC_MSG_NOTICE([])\nif test x$sql = xtrue; then summary=${bold_green}enabled; else summary=${bold_red}disabled; fi\nAC_MSG_NOTICE([   SQL             : ${summary}${reset}])\nif test x$HAVE_ODBC = xtrue; then summary=${bold_green}enabled; else summary=${bold_red}disabled; fi\nAC_MSG_NOTICE([   ODBC            : ${summary}${reset}])\nif test x$enable_glib = xyes; then summary=${bold_green}enabled; else summary=${bold_red}disabled; fi\nAC_MSG_NOTICE([   GLib            : ${summary}${reset}])\nif test x$enable_man = xyes; then summary=${bold_green}enabled; else summary=${bold_red}disabled; fi\nAC_MSG_NOTICE([   man pages       : ${summary}${reset}])\nif test \"x$with_bash_completion_dir\" != \"xno\"; then summary=${bold_green}enabled; else summary=${bold_red}disabled; fi\nAC_MSG_NOTICE([   bash-completion : ${summary}${reset}])\nAC_MSG_NOTICE([])\n"], "fixing_code": ["Version 0.9.3\n=============\n\nlibmdb:\n* Support files created with Access 2019 #260 #277\n* Fix a warning when reading in binary property values #262\n* Fix signed-unsigned comparison warning #269\n* Migrate to `g_memdup2` #287 #288\n* Fix build when `_XOPEN_SOURCE` was already defined on the platform #298\n* Fix build failure with emscripten #299\n\nlibmdbsql:\n* Support negative floating point literals #274 #279\n* Improved support for file paths in `CONNECT TO` statements #275 #280 #282\n* Comparison operators behaved incorrectly when the constant was on the left #283 #285\n* Allow double quoted (\") database names #291\n* Allow spaces in database names #292 #293\n\nODBC:\n* unixODBC now uses the `--libdir` passed at configure-time #261\n* Fix a segfault in PyODBC when `SQLGetTypeInfo` is called on an unsupported data type #278\n\nDocs:\n* Add JET version for access 2013/2016/2019 to docs #286\n\nVersion 0.9.2\n=============\n\nMDB Tools 0.9.2 is a security and bug-fix release. Due to a number of memory\nerrors uncovered by OSS-Fuzz, all users who use MDB Tools to read data from\nuntrusted sources are encouraged to upgrade to 0.9.2 as soon as possible.\n\nThe release also includes some minor improvements and behavior changes,\ndescribed below.\n\nlibmdb:\n* Fix infinite loop with malformed input (oss-fuzz/28789)\n* Fix buffer overrun and some out of bounds memory accesses (oss-fuzz/28832 + oss-fuzz/28807)\n* Fix potential memory leak (oss-fuzz/28791)\n* Improved bounds and return value checking (oss-fuzz/29328 + oss-fuzz/29329)\n* Add support for numeric scale/precision on JET3 databases and floating-point column types\n* `mdb_col_to_string` now prints a warning and returns `\"\"` for any unsupported data type\n* Improved warning with invalid row data #253\n\nCommand-line tools:\n* All CLI tools which accept string arguments are now locale-aware (#237)\n* All CLI tools now accept a `--version` argument (#232)\n* `mdb-export`: Fix issue where exported SQL field sizes were sometimes twice the necessary size (#112)\n* `mdb-export`: Improved handling of BLOBs (#250)\n* `mdb-export`: Implement a serial type and relations for MySQL (#257)\n* `mdb-queries` now has long option names `--list`, `--newline`, and `--delimiter`\n* `mdb-schema`: Exit with an error code if the requested table is not found\n\nODBC:\n* `SQLBindCol` now respects its TargetType (fCType) argument and converts bound data to the requested type (#23 #242)\n* `SQLFetchCol` now returns `SQL_SUCCESS_WITH_INFO` if a bound column was truncated, and `SQL_ERROR` if a bound value is out of range of the target type.\n* Fix handling of numeric types in ODBC driver (#255)\n\nBuild and documentation:\n* Updated man pages with new SQL features and correct `MDBOPTS` information (#203)\n* Add generated API documentation (#239)\n* Move `HACKING` to `HACKING.md` (with a relocation notice) and `TODO` to `TODO.md`\n* Fuzz-test all pull requests (#230)\n* Add `-DHAVE_GLIB` to library's `pkg-config --cflags` if needed (#254)\n\n\nVersion 0.9.1\n=============\n\n* MDB Tools has migrated from Travis CI to GitHub Actions for automated builds\n* Fix a build error with msys2 (Windows) when GLib was disabled\n* Remove dependency on math.h #228\n* mdb-export now uses scientific notation only for very small numbers #84\n* mdb-schema no longer emits illegal ALTER TABLE statements for SQLite relationships #82\n* mdb-schema now omits the namespace for PostgreSQL indexes and constraints #93\n* Automatically detect character encoding of JET3 databases #224\n* JET3: Transcode Latin-1 text to UTF-8 when iconv is not present\n* JET4: Transcode Unicode text to UTF-8 when iconv is not present (using `wcstombs`) #223\n* Fix a buffer overrun with binary string fields OSS-Fuzz/28779 #216\n* Fix a stack overflow with malformed input OSS-Fuzz/28780 #217\n* Improved validation of date input OSS-Fuzz/28790 #219\n* Fix a potential buffer overrun when compiled without iconv OSS-Fuzz/28773 #220\n* Fix an extra newline that appeared at the `mdb-sql` prompt when Readline was not present\n* Fix potential stack corruption with malformed input\n* mdb-export has a new --escape-invisible flag for C-style escaping of tabs and newlines #222\n* Print a warning if MDBOPTS=use_index is set at run-time but libmswstr was absent at compile-time #215 #226\n* Improved support for databases that were improperly closed #120\n* Remove warnings about mdb_find_row and row_size that did not necessarily indicate a problem\n\n\nVersion 0.9.0\n=============\n\nMDB Tools is under new management! Update your bookmarks and tell your favorite\nsearch engine that this is our new home on the WWW:\n\n    https://github.com/mdbtools/mdbtools\n\nMDB Tools 0.9.0 builds off the fork of cyberemissary on GitHub, collects many\nyears of unapplied patches, and includes a number of internal improvements.\nBesides a host of security fixes, GLib is now completely optional, files can\nbe opened completely in-memory, and many global variables have been eliminated\nto facilitate thread safety.\n\nThe core library, libmdb, is believed to be thread-safe in the sense that\nseveral handles can be opened simultaneously and passed between threads.\nHowever, individual handles are NOT thread-safe, so don't try to do work\non a single handle from multiple threads without implementing your own\nlocking mechanism.\n\nThe auxiliary libraries, libmdbsql and ODBC, still have some non-reentrant\nfunction calls. Thread safety is not promised, though the situation is\nsignificantly improved from the 0.7 days.\n\nThe ABI has some slight changes (mostly having to do with struct layouts) so\nyou'll need to bump your SO numbers and such. The main changes to the API are\nthe introduction of a new function for in-memory parsing:\n\n  MdbHandle *mdb_open_buffer(void *buffer, size_t len, MdbFileFlags flags);\n\nAnd the modification of the \"mdb_set_date_fmt\" function to include a handle\nparameter, so that date formats can be set in a non-global fashion:\n\n  void mdb_set_date_fmt(MdbHandle *mdb, const char *);\n\nThe above function is the most common reason that old projects will fail to\ncompile on 0.9, and the fix is straightforward.\n\nThe previously-deprecated functions mdb_init() and mdb_exit() have been\nremoved. These functions did nothing; any calls to them should be excised with\nprejudice.\n\nThis release introduces two new CLI tools (mdb-count and mdb-queries) and\ndeprecates mdb-array, mdb-header, and mdb-parsecsv. Several man pages have been\nadded or otherwise brought up to date.\n\nThe GNOME-based GUI tool that formerly shipped with MDB Tools has been moved to\na separate project, here:\n\n    https://github.com/mdbtools/gmdb2\n\nIt seems to compile but should probably be classified as abandonware. The\nproject uses a deprecated GUI toolkit, and as such gmdb2 is no longer included\nin Linux distros that used to carry it.\n\nVersion 0.7.1\n=============\nautogen.sh is no more. Use \"autoreconf -if\" to bootstrap the configuration.\n\nautoconf/automake has been updated to more recent standards.\n- config.guess  config.sub  depcomp  install-sh  ltmain.sh  missing  ylwrap\n  files are now in build-aux/ directory\nYou'll now need autoconf >= 2.58\n\nAn experimental (buggy) version of ODBC driver that supports UCS-2 interface\nis now available: libmdbodbcW.so\nNote that libmdbodbc supports UTF-8 really well, so that this is usually not\nneeded.\n\nVersion 0.3\n===========\nThe organization of the project files has changed a bit from that last release.\nThe autoconf stuff has been moved to the root directory.  The include directory\nhas also been moved from src/include to include\n\n", "dnl Process this file with autoconf to produce a configure script.\nAC_INIT([mdbtools],[0.9.3],[https://github.com/mdbtools/mdbtools/issues],[],[https://github.com/mdbtools/mdbtools])\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_SRCDIR(src/extras/mdb-dump.c)\nAM_INIT_AUTOMAKE([foreign dist-zip])\n\nMDBTOOLS_VERSION_MAJOR=0\nMDBTOOLS_VERSION_MINOR=9\nMDBTOOLS_VERSION_MICRO=3\n\n# Update these numbers with every release\n# See https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\nVERSION_INFO=3:3:0\nAC_SUBST(VERSION_INFO)\nAC_SUBST(MDBTOOLS_CFLAGS)\n\nAM_MAINTAINER_MODE([enable])\nAM_SILENT_RULES([yes])\n\nAC_PROG_CC(gcc)\nAC_PROG_CXX\ndnl Checks for programs.\nAC_PROG_MAKE_SET\nm4_pattern_allow([AM_PROG_AR], [AM_PROG_AR])\nLT_INIT([win32-dll])\nAC_PROG_LEX\nAC_PROG_YACC\n\ndnl Checks for header files.\nAC_HEADER_STDC\nAC_CHECK_HEADERS(fcntl.h limits.h unistd.h xlocale.h)\nAC_CHECK_LIB(mswstr, DBLCMapStringW)\nAC_CHECK_DECLS([program_invocation_short_name], [], [], [[\n                #define _GNU_SOURCE\n                #include <errno.h>]])\n\ndnl Checks for library functions.\nVL_LIB_READLINE\nAC_CHECK_FUNCS(strptime fmemopen gmtime_r reallocf wcstombs_l vasprintf vasnprintf)\n\ndnl Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_TYPE_SIZE_T\n\nAM_ICONV\nAM_GCC_ATTRIBUTE_ALIAS\n\ndnl Enable large files on 32-bit systems\nAC_SYS_LARGEFILE\n\ndnl no optional stuff by default\nOPTDIRS=\"\"\n\ndnl ---------------------------------------------------------------------\ndnl Compile time options\ndnl ---------------------------------------------------------------------\n\nsql=true\nAC_MSG_CHECKING( Are we using flex )\nif test \"x$LEX\" = \"xflex\"; then\nLFLAGS=\"$LFLAGS -i -8\"\nAC_MSG_RESULT( yes );\nelse\nAC_MSG_RESULT( no - SQL engine disable);\nsql=false\nfi\n\nif $YACC -V | grep \"bison.* 3[.]\" >/dev/null 2>&1; then\n    if $YACC -Wno-conflicts-sr -V >/dev/null 2>&1; then\n        YFLAGS=\"$YFLAGS -Wno-conflicts-sr\"\n    fi\n    if $YACC -Wno-yacc -V >/dev/null 2>&1; then\n        YFLAGS=\"$YFLAGS -Wno-yacc\"\n    fi\nelse\n    AC_MSG_WARN([Bison 3.0+ is not available: SQL disabled.])\n    sql=false\nfi\n\nif test \"x$sql\" = \"xtrue\"; then\n\tCFLAGS=\"$CFLAGS -DSQL\"\n\tOPTDIRS=\"$OPTDIRS sql\"\nfi\n\nAM_CONDITIONAL(SQL, test x$sql = xtrue)\nAC_SUBST(SQL)\nAC_SUBST(LFLAGS)\n\nCFLAGS=\"$CFLAGS -Wall -Werror\"\nAS_CASE([$host],\n        [*mingw*|*cygwin*], [LDFLAGS=\"$LDFLAGS -no-undefined\"], [])\nAS_CASE([$host],\n        [*mingw*], [LDFLAGS=\"$LDFLAGS -lWs2_32\"], [])\n\ndnl Fuzz testing\n\nAC_ARG_ENABLE([fuzz-testing], AS_HELP_STRING([--enable-fuzz-testing], [\"Enable fuzz testing (requires Clang 6 or later)\"]), [\n   AC_MSG_CHECKING([whether $CC accepts -fsanitize=fuzzer])\n   tmp_saved_flags=$[]_AC_LANG_PREFIX[]FLAGS\n   _AC_LANG_PREFIX[]FLAGS=\"$[]_AC_LANG_PREFIX[]FLAGS -fsanitize=fuzzer\"\n   AC_LINK_IFELSE([AC_LANG_PROGRAM()],\n       [\n        AC_MSG_RESULT(yes)\n        OPTDIRS=\"$OPTDIRS fuzz\"\n        fuzzer=yes],\n        AC_MSG_RESULT(no)\n       AC_MSG_FAILURE([-fsanitize=fuzzer not supported (Required with --enable-fuzz-testing)]))\n   _AC_LANG_PREFIX[]FLAGS=$tmp_saved_flags\n], [fuzzer=no])\nAM_CONDITIONAL([FUZZER_ENABLED], test \"x$fuzzer\" = \"xyes\")\n\nAC_ARG_VAR([LIB_FUZZING_ENGINE], [Location of prebuilt fuzzing engine library])\nAC_SUBST([LIB_FUZZING_ENGINE])\n\ndnl Enable -Wl,--as-needed by default to prevent overlinking\n\nAC_ARG_ENABLE([as-needed],\n  AS_HELP_STRING([--disable-as-needed],[disable overlinking protection]),\n  [enable_as_needed=$enableval], [enable_as_needed=yes])\n\nif test \"x$enable_as_needed\" != \"xno\"; then\n  AC_MSG_CHECKING([whether $LD accepts --as-needed])\n  case `$LD --as-needed -v 2>&1 </dev/null` in\n  *GNU* | *'with BFD'*)\n    LDFLAGS=\"$LDFLAGS -Wl,--as-needed\"\n    AC_MSG_RESULT([yes])\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n\ndnl check for iODBC\n\nAC_ARG_WITH(iodbc,\n  AS_HELP_STRING([--with-iodbc=/path/to/iodbc], [build odbc driver against iODBC]))\nif test \"$with_iodbc\"; then\n\tHAVE_ODBC=true\n\tODBC_CFLAGS=$(iodbc-config --prefix=\"$with_iodbc\" --cflags)\n\tODBC_LIBS=$(iodbc-config --prefix=\"$with_iodbc\" --libs)\n\tODBC_LDFLAGS=\"\"\n\tCFLAGS=\"$CFLAGS -DIODBC\"\n\n\tOLDLDFLAGS=$LDFLAGS\n\tLDFLAGS=\"$LDFLAGS $ODBC_LIBS\"\n\tAC_CHECK_LIB(iodbcinst, SQLGetPrivateProfileString, [FOO=bar],\n                 AC_MSG_ERROR([Could not find SQLGetPrivateProfileString in -liodbcinst]))\n\tLDFLAGS=$OLDLDFLAGS\nfi\n\ndnl check for unixODBC\nAC_ARG_WITH(unixodbc,\n  AS_HELP_STRING([--with-unixodbc=/path/to/unixodbc], [build odbc driver against unixODBC]))\nif test \"$with_unixodbc\"; then\n\tHAVE_ODBC=true\n\tODBC_CFLAGS=\"-I$with_unixodbc/include\"\n\tODBC_LIBS=\"-L$with_unixodbc/$libdir\"\n\tCFLAGS=\"$CFLAGS -DUNIXODBC\"\n\n\tdnl SIZEOF_LONG_INT and HAVE_LONG_LONG are required by some versions of unixODBC\n\tdnl https://github.com/lurcher/unixODBC/issues/40\n\tAC_CHECK_SIZEOF([long int])\n\tAC_CHECK_TYPES([long long])\n\n\tOLDLDFLAGS=$LDFLAGS\n\tLDFLAGS=\"$LDFLAGS $ODBC_LIBS\"\n\tAC_CHECK_LIB(odbcinst, SQLGetPrivateProfileString, [ODBC_LIBS=\"$ODBC_LIBS -lodbcinst\"],\n                 AC_MSG_ERROR([Could not find SQLGetPrivateProfileString in -lodbcinst]))\n\tLDFLAGS=$OLDLDFLAGS\n\n\tOLDLDFLAGS=$LDFLAGS\n\tLDFLAGS=\"$LDFLAGS -Wl,-Bsymbolic-functions\"\n\tAC_MSG_CHECKING([for -Bsymbolic-functions linker flag])\n\tAC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],\n\t\t\t\t[AC_MSG_RESULT(yes)\n\t\t\t\tODBC_LDFLAGS=\"-Wl,-Bsymbolic-functions\"],\n\t\t\t\t[AC_MSG_RESULT(no)\n\t\t\t\tODBC_LDFLAGS=\"\"])\n\tLDFLAGS=$OLDLDFLAGS\nfi\n\nif test \"x$HAVE_ODBC\" = \"xtrue\"; then\n\tif test \"x$sql\" != \"xtrue\" ; then\n\t\tAC_MSG_ERROR([ODBC requires flex and bison for the SQL engine])\n\tfi\n\n\tAC_SUBST(ODBC_CFLAGS)\n\tAC_SUBST(ODBC_LIBS)\n\tAC_SUBST(ODBC_LDFLAGS)\n\tOPTDIRS=\"$OPTDIRS odbc\"\nfi\n\ndnl Conditionally build odbc wide version\nAM_CONDITIONAL(ICONV, test \"$am_cv_func_iconv\" = \"yes\")\n\ndnl Testing presence of pkg-config\nAC_MSG_CHECKING([pkg-config m4 macros])\nif test m4_ifdef([PKG_CHECK_MODULES], [yes], [no]) = yes; then\n\tAC_MSG_RESULT([yes]);\nelse\n\tAC_MSG_RESULT([no]);\n\tAC_MSG_ERROR([\npkg-config is required.\nSee pkg-config.freedesktop.org])\nfi\n\ndnl See if GLib is present and wanted\nAC_ARG_ENABLE(glib,\n    AS_HELP_STRING([--disable-glib], [do not link with GLib]),\n        [enable_glib=$enableval], [enable_glib=yes])\n\nif test \"$enable_glib\" = \"yes\"; then\n    GLIB_PACKAGE=glib-2.0\n    PKG_CHECK_MODULES([GLIB], [$GLIB_PACKAGE], HAVE_GLIB=true, HAVE_GLIB=false)\n    if test \"x$HAVE_GLIB\" = \"xtrue\"; then\n        GLIB_CFLAGS=\"$GLIB_CFLAGS -DHAVE_GLIB=1\"\n        AC_CHECK_LIB($GLIB_PACKAGE, g_memdup2, [GLIB_CFLAGS=\"$GLIB_CFLAGS -DHAVE_G_MEMDUP2=1\"])\n        AC_SUBST(GLIB_PACKAGE)\n    else\n        enable_glib=no\n    fi\nfi\nAM_CONDITIONAL(FAKE_GLIB, test \"x$enable_glib\" != \"xyes\")\n\nAC_SUBST([OPTDIRS])\nAC_CONFIG_FILES([src/Makefile])\n\n##################################################\n# Check for txt2man\n##################################################\n\nAC_ARG_ENABLE(man,\n  AS_HELP_STRING([--disable-man], [disable man generation]),\n  enable_man=\"$enableval\", [enable_man=yes])\nif test \"$enable_man\" = yes; then\n  if ! which gawk > /dev/null; then\n    AC_MSG_ERROR([Could not find GNU awk. Install it or configure with --disable-man if you are not interested in manuals.])\n  fi\nfi\nAM_CONDITIONAL(ENABLE_MAN, test \"$enable_man\" = yes)\n\n##################################################\n# Check for bash-completion.\n##################################################\n\nAC_ARG_WITH([bash-completion-dir],\n  AS_HELP_STRING([--with-bash-completion-dir[=PATH]],\n  [Install the bash auto-completion script in this directory. @<:@default=yes@:>@]),\n  [],\n  [with_bash_completion_dir=yes])\n\nif test \"x$with_bash_completion_dir\" = \"xyes\"; then\n  PKG_CHECK_MODULES([BASH_COMPLETION], [bash-completion >= 2.0],\n    [BASH_COMPLETION_DIR=\"`pkg-config --variable=completionsdir bash-completion`\"],\n    [BASH_COMPLETION_DIR=\"$datadir/bash-completion/completions\"])\nelse\n  BASH_COMPLETION_DIR=\"$with_bash_completion_dir\"\nfi\n\nAC_SUBST([BASH_COMPLETION_DIR])\nAM_CONDITIONAL([ENABLE_BASH_COMPLETION],[test \"x$with_bash_completion_dir\" != \"xno\"])\n\nAC_CONFIG_FILES([\nlibmdb.pc\nlibmdbsql.pc\nsrc/util/Makefile\nsrc/util/bash-completion/Makefile\nsrc/extras/Makefile\nMakefile\ninclude/Makefile\nsrc/libmdb/Makefile\nsrc/sql/Makefile\nsrc/odbc/Makefile\nsrc/fuzz/Makefile\ndoc/Makefile\ninclude/mdbver.h])\nAC_OUTPUT\n\n##################################################\n# Print summary\n##################################################\n\n\nbold_red=$(tput bold 2>/dev/null)$(tput setf 4 2>/dev/null)\nbold_green=$(tput bold 2>/dev/null)$(tput setf 2 2>/dev/null)\nbold=$(tput bold 2>/dev/null)\nreset=$(tput sgr0 2>/dev/null)\nAC_MSG_NOTICE([])\nAC_MSG_NOTICE([${bold}MDB Tools $VERSION - Configuration summary${reset}])\nAC_MSG_NOTICE([])\nif test x$sql = xtrue; then summary=${bold_green}enabled; else summary=${bold_red}disabled; fi\nAC_MSG_NOTICE([   SQL             : ${summary}${reset}])\nif test x$HAVE_ODBC = xtrue; then summary=${bold_green}enabled; else summary=${bold_red}disabled; fi\nAC_MSG_NOTICE([   ODBC            : ${summary}${reset}])\nif test x$enable_glib = xyes; then summary=${bold_green}enabled; else summary=${bold_red}disabled; fi\nAC_MSG_NOTICE([   GLib            : ${summary}${reset}])\nif test x$enable_man = xyes; then summary=${bold_green}enabled; else summary=${bold_red}disabled; fi\nAC_MSG_NOTICE([   man pages       : ${summary}${reset}])\nif test \"x$with_bash_completion_dir\" != \"xno\"; then summary=${bold_green}enabled; else summary=${bold_red}disabled; fi\nAC_MSG_NOTICE([   bash-completion : ${summary}${reset}])\nAC_MSG_NOTICE([])\n"], "filenames": ["NEWS", "configure.ac"], "buggy_code_start_loc": [1, 2], "buggy_code_end_loc": [41, 3], "fixing_code_start_loc": [1, 2], "fixing_code_end_loc": [25, 3], "type": "CWE-787", "message": "MDB Tools (aka mdbtools) 0.9.2 has a stack-based buffer overflow (at 0x7ffd6e029ee0) in mdb_numeric_to_string (called from mdb_xfer_bound_data and _mdb_attempt_bind).", "other": {"cve": {"id": "CVE-2021-45927", "sourceIdentifier": "cve@mitre.org", "published": "2022-01-01T01:15:08.317", "lastModified": "2022-12-09T16:40:49.057", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MDB Tools (aka mdbtools) 0.9.2 has a stack-based buffer overflow (at 0x7ffd6e029ee0) in mdb_numeric_to_string (called from mdb_xfer_bound_data and _mdb_attempt_bind)."}, {"lang": "es", "value": "MDB Tools (tambi\u00e9n se conoce como mdbtools) versi\u00f3n 0.9.2, presenta un desbordamiento del b\u00fafer en la regi\u00f3n stack de la memoria (en 0x7ffd6e029ee0) en la funci\u00f3n mdb_numeric_to_string (llamado desde mdb_xfer_bound_data y _mdb_attempt_bind)."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mdbtools_project:mdbtools:0.9.2:*:*:*:*:*:*:*", "matchCriteriaId": "7ADB0A98-58AE-42FF-8068-968093D314BC"}]}]}], "references": [{"url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36187", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/google/oss-fuzz-vulns/blob/main/vulns/mdbtools/OSV-2021-1003.yaml", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/mdbtools/mdbtools/commit/373b7ff4c4daf887269c078407cb1338942c4ea6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202208-12", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mdbtools/mdbtools/commit/373b7ff4c4daf887269c078407cb1338942c4ea6"}}