{"buggy_code": ["<?php\n/**\n * This file is part of FacturaScripts\n * Copyright (C) 2017-2022 Carlos Garcia Gomez <carlos@facturascripts.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace FacturaScripts\\Core\\Controller;\n\nuse FacturaScripts\\Core\\Base\\Controller;\nuse FacturaScripts\\Core\\Base\\ControllerPermissions;\nuse FacturaScripts\\Core\\Base\\DataBase\\DataBaseWhere;\nuse FacturaScripts\\Core\\Lib\\Widget\\VisualItemLoadEngine;\nuse FacturaScripts\\Dinamic\\Model\\CodeModel;\nuse FacturaScripts\\Dinamic\\Model\\PageOption;\nuse FacturaScripts\\Dinamic\\Model\\User;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Edit option for any page.\n *\n * @author Carlos Garc\u00eda G\u00f3mez          <carlos@facturascripts.com>\n * @author Jose Antonio Cuello          <yopli2000@gmail.com>\n * @author Fco. Antonio Moreno P\u00e9rez    <famphuelva@gmail.com>\n */\nclass EditPageOption extends Controller\n{\n\n    /**\n     * Contains the url to go back.\n     *\n     * @var string\n     */\n    public $backPage;\n\n    /**\n     * @var array\n     */\n    public $columns = [];\n\n    /**\n     * @var array\n     */\n    public $modals = [];\n\n    /**\n     * Details of the view configuration\n     *\n     * @var PageOption\n     */\n    public $model;\n\n    /**\n     * @var array\n     */\n    public $rows = [];\n\n    /**\n     * Selected user, for which the controller columns are created or modified\n     *\n     * @var string\n     */\n    public $selectedUser;\n\n    /**\n     * Selected view, for which columns are created or modified\n     *\n     * @var string\n     */\n    public $selectedViewName;\n\n    public function getPageData(): array\n    {\n        $data = parent::getPageData();\n        $data['menu'] = 'admin';\n        $data['showonmenu'] = false;\n        $data['title'] = 'options';\n        $data['icon'] = 'fas fa-wrench';\n        return $data;\n    }\n\n    /**\n     * Get the list of users, excluding the user admin\n     *\n     * @return array\n     */\n    public function getUserList(): array\n    {\n        $result = [];\n        $users = CodeModel::all(User::tableName(), 'nick', 'nick', false);\n        foreach ($users as $codeModel) {\n            if ($codeModel->code != 'admin') {\n                $result[$codeModel->code] = $codeModel->description;\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Runs the controller's private logic.\n     *\n     * @param Response $response\n     * @param User $user\n     * @param ControllerPermissions $permissions\n     */\n    public function privateCore(&$response, $user, $permissions)\n    {\n        parent::privateCore($response, $user, $permissions);\n        $this->model = new PageOption();\n        $this->loadSelectedViewName();\n        $this->backPage = $this->request->get('url') ?: $this->selectedViewName;\n        $this->selectedUser = $this->user->admin ? $this->request->get('nick') : $this->user->nick;\n        $this->loadPageOptions();\n\n        $action = $this->request->get('action', '');\n        switch ($action) {\n            case 'delete':\n                $this->deleteAction();\n                break;\n\n            case 'save':\n                $this->saveAction();\n                break;\n        }\n    }\n\n    /**\n     * Delete configuration for view\n     */\n    protected function deleteAction()\n    {\n        if (false === $this->permissions->allowDelete) {\n            $this->toolBox()->i18nLog()->warning('not-allowed-delete');\n            return;\n        }\n\n        if ($this->model->delete()) {\n            $this->toolBox()->i18nLog()->notice('record-deleted-correctly');\n            $this->loadPageOptions();\n            return;\n        }\n\n        $this->toolBox()->i18nLog()->warning('default-not-deletable');\n    }\n\n    /**\n     * Load the display options to edit.\n     * If it does not find them in the database,\n     * it loads the default options of the xml view.\n     */\n    protected function loadPageOptions()\n    {\n        if ($this->selectedUser && false === $this->loadPageOptionsForUser()) {\n            VisualItemLoadEngine::installXML($this->selectedViewName, $this->model);\n        }\n\n        if (empty($this->selectedUser) && false === $this->loadPageOptionsForAll()) {\n            VisualItemLoadEngine::installXML($this->selectedViewName, $this->model);\n        }\n\n        VisualItemLoadEngine::loadArray($this->columns, $this->modals, $this->rows, $this->model);\n    }\n\n    protected function loadSelectedViewName()\n    {\n        $code = $this->request->get('code', '');\n        if (false === strpos($code, '-')) {\n            $this->selectedViewName = $code;\n            return;\n        }\n\n        $parts = explode('-', $code);\n        $this->selectedViewName = empty($parts) ? $code : $parts[0];\n    }\n\n    /**\n     * Save new configuration for view\n     */\n    protected function saveAction()\n    {\n        if (false === $this->permissions->allowUpdate) {\n            $this->toolBox()->i18nLog()->warning('not-allowed-modify');\n            return;\n        }\n\n        foreach ($this->model->columns as $key1 => $group) {\n            if ($group['tag'] === 'column') {\n                $name = $group['name'];\n                $this->setColumnOption($this->model->columns[$key1], $name, 'title', false, false);\n                $this->setColumnOption($this->model->columns[$key1], $name, 'display', false, false);\n                $this->setColumnOption($this->model->columns[$key1], $name, 'level', false, true);\n                $this->setColumnOption($this->model->columns[$key1], $name, 'readonly', true, true);\n                $this->setColumnOption($this->model->columns[$key1], $name, 'decimal', true, true);\n                $this->setColumnOption($this->model->columns[$key1], $name, 'numcolumns', false, true);\n                $this->setColumnOption($this->model->columns[$key1], $name, 'order', false, true);\n                continue;\n            }\n\n            foreach ($group['children'] as $key2 => $col) {\n                $name = $col['name'];\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'title', false, false);\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'display', false, false);\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'level', false, true);\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'readonly', true, true);\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'decimal', true, true);\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'numcolumns', false, true);\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'order', false, true);\n            }\n        }\n\n        if ($this->model->save()) {\n            $this->toolBox()->i18nLog()->notice('record-updated-correctly');\n            $this->loadPageOptions();\n            return;\n        }\n\n        $this->toolBox()->i18nLog()->error('record-save-error');\n    }\n\n    /**\n     * Loads the general display options for all users,\n     * and indicates if they exist or not.\n     *\n     * @return bool\n     */\n    private function loadPageOptionsForAll(): bool\n    {\n        $where = [\n            new DataBaseWhere('name', $this->selectedViewName),\n            new DataBaseWhere('nick', null, 'IS'),\n        ];\n        return $this->model->loadFromCode('', $where);\n    }\n\n    /**\n     * Loads the display options specific to the user.\n     * If they do not exist, look for the display options common to all users.\n     * In either case, it indicates whether it has found a configuration.\n     *\n     * @return bool\n     */\n    private function loadPageOptionsForUser(): bool\n    {\n        $where = [\n            new DataBaseWhere('name', $this->selectedViewName),\n            new DataBaseWhere('nick', $this->selectedUser),\n        ];\n        if ($this->model->loadFromCode('', $where)) {\n            // Existen opciones para el usuario.\n            return true;\n        }\n\n        if (false === $this->loadPageOptionsForAll()) {\n            // No existe opciones generales. Asignamos las opciones por defecto de la vista xml al usuario.\n            $this->model->nick = $this->selectedUser;\n            return false;\n        }\n\n        // No existe opciones para el usuario. Clonamos las generales.\n        $this->model->id = null;\n        $this->model->nick = $this->selectedUser;\n        return true;\n    }\n\n    /**\n     * @param array $column\n     * @param string $name\n     * @param string $key\n     * @param bool $isWidget\n     * @param bool $allowEmpty\n     */\n    private function setColumnOption(&$column, string $name, string $key, bool $isWidget, bool $allowEmpty)\n    {\n        $newValue = self::toolBox()::utils()::noHtml($this->request->request->get($name . '-' . $key));\n        if ($isWidget) {\n            if (!empty($newValue) || $allowEmpty) {\n                $column['children'][0][$key] = $newValue;\n            }\n            return;\n        }\n\n        if (!empty($newValue) || $allowEmpty) {\n            $column[$key] = $newValue;\n        }\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * This file is part of FacturaScripts\n * Copyright (C) 2017-2022 Carlos Garcia Gomez <carlos@facturascripts.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace FacturaScripts\\Core\\Controller;\n\nuse FacturaScripts\\Core\\Base\\Controller;\nuse FacturaScripts\\Core\\Base\\ControllerPermissions;\nuse FacturaScripts\\Core\\Base\\DataBase\\DataBaseWhere;\nuse FacturaScripts\\Core\\Lib\\Widget\\VisualItemLoadEngine;\nuse FacturaScripts\\Dinamic\\Model\\CodeModel;\nuse FacturaScripts\\Dinamic\\Model\\Page;\nuse FacturaScripts\\Dinamic\\Model\\PageOption;\nuse FacturaScripts\\Dinamic\\Model\\User;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Edit option for any page.\n *\n * @author Carlos Garc\u00eda G\u00f3mez          <carlos@facturascripts.com>\n * @author Jose Antonio Cuello          <yopli2000@gmail.com>\n * @author Fco. Antonio Moreno P\u00e9rez    <famphuelva@gmail.com>\n */\nclass EditPageOption extends Controller\n{\n\n    /**\n     * Contains the url to go back.\n     *\n     * @var string\n     */\n    public $backPage;\n\n    /**\n     * @var array\n     */\n    public $columns = [];\n\n    /**\n     * @var array\n     */\n    public $modals = [];\n\n    /**\n     * Details of the view configuration\n     *\n     * @var PageOption\n     */\n    public $model;\n\n    /**\n     * @var array\n     */\n    public $rows = [];\n\n    /**\n     * Selected user, for which the controller columns are created or modified\n     *\n     * @var string\n     */\n    public $selectedUser;\n\n    /**\n     * Selected view, for which columns are created or modified\n     *\n     * @var string\n     */\n    public $selectedViewName;\n\n    public function getPageData(): array\n    {\n        $data = parent::getPageData();\n        $data['menu'] = 'admin';\n        $data['showonmenu'] = false;\n        $data['title'] = 'options';\n        $data['icon'] = 'fas fa-wrench';\n        return $data;\n    }\n\n    /**\n     * Get the list of users, excluding the user admin\n     *\n     * @return array\n     */\n    public function getUserList(): array\n    {\n        $result = [];\n        $users = CodeModel::all(User::tableName(), 'nick', 'nick', false);\n        foreach ($users as $codeModel) {\n            if ($codeModel->code != 'admin') {\n                $result[$codeModel->code] = $codeModel->description;\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Runs the controller's private logic.\n     *\n     * @param Response $response\n     * @param User $user\n     * @param ControllerPermissions $permissions\n     */\n    public function privateCore(&$response, $user, $permissions)\n    {\n        parent::privateCore($response, $user, $permissions);\n        $this->model = new PageOption();\n        $this->loadSelectedViewName();\n        $this->setBackPage();\n        $this->selectedUser = $this->user->admin ? $this->request->get('nick') : $this->user->nick;\n        $this->loadPageOptions();\n\n        $action = $this->request->get('action', '');\n        switch ($action) {\n            case 'delete':\n                $this->deleteAction();\n                break;\n\n            case 'save':\n                $this->saveAction();\n                break;\n        }\n    }\n\n    /**\n     * Delete configuration for view\n     */\n    protected function deleteAction()\n    {\n        if (false === $this->permissions->allowDelete) {\n            $this->toolBox()->i18nLog()->warning('not-allowed-delete');\n            return;\n        }\n\n        if ($this->model->delete()) {\n            $this->toolBox()->i18nLog()->notice('record-deleted-correctly');\n            $this->loadPageOptions();\n            return;\n        }\n\n        $this->toolBox()->i18nLog()->warning('default-not-deletable');\n    }\n\n    /**\n     * Load the display options to edit.\n     * If it does not find them in the database,\n     * it loads the default options of the xml view.\n     */\n    protected function loadPageOptions()\n    {\n        if ($this->selectedUser && false === $this->loadPageOptionsForUser()) {\n            VisualItemLoadEngine::installXML($this->selectedViewName, $this->model);\n        }\n\n        if (empty($this->selectedUser) && false === $this->loadPageOptionsForAll()) {\n            VisualItemLoadEngine::installXML($this->selectedViewName, $this->model);\n        }\n\n        VisualItemLoadEngine::loadArray($this->columns, $this->modals, $this->rows, $this->model);\n    }\n\n    protected function loadSelectedViewName()\n    {\n        $code = $this->request->get('code', '');\n        if (false === strpos($code, '-')) {\n            $this->selectedViewName = $code;\n            return;\n        }\n\n        $parts = explode('-', $code);\n        $this->selectedViewName = empty($parts) ? $code : $parts[0];\n    }\n\n    /**\n     * Save new configuration for view\n     */\n    protected function saveAction()\n    {\n        if (false === $this->permissions->allowUpdate) {\n            $this->toolBox()->i18nLog()->warning('not-allowed-modify');\n            return;\n        }\n\n        foreach ($this->model->columns as $key1 => $group) {\n            if ($group['tag'] === 'column') {\n                $name = $group['name'];\n                $this->setColumnOption($this->model->columns[$key1], $name, 'title', false, false);\n                $this->setColumnOption($this->model->columns[$key1], $name, 'display', false, false);\n                $this->setColumnOption($this->model->columns[$key1], $name, 'level', false, true);\n                $this->setColumnOption($this->model->columns[$key1], $name, 'readonly', true, true);\n                $this->setColumnOption($this->model->columns[$key1], $name, 'decimal', true, true);\n                $this->setColumnOption($this->model->columns[$key1], $name, 'numcolumns', false, true);\n                $this->setColumnOption($this->model->columns[$key1], $name, 'order', false, true);\n                continue;\n            }\n\n            foreach ($group['children'] as $key2 => $col) {\n                $name = $col['name'];\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'title', false, false);\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'display', false, false);\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'level', false, true);\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'readonly', true, true);\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'decimal', true, true);\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'numcolumns', false, true);\n                $this->setColumnOption($this->model->columns[$key1]['children'][$key2], $name, 'order', false, true);\n            }\n        }\n\n        if ($this->model->save()) {\n            $this->toolBox()->i18nLog()->notice('record-updated-correctly');\n            $this->loadPageOptions();\n            return;\n        }\n\n        $this->toolBox()->i18nLog()->error('record-save-error');\n    }\n\n    /**\n     * Loads the general display options for all users,\n     * and indicates if they exist or not.\n     *\n     * @return bool\n     */\n    private function loadPageOptionsForAll(): bool\n    {\n        $where = [\n            new DataBaseWhere('name', $this->selectedViewName),\n            new DataBaseWhere('nick', null, 'IS'),\n        ];\n        return $this->model->loadFromCode('', $where);\n    }\n\n    /**\n     * Loads the display options specific to the user.\n     * If they do not exist, look for the display options common to all users.\n     * In either case, it indicates whether it has found a configuration.\n     *\n     * @return bool\n     */\n    private function loadPageOptionsForUser(): bool\n    {\n        $where = [\n            new DataBaseWhere('name', $this->selectedViewName),\n            new DataBaseWhere('nick', $this->selectedUser),\n        ];\n        if ($this->model->loadFromCode('', $where)) {\n            // Existen opciones para el usuario.\n            return true;\n        }\n\n        if (false === $this->loadPageOptionsForAll()) {\n            // No existe opciones generales. Asignamos las opciones por defecto de la vista xml al usuario.\n            $this->model->nick = $this->selectedUser;\n            return false;\n        }\n\n        // No existe opciones para el usuario. Clonamos las generales.\n        $this->model->id = null;\n        $this->model->nick = $this->selectedUser;\n        return true;\n    }\n\n    private function setBackPage()\n    {\n        // check if the url is a real controller name\n        $url = $this->request->get('url', '');\n        $pageModel = new Page();\n        foreach ($pageModel->all([], [], 0, 0) as $page) {\n            if (substr($url, 0, strlen($page->name)) === $page->name) {\n                $this->backPage = $url;\n                return;\n            }\n        }\n\n        // set the default back page\n        $this->backPage = $this->selectedViewName;\n    }\n\n    /**\n     * @param array $column\n     * @param string $name\n     * @param string $key\n     * @param bool $isWidget\n     * @param bool $allowEmpty\n     */\n    private function setColumnOption(&$column, string $name, string $key, bool $isWidget, bool $allowEmpty)\n    {\n        $newValue = self::toolBox()::utils()::noHtml($this->request->request->get($name . '-' . $key));\n        if ($isWidget) {\n            if (!empty($newValue) || $allowEmpty) {\n                $column['children'][0][$key] = $newValue;\n            }\n            return;\n        }\n\n        if (!empty($newValue) || $allowEmpty) {\n            $column[$key] = $newValue;\n        }\n    }\n}\n"], "filenames": ["Core/Controller/EditPageOption.php"], "buggy_code_start_loc": [26], "buggy_code_end_loc": [277], "fixing_code_start_loc": [27], "fixing_code_end_loc": [295], "type": "CWE-79", "message": "Reflected Xss using url based payload in GitHub repository neorazorx/facturascripts prior to 2022.07. Xss can use to steal user's cookies which lead to Account takeover or do any malicious activity in victim's browser", "other": {"cve": {"id": "CVE-2022-1682", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-12T09:15:13.827", "lastModified": "2022-05-21T03:40:28.247", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Reflected Xss using url based payload in GitHub repository neorazorx/facturascripts prior to 2022.07. Xss can use to steal user's cookies which lead to Account takeover or do any malicious activity in victim's browser"}, {"lang": "es", "value": "Una vulnerabilidad de tipo Xss reflejado usando una carga \u00fatil basada en url en el repositorio de GitHub neorazorx/facturascripts versiones anteriores a 2022.07. El ataque de tipo Xss puede usarse para robar las cookies del usuario, lo que conlleva a una toma de control de la cuenta o cualquier actividad maliciosa en el navegador de la v\u00edctima"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 9.4, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:facturascripts:facturascripts:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022.07", "matchCriteriaId": "9E4D15F9-24C7-490B-9DE0-71406995A06F"}]}]}], "references": [{"url": "https://github.com/neorazorx/facturascripts/commit/8e31d8434014a6d1e8791a489d84268fd74b0c9a", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/e962d191-93e2-405e-a6af-b4a4e4d02527", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/neorazorx/facturascripts/commit/8e31d8434014a6d1e8791a489d84268fd74b0c9a"}}