{"buggy_code": ["import sys\nfrom datetime import datetime, timedelta\nfrom unittest import skipUnless\n\nimport django\nfrom django.conf import settings\nfrom django.contrib import auth\nfrom django.contrib.auth.models import User\nfrom django.contrib.sessions.backends.base import CreateError\nfrom django.core.management import call_command\nfrom django.test import TestCase, TransactionTestCase\nfrom django.test.utils import modify_settings, override_settings\nfrom django.urls import reverse\nfrom django.utils.timezone import now\nfrom user_sessions.backends.db import SessionStore\nfrom user_sessions.models import Session\nfrom user_sessions.templatetags.user_sessions import device, location\nfrom user_sessions.utils.tests import Client\n\ntry:\n    from urllib.parse import urlencode\nexcept ImportError:\n    from urllib import urlencode\ntry:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\n\ntry:\n    from django.contrib.gis.geoip2 import GeoIP2\n    geoip = GeoIP2()\n    geoip_msg = None\nexcept Exception as error_geoip2:\n    try:\n        from django.contrib.gis.geoip import GeoIP\n        geoip = GeoIP()\n        geoip_msg = None\n    except Exception as error_geoip:\n        geoip = None\n        geoip_msg = str(error_geoip2) + \" and \" + str(error_geoip)\n\n\nclass MiddlewareTest(TestCase):\n    def test_unmodified_session(self):\n        self.client.get('/', HTTP_USER_AGENT='Python/2.7')\n        self.assertNotIn(settings.SESSION_COOKIE_NAME, self.client.cookies)\n\n    def test_modify_session(self):\n        self.client.get('/modify_session/', HTTP_USER_AGENT='Python/2.7')\n        self.assertIn(settings.SESSION_COOKIE_NAME, self.client.cookies)\n        session = Session.objects.get(\n            pk=self.client.cookies[settings.SESSION_COOKIE_NAME].value\n        )\n        self.assertEqual(session.user_agent, 'Python/2.7')\n        self.assertEqual(session.ip, '127.0.0.1')\n\n    def test_login(self):\n        admin_login_url = reverse('admin:login')\n        user = User.objects.create_superuser('bouke', '', 'secret')\n        response = self.client.post(admin_login_url,\n                                    data={\n                                        'username': 'bouke',\n                                        'password': 'secret',\n                                        'this_is_the_login_form': '1',\n                                        'next': '/admin/'},\n                                    HTTP_USER_AGENT='Python/2.7')\n        self.assertRedirects(response, '/admin/')\n        session = Session.objects.get(\n            pk=self.client.cookies[settings.SESSION_COOKIE_NAME].value\n        )\n        self.assertEqual(user, session.user)\n\n    def test_long_ua(self):\n        self.client.get('/modify_session/',\n                        HTTP_USER_AGENT=''.join('a' for _ in range(400)))\n\n\nclass ViewsTest(TestCase):\n    client_class = Client\n\n    def setUp(self):\n        self.user = User.objects.create_user('bouke', '', 'secret')\n        assert self.client.login(username='bouke', password='secret')\n\n    def test_list(self):\n        self.user.session_set.create(session_key='ABC123', ip='127.0.0.1',\n                                     expire_date=datetime.now() + timedelta(days=1),\n                                     user_agent='Firefox')\n        response = self.client.get(reverse('user_sessions:session_list'))\n        self.assertContains(response, 'Active Sessions')\n        self.assertContains(response, 'End Session', 3)\n        self.assertContains(response, 'Firefox')\n\n    def test_delete(self):\n        session_key = self.client.cookies[settings.SESSION_COOKIE_NAME].value\n        response = self.client.post(reverse('user_sessions:session_delete',\n                                            args=[session_key]))\n        self.assertRedirects(response, '/')\n\n    def test_delete_all_other(self):\n        self.user.session_set.create(ip='127.0.0.1', expire_date=datetime.now() + timedelta(days=1))\n        self.assertEqual(self.user.session_set.count(), 2)\n        response = self.client.post(reverse('user_sessions:session_delete_other'))\n        self.assertRedirects(response, reverse('user_sessions:session_list'))\n        self.assertEqual(self.user.session_set.count(), 1)\n\n    def test_delete_some_other(self):\n        other = self.user.session_set.create(session_key='OTHER', ip='127.0.0.1',\n                                             expire_date=datetime.now() + timedelta(days=1))\n        self.assertEqual(self.user.session_set.count(), 2)\n        response = self.client.post(reverse('user_sessions:session_delete',\n                                            args=[other.session_key]))\n        self.assertRedirects(response, reverse('user_sessions:session_list'))\n        self.assertEqual(self.user.session_set.count(), 1)\n\n\nclass AdminTest(TestCase):\n    client_class = Client\n\n    def setUp(self):\n        User.objects.create_superuser('bouke', '', 'secret')\n        assert self.client.login(username='bouke', password='secret')\n\n        expired = SessionStore(user_agent='Python/2.5', ip='20.13.1.1')\n        expired.set_expiry(-365 * 86400)\n        expired.save()\n        unexpired = SessionStore(user_agent='Python/2.7', ip='1.1.1.1')\n        unexpired.save()\n\n        self.admin_url = reverse('admin:user_sessions_session_changelist')\n\n    def test_list(self):\n        response = self.client.get(self.admin_url)\n        self.assertContains(response, 'Select session to change')\n        self.assertContains(response, '127.0.0.1')\n        self.assertContains(response, '20.13.1.1')\n        self.assertContains(response, '1.1.1.1')\n\n    def test_search(self):\n        response = self.client.get(self.admin_url, {'q': 'bouke'})\n        self.assertContains(response, '127.0.0.1')\n        self.assertNotContains(response, '20.13.1.1')\n        self.assertNotContains(response, '1.1.1.1')\n\n    def test_mine(self):\n        my_sessions = '%s?%s' % (self.admin_url, urlencode({'owner': 'my'}))\n        response = self.client.get(my_sessions)\n        self.assertContains(response, '127.0.0.1')\n        self.assertNotContains(response, '1.1.1.1')\n\n    def test_expired(self):\n        expired = '%s?%s' % (self.admin_url, urlencode({'active': '0'}))\n        response = self.client.get(expired)\n        self.assertContains(response, '20.13.1.1')\n        self.assertNotContains(response, '1.1.1.1')\n\n    def test_unexpired(self):\n        unexpired = '%s?%s' % (self.admin_url, urlencode({'active': '1'}))\n        response = self.client.get(unexpired)\n        self.assertContains(response, '1.1.1.1')\n        self.assertNotContains(response, '20.13.1.1')\n\n\nclass SessionStoreTest(TestCase):\n    def setUp(self):\n        self.store = SessionStore(user_agent='Python/2.7', ip='127.0.0.1')\n        User.objects.create_user('bouke', '', 'secret', id=1)\n\n    def test_untouched_init(self):\n        self.assertFalse(self.store.modified)\n        self.assertFalse(self.store.accessed)\n\n    def test_auth_session_key(self):\n        self.assertFalse(auth.SESSION_KEY in self.store)\n        self.assertFalse(self.store.modified)\n        self.assertTrue(self.store.accessed)\n\n        self.store.get(auth.SESSION_KEY)\n        self.assertFalse(self.store.modified)\n\n        self.store[auth.SESSION_KEY] = 1\n        self.assertTrue(self.store.modified)\n\n    def test_save(self):\n        self.store[auth.SESSION_KEY] = 1\n        self.store.save()\n\n        session = Session.objects.get(pk=self.store.session_key)\n        self.assertEqual(session.user_agent, 'Python/2.7')\n        self.assertEqual(session.ip, '127.0.0.1')\n        self.assertEqual(session.user_id, 1)\n        self.assertAlmostEqual(now(), session.last_activity,\n                               delta=timedelta(seconds=5))\n\n    def test_load_unmodified(self):\n        self.store[auth.SESSION_KEY] = 1\n        self.store.save()\n        store2 = SessionStore(session_key=self.store.session_key,\n                              user_agent='Python/2.7', ip='127.0.0.1')\n        store2.load()\n        self.assertEqual(store2.user_agent, 'Python/2.7')\n        self.assertEqual(store2.ip, '127.0.0.1')\n        self.assertEqual(store2.user_id, 1)\n        self.assertEqual(store2.modified, False)\n\n    def test_load_modified(self):\n        self.store[auth.SESSION_KEY] = 1\n        self.store.save()\n        store2 = SessionStore(session_key=self.store.session_key,\n                              user_agent='Python/3.3', ip='8.8.8.8')\n        store2.load()\n        self.assertEqual(store2.user_agent, 'Python/3.3')\n        self.assertEqual(store2.ip, '8.8.8.8')\n        self.assertEqual(store2.user_id, 1)\n        self.assertEqual(store2.modified, True)\n\n    def test_duplicate_create(self):\n        s1 = SessionStore(session_key='DUPLICATE', user_agent='Python/2.7', ip='127.0.0.1')\n        s1.create()\n        s2 = SessionStore(session_key='DUPLICATE', user_agent='Python/2.7', ip='127.0.0.1')\n        s2.create()\n        self.assertNotEqual(s1.session_key, s2.session_key)\n\n        s3 = SessionStore(session_key=s1.session_key, user_agent='Python/2.7', ip='127.0.0.1')\n        with self.assertRaises(CreateError):\n            s3.save(must_create=True)\n\n    def test_delete(self):\n        # not persisted, should just return\n        self.store.delete()\n\n        # create, then delete\n        self.store.create()\n        session_key = self.store.session_key\n        self.store.delete()\n\n        # non-existing sessions, should not raise\n        self.store.delete()\n        self.store.delete(session_key)\n\n    def test_clear(self):\n        \"\"\"\n        Clearing the session should clear all non-browser information\n        \"\"\"\n        self.store[auth.SESSION_KEY] = 1\n        self.store.clear()\n        self.store.save()\n\n        session = Session.objects.get(pk=self.store.session_key)\n        self.assertEqual(session.user_id, None)\n\n\nclass ModelTest(TestCase):\n    def test_get_decoded(self):\n        User.objects.create_user('bouke', '', 'secret', id=1)\n        store = SessionStore(user_agent='Python/2.7', ip='127.0.0.1')\n        store[auth.SESSION_KEY] = 1\n        store['foo'] = 'bar'\n        store.save()\n\n        session = Session.objects.get(pk=store.session_key)\n        self.assertEqual(session.get_decoded(),\n                         {'foo': 'bar', auth.SESSION_KEY: 1})\n\n    def test_very_long_ua(self):\n        ua = 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; ' \\\n             'Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; ' \\\n             '.NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; ' \\\n             'InfoPath.3; ms-office; MSOffice 14)'\n        store = SessionStore(user_agent=ua, ip='127.0.0.1')\n        store.save()\n\n        session = Session.objects.get(pk=store.session_key)\n        self.assertEqual(session.user_agent, ua[:200])\n\n\nclass ClientTest(TestCase):\n    def test_invalid_login(self):\n        client = Client()\n        self.assertFalse(client.login())\n\n    def test_restore_session(self):\n        store = SessionStore(user_agent='Python/2.7', ip='127.0.0.1')\n        store['foo'] = 'bar'\n        store.save()\n        client = Client()\n        client.cookies[settings.SESSION_COOKIE_NAME] = store.session_key\n        User.objects.create_user('bouke', '', 'secret')\n        assert client.login(username='bouke', password='secret')\n        self.assertEqual(client.session['foo'], 'bar')\n\n    def test_login_logout(self):\n        client = Client()\n        User.objects.create_user('bouke', '', 'secret')\n        assert client.login(username='bouke', password='secret')\n        assert settings.SESSION_COOKIE_NAME in client.cookies\n\n        client.logout()\n        assert settings.SESSION_COOKIE_NAME not in client.cookies\n\n        # should not raise\n        client.logout()\n\n    @patch('django.contrib.auth.signals.user_logged_in.send')\n    def test_login_signal(self, mock_user_logged_in):\n        client = Client()\n        User.objects.create_user('bouke', '', 'secret')\n        assert client.login(username='bouke', password='secret')\n        assert mock_user_logged_in.called\n        request = mock_user_logged_in.call_args[1]['request']\n        assert getattr(request, 'user', None) is not None\n\n    @override_settings(INSTALLED_APPS=())\n    def test_no_session(self):\n        self.assertIsNone(Client().session)\n\n\nclass LocationTemplateFilterTest(TestCase):\n    @override_settings(GEOIP_PATH=None)\n    def test_no_location(self):\n        self.assertEqual(location('127.0.0.1'), None)\n\n    @skipUnless(geoip, geoip_msg)\n    def test_locations(self):\n        self.assertEqual('United States', location('8.8.8.8'))\n        self.assertEqual('San Diego, United States', location('44.55.66.77'))\n\n\nclass DeviceTemplateFilterTest(TestCase):\n    def test_ie(self):\n        self.assertEqual(\n            'Internet Explorer on Windows XP',\n            device('Mozilla/4.0 (Windows; MSIE 6.0; Windows NT 5.1; SV1; '\n                   '.NET CLR 2.0.50727)')\n        )\n        self.assertEqual(\n            'Internet Explorer on Windows Vista',\n            device('Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; '\n                   'Trident/4.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 1.1.4322;'\n                   ' InfoPath.2; .NET CLR 3.5.21022; .NET CLR 3.5.30729; '\n                   'MS-RTC LM 8; OfficeLiveConnector.1.4; OfficeLivePatch.1.3;'\n                   ' .NET CLR 3.0.30729)')\n        )\n        self.assertEqual(\n            'Internet Explorer on Windows 7',\n            device('Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; '\n                   'Trident/6.0)')\n        )\n        self.assertEqual(\n            'Internet Explorer on Windows 8',\n            device('Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; '\n                   'Win64; x64; Trident/6.0)')\n        )\n        self.assertEqual(\n            'Internet Explorer on Windows 8.1',\n            device('Mozilla/5.0 (IE 11.0; Windows NT 6.3; Trident/7.0; '\n                   '.NET4.0E; .NET4.0C; rv:11.0) like Gecko')\n        )\n\n    def test_apple(self):\n        self.assertEqual(\n            'Safari on iPad',\n            device('Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; ja-jp) '\n                   'AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 '\n                   'Mobile/8C148 Safari/6533.18.5')\n        )\n        self.assertEqual(\n            'Safari on iPhone',\n            device('Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X) '\n                   'AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 '\n                   'Mobile/11A465 Safari/9537.53')\n        )\n        self.assertEqual(\n            'Safari on OS X',\n            device('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) '\n                   'AppleWebKit/536.26.17 (KHTML, like Gecko) Version/6.0.2 '\n                   'Safari/536.26.17')\n        )\n\n    def test_android(self):\n        # androids identify themselves as Safari to get the good stuff\n        self.assertEqual(\n            'Safari on Android',\n            device('Mozilla/5.0 (Linux; U; Android 1.5; de-de; HTC Magic '\n                   'Build/CRB17) AppleWebKit/528.5+ (KHTML, like Gecko) '\n                   'Version/3.1.2 Mobile Safari/525.20.1')\n        )\n\n    def test_firefox(self):\n        self.assertEqual(\n            'Firefox on Windows 7',\n            device('Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:22.0) '\n                   'Gecko/20130328 Firefox/22.0')\n        )\n\n    def test_chrome(self):\n        self.assertEqual(\n            'Chrome on Windows 8.1',\n            device('Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 ('\n                   'KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36')\n        )\n\n    def test_firefox_only(self):\n        self.assertEqual(\"Firefox\", device(\"Not a legit OS Firefox/51.0\"))\n\n    def test_chrome_only(self):\n        self.assertEqual(\"Chrome\", device(\"Not a legit OS Chrome/54.0.32\"))\n\n    def test_safari_only(self):\n        self.assertEqual(\"Safari\", device(\"Not a legit OS Safari/5.2\"))\n\n    def test_linux_only(self):\n        self.assertEqual(\"Linux\", device(\"Linux not a real browser/10.3\"))\n\n    def test_ipad_only(self):\n        self.assertEqual(\"iPad\", device(\"iPad not a real browser/10.3\"))\n\n    def test_iphone_only(self):\n        self.assertEqual(\"iPhone\", device(\"iPhone not a real browser/10.3\"))\n\n    def test_windowsxp_only(self):\n        self.assertEqual(\"Windows XP\", device(\"NT 5.1 not a real browser/10.3\"))\n\n    def test_windowsvista_only(self):\n        self.assertEqual(\"Windows Vista\", device(\"NT 6.0 not a real browser/10.3\"))\n\n    def test_windows7_only(self):\n        self.assertEqual(\"Windows 7\", device(\"NT 6.1 not a real browser/10.3\"))\n\n    def test_windows8_only(self):\n        self.assertEqual(\"Windows 8\", device(\"NT 6.2 not a real browser/10.3\"))\n\n    def test_windows81_only(self):\n        self.assertEqual(\"Windows 8.1\", device(\"NT 6.3 not a real browser/10.3\"))\n\n    def test_windows_only(self):\n        self.assertEqual(\"Windows\", device(\"Windows not a real browser/10.3\"))\n\n\nclass ClearsessionsCommandTest(TestCase):\n    def test_can_call(self):\n        Session.objects.create(expire_date=datetime.now() - timedelta(days=1),\n                               ip='127.0.0.1')\n        call_command('clearsessions')\n        self.assertEqual(Session.objects.count(), 0)\n\n\nclass MigratesessionsCommandTest(TransactionTestCase):\n    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.sessions'})\n    def test_migrate_from_login(self):\n        from django.contrib.sessions.models import Session as DjangoSession\n        from django.contrib.sessions.backends.db import SessionStore as DjangoSessionStore\n        try:\n            call_command('migrate', 'sessions')\n            call_command('clearsessions')\n            user = User.objects.create_user('bouke', '', 'secret')\n            session = DjangoSessionStore()\n            session['_auth_user_id'] = user.id\n            session.save()\n            self.assertEqual(Session.objects.count(), 0)\n            self.assertEqual(DjangoSession.objects.count(), 1)\n            call_command('migratesessions')\n            new_sessions = list(Session.objects.all())\n            self.assertEqual(len(new_sessions), 1)\n            self.assertEqual(new_sessions[0].user, user)\n            self.assertEqual(new_sessions[0].ip, '127.0.0.1')\n        finally:\n            call_command('migrate', 'sessions', 'zero')\n", "{% extends \"user_sessions/_base.html\" %}\n{% load user_sessions i18n %}\n\n{% block content %}\n  {% trans \"<em>unknown on unknown</em>\" as unknown_on_unknown %}\n  {% trans \"<em>unknown</em>\" as unknown %}\n\n  <h1>{% trans \"Active Sessions\" %}</h1>\n\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th>{% trans \"Location\" %}</th>\n        <th>{% trans \"Device\" %}</th>\n        <th>{% trans \"Last Activity\" %}</th>\n        <th>{% trans \"End Session\" %}</th>\n      </tr>\n    </thead>\n    {% for object in object_list %}\n      <tr {% if object.session_key == session_key %}class=\"active\"{% endif %}>\n        <td>{{ object.ip|location|default_if_none:unknown|safe }} <small>({{ object.ip }})</small></td>\n        <td>{{ object.user_agent|device|default_if_none:unknown_on_unknown|safe }}</td>\n        <td>\n          {% if object.session_key == session_key %}\n            {% blocktrans with time=object.last_activity|timesince %}{{ time }} ago (this session){% endblocktrans %}\n          {% else %}\n            {% blocktrans with time=object.last_activity|timesince %}{{ time }} ago{% endblocktrans %}\n          {% endif %}\n        </td>\n        <td>\n          <form method=\"post\" action=\"{% url 'user_sessions:session_delete' object.pk %}\">\n            {% csrf_token %}\n            {% if object.session_key == session_key %}\n              <button type=\"submit\" class=\"btn btn-xs btn-link\">{% trans \"End Session\" %}</button>\n            {% else %}\n              <button type=\"submit\" class=\"btn btn-xs btn-warning\">{% trans \"End Session\" %}</button>\n            {% endif %}\n          </form>\n        </td>\n      </tr>\n    {% endfor %}\n  </table>\n\n  {% if object_list.count > 1 %}\n    <form method=\"post\" action=\"{% url 'user_sessions:session_delete_other' %}\">\n      {% csrf_token %}\n      <p>{% blocktrans %}You can also end all other sessions but the current.\n        This will log you out on all other devices.{% endblocktrans %}</p>\n      <button type=\"submit\" class=\"btn btn-default btn-warning\">{% trans \"End All Other Sessions\" %}</button>\n    </form>\n  {% endif %}\n{% endblock %}\n"], "fixing_code": ["import sys\nfrom datetime import datetime, timedelta\nfrom unittest import skipUnless\n\nimport django\nfrom django.conf import settings\nfrom django.contrib import auth\nfrom django.contrib.auth.models import User\nfrom django.contrib.sessions.backends.base import CreateError\nfrom django.core.management import call_command\nfrom django.test import TestCase, TransactionTestCase\nfrom django.test.utils import modify_settings, override_settings\nfrom django.urls import reverse\nfrom django.utils.timezone import now\nfrom user_sessions.backends.db import SessionStore\nfrom user_sessions.models import Session\nfrom user_sessions.templatetags.user_sessions import device, location\nfrom user_sessions.utils.tests import Client\n\ntry:\n    from urllib.parse import urlencode\nexcept ImportError:\n    from urllib import urlencode\ntry:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\n\ntry:\n    from django.contrib.gis.geoip2 import GeoIP2\n    geoip = GeoIP2()\n    geoip_msg = None\nexcept Exception as error_geoip2:\n    try:\n        from django.contrib.gis.geoip import GeoIP\n        geoip = GeoIP()\n        geoip_msg = None\n    except Exception as error_geoip:\n        geoip = None\n        geoip_msg = str(error_geoip2) + \" and \" + str(error_geoip)\n\n\nclass MiddlewareTest(TestCase):\n    def test_unmodified_session(self):\n        self.client.get('/', HTTP_USER_AGENT='Python/2.7')\n        self.assertNotIn(settings.SESSION_COOKIE_NAME, self.client.cookies)\n\n    def test_modify_session(self):\n        self.client.get('/modify_session/', HTTP_USER_AGENT='Python/2.7')\n        self.assertIn(settings.SESSION_COOKIE_NAME, self.client.cookies)\n        session = Session.objects.get(\n            pk=self.client.cookies[settings.SESSION_COOKIE_NAME].value\n        )\n        self.assertEqual(session.user_agent, 'Python/2.7')\n        self.assertEqual(session.ip, '127.0.0.1')\n\n    def test_login(self):\n        admin_login_url = reverse('admin:login')\n        user = User.objects.create_superuser('bouke', '', 'secret')\n        response = self.client.post(admin_login_url,\n                                    data={\n                                        'username': 'bouke',\n                                        'password': 'secret',\n                                        'this_is_the_login_form': '1',\n                                        'next': '/admin/'},\n                                    HTTP_USER_AGENT='Python/2.7')\n        self.assertRedirects(response, '/admin/')\n        session = Session.objects.get(\n            pk=self.client.cookies[settings.SESSION_COOKIE_NAME].value\n        )\n        self.assertEqual(user, session.user)\n\n    def test_long_ua(self):\n        self.client.get('/modify_session/',\n                        HTTP_USER_AGENT=''.join('a' for _ in range(400)))\n\n\nclass ViewsTest(TestCase):\n    client_class = Client\n\n    def setUp(self):\n        self.user = User.objects.create_user('bouke', '', 'secret')\n        assert self.client.login(username='bouke', password='secret')\n\n    def test_list(self):\n        self.user.session_set.create(session_key='ABC123', ip='127.0.0.1',\n                                     expire_date=datetime.now() + timedelta(days=1),\n                                     user_agent='Firefox')\n        response = self.client.get(reverse('user_sessions:session_list'))\n        self.assertContains(response, 'Active Sessions')\n        self.assertContains(response, 'Firefox')\n        self.assertNotContains(response, 'ABC123')\n\n    def test_delete(self):\n        session_key = self.client.cookies[settings.SESSION_COOKIE_NAME].value\n        response = self.client.post(reverse('user_sessions:session_delete',\n                                            args=[session_key]))\n        self.assertRedirects(response, '/')\n\n    def test_delete_all_other(self):\n        self.user.session_set.create(ip='127.0.0.1', expire_date=datetime.now() + timedelta(days=1))\n        self.assertEqual(self.user.session_set.count(), 2)\n        response = self.client.post(reverse('user_sessions:session_delete_other'))\n        self.assertRedirects(response, reverse('user_sessions:session_list'))\n        self.assertEqual(self.user.session_set.count(), 1)\n\n    def test_delete_some_other(self):\n        other = self.user.session_set.create(session_key='OTHER', ip='127.0.0.1',\n                                             expire_date=datetime.now() + timedelta(days=1))\n        self.assertEqual(self.user.session_set.count(), 2)\n        response = self.client.post(reverse('user_sessions:session_delete',\n                                            args=[other.session_key]))\n        self.assertRedirects(response, reverse('user_sessions:session_list'))\n        self.assertEqual(self.user.session_set.count(), 1)\n\n\nclass AdminTest(TestCase):\n    client_class = Client\n\n    def setUp(self):\n        User.objects.create_superuser('bouke', '', 'secret')\n        assert self.client.login(username='bouke', password='secret')\n\n        expired = SessionStore(user_agent='Python/2.5', ip='20.13.1.1')\n        expired.set_expiry(-365 * 86400)\n        expired.save()\n        unexpired = SessionStore(user_agent='Python/2.7', ip='1.1.1.1')\n        unexpired.save()\n\n        self.admin_url = reverse('admin:user_sessions_session_changelist')\n\n    def test_list(self):\n        response = self.client.get(self.admin_url)\n        self.assertContains(response, 'Select session to change')\n        self.assertContains(response, '127.0.0.1')\n        self.assertContains(response, '20.13.1.1')\n        self.assertContains(response, '1.1.1.1')\n\n    def test_search(self):\n        response = self.client.get(self.admin_url, {'q': 'bouke'})\n        self.assertContains(response, '127.0.0.1')\n        self.assertNotContains(response, '20.13.1.1')\n        self.assertNotContains(response, '1.1.1.1')\n\n    def test_mine(self):\n        my_sessions = '%s?%s' % (self.admin_url, urlencode({'owner': 'my'}))\n        response = self.client.get(my_sessions)\n        self.assertContains(response, '127.0.0.1')\n        self.assertNotContains(response, '1.1.1.1')\n\n    def test_expired(self):\n        expired = '%s?%s' % (self.admin_url, urlencode({'active': '0'}))\n        response = self.client.get(expired)\n        self.assertContains(response, '20.13.1.1')\n        self.assertNotContains(response, '1.1.1.1')\n\n    def test_unexpired(self):\n        unexpired = '%s?%s' % (self.admin_url, urlencode({'active': '1'}))\n        response = self.client.get(unexpired)\n        self.assertContains(response, '1.1.1.1')\n        self.assertNotContains(response, '20.13.1.1')\n\n\nclass SessionStoreTest(TestCase):\n    def setUp(self):\n        self.store = SessionStore(user_agent='Python/2.7', ip='127.0.0.1')\n        User.objects.create_user('bouke', '', 'secret', id=1)\n\n    def test_untouched_init(self):\n        self.assertFalse(self.store.modified)\n        self.assertFalse(self.store.accessed)\n\n    def test_auth_session_key(self):\n        self.assertFalse(auth.SESSION_KEY in self.store)\n        self.assertFalse(self.store.modified)\n        self.assertTrue(self.store.accessed)\n\n        self.store.get(auth.SESSION_KEY)\n        self.assertFalse(self.store.modified)\n\n        self.store[auth.SESSION_KEY] = 1\n        self.assertTrue(self.store.modified)\n\n    def test_save(self):\n        self.store[auth.SESSION_KEY] = 1\n        self.store.save()\n\n        session = Session.objects.get(pk=self.store.session_key)\n        self.assertEqual(session.user_agent, 'Python/2.7')\n        self.assertEqual(session.ip, '127.0.0.1')\n        self.assertEqual(session.user_id, 1)\n        self.assertAlmostEqual(now(), session.last_activity,\n                               delta=timedelta(seconds=5))\n\n    def test_load_unmodified(self):\n        self.store[auth.SESSION_KEY] = 1\n        self.store.save()\n        store2 = SessionStore(session_key=self.store.session_key,\n                              user_agent='Python/2.7', ip='127.0.0.1')\n        store2.load()\n        self.assertEqual(store2.user_agent, 'Python/2.7')\n        self.assertEqual(store2.ip, '127.0.0.1')\n        self.assertEqual(store2.user_id, 1)\n        self.assertEqual(store2.modified, False)\n\n    def test_load_modified(self):\n        self.store[auth.SESSION_KEY] = 1\n        self.store.save()\n        store2 = SessionStore(session_key=self.store.session_key,\n                              user_agent='Python/3.3', ip='8.8.8.8')\n        store2.load()\n        self.assertEqual(store2.user_agent, 'Python/3.3')\n        self.assertEqual(store2.ip, '8.8.8.8')\n        self.assertEqual(store2.user_id, 1)\n        self.assertEqual(store2.modified, True)\n\n    def test_duplicate_create(self):\n        s1 = SessionStore(session_key='DUPLICATE', user_agent='Python/2.7', ip='127.0.0.1')\n        s1.create()\n        s2 = SessionStore(session_key='DUPLICATE', user_agent='Python/2.7', ip='127.0.0.1')\n        s2.create()\n        self.assertNotEqual(s1.session_key, s2.session_key)\n\n        s3 = SessionStore(session_key=s1.session_key, user_agent='Python/2.7', ip='127.0.0.1')\n        with self.assertRaises(CreateError):\n            s3.save(must_create=True)\n\n    def test_delete(self):\n        # not persisted, should just return\n        self.store.delete()\n\n        # create, then delete\n        self.store.create()\n        session_key = self.store.session_key\n        self.store.delete()\n\n        # non-existing sessions, should not raise\n        self.store.delete()\n        self.store.delete(session_key)\n\n    def test_clear(self):\n        \"\"\"\n        Clearing the session should clear all non-browser information\n        \"\"\"\n        self.store[auth.SESSION_KEY] = 1\n        self.store.clear()\n        self.store.save()\n\n        session = Session.objects.get(pk=self.store.session_key)\n        self.assertEqual(session.user_id, None)\n\n\nclass ModelTest(TestCase):\n    def test_get_decoded(self):\n        User.objects.create_user('bouke', '', 'secret', id=1)\n        store = SessionStore(user_agent='Python/2.7', ip='127.0.0.1')\n        store[auth.SESSION_KEY] = 1\n        store['foo'] = 'bar'\n        store.save()\n\n        session = Session.objects.get(pk=store.session_key)\n        self.assertEqual(session.get_decoded(),\n                         {'foo': 'bar', auth.SESSION_KEY: 1})\n\n    def test_very_long_ua(self):\n        ua = 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; ' \\\n             'Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; ' \\\n             '.NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; ' \\\n             'InfoPath.3; ms-office; MSOffice 14)'\n        store = SessionStore(user_agent=ua, ip='127.0.0.1')\n        store.save()\n\n        session = Session.objects.get(pk=store.session_key)\n        self.assertEqual(session.user_agent, ua[:200])\n\n\nclass ClientTest(TestCase):\n    def test_invalid_login(self):\n        client = Client()\n        self.assertFalse(client.login())\n\n    def test_restore_session(self):\n        store = SessionStore(user_agent='Python/2.7', ip='127.0.0.1')\n        store['foo'] = 'bar'\n        store.save()\n        client = Client()\n        client.cookies[settings.SESSION_COOKIE_NAME] = store.session_key\n        User.objects.create_user('bouke', '', 'secret')\n        assert client.login(username='bouke', password='secret')\n        self.assertEqual(client.session['foo'], 'bar')\n\n    def test_login_logout(self):\n        client = Client()\n        User.objects.create_user('bouke', '', 'secret')\n        assert client.login(username='bouke', password='secret')\n        assert settings.SESSION_COOKIE_NAME in client.cookies\n\n        client.logout()\n        assert settings.SESSION_COOKIE_NAME not in client.cookies\n\n        # should not raise\n        client.logout()\n\n    @patch('django.contrib.auth.signals.user_logged_in.send')\n    def test_login_signal(self, mock_user_logged_in):\n        client = Client()\n        User.objects.create_user('bouke', '', 'secret')\n        assert client.login(username='bouke', password='secret')\n        assert mock_user_logged_in.called\n        request = mock_user_logged_in.call_args[1]['request']\n        assert getattr(request, 'user', None) is not None\n\n    @override_settings(INSTALLED_APPS=())\n    def test_no_session(self):\n        self.assertIsNone(Client().session)\n\n\nclass LocationTemplateFilterTest(TestCase):\n    @override_settings(GEOIP_PATH=None)\n    def test_no_location(self):\n        self.assertEqual(location('127.0.0.1'), None)\n\n    @skipUnless(geoip, geoip_msg)\n    def test_locations(self):\n        self.assertEqual('United States', location('8.8.8.8'))\n        self.assertEqual('San Diego, United States', location('44.55.66.77'))\n\n\nclass DeviceTemplateFilterTest(TestCase):\n    def test_ie(self):\n        self.assertEqual(\n            'Internet Explorer on Windows XP',\n            device('Mozilla/4.0 (Windows; MSIE 6.0; Windows NT 5.1; SV1; '\n                   '.NET CLR 2.0.50727)')\n        )\n        self.assertEqual(\n            'Internet Explorer on Windows Vista',\n            device('Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; '\n                   'Trident/4.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 1.1.4322;'\n                   ' InfoPath.2; .NET CLR 3.5.21022; .NET CLR 3.5.30729; '\n                   'MS-RTC LM 8; OfficeLiveConnector.1.4; OfficeLivePatch.1.3;'\n                   ' .NET CLR 3.0.30729)')\n        )\n        self.assertEqual(\n            'Internet Explorer on Windows 7',\n            device('Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; '\n                   'Trident/6.0)')\n        )\n        self.assertEqual(\n            'Internet Explorer on Windows 8',\n            device('Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; '\n                   'Win64; x64; Trident/6.0)')\n        )\n        self.assertEqual(\n            'Internet Explorer on Windows 8.1',\n            device('Mozilla/5.0 (IE 11.0; Windows NT 6.3; Trident/7.0; '\n                   '.NET4.0E; .NET4.0C; rv:11.0) like Gecko')\n        )\n\n    def test_apple(self):\n        self.assertEqual(\n            'Safari on iPad',\n            device('Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; ja-jp) '\n                   'AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 '\n                   'Mobile/8C148 Safari/6533.18.5')\n        )\n        self.assertEqual(\n            'Safari on iPhone',\n            device('Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X) '\n                   'AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 '\n                   'Mobile/11A465 Safari/9537.53')\n        )\n        self.assertEqual(\n            'Safari on OS X',\n            device('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) '\n                   'AppleWebKit/536.26.17 (KHTML, like Gecko) Version/6.0.2 '\n                   'Safari/536.26.17')\n        )\n\n    def test_android(self):\n        # androids identify themselves as Safari to get the good stuff\n        self.assertEqual(\n            'Safari on Android',\n            device('Mozilla/5.0 (Linux; U; Android 1.5; de-de; HTC Magic '\n                   'Build/CRB17) AppleWebKit/528.5+ (KHTML, like Gecko) '\n                   'Version/3.1.2 Mobile Safari/525.20.1')\n        )\n\n    def test_firefox(self):\n        self.assertEqual(\n            'Firefox on Windows 7',\n            device('Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:22.0) '\n                   'Gecko/20130328 Firefox/22.0')\n        )\n\n    def test_chrome(self):\n        self.assertEqual(\n            'Chrome on Windows 8.1',\n            device('Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 ('\n                   'KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36')\n        )\n\n    def test_firefox_only(self):\n        self.assertEqual(\"Firefox\", device(\"Not a legit OS Firefox/51.0\"))\n\n    def test_chrome_only(self):\n        self.assertEqual(\"Chrome\", device(\"Not a legit OS Chrome/54.0.32\"))\n\n    def test_safari_only(self):\n        self.assertEqual(\"Safari\", device(\"Not a legit OS Safari/5.2\"))\n\n    def test_linux_only(self):\n        self.assertEqual(\"Linux\", device(\"Linux not a real browser/10.3\"))\n\n    def test_ipad_only(self):\n        self.assertEqual(\"iPad\", device(\"iPad not a real browser/10.3\"))\n\n    def test_iphone_only(self):\n        self.assertEqual(\"iPhone\", device(\"iPhone not a real browser/10.3\"))\n\n    def test_windowsxp_only(self):\n        self.assertEqual(\"Windows XP\", device(\"NT 5.1 not a real browser/10.3\"))\n\n    def test_windowsvista_only(self):\n        self.assertEqual(\"Windows Vista\", device(\"NT 6.0 not a real browser/10.3\"))\n\n    def test_windows7_only(self):\n        self.assertEqual(\"Windows 7\", device(\"NT 6.1 not a real browser/10.3\"))\n\n    def test_windows8_only(self):\n        self.assertEqual(\"Windows 8\", device(\"NT 6.2 not a real browser/10.3\"))\n\n    def test_windows81_only(self):\n        self.assertEqual(\"Windows 8.1\", device(\"NT 6.3 not a real browser/10.3\"))\n\n    def test_windows_only(self):\n        self.assertEqual(\"Windows\", device(\"Windows not a real browser/10.3\"))\n\n\nclass ClearsessionsCommandTest(TestCase):\n    def test_can_call(self):\n        Session.objects.create(expire_date=datetime.now() - timedelta(days=1),\n                               ip='127.0.0.1')\n        call_command('clearsessions')\n        self.assertEqual(Session.objects.count(), 0)\n\n\nclass MigratesessionsCommandTest(TransactionTestCase):\n    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.sessions'})\n    def test_migrate_from_login(self):\n        from django.contrib.sessions.models import Session as DjangoSession\n        from django.contrib.sessions.backends.db import SessionStore as DjangoSessionStore\n        try:\n            call_command('migrate', 'sessions')\n            call_command('clearsessions')\n            user = User.objects.create_user('bouke', '', 'secret')\n            session = DjangoSessionStore()\n            session['_auth_user_id'] = user.id\n            session.save()\n            self.assertEqual(Session.objects.count(), 0)\n            self.assertEqual(DjangoSession.objects.count(), 1)\n            call_command('migratesessions')\n            new_sessions = list(Session.objects.all())\n            self.assertEqual(len(new_sessions), 1)\n            self.assertEqual(new_sessions[0].user, user)\n            self.assertEqual(new_sessions[0].ip, '127.0.0.1')\n        finally:\n            call_command('migrate', 'sessions', 'zero')\n", "{% extends \"user_sessions/_base.html\" %}\n{% load user_sessions i18n %}\n\n{% block content %}\n  {% trans \"<em>unknown on unknown</em>\" as unknown_on_unknown %}\n  {% trans \"<em>unknown</em>\" as unknown %}\n\n  <h1>{% trans \"Active Sessions\" %}</h1>\n\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th>{% trans \"Location\" %}</th>\n        <th>{% trans \"Device\" %}</th>\n        <th>{% trans \"Last Activity\" %}</th>\n      </tr>\n    </thead>\n    {% for object in object_list %}\n      <tr {% if object.session_key == session_key %}class=\"active\"{% endif %}>\n        <td>{{ object.ip|location|default_if_none:unknown|safe }} <small>({{ object.ip }})</small></td>\n        <td>{{ object.user_agent|device|default_if_none:unknown_on_unknown|safe }}</td>\n        <td>\n          {% if object.session_key == session_key %}\n            {% blocktrans with time=object.last_activity|timesince %}{{ time }} ago (this session){% endblocktrans %}\n          {% else %}\n            {% blocktrans with time=object.last_activity|timesince %}{{ time }} ago{% endblocktrans %}\n          {% endif %}\n        </td>\n      </tr>\n    {% endfor %}\n  </table>\n\n  {% if object_list.count > 1 %}\n    <form method=\"post\" action=\"{% url 'user_sessions:session_delete_other' %}\">\n      {% csrf_token %}\n      <p>{% blocktrans %}You can also end all other sessions but the current.\n        This will log you out on all other devices.{% endblocktrans %}</p>\n      <button type=\"submit\" class=\"btn btn-default btn-warning\">{% trans \"End All Other Sessions\" %}</button>\n    </form>\n  {% endif %}\n{% endblock %}\n"], "filenames": ["tests/tests.py", "user_sessions/templates/user_sessions/session_list.html"], "buggy_code_start_loc": [91, 16], "buggy_code_end_loc": [92, 39], "fixing_code_start_loc": [90, 15], "fixing_code_end_loc": [93, 27], "type": "CWE-326", "message": "In Django User Sessions (django-user-sessions) before 1.7.1, the views provided allow users to terminate specific sessions. The session key is used to identify sessions, and thus included in the rendered HTML. In itself this is not a problem. However if the website has an XSS vulnerability, the session key could be extracted by the attacker and a session takeover could happen.", "other": {"cve": {"id": "CVE-2020-5224", "sourceIdentifier": "security-advisories@github.com", "published": "2020-01-24T20:15:10.720", "lastModified": "2020-01-29T19:59:45.383", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Django User Sessions (django-user-sessions) before 1.7.1, the views provided allow users to terminate specific sessions. The session key is used to identify sessions, and thus included in the rendered HTML. In itself this is not a problem. However if the website has an XSS vulnerability, the session key could be extracted by the attacker and a session takeover could happen."}, {"lang": "es", "value": "En Django User Sessions (django-user-sessions) versiones anteriores a 1.7.1, las vistas proporcionadas permiten a usuarios finalizar sesiones espec\u00edficas. La clave de sesi\u00f3n es usada para identificar sesiones y, por lo tanto, es incluida en el renderizado HTML. En s\u00ed mismo esto no es un problema. Sin embargo, si el sitio web presenta una vulnerabilidad de tipo XSS, la clave de sesi\u00f3n podr\u00eda ser extra\u00edda por parte del atacante y podr\u00eda presentarse una toma de control de la sesi\u00f3n."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.3, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-326"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:django-user-sessions_project:django-user-sessions:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.7.1", "matchCriteriaId": "35C151A5-A09A-4746-BF74-7C75B937DA12"}]}]}], "references": [{"url": "https://github.com/Bouke/django-user-sessions/security/advisories/GHSA-5fq8-3q2f-4m5g", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/jazzband/django-user-sessions/commit/f0c4077e7d1436ba6d721af85cee89222ca5d2d9", "source": "security-advisories@github.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/jazzband/django-user-sessions/commit/f0c4077e7d1436ba6d721af85cee89222ca5d2d9"}}