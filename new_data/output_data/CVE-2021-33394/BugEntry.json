{"buggy_code": ["<?php\r\n/**\r\n * CubeCart v6\r\n * ========================================\r\n * CubeCart is a registered trade mark of CubeCart Limited\r\n * Copyright CubeCart Limited 2017. All rights reserved.\r\n * UK Private Limited Company No. 5323904\r\n * ========================================\r\n * Web:   http://www.cubecart.com\r\n * Email:  sales@cubecart.com\r\n * License:  GPL-3.0 https://www.gnu.org/licenses/quick-guide-gplv3.html\r\n */\r\n\r\n/**\r\n * Admin controller\r\n *\r\n * @author Technocrat\r\n * @author Al Brookbanks\r\n * @since 5.0.0\r\n */\r\nclass Admin\r\n{\r\n    /**\r\n     * Admin's data\r\n     *\r\n     * @var array\r\n     */\r\n    private $_admin_data = array();\r\n    /**\r\n     * Logged in?\r\n     *\r\n     * @var bool\r\n     */\r\n    private $_logged_in  = false;\r\n    /**\r\n     * Permission array\r\n     *\r\n     * @var array\r\n     */\r\n    private $_permissions = array();\r\n    /**\r\n     * Permissions sections\r\n     *\r\n     * @var array\r\n     */\r\n    private $_sections  = array();\r\n    /**\r\n     * Length of validation key\r\n     *\r\n     * @var int\r\n     */\r\n    private $_validate_key_len  = 32;\r\n\r\n    /**\r\n     * Class instance\r\n     *\r\n     * @var instance\r\n     */\r\n    protected static $_instance;\r\n\r\n    ##############################################\r\n\r\n    final private function __construct()\r\n    {\r\n\r\n        // Logout requests\r\n        if (isset($_GET['_g']) && $_GET['_g'] == 'logout') {\r\n            $this->logout($_GET['r']);\r\n        }\r\n\r\n        // Ensure the ACP is only ever using the default currency\r\n        if (ADMIN_CP==true) {\r\n            $GLOBALS['session']->set('currency', $GLOBALS['config']->get('config', 'default_currency'), 'client');\r\n        }\r\n\r\n        // Action Auto-Handlers\r\n        if (isset($_POST['username']) && isset($_POST['password']) && !empty($_POST['username']) && !empty($_POST['password'])) {\r\n            // Login requests\r\n            $this->_authenticate($_POST['username'], $_POST['password']);\r\n        }\r\n        // Load admin data\r\n        $this->_load();\r\n    }\r\n\r\n    /**\r\n     * Setup the instance (singleton)\r\n     *\r\n     * @return Admin\r\n     */\r\n    public static function getInstance()\r\n    {\r\n        if (!(self::$_instance instanceof self)) {\r\n            self::$_instance = new self();\r\n        }\r\n\r\n        return self::$_instance;\r\n    }\r\n\r\n    //=====[ Public ]=======================================\r\n\r\n    /**\r\n     * Get admin data element or the entire array if element is empty\r\n     *\r\n     * @param string $element\r\n     * @return mixed\r\n     */\r\n    public function get($element)\r\n    {\r\n        if (!empty($element)) {\r\n            return isset($this->_admin_data[$element]) ? $this->_admin_data[$element] : false;\r\n        } else {\r\n            return $this->_admin_data;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the admin id\r\n     *\r\n     * @return int\r\n     */\r\n    public function getId()\r\n    {\r\n        return isset($this->_admin_data['admin_id']) ? $this->_admin_data['admin_id'] : 0;\r\n    }\r\n\r\n    /**\r\n     * Is admin user\r\n     *\r\n     * @param bool $force_login\r\n     * @return bool\r\n     */\r\n    public function is($force_login = false)\r\n    {\r\n        if (!$force_login) {\r\n            return $this->_logged_in;\r\n        } else {\r\n            if (!$this->_logged_in) {\r\n                httpredir('?_a=login');\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logout of admin\r\n     */\r\n    public function logout($redirect = '')\r\n    {\r\n        $this->_load();\r\n        $GLOBALS['db']->update('CubeCart_admin_users', array('session_id' => ''), array('admin_id' => (int)$this->_admin_data['admin_id']));\r\n        $GLOBALS['session']->destroy();\r\n        if ($redirect=='front') {\r\n            httpredir($GLOBALS['rootRel']);\r\n        } else {\r\n            httpredir($GLOBALS['rootRel'] . $GLOBALS['config']->get('config', 'adminFile'));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset password\r\n     *\r\n     * @param string $email\r\n     * @param string $validation\r\n     * @param string $password\r\n     * @return bool\r\n     */\r\n    public function passwordReset($email, $validation, $password)\r\n    {\r\n        if ($GLOBALS['session']->has('recover_login') && filter_var($email, FILTER_VALIDATE_EMAIL) && strlen($validation) == $this->_validate_key_len && !empty($password['new']) && !empty($password['confirm']) && ($password['new'] === $password['confirm'])) {\r\n            if (($check = $GLOBALS['db']->select('CubeCart_admin_users', array('admin_id', 'username'), \"`email` = '$email' AND `verify` = '$validation' AND `status` = 1\")) !== false) {\r\n\r\n                // Remove any blocks\r\n                $GLOBALS['db']->delete('CubeCart_blocker', array('username' => $email));\r\n                \r\n                $salt = Password::getInstance()->createSalt();\r\n                $record = array(\r\n                    'salt'  => $salt,\r\n                    'password' => Password::getInstance()->getSalted($password['new'], $salt),\r\n                    'verify' => null,\r\n                    'new_password' => 1\r\n                );\r\n                $where = array(\r\n                    'admin_id' => $check[0]['admin_id'],\r\n                    'email'  => $email,\r\n                    'verify' => $validation,\r\n                );\r\n\r\n                $GLOBALS['session']->delete('recover_login');\r\n\r\n                if ($GLOBALS['db']->update('CubeCart_admin_users', $record, $where)) {\r\n                    return $this->_authenticate($check[0]['username'], $password['new']);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Request password\r\n     *\r\n     * @param string $username\r\n     * @param string $email\r\n     * @return bool\r\n     */\r\n    public function passwordRequest($username, $email)\r\n    {\r\n        if (!empty($username) && !empty($email) && filter_var($email, FILTER_VALIDATE_EMAIL)) {\r\n            if (($check = $GLOBALS['db']->select('CubeCart_admin_users', array('admin_id', 'email', 'language', 'name'), \"`username` = '$username' AND `email` = '$email' AND `status` = 1\")) !== false) {\r\n                //\u00a0Generate validation key\r\n                $validation = randomString($this->_validate_key_len);\r\n                if ($GLOBALS['db']->update('CubeCart_admin_users', array('verify' => $validation), array('admin_id' => (int)$check[0]['admin_id']))) {\r\n                    // Send email\r\n                    $mailer = new Mailer();\r\n                    $data['link'] = $GLOBALS['storeURL'].'/'.$GLOBALS['config']->get('config', 'adminFile').'?_g=recovery&email='.$check[0]['email'].'&validate='.$validation;\r\n                    $data['name'] = $check[0]['name'];\r\n\r\n                    $content = $mailer->loadContent('admin.password_recovery', $check[0]['language'], $data);\r\n                    if ($content) {\r\n                        $GLOBALS['smarty']->assign('DATA', $data);\r\n                        $GLOBALS['session']->set('recover_login', true);\r\n                        return $mailer->sendEmail($check[0]['email'], $content);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Check admin permissions\r\n     *\r\n     * @param mixed $sections\r\n     * @param unknown_type $level\r\n     * @param unknown_type $halt\r\n     * @return bool\r\n     */\r\n    public function permissions($sections, $level = 4, $halt = false, $message = true)\r\n    {\r\n\r\n        // Are they a Superuser? If so, they get automatic authorization\r\n        if ($this->superUser()) {\r\n            return true;\r\n        }\r\n        // Lets update permissions to handle an array sections\r\n        if (is_array($sections)) {\r\n            foreach ($sections as $section) {\r\n                $departments[] = (!is_numeric($section)) ? $this->_getSectionId($section) : (int)$section;\r\n            }\r\n        } else {\r\n            // Get integers for section and permission level\r\n            $departments[] = (!is_numeric($sections)) ? $this->_getSectionId($sections) : (int)$sections;\r\n        }\r\n        $level = (!is_numeric($level)) ? $this->_convertPermission($level) : (int)$level;\r\n\r\n        if (is_array($departments)) {\r\n            foreach ($departments as $section_id) {\r\n                // Do they have permission to be here?\r\n                if (isset($this->_permissions[$section_id])) {\r\n                    //\u00a0Check Section specific permissions\r\n                    if ($this->_permissions[$section_id] & $level) {\r\n                        $allowed = true;\r\n                        continue;\r\n                    }\r\n                } elseif (isset($this->_permissions[0])) {\r\n                    // Check global permissions\r\n                    if ($this->_permissions[0] & $level) {\r\n                        $allowed = true;\r\n                        continue;\r\n                    }\r\n                }\r\n                $allowed = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Are they authorized?\r\n        if ($allowed) {\r\n            return true;\r\n        }\r\n        // Unauthorized - do we redirect, or just return false?\r\n        if ($message) {\r\n            $GLOBALS['main']->errorMessage($GLOBALS['language']->notification['error_privileges']);\r\n        }\r\n        if ($halt) {\r\n            httpredir($GLOBALS['rootRel'].$GLOBALS['config']->get('config', 'adminFile').\"?_g=401\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Is a super user\r\n     *\r\n     * @return bool\r\n     */\r\n    public function superUser()\r\n    {\r\n        return ($this->_admin_data['super_user']) ? true : false;\r\n    }\r\n\r\n    //=====[ Private ]=======================================\r\n\r\n    /**\r\n     * Authenticate user as admin\r\n     *\r\n     * @param string $username\r\n     * @param string $password\r\n     * @return bool\r\n     */\r\n    private function _authenticate($username, $password)\r\n    {\r\n        $username = (string)$username;\r\n        $password = (string)$password;\r\n        $hash_password = '';\r\n\r\n        if (!empty($username)) {\r\n            // Fetch salt\r\n            if (($user = $GLOBALS['db']->select('CubeCart_admin_users', array('admin_id', 'password', 'salt', 'new_password'), array('username' => $username, 'status' => '1'), null, 1)) !== false) {\r\n                if (empty($user[0]['salt'])) {\r\n                    // Generate Salt\r\n                    $salt = Password::getInstance()->createSalt();\r\n                    //Update it to the newer MD5 so we can fix it later\r\n                    $pass = Password::getInstance()->updateOld($user[0]['password'], $salt);\r\n                    $update = array(\r\n                        'salt'  => $salt,\r\n                        'password' => $pass,\r\n                        'new_password' => 0\r\n                    );\r\n                    if ($GLOBALS['db']->update('CubeCart_admin_users', $update, array('admin_id' => (int)$user[0]['admin_id']))) {\r\n                        $hash_password = $pass;\r\n                    }\r\n                } else {\r\n                    if ($user[0]['new_password'] == 1) {\r\n                        //Get the salted new password\r\n                        $hash_password = Password::getInstance()->getSalted($password, $user[0]['salt']);\r\n                    } else {\r\n                        //Get the salted old password\r\n                        $hash_password = Password::getInstance()->getSaltedOld($password, $user[0]['salt']);\r\n                    }\r\n                }\r\n            } else {\r\n                foreach ($GLOBALS['hooks']->load('admin.authenticate.failed_invalid_admin') as $hook) {\r\n                    include $hook;\r\n                }\r\n                $GLOBALS['gui']->setError($GLOBALS['language']->account['error_login']);\r\n                return false;\r\n            }\r\n            $result = $GLOBALS['db']->select('CubeCart_admin_users', array('admin_id', 'customer_id', 'logins', 'new_password'), array('username' => $username, 'password' => $hash_password, 'status' => '1'));\r\n            $GLOBALS['session']->blocker($username, 0, (bool)$result, Session::BLOCKER_BACKEND, $GLOBALS['config']->get('config', 'bfattempts'), $GLOBALS['config']->get('config', 'bftime'));\r\n            if ($result) {\r\n                if (!$GLOBALS['session']->blocked()) {\r\n                    $this->_logged_in = true;\r\n                    $update = array(\r\n                        'blockTime'  => 0,\r\n                        'browser'  => htmlspecialchars($_SERVER['HTTP_USER_AGENT']),\r\n                        'failLevel'  => 0,\r\n                        'session_id' => $GLOBALS['session']->getId(),\r\n                        'ip_address' => get_ip_address(),\r\n                        'verify'  => '',\r\n                        'lastTime'  => time(),\r\n                        'logins'  => $result[0]['logins'] +1,\r\n                    );\r\n                    if ($result[0]['new_password'] != 1) {\r\n                        $salt = Password::getInstance()->createSalt();\r\n                        $pass = Password::getInstance()->getSalted($password, $salt);\r\n                        $update = array_merge($update, array(\r\n                                'salt'   => $salt,\r\n                                'password'  => $pass,\r\n                                'new_password' => 1,\r\n                            ));\r\n                    }\r\n                    $GLOBALS['db']->update('CubeCart_admin_users', $update, array('admin_id' => $result[0]['admin_id']));\r\n                    $GLOBALS['session']->set('admin_id', $result[0]['admin_id'], 'client');\r\n                    $this->_load();\r\n                } else {\r\n                    foreach ($GLOBALS['hooks']->load('admin.authenticate.failed_valid_admin') as $hook) {\r\n                        include $hook;\r\n                    }\r\n                    $minutes_blocked = ceil(($GLOBALS['config']->get('config', 'bftime')/60));\r\n                    $GLOBALS['gui']->setError(sprintf('Too many invalid logins have been made. Access has been blocked for %s minutes.', $minutes_blocked));\r\n                }\r\n            } else {\r\n                if (!$GLOBALS['session']->blocked()) {\r\n                    if (($user = $GLOBALS['db']->select('CubeCart_admin_users', false, array('username' => $_POST['username']))) !== false) {\r\n                        if ($user[0]['blockTime']>0 && $user[0]['blockTime'] < time()) {\r\n                            // reset fail level and time\r\n                            $newdata['failLevel'] = 1;\r\n                            $newdata['blockTime'] = 0;\r\n                        } elseif ($user[0]['failLevel'] == ($GLOBALS['config']->get('config', 'bfattempts') - 1)) {\r\n                            $timeAgo = time() - $GLOBALS['config']->get('config', 'bftime');\r\n                            if ($user[0]['lastTime'] < $timeAgo) {\r\n                                $newdata['failLevel'] = 1;\r\n                                $newdata['blockTime'] = 0;\r\n                            } else {\r\n                                // block the account\r\n                                $newdata['failLevel'] = $GLOBALS['config']->get('config', 'bfattempts');\r\n                                $newdata['blockTime'] = time() + $GLOBALS['config']->get('config', 'bftime');\r\n                            }\r\n                        } elseif ($user[0]['blockTime'] < time()) {\r\n                            $timeAgo    = time() - $GLOBALS['config']->get('config', 'bftime');\r\n                            $newdata['failLevel'] = ($user[0]['lastTime']<$timeAgo) ? 1 : $user[0]['failLevel'] + 1;\r\n                            $newdata['blockTime'] = 0;\r\n                        } else {\r\n                            // Display Blocked message\r\n                            $GLOBALS['gui']->setError(sprintf($GLOBALS['language']->account['error_login_block'],($GLOBALS['config']->get('config', 'bftime') / 60)));\r\n                            $this->_blocked = true;\r\n                        }\r\n                        if (isset($newdata)) {\r\n                            $newdata['lastTime'] = time();\r\n                            $GLOBALS['db']->update('CubeCart_admin_users', $newdata, array('admin_id' => $user[0]['admin_id']));\r\n                        }\r\n                    }\r\n                    $GLOBALS['gui']->setError($GLOBALS['language']->account['error_login']);\r\n                } else {\r\n                    $minutes_blocked = ceil(($GLOBALS['config']->get('config', 'bftime')/60));\r\n                    $GLOBALS['gui']->setError(sprintf('Too many invalid logins have been made. Access has been blocked for %s minutes.', $minutes_blocked));\r\n                }\r\n                foreach ($GLOBALS['hooks']->load('admin.authenticate.failed_valid_admin') as $hook) {\r\n                    include $hook;\r\n                }\r\n            }\r\n            if (!$GLOBALS['session']->blocked()) {\r\n                $redir = '';\r\n                if (isset($_GET['redir']) && !empty($_GET['redir'])) {\r\n                    $redir = $_GET['redir'];\r\n                } elseif (isset($_POST['redir']) && !empty($_POST['redir'])) {\r\n                    $redir = $_POST['redir'];\r\n                } elseif ($GLOBALS['session']->has('redir')) {\r\n                    $redir = $GLOBALS['session']->get('redir');\r\n                } elseif ($GLOBALS['session']->has('back')) {\r\n                    $redir = $GLOBALS['session']->get('back');\r\n                }\r\n\r\n                if (!empty($redir)) {\r\n                    // Prevent phishing attacks, or anything untoward, unless it's redirecting back to this store\r\n                    if(!$GLOBALS['ssl']->validRedirect($redir)) {\r\n                        trigger_error(sprintf(\"Possible Phishing attack - Redirection to '%s' is not allowed. Please check the value of 'Store URL' in the SSL section of your store settings.\", $redir));\r\n                        $redir = '';\r\n                        if ($GLOBALS['session']->has('back') && $redir == $GLOBALS['session']->get('back')) {\r\n                            $GLOBALS['session']->delete('back');\r\n                        }\r\n                        if ($GLOBALS['session']->has('redir') && $redir == $GLOBALS['session']->get('redir')) {\r\n                            $GLOBALS['session']->delete('redir');\r\n                        }\r\n                    }\r\n                }\r\n\r\n                httpredir((isset($redir) && !empty($redir)) ? $redir : $GLOBALS['rootRel'].$GLOBALS['config']->get('config', 'adminFile'));\r\n            } else {\r\n                $minutes_blocked = ceil(($GLOBALS['config']->get('config', 'bftime')/60));\r\n                $GLOBALS['gui']->setError(sprintf('Too many invalid logins have been made. Access has been blocked for %s minutes.', $minutes_blocked));\r\n            }\r\n        } else {\r\n            $GLOBALS['gui']->setError($GLOBALS['language']->account['error_login']);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Convert permissions\r\n     *\r\n     * @param string $name\r\n     * @return int\r\n     */\r\n    private function _convertPermission($name = null)\r\n    {\r\n        switch (strtolower($name)) {\r\n        case 'delete':\r\n            $value = CC_PERM_DELETE;\r\n            break;\r\n        case 'edit':\r\n        case 'write':\r\n            $value = CC_PERM_EDIT;\r\n            break;\r\n        case 'read':\r\n            $value = CC_PERM_READ;\r\n            break;\r\n        default:\r\n            $value = 0;\r\n        }\r\n        return $value;\r\n    }\r\n\r\n    /**\r\n     * Get the admin section id\r\n     *\r\n     * @param unknown_type $name\r\n     * @return int/false\r\n     */\r\n    private function _getSectionId($name)\r\n    {\r\n        if (!empty($name)) {\r\n            foreach ($GLOBALS['hooks']->load('class.admin.get_section_id') as $hook) {\r\n                include $hook;\r\n            }\r\n            $sections = array(\r\n                'categories' => 3,\r\n                'customers'  => 5,\r\n                'documents'  => 4,\r\n                'filemanager' => 7,\r\n                'offers'  => 11,\r\n                'orders'  => 10,\r\n                'products'  => 2,\r\n                'users'   => 1,\r\n                'shipping'  => 6,\r\n                'statistics' => 8,\r\n                'settings'  => 9,\r\n                'reviews'  => 12,\r\n            );\r\n            if (isset($sections[$name])) {\r\n                return (int)$sections[$name];\r\n            }\r\n\r\n            foreach ($this->_sections as $section) {\r\n                if ($section['name'] == strtolower($name)) {\r\n                    return $section['section_id'];\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Load admin data\r\n     *\r\n     * @return bool\r\n     */\r\n    private function _load()\r\n    {\r\n        //Try to get the admin_id from the sessions\r\n        $admin_id = $GLOBALS['session']->get('admin_id', 'client', 0);\r\n        //If there is one\r\n        if ($admin_id != 0) {\r\n            //Try to get the admin_data from the sessions\r\n            if ($GLOBALS['session']->has('', 'admin_data')) {\r\n                $data = $GLOBALS['session']->get('', 'admin_data');\r\n            }\r\n            if (!isset($data) || empty($data) || !isset($data['admin_id'])) {\r\n                //Load from the DB\r\n                if (($data = $GLOBALS['db']->select('CubeCart_admin_users', false, array('admin_id' => $admin_id, 'status' => '1'), false, 1, false, false)) !== false) {\r\n                    //Unset these for security reasons\r\n                    unset($data[0]['password']);\r\n                    unset($data[0]['salt']);\r\n                    unset($data[0]['session_id']);\r\n                    $GLOBALS['session']->set('', $data[0], 'admin_data');\r\n                    $data = $data[0];\r\n                    $GLOBALS['db']->update('CubeCart_sessions', array('admin_id' => $data['admin_id']), array('session_id' => $GLOBALS['session']->getId()));\r\n                }\r\n            }\r\n            if (!empty($data)) {\r\n                $this->_logged_in = true;\r\n                $this->_admin_data = $data;\r\n                $GLOBALS['session']->set('user_language', (!empty($data['language'])) ? $data['language'] : $GLOBALS['config']->get('config', 'default_language'), 'admin');\r\n                //\u00a0Load Permission Rules\r\n                if (($permissions = $GLOBALS['db']->select('CubeCart_permissions', false, array('admin_id' => $this->_admin_data['admin_id']))) !== false) {\r\n                    foreach ($permissions as $permission) {\r\n                        $this->_permissions[$permission['section_id']] = $permission['level'];\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Magic get\r\n     *\r\n     * @param string $name\r\n     */\r\n    public function __get($name)\r\n    {\r\n        return (isset($this->_admin_data[$name])) ? $this->_admin_data[$name] : false;\r\n    }\r\n}\r\n", "<?php\r\n/**\r\n * CubeCart v6\r\n * ========================================\r\n * CubeCart is a registered trade mark of CubeCart Limited\r\n * Copyright CubeCart Limited 2017. All rights reserved.\r\n * UK Private Limited Company No. 5323904\r\n * ========================================\r\n * Web:\t\t\thttp://www.cubecart.com\r\n * Email:\t\tsales@cubecart.com\r\n * License:\t\tGPL-3.0 https://www.gnu.org/licenses/quick-guide-gplv3.html\r\n */\r\n\r\n/**\r\n * Session controller\r\n *\r\n * @author Technocrat\r\n * @author Al Brookbanks\r\n * @since 5.0.0\r\n */\r\nclass Session\r\n{\r\n    /**\r\n     * Get session save handler\r\n     *\r\n     * @var string\r\n     */\r\n    private $_save_handler = 'files';\r\n    /**\r\n     * Get session save path\r\n     *\r\n     * @var string\r\n     */\r\n    private $_save_path = '';\r\n    /**\r\n     * Current session status\r\n     *\r\n     * @var string\r\n     */\r\n    private $_state\t= 'active';\r\n    /**\r\n     * Session timeout\r\n     *\r\n     * @var int\r\n     */\r\n    private $_session_timeout = 604800;\r\n    /**\r\n     * Session path\r\n     *\r\n     * @var string\r\n     */\r\n    private $_session_path = '';\r\n    /**\r\n     * Session domain\r\n     *\r\n     * @var string\r\n     */\r\n    private $_session_domain = '';\r\n    /**\r\n     * Session token name\r\n     *\r\n     * @var string\r\n     */\r\n    private $_token_name = 'token';\r\n    /**\r\n     * Is user blocked\r\n     *\r\n     * @var bool\r\n     */\r\n    private $_user_blocked\t= false;\r\n\r\n    const BLOCKER_FRONTEND\t= 'F';\r\n    const BLOCKER_BACKEND\t= 'B';\r\n\r\n    /**\r\n     * Class instance\r\n     *\r\n     * @var instance\r\n     */\r\n    private static $_instance;\r\n    \r\n    /**\r\n     * Current session data\r\n     *\r\n     * @var array\r\n     */\r\n    public $session_data = array();\r\n\r\n    ##############################################\r\n\r\n    final private function __construct()\r\n    {\r\n        if (CC_IN_ADMIN) {\r\n            $this->_token_name = 'token_acp';\r\n        }\r\n\r\n        if (session_id()) {\r\n            session_unset();\r\n            session_destroy();\r\n            $_SESSION = array();\r\n        }\r\n        \r\n        //Get all the ini settings to save time later\r\n        $ini = ini_get_all(null, false);\r\n        if($GLOBALS['config']->has('config', 'session_save_handler')) {\r\n            $this->_save_handler = $GLOBALS['config']->get('config', 'session_save_handler');\r\n        } else {\r\n            $this->_save_handler = Cache::getInstance()->session_save_handler();\r\n        }\r\n        $this->_save_path = Cache::getInstance()->session_save_path();\r\n\r\n        ini_set('session.save_handler', $this->_save_handler);\r\n        if($this->_save_handler!=='files') {\r\n            ini_set('session.save_path', $this->_save_path);\r\n        }\r\n\r\n        if ($ini['session.use_trans_sid'] != '0') {\r\n            //disable transparent sid support\r\n            ini_set('session.use_trans_sid', '0');\r\n        }\r\n\r\n        if ($ini['session.gc_probability'] != 15) {\r\n            //Clean up 15% of the time\r\n            ini_set('session.gc_probability', 15);\r\n        }\r\n        if ($ini['session.gc_divisor'] != 100) {\r\n            ini_set('session.gc_divisor', 100);\r\n        }\r\n        $cookie_domain = ltrim($GLOBALS['config']->get('config', 'cookie_domain'), '.');\r\n        if (!empty($cookie_domain) && strstr($GLOBALS['storeURL'], $cookie_domain) && strpos($cookie_domain, '.')) {\r\n            $this->_session_domain = '.'.$cookie_domain;\r\n            ini_set('session.cookie_domain', $this->_session_domain);\r\n        }\r\n        $this->_session_path = $GLOBALS['rootRel'] == '/' ? $GLOBALS['rootRel'] : substr($GLOBALS['rootRel'],0,-1);\r\n        ini_set('session.cookie_path', $this->_session_path);\r\n\r\n        //If the current session time is longer we will not change anything\r\n        if ($ini['session.gc_maxlifetime'] < $this->_session_timeout) {\r\n            ini_set('session.gc_maxlifetime', $this->_session_timeout);\r\n        }\r\n        if ($ini['session.cookie_lifetime'] < $this->_session_timeout) {\r\n            ini_set('session.cookie_lifetime', $this->_session_timeout);\r\n        }\r\n        if (!$ini['session.use_cookies']) {\r\n            //Enforce cookies only\r\n            ini_set('session.use_cookies', true);\r\n        }\r\n        if (!$ini['session.use_only_cookies']) {\r\n            // make sure session is cookie based only\r\n            ini_set('session.use_only_cookies', true);\r\n        }\r\n        if (!$ini['session.cookie_httponly']) {\r\n            // make sure session cookies are http ONLY!\r\n            ini_set('session.cookie_httponly', true);\r\n        }\r\n        if (CC_SSL && empty($ini['session.cookie_samesite'])) {\r\n            // make sure session cookies are samesite\r\n            ini_set('session.cookie_samesite', 'None');\r\n        }\r\n        if (!$ini['session.cookie_secure'] && CC_SSL) {\r\n            // make sure session cookies are secure if SSL is enabled\r\n            ini_set('session.cookie_secure', true);\r\n        }\r\n        \r\n        $this->_start();\r\n        $this->_validate();\r\n        $this->_setTimers();\r\n    }\r\n\r\n    public function __destruct()\r\n    {\r\n        //Close this session\r\n        $this->_close();\r\n    }\r\n\r\n    /**\r\n     * Setup the instance (singleton)\r\n     *\r\n     * @return Session\r\n     */\r\n    public static function getInstance()\r\n    {\r\n        if (!(self::$_instance instanceof self)) {\r\n            self::$_instance = new self();\r\n        }\r\n\r\n        return self::$_instance;\r\n    }\r\n\r\n    //=====[ Public ]=======================================\r\n\r\n    /**\r\n     * Is a user blocked\r\n     *\r\n     * @return bool\r\n     */\r\n    public function blocked()\r\n    {\r\n        return $this->_user_blocked;\r\n    }\r\n\r\n    /**\r\n     * Block a user\r\n     *\r\n     * @param string $user\r\n     * @param bool $login\r\n     * @param string $location\r\n     * @param int $attempts\r\n     * @param int $time\r\n     */\r\n    public function blocker($user, $user_id, $login = false, $location = false, $attempts = 5, $time = 600)\r\n    {\r\n        $now = time();\r\n        // Access Log\r\n        $record\t= array(\r\n            'type'\t\t=> $location,\r\n            'time'\t\t=> $now,\r\n            'username'\t=> (!empty($user)) ? $user : '--',\r\n            'user_id'   => $user_id,\r\n            'ip_address'=> get_ip_address(),\r\n            'useragent' => $this->_http_user_agent(),\r\n            'success'\t=> ($login) ? 'Y' : 'N',\r\n        );\r\n        $log_days = $GLOBALS['config']->get('config', 'r_staff');\r\n        if (ctype_digit((string)$log_days) &&  $log_days > 0) {\r\n            $GLOBALS['db']->insert('CubeCart_access_log', $record);\r\n            $GLOBALS['db']->delete('CubeCart_access_log', 'time < UNIX_TIMESTAMP(DATE_SUB(NOW(), INTERVAL '.$log_days.' DAY))');\r\n        } elseif (empty($log_days) || !$log_days) {\r\n            $GLOBALS['db']->insert('CubeCart_access_log', $record);\r\n        }\r\n        // Remove expired blocks\r\n        $GLOBALS['db']->delete('CubeCart_blocker', array('last_attempt' => '<='.($now - $time)));\r\n\r\n        // Search for active blocks\r\n        $where = array(\r\n            'user_agent'\t=> $this->_http_user_agent(),\r\n            'ip_address'\t=> get_ip_address(),\r\n            'location'\t\t=> $location,\r\n        );\r\n        $blacklist = $GLOBALS['db']->select('CubeCart_blocker', array('block_id', 'ban_expires', 'last_attempt', 'level'), $where);\r\n        if ($blacklist) {\r\n            $blocked = $blacklist[0];\r\n            if ((int)$blocked['level'] == (int)$attempts) {\r\n                // Ban level reached\r\n                if ((int)$blocked['ban_expires'] <= $now) {\r\n                    // Ban expired - Allowed\r\n                    $GLOBALS['db']->delete('CubeCart_blocker', array('block_id' => $blocked['block_id']));\r\n                } else {\r\n                    // Still banned - Denied\r\n                    $this->_user_blocked = true;\r\n                }\r\n            } elseif (!$login) {\r\n                //\u00a0Attempts remaining\r\n                $record\t= array(\r\n                    'last_attempt'\t=> $now,\r\n                    'level'\t\t\t=> ($blocked['last_attempt'] <= ($now - $time)) ? 1 : $blocked['level'] + 1,\r\n                );\r\n                if ($record['level'] == $attempts) {\r\n                    // Blocked\r\n                    $record['ban_expires'] = ($now+$time);\r\n                    $this->_user_blocked = true;\r\n                }\r\n                $GLOBALS['db']->update('CubeCart_blocker', $record, array('block_id' => $blocked['block_id']));\r\n            }\r\n        } elseif (!$login) {\r\n            //\u00a0Login failed - Create blacklist entry\r\n            $record\t= array(\r\n                'level'\t\t\t=> 1,\r\n                'last_attempt'\t=> $now,\r\n                'ban_expires'\t=> 0,\r\n                'username'\t\t=> strip_tags($user),\r\n                'location'\t\t=> $location,\r\n                'user_agent'\t=> $this->_http_user_agent(),\r\n                'ip_address'\t=> get_ip_address(),\r\n            );\r\n            $GLOBALS['db']->insert('CubeCart_blocker', $record);\r\n        }\r\n        return (bool)$this->_user_blocked;\r\n    }\r\n\r\n    /**\r\n     * Check a form token\r\n     *\r\n     * @param string $token\r\n     * @return bool\r\n     */\r\n    public function checkToken($token)\r\n    {\r\n        // Continue without error if no security token is set\r\n        if (!$this->get($this->_token_name)) {\r\n            return true;\r\n        }\r\n        return ($this->get($this->_token_name) == $token);\r\n    }\r\n     \r\n    /**\r\n     * Have cookied been accepted or not\r\n     *\r\n     * Deprecated but left for backward compatibility\r\n     *\r\n     * @param string $token\r\n     * @return bool\r\n     */\r\n    public function cookiesBlocked()\r\n    {\r\n    \r\n        // Check cookies exists for verified and if so return value\r\n        if (isset($_COOKIE['accept_cookies']) && $_COOKIE['accept_cookies']=='false') {\r\n            return false;\r\n        } elseif (!$GLOBALS['config']->get('config', 'cookie_dialogue')) {\r\n            return false;\r\n        }\r\n\r\n        if ($GLOBALS['db']->select('CubeCart_geo_country', false, array('numcode' => $GLOBALS['config']->get('config', 'store_country'), 'eu' => '1')) !== false) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete something from the session\r\n     *\r\n     * @param string $name\r\n     * @param string $namespace\r\n     * @return bool\r\n     */\r\n    public function delete($name, $namespace = 'system')\r\n    {\r\n        $namespace = $this->_namespace($namespace);\r\n\r\n        //If the session isn't active we don't need to continue\r\n        if ($this->_state != 'active') {\r\n            return true;\r\n        }\r\n\r\n        if (!isset($_SESSION[$namespace])) {\r\n            return false;\r\n        }\r\n\r\n        //If there is not a name\r\n        if (empty($name)) {\r\n            //Remove the entire namespace\r\n            unset($_SESSION[$namespace]);\r\n            return true;\r\n        } elseif (isset($_SESSION[$namespace][$name])) {\r\n            //Remove just the element\r\n            unset($_SESSION[$namespace][$name]);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Destroy session\r\n     *\r\n     * @return bool\r\n     */\r\n    public function destroy()\r\n    {\r\n        if ($this->_state == 'destroyed') {\r\n            return true;\r\n        }\r\n\r\n        //Delete the session from the DB\r\n        $GLOBALS['db']->delete('CubeCart_sessions', array('session_id' => $this->getId()), false);\r\n        //Completely unset everything\r\n        $_SESSION = array();\r\n\r\n        //Kill the cookies\r\n        if (isset($_COOKIE[session_name()])) {\r\n            $this->set_cookie(session_name(), '', time() - 42000);\r\n            unset($_COOKIE[session_name()]);\r\n        }\r\n\r\n        //Destory it\r\n        session_unset();\r\n        session_destroy();\r\n\r\n        $this->_state = 'destroyed';\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get data from the session\r\n     *\r\n     * If name is empty the entire name space will be returned\r\n     *\r\n     * @param string $name\r\n     * @param string $namespace\r\n     * @param string $default\r\n     */\r\n    public function get($name, $namespace = 'system', $default = false)\r\n    {\r\n        $namespace = $this->_namespace($namespace);\r\n\r\n        if ($this->_state != 'active' && $this->_state != 'expired') {\r\n            return $default;\r\n        }\r\n\r\n        if (isset($_SESSION[$namespace])) {\r\n            if (!empty($name) && isset($_SESSION[$namespace][$name])) {\r\n                return $_SESSION[$namespace][$name];\r\n            } elseif (empty($name) && !empty($_SESSION[$namespace])) {\r\n                return $_SESSION[$namespace];\r\n            }\r\n        }\r\n\r\n        return $default;\r\n    }\r\n\r\n    /**\r\n     * Get session id\r\n     *\r\n     * @return string\r\n     */\r\n    public function getId()\r\n    {\r\n        if ($this->_state == 'destroyed') {\r\n            return null;\r\n        }\r\n\r\n        return session_id();\r\n    }\r\n\r\n    /**\r\n     * Get session name\r\n     *\r\n     * @return string The session name\r\n     */\r\n    public function getName()\r\n    {\r\n        if ($this->_state == 'destroyed') {\r\n            return null;\r\n        }\r\n\r\n        return session_name();\r\n    }\r\n\r\n    /**\r\n     * Get the session state\r\n     *\r\n     * @return string\r\n     */\r\n    public function getState()\r\n    {\r\n        return $this->_state;\r\n    }\r\n\r\n    /**\r\n     * Get session data from database\r\n     *\r\n     * @return false/array/string\r\n     */\r\n    public function getSessionTableData($column = false)\r\n    {\r\n        $data = $GLOBALS['db']->select('CubeCart_sessions', $column, array('session_id' => $this->getId()), false, 1, false, false);\r\n        if (is_array($data)) {\r\n            if (count($data[0])==1 && is_string($column)) {\r\n                return $data[0][$column];\r\n            } else {\r\n                return $data[0];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Create a session token to help prevent CSRF\r\n     *\r\n     * @param bool $new If true, force a new token to be created\r\n     * @return string The session token\r\n     */\r\n    public function getToken($new = false)\r\n    {\r\n        if ((($token = $this->get($this->_token_name)) === false) || $new) {\r\n            $token = $this->_createToken();\r\n            $this->set($this->_token_name, $token);\r\n        }\r\n\r\n        return $token;\r\n    }\r\n\r\n    /**\r\n     * Does the session have something\r\n     *\r\n     * @param string $name\r\n     * @param string $namespace\r\n     * @return bool\r\n     */\r\n    public function has($name, $namespace = 'system')\r\n    {\r\n        $namespace = $this->_namespace($namespace);\r\n\r\n        if ($this->_state != 'active') {\r\n            return false;\r\n        }\r\n\r\n        if (!isset($_SESSION[$namespace])) {\r\n            return false;\r\n        }\r\n\r\n        if (empty($name)) {\r\n            return true;\r\n        } else {\r\n            return isset($_SESSION[$namespace][$name]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is an element empty\r\n     *\r\n     * @param string $config_name\r\n     * @param string $element\r\n     * @return bool\r\n     */\r\n    public function isEmpty($name, $namespace)\r\n    {\r\n        //If the element isn't there then it is empty\r\n        if (!$this->has($name, $namespace)) {\r\n            return true;\r\n        }\r\n\r\n        $namespace = $this->_namespace($namespace);\r\n\r\n        return empty($_SESSION[$namespace][$name]);\r\n    }\r\n\r\n    /**\r\n     * Set a session value to something\r\n     *\r\n     * @param string $name\r\n     * @param string $value\r\n     * @param string $namespace\r\n     * @param bool $overwrite\r\n     * @return bool\r\n     */\r\n    public function set($name, $value, $namespace = 'system', $overwrite = false)\r\n    {\r\n        $namespace = $this->_namespace($namespace);\r\n        if ($this->_state != 'active') {\r\n            return true;\r\n        }\r\n\r\n        if (is_null($value)) {\r\n            unset($_SESSION[$namespace][$name]);\r\n        } else {\r\n            if (empty($name)) {\r\n                if (!is_array($value)) {\r\n                    $_SESSION[$namespace] = $value;\r\n                } else {\r\n                    if (isset($_SESSION[$namespace]) && !$overwrite) {\r\n                        $_SESSION[$namespace] = merge_array($_SESSION[$namespace], $value);\r\n                    } else {\r\n                        $_SESSION[$namespace] = $value;\r\n                    }\r\n                }\r\n            } else {\r\n                if (!is_array($value)) {\r\n                    $_SESSION[$namespace][$name] = $value;\r\n                } else {\r\n                    if (isset($_SESSION[$namespace][$name]) && !$overwrite) {\r\n                        $_SESSION[$namespace][$name] = merge_array($_SESSION[$namespace][$name], $value);\r\n                    } else {\r\n                        $_SESSION[$namespace][$name] = $value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set a page back to the session\r\n     */\r\n    public function setBack()\r\n    {\r\n        if (isset($_SERVER['HTTP_REFERER']) && !empty($_SERVER['HTTP_REFERER'])) {\r\n            //Make sure the referer is local and not the login\r\n            if (substr($_SERVER['HTTP_REFERER'], 0, strlen(CC_STORE_URL)) == CC_STORE_URL && $_SERVER['HTTP_REFERER'] != CC_STORE_URL.'index.php?_a=login') {\r\n                $this->set('back', $_SERVER['HTTP_REFERER']);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set cookie\r\n     *\r\n     * @param string $name\r\n     * @param string $value\r\n     * @param integer $expire\r\n     * @return bool\r\n     */\r\n    public function set_cookie($name, $value, $expires, $options = array())\r\n    {\r\n        $params = session_get_cookie_params();\r\n        $params = array_merge($params, $options); // Allow overwrite for specific cookies    \r\n\r\n        $date = new Datetime(strftime('%c',$expires));\r\n        $attributes = '';\r\n        $attributes .= ';Expires='.$date->format(DateTime::COOKIE);\r\n        $attributes .= ';Domain='.$this->_session_domain;\r\n        $attributes .= ';Path='.$this->_session_path;\r\n        if(CC_SSL) {\r\n            $attributes .= ';SameSite='.$params['samesite'];\r\n            $attributes .= ';Secure';\r\n        }\r\n        if($params['httponly']) {\r\n            $attributes .= ';HttpOnly';\r\n        }\r\n        // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie\r\n        header('Set-Cookie: '.$name.'='.$value.$attributes);\r\n    }\r\n\r\n    //=====[ Private ]=======================================\r\n\r\n    /**\r\n     * Close a session\r\n     *\r\n     * @return true\r\n     */\r\n    private function _close()\r\n    {\r\n        if ($this->_state == 'closed') {\r\n            return true;\r\n        }\r\n\r\n        $record = array(\r\n            'location' => currentPage() . (strpos(currentPage(),\"_a=404\")!==false ? \"<br /><strike>\".$_SERVER['REQUEST_URI'].\"</strike>\" : \"\"),\r\n            'session_last'\t=> $this->get('session_last', 'client', ''),\r\n            'acp'\t\t=> ADMIN_CP\r\n        );\r\n        \r\n        //Use the instance because the global might be gone already\r\n        Database::getInstance()->update('CubeCart_sessions', $record, array('session_id' => $this->getId()), false);\r\n        // Tidy Access Logs keep months worth\r\n        Database::getInstance()->delete('CubeCart_access_log', array('time' => '<'.(time()-(3600*24*7*4))));\r\n        // Purge sessions older than the session time out\r\n        Database::getInstance()->delete('CubeCart_sessions', array('session_last' => '<='.(time() - $this->_session_timeout)), false);\r\n\r\n        $this->_state = 'closed';\r\n\r\n        session_write_close();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Create a form token\r\n     *\r\n     * @return string\r\n     */\r\n    private function _createToken()\r\n    {\r\n        return md5(session_name().time().mt_rand(0, mt_getrandmax()));\r\n    }\r\n\r\n    /**\r\n     * User agent\r\n     *\r\n     * @return string\r\n     */\r\n    private function _http_user_agent()\r\n    {\r\n        return strpos($_SERVER['HTTP_USER_AGENT'], 'Trident') ? 'IEX' : htmlspecialchars($_SERVER['HTTP_USER_AGENT']);\r\n    }\r\n\r\n    /**\r\n     * Check & build the namespace\r\n     *\r\n     * @param string $namespace\r\n     * @return string\r\n     */\r\n    private function _namespace($namespace)\r\n    {\r\n        if ($namespace[0] == '_') {\r\n            trigger_error('Session namespace cannot start with _', E_USER_ERROR);\r\n        }\r\n\r\n        return '__'.$namespace;\r\n    }\r\n\r\n    /**\r\n     * Setup session timers\r\n     */\r\n    private function _setTimers()\r\n    {\r\n        if (!$this->has('session_start', 'client')) {\r\n            $start = time();\r\n            $this->set('session_start', $start, 'client');\r\n            $this->set('session_last', $start, 'client');\r\n        } else {\r\n            $this->set('session_start', $this->get('session_last', 'client'), 'client');\r\n            $this->set('session_last', time(), 'client');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start session\r\n     */\r\n    private function _start()\r\n    {\r\n        if($this->_save_handler!=='files') {\r\n            session_save_path($this->_save_path);\r\n        } else {\r\n            $session_save_path = $GLOBALS['config']->get('config', 'session_save_path');\r\n            if (!empty($session_save_path) && file_exists($session_save_path)) {\r\n                session_save_path($session_save_path);\r\n            }\r\n        }\r\n        session_cache_limiter('none');\r\n        $session_prefix = CC_SSL ? 'S' : '';\r\n        session_name('CC'.$session_prefix.'_'.strtoupper(substr(md5(CC_ROOT_DIR), 0, 10)));\r\n        session_start();\r\n        \r\n        // Increase session length on each page load.\r\n        if (isset($_COOKIE[session_name()])) {\r\n            $this->set_cookie(session_name(), session_id(), time()+$this->_session_timeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate session\r\n     *\r\n     * @param bool $restart\r\n     */\r\n    private function _validate()\r\n    {\r\n        $ip = get_ip_address();\r\n\r\n        if (($current = $GLOBALS['db']->select('CubeCart_sessions', false, array('session_id' => $this->getId()), false, 1, false, false)) === false) {\r\n            $record = array(\r\n                'admin_id'\t\t=> 0,\r\n                'customer_id'\t=> 0,\r\n                'ip_address'\t=> $ip,\r\n                'location'\t\t=> '',\r\n                'session_id'\t=> $this->getId(),\r\n                'session_last'\t=> time(),\r\n                'session_start'\t=> time(),\r\n                'useragent'\t\t=> $this->_http_user_agent(),\r\n                'acp'\t\t=> ADMIN_CP\r\n            );\r\n            $GLOBALS['db']->insert('CubeCart_sessions', $record, false);\r\n            $this->set('ip_address', $ip, 'client');\r\n            $this->set('useragent', $this->_http_user_agent(), 'client');\r\n        } else {\r\n            $this->session_data = $current[0];\r\n            $this->set('ip_address', $current[0]['ip_address'], 'client');\r\n            $this->set('useragent', $current[0]['useragent'], 'client');\r\n        }\r\n    }\r\n}\r\n", "<?php\r\n/**\r\n * CubeCart v6\r\n * ========================================\r\n * CubeCart is a registered trade mark of CubeCart Limited\r\n * Copyright CubeCart Limited 2017. All rights reserved.\r\n * UK Private Limited Company No. 5323904\r\n * ========================================\r\n * Web:   http://www.cubecart.com\r\n * Email:  sales@cubecart.com\r\n * License:  GPL-3.0 https://www.gnu.org/licenses/quick-guide-gplv3.html\r\n */\r\n\r\n/**\r\n * User controller\r\n *\r\n * @author Technocrat\r\n * @author Al Brookbanks\r\n * @since 5.0.0\r\n */\r\nclass User\r\n{\r\n\r\n    /**\r\n     * Is bot?\r\n     *\r\n     * @var bool\r\n     */\r\n    private $_bot   = null;\r\n    /**\r\n     * Bot signatures\r\n     *\r\n     * @var array of strings\r\n     */\r\n    protected $_bot_sigs =  array(\r\n        'alexa',\r\n        'appie',\r\n        'archiver',\r\n        'ask jeeves',\r\n        'baiduspider',\r\n        'bot',\r\n        'crawl',\r\n        'crawler',\r\n        'curl',\r\n        'eventbox',\r\n        'facebookexternal',\r\n        'fast',\r\n        'firefly',\r\n        'froogle',\r\n        'gigabot',\r\n        'girafabot',\r\n        'google',\r\n        'googlebot',\r\n        'infoseek',\r\n        'inktomi',\r\n        'java',\r\n        'larbin',\r\n        'looksmart',\r\n        'mechanize',\r\n        'monitor',\r\n        'msnbot',\r\n        'nambu',\r\n        'nationaldirectory',\r\n        'novarra',\r\n        'pear',\r\n        'perl',\r\n        'python',\r\n        'rabaz',\r\n        'radian',\r\n        'rankivabot',\r\n        'scooter',\r\n        'slurp',\r\n        'sogou web spider',\r\n        'spade',\r\n        'sphere',\r\n        'spider',\r\n        'technoratisnoop',\r\n        'tecnoseek',\r\n        'teoma',\r\n        'toolbar',\r\n        'transcoder',\r\n        'twitt',\r\n        'url_spider_sql',\r\n        'webalta',\r\n        'webbug',\r\n        'webfindbot',\r\n        'wordpress',\r\n        'www.galaxy.com',\r\n        'yahoo',\r\n        'yandex',\r\n        'zyborg',\r\n    );\r\n    /**\r\n     * Has the user data changed\r\n     *\r\n     * @var bool\r\n     */\r\n    private $_changed  = false;\r\n    /**\r\n     * Logged in\r\n     *\r\n     * @var bool\r\n     */\r\n    private $_logged_in  = false;\r\n    /**\r\n     * Users data\r\n     *\r\n     * @var array\r\n     */\r\n    private $_user_data  = array();\r\n\r\n    /**\r\n     * Class instance\r\n     *\r\n     * @var instance\r\n     */\r\n    protected static $_instance;\r\n\r\n    ##############################################\r\n\r\n    final protected function __construct()\r\n    {\r\n\r\n        //If there is a login attempt\r\n        if (isset($_POST['username']) && isset($_POST['password']) && !empty($_POST['username']) && !empty($_POST['password'])) {\r\n\r\n            //Did they check the remember me box\r\n            $remember = (isset($_POST['remember']) && !empty($_POST['remember'])) ? true : false;\r\n            $this->authenticate($_POST['username'], $_POST['password'], $remember);\r\n        } else {\r\n            //If there is a cookie for the username and they are not logged in\r\n            if (isset($_COOKIE['username']) && !empty($_COOKIE['username']) && !$this->is()) {\r\n                //If we haven't pushed the user to the login\r\n                if (!$GLOBALS['session']->get('login_push')) {\r\n                    $GLOBALS['session']->set('login_push', true);\r\n                    //Try to have them login\r\n                    if (!isset($_GET['_a']) || $_GET['_a'] != 'login') {\r\n                        httpredir('index.php?_a=login');\r\n                    }\r\n                }\r\n            }\r\n\r\n            $this->_load();\r\n            //IS_USER defines if a the user is a valid user on the template\r\n            $GLOBALS['smarty']->assign('IS_USER', $this->is());\r\n\r\n            if ($this->is() && isset($_POST['mailing_list'])) {\r\n                Newsletter::getInstance()->subscribe($this->get('email'), $this->getId());\r\n            }\r\n\r\n            $this->isBot();\r\n        }\r\n    }\r\n\r\n    public function __destruct()\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Setup the instance (singleton)\r\n     *\r\n     * @return User\r\n     */\r\n    public static function getInstance()\r\n    {\r\n        if (!(self::$_instance instanceof self)) {\r\n            self::$_instance = new self();\r\n        }\r\n\r\n        return self::$_instance;\r\n    }\r\n\r\n    //=====[ Public ]=======================================\r\n\r\n    /**\r\n     * Increment customer order count by 1\r\n     *\r\n     * @param integer $customer_id\r\n     * @return bool\r\n     */\r\n    public function addOrder($customer_id)\r\n    {\r\n        return (bool)$GLOBALS['db']->misc('UPDATE `'.$GLOBALS['config']->get('config', 'dbprefix').'CubeCart_customer` SET `order_count` = `order_count` + 1 WHERE `customer_id` = '.(int)$customer_id, false);\r\n    }\r\n\r\n    /**\r\n     * Authenticate a user (ie login)\r\n     *\r\n     * @param string $username\r\n     * @param string $password\r\n     * @param bool $remember\r\n     * @param bool $from_cookie\r\n     * @param bool $redirect\r\n     * @return bool\r\n     */\r\n    public function authenticate($username, $password, $remember = false, $from_cookie = false, $is_openid = false, $redirect = true)\r\n    {\r\n        $username = (string)$username;\r\n        $password = (string)$password;\r\n\r\n        //Check we are not upgrading an unregistered account\r\n        if ($unregistered = $GLOBALS['db']->select('CubeCart_customer', array('customer_id'), array('type' => 2, 'email' => $username, 'status' => true), false, 1, false, false)) {\r\n            $record = array(\r\n                'type' => 1,\r\n                'new_password' => 0,\r\n                'password' => md5($password)\r\n            );\r\n            $GLOBALS['db']->update('CubeCart_customer', $record, array('customer_id' => (int)$unregistered[0]['customer_id']));\r\n            $this->authenticate($username, $password);\r\n        }\r\n\r\n        $hash_password = '';\r\n        //Get customer_id, password, and salt for the user\r\n        if (($user = $GLOBALS['db']->select('CubeCart_customer', array('customer_id', 'password', 'salt', 'new_password'), array('type' => 1, 'email' => $username, 'status' => true), false, 1, false, false)) !== false) {\r\n            //If there is no salt we need to make it\r\n            if (empty($user[0]['salt'])) {\r\n                //Get the salt\r\n                $salt = Password::getInstance()->createSalt();\r\n                //Update it to the newer MD5 so we can fix it later\r\n                $pass = Password::getInstance()->updateOld($user[0]['password'], $salt);\r\n                $record = array(\r\n                    'salt'   => $salt,\r\n                    'password'  => $pass,\r\n                );\r\n\r\n                //Update the DB with the new salt and salted password\r\n                if ($GLOBALS['db']->update('CubeCart_customer', $record, array('customer_id' => (int)$user[0]['customer_id']))) {\r\n                    $hash_password = $pass;\r\n                }\r\n            } else {\r\n                if ($user[0]['new_password'] == 1) {\r\n                    //Get the salted new password\r\n                    $hash_password = Password::getInstance()->getSalted($password, $user[0]['salt']);\r\n                } else {\r\n                    //Get the salted old password\r\n                    $hash_password = Password::getInstance()->getSaltedOld($password, $user[0]['salt']);\r\n                }\r\n            }\r\n        }\r\n\r\n        //Try to get the user data with the username and salted password\r\n        $where = array(\r\n            'email'  => $username,\r\n            'password' => $hash_password,\r\n        );\r\n        $user = $GLOBALS['db']->select('CubeCart_customer', array('language', 'customer_id', 'email', 'password', 'salt', 'new_password'), $where, false, 1, false, false);\r\n\r\n        $GLOBALS['session']->blocker($username, $user[0]['customer_id'], (bool)$user, Session::BLOCKER_FRONTEND, $GLOBALS['config']->get('config', 'bfattempts'), $GLOBALS['config']->get('config', 'bftime'));\r\n        if (!$user) {\r\n            $GLOBALS['gui']->setError($GLOBALS['language']->account['error_login']);\r\n        } else {\r\n            $user[0]['language'] = $this->_validLanguage($user[0]['language']);\r\n            if ($user[0]['new_password'] != 1) {\r\n                $salt = Password::getInstance()->createSalt();\r\n                $pass = Password::getInstance()->getSalted($password, $salt);\r\n                $record = array(\r\n                    'salt'   => $salt,\r\n                    'password'  => $pass,\r\n                    'new_password' => 1,\r\n                );\r\n\r\n                //Update the DB with the new salt and salted password\r\n                if (($GLOBALS['db']->update('CubeCart_customer', $record, array('customer_id' => (int)$user[0]['customer_id']))) === false) {\r\n                    trigger_error('Could not update password', E_USER_ERROR);\r\n                }\r\n            }\r\n            //If we are a user\r\n            if (!empty($user[0]['customer_id']) && is_numeric($user[0]['customer_id'])) {\r\n                /**\r\n                 * Set the cookie for the username\r\n                 * The password cookie is not stored to make stores more secure\r\n                 */\r\n                if ($remember || $from_cookie) {\r\n                    $GLOBALS['session']->set_cookie('username', $user[0]['email'], time() + (3600*24*30));\r\n                }\r\n                if (!$GLOBALS['session']->blocked()) {\r\n                    // possibly replaceable with session_set_save_handler?\r\n                    $GLOBALS['db']->update('CubeCart_sessions', array('customer_id' => $user[0]['customer_id']), array('session_id' => $GLOBALS['session']->getId()));\r\n                    $GLOBALS['db']->update('CubeCart_cookie_consent', array('customer_id' => $user[0]['customer_id']), array('session_id' => $GLOBALS['session']->getId()));\r\n                    $GLOBALS['session']->set('language', $user[0]['language'], 'client');\r\n                    // Load user data\r\n                    $this->_load();\r\n\r\n                    $pass_len = strlen($password);\r\n\r\n                    if ($pass_len > 0 && $pass_len < 6) {\r\n                        $GLOBALS['gui']->setInfo($GLOBALS['language']->account['error_pass_length']);\r\n                    }\r\n\r\n                    $GLOBALS['session']->set('check_autoload', true);\r\n\r\n                    if ($redirect) {\r\n                        //Check for a redirect\r\n                        $redir = '';\r\n                        if (isset($_GET['redir']) && !empty($_GET['redir'])) {\r\n                            $redir = $_GET['redir'];\r\n                        } elseif (isset($_POST['redir']) && !empty($_POST['redir'])) {\r\n                            $redir = $_POST['redir'];\r\n                        } elseif ($GLOBALS['session']->has('redir')) {\r\n                            $redir = $GLOBALS['session']->get('redir');\r\n                        } elseif ($GLOBALS['session']->has('back')) {\r\n                            $redir = $GLOBALS['session']->get('back');\r\n                        }\r\n\r\n                        foreach ($GLOBALS['hooks']->load('class.user.preredirect') as $hook) {\r\n                            include $hook;\r\n                        }\r\n\r\n                        //If there is a redirect\r\n                        if (!empty($redir)) {\r\n                            // Prevent phishing attacks, or anything untoward, unless it's redirecting back to this store\r\n                            if(!$GLOBALS['ssl']->validRedirect($redir)) {\r\n                               trigger_error(\"Possible Phishing attack - Redirection to '\".$redir.\"' is not allowed. Please check the value of 'Store URL' in the SSL section of your store settings.\", E_USER_ERROR);\r\n                            }\r\n                        } else {\r\n                            $remove = array('redir');\r\n                        }\r\n\r\n                        if (!empty($redir)) {\r\n                            //Clean up\r\n                            if ($GLOBALS['session']->has('back')) {\r\n                                $GLOBALS['session']->delete('back');\r\n                            }\r\n                            if ($GLOBALS['session']->has('redir')) {\r\n                                $GLOBALS['session']->delete('redir');\r\n                            }\r\n                            //Send to redirect\r\n                            httpredir($redir);\r\n                        } else {\r\n                            httpredir(currentPage($remove));\r\n                        }\r\n                    }\r\n                    return true;\r\n                } else {\r\n                    $GLOBALS['gui']->setError($GLOBALS['language']->account['error_login_block']);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public function addressCompare($address1, $address2) {\r\n        $allowed_keys = array('line1','line2','town','postcode','state_id','state','state_abbrev','country','country_id','country_iso','country_name');\r\n        $address1_filtered = array();\r\n        foreach($address1 as $key => $value) {\r\n            if(in_array($key, $allowed_keys)) $address1_filtered[$key] = strtolower($value);\r\n        }\r\n        $address2_filtered = array();\r\n        foreach($address2 as $key => $value) {\r\n            if(in_array($key, $allowed_keys)) $address2_filtered[$key] = strtolower($value);\r\n        }\r\n        return md5(serialize($address1_filtered).serialize($address2_filtered));\r\n    }\r\n\r\n    /**\r\n     * Change a user password\r\n     *\r\n     * @return bool\r\n     */\r\n    public function changePassword()\r\n    {\r\n        //If everything lines up\r\n        if (Password::getInstance()->getSalted($_POST['passold'], $this->_user_data['salt']) == $this->_user_data['password'] && $_POST['passnew'] === $_POST['passconf']) {\r\n            //Change it\r\n            $record = array('password' => Password::getInstance()->getSalted($_POST['passnew'], $this->_user_data['salt']));\r\n            if ($GLOBALS['db']->update('CubeCart_customer', $record, array('customer_id' => (int)$this->_user_data['customer_id']), true)) {\r\n                $this->_user_data['password'] = $record['password'];\r\n                return true;\r\n            } else {\r\n                $GLOBALS['gui']->setError($GLOBALS['language']->account['error_password_update']);\r\n            }\r\n        } else {\r\n            $GLOBALS['gui']->setError($GLOBALS['language']->account['error_password_update_mismatch']);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Manually create a user\r\n     *\r\n     * @param array $data\r\n     * @param bool $login\r\n     * @param int $type\r\n     * @return customer_id/false\r\n     */\r\n    public function createUser($data, $login = false, $type = 1)\r\n    {\r\n        if (!empty($data)) {\r\n            // Insert record(s)\r\n            $data['new_password'] = '0';\r\n            $data['ip_address']  = get_ip_address();\r\n\r\n            $data = array_map('trim', $data);\r\n\r\n            foreach ($data as $key => $value) {\r\n                $data[$key] = filter_var($value, FILTER_SANITIZE_STRING);\r\n            }\r\n\r\n            if ($existing = $GLOBALS['db']->select('CubeCart_customer', 'customer_id', array('email' => $data['email']), false, 1, false, false)) {\r\n                $GLOBALS['db']->update('CubeCart_customer', $data, array('email' => $data['email']));\r\n                $customer_id = $existing[0]['customer_id'];\r\n            } else {\r\n                $data['registered']  = time();\r\n                $data['type']    = $type;\r\n                $data['language']    = $GLOBALS['language']->current();\r\n\r\n                $customer_id = $this->_validCustomerId();\r\n                if ($customer_id) {\r\n                    $data['customer_id']  = $customer_id;\r\n                }\r\n                $customer_id = $GLOBALS['db']->insert('CubeCart_customer', $data);\r\n                if($type==2) $this->setGhostId($customer_id);\r\n            }\r\n            if ($login) {\r\n                // Automatically log 'em in\r\n                $this->authenticate($data['email'], $data['password']);\r\n            }\r\n            return $customer_id;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Delete an address from the address book\r\n     *\r\n     * @param array/address_id $delete\r\n     * @return bool\r\n     */\r\n    public function deleteAddress($delete)\r\n    {\r\n        if ($this->is()) {\r\n            $where['customer_id'] = $this->_user_data['customer_id'];\r\n            if (is_array($delete)) {\r\n                foreach ($delete as $address) {\r\n                    $where['address_id'] = $address;\r\n                    $GLOBALS['db']->delete('CubeCart_addressbook', $where);\r\n                    $this->_deleteBasketAddress($address);\r\n                }\r\n            } else {\r\n                $where['address_id'] = $delete;\r\n                $GLOBALS['db']->delete('CubeCart_addressbook', $where);\r\n                $this->_deleteBasketAddress($address);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Format address array\r\n     *\r\n     * @param array\r\n     * @return array\r\n     */\r\n    public function formatAddress($address = array(), $user_defined = true, $estimate = false)\r\n    {\r\n        if (!$user_defined && !is_array($address)) {\r\n            if ($GLOBALS['config']->get('config', 'disable_estimates')=='1') {\r\n                $address = array(\r\n                    'postcode' => '',\r\n                    'country' => '',\r\n                    'state' => ''\r\n                );\r\n            } else {\r\n                $address = array(\r\n                    'postcode' => $GLOBALS['config']->get('config', 'store_postcode'),\r\n                    'country' => $GLOBALS['config']->get('config', 'store_country'),\r\n                    'state' => $GLOBALS['config']->get('config', 'store_zone')\r\n                );\r\n            }\r\n        }\r\n\r\n        $state_field = is_numeric($address['state']) ? 'id' : 'name';\r\n\r\n        // Check state\r\n        $country_id = getCountryFormat($address['country'], 'numcode', 'id');\r\n        // Is state required for this country?!\r\n        if ($GLOBALS['db']->select('CubeCart_geo_country', false, array('id' => $country_id, 'status' => 1))) {\r\n            if ($user_defined && !CC_IN_ADMIN && $_GET['_a']!=='addressbook' && ((empty($address['state']) && !empty($address['country'])) || ($GLOBALS['db']->select('CubeCart_geo_zone', false, array($state_field => $address['state'], 'status' => 1))==false) && $GLOBALS['db']->select('CubeCart_geo_zone', false, array('country_id' => $country_id, 'status' => 1)))) {\r\n                $address_description = empty($address['description']) ? '' : ' (&quot;'.$address['description'].'&quot;)';\r\n                $GLOBALS['gui']->setError(sprintf($GLOBALS['language']->address['check_state'], $address_description));\r\n                httpredir(\"?_a=addressbook&action=edit&address_id=\".$address['address_id']);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        $address['state_id']  = getStateFormat($address['state'], $state_field, 'id');\r\n        $address['country_id']  = $address['country'];\r\n        $address['country']   = getCountryFormat($address['country_id']);\r\n        $address['state_abbrev'] = getStateFormat($address['state'], $state_field, 'abbrev');\r\n        $address['country_iso']  = getCountryFormat($address['country_id'], 'numcode', 'iso');\r\n        $address['country_iso3'] = getCountryFormat($address['country_id'], 'numcode', 'iso3');\r\n        $address['state']   = getStateFormat($address['state_id']);\r\n        $address['user_defined'] = $user_defined;\r\n        $address['estimate'] = $estimate;\r\n        return $address;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get an element or all the user data\r\n     *\r\n     * @param string $field\r\n     * @return string/false\r\n     */\r\n    public function get($field = '')\r\n    {\r\n        if (!$this->is()) {\r\n            return false;\r\n        }\r\n\r\n        //If there is a field\r\n        if (!empty($field)) {\r\n            //Send just that field\r\n            return (isset($this->_user_data[$field])) ? $this->_user_data[$field] : false;\r\n        } else {\r\n            //Send all the user data\r\n            return $this->_user_data;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert John Smith <john.smith@example.org> to array of parts\r\n     *\r\n     * @param string $input\r\n     * @return false/array\r\n     */\r\n    public static function getEmailAddressParts($input)\r\n    {\r\n        if (filter_var($input, FILTER_VALIDATE_EMAIL)) {\r\n            $email = $input;\r\n            $name = $input;\r\n        } else {\r\n            preg_match('#\\<(.*?)\\>#', $input, $match);\r\n            if(filter_var($match[1], FILTER_VALIDATE_EMAIL)) {\r\n                $email = $match[1];\r\n                $name = trim(strip_tags($input));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return array('name' => $name, 'email' => $email);\r\n    }\r\n\r\n    /**\r\n     * Get address information\r\n     *\r\n     * @param int $address_id\r\n     * @return array/false\r\n     */\r\n    public function getAddress($address_id, $format = false)\r\n    {\r\n        if ($this->is()) {\r\n            if (($raw_address = $GLOBALS['db']->select('CubeCart_addressbook', false, array('customer_id' => $this->_user_data['customer_id'], 'address_id' => $address_id), false, false, false, false)) !== false) {\r\n                if ($format) {\r\n                    return $this->formatAddress($raw_address[0]);\r\n                } else {\r\n                    return $raw_address[0];\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get all addresses\r\n     *\r\n     * @param bool $show_all\r\n     * @return array/false\r\n     */\r\n    public function getAddresses($show_all = true)\r\n    {\r\n        if ($this->is()) {\r\n            $where['customer_id'] = $this->_user_data['customer_id'];\r\n            if (!$show_all) {\r\n                $where['billing'] = '1';\r\n            }\r\n            if (($addresses = $GLOBALS['db']->select('CubeCart_addressbook', false, $where, 'billing DESC', false, false, false)) !== false) {\r\n                foreach ($addresses as $address) {\r\n                    $addressArray[] = $this->formatAddress($address);\r\n                }\r\n                return $addressArray;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get the default shipping address\r\n     * @return array/false\r\n     */\r\n    public function getDefaultAddress()\r\n    {\r\n        if ($this->is()) {\r\n            $where['customer_id'] = $this->_user_data['customer_id'];\r\n            \r\n            if ($GLOBALS['config']->get('config', 'basket_allow_non_invoice_address')) {\r\n                $where['default'] = '1';\r\n            } else {\r\n                $where['billing'] = '1';\r\n            }\r\n            \r\n            if (($addresses = $GLOBALS['db']->select('CubeCart_addressbook', false, $where, 'billing DESC', false, false, false)) !== false) {\r\n                foreach ($addresses as $address) {\r\n                    $addressArray[] = $this->formatAddress($address);\r\n                }\r\n                return $addressArray;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get customer id for unregistered customers\r\n     *\r\n     * @return integer/bool\r\n     */\r\n    public function getGhostId()\r\n    {\r\n        return $GLOBALS['session']->get('ghost_customer_id');\r\n    }\r\n\r\n    /**\r\n     * Get customer_id\r\n     * @return customer_id/0\r\n     */\r\n    public function getId()\r\n    {\r\n        if (!$this->is()) {\r\n            return 0;\r\n        } else {\r\n            return $this->_user_data['customer_id'];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get customer group memberships\r\n     * @param int $customer_id\r\n     * @return false/array\r\n     */\r\n    public function getMemberships($customer_id = null)\r\n    {\r\n        if($customer_id === 0) return false;\r\n\r\n        if (is_null($customer_id)) {\r\n            $customer_id = $this->getId();\r\n        }\r\n        \r\n        if (ctype_digit((string)$customer_id)) {\r\n            return $GLOBALS['db']->select('CubeCart_customer_membership', false, array('customer_id' => $customer_id));\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get required fields for state\r\n     * @param int $country_id\r\n     * @return array\r\n     */\r\n    public function getRequiredAddressFields($country_id)\r\n    {\r\n        $fields = array('first_name','last_name','line1','town','country','postcode');\r\n        if (ctype_digit($country_id)) {\r\n            $result = $GLOBALS['db']->select('CubeCart_geo_country', 'status', array('numcode' => $country_id));\r\n            if ($result && $result[0]['status']=='1') {\r\n                array_push($fields, 'state');\r\n            }\r\n        }\r\n        return $fields;\r\n    }\r\n\r\n    /**\r\n     * Is a customer\r\n     *\r\n     * @param bool $force_login\r\n     * @return bool\r\n     */\r\n    public function is($force_login = false)\r\n    {\r\n        if (!$force_login) {\r\n            return $this->_logged_in;\r\n        } else {\r\n            if (!$this->_logged_in) {\r\n                httpredir('?_a=login');\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is the user a bot?\r\n     *\r\n     * @return bool\r\n     */\r\n    public function isBot()\r\n    {\r\n        if (is_null($this->_bot)) {\r\n            $this->_bot = false;\r\n            $agent = strtolower($_SERVER['HTTP_USER_AGENT']);\r\n            foreach ($this->_bot_sigs as $signature) {\r\n                if (strpos($agent, $signature) !== false) {\r\n                    $this->_bot = true;\r\n                }\r\n            }\r\n        }\r\n        return $this->_bot;\r\n    }\r\n\r\n    /**\r\n     * Logout\r\n     */\r\n    public function logout()\r\n    {\r\n        foreach ($GLOBALS['hooks']->load('class.user.logout') as $hook) {\r\n            include $hook;\r\n        }\r\n\r\n        if (isset($_COOKIE['username'])) {\r\n            //\u00a0Unset the 'Remember Me' cookies\r\n            $GLOBALS['session']->set_cookie('username', '', time()-3600);\r\n        }\r\n        //Destory the session\r\n        $GLOBALS['session']->destroy();\r\n        // Redirect to login\r\n        httpredir(currentPage(null, array('_a' => 'login')));\r\n    }\r\n\r\n    /**\r\n     * Request password\r\n     *\r\n     * @param string $email\r\n     * @return bool\r\n     */\r\n    public function passwordRequest($email)\r\n    {\r\n        if (!empty($email) && filter_var($email, FILTER_VALIDATE_EMAIL)) {\r\n            if (($check = $GLOBALS['db']->select('CubeCart_customer', false, \"`email` = '$email' AND `type` = 1\", false, 1, false, false)) !== false) {\r\n                //\u00a0Generate validation key\r\n                $validation = Password::getInstance()->createSalt();\r\n                if (($GLOBALS['db']->update('CubeCart_customer', array('verify' => $validation), array('customer_id' => (int)$check[0]['customer_id']))) !== false) {\r\n                    // Send email\r\n                    if (($user = $GLOBALS['db']->select('CubeCart_customer', false, array('customer_id' => (int)$check[0]['customer_id']), false, 1, false, false)) !== false) {\r\n                        $mailer = new Mailer();\r\n                        $link['reset_link'] = CC_STORE_URL.'/index.php?_a=recovery&validate='.$validation;\r\n                        $data = array_merge($user[0], $link);\r\n                        $content = $mailer->loadContent('account.password_recovery', $GLOBALS['language']->current(), $data);\r\n                        $mailer->sendEmail($user[0]['email'], $content);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Reset password\r\n     *\r\n     * @param email $email\r\n     * @param string $verification\r\n     * @param string $password\r\n     */\r\n    public function passwordReset($email, $verification, $password)\r\n    {\r\n        if (filter_var($email, FILTER_VALIDATE_EMAIL) && !empty($verification) && !empty($password['password']) && !empty($password['passconf']) && ($password['password'] === $password['passconf'])) {\r\n            if (($check = $GLOBALS['db']->select('CubeCart_customer', array('customer_id', 'email'), \"`email` = '$email' AND `verify` = '$verification'\", false, 1, false, false)) !== false) {\r\n                // Remove any blocks\r\n                $GLOBALS['db']->delete('CubeCart_blocker', array('username' => $email));\r\n\r\n                $salt = Password::getInstance()->createSalt();\r\n\r\n                $record = array(\r\n                    'salt'   => $salt,\r\n                    'password'  => Password::getInstance()->getSalted((string)$password['password'], $salt),\r\n                    'verify'  => null,\r\n                    'new_password' => 1\r\n                );\r\n                $where = array(\r\n                    'customer_id' => $check[0]['customer_id'],\r\n                    'email'   => $email,\r\n                    'verify'  => $verification,\r\n                );\r\n                if ($GLOBALS['db']->update('CubeCart_customer', $record, $where)) {\r\n                    if ($this->authenticate($check[0]['email'], (string)$password['password'], false, false, false, false)) {\r\n                        $GLOBALS['gui']->setNotify(($GLOBALS['language']->account['notify_password_recovery_success']));\r\n                        httpredir('?_a=profile');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        $GLOBALS['gui']->setError($GLOBALS['language']->account['error_password_recover']);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Register a new user\r\n     *\r\n     * @return bool\r\n     */\r\n    public function registerUser()\r\n    {\r\n        // Validation\r\n        $error = false;\r\n        foreach ($GLOBALS['hooks']->load('class.user.register_user') as $hook) {\r\n            include $hook;\r\n        }\r\n\r\n        //Validate email\r\n        if (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {\r\n            $GLOBALS['gui']->setError($GLOBALS['language']->common['error_email_invalid']);\r\n            $error['email'] = true;\r\n        } else {\r\n            // check for duplicates\r\n            if ($existing = $GLOBALS['db']->select('CubeCart_customer', array('email', 'type', 'customer_id'), array('email' => strtolower($_POST['email'])))) {\r\n                if ($existing[0]['type']==1) {\r\n                    $GLOBALS['gui']->setError($GLOBALS['language']->account['error_email_in_use']);\r\n                    $error['dupe'] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!empty($_POST['password'])) {\r\n            if ($_POST['password'] !== $_POST['passconf']) {\r\n                $GLOBALS['gui']->setError($GLOBALS['language']->account['error_password_mismatch']);\r\n                $error['pass'] = true;\r\n            }\r\n        } else {\r\n            $GLOBALS['gui']->setError($GLOBALS['language']->account['error_password_empty']);\r\n            $error['nopass'] = true;\r\n        }\r\n\r\n        if (empty($_POST['first_name']) || empty($_POST['last_name'])) {\r\n            $GLOBALS['gui']->setError($GLOBALS['language']->account['error_name_required']);\r\n            $error['name'] = true;\r\n        }\r\n\r\n        if ($GLOBALS['gui']->recaptchaRequired()) {\r\n            if (($message = $GLOBALS['session']->get('error', 'recaptcha')) === false) {\r\n                //If the error message from recaptcha fails for some reason:\r\n                $GLOBALS['gui']->setError($GLOBALS['language']->form['verify_human_fail']);\r\n            } else {\r\n                $GLOBALS['gui']->setError($GLOBALS['session']->get('error', 'recaptcha'));\r\n            }\r\n            $error['recaptcha'] = true;\r\n        }\r\n        \r\n        if ($terms = $GLOBALS['db']->select('CubeCart_documents', false, array('doc_terms' => '1'))) {\r\n            if (isset($_POST['terms_agree']) !== true && !$GLOBALS['config']->get('config', 'disable_checkout_terms')) {\r\n                $GLOBALS['gui']->setError($GLOBALS['language']->account['error_terms_agree']);\r\n                $error['terms'] = true;\r\n            }\r\n        }\r\n\r\n        if (!$error) {\r\n            // Format data nicely from mr barney brimstock to Mr Barney Brimstock\r\n            $_POST['title']   = ucwords($_POST['title']);\r\n            $_POST['first_name']  = ucwords($_POST['first_name']);\r\n            $_POST['last_name']  = ucwords($_POST['last_name']);\r\n\r\n            // Register the user\r\n            $_POST['salt']  = Password::getInstance()->createSalt();\r\n            $_POST['password'] = Password::getInstance()->getSalted($_POST['password'], $_POST['salt']);\r\n            $_POST['registered']= time();\r\n            if (($_POST['ip_address'] = get_ip_address()) === false) {\r\n                $_POST['ip_address'] = 'Unknown';\r\n            } // Get IP Address\r\n\r\n            foreach ($GLOBALS['hooks']->load('class.user.register_user.insert') as $hook) {\r\n                include $hook;\r\n            }\r\n            \r\n            foreach ($_POST as $key => $value) {\r\n                $_POST[$key] = filter_var($value, FILTER_SANITIZE_STRING);\r\n            }\r\n\r\n            $_POST['language'] = $GLOBALS['language']->current();\r\n            \r\n            if ($existing[0]['type']==2) {\r\n                $_POST['type'] = 1;\r\n                $_POST['new_password'] = 1;\r\n                $GLOBALS['db']->update('CubeCart_customer', $_POST, array('email' => strtolower($_POST['email'])));\r\n                $insert = $existing[0]['customer_id'];\r\n            } else {\r\n                $insert = $GLOBALS['db']->insert('CubeCart_customer', $_POST);\r\n            }\r\n\r\n            foreach ($GLOBALS['hooks']->load('class.user.register_user.inserted') as $hook) {\r\n                include $hook;\r\n            }\r\n\r\n            if (isset($_POST['mailing_list'])) {\r\n                $newsletter = Newsletter::getInstance();\r\n                $newsletter->subscribe($_POST['email'], $insert);\r\n            }\r\n\r\n            $this->authenticate($_POST['email'], $_POST['passconf']);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Save address to the addressbook\r\n     *\r\n     * @param array $array\r\n     * @param bool $new_user\r\n     * @return bool\r\n     */\r\n    public function saveAddress($array, $new_user = false)\r\n    {\r\n        $array = array_map('trim', $array);\r\n\r\n        if ($this->is() || $new_user) {\r\n            if ($array['billing']) {\r\n                $reset['billing'] = '0';\r\n            } else {\r\n                $array['billing'] = '0';\r\n            }\r\n            if ($array['default']) {\r\n                $reset['default'] = '0';\r\n            } else {\r\n                $array['default'] = '0';\r\n            }\r\n            $user_id = ($new_user) ? $new_user : $this->_user_data['customer_id'];\r\n\r\n            foreach ($GLOBALS['hooks']->load('class.user.saveaddress') as $hook) {\r\n                include $hook;\r\n            }\r\n\r\n            if (isset($reset)) {\r\n                // \"There can only be one\"\r\n                $GLOBALS['db']->update('CubeCart_addressbook', $reset, array('customer_id' => $user_id), true);\r\n            }\r\n\r\n            // Format data nicely from mr barney brimstock to Mr Barney Brimstock & Post/Zip code to uppercase\r\n            $array['title'] = ucwords($array['title']);\r\n            $array['first_name'] = ucwords($array['first_name']);\r\n            $array['last_name'] = ucwords($array['last_name']);\r\n            $array['postcode'] = strtoupper($array['postcode']); // e.g. ab12 34cd to  AB12 34CD\r\n            if (!isset($array['state'])) {\r\n                $array['state'] = '';\r\n            }\r\n\r\n            $hash_values = '';\r\n            $checked_keys = array('billing', 'title', 'first_name', 'last_name', 'company_name', 'line1', 'line2', 'town', 'state', 'postcode', 'country');\r\n            foreach ($array as $key => $value) {\r\n                if (in_array($key, $checked_keys)) {\r\n                    $hash_values .= $value;\r\n                }\r\n            }\r\n\r\n            $array['hash'] = md5($hash_values);\r\n\r\n            if ($result = $GLOBALS['db']->select('CubeCart_addressbook', array('address_id'), array('hash' => $array['hash'], 'customer_id' => $user_id), false, 1, false, false)) {\r\n                $array['address_id'] = $result[0]['address_id'];\r\n            }\r\n\r\n            if (isset($array['address_id']) && is_numeric($array['address_id'])) {\r\n                // Update\r\n                $result = $GLOBALS['db']->update('CubeCart_addressbook', $array, array('address_id' => $array['address_id'], 'customer_id' => $user_id), true);\r\n                $this->_updateBasketAddress($array['address_id']);\r\n                return $result;\r\n            } else {\r\n                // Insert\r\n                $array['customer_id'] = $user_id;\r\n                return $GLOBALS['db']->insert('CubeCart_addressbook', $array);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set customer id for unregistered customers\r\n     *\r\n     * @param int $customer_id\r\n     * @return bool\r\n     */\r\n    public function setGhostId($customer_id = '')\r\n    {\r\n        return $GLOBALS['session']->set('ghost_customer_id', $customer_id);\r\n    }\r\n\r\n    /**\r\n     * Update customer data\r\n     *\r\n     * @param array $update\r\n     * @return bool\r\n     */\r\n    public function update($update = null)\r\n    {\r\n        if (!empty($update) && is_array($update)) {\r\n            unset($update['customer_id']);\r\n            foreach ($update as $k => $v) {\r\n                if (isset($this->_user_data[$k]) && $this->_user_data[$k] != $v) {\r\n                    $this->_user_data[$k] = $v;\r\n                    $this->_changed = true;\r\n                }\r\n            }\r\n            if ($this->_changed) {\r\n                return $this->_update();\r\n            }\r\n        } elseif (isset($_POST['update'])) {\r\n            $remove = array_diff_key($_POST, $this->_user_data);\r\n            $update = $_POST;\r\n            //Remove different keys\r\n            foreach ($remove as $k => $v) {\r\n                unset($update[$k]);\r\n            }\r\n            //Remove things that shouldn't be updated by post\r\n            unset($update['salt']);\r\n            unset($update['customer_id']);\r\n            unset($update['status']);\r\n            unset($update['type']);\r\n\r\n            //Check of any acutal changes\r\n            $diff = arrayRecursiveDiff($update, $this->_user_data);\r\n            if (!empty($diff)) {\r\n                $this->_user_data = array_merge($this->_user_data, $update);\r\n                $this->_changed = true;\r\n                return $this->_update();\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public function load()\r\n    {\r\n        $this->_load();\r\n    }\r\n\r\n    //=====[ Private ]=======================================\r\n\r\n    /**\r\n     * Delete address from basket\r\n     *\r\n     * @param int $id\r\n     * @return bool\r\n     */\r\n    private function _deleteBasketAddress($id)\r\n    {\r\n        $match = false;\r\n        if (isset($GLOBALS['cart']->basket['delivery_address']['address_id']) && $GLOBALS['cart']->basket['delivery_address']['address_id']==$id) {\r\n            unset($GLOBALS['cart']->basket['delivery_address']);\r\n            $GLOBALS['cart']->save();\r\n            $match = true;\r\n        }\r\n        if (isset($GLOBALS['cart']->basket['billing_address']['address_id']) && $GLOBALS['cart']->basket['billing_address']['address_id']==$id) {\r\n            unset($GLOBALS['cart']->basket['billing_address']);\r\n            $GLOBALS['cart']->save();\r\n            $match = true;\r\n        }\r\n        return $match;\r\n    }\r\n\r\n    /**\r\n     * Load customer data\r\n     */\r\n    private function _load()\r\n    {\r\n        foreach ($GLOBALS['hooks']->load('class.user.load') as $hook) {\r\n            include $hook;\r\n        }\r\n\r\n        if (!isset($GLOBALS['session']->session_data['customer_id']) || $GLOBALS['session']->session_data['customer_id'] == '0') {\r\n            return;\r\n        }\r\n        if ($GLOBALS['session']->session_data['customer_id'] && $result = $GLOBALS['db']->select('CubeCart_customer', false, array('customer_id' => (int)$GLOBALS['session']->session_data['customer_id']), false, 1, false, false)) {\r\n            $result[0]['language'] = $this->_validLanguage($result[0]['language']);\r\n            $this->_user_data = $result[0];\r\n            foreach ($GLOBALS['hooks']->load('class.user.load.user') as $hook) {\r\n                include $hook;\r\n            }\r\n            $this->_logged_in = true;\r\n            if (!$GLOBALS['session']->has('user_language', 'client')) {\r\n                $GLOBALS['session']->set('user_language', $result[0]['language'], 'client');\r\n            }\r\n            if ((empty($this->_user_data['email']) || !filter_var($this->_user_data['email'], FILTER_VALIDATE_EMAIL) || empty($this->_user_data['first_name']) || empty($this->_user_data['last_name'])) && !in_array(strtolower($_GET['_a']), array('profile', 'logout'))) {\r\n                // Force account details page\r\n                $GLOBALS['session']->set('temp_profile_required', true);\r\n                httpredir(currentPage(null, array('_a' => 'profile')));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update db\r\n     */\r\n    private function _update()\r\n    {\r\n        return Database::getInstance()->update('CubeCart_customer', $this->_user_data, array('customer_id' => $this->_user_data['customer_id']), true);\r\n    }\r\n\r\n    /**\r\n     * Update address from basket\r\n     *\r\n     * @param int $id\r\n     * @return bool\r\n     */\r\n    private function _updateBasketAddress($id)\r\n    {\r\n        $match = false;\r\n\r\n        $updated_address = $this->getAddress($id, true);\r\n\r\n        if (isset($GLOBALS['cart']->basket['delivery_address']['address_id']) && $GLOBALS['cart']->basket['delivery_address']['address_id']==$id) {\r\n            $GLOBALS['cart']->basket['delivery_address'] = array_merge($GLOBALS['cart']->basket['delivery_address'], $updated_address);\r\n            $GLOBALS['cart']->save();\r\n            $match = true;\r\n        }\r\n        if (isset($GLOBALS['cart']->basket['billing_address']['address_id']) && $GLOBALS['cart']->basket['billing_address']['address_id']==$id) {\r\n            $GLOBALS['cart']->basket['billing_address'] = array_merge($GLOBALS['cart']->basket['billing_address'], $updated_address);\r\n            $GLOBALS['cart']->save();\r\n            $match = true;\r\n        }\r\n        return $match;\r\n    }\r\n    /**\r\n     * New Customer ID must not be less than max order summary customer ID\r\n     *\r\n     * @return false/int\r\n     */\r\n    private function _validCustomerId()\r\n    {\r\n        return false;\r\n        /* Kept for hiistorical purposes\r\n        $customers = $GLOBALS['db']->misc(\"SHOW TABLE STATUS LIKE '\".$GLOBALS['config']->get('config', 'dbprefix').\"CubeCart_customer'\", false);\r\n        \r\n        $orders = $GLOBALS['db']->misc(\"SELECT MAX(`customer_id`) as `max_id` FROM `\".$GLOBALS['config']->get('config', 'dbprefix').\"CubeCart_order_summary`\", false);\r\n        \r\n        // Do we have any orders yet and is the max customer_id > 0?\r\n        if ($orders && $orders[0]['max_id'] > 0) {\r\n            // Do we have any customers yet and is the auto increment > 0?\r\n            if ($customers && $customers[0]['Auto_increment'] > 0) {\r\n                // Are there existing customers orders with higher customer id than next customer id?\r\n                if ($orders[0]['max_id'] >= $customers[0]['Auto_increment']) {\r\n                    // Finally be sure proposed ID isn't in use\r\n                    $id = $orders[0]['max_id']+1;\r\n                    if($GLOBALS['db']->select('CubeCart_customer', false, array('customer_id' => $id), false, 1, false, false) == false) {\r\n                        return $id;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Validate users language string\r\n     *\r\n     * @return string\r\n     */\r\n    private function _validLanguage($language)\r\n    {\r\n        $default_language = $GLOBALS['config']->get('config', 'default_language');\r\n        if (!preg_match(Language::LANG_REGEX, $language)) {\r\n            return $default_language;\r\n        } elseif ($language!==$default_language) {\r\n            if ($enabled_languages = $GLOBALS['config']->get('languages')) {\r\n                if (!isset($enabled_languages[$language])) {\r\n                    return $default_language;\r\n                } elseif ($enabled_languages[$language]=='0') {\r\n                    return $default_language;\r\n                }\r\n            } else {\r\n                return $default_language;\r\n            }\r\n        }\r\n        return $language;\r\n    }\r\n}\r\n"], "fixing_code": ["<?php\r\n/**\r\n * CubeCart v6\r\n * ========================================\r\n * CubeCart is a registered trade mark of CubeCart Limited\r\n * Copyright CubeCart Limited 2017. All rights reserved.\r\n * UK Private Limited Company No. 5323904\r\n * ========================================\r\n * Web:   http://www.cubecart.com\r\n * Email:  sales@cubecart.com\r\n * License:  GPL-3.0 https://www.gnu.org/licenses/quick-guide-gplv3.html\r\n */\r\n\r\n/**\r\n * Admin controller\r\n *\r\n * @author Technocrat\r\n * @author Al Brookbanks\r\n * @since 5.0.0\r\n */\r\nclass Admin\r\n{\r\n    /**\r\n     * Admin's data\r\n     *\r\n     * @var array\r\n     */\r\n    private $_admin_data = array();\r\n    /**\r\n     * Logged in?\r\n     *\r\n     * @var bool\r\n     */\r\n    private $_logged_in  = false;\r\n    /**\r\n     * Permission array\r\n     *\r\n     * @var array\r\n     */\r\n    private $_permissions = array();\r\n    /**\r\n     * Permissions sections\r\n     *\r\n     * @var array\r\n     */\r\n    private $_sections  = array();\r\n    /**\r\n     * Length of validation key\r\n     *\r\n     * @var int\r\n     */\r\n    private $_validate_key_len  = 32;\r\n\r\n    /**\r\n     * Class instance\r\n     *\r\n     * @var instance\r\n     */\r\n    protected static $_instance;\r\n\r\n    ##############################################\r\n\r\n    final private function __construct()\r\n    {\r\n\r\n        // Logout requests\r\n        if (isset($_GET['_g']) && $_GET['_g'] == 'logout') {\r\n            $this->logout($_GET['r']);\r\n        }\r\n\r\n        // Ensure the ACP is only ever using the default currency\r\n        if (ADMIN_CP==true) {\r\n            $GLOBALS['session']->set('currency', $GLOBALS['config']->get('config', 'default_currency'), 'client');\r\n        }\r\n\r\n        // Action Auto-Handlers\r\n        if (isset($_POST['username']) && isset($_POST['password']) && !empty($_POST['username']) && !empty($_POST['password'])) {\r\n            // Login requests\r\n            $this->_authenticate($_POST['username'], $_POST['password']);\r\n        }\r\n        // Load admin data\r\n        $this->_load();\r\n    }\r\n\r\n    /**\r\n     * Setup the instance (singleton)\r\n     *\r\n     * @return Admin\r\n     */\r\n    public static function getInstance()\r\n    {\r\n        if (!(self::$_instance instanceof self)) {\r\n            self::$_instance = new self();\r\n        }\r\n\r\n        return self::$_instance;\r\n    }\r\n\r\n    //=====[ Public ]=======================================\r\n\r\n    /**\r\n     * Get admin data element or the entire array if element is empty\r\n     *\r\n     * @param string $element\r\n     * @return mixed\r\n     */\r\n    public function get($element)\r\n    {\r\n        if (!empty($element)) {\r\n            return isset($this->_admin_data[$element]) ? $this->_admin_data[$element] : false;\r\n        } else {\r\n            return $this->_admin_data;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the admin id\r\n     *\r\n     * @return int\r\n     */\r\n    public function getId()\r\n    {\r\n        return isset($this->_admin_data['admin_id']) ? $this->_admin_data['admin_id'] : 0;\r\n    }\r\n\r\n    /**\r\n     * Is admin user\r\n     *\r\n     * @param bool $force_login\r\n     * @return bool\r\n     */\r\n    public function is($force_login = false)\r\n    {\r\n        if (!$force_login) {\r\n            return $this->_logged_in;\r\n        } else {\r\n            if (!$this->_logged_in) {\r\n                httpredir('?_a=login');\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logout of admin\r\n     */\r\n    public function logout($redirect = '')\r\n    {\r\n        $this->_load();\r\n        $GLOBALS['db']->update('CubeCart_admin_users', array('session_id' => ''), array('admin_id' => (int)$this->_admin_data['admin_id']));\r\n        $GLOBALS['session']->destroy();\r\n        if ($redirect=='front') {\r\n            httpredir($GLOBALS['rootRel']);\r\n        } else {\r\n            httpredir($GLOBALS['rootRel'] . $GLOBALS['config']->get('config', 'adminFile'));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset password\r\n     *\r\n     * @param string $email\r\n     * @param string $validation\r\n     * @param string $password\r\n     * @return bool\r\n     */\r\n    public function passwordReset($email, $validation, $password)\r\n    {\r\n        if ($GLOBALS['session']->has('recover_login') && filter_var($email, FILTER_VALIDATE_EMAIL) && strlen($validation) == $this->_validate_key_len && !empty($password['new']) && !empty($password['confirm']) && ($password['new'] === $password['confirm'])) {\r\n            if (($check = $GLOBALS['db']->select('CubeCart_admin_users', array('admin_id', 'username'), \"`email` = '$email' AND `verify` = '$validation' AND `status` = 1\")) !== false) {\r\n\r\n                // Remove any blocks\r\n                $GLOBALS['db']->delete('CubeCart_blocker', array('username' => $email));\r\n                \r\n                $salt = Password::getInstance()->createSalt();\r\n                $record = array(\r\n                    'salt'  => $salt,\r\n                    'password' => Password::getInstance()->getSalted($password['new'], $salt),\r\n                    'verify' => null,\r\n                    'new_password' => 1\r\n                );\r\n                $where = array(\r\n                    'admin_id' => $check[0]['admin_id'],\r\n                    'email'  => $email,\r\n                    'verify' => $validation,\r\n                );\r\n\r\n                $GLOBALS['session']->delete('recover_login');\r\n\r\n                if ($GLOBALS['db']->update('CubeCart_admin_users', $record, $where)) {\r\n                    return $this->_authenticate($check[0]['username'], $password['new']);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Request password\r\n     *\r\n     * @param string $username\r\n     * @param string $email\r\n     * @return bool\r\n     */\r\n    public function passwordRequest($username, $email)\r\n    {\r\n        if (!empty($username) && !empty($email) && filter_var($email, FILTER_VALIDATE_EMAIL)) {\r\n            if (($check = $GLOBALS['db']->select('CubeCart_admin_users', array('admin_id', 'email', 'language', 'name'), \"`username` = '$username' AND `email` = '$email' AND `status` = 1\")) !== false) {\r\n                //\u00a0Generate validation key\r\n                $validation = randomString($this->_validate_key_len);\r\n                if ($GLOBALS['db']->update('CubeCart_admin_users', array('verify' => $validation), array('admin_id' => (int)$check[0]['admin_id']))) {\r\n                    // Send email\r\n                    $mailer = new Mailer();\r\n                    $data['link'] = $GLOBALS['storeURL'].'/'.$GLOBALS['config']->get('config', 'adminFile').'?_g=recovery&email='.$check[0]['email'].'&validate='.$validation;\r\n                    $data['name'] = $check[0]['name'];\r\n\r\n                    $content = $mailer->loadContent('admin.password_recovery', $check[0]['language'], $data);\r\n                    if ($content) {\r\n                        $GLOBALS['smarty']->assign('DATA', $data);\r\n                        $GLOBALS['session']->set('recover_login', true);\r\n                        return $mailer->sendEmail($check[0]['email'], $content);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Check admin permissions\r\n     *\r\n     * @param mixed $sections\r\n     * @param unknown_type $level\r\n     * @param unknown_type $halt\r\n     * @return bool\r\n     */\r\n    public function permissions($sections, $level = 4, $halt = false, $message = true)\r\n    {\r\n\r\n        // Are they a Superuser? If so, they get automatic authorization\r\n        if ($this->superUser()) {\r\n            return true;\r\n        }\r\n        // Lets update permissions to handle an array sections\r\n        if (is_array($sections)) {\r\n            foreach ($sections as $section) {\r\n                $departments[] = (!is_numeric($section)) ? $this->_getSectionId($section) : (int)$section;\r\n            }\r\n        } else {\r\n            // Get integers for section and permission level\r\n            $departments[] = (!is_numeric($sections)) ? $this->_getSectionId($sections) : (int)$sections;\r\n        }\r\n        $level = (!is_numeric($level)) ? $this->_convertPermission($level) : (int)$level;\r\n\r\n        if (is_array($departments)) {\r\n            foreach ($departments as $section_id) {\r\n                // Do they have permission to be here?\r\n                if (isset($this->_permissions[$section_id])) {\r\n                    //\u00a0Check Section specific permissions\r\n                    if ($this->_permissions[$section_id] & $level) {\r\n                        $allowed = true;\r\n                        continue;\r\n                    }\r\n                } elseif (isset($this->_permissions[0])) {\r\n                    // Check global permissions\r\n                    if ($this->_permissions[0] & $level) {\r\n                        $allowed = true;\r\n                        continue;\r\n                    }\r\n                }\r\n                $allowed = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Are they authorized?\r\n        if ($allowed) {\r\n            return true;\r\n        }\r\n        // Unauthorized - do we redirect, or just return false?\r\n        if ($message) {\r\n            $GLOBALS['main']->errorMessage($GLOBALS['language']->notification['error_privileges']);\r\n        }\r\n        if ($halt) {\r\n            httpredir($GLOBALS['rootRel'].$GLOBALS['config']->get('config', 'adminFile').\"?_g=401\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Is a super user\r\n     *\r\n     * @return bool\r\n     */\r\n    public function superUser()\r\n    {\r\n        return ($this->_admin_data['super_user']) ? true : false;\r\n    }\r\n\r\n    //=====[ Private ]=======================================\r\n\r\n    /**\r\n     * Authenticate user as admin\r\n     *\r\n     * @param string $username\r\n     * @param string $password\r\n     * @return bool\r\n     */\r\n    private function _authenticate($username, $password)\r\n    {\r\n        $username = (string)$username;\r\n        $password = (string)$password;\r\n        $hash_password = '';\r\n\r\n        if (!empty($username)) {\r\n            // Fetch salt\r\n            if (($user = $GLOBALS['db']->select('CubeCart_admin_users', array('admin_id', 'password', 'salt', 'new_password'), array('username' => $username, 'status' => '1'), null, 1)) !== false) {\r\n                if (empty($user[0]['salt'])) {\r\n                    // Generate Salt\r\n                    $salt = Password::getInstance()->createSalt();\r\n                    //Update it to the newer MD5 so we can fix it later\r\n                    $pass = Password::getInstance()->updateOld($user[0]['password'], $salt);\r\n                    $update = array(\r\n                        'salt'  => $salt,\r\n                        'password' => $pass,\r\n                        'new_password' => 0\r\n                    );\r\n                    if ($GLOBALS['db']->update('CubeCart_admin_users', $update, array('admin_id' => (int)$user[0]['admin_id']))) {\r\n                        $hash_password = $pass;\r\n                    }\r\n                } else {\r\n                    if ($user[0]['new_password'] == 1) {\r\n                        //Get the salted new password\r\n                        $hash_password = Password::getInstance()->getSalted($password, $user[0]['salt']);\r\n                    } else {\r\n                        //Get the salted old password\r\n                        $hash_password = Password::getInstance()->getSaltedOld($password, $user[0]['salt']);\r\n                    }\r\n                }\r\n            } else {\r\n                foreach ($GLOBALS['hooks']->load('admin.authenticate.failed_invalid_admin') as $hook) {\r\n                    include $hook;\r\n                }\r\n                $GLOBALS['gui']->setError($GLOBALS['language']->account['error_login']);\r\n                return false;\r\n            }\r\n            $result = $GLOBALS['db']->select('CubeCart_admin_users', array('admin_id', 'customer_id', 'logins', 'new_password'), array('username' => $username, 'password' => $hash_password, 'status' => '1'));\r\n            $GLOBALS['session']->blocker($username, 0, (bool)$result, Session::BLOCKER_BACKEND, $GLOBALS['config']->get('config', 'bfattempts'), $GLOBALS['config']->get('config', 'bftime'));\r\n            if ($result) {\r\n                if (!$GLOBALS['session']->blocked()) {\r\n                    $this->_logged_in = true;\r\n                    $GLOBALS['session']->regenerateSessionId();\r\n                    $update = array(\r\n                        'blockTime'  => 0,\r\n                        'browser'  => htmlspecialchars($_SERVER['HTTP_USER_AGENT']),\r\n                        'failLevel'  => 0,\r\n                        'session_id' => $GLOBALS['session']->getId(),\r\n                        'ip_address' => get_ip_address(),\r\n                        'verify'  => '',\r\n                        'lastTime'  => time(),\r\n                        'logins'  => $result[0]['logins'] +1,\r\n                    );\r\n                    if ($result[0]['new_password'] != 1) {\r\n                        $salt = Password::getInstance()->createSalt();\r\n                        $pass = Password::getInstance()->getSalted($password, $salt);\r\n                        $update = array_merge($update, array(\r\n                                'salt'   => $salt,\r\n                                'password'  => $pass,\r\n                                'new_password' => 1,\r\n                            ));\r\n                    }\r\n                    $GLOBALS['db']->update('CubeCart_admin_users', $update, array('admin_id' => $result[0]['admin_id']));\r\n                    $GLOBALS['session']->set('admin_id', $result[0]['admin_id'], 'client');\r\n                    $this->_load();\r\n                } else {\r\n                    foreach ($GLOBALS['hooks']->load('admin.authenticate.failed_valid_admin') as $hook) {\r\n                        include $hook;\r\n                    }\r\n                    $minutes_blocked = ceil(($GLOBALS['config']->get('config', 'bftime')/60));\r\n                    $GLOBALS['gui']->setError(sprintf('Too many invalid logins have been made. Access has been blocked for %s minutes.', $minutes_blocked));\r\n                }\r\n            } else {\r\n                if (!$GLOBALS['session']->blocked()) {\r\n                    if (($user = $GLOBALS['db']->select('CubeCart_admin_users', false, array('username' => $_POST['username']))) !== false) {\r\n                        if ($user[0]['blockTime']>0 && $user[0]['blockTime'] < time()) {\r\n                            // reset fail level and time\r\n                            $newdata['failLevel'] = 1;\r\n                            $newdata['blockTime'] = 0;\r\n                        } elseif ($user[0]['failLevel'] == ($GLOBALS['config']->get('config', 'bfattempts') - 1)) {\r\n                            $timeAgo = time() - $GLOBALS['config']->get('config', 'bftime');\r\n                            if ($user[0]['lastTime'] < $timeAgo) {\r\n                                $newdata['failLevel'] = 1;\r\n                                $newdata['blockTime'] = 0;\r\n                            } else {\r\n                                // block the account\r\n                                $newdata['failLevel'] = $GLOBALS['config']->get('config', 'bfattempts');\r\n                                $newdata['blockTime'] = time() + $GLOBALS['config']->get('config', 'bftime');\r\n                            }\r\n                        } elseif ($user[0]['blockTime'] < time()) {\r\n                            $timeAgo    = time() - $GLOBALS['config']->get('config', 'bftime');\r\n                            $newdata['failLevel'] = ($user[0]['lastTime']<$timeAgo) ? 1 : $user[0]['failLevel'] + 1;\r\n                            $newdata['blockTime'] = 0;\r\n                        } else {\r\n                            // Display Blocked message\r\n                            $GLOBALS['gui']->setError(sprintf($GLOBALS['language']->account['error_login_block'],($GLOBALS['config']->get('config', 'bftime') / 60)));\r\n                            $this->_blocked = true;\r\n                        }\r\n                        if (isset($newdata)) {\r\n                            $newdata['lastTime'] = time();\r\n                            $GLOBALS['db']->update('CubeCart_admin_users', $newdata, array('admin_id' => $user[0]['admin_id']));\r\n                        }\r\n                    }\r\n                    $GLOBALS['gui']->setError($GLOBALS['language']->account['error_login']);\r\n                } else {\r\n                    $minutes_blocked = ceil(($GLOBALS['config']->get('config', 'bftime')/60));\r\n                    $GLOBALS['gui']->setError(sprintf('Too many invalid logins have been made. Access has been blocked for %s minutes.', $minutes_blocked));\r\n                }\r\n                foreach ($GLOBALS['hooks']->load('admin.authenticate.failed_valid_admin') as $hook) {\r\n                    include $hook;\r\n                }\r\n            }\r\n            if (!$GLOBALS['session']->blocked()) {\r\n                $redir = '';\r\n                if (isset($_GET['redir']) && !empty($_GET['redir'])) {\r\n                    $redir = $_GET['redir'];\r\n                } elseif (isset($_POST['redir']) && !empty($_POST['redir'])) {\r\n                    $redir = $_POST['redir'];\r\n                } elseif ($GLOBALS['session']->has('redir')) {\r\n                    $redir = $GLOBALS['session']->get('redir');\r\n                } elseif ($GLOBALS['session']->has('back')) {\r\n                    $redir = $GLOBALS['session']->get('back');\r\n                }\r\n\r\n                if (!empty($redir)) {\r\n                    // Prevent phishing attacks, or anything untoward, unless it's redirecting back to this store\r\n                    if(!$GLOBALS['ssl']->validRedirect($redir)) {\r\n                        trigger_error(sprintf(\"Possible Phishing attack - Redirection to '%s' is not allowed. Please check the value of 'Store URL' in the SSL section of your store settings.\", $redir));\r\n                        $redir = '';\r\n                        if ($GLOBALS['session']->has('back') && $redir == $GLOBALS['session']->get('back')) {\r\n                            $GLOBALS['session']->delete('back');\r\n                        }\r\n                        if ($GLOBALS['session']->has('redir') && $redir == $GLOBALS['session']->get('redir')) {\r\n                            $GLOBALS['session']->delete('redir');\r\n                        }\r\n                    }\r\n                }\r\n\r\n                httpredir((isset($redir) && !empty($redir)) ? $redir : $GLOBALS['rootRel'].$GLOBALS['config']->get('config', 'adminFile'));\r\n            } else {\r\n                $minutes_blocked = ceil(($GLOBALS['config']->get('config', 'bftime')/60));\r\n                $GLOBALS['gui']->setError(sprintf('Too many invalid logins have been made. Access has been blocked for %s minutes.', $minutes_blocked));\r\n            }\r\n        } else {\r\n            $GLOBALS['gui']->setError($GLOBALS['language']->account['error_login']);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Convert permissions\r\n     *\r\n     * @param string $name\r\n     * @return int\r\n     */\r\n    private function _convertPermission($name = null)\r\n    {\r\n        switch (strtolower($name)) {\r\n        case 'delete':\r\n            $value = CC_PERM_DELETE;\r\n            break;\r\n        case 'edit':\r\n        case 'write':\r\n            $value = CC_PERM_EDIT;\r\n            break;\r\n        case 'read':\r\n            $value = CC_PERM_READ;\r\n            break;\r\n        default:\r\n            $value = 0;\r\n        }\r\n        return $value;\r\n    }\r\n\r\n    /**\r\n     * Get the admin section id\r\n     *\r\n     * @param unknown_type $name\r\n     * @return int/false\r\n     */\r\n    private function _getSectionId($name)\r\n    {\r\n        if (!empty($name)) {\r\n            foreach ($GLOBALS['hooks']->load('class.admin.get_section_id') as $hook) {\r\n                include $hook;\r\n            }\r\n            $sections = array(\r\n                'categories' => 3,\r\n                'customers'  => 5,\r\n                'documents'  => 4,\r\n                'filemanager' => 7,\r\n                'offers'  => 11,\r\n                'orders'  => 10,\r\n                'products'  => 2,\r\n                'users'   => 1,\r\n                'shipping'  => 6,\r\n                'statistics' => 8,\r\n                'settings'  => 9,\r\n                'reviews'  => 12,\r\n            );\r\n            if (isset($sections[$name])) {\r\n                return (int)$sections[$name];\r\n            }\r\n\r\n            foreach ($this->_sections as $section) {\r\n                if ($section['name'] == strtolower($name)) {\r\n                    return $section['section_id'];\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Load admin data\r\n     *\r\n     * @return bool\r\n     */\r\n    private function _load()\r\n    {\r\n        //Try to get the admin_id from the sessions\r\n        $admin_id = $GLOBALS['session']->get('admin_id', 'client', 0);\r\n        //If there is one\r\n        if ($admin_id != 0) {\r\n            //Try to get the admin_data from the sessions\r\n            if ($GLOBALS['session']->has('', 'admin_data')) {\r\n                $data = $GLOBALS['session']->get('', 'admin_data');\r\n            }\r\n            if (!isset($data) || empty($data) || !isset($data['admin_id'])) {\r\n                //Load from the DB\r\n                if (($data = $GLOBALS['db']->select('CubeCart_admin_users', false, array('admin_id' => $admin_id, 'status' => '1'), false, 1, false, false)) !== false) {\r\n                    //Unset these for security reasons\r\n                    unset($data[0]['password']);\r\n                    unset($data[0]['salt']);\r\n                    unset($data[0]['session_id']);\r\n                    $GLOBALS['session']->set('', $data[0], 'admin_data');\r\n                    $data = $data[0];\r\n                    $GLOBALS['db']->update('CubeCart_sessions', array('admin_id' => $data['admin_id']), array('session_id' => $GLOBALS['session']->getId()));\r\n                }\r\n            }\r\n            if (!empty($data)) {\r\n                $this->_logged_in = true;\r\n                $this->_admin_data = $data;\r\n                $GLOBALS['session']->set('user_language', (!empty($data['language'])) ? $data['language'] : $GLOBALS['config']->get('config', 'default_language'), 'admin');\r\n                //\u00a0Load Permission Rules\r\n                if (($permissions = $GLOBALS['db']->select('CubeCart_permissions', false, array('admin_id' => $this->_admin_data['admin_id']))) !== false) {\r\n                    foreach ($permissions as $permission) {\r\n                        $this->_permissions[$permission['section_id']] = $permission['level'];\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Magic get\r\n     *\r\n     * @param string $name\r\n     */\r\n    public function __get($name)\r\n    {\r\n        return (isset($this->_admin_data[$name])) ? $this->_admin_data[$name] : false;\r\n    }\r\n}\r\n", "<?php\r\n/**\r\n * CubeCart v6\r\n * ========================================\r\n * CubeCart is a registered trade mark of CubeCart Limited\r\n * Copyright CubeCart Limited 2017. All rights reserved.\r\n * UK Private Limited Company No. 5323904\r\n * ========================================\r\n * Web:\t\t\thttp://www.cubecart.com\r\n * Email:\t\tsales@cubecart.com\r\n * License:\t\tGPL-3.0 https://www.gnu.org/licenses/quick-guide-gplv3.html\r\n */\r\n\r\n/**\r\n * Session controller\r\n *\r\n * @author Technocrat\r\n * @author Al Brookbanks\r\n * @since 5.0.0\r\n */\r\nclass Session\r\n{\r\n    /**\r\n     * Get session save handler\r\n     *\r\n     * @var string\r\n     */\r\n    private $_save_handler = 'files';\r\n    /**\r\n     * Get session save path\r\n     *\r\n     * @var string\r\n     */\r\n    private $_save_path = '';\r\n    /**\r\n     * Current session status\r\n     *\r\n     * @var string\r\n     */\r\n    private $_state\t= 'active';\r\n    /**\r\n     * Session timeout\r\n     *\r\n     * @var int\r\n     */\r\n    private $_session_timeout = 604800;\r\n    /**\r\n     * Session path\r\n     *\r\n     * @var string\r\n     */\r\n    private $_session_path = '';\r\n    /**\r\n     * Session domain\r\n     *\r\n     * @var string\r\n     */\r\n    private $_session_domain = '';\r\n    /**\r\n     * Session token name\r\n     *\r\n     * @var string\r\n     */\r\n    private $_token_name = 'token';\r\n    /**\r\n     * Is user blocked\r\n     *\r\n     * @var bool\r\n     */\r\n    private $_user_blocked\t= false;\r\n\r\n    const BLOCKER_FRONTEND\t= 'F';\r\n    const BLOCKER_BACKEND\t= 'B';\r\n\r\n    /**\r\n     * Class instance\r\n     *\r\n     * @var instance\r\n     */\r\n    private static $_instance;\r\n    \r\n    /**\r\n     * Current session data\r\n     *\r\n     * @var array\r\n     */\r\n    public $session_data = array();\r\n\r\n    ##############################################\r\n\r\n    final private function __construct()\r\n    {\r\n        if (CC_IN_ADMIN) {\r\n            $this->_token_name = 'token_acp';\r\n        }\r\n\r\n        if (session_id()) {\r\n            session_unset();\r\n            session_destroy();\r\n            $_SESSION = array();\r\n        }\r\n        \r\n        //Get all the ini settings to save time later\r\n        $ini = ini_get_all(null, false);\r\n        if($GLOBALS['config']->has('config', 'session_save_handler')) {\r\n            $this->_save_handler = $GLOBALS['config']->get('config', 'session_save_handler');\r\n        } else {\r\n            $this->_save_handler = Cache::getInstance()->session_save_handler();\r\n        }\r\n        $this->_save_path = Cache::getInstance()->session_save_path();\r\n\r\n        ini_set('session.save_handler', $this->_save_handler);\r\n        if($this->_save_handler!=='files') {\r\n            ini_set('session.save_path', $this->_save_path);\r\n        }\r\n\r\n        if ($ini['session.use_trans_sid'] != '0') {\r\n            //disable transparent sid support\r\n            ini_set('session.use_trans_sid', '0');\r\n        }\r\n\r\n        if ($ini['session.gc_probability'] != 15) {\r\n            //Clean up 15% of the time\r\n            ini_set('session.gc_probability', 15);\r\n        }\r\n        if ($ini['session.gc_divisor'] != 100) {\r\n            ini_set('session.gc_divisor', 100);\r\n        }\r\n        $cookie_domain = ltrim($GLOBALS['config']->get('config', 'cookie_domain'), '.');\r\n        if (!empty($cookie_domain) && strstr($GLOBALS['storeURL'], $cookie_domain) && strpos($cookie_domain, '.')) {\r\n            $this->_session_domain = '.'.$cookie_domain;\r\n            ini_set('session.cookie_domain', $this->_session_domain);\r\n        }\r\n        $this->_session_path = $GLOBALS['rootRel'] == '/' ? $GLOBALS['rootRel'] : substr($GLOBALS['rootRel'],0,-1);\r\n        ini_set('session.cookie_path', $this->_session_path);\r\n\r\n        //If the current session time is longer we will not change anything\r\n        if ($ini['session.gc_maxlifetime'] < $this->_session_timeout) {\r\n            ini_set('session.gc_maxlifetime', $this->_session_timeout);\r\n        }\r\n        if ($ini['session.cookie_lifetime'] < $this->_session_timeout) {\r\n            ini_set('session.cookie_lifetime', $this->_session_timeout);\r\n        }\r\n        if (!$ini['session.use_cookies']) {\r\n            //Enforce cookies only\r\n            ini_set('session.use_cookies', true);\r\n        }\r\n        if (!$ini['session.use_only_cookies']) {\r\n            // make sure session is cookie based only\r\n            ini_set('session.use_only_cookies', true);\r\n        }\r\n        if (!$ini['session.cookie_httponly']) {\r\n            // make sure session cookies are http ONLY!\r\n            ini_set('session.cookie_httponly', true);\r\n        }\r\n        if (CC_SSL && empty($ini['session.cookie_samesite'])) {\r\n            // make sure session cookies are samesite\r\n            ini_set('session.cookie_samesite', 'None');\r\n        }\r\n        if (!$ini['session.cookie_secure'] && CC_SSL) {\r\n            // make sure session cookies are secure if SSL is enabled\r\n            ini_set('session.cookie_secure', true);\r\n        }\r\n        \r\n        $this->_start();\r\n        $this->_validate();\r\n        $this->_setTimers();\r\n    }\r\n\r\n    public function __destruct()\r\n    {\r\n        //Close this session\r\n        $this->_close();\r\n    }\r\n\r\n    /**\r\n     * Setup the instance (singleton)\r\n     *\r\n     * @return Session\r\n     */\r\n    public static function getInstance()\r\n    {\r\n        if (!(self::$_instance instanceof self)) {\r\n            self::$_instance = new self();\r\n        }\r\n\r\n        return self::$_instance;\r\n    }\r\n\r\n    //=====[ Public ]=======================================\r\n\r\n    /**\r\n     * Is a user blocked\r\n     *\r\n     * @return bool\r\n     */\r\n    public function blocked()\r\n    {\r\n        return $this->_user_blocked;\r\n    }\r\n\r\n    /**\r\n     * Block a user\r\n     *\r\n     * @param string $user\r\n     * @param bool $login\r\n     * @param string $location\r\n     * @param int $attempts\r\n     * @param int $time\r\n     */\r\n    public function blocker($user, $user_id, $login = false, $location = false, $attempts = 5, $time = 600)\r\n    {\r\n        $now = time();\r\n        // Access Log\r\n        $record\t= array(\r\n            'type'\t\t=> $location,\r\n            'time'\t\t=> $now,\r\n            'username'\t=> (!empty($user)) ? $user : '--',\r\n            'user_id'   => $user_id,\r\n            'ip_address'=> get_ip_address(),\r\n            'useragent' => $this->_http_user_agent(),\r\n            'success'\t=> ($login) ? 'Y' : 'N',\r\n        );\r\n        $log_days = $GLOBALS['config']->get('config', 'r_staff');\r\n        if (ctype_digit((string)$log_days) &&  $log_days > 0) {\r\n            $GLOBALS['db']->insert('CubeCart_access_log', $record);\r\n            $GLOBALS['db']->delete('CubeCart_access_log', 'time < UNIX_TIMESTAMP(DATE_SUB(NOW(), INTERVAL '.$log_days.' DAY))');\r\n        } elseif (empty($log_days) || !$log_days) {\r\n            $GLOBALS['db']->insert('CubeCart_access_log', $record);\r\n        }\r\n        // Remove expired blocks\r\n        $GLOBALS['db']->delete('CubeCart_blocker', array('last_attempt' => '<='.($now - $time)));\r\n\r\n        // Search for active blocks\r\n        $where = array(\r\n            'user_agent'\t=> $this->_http_user_agent(),\r\n            'ip_address'\t=> get_ip_address(),\r\n            'location'\t\t=> $location,\r\n        );\r\n        $blacklist = $GLOBALS['db']->select('CubeCart_blocker', array('block_id', 'ban_expires', 'last_attempt', 'level'), $where);\r\n        if ($blacklist) {\r\n            $blocked = $blacklist[0];\r\n            if ((int)$blocked['level'] == (int)$attempts) {\r\n                // Ban level reached\r\n                if ((int)$blocked['ban_expires'] <= $now) {\r\n                    // Ban expired - Allowed\r\n                    $GLOBALS['db']->delete('CubeCart_blocker', array('block_id' => $blocked['block_id']));\r\n                } else {\r\n                    // Still banned - Denied\r\n                    $this->_user_blocked = true;\r\n                }\r\n            } elseif (!$login) {\r\n                //\u00a0Attempts remaining\r\n                $record\t= array(\r\n                    'last_attempt'\t=> $now,\r\n                    'level'\t\t\t=> ($blocked['last_attempt'] <= ($now - $time)) ? 1 : $blocked['level'] + 1,\r\n                );\r\n                if ($record['level'] == $attempts) {\r\n                    // Blocked\r\n                    $record['ban_expires'] = ($now+$time);\r\n                    $this->_user_blocked = true;\r\n                }\r\n                $GLOBALS['db']->update('CubeCart_blocker', $record, array('block_id' => $blocked['block_id']));\r\n            }\r\n        } elseif (!$login) {\r\n            //\u00a0Login failed - Create blacklist entry\r\n            $record\t= array(\r\n                'level'\t\t\t=> 1,\r\n                'last_attempt'\t=> $now,\r\n                'ban_expires'\t=> 0,\r\n                'username'\t\t=> strip_tags($user),\r\n                'location'\t\t=> $location,\r\n                'user_agent'\t=> $this->_http_user_agent(),\r\n                'ip_address'\t=> get_ip_address(),\r\n            );\r\n            $GLOBALS['db']->insert('CubeCart_blocker', $record);\r\n        }\r\n        return (bool)$this->_user_blocked;\r\n    }\r\n\r\n    /**\r\n     * Check a form token\r\n     *\r\n     * @param string $token\r\n     * @return bool\r\n     */\r\n    public function checkToken($token)\r\n    {\r\n        // Continue without error if no security token is set\r\n        if (!$this->get($this->_token_name)) {\r\n            return true;\r\n        }\r\n        return ($this->get($this->_token_name) == $token);\r\n    }\r\n     \r\n    /**\r\n     * Have cookied been accepted or not\r\n     *\r\n     * Deprecated but left for backward compatibility\r\n     *\r\n     * @param string $token\r\n     * @return bool\r\n     */\r\n    public function cookiesBlocked()\r\n    {\r\n    \r\n        // Check cookies exists for verified and if so return value\r\n        if (isset($_COOKIE['accept_cookies']) && $_COOKIE['accept_cookies']=='false') {\r\n            return false;\r\n        } elseif (!$GLOBALS['config']->get('config', 'cookie_dialogue')) {\r\n            return false;\r\n        }\r\n\r\n        if ($GLOBALS['db']->select('CubeCart_geo_country', false, array('numcode' => $GLOBALS['config']->get('config', 'store_country'), 'eu' => '1')) !== false) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete something from the session\r\n     *\r\n     * @param string $name\r\n     * @param string $namespace\r\n     * @return bool\r\n     */\r\n    public function delete($name, $namespace = 'system')\r\n    {\r\n        $namespace = $this->_namespace($namespace);\r\n\r\n        //If the session isn't active we don't need to continue\r\n        if ($this->_state != 'active') {\r\n            return true;\r\n        }\r\n\r\n        if (!isset($_SESSION[$namespace])) {\r\n            return false;\r\n        }\r\n\r\n        //If there is not a name\r\n        if (empty($name)) {\r\n            //Remove the entire namespace\r\n            unset($_SESSION[$namespace]);\r\n            return true;\r\n        } elseif (isset($_SESSION[$namespace][$name])) {\r\n            //Remove just the element\r\n            unset($_SESSION[$namespace][$name]);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Destroy session\r\n     *\r\n     * @return bool\r\n     */\r\n    public function destroy()\r\n    {\r\n        if ($this->_state == 'destroyed') {\r\n            return true;\r\n        }\r\n\r\n        //Delete the session from the DB\r\n        $GLOBALS['db']->delete('CubeCart_sessions', array('session_id' => $this->getId()), false);\r\n        //Completely unset everything\r\n        $_SESSION = array();\r\n\r\n        //Kill the cookies\r\n        if (isset($_COOKIE[session_name()])) {\r\n            $this->set_cookie(session_name(), '', time() - 42000);\r\n            unset($_COOKIE[session_name()]);\r\n        }\r\n\r\n        //Destory it\r\n        session_unset();\r\n        session_destroy();\r\n\r\n        $this->_state = 'destroyed';\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get data from the session\r\n     *\r\n     * If name is empty the entire name space will be returned\r\n     *\r\n     * @param string $name\r\n     * @param string $namespace\r\n     * @param string $default\r\n     */\r\n    public function get($name, $namespace = 'system', $default = false)\r\n    {\r\n        $namespace = $this->_namespace($namespace);\r\n\r\n        if ($this->_state != 'active' && $this->_state != 'expired') {\r\n            return $default;\r\n        }\r\n\r\n        if (isset($_SESSION[$namespace])) {\r\n            if (!empty($name) && isset($_SESSION[$namespace][$name])) {\r\n                return $_SESSION[$namespace][$name];\r\n            } elseif (empty($name) && !empty($_SESSION[$namespace])) {\r\n                return $_SESSION[$namespace];\r\n            }\r\n        }\r\n\r\n        return $default;\r\n    }\r\n\r\n    /**\r\n     * Get session id\r\n     *\r\n     * @return string\r\n     */\r\n    public function getId()\r\n    {\r\n        if ($this->_state == 'destroyed') {\r\n            return null;\r\n        }\r\n\r\n        return session_id();\r\n    }\r\n\r\n    /**\r\n     * Get session name\r\n     *\r\n     * @return string The session name\r\n     */\r\n    public function getName()\r\n    {\r\n        if ($this->_state == 'destroyed') {\r\n            return null;\r\n        }\r\n\r\n        return session_name();\r\n    }\r\n\r\n    /**\r\n     * Get the session state\r\n     *\r\n     * @return string\r\n     */\r\n    public function getState()\r\n    {\r\n        return $this->_state;\r\n    }\r\n\r\n    /**\r\n     * Get session data from database\r\n     *\r\n     * @return false/array/string\r\n     */\r\n    public function getSessionTableData($column = false)\r\n    {\r\n        $data = $GLOBALS['db']->select('CubeCart_sessions', $column, array('session_id' => $this->getId()), false, 1, false, false);\r\n        if (is_array($data)) {\r\n            if (count($data[0])==1 && is_string($column)) {\r\n                return $data[0][$column];\r\n            } else {\r\n                return $data[0];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Create a session token to help prevent CSRF\r\n     *\r\n     * @param bool $new If true, force a new token to be created\r\n     * @return string The session token\r\n     */\r\n    public function getToken($new = false)\r\n    {\r\n        if ((($token = $this->get($this->_token_name)) === false) || $new) {\r\n            $token = $this->_createToken();\r\n            $this->set($this->_token_name, $token);\r\n        }\r\n\r\n        return $token;\r\n    }\r\n\r\n    /**\r\n     * Does the session have something\r\n     *\r\n     * @param string $name\r\n     * @param string $namespace\r\n     * @return bool\r\n     */\r\n    public function has($name, $namespace = 'system')\r\n    {\r\n        $namespace = $this->_namespace($namespace);\r\n\r\n        if ($this->_state != 'active') {\r\n            return false;\r\n        }\r\n\r\n        if (!isset($_SESSION[$namespace])) {\r\n            return false;\r\n        }\r\n\r\n        if (empty($name)) {\r\n            return true;\r\n        } else {\r\n            return isset($_SESSION[$namespace][$name]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is an element empty\r\n     *\r\n     * @param string $config_name\r\n     * @param string $element\r\n     * @return bool\r\n     */\r\n    public function isEmpty($name, $namespace)\r\n    {\r\n        //If the element isn't there then it is empty\r\n        if (!$this->has($name, $namespace)) {\r\n            return true;\r\n        }\r\n\r\n        $namespace = $this->_namespace($namespace);\r\n\r\n        return empty($_SESSION[$namespace][$name]);\r\n    }\r\n\r\n    public function regenerateSessionId() {\r\n        $old_session = $this->getId();\r\n        session_regenerate_id();\r\n        Database::getInstance()->update('CubeCart_sessions', array('session_id' => $this->getId()), array('session_id' => $old_session), false);\r\n        $this->set_cookie(session_name(), session_id(), time()+$this->_session_timeout);\r\n    }\r\n\r\n    /**\r\n     * Set a session value to something\r\n     *\r\n     * @param string $name\r\n     * @param string $value\r\n     * @param string $namespace\r\n     * @param bool $overwrite\r\n     * @return bool\r\n     */\r\n    public function set($name, $value, $namespace = 'system', $overwrite = false)\r\n    {\r\n        $namespace = $this->_namespace($namespace);\r\n        if ($this->_state != 'active') {\r\n            return true;\r\n        }\r\n\r\n        if (is_null($value)) {\r\n            unset($_SESSION[$namespace][$name]);\r\n        } else {\r\n            if (empty($name)) {\r\n                if (!is_array($value)) {\r\n                    $_SESSION[$namespace] = $value;\r\n                } else {\r\n                    if (isset($_SESSION[$namespace]) && !$overwrite) {\r\n                        $_SESSION[$namespace] = merge_array($_SESSION[$namespace], $value);\r\n                    } else {\r\n                        $_SESSION[$namespace] = $value;\r\n                    }\r\n                }\r\n            } else {\r\n                if (!is_array($value)) {\r\n                    $_SESSION[$namespace][$name] = $value;\r\n                } else {\r\n                    if (isset($_SESSION[$namespace][$name]) && !$overwrite) {\r\n                        $_SESSION[$namespace][$name] = merge_array($_SESSION[$namespace][$name], $value);\r\n                    } else {\r\n                        $_SESSION[$namespace][$name] = $value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set a page back to the session\r\n     */\r\n    public function setBack()\r\n    {\r\n        if (isset($_SERVER['HTTP_REFERER']) && !empty($_SERVER['HTTP_REFERER'])) {\r\n            //Make sure the referer is local and not the login\r\n            if (substr($_SERVER['HTTP_REFERER'], 0, strlen(CC_STORE_URL)) == CC_STORE_URL && $_SERVER['HTTP_REFERER'] != CC_STORE_URL.'index.php?_a=login') {\r\n                $this->set('back', $_SERVER['HTTP_REFERER']);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set cookie\r\n     *\r\n     * @param string $name\r\n     * @param string $value\r\n     * @param integer $expire\r\n     * @return bool\r\n     */\r\n    public function set_cookie($name, $value, $expires, $options = array())\r\n    {\r\n        $params = session_get_cookie_params();\r\n        $params = array_merge($params, $options); // Allow overwrite for specific cookies    \r\n\r\n        $date = new Datetime(strftime('%c',$expires));\r\n        $attributes = '';\r\n        $attributes .= ';Expires='.$date->format(DateTime::COOKIE);\r\n        $attributes .= ';Domain='.$this->_session_domain;\r\n        $attributes .= ';Path='.$this->_session_path;\r\n        if(CC_SSL) {\r\n            $attributes .= ';SameSite='.$params['samesite'];\r\n            $attributes .= ';Secure';\r\n        }\r\n        if($params['httponly']) {\r\n            $attributes .= ';HttpOnly';\r\n        }\r\n        // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie\r\n        header('Set-Cookie: '.$name.'='.$value.$attributes);\r\n    }\r\n\r\n    //=====[ Private ]=======================================\r\n\r\n    /**\r\n     * Close a session\r\n     *\r\n     * @return true\r\n     */\r\n    private function _close()\r\n    {\r\n        if ($this->_state == 'closed') {\r\n            return true;\r\n        }\r\n\r\n        $record = array(\r\n            'location' => currentPage() . (strpos(currentPage(),\"_a=404\")!==false ? \"<br /><strike>\".$_SERVER['REQUEST_URI'].\"</strike>\" : \"\"),\r\n            'session_last'\t=> $this->get('session_last', 'client', ''),\r\n            'acp'\t\t=> ADMIN_CP\r\n        );\r\n        \r\n        //Use the instance because the global might be gone already\r\n        Database::getInstance()->update('CubeCart_sessions', $record, array('session_id' => $this->getId()), false);\r\n        // Tidy Access Logs keep months worth\r\n        Database::getInstance()->delete('CubeCart_access_log', array('time' => '<'.(time()-(3600*24*7*4))));\r\n        // Purge sessions older than the session time out\r\n        Database::getInstance()->delete('CubeCart_sessions', array('session_last' => '<='.(time() - $this->_session_timeout)), false);\r\n\r\n        $this->_state = 'closed';\r\n\r\n        session_write_close();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Create a form token\r\n     *\r\n     * @return string\r\n     */\r\n    private function _createToken()\r\n    {\r\n        return md5(session_name().time().mt_rand(0, mt_getrandmax()));\r\n    }\r\n\r\n    /**\r\n     * User agent\r\n     *\r\n     * @return string\r\n     */\r\n    private function _http_user_agent()\r\n    {\r\n        return strpos($_SERVER['HTTP_USER_AGENT'], 'Trident') ? 'IEX' : htmlspecialchars($_SERVER['HTTP_USER_AGENT']);\r\n    }\r\n\r\n    /**\r\n     * Check & build the namespace\r\n     *\r\n     * @param string $namespace\r\n     * @return string\r\n     */\r\n    private function _namespace($namespace)\r\n    {\r\n        if ($namespace[0] == '_') {\r\n            trigger_error('Session namespace cannot start with _', E_USER_ERROR);\r\n        }\r\n\r\n        return '__'.$namespace;\r\n    }\r\n\r\n    /**\r\n     * Setup session timers\r\n     */\r\n    private function _setTimers()\r\n    {\r\n        if (!$this->has('session_start', 'client')) {\r\n            $start = time();\r\n            $this->set('session_start', $start, 'client');\r\n            $this->set('session_last', $start, 'client');\r\n        } else {\r\n            $this->set('session_start', $this->get('session_last', 'client'), 'client');\r\n            $this->set('session_last', time(), 'client');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start session\r\n     */\r\n    private function _start()\r\n    {\r\n        if($this->_save_handler!=='files') {\r\n            session_save_path($this->_save_path);\r\n        } else {\r\n            $session_save_path = $GLOBALS['config']->get('config', 'session_save_path');\r\n            if (!empty($session_save_path) && file_exists($session_save_path)) {\r\n                session_save_path($session_save_path);\r\n            }\r\n        }\r\n        session_cache_limiter('none');\r\n        $session_prefix = CC_SSL ? 'S' : '';\r\n        session_name('CC'.$session_prefix.'_'.strtoupper(substr(md5(CC_ROOT_DIR), 0, 10)));\r\n        session_start();\r\n        \r\n        // Increase session length on each page load.\r\n        if (isset($_COOKIE[session_name()])) {\r\n            $this->set_cookie(session_name(), session_id(), time()+$this->_session_timeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate session\r\n     *\r\n     * @param bool $restart\r\n     */\r\n    private function _validate()\r\n    {\r\n        $ip = get_ip_address();\r\n\r\n        if (($current = $GLOBALS['db']->select('CubeCart_sessions', false, array('session_id' => $this->getId()), false, 1, false, false)) === false) {\r\n            $record = array(\r\n                'admin_id'\t\t=> 0,\r\n                'customer_id'\t=> 0,\r\n                'ip_address'\t=> $ip,\r\n                'location'\t\t=> '',\r\n                'session_id'\t=> $this->getId(),\r\n                'session_last'\t=> time(),\r\n                'session_start'\t=> time(),\r\n                'useragent'\t\t=> $this->_http_user_agent(),\r\n                'acp'\t\t=> ADMIN_CP\r\n            );\r\n            $GLOBALS['db']->insert('CubeCart_sessions', $record, false);\r\n            $this->set('ip_address', $ip, 'client');\r\n            $this->set('useragent', $this->_http_user_agent(), 'client');\r\n        } else {\r\n            $this->session_data = $current[0];\r\n            $this->set('ip_address', $current[0]['ip_address'], 'client');\r\n            $this->set('useragent', $current[0]['useragent'], 'client');\r\n        }\r\n    }\r\n}\r\n", "<?php\r\n/**\r\n * CubeCart v6\r\n * ========================================\r\n * CubeCart is a registered trade mark of CubeCart Limited\r\n * Copyright CubeCart Limited 2017. All rights reserved.\r\n * UK Private Limited Company No. 5323904\r\n * ========================================\r\n * Web:   http://www.cubecart.com\r\n * Email:  sales@cubecart.com\r\n * License:  GPL-3.0 https://www.gnu.org/licenses/quick-guide-gplv3.html\r\n */\r\n\r\n/**\r\n * User controller\r\n *\r\n * @author Technocrat\r\n * @author Al Brookbanks\r\n * @since 5.0.0\r\n */\r\nclass User\r\n{\r\n\r\n    /**\r\n     * Is bot?\r\n     *\r\n     * @var bool\r\n     */\r\n    private $_bot   = null;\r\n    /**\r\n     * Bot signatures\r\n     *\r\n     * @var array of strings\r\n     */\r\n    protected $_bot_sigs =  array(\r\n        'alexa',\r\n        'appie',\r\n        'archiver',\r\n        'ask jeeves',\r\n        'baiduspider',\r\n        'bot',\r\n        'crawl',\r\n        'crawler',\r\n        'curl',\r\n        'eventbox',\r\n        'facebookexternal',\r\n        'fast',\r\n        'firefly',\r\n        'froogle',\r\n        'gigabot',\r\n        'girafabot',\r\n        'google',\r\n        'googlebot',\r\n        'infoseek',\r\n        'inktomi',\r\n        'java',\r\n        'larbin',\r\n        'looksmart',\r\n        'mechanize',\r\n        'monitor',\r\n        'msnbot',\r\n        'nambu',\r\n        'nationaldirectory',\r\n        'novarra',\r\n        'pear',\r\n        'perl',\r\n        'python',\r\n        'rabaz',\r\n        'radian',\r\n        'rankivabot',\r\n        'scooter',\r\n        'slurp',\r\n        'sogou web spider',\r\n        'spade',\r\n        'sphere',\r\n        'spider',\r\n        'technoratisnoop',\r\n        'tecnoseek',\r\n        'teoma',\r\n        'toolbar',\r\n        'transcoder',\r\n        'twitt',\r\n        'url_spider_sql',\r\n        'webalta',\r\n        'webbug',\r\n        'webfindbot',\r\n        'wordpress',\r\n        'www.galaxy.com',\r\n        'yahoo',\r\n        'yandex',\r\n        'zyborg',\r\n    );\r\n    /**\r\n     * Has the user data changed\r\n     *\r\n     * @var bool\r\n     */\r\n    private $_changed  = false;\r\n    /**\r\n     * Logged in\r\n     *\r\n     * @var bool\r\n     */\r\n    private $_logged_in  = false;\r\n    /**\r\n     * Users data\r\n     *\r\n     * @var array\r\n     */\r\n    private $_user_data  = array();\r\n\r\n    /**\r\n     * Class instance\r\n     *\r\n     * @var instance\r\n     */\r\n    protected static $_instance;\r\n\r\n    ##############################################\r\n\r\n    final protected function __construct()\r\n    {\r\n\r\n        //If there is a login attempt\r\n        if (isset($_POST['username']) && isset($_POST['password']) && !empty($_POST['username']) && !empty($_POST['password'])) {\r\n\r\n            //Did they check the remember me box\r\n            $remember = (isset($_POST['remember']) && !empty($_POST['remember'])) ? true : false;\r\n            $this->authenticate($_POST['username'], $_POST['password'], $remember);\r\n        } else {\r\n            //If there is a cookie for the username and they are not logged in\r\n            if (isset($_COOKIE['username']) && !empty($_COOKIE['username']) && !$this->is()) {\r\n                //If we haven't pushed the user to the login\r\n                if (!$GLOBALS['session']->get('login_push')) {\r\n                    $GLOBALS['session']->set('login_push', true);\r\n                    //Try to have them login\r\n                    if (!isset($_GET['_a']) || $_GET['_a'] != 'login') {\r\n                        httpredir('index.php?_a=login');\r\n                    }\r\n                }\r\n            }\r\n\r\n            $this->_load();\r\n            //IS_USER defines if a the user is a valid user on the template\r\n            $GLOBALS['smarty']->assign('IS_USER', $this->is());\r\n\r\n            if ($this->is() && isset($_POST['mailing_list'])) {\r\n                Newsletter::getInstance()->subscribe($this->get('email'), $this->getId());\r\n            }\r\n\r\n            $this->isBot();\r\n        }\r\n    }\r\n\r\n    public function __destruct()\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Setup the instance (singleton)\r\n     *\r\n     * @return User\r\n     */\r\n    public static function getInstance()\r\n    {\r\n        if (!(self::$_instance instanceof self)) {\r\n            self::$_instance = new self();\r\n        }\r\n\r\n        return self::$_instance;\r\n    }\r\n\r\n    //=====[ Public ]=======================================\r\n\r\n    /**\r\n     * Increment customer order count by 1\r\n     *\r\n     * @param integer $customer_id\r\n     * @return bool\r\n     */\r\n    public function addOrder($customer_id)\r\n    {\r\n        return (bool)$GLOBALS['db']->misc('UPDATE `'.$GLOBALS['config']->get('config', 'dbprefix').'CubeCart_customer` SET `order_count` = `order_count` + 1 WHERE `customer_id` = '.(int)$customer_id, false);\r\n    }\r\n\r\n    /**\r\n     * Authenticate a user (ie login)\r\n     *\r\n     * @param string $username\r\n     * @param string $password\r\n     * @param bool $remember\r\n     * @param bool $from_cookie\r\n     * @param bool $redirect\r\n     * @return bool\r\n     */\r\n    public function authenticate($username, $password, $remember = false, $from_cookie = false, $is_openid = false, $redirect = true)\r\n    {\r\n        $username = (string)$username;\r\n        $password = (string)$password;\r\n\r\n        //Check we are not upgrading an unregistered account\r\n        if ($unregistered = $GLOBALS['db']->select('CubeCart_customer', array('customer_id'), array('type' => 2, 'email' => $username, 'status' => true), false, 1, false, false)) {\r\n            $record = array(\r\n                'type' => 1,\r\n                'new_password' => 0,\r\n                'password' => md5($password)\r\n            );\r\n            $GLOBALS['db']->update('CubeCart_customer', $record, array('customer_id' => (int)$unregistered[0]['customer_id']));\r\n            $this->authenticate($username, $password);\r\n        }\r\n\r\n        $hash_password = '';\r\n        //Get customer_id, password, and salt for the user\r\n        if (($user = $GLOBALS['db']->select('CubeCart_customer', array('customer_id', 'password', 'salt', 'new_password'), array('type' => 1, 'email' => $username, 'status' => true), false, 1, false, false)) !== false) {\r\n            //If there is no salt we need to make it\r\n            if (empty($user[0]['salt'])) {\r\n                //Get the salt\r\n                $salt = Password::getInstance()->createSalt();\r\n                //Update it to the newer MD5 so we can fix it later\r\n                $pass = Password::getInstance()->updateOld($user[0]['password'], $salt);\r\n                $record = array(\r\n                    'salt'   => $salt,\r\n                    'password'  => $pass,\r\n                );\r\n\r\n                //Update the DB with the new salt and salted password\r\n                if ($GLOBALS['db']->update('CubeCart_customer', $record, array('customer_id' => (int)$user[0]['customer_id']))) {\r\n                    $hash_password = $pass;\r\n                }\r\n            } else {\r\n                if ($user[0]['new_password'] == 1) {\r\n                    //Get the salted new password\r\n                    $hash_password = Password::getInstance()->getSalted($password, $user[0]['salt']);\r\n                } else {\r\n                    //Get the salted old password\r\n                    $hash_password = Password::getInstance()->getSaltedOld($password, $user[0]['salt']);\r\n                }\r\n            }\r\n        }\r\n\r\n        //Try to get the user data with the username and salted password\r\n        $where = array(\r\n            'email'  => $username,\r\n            'password' => $hash_password,\r\n        );\r\n        $user = $GLOBALS['db']->select('CubeCart_customer', array('language', 'customer_id', 'email', 'password', 'salt', 'new_password'), $where, false, 1, false, false);\r\n\r\n        $GLOBALS['session']->blocker($username, $user[0]['customer_id'], (bool)$user, Session::BLOCKER_FRONTEND, $GLOBALS['config']->get('config', 'bfattempts'), $GLOBALS['config']->get('config', 'bftime'));\r\n        if (!$user) {\r\n            $GLOBALS['gui']->setError($GLOBALS['language']->account['error_login']);\r\n        } else {\r\n            $user[0]['language'] = $this->_validLanguage($user[0]['language']);\r\n            if ($user[0]['new_password'] != 1) {\r\n                $salt = Password::getInstance()->createSalt();\r\n                $pass = Password::getInstance()->getSalted($password, $salt);\r\n                $record = array(\r\n                    'salt'   => $salt,\r\n                    'password'  => $pass,\r\n                    'new_password' => 1,\r\n                );\r\n\r\n                //Update the DB with the new salt and salted password\r\n                if (($GLOBALS['db']->update('CubeCart_customer', $record, array('customer_id' => (int)$user[0]['customer_id']))) === false) {\r\n                    trigger_error('Could not update password', E_USER_ERROR);\r\n                }\r\n            }\r\n            //If we are a user\r\n            if (!empty($user[0]['customer_id']) && is_numeric($user[0]['customer_id'])) {\r\n                /**\r\n                 * Set the cookie for the username\r\n                 * The password cookie is not stored to make stores more secure\r\n                 */\r\n                if ($remember || $from_cookie) {\r\n                    $GLOBALS['session']->set_cookie('username', $user[0]['email'], time() + (3600*24*30));\r\n                }\r\n                if (!$GLOBALS['session']->blocked()) {\r\n                    // possibly replaceable with session_set_save_handler?\r\n                    $GLOBALS['session']->regenerateSessionId();\r\n                    $GLOBALS['db']->update('CubeCart_sessions', array('customer_id' => $user[0]['customer_id']), array('session_id' => $GLOBALS['session']->getId()));\r\n                    $GLOBALS['db']->update('CubeCart_cookie_consent', array('customer_id' => $user[0]['customer_id']), array('session_id' => $GLOBALS['session']->getId()));\r\n                    $GLOBALS['session']->set('language', $user[0]['language'], 'client');\r\n                    // Load user data\r\n                    $this->_load();\r\n\r\n                    $pass_len = strlen($password);\r\n\r\n                    if ($pass_len > 0 && $pass_len < 6) {\r\n                        $GLOBALS['gui']->setInfo($GLOBALS['language']->account['error_pass_length']);\r\n                    }\r\n\r\n                    $GLOBALS['session']->set('check_autoload', true);\r\n\r\n                    if ($redirect) {\r\n                        //Check for a redirect\r\n                        $redir = '';\r\n                        if (isset($_GET['redir']) && !empty($_GET['redir'])) {\r\n                            $redir = $_GET['redir'];\r\n                        } elseif (isset($_POST['redir']) && !empty($_POST['redir'])) {\r\n                            $redir = $_POST['redir'];\r\n                        } elseif ($GLOBALS['session']->has('redir')) {\r\n                            $redir = $GLOBALS['session']->get('redir');\r\n                        } elseif ($GLOBALS['session']->has('back')) {\r\n                            $redir = $GLOBALS['session']->get('back');\r\n                        }\r\n\r\n                        foreach ($GLOBALS['hooks']->load('class.user.preredirect') as $hook) {\r\n                            include $hook;\r\n                        }\r\n\r\n                        //If there is a redirect\r\n                        if (!empty($redir)) {\r\n                            // Prevent phishing attacks, or anything untoward, unless it's redirecting back to this store\r\n                            if(!$GLOBALS['ssl']->validRedirect($redir)) {\r\n                               trigger_error(\"Possible Phishing attack - Redirection to '\".$redir.\"' is not allowed. Please check the value of 'Store URL' in the SSL section of your store settings.\", E_USER_ERROR);\r\n                            }\r\n                        } else {\r\n                            $remove = array('redir');\r\n                        }\r\n\r\n                        if (!empty($redir)) {\r\n                            //Clean up\r\n                            if ($GLOBALS['session']->has('back')) {\r\n                                $GLOBALS['session']->delete('back');\r\n                            }\r\n                            if ($GLOBALS['session']->has('redir')) {\r\n                                $GLOBALS['session']->delete('redir');\r\n                            }\r\n                            //Send to redirect\r\n                            httpredir($redir);\r\n                        } else {\r\n                            httpredir(currentPage($remove));\r\n                        }\r\n                    }\r\n                    return true;\r\n                } else {\r\n                    $GLOBALS['gui']->setError($GLOBALS['language']->account['error_login_block']);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public function addressCompare($address1, $address2) {\r\n        $allowed_keys = array('line1','line2','town','postcode','state_id','state','state_abbrev','country','country_id','country_iso','country_name');\r\n        $address1_filtered = array();\r\n        foreach($address1 as $key => $value) {\r\n            if(in_array($key, $allowed_keys)) $address1_filtered[$key] = strtolower($value);\r\n        }\r\n        $address2_filtered = array();\r\n        foreach($address2 as $key => $value) {\r\n            if(in_array($key, $allowed_keys)) $address2_filtered[$key] = strtolower($value);\r\n        }\r\n        return md5(serialize($address1_filtered).serialize($address2_filtered));\r\n    }\r\n\r\n    /**\r\n     * Change a user password\r\n     *\r\n     * @return bool\r\n     */\r\n    public function changePassword()\r\n    {\r\n        //If everything lines up\r\n        if (Password::getInstance()->getSalted($_POST['passold'], $this->_user_data['salt']) == $this->_user_data['password'] && $_POST['passnew'] === $_POST['passconf']) {\r\n            //Change it\r\n            $record = array('password' => Password::getInstance()->getSalted($_POST['passnew'], $this->_user_data['salt']));\r\n            if ($GLOBALS['db']->update('CubeCart_customer', $record, array('customer_id' => (int)$this->_user_data['customer_id']), true)) {\r\n                $this->_user_data['password'] = $record['password'];\r\n                return true;\r\n            } else {\r\n                $GLOBALS['gui']->setError($GLOBALS['language']->account['error_password_update']);\r\n            }\r\n        } else {\r\n            $GLOBALS['gui']->setError($GLOBALS['language']->account['error_password_update_mismatch']);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Manually create a user\r\n     *\r\n     * @param array $data\r\n     * @param bool $login\r\n     * @param int $type\r\n     * @return customer_id/false\r\n     */\r\n    public function createUser($data, $login = false, $type = 1)\r\n    {\r\n        if (!empty($data)) {\r\n            // Insert record(s)\r\n            $data['new_password'] = '0';\r\n            $data['ip_address']  = get_ip_address();\r\n\r\n            $data = array_map('trim', $data);\r\n\r\n            foreach ($data as $key => $value) {\r\n                $data[$key] = filter_var($value, FILTER_SANITIZE_STRING);\r\n            }\r\n\r\n            if ($existing = $GLOBALS['db']->select('CubeCart_customer', 'customer_id', array('email' => $data['email']), false, 1, false, false)) {\r\n                $GLOBALS['db']->update('CubeCart_customer', $data, array('email' => $data['email']));\r\n                $customer_id = $existing[0]['customer_id'];\r\n            } else {\r\n                $data['registered']  = time();\r\n                $data['type']    = $type;\r\n                $data['language']    = $GLOBALS['language']->current();\r\n\r\n                $customer_id = $this->_validCustomerId();\r\n                if ($customer_id) {\r\n                    $data['customer_id']  = $customer_id;\r\n                }\r\n                $customer_id = $GLOBALS['db']->insert('CubeCart_customer', $data);\r\n                if($type==2) $this->setGhostId($customer_id);\r\n            }\r\n            if ($login) {\r\n                // Automatically log 'em in\r\n                $this->authenticate($data['email'], $data['password']);\r\n            }\r\n            return $customer_id;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Delete an address from the address book\r\n     *\r\n     * @param array/address_id $delete\r\n     * @return bool\r\n     */\r\n    public function deleteAddress($delete)\r\n    {\r\n        if ($this->is()) {\r\n            $where['customer_id'] = $this->_user_data['customer_id'];\r\n            if (is_array($delete)) {\r\n                foreach ($delete as $address) {\r\n                    $where['address_id'] = $address;\r\n                    $GLOBALS['db']->delete('CubeCart_addressbook', $where);\r\n                    $this->_deleteBasketAddress($address);\r\n                }\r\n            } else {\r\n                $where['address_id'] = $delete;\r\n                $GLOBALS['db']->delete('CubeCart_addressbook', $where);\r\n                $this->_deleteBasketAddress($address);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Format address array\r\n     *\r\n     * @param array\r\n     * @return array\r\n     */\r\n    public function formatAddress($address = array(), $user_defined = true, $estimate = false)\r\n    {\r\n        if (!$user_defined && !is_array($address)) {\r\n            if ($GLOBALS['config']->get('config', 'disable_estimates')=='1') {\r\n                $address = array(\r\n                    'postcode' => '',\r\n                    'country' => '',\r\n                    'state' => ''\r\n                );\r\n            } else {\r\n                $address = array(\r\n                    'postcode' => $GLOBALS['config']->get('config', 'store_postcode'),\r\n                    'country' => $GLOBALS['config']->get('config', 'store_country'),\r\n                    'state' => $GLOBALS['config']->get('config', 'store_zone')\r\n                );\r\n            }\r\n        }\r\n\r\n        $state_field = is_numeric($address['state']) ? 'id' : 'name';\r\n\r\n        // Check state\r\n        $country_id = getCountryFormat($address['country'], 'numcode', 'id');\r\n        // Is state required for this country?!\r\n        if ($GLOBALS['db']->select('CubeCart_geo_country', false, array('id' => $country_id, 'status' => 1))) {\r\n            if ($user_defined && !CC_IN_ADMIN && $_GET['_a']!=='addressbook' && ((empty($address['state']) && !empty($address['country'])) || ($GLOBALS['db']->select('CubeCart_geo_zone', false, array($state_field => $address['state'], 'status' => 1))==false) && $GLOBALS['db']->select('CubeCart_geo_zone', false, array('country_id' => $country_id, 'status' => 1)))) {\r\n                $address_description = empty($address['description']) ? '' : ' (&quot;'.$address['description'].'&quot;)';\r\n                $GLOBALS['gui']->setError(sprintf($GLOBALS['language']->address['check_state'], $address_description));\r\n                httpredir(\"?_a=addressbook&action=edit&address_id=\".$address['address_id']);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        $address['state_id']  = getStateFormat($address['state'], $state_field, 'id');\r\n        $address['country_id']  = $address['country'];\r\n        $address['country']   = getCountryFormat($address['country_id']);\r\n        $address['state_abbrev'] = getStateFormat($address['state'], $state_field, 'abbrev');\r\n        $address['country_iso']  = getCountryFormat($address['country_id'], 'numcode', 'iso');\r\n        $address['country_iso3'] = getCountryFormat($address['country_id'], 'numcode', 'iso3');\r\n        $address['state']   = getStateFormat($address['state_id']);\r\n        $address['user_defined'] = $user_defined;\r\n        $address['estimate'] = $estimate;\r\n        return $address;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get an element or all the user data\r\n     *\r\n     * @param string $field\r\n     * @return string/false\r\n     */\r\n    public function get($field = '')\r\n    {\r\n        if (!$this->is()) {\r\n            return false;\r\n        }\r\n\r\n        //If there is a field\r\n        if (!empty($field)) {\r\n            //Send just that field\r\n            return (isset($this->_user_data[$field])) ? $this->_user_data[$field] : false;\r\n        } else {\r\n            //Send all the user data\r\n            return $this->_user_data;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert John Smith <john.smith@example.org> to array of parts\r\n     *\r\n     * @param string $input\r\n     * @return false/array\r\n     */\r\n    public static function getEmailAddressParts($input)\r\n    {\r\n        if (filter_var($input, FILTER_VALIDATE_EMAIL)) {\r\n            $email = $input;\r\n            $name = $input;\r\n        } else {\r\n            preg_match('#\\<(.*?)\\>#', $input, $match);\r\n            if(filter_var($match[1], FILTER_VALIDATE_EMAIL)) {\r\n                $email = $match[1];\r\n                $name = trim(strip_tags($input));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return array('name' => $name, 'email' => $email);\r\n    }\r\n\r\n    /**\r\n     * Get address information\r\n     *\r\n     * @param int $address_id\r\n     * @return array/false\r\n     */\r\n    public function getAddress($address_id, $format = false)\r\n    {\r\n        if ($this->is()) {\r\n            if (($raw_address = $GLOBALS['db']->select('CubeCart_addressbook', false, array('customer_id' => $this->_user_data['customer_id'], 'address_id' => $address_id), false, false, false, false)) !== false) {\r\n                if ($format) {\r\n                    return $this->formatAddress($raw_address[0]);\r\n                } else {\r\n                    return $raw_address[0];\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get all addresses\r\n     *\r\n     * @param bool $show_all\r\n     * @return array/false\r\n     */\r\n    public function getAddresses($show_all = true)\r\n    {\r\n        if ($this->is()) {\r\n            $where['customer_id'] = $this->_user_data['customer_id'];\r\n            if (!$show_all) {\r\n                $where['billing'] = '1';\r\n            }\r\n            if (($addresses = $GLOBALS['db']->select('CubeCart_addressbook', false, $where, 'billing DESC', false, false, false)) !== false) {\r\n                foreach ($addresses as $address) {\r\n                    $addressArray[] = $this->formatAddress($address);\r\n                }\r\n                return $addressArray;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get the default shipping address\r\n     * @return array/false\r\n     */\r\n    public function getDefaultAddress()\r\n    {\r\n        if ($this->is()) {\r\n            $where['customer_id'] = $this->_user_data['customer_id'];\r\n            \r\n            if ($GLOBALS['config']->get('config', 'basket_allow_non_invoice_address')) {\r\n                $where['default'] = '1';\r\n            } else {\r\n                $where['billing'] = '1';\r\n            }\r\n            \r\n            if (($addresses = $GLOBALS['db']->select('CubeCart_addressbook', false, $where, 'billing DESC', false, false, false)) !== false) {\r\n                foreach ($addresses as $address) {\r\n                    $addressArray[] = $this->formatAddress($address);\r\n                }\r\n                return $addressArray;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get customer id for unregistered customers\r\n     *\r\n     * @return integer/bool\r\n     */\r\n    public function getGhostId()\r\n    {\r\n        return $GLOBALS['session']->get('ghost_customer_id');\r\n    }\r\n\r\n    /**\r\n     * Get customer_id\r\n     * @return customer_id/0\r\n     */\r\n    public function getId()\r\n    {\r\n        if (!$this->is()) {\r\n            return 0;\r\n        } else {\r\n            return $this->_user_data['customer_id'];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get customer group memberships\r\n     * @param int $customer_id\r\n     * @return false/array\r\n     */\r\n    public function getMemberships($customer_id = null)\r\n    {\r\n        if($customer_id === 0) return false;\r\n\r\n        if (is_null($customer_id)) {\r\n            $customer_id = $this->getId();\r\n        }\r\n        \r\n        if (ctype_digit((string)$customer_id)) {\r\n            return $GLOBALS['db']->select('CubeCart_customer_membership', false, array('customer_id' => $customer_id));\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get required fields for state\r\n     * @param int $country_id\r\n     * @return array\r\n     */\r\n    public function getRequiredAddressFields($country_id)\r\n    {\r\n        $fields = array('first_name','last_name','line1','town','country','postcode');\r\n        if (ctype_digit($country_id)) {\r\n            $result = $GLOBALS['db']->select('CubeCart_geo_country', 'status', array('numcode' => $country_id));\r\n            if ($result && $result[0]['status']=='1') {\r\n                array_push($fields, 'state');\r\n            }\r\n        }\r\n        return $fields;\r\n    }\r\n\r\n    /**\r\n     * Is a customer\r\n     *\r\n     * @param bool $force_login\r\n     * @return bool\r\n     */\r\n    public function is($force_login = false)\r\n    {\r\n        if (!$force_login) {\r\n            return $this->_logged_in;\r\n        } else {\r\n            if (!$this->_logged_in) {\r\n                httpredir('?_a=login');\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is the user a bot?\r\n     *\r\n     * @return bool\r\n     */\r\n    public function isBot()\r\n    {\r\n        if (is_null($this->_bot)) {\r\n            $this->_bot = false;\r\n            $agent = strtolower($_SERVER['HTTP_USER_AGENT']);\r\n            foreach ($this->_bot_sigs as $signature) {\r\n                if (strpos($agent, $signature) !== false) {\r\n                    $this->_bot = true;\r\n                }\r\n            }\r\n        }\r\n        return $this->_bot;\r\n    }\r\n\r\n    /**\r\n     * Logout\r\n     */\r\n    public function logout()\r\n    {\r\n        foreach ($GLOBALS['hooks']->load('class.user.logout') as $hook) {\r\n            include $hook;\r\n        }\r\n\r\n        if (isset($_COOKIE['username'])) {\r\n            //\u00a0Unset the 'Remember Me' cookies\r\n            $GLOBALS['session']->set_cookie('username', '', time()-3600);\r\n        }\r\n        //Destory the session\r\n        $GLOBALS['session']->destroy();\r\n        // Redirect to login\r\n        httpredir(currentPage(null, array('_a' => 'login')));\r\n    }\r\n\r\n    /**\r\n     * Request password\r\n     *\r\n     * @param string $email\r\n     * @return bool\r\n     */\r\n    public function passwordRequest($email)\r\n    {\r\n        if (!empty($email) && filter_var($email, FILTER_VALIDATE_EMAIL)) {\r\n            if (($check = $GLOBALS['db']->select('CubeCart_customer', false, \"`email` = '$email' AND `type` = 1\", false, 1, false, false)) !== false) {\r\n                //\u00a0Generate validation key\r\n                $validation = Password::getInstance()->createSalt();\r\n                if (($GLOBALS['db']->update('CubeCart_customer', array('verify' => $validation), array('customer_id' => (int)$check[0]['customer_id']))) !== false) {\r\n                    // Send email\r\n                    if (($user = $GLOBALS['db']->select('CubeCart_customer', false, array('customer_id' => (int)$check[0]['customer_id']), false, 1, false, false)) !== false) {\r\n                        $mailer = new Mailer();\r\n                        $link['reset_link'] = CC_STORE_URL.'/index.php?_a=recovery&validate='.$validation;\r\n                        $data = array_merge($user[0], $link);\r\n                        $content = $mailer->loadContent('account.password_recovery', $GLOBALS['language']->current(), $data);\r\n                        $mailer->sendEmail($user[0]['email'], $content);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Reset password\r\n     *\r\n     * @param email $email\r\n     * @param string $verification\r\n     * @param string $password\r\n     */\r\n    public function passwordReset($email, $verification, $password)\r\n    {\r\n        if (filter_var($email, FILTER_VALIDATE_EMAIL) && !empty($verification) && !empty($password['password']) && !empty($password['passconf']) && ($password['password'] === $password['passconf'])) {\r\n            if (($check = $GLOBALS['db']->select('CubeCart_customer', array('customer_id', 'email'), \"`email` = '$email' AND `verify` = '$verification'\", false, 1, false, false)) !== false) {\r\n                // Remove any blocks\r\n                $GLOBALS['db']->delete('CubeCart_blocker', array('username' => $email));\r\n\r\n                $salt = Password::getInstance()->createSalt();\r\n\r\n                $record = array(\r\n                    'salt'   => $salt,\r\n                    'password'  => Password::getInstance()->getSalted((string)$password['password'], $salt),\r\n                    'verify'  => null,\r\n                    'new_password' => 1\r\n                );\r\n                $where = array(\r\n                    'customer_id' => $check[0]['customer_id'],\r\n                    'email'   => $email,\r\n                    'verify'  => $verification,\r\n                );\r\n                if ($GLOBALS['db']->update('CubeCart_customer', $record, $where)) {\r\n                    if ($this->authenticate($check[0]['email'], (string)$password['password'], false, false, false, false)) {\r\n                        $GLOBALS['gui']->setNotify(($GLOBALS['language']->account['notify_password_recovery_success']));\r\n                        httpredir('?_a=profile');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        $GLOBALS['gui']->setError($GLOBALS['language']->account['error_password_recover']);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Register a new user\r\n     *\r\n     * @return bool\r\n     */\r\n    public function registerUser()\r\n    {\r\n        // Validation\r\n        $error = false;\r\n        foreach ($GLOBALS['hooks']->load('class.user.register_user') as $hook) {\r\n            include $hook;\r\n        }\r\n\r\n        //Validate email\r\n        if (!filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL)) {\r\n            $GLOBALS['gui']->setError($GLOBALS['language']->common['error_email_invalid']);\r\n            $error['email'] = true;\r\n        } else {\r\n            // check for duplicates\r\n            if ($existing = $GLOBALS['db']->select('CubeCart_customer', array('email', 'type', 'customer_id'), array('email' => strtolower($_POST['email'])))) {\r\n                if ($existing[0]['type']==1) {\r\n                    $GLOBALS['gui']->setError($GLOBALS['language']->account['error_email_in_use']);\r\n                    $error['dupe'] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!empty($_POST['password'])) {\r\n            if ($_POST['password'] !== $_POST['passconf']) {\r\n                $GLOBALS['gui']->setError($GLOBALS['language']->account['error_password_mismatch']);\r\n                $error['pass'] = true;\r\n            }\r\n        } else {\r\n            $GLOBALS['gui']->setError($GLOBALS['language']->account['error_password_empty']);\r\n            $error['nopass'] = true;\r\n        }\r\n\r\n        if (empty($_POST['first_name']) || empty($_POST['last_name'])) {\r\n            $GLOBALS['gui']->setError($GLOBALS['language']->account['error_name_required']);\r\n            $error['name'] = true;\r\n        }\r\n\r\n        if ($GLOBALS['gui']->recaptchaRequired()) {\r\n            if (($message = $GLOBALS['session']->get('error', 'recaptcha')) === false) {\r\n                //If the error message from recaptcha fails for some reason:\r\n                $GLOBALS['gui']->setError($GLOBALS['language']->form['verify_human_fail']);\r\n            } else {\r\n                $GLOBALS['gui']->setError($GLOBALS['session']->get('error', 'recaptcha'));\r\n            }\r\n            $error['recaptcha'] = true;\r\n        }\r\n        \r\n        if ($terms = $GLOBALS['db']->select('CubeCart_documents', false, array('doc_terms' => '1'))) {\r\n            if (isset($_POST['terms_agree']) !== true && !$GLOBALS['config']->get('config', 'disable_checkout_terms')) {\r\n                $GLOBALS['gui']->setError($GLOBALS['language']->account['error_terms_agree']);\r\n                $error['terms'] = true;\r\n            }\r\n        }\r\n\r\n        if (!$error) {\r\n            // Format data nicely from mr barney brimstock to Mr Barney Brimstock\r\n            $_POST['title']   = ucwords($_POST['title']);\r\n            $_POST['first_name']  = ucwords($_POST['first_name']);\r\n            $_POST['last_name']  = ucwords($_POST['last_name']);\r\n\r\n            // Register the user\r\n            $_POST['salt']  = Password::getInstance()->createSalt();\r\n            $_POST['password'] = Password::getInstance()->getSalted($_POST['password'], $_POST['salt']);\r\n            $_POST['registered']= time();\r\n            if (($_POST['ip_address'] = get_ip_address()) === false) {\r\n                $_POST['ip_address'] = 'Unknown';\r\n            } // Get IP Address\r\n\r\n            foreach ($GLOBALS['hooks']->load('class.user.register_user.insert') as $hook) {\r\n                include $hook;\r\n            }\r\n            \r\n            foreach ($_POST as $key => $value) {\r\n                $_POST[$key] = filter_var($value, FILTER_SANITIZE_STRING);\r\n            }\r\n\r\n            $_POST['language'] = $GLOBALS['language']->current();\r\n            \r\n            if ($existing[0]['type']==2) {\r\n                $_POST['type'] = 1;\r\n                $_POST['new_password'] = 1;\r\n                $GLOBALS['db']->update('CubeCart_customer', $_POST, array('email' => strtolower($_POST['email'])));\r\n                $insert = $existing[0]['customer_id'];\r\n            } else {\r\n                $insert = $GLOBALS['db']->insert('CubeCart_customer', $_POST);\r\n            }\r\n\r\n            foreach ($GLOBALS['hooks']->load('class.user.register_user.inserted') as $hook) {\r\n                include $hook;\r\n            }\r\n\r\n            if (isset($_POST['mailing_list'])) {\r\n                $newsletter = Newsletter::getInstance();\r\n                $newsletter->subscribe($_POST['email'], $insert);\r\n            }\r\n\r\n            $this->authenticate($_POST['email'], $_POST['passconf']);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Save address to the addressbook\r\n     *\r\n     * @param array $array\r\n     * @param bool $new_user\r\n     * @return bool\r\n     */\r\n    public function saveAddress($array, $new_user = false)\r\n    {\r\n        $array = array_map('trim', $array);\r\n\r\n        if ($this->is() || $new_user) {\r\n            if ($array['billing']) {\r\n                $reset['billing'] = '0';\r\n            } else {\r\n                $array['billing'] = '0';\r\n            }\r\n            if ($array['default']) {\r\n                $reset['default'] = '0';\r\n            } else {\r\n                $array['default'] = '0';\r\n            }\r\n            $user_id = ($new_user) ? $new_user : $this->_user_data['customer_id'];\r\n\r\n            foreach ($GLOBALS['hooks']->load('class.user.saveaddress') as $hook) {\r\n                include $hook;\r\n            }\r\n\r\n            if (isset($reset)) {\r\n                // \"There can only be one\"\r\n                $GLOBALS['db']->update('CubeCart_addressbook', $reset, array('customer_id' => $user_id), true);\r\n            }\r\n\r\n            // Format data nicely from mr barney brimstock to Mr Barney Brimstock & Post/Zip code to uppercase\r\n            $array['title'] = ucwords($array['title']);\r\n            $array['first_name'] = ucwords($array['first_name']);\r\n            $array['last_name'] = ucwords($array['last_name']);\r\n            $array['postcode'] = strtoupper($array['postcode']); // e.g. ab12 34cd to  AB12 34CD\r\n            if (!isset($array['state'])) {\r\n                $array['state'] = '';\r\n            }\r\n\r\n            $hash_values = '';\r\n            $checked_keys = array('billing', 'title', 'first_name', 'last_name', 'company_name', 'line1', 'line2', 'town', 'state', 'postcode', 'country');\r\n            foreach ($array as $key => $value) {\r\n                if (in_array($key, $checked_keys)) {\r\n                    $hash_values .= $value;\r\n                }\r\n            }\r\n\r\n            $array['hash'] = md5($hash_values);\r\n\r\n            if ($result = $GLOBALS['db']->select('CubeCart_addressbook', array('address_id'), array('hash' => $array['hash'], 'customer_id' => $user_id), false, 1, false, false)) {\r\n                $array['address_id'] = $result[0]['address_id'];\r\n            }\r\n\r\n            if (isset($array['address_id']) && is_numeric($array['address_id'])) {\r\n                // Update\r\n                $result = $GLOBALS['db']->update('CubeCart_addressbook', $array, array('address_id' => $array['address_id'], 'customer_id' => $user_id), true);\r\n                $this->_updateBasketAddress($array['address_id']);\r\n                return $result;\r\n            } else {\r\n                // Insert\r\n                $array['customer_id'] = $user_id;\r\n                return $GLOBALS['db']->insert('CubeCart_addressbook', $array);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set customer id for unregistered customers\r\n     *\r\n     * @param int $customer_id\r\n     * @return bool\r\n     */\r\n    public function setGhostId($customer_id = '')\r\n    {\r\n        return $GLOBALS['session']->set('ghost_customer_id', $customer_id);\r\n    }\r\n\r\n    /**\r\n     * Update customer data\r\n     *\r\n     * @param array $update\r\n     * @return bool\r\n     */\r\n    public function update($update = null)\r\n    {\r\n        if (!empty($update) && is_array($update)) {\r\n            unset($update['customer_id']);\r\n            foreach ($update as $k => $v) {\r\n                if (isset($this->_user_data[$k]) && $this->_user_data[$k] != $v) {\r\n                    $this->_user_data[$k] = $v;\r\n                    $this->_changed = true;\r\n                }\r\n            }\r\n            if ($this->_changed) {\r\n                return $this->_update();\r\n            }\r\n        } elseif (isset($_POST['update'])) {\r\n            $remove = array_diff_key($_POST, $this->_user_data);\r\n            $update = $_POST;\r\n            //Remove different keys\r\n            foreach ($remove as $k => $v) {\r\n                unset($update[$k]);\r\n            }\r\n            //Remove things that shouldn't be updated by post\r\n            unset($update['salt']);\r\n            unset($update['customer_id']);\r\n            unset($update['status']);\r\n            unset($update['type']);\r\n\r\n            //Check of any acutal changes\r\n            $diff = arrayRecursiveDiff($update, $this->_user_data);\r\n            if (!empty($diff)) {\r\n                $this->_user_data = array_merge($this->_user_data, $update);\r\n                $this->_changed = true;\r\n                return $this->_update();\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public function load()\r\n    {\r\n        $this->_load();\r\n    }\r\n\r\n    //=====[ Private ]=======================================\r\n\r\n    /**\r\n     * Delete address from basket\r\n     *\r\n     * @param int $id\r\n     * @return bool\r\n     */\r\n    private function _deleteBasketAddress($id)\r\n    {\r\n        $match = false;\r\n        if (isset($GLOBALS['cart']->basket['delivery_address']['address_id']) && $GLOBALS['cart']->basket['delivery_address']['address_id']==$id) {\r\n            unset($GLOBALS['cart']->basket['delivery_address']);\r\n            $GLOBALS['cart']->save();\r\n            $match = true;\r\n        }\r\n        if (isset($GLOBALS['cart']->basket['billing_address']['address_id']) && $GLOBALS['cart']->basket['billing_address']['address_id']==$id) {\r\n            unset($GLOBALS['cart']->basket['billing_address']);\r\n            $GLOBALS['cart']->save();\r\n            $match = true;\r\n        }\r\n        return $match;\r\n    }\r\n\r\n    /**\r\n     * Load customer data\r\n     */\r\n    private function _load()\r\n    {\r\n        foreach ($GLOBALS['hooks']->load('class.user.load') as $hook) {\r\n            include $hook;\r\n        }\r\n\r\n        if (!isset($GLOBALS['session']->session_data['customer_id']) || $GLOBALS['session']->session_data['customer_id'] == '0') {\r\n            return;\r\n        }\r\n        if ($GLOBALS['session']->session_data['customer_id'] && $result = $GLOBALS['db']->select('CubeCart_customer', false, array('customer_id' => (int)$GLOBALS['session']->session_data['customer_id']), false, 1, false, false)) {\r\n            $result[0]['language'] = $this->_validLanguage($result[0]['language']);\r\n            $this->_user_data = $result[0];\r\n            foreach ($GLOBALS['hooks']->load('class.user.load.user') as $hook) {\r\n                include $hook;\r\n            }\r\n            $this->_logged_in = true;\r\n            if (!$GLOBALS['session']->has('user_language', 'client')) {\r\n                $GLOBALS['session']->set('user_language', $result[0]['language'], 'client');\r\n            }\r\n            if ((empty($this->_user_data['email']) || !filter_var($this->_user_data['email'], FILTER_VALIDATE_EMAIL) || empty($this->_user_data['first_name']) || empty($this->_user_data['last_name'])) && !in_array(strtolower($_GET['_a']), array('profile', 'logout'))) {\r\n                // Force account details page\r\n                $GLOBALS['session']->set('temp_profile_required', true);\r\n                httpredir(currentPage(null, array('_a' => 'profile')));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update db\r\n     */\r\n    private function _update()\r\n    {\r\n        return Database::getInstance()->update('CubeCart_customer', $this->_user_data, array('customer_id' => $this->_user_data['customer_id']), true);\r\n    }\r\n\r\n    /**\r\n     * Update address from basket\r\n     *\r\n     * @param int $id\r\n     * @return bool\r\n     */\r\n    private function _updateBasketAddress($id)\r\n    {\r\n        $match = false;\r\n\r\n        $updated_address = $this->getAddress($id, true);\r\n\r\n        if (isset($GLOBALS['cart']->basket['delivery_address']['address_id']) && $GLOBALS['cart']->basket['delivery_address']['address_id']==$id) {\r\n            $GLOBALS['cart']->basket['delivery_address'] = array_merge($GLOBALS['cart']->basket['delivery_address'], $updated_address);\r\n            $GLOBALS['cart']->save();\r\n            $match = true;\r\n        }\r\n        if (isset($GLOBALS['cart']->basket['billing_address']['address_id']) && $GLOBALS['cart']->basket['billing_address']['address_id']==$id) {\r\n            $GLOBALS['cart']->basket['billing_address'] = array_merge($GLOBALS['cart']->basket['billing_address'], $updated_address);\r\n            $GLOBALS['cart']->save();\r\n            $match = true;\r\n        }\r\n        return $match;\r\n    }\r\n    /**\r\n     * New Customer ID must not be less than max order summary customer ID\r\n     *\r\n     * @return false/int\r\n     */\r\n    private function _validCustomerId()\r\n    {\r\n        return false;\r\n        /* Kept for hiistorical purposes\r\n        $customers = $GLOBALS['db']->misc(\"SHOW TABLE STATUS LIKE '\".$GLOBALS['config']->get('config', 'dbprefix').\"CubeCart_customer'\", false);\r\n        \r\n        $orders = $GLOBALS['db']->misc(\"SELECT MAX(`customer_id`) as `max_id` FROM `\".$GLOBALS['config']->get('config', 'dbprefix').\"CubeCart_order_summary`\", false);\r\n        \r\n        // Do we have any orders yet and is the max customer_id > 0?\r\n        if ($orders && $orders[0]['max_id'] > 0) {\r\n            // Do we have any customers yet and is the auto increment > 0?\r\n            if ($customers && $customers[0]['Auto_increment'] > 0) {\r\n                // Are there existing customers orders with higher customer id than next customer id?\r\n                if ($orders[0]['max_id'] >= $customers[0]['Auto_increment']) {\r\n                    // Finally be sure proposed ID isn't in use\r\n                    $id = $orders[0]['max_id']+1;\r\n                    if($GLOBALS['db']->select('CubeCart_customer', false, array('customer_id' => $id), false, 1, false, false) == false) {\r\n                        return $id;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Validate users language string\r\n     *\r\n     * @return string\r\n     */\r\n    private function _validLanguage($language)\r\n    {\r\n        $default_language = $GLOBALS['config']->get('config', 'default_language');\r\n        if (!preg_match(Language::LANG_REGEX, $language)) {\r\n            return $default_language;\r\n        } elseif ($language!==$default_language) {\r\n            if ($enabled_languages = $GLOBALS['config']->get('languages')) {\r\n                if (!isset($enabled_languages[$language])) {\r\n                    return $default_language;\r\n                } elseif ($enabled_languages[$language]=='0') {\r\n                    return $default_language;\r\n                }\r\n            } else {\r\n                return $default_language;\r\n            }\r\n        }\r\n        return $language;\r\n    }\r\n}\r\n"], "filenames": ["classes/admin.class.php", "classes/session.class.php", "classes/user.class.php"], "buggy_code_start_loc": [351, 530, 277], "buggy_code_end_loc": [351, 530, 277], "fixing_code_start_loc": [352, 531, 278], "fixing_code_end_loc": [353, 538, 279], "type": "CWE-384", "message": "Cubecart 6.4.2 allows Session Fixation. The application does not generate a new session cookie after the user is logged in. A malicious user is able to create a new session cookie value and inject it to a victim. After the victim logs in, the injected cookie becomes valid, giving the attacker access to the user's account through the active session.", "other": {"cve": {"id": "CVE-2021-33394", "sourceIdentifier": "cve@mitre.org", "published": "2021-05-27T19:15:08.327", "lastModified": "2021-06-02T17:31:31.630", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cubecart 6.4.2 allows Session Fixation. The application does not generate a new session cookie after the user is logged in. A malicious user is able to create a new session cookie value and inject it to a victim. After the victim logs in, the injected cookie becomes valid, giving the attacker access to the user's account through the active session."}, {"lang": "es", "value": "Cubecart versi\u00f3n 6.4.2, permite la fijaci\u00f3n de sesiones.&#xa0;La aplicaci\u00f3n no genera una nueva cookie de sesi\u00f3n despu\u00e9s de que el usuario inicia sesi\u00f3n. Un usuario malicioso puede crear un nuevo valor de cookie de sesi\u00f3n e inyectarlo a una v\u00edctima.&#xa0;Despu\u00e9s de que la v\u00edctima inicia sesi\u00f3n, la cookie inyectada se vuelve v\u00e1lida, dandole al atacante acceso a la cuenta del usuario por medio de la sesi\u00f3n activa"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-384"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cubecart:cubecart:6.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "4108CA29-9880-4D44-A968-F98A15D51507"}]}]}], "references": [{"url": "https://github.com/cubecart/v6/commit/aac7b3a13a43e302d91f94a120417b2fda737d0f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/xoffense/POC/blob/main/Session%20Fixation%20in%20Cubecart%206.4.2.md", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/cubecart/v6/commit/aac7b3a13a43e302d91f94a120417b2fda737d0f"}}