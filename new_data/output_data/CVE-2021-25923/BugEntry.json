{"buggy_code": ["<?php\n\n/*\n * This program sets the global variables.\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Stephen Waite <stephen.waite@cmsvt.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2015 Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (c) 2018 Stephen Waite <stephen.waite@cmsvt.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n//  Current supported languages:    // Allow capture of term for translation:\n//   Albanian                       // xl('Albanian')\n//   Amharic                        // xl('Amharic')\n//   Arabic                         // xl('Arabic')\n//   Armenian                       // xl('Armenian')\n//   Bahasa Indonesia               // xl('Bahasa Indonesia')\n//   Bengali                        // xl('Bengali')\n//   Bosnian                        // xl('Bosnian')\n//   Bulgarian                      // xl('Bulgarian')\n//   Chinese (Simplified)           // xl('Chinese (Simplified)')\n//   Chinese (Traditional)          // xl('Chinese (Traditional)')\n//   Croatian                       // xl('Croatian')\n//   Czech                          // xl('Czech')\n//   Danish                         // xl('Danish')\n//   Dutch                          // xl('Dutch')\n//   English (Indian)               // xl('English (Indian)')\n//   English (Standard)             // xl('English (Standard)')\n//   Estonian                       // xl('Estonian')\n//   Filipino                       // xl('Filipino')\n//   Finnish                        // xl('Finnish')\n//   French                         // xl('French (Standard)')\n//   French                         // xl('French (Canadian)')\n//   Georgian                       // xl('Georgian')\n//   German                         // xl('German')\n//   Greek                          // xl('Greek')\n//   Hebrew                         // xl('Hebrew')\n//   Hindi                          // xl('Hindi')\n//   Hungarian                      // xl('Hungarian')\n//   Italian                        // xl('Italian')\n//   Japanese                       // xl('Japanese')\n//   Korean                         // xl('Korean')\n//   Lithuanian                     // xl('Lithuanian')\n//   Marathi                        // xl('Marathi')\n//   Mongolian                      // xl('Mongolian')\n//   Norwegian                      // xl('Norwegian')\n//   Persian                        // xl('Persian')\n//   Polish                         // xl('Polish')\n//   Portuguese (Brazilian)         // xl('Portuguese (Brazilian)')\n//   Portuguese (European)          // xl('Portuguese (European)')\n//   Portuguese (European)          // xl('Portuguese (Angolan)')\n//   Romanian                       // xl('Romanian')\n//   Russian                        // xl('Russian')\n//   Serbian                        // xl('Serbian')\n//   Sinhala                        // xl('Sinhala')\n//   Slovak                         // xl('Slovak')\n//   Somali                         // xl('Somali')\n//   Spanish (Latin American)       // xl('Spanish (Latin American)')\n//   Spanish (Spain)                // xl('Spanish (Spain)')\n//   Swedish                        // xl('Swedish')\n//   Tamil                          // xl('Tamil')\n//   Telugu                         // xl('Telugu')\n//   Thai                           // xl('Thai')\n//   Turkish                        // xl('Turkish')\n//   Ukrainian                      // xl('Ukrainian')\n//   Urdu                           // xl('Urdu')\n//   Vietnamese                     // xl('Vietnamese')\n\nuse OpenEMR\\Services\\Globals\\GlobalsService;\nuse OpenEMR\\Events\\Globals\\GlobalsInitializedEvent;\n\n// OS-dependent stuff.\nif (stristr(PHP_OS, 'WIN')) {\n    // MS Windows\n    $mysql_bin_dir = 'C:/xampp/mysql/bin';\n    $perl_bin_dir = 'C:/xampp/perl/bin';\n    $temporary_files_dir = 'C:/windows/temp';\n    $backup_log_dir = 'C:/windows/temp';\n} else {\n    // Everything else\n    $mysql_bin_dir = '/usr/bin';\n    $perl_bin_dir = '/usr/bin';\n    $temporary_files_dir = '/tmp';\n    $backup_log_dir = '/tmp';\n}\n\n// Language constant declarations:\n// xl('Appearance')\n// xl('Locale')\n// xl('Features')\n// xl('Calendar')\n// xl('Security')\n// xl('Notifications')\n// xl('Miscellaneous')\n\n// List of user specific tabs and globals\n$USER_SPECIFIC_TABS = array('Appearance',\n    'Locale',\n    'Features',\n    'Billing',\n    'Report',\n    'Calendar',\n    'CDR',\n    'Connectors');\n$USER_SPECIFIC_GLOBALS = array('default_top_pane',\n    'default_second_tab',\n    'theme_tabs_layout',\n    'css_header',\n    'enable_compact_mode',\n    'vertical_responsive_menu',\n    'menu_styling_vertical',\n    'search_any_patient',\n    'default_encounter_view',\n    'gbl_pt_list_page_size',\n    'gbl_pt_list_new_window',\n    'units_of_measurement',\n    'us_weight_format',\n    'date_display_format',\n    'time_display_format',\n    'enable_help',\n    'text_templates_enabled',\n    'posting_adj_disable',\n    'messages_due_date',\n    'expand_form',\n    'ledger_begin_date',\n    'print_next_appointment_on_ledger',\n    'calendar_view_type',\n    'event_color',\n    'pat_trkr_timer',\n    'ptkr_visit_reason',\n    'ptkr_date_range',\n    'ptkr_start_date',\n    'ptkr_end_date',\n    'checkout_roll_off',\n    'patient_birthday_alert',\n    'patient_birthday_alert_manual_off',\n    'erx_import_status_message',\n    'weno_provider_password');\n\n// Gets array of time zones supported by PHP.\n//\nfunction gblTimeZones()\n{\n    $zones = timezone_identifiers_list();\n    $arr = array('' => xl('Unassigned'));\n    foreach ($zones as $zone) {\n        $arr[$zone] = str_replace('_', ' ', $zone);\n    }\n\n    return $arr;\n}\n\n$GLOBALS_METADATA = array(\n\n    // Appearance Tab\n    //\n    'Appearance' => array(\n\n        'default_top_pane' => array(\n            xl('Main Top Pane Screen(Or Default First Tab)'),       // descriptive name\n            array(\n                'main_info.php' => xl('Calendar Screen'),\n                '../new/new.php' => xl('Patient Search/Add Screen'),\n                '../../interface/main/finder/dynamic_finder.php' => xl('Patient Finder Screen'),\n                '../../interface/patient_tracker/patient_tracker.php?skip_timeout_reset=1' => xl('Patient Flow Board'),\n                '../../interface/main/messages/messages.php?form_active=1' => xl('Messages Screen')\n            ),\n            'main_info.php',                  // default = calendar\n            xl('Main Top Pane Screen(Or Default First Tab)')\n        ),\n\n        'default_second_tab' => array(\n            xl('Default Second Tab'),       // descriptive name\n            array(\n                '' => xl('None'),\n                '../../interface/main/messages/messages.php?form_active=1' => xl('Messages Screen'),\n                'main_info.php' => xl('Calendar Screen'),\n                '../new/new.php' => xl('Patient Search/Add Screen'),\n                '../../interface/main/finder/dynamic_finder.php' => xl('Patient Finder Screen'),\n                '../../interface/patient_tracker/patient_tracker.php?skip_timeout_reset=1' => xl('Patient Flow Board'),\n            ),\n            '../../interface/main/messages/messages.php?form_active=1',    // default = messages\n            xl('Default Second Tab')\n        ),\n\n        'theme_tabs_layout' => array(\n            xl('Tabs Layout Theme') . '*',\n            'tabs_css',\n            'tabs_style_full.css',\n            xl('Theme of the tabs layout (need to logout and then login to see this new setting).')\n        ),\n\n        'login_page_layout' => array(\n            xl('Login Page Layout') . '*',\n            array(\n                'center' => xl(\"Centered Layout\"),\n                'left' => xl(\"Left-Form Layout\"),\n                'right' => xl(\"Right-Form Layout\"),\n            ),\n            'center',\n            xl('Changes the layout of the login page.')\n        ),\n\n        'css_header' => array(\n            // Note: Do not change this as it is only for theme defaults and adding themes here does nothing\n            xl('General Theme') . '*',\n            'css',\n            'style_light.css',\n            xl('Pick a general theme (need to logout/login after changing this setting).')\n        ),\n\n        'enable_compact_mode' => array(\n            xl('Enable Compact Mode'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Changes the current theme to be more compact.')\n        ),\n\n        'menu_styling_vertical' => array(\n            xl('Vertical Menu Style for Frames'),\n            array(\n                '0' => xl('Tree'),\n                '1' => xl('Sliding'),\n            ),\n            '1',\n            xl('Vertical Menu Style for frame based layouts')\n        ),\n\n        'search_any_patient' => array(\n            xl('Search Patient By Any Demographics'),\n            array(\n                'dual' => xl('Dual'),\n                'comprehensive' => xl('Comprehensive'),\n                'fixed' => xl('Fixed'),\n                'none' => xl('None'),\n            ),\n            'dual', // default\n            xl('Search Patient By Any Demographics, Dual additionally lets direct access to Patient Finder, Comprehensive has collapsed input box, Fixed is similar to Dual with fixed size, None is do not show')\n        ),\n\n        'default_encounter_view' => array(\n            xl('Default Encounter View'),               // descriptive name\n            array(\n                '0' => xl('Clinical View'),\n                '1' => xl('Billing View'),\n            ),\n            '0',                              // default = tree menu\n            xl('Choose your default encounter view')\n        ),\n\n        'gbl_nav_area_width' => array(\n            xl('Navigation Area Width for Frames'),\n            'num',\n            '175',\n            xl('Width in pixels of the left navigation frame in frame based layout.')\n        ),\n\n        'openemr_name' => array(\n            xl('Application Title'),\n            'text',\n            'OpenEMR',\n            xl('Application name for login page and main window title.')\n        ),\n\n        'enable_group_therapy' => array(\n            xl('Enable Group Therapy'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Enables groups module in system.')\n        ),\n\n        'full_new_patient_form' => array(\n            xl('New Patient Form'),\n\n            array(\n                '0' => xl('Old-style static form without search or duplication check'),\n                '1' => xl('All demographics fields, with search and duplication check'),\n                '2' => xl('Mandatory or specified fields only, search and dup check'),\n                '3' => xl('Mandatory or specified fields only, dup check, no search'),\n                '4' => xl('Mandatory or specified fields only, use patient validation Zend module'),\n            ),\n            '1',                              // default\n            xl('Style of form used for adding new patients')\n        ),\n\n        'gbl_edit_patient_form' => array(\n            xl('Modify Patient Form'),\n\n            array(\n                '0' => xl('Standard check'),\n                '1' => xl('Zend Module check in addition to standard check')\n            ),\n            '0',                              // default\n            xl('Validation mechanism for when modifying patient demographics.')\n        ),\n\n        'patient_search_results_style' => array(\n            xl('Patient Search Results Style'),\n            array(\n                '0' => xl('Encounter statistics'),\n                '1' => xl('Mandatory and specified fields'),\n            ),\n            '0',                              // default\n            xl('Type of columns displayed for patient search results')\n        ),\n\n        'gbl_tall_nav_area' => array(\n            xl('Tall Navigation Area'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Navigation area uses full height of frameset')\n        ),\n\n        'gbl_nav_visit_forms' => array(\n            xl('Navigation Area Visit Forms'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Navigation area includes encounter forms')\n        ),\n\n        'simplified_prescriptions' => array(\n            xl('Simplified Prescriptions'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Omit form, route and interval which then become part of dosage')\n        ),\n\n        'simplified_copay' => array(\n            xl('Simplified Co-Pay'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Omit method of payment from the co-pay panel')\n        ),\n\n        'use_charges_panel' => array(\n            xl('Use Charges Panel'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Enables the old Charges panel for entering billing codes and payments. Not recommended, use the Fee Sheet instead.')\n        ),\n\n        // TajEmo Work BY CB 2012/06/21 10:42:31 AM added option to Hide Fees\n        'enable_fees_in_left_menu' => array(\n            xl('Enable Fees Submenu'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Enable Fees Submenu')\n        ),\n        'enable_batch_payment' => array(\n            xl('Enable Batch Payment'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Enable Batch Payment')\n        ),\n        'enable_posting' => array(\n            xl('Enable Posting'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Enable Posting')\n        ),\n        // EDI history  2012-09-13\n        'enable_edihistory_in_left_menu' => array(\n            xl('Enable EDI History'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('EDI History (under Fees) for storing and interpreting EDI claim response files')\n        ),\n        //\n        'online_support_link' => array(\n            xl('Online Support Link'),\n            'text',                           // data type\n            'http://open-emr.org/',\n            xl('URL for OpenEMR support.')\n        ),\n\n        'support_phone_number' => array(\n            xl('Support Phone Number'),\n            'text',\n            '',\n            xl('Phone Number for Vendor Support that Appears on the About Page.')\n        ),\n\n        'encounter_page_size' => array(\n            xl('Encounter Page Size'),\n            array(\n                '0' => xl('Show All'),\n                '5' => '5',\n                '10' => '10',\n                '15' => '15',\n                '20' => '20',\n                '25' => '25',\n                '50' => '50',\n            ),\n            '20',\n            xl('Number of encounters to display per page.')\n        ),\n\n        'gbl_pt_list_page_size' => array(\n            xl('Patient List Page Size'),\n            array(\n                '10' => '10',\n                '25' => '25',\n                '50' => '50',\n                '100' => '100',\n            ),\n            '10',\n            xl('Number of patients to display per page in the patient list.')\n        ),\n\n        'gbl_pt_list_new_window' => array(\n            xl('Patient List New Window'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Default state of New Window checkbox in the patient list.')\n        ),\n\n        'num_of_messages_displayed' => array(\n            xl('Number of Messages Displayed in Patient Summary'),\n            'num',\n            '3',\n            xl('This is the number of messages that will be displayed in the messages widget in the patient summary screen.')\n        ),\n\n        'gbl_vitals_options' => array(\n            xl('Vitals Form Options'),\n            array(\n                '0' => xl('Standard'),\n                '1' => xl('Omit circumferences'),\n            ),\n            '0',                              // default\n            xl('Special treatment for the Vitals form')\n        ),\n\n        'gb_how_sort_list' => array(\n            xl('How to sort a drop-lists'),\n            array(\n                '0' => xl('Sort by seq'),\n                '1' => xl('Sort alphabetically')\n            ),\n            '0',\n            xl('What kind of sorting will be in the drop lists.')\n        ),\n\n        'show_label_login' => array(\n            xl('Show Title on Login'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Show Title on Login')\n        ),\n\n        'extra_logo_login' => array(\n            xl('Show Extra Logo on Login'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Show Extra Logo on Login')\n        ),\n\n        'tiny_logo_1' => array(\n            xl('Show Mini Logo 1'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Show Mini Logo 1')\n        ),\n\n        'tiny_logo_2' => array(\n            xl('Show Mini Logo 2'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Show Mini Logo 2')\n        ),\n\n        'prevent_browser_refresh' => array(\n            xl('Prevent Web Browser Refresh') . '*',\n            array(\n                '0' => xl('Do not warn or prevent web browser refresh'),\n                '1' => xl('Warn, but do not prevent web browser refresh'),\n                '2' => xl('Warn and prevent web browser refresh')\n            ),\n            '2',                              // default = true\n            xl('Recommended setting is warn and prevent web browser refresh. Only use other settings if needed and use at own risk.')\n        ),\n\n    ),\n\n    // Locale Tab\n    //\n    'Locale' => array(\n\n        'language_default' => array(\n            xl('Default Language'),\n            'lang',                           // data type\n            'English (Standard)',             // default = english\n            xl('Default language if no other is allowed or chosen.')\n        ),\n\n        'language_menu_showall' => array(\n            xl('All Languages Allowed'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Allow all available languages as choices on menu at login.')\n        ),\n\n        'language_menu_other' => array(\n            xl('Allowed Languages'),\n            'm_lang',                         // data type\n            '',                               // default = none\n            xl('Select which languages, if any, may be chosen at login. (only pertinent if above All Languages Allowed is turned off)')\n        ),\n\n        'allow_debug_language' => array(\n            xl('Allow Debugging Language'),\n            'bool',                           // data type\n            '0',                              // default = true during development and false for production releases\n            xl('This will allow selection of the debugging (\\'dummy\\') language.')\n        ),\n\n        'translate_no_safe_apostrophe' => array(\n            xl('Do Not Use Safe Apostrophe'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will turn off use of safe apostrophe, which is done by converting \\' and \" to `.(it is highly recommended that this setting is turned off and that safe apostrophe\\'s are used)')\n        ),\n\n        'translate_layout' => array(\n            xl('Translate Layouts'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Is text from form layouts to be translated?')\n        ),\n\n        'translate_lists' => array(\n            xl('Translate Lists'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Is text from lists to be translated?')\n        ),\n\n        'translate_gacl_groups' => array(\n            xl('Translate Access Control Groups'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Are access control group names to be translated?')\n        ),\n\n        'translate_form_titles' => array(\n            xl('Translate Patient Note Titles'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Are patient note titles to be translated?')\n        ),\n\n        'translate_document_categories' => array(\n            xl('Translate Document Categories'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Are document category names to be translated?')\n        ),\n\n        'translate_appt_categories' => array(\n            xl('Translate Appointment Categories'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Are appointment category names to be translated?')\n        ),\n\n        'units_of_measurement' => array(\n            xl('Units for Visit Forms'),\n            array(\n                '1' => xl('Show both US and metric (main unit is US)'),\n                '2' => xl('Show both US and metric (main unit is metric)'),\n                '3' => xl('Show US only'),\n                '4' => xl('Show metric only'),\n            ),\n            '1',                              // default = Both/US\n            xl('Applies to the Vitals form and Growth Chart')\n        ),\n\n        'us_weight_format' => array(\n            xl('Display Format for US Weights'),\n            array(\n                '1' => xl('Show pounds as decimal value'),\n                '2' => xl('Show pounds and ounces')\n            ),\n            '1',\n            xl('Applies to Vitals form')\n        ),\n\n        'phone_country_code' => array(\n            xl('Telephone Country Code'),\n            'num',\n            '1',                              // default = North America\n            xl('1 = North America. See http://www.wtng.info/ for a list of other country codes.')\n        ),\n\n        'date_display_format' => array(\n            xl('Date Display Format'),\n            array(\n                '0' => xl('YYYY-MM-DD'),\n                '1' => xl('MM/DD/YYYY'),\n                '2' => xl('DD/MM/YYYY'),\n            ),\n            '0',\n            xl('Format used to display most dates.')\n        ),\n\n        'time_display_format' => array(\n            xl('Time Display Format'),\n            array(\n                '0' => xl('24 hr'),\n                '1' => xl('12 hr'),\n            ),\n            '0',\n            xl('Format used to display most times.')\n        ),\n\n        'gbl_time_zone' => array(\n            xl('Time Zone'),\n            gblTimeZones(),\n            '',\n            xl('If unassigned will default to php.ini setting for date.timezone.')\n        ),\n\n        'currency_decimals' => array(\n            xl('Currency Decimal Places'),\n            array(\n                '0' => xl('0'),\n                '1' => xl('1'),\n                '2' => xl('2'),\n            ),\n            '2',\n            xl('Number of digits after decimal point for currency, usually 0 or 2.')\n        ),\n\n        'currency_dec_point' => array(\n            xl('Currency Decimal Point Symbol'),\n            array(\n                '.' => xl('Period'),\n                ',' => xl('Comma'),\n            ),\n            '.',\n            xl('Symbol used as the decimal point for currency. Not used if Decimal Places is 0.')\n        ),\n\n        'currency_thousands_sep' => array(\n            xl('Currency Thousands Separator'),\n            array(\n                ',' => xl('Comma'),\n                '.' => xl('Period'),\n                ' ' => xl('Space'),\n                '' => xl('None'),\n            ),\n            ',',\n            xl('Symbol used to separate thousands for currency.')\n        ),\n\n        'gbl_currency_symbol' => array(\n            xl('Currency Designator'),\n            'text',                           // data type\n            '$',                              // default\n            xl('Code or symbol to indicate currency')\n        ),\n        'age_display_format' => array(xl('Age Display Format'),\n            array(\n                '0' => xl('Years or months'),\n                '1' => xl('Years, months and days')\n            ),\n            '0',\n            xl('Format for age display')\n        ),\n        'age_display_limit' => array(\n            xl('Age in Years for Display Format Change'),\n            'num',\n            '3',\n            xl('If YMD is selected for age display, switch to just Years when patients older than this value in years')\n        ),\n        // Reference - https://en.wikipedia.org/wiki/Workweek_and_weekend#Around_the_world\n        'weekend_days' => array(\n            xl('Your weekend days'),\n            array(\n                '6,0' => xl('Saturday') . ' - ' . xl('Sunday'),\n                '0' => xl('Sunday'),\n                '5' => xl('Friday'),\n                '6' => xl('Saturday'),\n                '5,6' => xl('Friday') . ' - ' . xl('Saturday'),\n            ),\n            '6,0'\n        , xl('which days are your weekend days?')\n        )\n\n    ),\n\n    // Features Tab\n    //\n    'Features' => array(\n\n        'specific_application' => array(\n            xl('Specific Application'),\n            array(\n                '0' => xl('None'),\n                '2' => xl('IPPF'),\n                '3' => xl('Weight loss clinic'),\n            ),\n            '0',                              // default\n            xl('Indicator for specialized usage')\n        ),\n\n        'inhouse_pharmacy' => array(\n            xl('Drugs and Products'),\n            array(\n                '0' => xl('Do not inventory and sell any products'),\n                '1' => xl('Inventory and sell drugs only'),\n                '2' => xl('Inventory and sell both drugs and non-drug products'),\n                '3' => xl('Products but no prescription drugs and no templates'),\n            ),\n            '0',                              // default\n            xl('Option to support inventory and sales of products')\n        ),\n\n        'default_visit_category' => array(\n            xl('Default Visit Category'),\n            'default_visit_category',\n            '_blank',\n            xl('Define a default visit category'),\n        ),\n\n        'enable_follow_up_encounters' => array(\n            xl('Enable follow-up encounters'),\n            'bool',\n            '0',\n            xl('Enable follow-up encounters feature')\n        ),\n\n        'disable_chart_tracker' => array(\n            xl('Disable Chart Tracker'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Removes the Chart Tracker feature')\n        ),\n\n        'disable_immunizations' => array(\n            xl('Disable Immunizations'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Removes support for immunizations')\n        ),\n\n        'disable_prescriptions' => array(\n            xl('Disable Prescriptions'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Removes support for prescriptions')\n        ),\n\n        'text_templates_enabled' => array(\n            xl('Enable Text Templates in Encounter Forms'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Allow Double Click to select Nation Note text template from any encounter form text area')\n        ),\n\n        'omit_employers' => array(\n            xl('Omit Employers'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Omit employer information in patient demographics')\n        ),\n\n        'select_multi_providers' => array(\n            xl('Support Multi-Provider Events'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Support calendar events that apply to multiple providers')\n        ),\n\n        'disable_non_default_groups' => array(\n            xl('Disable User Groups'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Normally this should be checked. Not related to access control.')\n        ),\n\n        'ignore_pnotes_authorization' => array(\n            xl('Skip Authorization of Patient Notes'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Do not require patient notes to be authorized')\n        ),\n\n        'support_encounter_claims' => array(\n            xl('Allow Encounter Claims'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Allow creation of claims containing diagnoses but not procedures or charges. Most clinics do not want this.')\n        ),\n\n        'advance_directives_warning' => array(\n            xl('Advance Directives Warning'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Display advance directives in the demographics page.')\n        ),\n\n        'configuration_import_export' => array(\n            xl('Configuration Export/Import'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Support export/import of configuration data via the Backup page.')\n        ),\n\n        'restrict_user_facility' => array(\n            xl('Restrict Users to Facilities'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Restrict non-authorized users to the Schedule Facilities set in User admin.')\n        ),\n\n        'set_facility_cookie' => array(\n            xl('Remember Selected Facility'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Set a facility cookie to remember the selected facility between logins.')\n        ),\n\n        'login_into_facility' => array(\n            xl('Login Into Facility'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Select your current facility in the login page')\n        ),\n\n        'receipts_by_provider' => array(\n            xl('Print Receipts by Provider'),\n            'bool',\n            '0',                              // default\n            xl('Causes Receipts to Print Encounter/Primary Provider Info')\n        ),\n\n        'discount_by_money' => array(\n            xl('Discounts as Monetary Amounts'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Discounts at checkout time are entered as money amounts, as opposed to percentage.')\n        ),\n\n        'gbl_visit_referral_source' => array(\n            xl('Referral Source for Encounters'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('A referral source may be specified for each visit.')\n        ),\n\n        'gbl_mask_patient_id' => array(\n            xl('Mask for Patient IDs'),\n            'text',                           // data type\n            '',                               // default\n            xl('Specifies formatting for the external patient ID.  # = digit, @ = alpha, * = any character.  Empty if not used.')\n        ),\n\n        'gbl_mask_invoice_number' => array(\n            xl('Mask for Invoice Numbers'),\n            'text',                           // data type\n            '',                               // default\n            xl('Specifies formatting for invoice reference numbers.  # = digit, @ = alpha, * = any character.  Empty if not used.')\n        ),\n\n        'gbl_mask_product_id' => array(\n            xl('Mask for Product IDs'),\n            'text',                           // data type\n            '',                               // default\n            xl('Specifies formatting for product NDC fields.  # = digit, @ = alpha, * = any character.  Empty if not used.')\n        ),\n\n        'hide_billing_widget' => array(\n            xl('Hide Billing Widget'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will hide the Billing Widget in the Patient Summary screen')\n        ),\n\n        'force_billing_widget_open' => array(\n            xl('Force Billing Widget Open'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will force the Billing Widget in the Patient Summary screen to always be open.')\n        ),\n\n        'activate_ccr_ccd_report' => array(\n            xl('Activate CCR/CCD Reporting'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('This will activate the CCR(Continuity of Care Record) and CCD(Continuity of Care Document) reporting.')\n        ),\n\n        'drive_encryption' => array(\n            xl('Enable Encryption of Items Stored on Drive'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('This will enable encryption of items that are stored on the drive.')\n        ),\n\n        'couchdb_encryption' => array(\n            xl('Enable Encryption of Items Stored on CouchDB'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('This will enable encryption of items that are stored on CouchDB.')\n        ),\n\n        'hide_document_encryption' => array(\n            xl('Hide Encryption/Decryption Options In Document Management'),\n            'bool',                           // data type\n            '0',                              // default = true\n            xl('This will deactivate document the encryption and decryption features, and hide them in the UI.')\n        ),\n\n        'use_custom_immun_list' => array(\n            xl('Use Custom Immunization List'),\n            'bool',                           // data type\n            '0',                              // default = true\n            xl('This will use the custom immunizations list rather than the standard CVX immunization list.')\n        ),\n\n        'amendments' => array(\n            xl('Amendments'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Enable amendments feature')\n        ),\n\n        'allow_pat_delete' => array(\n            xl('Allow Administrators to Delete Patients'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Allow Administrators to Delete Patients')\n\n        ),\n\n        'observation_results_immunization' => array(\n            xl('Immunization Observation Results'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Observation Results in Immunization')\n        ),\n\n        'enable_help' => array(\n           xl('Enable Help Modal'),\n            array(\n                '0' => xl('Hide Help Modal'),\n                '1' => xl('Show Help Modal'),\n                '2' => xl('Disable Help Modal'),\n            ),                       // data type\n            '1',                     // default = Print End of Day Report 1\n            xl('This will allow the display of help modal on help enabled pages')\n        ),\n        'messages_due_date' => array(\n            xl('Messages - due date'),\n            'bool',                           // data type\n            '0',                              // default false\n            xl('Enables choose due date to message')\n        ),\n\n        'expand_form' => array(\n            xl('Expand Form'),\n            'bool',                           // data type\n            '1',                              // default false\n            xl('Open all expandable forms in expanded state')\n        ),\n\n    ),\n    // Report Tab\n    //\n    'Report' => array(\n\n        'use_custom_daysheet' => array(\n            xl('Use Custom End of Day Report'),\n            array(\n                '0' => xl('None'),\n                '1' => xl('Print End of Day Report 1'),\n                '2' => xl('Print End of Day Report 2'),\n                '3' => xl('Print End of Day Report 3'),\n            ),                       // data type\n            '1',                     // default = Print End of Day Report 1\n            xl('This will allow the use of the custom End of Day report and indicate which report to use.')\n        ),\n\n        'daysheet_provider_totals' => array(\n            xl('End of Day by Provider or allow Totals Only'),\n            array(\n                '0' => xl('Provider'),\n                '1' => xl('Totals Only'),\n            ),\n            '1',                              // default\n            xl('This specifies the Printing of the Custom End of Day Report grouped Provider or allow the Printing of Totals Only')\n        ),\n\n        'ledger_begin_date' => array(\n            xl('Beginning Date for Ledger Report'),\n            array(\n                'Y1' => xl('One Year Ago'),\n                'Y2' => xl('Two Years Ago'),\n                'M6' => xl('Six Months Ago'),\n                'M3' => xl('Three Months Ago'),\n                'M1' => xl('One Month Ago'),\n                'D1' => xl('One Day Ago'),\n            ),\n            'Y1',                     // default = One Year\n            xl('This is the Beginning date for the Ledger Report.')\n        ),\n\n        'print_next_appointment_on_ledger' => array(\n            xl('Print the Next Appointment on the Bottom of the Ledger'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('This Will Print the Next Appointment on the Bottom of the Patient Ledger')\n        ),\n\n        'sales_report_invoice' => array(\n            xl('Display Invoice Number or Patient Name or Both in the Sales Report'),\n            array(\n                '0' => xl('Invoice Number'),\n                '1' => xl('Patient Name and ID'),\n                '2' => xl('Patient Name and Invoice'),\n            ),\n            '2',                              // default = 2\n            xl('This will Display the Invoice Number in the Sales Report or the Patient Name and ID or Patient Name and Invoice Number.')\n        ),\n\n        'cash_receipts_report_invoice' => array(\n            xl('Display Invoice Number or Patient Name in the Cash Receipt Report'),\n            array(\n                '0' => xl('Invoice Number'),\n                '1' => xl('Patient Name'),\n            ),\n            '0',                              // default = 0\n            xl('Display Invoice Number or Patient Name in the Cash Receipt Report')\n        ),\n\n    ),\n\n    // Billing Tab\n\n    'Billing' => array(\n\n        'ub04_support' => array(\n            xl('Activate UB04/837I Claim Support'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Allow institutional claims support.')\n        ),\n\n        'top_ubmargin_default' => array(\n            xl('Default top print margin for UB04'),\n            'num', // data type\n            '14', // default\n            xl('This is the default top print margin for UB04. It will adjust the final printed output up or down.')\n        ),\n\n        'left_ubmargin_default' => array(\n            xl('Default left print margin for UB04'),\n            'num', // data type\n            '11', // default\n            xl('This is the default left print margin for UB04. It will adjust the final printed output left or right.')\n        ),\n\n        'cms_top_margin_default' => array(\n            xl('Default top print margin for CMS 1500'),\n            'num', // data type\n            '24', // default\n            xl('This is the default top print margin for CMS 1500. It will adjust the final printed output up or down.')\n        ),\n\n        'cms_left_margin_default' => array(\n            xl('Default left print margin for CMS 1500'),\n            'num', // data type\n            '20', // default\n            xl('This is the default left print margin for CMS 1500. It will adjust the final printed output left or right.')\n        ),\n\n        'preprinted_cms_1500' => array(\n            xl('Prints the CMS 1500 on the Preprinted form'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Overlay CMS 1500 on the Preprinted form')\n        ),\n\n        'cms_1500_box_31_format' => array(\n            xl('CMS 1500: Box 31 Format'),\n            array(\n                '0' => xl('Signature on File'),\n                '1' => xl('Firstname Lastname'),\n                '2' => xl('None'),\n            ),\n            '0',                              // default\n            xl('This specifies whether to include date in Box 31.')\n        ),\n\n        'cms_1500_box_31_date' => array(\n            xl('CMS 1500: Date in Box 31 (Signature)'),\n            array(\n                '0' => xl('None'),\n                '1' => xl('Date of Service'),\n                '2' => xl('Today'),\n            ),\n            '0',                              // default\n            xl('This specifies whether to include date in Box 31.')\n        ),\n\n        'default_search_code_type' => array(\n            xl('Default Search Code Type'),\n            'all_code_types',  // data type\n            'ICD10',                 // default\n            xl('The default code type to search for in the Fee Sheet.')\n        ),\n\n        'default_rendering_provider' => array(\n            xl('Default Rendering Provider in Fee Sheet'),\n            array(\n                '0' => xl('Please Select'),\n                '1' => xl('Current Provider'),\n                '2' => xl('Current Logged in User'),\n            ),\n            '1',\n            xl('Default selection for rendering provider in fee sheet.')\n        ),\n\n        'posting_adj_disable' => array(\n            xl('Disable Auto Adjustment Calculations in EOB Posting'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Turn off auto calculations of adjustments in EOB')\n        ),\n\n        'show_payment_history' => array(\n            xl('Show all payment history in Patient Ledger'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Turn on to show all payment history in Patient Ledger')\n        ),\n\n        'support_fee_sheet_line_item_provider' => array(\n            xl('Support provider in line item in fee sheet'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This Enables provider in line item in the fee sheet')\n        ),\n\n        'default_fee_sheet_line_item_provider' => array(\n            xl('Default to a provider for line item in the fee sheet'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Default to a provider for line item in the fee sheet.(only applicable if Support line item billing in option above)')\n        ),\n\n        'replicate_justification' => array(\n            xl('Automatically replicate justification codes in Fee Sheet'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Automatically replicate justification codes in Fee Sheet (basically fills in the blanks with the justification code above it).')\n        ),\n\n        'display_units_in_billing' => array(\n            xl('Display the Units Column on the Billing Screen'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Display the Units Column on the Billing Screen')\n        ),\n\n        'notes_to_display_in_Billing' => array(\n            xl('Which notes are to be displayed in the Billing Screen'),\n            array(\n                '0' => xl('None'),\n                '1' => xl('Encounter Billing Note'),\n                '2' => xl('Patient Billing Note'),\n                '3' => xl('All'),\n            ),\n            '3',\n            xl('Display the Encounter Billing Note or Patient Billing Note or Both in the Billing Screen.')\n        ),\n\n        'set_pos_code_encounter' => array(\n            xl('Set POS code in encounter'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This feature will allow the default POS facility code to be overridden from the encounter.')\n        ),\n\n        'statement_logo' => array(\n            xl('Statement Logo GIF Filename'),\n            'text',                           // data type\n            'practice_logo.gif',                               // data type\n            xl('Place your logo in sites/default/images and type the filename including gif extension here.')\n        ),\n\n        'use_custom_statement' => array(\n            xl('Use Custom Statement'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will use the custom Statement showing the description instead of the codes.')\n        ),\n\n        'statement_appearance' => array(\n            xl('Statement Appearance'),\n            array(\n                '0' => xl('Plain Text'),\n                '1' => xl('Modern/images')\n            ),                          // data type\n            '1',                              // default = true\n            xl('Patient statements can be generated as plain text or with a modern graphical appearance.')\n        ),\n\n        'billing_phone_number' => array(\n            xl('Custom Billing Phone Number'),\n            'text',                           // data type\n            '',\n            xl('Phone number for billing inquiries')\n        ),\n\n        'show_aging_on_custom_statement' => array(\n            xl('Show Aging on Custom Statement'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will Show Aging on the custom Statement.')\n        ),\n\n        'use_statement_print_exclusion' => array(\n            xl('Allow Statement Exclusions from Printing'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will enable the Ability to Exclude Selected Patient Statements from Printing.')\n        ),\n\n        'minimum_amount_to_print' => array(\n            xl('Total Minimum Amount of Statement to Allow Printing'),\n            'num',                           // data type\n            '1.00',\n            xl('Total Minimum Dollar Amount of Statement to Allow Printing.(only applicable if Allow Statement Exclusions from Printing is enabled)')\n        ),\n\n        'statement_bill_note_print' => array(\n            xl('Print Patient Billing Note'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will allow printing of the Patient Billing Note on the statements.')\n        ),\n\n        'number_appointments_on_statement' => array(\n            xl('Number of Appointments on Statement'),\n            'num',                           // data type\n            '0',                              // default = 0\n            xl('The Number of Future Appointments to Display on the Statement.')\n        ),\n\n        'statement_message_to_patient' => array(\n            xl('Print Custom Message'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will allow printing of a custom Message on the statements.')\n        ),\n\n        'statement_msg_text' => array(\n            xl('Custom Statement message'),\n            'text',                           // data type\n            '',\n            xl('Text for Custom statement message.')\n        ),\n\n        'use_dunning_message' => array(\n            xl('Use Custom Dunning Messages'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will allow use of the custom Dunning Messages on the statements.')\n        ),\n\n        'first_dun_msg_set' => array(\n            xl('Number of days before showing first account message'),\n            'num',                           // data type\n            '30',\n            xl('Number of days before showing first account message.')\n        ),\n\n        'first_dun_msg_text' => array(\n            xl('First account message'),\n            'text',                           // data type\n            '',\n            xl('Text for first account message.')\n        ),\n\n        'second_dun_msg_set' => array(\n            xl('Number of days before showing second account message'),\n            'num',                           // data type\n            '60',\n            xl('Number of days before showing second account message')\n        ),\n\n        'second_dun_msg_text' => array(\n            xl('Second account message'),\n            'text',                           // data type\n            '',\n            xl('Text for second account message.')\n        ),\n\n        'third_dun_msg_set' => array(\n            xl('Number of days before showing third account message'),\n            'num',                           // data type\n            '90',\n            xl('Number of days before showing third account message')\n        ),\n\n        'third_dun_msg_text' => array(\n            xl('Third account message'),\n            'text',                           // data type\n            '',\n            xl('Text for third account message.')\n        ),\n\n        'fourth_dun_msg_set' => array(\n            xl('Number of days before showing fourth account message'),\n            'num',                           // data type\n            '120',\n            xl('Number of days before showing fourth account message')\n        ),\n\n        'fourth_dun_msg_text' => array(\n            xl('Fourth account message'),\n            'text',                           // data type\n            '',\n            xl('Text for fourth account message.')\n        ),\n\n        'fifth_dun_msg_set' => array(\n            xl('Number of days before showing fifth account message'),\n            'num',                           // data type\n            '150',\n            xl('Number of days before showing fifth account message')\n        ),\n\n        'fifth_dun_msg_text' => array(\n            xl('Fifth account message'),\n            'text',                           // data type\n            '',\n            xl('Text for fifth account message.')\n        ),\n\n        'save_codes_history' => array(\n            xl('Save codes history'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Save codes history')\n        ),\n\n        'enable_percent_pricing' => array(\n            xl('Enable percent-based price levels'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable percent-based price levels')\n        )\n    ),\n\n    // E-Sign Tab\n    //\n    'E-Sign' => array(\n\n        'esign_all' => array(\n            xl('Allows E-Sign on the entire encounter'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will enable signing an entire encounter, rather than individual forms')\n        ),\n\n        'lock_esign_all' => array(\n            xl('Lock e-signed encounters and their forms'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will disable the Edit button on all forms whose parent encounter is e-signed')\n        ),\n\n        'esign_individual' => array(\n            xl('Allows E-Signing Individual Forms'),\n            'bool',                           // data type\n            '1',                              // default = false\n            xl('This will enable signing individual forms separately')\n        ),\n\n        'lock_esign_individual' => array(\n            xl('Lock an e-signed form individually'),\n            'bool',                           // data type\n            '1',                              // default = false\n            xl('This will disable the Edit button on any form that is e-signed')\n        ),\n\n        'esign_lock_toggle' => array(\n            xl('Enable lock toggle'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will give the user the option to lock (separate locking and signing)')\n        ),\n\n        'esign_report_hide_empty_sig' => array(\n            xl('Hide Empty E-Sign Logs On Report'),\n            'bool',                           // data type\n            '1',                              // default = false\n            xl('This will hide empty e-sign logs on the patient report')\n        ),\n\n    ),\n    //Documents Tab\n    'Documents' => array(\n\n        'document_storage_method' => array(\n            xl('Document Storage Method'),\n            array(\n                '0' => xl('Hard Disk'),\n                '1' => xl('CouchDB')\n            ),\n            '0',                              // default\n            xl('Option to save method of document storage.')\n        ),\n\n        'couchdb_host' => array(\n            xl('CouchDB HostName'),\n            'text',\n            'localhost',\n            xl('CouchDB host'),\n        ),\n        'couchdb_user' => array(\n            xl('CouchDB UserName'),\n            'text',\n            '',\n            xl('Username to connect to CouchDB'),\n        ),\n        'couchdb_pass' => array(\n            xl('CouchDB Password'),\n            'encrypted',                     // data type\n            '',\n            xl('Password to connect to CouchDB'),\n        ),\n        'couchdb_port' => array(\n            xl('CouchDB Port'),\n            'text',\n            '6984',\n            xl('CouchDB port'),\n        ),\n        'couchdb_dbase' => array(\n            xl('CouchDB Database'),\n            'text',\n            '',\n            xl('CouchDB database name'),\n        ),\n        'couchdb_connection_ssl' => array(\n            xl('CouchDB Connection SSL'),\n            'bool',\n            '1',\n            xl('Use SSL (encrypted) connection to CouchDB'),\n        ),\n        'couchdb_ssl_allow_selfsigned' => array(\n            xl('CouchDB SSL Allow Selfsigned Certificate'),\n            'bool',\n            '0',\n            xl('Allow self-signed certificate for SSL (encrypted) connection to CouchDB'),\n        ),\n        'couchdb_log' => array(\n            xl('CouchDB Log Enable'),\n            'bool',\n            '0',\n            xl('Enable log for document uploads/downloads to CouchDB'),\n        ),\n\n        'expand_document_tree' => array(\n            xl('Expand All Document Categories'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Expand All Document Categories by Default')\n        ),\n\n        'patient_id_category_name' => array(\n            xl('Patient ID Category Name'),\n            'text',                           // data type\n            'Patient ID card',                // default\n            xl('Optional category name for an ID Card image that can be viewed from the patient summary page.')\n        ),\n\n        'patient_photo_category_name' => array(\n            xl('Patient Photo Category Name'),\n            'text',                           // data type\n            'Patient Photograph',             // default\n            xl('Optional category name for photo images that can be viewed from the patient summary page.')\n        ),\n\n        'lab_results_category_name' => array(\n            xl('Lab Results Category Name'),\n            'text',                           // data type\n            'Lab Report',                     // default\n            xl('Document category name for storage of electronically received lab results.')\n        ),\n\n        'gbl_mdm_category_name' => array(\n            xl('MDM Document Category Name'),\n            'text',                           // data type\n            'Lab Report',                     // default\n            xl('Document category name for storage of electronically received MDM documents.')\n        ),\n        'generate_doc_thumb' => array(\n            xl('Generate thumbnail'),\n            'bool',\n            '0',\n            xl('Generate thumbnail images'),\n        ),\n        'thumb_doc_max_size' => array(\n            xl('Thumbnail size'),\n            'text',          // data type\n            '100',           // default\n            xl('Maximum size of thumbnail file')\n        ),\n    ),\n\n    // Calendar Tab\n    //\n    'Calendar' => array(\n\n        'disable_calendar' => array(\n            xl('Disable Calendar'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Do not display the calendar.')\n        ),\n\n        'schedule_start' => array(\n            xl('Calendar Starting Hour'),\n            'hour',\n            '8',                              // default\n            xl('Beginning hour of day for calendar events.')\n        ),\n\n        'schedule_end' => array(\n            xl('Calendar Ending Hour'),\n            'hour',\n            '17',                             // default\n            xl('Ending hour of day for calendar events.')\n        ),\n\n        'calendar_interval' => array(\n            xl('Calendar Interval'),\n            array(\n                '5' => '5',\n                '10' => '10',\n                '15' => '15',\n                '20' => '20',\n                '30' => '30',\n                '60' => '60',\n            ),\n            '15',                              // default\n            xl('The time granularity of the calendar and the smallest interval in minutes for an appointment slot.')\n        ),\n\n        'calendar_view_type' => array(\n            xl('Default Calendar View'),\n            array(\n                'day' => xl('Day'),\n                'week' => xl('Week'),\n                'month' => xl('Month'),\n            ),\n            'day',                              // default\n            xl('This sets the Default Calendar View, Default is Day.')\n        ),\n\n        'first_day_week' => array(\n            xl('First day in the week'),\n            array(\n                '1' => xl('Monday'),\n                '0' => xl('Sunday'),\n                '6' => xl('Saturday')\n            ),\n            '1',\n            xl('Your first day of the week.')\n        ),\n\n        'calendar_appt_style' => array(\n            xl('Appointment Display Style'),\n            array(\n                '1' => xl('Last name'),\n                '2' => xl('Last name, first name'),\n                '3' => xl('Last name, first name (title)'),\n                '4' => xl('Last name, first name (title: comments)'),\n            ),\n            '2',                               // default\n            xl('This determines how appointments display on the calendar.')\n        ),\n\n        'event_color' => array(\n            xl('Appointment/Event Color'),\n            array(\n                '1' => xl('Category Color Schema'),\n                '2' => xl('Facility Color Schema'),\n            ),                           // data type\n            '1',                              // default\n            xl('This determines which color schema used for appointment')\n        ),\n\n        'number_of_appts_to_show' => array(\n            xl('Appointments - Patient Summary - Number to Display'),\n            'num',\n            '10',\n            xl('Number of Appointments to display in the Patient Summary')\n        ),\n\n        'number_of_group_appts_to_show' => array(\n            xl('Appointments - Group Summary - Number to Display'),\n            'num',\n            '10',\n            xl('Number of Appointments to display in the Group Summary')\n        ),\n\n        'number_of_ex_appts_to_show' => array(\n            xl('Excluded Appointments - Tooltip - Number to Display'),\n            'num',\n            '15',\n            xl('Number of Excluded Appointments to display in the Tooltip')\n        ),\n\n        'appt_display_sets_option' => array(\n            xl('Appointment Display Sets - Ignore Display Limit (Last Set)'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Override (if necessary) the appointment display limit to allow all appointments to be displayed for the last set')\n        ),\n\n        'appt_display_sets_color_1' => array(\n            xl('Appointment Display Sets - Color 1'),\n            'color_code',\n            '#FFFFFF',\n            xl('Color for odd sets (except when last set is odd and all member appointments are displayed and at least one subsequent scheduled appointment exists (not displayed) or not all member appointments are displayed).')\n        ),\n\n        'appt_display_sets_color_2' => array(\n            xl('Appointment Display Sets - Color 2'),\n            'color_code',\n            '#E6E6FF',\n            xl('Color for even sets (except when last set is even and all member appointments are displayed and at least one subsequent scheduled appointment exists (not displayed) or not all member appointments are displayed).')\n        ),\n\n        'appt_display_sets_color_3' => array(\n            xl('Appointment Display Sets - Color 3'),\n            'color_code',\n            '#E6FFE6',\n            xl('Color for the last set when all member appointments are displayed and at least one subsequent scheduled appointment exists (not displayed).')\n        ),\n\n        'appt_display_sets_color_4' => array(\n            xl('Appointment Display Sets - Color 4'),\n            'color_code',\n            '#FFE6FF',\n            xl('Color for the last set when not all member appointments are displayed.')\n        ),\n\n        'appt_recurrences_widget' => array(\n            xl('Recurrent Appointment Display Widget'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Display the recurrent appointment widget in the patient summary.')\n        ),\n\n        'num_past_appointments_to_show' => array(\n            xl('Past Appointment Display Widget'),\n            'num',                           // data type\n            '0',                             // default = false\n            xl('A positive number will show that many past appointments on a Widget in the Patient Summary screen (a negative number will show the past appointments in descending order)')\n        ),\n\n        'docs_see_entire_calendar' => array(\n            xl('Providers See Entire Calendar'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Check this if you want providers to see all appointments by default and not just their own.')\n        ),\n\n        'auto_create_new_encounters' => array(\n            xl('Auto-Create New Encounters'),\n            array(\n                '0' => xl('Off'),\n                '1' => xl('One Encounter Per Day'),\n                '2' => xl('Allow Encounter For Each Appointment')\n            ),\n            '1',\n            xl('Automatically create a new encounter when an appointment check in status is selected.') . \" \" .\n            xl('The Each Appointment option will allow a new encounter regardless of same day visit.') . \" \" .\n            xl('The appointment status changes and encounter creations are managed through the Patient Tracker.')\n        ),\n\n        'allow_early_check_in' => array(\n            xl('Allow Early Check In'),\n            'bool',                           // data type\n            '1',                              // default\n            xl(\"Allow Check In before the appointment's time.\")\n        ),\n\n        'submit_changes_for_all_appts_at_once' => array(\n            xl('Submit Changes For All Appts At Once'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enables to submit changes for all appointments of a recurrence at once.')\n        ),\n\n        'disable_pat_trkr' => array(\n            xl('Flow Board: Disable'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Completely remove the ability to display the Patient Flow Board.')\n        ),\n\n        'ptkr_visit_reason' => array(\n            xl('Flow Board: Show Visit Reason'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('When Checked, Visit Reason Will Show in Patient Flow Board.')\n        ),\n\n        'ptkr_show_pid' => array(\n            xl('Flow Board: Show Patient ID'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('When Checked, Patient ID Will Show in Patient Flow Board.')\n        ),\n\n        'ptkr_show_encounter' => array(\n            xl('Flow Board: Show Encounter Number'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('When Checked, Patient Encounter Number Will Show in Patient Flow Board.')\n        ),\n\n        'ptkr_show_staff' => array(\n            xl('Flow Board: Show Staff Action'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('When Checked, Last Staff to Update Board Will Show in Patient Flow Board.')\n        ),\n\n        'ptkr_date_range' => array(\n            xl('Flow Board: Allow Date Range'),\n            'bool',                          // data type\n            '1',                             // default = true\n            xl('This Allows a Date Range to be Selected in Patient Flow Board.')\n        ),\n\n        'ptkr_start_date' => array(\n            xl('Flow Board: Default Starting Date'),\n            array(\n                'D0' => xl('Current Day'),\n                'B0' => xl('Beginning of Current Work Week'),\n            ),\n            'D0',                    // default = Current Day\n            xl('This is the default Beginning date for the Patient Flow Board. (only applicable if Allow Date Range in option above is Enabled)')\n        ),\n\n        'ptkr_end_date' => array(\n            xl('Flow Board: Default Ending Date'),\n            array(\n                'Y1' => xl('One Year Ahead'),\n                'Y2' => xl('Two Years Ahead'),\n                'M6' => xl('Six Months Ahead'),\n                'M3' => xl('Three Months Ahead'),\n                'M1' => xl('One Month Ahead'),\n                'D7' => xl('One Week Ahead'),\n                'D1' => xl('One Day Ahead'),\n                'D0' => xl('Current Day'),\n            ),\n            'D0',                     // default = One Day Ahead\n            xl('This is the default Ending date for the Patient Flow Board. (only applicable if Allow Date Range in option above is Enabled)')\n        ),\n\n        'pat_trkr_timer' => array(\n            xl('Flow Board: Timer Refresh Interval'),\n            array(\n                '0' => xl('No automatic refresh'),\n                '0:10' => '10',\n                '0:20' => '20',\n                '0:30' => '30',\n                '0:40' => '40',\n                '0:50' => '50',\n                '0:59' => '60',\n            ),\n            '0:20',                              // default\n            xl('The screen refresh time in Seconds for the Patient Flow Board Screen.')\n        ),\n\n        'checkout_roll_off' => array(\n            xl('Flow Board: display completed checkouts (minutes)'),\n            'num',\n            '0',                       // default\n            xl('Flow Board will only display completed checkouts for this many minutes. Zero is continuous display.')\n        ),\n\n        'drug_screen' => array(\n            xl('Flow Board: Enable Random Drug Testing'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Allow Patient Flow Board to Select Patients for Drug Testing.')\n        ),\n\n        'drug_testing_percentage' => array(\n            xl('Flow Board: Percentage of Patients to Drug Test'),\n            'num',\n            '33',                       // default\n            xl('Percentage of Patients to select for Random Drug Testing.')\n        ),\n\n        'maximum_drug_test_yearly' => array(\n            xl('Flow Board: Max tests per Patient per year'),\n            'num',\n            '0',                       // default\n            xl('Maximum number of times a Patient can be tested in a year. Zero is no limit.')\n        ),\n\n        'disable_rcb' => array(\n          xl('Recall Board: Disable'),\n          'bool',                           // data type\n          '0',                              // default\n          xl('Do not display the Recall Board.')\n        ),\n\n\n\n\n    ),\n    // Insurance Tab\n    'Insurance' => array(\n        'enable_oa' => array(\n            xl('Enable Office Ally Insurance Eligibility'),\n            'bool',\n            '0',\n            xl('Allow insurance eligibility checks using Office Ally')\n        ),\n\n        'simplified_demographics' => array(\n            xl('Simplified Demographics'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Omit insurance and some other things from the demographics form')\n        ),\n\n        'insurance_information' => array(\n            xl('Show Additional Insurance Information'),               // descriptive name\n            array(\n                '0' => xl('None'),\n                '1' => xl('Address Only'),\n                '2' => xl('Address and Postal Code'),\n                '3' => xl('Address and State'),\n                '4' => xl('Address, State and Postal Code'),\n                '5' => xl('Address, City, State and Postal Code'),\n                '6' => xl('Address, City, State, Postal Code, Payer ID'),\n                '7' => xl('Postal Code and Box Number')\n            ),\n            '6',                              // default\n            xl('Show Insurance Address Information in the Insurance Panel of Demographics.')\n        ),\n\n        'disable_eligibility_log' => array(\n            xl('Disable Insurance Eligibility Reports Download'),\n            'bool',\n            '0',\n            xl('Do not allow insurance eligibility report log download')\n        ),\n\n        'insurance_only_one' => array(\n            xl('Allow only one insurance'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Allow more than one insurance')\n        ),\n    ),\n    // Security Tab\n    //\n    'Security' => array(\n        'sql_string_no_show_screen' => array(\n            xl('Mode - Do Not Show SQL Queries'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Do not allow SQL queries to be outputted to screen.')\n        ),\n        'timeout' => array(\n            xl('Idle Session Timeout Seconds'),\n            'num',                            // data type\n            '7200',                           // default\n            xl('Maximum idle time in seconds before logout. Default is 7200 (2 hours).')\n        ),\n        'secure_upload' => array(\n            xl('Secure Upload Files with White List'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Block all files types that are not found in the White List. Can find interface to edit the White List at Administration->Files.')\n        ),\n        'secure_password' => array(\n            xl('Require Strong Passwords'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Strong password means at least one of each: a number, a lowercase letter, an uppercase letter, a special character.')\n        ),\n\n        'gbl_minimum_password_length' => array(\n            xl('Minimum Password Length'),\n            array(\n                '0' => xl('No Minimum'),\n                '4' => '4',\n                '5' => '5',\n                '6' => '6',\n                '7' => '7',\n                '8' => '8',\n                '9' => '9',\n                '10' => '10',\n                '11' => '11',\n                '12' => '12',\n                '13' => '13',\n                '14' => '14',\n                '15' => '15',\n                '16' => '16',\n                '17' => '17',\n                '18' => '18',\n                '19' => '19',\n                '20' => '20',\n            ),\n            '9',                              // default\n            xl('Minimum length of password.')\n        ),\n\n        'password_history' => array(\n            xl('Require Unique Passwords'),\n            array(\n                '0' => xl('No'),\n                '1' => '1',\n                '2' => '2',\n                '3' => '3',\n                '4' => '4',\n                '5' => '5',\n            ),\n            '5',                              // default\n            xl('Set to the number of prior passwords that are not allowed to use when changing a password.')\n        ),\n\n        'password_expiration_days' => array(\n            xl('Default Password Expiration Days'),\n            'num',                            // data type\n            '180',                            // default\n            xl('Default password expiration period in days. 0 means this feature is disabled.')\n        ),\n\n        'password_grace_time' => array(\n            xl('Password Expiration Grace Period'),\n            'num',                            // data type\n            '30',                             // default\n            xl('Period in days where a user may login with an expired password.')\n        ),\n\n        'password_max_failed_logins' => array(\n            xl('Maximum Failed Login Attempts'),\n            'num',                            // data type\n            '0',                              // default\n            xl('Maximum Failed Login Attempts (0 for no maximum).')\n        ),\n\n        'is_client_ssl_enabled' => array(\n            xl('Enable Client SSL'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable client SSL certificate authentication.')\n        ),\n\n        'certificate_authority_crt' => array(\n            xl('Path to CA Certificate File'),\n            'text',                           // data type\n            '',                               // default\n            xl('Set this to the full absolute path. For creating client SSL certificates for HTTPS.')\n        ),\n\n        'certificate_authority_key' => array(\n            xl('Path to CA Key File'),\n            'text',                           // data type\n            '',                               // default\n            xl('Set this to the full absolute path. For creating client SSL certificates for HTTPS.')\n        ),\n\n        'client_certificate_valid_in_days' => array(\n            xl('Client Certificate Expiration Days'),\n            'num',                            // data type\n            '365',                            // default\n            xl('Number of days that the client certificate is valid.')\n        ),\n\n        'Emergency_Login_email_id' => array(\n            xl('Emergency Login Email Address'),\n            'text',                           // data type\n            '',                               // default\n            xl('Email address, if any, to receive emergency login user activation messages.')\n        ),\n\n        'new_validate' => array(\n            xl('New form validation'),\n            'bool',\n            '1',\n            xl('New form validation')\n        ),\n\n        'allow_multiple_databases' => array(\n            xl('Allow multiple databases'),\n            'bool',\n            '0',\n            xl('Allow to use with multiple database')\n        ),\n\n        'safe_key_database' => array(\n            xl('Safe key database'),\n            'text',                           // data type\n            '',                               // default\n            xl('Key for multiple database credentials encryption')\n        ),\n\n        'gbl_ldap_enabled' => array(\n            xl('Use LDAP for Authentication'),\n            'bool',\n            '0',\n            xl('If enabled, use LDAP for login and authentication.')\n        ),\n        'gbl_ldap_host' => array(\n            xl('LDAP - Server Name or URI'),\n            'text',\n            '',\n            xl('The hostname or URI of your LDAP or Active Directory server.')\n        ),\n        'gbl_ldap_dn' => array(\n            xl('LDAP - Distinguished Name of User'),\n            'text',\n            '',\n            xl('Embed {login} where the OpenEMR login name of the user is to be; for example: uid={login},dc=example,dc=com')\n        ),\n        'gbl_ldap_exclusions' => array(\n            xl('LDAP - Login Exclusions'),\n            'text',\n            '',\n            xl('Comma-separated list of login names to use normal authentication instead of LDAP; useful for setup and debugging.')\n        ),\n\n        'gbl_debug_hash_verify_execution_time' => array(\n            xl('Debug Hash Verification Time'),\n            'bool',\n            '0',\n            xl('If enabled, this will send the execution time it took to verify hash to the php error log.')\n        ),\n\n        'gbl_auth_hash_algo' => array(\n            xl('Hash Algorithm for Authentication'),\n            array(\n                'DEFAULT' => xl('PHP Default'),\n                'BCRYPT' => 'Bcrypt',\n                'ARGON2I' => 'Argon2I',\n                'ARGON2ID' => 'Argon2ID',\n                'SHA512HASH' => 'SHA512 (ONC 2015)',\n            ),\n            'DEFAULT',                // default\n            xl('Hashing algorithm for authentication. Suggest PHP Default unless you know what you are doing.')\n        ),\n\n        'gbl_auth_bcrypt_hash_cost' => array(\n            xl('Authentication Bcrypt Hash Cost'),\n            array(\n                'DEFAULT' => xl('PHP Default'),\n                '5' => '5',\n                '6' => '6',\n                '7' => '7',\n                '8' => '8',\n                '9' => '9',\n                '10' => '10',\n                '11' => '11',\n                '12' => '12',\n                '13' => '13',\n                '14' => '14',\n                '15' => '15',\n                '16' => '16',\n                '17' => '17',\n                '18' => '18',\n                '19' => '19',\n                '20' => '20',\n            ),\n            'DEFAULT',                // default\n            xl('Authentication bcrypt hash cost. Suggest PHP Default unless you know what you are doing.')\n        ),\n\n        'gbl_auth_argon_hash_memory_cost' => array(\n            xl('Authentication Argon Hash Memory Cost'),\n            array(\n                'DEFAULT' => xl('PHP Default'),\n                '512' => '512',\n                '1024' => '1024',\n                '2048' => '2048',\n                '4096' => '4096',\n                '8192' => '8192',\n                '16384' => '16384',\n                '32768' => '32768',\n                '65536' => '65536',\n                '131072' => '131072',\n                '262144' => '262144',\n                '524288' => '524288',\n                '1048576' => '1048576',\n                '2097152' => '2097152',\n            ),\n            'DEFAULT',                // default\n            xl('Authentication argon hash memory cost. Suggest PHP Default unless you know what you are doing.')\n        ),\n\n        'gbl_auth_argon_hash_time_cost' => array(\n            xl('Authentication Argon Hash Time Cost'),\n            array(\n                'DEFAULT' => xl('PHP Default'),\n                '1' => '1',\n                '2' => '2',\n                '3' => '3',\n                '4' => '4',\n                '5' => '5',\n                '6' => '6',\n                '7' => '7',\n                '8' => '8',\n                '9' => '9',\n                '10' => '10',\n                '11' => '11',\n                '12' => '12',\n                '13' => '13',\n                '14' => '14',\n                '15' => '15',\n                '16' => '16',\n                '17' => '17',\n                '18' => '18',\n                '19' => '19',\n                '20' => '20',\n            ),\n            'DEFAULT',                // default\n            xl('Authentication argon hash time cost. Suggest PHP Default unless you know what you are doing.')\n        ),\n\n        'gbl_auth_argon_hash_thread_cost' => array(\n            xl('Authentication Argon Hash Thread Number'),\n            array(\n                'DEFAULT' => xl('PHP Default'),\n                '1' => '1',\n                '2' => '2',\n                '3' => '3',\n                '4' => '4',\n                '5' => '5',\n                '6' => '6',\n                '7' => '7',\n                '8' => '8',\n                '9' => '9',\n                '10' => '10',\n                '11' => '11',\n                '12' => '12',\n                '13' => '13',\n                '14' => '14',\n                '15' => '15',\n                '16' => '16',\n                '17' => '17',\n                '18' => '18',\n                '19' => '19',\n                '20' => '20',\n            ),\n            'DEFAULT',                // default\n            xl('Authentication argon hash thread number. Suggest PHP Default unless you know what you are doing.')\n        ),\n\n        'gbl_auth_sha512_rounds' => array(\n            xl('Authentication SHA512 Hash Rounds Number'),\n            array(\n                '1000' => '1000',\n                '5000' => '5000',\n                '10000' => '10000',\n                '15000' => '15000',\n                '20000' => '20000',\n                '30000' => '30000',\n                '40000' => '40000',\n                '50000' => '50000',\n                '75000' => '75000',\n                '100000' => '100000',\n                '200000' => '200000',\n                '300000' => '300000',\n                '400000' => '400000',\n                '500000' => '500000',\n                '750000' => '750000',\n                '1000000' => '1000000',\n                '2000000' => '2000000',\n                '3000000' => '3000000',\n                '4000000' => '4000000',\n                '5000000' => '5000000',\n                '6000000' => '6000000',\n                '7000000' => '7000000',\n                '8000000' => '8000000',\n                '9000000' => '9000000',\n            ),\n            '100000',                // default\n            xl('Authentication SHA512 hash rounds number.')\n        ),\n\n    ),\n\n    // Notifications Tab\n    //\n    'Notifications' => array(\n\n        'patient_reminder_sender_name' => array(\n            xl('Patient Reminder Sender Name'),\n            'text',                           // data type\n            '',                               // default\n            xl('Name of the sender for patient reminders.')\n        ),\n\n        'patient_reminder_sender_email' => array(\n            xl('Patient Reminder Sender Email'),\n            'text',                           // data type\n            '',                               // default\n            xl('Email address of the sender for patient reminders. Replies to patient reminders will be directed to this address. It is important to use an address from your clinic\\'s domain to avoid help prevent patient reminders from going to junk mail folders.')\n        ),\n\n        'practice_return_email_path' => array(\n            xl('Notification Email Address'),\n            'text',                           // data type\n            '',                               // default\n            xl('Email address, if any, to receive administrative notifications.')\n        ),\n\n        'EMAIL_METHOD' => array(\n            xl('Email Transport Method'),\n            array(\n                'PHPMAIL' => 'PHPMAIL',\n                'SENDMAIL' => 'SENDMAIL',\n                'SMTP' => 'SMTP',\n            ),\n            'SMTP',                             // default\n            xl('Method for sending outgoing email.')\n        ),\n\n        'SMTP_HOST' => array(\n            xl('SMTP Server Hostname'),\n            'text',                           // data type\n            'localhost',                      // default\n            xl('If SMTP is used, the server`s hostname or IP address.')\n        ),\n\n        'SMTP_PORT' => array(\n            xl('SMTP Server Port Number'),\n            'num',                            // data type\n            '25',                             // default\n            xl('If SMTP is used, the server`s TCP port number (usually 25).')\n        ),\n\n        'SMTP_USER' => array(\n            xl('SMTP User for Authentication'),\n            'text',                           // data type\n            '',                               // default\n            xl('Must be empty if SMTP authentication is not used.')\n        ),\n\n        'SMTP_PASS' => array(\n            xl('SMTP Password for Authentication'),\n            'encrypted',                           // data type\n            '',                               // default\n            xl('Must be empty if SMTP authentication is not used.')\n        ),\n\n        'SMTP_SECURE' => array(\n            xl('SMTP Security Protocol'),\n            array(\n                '' => xl('None'),\n                'ssl' => 'SSL',\n                'tls' => 'TLS'\n            ),\n            '',\n            xl('SMTP security protocol to connect with. Required by some servers such as gmail.')\n        ),\n\n        'EMAIL_NOTIFICATION_HOUR' => array(\n            xl('Email Notification Hours'),\n            'num',                            // data type\n            '50',                             // default\n            xl('Number of hours in advance to send email notifications.')\n        ),\n\n        'SMS_NOTIFICATION_HOUR' => array(\n            xl('SMS Notification Hours'),\n            'num',                            // data type\n            '50',                             // default\n            xl('Number of hours in advance to send SMS notifications.')\n        ),\n\n        'SMS_GATEWAY_USENAME' => array(\n            xl('SMS Gateway Username'),\n            'text',                           // data type\n            '',                               // default\n            xl('Username for SMS Gateway.')\n        ),\n\n        'SMS_GATEWAY_PASSWORD' => array(\n            xl('SMS Gateway Password'),\n            'text',                           // data type\n            '',                               // default\n            xl('Password for SMS Gateway.')\n        ),\n\n        'SMS_GATEWAY_APIKEY' => array(\n            xl('SMS Gateway API Key'),\n            'text',                           // data type\n            '',                               // default\n            xl('API key for SMS Gateway.')\n        ),\n\n        'phone_notification_hour' => array(\n            xl('Phone Notification Hour'),\n            'num',                            // data type\n            '50',                             // default\n            xl('Number of hours in advance to send Phone notification.')\n        ),\n\n        'phone_gateway_username' => array(\n            xl('Phone Gateway Username'),\n            'text',                           // data type\n            '',                               // default\n            xl('Username for Phone Gateway.')\n        ),\n\n        'phone_gateway_password' => array(\n            xl('Phone Gateway Password'),\n            'encrypted',                      // data type\n            '',                               // default\n            xl('Password for Phone Gateway.')\n        ),\n\n        'phone_gateway_url' => array(\n            xl('Phone Gateway URL'),\n            'text',                           // data type\n            '',                               // default\n            xl('URL for Phone Gateway.')\n        ),\n\n    ),\n\n    // CDR (Clinical Decision Rules)\n    //\n    'CDR' => array(\n\n        'enable_cdr' => array(\n            xl('Enable Clinical Decisions Rules (CDR)'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Clinical Decisions Rules (CDR)')\n        ),\n\n        'enable_allergy_check' => array(\n            xl('Enable Allergy Check'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Allergy Check Against Medications and Prescriptions')\n        ),\n\n        'enable_alert_log' => array(\n            xl('Enable Alert Log'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Alert Logging')\n        ),\n\n        'enable_cdr_new_crp' => array(\n            xl('Enable Clinical Passive New Reminder(s) Popup'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Clinical Passive New Reminder(s) Popup')\n        ),\n\n        'enable_cdr_crw' => array(\n            xl('Enable Clinical Passive Reminder Widget'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Clinical Passive Reminder Widget')\n        ),\n\n        'enable_cdr_crp' => array(\n            xl('Enable Clinical Active Reminder Popup'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Clinical Active Reminder Popup')\n        ),\n\n        'enable_cdr_prw' => array(\n            xl('Enable Patient Reminder Widget'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Patient Reminder Widget')\n        ),\n\n        'enable_cqm' => array(\n            xl('Enable CQM Reporting'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Clinical Quality Measure (CQM) Reporting')\n        ),\n\n        'pqri_registry_name' => array(\n            xl('PQRI Registry Name'),\n            'text',                           // data type\n            'Model Registry',                               // default\n            xl('PQRI Registry Name')\n        ),\n\n        'pqri_registry_id' => array(\n            xl('PQRI Registry ID'),\n            'text',                           // data type\n            '125789123',                               // default\n            xl('PQRI Registry ID')\n        ),\n\n        'enable_amc' => array(\n            xl('Enable AMC Reporting'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Automated Measure Calculations (AMC) Reporting')\n        ),\n\n        'enable_amc_prompting' => array(\n            xl('Enable AMC Prompting'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Prompting For Automated Measure Calculations (AMC) Required Data')\n        ),\n\n        'enable_amc_tracking' => array(\n            xl('Enable AMC Tracking'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Reporting of Tracking Date For Automated Measure Calculations (AMC)')\n        ),\n\n        'cdr_report_nice' => array(\n            xl('CDR Reports Processing Priority'),\n            array(\n                '' => xl('Default Priority'),\n                '5' => xl('Moderate Priority'),\n                '10' => xl('Moderate/Low Priority'),\n                '15' => xl('Low Priority'),\n                '20' => xl('Lowest Priority')\n            ),\n            '',                               // default\n            xl('Set processing priority for CDR engine based reports.')\n        ),\n\n        'pat_rem_clin_nice' => array(\n            xl('Patient Reminder Creation Processing Priority'),\n            array(\n                '' => xl('Default Priority'),\n                '5' => xl('Moderate Priority'),\n                '10' => xl('Moderate/Low Priority'),\n                '15' => xl('Low Priority'),\n                '20' => xl('Lowest Priority')\n            ),\n            '',                               // default\n            xl('Set processing priority for creation of Patient Reminders (in full clinic mode).')\n        ),\n\n        'report_itemizing_standard' => array(\n            xl('Enable Standard Report Itemization'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Itemization of Standard Clinical Rules Reports')\n        ),\n\n        'report_itemizing_cqm' => array(\n            xl('Enable CQM Report Itemization'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Itemization of CQM Reports')\n        ),\n\n        'report_itemizing_amc' => array(\n            xl('Enable AMC Report Itemization'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Itemization of AMC Reports')\n        ),\n        'dated_reminders_max_alerts_to_show' => array(\n            xl('Dated reminders maximum alerts to show'),\n            'num',                           // data type\n            '5',                               // default\n            xl('Dated reminders maximum alerts to show')\n        ),\n        'patient_birthday_alert' => array(\n            xl('Alert on patient birthday'),\n            array(\n                '0' => xl('No alert'),\n                '1' => xl('Alert only on birthday'),\n                '2' => xl('Alert on and after birthday'),\n                '3' => xl('Alert on and up to 28 days after birthday')\n            ),\n            '1',                              // default\n            xl('Alert on patient birthday')\n        ),\n        'patient_birthday_alert_manual_off' => array(\n            xl('Patient birthday alert requires turning off'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Patient birthday alert requires turning off')\n        )\n    ),\n\n    // Logging\n    //\n    'Logging' => array(\n\n        'user_debug' => array(\n            xl('User Debugging Options'),\n            array(\n                '0' => xl('None'),\n                '1' => xl('Display Window Errors Only'),\n                '2' => xl('Display Application Errors Only'),\n                '3' => xl('All'),\n            ),\n            '0',                               // default\n            xl('User Debugging Mode.')\n        ),\n\n        'enable_auditlog' => array(\n            xl('Enable Audit Logging'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable Audit Logging')\n        ),\n\n        'audit_events_patient-record' => array(\n            xl('Audit Logging Patient Record'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable logging of patient record modifications.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_scheduling' => array(\n            xl('Audit Logging Scheduling'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable logging of scheduling activities.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_order' => array(\n            xl('Audit Logging Order'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable logging of ordering activities.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_security-administration' => array(\n            xl('Audit Logging Security Administration'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable logging of security and administration activities.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_backup' => array(\n            xl('Audit Logging Backups'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable logging of backup related activities.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_other' => array(\n            xl('Audit Logging Miscellaneous'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable logging of miscellaneous activities.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_query' => array(\n            xl('Audit Logging SELECT Query'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable logging of all SQL SELECT queries.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_cdr' => array(\n            xl('Audit CDR Engine Queries'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable logging of CDR Engine Queries.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'gbl_force_log_breakglass' => array(\n            xl('Audit all Emergency User Queries'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Force logging of all Emergency User (ie. breakglass) activities.')\n        ),\n\n        'enable_atna_audit' => array(\n            xl('Enable ATNA Auditing'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable Audit Trail and Node Authentication (ATNA).')\n        ),\n\n        'atna_audit_host' => array(\n            xl('ATNA audit host'),\n            'text',                           // data type\n            '',                               // default\n            xl('The hostname of the ATNA audit repository machine.')\n        ),\n\n        'atna_audit_port' => array(\n            xl('ATNA audit port'),\n            'text',                           // data type\n            '6514',                           // default\n            xl('Listening port of the RFC 5425 TLS syslog server.')\n        ),\n\n        'atna_audit_localcert' => array(\n            xl('ATNA audit local certificate'),\n            'text',                           // data type\n            '',                               // default\n            xl('Certificate to send to RFC 5425 TLS syslog server.')\n        ),\n\n        'atna_audit_cacert' => array(\n            xl('ATNA audit CA certificate'),\n            'text',                           // data type\n            '',                               // default\n            xl('CA Certificate for verifying the RFC 5425 TLS syslog server.')\n        ),\n\n        'enable_auditlog_encryption' => array(\n            xl('Enable Audit Log Encryption'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable Audit Log Encryption')\n        ),\n\n        'api_log_option' => array(\n            xl('API Log Option'),\n            array(\n                '0' => xl('No logging'),\n                '1' => xl('Minimal Logging'),\n                '2' => xl('Full Logging'),\n            ),\n            '2',                               // default\n            xl('API Log Option (Full includes requests and responses).')\n        ),\n\n        'billing_log_option' => array(\n            xl('Billing Log Option'),\n            array(\n                '1' => xl('Billing Log Append'),\n                '2' => xl('Billing Log Overwrite')\n            ),\n            '1',                               // default\n            xl('Billing log setting to append or overwrite the log file.')\n        ),\n\n        'gbl_print_log_option' => array(\n            xl('Printing Log Option'),\n            array(\n                '0' => xl('No logging'),\n                '1' => xl('Hide print feature'),\n                '2' => xl('Log entire document'),\n            ),\n            '0',                               // default\n            xl('Individual pages can override 2nd and 3rd options by implementing a log message.')\n        ),\n\n        'system_error_logging' => array(\n            xl('System Error Logging Options'),\n            array(\n                'WARNING' => xl('Standard Error Logging'),\n                'DEBUG' => xl('Debug Error Logging'),\n            ),\n            'WARNING',                        // default\n            xl('System Error Logging Options.')\n        ),\n\n    ),\n\n    // Miscellaneous Tab\n    //\n    'Miscellaneous' => array(\n\n        'enable_database_connection_pooling' => array(\n            xl('Enable Database Connection Pooling'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable Database Connection Pooling')\n        ),\n\n        'mysql_bin_dir' => array(\n            xl('Path to MySQL Binaries'),\n            'text',                           // data type\n            $mysql_bin_dir,                   // default\n            xl('Full path to directory containing MySQL executables.')\n        ),\n\n        'perl_bin_dir' => array(\n            xl('Path to Perl Binaries'),\n            'text',                           // data type\n            $perl_bin_dir,                    // default\n            xl('Full path to directory containing Perl executables.')\n        ),\n\n        'temporary_files_dir' => array(\n            xl('Path to Temporary Files'),\n            'text',                           // data type\n            $temporary_files_dir,             // default\n            xl('Full path to directory used for temporary files.')\n        ),\n\n        'backup_log_dir' => array(\n            xl('Path for Event Log Backup'),\n            'text',                           // data type\n            $backup_log_dir,                  // default\n            xl('Full path to directory for event log backup.')\n        ),\n\n        'state_data_type' => array(\n            xl('State Data Type'),\n            array(\n                '2' => xl('Text field'),\n                '1' => xl('Single-selection list'),\n                '26' => xl('Single-selection list with ability to add to the list'),\n            ),\n            '26',                             // default\n            xl('Field type to use for employer or subscriber state in demographics.')\n        ),\n\n        'state_list' => array(\n            xl('State list'),\n            'text',                           // data type\n            'state',                          // default\n            xl('List used by above State Data Type option.')\n        ),\n\n        'state_custom_addlist_widget' => array(\n            xl('State List Widget Custom Fields'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Show the custom state form for the add list widget (will ask for title and abbreviation).')\n        ),\n\n        'country_data_type' => array(\n            xl('Country Data Type'),\n            array(\n                '2' => xl('Text field'),\n                '1' => xl('Single-selection list'),\n                '26' => xl('Single-selection list with ability to add to the list'),\n            ),\n            '26',                             // default\n            xl('Field type to use for employer or subscriber country in demographics.')\n        ),\n\n        'country_list' => array(\n            xl('Country list'),\n            'text',                           // data type\n            'country',                          // default\n            xl('List used by above Country Data Type option.')\n        ),\n\n        'default_chief_complaint' => array(\n            xl('Default Reason for Visit'),\n            'text',                           // data type\n            '',\n            xl('You may put text here as the default complaint in the New Patient Encounter form.')\n        ),\n\n        'MedicareReferrerIsRenderer' => array(\n            xl('Medicare Referrer Is Renderer'),\n            'bool',                           // data type\n            '0',                              // default = true\n            xl('For Medicare only, forces the referring provider to be the same as the rendering provider.')\n        ),\n\n        'post_to_date_benchmark' => array(\n            xl('Financial Close Date (yyyy-mm-dd)'),\n            'text',                           // data type\n            date('Y-m-d', time() - (10 * 24 * 60 * 60)),                // default\n            xl('The payments posted cannot go below this date.This ensures that after taking the final report nobody post for previous dates.')\n        ),\n\n        'enable_hylafax' => array(\n            xl('Enable Hylafax Support'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable Hylafax Support')\n        ),\n\n        'hylafax_server' => array(\n            xl('Hylafax Server'),\n            'text',                           // data type\n            'localhost',                      // default\n            xl('Hylafax server hostname.')\n        ),\n\n        'hylafax_basedir' => array(\n            xl('Hylafax Directory'),\n            'text',                           // data type\n            '/var/spool/hylafax',             // default\n            xl('Location where Hylafax stores faxes.')\n        ),\n\n        'enable_scanner' => array(\n            xl('Enable Scanner Support'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable Scanner Support')\n        ),\n\n        'scanner_output_directory' => array(\n            xl('Scanner Directory'),\n            'text',                           // data type\n            '/mnt/scan_docs',                 // default\n            xl('Location where scans are stored.')\n        ),\n\n        'unique_installation_id' => array(\n            xl('Unique Installation ID'),\n            'if_empty_create_random_uuid',    // data type\n            '',                 // default\n            xl('Unique installation ID. Creates a random UUID if empty.')\n        ),\n    ),\n\n    // Portal Tab\n    //\n    'Portal' => array(\n\n        'portal_onsite_two_enable' => array(\n            xl('Enable Patient Portal'),\n            'bool',                           // data type\n            '0',\n            xl('Enable Patient Portal')\n        ),\n\n        'portal_onsite_two_address' => array(\n            xl('Patient Portal Site Address'),\n            'text',                           // data type\n            'https://your_web_site.com/openemr/portal',\n            xl('Website link for the Patient Portal.')\n        ),\n\n        'portal_onsite_two_basepath' => array(\n            xl('Portal Uses Server Base Path (internal)'),\n            'bool',\n            '0',\n            xl('Use servers protocol and host in urls (portal internal only).')\n        ),\n\n        'enforce_signin_email' => array(\n            xl('Enforce E-Mail in Portal Log On Dialog'),\n            'bool',                           // data type\n            '1',\n            xl('Patient is required to enter their contact e-mail if present in Demographics Contact.')\n        ),\n\n        'portal_onsite_two_register' => array(\n            xl('Allow New Patient Registration Widget'),\n            'bool',                           // data type\n            '0',\n            xl('Enable Patient Portal new patient to self register.')\n        ),\n\n        'allow_portal_appointments' => array(\n            xl('Allow Online Appointments'),\n            'bool',                           // data type\n            '1',\n            xl('Allow Patient to make and view appointments online.')\n        ),\n\n        'allow_portal_chat' => array(\n            xl('Allow Online Secure Chat'),\n            'bool',                           // data type\n            '1',\n            xl('Allow Patient to use Secure Chat Application.')\n        ),\n\n        'portal_two_ledger' => array(\n            xl('Allow Patient Ledger'),\n            'bool',                           // data type\n            '1',\n            xl('Allow Patient to view their accounting ledger online.')\n        ),\n\n        'portal_two_payments' => array(\n            xl('Allow Online Payments'),\n            'bool',                           // data type\n            '0',\n            xl('Allow Patient to make payments online.')\n        ),\n\n        'portal_two_pass_reset' => array(\n            xl('Allow Patients to Reset Credentials'),\n            'bool',                           // data type\n            '0',\n            xl('Patient may change their logon from portal login dialog.')\n        ),\n\n        'portal_onsite_document_download' => array(\n            xl('Enable Patient Portal Document Download'),\n            'bool',                           // data type\n            '1',\n            xl('Enables the ability to download documents in the Patient Portal by the user.')\n        ),\n    ),\n\n    // Connectors Tab\n    //\n    'Connectors' => array(\n\n        'site_addr_oath' => array(\n            xl('Site Address (required for OAuth2 and FHIR)'),\n            'text',\n            '',\n            xl('Site Address (required for OAuth2 and FHIR). Example is') . ' https://localhost:8300 .'\n        ),\n\n        'rest_api' => array(\n            xl('Enable OpenEMR Standard REST API'),\n            'bool',\n            '0',\n            xl('Enable OpenEMR Standard RESTful API.')\n        ),\n\n        'rest_fhir_api' => array(\n            xl('Enable OpenEMR Standard FHIR REST API'),\n            'bool',\n            '0',\n            xl('Enable OpenEMR Standard FHIR RESTful API.')\n        ),\n\n        'rest_portal_api' => array(\n            xl('Enable OpenEMR Patient Portal REST API (EXPERIMENTAL)'),\n            'bool',\n            '0',\n            xl('Enable OpenEMR Patient Portal RESTful API.')\n        ),\n\n        'rest_portal_fhir_api' => array(\n            xl('Enable OpenEMR Patient Portal FHIR REST API (EXPERIMENTAL)'),\n            'bool',\n            '0',\n            xl('Enable OpenEMR Patient Portal FHIR RESTful API.')\n        ),\n\n        'oauth_password_grant' => array(\n            xl('Enable OAuth2 Password Grant (Not considered secure)'),\n            array(\n                0 => xl('Off (Recommended setting)'),\n                1 => xl('On for Users Role'),\n                2 => xl('On for Patient Role'),\n                3 => xl('On for Both Roles')\n            ),\n            '0',\n            xl('Enable OAuth2 Password Grant. Recommend turning this setting off for production server. Recommend only using for testing.')\n        ),\n\n        'cc_front_payments' => array(\n            xl('Accept Credit Card transactions from Front Payments'),\n            'bool',\n            '0',\n            xl('Allow manual entry and authorise credit card payments. Ensure a gateway is enabled.')\n        ),\n\n        'payment_gateway' => array(\n            xl('Select Credit Card Payment Gateway'),\n            array(\n                'InHouse' => xl('In House'),\n                'AuthorizeNet' => xl('Authorize.Net'),\n                'Stripe' => xl('Stripe')\n            ),\n            'InHouse',\n            xl('Enable a Payment Gateway Service for processing credit card transactions')\n        ),\n\n        'gateway_mode_production' => array(\n            xl('Set Gateway to Production Mode'),\n            'bool',                           // data type\n            '0',\n            xl('Check this to go live. Not checked is testing mode.')\n        ),\n\n        'gateway_public_key' => array(\n            xl('Gateway Publishable Key'),\n            'encrypted',\n            '',\n            xl('The public access key for secure tokenize of credit or debit card authorization. PCI compliance')\n        ),\n\n        'gateway_api_key' => array(\n            xl('Gateway API Login Auth Name or Secret'),\n            'encrypted',\n            '',\n            xl('The Auth Name or API key for selected account. Auth Name for Authorize.Net and API Secret for Stripe.')\n        ),\n\n        'gateway_transaction_key' => array(\n            xl('Gateway Transaction Key'),\n            'encrypted',\n            '',\n            xl('Mainly Authorize.Net uses two keys')\n        ),\n\n        'medex_enable' => array(\n          xl('Enable MedEx Communication Service'),\n          'bool',                           // data type\n          '0',\n          xl('Enable MedEx Communication Service')\n        ),\n\n        'erx_enable' => array(\n            xl('Enable NewCrop eRx Service'),\n            'bool',\n            '0',\n            xl('Enable NewCrop eRx Service.') . ' ' .\n            xl('Contact mi-squared at http://www.mi-squared.com/products-services/openemr/ or ZH Healthcare at https://blueehr.com/contact-us/ for subscribing to the NewCrop eRx service.')\n        ),\n\n        'erx_newcrop_path' => array(\n            xl('NewCrop eRx Site Address'),\n            'text',\n            'https://secure.newcropaccounts.com/InterfaceV7/RxEntry.aspx',\n            xl('URL for NewCrop eRx Site Address.')\n        ),\n\n        'erx_newcrop_path_soap' => array(\n            xl('NewCrop eRx Web Service Address'),\n            'text',\n            'https://secure.newcropaccounts.com/v7/WebServices/Update1.asmx?WSDL;https://secure.newcropaccounts.com/v7/WebServices/Patient.asmx?WSDL',\n            xl('URLs for NewCrop eRx Service Address, separated by a semi-colon.')\n        ),\n\n        'erx_soap_ttl_allergies' => array(\n            xl('NewCrop eRx SOAP Request Time-To-Live for Allergies'),\n            'num',\n            '21600',\n            xl('Time-To-Live for NewCrop eRx Allergies SOAP Request in seconds.')\n        ),\n\n        'erx_soap_ttl_medications' => array(\n            xl('NewCrop eRx SOAP Request Time-To-Live for Medications'),\n            'num',\n            '21600',\n            xl('Time-To-Live for NewCrop eRx Medications SOAP Request in seconds.')\n        ),\n\n        'erx_account_partner_name' => array(\n            xl('NewCrop eRx Partner Name'),\n            'text',\n            '',\n            xl('Partner Name issued for NewCrop eRx service.')\n        ),\n\n        'erx_account_name' => array(\n            xl('NewCrop eRx Name'),\n            'text',\n            '',\n            xl('Account Name issued for NewCrop eRx service.')\n        ),\n\n        'erx_account_password' => array(\n            xl('NewCrop eRx Password'),\n            'encrypted',\n            '',\n            xl('Account Password issued for NewCrop eRx service.')\n        ),\n\n        'erx_account_id' => array(\n            xl('NewCrop eRx Account Id'),\n            'text',\n            '1',\n            xl('Account Id issued for NewCrop eRx service, used to separate multi-facility accounts.')\n        ),\n\n        'erx_upload_active' => array(\n            xl('Only upload active prescriptions'),\n            'bool',\n            '0',\n            xl('Only upload active prescriptions to NewCrop eRx.')\n        ),\n\n        'erx_import_status_message' => array(\n            xl('Enable NewCrop eRx import status message'),\n            'bool',\n            '0',\n            xl('Enable import status message after visiting NewCrop eRx.')\n        ),\n\n        'erx_medication_display' => array(\n            xl('Do not display NewCrop eRx Medications uploaded'),\n            'bool',\n            '0',\n            xl('Do not display Medications uploaded after visiting NewCrop eRx.')\n        ),\n\n        'erx_allergy_display' => array(\n            xl('Do not display NewCrop eRx Allergy uploaded'),\n            'bool',\n            '0',\n            xl('Do not display Allergies uploaded after visiting NewCrop eRx.')\n        ),\n\n        'erx_default_patient_country' => array(\n            xl('NewCrop eRx Default Patient Country'),\n            array(\n                '' => '',\n                'US' => xl('USA'),\n                'CA' => xl('Canada'),\n                'MX' => xl('Mexico'),\n            ),\n            '',\n            xl('Default Patient Country sent to NewCrop eRx, only if patient country is not set.'),\n        ),\n\n        'erx_debug_setting' => array(\n            xl('NewCrop eRx Debug Setting'),\n            array(\n                0 => xl('None'),\n                1 => xl('Request Only'),\n                2 => xl('Response Only'),\n                3 => xl('Request & Response'),\n            ),\n            '0',\n            xl('Log all NewCrop eRx Requests and / or Responses.'),\n        ),\n\n        'weno_rx_enable' => array(\n            xl('Enable Weno eRx Service'),\n            'bool',\n            '0',\n            xl('Enable Weno eRx Service') . ' ' . xl('Contact https://online.wenoexchange.com to sign up for Weno Free eRx service.')\n        ),\n\n        'weno_rx_enable_test' => array(\n            xl('Enable Weno eRx Service Test mode'),\n            'bool',\n            '1',\n            xl('Enable Weno eRx Service Test mode')\n        ),\n\n        'weno_encryption_key' => array(\n            xl('Weno Encryption Key'),\n            'encrypted',                      // data type\n            '',\n            xl('Encryption key issued by Weno eRx service.')\n        ),\n\n        'weno_provider_password' => array(\n            xl('Weno Provider Account Password'),\n            'encrypted',                      // data type\n            '',\n            xl('Each provider needs to set this under user settings. This should be blank')\n        ),\n\n        'ccda_alt_service_enable' => array(\n            xl('Enable C-CDA Service'),\n            array(\n                0 => xl('Off'),\n                1 => xl('Care Coordination Only'),\n                2 => xl('Portal Only'),\n                3 => xl('Both'),\n            ),\n            '0',\n            xl('Enable C-CDA Service')\n        ),\n\n        'phimail_enable' => array(\n            xl('Enable phiMail Direct Messaging Service'),\n            'bool',                           // data type\n            '0',\n            xl('Enable phiMail Direct Messaging Service')\n        ),\n\n        'phimail_server_address' => array(\n            xl('phiMail Server Address'),\n            'text',                           // data type\n            'https://phimail.example.com:32541',\n            xl('Contact EMR Direct to subscribe to the phiMail Direct messaging service')\n        ),\n\n        'phimail_username' => array(\n            xl('phiMail Username'),\n            'text',                           // data type\n            '',\n            xl('Contact EMR Direct to subscribe to the phiMail Direct messaging service')\n        ),\n\n        'phimail_password' => array(\n            xl('phiMail Password'),\n            'encrypted',                      // data type\n            '',\n            xl('Contact EMR Direct to subscribe to the phiMail Direct messaging service')\n        ),\n\n        'phimail_notify' => array(\n            xl('phiMail notification user'),\n            'text',                           // data type\n            'admin',\n            xl('This user will receive notification of new incoming Direct messages')\n        ),\n\n        'phimail_interval' => array(\n            xl('phiMail Message Check Interval (minutes)'),\n            'num',                           // data type\n            '5',\n            xl('Interval between message checks (set to zero for manual checks only)')\n        ),\n\n        'phimail_ccd_enable' => array(\n            xl('phiMail Allow CCD Send'),\n            'bool',                           // data type\n            '0',\n            xl('phiMail Allow CCD Send')\n        ),\n\n        'phimail_ccr_enable' => array(\n            xl('phiMail Allow CCR Send'),\n            'bool',                           // data type\n            '0',\n            xl('phiMail Allow CCR Send')\n        ),\n\n        'easipro_enable' => array(\n            xl('Enable Easipro'),\n            'bool',                           // data type\n            '0',\n            xl('Enable Easipro. For licensing options for this feature, please contact') . ' api@assessmentcenter.net'\n        ),\n\n        'easipro_server' => array(\n            xl('Easipro Server'),\n            'text',                           // data type\n            '',\n            xl('Easipro Server')\n        ),\n\n        'easipro_name' => array(\n            xl('Easipro Server Username'),\n            'text',                           // data type\n            '',\n            xl('Easipro Server Username')\n        ),\n\n        'easipro_pass' => array(\n            xl('Easipro Server Password'),\n            'encrypted',                      // data type\n            '',\n            xl('Easipro Server Password')\n        ),\n    ),\n\n    'Rx' => array(\n        'rx_enable_DEA' => array(\n            xl('Rx Enable DEA #'),\n            'bool',                           // data type\n            '1',\n            xl('Rx Enable DEA #')\n        ),\n        'rx_show_DEA' => array(\n            xl('Rx Show DEA #'),\n            'bool',                           // data type\n            '0',\n            xl('Rx Show DEA #')\n        ),\n        'rx_enable_NPI' => array(\n            xl('Rx Enable NPI'),\n            'bool',                           // data type\n            '0',\n            xl('Rx Enable NPI')\n        ),\n        'rx_show_NPI' => array(\n            xl('Rx Show NPI'),\n            'bool',                           // data type\n            '0',\n            xl('Rx Show NPI')\n        ),\n        'rx_enable_SLN' => array(\n            xl('Rx Enable State Lic. #'),\n            'bool',                           // data type\n            '0',\n            xl('Rx Enable State Lic. #')\n        ),\n        'rx_show_SLN' => array(\n            xl('Rx Show State Lic. #'),\n            'bool',                           // data type\n            '0',\n            xl('Rx Show State Lic. #')\n        ),\n        'rx_show_drug_drug' => array(\n            xl('Rx NLM Drug-Drug'),\n            'bool',                           // data type\n            '0',\n            xl('Rx NLM Drug-Drug')\n        ),\n        'rx_paper_size' => array(\n            xl('Rx Paper Size'),               // descriptive name\n            array(\n                'LETTER' => xl('Letter Paper Size'),\n                'LEGAL' => xl('Legal Paper Size'),\n                'FOLIO' => xl('Folio Paper Size'),\n                'EXECUTIVE' => xl('Executive Paper Size'),\n                '4A0' => ('4A0' . \" \" . xl('Paper Size')),\n                '2A0' => ('2A0' . \" \" . xl('Paper Size')),\n                'A0' => ('A0' . \" \" . xl('Paper Size')),\n                'A1' => ('A1' . \" \" . xl('Paper Size')),\n                'A2' => ('A2' . \" \" . xl('Paper Size')),\n                'A3' => ('A3' . \" \" . xl('Paper Size')),\n                'A4' => ('A4' . \" \" . xl('Paper Size')),\n                'A5' => ('A5' . \" \" . xl('Paper Size')),\n                'A6' => ('A6' . \" \" . xl('Paper Size')),\n                'A7' => ('A7' . \" \" . xl('Paper Size')),\n                'A8' => ('A8' . \" \" . xl('Paper Size')),\n                'A9' => ('A9' . \" \" . xl('Paper Size')),\n                'A10' => ('A10' . \" \" . xl('Paper Size')),\n                'B0' => ('B0' . \" \" . xl('Paper Size')),\n                'B1' => ('B1' . \" \" . xl('Paper Size')),\n                'B2' => ('B2' . \" \" . xl('Paper Size')),\n                'B3' => ('B3' . \" \" . xl('Paper Size')),\n                'B4' => ('B4' . \" \" . xl('Paper Size')),\n                'B5' => ('B5' . \" \" . xl('Paper Size')),\n                'B6' => ('B6' . \" \" . xl('Paper Size')),\n                'B7' => ('B7' . \" \" . xl('Paper Size')),\n                'B8' => ('B8' . \" \" . xl('Paper Size')),\n                'B9' => ('B9' . \" \" . xl('Paper Size')),\n                'B10' => ('B10' . \" \" . xl('Paper Size')),\n                'C0' => ('C0' . \" \" . xl('Paper Size')),\n                'C1' => ('C1' . \" \" . xl('Paper Size')),\n                'C2' => ('C2' . \" \" . xl('Paper Size')),\n                'C3' => ('C3' . \" \" . xl('Paper Size')),\n                'C4' => ('C4' . \" \" . xl('Paper Size')),\n                'C5' => ('C5' . \" \" . xl('Paper Size')),\n                'C6' => ('C6' . \" \" . xl('Paper Size')),\n                'C7' => ('C7' . \" \" . xl('Paper Size')),\n                'C8' => ('C8' . \" \" . xl('Paper Size')),\n                'C9' => ('C9' . \" \" . xl('Paper Size')),\n                'C10' => ('C10' . \" \" . xl('Paper Size')),\n                'RA0' => ('RA0' . \" \" . xl('Paper Size')),\n                'RA1' => ('RA1' . \" \" . xl('Paper Size')),\n                'RA2' => ('RA2' . \" \" . xl('Paper Size')),\n                'RA3' => ('RA3' . \" \" . xl('Paper Size')),\n                'RA4' => ('RA4' . \" \" . xl('Paper Size')),\n                'SRA0' => ('SRA0' . \" \" . xl('Paper Size')),\n                'SRA1' => ('SRA1' . \" \" . xl('Paper Size')),\n                'SRA2' => ('SRA2' . \" \" . xl('Paper Size')),\n                'SRA3' => ('SRA3' . \" \" . xl('Paper Size')),\n                'SRA4' => ('SRA4' . \" \" . xl('Paper Size')),\n            ),\n            'LETTER',                              // default = tree menu\n            xl('Rx Paper Size')\n        ),\n        'rx_left_margin' => array(\n            xl('Rx Left Margin (px)'),\n            'num',\n            '30',\n            xl('Rx Left Margin (px)')\n        ),\n        'rx_right_margin' => array(\n            xl('Rx Right Margin (px)'),\n            'num',\n            '30',\n            xl('Rx Right Margin (px)')\n        ),\n        'rx_top_margin' => array(\n            xl('Rx Top Margin (px)'),\n            'num',\n            '72',\n            xl('Rx Top Margin (px)')\n        ),\n        'rx_bottom_margin' => array(\n            xl('Rx Bottom Margin (px)'),\n            'num',\n            '30',\n            xl('Rx Bottom Margin (px)')\n        ),\n        'rx_use_fax_template' => array(\n            xl('Show button for download fax template'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Show button in the prescription list for download fax template')\n        ),\n        'rx_zend_html_template' => array(\n            xl('Rx html print - zend module'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Use an html template from zend module')\n        ),\n        'rx_zend_html_action' => array(\n            xl('Name of zend template for html print'),\n            'text',                           // data type\n            'default',\n            xl('Name of zend template for html print, possible to add custom template in the PrescriptionTemplate module')\n        ),\n        'rx_zend_pdf_template' => array(\n            xl('Rx pdf - zend template'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Use a pdf template from zend module')\n        ),\n        'rx_zend_pdf_action' => array(\n            xl('Name of zend template for pdf export'),\n            'text',                           // data type\n            'default',\n            xl('Name of zend template for pdf export, possible to add custom template in the PrescriptionTemplate module')\n        ),\n    ),\n    'PDF' => array(\n        'pdf_layout' => array(\n            xl('Layout'),\n            array(\n                'P' => xl('Portrait'),\n                'L' => xl('Landscape')\n            ),\n            'P', //defaut\n            xl(\"Choose Layout Direction\"),\n        ),\n        'pdf_language' => array(\n            xl('PDF Language'),\n            array(\n                'aa' => xl('Afar'),\n                'af' => xl('Afrikaans'),\n                'ak' => xl('Akan'),\n                'sq' => xl('Albanian'),\n                'am' => xl('Amharic'),\n                'ar' => xl('Arabic'),\n                'an' => xl('Aragonese'),\n                'hy' => xl('Armenian'),\n                'as' => xl('Assamese'),\n                'av' => xl('Avaric'),\n                'ae' => xl('Avestan'),\n                'ay' => xl('Aymara'),\n                'az' => xl('Azerbaijani'),\n                'bm' => xl('Bambara'),\n                'ba' => xl('Bashkir'),\n                'eu' => xl('Basque'),\n                'be' => xl('Belarusian'),\n                'bn' => xl('Bengali- Bangla'),\n                'bh' => xl('Bihari'),\n                'bi' => xl('Bislama'),\n                'bs' => xl('Bosnian'),\n                'br' => xl('Breton'),\n                'bg' => xl('Bulgarian'),\n                'my' => xl('Burmese'),\n                'ca' => xl('Catalan-\u00a0Valencian'),\n                'ch' => xl('Chamorro'),\n                'ce' => xl('Chechen'),\n                'ny' => xl('Chichewa- Chewa- Nyanja'),\n                'zh' => xl('Chinese'),\n                'cv' => xl('Chuvash'),\n                'kw' => xl('Cornish'),\n                'co' => xl('Corsican'),\n                'cr' => xl('Cree'),\n                'hr' => xl('Croatian'),\n                'cs' => xl('Czech'),\n                'da' => xl('Danish'),\n                'dv' => xl('Divehi- Dhivehi- Maldivian-'),\n                'nl' => xl('Dutch'),\n                'dz' => xl('Dzongkha'),\n                'en' => xl('English'),\n                'eo' => xl('Esperanto'),\n                'et' => xl('Estonian'),\n                'ee' => xl('Ewe'),\n                'fo' => xl('Faroese'),\n                'fj' => xl('Fijian'),\n                'fi' => xl('Finnish'),\n                'fr' => xl('French'),\n                'ff' => xl('Fula- Fulah- Pulaar- Pular'),\n                'gl' => xl('Galician'),\n                'ka' => xl('Georgian'),\n                'de' => xl('German'),\n                'el' => xl('Greek, Modern'),\n                'gn' => xl('Guarani'),\n                'gu' => xl('Gujarati'),\n                'ht' => xl('Haitian- Haitian Creole'),\n                'ha' => xl('Hausa'),\n                'he' => xl('Hebrew\u00a0(modern)'),\n                'hz' => xl('Herero'),\n                'hi' => xl('Hindi'),\n                'ho' => xl('Hiri Motu'),\n                'hu' => xl('Hungarian'),\n                'ia' => xl('Interlingua'),\n                'id' => xl('Indonesian'),\n                'ie' => xl('Interlingue'),\n                'ga' => xl('Irish'),\n                'ig' => xl('Igbo'),\n                'ik' => xl('Inupiaq'),\n                'io' => xl('Ido'),\n                'is' => xl('Icelandic'),\n                'it' => xl('Italian'),\n                'iu' => xl('Inuktitut'),\n                'ja' => xl('Japanese'),\n                'jv' => xl('Javanese'),\n                'kl' => xl('Kalaallisut, Greenlandic'),\n                'kn' => xl('Kannada'),\n                'kr' => xl('Kanuri'),\n                'ks' => xl('Kashmiri'),\n                'kk' => xl('Kazakh'),\n                'km' => xl('Khmer'),\n                'ki' => xl('Kikuyu, Gikuyu'),\n                'rw' => xl('Kinyarwanda'),\n                'ky' => xl('Kyrgyz'),\n                'kv' => xl('Komi'),\n                'kg' => xl('Kongo'),\n                'ko' => xl('Korean'),\n                'ku' => xl('Kurdish'),\n                'kj' => xl('Kwanyama, Kuanyama'),\n                'la' => xl('Latin'),\n                'lb' => xl('Luxembourgish, Letzeburgesch'),\n                'lg' => xl('Ganda'),\n                'li' => xl('Limburgish, Limburgan, Limburger'),\n                'ln' => xl('Lingala'),\n                'lo' => xl('Lao'),\n                'lt' => xl('Lithuanian'),\n                'lu' => xl('Luba-Katanga'),\n                'lv' => xl('Latvian'),\n                'gv' => xl('Manx'),\n                'mk' => xl('Macedonian'),\n                'mg' => xl('Malagasy'),\n                'ms' => xl('Malay'),\n                'ml' => xl('Malayalam'),\n                'mt' => xl('Maltese'),\n                'mi' => xl('Maori'),\n                'mr' => xl('Marathi (Marathi)'),\n                'mh' => xl('Marshallese'),\n                'mn' => xl('Mongolian'),\n                'na' => xl('Nauru'),\n                'nv' => xl('Navajo, Navaho'),\n                'nb' => xl('Norwegian Bokmal'),\n                'nd' => xl('North Ndebele'),\n                'ne' => xl('Nepali'),\n                'ng' => xl('Ndonga'),\n                'nn' => xl('Norwegian Nynorsk'),\n                'no' => xl('Norwegian'),\n                'ii' => xl('Nuosu'),\n                'nr' => xl('South Ndebele'),\n                'oc' => xl('Occitan'),\n                'oj' => xl('Ojibwe, Ojibwa'),\n                'cu' => xl('Old Church Slavonic,\u00a0Church Slavonic,\u00a0Old Bulgarian'),\n                'om' => xl('Oromo'),\n                'or' => xl('Oriya'),\n                'os' => xl('Ossetian, Ossetic'),\n                'pa' => xl('Panjabi, Punjabi'),\n                'pi' => xl('Pali'),\n                'fa' => xl('Persian\u00a0(Farsi)'),\n                'pl' => xl('Polish'),\n                'ps' => xl('Pashto, Pushto'),\n                'pt' => xl('Portuguese'),\n                'qu' => xl('Quechua'),\n                'rm' => xl('Romansh'),\n                'rn' => xl('Kirundi'),\n                'ro' => xl('Romanian'),\n                'ru' => xl('Russian'),\n                'sa' => xl('Sanskrit (Samskrta)'),\n                'sc' => xl('Sardinian'),\n                'sd' => xl('Sindhi'),\n                'se' => xl('Northern Sami'),\n                'sm' => xl('Samoan'),\n                'sg' => xl('Sango'),\n                'sr' => xl('Serbian'),\n                'gd' => xl('Scottish Gaelic- Gaelic'),\n                'sn' => xl('Shona'),\n                'si' => xl('Sinhala, Sinhalese'),\n                'sk' => xl('Slovak'),\n                'sl' => xl('Slovene'),\n                'so' => xl('Somali'),\n                'st' => xl('Southern Sotho'),\n                'es' => xl('Spanish- Castilian'),\n                'su' => xl('Sundanese'),\n                'sw' => xl('Swahili'),\n                'ss' => xl('Swati'),\n                'sv' => xl('Swedish'),\n                'ta' => xl('Tamil'),\n                'te' => xl('Telugu'),\n                'tg' => xl('Tajik'),\n                'th' => xl('Thai'),\n                'ti' => xl('Tigrinya'),\n                'bo' => xl('Tibetan Standard, Tibetan, Central'),\n                'tk' => xl('Turkmen'),\n                'tl' => xl('Tagalog'),\n                'tn' => xl('Tswana'),\n                'to' => xl('Tonga\u00a0(Tonga Islands)'),\n                'tr' => xl('Turkish'),\n                'ts' => xl('Tsonga'),\n                'tt' => xl('Tatar'),\n                'tw' => xl('Twi'),\n                'ty' => xl('Tahitian'),\n                'ug' => xl('Uyghur, Uighur'),\n                'uk' => xl('Ukrainian'),\n                'ur' => xl('Urdu'),\n                'uz' => xl('Uzbek'),\n                've' => xl('Venda'),\n                'vi' => xl('Vietnamese'),\n                'vo' => xl('Volapuk'),\n                'wa' => xl('Walloon'),\n                'cy' => xl('Welsh'),\n                'wo' => xl('Wolof'),\n                'fy' => xl('Western Frisian'),\n                'xh' => xl('Xhosa'),\n                'yi' => xl('Yiddish'),\n                'yo' => xl('Yoruba'),\n                'za' => xl('Zhuang, Chuang'),\n                'zu' => xl('Zulu'),\n            ),\n            'en', // default English\n            xl('Choose PDF languange Preference'),\n        ),\n        'pdf_size' => array(\n            xl('Paper Size'),               // Descriptive Name\n            array(\n                'LETTER' => xl('Letter Paper Size'),\n                'LEGAL' => xl('Legal Paper Size'),\n                'FOLIO' => xl('Folio Paper Size'),\n                'EXECUTIVE' => xl('Executive Paper Size'),\n                '4A0' => ('4A0' . \" \" . xl('Paper Size')),\n                '2A0' => ('2A0' . \" \" . xl('Paper Size')),\n                'A0' => ('A0' . \" \" . xl('Paper Size')),\n                'A1' => ('A1' . \" \" . xl('Paper Size')),\n                'A2' => ('A2' . \" \" . xl('Paper Size')),\n                'A3' => ('A3' . \" \" . xl('Paper Size')),\n                'A4' => ('A4' . \" \" . xl('Paper Size')),\n                'A5' => ('A5' . \" \" . xl('Paper Size')),\n                'A6' => ('A6' . \" \" . xl('Paper Size')),\n                'A7' => ('A7' . \" \" . xl('Paper Size')),\n                'A8' => ('A8' . \" \" . xl('Paper Size')),\n                'A9' => ('A9' . \" \" . xl('Paper Size')),\n                'A10' => ('A10' . \" \" . xl('Paper Size')),\n                'B0' => ('B0' . \" \" . xl('Paper Size')),\n                'B1' => ('B1' . \" \" . xl('Paper Size')),\n                'B2' => ('B2' . \" \" . xl('Paper Size')),\n                'B3' => ('B3' . \" \" . xl('Paper Size')),\n                'B4' => ('B4' . \" \" . xl('Paper Size')),\n                'B5' => ('B5' . \" \" . xl('Paper Size')),\n                'B6' => ('B6' . \" \" . xl('Paper Size')),\n                'B7' => ('B7' . \" \" . xl('Paper Size')),\n                'B8' => ('B8' . \" \" . xl('Paper Size')),\n                'B9' => ('B9' . \" \" . xl('Paper Size')),\n                'B10' => ('B10' . \" \" . xl('Paper Size')),\n                'C0' => ('C0' . \" \" . xl('Paper Size')),\n                'C1' => ('C1' . \" \" . xl('Paper Size')),\n                'C2' => ('C2' . \" \" . xl('Paper Size')),\n                'C3' => ('C3' . \" \" . xl('Paper Size')),\n                'C4' => ('C4' . \" \" . xl('Paper Size')),\n                'C5' => ('C5' . \" \" . xl('Paper Size')),\n                'C6' => ('C6' . \" \" . xl('Paper Size')),\n                'C7' => ('C7' . \" \" . xl('Paper Size')),\n                'C8' => ('C8' . \" \" . xl('Paper Size')),\n                'C9' => ('C9' . \" \" . xl('Paper Size')),\n                'C10' => ('C10' . \" \" . xl('Paper Size')),\n                'RA0' => ('RA0' . \" \" . xl('Paper Size')),\n                'RA1' => ('RA1' . \" \" . xl('Paper Size')),\n                'RA2' => ('RA2' . \" \" . xl('Paper Size')),\n                'RA3' => ('RA3' . \" \" . xl('Paper Size')),\n                'RA4' => ('RA4' . \" \" . xl('Paper Size')),\n                'SRA0' => ('SRA0' . \" \" . xl('Paper Size')),\n                'SRA1' => ('SRA1' . \" \" . xl('Paper Size')),\n                'SRA2' => ('SRA2' . \" \" . xl('Paper Size')),\n                'SRA3' => ('SRA3' . \" \" . xl('Paper Size')),\n                'SRA4' => ('SRA4' . \" \" . xl('Paper Size')),\n            ),\n            'LETTER',\n            xl('Choose Paper Size')\n        ),\n        'pdf_left_margin' => array(\n            xl('Left Margin (mm)'),\n            'num',\n            '5',\n            xl('Left Margin (mm)')\n        ),\n        'pdf_right_margin' => array(\n            xl('Right Margin (mm)'),\n            'num',\n            '5',\n            xl('Right Margin (mm)')\n        ),\n        'pdf_top_margin' => array(\n            xl('Top Margin (mm)'),\n            'num',\n            '5',\n            xl('Top Margin (mm)')\n        ),\n        'pdf_bottom_margin' => array(\n            xl('Bottom Margin (px)'),\n            'num',\n            '8',\n            xl('Bottom Margin (px)')\n        ),\n        'pdf_output' => array(\n            xl('Output Type'),\n            array(\n                'D' => xl('Download'),\n                'I' => xl('Inline')\n            ),\n            'D', //defaut\n            xl(\"Choose Download or Display Inline\"),\n        ),\n\n        'chart_label_type' => array(\n            xl('Patient Label Type'),\n            array(\n                '0' => xl('None'),\n                '1' => '5160',\n                '2' => '5161',\n                '3' => '5162'\n            ),\n            '1', // default\n            xl('Avery Label type for printing patient labels from popups in left nav screen'),\n        ),\n\n        'barcode_label_type' => array(\n            xl('Barcode Label Type'),\n            array(\n                '0' => xl('None'),\n                '1' => 'std25',\n                '2' => 'int25',\n                '3' => 'ean8',\n                '4' => 'ean13',\n                '5' => 'upc',\n                '6' => 'code11',\n                '7' => 'code39',\n                '8' => 'code93',\n                '9' => 'code128',\n                '10' => 'codabar',\n                '11' => 'msi',\n                '12' => 'datamatrix'\n            ),\n            '9',                              // default = None\n            xl('Barcode type for printing barcode labels from popups in left nav screen.')\n        ),\n\n        'addr_label_type' => array(\n            xl('Print Patient Address Label'),\n            'bool',                           // data type\n            '1',                              // default = false\n            xl('Select to print patient address labels from popups in left nav screen.')\n        ),\n\n        'env_x_width' => array(\n            xl('Envelope Width in mm'),\n            'num',                           // data type\n            '104.775',\n            xl('In Portrait mode, determines the width of the envelope along the x-axis in mm')\n        ),\n\n        'env_y_height' => array(\n            xl('Envelope Height in mm'),\n            'num',                           // data type\n            '241.3',\n            xl('In Portrait mode, determines the height of the envelope along the y-axis in mm')\n        ),\n\n        'env_font_size' => array(\n            xl('Font Size in Pt'),\n            'num',                           // data type\n            '14',\n            xl('Sets the font of the address text on the envelope in mm')\n        ),\n\n        'env_x_dist' => array(\n            xl('Envelope x-axis starting pt'),\n            'num',                           // data type\n            '65',\n            xl('Distance from the \\'top\\' of the envelope in mm')\n        ),\n\n        'env_y_dist' => array(\n            xl('Envelope y-axis starting pt'),\n            'num',                           // data type\n            '220',\n            xl('Distance from the right most edge of the envelope in portrait position in mm')\n        ),\n\n    ),\n);\n\nif (empty($skipGlobalEvent)) {\n    $globalsInitEvent = new GlobalsInitializedEvent(new GlobalsService($GLOBALS_METADATA, $USER_SPECIFIC_GLOBALS, $USER_SPECIFIC_TABS));\n    $globalsInitEvent = $GLOBALS[\"kernel\"]->getEventDispatcher()->dispatch(GlobalsInitializedEvent::EVENT_HANDLE, $globalsInitEvent, 10);\n    $globalsService = $globalsInitEvent->getGlobalsService()->save();\n}\n", "<?php\n\n/**\n * AuthUtils class.\n *\n *   Authentication:\n *     1. This class can be run in 1 of 4 modes:\n *       -login:      Authentication of users during standard login.\n *       -api:        Authentication of users when requesting api token.\n *       -portal-api: Authentication of patients when requesting api token.\n *       -other:      Default setting. Other Authentication when already logged into OpenEMR such as when\n *                     doing Esign or changing mfa setting.\n *     2. LDAP (Active Directory) is also supported. In these cases, the login counter and\n *         expired password mechanisms are ignored.\n *     3. Timing attack prevention. The time will be the same for a user that does not exist versus a user\n *         that does exist. This is done in standard authentication and ldap authentication by simulating\n *         the password verification in each via the preventTimingAttack() function.\n *        (There is one issue in this mechanism when using ldap with a user that is excluded from it. In\n *         that case unable to avoid timing differences. That feature is really only meant for configuration and\n *         debugging and recommend inactivating that excluded user when not needed, which will then mitigate\n *         this issue.)\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Kevin Yeh <kevin.y@integralemr.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (c) 2013 Kevin Yeh <kevin.y@integralemr.com>\n * @copyright Copyright (c) 2013 OEMR <www.oemr.org>\n * @copyright Copyright (c) 2018-2020 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nnamespace OpenEMR\\Common\\Auth;\n\nuse OpenEMR\\Common\\Acl\\AclExtended;\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Auth\\AuthHash;\nuse OpenEMR\\Common\\Logging\\EventAuditLogger;\nuse OpenEMR\\Common\\Utils\\RandomGenUtils;\n\nclass AuthUtils\n{\n    private $loginAuth = false; // standard login authentication\n    private $apiAuth = false;   // api login authentication\n    private $portalApiAuth = false;   // patient portal api login authentication\n    private $otherAuth = false; // other use\n\n    private $authHashAuth; // Store the private AuthHash instance.\n\n    private $errorMessage; // Error messages (in updatePassword() function)\n\n    private $userId;       // Stores user id for api to retrieve (in confirmPassword() function)\n    private $userGroup;    // Stores user group for api to retrieve (in confirmPassword() function)\n    private $patientId;    // Stores patient pid for api to retrieve (in confirmPassword() function)\n\n    private $dummyHash;     // Used to prevent timing attacks\n\n    public function __construct($mode = '')\n    {\n        // Set mode\n        if ($mode == 'login') {\n            $this->loginAuth = true;\n        } elseif ($mode == 'api') {\n            $this->apiAuth = true;\n        } elseif ($mode == 'portal-api') {\n            $this->portalApiAuth = true;\n        } else {\n            $this->otherAuth = true;\n        }\n\n        // Set up AuthHash instance (note it uses auth mode)\n        $this->authHashAuth = new AuthHash('auth');\n\n        // Ensure timing attack stuff is in place. This will be to prevent a bad actor from guessing\n        //  usernames and knowing they got a hit since the hash verification will then take time\n        //  whereas essentially no time is taken when the user does not exist. This will place\n        //  a dummy hash at $this->dummyHash, which is used by preventTimingAttack() function to\n        //  simulate a passwordVerify() run using the same hashing algorithm.\n        $dummyPassword = \"dummy\";\n        $timing = privQuery(\"SELECT * FROM `globals` WHERE `gl_name` = 'hidden_auth_dummy_hash'\");\n        if (empty($timing)) {\n            // Create and store a new dummy hash globals entry\n            $this->dummyHash = $this->authHashAuth->passwordHash($dummyPassword);\n            privStatement(\"INSERT INTO `globals` (`gl_name`, `gl_value`) VALUES ('hidden_auth_dummy_hash', ?)\", [$this->dummyHash]);\n        } elseif (empty($timing['gl_value'])) {\n            // Create and store a dummy rehash in existing globals entry\n            $this->dummyHash = $this->authHashAuth->passwordHash($dummyPassword);\n            privStatement(\"UPDATE `globals` SET `gl_value` = ? WHERE `gl_name` = 'hidden_auth_dummy_hash'\", [$this->dummyHash]);\n        } else {\n            // The below line is usually all that will happen in this big block of code\n            $this->dummyHash = $timing['gl_value'];\n            // Ensure the current dummy hash does not need to be rehashed\n            if ($this->authHashAuth->passwordNeedsRehash($timing['gl_value'])) {\n                // Create and store a dummy rehash in existing globals entry\n                $this->dummyHash = $this->authHashAuth->passwordHash($dummyPassword);\n                privStatement(\"UPDATE `globals` SET `gl_value` = ? WHERE `gl_name` = 'hidden_auth_dummy_hash'\", [$this->dummyHash]);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param type $username\n     * @param type $password - password is passed by reference so that it can be \"cleared out\" as soon as we are done with it.\n     * @param type $email    - used in case of portal auth when a email address is required\n     * @return boolean  returns true if the password for the given user is correct, false otherwise.\n     */\n    public function confirmPassword($username, &$password, $email = '')\n    {\n        if ($this->portalApiAuth) {\n            return $this->confirmPatientPassword($username, $password, $email);\n        } else { // $this->loginAuth || $this->apiAuth || $this->otherAuth\n            return $this->confirmUserPassword($username, $password);\n        }\n    }\n\n    /**\n     *\n     * @param type $username\n     * @param type $password - password is passed by reference so that it can be \"cleared out\" as soon as we are done with it.\n     * @param type $email    - used when a email address is required\n     * @return boolean  returns true if the password for the given user is correct, false otherwise.\n     */\n    private function confirmPatientPassword($username, &$password, $email = '')\n    {\n        // Set variables for log\n        $event = 'portalapi';\n        $beginLog = 'Portal API failure';\n\n        // Collect ip address for log\n        $ip = collectIpAddresses();\n\n        // Check to ensure username and password are not empty\n        if (empty($username) || empty($password)) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". empty username or password\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Perform checks from patient_access_onsite\n        $getPatientSQL = \"select `id`, `pid`, `portal_username`, `portal_login_username`, `portal_pwd`, `portal_pwd_status`, `portal_onetime`  from `patient_access_onsite` where BINARY `portal_login_username` = ?\";\n        $patientInfo = privQuery($getPatientSQL, [$username]);\n        if (empty($patientInfo) || empty($patientInfo['id']) || empty($patientInfo['pid'])) {\n            // Patient portal information not found\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient portal information not found\", $patientInfo['pid']);\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        } elseif (empty($patientInfo['portal_username']) || empty($patientInfo['portal_login_username']) || empty($patientInfo['portal_pwd'])) {\n            // Patient missing username, login username, or password\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient missing username, login username, or password\", $patientInfo['pid']);\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        } elseif (!empty($patientInfo['portal_onetime'])) {\n            // Patient onetime is set, so still in process of verifying account\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient account not yet verified (portal_onetime set)\", $patientInfo['pid']);\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        } elseif ($patientInfo['portal_pwd_status'] != 1) {\n            // Patient portal_pwd_status is not 1, so still in process of verifying account\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient account not yet verified (portal_pwd_status is not 1)\", $patientInfo['pid']);\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Perform checks from patient_data\n        $getPatientDataSQL = \"select `pid`, `email`, `allow_patient_portal` FROM `patient_data` WHERE `pid` = ?\";\n        $patientDataInfo = privQuery($getPatientDataSQL, [$patientInfo['pid']]);\n        if (empty($patientDataInfo) || empty($patientDataInfo['pid'])) {\n            // Patient not found\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient not found\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        } elseif ($patientDataInfo['allow_patient_portal'] != \"YES\") {\n            // Patient does not permit portal access\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient does not permit portal access\", $patientDataInfo['pid']);\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        } elseif ($GLOBALS['enforce_signin_email']) {\n            // Need to enforce email in credentials\n            if (empty($email)) {\n                // Patient email was not included in credentials\n                EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient email was not included in credentials\", $patientDataInfo['pid']);\n                $this->clearFromMemory($password);\n                $this->preventTimingAttack();\n                return false;\n            } elseif (empty($patientDataInfo['email'])) {\n                // Patient email missing from demographics\n                EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient does not have an email in demographics\", $patientDataInfo['pid']);\n                $this->clearFromMemory($password);\n                $this->preventTimingAttack();\n                return false;\n            } elseif ($patientDataInfo['email'] != $email) {\n                // Email not correct\n                EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient email not correct\", $patientDataInfo['pid']);\n                $this->clearFromMemory($password);\n                $this->preventTimingAttack();\n                return false;\n            }\n        }\n\n        // This error should never happen, but still gotta check for it\n        if ($patientInfo['pid'] != $patientDataInfo['pid']) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient pid comparison with very unusual error\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Authentication\n        // First, ensure the user hash is a valid hash\n        if (!AuthHash::hashValid($patientInfo['portal_pwd'])) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient stored password hash is invalid\", $patientDataInfo['pid']);\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n        // Second, authentication\n        if (!AuthHash::passwordVerify($password, $patientInfo['portal_pwd'])) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient password incorrect\", $patientDataInfo['pid']);\n            $this->clearFromMemory($password);\n            return false;\n        }\n\n        // Check for rehash\n        if ($this->authHashAuth->passwordNeedsRehash($patientInfo['portal_pwd'])) {\n            // Hash needs updating, so create a new hash, and replace the old one\n            $newHash = $this->rehashPassword($username, $password);\n            // store the rehash\n            privStatement(\"UPDATE `patient_access_onsite` SET `portal_pwd` = ? WHERE `id` = ?\", [$newHash, $patientInfo['id']]);\n        }\n\n        // PASSED auth for the portal api\n        $this->clearFromMemory($password);\n        //  Set up class variable that the api will need to collect (log for API is done outside)\n        $this->patientId = $patientDataInfo['pid'];\n        return true;\n    }\n\n    /**\n     *\n     * @param type $username\n     * @param type $password - password is passed by reference so that it can be \"cleared out\" as soon as we are done with it.\n     * @return boolean  returns true if the password for the given user is correct, false otherwise.\n     */\n    private function confirmUserPassword($username, &$password)\n    {\n        // Set variables for log\n        if ($this->loginAuth) {\n            $event = 'login';\n            $beginLog = 'failure';\n        } elseif ($this->apiAuth) {\n            $event = 'api';\n            $beginLog = 'API failure';\n        } else { // $this->otherAuth\n            $event = 'auth';\n            $beginLog = 'Auth failure';\n        }\n\n        // Collect ip address for log\n        $ip = collectIpAddresses();\n\n        // Check to ensure username and password are not empty\n        if (empty($username) || empty($password)) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". empty username or password\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Check to ensure user exists and is active\n        $getUserSQL = \"select `id`, `authorized`, `see_auth`, `active` from `users` where BINARY `username` = ?\";\n        $userInfo = privQuery($getUserSQL, [$username]);\n        if (empty($userInfo) || empty($userInfo['id'])) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". user not found\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        } elseif ($userInfo['active'] != 1) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". user not active\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Check to ensure user is in a group (and collect the group name)\n        $authGroup = privQuery(\"select `name` from `groups` where BINARY `user` = ?\", [$username]);\n        if (empty($authGroup) || empty($authGroup['name'])) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". user not found in a group\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Check to ensure user is in a acl group\n        if (AclExtended::aclGetGroupTitles($username) == 0) {\n            EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user not in any phpGACL groups\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Collect user credentials from database\n        $getUserSecureSQL = \" SELECT `id`, `password`\" .\n            \" FROM `users_secure`\" .\n            \" WHERE BINARY `username` = ?\";\n        $userSecure = privQuery($getUserSecureSQL, [$username]);\n        if (empty($userSecure) || empty($userSecure['id']) || empty($userSecure['password'])) {\n            EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user credentials not found\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Check password\n        if (self::useActiveDirectory($username)) {\n            // ldap authentication\n            if (!$this->activeDirectoryValidation($username, $password)) {\n                EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user failed ldap authentication\");\n                $this->clearFromMemory($password);\n                return false;\n            }\n        } else {\n            // standard authentication\n            // First, ensure the user hash is a valid hash\n            if (!AuthHash::hashValid($userSecure['password'])) {\n                EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user stored password hash is invalid\");\n                $this->clearFromMemory($password);\n                $this->preventTimingAttack();\n                return false;\n            }\n            // Second, authentication\n            if (!AuthHash::passwordVerify($password, $userSecure['password'])) {\n                if ($this->loginAuth || $this->apiAuth) {\n                    // Utilize this during logins (and not during standard password checks within openemr such as esign)\n                    $this->incrementLoginFailedCounter($username);\n                }\n                EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user password incorrect\");\n                $this->clearFromMemory($password);\n                return false;\n            }\n        }\n\n        // check for rehash\n        if ($this->loginAuth || $this->apiAuth) {\n            // Utilize this during logins (and not during standard password checks within openemr such as esign)\n            if ($this->authHashAuth->passwordNeedsRehash($userSecure['password'])) {\n                // Hash needs updating, so create a new hash, and replace the old one\n                $newHash = $this->rehashPassword($username, $password);\n                // store the rehash\n                privStatement(\"UPDATE `users_secure` SET `password` = ? WHERE `id` = ?\", [$newHash, $userSecure['id']]);\n            }\n        }\n\n        // check login counter if this option is set (note ldap skips this)\n        if ($this->loginAuth || $this->apiAuth) {\n            // Utilize this during logins (and not during standard password checks within openemr such as esign)\n            if (!$this->checkLoginFailedCounter($username)) {\n                $this->incrementLoginFailedCounter($username);\n                EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user exceeded maximum number of failed logins\");\n                $this->clearFromMemory($password);\n                return false;\n            }\n        }\n\n        // Check to ensure password not expired if this option is set (note ldap skips this)\n        if (!$this->checkPasswordNotExpired($username)) {\n            EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user password is expired\");\n            $this->clearFromMemory($password);\n            return false;\n        }\n\n        // PASSED\n        $this->clearFromMemory($password);\n        if ($this->loginAuth || $this->apiAuth) {\n            // Utilize this during logins (and not during standard password checks within openemr such as esign)\n            $this->resetLoginFailedCounter($username);\n        }\n        if ($this->loginAuth) {\n            // Specialized code for login auth (not api auth)\n            if (!empty($newHash)) {\n                $hash = $newHash;\n            } else {\n                $hash = $userSecure['password'];\n            }\n\n            // If $hash is empty, then something is very wrong\n            if (empty($hash)) {\n                error_log('OpenEMR Error : OpenEMR is not working because broken function.');\n                die(\"OpenEMR Error : OpenEMR is not working because broken function.\");\n            }\n\n            // Set up session environment\n            $_SESSION['authUser'] = $username;                     // username\n            $_SESSION['authPass'] = $hash;                         // user hash used to confirm session in authCheckSession()\n            $_SESSION['authUserID'] = $userInfo['id'];             // user id\n            $_SESSION['authProvider'] = $authGroup['name'];        // user group\n            $_SESSION['userauthorized'] = $userInfo['authorized']; // user authorized setting\n            // Some users may be able to authorize without being providers:\n            if ($userInfo['see_auth'] > '2') {\n                $_SESSION['userauthorized'] = '1';\n            }\n            EventAuditLogger::instance()->newEvent('login', $username, $authGroup['name'], 1, \"success: \" . $ip['ip_string']);\n        } elseif ($this->apiAuth) {\n            // Set up class variables that the api will need to collect (log for API is done outside)\n            $this->userId = $userInfo['id'];\n            $this->userGroup = $authGroup['name'];\n        } else {\n            // Log for authentication that are done, which are not api auth or login auth\n            EventAuditLogger::instance()->newEvent('auth', $username, $authGroup['name'], 1, \"Auth success: \" . $ip['ip_string']);\n        }\n        return true;\n    }\n\n    /**\n     * Setup or change a user's password\n     *\n     * @param type $activeUser      ID of who is trying to make the change (either the user himself, or an administrator) - CAN NOT BE EMPTY\n     * @param type $targetUser      ID of what account's password is to be updated (for a new user this doesn't exist yet).\n     * @param type $currentPwd      the active user's current password - CAN NOT BE EMPTY\n     *                              - password is passed by reference so that it can be \"cleared out\" as soon as we are done with it.\n     * @param type $newPwd          the new password for the target user\n     *                              - password is passed by reference so that it can be \"cleared out\" as soon as we are done with it.\n     * @param type $create          Are we creating a new user or\n     * @param type $insert_sql      SQL to run to create the row in \"users\" (and generate a new id) when needed.\n     * @param type $new_username    The username for a new user\n     * @return boolean              Was the password successfully updated/created? If false, then $this->errorMessage will tell you why it failed.\n     */\n    public function updatePassword($activeUser, $targetUser, &$currentPwd, &$newPwd, $create = false, $insert_sql = \"\", $new_username = null)\n    {\n        if (empty($activeUser) || empty($currentPwd)) {\n            $this->errorMessage = xl(\"Password update error!\");\n            $this->clearFromMemory($currentPwd);\n            $this->clearFromMemory($newPwd);\n            return false;\n        }\n\n        $userSQL = \"SELECT `password`, `password_history1`, `password_history2`, `password_history3`, `password_history4`\" .\n            \" FROM `users_secure`\" .\n            \" WHERE `id` = ?\";\n        $userInfo = privQuery($userSQL, [$targetUser]);\n\n        // Verify the active user's password\n        $changingOwnPassword = $activeUser == $targetUser;\n        // True if this is the current user changing their own password\n        if ($changingOwnPassword) {\n            if ($create) {\n                $this->errorMessage = xl(\"Trying to create user with existing username!\");\n                $this->clearFromMemory($currentPwd);\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n            if (empty($userInfo['password'])) {\n                $this->errorMessage = xl(\"Password update error!\");\n                $this->clearFromMemory($currentPwd);\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n            // If this user is changing his own password, then confirm that they have the current password correct\n            if (!AuthHash::passwordVerify($currentPwd, $userInfo['password'])) {\n                $this->errorMessage = xl(\"Incorrect password!\");\n                $this->clearFromMemory($currentPwd);\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n        } else {\n            // If this is an administrator changing someone else's password, then check that they have this privilege\n            if (!AclMain::aclCheckCore('admin', 'users')) {\n                $this->errorMessage = xl(\"Not authorized to manage users!\");\n                $this->clearFromMemory($currentPwd);\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n\n            // If this is an administrator changing someone else's password, then authenticate the administrator\n            if (self::useActiveDirectory()) {\n                if (empty($_SESSION['authUser'])) {\n                    $this->errorMessage = xl(\"Password update error!\");\n                    $this->clearFromMemory($currentPwd);\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n                if (!$this->activeDirectoryValidation($_SESSION['authUser'], $currentPwd)) {\n                    $this->errorMessage = xl(\"Incorrect password!\");\n                    $this->clearFromMemory($currentPwd);\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n            } else {\n                $adminSQL = \"SELECT `password`\" .\n                    \" FROM `users_secure`\" .\n                    \" WHERE `id` = ?\";\n                $adminInfo = privQuery($adminSQL, [$activeUser]);\n                if (empty($adminInfo) || empty($adminInfo['password'])) {\n                    $this->errorMessage = xl(\"Password update error!\");\n                    $this->clearFromMemory($currentPwd);\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n                if (!AuthHash::passwordVerify($currentPwd, $adminInfo['password'])) {\n                    $this->errorMessage = xl(\"Incorrect password!\");\n                    $this->clearFromMemory($currentPwd);\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n            }\n        }\n\n        // End active user check (can now clear $currentPwd since no longer used)\n        $this->clearFromMemory($currentPwd);\n\n        // Use case here is for when an administrator is adding a new user that will be using LDAP for authentication\n        // (note that in this case, a random password is prepared for the new user below that is stored in OpenEMR\n        //  and used only for session confirmations; the primary authentication for the new user will be done via\n        //  LDAP)\n        $ldapDummyPassword = false;\n        if ($create && ($userInfo === false) && (!empty($new_username)) && (self::useActiveDirectory($new_username))) {\n            $ldapDummyPassword = true;\n            $newPwd = RandomGenUtils::produceRandomString(32, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\");\n            if (empty($newPwd)) {\n                // Something is seriously wrong with the random generator\n                $this->clearFromMemory($newPwd);\n                error_log('OpenEMR Error : OpenEMR is not working because unable to create a random unique string.');\n                die(\"OpenEMR Error : OpenEMR is not working because unable to create a random unique string.\");\n            }\n        }\n\n        // Ensure new password is not blank\n        if (empty($newPwd)) {\n            $this->errorMessage = xl(\"Empty Password Not Allowed\");\n            $this->clearFromMemory($newPwd);\n            return false;\n        }\n\n        // Ensure password is long enough, if this option is on (note LDAP skips this)\n        if ((!$ldapDummyPassword) && (!$this->testPasswordLength($newPwd))) {\n            $this->clearFromMemory($newPwd);\n            return false;\n        }\n\n        // Ensure new password is strong enough, if this option is on (note LDAP skips this)\n        if ((!$ldapDummyPassword) && (!$this->testPasswordStrength($newPwd))) {\n            $this->clearFromMemory($newPwd);\n            return false;\n        }\n\n        if ($userInfo === false) {\n            // No userInfo means a new user\n            // In these cases don't worry about password history\n            if ($create) {\n                if (empty($new_username)) {\n                    $this->errorMessage = xl(\"Password update error!\");\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n                // Collect the new user id from the users table\n                privStatement($insert_sql, array());\n                $getUserID = \"SELECT `id`\" .\n                    \" FROM `users`\" .\n                    \" WHERE BINARY `username` = ?\";\n                $user_id = privQuery($getUserID, [$new_username]);\n                if (empty($user_id) || empty($user_id['id'])) {\n                    $this->errorMessage = xl(\"Password update error!\");\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n                // Create the new user password hash\n                $hash = $this->authHashAuth->passwordHash($newPwd);\n                if (empty($hash)) {\n                    // Something is seriously wrong\n                    error_log('OpenEMR Error : OpenEMR is not working because unable to create a hash.');\n                    die(\"OpenEMR Error : OpenEMR is not working because unable to create a hash.\");\n                }\n                // Store the new user credentials\n                $passwordSQL = \"INSERT INTO `users_secure`\" .\n                    \" (`id`,`username`,`password`,`last_update_password`)\" .\n                    \" VALUES (?,?,?,NOW()) \";\n                privStatement($passwordSQL, [$user_id['id'], $new_username, $hash]);\n            } else {\n                $this->errorMessage = xl(\"Missing user credentials\") . \":\" . $targetUser;\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n        } else { // We are trying to update the password of an existing user\n            if ($create) {\n                $this->errorMessage = xl(\"Trying to create user with existing username!\");\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n\n            if (empty($targetUser)) {\n                $this->errorMessage = xl(\"Password update error!\");\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n\n            if (($GLOBALS['password_history'] != 0) && (check_integer($GLOBALS['password_history']))) {\n                // password reuse disallowed\n                $pass_reuse_fail = false;\n                if (($GLOBALS['password_history'] > 0) && (AuthHash::passwordVerify($newPwd, $userInfo['password']))) {\n                    $pass_reuse_fail = true;\n                }\n                if (($GLOBALS['password_history'] > 1) && (AuthHash::passwordVerify($newPwd, $userInfo['password_history1']))) {\n                    $pass_reuse_fail = true;\n                }\n                if (($GLOBALS['password_history'] > 2) && (AuthHash::passwordVerify($newPwd, $userInfo['password_history2']))) {\n                    $pass_reuse_fail = true;\n                }\n                if (($GLOBALS['password_history'] > 3) && (AuthHash::passwordVerify($newPwd, $userInfo['password_history3']))) {\n                    $pass_reuse_fail = true;\n                }\n                if (($GLOBALS['password_history'] > 4) && (AuthHash::passwordVerify($newPwd, $userInfo['password_history4']))) {\n                    $pass_reuse_fail = true;\n                }\n                if ($pass_reuse_fail) {\n                    $this->errorMessage = xl(\"Reuse of previous passwords not allowed!\");\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n            }\n\n            // Everything checks out at this point, so update the password record\n            $newHash = $this->authHashAuth->passwordHash($newPwd);\n            if (empty($newHash)) {\n                // Something is seriously wrong\n                $this->clearFromMemory($newPwd);\n                error_log('OpenEMR Error : OpenEMR is not working because unable to create a hash.');\n                die(\"OpenEMR Error : OpenEMR is not working because unable to create a hash.\");\n            }\n\n            $updateParams = array();\n            $updateSQL = \"UPDATE `users_secure`\";\n            $updateSQL .= \" SET `last_update_password` = NOW()\";\n            $updateSQL .= \", `password` = ?\";\n            array_push($updateParams, $newHash);\n            if ($GLOBALS['password_history'] != 0) {\n                $updateSQL .= \", `password_history1` = ?\";\n                array_push($updateParams, $userInfo['password']);\n                $updateSQL .= \", `password_history2` = ?\";\n                array_push($updateParams, $userInfo['password_history1']);\n                $updateSQL .= \", `password_history3` = ?\";\n                array_push($updateParams, $userInfo['password_history2']);\n                $updateSQL .= \", `password_history4` = ?\";\n                array_push($updateParams, $userInfo['password_history3']);\n            }\n\n            $updateSQL .= \" WHERE `id` = ?\";\n            array_push($updateParams, $targetUser);\n            privStatement($updateSQL, $updateParams);\n\n            // If the user is changing their own password, we need to update the session\n            if ($changingOwnPassword) {\n                $_SESSION['authPass'] = $newHash;\n            }\n        }\n\n        // Done with $newPwd, so can clear it now\n        $this->clearFromMemory($newPwd);\n\n        return true;\n    }\n\n    public function getErrorMessage()\n    {\n        return $this->errorMessage;\n    }\n\n    public function getUserId()\n    {\n        return $this->userId;\n    }\n\n    public function getUserGroup()\n    {\n        return $this->userGroup;\n    }\n\n    public function getPatientId()\n    {\n        return $this->patientId;\n    }\n\n    // Ensure user hash remains valid (for example, if user is deactivated or password is changed, then\n    //  this will not allow the same user in another session continue to use OpenEMR)\n    // This function is static since requires no class specific defines\n    public static function authCheckSession()\n    {\n        if ((!empty($_SESSION['authUserID'])) && (!empty($_SESSION['authUser'])) && (!empty($_SESSION['authPass']))) {\n            $authDB = privQuery(\"SELECT `users`.`username`, `users_secure`.`password`\" .\n                \" FROM `users`, `users_secure`\" .\n                \" WHERE `users`.`id` = ? \" .\n                \" AND `users`.`id` = `users_secure`.`id` \" .\n                \" AND BINARY `users`.`username` = `users_secure`.`username`\" .\n                \" AND `users`.`active` = 1\", [$_SESSION['authUserID']]);\n            if (\n                (!empty($authDB)) &&\n                (!empty($authDB['username'])) &&\n                (!empty($authDB['password'])) &&\n                ($_SESSION['authUser'] == $authDB['username']) &&\n                (hash_equals($_SESSION['authPass'], $authDB['password']))\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    // Check if the current or a specified user logs in with LDAP.\n    // This function is static since requires no class specific defines\n    public static function useActiveDirectory($user = '')\n    {\n        if (empty($GLOBALS['gbl_ldap_enabled'])) {\n            return false;\n        }\n        if ($user == '') {\n            $user = $_SESSION['authUser'];\n        }\n        $exarr = explode(',', $GLOBALS['gbl_ldap_exclusions']);\n        foreach ($exarr as $ex) {\n            if ($user == trim($ex)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Validation of user and password using LDAP.\n    // - $pass passed by reference to prevent storage of pass in memory\n    private function activeDirectoryValidation($user, &$pass)\n    {\n        // Make sure the connection is not anonymous.\n        if ($pass === '' || preg_match('/^\\0/', $pass) || !preg_match('/^[\\w.-]+$/', $user)) {\n            error_log(\"Empty user or password for activeDirectoryValidation()\");\n            return false;\n        }\n\n        // below can be uncommented for detailed debugging\n        // ldap_set_option(NULL, LDAP_OPT_DEBUG_LEVEL, 7);\n\n        $ldapconn = ldap_connect($GLOBALS['gbl_ldap_host']);\n        if ($ldapconn) {\n            // block of code to support encryption\n            $isTls = false;\n            if (\n                file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-ca\") &&\n                file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-cert\") &&\n                file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-key\")\n            ) {\n                // set ca cert and client key/cert\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_CACERTFILE, $GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-ca\")) {\n                    error_log(\"Setting ldap-ca certificate failed\");\n                }\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_CERTFILE, $GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-cert\")) {\n                    error_log(\"Setting ldap-cert client certificate failed\");\n                }\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_KEYFILE, $GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-key\")) {\n                    error_log(\"Setting ldap-cert client key failed\");\n                }\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_REQUIRE_CERT, LDAP_OPT_X_TLS_DEMAND)) {\n                    error_log(\"Setting require_cert to demand failed\");\n                }\n                $isTls = true;\n            } elseif (file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-ca\")) {\n                // set ca cert\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_CACERTFILE, $GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-ca\")) {\n                    error_log(\"Setting ldap-ca certificate failed\");\n                }\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_CERTFILE, '')) {\n                    error_log(\"Clearing ldap-cert client certificate failed\");\n                }\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_KEYFILE, '')) {\n                    error_log(\"Clearing ldap-cert client key failed\");\n                }\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_REQUIRE_CERT, LDAP_OPT_X_TLS_TRY)) {\n                    error_log(\"Setting require_cert to try failed\");\n                }\n                $isTls = true;\n            }\n\n            if (!ldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3)) {\n                error_log(\"Setting LDAP v3 protocol failed\");\n            }\n            if (!ldap_set_option($ldapconn, LDAP_OPT_REFERRALS, 0)) {\n                error_log(\"Disabling LDAP referrals failed\");\n            }\n\n            if ($isTls) {\n                if (!ldap_start_tls($ldapconn)) {\n                    error_log(\"ldap TLS (ldap_start_tls()) failed\");\n                    return false;\n                }\n            }\n\n            $ldapbind = ldap_bind(\n                $ldapconn,\n                str_replace('{login}', $user, $GLOBALS['gbl_ldap_dn']),\n                $pass\n            );\n            if ($ldapbind) {\n                ldap_unbind($ldapconn);\n                return true;\n            }\n        } else {\n            error_log(\"ldap_connect() failed\");\n        }\n        return false;\n    }\n\n    // Function to centralize the rehash process\n    // It will return the new hash\n    // - $password passed by reference to prevent storage of pass in memory\n    private function rehashPassword($username, &$password)\n    {\n        if (self::useActiveDirectory($username)) {\n            // rehash for LDAP\n            $newRandomDummyPassword = RandomGenUtils::produceRandomString(32, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\");\n            if (empty($newRandomDummyPassword)) {\n                // Something is seriously wrong with the random generator\n                $this->clearFromMemory($password);\n                error_log('OpenEMR Error : OpenEMR is not working because unable to create a random unique string.');\n                die(\"OpenEMR Error : OpenEMR is not working because unable to create a random unique string.\");\n            }\n            $phash = $this->authHashAuth->passwordHash($newRandomDummyPassword);\n            $this->clearFromMemory($newRandomDummyPassword);\n        } else {\n            // rehash for standard\n            $phash = $this->authHashAuth->passwordHash($password);\n        }\n\n        if (empty($phash)) {\n            // Something is seriously wrong\n            $this->clearFromMemory($password);\n            error_log('OpenEMR Error : OpenEMR is not working because unable to create a hash.');\n            die(\"OpenEMR Error : OpenEMR is not working because unable to create a hash.\");\n        }\n\n        // return the rehash\n        return $phash;\n    }\n\n    /**\n     * Does the new password meet the length requirements?\n     *\n     * @param type $pwd     the password to test - passed by reference to prevent storage of pass in memory\n     * @return boolean      is the password long enough?\n     */\n    private function testPasswordLength(&$pwd)\n    {\n        if (($GLOBALS['gbl_minimum_password_length'] != 0) && (check_integer($GLOBALS['gbl_minimum_password_length']))) {\n            if (strlen($pwd) < $GLOBALS['gbl_minimum_password_length']) {\n                $this->errorMessage = xl(\"Password too short. Minimum characters required\") . \": \" . $GLOBALS['gbl_minimum_password_length'];\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Does the new password meet the strength requirements?\n     *\n     * @param type $pwd     the password to test - passed by reference to prevent storage of pass in memory\n     * @return boolean      is the password strong enough?\n     */\n    private function testPasswordStrength(&$pwd)\n    {\n        if ($GLOBALS['secure_password']) {\n            $features = 0;\n            $reg_security = array(\"/[a-z]+/\",\"/[A-Z]+/\",\"/\\d+/\",\"/[\\W_]+/\");\n            foreach ($reg_security as $expr) {\n                if (preg_match($expr, $pwd)) {\n                    $features++;\n                }\n            }\n\n            if ($features < 4) {\n                $this->errorMessage = xl(\"Password does not meet minimum requirements and should contain at least each of the following items: A number, a lowercase letter, an uppercase letter, a special character (not a letter or number).\");\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private function checkPasswordNotExpired($user)\n    {\n        if (($GLOBALS['password_expiration_days'] == 0) || self::useActiveDirectory($user)) {\n            // skip the check if turned off or using active directory for login\n            return true;\n        }\n        $query = privQuery(\"SELECT `last_update_password` FROM `users_secure` WHERE BINARY `username` = ?\", [$user]);\n        if ((!empty($query)) && (!empty($query['last_update_password'])) && (check_integer($GLOBALS['password_expiration_days'])) && (check_integer($GLOBALS['password_grace_time']))) {\n            $current_date = date(\"Y-m-d\");\n            $expiredPlusGraceTime = date(\"Y-m-d\", strtotime($query['last_update_password'] . \"+\" . ($GLOBALS['password_expiration_days'] + $GLOBALS['password_grace_time']) . \" days\"));\n            if (strtotime($current_date) > strtotime($expiredPlusGraceTime)) {\n                return false;\n            }\n        } else {\n            error_log(\"OpenEMR ERROR: there is a problem when trying to check if user's password is expired\");\n        }\n        return true;\n    }\n\n    private function checkLoginFailedCounter($user)\n    {\n        if ($GLOBALS['password_max_failed_logins'] == 0 || self::useActiveDirectory($user)) {\n            // skip the check if turned off or using active directory for login\n            return true;\n        }\n\n        $query = privQuery(\"SELECT `login_fail_counter` FROM `users_secure` WHERE BINARY `username` = ?\", [$user]);\n        if ($query['login_fail_counter'] >= $GLOBALS['password_max_failed_logins']) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private function resetLoginFailedCounter($user)\n    {\n        if (!self::useActiveDirectory($user)) {\n            // skip if using active directory for login\n            privStatement(\"UPDATE `users_secure` SET `login_fail_counter` = 0 WHERE BINARY `username` = ?\", [$user]);\n        }\n    }\n\n    private function incrementLoginFailedCounter($user)\n    {\n        if (!self::useActiveDirectory($user)) {\n            // skip if using active directory for login\n            privStatement(\"UPDATE `users_secure` SET `login_fail_counter` = login_fail_counter+1 WHERE BINARY `username` = ?\", [$user]);\n        }\n    }\n\n    // Function to prevent timing attacks\n    //  For standard authentication, simulating a call to passwordVerify() run using the same hashing algorithm.\n    //  For ldap authentication, simulating a call to ldap server.\n    private function preventTimingAttack()\n    {\n        $dummyPassword = \"heyheyhey\";\n        if ($GLOBALS['gbl_ldap_enabled']) {\n            // ldap authentication simulation\n            $this->activeDirectoryValidation(\"dummyCheck\", $dummyPassword);\n        } else {\n            // standard authentication simulation\n            AuthHash::passwordVerify($dummyPassword, $this->dummyHash);\n        }\n    }\n\n    // Function to support clearing password from memory\n    // - $password passed by reference to prevent storage of pass in memory\n    private function clearFromMemory(&$password)\n    {\n        if (function_exists('sodium_memzero')) {\n            sodium_memzero($password);\n        } else {\n            $password = '';\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This program sets the global variables.\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Stephen Waite <stephen.waite@cmsvt.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2015 Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (c) 2018 Stephen Waite <stephen.waite@cmsvt.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n//  Current supported languages:    // Allow capture of term for translation:\n//   Albanian                       // xl('Albanian')\n//   Amharic                        // xl('Amharic')\n//   Arabic                         // xl('Arabic')\n//   Armenian                       // xl('Armenian')\n//   Bahasa Indonesia               // xl('Bahasa Indonesia')\n//   Bengali                        // xl('Bengali')\n//   Bosnian                        // xl('Bosnian')\n//   Bulgarian                      // xl('Bulgarian')\n//   Chinese (Simplified)           // xl('Chinese (Simplified)')\n//   Chinese (Traditional)          // xl('Chinese (Traditional)')\n//   Croatian                       // xl('Croatian')\n//   Czech                          // xl('Czech')\n//   Danish                         // xl('Danish')\n//   Dutch                          // xl('Dutch')\n//   English (Indian)               // xl('English (Indian)')\n//   English (Standard)             // xl('English (Standard)')\n//   Estonian                       // xl('Estonian')\n//   Filipino                       // xl('Filipino')\n//   Finnish                        // xl('Finnish')\n//   French                         // xl('French (Standard)')\n//   French                         // xl('French (Canadian)')\n//   Georgian                       // xl('Georgian')\n//   German                         // xl('German')\n//   Greek                          // xl('Greek')\n//   Hebrew                         // xl('Hebrew')\n//   Hindi                          // xl('Hindi')\n//   Hungarian                      // xl('Hungarian')\n//   Italian                        // xl('Italian')\n//   Japanese                       // xl('Japanese')\n//   Korean                         // xl('Korean')\n//   Lithuanian                     // xl('Lithuanian')\n//   Marathi                        // xl('Marathi')\n//   Mongolian                      // xl('Mongolian')\n//   Norwegian                      // xl('Norwegian')\n//   Persian                        // xl('Persian')\n//   Polish                         // xl('Polish')\n//   Portuguese (Brazilian)         // xl('Portuguese (Brazilian)')\n//   Portuguese (European)          // xl('Portuguese (European)')\n//   Portuguese (European)          // xl('Portuguese (Angolan)')\n//   Romanian                       // xl('Romanian')\n//   Russian                        // xl('Russian')\n//   Serbian                        // xl('Serbian')\n//   Sinhala                        // xl('Sinhala')\n//   Slovak                         // xl('Slovak')\n//   Somali                         // xl('Somali')\n//   Spanish (Latin American)       // xl('Spanish (Latin American)')\n//   Spanish (Spain)                // xl('Spanish (Spain)')\n//   Swedish                        // xl('Swedish')\n//   Tamil                          // xl('Tamil')\n//   Telugu                         // xl('Telugu')\n//   Thai                           // xl('Thai')\n//   Turkish                        // xl('Turkish')\n//   Ukrainian                      // xl('Ukrainian')\n//   Urdu                           // xl('Urdu')\n//   Vietnamese                     // xl('Vietnamese')\n\nuse OpenEMR\\Services\\Globals\\GlobalsService;\nuse OpenEMR\\Events\\Globals\\GlobalsInitializedEvent;\n\n// OS-dependent stuff.\nif (stristr(PHP_OS, 'WIN')) {\n    // MS Windows\n    $mysql_bin_dir = 'C:/xampp/mysql/bin';\n    $perl_bin_dir = 'C:/xampp/perl/bin';\n    $temporary_files_dir = 'C:/windows/temp';\n    $backup_log_dir = 'C:/windows/temp';\n} else {\n    // Everything else\n    $mysql_bin_dir = '/usr/bin';\n    $perl_bin_dir = '/usr/bin';\n    $temporary_files_dir = '/tmp';\n    $backup_log_dir = '/tmp';\n}\n\n// Language constant declarations:\n// xl('Appearance')\n// xl('Locale')\n// xl('Features')\n// xl('Calendar')\n// xl('Security')\n// xl('Notifications')\n// xl('Miscellaneous')\n\n// List of user specific tabs and globals\n$USER_SPECIFIC_TABS = array('Appearance',\n    'Locale',\n    'Features',\n    'Billing',\n    'Report',\n    'Calendar',\n    'CDR',\n    'Connectors');\n$USER_SPECIFIC_GLOBALS = array('default_top_pane',\n    'default_second_tab',\n    'theme_tabs_layout',\n    'css_header',\n    'enable_compact_mode',\n    'vertical_responsive_menu',\n    'menu_styling_vertical',\n    'search_any_patient',\n    'default_encounter_view',\n    'gbl_pt_list_page_size',\n    'gbl_pt_list_new_window',\n    'units_of_measurement',\n    'us_weight_format',\n    'date_display_format',\n    'time_display_format',\n    'enable_help',\n    'text_templates_enabled',\n    'posting_adj_disable',\n    'messages_due_date',\n    'expand_form',\n    'ledger_begin_date',\n    'print_next_appointment_on_ledger',\n    'calendar_view_type',\n    'event_color',\n    'pat_trkr_timer',\n    'ptkr_visit_reason',\n    'ptkr_date_range',\n    'ptkr_start_date',\n    'ptkr_end_date',\n    'checkout_roll_off',\n    'patient_birthday_alert',\n    'patient_birthday_alert_manual_off',\n    'erx_import_status_message',\n    'weno_provider_password');\n\n// Gets array of time zones supported by PHP.\n//\nfunction gblTimeZones()\n{\n    $zones = timezone_identifiers_list();\n    $arr = array('' => xl('Unassigned'));\n    foreach ($zones as $zone) {\n        $arr[$zone] = str_replace('_', ' ', $zone);\n    }\n\n    return $arr;\n}\n\n$GLOBALS_METADATA = array(\n\n    // Appearance Tab\n    //\n    'Appearance' => array(\n\n        'default_top_pane' => array(\n            xl('Main Top Pane Screen(Or Default First Tab)'),       // descriptive name\n            array(\n                'main_info.php' => xl('Calendar Screen'),\n                '../new/new.php' => xl('Patient Search/Add Screen'),\n                '../../interface/main/finder/dynamic_finder.php' => xl('Patient Finder Screen'),\n                '../../interface/patient_tracker/patient_tracker.php?skip_timeout_reset=1' => xl('Patient Flow Board'),\n                '../../interface/main/messages/messages.php?form_active=1' => xl('Messages Screen')\n            ),\n            'main_info.php',                  // default = calendar\n            xl('Main Top Pane Screen(Or Default First Tab)')\n        ),\n\n        'default_second_tab' => array(\n            xl('Default Second Tab'),       // descriptive name\n            array(\n                '' => xl('None'),\n                '../../interface/main/messages/messages.php?form_active=1' => xl('Messages Screen'),\n                'main_info.php' => xl('Calendar Screen'),\n                '../new/new.php' => xl('Patient Search/Add Screen'),\n                '../../interface/main/finder/dynamic_finder.php' => xl('Patient Finder Screen'),\n                '../../interface/patient_tracker/patient_tracker.php?skip_timeout_reset=1' => xl('Patient Flow Board'),\n            ),\n            '../../interface/main/messages/messages.php?form_active=1',    // default = messages\n            xl('Default Second Tab')\n        ),\n\n        'theme_tabs_layout' => array(\n            xl('Tabs Layout Theme') . '*',\n            'tabs_css',\n            'tabs_style_full.css',\n            xl('Theme of the tabs layout (need to logout and then login to see this new setting).')\n        ),\n\n        'login_page_layout' => array(\n            xl('Login Page Layout') . '*',\n            array(\n                'center' => xl(\"Centered Layout\"),\n                'left' => xl(\"Left-Form Layout\"),\n                'right' => xl(\"Right-Form Layout\"),\n            ),\n            'center',\n            xl('Changes the layout of the login page.')\n        ),\n\n        'css_header' => array(\n            // Note: Do not change this as it is only for theme defaults and adding themes here does nothing\n            xl('General Theme') . '*',\n            'css',\n            'style_light.css',\n            xl('Pick a general theme (need to logout/login after changing this setting).')\n        ),\n\n        'enable_compact_mode' => array(\n            xl('Enable Compact Mode'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Changes the current theme to be more compact.')\n        ),\n\n        'menu_styling_vertical' => array(\n            xl('Vertical Menu Style for Frames'),\n            array(\n                '0' => xl('Tree'),\n                '1' => xl('Sliding'),\n            ),\n            '1',\n            xl('Vertical Menu Style for frame based layouts')\n        ),\n\n        'search_any_patient' => array(\n            xl('Search Patient By Any Demographics'),\n            array(\n                'dual' => xl('Dual'),\n                'comprehensive' => xl('Comprehensive'),\n                'fixed' => xl('Fixed'),\n                'none' => xl('None'),\n            ),\n            'dual', // default\n            xl('Search Patient By Any Demographics, Dual additionally lets direct access to Patient Finder, Comprehensive has collapsed input box, Fixed is similar to Dual with fixed size, None is do not show')\n        ),\n\n        'default_encounter_view' => array(\n            xl('Default Encounter View'),               // descriptive name\n            array(\n                '0' => xl('Clinical View'),\n                '1' => xl('Billing View'),\n            ),\n            '0',                              // default = tree menu\n            xl('Choose your default encounter view')\n        ),\n\n        'gbl_nav_area_width' => array(\n            xl('Navigation Area Width for Frames'),\n            'num',\n            '175',\n            xl('Width in pixels of the left navigation frame in frame based layout.')\n        ),\n\n        'openemr_name' => array(\n            xl('Application Title'),\n            'text',\n            'OpenEMR',\n            xl('Application name for login page and main window title.')\n        ),\n\n        'enable_group_therapy' => array(\n            xl('Enable Group Therapy'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Enables groups module in system.')\n        ),\n\n        'full_new_patient_form' => array(\n            xl('New Patient Form'),\n\n            array(\n                '0' => xl('Old-style static form without search or duplication check'),\n                '1' => xl('All demographics fields, with search and duplication check'),\n                '2' => xl('Mandatory or specified fields only, search and dup check'),\n                '3' => xl('Mandatory or specified fields only, dup check, no search'),\n                '4' => xl('Mandatory or specified fields only, use patient validation Zend module'),\n            ),\n            '1',                              // default\n            xl('Style of form used for adding new patients')\n        ),\n\n        'gbl_edit_patient_form' => array(\n            xl('Modify Patient Form'),\n\n            array(\n                '0' => xl('Standard check'),\n                '1' => xl('Zend Module check in addition to standard check')\n            ),\n            '0',                              // default\n            xl('Validation mechanism for when modifying patient demographics.')\n        ),\n\n        'patient_search_results_style' => array(\n            xl('Patient Search Results Style'),\n            array(\n                '0' => xl('Encounter statistics'),\n                '1' => xl('Mandatory and specified fields'),\n            ),\n            '0',                              // default\n            xl('Type of columns displayed for patient search results')\n        ),\n\n        'gbl_tall_nav_area' => array(\n            xl('Tall Navigation Area'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Navigation area uses full height of frameset')\n        ),\n\n        'gbl_nav_visit_forms' => array(\n            xl('Navigation Area Visit Forms'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Navigation area includes encounter forms')\n        ),\n\n        'simplified_prescriptions' => array(\n            xl('Simplified Prescriptions'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Omit form, route and interval which then become part of dosage')\n        ),\n\n        'simplified_copay' => array(\n            xl('Simplified Co-Pay'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Omit method of payment from the co-pay panel')\n        ),\n\n        'use_charges_panel' => array(\n            xl('Use Charges Panel'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Enables the old Charges panel for entering billing codes and payments. Not recommended, use the Fee Sheet instead.')\n        ),\n\n        // TajEmo Work BY CB 2012/06/21 10:42:31 AM added option to Hide Fees\n        'enable_fees_in_left_menu' => array(\n            xl('Enable Fees Submenu'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Enable Fees Submenu')\n        ),\n        'enable_batch_payment' => array(\n            xl('Enable Batch Payment'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Enable Batch Payment')\n        ),\n        'enable_posting' => array(\n            xl('Enable Posting'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Enable Posting')\n        ),\n        // EDI history  2012-09-13\n        'enable_edihistory_in_left_menu' => array(\n            xl('Enable EDI History'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('EDI History (under Fees) for storing and interpreting EDI claim response files')\n        ),\n        //\n        'online_support_link' => array(\n            xl('Online Support Link'),\n            'text',                           // data type\n            'http://open-emr.org/',\n            xl('URL for OpenEMR support.')\n        ),\n\n        'support_phone_number' => array(\n            xl('Support Phone Number'),\n            'text',\n            '',\n            xl('Phone Number for Vendor Support that Appears on the About Page.')\n        ),\n\n        'encounter_page_size' => array(\n            xl('Encounter Page Size'),\n            array(\n                '0' => xl('Show All'),\n                '5' => '5',\n                '10' => '10',\n                '15' => '15',\n                '20' => '20',\n                '25' => '25',\n                '50' => '50',\n            ),\n            '20',\n            xl('Number of encounters to display per page.')\n        ),\n\n        'gbl_pt_list_page_size' => array(\n            xl('Patient List Page Size'),\n            array(\n                '10' => '10',\n                '25' => '25',\n                '50' => '50',\n                '100' => '100',\n            ),\n            '10',\n            xl('Number of patients to display per page in the patient list.')\n        ),\n\n        'gbl_pt_list_new_window' => array(\n            xl('Patient List New Window'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Default state of New Window checkbox in the patient list.')\n        ),\n\n        'num_of_messages_displayed' => array(\n            xl('Number of Messages Displayed in Patient Summary'),\n            'num',\n            '3',\n            xl('This is the number of messages that will be displayed in the messages widget in the patient summary screen.')\n        ),\n\n        'gbl_vitals_options' => array(\n            xl('Vitals Form Options'),\n            array(\n                '0' => xl('Standard'),\n                '1' => xl('Omit circumferences'),\n            ),\n            '0',                              // default\n            xl('Special treatment for the Vitals form')\n        ),\n\n        'gb_how_sort_list' => array(\n            xl('How to sort a drop-lists'),\n            array(\n                '0' => xl('Sort by seq'),\n                '1' => xl('Sort alphabetically')\n            ),\n            '0',\n            xl('What kind of sorting will be in the drop lists.')\n        ),\n\n        'show_label_login' => array(\n            xl('Show Title on Login'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Show Title on Login')\n        ),\n\n        'extra_logo_login' => array(\n            xl('Show Extra Logo on Login'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Show Extra Logo on Login')\n        ),\n\n        'tiny_logo_1' => array(\n            xl('Show Mini Logo 1'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Show Mini Logo 1')\n        ),\n\n        'tiny_logo_2' => array(\n            xl('Show Mini Logo 2'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Show Mini Logo 2')\n        ),\n\n        'prevent_browser_refresh' => array(\n            xl('Prevent Web Browser Refresh') . '*',\n            array(\n                '0' => xl('Do not warn or prevent web browser refresh'),\n                '1' => xl('Warn, but do not prevent web browser refresh'),\n                '2' => xl('Warn and prevent web browser refresh')\n            ),\n            '2',                              // default = true\n            xl('Recommended setting is warn and prevent web browser refresh. Only use other settings if needed and use at own risk.')\n        ),\n\n    ),\n\n    // Locale Tab\n    //\n    'Locale' => array(\n\n        'language_default' => array(\n            xl('Default Language'),\n            'lang',                           // data type\n            'English (Standard)',             // default = english\n            xl('Default language if no other is allowed or chosen.')\n        ),\n\n        'language_menu_showall' => array(\n            xl('All Languages Allowed'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Allow all available languages as choices on menu at login.')\n        ),\n\n        'language_menu_other' => array(\n            xl('Allowed Languages'),\n            'm_lang',                         // data type\n            '',                               // default = none\n            xl('Select which languages, if any, may be chosen at login. (only pertinent if above All Languages Allowed is turned off)')\n        ),\n\n        'allow_debug_language' => array(\n            xl('Allow Debugging Language'),\n            'bool',                           // data type\n            '0',                              // default = true during development and false for production releases\n            xl('This will allow selection of the debugging (\\'dummy\\') language.')\n        ),\n\n        'translate_no_safe_apostrophe' => array(\n            xl('Do Not Use Safe Apostrophe'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will turn off use of safe apostrophe, which is done by converting \\' and \" to `.(it is highly recommended that this setting is turned off and that safe apostrophe\\'s are used)')\n        ),\n\n        'translate_layout' => array(\n            xl('Translate Layouts'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Is text from form layouts to be translated?')\n        ),\n\n        'translate_lists' => array(\n            xl('Translate Lists'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Is text from lists to be translated?')\n        ),\n\n        'translate_gacl_groups' => array(\n            xl('Translate Access Control Groups'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Are access control group names to be translated?')\n        ),\n\n        'translate_form_titles' => array(\n            xl('Translate Patient Note Titles'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Are patient note titles to be translated?')\n        ),\n\n        'translate_document_categories' => array(\n            xl('Translate Document Categories'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Are document category names to be translated?')\n        ),\n\n        'translate_appt_categories' => array(\n            xl('Translate Appointment Categories'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Are appointment category names to be translated?')\n        ),\n\n        'units_of_measurement' => array(\n            xl('Units for Visit Forms'),\n            array(\n                '1' => xl('Show both US and metric (main unit is US)'),\n                '2' => xl('Show both US and metric (main unit is metric)'),\n                '3' => xl('Show US only'),\n                '4' => xl('Show metric only'),\n            ),\n            '1',                              // default = Both/US\n            xl('Applies to the Vitals form and Growth Chart')\n        ),\n\n        'us_weight_format' => array(\n            xl('Display Format for US Weights'),\n            array(\n                '1' => xl('Show pounds as decimal value'),\n                '2' => xl('Show pounds and ounces')\n            ),\n            '1',\n            xl('Applies to Vitals form')\n        ),\n\n        'phone_country_code' => array(\n            xl('Telephone Country Code'),\n            'num',\n            '1',                              // default = North America\n            xl('1 = North America. See http://www.wtng.info/ for a list of other country codes.')\n        ),\n\n        'date_display_format' => array(\n            xl('Date Display Format'),\n            array(\n                '0' => xl('YYYY-MM-DD'),\n                '1' => xl('MM/DD/YYYY'),\n                '2' => xl('DD/MM/YYYY'),\n            ),\n            '0',\n            xl('Format used to display most dates.')\n        ),\n\n        'time_display_format' => array(\n            xl('Time Display Format'),\n            array(\n                '0' => xl('24 hr'),\n                '1' => xl('12 hr'),\n            ),\n            '0',\n            xl('Format used to display most times.')\n        ),\n\n        'gbl_time_zone' => array(\n            xl('Time Zone'),\n            gblTimeZones(),\n            '',\n            xl('If unassigned will default to php.ini setting for date.timezone.')\n        ),\n\n        'currency_decimals' => array(\n            xl('Currency Decimal Places'),\n            array(\n                '0' => xl('0'),\n                '1' => xl('1'),\n                '2' => xl('2'),\n            ),\n            '2',\n            xl('Number of digits after decimal point for currency, usually 0 or 2.')\n        ),\n\n        'currency_dec_point' => array(\n            xl('Currency Decimal Point Symbol'),\n            array(\n                '.' => xl('Period'),\n                ',' => xl('Comma'),\n            ),\n            '.',\n            xl('Symbol used as the decimal point for currency. Not used if Decimal Places is 0.')\n        ),\n\n        'currency_thousands_sep' => array(\n            xl('Currency Thousands Separator'),\n            array(\n                ',' => xl('Comma'),\n                '.' => xl('Period'),\n                ' ' => xl('Space'),\n                '' => xl('None'),\n            ),\n            ',',\n            xl('Symbol used to separate thousands for currency.')\n        ),\n\n        'gbl_currency_symbol' => array(\n            xl('Currency Designator'),\n            'text',                           // data type\n            '$',                              // default\n            xl('Code or symbol to indicate currency')\n        ),\n        'age_display_format' => array(xl('Age Display Format'),\n            array(\n                '0' => xl('Years or months'),\n                '1' => xl('Years, months and days')\n            ),\n            '0',\n            xl('Format for age display')\n        ),\n        'age_display_limit' => array(\n            xl('Age in Years for Display Format Change'),\n            'num',\n            '3',\n            xl('If YMD is selected for age display, switch to just Years when patients older than this value in years')\n        ),\n        // Reference - https://en.wikipedia.org/wiki/Workweek_and_weekend#Around_the_world\n        'weekend_days' => array(\n            xl('Your weekend days'),\n            array(\n                '6,0' => xl('Saturday') . ' - ' . xl('Sunday'),\n                '0' => xl('Sunday'),\n                '5' => xl('Friday'),\n                '6' => xl('Saturday'),\n                '5,6' => xl('Friday') . ' - ' . xl('Saturday'),\n            ),\n            '6,0'\n        , xl('which days are your weekend days?')\n        )\n\n    ),\n\n    // Features Tab\n    //\n    'Features' => array(\n\n        'specific_application' => array(\n            xl('Specific Application'),\n            array(\n                '0' => xl('None'),\n                '2' => xl('IPPF'),\n                '3' => xl('Weight loss clinic'),\n            ),\n            '0',                              // default\n            xl('Indicator for specialized usage')\n        ),\n\n        'inhouse_pharmacy' => array(\n            xl('Drugs and Products'),\n            array(\n                '0' => xl('Do not inventory and sell any products'),\n                '1' => xl('Inventory and sell drugs only'),\n                '2' => xl('Inventory and sell both drugs and non-drug products'),\n                '3' => xl('Products but no prescription drugs and no templates'),\n            ),\n            '0',                              // default\n            xl('Option to support inventory and sales of products')\n        ),\n\n        'default_visit_category' => array(\n            xl('Default Visit Category'),\n            'default_visit_category',\n            '_blank',\n            xl('Define a default visit category'),\n        ),\n\n        'enable_follow_up_encounters' => array(\n            xl('Enable follow-up encounters'),\n            'bool',\n            '0',\n            xl('Enable follow-up encounters feature')\n        ),\n\n        'disable_chart_tracker' => array(\n            xl('Disable Chart Tracker'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Removes the Chart Tracker feature')\n        ),\n\n        'disable_immunizations' => array(\n            xl('Disable Immunizations'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Removes support for immunizations')\n        ),\n\n        'disable_prescriptions' => array(\n            xl('Disable Prescriptions'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Removes support for prescriptions')\n        ),\n\n        'text_templates_enabled' => array(\n            xl('Enable Text Templates in Encounter Forms'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Allow Double Click to select Nation Note text template from any encounter form text area')\n        ),\n\n        'omit_employers' => array(\n            xl('Omit Employers'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Omit employer information in patient demographics')\n        ),\n\n        'select_multi_providers' => array(\n            xl('Support Multi-Provider Events'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Support calendar events that apply to multiple providers')\n        ),\n\n        'disable_non_default_groups' => array(\n            xl('Disable User Groups'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Normally this should be checked. Not related to access control.')\n        ),\n\n        'ignore_pnotes_authorization' => array(\n            xl('Skip Authorization of Patient Notes'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Do not require patient notes to be authorized')\n        ),\n\n        'support_encounter_claims' => array(\n            xl('Allow Encounter Claims'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Allow creation of claims containing diagnoses but not procedures or charges. Most clinics do not want this.')\n        ),\n\n        'advance_directives_warning' => array(\n            xl('Advance Directives Warning'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Display advance directives in the demographics page.')\n        ),\n\n        'configuration_import_export' => array(\n            xl('Configuration Export/Import'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Support export/import of configuration data via the Backup page.')\n        ),\n\n        'restrict_user_facility' => array(\n            xl('Restrict Users to Facilities'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Restrict non-authorized users to the Schedule Facilities set in User admin.')\n        ),\n\n        'set_facility_cookie' => array(\n            xl('Remember Selected Facility'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Set a facility cookie to remember the selected facility between logins.')\n        ),\n\n        'login_into_facility' => array(\n            xl('Login Into Facility'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Select your current facility in the login page')\n        ),\n\n        'receipts_by_provider' => array(\n            xl('Print Receipts by Provider'),\n            'bool',\n            '0',                              // default\n            xl('Causes Receipts to Print Encounter/Primary Provider Info')\n        ),\n\n        'discount_by_money' => array(\n            xl('Discounts as Monetary Amounts'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Discounts at checkout time are entered as money amounts, as opposed to percentage.')\n        ),\n\n        'gbl_visit_referral_source' => array(\n            xl('Referral Source for Encounters'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('A referral source may be specified for each visit.')\n        ),\n\n        'gbl_mask_patient_id' => array(\n            xl('Mask for Patient IDs'),\n            'text',                           // data type\n            '',                               // default\n            xl('Specifies formatting for the external patient ID.  # = digit, @ = alpha, * = any character.  Empty if not used.')\n        ),\n\n        'gbl_mask_invoice_number' => array(\n            xl('Mask for Invoice Numbers'),\n            'text',                           // data type\n            '',                               // default\n            xl('Specifies formatting for invoice reference numbers.  # = digit, @ = alpha, * = any character.  Empty if not used.')\n        ),\n\n        'gbl_mask_product_id' => array(\n            xl('Mask for Product IDs'),\n            'text',                           // data type\n            '',                               // default\n            xl('Specifies formatting for product NDC fields.  # = digit, @ = alpha, * = any character.  Empty if not used.')\n        ),\n\n        'hide_billing_widget' => array(\n            xl('Hide Billing Widget'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will hide the Billing Widget in the Patient Summary screen')\n        ),\n\n        'force_billing_widget_open' => array(\n            xl('Force Billing Widget Open'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will force the Billing Widget in the Patient Summary screen to always be open.')\n        ),\n\n        'activate_ccr_ccd_report' => array(\n            xl('Activate CCR/CCD Reporting'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('This will activate the CCR(Continuity of Care Record) and CCD(Continuity of Care Document) reporting.')\n        ),\n\n        'drive_encryption' => array(\n            xl('Enable Encryption of Items Stored on Drive'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('This will enable encryption of items that are stored on the drive.')\n        ),\n\n        'couchdb_encryption' => array(\n            xl('Enable Encryption of Items Stored on CouchDB'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('This will enable encryption of items that are stored on CouchDB.')\n        ),\n\n        'hide_document_encryption' => array(\n            xl('Hide Encryption/Decryption Options In Document Management'),\n            'bool',                           // data type\n            '0',                              // default = true\n            xl('This will deactivate document the encryption and decryption features, and hide them in the UI.')\n        ),\n\n        'use_custom_immun_list' => array(\n            xl('Use Custom Immunization List'),\n            'bool',                           // data type\n            '0',                              // default = true\n            xl('This will use the custom immunizations list rather than the standard CVX immunization list.')\n        ),\n\n        'amendments' => array(\n            xl('Amendments'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Enable amendments feature')\n        ),\n\n        'allow_pat_delete' => array(\n            xl('Allow Administrators to Delete Patients'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Allow Administrators to Delete Patients')\n\n        ),\n\n        'observation_results_immunization' => array(\n            xl('Immunization Observation Results'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Observation Results in Immunization')\n        ),\n\n        'enable_help' => array(\n           xl('Enable Help Modal'),\n            array(\n                '0' => xl('Hide Help Modal'),\n                '1' => xl('Show Help Modal'),\n                '2' => xl('Disable Help Modal'),\n            ),                       // data type\n            '1',                     // default = Print End of Day Report 1\n            xl('This will allow the display of help modal on help enabled pages')\n        ),\n        'messages_due_date' => array(\n            xl('Messages - due date'),\n            'bool',                           // data type\n            '0',                              // default false\n            xl('Enables choose due date to message')\n        ),\n\n        'expand_form' => array(\n            xl('Expand Form'),\n            'bool',                           // data type\n            '1',                              // default false\n            xl('Open all expandable forms in expanded state')\n        ),\n\n    ),\n    // Report Tab\n    //\n    'Report' => array(\n\n        'use_custom_daysheet' => array(\n            xl('Use Custom End of Day Report'),\n            array(\n                '0' => xl('None'),\n                '1' => xl('Print End of Day Report 1'),\n                '2' => xl('Print End of Day Report 2'),\n                '3' => xl('Print End of Day Report 3'),\n            ),                       // data type\n            '1',                     // default = Print End of Day Report 1\n            xl('This will allow the use of the custom End of Day report and indicate which report to use.')\n        ),\n\n        'daysheet_provider_totals' => array(\n            xl('End of Day by Provider or allow Totals Only'),\n            array(\n                '0' => xl('Provider'),\n                '1' => xl('Totals Only'),\n            ),\n            '1',                              // default\n            xl('This specifies the Printing of the Custom End of Day Report grouped Provider or allow the Printing of Totals Only')\n        ),\n\n        'ledger_begin_date' => array(\n            xl('Beginning Date for Ledger Report'),\n            array(\n                'Y1' => xl('One Year Ago'),\n                'Y2' => xl('Two Years Ago'),\n                'M6' => xl('Six Months Ago'),\n                'M3' => xl('Three Months Ago'),\n                'M1' => xl('One Month Ago'),\n                'D1' => xl('One Day Ago'),\n            ),\n            'Y1',                     // default = One Year\n            xl('This is the Beginning date for the Ledger Report.')\n        ),\n\n        'print_next_appointment_on_ledger' => array(\n            xl('Print the Next Appointment on the Bottom of the Ledger'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('This Will Print the Next Appointment on the Bottom of the Patient Ledger')\n        ),\n\n        'sales_report_invoice' => array(\n            xl('Display Invoice Number or Patient Name or Both in the Sales Report'),\n            array(\n                '0' => xl('Invoice Number'),\n                '1' => xl('Patient Name and ID'),\n                '2' => xl('Patient Name and Invoice'),\n            ),\n            '2',                              // default = 2\n            xl('This will Display the Invoice Number in the Sales Report or the Patient Name and ID or Patient Name and Invoice Number.')\n        ),\n\n        'cash_receipts_report_invoice' => array(\n            xl('Display Invoice Number or Patient Name in the Cash Receipt Report'),\n            array(\n                '0' => xl('Invoice Number'),\n                '1' => xl('Patient Name'),\n            ),\n            '0',                              // default = 0\n            xl('Display Invoice Number or Patient Name in the Cash Receipt Report')\n        ),\n\n    ),\n\n    // Billing Tab\n\n    'Billing' => array(\n\n        'ub04_support' => array(\n            xl('Activate UB04/837I Claim Support'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Allow institutional claims support.')\n        ),\n\n        'top_ubmargin_default' => array(\n            xl('Default top print margin for UB04'),\n            'num', // data type\n            '14', // default\n            xl('This is the default top print margin for UB04. It will adjust the final printed output up or down.')\n        ),\n\n        'left_ubmargin_default' => array(\n            xl('Default left print margin for UB04'),\n            'num', // data type\n            '11', // default\n            xl('This is the default left print margin for UB04. It will adjust the final printed output left or right.')\n        ),\n\n        'cms_top_margin_default' => array(\n            xl('Default top print margin for CMS 1500'),\n            'num', // data type\n            '24', // default\n            xl('This is the default top print margin for CMS 1500. It will adjust the final printed output up or down.')\n        ),\n\n        'cms_left_margin_default' => array(\n            xl('Default left print margin for CMS 1500'),\n            'num', // data type\n            '20', // default\n            xl('This is the default left print margin for CMS 1500. It will adjust the final printed output left or right.')\n        ),\n\n        'preprinted_cms_1500' => array(\n            xl('Prints the CMS 1500 on the Preprinted form'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Overlay CMS 1500 on the Preprinted form')\n        ),\n\n        'cms_1500_box_31_format' => array(\n            xl('CMS 1500: Box 31 Format'),\n            array(\n                '0' => xl('Signature on File'),\n                '1' => xl('Firstname Lastname'),\n                '2' => xl('None'),\n            ),\n            '0',                              // default\n            xl('This specifies whether to include date in Box 31.')\n        ),\n\n        'cms_1500_box_31_date' => array(\n            xl('CMS 1500: Date in Box 31 (Signature)'),\n            array(\n                '0' => xl('None'),\n                '1' => xl('Date of Service'),\n                '2' => xl('Today'),\n            ),\n            '0',                              // default\n            xl('This specifies whether to include date in Box 31.')\n        ),\n\n        'default_search_code_type' => array(\n            xl('Default Search Code Type'),\n            'all_code_types',  // data type\n            'ICD10',                 // default\n            xl('The default code type to search for in the Fee Sheet.')\n        ),\n\n        'default_rendering_provider' => array(\n            xl('Default Rendering Provider in Fee Sheet'),\n            array(\n                '0' => xl('Please Select'),\n                '1' => xl('Current Provider'),\n                '2' => xl('Current Logged in User'),\n            ),\n            '1',\n            xl('Default selection for rendering provider in fee sheet.')\n        ),\n\n        'posting_adj_disable' => array(\n            xl('Disable Auto Adjustment Calculations in EOB Posting'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Turn off auto calculations of adjustments in EOB')\n        ),\n\n        'show_payment_history' => array(\n            xl('Show all payment history in Patient Ledger'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Turn on to show all payment history in Patient Ledger')\n        ),\n\n        'support_fee_sheet_line_item_provider' => array(\n            xl('Support provider in line item in fee sheet'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This Enables provider in line item in the fee sheet')\n        ),\n\n        'default_fee_sheet_line_item_provider' => array(\n            xl('Default to a provider for line item in the fee sheet'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Default to a provider for line item in the fee sheet.(only applicable if Support line item billing in option above)')\n        ),\n\n        'replicate_justification' => array(\n            xl('Automatically replicate justification codes in Fee Sheet'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Automatically replicate justification codes in Fee Sheet (basically fills in the blanks with the justification code above it).')\n        ),\n\n        'display_units_in_billing' => array(\n            xl('Display the Units Column on the Billing Screen'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Display the Units Column on the Billing Screen')\n        ),\n\n        'notes_to_display_in_Billing' => array(\n            xl('Which notes are to be displayed in the Billing Screen'),\n            array(\n                '0' => xl('None'),\n                '1' => xl('Encounter Billing Note'),\n                '2' => xl('Patient Billing Note'),\n                '3' => xl('All'),\n            ),\n            '3',\n            xl('Display the Encounter Billing Note or Patient Billing Note or Both in the Billing Screen.')\n        ),\n\n        'set_pos_code_encounter' => array(\n            xl('Set POS code in encounter'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This feature will allow the default POS facility code to be overridden from the encounter.')\n        ),\n\n        'statement_logo' => array(\n            xl('Statement Logo GIF Filename'),\n            'text',                           // data type\n            'practice_logo.gif',                               // data type\n            xl('Place your logo in sites/default/images and type the filename including gif extension here.')\n        ),\n\n        'use_custom_statement' => array(\n            xl('Use Custom Statement'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will use the custom Statement showing the description instead of the codes.')\n        ),\n\n        'statement_appearance' => array(\n            xl('Statement Appearance'),\n            array(\n                '0' => xl('Plain Text'),\n                '1' => xl('Modern/images')\n            ),                          // data type\n            '1',                              // default = true\n            xl('Patient statements can be generated as plain text or with a modern graphical appearance.')\n        ),\n\n        'billing_phone_number' => array(\n            xl('Custom Billing Phone Number'),\n            'text',                           // data type\n            '',\n            xl('Phone number for billing inquiries')\n        ),\n\n        'show_aging_on_custom_statement' => array(\n            xl('Show Aging on Custom Statement'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will Show Aging on the custom Statement.')\n        ),\n\n        'use_statement_print_exclusion' => array(\n            xl('Allow Statement Exclusions from Printing'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will enable the Ability to Exclude Selected Patient Statements from Printing.')\n        ),\n\n        'minimum_amount_to_print' => array(\n            xl('Total Minimum Amount of Statement to Allow Printing'),\n            'num',                           // data type\n            '1.00',\n            xl('Total Minimum Dollar Amount of Statement to Allow Printing.(only applicable if Allow Statement Exclusions from Printing is enabled)')\n        ),\n\n        'statement_bill_note_print' => array(\n            xl('Print Patient Billing Note'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will allow printing of the Patient Billing Note on the statements.')\n        ),\n\n        'number_appointments_on_statement' => array(\n            xl('Number of Appointments on Statement'),\n            'num',                           // data type\n            '0',                              // default = 0\n            xl('The Number of Future Appointments to Display on the Statement.')\n        ),\n\n        'statement_message_to_patient' => array(\n            xl('Print Custom Message'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will allow printing of a custom Message on the statements.')\n        ),\n\n        'statement_msg_text' => array(\n            xl('Custom Statement message'),\n            'text',                           // data type\n            '',\n            xl('Text for Custom statement message.')\n        ),\n\n        'use_dunning_message' => array(\n            xl('Use Custom Dunning Messages'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will allow use of the custom Dunning Messages on the statements.')\n        ),\n\n        'first_dun_msg_set' => array(\n            xl('Number of days before showing first account message'),\n            'num',                           // data type\n            '30',\n            xl('Number of days before showing first account message.')\n        ),\n\n        'first_dun_msg_text' => array(\n            xl('First account message'),\n            'text',                           // data type\n            '',\n            xl('Text for first account message.')\n        ),\n\n        'second_dun_msg_set' => array(\n            xl('Number of days before showing second account message'),\n            'num',                           // data type\n            '60',\n            xl('Number of days before showing second account message')\n        ),\n\n        'second_dun_msg_text' => array(\n            xl('Second account message'),\n            'text',                           // data type\n            '',\n            xl('Text for second account message.')\n        ),\n\n        'third_dun_msg_set' => array(\n            xl('Number of days before showing third account message'),\n            'num',                           // data type\n            '90',\n            xl('Number of days before showing third account message')\n        ),\n\n        'third_dun_msg_text' => array(\n            xl('Third account message'),\n            'text',                           // data type\n            '',\n            xl('Text for third account message.')\n        ),\n\n        'fourth_dun_msg_set' => array(\n            xl('Number of days before showing fourth account message'),\n            'num',                           // data type\n            '120',\n            xl('Number of days before showing fourth account message')\n        ),\n\n        'fourth_dun_msg_text' => array(\n            xl('Fourth account message'),\n            'text',                           // data type\n            '',\n            xl('Text for fourth account message.')\n        ),\n\n        'fifth_dun_msg_set' => array(\n            xl('Number of days before showing fifth account message'),\n            'num',                           // data type\n            '150',\n            xl('Number of days before showing fifth account message')\n        ),\n\n        'fifth_dun_msg_text' => array(\n            xl('Fifth account message'),\n            'text',                           // data type\n            '',\n            xl('Text for fifth account message.')\n        ),\n\n        'save_codes_history' => array(\n            xl('Save codes history'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Save codes history')\n        ),\n\n        'enable_percent_pricing' => array(\n            xl('Enable percent-based price levels'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable percent-based price levels')\n        )\n    ),\n\n    // E-Sign Tab\n    //\n    'E-Sign' => array(\n\n        'esign_all' => array(\n            xl('Allows E-Sign on the entire encounter'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will enable signing an entire encounter, rather than individual forms')\n        ),\n\n        'lock_esign_all' => array(\n            xl('Lock e-signed encounters and their forms'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will disable the Edit button on all forms whose parent encounter is e-signed')\n        ),\n\n        'esign_individual' => array(\n            xl('Allows E-Signing Individual Forms'),\n            'bool',                           // data type\n            '1',                              // default = false\n            xl('This will enable signing individual forms separately')\n        ),\n\n        'lock_esign_individual' => array(\n            xl('Lock an e-signed form individually'),\n            'bool',                           // data type\n            '1',                              // default = false\n            xl('This will disable the Edit button on any form that is e-signed')\n        ),\n\n        'esign_lock_toggle' => array(\n            xl('Enable lock toggle'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('This will give the user the option to lock (separate locking and signing)')\n        ),\n\n        'esign_report_hide_empty_sig' => array(\n            xl('Hide Empty E-Sign Logs On Report'),\n            'bool',                           // data type\n            '1',                              // default = false\n            xl('This will hide empty e-sign logs on the patient report')\n        ),\n\n    ),\n    //Documents Tab\n    'Documents' => array(\n\n        'document_storage_method' => array(\n            xl('Document Storage Method'),\n            array(\n                '0' => xl('Hard Disk'),\n                '1' => xl('CouchDB')\n            ),\n            '0',                              // default\n            xl('Option to save method of document storage.')\n        ),\n\n        'couchdb_host' => array(\n            xl('CouchDB HostName'),\n            'text',\n            'localhost',\n            xl('CouchDB host'),\n        ),\n        'couchdb_user' => array(\n            xl('CouchDB UserName'),\n            'text',\n            '',\n            xl('Username to connect to CouchDB'),\n        ),\n        'couchdb_pass' => array(\n            xl('CouchDB Password'),\n            'encrypted',                     // data type\n            '',\n            xl('Password to connect to CouchDB'),\n        ),\n        'couchdb_port' => array(\n            xl('CouchDB Port'),\n            'text',\n            '6984',\n            xl('CouchDB port'),\n        ),\n        'couchdb_dbase' => array(\n            xl('CouchDB Database'),\n            'text',\n            '',\n            xl('CouchDB database name'),\n        ),\n        'couchdb_connection_ssl' => array(\n            xl('CouchDB Connection SSL'),\n            'bool',\n            '1',\n            xl('Use SSL (encrypted) connection to CouchDB'),\n        ),\n        'couchdb_ssl_allow_selfsigned' => array(\n            xl('CouchDB SSL Allow Selfsigned Certificate'),\n            'bool',\n            '0',\n            xl('Allow self-signed certificate for SSL (encrypted) connection to CouchDB'),\n        ),\n        'couchdb_log' => array(\n            xl('CouchDB Log Enable'),\n            'bool',\n            '0',\n            xl('Enable log for document uploads/downloads to CouchDB'),\n        ),\n\n        'expand_document_tree' => array(\n            xl('Expand All Document Categories'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Expand All Document Categories by Default')\n        ),\n\n        'patient_id_category_name' => array(\n            xl('Patient ID Category Name'),\n            'text',                           // data type\n            'Patient ID card',                // default\n            xl('Optional category name for an ID Card image that can be viewed from the patient summary page.')\n        ),\n\n        'patient_photo_category_name' => array(\n            xl('Patient Photo Category Name'),\n            'text',                           // data type\n            'Patient Photograph',             // default\n            xl('Optional category name for photo images that can be viewed from the patient summary page.')\n        ),\n\n        'lab_results_category_name' => array(\n            xl('Lab Results Category Name'),\n            'text',                           // data type\n            'Lab Report',                     // default\n            xl('Document category name for storage of electronically received lab results.')\n        ),\n\n        'gbl_mdm_category_name' => array(\n            xl('MDM Document Category Name'),\n            'text',                           // data type\n            'Lab Report',                     // default\n            xl('Document category name for storage of electronically received MDM documents.')\n        ),\n        'generate_doc_thumb' => array(\n            xl('Generate thumbnail'),\n            'bool',\n            '0',\n            xl('Generate thumbnail images'),\n        ),\n        'thumb_doc_max_size' => array(\n            xl('Thumbnail size'),\n            'text',          // data type\n            '100',           // default\n            xl('Maximum size of thumbnail file')\n        ),\n    ),\n\n    // Calendar Tab\n    //\n    'Calendar' => array(\n\n        'disable_calendar' => array(\n            xl('Disable Calendar'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Do not display the calendar.')\n        ),\n\n        'schedule_start' => array(\n            xl('Calendar Starting Hour'),\n            'hour',\n            '8',                              // default\n            xl('Beginning hour of day for calendar events.')\n        ),\n\n        'schedule_end' => array(\n            xl('Calendar Ending Hour'),\n            'hour',\n            '17',                             // default\n            xl('Ending hour of day for calendar events.')\n        ),\n\n        'calendar_interval' => array(\n            xl('Calendar Interval'),\n            array(\n                '5' => '5',\n                '10' => '10',\n                '15' => '15',\n                '20' => '20',\n                '30' => '30',\n                '60' => '60',\n            ),\n            '15',                              // default\n            xl('The time granularity of the calendar and the smallest interval in minutes for an appointment slot.')\n        ),\n\n        'calendar_view_type' => array(\n            xl('Default Calendar View'),\n            array(\n                'day' => xl('Day'),\n                'week' => xl('Week'),\n                'month' => xl('Month'),\n            ),\n            'day',                              // default\n            xl('This sets the Default Calendar View, Default is Day.')\n        ),\n\n        'first_day_week' => array(\n            xl('First day in the week'),\n            array(\n                '1' => xl('Monday'),\n                '0' => xl('Sunday'),\n                '6' => xl('Saturday')\n            ),\n            '1',\n            xl('Your first day of the week.')\n        ),\n\n        'calendar_appt_style' => array(\n            xl('Appointment Display Style'),\n            array(\n                '1' => xl('Last name'),\n                '2' => xl('Last name, first name'),\n                '3' => xl('Last name, first name (title)'),\n                '4' => xl('Last name, first name (title: comments)'),\n            ),\n            '2',                               // default\n            xl('This determines how appointments display on the calendar.')\n        ),\n\n        'event_color' => array(\n            xl('Appointment/Event Color'),\n            array(\n                '1' => xl('Category Color Schema'),\n                '2' => xl('Facility Color Schema'),\n            ),                           // data type\n            '1',                              // default\n            xl('This determines which color schema used for appointment')\n        ),\n\n        'number_of_appts_to_show' => array(\n            xl('Appointments - Patient Summary - Number to Display'),\n            'num',\n            '10',\n            xl('Number of Appointments to display in the Patient Summary')\n        ),\n\n        'number_of_group_appts_to_show' => array(\n            xl('Appointments - Group Summary - Number to Display'),\n            'num',\n            '10',\n            xl('Number of Appointments to display in the Group Summary')\n        ),\n\n        'number_of_ex_appts_to_show' => array(\n            xl('Excluded Appointments - Tooltip - Number to Display'),\n            'num',\n            '15',\n            xl('Number of Excluded Appointments to display in the Tooltip')\n        ),\n\n        'appt_display_sets_option' => array(\n            xl('Appointment Display Sets - Ignore Display Limit (Last Set)'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Override (if necessary) the appointment display limit to allow all appointments to be displayed for the last set')\n        ),\n\n        'appt_display_sets_color_1' => array(\n            xl('Appointment Display Sets - Color 1'),\n            'color_code',\n            '#FFFFFF',\n            xl('Color for odd sets (except when last set is odd and all member appointments are displayed and at least one subsequent scheduled appointment exists (not displayed) or not all member appointments are displayed).')\n        ),\n\n        'appt_display_sets_color_2' => array(\n            xl('Appointment Display Sets - Color 2'),\n            'color_code',\n            '#E6E6FF',\n            xl('Color for even sets (except when last set is even and all member appointments are displayed and at least one subsequent scheduled appointment exists (not displayed) or not all member appointments are displayed).')\n        ),\n\n        'appt_display_sets_color_3' => array(\n            xl('Appointment Display Sets - Color 3'),\n            'color_code',\n            '#E6FFE6',\n            xl('Color for the last set when all member appointments are displayed and at least one subsequent scheduled appointment exists (not displayed).')\n        ),\n\n        'appt_display_sets_color_4' => array(\n            xl('Appointment Display Sets - Color 4'),\n            'color_code',\n            '#FFE6FF',\n            xl('Color for the last set when not all member appointments are displayed.')\n        ),\n\n        'appt_recurrences_widget' => array(\n            xl('Recurrent Appointment Display Widget'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Display the recurrent appointment widget in the patient summary.')\n        ),\n\n        'num_past_appointments_to_show' => array(\n            xl('Past Appointment Display Widget'),\n            'num',                           // data type\n            '0',                             // default = false\n            xl('A positive number will show that many past appointments on a Widget in the Patient Summary screen (a negative number will show the past appointments in descending order)')\n        ),\n\n        'docs_see_entire_calendar' => array(\n            xl('Providers See Entire Calendar'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Check this if you want providers to see all appointments by default and not just their own.')\n        ),\n\n        'auto_create_new_encounters' => array(\n            xl('Auto-Create New Encounters'),\n            array(\n                '0' => xl('Off'),\n                '1' => xl('One Encounter Per Day'),\n                '2' => xl('Allow Encounter For Each Appointment')\n            ),\n            '1',\n            xl('Automatically create a new encounter when an appointment check in status is selected.') . \" \" .\n            xl('The Each Appointment option will allow a new encounter regardless of same day visit.') . \" \" .\n            xl('The appointment status changes and encounter creations are managed through the Patient Tracker.')\n        ),\n\n        'allow_early_check_in' => array(\n            xl('Allow Early Check In'),\n            'bool',                           // data type\n            '1',                              // default\n            xl(\"Allow Check In before the appointment's time.\")\n        ),\n\n        'submit_changes_for_all_appts_at_once' => array(\n            xl('Submit Changes For All Appts At Once'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enables to submit changes for all appointments of a recurrence at once.')\n        ),\n\n        'disable_pat_trkr' => array(\n            xl('Flow Board: Disable'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Completely remove the ability to display the Patient Flow Board.')\n        ),\n\n        'ptkr_visit_reason' => array(\n            xl('Flow Board: Show Visit Reason'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('When Checked, Visit Reason Will Show in Patient Flow Board.')\n        ),\n\n        'ptkr_show_pid' => array(\n            xl('Flow Board: Show Patient ID'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('When Checked, Patient ID Will Show in Patient Flow Board.')\n        ),\n\n        'ptkr_show_encounter' => array(\n            xl('Flow Board: Show Encounter Number'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('When Checked, Patient Encounter Number Will Show in Patient Flow Board.')\n        ),\n\n        'ptkr_show_staff' => array(\n            xl('Flow Board: Show Staff Action'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('When Checked, Last Staff to Update Board Will Show in Patient Flow Board.')\n        ),\n\n        'ptkr_date_range' => array(\n            xl('Flow Board: Allow Date Range'),\n            'bool',                          // data type\n            '1',                             // default = true\n            xl('This Allows a Date Range to be Selected in Patient Flow Board.')\n        ),\n\n        'ptkr_start_date' => array(\n            xl('Flow Board: Default Starting Date'),\n            array(\n                'D0' => xl('Current Day'),\n                'B0' => xl('Beginning of Current Work Week'),\n            ),\n            'D0',                    // default = Current Day\n            xl('This is the default Beginning date for the Patient Flow Board. (only applicable if Allow Date Range in option above is Enabled)')\n        ),\n\n        'ptkr_end_date' => array(\n            xl('Flow Board: Default Ending Date'),\n            array(\n                'Y1' => xl('One Year Ahead'),\n                'Y2' => xl('Two Years Ahead'),\n                'M6' => xl('Six Months Ahead'),\n                'M3' => xl('Three Months Ahead'),\n                'M1' => xl('One Month Ahead'),\n                'D7' => xl('One Week Ahead'),\n                'D1' => xl('One Day Ahead'),\n                'D0' => xl('Current Day'),\n            ),\n            'D0',                     // default = One Day Ahead\n            xl('This is the default Ending date for the Patient Flow Board. (only applicable if Allow Date Range in option above is Enabled)')\n        ),\n\n        'pat_trkr_timer' => array(\n            xl('Flow Board: Timer Refresh Interval'),\n            array(\n                '0' => xl('No automatic refresh'),\n                '0:10' => '10',\n                '0:20' => '20',\n                '0:30' => '30',\n                '0:40' => '40',\n                '0:50' => '50',\n                '0:59' => '60',\n            ),\n            '0:20',                              // default\n            xl('The screen refresh time in Seconds for the Patient Flow Board Screen.')\n        ),\n\n        'checkout_roll_off' => array(\n            xl('Flow Board: display completed checkouts (minutes)'),\n            'num',\n            '0',                       // default\n            xl('Flow Board will only display completed checkouts for this many minutes. Zero is continuous display.')\n        ),\n\n        'drug_screen' => array(\n            xl('Flow Board: Enable Random Drug Testing'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Allow Patient Flow Board to Select Patients for Drug Testing.')\n        ),\n\n        'drug_testing_percentage' => array(\n            xl('Flow Board: Percentage of Patients to Drug Test'),\n            'num',\n            '33',                       // default\n            xl('Percentage of Patients to select for Random Drug Testing.')\n        ),\n\n        'maximum_drug_test_yearly' => array(\n            xl('Flow Board: Max tests per Patient per year'),\n            'num',\n            '0',                       // default\n            xl('Maximum number of times a Patient can be tested in a year. Zero is no limit.')\n        ),\n\n        'disable_rcb' => array(\n          xl('Recall Board: Disable'),\n          'bool',                           // data type\n          '0',                              // default\n          xl('Do not display the Recall Board.')\n        ),\n\n\n\n\n    ),\n    // Insurance Tab\n    'Insurance' => array(\n        'enable_oa' => array(\n            xl('Enable Office Ally Insurance Eligibility'),\n            'bool',\n            '0',\n            xl('Allow insurance eligibility checks using Office Ally')\n        ),\n\n        'simplified_demographics' => array(\n            xl('Simplified Demographics'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Omit insurance and some other things from the demographics form')\n        ),\n\n        'insurance_information' => array(\n            xl('Show Additional Insurance Information'),               // descriptive name\n            array(\n                '0' => xl('None'),\n                '1' => xl('Address Only'),\n                '2' => xl('Address and Postal Code'),\n                '3' => xl('Address and State'),\n                '4' => xl('Address, State and Postal Code'),\n                '5' => xl('Address, City, State and Postal Code'),\n                '6' => xl('Address, City, State, Postal Code, Payer ID'),\n                '7' => xl('Postal Code and Box Number')\n            ),\n            '6',                              // default\n            xl('Show Insurance Address Information in the Insurance Panel of Demographics.')\n        ),\n\n        'disable_eligibility_log' => array(\n            xl('Disable Insurance Eligibility Reports Download'),\n            'bool',\n            '0',\n            xl('Do not allow insurance eligibility report log download')\n        ),\n\n        'insurance_only_one' => array(\n            xl('Allow only one insurance'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Allow more than one insurance')\n        ),\n    ),\n    // Security Tab\n    //\n    'Security' => array(\n        'sql_string_no_show_screen' => array(\n            xl('Mode - Do Not Show SQL Queries'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Do not allow SQL queries to be outputted to screen.')\n        ),\n        'timeout' => array(\n            xl('Idle Session Timeout Seconds'),\n            'num',                            // data type\n            '7200',                           // default\n            xl('Maximum idle time in seconds before logout. Default is 7200 (2 hours).')\n        ),\n        'secure_upload' => array(\n            xl('Secure Upload Files with White List'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Block all files types that are not found in the White List. Can find interface to edit the White List at Administration->Files.')\n        ),\n        'secure_password' => array(\n            xl('Require Strong Passwords'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Strong password means at least one of each: a number, a lowercase letter, an uppercase letter, a special character.')\n        ),\n\n        'gbl_minimum_password_length' => array(\n            xl('Minimum Password Length'),\n            array(\n                '0' => xl('No Minimum'),\n                '4' => '4',\n                '5' => '5',\n                '6' => '6',\n                '7' => '7',\n                '8' => '8',\n                '9' => '9',\n                '10' => '10',\n                '11' => '11',\n                '12' => '12',\n                '13' => '13',\n                '14' => '14',\n                '15' => '15',\n                '16' => '16',\n                '17' => '17',\n                '18' => '18',\n                '19' => '19',\n                '20' => '20',\n            ),\n            '9',                              // default\n            xl('Minimum length of password.')\n        ),\n\n        'gbl_maximum_password_length' => array(\n            xl('Maximum Password Length'),\n            array(\n                '0' => xl('No Maximum'),\n                '72' => '72',\n            ),\n            '72',                             // default\n            xl('Maximum length of password (Recommend using the default value of 72 unless you know what you are doing).')\n        ),\n\n        'password_history' => array(\n            xl('Require Unique Passwords'),\n            array(\n                '0' => xl('No'),\n                '1' => '1',\n                '2' => '2',\n                '3' => '3',\n                '4' => '4',\n                '5' => '5',\n            ),\n            '5',                              // default\n            xl('Set to the number of prior passwords that are not allowed to use when changing a password.')\n        ),\n\n        'password_expiration_days' => array(\n            xl('Default Password Expiration Days'),\n            'num',                            // data type\n            '180',                            // default\n            xl('Default password expiration period in days. 0 means this feature is disabled.')\n        ),\n\n        'password_grace_time' => array(\n            xl('Password Expiration Grace Period'),\n            'num',                            // data type\n            '30',                             // default\n            xl('Period in days where a user may login with an expired password.')\n        ),\n\n        'password_max_failed_logins' => array(\n            xl('Maximum Failed Login Attempts'),\n            'num',                            // data type\n            '0',                              // default\n            xl('Maximum Failed Login Attempts (0 for no maximum).')\n        ),\n\n        'is_client_ssl_enabled' => array(\n            xl('Enable Client SSL'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable client SSL certificate authentication.')\n        ),\n\n        'certificate_authority_crt' => array(\n            xl('Path to CA Certificate File'),\n            'text',                           // data type\n            '',                               // default\n            xl('Set this to the full absolute path. For creating client SSL certificates for HTTPS.')\n        ),\n\n        'certificate_authority_key' => array(\n            xl('Path to CA Key File'),\n            'text',                           // data type\n            '',                               // default\n            xl('Set this to the full absolute path. For creating client SSL certificates for HTTPS.')\n        ),\n\n        'client_certificate_valid_in_days' => array(\n            xl('Client Certificate Expiration Days'),\n            'num',                            // data type\n            '365',                            // default\n            xl('Number of days that the client certificate is valid.')\n        ),\n\n        'Emergency_Login_email_id' => array(\n            xl('Emergency Login Email Address'),\n            'text',                           // data type\n            '',                               // default\n            xl('Email address, if any, to receive emergency login user activation messages.')\n        ),\n\n        'new_validate' => array(\n            xl('New form validation'),\n            'bool',\n            '1',\n            xl('New form validation')\n        ),\n\n        'allow_multiple_databases' => array(\n            xl('Allow multiple databases'),\n            'bool',\n            '0',\n            xl('Allow to use with multiple database')\n        ),\n\n        'safe_key_database' => array(\n            xl('Safe key database'),\n            'text',                           // data type\n            '',                               // default\n            xl('Key for multiple database credentials encryption')\n        ),\n\n        'gbl_ldap_enabled' => array(\n            xl('Use LDAP for Authentication'),\n            'bool',\n            '0',\n            xl('If enabled, use LDAP for login and authentication.')\n        ),\n        'gbl_ldap_host' => array(\n            xl('LDAP - Server Name or URI'),\n            'text',\n            '',\n            xl('The hostname or URI of your LDAP or Active Directory server.')\n        ),\n        'gbl_ldap_dn' => array(\n            xl('LDAP - Distinguished Name of User'),\n            'text',\n            '',\n            xl('Embed {login} where the OpenEMR login name of the user is to be; for example: uid={login},dc=example,dc=com')\n        ),\n        'gbl_ldap_exclusions' => array(\n            xl('LDAP - Login Exclusions'),\n            'text',\n            '',\n            xl('Comma-separated list of login names to use normal authentication instead of LDAP; useful for setup and debugging.')\n        ),\n\n        'gbl_debug_hash_verify_execution_time' => array(\n            xl('Debug Hash Verification Time'),\n            'bool',\n            '0',\n            xl('If enabled, this will send the execution time it took to verify hash to the php error log.')\n        ),\n\n        'gbl_auth_hash_algo' => array(\n            xl('Hash Algorithm for Authentication'),\n            array(\n                'DEFAULT' => xl('PHP Default'),\n                'BCRYPT' => 'Bcrypt',\n                'ARGON2I' => 'Argon2I',\n                'ARGON2ID' => 'Argon2ID',\n                'SHA512HASH' => 'SHA512 (ONC 2015)',\n            ),\n            'DEFAULT',                // default\n            xl('Hashing algorithm for authentication. Suggest PHP Default unless you know what you are doing.')\n        ),\n\n        'gbl_auth_bcrypt_hash_cost' => array(\n            xl('Authentication Bcrypt Hash Cost'),\n            array(\n                'DEFAULT' => xl('PHP Default'),\n                '5' => '5',\n                '6' => '6',\n                '7' => '7',\n                '8' => '8',\n                '9' => '9',\n                '10' => '10',\n                '11' => '11',\n                '12' => '12',\n                '13' => '13',\n                '14' => '14',\n                '15' => '15',\n                '16' => '16',\n                '17' => '17',\n                '18' => '18',\n                '19' => '19',\n                '20' => '20',\n            ),\n            'DEFAULT',                // default\n            xl('Authentication bcrypt hash cost. Suggest PHP Default unless you know what you are doing.')\n        ),\n\n        'gbl_auth_argon_hash_memory_cost' => array(\n            xl('Authentication Argon Hash Memory Cost'),\n            array(\n                'DEFAULT' => xl('PHP Default'),\n                '512' => '512',\n                '1024' => '1024',\n                '2048' => '2048',\n                '4096' => '4096',\n                '8192' => '8192',\n                '16384' => '16384',\n                '32768' => '32768',\n                '65536' => '65536',\n                '131072' => '131072',\n                '262144' => '262144',\n                '524288' => '524288',\n                '1048576' => '1048576',\n                '2097152' => '2097152',\n            ),\n            'DEFAULT',                // default\n            xl('Authentication argon hash memory cost. Suggest PHP Default unless you know what you are doing.')\n        ),\n\n        'gbl_auth_argon_hash_time_cost' => array(\n            xl('Authentication Argon Hash Time Cost'),\n            array(\n                'DEFAULT' => xl('PHP Default'),\n                '1' => '1',\n                '2' => '2',\n                '3' => '3',\n                '4' => '4',\n                '5' => '5',\n                '6' => '6',\n                '7' => '7',\n                '8' => '8',\n                '9' => '9',\n                '10' => '10',\n                '11' => '11',\n                '12' => '12',\n                '13' => '13',\n                '14' => '14',\n                '15' => '15',\n                '16' => '16',\n                '17' => '17',\n                '18' => '18',\n                '19' => '19',\n                '20' => '20',\n            ),\n            'DEFAULT',                // default\n            xl('Authentication argon hash time cost. Suggest PHP Default unless you know what you are doing.')\n        ),\n\n        'gbl_auth_argon_hash_thread_cost' => array(\n            xl('Authentication Argon Hash Thread Number'),\n            array(\n                'DEFAULT' => xl('PHP Default'),\n                '1' => '1',\n                '2' => '2',\n                '3' => '3',\n                '4' => '4',\n                '5' => '5',\n                '6' => '6',\n                '7' => '7',\n                '8' => '8',\n                '9' => '9',\n                '10' => '10',\n                '11' => '11',\n                '12' => '12',\n                '13' => '13',\n                '14' => '14',\n                '15' => '15',\n                '16' => '16',\n                '17' => '17',\n                '18' => '18',\n                '19' => '19',\n                '20' => '20',\n            ),\n            'DEFAULT',                // default\n            xl('Authentication argon hash thread number. Suggest PHP Default unless you know what you are doing.')\n        ),\n\n        'gbl_auth_sha512_rounds' => array(\n            xl('Authentication SHA512 Hash Rounds Number'),\n            array(\n                '1000' => '1000',\n                '5000' => '5000',\n                '10000' => '10000',\n                '15000' => '15000',\n                '20000' => '20000',\n                '30000' => '30000',\n                '40000' => '40000',\n                '50000' => '50000',\n                '75000' => '75000',\n                '100000' => '100000',\n                '200000' => '200000',\n                '300000' => '300000',\n                '400000' => '400000',\n                '500000' => '500000',\n                '750000' => '750000',\n                '1000000' => '1000000',\n                '2000000' => '2000000',\n                '3000000' => '3000000',\n                '4000000' => '4000000',\n                '5000000' => '5000000',\n                '6000000' => '6000000',\n                '7000000' => '7000000',\n                '8000000' => '8000000',\n                '9000000' => '9000000',\n            ),\n            '100000',                // default\n            xl('Authentication SHA512 hash rounds number.')\n        ),\n\n    ),\n\n    // Notifications Tab\n    //\n    'Notifications' => array(\n\n        'patient_reminder_sender_name' => array(\n            xl('Patient Reminder Sender Name'),\n            'text',                           // data type\n            '',                               // default\n            xl('Name of the sender for patient reminders.')\n        ),\n\n        'patient_reminder_sender_email' => array(\n            xl('Patient Reminder Sender Email'),\n            'text',                           // data type\n            '',                               // default\n            xl('Email address of the sender for patient reminders. Replies to patient reminders will be directed to this address. It is important to use an address from your clinic\\'s domain to avoid help prevent patient reminders from going to junk mail folders.')\n        ),\n\n        'practice_return_email_path' => array(\n            xl('Notification Email Address'),\n            'text',                           // data type\n            '',                               // default\n            xl('Email address, if any, to receive administrative notifications.')\n        ),\n\n        'EMAIL_METHOD' => array(\n            xl('Email Transport Method'),\n            array(\n                'PHPMAIL' => 'PHPMAIL',\n                'SENDMAIL' => 'SENDMAIL',\n                'SMTP' => 'SMTP',\n            ),\n            'SMTP',                             // default\n            xl('Method for sending outgoing email.')\n        ),\n\n        'SMTP_HOST' => array(\n            xl('SMTP Server Hostname'),\n            'text',                           // data type\n            'localhost',                      // default\n            xl('If SMTP is used, the server`s hostname or IP address.')\n        ),\n\n        'SMTP_PORT' => array(\n            xl('SMTP Server Port Number'),\n            'num',                            // data type\n            '25',                             // default\n            xl('If SMTP is used, the server`s TCP port number (usually 25).')\n        ),\n\n        'SMTP_USER' => array(\n            xl('SMTP User for Authentication'),\n            'text',                           // data type\n            '',                               // default\n            xl('Must be empty if SMTP authentication is not used.')\n        ),\n\n        'SMTP_PASS' => array(\n            xl('SMTP Password for Authentication'),\n            'encrypted',                           // data type\n            '',                               // default\n            xl('Must be empty if SMTP authentication is not used.')\n        ),\n\n        'SMTP_SECURE' => array(\n            xl('SMTP Security Protocol'),\n            array(\n                '' => xl('None'),\n                'ssl' => 'SSL',\n                'tls' => 'TLS'\n            ),\n            '',\n            xl('SMTP security protocol to connect with. Required by some servers such as gmail.')\n        ),\n\n        'EMAIL_NOTIFICATION_HOUR' => array(\n            xl('Email Notification Hours'),\n            'num',                            // data type\n            '50',                             // default\n            xl('Number of hours in advance to send email notifications.')\n        ),\n\n        'SMS_NOTIFICATION_HOUR' => array(\n            xl('SMS Notification Hours'),\n            'num',                            // data type\n            '50',                             // default\n            xl('Number of hours in advance to send SMS notifications.')\n        ),\n\n        'SMS_GATEWAY_USENAME' => array(\n            xl('SMS Gateway Username'),\n            'text',                           // data type\n            '',                               // default\n            xl('Username for SMS Gateway.')\n        ),\n\n        'SMS_GATEWAY_PASSWORD' => array(\n            xl('SMS Gateway Password'),\n            'text',                           // data type\n            '',                               // default\n            xl('Password for SMS Gateway.')\n        ),\n\n        'SMS_GATEWAY_APIKEY' => array(\n            xl('SMS Gateway API Key'),\n            'text',                           // data type\n            '',                               // default\n            xl('API key for SMS Gateway.')\n        ),\n\n        'phone_notification_hour' => array(\n            xl('Phone Notification Hour'),\n            'num',                            // data type\n            '50',                             // default\n            xl('Number of hours in advance to send Phone notification.')\n        ),\n\n        'phone_gateway_username' => array(\n            xl('Phone Gateway Username'),\n            'text',                           // data type\n            '',                               // default\n            xl('Username for Phone Gateway.')\n        ),\n\n        'phone_gateway_password' => array(\n            xl('Phone Gateway Password'),\n            'encrypted',                      // data type\n            '',                               // default\n            xl('Password for Phone Gateway.')\n        ),\n\n        'phone_gateway_url' => array(\n            xl('Phone Gateway URL'),\n            'text',                           // data type\n            '',                               // default\n            xl('URL for Phone Gateway.')\n        ),\n\n    ),\n\n    // CDR (Clinical Decision Rules)\n    //\n    'CDR' => array(\n\n        'enable_cdr' => array(\n            xl('Enable Clinical Decisions Rules (CDR)'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Clinical Decisions Rules (CDR)')\n        ),\n\n        'enable_allergy_check' => array(\n            xl('Enable Allergy Check'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Allergy Check Against Medications and Prescriptions')\n        ),\n\n        'enable_alert_log' => array(\n            xl('Enable Alert Log'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Alert Logging')\n        ),\n\n        'enable_cdr_new_crp' => array(\n            xl('Enable Clinical Passive New Reminder(s) Popup'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Clinical Passive New Reminder(s) Popup')\n        ),\n\n        'enable_cdr_crw' => array(\n            xl('Enable Clinical Passive Reminder Widget'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Clinical Passive Reminder Widget')\n        ),\n\n        'enable_cdr_crp' => array(\n            xl('Enable Clinical Active Reminder Popup'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Clinical Active Reminder Popup')\n        ),\n\n        'enable_cdr_prw' => array(\n            xl('Enable Patient Reminder Widget'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Patient Reminder Widget')\n        ),\n\n        'enable_cqm' => array(\n            xl('Enable CQM Reporting'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Clinical Quality Measure (CQM) Reporting')\n        ),\n\n        'pqri_registry_name' => array(\n            xl('PQRI Registry Name'),\n            'text',                           // data type\n            'Model Registry',                               // default\n            xl('PQRI Registry Name')\n        ),\n\n        'pqri_registry_id' => array(\n            xl('PQRI Registry ID'),\n            'text',                           // data type\n            '125789123',                               // default\n            xl('PQRI Registry ID')\n        ),\n\n        'enable_amc' => array(\n            xl('Enable AMC Reporting'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Automated Measure Calculations (AMC) Reporting')\n        ),\n\n        'enable_amc_prompting' => array(\n            xl('Enable AMC Prompting'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Prompting For Automated Measure Calculations (AMC) Required Data')\n        ),\n\n        'enable_amc_tracking' => array(\n            xl('Enable AMC Tracking'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Reporting of Tracking Date For Automated Measure Calculations (AMC)')\n        ),\n\n        'cdr_report_nice' => array(\n            xl('CDR Reports Processing Priority'),\n            array(\n                '' => xl('Default Priority'),\n                '5' => xl('Moderate Priority'),\n                '10' => xl('Moderate/Low Priority'),\n                '15' => xl('Low Priority'),\n                '20' => xl('Lowest Priority')\n            ),\n            '',                               // default\n            xl('Set processing priority for CDR engine based reports.')\n        ),\n\n        'pat_rem_clin_nice' => array(\n            xl('Patient Reminder Creation Processing Priority'),\n            array(\n                '' => xl('Default Priority'),\n                '5' => xl('Moderate Priority'),\n                '10' => xl('Moderate/Low Priority'),\n                '15' => xl('Low Priority'),\n                '20' => xl('Lowest Priority')\n            ),\n            '',                               // default\n            xl('Set processing priority for creation of Patient Reminders (in full clinic mode).')\n        ),\n\n        'report_itemizing_standard' => array(\n            xl('Enable Standard Report Itemization'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Itemization of Standard Clinical Rules Reports')\n        ),\n\n        'report_itemizing_cqm' => array(\n            xl('Enable CQM Report Itemization'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Itemization of CQM Reports')\n        ),\n\n        'report_itemizing_amc' => array(\n            xl('Enable AMC Report Itemization'),\n            'bool',                           // data type\n            '1',                               // default\n            xl('Enable Itemization of AMC Reports')\n        ),\n        'dated_reminders_max_alerts_to_show' => array(\n            xl('Dated reminders maximum alerts to show'),\n            'num',                           // data type\n            '5',                               // default\n            xl('Dated reminders maximum alerts to show')\n        ),\n        'patient_birthday_alert' => array(\n            xl('Alert on patient birthday'),\n            array(\n                '0' => xl('No alert'),\n                '1' => xl('Alert only on birthday'),\n                '2' => xl('Alert on and after birthday'),\n                '3' => xl('Alert on and up to 28 days after birthday')\n            ),\n            '1',                              // default\n            xl('Alert on patient birthday')\n        ),\n        'patient_birthday_alert_manual_off' => array(\n            xl('Patient birthday alert requires turning off'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Patient birthday alert requires turning off')\n        )\n    ),\n\n    // Logging\n    //\n    'Logging' => array(\n\n        'user_debug' => array(\n            xl('User Debugging Options'),\n            array(\n                '0' => xl('None'),\n                '1' => xl('Display Window Errors Only'),\n                '2' => xl('Display Application Errors Only'),\n                '3' => xl('All'),\n            ),\n            '0',                               // default\n            xl('User Debugging Mode.')\n        ),\n\n        'enable_auditlog' => array(\n            xl('Enable Audit Logging'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable Audit Logging')\n        ),\n\n        'audit_events_patient-record' => array(\n            xl('Audit Logging Patient Record'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable logging of patient record modifications.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_scheduling' => array(\n            xl('Audit Logging Scheduling'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable logging of scheduling activities.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_order' => array(\n            xl('Audit Logging Order'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable logging of ordering activities.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_security-administration' => array(\n            xl('Audit Logging Security Administration'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable logging of security and administration activities.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_backup' => array(\n            xl('Audit Logging Backups'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable logging of backup related activities.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_other' => array(\n            xl('Audit Logging Miscellaneous'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable logging of miscellaneous activities.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_query' => array(\n            xl('Audit Logging SELECT Query'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable logging of all SQL SELECT queries.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'audit_events_cdr' => array(\n            xl('Audit CDR Engine Queries'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable logging of CDR Engine Queries.') . ' (' . xl('Note that Audit Logging needs to be enabled above') . ')'\n        ),\n\n        'gbl_force_log_breakglass' => array(\n            xl('Audit all Emergency User Queries'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Force logging of all Emergency User (ie. breakglass) activities.')\n        ),\n\n        'enable_atna_audit' => array(\n            xl('Enable ATNA Auditing'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable Audit Trail and Node Authentication (ATNA).')\n        ),\n\n        'atna_audit_host' => array(\n            xl('ATNA audit host'),\n            'text',                           // data type\n            '',                               // default\n            xl('The hostname of the ATNA audit repository machine.')\n        ),\n\n        'atna_audit_port' => array(\n            xl('ATNA audit port'),\n            'text',                           // data type\n            '6514',                           // default\n            xl('Listening port of the RFC 5425 TLS syslog server.')\n        ),\n\n        'atna_audit_localcert' => array(\n            xl('ATNA audit local certificate'),\n            'text',                           // data type\n            '',                               // default\n            xl('Certificate to send to RFC 5425 TLS syslog server.')\n        ),\n\n        'atna_audit_cacert' => array(\n            xl('ATNA audit CA certificate'),\n            'text',                           // data type\n            '',                               // default\n            xl('CA Certificate for verifying the RFC 5425 TLS syslog server.')\n        ),\n\n        'enable_auditlog_encryption' => array(\n            xl('Enable Audit Log Encryption'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable Audit Log Encryption')\n        ),\n\n        'api_log_option' => array(\n            xl('API Log Option'),\n            array(\n                '0' => xl('No logging'),\n                '1' => xl('Minimal Logging'),\n                '2' => xl('Full Logging'),\n            ),\n            '2',                               // default\n            xl('API Log Option (Full includes requests and responses).')\n        ),\n\n        'billing_log_option' => array(\n            xl('Billing Log Option'),\n            array(\n                '1' => xl('Billing Log Append'),\n                '2' => xl('Billing Log Overwrite')\n            ),\n            '1',                               // default\n            xl('Billing log setting to append or overwrite the log file.')\n        ),\n\n        'gbl_print_log_option' => array(\n            xl('Printing Log Option'),\n            array(\n                '0' => xl('No logging'),\n                '1' => xl('Hide print feature'),\n                '2' => xl('Log entire document'),\n            ),\n            '0',                               // default\n            xl('Individual pages can override 2nd and 3rd options by implementing a log message.')\n        ),\n\n        'system_error_logging' => array(\n            xl('System Error Logging Options'),\n            array(\n                'WARNING' => xl('Standard Error Logging'),\n                'DEBUG' => xl('Debug Error Logging'),\n            ),\n            'WARNING',                        // default\n            xl('System Error Logging Options.')\n        ),\n\n    ),\n\n    // Miscellaneous Tab\n    //\n    'Miscellaneous' => array(\n\n        'enable_database_connection_pooling' => array(\n            xl('Enable Database Connection Pooling'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Enable Database Connection Pooling')\n        ),\n\n        'mysql_bin_dir' => array(\n            xl('Path to MySQL Binaries'),\n            'text',                           // data type\n            $mysql_bin_dir,                   // default\n            xl('Full path to directory containing MySQL executables.')\n        ),\n\n        'perl_bin_dir' => array(\n            xl('Path to Perl Binaries'),\n            'text',                           // data type\n            $perl_bin_dir,                    // default\n            xl('Full path to directory containing Perl executables.')\n        ),\n\n        'temporary_files_dir' => array(\n            xl('Path to Temporary Files'),\n            'text',                           // data type\n            $temporary_files_dir,             // default\n            xl('Full path to directory used for temporary files.')\n        ),\n\n        'backup_log_dir' => array(\n            xl('Path for Event Log Backup'),\n            'text',                           // data type\n            $backup_log_dir,                  // default\n            xl('Full path to directory for event log backup.')\n        ),\n\n        'state_data_type' => array(\n            xl('State Data Type'),\n            array(\n                '2' => xl('Text field'),\n                '1' => xl('Single-selection list'),\n                '26' => xl('Single-selection list with ability to add to the list'),\n            ),\n            '26',                             // default\n            xl('Field type to use for employer or subscriber state in demographics.')\n        ),\n\n        'state_list' => array(\n            xl('State list'),\n            'text',                           // data type\n            'state',                          // default\n            xl('List used by above State Data Type option.')\n        ),\n\n        'state_custom_addlist_widget' => array(\n            xl('State List Widget Custom Fields'),\n            'bool',                           // data type\n            '1',                              // default\n            xl('Show the custom state form for the add list widget (will ask for title and abbreviation).')\n        ),\n\n        'country_data_type' => array(\n            xl('Country Data Type'),\n            array(\n                '2' => xl('Text field'),\n                '1' => xl('Single-selection list'),\n                '26' => xl('Single-selection list with ability to add to the list'),\n            ),\n            '26',                             // default\n            xl('Field type to use for employer or subscriber country in demographics.')\n        ),\n\n        'country_list' => array(\n            xl('Country list'),\n            'text',                           // data type\n            'country',                          // default\n            xl('List used by above Country Data Type option.')\n        ),\n\n        'default_chief_complaint' => array(\n            xl('Default Reason for Visit'),\n            'text',                           // data type\n            '',\n            xl('You may put text here as the default complaint in the New Patient Encounter form.')\n        ),\n\n        'MedicareReferrerIsRenderer' => array(\n            xl('Medicare Referrer Is Renderer'),\n            'bool',                           // data type\n            '0',                              // default = true\n            xl('For Medicare only, forces the referring provider to be the same as the rendering provider.')\n        ),\n\n        'post_to_date_benchmark' => array(\n            xl('Financial Close Date (yyyy-mm-dd)'),\n            'text',                           // data type\n            date('Y-m-d', time() - (10 * 24 * 60 * 60)),                // default\n            xl('The payments posted cannot go below this date.This ensures that after taking the final report nobody post for previous dates.')\n        ),\n\n        'enable_hylafax' => array(\n            xl('Enable Hylafax Support'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable Hylafax Support')\n        ),\n\n        'hylafax_server' => array(\n            xl('Hylafax Server'),\n            'text',                           // data type\n            'localhost',                      // default\n            xl('Hylafax server hostname.')\n        ),\n\n        'hylafax_basedir' => array(\n            xl('Hylafax Directory'),\n            'text',                           // data type\n            '/var/spool/hylafax',             // default\n            xl('Location where Hylafax stores faxes.')\n        ),\n\n        'enable_scanner' => array(\n            xl('Enable Scanner Support'),\n            'bool',                           // data type\n            '0',                              // default\n            xl('Enable Scanner Support')\n        ),\n\n        'scanner_output_directory' => array(\n            xl('Scanner Directory'),\n            'text',                           // data type\n            '/mnt/scan_docs',                 // default\n            xl('Location where scans are stored.')\n        ),\n\n        'unique_installation_id' => array(\n            xl('Unique Installation ID'),\n            'if_empty_create_random_uuid',    // data type\n            '',                 // default\n            xl('Unique installation ID. Creates a random UUID if empty.')\n        ),\n    ),\n\n    // Portal Tab\n    //\n    'Portal' => array(\n\n        'portal_onsite_two_enable' => array(\n            xl('Enable Patient Portal'),\n            'bool',                           // data type\n            '0',\n            xl('Enable Patient Portal')\n        ),\n\n        'portal_onsite_two_address' => array(\n            xl('Patient Portal Site Address'),\n            'text',                           // data type\n            'https://your_web_site.com/openemr/portal',\n            xl('Website link for the Patient Portal.')\n        ),\n\n        'portal_onsite_two_basepath' => array(\n            xl('Portal Uses Server Base Path (internal)'),\n            'bool',\n            '0',\n            xl('Use servers protocol and host in urls (portal internal only).')\n        ),\n\n        'enforce_signin_email' => array(\n            xl('Enforce E-Mail in Portal Log On Dialog'),\n            'bool',                           // data type\n            '1',\n            xl('Patient is required to enter their contact e-mail if present in Demographics Contact.')\n        ),\n\n        'portal_onsite_two_register' => array(\n            xl('Allow New Patient Registration Widget'),\n            'bool',                           // data type\n            '0',\n            xl('Enable Patient Portal new patient to self register.')\n        ),\n\n        'allow_portal_appointments' => array(\n            xl('Allow Online Appointments'),\n            'bool',                           // data type\n            '1',\n            xl('Allow Patient to make and view appointments online.')\n        ),\n\n        'allow_portal_chat' => array(\n            xl('Allow Online Secure Chat'),\n            'bool',                           // data type\n            '1',\n            xl('Allow Patient to use Secure Chat Application.')\n        ),\n\n        'portal_two_ledger' => array(\n            xl('Allow Patient Ledger'),\n            'bool',                           // data type\n            '1',\n            xl('Allow Patient to view their accounting ledger online.')\n        ),\n\n        'portal_two_payments' => array(\n            xl('Allow Online Payments'),\n            'bool',                           // data type\n            '0',\n            xl('Allow Patient to make payments online.')\n        ),\n\n        'portal_two_pass_reset' => array(\n            xl('Allow Patients to Reset Credentials'),\n            'bool',                           // data type\n            '0',\n            xl('Patient may change their logon from portal login dialog.')\n        ),\n\n        'portal_onsite_document_download' => array(\n            xl('Enable Patient Portal Document Download'),\n            'bool',                           // data type\n            '1',\n            xl('Enables the ability to download documents in the Patient Portal by the user.')\n        ),\n    ),\n\n    // Connectors Tab\n    //\n    'Connectors' => array(\n\n        'site_addr_oath' => array(\n            xl('Site Address (required for OAuth2 and FHIR)'),\n            'text',\n            '',\n            xl('Site Address (required for OAuth2 and FHIR). Example is') . ' https://localhost:8300 .'\n        ),\n\n        'rest_api' => array(\n            xl('Enable OpenEMR Standard REST API'),\n            'bool',\n            '0',\n            xl('Enable OpenEMR Standard RESTful API.')\n        ),\n\n        'rest_fhir_api' => array(\n            xl('Enable OpenEMR Standard FHIR REST API'),\n            'bool',\n            '0',\n            xl('Enable OpenEMR Standard FHIR RESTful API.')\n        ),\n\n        'rest_portal_api' => array(\n            xl('Enable OpenEMR Patient Portal REST API (EXPERIMENTAL)'),\n            'bool',\n            '0',\n            xl('Enable OpenEMR Patient Portal RESTful API.')\n        ),\n\n        'rest_portal_fhir_api' => array(\n            xl('Enable OpenEMR Patient Portal FHIR REST API (EXPERIMENTAL)'),\n            'bool',\n            '0',\n            xl('Enable OpenEMR Patient Portal FHIR RESTful API.')\n        ),\n\n        'oauth_password_grant' => array(\n            xl('Enable OAuth2 Password Grant (Not considered secure)'),\n            array(\n                0 => xl('Off (Recommended setting)'),\n                1 => xl('On for Users Role'),\n                2 => xl('On for Patient Role'),\n                3 => xl('On for Both Roles')\n            ),\n            '0',\n            xl('Enable OAuth2 Password Grant. Recommend turning this setting off for production server. Recommend only using for testing.')\n        ),\n\n        'cc_front_payments' => array(\n            xl('Accept Credit Card transactions from Front Payments'),\n            'bool',\n            '0',\n            xl('Allow manual entry and authorise credit card payments. Ensure a gateway is enabled.')\n        ),\n\n        'payment_gateway' => array(\n            xl('Select Credit Card Payment Gateway'),\n            array(\n                'InHouse' => xl('In House'),\n                'AuthorizeNet' => xl('Authorize.Net'),\n                'Stripe' => xl('Stripe')\n            ),\n            'InHouse',\n            xl('Enable a Payment Gateway Service for processing credit card transactions')\n        ),\n\n        'gateway_mode_production' => array(\n            xl('Set Gateway to Production Mode'),\n            'bool',                           // data type\n            '0',\n            xl('Check this to go live. Not checked is testing mode.')\n        ),\n\n        'gateway_public_key' => array(\n            xl('Gateway Publishable Key'),\n            'encrypted',\n            '',\n            xl('The public access key for secure tokenize of credit or debit card authorization. PCI compliance')\n        ),\n\n        'gateway_api_key' => array(\n            xl('Gateway API Login Auth Name or Secret'),\n            'encrypted',\n            '',\n            xl('The Auth Name or API key for selected account. Auth Name for Authorize.Net and API Secret for Stripe.')\n        ),\n\n        'gateway_transaction_key' => array(\n            xl('Gateway Transaction Key'),\n            'encrypted',\n            '',\n            xl('Mainly Authorize.Net uses two keys')\n        ),\n\n        'medex_enable' => array(\n          xl('Enable MedEx Communication Service'),\n          'bool',                           // data type\n          '0',\n          xl('Enable MedEx Communication Service')\n        ),\n\n        'erx_enable' => array(\n            xl('Enable NewCrop eRx Service'),\n            'bool',\n            '0',\n            xl('Enable NewCrop eRx Service.') . ' ' .\n            xl('Contact mi-squared at http://www.mi-squared.com/products-services/openemr/ or ZH Healthcare at https://blueehr.com/contact-us/ for subscribing to the NewCrop eRx service.')\n        ),\n\n        'erx_newcrop_path' => array(\n            xl('NewCrop eRx Site Address'),\n            'text',\n            'https://secure.newcropaccounts.com/InterfaceV7/RxEntry.aspx',\n            xl('URL for NewCrop eRx Site Address.')\n        ),\n\n        'erx_newcrop_path_soap' => array(\n            xl('NewCrop eRx Web Service Address'),\n            'text',\n            'https://secure.newcropaccounts.com/v7/WebServices/Update1.asmx?WSDL;https://secure.newcropaccounts.com/v7/WebServices/Patient.asmx?WSDL',\n            xl('URLs for NewCrop eRx Service Address, separated by a semi-colon.')\n        ),\n\n        'erx_soap_ttl_allergies' => array(\n            xl('NewCrop eRx SOAP Request Time-To-Live for Allergies'),\n            'num',\n            '21600',\n            xl('Time-To-Live for NewCrop eRx Allergies SOAP Request in seconds.')\n        ),\n\n        'erx_soap_ttl_medications' => array(\n            xl('NewCrop eRx SOAP Request Time-To-Live for Medications'),\n            'num',\n            '21600',\n            xl('Time-To-Live for NewCrop eRx Medications SOAP Request in seconds.')\n        ),\n\n        'erx_account_partner_name' => array(\n            xl('NewCrop eRx Partner Name'),\n            'text',\n            '',\n            xl('Partner Name issued for NewCrop eRx service.')\n        ),\n\n        'erx_account_name' => array(\n            xl('NewCrop eRx Name'),\n            'text',\n            '',\n            xl('Account Name issued for NewCrop eRx service.')\n        ),\n\n        'erx_account_password' => array(\n            xl('NewCrop eRx Password'),\n            'encrypted',\n            '',\n            xl('Account Password issued for NewCrop eRx service.')\n        ),\n\n        'erx_account_id' => array(\n            xl('NewCrop eRx Account Id'),\n            'text',\n            '1',\n            xl('Account Id issued for NewCrop eRx service, used to separate multi-facility accounts.')\n        ),\n\n        'erx_upload_active' => array(\n            xl('Only upload active prescriptions'),\n            'bool',\n            '0',\n            xl('Only upload active prescriptions to NewCrop eRx.')\n        ),\n\n        'erx_import_status_message' => array(\n            xl('Enable NewCrop eRx import status message'),\n            'bool',\n            '0',\n            xl('Enable import status message after visiting NewCrop eRx.')\n        ),\n\n        'erx_medication_display' => array(\n            xl('Do not display NewCrop eRx Medications uploaded'),\n            'bool',\n            '0',\n            xl('Do not display Medications uploaded after visiting NewCrop eRx.')\n        ),\n\n        'erx_allergy_display' => array(\n            xl('Do not display NewCrop eRx Allergy uploaded'),\n            'bool',\n            '0',\n            xl('Do not display Allergies uploaded after visiting NewCrop eRx.')\n        ),\n\n        'erx_default_patient_country' => array(\n            xl('NewCrop eRx Default Patient Country'),\n            array(\n                '' => '',\n                'US' => xl('USA'),\n                'CA' => xl('Canada'),\n                'MX' => xl('Mexico'),\n            ),\n            '',\n            xl('Default Patient Country sent to NewCrop eRx, only if patient country is not set.'),\n        ),\n\n        'erx_debug_setting' => array(\n            xl('NewCrop eRx Debug Setting'),\n            array(\n                0 => xl('None'),\n                1 => xl('Request Only'),\n                2 => xl('Response Only'),\n                3 => xl('Request & Response'),\n            ),\n            '0',\n            xl('Log all NewCrop eRx Requests and / or Responses.'),\n        ),\n\n        'weno_rx_enable' => array(\n            xl('Enable Weno eRx Service'),\n            'bool',\n            '0',\n            xl('Enable Weno eRx Service') . ' ' . xl('Contact https://online.wenoexchange.com to sign up for Weno Free eRx service.')\n        ),\n\n        'weno_rx_enable_test' => array(\n            xl('Enable Weno eRx Service Test mode'),\n            'bool',\n            '1',\n            xl('Enable Weno eRx Service Test mode')\n        ),\n\n        'weno_encryption_key' => array(\n            xl('Weno Encryption Key'),\n            'encrypted',                      // data type\n            '',\n            xl('Encryption key issued by Weno eRx service.')\n        ),\n\n        'weno_provider_password' => array(\n            xl('Weno Provider Account Password'),\n            'encrypted',                      // data type\n            '',\n            xl('Each provider needs to set this under user settings. This should be blank')\n        ),\n\n        'ccda_alt_service_enable' => array(\n            xl('Enable C-CDA Service'),\n            array(\n                0 => xl('Off'),\n                1 => xl('Care Coordination Only'),\n                2 => xl('Portal Only'),\n                3 => xl('Both'),\n            ),\n            '0',\n            xl('Enable C-CDA Service')\n        ),\n\n        'phimail_enable' => array(\n            xl('Enable phiMail Direct Messaging Service'),\n            'bool',                           // data type\n            '0',\n            xl('Enable phiMail Direct Messaging Service')\n        ),\n\n        'phimail_server_address' => array(\n            xl('phiMail Server Address'),\n            'text',                           // data type\n            'https://phimail.example.com:32541',\n            xl('Contact EMR Direct to subscribe to the phiMail Direct messaging service')\n        ),\n\n        'phimail_username' => array(\n            xl('phiMail Username'),\n            'text',                           // data type\n            '',\n            xl('Contact EMR Direct to subscribe to the phiMail Direct messaging service')\n        ),\n\n        'phimail_password' => array(\n            xl('phiMail Password'),\n            'encrypted',                      // data type\n            '',\n            xl('Contact EMR Direct to subscribe to the phiMail Direct messaging service')\n        ),\n\n        'phimail_notify' => array(\n            xl('phiMail notification user'),\n            'text',                           // data type\n            'admin',\n            xl('This user will receive notification of new incoming Direct messages')\n        ),\n\n        'phimail_interval' => array(\n            xl('phiMail Message Check Interval (minutes)'),\n            'num',                           // data type\n            '5',\n            xl('Interval between message checks (set to zero for manual checks only)')\n        ),\n\n        'phimail_ccd_enable' => array(\n            xl('phiMail Allow CCD Send'),\n            'bool',                           // data type\n            '0',\n            xl('phiMail Allow CCD Send')\n        ),\n\n        'phimail_ccr_enable' => array(\n            xl('phiMail Allow CCR Send'),\n            'bool',                           // data type\n            '0',\n            xl('phiMail Allow CCR Send')\n        ),\n\n        'easipro_enable' => array(\n            xl('Enable Easipro'),\n            'bool',                           // data type\n            '0',\n            xl('Enable Easipro. For licensing options for this feature, please contact') . ' api@assessmentcenter.net'\n        ),\n\n        'easipro_server' => array(\n            xl('Easipro Server'),\n            'text',                           // data type\n            '',\n            xl('Easipro Server')\n        ),\n\n        'easipro_name' => array(\n            xl('Easipro Server Username'),\n            'text',                           // data type\n            '',\n            xl('Easipro Server Username')\n        ),\n\n        'easipro_pass' => array(\n            xl('Easipro Server Password'),\n            'encrypted',                      // data type\n            '',\n            xl('Easipro Server Password')\n        ),\n    ),\n\n    'Rx' => array(\n        'rx_enable_DEA' => array(\n            xl('Rx Enable DEA #'),\n            'bool',                           // data type\n            '1',\n            xl('Rx Enable DEA #')\n        ),\n        'rx_show_DEA' => array(\n            xl('Rx Show DEA #'),\n            'bool',                           // data type\n            '0',\n            xl('Rx Show DEA #')\n        ),\n        'rx_enable_NPI' => array(\n            xl('Rx Enable NPI'),\n            'bool',                           // data type\n            '0',\n            xl('Rx Enable NPI')\n        ),\n        'rx_show_NPI' => array(\n            xl('Rx Show NPI'),\n            'bool',                           // data type\n            '0',\n            xl('Rx Show NPI')\n        ),\n        'rx_enable_SLN' => array(\n            xl('Rx Enable State Lic. #'),\n            'bool',                           // data type\n            '0',\n            xl('Rx Enable State Lic. #')\n        ),\n        'rx_show_SLN' => array(\n            xl('Rx Show State Lic. #'),\n            'bool',                           // data type\n            '0',\n            xl('Rx Show State Lic. #')\n        ),\n        'rx_show_drug_drug' => array(\n            xl('Rx NLM Drug-Drug'),\n            'bool',                           // data type\n            '0',\n            xl('Rx NLM Drug-Drug')\n        ),\n        'rx_paper_size' => array(\n            xl('Rx Paper Size'),               // descriptive name\n            array(\n                'LETTER' => xl('Letter Paper Size'),\n                'LEGAL' => xl('Legal Paper Size'),\n                'FOLIO' => xl('Folio Paper Size'),\n                'EXECUTIVE' => xl('Executive Paper Size'),\n                '4A0' => ('4A0' . \" \" . xl('Paper Size')),\n                '2A0' => ('2A0' . \" \" . xl('Paper Size')),\n                'A0' => ('A0' . \" \" . xl('Paper Size')),\n                'A1' => ('A1' . \" \" . xl('Paper Size')),\n                'A2' => ('A2' . \" \" . xl('Paper Size')),\n                'A3' => ('A3' . \" \" . xl('Paper Size')),\n                'A4' => ('A4' . \" \" . xl('Paper Size')),\n                'A5' => ('A5' . \" \" . xl('Paper Size')),\n                'A6' => ('A6' . \" \" . xl('Paper Size')),\n                'A7' => ('A7' . \" \" . xl('Paper Size')),\n                'A8' => ('A8' . \" \" . xl('Paper Size')),\n                'A9' => ('A9' . \" \" . xl('Paper Size')),\n                'A10' => ('A10' . \" \" . xl('Paper Size')),\n                'B0' => ('B0' . \" \" . xl('Paper Size')),\n                'B1' => ('B1' . \" \" . xl('Paper Size')),\n                'B2' => ('B2' . \" \" . xl('Paper Size')),\n                'B3' => ('B3' . \" \" . xl('Paper Size')),\n                'B4' => ('B4' . \" \" . xl('Paper Size')),\n                'B5' => ('B5' . \" \" . xl('Paper Size')),\n                'B6' => ('B6' . \" \" . xl('Paper Size')),\n                'B7' => ('B7' . \" \" . xl('Paper Size')),\n                'B8' => ('B8' . \" \" . xl('Paper Size')),\n                'B9' => ('B9' . \" \" . xl('Paper Size')),\n                'B10' => ('B10' . \" \" . xl('Paper Size')),\n                'C0' => ('C0' . \" \" . xl('Paper Size')),\n                'C1' => ('C1' . \" \" . xl('Paper Size')),\n                'C2' => ('C2' . \" \" . xl('Paper Size')),\n                'C3' => ('C3' . \" \" . xl('Paper Size')),\n                'C4' => ('C4' . \" \" . xl('Paper Size')),\n                'C5' => ('C5' . \" \" . xl('Paper Size')),\n                'C6' => ('C6' . \" \" . xl('Paper Size')),\n                'C7' => ('C7' . \" \" . xl('Paper Size')),\n                'C8' => ('C8' . \" \" . xl('Paper Size')),\n                'C9' => ('C9' . \" \" . xl('Paper Size')),\n                'C10' => ('C10' . \" \" . xl('Paper Size')),\n                'RA0' => ('RA0' . \" \" . xl('Paper Size')),\n                'RA1' => ('RA1' . \" \" . xl('Paper Size')),\n                'RA2' => ('RA2' . \" \" . xl('Paper Size')),\n                'RA3' => ('RA3' . \" \" . xl('Paper Size')),\n                'RA4' => ('RA4' . \" \" . xl('Paper Size')),\n                'SRA0' => ('SRA0' . \" \" . xl('Paper Size')),\n                'SRA1' => ('SRA1' . \" \" . xl('Paper Size')),\n                'SRA2' => ('SRA2' . \" \" . xl('Paper Size')),\n                'SRA3' => ('SRA3' . \" \" . xl('Paper Size')),\n                'SRA4' => ('SRA4' . \" \" . xl('Paper Size')),\n            ),\n            'LETTER',                              // default = tree menu\n            xl('Rx Paper Size')\n        ),\n        'rx_left_margin' => array(\n            xl('Rx Left Margin (px)'),\n            'num',\n            '30',\n            xl('Rx Left Margin (px)')\n        ),\n        'rx_right_margin' => array(\n            xl('Rx Right Margin (px)'),\n            'num',\n            '30',\n            xl('Rx Right Margin (px)')\n        ),\n        'rx_top_margin' => array(\n            xl('Rx Top Margin (px)'),\n            'num',\n            '72',\n            xl('Rx Top Margin (px)')\n        ),\n        'rx_bottom_margin' => array(\n            xl('Rx Bottom Margin (px)'),\n            'num',\n            '30',\n            xl('Rx Bottom Margin (px)')\n        ),\n        'rx_use_fax_template' => array(\n            xl('Show button for download fax template'),\n            'bool',                           // data type\n            '1',                              // default = true\n            xl('Show button in the prescription list for download fax template')\n        ),\n        'rx_zend_html_template' => array(\n            xl('Rx html print - zend module'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Use an html template from zend module')\n        ),\n        'rx_zend_html_action' => array(\n            xl('Name of zend template for html print'),\n            'text',                           // data type\n            'default',\n            xl('Name of zend template for html print, possible to add custom template in the PrescriptionTemplate module')\n        ),\n        'rx_zend_pdf_template' => array(\n            xl('Rx pdf - zend template'),\n            'bool',                           // data type\n            '0',                              // default = false\n            xl('Use a pdf template from zend module')\n        ),\n        'rx_zend_pdf_action' => array(\n            xl('Name of zend template for pdf export'),\n            'text',                           // data type\n            'default',\n            xl('Name of zend template for pdf export, possible to add custom template in the PrescriptionTemplate module')\n        ),\n    ),\n    'PDF' => array(\n        'pdf_layout' => array(\n            xl('Layout'),\n            array(\n                'P' => xl('Portrait'),\n                'L' => xl('Landscape')\n            ),\n            'P', //defaut\n            xl(\"Choose Layout Direction\"),\n        ),\n        'pdf_language' => array(\n            xl('PDF Language'),\n            array(\n                'aa' => xl('Afar'),\n                'af' => xl('Afrikaans'),\n                'ak' => xl('Akan'),\n                'sq' => xl('Albanian'),\n                'am' => xl('Amharic'),\n                'ar' => xl('Arabic'),\n                'an' => xl('Aragonese'),\n                'hy' => xl('Armenian'),\n                'as' => xl('Assamese'),\n                'av' => xl('Avaric'),\n                'ae' => xl('Avestan'),\n                'ay' => xl('Aymara'),\n                'az' => xl('Azerbaijani'),\n                'bm' => xl('Bambara'),\n                'ba' => xl('Bashkir'),\n                'eu' => xl('Basque'),\n                'be' => xl('Belarusian'),\n                'bn' => xl('Bengali- Bangla'),\n                'bh' => xl('Bihari'),\n                'bi' => xl('Bislama'),\n                'bs' => xl('Bosnian'),\n                'br' => xl('Breton'),\n                'bg' => xl('Bulgarian'),\n                'my' => xl('Burmese'),\n                'ca' => xl('Catalan-\u00a0Valencian'),\n                'ch' => xl('Chamorro'),\n                'ce' => xl('Chechen'),\n                'ny' => xl('Chichewa- Chewa- Nyanja'),\n                'zh' => xl('Chinese'),\n                'cv' => xl('Chuvash'),\n                'kw' => xl('Cornish'),\n                'co' => xl('Corsican'),\n                'cr' => xl('Cree'),\n                'hr' => xl('Croatian'),\n                'cs' => xl('Czech'),\n                'da' => xl('Danish'),\n                'dv' => xl('Divehi- Dhivehi- Maldivian-'),\n                'nl' => xl('Dutch'),\n                'dz' => xl('Dzongkha'),\n                'en' => xl('English'),\n                'eo' => xl('Esperanto'),\n                'et' => xl('Estonian'),\n                'ee' => xl('Ewe'),\n                'fo' => xl('Faroese'),\n                'fj' => xl('Fijian'),\n                'fi' => xl('Finnish'),\n                'fr' => xl('French'),\n                'ff' => xl('Fula- Fulah- Pulaar- Pular'),\n                'gl' => xl('Galician'),\n                'ka' => xl('Georgian'),\n                'de' => xl('German'),\n                'el' => xl('Greek, Modern'),\n                'gn' => xl('Guarani'),\n                'gu' => xl('Gujarati'),\n                'ht' => xl('Haitian- Haitian Creole'),\n                'ha' => xl('Hausa'),\n                'he' => xl('Hebrew\u00a0(modern)'),\n                'hz' => xl('Herero'),\n                'hi' => xl('Hindi'),\n                'ho' => xl('Hiri Motu'),\n                'hu' => xl('Hungarian'),\n                'ia' => xl('Interlingua'),\n                'id' => xl('Indonesian'),\n                'ie' => xl('Interlingue'),\n                'ga' => xl('Irish'),\n                'ig' => xl('Igbo'),\n                'ik' => xl('Inupiaq'),\n                'io' => xl('Ido'),\n                'is' => xl('Icelandic'),\n                'it' => xl('Italian'),\n                'iu' => xl('Inuktitut'),\n                'ja' => xl('Japanese'),\n                'jv' => xl('Javanese'),\n                'kl' => xl('Kalaallisut, Greenlandic'),\n                'kn' => xl('Kannada'),\n                'kr' => xl('Kanuri'),\n                'ks' => xl('Kashmiri'),\n                'kk' => xl('Kazakh'),\n                'km' => xl('Khmer'),\n                'ki' => xl('Kikuyu, Gikuyu'),\n                'rw' => xl('Kinyarwanda'),\n                'ky' => xl('Kyrgyz'),\n                'kv' => xl('Komi'),\n                'kg' => xl('Kongo'),\n                'ko' => xl('Korean'),\n                'ku' => xl('Kurdish'),\n                'kj' => xl('Kwanyama, Kuanyama'),\n                'la' => xl('Latin'),\n                'lb' => xl('Luxembourgish, Letzeburgesch'),\n                'lg' => xl('Ganda'),\n                'li' => xl('Limburgish, Limburgan, Limburger'),\n                'ln' => xl('Lingala'),\n                'lo' => xl('Lao'),\n                'lt' => xl('Lithuanian'),\n                'lu' => xl('Luba-Katanga'),\n                'lv' => xl('Latvian'),\n                'gv' => xl('Manx'),\n                'mk' => xl('Macedonian'),\n                'mg' => xl('Malagasy'),\n                'ms' => xl('Malay'),\n                'ml' => xl('Malayalam'),\n                'mt' => xl('Maltese'),\n                'mi' => xl('Maori'),\n                'mr' => xl('Marathi (Marathi)'),\n                'mh' => xl('Marshallese'),\n                'mn' => xl('Mongolian'),\n                'na' => xl('Nauru'),\n                'nv' => xl('Navajo, Navaho'),\n                'nb' => xl('Norwegian Bokmal'),\n                'nd' => xl('North Ndebele'),\n                'ne' => xl('Nepali'),\n                'ng' => xl('Ndonga'),\n                'nn' => xl('Norwegian Nynorsk'),\n                'no' => xl('Norwegian'),\n                'ii' => xl('Nuosu'),\n                'nr' => xl('South Ndebele'),\n                'oc' => xl('Occitan'),\n                'oj' => xl('Ojibwe, Ojibwa'),\n                'cu' => xl('Old Church Slavonic,\u00a0Church Slavonic,\u00a0Old Bulgarian'),\n                'om' => xl('Oromo'),\n                'or' => xl('Oriya'),\n                'os' => xl('Ossetian, Ossetic'),\n                'pa' => xl('Panjabi, Punjabi'),\n                'pi' => xl('Pali'),\n                'fa' => xl('Persian\u00a0(Farsi)'),\n                'pl' => xl('Polish'),\n                'ps' => xl('Pashto, Pushto'),\n                'pt' => xl('Portuguese'),\n                'qu' => xl('Quechua'),\n                'rm' => xl('Romansh'),\n                'rn' => xl('Kirundi'),\n                'ro' => xl('Romanian'),\n                'ru' => xl('Russian'),\n                'sa' => xl('Sanskrit (Samskrta)'),\n                'sc' => xl('Sardinian'),\n                'sd' => xl('Sindhi'),\n                'se' => xl('Northern Sami'),\n                'sm' => xl('Samoan'),\n                'sg' => xl('Sango'),\n                'sr' => xl('Serbian'),\n                'gd' => xl('Scottish Gaelic- Gaelic'),\n                'sn' => xl('Shona'),\n                'si' => xl('Sinhala, Sinhalese'),\n                'sk' => xl('Slovak'),\n                'sl' => xl('Slovene'),\n                'so' => xl('Somali'),\n                'st' => xl('Southern Sotho'),\n                'es' => xl('Spanish- Castilian'),\n                'su' => xl('Sundanese'),\n                'sw' => xl('Swahili'),\n                'ss' => xl('Swati'),\n                'sv' => xl('Swedish'),\n                'ta' => xl('Tamil'),\n                'te' => xl('Telugu'),\n                'tg' => xl('Tajik'),\n                'th' => xl('Thai'),\n                'ti' => xl('Tigrinya'),\n                'bo' => xl('Tibetan Standard, Tibetan, Central'),\n                'tk' => xl('Turkmen'),\n                'tl' => xl('Tagalog'),\n                'tn' => xl('Tswana'),\n                'to' => xl('Tonga\u00a0(Tonga Islands)'),\n                'tr' => xl('Turkish'),\n                'ts' => xl('Tsonga'),\n                'tt' => xl('Tatar'),\n                'tw' => xl('Twi'),\n                'ty' => xl('Tahitian'),\n                'ug' => xl('Uyghur, Uighur'),\n                'uk' => xl('Ukrainian'),\n                'ur' => xl('Urdu'),\n                'uz' => xl('Uzbek'),\n                've' => xl('Venda'),\n                'vi' => xl('Vietnamese'),\n                'vo' => xl('Volapuk'),\n                'wa' => xl('Walloon'),\n                'cy' => xl('Welsh'),\n                'wo' => xl('Wolof'),\n                'fy' => xl('Western Frisian'),\n                'xh' => xl('Xhosa'),\n                'yi' => xl('Yiddish'),\n                'yo' => xl('Yoruba'),\n                'za' => xl('Zhuang, Chuang'),\n                'zu' => xl('Zulu'),\n            ),\n            'en', // default English\n            xl('Choose PDF languange Preference'),\n        ),\n        'pdf_size' => array(\n            xl('Paper Size'),               // Descriptive Name\n            array(\n                'LETTER' => xl('Letter Paper Size'),\n                'LEGAL' => xl('Legal Paper Size'),\n                'FOLIO' => xl('Folio Paper Size'),\n                'EXECUTIVE' => xl('Executive Paper Size'),\n                '4A0' => ('4A0' . \" \" . xl('Paper Size')),\n                '2A0' => ('2A0' . \" \" . xl('Paper Size')),\n                'A0' => ('A0' . \" \" . xl('Paper Size')),\n                'A1' => ('A1' . \" \" . xl('Paper Size')),\n                'A2' => ('A2' . \" \" . xl('Paper Size')),\n                'A3' => ('A3' . \" \" . xl('Paper Size')),\n                'A4' => ('A4' . \" \" . xl('Paper Size')),\n                'A5' => ('A5' . \" \" . xl('Paper Size')),\n                'A6' => ('A6' . \" \" . xl('Paper Size')),\n                'A7' => ('A7' . \" \" . xl('Paper Size')),\n                'A8' => ('A8' . \" \" . xl('Paper Size')),\n                'A9' => ('A9' . \" \" . xl('Paper Size')),\n                'A10' => ('A10' . \" \" . xl('Paper Size')),\n                'B0' => ('B0' . \" \" . xl('Paper Size')),\n                'B1' => ('B1' . \" \" . xl('Paper Size')),\n                'B2' => ('B2' . \" \" . xl('Paper Size')),\n                'B3' => ('B3' . \" \" . xl('Paper Size')),\n                'B4' => ('B4' . \" \" . xl('Paper Size')),\n                'B5' => ('B5' . \" \" . xl('Paper Size')),\n                'B6' => ('B6' . \" \" . xl('Paper Size')),\n                'B7' => ('B7' . \" \" . xl('Paper Size')),\n                'B8' => ('B8' . \" \" . xl('Paper Size')),\n                'B9' => ('B9' . \" \" . xl('Paper Size')),\n                'B10' => ('B10' . \" \" . xl('Paper Size')),\n                'C0' => ('C0' . \" \" . xl('Paper Size')),\n                'C1' => ('C1' . \" \" . xl('Paper Size')),\n                'C2' => ('C2' . \" \" . xl('Paper Size')),\n                'C3' => ('C3' . \" \" . xl('Paper Size')),\n                'C4' => ('C4' . \" \" . xl('Paper Size')),\n                'C5' => ('C5' . \" \" . xl('Paper Size')),\n                'C6' => ('C6' . \" \" . xl('Paper Size')),\n                'C7' => ('C7' . \" \" . xl('Paper Size')),\n                'C8' => ('C8' . \" \" . xl('Paper Size')),\n                'C9' => ('C9' . \" \" . xl('Paper Size')),\n                'C10' => ('C10' . \" \" . xl('Paper Size')),\n                'RA0' => ('RA0' . \" \" . xl('Paper Size')),\n                'RA1' => ('RA1' . \" \" . xl('Paper Size')),\n                'RA2' => ('RA2' . \" \" . xl('Paper Size')),\n                'RA3' => ('RA3' . \" \" . xl('Paper Size')),\n                'RA4' => ('RA4' . \" \" . xl('Paper Size')),\n                'SRA0' => ('SRA0' . \" \" . xl('Paper Size')),\n                'SRA1' => ('SRA1' . \" \" . xl('Paper Size')),\n                'SRA2' => ('SRA2' . \" \" . xl('Paper Size')),\n                'SRA3' => ('SRA3' . \" \" . xl('Paper Size')),\n                'SRA4' => ('SRA4' . \" \" . xl('Paper Size')),\n            ),\n            'LETTER',\n            xl('Choose Paper Size')\n        ),\n        'pdf_left_margin' => array(\n            xl('Left Margin (mm)'),\n            'num',\n            '5',\n            xl('Left Margin (mm)')\n        ),\n        'pdf_right_margin' => array(\n            xl('Right Margin (mm)'),\n            'num',\n            '5',\n            xl('Right Margin (mm)')\n        ),\n        'pdf_top_margin' => array(\n            xl('Top Margin (mm)'),\n            'num',\n            '5',\n            xl('Top Margin (mm)')\n        ),\n        'pdf_bottom_margin' => array(\n            xl('Bottom Margin (px)'),\n            'num',\n            '8',\n            xl('Bottom Margin (px)')\n        ),\n        'pdf_output' => array(\n            xl('Output Type'),\n            array(\n                'D' => xl('Download'),\n                'I' => xl('Inline')\n            ),\n            'D', //defaut\n            xl(\"Choose Download or Display Inline\"),\n        ),\n\n        'chart_label_type' => array(\n            xl('Patient Label Type'),\n            array(\n                '0' => xl('None'),\n                '1' => '5160',\n                '2' => '5161',\n                '3' => '5162'\n            ),\n            '1', // default\n            xl('Avery Label type for printing patient labels from popups in left nav screen'),\n        ),\n\n        'barcode_label_type' => array(\n            xl('Barcode Label Type'),\n            array(\n                '0' => xl('None'),\n                '1' => 'std25',\n                '2' => 'int25',\n                '3' => 'ean8',\n                '4' => 'ean13',\n                '5' => 'upc',\n                '6' => 'code11',\n                '7' => 'code39',\n                '8' => 'code93',\n                '9' => 'code128',\n                '10' => 'codabar',\n                '11' => 'msi',\n                '12' => 'datamatrix'\n            ),\n            '9',                              // default = None\n            xl('Barcode type for printing barcode labels from popups in left nav screen.')\n        ),\n\n        'addr_label_type' => array(\n            xl('Print Patient Address Label'),\n            'bool',                           // data type\n            '1',                              // default = false\n            xl('Select to print patient address labels from popups in left nav screen.')\n        ),\n\n        'env_x_width' => array(\n            xl('Envelope Width in mm'),\n            'num',                           // data type\n            '104.775',\n            xl('In Portrait mode, determines the width of the envelope along the x-axis in mm')\n        ),\n\n        'env_y_height' => array(\n            xl('Envelope Height in mm'),\n            'num',                           // data type\n            '241.3',\n            xl('In Portrait mode, determines the height of the envelope along the y-axis in mm')\n        ),\n\n        'env_font_size' => array(\n            xl('Font Size in Pt'),\n            'num',                           // data type\n            '14',\n            xl('Sets the font of the address text on the envelope in mm')\n        ),\n\n        'env_x_dist' => array(\n            xl('Envelope x-axis starting pt'),\n            'num',                           // data type\n            '65',\n            xl('Distance from the \\'top\\' of the envelope in mm')\n        ),\n\n        'env_y_dist' => array(\n            xl('Envelope y-axis starting pt'),\n            'num',                           // data type\n            '220',\n            xl('Distance from the right most edge of the envelope in portrait position in mm')\n        ),\n\n    ),\n);\n\nif (empty($skipGlobalEvent)) {\n    $globalsInitEvent = new GlobalsInitializedEvent(new GlobalsService($GLOBALS_METADATA, $USER_SPECIFIC_GLOBALS, $USER_SPECIFIC_TABS));\n    $globalsInitEvent = $GLOBALS[\"kernel\"]->getEventDispatcher()->dispatch(GlobalsInitializedEvent::EVENT_HANDLE, $globalsInitEvent, 10);\n    $globalsService = $globalsInitEvent->getGlobalsService()->save();\n}\n", "<?php\n\n/**\n * AuthUtils class.\n *\n *   Authentication:\n *     1. This class can be run in 1 of 4 modes:\n *       -login:      Authentication of users during standard login.\n *       -api:        Authentication of users when requesting api token.\n *       -portal-api: Authentication of patients when requesting api token.\n *       -other:      Default setting. Other Authentication when already logged into OpenEMR such as when\n *                     doing Esign or changing mfa setting.\n *     2. LDAP (Active Directory) is also supported. In these cases, the login counter and\n *         expired password mechanisms are ignored.\n *     3. Timing attack prevention. The time will be the same for a user that does not exist versus a user\n *         that does exist. This is done in standard authentication and ldap authentication by simulating\n *         the password verification in each via the preventTimingAttack() function.\n *        (There is one issue in this mechanism when using ldap with a user that is excluded from it. In\n *         that case unable to avoid timing differences. That feature is really only meant for configuration and\n *         debugging and recommend inactivating that excluded user when not needed, which will then mitigate\n *         this issue.)\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Kevin Yeh <kevin.y@integralemr.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (c) 2013 Kevin Yeh <kevin.y@integralemr.com>\n * @copyright Copyright (c) 2013 OEMR <www.oemr.org>\n * @copyright Copyright (c) 2018-2020 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nnamespace OpenEMR\\Common\\Auth;\n\nuse OpenEMR\\Common\\Acl\\AclExtended;\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Auth\\AuthHash;\nuse OpenEMR\\Common\\Logging\\EventAuditLogger;\nuse OpenEMR\\Common\\Utils\\RandomGenUtils;\n\nclass AuthUtils\n{\n    private $loginAuth = false; // standard login authentication\n    private $apiAuth = false;   // api login authentication\n    private $portalApiAuth = false;   // patient portal api login authentication\n    private $otherAuth = false; // other use\n\n    private $authHashAuth; // Store the private AuthHash instance.\n\n    private $errorMessage; // Error messages (in updatePassword() function)\n\n    private $userId;       // Stores user id for api to retrieve (in confirmPassword() function)\n    private $userGroup;    // Stores user group for api to retrieve (in confirmPassword() function)\n    private $patientId;    // Stores patient pid for api to retrieve (in confirmPassword() function)\n\n    private $dummyHash;     // Used to prevent timing attacks\n\n    public function __construct($mode = '')\n    {\n        // Set mode\n        if ($mode == 'login') {\n            $this->loginAuth = true;\n        } elseif ($mode == 'api') {\n            $this->apiAuth = true;\n        } elseif ($mode == 'portal-api') {\n            $this->portalApiAuth = true;\n        } else {\n            $this->otherAuth = true;\n        }\n\n        // Set up AuthHash instance (note it uses auth mode)\n        $this->authHashAuth = new AuthHash('auth');\n\n        // Ensure timing attack stuff is in place. This will be to prevent a bad actor from guessing\n        //  usernames and knowing they got a hit since the hash verification will then take time\n        //  whereas essentially no time is taken when the user does not exist. This will place\n        //  a dummy hash at $this->dummyHash, which is used by preventTimingAttack() function to\n        //  simulate a passwordVerify() run using the same hashing algorithm.\n        $dummyPassword = \"dummy\";\n        $timing = privQuery(\"SELECT * FROM `globals` WHERE `gl_name` = 'hidden_auth_dummy_hash'\");\n        if (empty($timing)) {\n            // Create and store a new dummy hash globals entry\n            $this->dummyHash = $this->authHashAuth->passwordHash($dummyPassword);\n            privStatement(\"INSERT INTO `globals` (`gl_name`, `gl_value`) VALUES ('hidden_auth_dummy_hash', ?)\", [$this->dummyHash]);\n        } elseif (empty($timing['gl_value'])) {\n            // Create and store a dummy rehash in existing globals entry\n            $this->dummyHash = $this->authHashAuth->passwordHash($dummyPassword);\n            privStatement(\"UPDATE `globals` SET `gl_value` = ? WHERE `gl_name` = 'hidden_auth_dummy_hash'\", [$this->dummyHash]);\n        } else {\n            // The below line is usually all that will happen in this big block of code\n            $this->dummyHash = $timing['gl_value'];\n            // Ensure the current dummy hash does not need to be rehashed\n            if ($this->authHashAuth->passwordNeedsRehash($timing['gl_value'])) {\n                // Create and store a dummy rehash in existing globals entry\n                $this->dummyHash = $this->authHashAuth->passwordHash($dummyPassword);\n                privStatement(\"UPDATE `globals` SET `gl_value` = ? WHERE `gl_name` = 'hidden_auth_dummy_hash'\", [$this->dummyHash]);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param type $username\n     * @param type $password - password is passed by reference so that it can be \"cleared out\" as soon as we are done with it.\n     * @param type $email    - used in case of portal auth when a email address is required\n     * @return boolean  returns true if the password for the given user is correct, false otherwise.\n     */\n    public function confirmPassword($username, &$password, $email = '')\n    {\n        if ($this->portalApiAuth) {\n            return $this->confirmPatientPassword($username, $password, $email);\n        } else { // $this->loginAuth || $this->apiAuth || $this->otherAuth\n            return $this->confirmUserPassword($username, $password);\n        }\n    }\n\n    /**\n     *\n     * @param type $username\n     * @param type $password - password is passed by reference so that it can be \"cleared out\" as soon as we are done with it.\n     * @param type $email    - used when a email address is required\n     * @return boolean  returns true if the password for the given user is correct, false otherwise.\n     */\n    private function confirmPatientPassword($username, &$password, $email = '')\n    {\n        // Set variables for log\n        $event = 'portalapi';\n        $beginLog = 'Portal API failure';\n\n        // Collect ip address for log\n        $ip = collectIpAddresses();\n\n        // Check to ensure username and password are not empty\n        if (empty($username) || empty($password)) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". empty username or password\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Perform checks from patient_access_onsite\n        $getPatientSQL = \"select `id`, `pid`, `portal_username`, `portal_login_username`, `portal_pwd`, `portal_pwd_status`, `portal_onetime`  from `patient_access_onsite` where BINARY `portal_login_username` = ?\";\n        $patientInfo = privQuery($getPatientSQL, [$username]);\n        if (empty($patientInfo) || empty($patientInfo['id']) || empty($patientInfo['pid'])) {\n            // Patient portal information not found\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient portal information not found\", $patientInfo['pid']);\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        } elseif (empty($patientInfo['portal_username']) || empty($patientInfo['portal_login_username']) || empty($patientInfo['portal_pwd'])) {\n            // Patient missing username, login username, or password\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient missing username, login username, or password\", $patientInfo['pid']);\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        } elseif (!empty($patientInfo['portal_onetime'])) {\n            // Patient onetime is set, so still in process of verifying account\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient account not yet verified (portal_onetime set)\", $patientInfo['pid']);\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        } elseif ($patientInfo['portal_pwd_status'] != 1) {\n            // Patient portal_pwd_status is not 1, so still in process of verifying account\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient account not yet verified (portal_pwd_status is not 1)\", $patientInfo['pid']);\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Perform checks from patient_data\n        $getPatientDataSQL = \"select `pid`, `email`, `allow_patient_portal` FROM `patient_data` WHERE `pid` = ?\";\n        $patientDataInfo = privQuery($getPatientDataSQL, [$patientInfo['pid']]);\n        if (empty($patientDataInfo) || empty($patientDataInfo['pid'])) {\n            // Patient not found\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient not found\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        } elseif ($patientDataInfo['allow_patient_portal'] != \"YES\") {\n            // Patient does not permit portal access\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient does not permit portal access\", $patientDataInfo['pid']);\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        } elseif ($GLOBALS['enforce_signin_email']) {\n            // Need to enforce email in credentials\n            if (empty($email)) {\n                // Patient email was not included in credentials\n                EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient email was not included in credentials\", $patientDataInfo['pid']);\n                $this->clearFromMemory($password);\n                $this->preventTimingAttack();\n                return false;\n            } elseif (empty($patientDataInfo['email'])) {\n                // Patient email missing from demographics\n                EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient does not have an email in demographics\", $patientDataInfo['pid']);\n                $this->clearFromMemory($password);\n                $this->preventTimingAttack();\n                return false;\n            } elseif ($patientDataInfo['email'] != $email) {\n                // Email not correct\n                EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient email not correct\", $patientDataInfo['pid']);\n                $this->clearFromMemory($password);\n                $this->preventTimingAttack();\n                return false;\n            }\n        }\n\n        // This error should never happen, but still gotta check for it\n        if ($patientInfo['pid'] != $patientDataInfo['pid']) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient pid comparison with very unusual error\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Authentication\n        // First, ensure the user hash is a valid hash\n        if (!AuthHash::hashValid($patientInfo['portal_pwd'])) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient stored password hash is invalid\", $patientDataInfo['pid']);\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n        // Second, authentication\n        if (!AuthHash::passwordVerify($password, $patientInfo['portal_pwd'])) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". patient password incorrect\", $patientDataInfo['pid']);\n            $this->clearFromMemory($password);\n            return false;\n        }\n\n        // Check for rehash\n        if ($this->authHashAuth->passwordNeedsRehash($patientInfo['portal_pwd'])) {\n            // Hash needs updating, so create a new hash, and replace the old one\n            $newHash = $this->rehashPassword($username, $password);\n            // store the rehash\n            privStatement(\"UPDATE `patient_access_onsite` SET `portal_pwd` = ? WHERE `id` = ?\", [$newHash, $patientInfo['id']]);\n        }\n\n        // PASSED auth for the portal api\n        $this->clearFromMemory($password);\n        //  Set up class variable that the api will need to collect (log for API is done outside)\n        $this->patientId = $patientDataInfo['pid'];\n        return true;\n    }\n\n    /**\n     *\n     * @param type $username\n     * @param type $password - password is passed by reference so that it can be \"cleared out\" as soon as we are done with it.\n     * @return boolean  returns true if the password for the given user is correct, false otherwise.\n     */\n    private function confirmUserPassword($username, &$password)\n    {\n        // Set variables for log\n        if ($this->loginAuth) {\n            $event = 'login';\n            $beginLog = 'failure';\n        } elseif ($this->apiAuth) {\n            $event = 'api';\n            $beginLog = 'API failure';\n        } else { // $this->otherAuth\n            $event = 'auth';\n            $beginLog = 'Auth failure';\n        }\n\n        // Collect ip address for log\n        $ip = collectIpAddresses();\n\n        // Check to ensure username and password are not empty\n        if (empty($username) || empty($password)) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". empty username or password\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Check to ensure user exists and is active\n        $getUserSQL = \"select `id`, `authorized`, `see_auth`, `active` from `users` where BINARY `username` = ?\";\n        $userInfo = privQuery($getUserSQL, [$username]);\n        if (empty($userInfo) || empty($userInfo['id'])) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". user not found\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        } elseif ($userInfo['active'] != 1) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". user not active\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Check to ensure user is in a group (and collect the group name)\n        $authGroup = privQuery(\"select `name` from `groups` where BINARY `user` = ?\", [$username]);\n        if (empty($authGroup) || empty($authGroup['name'])) {\n            EventAuditLogger::instance()->newEvent($event, $username, '', 0, $beginLog . \": \" . $ip['ip_string'] . \". user not found in a group\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Check to ensure user is in a acl group\n        if (AclExtended::aclGetGroupTitles($username) == 0) {\n            EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user not in any phpGACL groups\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Collect user credentials from database\n        $getUserSecureSQL = \" SELECT `id`, `password`\" .\n            \" FROM `users_secure`\" .\n            \" WHERE BINARY `username` = ?\";\n        $userSecure = privQuery($getUserSecureSQL, [$username]);\n        if (empty($userSecure) || empty($userSecure['id']) || empty($userSecure['password'])) {\n            EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user credentials not found\");\n            $this->clearFromMemory($password);\n            $this->preventTimingAttack();\n            return false;\n        }\n\n        // Check password\n        if (self::useActiveDirectory($username)) {\n            // ldap authentication\n            if (!$this->activeDirectoryValidation($username, $password)) {\n                EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user failed ldap authentication\");\n                $this->clearFromMemory($password);\n                return false;\n            }\n        } else {\n            // standard authentication\n            // First, ensure the user hash is a valid hash\n            if (!AuthHash::hashValid($userSecure['password'])) {\n                EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user stored password hash is invalid\");\n                $this->clearFromMemory($password);\n                $this->preventTimingAttack();\n                return false;\n            }\n            // Second, authentication\n            if (!AuthHash::passwordVerify($password, $userSecure['password'])) {\n                if ($this->loginAuth || $this->apiAuth) {\n                    // Utilize this during logins (and not during standard password checks within openemr such as esign)\n                    $this->incrementLoginFailedCounter($username);\n                }\n                EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user password incorrect\");\n                $this->clearFromMemory($password);\n                return false;\n            }\n        }\n\n        // check for rehash\n        if ($this->loginAuth || $this->apiAuth) {\n            // Utilize this during logins (and not during standard password checks within openemr such as esign)\n            if ($this->authHashAuth->passwordNeedsRehash($userSecure['password'])) {\n                // Hash needs updating, so create a new hash, and replace the old one\n                $newHash = $this->rehashPassword($username, $password);\n                // store the rehash\n                privStatement(\"UPDATE `users_secure` SET `password` = ? WHERE `id` = ?\", [$newHash, $userSecure['id']]);\n            }\n        }\n\n        // check login counter if this option is set (note ldap skips this)\n        if ($this->loginAuth || $this->apiAuth) {\n            // Utilize this during logins (and not during standard password checks within openemr such as esign)\n            if (!$this->checkLoginFailedCounter($username)) {\n                $this->incrementLoginFailedCounter($username);\n                EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user exceeded maximum number of failed logins\");\n                $this->clearFromMemory($password);\n                return false;\n            }\n        }\n\n        // Check to ensure password not expired if this option is set (note ldap skips this)\n        if (!$this->checkPasswordNotExpired($username)) {\n            EventAuditLogger::instance()->newEvent($event, $username, $authGroup['name'], 0, $beginLog . \": \" . $ip['ip_string'] . \". user password is expired\");\n            $this->clearFromMemory($password);\n            return false;\n        }\n\n        // PASSED\n        $this->clearFromMemory($password);\n        if ($this->loginAuth || $this->apiAuth) {\n            // Utilize this during logins (and not during standard password checks within openemr such as esign)\n            $this->resetLoginFailedCounter($username);\n        }\n        if ($this->loginAuth) {\n            // Specialized code for login auth (not api auth)\n            if (!empty($newHash)) {\n                $hash = $newHash;\n            } else {\n                $hash = $userSecure['password'];\n            }\n\n            // If $hash is empty, then something is very wrong\n            if (empty($hash)) {\n                error_log('OpenEMR Error : OpenEMR is not working because broken function.');\n                die(\"OpenEMR Error : OpenEMR is not working because broken function.\");\n            }\n\n            // Set up session environment\n            $_SESSION['authUser'] = $username;                     // username\n            $_SESSION['authPass'] = $hash;                         // user hash used to confirm session in authCheckSession()\n            $_SESSION['authUserID'] = $userInfo['id'];             // user id\n            $_SESSION['authProvider'] = $authGroup['name'];        // user group\n            $_SESSION['userauthorized'] = $userInfo['authorized']; // user authorized setting\n            // Some users may be able to authorize without being providers:\n            if ($userInfo['see_auth'] > '2') {\n                $_SESSION['userauthorized'] = '1';\n            }\n            EventAuditLogger::instance()->newEvent('login', $username, $authGroup['name'], 1, \"success: \" . $ip['ip_string']);\n        } elseif ($this->apiAuth) {\n            // Set up class variables that the api will need to collect (log for API is done outside)\n            $this->userId = $userInfo['id'];\n            $this->userGroup = $authGroup['name'];\n        } else {\n            // Log for authentication that are done, which are not api auth or login auth\n            EventAuditLogger::instance()->newEvent('auth', $username, $authGroup['name'], 1, \"Auth success: \" . $ip['ip_string']);\n        }\n        return true;\n    }\n\n    /**\n     * Setup or change a user's password\n     *\n     * @param type $activeUser      ID of who is trying to make the change (either the user himself, or an administrator) - CAN NOT BE EMPTY\n     * @param type $targetUser      ID of what account's password is to be updated (for a new user this doesn't exist yet).\n     * @param type $currentPwd      the active user's current password - CAN NOT BE EMPTY\n     *                              - password is passed by reference so that it can be \"cleared out\" as soon as we are done with it.\n     * @param type $newPwd          the new password for the target user\n     *                              - password is passed by reference so that it can be \"cleared out\" as soon as we are done with it.\n     * @param type $create          Are we creating a new user or\n     * @param type $insert_sql      SQL to run to create the row in \"users\" (and generate a new id) when needed.\n     * @param type $new_username    The username for a new user\n     * @return boolean              Was the password successfully updated/created? If false, then $this->errorMessage will tell you why it failed.\n     */\n    public function updatePassword($activeUser, $targetUser, &$currentPwd, &$newPwd, $create = false, $insert_sql = \"\", $new_username = null)\n    {\n        if (empty($activeUser) || empty($currentPwd)) {\n            $this->errorMessage = xl(\"Password update error!\");\n            $this->clearFromMemory($currentPwd);\n            $this->clearFromMemory($newPwd);\n            return false;\n        }\n\n        $userSQL = \"SELECT `password`, `password_history1`, `password_history2`, `password_history3`, `password_history4`\" .\n            \" FROM `users_secure`\" .\n            \" WHERE `id` = ?\";\n        $userInfo = privQuery($userSQL, [$targetUser]);\n\n        // Verify the active user's password\n        $changingOwnPassword = $activeUser == $targetUser;\n        // True if this is the current user changing their own password\n        if ($changingOwnPassword) {\n            if ($create) {\n                $this->errorMessage = xl(\"Trying to create user with existing username!\");\n                $this->clearFromMemory($currentPwd);\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n            if (empty($userInfo['password'])) {\n                $this->errorMessage = xl(\"Password update error!\");\n                $this->clearFromMemory($currentPwd);\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n            // If this user is changing his own password, then confirm that they have the current password correct\n            if (!AuthHash::passwordVerify($currentPwd, $userInfo['password'])) {\n                $this->errorMessage = xl(\"Incorrect password!\");\n                $this->clearFromMemory($currentPwd);\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n        } else {\n            // If this is an administrator changing someone else's password, then check that they have this privilege\n            if (!AclMain::aclCheckCore('admin', 'users')) {\n                $this->errorMessage = xl(\"Not authorized to manage users!\");\n                $this->clearFromMemory($currentPwd);\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n\n            // If this is an administrator changing someone else's password, then authenticate the administrator\n            if (self::useActiveDirectory()) {\n                if (empty($_SESSION['authUser'])) {\n                    $this->errorMessage = xl(\"Password update error!\");\n                    $this->clearFromMemory($currentPwd);\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n                if (!$this->activeDirectoryValidation($_SESSION['authUser'], $currentPwd)) {\n                    $this->errorMessage = xl(\"Incorrect password!\");\n                    $this->clearFromMemory($currentPwd);\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n            } else {\n                $adminSQL = \"SELECT `password`\" .\n                    \" FROM `users_secure`\" .\n                    \" WHERE `id` = ?\";\n                $adminInfo = privQuery($adminSQL, [$activeUser]);\n                if (empty($adminInfo) || empty($adminInfo['password'])) {\n                    $this->errorMessage = xl(\"Password update error!\");\n                    $this->clearFromMemory($currentPwd);\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n                if (!AuthHash::passwordVerify($currentPwd, $adminInfo['password'])) {\n                    $this->errorMessage = xl(\"Incorrect password!\");\n                    $this->clearFromMemory($currentPwd);\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n            }\n        }\n\n        // End active user check (can now clear $currentPwd since no longer used)\n        $this->clearFromMemory($currentPwd);\n\n        // Use case here is for when an administrator is adding a new user that will be using LDAP for authentication\n        // (note that in this case, a random password is prepared for the new user below that is stored in OpenEMR\n        //  and used only for session confirmations; the primary authentication for the new user will be done via\n        //  LDAP)\n        $ldapDummyPassword = false;\n        if ($create && ($userInfo === false) && (!empty($new_username)) && (self::useActiveDirectory($new_username))) {\n            $ldapDummyPassword = true;\n            $newPwd = RandomGenUtils::produceRandomString(32, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\");\n            if (empty($newPwd)) {\n                // Something is seriously wrong with the random generator\n                $this->clearFromMemory($newPwd);\n                error_log('OpenEMR Error : OpenEMR is not working because unable to create a random unique string.');\n                die(\"OpenEMR Error : OpenEMR is not working because unable to create a random unique string.\");\n            }\n        }\n\n        // Ensure new password is not blank\n        if (empty($newPwd)) {\n            $this->errorMessage = xl(\"Empty Password Not Allowed\");\n            $this->clearFromMemory($newPwd);\n            return false;\n        }\n\n        // Ensure password is long enough, if this option is on (note LDAP skips this)\n        if ((!$ldapDummyPassword) && (!$this->testMinimumPasswordLength($newPwd))) {\n            $this->clearFromMemory($newPwd);\n            return false;\n        }\n\n        // Ensure password is not too long (note LDAP skips this)\n        if ((!$ldapDummyPassword) && (!$this->testMaximumPasswordLength($newPwd))) {\n            $this->clearFromMemory($newPwd);\n            return false;\n        }\n\n        // Ensure new password is strong enough, if this option is on (note LDAP skips this)\n        if ((!$ldapDummyPassword) && (!$this->testPasswordStrength($newPwd))) {\n            $this->clearFromMemory($newPwd);\n            return false;\n        }\n\n        if ($userInfo === false) {\n            // No userInfo means a new user\n            // In these cases don't worry about password history\n            if ($create) {\n                if (empty($new_username)) {\n                    $this->errorMessage = xl(\"Password update error!\");\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n                // Collect the new user id from the users table\n                privStatement($insert_sql, array());\n                $getUserID = \"SELECT `id`\" .\n                    \" FROM `users`\" .\n                    \" WHERE BINARY `username` = ?\";\n                $user_id = privQuery($getUserID, [$new_username]);\n                if (empty($user_id) || empty($user_id['id'])) {\n                    $this->errorMessage = xl(\"Password update error!\");\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n                // Create the new user password hash\n                $hash = $this->authHashAuth->passwordHash($newPwd);\n                if (empty($hash)) {\n                    // Something is seriously wrong\n                    error_log('OpenEMR Error : OpenEMR is not working because unable to create a hash.');\n                    die(\"OpenEMR Error : OpenEMR is not working because unable to create a hash.\");\n                }\n                // Store the new user credentials\n                $passwordSQL = \"INSERT INTO `users_secure`\" .\n                    \" (`id`,`username`,`password`,`last_update_password`)\" .\n                    \" VALUES (?,?,?,NOW()) \";\n                privStatement($passwordSQL, [$user_id['id'], $new_username, $hash]);\n            } else {\n                $this->errorMessage = xl(\"Missing user credentials\") . \":\" . $targetUser;\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n        } else { // We are trying to update the password of an existing user\n            if ($create) {\n                $this->errorMessage = xl(\"Trying to create user with existing username!\");\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n\n            if (empty($targetUser)) {\n                $this->errorMessage = xl(\"Password update error!\");\n                $this->clearFromMemory($newPwd);\n                return false;\n            }\n\n            if (($GLOBALS['password_history'] != 0) && (check_integer($GLOBALS['password_history']))) {\n                // password reuse disallowed\n                $pass_reuse_fail = false;\n                if (($GLOBALS['password_history'] > 0) && (AuthHash::passwordVerify($newPwd, $userInfo['password']))) {\n                    $pass_reuse_fail = true;\n                }\n                if (($GLOBALS['password_history'] > 1) && (AuthHash::passwordVerify($newPwd, $userInfo['password_history1']))) {\n                    $pass_reuse_fail = true;\n                }\n                if (($GLOBALS['password_history'] > 2) && (AuthHash::passwordVerify($newPwd, $userInfo['password_history2']))) {\n                    $pass_reuse_fail = true;\n                }\n                if (($GLOBALS['password_history'] > 3) && (AuthHash::passwordVerify($newPwd, $userInfo['password_history3']))) {\n                    $pass_reuse_fail = true;\n                }\n                if (($GLOBALS['password_history'] > 4) && (AuthHash::passwordVerify($newPwd, $userInfo['password_history4']))) {\n                    $pass_reuse_fail = true;\n                }\n                if ($pass_reuse_fail) {\n                    $this->errorMessage = xl(\"Reuse of previous passwords not allowed!\");\n                    $this->clearFromMemory($newPwd);\n                    return false;\n                }\n            }\n\n            // Everything checks out at this point, so update the password record\n            $newHash = $this->authHashAuth->passwordHash($newPwd);\n            if (empty($newHash)) {\n                // Something is seriously wrong\n                $this->clearFromMemory($newPwd);\n                error_log('OpenEMR Error : OpenEMR is not working because unable to create a hash.');\n                die(\"OpenEMR Error : OpenEMR is not working because unable to create a hash.\");\n            }\n\n            $updateParams = array();\n            $updateSQL = \"UPDATE `users_secure`\";\n            $updateSQL .= \" SET `last_update_password` = NOW()\";\n            $updateSQL .= \", `password` = ?\";\n            array_push($updateParams, $newHash);\n            if ($GLOBALS['password_history'] != 0) {\n                $updateSQL .= \", `password_history1` = ?\";\n                array_push($updateParams, $userInfo['password']);\n                $updateSQL .= \", `password_history2` = ?\";\n                array_push($updateParams, $userInfo['password_history1']);\n                $updateSQL .= \", `password_history3` = ?\";\n                array_push($updateParams, $userInfo['password_history2']);\n                $updateSQL .= \", `password_history4` = ?\";\n                array_push($updateParams, $userInfo['password_history3']);\n            }\n\n            $updateSQL .= \" WHERE `id` = ?\";\n            array_push($updateParams, $targetUser);\n            privStatement($updateSQL, $updateParams);\n\n            // If the user is changing their own password, we need to update the session\n            if ($changingOwnPassword) {\n                $_SESSION['authPass'] = $newHash;\n            }\n        }\n\n        // Done with $newPwd, so can clear it now\n        $this->clearFromMemory($newPwd);\n\n        return true;\n    }\n\n    public function getErrorMessage()\n    {\n        return $this->errorMessage;\n    }\n\n    public function getUserId()\n    {\n        return $this->userId;\n    }\n\n    public function getUserGroup()\n    {\n        return $this->userGroup;\n    }\n\n    public function getPatientId()\n    {\n        return $this->patientId;\n    }\n\n    // Ensure user hash remains valid (for example, if user is deactivated or password is changed, then\n    //  this will not allow the same user in another session continue to use OpenEMR)\n    // This function is static since requires no class specific defines\n    public static function authCheckSession()\n    {\n        if ((!empty($_SESSION['authUserID'])) && (!empty($_SESSION['authUser'])) && (!empty($_SESSION['authPass']))) {\n            $authDB = privQuery(\"SELECT `users`.`username`, `users_secure`.`password`\" .\n                \" FROM `users`, `users_secure`\" .\n                \" WHERE `users`.`id` = ? \" .\n                \" AND `users`.`id` = `users_secure`.`id` \" .\n                \" AND BINARY `users`.`username` = `users_secure`.`username`\" .\n                \" AND `users`.`active` = 1\", [$_SESSION['authUserID']]);\n            if (\n                (!empty($authDB)) &&\n                (!empty($authDB['username'])) &&\n                (!empty($authDB['password'])) &&\n                ($_SESSION['authUser'] == $authDB['username']) &&\n                (hash_equals($_SESSION['authPass'], $authDB['password']))\n            ) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    // Check if the current or a specified user logs in with LDAP.\n    // This function is static since requires no class specific defines\n    public static function useActiveDirectory($user = '')\n    {\n        if (empty($GLOBALS['gbl_ldap_enabled'])) {\n            return false;\n        }\n        if ($user == '') {\n            $user = $_SESSION['authUser'];\n        }\n        $exarr = explode(',', $GLOBALS['gbl_ldap_exclusions']);\n        foreach ($exarr as $ex) {\n            if ($user == trim($ex)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Validation of user and password using LDAP.\n    // - $pass passed by reference to prevent storage of pass in memory\n    private function activeDirectoryValidation($user, &$pass)\n    {\n        // Make sure the connection is not anonymous.\n        if ($pass === '' || preg_match('/^\\0/', $pass) || !preg_match('/^[\\w.-]+$/', $user)) {\n            error_log(\"Empty user or password for activeDirectoryValidation()\");\n            return false;\n        }\n\n        // below can be uncommented for detailed debugging\n        // ldap_set_option(NULL, LDAP_OPT_DEBUG_LEVEL, 7);\n\n        $ldapconn = ldap_connect($GLOBALS['gbl_ldap_host']);\n        if ($ldapconn) {\n            // block of code to support encryption\n            $isTls = false;\n            if (\n                file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-ca\") &&\n                file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-cert\") &&\n                file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-key\")\n            ) {\n                // set ca cert and client key/cert\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_CACERTFILE, $GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-ca\")) {\n                    error_log(\"Setting ldap-ca certificate failed\");\n                }\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_CERTFILE, $GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-cert\")) {\n                    error_log(\"Setting ldap-cert client certificate failed\");\n                }\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_KEYFILE, $GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-key\")) {\n                    error_log(\"Setting ldap-cert client key failed\");\n                }\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_REQUIRE_CERT, LDAP_OPT_X_TLS_DEMAND)) {\n                    error_log(\"Setting require_cert to demand failed\");\n                }\n                $isTls = true;\n            } elseif (file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-ca\")) {\n                // set ca cert\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_CACERTFILE, $GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/ldap-ca\")) {\n                    error_log(\"Setting ldap-ca certificate failed\");\n                }\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_CERTFILE, '')) {\n                    error_log(\"Clearing ldap-cert client certificate failed\");\n                }\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_KEYFILE, '')) {\n                    error_log(\"Clearing ldap-cert client key failed\");\n                }\n                if (!ldap_set_option(null, LDAP_OPT_X_TLS_REQUIRE_CERT, LDAP_OPT_X_TLS_TRY)) {\n                    error_log(\"Setting require_cert to try failed\");\n                }\n                $isTls = true;\n            }\n\n            if (!ldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3)) {\n                error_log(\"Setting LDAP v3 protocol failed\");\n            }\n            if (!ldap_set_option($ldapconn, LDAP_OPT_REFERRALS, 0)) {\n                error_log(\"Disabling LDAP referrals failed\");\n            }\n\n            if ($isTls) {\n                if (!ldap_start_tls($ldapconn)) {\n                    error_log(\"ldap TLS (ldap_start_tls()) failed\");\n                    return false;\n                }\n            }\n\n            $ldapbind = ldap_bind(\n                $ldapconn,\n                str_replace('{login}', $user, $GLOBALS['gbl_ldap_dn']),\n                $pass\n            );\n            if ($ldapbind) {\n                ldap_unbind($ldapconn);\n                return true;\n            }\n        } else {\n            error_log(\"ldap_connect() failed\");\n        }\n        return false;\n    }\n\n    // Function to centralize the rehash process\n    // It will return the new hash\n    // - $password passed by reference to prevent storage of pass in memory\n    private function rehashPassword($username, &$password)\n    {\n        if (self::useActiveDirectory($username)) {\n            // rehash for LDAP\n            $newRandomDummyPassword = RandomGenUtils::produceRandomString(32, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\");\n            if (empty($newRandomDummyPassword)) {\n                // Something is seriously wrong with the random generator\n                $this->clearFromMemory($password);\n                error_log('OpenEMR Error : OpenEMR is not working because unable to create a random unique string.');\n                die(\"OpenEMR Error : OpenEMR is not working because unable to create a random unique string.\");\n            }\n            $phash = $this->authHashAuth->passwordHash($newRandomDummyPassword);\n            $this->clearFromMemory($newRandomDummyPassword);\n        } else {\n            // rehash for standard\n            $phash = $this->authHashAuth->passwordHash($password);\n        }\n\n        if (empty($phash)) {\n            // Something is seriously wrong\n            $this->clearFromMemory($password);\n            error_log('OpenEMR Error : OpenEMR is not working because unable to create a hash.');\n            die(\"OpenEMR Error : OpenEMR is not working because unable to create a hash.\");\n        }\n\n        // return the rehash\n        return $phash;\n    }\n\n    /**\n     * Does the new password meet the minimum length requirements?\n     *\n     * @param type $pwd     the password to test - passed by reference to prevent storage of pass in memory\n     * @return boolean      is the password long enough?\n     */\n    private function testMinimumPasswordLength(&$pwd)\n    {\n        if (($GLOBALS['gbl_minimum_password_length'] != 0) && (check_integer($GLOBALS['gbl_minimum_password_length']))) {\n            if (strlen($pwd) < $GLOBALS['gbl_minimum_password_length']) {\n                $this->errorMessage = xl(\"Password too short. Minimum characters required\") . \": \" . $GLOBALS['gbl_minimum_password_length'];\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Does the new password meet the maximum length requirement?\n     *\n     * The maximum characters used in BCRYPT hash algorithm is 72 (the additional characters\n     *  are simply truncated, so does not break things, but it does give the erroneous\n     *  impression that they are used to create the hash; for example, if I created a\n     *  password with 100 characters, then only the first 72 characters would be needed\n     *  when authenticate), which is why the 'Maximum Password Length' global setting is\n     *  set to this number in default installations. Recommend only changing the\n     *  'Maximum Password Length' global setting if know what you are doing (for example, if using\n     *  argon hashing and wish to allow larger passwords).\n     *\n     * @param type $pwd     the password to test - passed by reference to prevent storage of pass in memory\n     * @return boolean      is the password short enough?\n     */\n    private function testMaximumPasswordLength(&$pwd)\n    {\n        if ((!empty($GLOBALS['gbl_maximum_password_length'])) && (check_integer($GLOBALS['gbl_maximum_password_length']))) {\n            if (strlen($pwd) > $GLOBALS['gbl_maximum_password_length']) {\n                $this->errorMessage = xl(\"Password too long. Maximum characters allowed\") . \": \" . $GLOBALS['gbl_maximum_password_length'];\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Does the new password meet the strength requirements?\n     *\n     * @param type $pwd     the password to test - passed by reference to prevent storage of pass in memory\n     * @return boolean      is the password strong enough?\n     */\n    private function testPasswordStrength(&$pwd)\n    {\n        if ($GLOBALS['secure_password']) {\n            $features = 0;\n            $reg_security = array(\"/[a-z]+/\",\"/[A-Z]+/\",\"/\\d+/\",\"/[\\W_]+/\");\n            foreach ($reg_security as $expr) {\n                if (preg_match($expr, $pwd)) {\n                    $features++;\n                }\n            }\n\n            if ($features < 4) {\n                $this->errorMessage = xl(\"Password does not meet minimum requirements and should contain at least each of the following items: A number, a lowercase letter, an uppercase letter, a special character (not a letter or number).\");\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private function checkPasswordNotExpired($user)\n    {\n        if (($GLOBALS['password_expiration_days'] == 0) || self::useActiveDirectory($user)) {\n            // skip the check if turned off or using active directory for login\n            return true;\n        }\n        $query = privQuery(\"SELECT `last_update_password` FROM `users_secure` WHERE BINARY `username` = ?\", [$user]);\n        if ((!empty($query)) && (!empty($query['last_update_password'])) && (check_integer($GLOBALS['password_expiration_days'])) && (check_integer($GLOBALS['password_grace_time']))) {\n            $current_date = date(\"Y-m-d\");\n            $expiredPlusGraceTime = date(\"Y-m-d\", strtotime($query['last_update_password'] . \"+\" . ($GLOBALS['password_expiration_days'] + $GLOBALS['password_grace_time']) . \" days\"));\n            if (strtotime($current_date) > strtotime($expiredPlusGraceTime)) {\n                return false;\n            }\n        } else {\n            error_log(\"OpenEMR ERROR: there is a problem when trying to check if user's password is expired\");\n        }\n        return true;\n    }\n\n    private function checkLoginFailedCounter($user)\n    {\n        if ($GLOBALS['password_max_failed_logins'] == 0 || self::useActiveDirectory($user)) {\n            // skip the check if turned off or using active directory for login\n            return true;\n        }\n\n        $query = privQuery(\"SELECT `login_fail_counter` FROM `users_secure` WHERE BINARY `username` = ?\", [$user]);\n        if ($query['login_fail_counter'] >= $GLOBALS['password_max_failed_logins']) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private function resetLoginFailedCounter($user)\n    {\n        if (!self::useActiveDirectory($user)) {\n            // skip if using active directory for login\n            privStatement(\"UPDATE `users_secure` SET `login_fail_counter` = 0 WHERE BINARY `username` = ?\", [$user]);\n        }\n    }\n\n    private function incrementLoginFailedCounter($user)\n    {\n        if (!self::useActiveDirectory($user)) {\n            // skip if using active directory for login\n            privStatement(\"UPDATE `users_secure` SET `login_fail_counter` = login_fail_counter+1 WHERE BINARY `username` = ?\", [$user]);\n        }\n    }\n\n    // Function to prevent timing attacks\n    //  For standard authentication, simulating a call to passwordVerify() run using the same hashing algorithm.\n    //  For ldap authentication, simulating a call to ldap server.\n    private function preventTimingAttack()\n    {\n        $dummyPassword = \"heyheyhey\";\n        if ($GLOBALS['gbl_ldap_enabled']) {\n            // ldap authentication simulation\n            $this->activeDirectoryValidation(\"dummyCheck\", $dummyPassword);\n        } else {\n            // standard authentication simulation\n            AuthHash::passwordVerify($dummyPassword, $this->dummyHash);\n        }\n    }\n\n    // Function to support clearing password from memory\n    // - $password passed by reference to prevent storage of pass in memory\n    private function clearFromMemory(&$password)\n    {\n        if (function_exists('sodium_memzero')) {\n            sodium_memzero($password);\n        } else {\n            $password = '';\n        }\n    }\n}\n"], "filenames": ["library/globals.inc.php", "src/Common/Auth/AuthUtils.php"], "buggy_code_start_loc": [1926, 543], "buggy_code_end_loc": [1926, 861], "fixing_code_start_loc": [1927, 543], "fixing_code_end_loc": [1937, 895], "type": "CWE-521", "message": "In OpenEMR, versions 5.0.0 to 6.0.0.1 are vulnerable to weak password requirements as it does not enforce a maximum password length limit. If a malicious user is aware of the first 72 characters of the victim user\u2019s password, he can leverage it to an account takeover.", "other": {"cve": {"id": "CVE-2021-25923", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-06-24T11:15:07.877", "lastModified": "2021-06-30T14:14:56.797", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In OpenEMR, versions 5.0.0 to 6.0.0.1 are vulnerable to weak password requirements as it does not enforce a maximum password length limit. If a malicious user is aware of the first 72 characters of the victim user\u2019s password, he can leverage it to an account takeover."}, {"lang": "es", "value": "En OpenEMR, versiones 5.0.0 hasta 6.0.0.1, son vulnerables a requisitos de contrase\u00f1as d\u00e9biles, ya que no aplica un l\u00edmite de longitud m\u00e1xima de la contrase\u00f1a. Si un usuario malicioso esta consciente los primeros 72 caracteres de la contrase\u00f1a del usuario v\u00edctima, puede aprovecharlos para hacerse con una cuenta"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-521"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndIncluding": "6.0.0.1", "matchCriteriaId": "58E731FF-CAE5-470F-91F3-B8B749DD273D"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/28ca5c008d4a408b60001a67dfd3e0915f9181e0", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25923", "source": "vulnerabilitylab@mend.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/28ca5c008d4a408b60001a67dfd3e0915f9181e0"}}