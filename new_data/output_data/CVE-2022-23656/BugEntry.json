{"buggy_code": ["/* Module for popovers that have been ported to the modern\n   TippyJS/Popper popover library from the legacy Bootstrap\n   popovers system in popovers.js. */\n\nimport $ from \"jquery\";\nimport {delegate} from \"tippy.js\";\n\nimport render_compose_control_buttons_popover from \"../templates/compose_control_buttons_popover.hbs\";\nimport render_compose_select_enter_behaviour_popover from \"../templates/compose_select_enter_behaviour_popover.hbs\";\nimport render_left_sidebar_stream_setting_popover from \"../templates/left_sidebar_stream_setting_popover.hbs\";\nimport render_mobile_message_buttons_popover_content from \"../templates/mobile_message_buttons_popover_content.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as common from \"./common\";\nimport * as compose_actions from \"./compose_actions\";\nimport * as giphy from \"./giphy\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as popovers from \"./popovers\";\nimport * as settings_data from \"./settings_data\";\nimport {user_settings} from \"./user_settings\";\n\nlet left_sidebar_stream_setting_popover_displayed = false;\nlet compose_mobile_button_popover_displayed = false;\nexport let compose_enter_sends_popover_displayed = false;\nlet compose_control_buttons_popover_instance;\n\nexport function get_compose_control_buttons_popover() {\n    return compose_control_buttons_popover_instance;\n}\n\nconst default_popover_props = {\n    delay: 0,\n    appendTo: () => document.body,\n    trigger: \"click\",\n    allowHTML: true,\n    interactive: true,\n    hideOnClick: true,\n    /* The light-border TippyJS theme is a bit of a misnomer; it\n       is a popover styling similar to Bootstrap.  We've also customized\n       its CSS to support Zulip's dark theme. */\n    theme: \"light-border\",\n    touch: true,\n};\n\nexport function any_active() {\n    return (\n        left_sidebar_stream_setting_popover_displayed ||\n        compose_mobile_button_popover_displayed ||\n        compose_control_buttons_popover_instance ||\n        compose_enter_sends_popover_displayed\n    );\n}\n\nfunction on_show_prep(instance) {\n    $(instance.popper).one(\"click\", instance.hide);\n    popovers.hide_all_except_sidebars(instance);\n}\n\nexport function initialize() {\n    delegate(\"body\", {\n        ...default_popover_props,\n        target: \"#streams_inline_icon\",\n        onShow(instance) {\n            const can_create_streams =\n                settings_data.user_can_create_private_streams() ||\n                settings_data.user_can_create_public_streams() ||\n                settings_data.user_can_create_web_public_streams();\n            on_show_prep(instance);\n\n            if (!can_create_streams) {\n                // If the user can't create streams, we directly\n                // navigate them to the Manage streams subscribe UI.\n                window.location.assign(\"#streams/all\");\n                // Returning false from an onShow handler cancels the show.\n                return false;\n            }\n\n            instance.setContent(render_left_sidebar_stream_setting_popover());\n            left_sidebar_stream_setting_popover_displayed = true;\n            return true;\n        },\n        onHidden() {\n            left_sidebar_stream_setting_popover_displayed = false;\n        },\n    });\n\n    // compose box buttons popover shown on mobile widths.\n    delegate(\"body\", {\n        ...default_popover_props,\n        target: \".compose_mobile_button\",\n        placement: \"top\",\n        onShow(instance) {\n            on_show_prep(instance);\n            instance.setContent(\n                render_mobile_message_buttons_popover_content({\n                    is_in_private_narrow: narrow_state.narrowed_to_pms(),\n                }),\n            );\n            compose_mobile_button_popover_displayed = true;\n\n            const $popper = $(instance.popper);\n            $popper.one(\"click\", \".compose_mobile_stream_button\", () => {\n                compose_actions.start(\"stream\", {trigger: \"new topic button\"});\n            });\n            $popper.one(\"click\", \".compose_mobile_private_button\", () => {\n                compose_actions.start(\"private\");\n            });\n        },\n        onHidden(instance) {\n            // Destroy instance so that event handlers\n            // are destroyed too.\n            instance.destroy();\n            compose_mobile_button_popover_displayed = false;\n        },\n    });\n\n    // We need to hide instance manually for popover due to\n    // `$(\"body\").on(\"click\"...` method not being triggered for\n    // the elements when we do:\n    // `$(instance.popper).one(\"click\", instance.hide); in onShow.\n    // Cannot reproduce it on codepen -\n    // https://codepen.io/amanagr/pen/jOLoKVg\n    // So, probably a bug on our side.\n    delegate(\"body\", {\n        ...default_popover_props,\n        target: \".compose_control_menu_wrapper\",\n        placement: \"top\",\n        onShow(instance) {\n            instance.setContent(\n                render_compose_control_buttons_popover({\n                    giphy_enabled: giphy.is_giphy_enabled(),\n                }),\n            );\n            compose_control_buttons_popover_instance = instance;\n            popovers.hide_all_except_sidebars(instance);\n        },\n        onHidden() {\n            compose_control_buttons_popover_instance = undefined;\n        },\n    });\n\n    delegate(\"body\", {\n        ...default_popover_props,\n        target: \".enter_sends\",\n        placement: \"top\",\n        onShow(instance) {\n            on_show_prep(instance);\n            instance.setContent(\n                render_compose_select_enter_behaviour_popover({\n                    enter_sends_true: user_settings.enter_sends,\n                }),\n            );\n            compose_enter_sends_popover_displayed = true;\n        },\n        onMount(instance) {\n            common.adjust_mac_shortcuts(\".enter_sends_choices kbd\");\n\n            $(instance.popper).one(\"click\", \".enter_sends_choice\", (e) => {\n                let selected_behaviour = $(e.currentTarget)\n                    .find(\"input[type='radio']\")\n                    .attr(\"value\");\n                selected_behaviour = selected_behaviour === \"true\"; // Convert to bool\n                user_settings.enter_sends = selected_behaviour;\n                $(`.enter_sends_${!selected_behaviour}`).hide();\n                $(`.enter_sends_${selected_behaviour}`).show();\n\n                // Refocus in the content box so you can continue typing or\n                // press Enter to send.\n                $(\"#compose-textarea\").trigger(\"focus\");\n\n                return channel.patch({\n                    url: \"/json/settings\",\n                    idempotent: true,\n                    data: {enter_sends: selected_behaviour},\n                });\n            });\n        },\n        onHidden(instance) {\n            instance.destroy();\n            compose_enter_sends_popover_displayed = false;\n        },\n    });\n}\n", "import $ from \"jquery\";\n\nimport render_recent_topic_row from \"../templates/recent_topic_row.hbs\";\nimport render_recent_topics_filters from \"../templates/recent_topics_filters.hbs\";\nimport render_recent_topics_body from \"../templates/recent_topics_table.hbs\";\n\nimport * as compose_closed_ui from \"./compose_closed_ui\";\nimport * as hash_util from \"./hash_util\";\nimport {$t} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport * as loading from \"./loading\";\nimport {localstorage} from \"./localstorage\";\nimport * as message_store from \"./message_store\";\nimport * as message_util from \"./message_util\";\nimport * as message_view_header from \"./message_view_header\";\nimport * as muted_topics from \"./muted_topics\";\nimport * as narrow from \"./narrow\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as navbar_alerts from \"./navbar_alerts\";\nimport * as navigate from \"./navigate\";\nimport * as people from \"./people\";\nimport * as recent_senders from \"./recent_senders\";\nimport {get, process_message, topics} from \"./recent_topics_data\";\nimport {get_topic_key, is_in_focus, is_visible, set_visible} from \"./recent_topics_util\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_list from \"./stream_list\";\nimport * as sub_store from \"./sub_store\";\nimport * as timerender from \"./timerender\";\nimport * as top_left_corner from \"./top_left_corner\";\nimport * as unread from \"./unread\";\n\nlet topics_widget;\n// Sets the number of avatars to display.\n// Rest of the avatars, if present, are displayed as {+x}\nconst MAX_AVATAR = 4;\nconst MAX_EXTRA_SENDERS = 10;\n\n// Use this to set the focused element.\n//\n// We set it's value to `table` in case the\n// focus in one of the table rows, since the\n// table rows are constantly updated and tracking\n// the selected element in them would be tedious via\n// jquery.\n//\n// So, we use table as a grid system and\n// track the coordinates of the focus element via\n// `row_focus` and `col_focus`.\nexport let current_focus_elem = \"table\";\n\n// If user clicks a topic in recent topics, then\n// we store that topic here so that we can restore focus\n// to that topic when user revisits.\nlet last_visited_topic = \"\";\nlet row_focus = 0;\n// Start focus on the topic column, so Down+Enter works to visit a topic.\nlet col_focus = 1;\n\nexport const COLUMNS = {\n    stream: 0,\n    topic: 1,\n    mute: 2,\n    read: 3,\n};\n\n// The number of selectable actions in a recent_topics.  Used to\n// implement wraparound of elements with the right/left keys.  Must be\n// increased when we add new actions, or rethought if we add optional\n// actions that only appear in some rows.\nconst MAX_SELECTABLE_COLS = 4;\n\n// we use localstorage to persist the recent topic filters\nconst ls_key = \"recent_topic_filters\";\nconst ls = localstorage();\n\nlet filters = new Set();\n\nexport function clear_for_tests() {\n    filters.clear();\n    topics.clear();\n    topics_widget = undefined;\n}\n\nexport function save_filters() {\n    ls.set(ls_key, Array.from(filters));\n}\n\nexport function load_filters() {\n    filters = new Set(ls.get(ls_key));\n}\n\nexport function set_default_focus() {\n    // If at any point we are confused about the currently\n    // focused element, we switch focus to search.\n    current_focus_elem = $(\"#recent_topics_search\");\n    current_focus_elem.trigger(\"focus\");\n    compose_closed_ui.set_standard_text_for_reply_button();\n}\n\nfunction get_min_load_count(already_rendered_count, load_count) {\n    const extra_rows_for_viewing_pleasure = 15;\n    if (row_focus > already_rendered_count + load_count) {\n        return row_focus + extra_rows_for_viewing_pleasure - already_rendered_count;\n    }\n    return load_count;\n}\n\nfunction is_table_focused() {\n    return current_focus_elem === \"table\";\n}\n\nfunction set_table_focus(row, col, using_keyboard) {\n    const topic_rows = $(\"#recent_topics_table table tbody tr\");\n    if (topic_rows.length === 0 || row < 0 || row >= topic_rows.length) {\n        row_focus = 0;\n        // return focus back to filters if we cannot focus on the table.\n        set_default_focus();\n        return true;\n    }\n\n    const topic_row = topic_rows.eq(row);\n    // We need to allow table to render first before setting focus.\n    setTimeout(\n        () => topic_row.find(\".recent_topics_focusable\").eq(col).children().trigger(\"focus\"),\n        0,\n    );\n    current_focus_elem = \"table\";\n\n    if (using_keyboard) {\n        const scroll_element = document.querySelector(\n            \"#recent_topics_table .table_fix_head .simplebar-content-wrapper\",\n        );\n        const half_height_of_visible_area = scroll_element.offsetHeight / 2;\n        const topic_offset = topic_offset_to_visible_area(topic_row);\n\n        if (topic_offset === \"above\") {\n            scroll_element.scrollBy({top: -1 * half_height_of_visible_area});\n        } else if (topic_offset === \"below\") {\n            scroll_element.scrollBy({top: half_height_of_visible_area});\n        }\n    }\n\n    const message = {\n        stream: topic_row.find(\".recent_topic_stream a\").text(),\n        topic: topic_row.find(\".recent_topic_name a\").text(),\n    };\n    compose_closed_ui.update_reply_recipient_label(message);\n    return true;\n}\n\nexport function get_focused_row_message() {\n    if (is_table_focused()) {\n        const recent_topic_id_prefix_len = \"recent_topic:\".length;\n        const topic_rows = $(\"#recent_topics_table table tbody tr\");\n        if (topic_rows.length === 0) {\n            return undefined;\n        }\n\n        const topic_row = topic_rows.eq(row_focus);\n        const topic_id = topic_row.attr(\"id\").slice(recent_topic_id_prefix_len);\n        const topic_last_msg_id = topics.get(topic_id).last_msg_id;\n        return message_store.get(topic_last_msg_id);\n    }\n    return undefined;\n}\n\nexport function revive_current_focus() {\n    // After re-render, the current_focus_elem is no longer linked\n    // to the focused element, this function attempts to revive the\n    // link and focus to the element prior to the rerender.\n\n    // We try to avoid setting focus when user\n    // is not focused on recent topics.\n    if (!is_in_focus()) {\n        return false;\n    }\n\n    if (!current_focus_elem) {\n        set_default_focus();\n        return false;\n    }\n\n    if (is_table_focused()) {\n        if (last_visited_topic) {\n            const topic_last_msg_id = topics.get(last_visited_topic).last_msg_id;\n            const current_list = topics_widget.get_current_list();\n            const last_visited_topic_index = current_list.findIndex(\n                (topic) => topic.last_msg_id === topic_last_msg_id,\n            );\n            if (last_visited_topic_index >= 0) {\n                row_focus = last_visited_topic_index;\n            }\n            last_visited_topic = \"\";\n        }\n\n        set_table_focus(row_focus, col_focus);\n        return true;\n    }\n\n    const filter_button = current_focus_elem.data(\"filter\");\n    if (!filter_button) {\n        set_default_focus();\n    } else {\n        current_focus_elem = $(\"#recent_topics_filter_buttons\").find(\n            `[data-filter='${CSS.escape(filter_button)}']`,\n        );\n        current_focus_elem.trigger(\"focus\");\n    }\n    return true;\n}\n\nexport function show_loading_indicator() {\n    loading.make_indicator($(\"#recent_topics_loading_messages_indicator\"));\n}\n\nexport function hide_loading_indicator() {\n    $(\"#recent_topics_bottom_whitespace\").hide();\n    loading.destroy_indicator($(\"#recent_topics_loading_messages_indicator\"), {\n        abs_positioned: false,\n    });\n    // Show empty table text if there are no messages fetched.\n    $(\"#recent_topics_table tbody\").addClass(\"required-text\");\n}\n\nexport function process_messages(messages) {\n    // While this is inexpensive and handles all the cases itself,\n    // the UX can be bad if user wants to scroll down the list as\n    // the UI will be returned to the beginning of the list on every\n    // update.\n    //\n    // Only rerender if topic_data actually\n    // changed.\n    let topic_data_changed = false;\n    for (const msg of messages) {\n        if (process_message(msg)) {\n            topic_data_changed = true;\n        }\n    }\n\n    if (topic_data_changed) {\n        complete_rerender();\n    }\n}\n\nfunction format_topic(topic_data) {\n    const last_msg = message_store.get(topic_data.last_msg_id);\n    const stream = last_msg.stream;\n    const stream_id = last_msg.stream_id;\n    const stream_info = sub_store.get(stream_id);\n    if (stream_info === undefined) {\n        // stream was deleted\n        return {};\n    }\n    const topic = last_msg.topic;\n    const time = new Date(last_msg.timestamp * 1000);\n    const last_msg_time = timerender.format_time_modern(time);\n    const full_datetime = timerender.get_full_datetime(time);\n\n    // We hide the row according to filters or if it's muted.\n    // We only supply the data to the topic rows and let jquery\n    // display / hide them according to filters instead of\n    // doing complete re-render.\n    const topic_muted = Boolean(muted_topics.is_topic_muted(stream_id, topic));\n    const stream_muted = stream_data.is_muted(stream_id);\n    const muted = topic_muted || stream_muted;\n    const unread_count = unread.num_unread_for_topic(stream_id, topic);\n\n    // Display in most recent sender first order\n    const all_senders = recent_senders.get_topic_recent_senders(stream_id, topic);\n    const senders = all_senders.slice(-MAX_AVATAR);\n    const senders_info = people.sender_info_for_recent_topics_row(senders);\n\n    // Collect extra senders fullname for tooltip.\n    const extra_sender_ids = all_senders.slice(0, -MAX_AVATAR);\n    const displayed_other_senders = extra_sender_ids.slice(-MAX_EXTRA_SENDERS);\n    const displayed_other_names = people.get_display_full_names(displayed_other_senders.reverse());\n\n    if (extra_sender_ids.length > MAX_EXTRA_SENDERS) {\n        // We display only 10 extra senders in tooltips,\n        // and just display remaining number of senders.\n        const remaining_senders = extra_sender_ids.length - MAX_EXTRA_SENDERS;\n        // Pluralization syntax from:\n        // https://formatjs.io/docs/core-concepts/icu-syntax/#plural-format\n        displayed_other_names.push(\n            $t(\n                {\n                    defaultMessage:\n                        \"and {remaining_senders, plural, one {1 other} other {# others}}.\",\n                },\n                {remaining_senders},\n            ),\n        );\n    }\n    const other_sender_names = displayed_other_names.join(\"<br/>\");\n\n    return {\n        // stream info\n        stream_id,\n        stream,\n        stream_color: stream_info.color,\n        invite_only: stream_info.invite_only,\n        is_web_public: stream_info.is_web_public,\n        stream_url: hash_util.by_stream_uri(stream_id),\n\n        topic,\n        topic_key: get_topic_key(stream_id, topic),\n        unread_count,\n        last_msg_time,\n        topic_url: hash_util.by_stream_topic_uri(stream_id, topic),\n        senders: senders_info,\n        other_senders_count: Math.max(0, all_senders.length - MAX_AVATAR),\n        other_sender_names,\n        muted,\n        topic_muted,\n        participated: topic_data.participated,\n        full_last_msg_date_time: full_datetime,\n    };\n}\n\nfunction get_topic_row(topic_data) {\n    const msg = message_store.get(topic_data.last_msg_id);\n    const topic_key = get_topic_key(msg.stream_id, msg.topic);\n    return $(`#${CSS.escape(\"recent_topic:\" + topic_key)}`);\n}\n\nexport function process_topic_edit(old_stream_id, old_topic, new_topic, new_stream_id) {\n    // See `recent_senders.process_topic_edit` for\n    // logic behind this and important notes on use of this function.\n    topics.delete(get_topic_key(old_stream_id, old_topic));\n\n    const old_topic_msgs = message_util.get_messages_in_topic(old_stream_id, old_topic);\n    process_messages(old_topic_msgs);\n\n    new_stream_id = new_stream_id || old_stream_id;\n    const new_topic_msgs = message_util.get_messages_in_topic(new_stream_id, new_topic);\n    process_messages(new_topic_msgs);\n}\n\nexport function topic_in_search_results(keyword, stream, topic) {\n    if (keyword === \"\") {\n        return true;\n    }\n    const text = (stream + \" \" + topic).toLowerCase();\n    const search_words = keyword.toLowerCase().split(/\\s+/);\n    return search_words.every((word) => text.includes(word));\n}\n\nexport function update_topics_of_deleted_message_ids(message_ids) {\n    const topics_to_rerender = message_util.get_topics_for_message_ids(message_ids);\n\n    for (const [stream_id, topic] of topics_to_rerender.values()) {\n        topics.delete(get_topic_key(stream_id, topic));\n        const msgs = message_util.get_messages_in_topic(stream_id, topic);\n        process_messages(msgs);\n    }\n}\n\nexport function filters_should_hide_topic(topic_data) {\n    const msg = message_store.get(topic_data.last_msg_id);\n    const sub = sub_store.get(msg.stream_id);\n\n    if (sub === undefined || !sub.subscribed) {\n        // Never try to process deactivated & unsubscribed stream msgs.\n        return true;\n    }\n\n    if (filters.has(\"unread\")) {\n        const unreadCount = unread.num_unread_for_topic(msg.stream_id, msg.topic);\n        if (unreadCount === 0) {\n            return true;\n        }\n    }\n\n    if (!topic_data.participated && filters.has(\"participated\")) {\n        return true;\n    }\n\n    if (!filters.has(\"include_muted\")) {\n        const topic_muted = Boolean(muted_topics.is_topic_muted(msg.stream_id, msg.topic));\n        const stream_muted = stream_data.is_muted(msg.stream_id);\n        if (topic_muted || stream_muted) {\n            return true;\n        }\n    }\n\n    const search_keyword = $(\"#recent_topics_search\").val();\n    if (!topic_in_search_results(search_keyword, msg.stream, msg.topic)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function inplace_rerender(topic_key) {\n    if (!is_visible()) {\n        return false;\n    }\n    if (!topics.has(topic_key)) {\n        return false;\n    }\n\n    const topic_data = topics.get(topic_key);\n    topics_widget.render_item(topic_data);\n    const topic_row = get_topic_row(topic_data);\n\n    if (filters_should_hide_topic(topic_data)) {\n        topic_row.hide();\n    } else {\n        topic_row.show();\n    }\n    revive_current_focus();\n    return true;\n}\n\nexport function update_topic_is_muted(stream_id, topic) {\n    const key = get_topic_key(stream_id, topic);\n    if (!topics.has(key)) {\n        // we receive mute request for a topic we are\n        // not tracking currently\n        return false;\n    }\n\n    inplace_rerender(key);\n    return true;\n}\n\nexport function update_topic_unread_count(message) {\n    const topic_key = get_topic_key(message.stream_id, message.topic);\n    inplace_rerender(topic_key);\n}\n\nexport function set_filter(filter) {\n    // This function updates the `filters` variable\n    // after user clicks on one of the filter buttons\n    // based on `btn-recent-selected` class and current\n    // set `filters`.\n\n    // Get the button which was clicked.\n    const filter_elem = $(\"#recent_topics_filter_buttons\").find(\n        `[data-filter=\"${CSS.escape(filter)}\"]`,\n    );\n\n    // If user clicks `All`, we clear all filters.\n    if (filter === \"all\" && filters.size !== 0) {\n        filters = new Set();\n        // If the button was already selected, remove the filter.\n    } else if (filter_elem.hasClass(\"btn-recent-selected\")) {\n        filters.delete(filter);\n        // If the button was not selected, we add the filter.\n    } else {\n        filters.add(filter);\n    }\n\n    save_filters();\n}\n\nfunction show_selected_filters() {\n    // Add `btn-selected-filter` to the buttons to show\n    // which filters are applied.\n    if (filters.size === 0) {\n        $(\"#recent_topics_filter_buttons\")\n            .find('[data-filter=\"all\"]')\n            .addClass(\"btn-recent-selected\")\n            .attr(\"aria-checked\", \"true\");\n    } else {\n        for (const filter of filters) {\n            $(\"#recent_topics_filter_buttons\")\n                .find(`[data-filter=\"${CSS.escape(filter)}\"]`)\n                .addClass(\"btn-recent-selected\")\n                .attr(\"aria-checked\", \"true\");\n        }\n    }\n}\n\nexport function update_filters_view() {\n    const rendered_filters = render_recent_topics_filters({\n        filter_participated: filters.has(\"participated\"),\n        filter_unread: filters.has(\"unread\"),\n        filter_muted: filters.has(\"include_muted\"),\n    });\n    $(\"#recent_filters_group\").html(rendered_filters);\n    show_selected_filters();\n\n    topics_widget.hard_redraw();\n}\n\nfunction stream_sort(a, b) {\n    const a_stream = message_store.get(a.last_msg_id).stream;\n    const b_stream = message_store.get(b.last_msg_id).stream;\n    if (a_stream > b_stream) {\n        return 1;\n    } else if (a_stream === b_stream) {\n        return 0;\n    }\n    return -1;\n}\n\nfunction topic_sort(a, b) {\n    const a_topic = message_store.get(a.last_msg_id).topic;\n    const b_topic = message_store.get(b.last_msg_id).topic;\n    if (a_topic > b_topic) {\n        return 1;\n    } else if (a_topic === b_topic) {\n        return 0;\n    }\n    return -1;\n}\n\nfunction topic_offset_to_visible_area(topic_row) {\n    const scroll_container = $(\"#recent_topics_table .table_fix_head\");\n    const thead_height = 30;\n    const under_closed_compose_region_height = 50;\n\n    const scroll_container_top = $(scroll_container).offset().top + thead_height;\n    const scroll_container_bottom =\n        scroll_container_top + $(scroll_container).height() - under_closed_compose_region_height;\n\n    const topic_row_top = $(topic_row).offset().top;\n    const topic_row_bottom = topic_row_top + $(topic_row).height();\n\n    // Topic is above the visible scroll region.\n    if (topic_row_top < scroll_container_top) {\n        return \"above\";\n        // Topic is below the visible scroll region.\n    } else if (topic_row_bottom > scroll_container_bottom) {\n        return \"below\";\n    }\n\n    // Topic is visible\n    return \"visible\";\n}\n\nfunction set_focus_to_element_in_center() {\n    const table_wrapper_element = document.querySelector(\"#recent_topics_table .table_fix_head\");\n    const topic_rows = $(\"#recent_topics_table table tbody tr\");\n\n    if (row_focus > topic_rows.length) {\n        // User used a filter which reduced\n        // the number of visible rows.\n        return;\n    }\n    let topic_row = topic_rows.eq(row_focus);\n    const topic_offset = topic_offset_to_visible_area(topic_row);\n    if (topic_offset !== \"visible\") {\n        // Get the element at the center of the table.\n        const position = table_wrapper_element.getBoundingClientRect();\n        const topic_center_x = (position.left + position.right) / 2;\n        const topic_center_y = (position.top + position.bottom) / 2;\n\n        topic_row = $(document.elementFromPoint(topic_center_x, topic_center_y)).closest(\"tr\");\n\n        row_focus = topic_rows.index(topic_row);\n        set_table_focus(row_focus, col_focus);\n    }\n}\n\nfunction is_scroll_position_for_render(scroll_container) {\n    const table_bottom_margin = 100; // Extra margin at the bottom of table.\n    const table_row_height = 50;\n    return (\n        scroll_container.scrollTop +\n            scroll_container.clientHeight +\n            table_bottom_margin +\n            table_row_height >\n        scroll_container.scrollHeight\n    );\n}\n\nexport function complete_rerender() {\n    if (!is_visible()) {\n        return;\n    }\n\n    // Update header\n    load_filters();\n    show_selected_filters();\n\n    // Show topics list\n    const mapped_topic_values = Array.from(get().values()).map((value) => value);\n\n    if (topics_widget) {\n        topics_widget.replace_list_data(mapped_topic_values);\n        return;\n    }\n\n    const rendered_body = render_recent_topics_body({\n        filter_participated: filters.has(\"participated\"),\n        filter_unread: filters.has(\"unread\"),\n        filter_muted: filters.has(\"include_muted\"),\n        search_val: $(\"#recent_topics_search\").val() || \"\",\n    });\n    $(\"#recent_topics_table\").html(rendered_body);\n    const container = $(\"#recent_topics_table table tbody\");\n    container.empty();\n    topics_widget = ListWidget.create(container, mapped_topic_values, {\n        name: \"recent_topics_table\",\n        parent_container: $(\"#recent_topics_table\"),\n        modifier(item) {\n            return render_recent_topic_row(format_topic(item));\n        },\n        filter: {\n            // We use update_filters_view & filters_should_hide_topic to do all the\n            // filtering for us, which is called using click_handlers.\n            predicate(topic_data) {\n                return !filters_should_hide_topic(topic_data);\n            },\n        },\n        sort_fields: {\n            stream_sort,\n            topic_sort,\n        },\n        html_selector: get_topic_row,\n        simplebar_container: $(\"#recent_topics_table .table_fix_head\"),\n        callback_after_render: revive_current_focus,\n        is_scroll_position_for_render,\n        post_scroll__pre_render_callback: set_focus_to_element_in_center,\n        get_min_load_count,\n    });\n}\n\nexport function show() {\n    if (is_visible()) {\n        // If we're already visible, E.g. because the user hit Esc\n        // while already in the recent topics view, do nothing.\n        return;\n    }\n    // Hide selected elements in the left sidebar.\n    top_left_corner.narrow_to_recent_topics();\n    stream_list.handle_narrow_deactivated();\n\n    // Hide \"middle-column\" which has html for rendering\n    // a messages narrow. We hide it and show recent topics.\n    $(\"#message_feed_container\").hide();\n    $(\"#recent_topics_view\").show();\n    set_visible(true);\n    $(\"#message_view_header_underpadding\").hide();\n    $(\".header\").css(\"padding-bottom\", \"0px\");\n\n    narrow.hide_mark_as_read_turned_off_banner();\n\n    // We want to show `new stream message` instead of\n    // `new topic`, which we are already doing in this\n    // function. So, we reuse it here.\n    compose_closed_ui.update_buttons_for_recent_topics();\n\n    narrow_state.reset_current_filter();\n    narrow.set_narrow_title(\"Recent topics\");\n    message_view_header.render_title_area();\n\n    complete_rerender();\n}\n\nfunction filter_buttons() {\n    return $(\"#recent_filters_group\").children();\n}\n\nexport function hide() {\n    // On firefox (and flaky on other browsers), focus\n    // remains on the focused element even after it is hidden. We\n    // forcefully blur it so that focus returns to the visible\n    // focused element.\n    const focused_element = $(document.activeElement);\n    if ($(\"#recent_topics_view\").has(focused_element)) {\n        focused_element.trigger(\"blur\");\n    }\n\n    $(\"#message_view_header_underpadding\").show();\n    $(\"#message_feed_container\").show();\n    $(\"#recent_topics_view\").hide();\n    set_visible(false);\n\n    $(\".header\").css(\"padding-bottom\", \"10px\");\n\n    // This solves a bug with message_view_header\n    // being broken sometimes when we narrow\n    // to a filter and back to recent topics\n    // before it completely re-rerenders.\n    message_view_header.render_title_area();\n\n    // Fixes misaligned message_view and hidden\n    // floating_recipient_bar.\n    navbar_alerts.resize_app();\n\n    // This makes sure user lands on the selected message\n    // and not always at the top of the narrow.\n    navigate.plan_scroll_to_selected();\n}\n\nfunction is_focus_at_last_table_row() {\n    const topic_rows = $(\"#recent_topics_table table tbody tr\");\n    return row_focus === topic_rows.length - 1;\n}\n\nexport function focus_clicked_element(topic_row_index, col, topic_key) {\n    current_focus_elem = \"table\";\n    col_focus = col;\n    row_focus = topic_row_index;\n\n    if (col === COLUMNS.topic) {\n        last_visited_topic = topic_key;\n    }\n    // Set compose_closed_ui reply button text.  The rest of the table\n    // focus logic should be a noop.\n    set_table_focus(row_focus, col_focus);\n}\n\nexport function change_focused_element($elt, input_key) {\n    // Called from hotkeys.js; like all logic in that module,\n    // returning true will cause the caller to do\n    // preventDefault/stopPropagation; false will let the browser\n    // handle the key.\n\n    if ($elt.attr(\"id\") === \"recent_topics_search\") {\n        // Since the search box a text area, we want the browser to handle\n        // Left/Right and selection within the widget; but if the user\n        // arrows off the edges, we should move focus to the adjacent widgets..\n        const textInput = $(\"#recent_topics_search\").get(0);\n        const start = textInput.selectionStart;\n        const end = textInput.selectionEnd;\n        const text_length = textInput.value.length;\n        let is_selected = false;\n        if (end - start > 0) {\n            is_selected = true;\n        }\n\n        switch (input_key) {\n            //  Allow browser to handle all\n            //  character keypresses.\n            case \"vim_left\":\n            case \"vim_right\":\n            case \"vim_down\":\n            case \"vim_up\":\n            case \"open_recent_topics\":\n                return false;\n            case \"shift_tab\":\n                current_focus_elem = filter_buttons().last();\n                break;\n            case \"left_arrow\":\n                if (start !== 0 || is_selected) {\n                    return false;\n                }\n                current_focus_elem = filter_buttons().last();\n                break;\n            case \"tab\":\n                current_focus_elem = filter_buttons().first();\n                break;\n            case \"right_arrow\":\n                if (end !== text_length || is_selected) {\n                    return false;\n                }\n                current_focus_elem = filter_buttons().first();\n                break;\n            case \"down_arrow\":\n                set_table_focus(row_focus, col_focus);\n                return true;\n            case \"click\":\n                // Note: current_focus_elem can be different here, so we just\n                // set current_focus_elem to the input box, we don't want .trigger(\"focus\") on\n                // it since it is already focused.\n                // We only do this for search because we don't want the focus to\n                // go away from the input box when `revive_current_focus` is called\n                // on rerender when user is typing.\n                current_focus_elem = $(\"#recent_topics_search\");\n                compose_closed_ui.set_standard_text_for_reply_button();\n                return true;\n            case \"escape\":\n                if (is_table_focused()) {\n                    return false;\n                }\n                set_table_focus(row_focus, col_focus);\n                return true;\n        }\n    } else if ($elt.hasClass(\"btn-recent-filters\")) {\n        switch (input_key) {\n            case \"click\":\n                current_focus_elem = $elt;\n                return true;\n            case \"shift_tab\":\n            case \"vim_left\":\n            case \"left_arrow\":\n                if (filter_buttons().first()[0] === $elt[0]) {\n                    current_focus_elem = $(\"#recent_topics_search\");\n                } else {\n                    current_focus_elem = $elt.prev();\n                }\n                break;\n            case \"tab\":\n            case \"vim_right\":\n            case \"right_arrow\":\n                if (filter_buttons().last()[0] === $elt[0]) {\n                    current_focus_elem = $(\"#recent_topics_search\");\n                } else {\n                    current_focus_elem = $elt.next();\n                }\n                break;\n            case \"vim_down\":\n            case \"down_arrow\":\n                set_table_focus(row_focus, col_focus);\n                return true;\n            case \"escape\":\n                if (is_table_focused()) {\n                    return false;\n                }\n                set_table_focus(row_focus, col_focus);\n                return true;\n        }\n    } else if (is_table_focused()) {\n        // For arrowing around the table of topics, we implement left/right\n        // wraparound.  Going off the top or the bottom takes one\n        // to the navigation at the top (see set_table_focus).\n        switch (input_key) {\n            case \"escape\":\n                return false;\n            case \"open_recent_topics\":\n                set_default_focus();\n                return true;\n            case \"shift_tab\":\n            case \"vim_left\":\n            case \"left_arrow\":\n                col_focus -= 1;\n                if (col_focus < 0) {\n                    col_focus = MAX_SELECTABLE_COLS - 1;\n                }\n                break;\n            case \"tab\":\n            case \"vim_right\":\n            case \"right_arrow\":\n                col_focus += 1;\n                if (col_focus >= MAX_SELECTABLE_COLS) {\n                    col_focus = 0;\n                }\n                break;\n            case \"vim_down\":\n                // We stop user at last table row\n                // so that user doesn't end up in\n                // input box where it is impossible to\n                // get out of using vim_up / vim_down\n                // keys. This also blocks the user from\n                // having `jjjj` typed in the input box\n                // when continuously pressing `j`.\n                if (is_focus_at_last_table_row()) {\n                    return true;\n                }\n                row_focus += 1;\n                break;\n            case \"down_arrow\":\n                row_focus += 1;\n                break;\n            case \"vim_up\":\n                // See comment on vim_down.\n                // Similarly, blocks the user from\n                // having `kkkk` typed in the input box\n                // when continuously pressing `k`.\n                if (row_focus === 0) {\n                    return true;\n                }\n                row_focus -= 1;\n                break;\n            case \"up_arrow\":\n                row_focus -= 1;\n        }\n        set_table_focus(row_focus, col_focus, true);\n        return true;\n    }\n    if (current_focus_elem && input_key !== \"escape\") {\n        current_focus_elem.trigger(\"focus\");\n        if (current_focus_elem.hasClass(\"btn-recent-filters\")) {\n            compose_closed_ui.set_standard_text_for_reply_button();\n        }\n        return true;\n    }\n\n    return false;\n}\n", "import ClipboardJS from \"clipboard\";\nimport {isValid, parseISO} from \"date-fns\";\nimport $ from \"jquery\";\n\nimport copy_code_button from \"../templates/copy_code_button.hbs\";\nimport render_markdown_timestamp from \"../templates/markdown_timestamp.hbs\";\nimport view_code_in_playground from \"../templates/view_code_in_playground.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as people from \"./people\";\nimport * as realm_playground from \"./realm_playground\";\nimport * as rtl from \"./rtl\";\nimport * as stream_data from \"./stream_data\";\nimport * as timerender from \"./timerender\";\nimport * as user_groups from \"./user_groups\";\nimport {user_settings} from \"./user_settings\";\n\n/*\n    rendered_markdown\n\n    This module provides a single function 'update_elements' to\n    update any renamed users/streams/groups etc. and other\n    dynamic parts of our rendered messages.\n\n    Use this module wherever some Markdown rendered content\n    is being displayed.\n*/\n\nfunction get_user_id_for_mention_button(elem) {\n    const user_id_string = $(elem).attr(\"data-user-id\");\n    // Handle legacy Markdown that was rendered before we cut\n    // over to using data-user-id.\n    const email = $(elem).attr(\"data-user-email\");\n\n    if (user_id_string === \"*\" || email === \"*\") {\n        return \"*\";\n    }\n\n    if (user_id_string) {\n        return Number.parseInt(user_id_string, 10);\n    }\n\n    if (email) {\n        // Will return undefined if there's no match\n        const user = people.get_by_email(email);\n        if (user) {\n            return user.user_id;\n        }\n    }\n    return undefined;\n}\n\nfunction get_user_group_id_for_mention_button(elem) {\n    const user_group_id = $(elem).attr(\"data-user-group-id\");\n\n    if (user_group_id) {\n        return Number.parseInt(user_group_id, 10);\n    }\n\n    return undefined;\n}\n\n// Helper function to update a mentioned user's name.\nexport function set_name_in_mention_element(element, name) {\n    if ($(element).hasClass(\"silent\")) {\n        $(element).text(name);\n    } else {\n        $(element).text(\"@\" + name);\n    }\n}\n\nexport const update_elements = (content) => {\n    // Set the rtl class if the text has an rtl direction\n    if (rtl.get_direction(content.text()) === \"rtl\") {\n        content.addClass(\"rtl\");\n    }\n\n    content.find(\".user-mention\").each(function () {\n        const user_id = get_user_id_for_mention_button(this);\n        // We give special highlights to the mention buttons\n        // that refer to the current user.\n        if (user_id === \"*\" || people.is_my_user_id(user_id)) {\n            // Either a wildcard mention or us, so mark it.\n            $(this).addClass(\"user-mention-me\");\n        }\n        if (user_id && user_id !== \"*\" && !$(this).find(\".highlight\").length) {\n            // If it's a mention of a specific user, edit the\n            // mention text to show the user's current name,\n            // assuming that you're not searching for text\n            // inside the highlight.\n            const person = people.get_by_user_id(user_id, true);\n            if (person !== undefined) {\n                // Note that person might be undefined in some\n                // unpleasant corner cases involving data import.\n                set_name_in_mention_element(this, person.full_name);\n            }\n        }\n    });\n\n    content.find(\".user-group-mention\").each(function () {\n        const user_group_id = get_user_group_id_for_mention_button(this);\n        let user_group;\n        try {\n            user_group = user_groups.get_user_group_from_id(user_group_id);\n        } catch {\n            // This is a user group the current user doesn't have\n            // data on.  This can happen when user groups are\n            // deleted.\n            blueslip.info(\"Rendered unexpected user group \" + user_group_id);\n            return;\n        }\n\n        const my_user_id = people.my_current_user_id();\n        // Mark user group you're a member of.\n        if (user_groups.is_member_of(user_group_id, my_user_id)) {\n            $(this).addClass(\"user-mention-me\");\n        }\n\n        if (user_group_id && !$(this).find(\".highlight\").length) {\n            // Edit the mention to show the current name for the\n            // user group, if its not in search.\n            set_name_in_mention_element(this, user_group.name);\n        }\n    });\n\n    content.find(\"a.stream\").each(function () {\n        const stream_id = Number.parseInt($(this).attr(\"data-stream-id\"), 10);\n        if (stream_id && !$(this).find(\".highlight\").length) {\n            // Display the current name for stream if it is not\n            // being displayed in search highlight.\n            const stream_name = stream_data.maybe_get_stream_name(stream_id);\n            if (stream_name !== undefined) {\n                // If the stream has been deleted,\n                // stream_data.maybe_get_stream_name might return\n                // undefined.  Otherwise, display the current stream name.\n                $(this).text(\"#\" + stream_name);\n            }\n        }\n    });\n\n    content.find(\"a.stream-topic\").each(function () {\n        const stream_id = Number.parseInt($(this).attr(\"data-stream-id\"), 10);\n        if (stream_id && !$(this).find(\".highlight\").length) {\n            // Display the current name for stream if it is not\n            // being displayed in search highlight.\n            const stream_name = stream_data.maybe_get_stream_name(stream_id);\n            if (stream_name !== undefined) {\n                // If the stream has been deleted,\n                // stream_data.maybe_get_stream_name might return\n                // undefined.  Otherwise, display the current stream name.\n                const text = $(this).text();\n                $(this).text(\"#\" + stream_name + text.slice(text.indexOf(\" > \")));\n            }\n        }\n    });\n\n    content.find(\"time\").each(function () {\n        // Populate each timestamp span with mentioned time\n        // in user's local time zone.\n        const time_str = $(this).attr(\"datetime\");\n        if (time_str === undefined) {\n            return;\n        }\n\n        const timestamp = parseISO(time_str);\n        if (isValid(timestamp)) {\n            const text = $(this).text();\n            const rendered_time = timerender.render_markdown_timestamp(timestamp, text);\n            const rendered_timestamp = render_markdown_timestamp({\n                text: rendered_time.text,\n            });\n            $(this).html(rendered_timestamp);\n            $(this).attr(\"data-tippy-content\", rendered_time.tooltip_content);\n        } else {\n            // This shouldn't happen. If it does, we're very interested in debugging it.\n            blueslip.error(`Could not parse datetime supplied by backend: ${time_str}`);\n        }\n    });\n\n    content.find(\"span.timestamp-error\").each(function () {\n        const time_str = $(this).text().replace(\"Invalid time format: \", \"\");\n        const text = $t(\n            {defaultMessage: \"Invalid time format: {timestamp}\"},\n            {timestamp: time_str},\n        );\n        $(this).text(text);\n    });\n\n    content.find(\"div.spoiler-header\").each(function () {\n        // If a spoiler block has no header content, it should have a default header.\n        // We do this client side to allow for i18n by the client.\n        if ($(this).html().trim().length === 0) {\n            $(this).append(`<p>${$t_html({defaultMessage: \"Spoiler\"})}</p>`);\n        }\n\n        // Add the expand/collapse button to spoiler blocks\n        const toggle_button_html =\n            '<span class=\"spoiler-button\" aria-expanded=\"false\"><span class=\"spoiler-arrow\"></span></span>';\n        $(this).prepend(toggle_button_html);\n    });\n\n    // Display the view-code-in-playground and the copy-to-clipboard button inside the div.codehilite element.\n    content.find(\"div.codehilite\").each(function () {\n        const $codehilite = $(this);\n        const $pre = $codehilite.find(\"pre\");\n        const fenced_code_lang = $codehilite.data(\"code-language\");\n        if (fenced_code_lang !== undefined) {\n            const playground_info =\n                realm_playground.get_playground_info_for_languages(fenced_code_lang);\n            if (playground_info !== undefined) {\n                // If a playground is configured for this language,\n                // offer to view the code in that playground.  When\n                // there are multiple playgrounds, we display a\n                // popover listing the options.\n                let title = $t({defaultMessage: \"View in playground\"});\n                const view_in_playground_button = $(view_code_in_playground());\n                $pre.prepend(view_in_playground_button);\n                if (playground_info.length === 1) {\n                    title = $t(\n                        {defaultMessage: \"View in {playground_name}\"},\n                        {playground_name: playground_info[0].name},\n                    );\n                } else {\n                    view_in_playground_button.attr(\"aria-haspopup\", \"true\");\n                }\n                view_in_playground_button.attr(\"data-tippy-content\", title);\n                view_in_playground_button.attr(\"aria-label\", title);\n            }\n        }\n        const copy_button = $(copy_code_button());\n        $pre.prepend(copy_button);\n        new ClipboardJS(copy_button[0], {\n            text(copy_element) {\n                return $(copy_element).siblings(\"code\").text();\n            },\n        });\n    });\n\n    // Display emoji (including realm emoji) as text if\n    // user_settings.emojiset is 'text'.\n    if (user_settings.emojiset === \"text\") {\n        content.find(\".emoji\").replaceWith(function () {\n            const text = $(this).attr(\"title\");\n            return \":\" + text + \":\";\n        });\n    }\n};\n", "import {\n    differenceInCalendarDays,\n    differenceInHours,\n    differenceInMinutes,\n    format,\n    formatISO,\n    isEqual,\n    isValid,\n    parseISO,\n    startOfToday,\n} from \"date-fns\";\nimport $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport render_markdown_time_tooltip from \"../templates/markdown_time_tooltip.hbs\";\n\nimport {$t} from \"./i18n\";\nimport {user_settings} from \"./user_settings\";\n\nlet next_timerender_id = 0;\n\nexport function clear_for_testing(): void {\n    next_timerender_id = 0;\n}\n\n// Exported for tests only.\nexport function get_tz_with_UTC_offset(time: number | Date): string {\n    const tz_offset = format(time, \"xxx\");\n    let timezone = new Intl.DateTimeFormat(undefined, {timeZoneName: \"short\"})\n        .formatToParts(time)\n        .find(({type}) => type === \"timeZoneName\")?.value;\n\n    if (timezone === \"UTC\") {\n        return \"UTC\";\n    }\n\n    // When user's locale doesn't match their time zone (eg. en_US for IST),\n    // we get `timezone` in the format of'GMT+x:y. We don't want to\n    // show that along with (UTC+x:y)\n    timezone = /GMT[+-][\\d:]*/.test(timezone ?? \"\") ? \"\" : timezone;\n\n    const tz_UTC_offset = `(UTC${tz_offset})`;\n\n    if (timezone) {\n        return timezone + \" \" + tz_UTC_offset;\n    }\n    return tz_UTC_offset;\n}\n\n// Given a Date object 'time', returns an object:\n// {\n//      time_str:        a string for the current human-formatted version\n//      formal_time_str: a string for the current formally formatted version\n//                          e.g. \"Monday, April 15, 2017\"\n//      needs_update:    a boolean for if it will need to be updated when the\n//                       day changes\n// }\nexport type TimeRender = {\n    time_str: string;\n    formal_time_str: string;\n    needs_update: boolean;\n};\n\nexport function render_now(time: Date, today = new Date()): TimeRender {\n    let time_str = \"\";\n    let needs_update = false;\n    // render formal time to be used for tippy tooltip\n    // \"\\xa0\" is U+00A0 NO-BREAK SPACE.\n    // Can't use &nbsp; as that represents the literal string \"&nbsp;\".\n    const formal_time_str = format(time, \"EEEE,\\u00A0MMMM\\u00A0d,\\u00A0yyyy\");\n\n    // How many days old is 'time'? 0 = today, 1 = yesterday, 7 = a\n    // week ago, -1 = tomorrow, etc.\n\n    // Presumably the result of diffDays will be an integer in this\n    // case, but round it to be sure before comparing to integer\n    // constants.\n    const days_old = differenceInCalendarDays(today, time);\n\n    if (days_old === 0) {\n        time_str = $t({defaultMessage: \"Today\"});\n        needs_update = true;\n    } else if (days_old === 1) {\n        time_str = $t({defaultMessage: \"Yesterday\"});\n        needs_update = true;\n    } else if (time.getFullYear() !== today.getFullYear()) {\n        // For long running servers, searching backlog can get ambiguous\n        // without a year stamp. Only show year if message is from an older year\n        time_str = format(time, \"MMM\\u00A0dd,\\u00A0yyyy\");\n        needs_update = false;\n    } else {\n        // For now, if we get a message from tomorrow, we don't bother\n        // rewriting the timestamp when it gets to be tomorrow.\n        time_str = format(time, \"MMM\\u00A0dd\");\n        needs_update = false;\n    }\n    return {\n        time_str,\n        formal_time_str,\n        needs_update,\n    };\n}\n\n// Current date is passed as an argument for unit testing\nexport function last_seen_status_from_date(\n    last_active_date: Date,\n    current_date = new Date(),\n): string {\n    const minutes = differenceInMinutes(current_date, last_active_date);\n    if (minutes <= 2) {\n        return $t({defaultMessage: \"Just now\"});\n    }\n    if (minutes < 60) {\n        return $t({defaultMessage: \"{minutes} minutes ago\"}, {minutes});\n    }\n\n    const days_old = differenceInCalendarDays(current_date, last_active_date);\n    const hours = Math.floor(minutes / 60);\n\n    if (hours < 24) {\n        if (hours === 1) {\n            return $t({defaultMessage: \"An hour ago\"});\n        }\n        return $t({defaultMessage: \"{hours} hours ago\"}, {hours});\n    }\n\n    if (days_old === 1) {\n        return $t({defaultMessage: \"Yesterday\"});\n    }\n\n    if (days_old < 90) {\n        return $t({defaultMessage: \"{days_old} days ago\"}, {days_old});\n    } else if (\n        days_old > 90 &&\n        days_old < 365 &&\n        last_active_date.getFullYear() === current_date.getFullYear()\n    ) {\n        // Online more than 90 days ago, in the same year\n        return $t(\n            {defaultMessage: \"{last_active_date}\"},\n            {last_active_date: format(last_active_date, \"MMM\\u00A0dd\")},\n        );\n    }\n    return $t(\n        {defaultMessage: \"{last_active_date}\"},\n        {last_active_date: format(last_active_date, \"MMM\\u00A0dd,\\u00A0yyyy\")},\n    );\n}\n\n// List of the dates that need to be updated when the day changes.\n// Each timestamp is represented as a list of length 2:\n//   [id of the span element, Date representing the time]\ntype UpdateEntry = {\n    needs_update: boolean;\n    className: string;\n    time: Date;\n    time_above?: Date;\n};\nlet update_list: UpdateEntry[] = [];\n\n// The time at the beginning of the day, when the timestamps were updated.\n// Represented as a Date with hour, minute, second, millisecond 0.\nlet last_update: Date;\n\nexport function initialize(): void {\n    last_update = startOfToday();\n}\n\n// time_above is an optional argument, to support dates that look like:\n// --- \u25b2 Yesterday \u25b2 ------ \u25bc Today \u25bc ---\nfunction maybe_add_update_list_entry(entry: UpdateEntry): void {\n    if (entry.needs_update) {\n        update_list.push(entry);\n    }\n}\n\nfunction render_date_span(\n    elem: JQuery,\n    rendered_time: TimeRender,\n    rendered_time_above?: TimeRender,\n): JQuery {\n    elem.text(\"\");\n    if (rendered_time_above !== undefined) {\n        elem.append(\n            '<i class=\"date-direction fa fa-caret-up\"></i>',\n            _.escape(rendered_time_above.time_str),\n            '<hr class=\"date-line\">',\n            '<i class=\"date-direction fa fa-caret-down\"></i>',\n            _.escape(rendered_time.time_str),\n        );\n        return elem;\n    }\n    elem.append(_.escape(rendered_time.time_str));\n    return elem.attr(\"data-tippy-content\", rendered_time.formal_time_str);\n}\n\n// Given an Date object 'time', return a DOM node that initially\n// displays the human-formatted date, and is updated automatically as\n// necessary (e.g. changing \"Today\" to \"Yesterday\" to \"Jul 1\").\n// If two dates are given, it renders them as:\n// --- \u25b2 Yesterday \u25b2 ------ \u25bc Today \u25bc ---\n\n// (What's actually spliced into the message template is the contents\n// of this DOM node as HTML, so effectively a copy of the node. That's\n// okay since to update the time later we look up the node by its id.)\nexport function render_date(time: Date, time_above: Date | undefined, today: Date): JQuery {\n    const className = `timerender${next_timerender_id}`;\n    next_timerender_id += 1;\n    const rendered_time = render_now(time, today);\n    let node = $(\"<span />\").attr(\"class\", className);\n    if (time_above !== undefined) {\n        const rendered_time_above = render_now(time_above, today);\n        node = render_date_span(node, rendered_time, rendered_time_above);\n    } else {\n        node = render_date_span(node, rendered_time);\n    }\n    maybe_add_update_list_entry({\n        needs_update: rendered_time.needs_update,\n        className,\n        time,\n        time_above,\n    });\n    return node;\n}\n\n// Renders the timestamp returned by the <time:> Markdown syntax.\nexport function render_markdown_timestamp(time: number | Date): {\n    text: string;\n    tooltip_content: string;\n} {\n    const hourformat = user_settings.twenty_four_hour_time ? \"HH:mm\" : \"h:mm a\";\n    const timestring = format(time, \"E, MMM d yyyy, \" + hourformat);\n\n    const tz_offset_str = get_tz_with_UTC_offset(time);\n    const tooltip_html_content = render_markdown_time_tooltip({tz_offset_str});\n\n    return {\n        text: timestring,\n        tooltip_content: tooltip_html_content,\n    };\n}\n\n// This isn't expected to be called externally except manually for\n// testing purposes.\nexport function update_timestamps(): void {\n    const today = startOfToday();\n    if (!isEqual(today, last_update)) {\n        const to_process = update_list;\n        update_list = [];\n\n        for (const entry of to_process) {\n            const className = entry.className;\n            const elements = $(`.${CSS.escape(className)}`);\n            // The element might not exist any more (because it\n            // was in the zfilt table, or because we added\n            // messages above it and re-collapsed).\n            if (elements.length > 0) {\n                const time = entry.time;\n                const time_above = entry.time_above;\n                const rendered_time = render_now(time, today);\n                const rendered_time_above = time_above ? render_now(time_above, today) : undefined;\n                for (const element of elements) {\n                    render_date_span($(element), rendered_time, rendered_time_above);\n                }\n                maybe_add_update_list_entry({\n                    needs_update: rendered_time.needs_update,\n                    className,\n                    time,\n                    time_above,\n                });\n            }\n        }\n\n        last_update = today;\n    }\n}\n\nsetInterval(update_timestamps, 60 * 1000);\n\n// Transform a Unix timestamp into a ISO 8601 formatted date string.\n//   Example: 1978-10-31T13:37:42Z\nexport function get_full_time(timestamp: number): string {\n    return formatISO(timestamp * 1000);\n}\n\nexport function get_timestamp_for_flatpickr(timestring: string): Date {\n    let timestamp;\n    try {\n        // If there's already a valid time in the compose box,\n        // we use it to initialize the flatpickr instance.\n        timestamp = parseISO(timestring);\n    } finally {\n        // Otherwise, default to showing the current time.\n        if (!timestamp || !isValid(timestamp)) {\n            timestamp = new Date();\n        }\n    }\n    return timestamp;\n}\n\nexport function stringify_time(time: number | Date): string {\n    if (user_settings.twenty_four_hour_time) {\n        return format(time, \"HH:mm\");\n    }\n    return format(time, \"h:mm a\");\n}\n\nexport function format_time_modern(time: number | Date, today = new Date()): String {\n    const hours = differenceInHours(today, time);\n    const days_old = differenceInCalendarDays(today, time);\n\n    if (time > today) {\n        /* For timestamps in the future, we always show the year*/\n        return format(time, \"MMM\\u00A0dd,\\u00A0yyyy\");\n    } else if (hours < 24) {\n        return stringify_time(time);\n    } else if (days_old === 1) {\n        return $t({defaultMessage: \"Yesterday\"});\n    } else if (days_old < 7) {\n        return format(time, \"EEEE\");\n    } else if (days_old <= 180) {\n        return format(time, \"MMM\\u00A0dd\");\n    }\n\n    return format(time, \"MMM\\u00A0dd,\\u00A0yyyy\");\n}\n\n// this is for rendering absolute time based off the preferences for twenty-four\n// hour time in the format of \"%mmm %d, %h:%m %p\".\nexport function absolute_time(timestamp: number, today = new Date()): string {\n    const date = new Date(timestamp);\n    const is_older_year = today.getFullYear() - date.getFullYear() > 0;\n    const H_24 = user_settings.twenty_four_hour_time;\n\n    return format(\n        date,\n        is_older_year\n            ? H_24\n                ? \"MMM d, yyyy HH:mm\"\n                : \"MMM d, yyyy hh:mm a\"\n            : H_24\n            ? \"MMM d HH:mm\"\n            : \"MMM d hh:mm a\",\n    );\n}\n\nexport function get_full_datetime(time: Date): string {\n    const time_options: Intl.DateTimeFormatOptions = {timeStyle: \"medium\"};\n\n    if (user_settings.twenty_four_hour_time) {\n        time_options.hourCycle = \"h24\";\n    }\n\n    const date_string = time.toLocaleDateString();\n    let time_string = time.toLocaleTimeString(undefined, time_options);\n\n    const tz_offset_str = get_tz_with_UTC_offset(time);\n\n    time_string = time_string + \" \" + tz_offset_str;\n\n    return $t({defaultMessage: \"{date} at {time}\"}, {date: date_string, time: time_string});\n}\n", "import $ from \"jquery\";\nimport tippy, {delegate} from \"tippy.js\";\n\nimport {$t} from \"./i18n\";\nimport * as message_lists from \"./message_lists\";\nimport * as popover_menus from \"./popover_menus\";\nimport * as reactions from \"./reactions\";\nimport * as rows from \"./rows\";\nimport * as timerender from \"./timerender\";\n\n// We override the defaults set by tippy library here,\n// so make sure to check this too after checking tippyjs\n// documentation for default properties.\ntippy.setDefaultProps({\n    // We don't want tooltips\n    // to take more space than\n    // mobile widths ever.\n    maxWidth: 300,\n\n    // Some delay to showing / hiding the tooltip makes\n    // it look less forced and more natural.\n    delay: [100, 20],\n    placement: \"top\",\n\n    // disable animations to make the\n    // tooltips feel snappy\n    animation: false,\n\n    // Show tooltips on long press on touch based\n    // devices.\n    touch: [\"hold\", 750],\n\n    // This has the side effect of some properties of parent applying to\n    // tooltips.\n    appendTo: \"parent\",\n\n    // html content is not supported by default\n    // enable it by passing data-tippy-allowHtml=\"true\"\n    // in the tag or a parameter.\n});\n\nexport function initialize() {\n    // Our default tooltip configuration. For this, one simply needs to:\n    // * Set `class=\"tippy-zulip-tooltip\"` on an element for enable this.\n    // * Set `data-tippy-content=\"{{t 'Tooltip content' }}\"`, often\n    //   replacing a `title` attribute on an element that had both.\n    // * Set placement; we typically use `data-tippy-placement=\"top\"`.\n    delegate(\"body\", {\n        target: \".tippy-zulip-tooltip\",\n    });\n\n    // The below definitions are for specific tooltips that require\n    // custom JavaScript code or configuration.  Note that since the\n    // below specify the target directly, elements using those should\n    // not have the tippy-zulip-tooltip class.\n\n    // message reaction tooltip showing who reacted.\n    let observer;\n    delegate(\"body\", {\n        target: \".message_reaction, .message_reactions .reaction_button\",\n        placement: \"bottom\",\n        onShow(instance) {\n            const elem = $(instance.reference);\n            if (!instance.reference.classList.contains(\"reaction_button\")) {\n                const local_id = elem.attr(\"data-reaction-id\");\n                const message_id = rows.get_message_id(instance.reference);\n                const title = reactions.get_reaction_title_data(message_id, local_id);\n                instance.setContent(title);\n            }\n\n            // Use MutationObserver to check for removal of nodes on which tooltips\n            // are still active.\n            // We target the message table and check for removal of it, it's children\n            // and the reactions individually down in the subtree.\n            const target_node = elem.parents(\".message_table.focused_table\").get(0);\n            if (!target_node) {\n                // The `reaction` was removed from DOM before we reached here.\n                // In that case, we simply hide the tooltip.\n                // We have to be smart about hiding the instance, so we hide it as soon\n                // as it is displayed.\n                setTimeout(instance.hide, 0);\n                return;\n            }\n\n            const nodes_to_check_for_removal = [\n                elem.parents(\".recipient_row\").get(0),\n                elem.parents(\".message_reactions\").get(0),\n                elem.get(0),\n            ];\n            const config = {attributes: false, childList: true, subtree: true};\n\n            const callback = function (mutationsList) {\n                for (const mutation of mutationsList) {\n                    for (const node of nodes_to_check_for_removal) {\n                        // Hide instance if reference is in the removed node list.\n                        if (Array.prototype.includes.call(mutation.removedNodes, node)) {\n                            instance.hide();\n                        }\n                    }\n                }\n            };\n            observer = new MutationObserver(callback);\n            observer.observe(target_node, config);\n        },\n        onHidden(instance) {\n            instance.destroy();\n            if (observer) {\n                observer.disconnect();\n            }\n        },\n        appendTo: () => document.body,\n    });\n\n    delegate(\"body\", {\n        target: \".compose_control_button\",\n        // Add some additional delay when they open\n        // so that regular users don't have to see\n        // them unless they want to.\n        delay: [300, 20],\n        // This ensures that the upload files tooltip\n        // doesn't hide behind the left sidebar.\n        appendTo: () => document.body,\n    });\n\n    delegate(\"body\", {\n        target: \".message_control_button\",\n        // This ensures that the tooltip doesn't\n        // hide by the selected message blue border.\n        appendTo: () => document.body,\n        // Add some additional delay when they open\n        // so that regular users don't have to see\n        // them unless they want to.\n        delay: [300, 20],\n        onShow(instance) {\n            // Handle dynamic \"starred messages\" and \"edit\" widgets.\n            const elem = $(instance.reference);\n            let content = elem.attr(\"data-tippy-content\");\n            if (content === undefined) {\n                // Tippy cannot get the content for message edit button\n                // as it is dynamically inserted based on editability.\n                // So, we have to manually get the i element to get the\n                // content from it.\n                //\n                // TODO: Change the template structure so logic is unnecessary.\n                const edit_button = elem.find(\"i.edit_content_button\");\n                content = edit_button.attr(\"data-tippy-content\");\n            }\n\n            instance.setContent(content);\n            return true;\n        },\n    });\n\n    $(\"body\").on(\"blur\", \".message_control_button\", (e) => {\n        // Remove tooltip when user is trying to tab through all the icons.\n        // If user tabs slowly, tooltips are displayed otherwise they are\n        // destroyed before they can be displayed.\n        e.currentTarget._tippy.destroy();\n    });\n\n    delegate(\"body\", {\n        target: \".message_table .message_time\",\n        appendTo: () => document.body,\n        onShow(instance) {\n            const time_elem = $(instance.reference);\n            const row = time_elem.closest(\".message_row\");\n            const message = message_lists.current.get(rows.id(row));\n            const time = new Date(message.timestamp * 1000);\n            instance.setContent(timerender.get_full_datetime(time));\n        },\n        onHidden(instance) {\n            instance.destroy();\n        },\n    });\n\n    delegate(\"body\", {\n        target: \".recipient_row_date > span\",\n        appendTo: () => document.body,\n        onHidden(instance) {\n            instance.destroy();\n        },\n    });\n\n    // In case of recipient bar icons, following change\n    // ensures that tooltip doesn't hide behind the message\n    // box or it is not limited by the parent container.\n    delegate(\"body\", {\n        target: [\n            \".recipient_bar_icon\",\n            \".sidebar-title\",\n            \"#user_filter_icon\",\n            \"#scroll-to-bottom-button-clickable-area\",\n        ],\n        appendTo: () => document.body,\n    });\n\n    delegate(\"body\", {\n        target: [\n            \".rendered_markdown time\",\n            \".rendered_markdown .copy_codeblock\",\n            \"#compose_top_right [data-tippy-content]\",\n        ],\n        allowHTML: true,\n        appendTo: () => document.body,\n        onHidden(instance) {\n            instance.destroy();\n        },\n    });\n\n    delegate(\"body\", {\n        target: [\".enter_sends_true\", \".enter_sends_false\"],\n        content: $t({defaultMessage: \"Change send shortcut\"}),\n        onShow() {\n            // Don't show tooltip if the popover is displayed.\n            if (popover_menus.compose_enter_sends_popover_displayed) {\n                return false;\n            }\n            return true;\n        },\n        appendTo: () => document.body,\n    });\n}\n", "import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport generated_emoji_codes from \"../generated/emoji/emoji_codes.json\";\nimport generated_pygments_data from \"../generated/pygments_data.json\";\nimport * as emoji from \"../shared/js/emoji\";\nimport * as fenced_code from \"../shared/js/fenced_code\";\nimport render_compose from \"../templates/compose.hbs\";\nimport render_edit_content_button from \"../templates/edit_content_button.hbs\";\nimport render_left_sidebar from \"../templates/left_sidebar.hbs\";\nimport render_message_feed_errors from \"../templates/message_feed_errors.hbs\";\nimport render_navbar from \"../templates/navbar.hbs\";\nimport render_right_sidebar from \"../templates/right_sidebar.hbs\";\n\nimport * as about_zulip from \"./about_zulip\";\nimport * as activity from \"./activity\";\nimport * as alert_words from \"./alert_words\";\nimport * as blueslip from \"./blueslip\";\nimport * as bot_data from \"./bot_data\";\nimport * as click_handlers from \"./click_handlers\";\nimport * as common from \"./common\";\nimport * as compose from \"./compose\";\nimport * as compose_closed_ui from \"./compose_closed_ui\";\nimport * as compose_pm_pill from \"./compose_pm_pill\";\nimport * as composebox_typeahead from \"./composebox_typeahead\";\nimport * as condense from \"./condense\";\nimport * as copy_and_paste from \"./copy_and_paste\";\nimport * as dark_theme from \"./dark_theme\";\nimport * as drafts from \"./drafts\";\nimport * as echo from \"./echo\";\nimport * as emoji_picker from \"./emoji_picker\";\nimport * as emojisets from \"./emojisets\";\nimport * as gear_menu from \"./gear_menu\";\nimport * as giphy from \"./giphy\";\nimport * as hashchange from \"./hashchange\";\nimport * as hotspots from \"./hotspots\";\nimport * as i18n from \"./i18n\";\nimport * as invite from \"./invite\";\nimport * as lightbox from \"./lightbox\";\nimport * as linkifiers from \"./linkifiers\";\nimport {localstorage} from \"./localstorage\";\nimport * as markdown from \"./markdown\";\nimport * as markdown_config from \"./markdown_config\";\nimport * as message_edit from \"./message_edit\";\nimport * as message_edit_history from \"./message_edit_history\";\nimport * as message_fetch from \"./message_fetch\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_scroll from \"./message_scroll\";\nimport * as message_view_header from \"./message_view_header\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as muted_topics from \"./muted_topics\";\nimport * as muted_users from \"./muted_users\";\nimport * as navbar_alerts from \"./navbar_alerts\";\nimport * as navigate from \"./navigate\";\nimport * as notifications from \"./notifications\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as pm_conversations from \"./pm_conversations\";\nimport * as popover_menus from \"./popover_menus\";\nimport * as presence from \"./presence\";\nimport * as realm_logo from \"./realm_logo\";\nimport * as realm_playground from \"./realm_playground\";\nimport * as realm_user_settings_defaults from \"./realm_user_settings_defaults\";\nimport * as recent_topics_util from \"./recent_topics_util\";\nimport * as reload from \"./reload\";\nimport * as rendered_markdown from \"./rendered_markdown\";\nimport * as resize from \"./resize\";\nimport * as rows from \"./rows\";\nimport * as scroll_bar from \"./scroll_bar\";\nimport * as search from \"./search\";\nimport * as search_pill_widget from \"./search_pill_widget\";\nimport * as sent_messages from \"./sent_messages\";\nimport * as server_events from \"./server_events\";\nimport * as settings from \"./settings\";\nimport * as settings_data from \"./settings_data\";\nimport * as settings_display from \"./settings_display\";\nimport * as settings_notifications from \"./settings_notifications\";\nimport * as settings_panel_menu from \"./settings_panel_menu\";\nimport * as settings_realm_user_settings_defaults from \"./settings_realm_user_settings_defaults\";\nimport * as settings_sections from \"./settings_sections\";\nimport * as settings_toggle from \"./settings_toggle\";\nimport * as spoilers from \"./spoilers\";\nimport * as starred_messages from \"./starred_messages\";\nimport * as stream_bar from \"./stream_bar\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_edit from \"./stream_edit\";\nimport * as stream_edit_subscribers from \"./stream_edit_subscribers\";\nimport * as stream_list from \"./stream_list\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\nimport * as timerender from \"./timerender\";\nimport * as tippyjs from \"./tippyjs\";\nimport * as topic_list from \"./topic_list\";\nimport * as topic_zoom from \"./topic_zoom\";\nimport * as tutorial from \"./tutorial\";\nimport * as typing from \"./typing\";\nimport * as ui from \"./ui\";\nimport * as unread from \"./unread\";\nimport * as unread_ui from \"./unread_ui\";\nimport * as user_groups from \"./user_groups\";\nimport {initialize_user_settings, user_settings} from \"./user_settings\";\nimport * as user_status from \"./user_status\";\nimport * as user_status_ui from \"./user_status_ui\";\n\n// This is where most of our initialization takes place.\n// TODO: Organize it a lot better.  In particular, move bigger\n//       functions to other modules.\n\n/* We use 'visibility' rather than 'display' and jQuery's show() / hide(),\n   because we want to reserve space for the email address.  This avoids\n   things jumping around slightly when the email address is shown. */\n\nlet current_message_hover;\nfunction message_unhover() {\n    if (current_message_hover === undefined) {\n        return;\n    }\n    current_message_hover.find(\"span.edit_content\").html(\"\");\n    current_message_hover = undefined;\n}\n\nfunction message_hover(message_row) {\n    const id = rows.id(message_row);\n    if (current_message_hover && rows.id(current_message_hover) === id) {\n        return;\n    }\n\n    const message = message_lists.current.get(rows.id(message_row));\n    message_unhover();\n    current_message_hover = message_row;\n\n    // Locally echoed messages have !is_topic_editable and thus go\n    // through this code path.\n    if (!message_edit.is_topic_editable(message)) {\n        // The actions and reactions icon hover logic is handled entirely by CSS\n        return;\n    }\n\n    // But the message edit hover icon is determined by whether the message is still editable\n    const is_message_editable =\n        message_edit.get_editability(message) === message_edit.editability_types.FULL;\n    const args = {\n        is_editable: is_message_editable && !message.status_message,\n        msg_id: id,\n    };\n    message_row.find(\".edit_content\").html(render_edit_content_button(args));\n}\n\nfunction initialize_left_sidebar() {\n    const rendered_sidebar = render_left_sidebar({\n        is_guest: page_params.is_guest,\n    });\n\n    $(\"#left-sidebar-container\").html(rendered_sidebar);\n}\n\nfunction initialize_right_sidebar() {\n    const rendered_sidebar = render_right_sidebar({\n        can_invite_others_to_realm: settings_data.user_can_invite_others_to_realm(),\n        realm_description: page_params.realm_description,\n    });\n\n    $(\"#right-sidebar-container\").html(rendered_sidebar);\n    if (page_params.is_spectator) {\n        rendered_markdown.update_elements(\n            $(\".right-sidebar .realm-description .rendered_markdown\"),\n        );\n    }\n\n    $(\"#user_presences\").on(\"mouseenter\", \".user_sidebar_entry\", (e) => {\n        const status_emoji = $(e.target).closest(\".user_sidebar_entry\").find(\"img.status_emoji\");\n        if (status_emoji.length) {\n            const animated_url = status_emoji.data(\"animated-url\");\n            if (animated_url) {\n                status_emoji.attr(\"src\", animated_url);\n            }\n        }\n    });\n\n    $(\"#user_presences\").on(\"mouseleave\", \".user_sidebar_entry\", (e) => {\n        const status_emoji = $(e.target).closest(\".user_sidebar_entry\").find(\"img.status_emoji\");\n        if (status_emoji.length) {\n            const still_url = status_emoji.data(\"still-url\");\n            if (still_url) {\n                status_emoji.attr(\"src\", still_url);\n            }\n        }\n    });\n}\n\nfunction initialize_navbar() {\n    const rendered_navbar = render_navbar({\n        embedded: page_params.narrow_stream !== undefined,\n        search_pills_enabled: page_params.search_pills_enabled,\n    });\n\n    $(\"#navbar-container\").html(rendered_navbar);\n}\n\nfunction initialize_compose_box() {\n    $(\"#compose-container\").append(\n        render_compose({\n            embedded: $(\"#compose\").attr(\"data-embedded\") === \"\",\n            file_upload_enabled: page_params.max_file_upload_size_mib > 0,\n            giphy_enabled: giphy.is_giphy_enabled(),\n            scroll_to_bottom_key: common.has_mac_keyboard()\n                ? \"Fn + <span class='tooltip_right_arrow'>\u2192</span>\"\n                : \"End\",\n        }),\n    );\n    $(`.enter_sends_${user_settings.enter_sends}`).show();\n    common.adjust_mac_shortcuts(\".enter_sends kbd\");\n}\n\nfunction initialize_message_feed_errors() {\n    $(\"#message_feed_errors_container\").html(render_message_feed_errors());\n}\n\nexport function initialize_kitchen_sink_stuff() {\n    // TODO:\n    //      This function is a historical dumping ground\n    //      for lots of miscellaneous setup.  Almost all of\n    //      the code here can probably be moved to more\n    //      specific-purpose modules like message_viewport.js.\n\n    const throttled_mousewheelhandler = _.throttle((e, delta) => {\n        // Most of the mouse wheel's work will be handled by the\n        // scroll handler, but when we're at the top or bottom of the\n        // page, the pointer may still need to move.\n\n        if (delta < 0 && message_viewport.at_top()) {\n            navigate.up();\n        } else if (delta > 0 && message_viewport.at_bottom()) {\n            navigate.down();\n        }\n\n        message_viewport.set_last_movement_direction(delta);\n    }, 50);\n\n    message_viewport.message_pane.on(\"wheel\", (e) => {\n        const delta = e.originalEvent.deltaY;\n        if (!overlays.is_active() && !recent_topics_util.is_visible()) {\n            // In the message view, we use a throttled mousewheel handler.\n            throttled_mousewheelhandler(e, delta);\n        }\n        // If in a modal, we neither handle the event nor\n        // preventDefault, allowing the modal to scroll normally.\n    });\n\n    $(window).on(\"resize\", _.throttle(resize.handler, 50));\n\n    // Scrolling in overlays. input boxes, and other elements that\n    // explicitly scroll should not scroll the main view.  Stop\n    // propagation in all cases.  Also, ignore the event if the\n    // element is already at the top or bottom.  Otherwise we get a\n    // new scroll event on the parent (?).\n    $(\".modal-body, .scrolling_list, input, textarea\").on(\"wheel\", function (e) {\n        const self = ui.get_scroll_element($(this));\n        const scroll = self.scrollTop();\n        const delta = e.originalEvent.deltaY;\n\n        // The -1 fudge factor is important here due to rounding errors.  Better\n        // to err on the side of not scrolling.\n        const max_scroll = self.prop(\"scrollHeight\") - self.innerHeight() - 1;\n\n        e.stopPropagation();\n        if ((delta < 0 && scroll <= 0) || (delta > 0 && scroll >= max_scroll)) {\n            e.preventDefault();\n        }\n    });\n\n    // Ignore wheel events in the compose area which weren't already handled above.\n    $(\"#compose\").on(\"wheel\", (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    // A little hackish, because it doesn't seem to totally get us the\n    // exact right width for the floating_recipient_bar and compose\n    // box, but, close enough for now.\n    resize.handler();\n\n    if (page_params.is_spectator) {\n        $(\"body\").addClass(\"spectator-view\");\n    }\n\n    if (!user_settings.left_side_userlist) {\n        $(\"#navbar-buttons\").addClass(\"right-userlist\");\n    }\n\n    if (user_settings.high_contrast_mode) {\n        $(\"body\").addClass(\"high-contrast\");\n    }\n\n    if (!user_settings.dense_mode) {\n        $(\"body\").addClass(\"less_dense_mode\");\n    } else {\n        $(\"body\").addClass(\"more_dense_mode\");\n    }\n\n    $(\"#main_div\").on(\"mouseover\", \".message_table .message_row\", function () {\n        const row = $(this).closest(\".message_row\");\n        message_hover(row);\n    });\n\n    $(\"#main_div\").on(\"mouseleave\", \".message_table .message_row\", () => {\n        message_unhover();\n    });\n\n    $(\"#main_div\").on(\"mouseover\", \".sender_info_hover\", function () {\n        const row = $(this).closest(\".message_row\");\n        row.addClass(\"sender_name_hovered\");\n    });\n\n    $(\"#main_div\").on(\"mouseout\", \".sender_info_hover\", function () {\n        const row = $(this).closest(\".message_row\");\n        row.removeClass(\"sender_name_hovered\");\n    });\n\n    $(\"#main_div\").on(\"mouseenter\", \".youtube-video a\", function () {\n        $(this).addClass(\"fa fa-play\");\n    });\n\n    $(\"#main_div\").on(\"mouseleave\", \".youtube-video a\", function () {\n        $(this).removeClass(\"fa fa-play\");\n    });\n\n    $(\"#main_div\").on(\"mouseenter\", \".embed-video a\", function () {\n        const elem = $(this);\n        // Set image height and css vars for play button position, if not done already\n        const setPosition = !elem.data(\"entered-before\");\n        if (setPosition) {\n            const imgW = elem.find(\"img\")[0].width;\n            const imgH = elem.find(\"img\")[0].height;\n            // Ensure height doesn't change on mouse enter\n            elem.css(\"height\", `${imgH}px`);\n            // variables to set play button position\n            const marginLeft = (imgW - 30) / 2;\n            const marginTop = (imgH - 26) / 2;\n            elem.css(\"--margin-left\", `${marginLeft}px`).css(\"--margin-top\", `${marginTop}px`);\n            elem.data(\"entered-before\", true);\n        }\n        elem.addClass(\"fa fa-play\");\n    });\n\n    $(\"#main_div\").on(\"mouseleave\", \".embed-video a\", function () {\n        $(this).removeClass(\"fa fa-play\");\n    });\n\n    $(\"#manage_streams_container\").on(\"mouseover\", \".subscription_header\", function () {\n        $(this).addClass(\"active\");\n    });\n\n    $(\"#manage_streams_container\").on(\"mouseout\", \".subscription_header\", function () {\n        $(this).removeClass(\"active\");\n    });\n\n    $(\"#stream_message_recipient_stream\").on(\"change\", function () {\n        stream_bar.decorate(this.value, $(\"#stream-message .message_header_stream\"), true);\n    });\n\n    $(window).on(\"blur\", () => {\n        $(document.body).addClass(\"window_blurred\");\n    });\n\n    $(window).on(\"focus\", () => {\n        $(document.body).removeClass(\"window_blurred\");\n    });\n\n    $(document).on(\"message_selected.zulip\", (event) => {\n        if (message_lists.current !== event.msg_list) {\n            return;\n        }\n        if (event.id === -1) {\n            // If the message list is empty, don't do anything\n            return;\n        }\n        const row = event.msg_list.get_row(event.id);\n        $(\".selected_message\").removeClass(\"selected_message\");\n        row.addClass(\"selected_message\");\n\n        if (event.then_scroll) {\n            if (row.length === 0) {\n                const row_from_dom = message_lists.current.get_row(event.id);\n                const messages = event.msg_list.all_messages();\n                blueslip.debug(\"message_selected missing selected row\", {\n                    previously_selected_id: event.previously_selected_id,\n                    selected_id: event.id,\n                    selected_idx: event.msg_list.selected_idx(),\n                    selected_idx_exact: messages.indexOf(event.msg_list.get(event.id)),\n                    render_start: event.msg_list.view._render_win_start,\n                    render_end: event.msg_list.view._render_win_end,\n                    selected_id_from_idx: messages[event.msg_list.selected_idx()].id,\n                    msg_list_sorted: _.isEqual(\n                        messages.map((message) => message.id),\n                        message_lists.current\n                            .all_messages()\n                            .map((message) => message.id)\n                            .sort(),\n                    ),\n                    found_in_dom: row_from_dom.length,\n                });\n            }\n            if (event.target_scroll_offset !== undefined) {\n                message_lists.current.view.set_message_offset(event.target_scroll_offset);\n            } else {\n                // Scroll to place the message within the current view;\n                // but if this is the initial placement of the pointer,\n                // just place it in the very center\n                message_viewport.recenter_view(row, {\n                    from_scroll: event.from_scroll,\n                    force_center: event.previously_selected_id === -1,\n                });\n            }\n        }\n    });\n\n    $(\"body\").on(\"mouseover\", \".message_edit_content\", function () {\n        $(this).closest(\".message_row\").find(\".copy_message\").show();\n    });\n\n    $(\"body\").on(\"mouseout\", \".message_edit_content\", function () {\n        $(this).closest(\".message_row\").find(\".copy_message\").hide();\n    });\n\n    $(\"body\").on(\"mouseenter\", \".copy_message\", function () {\n        $(this).show();\n    });\n\n    if (!page_params.realm_allow_message_editing) {\n        $(\"#edit-message-hotkey-help\").hide();\n    }\n\n    if (page_params.realm_presence_disabled) {\n        $(\"#user-list\").hide();\n    }\n}\n\nexport function initialize_everything() {\n    /*\n        When we initialize our various modules, a lot\n        of them will consume data from the server\n        in the form of `page_params`.\n\n        The `page_params` variable is basically a\n        massive dictionary with all the information\n        that the client needs to run the app.  Here\n        are some examples of what it includes:\n\n            - all of the user's user-specific settings\n            - all realm-specific settings that are\n              pertinent to the user\n            - info about streams/subscribers on the realm\n            - realm settings\n            - info about all the other users\n            - some fairly dynamic data, like which of\n              the other users are \"present\"\n\n        Except for the actual Zulip messages, basically\n        any data that you see in the app soon after page\n        load comes from `page_params`.\n\n        ## Mostly static data\n\n        Now, we mostly leave `page_params` intact through\n        the duration of the app.  Most of the data in\n        `page_params` is fairly static in nature, and we\n        will simply update it for basic changes like\n        the following (meant as examples, not gospel):\n\n            - I changed my 24-hour time preference.\n            - The realm admin changed who can edit topics.\n            - The team's realm icon has changed.\n            - I switched from light theme to dark theme.\n\n        Especially for things that are settings-related,\n        we rarely abstract away the data from `page_params`.\n        As of this writing, over 90 modules refer directly\n        to `page_params` for some reason or another.\n\n        ## Dynamic data\n\n        Some of the data in `page_params` is either\n        more highly dynamic than settings data, or\n        has more performance requirements than\n        simple settings data, or both.  Examples\n        include:\n\n            - tracking all users (we want to have\n              multiple Maps to find users, for example)\n            - tracking all streams\n            - tracking presence data\n            - tracking user groups and bots\n            - tracking recent PMs\n\n        Using stream data as an example, we use a\n        module called `stream_data` to actually track\n        all the info about the streams that a user\n        can know about.  We populate this module\n        with data from `page_params`, but thereafter\n        `stream_data.js` \"owns\" the stream data:\n\n            - other modules should ask `stream_data`\n              for stuff (and not go to `page_params`)\n            - when server events come in, they should\n              be processed by stream_data to update\n              its own data structures\n\n        To help enforce this paradigm, we do the\n        following:\n\n            - only pass `stream_data` what it needs\n              from `page_params`\n            - delete the reference to data owned by\n              `stream_data` in `page_params` itself\n    */\n\n    function pop_fields(...fields) {\n        const result = {};\n\n        for (const field of fields) {\n            result[field] = page_params[field];\n            delete page_params[field];\n        }\n\n        return result;\n    }\n\n    const alert_words_params = pop_fields(\"alert_words\");\n\n    const emoji_params = pop_fields(\"realm_emoji\");\n\n    const bot_params = pop_fields(\"realm_bots\");\n\n    const people_params = pop_fields(\"realm_users\", \"realm_non_active_users\", \"cross_realm_bots\");\n\n    const pm_conversations_params = pop_fields(\"recent_private_conversations\");\n\n    const presence_params = pop_fields(\"presences\", \"server_timestamp\");\n\n    const stream_data_params = pop_fields(\n        \"subscriptions\",\n        \"unsubscribed\",\n        \"never_subscribed\",\n        \"realm_default_streams\",\n    );\n\n    const user_groups_params = pop_fields(\"realm_user_groups\");\n\n    const user_status_params = pop_fields(\"user_status\");\n    const i18n_params = pop_fields(\"language_list\");\n    const user_settings_params = pop_fields(\"user_settings\");\n    const realm_settings_defaults_params = pop_fields(\"realm_user_settings_defaults\");\n\n    if (page_params.is_spectator) {\n        const ls = localstorage();\n        const preferred_theme = ls.get(\"spectator-theme-preference\");\n        if (preferred_theme === \"dark\") {\n            dark_theme.enable();\n        } else if (preferred_theme === \"light\") {\n            dark_theme.disable();\n        }\n    }\n\n    i18n.initialize(i18n_params);\n    tippyjs.initialize();\n    popover_menus.initialize();\n\n    initialize_user_settings(user_settings_params);\n    realm_user_settings_defaults.initialize(realm_settings_defaults_params);\n    people.initialize(page_params.user_id, people_params);\n\n    let date_joined;\n    if (!page_params.is_spectator) {\n        const user = people.get_by_user_id(page_params.user_id);\n        date_joined = user.date_joined;\n    } else {\n        // Spectators don't have an account, so we just prevent their\n        // date_joined is now.\n        date_joined = new Date();\n    }\n\n    settings_data.initialize(date_joined);\n\n    // The emoji module must be initialized before the right sidebar\n    // module, so that we can display custom emoji in statuses.\n    emoji.initialize({\n        realm_emoji: emoji_params.realm_emoji,\n        emoji_codes: generated_emoji_codes,\n    });\n\n    // These components must be initialized early, because other\n    // modules' initialization has not been audited for whether they\n    // expect DOM elements to always exist (As that did before these\n    // modules were migrated from Django templates to handlebars).\n    initialize_left_sidebar();\n    initialize_right_sidebar();\n    initialize_compose_box();\n    settings.initialize();\n    initialize_navbar();\n    initialize_message_feed_errors();\n    realm_logo.render();\n\n    message_lists.initialize();\n    alert_words.initialize(alert_words_params);\n    emojisets.initialize();\n    scroll_bar.initialize();\n    message_viewport.initialize();\n    navbar_alerts.initialize();\n    compose_closed_ui.initialize();\n    initialize_kitchen_sink_stuff();\n    echo.initialize();\n    stream_edit.initialize();\n    stream_edit_subscribers.initialize();\n    stream_data.initialize(stream_data_params);\n    pm_conversations.recent.initialize(pm_conversations_params);\n    muted_topics.initialize();\n    muted_users.initialize();\n    stream_settings_ui.initialize();\n    stream_list.initialize();\n    condense.initialize();\n    spoilers.initialize();\n    lightbox.initialize();\n    click_handlers.initialize();\n    copy_and_paste.initialize();\n    overlays.initialize();\n    invite.initialize();\n    timerender.initialize();\n    message_view_header.initialize();\n    server_events.initialize();\n    user_status.initialize(user_status_params);\n    compose_pm_pill.initialize();\n    search_pill_widget.initialize();\n    reload.initialize();\n    user_groups.initialize(user_groups_params);\n    unread.initialize();\n    bot_data.initialize(bot_params); // Must happen after people.initialize()\n    message_fetch.initialize(server_events.home_view_loaded);\n    message_scroll.initialize();\n    markdown.initialize(markdown_config.get_helpers());\n    linkifiers.initialize(page_params.realm_linkifiers);\n    realm_playground.initialize(page_params.realm_playgrounds, generated_pygments_data);\n    compose.initialize();\n    composebox_typeahead.initialize(); // Must happen after compose.initialize()\n    search.initialize();\n    tutorial.initialize();\n    notifications.initialize();\n    gear_menu.initialize();\n    giphy.initialize();\n    presence.initialize(presence_params);\n    settings_display.initialize();\n    settings_notifications.initialize();\n    settings_realm_user_settings_defaults.initialize();\n    settings_panel_menu.initialize();\n    settings_sections.initialize();\n    settings_toggle.initialize();\n    about_zulip.initialize();\n\n    // All overlays must be initialized before hashchange.js\n    hashchange.initialize();\n    unread_ui.initialize();\n    activity.initialize();\n    emoji_picker.initialize();\n    topic_list.initialize();\n    topic_zoom.initialize();\n    drafts.initialize();\n    sent_messages.initialize();\n    hotspots.initialize();\n    ui.initialize();\n    typing.initialize();\n    starred_messages.initialize();\n    user_status_ui.initialize();\n    fenced_code.initialize(generated_pygments_data);\n    message_edit_history.initialize();\n}\n\n$(() => {\n    blueslip.measure_time(\"initialize_everything\", () => {\n        initialize_everything();\n    });\n});\n", "<div id=\"compose-content\">\n    {{!-- scroll to bottom button is not part of compose but\n    helps us align it at various screens sizes with\n    minimal css and no JS. We keep it `position: absolute` to prevent\n    it changing compose box layout in any way. --}}\n    <div id=\"scroll-to-bottom-button-container\">\n        <div id=\"scroll-to-bottom-button-clickable-area\"  data-tippy-content=\"{{t 'Scroll to bottom' }}  <span class='hotkey-hint'>({{scroll_to_bottom_key}})</span>\" data-tippy-allowHtml=\"true\">\n            <div id=\"scroll-to-bottom-button\">\n                <i class=\"fa fa-chevron-down\"></i>\n            </div>\n        </div>\n    </div>\n    <div id=\"compose_controls\" class=\"new-style\">\n        <div id=\"compose_buttons\">\n            <span class=\"new_message_button reply_button_container\">\n                <button type=\"button\" class=\"button small rounded compose_reply_button\"\n                  id=\"left_bar_compose_reply_button_big\"\n                  title=\"{{t 'Reply to selected message' }} (r)\">\n                    <span class=\"compose_reply_button_label\">{{t 'Compose message' }}</span>\n                </button>\n            </span>\n            <span class=\"new_message_button mobile_button_container\">\n                <button type=\"button\" class=\"button small rounded compose_mobile_button\"\n                  id=\"left_bar_compose_mobile_button_big\"\n                  title=\"{{t 'New message' }} (c)\">\n                    <span>+</span>\n                </button>\n            </span>\n            <span class=\"new_message_button stream_button_container\">\n                <button type=\"button\" class=\"button small rounded compose_stream_button\"\n                  id=\"left_bar_compose_stream_button_big\"\n                  title=\"{{t 'New topic' }} (c)\">\n                    <span class=\"compose_stream_button_label\">{{t 'New topic' }}</span>\n                </button>\n            </span>\n            {{#unless embedded }}\n            <span class=\"new_message_button private_button_container\">\n                <button type=\"button\" class=\"button small rounded compose_private_button\"\n                  id=\"left_bar_compose_private_button_big\"\n                  title=\"{{t 'New private message' }} (x)\">\n                    <span class=\"compose_private_button_label\">{{t 'New private message' }}</span>\n                </button>\n            </span>\n            {{/unless}}\n            <span class=\"new_message_button only-visible-for-spectators\">\n                <a class=\"no-underline button small rounded float-left\" href=\"/login\">\n                    {{t 'Log in to send messages' }}\n                </a>\n            </span>\n        </div>\n    </div>\n    <div class=\"message_comp\">\n        <div class=\"alert\" id=\"compose-send-status\">\n            <span class=\"compose-send-status-close\">&times;</span>\n            <span id=\"compose-error-msg\"></span>\n        </div>\n        <div id=\"compose_resolved_topic\" class=\"alert home-error-bar\"></div>\n        <div id=\"compose_invite_users\" class=\"alert home-error-bar\"></div>\n        <div id=\"compose-all-everyone\" class=\"alert home-error-bar\"></div>\n        <div id=\"compose-announce\" class=\"alert home-error-bar\"></div>\n        <div id=\"compose_not_subscribed\" class=\"alert home-error-bar\"></div>\n        <div id=\"compose_private_stream_alert\" class=\"alert home-error-bar\"></div>\n        <div id=\"out-of-view-notification\" class=\"notification-alert\"></div>\n        <div class=\"composition-area\">\n            <form id=\"send_message_form\" action=\"/json/messages\" method=\"post\">\n                {{ csrf_input }}\n                <div class=\"compose_table\">\n                    <div id=\"compose_top\">\n                        <div id=\"compose_top_right\" class=\"order-2\">\n                            <button type=\"button\" class=\"expand_composebox_button fa fa-angle-up\" aria-label=\"{{t 'Expand compose' }}\" data-tippy-content=\"{{t 'Expand compose' }}\"></button>\n                            <button type=\"button\" class=\"collapse_composebox_button fa fa-angle-down\" aria-label=\"{{t 'Collapse compose' }}\" data-tippy-content=\"{{t 'Collapse compose' }}\"></button>\n                            <button type=\"button\" class=\"close\" id='compose_close' data-tippy-content=\"{{t 'Cancel compose' }}  <span class='hotkey-hint'>(Esc)</span>\">&times;</button>\n                        </div>\n                        <div id=\"stream-message\" class=\"order-1\">\n                            <div class=\"stream-selection-header-colorblock message_header_stream left_part\" tab-index=\"-1\"></div>\n                            <div class=\"right_part\">\n                                <span id=\"compose-lock-icon\">\n                                    <i class=\"fa fa-lock\" title=\"{{t 'This is a private stream' }}\" aria-hidden=\"true\"></i>\n                                </span>\n                                <span id=\"compose-globe-icon\">\n                                    <i class=\"zulip-icon zulip-icon-globe\" title=\"{{t 'This is a web-public stream' }}\" aria-hidden=\"true\"></i>\n                                </span>\n                                <input type=\"text\" class=\"recipient_box\" name=\"stream_message_recipient_stream\" id=\"stream_message_recipient_stream\" maxlength=\"30\" value=\"\" placeholder=\"{{t 'Stream' }}\" autocomplete=\"off\" tabindex=\"0\" aria-label=\"{{t 'Stream' }}\" />\n                                <i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i>\n                                <input type=\"text\" class=\"recipient_box\" name=\"stream_message_recipient_topic\" id=\"stream_message_recipient_topic\" maxlength=\"60\" value=\"\" placeholder=\"{{t 'Topic' }}\" autocomplete=\"off\" tabindex=\"0\" aria-label=\"{{t 'Topic' }}\" />\n                            </div>\n                        </div>\n                        <div id=\"private-message\" class=\"order-1\">\n                            <div class=\"to_text\">\n                                <span>{{t 'To' }}:</span>\n                            </div>\n                            <div class=\"right_part\">\n                                <div class=\"pm_recipient\">\n                                    <div class=\"pill-container\" data-before=\"{{t 'You and' }}\">\n                                        <div class=\"input\" contenteditable=\"true\" id=\"private_message_recipient\" data-no-recipients-text=\"{{t 'Add one or more users' }}\" data-some-recipients-text=\"{{t 'Add another user...' }}\"></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"messagebox-wrapper\">\n                        <div class=\"messagebox\">\n                            <textarea class=\"new_message_textarea\" name=\"content\" id='compose-textarea' placeholder=\"{{t 'Compose your message here' }}\" tabindex=\"0\" aria-label=\"{{t 'Compose your message here...' }}\"></textarea>\n                            <div class=\"scrolling_list preview_message_area\" data-simplebar id=\"preview_message_area\" style=\"display:none;\">\n                                <div class=\"markdown_preview_spinner\"></div>\n                                <div class=\"preview_content rendered_markdown\"></div>\n                            </div>\n                            <div class=\"drag\"></div>\n                            <div id=\"below-compose-content\">\n                                <div class=\"compose_bottom_top_container\">\n                                    <div class=\"compose_right_float_container order-3\">\n                                        <button type=\"submit\" id=\"compose-send-button\" class=\"button small send_message animated-purple-button\" title=\"{{t 'Send' }} (Ctrl + Enter)\">\n                                            <img class=\"loader\" alt=\"\" src=\"\" />\n                                            <span>{{t 'Send' }}</span>\n                                        </button>\n                                    </div>\n                                    {{> compose_control_buttons }}\n                                </div>\n                                <div class=\"compose_bottom_bottom_container\">\n                                    <span id=\"compose_limit_indicator\"></span>\n                                    <div class=\"enter_sends\">\n                                        <span class=\"enter_sends_true\">\n                                            {{#tr}}\n                                                <z-shortcut></z-shortcut> to send\n                                                {{#*inline \"z-shortcut\"}}<kbd>Enter</kbd>{{/inline}}\n                                            {{/tr}}\n                                        </span>\n                                        <span class=\"enter_sends_false\">\n                                            {{#tr}}\n                                                <z-shortcut></z-shortcut> to send\n                                                {{#*inline \"z-shortcut\"}}<kbd>Ctrl</kbd>+<kbd>Enter</kbd>{{/inline}}\n                                            {{/tr}}\n                                        </span>\n                                        <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n", "<div class=\"compose_control_buttons_container order-1\">\n    <input type=\"file\" class=\"file_input notvisible pull-left\" multiple />\n    {{#if file_upload_enabled }}\n    <a role=\"button\" class=\"compose_control_button compose_upload_file fa fa-paperclip notdisplayed\" aria-label=\"{{t 'Upload files' }}\" tabindex=0 data-tippy-content=\"{{t 'Upload files' }}\"></a>\n    {{/if}}\n    <a role=\"button\" class=\"markdown_preview compose_control_button fa fa-eye\" aria-label=\"{{t 'Preview' }}\" tabindex=0 data-tippy-content=\"{{t 'Preview' }}\"></a>\n    <a role=\"button\" class=\"undo_markdown_preview compose_control_button fa fa-edit\" aria-label=\"{{t 'Write' }}\" tabindex=0 style=\"display:none;\" data-tippy-content=\"{{t 'Write' }}\"></a>\n    <a role=\"button\" class=\"compose_control_button fa fa-video-camera video_link\" aria-label=\"{{t 'Add video call' }}\" tabindex=0 data-tippy-content=\"{{t 'Add video call' }}\"></a>\n    <a role=\"button\" class=\"compose_control_button fa fa-smile-o emoji_map\" aria-label=\"{{t 'Add emoji' }}\" tabindex=0 data-tippy-content=\"{{t 'Add emoji' }}\"></a>\n    <a role=\"button\" class=\"compose_control_button fa fa-clock-o time_pick\" aria-label=\"{{t 'Add global time' }}\" tabindex=0 data-tippy-content=\"{{t 'Add global time<br />Everyone sees global times in their own time zone.' }}\" data-tippy-maxWidth=\"none\" data-tippy-allowHtml=\"true\"></a>\n    <a role=\"button\" class=\"compose_control_button compose_gif_icon {{#unless giphy_enabled }} hide {{/unless}} zulip-icon zulip-icon-gif\" aria-label=\"{{t 'Add GIF' }}\" tabindex=0 data-tippy-content=\"{{t 'Add GIF' }}\"></a>\n    <div class=\"divider hide-sm\">|</div>\n    <div class=\"{{#if message_id}}hide-lg{{else}}hide-sm{{/if}}\">\n        {{> compose_control_buttons_in_popover}}\n    </div>\n    <a role=\"button\" class=\"compose_control_button compose_draft_button hide-sm\" tabindex=0 href=\"#drafts\" data-tippy-content=\"{{t 'Drafts' }}\">\n        {{t 'Drafts' }}\n    </a>\n    <div class=\"compose_control_menu_wrapper\">\n        <a class=\"compose_control_button zulip-icon zulip-icon-ellipsis-v-solid hide {{#if message_id}}show-lg{{else}}show-sm{{/if}} compose_control_menu\" tabindex=0 data-tippy-content=\"Compose actions\"></a>\n    </div>\n</div>\n", "<tr id=\"recent_topic:{{topic_key}}\" {{#if unread_count}}class=\"unread_topic\"{{/if}} data-unread-count=\"{{unread_count}}\" data-muted=\"{{muted}}\" data-participated=\"{{participated}}\">\n    <td class=\"recent_topic_stream\">\n        <div class=\"recent_topics_focusable\">\n            <span id=\"stream_sidebar_privacy_swatch_{{stream_id}}\" class=\"stream-privacy filter-icon\" style=\"color: {{stream_color}}\">\n                {{> stream_privacy }}\n            </span>\n            <a href=\"{{stream_url}}\">{{stream}}</a>\n        </div>\n    </td>\n    <td class=\"recent_topic_name\">\n        <div class=\"flex_container\">\n            <div class=\"left_part recent_topics_focusable\">\n                <a href=\"{{topic_url}}\">{{topic}}</a>\n            </div>\n            <div class=\"right_part\">\n                {{#if unread_count}}<span class=\"unread_count\">{{unread_count}}</span>{{/if}}\n                <div class=\"recent_topic_actions\">\n                    <div class=\"recent_topics_focusable hidden-for-spectators\">\n                        {{#if topic_muted}}\n                        <i class=\"fa fa-bell-slash on_hover_topic_unmute recipient_bar_icon tippy-zulip-tooltip\" data-stream-id=\"{{stream_id}}\" data-topic-name=\"{{topic}}\" data-tippy-content=\"{{t 'Unmute topic' }}\" role=\"button\" tabindex=\"0\" aria-label=\"{{t 'Unmute topic' }}\"></i>\n                        {{else}}\n                        <i class=\"fa fa-bell-slash on_hover_topic_mute recipient_bar_icon tippy-zulip-tooltip\" data-stream-id=\"{{stream_id}}\" data-topic-name=\"{{topic}}\" data-tippy-content=\"{{t 'Mute topic' }}\" role=\"button\" tabindex=\"0\" aria-label=\"{{t 'Mute topic' }}\"></i>\n                        {{/if}}\n                    </div>\n                    <div class=\"recent_topics_focusable hidden-for-spectators\">\n                        <i class=\"fa fa-check-circle on_hover_topic_read recipient_bar_icon tippy-zulip-tooltip\" data-stream-id=\"{{stream_id}}\" data-topic-name=\"{{topic}}\" data-tippy-content=\"{{t 'Mark as read' }}\" role=\"button\" tabindex=\"0\" aria-label=\"{{t 'Mark as read' }}\"></i>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </td>\n    <td class='recent_topic_users'>\n        <ul class=\"recent_topics_participants\">\n            {{#if other_senders_count}}\n            <li class=\"recent_topics_participant_item tippy-zulip-tooltip\" data-tippy-content=\"{{other_sender_names}}\" data-tippy-allowHtml=\"true\">\n                <span class=\"recent_topics_participant_overflow\">+{{other_senders_count}}</span>\n            </li>\n            {{/if}}\n            {{#each senders}}\n                {{#if this.is_muted}}\n                <li class=\"recent_topics_participant_item participant_profile tippy-zulip-tooltip\" data-tippy-content=\"{{t 'Muted user'}}\" data-user-id=\"{{this.user_id}}\">\n                    <span><i class=\"fa fa-user recent_topics_participant_overflow\"></i></span>\n                </li>\n                {{else}}\n                <li class=\"recent_topics_participant_item participant_profile tippy-zulip-tooltip\" data-tippy-content=\"{{this.full_name}}\" data-user-id=\"{{this.user_id}}\">\n                    <img src=\"{{this.avatar_url_small}}\" class=\"recent_topics_participant_avatar\" />\n                </li>\n                {{/if}}\n            {{/each}}\n        </ul>\n    </td>\n    <td class=\"recent_topic_timestamp\">\n        <div class=\"last_msg_time tippy-zulip-tooltip\" data-tippy-content=\"{{this.full_last_msg_date_time}}\">\n            {{ last_msg_time }}\n        </div>\n    </td>\n</tr>\n", "<div class=\"right-sidebar\" id=\"right-sidebar\" role=\"navigation\">\n    <div class=\"right-sidebar-items\">\n        <div id=\"user-list\">\n            <div id=\"userlist-header\">\n                <h4 class='sidebar-title'\n                  id='userlist-title' data-tippy-content=\"{{t 'Search people' }} (w)\">\n                    {{t 'USERS' }}\n                </h4>\n                <i id=\"user_filter_icon\" class=\"fa fa-search\"\n                  aria-hidden=\"true\" aria-label=\"{{t 'Search people' }}\"\n                  data-tippy-content=\"{{t 'Search people' }} (w)\">\n                </i>\n            </div>\n            <div class=\"input-append notdisplayed\" id=\"user_search_section\">\n                <input class=\"user-list-filter home-page-input\" type=\"text\" autocomplete=\"off\" placeholder=\"{{t 'Search people' }}\" />\n                <button type=\"button\" class=\"btn clear_search_button\" id=\"clear_search_people_button\">\n                    <i class=\"fa fa-remove\" aria-hidden=\"true\"></i>\n                </button>\n            </div>\n            <div id=\"buddy_list_wrapper\" class=\"scrolling_list\" data-simplebar>\n                <ul id=\"user_presences\" class=\"filters required-text\" data-empty=\"{{t 'No matching users.' }}\"></ul>\n                <div id=\"buddy_list_wrapper_padding\"></div>\n            </div>\n        </div>\n        <div class=\"right-sidebar-shortcuts\">\n            {{#if can_invite_others_to_realm}}\n            <a id=\"invite-user-link\" href=\"#invite\"><i class=\"fa fa-user-plus\" aria-hidden=\"true\"></i>{{t 'Invite more users' }}</a>\n            {{/if}}\n            <a id=\"sidebar-keyboard-shortcuts\" data-overlay-trigger=\"keyboard-shortcuts\" class=\"hidden-for-spectators\">\n                <i class=\"fa fa-keyboard-o fa-2x tippy-zulip-tooltip\" id=\"keyboard-icon\" data-tippy-allowHtml=\"true\" data-tippy-content=\"{{t 'Keyboard shortcuts' }} <span class='hotkey-hint'>(?)</span>\"></i>\n            </a>\n            <div class=\"only-visible-for-spectators\">\n                <div class=\"realm-description\">\n                    <div class=\"rendered_markdown\">{{rendered_markdown realm_description }}</div>\n                    <hr />\n                    <a href=\"/register\"  class=\"signup_button color_animated_button\">\n                        <i class=\"fa fa-pencil-square-o\"></i>\n                        <span>{{t 'Sign up' }}</span>\n                    </a>\n                    <a href=\"/login\" class=\"login_button color_animated_button\">\n                        <i class=\"fa fa-sign-in\"></i>\n                        <span>{{t 'Log in' }}</span>\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"], "fixing_code": ["/* Module for popovers that have been ported to the modern\n   TippyJS/Popper popover library from the legacy Bootstrap\n   popovers system in popovers.js. */\n\nimport $ from \"jquery\";\nimport {delegate} from \"tippy.js\";\n\nimport render_compose_control_buttons_popover from \"../templates/compose_control_buttons_popover.hbs\";\nimport render_compose_select_enter_behaviour_popover from \"../templates/compose_select_enter_behaviour_popover.hbs\";\nimport render_left_sidebar_stream_setting_popover from \"../templates/left_sidebar_stream_setting_popover.hbs\";\nimport render_mobile_message_buttons_popover_content from \"../templates/mobile_message_buttons_popover_content.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as common from \"./common\";\nimport * as compose_actions from \"./compose_actions\";\nimport * as giphy from \"./giphy\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as popovers from \"./popovers\";\nimport * as settings_data from \"./settings_data\";\nimport {user_settings} from \"./user_settings\";\n\nlet left_sidebar_stream_setting_popover_displayed = false;\nlet compose_mobile_button_popover_displayed = false;\nexport let compose_enter_sends_popover_displayed = false;\nlet compose_control_buttons_popover_instance;\n\nexport function get_compose_control_buttons_popover() {\n    return compose_control_buttons_popover_instance;\n}\n\nconst default_popover_props = {\n    delay: 0,\n    appendTo: () => document.body,\n    trigger: \"click\",\n    interactive: true,\n    hideOnClick: true,\n    /* The light-border TippyJS theme is a bit of a misnomer; it\n       is a popover styling similar to Bootstrap.  We've also customized\n       its CSS to support Zulip's dark theme. */\n    theme: \"light-border\",\n    touch: true,\n};\n\nexport function any_active() {\n    return (\n        left_sidebar_stream_setting_popover_displayed ||\n        compose_mobile_button_popover_displayed ||\n        compose_control_buttons_popover_instance ||\n        compose_enter_sends_popover_displayed\n    );\n}\n\nfunction on_show_prep(instance) {\n    $(instance.popper).one(\"click\", instance.hide);\n    popovers.hide_all_except_sidebars(instance);\n}\n\nexport function initialize() {\n    delegate(\"body\", {\n        ...default_popover_props,\n        target: \"#streams_inline_icon\",\n        allowHTML: true,\n        onShow(instance) {\n            const can_create_streams =\n                settings_data.user_can_create_private_streams() ||\n                settings_data.user_can_create_public_streams() ||\n                settings_data.user_can_create_web_public_streams();\n            on_show_prep(instance);\n\n            if (!can_create_streams) {\n                // If the user can't create streams, we directly\n                // navigate them to the Manage streams subscribe UI.\n                window.location.assign(\"#streams/all\");\n                // Returning false from an onShow handler cancels the show.\n                return false;\n            }\n\n            instance.setContent(render_left_sidebar_stream_setting_popover());\n            left_sidebar_stream_setting_popover_displayed = true;\n            return true;\n        },\n        onHidden() {\n            left_sidebar_stream_setting_popover_displayed = false;\n        },\n    });\n\n    // compose box buttons popover shown on mobile widths.\n    delegate(\"body\", {\n        ...default_popover_props,\n        target: \".compose_mobile_button\",\n        placement: \"top\",\n        allowHTML: true,\n        onShow(instance) {\n            on_show_prep(instance);\n            instance.setContent(\n                render_mobile_message_buttons_popover_content({\n                    is_in_private_narrow: narrow_state.narrowed_to_pms(),\n                }),\n            );\n            compose_mobile_button_popover_displayed = true;\n\n            const $popper = $(instance.popper);\n            $popper.one(\"click\", \".compose_mobile_stream_button\", () => {\n                compose_actions.start(\"stream\", {trigger: \"new topic button\"});\n            });\n            $popper.one(\"click\", \".compose_mobile_private_button\", () => {\n                compose_actions.start(\"private\");\n            });\n        },\n        onHidden(instance) {\n            // Destroy instance so that event handlers\n            // are destroyed too.\n            instance.destroy();\n            compose_mobile_button_popover_displayed = false;\n        },\n    });\n\n    // We need to hide instance manually for popover due to\n    // `$(\"body\").on(\"click\"...` method not being triggered for\n    // the elements when we do:\n    // `$(instance.popper).one(\"click\", instance.hide); in onShow.\n    // Cannot reproduce it on codepen -\n    // https://codepen.io/amanagr/pen/jOLoKVg\n    // So, probably a bug on our side.\n    delegate(\"body\", {\n        ...default_popover_props,\n        target: \".compose_control_menu_wrapper\",\n        placement: \"top\",\n        allowHTML: true,\n        onShow(instance) {\n            instance.setContent(\n                render_compose_control_buttons_popover({\n                    giphy_enabled: giphy.is_giphy_enabled(),\n                }),\n            );\n            compose_control_buttons_popover_instance = instance;\n            popovers.hide_all_except_sidebars(instance);\n        },\n        onHidden() {\n            compose_control_buttons_popover_instance = undefined;\n        },\n    });\n\n    delegate(\"body\", {\n        ...default_popover_props,\n        target: \".enter_sends\",\n        placement: \"top\",\n        allowHTML: true,\n        onShow(instance) {\n            on_show_prep(instance);\n            instance.setContent(\n                render_compose_select_enter_behaviour_popover({\n                    enter_sends_true: user_settings.enter_sends,\n                }),\n            );\n            compose_enter_sends_popover_displayed = true;\n        },\n        onMount(instance) {\n            common.adjust_mac_shortcuts(\".enter_sends_choices kbd\");\n\n            $(instance.popper).one(\"click\", \".enter_sends_choice\", (e) => {\n                let selected_behaviour = $(e.currentTarget)\n                    .find(\"input[type='radio']\")\n                    .attr(\"value\");\n                selected_behaviour = selected_behaviour === \"true\"; // Convert to bool\n                user_settings.enter_sends = selected_behaviour;\n                $(`.enter_sends_${!selected_behaviour}`).hide();\n                $(`.enter_sends_${selected_behaviour}`).show();\n\n                // Refocus in the content box so you can continue typing or\n                // press Enter to send.\n                $(\"#compose-textarea\").trigger(\"focus\");\n\n                return channel.patch({\n                    url: \"/json/settings\",\n                    idempotent: true,\n                    data: {enter_sends: selected_behaviour},\n                });\n            });\n        },\n        onHidden(instance) {\n            instance.destroy();\n            compose_enter_sends_popover_displayed = false;\n        },\n    });\n}\n", "import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport render_recent_topic_row from \"../templates/recent_topic_row.hbs\";\nimport render_recent_topics_filters from \"../templates/recent_topics_filters.hbs\";\nimport render_recent_topics_body from \"../templates/recent_topics_table.hbs\";\n\nimport * as compose_closed_ui from \"./compose_closed_ui\";\nimport * as hash_util from \"./hash_util\";\nimport {$t} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport * as loading from \"./loading\";\nimport {localstorage} from \"./localstorage\";\nimport * as message_store from \"./message_store\";\nimport * as message_util from \"./message_util\";\nimport * as message_view_header from \"./message_view_header\";\nimport * as muted_topics from \"./muted_topics\";\nimport * as narrow from \"./narrow\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as navbar_alerts from \"./navbar_alerts\";\nimport * as navigate from \"./navigate\";\nimport * as people from \"./people\";\nimport * as recent_senders from \"./recent_senders\";\nimport {get, process_message, topics} from \"./recent_topics_data\";\nimport {get_topic_key, is_in_focus, is_visible, set_visible} from \"./recent_topics_util\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_list from \"./stream_list\";\nimport * as sub_store from \"./sub_store\";\nimport * as timerender from \"./timerender\";\nimport * as top_left_corner from \"./top_left_corner\";\nimport * as unread from \"./unread\";\n\nlet topics_widget;\n// Sets the number of avatars to display.\n// Rest of the avatars, if present, are displayed as {+x}\nconst MAX_AVATAR = 4;\nconst MAX_EXTRA_SENDERS = 10;\n\n// Use this to set the focused element.\n//\n// We set it's value to `table` in case the\n// focus in one of the table rows, since the\n// table rows are constantly updated and tracking\n// the selected element in them would be tedious via\n// jquery.\n//\n// So, we use table as a grid system and\n// track the coordinates of the focus element via\n// `row_focus` and `col_focus`.\nexport let current_focus_elem = \"table\";\n\n// If user clicks a topic in recent topics, then\n// we store that topic here so that we can restore focus\n// to that topic when user revisits.\nlet last_visited_topic = \"\";\nlet row_focus = 0;\n// Start focus on the topic column, so Down+Enter works to visit a topic.\nlet col_focus = 1;\n\nexport const COLUMNS = {\n    stream: 0,\n    topic: 1,\n    mute: 2,\n    read: 3,\n};\n\n// The number of selectable actions in a recent_topics.  Used to\n// implement wraparound of elements with the right/left keys.  Must be\n// increased when we add new actions, or rethought if we add optional\n// actions that only appear in some rows.\nconst MAX_SELECTABLE_COLS = 4;\n\n// we use localstorage to persist the recent topic filters\nconst ls_key = \"recent_topic_filters\";\nconst ls = localstorage();\n\nlet filters = new Set();\n\nexport function clear_for_tests() {\n    filters.clear();\n    topics.clear();\n    topics_widget = undefined;\n}\n\nexport function save_filters() {\n    ls.set(ls_key, Array.from(filters));\n}\n\nexport function load_filters() {\n    filters = new Set(ls.get(ls_key));\n}\n\nexport function set_default_focus() {\n    // If at any point we are confused about the currently\n    // focused element, we switch focus to search.\n    current_focus_elem = $(\"#recent_topics_search\");\n    current_focus_elem.trigger(\"focus\");\n    compose_closed_ui.set_standard_text_for_reply_button();\n}\n\nfunction get_min_load_count(already_rendered_count, load_count) {\n    const extra_rows_for_viewing_pleasure = 15;\n    if (row_focus > already_rendered_count + load_count) {\n        return row_focus + extra_rows_for_viewing_pleasure - already_rendered_count;\n    }\n    return load_count;\n}\n\nfunction is_table_focused() {\n    return current_focus_elem === \"table\";\n}\n\nfunction set_table_focus(row, col, using_keyboard) {\n    const topic_rows = $(\"#recent_topics_table table tbody tr\");\n    if (topic_rows.length === 0 || row < 0 || row >= topic_rows.length) {\n        row_focus = 0;\n        // return focus back to filters if we cannot focus on the table.\n        set_default_focus();\n        return true;\n    }\n\n    const topic_row = topic_rows.eq(row);\n    // We need to allow table to render first before setting focus.\n    setTimeout(\n        () => topic_row.find(\".recent_topics_focusable\").eq(col).children().trigger(\"focus\"),\n        0,\n    );\n    current_focus_elem = \"table\";\n\n    if (using_keyboard) {\n        const scroll_element = document.querySelector(\n            \"#recent_topics_table .table_fix_head .simplebar-content-wrapper\",\n        );\n        const half_height_of_visible_area = scroll_element.offsetHeight / 2;\n        const topic_offset = topic_offset_to_visible_area(topic_row);\n\n        if (topic_offset === \"above\") {\n            scroll_element.scrollBy({top: -1 * half_height_of_visible_area});\n        } else if (topic_offset === \"below\") {\n            scroll_element.scrollBy({top: half_height_of_visible_area});\n        }\n    }\n\n    const message = {\n        stream: topic_row.find(\".recent_topic_stream a\").text(),\n        topic: topic_row.find(\".recent_topic_name a\").text(),\n    };\n    compose_closed_ui.update_reply_recipient_label(message);\n    return true;\n}\n\nexport function get_focused_row_message() {\n    if (is_table_focused()) {\n        const recent_topic_id_prefix_len = \"recent_topic:\".length;\n        const topic_rows = $(\"#recent_topics_table table tbody tr\");\n        if (topic_rows.length === 0) {\n            return undefined;\n        }\n\n        const topic_row = topic_rows.eq(row_focus);\n        const topic_id = topic_row.attr(\"id\").slice(recent_topic_id_prefix_len);\n        const topic_last_msg_id = topics.get(topic_id).last_msg_id;\n        return message_store.get(topic_last_msg_id);\n    }\n    return undefined;\n}\n\nexport function revive_current_focus() {\n    // After re-render, the current_focus_elem is no longer linked\n    // to the focused element, this function attempts to revive the\n    // link and focus to the element prior to the rerender.\n\n    // We try to avoid setting focus when user\n    // is not focused on recent topics.\n    if (!is_in_focus()) {\n        return false;\n    }\n\n    if (!current_focus_elem) {\n        set_default_focus();\n        return false;\n    }\n\n    if (is_table_focused()) {\n        if (last_visited_topic) {\n            const topic_last_msg_id = topics.get(last_visited_topic).last_msg_id;\n            const current_list = topics_widget.get_current_list();\n            const last_visited_topic_index = current_list.findIndex(\n                (topic) => topic.last_msg_id === topic_last_msg_id,\n            );\n            if (last_visited_topic_index >= 0) {\n                row_focus = last_visited_topic_index;\n            }\n            last_visited_topic = \"\";\n        }\n\n        set_table_focus(row_focus, col_focus);\n        return true;\n    }\n\n    const filter_button = current_focus_elem.data(\"filter\");\n    if (!filter_button) {\n        set_default_focus();\n    } else {\n        current_focus_elem = $(\"#recent_topics_filter_buttons\").find(\n            `[data-filter='${CSS.escape(filter_button)}']`,\n        );\n        current_focus_elem.trigger(\"focus\");\n    }\n    return true;\n}\n\nexport function show_loading_indicator() {\n    loading.make_indicator($(\"#recent_topics_loading_messages_indicator\"));\n}\n\nexport function hide_loading_indicator() {\n    $(\"#recent_topics_bottom_whitespace\").hide();\n    loading.destroy_indicator($(\"#recent_topics_loading_messages_indicator\"), {\n        abs_positioned: false,\n    });\n    // Show empty table text if there are no messages fetched.\n    $(\"#recent_topics_table tbody\").addClass(\"required-text\");\n}\n\nexport function process_messages(messages) {\n    // While this is inexpensive and handles all the cases itself,\n    // the UX can be bad if user wants to scroll down the list as\n    // the UI will be returned to the beginning of the list on every\n    // update.\n    //\n    // Only rerender if topic_data actually\n    // changed.\n    let topic_data_changed = false;\n    for (const msg of messages) {\n        if (process_message(msg)) {\n            topic_data_changed = true;\n        }\n    }\n\n    if (topic_data_changed) {\n        complete_rerender();\n    }\n}\n\nfunction format_topic(topic_data) {\n    const last_msg = message_store.get(topic_data.last_msg_id);\n    const stream = last_msg.stream;\n    const stream_id = last_msg.stream_id;\n    const stream_info = sub_store.get(stream_id);\n    if (stream_info === undefined) {\n        // stream was deleted\n        return {};\n    }\n    const topic = last_msg.topic;\n    const time = new Date(last_msg.timestamp * 1000);\n    const last_msg_time = timerender.format_time_modern(time);\n    const full_datetime = timerender.get_full_datetime(time);\n\n    // We hide the row according to filters or if it's muted.\n    // We only supply the data to the topic rows and let jquery\n    // display / hide them according to filters instead of\n    // doing complete re-render.\n    const topic_muted = Boolean(muted_topics.is_topic_muted(stream_id, topic));\n    const stream_muted = stream_data.is_muted(stream_id);\n    const muted = topic_muted || stream_muted;\n    const unread_count = unread.num_unread_for_topic(stream_id, topic);\n\n    // Display in most recent sender first order\n    const all_senders = recent_senders.get_topic_recent_senders(stream_id, topic);\n    const senders = all_senders.slice(-MAX_AVATAR);\n    const senders_info = people.sender_info_for_recent_topics_row(senders);\n\n    // Collect extra senders fullname for tooltip.\n    const extra_sender_ids = all_senders.slice(0, -MAX_AVATAR);\n    const displayed_other_senders = extra_sender_ids.slice(-MAX_EXTRA_SENDERS);\n    const displayed_other_names = people.get_display_full_names(displayed_other_senders.reverse());\n\n    if (extra_sender_ids.length > MAX_EXTRA_SENDERS) {\n        // We display only 10 extra senders in tooltips,\n        // and just display remaining number of senders.\n        const remaining_senders = extra_sender_ids.length - MAX_EXTRA_SENDERS;\n        // Pluralization syntax from:\n        // https://formatjs.io/docs/core-concepts/icu-syntax/#plural-format\n        displayed_other_names.push(\n            $t(\n                {\n                    defaultMessage:\n                        \"and {remaining_senders, plural, one {1 other} other {# others}}.\",\n                },\n                {remaining_senders},\n            ),\n        );\n    }\n    const other_sender_names_html = displayed_other_names\n        .map((name) => _.escape(name))\n        .join(\"<br />\");\n\n    return {\n        // stream info\n        stream_id,\n        stream,\n        stream_color: stream_info.color,\n        invite_only: stream_info.invite_only,\n        is_web_public: stream_info.is_web_public,\n        stream_url: hash_util.by_stream_uri(stream_id),\n\n        topic,\n        topic_key: get_topic_key(stream_id, topic),\n        unread_count,\n        last_msg_time,\n        topic_url: hash_util.by_stream_topic_uri(stream_id, topic),\n        senders: senders_info,\n        other_senders_count: Math.max(0, all_senders.length - MAX_AVATAR),\n        other_sender_names_html,\n        muted,\n        topic_muted,\n        participated: topic_data.participated,\n        full_last_msg_date_time: full_datetime,\n    };\n}\n\nfunction get_topic_row(topic_data) {\n    const msg = message_store.get(topic_data.last_msg_id);\n    const topic_key = get_topic_key(msg.stream_id, msg.topic);\n    return $(`#${CSS.escape(\"recent_topic:\" + topic_key)}`);\n}\n\nexport function process_topic_edit(old_stream_id, old_topic, new_topic, new_stream_id) {\n    // See `recent_senders.process_topic_edit` for\n    // logic behind this and important notes on use of this function.\n    topics.delete(get_topic_key(old_stream_id, old_topic));\n\n    const old_topic_msgs = message_util.get_messages_in_topic(old_stream_id, old_topic);\n    process_messages(old_topic_msgs);\n\n    new_stream_id = new_stream_id || old_stream_id;\n    const new_topic_msgs = message_util.get_messages_in_topic(new_stream_id, new_topic);\n    process_messages(new_topic_msgs);\n}\n\nexport function topic_in_search_results(keyword, stream, topic) {\n    if (keyword === \"\") {\n        return true;\n    }\n    const text = (stream + \" \" + topic).toLowerCase();\n    const search_words = keyword.toLowerCase().split(/\\s+/);\n    return search_words.every((word) => text.includes(word));\n}\n\nexport function update_topics_of_deleted_message_ids(message_ids) {\n    const topics_to_rerender = message_util.get_topics_for_message_ids(message_ids);\n\n    for (const [stream_id, topic] of topics_to_rerender.values()) {\n        topics.delete(get_topic_key(stream_id, topic));\n        const msgs = message_util.get_messages_in_topic(stream_id, topic);\n        process_messages(msgs);\n    }\n}\n\nexport function filters_should_hide_topic(topic_data) {\n    const msg = message_store.get(topic_data.last_msg_id);\n    const sub = sub_store.get(msg.stream_id);\n\n    if (sub === undefined || !sub.subscribed) {\n        // Never try to process deactivated & unsubscribed stream msgs.\n        return true;\n    }\n\n    if (filters.has(\"unread\")) {\n        const unreadCount = unread.num_unread_for_topic(msg.stream_id, msg.topic);\n        if (unreadCount === 0) {\n            return true;\n        }\n    }\n\n    if (!topic_data.participated && filters.has(\"participated\")) {\n        return true;\n    }\n\n    if (!filters.has(\"include_muted\")) {\n        const topic_muted = Boolean(muted_topics.is_topic_muted(msg.stream_id, msg.topic));\n        const stream_muted = stream_data.is_muted(msg.stream_id);\n        if (topic_muted || stream_muted) {\n            return true;\n        }\n    }\n\n    const search_keyword = $(\"#recent_topics_search\").val();\n    if (!topic_in_search_results(search_keyword, msg.stream, msg.topic)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function inplace_rerender(topic_key) {\n    if (!is_visible()) {\n        return false;\n    }\n    if (!topics.has(topic_key)) {\n        return false;\n    }\n\n    const topic_data = topics.get(topic_key);\n    topics_widget.render_item(topic_data);\n    const topic_row = get_topic_row(topic_data);\n\n    if (filters_should_hide_topic(topic_data)) {\n        topic_row.hide();\n    } else {\n        topic_row.show();\n    }\n    revive_current_focus();\n    return true;\n}\n\nexport function update_topic_is_muted(stream_id, topic) {\n    const key = get_topic_key(stream_id, topic);\n    if (!topics.has(key)) {\n        // we receive mute request for a topic we are\n        // not tracking currently\n        return false;\n    }\n\n    inplace_rerender(key);\n    return true;\n}\n\nexport function update_topic_unread_count(message) {\n    const topic_key = get_topic_key(message.stream_id, message.topic);\n    inplace_rerender(topic_key);\n}\n\nexport function set_filter(filter) {\n    // This function updates the `filters` variable\n    // after user clicks on one of the filter buttons\n    // based on `btn-recent-selected` class and current\n    // set `filters`.\n\n    // Get the button which was clicked.\n    const filter_elem = $(\"#recent_topics_filter_buttons\").find(\n        `[data-filter=\"${CSS.escape(filter)}\"]`,\n    );\n\n    // If user clicks `All`, we clear all filters.\n    if (filter === \"all\" && filters.size !== 0) {\n        filters = new Set();\n        // If the button was already selected, remove the filter.\n    } else if (filter_elem.hasClass(\"btn-recent-selected\")) {\n        filters.delete(filter);\n        // If the button was not selected, we add the filter.\n    } else {\n        filters.add(filter);\n    }\n\n    save_filters();\n}\n\nfunction show_selected_filters() {\n    // Add `btn-selected-filter` to the buttons to show\n    // which filters are applied.\n    if (filters.size === 0) {\n        $(\"#recent_topics_filter_buttons\")\n            .find('[data-filter=\"all\"]')\n            .addClass(\"btn-recent-selected\")\n            .attr(\"aria-checked\", \"true\");\n    } else {\n        for (const filter of filters) {\n            $(\"#recent_topics_filter_buttons\")\n                .find(`[data-filter=\"${CSS.escape(filter)}\"]`)\n                .addClass(\"btn-recent-selected\")\n                .attr(\"aria-checked\", \"true\");\n        }\n    }\n}\n\nexport function update_filters_view() {\n    const rendered_filters = render_recent_topics_filters({\n        filter_participated: filters.has(\"participated\"),\n        filter_unread: filters.has(\"unread\"),\n        filter_muted: filters.has(\"include_muted\"),\n    });\n    $(\"#recent_filters_group\").html(rendered_filters);\n    show_selected_filters();\n\n    topics_widget.hard_redraw();\n}\n\nfunction stream_sort(a, b) {\n    const a_stream = message_store.get(a.last_msg_id).stream;\n    const b_stream = message_store.get(b.last_msg_id).stream;\n    if (a_stream > b_stream) {\n        return 1;\n    } else if (a_stream === b_stream) {\n        return 0;\n    }\n    return -1;\n}\n\nfunction topic_sort(a, b) {\n    const a_topic = message_store.get(a.last_msg_id).topic;\n    const b_topic = message_store.get(b.last_msg_id).topic;\n    if (a_topic > b_topic) {\n        return 1;\n    } else if (a_topic === b_topic) {\n        return 0;\n    }\n    return -1;\n}\n\nfunction topic_offset_to_visible_area(topic_row) {\n    const scroll_container = $(\"#recent_topics_table .table_fix_head\");\n    const thead_height = 30;\n    const under_closed_compose_region_height = 50;\n\n    const scroll_container_top = $(scroll_container).offset().top + thead_height;\n    const scroll_container_bottom =\n        scroll_container_top + $(scroll_container).height() - under_closed_compose_region_height;\n\n    const topic_row_top = $(topic_row).offset().top;\n    const topic_row_bottom = topic_row_top + $(topic_row).height();\n\n    // Topic is above the visible scroll region.\n    if (topic_row_top < scroll_container_top) {\n        return \"above\";\n        // Topic is below the visible scroll region.\n    } else if (topic_row_bottom > scroll_container_bottom) {\n        return \"below\";\n    }\n\n    // Topic is visible\n    return \"visible\";\n}\n\nfunction set_focus_to_element_in_center() {\n    const table_wrapper_element = document.querySelector(\"#recent_topics_table .table_fix_head\");\n    const topic_rows = $(\"#recent_topics_table table tbody tr\");\n\n    if (row_focus > topic_rows.length) {\n        // User used a filter which reduced\n        // the number of visible rows.\n        return;\n    }\n    let topic_row = topic_rows.eq(row_focus);\n    const topic_offset = topic_offset_to_visible_area(topic_row);\n    if (topic_offset !== \"visible\") {\n        // Get the element at the center of the table.\n        const position = table_wrapper_element.getBoundingClientRect();\n        const topic_center_x = (position.left + position.right) / 2;\n        const topic_center_y = (position.top + position.bottom) / 2;\n\n        topic_row = $(document.elementFromPoint(topic_center_x, topic_center_y)).closest(\"tr\");\n\n        row_focus = topic_rows.index(topic_row);\n        set_table_focus(row_focus, col_focus);\n    }\n}\n\nfunction is_scroll_position_for_render(scroll_container) {\n    const table_bottom_margin = 100; // Extra margin at the bottom of table.\n    const table_row_height = 50;\n    return (\n        scroll_container.scrollTop +\n            scroll_container.clientHeight +\n            table_bottom_margin +\n            table_row_height >\n        scroll_container.scrollHeight\n    );\n}\n\nexport function complete_rerender() {\n    if (!is_visible()) {\n        return;\n    }\n\n    // Update header\n    load_filters();\n    show_selected_filters();\n\n    // Show topics list\n    const mapped_topic_values = Array.from(get().values()).map((value) => value);\n\n    if (topics_widget) {\n        topics_widget.replace_list_data(mapped_topic_values);\n        return;\n    }\n\n    const rendered_body = render_recent_topics_body({\n        filter_participated: filters.has(\"participated\"),\n        filter_unread: filters.has(\"unread\"),\n        filter_muted: filters.has(\"include_muted\"),\n        search_val: $(\"#recent_topics_search\").val() || \"\",\n    });\n    $(\"#recent_topics_table\").html(rendered_body);\n    const container = $(\"#recent_topics_table table tbody\");\n    container.empty();\n    topics_widget = ListWidget.create(container, mapped_topic_values, {\n        name: \"recent_topics_table\",\n        parent_container: $(\"#recent_topics_table\"),\n        modifier(item) {\n            return render_recent_topic_row(format_topic(item));\n        },\n        filter: {\n            // We use update_filters_view & filters_should_hide_topic to do all the\n            // filtering for us, which is called using click_handlers.\n            predicate(topic_data) {\n                return !filters_should_hide_topic(topic_data);\n            },\n        },\n        sort_fields: {\n            stream_sort,\n            topic_sort,\n        },\n        html_selector: get_topic_row,\n        simplebar_container: $(\"#recent_topics_table .table_fix_head\"),\n        callback_after_render: revive_current_focus,\n        is_scroll_position_for_render,\n        post_scroll__pre_render_callback: set_focus_to_element_in_center,\n        get_min_load_count,\n    });\n}\n\nexport function show() {\n    if (is_visible()) {\n        // If we're already visible, E.g. because the user hit Esc\n        // while already in the recent topics view, do nothing.\n        return;\n    }\n    // Hide selected elements in the left sidebar.\n    top_left_corner.narrow_to_recent_topics();\n    stream_list.handle_narrow_deactivated();\n\n    // Hide \"middle-column\" which has html for rendering\n    // a messages narrow. We hide it and show recent topics.\n    $(\"#message_feed_container\").hide();\n    $(\"#recent_topics_view\").show();\n    set_visible(true);\n    $(\"#message_view_header_underpadding\").hide();\n    $(\".header\").css(\"padding-bottom\", \"0px\");\n\n    narrow.hide_mark_as_read_turned_off_banner();\n\n    // We want to show `new stream message` instead of\n    // `new topic`, which we are already doing in this\n    // function. So, we reuse it here.\n    compose_closed_ui.update_buttons_for_recent_topics();\n\n    narrow_state.reset_current_filter();\n    narrow.set_narrow_title(\"Recent topics\");\n    message_view_header.render_title_area();\n\n    complete_rerender();\n}\n\nfunction filter_buttons() {\n    return $(\"#recent_filters_group\").children();\n}\n\nexport function hide() {\n    // On firefox (and flaky on other browsers), focus\n    // remains on the focused element even after it is hidden. We\n    // forcefully blur it so that focus returns to the visible\n    // focused element.\n    const focused_element = $(document.activeElement);\n    if ($(\"#recent_topics_view\").has(focused_element)) {\n        focused_element.trigger(\"blur\");\n    }\n\n    $(\"#message_view_header_underpadding\").show();\n    $(\"#message_feed_container\").show();\n    $(\"#recent_topics_view\").hide();\n    set_visible(false);\n\n    $(\".header\").css(\"padding-bottom\", \"10px\");\n\n    // This solves a bug with message_view_header\n    // being broken sometimes when we narrow\n    // to a filter and back to recent topics\n    // before it completely re-rerenders.\n    message_view_header.render_title_area();\n\n    // Fixes misaligned message_view and hidden\n    // floating_recipient_bar.\n    navbar_alerts.resize_app();\n\n    // This makes sure user lands on the selected message\n    // and not always at the top of the narrow.\n    navigate.plan_scroll_to_selected();\n}\n\nfunction is_focus_at_last_table_row() {\n    const topic_rows = $(\"#recent_topics_table table tbody tr\");\n    return row_focus === topic_rows.length - 1;\n}\n\nexport function focus_clicked_element(topic_row_index, col, topic_key) {\n    current_focus_elem = \"table\";\n    col_focus = col;\n    row_focus = topic_row_index;\n\n    if (col === COLUMNS.topic) {\n        last_visited_topic = topic_key;\n    }\n    // Set compose_closed_ui reply button text.  The rest of the table\n    // focus logic should be a noop.\n    set_table_focus(row_focus, col_focus);\n}\n\nexport function change_focused_element($elt, input_key) {\n    // Called from hotkeys.js; like all logic in that module,\n    // returning true will cause the caller to do\n    // preventDefault/stopPropagation; false will let the browser\n    // handle the key.\n\n    if ($elt.attr(\"id\") === \"recent_topics_search\") {\n        // Since the search box a text area, we want the browser to handle\n        // Left/Right and selection within the widget; but if the user\n        // arrows off the edges, we should move focus to the adjacent widgets..\n        const textInput = $(\"#recent_topics_search\").get(0);\n        const start = textInput.selectionStart;\n        const end = textInput.selectionEnd;\n        const text_length = textInput.value.length;\n        let is_selected = false;\n        if (end - start > 0) {\n            is_selected = true;\n        }\n\n        switch (input_key) {\n            //  Allow browser to handle all\n            //  character keypresses.\n            case \"vim_left\":\n            case \"vim_right\":\n            case \"vim_down\":\n            case \"vim_up\":\n            case \"open_recent_topics\":\n                return false;\n            case \"shift_tab\":\n                current_focus_elem = filter_buttons().last();\n                break;\n            case \"left_arrow\":\n                if (start !== 0 || is_selected) {\n                    return false;\n                }\n                current_focus_elem = filter_buttons().last();\n                break;\n            case \"tab\":\n                current_focus_elem = filter_buttons().first();\n                break;\n            case \"right_arrow\":\n                if (end !== text_length || is_selected) {\n                    return false;\n                }\n                current_focus_elem = filter_buttons().first();\n                break;\n            case \"down_arrow\":\n                set_table_focus(row_focus, col_focus);\n                return true;\n            case \"click\":\n                // Note: current_focus_elem can be different here, so we just\n                // set current_focus_elem to the input box, we don't want .trigger(\"focus\") on\n                // it since it is already focused.\n                // We only do this for search because we don't want the focus to\n                // go away from the input box when `revive_current_focus` is called\n                // on rerender when user is typing.\n                current_focus_elem = $(\"#recent_topics_search\");\n                compose_closed_ui.set_standard_text_for_reply_button();\n                return true;\n            case \"escape\":\n                if (is_table_focused()) {\n                    return false;\n                }\n                set_table_focus(row_focus, col_focus);\n                return true;\n        }\n    } else if ($elt.hasClass(\"btn-recent-filters\")) {\n        switch (input_key) {\n            case \"click\":\n                current_focus_elem = $elt;\n                return true;\n            case \"shift_tab\":\n            case \"vim_left\":\n            case \"left_arrow\":\n                if (filter_buttons().first()[0] === $elt[0]) {\n                    current_focus_elem = $(\"#recent_topics_search\");\n                } else {\n                    current_focus_elem = $elt.prev();\n                }\n                break;\n            case \"tab\":\n            case \"vim_right\":\n            case \"right_arrow\":\n                if (filter_buttons().last()[0] === $elt[0]) {\n                    current_focus_elem = $(\"#recent_topics_search\");\n                } else {\n                    current_focus_elem = $elt.next();\n                }\n                break;\n            case \"vim_down\":\n            case \"down_arrow\":\n                set_table_focus(row_focus, col_focus);\n                return true;\n            case \"escape\":\n                if (is_table_focused()) {\n                    return false;\n                }\n                set_table_focus(row_focus, col_focus);\n                return true;\n        }\n    } else if (is_table_focused()) {\n        // For arrowing around the table of topics, we implement left/right\n        // wraparound.  Going off the top or the bottom takes one\n        // to the navigation at the top (see set_table_focus).\n        switch (input_key) {\n            case \"escape\":\n                return false;\n            case \"open_recent_topics\":\n                set_default_focus();\n                return true;\n            case \"shift_tab\":\n            case \"vim_left\":\n            case \"left_arrow\":\n                col_focus -= 1;\n                if (col_focus < 0) {\n                    col_focus = MAX_SELECTABLE_COLS - 1;\n                }\n                break;\n            case \"tab\":\n            case \"vim_right\":\n            case \"right_arrow\":\n                col_focus += 1;\n                if (col_focus >= MAX_SELECTABLE_COLS) {\n                    col_focus = 0;\n                }\n                break;\n            case \"vim_down\":\n                // We stop user at last table row\n                // so that user doesn't end up in\n                // input box where it is impossible to\n                // get out of using vim_up / vim_down\n                // keys. This also blocks the user from\n                // having `jjjj` typed in the input box\n                // when continuously pressing `j`.\n                if (is_focus_at_last_table_row()) {\n                    return true;\n                }\n                row_focus += 1;\n                break;\n            case \"down_arrow\":\n                row_focus += 1;\n                break;\n            case \"vim_up\":\n                // See comment on vim_down.\n                // Similarly, blocks the user from\n                // having `kkkk` typed in the input box\n                // when continuously pressing `k`.\n                if (row_focus === 0) {\n                    return true;\n                }\n                row_focus -= 1;\n                break;\n            case \"up_arrow\":\n                row_focus -= 1;\n        }\n        set_table_focus(row_focus, col_focus, true);\n        return true;\n    }\n    if (current_focus_elem && input_key !== \"escape\") {\n        current_focus_elem.trigger(\"focus\");\n        if (current_focus_elem.hasClass(\"btn-recent-filters\")) {\n            compose_closed_ui.set_standard_text_for_reply_button();\n        }\n        return true;\n    }\n\n    return false;\n}\n", "import ClipboardJS from \"clipboard\";\nimport {isValid, parseISO} from \"date-fns\";\nimport $ from \"jquery\";\n\nimport copy_code_button from \"../templates/copy_code_button.hbs\";\nimport render_markdown_timestamp from \"../templates/markdown_timestamp.hbs\";\nimport view_code_in_playground from \"../templates/view_code_in_playground.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as people from \"./people\";\nimport * as realm_playground from \"./realm_playground\";\nimport * as rtl from \"./rtl\";\nimport * as stream_data from \"./stream_data\";\nimport * as timerender from \"./timerender\";\nimport * as user_groups from \"./user_groups\";\nimport {user_settings} from \"./user_settings\";\n\n/*\n    rendered_markdown\n\n    This module provides a single function 'update_elements' to\n    update any renamed users/streams/groups etc. and other\n    dynamic parts of our rendered messages.\n\n    Use this module wherever some Markdown rendered content\n    is being displayed.\n*/\n\nfunction get_user_id_for_mention_button(elem) {\n    const user_id_string = $(elem).attr(\"data-user-id\");\n    // Handle legacy Markdown that was rendered before we cut\n    // over to using data-user-id.\n    const email = $(elem).attr(\"data-user-email\");\n\n    if (user_id_string === \"*\" || email === \"*\") {\n        return \"*\";\n    }\n\n    if (user_id_string) {\n        return Number.parseInt(user_id_string, 10);\n    }\n\n    if (email) {\n        // Will return undefined if there's no match\n        const user = people.get_by_email(email);\n        if (user) {\n            return user.user_id;\n        }\n    }\n    return undefined;\n}\n\nfunction get_user_group_id_for_mention_button(elem) {\n    const user_group_id = $(elem).attr(\"data-user-group-id\");\n\n    if (user_group_id) {\n        return Number.parseInt(user_group_id, 10);\n    }\n\n    return undefined;\n}\n\n// Helper function to update a mentioned user's name.\nexport function set_name_in_mention_element(element, name) {\n    if ($(element).hasClass(\"silent\")) {\n        $(element).text(name);\n    } else {\n        $(element).text(\"@\" + name);\n    }\n}\n\nexport const update_elements = (content) => {\n    // Set the rtl class if the text has an rtl direction\n    if (rtl.get_direction(content.text()) === \"rtl\") {\n        content.addClass(\"rtl\");\n    }\n\n    content.find(\".user-mention\").each(function () {\n        const user_id = get_user_id_for_mention_button(this);\n        // We give special highlights to the mention buttons\n        // that refer to the current user.\n        if (user_id === \"*\" || people.is_my_user_id(user_id)) {\n            // Either a wildcard mention or us, so mark it.\n            $(this).addClass(\"user-mention-me\");\n        }\n        if (user_id && user_id !== \"*\" && !$(this).find(\".highlight\").length) {\n            // If it's a mention of a specific user, edit the\n            // mention text to show the user's current name,\n            // assuming that you're not searching for text\n            // inside the highlight.\n            const person = people.get_by_user_id(user_id, true);\n            if (person !== undefined) {\n                // Note that person might be undefined in some\n                // unpleasant corner cases involving data import.\n                set_name_in_mention_element(this, person.full_name);\n            }\n        }\n    });\n\n    content.find(\".user-group-mention\").each(function () {\n        const user_group_id = get_user_group_id_for_mention_button(this);\n        let user_group;\n        try {\n            user_group = user_groups.get_user_group_from_id(user_group_id);\n        } catch {\n            // This is a user group the current user doesn't have\n            // data on.  This can happen when user groups are\n            // deleted.\n            blueslip.info(\"Rendered unexpected user group \" + user_group_id);\n            return;\n        }\n\n        const my_user_id = people.my_current_user_id();\n        // Mark user group you're a member of.\n        if (user_groups.is_member_of(user_group_id, my_user_id)) {\n            $(this).addClass(\"user-mention-me\");\n        }\n\n        if (user_group_id && !$(this).find(\".highlight\").length) {\n            // Edit the mention to show the current name for the\n            // user group, if its not in search.\n            set_name_in_mention_element(this, user_group.name);\n        }\n    });\n\n    content.find(\"a.stream\").each(function () {\n        const stream_id = Number.parseInt($(this).attr(\"data-stream-id\"), 10);\n        if (stream_id && !$(this).find(\".highlight\").length) {\n            // Display the current name for stream if it is not\n            // being displayed in search highlight.\n            const stream_name = stream_data.maybe_get_stream_name(stream_id);\n            if (stream_name !== undefined) {\n                // If the stream has been deleted,\n                // stream_data.maybe_get_stream_name might return\n                // undefined.  Otherwise, display the current stream name.\n                $(this).text(\"#\" + stream_name);\n            }\n        }\n    });\n\n    content.find(\"a.stream-topic\").each(function () {\n        const stream_id = Number.parseInt($(this).attr(\"data-stream-id\"), 10);\n        if (stream_id && !$(this).find(\".highlight\").length) {\n            // Display the current name for stream if it is not\n            // being displayed in search highlight.\n            const stream_name = stream_data.maybe_get_stream_name(stream_id);\n            if (stream_name !== undefined) {\n                // If the stream has been deleted,\n                // stream_data.maybe_get_stream_name might return\n                // undefined.  Otherwise, display the current stream name.\n                const text = $(this).text();\n                $(this).text(\"#\" + stream_name + text.slice(text.indexOf(\" > \")));\n            }\n        }\n    });\n\n    content.find(\"time\").each(function () {\n        // Populate each timestamp span with mentioned time\n        // in user's local time zone.\n        const time_str = $(this).attr(\"datetime\");\n        if (time_str === undefined) {\n            return;\n        }\n\n        const timestamp = parseISO(time_str);\n        if (isValid(timestamp)) {\n            const text = $(this).text();\n            const rendered_time = timerender.render_markdown_timestamp(timestamp, text);\n            const rendered_timestamp = render_markdown_timestamp({\n                text: rendered_time.text,\n            });\n            $(this).html(rendered_timestamp);\n            $(this)\n                .attr(\"data-tippy-content\", rendered_time.tooltip_content_html)\n                .attr(\"data-tippy-allowHTML\", \"true\");\n        } else {\n            // This shouldn't happen. If it does, we're very interested in debugging it.\n            blueslip.error(`Could not parse datetime supplied by backend: ${time_str}`);\n        }\n    });\n\n    content.find(\"span.timestamp-error\").each(function () {\n        const time_str = $(this).text().replace(\"Invalid time format: \", \"\");\n        const text = $t(\n            {defaultMessage: \"Invalid time format: {timestamp}\"},\n            {timestamp: time_str},\n        );\n        $(this).text(text);\n    });\n\n    content.find(\"div.spoiler-header\").each(function () {\n        // If a spoiler block has no header content, it should have a default header.\n        // We do this client side to allow for i18n by the client.\n        if ($(this).html().trim().length === 0) {\n            $(this).append(`<p>${$t_html({defaultMessage: \"Spoiler\"})}</p>`);\n        }\n\n        // Add the expand/collapse button to spoiler blocks\n        const toggle_button_html =\n            '<span class=\"spoiler-button\" aria-expanded=\"false\"><span class=\"spoiler-arrow\"></span></span>';\n        $(this).prepend(toggle_button_html);\n    });\n\n    // Display the view-code-in-playground and the copy-to-clipboard button inside the div.codehilite element.\n    content.find(\"div.codehilite\").each(function () {\n        const $codehilite = $(this);\n        const $pre = $codehilite.find(\"pre\");\n        const fenced_code_lang = $codehilite.data(\"code-language\");\n        if (fenced_code_lang !== undefined) {\n            const playground_info =\n                realm_playground.get_playground_info_for_languages(fenced_code_lang);\n            if (playground_info !== undefined) {\n                // If a playground is configured for this language,\n                // offer to view the code in that playground.  When\n                // there are multiple playgrounds, we display a\n                // popover listing the options.\n                let title = $t({defaultMessage: \"View in playground\"});\n                const view_in_playground_button = $(view_code_in_playground());\n                $pre.prepend(view_in_playground_button);\n                if (playground_info.length === 1) {\n                    title = $t(\n                        {defaultMessage: \"View in {playground_name}\"},\n                        {playground_name: playground_info[0].name},\n                    );\n                } else {\n                    view_in_playground_button.attr(\"aria-haspopup\", \"true\");\n                }\n                view_in_playground_button.attr(\"data-tippy-content\", title);\n                view_in_playground_button.attr(\"aria-label\", title);\n            }\n        }\n        const copy_button = $(copy_code_button());\n        $pre.prepend(copy_button);\n        new ClipboardJS(copy_button[0], {\n            text(copy_element) {\n                return $(copy_element).siblings(\"code\").text();\n            },\n        });\n    });\n\n    // Display emoji (including realm emoji) as text if\n    // user_settings.emojiset is 'text'.\n    if (user_settings.emojiset === \"text\") {\n        content.find(\".emoji\").replaceWith(function () {\n            const text = $(this).attr(\"title\");\n            return \":\" + text + \":\";\n        });\n    }\n};\n", "import {\n    differenceInCalendarDays,\n    differenceInHours,\n    differenceInMinutes,\n    format,\n    formatISO,\n    isEqual,\n    isValid,\n    parseISO,\n    startOfToday,\n} from \"date-fns\";\nimport $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport render_markdown_time_tooltip from \"../templates/markdown_time_tooltip.hbs\";\n\nimport {$t} from \"./i18n\";\nimport {user_settings} from \"./user_settings\";\n\nlet next_timerender_id = 0;\n\nexport function clear_for_testing(): void {\n    next_timerender_id = 0;\n}\n\n// Exported for tests only.\nexport function get_tz_with_UTC_offset(time: number | Date): string {\n    const tz_offset = format(time, \"xxx\");\n    let timezone = new Intl.DateTimeFormat(undefined, {timeZoneName: \"short\"})\n        .formatToParts(time)\n        .find(({type}) => type === \"timeZoneName\")?.value;\n\n    if (timezone === \"UTC\") {\n        return \"UTC\";\n    }\n\n    // When user's locale doesn't match their time zone (eg. en_US for IST),\n    // we get `timezone` in the format of'GMT+x:y. We don't want to\n    // show that along with (UTC+x:y)\n    timezone = /GMT[+-][\\d:]*/.test(timezone ?? \"\") ? \"\" : timezone;\n\n    const tz_UTC_offset = `(UTC${tz_offset})`;\n\n    if (timezone) {\n        return timezone + \" \" + tz_UTC_offset;\n    }\n    return tz_UTC_offset;\n}\n\n// Given a Date object 'time', returns an object:\n// {\n//      time_str:        a string for the current human-formatted version\n//      formal_time_str: a string for the current formally formatted version\n//                          e.g. \"Monday, April 15, 2017\"\n//      needs_update:    a boolean for if it will need to be updated when the\n//                       day changes\n// }\nexport type TimeRender = {\n    time_str: string;\n    formal_time_str: string;\n    needs_update: boolean;\n};\n\nexport function render_now(time: Date, today = new Date()): TimeRender {\n    let time_str = \"\";\n    let needs_update = false;\n    // render formal time to be used for tippy tooltip\n    // \"\\xa0\" is U+00A0 NO-BREAK SPACE.\n    // Can't use &nbsp; as that represents the literal string \"&nbsp;\".\n    const formal_time_str = format(time, \"EEEE,\\u00A0MMMM\\u00A0d,\\u00A0yyyy\");\n\n    // How many days old is 'time'? 0 = today, 1 = yesterday, 7 = a\n    // week ago, -1 = tomorrow, etc.\n\n    // Presumably the result of diffDays will be an integer in this\n    // case, but round it to be sure before comparing to integer\n    // constants.\n    const days_old = differenceInCalendarDays(today, time);\n\n    if (days_old === 0) {\n        time_str = $t({defaultMessage: \"Today\"});\n        needs_update = true;\n    } else if (days_old === 1) {\n        time_str = $t({defaultMessage: \"Yesterday\"});\n        needs_update = true;\n    } else if (time.getFullYear() !== today.getFullYear()) {\n        // For long running servers, searching backlog can get ambiguous\n        // without a year stamp. Only show year if message is from an older year\n        time_str = format(time, \"MMM\\u00A0dd,\\u00A0yyyy\");\n        needs_update = false;\n    } else {\n        // For now, if we get a message from tomorrow, we don't bother\n        // rewriting the timestamp when it gets to be tomorrow.\n        time_str = format(time, \"MMM\\u00A0dd\");\n        needs_update = false;\n    }\n    return {\n        time_str,\n        formal_time_str,\n        needs_update,\n    };\n}\n\n// Current date is passed as an argument for unit testing\nexport function last_seen_status_from_date(\n    last_active_date: Date,\n    current_date = new Date(),\n): string {\n    const minutes = differenceInMinutes(current_date, last_active_date);\n    if (minutes <= 2) {\n        return $t({defaultMessage: \"Just now\"});\n    }\n    if (minutes < 60) {\n        return $t({defaultMessage: \"{minutes} minutes ago\"}, {minutes});\n    }\n\n    const days_old = differenceInCalendarDays(current_date, last_active_date);\n    const hours = Math.floor(minutes / 60);\n\n    if (hours < 24) {\n        if (hours === 1) {\n            return $t({defaultMessage: \"An hour ago\"});\n        }\n        return $t({defaultMessage: \"{hours} hours ago\"}, {hours});\n    }\n\n    if (days_old === 1) {\n        return $t({defaultMessage: \"Yesterday\"});\n    }\n\n    if (days_old < 90) {\n        return $t({defaultMessage: \"{days_old} days ago\"}, {days_old});\n    } else if (\n        days_old > 90 &&\n        days_old < 365 &&\n        last_active_date.getFullYear() === current_date.getFullYear()\n    ) {\n        // Online more than 90 days ago, in the same year\n        return $t(\n            {defaultMessage: \"{last_active_date}\"},\n            {last_active_date: format(last_active_date, \"MMM\\u00A0dd\")},\n        );\n    }\n    return $t(\n        {defaultMessage: \"{last_active_date}\"},\n        {last_active_date: format(last_active_date, \"MMM\\u00A0dd,\\u00A0yyyy\")},\n    );\n}\n\n// List of the dates that need to be updated when the day changes.\n// Each timestamp is represented as a list of length 2:\n//   [id of the span element, Date representing the time]\ntype UpdateEntry = {\n    needs_update: boolean;\n    className: string;\n    time: Date;\n    time_above?: Date;\n};\nlet update_list: UpdateEntry[] = [];\n\n// The time at the beginning of the day, when the timestamps were updated.\n// Represented as a Date with hour, minute, second, millisecond 0.\nlet last_update: Date;\n\nexport function initialize(): void {\n    last_update = startOfToday();\n}\n\n// time_above is an optional argument, to support dates that look like:\n// --- \u25b2 Yesterday \u25b2 ------ \u25bc Today \u25bc ---\nfunction maybe_add_update_list_entry(entry: UpdateEntry): void {\n    if (entry.needs_update) {\n        update_list.push(entry);\n    }\n}\n\nfunction render_date_span(\n    elem: JQuery,\n    rendered_time: TimeRender,\n    rendered_time_above?: TimeRender,\n): JQuery {\n    elem.text(\"\");\n    if (rendered_time_above !== undefined) {\n        elem.append(\n            '<i class=\"date-direction fa fa-caret-up\"></i>',\n            _.escape(rendered_time_above.time_str),\n            '<hr class=\"date-line\">',\n            '<i class=\"date-direction fa fa-caret-down\"></i>',\n            _.escape(rendered_time.time_str),\n        );\n        return elem;\n    }\n    elem.append(_.escape(rendered_time.time_str));\n    return elem.attr(\"data-tippy-content\", rendered_time.formal_time_str);\n}\n\n// Given an Date object 'time', return a DOM node that initially\n// displays the human-formatted date, and is updated automatically as\n// necessary (e.g. changing \"Today\" to \"Yesterday\" to \"Jul 1\").\n// If two dates are given, it renders them as:\n// --- \u25b2 Yesterday \u25b2 ------ \u25bc Today \u25bc ---\n\n// (What's actually spliced into the message template is the contents\n// of this DOM node as HTML, so effectively a copy of the node. That's\n// okay since to update the time later we look up the node by its id.)\nexport function render_date(time: Date, time_above: Date | undefined, today: Date): JQuery {\n    const className = `timerender${next_timerender_id}`;\n    next_timerender_id += 1;\n    const rendered_time = render_now(time, today);\n    let node = $(\"<span />\").attr(\"class\", className);\n    if (time_above !== undefined) {\n        const rendered_time_above = render_now(time_above, today);\n        node = render_date_span(node, rendered_time, rendered_time_above);\n    } else {\n        node = render_date_span(node, rendered_time);\n    }\n    maybe_add_update_list_entry({\n        needs_update: rendered_time.needs_update,\n        className,\n        time,\n        time_above,\n    });\n    return node;\n}\n\n// Renders the timestamp returned by the <time:> Markdown syntax.\nexport function render_markdown_timestamp(time: number | Date): {\n    text: string;\n    tooltip_content_html: string;\n} {\n    const hourformat = user_settings.twenty_four_hour_time ? \"HH:mm\" : \"h:mm a\";\n    const timestring = format(time, \"E, MMM d yyyy, \" + hourformat);\n\n    const tz_offset_str = get_tz_with_UTC_offset(time);\n    const tooltip_content_html = render_markdown_time_tooltip({tz_offset_str});\n\n    return {\n        text: timestring,\n        tooltip_content_html: tooltip_content_html,\n    };\n}\n\n// This isn't expected to be called externally except manually for\n// testing purposes.\nexport function update_timestamps(): void {\n    const today = startOfToday();\n    if (!isEqual(today, last_update)) {\n        const to_process = update_list;\n        update_list = [];\n\n        for (const entry of to_process) {\n            const className = entry.className;\n            const elements = $(`.${CSS.escape(className)}`);\n            // The element might not exist any more (because it\n            // was in the zfilt table, or because we added\n            // messages above it and re-collapsed).\n            if (elements.length > 0) {\n                const time = entry.time;\n                const time_above = entry.time_above;\n                const rendered_time = render_now(time, today);\n                const rendered_time_above = time_above ? render_now(time_above, today) : undefined;\n                for (const element of elements) {\n                    render_date_span($(element), rendered_time, rendered_time_above);\n                }\n                maybe_add_update_list_entry({\n                    needs_update: rendered_time.needs_update,\n                    className,\n                    time,\n                    time_above,\n                });\n            }\n        }\n\n        last_update = today;\n    }\n}\n\nsetInterval(update_timestamps, 60 * 1000);\n\n// Transform a Unix timestamp into a ISO 8601 formatted date string.\n//   Example: 1978-10-31T13:37:42Z\nexport function get_full_time(timestamp: number): string {\n    return formatISO(timestamp * 1000);\n}\n\nexport function get_timestamp_for_flatpickr(timestring: string): Date {\n    let timestamp;\n    try {\n        // If there's already a valid time in the compose box,\n        // we use it to initialize the flatpickr instance.\n        timestamp = parseISO(timestring);\n    } finally {\n        // Otherwise, default to showing the current time.\n        if (!timestamp || !isValid(timestamp)) {\n            timestamp = new Date();\n        }\n    }\n    return timestamp;\n}\n\nexport function stringify_time(time: number | Date): string {\n    if (user_settings.twenty_four_hour_time) {\n        return format(time, \"HH:mm\");\n    }\n    return format(time, \"h:mm a\");\n}\n\nexport function format_time_modern(time: number | Date, today = new Date()): String {\n    const hours = differenceInHours(today, time);\n    const days_old = differenceInCalendarDays(today, time);\n\n    if (time > today) {\n        /* For timestamps in the future, we always show the year*/\n        return format(time, \"MMM\\u00A0dd,\\u00A0yyyy\");\n    } else if (hours < 24) {\n        return stringify_time(time);\n    } else if (days_old === 1) {\n        return $t({defaultMessage: \"Yesterday\"});\n    } else if (days_old < 7) {\n        return format(time, \"EEEE\");\n    } else if (days_old <= 180) {\n        return format(time, \"MMM\\u00A0dd\");\n    }\n\n    return format(time, \"MMM\\u00A0dd,\\u00A0yyyy\");\n}\n\n// this is for rendering absolute time based off the preferences for twenty-four\n// hour time in the format of \"%mmm %d, %h:%m %p\".\nexport function absolute_time(timestamp: number, today = new Date()): string {\n    const date = new Date(timestamp);\n    const is_older_year = today.getFullYear() - date.getFullYear() > 0;\n    const H_24 = user_settings.twenty_four_hour_time;\n\n    return format(\n        date,\n        is_older_year\n            ? H_24\n                ? \"MMM d, yyyy HH:mm\"\n                : \"MMM d, yyyy hh:mm a\"\n            : H_24\n            ? \"MMM d HH:mm\"\n            : \"MMM d hh:mm a\",\n    );\n}\n\nexport function get_full_datetime(time: Date): string {\n    const time_options: Intl.DateTimeFormatOptions = {timeStyle: \"medium\"};\n\n    if (user_settings.twenty_four_hour_time) {\n        time_options.hourCycle = \"h24\";\n    }\n\n    const date_string = time.toLocaleDateString();\n    let time_string = time.toLocaleTimeString(undefined, time_options);\n\n    const tz_offset_str = get_tz_with_UTC_offset(time);\n\n    time_string = time_string + \" \" + tz_offset_str;\n\n    return $t({defaultMessage: \"{date} at {time}\"}, {date: date_string, time: time_string});\n}\n", "import $ from \"jquery\";\nimport tippy, {delegate} from \"tippy.js\";\n\nimport {$t} from \"./i18n\";\nimport * as message_lists from \"./message_lists\";\nimport * as popover_menus from \"./popover_menus\";\nimport * as reactions from \"./reactions\";\nimport * as rows from \"./rows\";\nimport * as timerender from \"./timerender\";\n\n// We override the defaults set by tippy library here,\n// so make sure to check this too after checking tippyjs\n// documentation for default properties.\ntippy.setDefaultProps({\n    // We don't want tooltips\n    // to take more space than\n    // mobile widths ever.\n    maxWidth: 300,\n\n    // Some delay to showing / hiding the tooltip makes\n    // it look less forced and more natural.\n    delay: [100, 20],\n    placement: \"top\",\n\n    // disable animations to make the\n    // tooltips feel snappy\n    animation: false,\n\n    // Show tooltips on long press on touch based\n    // devices.\n    touch: [\"hold\", 750],\n\n    // This has the side effect of some properties of parent applying to\n    // tooltips.\n    appendTo: \"parent\",\n\n    // html content is not supported by default\n    // enable it by passing data-tippy-allowHTML=\"true\"\n    // in the tag or a parameter.\n});\n\nexport function initialize() {\n    // Our default tooltip configuration. For this, one simply needs to:\n    // * Set `class=\"tippy-zulip-tooltip\"` on an element for enable this.\n    // * Set `data-tippy-content=\"{{t 'Tooltip content' }}\"`, often\n    //   replacing a `title` attribute on an element that had both.\n    // * Set placement; we typically use `data-tippy-placement=\"top\"`.\n    delegate(\"body\", {\n        target: \".tippy-zulip-tooltip\",\n    });\n\n    // The below definitions are for specific tooltips that require\n    // custom JavaScript code or configuration.  Note that since the\n    // below specify the target directly, elements using those should\n    // not have the tippy-zulip-tooltip class.\n\n    // message reaction tooltip showing who reacted.\n    let observer;\n    delegate(\"body\", {\n        target: \".message_reaction, .message_reactions .reaction_button\",\n        placement: \"bottom\",\n        onShow(instance) {\n            const elem = $(instance.reference);\n            if (!instance.reference.classList.contains(\"reaction_button\")) {\n                const local_id = elem.attr(\"data-reaction-id\");\n                const message_id = rows.get_message_id(instance.reference);\n                const title = reactions.get_reaction_title_data(message_id, local_id);\n                instance.setContent(title);\n            }\n\n            // Use MutationObserver to check for removal of nodes on which tooltips\n            // are still active.\n            // We target the message table and check for removal of it, it's children\n            // and the reactions individually down in the subtree.\n            const target_node = elem.parents(\".message_table.focused_table\").get(0);\n            if (!target_node) {\n                // The `reaction` was removed from DOM before we reached here.\n                // In that case, we simply hide the tooltip.\n                // We have to be smart about hiding the instance, so we hide it as soon\n                // as it is displayed.\n                setTimeout(instance.hide, 0);\n                return;\n            }\n\n            const nodes_to_check_for_removal = [\n                elem.parents(\".recipient_row\").get(0),\n                elem.parents(\".message_reactions\").get(0),\n                elem.get(0),\n            ];\n            const config = {attributes: false, childList: true, subtree: true};\n\n            const callback = function (mutationsList) {\n                for (const mutation of mutationsList) {\n                    for (const node of nodes_to_check_for_removal) {\n                        // Hide instance if reference is in the removed node list.\n                        if (Array.prototype.includes.call(mutation.removedNodes, node)) {\n                            instance.hide();\n                        }\n                    }\n                }\n            };\n            observer = new MutationObserver(callback);\n            observer.observe(target_node, config);\n        },\n        onHidden(instance) {\n            instance.destroy();\n            if (observer) {\n                observer.disconnect();\n            }\n        },\n        appendTo: () => document.body,\n    });\n\n    delegate(\"body\", {\n        target: \".compose_control_button\",\n        // Add some additional delay when they open\n        // so that regular users don't have to see\n        // them unless they want to.\n        delay: [300, 20],\n        // This ensures that the upload files tooltip\n        // doesn't hide behind the left sidebar.\n        appendTo: () => document.body,\n    });\n\n    delegate(\"body\", {\n        target: \".message_control_button\",\n        // This ensures that the tooltip doesn't\n        // hide by the selected message blue border.\n        appendTo: () => document.body,\n        // Add some additional delay when they open\n        // so that regular users don't have to see\n        // them unless they want to.\n        delay: [300, 20],\n        onShow(instance) {\n            // Handle dynamic \"starred messages\" and \"edit\" widgets.\n            const elem = $(instance.reference);\n            let content = elem.attr(\"data-tippy-content\");\n            if (content === undefined) {\n                // Tippy cannot get the content for message edit button\n                // as it is dynamically inserted based on editability.\n                // So, we have to manually get the i element to get the\n                // content from it.\n                //\n                // TODO: Change the template structure so logic is unnecessary.\n                const edit_button = elem.find(\"i.edit_content_button\");\n                content = edit_button.attr(\"data-tippy-content\");\n            }\n\n            instance.setContent(content);\n            return true;\n        },\n    });\n\n    $(\"body\").on(\"blur\", \".message_control_button\", (e) => {\n        // Remove tooltip when user is trying to tab through all the icons.\n        // If user tabs slowly, tooltips are displayed otherwise they are\n        // destroyed before they can be displayed.\n        e.currentTarget._tippy.destroy();\n    });\n\n    delegate(\"body\", {\n        target: \".message_table .message_time\",\n        appendTo: () => document.body,\n        onShow(instance) {\n            const time_elem = $(instance.reference);\n            const row = time_elem.closest(\".message_row\");\n            const message = message_lists.current.get(rows.id(row));\n            const time = new Date(message.timestamp * 1000);\n            instance.setContent(timerender.get_full_datetime(time));\n        },\n        onHidden(instance) {\n            instance.destroy();\n        },\n    });\n\n    delegate(\"body\", {\n        target: \".recipient_row_date > span\",\n        appendTo: () => document.body,\n        onHidden(instance) {\n            instance.destroy();\n        },\n    });\n\n    // In case of recipient bar icons, following change\n    // ensures that tooltip doesn't hide behind the message\n    // box or it is not limited by the parent container.\n    delegate(\"body\", {\n        target: [\n            \".recipient_bar_icon\",\n            \".sidebar-title\",\n            \"#user_filter_icon\",\n            \"#scroll-to-bottom-button-clickable-area\",\n        ],\n        appendTo: () => document.body,\n    });\n\n    delegate(\"body\", {\n        target: [\n            \".rendered_markdown time\",\n            \".rendered_markdown .copy_codeblock\",\n            \"#compose_top_right [data-tippy-content]\",\n        ],\n        appendTo: () => document.body,\n        onHidden(instance) {\n            instance.destroy();\n        },\n    });\n\n    delegate(\"body\", {\n        target: [\".enter_sends_true\", \".enter_sends_false\"],\n        content: $t({defaultMessage: \"Change send shortcut\"}),\n        onShow() {\n            // Don't show tooltip if the popover is displayed.\n            if (popover_menus.compose_enter_sends_popover_displayed) {\n                return false;\n            }\n            return true;\n        },\n        appendTo: () => document.body,\n    });\n}\n", "import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport generated_emoji_codes from \"../generated/emoji/emoji_codes.json\";\nimport generated_pygments_data from \"../generated/pygments_data.json\";\nimport * as emoji from \"../shared/js/emoji\";\nimport * as fenced_code from \"../shared/js/fenced_code\";\nimport render_compose from \"../templates/compose.hbs\";\nimport render_edit_content_button from \"../templates/edit_content_button.hbs\";\nimport render_left_sidebar from \"../templates/left_sidebar.hbs\";\nimport render_message_feed_errors from \"../templates/message_feed_errors.hbs\";\nimport render_navbar from \"../templates/navbar.hbs\";\nimport render_right_sidebar from \"../templates/right_sidebar.hbs\";\n\nimport * as about_zulip from \"./about_zulip\";\nimport * as activity from \"./activity\";\nimport * as alert_words from \"./alert_words\";\nimport * as blueslip from \"./blueslip\";\nimport * as bot_data from \"./bot_data\";\nimport * as click_handlers from \"./click_handlers\";\nimport * as common from \"./common\";\nimport * as compose from \"./compose\";\nimport * as compose_closed_ui from \"./compose_closed_ui\";\nimport * as compose_pm_pill from \"./compose_pm_pill\";\nimport * as composebox_typeahead from \"./composebox_typeahead\";\nimport * as condense from \"./condense\";\nimport * as copy_and_paste from \"./copy_and_paste\";\nimport * as dark_theme from \"./dark_theme\";\nimport * as drafts from \"./drafts\";\nimport * as echo from \"./echo\";\nimport * as emoji_picker from \"./emoji_picker\";\nimport * as emojisets from \"./emojisets\";\nimport * as gear_menu from \"./gear_menu\";\nimport * as giphy from \"./giphy\";\nimport * as hashchange from \"./hashchange\";\nimport * as hotspots from \"./hotspots\";\nimport * as i18n from \"./i18n\";\nimport * as invite from \"./invite\";\nimport * as lightbox from \"./lightbox\";\nimport * as linkifiers from \"./linkifiers\";\nimport {localstorage} from \"./localstorage\";\nimport * as markdown from \"./markdown\";\nimport * as markdown_config from \"./markdown_config\";\nimport * as message_edit from \"./message_edit\";\nimport * as message_edit_history from \"./message_edit_history\";\nimport * as message_fetch from \"./message_fetch\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_scroll from \"./message_scroll\";\nimport * as message_view_header from \"./message_view_header\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as muted_topics from \"./muted_topics\";\nimport * as muted_users from \"./muted_users\";\nimport * as navbar_alerts from \"./navbar_alerts\";\nimport * as navigate from \"./navigate\";\nimport * as notifications from \"./notifications\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as pm_conversations from \"./pm_conversations\";\nimport * as popover_menus from \"./popover_menus\";\nimport * as presence from \"./presence\";\nimport * as realm_logo from \"./realm_logo\";\nimport * as realm_playground from \"./realm_playground\";\nimport * as realm_user_settings_defaults from \"./realm_user_settings_defaults\";\nimport * as recent_topics_util from \"./recent_topics_util\";\nimport * as reload from \"./reload\";\nimport * as rendered_markdown from \"./rendered_markdown\";\nimport * as resize from \"./resize\";\nimport * as rows from \"./rows\";\nimport * as scroll_bar from \"./scroll_bar\";\nimport * as search from \"./search\";\nimport * as search_pill_widget from \"./search_pill_widget\";\nimport * as sent_messages from \"./sent_messages\";\nimport * as server_events from \"./server_events\";\nimport * as settings from \"./settings\";\nimport * as settings_data from \"./settings_data\";\nimport * as settings_display from \"./settings_display\";\nimport * as settings_notifications from \"./settings_notifications\";\nimport * as settings_panel_menu from \"./settings_panel_menu\";\nimport * as settings_realm_user_settings_defaults from \"./settings_realm_user_settings_defaults\";\nimport * as settings_sections from \"./settings_sections\";\nimport * as settings_toggle from \"./settings_toggle\";\nimport * as spoilers from \"./spoilers\";\nimport * as starred_messages from \"./starred_messages\";\nimport * as stream_bar from \"./stream_bar\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_edit from \"./stream_edit\";\nimport * as stream_edit_subscribers from \"./stream_edit_subscribers\";\nimport * as stream_list from \"./stream_list\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\nimport * as timerender from \"./timerender\";\nimport * as tippyjs from \"./tippyjs\";\nimport * as topic_list from \"./topic_list\";\nimport * as topic_zoom from \"./topic_zoom\";\nimport * as tutorial from \"./tutorial\";\nimport * as typing from \"./typing\";\nimport * as ui from \"./ui\";\nimport * as unread from \"./unread\";\nimport * as unread_ui from \"./unread_ui\";\nimport * as user_groups from \"./user_groups\";\nimport {initialize_user_settings, user_settings} from \"./user_settings\";\nimport * as user_status from \"./user_status\";\nimport * as user_status_ui from \"./user_status_ui\";\n\n// This is where most of our initialization takes place.\n// TODO: Organize it a lot better.  In particular, move bigger\n//       functions to other modules.\n\n/* We use 'visibility' rather than 'display' and jQuery's show() / hide(),\n   because we want to reserve space for the email address.  This avoids\n   things jumping around slightly when the email address is shown. */\n\nlet current_message_hover;\nfunction message_unhover() {\n    if (current_message_hover === undefined) {\n        return;\n    }\n    current_message_hover.find(\"span.edit_content\").html(\"\");\n    current_message_hover = undefined;\n}\n\nfunction message_hover(message_row) {\n    const id = rows.id(message_row);\n    if (current_message_hover && rows.id(current_message_hover) === id) {\n        return;\n    }\n\n    const message = message_lists.current.get(rows.id(message_row));\n    message_unhover();\n    current_message_hover = message_row;\n\n    // Locally echoed messages have !is_topic_editable and thus go\n    // through this code path.\n    if (!message_edit.is_topic_editable(message)) {\n        // The actions and reactions icon hover logic is handled entirely by CSS\n        return;\n    }\n\n    // But the message edit hover icon is determined by whether the message is still editable\n    const is_message_editable =\n        message_edit.get_editability(message) === message_edit.editability_types.FULL;\n    const args = {\n        is_editable: is_message_editable && !message.status_message,\n        msg_id: id,\n    };\n    message_row.find(\".edit_content\").html(render_edit_content_button(args));\n}\n\nfunction initialize_left_sidebar() {\n    const rendered_sidebar = render_left_sidebar({\n        is_guest: page_params.is_guest,\n    });\n\n    $(\"#left-sidebar-container\").html(rendered_sidebar);\n}\n\nfunction initialize_right_sidebar() {\n    const rendered_sidebar = render_right_sidebar({\n        can_invite_others_to_realm: settings_data.user_can_invite_others_to_realm(),\n        realm_description: page_params.realm_description,\n    });\n\n    $(\"#right-sidebar-container\").html(rendered_sidebar);\n    if (page_params.is_spectator) {\n        rendered_markdown.update_elements(\n            $(\".right-sidebar .realm-description .rendered_markdown\"),\n        );\n    }\n\n    $(\"#user_presences\").on(\"mouseenter\", \".user_sidebar_entry\", (e) => {\n        const status_emoji = $(e.target).closest(\".user_sidebar_entry\").find(\"img.status_emoji\");\n        if (status_emoji.length) {\n            const animated_url = status_emoji.data(\"animated-url\");\n            if (animated_url) {\n                status_emoji.attr(\"src\", animated_url);\n            }\n        }\n    });\n\n    $(\"#user_presences\").on(\"mouseleave\", \".user_sidebar_entry\", (e) => {\n        const status_emoji = $(e.target).closest(\".user_sidebar_entry\").find(\"img.status_emoji\");\n        if (status_emoji.length) {\n            const still_url = status_emoji.data(\"still-url\");\n            if (still_url) {\n                status_emoji.attr(\"src\", still_url);\n            }\n        }\n    });\n}\n\nfunction initialize_navbar() {\n    const rendered_navbar = render_navbar({\n        embedded: page_params.narrow_stream !== undefined,\n        search_pills_enabled: page_params.search_pills_enabled,\n    });\n\n    $(\"#navbar-container\").html(rendered_navbar);\n}\n\nfunction initialize_compose_box() {\n    $(\"#compose-container\").append(\n        render_compose({\n            embedded: $(\"#compose\").attr(\"data-embedded\") === \"\",\n            file_upload_enabled: page_params.max_file_upload_size_mib > 0,\n            giphy_enabled: giphy.is_giphy_enabled(),\n            scroll_to_bottom_key_html: common.has_mac_keyboard()\n                ? \"Fn + <span class='tooltip_right_arrow'>\u2192</span>\"\n                : \"End\",\n        }),\n    );\n    $(`.enter_sends_${user_settings.enter_sends}`).show();\n    common.adjust_mac_shortcuts(\".enter_sends kbd\");\n}\n\nfunction initialize_message_feed_errors() {\n    $(\"#message_feed_errors_container\").html(render_message_feed_errors());\n}\n\nexport function initialize_kitchen_sink_stuff() {\n    // TODO:\n    //      This function is a historical dumping ground\n    //      for lots of miscellaneous setup.  Almost all of\n    //      the code here can probably be moved to more\n    //      specific-purpose modules like message_viewport.js.\n\n    const throttled_mousewheelhandler = _.throttle((e, delta) => {\n        // Most of the mouse wheel's work will be handled by the\n        // scroll handler, but when we're at the top or bottom of the\n        // page, the pointer may still need to move.\n\n        if (delta < 0 && message_viewport.at_top()) {\n            navigate.up();\n        } else if (delta > 0 && message_viewport.at_bottom()) {\n            navigate.down();\n        }\n\n        message_viewport.set_last_movement_direction(delta);\n    }, 50);\n\n    message_viewport.message_pane.on(\"wheel\", (e) => {\n        const delta = e.originalEvent.deltaY;\n        if (!overlays.is_active() && !recent_topics_util.is_visible()) {\n            // In the message view, we use a throttled mousewheel handler.\n            throttled_mousewheelhandler(e, delta);\n        }\n        // If in a modal, we neither handle the event nor\n        // preventDefault, allowing the modal to scroll normally.\n    });\n\n    $(window).on(\"resize\", _.throttle(resize.handler, 50));\n\n    // Scrolling in overlays. input boxes, and other elements that\n    // explicitly scroll should not scroll the main view.  Stop\n    // propagation in all cases.  Also, ignore the event if the\n    // element is already at the top or bottom.  Otherwise we get a\n    // new scroll event on the parent (?).\n    $(\".modal-body, .scrolling_list, input, textarea\").on(\"wheel\", function (e) {\n        const self = ui.get_scroll_element($(this));\n        const scroll = self.scrollTop();\n        const delta = e.originalEvent.deltaY;\n\n        // The -1 fudge factor is important here due to rounding errors.  Better\n        // to err on the side of not scrolling.\n        const max_scroll = self.prop(\"scrollHeight\") - self.innerHeight() - 1;\n\n        e.stopPropagation();\n        if ((delta < 0 && scroll <= 0) || (delta > 0 && scroll >= max_scroll)) {\n            e.preventDefault();\n        }\n    });\n\n    // Ignore wheel events in the compose area which weren't already handled above.\n    $(\"#compose\").on(\"wheel\", (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    // A little hackish, because it doesn't seem to totally get us the\n    // exact right width for the floating_recipient_bar and compose\n    // box, but, close enough for now.\n    resize.handler();\n\n    if (page_params.is_spectator) {\n        $(\"body\").addClass(\"spectator-view\");\n    }\n\n    if (!user_settings.left_side_userlist) {\n        $(\"#navbar-buttons\").addClass(\"right-userlist\");\n    }\n\n    if (user_settings.high_contrast_mode) {\n        $(\"body\").addClass(\"high-contrast\");\n    }\n\n    if (!user_settings.dense_mode) {\n        $(\"body\").addClass(\"less_dense_mode\");\n    } else {\n        $(\"body\").addClass(\"more_dense_mode\");\n    }\n\n    $(\"#main_div\").on(\"mouseover\", \".message_table .message_row\", function () {\n        const row = $(this).closest(\".message_row\");\n        message_hover(row);\n    });\n\n    $(\"#main_div\").on(\"mouseleave\", \".message_table .message_row\", () => {\n        message_unhover();\n    });\n\n    $(\"#main_div\").on(\"mouseover\", \".sender_info_hover\", function () {\n        const row = $(this).closest(\".message_row\");\n        row.addClass(\"sender_name_hovered\");\n    });\n\n    $(\"#main_div\").on(\"mouseout\", \".sender_info_hover\", function () {\n        const row = $(this).closest(\".message_row\");\n        row.removeClass(\"sender_name_hovered\");\n    });\n\n    $(\"#main_div\").on(\"mouseenter\", \".youtube-video a\", function () {\n        $(this).addClass(\"fa fa-play\");\n    });\n\n    $(\"#main_div\").on(\"mouseleave\", \".youtube-video a\", function () {\n        $(this).removeClass(\"fa fa-play\");\n    });\n\n    $(\"#main_div\").on(\"mouseenter\", \".embed-video a\", function () {\n        const elem = $(this);\n        // Set image height and css vars for play button position, if not done already\n        const setPosition = !elem.data(\"entered-before\");\n        if (setPosition) {\n            const imgW = elem.find(\"img\")[0].width;\n            const imgH = elem.find(\"img\")[0].height;\n            // Ensure height doesn't change on mouse enter\n            elem.css(\"height\", `${imgH}px`);\n            // variables to set play button position\n            const marginLeft = (imgW - 30) / 2;\n            const marginTop = (imgH - 26) / 2;\n            elem.css(\"--margin-left\", `${marginLeft}px`).css(\"--margin-top\", `${marginTop}px`);\n            elem.data(\"entered-before\", true);\n        }\n        elem.addClass(\"fa fa-play\");\n    });\n\n    $(\"#main_div\").on(\"mouseleave\", \".embed-video a\", function () {\n        $(this).removeClass(\"fa fa-play\");\n    });\n\n    $(\"#manage_streams_container\").on(\"mouseover\", \".subscription_header\", function () {\n        $(this).addClass(\"active\");\n    });\n\n    $(\"#manage_streams_container\").on(\"mouseout\", \".subscription_header\", function () {\n        $(this).removeClass(\"active\");\n    });\n\n    $(\"#stream_message_recipient_stream\").on(\"change\", function () {\n        stream_bar.decorate(this.value, $(\"#stream-message .message_header_stream\"), true);\n    });\n\n    $(window).on(\"blur\", () => {\n        $(document.body).addClass(\"window_blurred\");\n    });\n\n    $(window).on(\"focus\", () => {\n        $(document.body).removeClass(\"window_blurred\");\n    });\n\n    $(document).on(\"message_selected.zulip\", (event) => {\n        if (message_lists.current !== event.msg_list) {\n            return;\n        }\n        if (event.id === -1) {\n            // If the message list is empty, don't do anything\n            return;\n        }\n        const row = event.msg_list.get_row(event.id);\n        $(\".selected_message\").removeClass(\"selected_message\");\n        row.addClass(\"selected_message\");\n\n        if (event.then_scroll) {\n            if (row.length === 0) {\n                const row_from_dom = message_lists.current.get_row(event.id);\n                const messages = event.msg_list.all_messages();\n                blueslip.debug(\"message_selected missing selected row\", {\n                    previously_selected_id: event.previously_selected_id,\n                    selected_id: event.id,\n                    selected_idx: event.msg_list.selected_idx(),\n                    selected_idx_exact: messages.indexOf(event.msg_list.get(event.id)),\n                    render_start: event.msg_list.view._render_win_start,\n                    render_end: event.msg_list.view._render_win_end,\n                    selected_id_from_idx: messages[event.msg_list.selected_idx()].id,\n                    msg_list_sorted: _.isEqual(\n                        messages.map((message) => message.id),\n                        message_lists.current\n                            .all_messages()\n                            .map((message) => message.id)\n                            .sort(),\n                    ),\n                    found_in_dom: row_from_dom.length,\n                });\n            }\n            if (event.target_scroll_offset !== undefined) {\n                message_lists.current.view.set_message_offset(event.target_scroll_offset);\n            } else {\n                // Scroll to place the message within the current view;\n                // but if this is the initial placement of the pointer,\n                // just place it in the very center\n                message_viewport.recenter_view(row, {\n                    from_scroll: event.from_scroll,\n                    force_center: event.previously_selected_id === -1,\n                });\n            }\n        }\n    });\n\n    $(\"body\").on(\"mouseover\", \".message_edit_content\", function () {\n        $(this).closest(\".message_row\").find(\".copy_message\").show();\n    });\n\n    $(\"body\").on(\"mouseout\", \".message_edit_content\", function () {\n        $(this).closest(\".message_row\").find(\".copy_message\").hide();\n    });\n\n    $(\"body\").on(\"mouseenter\", \".copy_message\", function () {\n        $(this).show();\n    });\n\n    if (!page_params.realm_allow_message_editing) {\n        $(\"#edit-message-hotkey-help\").hide();\n    }\n\n    if (page_params.realm_presence_disabled) {\n        $(\"#user-list\").hide();\n    }\n}\n\nexport function initialize_everything() {\n    /*\n        When we initialize our various modules, a lot\n        of them will consume data from the server\n        in the form of `page_params`.\n\n        The `page_params` variable is basically a\n        massive dictionary with all the information\n        that the client needs to run the app.  Here\n        are some examples of what it includes:\n\n            - all of the user's user-specific settings\n            - all realm-specific settings that are\n              pertinent to the user\n            - info about streams/subscribers on the realm\n            - realm settings\n            - info about all the other users\n            - some fairly dynamic data, like which of\n              the other users are \"present\"\n\n        Except for the actual Zulip messages, basically\n        any data that you see in the app soon after page\n        load comes from `page_params`.\n\n        ## Mostly static data\n\n        Now, we mostly leave `page_params` intact through\n        the duration of the app.  Most of the data in\n        `page_params` is fairly static in nature, and we\n        will simply update it for basic changes like\n        the following (meant as examples, not gospel):\n\n            - I changed my 24-hour time preference.\n            - The realm admin changed who can edit topics.\n            - The team's realm icon has changed.\n            - I switched from light theme to dark theme.\n\n        Especially for things that are settings-related,\n        we rarely abstract away the data from `page_params`.\n        As of this writing, over 90 modules refer directly\n        to `page_params` for some reason or another.\n\n        ## Dynamic data\n\n        Some of the data in `page_params` is either\n        more highly dynamic than settings data, or\n        has more performance requirements than\n        simple settings data, or both.  Examples\n        include:\n\n            - tracking all users (we want to have\n              multiple Maps to find users, for example)\n            - tracking all streams\n            - tracking presence data\n            - tracking user groups and bots\n            - tracking recent PMs\n\n        Using stream data as an example, we use a\n        module called `stream_data` to actually track\n        all the info about the streams that a user\n        can know about.  We populate this module\n        with data from `page_params`, but thereafter\n        `stream_data.js` \"owns\" the stream data:\n\n            - other modules should ask `stream_data`\n              for stuff (and not go to `page_params`)\n            - when server events come in, they should\n              be processed by stream_data to update\n              its own data structures\n\n        To help enforce this paradigm, we do the\n        following:\n\n            - only pass `stream_data` what it needs\n              from `page_params`\n            - delete the reference to data owned by\n              `stream_data` in `page_params` itself\n    */\n\n    function pop_fields(...fields) {\n        const result = {};\n\n        for (const field of fields) {\n            result[field] = page_params[field];\n            delete page_params[field];\n        }\n\n        return result;\n    }\n\n    const alert_words_params = pop_fields(\"alert_words\");\n\n    const emoji_params = pop_fields(\"realm_emoji\");\n\n    const bot_params = pop_fields(\"realm_bots\");\n\n    const people_params = pop_fields(\"realm_users\", \"realm_non_active_users\", \"cross_realm_bots\");\n\n    const pm_conversations_params = pop_fields(\"recent_private_conversations\");\n\n    const presence_params = pop_fields(\"presences\", \"server_timestamp\");\n\n    const stream_data_params = pop_fields(\n        \"subscriptions\",\n        \"unsubscribed\",\n        \"never_subscribed\",\n        \"realm_default_streams\",\n    );\n\n    const user_groups_params = pop_fields(\"realm_user_groups\");\n\n    const user_status_params = pop_fields(\"user_status\");\n    const i18n_params = pop_fields(\"language_list\");\n    const user_settings_params = pop_fields(\"user_settings\");\n    const realm_settings_defaults_params = pop_fields(\"realm_user_settings_defaults\");\n\n    if (page_params.is_spectator) {\n        const ls = localstorage();\n        const preferred_theme = ls.get(\"spectator-theme-preference\");\n        if (preferred_theme === \"dark\") {\n            dark_theme.enable();\n        } else if (preferred_theme === \"light\") {\n            dark_theme.disable();\n        }\n    }\n\n    i18n.initialize(i18n_params);\n    tippyjs.initialize();\n    popover_menus.initialize();\n\n    initialize_user_settings(user_settings_params);\n    realm_user_settings_defaults.initialize(realm_settings_defaults_params);\n    people.initialize(page_params.user_id, people_params);\n\n    let date_joined;\n    if (!page_params.is_spectator) {\n        const user = people.get_by_user_id(page_params.user_id);\n        date_joined = user.date_joined;\n    } else {\n        // Spectators don't have an account, so we just prevent their\n        // date_joined is now.\n        date_joined = new Date();\n    }\n\n    settings_data.initialize(date_joined);\n\n    // The emoji module must be initialized before the right sidebar\n    // module, so that we can display custom emoji in statuses.\n    emoji.initialize({\n        realm_emoji: emoji_params.realm_emoji,\n        emoji_codes: generated_emoji_codes,\n    });\n\n    // These components must be initialized early, because other\n    // modules' initialization has not been audited for whether they\n    // expect DOM elements to always exist (As that did before these\n    // modules were migrated from Django templates to handlebars).\n    initialize_left_sidebar();\n    initialize_right_sidebar();\n    initialize_compose_box();\n    settings.initialize();\n    initialize_navbar();\n    initialize_message_feed_errors();\n    realm_logo.render();\n\n    message_lists.initialize();\n    alert_words.initialize(alert_words_params);\n    emojisets.initialize();\n    scroll_bar.initialize();\n    message_viewport.initialize();\n    navbar_alerts.initialize();\n    compose_closed_ui.initialize();\n    initialize_kitchen_sink_stuff();\n    echo.initialize();\n    stream_edit.initialize();\n    stream_edit_subscribers.initialize();\n    stream_data.initialize(stream_data_params);\n    pm_conversations.recent.initialize(pm_conversations_params);\n    muted_topics.initialize();\n    muted_users.initialize();\n    stream_settings_ui.initialize();\n    stream_list.initialize();\n    condense.initialize();\n    spoilers.initialize();\n    lightbox.initialize();\n    click_handlers.initialize();\n    copy_and_paste.initialize();\n    overlays.initialize();\n    invite.initialize();\n    timerender.initialize();\n    message_view_header.initialize();\n    server_events.initialize();\n    user_status.initialize(user_status_params);\n    compose_pm_pill.initialize();\n    search_pill_widget.initialize();\n    reload.initialize();\n    user_groups.initialize(user_groups_params);\n    unread.initialize();\n    bot_data.initialize(bot_params); // Must happen after people.initialize()\n    message_fetch.initialize(server_events.home_view_loaded);\n    message_scroll.initialize();\n    markdown.initialize(markdown_config.get_helpers());\n    linkifiers.initialize(page_params.realm_linkifiers);\n    realm_playground.initialize(page_params.realm_playgrounds, generated_pygments_data);\n    compose.initialize();\n    composebox_typeahead.initialize(); // Must happen after compose.initialize()\n    search.initialize();\n    tutorial.initialize();\n    notifications.initialize();\n    gear_menu.initialize();\n    giphy.initialize();\n    presence.initialize(presence_params);\n    settings_display.initialize();\n    settings_notifications.initialize();\n    settings_realm_user_settings_defaults.initialize();\n    settings_panel_menu.initialize();\n    settings_sections.initialize();\n    settings_toggle.initialize();\n    about_zulip.initialize();\n\n    // All overlays must be initialized before hashchange.js\n    hashchange.initialize();\n    unread_ui.initialize();\n    activity.initialize();\n    emoji_picker.initialize();\n    topic_list.initialize();\n    topic_zoom.initialize();\n    drafts.initialize();\n    sent_messages.initialize();\n    hotspots.initialize();\n    ui.initialize();\n    typing.initialize();\n    starred_messages.initialize();\n    user_status_ui.initialize();\n    fenced_code.initialize(generated_pygments_data);\n    message_edit_history.initialize();\n}\n\n$(() => {\n    blueslip.measure_time(\"initialize_everything\", () => {\n        initialize_everything();\n    });\n});\n", "<div id=\"compose-content\">\n    {{!-- scroll to bottom button is not part of compose but\n    helps us align it at various screens sizes with\n    minimal css and no JS. We keep it `position: absolute` to prevent\n    it changing compose box layout in any way. --}}\n    <div id=\"scroll-to-bottom-button-container\">\n        <div id=\"scroll-to-bottom-button-clickable-area\"  data-tippy-content=\"{{t 'Scroll to bottom' }}  &lt;span class='hotkey-hint'&gt;({{scroll_to_bottom_key_html}})&lt;/span&gt;\" data-tippy-allowHTML=\"true\">\n            <div id=\"scroll-to-bottom-button\">\n                <i class=\"fa fa-chevron-down\"></i>\n            </div>\n        </div>\n    </div>\n    <div id=\"compose_controls\" class=\"new-style\">\n        <div id=\"compose_buttons\">\n            <span class=\"new_message_button reply_button_container\">\n                <button type=\"button\" class=\"button small rounded compose_reply_button\"\n                  id=\"left_bar_compose_reply_button_big\"\n                  title=\"{{t 'Reply to selected message' }} (r)\">\n                    <span class=\"compose_reply_button_label\">{{t 'Compose message' }}</span>\n                </button>\n            </span>\n            <span class=\"new_message_button mobile_button_container\">\n                <button type=\"button\" class=\"button small rounded compose_mobile_button\"\n                  id=\"left_bar_compose_mobile_button_big\"\n                  title=\"{{t 'New message' }} (c)\">\n                    <span>+</span>\n                </button>\n            </span>\n            <span class=\"new_message_button stream_button_container\">\n                <button type=\"button\" class=\"button small rounded compose_stream_button\"\n                  id=\"left_bar_compose_stream_button_big\"\n                  title=\"{{t 'New topic' }} (c)\">\n                    <span class=\"compose_stream_button_label\">{{t 'New topic' }}</span>\n                </button>\n            </span>\n            {{#unless embedded }}\n            <span class=\"new_message_button private_button_container\">\n                <button type=\"button\" class=\"button small rounded compose_private_button\"\n                  id=\"left_bar_compose_private_button_big\"\n                  title=\"{{t 'New private message' }} (x)\">\n                    <span class=\"compose_private_button_label\">{{t 'New private message' }}</span>\n                </button>\n            </span>\n            {{/unless}}\n            <span class=\"new_message_button only-visible-for-spectators\">\n                <a class=\"no-underline button small rounded float-left\" href=\"/login\">\n                    {{t 'Log in to send messages' }}\n                </a>\n            </span>\n        </div>\n    </div>\n    <div class=\"message_comp\">\n        <div class=\"alert\" id=\"compose-send-status\">\n            <span class=\"compose-send-status-close\">&times;</span>\n            <span id=\"compose-error-msg\"></span>\n        </div>\n        <div id=\"compose_resolved_topic\" class=\"alert home-error-bar\"></div>\n        <div id=\"compose_invite_users\" class=\"alert home-error-bar\"></div>\n        <div id=\"compose-all-everyone\" class=\"alert home-error-bar\"></div>\n        <div id=\"compose-announce\" class=\"alert home-error-bar\"></div>\n        <div id=\"compose_not_subscribed\" class=\"alert home-error-bar\"></div>\n        <div id=\"compose_private_stream_alert\" class=\"alert home-error-bar\"></div>\n        <div id=\"out-of-view-notification\" class=\"notification-alert\"></div>\n        <div class=\"composition-area\">\n            <form id=\"send_message_form\" action=\"/json/messages\" method=\"post\">\n                {{ csrf_input }}\n                <div class=\"compose_table\">\n                    <div id=\"compose_top\">\n                        <div id=\"compose_top_right\" class=\"order-2\">\n                            <button type=\"button\" class=\"expand_composebox_button fa fa-angle-up\" aria-label=\"{{t 'Expand compose' }}\" data-tippy-content=\"{{t 'Expand compose' }}\"></button>\n                            <button type=\"button\" class=\"collapse_composebox_button fa fa-angle-down\" aria-label=\"{{t 'Collapse compose' }}\" data-tippy-content=\"{{t 'Collapse compose' }}\"></button>\n                            <button type=\"button\" class=\"close\" id='compose_close' data-tippy-content=\"{{t 'Cancel compose' }}  <span class='hotkey-hint'>(Esc)</span>\">&times;</button>\n                        </div>\n                        <div id=\"stream-message\" class=\"order-1\">\n                            <div class=\"stream-selection-header-colorblock message_header_stream left_part\" tab-index=\"-1\"></div>\n                            <div class=\"right_part\">\n                                <span id=\"compose-lock-icon\">\n                                    <i class=\"fa fa-lock\" title=\"{{t 'This is a private stream' }}\" aria-hidden=\"true\"></i>\n                                </span>\n                                <span id=\"compose-globe-icon\">\n                                    <i class=\"zulip-icon zulip-icon-globe\" title=\"{{t 'This is a web-public stream' }}\" aria-hidden=\"true\"></i>\n                                </span>\n                                <input type=\"text\" class=\"recipient_box\" name=\"stream_message_recipient_stream\" id=\"stream_message_recipient_stream\" maxlength=\"30\" value=\"\" placeholder=\"{{t 'Stream' }}\" autocomplete=\"off\" tabindex=\"0\" aria-label=\"{{t 'Stream' }}\" />\n                                <i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i>\n                                <input type=\"text\" class=\"recipient_box\" name=\"stream_message_recipient_topic\" id=\"stream_message_recipient_topic\" maxlength=\"60\" value=\"\" placeholder=\"{{t 'Topic' }}\" autocomplete=\"off\" tabindex=\"0\" aria-label=\"{{t 'Topic' }}\" />\n                            </div>\n                        </div>\n                        <div id=\"private-message\" class=\"order-1\">\n                            <div class=\"to_text\">\n                                <span>{{t 'To' }}:</span>\n                            </div>\n                            <div class=\"right_part\">\n                                <div class=\"pm_recipient\">\n                                    <div class=\"pill-container\" data-before=\"{{t 'You and' }}\">\n                                        <div class=\"input\" contenteditable=\"true\" id=\"private_message_recipient\" data-no-recipients-text=\"{{t 'Add one or more users' }}\" data-some-recipients-text=\"{{t 'Add another user...' }}\"></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"messagebox-wrapper\">\n                        <div class=\"messagebox\">\n                            <textarea class=\"new_message_textarea\" name=\"content\" id='compose-textarea' placeholder=\"{{t 'Compose your message here' }}\" tabindex=\"0\" aria-label=\"{{t 'Compose your message here...' }}\"></textarea>\n                            <div class=\"scrolling_list preview_message_area\" data-simplebar id=\"preview_message_area\" style=\"display:none;\">\n                                <div class=\"markdown_preview_spinner\"></div>\n                                <div class=\"preview_content rendered_markdown\"></div>\n                            </div>\n                            <div class=\"drag\"></div>\n                            <div id=\"below-compose-content\">\n                                <div class=\"compose_bottom_top_container\">\n                                    <div class=\"compose_right_float_container order-3\">\n                                        <button type=\"submit\" id=\"compose-send-button\" class=\"button small send_message animated-purple-button\" title=\"{{t 'Send' }} (Ctrl + Enter)\">\n                                            <img class=\"loader\" alt=\"\" src=\"\" />\n                                            <span>{{t 'Send' }}</span>\n                                        </button>\n                                    </div>\n                                    {{> compose_control_buttons }}\n                                </div>\n                                <div class=\"compose_bottom_bottom_container\">\n                                    <span id=\"compose_limit_indicator\"></span>\n                                    <div class=\"enter_sends\">\n                                        <span class=\"enter_sends_true\">\n                                            {{#tr}}\n                                                <z-shortcut></z-shortcut> to send\n                                                {{#*inline \"z-shortcut\"}}<kbd>Enter</kbd>{{/inline}}\n                                            {{/tr}}\n                                        </span>\n                                        <span class=\"enter_sends_false\">\n                                            {{#tr}}\n                                                <z-shortcut></z-shortcut> to send\n                                                {{#*inline \"z-shortcut\"}}<kbd>Ctrl</kbd>+<kbd>Enter</kbd>{{/inline}}\n                                            {{/tr}}\n                                        </span>\n                                        <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n", "<div class=\"compose_control_buttons_container order-1\">\n    <input type=\"file\" class=\"file_input notvisible pull-left\" multiple />\n    {{#if file_upload_enabled }}\n    <a role=\"button\" class=\"compose_control_button compose_upload_file fa fa-paperclip notdisplayed\" aria-label=\"{{t 'Upload files' }}\" tabindex=0 data-tippy-content=\"{{t 'Upload files' }}\"></a>\n    {{/if}}\n    <a role=\"button\" class=\"markdown_preview compose_control_button fa fa-eye\" aria-label=\"{{t 'Preview' }}\" tabindex=0 data-tippy-content=\"{{t 'Preview' }}\"></a>\n    <a role=\"button\" class=\"undo_markdown_preview compose_control_button fa fa-edit\" aria-label=\"{{t 'Write' }}\" tabindex=0 style=\"display:none;\" data-tippy-content=\"{{t 'Write' }}\"></a>\n    <a role=\"button\" class=\"compose_control_button fa fa-video-camera video_link\" aria-label=\"{{t 'Add video call' }}\" tabindex=0 data-tippy-content=\"{{t 'Add video call' }}\"></a>\n    <a role=\"button\" class=\"compose_control_button fa fa-smile-o emoji_map\" aria-label=\"{{t 'Add emoji' }}\" tabindex=0 data-tippy-content=\"{{t 'Add emoji' }}\"></a>\n    <a role=\"button\" class=\"compose_control_button fa fa-clock-o time_pick\" aria-label=\"{{t 'Add global time' }}\" tabindex=0 data-tippy-content=\"{{t 'Add global time<br />Everyone sees global times in their own time zone.' }}\" data-tippy-allowHTML=\"true\" data-tippy-maxWidth=\"none\"></a>\n    <a role=\"button\" class=\"compose_control_button compose_gif_icon {{#unless giphy_enabled }} hide {{/unless}} zulip-icon zulip-icon-gif\" aria-label=\"{{t 'Add GIF' }}\" tabindex=0 data-tippy-content=\"{{t 'Add GIF' }}\"></a>\n    <div class=\"divider hide-sm\">|</div>\n    <div class=\"{{#if message_id}}hide-lg{{else}}hide-sm{{/if}}\">\n        {{> compose_control_buttons_in_popover}}\n    </div>\n    <a role=\"button\" class=\"compose_control_button compose_draft_button hide-sm\" tabindex=0 href=\"#drafts\" data-tippy-content=\"{{t 'Drafts' }}\">\n        {{t 'Drafts' }}\n    </a>\n    <div class=\"compose_control_menu_wrapper\">\n        <a class=\"compose_control_button zulip-icon zulip-icon-ellipsis-v-solid hide {{#if message_id}}show-lg{{else}}show-sm{{/if}} compose_control_menu\" tabindex=0 data-tippy-content=\"Compose actions\"></a>\n    </div>\n</div>\n", "<tr id=\"recent_topic:{{topic_key}}\" {{#if unread_count}}class=\"unread_topic\"{{/if}} data-unread-count=\"{{unread_count}}\" data-muted=\"{{muted}}\" data-participated=\"{{participated}}\">\n    <td class=\"recent_topic_stream\">\n        <div class=\"recent_topics_focusable\">\n            <span id=\"stream_sidebar_privacy_swatch_{{stream_id}}\" class=\"stream-privacy filter-icon\" style=\"color: {{stream_color}}\">\n                {{> stream_privacy }}\n            </span>\n            <a href=\"{{stream_url}}\">{{stream}}</a>\n        </div>\n    </td>\n    <td class=\"recent_topic_name\">\n        <div class=\"flex_container\">\n            <div class=\"left_part recent_topics_focusable\">\n                <a href=\"{{topic_url}}\">{{topic}}</a>\n            </div>\n            <div class=\"right_part\">\n                {{#if unread_count}}<span class=\"unread_count\">{{unread_count}}</span>{{/if}}\n                <div class=\"recent_topic_actions\">\n                    <div class=\"recent_topics_focusable hidden-for-spectators\">\n                        {{#if topic_muted}}\n                        <i class=\"fa fa-bell-slash on_hover_topic_unmute recipient_bar_icon tippy-zulip-tooltip\" data-stream-id=\"{{stream_id}}\" data-topic-name=\"{{topic}}\" data-tippy-content=\"{{t 'Unmute topic' }}\" role=\"button\" tabindex=\"0\" aria-label=\"{{t 'Unmute topic' }}\"></i>\n                        {{else}}\n                        <i class=\"fa fa-bell-slash on_hover_topic_mute recipient_bar_icon tippy-zulip-tooltip\" data-stream-id=\"{{stream_id}}\" data-topic-name=\"{{topic}}\" data-tippy-content=\"{{t 'Mute topic' }}\" role=\"button\" tabindex=\"0\" aria-label=\"{{t 'Mute topic' }}\"></i>\n                        {{/if}}\n                    </div>\n                    <div class=\"recent_topics_focusable hidden-for-spectators\">\n                        <i class=\"fa fa-check-circle on_hover_topic_read recipient_bar_icon tippy-zulip-tooltip\" data-stream-id=\"{{stream_id}}\" data-topic-name=\"{{topic}}\" data-tippy-content=\"{{t 'Mark as read' }}\" role=\"button\" tabindex=\"0\" aria-label=\"{{t 'Mark as read' }}\"></i>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </td>\n    <td class='recent_topic_users'>\n        <ul class=\"recent_topics_participants\">\n            {{#if other_senders_count}}\n            <li class=\"recent_topics_participant_item tippy-zulip-tooltip\" data-tippy-content=\"{{other_sender_names_html}}\" data-tippy-allowHTML=\"true\">\n                <span class=\"recent_topics_participant_overflow\">+{{other_senders_count}}</span>\n            </li>\n            {{/if}}\n            {{#each senders}}\n                {{#if this.is_muted}}\n                <li class=\"recent_topics_participant_item participant_profile tippy-zulip-tooltip\" data-tippy-content=\"{{t 'Muted user'}}\" data-user-id=\"{{this.user_id}}\">\n                    <span><i class=\"fa fa-user recent_topics_participant_overflow\"></i></span>\n                </li>\n                {{else}}\n                <li class=\"recent_topics_participant_item participant_profile tippy-zulip-tooltip\" data-tippy-content=\"{{this.full_name}}\" data-user-id=\"{{this.user_id}}\">\n                    <img src=\"{{this.avatar_url_small}}\" class=\"recent_topics_participant_avatar\" />\n                </li>\n                {{/if}}\n            {{/each}}\n        </ul>\n    </td>\n    <td class=\"recent_topic_timestamp\">\n        <div class=\"last_msg_time tippy-zulip-tooltip\" data-tippy-content=\"{{this.full_last_msg_date_time}}\">\n            {{ last_msg_time }}\n        </div>\n    </td>\n</tr>\n", "<div class=\"right-sidebar\" id=\"right-sidebar\" role=\"navigation\">\n    <div class=\"right-sidebar-items\">\n        <div id=\"user-list\">\n            <div id=\"userlist-header\">\n                <h4 class='sidebar-title'\n                  id='userlist-title' data-tippy-content=\"{{t 'Search people' }} (w)\">\n                    {{t 'USERS' }}\n                </h4>\n                <i id=\"user_filter_icon\" class=\"fa fa-search\"\n                  aria-hidden=\"true\" aria-label=\"{{t 'Search people' }}\"\n                  data-tippy-content=\"{{t 'Search people' }} (w)\">\n                </i>\n            </div>\n            <div class=\"input-append notdisplayed\" id=\"user_search_section\">\n                <input class=\"user-list-filter home-page-input\" type=\"text\" autocomplete=\"off\" placeholder=\"{{t 'Search people' }}\" />\n                <button type=\"button\" class=\"btn clear_search_button\" id=\"clear_search_people_button\">\n                    <i class=\"fa fa-remove\" aria-hidden=\"true\"></i>\n                </button>\n            </div>\n            <div id=\"buddy_list_wrapper\" class=\"scrolling_list\" data-simplebar>\n                <ul id=\"user_presences\" class=\"filters required-text\" data-empty=\"{{t 'No matching users.' }}\"></ul>\n                <div id=\"buddy_list_wrapper_padding\"></div>\n            </div>\n        </div>\n        <div class=\"right-sidebar-shortcuts\">\n            {{#if can_invite_others_to_realm}}\n            <a id=\"invite-user-link\" href=\"#invite\"><i class=\"fa fa-user-plus\" aria-hidden=\"true\"></i>{{t 'Invite more users' }}</a>\n            {{/if}}\n            <a id=\"sidebar-keyboard-shortcuts\" data-overlay-trigger=\"keyboard-shortcuts\" class=\"hidden-for-spectators\">\n                <i class=\"fa fa-keyboard-o fa-2x tippy-zulip-tooltip\" id=\"keyboard-icon\" data-tippy-allowHTML=\"true\" data-tippy-content=\"{{t 'Keyboard shortcuts' }} &lt;span class='hotkey-hint'&gt;(?)&lt;/span&gt;\"></i>\n            </a>\n            <div class=\"only-visible-for-spectators\">\n                <div class=\"realm-description\">\n                    <div class=\"rendered_markdown\">{{rendered_markdown realm_description }}</div>\n                    <hr />\n                    <a href=\"/register\"  class=\"signup_button color_animated_button\">\n                        <i class=\"fa fa-pencil-square-o\"></i>\n                        <span>{{t 'Sign up' }}</span>\n                    </a>\n                    <a href=\"/login\" class=\"login_button color_animated_button\">\n                        <i class=\"fa fa-sign-in\"></i>\n                        <span>{{t 'Log in' }}</span>\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"], "filenames": ["static/js/popover_menus.js", "static/js/recent_topics_ui.js", "static/js/rendered_markdown.js", "static/js/timerender.ts", "static/js/tippyjs.js", "static/js/ui_init.js", "static/templates/compose.hbs", "static/templates/compose_control_buttons.hbs", "static/templates/recent_topic_row.hbs", "static/templates/right_sidebar.hbs"], "buggy_code_start_loc": [35, 1, 174, 229, 38, 206, 7, 10, 35, 30], "buggy_code_end_loc": [145, 313, 175, 240, 204, 207, 8, 11, 36, 31], "fixing_code_start_loc": [34, 2, 174, 229, 38, 206, 7, 10, 35, 30], "fixing_code_end_loc": [149, 316, 177, 240, 202, 207, 8, 11, 36, 31], "type": "CWE-79", "message": "Zulip is an open source team chat app. The `main` development branch of Zulip Server from June 2021 and later is vulnerable to a cross-site scripting vulnerability on the recent topics page. An attacker could maliciously craft a full name for their account and send messages to a topic with several participants; a victim who then opens an overflow tooltip including this full name on the recent topics page could trigger execution of JavaScript code controlled by the attacker. Users running a Zulip server from the main branch should upgrade from main (2022-03-01 or later) again to deploy this fix.", "other": {"cve": {"id": "CVE-2022-23656", "sourceIdentifier": "security-advisories@github.com", "published": "2022-03-02T21:15:08.160", "lastModified": "2022-03-09T21:10:56.777", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Zulip is an open source team chat app. The `main` development branch of Zulip Server from June 2021 and later is vulnerable to a cross-site scripting vulnerability on the recent topics page. An attacker could maliciously craft a full name for their account and send messages to a topic with several participants; a victim who then opens an overflow tooltip including this full name on the recent topics page could trigger execution of JavaScript code controlled by the attacker. Users running a Zulip server from the main branch should upgrade from main (2022-03-01 or later) again to deploy this fix."}, {"lang": "es", "value": "Zulip es una aplicaci\u00f3n de chat en equipo de c\u00f3digo abierto. La rama de desarrollo \"main\" de Zulip Server de junio de 2021 y posteriores, es susceptible a una vulnerabilidad de tipo cross-site scripting en la p\u00e1gina de temas recientes. Un atacante podr\u00eda dise\u00f1ar maliciosamente un nombre completo para su cuenta y enviar mensajes a un tema con varios participantes; una v\u00edctima que abra un tooltip de desbordamiento que incluya este nombre completo en la p\u00e1gina de temas recientes podr\u00eda desencadenar una ejecuci\u00f3n de c\u00f3digo JavaScript controlado por el atacante. Los usuarios que ejecuten un servidor Zulip desde la rama principal deben actualizar desde la principal (01-03-2022 o posterior) de nuevo para implementar esta correcci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zulip:zulip_server:*:*:*:*:*:*:*:*", "versionStartIncluding": "2021-06-03", "versionEndExcluding": "2022-03-01", "matchCriteriaId": "8D1C326D-A865-4460-AB1B-34B96D16B599"}]}]}], "references": [{"url": "https://github.com/zulip/zulip/commit/e090027adcbf62737d5b1f83a9618a9500a49321", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/zulip/zulip/security/advisories/GHSA-fc77-h3jc-6mfv", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/zulip/zulip/commit/e090027adcbf62737d5b1f83a9618a9500a49321"}}