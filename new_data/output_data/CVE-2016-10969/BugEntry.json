{"buggy_code": ["<?php\n/**\n *\n */\n\ndefined( 'ABSPATH' ) or die( \"Cheatin' uh?\" );\n\nclass SupportFlow_Admin {\n\n\tfunction __construct() {\n\t\tadd_action( 'wp_ajax_sf_forward_conversation', array( $this, 'action_wp_ajax_sf_email_conversation' ) );\n\t\tadd_filter( 'heartbeat_received', array( $this, 'filter_heartbeat_received' ), 10, 2 );\n\t\tadd_action( 'supportflow_after_setup_actions', array( $this, 'setup_actions' ) );\n\t\tadd_action( 'add_attachment', array( $this, 'action_add_attachment' ) );\n\t}\n\n\tpublic function setup_actions() {\n\n\t\t// Creating or updating a ticket\n\t\tadd_action( 'add_meta_boxes', array( $this, 'action_add_meta_boxes' ) );\n\t\tadd_action( 'save_post', array( $this, 'action_save_post' ) );\n\t\tadd_action( 'map_meta_cap', array( $this, 'filter_map_meta_cap' ), 10, 4 );\n\n\t\tif ( ! $this->is_edit_screen() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Everything\n\t\tadd_action( 'admin_enqueue_scripts', array( $this, 'action_admin_enqueue_scripts' ) );\n\t\tadd_filter( 'post_updated_messages', array( $this, 'filter_post_updated_messages' ) );\n\t\tadd_action( 'admin_init', array( $this, 'action_admin_init' ) );\n\n\t\t// Manage tickets view\n\t\tadd_filter( 'manage_' . SupportFlow()->post_type . '_posts_columns', array( $this, 'filter_manage_post_columns' ) );\n\t\tadd_filter( 'manage_edit-' . SupportFlow()->post_type . '_sortable_columns', array( $this, 'manage_sortable_columns' ) );\n\t\tadd_action( 'manage_posts_custom_column', array( $this, 'action_manage_posts_custom_column' ), 10, 2 );\n\t\tadd_filter( 'views_edit-' . SupportFlow()->post_type, array( $this, 'filter_views' ) );\n\t\tadd_filter( 'post_row_actions', array( $this, 'filter_post_row_actions' ), 10, 2 );\n\t\tadd_filter( 'bulk_actions-edit-' . SupportFlow()->post_type, array( $this, 'filter_bulk_actions' ) );\n\t\tadd_action( 'pre_get_posts', array( $this, 'action_pre_get_posts' ) );\n\t\tadd_action( 'admin_action_change_status', array( $this, 'handle_action_change_status' ) );\n\t\tadd_action( 'restrict_manage_posts', array( $this, 'action_restrict_manage_posts' ) );\n\n\t}\n\n\t/**\n\t * Re-sort the custom statuses so trash appears last\n\t */\n\tfunction action_admin_init() {\n\t\tglobal $wp_post_statuses, $pagenow;\n\n\t\t$trash_status = $wp_post_statuses['trash'];\n\t\tunset( $wp_post_statuses['trash'] );\n\t\t$wp_post_statuses['trash'] = $trash_status;\n\n\t\tif ( 'edit.php' == $pagenow ) {\n\t\t\tadd_filter( 'get_the_excerpt', array( $this, 'filter_get_the_excerpt' ) );\n\t\t}\n\t}\n\n\t/**\n\t * Do not allow users to view/edit replies outside of a ticket context.\n\t */\n\tpublic function filter_map_meta_cap( $caps, $cap, $user_id, $args ) {\n\t\tif ( $cap == 'edit_post' && ! empty( $args[0] ) ) {\n\t\t\t$post = get_post( absint( $args[0] ) );\n\t\t\tif ( $post->post_type == SupportFlow()->reply_type && $post->post_parent > 0 ) {\n\t\t\t\t$caps[] = 'do_not_allow';\n\t\t\t}\n\t\t}\n\n\t\treturn $caps;\n\t}\n\n\t/**\n\t * Add any CSS or JS we need for the admin\n\t */\n\tpublic function action_admin_enqueue_scripts() {\n\t\tglobal $pagenow;\n\n\t\t$handle = SupportFlow()->enqueue_style( 'supportflow-admin', 'admin.css' );\n\n\t\tif ( in_array( $pagenow, array( 'post.php', 'post-new.php' ) ) ) {\n\t\t\twp_enqueue_media();\n\n\t\t\t$customers_autocomplete_handle   = SupportFlow()->enqueue_script( 'supportflow-customers-autocomplete', 'customers-autocomplete.js', array( 'jquery', 'jquery-ui-autocomplete' ) );\n\t\t\t$ticket_attachment_handle        = SupportFlow()->enqueue_script( 'supportflow-ticket-attachments', 'ticket_attachments.js' );\n\t\t\t$supportflow_tickets_handle      = SupportFlow()->enqueue_script( 'supportflow-tickets', 'tickets.js' );\n\t\t\t$auto_save_handle                = SupportFlow()->enqueue_script( 'supportflow-auto-save', 'auto_save.js', array( 'jquery', 'heartbeat' ) );\n\n\t\t\twp_localize_script( $customers_autocomplete_handle, 'SFCustomersAc', array(\n\t\t\t\t'ajax_url'            => add_query_arg( 'action', SupportFlow()->extend->jsonapi->action, admin_url( 'admin-ajax.php' ) ),\n\t\t\t\t'get_customers_nonce' => wp_create_nonce( 'get_customers' ),\n\t\t\t) );\n\n\t\t\twp_localize_script( $ticket_attachment_handle, 'SFTicketAttachments', array(\n\t\t\t\t'frame_title'       => __( 'Attach files', 'supportflow' ),\n\t\t\t\t'button_title'      => __( 'Insert as attachment', 'supportflow' ),\n\t\t\t\t'remove_attachment' => __( 'Remove', 'supportflow' ),\n\t\t\t\t'sure_remove'       => __( 'Are you sure want to remove this attachment?', 'supportflow' ),\n\t\t\t) );\n\n\t\t\twp_localize_script( $supportflow_tickets_handle, 'SFTickets', array(\n\t\t\t\t'no_title_msg'      => __( 'You must need to specify the subject of the ticket', 'supportpress' ),\n\t\t\t\t'no_customer_msg'   => __( 'You must need to add atleast one customer', 'supportpress' ),\n\t\t\t\t'pagenow'           => $pagenow,\n\t\t\t\t'send_msg'          => __( 'Send Message', 'supportflow' ),\n\t\t\t\t'add_private_note'  => __( 'Add Private Note', 'supportflow' ),\n\t\t\t) );\n\n\t\t\twp_localize_script( $auto_save_handle, 'SFAutoSave', array(\n\t\t\t\t'ticket_id' => get_the_ID(),\n\t\t\t) );\n\n\t\t}\n\n\t\tif ( 'post.php' == $pagenow ) {\n\t\t\t$email_conversation_handle = SupportFlow()->enqueue_script( 'supportflow-email-conversation', 'email_conversation.js' );\n\n\t\t\twp_localize_script( $email_conversation_handle, 'SFEmailConversation', array(\n\t\t\t\t'post_id'                   => get_the_ID(),\n\t\t\t\t'sending_emails'            => __( 'Please wait while sending E-Mail(s)', 'supportflow' ),\n\t\t\t\t'failed_sending'            => __( 'Failed sending E-Mails', 'supportflow' ),\n\t\t\t\t'_email_conversation_nonce' => wp_create_nonce( 'sf_email_conversation' ),\n\t\t\t) );\n\t\t}\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic function action_wp_ajax_sf_email_conversation() {\n\t\tif ( false === check_ajax_referer( 'sf_email_conversation', '_email_conversation_nonce', false ) ) {\n\t\t\t_e( 'Invalid request. Please try refreshing the page.', 'supportflow' );\n\t\t\tdie;\n\t\t}\n\n\t\tif ( ! isset( $_REQUEST['email_ids'] ) || ! isset( $_REQUEST['post_id'] ) ) {\n\t\t\t_e( 'Invalid request. Please try refreshing the page.', 'supportflow' );\n\t\t\tdie;\n\t\t}\n\n\t\t$email_ids = SupportFlow()->extract_email_ids( $_REQUEST['email_ids'] );\n\t\t$ticket_id = (int) $_REQUEST['post_id'];\n\n\t\tif ( ! current_user_can( 'edit_post', $ticket_id ) ) {\n\t\t\t_e( 'You are not allowed to edit this item.' );\n\t\t\tdie;\n\t\t}\n\n\t\tif ( empty( $email_ids ) ) {\n\t\t\t_e( 'No valid E-Mail ID found', 'supportflow' );\n\t\t\tdie;\n\t\t}\n\n\t\tSupportFlow()->extend->emails->email_conversation( $ticket_id, $email_ids );\n\n\t\t_e( 'Successfully sented E-Mails', 'supportflow' );\n\t\texit;\n\n\t}\n\n\t/**\n\t * Add random characters to attachment uploaded through SupportFlow web UI\n\t *\n\t * @todo Conversion to a better way to determine if attachment if uploaded through SF web UI rather than HTTP referer\n\t */\n\tfunction action_add_attachment( $attachment_id ) {\n\t\tif ( empty( $_SERVER['HTTP_REFERER'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$post_type = SupportFlow()->post_type;\n\t\t$referer   = $_SERVER['HTTP_REFERER'];\n\n\t\t$url  = parse_url( $referer );\n\t\t$path = $url['scheme'] . '://' . $url['host'] . $url['path'];\n\n\t\tif ( isset( $url['query'] ) ) {\n\t\t\tparse_str( $url['query'], $query );\n\t\t}\n\n\t\t// Check if referred by SupportFlow ticket page\n\t\tif ( admin_url( 'post-new.php' ) == $path ) {\n\t\t\tif ( empty( $query['post_type'] ) || $query['post_type'] != $post_type ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} elseif ( admin_url( 'post.php' ) == $path ) {\n\t\t\tif ( empty( $query['post'] ) || get_post_type( (int) $query['post'] ) != $post_type ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tSupportFlow()->extend->attachments->secure_attachment_file( $attachment_id );\n\t}\n\n\t/**\n\t * Filter the messages that appear to the user after they perform an action on a ticket\n\t */\n\tpublic function filter_post_updated_messages( $messages ) {\n\t\tglobal $post;\n\n\t\t$messages[SupportFlow()->post_type] = array(\n\t\t\t0  => '', // Unused. Messages start at index 1.\n\t\t\t1  => __( 'Ticket updated.', 'supportflow' ),\n\t\t\t2  => __( 'Custom field updated.', 'supportflow' ),\n\t\t\t3  => __( 'Custom field deleted.', 'supportflow' ),\n\t\t\t4  => __( 'Ticket updated.', 'supportflow' ),\n\t\t\t/* translators: %s: date and time of the revision */\n\t\t\t5  => isset( $_GET['revision'] ) ? sprintf( __( 'Ticket restored to revision from %s', 'supportflow' ), wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,\n\t\t\t6  => __( 'Ticket updated.', 'supportflow' ),\n\t\t\t7  => __( 'Ticket updated.', 'supportflow' ),\n\t\t\t8  => __( 'Ticket updated.', 'supportflow' ),\n\t\t\t9  => __( 'Ticket updated.', 'supportflow' ),\n\t\t\t10 => __( 'Ticket updated.', 'supportflow' ),\n\t\t);\n\n\t\treturn $messages;\n\t}\n\n\tpublic function filter_heartbeat_received( $response, $data ) {\n\t\tif (\n\t\t\tisset( $data['supportflow-autosave'] ) &&\n\t\t\tis_array( $data['supportflow-autosave'] ) &&\n\t\t\tisset( $data['supportflow-autosave']['ticket_id'] ) &&\n\t\t\tcurrent_user_can( 'edit_post', (int) $data['supportflow-autosave']['ticket_id'] )\n\t\t) {\n\t\t\t// Save data received from client to the database as post meta\n\n\t\t\t$ticket_id = (int) $data['supportflow-autosave']['ticket_id'];\n\t\t\tunset( $data['supportflow-autosave']['ticket_id'] );\n\n\t\t\tif ( 'auto-draft' == get_post_status( $ticket_id ) ) {\n\t\t\t\twp_update_post( array( 'ID' => $ticket_id, 'post_status' => 'draft' ) );\n\t\t\t}\n\n\t\t\tforeach ( $data['supportflow-autosave'] as $element_id => $element_value ) {\n\t\t\t\tupdate_post_meta( $ticket_id, \"_sf_autosave_$element_id\", $element_value );\n\t\t\t}\n\n\t\t\techo $data['supportflow-autosave']['post_title'];\n\t\t\tif ( ! empty( $data['supportflow-autosave']['post_title'] ) ) {\n\t\t\t\twp_update_post( array( 'ID' => $ticket_id, 'post_title' => $data['supportflow-autosave']['post_title'] ) );\n\t\t\t}\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\n\t/**\n\t *\n\t */\n\tpublic function filter_views( $views ) {\n\t\t$post_type    = SupportFlow()->post_type;\n\t\t$statuses     = SupportFlow()->post_statuses;\n\t\t$status_slugs = array();\n\n\t\tforeach ( $statuses as $status => $status_data ) {\n\t\t\tif ( true == $status_data['show_tickets'] ) {\n\t\t\t\t$status_slugs[] = $status;\n\t\t\t}\n\t\t}\n\n\t\t$wp_query    = new WP_Query( array(\n\t\t\t'post_type'      => $post_type,\n\t\t\t'post_parent'    => 0,\n\t\t\t'posts_per_page' => 1,\n\t\t\t'post_status'    => $status_slugs,\n\t\t) );\n\t\t$total_posts = $wp_query->found_posts;\n\n\t\t$class    = empty( $class ) && empty( $_REQUEST['post_status'] ) && empty( $_REQUEST['show_sticky'] ) ? ' class=\"current\"' : '';\n\t\t$view_all = \"<a href='edit.php?post_type=$post_type'$class>\" . sprintf( _nx( 'All <span class=\"count\">(%s)</span>', 'All <span class=\"count\">(%s)</span>', $total_posts, 'posts' ), number_format_i18n( $total_posts ) ) . '</a>';\n\n\t\t$post_statuses = SupportFlow()->post_statuses;\n\t\tarray_pop( $post_statuses );\n\t\t$post_statuses = \"'\" . implode( \"','\", array_map( 'sanitize_key', array_keys( $post_statuses ) ) ) . \"'\";\n\n\t\t// @todo Only show \"Mine\" if the user is an agent\n\t\t$mine_args = array(\n\t\t\t'post_type' => SupportFlow()->post_type,\n\t\t\t'author'    => get_current_user_id(),\n\t\t);\n\t\t$wp_query  = new WP_Query( array(\n\t\t\t'post_type'      => SupportFlow()->post_type,\n\t\t\t'author'         => get_current_user_id(),\n\t\t\t'post_status'    => $post_statuses,\n\t\t\t'posts_per_page' => 1,\n\t\t) );\n\n\t\t$my_posts  = $wp_query->found_posts;\n\t\t$view_mine = '<a href=\"' . add_query_arg( $mine_args, admin_url( 'edit.php' ) ) . '\">' . sprintf( _nx( 'Mine <span class=\"count\">(%s)</span>', 'Mine <span class=\"count\">(%s)</span>', $my_posts, 'posts' ), number_format_i18n( $my_posts ) ) . '</a>';\n\n\t\t$unassigned_args = array(\n\t\t\t'post_type' => SupportFlow()->post_type,\n\t\t\t'author'    => 0,\n\t\t);\n\t\t$wp_query        = new WP_Query( array(\n\t\t\t'post_type'      => SupportFlow()->post_type,\n\t\t\t'author'         => 0,\n\t\t\t'post_status'    => $post_statuses,\n\t\t\t'posts_per_page' => 1,\n\t\t) );\n\n\t\t$unassigned_posts = $wp_query->found_posts;\n\t\t$view_unassigned  = '<a href=\"' . add_query_arg( $unassigned_args, admin_url( 'edit.php' ) ) . '\">' . sprintf( _nx( 'Unassigned <span class=\"count\">(%s)</span>', 'Unassigned <span class=\"count\">(%s)</span>', $unassigned_posts, 'posts' ), number_format_i18n( $unassigned_posts ) ) . '</a>';\n\n\t\t// Put 'All' and 'Mine' at the beginning of the array\n\t\tarray_shift( $views );\n\t\t$views               = array_reverse( $views );\n\t\t$views['unassigned'] = $view_unassigned;\n\t\t$views['mine']       = $view_mine;\n\t\t$views['all']        = $view_all;\n\t\t$views               = array_reverse( $views );\n\n\t\t// Remove private option from filter links as they are just private replies to ticket\n\t\tunset( $views['private'] );\n\n\t\treturn $views;\n\t}\n\n\t/**\n\t * Add custom filters for the Manage Tickets view\n\t */\n\tpublic function action_restrict_manage_posts() {\n\n\t\t// Filter to specific agents\n\t\t$agent_dropdown_args = array(\n\t\t\t'show_option_all' => __( 'Show all agents', 'supportflow' ),\n\t\t\t'name'            => 'author',\n\t\t\t'selected'        => ( ! empty( $_REQUEST['author'] ) ) ? (int) $_REQUEST['author'] : false,\n\t\t\t'who'             => 'authors',\n\t\t);\n\t\t$agent_dropdown_args = apply_filters( 'supportflow_admin_agent_dropdown_args', $agent_dropdown_args );\n\t\twp_dropdown_users( $agent_dropdown_args );\n\n\t\t// Filter to specify tag\n\t\t$tax_slug = SupportFlow()->tags_tax;\n\t\t$terms    = get_terms( SupportFlow()->tags_tax, array( 'hide_empty' => false ) );\n\n\t\techo \"<select name='\" . esc_attr( $tax_slug ) . \"' id='\" . esc_attr( $tax_slug ) . \"' class='postform'>\";\n\t\techo \"<option value=''>\" . __( 'Show All tags', 'supportflow' ) . \"</option>\";\n\t\tforeach ( $terms as $term ) {\n\t\t\t$selected = selected( isset( $_REQUEST[$tax_slug] ) && ( $_REQUEST[$tax_slug] == $term->slug ), true, false );\n\t\t\techo \"<option value='\" . esc_attr( $term->slug ) . \"' $selected>\" . esc_html( $term->name ) . '</option>';\n\t\t}\n\t\techo \"</select>\";\n\n\n\t\t// Filter to specify E-Mail account\n\t\t$email_accounts = SupportFlow()->extend->email_accounts->get_email_accounts( true );\n\t\techo \"<select name='email_account' id='email_account' class='postform'>\";\n\t\techo \"<option value=''>\" . __( 'Show All Accounts', 'supportflow' ) . \"</option>\";\n\t\tforeach ( $email_accounts as $id => $email_account ) {\n\t\t\t$selected = selected( isset( $_REQUEST['email_account'] ) && ( $_REQUEST['email_account'] == $id ), true, false );\n\t\t\techo \"<option value='\" . esc_attr( $id ) . \"'$selected>\" . esc_html( $email_account['username'] ) . '</option>';\n\t\t}\n\t\techo \"</select>\";\n\n\t}\n\n\t/**\n\t * Filter the actions available to the agent on the post type\n\t */\n\tfunction filter_post_row_actions( $row_actions, $post ) {\n\n\t\t// Rename these actions\n\t\tif ( isset( $row_actions['edit'] ) ) {\n\t\t\t$row_actions['edit'] = str_replace( __( 'Edit' ), __( 'View', 'supportflow' ), str_replace( __( 'Edit this item' ), __( 'View Ticket', 'supportflow' ), $row_actions['edit'] ) );\n\t\t}\n\n\t\t// Save the trash action for the end\n\t\tif ( isset( $row_actions['trash'] ) ) {\n\t\t\t$trash_action = $row_actions['trash'];\n\t\t\tunset( $row_actions['trash'] );\n\t\t} else {\n\t\t\t$trash_action = false;\n\t\t}\n\n\t\t// Allow an agent to easily close a ticket\n\t\t$statuses     = SupportFlow()->post_statuses;\n\t\t$status_slugs = array_keys( $statuses );\n\t\t$last_status  = array_pop( $status_slugs );\n\t\tif ( ! in_array( get_query_var( 'post_status' ), array( 'trash' ) ) ) {\n\n\t\t\tif ( $last_status == get_post_status( $post->ID ) ) {\n\t\t\t\t$change_to = $status_slugs[2];\n\t\t\t} else {\n\t\t\t\t$change_to = $last_status;\n\t\t\t}\n\n\t\t\t$args        = array(\n\t\t\t\t'action'      => 'change_status',\n\t\t\t\t'sf_nonce'    => wp_create_nonce( 'sf-change-status' ),\n\t\t\t\t'post_status' => $change_to,\n\t\t\t\t'ticket_id'   => $post->ID,\n\t\t\t\t'post_type'   => SupportFlow()->post_type,\n\t\t\t);\n\t\t\t$action_link = add_query_arg( $args, admin_url( 'edit.php' ) );\n\t\t\tif ( $last_status == $change_to ) {\n\t\t\t\t$title_attr  = esc_attr__( 'Close Ticket', 'supportflow' );\n\t\t\t\t$action_text = esc_html__( 'Close', 'supportflow' );\n\t\t\t} else {\n\t\t\t\t$title_attr  = esc_attr__( 'Reopen Ticket', 'supportflow' );\n\t\t\t\t$action_text = esc_html__( 'Reopen', 'supportflow' );\n\t\t\t}\n\n\t\t\tif ( current_user_can( 'edit_post', $post->ID ) ) {\n\t\t\t\t$row_actions['change_status'] = '<a href=\"' . esc_url( $action_link ) . '\" title=\"' . $title_attr . '\">' . $action_text . '</a>';\n\t\t\t}\n\t\t}\n\n\t\t// Actions we don't want\n\t\tunset( $row_actions['inline hide-if-no-js'] );\n\t\tunset( $row_actions['view'] );\n\n\t\tif ( $trash_action ) {\n\t\t\t$row_actions['trash'] = $trash_action;\n\t\t}\n\n\t\treturn $row_actions;\n\t}\n\n\t/**\n\t * Remove the 'edit' bulk action. Doesn't do much for us\n\t */\n\tpublic function filter_bulk_actions( $actions ) {\n\t\tunset( $actions['edit'] );\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t * Handle which tickets are show on the Manage Tickets view when\n\t */\n\tfunction action_pre_get_posts( $query ) {\n\t\tglobal $pagenow;\n\n\t\tif ( 'edit.php' != $pagenow || ! $query->is_main_query() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$statuses     = SupportFlow()->post_statuses;\n\t\t$status_slugs = array();\n\n\t\tforeach ( $statuses as $status => $status_data ) {\n\t\t\tif ( true == $status_data['show_tickets'] ) {\n\t\t\t\t$status_slugs[] = $status;\n\t\t\t}\n\t\t}\n\n\t\t// Order posts by post_modified if there's no orderby set\n\t\tif ( ! $query->get( 'orderby' ) ) {\n\t\t\t$query->set( 'orderby', 'modified' );\n\t\t\t$query->set( 'order', 'DESC' );\n\t\t}\n\n\t\t// Do our own custom search handling so we can search against reply text\n\t\tif ( $search = $query->get( 's' ) ) {\n\n\t\t\t// Get all replies that match our results\n\t\t\t$args             = array(\n\t\t\t\t'search' => $search,\n\t\t\t\t'status' => 'any',\n\t\t\t);\n\t\t\t$matching_replies = SupportFlow()->get_replies( $args );\n\t\t\t$post_ids         = wp_list_pluck( $matching_replies, 'post_parent' );\n\n\t\t\t$args       = array(\n\t\t\t\t's'                      => $search,\n\t\t\t\t'post_type'              => SupportFlow()->post_type,\n\t\t\t\t'no_found_rows'          => true,\n\t\t\t\t'update_post_meta_cache' => false,\n\t\t\t\t'update_post_term_cache' => false,\n\t\t\t\t'fields'                 => 'ids',\n\t\t\t);\n\t\t\t$post_query = new WP_Query( $args );\n\t\t\tif ( ! is_wp_error( $post_query ) ) {\n\t\t\t\t$post_ids = array_merge( $post_ids, $post_query->posts );\n\t\t\t}\n\n\t\t\t$query->set( 'post__in', $post_ids );\n\t\t\t// Ignore the original search query\n\t\t\tadd_filter( 'posts_search', array( $this, 'filter_posts_search' ) );\n\t\t}\n\n\t\t// Only show tickets with the last status if the last status is set\n\t\t$post_status = $query->get( 'post_status' );\n\t\tif ( ! $query->get( 's' ) && empty( $post_status ) ) {\n\t\t\t$query->set( 'post_status', $status_slugs );\n\t\t}\n\n\t\tadd_action( 'posts_clauses', array( $this, 'filter_author_clause' ), 10, 2 );\n\n\t\tif ( isset( $_GET['email_account'] ) && ! empty( $_GET['email_account'] ) ) {\n\t\t\t$query->set( 'meta_key', 'email_account' );\n\t\t\t$query->set( 'meta_value', (int) $_GET['email_account'] );\n\t\t}\n\t}\n\n\t/*\n\t * Show unassigned tickets when query author is 0\n\t */\n\tpublic function filter_author_clause( $clauses, $query ) {\n\n\t\tif ( isset( $query->query['author'] ) && 0 == $query->query['author'] ) {\n\t\t\t$clauses['where'] .= ' AND post_author = 0 ';\n\t\t}\n\n\t\treturn $clauses;\n\t}\n\n\t/**\n\t * Sometimes we want to ignore the original search query because we do our own\n\t */\n\tpublic function filter_posts_search( $posts_search ) {\n\t\treturn '';\n\t}\n\n\t/**\n\t * Handle $_GET actions in the admin\n\t */\n\tfunction handle_action_change_status() {\n\n\t\tif ( ! isset( $_GET['action'], $_GET['sf_nonce'], $_GET['post_status'], $_GET['ticket_id'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! wp_verify_nonce( $_GET['sf_nonce'], 'sf-change-status' ) ) {\n\t\t\twp_die( __( \"Doin' something phishy, huh?\", 'supportflow' ) );\n\t\t}\n\n\t\t$ticket_id = (int) $_GET['ticket_id'];\n\n\t\tif ( ! current_user_can( 'edit_post', $ticket_id ) ) {\n\t\t\twp_die( __( 'You are not allowed to edit this item.' ) );\n\t\t}\n\n\t\t$post_status = sanitize_key( $_GET['post_status'] );\n\t\t$new_ticket  = array(\n\t\t\t'ID'          => $ticket_id,\n\t\t\t'post_status' => $post_status,\n\t\t);\n\t\twp_update_post( $new_ticket );\n\t\twp_safe_redirect( wp_get_referer() );\n\t\texit;\n\t}\n\n\t/**\n\t * Manipulate the meta boxes appearing on the edit post view\n\t *\n\t * When creating a new ticket, you should be able to:\n\t *\n\t * When updating an existing ticket, you should be able to:\n\t *\n\t */\n\tpublic function action_add_meta_boxes() {\n\t\tglobal $pagenow;\n\n\t\tif ( ! $this->is_edit_screen() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$customers_box = 'tagsdiv-' . SupportFlow()->customers_tax;\n\t\tremove_meta_box( 'submitdiv', SupportFlow()->post_type, 'side' );\n\t\tremove_meta_box( $customers_box, SupportFlow()->post_type, 'side' );\n\t\tremove_meta_box( 'slugdiv', SupportFlow()->post_type, 'normal' );\n\n\t\tadd_meta_box( 'supportflow-details', __( 'Details', 'supportflow' ), array( $this, 'meta_box_details' ), SupportFlow()->post_type, 'side', 'high' );\n\t\tadd_meta_box( 'supportflow-subject', __( 'Subject', 'supportflow' ), array( $this, 'meta_box_subject' ), SupportFlow()->post_type, 'normal' );\n\t\tadd_meta_box( 'supportflow-customers', __( 'Customers', 'supportflow' ), array( $this, 'meta_box_customers' ), SupportFlow()->post_type, 'normal' );\n\t\tadd_meta_box( 'supportflow-cc-bcc', __( 'CC and BCC', 'supportflow' ), array( $this, 'meta_box_cc_bcc' ), SupportFlow()->post_type, 'normal' );\n\t\tadd_meta_box( 'supportflow-replies', __( 'Replies', 'supportflow' ), array( $this, 'meta_box_replies' ), SupportFlow()->post_type, 'normal' );\n\n\t\tif ( 'post.php' == $pagenow ) {\n\t\t\tadd_meta_box( 'supportflow-other-customers-tickets', __( 'Customer(s) recent Tickets', 'supportflow' ), array( $this, 'meta_box_other_customers_tickets' ), SupportFlow()->post_type, 'side' );\n\t\t\tadd_meta_box( 'supportflow-forward_conversation', __( 'Forward this conversation', 'supportflow' ), array( $this, 'meta_box_email_conversation' ), SupportFlow()->post_type, 'side' );\n\t\t}\n\t}\n\n\tpublic function meta_box_other_customers_tickets() {\n\t\t$ticket_customers = SupportFlow()->get_ticket_customers( get_the_ID(), array( 'fields' => 'slugs' ) );\n\t\t$statuses         = SupportFlow()->post_statuses;\n\t\t$status_slugs     = array_keys($statuses);\n\n\t\t$table = new SupportFlow_Table( '', false, false );\n\n\t\tif ( empty( $ticket_customers ) ) {\n\t\t\t$tickets = array();\n\n\t\t} else {\n\t\t\t$args = array(\n\t\t\t\t'post_type'    => SupportFlow()->post_type,\n\t\t\t\t'post_parent'  => 0,\n\t\t\t\t'post_status'  => $status_slugs,\n\t\t\t\t'posts_per_page'  => 10,\n\t\t\t\t'post__not_in' => array( get_the_id() ),\n\t\t\t\t'tax_query'    => array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'taxonomy' => SupportFlow()->customers_tax,\n\t\t\t\t\t\t'field'    => 'slug',\n\t\t\t\t\t\t'terms'    => $ticket_customers,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t$wp_query = new WP_Query( $args );\n\t\t\t$tickets  = $wp_query->posts;\n\t\t}\n\n\t\t$no_items = __( 'No recent tickets found.', 'supportflow' );\n\t\t$table->set_no_items( $no_items );\n\n\t\t$table->set_columns( array(\n\t\t\t'title'  => __( 'Subject', 'supportflow' ),\n\t\t\t'status' => __( 'Status', 'supportflow' ),\n\t\t) );\n\n\t\t$data = array();\n\t\tforeach ( $tickets as $ticket ) {\n\t\t\t$post_date     = strtotime( $ticket->post_date );\n\t\t\t$post_modified = strtotime( $ticket->post_modified );\n\t\t\t$title         = '<b>' . esc_html( $ticket->post_title ) . '</b>';\n\t\t\t$title         = \"<a href='post.php?post=\" . $ticket->ID . \"&action=edit'>\" . $title . \"</a>\";\n\t\t\t$data[]        = array(\n\t\t\t\t'title'  => $title,\n\t\t\t\t'status' => $statuses[$ticket->post_status]['label'],\n\t\t\t);\n\t\t}\n\t\t$table->set_data( $data );\n\t\t$table->display();\n\t}\n\n\tpublic function meta_box_email_conversation() {\n\t\t?>\n\t\t<p class=\"description\"><?php _e( \"Please enter E-Mail address separated by comma to whom you want to send this conversation.\", 'supportflow' ) ?></p>\n\t\t<br />\n\t\t<input type=\"text\" id=\"email_conversation_to\" />\n\t\t<?php submit_button( __( 'Send', 'supportflow' ), '', 'email_conversation_submit', false ); ?>\n\t\t<p id=\"email_conversation_status\"></p>\n\t<?php\n\t}\n\n\t/**\n\t * Show details about the ticket, and allow the post status and agent to be changed\n\t */\n\tpublic function meta_box_details() {\n\t\techo '<div id=\"minor-publishing\">\n\t\t\t\t<div id=\"misc-publishing-actions\">';\n\n\t\t$this->render_meta_box_details_email_account();\n\t\t$this->render_meta_box_details_opened();\n\t\t$this->render_meta_box_details_status();\n\t\t$this->render_meta_box_details_author();\n\t\t$this->render_meta_box_details_notifications();\n\t\t$this->render_meta_box_details_actions();\n\n\t\techo '</div>\n\t\t\t\t</div>';\n\n\t}\n\n\tpublic function render_meta_box_details_email_account() {\n\t\t// Get post E-Mail account\n\t\t$email_accounts = SupportFlow()->extend->email_accounts->get_email_accounts( true );\n\n\t\t$user_permissions = SupportFlow()->extend->permissions->get_user_permissions_data( get_current_user_id() );\n\t\t$user_permissions = $user_permissions['email_accounts'];\n\n\t\t$email_account_id = get_post_meta( get_the_id(), 'email_account', true );\n\n\t\tif ( '' == $email_account_id ) {\n\t\t\t$email_account_dropdown = '<select class=\"meta-item-dropdown\">';\n\t\t\tforeach ( $email_accounts as $id => $email_account ) {\n\t\t\t\tif ( empty( $email_account ) || ( ! current_user_can( 'manage_options' ) && ! in_array( $id, $user_permissions ) ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$email_account_dropdown .= '<option value=\"' . esc_attr( $id ) . '\" ' . '>' . esc_html( $email_account['username'] ) . '</option>';\n\t\t\t}\n\t\t\t$email_account_dropdown .= '</select>';\n\n\t\t\t$email_account_keys  = array_keys( $email_accounts );\n\t\t\t$email_account_first = $email_account_keys[0];\n\t\t\t$email_account_label = $email_accounts[$email_account_first]['username'];\n\t\t}\n\n\t\tif ( '' == $email_account_id ) {\n\t\t\t?>\n\t\t\t<div class=\"misc-pub-section meta-item\">\n\t\t\t\t<label class=\"meta-item-toggle-button\"><?php _e( 'Account', 'supportflow' ) ?>:</label>\n\t\t\t\t<span class=\"meta-item-label\"><?php _e( $email_account_label, 'supportflow' ) ?></span>\n\t\t\t\t<a href=\"#\" class=\"meta-item-toggle-button meta-item-toggle-content hide-if-no-js\">\n\t\t\t\t\t<span aria-hidden=\"true\"><?php _e( 'Edit' ) ?></span>\n\t\t\t\t</a>\n\t\t\t\t<input name=\"post_email_account\" class=\"meta-item-name\" value=\"<?php echo $email_account_first ?>\" type=\"hidden\" />\n\n\t\t\t\t<div class=\"meta-item-toggle-content hide-if-js\">\n\t\t\t\t\t<?php echo $email_account_dropdown ?>\n\t\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button meta-item-ok-button meta-item-toggle-button\"><?php _e( 'OK' ) ?></a>\n\t\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button-cancel meta-item-cancel-button meta-item-toggle-button\"><?php _e( 'Cancel' ) ?></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t<?php\n\t\t}\n\t}\n\n\tpublic function render_meta_box_details_opened() {\n\t\tglobal $pagenow;\n\n\t\t// Get post creation and last update time\n\t\tif ( 'post.php' == $pagenow ) {\n\t\t\t$opened        = get_the_date() . ' ' . get_the_time();\n\t\t\t$modified_gmt  = get_post_modified_time( 'U', true, get_the_ID() );\n\t\t\t$last_activity = sprintf( __( '%s ago', 'supportflow' ), human_time_diff( $modified_gmt ) );\n\t\t\t?>\n\t\t\t<div class=\"misc-pub-section meta-item\">\n\t\t\t\t<label><?php _e( 'Opened', 'supportflow' ) ?>:</label>\n\t\t\t\t<span class=\"meta-item-label\"><?php esc_html_e( $opened ) ?></span>\n\t\t\t</div>\n\n\t\t\t<!--Last ticket update time-->\n\t\t\t<div class=\"misc-pub-section meta-item\">\n\t\t\t\t<label><?php _e( 'Last Activity', 'supportflow' ) ?>:</label>\n\t\t\t\t<span class=\"meta-item-label\"><?php esc_html_e( $last_activity ) ?></span>\n\t\t\t</div>\n\t\t<?php\n\t\t}\n\t}\n\n\tpublic function render_meta_box_details_status() {\n\t\t// Get post status\n\t\t$post_statuses     = SupportFlow()->post_statuses;\n\t\t$current_status_id = get_post_status( get_the_ID() );\n\n\t\tif ( ! isset( $post_statuses[$current_status_id] ) ) {\n\t\t\t$post_statuses_key = array_keys( $post_statuses );\n\t\t\t$current_status_id = $post_statuses_key[0];\n\t\t}\n\n\t\t$current_status_label = $post_statuses[$current_status_id]['label'];\n\t\t?>\n\t\t<!--Ticket status box-->\n\t\t<div class=\"misc-pub-section meta-item\">\n\t\t\t<label class=\"meta-item-toggle-button\"><?php _e( 'Status', 'supportflow' ) ?>:</label>\n\t\t\t<span class=\"meta-item-label\"><?php esc_html_e( $current_status_label, 'supportflow' ) ?></span>\n\t\t\t<a href=\"#\" class=\"meta-item-toggle-button meta-item-toggle-content hide-if-no-js\">\n\t\t\t\t<span aria-hidden=\"true\"><?php _e( 'Edit' ) ?></span>\n\t\t\t</a>\n\t\t\t<input name=\"post_status\" class=\"meta-item-name\" value=\"<?php esc_attr_e( $current_status_id ) ?>\" type=\"hidden\" />\n\n\t\t\t<div class=\"meta-item-toggle-content hide-if-js\">\n\t\t\t\t<select class=\"meta-item-dropdown\">\n\t\t\t\t\t<?php foreach ( $post_statuses as $slug => $post_status ) : ?>\n\t\t\t\t\t\t<option value=\"<?php esc_attr_e( $slug ) ?>\"<?php selected( $current_status_id, $slug ) ?>><?php esc_html_e( $post_status['label'] ) ?></option>;\n\t\t\t\t\t<?php endforeach; ?>\n\t\t\t\t</select>\n\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button meta-item-ok-button meta-item-toggle-button\"><?php _e( 'OK' ) ?></a>\n\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button-cancel meta-item-cancel-button meta-item-toggle-button\"><?php _e( 'Cancel' ) ?></a>\n\t\t\t</div>\n\t\t</div>\n\t<?php\n\t}\n\n\tpublic function render_meta_box_details_author() {\n\t\t// Get post authors\n\t\t$post_author_id = get_post( get_the_ID() )->post_author;\n\n\t\t// WP change owner to current user if $post_author_id is 0 (returned when ticket is unassigned)\n\t\tif ( 0 == $post_author_id ) {\n\t\t\t$post_author_id = - 1;\n\t\t}\n\n\t\tif ( 0 < $post_author_id ) {\n\t\t\t$post_author_label = get_userdata( $post_author_id )->data->user_nicename;\n\t\t} else {\n\t\t\t$post_author_label = __( '-- Unassigned --', 'supportflow' );\n\t\t}\n\t\t$args                  = array(\n\t\t\t'show_option_none' => __( '-- Unassigned --', 'supportflow' ),\n\t\t\t'selected'         => $post_author_id,\n\t\t\t'id'               => '',\n\t\t\t'name'             => '',\n\t\t\t'who'              => 'author',\n\t\t\t'class'            => 'meta-item-dropdown',\n\t\t\t'echo'             => false\n\t\t);\n\t\t$post_authors_dropdown = wp_dropdown_users( $args );\n\t\t?>\n\t\t<div class=\"misc-pub-section meta-item\">\n\t\t\t<label class=\"meta-item-toggle-button\"><?php _e( 'Owner', 'supportflow' ) ?>:</label>\n\t\t\t<span class=\"meta-item-label\"><?php _e( $post_author_label, 'supportflow' ) ?></span>\n\t\t\t<a href=\"#\" class=\"meta-item-toggle-button meta-item-toggle-content hide-if-no-js\">\n\t\t\t\t<span aria-hidden=\"true\"><?php _e( 'Edit' ) ?></span>\n\t\t\t</a>\n\t\t\t<input name=\"post_author\" class=\"meta-item-name\" value=\"<?php esc_attr_e( $post_author_id ) ?>\" type=\"hidden\" />\n\n\t\t\t<div class=\"meta-item-toggle-content hide-if-js\">\n\t\t\t\t<?php echo $post_authors_dropdown ?>\n\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button meta-item-ok-button meta-item-toggle-button\"><?php _e( 'OK' ) ?></a>\n\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button-cancel meta-item-cancel-button meta-item-toggle-button\"><?php _e( 'Cancel' ) ?></a>\n\t\t\t</div>\n\t\t</div>\n\t<?php\n\t}\n\n\tpublic function render_meta_box_details_notifications() {\n\t\tglobal $pagenow;\n\n\t\t// Get E-Mail notification settings\n\t\t$notification_id          = 0;\n\t\t$notification_label       = 'Default';\n\t\t$notification_label_title = 'Choose default if you want to receive E-Mail notifications based on what you set in `E-Mail notification` page. Choose Enable/Disable if you want to override those settings';\n\t\t$notification_dropdown    = '';\n\t\t$notification_dropdown .= '<select class=\"meta-item-dropdown\">';\n\n\t\tif ( 'post-new.php' == $pagenow ) {\n\t\t\t$notification_dropdown .= '<option value=\"default\">' . __( 'Default', 'supportflow' ) . '</option>';\n\t\t\t$notification_dropdown .= '<option value=\"enable\">' . __( 'Subscribed', 'supportflow' ) . '</option>';\n\t\t\t$notification_dropdown .= '<option value=\"disable\">' . __( 'Unsubscribed', 'supportflow' ) . '</option>';\n\t\t} elseif ( 'post.php' == $pagenow ) {\n\t\t\t$email_notifications_override = get_post_meta( get_the_ID(), 'email_notifications_override', true );\n\t\t\t$current_user_id              = get_current_user_id();\n\n\t\t\tif ( isset( $email_notifications_override[$current_user_id] ) ) {\n\t\t\t\t$override_status = $email_notifications_override[$current_user_id];\n\t\t\t\tif ( 'enable' == $override_status ) {\n\t\t\t\t\t$notification_label = 'Subscribed';\n\t\t\t\t\t$notification_id    = 1;\n\t\t\t\t} elseif ( 'disable' == $override_status ) {\n\t\t\t\t\t$notification_label = 'Unsubscribed';\n\t\t\t\t\t$notification_id    = 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$notification_dropdown .= '<option value=\"default\"' . selected( $notification_id, 0, false ) . '>' . __( 'Default', 'supportflow' ) . '</option>';\n\t\t\t$notification_dropdown .= '<option value=\"enable\"' . selected( $notification_id, 1, false ) . '>' . __( 'Subscribed', 'supportflow' ) . '</option>';\n\t\t\t$notification_dropdown .= '<option value=\"disable\"' . selected( $notification_id, 2, false ) . '>' . __( 'Unsubscribed', 'supportflow' ) . '</option>';\n\t\t}\n\n\t\t$notification_dropdown .= '</select>';\n\t\t?>\n\t\t<div class=\"misc-pub-section meta-item\">\n\t\t\t<label class=\"meta-item-toggle-button\" title=\"<?php _e( $notification_label_title, 'supportflow' ) ?>\"><?php _e( 'E-Mail Notifications', 'supportflow' ) ?>:</label>\n\t\t\t<span class=\"meta-item-label\"><?php esc_html_e( $notification_label, 'supportflow' ) ?></span>\n\t\t\t<a href=\"#\" class=\"meta-item-toggle-button meta-item-toggle-content hide-if-no-js\">\n\t\t\t\t<span aria-hidden=\"true\"><?php _e( 'Edit' ) ?></span>\n\t\t\t</a>\n\t\t\t<input name=\"post_email_notifications_override\" class=\"meta-item-name\" value=\"<?php echo $notification_id ?>\" type=\"hidden\" />\n\n\t\t\t<div class=\"meta-item-toggle-content hide-if-js\">\n\t\t\t\t<?php echo $notification_dropdown ?>\n\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button meta-item-ok-button meta-item-toggle-button\"><?php _e( 'OK' ) ?></a>\n\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button-cancel meta-item-cancel-button meta-item-toggle-button\"><?php _e( 'Cancel' ) ?></a>\n\t\t\t</div>\n\t\t</div>\n\t<?php\n\t}\n\n\tpublic function render_meta_box_details_actions() {\n\t\tglobal $pagenow;\n\n\t\t$post_statuses     = SupportFlow()->post_statuses;\n\t\t$current_status_id = get_post_status( get_the_ID() );\n\n\t\tif ( ! isset( $post_statuses[$current_status_id] ) ) {\n\t\t\t$post_statuses_key = array_keys( $post_statuses );\n\t\t\t$current_status_id = $post_statuses_key[0];\n\t\t}\n\n\t\t$current_status_label = $post_statuses[$current_status_id]['label'];\n\n\t\t$close_ticket_label = __( 'Close ticket', 'supportflow' );\n\n\t\t// Get submit button label\n\t\tif ( 'post-new.php' == $pagenow ) {\n\t\t\t$submit_text = __( 'Start Ticket', 'supportflow' );\n\t\t} else {\n\t\t\t$submit_text = __( 'Update Ticket', 'supportflow' );\n\t\t}\n\t\t?>\n\t\t<div id=\"major-publishing-actions\">\n\t\t\t<?php if ( 'post.php' == $pagenow && $current_status_id != 'sf_closed' ) : ?>\n\t\t\t\t<div id=\"delete-action\">\n\t\t\t\t\t<?php submit_button( $close_ticket_label, '', 'close-ticket-submit', false, array( 'id' => 'close-ticket-submit' ) ); ?>\n\t\t\t\t</div>\n\t\t\t<?php endif; ?>\n\t\t\t<div id=\"publishing-action\">\n\t\t\t\t<?php submit_button( $submit_text, 'save-button primary', 'update-ticket', false ); ?>\n\t\t\t</div>\n\t\t\t<div class=\"clear\"></div>\n\t\t</div>\n\t<?php\n\t}\n\n\t/**\n\t * A box that appears at the top\n\t */\n\tpublic function meta_box_subject() {\n\n\t\t$placeholder = __( 'What is your conversation about?', 'supportflow' );\n\t\techo '<h4>' . __( 'Subject', 'supportflow' ) . '</h4>';\n\t\techo '<input type=\"text\" id=\"subject\" name=\"post_title\" class=\"sf_autosave\" placeholder=\"' . $placeholder . '\" value=\"' . get_the_title() . '\" autocomplete=\"off\" />';\n\t\techo '<p class=\"description\">' . __( 'Please describe what this ticket is about in several words', 'supportflow' ) . '</p>';\n\n\t}\n\n\t/**\n\t * Add a form element where the user can change the customers\n\t */\n\tpublic function meta_box_customers() {\n\n\t\t$placeholder = __( 'Who are you starting a conversation with?', 'supportflow' );\n\t\tif ( 'draft' == get_post_status( get_the_ID() ) ) {\n\t\t\t$customers_string = get_post_meta( get_the_ID(), '_sf_autosave_customers', true );\n\t\t} else {\n\t\t\t$customers        = SupportFlow()->get_ticket_customers( get_the_ID(), array( 'fields' => 'emails' ) );\n\t\t\t$customers_string = implode( ', ', $customers );\n\t\t\t$customers_string .= empty( $customers_string ) ? '' : ', ';\n\t\t}\n\t\techo '<h4>' . __( 'Customer(s)', 'supportflow' ) . '</h4>';\n\t\techo '<input type=\"text\" id=\"customers\" name=\"customers\" class=\"sf_autosave\" placeholder=\"' . $placeholder . '\" value=\"' . esc_attr( $customers_string ) . '\" autocomplete=\"off\" />';\n\t\techo '<p class=\"description\">' . __( 'Enter each customer email address, separated with a comma', 'supportflow' ) . '</p>';\n\t}\n\n\t/**\n\t * Add a form element where you can choose cc and bcc receiver of reply\n\t */\n\tpublic function meta_box_cc_bcc() {\n\t\t$cc_value = esc_attr( get_post_meta( get_the_ID(), '_sf_autosave_cc', true ) );\n\t\t$bcc      = esc_attr( get_post_meta( get_the_ID(), '_sf_autosave_bcc', true ) );\n\t\t?>\n\t\t<p class=\"description\"> <?php _e( \"Please add all the E-Mail ID's seperated by comma.\", 'supportflow' ) ?></p>\n\t\t<h4 class=\"inline\"><?php _e( \"CC: \", 'supportflow' ) ?></h4>\n\t\t<input type=\"text\" class=\"sf_autosave\" id=\"cc\" name=\"cc\" value=\"<?php echo $cc_value ?>\" />\n\t\t<h4 class=\"inline\"> <?php _e( \"BCC: \", 'supportflow' ) ?></h4>\n\t\t<input type=\"text\" class=\"sf_autosave\" id=\"bcc\" name=\"bcc\" value=\"<?php echo $bcc ?>\" />\n\t<?php\n\t}\n\n\t/**\n\t * Standard listing of replies includes a form at the top\n\t * and any existing replies listed in reverse chronological order\n\t */\n\tpublic function meta_box_replies() {\n\t\tglobal $pagenow;\n\n\t\t$predefined_replies = get_posts( array( 'post_type' => SupportFlow()->predefinded_replies_type, 'posts_per_page' => -1 ) );\n\t\t$pre_defs           = array( array( 'title' => __( 'Pre-defined Replies', 'supportflow' ), 'content' => '' ) );\n\n\t\tforeach ( $predefined_replies as $predefined_reply ) {\n\t\t\t$content = $predefined_reply->post_content;\n\n\t\t\tif ( ! empty( $predefined_reply->post_title ) ) {\n\t\t\t\t$title = $predefined_reply->post_title;\n\t\t\t} else {\n\t\t\t\t$title = $predefined_reply->post_content;\n\t\t\t}\n\n\t\t\t// Limit size to 75 characters\n\t\t\tif ( strlen( $title ) > 75 ) {\n\t\t\t\t$title = substr( $title, 0, 75 - 3 ) . '...';\n\t\t\t}\n\n\t\t\tif ( 0 != strlen( $content ) ) {\n\t\t\t\t$pre_defs[] = array( 'title' => $title, 'content' => $content );\n\t\t\t}\n\t\t}\n\n\t\t$email_account_id = get_post_meta( get_the_ID(), 'email_account', true );\n\t\t$email_account    = SupportFlow()->extend->email_accounts->get_email_account( $email_account_id );\n\n\t\t$ticket_lock       = ( null == $email_account && '' != $email_account_id );\n\t\t$disabled_attr     = disabled( $ticket_lock, true, false );\n\t\t$submit_attr_array = $ticket_lock ? array( 'disabled' => 'true' ) : array();\n\n\t\tif ( $ticket_lock ) {\n\t\t\t$placeholder = __( \"Ticket is locked permanently because E-Mail account associated with it is deleted. Please create a new ticket now. You can't now reply to it.\", 'supportflow' );\n\t\t} else {\n\t\t\t$placeholders = array(\n\t\t\t\t__( \"What's burning?\", 'supportflow' ),\n\t\t\t\t__( 'What do you need to get off your chest?', 'supportflow' ),\n\t\t\t);\n\t\t\t$rand         = array_rand( $placeholders );\n\t\t\t$placeholder  = $placeholders[$rand];\n\t\t}\n\n\t\techo '<div class=\"alignleft\"><h4>' . __( 'Conversation', 'supportflow' ) . '</h4></div>';\n\t\techo '<div class=\"alignright\">';\n\t\techo '<select id=\"predefs\" ' . $disabled_attr . ' class=\"predefined_replies_dropdown\">';\n\t\tforeach ( $pre_defs as $pre_def ) {\n\t\t\techo '<option class=\"predef\" data-content=\"' . esc_attr( $pre_def['content'] ) . '\">' . esc_html( $pre_def['title'] ) . \"</option>\\n\";\n\t\t}\n\t\techo '</select></div>';\n\n\t\techo '<div id=\"ticket-reply-box\">';\n\t\techo \"<textarea id='reply' name='reply' $disabled_attr class='ticket-reply sf_autosave' rows='4' placeholder='\" . esc_attr( $placeholder ) . \"'>\";\n\t\techo esc_html( get_post_meta( get_the_ID(), '_sf_autosave_reply', true ) );\n\t\techo \"</textarea>\";\n\n\t\techo '<div id=\"message-tools\">';\n\t\techo '<div id=\"replies-attachments-wrap\">';\n\t\techo '<div class=\"drag-drop-buttons\">';\n\t\techo '<input id=\"reply-attachment-browse-button\" ' . $disabled_attr . ' type=\"button\" value=\"' . esc_attr( __( 'Attach files', 'supportflow' ) ) . '\" class=\"button\" />';\n\t\techo '</div>';\n\t\techo '<ul id=\"replies-attachments-list\">';\n\t\techo '</ul>';\n\t\techo '<input type=\"hidden\" id=\"reply-attachments\" name=\"reply-attachments\" value=\",\" />';\n\t\techo '</div>';\n\t\techo '<div id=\"submit-action\">';\n\t\t$signature_label_title = __( 'Append your signature at the bottom of the reply. Signature can be removed or changed in preferences page', 'supportflow' );\n\t\t$insert_signature_default = (boolean) get_user_meta( get_current_user_id(), 'sf_insert_signature_default', true );\n\t\techo '<input type=\"checkbox\" ' . $disabled_attr . checked( $insert_signature_default, true, false ) . ' id=\"insert-signature\" name=\"insert-signature\" />';\n\t\techo \"<label for='insert-signature' title='$signature_label_title'>\" . __( 'Insert signature', 'supportflow' ) . '</label>';\n\t\techo '<input type=\"checkbox\" ' . $disabled_attr . ' id=\"mark-private\" name=\"mark-private\" />';\n\t\techo '<label for=\"mark-private\">' . __( 'Mark private', 'supportflow' ) . '</label>';\n\t\tif ( 'post-new.php' == $pagenow ) {\n\t\t\t$submit_text = __( 'Start Ticket', 'supportflow' );\n\t\t} else {\n\t\t\t$submit_text = __( 'Send Message', 'supportflow' );\n\t\t}\n\t\tsubmit_button( $submit_text, 'primary save-button', 'insert-reply', false, $submit_attr_array );\n\t\techo '</div>';\n\t\techo '</div>';\n\n\t\techo '</div>';\n\n\t\techo '<div class=\"clear\"></div>';\n\n\t\t$this->display_ticket_replies();\n\t}\n\n\tpublic function display_ticket_replies() {\n\t\t$private_replies = SupportFlow()->get_ticket_replies( get_the_ID(), array( 'status' => 'private' ) );\n\n\t\tif ( ! empty( $private_replies ) ) {\n\t\t\techo '<ul class=\"private-replies\">';\n\t\t\tforeach ( $private_replies as $reply ) {\n\t\t\t\techo '<li>';\n\t\t\t\techo '<div class=\"ticket-reply\">';\n\t\t\t\t$post_content = stripslashes( $reply->post_content );\n\t\t\t\t$post_content = $this->hide_quoted_text( $post_content );\n\t\t\t\t$post_content = wpautop( make_clickable( $post_content ) );\n\t\t\t\techo $post_content;\n\t\t\t\tif ( $attachment_ids = get_post_meta( $reply->ID, 'sf_attachments' ) ) {\n\t\t\t\t\techo '<ul class=\"ticket-reply-attachments\">';\n\t\t\t\t\tforeach ( $attachment_ids as $attachment_id ) {\n\t\t\t\t\t\t$attachment_link = SupportFlow()->extend->attachments->get_attachment_url( $attachment_id );\n\t\t\t\t\t\techo '<li><a target=\"_blank\" href=\"' . esc_url( $attachment_link ) . '\">' . esc_html( get_the_title( $attachment_id ) ) . '</a></li>';\n\t\t\t\t\t}\n\t\t\t\t\techo '</ul>';\n\t\t\t\t}\n\t\t\t\techo '</div>';\n\t\t\t\t$reply_author    = get_post_meta( $reply->ID, 'reply_author', true );\n\t\t\t\t$reply_timestamp = sprintf( __( 'Noted by %1$s on %2$s at %3$s', 'supportflow' ), $reply_author, get_the_date( '', $reply->ID ), get_the_time( '', $reply->ID ) );\n\t\t\t\t$modified_gmt    = get_post_modified_time( 'U', true, $reply->ID );\n\t\t\t\t$last_activity   = sprintf( __( '%s ago', 'supportflow' ), human_time_diff( $modified_gmt ) );\n\t\t\t\techo '<div class=\"ticket-meta\"><span class=\"reply-timestamp\">' . esc_html( $reply_timestamp ) . ' (' . $last_activity . ')' . '</span></div>';\n\t\t\t\techo '</li>';\n\t\t\t}\n\t\t\techo '</ul>';\n\t\t}\n\n\t\t$replies = SupportFlow()->get_ticket_replies( get_the_ID(), array( 'status' => 'public' ) );\n\t\tif ( ! empty( $replies ) ) {\n\t\t\techo '<ul class=\"ticket-replies\">';\n\t\t\tforeach ( $replies as $reply ) {\n\t\t\t\t$reply_author       = get_post_meta( $reply->ID, 'reply_author', true );\n\t\t\t\t$reply_author_email = get_post_meta( $reply->ID, 'reply_author_email', true );\n\t\t\t\techo '<li>';\n\t\t\t\techo '<div class=\"reply-avatar\">' . get_avatar( $reply_author_email, 72 );\n\t\t\t\techo '<p class=\"reply-author\">' . esc_html( $reply_author ) . '</p>';\n\t\t\t\techo '</div>';\n\t\t\t\techo '<div class=\"ticket-reply\">';\n\n\t\t\t\t$mail_status = get_post_meta( $reply->ID, '_sf_mail_status', true );\n\t\t\t\tif ( isset( $mail_status['result'] ) && $mail_status['result'] === false ) {\n\t\t\t\t\tprintf( '<span class=\"sf-delivery-failed\"><span class=\"dashicons dashicons-info\"></span> %s</span>', esc_html__( 'Delivery failed! Please check your SMTP settings and try again.', 'supportflow' ) );\n\t\t\t\t}\n\n\t\t\t\t$post_content = stripslashes( $reply->post_content );\n\t\t\t\t$post_content = $this->hide_quoted_text( $post_content );\n\t\t\t\t$post_content = wpautop( make_clickable( $post_content ) );\n\n\t\t\t\techo $post_content;\n\t\t\t\tif ( $attachment_ids = get_post_meta( $reply->ID, 'sf_attachments' ) ) {\n\t\t\t\t\techo '<ul class=\"ticket-reply-attachments\">';\n\t\t\t\t\tforeach ( $attachment_ids as $attachment_id ) {\n\t\t\t\t\t\t$attachment_link = SupportFlow()->extend->attachments->get_attachment_url( $attachment_id );\n\t\t\t\t\t\techo '<li><a target=\"_blank\" href=\"' . esc_url( $attachment_link ) . '\">' . esc_html( get_the_title( $attachment_id ) ) . '</a></li>';\n\t\t\t\t\t}\n\t\t\t\t\techo '</ul>';\n\t\t\t\t}\n\t\t\t\techo '</div>';\n\t\t\t\t$reply_timestamp = sprintf( __( '%s at %s', 'supportflow' ), get_the_date( '', $reply->ID ), get_the_time( '', $reply->ID ) );\n\t\t\t\t$modified_gmt    = get_post_modified_time( 'U', true, $reply->ID );\n\t\t\t\t$last_activity   = sprintf( __( '%s ago', 'supportflow' ), human_time_diff( $modified_gmt ) );\n\t\t\t\techo '<div class=\"ticket-meta\"><span class=\"reply-timestamp\">' . esc_html( $reply_timestamp ) . ' (' . $last_activity . ')' . '</span></div>';\n\t\t\t\techo '</li>';\n\t\t\t}\n\t\t\techo '</ul>';\n\t\t}\n\n\t\techo '<div class=\"clear\"></div>';\n\n\t}\n\n\t/**\n\t * Modifications to the columns appearing in the All Tickets view\n\t */\n\tpublic function filter_manage_post_columns( $columns ) {\n\n\t\t$new_columns = array(\n\t\t\t'cb'          => $columns['cb'],\n\t\t\t'updated'     => __( 'Updated', 'supportflow' ),\n\t\t\t'title'       => __( 'Subject', 'supportflow' ),\n\t\t\t'sf_excerpt'  => __( 'Excerpt', 'supportflow' ),\n\t\t\t'customers' => __( 'Customers', 'supportflow' ),\n\t\t\t'status'      => __( 'Status', 'supportflow' ),\n\t\t\t'author'      => __( 'Agent', 'supportflow' ),\n\t\t\t'sf_replies'  => '<span title=\"' . __( 'Reply count', 'supportflow' ) . '\" class=\"comment-grey-bubble\"></span>',\n\t\t\t'email'       => __( 'E-Mail account', 'supportflow' ),\n\t\t\t'created'     => __( 'Created', 'support' ),\n\t\t);\n\n\t\treturn $new_columns;\n\t}\n\n\t/**\n\t * Make some other columns sortable too\n\t */\n\tpublic function manage_sortable_columns( $columns ) {\n\t\t$columns['updated'] = 'modified';\n\t\t$columns['created'] = 'date';\n\n\t\treturn $columns;\n\t}\n\n\t/**\n\t * Use the most recent public reply as the post excerpt\n\t * on the Manage Tickets view so mode=excerpt works well\n\t */\n\tpublic function filter_get_the_excerpt( $orig ) {\n\t\tif ( $reply = array_pop( SupportFlow()->get_ticket_replies( get_the_ID() ) ) ) {\n\t\t\t$reply_author = get_post_meta( $reply->ID, 'reply_author' );\n\n\t\t\treturn $reply_author . ': \"' . wp_trim_excerpt( $reply->post_content ) . '\"';\n\t\t} else {\n\t\t\treturn $orig;\n\t\t}\n\t}\n\n\t/**\n\t * Produce the column values for the custom columns we created\n\t */\n\tfunction action_manage_posts_custom_column( $column_name, $ticket_id ) {\n\n\t\tswitch ( $column_name ) {\n\t\t\tcase 'updated':\n\t\t\t\t$modified_gmt = get_post_modified_time( 'U', true, $ticket_id );\n\t\t\t\techo sprintf( __( '%s ago', 'supportflow' ), human_time_diff( $modified_gmt ) );\n\t\t\t\tbreak;\n\t\t\tcase 'sf_excerpt':\n\t\t\t\t$replies = SupportFlow()->get_ticket_replies( $ticket_id, array( 'posts_per_page' => 1, 'order' => 'ASC' ) );\n\t\t\t\tif ( ! isset( $replies[0] ) ) {\n\t\t\t\t\techo '\u2014';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$first_reply = $replies[0]->post_content;\n\t\t\t\tif ( strlen( $first_reply ) > 50 ) {\n\t\t\t\t\t$first_reply = substr( $first_reply, 0, 50 );\n\t\t\t\t}\n\t\t\t\techo $first_reply;\n\t\t\t\tbreak;\n\t\t\tcase 'customers':\n\t\t\t\t$customers = SupportFlow()->get_ticket_customers( $ticket_id, array( 'fields' => 'emails' ) );\n\t\t\t\tif ( empty( $customers ) ) {\n\t\t\t\t\techo '\u2014';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tforeach ( $customers as $key => $customer_email ) {\n\t\t\t\t\t$args              = array(\n\t\t\t\t\t\tSupportFlow()->customers_tax => SupportFlow()->get_email_hash( $customer_email ),\n\t\t\t\t\t\t'post_type'                    => SupportFlow()->post_type,\n\t\t\t\t\t);\n\t\t\t\t\t$customer_photo  = get_avatar( $customer_email, 16 );\n\t\t\t\t\t$customer_link   = '<a class=\"customer_link\" href=\"' . esc_url( add_query_arg( $args, admin_url( 'edit.php' ) ) ) . '\">' . $customer_email . '</a>';\n\t\t\t\t\t$customers[$key] = $customer_photo . '&nbsp;' . $customer_link;\n\t\t\t\t}\n\t\t\t\techo implode( '<br />', $customers );\n\t\t\t\tbreak;\n\t\t\tcase 'status':\n\t\t\t\t$post_status = get_post_status( $ticket_id );\n\t\t\t\t$args        = array(\n\t\t\t\t\t'post_type'   => SupportFlow()->post_type,\n\t\t\t\t\t'post_status' => $post_status,\n\t\t\t\t);\n\t\t\t\t$status_name = get_post_status_object( $post_status )->label;\n\t\t\t\t$filter_link = add_query_arg( $args, admin_url( 'edit.php' ) );\n\t\t\t\techo '<a href=\"' . esc_url( $filter_link ) . '\">' . esc_html( $status_name ) . '</a>';\n\t\t\t\tbreak;\n\t\t\tcase 'email':\n\t\t\t\t$email_account_id = get_post_meta( $ticket_id, 'email_account', true );\n\t\t\t\t$email_accounts   = SupportFlow()->extend->email_accounts->get_email_accounts();\n\t\t\t\t$args             = array(\n\t\t\t\t\t'post_type'     => SupportFlow()->post_type,\n\t\t\t\t\t'email_account' => $email_account_id,\n\t\t\t\t);\n\t\t\t\tif ( ! isset( $email_accounts[$email_account_id] ) ) {\n\t\t\t\t\techo '\u2014';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$email_account_username = $email_accounts[$email_account_id]['username'];\n\t\t\t\t$filter_link            = add_query_arg( $args, admin_url( 'edit.php' ) );\n\t\t\t\techo '<a href=\"' . esc_url( $filter_link ) . '\">' . esc_html( $email_account_username ) . '</a>';\n\t\t\t\tbreak;\n\t\t\tcase 'sf_replies':\n\t\t\t\t$replies = SupportFlow()->get_ticket_replies_count( $ticket_id );\n\t\t\t\techo '<div class=\"post-com-count-wrapper\">';\n\t\t\t\techo \"<span class='replies-count'>{$replies}</span>\";\n\t\t\t\techo '</div>';\n\t\t\t\tbreak;\n\t\t\tcase 'created':\n\t\t\t\t$created_time = get_the_time( get_option( 'time_format' ) . ' T', $ticket_id );\n\t\t\t\t$created_date = get_the_time( get_option( 'date_format' ), $ticket_id );\n\t\t\t\techo sprintf( __( '%s<br />%s', 'supportflow' ), $created_time, $created_date );\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Whether or not we're on a view for creating or updating a ticket\n\t *\n\t * @return string $pagenow Return the context for the screen we're in\n\t */\n\tpublic function is_edit_screen() {\n\t\tglobal $pagenow;\n\n\t\tif ( in_array( $pagenow, array( 'edit.php', 'post-new.php' ) ) && ! empty( $_GET['post_type'] ) && $_GET['post_type'] == SupportFlow()->post_type ) {\n\t\t\treturn $pagenow;\n\t\t} elseif ( 'post.php' == $pagenow && ! empty( $_GET['action'] ) && 'edit' == $_GET['action'] && ! empty( $_GET['post'] ) ) {\n\t\t\t$the_post = get_post( absint( $_GET['post'] ) );\n\n\t\t\treturn ( is_a( $the_post, 'WP_Post' ) && $the_post->post_type == SupportFlow()->post_type ) ? $pagenow : false;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t/**\n\t * When a ticket is saved or updated, make sure we save the customer\n\t * and new reply data\n\t */\n\tpublic function action_save_post( $ticket_id ) {\n\t\t$email_account_id = get_post_meta( $ticket_id, 'email_account', true );\n\t\t$email_account    = SupportFlow()->extend->email_accounts->get_email_account( $email_account_id );\n\t\t$ticket_lock      = ( null == $email_account && '' != $email_account );\n\n\t\tif ( SupportFlow()->post_type != get_post_type( $ticket_id ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isset( $_POST['customers'] ) ) {\n\t\t\t$customers = array_map( 'sanitize_email', explode( ',', $_POST['customers'] ) );\n\t\t\tSupportFlow()->update_ticket_customers( $ticket_id, $customers );\n\t\t}\n\n\t\tif ( isset( $_POST['post_email_account'] ) && is_numeric( $_POST['post_email_account'] ) && '' == $email_account_id ) {\n\t\t\t$email_account = (int) $_POST['post_email_account'];\n\t\t\tupdate_post_meta( $ticket_id, 'email_account', $email_account );\n\t\t}\n\n\t\tif ( isset( $_POST['post_email_notifications_override'] ) && in_array( $_POST['post_email_notifications_override'], array( 'default', 'enable', 'disable' ) ) ) {\n\t\t\t$email_notifications_override                        = get_post_meta( $ticket_id, 'email_notifications_override', true );\n\t\t\t$email_notifications_override[get_current_user_id()] = $_POST['post_email_notifications_override'];\n\t\t\tupdate_post_meta( $ticket_id, 'email_notifications_override', $email_notifications_override );\n\t\t}\n\n\t\tif ( isset( $_POST['reply'] ) && ! empty( $_POST['reply'] ) && ! $ticket_lock ) {\n\t\t\t$reply = $_POST['reply'];\n\n\t\t\tif ( isset( $_POST['insert-signature'] ) && 'on' == $_POST['insert-signature'] ) {\n\t\t\t\t$agent_signature = get_user_meta( get_current_user_id(), 'sf_user_signature', true );\n\t\t\t\tif ( ! empty( $agent_signature ) ) {\n\t\t\t\t\t$reply .= \"\\n\\n-----\\n$agent_signature\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$reply = SupportFlow()->sanitize_ticket_reply( $reply );\n\n\t\t\t$visibility = ( ! empty( $_POST['mark-private'] ) ) ? 'private' : 'public';\n\t\t\tif ( ! empty( $_POST['reply-attachments'] ) ) {\n\t\t\t\t$attachements   = explode( ',', trim( $_POST['reply-attachments'], ',' ) );\n\t\t\t\t// Remove same attachment added more than once\n\t\t\t\t$attachements   = array_unique($attachements);\n\t\t\t\t// Remove non-int attachment ID's from array\n\t\t\t\t$attachements   = array_filter( $attachements, function ( $val ) {\n\t\t\t\t\treturn (string) (int) $val === (string) $val;\n\t\t\t\t} );\n\t\t\t\t$attachment_ids = array_map( 'intval', $attachements );\n\t\t\t} else {\n\t\t\t\t$attachment_ids = '';\n\t\t\t}\n\t\t\t$cc  = ( ! empty( $_POST['cc'] ) ) ? SupportFlow()->extract_email_ids( $_POST['cc'] ) : '';\n\t\t\t$bcc = ( ! empty( $_POST['bcc'] ) ) ? SupportFlow()->extract_email_ids( $_POST['bcc'] ) : '';\n\n\t\t\t$reply_args = array(\n\t\t\t\t'post_status'    => $visibility,\n\t\t\t\t'attachment_ids' => $attachment_ids,\n\t\t\t\t'cc'             => $cc,\n\t\t\t\t'bcc'            => $bcc,\n\t\t\t);\n\t\t\tSupportFlow()->add_ticket_reply( $ticket_id, $reply, $reply_args );\n\t\t}\n\n\t}\n\n\t/**\n\t * Hide quoted content in a message and display a link to show it.\n\t * Line startings with \">\" sign are considered quoted content\n\t */\n\tpublic function hide_quoted_text( $text ) {\n\t\t$res = preg_replace_callback( \"#(?:^(?:&gt;)+\\s.+$\\s*)+#im\", array( $this, 'hide_quoted_text_regex_callback' ), $text );\n\t\treturn $res;\n\t}\n\n\t/**\n\t * Just a function used by hide_quoted_text() for its regex callback\n\t * Anonymous function are not used as they unavailable in PHP 5.2.x\n\t * create_function() is not used as it it not readable\n\t */\n\tprotected function hide_quoted_text_regex_callback( $matches ) {\n\t\t$match    = esc_attr( $matches[0] );\n\t\t$show_msg = __( 'Show quoted content', 'supportflow' );\n\n\t\treturn \"<span><a href='' class='sf_toggle_quoted_text' data-quoted_text='$match'><br />$show_msg</a><br /></span>\";\n\t}\n}\n\nSupportFlow()->extend->admin = new SupportFlow_Admin();\n"], "fixing_code": ["<?php\n/**\n *\n */\n\ndefined( 'ABSPATH' ) or die( \"Cheatin' uh?\" );\n\nclass SupportFlow_Admin {\n\n\tfunction __construct() {\n\t\tadd_action( 'wp_ajax_sf_forward_conversation', array( $this, 'action_wp_ajax_sf_email_conversation' ) );\n\t\tadd_filter( 'heartbeat_received', array( $this, 'filter_heartbeat_received' ), 10, 2 );\n\t\tadd_action( 'supportflow_after_setup_actions', array( $this, 'setup_actions' ) );\n\t\tadd_action( 'add_attachment', array( $this, 'action_add_attachment' ) );\n\t}\n\n\tpublic function setup_actions() {\n\n\t\t// Creating or updating a ticket\n\t\tadd_action( 'add_meta_boxes', array( $this, 'action_add_meta_boxes' ) );\n\t\tadd_action( 'save_post', array( $this, 'action_save_post' ) );\n\t\tadd_action( 'map_meta_cap', array( $this, 'filter_map_meta_cap' ), 10, 4 );\n\n\t\tif ( ! $this->is_edit_screen() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Everything\n\t\tadd_action( 'admin_enqueue_scripts', array( $this, 'action_admin_enqueue_scripts' ) );\n\t\tadd_filter( 'post_updated_messages', array( $this, 'filter_post_updated_messages' ) );\n\t\tadd_action( 'admin_init', array( $this, 'action_admin_init' ) );\n\n\t\t// Manage tickets view\n\t\tadd_filter( 'manage_' . SupportFlow()->post_type . '_posts_columns', array( $this, 'filter_manage_post_columns' ) );\n\t\tadd_filter( 'manage_edit-' . SupportFlow()->post_type . '_sortable_columns', array( $this, 'manage_sortable_columns' ) );\n\t\tadd_action( 'manage_posts_custom_column', array( $this, 'action_manage_posts_custom_column' ), 10, 2 );\n\t\tadd_filter( 'views_edit-' . SupportFlow()->post_type, array( $this, 'filter_views' ) );\n\t\tadd_filter( 'post_row_actions', array( $this, 'filter_post_row_actions' ), 10, 2 );\n\t\tadd_filter( 'bulk_actions-edit-' . SupportFlow()->post_type, array( $this, 'filter_bulk_actions' ) );\n\t\tadd_action( 'pre_get_posts', array( $this, 'action_pre_get_posts' ) );\n\t\tadd_action( 'admin_action_change_status', array( $this, 'handle_action_change_status' ) );\n\t\tadd_action( 'restrict_manage_posts', array( $this, 'action_restrict_manage_posts' ) );\n\n\t}\n\n\t/**\n\t * Re-sort the custom statuses so trash appears last\n\t */\n\tfunction action_admin_init() {\n\t\tglobal $wp_post_statuses, $pagenow;\n\n\t\t$trash_status = $wp_post_statuses['trash'];\n\t\tunset( $wp_post_statuses['trash'] );\n\t\t$wp_post_statuses['trash'] = $trash_status;\n\n\t\tif ( 'edit.php' == $pagenow ) {\n\t\t\tadd_filter( 'get_the_excerpt', array( $this, 'filter_get_the_excerpt' ) );\n\t\t}\n\t}\n\n\t/**\n\t * Do not allow users to view/edit replies outside of a ticket context.\n\t */\n\tpublic function filter_map_meta_cap( $caps, $cap, $user_id, $args ) {\n\t\tif ( $cap == 'edit_post' && ! empty( $args[0] ) ) {\n\t\t\t$post = get_post( absint( $args[0] ) );\n\t\t\tif ( $post->post_type == SupportFlow()->reply_type && $post->post_parent > 0 ) {\n\t\t\t\t$caps[] = 'do_not_allow';\n\t\t\t}\n\t\t}\n\n\t\treturn $caps;\n\t}\n\n\t/**\n\t * Add any CSS or JS we need for the admin\n\t */\n\tpublic function action_admin_enqueue_scripts() {\n\t\tglobal $pagenow;\n\n\t\t$handle = SupportFlow()->enqueue_style( 'supportflow-admin', 'admin.css' );\n\n\t\tif ( in_array( $pagenow, array( 'post.php', 'post-new.php' ) ) ) {\n\t\t\twp_enqueue_media();\n\n\t\t\t$customers_autocomplete_handle   = SupportFlow()->enqueue_script( 'supportflow-customers-autocomplete', 'customers-autocomplete.js', array( 'jquery', 'jquery-ui-autocomplete' ) );\n\t\t\t$ticket_attachment_handle        = SupportFlow()->enqueue_script( 'supportflow-ticket-attachments', 'ticket_attachments.js' );\n\t\t\t$supportflow_tickets_handle      = SupportFlow()->enqueue_script( 'supportflow-tickets', 'tickets.js' );\n\t\t\t$auto_save_handle                = SupportFlow()->enqueue_script( 'supportflow-auto-save', 'auto_save.js', array( 'jquery', 'heartbeat' ) );\n\n\t\t\twp_localize_script( $customers_autocomplete_handle, 'SFCustomersAc', array(\n\t\t\t\t'ajax_url'            => add_query_arg( 'action', SupportFlow()->extend->jsonapi->action, admin_url( 'admin-ajax.php' ) ),\n\t\t\t\t'get_customers_nonce' => wp_create_nonce( 'get_customers' ),\n\t\t\t) );\n\n\t\t\twp_localize_script( $ticket_attachment_handle, 'SFTicketAttachments', array(\n\t\t\t\t'frame_title'       => __( 'Attach files', 'supportflow' ),\n\t\t\t\t'button_title'      => __( 'Insert as attachment', 'supportflow' ),\n\t\t\t\t'remove_attachment' => __( 'Remove', 'supportflow' ),\n\t\t\t\t'sure_remove'       => __( 'Are you sure want to remove this attachment?', 'supportflow' ),\n\t\t\t) );\n\n\t\t\twp_localize_script( $supportflow_tickets_handle, 'SFTickets', array(\n\t\t\t\t'no_title_msg'      => __( 'You must need to specify the subject of the ticket', 'supportpress' ),\n\t\t\t\t'no_customer_msg'   => __( 'You must need to add atleast one customer', 'supportpress' ),\n\t\t\t\t'pagenow'           => $pagenow,\n\t\t\t\t'send_msg'          => __( 'Send Message', 'supportflow' ),\n\t\t\t\t'add_private_note'  => __( 'Add Private Note', 'supportflow' ),\n\t\t\t) );\n\n\t\t\twp_localize_script( $auto_save_handle, 'SFAutoSave', array(\n\t\t\t\t'ticket_id' => get_the_ID(),\n\t\t\t) );\n\n\t\t}\n\n\t\tif ( 'post.php' == $pagenow ) {\n\t\t\t$email_conversation_handle = SupportFlow()->enqueue_script( 'supportflow-email-conversation', 'email_conversation.js' );\n\n\t\t\twp_localize_script( $email_conversation_handle, 'SFEmailConversation', array(\n\t\t\t\t'post_id'                   => get_the_ID(),\n\t\t\t\t'sending_emails'            => __( 'Please wait while sending E-Mail(s)', 'supportflow' ),\n\t\t\t\t'failed_sending'            => __( 'Failed sending E-Mails', 'supportflow' ),\n\t\t\t\t'_email_conversation_nonce' => wp_create_nonce( 'sf_email_conversation' ),\n\t\t\t) );\n\t\t}\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic function action_wp_ajax_sf_email_conversation() {\n\t\tif ( false === check_ajax_referer( 'sf_email_conversation', '_email_conversation_nonce', false ) ) {\n\t\t\t_e( 'Invalid request. Please try refreshing the page.', 'supportflow' );\n\t\t\tdie;\n\t\t}\n\n\t\tif ( ! isset( $_REQUEST['email_ids'] ) || ! isset( $_REQUEST['post_id'] ) ) {\n\t\t\t_e( 'Invalid request. Please try refreshing the page.', 'supportflow' );\n\t\t\tdie;\n\t\t}\n\n\t\t$email_ids = SupportFlow()->extract_email_ids( $_REQUEST['email_ids'] );\n\t\t$ticket_id = (int) $_REQUEST['post_id'];\n\n\t\tif ( ! current_user_can( 'edit_post', $ticket_id ) ) {\n\t\t\t_e( 'You are not allowed to edit this item.' );\n\t\t\tdie;\n\t\t}\n\n\t\tif ( empty( $email_ids ) ) {\n\t\t\t_e( 'No valid E-Mail ID found', 'supportflow' );\n\t\t\tdie;\n\t\t}\n\n\t\tSupportFlow()->extend->emails->email_conversation( $ticket_id, $email_ids );\n\n\t\t_e( 'Successfully sented E-Mails', 'supportflow' );\n\t\texit;\n\n\t}\n\n\t/**\n\t * Add random characters to attachment uploaded through SupportFlow web UI\n\t *\n\t * @todo Conversion to a better way to determine if attachment if uploaded through SF web UI rather than HTTP referer\n\t */\n\tfunction action_add_attachment( $attachment_id ) {\n\t\tif ( empty( $_SERVER['HTTP_REFERER'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$post_type = SupportFlow()->post_type;\n\t\t$referer   = $_SERVER['HTTP_REFERER'];\n\n\t\t$url  = parse_url( $referer );\n\t\t$path = $url['scheme'] . '://' . $url['host'] . $url['path'];\n\n\t\tif ( isset( $url['query'] ) ) {\n\t\t\tparse_str( $url['query'], $query );\n\t\t}\n\n\t\t// Check if referred by SupportFlow ticket page\n\t\tif ( admin_url( 'post-new.php' ) == $path ) {\n\t\t\tif ( empty( $query['post_type'] ) || $query['post_type'] != $post_type ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} elseif ( admin_url( 'post.php' ) == $path ) {\n\t\t\tif ( empty( $query['post'] ) || get_post_type( (int) $query['post'] ) != $post_type ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tSupportFlow()->extend->attachments->secure_attachment_file( $attachment_id );\n\t}\n\n\t/**\n\t * Filter the messages that appear to the user after they perform an action on a ticket\n\t */\n\tpublic function filter_post_updated_messages( $messages ) {\n\t\tglobal $post;\n\n\t\t$messages[SupportFlow()->post_type] = array(\n\t\t\t0  => '', // Unused. Messages start at index 1.\n\t\t\t1  => __( 'Ticket updated.', 'supportflow' ),\n\t\t\t2  => __( 'Custom field updated.', 'supportflow' ),\n\t\t\t3  => __( 'Custom field deleted.', 'supportflow' ),\n\t\t\t4  => __( 'Ticket updated.', 'supportflow' ),\n\t\t\t/* translators: %s: date and time of the revision */\n\t\t\t5  => isset( $_GET['revision'] ) ? sprintf( __( 'Ticket restored to revision from %s', 'supportflow' ), wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,\n\t\t\t6  => __( 'Ticket updated.', 'supportflow' ),\n\t\t\t7  => __( 'Ticket updated.', 'supportflow' ),\n\t\t\t8  => __( 'Ticket updated.', 'supportflow' ),\n\t\t\t9  => __( 'Ticket updated.', 'supportflow' ),\n\t\t\t10 => __( 'Ticket updated.', 'supportflow' ),\n\t\t);\n\n\t\treturn $messages;\n\t}\n\n\tpublic function filter_heartbeat_received( $response, $data ) {\n\t\tif (\n\t\t\tisset( $data['supportflow-autosave'] ) &&\n\t\t\tis_array( $data['supportflow-autosave'] ) &&\n\t\t\tisset( $data['supportflow-autosave']['ticket_id'] ) &&\n\t\t\tcurrent_user_can( 'edit_post', (int) $data['supportflow-autosave']['ticket_id'] )\n\t\t) {\n\t\t\t// Save data received from client to the database as post meta\n\n\t\t\t$ticket_id = (int) $data['supportflow-autosave']['ticket_id'];\n\t\t\tunset( $data['supportflow-autosave']['ticket_id'] );\n\n\t\t\tif ( 'auto-draft' == get_post_status( $ticket_id ) ) {\n\t\t\t\twp_update_post( array( 'ID' => $ticket_id, 'post_status' => 'draft' ) );\n\t\t\t}\n\n\t\t\tforeach ( $data['supportflow-autosave'] as $element_id => $element_value ) {\n\t\t\t\tupdate_post_meta( $ticket_id, \"_sf_autosave_$element_id\", $element_value );\n\t\t\t}\n\n\t\t\techo $data['supportflow-autosave']['post_title'];\n\t\t\tif ( ! empty( $data['supportflow-autosave']['post_title'] ) ) {\n\t\t\t\twp_update_post( array( 'ID' => $ticket_id, 'post_title' => $data['supportflow-autosave']['post_title'] ) );\n\t\t\t}\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\n\t/**\n\t *\n\t */\n\tpublic function filter_views( $views ) {\n\t\t$post_type    = SupportFlow()->post_type;\n\t\t$statuses     = SupportFlow()->post_statuses;\n\t\t$status_slugs = array();\n\n\t\tforeach ( $statuses as $status => $status_data ) {\n\t\t\tif ( true == $status_data['show_tickets'] ) {\n\t\t\t\t$status_slugs[] = $status;\n\t\t\t}\n\t\t}\n\n\t\t$wp_query    = new WP_Query( array(\n\t\t\t'post_type'      => $post_type,\n\t\t\t'post_parent'    => 0,\n\t\t\t'posts_per_page' => 1,\n\t\t\t'post_status'    => $status_slugs,\n\t\t) );\n\t\t$total_posts = $wp_query->found_posts;\n\n\t\t$class    = empty( $class ) && empty( $_REQUEST['post_status'] ) && empty( $_REQUEST['show_sticky'] ) ? ' class=\"current\"' : '';\n\t\t$view_all = \"<a href='edit.php?post_type=$post_type'$class>\" . sprintf( _nx( 'All <span class=\"count\">(%s)</span>', 'All <span class=\"count\">(%s)</span>', $total_posts, 'posts' ), number_format_i18n( $total_posts ) ) . '</a>';\n\n\t\t$post_statuses = SupportFlow()->post_statuses;\n\t\tarray_pop( $post_statuses );\n\t\t$post_statuses = \"'\" . implode( \"','\", array_map( 'sanitize_key', array_keys( $post_statuses ) ) ) . \"'\";\n\n\t\t// @todo Only show \"Mine\" if the user is an agent\n\t\t$mine_args = array(\n\t\t\t'post_type' => SupportFlow()->post_type,\n\t\t\t'author'    => get_current_user_id(),\n\t\t);\n\t\t$wp_query  = new WP_Query( array(\n\t\t\t'post_type'      => SupportFlow()->post_type,\n\t\t\t'author'         => get_current_user_id(),\n\t\t\t'post_status'    => $post_statuses,\n\t\t\t'posts_per_page' => 1,\n\t\t) );\n\n\t\t$my_posts  = $wp_query->found_posts;\n\t\t$view_mine = '<a href=\"' . add_query_arg( $mine_args, admin_url( 'edit.php' ) ) . '\">' . sprintf( _nx( 'Mine <span class=\"count\">(%s)</span>', 'Mine <span class=\"count\">(%s)</span>', $my_posts, 'posts' ), number_format_i18n( $my_posts ) ) . '</a>';\n\n\t\t$unassigned_args = array(\n\t\t\t'post_type' => SupportFlow()->post_type,\n\t\t\t'author'    => 0,\n\t\t);\n\t\t$wp_query        = new WP_Query( array(\n\t\t\t'post_type'      => SupportFlow()->post_type,\n\t\t\t'author'         => 0,\n\t\t\t'post_status'    => $post_statuses,\n\t\t\t'posts_per_page' => 1,\n\t\t) );\n\n\t\t$unassigned_posts = $wp_query->found_posts;\n\t\t$view_unassigned  = '<a href=\"' . add_query_arg( $unassigned_args, admin_url( 'edit.php' ) ) . '\">' . sprintf( _nx( 'Unassigned <span class=\"count\">(%s)</span>', 'Unassigned <span class=\"count\">(%s)</span>', $unassigned_posts, 'posts' ), number_format_i18n( $unassigned_posts ) ) . '</a>';\n\n\t\t// Put 'All' and 'Mine' at the beginning of the array\n\t\tarray_shift( $views );\n\t\t$views               = array_reverse( $views );\n\t\t$views['unassigned'] = $view_unassigned;\n\t\t$views['mine']       = $view_mine;\n\t\t$views['all']        = $view_all;\n\t\t$views               = array_reverse( $views );\n\n\t\t// Remove private option from filter links as they are just private replies to ticket\n\t\tunset( $views['private'] );\n\n\t\treturn $views;\n\t}\n\n\t/**\n\t * Add custom filters for the Manage Tickets view\n\t */\n\tpublic function action_restrict_manage_posts() {\n\n\t\t// Filter to specific agents\n\t\t$agent_dropdown_args = array(\n\t\t\t'show_option_all' => __( 'Show all agents', 'supportflow' ),\n\t\t\t'name'            => 'author',\n\t\t\t'selected'        => ( ! empty( $_REQUEST['author'] ) ) ? (int) $_REQUEST['author'] : false,\n\t\t\t'who'             => 'authors',\n\t\t);\n\t\t$agent_dropdown_args = apply_filters( 'supportflow_admin_agent_dropdown_args', $agent_dropdown_args );\n\t\twp_dropdown_users( $agent_dropdown_args );\n\n\t\t// Filter to specify tag\n\t\t$tax_slug = SupportFlow()->tags_tax;\n\t\t$terms    = get_terms( SupportFlow()->tags_tax, array( 'hide_empty' => false ) );\n\n\t\techo \"<select name='\" . esc_attr( $tax_slug ) . \"' id='\" . esc_attr( $tax_slug ) . \"' class='postform'>\";\n\t\techo \"<option value=''>\" . __( 'Show All tags', 'supportflow' ) . \"</option>\";\n\t\tforeach ( $terms as $term ) {\n\t\t\t$selected = selected( isset( $_REQUEST[$tax_slug] ) && ( $_REQUEST[$tax_slug] == $term->slug ), true, false );\n\t\t\techo \"<option value='\" . esc_attr( $term->slug ) . \"' $selected>\" . esc_html( $term->name ) . '</option>';\n\t\t}\n\t\techo \"</select>\";\n\n\n\t\t// Filter to specify E-Mail account\n\t\t$email_accounts = SupportFlow()->extend->email_accounts->get_email_accounts( true );\n\t\techo \"<select name='email_account' id='email_account' class='postform'>\";\n\t\techo \"<option value=''>\" . __( 'Show All Accounts', 'supportflow' ) . \"</option>\";\n\t\tforeach ( $email_accounts as $id => $email_account ) {\n\t\t\t$selected = selected( isset( $_REQUEST['email_account'] ) && ( $_REQUEST['email_account'] == $id ), true, false );\n\t\t\techo \"<option value='\" . esc_attr( $id ) . \"'$selected>\" . esc_html( $email_account['username'] ) . '</option>';\n\t\t}\n\t\techo \"</select>\";\n\n\t}\n\n\t/**\n\t * Filter the actions available to the agent on the post type\n\t */\n\tfunction filter_post_row_actions( $row_actions, $post ) {\n\n\t\t// Rename these actions\n\t\tif ( isset( $row_actions['edit'] ) ) {\n\t\t\t$row_actions['edit'] = str_replace( __( 'Edit' ), __( 'View', 'supportflow' ), str_replace( __( 'Edit this item' ), __( 'View Ticket', 'supportflow' ), $row_actions['edit'] ) );\n\t\t}\n\n\t\t// Save the trash action for the end\n\t\tif ( isset( $row_actions['trash'] ) ) {\n\t\t\t$trash_action = $row_actions['trash'];\n\t\t\tunset( $row_actions['trash'] );\n\t\t} else {\n\t\t\t$trash_action = false;\n\t\t}\n\n\t\t// Allow an agent to easily close a ticket\n\t\t$statuses     = SupportFlow()->post_statuses;\n\t\t$status_slugs = array_keys( $statuses );\n\t\t$last_status  = array_pop( $status_slugs );\n\t\tif ( ! in_array( get_query_var( 'post_status' ), array( 'trash' ) ) ) {\n\n\t\t\tif ( $last_status == get_post_status( $post->ID ) ) {\n\t\t\t\t$change_to = $status_slugs[2];\n\t\t\t} else {\n\t\t\t\t$change_to = $last_status;\n\t\t\t}\n\n\t\t\t$args        = array(\n\t\t\t\t'action'      => 'change_status',\n\t\t\t\t'sf_nonce'    => wp_create_nonce( 'sf-change-status' ),\n\t\t\t\t'post_status' => $change_to,\n\t\t\t\t'ticket_id'   => $post->ID,\n\t\t\t\t'post_type'   => SupportFlow()->post_type,\n\t\t\t);\n\t\t\t$action_link = add_query_arg( $args, admin_url( 'edit.php' ) );\n\t\t\tif ( $last_status == $change_to ) {\n\t\t\t\t$title_attr  = esc_attr__( 'Close Ticket', 'supportflow' );\n\t\t\t\t$action_text = esc_html__( 'Close', 'supportflow' );\n\t\t\t} else {\n\t\t\t\t$title_attr  = esc_attr__( 'Reopen Ticket', 'supportflow' );\n\t\t\t\t$action_text = esc_html__( 'Reopen', 'supportflow' );\n\t\t\t}\n\n\t\t\tif ( current_user_can( 'edit_post', $post->ID ) ) {\n\t\t\t\t$row_actions['change_status'] = '<a href=\"' . esc_url( $action_link ) . '\" title=\"' . $title_attr . '\">' . $action_text . '</a>';\n\t\t\t}\n\t\t}\n\n\t\t// Actions we don't want\n\t\tunset( $row_actions['inline hide-if-no-js'] );\n\t\tunset( $row_actions['view'] );\n\n\t\tif ( $trash_action ) {\n\t\t\t$row_actions['trash'] = $trash_action;\n\t\t}\n\n\t\treturn $row_actions;\n\t}\n\n\t/**\n\t * Remove the 'edit' bulk action. Doesn't do much for us\n\t */\n\tpublic function filter_bulk_actions( $actions ) {\n\t\tunset( $actions['edit'] );\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t * Handle which tickets are show on the Manage Tickets view when\n\t */\n\tfunction action_pre_get_posts( $query ) {\n\t\tglobal $pagenow;\n\n\t\tif ( 'edit.php' != $pagenow || ! $query->is_main_query() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$statuses     = SupportFlow()->post_statuses;\n\t\t$status_slugs = array();\n\n\t\tforeach ( $statuses as $status => $status_data ) {\n\t\t\tif ( true == $status_data['show_tickets'] ) {\n\t\t\t\t$status_slugs[] = $status;\n\t\t\t}\n\t\t}\n\n\t\t// Order posts by post_modified if there's no orderby set\n\t\tif ( ! $query->get( 'orderby' ) ) {\n\t\t\t$query->set( 'orderby', 'modified' );\n\t\t\t$query->set( 'order', 'DESC' );\n\t\t}\n\n\t\t// Do our own custom search handling so we can search against reply text\n\t\tif ( $search = $query->get( 's' ) ) {\n\n\t\t\t// Get all replies that match our results\n\t\t\t$args             = array(\n\t\t\t\t'search' => $search,\n\t\t\t\t'status' => 'any',\n\t\t\t);\n\t\t\t$matching_replies = SupportFlow()->get_replies( $args );\n\t\t\t$post_ids         = wp_list_pluck( $matching_replies, 'post_parent' );\n\n\t\t\t$args       = array(\n\t\t\t\t's'                      => $search,\n\t\t\t\t'post_type'              => SupportFlow()->post_type,\n\t\t\t\t'no_found_rows'          => true,\n\t\t\t\t'update_post_meta_cache' => false,\n\t\t\t\t'update_post_term_cache' => false,\n\t\t\t\t'fields'                 => 'ids',\n\t\t\t);\n\t\t\t$post_query = new WP_Query( $args );\n\t\t\tif ( ! is_wp_error( $post_query ) ) {\n\t\t\t\t$post_ids = array_merge( $post_ids, $post_query->posts );\n\t\t\t}\n\n\t\t\t$query->set( 'post__in', $post_ids );\n\t\t\t// Ignore the original search query\n\t\t\tadd_filter( 'posts_search', array( $this, 'filter_posts_search' ) );\n\t\t}\n\n\t\t// Only show tickets with the last status if the last status is set\n\t\t$post_status = $query->get( 'post_status' );\n\t\tif ( ! $query->get( 's' ) && empty( $post_status ) ) {\n\t\t\t$query->set( 'post_status', $status_slugs );\n\t\t}\n\n\t\tadd_action( 'posts_clauses', array( $this, 'filter_author_clause' ), 10, 2 );\n\n\t\tif ( isset( $_GET['email_account'] ) && ! empty( $_GET['email_account'] ) ) {\n\t\t\t$query->set( 'meta_key', 'email_account' );\n\t\t\t$query->set( 'meta_value', (int) $_GET['email_account'] );\n\t\t}\n\t}\n\n\t/*\n\t * Show unassigned tickets when query author is 0\n\t */\n\tpublic function filter_author_clause( $clauses, $query ) {\n\n\t\tif ( isset( $query->query['author'] ) && 0 == $query->query['author'] ) {\n\t\t\t$clauses['where'] .= ' AND post_author = 0 ';\n\t\t}\n\n\t\treturn $clauses;\n\t}\n\n\t/**\n\t * Sometimes we want to ignore the original search query because we do our own\n\t */\n\tpublic function filter_posts_search( $posts_search ) {\n\t\treturn '';\n\t}\n\n\t/**\n\t * Handle $_GET actions in the admin\n\t */\n\tfunction handle_action_change_status() {\n\n\t\tif ( ! isset( $_GET['action'], $_GET['sf_nonce'], $_GET['post_status'], $_GET['ticket_id'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! wp_verify_nonce( $_GET['sf_nonce'], 'sf-change-status' ) ) {\n\t\t\twp_die( __( \"Doin' something phishy, huh?\", 'supportflow' ) );\n\t\t}\n\n\t\t$ticket_id = (int) $_GET['ticket_id'];\n\n\t\tif ( ! current_user_can( 'edit_post', $ticket_id ) ) {\n\t\t\twp_die( __( 'You are not allowed to edit this item.' ) );\n\t\t}\n\n\t\t$post_status = sanitize_key( $_GET['post_status'] );\n\t\t$new_ticket  = array(\n\t\t\t'ID'          => $ticket_id,\n\t\t\t'post_status' => $post_status,\n\t\t);\n\t\twp_update_post( $new_ticket );\n\t\twp_safe_redirect( wp_get_referer() );\n\t\texit;\n\t}\n\n\t/**\n\t * Manipulate the meta boxes appearing on the edit post view\n\t *\n\t * When creating a new ticket, you should be able to:\n\t *\n\t * When updating an existing ticket, you should be able to:\n\t *\n\t */\n\tpublic function action_add_meta_boxes() {\n\t\tglobal $pagenow;\n\n\t\tif ( ! $this->is_edit_screen() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$customers_box = 'tagsdiv-' . SupportFlow()->customers_tax;\n\t\tremove_meta_box( 'submitdiv', SupportFlow()->post_type, 'side' );\n\t\tremove_meta_box( $customers_box, SupportFlow()->post_type, 'side' );\n\t\tremove_meta_box( 'slugdiv', SupportFlow()->post_type, 'normal' );\n\n\t\tadd_meta_box( 'supportflow-details', __( 'Details', 'supportflow' ), array( $this, 'meta_box_details' ), SupportFlow()->post_type, 'side', 'high' );\n\t\tadd_meta_box( 'supportflow-subject', __( 'Subject', 'supportflow' ), array( $this, 'meta_box_subject' ), SupportFlow()->post_type, 'normal' );\n\t\tadd_meta_box( 'supportflow-customers', __( 'Customers', 'supportflow' ), array( $this, 'meta_box_customers' ), SupportFlow()->post_type, 'normal' );\n\t\tadd_meta_box( 'supportflow-cc-bcc', __( 'CC and BCC', 'supportflow' ), array( $this, 'meta_box_cc_bcc' ), SupportFlow()->post_type, 'normal' );\n\t\tadd_meta_box( 'supportflow-replies', __( 'Replies', 'supportflow' ), array( $this, 'meta_box_replies' ), SupportFlow()->post_type, 'normal' );\n\n\t\tif ( 'post.php' == $pagenow ) {\n\t\t\tadd_meta_box( 'supportflow-other-customers-tickets', __( 'Customer(s) recent Tickets', 'supportflow' ), array( $this, 'meta_box_other_customers_tickets' ), SupportFlow()->post_type, 'side' );\n\t\t\tadd_meta_box( 'supportflow-forward_conversation', __( 'Forward this conversation', 'supportflow' ), array( $this, 'meta_box_email_conversation' ), SupportFlow()->post_type, 'side' );\n\t\t}\n\t}\n\n\tpublic function meta_box_other_customers_tickets() {\n\t\t$ticket_customers = SupportFlow()->get_ticket_customers( get_the_ID(), array( 'fields' => 'slugs' ) );\n\t\t$statuses         = SupportFlow()->post_statuses;\n\t\t$status_slugs     = array_keys($statuses);\n\n\t\t$table = new SupportFlow_Table( '', false, false );\n\n\t\tif ( empty( $ticket_customers ) ) {\n\t\t\t$tickets = array();\n\n\t\t} else {\n\t\t\t$args = array(\n\t\t\t\t'post_type'    => SupportFlow()->post_type,\n\t\t\t\t'post_parent'  => 0,\n\t\t\t\t'post_status'  => $status_slugs,\n\t\t\t\t'posts_per_page'  => 10,\n\t\t\t\t'post__not_in' => array( get_the_id() ),\n\t\t\t\t'tax_query'    => array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'taxonomy' => SupportFlow()->customers_tax,\n\t\t\t\t\t\t'field'    => 'slug',\n\t\t\t\t\t\t'terms'    => $ticket_customers,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t$wp_query = new WP_Query( $args );\n\t\t\t$tickets  = $wp_query->posts;\n\t\t}\n\n\t\t$no_items = __( 'No recent tickets found.', 'supportflow' );\n\t\t$table->set_no_items( $no_items );\n\n\t\t$table->set_columns( array(\n\t\t\t'title'  => __( 'Subject', 'supportflow' ),\n\t\t\t'status' => __( 'Status', 'supportflow' ),\n\t\t) );\n\n\t\t$data = array();\n\t\tforeach ( $tickets as $ticket ) {\n\t\t\t$post_date     = strtotime( $ticket->post_date );\n\t\t\t$post_modified = strtotime( $ticket->post_modified );\n\t\t\t$title         = '<b>' . esc_html( $ticket->post_title ) . '</b>';\n\t\t\t$title         = \"<a href='post.php?post=\" . $ticket->ID . \"&action=edit'>\" . $title . \"</a>\";\n\t\t\t$data[]        = array(\n\t\t\t\t'title'  => $title,\n\t\t\t\t'status' => $statuses[$ticket->post_status]['label'],\n\t\t\t);\n\t\t}\n\t\t$table->set_data( $data );\n\t\t$table->display();\n\t}\n\n\tpublic function meta_box_email_conversation() {\n\t\t?>\n\t\t<p class=\"description\"><?php _e( \"Please enter E-Mail address separated by comma to whom you want to send this conversation.\", 'supportflow' ) ?></p>\n\t\t<br />\n\t\t<input type=\"text\" id=\"email_conversation_to\" />\n\t\t<?php submit_button( __( 'Send', 'supportflow' ), '', 'email_conversation_submit', false ); ?>\n\t\t<p id=\"email_conversation_status\"></p>\n\t<?php\n\t}\n\n\t/**\n\t * Show details about the ticket, and allow the post status and agent to be changed\n\t */\n\tpublic function meta_box_details() {\n\t\techo '<div id=\"minor-publishing\">\n\t\t\t\t<div id=\"misc-publishing-actions\">';\n\n\t\t$this->render_meta_box_details_email_account();\n\t\t$this->render_meta_box_details_opened();\n\t\t$this->render_meta_box_details_status();\n\t\t$this->render_meta_box_details_author();\n\t\t$this->render_meta_box_details_notifications();\n\t\t$this->render_meta_box_details_actions();\n\n\t\techo '</div>\n\t\t\t\t</div>';\n\n\t}\n\n\tpublic function render_meta_box_details_email_account() {\n\t\t// Get post E-Mail account\n\t\t$email_accounts = SupportFlow()->extend->email_accounts->get_email_accounts( true );\n\n\t\t$user_permissions = SupportFlow()->extend->permissions->get_user_permissions_data( get_current_user_id() );\n\t\t$user_permissions = $user_permissions['email_accounts'];\n\n\t\t$email_account_id = get_post_meta( get_the_id(), 'email_account', true );\n\n\t\tif ( '' == $email_account_id ) {\n\t\t\t$email_account_dropdown = '<select class=\"meta-item-dropdown\">';\n\t\t\tforeach ( $email_accounts as $id => $email_account ) {\n\t\t\t\tif ( empty( $email_account ) || ( ! current_user_can( 'manage_options' ) && ! in_array( $id, $user_permissions ) ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$email_account_dropdown .= '<option value=\"' . esc_attr( $id ) . '\" ' . '>' . esc_html( $email_account['username'] ) . '</option>';\n\t\t\t}\n\t\t\t$email_account_dropdown .= '</select>';\n\n\t\t\t$email_account_keys  = array_keys( $email_accounts );\n\t\t\t$email_account_first = $email_account_keys[0];\n\t\t\t$email_account_label = $email_accounts[$email_account_first]['username'];\n\t\t}\n\n\t\tif ( '' == $email_account_id ) {\n\t\t\t?>\n\t\t\t<div class=\"misc-pub-section meta-item\">\n\t\t\t\t<label class=\"meta-item-toggle-button\"><?php _e( 'Account', 'supportflow' ) ?>:</label>\n\t\t\t\t<span class=\"meta-item-label\"><?php _e( $email_account_label, 'supportflow' ) ?></span>\n\t\t\t\t<a href=\"#\" class=\"meta-item-toggle-button meta-item-toggle-content hide-if-no-js\">\n\t\t\t\t\t<span aria-hidden=\"true\"><?php _e( 'Edit' ) ?></span>\n\t\t\t\t</a>\n\t\t\t\t<input name=\"post_email_account\" class=\"meta-item-name\" value=\"<?php echo $email_account_first ?>\" type=\"hidden\" />\n\n\t\t\t\t<div class=\"meta-item-toggle-content hide-if-js\">\n\t\t\t\t\t<?php echo $email_account_dropdown ?>\n\t\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button meta-item-ok-button meta-item-toggle-button\"><?php _e( 'OK' ) ?></a>\n\t\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button-cancel meta-item-cancel-button meta-item-toggle-button\"><?php _e( 'Cancel' ) ?></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t<?php\n\t\t}\n\t}\n\n\tpublic function render_meta_box_details_opened() {\n\t\tglobal $pagenow;\n\n\t\t// Get post creation and last update time\n\t\tif ( 'post.php' == $pagenow ) {\n\t\t\t$opened        = get_the_date() . ' ' . get_the_time();\n\t\t\t$modified_gmt  = get_post_modified_time( 'U', true, get_the_ID() );\n\t\t\t$last_activity = sprintf( __( '%s ago', 'supportflow' ), human_time_diff( $modified_gmt ) );\n\t\t\t?>\n\t\t\t<div class=\"misc-pub-section meta-item\">\n\t\t\t\t<label><?php _e( 'Opened', 'supportflow' ) ?>:</label>\n\t\t\t\t<span class=\"meta-item-label\"><?php esc_html_e( $opened ) ?></span>\n\t\t\t</div>\n\n\t\t\t<!--Last ticket update time-->\n\t\t\t<div class=\"misc-pub-section meta-item\">\n\t\t\t\t<label><?php _e( 'Last Activity', 'supportflow' ) ?>:</label>\n\t\t\t\t<span class=\"meta-item-label\"><?php esc_html_e( $last_activity ) ?></span>\n\t\t\t</div>\n\t\t<?php\n\t\t}\n\t}\n\n\tpublic function render_meta_box_details_status() {\n\t\t// Get post status\n\t\t$post_statuses     = SupportFlow()->post_statuses;\n\t\t$current_status_id = get_post_status( get_the_ID() );\n\n\t\tif ( ! isset( $post_statuses[$current_status_id] ) ) {\n\t\t\t$post_statuses_key = array_keys( $post_statuses );\n\t\t\t$current_status_id = $post_statuses_key[0];\n\t\t}\n\n\t\t$current_status_label = $post_statuses[$current_status_id]['label'];\n\t\t?>\n\t\t<!--Ticket status box-->\n\t\t<div class=\"misc-pub-section meta-item\">\n\t\t\t<label class=\"meta-item-toggle-button\"><?php _e( 'Status', 'supportflow' ) ?>:</label>\n\t\t\t<span class=\"meta-item-label\"><?php esc_html_e( $current_status_label, 'supportflow' ) ?></span>\n\t\t\t<a href=\"#\" class=\"meta-item-toggle-button meta-item-toggle-content hide-if-no-js\">\n\t\t\t\t<span aria-hidden=\"true\"><?php _e( 'Edit' ) ?></span>\n\t\t\t</a>\n\t\t\t<input name=\"post_status\" class=\"meta-item-name\" value=\"<?php esc_attr_e( $current_status_id ) ?>\" type=\"hidden\" />\n\n\t\t\t<div class=\"meta-item-toggle-content hide-if-js\">\n\t\t\t\t<select class=\"meta-item-dropdown\">\n\t\t\t\t\t<?php foreach ( $post_statuses as $slug => $post_status ) : ?>\n\t\t\t\t\t\t<option value=\"<?php esc_attr_e( $slug ) ?>\"<?php selected( $current_status_id, $slug ) ?>><?php esc_html_e( $post_status['label'] ) ?></option>;\n\t\t\t\t\t<?php endforeach; ?>\n\t\t\t\t</select>\n\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button meta-item-ok-button meta-item-toggle-button\"><?php _e( 'OK' ) ?></a>\n\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button-cancel meta-item-cancel-button meta-item-toggle-button\"><?php _e( 'Cancel' ) ?></a>\n\t\t\t</div>\n\t\t</div>\n\t<?php\n\t}\n\n\tpublic function render_meta_box_details_author() {\n\t\t// Get post authors\n\t\t$post_author_id = get_post( get_the_ID() )->post_author;\n\n\t\t// WP change owner to current user if $post_author_id is 0 (returned when ticket is unassigned)\n\t\tif ( 0 == $post_author_id ) {\n\t\t\t$post_author_id = - 1;\n\t\t}\n\n\t\tif ( 0 < $post_author_id ) {\n\t\t\t$post_author_label = get_userdata( $post_author_id )->data->user_nicename;\n\t\t} else {\n\t\t\t$post_author_label = __( '-- Unassigned --', 'supportflow' );\n\t\t}\n\t\t$args                  = array(\n\t\t\t'show_option_none' => __( '-- Unassigned --', 'supportflow' ),\n\t\t\t'selected'         => $post_author_id,\n\t\t\t'id'               => '',\n\t\t\t'name'             => '',\n\t\t\t'who'              => 'author',\n\t\t\t'class'            => 'meta-item-dropdown',\n\t\t\t'echo'             => false\n\t\t);\n\t\t$post_authors_dropdown = wp_dropdown_users( $args );\n\t\t?>\n\t\t<div class=\"misc-pub-section meta-item\">\n\t\t\t<label class=\"meta-item-toggle-button\"><?php _e( 'Owner', 'supportflow' ) ?>:</label>\n\t\t\t<span class=\"meta-item-label\"><?php _e( $post_author_label, 'supportflow' ) ?></span>\n\t\t\t<a href=\"#\" class=\"meta-item-toggle-button meta-item-toggle-content hide-if-no-js\">\n\t\t\t\t<span aria-hidden=\"true\"><?php _e( 'Edit' ) ?></span>\n\t\t\t</a>\n\t\t\t<input name=\"post_author\" class=\"meta-item-name\" value=\"<?php esc_attr_e( $post_author_id ) ?>\" type=\"hidden\" />\n\n\t\t\t<div class=\"meta-item-toggle-content hide-if-js\">\n\t\t\t\t<?php echo $post_authors_dropdown ?>\n\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button meta-item-ok-button meta-item-toggle-button\"><?php _e( 'OK' ) ?></a>\n\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button-cancel meta-item-cancel-button meta-item-toggle-button\"><?php _e( 'Cancel' ) ?></a>\n\t\t\t</div>\n\t\t</div>\n\t<?php\n\t}\n\n\tpublic function render_meta_box_details_notifications() {\n\t\tglobal $pagenow;\n\n\t\t// Get E-Mail notification settings\n\t\t$notification_id          = 0;\n\t\t$notification_label       = 'Default';\n\t\t$notification_label_title = 'Choose default if you want to receive E-Mail notifications based on what you set in `E-Mail notification` page. Choose Enable/Disable if you want to override those settings';\n\t\t$notification_dropdown    = '';\n\t\t$notification_dropdown .= '<select class=\"meta-item-dropdown\">';\n\n\t\tif ( 'post-new.php' == $pagenow ) {\n\t\t\t$notification_dropdown .= '<option value=\"default\">' . __( 'Default', 'supportflow' ) . '</option>';\n\t\t\t$notification_dropdown .= '<option value=\"enable\">' . __( 'Subscribed', 'supportflow' ) . '</option>';\n\t\t\t$notification_dropdown .= '<option value=\"disable\">' . __( 'Unsubscribed', 'supportflow' ) . '</option>';\n\t\t} elseif ( 'post.php' == $pagenow ) {\n\t\t\t$email_notifications_override = get_post_meta( get_the_ID(), 'email_notifications_override', true );\n\t\t\t$current_user_id              = get_current_user_id();\n\n\t\t\tif ( isset( $email_notifications_override[$current_user_id] ) ) {\n\t\t\t\t$override_status = $email_notifications_override[$current_user_id];\n\t\t\t\tif ( 'enable' == $override_status ) {\n\t\t\t\t\t$notification_label = 'Subscribed';\n\t\t\t\t\t$notification_id    = 1;\n\t\t\t\t} elseif ( 'disable' == $override_status ) {\n\t\t\t\t\t$notification_label = 'Unsubscribed';\n\t\t\t\t\t$notification_id    = 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$notification_dropdown .= '<option value=\"default\"' . selected( $notification_id, 0, false ) . '>' . __( 'Default', 'supportflow' ) . '</option>';\n\t\t\t$notification_dropdown .= '<option value=\"enable\"' . selected( $notification_id, 1, false ) . '>' . __( 'Subscribed', 'supportflow' ) . '</option>';\n\t\t\t$notification_dropdown .= '<option value=\"disable\"' . selected( $notification_id, 2, false ) . '>' . __( 'Unsubscribed', 'supportflow' ) . '</option>';\n\t\t}\n\n\t\t$notification_dropdown .= '</select>';\n\t\t?>\n\t\t<div class=\"misc-pub-section meta-item\">\n\t\t\t<label class=\"meta-item-toggle-button\" title=\"<?php _e( $notification_label_title, 'supportflow' ) ?>\"><?php _e( 'E-Mail Notifications', 'supportflow' ) ?>:</label>\n\t\t\t<span class=\"meta-item-label\"><?php esc_html_e( $notification_label, 'supportflow' ) ?></span>\n\t\t\t<a href=\"#\" class=\"meta-item-toggle-button meta-item-toggle-content hide-if-no-js\">\n\t\t\t\t<span aria-hidden=\"true\"><?php _e( 'Edit' ) ?></span>\n\t\t\t</a>\n\t\t\t<input name=\"post_email_notifications_override\" class=\"meta-item-name\" value=\"<?php echo $notification_id ?>\" type=\"hidden\" />\n\n\t\t\t<div class=\"meta-item-toggle-content hide-if-js\">\n\t\t\t\t<?php echo $notification_dropdown ?>\n\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button meta-item-ok-button meta-item-toggle-button\"><?php _e( 'OK' ) ?></a>\n\t\t\t\t<a href=\"#\" class=\"hide-if-no-js button-cancel meta-item-cancel-button meta-item-toggle-button\"><?php _e( 'Cancel' ) ?></a>\n\t\t\t</div>\n\t\t</div>\n\t<?php\n\t}\n\n\tpublic function render_meta_box_details_actions() {\n\t\tglobal $pagenow;\n\n\t\t$post_statuses     = SupportFlow()->post_statuses;\n\t\t$current_status_id = get_post_status( get_the_ID() );\n\n\t\tif ( ! isset( $post_statuses[$current_status_id] ) ) {\n\t\t\t$post_statuses_key = array_keys( $post_statuses );\n\t\t\t$current_status_id = $post_statuses_key[0];\n\t\t}\n\n\t\t$current_status_label = $post_statuses[$current_status_id]['label'];\n\n\t\t$close_ticket_label = __( 'Close ticket', 'supportflow' );\n\n\t\t// Get submit button label\n\t\tif ( 'post-new.php' == $pagenow ) {\n\t\t\t$submit_text = __( 'Start Ticket', 'supportflow' );\n\t\t} else {\n\t\t\t$submit_text = __( 'Update Ticket', 'supportflow' );\n\t\t}\n\t\t?>\n\t\t<div id=\"major-publishing-actions\">\n\t\t\t<?php if ( 'post.php' == $pagenow && $current_status_id != 'sf_closed' ) : ?>\n\t\t\t\t<div id=\"delete-action\">\n\t\t\t\t\t<?php submit_button( $close_ticket_label, '', 'close-ticket-submit', false, array( 'id' => 'close-ticket-submit' ) ); ?>\n\t\t\t\t</div>\n\t\t\t<?php endif; ?>\n\t\t\t<div id=\"publishing-action\">\n\t\t\t\t<?php submit_button( $submit_text, 'save-button primary', 'update-ticket', false ); ?>\n\t\t\t</div>\n\t\t\t<div class=\"clear\"></div>\n\t\t</div>\n\t<?php\n\t}\n\n\t/**\n\t * A box that appears at the top\n\t */\n\tpublic function meta_box_subject() {\n\t\t?>\n\n\t\t<h4><?php _e( 'Subject', 'supportflow' ); ?></h4>\n\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tid=\"subject\"\n\t\t\tname=\"post_title\"\n\t\t\tclass=\"sf_autosave\"\n\t\t\tplaceholder=\"<?php _e( 'What is your conversation about?', 'supportflow' ); ?>\"\n\t\t\tvalue=\"<?php echo esc_attr( get_the_title() ); ?>\"\n\t\t\tautocomplete=\"off\"\n\t\t/>\n\n\t\t<p class=\"description\">\n\t\t\t<?php _e( 'Please describe what this ticket is about in several words', 'supportflow' ) ?>\n\t\t</p>\n\n\t\t<?php\n\t}\n\n\t/**\n\t * Add a form element where the user can change the customers\n\t */\n\tpublic function meta_box_customers() {\n\n\t\t$placeholder = __( 'Who are you starting a conversation with?', 'supportflow' );\n\t\tif ( 'draft' == get_post_status( get_the_ID() ) ) {\n\t\t\t$customers_string = get_post_meta( get_the_ID(), '_sf_autosave_customers', true );\n\t\t} else {\n\t\t\t$customers        = SupportFlow()->get_ticket_customers( get_the_ID(), array( 'fields' => 'emails' ) );\n\t\t\t$customers_string = implode( ', ', $customers );\n\t\t\t$customers_string .= empty( $customers_string ) ? '' : ', ';\n\t\t}\n\t\techo '<h4>' . __( 'Customer(s)', 'supportflow' ) . '</h4>';\n\t\techo '<input type=\"text\" id=\"customers\" name=\"customers\" class=\"sf_autosave\" placeholder=\"' . $placeholder . '\" value=\"' . esc_attr( $customers_string ) . '\" autocomplete=\"off\" />';\n\t\techo '<p class=\"description\">' . __( 'Enter each customer email address, separated with a comma', 'supportflow' ) . '</p>';\n\t}\n\n\t/**\n\t * Add a form element where you can choose cc and bcc receiver of reply\n\t */\n\tpublic function meta_box_cc_bcc() {\n\t\t$cc_value = esc_attr( get_post_meta( get_the_ID(), '_sf_autosave_cc', true ) );\n\t\t$bcc      = esc_attr( get_post_meta( get_the_ID(), '_sf_autosave_bcc', true ) );\n\t\t?>\n\t\t<p class=\"description\"> <?php _e( \"Please add all the E-Mail ID's seperated by comma.\", 'supportflow' ) ?></p>\n\t\t<h4 class=\"inline\"><?php _e( \"CC: \", 'supportflow' ) ?></h4>\n\t\t<input type=\"text\" class=\"sf_autosave\" id=\"cc\" name=\"cc\" value=\"<?php echo $cc_value ?>\" />\n\t\t<h4 class=\"inline\"> <?php _e( \"BCC: \", 'supportflow' ) ?></h4>\n\t\t<input type=\"text\" class=\"sf_autosave\" id=\"bcc\" name=\"bcc\" value=\"<?php echo $bcc ?>\" />\n\t<?php\n\t}\n\n\t/**\n\t * Standard listing of replies includes a form at the top\n\t * and any existing replies listed in reverse chronological order\n\t */\n\tpublic function meta_box_replies() {\n\t\tglobal $pagenow;\n\n\t\t$predefined_replies = get_posts( array( 'post_type' => SupportFlow()->predefinded_replies_type, 'posts_per_page' => -1 ) );\n\t\t$pre_defs           = array( array( 'title' => __( 'Pre-defined Replies', 'supportflow' ), 'content' => '' ) );\n\n\t\tforeach ( $predefined_replies as $predefined_reply ) {\n\t\t\t$content = $predefined_reply->post_content;\n\n\t\t\tif ( ! empty( $predefined_reply->post_title ) ) {\n\t\t\t\t$title = $predefined_reply->post_title;\n\t\t\t} else {\n\t\t\t\t$title = $predefined_reply->post_content;\n\t\t\t}\n\n\t\t\t// Limit size to 75 characters\n\t\t\tif ( strlen( $title ) > 75 ) {\n\t\t\t\t$title = substr( $title, 0, 75 - 3 ) . '...';\n\t\t\t}\n\n\t\t\tif ( 0 != strlen( $content ) ) {\n\t\t\t\t$pre_defs[] = array( 'title' => $title, 'content' => $content );\n\t\t\t}\n\t\t}\n\n\t\t$email_account_id = get_post_meta( get_the_ID(), 'email_account', true );\n\t\t$email_account    = SupportFlow()->extend->email_accounts->get_email_account( $email_account_id );\n\n\t\t$ticket_lock       = ( null == $email_account && '' != $email_account_id );\n\t\t$disabled_attr     = disabled( $ticket_lock, true, false );\n\t\t$submit_attr_array = $ticket_lock ? array( 'disabled' => 'true' ) : array();\n\n\t\tif ( $ticket_lock ) {\n\t\t\t$placeholder = __( \"Ticket is locked permanently because E-Mail account associated with it is deleted. Please create a new ticket now. You can't now reply to it.\", 'supportflow' );\n\t\t} else {\n\t\t\t$placeholders = array(\n\t\t\t\t__( \"What's burning?\", 'supportflow' ),\n\t\t\t\t__( 'What do you need to get off your chest?', 'supportflow' ),\n\t\t\t);\n\t\t\t$rand         = array_rand( $placeholders );\n\t\t\t$placeholder  = $placeholders[$rand];\n\t\t}\n\n\t\techo '<div class=\"alignleft\"><h4>' . __( 'Conversation', 'supportflow' ) . '</h4></div>';\n\t\techo '<div class=\"alignright\">';\n\t\techo '<select id=\"predefs\" ' . $disabled_attr . ' class=\"predefined_replies_dropdown\">';\n\t\tforeach ( $pre_defs as $pre_def ) {\n\t\t\techo '<option class=\"predef\" data-content=\"' . esc_attr( $pre_def['content'] ) . '\">' . esc_html( $pre_def['title'] ) . \"</option>\\n\";\n\t\t}\n\t\techo '</select></div>';\n\n\t\techo '<div id=\"ticket-reply-box\">';\n\t\techo \"<textarea id='reply' name='reply' $disabled_attr class='ticket-reply sf_autosave' rows='4' placeholder='\" . esc_attr( $placeholder ) . \"'>\";\n\t\techo esc_html( get_post_meta( get_the_ID(), '_sf_autosave_reply', true ) );\n\t\techo \"</textarea>\";\n\n\t\techo '<div id=\"message-tools\">';\n\t\techo '<div id=\"replies-attachments-wrap\">';\n\t\techo '<div class=\"drag-drop-buttons\">';\n\t\techo '<input id=\"reply-attachment-browse-button\" ' . $disabled_attr . ' type=\"button\" value=\"' . esc_attr( __( 'Attach files', 'supportflow' ) ) . '\" class=\"button\" />';\n\t\techo '</div>';\n\t\techo '<ul id=\"replies-attachments-list\">';\n\t\techo '</ul>';\n\t\techo '<input type=\"hidden\" id=\"reply-attachments\" name=\"reply-attachments\" value=\",\" />';\n\t\techo '</div>';\n\t\techo '<div id=\"submit-action\">';\n\t\t$signature_label_title = __( 'Append your signature at the bottom of the reply. Signature can be removed or changed in preferences page', 'supportflow' );\n\t\t$insert_signature_default = (boolean) get_user_meta( get_current_user_id(), 'sf_insert_signature_default', true );\n\t\techo '<input type=\"checkbox\" ' . $disabled_attr . checked( $insert_signature_default, true, false ) . ' id=\"insert-signature\" name=\"insert-signature\" />';\n\t\techo \"<label for='insert-signature' title='$signature_label_title'>\" . __( 'Insert signature', 'supportflow' ) . '</label>';\n\t\techo '<input type=\"checkbox\" ' . $disabled_attr . ' id=\"mark-private\" name=\"mark-private\" />';\n\t\techo '<label for=\"mark-private\">' . __( 'Mark private', 'supportflow' ) . '</label>';\n\t\tif ( 'post-new.php' == $pagenow ) {\n\t\t\t$submit_text = __( 'Start Ticket', 'supportflow' );\n\t\t} else {\n\t\t\t$submit_text = __( 'Send Message', 'supportflow' );\n\t\t}\n\t\tsubmit_button( $submit_text, 'primary save-button', 'insert-reply', false, $submit_attr_array );\n\t\techo '</div>';\n\t\techo '</div>';\n\n\t\techo '</div>';\n\n\t\techo '<div class=\"clear\"></div>';\n\n\t\t$this->display_ticket_replies();\n\t}\n\n\tpublic function display_ticket_replies() {\n\t\t$private_replies = SupportFlow()->get_ticket_replies( get_the_ID(), array( 'status' => 'private' ) );\n\n\t\tif ( ! empty( $private_replies ) ) {\n\t\t\techo '<ul class=\"private-replies\">';\n\t\t\tforeach ( $private_replies as $reply ) {\n\t\t\t\techo '<li>';\n\t\t\t\techo '<div class=\"ticket-reply\">';\n\t\t\t\t$post_content = stripslashes( $reply->post_content );\n\t\t\t\t$post_content = $this->hide_quoted_text( $post_content );\n\t\t\t\t$post_content = wpautop( make_clickable( $post_content ) );\n\t\t\t\techo $post_content;\n\t\t\t\tif ( $attachment_ids = get_post_meta( $reply->ID, 'sf_attachments' ) ) {\n\t\t\t\t\techo '<ul class=\"ticket-reply-attachments\">';\n\t\t\t\t\tforeach ( $attachment_ids as $attachment_id ) {\n\t\t\t\t\t\t$attachment_link = SupportFlow()->extend->attachments->get_attachment_url( $attachment_id );\n\t\t\t\t\t\techo '<li><a target=\"_blank\" href=\"' . esc_url( $attachment_link ) . '\">' . esc_html( get_the_title( $attachment_id ) ) . '</a></li>';\n\t\t\t\t\t}\n\t\t\t\t\techo '</ul>';\n\t\t\t\t}\n\t\t\t\techo '</div>';\n\t\t\t\t$reply_author    = get_post_meta( $reply->ID, 'reply_author', true );\n\t\t\t\t$reply_timestamp = sprintf( __( 'Noted by %1$s on %2$s at %3$s', 'supportflow' ), $reply_author, get_the_date( '', $reply->ID ), get_the_time( '', $reply->ID ) );\n\t\t\t\t$modified_gmt    = get_post_modified_time( 'U', true, $reply->ID );\n\t\t\t\t$last_activity   = sprintf( __( '%s ago', 'supportflow' ), human_time_diff( $modified_gmt ) );\n\t\t\t\techo '<div class=\"ticket-meta\"><span class=\"reply-timestamp\">' . esc_html( $reply_timestamp ) . ' (' . $last_activity . ')' . '</span></div>';\n\t\t\t\techo '</li>';\n\t\t\t}\n\t\t\techo '</ul>';\n\t\t}\n\n\t\t$replies = SupportFlow()->get_ticket_replies( get_the_ID(), array( 'status' => 'public' ) );\n\t\tif ( ! empty( $replies ) ) {\n\t\t\techo '<ul class=\"ticket-replies\">';\n\t\t\tforeach ( $replies as $reply ) {\n\t\t\t\t$reply_author       = get_post_meta( $reply->ID, 'reply_author', true );\n\t\t\t\t$reply_author_email = get_post_meta( $reply->ID, 'reply_author_email', true );\n\t\t\t\techo '<li>';\n\t\t\t\techo '<div class=\"reply-avatar\">' . get_avatar( $reply_author_email, 72 );\n\t\t\t\techo '<p class=\"reply-author\">' . esc_html( $reply_author ) . '</p>';\n\t\t\t\techo '</div>';\n\t\t\t\techo '<div class=\"ticket-reply\">';\n\n\t\t\t\t$mail_status = get_post_meta( $reply->ID, '_sf_mail_status', true );\n\t\t\t\tif ( isset( $mail_status['result'] ) && $mail_status['result'] === false ) {\n\t\t\t\t\tprintf( '<span class=\"sf-delivery-failed\"><span class=\"dashicons dashicons-info\"></span> %s</span>', esc_html__( 'Delivery failed! Please check your SMTP settings and try again.', 'supportflow' ) );\n\t\t\t\t}\n\n\t\t\t\t$post_content = stripslashes( $reply->post_content );\n\t\t\t\t$post_content = $this->hide_quoted_text( $post_content );\n\t\t\t\t$post_content = wpautop( make_clickable( $post_content ) );\n\n\t\t\t\techo $post_content;\n\t\t\t\tif ( $attachment_ids = get_post_meta( $reply->ID, 'sf_attachments' ) ) {\n\t\t\t\t\techo '<ul class=\"ticket-reply-attachments\">';\n\t\t\t\t\tforeach ( $attachment_ids as $attachment_id ) {\n\t\t\t\t\t\t$attachment_link = SupportFlow()->extend->attachments->get_attachment_url( $attachment_id );\n\t\t\t\t\t\techo '<li><a target=\"_blank\" href=\"' . esc_url( $attachment_link ) . '\">' . esc_html( get_the_title( $attachment_id ) ) . '</a></li>';\n\t\t\t\t\t}\n\t\t\t\t\techo '</ul>';\n\t\t\t\t}\n\t\t\t\techo '</div>';\n\t\t\t\t$reply_timestamp = sprintf( __( '%s at %s', 'supportflow' ), get_the_date( '', $reply->ID ), get_the_time( '', $reply->ID ) );\n\t\t\t\t$modified_gmt    = get_post_modified_time( 'U', true, $reply->ID );\n\t\t\t\t$last_activity   = sprintf( __( '%s ago', 'supportflow' ), human_time_diff( $modified_gmt ) );\n\t\t\t\techo '<div class=\"ticket-meta\"><span class=\"reply-timestamp\">' . esc_html( $reply_timestamp ) . ' (' . $last_activity . ')' . '</span></div>';\n\t\t\t\techo '</li>';\n\t\t\t}\n\t\t\techo '</ul>';\n\t\t}\n\n\t\techo '<div class=\"clear\"></div>';\n\n\t}\n\n\t/**\n\t * Modifications to the columns appearing in the All Tickets view\n\t */\n\tpublic function filter_manage_post_columns( $columns ) {\n\n\t\t$new_columns = array(\n\t\t\t'cb'          => $columns['cb'],\n\t\t\t'updated'     => __( 'Updated', 'supportflow' ),\n\t\t\t'title'       => __( 'Subject', 'supportflow' ),\n\t\t\t'sf_excerpt'  => __( 'Excerpt', 'supportflow' ),\n\t\t\t'customers' => __( 'Customers', 'supportflow' ),\n\t\t\t'status'      => __( 'Status', 'supportflow' ),\n\t\t\t'author'      => __( 'Agent', 'supportflow' ),\n\t\t\t'sf_replies'  => '<span title=\"' . __( 'Reply count', 'supportflow' ) . '\" class=\"comment-grey-bubble\"></span>',\n\t\t\t'email'       => __( 'E-Mail account', 'supportflow' ),\n\t\t\t'created'     => __( 'Created', 'support' ),\n\t\t);\n\n\t\treturn $new_columns;\n\t}\n\n\t/**\n\t * Make some other columns sortable too\n\t */\n\tpublic function manage_sortable_columns( $columns ) {\n\t\t$columns['updated'] = 'modified';\n\t\t$columns['created'] = 'date';\n\n\t\treturn $columns;\n\t}\n\n\t/**\n\t * Use the most recent public reply as the post excerpt\n\t * on the Manage Tickets view so mode=excerpt works well\n\t */\n\tpublic function filter_get_the_excerpt( $orig ) {\n\t\tif ( $reply = array_pop( SupportFlow()->get_ticket_replies( get_the_ID() ) ) ) {\n\t\t\t$reply_author = get_post_meta( $reply->ID, 'reply_author' );\n\n\t\t\treturn $reply_author . ': \"' . wp_trim_excerpt( $reply->post_content ) . '\"';\n\t\t} else {\n\t\t\treturn $orig;\n\t\t}\n\t}\n\n\t/**\n\t * Produce the column values for the custom columns we created\n\t */\n\tfunction action_manage_posts_custom_column( $column_name, $ticket_id ) {\n\n\t\tswitch ( $column_name ) {\n\t\t\tcase 'updated':\n\t\t\t\t$modified_gmt = get_post_modified_time( 'U', true, $ticket_id );\n\t\t\t\techo sprintf( __( '%s ago', 'supportflow' ), human_time_diff( $modified_gmt ) );\n\t\t\t\tbreak;\n\t\t\tcase 'sf_excerpt':\n\t\t\t\t$replies = SupportFlow()->get_ticket_replies( $ticket_id, array( 'posts_per_page' => 1, 'order' => 'ASC' ) );\n\t\t\t\tif ( ! isset( $replies[0] ) ) {\n\t\t\t\t\techo '\u2014';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$first_reply = $replies[0]->post_content;\n\t\t\t\tif ( strlen( $first_reply ) > 50 ) {\n\t\t\t\t\t$first_reply = substr( $first_reply, 0, 50 );\n\t\t\t\t}\n\t\t\t\techo $first_reply;\n\t\t\t\tbreak;\n\t\t\tcase 'customers':\n\t\t\t\t$customers = SupportFlow()->get_ticket_customers( $ticket_id, array( 'fields' => 'emails' ) );\n\t\t\t\tif ( empty( $customers ) ) {\n\t\t\t\t\techo '\u2014';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tforeach ( $customers as $key => $customer_email ) {\n\t\t\t\t\t$args              = array(\n\t\t\t\t\t\tSupportFlow()->customers_tax => SupportFlow()->get_email_hash( $customer_email ),\n\t\t\t\t\t\t'post_type'                    => SupportFlow()->post_type,\n\t\t\t\t\t);\n\t\t\t\t\t$customer_photo  = get_avatar( $customer_email, 16 );\n\t\t\t\t\t$customer_link   = '<a class=\"customer_link\" href=\"' . esc_url( add_query_arg( $args, admin_url( 'edit.php' ) ) ) . '\">' . $customer_email . '</a>';\n\t\t\t\t\t$customers[$key] = $customer_photo . '&nbsp;' . $customer_link;\n\t\t\t\t}\n\t\t\t\techo implode( '<br />', $customers );\n\t\t\t\tbreak;\n\t\t\tcase 'status':\n\t\t\t\t$post_status = get_post_status( $ticket_id );\n\t\t\t\t$args        = array(\n\t\t\t\t\t'post_type'   => SupportFlow()->post_type,\n\t\t\t\t\t'post_status' => $post_status,\n\t\t\t\t);\n\t\t\t\t$status_name = get_post_status_object( $post_status )->label;\n\t\t\t\t$filter_link = add_query_arg( $args, admin_url( 'edit.php' ) );\n\t\t\t\techo '<a href=\"' . esc_url( $filter_link ) . '\">' . esc_html( $status_name ) . '</a>';\n\t\t\t\tbreak;\n\t\t\tcase 'email':\n\t\t\t\t$email_account_id = get_post_meta( $ticket_id, 'email_account', true );\n\t\t\t\t$email_accounts   = SupportFlow()->extend->email_accounts->get_email_accounts();\n\t\t\t\t$args             = array(\n\t\t\t\t\t'post_type'     => SupportFlow()->post_type,\n\t\t\t\t\t'email_account' => $email_account_id,\n\t\t\t\t);\n\t\t\t\tif ( ! isset( $email_accounts[$email_account_id] ) ) {\n\t\t\t\t\techo '\u2014';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$email_account_username = $email_accounts[$email_account_id]['username'];\n\t\t\t\t$filter_link            = add_query_arg( $args, admin_url( 'edit.php' ) );\n\t\t\t\techo '<a href=\"' . esc_url( $filter_link ) . '\">' . esc_html( $email_account_username ) . '</a>';\n\t\t\t\tbreak;\n\t\t\tcase 'sf_replies':\n\t\t\t\t$replies = SupportFlow()->get_ticket_replies_count( $ticket_id );\n\t\t\t\techo '<div class=\"post-com-count-wrapper\">';\n\t\t\t\techo \"<span class='replies-count'>{$replies}</span>\";\n\t\t\t\techo '</div>';\n\t\t\t\tbreak;\n\t\t\tcase 'created':\n\t\t\t\t$created_time = get_the_time( get_option( 'time_format' ) . ' T', $ticket_id );\n\t\t\t\t$created_date = get_the_time( get_option( 'date_format' ), $ticket_id );\n\t\t\t\techo sprintf( __( '%s<br />%s', 'supportflow' ), $created_time, $created_date );\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Whether or not we're on a view for creating or updating a ticket\n\t *\n\t * @return string $pagenow Return the context for the screen we're in\n\t */\n\tpublic function is_edit_screen() {\n\t\tglobal $pagenow;\n\n\t\tif ( in_array( $pagenow, array( 'edit.php', 'post-new.php' ) ) && ! empty( $_GET['post_type'] ) && $_GET['post_type'] == SupportFlow()->post_type ) {\n\t\t\treturn $pagenow;\n\t\t} elseif ( 'post.php' == $pagenow && ! empty( $_GET['action'] ) && 'edit' == $_GET['action'] && ! empty( $_GET['post'] ) ) {\n\t\t\t$the_post = get_post( absint( $_GET['post'] ) );\n\n\t\t\treturn ( is_a( $the_post, 'WP_Post' ) && $the_post->post_type == SupportFlow()->post_type ) ? $pagenow : false;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t/**\n\t * When a ticket is saved or updated, make sure we save the customer\n\t * and new reply data\n\t */\n\tpublic function action_save_post( $ticket_id ) {\n\t\t$email_account_id = get_post_meta( $ticket_id, 'email_account', true );\n\t\t$email_account    = SupportFlow()->extend->email_accounts->get_email_account( $email_account_id );\n\t\t$ticket_lock      = ( null == $email_account && '' != $email_account );\n\n\t\tif ( SupportFlow()->post_type != get_post_type( $ticket_id ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isset( $_POST['customers'] ) ) {\n\t\t\t$customers = array_map( 'sanitize_email', explode( ',', $_POST['customers'] ) );\n\t\t\tSupportFlow()->update_ticket_customers( $ticket_id, $customers );\n\t\t}\n\n\t\tif ( isset( $_POST['post_email_account'] ) && is_numeric( $_POST['post_email_account'] ) && '' == $email_account_id ) {\n\t\t\t$email_account = (int) $_POST['post_email_account'];\n\t\t\tupdate_post_meta( $ticket_id, 'email_account', $email_account );\n\t\t}\n\n\t\tif ( isset( $_POST['post_email_notifications_override'] ) && in_array( $_POST['post_email_notifications_override'], array( 'default', 'enable', 'disable' ) ) ) {\n\t\t\t$email_notifications_override                        = get_post_meta( $ticket_id, 'email_notifications_override', true );\n\t\t\t$email_notifications_override[get_current_user_id()] = $_POST['post_email_notifications_override'];\n\t\t\tupdate_post_meta( $ticket_id, 'email_notifications_override', $email_notifications_override );\n\t\t}\n\n\t\tif ( isset( $_POST['reply'] ) && ! empty( $_POST['reply'] ) && ! $ticket_lock ) {\n\t\t\t$reply = $_POST['reply'];\n\n\t\t\tif ( isset( $_POST['insert-signature'] ) && 'on' == $_POST['insert-signature'] ) {\n\t\t\t\t$agent_signature = get_user_meta( get_current_user_id(), 'sf_user_signature', true );\n\t\t\t\tif ( ! empty( $agent_signature ) ) {\n\t\t\t\t\t$reply .= \"\\n\\n-----\\n$agent_signature\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$reply = SupportFlow()->sanitize_ticket_reply( $reply );\n\n\t\t\t$visibility = ( ! empty( $_POST['mark-private'] ) ) ? 'private' : 'public';\n\t\t\tif ( ! empty( $_POST['reply-attachments'] ) ) {\n\t\t\t\t$attachements   = explode( ',', trim( $_POST['reply-attachments'], ',' ) );\n\t\t\t\t// Remove same attachment added more than once\n\t\t\t\t$attachements   = array_unique($attachements);\n\t\t\t\t// Remove non-int attachment ID's from array\n\t\t\t\t$attachements   = array_filter( $attachements, function ( $val ) {\n\t\t\t\t\treturn (string) (int) $val === (string) $val;\n\t\t\t\t} );\n\t\t\t\t$attachment_ids = array_map( 'intval', $attachements );\n\t\t\t} else {\n\t\t\t\t$attachment_ids = '';\n\t\t\t}\n\t\t\t$cc  = ( ! empty( $_POST['cc'] ) ) ? SupportFlow()->extract_email_ids( $_POST['cc'] ) : '';\n\t\t\t$bcc = ( ! empty( $_POST['bcc'] ) ) ? SupportFlow()->extract_email_ids( $_POST['bcc'] ) : '';\n\n\t\t\t$reply_args = array(\n\t\t\t\t'post_status'    => $visibility,\n\t\t\t\t'attachment_ids' => $attachment_ids,\n\t\t\t\t'cc'             => $cc,\n\t\t\t\t'bcc'            => $bcc,\n\t\t\t);\n\t\t\tSupportFlow()->add_ticket_reply( $ticket_id, $reply, $reply_args );\n\t\t}\n\n\t}\n\n\t/**\n\t * Hide quoted content in a message and display a link to show it.\n\t * Line startings with \">\" sign are considered quoted content\n\t */\n\tpublic function hide_quoted_text( $text ) {\n\t\t$res = preg_replace_callback( \"#(?:^(?:&gt;)+\\s.+$\\s*)+#im\", array( $this, 'hide_quoted_text_regex_callback' ), $text );\n\t\treturn $res;\n\t}\n\n\t/**\n\t * Just a function used by hide_quoted_text() for its regex callback\n\t * Anonymous function are not used as they unavailable in PHP 5.2.x\n\t * create_function() is not used as it it not readable\n\t */\n\tprotected function hide_quoted_text_regex_callback( $matches ) {\n\t\t$match    = esc_attr( $matches[0] );\n\t\t$show_msg = __( 'Show quoted content', 'supportflow' );\n\n\t\treturn \"<span><a href='' class='sf_toggle_quoted_text' data-quoted_text='$match'><br />$show_msg</a><br /></span>\";\n\t}\n}\n\nSupportFlow()->extend->admin = new SupportFlow_Admin();\n"], "filenames": ["classes/class-supportflow-admin.php"], "buggy_code_start_loc": [902], "buggy_code_end_loc": [908], "fixing_code_start_loc": [902], "fixing_code_end_loc": [921], "type": "CWE-79", "message": "The supportflow plugin before 0.7 for WordPress has XSS via a discussion ticket title.", "other": {"cve": {"id": "CVE-2016-10969", "sourceIdentifier": "cve@mitre.org", "published": "2019-09-16T13:15:11.183", "lastModified": "2019-09-16T19:59:45.257", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The supportflow plugin before 0.7 for WordPress has XSS via a discussion ticket title."}, {"lang": "es", "value": "El plugin supportflow versiones anteriores a 0.7 para WordPress, presenta una vulnerabilidad de tipo XSS por medio de un t\u00edtulo de ticket de discusi\u00f3n."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:supportflow_project:supportflow:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "0.7", "matchCriteriaId": "421293EC-F352-45C6-90AB-B24223B9E82A"}]}]}], "references": [{"url": "https://github.com/SupportFlow/supportflow/commit/c08d376072f093b650c49dcb44124f43ea0177b1", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://wordpress.org/plugins/supportflow/#developers", "source": "cve@mitre.org", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/SupportFlow/supportflow/commit/c08d376072f093b650c49dcb44124f43ea0177b1"}}