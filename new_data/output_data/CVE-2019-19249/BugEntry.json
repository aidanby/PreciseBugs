{"buggy_code": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing QueryTree.Models;\nusing QueryTree.ViewModels;\nusing QueryTree.Managers;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace QueryTree.Controllers\n{\n    [Authorize]\n    public class InvitationsController : Controller\n    {\n\t\tprivate UserManager<ApplicationUser> _userManager;\n\t\tprivate ApplicationDbContext db;\n\n\t\tpublic InvitationsController(\n            ApplicationDbContext dbContext,\n            UserManager<ApplicationUser> userManager)\n\t\t{\n            db = dbContext;\n\t\t\t_userManager = userManager;\n\t\t}\n\n\t\tprivate ApplicationUser _currentUser;\n\t\tprivate ApplicationUser CurrentUser\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (_currentUser == null)\n\t\t\t\t{\n\t\t\t\t\tstring userId = _userManager.GetUserId(User);\n\t\t\t\t\t_currentUser = db.ApplicationUsers.FirstOrDefault(u => u.Id == userId);\n\t\t\t\t}\n\n\t\t\t\treturn _currentUser;\n\t\t\t}\n\t\t}\n\n        public ActionResult Index()\n        {\n            if (CurrentUser == null)\n            {\n                return NotFound(\"Could not find user\");\n            }\n\n            var invites = db.OrganisationInvites.Where(uc => uc.InviteEmail.ToLower() == CurrentUser.Email.ToLower() && uc.AcceptedOn == null && uc.RejectedOn == null);\n\n            if (invites.Any() == false)\n            {\n                // No invites to look at, redirect to home\n                return RedirectToAction(\"Index\", \"Home\");\n            }\n\n            List<InvitationViewModel> viewModels = new List<InvitationViewModel>();\n\n            foreach(var orgGrp in invites\n                .Include(c => c.CreatedBy)\n                .GroupBy(c => c.OrganisationId))\n            {\n                InvitationViewModel viewModel = new InvitationViewModel();\n                \n                Organisation organisation = db.Organisations.First(ba => ba.OrganisationId == orgGrp.Key);\n                viewModel.OrganisationId = organisation.OrganisationId;\n\n                viewModel.Invitees = orgGrp\n                    .Select(g => g.CreatedBy.UserName)\n                    .OrderBy(_ => _)\n                    .Distinct()\n                    .ToList();\n                \n                viewModel.OrganisationName = organisation.OrganisationName;\n                \n                viewModels.Add(viewModel);\n            }\n\n            if (viewModels.Any())\n            {\n                List<string> databasesMerged = new List<string>();\n                List<string> databasesLost = new List<string>();\n                \n                List<string> databases = db.DatabaseConnections\n                    .Where(d => d.OrganisationId == CurrentUser.OrganisationId)\n                    .ToList()\n                    .Select(d => d.Name)\n                    .OrderBy(d => d)\n                    .ToList();\n\n                // are the the sole owner of the organisation?\n                // if so we should transfer databases to the new organisation\n                bool soleOwner = db.ApplicationUsers.Any(u => u.OrganisationId == CurrentUser.OrganisationId && CurrentUser.Id != u.Id) == false;\n\n                if (soleOwner)\n                {\n                    databasesMerged = databases;\n                }\n                else\n                {\n                    databasesLost = databases;\n                }\n                \n                foreach(var viewModel in viewModels)\n                {\n                    viewModel.DatabasesMerged = databasesMerged;\n                    viewModel.DatabasesLost = databasesLost;\n                }\n            }\n\n            return View(viewModels);\n        }\n\n        public ActionResult Accept(int id)\n        {\n            if (CurrentUser == null)\n            {\n                return NotFound(\"Could not find user\");\n            }\n\n            var organisation = db.Organisations.FirstOrDefault(ba => ba.OrganisationId == id);\n\n            if (organisation == null)\n            {\n                return NotFound(\"Organisation not found\");\n            }\n\n            // remove other invitations to other organisations\n            db.OrganisationInvites.RemoveWhere(uc => uc.InviteEmail.ToLower() == CurrentUser.Email.ToLower() && uc.OrganisationId != id);\n\n            db.SaveChanges();\n\n            var invitationsToAccept = db.OrganisationInvites\n                .Where(uc => uc.InviteEmail == CurrentUser.Email && uc.OrganisationId == id)\n                .ToList();\n            \n            List<DatabaseConnection> leave = new List<DatabaseConnection>();\n            List<DatabaseConnection> migrate = new List<DatabaseConnection>();\n            \n            // Migrate or cut connections with databases as necessary.\n            List<DatabaseConnection> databases = db.DatabaseConnections\n                .Where(d => d.OrganisationId == CurrentUser.OrganisationId)\n                .ToList()\n                .ToList();\n\n            // are the the sole owner of the organisation?\n            // if so we should transfer databases to the new organisation\n            bool soleOwner = db.ApplicationUsers.Any(u => u.OrganisationId == CurrentUser.OrganisationId && CurrentUser.Id != u.Id) == false;\n\n            if (soleOwner)\n            {\n                migrate = databases;\n            }\n            else\n            {\n                leave = databases;\n            }\n            \n            foreach(var database in leave)\n            {\n                // there shouldn't be any of these, but do it just in case\n                db.UserDatabaseConnections.RemoveWhere(uc => uc.DatabaseConnectionID == database.DatabaseConnectionID && uc.ApplicationUserID == CurrentUser.Id);\n            }\n\n            foreach (var database in migrate)\n            {\n                // there shouldn't be any of these, but do it just in case\n                db.UserDatabaseConnections.RemoveWhere(uc => uc.DatabaseConnectionID == database.DatabaseConnectionID && uc.ApplicationUserID == CurrentUser.Id);\n                \n                database.Organisation = organisation;\n            }\n            \n            CurrentUser.OrganisationId = organisation.OrganisationId;\n\n            foreach (var invite in invitationsToAccept)\n            {\n                invite.AcceptedOn = DateTime.Now;\n            }\n        \n            db.SaveChanges();\n\n            return RedirectToAction(\"Index\", \"Home\");\n        }\n        \n        public ActionResult Reject(int id)\n        {\n            if (CurrentUser == null)\n            {\n                return NotFound(\"Could not find user\");\n            }\n            \n            var invite = db.OrganisationInvites.First(i => i.InviteEmail.ToLower() == CurrentUser.Email.ToLower() && i.OrganisationId == id && i.AcceptedOn == null && i.RejectedOn == null);\n            invite.RejectedOn = DateTime.Now;\n\n            db.SaveChanges();\n\n            return RedirectToAction(\"Index\", \"Home\");\n        }\n\n        protected override void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                db.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n    }\n}\n", "using QueryTree.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\n\n\nnamespace QueryTree.ViewModels\n{\n    public class InvitationViewModel\n    {\n        public InvitationViewModel() \n        {\n            DatabasesMerged = new List<string>();\n            DatabasesLost = new List<string>();\n        }\n\n        public string OrganisationName { get; set; }\n\n        public List<string> Invitees { get; set; }\n\n        public string Description\n        {\n            get\n            {\n                string inviteeSummary = string.Empty;\n                if (Invitees.Count == 1)\n                {\n                    inviteeSummary = Invitees.First();\n                }\n                else if (Invitees.Count > 1)\n                {\n\n                    inviteeSummary = string.Format(\"{0} and {1}\", Invitees.First(), Invitees.Last());\n                }\n                else if (Invitees.Count > 1)\n                {\n\n                    inviteeSummary = string.Format(\"{0}, and {1}\", string.Join(\", \", Invitees.Take(Invitees.Count - 1)), Invitees.Last());\n                }\n\n                string organisationName = this.OrganisationName;\n                if (string.IsNullOrEmpty(organisationName))\n                {\n                    organisationName = \"an organisation\";\n                }\n\n                if (IsOrganisationAdmin)\n                {\n                    return string.Format(\"You have been invited to become an administrator of {0} by {1}\", organisationName, inviteeSummary);\n                }\n                else\n                {\n                    return string.Format(\"You have been invited to join {0} by {1}\", organisationName, inviteeSummary);\n                }\n            }\n        }\n\n        public int OrganisationId { get; set; }\n\n        public bool IsOrganisationAdmin { get; set; }\n\n        public List<string> DatabasesMerged { get; set; }\n        public List<string> DatabasesLost { get; set; }\n    }\n}", "@model IEnumerable<QueryTree.ViewModels.InvitationViewModel>\n\n@{\n    ViewBag.Title = \"QueryTree - Pending Invitations\";\n    Layout = \"~/Views/Shared/_Layout.cshtml\";\n}\n\n\t<div class=\"row\">\n\t\t<div class=\"col-md-12\">\n\t\t\t<h2>Pending Invitations</h2>\n\t\t</div>\n\t</div>\n\n\n    @foreach (var item in Model)\n    {\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"well\">\n\t\t\t\t\t<p>\n                        @Html.DisplayFor(modelItem => item.Description)\n                    </p>\n\n                    @if (item.DatabasesLost.Any())\n                    {\n                        <p>You will lose access to the following databases</p>\n                        <ul>\n                            @foreach (var database in item.DatabasesLost)\n                            {\n                            <li>@database</li>\n                            }\n                        </ul>\n                    }\n\n                    @if (item.DatabasesMerged.Any())\n                    {\n                        <p>The following databases will be moved to the new organisation</p>\n                        <ul>\n                            @foreach (var database in item.DatabasesMerged)\n                            {\n                                <li>@database</li>\n                            }\n                        </ul>\n                    }\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t@Html.ActionLink(\"Accept\", \"Accept\", new { id = item.OrganisationId }, new { @class = \"btn btn-lg btn-success\" })\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t@Html.ActionLink(\"Reject\", \"Reject\", new { id = item.OrganisationId }, new { @class = \"btn btn-lg btn-warning rhs-delete\" })\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t}"], "fixing_code": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing QueryTree.Models;\nusing QueryTree.ViewModels;\nusing QueryTree.Managers;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace QueryTree.Controllers\n{\n    [Authorize]\n    public class InvitationsController : Controller\n    {\n\t\tprivate UserManager<ApplicationUser> _userManager;\n\t\tprivate ApplicationDbContext db;\n\n\t\tpublic InvitationsController(\n            ApplicationDbContext dbContext,\n            UserManager<ApplicationUser> userManager)\n\t\t{\n            db = dbContext;\n\t\t\t_userManager = userManager;\n\t\t}\n\n\t\tprivate ApplicationUser _currentUser;\n\t\tprivate ApplicationUser CurrentUser\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (_currentUser == null)\n\t\t\t\t{\n\t\t\t\t\tstring userId = _userManager.GetUserId(User);\n\t\t\t\t\t_currentUser = db.ApplicationUsers.FirstOrDefault(u => u.Id == userId);\n\t\t\t\t}\n\n\t\t\t\treturn _currentUser;\n\t\t\t}\n\t\t}\n\n        public ActionResult Index()\n        {\n            if (CurrentUser == null)\n            {\n                return NotFound(\"Could not find user\");\n            }\n\n            var invites = db.OrganisationInvites.Where(uc => uc.InviteEmail.ToLower() == CurrentUser.Email.ToLower() && uc.AcceptedOn == null && uc.RejectedOn == null);\n\n            if (invites.Any() == false)\n            {\n                // No invites to look at, redirect to home\n                return RedirectToAction(\"Index\", \"Home\");\n            }\n\n            List<InvitationViewModel> viewModels = new List<InvitationViewModel>();\n\n            foreach(var orgGrp in invites\n                .Include(c => c.CreatedBy)\n                .GroupBy(c => c.OrganisationId))\n            {\n                InvitationViewModel viewModel = new InvitationViewModel\n                {\n                    OrganisationInviteId = orgGrp.First().OrganisationInviteId\n                };\n                \n                Organisation organisation = db.Organisations.First(ba => ba.OrganisationId == orgGrp.Key);\n                viewModel.OrganisationId = organisation.OrganisationId;\n\n                viewModel.Invitees = orgGrp\n                    .Select(g => g.CreatedBy.UserName)\n                    .OrderBy(_ => _)\n                    .Distinct()\n                    .ToList();\n                \n                viewModel.OrganisationName = organisation.OrganisationName;\n                \n                viewModels.Add(viewModel);\n            }\n\n            if (viewModels.Any())\n            {\n                List<string> databasesMerged = new List<string>();\n                List<string> databasesLost = new List<string>();\n                \n                List<string> databases = db.DatabaseConnections\n                    .Where(d => d.OrganisationId == CurrentUser.OrganisationId)\n                    .ToList()\n                    .Select(d => d.Name)\n                    .OrderBy(d => d)\n                    .ToList();\n\n                // are the the sole owner of the organisation?\n                // if so we should transfer databases to the new organisation\n                bool soleOwner = db.ApplicationUsers.Any(u => u.OrganisationId == CurrentUser.OrganisationId && CurrentUser.Id != u.Id) == false;\n\n                if (soleOwner)\n                {\n                    databasesMerged = databases;\n                }\n                else\n                {\n                    databasesLost = databases;\n                }\n                \n                foreach(var viewModel in viewModels)\n                {\n                    viewModel.DatabasesMerged = databasesMerged;\n                    viewModel.DatabasesLost = databasesLost;\n                }\n            }\n\n            return View(viewModels);\n        }\n\n        public ActionResult Accept(int id)\n        {\n            if (CurrentUser == null)\n            {\n                return NotFound(\"Could not find user\");\n            }\n\n            var invite = db.OrganisationInvites.FirstOrDefault(uc => uc.InviteEmail.ToLower() == CurrentUser.Email.ToLower() && uc.AcceptedOn == null && uc.RejectedOn == null && uc.OrganisationInviteId == id);\n\n            if (invite == null)\n            {\n                return NotFound(\"Invite not found\");\n            }\n\n            var organisation = db.Organisations.FirstOrDefault(ba => ba.OrganisationId == invite.OrganisationId);\n\n            if (organisation == null)\n            {\n                return NotFound(\"Organisation not found\");\n            }\n\n            List<DatabaseConnection> leave = new List<DatabaseConnection>();\n            List<DatabaseConnection> migrate = new List<DatabaseConnection>();\n            \n            // Migrate or cut connections with databases as necessary.\n            List<DatabaseConnection> databases = db.DatabaseConnections\n                .Where(d => d.OrganisationId == CurrentUser.OrganisationId)\n                .ToList()\n                .ToList();\n\n            // are the the sole owner of the organisation?\n            // if so we should transfer databases to the new organisation\n            bool soleOwner = db.ApplicationUsers.Any(u => u.OrganisationId == CurrentUser.OrganisationId && CurrentUser.Id != u.Id) == false;\n\n            if (soleOwner)\n            {\n                migrate = databases;\n            }\n            else\n            {\n                leave = databases;\n            }\n            \n            foreach(var database in leave)\n            {\n                // there shouldn't be any of these, but do it just in case\n                db.UserDatabaseConnections.RemoveWhere(uc => uc.DatabaseConnectionID == database.DatabaseConnectionID && uc.ApplicationUserID == CurrentUser.Id);\n            }\n\n            foreach (var database in migrate)\n            {\n                // there shouldn't be any of these, but do it just in case\n                db.UserDatabaseConnections.RemoveWhere(uc => uc.DatabaseConnectionID == database.DatabaseConnectionID && uc.ApplicationUserID == CurrentUser.Id);\n                \n                database.Organisation = organisation;\n            }\n            \n            CurrentUser.OrganisationId = organisation.OrganisationId;\n\n            invite.AcceptedOn = DateTime.Now;\n            \n            // reject other invitations to other organisations\n            var invitesToReject = db.OrganisationInvites.Where(uc => uc.InviteEmail.ToLower() == CurrentUser.Email.ToLower() && uc.OrganisationInviteId != invite.OrganisationInviteId);\n        \n            foreach (var inviteToReject in invitesToReject)\n            {\n                inviteToReject.RejectedOn = DateTime.Now;\n            }\n\n            db.SaveChanges();\n\n            return RedirectToAction(\"Index\", \"Home\");\n        }\n        \n        public ActionResult Reject(int id)\n        {\n            if (CurrentUser == null)\n            {\n                return NotFound(\"Could not find user\");\n            }\n            \n            var invite = db.OrganisationInvites.FirstOrDefault(uc => uc.InviteEmail.ToLower() == CurrentUser.Email.ToLower() && uc.AcceptedOn == null && uc.RejectedOn == null && uc.OrganisationInviteId == id);\n\n            if (invite == null)\n            {\n                return NotFound(\"Invite not found\");\n            }\n\n            invite.RejectedOn = DateTime.Now;\n\n            db.SaveChanges();\n\n            return RedirectToAction(\"Index\", \"Home\");\n        }\n\n        protected override void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                db.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n    }\n}\n", "using QueryTree.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\n\n\nnamespace QueryTree.ViewModels\n{\n    public class InvitationViewModel\n    {\n        public InvitationViewModel() \n        {\n            DatabasesMerged = new List<string>();\n            DatabasesLost = new List<string>();\n        }\n\n        public string OrganisationName { get; set; }\n\n        public List<string> Invitees { get; set; }\n\n        public string Description\n        {\n            get\n            {\n                string inviteeSummary = string.Empty;\n                if (Invitees.Count == 1)\n                {\n                    inviteeSummary = Invitees.First();\n                }\n                else if (Invitees.Count > 1)\n                {\n\n                    inviteeSummary = string.Format(\"{0} and {1}\", Invitees.First(), Invitees.Last());\n                }\n                else if (Invitees.Count > 1)\n                {\n\n                    inviteeSummary = string.Format(\"{0}, and {1}\", string.Join(\", \", Invitees.Take(Invitees.Count - 1)), Invitees.Last());\n                }\n\n                string organisationName = this.OrganisationName;\n                if (string.IsNullOrEmpty(organisationName))\n                {\n                    organisationName = \"an organisation\";\n                }\n\n                if (IsOrganisationAdmin)\n                {\n                    return string.Format(\"You have been invited to become an administrator of {0} by {1}\", organisationName, inviteeSummary);\n                }\n                else\n                {\n                    return string.Format(\"You have been invited to join {0} by {1}\", organisationName, inviteeSummary);\n                }\n            }\n        }\n\n        public int OrganisationId { get; set; }\n\n        public int OrganisationInviteId { get; set; }\n\n        public bool IsOrganisationAdmin { get; set; }\n\n        public List<string> DatabasesMerged { get; set; }\n        public List<string> DatabasesLost { get; set; }\n    }\n}", "@model IEnumerable<QueryTree.ViewModels.InvitationViewModel>\n\n@{\n    ViewBag.Title = \"QueryTree - Pending Invitations\";\n    Layout = \"~/Views/Shared/_Layout.cshtml\";\n}\n\n\t<div class=\"row\">\n\t\t<div class=\"col-md-12\">\n\t\t\t<h2>Pending Invitations</h2>\n\t\t</div>\n\t</div>\n\n\n    @foreach (var item in Model)\n    {\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"well\">\n\t\t\t\t\t<p>\n                        @Html.DisplayFor(modelItem => item.Description)\n                    </p>\n\n                    @if (item.DatabasesLost.Any())\n                    {\n                        <p>You will lose access to the following databases</p>\n                        <ul>\n                            @foreach (var database in item.DatabasesLost)\n                            {\n                            <li>@database</li>\n                            }\n                        </ul>\n                    }\n\n                    @if (item.DatabasesMerged.Any())\n                    {\n                        <p>The following databases will be moved to the new organisation</p>\n                        <ul>\n                            @foreach (var database in item.DatabasesMerged)\n                            {\n                                <li>@database</li>\n                            }\n                        </ul>\n                    }\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t@Html.ActionLink(\"Accept\", \"Accept\", new { id = item.OrganisationInviteId }, new { @class = \"btn btn-lg btn-success\" })\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t@Html.ActionLink(\"Reject\", \"Reject\", new { id = item.OrganisationInviteId }, new { @class = \"btn btn-lg btn-warning rhs-delete\" })\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t}"], "filenames": ["Web/Controllers/InvitationsController.cs", "Web/ViewModels/InvitationViewModel.cs", "Web/Views/Invitations/Index.cshtml"], "buggy_code_start_loc": [64, 60, 47], "buggy_code_end_loc": [194, 60, 52], "fixing_code_start_loc": [64, 61, 47], "fixing_code_end_loc": [206, 63, 52], "type": "CWE-20", "message": "Controllers/InvitationsController.cs in QueryTree before 3.0.99-beta mishandles invitations.", "other": {"cve": {"id": "CVE-2019-19249", "sourceIdentifier": "cve@mitre.org", "published": "2019-11-25T17:15:11.993", "lastModified": "2019-12-11T20:16:54.557", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Controllers/InvitationsController.cs in QueryTree before 3.0.99-beta mishandles invitations."}, {"lang": "es", "value": "El archivo Controllers/InvitationsController.cs en QueryTree versiones anteriores a 3.0.99-beta, maneja inapropiadamente las invitaciones."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.11:beta:*:*:*:*:*:*", "matchCriteriaId": "BE044E4F-A82B-4281-A2B1-0441CA01BA0A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.13:beta:*:*:*:*:*:*", "matchCriteriaId": "E845AEF7-9F32-4D28-940F-8A7C5A46EF28"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.15:beta:*:*:*:*:*:*", "matchCriteriaId": "52671540-55F6-45F4-BD88-DB10FBA0DD3C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.17:beta:*:*:*:*:*:*", "matchCriteriaId": "94C5DE7B-31B6-4B1A-B057-0C8CB6D2CDCB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.19:beta:*:*:*:*:*:*", "matchCriteriaId": "CBAEF7D7-0E89-4A37-892D-641A5E94CF71"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.21:beta:*:*:*:*:*:*", "matchCriteriaId": "8607862C-4D4A-46B9-A9B6-F00E4BA367C9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.25:beta:*:*:*:*:*:*", "matchCriteriaId": "649F5EB4-99BF-44D2-AF30-E8AE4464C266"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.27:beta:*:*:*:*:*:*", "matchCriteriaId": "1A4DDD13-DE67-4528-97D5-B2361512190E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.29:beta:*:*:*:*:*:*", "matchCriteriaId": "4B1E88E9-0A7D-483A-8049-DA2EDBD73450"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.31:beta:*:*:*:*:*:*", "matchCriteriaId": "69027D6B-1699-4518-8054-DCA774BE3C1F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.36:beta:*:*:*:*:*:*", "matchCriteriaId": "D53F0638-2334-4C71-ABF1-80F8FAB67E37"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.39:beta:*:*:*:*:*:*", "matchCriteriaId": "06B14047-2F27-4A42-8325-2F06A5FC70B1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.41:beta:*:*:*:*:*:*", "matchCriteriaId": "AF9DED87-E033-48F0-AF5E-4ADD5472093E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.43:beta:*:*:*:*:*:*", "matchCriteriaId": "BD46A2C7-7669-445B-BDBB-BC1EDD4DF999"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.45:beta:*:*:*:*:*:*", "matchCriteriaId": "DA7A984C-6583-4902-ADE2-FE04F3ABEF64"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.49:beta:*:*:*:*:*:*", "matchCriteriaId": "67AED30C-10F5-49ED-B1CD-BA1896B9739C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.51:beta:*:*:*:*:*:*", "matchCriteriaId": "60E43823-A99E-495D-B6C4-196580A56054"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.53:beta:*:*:*:*:*:*", "matchCriteriaId": "E1268572-69A5-464F-B593-5286AB7284EC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.55:beta:*:*:*:*:*:*", "matchCriteriaId": "3ACCAB9C-CB42-4707-A988-1F9D4D1FD4EA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.57:beta:*:*:*:*:*:*", "matchCriteriaId": "9A3108B6-2DCF-4326-B87B-CABBBDDA620B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.59:beta:*:*:*:*:*:*", "matchCriteriaId": "2EB89C9C-B804-49A3-AAAF-091FD9C5A839"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.61:beta:*:*:*:*:*:*", "matchCriteriaId": "0A4D7A7B-B206-4158-984B-F6ED985B7AD6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.63:beta:*:*:*:*:*:*", "matchCriteriaId": "B575649B-B1F7-4D78-AEDF-2E5C9E0C2ED7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.65:beta:*:*:*:*:*:*", "matchCriteriaId": "C2A91470-28DC-4196-ABB7-4D130DF5BA0B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.69:beta:*:*:*:*:*:*", "matchCriteriaId": "8A679FC1-3772-4D78-95B4-E8EBD0E76AD2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.71:beta:*:*:*:*:*:*", "matchCriteriaId": "12F38033-25B4-4203-81DB-ABC95CA7871F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.73:beta:*:*:*:*:*:*", "matchCriteriaId": "5FCC7C99-C3AF-48CE-AEA7-13218BE65BDD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.76:beta:*:*:*:*:*:*", "matchCriteriaId": "B2BBC8EB-8F92-4EF8-A335-0A7EA55094C1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.79:beta:*:*:*:*:*:*", "matchCriteriaId": "782A69B1-ABAA-4C87-BF44-EDD103275005"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.83:beta:*:*:*:*:*:*", "matchCriteriaId": "1CE2FF03-A81D-48E5-8CD4-F785905C1185"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.85:beta:*:*:*:*:*:*", "matchCriteriaId": "7BC435AD-AB9D-4A6F-842B-C3AD72E8C755"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.88:beta:*:*:*:*:*:*", "matchCriteriaId": "F0D6EF23-22BD-454F-B61E-43AF111E90B5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.90:beta:*:*:*:*:*:*", "matchCriteriaId": "1E1F9857-1D62-4DDF-97B4-90D980EBCDD3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.92:beta:*:*:*:*:*:*", "matchCriteriaId": "16964FA5-0107-4B06-9B23-5401A93B00D7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.95:beta:*:*:*:*:*:*", "matchCriteriaId": "D1535DB6-282A-4079-A6A3-5153E2995978"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.97:beta:*:*:*:*:*:*", "matchCriteriaId": "0ACC6F58-93C4-45D9-90AA-36C63AC77D7A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:querytreeapp:querytree:3.0.99:beta:*:*:*:*:*:*", "matchCriteriaId": "99B41850-732B-4EF5-91A4-5DB8EA65B351"}]}]}], "references": [{"url": "https://github.com/d4software/QueryTree/commit/57b700823f8eb1a42eb3bc0c706fbe5e5f5e766f", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/d4software/QueryTree/compare/3.0.97-beta...3.0.99-beta", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/d4software/QueryTree/commit/57b700823f8eb1a42eb3bc0c706fbe5e5f5e766f"}}