{"buggy_code": ["package jadx.core.export;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.InputSource;\n\nimport jadx.api.ResourceFile;\nimport jadx.core.dex.attributes.AFlag;\nimport jadx.core.dex.nodes.ClassNode;\nimport jadx.core.dex.nodes.RootNode;\nimport jadx.core.utils.exceptions.JadxRuntimeException;\nimport jadx.core.utils.files.FileUtils;\nimport jadx.core.xmlgen.ResContainer;\n\npublic class ExportGradleProject {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(ExportGradleProject.class);\n\n\tprivate static final Set<String> IGNORE_CLS_NAMES = new HashSet<>(Arrays.asList(\n\t\t\t\"R\",\n\t\t\t\"BuildConfig\"));\n\n\tprivate final RootNode root;\n\tprivate final File projectDir;\n\tprivate final File appDir;\n\tprivate final File srcOutDir;\n\tprivate final File resOutDir;\n\tprivate final ApplicationParams applicationParams;\n\n\tpublic ExportGradleProject(RootNode root, File projectDir, ResourceFile androidManifest, ResContainer appStrings) {\n\t\tthis.root = root;\n\t\tthis.projectDir = projectDir;\n\t\tthis.appDir = new File(projectDir, \"app\");\n\t\tthis.srcOutDir = new File(appDir, \"src/main/java\");\n\t\tthis.resOutDir = new File(appDir, \"src/main\");\n\t\tthis.applicationParams = getApplicationParams(\n\t\t\t\tparseAndroidManifest(androidManifest),\n\t\t\t\tparseAppStrings(appStrings));\n\t}\n\n\tpublic void init() {\n\t\ttry {\n\t\t\tFileUtils.makeDirs(srcOutDir);\n\t\t\tFileUtils.makeDirs(resOutDir);\n\t\t\tsaveProjectBuildGradle();\n\t\t\tsaveApplicationBuildGradle();\n\t\t\tsaveSettingsGradle();\n\t\t\tskipGeneratedClasses();\n\t\t} catch (Exception e) {\n\t\t\tthrow new JadxRuntimeException(\"Gradle export failed\", e);\n\t\t}\n\t}\n\n\tprivate void saveProjectBuildGradle() throws IOException {\n\t\tTemplateFile tmpl = TemplateFile.fromResources(\"/export/build.gradle.tmpl\");\n\t\ttmpl.save(new File(projectDir, \"build.gradle\"));\n\t}\n\n\tprivate void saveSettingsGradle() throws IOException {\n\t\tTemplateFile tmpl = TemplateFile.fromResources(\"/export/settings.gradle.tmpl\");\n\n\t\ttmpl.add(\"applicationName\", applicationParams.getApplicationName());\n\t\ttmpl.save(new File(projectDir, \"settings.gradle\"));\n\t}\n\n\tprivate void saveApplicationBuildGradle() throws IOException {\n\t\tTemplateFile tmpl = TemplateFile.fromResources(\"/export/app.build.gradle.tmpl\");\n\t\tString appPackage = root.getAppPackage();\n\n\t\tif (appPackage == null) {\n\t\t\tappPackage = \"UNKNOWN\";\n\t\t}\n\n\t\ttmpl.add(\"applicationId\", appPackage);\n\t\ttmpl.add(\"minSdkVersion\", applicationParams.getMinSdkVersion());\n\t\ttmpl.add(\"targetSdkVersion\", applicationParams.getTargetSdkVersion());\n\t\ttmpl.add(\"versionCode\", applicationParams.getVersionCode());\n\t\ttmpl.add(\"versionName\", applicationParams.getVersionName());\n\t\ttmpl.save(new File(appDir, \"build.gradle\"));\n\t}\n\n\tprivate void skipGeneratedClasses() {\n\t\tfor (ClassNode cls : root.getClasses()) {\n\t\t\tString shortName = cls.getClassInfo().getShortName();\n\t\t\tif (IGNORE_CLS_NAMES.contains(shortName)) {\n\t\t\t\tcls.add(AFlag.DONT_GENERATE);\n\t\t\t\tLOG.debug(\"Skip class: {}\", cls);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate ApplicationParams getApplicationParams(Document androidManifest, Document appStrings) {\n\t\tElement manifest = (Element) androidManifest.getElementsByTagName(\"manifest\").item(0);\n\t\tElement usesSdk = (Element) androidManifest.getElementsByTagName(\"uses-sdk\").item(0);\n\t\tElement application = (Element) androidManifest.getElementsByTagName(\"application\").item(0);\n\n\t\tInteger versionCode = Integer.valueOf(manifest.getAttribute(\"android:versionCode\"));\n\t\tString versionName = manifest.getAttribute(\"android:versionName\");\n\t\tInteger minSdk = Integer.valueOf(usesSdk.getAttribute(\"android:minSdkVersion\"));\n\t\tInteger targetSdk = Integer.valueOf(usesSdk.getAttribute(\"android:targetSdkVersion\"));\n\t\tString appName = \"UNKNOWN\";\n\n\t\tif (application.hasAttribute(\"android:label\")) {\n\t\t\tString appLabelName = application.getAttribute(\"android:label\");\n\t\t\tif (appLabelName.startsWith(\"@string\")) {\n\t\t\t\tappLabelName = appLabelName.split(\"/\")[1];\n\t\t\t\tNodeList strings = appStrings.getElementsByTagName(\"string\");\n\n\t\t\t\tfor (int i = 0; i < strings.getLength(); i++) {\n\t\t\t\t\tString stringName = strings.item(i)\n\t\t\t\t\t\t\t.getAttributes()\n\t\t\t\t\t\t\t.getNamedItem(\"name\")\n\t\t\t\t\t\t\t.getNodeValue();\n\n\t\t\t\t\tif (stringName.equals(appLabelName)) {\n\t\t\t\t\t\tappName = strings.item(i).getTextContent();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tappName = appLabelName;\n\t\t\t}\n\t\t}\n\t\treturn new ApplicationParams(appName, minSdk, targetSdk, versionCode, versionName);\n\t}\n\n\tprivate Document parseXml(String xmlContent) {\n\t\ttry {\n\t\t\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\t\t\tDocument document = builder.parse(new InputSource(new StringReader(xmlContent)));\n\n\t\t\tdocument.getDocumentElement().normalize();\n\n\t\t\treturn document;\n\t\t} catch (Exception e) {\n\t\t\tthrow new JadxRuntimeException(\"Can not parse xml content\", e);\n\t\t}\n\t}\n\n\tprivate Document parseAppStrings(ResContainer appStrings) {\n\t\tString content = appStrings.getText().getCodeStr();\n\n\t\treturn parseXml(content);\n\t}\n\n\tprivate Document parseAndroidManifest(ResourceFile androidManifest) {\n\t\tString content = androidManifest.loadContent().getText().getCodeStr();\n\n\t\treturn parseXml(content);\n\t}\n\n\tpublic File getSrcOutDir() {\n\t\treturn srcOutDir;\n\t}\n\n\tpublic File getResOutDir() {\n\t\treturn resOutDir;\n\t}\n}\n"], "fixing_code": ["package jadx.core.export;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.xml.parsers.DocumentBuilder;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.InputSource;\n\nimport jadx.api.ResourceFile;\nimport jadx.core.dex.attributes.AFlag;\nimport jadx.core.dex.nodes.ClassNode;\nimport jadx.core.dex.nodes.RootNode;\nimport jadx.core.utils.exceptions.JadxRuntimeException;\nimport jadx.core.utils.files.FileUtils;\nimport jadx.core.xmlgen.ResContainer;\nimport jadx.core.xmlgen.XmlSecurity;\n\npublic class ExportGradleProject {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(ExportGradleProject.class);\n\n\tprivate static final Set<String> IGNORE_CLS_NAMES = new HashSet<>(Arrays.asList(\n\t\t\t\"R\",\n\t\t\t\"BuildConfig\"));\n\n\tprivate final RootNode root;\n\tprivate final File projectDir;\n\tprivate final File appDir;\n\tprivate final File srcOutDir;\n\tprivate final File resOutDir;\n\tprivate final ApplicationParams applicationParams;\n\n\tpublic ExportGradleProject(RootNode root, File projectDir, ResourceFile androidManifest, ResContainer appStrings) {\n\t\tthis.root = root;\n\t\tthis.projectDir = projectDir;\n\t\tthis.appDir = new File(projectDir, \"app\");\n\t\tthis.srcOutDir = new File(appDir, \"src/main/java\");\n\t\tthis.resOutDir = new File(appDir, \"src/main\");\n\t\tthis.applicationParams = getApplicationParams(\n\t\t\t\tparseAndroidManifest(androidManifest),\n\t\t\t\tparseAppStrings(appStrings));\n\t}\n\n\tpublic void init() {\n\t\ttry {\n\t\t\tFileUtils.makeDirs(srcOutDir);\n\t\t\tFileUtils.makeDirs(resOutDir);\n\t\t\tsaveProjectBuildGradle();\n\t\t\tsaveApplicationBuildGradle();\n\t\t\tsaveSettingsGradle();\n\t\t\tskipGeneratedClasses();\n\t\t} catch (Exception e) {\n\t\t\tthrow new JadxRuntimeException(\"Gradle export failed\", e);\n\t\t}\n\t}\n\n\tprivate void saveProjectBuildGradle() throws IOException {\n\t\tTemplateFile tmpl = TemplateFile.fromResources(\"/export/build.gradle.tmpl\");\n\t\ttmpl.save(new File(projectDir, \"build.gradle\"));\n\t}\n\n\tprivate void saveSettingsGradle() throws IOException {\n\t\tTemplateFile tmpl = TemplateFile.fromResources(\"/export/settings.gradle.tmpl\");\n\n\t\ttmpl.add(\"applicationName\", applicationParams.getApplicationName());\n\t\ttmpl.save(new File(projectDir, \"settings.gradle\"));\n\t}\n\n\tprivate void saveApplicationBuildGradle() throws IOException {\n\t\tTemplateFile tmpl = TemplateFile.fromResources(\"/export/app.build.gradle.tmpl\");\n\t\tString appPackage = root.getAppPackage();\n\n\t\tif (appPackage == null) {\n\t\t\tappPackage = \"UNKNOWN\";\n\t\t}\n\n\t\ttmpl.add(\"applicationId\", appPackage);\n\t\ttmpl.add(\"minSdkVersion\", applicationParams.getMinSdkVersion());\n\t\ttmpl.add(\"targetSdkVersion\", applicationParams.getTargetSdkVersion());\n\t\ttmpl.add(\"versionCode\", applicationParams.getVersionCode());\n\t\ttmpl.add(\"versionName\", applicationParams.getVersionName());\n\t\ttmpl.save(new File(appDir, \"build.gradle\"));\n\t}\n\n\tprivate void skipGeneratedClasses() {\n\t\tfor (ClassNode cls : root.getClasses()) {\n\t\t\tString shortName = cls.getClassInfo().getShortName();\n\t\t\tif (IGNORE_CLS_NAMES.contains(shortName)) {\n\t\t\t\tcls.add(AFlag.DONT_GENERATE);\n\t\t\t\tLOG.debug(\"Skip class: {}\", cls);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate ApplicationParams getApplicationParams(Document androidManifest, Document appStrings) {\n\t\tElement manifest = (Element) androidManifest.getElementsByTagName(\"manifest\").item(0);\n\t\tElement usesSdk = (Element) androidManifest.getElementsByTagName(\"uses-sdk\").item(0);\n\t\tElement application = (Element) androidManifest.getElementsByTagName(\"application\").item(0);\n\n\t\tInteger versionCode = Integer.valueOf(manifest.getAttribute(\"android:versionCode\"));\n\t\tString versionName = manifest.getAttribute(\"android:versionName\");\n\t\tInteger minSdk = Integer.valueOf(usesSdk.getAttribute(\"android:minSdkVersion\"));\n\t\tInteger targetSdk = Integer.valueOf(usesSdk.getAttribute(\"android:targetSdkVersion\"));\n\t\tString appName = \"UNKNOWN\";\n\n\t\tif (application.hasAttribute(\"android:label\")) {\n\t\t\tString appLabelName = application.getAttribute(\"android:label\");\n\t\t\tif (appLabelName.startsWith(\"@string\")) {\n\t\t\t\tappLabelName = appLabelName.split(\"/\")[1];\n\t\t\t\tNodeList strings = appStrings.getElementsByTagName(\"string\");\n\n\t\t\t\tfor (int i = 0; i < strings.getLength(); i++) {\n\t\t\t\t\tString stringName = strings.item(i)\n\t\t\t\t\t\t\t.getAttributes()\n\t\t\t\t\t\t\t.getNamedItem(\"name\")\n\t\t\t\t\t\t\t.getNodeValue();\n\n\t\t\t\t\tif (stringName.equals(appLabelName)) {\n\t\t\t\t\t\tappName = strings.item(i).getTextContent();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tappName = appLabelName;\n\t\t\t}\n\t\t}\n\t\treturn new ApplicationParams(appName, minSdk, targetSdk, versionCode, versionName);\n\t}\n\n\tprivate Document parseXml(String xmlContent) {\n\t\ttry {\n\t\t\tDocumentBuilder builder = XmlSecurity.getSecureDbf().newDocumentBuilder();\n\t\t\tDocument document = builder.parse(new InputSource(new StringReader(xmlContent)));\n\n\t\t\tdocument.getDocumentElement().normalize();\n\n\t\t\treturn document;\n\t\t} catch (Exception e) {\n\t\t\tthrow new JadxRuntimeException(\"Can not parse xml content\", e);\n\t\t}\n\t}\n\n\tprivate Document parseAppStrings(ResContainer appStrings) {\n\t\tString content = appStrings.getText().getCodeStr();\n\n\t\treturn parseXml(content);\n\t}\n\n\tprivate Document parseAndroidManifest(ResourceFile androidManifest) {\n\t\tString content = androidManifest.loadContent().getText().getCodeStr();\n\n\t\treturn parseXml(content);\n\t}\n\n\tpublic File getSrcOutDir() {\n\t\treturn srcOutDir;\n\t}\n\n\tpublic File getResOutDir() {\n\t\treturn resOutDir;\n\t}\n}\n"], "filenames": ["jadx-core/src/main/java/jadx/core/export/ExportGradleProject.java"], "buggy_code_start_loc": [11], "buggy_code_end_loc": [143], "fixing_code_start_loc": [10], "fixing_code_end_loc": [143], "type": "CWE-611", "message": "Improper Restriction of XML External Entity Reference in GitHub repository skylot/jadx prior to 1.3.2.", "other": {"cve": {"id": "CVE-2022-0219", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-20T17:15:18.550", "lastModified": "2022-01-26T17:46:34.183", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Restriction of XML External Entity Reference in GitHub repository skylot/jadx prior to 1.3.2."}, {"lang": "es", "value": "Una Restricci\u00f3n Inapropiada de la Referencia a Entidades Externas XML en el repositorio GitHub skylot/jadx versiones anteriores a 1.3.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jadx_project:jadx:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.2", "matchCriteriaId": "98A9E89C-FCA6-4066-8FB0-D4D278CC53B1"}]}]}], "references": [{"url": "https://github.com/skylot/jadx/commit/d22db30166e7cb369d72be41382bb63ac8b81c52", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/0d093863-29e8-4dd7-a885-64f76d50bf5e", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/skylot/jadx/commit/d22db30166e7cb369d72be41382bb63ac8b81c52"}}