{"buggy_code": ["# --\n# Copyright (C) 2001-2018 OTRS AG, https://otrs.com/\n# --\n# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n# the enclosed file COPYING for license information (GPL). If you\n# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.\n# --\n\npackage Kernel::System::HTMLUtils;\n\nuse strict;\nuse warnings;\n\nuse utf8;\n\nuse MIME::Base64;\n\nour @ObjectDependencies = (\n    'Kernel::Config',\n    'Kernel::System::Encode',\n    'Kernel::System::Log',\n);\n\n=head1 NAME\n\nKernel::System::HTMLUtils - creating and modifying html strings\n\n=head1 DESCRIPTION\n\nA module for creating and modifying html strings.\n\n=head1 PUBLIC INTERFACE\n\n=head2 new()\n\nDon't use the constructor directly, use the ObjectManager instead:\n\n    my $HTMLUtilsObject = $Kernel::OM->Get('Kernel::System::HTMLUtils');\n\n=cut\n\nsub new {\n    my ( $Type, %Param ) = @_;\n\n    # allocate new hash for object\n    my $Self = {};\n    bless( $Self, $Type );\n\n    # get debug level from parent\n    $Self->{Debug} = $Param{Debug} || 0;\n\n    return $Self;\n}\n\n=head2 ToAscii()\n\nconvert an HTML string to an ASCII string\n\n    my $Ascii = $HTMLUtilsObject->ToAscii(\n        String => $String,\n        NoLineLength => 1, # optional, don't consider line length,\n    );\n\n=cut\n\nsub ToAscii {\n    my ( $Self, %Param ) = @_;\n\n    # check needed stuff\n    for (qw(String)) {\n        if ( !defined $Param{$_} ) {\n            $Kernel::OM->Get('Kernel::System::Log')->Log(\n                Priority => 'error',\n                Message  => \"Need $_!\"\n            );\n            return;\n        }\n    }\n\n    # make sure to flag the input string as unicode (utf8) because replacements below can\n    # introduce unicode encoded characters (see bug#10970, bug#11596 and bug#12097 for more info)\n    $Kernel::OM->Get('Kernel::System::Encode')->EncodeInput( \\$Param{String} );\n\n    # get length of line for forcing line breakes\n    my $LineLength = $Kernel::OM->Get('Kernel::Config')->Get('Ticket::Frontend::TextAreaNote') || 78;\n\n    # find <a href=....> and replace it with [x]\n    my $LinkList = '';\n    my $Counter  = 0;\n    $Param{String} =~ s{\n        <a\\s.*?href=(\"|')(.+?)(\"|').*?>\n    }\n    {\n        my $Link = $2;\n        $Counter++;\n        $LinkList .= \"[$Counter] $Link\\n\";\n        \"[$Counter]\";\n    }egxi;\n\n    # pre-process <blockquote> and <div style=\\\"cite\\\"\n    my %Cite;\n    $Counter = 0;\n    $Param{String} =~ s{\n        <blockquote(.*?)>(.+?)</blockquote>\n    }\n    {\n        my $Ascii = $Self->ToAscii(\n            String => $2,\n        );\n        # force line breaking\n        if ( length $Ascii > $LineLength ) {\n            $Ascii =~ s/(.{4,$LineLength})(?:\\s|\\z)/$1\\n/gm;\n        }\n        $Ascii =~ s/^(.*?)$/> $1/gm;\n        $Counter++;\n        my $Key     = \"######Cite::$Counter######\";\n        $Cite{$Key} = $Ascii;\n        $Key;\n    }segxmi;\n    $Param{String} =~ s{\n        <div\\s{1,5}type=\"cite\".+?>(.+?)</div>\n    }\n    {\n        my $Ascii = $Self->ToAscii(\n            String => $1,\n        );\n        # force line breaking\n        if ( length $Ascii > $LineLength ) {\n            $Ascii =~ s/(.{4,$LineLength})(?:\\s|\\z)/$1\\n/gm;\n        }\n        $Ascii =~ s/^(.*?)$/> $1/gm;\n        $Counter++;\n        my $Key     = \"######Cite::$Counter######\";\n        $Cite{$Key} = $Ascii;\n        $Key;\n    }segxmi;\n\n    # remember <pre> and <code> tags\n    my %One2One;\n    $Counter = 0;\n    $Param{String} =~ s{\n        <(pre|code)(.*?)>(.+?)</(pre|code)(.*?)>\n    }\n    {\n        my $Content = $3;\n        $Counter++;\n        my $Key        = \"######One2One::$Counter######\";\n        $One2One{$Key} = $Content;\n        $Key;\n    }segxmi;\n\n    # remove comments at the first place to avoid to much work\n    # for the regex engine\n    $Param{String} =~ s{<!-- .*? -->}{}xmgsi;\n\n    # remove empty lines\n    $Param{String} =~ s/^\\s*//mg;\n\n    # fix some bad stuff from opera and others\n    $Param{String} =~ s/(\\n\\r|\\r\\r\\n|\\r\\n)/\\n/gs;\n\n    # remove new line after <br>\n    $Param{String} =~ s/(\\<br(\\s{0,3}|\\s{1,3}.+?)(\\/|)\\>)(\\n|\\r)/$1/gsi;\n\n    # replace new lines with one space\n    $Param{String} =~ s/\\n/ /gs;\n    $Param{String} =~ s/\\r/ /gs;\n\n    # remove style tags\n    $Param{String} =~ s{<style [^>]*? />}{}xgsi;\n    $Param{String} =~ s{<style [^>]*? > .*? </style[^>]*>}{}xgsi;\n\n    # remove <br>,<br/>,<br />, <br class=\"name\"/>, tags and replace it with \\n\n    $Param{String} =~ s/\\<br(\\s{0,3}|\\s{1,3}.+?)(\\/|)\\>/\\n/gsi;\n\n    # remove </div> tags and replace it with \\n\n    $Param{String} =~ s/<\\/(\\s{0,3})div>/\\n/gsi;\n\n    # remove hr tags and replace it with \\n\n    $Param{String} =~ s/\\<(hr|hr.+?)\\>/\\n\\n/gsi;\n\n    # remove p, table tags and replace it with \\n\n    $Param{String} =~ s/\\<(\\/|)(p|p.+?|table|table.+?)\\>/\\n\\n/gsi;\n\n    # remove opening tr, th tags and replace them with \\n\n    $Param{String} =~ s/\\<(tr|tr.+?|th|th.+?)\\>/\\n\\n/gsi;\n\n    # convert li tags to \\n -\n    $Param{String} =~ s/\\<li\\>/\\n - /gsi;\n\n    # convert </ul> and </ol> tags to \\n\\n\n    $Param{String} =~ s/\\<\\/(ul|ol)\\>/\\n\\n/gsi;\n\n    # remove </td> tags and replace them with \" \"\n    $Param{String} =~ s/<\\/td[^>]*>/ /gsi;\n\n    # replace multiple spaces with just one space\n    $Param{String} =~ s/[ ]{2,}/ /mg;\n\n    # remember <pre> and <code> tags and replace it\n    for my $Key ( sort keys %One2One ) {\n        $Param{String} =~ s/$Key/\\n\\n\\n$One2One{$Key}\\n\\n/g;\n    }\n\n    # strip all other tags\n    $Param{String} =~ s/\\<.+?\\>//gs;\n\n    # html encode based on cpan's HTML::Entities v1.35\n    my %Entity = (\n\n        # Some normal chars that have special meaning in SGML context\n        amp  => '&',    # ampersand\n        'gt' => '>',    # greater than\n        'lt' => '<',    # less than\n        quot => '\"',    # double quote\n        apos => \"'\",    # single quote\n\n        # PUBLIC ISO 8879-1986//ENTITIES Added Latin 1//EN//HTML\n        AElig  => chr(198),    # capital AE diphthong (ligature)\n        Aacute => chr(193),    # capital A, acute accent\n        Acirc  => chr(194),    # capital A, circumflex accent\n        Agrave => chr(192),    # capital A, grave accent\n        Aring  => chr(197),    # capital A, ring\n        Atilde => chr(195),    # capital A, tilde\n        Auml   => chr(196),    # capital A, dieresis or umlaut mark\n        Ccedil => chr(199),    # capital C, cedilla\n        ETH    => chr(208),    # capital Eth, Icelandic\n        Eacute => chr(201),    # capital E, acute accent\n        Ecirc  => chr(202),    # capital E, circumflex accent\n        Egrave => chr(200),    # capital E, grave accent\n        Euml   => chr(203),    # capital E, dieresis or umlaut mark\n        Iacute => chr(205),    # capital I, acute accent\n        Icirc  => chr(206),    # capital I, circumflex accent\n        Igrave => chr(204),    # capital I, grave accent\n        Iuml   => chr(207),    # capital I, dieresis or umlaut mark\n        Ntilde => chr(209),    # capital N, tilde\n        Oacute => chr(211),    # capital O, acute accent\n        Ocirc  => chr(212),    # capital O, circumflex accent\n        Ograve => chr(210),    # capital O, grave accent\n        Oslash => chr(216),    # capital O, slash\n        Otilde => chr(213),    # capital O, tilde\n        Ouml   => chr(214),    # capital O, dieresis or umlaut mark\n        THORN  => chr(222),    # capital THORN, Icelandic\n        Uacute => chr(218),    # capital U, acute accent\n        Ucirc  => chr(219),    # capital U, circumflex accent\n        Ugrave => chr(217),    # capital U, grave accent\n        Uuml   => chr(220),    # capital U, dieresis or umlaut mark\n        Yacute => chr(221),    # capital Y, acute accent\n        aacute => chr(225),    # small a, acute accent\n        acirc  => chr(226),    # small a, circumflex accent\n        aelig  => chr(230),    # small ae diphthong (ligature)\n        agrave => chr(224),    # small a, grave accent\n        aring  => chr(229),    # small a, ring\n        atilde => chr(227),    # small a, tilde\n        auml   => chr(228),    # small a, dieresis or umlaut mark\n        ccedil => chr(231),    # small c, cedilla\n        eacute => chr(233),    # small e, acute accent\n        ecirc  => chr(234),    # small e, circumflex accent\n        egrave => chr(232),    # small e, grave accent\n        eth    => chr(240),    # small eth, Icelandic\n        euml   => chr(235),    # small e, dieresis or umlaut mark\n        iacute => chr(237),    # small i, acute accent\n        icirc  => chr(238),    # small i, circumflex accent\n        igrave => chr(236),    # small i, grave accent\n        iuml   => chr(239),    # small i, dieresis or umlaut mark\n        ntilde => chr(241),    # small n, tilde\n        oacute => chr(243),    # small o, acute accent\n        ocirc  => chr(244),    # small o, circumflex accent\n        ograve => chr(242),    # small o, grave accent\n        oslash => chr(248),    # small o, slash\n        otilde => chr(245),    # small o, tilde\n        ouml   => chr(246),    # small o, dieresis or umlaut mark\n        szlig  => chr(223),    # small sharp s, German (sz ligature)\n        thorn  => chr(254),    # small thorn, Icelandic\n        uacute => chr(250),    # small u, acute accent\n        ucirc  => chr(251),    # small u, circumflex accent\n        ugrave => chr(249),    # small u, grave accent\n        uuml   => chr(252),    # small u, dieresis or umlaut mark\n        yacute => chr(253),    # small y, acute accent\n        yuml   => chr(255),    # small y, dieresis or umlaut mark\n\n        # Some extra Latin 1 chars that are listed in the HTML3.2 draft (21-May-96)\n        copy => chr(169),      # copyright sign\n        reg  => chr(174),      # registered sign\n        nbsp => chr(160),      # non breaking space\n\n        # Additional ISO-8859/1 entities listed in rfc1866 (section 14)\n        iexcl   => chr(161),\n        cent    => chr(162),\n        pound   => chr(163),\n        curren  => chr(164),\n        yen     => chr(165),\n        brvbar  => chr(166),\n        sect    => chr(167),\n        uml     => chr(168),\n        ordf    => chr(170),\n        laquo   => chr(171),\n        'not'   => chr(172),    # not is a keyword in perl\n        shy     => chr(173),\n        macr    => chr(175),\n        deg     => chr(176),\n        plusmn  => chr(177),\n        sup1    => chr(185),\n        sup2    => chr(178),\n        sup3    => chr(179),\n        acute   => chr(180),\n        micro   => chr(181),\n        para    => chr(182),\n        middot  => chr(183),\n        cedil   => chr(184),\n        ordm    => chr(186),\n        raquo   => chr(187),\n        frac14  => chr(188),\n        frac12  => chr(189),\n        frac34  => chr(190),\n        iquest  => chr(191),\n        'times' => chr(215),    # times is a keyword in perl\n        divide  => chr(247),\n\n        (\n            $] > 5.007\n            ? (\n                OElig    => chr(338),\n                oelig    => chr(339),\n                Scaron   => chr(352),\n                scaron   => chr(353),\n                Yuml     => chr(376),\n                fnof     => chr(402),\n                circ     => chr(710),\n                tilde    => chr(732),\n                Alpha    => chr(913),\n                Beta     => chr(914),\n                Gamma    => chr(915),\n                Delta    => chr(916),\n                Epsilon  => chr(917),\n                Zeta     => chr(918),\n                Eta      => chr(919),\n                Theta    => chr(920),\n                Iota     => chr(921),\n                Kappa    => chr(922),\n                Lambda   => chr(923),\n                Mu       => chr(924),\n                Nu       => chr(925),\n                Xi       => chr(926),\n                Omicron  => chr(927),\n                Pi       => chr(928),\n                Rho      => chr(929),\n                Sigma    => chr(931),\n                Tau      => chr(932),\n                Upsilon  => chr(933),\n                Phi      => chr(934),\n                Chi      => chr(935),\n                Psi      => chr(936),\n                Omega    => chr(937),\n                alpha    => chr(945),\n                beta     => chr(946),\n                gamma    => chr(947),\n                delta    => chr(948),\n                epsilon  => chr(949),\n                zeta     => chr(950),\n                eta      => chr(951),\n                theta    => chr(952),\n                iota     => chr(953),\n                kappa    => chr(954),\n                lambda   => chr(955),\n                mu       => chr(956),\n                nu       => chr(957),\n                xi       => chr(958),\n                omicron  => chr(959),\n                pi       => chr(960),\n                rho      => chr(961),\n                sigmaf   => chr(962),\n                sigma    => chr(963),\n                tau      => chr(964),\n                upsilon  => chr(965),\n                phi      => chr(966),\n                chi      => chr(967),\n                psi      => chr(968),\n                omega    => chr(969),\n                thetasym => chr(977),\n                upsih    => chr(978),\n                piv      => chr(982),\n                ensp     => chr(8194),\n                emsp     => chr(8195),\n                thinsp   => chr(8201),\n                zwnj     => chr(8204),\n                zwj      => chr(8205),\n                lrm      => chr(8206),\n                rlm      => chr(8207),\n                ndash    => chr(8211),\n                mdash    => chr(8212),\n                lsquo    => chr(8216),\n                rsquo    => chr(8217),\n                sbquo    => chr(8218),\n                ldquo    => chr(8220),\n                rdquo    => chr(8221),\n                bdquo    => chr(8222),\n                dagger   => chr(8224),\n                Dagger   => chr(8225),\n                bull     => chr(8226),\n                hellip   => chr(8230),\n                permil   => chr(8240),\n                prime    => chr(8242),\n                Prime    => chr(8243),\n                lsaquo   => chr(8249),\n                rsaquo   => chr(8250),\n                oline    => chr(8254),\n                frasl    => chr(8260),\n                euro     => chr(8364),\n                image    => chr(8465),\n                weierp   => chr(8472),\n                real     => chr(8476),\n                trade    => chr(8482),\n                alefsym  => chr(8501),\n                larr     => chr(8592),\n                uarr     => chr(8593),\n                rarr     => chr(8594),\n                darr     => chr(8595),\n                harr     => chr(8596),\n                crarr    => chr(8629),\n                lArr     => chr(8656),\n                uArr     => chr(8657),\n                rArr     => chr(8658),\n                dArr     => chr(8659),\n                hArr     => chr(8660),\n                forall   => chr(8704),\n                part     => chr(8706),\n                exist    => chr(8707),\n                empty    => chr(8709),\n                nabla    => chr(8711),\n                isin     => chr(8712),\n                notin    => chr(8713),\n                ni       => chr(8715),\n                prod     => chr(8719),\n                sum      => chr(8721),\n                minus    => chr(8722),\n                lowast   => chr(8727),\n                radic    => chr(8730),\n                prop     => chr(8733),\n                infin    => chr(8734),\n                ang      => chr(8736),\n                'and'    => chr(8743),\n                'or'     => chr(8744),\n                cap      => chr(8745),\n                cup      => chr(8746),\n                'int'    => chr(8747),\n                there4   => chr(8756),\n                sim      => chr(8764),\n                cong     => chr(8773),\n                asymp    => chr(8776),\n                'ne'     => chr(8800),\n                equiv    => chr(8801),\n                'le'     => chr(8804),\n                'ge'     => chr(8805),\n                'sub'    => chr(8834),\n                sup      => chr(8835),\n                nsub     => chr(8836),\n                sube     => chr(8838),\n                supe     => chr(8839),\n                oplus    => chr(8853),\n                otimes   => chr(8855),\n                perp     => chr(8869),\n                sdot     => chr(8901),\n                lceil    => chr(8968),\n                rceil    => chr(8969),\n                lfloor   => chr(8970),\n                rfloor   => chr(8971),\n                lang     => chr(9001),\n                rang     => chr(9002),\n                loz      => chr(9674),\n                spades   => chr(9824),\n                clubs    => chr(9827),\n                hearts   => chr(9829),\n                diams    => chr(9830),\n                )\n            : ()\n            )\n    );\n\n    # encode html entities like \"&#8211;\"\n    $Param{String} =~ s{\n        (&\\#(\\d+);?)\n    }\n    {\n        my $ChrOrig = $1;\n        my $Dec = $2;\n\n        # Don't process UTF-16 surrogate pairs. Used on their own, these are not valid UTF-8 code\n        # points and can result in errors in old Perl versions. See bug#12588 for more information.\n        # - High Surrogate codes (U+D800-U+DBFF)\n        # - Low Surrogate codes (U+DC00-U+DFFF)\n        if ( $Dec >= 55296 && $Dec <= 57343 ) {\n            $ChrOrig;\n        }\n        else {\n            my $Chr = chr($Dec);\n\n            # Make sure we get valid UTF8 code points, but skip characters from 128 to 255\n            #   (inclusive), since they are by default internally not encoded as UTF-8 for\n            #   backward compatibility reasons. See bug#12457 for more information.\n            if ( $Dec < 128 || $Dec> 255 ) {\n                Encode::_utf8_off($Chr);\n                $Chr = Encode::decode('utf-8', $Chr, 0);\n            }\n\n            if ( $Chr ) {\n                $Chr;\n            }\n            else {\n                $ChrOrig;\n            }\n        }\n    }egx;\n\n    # encode html entities like \"&#x3d;\"\n    $Param{String} =~ s{\n        (&\\#[xX]([0-9a-fA-F]+);?)\n    }\n    {\n        my $ChrOrig = $1;\n        my $Dec = hex( $2 );\n\n        # Don't process UTF-16 surrogate pairs. Used on their own, these are not valid UTF-8 code\n        # points and can result in errors in old Perl versions. See bug#12588 for more information.\n        # - High Surrogate codes (U+D800-U+DBFF)\n        # - Low Surrogate codes (U+DC00-U+DFFF)\n        if ( $Dec >= 55296 && $Dec <= 57343 ) {\n            $ChrOrig;\n        }\n        else {\n            if ( $Dec ) {\n                my $Chr = chr( $Dec );\n\n                # Make sure we get valid UTF8 code points, but skip characters from 128 to 255\n                #   (inclusive), since they are by default internally not encoded as UTF-8 for\n                #   backward compatibility reasons. See bug#12457 for more information.\n                if ( $Dec < 128 || $Dec > 255 ) {\n                    Encode::_utf8_off($Chr);\n                    $Chr = Encode::decode('utf-8', $Chr, 0);\n                }\n\n                if ( $Chr ) {\n                    $Chr;\n                }\n                else {\n                    $ChrOrig;\n                }\n            }\n            else {\n                $ChrOrig;\n            }\n        }\n    }egx;\n\n    # encode html entities like \"&amp;\"\n    $Param{String} =~ s{\n        (&(\\w+);?)\n    }\n    {\n        if ( $Entity{$2} ) {\n            $Entity{$2};\n        }\n        else {\n            $1;\n        }\n    }egx;\n\n    # remove empty lines\n    $Param{String} =~ s/^\\s*\\n\\s*\\n/\\n/mg;\n\n    # force line breaking\n    if ( length $Param{String} > $LineLength && !$Param{NoLineLength} ) {\n        $Param{String} =~ s/(.{4,$LineLength})(?:\\s|\\z)/$1\\n/gm;\n    }\n\n    # remember <blockquote> and <div style=\\\"cite\\\"\n    for my $Key ( sort keys %Cite ) {\n        $Param{String} =~ s/$Key/$Cite{$Key}\\n/g;\n    }\n\n    # add extracted links\n    if ($LinkList) {\n        $Param{String} .= \"\\n\\n\" . $LinkList;\n    }\n\n    return $Param{String};\n}\n\n=head2 ToHTML()\n\nconvert an ASCII string to an HTML string\n\n    my $HTMLString = $HTMLUtilsObject->ToHTML(\n        String             => $String,\n        ReplaceDoubleSpace => 0,        # replace &nbsp;&nbsp; with \"  \", optional 1 or 0 (defaults to 1)\n    );\n\n=cut\n\nsub ToHTML {\n    my ( $Self, %Param ) = @_;\n\n    # check needed stuff\n    for (qw(String)) {\n        if ( !defined $Param{$_} ) {\n            $Kernel::OM->Get('Kernel::System::Log')->Log(\n                Priority => 'error',\n                Message  => \"Need $_!\"\n            );\n            return;\n        }\n    }\n\n    # fix some bad stuff from opera and others\n    $Param{String} =~ s/(\\n\\r|\\r\\r\\n|\\r\\n)/\\n/gs;\n\n    $Param{String} =~ s/&/&amp;/g;\n    $Param{String} =~ s/</&lt;/g;\n    $Param{String} =~ s/>/&gt;/g;\n    $Param{String} =~ s/\"/&quot;/g;\n    $Param{String} =~ s/(\\n|\\r)/<br\\/>\\n/g;\n    $Param{String} =~ s/  /&nbsp;&nbsp;/g if $Param{ReplaceDoubleSpace};\n\n    return $Param{String};\n}\n\n=head2 DocumentComplete()\n\ncheck and e. g. add <html> and <body> tags to given html string\n\n    my $HTMLDocument = $HTMLUtilsObject->DocumentComplete(\n        String  => $String,\n        Charset => $Charset,\n    );\n\n=cut\n\nsub DocumentComplete {\n    my ( $Self, %Param ) = @_;\n\n    # check needed stuff\n    for (qw(String Charset)) {\n        if ( !defined $Param{$_} ) {\n            $Kernel::OM->Get('Kernel::System::Log')->Log(\n                Priority => 'error',\n                Message  => \"Need $_!\"\n            );\n            return;\n        }\n    }\n\n    return $Param{String} if $Param{String} =~ /<html>/i;\n\n    my $Css = $Kernel::OM->Get('Kernel::Config')->Get('Frontend::RichText::DefaultCSS')\n        || 'font-size: 12px; font-family:Courier,monospace,fixed;';\n\n    # escape special characters like double-quotes, e.g. used in font names with spaces\n    $Css = $Self->ToHTML( String => $Css );\n\n    # Use the HTML5 doctype because it is compatible with HTML4 and causes the browsers\n    #   to render the content in standards mode, which is more safe than quirks mode.\n    my $Body = '<!DOCTYPE html><html><head>';\n    $Body\n        .= '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=' . $Param{Charset} . '\"/>';\n    $Body .= '</head><body style=\"' . $Css . '\">' . $Param{String} . '</body></html>';\n    return $Body;\n}\n\n=head2 DocumentStrip()\n\nremove html document tags from string\n\n    my $HTMLString = $HTMLUtilsObject->DocumentStrip(\n        String  => $String,\n    );\n\n=cut\n\nsub DocumentStrip {\n    my ( $Self, %Param ) = @_;\n\n    # check needed stuff\n    for (qw(String)) {\n        if ( !defined $Param{$_} ) {\n            $Kernel::OM->Get('Kernel::System::Log')->Log(\n                Priority => 'error',\n                Message  => \"Need $_!\"\n            );\n            return;\n        }\n    }\n\n    $Param{String} =~ s/^<\\!DOCTYPE\\s+HTML.+?>//gsi;\n    $Param{String} =~ s/<head>.+?<\\/head>//gsi;\n    $Param{String} =~ s/<(html|body)(.*?)>//gsi;\n    $Param{String} =~ s/<\\/(html|body)>//gsi;\n\n    return $Param{String};\n}\n\n=head2 DocumentCleanup()\n\nperform some sanity checks on HTML content.\n\n -  Replace MS Word 12 <p|div> with class \"MsoNormal\" by using <br/> because\n    it's not used as <p><div> (margin:0cm; margin-bottom:.0001pt;).\n\n -  Replace <blockquote> by using\n    \"<div style=\"border:none;border-left:solid blue 1.5pt;padding:0cm 0cm 0cm 4.0pt\" type=\"cite\">\"\n    because of cross mail client and browser compatibility.\n\n -  If there is no HTML doctype present, inject the HTML5 doctype, because it is compatible with HTML4\n    and causes the browsers to render the content in standards mode, which is safer.\n\n    $HTMLBody = $HTMLUtilsObject->DocumentCleanup(\n        String => $HTMLBody,\n    );\n\n=cut\n\nsub DocumentCleanup {\n    my ( $Self, %Param ) = @_;\n\n    # check needed stuff\n    for (qw(String)) {\n        if ( !defined $Param{$_} ) {\n            $Kernel::OM->Get('Kernel::System::Log')->Log(\n                Priority => 'error',\n                Message  => \"Need $_!\"\n            );\n            return;\n        }\n    }\n\n    # If the string starts with <html> directly, inject the doctype\n    $Param{String} =~ s{ \\A \\s* <html }{<!DOCTYPE html><html}gsmix;\n\n    # remove <base> tags - see bug#8880\n    $Param{String} =~ s{<base .*?>}{}xmsi;\n\n    # replace MS Word 12 <p|div> with class \"MsoNormal\" by using <br/> because\n    # it's not used as <p><div> (margin:0cm; margin-bottom:.0001pt;)\n    $Param{String} =~ s{\n        <p\\s{1,3}class=(|\"|')MsoNormal(|\"|')(.*?)>(.+?)</p>\n    }\n    {\n        $4 . '<br/>';\n    }segxmi;\n\n    $Param{String} =~ s{\n        <div\\s{1,3}class=(|\"|')MsoNormal(|\"|')(.*?)>(.+?)</div>\n    }\n    {\n        $4 . '<br/>';\n    }segxmi;\n\n    # replace <blockquote> by using\n    # \"<div style=\"border:none;border-left:solid blue 1.5pt;padding:0cm 0cm 0cm 4.0pt\" type=\"cite\">\"\n    # because of cross mail client and browser compatability\n    my $Style = \"border:none;border-left:solid blue 1.5pt;padding:0cm 0cm 0cm 4.0pt\";\n    for ( 1 .. 10 ) {\n        $Param{String} =~ s{\n            <blockquote(.*?)>(.+?)</blockquote>\n        }\n        {\n            \"<div $1 style=\\\"$Style\\\">$2</div>\";\n        }segxmi;\n    }\n\n    return $Param{String};\n}\n\n=head2 LinkQuote()\n\ndetect links in HTML code, add C<a href> if missing\n\n    my $HTMLWithLinks = $HTMLUtilsObject->LinkQuote(\n        String    => $HTMLString,\n        Target    => 'TargetName', # content of target=\"?\", e. g. _blank\n        TargetAdd => 1,            # add target=\"_blank\" to all existing \"<a href\"\n    );\n\nalso string ref is possible\n\n    my $HTMLWithLinksRef = $HTMLUtilsObject->LinkQuote(\n        String => \\$HTMLStringRef,\n    );\n\n=cut\n\nsub LinkQuote {\n    my ( $Self, %Param ) = @_;\n\n    my $String = $Param{String} || '';\n\n    # check ref\n    my $StringScalar;\n    if ( !ref $String ) {\n        $StringScalar = $String;\n        $String       = \\$StringScalar;\n\n        # return if string is not a ref and it is empty\n        return $StringScalar if !$StringScalar;\n    }\n\n    # add target to already existing url of html string\n    if ( $Param{TargetAdd} ) {\n\n        # find target\n        my $Target = $Param{Target};\n        if ( !$Target ) {\n            $Target = '_blank';\n        }\n\n        # add target to existing \"<a href\"\n        ${$String} =~ s{\n            (<a\\s{1,10})([^>]+)>\n        }\n        {\n            my $Start = $1;\n            my $Value = $2;\n            if ( $Value !~ /href=/i || $Value =~ /target=/i ) {\n                \"$Start$Value>\";\n            }\n            else {\n                \"$Start$Value target=\\\"$Target\\\">\";\n            }\n        }egxsi;\n    }\n\n    my $Marker = \"\u00a7\" x 10;\n\n    # Remove existing <a>...</a> tags and their content to be re-inserted later, this must not be quoted.\n    # Also remove other tags to avoid quoting in tag parameters.\n    my $Counter = 0;\n    my %TagHash;\n    ${$String} =~ s{\n        (<a\\s[^>]*?>[^>]*</a>|<[^>]+?>)\n    }\n    {\n        my $Content = $1;\n        my $Key     = \"${Marker}TagHash-$Counter${Marker}\";\n        $TagHash{$Counter++} = $Content;\n        $Key;\n    }egxism;\n\n    # Add <a> tags for URLs in the content.\n    my $Target = '';\n    if ( $Param{Target} ) {\n        $Target = \" target=\\\"$Param{Target}\\\"\";\n    }\n    ${$String} =~ s{\n        (                                          # $1 greater-than and less-than sign\n            > | < | \\s+ | \u00a7{10} |\n            (?: &[a-zA-Z0-9]+; )                   # get html entities\n        )\n        (                                          # $2\n            (?:                                    # http or only www\n                (?: (?: http s? | ftp ) :\\/\\/) |   # http://,https:// and ftp://\n                (?: (?: www | ftp ) \\.)            # www. and ftp.\n            )\n        )\n        (                                          # $3\n            (?: [a-z0-9\\-]+ \\. )*                  # get subdomains, optional\n            [a-z0-9\\-]+                            # get top level domain\n            (?:                                    # optional port number\n                [:]\n                [0-9]+\n            )?\n            (?:                                    # file path element\n                [\\/\\.]\n                | [a-zA-Z0-9\\-_=%]\n            )*\n            (?:                                    # param string\n                [\\?]                               # if param string is there, \"?\" must be present\n                [a-zA-Z0-9&;=%\\-_:\\.\\/]*           # param string content, this will also catch entities like &amp;\n            )?\n            (?:                                    # link hash string\n                [\\#]                               #\n                [a-zA-Z0-9&;=%\\-_:\\.\\/]*           # hash string content, this will also catch entities like &amp;\n            )?\n        )\n        (?=                                        # $4\n            (?:\n                [\\?,;!\\.\\)] (?: \\s | $ )           # \\)\\s this construct is because of bug# 2450\n                | \\\"\n                | \\]\n                | \\s+\n                | '\n                | >                               # greater-than and less-than sign\n                | <                               # \"\n                | (?: &[a-zA-Z0-9]+; )+            # html entities\n                | $                                # bug# 2715\n            )\n            | \u00a7{10}                                # ending TagHash\n        )\n    }\n    {\n        my $Start    = $1;\n        my $Protocol = $2;\n        my $Link     = $3;\n        my $End      = $4 || '';\n\n        # there may different links for href and link body\n        my $HrefLink;\n        my $DisplayLink;\n\n        if ( $Protocol =~ m{\\A ( http | https | ftp ) : \\/ \\/ }xi ) {\n            $DisplayLink = $Protocol . $Link;\n            $HrefLink    = $DisplayLink;\n        }\n        else {\n            if ($Protocol =~ m{\\A ftp }smx ) {\n                $HrefLink = 'ftp://';\n            }\n            else {\n                $HrefLink = 'http://';\n            }\n\n            if ( $Protocol ) {\n                $HrefLink   .= $Protocol;\n                $DisplayLink = $Protocol;\n            }\n\n            $DisplayLink .= $Link;\n            $HrefLink    .= $Link;\n        }\n        $Start . \"<a href=\\\"$HrefLink\\\"$Target title=\\\"$HrefLink\\\">$DisplayLink<\\/a>\" . $End;\n    }egxism;\n\n    # Re-add previously removed tags.\n    ${$String} =~ s{${Marker}TagHash-(\\d+)${Marker}}{$TagHash{$1}}egsxim;\n\n    # check ref && return result like called\n    if ( defined $StringScalar ) {\n        return ${$String};\n    }\n    return $String;\n}\n\n=head2 Safety()\n\nTo remove/strip active html tags/addons (javascript, C<applet>s, C<embed>s and C<object>s)\nfrom html strings.\n\n    my %Safe = $HTMLUtilsObject->Safety(\n        String         => $HTMLString,\n        NoApplet       => 1,\n        NoObject       => 1,\n        NoEmbed        => 1,\n        NoSVG          => 1,\n        NoImg          => 1,\n        NoIntSrcLoad   => 0,\n        NoExtSrcLoad   => 1,\n        NoJavaScript   => 1,\n        ReplacementStr => 'string',          # optional, string to show instead of applet, object, embed, svg and img tags\n    );\n\nalso string ref is possible\n\n    my %Safe = $HTMLUtilsObject->Safety(\n        String       => \\$HTMLStringRef,\n        NoApplet     => 1,\n        NoObject     => 1,\n        NoEmbed      => 1,\n        NoSVG        => 1,\n        NoImg        => 1,\n        NoIntSrcLoad => 0,\n        NoExtSrcLoad => 1,\n        NoJavaScript => 1,\n    );\n\nreturns\n\n    my %Safe = (\n        String  => $HTMLString, # modified html string (scalar or ref)\n        Replace => 1,           # info if something got replaced\n    );\n\n=cut\n\nsub Safety {\n    my ( $Self, %Param ) = @_;\n\n    # check needed stuff\n    for (qw(String)) {\n        if ( !defined $Param{$_} ) {\n            $Kernel::OM->Get('Kernel::System::Log')->Log(\n                Priority => 'error',\n                Message  => \"Need $_!\"\n            );\n            return;\n        }\n    }\n\n    my $String = $Param{String} || '';\n\n    # check ref\n    my $StringScalar;\n    if ( !ref $String ) {\n        $StringScalar = $String;\n        $String       = \\$StringScalar;\n    }\n\n    my %Safety;\n\n    my $Replaced;\n\n    # In UTF-7, < and > can be encoded to mask them from security filters like this one.\n    my $TagStart = '(?:<|[+]ADw-)';\n    my $TagEnd   = '(?:>|[+]AD4-)';\n\n    # This can also be entity-encoded to hide it from the parser.\n    #   Browsers seem to tolerate an omitted \";\".\n    my $JavaScriptPrefixRegex = '\n        (?: j | &\\#106[;]? | &\\#x6a[;]? )\n        (?: a | &\\#97[;]?  | &\\#x61[;]? )\n        (?: v | &\\#118[;]? | &\\#x76[;]? )\n        (?: a | &\\#97[;]?  | &\\#x61[;]? )\n        (?: s | &\\#115[;]? | &\\#x73[;]? )\n        (?: c | &\\#99[;]?  | &\\#x63[;]? )\n        (?: r | &\\#114[;]? | &\\#x72[;]? )\n        (?: i | &\\#105[;]? | &\\#x69[;]? )\n        (?: p | &\\#112[;]? | &\\#x70[;]? )\n        (?: t | &\\#116[;]? | &\\#x74[;]? )\n    ';\n\n    my $ExpressionPrefixRegex = '\n        (?: e | &\\#101[;]? | &\\#x65[;]? )\n        (?: x | &\\#120[;]? | &\\#x78[;]? )\n        (?: p | &\\#112[;]? | &\\#x70[;]? )\n        (?: r | &\\#114[;]? | &\\#x72[;]? )\n        (?: e | &\\#101[;]? | &\\#x65[;]? )\n        (?: s | &\\#115[;]? | &\\#x73[;]? )\n        (?: s | &\\#115[;]? | &\\#x73[;]? )\n        (?: i | &\\#105[;]? | &\\#x69[;]? )\n        (?: o | &\\#111[;]? | &\\#x6f[;]? )\n        (?: n | &\\#110[;]? | &\\#x6e[;]? )\n    ';\n\n    # Replace as many times as it is needed to avoid nesting tag attacks.\n    do {\n        $Replaced = undef;\n\n        # remove script tags\n        if ( $Param{NoJavaScript} ) {\n            $Replaced += ${$String} =~ s{\n                $TagStart script.*? $TagEnd .*?  $TagStart /script \\s* $TagEnd\n            }\n            {}sgxim;\n            $Replaced += ${$String} =~ s{\n                $TagStart script.*? $TagEnd .+? ($TagStart|$TagEnd)\n            }\n            {}sgxim;\n\n            # remove style/javascript parts\n            $Replaced += ${$String} =~ s{\n                $TagStart style[^>]+? $JavaScriptPrefixRegex (.+?|) $TagEnd (.*?) $TagStart /style \\s* $TagEnd\n            }\n            {}sgxim;\n\n            # remove MS CSS expressions (JavaScript embedded in CSS)\n            ${$String} =~ s{\n                ($TagStart style[^>]+? $TagEnd .*? $TagStart /style \\s* $TagEnd)\n            }\n            {\n                if ( index($1, 'expression(' ) > -1 ) {\n                    $Replaced = 1;\n                    '';\n                }\n                else {\n                    $1;\n                }\n            }egsxim;\n        }\n\n        # remove HTTP redirects\n        $Replaced += ${$String} =~ s{\n            $TagStart meta [^>]+? http-equiv=('|\"|)refresh [^>]+? $TagEnd\n        }\n        {}sgxim;\n\n        my $ReplacementStr = $Param{ReplacementStr} // '';\n\n        # remove <applet> tags\n        if ( $Param{NoApplet} ) {\n            $Replaced += ${$String} =~ s{\n                $TagStart applet.*? $TagEnd (.*?) $TagStart /applet \\s* $TagEnd\n            }\n            {$ReplacementStr}sgxim;\n        }\n\n        # remove <Object> tags\n        if ( $Param{NoObject} ) {\n            $Replaced += ${$String} =~ s{\n                $TagStart object.*? $TagEnd (.*?) $TagStart /object \\s* $TagEnd\n            }\n            {$ReplacementStr}sgxim;\n        }\n\n        # remove <svg> tags\n        if ( $Param{NoSVG} ) {\n            $Replaced += ${$String} =~ s{\n                $TagStart svg.*? $TagEnd (.*?) $TagStart /svg \\s* $TagEnd\n            }\n            {$ReplacementStr}sgxim;\n        }\n\n        # remove <img> tags\n        if ( $Param{NoImg} ) {\n            $Replaced += ${$String} =~ s{\n                $TagStart img.*? (.*?) \\s* $TagEnd\n            }\n            {$ReplacementStr}sgxim;\n        }\n\n        # remove <embed> tags\n        if ( $Param{NoEmbed} ) {\n            $Replaced += ${$String} =~ s{\n                $TagStart embed.*? $TagEnd\n            }\n            {$ReplacementStr}sgxim;\n        }\n\n        # check each html tag\n        ${$String} =~ s{\n            ($TagStart.+?$TagEnd)\n        }\n        {\n            my $Tag = $1;\n            if ($Param{NoJavaScript}) {\n\n                # remove on action attributes\n                $Replaced += $Tag =~ s{\n                    (?:\\s|/) on[a-z]+\\s*=(\"[^\"]+\"|'[^']+'|.+?)($TagEnd|\\s)\n                }\n                {$2}sgxim;\n\n                # remove javascript in a href links or src links\n                $Replaced += $Tag =~ s{\n                    ((?:\\s|;|/)(?:background|url|src|href)=)\n                    ('|\"|)                                  # delimiter, can be empty\n                    (?:\\s* $JavaScriptPrefixRegex .*?)      # javascript, followed by anything but the delimiter\n                    \\2                                      # delimiter again\n                    (\\s|$TagEnd)\n                }\n                {\n                    \"$1\\\"\\\"$3\";\n                }sgxime;\n\n                # remove link javascript tags\n                $Replaced += $Tag =~ s{\n                    ($TagStart link .+? $JavaScriptPrefixRegex (.+?|) $TagEnd)\n                }\n                {}sgxim;\n\n                # remove MS CSS expressions (JavaScript embedded in CSS)\n                $Replaced += $Tag =~ s{\n                    \\sstyle=(\"|')[^\\1]*? $ExpressionPrefixRegex [(].*?\\1($TagEnd|\\s)\n                }\n                {\n                    $2;\n                }egsxim;\n            }\n\n            # remove load tags\n            if ($Param{NoIntSrcLoad} || $Param{NoExtSrcLoad}) {\n                $Tag =~ s{\n                    ($TagStart (.+?) (?: \\s | /) src=(.+?) (\\s.+?|) $TagEnd)\n                }\n                {\n                    my $URL = $3;\n                    if ($Param{NoIntSrcLoad} || ($Param{NoExtSrcLoad} && $URL =~ /(http|ftp|https):\\//i)) {\n                        $Replaced = 1;\n                        '';\n                    }\n                    else {\n                        $1;\n                    }\n                }segxim;\n            }\n\n            # replace original tag with clean tag\n            $Tag;\n        }segxim;\n\n        $Safety{Replace} += $Replaced;\n\n    } while ($Replaced);    ## no critic\n\n    # check ref && return result like called\n    if ( defined $StringScalar ) {\n        $Safety{String} = ${$String};\n    }\n    else {\n        $Safety{String} = $String;\n    }\n    return %Safety;\n}\n\n=head2 EmbeddedImagesExtract()\n\nextracts embedded images with data-URLs from an HTML document.\n\n    $HTMLUtilsObject->EmbeddedImagesExtract(\n        DocumentRef    => \\$Body,\n        AttachmentsRef => \\@Attachments,\n    );\n\nReturns nothing. If embedded images were found, these will be appended\nto the attachments list, and the image data URL will be replaced with a\nC<cid:> URL in the document.\n\n=cut\n\nsub EmbeddedImagesExtract {\n    my ( $Self, %Param ) = @_;\n\n    if ( ref $Param{DocumentRef} ne 'SCALAR' || !defined ${ $Param{DocumentRef} } ) {\n        $Kernel::OM->Get('Kernel::System::Log')->Log(\n            Priority => 'error',\n            Message  => \"Need DocumentRef!\"\n        );\n        return;\n    }\n    if ( ref $Param{AttachmentsRef} ne 'ARRAY' ) {\n        $Kernel::OM->Get('Kernel::System::Log')->Log(\n            Priority => 'error',\n            Message  => \"Need AttachmentsRef!\"\n        );\n        return;\n    }\n\n    my $FQDN = $Kernel::OM->Get('Kernel::Config')->Get('FQDN');\n    ${ $Param{DocumentRef} } =~ s{(src=\")(data:image/)(png|gif|jpg|jpeg|bmp)(;base64,)(.+?)(\")}{\n\n        my $Base64String = $5;\n\n        my $FileName     = 'pasted-' . time() . '-' . int(rand(1000000)) . '.' . $3;\n        my $ContentType  = \"image/$3; name=\\\"$FileName\\\"\";\n        my $ContentID    = 'pasted.' . time() . '.' . int(rand(1000000)) . '@' . $FQDN;\n\n        my $AttachmentData = {\n            Content     => decode_base64($Base64String),\n            ContentType => $ContentType,\n            ContentID   => $ContentID,\n            Filename    => $FileName,\n            Disposition => 'inline',\n        };\n        push @{$Param{AttachmentsRef}}, $AttachmentData;\n\n        # compose new image tag\n        $1 . \"cid:$ContentID\" . $6\n\n    }egxi;\n\n    return 1;\n}\n\n1;\n\n=head1 TERMS AND CONDITIONS\n\nThis software is part of the OTRS project (L<https://otrs.org/>).\n\nThis software comes with ABSOLUTELY NO WARRANTY. For details, see\nthe enclosed file COPYING for license information (GPL). If you\ndid not receive this file, see L<https://www.gnu.org/licenses/gpl-3.0.txt>.\n\n=cut\n", "# --\n# Copyright (C) 2001-2018 OTRS AG, https://otrs.com/\n# --\n# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n# the enclosed file COPYING for license information (GPL). If you\n# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.\n# --\n\nuse strict;\nuse warnings;\nuse utf8;\n\nuse vars (qw($Self));\n\n# get HTMLUtils object\nmy $HTMLUtilsObject = $Kernel::OM->Get('Kernel::System::HTMLUtils');\n\n# Safety tests\nmy @Tests = (\n    {\n        Input  => 'Some Text',\n        Result => {\n            Output  => 'Some Text',\n            Replace => 0,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input  => '<b>Some Text</b>',\n        Result => {\n            Output  => '<b>Some Text</b>',\n            Replace => 0,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input  => '<a href=\"javascript:alert(1)\">Some Text</a>',\n        Result => {\n            Output  => '<a href=\"\">Some Text</a>',\n            Replace => 1,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input =>\n            '<a href=\"https://www.yoururl.tld/sub/online-assessment/index.php\" target=\"_blank\">https://www.yoururl.tld/sub/online-assessment/index.php</a>',\n        Result => {\n            Output =>\n                '<a href=\"https://www.yoururl.tld/sub/online-assessment/index.php\" target=\"_blank\">https://www.yoururl.tld/sub/online-assessment/index.php</a>',\n            Replace => 0,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input =>\n            \"<a href='https://www.yoururl.tld/sub/online-assessment/index.php' target='_blank'>https://www.yoururl.tld/sub/online-assessment/index.php</a>\",\n        Result => {\n            Output =>\n                \"<a href='https://www.yoururl.tld/sub/online-assessment/index.php' target='_blank'>https://www.yoururl.tld/sub/online-assessment/index.php</a>\",\n            Replace => 0,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input  => '<a href=\"http://example.com/\" onclock=\"alert(1)\">Some Text</a>',\n        Result => {\n            Output  => '<a href=\"http://example.com/\">Some Text</a>',\n            Replace => 1,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input =>\n            '<a href=\"http://example.com/\" onclock=\"alert(1)\">Some Text <img src=\"http://example.com/logo.png\"/></a>',\n        Result => {\n            Output  => '<a href=\"http://example.com/\">Some Text </a>',\n            Replace => 1,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input => '<script type=\"text/javascript\" id=\"topsy_global_settings\">\nvar topsy_style = \"big\";\n</script><script type=\"text/javascript\" id=\"topsy-js-elem\" src=\"http://example.com/topsy.js?init=topsyWidgetCreator\"></script>\n<script type=\"text/javascript\" src=\"/pub/js/podpress.js\"></script>\n',\n        Result => {\n            Output => '\n\n',\n            Replace => 1,\n        },\n        Name => 'Safety - script tag'\n    },\n    {\n        Input => '<center>\n<applet code=\"AEHousman.class\" width=\"300\" height=\"150\">\nNot all browsers can run applets.  If you see this, yours can not.\nYou should be able to continue reading these lessons, however.\n</applet>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - applet tag'\n    },\n    {\n        Input => '<center>\n<object width=\"384\" height=\"236\" align=\"right\" vspace=\"5\" hspace=\"5\"><param name=\"movie\" value=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"384\" height=\"236\"></embed></object>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - object tag'\n    },\n    {\n        Input => '<center>\n\\'\\';!--\"<XSS>=&{()}\n</center>',\n        Result => {\n            Output => '<center>\n\\'\\';!--\"<XSS>=&{()}\n</center>',\n            Replace => 0,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input => '<center>\n<SCRIPT SRC=http://ha.ckers.org/xss.js></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script/src tag'\n    },\n    {\n        Input => '<center>\n<SCRIPT SRC=http://ha.ckers.org/xss.js><!-- some comment --></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script/src tag'\n    },\n    {\n        Input => '<center>\n<IMG SRC=\"javascript:alert(\\'XSS\\');\">\n</center>',\n        Result => {\n            Output => '<center>\n<IMG SRC=\"\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - img tag'\n    },\n    {\n        Input => '<center>\n<IMG SRC=javascript:alert(\\'XSS\\');>\n</center>',\n        Result => {\n            Output => '<center>\n<IMG SRC=\"\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - img tag'\n    },\n    {\n        Input => '<center>\n<IMG SRC=JaVaScRiPt:alert(\\'XSS\\')>\n</center>',\n        Result => {\n            Output => '<center>\n<IMG SRC=\"\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - img tag'\n    },\n    {\n        Input => '<center>\n<IMG SRC=javascript:alert(&quot;XSS&quot;)>\n</center>',\n        Result => {\n            Output => '<center>\n<IMG SRC=\"\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - img tag'\n    },\n    {\n        Input => '<center>\n<IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">\n</center>',\n        Result => {\n            Output => '<center>\n<IMG \"\"\">\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script/img tag'\n    },\n    {\n        Input => '<center>\n<SCRIPT/XSS SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script tag'\n    },\n    {\n        Input => '<center>\n<SCRIPT/SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script tag'\n    },\n    {\n        Input => '<center>\n<<SCRIPT>alert(\"XSS\");//<</SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n<\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script tag'\n    },\n    {\n        Input => '<center>\n<SCRIPT SRC=http://ha.ckers.org/xss.js?<B>\n</center>',\n        Result => {\n            Output => '<center>\n/center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script tag'\n    },\n    {\n        Input => '<center>\n<SCRIPT SRC=//ha.ckers.org/.j>\n</center>',\n        Result => {\n            Output => '<center>\n/center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script tag'\n    },\n    {\n        Input => '<center>\n<iframe src=http://ha.ckers.org/scriptlet.html >\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - iframe'\n    },\n    {\n        Input => '<center>\n<BODY ONLOAD=alert(\\'XSS\\')>\n</center>',\n        Result => {\n            Output => '<center>\n<BODY>\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - onload'\n    },\n    {\n        Input => '<center>\n<TABLE BACKGROUND=\"javascript:alert(\\'XSS\\')\">\n</center>',\n        Result => {\n            Output => '<center>\n<TABLE BACKGROUND=\"\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - background'\n    },\n    {\n        Input => '<center>\n<SCRIPT a=\">\" SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script'\n    },\n    {\n        Input => '<center>\n<SCRIPT =\">\" SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script'\n    },\n    {\n        Input => '<center>\n<SCRIPT \"a=\\'>\\'\"\n SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script'\n    },\n    {\n        Input => '<center>\n<SCRIPT>document.write(\"<SCRI\");</SCRIPT>PT\n SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\nPT\n SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script'\n    },\n    {\n        Input => '<center>\n<A\n HREF=\"javascript:document.location=\\'http://www.example.com/\\'\">XSS</A>\n</center>',\n        Result => {\n            Output => '<center>\n<A\n HREF=\"\">XSS</A>\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script'\n    },\n    {\n        Input => '<center>\n  <body style=\"background: #fff; color: #000;\" onmouseover     =\"var ga = document.createElement(\\'script\\'); ga.type = \\'text/javascript\\'; ga.src = (\\'https:\\' == document.location.protocol ? \\'https://\\' : \\'http://\\') + \\'ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\\'; document.body.appendChild(ga); setTimeout(function() { jQuery(\\'body\\').append(jQuery(\\'<div />\\').attr(\\'id\\', \\'hack-me\\').css(\\'display\\', \\'none\\')); jQuery(\\'#hack-me\\').load(\\'/otrs/index.pl?Action=AgentPreferences\\', null, function() { jQuery.ajax({url: \\'/otrs/index.pl\\', type: \\'POST\\', data: ({Action: \\'AgentPreferences\\', ChallengeToken: jQuery(\\'input[name=ChallengeToken]:first\\', \\'#hack-me\\').val(), Group: \\'Language\\', \\'Subaction\\': \\'Update\\', UserLanguage: \\'zh_CN\\'})}); }); }, 500);\">\n</center>',\n        Result => {\n            Output => '<center>\n  <body style=\"background: #fff; color: #000;\" ga = document.createElement(\\'script\\'); ga.type = \\'text/javascript\\'; ga.src = (\\'https:\\' == document.location.protocol ? \\'https://\\' : \\'http://\\') + \\'ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\\'; document.body.appendChild(ga); setTimeout(function() { jQuery(\\'body\\').append(jQuery(\\'<div />\\').attr(\\'id\\', \\'hack-me\\').css(\\'display\\', \\'none\\')); jQuery(\\'#hack-me\\').load(\\'/otrs/index.pl?Action=AgentPreferences\\', null, function() { jQuery.ajax({url: \\'/otrs/index.pl\\', type: \\'POST\\', data: ({Action: \\'AgentPreferences\\', ChallengeToken: jQuery(\\'input[name=ChallengeToken]:first\\', \\'#hack-me\\').val(), Group: \\'Language\\', \\'Subaction\\': \\'Update\\', UserLanguage: \\'zh_CN\\'})}); }); }, 500);\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script'\n    },\n    {\n        Input =>\n            '<html><head><style type=\"text/css\"> #some_css {color: #FF0000} </style><body>Important Text about \"javascript\"!<style type=\"text/css\"> #some_more_css{ color: #00FF00 } </style> Some more text.</body></html>',\n        Result => {\n            Output =>\n                '<html><head><style type=\"text/css\"> #some_css {color: #FF0000} </style><body>Important Text about \"javascript\"!<style type=\"text/css\"> #some_more_css{ color: #00FF00 } </style> Some more text.</body></html>',\n            Replace => 0,\n        },\n        Name =>\n            'Safety - Test for bug#7972 - Some mails may not present HTML part when using rich viewing.'\n    },\n    {\n        Input =>\n            '<html><head><style type=\"text/javascript\"> alert(\"some evil stuff!);</style><body>Important Text about \"javascript\"!<style type=\"text/css\"> #some_more_css{ color: #00FF00 } </style> Some more text.</body></html>',\n        Result => {\n            Output =>\n                '<html><head><body>Important Text about \"javascript\"!<style type=\"text/css\"> #some_more_css{ color: #00FF00 } </style> Some more text.</body></html>',\n            Replace => 1,\n        },\n        Name =>\n            'Safety - Additional test for bug#7972 - Some mails may not present HTML part when using rich viewing.'\n    },\n    {\n        Name  => 'Safety - UTF7 tags',\n        Input => <<EOF,\nscript:+ADw-script+AD4-alert(1);+ADw-/script+AD4-\napplet:+ADw-applet+AD4-alert(1);+ADw-/applet+AD4-\nembed:+ADw-embed src=test+AD4-\nobject:+ADw-object+AD4-alert(1);+ADw-/object+AD4-\nEOF\n        Result => {\n            Output => <<EOF,\nscript:\napplet:\nembed:\nobject:\nEOF\n            Replace => 1,\n        },\n    },\n    {\n        Input => <<EOF,\n<div style=\"width: expression(alert(\\'XSS\\');); height: 200px;\" style=\"width: 400px\">\n<div style='width: expression(alert(\"XSS\");); height: 200px;' style='width: 400px'>\nEOF\n        Result => {\n            Output => <<EOF,\n<div style=\"width: 400px\">\n<div style='width: 400px'>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - Filter out MS CSS expressions'\n    },\n    {\n        Input => <<EOF,\n<div><XSS STYLE=\"xss:expression(alert('XSS'))\"></div>\nEOF\n        Result => {\n            Output => <<EOF,\n<div><XSS></div>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - Microsoft CSS expression on invalid tag'\n    },\n    {\n        Input => <<EOF,\n<div class=\"svg\"><svg some-attribute evil=\"true\"><someevilsvgcontent></svg></div>\nEOF\n        Result => {\n            Output => <<EOF,\n<div class=\"svg\"></div>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - Filter out SVG'\n    },\n    {\n        Input => <<EOF,\n<div><script ></script ><applet ></applet ></div >\nEOF\n        Result => {\n            Output => <<EOF,\n<div></div >\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - Closing tag with space'\n    },\n    {\n        Input => <<EOF,\n<style type=\"text/css\">\ndiv > span {\n    width: 200px;\n}\n</style>\n<style type=\"text/css\">\ndiv > span {\n    width: expression(evilJS());\n}\n</style>\n<style type=\"text/css\">\ndiv > span > div {\n    width: 200px;\n}\n</style>\nEOF\n        Result => {\n            Output => <<EOF,\n<style type=\"text/css\">\ndiv > span {\n    width: 200px;\n}\n</style>\n\n<style type=\"text/css\">\ndiv > span > div {\n    width: 200px;\n}\n</style>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - Style tags with CSS expressions are filtered out'\n    },\n    {\n        Input => <<EOF,\n<s<script>...</script><script>...<cript type=\"text/javascript\">\ndocument.write(\"Hello World!\");\n</s<script>//<cript>\nEOF\n        Result => {\n            Output => <<EOF,\n\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - Nested script tags'\n    },\n    {\n        Input => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=\"  javascript:alert('XSS Exploit');\"></iframe>\n<img src=\"/img2.png\"/>\nEOF\n        Result => {\n            Output => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=\"\"></iframe>\n<img src=\"/img2.png\"/>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - javascript source with space'\n    },\n    {\n        Input => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src='  javascript:alert(\"XSS Exploit\");'></iframe>\n<img src=\"/img2.png\"/>\nEOF\n        Result => {\n            Output => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=\"\"></iframe>\n<img src=\"/img2.png\"/>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - javascript source with space'\n    },\n    {\n        Input => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=javascript:alert('XSS_Exploit');></iframe>\n<img src=\"/img2.png\"/>\nEOF\n        Result => {\n            Output => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=\"\"></iframe>\n<img src=\"/img2.png\"/>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - javascript source without delimiters'\n    },\n    {\n        Input => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=\"\" data-src=\"javascript:alert('XSS Exploit');\"></iframe>\n<img src=\"/img2.png\"/>\nEOF\n        Result => {\n            Output => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=\"\" data-src=\"javascript:alert('XSS Exploit');\"></iframe>\n<img src=\"/img2.png\"/>\nEOF\n            Replace => 0,\n        },\n        Name => 'Safety - javascript source in data tag, keep'\n    },\n    {\n        Input => <<EOF,\nSome\n<META HTTP-EQUIV=\"Refresh\" CONTENT=\"2;\nURL=http://www.rbrasileventos.com.br/9asdasd/\">\nContent\nEOF\n        Result => {\n            Output => <<EOF,\nSome\n\nContent\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - meta refresh tag removed'\n    },\n    {\n        Input => <<EOF,\n<img/onerror=\"alert(\\'XSS1\\')\"src=a>\nEOF\n        Result => {\n            Output => <<EOF,\n<img>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - / as attribute delimiter'\n    },\n    {\n        Input => <<EOF,\n<iframe src=javasc&#x72ipt:alert(\\'XSS2\\') >\nEOF\n        Result => {\n            Output => <<EOF,\n<iframe src=\"\" >\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - entity encoding in javascript attribute'\n    },\n    {\n        Input => <<EOF,\n<iframe/src=javasc&#x72ipt:alert(\\'XSS2\\') >\nEOF\n        Result => {\n            Output => <<EOF,\n<iframe/src=\"\" >\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - entity encoding in javascript attribute with / separator'\n    },\n    {\n        Input => <<EOF,\n<img src=\"http://example.com/image.png\"/>\nEOF\n        Result => {\n            Output => <<EOF,\n\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - external image'\n    },\n    {\n        Input => <<EOF,\n<img/src=\"http://example.com/image.png\"/>\nEOF\n        Result => {\n            Output => <<EOF,\n\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - external image with / separator'\n    },\n);\n\nfor my $Test (@Tests) {\n    my %Result = $HTMLUtilsObject->Safety(\n        String       => $Test->{Input},\n        NoApplet     => 1,\n        NoObject     => 1,\n        NoEmbed      => 1,\n        NoSVG        => 1,\n        NoIntSrcLoad => 0,\n        NoExtSrcLoad => 1,\n        NoJavaScript => 1,\n    );\n    if ( $Test->{Result}->{Replace} ) {\n        $Self->True(\n            $Result{Replace},\n            \"$Test->{Name} replaced\",\n        );\n    }\n    else {\n        $Self->False(\n            $Result{Replace},\n            \"$Test->{Name} not replaced\",\n        );\n    }\n    $Self->Is(\n        $Result{String},\n        $Test->{Result}->{Output},\n        $Test->{Name},\n    );\n}\n\n@Tests = (\n    {\n        Name  => 'Safety - img tag',\n        Input => <<EOF,\n<img/src=\"http://example.com/image.png\"/>\nEOF\n        Config => {\n            NoImg => 1,\n        },\n        Result => {\n            Output => <<EOF,\n\nEOF\n            Replace => 1,\n        },\n    },\n    {\n        Name  => 'Safety - img tag replacement',\n        Input => <<EOF,\n<img/src=\"http://example.com/image.png\"/>\nEOF\n        Config => {\n            NoImg          => 1,\n            ReplacementStr => '...'\n        },\n        Result => {\n            Output => <<EOF,\n...\nEOF\n            Replace => 1,\n        },\n    },\n    {\n        Name  => 'Safety - Filter out SVG replacement',\n        Input => <<EOF,\n<div class=\"svg\"><svg some-attribute evil=\"true\"><someevilsvgcontent></svg></div>\nEOF\n        Config => {\n            NoSVG          => 1,\n            ReplacementStr => '...'\n        },\n        Result => {\n            Output => <<EOF,\n<div class=\"svg\">...</div>\nEOF\n            Replace => 1,\n        },\n    },\n    {\n        Name  => 'Safety - object tag replacement',\n        Input => '<center>\n<object width=\"384\" height=\"236\" align=\"right\" vspace=\"5\" hspace=\"5\"><param name=\"movie\" value=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"384\" height=\"236\"></embed></object>\n</center>',\n        Config => {\n            NoObject       => 1,\n            ReplacementStr => '...'\n        },\n        Result => {\n            Output => '<center>\n...\n</center>',\n            Replace => 1,\n        },\n    },\n    {\n        Name  => 'Safety - embed tag replacement',\n        Input => '<center>\n<object width=\"384\" height=\"236\" align=\"right\" vspace=\"5\" hspace=\"5\"><param name=\"movie\" value=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"384\" height=\"236\"></object>\n</center>',\n        Config => {\n            NoEmbed        => 1,\n            ReplacementStr => '...'\n        },\n        Result => {\n            Output => '<center>\n<object width=\"384\" height=\"236\" align=\"right\" vspace=\"5\" hspace=\"5\"><param name=\"movie\" value=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param>...</object>\n</center>',\n            Replace => 1,\n        },\n    },\n    {\n        Name  => 'Safety - applet tag replacement',\n        Input => '<center>\n<applet code=\"AEHousman.class\" width=\"300\" height=\"150\">\nNot all browsers can run applets.  If you see this, yours can not.\nYou should be able to continue reading these lessons, however.\n</applet>\n</center>',\n        Config => {\n            NoApplet       => 1,\n            ReplacementStr => '...'\n        },\n        Result => {\n            Output => '<center>\n...\n</center>',\n            Replace => 1,\n        },\n    },\n    {\n        Name   => 'Safety - bug 10530 - don\\'t destroy URL which looks like an on* JS attribute',\n        Input  => '<a href=\"http://localhost/online/foo/bar.html\">www</a>',\n        Config => {},\n        Result => {\n            Output  => '<a href=\"http://localhost/online/foo/bar.html\">www</a>',\n            Replace => 0,\n        },\n    },\n    {\n        Name   => 'Safety - bug 13561 - Handling empty strings',\n        Input  => '',\n        Config => {},\n        Result => {\n            Output  => '',\n            Replace => 0,\n        },\n    },\n);\n\nfor my $Test (@Tests) {\n    my %Result = $HTMLUtilsObject->Safety(\n        String => $Test->{Input},\n        %{ $Test->{Config} },\n    );\n    if ( $Test->{Result}->{Replace} ) {\n        $Self->True(\n            $Result{Replace},\n            \"$Test->{Name} replaced\",\n        );\n    }\n    else {\n        $Self->False(\n            $Result{Replace},\n            \"$Test->{Name} not replaced\",\n        );\n    }\n    $Self->Is(\n        $Result{String},\n        $Test->{Result}->{Output},\n        $Test->{Name},\n    );\n}\n\n1;\n"], "fixing_code": ["# --\n# Copyright (C) 2001-2018 OTRS AG, https://otrs.com/\n# --\n# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n# the enclosed file COPYING for license information (GPL). If you\n# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.\n# --\n\npackage Kernel::System::HTMLUtils;\n\nuse strict;\nuse warnings;\n\nuse utf8;\n\nuse MIME::Base64;\n\nour @ObjectDependencies = (\n    'Kernel::Config',\n    'Kernel::System::Encode',\n    'Kernel::System::Log',\n);\n\n=head1 NAME\n\nKernel::System::HTMLUtils - creating and modifying html strings\n\n=head1 DESCRIPTION\n\nA module for creating and modifying html strings.\n\n=head1 PUBLIC INTERFACE\n\n=head2 new()\n\nDon't use the constructor directly, use the ObjectManager instead:\n\n    my $HTMLUtilsObject = $Kernel::OM->Get('Kernel::System::HTMLUtils');\n\n=cut\n\nsub new {\n    my ( $Type, %Param ) = @_;\n\n    # allocate new hash for object\n    my $Self = {};\n    bless( $Self, $Type );\n\n    # get debug level from parent\n    $Self->{Debug} = $Param{Debug} || 0;\n\n    return $Self;\n}\n\n=head2 ToAscii()\n\nconvert an HTML string to an ASCII string\n\n    my $Ascii = $HTMLUtilsObject->ToAscii(\n        String => $String,\n        NoLineLength => 1, # optional, don't consider line length,\n    );\n\n=cut\n\nsub ToAscii {\n    my ( $Self, %Param ) = @_;\n\n    # check needed stuff\n    for (qw(String)) {\n        if ( !defined $Param{$_} ) {\n            $Kernel::OM->Get('Kernel::System::Log')->Log(\n                Priority => 'error',\n                Message  => \"Need $_!\"\n            );\n            return;\n        }\n    }\n\n    # make sure to flag the input string as unicode (utf8) because replacements below can\n    # introduce unicode encoded characters (see bug#10970, bug#11596 and bug#12097 for more info)\n    $Kernel::OM->Get('Kernel::System::Encode')->EncodeInput( \\$Param{String} );\n\n    # get length of line for forcing line breakes\n    my $LineLength = $Kernel::OM->Get('Kernel::Config')->Get('Ticket::Frontend::TextAreaNote') || 78;\n\n    # find <a href=....> and replace it with [x]\n    my $LinkList = '';\n    my $Counter  = 0;\n    $Param{String} =~ s{\n        <a\\s.*?href=(\"|')(.+?)(\"|').*?>\n    }\n    {\n        my $Link = $2;\n        $Counter++;\n        $LinkList .= \"[$Counter] $Link\\n\";\n        \"[$Counter]\";\n    }egxi;\n\n    # pre-process <blockquote> and <div style=\\\"cite\\\"\n    my %Cite;\n    $Counter = 0;\n    $Param{String} =~ s{\n        <blockquote(.*?)>(.+?)</blockquote>\n    }\n    {\n        my $Ascii = $Self->ToAscii(\n            String => $2,\n        );\n        # force line breaking\n        if ( length $Ascii > $LineLength ) {\n            $Ascii =~ s/(.{4,$LineLength})(?:\\s|\\z)/$1\\n/gm;\n        }\n        $Ascii =~ s/^(.*?)$/> $1/gm;\n        $Counter++;\n        my $Key     = \"######Cite::$Counter######\";\n        $Cite{$Key} = $Ascii;\n        $Key;\n    }segxmi;\n    $Param{String} =~ s{\n        <div\\s{1,5}type=\"cite\".+?>(.+?)</div>\n    }\n    {\n        my $Ascii = $Self->ToAscii(\n            String => $1,\n        );\n        # force line breaking\n        if ( length $Ascii > $LineLength ) {\n            $Ascii =~ s/(.{4,$LineLength})(?:\\s|\\z)/$1\\n/gm;\n        }\n        $Ascii =~ s/^(.*?)$/> $1/gm;\n        $Counter++;\n        my $Key     = \"######Cite::$Counter######\";\n        $Cite{$Key} = $Ascii;\n        $Key;\n    }segxmi;\n\n    # remember <pre> and <code> tags\n    my %One2One;\n    $Counter = 0;\n    $Param{String} =~ s{\n        <(pre|code)(.*?)>(.+?)</(pre|code)(.*?)>\n    }\n    {\n        my $Content = $3;\n        $Counter++;\n        my $Key        = \"######One2One::$Counter######\";\n        $One2One{$Key} = $Content;\n        $Key;\n    }segxmi;\n\n    # remove comments at the first place to avoid to much work\n    # for the regex engine\n    $Param{String} =~ s{<!-- .*? -->}{}xmgsi;\n\n    # remove empty lines\n    $Param{String} =~ s/^\\s*//mg;\n\n    # fix some bad stuff from opera and others\n    $Param{String} =~ s/(\\n\\r|\\r\\r\\n|\\r\\n)/\\n/gs;\n\n    # remove new line after <br>\n    $Param{String} =~ s/(\\<br(\\s{0,3}|\\s{1,3}.+?)(\\/|)\\>)(\\n|\\r)/$1/gsi;\n\n    # replace new lines with one space\n    $Param{String} =~ s/\\n/ /gs;\n    $Param{String} =~ s/\\r/ /gs;\n\n    # remove style tags\n    $Param{String} =~ s{<style [^>]*? />}{}xgsi;\n    $Param{String} =~ s{<style [^>]*? > .*? </style[^>]*>}{}xgsi;\n\n    # remove <br>,<br/>,<br />, <br class=\"name\"/>, tags and replace it with \\n\n    $Param{String} =~ s/\\<br(\\s{0,3}|\\s{1,3}.+?)(\\/|)\\>/\\n/gsi;\n\n    # remove </div> tags and replace it with \\n\n    $Param{String} =~ s/<\\/(\\s{0,3})div>/\\n/gsi;\n\n    # remove hr tags and replace it with \\n\n    $Param{String} =~ s/\\<(hr|hr.+?)\\>/\\n\\n/gsi;\n\n    # remove p, table tags and replace it with \\n\n    $Param{String} =~ s/\\<(\\/|)(p|p.+?|table|table.+?)\\>/\\n\\n/gsi;\n\n    # remove opening tr, th tags and replace them with \\n\n    $Param{String} =~ s/\\<(tr|tr.+?|th|th.+?)\\>/\\n\\n/gsi;\n\n    # convert li tags to \\n -\n    $Param{String} =~ s/\\<li\\>/\\n - /gsi;\n\n    # convert </ul> and </ol> tags to \\n\\n\n    $Param{String} =~ s/\\<\\/(ul|ol)\\>/\\n\\n/gsi;\n\n    # remove </td> tags and replace them with \" \"\n    $Param{String} =~ s/<\\/td[^>]*>/ /gsi;\n\n    # replace multiple spaces with just one space\n    $Param{String} =~ s/[ ]{2,}/ /mg;\n\n    # remember <pre> and <code> tags and replace it\n    for my $Key ( sort keys %One2One ) {\n        $Param{String} =~ s/$Key/\\n\\n\\n$One2One{$Key}\\n\\n/g;\n    }\n\n    # strip all other tags\n    $Param{String} =~ s/\\<.+?\\>//gs;\n\n    # html encode based on cpan's HTML::Entities v1.35\n    my %Entity = (\n\n        # Some normal chars that have special meaning in SGML context\n        amp  => '&',    # ampersand\n        'gt' => '>',    # greater than\n        'lt' => '<',    # less than\n        quot => '\"',    # double quote\n        apos => \"'\",    # single quote\n\n        # PUBLIC ISO 8879-1986//ENTITIES Added Latin 1//EN//HTML\n        AElig  => chr(198),    # capital AE diphthong (ligature)\n        Aacute => chr(193),    # capital A, acute accent\n        Acirc  => chr(194),    # capital A, circumflex accent\n        Agrave => chr(192),    # capital A, grave accent\n        Aring  => chr(197),    # capital A, ring\n        Atilde => chr(195),    # capital A, tilde\n        Auml   => chr(196),    # capital A, dieresis or umlaut mark\n        Ccedil => chr(199),    # capital C, cedilla\n        ETH    => chr(208),    # capital Eth, Icelandic\n        Eacute => chr(201),    # capital E, acute accent\n        Ecirc  => chr(202),    # capital E, circumflex accent\n        Egrave => chr(200),    # capital E, grave accent\n        Euml   => chr(203),    # capital E, dieresis or umlaut mark\n        Iacute => chr(205),    # capital I, acute accent\n        Icirc  => chr(206),    # capital I, circumflex accent\n        Igrave => chr(204),    # capital I, grave accent\n        Iuml   => chr(207),    # capital I, dieresis or umlaut mark\n        Ntilde => chr(209),    # capital N, tilde\n        Oacute => chr(211),    # capital O, acute accent\n        Ocirc  => chr(212),    # capital O, circumflex accent\n        Ograve => chr(210),    # capital O, grave accent\n        Oslash => chr(216),    # capital O, slash\n        Otilde => chr(213),    # capital O, tilde\n        Ouml   => chr(214),    # capital O, dieresis or umlaut mark\n        THORN  => chr(222),    # capital THORN, Icelandic\n        Uacute => chr(218),    # capital U, acute accent\n        Ucirc  => chr(219),    # capital U, circumflex accent\n        Ugrave => chr(217),    # capital U, grave accent\n        Uuml   => chr(220),    # capital U, dieresis or umlaut mark\n        Yacute => chr(221),    # capital Y, acute accent\n        aacute => chr(225),    # small a, acute accent\n        acirc  => chr(226),    # small a, circumflex accent\n        aelig  => chr(230),    # small ae diphthong (ligature)\n        agrave => chr(224),    # small a, grave accent\n        aring  => chr(229),    # small a, ring\n        atilde => chr(227),    # small a, tilde\n        auml   => chr(228),    # small a, dieresis or umlaut mark\n        ccedil => chr(231),    # small c, cedilla\n        eacute => chr(233),    # small e, acute accent\n        ecirc  => chr(234),    # small e, circumflex accent\n        egrave => chr(232),    # small e, grave accent\n        eth    => chr(240),    # small eth, Icelandic\n        euml   => chr(235),    # small e, dieresis or umlaut mark\n        iacute => chr(237),    # small i, acute accent\n        icirc  => chr(238),    # small i, circumflex accent\n        igrave => chr(236),    # small i, grave accent\n        iuml   => chr(239),    # small i, dieresis or umlaut mark\n        ntilde => chr(241),    # small n, tilde\n        oacute => chr(243),    # small o, acute accent\n        ocirc  => chr(244),    # small o, circumflex accent\n        ograve => chr(242),    # small o, grave accent\n        oslash => chr(248),    # small o, slash\n        otilde => chr(245),    # small o, tilde\n        ouml   => chr(246),    # small o, dieresis or umlaut mark\n        szlig  => chr(223),    # small sharp s, German (sz ligature)\n        thorn  => chr(254),    # small thorn, Icelandic\n        uacute => chr(250),    # small u, acute accent\n        ucirc  => chr(251),    # small u, circumflex accent\n        ugrave => chr(249),    # small u, grave accent\n        uuml   => chr(252),    # small u, dieresis or umlaut mark\n        yacute => chr(253),    # small y, acute accent\n        yuml   => chr(255),    # small y, dieresis or umlaut mark\n\n        # Some extra Latin 1 chars that are listed in the HTML3.2 draft (21-May-96)\n        copy => chr(169),      # copyright sign\n        reg  => chr(174),      # registered sign\n        nbsp => chr(160),      # non breaking space\n\n        # Additional ISO-8859/1 entities listed in rfc1866 (section 14)\n        iexcl   => chr(161),\n        cent    => chr(162),\n        pound   => chr(163),\n        curren  => chr(164),\n        yen     => chr(165),\n        brvbar  => chr(166),\n        sect    => chr(167),\n        uml     => chr(168),\n        ordf    => chr(170),\n        laquo   => chr(171),\n        'not'   => chr(172),    # not is a keyword in perl\n        shy     => chr(173),\n        macr    => chr(175),\n        deg     => chr(176),\n        plusmn  => chr(177),\n        sup1    => chr(185),\n        sup2    => chr(178),\n        sup3    => chr(179),\n        acute   => chr(180),\n        micro   => chr(181),\n        para    => chr(182),\n        middot  => chr(183),\n        cedil   => chr(184),\n        ordm    => chr(186),\n        raquo   => chr(187),\n        frac14  => chr(188),\n        frac12  => chr(189),\n        frac34  => chr(190),\n        iquest  => chr(191),\n        'times' => chr(215),    # times is a keyword in perl\n        divide  => chr(247),\n\n        (\n            $] > 5.007\n            ? (\n                OElig    => chr(338),\n                oelig    => chr(339),\n                Scaron   => chr(352),\n                scaron   => chr(353),\n                Yuml     => chr(376),\n                fnof     => chr(402),\n                circ     => chr(710),\n                tilde    => chr(732),\n                Alpha    => chr(913),\n                Beta     => chr(914),\n                Gamma    => chr(915),\n                Delta    => chr(916),\n                Epsilon  => chr(917),\n                Zeta     => chr(918),\n                Eta      => chr(919),\n                Theta    => chr(920),\n                Iota     => chr(921),\n                Kappa    => chr(922),\n                Lambda   => chr(923),\n                Mu       => chr(924),\n                Nu       => chr(925),\n                Xi       => chr(926),\n                Omicron  => chr(927),\n                Pi       => chr(928),\n                Rho      => chr(929),\n                Sigma    => chr(931),\n                Tau      => chr(932),\n                Upsilon  => chr(933),\n                Phi      => chr(934),\n                Chi      => chr(935),\n                Psi      => chr(936),\n                Omega    => chr(937),\n                alpha    => chr(945),\n                beta     => chr(946),\n                gamma    => chr(947),\n                delta    => chr(948),\n                epsilon  => chr(949),\n                zeta     => chr(950),\n                eta      => chr(951),\n                theta    => chr(952),\n                iota     => chr(953),\n                kappa    => chr(954),\n                lambda   => chr(955),\n                mu       => chr(956),\n                nu       => chr(957),\n                xi       => chr(958),\n                omicron  => chr(959),\n                pi       => chr(960),\n                rho      => chr(961),\n                sigmaf   => chr(962),\n                sigma    => chr(963),\n                tau      => chr(964),\n                upsilon  => chr(965),\n                phi      => chr(966),\n                chi      => chr(967),\n                psi      => chr(968),\n                omega    => chr(969),\n                thetasym => chr(977),\n                upsih    => chr(978),\n                piv      => chr(982),\n                ensp     => chr(8194),\n                emsp     => chr(8195),\n                thinsp   => chr(8201),\n                zwnj     => chr(8204),\n                zwj      => chr(8205),\n                lrm      => chr(8206),\n                rlm      => chr(8207),\n                ndash    => chr(8211),\n                mdash    => chr(8212),\n                lsquo    => chr(8216),\n                rsquo    => chr(8217),\n                sbquo    => chr(8218),\n                ldquo    => chr(8220),\n                rdquo    => chr(8221),\n                bdquo    => chr(8222),\n                dagger   => chr(8224),\n                Dagger   => chr(8225),\n                bull     => chr(8226),\n                hellip   => chr(8230),\n                permil   => chr(8240),\n                prime    => chr(8242),\n                Prime    => chr(8243),\n                lsaquo   => chr(8249),\n                rsaquo   => chr(8250),\n                oline    => chr(8254),\n                frasl    => chr(8260),\n                euro     => chr(8364),\n                image    => chr(8465),\n                weierp   => chr(8472),\n                real     => chr(8476),\n                trade    => chr(8482),\n                alefsym  => chr(8501),\n                larr     => chr(8592),\n                uarr     => chr(8593),\n                rarr     => chr(8594),\n                darr     => chr(8595),\n                harr     => chr(8596),\n                crarr    => chr(8629),\n                lArr     => chr(8656),\n                uArr     => chr(8657),\n                rArr     => chr(8658),\n                dArr     => chr(8659),\n                hArr     => chr(8660),\n                forall   => chr(8704),\n                part     => chr(8706),\n                exist    => chr(8707),\n                empty    => chr(8709),\n                nabla    => chr(8711),\n                isin     => chr(8712),\n                notin    => chr(8713),\n                ni       => chr(8715),\n                prod     => chr(8719),\n                sum      => chr(8721),\n                minus    => chr(8722),\n                lowast   => chr(8727),\n                radic    => chr(8730),\n                prop     => chr(8733),\n                infin    => chr(8734),\n                ang      => chr(8736),\n                'and'    => chr(8743),\n                'or'     => chr(8744),\n                cap      => chr(8745),\n                cup      => chr(8746),\n                'int'    => chr(8747),\n                there4   => chr(8756),\n                sim      => chr(8764),\n                cong     => chr(8773),\n                asymp    => chr(8776),\n                'ne'     => chr(8800),\n                equiv    => chr(8801),\n                'le'     => chr(8804),\n                'ge'     => chr(8805),\n                'sub'    => chr(8834),\n                sup      => chr(8835),\n                nsub     => chr(8836),\n                sube     => chr(8838),\n                supe     => chr(8839),\n                oplus    => chr(8853),\n                otimes   => chr(8855),\n                perp     => chr(8869),\n                sdot     => chr(8901),\n                lceil    => chr(8968),\n                rceil    => chr(8969),\n                lfloor   => chr(8970),\n                rfloor   => chr(8971),\n                lang     => chr(9001),\n                rang     => chr(9002),\n                loz      => chr(9674),\n                spades   => chr(9824),\n                clubs    => chr(9827),\n                hearts   => chr(9829),\n                diams    => chr(9830),\n                )\n            : ()\n            )\n    );\n\n    # encode html entities like \"&#8211;\"\n    $Param{String} =~ s{\n        (&\\#(\\d+);?)\n    }\n    {\n        my $ChrOrig = $1;\n        my $Dec = $2;\n\n        # Don't process UTF-16 surrogate pairs. Used on their own, these are not valid UTF-8 code\n        # points and can result in errors in old Perl versions. See bug#12588 for more information.\n        # - High Surrogate codes (U+D800-U+DBFF)\n        # - Low Surrogate codes (U+DC00-U+DFFF)\n        if ( $Dec >= 55296 && $Dec <= 57343 ) {\n            $ChrOrig;\n        }\n        else {\n            my $Chr = chr($Dec);\n\n            # Make sure we get valid UTF8 code points, but skip characters from 128 to 255\n            #   (inclusive), since they are by default internally not encoded as UTF-8 for\n            #   backward compatibility reasons. See bug#12457 for more information.\n            if ( $Dec < 128 || $Dec> 255 ) {\n                Encode::_utf8_off($Chr);\n                $Chr = Encode::decode('utf-8', $Chr, 0);\n            }\n\n            if ( $Chr ) {\n                $Chr;\n            }\n            else {\n                $ChrOrig;\n            }\n        }\n    }egx;\n\n    # encode html entities like \"&#x3d;\"\n    $Param{String} =~ s{\n        (&\\#[xX]([0-9a-fA-F]+);?)\n    }\n    {\n        my $ChrOrig = $1;\n        my $Dec = hex( $2 );\n\n        # Don't process UTF-16 surrogate pairs. Used on their own, these are not valid UTF-8 code\n        # points and can result in errors in old Perl versions. See bug#12588 for more information.\n        # - High Surrogate codes (U+D800-U+DBFF)\n        # - Low Surrogate codes (U+DC00-U+DFFF)\n        if ( $Dec >= 55296 && $Dec <= 57343 ) {\n            $ChrOrig;\n        }\n        else {\n            if ( $Dec ) {\n                my $Chr = chr( $Dec );\n\n                # Make sure we get valid UTF8 code points, but skip characters from 128 to 255\n                #   (inclusive), since they are by default internally not encoded as UTF-8 for\n                #   backward compatibility reasons. See bug#12457 for more information.\n                if ( $Dec < 128 || $Dec > 255 ) {\n                    Encode::_utf8_off($Chr);\n                    $Chr = Encode::decode('utf-8', $Chr, 0);\n                }\n\n                if ( $Chr ) {\n                    $Chr;\n                }\n                else {\n                    $ChrOrig;\n                }\n            }\n            else {\n                $ChrOrig;\n            }\n        }\n    }egx;\n\n    # encode html entities like \"&amp;\"\n    $Param{String} =~ s{\n        (&(\\w+);?)\n    }\n    {\n        if ( $Entity{$2} ) {\n            $Entity{$2};\n        }\n        else {\n            $1;\n        }\n    }egx;\n\n    # remove empty lines\n    $Param{String} =~ s/^\\s*\\n\\s*\\n/\\n/mg;\n\n    # force line breaking\n    if ( length $Param{String} > $LineLength && !$Param{NoLineLength} ) {\n        $Param{String} =~ s/(.{4,$LineLength})(?:\\s|\\z)/$1\\n/gm;\n    }\n\n    # remember <blockquote> and <div style=\\\"cite\\\"\n    for my $Key ( sort keys %Cite ) {\n        $Param{String} =~ s/$Key/$Cite{$Key}\\n/g;\n    }\n\n    # add extracted links\n    if ($LinkList) {\n        $Param{String} .= \"\\n\\n\" . $LinkList;\n    }\n\n    return $Param{String};\n}\n\n=head2 ToHTML()\n\nconvert an ASCII string to an HTML string\n\n    my $HTMLString = $HTMLUtilsObject->ToHTML(\n        String             => $String,\n        ReplaceDoubleSpace => 0,        # replace &nbsp;&nbsp; with \"  \", optional 1 or 0 (defaults to 1)\n    );\n\n=cut\n\nsub ToHTML {\n    my ( $Self, %Param ) = @_;\n\n    # check needed stuff\n    for (qw(String)) {\n        if ( !defined $Param{$_} ) {\n            $Kernel::OM->Get('Kernel::System::Log')->Log(\n                Priority => 'error',\n                Message  => \"Need $_!\"\n            );\n            return;\n        }\n    }\n\n    # fix some bad stuff from opera and others\n    $Param{String} =~ s/(\\n\\r|\\r\\r\\n|\\r\\n)/\\n/gs;\n\n    $Param{String} =~ s/&/&amp;/g;\n    $Param{String} =~ s/</&lt;/g;\n    $Param{String} =~ s/>/&gt;/g;\n    $Param{String} =~ s/\"/&quot;/g;\n    $Param{String} =~ s/(\\n|\\r)/<br\\/>\\n/g;\n    $Param{String} =~ s/  /&nbsp;&nbsp;/g if $Param{ReplaceDoubleSpace};\n\n    return $Param{String};\n}\n\n=head2 DocumentComplete()\n\ncheck and e. g. add <html> and <body> tags to given html string\n\n    my $HTMLDocument = $HTMLUtilsObject->DocumentComplete(\n        String  => $String,\n        Charset => $Charset,\n    );\n\n=cut\n\nsub DocumentComplete {\n    my ( $Self, %Param ) = @_;\n\n    # check needed stuff\n    for (qw(String Charset)) {\n        if ( !defined $Param{$_} ) {\n            $Kernel::OM->Get('Kernel::System::Log')->Log(\n                Priority => 'error',\n                Message  => \"Need $_!\"\n            );\n            return;\n        }\n    }\n\n    return $Param{String} if $Param{String} =~ /<html>/i;\n\n    my $Css = $Kernel::OM->Get('Kernel::Config')->Get('Frontend::RichText::DefaultCSS')\n        || 'font-size: 12px; font-family:Courier,monospace,fixed;';\n\n    # escape special characters like double-quotes, e.g. used in font names with spaces\n    $Css = $Self->ToHTML( String => $Css );\n\n    # Use the HTML5 doctype because it is compatible with HTML4 and causes the browsers\n    #   to render the content in standards mode, which is more safe than quirks mode.\n    my $Body = '<!DOCTYPE html><html><head>';\n    $Body\n        .= '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=' . $Param{Charset} . '\"/>';\n    $Body .= '</head><body style=\"' . $Css . '\">' . $Param{String} . '</body></html>';\n    return $Body;\n}\n\n=head2 DocumentStrip()\n\nremove html document tags from string\n\n    my $HTMLString = $HTMLUtilsObject->DocumentStrip(\n        String  => $String,\n    );\n\n=cut\n\nsub DocumentStrip {\n    my ( $Self, %Param ) = @_;\n\n    # check needed stuff\n    for (qw(String)) {\n        if ( !defined $Param{$_} ) {\n            $Kernel::OM->Get('Kernel::System::Log')->Log(\n                Priority => 'error',\n                Message  => \"Need $_!\"\n            );\n            return;\n        }\n    }\n\n    $Param{String} =~ s/^<\\!DOCTYPE\\s+HTML.+?>//gsi;\n    $Param{String} =~ s/<head>.+?<\\/head>//gsi;\n    $Param{String} =~ s/<(html|body)(.*?)>//gsi;\n    $Param{String} =~ s/<\\/(html|body)>//gsi;\n\n    return $Param{String};\n}\n\n=head2 DocumentCleanup()\n\nperform some sanity checks on HTML content.\n\n -  Replace MS Word 12 <p|div> with class \"MsoNormal\" by using <br/> because\n    it's not used as <p><div> (margin:0cm; margin-bottom:.0001pt;).\n\n -  Replace <blockquote> by using\n    \"<div style=\"border:none;border-left:solid blue 1.5pt;padding:0cm 0cm 0cm 4.0pt\" type=\"cite\">\"\n    because of cross mail client and browser compatibility.\n\n -  If there is no HTML doctype present, inject the HTML5 doctype, because it is compatible with HTML4\n    and causes the browsers to render the content in standards mode, which is safer.\n\n    $HTMLBody = $HTMLUtilsObject->DocumentCleanup(\n        String => $HTMLBody,\n    );\n\n=cut\n\nsub DocumentCleanup {\n    my ( $Self, %Param ) = @_;\n\n    # check needed stuff\n    for (qw(String)) {\n        if ( !defined $Param{$_} ) {\n            $Kernel::OM->Get('Kernel::System::Log')->Log(\n                Priority => 'error',\n                Message  => \"Need $_!\"\n            );\n            return;\n        }\n    }\n\n    # If the string starts with <html> directly, inject the doctype\n    $Param{String} =~ s{ \\A \\s* <html }{<!DOCTYPE html><html}gsmix;\n\n    # remove <base> tags - see bug#8880\n    $Param{String} =~ s{<base .*?>}{}xmsi;\n\n    # replace MS Word 12 <p|div> with class \"MsoNormal\" by using <br/> because\n    # it's not used as <p><div> (margin:0cm; margin-bottom:.0001pt;)\n    $Param{String} =~ s{\n        <p\\s{1,3}class=(|\"|')MsoNormal(|\"|')(.*?)>(.+?)</p>\n    }\n    {\n        $4 . '<br/>';\n    }segxmi;\n\n    $Param{String} =~ s{\n        <div\\s{1,3}class=(|\"|')MsoNormal(|\"|')(.*?)>(.+?)</div>\n    }\n    {\n        $4 . '<br/>';\n    }segxmi;\n\n    # replace <blockquote> by using\n    # \"<div style=\"border:none;border-left:solid blue 1.5pt;padding:0cm 0cm 0cm 4.0pt\" type=\"cite\">\"\n    # because of cross mail client and browser compatability\n    my $Style = \"border:none;border-left:solid blue 1.5pt;padding:0cm 0cm 0cm 4.0pt\";\n    for ( 1 .. 10 ) {\n        $Param{String} =~ s{\n            <blockquote(.*?)>(.+?)</blockquote>\n        }\n        {\n            \"<div $1 style=\\\"$Style\\\">$2</div>\";\n        }segxmi;\n    }\n\n    return $Param{String};\n}\n\n=head2 LinkQuote()\n\ndetect links in HTML code, add C<a href> if missing\n\n    my $HTMLWithLinks = $HTMLUtilsObject->LinkQuote(\n        String    => $HTMLString,\n        Target    => 'TargetName', # content of target=\"?\", e. g. _blank\n        TargetAdd => 1,            # add target=\"_blank\" to all existing \"<a href\"\n    );\n\nalso string ref is possible\n\n    my $HTMLWithLinksRef = $HTMLUtilsObject->LinkQuote(\n        String => \\$HTMLStringRef,\n    );\n\n=cut\n\nsub LinkQuote {\n    my ( $Self, %Param ) = @_;\n\n    my $String = $Param{String} || '';\n\n    # check ref\n    my $StringScalar;\n    if ( !ref $String ) {\n        $StringScalar = $String;\n        $String       = \\$StringScalar;\n\n        # return if string is not a ref and it is empty\n        return $StringScalar if !$StringScalar;\n    }\n\n    # add target to already existing url of html string\n    if ( $Param{TargetAdd} ) {\n\n        # find target\n        my $Target = $Param{Target};\n        if ( !$Target ) {\n            $Target = '_blank';\n        }\n\n        # add target to existing \"<a href\"\n        ${$String} =~ s{\n            (<a\\s{1,10})([^>]+)>\n        }\n        {\n            my $Start = $1;\n            my $Value = $2;\n            if ( $Value !~ /href=/i || $Value =~ /target=/i ) {\n                \"$Start$Value>\";\n            }\n            else {\n                \"$Start$Value target=\\\"$Target\\\">\";\n            }\n        }egxsi;\n    }\n\n    my $Marker = \"\u00a7\" x 10;\n\n    # Remove existing <a>...</a> tags and their content to be re-inserted later, this must not be quoted.\n    # Also remove other tags to avoid quoting in tag parameters.\n    my $Counter = 0;\n    my %TagHash;\n    ${$String} =~ s{\n        (<a\\s[^>]*?>[^>]*</a>|<[^>]+?>)\n    }\n    {\n        my $Content = $1;\n        my $Key     = \"${Marker}TagHash-$Counter${Marker}\";\n        $TagHash{$Counter++} = $Content;\n        $Key;\n    }egxism;\n\n    # Add <a> tags for URLs in the content.\n    my $Target = '';\n    if ( $Param{Target} ) {\n        $Target = \" target=\\\"$Param{Target}\\\"\";\n    }\n    ${$String} =~ s{\n        (                                          # $1 greater-than and less-than sign\n            > | < | \\s+ | \u00a7{10} |\n            (?: &[a-zA-Z0-9]+; )                   # get html entities\n        )\n        (                                          # $2\n            (?:                                    # http or only www\n                (?: (?: http s? | ftp ) :\\/\\/) |   # http://,https:// and ftp://\n                (?: (?: www | ftp ) \\.)            # www. and ftp.\n            )\n        )\n        (                                          # $3\n            (?: [a-z0-9\\-]+ \\. )*                  # get subdomains, optional\n            [a-z0-9\\-]+                            # get top level domain\n            (?:                                    # optional port number\n                [:]\n                [0-9]+\n            )?\n            (?:                                    # file path element\n                [\\/\\.]\n                | [a-zA-Z0-9\\-_=%]\n            )*\n            (?:                                    # param string\n                [\\?]                               # if param string is there, \"?\" must be present\n                [a-zA-Z0-9&;=%\\-_:\\.\\/]*           # param string content, this will also catch entities like &amp;\n            )?\n            (?:                                    # link hash string\n                [\\#]                               #\n                [a-zA-Z0-9&;=%\\-_:\\.\\/]*           # hash string content, this will also catch entities like &amp;\n            )?\n        )\n        (?=                                        # $4\n            (?:\n                [\\?,;!\\.\\)] (?: \\s | $ )           # \\)\\s this construct is because of bug# 2450\n                | \\\"\n                | \\]\n                | \\s+\n                | '\n                | >                               # greater-than and less-than sign\n                | <                               # \"\n                | (?: &[a-zA-Z0-9]+; )+            # html entities\n                | $                                # bug# 2715\n            )\n            | \u00a7{10}                                # ending TagHash\n        )\n    }\n    {\n        my $Start    = $1;\n        my $Protocol = $2;\n        my $Link     = $3;\n        my $End      = $4 || '';\n\n        # there may different links for href and link body\n        my $HrefLink;\n        my $DisplayLink;\n\n        if ( $Protocol =~ m{\\A ( http | https | ftp ) : \\/ \\/ }xi ) {\n            $DisplayLink = $Protocol . $Link;\n            $HrefLink    = $DisplayLink;\n        }\n        else {\n            if ($Protocol =~ m{\\A ftp }smx ) {\n                $HrefLink = 'ftp://';\n            }\n            else {\n                $HrefLink = 'http://';\n            }\n\n            if ( $Protocol ) {\n                $HrefLink   .= $Protocol;\n                $DisplayLink = $Protocol;\n            }\n\n            $DisplayLink .= $Link;\n            $HrefLink    .= $Link;\n        }\n        $Start . \"<a href=\\\"$HrefLink\\\"$Target title=\\\"$HrefLink\\\">$DisplayLink<\\/a>\" . $End;\n    }egxism;\n\n    # Re-add previously removed tags.\n    ${$String} =~ s{${Marker}TagHash-(\\d+)${Marker}}{$TagHash{$1}}egsxim;\n\n    # check ref && return result like called\n    if ( defined $StringScalar ) {\n        return ${$String};\n    }\n    return $String;\n}\n\n=head2 Safety()\n\nTo remove/strip active html tags/addons (javascript, C<applet>s, C<embed>s and C<object>s)\nfrom html strings.\n\n    my %Safe = $HTMLUtilsObject->Safety(\n        String         => $HTMLString,\n        NoApplet       => 1,\n        NoObject       => 1,\n        NoEmbed        => 1,\n        NoSVG          => 1,\n        NoImg          => 1,\n        NoIntSrcLoad   => 0,\n        NoExtSrcLoad   => 1,\n        NoJavaScript   => 1,\n        ReplacementStr => 'string',          # optional, string to show instead of applet, object, embed, svg and img tags\n    );\n\nalso string ref is possible\n\n    my %Safe = $HTMLUtilsObject->Safety(\n        String       => \\$HTMLStringRef,\n        NoApplet     => 1,\n        NoObject     => 1,\n        NoEmbed      => 1,\n        NoSVG        => 1,\n        NoImg        => 1,\n        NoIntSrcLoad => 0,\n        NoExtSrcLoad => 1,\n        NoJavaScript => 1,\n    );\n\nreturns\n\n    my %Safe = (\n        String  => $HTMLString, # modified html string (scalar or ref)\n        Replace => 1,           # info if something got replaced\n    );\n\n=cut\n\nsub Safety {\n    my ( $Self, %Param ) = @_;\n\n    # check needed stuff\n    for (qw(String)) {\n        if ( !defined $Param{$_} ) {\n            $Kernel::OM->Get('Kernel::System::Log')->Log(\n                Priority => 'error',\n                Message  => \"Need $_!\"\n            );\n            return;\n        }\n    }\n\n    my $String = $Param{String} || '';\n\n    # check ref\n    my $StringScalar;\n    if ( !ref $String ) {\n        $StringScalar = $String;\n        $String       = \\$StringScalar;\n    }\n\n    my %Safety;\n\n    my $Replaced;\n\n    # In UTF-7, < and > can be encoded to mask them from security filters like this one.\n    my $TagStart = '(?:<|[+]ADw-)';\n    my $TagEnd   = '(?:>|[+]AD4-)';\n\n    # This can also be entity-encoded to hide it from the parser.\n    #   Browsers seem to tolerate an omitted \";\".\n    my $JavaScriptPrefixRegex = '\n        (?: j | &\\#106[;]? | &\\#x6a[;]? )\n        (?: a | &\\#97[;]?  | &\\#x61[;]? )\n        (?: v | &\\#118[;]? | &\\#x76[;]? )\n        (?: a | &\\#97[;]?  | &\\#x61[;]? )\n        (?: s | &\\#115[;]? | &\\#x73[;]? )\n        (?: c | &\\#99[;]?  | &\\#x63[;]? )\n        (?: r | &\\#114[;]? | &\\#x72[;]? )\n        (?: i | &\\#105[;]? | &\\#x69[;]? )\n        (?: p | &\\#112[;]? | &\\#x70[;]? )\n        (?: t | &\\#116[;]? | &\\#x74[;]? )\n    ';\n\n    my $ExpressionPrefixRegex = '\n        (?: e | &\\#101[;]? | &\\#x65[;]? )\n        (?: x | &\\#120[;]? | &\\#x78[;]? )\n        (?: p | &\\#112[;]? | &\\#x70[;]? )\n        (?: r | &\\#114[;]? | &\\#x72[;]? )\n        (?: e | &\\#101[;]? | &\\#x65[;]? )\n        (?: s | &\\#115[;]? | &\\#x73[;]? )\n        (?: s | &\\#115[;]? | &\\#x73[;]? )\n        (?: i | &\\#105[;]? | &\\#x69[;]? )\n        (?: o | &\\#111[;]? | &\\#x6f[;]? )\n        (?: n | &\\#110[;]? | &\\#x6e[;]? )\n    ';\n\n    # Replace as many times as it is needed to avoid nesting tag attacks.\n    do {\n        $Replaced = undef;\n\n        # remove script tags\n        if ( $Param{NoJavaScript} ) {\n            $Replaced += ${$String} =~ s{\n                $TagStart script.*? $TagEnd .*?  $TagStart /script \\s* $TagEnd\n            }\n            {}sgxim;\n            $Replaced += ${$String} =~ s{\n                $TagStart script.*? $TagEnd .+? ($TagStart|$TagEnd)\n            }\n            {}sgxim;\n\n            # remove style/javascript parts\n            $Replaced += ${$String} =~ s{\n                $TagStart style[^>]+? $JavaScriptPrefixRegex (.+?|) $TagEnd (.*?) $TagStart /style \\s* $TagEnd\n            }\n            {}sgxim;\n\n            # remove MS CSS expressions (JavaScript embedded in CSS)\n            ${$String} =~ s{\n                ($TagStart style[^>]+? $TagEnd .*? $TagStart /style \\s* $TagEnd)\n            }\n            {\n                if ( index($1, 'expression(' ) > -1 ) {\n                    $Replaced = 1;\n                    '';\n                }\n                else {\n                    $1;\n                }\n            }egsxim;\n        }\n\n        # remove HTTP redirects\n        $Replaced += ${$String} =~ s{\n            $TagStart meta [^>]+? http-equiv=('|\"|)refresh [^>]+? $TagEnd\n        }\n        {}sgxim;\n\n        my $ReplacementStr = $Param{ReplacementStr} // '';\n\n        # remove <applet> tags\n        if ( $Param{NoApplet} ) {\n            $Replaced += ${$String} =~ s{\n                $TagStart applet.*? $TagEnd (.*?) $TagStart /applet \\s* $TagEnd\n            }\n            {$ReplacementStr}sgxim;\n        }\n\n        # remove <Object> tags\n        if ( $Param{NoObject} ) {\n            $Replaced += ${$String} =~ s{\n                $TagStart object.*? $TagEnd (.*?) $TagStart /object \\s* $TagEnd\n            }\n            {$ReplacementStr}sgxim;\n        }\n\n        # remove <svg> tags\n        if ( $Param{NoSVG} ) {\n            $Replaced += ${$String} =~ s{\n                $TagStart svg.*? $TagEnd (.*?) $TagStart /svg \\s* $TagEnd\n            }\n            {$ReplacementStr}sgxim;\n        }\n\n        # remove <img> tags\n        if ( $Param{NoImg} ) {\n            $Replaced += ${$String} =~ s{\n                $TagStart img.*? (.*?) \\s* $TagEnd\n            }\n            {$ReplacementStr}sgxim;\n        }\n\n        # remove <embed> tags\n        if ( $Param{NoEmbed} ) {\n            $Replaced += ${$String} =~ s{\n                $TagStart embed.*? $TagEnd\n            }\n            {$ReplacementStr}sgxim;\n        }\n\n        # check each html tag\n        ${$String} =~ s{\n            ($TagStart.+?$TagEnd)\n        }\n        {\n            my $Tag = $1;\n            if ($Param{NoJavaScript}) {\n\n                # remove on action attributes\n                $Replaced += $Tag =~ s{\n                    (?:\\s|/) on[a-z]+\\s*=(\"[^\"]+\"|'[^']+'|.+?)($TagEnd|\\s)\n                }\n                {$2}sgxim;\n\n                # remove javascript in a href links or src links\n                $Replaced += $Tag =~ s{\n                    ((?:\\s|;|/)(?:background|url|src|href)=)\n                    ('|\"|)                                  # delimiter, can be empty\n                    (?:\\s* $JavaScriptPrefixRegex .*?)      # javascript, followed by anything but the delimiter\n                    \\2                                      # delimiter again\n                    (\\s|$TagEnd)\n                }\n                {\n                    \"$1\\\"\\\"$3\";\n                }sgxime;\n\n                # remove link javascript tags\n                $Replaced += $Tag =~ s{\n                    ($TagStart link .+? $JavaScriptPrefixRegex (.+?|) $TagEnd)\n                }\n                {}sgxim;\n\n                # remove MS CSS expressions (JavaScript embedded in CSS)\n                $Replaced += $Tag =~ s{\n                    \\sstyle=(\"|')[^\\1]*? $ExpressionPrefixRegex [(].*?\\1($TagEnd|\\s)\n                }\n                {\n                    $2;\n                }egsxim;\n            }\n\n            # Remove malicious CSS content\n            $Tag =~ s{\n                (\\s)style=(\"|') (.*?) \\2\n            }\n            {\n                my ($Space, $Delimiter, $Content) = ($1, $2, $3);\n\n                if (\n                    ($Param{NoIntSrcLoad} && $Content =~ m{url\\(})\n                    || ($Param{NoExtSrcLoad} && $Content =~ m/(http|ftp|https):\\//i)) {\n                    $Replaced = 1;\n                    '';\n                }\n                else {\n                    \"${Space}style=${Delimiter}${Content}${Delimiter}\";\n                }\n            }egsxim;\n\n            # remove load tags\n            if ($Param{NoIntSrcLoad} || $Param{NoExtSrcLoad}) {\n                $Tag =~ s{\n                    ($TagStart (.+?) (?: \\s | /) (?:src|poster)=(.+?) (\\s.+?|) $TagEnd)\n                }\n                {\n                    my $URL = $3;\n                    if ($Param{NoIntSrcLoad} || ($Param{NoExtSrcLoad} && $URL =~ /(http|ftp|https):\\//i)) {\n                        $Replaced = 1;\n                        '';\n                    }\n                    else {\n                        $1;\n                    }\n                }segxim;\n            }\n\n            # replace original tag with clean tag\n            $Tag;\n        }segxim;\n\n        $Safety{Replace} += $Replaced;\n\n    } while ($Replaced);    ## no critic\n\n    # check ref && return result like called\n    if ( defined $StringScalar ) {\n        $Safety{String} = ${$String};\n    }\n    else {\n        $Safety{String} = $String;\n    }\n    return %Safety;\n}\n\n=head2 EmbeddedImagesExtract()\n\nextracts embedded images with data-URLs from an HTML document.\n\n    $HTMLUtilsObject->EmbeddedImagesExtract(\n        DocumentRef    => \\$Body,\n        AttachmentsRef => \\@Attachments,\n    );\n\nReturns nothing. If embedded images were found, these will be appended\nto the attachments list, and the image data URL will be replaced with a\nC<cid:> URL in the document.\n\n=cut\n\nsub EmbeddedImagesExtract {\n    my ( $Self, %Param ) = @_;\n\n    if ( ref $Param{DocumentRef} ne 'SCALAR' || !defined ${ $Param{DocumentRef} } ) {\n        $Kernel::OM->Get('Kernel::System::Log')->Log(\n            Priority => 'error',\n            Message  => \"Need DocumentRef!\"\n        );\n        return;\n    }\n    if ( ref $Param{AttachmentsRef} ne 'ARRAY' ) {\n        $Kernel::OM->Get('Kernel::System::Log')->Log(\n            Priority => 'error',\n            Message  => \"Need AttachmentsRef!\"\n        );\n        return;\n    }\n\n    my $FQDN = $Kernel::OM->Get('Kernel::Config')->Get('FQDN');\n    ${ $Param{DocumentRef} } =~ s{(src=\")(data:image/)(png|gif|jpg|jpeg|bmp)(;base64,)(.+?)(\")}{\n\n        my $Base64String = $5;\n\n        my $FileName     = 'pasted-' . time() . '-' . int(rand(1000000)) . '.' . $3;\n        my $ContentType  = \"image/$3; name=\\\"$FileName\\\"\";\n        my $ContentID    = 'pasted.' . time() . '.' . int(rand(1000000)) . '@' . $FQDN;\n\n        my $AttachmentData = {\n            Content     => decode_base64($Base64String),\n            ContentType => $ContentType,\n            ContentID   => $ContentID,\n            Filename    => $FileName,\n            Disposition => 'inline',\n        };\n        push @{$Param{AttachmentsRef}}, $AttachmentData;\n\n        # compose new image tag\n        $1 . \"cid:$ContentID\" . $6\n\n    }egxi;\n\n    return 1;\n}\n\n1;\n\n=head1 TERMS AND CONDITIONS\n\nThis software is part of the OTRS project (L<https://otrs.org/>).\n\nThis software comes with ABSOLUTELY NO WARRANTY. For details, see\nthe enclosed file COPYING for license information (GPL). If you\ndid not receive this file, see L<https://www.gnu.org/licenses/gpl-3.0.txt>.\n\n=cut\n", "# --\n# Copyright (C) 2001-2018 OTRS AG, https://otrs.com/\n# --\n# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n# the enclosed file COPYING for license information (GPL). If you\n# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.\n# --\n\nuse strict;\nuse warnings;\nuse utf8;\n\nuse vars (qw($Self));\n\n# get HTMLUtils object\nmy $HTMLUtilsObject = $Kernel::OM->Get('Kernel::System::HTMLUtils');\n\n# Safety tests\nmy @Tests = (\n    {\n        Input  => 'Some Text',\n        Result => {\n            Output  => 'Some Text',\n            Replace => 0,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input  => '<b>Some Text</b>',\n        Result => {\n            Output  => '<b>Some Text</b>',\n            Replace => 0,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input  => '<a href=\"javascript:alert(1)\">Some Text</a>',\n        Result => {\n            Output  => '<a href=\"\">Some Text</a>',\n            Replace => 1,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input =>\n            '<a href=\"https://www.yoururl.tld/sub/online-assessment/index.php\" target=\"_blank\">https://www.yoururl.tld/sub/online-assessment/index.php</a>',\n        Result => {\n            Output =>\n                '<a href=\"https://www.yoururl.tld/sub/online-assessment/index.php\" target=\"_blank\">https://www.yoururl.tld/sub/online-assessment/index.php</a>',\n            Replace => 0,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input =>\n            \"<a href='https://www.yoururl.tld/sub/online-assessment/index.php' target='_blank'>https://www.yoururl.tld/sub/online-assessment/index.php</a>\",\n        Result => {\n            Output =>\n                \"<a href='https://www.yoururl.tld/sub/online-assessment/index.php' target='_blank'>https://www.yoururl.tld/sub/online-assessment/index.php</a>\",\n            Replace => 0,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input  => '<a href=\"http://example.com/\" onclock=\"alert(1)\">Some Text</a>',\n        Result => {\n            Output  => '<a href=\"http://example.com/\">Some Text</a>',\n            Replace => 1,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input =>\n            '<a href=\"http://example.com/\" onclock=\"alert(1)\">Some Text <img src=\"http://example.com/logo.png\"/></a>',\n        Result => {\n            Output  => '<a href=\"http://example.com/\">Some Text </a>',\n            Replace => 1,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input => '<script type=\"text/javascript\" id=\"topsy_global_settings\">\nvar topsy_style = \"big\";\n</script><script type=\"text/javascript\" id=\"topsy-js-elem\" src=\"http://example.com/topsy.js?init=topsyWidgetCreator\"></script>\n<script type=\"text/javascript\" src=\"/pub/js/podpress.js\"></script>\n',\n        Result => {\n            Output => '\n\n',\n            Replace => 1,\n        },\n        Name => 'Safety - script tag'\n    },\n    {\n        Input => '<center>\n<applet code=\"AEHousman.class\" width=\"300\" height=\"150\">\nNot all browsers can run applets.  If you see this, yours can not.\nYou should be able to continue reading these lessons, however.\n</applet>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - applet tag'\n    },\n    {\n        Input => '<center>\n<object width=\"384\" height=\"236\" align=\"right\" vspace=\"5\" hspace=\"5\"><param name=\"movie\" value=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"384\" height=\"236\"></embed></object>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - object tag'\n    },\n    {\n        Input => '<center>\n\\'\\';!--\"<XSS>=&{()}\n</center>',\n        Result => {\n            Output => '<center>\n\\'\\';!--\"<XSS>=&{()}\n</center>',\n            Replace => 0,\n        },\n        Name => 'Safety - simple'\n    },\n    {\n        Input => '<center>\n<SCRIPT SRC=http://ha.ckers.org/xss.js></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script/src tag'\n    },\n    {\n        Input => '<center>\n<SCRIPT SRC=http://ha.ckers.org/xss.js><!-- some comment --></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script/src tag'\n    },\n    {\n        Input => '<center>\n<IMG SRC=\"javascript:alert(\\'XSS\\');\">\n</center>',\n        Result => {\n            Output => '<center>\n<IMG SRC=\"\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - img tag'\n    },\n    {\n        Input => '<center>\n<IMG SRC=javascript:alert(\\'XSS\\');>\n</center>',\n        Result => {\n            Output => '<center>\n<IMG SRC=\"\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - img tag'\n    },\n    {\n        Input => '<center>\n<IMG SRC=JaVaScRiPt:alert(\\'XSS\\')>\n</center>',\n        Result => {\n            Output => '<center>\n<IMG SRC=\"\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - img tag'\n    },\n    {\n        Input => '<center>\n<IMG SRC=javascript:alert(&quot;XSS&quot;)>\n</center>',\n        Result => {\n            Output => '<center>\n<IMG SRC=\"\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - img tag'\n    },\n    {\n        Input => '<center>\n<IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">\n</center>',\n        Result => {\n            Output => '<center>\n<IMG \"\"\">\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script/img tag'\n    },\n    {\n        Input => '<center>\n<SCRIPT/XSS SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script tag'\n    },\n    {\n        Input => '<center>\n<SCRIPT/SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script tag'\n    },\n    {\n        Input => '<center>\n<<SCRIPT>alert(\"XSS\");//<</SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n<\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script tag'\n    },\n    {\n        Input => '<center>\n<SCRIPT SRC=http://ha.ckers.org/xss.js?<B>\n</center>',\n        Result => {\n            Output => '<center>\n/center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script tag'\n    },\n    {\n        Input => '<center>\n<SCRIPT SRC=//ha.ckers.org/.j>\n</center>',\n        Result => {\n            Output => '<center>\n/center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script tag'\n    },\n    {\n        Input => '<center>\n<iframe src=http://ha.ckers.org/scriptlet.html >\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - iframe'\n    },\n    {\n        Input => '<center>\n<BODY ONLOAD=alert(\\'XSS\\')>\n</center>',\n        Result => {\n            Output => '<center>\n<BODY>\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - onload'\n    },\n    {\n        Input => '<center>\n<TABLE BACKGROUND=\"javascript:alert(\\'XSS\\')\">\n</center>',\n        Result => {\n            Output => '<center>\n<TABLE BACKGROUND=\"\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - background'\n    },\n    {\n        Input => '<center>\n<SCRIPT a=\">\" SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script'\n    },\n    {\n        Input => '<center>\n<SCRIPT =\">\" SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script'\n    },\n    {\n        Input => '<center>\n<SCRIPT \"a=\\'>\\'\"\n SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\n\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script'\n    },\n    {\n        Input => '<center>\n<SCRIPT>document.write(\"<SCRI\");</SCRIPT>PT\n SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n        Result => {\n            Output => '<center>\nPT\n SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script'\n    },\n    {\n        Input => '<center>\n<A\n HREF=\"javascript:document.location=\\'http://www.example.com/\\'\">XSS</A>\n</center>',\n        Result => {\n            Output => '<center>\n<A\n HREF=\"\">XSS</A>\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script'\n    },\n    {\n        Input => '<center>\n  <body style=\"background: #fff; color: #000;\" onmouseover     =\"var ga = document.createElement(\\'script\\'); ga.type = \\'text/javascript\\'; ga.src = (\\'https:\\' == document.location.protocol ? \\'https://\\' : \\'http://\\') + \\'ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\\'; document.body.appendChild(ga); setTimeout(function() { jQuery(\\'body\\').append(jQuery(\\'<div />\\').attr(\\'id\\', \\'hack-me\\').css(\\'display\\', \\'none\\')); jQuery(\\'#hack-me\\').load(\\'/otrs/index.pl?Action=AgentPreferences\\', null, function() { jQuery.ajax({url: \\'/otrs/index.pl\\', type: \\'POST\\', data: ({Action: \\'AgentPreferences\\', ChallengeToken: jQuery(\\'input[name=ChallengeToken]:first\\', \\'#hack-me\\').val(), Group: \\'Language\\', \\'Subaction\\': \\'Update\\', UserLanguage: \\'zh_CN\\'})}); }); }, 500);\">\n</center>',\n        Result => {\n            Output => '<center>\n  <body style=\"background: #fff; color: #000;\" ga = document.createElement(\\'script\\'); ga.type = \\'text/javascript\\'; ga.src = (\\'https:\\' == document.location.protocol ? \\'https://\\' : \\'http://\\') + \\'ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\\'; document.body.appendChild(ga); setTimeout(function() { jQuery(\\'body\\').append(jQuery(\\'<div />\\').attr(\\'id\\', \\'hack-me\\').css(\\'display\\', \\'none\\')); jQuery(\\'#hack-me\\').load(\\'/otrs/index.pl?Action=AgentPreferences\\', null, function() { jQuery.ajax({url: \\'/otrs/index.pl\\', type: \\'POST\\', data: ({Action: \\'AgentPreferences\\', ChallengeToken: jQuery(\\'input[name=ChallengeToken]:first\\', \\'#hack-me\\').val(), Group: \\'Language\\', \\'Subaction\\': \\'Update\\', UserLanguage: \\'zh_CN\\'})}); }); }, 500);\">\n</center>',\n            Replace => 1,\n        },\n        Name => 'Safety - script'\n    },\n    {\n        Input =>\n            '<html><head><style type=\"text/css\"> #some_css {color: #FF0000} </style><body>Important Text about \"javascript\"!<style type=\"text/css\"> #some_more_css{ color: #00FF00 } </style> Some more text.</body></html>',\n        Result => {\n            Output =>\n                '<html><head><style type=\"text/css\"> #some_css {color: #FF0000} </style><body>Important Text about \"javascript\"!<style type=\"text/css\"> #some_more_css{ color: #00FF00 } </style> Some more text.</body></html>',\n            Replace => 0,\n        },\n        Name =>\n            'Safety - Test for bug#7972 - Some mails may not present HTML part when using rich viewing.'\n    },\n    {\n        Input =>\n            '<html><head><style type=\"text/javascript\"> alert(\"some evil stuff!);</style><body>Important Text about \"javascript\"!<style type=\"text/css\"> #some_more_css{ color: #00FF00 } </style> Some more text.</body></html>',\n        Result => {\n            Output =>\n                '<html><head><body>Important Text about \"javascript\"!<style type=\"text/css\"> #some_more_css{ color: #00FF00 } </style> Some more text.</body></html>',\n            Replace => 1,\n        },\n        Name =>\n            'Safety - Additional test for bug#7972 - Some mails may not present HTML part when using rich viewing.'\n    },\n    {\n        Name  => 'Safety - UTF7 tags',\n        Input => <<EOF,\nscript:+ADw-script+AD4-alert(1);+ADw-/script+AD4-\napplet:+ADw-applet+AD4-alert(1);+ADw-/applet+AD4-\nembed:+ADw-embed src=test+AD4-\nobject:+ADw-object+AD4-alert(1);+ADw-/object+AD4-\nEOF\n        Result => {\n            Output => <<EOF,\nscript:\napplet:\nembed:\nobject:\nEOF\n            Replace => 1,\n        },\n    },\n    {\n        Input => <<EOF,\n<div style=\"width: expression(alert(\\'XSS\\');); height: 200px;\" style=\"width: 400px\">\n<div style='width: expression(alert(\"XSS\");); height: 200px;' style='width: 400px'>\nEOF\n        Result => {\n            Output => <<EOF,\n<div style=\"width: 400px\">\n<div style='width: 400px'>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - Filter out MS CSS expressions'\n    },\n    {\n        Input => <<EOF,\n<div><XSS STYLE=\"xss:expression(alert('XSS'))\"></div>\nEOF\n        Result => {\n            Output => <<EOF,\n<div><XSS></div>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - Microsoft CSS expression on invalid tag'\n    },\n    {\n        Input => <<EOF,\n<div class=\"svg\"><svg some-attribute evil=\"true\"><someevilsvgcontent></svg></div>\nEOF\n        Result => {\n            Output => <<EOF,\n<div class=\"svg\"></div>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - Filter out SVG'\n    },\n    {\n        Input => <<EOF,\n<div><script ></script ><applet ></applet ></div >\nEOF\n        Result => {\n            Output => <<EOF,\n<div></div >\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - Closing tag with space'\n    },\n    {\n        Input => <<EOF,\n<style type=\"text/css\">\ndiv > span {\n    width: 200px;\n}\n</style>\n<style type=\"text/css\">\ndiv > span {\n    width: expression(evilJS());\n}\n</style>\n<style type=\"text/css\">\ndiv > span > div {\n    width: 200px;\n}\n</style>\nEOF\n        Result => {\n            Output => <<EOF,\n<style type=\"text/css\">\ndiv > span {\n    width: 200px;\n}\n</style>\n\n<style type=\"text/css\">\ndiv > span > div {\n    width: 200px;\n}\n</style>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - Style tags with CSS expressions are filtered out'\n    },\n    {\n        Input => <<EOF,\n<s<script>...</script><script>...<cript type=\"text/javascript\">\ndocument.write(\"Hello World!\");\n</s<script>//<cript>\nEOF\n        Result => {\n            Output => <<EOF,\n\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - Nested script tags'\n    },\n    {\n        Input => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=\"  javascript:alert('XSS Exploit');\"></iframe>\n<img src=\"/img2.png\"/>\nEOF\n        Result => {\n            Output => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=\"\"></iframe>\n<img src=\"/img2.png\"/>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - javascript source with space'\n    },\n    {\n        Input => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src='  javascript:alert(\"XSS Exploit\");'></iframe>\n<img src=\"/img2.png\"/>\nEOF\n        Result => {\n            Output => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=\"\"></iframe>\n<img src=\"/img2.png\"/>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - javascript source with space'\n    },\n    {\n        Input => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=javascript:alert('XSS_Exploit');></iframe>\n<img src=\"/img2.png\"/>\nEOF\n        Result => {\n            Output => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=\"\"></iframe>\n<img src=\"/img2.png\"/>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - javascript source without delimiters'\n    },\n    {\n        Input => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=\"\" data-src=\"javascript:alert('XSS Exploit');\"></iframe>\n<img src=\"/img2.png\"/>\nEOF\n        Result => {\n            Output => <<EOF,\n<img src=\"/img1.png\"/>\n<iframe src=\"\" data-src=\"javascript:alert('XSS Exploit');\"></iframe>\n<img src=\"/img2.png\"/>\nEOF\n            Replace => 0,\n        },\n        Name => 'Safety - javascript source in data tag, keep'\n    },\n    {\n        Input => <<EOF,\nSome\n<META HTTP-EQUIV=\"Refresh\" CONTENT=\"2;\nURL=http://www.rbrasileventos.com.br/9asdasd/\">\nContent\nEOF\n        Result => {\n            Output => <<EOF,\nSome\n\nContent\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - meta refresh tag removed'\n    },\n    {\n        Input => <<EOF,\n<img/onerror=\"alert(\\'XSS1\\')\"src=a>\nEOF\n        Result => {\n            Output => <<EOF,\n<img>\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - / as attribute delimiter'\n    },\n    {\n        Input => <<EOF,\n<iframe src=javasc&#x72ipt:alert(\\'XSS2\\') >\nEOF\n        Result => {\n            Output => <<EOF,\n<iframe src=\"\" >\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - entity encoding in javascript attribute'\n    },\n    {\n        Input => <<EOF,\n<iframe/src=javasc&#x72ipt:alert(\\'XSS2\\') >\nEOF\n        Result => {\n            Output => <<EOF,\n<iframe/src=\"\" >\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - entity encoding in javascript attribute with / separator'\n    },\n    {\n        Input => <<EOF,\n<img src=\"http://example.com/image.png\"/>\nEOF\n        Result => {\n            Output => <<EOF,\n\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - external image'\n    },\n    {\n        Input => <<EOF,\n<img/src=\"http://example.com/image.png\"/>\nEOF\n        Result => {\n            Output => <<EOF,\n\nEOF\n            Replace => 1,\n        },\n        Name => 'Safety - external image with / separator'\n    },\n);\n\nfor my $Test (@Tests) {\n    my %Result = $HTMLUtilsObject->Safety(\n        String       => $Test->{Input},\n        NoApplet     => 1,\n        NoObject     => 1,\n        NoEmbed      => 1,\n        NoSVG        => 1,\n        NoIntSrcLoad => 0,\n        NoExtSrcLoad => 1,\n        NoJavaScript => 1,\n    );\n    if ( $Test->{Result}->{Replace} ) {\n        $Self->True(\n            $Result{Replace},\n            \"$Test->{Name} replaced\",\n        );\n    }\n    else {\n        $Self->False(\n            $Result{Replace},\n            \"$Test->{Name} not replaced\",\n        );\n    }\n    $Self->Is(\n        $Result{String},\n        $Test->{Result}->{Output},\n        $Test->{Name},\n    );\n}\n\n@Tests = (\n    {\n        Name  => 'Safety - img tag',\n        Input => <<EOF,\n<img/src=\"http://example.com/image.png\"/>\nEOF\n        Config => {\n            NoImg => 1,\n        },\n        Result => {\n            Output => <<EOF,\n\nEOF\n            Replace => 1,\n        },\n    },\n    {\n        Name  => 'Safety - img tag replacement',\n        Input => <<EOF,\n<img/src=\"http://example.com/image.png\"/>\nEOF\n        Config => {\n            NoImg          => 1,\n            ReplacementStr => '...'\n        },\n        Result => {\n            Output => <<EOF,\n...\nEOF\n            Replace => 1,\n        },\n    },\n    {\n        Name  => 'Safety - Filter out SVG replacement',\n        Input => <<EOF,\n<div class=\"svg\"><svg some-attribute evil=\"true\"><someevilsvgcontent></svg></div>\nEOF\n        Config => {\n            NoSVG          => 1,\n            ReplacementStr => '...'\n        },\n        Result => {\n            Output => <<EOF,\n<div class=\"svg\">...</div>\nEOF\n            Replace => 1,\n        },\n    },\n    {\n        Name  => 'Safety - object tag replacement',\n        Input => '<center>\n<object width=\"384\" height=\"236\" align=\"right\" vspace=\"5\" hspace=\"5\"><param name=\"movie\" value=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"384\" height=\"236\"></embed></object>\n</center>',\n        Config => {\n            NoObject       => 1,\n            ReplacementStr => '...'\n        },\n        Result => {\n            Output => '<center>\n...\n</center>',\n            Replace => 1,\n        },\n    },\n    {\n        Name  => 'Safety - embed tag replacement',\n        Input => '<center>\n<object width=\"384\" height=\"236\" align=\"right\" vspace=\"5\" hspace=\"5\"><param name=\"movie\" value=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"384\" height=\"236\"></object>\n</center>',\n        Config => {\n            NoEmbed        => 1,\n            ReplacementStr => '...'\n        },\n        Result => {\n            Output => '<center>\n<object width=\"384\" height=\"236\" align=\"right\" vspace=\"5\" hspace=\"5\"><param name=\"movie\" value=\"http://www.youtube.com/v/l1JdGPVMYNk&hl=en_US&fs=1&hd=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param>...</object>\n</center>',\n            Replace => 1,\n        },\n    },\n    {\n        Name  => 'Safety - applet tag replacement',\n        Input => '<center>\n<applet code=\"AEHousman.class\" width=\"300\" height=\"150\">\nNot all browsers can run applets.  If you see this, yours can not.\nYou should be able to continue reading these lessons, however.\n</applet>\n</center>',\n        Config => {\n            NoApplet       => 1,\n            ReplacementStr => '...'\n        },\n        Result => {\n            Output => '<center>\n...\n</center>',\n            Replace => 1,\n        },\n    },\n    {\n        Name   => 'Safety - bug 10530 - don\\'t destroy URL which looks like an on* JS attribute',\n        Input  => '<a href=\"http://localhost/online/foo/bar.html\">www</a>',\n        Config => {},\n        Result => {\n            Output  => '<a href=\"http://localhost/online/foo/bar.html\">www</a>',\n            Replace => 0,\n        },\n    },\n    {\n        Name   => 'Safety - bug 13561 - Handling empty strings',\n        Input  => '',\n        Config => {},\n        Result => {\n            Output  => '',\n            Replace => 0,\n        },\n    },\n    {\n        Name   => 'Safety - remote poster attribute, forbidden',\n        Input  => '<video controls poster=\"http://some.domain/vorschaubild.png\"/>',\n        Config => {\n            NoExtSrcLoad => 1,\n        },\n        Result => {\n            Output  => '',\n            Replace => 1,\n        },\n    },\n    {\n        Name   => 'Safety - remote poster attribute, allowed',\n        Input  => '<video controls poster=\"http://some.domain/vorschaubild.png\"/>',\n        Config => {\n            NoExtSrcLoad => 0,\n        },\n        Result => {\n            Output  => '<video controls poster=\"http://some.domain/vorschaubild.png\"/>',\n            Replace => 0,\n        },\n    },\n    {\n        Name  => 'Safety - malicious CSS content - remote background image, forbidden',\n        Input => '<a href=\"localhost\" style=\"background-image:url(http://localhost:8000/css-background)\">localhost</a>',\n        Config => {\n            NoExtSrcLoad => 1,\n        },\n        Result => {\n            Output  => '<a href=\"localhost\">localhost</a>',\n            Replace => 1,\n        },\n    },\n    {\n        Name  => 'Safety - malicious CSS content - remote background image, allowed',\n        Input => '<a href=\"localhost\" style=\"background-image:url(http://localhost:8000/css-background)\">localhost</a>',\n        Config => {\n            NoExtSrcLoad => 0,\n        },\n        Result => {\n            Output  => '<a href=\"localhost\" style=\"background-image:url(http://localhost:8000/css-background)\">localhost</a>',\n            Replace => 0,\n        },\n    },\n    {\n        Name  => 'Safety - malicious CSS content - local background image, forbidden',\n        Input => '<a href=\"localhost\" style=\"background-image:url(/local/css-background)\">localhost</a>',\n        Config => {\n            NoIntSrcLoad => 1,\n        },\n        Result => {\n            Output  => '<a href=\"localhost\">localhost</a>',\n            Replace => 1,\n        },\n    },\n    {\n        Name  => 'Safety - malicious CSS content - local background image, allowed',\n        Input => '<a href=\"localhost\" style=\"background-image:url(/local/css-background)\">localhost</a>',\n        Config => {\n            NoIntSrcLoad => 0,\n        },\n        Result => {\n            Output  => '<a href=\"localhost\" style=\"background-image:url(/local/css-background)\">localhost</a>',\n            Replace => 0,\n        },\n    },\n    {\n        Name   => 'Safety - malicious CSS content - remote css content, forbidden',\n        Input  => q|<p style=\"content:url('http://localhost:8000/css-content');\"></p>|,\n        Config => {\n            NoExtSrcLoad => 1,\n        },\n        Result => {\n            Output  => '<p></p>',\n            Replace => 1,\n        },\n    },\n    {\n        Name   => 'Safety - malicious CSS content - remote css content, allowed',\n        Input  => q|<p style=\"content:url('http://localhost:8000/css-content');\"></p>|,\n        Config => {\n            NoExtSrcLoad => 0,\n        },\n        Result => {\n            Output  => q|<p style=\"content:url('http://localhost:8000/css-content');\"></p>|,\n            Replace => 0,\n        },\n    },\n    {\n        Name   => 'Safety - malicious CSS content - local css content, forbidden',\n        Input  => q|<p style=\"content:url('/local/css-content');\"></p>|,\n        Config => {\n            NoIntSrcLoad => 1,\n        },\n        Result => {\n            Output  => '<p></p>',\n            Replace => 1,\n        },\n    },\n    {\n        Name   => 'Safety - malicious CSS content - local css content, allowed',\n        Input  => q|<p style=\"content:url('/local/css-content');\"></p>|,\n        Config => {\n            NoIntSrcLoad => 0,\n        },\n        Result => {\n            Output  => q|<p style=\"content:url('/local/css-content');\"></p>|,\n            Replace => 0,\n        },\n    },\n);\n\nfor my $Test (@Tests) {\n    my %Result = $HTMLUtilsObject->Safety(\n        String => $Test->{Input},\n        %{ $Test->{Config} },\n    );\n    if ( $Test->{Result}->{Replace} ) {\n        $Self->True(\n            $Result{Replace},\n            \"$Test->{Name} replaced\",\n        );\n    }\n    else {\n        $Self->False(\n            $Result{Replace},\n            \"$Test->{Name} not replaced\",\n        );\n    }\n    $Self->Is(\n        $Result{String},\n        $Test->{Result}->{Output},\n        $Test->{Name},\n    );\n}\n\n1;\n"], "filenames": ["Kernel/System/HTMLUtils.pm", "scripts/test/HTMLUtils/Safety.t"], "buggy_code_start_loc": [1165, 818], "buggy_code_end_loc": [1170, 818], "fixing_code_start_loc": [1166, 819], "fixing_code_end_loc": [1188, 929], "type": "NVD-CWE-noinfo", "message": "In Open Ticket Request System (OTRS) 4.0.x before 4.0.32, 5.0.x before 5.0.30, and 6.0.x before 6.0.11, an attacker could send a malicious email to an OTRS system. If a logged in user opens it, the email could cause the browser to load external image or CSS resources.", "other": {"cve": {"id": "CVE-2018-16586", "sourceIdentifier": "cve@mitre.org", "published": "2018-09-28T00:29:01.633", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Open Ticket Request System (OTRS) 4.0.x before 4.0.32, 5.0.x before 5.0.30, and 6.0.x before 6.0.11, an attacker could send a malicious email to an OTRS system. If a logged in user opens it, the email could cause the browser to load external image or CSS resources."}, {"lang": "es", "value": "En Open Ticket Request System (OTRS) en versiones 4.0.x anteriores a la 4.0.32, versiones 5.0.x anteriores a la 5.0.30 y versiones 6.0.x anteriores a la 6.0.11, un atacante podr\u00eda enviar un email malicioso a un sistema OTRS. Si un usuario que haya iniciado sesi\u00f3n lo abre, el email podr\u00eda provocar que el navegador cargue una imagen externa o recursos CSS."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:otrs:open_ticket_request_system:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0.0", "versionEndExcluding": "4.0.32", "matchCriteriaId": "6BD45EA4-6EBA-4590-86F7-0D2FDFEE771D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:otrs:open_ticket_request_system:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.0.30", "matchCriteriaId": "C71C5452-F983-4A71-BC5F-07FFA60D5E19"}, {"vulnerable": true, "criteria": "cpe:2.3:a:otrs:open_ticket_request_system:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.0.0", "versionEndExcluding": "6.0.11", "matchCriteriaId": "2A8A41B9-7C2B-4DE6-A43E-25A6FE253325"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "https://community.otrs.com/security-advisory-2018-05-security-update-for-otrs-framework/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/OTRS/otrs/commit/09e80c7752b0d9080688e4597c7495dd109e0963", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/OTRS/otrs/commit/a808859a75c59ae3b7568f5cc4708c53462aa4c7", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/OTRS/otrs/commit/baa92df09145b8ae2702a3a0e85d8ba55ec96302", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/09/msg00033.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2018/dsa-4317", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OTRS/otrs/commit/09e80c7752b0d9080688e4597c7495dd109e0963"}}