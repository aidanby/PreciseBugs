{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\n\nclass SightingsController extends AppController\n{\n    public $components = array('Session', 'RequestHandler');\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n    }\n\n    public $paginate = array(\n            'limit' => 60,\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events <- no we won't, this is the max a user van view/page.\n            'order' => array('Sighting.date_sighting' => 'DESC'),\n    );\n\n    // takes an attribute ID or UUID\n    public function add($id = false)\n    {\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException('You are not authorised to add sightings data as you don\\'t have write access.');\n        }\n        if ($this->request->is('post')) {\n            $now = time();\n            $values = false;\n            $timestamp = false;\n            $error = false;\n            if ($id === 'stix') {\n                $result = $this->Sighting->handleStixSighting(file_get_contents('php://input'));\n                if ($result['success']) {\n                    $result['data'] = json_decode($result['data'], true);\n                    $timestamp = isset($result['data']['timestamp']) ? strtotime($result['data']['timestamp']) : $now;\n                    $type = '0';\n                    $source = '';\n                    if (isset($result['data']['values'])) {\n                        $values = $result['data']['values'];\n                    } else {\n                        $error = 'No valid values found that could be extracted from the sightings document.';\n                    }\n                } else {\n                    $error = $result['message'];\n                }\n            } else {\n                if (isset($this->request->data['request'])) {\n                    $this->request->data = $this->request->data['request'];\n                }\n                if (isset($this->request->data['Sighting'])) {\n                    $this->request->data = $this->request->data['Sighting'];\n                }\n                if (!empty($this->request->data['date']) && !empty($this->request->data['time'])) {\n                    $timestamp = DateTime::createFromFormat('Y-m-d:H:i:s', $this->request->data['date'] . ':' . $this->request->data['time']);\n                    $timestamp = $timestamp->getTimestamp();\n                } else {\n                    $timestamp = isset($this->request->data['timestamp']) ? $this->request->data['timestamp'] : $now;\n                }\n                if (isset($this->request->data['value'])) {\n                    $this->request->data['values'] = array($this->request->data['value']);\n                }\n                $values = isset($this->request->data['values']) ? $this->request->data['values'] : false;\n                if (!$id && isset($this->request->data['uuid'])) {\n                    $id = $this->request->data['uuid'];\n                }\n                if (!$id && isset($this->request->data['id'])) {\n                    $id = $this->request->data['id'];\n                }\n                $type = isset($this->request->data['type']) ? $this->request->data['type'] : '0';\n                $source = isset($this->request->data['source']) ? trim($this->request->data['source']) : '';\n            }\n            if (!$error) {\n                $result = $this->Sighting->saveSightings($id, $values, $timestamp, $this->Auth->user(), $type, $source);\n            }\n            if (!is_numeric($result)) {\n                $error = $result;\n            }\n            if ($this->request->is('ajax')) {\n                if ($error) {\n                    $error_message = 'Could not add the Sighting. Reason: ' . $error;\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $error_message)), 'status' => 200, 'type' => 'json'));\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => $result . ' ' . $this->Sighting->type[$type] . (($result == 1) ? '' : 's') . '  added.')), 'status' => 200, 'type' => 'json'));\n                }\n            } else {\n                if ($error) {\n                    $error_message = __('Could not add the Sighting. Reason: ') . $error;\n                    if ($this->_isRest() || $this->response->type() === 'application/json') {\n                        $this->set('message', $error_message);\n                        $this->set('_serialize', array('message'));\n                    } else {\n                        $this->Flash->error($error_message);\n                        $this->redirect($this->referer());\n                    }\n                } else {\n                    if ($this->_isRest() || $this->response->type() === 'application/json') {\n                        $this->set('message', __('Sighting added'));\n                        $this->set('_serialize', array('message'));\n                    } else {\n                        $this->Flash->success(__('Sighting added'));\n                        $this->redirect($this->referer());\n                    }\n                }\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->describe('Sightings', 'add', false, $this->response->type());\n            }\n            if (!$this->request->is('ajax')) {\n                throw new MethodNotAllowedException('This method is only accessible via POST requests and ajax GET requests.');\n            } else {\n                $this->layout = false;\n                $this->loadModel('Attribute');\n                $attributes = $this->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $id), 'flatten' => 1));\n                if (empty($attributes)) {\n                    throw new MethodNotAllowedExeption('Invalid Attribute.');\n                }\n                $this->set('event_id', $attributes[0]['Attribute']['event_id']);\n                $this->set('id', $id);\n                $this->render('ajax/add_sighting');\n            }\n        }\n    }\n\n    public function advanced($id, $context = 'attribute')\n    {\n        if (empty($id)) {\n            throw new MethodNotAllowedException('Invalid ' . $context . '.');\n        }\n        $input_id = $id;\n        $id = $this->Sighting->explodeIdList($id);\n        if ($context == 'attribute') {\n            $this->loadModel('Attribute');\n            $attributes = $this->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $id), 'flatten' => 1));\n            if (empty($attributes)) {\n                throw new MethodNotAllowedException('Invalid attribute.');\n            }\n        } else {\n            $this->loadModel('Event');\n            $events = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id, 'metadata' => true));\n            if (empty($events)) {\n                throw new MethodNotAllowedException('Invalid event.');\n            }\n        }\n        $this->set('context', $context);\n        $this->set('id', $input_id);\n        $this->render('/Sightings/ajax/advanced');\n    }\n\n    public function quickAdd($id=false, $type=1, $onvalue=false)\n    {\n        if (!$this->userRole['perm_modify_org']) {\n            throw new MethodNotAllowedException(__('You are not authorised to remove sightings data as you don\\'t have permission to modify your organisation\\'s data.'));\n        }\n        if (!$this->request->is('post')) {\n            $this->loadModel('Attribute');\n            $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $id, 'Attribute.deleted' => 0), 'flatten' => 1));\n            if (empty($attribute)) {\n                throw new MethodNotAllowedException(__('Attribute not found'));\n            } else {\n                $attribute = $attribute[0]['Attribute'];\n                if (!$onvalue) {\n                    $this->set('id', $attribute['id']);\n                    $this->set('tosight', $attribute['id']);\n                } else {\n                    $this->set('id', '');\n                    $this->set('tosight', $attribute['value']);\n                }\n                $this->set('value', $attribute['value']);\n                $this->set('event_id', $attribute['event_id']);\n                $this->set('sighting_type', $type);\n                $this->set('onvalue', $onvalue);\n                $this->render('ajax/quickAddConfirmationForm');\n            }\n        } else {\n            if (!isset($id)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => __('Invalid request.'))), 'status' => 200, 'type' => 'json'));\n            } else {\n                if ($onvalue) {\n                    $result = $this->Sighting->add();\n                } else {\n                    $result = $this->Sighting->add($id);\n                }\n\n                if ($result) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => __('Sighting added.'))), 'status' => 200, 'type' => 'json'));\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => __('Sighting could not be added'))), 'status' => 200, 'type' => 'json'));\n                }\n            }\n        }\n    }\n\n    public function quickDelete($id, $rawId, $context)\n    {\n        if (!$this->userRole['perm_modify_org']) {\n            throw new MethodNotAllowedException('You are not authorised to remove sightings data as you don\\'t have permission to modify your organisation\\'s data.');\n        }\n        if (!$this->request->is('post')) {\n            $this->set('id', $id);\n            $sighting = $this->Sighting->find('first', array('conditions' => array('Sighting.id' => $id), 'recursive' => -1, 'fields' => array('Sighting.attribute_id')));\n            $this->set('rawId', $rawId);\n            $this->set('context', $context);\n            $this->render('ajax/quickDeleteConfirmationForm');\n        } else {\n            if (!isset($id)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => 'Invalid request.')), 'status' => 200, 'type' => 'json'));\n            } else {\n                $sighting = $this->Sighting->find('first', array('conditions' => array('Sighting.id' => $id), 'recursive' => -1));\n                if (empty($sighting)) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => 'Invalid sighting.')), 'status' => 200, 'type' => 'json'));\n                }\n                if (!$this->_isSiteAdmin() && $sighting['Sighting']['org_id'] != $this->Auth->user('org_id')) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => 'Invalid sighting.')), 'status' => 200, 'type' => 'json'));\n                }\n                $result = $this->Sighting->delete($id);\n                if ($result) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Sighting deleted.')), 'status' => 200, 'type' => 'json'));\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => 'Sighting could not be deleted')), 'status' => 200, 'type' => 'json'));\n                }\n            }\n        }\n    }\n\n    // takes a sighting ID\n    public function delete($id)\n    {\n        if (!$this->userRole['perm_modify_org']) {\n            throw new MethodNotAllowedException('You are not authorised to remove sightings data as you don\\'t have permission to modify your organisation\\'s data.');\n        }\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException('This action can only be accessed via a post request.');\n        }\n        $sighting = $this->Sighting->find('first', array('conditions' => array('Sighting.id' => $id), 'recursive' => -1));\n        if (empty($sighting)) {\n            throw new NotFoundException('Invalid sighting.');\n        }\n        if (!$this->_isSiteAdmin()) {\n            if ($sighting['Sighting']['org_id'] != $this->Auth->user('org_id')) {\n                throw new NotFoundException('Invalid sighting.');\n            }\n        }\n        $result = $this->Sighting->delete($sighting['Sighting']['id']);\n        if (!$result) {\n            return $this->RestResponse->saveFailResponse('Sighting', 'delete', $id, 'Could not delete the Sighting.');\n        } else {\n            return $this->RestResponse->saveSuccessResponse('Sighting', 'delete', $id, false, 'Sighting successfuly deleted.');\n        }\n    }\n\n    public function index($eventid = false)\n    {\n        $this->loadModel('Event');\n        $sightingConditions = array();\n        if ($eventid) {\n            $sightingConditions = array('Sighting.event_id' => $eventid);\n        }\n        $sightedEvents = $this->Sighting->find('list', array(\n            'group' => 'Sighting.event_id',\n            'fields' => array('Sighting.event_id'),\n            'conditions' => $sightingConditions\n        ));\n        if (empty($sightedEvents)) {\n            $this->RestResponse->viewData(array());\n        }\n        $conditions = array('metadata' => true, 'contain' => false);\n        if ($eventid) {\n            $conditions['eventid'] = $sightedEvents;\n        }\n        $events = $this->Event->fetchEventIds($this->Auth->user(), false, false, false, false, false, false, $sightedEvents);\n        $sightings = array();\n        if (!empty($events)) {\n            foreach ($events as $k => $event) {\n                $sightings = array_merge($sightings, $this->Sighting->attachToEvent($event, $this->Auth->user()));\n            }\n        }\n        return $this->RestResponse->viewData($sightings);\n    }\n\n    public function restSearch($context = false)\n    {\n        $allowedContext = array(false, 'event', 'attribute');\n        $paramArray = array('returnFormat', 'id', 'type', 'from', 'to', 'last', 'org_id', 'source', 'includeAttribute', 'includeEvent');\n        $filterData = array(\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'paramArray' => $paramArray,\n            'ordered_url_params' => compact($paramArray)\n        );\n        $filters = $this->_harvestParameters($filterData, $exception);\n\n        // validate context\n        if (!in_array($context, $allowedContext, true)) {\n            throw new MethodNotAllowedException(_('Invalid context.'));\n        }\n        // ensure that an id is provided if context is set\n        if ($context !== false && !isset($filters['id'])) {\n            throw new MethodNotAllowedException(_('An id must be provided if the context is set.'));\n        }\n        $filters['context'] = $context;\n\n        if (isset($filters['returnFormat'])) {\n            $returnFormat = $filters['returnFormat'];\n        }\n        if ($returnFormat === 'download') {\n            $returnFormat = 'json';\n        }\n\n        $sightings = $this->Sighting->restSearch($this->Auth->user(), $returnFormat, $filters);\n\n        $validFormats = $this->Sighting->validFormats;\n        $responseType = $validFormats[$returnFormat][0];\n        return $this->RestResponse->viewData($sightings, $responseType, false, true);\n    }\n\n    public function listSightings($id, $context = 'attribute', $org_id = false)\n    {\n        $this->loadModel('Event');\n        $rawId = $id;\n        $id = $this->Sighting->explodeIdList($id);\n        if ($context === 'attribute') {\n            $object = $this->Event->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $id, 'Attribute.deleted' => 0), 'flatten' => 1));\n        } else {\n            // let's set the context to event here, since we reuse the variable later on for some additional lookups.\n            // Passing $context = 'org' could have interesting results otherwise...\n            $context = 'event';\n            $object = $this->Event->fetchEvent($this->Auth->user(), $options = array('eventid' => $id, 'metadata' => true));\n        }\n        if (empty($object)) {\n            throw new MethodNotAllowedException('Invalid object.');\n        }\n        $conditions = array(\n            'Sighting.' . $context . '_id' => $id\n        );\n        if ($org_id) {\n            $conditions[] = array('Sighting.org_id' => $org_id);\n        }\n        $sightings = $this->Sighting->find('all', array(\n            'conditions' => $conditions,\n            'recursive' => -1,\n            'contain' => array('Organisation.name'),\n            'order' => array('Sighting.date_sighting DESC')\n        ));\n        $this->set('org_id', $org_id);\n        $this->set('rawId', $rawId);\n        $this->set('context', $context);\n        $this->set('types', array('Sighting', 'False-positive', 'Expiration'));\n        if (Configure::read('Plugin.Sightings_anonymise') && !$this->_isSiteAdmin()) {\n            foreach ($sightings as $k => $v) {\n                if ($v['Sighting']['org_id'] != $this->Auth->user('org_id')) {\n                    $sightings[$k]['Organisation']['name'] = '';\n                    $sightings[$k]['Sighting']['org_id'] = 0;\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($sightings, $this->response->type());\n        }\n        $this->set('sightings', $sightings);\n        $this->layout = false;\n        $this->render('ajax/list_sightings');\n    }\n\n    public function viewSightings($id, $context = 'attribute')\n    {\n        $this->loadModel('Event');\n        $id = $this->Sighting->explodeIdList($id);\n        if ($context === 'attribute') {\n            $attribute_id = $id;\n            $object = $this->Event->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $id, 'Attribute.deleted' => 0), 'flatten' => 1));\n            if (empty($object)) {\n                throw new MethodNotAllowedException('Invalid object.');\n            }\n            $eventIds = array();\n            foreach ($object as $k => $v) {\n                $eventIds[] = $v['Attribute']['event_id'];\n            }\n            $events = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $eventIds));\n        } else {\n            $attribute_id = false;\n            // let's set the context to event here, since we reuse the variable later on for some additional lookups.\n            // Passing $context = 'org' could have interesting results otherwise...\n            $context = 'event';\n            $events = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n        }\n        if (empty($events)) {\n            throw new MethodNotAllowedException('Invalid object.');\n        }\n        $results = array();\n        $raw = array();\n        foreach ($events as $event) {\n            $raw = array_merge($raw, $this->Sighting->attachToEvent($event, $this->Auth->user(), $attribute_id));\n        }\n        foreach ($raw as $sighting) {\n            $results[$sighting['type']][date('Ymd', $sighting['date_sighting'])][] = $sighting;\n        }\n        $tsv = 'date\\tSighting\\tFalse-positive\\n';\n        $dataPoints = array();\n        $startDate = (date('Ymd'));\n        $details = array();\n        $range = (!empty(Configure::read('MISP.Sightings_range')) && is_numeric(Configure::read('MISP.Sightings_range'))) ? Configure::read('MISP.Sightings_range') : 365;\n        $range = date('Ymd', strtotime(\"-\" . $range . \" days\", time()));\n        foreach ($results as $type => $data) {\n            foreach ($data as $date => $sighting) {\n                if ($date < $startDate) {\n                    if ($date >= $range) {\n                        $startDate = $date;\n                    }\n                }\n                $temp = array();\n                foreach ($sighting as $sightingInstance) {\n                    if (!isset($sightingInstance['Organisation']['name'])) {\n                        $org = 'Anonymised';\n                    } else {\n                        $org = $sightingInstance['Organisation']['name'];\n                    }\n                    $temp[$org] = isset($temp[$org]) ? $temp[$org] + 1 : 1;\n                }\n                $dataPoints[$date][$type] = array('count' => count($sighting), 'details' => $temp);\n            }\n        }\n        $startDate = date('Ymd', strtotime(\"-3 days\", strtotime($startDate)));\n        for ($i = $startDate; $i < date('Ymd') + 1; $i++) {\n            if (checkdate(substr($i, 4, 2), substr($i, 6, 2), substr($i, 0, 4))) {\n                $tsv .= $i . '\\t' . (isset($dataPoints[$i][0]['count']) ? $dataPoints[$i][0]['count'] : 0) . '\\t' . (isset($dataPoints[$i][1]['count']) ? $dataPoints[$i][1]['count'] : 0) . '\\n';\n                $details[$i][0] = isset($dataPoints[$i][0]['details']) ? $dataPoints[$i][0]['details'] : array();\n                $details[$i][1] = isset($dataPoints[$i][1]['details']) ? $dataPoints[$i][1]['details'] : array();\n            }\n        }\n        $this->set('tsv', $tsv);\n        $this->set('results', $results);\n        $this->layout = 'ajax';\n        $this->render('ajax/view_sightings');\n    }\n}\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\n\nclass SightingsController extends AppController\n{\n    public $components = array('Session', 'RequestHandler');\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n    }\n\n    public $paginate = array(\n            'limit' => 60,\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events <- no we won't, this is the max a user van view/page.\n            'order' => array('Sighting.date_sighting' => 'DESC'),\n    );\n\n    // takes an attribute ID or UUID\n    public function add($id = false)\n    {\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException('You are not authorised to add sightings data as you don\\'t have write access.');\n        }\n        if ($this->request->is('post')) {\n            $now = time();\n            $values = false;\n            $timestamp = false;\n            $error = false;\n            if ($id === 'stix') {\n                $result = $this->Sighting->handleStixSighting(file_get_contents('php://input'));\n                if ($result['success']) {\n                    $result['data'] = json_decode($result['data'], true);\n                    $timestamp = isset($result['data']['timestamp']) ? strtotime($result['data']['timestamp']) : $now;\n                    $type = '0';\n                    $source = '';\n                    if (isset($result['data']['values'])) {\n                        $values = $result['data']['values'];\n                    } else {\n                        $error = 'No valid values found that could be extracted from the sightings document.';\n                    }\n                } else {\n                    $error = $result['message'];\n                }\n            } else {\n                if (isset($this->request->data['request'])) {\n                    $this->request->data = $this->request->data['request'];\n                }\n                if (isset($this->request->data['Sighting'])) {\n                    $this->request->data = $this->request->data['Sighting'];\n                }\n                if (!empty($this->request->data['date']) && !empty($this->request->data['time'])) {\n                    $timestamp = DateTime::createFromFormat('Y-m-d:H:i:s', $this->request->data['date'] . ':' . $this->request->data['time']);\n                    $timestamp = $timestamp->getTimestamp();\n                } else {\n                    $timestamp = isset($this->request->data['timestamp']) ? $this->request->data['timestamp'] : $now;\n                }\n                if (isset($this->request->data['value'])) {\n                    $this->request->data['values'] = array($this->request->data['value']);\n                }\n                $values = isset($this->request->data['values']) ? $this->request->data['values'] : false;\n                if (!$id && isset($this->request->data['uuid'])) {\n                    $id = $this->request->data['uuid'];\n                }\n                if (!$id && isset($this->request->data['id'])) {\n                    $id = $this->request->data['id'];\n                }\n                $type = isset($this->request->data['type']) ? $this->request->data['type'] : '0';\n                $source = isset($this->request->data['source']) ? trim($this->request->data['source']) : '';\n            }\n            if (!$error) {\n                $result = $this->Sighting->saveSightings($id, $values, $timestamp, $this->Auth->user(), $type, $source);\n            }\n            if (!is_numeric($result)) {\n                $error = $result;\n            }\n            if ($this->request->is('ajax')) {\n                if ($error) {\n                    $error_message = 'Could not add the Sighting. Reason: ' . $error;\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $error_message)), 'status' => 200, 'type' => 'json'));\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => $result . ' ' . $this->Sighting->type[$type] . (($result == 1) ? '' : 's') . '  added.')), 'status' => 200, 'type' => 'json'));\n                }\n            } else {\n                if ($error) {\n                    $error_message = __('Could not add the Sighting. Reason: ') . $error;\n                    if ($this->_isRest() || $this->response->type() === 'application/json') {\n                        $this->set('message', $error_message);\n                        $this->set('_serialize', array('message'));\n                    } else {\n                        $this->Flash->error($error_message);\n                        $this->redirect($this->referer());\n                    }\n                } else {\n                    if ($this->_isRest() || $this->response->type() === 'application/json') {\n                        $this->set('message', __('Sighting added'));\n                        $this->set('_serialize', array('message'));\n                    } else {\n                        $this->Flash->success(__('Sighting added'));\n                        $this->redirect($this->referer());\n                    }\n                }\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->describe('Sightings', 'add', false, $this->response->type());\n            }\n            if (!$this->request->is('ajax')) {\n                throw new MethodNotAllowedException('This method is only accessible via POST requests and ajax GET requests.');\n            } else {\n                $this->layout = false;\n                $this->loadModel('Attribute');\n                $attributes = $this->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $id), 'flatten' => 1));\n                if (empty($attributes)) {\n                    throw new MethodNotAllowedExeption('Invalid Attribute.');\n                }\n                $this->set('event_id', $attributes[0]['Attribute']['event_id']);\n                $this->set('id', $id);\n                $this->render('ajax/add_sighting');\n            }\n        }\n    }\n\n    public function advanced($id, $context = 'attribute')\n    {\n        if (empty($id)) {\n            throw new MethodNotAllowedException('Invalid ' . $context . '.');\n        }\n        $input_id = $id;\n        $id = $this->Sighting->explodeIdList($id);\n        if ($context == 'attribute') {\n            $this->loadModel('Attribute');\n            $attributes = $this->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $id), 'flatten' => 1));\n            if (empty($attributes)) {\n                throw new MethodNotAllowedException('Invalid attribute.');\n            }\n        } else {\n            $this->loadModel('Event');\n            $events = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id, 'metadata' => true));\n            if (empty($events)) {\n                throw new MethodNotAllowedException('Invalid event.');\n            }\n        }\n        $this->set('context', $context);\n        $this->set('id', $input_id);\n        $this->render('/Sightings/ajax/advanced');\n    }\n\n    public function quickAdd($id=false, $type=1, $onvalue=false)\n    {\n        if (!$this->userRole['perm_modify_org']) {\n            throw new MethodNotAllowedException(__('You are not authorised to remove sightings data as you don\\'t have permission to modify your organisation\\'s data.'));\n        }\n        if (!$this->request->is('post')) {\n            $this->loadModel('Attribute');\n            $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $id, 'Attribute.deleted' => 0), 'flatten' => 1));\n            if (empty($attribute)) {\n                throw new MethodNotAllowedException(__('Attribute not found'));\n            } else {\n                $attribute = $attribute[0]['Attribute'];\n                if (!$onvalue) {\n                    $this->set('id', $attribute['id']);\n                    $this->set('tosight', $attribute['id']);\n                } else {\n                    $this->set('id', '');\n                    $this->set('tosight', $attribute['value']);\n                }\n                $this->set('value', $attribute['value']);\n                $this->set('event_id', $attribute['event_id']);\n                $this->set('sighting_type', $type);\n                $this->set('onvalue', $onvalue);\n                $this->render('ajax/quickAddConfirmationForm');\n            }\n        } else {\n            if (!isset($id)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => __('Invalid request.'))), 'status' => 200, 'type' => 'json'));\n            } else {\n                if ($onvalue) {\n                    $result = $this->Sighting->add();\n                } else {\n                    $result = $this->Sighting->add($id);\n                }\n\n                if ($result) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => __('Sighting added.'))), 'status' => 200, 'type' => 'json'));\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => __('Sighting could not be added'))), 'status' => 200, 'type' => 'json'));\n                }\n            }\n        }\n    }\n\n    public function quickDelete($id, $rawId, $context)\n    {\n        if (!$this->userRole['perm_modify_org']) {\n            throw new MethodNotAllowedException('You are not authorised to remove sightings data as you don\\'t have permission to modify your organisation\\'s data.');\n        }\n        if (!$this->request->is('post')) {\n            $this->set('id', $id);\n            $sighting = $this->Sighting->find('first', array('conditions' => array('Sighting.id' => $id), 'recursive' => -1, 'fields' => array('Sighting.attribute_id')));\n            $this->set('rawId', $rawId);\n            $this->set('context', $context);\n            $this->render('ajax/quickDeleteConfirmationForm');\n        } else {\n            if (!isset($id)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => 'Invalid request.')), 'status' => 200, 'type' => 'json'));\n            } else {\n                $sighting = $this->Sighting->find('first', array('conditions' => array('Sighting.id' => $id), 'recursive' => -1));\n                if (empty($sighting)) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => 'Invalid sighting.')), 'status' => 200, 'type' => 'json'));\n                }\n                if (!$this->_isSiteAdmin() && $sighting['Sighting']['org_id'] != $this->Auth->user('org_id')) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => 'Invalid sighting.')), 'status' => 200, 'type' => 'json'));\n                }\n                $result = $this->Sighting->delete($id);\n                if ($result) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Sighting deleted.')), 'status' => 200, 'type' => 'json'));\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => 'Sighting could not be deleted')), 'status' => 200, 'type' => 'json'));\n                }\n            }\n        }\n    }\n\n    // takes a sighting ID\n    public function delete($id)\n    {\n        if (!$this->userRole['perm_modify_org']) {\n            throw new MethodNotAllowedException('You are not authorised to remove sightings data as you don\\'t have permission to modify your organisation\\'s data.');\n        }\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException('This action can only be accessed via a post request.');\n        }\n        $sighting = $this->Sighting->find('first', array('conditions' => array('Sighting.id' => $id), 'recursive' => -1));\n        if (empty($sighting)) {\n            throw new NotFoundException('Invalid sighting.');\n        }\n        if (!$this->_isSiteAdmin()) {\n            if ($sighting['Sighting']['org_id'] != $this->Auth->user('org_id')) {\n                throw new NotFoundException('Invalid sighting.');\n            }\n        }\n        $result = $this->Sighting->delete($sighting['Sighting']['id']);\n        if (!$result) {\n            return $this->RestResponse->saveFailResponse('Sighting', 'delete', $id, 'Could not delete the Sighting.');\n        } else {\n            return $this->RestResponse->saveSuccessResponse('Sighting', 'delete', $id, false, 'Sighting successfuly deleted.');\n        }\n    }\n\n    public function index($eventid = false)\n    {\n        $this->loadModel('Event');\n        $sightingConditions = array();\n        if ($eventid) {\n            $sightingConditions = array('Sighting.event_id' => $eventid);\n        }\n        $sightedEvents = $this->Sighting->find('list', array(\n            'group' => 'Sighting.event_id',\n            'fields' => array('Sighting.event_id'),\n            'conditions' => $sightingConditions\n        ));\n        if (empty($sightedEvents)) {\n            $this->RestResponse->viewData(array());\n        }\n        $conditions = array('metadata' => true, 'contain' => false);\n        if ($eventid) {\n            $conditions['eventid'] = $sightedEvents;\n        }\n        $events = $this->Event->fetchEventIds($this->Auth->user(), false, false, false, false, false, false, $sightedEvents);\n        $sightings = array();\n        if (!empty($events)) {\n            foreach ($events as $k => $event) {\n                $sightings = array_merge($sightings, $this->Sighting->attachToEvent($event, $this->Auth->user()));\n            }\n        }\n        return $this->RestResponse->viewData($sightings);\n    }\n\n    public function restSearch($context = false)\n    {\n        $allowedContext = array(false, 'event', 'attribute');\n        $paramArray = array('returnFormat', 'id', 'type', 'from', 'to', 'last', 'org_id', 'source', 'includeAttribute', 'includeEvent');\n        $filterData = array(\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'paramArray' => $paramArray,\n            'ordered_url_params' => compact($paramArray)\n        );\n        $filters = $this->_harvestParameters($filterData, $exception);\n\n        // validate context\n        if (!in_array($context, $allowedContext, true)) {\n            throw new MethodNotAllowedException(_('Invalid context.'));\n        }\n        // ensure that an id is provided if context is set\n        if ($context !== false && !isset($filters['id'])) {\n            throw new MethodNotAllowedException(_('An id must be provided if the context is set.'));\n        }\n        $filters['context'] = $context;\n\n        if (isset($filters['returnFormat'])) {\n            $returnFormat = $filters['returnFormat'];\n        }\n        if ($returnFormat === 'download') {\n            $returnFormat = 'json';\n        }\n\n        $sightings = $this->Sighting->restSearch($this->Auth->user(), $returnFormat, $filters);\n\n        $validFormats = $this->Sighting->validFormats;\n        $responseType = $validFormats[$returnFormat][0];\n        return $this->RestResponse->viewData($sightings, $responseType, false, true);\n    }\n\n    public function listSightings($id, $context = 'attribute', $org_id = false)\n    {\n        $this->loadModel('Event');\n        $rawId = $id;\n        $id = $this->Sighting->explodeIdList($id);\n        if ($context === 'attribute') {\n            $object = $this->Event->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $id, 'Attribute.deleted' => 0), 'flatten' => 1));\n        } else {\n            // let's set the context to event here, since we reuse the variable later on for some additional lookups.\n            // Passing $context = 'org' could have interesting results otherwise...\n            $context = 'event';\n            $object = $this->Event->fetchEvent($this->Auth->user(), $options = array('eventid' => $id, 'metadata' => true));\n        }\n        if (empty($object)) {\n            throw new MethodNotAllowedException('Invalid object.');\n        }\n        $conditions = array(\n            'Sighting.' . $context . '_id' => $id\n        );\n        if ($org_id) {\n            $conditions[] = array('Sighting.org_id' => $org_id);\n        }\n        $sightings = $this->Sighting->find('all', array(\n            'conditions' => $conditions,\n            'recursive' => -1,\n            'contain' => array('Organisation.name'),\n            'order' => array('Sighting.date_sighting DESC')\n        ));\n        if (!empty($sightings) && empty(Configure::read('Plugin.Sightings_policy')) && !$this->_isSiteAdmin()) {\n            $eventOwnerOrgIdList = array();\n            foreach ($sightings as $k => $sighting) {\n                if (empty($eventOwnerOrgIdList[$sighting['Sighting']['event_id']])) {\n                    $temp_event = $this->Event->find('first', array(\n                        'recursive' => -1,\n                        'conditions' => array('Event.id' => $sighting['Sighting']['event_id']),\n                        'fields' => array('Event.id', 'Event.orgc_id')\n                    ));\n                    $eventOwnerOrgIdList[$temp_event['Event']['id']] = $temp_event['Event']['orgc_id'];\n                }\n                if (empty($eventOwnerOrgIdList[$sighting['Sighting']['event_id']]) || $eventOwnerOrgIdList[$sighting['Sighting']['event_id']] !== $this->Auth->user('org_id')) {\n                    unset($sightings[$k]);\n                }\n            }\n            $sightings = array_values($sightings);\n        } else if (!empty($sightings) && Configure::read('Plugin.Sightings_policy') == 1 && !$this->_isSiteAdmin()) {\n            $eventsWithOwnSightings = array();\n            foreach ($sightings as $k => $sighting) {\n                if (empty($eventsWithOwnSightings[$sighting['Sighting']['event_id']])) {\n                    $eventsWithOwnSightings[$sighting['Sighting']['event_id']] = false;\n                    $sighting_temp = $this->Sighting->find('first', array(\n                        'recursive' => -1,\n                        'conditions' => array(\n                            'Sighting.event_id' => $sighting['Sighting']['event_id'],\n                            'Sighting.org_id' => $this->Auth->user('org_id')\n                        )\n                    ));\n                    if (empty($sighting_temp)) {\n                        $temp_event = $this->Event->find('first', array(\n                            'recursive' => -1,\n                            'conditions' => array(\n                                'Event.id' => $sighting['Sighting']['event_id'],\n                                'Event.orgc_id' => $this->Auth->user('org_id')\n                            ),\n                            'fields' => array('Event.id', 'Event.orgc_id')\n                        ));\n                        $eventsWithOwnSightings[$sighting['Sighting']['event_id']] = !empty($temp_event);\n                    } else {\n                        $eventsWithOwnSightings[$sighting['Sighting']['event_id']] = true;\n                    }\n                }\n                if (!$eventsWithOwnSightings[$sighting['Sighting']['event_id']]) {\n                    unset($sightings[$k]);\n                }\n            }\n            $sightings = array_values($sightings);\n        }\n        $this->set('org_id', $org_id);\n        $this->set('rawId', $rawId);\n        $this->set('context', $context);\n        $this->set('types', array('Sighting', 'False-positive', 'Expiration'));\n        if (Configure::read('Plugin.Sightings_anonymise') && !$this->_isSiteAdmin()) {\n            if (!empty($sightings)) {\n                foreach ($sightings as $k => $v) {\n                    if ($v['Sighting']['org_id'] != $this->Auth->user('org_id')) {\n                        $sightings[$k]['Organisation']['name'] = '';\n                        $sightings[$k]['Sighting']['org_id'] = 0;\n                    }\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($sightings, $this->response->type());\n        }\n        $this->set('sightings', empty($sightings) ? array() : $sightings);\n        $this->layout = false;\n        $this->render('ajax/list_sightings');\n    }\n\n    public function viewSightings($id, $context = 'attribute')\n    {\n        $this->loadModel('Event');\n        $id = $this->Sighting->explodeIdList($id);\n        if ($context === 'attribute') {\n            $attribute_id = $id;\n            $object = $this->Event->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $id, 'Attribute.deleted' => 0), 'flatten' => 1));\n            if (empty($object)) {\n                throw new MethodNotAllowedException('Invalid object.');\n            }\n            $eventIds = array();\n            foreach ($object as $k => $v) {\n                $eventIds[] = $v['Attribute']['event_id'];\n            }\n            $events = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $eventIds));\n        } else {\n            $attribute_id = false;\n            // let's set the context to event here, since we reuse the variable later on for some additional lookups.\n            // Passing $context = 'org' could have interesting results otherwise...\n            $context = 'event';\n            $events = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n        }\n        if (empty($events)) {\n            throw new MethodNotAllowedException('Invalid object.');\n        }\n        $results = array();\n        $raw = array();\n        foreach ($events as $event) {\n            $raw = array_merge($raw, $this->Sighting->attachToEvent($event, $this->Auth->user(), $attribute_id));\n        }\n        foreach ($raw as $sighting) {\n            $results[$sighting['type']][date('Ymd', $sighting['date_sighting'])][] = $sighting;\n        }\n        $tsv = 'date\\tSighting\\tFalse-positive\\n';\n        $dataPoints = array();\n        $startDate = (date('Ymd'));\n        $details = array();\n        $range = (!empty(Configure::read('MISP.Sightings_range')) && is_numeric(Configure::read('MISP.Sightings_range'))) ? Configure::read('MISP.Sightings_range') : 365;\n        $range = date('Ymd', strtotime(\"-\" . $range . \" days\", time()));\n        foreach ($results as $type => $data) {\n            foreach ($data as $date => $sighting) {\n                if ($date < $startDate) {\n                    if ($date >= $range) {\n                        $startDate = $date;\n                    }\n                }\n                $temp = array();\n                foreach ($sighting as $sightingInstance) {\n                    if (!isset($sightingInstance['Organisation']['name'])) {\n                        $org = 'Anonymised';\n                    } else {\n                        $org = $sightingInstance['Organisation']['name'];\n                    }\n                    $temp[$org] = isset($temp[$org]) ? $temp[$org] + 1 : 1;\n                }\n                $dataPoints[$date][$type] = array('count' => count($sighting), 'details' => $temp);\n            }\n        }\n        $startDate = date('Ymd', strtotime(\"-3 days\", strtotime($startDate)));\n        for ($i = $startDate; $i < date('Ymd') + 1; $i++) {\n            if (checkdate(substr($i, 4, 2), substr($i, 6, 2), substr($i, 0, 4))) {\n                $tsv .= $i . '\\t' . (isset($dataPoints[$i][0]['count']) ? $dataPoints[$i][0]['count'] : 0) . '\\t' . (isset($dataPoints[$i][1]['count']) ? $dataPoints[$i][1]['count'] : 0) . '\\n';\n                $details[$i][0] = isset($dataPoints[$i][0]['details']) ? $dataPoints[$i][0]['details'] : array();\n                $details[$i][1] = isset($dataPoints[$i][1]['details']) ? $dataPoints[$i][1]['details'] : array();\n            }\n        }\n        $this->set('tsv', $tsv);\n        $this->set('results', $results);\n        $this->layout = 'ajax';\n        $this->render('ajax/view_sightings');\n    }\n}\n"], "filenames": ["app/Controller/SightingsController.php"], "buggy_code_start_loc": [343], "buggy_code_end_loc": [360], "fixing_code_start_loc": [344], "fixing_code_end_loc": [410], "type": "CWE-862", "message": "In MISP 2.4.102, an authenticated user can view sightings that they should not be eligible for. Exploiting this requires access to the event that has received the sighting. The issue affects instances with restrictive sighting settings (event only / sighting reported only).", "other": {"cve": {"id": "CVE-2019-9482", "sourceIdentifier": "cve@mitre.org", "published": "2019-03-01T05:29:00.790", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In MISP 2.4.102, an authenticated user can view sightings that they should not be eligible for. Exploiting this requires access to the event that has received the sighting. The issue affects instances with restrictive sighting settings (event only / sighting reported only)."}, {"lang": "es", "value": "En la versi\u00f3n 2.4.102 de MISP, un usuario autenticado puede ver sightings para los que no deber\u00edan ser eligibles. Su explotaci\u00f3n requiere acceso al evento que ha recibido dicho sighting. Este problema solo afecta a las instancias con ajustes de sightings restrictivos (solo evento / sighting solamente reportado)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:2.4.102:*:*:*:*:*:*:*", "matchCriteriaId": "811E6505-5A4F-4567-83CA-1FA9D14BD93A"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/c69969329d197bcdd04832b03310fa73f4eb7155", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/c69969329d197bcdd04832b03310fa73f4eb7155"}}