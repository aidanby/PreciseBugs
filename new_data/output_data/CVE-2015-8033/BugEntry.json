{"buggy_code": ["<?php\n\n/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2005 Dean Allen\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Users panel.\n *\n * @package Admin\\Admin\n */\n\nuse Textpattern\\Search\\Filter;\n\nif (!defined('txpinterface')) {\n    die('txpinterface is undefined.');\n}\n\n$levels = get_groups();\n\nif ($event == 'admin') {\n    require_privs('admin');\n\n    include_once txpath.'/lib/txplib_admin.php';\n\n    $available_steps = array(\n        'admin_multi_edit'    => true,\n        'admin_change_pageby' => true,\n        'author_list'         => false,\n        'author_edit'         => false,\n        'author_save'         => true,\n        'author_save_new'     => true,\n        'change_email'        => true,\n        'change_email_form'   => false,\n        'change_pass'         => true,\n        'new_pass_form'       => false,\n    );\n\n    if ($step && bouncer($step, $available_steps)) {\n        $step();\n    } else {\n        author_list();\n    }\n}\n\n/**\n * Changes an email address.\n */\n\nfunction change_email()\n{\n    global $txp_user;\n\n    $new_email = ps('new_email');\n\n    if (!is_valid_email($new_email)) {\n        author_list(array(gTxt('email_required'), E_ERROR));\n\n        return;\n    }\n\n    $rs = update_user($txp_user, $new_email);\n\n    if ($rs) {\n        author_list(gTxt('email_changed', array('{email}' => $new_email)));\n\n        return;\n    }\n\n    author_list(array(gTxt('author_save_failed'), E_ERROR));\n}\n\n/**\n * Updates a user.\n */\n\nfunction author_save()\n{\n    global $txp_user;\n\n    require_privs('admin.edit');\n\n    extract(psa(array(\n        'privs',\n        'name',\n        'RealName',\n        'email',\n    )));\n\n    $privs = assert_int($privs);\n\n    if (!is_valid_email($email)) {\n        author_list(array(gTxt('email_required'), E_ERROR));\n\n        return;\n    }\n\n    $rs = update_user($name, $email, $RealName);\n\n    if ($rs && ($txp_user === $name || change_user_group($name, $privs))) {\n        author_list(gTxt('author_updated', array('{name}' => $RealName)));\n\n        return;\n    }\n\n    author_list(array(gTxt('author_save_failed'), E_ERROR));\n}\n\n/**\n * Changes current user's password.\n */\n\nfunction change_pass()\n{\n    global $txp_user;\n\n    extract(psa(array('new_pass', 'mail_password')));\n\n    if (empty($new_pass)) {\n        author_list(array(gTxt('password_required'), E_ERROR));\n\n        return;\n    }\n\n    $rs = change_user_password($txp_user, $new_pass);\n\n    if ($rs) {\n        $message = gTxt('password_changed');\n\n        if ($mail_password) {\n            $email = fetch('email', 'txp_users', 'name', $txp_user);\n\n            send_new_password($new_pass, $email, $txp_user);\n\n            $message .= sp.gTxt('and_mailed_to').sp.$email;\n        }\n\n        $message .= '.';\n\n        author_list($message);\n    }\n}\n\n/**\n * Creates a new user.\n */\n\nfunction author_save_new()\n{\n    require_privs('admin.edit');\n\n    extract(psa(array(\n        'privs',\n        'name',\n        'email',\n        'RealName',\n    )));\n\n    $privs = assert_int($privs);\n\n    if (is_valid_username($name) && is_valid_email($email)) {\n        if (user_exists($name)) {\n            author_list(array(gTxt('author_already_exists', array('{name}' => $name)), E_ERROR));\n\n            return;\n        }\n\n        $password = generate_password(PASSWORD_LENGTH);\n\n        $rs = create_user($name, $email, $password, $RealName, $privs);\n\n        if ($rs) {\n            send_password($RealName, $name, $email, $password);\n\n            author_list(\n                gTxt('password_sent_to').sp.$email\n            );\n\n            return;\n        }\n    }\n\n    author_list(array(gTxt('error_adding_new_author'), E_ERROR));\n}\n\n/**\n * Lists user groups as a &lt;select&gt; input.\n *\n * @param  int $priv Selected option\n * @return string HTML\n */\n\nfunction privs($priv = '')\n{\n    global $levels;\n\n    return selectInput('privs', $levels, $priv, '', '', 'privileges');\n}\n\n/**\n * Translates a numeric ID to a human-readable user group.\n *\n * @param  int $priv The group\n * @return string\n */\n\nfunction get_priv_level($priv)\n{\n    global $levels;\n\n    return $levels[$priv];\n}\n\n/**\n * Password changing form.\n */\n\nfunction new_pass_form()\n{\n    pagetop(gTxt('tab_site_admin'), '');\n\n    echo form(\n        hed(gTxt('change_password'), 2).\n        inputLabel(\n            'new_pass',\n            fInput('password', 'new_pass', '', '', '', '', INPUT_REGULAR, '', 'new_pass'),\n            'new_password', '', array('class' => 'txp-form-field edit-admin-new-password')\n        ).\n        graf(\n            checkbox('mail_password', '1', true, '', 'mail_password').\n            n.tag(gTxt('mail_it'), 'label', array('for' => 'mail_password')), array('class' => 'edit-admin-mail-password')).\n        graf(fInput('submit', 'change_pass', gTxt('submit'), 'publish')).\n        eInput('admin').\n        sInput('change_pass'),\n    '', '', 'post', 'txp-edit', '', 'change_password');\n}\n\n/**\n * Email changing form.\n */\n\nfunction change_email_form()\n{\n    global $txp_user;\n\n    pagetop(gTxt('tab_site_admin'), '');\n\n    $email = fetch('email', 'txp_users', 'name', $txp_user);\n\n    echo form(\n        hed(gTxt('change_email_address'), 2).\n        inputLabel(\n            'new_email',\n            fInput('text', 'new_email', $email, '', '', '', INPUT_REGULAR, '', 'new_email'),\n            'new_email', '', array('class' => 'txp-form-field edit-admin-new-email')\n        ).\n        graf(fInput('submit', 'change_email', gTxt('submit'), 'publish')).\n        eInput('admin').\n        sInput('change_email'),\n    '', '', 'post', 'txp-edit', '', 'change_email');\n}\n\n/**\n * The main panel listing all authors.\n *\n * @param string|array $message The activity message\n */\n\nfunction author_list($message = '')\n{\n    global $event, $txp_user, $author_list_pageby, $levels;\n\n    pagetop(gTxt('tab_site_admin'), $message);\n\n    echo n.tag(\n        hed(gTxt('tab_site_admin'), 1, array('class' => 'txp-heading')),\n        'div', array('class' => 'txp-layout-2col-cell-1'));\n\n    if (is_disabled('mail')) {\n        echo graf(\n            span(null, array('class' => 'ui-icon ui-icon-alert')).' '.\n            gTxt('warn_mail_unavailable'),\n            array('class' => 'alert-block warning')\n        );\n    }\n\n    $buttons = array();\n\n    // Change password button.\n    $buttons[] = sLink('admin', 'new_pass_form', gTxt('change_password'), 'txp-button');\n\n    if (!has_privs('admin.edit')) {\n        // Change email address button.\n        $buttons[] = sLink('admin', 'change_email_form', gTxt('change_email_address'), 'txp-button');\n    } else {\n        // New author button.\n        $buttons[] = sLink('admin', 'author_edit', gTxt('add_new_author'), 'txp-button');\n    }\n\n    // User list.\n    if (has_privs('admin.list')) {\n        extract(gpsa(array(\n            'page',\n            'sort',\n            'dir',\n            'crit',\n            'search_method',\n        )));\n\n        if ($sort === '') {\n            $sort = get_pref('admin_sort_column', 'name');\n        } else {\n            if (!in_array($sort, array('name', 'RealName', 'email', 'privs', 'last_login'))) {\n                $sort = 'name';\n            }\n\n            set_pref('admin_sort_column', $sort, 'admin', 2, '', 0, PREF_PRIVATE);\n        }\n\n        if ($dir === '') {\n            $dir = get_pref('admin_sort_dir', 'asc');\n        } else {\n            $dir = ($dir == 'desc') ? \"desc\" : \"asc\";\n            set_pref('admin_sort_dir', $dir, 'admin', 2, '', 0, PREF_PRIVATE);\n        }\n\n        $sort_sql = $sort.' '.$dir;\n\n        $switch_dir = ($dir == 'desc') ? 'asc' : 'desc';\n\n        $search = new Filter($event,\n            array(\n                'id' => array(\n                    'column' => 'txp_users.user_id',\n                    'label'  => gTxt('ID'),\n                    'type'   => 'integer',\n                ),\n                'login' => array(\n                    'column' => 'txp_users.name',\n                    'label'  => gTxt('name'),\n                ),\n                'RealName' => array(\n                    'column' => 'txp_users.RealName',\n                    'label'  => gTxt('RealName'),\n                ),\n                'email' => array(\n                    'column' => 'txp_users.email',\n                    'label'  => gTxt('email'),\n                ),\n                'privs' => array(\n                    'column' => array('txp_users.privs'),\n                    'label'  => gTxt('privileges'),\n                    'type'   => 'boolean',\n                ),\n            )\n        );\n\n        $search->setAliases('privs', $levels);\n\n        list($criteria, $crit, $search_method) = $search->getFilter(array(\n                'id' => array('can_list' => true),\n            ));\n\n        $search_render_options = array(\n            'placeholder' => 'search_users',\n        );\n\n        $total = getCount('txp_users', $criteria);\n\n        echo n.tag_start('div', array(\n            'class' => 'txp-layout-2col-cell-2',\n            'id'    => 'users_control',\n        ));\n\n        if ($total < 1) {\n            if ($criteria != 1) {\n                echo $search->renderForm('author_list', $search_render_options).\n                    graf(\n                    span(null, array('class' => 'ui-icon ui-icon-info')).' '.\n                    gTxt('no_results_found'), array('class' => 'alert-block information')\n                ).n.tag_end('div');\n            }\n\n            return;\n        }\n\n        $limit = max($author_list_pageby, 15);\n\n        list($page, $offset, $numPages) = pager($total, $limit, $page);\n\n        $use_multi_edit = (has_privs('admin.edit') && ($total > 1 or safe_count('txp_users', \"1 = 1\") > 1));\n\n        echo $search->renderForm('author_list', $search_render_options).'</div>';\n\n        echo\n            n.tag_start('div', array(\n                'class' => 'txp-layout-1col',\n                'id'    => 'users_container',)).\n             n.tag(join(n, $buttons), 'div', array('class' => 'txp-control-panel'));\n\n        $rs = safe_rows_start(\n            \"*, UNIX_TIMESTAMP(last_access) AS last_login\",\n            'txp_users',\n            \"$criteria ORDER BY $sort_sql LIMIT $offset, $limit\"\n        );\n\n        if ($rs) {\n            echo\n                n.tag_start('form', array(\n                    'class'  => 'multi_edit_form',\n                    'id'     => 'users_form',\n                    'name'   => 'longform',\n                    'method' => 'post',\n                    'action' => 'index.php',\n                )).\n                n.tag_start('div', array('class' => 'txp-listtables')).\n                n.tag_start('table', array('class' => 'txp-list')).\n                n.tag_start('thead').\n                tr(\n                    (\n                        ($use_multi_edit)\n                        ? hCell(\n                            fInput('checkbox', 'select_all', 0, '', '', '', '', '', 'select_all'),\n                                '', ' class=\"txp-list-col-multi-edit\" scope=\"col\" title=\"'.gTxt('toggle_all_selected').'\"'\n                        )\n                        : hCell('', '', ' class=\"txp-list-col-multi-edit\" scope=\"col\"')\n                    ).\n                    column_head(\n                        'login_name', 'name', 'admin', true, $switch_dir, '', '',\n                            (('name' == $sort) ? \"$dir \" : '').'txp-list-col-login-name name'\n                    ).\n                    column_head(\n                        'real_name', 'RealName', 'admin', true, $switch_dir, '', '',\n                            (('RealName' == $sort) ? \"$dir \" : '').'txp-list-col-real-name name'\n                    ).\n                    column_head(\n                        'email', 'email', 'admin', true, $switch_dir, '', '',\n                            (('email' == $sort) ? \"$dir \" : '').'txp-list-col-email'\n                    ).\n                    column_head(\n                        'privileges', 'privs', 'admin', true, $switch_dir, '', '',\n                            (('privs' == $sort) ? \"$dir \" : '').'txp-list-col-privs'\n                    ).\n                    column_head(\n                        'last_login', 'last_login', 'admin', true, $switch_dir, '', '',\n                            (('last_login' == $sort) ? \"$dir \" : '').'txp-list-col-last-login date'\n                    )\n                ).\n                n.tag_end('thead').\n                n.tag_start('tbody');\n\n            while ($a = nextRow($rs)) {\n                extract(doSpecial($a));\n\n                echo tr(\n                    td(\n                        ((has_privs('admin.edit') and $txp_user != $a['name']) ? fInput('checkbox', 'selected[]', $a['name'], 'checkbox') : ''), '', 'txp-list-col-multi-edit'\n                    ).\n                    hCell(\n                        ((has_privs('admin.edit')) ? eLink('admin', 'author_edit', 'user_id', $user_id, $name) : $name), '', ' class=\"txp-list-col-login-name name\" scope=\"row\"'\n                    ).\n                    td(\n                        $RealName, '', 'txp-list-col-real-name name'\n                    ).\n                    td(\n                        href($email, 'mailto:'.$email), '', 'txp-list-col-email'\n                    ).\n                    td(\n                        get_priv_level($privs), '', 'txp-list-col-privs'\n                    ).\n                    td(\n                        ($last_login ? safe_strftime('%b&#160;%Y', $last_login) : ''), '', 'txp-list-col-last-login date'\n                    )\n                );\n            }\n\n            echo\n                n.tag_end('tbody').\n                n.tag_end('table').\n                n.tag_end('div').\n                (\n                    ($use_multi_edit)\n                    ? author_multiedit_form($page, $sort, $dir, $crit, $search_method)\n                    : ''\n                ).\n                tInput().\n                n.tag_end('form').\n                n.tag_start('div', array(\n                    'class' => 'txp-navigation',\n                    'id'    => 'users_navigation',\n                )).\n                pageby_form('admin', $author_list_pageby).\n                nav_form('admin', $page, $numPages, $sort, $dir, $crit, $search_method).\n                n.tag_end('div');\n        }\n\n        echo n.tag_end('div');\n    } else {\n        echo\n            n.tag_start('div', array(\n                'class' => 'txp-layout-1col',\n                'id'    => 'users_container',)).\n            n.tag(join(n, $buttons), 'div', array('class' => 'txp-control-panel')).\n            n.tag_end('div');\n    }\n}\n\n/**\n * Renders and outputs the user editor panel.\n *\n * Accessing requires 'admin.edit' privileges.\n */\n\nfunction author_edit()\n{\n    global $step, $txp_user;\n\n    require_privs('admin.edit');\n\n    pagetop(gTxt('tab_site_admin'), '');\n\n    $vars = array('user_id', 'name', 'RealName', 'email', 'privs');\n    $rs = array();\n    $out = array();\n\n    extract(gpsa($vars));\n\n    $is_edit = ($user_id && $step == 'author_edit');\n\n    if ($is_edit) {\n        $user_id = assert_int($user_id);\n        $rs = safe_row(\"*\", 'txp_users', \"user_id = $user_id\");\n        extract($rs);\n    }\n\n    if ($is_edit) {\n        $out[] = hed(gTxt('edit_author'), 2);\n    } else {\n        $out[] = hed(gTxt('add_new_author'), 2);\n    }\n\n    if ($is_edit) {\n        $out[] = inputLabel(\n            'login_name',\n            strong(txpspecialchars($name)),\n            '', '', array('class' => 'txp-form-field edit-admin-login-name')\n        );\n    } else {\n        $out[] = inputLabel(\n            'login_name',\n            fInput('text', 'name', $name, '', '', '', INPUT_REGULAR, '', 'login_name'),\n            'login_name', 'add_new_author', array('class' => 'txp-form-field edit-admin-login-name')\n        );\n    }\n\n    $out[] = inputLabel(\n            'real_name',\n            fInput('text', 'RealName', $RealName, '', '', '', INPUT_REGULAR, '', 'real_name'),\n            'real_name', '', array('class' => 'txp-form-field edit-admin-name')\n        ).\n        inputLabel(\n            'login_email',\n            fInput('email', 'email', $email, '', '', '', INPUT_REGULAR, '', 'login_email'),\n            'email', '', array('class' => 'txp-form-field edit-admin-email')\n        );\n\n    if ($txp_user != $name) {\n        $out[] = inputLabel(\n            'privileges',\n            privs($privs),\n            'privileges', 'about_privileges', array('class' => 'txp-form-field edit-admin-privileges')\n        );\n    } else {\n        $out[] = inputLabel(\n            'privileges',\n            strong(get_priv_level($privs)),\n            '', '', array('class' => 'txp-form-field edit-admin-privileges')\n        ).\n        hInput('privs', $privs);\n    }\n\n    $out[] = pluggable_ui('author_ui', 'extend_detail_form', '', $rs).\n        graf(fInput('submit', '', gTxt('save'), 'publish')).\n        eInput('admin');\n\n    if ($user_id) {\n        $out[] = hInput('user_id', $user_id).\n            hInput('name', $name).\n            sInput('author_save');\n    } else {\n        $out[] = sInput('author_save_new');\n    }\n\n    echo form(join('', $out), '', '', 'post', 'txp-edit', '', 'user_edit');\n}\n\n/**\n * Updates pageby value.\n */\n\nfunction admin_change_pageby()\n{\n    event_change_pageby('author');\n    author_list();\n}\n\n/**\n * Renders multi-edit form.\n *\n * @param  int    $page          The page\n * @param  string $sort          The sorting value\n * @param  string $dir           The sorting direction\n * @param  string $crit          The search string\n * @param  string $search_method The search method\n * @return string HTML\n */\n\nfunction author_multiedit_form($page, $sort, $dir, $crit, $search_method)\n{\n    $privileges = privs();\n    $users = safe_column(\"name\", 'txp_users', \"1 = 1\");\n\n    $methods = array(\n        'changeprivilege' => array('label' => gTxt('changeprivilege'), 'html' => $privileges),\n        'resetpassword'   => gTxt('resetpassword'),\n    );\n\n    if (count($users) > 1) {\n        $methods['delete'] = array(\n            'label' => gTxt('delete'),\n            'html'  => tag(gTxt('assign_assets_to'), 'label', array('for' => 'assign_assets')).\n                selectInput('assign_assets', $users, '', true, '', 'assign_assets'),\n        );\n    }\n\n    return multi_edit($methods, 'admin', 'admin_multi_edit', $page, $sort, $dir, $crit, $search_method);\n}\n\n/**\n * Processes multi-edit actions.\n *\n * Accessing requires 'admin.edit' privileges.\n */\n\nfunction admin_multi_edit()\n{\n    global $txp_user;\n\n    require_privs('admin.edit');\n\n    $selected = ps('selected');\n    $method = ps('edit_method');\n    $changed = array();\n    $msg = '';\n\n    if (!$selected or !is_array($selected)) {\n        return author_list();\n    }\n\n    $names = safe_column(\n        \"name\",\n        'txp_users',\n        \"name IN (\".join(',', quote_list($selected)).\") AND name != '\".doSlash($txp_user).\"'\"\n    );\n\n    if (!$names) {\n        return author_list();\n    }\n\n    switch ($method) {\n        case 'delete':\n\n            $assign_assets = ps('assign_assets');\n\n            if (!$assign_assets) {\n                $msg = array('must_reassign_assets', E_ERROR);\n            } elseif (in_array($assign_assets, $names)) {\n                $msg = array('cannot_assign_assets_to_deletee', E_ERROR);\n            } elseif (remove_user($names, $assign_assets)) {\n                $changed = $names;\n                callback_event('authors_deleted', '', 0, $changed);\n                $msg = 'author_deleted';\n            }\n\n            break;\n\n        case 'changeprivilege':\n\n            if (change_user_group($names, ps('privs'))) {\n                $changed = $names;\n                $msg = 'author_updated';\n            }\n\n            break;\n\n        case 'resetpassword':\n\n            foreach ($names as $name) {\n                $passwd = generate_password(PASSWORD_LENGTH);\n\n                if (change_user_password($name, $passwd)) {\n                    $email = safe_field(\"email\", 'txp_users', \"name = '\".doSlash($name).\"'\");\n\n                    if (send_new_password($passwd, $email, $name)) {\n                        $changed[] = $name;\n                        $msg = 'author_updated';\n                    } else {\n                        return author_list(array(gTxt('could_not_mail').' '.txpspecialchars($name), E_ERROR));\n                    }\n                }\n            }\n\n            break;\n    }\n\n    if ($changed) {\n        return author_list(gTxt($msg, array('{name}' => txpspecialchars(join(', ', $changed)))));\n    }\n\n    author_list($msg);\n}\n\n/**\n * Legacy panel.\n *\n * @param      string|array $message\n * @deprecated in 4.2.0\n */\n\nfunction admin($message = '')\n{\n    author_list($message);\n}\n", "<?php\n\n/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2005 Dean Allen\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Login panel.\n *\n * @package Admin\\Auth\n */\n\nif (!defined('txpinterface')) {\n    die('txpinterface is undefined.');\n}\n\n/**\n * Renders a login panel if necessary.\n *\n * If the current visitor isn't authenticated,\n * terminates the script and instead renders\n * a login page.\n *\n * @access private\n */\n\nfunction doAuth()\n{\n    global $txp_user;\n\n    $txp_user = null;\n\n    $message = doTxpValidate();\n\n    if (!$txp_user) {\n        doLoginForm($message);\n    }\n\n    ob_start();\n}\n\n/**\n * Renders and outputs a login form.\n *\n * This function outputs a full HTML document,\n * including &lt;head&gt; and footer.\n *\n * @param string|array $message The activity message\n */\n\nfunction doLoginForm($message)\n{\n    global $textarray_script, $event, $step;\n\n    include txpath.'/lib/txplib_head.php';\n    $event = 'login';\n\n    if (gps('logout')) {\n        $step = 'logout';\n    } elseif (gps('reset')) {\n        $step = 'reset';\n    }\n\n    pagetop(gTxt('login'), $message);\n\n    $stay = (cs('txp_login') and !gps('logout') ? 1 : 0);\n    $reset = gps('reset');\n\n    $name = join(',', array_slice(explode(',', cs('txp_login')), 0, -1));\n    $out = array();\n\n    if ($reset) {\n        $out[] = hed(gTxt('password_reset'), 1, array('id' => 'txp-login-heading')).\n            n.tag(\n                n.tag(gTxt('name'), 'label', array('for' => 'login_name')).\n                fInput('text', 'p_userid', $name, '', '', '', INPUT_REGULAR, '', 'login_name'),\n                'div', array('class' => 'txp-form-field login-name')).\n            graf(\n                fInput('submit', '', gTxt('password_reset_button'), 'publish')).\n            graf(\n                href(gTxt('back_to_login'), 'index.php'), array('class' => 'login-return')).\n            hInput('p_reset', 1);\n    } else {\n        $out[] = hed(gTxt('login_to_textpattern'), 1, array('id' => 'txp-login-heading')).\n            n.tag(\n                n.tag(gTxt('name'), 'label', array('for' => 'login_name')).\n                fInput('text', 'p_userid', $name, '', '', '', INPUT_REGULAR, '', 'login_name'),\n                'div', array('class' => 'txp-form-field login-name')).\n            n.tag(\n                n.tag(gTxt('password'), 'label', array('for' => 'login_password')).\n                fInput('password', 'p_password', '', '', '', '', INPUT_REGULAR, '', 'login_password'),\n                'div', array('class' => 'txp-form-field login-password')).\n            graf(\n                checkbox('stay', 1, $stay, '', 'login_stay').n.\n                tag(gTxt('stay_logged_in'), 'label', array('for' => 'login_stay')).\n                popHelp('remember_login').n, array('class' => 'login-stay')).\n\n            graf(\n                fInput('submit', '', gTxt('log_in_button'), 'publish').n\n            ).\n            graf(\n                href(gTxt('password_forgotten'), '?reset=1'), array('class' => 'login-forgot'));\n\n        if (gps('event')) {\n            $out[] = eInput(gps('event'));\n        }\n    }\n\n    echo form(\n        join('', $out), '', '', 'post', 'txp-login', '', 'login_form').\n\n    script_js('textpattern.textarray = '.json_encode($textarray_script)).\n    n.'</main><!-- /txp-body -->'.n.'</body>'.n.'</html>';\n\n    exit(0);\n}\n\n/**\n * Validates the sent login form and creates a session.\n *\n * @return string A localised feedback message\n * @see    doLoginForm()\n */\n\nfunction doTxpValidate()\n{\n    global $logout, $txp_user;\n    $p_userid   = ps('p_userid');\n    $p_password = ps('p_password');\n    $p_reset    = ps('p_reset');\n    $stay       = ps('stay');\n    $logout     = gps('logout');\n    $message    = '';\n    $pub_path   = preg_replace('|//$|', '/', rhu.'/');\n\n    if (cs('txp_login') and strpos(cs('txp_login'), ',')) {\n        $txp_login = explode(',', cs('txp_login'));\n        $c_hash = end($txp_login);\n        $c_userid = join(',', array_slice($txp_login, 0, -1));\n    } else {\n        $c_hash   = '';\n        $c_userid = '';\n    }\n\n    if ($logout) {\n        setcookie('txp_login', '', time() - 3600);\n        setcookie('txp_login_public', '', time() - 3600, $pub_path);\n    }\n\n    if ($c_userid and strlen($c_hash) == 32) { // Cookie exists.\n        $r = safe_row(\n            \"name, nonce\",\n            'txp_users',\n            \"name = '\".doSlash($c_userid).\"' AND last_access > DATE_SUB(NOW(), INTERVAL 30 DAY)\"\n        );\n\n        if ($r && $r['nonce'] && $r['nonce'] === md5($c_userid.pack('H*', $c_hash))) {\n            // Cookie is good.\n            if ($logout) {\n                // Destroy nonce.\n                safe_update(\n                    'txp_users',\n                    \"nonce = '\".doSlash(md5(uniqid(mt_rand(), true))).\"'\",\n                    \"name = '\".doSlash($c_userid).\"'\"\n                );\n            } else {\n                // Create $txp_user.\n                $txp_user = $r['name'];\n            }\n\n            return $message;\n        } else {\n            txp_status_header('401 Your session has expired');\n            setcookie('txp_login', $c_userid, time() + 3600 * 24 * 365);\n            setcookie('txp_login_public', '', time() - 3600, $pub_path);\n            $message = array(gTxt('bad_cookie'), E_ERROR);\n        }\n    } elseif ($p_userid and $p_password) { // Incoming login vars.\n        $name = txp_validate($p_userid, $p_password);\n\n        if ($name !== false) {\n            $c_hash = md5(uniqid(mt_rand(), true));\n            $nonce  = md5($name.pack('H*', $c_hash));\n\n            safe_update(\n                'txp_users',\n                \"nonce = '\".doSlash($nonce).\"'\",\n                \"name = '\".doSlash($name).\"'\"\n            );\n\n            setcookie(\n                'txp_login',\n                $name.','.$c_hash,\n                ($stay ? time() + 3600 * 24 * 365 : 0),\n                null,\n                null,\n                null,\n                LOGIN_COOKIE_HTTP_ONLY\n            );\n\n            setcookie(\n                'txp_login_public',\n                substr(md5($nonce), - 10).$name,\n                ($stay ? time() + 3600 * 24 * 30 : 0),\n                $pub_path\n            );\n\n            // Login is good, create $txp_user.\n            $txp_user = $name;\n\n            return '';\n        } else {\n            sleep(3);\n            txp_status_header('401 Could not log in with that username/password');\n            $message = array(gTxt('could_not_log_in'), E_ERROR);\n        }\n    } elseif ($p_reset) { // Reset request.\n        sleep(3);\n\n        include_once txpath.'/lib/txplib_admin.php';\n\n        $message = ($p_userid) ? send_reset_confirmation_request($p_userid) : '';\n    } elseif (gps('reset')) {\n        $message = '';\n    } elseif (gps('confirm')) {\n        sleep(3);\n\n        $confirm = pack('H*', gps('confirm'));\n        $name    = substr($confirm, 5);\n        $nonce   = safe_field(\"nonce\", 'txp_users', \"name = '\".doSlash($name).\"'\");\n\n        if ($nonce and $confirm === pack('H*', substr(md5($nonce), 0, 10)).$name) {\n            include_once txpath.'/lib/txplib_admin.php';\n\n            $message = reset_author_pass($name);\n        }\n    }\n\n    $txp_user = '';\n\n    return $message;\n}\n", "<?php\n\n/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Constants.\n */\n\nif (!defined('TXP_DEBUG')) {\n    /**\n     * If set to \"1\", dumps debug log to the temp directory.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package Debug\n     * @example\n     * define('TXP_DEBUG', 1);\n     */\n\n    define('TXP_DEBUG', 0);\n}\n\n/**\n * Trace log constants.\n *\n * @since   4.6.0\n * @package Debug\n * @see     trace_log()\n */\n\ndefine('TEXTPATTERN_TRACE_START',   0x1);\ndefine('TEXTPATTERN_TRACE_DISPLAY', 0x2);\ndefine('TEXTPATTERN_TRACE_RESULT',  0x4);\ndefine('TEXTPATTERN_TRACE_QUIET',   0x8);\n\n\n/**\n * Comment spam status.\n *\n * @package Comment\n */\n\ndefine('SPAM', -1);\n\n/**\n * Comment moderate status.\n *\n * @package Comment\n */\n\ndefine('MODERATE', 0);\n\n/**\n * Comment spam status.\n *\n * @package Comment\n */\n\ndefine('VISIBLE', 1);\n\n/**\n * Comment reload status.\n *\n * @package Comment\n */\n\ndefine('RELOAD', -99);\n\nif (!defined('RPC_SERVER')) {\n    /**\n     * RPC server location.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @example\n     * define('RPC_SERVER', 'http://rpc.example.com');\n     */\n\n    define('RPC_SERVER', 'http://rpc.textpattern.com');\n}\n\nif (!defined('HELP_URL')) {\n    /**\n     * The location where help documentation is fetched.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @example\n     * define('HELP_URL', 'http://rpc.example.com/help/');\n     */\n\n    define('HELP_URL', 'http://rpc.textpattern.com/help/');\n}\n\n/**\n * Do not format text.\n *\n * @var     string\n * @package Textfilter\n */\n\ndefine('LEAVE_TEXT_UNTOUCHED', '0');\n\n/**\n * Format text with Textile.\n *\n * @var     string\n * @package Textfilter\n */\n\ndefine('USE_TEXTILE', '1');\n\n/**\n * Replace line breaks with HTML &lt;br /&gt; tag.\n *\n * @var     string\n * @package Textfilter\n */\n\ndefine('CONVERT_LINEBREAKS', '2');\n\n/**\n * System is Windows if TRUE.\n *\n * @package System\n */\n\ndefine('IS_WIN', strpos(strtoupper(PHP_OS), 'WIN') === 0);\n\n/**\n * Directory separator character.\n *\n * @package File\n */\n\ndefine('DS', defined('DIRECTORY_SEPARATOR') ? DIRECTORY_SEPARATOR : (IS_WIN ? '\\\\' : '/'));\n\n/**\n * Magic quotes GPC, TRUE if on.\n *\n * @package Network\n */\n\ndefine('MAGIC_QUOTES_GPC', get_magic_quotes_gpc());\n\nif (!defined('REGEXP_UTF8')) {\n    /**\n     * TRUE if the system supports UTF-8 regex patterns.\n     *\n     * This constant can be overridden from the config.php in case UTF-8 regex\n     * patterns cause issues.\n     *\n     * @package System\n     * @example\n     * define('REGEXP_UTF8', false);\n     */\n\n    define('REGEXP_UTF8', @preg_match('@\\pL@u', 'q'));\n}\n\n/**\n * NULL datetime for use in an SQL statement.\n *\n * @package DB\n */\n\ndefine('NULLDATETIME', '\\'0000-00-00 00:00:00\\'');\n\n/**\n * Permlink URL mode.\n *\n * @package    URL\n * @deprecated ?\n */\n\ndefine('PERMLINKURL', 0);\n\n/**\n * Pagelink URL mode.\n *\n * @package    URL\n * @deprecated ?\n */\n\ndefine('PAGELINKURL', 1);\n\nif (!defined('EXTRA_MEMORY')) {\n    /**\n     * Allocated extra memory.\n     *\n     * Used when creating thumbnails for instance.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package System\n     * @example\n     * define('EXTRA_MEMORY', '64M');\n     */\n\n    define('EXTRA_MEMORY', '32M');\n}\n\n/**\n * PHP is run as CGI.\n *\n * @package System\n */\n\ndefine('IS_CGI', strpos(PHP_SAPI, 'cgi') === 0);\n\n/**\n * PHP is run as FCGI.\n *\n * @package System\n */\n\ndefine('IS_FASTCGI', IS_CGI and empty($_SERVER['FCGI_ROLE']) and empty($_ENV['FCGI_ROLE']));\n\n/**\n * PHP is run as Apache module.\n *\n * @package System\n */\n\ndefine('IS_APACHE', !IS_CGI and strpos(PHP_SAPI, 'apache') === 0);\n\n/**\n * Preference is user-private.\n *\n * @package Pref\n * @see     set_pref()\n */\n\ndefine('PREF_PRIVATE', true);\n\n/**\n * Preference is global.\n *\n * @package Pref\n * @see     set_pref()\n */\n\ndefine('PREF_GLOBAL', false);\n\n/**\n * Preference type is basic.\n *\n * @package    Pref\n * @deprecated in 4.6.0\n * @see        PREF_CORE\n * @see        set_pref()\n */\n\ndefine('PREF_BASIC', 0);\n\n/**\n * Preference type is a core setting.\n *\n * @package Pref\n * @see     set_pref()\n */\n\ndefine('PREF_CORE', 0);\n\n/**\n * Preference type is advanced.\n *\n * @package    Pref\n * @deprecated in 4.6.0\n * @see        PREF_CORE\n * @see        PREF_PLUGIN\n * @see        set_pref()\n */\n\ndefine('PREF_ADVANCED', 1);\n\n/**\n * Preference type is a plugin or third party setting.\n *\n * @package Pref\n * @see     set_pref()\n */\n\ndefine('PREF_PLUGIN', 1);\n\n/**\n * Preference type is hidden.\n *\n * @package Pref\n * @see     set_pref()\n */\n\ndefine('PREF_HIDDEN', 2);\n\n/**\n * Plugin flag: has an options page.\n */\n\ndefine('PLUGIN_HAS_PREFS', 0x0001);\n\n/**\n * Plugin flag: offers lifecycle callbacks.\n */\n\ndefine('PLUGIN_LIFECYCLE_NOTIFY', 0x0002);\n\n/**\n * Reserved bits for use by Textpattern core.\n */\n\ndefine('PLUGIN_RESERVED_FLAGS', 0x0fff);\n\nif (!defined('LOG_REFERER_PROTOCOLS')) {\n    /**\n     * Sets accepted protocols for HTTP referrer header.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package Log\n     * @since   4.6.0\n     * @example\n     * define('LOG_REFERER_PROTOCOLS', 'http');\n     */\n\n    define('LOG_REFERER_PROTOCOLS', 'http, https');\n}\n\nif (!defined('PASSWORD_LENGTH')) {\n    /**\n     * Password default length, in characters.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package User\n     * @example\n     * define('PASSWORD_LENGTH', 14);\n     */\n\n    define('PASSWORD_LENGTH', 10);\n}\n\nif (!defined('PASSWORD_COMPLEXITY')) {\n    /**\n     * Password iteration strength count.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package User\n     * @example\n     * define('PASSWORD_COMPLEXITY', 2);\n     */\n\n    define('PASSWORD_COMPLEXITY', 8);\n}\n\nif (!defined('PASSWORD_PORTABILITY')) {\n    /**\n     * Passwords are created portable if TRUE.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package User\n     * @example\n     * define('PASSWORD_PORTABILITY', false);\n     */\n\n    define('PASSWORD_PORTABILITY', true);\n}\n\nif (!defined('PASSWORD_SYMBOLS')) {\n    /**\n     * Symbols used in auto-generated passwords.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package User\n     * @since   4.6.0\n     * @see     generate_password()\n     * @example\n     * define('PASSWORD_SYMBOLS', '23456789ABCDEFGHJKLMNPQRSTUYXZabcdefghijkmnopqrstuvwxyz_?!-');\n     */\n\n    define('PASSWORD_SYMBOLS', '23456789abcdefghijkmnopqrstuvwxyz');\n}\n\nif (!defined('LOGIN_COOKIE_HTTP_ONLY')) {\n    /**\n     * If TRUE, login cookie is set just for HTTP.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package CSRF\n     * @example\n     * define('LOGIN_COOKIE_HTTP_ONLY', false);\n     */\n\n    define('LOGIN_COOKIE_HTTP_ONLY', true);\n}\n\nif (!defined('X_FRAME_OPTIONS')) {\n    /**\n     * Sets X-Frame-Options HTTP header's value.\n     *\n     * This is used to prevent framing of authenticated pages.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package CSRF\n     * @example\n     * define('X_FRAME_OPTIONS', 'DENY');\n     */\n\n    define('X_FRAME_OPTIONS', 'SAMEORIGIN');\n}\n\nif (!defined('X_UA_COMPATIBLE')) {\n    /**\n     * Sets X-UA-Compatible HTTP header's value.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @since   4.6.0\n     * @package HTML\n     * @example\n     * define('X_UA_COMPATIBLE', 'IE=IE9');\n     */\n\n    define('X_UA_COMPATIBLE', 'IE=edge,chrome=1');\n}\n\nif (!defined('AJAX_TIMEOUT')) {\n    /**\n     * AJAX timeout in seconds.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package Ajax\n     * @example\n     * define('AJAX_TIMEOUT', 10);\n     */\n\n    define('AJAX_TIMEOUT', max(30000, 1000 * @ini_get('max_execution_time')));\n}\n\n/**\n * Render on initial synchronous page load.\n *\n * @since   4.5.0\n * @package Ajax\n */\n\ndefine('PARTIAL_STATIC', 0);\n\n/**\n * Render as HTML partial on every page load.\n *\n * @since   4.5.0\n * @package Ajax\n */\n\ndefine('PARTIAL_VOLATILE', 1);\n\n/**\n * Render as an element's jQuery.val() on every page load.\n *\n * @since   4.5.0\n * @package Ajax\n */\n\ndefine('PARTIAL_VOLATILE_VALUE', 2);\n\n/**\n * Draft article status ID.\n *\n * @package Article\n */\n\ndefine('STATUS_DRAFT', 1);\n\n/**\n * Hidden article status ID.\n *\n * @package Article\n */\n\ndefine('STATUS_HIDDEN', 2);\n\n/**\n * Pending article status ID.\n *\n * @package Article\n */\n\ndefine('STATUS_PENDING', 3);\n\n/**\n * Live article status ID.\n *\n * @package Article\n */\n\ndefine('STATUS_LIVE', 4);\n\n/**\n * Sticky article status ID.\n *\n * @package Article\n */\n\ndefine('STATUS_STICKY', 5);\n\nif (!defined('WRITE_RECENT_ARTICLES_COUNT')) {\n    /**\n     * Number of recent articles displayed on the Write panel.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package Admin\\Article\n     * @since   4.6.0\n     * @example\n     * define('WRITE_RECENT_ARTICLES_COUNT', 5);\n     */\n\n    define('WRITE_RECENT_ARTICLES_COUNT', 10);\n}\n\n/**\n * Input size extra large.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_XLARGE', 96);\n\n/**\n * Input size large.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_LARGE', 64);\n\n/**\n * Input size regular.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_REGULAR', 32);\n\n/**\n * Input size medium.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_MEDIUM', 16);\n\n/**\n * Input size small.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_SMALL', 8);\n\n/**\n * Input size extra small.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_XSMALL', 4);\n\n/**\n * Input size tiny.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_TINY', 2);\n\n/**\n * Textarea height large.\n *\n * @since   4.6.0\n * @package Form\n */\n\ndefine('TEXTAREA_HEIGHT_LARGE', 24);\n\n/**\n * Textarea height regular.\n *\n * @since   4.6.0\n * @package Form\n */\n\ndefine('TEXTAREA_HEIGHT_REGULAR', 16);\n\n/**\n * Textarea height medium.\n *\n * @since   4.6.0\n * @package Form\n */\n\ndefine('TEXTAREA_HEIGHT_MEDIUM', 8);\n\n/**\n * Textarea height small.\n *\n * @since   4.6.0\n * @package Form\n */\n\ndefine('TEXTAREA_HEIGHT_SMALL', 4);\n\n/**\n * Required PHP version.\n *\n * @since   4.5.0\n * @package System\n */\n\ndefine('REQUIRED_PHP_VERSION', '5.3.3');\n\n/**\n * File integrity status good.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_GOOD', 1);\n\n/**\n * File integrity status modified.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_MODIFIED', 2);\n\n/**\n * File integrity not readable.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_NOT_READABLE', 3);\n\n/**\n * File integrity file missing.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_MISSING', 4);\n\n/**\n * File integrity not a file.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_NOT_FILE', 5);\n\n/**\n * Return integrity status.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_STATUS', 0x1);\n\n/**\n * Return integrity MD5 hashes.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_MD5', 0x2);\n\n/**\n * Return full paths.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_REALPATH', 0x4);\n\n/**\n * Return a digest.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_DIGEST', 0x8);\n\n/**\n * Return a parsed checksum file's contents.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_TABLE', 0x10);\n\n/**\n * Link to an external script.\n *\n * @since   4.6.0\n * @package HTML\n * @see     script_js()\n */\n\ndefine('TEXTPATTERN_SCRIPT_URL', 0x1);\n\n/**\n * Attach version number to script URL if stable.\n *\n * The install is considered as a 'stable' if the version number doesn't contain\n * a '-dev' tag.\n *\n * @since   4.6.0\n * @package HTML\n * @see     script_js()\n */\n\ndefine('TEXTPATTERN_SCRIPT_ATTACH_VERSION', 0x2);\n\n/**\n * The localised string is owned by the core system.\n *\n * The string will be updated from the remote language server.\n *\n * @since   4.6.0\n * @package L10n\n */\n\ndefine('TEXTPATTERN_LANG_OWNER_SYSTEM', '');\n\n/**\n * The localised string is owned by the individual site.\n *\n * The string will not be updated from the remote language server.\n *\n * @since   4.6.0\n * @package L10n\n */\n\ndefine('TEXTPATTERN_LANG_OWNER_SITE', 'site');\n\n/**\n * Strip empty values.\n *\n * @since   4.6.0\n * @package HTML\n * @see     join_atts(), do_list_unique()\n */\n\ndefine('TEXTPATTERN_STRIP_NONE',         0);\ndefine('TEXTPATTERN_STRIP_EMPTY',        0x1);\ndefine('TEXTPATTERN_STRIP_EMPTY_STRING', 0x2);\n\n/**\n * Sends an adaptive announcement.\n *\n * The rendered message type is based on the context mode.\n *\n * @since   4.6.0\n * @package Announce\n * @see     announce()\n */\n\ndefine('TEXTPATTERN_ANNOUNCE_ADAPTIVE', 0x1);\n\n/**\n * Sends a modal announcement.\n *\n * The announcement is instructed to be rendered as soon as possible, as a modal\n * alert window.\n *\n * @since   4.6.0\n * @package Announce\n * @see     announce()\n */\n\ndefine('TEXTPATTERN_ANNOUNCE_MODAL', 0x2);\n\n/**\n * Sends an asynchronous announcement.\n *\n * @since   4.6.0\n * @package Announce\n * @see     announce()\n */\n\ndefine('TEXTPATTERN_ANNOUNCE_ASYNC', 0x4);\n\n/**\n * Sends a synchronous announcement.\n *\n * @since   4.6.0\n * @package Announce\n * @see     announce()\n */\n\ndefine('TEXTPATTERN_ANNOUNCE_REGULAR', 0x8);\n", "<?php\n\n/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Collection of password handling functions.\n *\n * @package User\n */\n\n/**\n * Emails a new user with login details.\n *\n * This function can be only executed when the currently authenticated user\n * trying to send the email was granted 'admin.edit' privileges.\n *\n * @param  string $RealName The real name\n * @param  string $name     The login name\n * @param  string $email    The email address\n * @param  string $password The password\n * @return bool FALSE on error.\n * @see    send_new_password()\n * @example\n * if (send_password('John Doe', 'login', 'example@example.tld', 'password'))\n * {\n *     echo \"Login details sent.\";\n * }\n */\n\nfunction send_password($RealName, $name, $email, $password)\n{\n    global $sitename;\n\n    require_privs('admin.edit');\n\n    $message = gTxt('greeting').' '.$RealName.','.\n\n        n.n.gTxt('you_have_been_registered').' '.$sitename.\n\n        n.n.gTxt('your_login_is').': '.$name.\n        n.gTxt('your_password_is').': '.$password.\n\n        n.n.gTxt('log_in_at').': '.hu.'textpattern/index.php';\n\n    return txpMail($email, \"[$sitename] \".gTxt('your_login_info'), $message);\n}\n\n/**\n * Sends a new password to an existing user.\n *\n * If the $name is FALSE, the password is sent to the currently\n * authenticated user.\n *\n * @param  string $password The new password\n * @param  string $email    The email address\n * @param  string $name     The login name\n * @return bool FALSE on error.\n * @see    send_password()\n * @see    reset_author_pass()\n * @example\n * $pass = generate_password();\n * if (send_new_password($pass, 'example@example.tld', 'user'))\n * {\n *     echo \"Password was sent to 'user'.\";\n * }\n */\n\nfunction send_new_password($password, $email, $name)\n{\n    global $txp_user, $sitename;\n\n    if (empty($name)) {\n        $name = $txp_user;\n    }\n\n    $message = gTxt('greeting').' '.$name.','.\n\n        n.n.gTxt('your_password_is').': '.$password.\n\n        n.n.gTxt('log_in_at').': '.hu.'textpattern/index.php';\n\n    return txpMail($email, \"[$sitename] \".gTxt('your_new_password'), $message);\n}\n\n/**\n * Sends a password reset link to a user's email address.\n *\n * This function will return a success message even when the specified user\n * doesn't exist. Though an error message could be thrown when user isn't found,\n * this is done due to security. This prevents the function from leaking\n * existing account names.\n *\n * @param  string $name The login name\n * @return string A localized message string\n * @see    send_new_password()\n * @see    reset_author_pass()\n * @example\n * echo send_reset_confirmation_request('username');\n */\n\nfunction send_reset_confirmation_request($name)\n{\n    global $sitename;\n\n    $rs = safe_row(\"email, nonce\", 'txp_users', \"name = '\".doSlash($name).\"'\");\n\n    if ($rs) {\n        extract($rs);\n\n        $confirm = bin2hex(pack('H*', substr(md5($nonce), 0, 10)).$name);\n\n        $message = gTxt('greeting').' '.$name.','.\n\n            n.n.gTxt('password_reset_confirmation').': '.\n            n.hu.'textpattern/index.php?confirm='.$confirm;\n\n        if (txpMail($email, \"[$sitename] \".gTxt('password_reset_confirmation_request'), $message)) {\n            return gTxt('password_reset_confirmation_request_sent');\n        } else {\n            return array(gTxt('could_not_mail'), E_ERROR);\n        }\n    } else {\n        // Though 'unknown_author' could be thrown, send generic 'request_sent'\n        // message instead so that (non-)existence of account names are not leaked.\n        return gTxt('password_reset_confirmation_request_sent');\n    }\n}\n\n/**\n * Generates a password.\n *\n * Generates a random password of given length using the symbols set in\n * PASSWORD_SYMBOLS constant.\n *\n * @param  int $length The length of the password\n * @return string Random plain-text password\n * @see    PASSWORD_SYMBOLS\n * @see    PASSWORD_LENGTH\n * @example\n * echo generate_password(128);\n */\n\nfunction generate_password($length = 10)\n{\n    static $chars;\n\n    if (!$chars) {\n        $chars = str_split(PASSWORD_SYMBOLS);\n    }\n\n    $pool = false;\n    $pass = '';\n\n    for ($i = 0; $i < $length; $i++) {\n        if (!$pool) {\n            $pool = $chars;\n        }\n\n        $index = mt_rand(0, count($pool) - 1);\n        $pass .= $pool[$index];\n        unset($pool[$index]);\n        $pool = array_values($pool);\n    }\n\n    return $pass;\n}\n\n/**\n * Resets the given user's password and emails it.\n *\n * The old password replaced with a new random-generated one.\n *\n * @param  string $name The login name\n * @return string A localized message string\n * @see    PASSWORD_LENGTH\n * @see    generate_password()\n * @example\n * echo reset_author_pass('username');\n */\n\nfunction reset_author_pass($name)\n{\n    $email = safe_field(\"email\", 'txp_users', \"name = '\".doSlash($name).\"'\");\n\n    $new_pass = generate_password(PASSWORD_LENGTH);\n    $rs = change_user_password($name, $new_pass);\n\n    if ($rs) {\n        if (send_new_password($new_pass, $email, $name)) {\n            return gTxt('password_sent_to').' '.$email;\n        } else {\n            return gTxt('could_not_mail').' '.$email;\n        }\n    } else {\n        return gTxt('could_not_update_author').' '.txpspecialchars($name);\n    }\n}\n", "/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Collection of client-side tools.\n */\n\n/**\n * Checks if HTTP cookies are enabled.\n *\n * @return {boolean}\n */\n\nfunction checkCookies()\n{\n    var date = new Date();\n\n    date.setTime(date.getTime() + (60 * 1000));\n\n    document.cookie = 'testcookie=enabled; expired=' + date.toGMTString() + '; path=/';\n\n    cookieEnabled = (document.cookie.length > 2) ? true : false;\n\n    date.setTime(date.getTime() - (60 * 1000));\n\n    document.cookie = 'testcookie=; expires=' + date.toGMTString() + '; path=/';\n\n    return cookieEnabled;\n}\n\n/**\n * Spawns a centred popup window.\n *\n * @param {string}  url     The location\n * @param {integer} width   The width\n * @param {integer} height  The height\n * @param {string}  options A list of options\n */\n\nfunction popWin(url, width, height, options)\n{\n    var w = (width) ? width : 400;\n    var h = (height) ? height : 400;\n\n    var t = (screen.height) ? (screen.height - h) / 2 : 0;\n    var l = (screen.width) ? (screen.width - w) / 2 : 0;\n\n    var opt = (options) ? options : 'toolbar = no, location = no, directories = no, ' +\n        'status = yes, menubar = no, scrollbars = yes, copyhistory = no, resizable = yes';\n\n    var popped = window.open(url, 'popupwindow',\n        'top = ' + t + ', left = ' + l + ', width = ' + w + ', height = ' + h + ',' + opt);\n\n    popped.focus();\n}\n\n/**\n * Legacy multi-edit tool.\n *\n * @param      {object} elm\n * @deprecated in 4.6.0\n */\n\nfunction poweredit(elm)\n{\n    var something = elm.options[elm.selectedIndex].value;\n\n    // Add another chunk of HTML\n    var pjs = document.getElementById('js');\n\n    if (pjs == null) {\n        var br = document.createElement('br');\n        elm.parentNode.appendChild(br);\n\n        pjs = document.createElement('P');\n        pjs.setAttribute('id', 'js');\n        elm.parentNode.appendChild(pjs);\n    }\n\n    if (pjs.style.display == 'none' || pjs.style.display == '') {\n        pjs.style.display = 'block';\n    }\n\n    if (something != '') {\n        switch (something) {\n            default:\n                pjs.style.display = 'none';\n                break;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Basic confirmation for potentially powerful choices (like deletion,\n * for example).\n *\n * @param  {string}  msg The message\n * @return {boolean} TRUE if user confirmed the action\n */\n\nfunction verify(msg)\n{\n    return confirm(msg);\n}\n\n/**\n * Selects all multi-edit checkboxes.\n *\n * @deprecated in 4.5.0\n */\n\nfunction selectall()\n{\n    $('form[name=longform] input[type=checkbox][name=\"selected[]\"]').prop('checked', true);\n}\n\n/**\n * De-selects all multi-edit checkboxes.\n *\n * @deprecated in 4.5.0\n */\n\nfunction deselectall()\n{\n    $('form[name=longform] input[type=checkbox][name=\"selected[]\"]').prop('checked', false);\n}\n\n/**\n * Selects a range of multi-edit checkboxes.\n *\n * @deprecated in 4.5.0\n */\n\nfunction selectrange()\n{\n    var inrange = false;\n\n    $('form[name=longform] input[type=checkbox][name=\"selected[]\"]').each(function ()\n    {\n        var $this = $(this);\n\n        if ($this.is(':checked')) {\n            inrange = (!inrange) ? true : false;\n        }\n\n        if (inrange) {\n            $this.prop('checked', true);\n        }\n    });\n}\n\n/**\n * ?\n *\n * @deprecated in 4.5.0\n */\n\nfunction cleanSelects()\n{\n    var withsel = document.getElementById('withselected');\n\n    if (withsel && withsel.options[withsel.selectedIndex].value != '') {\n        return (withsel.selectedIndex = 0);\n    }\n}\n\n/**\n * Multi-edit functions.\n *\n * @param  {string|object} method Called method, or options\n * @param  {object}        opt    Options if method is a method\n * @return {object}        this\n * @since  4.5.0\n */\n\njQuery.fn.txpMultiEditForm = function (method, opt)\n{\n    var args = {};\n\n    var defaults = {\n        'checkbox'      : 'input[name=\"selected[]\"][type=checkbox]',\n        'row'           : 'tbody td',\n        'highlighted'   : 'tr',\n        'selectedClass' : 'selected',\n        'actions'       : 'select[name=edit_method]',\n        'submitButton'  : '.multi-edit input[type=submit]',\n        'selectAll'     : 'input[name=select_all][type=checkbox]',\n        'rowClick'      : true,\n        'altClick'      : true,\n        'confirmation'  : textpattern.gTxt('are_you_sure')\n    };\n\n    if ($.type(method) !== 'string') {\n        opt = method;\n        method = null;\n    } else {\n        args = opt;\n    }\n\n    this.closest('form').each(function ()\n    {\n        var $this = $(this), form = {}, methods = {}, lib = {};\n\n        if ($this.data('_txpMultiEdit')) {\n            form = $this.data('_txpMultiEdit');\n            opt = $.extend(form.opt, opt);\n        } else {\n            opt = $.extend(defaults, opt);\n            form.boxes = opt.checkbox;\n            form.editMethod = $this.find(opt.actions);\n            form.lastCheck = null;\n            form.opt = opt;\n            form.selectAll = $this.find(opt.selectAll);\n            form.button = $this.find(opt.submitButton);\n        }\n\n        /**\n         * Registers a multi-edit option.\n         *\n         * @param  {object} options\n         * @param  {string} options.label The option's label\n         * @param  {string} options.value The option's value\n         * @param  {string} options.html  The second step HTML\n         * @return {object} methods\n         */\n\n        methods.addOption = function (options)\n        {\n            var settings = $.extend({\n                'label' : null,\n                'value' : null,\n                'html'  : null\n            }, options);\n\n            if (!settings.value) {\n                return methods;\n            }\n\n            var option = form.editMethod.find('option').filter(function ()\n            {\n                return $(this).val() === settings.value;\n            });\n\n            var exists = (option.length > 0);\n            form.editMethod.val('');\n\n            if (!exists) {\n                option = $('<option />');\n            }\n\n            if (!option.data('_txpMultiMethod')) {\n                if (!option.val()) {\n                    option.val(settings.value);\n                }\n\n                if (!option.text() && settings.label) {\n                    option.text(settings.label);\n                }\n\n                option.data('_txpMultiMethod', settings.html);\n            }\n\n            if (!exists) {\n                form.editMethod.append(option);\n            }\n\n            return methods;\n        };\n\n        /**\n         * Selects rows based on supplied arguments.\n         *\n         * Only one of the filters applies at a time.\n         *\n         * @param  {object}  options\n         * @param  {array}   options.index   Indexes to select\n         * @param  {array}   options.range   Select index range, takes [min, max]\n         * @param  {array}   options.value   Values to select\n         * @param  {boolean} options.checked TRUE to check, FALSE to uncheck\n         * @return {object}  methods\n         */\n\n        methods.select = function (options)\n        {\n            var settings = $.extend({\n                'index'   : null,\n                'range'   : null,\n                'value'   : null,\n                'checked' : true\n            }, options);\n\n            var obj = $this.find(form.boxes);\n\n            if (settings.value !== null) {\n                obj = obj.filter(function ()\n                {\n                    return $.inArray($(this).val(), settings.value) !== -1;\n                });\n            } else if (settings.index !== null) {\n                obj = obj.filter(function (index)\n                {\n                    return $.inArray(index, settings.index) !== -1;\n                });\n            } else if (settings.range !== null) {\n                obj = obj.slice(settings.range[0], settings.range[1]);\n            }\n\n            obj.prop('checked', settings.checked).change();\n\n            return methods;\n        };\n\n        /**\n         * Highlights selected rows.\n         *\n         * @return {object} lib\n         */\n\n        lib.highlight = function ()\n        {\n            var element = $this.find(form.boxes);\n            element.filter(':checked').closest(opt.highlighted).addClass(opt.selectedClass);\n            element.filter(':not(:checked)').closest(opt.highlighted).removeClass(opt.selectedClass);\n            return lib;\n        };\n\n        /**\n         * Extends click region to whole row.\n         *\n         * @return {object} lib\n         */\n\n        lib.extendedClick = function ()\n        {\n            if (opt.rowClick) {\n                var selector = opt.row;\n            } else {\n                var selector = form.boxes;\n            }\n\n            $this.on('click', selector, function (e)\n            {\n                var self = ($(e.target).is(form.boxes) || $(this).is(form.boxes));\n\n                if (!self && (e.target != this || $(this).is('a, :input') || $(e.target).is('a, :input'))) {\n                    return;\n                }\n\n                if (!self && opt.altClick && !e.altKey && !e.ctrlKey) {\n                    return;\n                }\n\n                var box = $(this).closest(opt.highlighted).find(form.boxes);\n\n                if (box.length < 1) {\n                    return;\n                }\n\n                var checked = box.prop('checked');\n\n                if (self) {\n                    checked = !checked;\n                }\n\n                if (e.shiftKey && form.lastCheck) {\n                    var boxes = $this.find(form.boxes);\n                    var start = boxes.index(box);\n                    var end = boxes.index(form.lastCheck);\n\n                    methods.select({\n                        'range'   : [Math.min(start, end), Math.max(start, end) + 1],\n                        'checked' : !checked\n                    });\n                } else if (!self) {\n                    box.prop('checked', !checked).change();\n                }\n\n                if (checked === false) {\n                    form.lastCheck = box;\n                } else {\n                    form.lastCheck = null;\n                }\n            });\n\n            return lib;\n        };\n\n        /**\n         * Tracks row checks.\n         *\n         * @return {object} lib\n         */\n\n        lib.checked = function ()\n        {\n            $this.on('change', form.boxes, function (e)\n            {\n                var box = $(this);\n                var boxes = $this.find(form.boxes);\n\n                if (box.prop('checked')) {\n                    $(this).closest(opt.highlighted).addClass(opt.selectedClass);\n                    $this.find(opt.selectAll).prop('checked', boxes.filter(':checked').length === boxes.length);\n                } else {\n                    $(this).closest(opt.highlighted).removeClass(opt.selectedClass);\n                    $this.find(opt.selectAll).prop('checked', false);\n                }\n            });\n\n            return lib;\n        };\n\n        /**\n         * Handles edit method selecting.\n         *\n         * @return {object} lib\n         */\n\n        lib.changeMethod = function ()\n        {\n            form.button.hide();\n\n            form.editMethod.val('').change(function (e)\n            {\n                var selected = $(this).find('option:selected');\n                $this.find('.multi-step').remove();\n\n                if (selected.length < 1 || selected.val() === '') {\n                    form.button.hide();\n                    return lib;\n                }\n\n                if (selected.data('_txpMultiMethod')) {\n                    $(this).after($('<div />').attr('class', 'multi-step multi-option').html(selected.data('_txpMultiMethod')));\n                    form.button.show();\n                } else {\n                    form.button.hide();\n                    $(this).parents('form').submit();\n                }\n            });\n\n            return lib;\n        };\n\n        /**\n         * Handles sending.\n         *\n         * @return {object} lib\n         */\n\n        lib.sendForm = function ()\n        {\n            $this.submit(function ()\n            {\n                if (opt.confirmation !== false && verify(opt.confirmation) === false) {\n                    form.editMethod.val('').change();\n\n                    return false;\n                }\n            });\n\n            return lib;\n        };\n\n        if (!$this.data('_txpMultiEdit')) {\n            lib.highlight().extendedClick().checked().changeMethod().sendForm();\n\n            (function ()\n            {\n                var multiOptions = $this.find('.multi-option:not(.multi-step)');\n\n                form.editMethod.find('option[value!=\"\"]').each(function ()\n                {\n                    var value = $(this).val();\n\n                    var option = multiOptions.filter(function ()\n                    {\n                        return $(this).data('multi-option') === value;\n                    });\n\n                    if (option.length > 0) {\n                        methods.addOption({\n                            'label' : null,\n                            'html'  : option.eq(0).contents(),\n                            'value' : $(this).val()\n                        });\n                    }\n                });\n\n                multiOptions.remove();\n            })();\n\n            $this.on('change', opt.selectAll, function (e)\n            {\n                methods.select({\n                    'checked' : $(this).prop('checked')\n                });\n            });\n        }\n\n        if (method && methods[method]) {\n            methods[method].call($this, args);\n        }\n\n        $this.data('_txpMultiEdit', form);\n    });\n\n    return this;\n};\n\n/**\n * Adds an event handler.\n *\n * See jQuery before trying to use this.\n *\n * @author S.Andrew http://www.scottandrew.com/\n * @param {object}  elm        The element to attach to\n * @param {string}  evType     The event\n * @param {object}  fn         The callback function\n * @param {boolean} useCapture Initiate capture\n */\n\nfunction addEvent(elm, evType, fn, useCapture)\n{\n    if (elm.addEventListener) {\n        elm.addEventListener(evType, fn, useCapture);\n        return true;\n    } else if (elm.attachEvent) {\n        var r = elm.attachEvent('on' + evType, fn);\n        return r;\n    } else {\n        elm['on' + evType] = fn;\n    }\n}\n\n/**\n * Sets a HTTP cookie.\n *\n * @param {string}  name  The name\n * @param {string}  value The value\n * @param {integer} days  Expires in\n */\n\nfunction setCookie(name, value, days)\n{\n    if (days) {\n        var date = new Date();\n\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n\n        var expires = '; expires=' + date.toGMTString();\n    } else {\n        var expires = '';\n    }\n\n    document.cookie = name + '=' + value + expires + '; path=/';\n}\n\n/**\n * Gets a HTTP cookie's value.\n *\n * @param  {string} name The name\n * @return {string} The cookie\n */\n\nfunction getCookie(name)\n{\n    var nameEQ = name + '=';\n    var ca = document.cookie.split(';');\n\n    for (var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n\n        while (c.charAt(0) == ' ') {\n            c = c.substring(1, c.length);\n        }\n\n        if (c.indexOf(nameEQ) == 0) {\n            return c.substring(nameEQ.length, c.length);\n        }\n    }\n\n    return null;\n}\n\n/**\n * Deletes a HTTP cookie.\n *\n * @param {string} name The cookie\n */\n\nfunction deleteCookie(name)\n{\n    setCookie(name, '', -1);\n}\n\n/**\n * Gets element by class.\n *\n * See jQuery before trying to use this.\n *\n * @param  {string} classname The HTML class\n * @param  {object} node      The node, defaults to the document\n * @return {object} Matching nodes\n * @see    http://www.snook.ca/archives/javascript/your_favourite_1/\n */\n\nfunction getElementsByClass(classname, node)\n{\n    var a = [];\n    var re = new RegExp('(^|\\\\s)' + classname + '(\\\\s|$)');\n\n    if (node == null) {\n        node = document;\n    }\n\n    var els = node.getElementsByTagName(\"*\");\n\n    for (var i = 0, j = els.length; i < j; i++) {\n        if (re.test(els[i].className)) {\n            a.push(els[i]);\n        }\n    }\n\n    return a;\n}\n\n/**\n * Toggles panel's visibility and saves the state to the server.\n *\n * @param  {string}  id The element ID\n * @return {boolean} Returns FALSE\n */\n\nfunction toggleDisplay(id)\n{\n    var obj = $('#' + id);\n\n    if (obj.length) {\n        obj.toggle();\n\n        // Send state of toggle pane to server.\n        if ($(this).data('txp-token') && $(this).data('txp-pane')) {\n            sendAsyncEvent({\n                event   : 'pane',\n                step    : 'visible',\n                pane    : $(this).data('txp-pane'),\n                visible : obj.is(':visible'),\n                origin  : textpattern.event,\n                token   : $(this).data('txp-token')\n            });\n        } else {\n            sendAsyncEvent({\n                event   : textpattern.event,\n                step    : 'save_pane_state',\n                pane    : obj.attr('id'),\n                visible : obj.is(':visible')\n            });\n        }\n    }\n\n    return false;\n}\n\n/**\n * Direct show/hide referred #segment; decorate parent lever.\n */\n\nfunction toggleDisplayHref()\n{\n    var $this = $(this);\n    var href = $this.attr('href');\n    var lever = $this.parent('.txp-summary');\n\n    if (href) {\n        toggleDisplay.call(this, href.substr(1));\n    }\n\n    if (lever.length) {\n        var vis = $(href).is(':visible');\n        lever.toggleClass('expanded', vis);\n        $this.attr('aria-pressed', vis.toString());\n        $(href).attr('aria-expanded', vis.toString());\n    }\n\n    return false;\n}\n\n/**\n * Shows/hides matching elements.\n *\n * @param {string}  className Targeted element's class\n * @param {boolean} show      TRUE to display\n */\n\nfunction setClassDisplay(className, show)\n{\n    $('.' + className).toggle(show);\n}\n\n/**\n * Toggles panel's visibility and saves the state to a HTTP cookie.\n *\n * @param {string} classname The HTML class\n */\n\nfunction toggleClassRemember(className)\n{\n    var v = getCookie('toggle_' + className);\n    v = (v == 1 ? 0 : 1);\n\n    setCookie('toggle_' + className, v, 365);\n    setClassDisplay(className, v);\n    setClassDisplay(className + '_neg', 1 - v);\n}\n\n/**\n * Toggle visibility of matching elements based on a cookie value.\n *\n * @param {string}  className The HTML class\n * @param {string}  force     The value\n */\n\nfunction setClassRemember(className, force)\n{\n    if (typeof(force) != 'undefined') {\n        setCookie('toggle_' + className, force, 365);\n    }\n\n    var v = getCookie('toggle_' + className);\n    setClassDisplay(className, v);\n    setClassDisplay(className + '_neg', 1 - v);\n}\n\n/**\n * Load data from the server using a HTTP POST request.\n *\n * @param  {object} data   POST payload\n * @param  {object} fn     Success handler\n * @param  {string} format Response data format, defaults to 'xml'\n * @return {object} this\n * @see    http://api.jquery.com/jQuery.post/\n */\n\nfunction sendAsyncEvent (data, fn, format)\n{\n    if ($.type(data) === 'string' && data.length > 0) {\n        // Got serialised data.\n        data = data + '&app_mode=async&_txp_token=' + textpattern._txp_token;\n    } else {\n        data.app_mode = 'async';\n        data._txp_token = textpattern._txp_token;\n    }\n\n    format = format || 'xml';\n\n    return $.post('index.php', data, fn, format);\n}\n\n/**\n * A pub/sub hub for client-side events.\n *\n * @since 4.5.0\n */\n\ntextpattern.Relay =\n{\n    /**\n     * Publishes an event to all registered subscribers.\n     *\n     * @param  {string} event The event\n     * @param  {object} data  The data passed to registered subscribers\n     * @return {object} The Relay object\n     * @example\n     * textpattern.Relay.callback('newEvent', {'name1' : 'value1', 'name2' : 'value2'});\n     */\n\n    callback: function (event, data)\n    {\n        return $(this).trigger(event, data);\n    },\n\n    /**\n     * Subscribes to an event.\n     *\n     * @param  {string} The event\n     * @param  {object} fn  The callback function\n     * @return {object} The Relay object\n     * @example\n     * textpattern.Relay.register('event',\n     *     function (event, data)\n     *     {\n     *         alert(data);\n     *     }\n     * );\n     */\n\n    register: function (event, fn)\n    {\n        $(this).on(event, fn);\n        return this;\n    }\n};\n\n/**\n * Logs debugging messages.\n *\n * @since 4.6.0\n */\n\ntextpattern.Console =\n{\n    /**\n     * Stores an array of invoked messages.\n     */\n\n    history : [],\n\n    /**\n     * Logs a message.\n     *\n     * @param  message The message\n     * @return textpattern.Console\n     * @example\n     * textpattern.Console.log('Some message');\n     */\n\n    log : function (message)\n    {\n        if (textpattern.production_status === 'debug') {\n            textpattern.Console.history.push(message);\n\n            textpattern.Relay.callback('txpConsoleLog', {\n                'message' : message\n            });\n        }\n\n        return this;\n    }\n};\n\n/**\n * Console API module for textpattern.Console.\n *\n * Passes invoked messages to Web/JavaScript Console\n * using console.log().\n *\n * Uses a namespaced 'txpConsoleLog.ConsoleAPI' event.\n */\n\ntextpattern.Relay.register('txpConsoleLog.ConsoleAPI', function (event, data)\n{\n    if ($.type(console) === 'object' && $.type(console.log) === 'function') {\n        console.log(data.message);\n    }\n});\n\n/**\n * Script routing.\n *\n * @since 4.6.0\n */\n\ntextpattern.Route =\n{\n    /**\n     * An array of attached listeners.\n     */\n\n    attached : [],\n\n    /**\n     * Attachs a listener.\n     *\n     * @param {string} pages The page\n     * @param {object} fn    The callback\n     */\n\n    add : function (pages, fn)\n    {\n        $.each(pages.split(','), function (index, page)\n        {\n            textpattern.Route.attached.push({\n                'page' : $.trim(page),\n                'fn'   : fn\n            });\n        });\n    },\n\n    /**\n     * Initialises attached listeners.\n     *\n     * @param {object} options       Options\n     * @param {string} options.event The event\n     * @param {string} options.step  The step\n     */\n\n    init : function (options)\n    {\n        var options = $.extend({\n            'event' : textpattern.event,\n            'step'  : textpattern.step\n        }, options);\n\n        $.each(textpattern.Route.attached, function (index, data)\n        {\n            if (data.page === options.event || data.page === options.event + '.' + options.step) {\n                data.fn({\n                    'event' : options.event,\n                    'step'  : options.step,\n                    'route' : data.page\n                });\n            }\n        });\n    }\n};\n\n/**\n * Sends a form using AJAX and processes the response.\n *\n * @param  {object} options          Options\n * @param  {string} options.dataType The response data type\n * @param  {object} options.success  The success callback\n * @param  {object} options.error    The error callback\n * @return {object} this\n * @since  4.5.0\n */\n\njQuery.fn.txpAsyncForm = function (options)\n{\n    options = $.extend({\n        dataType : 'script',\n        success  : null,\n        error    : null\n    }, options);\n\n    // Send form data to application, process response as script.\n    this.on('submit.txpAsyncForm', function (event)\n    {\n        event.preventDefault();\n\n        var $this = $(this);\n        var form =\n        {\n            button  : $this.find('input[type=\"submit\"]:focus').eq(0),\n            data    : $this.serialize(),\n            spinner : $('<span />').addClass('spinner')\n        };\n\n        // Show feedback while processing.\n        $this.addClass('busy');\n        $('body').addClass('busy');\n\n        // WebKit does not set :focus on button-click: use first submit input as a fallback.\n        if (!form.button.length) {\n            form.button = $this.find('input[type=\"submit\"]').eq(0);\n        }\n\n        form.button.attr('disabled', true).after(form.spinner);\n\n        if (form.data) {\n            form.data += '&' + (form.button.attr('name') || '_txp_submit') + '=' + (form.button.val() || '_txp_submit');\n        }\n\n        sendAsyncEvent(form.data, function () {}, options.dataType)\n            .done(function (data, textStatus, jqXHR)\n            {\n                if (options.success) {\n                    options.success($this, event, data, textStatus, jqXHR);\n                }\n\n                textpattern.Relay.callback('txpAsyncForm.success', {\n                    'this'       : $this,\n                    'event'      : event,\n                    'data'       : data,\n                    'textStatus' : textStatus,\n                    'jqXHR'      : jqXHR\n                });\n            })\n            .fail(function (jqXHR, textStatus, errorThrown)\n            {\n                if (options.error) {\n                    options.error($this, event, jqXHR, $.ajaxSetup(), errorThrown);\n                }\n\n                textpattern.Relay.callback('txpAsyncForm.error', {\n                    'this'         : $this,\n                    'event'        : event,\n                    'jqXHR'        : jqXHR,\n                    'ajaxSettings' : $.ajaxSetup(),\n                    'thrownError'  : errorThrown\n                });\n            })\n            .always(function ()\n            {\n                $this.removeClass('busy');\n                form.button.removeAttr('disabled');\n                form.spinner.remove();\n                $('body').removeClass('busy');\n            });\n    });\n\n    return this;\n};\n\n/**\n * Sends a link using AJAX and processes the plain text response.\n *\n * @param  {object} options          Options\n * @param  {string} options.dataType The response data type\n * @param  {object} options.success  The success callback\n * @param  {object} options.error    The error callback\n * @return {object} this\n * @since  4.5.0\n */\n\njQuery.fn.txpAsyncHref = function (options)\n{\n    options = $.extend({\n        dataType : 'text',\n        success  : null,\n        error    : null\n    }, options);\n\n    this.on('click.txpAsyncHref', function (event)\n    {\n        event.preventDefault();\n        var $this = $(this);\n        var url = this.search.replace('?', '') + '&' + $.param({value : $this.text()});\n\n        // Show feedback while processing.\n        $this.addClass('busy');\n        $('body').addClass('busy');\n\n        sendAsyncEvent(url, function () {}, options.dataType)\n            .done(function (data, textStatus, jqXHR)\n            {\n                if (options.dataType === 'text') {\n                    $this.html(data);\n                }\n\n                if (options.success) {\n                    options.success($this, event, data, textStatus, jqXHR);\n                }\n\n                textpattern.Relay.callback('txpAsyncHref.success', {\n                    'this'       : $this,\n                    'event'      : event,\n                    'data'       : data,\n                    'textStatus' : textStatus,\n                    'jqXHR'      : jqXHR\n                });\n            })\n            .fail(function (jqXHR, textStatus, errorThrown)\n            {\n                if (options.error) {\n                    options.error($this, event, jqXHR, $.ajaxSetup(), errorThrown);\n                }\n\n                textpattern.Relay.callback('txpAsyncHref.error', {\n                    'this'         : $this,\n                    'event'        : event,\n                    'jqXHR'        : jqXHR,\n                    'ajaxSettings' : $.ajaxSetup(),\n                    'thrownError'  : errorThrown\n                });\n            })\n            .always(function ()\n            {\n                $this.removeClass('busy');\n                $('body').removeClass('busy');\n            });\n    });\n\n    return this;\n};\n\n/**\n * Creates a UI dialog.\n *\n * @param  {object} options Options\n * @return {object} this\n * @since  4.6.0\n */\n\njQuery.fn.txpDialog = function (options)\n{\n    options = $.extend({\n        autoOpen : false,\n        buttons  : [\n            {\n                text  : textpattern.gTxt('ok'),\n                click : function ()\n                {\n                    // callbacks?\n\n                    if ($(this).is('form')) {\n                        $(this).submit();\n                    }\n\n                    $(this).dialog('close');\n                }\n            }\n        ]\n    }, options);\n\n    this.dialog(options);\n\n    return this;\n};\n\n/**\n * Creates a date picker.\n *\n * @param  {object} options Options\n * @return {object} this\n * @since  4.6.0\n */\n\njQuery.fn.txpDatepicker = function (options)\n{\n    // TODO $.datepicker.regional[ \"en\" ];\n    // TODO support from RTL languages\n    this.datepicker(options);\n\n    return this;\n};\n\n/**\n * Creates a sortable element.\n *\n * This method creates a sortable widget, allowing to\n * reorder elements in a list and synchronises the updated\n * order with the server.\n *\n * @param  {object}  options\n * @param  {string}  options.dataType The response datatype\n * @param  {object}  options.success  The sync success callback\n * @param  {object}  options.error    The sync error callback\n * @param  {string}  options.event    The event\n * @param  {string}  options.step     The step\n * @param  {string}  options.cancel   Prevents sorting if you start on elements matching the selector\n * @param  {integer} options.delay    Sorting delay\n * @param  {integer} options.distance Tolerance, in pixels, for when sorting should start\n * @return this\n * @since  4.6.0\n */\n\njQuery.fn.txpSortable = function (options)\n{\n    options = $.extend({\n        dataType : 'script',\n        success  : null,\n        error    : null,\n        event    : textpattern.event,\n        step     : 'sortable_save',\n        cancel   : ':input, button',\n        delay    : 0,\n        distance : 15,\n        items    : '[data-txp-sortable-id]'\n    }, options);\n\n    var methods =\n    {\n        /**\n         * Sends updated order to the server.\n         */\n\n        update : function ()\n        {\n            var ids = [], $this = $(this);\n\n            $this.children('[data-txp-sortable-id]').each(function ()\n            {\n                ids.push($(this).data('txp-sortable-id'));\n            });\n\n            if (ids) {\n                sendAsyncEvent({\n                    event : options.event,\n                    step  : options.step,\n                    order : ids\n                }, function () {}, options.dataType)\n                    .done(function (data, textStatus, jqXHR)\n                    {\n                        if (options.success) {\n                            options.success.call($this, data, textStatus, jqXHR);\n                        }\n\n                        textpattern.Relay.callback('txpSortable.success', {\n                            'this'       : $this,\n                            'data'       : data,\n                            'textStatus' : textStatus,\n                            'jqXHR'      : jqXHR\n                        });\n                    })\n                    .fail(function (jqXHR, textStatus, errorThrown)\n                    {\n                        if (options.error) {\n                            options.error.call($this, jqXHR, $.ajaxSetup(), errorThrown);\n                        }\n\n                        textpattern.Relay.callback('txpSortable.error', {\n                            'this'         : $this,\n                            'jqXHR'        : jqXHR,\n                            'ajaxSettings' : $.ajaxSetup(),\n                            'thrownError'  : errorThrown\n                        });\n                    });\n            }\n        }\n    };\n\n    return this.sortable({\n        cancel   : options.cancel,\n        delay    : options.delay,\n        distance : options.distance,\n        update   : methods.update,\n        items    : options.items\n    });\n};\n\n/**\n * Encodes a string for a use in HTML.\n *\n * @param  {string} string The string\n * @return {string} Encoded string\n * @since  4.6.0\n */\n\ntextpattern.encodeHTML = function (string)\n{\n    return $('<div/>').text(string).html();\n};\n\n/**\n * Translates given substrings.\n *\n * @param  {string} string       The string being translated\n * @param  {object} replacements Translated substrings\n * @return string   Translated string\n * @since  4.6.0\n * @example\n * textpattern.tr('hello world, and bye!', {'hello' : 'bye', 'bye' : 'hello'});\n */\n\ntextpattern.tr = function (string, replacements)\n{\n    var match, position, output = '', replacement;\n\n    for (position = 0; position < string.length; position++) {\n        match = false;\n\n        $.each(replacements, function (from, to)\n        {\n            if (string.substr(position, from.length) === from) {\n                match = true;\n                replacement = to;\n                position = (position + from.length) - 1;\n\n                return;\n            }\n        });\n\n        if (match) {\n            output += replacement;\n        } else {\n            output += string.charAt(position);\n        }\n    }\n\n    return output;\n};\n\n/**\n * Returns an i18n string.\n *\n * @param  {string}  i18n   The i18n string\n * @param  {object}  atts   Replacement map\n * @param  {boolean} escape TRUE to escape HTML in atts\n * @return {string}  The string\n * @example\n * textpattern.gTxt('string', {'{name}' : 'example'}, true);\n */\n\ntextpattern.gTxt = function (i18n, atts, escape)\n{\n    var tags = atts || {};\n    var string = i18n;\n    var name = string.toLowerCase();\n\n    if ($.type(textpattern.textarray[name]) !== 'undefined') {\n        string = textpattern.textarray[name];\n    }\n\n    if (escape !== false) {\n        string = textpattern.encodeHTML(string);\n\n        $.each(tags, function (key, value)\n        {\n            tags[key] = textpattern.encodeHTML(value);\n        });\n    }\n\n    string = textpattern.tr(string, tags);\n\n    return string;\n};\n\n/**\n * Replaces HTML contents of each matched with i18n string.\n *\n * This is a jQuery plugin for textpattern.gTxt().\n *\n * @param  {object|string}  options        Options or the i18n string\n * @param  {string}         options.string The i18n string\n * @param  {object}         options.tags   Replacement map\n * @param  {boolean}        options.escape TRUE to escape HTML in tags\n * @param  {object}         tags           Replacement map\n * @param  {boolean}        escape         TRUE to escape HTML in tags\n * @return {object}         this\n * @see    textpattern.gTxt()\n * @example\n * $('p').gTxt('string').class('alert-block warning');\n */\n\njQuery.fn.gTxt = function (opts, tags, escape)\n{\n    var options = $.extend({\n        'string' : opts,\n        'tags'   : tags,\n        'escape' : escape\n    }, opts);\n\n    this.html(textpattern.gTxt(options.string, options.tags, options.escape));\n\n    return this;\n};\n\n/**\n * ESC button closes alert messages.\n *\n * @since 4.5.0\n */\n\n$(document).keyup(function (e)\n{\n    if (e.keyCode == 27) {\n        $('.close').parent().remove();\n    }\n});\n\n/**\n * Search tool.\n *\n * @since 4.6.0\n */\n\nfunction txp_search()\n{\n    var $ui = $('.txp-search');\n\n    $ui.find('.txp-search-button').button({\n        text: false,\n        icons:\n        {\n            primary: 'ui-icon-search'\n        }\n\n    }).click(function ()\n    {\n        $ui.submit();\n    });\n\n    $ui.find('.txp-search-options').button({\n        text: false,\n        icons:\n        {\n            primary: 'ui-icon-triangle-1-s'\n        }\n    }).on('click', function (e)\n    {\n        var menu = $ui.find('.txp-dropdown').toggle().position(\n        {\n            my: \"right top\", // TODO: need to swap this to 'left top' in RTL languages.\n            at: \"right bottom\", // TODO: need to swap this to 'left bottom' in RTL languages.\n            of: this\n        });\n        $(document).one('click blur', function ()\n        {\n            menu.hide();\n        });\n\n        return false;\n    });\n\n    $ui.find('.txp-search-buttons').buttonset();\n    $ui.find('.txp-dropdown').hide().menu().click(function (e) {\n        e.stopPropagation();\n    });\n\n    $ui.txpMultiEditForm({\n        'checkbox'    : 'input[name=\"search_method[]\"][type=checkbox]',\n        'row'         : '.txp-dropdown li',\n        'highlighted' : '.txp-dropdown li',\n        'confirmation': false\n    });\n}\n\n\n/**\n * Cookie status.\n *\n * @deprecated in 4.6.0\n */\n\nvar cookieEnabled = true;\n\n// Login panel.\n\ntextpattern.Route.add('login', function ()\n{\n    // Check cookies.\n    if (!checkCookies()) {\n        cookieEnabled = false;\n        $('main').prepend($('<p class=\"alert-block warning\" />').text(textpattern.gTxt('cookies_must_be_enabled')));\n    }\n\n    // Focus on either username or password when empty.\n    var has_name = $('#login_name').val().length;\n    var password_box = $('#login_password').val();\n    var has_password = (password_box) ? password_box.length : 0;\n\n    if (!has_name) {\n        $('#login_name').focus();\n    } else if (!has_password) {\n        $('#login_password').focus();\n    }\n});\n\n// Write panel.\n\ntextpattern.Route.add('article', function ()\n{\n    // Assume users would not change the timestamp if they wanted to\n    // 'publish now'/'reset time'.\n    $(document).on('change',\n        '#write-timestamp input.year,' +\n        '#write-timestamp input.month,' +\n        '#write-timestamp input.day,' +\n        '#write-timestamp input.hour,' +\n        '#write-timestamp input.minute,' +\n        '#write-timestamp input.second',\n        function ()\n        {\n            $('#publish_now').prop('checked', false);\n            $('#reset_time').prop('checked', false);\n        }\n    );\n\n    var status = $('select[name=Status]'), form = status.parents('form'), submitButton = form.find('input[type=submit]');\n\n    status.change(function ()\n    {\n        if (!form.hasClass('published')) {\n            if ($(this).val() < 4) {\n                submitButton.val(textpattern.gTxt('save'));\n            } else {\n                submitButton.val(textpattern.gTxt('publish'));\n            }\n        }\n    });\n\n    $('.txp-clone').click(function (e)\n    {\n        e.preventDefault();\n        form.append('<input type=\"hidden\" name=\"copy\" value=\"1\" />'+\n            '<input type=\"hidden\" name=\"publish\" value=\"1\" />');\n        form.off('submit.txpAsyncForm').trigger('submit');\n    });\n\n    // Switch to Text/HTML/Preview mode.\n    $(document).on('click',\n        '[data-view-mode]',\n        function (e)\n        {\n            e.preventDefault();\n            $('input[name=\"view\"]').val($(this).data('view-mode'));\n            document.article_form.submit();\n        }\n    );\n});\n\n// 'Clone' button on Pages, Forms, Styles panels.\n\ntextpattern.Route.add('css, page, form', function ()\n{\n    $('.txp-clone').click(function (e)\n    {\n        e.preventDefault();\n        var target = $(this).data('form');\n        if (target) {\n            $('#'+target).append('<input type=\"hidden\" name=\"copy\" value=\"1\" />');\n            $('.txp-save input').click();\n        }\n    });\n});\n\n// Forms panel.\n\ntextpattern.Route.add('form', function ()\n{\n    $('#allforms_form').txpMultiEditForm({\n        'checkbox'    : 'input[name=\"selected_forms[]\"][type=checkbox]',\n        'row'         : '.switcher-list li, .form-list-name',\n        'highlighted' : '.switcher-list li'\n    });\n});\n\n// Preferences panel.\n\ntextpattern.Route.add('prefs', function ()\n{\n    var prefsGroup = $('#all_preferences div[role=group]');\n\n    prefsGroup.closest('form').tabs();\n    prefsGroup.addClass('ui-tabs-vertical ui-helper-clearfix');\n    prefsGroup.find('li').removeClass('ui-corner-top').addClass('ui-corner-left');\n\n    // Todo: save pane state for currently open pref group, fallback to first if not set.\n\n});\n\n// Plugins panel.\n\ntextpattern.Route.add('plugin', function ()\n{\n    textpattern.Relay.register('txpAsyncHref.success', function (event, data)\n    {\n        $(data['this']).closest('tr').toggleClass('active');\n    });\n});\n\n// Initialise JavaScript.\n\n$(document).ready(function ()\n{\n    // Confirmation dialogs.\n    $(document).on('click.txpVerify', 'a[data-verify]', function (e)\n    {\n        return verify($(this).data('verify'));\n    });\n\n    $(document).on('submit.txpVerify', 'form[data-verify]', function (e)\n    {\n        return verify($(this).data('verify'));\n    });\n\n    // Disable spellchecking on all elements of class \"code\" in capable browsers.\n    var c = $(\".code\")[0];\n\n    if (c && \"spellcheck\" in c) {\n        $(\".code\").prop(\"spellcheck\", false);\n    }\n\n    // Enable spellcheck for all elements mentioned in textpattern.do_spellcheck.\n    c = $(textpattern.do_spellcheck)[0];\n\n    if (c && \"spellcheck\" in c) {\n        $(textpattern.do_spellcheck).prop(\"spellcheck\", true);\n    }\n\n    // Attach toggle behaviours.\n    $(document).on('click', '.txp-summary a[class!=pophelp]', toggleDisplayHref);\n\n    // Attach multi-edit form.\n    $('.multi_edit_form').txpMultiEditForm();\n\n    // Establish AJAX timeout from prefs.\n    if ($.ajaxSetup().timeout === undefined) {\n        $.ajaxSetup({timeout : textpattern.ajax_timeout});\n    }\n\n    // Set up asynchronous forms.\n    $('form.async').txpAsyncForm({\n        error: function ()\n        {\n            window.alert(textpattern.gTxt('form_submission_error'));\n        }\n    });\n\n    // Set up asynchronous links.\n    $('a.async:not(.script)').txpAsyncHref({\n        error: function ()\n        {\n            window.alert(textpattern.gTxt('form_submission_error'));\n        }\n    });\n\n    $('a.async.script').txpAsyncHref({\n        dataType : 'script',\n        error    : function ()\n        {\n            window.alert(textpattern.gTxt('form_submission_error'));\n        }\n    });\n\n    // Close button on the announce pane.\n    $(document).on('click', '.close', function (e)\n    {\n        e.preventDefault();\n        $(this).parent().remove();\n    });\n\n    // Initialise dynamic WAI-ARIA attributes.\n    $('.txp-summary a').each(function (i, elm)\n    {\n        // Get id of toggled <section> region.\n        var region = $(elm).attr('href');\n\n        if (region) {\n            var $region = $(region), vis = $region.is(':visible').toString();\n            $(elm).attr('aria-controls', region.substr(1)).attr('aria-pressed', vis);\n            $region.attr('aria-expanded', vis);\n        }\n    });\n\n    // Hide popup elements.\n    $('.txp-dropdown').hide();\n\n    // Event handling and automation.\n    $(document).on('change.txpAutoSubmit', 'form [data-submit-on=\"change\"]', function (e)\n    {\n        $(this).parents('form').submit();\n    });\n\n    // Polyfills.\n    // Add support for form attribute in submit buttons.\n    if ($('html').hasClass('no-formattribute')) {\n        $('.txp-save input[form]').click(function(e) {\n            var targetForm = $(this).attr('form');\n            $('form[id='+targetForm+']').submit();\n        });\n    }\n\n    // Establish UI defaults.\n    $('.txp-dialog').txpDialog();\n    $('.txp-dialog.modal').dialog('option', 'modal', true);\n    $('.txp-datepicker').txpDatepicker();\n    $('.txp-sortable').txpSortable();\n\n\n\n    // TODO: integrate jQuery UI stuff properly --------------------------------\n\n\n    // Selectmenu\n    $('.jquery-ui-selectmenu').selectmenu();\n\n    // Button\n    $('.jquery-ui-button').button();\n\n    // Button set\n    $('.jquery-ui-buttonset').buttonset();\n\n\n    // TODO: end integrate jQuery UI stuff properly ----------------------------\n\n\n\n    // Find and open associated dialogs.\n    $(document).on('click.txpDialog', '[data-txp-dialog]', function (e)\n    {\n        $($(this).data('txp-dialog')).dialog('open');\n        e.preventDefault();\n    });\n\n    // Initialise panel specific JavaScript.\n    textpattern.Route.init();\n\n    // Arm UI.\n    $('body').removeClass('not-ready');\n});\n", "<?php\n\n/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\nif (!defined('TXP_UPDATE')) {\n    exit(\"Nothing here. You can't access this file directly.\");\n}\n\nsafe_alter('textpattern', \"\n    CHANGE COLUMN textile_body    textile_body    VARCHAR(32) NOT NULL DEFAULT '1',\n    CHANGE COLUMN textile_excerpt textile_excerpt VARCHAR(32) NOT NULL DEFAULT '1'\");\nsafe_update('txp_prefs', \"name = 'pane_article_textfilter_help_visible'\", \"name = 'pane_article_textile_help_visible'\");\n\n// Rejig preferences panel.\n$core_ev = doQuote(join(\"','\", array('site', 'admin', 'publish', 'feeds', 'custom', 'comments')));\n\n// 1) Increase event column size.\nsafe_alter('txp_prefs', \"\n    MODIFY event VARCHAR(255) NOT NULL DEFAULT 'publish',\n    MODIFY html  VARCHAR(255) NOT NULL DEFAULT 'text_input'\");\n\n// 2) Remove basic/advanced distinction.\nsafe_update('txp_prefs', \"type = '\".PREF_CORE.\"'\", \"type = '\".PREF_PLUGIN.\"' AND event IN (\".$core_ev.\")\");\n\n// 3) Consolidate existing prefs into better groups.\nsafe_update('txp_prefs', \"event = 'site'\", \"name IN ('sitename', 'siteurl', 'site_slogan', 'production_status', 'gmtoffset', 'auto_dst', 'is_dst', 'dateformat', 'archive_dateformat', 'permlink_mode', 'doctype', 'logging', 'use_comments', 'expire_logs_after')\");\n\n// 4) Reorder existing prefs into a more logical progression.\nsafe_update('txp_prefs', \"position = '230'\", \"name = 'expire_logs_after'\");\nsafe_update('txp_prefs', \"position = '340'\", \"name = 'max_url_len'\");\nsafe_update('txp_prefs', \"position = '160'\", \"name = 'comments_sendmail'\");\nsafe_update('txp_prefs', \"position = '180'\", \"name = 'comments_are_ol'\");\nsafe_update('txp_prefs', \"position = '200'\", \"name = 'comment_means_site_updated'\");\nsafe_update('txp_prefs', \"position = '220'\", \"name = 'comments_require_name'\");\nsafe_update('txp_prefs', \"position = '240'\", \"name = 'comments_require_email'\");\nsafe_update('txp_prefs', \"position = '260'\", \"name = 'never_display_email'\");\nsafe_update('txp_prefs', \"position = '280'\", \"name = 'comment_nofollow'\");\nsafe_update('txp_prefs', \"position = '300'\", \"name = 'comments_disallow_images'\");\nsafe_update('txp_prefs', \"position = '320'\", \"name = 'comments_use_fat_textile'\");\nsafe_update('txp_prefs', \"position = '340'\", \"name = 'spam_blacklists'\");\nsafe_update('txp_prefs', \"html = 'permlink_format'\", \"name = 'permalink_title_format'\");\n\n// Support for l10n string owners.\n$cols = getThings(\"DESCRIBE `\".PFX.\"txp_lang`\");\n\nif (!in_array('owner', $cols)) {\n    safe_alter('txp_lang', \"\n        ADD owner VARCHAR(64) NOT NULL DEFAULT '' AFTER event,\n        ADD INDEX owner (owner)\");\n}\n\n// Keep all comment-related forms together. The loss of 'preview' ability on the\n// comments_display Form is of little consequence compared with the benefit of\n// tucking them away neatly when not required.\nsafe_update('txp_form', \"type = 'comment'\", \"name = 'comments_display'\");\n\n// Adds protocol to logged HTTP referers.\nsafe_update(\n    'txp_log',\n    \"refer = CONCAT('http://', refer)\",\n    \"refer != '' AND refer NOT LIKE 'http://%' AND refer NOT LIKE 'https://%'\"\n);\n\n// Usernames can be 64 characters long at most.\nsafe_alter('txp_file',  \"MODIFY author VARCHAR(64) NOT NULL DEFAULT ''\");\nsafe_alter('txp_link',  \"MODIFY author VARCHAR(64) NOT NULL DEFAULT ''\");\nsafe_alter('txp_image', \"MODIFY author VARCHAR(64) NOT NULL DEFAULT ''\");\n\n// Consistent name length limitations for presentation items.\nsafe_alter('txp_form', \"MODIFY name VARCHAR(255) NOT NULL DEFAULT ''\");\nsafe_alter('txp_page', \"MODIFY name VARCHAR(255) NOT NULL DEFAULT ''\");\nsafe_alter('txp_section', \"\n    MODIFY page VARCHAR(255) NOT NULL DEFAULT '',\n    MODIFY css  VARCHAR(255) NOT NULL DEFAULT ''\");\n\n// Save sections correctly in articles.\nsafe_alter('textpattern', \"MODIFY Section VARCHAR(255) NOT NULL DEFAULT ''\");\nsafe_alter('txp_section', \"MODIFY name    VARCHAR(255) NOT NULL DEFAULT ''\");\n\n// Plugins can have longer version numbers.\nsafe_alter('txp_plugin', \"MODIFY version VARCHAR(255) NOT NULL DEFAULT '1.0'\");\n\n// Translation strings should allow more than 255 characters.\nsafe_alter('txp_lang', \"MODIFY data TEXT\");\n\n// Add meta description to articles...\n$cols = getThings(\"DESCRIBE `\".PFX.\"textpattern`\");\n\nif (!in_array('description', $cols)) {\n    safe_alter('textpattern', \"ADD description VARCHAR(255) NOT NULL DEFAULT '' AFTER Keywords\");\n}\n\n// ... categories...\n$cols = getThings(\"DESCRIBE `\".PFX.\"txp_category`\");\n\nif (!in_array('description', $cols)) {\n    safe_alter('txp_category', \"ADD description VARCHAR(255) NOT NULL DEFAULT '' AFTER title\");\n}\n\n// ... and sections.\n$cols = getThings(\"DESCRIBE `\".PFX.\"txp_section`\");\n\nif (!in_array('description', $cols)) {\n    safe_alter('txp_section', \"ADD description VARCHAR(255) NOT NULL DEFAULT '' AFTER css\");\n}\n\n// Remove textpattern.com ping pref.\nif (safe_field('name', 'txp_prefs', \"name = 'ping_textpattern_com'\")) {\n    safe_delete('txp_prefs', \"name = 'ping_textpattern_com'\");\n}\n\n// Add default publishing status pref.\nif (!get_pref('default_publish_status')) {\n    set_pref('default_publish_status', STATUS_LIVE, 'publish', PREF_CORE, 'defaultPublishStatus', 15, PREF_PRIVATE);\n}\n\n// Remove broken import functionality\nif (file_exists(txpath.DS.'include'.DS.'txp_import.php')) {\n    $import_files = array(\n        'BloggerImportTemplate.txt',\n        'import_blogger.php',\n        'import_mt.php',\n        'import_b2.php',\n        'import_mtdb.php',\n        'import_wp.php'\n    );\n\n    foreach($import_files as $file) {\n        unlink(txpath.DS.'include'.DS.'import'.DS.$file);\n    }\n\n    rmdir(txpath.DS.'include'.DS.'import');\n    unlink(txpath.DS.'include'.DS.'txp_import.php');\n}\n\n// Remove unused ipban table or recreate its index (for future utf8mb4 conversion)\nif (getThing(\"SHOW TABLES LIKE '\".PFX.\"txp_discuss_ipban'\")) {\n    if (!safe_count('txp_discuss_ipban', '1 = 1')) {\n        safe_drop('txp_discuss_ipban');\n    } else {\n        safe_alter('txp_discuss_ipban', \"DROP PRIMARY KEY, ADD PRIMARY KEY (ip(250))\");\n    }\n}\n\n// Recreate indexes with smaller key sizes to allow future conversion to charset utf8mb4\nsafe_alter('txp_css',     \"DROP INDEX name,               ADD UNIQUE name (name(250))\");\nsafe_alter('txp_file',    \"DROP INDEX filename,           ADD UNIQUE filename (filename(250))\");\nsafe_alter('txp_form',    \"DROP PRIMARY KEY,              ADD PRIMARY KEY (name(250))\");\nsafe_alter('txp_page',    \"DROP PRIMARY KEY,              ADD PRIMARY KEY (name(250))\");\nsafe_alter('txp_section', \"DROP PRIMARY KEY,              ADD PRIMARY KEY (name(250))\");\nsafe_alter('txp_prefs',   \"DROP INDEX prefs_idx,          ADD UNIQUE prefs_idx (prefs_id, name(185), user_name)\");\nsafe_alter('txp_prefs',   \"DROP INDEX name,               ADD INDEX name (name(250))\");\nsafe_alter('textpattern', \"DROP INDEX section_status_idx, ADD INDEX section_status_idx (Section(249), Status)\");\nsafe_alter('textpattern', \"DROP INDEX url_title_idx,      ADD INDEX url_title_idx (url_title(250))\");\n// txp_discuss_nonce didn't have a primary key in 4.0.3, so we recreate its index in two steps\nsafe_drop_index('txp_discuss_nonce', \"PRIMARY\");\nsafe_alter('txp_discuss_nonce', \"ADD PRIMARY KEY (nonce(250))\");\n\n// Fix typo: textinput should be text_input\nsafe_update('txp_prefs', \"html = 'text_input'\", \"name = 'timezone_key'\");\n\n// Fix typo: position 40 should be 0 (because it's a hidden pref)\nsafe_update('txp_prefs', \"position = 0\", \"name = 'language'\");\n\n// Fix typo: position should be 60 instead of 30 (so it appears just below the site name)\nsafe_update('txp_prefs', \"position = 60\", \"name = 'site_slogan'\");\n\n// Enforce some table changes that happened after 4.0.3 but weren't part of update scripts until now\nsafe_alter('txp_css',  \"MODIFY name  VARCHAR(255) NOT NULL\");\nsafe_alter('txp_lang', \"MODIFY lang  VARCHAR(16)  NOT NULL\");\nsafe_alter('txp_lang', \"MODIFY name  VARCHAR(64)  NOT NULL\");\nsafe_alter('txp_lang', \"MODIFY event VARCHAR(64)  NOT NULL\");\nsafe_drop_index('txp_form', \"name\");\nsafe_drop_index('txp_page', \"name\");\nsafe_drop_index('txp_plugin', \"name_2\");\nsafe_drop_index('txp_section', \"name\");\n\n// The txp_priv table was created for version 1.0, but never used nor created in later versions.\nsafe_drop('txp_priv');\n"], "fixing_code": ["<?php\n\n/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2005 Dean Allen\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Users panel.\n *\n * @package Admin\\Admin\n */\n\nuse Textpattern\\Search\\Filter;\n\nif (!defined('txpinterface')) {\n    die('txpinterface is undefined.');\n}\n\n$levels = get_groups();\n\nif ($event == 'admin') {\n    require_privs('admin');\n\n    include_once txpath.'/lib/txplib_admin.php';\n\n    $available_steps = array(\n        'admin_multi_edit'    => true,\n        'admin_change_pageby' => true,\n        'author_list'         => false,\n        'author_edit'         => false,\n        'author_save'         => true,\n        'author_save_new'     => true,\n        'change_email'        => true,\n        'change_email_form'   => false,\n        'change_pass'         => true,\n        'new_pass_form'       => false,\n    );\n\n    if ($step && bouncer($step, $available_steps)) {\n        $step();\n    } else {\n        author_list();\n    }\n}\n\n/**\n * Changes an email address.\n */\n\nfunction change_email()\n{\n    global $txp_user;\n\n    $new_email = ps('new_email');\n\n    if (!is_valid_email($new_email)) {\n        author_list(array(gTxt('email_required'), E_ERROR));\n\n        return;\n    }\n\n    $rs = update_user($txp_user, $new_email);\n\n    if ($rs) {\n        author_list(gTxt('email_changed', array('{email}' => $new_email)));\n\n        return;\n    }\n\n    author_list(array(gTxt('author_save_failed'), E_ERROR));\n}\n\n/**\n * Updates a user.\n */\n\nfunction author_save()\n{\n    global $txp_user;\n\n    require_privs('admin.edit');\n\n    extract(psa(array(\n        'privs',\n        'name',\n        'RealName',\n        'email',\n    )));\n\n    $privs = assert_int($privs);\n\n    if (!is_valid_email($email)) {\n        author_list(array(gTxt('email_required'), E_ERROR));\n\n        return;\n    }\n\n    $rs = update_user($name, $email, $RealName);\n\n    if ($rs && ($txp_user === $name || change_user_group($name, $privs))) {\n        author_list(gTxt('author_updated', array('{name}' => $RealName)));\n\n        return;\n    }\n\n    author_list(array(gTxt('author_save_failed'), E_ERROR));\n}\n\n/**\n * Changes current user's password.\n */\n\nfunction change_pass()\n{\n    global $txp_user;\n\n    extract(psa(array('new_pass')));\n\n    if (empty($new_pass)) {\n        author_list(array(gTxt('password_required'), E_ERROR));\n\n        return;\n    }\n\n    $rs = change_user_password($txp_user, $new_pass);\n\n    if ($rs) {\n        // Todo: Move full stop to Textpack.\n        $message = gTxt('password_changed') . '.';\n        author_list($message);\n    }\n}\n\n/**\n * Creates a new user.\n */\n\nfunction author_save_new()\n{\n    require_privs('admin.edit');\n\n    extract(psa(array(\n        'privs',\n        'name',\n        'email',\n        'RealName',\n    )));\n\n    $privs = assert_int($privs);\n\n    if (is_valid_username($name) && is_valid_email($email)) {\n        if (user_exists($name)) {\n            author_list(array(gTxt('author_already_exists', array('{name}' => $name)), E_ERROR));\n\n            return;\n        }\n\n        $password = generate_password(PASSWORD_LENGTH);\n\n        $rs = create_user($name, $email, $password, $RealName, $privs);\n\n        if ($rs) {\n            send_password($RealName, $name, $email, $password);\n\n            author_list(\n                gTxt('password_sent_to').sp.$email\n            );\n\n            return;\n        }\n    }\n\n    author_list(array(gTxt('error_adding_new_author'), E_ERROR));\n}\n\n/**\n * Lists user groups as a &lt;select&gt; input.\n *\n * @param  int $priv Selected option\n * @return string HTML\n */\n\nfunction privs($priv = '')\n{\n    global $levels;\n\n    return selectInput('privs', $levels, $priv, '', '', 'privileges');\n}\n\n/**\n * Translates a numeric ID to a human-readable user group.\n *\n * @param  int $priv The group\n * @return string\n */\n\nfunction get_priv_level($priv)\n{\n    global $levels;\n\n    return $levels[$priv];\n}\n\n/**\n * Password changing form.\n */\n\nfunction new_pass_form()\n{\n    pagetop(gTxt('tab_site_admin'), '');\n\n    echo form(\n        hed(gTxt('change_password'), 2).\n        inputLabel(\n            'new_pass',\n            fInput('password', 'new_pass', '', 'txp-maskable', '', '', INPUT_REGULAR, '', 'new_pass'),\n            'new_password', '', array('class' => 'txp-form-field edit-admin-new-password')\n        ).\n        graf(\n            checkbox('unmask', 1, false, 0, 'show_password').\n            n.tag(gTxt('show_password'), 'label', array('for' => 'show_password')), array('class' => 'edit-admin-show-password')).\n        graf(fInput('submit', 'change_pass', gTxt('submit'), 'publish')).\n        eInput('admin').\n        sInput('change_pass'),\n    '', '', 'post', 'txp-edit', '', 'change_password');\n}\n\n/**\n * Email changing form.\n */\n\nfunction change_email_form()\n{\n    global $txp_user;\n\n    pagetop(gTxt('tab_site_admin'), '');\n\n    $email = fetch('email', 'txp_users', 'name', $txp_user);\n\n    echo form(\n        hed(gTxt('change_email_address'), 2).\n        inputLabel(\n            'new_email',\n            fInput('text', 'new_email', $email, '', '', '', INPUT_REGULAR, '', 'new_email'),\n            'new_email', '', array('class' => 'txp-form-field edit-admin-new-email')\n        ).\n        graf(fInput('submit', 'change_email', gTxt('submit'), 'publish')).\n        eInput('admin').\n        sInput('change_email'),\n    '', '', 'post', 'txp-edit', '', 'change_email');\n}\n\n/**\n * The main panel listing all authors.\n *\n * @param string|array $message The activity message\n */\n\nfunction author_list($message = '')\n{\n    global $event, $txp_user, $author_list_pageby, $levels;\n\n    pagetop(gTxt('tab_site_admin'), $message);\n\n    echo n.tag(\n        hed(gTxt('tab_site_admin'), 1, array('class' => 'txp-heading')),\n        'div', array('class' => 'txp-layout-2col-cell-1'));\n\n    if (is_disabled('mail')) {\n        echo graf(\n            span(null, array('class' => 'ui-icon ui-icon-alert')).' '.\n            gTxt('warn_mail_unavailable'),\n            array('class' => 'alert-block warning')\n        );\n    }\n\n    $buttons = array();\n\n    // Change password button.\n    $buttons[] = sLink('admin', 'new_pass_form', gTxt('change_password'), 'txp-button');\n\n    if (!has_privs('admin.edit')) {\n        // Change email address button.\n        $buttons[] = sLink('admin', 'change_email_form', gTxt('change_email_address'), 'txp-button');\n    } else {\n        // New author button.\n        $buttons[] = sLink('admin', 'author_edit', gTxt('add_new_author'), 'txp-button');\n    }\n\n    // User list.\n    if (has_privs('admin.list')) {\n        extract(gpsa(array(\n            'page',\n            'sort',\n            'dir',\n            'crit',\n            'search_method',\n        )));\n\n        if ($sort === '') {\n            $sort = get_pref('admin_sort_column', 'name');\n        } else {\n            if (!in_array($sort, array('name', 'RealName', 'email', 'privs', 'last_login'))) {\n                $sort = 'name';\n            }\n\n            set_pref('admin_sort_column', $sort, 'admin', 2, '', 0, PREF_PRIVATE);\n        }\n\n        if ($dir === '') {\n            $dir = get_pref('admin_sort_dir', 'asc');\n        } else {\n            $dir = ($dir == 'desc') ? \"desc\" : \"asc\";\n            set_pref('admin_sort_dir', $dir, 'admin', 2, '', 0, PREF_PRIVATE);\n        }\n\n        $sort_sql = $sort.' '.$dir;\n\n        $switch_dir = ($dir == 'desc') ? 'asc' : 'desc';\n\n        $search = new Filter($event,\n            array(\n                'id' => array(\n                    'column' => 'txp_users.user_id',\n                    'label'  => gTxt('ID'),\n                    'type'   => 'integer',\n                ),\n                'login' => array(\n                    'column' => 'txp_users.name',\n                    'label'  => gTxt('name'),\n                ),\n                'RealName' => array(\n                    'column' => 'txp_users.RealName',\n                    'label'  => gTxt('RealName'),\n                ),\n                'email' => array(\n                    'column' => 'txp_users.email',\n                    'label'  => gTxt('email'),\n                ),\n                'privs' => array(\n                    'column' => array('txp_users.privs'),\n                    'label'  => gTxt('privileges'),\n                    'type'   => 'boolean',\n                ),\n            )\n        );\n\n        $search->setAliases('privs', $levels);\n\n        list($criteria, $crit, $search_method) = $search->getFilter(array(\n                'id' => array('can_list' => true),\n            ));\n\n        $search_render_options = array(\n            'placeholder' => 'search_users',\n        );\n\n        $total = getCount('txp_users', $criteria);\n\n        echo n.tag_start('div', array(\n            'class' => 'txp-layout-2col-cell-2',\n            'id'    => 'users_control',\n        ));\n\n        if ($total < 1) {\n            if ($criteria != 1) {\n                echo $search->renderForm('author_list', $search_render_options).\n                    graf(\n                    span(null, array('class' => 'ui-icon ui-icon-info')).' '.\n                    gTxt('no_results_found'), array('class' => 'alert-block information')\n                ).n.tag_end('div');\n            }\n\n            return;\n        }\n\n        $limit = max($author_list_pageby, 15);\n\n        list($page, $offset, $numPages) = pager($total, $limit, $page);\n\n        $use_multi_edit = (has_privs('admin.edit') && ($total > 1 or safe_count('txp_users', \"1 = 1\") > 1));\n\n        echo $search->renderForm('author_list', $search_render_options).'</div>';\n\n        echo\n            n.tag_start('div', array(\n                'class' => 'txp-layout-1col',\n                'id'    => 'users_container',)).\n             n.tag(join(n, $buttons), 'div', array('class' => 'txp-control-panel'));\n\n        $rs = safe_rows_start(\n            \"*, UNIX_TIMESTAMP(last_access) AS last_login\",\n            'txp_users',\n            \"$criteria ORDER BY $sort_sql LIMIT $offset, $limit\"\n        );\n\n        if ($rs) {\n            echo\n                n.tag_start('form', array(\n                    'class'  => 'multi_edit_form',\n                    'id'     => 'users_form',\n                    'name'   => 'longform',\n                    'method' => 'post',\n                    'action' => 'index.php',\n                )).\n                n.tag_start('div', array('class' => 'txp-listtables')).\n                n.tag_start('table', array('class' => 'txp-list')).\n                n.tag_start('thead').\n                tr(\n                    (\n                        ($use_multi_edit)\n                        ? hCell(\n                            fInput('checkbox', 'select_all', 0, '', '', '', '', '', 'select_all'),\n                                '', ' class=\"txp-list-col-multi-edit\" scope=\"col\" title=\"'.gTxt('toggle_all_selected').'\"'\n                        )\n                        : hCell('', '', ' class=\"txp-list-col-multi-edit\" scope=\"col\"')\n                    ).\n                    column_head(\n                        'login_name', 'name', 'admin', true, $switch_dir, '', '',\n                            (('name' == $sort) ? \"$dir \" : '').'txp-list-col-login-name name'\n                    ).\n                    column_head(\n                        'real_name', 'RealName', 'admin', true, $switch_dir, '', '',\n                            (('RealName' == $sort) ? \"$dir \" : '').'txp-list-col-real-name name'\n                    ).\n                    column_head(\n                        'email', 'email', 'admin', true, $switch_dir, '', '',\n                            (('email' == $sort) ? \"$dir \" : '').'txp-list-col-email'\n                    ).\n                    column_head(\n                        'privileges', 'privs', 'admin', true, $switch_dir, '', '',\n                            (('privs' == $sort) ? \"$dir \" : '').'txp-list-col-privs'\n                    ).\n                    column_head(\n                        'last_login', 'last_login', 'admin', true, $switch_dir, '', '',\n                            (('last_login' == $sort) ? \"$dir \" : '').'txp-list-col-last-login date'\n                    )\n                ).\n                n.tag_end('thead').\n                n.tag_start('tbody');\n\n            while ($a = nextRow($rs)) {\n                extract(doSpecial($a));\n\n                echo tr(\n                    td(\n                        ((has_privs('admin.edit') and $txp_user != $a['name']) ? fInput('checkbox', 'selected[]', $a['name'], 'checkbox') : ''), '', 'txp-list-col-multi-edit'\n                    ).\n                    hCell(\n                        ((has_privs('admin.edit')) ? eLink('admin', 'author_edit', 'user_id', $user_id, $name) : $name), '', ' class=\"txp-list-col-login-name name\" scope=\"row\"'\n                    ).\n                    td(\n                        $RealName, '', 'txp-list-col-real-name name'\n                    ).\n                    td(\n                        href($email, 'mailto:'.$email), '', 'txp-list-col-email'\n                    ).\n                    td(\n                        get_priv_level($privs), '', 'txp-list-col-privs'\n                    ).\n                    td(\n                        ($last_login ? safe_strftime('%b&#160;%Y', $last_login) : ''), '', 'txp-list-col-last-login date'\n                    )\n                );\n            }\n\n            echo\n                n.tag_end('tbody').\n                n.tag_end('table').\n                n.tag_end('div').\n                (\n                    ($use_multi_edit)\n                    ? author_multiedit_form($page, $sort, $dir, $crit, $search_method)\n                    : ''\n                ).\n                tInput().\n                n.tag_end('form').\n                n.tag_start('div', array(\n                    'class' => 'txp-navigation',\n                    'id'    => 'users_navigation',\n                )).\n                pageby_form('admin', $author_list_pageby).\n                nav_form('admin', $page, $numPages, $sort, $dir, $crit, $search_method).\n                n.tag_end('div');\n        }\n\n        echo n.tag_end('div');\n    } else {\n        echo\n            n.tag_start('div', array(\n                'class' => 'txp-layout-1col',\n                'id'    => 'users_container',)).\n            n.tag(join(n, $buttons), 'div', array('class' => 'txp-control-panel')).\n            n.tag_end('div');\n    }\n}\n\n/**\n * Renders and outputs the user editor panel.\n *\n * Accessing requires 'admin.edit' privileges.\n */\n\nfunction author_edit()\n{\n    global $step, $txp_user;\n\n    require_privs('admin.edit');\n\n    pagetop(gTxt('tab_site_admin'), '');\n\n    $vars = array('user_id', 'name', 'RealName', 'email', 'privs');\n    $rs = array();\n    $out = array();\n\n    extract(gpsa($vars));\n\n    $is_edit = ($user_id && $step == 'author_edit');\n\n    if ($is_edit) {\n        $user_id = assert_int($user_id);\n        $rs = safe_row(\"*\", 'txp_users', \"user_id = $user_id\");\n        extract($rs);\n    }\n\n    if ($is_edit) {\n        $out[] = hed(gTxt('edit_author'), 2);\n    } else {\n        $out[] = hed(gTxt('add_new_author'), 2);\n    }\n\n    if ($is_edit) {\n        $out[] = inputLabel(\n            'login_name',\n            strong(txpspecialchars($name)),\n            '', '', array('class' => 'txp-form-field edit-admin-login-name')\n        );\n    } else {\n        $out[] = inputLabel(\n            'login_name',\n            fInput('text', 'name', $name, '', '', '', INPUT_REGULAR, '', 'login_name'),\n            'login_name', 'add_new_author', array('class' => 'txp-form-field edit-admin-login-name')\n        );\n    }\n\n    $out[] = inputLabel(\n            'real_name',\n            fInput('text', 'RealName', $RealName, '', '', '', INPUT_REGULAR, '', 'real_name'),\n            'real_name', '', array('class' => 'txp-form-field edit-admin-name')\n        ).\n        inputLabel(\n            'login_email',\n            fInput('email', 'email', $email, '', '', '', INPUT_REGULAR, '', 'login_email'),\n            'email', '', array('class' => 'txp-form-field edit-admin-email')\n        );\n\n    if ($txp_user != $name) {\n        $out[] = inputLabel(\n            'privileges',\n            privs($privs),\n            'privileges', 'about_privileges', array('class' => 'txp-form-field edit-admin-privileges')\n        );\n    } else {\n        $out[] = inputLabel(\n            'privileges',\n            strong(get_priv_level($privs)),\n            '', '', array('class' => 'txp-form-field edit-admin-privileges')\n        ).\n        hInput('privs', $privs);\n    }\n\n    $out[] = pluggable_ui('author_ui', 'extend_detail_form', '', $rs).\n        graf(fInput('submit', '', gTxt('save'), 'publish')).\n        eInput('admin');\n\n    if ($user_id) {\n        $out[] = hInput('user_id', $user_id).\n            hInput('name', $name).\n            sInput('author_save');\n    } else {\n        $out[] = sInput('author_save_new');\n    }\n\n    echo form(join('', $out), '', '', 'post', 'txp-edit', '', 'user_edit');\n}\n\n/**\n * Updates pageby value.\n */\n\nfunction admin_change_pageby()\n{\n    event_change_pageby('author');\n    author_list();\n}\n\n/**\n * Renders multi-edit form.\n *\n * @param  int    $page          The page\n * @param  string $sort          The sorting value\n * @param  string $dir           The sorting direction\n * @param  string $crit          The search string\n * @param  string $search_method The search method\n * @return string HTML\n */\n\nfunction author_multiedit_form($page, $sort, $dir, $crit, $search_method)\n{\n    $privileges = privs();\n    $users = safe_column(\"name\", 'txp_users', \"1 = 1\");\n\n    $methods = array(\n        'changeprivilege' => array('label' => gTxt('changeprivilege'), 'html' => $privileges),\n        'resetpassword'   => gTxt('resetpassword'),\n    );\n\n    if (count($users) > 1) {\n        $methods['delete'] = array(\n            'label' => gTxt('delete'),\n            'html'  => tag(gTxt('assign_assets_to'), 'label', array('for' => 'assign_assets')).\n                selectInput('assign_assets', $users, '', true, '', 'assign_assets'),\n        );\n    }\n\n    return multi_edit($methods, 'admin', 'admin_multi_edit', $page, $sort, $dir, $crit, $search_method);\n}\n\n/**\n * Processes multi-edit actions.\n *\n * Accessing requires 'admin.edit' privileges.\n */\n\nfunction admin_multi_edit()\n{\n    global $txp_user;\n\n    require_privs('admin.edit');\n\n    $selected = ps('selected');\n    $method = ps('edit_method');\n    $changed = array();\n    $msg = '';\n\n    if (!$selected or !is_array($selected)) {\n        return author_list();\n    }\n\n    $names = safe_column(\n        \"name\",\n        'txp_users',\n        \"name IN (\".join(',', quote_list($selected)).\") AND name != '\".doSlash($txp_user).\"'\"\n    );\n\n    if (!$names) {\n        return author_list();\n    }\n\n    switch ($method) {\n        case 'delete':\n\n            $assign_assets = ps('assign_assets');\n\n            if (!$assign_assets) {\n                $msg = array('must_reassign_assets', E_ERROR);\n            } elseif (in_array($assign_assets, $names)) {\n                $msg = array('cannot_assign_assets_to_deletee', E_ERROR);\n            } elseif (remove_user($names, $assign_assets)) {\n                $changed = $names;\n                callback_event('authors_deleted', '', 0, $changed);\n                $msg = 'author_deleted';\n            }\n\n            break;\n\n        case 'changeprivilege':\n\n            if (change_user_group($names, ps('privs'))) {\n                $changed = $names;\n                $msg = 'author_updated';\n            }\n\n            break;\n\n        case 'resetpassword':\n\n            foreach ($names as $name) {\n                send_reset_confirmation_request($name);\n                $changed[] = $name;\n            }\n\n            $msg = 'password_reset_confirmation_request_sent';\n            break;\n    }\n\n    if ($changed) {\n        return author_list(gTxt($msg, array('{name}' => txpspecialchars(join(', ', $changed)))));\n    }\n\n    author_list($msg);\n}\n\n/**\n * Legacy panel.\n *\n * @param      string|array $message\n * @deprecated in 4.2.0\n */\n\nfunction admin($message = '')\n{\n    author_list($message);\n}\n", "<?php\n\n/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2005 Dean Allen\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Login panel.\n *\n * @package Admin\\Auth\n */\n\nif (!defined('txpinterface')) {\n    die('txpinterface is undefined.');\n}\n\n/**\n * Renders a login panel if necessary.\n *\n * If the current visitor isn't authenticated,\n * terminates the script and instead renders\n * a login page.\n *\n * @access private\n */\n\nfunction doAuth()\n{\n    global $txp_user;\n\n    $txp_user = null;\n\n    $message = doTxpValidate();\n\n    if (!$txp_user) {\n        doLoginForm($message);\n    }\n\n    ob_start();\n}\n\n/**\n * Renders and outputs a login form.\n *\n * This function outputs a full HTML document,\n * including &lt;head&gt; and footer.\n *\n * @param string|array $message The activity message\n */\n\nfunction doLoginForm($message)\n{\n    global $textarray_script, $event, $step;\n\n    include txpath.'/lib/txplib_head.php';\n\n    $event = 'login';\n\n    $stay = (cs('txp_login') && !gps('logout') ? 1 : 0);\n    $reset = gps('reset');\n    $confirm = gps('confirm');\n\n    if (gps('logout')) {\n        $step = 'logout';\n    } elseif ($reset) {\n        $step = 'reset';\n    } elseif ($confirm) {\n        $step = 'confirm';\n    }\n\n    $name = join(',', array_slice(explode(',', cs('txp_login')), 0, -1));\n    $out = array();\n\n    if ($reset) {\n        $pageTitle = gTxt('password_reset');\n        $out[] = hed(gTxt('password_reset'), 1, array('id' => 'txp-login-heading')).\n            n.tag(\n                n.tag(gTxt('name'), 'label', array('for' => 'login_name')).\n                fInput('text', 'p_userid', $name, '', '', '', INPUT_REGULAR, '', 'login_name'),\n                'div', array('class' => 'txp-form-field login-name')).\n            graf(\n                fInput('submit', '', gTxt('password_reset_button'), 'publish')).\n            graf(\n                href(gTxt('back_to_login'), 'index.php'), array('class' => 'login-return')).\n            hInput('p_reset', 1);\n    } elseif ($confirm) {\n        $pageTitle = gTxt('change_password');\n        $out[] = hed(gTxt('change_password'), 1, array('id' => 'txp-change-password-heading')).\n            n.tag(\n                n.tag(gTxt('new_password'), 'label', array(\n                    'class' => 'txp-form-field-label',\n                    'for' => 'change_password',\n                )).\n                fInput('password', 'p_password', '', 'txp-form-field-input txp-maskable', '', '', INPUT_REGULAR, '', 'change_password', false, true),\n                'div', array('class' => 'txp-form-field change-password')).\n            graf(\n                checkbox('unmask', 1, false, 0, 'show_password').n.\n                tag(gTxt('show_password'), 'label', array('for' => 'show_password'))\n                , array('class' => 'show-password')).\n            graf(\n                fInput('submit', '', gTxt('password_confirm_button'), 'publish').n\n            ).\n            graf(\n                href(gTxt('back_to_login'), 'index.php'), array('class' => 'login-return'));\n        $out[] = hInput('hash', gps('confirm'));\n        $out[] = hInput('p_alter', 1);\n    } else {\n        $pageTitle = gTxt('login');\n        $out[] = hed(gTxt('login_to_textpattern'), 1, array('id' => 'txp-login-heading')).\n            n.tag(\n                n.tag(gTxt('name'), 'label', array('for' => 'login_name')).\n                fInput('text', 'p_userid', $name, '', '', '', INPUT_REGULAR, '', 'login_name'),\n                'div', array('class' => 'txp-form-field login-name')).\n            n.tag(\n                n.tag(gTxt('password'), 'label', array('for' => 'login_password')).\n                fInput('password', 'p_password', '', '', '', '', INPUT_REGULAR, '', 'login_password'),\n                'div', array('class' => 'txp-form-field login-password')).\n            graf(\n                checkbox('stay', 1, $stay, '', 'login_stay').n.\n                tag(gTxt('stay_logged_in'), 'label', array('for' => 'login_stay')).\n                popHelp('remember_login').n, array('class' => 'login-stay')).\n\n            graf(\n                fInput('submit', '', gTxt('log_in_button'), 'publish').n\n            ).\n            graf(\n                href(gTxt('password_forgotten'), '?reset=1'), array('class' => 'login-forgot'));\n\n        if (gps('event')) {\n            $out[] = eInput(gps('event'));\n        }\n    }\n\n    pagetop($pageTitle, $message);\n\n    echo form(\n        join('', $out), '', '', 'post', 'txp-login', '', 'login_form').\n\n    script_js('textpattern.textarray = '.json_encode($textarray_script)).\n    n.'</main><!-- /txp-body -->'.n.'</body>'.n.'</html>';\n\n    exit(0);\n}\n\n/**\n * Validates the sent login form and creates a session.\n *\n * During the reset request procedure, it is conceivable to verify the\n * token as soon as it is presented in the URL, but that would require:\n *  a) very similar code in both p_confirm and p_alter branches (unless refactored)\n *  b) some way (other than via the message) to signal back to doLoginForm() that\n *     the token is bogus so the 'change your password' form is not displayed.\n *     Perhaps raise an exception?\n *\n * @todo  Investigate validating confirm token as soon as it's presented in URL (better UX).\n * @todo  Could this be done via a Validator()?\n *\n * @return string A localised feedback message\n * @see    doLoginForm()\n */\n\nfunction doTxpValidate()\n{\n    global $logout, $txp_user;\n\n    $p_userid   = ps('p_userid');\n    $p_password = ps('p_password');\n    $p_reset    = ps('p_reset');\n    $p_alter    = ps('p_alter');\n    $stay       = ps('stay');\n    $p_confirm  = gps('confirm');\n    $logout     = gps('logout');\n    $message    = '';\n    $pub_path   = preg_replace('|//$|', '/', rhu.'/');\n\n    if (cs('txp_login') && strpos(cs('txp_login'), ',')) {\n        $txp_login = explode(',', cs('txp_login'));\n        $c_hash = end($txp_login);\n        $c_userid = join(',', array_slice($txp_login, 0, -1));\n    } else {\n        $c_hash   = '';\n        $c_userid = '';\n    }\n\n    if ($logout) {\n        setcookie('txp_login', '', time() - 3600);\n        setcookie('txp_login_public', '', time() - 3600, $pub_path);\n    }\n\n    if ($c_userid && strlen($c_hash) === 32) {\n        // Cookie exists.\n        // @todo Improve security by using a better nonce/salt mechanism. md5 and uniqid are bad.\n        // @todo Flag cookie-based logins and force confirmation of old password when\n        // changing it from Admin->Users panel.\n        $r = safe_row(\n            \"name, nonce\",\n            'txp_users',\n            \"name = '\".doSlash($c_userid).\"' AND last_access > DATE_SUB(NOW(), INTERVAL 30 DAY)\"\n        );\n\n        if ($r && $r['nonce'] && $r['nonce'] === md5($c_userid.pack('H*', $c_hash))) {\n            // Cookie is good.\n            if ($logout) {\n                // Destroy nonce.\n                safe_update(\n                    'txp_users',\n                    \"nonce = '\".doSlash(md5(uniqid(mt_rand(), true))).\"'\",\n                    \"name = '\".doSlash($c_userid).\"'\"\n                );\n            } else {\n                // Create $txp_user.\n                $txp_user = $r['name'];\n            }\n\n            return $message;\n        } else {\n            txp_status_header('401 Your session has expired');\n            setcookie('txp_login', $c_userid, time() + 3600 * 24 * 365);\n            setcookie('txp_login_public', '', time() - 3600, $pub_path);\n            $message = array(gTxt('bad_cookie'), E_ERROR);\n        }\n    } elseif ($p_userid && $p_password) {\n        // Incoming login vars.\n        $name = txp_validate($p_userid, $p_password);\n\n        if ($name !== false) {\n            $c_hash = md5(uniqid(mt_rand(), true));\n            $nonce  = md5($name.pack('H*', $c_hash));\n\n            safe_update(\n                'txp_users',\n                \"nonce = '\".doSlash($nonce).\"'\",\n                \"name = '\".doSlash($name).\"'\"\n            );\n\n            setcookie(\n                'txp_login',\n                $name.','.$c_hash,\n                ($stay ? time() + 3600 * 24 * 365 : 0),\n                null,\n                null,\n                null,\n                LOGIN_COOKIE_HTTP_ONLY\n            );\n\n            setcookie(\n                'txp_login_public',\n                substr(md5($nonce), -10).$name,\n                ($stay ? time() + 3600 * 24 * 30 : 0),\n                $pub_path\n            );\n\n            // Login is good, create $txp_user.\n            $txp_user = $name;\n\n            return '';\n        } else {\n            sleep(3);\n            txp_status_header('401 Could not log in with that username/password');\n            $message = array(gTxt('could_not_log_in'), E_ERROR);\n        }\n    } elseif ($p_reset) {\n        // Reset request.\n        sleep(3);\n\n        include_once txpath.'/lib/txplib_admin.php';\n\n        $message = ($p_userid) ? send_reset_confirmation_request($p_userid) : '';\n    } elseif ($p_alter) {\n        // Password change confirmation.\n        sleep(3);\n        global $sitename;\n\n        $pass = ps('p_password');\n\n        if (trim($pass) === '') {\n            $message = array(gTxt('password_required'), E_ERROR);\n        } else {\n            $hash = gps('hash');\n            $selector = substr($hash, SALT_LENGTH);\n            $tokenInfo = safe_row(\"reference_id, token, expires\", 'txp_token', \"selector = '\".doSlash($selector).\"' AND type='password_reset'\");\n\n            if ($tokenInfo) {\n                if (strtotime($tokenInfo['expires']) <= time()) {\n                    $message = array(gTxt('token_expired'), E_ERROR);\n                } else {\n                    $uid = assert_int($tokenInfo['reference_id']);\n                    $row = safe_row(\"name, email, nonce, pass AS old_pass\", 'txp_users', \"user_id = $uid\");\n\n                    if ($row['nonce'] && ($hash === bin2hex(pack('H*', substr(hash(HASHING_ALGORITHM, $row['nonce'].$selector.$row['old_pass']), 0, SALT_LENGTH))).$selector)) {\n                        if (change_user_password($row['name'], $pass)) {\n                            $body = gTxt('greeting').' '.$row['name'].','.n.n.gTxt('password_change_confirmation');\n                            txpMail($row['email'], \"[$sitename] \".gTxt('password_changed'), $body);\n                            $message = gTxt('password_changed');\n\n                            // Invalidate all reset requests in the wild for this user.\n                            safe_delete(\"txp_token\", \"reference_id = $uid AND type = 'password_reset'\");\n                        }\n                    } else {\n                        $message = array(gTxt('invalid_token'), E_ERROR);\n                    }\n                }\n            } else {\n                $message = array(gTxt('invalid_token'), E_ERROR);\n            }\n        }\n    }\n\n    $txp_user = '';\n\n    return $message;\n}\n", "<?php\n\n/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Constants.\n */\n\nif (!defined('TXP_DEBUG')) {\n    /**\n     * If set to \"1\", dumps debug log to the temp directory.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package Debug\n     * @example\n     * define('TXP_DEBUG', 1);\n     */\n\n    define('TXP_DEBUG', 0);\n}\n\n/**\n * Trace log constants.\n *\n * @since   4.6.0\n * @package Debug\n * @see     trace_log()\n */\n\ndefine('TEXTPATTERN_TRACE_START',   0x1);\ndefine('TEXTPATTERN_TRACE_DISPLAY', 0x2);\ndefine('TEXTPATTERN_TRACE_RESULT',  0x4);\ndefine('TEXTPATTERN_TRACE_QUIET',   0x8);\n\n\n/**\n * Comment spam status.\n *\n * @package Comment\n */\n\ndefine('SPAM', -1);\n\n/**\n * Comment moderate status.\n *\n * @package Comment\n */\n\ndefine('MODERATE', 0);\n\n/**\n * Comment spam status.\n *\n * @package Comment\n */\n\ndefine('VISIBLE', 1);\n\n/**\n * Comment reload status.\n *\n * @package Comment\n */\n\ndefine('RELOAD', -99);\n\nif (!defined('RPC_SERVER')) {\n    /**\n     * RPC server location.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @example\n     * define('RPC_SERVER', 'http://rpc.example.com');\n     */\n\n    define('RPC_SERVER', 'http://rpc.textpattern.com');\n}\n\nif (!defined('HELP_URL')) {\n    /**\n     * The location where help documentation is fetched.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @example\n     * define('HELP_URL', 'http://rpc.example.com/help/');\n     */\n\n    define('HELP_URL', 'http://rpc.textpattern.com/help/');\n}\n\n/**\n * Do not format text.\n *\n * @var     string\n * @package Textfilter\n */\n\ndefine('LEAVE_TEXT_UNTOUCHED', '0');\n\n/**\n * Format text with Textile.\n *\n * @var     string\n * @package Textfilter\n */\n\ndefine('USE_TEXTILE', '1');\n\n/**\n * Replace line breaks with HTML &lt;br /&gt; tag.\n *\n * @var     string\n * @package Textfilter\n */\n\ndefine('CONVERT_LINEBREAKS', '2');\n\n/**\n * System is Windows if TRUE.\n *\n * @package System\n */\n\ndefine('IS_WIN', strpos(strtoupper(PHP_OS), 'WIN') === 0);\n\n/**\n * Directory separator character.\n *\n * @package File\n */\n\ndefine('DS', defined('DIRECTORY_SEPARATOR') ? DIRECTORY_SEPARATOR : (IS_WIN ? '\\\\' : '/'));\n\n/**\n * Magic quotes GPC, TRUE if on.\n *\n * @package Network\n */\n\ndefine('MAGIC_QUOTES_GPC', get_magic_quotes_gpc());\n\nif (!defined('REGEXP_UTF8')) {\n    /**\n     * TRUE if the system supports UTF-8 regex patterns.\n     *\n     * This constant can be overridden from the config.php in case UTF-8 regex\n     * patterns cause issues.\n     *\n     * @package System\n     * @example\n     * define('REGEXP_UTF8', false);\n     */\n\n    define('REGEXP_UTF8', @preg_match('@\\pL@u', 'q'));\n}\n\n/**\n * NULL datetime for use in an SQL statement.\n *\n * @package DB\n */\n\ndefine('NULLDATETIME', '\\'0000-00-00 00:00:00\\'');\n\n/**\n * Permlink URL mode.\n *\n * @package    URL\n * @deprecated ?\n */\n\ndefine('PERMLINKURL', 0);\n\n/**\n * Pagelink URL mode.\n *\n * @package    URL\n * @deprecated ?\n */\n\ndefine('PAGELINKURL', 1);\n\nif (!defined('EXTRA_MEMORY')) {\n    /**\n     * Allocated extra memory.\n     *\n     * Used when creating thumbnails for instance.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package System\n     * @example\n     * define('EXTRA_MEMORY', '64M');\n     */\n\n    define('EXTRA_MEMORY', '32M');\n}\n\n/**\n * PHP is run as CGI.\n *\n * @package System\n */\n\ndefine('IS_CGI', strpos(PHP_SAPI, 'cgi') === 0);\n\n/**\n * PHP is run as FCGI.\n *\n * @package System\n */\n\ndefine('IS_FASTCGI', IS_CGI and empty($_SERVER['FCGI_ROLE']) and empty($_ENV['FCGI_ROLE']));\n\n/**\n * PHP is run as Apache module.\n *\n * @package System\n */\n\ndefine('IS_APACHE', !IS_CGI and strpos(PHP_SAPI, 'apache') === 0);\n\n/**\n * Preference is user-private.\n *\n * @package Pref\n * @see     set_pref()\n */\n\ndefine('PREF_PRIVATE', true);\n\n/**\n * Preference is global.\n *\n * @package Pref\n * @see     set_pref()\n */\n\ndefine('PREF_GLOBAL', false);\n\n/**\n * Preference type is basic.\n *\n * @package    Pref\n * @deprecated in 4.6.0\n * @see        PREF_CORE\n * @see        set_pref()\n */\n\ndefine('PREF_BASIC', 0);\n\n/**\n * Preference type is a core setting.\n *\n * @package Pref\n * @see     set_pref()\n */\n\ndefine('PREF_CORE', 0);\n\n/**\n * Preference type is advanced.\n *\n * @package    Pref\n * @deprecated in 4.6.0\n * @see        PREF_CORE\n * @see        PREF_PLUGIN\n * @see        set_pref()\n */\n\ndefine('PREF_ADVANCED', 1);\n\n/**\n * Preference type is a plugin or third party setting.\n *\n * @package Pref\n * @see     set_pref()\n */\n\ndefine('PREF_PLUGIN', 1);\n\n/**\n * Preference type is hidden.\n *\n * @package Pref\n * @see     set_pref()\n */\n\ndefine('PREF_HIDDEN', 2);\n\n/**\n * Plugin flag: has an options page.\n */\n\ndefine('PLUGIN_HAS_PREFS', 0x0001);\n\n/**\n * Plugin flag: offers lifecycle callbacks.\n */\n\ndefine('PLUGIN_LIFECYCLE_NOTIFY', 0x0002);\n\n/**\n * Reserved bits for use by Textpattern core.\n */\n\ndefine('PLUGIN_RESERVED_FLAGS', 0x0fff);\n\nif (!defined('LOG_REFERER_PROTOCOLS')) {\n    /**\n     * Sets accepted protocols for HTTP referrer header.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package Log\n     * @since   4.6.0\n     * @example\n     * define('LOG_REFERER_PROTOCOLS', 'http');\n     */\n\n    define('LOG_REFERER_PROTOCOLS', 'http, https');\n}\n\nif (!defined('PASSWORD_LENGTH')) {\n    /**\n     * Password default length, in characters.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package User\n     * @example\n     * define('PASSWORD_LENGTH', 14);\n     */\n\n    define('PASSWORD_LENGTH', 10);\n}\n\nif (!defined('PASSWORD_COMPLEXITY')) {\n    /**\n     * Password iteration strength count.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package User\n     * @example\n     * define('PASSWORD_COMPLEXITY', 2);\n     */\n\n    define('PASSWORD_COMPLEXITY', 8);\n}\n\nif (!defined('PASSWORD_PORTABILITY')) {\n    /**\n     * Passwords are created portable if TRUE.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package User\n     * @example\n     * define('PASSWORD_PORTABILITY', false);\n     */\n\n    define('PASSWORD_PORTABILITY', true);\n}\n\nif (!defined('PASSWORD_SYMBOLS')) {\n    /**\n     * Symbols used in auto-generated passwords.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package User\n     * @since   4.6.0\n     * @see     generate_password()\n     * @example\n     * define('PASSWORD_SYMBOLS', '23456789ABCDEFGHJKLMNPQRSTUYXZabcdefghijkmnopqrstuvwxyz_?!-');\n     */\n\n    define('PASSWORD_SYMBOLS', '23456789abcdefghijkmnopqrstuvwxyz');\n}\n\nif (!defined('HASHING_ALGORITHM')) {\n    /**\n     * Algorithm to use for hashing passwords/reset requests.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package User\n     * @since   4.6.0\n     * @see     PHP's hash_algos() function\n     * @example\n     * define('HASHING_ALGORITHM', 'whirlpool');\n     */\n\n    define('HASHING_ALGORITHM', 'ripemd256');\n}\n\nif (!defined('SALT_LENGTH')) {\n    /**\n     * Length of salt/selector hashes.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package User\n     * @since   4.6.0\n     * @example\n     * define('SALT_LENGTH', '80');\n     */\n\n    define('SALT_LENGTH', '64');\n}\n\nif (!defined('RESET_EXPIRY_MINUTES')) {\n    /**\n     * Length of time (in minutes) that a password reset request remains valid.\n     *\n     * This constant can be overridden from the config.php.\n     * Values under 60 may fall foul of DST changeover times, but meh.\n     *\n     * @package User\n     * @since   4.6.0\n     * @example\n     * define('RESET_EXPIRY_MINUTES', '90');\n     */\n\n    define('RESET_EXPIRY_MINUTES', '20');\n}\n\nif (!defined('LOGIN_COOKIE_HTTP_ONLY')) {\n    /**\n     * If TRUE, login cookie is set just for HTTP.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package CSRF\n     * @example\n     * define('LOGIN_COOKIE_HTTP_ONLY', false);\n     */\n\n    define('LOGIN_COOKIE_HTTP_ONLY', true);\n}\n\nif (!defined('X_FRAME_OPTIONS')) {\n    /**\n     * Sets X-Frame-Options HTTP header's value.\n     *\n     * This is used to prevent framing of authenticated pages.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package CSRF\n     * @example\n     * define('X_FRAME_OPTIONS', 'DENY');\n     */\n\n    define('X_FRAME_OPTIONS', 'SAMEORIGIN');\n}\n\nif (!defined('X_UA_COMPATIBLE')) {\n    /**\n     * Sets X-UA-Compatible HTTP header's value.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @since   4.6.0\n     * @package HTML\n     * @example\n     * define('X_UA_COMPATIBLE', 'IE=IE9');\n     */\n\n    define('X_UA_COMPATIBLE', 'IE=edge,chrome=1');\n}\n\nif (!defined('AJAX_TIMEOUT')) {\n    /**\n     * AJAX timeout in seconds.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package Ajax\n     * @example\n     * define('AJAX_TIMEOUT', 10);\n     */\n\n    define('AJAX_TIMEOUT', max(30000, 1000 * @ini_get('max_execution_time')));\n}\n\n/**\n * Render on initial synchronous page load.\n *\n * @since   4.5.0\n * @package Ajax\n */\n\ndefine('PARTIAL_STATIC', 0);\n\n/**\n * Render as HTML partial on every page load.\n *\n * @since   4.5.0\n * @package Ajax\n */\n\ndefine('PARTIAL_VOLATILE', 1);\n\n/**\n * Render as an element's jQuery.val() on every page load.\n *\n * @since   4.5.0\n * @package Ajax\n */\n\ndefine('PARTIAL_VOLATILE_VALUE', 2);\n\n/**\n * Draft article status ID.\n *\n * @package Article\n */\n\ndefine('STATUS_DRAFT', 1);\n\n/**\n * Hidden article status ID.\n *\n * @package Article\n */\n\ndefine('STATUS_HIDDEN', 2);\n\n/**\n * Pending article status ID.\n *\n * @package Article\n */\n\ndefine('STATUS_PENDING', 3);\n\n/**\n * Live article status ID.\n *\n * @package Article\n */\n\ndefine('STATUS_LIVE', 4);\n\n/**\n * Sticky article status ID.\n *\n * @package Article\n */\n\ndefine('STATUS_STICKY', 5);\n\nif (!defined('WRITE_RECENT_ARTICLES_COUNT')) {\n    /**\n     * Number of recent articles displayed on the Write panel.\n     *\n     * This constant can be overridden from the config.php.\n     *\n     * @package Admin\\Article\n     * @since   4.6.0\n     * @example\n     * define('WRITE_RECENT_ARTICLES_COUNT', 5);\n     */\n\n    define('WRITE_RECENT_ARTICLES_COUNT', 10);\n}\n\n/**\n * Input size extra large.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_XLARGE', 96);\n\n/**\n * Input size large.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_LARGE', 64);\n\n/**\n * Input size regular.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_REGULAR', 32);\n\n/**\n * Input size medium.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_MEDIUM', 16);\n\n/**\n * Input size small.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_SMALL', 8);\n\n/**\n * Input size extra small.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_XSMALL', 4);\n\n/**\n * Input size tiny.\n *\n * @since   4.5.0\n * @package Form\n */\n\ndefine('INPUT_TINY', 2);\n\n/**\n * Textarea height large.\n *\n * @since   4.6.0\n * @package Form\n */\n\ndefine('TEXTAREA_HEIGHT_LARGE', 24);\n\n/**\n * Textarea height regular.\n *\n * @since   4.6.0\n * @package Form\n */\n\ndefine('TEXTAREA_HEIGHT_REGULAR', 16);\n\n/**\n * Textarea height medium.\n *\n * @since   4.6.0\n * @package Form\n */\n\ndefine('TEXTAREA_HEIGHT_MEDIUM', 8);\n\n/**\n * Textarea height small.\n *\n * @since   4.6.0\n * @package Form\n */\n\ndefine('TEXTAREA_HEIGHT_SMALL', 4);\n\n/**\n * Required PHP version.\n *\n * @since   4.5.0\n * @package System\n */\n\ndefine('REQUIRED_PHP_VERSION', '5.3.3');\n\n/**\n * File integrity status good.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_GOOD', 1);\n\n/**\n * File integrity status modified.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_MODIFIED', 2);\n\n/**\n * File integrity not readable.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_NOT_READABLE', 3);\n\n/**\n * File integrity file missing.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_MISSING', 4);\n\n/**\n * File integrity not a file.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_NOT_FILE', 5);\n\n/**\n * Return integrity status.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_STATUS', 0x1);\n\n/**\n * Return integrity MD5 hashes.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_MD5', 0x2);\n\n/**\n * Return full paths.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_REALPATH', 0x4);\n\n/**\n * Return a digest.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_DIGEST', 0x8);\n\n/**\n * Return a parsed checksum file's contents.\n *\n * @since   4.6.0\n * @package Debug\n * @see     check_file_integrity()\n */\n\ndefine('INTEGRITY_TABLE', 0x10);\n\n/**\n * Link to an external script.\n *\n * @since   4.6.0\n * @package HTML\n * @see     script_js()\n */\n\ndefine('TEXTPATTERN_SCRIPT_URL', 0x1);\n\n/**\n * Attach version number to script URL if stable.\n *\n * The install is considered as a 'stable' if the version number doesn't contain\n * a '-dev' tag.\n *\n * @since   4.6.0\n * @package HTML\n * @see     script_js()\n */\n\ndefine('TEXTPATTERN_SCRIPT_ATTACH_VERSION', 0x2);\n\n/**\n * The localised string is owned by the core system.\n *\n * The string will be updated from the remote language server.\n *\n * @since   4.6.0\n * @package L10n\n */\n\ndefine('TEXTPATTERN_LANG_OWNER_SYSTEM', '');\n\n/**\n * The localised string is owned by the individual site.\n *\n * The string will not be updated from the remote language server.\n *\n * @since   4.6.0\n * @package L10n\n */\n\ndefine('TEXTPATTERN_LANG_OWNER_SITE', 'site');\n\n/**\n * Strip empty values.\n *\n * @since   4.6.0\n * @package HTML\n * @see     join_atts(), do_list_unique()\n */\n\ndefine('TEXTPATTERN_STRIP_NONE',         0);\ndefine('TEXTPATTERN_STRIP_EMPTY',        0x1);\ndefine('TEXTPATTERN_STRIP_EMPTY_STRING', 0x2);\n\n/**\n * Sends an adaptive announcement.\n *\n * The rendered message type is based on the context mode.\n *\n * @since   4.6.0\n * @package Announce\n * @see     announce()\n */\n\ndefine('TEXTPATTERN_ANNOUNCE_ADAPTIVE', 0x1);\n\n/**\n * Sends a modal announcement.\n *\n * The announcement is instructed to be rendered as soon as possible, as a modal\n * alert window.\n *\n * @since   4.6.0\n * @package Announce\n * @see     announce()\n */\n\ndefine('TEXTPATTERN_ANNOUNCE_MODAL', 0x2);\n\n/**\n * Sends an asynchronous announcement.\n *\n * @since   4.6.0\n * @package Announce\n * @see     announce()\n */\n\ndefine('TEXTPATTERN_ANNOUNCE_ASYNC', 0x4);\n\n/**\n * Sends a synchronous announcement.\n *\n * @since   4.6.0\n * @package Announce\n * @see     announce()\n */\n\ndefine('TEXTPATTERN_ANNOUNCE_REGULAR', 0x8);\n", "<?php\n\n/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Collection of password handling functions.\n *\n * @package User\n */\n\n/**\n * Emails a new user with login details.\n *\n * This function can be only executed when the currently authenticated user\n * trying to send the email was granted 'admin.edit' privileges.\n *\n * Should NEVER be used as sending plaintext passwords is wrong.\n * Will be removed in future, in lieu of sending reset request tokens.\n *\n * @param      string $RealName The real name\n * @param      string $name     The login name\n * @param      string $email    The email address\n * @param      string $password The password\n * @return     bool FALSE on error.\n * @deprecated in 4.6.0\n * @see        send_new_password(), send_reset_confirmation_request\n * @example\n * if (send_password('John Doe', 'login', 'example@example.tld', 'password'))\n * {\n *     echo \"Login details sent.\";\n * }\n */\n\nfunction send_password($RealName, $name, $email, $password)\n{\n    global $sitename;\n\n    require_privs('admin.edit');\n\n    $message = gTxt('greeting').' '.$RealName.','.\n\n        n.n.gTxt('you_have_been_registered').' '.$sitename.\n\n        n.n.gTxt('your_login_is').': '.$name.\n        n.gTxt('your_password_is').': '.$password.\n\n        n.n.gTxt('log_in_at').': '.hu.'textpattern/index.php';\n\n    return txpMail($email, \"[$sitename] \".gTxt('your_login_info'), $message);\n}\n\n/**\n * Sends a new password to an existing user.\n *\n * If the $name is FALSE, the password is sent to the currently\n * authenticated user.\n *\n * Should NEVER be used as sending plaintext passwords is wrong.\n * Will be removed in future, in lieu of sending reset request tokens.\n *\n * @param      string $password The new password\n * @param      string $email    The email address\n * @param      string $name     The login name\n * @return     bool FALSE on error.\n * @deprecated in 4.6.0\n * @see        send_reset_confirmation_request\n * @see        reset_author_pass()\n * @example\n * $pass = generate_password();\n * if (send_new_password($pass, 'example@example.tld', 'user'))\n * {\n *     echo \"Password was sent to 'user'.\";\n * }\n */\n\nfunction send_new_password($password, $email, $name)\n{\n    global $txp_user, $sitename;\n\n    if (empty($name)) {\n        $name = $txp_user;\n    }\n\n    $message = gTxt('greeting').' '.$name.','.\n\n        n.n.gTxt('your_password_is').': '.$password.\n\n        n.n.gTxt('log_in_at').': '.hu.'textpattern/index.php';\n\n    return txpMail($email, \"[$sitename] \".gTxt('your_new_password'), $message);\n}\n\n/**\n * Sends a password reset link to a user's email address.\n *\n * This function will return a success message even when the specified user\n * doesn't exist. Though an error message could be thrown when a user isn't\n * found, this is done due to security, which prevents the function from\n * leaking existing account names.\n *\n * @param  string $name The login name\n * @return string A localized message string\n * @see    send_new_password()\n * @see    reset_author_pass()\n * @example\n * echo send_reset_confirmation_request('username');\n */\n\nfunction send_reset_confirmation_request($name)\n{\n    global $sitename;\n\n    $rs = safe_row(\"user_id, email, nonce, pass\", 'txp_users', \"name = '\".doSlash($name).\"'\");\n\n    if ($rs) {\n        extract($rs);\n\n        $uid = assert_int($user_id);\n\n        // The selector becomes an indirect reference to the txp_users row,\n        // which does not leak information.\n        $selector = Txp::get('\\Textpattern\\Password\\Random')->generate(12);\n        $expiry = strftime('%Y-%m-%d %H:%M:%S', time() + (60 * RESET_EXPIRY_MINUTES));\n\n        // Use a hash of the nonce, selector and password.\n        // This ensures that confirmation requests expire automatically when:\n        //  a) The person next logs in, or\n        //  b) They successfully change their password (usually as a result of this reset request)\n        // Using the selector in the hash just injects randomness, otherwise two requests\n        // back-to-back would generate the same confirmation code.\n        // Old requests for the same user id are purged every time a new request is made.\n        $token = bin2hex(pack('H*', substr(hash(HASHING_ALGORITHM, $nonce . $selector . $pass), 0, SALT_LENGTH)));\n        $confirm = $token.$selector;\n\n        // Remove any previous reset tokens and insert the new one.\n        safe_delete(\"txp_token\", \"reference_id = $uid AND type = 'password_reset'\");\n        safe_insert(\"txp_token\",\n                \"reference_id = $uid,\n                type = 'password_reset',\n                selector = '\".doSlash($selector).\"',\n                token = '\".doSlash($token).\"',\n                expires = '\".doSlash($expiry).\"'\n            \");\n\n        $message = gTxt('greeting').' '.$name.','.\n            n.n.gTxt('password_reset_confirmation').\n            n.hu.'textpattern/index.php?confirm='.$confirm;\n        if (txpMail($email, \"[$sitename] \".gTxt('password_reset_confirmation_request'), $message)) {\n            return gTxt('password_reset_confirmation_request_sent');\n        } else {\n            return array(gTxt('could_not_mail'), E_ERROR);\n        }\n    } else {\n        // Though 'unknown_author' could be thrown, send generic 'request_sent'\n        // message instead so that (non-)existence of account names are not leaked.\n        // There's a possibility of a timing attack revealing the existence of\n        // an account, which we could defend against to some degree.\n        return gTxt('password_reset_confirmation_request_sent');\n    }\n}\n\n/**\n * Generates a password.\n *\n * Generates a random password of given length using the symbols set in\n * PASSWORD_SYMBOLS constant.\n *\n * Should NEVER be used as it is not cryptographically secure.\n * Will be removed in future, in lieu of sending reset request tokens.\n *\n * @param      int $length The length of the password\n * @return     string Random plain-text password\n * @deprecated in 4.6.0\n * @see        \\Textpattern\\Password\\Generate\n * @see        \\Textpattern\\Password\\Random\n * @example\n * echo generate_password(128);\n */\n\nfunction generate_password($length = 10)\n{\n    static $chars;\n\n    if (!$chars) {\n        $chars = str_split(PASSWORD_SYMBOLS);\n    }\n\n    $pool = false;\n    $pass = '';\n\n    for ($i = 0; $i < $length; $i++) {\n        if (!$pool) {\n            $pool = $chars;\n        }\n\n        $index = mt_rand(0, count($pool) - 1);\n        $pass .= $pool[$index];\n        unset($pool[$index]);\n        $pool = array_values($pool);\n    }\n\n    return $pass;\n}\n\n/**\n * Resets the given user's password and emails it.\n *\n * The old password is replaced with a new random-generated one.\n *\n * Should NEVER be used as sending plaintext passwords is wrong.\n * Will be removed in future, in lieu of sending reset request tokens.\n *\n * @param  string $name The login name\n * @return string A localized message string\n * @deprecated in 4.6.0\n * @see    PASSWORD_LENGTH\n * @see    generate_password()\n * @example\n * echo reset_author_pass('username');\n */\n\nfunction reset_author_pass($name)\n{\n    $email = safe_field(\"email\", 'txp_users', \"name = '\".doSlash($name).\"'\");\n\n    $new_pass = generate_password(PASSWORD_LENGTH);\n    $rs = change_user_password($name, $new_pass);\n\n    if ($rs) {\n        if (send_new_password($new_pass, $email, $name)) {\n            return gTxt('password_sent_to').' '.$email;\n        } else {\n            return gTxt('could_not_mail').' '.$email;\n        }\n    } else {\n        return gTxt('could_not_update_author').' '.txpspecialchars($name);\n    }\n}\n", "/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Collection of client-side tools.\n */\n\n/**\n * Checks if HTTP cookies are enabled.\n *\n * @return {boolean}\n */\n\nfunction checkCookies()\n{\n    var date = new Date();\n\n    date.setTime(date.getTime() + (60 * 1000));\n\n    document.cookie = 'testcookie=enabled; expired=' + date.toGMTString() + '; path=/';\n\n    cookieEnabled = (document.cookie.length > 2) ? true : false;\n\n    date.setTime(date.getTime() - (60 * 1000));\n\n    document.cookie = 'testcookie=; expires=' + date.toGMTString() + '; path=/';\n\n    return cookieEnabled;\n}\n\n/**\n * Spawns a centred popup window.\n *\n * @param {string}  url     The location\n * @param {integer} width   The width\n * @param {integer} height  The height\n * @param {string}  options A list of options\n */\n\nfunction popWin(url, width, height, options)\n{\n    var w = (width) ? width : 400;\n    var h = (height) ? height : 400;\n\n    var t = (screen.height) ? (screen.height - h) / 2 : 0;\n    var l = (screen.width) ? (screen.width - w) / 2 : 0;\n\n    var opt = (options) ? options : 'toolbar = no, location = no, directories = no, ' +\n        'status = yes, menubar = no, scrollbars = yes, copyhistory = no, resizable = yes';\n\n    var popped = window.open(url, 'popupwindow',\n        'top = ' + t + ', left = ' + l + ', width = ' + w + ', height = ' + h + ',' + opt);\n\n    popped.focus();\n}\n\n/**\n * Legacy multi-edit tool.\n *\n * @param      {object} elm\n * @deprecated in 4.6.0\n */\n\nfunction poweredit(elm)\n{\n    var something = elm.options[elm.selectedIndex].value;\n\n    // Add another chunk of HTML\n    var pjs = document.getElementById('js');\n\n    if (pjs == null) {\n        var br = document.createElement('br');\n        elm.parentNode.appendChild(br);\n\n        pjs = document.createElement('P');\n        pjs.setAttribute('id', 'js');\n        elm.parentNode.appendChild(pjs);\n    }\n\n    if (pjs.style.display == 'none' || pjs.style.display == '') {\n        pjs.style.display = 'block';\n    }\n\n    if (something != '') {\n        switch (something) {\n            default:\n                pjs.style.display = 'none';\n                break;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Basic confirmation for potentially powerful choices (like deletion,\n * for example).\n *\n * @param  {string}  msg The message\n * @return {boolean} TRUE if user confirmed the action\n */\n\nfunction verify(msg)\n{\n    return confirm(msg);\n}\n\n/**\n * Selects all multi-edit checkboxes.\n *\n * @deprecated in 4.5.0\n */\n\nfunction selectall()\n{\n    $('form[name=longform] input[type=checkbox][name=\"selected[]\"]').prop('checked', true);\n}\n\n/**\n * De-selects all multi-edit checkboxes.\n *\n * @deprecated in 4.5.0\n */\n\nfunction deselectall()\n{\n    $('form[name=longform] input[type=checkbox][name=\"selected[]\"]').prop('checked', false);\n}\n\n/**\n * Selects a range of multi-edit checkboxes.\n *\n * @deprecated in 4.5.0\n */\n\nfunction selectrange()\n{\n    var inrange = false;\n\n    $('form[name=longform] input[type=checkbox][name=\"selected[]\"]').each(function ()\n    {\n        var $this = $(this);\n\n        if ($this.is(':checked')) {\n            inrange = (!inrange) ? true : false;\n        }\n\n        if (inrange) {\n            $this.prop('checked', true);\n        }\n    });\n}\n\n/**\n * ?\n *\n * @deprecated in 4.5.0\n */\n\nfunction cleanSelects()\n{\n    var withsel = document.getElementById('withselected');\n\n    if (withsel && withsel.options[withsel.selectedIndex].value != '') {\n        return (withsel.selectedIndex = 0);\n    }\n}\n\n/**\n * Multi-edit functions.\n *\n * @param  {string|object} method Called method, or options\n * @param  {object}        opt    Options if method is a method\n * @return {object}        this\n * @since  4.5.0\n */\n\njQuery.fn.txpMultiEditForm = function (method, opt)\n{\n    var args = {};\n\n    var defaults = {\n        'checkbox'      : 'input[name=\"selected[]\"][type=checkbox]',\n        'row'           : 'tbody td',\n        'highlighted'   : 'tr',\n        'selectedClass' : 'selected',\n        'actions'       : 'select[name=edit_method]',\n        'submitButton'  : '.multi-edit input[type=submit]',\n        'selectAll'     : 'input[name=select_all][type=checkbox]',\n        'rowClick'      : true,\n        'altClick'      : true,\n        'confirmation'  : textpattern.gTxt('are_you_sure')\n    };\n\n    if ($.type(method) !== 'string') {\n        opt = method;\n        method = null;\n    } else {\n        args = opt;\n    }\n\n    this.closest('form').each(function ()\n    {\n        var $this = $(this), form = {}, methods = {}, lib = {};\n\n        if ($this.data('_txpMultiEdit')) {\n            form = $this.data('_txpMultiEdit');\n            opt = $.extend(form.opt, opt);\n        } else {\n            opt = $.extend(defaults, opt);\n            form.boxes = opt.checkbox;\n            form.editMethod = $this.find(opt.actions);\n            form.lastCheck = null;\n            form.opt = opt;\n            form.selectAll = $this.find(opt.selectAll);\n            form.button = $this.find(opt.submitButton);\n        }\n\n        /**\n         * Registers a multi-edit option.\n         *\n         * @param  {object} options\n         * @param  {string} options.label The option's label\n         * @param  {string} options.value The option's value\n         * @param  {string} options.html  The second step HTML\n         * @return {object} methods\n         */\n\n        methods.addOption = function (options)\n        {\n            var settings = $.extend({\n                'label' : null,\n                'value' : null,\n                'html'  : null\n            }, options);\n\n            if (!settings.value) {\n                return methods;\n            }\n\n            var option = form.editMethod.find('option').filter(function ()\n            {\n                return $(this).val() === settings.value;\n            });\n\n            var exists = (option.length > 0);\n            form.editMethod.val('');\n\n            if (!exists) {\n                option = $('<option />');\n            }\n\n            if (!option.data('_txpMultiMethod')) {\n                if (!option.val()) {\n                    option.val(settings.value);\n                }\n\n                if (!option.text() && settings.label) {\n                    option.text(settings.label);\n                }\n\n                option.data('_txpMultiMethod', settings.html);\n            }\n\n            if (!exists) {\n                form.editMethod.append(option);\n            }\n\n            return methods;\n        };\n\n        /**\n         * Selects rows based on supplied arguments.\n         *\n         * Only one of the filters applies at a time.\n         *\n         * @param  {object}  options\n         * @param  {array}   options.index   Indexes to select\n         * @param  {array}   options.range   Select index range, takes [min, max]\n         * @param  {array}   options.value   Values to select\n         * @param  {boolean} options.checked TRUE to check, FALSE to uncheck\n         * @return {object}  methods\n         */\n\n        methods.select = function (options)\n        {\n            var settings = $.extend({\n                'index'   : null,\n                'range'   : null,\n                'value'   : null,\n                'checked' : true\n            }, options);\n\n            var obj = $this.find(form.boxes);\n\n            if (settings.value !== null) {\n                obj = obj.filter(function ()\n                {\n                    return $.inArray($(this).val(), settings.value) !== -1;\n                });\n            } else if (settings.index !== null) {\n                obj = obj.filter(function (index)\n                {\n                    return $.inArray(index, settings.index) !== -1;\n                });\n            } else if (settings.range !== null) {\n                obj = obj.slice(settings.range[0], settings.range[1]);\n            }\n\n            obj.prop('checked', settings.checked).change();\n\n            return methods;\n        };\n\n        /**\n         * Highlights selected rows.\n         *\n         * @return {object} lib\n         */\n\n        lib.highlight = function ()\n        {\n            var element = $this.find(form.boxes);\n            element.filter(':checked').closest(opt.highlighted).addClass(opt.selectedClass);\n            element.filter(':not(:checked)').closest(opt.highlighted).removeClass(opt.selectedClass);\n            return lib;\n        };\n\n        /**\n         * Extends click region to whole row.\n         *\n         * @return {object} lib\n         */\n\n        lib.extendedClick = function ()\n        {\n            if (opt.rowClick) {\n                var selector = opt.row;\n            } else {\n                var selector = form.boxes;\n            }\n\n            $this.on('click', selector, function (e)\n            {\n                var self = ($(e.target).is(form.boxes) || $(this).is(form.boxes));\n\n                if (!self && (e.target != this || $(this).is('a, :input') || $(e.target).is('a, :input'))) {\n                    return;\n                }\n\n                if (!self && opt.altClick && !e.altKey && !e.ctrlKey) {\n                    return;\n                }\n\n                var box = $(this).closest(opt.highlighted).find(form.boxes);\n\n                if (box.length < 1) {\n                    return;\n                }\n\n                var checked = box.prop('checked');\n\n                if (self) {\n                    checked = !checked;\n                }\n\n                if (e.shiftKey && form.lastCheck) {\n                    var boxes = $this.find(form.boxes);\n                    var start = boxes.index(box);\n                    var end = boxes.index(form.lastCheck);\n\n                    methods.select({\n                        'range'   : [Math.min(start, end), Math.max(start, end) + 1],\n                        'checked' : !checked\n                    });\n                } else if (!self) {\n                    box.prop('checked', !checked).change();\n                }\n\n                if (checked === false) {\n                    form.lastCheck = box;\n                } else {\n                    form.lastCheck = null;\n                }\n            });\n\n            return lib;\n        };\n\n        /**\n         * Tracks row checks.\n         *\n         * @return {object} lib\n         */\n\n        lib.checked = function ()\n        {\n            $this.on('change', form.boxes, function (e)\n            {\n                var box = $(this);\n                var boxes = $this.find(form.boxes);\n\n                if (box.prop('checked')) {\n                    $(this).closest(opt.highlighted).addClass(opt.selectedClass);\n                    $this.find(opt.selectAll).prop('checked', boxes.filter(':checked').length === boxes.length);\n                } else {\n                    $(this).closest(opt.highlighted).removeClass(opt.selectedClass);\n                    $this.find(opt.selectAll).prop('checked', false);\n                }\n            });\n\n            return lib;\n        };\n\n        /**\n         * Handles edit method selecting.\n         *\n         * @return {object} lib\n         */\n\n        lib.changeMethod = function ()\n        {\n            form.button.hide();\n\n            form.editMethod.val('').change(function (e)\n            {\n                var selected = $(this).find('option:selected');\n                $this.find('.multi-step').remove();\n\n                if (selected.length < 1 || selected.val() === '') {\n                    form.button.hide();\n                    return lib;\n                }\n\n                if (selected.data('_txpMultiMethod')) {\n                    $(this).after($('<div />').attr('class', 'multi-step multi-option').html(selected.data('_txpMultiMethod')));\n                    form.button.show();\n                } else {\n                    form.button.hide();\n                    $(this).parents('form').submit();\n                }\n            });\n\n            return lib;\n        };\n\n        /**\n         * Handles sending.\n         *\n         * @return {object} lib\n         */\n\n        lib.sendForm = function ()\n        {\n            $this.submit(function ()\n            {\n                if (opt.confirmation !== false && verify(opt.confirmation) === false) {\n                    form.editMethod.val('').change();\n\n                    return false;\n                }\n            });\n\n            return lib;\n        };\n\n        if (!$this.data('_txpMultiEdit')) {\n            lib.highlight().extendedClick().checked().changeMethod().sendForm();\n\n            (function ()\n            {\n                var multiOptions = $this.find('.multi-option:not(.multi-step)');\n\n                form.editMethod.find('option[value!=\"\"]').each(function ()\n                {\n                    var value = $(this).val();\n\n                    var option = multiOptions.filter(function ()\n                    {\n                        return $(this).data('multi-option') === value;\n                    });\n\n                    if (option.length > 0) {\n                        methods.addOption({\n                            'label' : null,\n                            'html'  : option.eq(0).contents(),\n                            'value' : $(this).val()\n                        });\n                    }\n                });\n\n                multiOptions.remove();\n            })();\n\n            $this.on('change', opt.selectAll, function (e)\n            {\n                methods.select({\n                    'checked' : $(this).prop('checked')\n                });\n            });\n        }\n\n        if (method && methods[method]) {\n            methods[method].call($this, args);\n        }\n\n        $this.data('_txpMultiEdit', form);\n    });\n\n    return this;\n};\n\n/**\n * Adds an event handler.\n *\n * See jQuery before trying to use this.\n *\n * @author S.Andrew http://www.scottandrew.com/\n * @param {object}  elm        The element to attach to\n * @param {string}  evType     The event\n * @param {object}  fn         The callback function\n * @param {boolean} useCapture Initiate capture\n */\n\nfunction addEvent(elm, evType, fn, useCapture)\n{\n    if (elm.addEventListener) {\n        elm.addEventListener(evType, fn, useCapture);\n        return true;\n    } else if (elm.attachEvent) {\n        var r = elm.attachEvent('on' + evType, fn);\n        return r;\n    } else {\n        elm['on' + evType] = fn;\n    }\n}\n\n/**\n * Sets a HTTP cookie.\n *\n * @param {string}  name  The name\n * @param {string}  value The value\n * @param {integer} days  Expires in\n */\n\nfunction setCookie(name, value, days)\n{\n    if (days) {\n        var date = new Date();\n\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n\n        var expires = '; expires=' + date.toGMTString();\n    } else {\n        var expires = '';\n    }\n\n    document.cookie = name + '=' + value + expires + '; path=/';\n}\n\n/**\n * Gets a HTTP cookie's value.\n *\n * @param  {string} name The name\n * @return {string} The cookie\n */\n\nfunction getCookie(name)\n{\n    var nameEQ = name + '=';\n    var ca = document.cookie.split(';');\n\n    for (var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n\n        while (c.charAt(0) == ' ') {\n            c = c.substring(1, c.length);\n        }\n\n        if (c.indexOf(nameEQ) == 0) {\n            return c.substring(nameEQ.length, c.length);\n        }\n    }\n\n    return null;\n}\n\n/**\n * Deletes a HTTP cookie.\n *\n * @param {string} name The cookie\n */\n\nfunction deleteCookie(name)\n{\n    setCookie(name, '', -1);\n}\n\n/**\n * Gets element by class.\n *\n * See jQuery before trying to use this.\n *\n * @param  {string} classname The HTML class\n * @param  {object} node      The node, defaults to the document\n * @return {object} Matching nodes\n * @see    http://www.snook.ca/archives/javascript/your_favourite_1/\n */\n\nfunction getElementsByClass(classname, node)\n{\n    var a = [];\n    var re = new RegExp('(^|\\\\s)' + classname + '(\\\\s|$)');\n\n    if (node == null) {\n        node = document;\n    }\n\n    var els = node.getElementsByTagName(\"*\");\n\n    for (var i = 0, j = els.length; i < j; i++) {\n        if (re.test(els[i].className)) {\n            a.push(els[i]);\n        }\n    }\n\n    return a;\n}\n\n/**\n * Toggles panel's visibility and saves the state to the server.\n *\n * @param  {string}  id The element ID\n * @return {boolean} Returns FALSE\n */\n\nfunction toggleDisplay(id)\n{\n    var obj = $('#' + id);\n\n    if (obj.length) {\n        obj.toggle();\n\n        // Send state of toggle pane to server.\n        if ($(this).data('txp-token') && $(this).data('txp-pane')) {\n            sendAsyncEvent({\n                event   : 'pane',\n                step    : 'visible',\n                pane    : $(this).data('txp-pane'),\n                visible : obj.is(':visible'),\n                origin  : textpattern.event,\n                token   : $(this).data('txp-token')\n            });\n        } else {\n            sendAsyncEvent({\n                event   : textpattern.event,\n                step    : 'save_pane_state',\n                pane    : obj.attr('id'),\n                visible : obj.is(':visible')\n            });\n        }\n    }\n\n    return false;\n}\n\n/**\n * Direct show/hide referred #segment; decorate parent lever.\n */\n\nfunction toggleDisplayHref()\n{\n    var $this = $(this);\n    var href = $this.attr('href');\n    var lever = $this.parent('.txp-summary');\n\n    if (href) {\n        toggleDisplay.call(this, href.substr(1));\n    }\n\n    if (lever.length) {\n        var vis = $(href).is(':visible');\n        lever.toggleClass('expanded', vis);\n        $this.attr('aria-pressed', vis.toString());\n        $(href).attr('aria-expanded', vis.toString());\n    }\n\n    return false;\n}\n\n/**\n * Shows/hides matching elements.\n *\n * @param {string}  className Targeted element's class\n * @param {boolean} show      TRUE to display\n */\n\nfunction setClassDisplay(className, show)\n{\n    $('.' + className).toggle(show);\n}\n\n/**\n * Toggles panel's visibility and saves the state to a HTTP cookie.\n *\n * @param {string} classname The HTML class\n */\n\nfunction toggleClassRemember(className)\n{\n    var v = getCookie('toggle_' + className);\n    v = (v == 1 ? 0 : 1);\n\n    setCookie('toggle_' + className, v, 365);\n    setClassDisplay(className, v);\n    setClassDisplay(className + '_neg', 1 - v);\n}\n\n/**\n * Toggle visibility of matching elements based on a cookie value.\n *\n * @param {string}  className The HTML class\n * @param {string}  force     The value\n */\n\nfunction setClassRemember(className, force)\n{\n    if (typeof(force) != 'undefined') {\n        setCookie('toggle_' + className, force, 365);\n    }\n\n    var v = getCookie('toggle_' + className);\n    setClassDisplay(className, v);\n    setClassDisplay(className + '_neg', 1 - v);\n}\n\n/**\n * Load data from the server using a HTTP POST request.\n *\n * @param  {object} data   POST payload\n * @param  {object} fn     Success handler\n * @param  {string} format Response data format, defaults to 'xml'\n * @return {object} this\n * @see    http://api.jquery.com/jQuery.post/\n */\n\nfunction sendAsyncEvent (data, fn, format)\n{\n    if ($.type(data) === 'string' && data.length > 0) {\n        // Got serialised data.\n        data = data + '&app_mode=async&_txp_token=' + textpattern._txp_token;\n    } else {\n        data.app_mode = 'async';\n        data._txp_token = textpattern._txp_token;\n    }\n\n    format = format || 'xml';\n\n    return $.post('index.php', data, fn, format);\n}\n\n/**\n * A pub/sub hub for client-side events.\n *\n * @since 4.5.0\n */\n\ntextpattern.Relay =\n{\n    /**\n     * Publishes an event to all registered subscribers.\n     *\n     * @param  {string} event The event\n     * @param  {object} data  The data passed to registered subscribers\n     * @return {object} The Relay object\n     * @example\n     * textpattern.Relay.callback('newEvent', {'name1' : 'value1', 'name2' : 'value2'});\n     */\n\n    callback: function (event, data)\n    {\n        return $(this).trigger(event, data);\n    },\n\n    /**\n     * Subscribes to an event.\n     *\n     * @param  {string} The event\n     * @param  {object} fn  The callback function\n     * @return {object} The Relay object\n     * @example\n     * textpattern.Relay.register('event',\n     *     function (event, data)\n     *     {\n     *         alert(data);\n     *     }\n     * );\n     */\n\n    register: function (event, fn)\n    {\n        $(this).on(event, fn);\n        return this;\n    }\n};\n\n/**\n * Logs debugging messages.\n *\n * @since 4.6.0\n */\n\ntextpattern.Console =\n{\n    /**\n     * Stores an array of invoked messages.\n     */\n\n    history : [],\n\n    /**\n     * Logs a message.\n     *\n     * @param  message The message\n     * @return textpattern.Console\n     * @example\n     * textpattern.Console.log('Some message');\n     */\n\n    log : function (message)\n    {\n        if (textpattern.production_status === 'debug') {\n            textpattern.Console.history.push(message);\n\n            textpattern.Relay.callback('txpConsoleLog', {\n                'message' : message\n            });\n        }\n\n        return this;\n    }\n};\n\n/**\n * Console API module for textpattern.Console.\n *\n * Passes invoked messages to Web/JavaScript Console\n * using console.log().\n *\n * Uses a namespaced 'txpConsoleLog.ConsoleAPI' event.\n */\n\ntextpattern.Relay.register('txpConsoleLog.ConsoleAPI', function (event, data)\n{\n    if ($.type(console) === 'object' && $.type(console.log) === 'function') {\n        console.log(data.message);\n    }\n});\n\n/**\n * Script routing.\n *\n * @since 4.6.0\n */\n\ntextpattern.Route =\n{\n    /**\n     * An array of attached listeners.\n     */\n\n    attached : [],\n\n    /**\n     * Attachs a listener.\n     *\n     * @param {string} pages The page\n     * @param {object} fn    The callback\n     */\n\n    add : function (pages, fn)\n    {\n        $.each(pages.split(','), function (index, page)\n        {\n            textpattern.Route.attached.push({\n                'page' : $.trim(page),\n                'fn'   : fn\n            });\n        });\n    },\n\n    /**\n     * Initialises attached listeners.\n     *\n     * @param {object} options       Options\n     * @param {string} options.event The event\n     * @param {string} options.step  The step\n     */\n\n    init : function (options)\n    {\n        var options = $.extend({\n            'event' : textpattern.event,\n            'step'  : textpattern.step\n        }, options);\n\n        $.each(textpattern.Route.attached, function (index, data)\n        {\n            if (data.page === options.event || data.page === options.event + '.' + options.step) {\n                data.fn({\n                    'event' : options.event,\n                    'step'  : options.step,\n                    'route' : data.page\n                });\n            }\n        });\n    }\n};\n\n/**\n * Sends a form using AJAX and processes the response.\n *\n * @param  {object} options          Options\n * @param  {string} options.dataType The response data type\n * @param  {object} options.success  The success callback\n * @param  {object} options.error    The error callback\n * @return {object} this\n * @since  4.5.0\n */\n\njQuery.fn.txpAsyncForm = function (options)\n{\n    options = $.extend({\n        dataType : 'script',\n        success  : null,\n        error    : null\n    }, options);\n\n    // Send form data to application, process response as script.\n    this.on('submit.txpAsyncForm', function (event)\n    {\n        event.preventDefault();\n\n        var $this = $(this);\n        var form =\n        {\n            button  : $this.find('input[type=\"submit\"]:focus').eq(0),\n            data    : $this.serialize(),\n            spinner : $('<span />').addClass('spinner')\n        };\n\n        // Show feedback while processing.\n        $this.addClass('busy');\n        $('body').addClass('busy');\n\n        // WebKit does not set :focus on button-click: use first submit input as a fallback.\n        if (!form.button.length) {\n            form.button = $this.find('input[type=\"submit\"]').eq(0);\n        }\n\n        form.button.attr('disabled', true).after(form.spinner);\n\n        if (form.data) {\n            form.data += '&' + (form.button.attr('name') || '_txp_submit') + '=' + (form.button.val() || '_txp_submit');\n        }\n\n        sendAsyncEvent(form.data, function () {}, options.dataType)\n            .done(function (data, textStatus, jqXHR)\n            {\n                if (options.success) {\n                    options.success($this, event, data, textStatus, jqXHR);\n                }\n\n                textpattern.Relay.callback('txpAsyncForm.success', {\n                    'this'       : $this,\n                    'event'      : event,\n                    'data'       : data,\n                    'textStatus' : textStatus,\n                    'jqXHR'      : jqXHR\n                });\n            })\n            .fail(function (jqXHR, textStatus, errorThrown)\n            {\n                if (options.error) {\n                    options.error($this, event, jqXHR, $.ajaxSetup(), errorThrown);\n                }\n\n                textpattern.Relay.callback('txpAsyncForm.error', {\n                    'this'         : $this,\n                    'event'        : event,\n                    'jqXHR'        : jqXHR,\n                    'ajaxSettings' : $.ajaxSetup(),\n                    'thrownError'  : errorThrown\n                });\n            })\n            .always(function ()\n            {\n                $this.removeClass('busy');\n                form.button.removeAttr('disabled');\n                form.spinner.remove();\n                $('body').removeClass('busy');\n            });\n    });\n\n    return this;\n};\n\n/**\n * Sends a link using AJAX and processes the plain text response.\n *\n * @param  {object} options          Options\n * @param  {string} options.dataType The response data type\n * @param  {object} options.success  The success callback\n * @param  {object} options.error    The error callback\n * @return {object} this\n * @since  4.5.0\n */\n\njQuery.fn.txpAsyncHref = function (options)\n{\n    options = $.extend({\n        dataType : 'text',\n        success  : null,\n        error    : null\n    }, options);\n\n    this.on('click.txpAsyncHref', function (event)\n    {\n        event.preventDefault();\n        var $this = $(this);\n        var url = this.search.replace('?', '') + '&' + $.param({value : $this.text()});\n\n        // Show feedback while processing.\n        $this.addClass('busy');\n        $('body').addClass('busy');\n\n        sendAsyncEvent(url, function () {}, options.dataType)\n            .done(function (data, textStatus, jqXHR)\n            {\n                if (options.dataType === 'text') {\n                    $this.html(data);\n                }\n\n                if (options.success) {\n                    options.success($this, event, data, textStatus, jqXHR);\n                }\n\n                textpattern.Relay.callback('txpAsyncHref.success', {\n                    'this'       : $this,\n                    'event'      : event,\n                    'data'       : data,\n                    'textStatus' : textStatus,\n                    'jqXHR'      : jqXHR\n                });\n            })\n            .fail(function (jqXHR, textStatus, errorThrown)\n            {\n                if (options.error) {\n                    options.error($this, event, jqXHR, $.ajaxSetup(), errorThrown);\n                }\n\n                textpattern.Relay.callback('txpAsyncHref.error', {\n                    'this'         : $this,\n                    'event'        : event,\n                    'jqXHR'        : jqXHR,\n                    'ajaxSettings' : $.ajaxSetup(),\n                    'thrownError'  : errorThrown\n                });\n            })\n            .always(function ()\n            {\n                $this.removeClass('busy');\n                $('body').removeClass('busy');\n            });\n    });\n\n    return this;\n};\n\n/**\n * Creates a UI dialog.\n *\n * @param  {object} options Options\n * @return {object} this\n * @since  4.6.0\n */\n\njQuery.fn.txpDialog = function (options)\n{\n    options = $.extend({\n        autoOpen : false,\n        buttons  : [\n            {\n                text  : textpattern.gTxt('ok'),\n                click : function ()\n                {\n                    // callbacks?\n\n                    if ($(this).is('form')) {\n                        $(this).submit();\n                    }\n\n                    $(this).dialog('close');\n                }\n            }\n        ]\n    }, options);\n\n    this.dialog(options);\n\n    return this;\n};\n\n/**\n * Creates a date picker.\n *\n * @param  {object} options Options\n * @return {object} this\n * @since  4.6.0\n */\n\njQuery.fn.txpDatepicker = function (options)\n{\n    // TODO $.datepicker.regional[ \"en\" ];\n    // TODO support from RTL languages\n    this.datepicker(options);\n\n    return this;\n};\n\n/**\n * Creates a sortable element.\n *\n * This method creates a sortable widget, allowing to\n * reorder elements in a list and synchronises the updated\n * order with the server.\n *\n * @param  {object}  options\n * @param  {string}  options.dataType The response datatype\n * @param  {object}  options.success  The sync success callback\n * @param  {object}  options.error    The sync error callback\n * @param  {string}  options.event    The event\n * @param  {string}  options.step     The step\n * @param  {string}  options.cancel   Prevents sorting if you start on elements matching the selector\n * @param  {integer} options.delay    Sorting delay\n * @param  {integer} options.distance Tolerance, in pixels, for when sorting should start\n * @return this\n * @since  4.6.0\n */\n\njQuery.fn.txpSortable = function (options)\n{\n    options = $.extend({\n        dataType : 'script',\n        success  : null,\n        error    : null,\n        event    : textpattern.event,\n        step     : 'sortable_save',\n        cancel   : ':input, button',\n        delay    : 0,\n        distance : 15,\n        items    : '[data-txp-sortable-id]'\n    }, options);\n\n    var methods =\n    {\n        /**\n         * Sends updated order to the server.\n         */\n\n        update : function ()\n        {\n            var ids = [], $this = $(this);\n\n            $this.children('[data-txp-sortable-id]').each(function ()\n            {\n                ids.push($(this).data('txp-sortable-id'));\n            });\n\n            if (ids) {\n                sendAsyncEvent({\n                    event : options.event,\n                    step  : options.step,\n                    order : ids\n                }, function () {}, options.dataType)\n                    .done(function (data, textStatus, jqXHR)\n                    {\n                        if (options.success) {\n                            options.success.call($this, data, textStatus, jqXHR);\n                        }\n\n                        textpattern.Relay.callback('txpSortable.success', {\n                            'this'       : $this,\n                            'data'       : data,\n                            'textStatus' : textStatus,\n                            'jqXHR'      : jqXHR\n                        });\n                    })\n                    .fail(function (jqXHR, textStatus, errorThrown)\n                    {\n                        if (options.error) {\n                            options.error.call($this, jqXHR, $.ajaxSetup(), errorThrown);\n                        }\n\n                        textpattern.Relay.callback('txpSortable.error', {\n                            'this'         : $this,\n                            'jqXHR'        : jqXHR,\n                            'ajaxSettings' : $.ajaxSetup(),\n                            'thrownError'  : errorThrown\n                        });\n                    });\n            }\n        }\n    };\n\n    return this.sortable({\n        cancel   : options.cancel,\n        delay    : options.delay,\n        distance : options.distance,\n        update   : methods.update,\n        items    : options.items\n    });\n};\n\n/**\n * Mask/unmask password input field.\n *\n * @since  4.6.0\n */\n\ntextpattern.passwordMask = function()\n{\n    $('body').on('click', '#show_password', function() {\n        var inputBox = $(this).closest('form').find('input.txp-maskable');\n        var newType = (inputBox.attr('type') === 'password') ? 'text' : 'password';\n        textpattern.changeType(inputBox, newType);\n    });\n}\n\n/**\n * Change the type of an input element.\n *\n * @param  {object} elem The <input/> element\n * @param  {string} type The desired type\n *\n * @see    https://gist.github.com/3559343 for original\n * @since  4.6.0\n */\n\ntextpattern.changeType = function(elem, type)\n{\n    if (elem.prop('type') === type) {\n        // Already the correct type.\n        return elem;\n    }\n\n    try {\n        // May fail if browser prevents it.\n        return elem.prop('type', type);\n    } catch(e) {\n        // Create the element by hand.\n        // Clone it via a div (jQuery has no html() method for an element).\n        var html = $(\"<div>\").append(elem.clone()).html();\n\n        // Match existing attributes of type=text or type=\"text\".\n        var regex = /type=(\\\")?([^\\\"\\s]+)(\\\")?/;\n\n        // If no match, add the type attribute to the end; otherwise, replace it.\n        var tmp = $(html.match(regex) == null ?\n            html.replace(\">\", ' type=\"' + type + '\">') :\n            html.replace(regex, 'type=\"' + type + '\"'));\n\n        // Copy data from old element.\n        tmp.data('type', elem.data('type'));\n        var events = elem.data('events');\n        var cb = function(events) {\n            return function() {\n                // Re-bind all prior events.\n                for(var idx in events) {\n                    var ydx = events[idx];\n\n                    for(var jdx in ydx) {\n                        tmp.bind(idx, ydx[jdx].handler);\n                    }\n                }\n            }\n        }(events);\n\n        elem.replaceWith(tmp);\n\n        // Wait a smidge before firing callback.\n        setTimeout(cb, 10);\n\n        return tmp;\n    }\n}\n\n/**\n * Encodes a string for a use in HTML.\n *\n * @param  {string} string The string\n * @return {string} Encoded string\n * @since  4.6.0\n */\n\ntextpattern.encodeHTML = function (string)\n{\n    return $('<div/>').text(string).html();\n};\n\n/**\n * Translates given substrings.\n *\n * @param  {string} string       The string being translated\n * @param  {object} replacements Translated substrings\n * @return string   Translated string\n * @since  4.6.0\n * @example\n * textpattern.tr('hello world, and bye!', {'hello' : 'bye', 'bye' : 'hello'});\n */\n\ntextpattern.tr = function (string, replacements)\n{\n    var match, position, output = '', replacement;\n\n    for (position = 0; position < string.length; position++) {\n        match = false;\n\n        $.each(replacements, function (from, to)\n        {\n            if (string.substr(position, from.length) === from) {\n                match = true;\n                replacement = to;\n                position = (position + from.length) - 1;\n\n                return;\n            }\n        });\n\n        if (match) {\n            output += replacement;\n        } else {\n            output += string.charAt(position);\n        }\n    }\n\n    return output;\n};\n\n/**\n * Returns an i18n string.\n *\n * @param  {string}  i18n   The i18n string\n * @param  {object}  atts   Replacement map\n * @param  {boolean} escape TRUE to escape HTML in atts\n * @return {string}  The string\n * @example\n * textpattern.gTxt('string', {'{name}' : 'example'}, true);\n */\n\ntextpattern.gTxt = function (i18n, atts, escape)\n{\n    var tags = atts || {};\n    var string = i18n;\n    var name = string.toLowerCase();\n\n    if ($.type(textpattern.textarray[name]) !== 'undefined') {\n        string = textpattern.textarray[name];\n    }\n\n    if (escape !== false) {\n        string = textpattern.encodeHTML(string);\n\n        $.each(tags, function (key, value)\n        {\n            tags[key] = textpattern.encodeHTML(value);\n        });\n    }\n\n    string = textpattern.tr(string, tags);\n\n    return string;\n};\n\n/**\n * Replaces HTML contents of each matched with i18n string.\n *\n * This is a jQuery plugin for textpattern.gTxt().\n *\n * @param  {object|string}  options        Options or the i18n string\n * @param  {string}         options.string The i18n string\n * @param  {object}         options.tags   Replacement map\n * @param  {boolean}        options.escape TRUE to escape HTML in tags\n * @param  {object}         tags           Replacement map\n * @param  {boolean}        escape         TRUE to escape HTML in tags\n * @return {object}         this\n * @see    textpattern.gTxt()\n * @example\n * $('p').gTxt('string').class('alert-block warning');\n */\n\njQuery.fn.gTxt = function (opts, tags, escape)\n{\n    var options = $.extend({\n        'string' : opts,\n        'tags'   : tags,\n        'escape' : escape\n    }, opts);\n\n    this.html(textpattern.gTxt(options.string, options.tags, options.escape));\n\n    return this;\n};\n\n/**\n * ESC button closes alert messages.\n *\n * @since 4.5.0\n */\n\n$(document).keyup(function (e)\n{\n    if (e.keyCode == 27) {\n        $('.close').parent().remove();\n    }\n});\n\n/**\n * Search tool.\n *\n * @since 4.6.0\n */\n\nfunction txp_search()\n{\n    var $ui = $('.txp-search');\n\n    $ui.find('.txp-search-button').button({\n        text: false,\n        icons:\n        {\n            primary: 'ui-icon-search'\n        }\n\n    }).click(function ()\n    {\n        $ui.submit();\n    });\n\n    $ui.find('.txp-search-options').button({\n        text: false,\n        icons:\n        {\n            primary: 'ui-icon-triangle-1-s'\n        }\n    }).on('click', function (e)\n    {\n        var menu = $ui.find('.txp-dropdown').toggle().position(\n        {\n            my: \"right top\", // TODO: need to swap this to 'left top' in RTL languages.\n            at: \"right bottom\", // TODO: need to swap this to 'left bottom' in RTL languages.\n            of: this\n        });\n        $(document).one('click blur', function ()\n        {\n            menu.hide();\n        });\n\n        return false;\n    });\n\n    $ui.find('.txp-search-buttons').buttonset();\n    $ui.find('.txp-dropdown').hide().menu().click(function (e) {\n        e.stopPropagation();\n    });\n\n    $ui.txpMultiEditForm({\n        'checkbox'    : 'input[name=\"search_method[]\"][type=checkbox]',\n        'row'         : '.txp-dropdown li',\n        'highlighted' : '.txp-dropdown li',\n        'confirmation': false\n    });\n}\n\n\n/**\n * Cookie status.\n *\n * @deprecated in 4.6.0\n */\n\nvar cookieEnabled = true;\n\n// Login panel.\n\ntextpattern.Route.add('login', function ()\n{\n    // Check cookies.\n    if (!checkCookies()) {\n        cookieEnabled = false;\n        $('main').prepend($('<p class=\"alert-block warning\" />').text(textpattern.gTxt('cookies_must_be_enabled')));\n    }\n\n    // Focus on either username or password when empty.\n    $('#login_form input').each(function() {\n        if (this.value === '') {\n            this.focus();\n            return false;\n        }\n    });\n\n    textpattern.passwordMask();\n});\n\n// Write panel.\n\ntextpattern.Route.add('article', function ()\n{\n    // Assume users would not change the timestamp if they wanted to\n    // 'publish now'/'reset time'.\n    $(document).on('change',\n        '#write-timestamp input.year,' +\n        '#write-timestamp input.month,' +\n        '#write-timestamp input.day,' +\n        '#write-timestamp input.hour,' +\n        '#write-timestamp input.minute,' +\n        '#write-timestamp input.second',\n        function ()\n        {\n            $('#publish_now').prop('checked', false);\n            $('#reset_time').prop('checked', false);\n        }\n    );\n\n    var status = $('select[name=Status]'), form = status.parents('form'), submitButton = form.find('input[type=submit]');\n\n    status.change(function ()\n    {\n        if (!form.hasClass('published')) {\n            if ($(this).val() < 4) {\n                submitButton.val(textpattern.gTxt('save'));\n            } else {\n                submitButton.val(textpattern.gTxt('publish'));\n            }\n        }\n    });\n\n    $('.txp-clone').click(function (e)\n    {\n        e.preventDefault();\n        form.append('<input type=\"hidden\" name=\"copy\" value=\"1\" />'+\n            '<input type=\"hidden\" name=\"publish\" value=\"1\" />');\n        form.off('submit.txpAsyncForm').trigger('submit');\n    });\n\n    // Switch to Text/HTML/Preview mode.\n    $(document).on('click',\n        '[data-view-mode]',\n        function (e)\n        {\n            e.preventDefault();\n            $('input[name=\"view\"]').val($(this).data('view-mode'));\n            document.article_form.submit();\n        }\n    );\n});\n\n// 'Clone' button on Pages, Forms, Styles panels.\n\ntextpattern.Route.add('css, page, form', function ()\n{\n    $('.txp-clone').click(function (e)\n    {\n        e.preventDefault();\n        var target = $(this).data('form');\n        if (target) {\n            $('#'+target).append('<input type=\"hidden\" name=\"copy\" value=\"1\" />');\n            $('.txp-save input').click();\n        }\n    });\n});\n\n// Forms panel.\n\ntextpattern.Route.add('form', function ()\n{\n    $('#allforms_form').txpMultiEditForm({\n        'checkbox'    : 'input[name=\"selected_forms[]\"][type=checkbox]',\n        'row'         : '.switcher-list li, .form-list-name',\n        'highlighted' : '.switcher-list li'\n    });\n});\n\n// Admin panel\n\ntextpattern.Route.add('admin', function ()\n{\n    textpattern.passwordMask();\n});\n\n// Preferences panel.\n\ntextpattern.Route.add('prefs', function ()\n{\n    var prefsGroup = $('#all_preferences div[role=group]');\n\n    prefsGroup.closest('form').tabs();\n    prefsGroup.addClass('ui-tabs-vertical ui-helper-clearfix');\n    prefsGroup.find('li').removeClass('ui-corner-top').addClass('ui-corner-left');\n\n    // Todo: save pane state for currently open pref group, fallback to first if not set.\n\n});\n\n// Plugins panel.\n\ntextpattern.Route.add('plugin', function ()\n{\n    textpattern.Relay.register('txpAsyncHref.success', function (event, data)\n    {\n        $(data['this']).closest('tr').toggleClass('active');\n    });\n});\n\n// Initialise JavaScript.\n\n$(document).ready(function ()\n{\n    // Confirmation dialogs.\n    $(document).on('click.txpVerify', 'a[data-verify]', function (e)\n    {\n        return verify($(this).data('verify'));\n    });\n\n    $(document).on('submit.txpVerify', 'form[data-verify]', function (e)\n    {\n        return verify($(this).data('verify'));\n    });\n\n    // Disable spellchecking on all elements of class \"code\" in capable browsers.\n    var c = $(\".code\")[0];\n\n    if (c && \"spellcheck\" in c) {\n        $(\".code\").prop(\"spellcheck\", false);\n    }\n\n    // Enable spellcheck for all elements mentioned in textpattern.do_spellcheck.\n    c = $(textpattern.do_spellcheck)[0];\n\n    if (c && \"spellcheck\" in c) {\n        $(textpattern.do_spellcheck).prop(\"spellcheck\", true);\n    }\n\n    // Attach toggle behaviours.\n    $(document).on('click', '.txp-summary a[class!=pophelp]', toggleDisplayHref);\n\n    // Attach multi-edit form.\n    $('.multi_edit_form').txpMultiEditForm();\n\n    // Establish AJAX timeout from prefs.\n    if ($.ajaxSetup().timeout === undefined) {\n        $.ajaxSetup({timeout : textpattern.ajax_timeout});\n    }\n\n    // Set up asynchronous forms.\n    $('form.async').txpAsyncForm({\n        error: function ()\n        {\n            window.alert(textpattern.gTxt('form_submission_error'));\n        }\n    });\n\n    // Set up asynchronous links.\n    $('a.async:not(.script)').txpAsyncHref({\n        error: function ()\n        {\n            window.alert(textpattern.gTxt('form_submission_error'));\n        }\n    });\n\n    $('a.async.script').txpAsyncHref({\n        dataType : 'script',\n        error    : function ()\n        {\n            window.alert(textpattern.gTxt('form_submission_error'));\n        }\n    });\n\n    // Close button on the announce pane.\n    $(document).on('click', '.close', function (e)\n    {\n        e.preventDefault();\n        $(this).parent().remove();\n    });\n\n    // Initialise dynamic WAI-ARIA attributes.\n    $('.txp-summary a').each(function (i, elm)\n    {\n        // Get id of toggled <section> region.\n        var region = $(elm).attr('href');\n\n        if (region) {\n            var $region = $(region), vis = $region.is(':visible').toString();\n            $(elm).attr('aria-controls', region.substr(1)).attr('aria-pressed', vis);\n            $region.attr('aria-expanded', vis);\n        }\n    });\n\n    // Hide popup elements.\n    $('.txp-dropdown').hide();\n\n    // Event handling and automation.\n    $(document).on('change.txpAutoSubmit', 'form [data-submit-on=\"change\"]', function (e)\n    {\n        $(this).parents('form').submit();\n    });\n\n    // Polyfills.\n    // Add support for form attribute in submit buttons.\n    if ($('html').hasClass('no-formattribute')) {\n        $('.txp-save input[form]').click(function(e) {\n            var targetForm = $(this).attr('form');\n            $('form[id='+targetForm+']').submit();\n        });\n    }\n\n    // Establish UI defaults.\n    $('.txp-dialog').txpDialog();\n    $('.txp-dialog.modal').dialog('option', 'modal', true);\n    $('.txp-datepicker').txpDatepicker();\n    $('.txp-sortable').txpSortable();\n\n\n\n    // TODO: integrate jQuery UI stuff properly --------------------------------\n\n\n    // Selectmenu\n    $('.jquery-ui-selectmenu').selectmenu();\n\n    // Button\n    $('.jquery-ui-button').button();\n\n    // Button set\n    $('.jquery-ui-buttonset').buttonset();\n\n\n    // TODO: end integrate jQuery UI stuff properly ----------------------------\n\n\n\n    // Find and open associated dialogs.\n    $(document).on('click.txpDialog', '[data-txp-dialog]', function (e)\n    {\n        $($(this).data('txp-dialog')).dialog('open');\n        e.preventDefault();\n    });\n\n    // Initialise panel specific JavaScript.\n    textpattern.Route.init();\n\n    // Arm UI.\n    $('body').removeClass('not-ready');\n});\n", "<?php\n\n/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\nif (!defined('TXP_UPDATE')) {\n    exit(\"Nothing here. You can't access this file directly.\");\n}\n\nsafe_alter('textpattern', \"\n    CHANGE COLUMN textile_body    textile_body    VARCHAR(32) NOT NULL DEFAULT '1',\n    CHANGE COLUMN textile_excerpt textile_excerpt VARCHAR(32) NOT NULL DEFAULT '1'\");\nsafe_update('txp_prefs', \"name = 'pane_article_textfilter_help_visible'\", \"name = 'pane_article_textile_help_visible'\");\n\n// Rejig preferences panel.\n$core_ev = doQuote(join(\"','\", array('site', 'admin', 'publish', 'feeds', 'custom', 'comments')));\n\n// 1) Increase event column size.\nsafe_alter('txp_prefs', \"\n    MODIFY event VARCHAR(255) NOT NULL DEFAULT 'publish',\n    MODIFY html  VARCHAR(255) NOT NULL DEFAULT 'text_input'\");\n\n// 2) Remove basic/advanced distinction.\nsafe_update('txp_prefs', \"type = '\".PREF_CORE.\"'\", \"type = '\".PREF_PLUGIN.\"' AND event IN (\".$core_ev.\")\");\n\n// 3) Consolidate existing prefs into better groups.\nsafe_update('txp_prefs', \"event = 'site'\", \"name IN ('sitename', 'siteurl', 'site_slogan', 'production_status', 'gmtoffset', 'auto_dst', 'is_dst', 'dateformat', 'archive_dateformat', 'permlink_mode', 'doctype', 'logging', 'use_comments', 'expire_logs_after')\");\n\n// 4) Reorder existing prefs into a more logical progression.\nsafe_update('txp_prefs', \"position = '230'\", \"name = 'expire_logs_after'\");\nsafe_update('txp_prefs', \"position = '340'\", \"name = 'max_url_len'\");\nsafe_update('txp_prefs', \"position = '160'\", \"name = 'comments_sendmail'\");\nsafe_update('txp_prefs', \"position = '180'\", \"name = 'comments_are_ol'\");\nsafe_update('txp_prefs', \"position = '200'\", \"name = 'comment_means_site_updated'\");\nsafe_update('txp_prefs', \"position = '220'\", \"name = 'comments_require_name'\");\nsafe_update('txp_prefs', \"position = '240'\", \"name = 'comments_require_email'\");\nsafe_update('txp_prefs', \"position = '260'\", \"name = 'never_display_email'\");\nsafe_update('txp_prefs', \"position = '280'\", \"name = 'comment_nofollow'\");\nsafe_update('txp_prefs', \"position = '300'\", \"name = 'comments_disallow_images'\");\nsafe_update('txp_prefs', \"position = '320'\", \"name = 'comments_use_fat_textile'\");\nsafe_update('txp_prefs', \"position = '340'\", \"name = 'spam_blacklists'\");\nsafe_update('txp_prefs', \"html = 'permlink_format'\", \"name = 'permalink_title_format'\");\n\n// Support for l10n string owners.\n$cols = getThings(\"DESCRIBE `\".PFX.\"txp_lang`\");\n\nif (!in_array('owner', $cols)) {\n    safe_alter('txp_lang', \"\n        ADD owner VARCHAR(64) NOT NULL DEFAULT '' AFTER event,\n        ADD INDEX owner (owner)\");\n}\n\n// Keep all comment-related forms together. The loss of 'preview' ability on the\n// comments_display Form is of little consequence compared with the benefit of\n// tucking them away neatly when not required.\nsafe_update('txp_form', \"type = 'comment'\", \"name = 'comments_display'\");\n\n// Adds protocol to logged HTTP referers.\nsafe_update(\n    'txp_log',\n    \"refer = CONCAT('http://', refer)\",\n    \"refer != '' AND refer NOT LIKE 'http://%' AND refer NOT LIKE 'https://%'\"\n);\n\n// Usernames can be 64 characters long at most.\nsafe_alter('txp_file',  \"MODIFY author VARCHAR(64) NOT NULL DEFAULT ''\");\nsafe_alter('txp_link',  \"MODIFY author VARCHAR(64) NOT NULL DEFAULT ''\");\nsafe_alter('txp_image', \"MODIFY author VARCHAR(64) NOT NULL DEFAULT ''\");\n\n// Consistent name length limitations for presentation items.\nsafe_alter('txp_form', \"MODIFY name VARCHAR(255) NOT NULL DEFAULT ''\");\nsafe_alter('txp_page', \"MODIFY name VARCHAR(255) NOT NULL DEFAULT ''\");\nsafe_alter('txp_section', \"\n    MODIFY page VARCHAR(255) NOT NULL DEFAULT '',\n    MODIFY css  VARCHAR(255) NOT NULL DEFAULT ''\");\n\n// Save sections correctly in articles.\nsafe_alter('textpattern', \"MODIFY Section VARCHAR(255) NOT NULL DEFAULT ''\");\nsafe_alter('txp_section', \"MODIFY name    VARCHAR(255) NOT NULL DEFAULT ''\");\n\n// Plugins can have longer version numbers.\nsafe_alter('txp_plugin', \"MODIFY version VARCHAR(255) NOT NULL DEFAULT '1.0'\");\n\n// Translation strings should allow more than 255 characters.\nsafe_alter('txp_lang', \"MODIFY data TEXT\");\n\n// Add meta description to articles...\n$cols = getThings(\"DESCRIBE `\".PFX.\"textpattern`\");\n\nif (!in_array('description', $cols)) {\n    safe_alter('textpattern', \"ADD description VARCHAR(255) NOT NULL DEFAULT '' AFTER Keywords\");\n}\n\n// ... categories...\n$cols = getThings(\"DESCRIBE `\".PFX.\"txp_category`\");\n\nif (!in_array('description', $cols)) {\n    safe_alter('txp_category', \"ADD description VARCHAR(255) NOT NULL DEFAULT '' AFTER title\");\n}\n\n// ... and sections.\n$cols = getThings(\"DESCRIBE `\".PFX.\"txp_section`\");\n\nif (!in_array('description', $cols)) {\n    safe_alter('txp_section', \"ADD description VARCHAR(255) NOT NULL DEFAULT '' AFTER css\");\n}\n\n// Remove textpattern.com ping pref.\nif (safe_field('name', 'txp_prefs', \"name = 'ping_textpattern_com'\")) {\n    safe_delete('txp_prefs', \"name = 'ping_textpattern_com'\");\n}\n\n// Add default publishing status pref.\nif (!get_pref('default_publish_status')) {\n    set_pref('default_publish_status', STATUS_LIVE, 'publish', PREF_CORE, 'defaultPublishStatus', 15, PREF_PRIVATE);\n}\n\n// Remove broken import functionality\nif (file_exists(txpath.DS.'include'.DS.'txp_import.php')) {\n    $import_files = array(\n        'BloggerImportTemplate.txt',\n        'import_blogger.php',\n        'import_mt.php',\n        'import_b2.php',\n        'import_mtdb.php',\n        'import_wp.php'\n    );\n\n    foreach($import_files as $file) {\n        unlink(txpath.DS.'include'.DS.'import'.DS.$file);\n    }\n\n    rmdir(txpath.DS.'include'.DS.'import');\n    unlink(txpath.DS.'include'.DS.'txp_import.php');\n}\n\n// Remove unused ipban table or recreate its index (for future utf8mb4 conversion)\nif (getThing(\"SHOW TABLES LIKE '\".PFX.\"txp_discuss_ipban'\")) {\n    if (!safe_count('txp_discuss_ipban', '1 = 1')) {\n        safe_drop('txp_discuss_ipban');\n    } else {\n        safe_alter('txp_discuss_ipban', \"DROP PRIMARY KEY, ADD PRIMARY KEY (ip(250))\");\n    }\n}\n\n// Recreate indexes with smaller key sizes to allow future conversion to charset utf8mb4\nsafe_alter('txp_css',     \"DROP INDEX name,               ADD UNIQUE name (name(250))\");\nsafe_alter('txp_file',    \"DROP INDEX filename,           ADD UNIQUE filename (filename(250))\");\nsafe_alter('txp_form',    \"DROP PRIMARY KEY,              ADD PRIMARY KEY (name(250))\");\nsafe_alter('txp_page',    \"DROP PRIMARY KEY,              ADD PRIMARY KEY (name(250))\");\nsafe_alter('txp_section', \"DROP PRIMARY KEY,              ADD PRIMARY KEY (name(250))\");\nsafe_alter('txp_prefs',   \"DROP INDEX prefs_idx,          ADD UNIQUE prefs_idx (prefs_id, name(185), user_name)\");\nsafe_alter('txp_prefs',   \"DROP INDEX name,               ADD INDEX name (name(250))\");\nsafe_alter('textpattern', \"DROP INDEX section_status_idx, ADD INDEX section_status_idx (Section(249), Status)\");\nsafe_alter('textpattern', \"DROP INDEX url_title_idx,      ADD INDEX url_title_idx (url_title(250))\");\n// txp_discuss_nonce didn't have a primary key in 4.0.3, so we recreate its index in two steps\nsafe_drop_index('txp_discuss_nonce', \"PRIMARY\");\nsafe_alter('txp_discuss_nonce', \"ADD PRIMARY KEY (nonce(250))\");\n\n// Fix typo: textinput should be text_input\nsafe_update('txp_prefs', \"html = 'text_input'\", \"name = 'timezone_key'\");\n\n// Fix typo: position 40 should be 0 (because it's a hidden pref)\nsafe_update('txp_prefs', \"position = 0\", \"name = 'language'\");\n\n// Fix typo: position should be 60 instead of 30 (so it appears just below the site name)\nsafe_update('txp_prefs', \"position = 60\", \"name = 'site_slogan'\");\n\n// Enforce some table changes that happened after 4.0.3 but weren't part of update scripts until now\nsafe_alter('txp_css',  \"MODIFY name  VARCHAR(255) NOT NULL\");\nsafe_alter('txp_lang', \"MODIFY lang  VARCHAR(16)  NOT NULL\");\nsafe_alter('txp_lang', \"MODIFY name  VARCHAR(64)  NOT NULL\");\nsafe_alter('txp_lang', \"MODIFY event VARCHAR(64)  NOT NULL\");\nsafe_drop_index('txp_form', \"name\");\nsafe_drop_index('txp_page', \"name\");\nsafe_drop_index('txp_plugin', \"name_2\");\nsafe_drop_index('txp_section', \"name\");\n\n// The txp_priv table was created for version 1.0, but never used nor created in later versions.\nsafe_drop('txp_priv');\n\n// Add generic token table.\nsafe_create('txp_token',\"\nid           INT          NOT NULL AUTO_INCREMENT,\nreference_id INT          DEFAULT 0,\ntype         VARCHAR(255) DEFAULT '',\nselector     CHAR(12)     DEFAULT '',\ntoken        VARCHAR(255) DEFAULT '',\nexpires      DATETIME     DEFAULT '0000-00-00 00:00:00',\nPRIMARY KEY (id)\n\"\n);"], "filenames": ["textpattern/include/txp_admin.php", "textpattern/include/txp_auth.php", "textpattern/lib/constants.php", "textpattern/lib/txplib_admin.php", "textpattern/textpattern.js", "textpattern/update/_to_4.6.0.php"], "buggy_code_start_loc": [135, 73, 404, 36, 1243, 198], "buggy_code_end_loc": [730, 254, 404, 193, 1539, 198], "fixing_code_start_loc": [135, 74, 405, 36, 1244, 199], "fixing_code_end_loc": [712, 324, 452, 235, 1619, 211], "type": "CWE-521", "message": "In Textpattern 4.5.7, the password-reset feature does not securely tether a hash to a user account.", "other": {"cve": {"id": "CVE-2015-8033", "sourceIdentifier": "cve@mitre.org", "published": "2020-08-14T19:15:12.007", "lastModified": "2020-08-20T18:44:36.820", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Textpattern 4.5.7, the password-reset feature does not securely tether a hash to a user account."}, {"lang": "es", "value": "En Textpattern versi\u00f3n 4.5.7, la funcionalidad de restablecimiento de contrase\u00f1a no conecta de manera segura un hash a una cuenta de usuario."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-521"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:textpattern:textpattern:4.5.7:*:*:*:*:*:*:*", "matchCriteriaId": "675C6B68-D490-4BE4-9DDF-93D7E03BFCFD"}]}]}], "references": [{"url": "https://github.com/textpattern/textpattern/blob/f94c3fb9916ee0c7fa4a52025fa4e8c3273e355b/HISTORY.txt", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/textpattern/textpattern/commit/1c09094187b9aeb18f09697bc7d1db12d078ae10", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/textpattern/textpattern/commit/1c09094187b9aeb18f09697bc7d1db12d078ae10"}}