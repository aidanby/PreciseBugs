{"buggy_code": ["module Mail\n  # A delivery method implementation which sends via sendmail.\n  #\n  # To use this, first find out where the sendmail binary is on your computer,\n  # if you are on a mac or unix box, it is usually in /usr/sbin/sendmail, this will\n  # be your sendmail location.\n  #\n  #   Mail.defaults do\n  #     delivery_method :sendmail\n  #   end\n  #\n  # Or if your sendmail binary is not at '/usr/sbin/sendmail'\n  #\n  #   Mail.defaults do\n  #     delivery_method :sendmail, :location => '/absolute/path/to/your/sendmail'\n  #   end\n  #\n  # Then just deliver the email as normal:\n  #\n  #   Mail.deliver do\n  #     to 'mikel@test.lindsaar.net'\n  #     from 'ada@test.lindsaar.net'\n  #     subject 'testing sendmail'\n  #     body 'testing sendmail'\n  #   end\n  #\n  # Or by calling deliver on a Mail message\n  #\n  #   mail = Mail.new do\n  #     to 'mikel@test.lindsaar.net'\n  #     from 'ada@test.lindsaar.net'\n  #     subject 'testing sendmail'\n  #     body 'testing sendmail'\n  #   end\n  #\n  #   mail.deliver!\n  class Sendmail\n\n    def initialize(values)\n      self.settings = { :location       => '/usr/sbin/sendmail',\n                        :arguments      => '-i -t' }.merge(values)\n    end\n\n    attr_accessor :settings\n\n    def deliver!(mail)\n      envelope_from = mail.return_path || mail.sender || mail.from_addrs.first\n      return_path = \"-f \" + '\"' + envelope_from.escape_for_shell + '\"' if envelope_from\n\n      arguments = [settings[:arguments], return_path].compact.join(\" \")\n\n      self.class.call(settings[:location], arguments, mail.destinations.collect(&:shellescape).join(\" \"), mail)\n    end\n\n    def self.call(path, arguments, destinations, mail)\n      IO.popen(\"#{path} #{arguments} #{destinations}\", \"w+\") do |io|\n        io.puts mail.encoded.to_lf\n        io.flush\n      end\n    end\n  end\nend\n", "# encoding: utf-8\nrequire 'spec_helper'\n\ndescribe \"sendmail delivery agent\" do\n  \n  before(:each) do\n    # Reset all defaults back to original state\n    Mail.defaults do\n      delivery_method :smtp, { :address              => \"localhost\",\n                               :port                 => 25,\n                               :domain               => 'localhost.localdomain',\n                               :user_name            => nil,\n                               :password             => nil,\n                               :authentication       => nil,\n                               :enable_starttls_auto => true  }\n    end\n  end\n\n  it \"should send an email using sendmail\" do\n    Mail.defaults do\n      delivery_method :sendmail\n    end\n    \n    mail = Mail.new do\n      from    'roger@test.lindsaar.net'\n      to      'marcel@test.lindsaar.net, bob@test.lindsaar.net'\n      subject 'invalid RFC2822'\n    end\n    \n    Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail', \n                                              '-i -t -f \"roger@test.lindsaar.net\"', \n                                              'marcel@test.lindsaar.net bob@test.lindsaar.net', \n                                              mail)\n    mail.deliver!\n  end\n\n  describe \"return path\" do\n\n    it \"should send an email with a return-path using sendmail\" do\n      Mail.defaults do\n        delivery_method :sendmail\n      end\n\n      mail = Mail.new do\n        to \"to@test.lindsaar.net\"\n        from \"from@test.lindsaar.net\"\n        sender \"sender@test.lindsaar.net\"\n        subject \"Can't set the return-path\"\n        return_path \"return@test.lindsaar.net\"\n        message_id \"<1234@test.lindsaar.net>\"\n        body \"body\"\n      end\n      \n      Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail',\n                                                '-i -t -f \"return@test.lindsaar.net\"', \n                                                'to@test.lindsaar.net', \n                                                mail)\n                                                \n      mail.deliver\n\n    end\n\n    it \"should use the sender address is no return path is specified\" do\n      Mail.defaults do\n        delivery_method :sendmail\n      end\n\n      mail = Mail.new do\n        to \"to@test.lindsaar.net\"\n        from \"from@test.lindsaar.net\"\n        sender \"sender@test.lindsaar.net\"\n        subject \"Can't set the return-path\"\n        message_id \"<1234@test.lindsaar.net>\"\n        body \"body\"\n      end\n\n      Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail',\n                                                '-i -t -f \"sender@test.lindsaar.net\"', \n                                                'to@test.lindsaar.net', \n                                                mail)\n\n      mail.deliver\n    end\n    \n    it \"should use the from address is no return path or sender are specified\" do\n      Mail.defaults do\n        delivery_method :sendmail\n      end\n\n      mail = Mail.new do\n        to \"to@test.lindsaar.net\"\n        from \"from@test.lindsaar.net\"\n        subject \"Can't set the return-path\"\n        message_id \"<1234@test.lindsaar.net>\"\n        body \"body\"\n      end\n\n      Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail',\n                                                '-i -t -f \"from@test.lindsaar.net\"', \n                                                'to@test.lindsaar.net', \n                                                mail)\n      mail.deliver\n    end\n\n    it \"should escape the return path address\" do\n      Mail.defaults do\n        delivery_method :sendmail\n      end\n\n      mail = Mail.new do\n        to 'to@test.lindsaar.net'\n        from '\"from+suffix test\"@test.lindsaar.net'\n        subject 'Can\\'t set the return-path'\n        message_id '<1234@test.lindsaar.net>'\n        body 'body'\n      end\n\n      Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail',\n                                                '-i -t -f \"\\\"from+suffix test\\\"@test.lindsaar.net\"',\n                                                'to@test.lindsaar.net',\n                                                mail)\n      mail.deliver\n    end\n  end\n\n  it \"should still send an email if the settings have been set to nil\" do\n    Mail.defaults do\n      delivery_method :sendmail, :arguments => nil\n    end\n    \n    mail = Mail.new do\n      from    'from@test.lindsaar.net'\n      to      'marcel@test.lindsaar.net, bob@test.lindsaar.net'\n      subject 'invalid RFC2822'\n    end\n    \n    Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail', \n                                              '-f \"from@test.lindsaar.net\"', \n                                              'marcel@test.lindsaar.net bob@test.lindsaar.net', \n                                              mail)\n    mail.deliver!\n  end\n\n  it \"should escape evil haxxor attemptes\" do\n    Mail.defaults do\n      delivery_method :sendmail, :arguments => nil\n    end\n    \n    mail = Mail.new do\n      from    '\"foo\\\";touch /tmp/PWNED;\\\"\"@blah.com'\n      to      'marcel@test.lindsaar.net'\n      subject 'invalid RFC2822'\n    end\n    \n    Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail', \n                                              \"-f \\\"\\\\\\\"foo\\\\\\\\\\\\\\\"\\\\;touch /tmp/PWNED\\\\;\\\\\\\\\\\\\\\"\\\\\\\"@blah.com\\\"\", \n                                              'marcel@test.lindsaar.net', \n                                              mail)\n    mail.deliver!\n  end\nend\n"], "fixing_code": ["module Mail\n  # A delivery method implementation which sends via sendmail.\n  #\n  # To use this, first find out where the sendmail binary is on your computer,\n  # if you are on a mac or unix box, it is usually in /usr/sbin/sendmail, this will\n  # be your sendmail location.\n  #\n  #   Mail.defaults do\n  #     delivery_method :sendmail\n  #   end\n  #\n  # Or if your sendmail binary is not at '/usr/sbin/sendmail'\n  #\n  #   Mail.defaults do\n  #     delivery_method :sendmail, :location => '/absolute/path/to/your/sendmail'\n  #   end\n  #\n  # Then just deliver the email as normal:\n  #\n  #   Mail.deliver do\n  #     to 'mikel@test.lindsaar.net'\n  #     from 'ada@test.lindsaar.net'\n  #     subject 'testing sendmail'\n  #     body 'testing sendmail'\n  #   end\n  #\n  # Or by calling deliver on a Mail message\n  #\n  #   mail = Mail.new do\n  #     to 'mikel@test.lindsaar.net'\n  #     from 'ada@test.lindsaar.net'\n  #     subject 'testing sendmail'\n  #     body 'testing sendmail'\n  #   end\n  #\n  #   mail.deliver!\n  class Sendmail\n\n    def initialize(values)\n      self.settings = { :location       => '/usr/sbin/sendmail',\n                        :arguments      => '-i -t' }.merge(values)\n    end\n\n    attr_accessor :settings\n\n    def deliver!(mail)\n      envelope_from = mail.return_path || mail.sender || mail.from_addrs.first\n      return_path = \"-f \" + '\"' + envelope_from.escape_for_shell + '\"' if envelope_from\n\n      arguments = [settings[:arguments], return_path].compact.join(\" \")\n\n      self.class.call(settings[:location], arguments, mail.destinations.collect(&:escape_for_shell).join(\" \"), mail)\n    end\n\n    def self.call(path, arguments, destinations, mail)\n      IO.popen(\"#{path} #{arguments} #{destinations}\", \"w+\") do |io|\n        io.puts mail.encoded.to_lf\n        io.flush\n      end\n    end\n  end\nend\n", "# encoding: utf-8\nrequire 'spec_helper'\n\ndescribe \"sendmail delivery agent\" do\n  \n  before(:each) do\n    # Reset all defaults back to original state\n    Mail.defaults do\n      delivery_method :smtp, { :address              => \"localhost\",\n                               :port                 => 25,\n                               :domain               => 'localhost.localdomain',\n                               :user_name            => nil,\n                               :password             => nil,\n                               :authentication       => nil,\n                               :enable_starttls_auto => true  }\n    end\n  end\n\n  it \"should send an email using sendmail\" do\n    Mail.defaults do\n      delivery_method :sendmail\n    end\n    \n    mail = Mail.new do\n      from    'roger@test.lindsaar.net'\n      to      'marcel@test.lindsaar.net, bob@test.lindsaar.net'\n      subject 'invalid RFC2822'\n    end\n    \n    Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail', \n                                              '-i -t -f \"roger@test.lindsaar.net\"', \n                                              'marcel@test.lindsaar.net bob@test.lindsaar.net', \n                                              mail)\n    mail.deliver!\n  end\n\n  describe \"return path\" do\n\n    it \"should send an email with a return-path using sendmail\" do\n      Mail.defaults do\n        delivery_method :sendmail\n      end\n\n      mail = Mail.new do\n        to \"to@test.lindsaar.net\"\n        from \"from@test.lindsaar.net\"\n        sender \"sender@test.lindsaar.net\"\n        subject \"Can't set the return-path\"\n        return_path \"return@test.lindsaar.net\"\n        message_id \"<1234@test.lindsaar.net>\"\n        body \"body\"\n      end\n      \n      Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail',\n                                                '-i -t -f \"return@test.lindsaar.net\"', \n                                                'to@test.lindsaar.net', \n                                                mail)\n                                                \n      mail.deliver\n\n    end\n\n    it \"should use the sender address is no return path is specified\" do\n      Mail.defaults do\n        delivery_method :sendmail\n      end\n\n      mail = Mail.new do\n        to \"to@test.lindsaar.net\"\n        from \"from@test.lindsaar.net\"\n        sender \"sender@test.lindsaar.net\"\n        subject \"Can't set the return-path\"\n        message_id \"<1234@test.lindsaar.net>\"\n        body \"body\"\n      end\n\n      Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail',\n                                                '-i -t -f \"sender@test.lindsaar.net\"', \n                                                'to@test.lindsaar.net', \n                                                mail)\n\n      mail.deliver\n    end\n    \n    it \"should use the from address is no return path or sender are specified\" do\n      Mail.defaults do\n        delivery_method :sendmail\n      end\n\n      mail = Mail.new do\n        to \"to@test.lindsaar.net\"\n        from \"from@test.lindsaar.net\"\n        subject \"Can't set the return-path\"\n        message_id \"<1234@test.lindsaar.net>\"\n        body \"body\"\n      end\n\n      Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail',\n                                                '-i -t -f \"from@test.lindsaar.net\"', \n                                                'to@test.lindsaar.net', \n                                                mail)\n      mail.deliver\n    end\n\n    it \"should escape the return path address\" do\n      Mail.defaults do\n        delivery_method :sendmail\n      end\n\n      mail = Mail.new do\n        to 'to@test.lindsaar.net'\n        from '\"from+suffix test\"@test.lindsaar.net'\n        subject 'Can\\'t set the return-path'\n        message_id '<1234@test.lindsaar.net>'\n        body 'body'\n      end\n\n      Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail',\n                                                '-i -t -f \"\\\"from+suffix test\\\"@test.lindsaar.net\"',\n                                                'to@test.lindsaar.net',\n                                                mail)\n      mail.deliver\n    end\n  end\n\n  it \"should still send an email if the settings have been set to nil\" do\n    Mail.defaults do\n      delivery_method :sendmail, :arguments => nil\n    end\n    \n    mail = Mail.new do\n      from    'from@test.lindsaar.net'\n      to      'marcel@test.lindsaar.net, bob@test.lindsaar.net'\n      subject 'invalid RFC2822'\n    end\n    \n    Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail', \n                                              '-f \"from@test.lindsaar.net\"', \n                                              'marcel@test.lindsaar.net bob@test.lindsaar.net', \n                                              mail)\n    mail.deliver!\n  end\n\n  it \"should escape evil haxxor attemptes\" do\n    Mail.defaults do\n      delivery_method :sendmail, :arguments => nil\n    end\n    \n    mail = Mail.new do\n      from    '\"foo\\\";touch /tmp/PWNED;\\\"\"@blah.com'\n      to      '\"foo\\\";touch /tmp/PWNED;\\\"\"@blah.com'\n      subject 'invalid RFC2822'\n    end\n    \n    Mail::Sendmail.should_receive(:call).with('/usr/sbin/sendmail', \n                                              \"-f \\\"\\\\\\\"foo\\\\\\\\\\\\\\\"\\\\;touch /tmp/PWNED\\\\;\\\\\\\\\\\\\\\"\\\\\\\"@blah.com\\\"\", \n                                              \"\\\\\\\"foo\\\\\\\\\\\\\\\"\\\\;touch /tmp/PWNED\\\\;\\\\\\\\\\\\\\\"\\\\\\\"@blah.com\", \n                                              mail)\n    mail.deliver!\n  end\nend\n"], "filenames": ["lib/mail/network/delivery_methods/sendmail.rb", "spec/mail/network/delivery_methods/sendmail_spec.rb"], "buggy_code_start_loc": [52, 151], "buggy_code_end_loc": [53, 158], "fixing_code_start_loc": [52, 151], "fixing_code_end_loc": [53, 158], "type": "CWE-20", "message": "The Mail gem before 2.4.3 for Ruby allows remote attackers to execute arbitrary commands via shell metacharacters in a (1) sendmail or (2) exim delivery.", "other": {"cve": {"id": "CVE-2012-2140", "sourceIdentifier": "secalert@redhat.com", "published": "2012-07-18T18:55:01.510", "lastModified": "2012-10-30T04:03:55.957", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The Mail gem before 2.4.3 for Ruby allows remote attackers to execute arbitrary commands via shell metacharacters in a (1) sendmail or (2) exim delivery."}, {"lang": "es", "value": "La gema Mail antes de v2.4.3 para Ruby permite a atacantes remotos ejecutar comandos arbitrarios a trav\u00e9s de metacaracteres en  (1) sendmail o (2) una entrega exim."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rubygems:mail_gem:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.4.1", "matchCriteriaId": "8FB39856-2AE6-43F8-B7AE-B58CBB1AF693"}, {"vulnerable": true, "criteria": "cpe:2.3:a:rubygems:mail_gem:2.3.2:*:*:*:*:*:*:*", "matchCriteriaId": "5CCE5E86-3A46-4B27-8626-4106778E990B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:rubygems:mail_gem:2.3.3:*:*:*:*:*:*:*", "matchCriteriaId": "B0743617-3C95-4DFE-B19B-425FE4A4876B"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2012-May/080645.html", "source": "secalert@redhat.com"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2012-May/080648.html", "source": "secalert@redhat.com"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2012-May/080747.html", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/04/25/8", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/04/26/1", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.novell.com/show_bug.cgi?id=759092", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=816352", "source": "secalert@redhat.com"}, {"url": "https://github.com/mikel/mail/blob/9beb079c70d236a5ad2e1ba95b2c977e55deb7af/CHANGELOG.rdoc", "source": "secalert@redhat.com"}, {"url": "https://github.com/mikel/mail/commit/39b590ddb08f90ddbe445837359a2c8843e533d0", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/mikel/mail/commit/ac56f03bdfc30b379aeecd4ff317d08fdaa328c2", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/mikel/mail/commit/39b590ddb08f90ddbe445837359a2c8843e533d0"}}