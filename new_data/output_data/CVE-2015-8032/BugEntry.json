{"buggy_code": ["<?php\n\n/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2005 Dean Allen\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Write panel.\n *\n * @package Admin\\Article\n */\n\nif (!defined('txpinterface')) {\n    die('txpinterface is undefined.');\n}\n\nglobal $vars, $statuses;\n\n$vars = array(\n    'ID',\n    'Title',\n    'Body',\n    'Excerpt',\n    'textile_excerpt',\n    'Image',\n    'textile_body',\n    'Keywords',\n    'description',\n    'Status',\n    'Posted',\n    'Expires',\n    'Section',\n    'Category1',\n    'Category2',\n    'Annotate',\n    'AnnotateInvite',\n    'publish_now',\n    'reset_time',\n    'AuthorID',\n    'sPosted',\n    'LastModID',\n    'sLastMod',\n    'override_form',\n    'from_view',\n    'year',\n    'month',\n    'day',\n    'hour',\n    'minute',\n    'second',\n    'url_title',\n    'exp_year',\n    'exp_month',\n    'exp_day',\n    'exp_hour',\n    'exp_minute',\n    'exp_second',\n    'sExpires',\n);\n\n$cfs = getCustomFields();\n\nforeach ($cfs as $i => $cf_name) {\n    $vars[] = \"custom_$i\";\n}\n\n$statuses = status_list();\n\nif (!empty($event) and $event == 'article') {\n    require_privs('article');\n\n    $save = gps('save');\n\n    if ($save) {\n        $step = 'save';\n    }\n\n    $publish = gps('publish');\n\n    if ($publish) {\n        $step = 'publish';\n    }\n\n    if (empty($step)) {\n        $step = 'create';\n    }\n\n    bouncer($step, array(\n        'create'  => false,\n        'publish' => true,\n        'edit'    => false,\n        'save'    => true,\n    ));\n\n    switch ($step) {\n        case \"create\":\n            article_edit();\n            break;\n        case \"publish\":\n            article_post();\n            break;\n        case \"edit\":\n            article_edit();\n            break;\n        case \"save\":\n            article_save();\n            break;\n    }\n}\n\n/**\n * Processes sent forms and saves new articles.\n */\n\nfunction article_post()\n{\n    global $txp_user, $vars, $prefs;\n\n    extract($prefs);\n\n    $incoming = array_map('assert_string', psa($vars));\n\n    if (!has_privs('article.set_markup')) {\n        $incoming['textile_body'] = $incoming['textile_excerpt'] = $use_textile;\n    }\n\n    $incoming = doSlash(textile_main_fields($incoming));\n    extract($incoming);\n\n    $msg = '';\n    if ($Title or $Body or $Excerpt) {\n        $is_clone = (ps('copy'));\n\n        $Status = assert_int(ps('Status'));\n\n        // Comments my be on, off, or disabled.\n        $Annotate = (int) $Annotate;\n\n        // Set and validate article timestamp.\n        if ($publish_now == 1) {\n            $when = 'now()';\n            $when_ts = time();\n        } else {\n            if (!is_numeric($year) || !is_numeric($month) || !is_numeric($day) || !is_numeric($hour) || !is_numeric($minute) || !is_numeric($second)) {\n                $ts = false;\n            } else {\n                $ts = strtotime($year.'-'.$month.'-'.$day.' '.$hour.':'.$minute.':'.$second);\n            }\n\n            // Tracking the PHP meanders on how to return an error.\n            if ($ts === false || $ts < 0) {\n                article_edit(array(gTxt('invalid_postdate'), E_ERROR));\n\n                return;\n            }\n\n            $when_ts = $ts - tz_offset($ts);\n            $when = \"from_unixtime($when_ts)\";\n        }\n\n        // Force a reasonable 'last modified' date for future articles,\n        // keep recent articles list in order.\n        $lastmod = ($when_ts > time() ? 'now()' : $when);\n\n        // Set and validate expiry timestamp.\n        if (empty($exp_year)) {\n            $expires = 0;\n        } else {\n            if (empty($exp_month)) {\n                $exp_month = 1;\n            }\n\n            if (empty($exp_day)) {\n                $exp_day = 1;\n            }\n\n            if (empty($exp_hour)) {\n                $exp_hour = 0;\n            }\n\n            if (empty($exp_minute)) {\n                $exp_minute = 0;\n            }\n\n            if (empty($exp_second)) {\n                $exp_second = 0;\n            }\n\n            $ts = strtotime($exp_year.'-'.$exp_month.'-'.$exp_day.' '.$exp_hour.':'.$exp_minute.':'.$exp_second);\n            if ($ts === false || $ts < 0) {\n                article_edit(array(gTxt('invalid_expirydate'), E_ERROR));\n\n                return;\n            } else {\n                $expires = $ts - tz_offset($ts);\n            }\n        }\n\n        if ($expires && ($expires <= $when_ts)) {\n            article_edit(array(gTxt('article_expires_before_postdate'), E_ERROR));\n\n            return;\n        }\n\n        if ($expires) {\n            $whenexpires = \"from_unixtime($expires)\";\n        } else {\n            $whenexpires = NULLDATETIME;\n        }\n\n        $user = doSlash($txp_user);\n        $description = doSlash($description);\n        $Keywords = doSlash(trim(preg_replace('/( ?[\\r\\n\\t,])+ ?/s', ',', preg_replace('/ +/', ' ', ps('Keywords'))), ', '));\n        $msg = '';\n\n        if (!has_privs('article.publish') && $Status >= STATUS_LIVE) {\n            $Status = STATUS_PENDING;\n        }\n\n        if ($is_clone && $Status >= STATUS_LIVE) {\n            $Status = STATUS_DRAFT;\n            $url_title = '';\n        }\n\n        if (empty($url_title)) {\n            $url_title = stripSpace($Title_plain, 1);\n        }\n\n        $cfq = array();\n        $cfs = getCustomFields();\n\n        foreach ($cfs as $i => $cf_name) {\n            $custom_x = \"custom_{$i}\";\n            $cfq[] = \"custom_$i = '\".$$custom_x.\"'\";\n        }\n\n        $cfq = join(', ', $cfq);\n\n        $rs = compact($vars);\n        if (article_validate($rs, $msg)) {\n            $ok = safe_insert(\n               \"textpattern\",\n               \"Title           = '$Title',\n                Body            = '$Body',\n                Body_html       = '$Body_html',\n                Excerpt         = '$Excerpt',\n                Excerpt_html    = '$Excerpt_html',\n                Image           = '$Image',\n                Keywords        = '$Keywords',\n                description     = '$description',\n                Status          =  $Status,\n                Posted          =  $when,\n                Expires         =  $whenexpires,\n                AuthorID        = '$user',\n                LastMod         =  $lastmod,\n                LastModID       = '$user',\n                Section         = '$Section',\n                Category1       = '$Category1',\n                Category2       = '$Category2',\n                textile_body    = '$textile_body',\n                textile_excerpt = '$textile_excerpt',\n                Annotate        =  $Annotate,\n                override_form   = '$override_form',\n                url_title       = '$url_title',\n                AnnotateInvite  = '$AnnotateInvite',\"\n                .(($cfs) ? $cfq.',' : '').\n                \"uid            = '\".md5(uniqid(rand(), true)).\"',\n                feed_time       = now()\"\n            );\n\n            if ($ok) {\n                $rs['ID'] = $GLOBALS['ID'] = $ok;\n\n                if ($is_clone) {\n                    safe_update(\n                        'textpattern',\n                        \"Title = concat(Title, ' (', {$ok}, ')'),\n                        url_title = concat(url_title, '-', {$ok})\",\n                        \"ID = {$ok}\"\n                    );\n                }\n\n                if ($Status >= STATUS_LIVE) {\n                    do_pings();\n                    update_lastmod('article_posted', $rs);\n                }\n\n                callback_event('article_posted', '', false, $rs);\n                $s = check_url_title($url_title);\n                $msg = array(get_status_message($Status).' '.$s, ($s ? E_WARNING : 0));\n            } else {\n                unset($GLOBALS['ID']);\n                $msg = array(gTxt('article_save_failed'), E_ERROR);\n            }\n        }\n    }\n    article_edit($msg);\n}\n\n/**\n * Processes sent forms and updates existing articles.\n */\n\nfunction article_save()\n{\n    global $txp_user, $vars, $prefs;\n\n    extract($prefs);\n\n    $incoming = array_map('assert_string', psa($vars));\n\n    $oldArticle = safe_row('Status, url_title, Title, '.\n        'unix_timestamp(LastMod) as sLastMod, LastModID, '.\n        'unix_timestamp(Posted) as sPosted, '.\n        'unix_timestamp(Expires) as sExpires',\n        'textpattern', 'ID = '.(int) $incoming['ID']);\n\n    if (!(($oldArticle['Status'] >= STATUS_LIVE and has_privs('article.edit.published'))\n        or ($oldArticle['Status'] >= STATUS_LIVE and $incoming['AuthorID'] === $txp_user and has_privs('article.edit.own.published'))\n        or ($oldArticle['Status'] < STATUS_LIVE and has_privs('article.edit'))\n        or ($oldArticle['Status'] < STATUS_LIVE and $incoming['AuthorID'] === $txp_user and has_privs('article.edit.own')))) {\n        // Not allowed, you silly rabbit, you shouldn't even be here.\n        // Show default editing screen.\n        article_edit();\n\n        return;\n    }\n\n    if ($oldArticle['sLastMod'] != $incoming['sLastMod']) {\n        article_edit(array(gTxt('concurrent_edit_by', array('{author}' => txpspecialchars($oldArticle['LastModID']))), E_ERROR), true, true);\n\n        return;\n    }\n\n    if (!has_privs('article.set_markup')) {\n        $incoming['textile_body'] = $incoming['textile_excerpt'] = $use_textile;\n    }\n\n    $incoming = textile_main_fields($incoming);\n\n    extract(doSlash($incoming));\n    extract(array_map('assert_int', psa(array('ID', 'Status'))));\n\n    // Comments may be on, off, or disabled.\n    $Annotate = (int) $Annotate;\n\n    if (!has_privs('article.publish') && $Status >= STATUS_LIVE) {\n        $Status = STATUS_PENDING;\n    }\n\n    // Set and validate article timestamp.\n    if ($reset_time) {\n        $whenposted = \"Posted=now()\";\n        $when_ts = time();\n    } else {\n        if (!is_numeric($year) || !is_numeric($month) || !is_numeric($day) || !is_numeric($hour) || !is_numeric($minute) || !is_numeric($second)) {\n            $ts = false;\n        } else {\n            $ts = strtotime($year.'-'.$month.'-'.$day.' '.$hour.':'.$minute.':'.$second);\n        }\n\n        if ($ts === false || $ts < 0) {\n            $when = $when_ts = $oldArticle['sPosted'];\n            $msg = array(gTxt('invalid_postdate'), E_ERROR);\n        } else {\n            $when = $when_ts = $ts - tz_offset($ts);\n        }\n\n        $whenposted = \"Posted=from_unixtime($when)\";\n    }\n\n    // Set and validate expiry timestamp.\n    if (empty($exp_year)) {\n        $expires = 0;\n    } else {\n        if (empty($exp_month)) {\n            $exp_month = 1;\n        }\n\n        if (empty($exp_day)) {\n            $exp_day = 1;\n        }\n\n        if (empty($exp_hour)) {\n            $exp_hour = 0;\n        }\n\n        if (empty($exp_minute)) {\n            $exp_minute = 0;\n        }\n\n        if (empty($exp_second)) {\n            $exp_second = 0;\n        }\n\n        $ts = strtotime($exp_year.'-'.$exp_month.'-'.$exp_day.' '.$exp_hour.':'.$exp_minute.':'.$exp_second);\n\n        if ($ts === false || $ts < 0) {\n            $expires = $oldArticle['sExpires'];\n            $msg = array(gTxt('invalid_expirydate'), E_ERROR);\n        } else {\n            $expires = $ts - tz_offset($ts);\n        }\n    }\n\n    if ($expires && ($expires <= $when_ts)) {\n        $expires = $oldArticle['sExpires'];\n        $msg = array(gTxt('article_expires_before_postdate'), E_ERROR);\n    }\n\n    if ($expires) {\n        $whenexpires = \"Expires=from_unixtime($expires)\";\n    } else {\n        $whenexpires = \"Expires=\".NULLDATETIME;\n    }\n\n    // Auto-update custom-titles according to Title, as long as unpublished and\n    // NOT customised.\n    if (empty($url_title)\n        || (($oldArticle['Status'] < STATUS_LIVE)\n        && ($oldArticle['url_title'] === $url_title)\n        && ($oldArticle['url_title'] === stripSpace($oldArticle['Title'], 1))\n        && ($oldArticle['Title'] !== $Title)\n    )) {\n        $url_title = stripSpace($Title_plain, 1);\n    }\n\n    $Keywords = doSlash(trim(preg_replace('/( ?[\\r\\n\\t,])+ ?/s', ',', preg_replace('/ +/', ' ', ps('Keywords'))), ', '));\n\n    $user = doSlash($txp_user);\n    $description = doSlash($description);\n\n    $cfq = array();\n    $cfs = getCustomFields();\n\n    foreach ($cfs as $i => $cf_name) {\n        $custom_x = \"custom_{$i}\";\n        $cfq[] = \"custom_$i = '\".$$custom_x.\"'\";\n    }\n\n    $cfq = join(', ', $cfq);\n\n    $rs = compact($vars);\n    if (article_validate($rs, $msg)) {\n        if (safe_update(\"textpattern\",\n           \"Title           = '$Title',\n            Body            = '$Body',\n            Body_html       = '$Body_html',\n            Excerpt         = '$Excerpt',\n            Excerpt_html    = '$Excerpt_html',\n            Keywords        = '$Keywords',\n            description     = '$description',\n            Image           = '$Image',\n            Status          =  $Status,\n            LastMod         =  now(),\n            LastModID       = '$user',\n            Section         = '$Section',\n            Category1       = '$Category1',\n            Category2       = '$Category2',\n            Annotate        =  $Annotate,\n            textile_body    = '$textile_body',\n            textile_excerpt = '$textile_excerpt',\n            override_form   = '$override_form',\n            url_title       = '$url_title',\n            AnnotateInvite  = '$AnnotateInvite',\"\n            .(($cfs) ? $cfq.',' : '').\n            \"$whenposted,\n            $whenexpires\",\n            \"ID = $ID\"\n        )) {\n            if ($Status >= STATUS_LIVE && $oldArticle['Status'] < STATUS_LIVE) {\n                do_pings();\n            }\n\n            if ($Status >= STATUS_LIVE || $oldArticle['Status'] >= STATUS_LIVE) {\n                update_lastmod('article_saved', $rs);\n            }\n\n            callback_event('article_saved', '', false, $rs);\n\n            if (empty($msg)) {\n                $s = check_url_title($url_title);\n                $msg = array(get_status_message($Status).' '.$s, $s ? E_WARNING : 0);\n            }\n        } else {\n            $msg = array(gTxt('article_save_failed'), E_ERROR);\n        }\n    }\n    article_edit($msg, false, true);\n}\n\n/**\n * Renders article editor form.\n *\n * @param string|array $message          The activity message\n * @param bool         $concurrent       Treat as a concurrent save\n * @param bool         $refresh_partials Whether refresh partial contents\n */\n\nfunction article_edit($message = '', $concurrent = false, $refresh_partials = false)\n{\n    global $vars, $txp_user, $prefs, $event, $view;\n\n    extract($prefs);\n\n    /*\n    $partials is an array of:\n    $key => array (\n        'mode' => {PARTIAL_STATIC | PARTIAL_VOLATILE | PARTIAL_VOLATILE_VALUE},\n        'selector' => $DOM_selector,\n         'cb' => $callback_function,\n         'html' => $return_value_of_callback_function (need not be intialised here)\n    )\n    */\n    $partials = array(\n        'html_title'   => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => 'title',\n            'cb'       => 'article_partial_html_title',\n        ),\n        'sLastMod' => array(\n            'mode'     => PARTIAL_VOLATILE_VALUE,\n            'selector' => '[name=sLastMod]',\n            'cb'       => 'article_partial_value',\n        ),\n        'sPosted' => array(\n            'mode'     => PARTIAL_VOLATILE_VALUE,\n            'selector' => '[name=sPosted]',\n            'cb'       => 'article_partial_value',\n        ),\n        'sidehelp' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#textfilter_group',\n            'cb'       => 'article_partial_sidehelp',\n        ),\n        'url_title' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.url-title',\n            'cb'       => 'article_partial_url_title',\n        ),\n        'url_title_value' => array(\n            'mode'     => PARTIAL_VOLATILE_VALUE,\n            'selector' => '#url-title',\n            'cb'       => 'article_partial_url_title_value',\n        ),\n        'description' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.description',\n            'cb'       => 'article_partial_description',\n        ),\n        'description_value'  => array(\n            'mode'     => PARTIAL_VOLATILE_VALUE,\n            'selector' => '#description',\n            'cb'       => 'article_partial_description_value',\n        ),\n        'keywords' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.keywords',\n            'cb'       => 'article_partial_keywords',\n        ),\n        'keywords_value'  => array(\n            'mode'     => PARTIAL_VOLATILE_VALUE,\n            'selector' => '#keywords',\n            'cb'       => 'article_partial_keywords_value',\n        ),\n        'image' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => '#image_group',\n            'cb'       => 'article_partial_image',\n        ),\n        'custom_fields' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => '#custom_field_group',\n            'cb'       => 'article_partial_custom_fields',\n        ),\n        'recent_articles' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#recent_group .recent',\n            'cb'       => 'article_partial_recent_articles',\n        ),\n        'title' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.title',\n            'cb'       => 'article_partial_title',\n        ),\n        'title_value'  => array(\n            'mode'     => PARTIAL_VOLATILE_VALUE,\n            'selector' => '#title',\n            'cb'       => 'article_partial_title_value',\n        ),\n        'article_clone' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#article_partial_article_clone',\n            'cb'       => 'article_partial_article_clone',\n        ),\n        'article_view' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#article_partial_article_view',\n            'cb'       => 'article_partial_article_view',\n        ),\n        'body' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.body',\n            'cb'       => 'article_partial_body',\n        ),\n        'excerpt' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.excerpt',\n            'cb'       => 'article_partial_excerpt',\n        ),\n        'author' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => 'p.author',\n            'cb'       => 'article_partial_author',\n        ),\n        'view_modes' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#view_modes',\n            'cb'       => 'article_partial_view_modes',\n        ),\n        'article_nav' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => 'p.nav-tertiary',\n            'cb'       => 'article_partial_article_nav',\n        ),\n        'status' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#write-status',\n            'cb'       => 'article_partial_status',\n        ),\n        'categories' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => '#categories_group',\n            'cb'       => 'article_partial_categories',\n        ),\n        'section' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.section',\n            'cb'       => 'article_partial_section',\n        ),\n        'comments' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#write-comments',\n            'cb'       => 'article_partial_comments',\n        ),\n        'posted' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#write-timestamp',\n            'cb'       => 'article_partial_posted',\n        ),\n        'expires' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#write-expires',\n            'cb'       => 'article_partial_expires',\n        ),\n    );\n\n    // Add partials for custom fields (and their values which is redundant by\n    // design, for plugins).\n    global $cfs;\n\n    foreach ($cfs as $k => $v) {\n        $partials[\"custom_field_{$k}\"] = array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => \"p.custom-field.custom-{$k}\",\n            'cb'       => 'article_partial_custom_field',\n        );\n        $partials[\"custom_{$k}\"] = array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => \"#custom-{$k}\",\n            'cb'       => 'article_partial_value',\n        );\n    }\n\n    extract(gpsa(array('view', 'from_view', 'step')));\n\n    // Newly-saved article.\n    if (!empty($GLOBALS['ID'])) {\n        $ID = $GLOBALS['ID'];\n        $step = 'edit';\n    } else {\n        $ID = gps('ID');\n    }\n\n    // Switch to 'text' view upon page load and after article post.\n    if (!$view || gps('save') || gps('publish')) {\n        $view = 'text';\n    }\n\n    if (!$step) {\n        $step = \"create\";\n    }\n\n    if ($step == \"edit\"\n        && $view == \"text\"\n        && !empty($ID)\n        && $from_view != 'preview'\n        && $from_view != 'html'\n        && !$concurrent) {\n        $pull = true; // It's an existing article - off we go to the database.\n        $ID = assert_int($ID);\n\n        $rs = safe_row(\n            \"*, unix_timestamp(Posted) as sPosted,\n            unix_timestamp(Expires) as sExpires,\n            unix_timestamp(LastMod) as sLastMod\",\n            \"textpattern\",\n            \"ID=$ID\"\n        );\n\n        if (empty($rs)) {\n            return;\n        }\n\n        $rs['reset_time'] = $rs['publish_now'] = false;\n    } else {\n        $pull = false; // Assume they came from post.\n\n        if ($from_view == 'preview' or $from_view == 'html') {\n            $store_out = array();\n            $store = unserialize(base64_decode(ps('store')));\n\n            foreach ($vars as $var) {\n                if (isset($store[$var])) {\n                    $store_out[$var] = $store[$var];\n                }\n            }\n        } else {\n            $store_out = gpsa($vars);\n\n            if ($concurrent) {\n                $store_out['sLastMod'] = safe_field('unix_timestamp(LastMod) as sLastMod', 'textpattern', 'ID='.$ID);\n            }\n        }\n\n        // Use preferred Textfilter as default and fallback.\n        $hasfilter = new Textpattern_Textfilter_Constraint(null);\n        $validator = new Validator();\n\n        foreach (array('textile_body', 'textile_excerpt') as $k) {\n            $hasfilter->setValue($store_out[$k]);\n            $validator->setConstraints($hasfilter);\n            if (!$validator->validate()) {\n                $store_out[$k] = $use_textile;\n            }\n        }\n\n        $rs = textile_main_fields($store_out);\n\n        if (!empty($rs['exp_year'])) {\n            if (empty($rs['exp_month'])) {\n                $rs['exp_month'] = 1;\n            }\n\n            if (empty($rs['exp_day'])) {\n                $rs['exp_day'] = 1;\n            }\n\n            if (empty($rs['exp_hour'])) {\n                $rs['exp_hour'] = 0;\n            }\n\n            if (empty($rs['exp_minute'])) {\n                $rs['exp_minute'] = 0;\n            }\n\n            if (empty($rs['exp_second'])) {\n                $rs['exp_second'] = 0;\n            }\n\n            $rs['sExpires'] = safe_strtotime($rs['exp_year'].'-'.$rs['exp_month'].'-'.$rs['exp_day'].' '.\n                $rs['exp_hour'].':'.$rs['exp_minute'].':'.$rs['exp_second']);\n        }\n\n        if (!empty($rs['year'])) {\n            $rs['sPosted'] = safe_strtotime($rs['year'].'-'.$rs['month'].'-'.$rs['day'].' '.\n                $rs['hour'].':'.$rs['minute'].':'.$rs['second']);\n        }\n    }\n\n    $validator = new Validator(new SectionConstraint($rs['Section']));\n    if (!$validator->validate()) {\n        $rs['Section'] = getDefaultSection();\n    }\n\n    extract($rs);\n\n    $GLOBALS['step'] = $step;\n\n    if ($step != 'create' && isset($sPosted)) {\n        // Previous record?\n        $rs['prev_id'] = checkIfNeighbour('prev', $sPosted);\n\n        // Next record?\n        $rs['next_id'] = checkIfNeighbour('next', $sPosted);\n    } else {\n        $rs['prev_id'] = $rs['next_id'] = 0;\n    }\n\n    // Let plugins chime in on partials meta data.\n    callback_event_ref('article_ui', 'partials_meta', 0, $rs, $partials);\n    $rs['partials_meta'] = &$partials;\n\n    // Get content for volatile partials.\n    foreach ($partials as $k => $p) {\n        if ($p['mode'] == PARTIAL_VOLATILE || $p['mode'] == PARTIAL_VOLATILE_VALUE) {\n            $cb = $p['cb'];\n            $partials[$k]['html'] = (is_array($cb) ? call_user_func($cb, $rs, $k) : $cb($rs, $k));\n        }\n    }\n\n    if ($refresh_partials) {\n        $response[] = announce($message);\n        $response[] = '$(\"#article_form [type=submit]\").val(textpattern.gTxt(\"save\"))';\n\n        if ($Status < STATUS_LIVE) {\n            $response[] = '$(\"#article_form\").addClass(\"saved\").removeClass(\"published\")';\n        } else {\n            $response[] = '$(\"#article_form\").addClass(\"published\").removeClass(\"saved\")';\n        }\n\n        // Update the volatile partials.\n        foreach ($partials as $k => $p) {\n            // Volatile partials need a target DOM selector.\n            if (empty($p['selector']) && $p['mode'] != PARTIAL_STATIC) {\n                trigger_error(\"Empty selector for partial '$k'\", E_USER_ERROR);\n            } else {\n                // Build response script.\n                if ($p['mode'] == PARTIAL_VOLATILE) {\n                    // Volatile partials replace *all* of the existing HTML\n                    // fragment for their selector.\n                    $response[] = '$(\"'.$p['selector'].'\").replaceWith(\"'.escape_js($p['html']).'\")';\n                } elseif ($p['mode'] == PARTIAL_VOLATILE_VALUE) {\n                    // Volatile partial values replace the *value* of elements\n                    // matching their selector.\n                    $response[] = '$(\"'.$p['selector'].'\").val(\"'.escape_js($p['html']).'\")';\n                }\n            }\n        }\n        send_script_response(join(\";\\n\", $response));\n\n        // Bail out.\n        return;\n    }\n\n    foreach ($partials as $k => $p) {\n        if ($p['mode'] == PARTIAL_STATIC) {\n            $cb = $p['cb'];\n            $partials[$k]['html'] = (is_array($cb) ? call_user_func($cb, $rs, $k) : $cb($rs, $k));\n        }\n    }\n\n    $page_title = $ID ? $Title : gTxt('write');\n\n    pagetop($page_title, $message);\n\n    $class = array();\n\n    if ($Status >= STATUS_LIVE) {\n        $class[] = 'published';\n    } elseif ($ID) {\n        $class[] = 'saved';\n    }\n\n    if ($step !== 'create') {\n        $class[] = 'async';\n    }\n\n    echo hed(gTxt('tab_write'), 1, array('class' => 'txp-heading txp-accessibility'));\n    echo\n        n.tag_start('form', array(\n            'id'     => 'article_form',\n            'name'   => 'article_form',\n            'method' => 'post',\n            'action' => 'index.php',\n            'class'  => $class,\n        )).\n        n.'<div id=\"'.$event.'_container\" class=\"txp-layout-grid\">';\n\n    if (!empty($store_out)) {\n        echo hInput('store', base64_encode(serialize($store_out)));\n    }\n\n    echo hInput('ID', $ID).\n        eInput('article').\n        sInput($step).\n        hInput('sPosted', $sPosted).\n        hInput('sLastMod', $sLastMod).\n        hInput('AuthorID', $AuthorID).\n        hInput('LastModID', $LastModID).\n        n.'<input type=\"hidden\" name=\"view\" />';\n\n    echo n.'<div class=\"txp-layout-cell txp-layout-1-4\">'.\n        n.'<div id=\"configuration_content\">';\n\n    if ($view == 'text') {\n        // Markup help.\n        echo $partials['sidehelp']['html'];\n\n        // Custom menu entries.\n        echo pluggable_ui('article_ui', 'extend_col_1', '', $rs);\n\n        // Advanced.\n\n        // Markup selection.\n        if (has_privs('article.set_markup')) {\n            $html_markup =\n                graf(\n                    '<label for=\"markup-body\">'.gTxt('article_markup').'</label>'.br.\n                    pref_text('textile_body', $textile_body, 'markup-body'), ' class=\"markup markup-body\"').\n                graf(\n                    '<label for=\"markup-excerpt\">'.gTxt('excerpt_markup').'</label>'.br.\n                    pref_text('textile_excerpt', $textile_excerpt, 'markup-excerpt'), ' class=\"markup markup-excerpt\"');\n        } else {\n            $html_markup = '';\n        }\n\n        $html_markup = pluggable_ui('article_ui', 'markup', $html_markup, $rs);\n\n        // Form override.\n        $form_pop = $allow_form_override ? form_pop($override_form, 'override-form') : '';\n        $html_override = $form_pop\n            ? pluggable_ui('article_ui', 'override', graf('<label for=\"override-form\">'.gTxt('override_default_form').'</label>'.popHelp('override_form').br.\n                $form_pop, ' class=\"override-form\"'), $rs)\n            : '';\n\n        echo wrapRegion('advanced_group', $html_markup.$html_override, 'advanced', 'advanced_options', 'article_advanced');\n\n        // Meta info.\n\n        // keywords.\n        $html_keywords = $partials['keywords']['html'];\n\n        // description.\n        $html_description = $partials['description']['html'];\n\n        // URL title.\n        $html_url_title = $partials['url_title']['html'];\n\n        echo wrapRegion('meta_group', $html_url_title.$html_description.$html_keywords, 'meta', 'meta', 'article_meta');\n\n        // Article image.\n        echo $partials['image']['html'];\n\n        // Custom fields.\n        echo $partials['custom_fields']['html'];\n\n        // Recent articles.\n        echo wrapRegion('recent_group', $partials['recent_articles']['html'], 'recent', 'recent_articles', 'article_recent');\n    } else {\n        echo sp;\n    }\n\n    echo n.'</div>'. // End of #configuration_content.\n        n.'</div>'; // End of .txp-layout-cell.\n\n    echo n.'<div class=\"txp-layout-cell txp-layout-2-4\">'.\n        n.'<div role=\"region\" id=\"main_content\">';\n\n    // View mode tabs.\n    echo $partials['view_modes']['html'];\n\n    // Title input.\n    if ($view == 'preview') {\n        echo n.'<div class=\"preview\">'.hed(gTxt('preview'), 2).hed($Title, 1, ' class=\"title\"');\n    } elseif ($view == 'html') {\n        echo n.'<div class=\"html\">'.hed('HTML', 2).hed($Title, 1, ' class=\"title\"');\n    } elseif ($view == 'text') {\n        echo n.'<div class=\"text\">'.$partials['title']['html'];\n    }\n\n    // Body.\n    if ($view == 'preview') {\n        echo n.'<div class=\"body\">'.$Body_html.'</div>';\n    } elseif ($view == 'html') {\n        echo tag(str_replace(array(n, t), array(br, sp.sp.sp.sp), txpspecialchars($Body_html)), 'code', ' class=\"body\"');\n    } else {\n        echo $partials['body']['html'];\n    }\n\n    // Excerpt.\n    if ($articles_use_excerpts) {\n        if ($view == 'preview') {\n            echo n.'<hr />'.n.'<div class=\"excerpt\">'.$Excerpt_html.'</div>';\n        } elseif ($view == 'html') {\n            echo n.'<hr />'.\n                tag(str_replace(array(n, t), array(br, sp.sp.sp.sp), txpspecialchars($Excerpt_html)), 'code', array('class' => 'excerpt'));\n        } else {\n            echo $partials['excerpt']['html'];\n        }\n    }\n\n    // Author.\n    if ($view == \"text\" && $step != \"create\") {\n        echo $partials['author']['html'];\n    }\n\n    echo hInput('from_view', $view),\n        n.'</div>';\n\n    echo n.'</div>'. // End of #main_content.\n        n.'</div>'; // End of .txp-layout-cell.\n\n    echo n.'<div class=\"txp-layout-cell txp-layout-1-4\">'.\n        n.'<div id=\"supporting_content\">';\n\n    if ($view == 'text') {\n        // Publish and Save buttons.\n        if ($step == 'create' and empty($GLOBALS['ID'])) {\n            if (has_privs('article.publish')) {\n                $push_button = fInput('submit', 'publish', gTxt('publish'), 'publish');\n            } else {\n                $push_button = fInput('submit', 'publish', gTxt('save'), 'publish');\n            }\n\n            echo graf($push_button, array('id' => 'write-publish'));\n        } elseif (\n            ($Status >= STATUS_LIVE && has_privs('article.edit.published')) ||\n            ($Status >= STATUS_LIVE && $AuthorID === $txp_user && has_privs('article.edit.own.published')) ||\n            ($Status < STATUS_LIVE && has_privs('article.edit')) ||\n            ($Status < STATUS_LIVE && $AuthorID === $txp_user && has_privs('article.edit.own'))\n        ) {\n            echo graf(fInput('submit', 'save', gTxt('save'), 'publish'), array('id' => 'write-save'));\n        }\n\n        if ($step != 'create') {\n            echo graf(href(gTxt('create_new'), 'index.php?event=article'), ' class=\"action-create\"');\n        }\n\n        // Prev/next article links.\n        if ($step != 'create' and ($rs['prev_id'] or $rs['next_id'])) {\n            echo $partials['article_nav']['html'];\n        }\n\n        // Sort and display.\n        echo pluggable_ui(\n            'article_ui',\n            'sort_display',\n            wrapRegion('write-sort', $partials['status']['html'].$partials['section']['html'].$partials['categories']['html'], '', gTxt('sort_display')),\n            $rs\n        );\n\n        // \"Comments\" section.\n        echo wrapRegion('comments_group', $partials['comments']['html'], 'comments', 'comment_settings', 'article_comments', (($use_comments == 1)\n            ? ''\n            : 'empty'\n        ));\n\n        // \"Dates\" section.\n\n        if ($step == \"create\" and empty($GLOBALS['ID'])) {\n            // Timestamp.\n            // Avoiding modified date to disappear.\n\n            if (!empty($store_out['year'])) {\n                $persist_timestamp = safe_strtotime(\n                    $store_out['year'].'-'.$store_out['month'].'-'.$store_out['day'].' '.\n                    $store_out['hour'].':'.$store_out['minute'].':'.$store_out['second']\n                );\n            } else {\n                $persist_timestamp = time();\n            }\n\n            $posted_block = pluggable_ui(\n                'article_ui',\n                'timestamp',\n                wrapRegion(\n                    'write-timestamp',\n                    graf(\n                        checkbox('publish_now', '1', $publish_now, '', 'publish_now').\n                        n.'<label for=\"publish_now\">'.gTxt('set_to_now').'</label>', ' class=\"publish-now\"'\n                    ).\n\n                    graf(gTxt('or_publish_at').popHelp('timestamp'), ' class=\"publish-at\"').\n\n                    graf(\n                        span(gTxt('date'), array('class' => 'txp-label-fixed')).br.\n                        tsi('year', '%Y', $persist_timestamp, '').' / '.\n                        tsi('month', '%m', $persist_timestamp, '').' / '.\n                        tsi('day', '%d', $persist_timestamp, ''), ' class=\"date posted created\"'\n                    ).\n\n                    graf(\n                        span(gTxt('time'), array('class' => 'txp-label-fixed')).br.\n                        tsi('hour', '%H', $persist_timestamp, '').' : '.\n                        tsi('minute', '%M', $persist_timestamp, '').' : '.\n                        tsi('second', '%S', $persist_timestamp, ''), ' class=\"time posted created\"'\n                    ),\n                    '',\n                    gTxt('timestamp')\n                ),\n                array('sPosted' => $persist_timestamp) + $rs\n            );\n\n            // Expires.\n\n            if (!empty($store_out['exp_year'])) {\n                $persist_timestamp = safe_strtotime(\n                    $store_out['exp_year'].'-'.$store_out['exp_month'].'-'.$store_out['exp_day'].' '.\n                    $store_out['exp_hour'].':'.$store_out['exp_minute'].':'.$store_out['second']\n                );\n            } else {\n                $persist_timestamp = 0;\n            }\n\n            $expires_block = pluggable_ui(\n                'article_ui',\n                'expires',\n                wrapRegion(\n                    'write-expires',\n                    graf(\n                        span(gTxt('date'), array('class' => 'txp-label-fixed')).br.\n                        tsi('exp_year', '%Y', $persist_timestamp, '').' / '.\n                        tsi('exp_month', '%m', $persist_timestamp, '').' / '.\n                        tsi('exp_day', '%d', $persist_timestamp, ''), ' class=\"date expires\"'\n                    ).\n\n                    graf(\n                        span(gTxt('time'), array('class' => 'txp-label-fixed')).br.\n                        tsi('exp_hour', '%H', $persist_timestamp, '').' : '.\n                        tsi('exp_minute', '%M', $persist_timestamp, '').' : '.\n                        tsi('exp_second', '%S', $persist_timestamp, ''), ' class=\"time expires\"'\n                    ),\n                    '',\n                    gTxt('expires')\n                ),\n                $rs\n            );\n        } else {\n            // Timestamp.\n            $posted_block = $partials['posted']['html'];\n\n            // Expires.\n            $expires_block = $partials['expires']['html'];\n        }\n\n        echo wrapRegion('dates_group', $posted_block.$expires_block, 'dates', 'date_settings', 'article_dates');\n    }\n\n    echo n.'</div>'.// End of #supporting_content.\n        n.'</div>'.// End of .txp-layout-cell.\n        n.'</div>'.// End of .txp-layout-grid.\n        tInput().\n        n.'</form>';\n}\n\n/**\n * Renders a custom field.\n *\n * @param  int    $num     The custom field number\n * @param  string $field   The label\n * @param  string $content The field contents\n * @return string HTML form field\n */\n\nfunction custField($num, $field, $content)\n{\n    return graf('<label for=\"custom-'.$num.'\">'.$field.'</label>'.br.\n        fInput('text', 'custom_'.$num, $content, '', '', '', INPUT_REGULAR, '', 'custom-'.$num), ' class=\"custom-field custom-'.$num.'\"');\n}\n\n/**\n * Gets the ID of the next or the previous article.\n *\n * @param  string $whichway Either '&lt;' or '&gt;'\n * @param  int    Unix timestamp\n * @return int\n */\n\nfunction checkIfNeighbour($whichway, $sPosted)\n{\n    $sPosted = assert_int($sPosted);\n    $dir = ($whichway == 'prev') ? '<' : '>';\n    $ord = ($whichway == 'prev') ? 'desc' : 'asc';\n\n    return safe_field(\"ID\", \"textpattern\",\n        \"Posted $dir from_unixtime($sPosted) order by Posted $ord limit 1\");\n}\n\n/**\n * Renders an article status field.\n *\n * @param  int    $status Selected status\n * @return string HTML\n */\n\nfunction status_display($status)\n{\n    global $statuses;\n\n    if (!$status) {\n        $status = get_pref('default_publish_status', STATUS_LIVE);\n    }\n\n    return graf(\n        '<label for=\"status\">'.gTxt('status').'</label>'.br.\n        selectInput('Status', $statuses, $status, false, '', 'status'), ' class=\"status\"');\n}\n\n/**\n * Renders a section field.\n *\n * @param  string $Section The selected section\n * @param  string $id      The HTML id\n * @return string HTML &lt;select&gt; input\n */\n\nfunction section_popup($Section, $id)\n{\n    $rs = safe_rows('name, title', 'txp_section', \"name != 'default' order by title asc, name asc\");\n\n    if ($rs) {\n        $options = array();\n\n        foreach ($rs as $a) {\n            $options[$a['name']] = $a['title'];\n        }\n\n        return selectInput('Section', $options, $Section, false, '', $id);\n    }\n\n    return false;\n}\n\n/**\n * Renders a category field.\n *\n * @param  string $name The Name of the field\n * @param  string $val  The selected option\n * @param  string $id   The HTML id\n * @return string HTML &lt;select&gt; input\n */\n\nfunction category_popup($name, $val, $id)\n{\n    $rs = getTree('root', 'article');\n\n    if ($rs) {\n        return treeSelectInput($name, $rs, $val, $id, 35);\n    }\n\n    return false;\n}\n\n/**\n * Renders a view tab.\n *\n * @param  string $tabevent Target view\n * @param  string $view     The current view\n * @return string HTML\n */\n\nfunction tab($tabevent, $view)\n{\n    $state = ($view == $tabevent) ? 'active' : '';\n    $pressed = ($view == $tabevent) ? 'true' : 'false';\n\n    $link = href(gTxt('view_'.$tabevent.'_short'), '#', array(\n        'data-view-mode' => $tabevent,\n        'role'           => 'button',\n        'aria-pressed'   => $pressed,\n        'title'          => gTxt('view_'.$tabevent),\n    ));\n\n    return n.tag($link, 'li', array(\n        'id'    => 'tab-'.$tabevent,\n        'class' => $state,\n    ));\n}\n\n/**\n * Gets the name of the default section.\n *\n * @return string The section\n */\n\nfunction getDefaultSection()\n{\n    return get_pref('default_section');\n}\n\n/**\n * Renders 'override form' field.\n *\n * @param  string $form The selected form\n * @param  string $id   The HTML id\n * @return string HTML &lt;select&gt; input\n */\n\nfunction form_pop($form, $id)\n{\n    $rs = safe_column('name', 'txp_form', \"type = 'article' and name != 'default' order by name\");\n\n    if ($rs) {\n        return selectInput('override_form', $rs, $form, true, '', $id);\n    }\n}\n\n/**\n * Checks URL title for duplicates.\n *\n * @param  string $url_title The URL title\n * @return string Localised feedback message, or an empty string\n */\n\nfunction check_url_title($url_title)\n{\n    // Check for blank or previously used identical url-titles.\n    if (strlen($url_title) === 0) {\n        return gTxt('url_title_is_blank');\n    } else {\n        $url_title_count = safe_count('textpattern', \"url_title = '$url_title'\");\n\n        if ($url_title_count > 1) {\n            return gTxt('url_title_is_multiple', array('{count}' => $url_title_count));\n        }\n    }\n\n    return '';\n}\n\n/**\n * Translates a status ID to a feedback message.\n *\n * This message is displayed when an article is saved.\n *\n * @param  int    $Status The status\n * @return string The status message\n */\n\nfunction get_status_message($Status)\n{\n    switch ($Status) {\n        case STATUS_PENDING:\n            return gTxt(\"article_saved_pending\");\n        case STATUS_HIDDEN:\n            return gTxt(\"article_saved_hidden\");\n        case STATUS_DRAFT:\n            return gTxt(\"article_saved_draft\");\n        default:\n            return gTxt('article_posted');\n    }\n}\n\n/**\n * Parses article fields using Textile.\n *\n * @param  array $incoming\n * @return array\n */\n\nfunction textile_main_fields($incoming)\n{\n    $textile = new Textpattern_Textile_Parser();\n\n    $incoming['Title_plain'] = trim($incoming['Title']);\n    $incoming['Title_html'] = ''; // not used\n    $incoming['Title'] = $textile->textileEncode($incoming['Title_plain']);\n\n    $incoming['Body_html'] = Txp::get('Textpattern_Textfilter_Registry')->filter(\n        $incoming['textile_body'],\n        $incoming['Body'],\n        array('field' => 'Body', 'options' => array('lite' => false), 'data' => $incoming)\n    );\n\n    $incoming['Excerpt_html'] = Txp::get('Textpattern_Textfilter_Registry')->filter(\n        $incoming['textile_excerpt'],\n        $incoming['Excerpt'],\n        array('field' => 'Excerpt', 'options' => array('lite' => false), 'data' => $incoming)\n    );\n\n    return $incoming;\n}\n\n/**\n * Pings Ping-O-Matic when an article is published.\n */\n\nfunction do_pings()\n{\n    global $prefs, $production_status;\n\n    // Only ping for Live sites.\n    if ($production_status !== 'live') {\n        return;\n    }\n\n    include_once txpath.'/lib/IXRClass.php';\n\n    callback_event('ping');\n\n    if ($prefs['ping_weblogsdotcom'] == 1) {\n        $wl_client = new IXR_Client('http://rpc.pingomatic.com/');\n        $wl_client->query('weblogUpdates.ping', $prefs['sitename'], hu);\n    }\n}\n\n/**\n * Renders the &lt;title&gt; element for the 'Write' page.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_html_title($rs)\n{\n    return tag(admin_title($rs['Title']), 'title');\n}\n\n/**\n * Renders article formatting tips.\n *\n * The rendered widget can be customised via the 'article_ui > sidehelp'\n * pluggable UI callback event.\n *\n * @param array $rs Article data\n */\n\nfunction article_partial_sidehelp($rs)\n{\n    // Show markup help for both body and excerpt if they are different.\n    $help = Txp::get('Textpattern_Textfilter_Registry')->getHelp($rs['textile_body']);\n\n    if ($rs['textile_body'] != $rs['textile_excerpt']) {\n        $help .= Txp::get('Textpattern_Textfilter_Registry')->getHelp($rs['textile_excerpt']);\n    }\n\n    $out = wrapRegion('textfilter_group', $help, 'textfilter_help', 'textfilter_help', 'article_textfilter_help');\n\n    return pluggable_ui('article_ui', 'sidehelp', $out, $rs);\n}\n\n/**\n * Renders article title partial.\n *\n * The rendered widget can be customised via the 'article_ui > title'\n * pluggable UI callback event.\n *\n * @param array $rs Article data\n */\n\nfunction article_partial_title($rs)\n{\n    global $step;\n    $av_cb = $rs['partials_meta']['article_view']['cb'];\n    $ac_cb = $rs['partials_meta']['article_clone']['cb'];\n    $out = graf('<label for=\"title\">'.gTxt('title').'</label>'.popHelp('title').br.\n        n.'<input type=\"text\" id=\"title\" name=\"Title\" value=\"'.escape_title($rs['Title']).'\" size=\"48\" />'.\n        ($step != 'create' ?  $ac_cb($rs).$av_cb($rs) : ''), ' class=\"title\"');\n\n    return pluggable_ui('article_ui', 'title', $out, $rs);\n}\n\n/**\n * Gets article's title from the given article data set.\n *\n * @param  array  $rs Article data\n * @return string\n */\n\nfunction article_partial_title_value($rs)\n{\n    return html_entity_decode($rs['Title'], ENT_QUOTES, 'UTF-8');\n}\n\n/**\n * Renders author partial.\n *\n * The rendered widget can be customised via the 'article_ui > author'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_author($rs)\n{\n    extract($rs);\n    $out = n.'<p class=\"author\"><small>'.gTxt('posted_by').': '.txpspecialchars($AuthorID).' &#183; '.safe_strftime('%d %b %Y &#183; %X', $sPosted);\n\n    if ($sPosted != $sLastMod) {\n        $out .= br.gTxt('modified_by').': '.txpspecialchars($LastModID).' &#183; '.safe_strftime('%d %b %Y &#183; %X', $sLastMod);\n    }\n\n    $out .= '</small></p>';\n\n    return pluggable_ui('article_ui', 'author', $out, $rs);\n}\n\n/**\n * Renders custom field partial.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_custom_field($rs, $key)\n{\n    global $prefs;\n    extract($prefs);\n\n    preg_match('/custom_field_([0-9]+)/', $key, $m);\n    $custom_x_set = \"custom_{$m[1]}_set\";\n    $custom_x = \"custom_{$m[1]}\";\n\n    return ($$custom_x_set !== '' ? custField($m[1], $$custom_x_set,  $rs[$custom_x]) : '');\n}\n\n/**\n * Renders URL title partial.\n *\n * The rendered widget can be customised via the 'article_ui > url_title'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_url_title($rs)\n{\n    $out = graf('<label for=\"url-title\">'.gTxt('url_title').'</label>'.popHelp('url_title').br.\n        fInput('text', 'url_title', article_partial_url_title_value($rs), '', '', '', INPUT_REGULAR, '', 'url-title'), ' class=\"url-title\"');\n\n    return pluggable_ui('article_ui', 'url_title', $out, $rs);\n}\n\n/**\n * Gets URL title from the given article data set.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_url_title_value($rs)\n{\n    return $rs['url_title'];\n}\n\n/**\n * Renders description partial.\n *\n * The rendered widget can be customised via the 'article_ui > description'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_description($rs)\n{\n    $out = graf('<label for=\"description\">'.gTxt('description').'</label>'.popHelp('description').br.\n        text_area('description', 0, 0, article_partial_description_value($rs), 'description', TEXTAREA_HEIGHT_SMALL, INPUT_LARGE), ' class=\"description\"');\n\n    return pluggable_ui('article_ui', 'description', $out, $rs);\n}\n\n/**\n * Gets description from the given article data set.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_description_value($rs)\n{\n    return $rs['description'];\n}\n\n/**\n * Renders keywords partial.\n *\n * The rendered widget can be customised via the 'article_ui > keywords'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_keywords($rs)\n{\n    $out = graf('<label for=\"keywords\">'.gTxt('keywords').'</label>'.popHelp('keywords').br.\n        n.'<textarea id=\"keywords\" name=\"Keywords\" cols=\"'.INPUT_MEDIUM.'\" rows=\"'.TEXTAREA_HEIGHT_SMALL.'\">'.txpspecialchars(article_partial_keywords_value($rs)).'</textarea>', ' class=\"keywords\"');\n\n    return pluggable_ui('article_ui', 'keywords', $out, $rs);\n}\n\n/**\n * Gets keywords from the given article data set.\n *\n * @param  array  $rs Article data\n * @return string\n */\n\nfunction article_partial_keywords_value($rs)\n{\n    // Separate keywords by a comma plus at least one space.\n    return preg_replace('/,(\\S)/', ', $1', $rs['Keywords']);\n}\n\n/**\n * Renders article image partial.\n *\n * The rendered widget can be customised via the 'article_ui > article_image'\n * pluggable UI callback event.\n *\n * @param  array $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_image($rs)\n{\n    $default = graf(\n        '<label for=\"article-image\">'.gTxt('article_image').'</label>'.popHelp('article_image').br.\n            fInput('text', 'Image', $rs['Image'], '', '', '', INPUT_REGULAR, '', 'article-image'), ' class=\"article-image\"');\n\n    return wrapRegion('image_group', pluggable_ui('article_ui', 'article_image', $default, $rs), 'image', 'article_image', 'article_image');\n}\n\n/**\n * Renders all custom fields in one partial.\n *\n * The rendered widget can be customised via the 'article_ui > custom_fields'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_custom_fields($rs)\n{\n    global $cfs;\n    $cf = '';\n\n    foreach ($cfs as $k => $v) {\n        $cf .= article_partial_custom_field($rs, \"custom_field_{$k}\");\n    }\n\n    return wrapRegion('custom_field_group', pluggable_ui('article_ui', 'custom_fields', $cf, $rs), 'custom_field', 'custom', 'article_custom_field', (($cfs) ? '' : 'empty'));\n}\n\n/**\n * Renders &lt;ol&gt; list of recent articles.\n *\n * The rendered widget can be customised via the 'article_ui > recent_articles'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_recent_articles($rs)\n{\n    $recents = safe_rows_start('Title, ID', 'textpattern', '1=1 order by LastMod desc limit '.(int) WRITE_RECENT_ARTICLES_COUNT);\n    $ra = '';\n\n    if ($recents && numRows($recents)) {\n        $ra = '<ol class=\"recent\">';\n\n        while ($recent = nextRow($recents)) {\n            if ($recent['Title'] === '') {\n                $recent['Title'] = gTxt('untitled').sp.$recent['ID'];\n            }\n\n            $ra .= n.'<li class=\"recent-article\">'.\n                href(escape_title($recent['Title']), '?event=article'.a.'step=edit'.a.'ID='.$recent['ID']).\n                '</li>';\n        }\n\n        $ra .= '</ol>';\n    }\n\n    return pluggable_ui('article_ui', 'recent_articles', $ra, $rs);\n}\n\n/**\n * Renders article duplicate link.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_article_clone($rs)\n{\n    extract($rs);\n\n    return n.span(href(gTxt('duplicate'), '#', array('id' => 'txp_clone', 'class' => 'article-clone')), array(\n            'id'    => 'article_partial_article_clone',\n            'class' => 'txp-actions',\n        ));\n}\n\n/**\n * Renders article view link.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_article_view($rs)\n{\n    extract($rs);\n\n    if ($Status != STATUS_LIVE and $Status != STATUS_STICKY) {\n        $url = '?txpreview='.intval($ID).'.'.time(); // Article ID plus cachebuster.\n    } else {\n        include_once txpath.'/publish/taghandlers.php';\n        $url = permlinkurl_id($ID);\n    }\n\n    return n.span(href(gTxt('view'), $url, array('class' => 'article-view')), array(\n        'id'    => 'article_partial_article_view',\n        'class' => 'txp-actions',\n    ));\n}\n\n/**\n * Renders article body field.\n *\n * The rendered widget can be customised via the 'article_ui > body'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_body($rs)\n{\n    $out = graf('<label for=\"body\">'.gTxt('body').'</label>'.popHelp('body').br.\n        n.'<textarea id=\"body\" name=\"Body\" cols=\"'.INPUT_LARGE.'\" rows=\"'.TEXTAREA_HEIGHT_LARGE.'\">'.txpspecialchars($rs['Body']).'</textarea>', ' class=\"body\"'\n    );\n\n    return pluggable_ui('article_ui', 'body', $out, $rs);\n}\n\n/**\n * Renders article excerpt field.\n *\n * The rendered widget can be customised via the 'article_ui > excerpt'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_excerpt($rs)\n{\n    $out = graf('<label for=\"excerpt\">'.gTxt('excerpt').'</label>'.popHelp('excerpt').br.\n        n.'<textarea id=\"excerpt\" name=\"Excerpt\" cols=\"'.INPUT_LARGE.'\" rows=\"'.TEXTAREA_HEIGHT_MEDIUM.'\">'.txpspecialchars($rs['Excerpt']).'</textarea>', ' class=\"excerpt\"'\n    );\n\n    return pluggable_ui('article_ui', 'excerpt', $out, $rs);\n}\n\n/**\n * Renders list of view modes.\n *\n * The rendered widget can be customised via the 'article_ui > view'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_view_modes($rs)\n{\n    global $step, $view, $use_textile;\n\n    if ($step == \"create\") {\n        $hasfilter = ($use_textile !== LEAVE_TEXT_UNTOUCHED);\n    } else {\n        $hasfilter = ($rs['textile_body'] !== LEAVE_TEXT_UNTOUCHED || $rs['textile_excerpt'] !== LEAVE_TEXT_UNTOUCHED);\n    }\n\n    if ($hasfilter) {\n        $out = n.tag((tab('text', $view).tab('html', $view).tab('preview', $view)), 'ul');\n    } else {\n        $out = '&#160;';\n    }\n\n    $out = pluggable_ui('article_ui', 'view', $out, $rs);\n\n    return n.tag($out.n, 'div', array('id' => 'view_modes'));\n}\n\n/**\n * Renders next/prev links.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_article_nav($rs)\n{\n    $out = array();\n\n    if ($rs['prev_id']) {\n        $out[] = prevnext_link(gTxt('prev'), 'article', 'edit', $rs['prev_id'], '', 'prev');\n    } else {\n        $out[] = span(gTxt('prev'), array(\n            'class'         => 'navlink-disabled',\n            'aria-disabled' => 'true',\n        ));\n    }\n\n    if ($rs['next_id']) {\n        $out[] = prevnext_link(gTxt('next'), 'article', 'edit', $rs['next_id'], '', 'next');\n    } else {\n        $out[] = span(gTxt('next'), array(\n            'class'         => 'navlink-disabled',\n            'aria-disabled' => 'true',\n        ));\n    }\n\n    return graf(join('', $out), ' role=\"navigation\" class=\"nav-tertiary prev-next\"');\n}\n\n/**\n * Renders article status partial.\n *\n * The rendered widget can be customised via the 'article_ui > status'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_status($rs)\n{\n    return pluggable_ui('article_ui', 'status', status_display($rs['Status']), $rs);\n}\n\n/**\n * Renders article section partial.\n *\n * The rendered widget can be customised via the 'article_ui > section'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_section($rs)\n{\n    $out = graf(\n        '<label for=\"section\">'.gTxt('section').'</label>'.\n\n        sp.span(\n            span('[', array('aria-hidden' => 'true')).\n            eLink('section', '', '', '', gTxt('edit')).\n            span(']', array('aria-hidden' => 'true')), array('class' => 'section-edit')).br.\n\n        section_popup($rs['Section'], 'section'), ' class=\"section\"');\n\n    return pluggable_ui('article_ui', 'section', $out, $rs);\n}\n\n/**\n * Renders article categories partial.\n *\n * The rendered widget can be customised via the 'article_ui > categories'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_categories($rs)\n{\n    $out = n.'<div id=\"categories_group\">'.\n\n        graf(\n            '<label for=\"category-1\">'.gTxt('category1').'</label>'.\n\n            sp.span(\n                span('[', array('aria-hidden' => 'true')).\n                eLink('category', '', '', '', gTxt('edit')).\n                span(']', array('aria-hidden' => 'true')), array('class' => 'category-edit')).br.\n\n            category_popup('Category1', $rs['Category1'], 'category-1'), ' class=\"category category-1\"').\n\n        graf(\n            '<label for=\"category-2\">'.gTxt('category2').'</label>'.br.\n            category_popup('Category2', $rs['Category2'], 'category-2'), ' class=\"category category-2\"').\n\n        n.'</div>';\n\n    return pluggable_ui('article_ui', 'categories', $out, $rs);\n}\n\n/**\n * Renders comment options partial.\n *\n * The rendered widget can be customised via the 'article_ui > annotate_invite'\n * pluggable UI callback event.\n *\n * @param  array       $rs Article data\n * @return string|null HTML\n */\n\nfunction article_partial_comments($rs)\n{\n    global $step, $use_comments, $comments_disabled_after, $comments_default_invite, $comments_on_default;\n\n    extract($rs);\n\n    if ($step == \"create\") {\n        // Avoid invite disappearing when previewing.\n\n        if (!empty($store_out['AnnotateInvite'])) {\n            $AnnotateInvite = $store_out['AnnotateInvite'];\n        } else {\n            $AnnotateInvite = $comments_default_invite;\n        }\n\n        if ($comments_on_default == 1) {\n            $Annotate = 1;\n        }\n    }\n\n    if ($use_comments == 1) {\n        $comments_expired = false;\n\n        if ($step != 'create' && $comments_disabled_after) {\n            $lifespan = $comments_disabled_after * 86400;\n            $time_since = time() - $sPosted;\n\n            if ($time_since > $lifespan) {\n                $comments_expired = true;\n            }\n        }\n\n        if ($comments_expired) {\n            $invite = graf(gTxt('expired'), ' class=\"comment-annotate\" id=\"write-comments\"');\n        } else {\n            $invite = n.'<div id=\"write-comments\">'.\n                graf(\n                onoffRadio('Annotate', $Annotate), ' class=\"comment-annotate\"').\n\n                graf(\n                '<label for=\"comment-invite\">'.gTxt('comment_invitation').'</label>'.br.\n                    fInput('text', 'AnnotateInvite', $AnnotateInvite, '', '', '', INPUT_REGULAR, '', 'comment-invite'), ' class=\"comment-invite\"').\n                n.'</div>';\n        }\n\n        return pluggable_ui('article_ui', 'annotate_invite', $invite, $rs);\n    }\n}\n\n/**\n * Renders timestamp partial.\n *\n * The rendered widget can be customised via the 'article_ui > timestamp'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_posted($rs)\n{\n    extract($rs);\n\n    $out =\n        wrapRegion(\n            'write-timestamp',\n            graf(\n                checkbox('reset_time', '1', $reset_time, '', 'reset_time').\n                tag(gTxt('reset_time'), 'label', array('for' => 'reset_time')), ' class=\"reset-time\"'\n            ).\n\n            graf(gTxt('published_at').popHelp('timestamp'), ' class=\"publish-at\"').\n\n            graf(\n                span(gTxt('date'), array('class' => 'txp-label-fixed')).br.\n                tsi('year', '%Y', $sPosted).' / '.\n                tsi('month', '%m', $sPosted).' / '.\n                tsi('day', '%d', $sPosted), ' class=\"date posted created\"'\n            ).\n\n            graf(\n                span(gTxt('time'), array('class' => 'txp-label-fixed')).br.\n                tsi('hour', '%H', $sPosted).' : '.\n                tsi('minute', '%M', $sPosted).' : '.\n                tsi('second', '%S', $sPosted), ' class=\"time posted created\"'\n            ),\n            '',\n            gTxt('timestamp')\n        );\n\n    return pluggable_ui('article_ui', 'timestamp', $out, $rs);\n}\n\n/**\n * Renders expiration date partial.\n *\n * The rendered widget can be customised via the 'article_ui > expires'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_expires($rs)\n{\n    extract($rs);\n\n    $out =\n        wrapRegion(\n            'write-expires',\n            graf(\n                span(gTxt('date'), array('class' => 'txp-label-fixed')).br.\n                tsi('exp_year', '%Y', $sExpires).' / '.\n                tsi('exp_month', '%m', $sExpires).' / '.\n                tsi('exp_day', '%d', $sExpires), ' class=\"date expires\"'\n            ).\n\n            graf(\n                span(gTxt('time'), array('class' => 'txp-label-fixed')).br.\n                tsi('exp_hour', '%H', $sExpires).' : '.\n                tsi('exp_minute', '%M', $sExpires).' : '.\n                tsi('exp_second', '%S', $sExpires), ' class=\"time expires\"'\n            ).\n            hInput('sExpires', $sExpires),\n            '',\n            gTxt('expires')\n        );\n\n    return pluggable_ui('article_ui', 'expires', $out, $rs);\n}\n\n/**\n * Gets a partial value from the given article data set.\n *\n * @param  array  $rs  Article data\n * @param  string $key The value to get\n * @return string HTML\n */\n\nfunction article_partial_value($rs, $key)\n{\n    return($rs[$key]);\n}\n\n/**\n * Validates article data.\n *\n * @param  array        $rs  Article data\n * @param  string|array $msg Initial message\n * @return string HTML\n */\n\nfunction article_validate($rs, &$msg)\n{\n    global $prefs, $step, $statuses;\n\n    if (!empty($msg)) {\n        return false;\n    }\n\n    $constraints = array(\n        'Status' => new ChoiceConstraint(\n            $rs['Status'],\n            array('choices' => array_keys($statuses), 'message' => 'invalid_status')\n        ),\n        'Section' => new SectionConstraint($rs['Section']),\n        'Category1' => new CategoryConstraint(\n            $rs['Category1'],\n            array('type' => 'article')\n        ),\n        'Category2' => new CategoryConstraint(\n            $rs['Category2'],\n            array('type' => 'article')\n        ),\n        'textile_body' => new Textpattern_Textfilter_Constraint(\n            $rs['textile_body'],\n            array('message' => 'invalid_textfilter_body')\n        ),\n        'textile_excerpt' => new Textpattern_Textfilter_Constraint(\n            $rs['textile_excerpt'],\n            array('message' => 'invalid_textfilter_excerpt')\n        ),\n    );\n\n    if (!$prefs['articles_use_excerpts']) {\n        $constraints['excerpt_blank'] = new BlankConstraint(\n            $rs['Excerpt'],\n            array('message' => 'excerpt_not_blank')\n        );\n    }\n\n    if (!$prefs['use_comments']) {\n        $constraints['annotate_invite_blank'] = new BlankConstraint(\n            $rs['AnnotateInvite'],\n            array('message' => 'invite_not_blank')\n        );\n\n        $constraints['annotate_false'] = new FalseConstraint(\n            $rs['Annotate'],\n            array('message' => 'comments_are_on')\n        );\n    }\n\n    if ($prefs['allow_form_override']) {\n        $constraints['override_form'] = new FormConstraint(\n            $rs['override_form'],\n            array('type' => 'article')\n        );\n    } else {\n        $constraints['override_form'] = new BlankConstraint(\n            $rs['override_form'],\n            array('message' => 'override_form_not_blank')\n        );\n    }\n\n    callback_event_ref('article_ui', \"validate_$step\", 0, $rs, $constraints);\n\n    $validator = new Validator($constraints);\n    if ($validator->validate()) {\n        $msg = '';\n\n        return true;\n    } else {\n        $msg = doArray($validator->getMessages(), 'gTxt');\n        $msg = array(join(', ', $msg), E_ERROR);\n\n        return false;\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * Textpattern Content Management System\n * http://textpattern.com\n *\n * Copyright (C) 2005 Dean Allen\n * Copyright (C) 2015 The Textpattern Development Team\n *\n * This file is part of Textpattern.\n *\n * Textpattern is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, version 2.\n *\n * Textpattern is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Textpattern. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Write panel.\n *\n * @package Admin\\Article\n */\n\nif (!defined('txpinterface')) {\n    die('txpinterface is undefined.');\n}\n\nglobal $vars, $statuses;\n\n$vars = array(\n    'ID',\n    'Title',\n    'Body',\n    'Excerpt',\n    'textile_excerpt',\n    'Image',\n    'textile_body',\n    'Keywords',\n    'description',\n    'Status',\n    'Posted',\n    'Expires',\n    'Section',\n    'Category1',\n    'Category2',\n    'Annotate',\n    'AnnotateInvite',\n    'publish_now',\n    'reset_time',\n    'AuthorID',\n    'sPosted',\n    'LastModID',\n    'sLastMod',\n    'override_form',\n    'from_view',\n    'year',\n    'month',\n    'day',\n    'hour',\n    'minute',\n    'second',\n    'url_title',\n    'exp_year',\n    'exp_month',\n    'exp_day',\n    'exp_hour',\n    'exp_minute',\n    'exp_second',\n    'sExpires',\n);\n\n$cfs = getCustomFields();\n\nforeach ($cfs as $i => $cf_name) {\n    $vars[] = \"custom_$i\";\n}\n\n$statuses = status_list();\n\nif (!empty($event) and $event == 'article') {\n    require_privs('article');\n\n    $save = gps('save');\n\n    if ($save) {\n        $step = 'save';\n    }\n\n    $publish = gps('publish');\n\n    if ($publish) {\n        $step = 'publish';\n    }\n\n    if (empty($step)) {\n        $step = 'create';\n    }\n\n    bouncer($step, array(\n        'create'  => false,\n        'publish' => true,\n        'edit'    => false,\n        'save'    => true,\n    ));\n\n    switch ($step) {\n        case \"create\":\n            article_edit();\n            break;\n        case \"publish\":\n            article_post();\n            break;\n        case \"edit\":\n            article_edit();\n            break;\n        case \"save\":\n            article_save();\n            break;\n    }\n}\n\n/**\n * Processes sent forms and saves new articles.\n */\n\nfunction article_post()\n{\n    global $txp_user, $vars, $prefs;\n\n    extract($prefs);\n\n    $incoming = array_map('assert_string', psa($vars));\n\n    if (!has_privs('article.set_markup')) {\n        $incoming['textile_body'] = $incoming['textile_excerpt'] = $use_textile;\n    }\n\n    $incoming = doSlash(textile_main_fields($incoming));\n    extract($incoming);\n\n    $msg = '';\n    if ($Title or $Body or $Excerpt) {\n        $is_clone = (ps('copy'));\n\n        $Status = assert_int(ps('Status'));\n\n        // Comments my be on, off, or disabled.\n        $Annotate = (int) $Annotate;\n\n        // Set and validate article timestamp.\n        if ($publish_now == 1) {\n            $when = 'now()';\n            $when_ts = time();\n        } else {\n            if (!is_numeric($year) || !is_numeric($month) || !is_numeric($day) || !is_numeric($hour) || !is_numeric($minute) || !is_numeric($second)) {\n                $ts = false;\n            } else {\n                $ts = strtotime($year.'-'.$month.'-'.$day.' '.$hour.':'.$minute.':'.$second);\n            }\n\n            // Tracking the PHP meanders on how to return an error.\n            if ($ts === false || $ts < 0) {\n                article_edit(array(gTxt('invalid_postdate'), E_ERROR));\n\n                return;\n            }\n\n            $when_ts = $ts - tz_offset($ts);\n            $when = \"from_unixtime($when_ts)\";\n        }\n\n        // Force a reasonable 'last modified' date for future articles,\n        // keep recent articles list in order.\n        $lastmod = ($when_ts > time() ? 'now()' : $when);\n\n        // Set and validate expiry timestamp.\n        if (empty($exp_year)) {\n            $expires = 0;\n        } else {\n            if (empty($exp_month)) {\n                $exp_month = 1;\n            }\n\n            if (empty($exp_day)) {\n                $exp_day = 1;\n            }\n\n            if (empty($exp_hour)) {\n                $exp_hour = 0;\n            }\n\n            if (empty($exp_minute)) {\n                $exp_minute = 0;\n            }\n\n            if (empty($exp_second)) {\n                $exp_second = 0;\n            }\n\n            $ts = strtotime($exp_year.'-'.$exp_month.'-'.$exp_day.' '.$exp_hour.':'.$exp_minute.':'.$exp_second);\n            if ($ts === false || $ts < 0) {\n                article_edit(array(gTxt('invalid_expirydate'), E_ERROR));\n\n                return;\n            } else {\n                $expires = $ts - tz_offset($ts);\n            }\n        }\n\n        if ($expires && ($expires <= $when_ts)) {\n            article_edit(array(gTxt('article_expires_before_postdate'), E_ERROR));\n\n            return;\n        }\n\n        if ($expires) {\n            $whenexpires = \"from_unixtime($expires)\";\n        } else {\n            $whenexpires = NULLDATETIME;\n        }\n\n        $user = doSlash($txp_user);\n        $description = doSlash($description);\n        $Keywords = doSlash(trim(preg_replace('/( ?[\\r\\n\\t,])+ ?/s', ',', preg_replace('/ +/', ' ', ps('Keywords'))), ', '));\n        $msg = '';\n\n        if (!has_privs('article.publish') && $Status >= STATUS_LIVE) {\n            $Status = STATUS_PENDING;\n        }\n\n        if ($is_clone && $Status >= STATUS_LIVE) {\n            $Status = STATUS_DRAFT;\n            $url_title = '';\n        }\n\n        if (empty($url_title)) {\n            $url_title = stripSpace($Title_plain, 1);\n        }\n\n        $cfq = array();\n        $cfs = getCustomFields();\n\n        foreach ($cfs as $i => $cf_name) {\n            $custom_x = \"custom_{$i}\";\n            $cfq[] = \"custom_$i = '\".$$custom_x.\"'\";\n        }\n\n        $cfq = join(', ', $cfq);\n\n        $rs = compact($vars);\n        if (article_validate($rs, $msg)) {\n            $ok = safe_insert(\n               \"textpattern\",\n               \"Title           = '$Title',\n                Body            = '$Body',\n                Body_html       = '$Body_html',\n                Excerpt         = '$Excerpt',\n                Excerpt_html    = '$Excerpt_html',\n                Image           = '$Image',\n                Keywords        = '$Keywords',\n                description     = '$description',\n                Status          =  $Status,\n                Posted          =  $when,\n                Expires         =  $whenexpires,\n                AuthorID        = '$user',\n                LastMod         =  $lastmod,\n                LastModID       = '$user',\n                Section         = '$Section',\n                Category1       = '$Category1',\n                Category2       = '$Category2',\n                textile_body    = '$textile_body',\n                textile_excerpt = '$textile_excerpt',\n                Annotate        =  $Annotate,\n                override_form   = '$override_form',\n                url_title       = '$url_title',\n                AnnotateInvite  = '$AnnotateInvite',\"\n                .(($cfs) ? $cfq.',' : '').\n                \"uid            = '\".md5(uniqid(rand(), true)).\"',\n                feed_time       = now()\"\n            );\n\n            if ($ok) {\n                $rs['ID'] = $GLOBALS['ID'] = $ok;\n\n                if ($is_clone) {\n                    safe_update(\n                        'textpattern',\n                        \"Title = concat(Title, ' (', {$ok}, ')'),\n                        url_title = concat(url_title, '-', {$ok})\",\n                        \"ID = {$ok}\"\n                    );\n                }\n\n                if ($Status >= STATUS_LIVE) {\n                    do_pings();\n                    update_lastmod('article_posted', $rs);\n                }\n\n                callback_event('article_posted', '', false, $rs);\n                $s = check_url_title($url_title);\n                $msg = array(get_status_message($Status).' '.$s, ($s ? E_WARNING : 0));\n            } else {\n                unset($GLOBALS['ID']);\n                $msg = array(gTxt('article_save_failed'), E_ERROR);\n            }\n        }\n    }\n    article_edit($msg);\n}\n\n/**\n * Processes sent forms and updates existing articles.\n */\n\nfunction article_save()\n{\n    global $txp_user, $vars, $prefs;\n\n    extract($prefs);\n\n    $incoming = array_map('assert_string', psa($vars));\n\n    $oldArticle = safe_row('Status, url_title, Title, textile_body, textile_excerpt, '.\n        'unix_timestamp(LastMod) as sLastMod, LastModID, '.\n        'unix_timestamp(Posted) as sPosted, '.\n        'unix_timestamp(Expires) as sExpires',\n        'textpattern', 'ID = '.(int) $incoming['ID']);\n\n    if (!(($oldArticle['Status'] >= STATUS_LIVE and has_privs('article.edit.published'))\n        or ($oldArticle['Status'] >= STATUS_LIVE and $incoming['AuthorID'] === $txp_user and has_privs('article.edit.own.published'))\n        or ($oldArticle['Status'] < STATUS_LIVE and has_privs('article.edit'))\n        or ($oldArticle['Status'] < STATUS_LIVE and $incoming['AuthorID'] === $txp_user and has_privs('article.edit.own')))) {\n        // Not allowed, you silly rabbit, you shouldn't even be here.\n        // Show default editing screen.\n        article_edit();\n\n        return;\n    }\n\n    if ($oldArticle['sLastMod'] != $incoming['sLastMod']) {\n        article_edit(array(gTxt('concurrent_edit_by', array('{author}' => txpspecialchars($oldArticle['LastModID']))), E_ERROR), true, true);\n\n        return;\n    }\n\n    if (!has_privs('article.set_markup')) {\n        $incoming['textile_body'] = $oldArticle['textile_body'];\n        $incoming['textile_excerpt'] = $oldArticle['textile_excerpt'];\n    }\n\n    $incoming = textile_main_fields($incoming);\n\n    extract(doSlash($incoming));\n    extract(array_map('assert_int', psa(array('ID', 'Status'))));\n\n    // Comments may be on, off, or disabled.\n    $Annotate = (int) $Annotate;\n\n    if (!has_privs('article.publish') && $Status >= STATUS_LIVE) {\n        $Status = STATUS_PENDING;\n    }\n\n    // Set and validate article timestamp.\n    if ($reset_time) {\n        $whenposted = \"Posted=now()\";\n        $when_ts = time();\n    } else {\n        if (!is_numeric($year) || !is_numeric($month) || !is_numeric($day) || !is_numeric($hour) || !is_numeric($minute) || !is_numeric($second)) {\n            $ts = false;\n        } else {\n            $ts = strtotime($year.'-'.$month.'-'.$day.' '.$hour.':'.$minute.':'.$second);\n        }\n\n        if ($ts === false || $ts < 0) {\n            $when = $when_ts = $oldArticle['sPosted'];\n            $msg = array(gTxt('invalid_postdate'), E_ERROR);\n        } else {\n            $when = $when_ts = $ts - tz_offset($ts);\n        }\n\n        $whenposted = \"Posted=from_unixtime($when)\";\n    }\n\n    // Set and validate expiry timestamp.\n    if (empty($exp_year)) {\n        $expires = 0;\n    } else {\n        if (empty($exp_month)) {\n            $exp_month = 1;\n        }\n\n        if (empty($exp_day)) {\n            $exp_day = 1;\n        }\n\n        if (empty($exp_hour)) {\n            $exp_hour = 0;\n        }\n\n        if (empty($exp_minute)) {\n            $exp_minute = 0;\n        }\n\n        if (empty($exp_second)) {\n            $exp_second = 0;\n        }\n\n        $ts = strtotime($exp_year.'-'.$exp_month.'-'.$exp_day.' '.$exp_hour.':'.$exp_minute.':'.$exp_second);\n\n        if ($ts === false || $ts < 0) {\n            $expires = $oldArticle['sExpires'];\n            $msg = array(gTxt('invalid_expirydate'), E_ERROR);\n        } else {\n            $expires = $ts - tz_offset($ts);\n        }\n    }\n\n    if ($expires && ($expires <= $when_ts)) {\n        $expires = $oldArticle['sExpires'];\n        $msg = array(gTxt('article_expires_before_postdate'), E_ERROR);\n    }\n\n    if ($expires) {\n        $whenexpires = \"Expires=from_unixtime($expires)\";\n    } else {\n        $whenexpires = \"Expires=\".NULLDATETIME;\n    }\n\n    // Auto-update custom-titles according to Title, as long as unpublished and\n    // NOT customised.\n    if (empty($url_title)\n        || (($oldArticle['Status'] < STATUS_LIVE)\n        && ($oldArticle['url_title'] === $url_title)\n        && ($oldArticle['url_title'] === stripSpace($oldArticle['Title'], 1))\n        && ($oldArticle['Title'] !== $Title)\n    )) {\n        $url_title = stripSpace($Title_plain, 1);\n    }\n\n    $Keywords = doSlash(trim(preg_replace('/( ?[\\r\\n\\t,])+ ?/s', ',', preg_replace('/ +/', ' ', ps('Keywords'))), ', '));\n\n    $user = doSlash($txp_user);\n    $description = doSlash($description);\n\n    $cfq = array();\n    $cfs = getCustomFields();\n\n    foreach ($cfs as $i => $cf_name) {\n        $custom_x = \"custom_{$i}\";\n        $cfq[] = \"custom_$i = '\".$$custom_x.\"'\";\n    }\n\n    $cfq = join(', ', $cfq);\n\n    $rs = compact($vars);\n    if (article_validate($rs, $msg)) {\n        if (safe_update(\"textpattern\",\n           \"Title           = '$Title',\n            Body            = '$Body',\n            Body_html       = '$Body_html',\n            Excerpt         = '$Excerpt',\n            Excerpt_html    = '$Excerpt_html',\n            Keywords        = '$Keywords',\n            description     = '$description',\n            Image           = '$Image',\n            Status          =  $Status,\n            LastMod         =  now(),\n            LastModID       = '$user',\n            Section         = '$Section',\n            Category1       = '$Category1',\n            Category2       = '$Category2',\n            Annotate        =  $Annotate,\n            textile_body    = '$textile_body',\n            textile_excerpt = '$textile_excerpt',\n            override_form   = '$override_form',\n            url_title       = '$url_title',\n            AnnotateInvite  = '$AnnotateInvite',\"\n            .(($cfs) ? $cfq.',' : '').\n            \"$whenposted,\n            $whenexpires\",\n            \"ID = $ID\"\n        )) {\n            if ($Status >= STATUS_LIVE && $oldArticle['Status'] < STATUS_LIVE) {\n                do_pings();\n            }\n\n            if ($Status >= STATUS_LIVE || $oldArticle['Status'] >= STATUS_LIVE) {\n                update_lastmod('article_saved', $rs);\n            }\n\n            callback_event('article_saved', '', false, $rs);\n\n            if (empty($msg)) {\n                $s = check_url_title($url_title);\n                $msg = array(get_status_message($Status).' '.$s, $s ? E_WARNING : 0);\n            }\n        } else {\n            $msg = array(gTxt('article_save_failed'), E_ERROR);\n        }\n    }\n    article_edit($msg, false, true);\n}\n\n/**\n * Renders article editor form.\n *\n * @param string|array $message          The activity message\n * @param bool         $concurrent       Treat as a concurrent save\n * @param bool         $refresh_partials Whether refresh partial contents\n */\n\nfunction article_edit($message = '', $concurrent = false, $refresh_partials = false)\n{\n    global $vars, $txp_user, $prefs, $event, $view;\n\n    extract($prefs);\n\n    /*\n    $partials is an array of:\n    $key => array (\n        'mode' => {PARTIAL_STATIC | PARTIAL_VOLATILE | PARTIAL_VOLATILE_VALUE},\n        'selector' => $DOM_selector,\n         'cb' => $callback_function,\n         'html' => $return_value_of_callback_function (need not be intialised here)\n    )\n    */\n    $partials = array(\n        'html_title'   => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => 'title',\n            'cb'       => 'article_partial_html_title',\n        ),\n        'sLastMod' => array(\n            'mode'     => PARTIAL_VOLATILE_VALUE,\n            'selector' => '[name=sLastMod]',\n            'cb'       => 'article_partial_value',\n        ),\n        'sPosted' => array(\n            'mode'     => PARTIAL_VOLATILE_VALUE,\n            'selector' => '[name=sPosted]',\n            'cb'       => 'article_partial_value',\n        ),\n        'sidehelp' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#textfilter_group',\n            'cb'       => 'article_partial_sidehelp',\n        ),\n        'url_title' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.url-title',\n            'cb'       => 'article_partial_url_title',\n        ),\n        'url_title_value' => array(\n            'mode'     => PARTIAL_VOLATILE_VALUE,\n            'selector' => '#url-title',\n            'cb'       => 'article_partial_url_title_value',\n        ),\n        'description' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.description',\n            'cb'       => 'article_partial_description',\n        ),\n        'description_value'  => array(\n            'mode'     => PARTIAL_VOLATILE_VALUE,\n            'selector' => '#description',\n            'cb'       => 'article_partial_description_value',\n        ),\n        'keywords' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.keywords',\n            'cb'       => 'article_partial_keywords',\n        ),\n        'keywords_value'  => array(\n            'mode'     => PARTIAL_VOLATILE_VALUE,\n            'selector' => '#keywords',\n            'cb'       => 'article_partial_keywords_value',\n        ),\n        'image' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => '#image_group',\n            'cb'       => 'article_partial_image',\n        ),\n        'custom_fields' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => '#custom_field_group',\n            'cb'       => 'article_partial_custom_fields',\n        ),\n        'recent_articles' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#recent_group .recent',\n            'cb'       => 'article_partial_recent_articles',\n        ),\n        'title' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.title',\n            'cb'       => 'article_partial_title',\n        ),\n        'title_value'  => array(\n            'mode'     => PARTIAL_VOLATILE_VALUE,\n            'selector' => '#title',\n            'cb'       => 'article_partial_title_value',\n        ),\n        'article_clone' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#article_partial_article_clone',\n            'cb'       => 'article_partial_article_clone',\n        ),\n        'article_view' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#article_partial_article_view',\n            'cb'       => 'article_partial_article_view',\n        ),\n        'body' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.body',\n            'cb'       => 'article_partial_body',\n        ),\n        'excerpt' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.excerpt',\n            'cb'       => 'article_partial_excerpt',\n        ),\n        'author' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => 'p.author',\n            'cb'       => 'article_partial_author',\n        ),\n        'view_modes' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#view_modes',\n            'cb'       => 'article_partial_view_modes',\n        ),\n        'article_nav' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => 'p.nav-tertiary',\n            'cb'       => 'article_partial_article_nav',\n        ),\n        'status' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#write-status',\n            'cb'       => 'article_partial_status',\n        ),\n        'categories' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => '#categories_group',\n            'cb'       => 'article_partial_categories',\n        ),\n        'section' => array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => 'p.section',\n            'cb'       => 'article_partial_section',\n        ),\n        'comments' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#write-comments',\n            'cb'       => 'article_partial_comments',\n        ),\n        'posted' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#write-timestamp',\n            'cb'       => 'article_partial_posted',\n        ),\n        'expires' => array(\n            'mode'     => PARTIAL_VOLATILE,\n            'selector' => '#write-expires',\n            'cb'       => 'article_partial_expires',\n        ),\n    );\n\n    // Add partials for custom fields (and their values which is redundant by\n    // design, for plugins).\n    global $cfs;\n\n    foreach ($cfs as $k => $v) {\n        $partials[\"custom_field_{$k}\"] = array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => \"p.custom-field.custom-{$k}\",\n            'cb'       => 'article_partial_custom_field',\n        );\n        $partials[\"custom_{$k}\"] = array(\n            'mode'     => PARTIAL_STATIC,\n            'selector' => \"#custom-{$k}\",\n            'cb'       => 'article_partial_value',\n        );\n    }\n\n    extract(gpsa(array('view', 'from_view', 'step')));\n\n    // Newly-saved article.\n    if (!empty($GLOBALS['ID'])) {\n        $ID = $GLOBALS['ID'];\n        $step = 'edit';\n    } else {\n        $ID = gps('ID');\n    }\n\n    // Switch to 'text' view upon page load and after article post.\n    if (!$view || gps('save') || gps('publish')) {\n        $view = 'text';\n    }\n\n    if (!$step) {\n        $step = \"create\";\n    }\n\n    if ($step == \"edit\"\n        && $view == \"text\"\n        && !empty($ID)\n        && $from_view != 'preview'\n        && $from_view != 'html'\n        && !$concurrent) {\n        $pull = true; // It's an existing article - off we go to the database.\n        $ID = assert_int($ID);\n\n        $rs = safe_row(\n            \"*, unix_timestamp(Posted) as sPosted,\n            unix_timestamp(Expires) as sExpires,\n            unix_timestamp(LastMod) as sLastMod\",\n            \"textpattern\",\n            \"ID=$ID\"\n        );\n\n        if (empty($rs)) {\n            return;\n        }\n\n        $rs['reset_time'] = $rs['publish_now'] = false;\n    } else {\n        $pull = false; // Assume they came from post.\n\n        if ($from_view == 'preview' or $from_view == 'html') {\n            $store_out = array();\n            $store = unserialize(base64_decode(ps('store')));\n\n            foreach ($vars as $var) {\n                if (isset($store[$var])) {\n                    $store_out[$var] = $store[$var];\n                }\n            }\n        } else {\n            $store_out = gpsa($vars);\n\n            if ($concurrent) {\n                $store_out['sLastMod'] = safe_field('unix_timestamp(LastMod) as sLastMod', 'textpattern', 'ID='.$ID);\n            }\n\n            if (!has_privs('article.set_markup')) {\n                $oldArticle = safe_row('textile_body, textile_excerpt', 'textpattern', 'ID = '.$ID);\n                $store_out['textile_body'] = $oldArticle['textile_body'];\n                $store_out['textile_excerpt'] = $oldArticle['textile_excerpt'];\n            }\n        }\n\n        // Use preferred Textfilter as default and fallback.\n        $hasfilter = new Textpattern_Textfilter_Constraint(null);\n        $validator = new Validator();\n\n        foreach (array('textile_body', 'textile_excerpt') as $k) {\n            $hasfilter->setValue($store_out[$k]);\n            $validator->setConstraints($hasfilter);\n            if (!$validator->validate()) {\n                $store_out[$k] = $use_textile;\n            }\n        }\n\n        $rs = textile_main_fields($store_out);\n\n        if (!empty($rs['exp_year'])) {\n            if (empty($rs['exp_month'])) {\n                $rs['exp_month'] = 1;\n            }\n\n            if (empty($rs['exp_day'])) {\n                $rs['exp_day'] = 1;\n            }\n\n            if (empty($rs['exp_hour'])) {\n                $rs['exp_hour'] = 0;\n            }\n\n            if (empty($rs['exp_minute'])) {\n                $rs['exp_minute'] = 0;\n            }\n\n            if (empty($rs['exp_second'])) {\n                $rs['exp_second'] = 0;\n            }\n\n            $rs['sExpires'] = safe_strtotime($rs['exp_year'].'-'.$rs['exp_month'].'-'.$rs['exp_day'].' '.\n                $rs['exp_hour'].':'.$rs['exp_minute'].':'.$rs['exp_second']);\n        }\n\n        if (!empty($rs['year'])) {\n            $rs['sPosted'] = safe_strtotime($rs['year'].'-'.$rs['month'].'-'.$rs['day'].' '.\n                $rs['hour'].':'.$rs['minute'].':'.$rs['second']);\n        }\n    }\n\n    $validator = new Validator(new SectionConstraint($rs['Section']));\n    if (!$validator->validate()) {\n        $rs['Section'] = getDefaultSection();\n    }\n\n    extract($rs);\n\n    $GLOBALS['step'] = $step;\n\n    if ($step != 'create' && isset($sPosted)) {\n        // Previous record?\n        $rs['prev_id'] = checkIfNeighbour('prev', $sPosted);\n\n        // Next record?\n        $rs['next_id'] = checkIfNeighbour('next', $sPosted);\n    } else {\n        $rs['prev_id'] = $rs['next_id'] = 0;\n    }\n\n    // Let plugins chime in on partials meta data.\n    callback_event_ref('article_ui', 'partials_meta', 0, $rs, $partials);\n    $rs['partials_meta'] = &$partials;\n\n    // Get content for volatile partials.\n    foreach ($partials as $k => $p) {\n        if ($p['mode'] == PARTIAL_VOLATILE || $p['mode'] == PARTIAL_VOLATILE_VALUE) {\n            $cb = $p['cb'];\n            $partials[$k]['html'] = (is_array($cb) ? call_user_func($cb, $rs, $k) : $cb($rs, $k));\n        }\n    }\n\n    if ($refresh_partials) {\n        $response[] = announce($message);\n        $response[] = '$(\"#article_form [type=submit]\").val(textpattern.gTxt(\"save\"))';\n\n        if ($Status < STATUS_LIVE) {\n            $response[] = '$(\"#article_form\").addClass(\"saved\").removeClass(\"published\")';\n        } else {\n            $response[] = '$(\"#article_form\").addClass(\"published\").removeClass(\"saved\")';\n        }\n\n        // Update the volatile partials.\n        foreach ($partials as $k => $p) {\n            // Volatile partials need a target DOM selector.\n            if (empty($p['selector']) && $p['mode'] != PARTIAL_STATIC) {\n                trigger_error(\"Empty selector for partial '$k'\", E_USER_ERROR);\n            } else {\n                // Build response script.\n                if ($p['mode'] == PARTIAL_VOLATILE) {\n                    // Volatile partials replace *all* of the existing HTML\n                    // fragment for their selector.\n                    $response[] = '$(\"'.$p['selector'].'\").replaceWith(\"'.escape_js($p['html']).'\")';\n                } elseif ($p['mode'] == PARTIAL_VOLATILE_VALUE) {\n                    // Volatile partial values replace the *value* of elements\n                    // matching their selector.\n                    $response[] = '$(\"'.$p['selector'].'\").val(\"'.escape_js($p['html']).'\")';\n                }\n            }\n        }\n        send_script_response(join(\";\\n\", $response));\n\n        // Bail out.\n        return;\n    }\n\n    foreach ($partials as $k => $p) {\n        if ($p['mode'] == PARTIAL_STATIC) {\n            $cb = $p['cb'];\n            $partials[$k]['html'] = (is_array($cb) ? call_user_func($cb, $rs, $k) : $cb($rs, $k));\n        }\n    }\n\n    $page_title = $ID ? $Title : gTxt('write');\n\n    pagetop($page_title, $message);\n\n    $class = array();\n\n    if ($Status >= STATUS_LIVE) {\n        $class[] = 'published';\n    } elseif ($ID) {\n        $class[] = 'saved';\n    }\n\n    if ($step !== 'create') {\n        $class[] = 'async';\n    }\n\n    echo hed(gTxt('tab_write'), 1, array('class' => 'txp-heading txp-accessibility'));\n    echo\n        n.tag_start('form', array(\n            'id'     => 'article_form',\n            'name'   => 'article_form',\n            'method' => 'post',\n            'action' => 'index.php',\n            'class'  => $class,\n        )).\n        n.'<div id=\"'.$event.'_container\" class=\"txp-layout-grid\">';\n\n    if (!empty($store_out)) {\n        echo hInput('store', base64_encode(serialize($store_out)));\n    }\n\n    echo hInput('ID', $ID).\n        eInput('article').\n        sInput($step).\n        hInput('sPosted', $sPosted).\n        hInput('sLastMod', $sLastMod).\n        hInput('AuthorID', $AuthorID).\n        hInput('LastModID', $LastModID).\n        n.'<input type=\"hidden\" name=\"view\" />';\n\n    echo n.'<div class=\"txp-layout-cell txp-layout-1-4\">'.\n        n.'<div id=\"configuration_content\">';\n\n    if ($view == 'text') {\n        // Markup help.\n        echo $partials['sidehelp']['html'];\n\n        // Custom menu entries.\n        echo pluggable_ui('article_ui', 'extend_col_1', '', $rs);\n\n        // Advanced.\n\n        // Markup selection.\n        if (has_privs('article.set_markup')) {\n            $html_markup =\n                graf(\n                    '<label for=\"markup-body\">'.gTxt('article_markup').'</label>'.br.\n                    pref_text('textile_body', $textile_body, 'markup-body'), ' class=\"markup markup-body\"').\n                graf(\n                    '<label for=\"markup-excerpt\">'.gTxt('excerpt_markup').'</label>'.br.\n                    pref_text('textile_excerpt', $textile_excerpt, 'markup-excerpt'), ' class=\"markup markup-excerpt\"');\n        } else {\n            $html_markup = '';\n        }\n\n        $html_markup = pluggable_ui('article_ui', 'markup', $html_markup, $rs);\n\n        // Form override.\n        $form_pop = $allow_form_override ? form_pop($override_form, 'override-form') : '';\n        $html_override = $form_pop\n            ? pluggable_ui('article_ui', 'override', graf('<label for=\"override-form\">'.gTxt('override_default_form').'</label>'.popHelp('override_form').br.\n                $form_pop, ' class=\"override-form\"'), $rs)\n            : '';\n\n        echo wrapRegion('advanced_group', $html_markup.$html_override, 'advanced', 'advanced_options', 'article_advanced');\n\n        // Meta info.\n\n        // keywords.\n        $html_keywords = $partials['keywords']['html'];\n\n        // description.\n        $html_description = $partials['description']['html'];\n\n        // URL title.\n        $html_url_title = $partials['url_title']['html'];\n\n        echo wrapRegion('meta_group', $html_url_title.$html_description.$html_keywords, 'meta', 'meta', 'article_meta');\n\n        // Article image.\n        echo $partials['image']['html'];\n\n        // Custom fields.\n        echo $partials['custom_fields']['html'];\n\n        // Recent articles.\n        echo wrapRegion('recent_group', $partials['recent_articles']['html'], 'recent', 'recent_articles', 'article_recent');\n    } else {\n        echo sp;\n    }\n\n    echo n.'</div>'. // End of #configuration_content.\n        n.'</div>'; // End of .txp-layout-cell.\n\n    echo n.'<div class=\"txp-layout-cell txp-layout-2-4\">'.\n        n.'<div role=\"region\" id=\"main_content\">';\n\n    // View mode tabs.\n    echo $partials['view_modes']['html'];\n\n    // Title input.\n    if ($view == 'preview') {\n        echo n.'<div class=\"preview\">'.hed(gTxt('preview'), 2).hed($Title, 1, ' class=\"title\"');\n    } elseif ($view == 'html') {\n        echo n.'<div class=\"html\">'.hed('HTML', 2).hed($Title, 1, ' class=\"title\"');\n    } elseif ($view == 'text') {\n        echo n.'<div class=\"text\">'.$partials['title']['html'];\n    }\n\n    // Body.\n    if ($view == 'preview') {\n        echo n.'<div class=\"body\">'.$Body_html.'</div>';\n    } elseif ($view == 'html') {\n        echo tag(str_replace(array(n, t), array(br, sp.sp.sp.sp), txpspecialchars($Body_html)), 'code', ' class=\"body\"');\n    } else {\n        echo $partials['body']['html'];\n    }\n\n    // Excerpt.\n    if ($articles_use_excerpts) {\n        if ($view == 'preview') {\n            echo n.'<hr />'.n.'<div class=\"excerpt\">'.$Excerpt_html.'</div>';\n        } elseif ($view == 'html') {\n            echo n.'<hr />'.\n                tag(str_replace(array(n, t), array(br, sp.sp.sp.sp), txpspecialchars($Excerpt_html)), 'code', array('class' => 'excerpt'));\n        } else {\n            echo $partials['excerpt']['html'];\n        }\n    }\n\n    // Author.\n    if ($view == \"text\" && $step != \"create\") {\n        echo $partials['author']['html'];\n    }\n\n    echo hInput('from_view', $view),\n        n.'</div>';\n\n    echo n.'</div>'. // End of #main_content.\n        n.'</div>'; // End of .txp-layout-cell.\n\n    echo n.'<div class=\"txp-layout-cell txp-layout-1-4\">'.\n        n.'<div id=\"supporting_content\">';\n\n    if ($view == 'text') {\n        // Publish and Save buttons.\n        if ($step == 'create' and empty($GLOBALS['ID'])) {\n            if (has_privs('article.publish')) {\n                $push_button = fInput('submit', 'publish', gTxt('publish'), 'publish');\n            } else {\n                $push_button = fInput('submit', 'publish', gTxt('save'), 'publish');\n            }\n\n            echo graf($push_button, array('id' => 'write-publish'));\n        } elseif (\n            ($Status >= STATUS_LIVE && has_privs('article.edit.published')) ||\n            ($Status >= STATUS_LIVE && $AuthorID === $txp_user && has_privs('article.edit.own.published')) ||\n            ($Status < STATUS_LIVE && has_privs('article.edit')) ||\n            ($Status < STATUS_LIVE && $AuthorID === $txp_user && has_privs('article.edit.own'))\n        ) {\n            echo graf(fInput('submit', 'save', gTxt('save'), 'publish'), array('id' => 'write-save'));\n        }\n\n        if ($step != 'create') {\n            echo graf(href(gTxt('create_new'), 'index.php?event=article'), ' class=\"action-create\"');\n        }\n\n        // Prev/next article links.\n        if ($step != 'create' and ($rs['prev_id'] or $rs['next_id'])) {\n            echo $partials['article_nav']['html'];\n        }\n\n        // Sort and display.\n        echo pluggable_ui(\n            'article_ui',\n            'sort_display',\n            wrapRegion('write-sort', $partials['status']['html'].$partials['section']['html'].$partials['categories']['html'], '', gTxt('sort_display')),\n            $rs\n        );\n\n        // \"Comments\" section.\n        echo wrapRegion('comments_group', $partials['comments']['html'], 'comments', 'comment_settings', 'article_comments', (($use_comments == 1)\n            ? ''\n            : 'empty'\n        ));\n\n        // \"Dates\" section.\n\n        if ($step == \"create\" and empty($GLOBALS['ID'])) {\n            // Timestamp.\n            // Avoiding modified date to disappear.\n\n            if (!empty($store_out['year'])) {\n                $persist_timestamp = safe_strtotime(\n                    $store_out['year'].'-'.$store_out['month'].'-'.$store_out['day'].' '.\n                    $store_out['hour'].':'.$store_out['minute'].':'.$store_out['second']\n                );\n            } else {\n                $persist_timestamp = time();\n            }\n\n            $posted_block = pluggable_ui(\n                'article_ui',\n                'timestamp',\n                wrapRegion(\n                    'write-timestamp',\n                    graf(\n                        checkbox('publish_now', '1', $publish_now, '', 'publish_now').\n                        n.'<label for=\"publish_now\">'.gTxt('set_to_now').'</label>', ' class=\"publish-now\"'\n                    ).\n\n                    graf(gTxt('or_publish_at').popHelp('timestamp'), ' class=\"publish-at\"').\n\n                    graf(\n                        span(gTxt('date'), array('class' => 'txp-label-fixed')).br.\n                        tsi('year', '%Y', $persist_timestamp, '').' / '.\n                        tsi('month', '%m', $persist_timestamp, '').' / '.\n                        tsi('day', '%d', $persist_timestamp, ''), ' class=\"date posted created\"'\n                    ).\n\n                    graf(\n                        span(gTxt('time'), array('class' => 'txp-label-fixed')).br.\n                        tsi('hour', '%H', $persist_timestamp, '').' : '.\n                        tsi('minute', '%M', $persist_timestamp, '').' : '.\n                        tsi('second', '%S', $persist_timestamp, ''), ' class=\"time posted created\"'\n                    ),\n                    '',\n                    gTxt('timestamp')\n                ),\n                array('sPosted' => $persist_timestamp) + $rs\n            );\n\n            // Expires.\n\n            if (!empty($store_out['exp_year'])) {\n                $persist_timestamp = safe_strtotime(\n                    $store_out['exp_year'].'-'.$store_out['exp_month'].'-'.$store_out['exp_day'].' '.\n                    $store_out['exp_hour'].':'.$store_out['exp_minute'].':'.$store_out['second']\n                );\n            } else {\n                $persist_timestamp = 0;\n            }\n\n            $expires_block = pluggable_ui(\n                'article_ui',\n                'expires',\n                wrapRegion(\n                    'write-expires',\n                    graf(\n                        span(gTxt('date'), array('class' => 'txp-label-fixed')).br.\n                        tsi('exp_year', '%Y', $persist_timestamp, '').' / '.\n                        tsi('exp_month', '%m', $persist_timestamp, '').' / '.\n                        tsi('exp_day', '%d', $persist_timestamp, ''), ' class=\"date expires\"'\n                    ).\n\n                    graf(\n                        span(gTxt('time'), array('class' => 'txp-label-fixed')).br.\n                        tsi('exp_hour', '%H', $persist_timestamp, '').' : '.\n                        tsi('exp_minute', '%M', $persist_timestamp, '').' : '.\n                        tsi('exp_second', '%S', $persist_timestamp, ''), ' class=\"time expires\"'\n                    ),\n                    '',\n                    gTxt('expires')\n                ),\n                $rs\n            );\n        } else {\n            // Timestamp.\n            $posted_block = $partials['posted']['html'];\n\n            // Expires.\n            $expires_block = $partials['expires']['html'];\n        }\n\n        echo wrapRegion('dates_group', $posted_block.$expires_block, 'dates', 'date_settings', 'article_dates');\n    }\n\n    echo n.'</div>'.// End of #supporting_content.\n        n.'</div>'.// End of .txp-layout-cell.\n        n.'</div>'.// End of .txp-layout-grid.\n        tInput().\n        n.'</form>';\n}\n\n/**\n * Renders a custom field.\n *\n * @param  int    $num     The custom field number\n * @param  string $field   The label\n * @param  string $content The field contents\n * @return string HTML form field\n */\n\nfunction custField($num, $field, $content)\n{\n    return graf('<label for=\"custom-'.$num.'\">'.$field.'</label>'.br.\n        fInput('text', 'custom_'.$num, $content, '', '', '', INPUT_REGULAR, '', 'custom-'.$num), ' class=\"custom-field custom-'.$num.'\"');\n}\n\n/**\n * Gets the ID of the next or the previous article.\n *\n * @param  string $whichway Either '&lt;' or '&gt;'\n * @param  int    Unix timestamp\n * @return int\n */\n\nfunction checkIfNeighbour($whichway, $sPosted)\n{\n    $sPosted = assert_int($sPosted);\n    $dir = ($whichway == 'prev') ? '<' : '>';\n    $ord = ($whichway == 'prev') ? 'desc' : 'asc';\n\n    return safe_field(\"ID\", \"textpattern\",\n        \"Posted $dir from_unixtime($sPosted) order by Posted $ord limit 1\");\n}\n\n/**\n * Renders an article status field.\n *\n * @param  int    $status Selected status\n * @return string HTML\n */\n\nfunction status_display($status)\n{\n    global $statuses;\n\n    if (!$status) {\n        $status = get_pref('default_publish_status', STATUS_LIVE);\n    }\n\n    return graf(\n        '<label for=\"status\">'.gTxt('status').'</label>'.br.\n        selectInput('Status', $statuses, $status, false, '', 'status'), ' class=\"status\"');\n}\n\n/**\n * Renders a section field.\n *\n * @param  string $Section The selected section\n * @param  string $id      The HTML id\n * @return string HTML &lt;select&gt; input\n */\n\nfunction section_popup($Section, $id)\n{\n    $rs = safe_rows('name, title', 'txp_section', \"name != 'default' order by title asc, name asc\");\n\n    if ($rs) {\n        $options = array();\n\n        foreach ($rs as $a) {\n            $options[$a['name']] = $a['title'];\n        }\n\n        return selectInput('Section', $options, $Section, false, '', $id);\n    }\n\n    return false;\n}\n\n/**\n * Renders a category field.\n *\n * @param  string $name The Name of the field\n * @param  string $val  The selected option\n * @param  string $id   The HTML id\n * @return string HTML &lt;select&gt; input\n */\n\nfunction category_popup($name, $val, $id)\n{\n    $rs = getTree('root', 'article');\n\n    if ($rs) {\n        return treeSelectInput($name, $rs, $val, $id, 35);\n    }\n\n    return false;\n}\n\n/**\n * Renders a view tab.\n *\n * @param  string $tabevent Target view\n * @param  string $view     The current view\n * @return string HTML\n */\n\nfunction tab($tabevent, $view)\n{\n    $state = ($view == $tabevent) ? 'active' : '';\n    $pressed = ($view == $tabevent) ? 'true' : 'false';\n\n    $link = href(gTxt('view_'.$tabevent.'_short'), '#', array(\n        'data-view-mode' => $tabevent,\n        'role'           => 'button',\n        'aria-pressed'   => $pressed,\n        'title'          => gTxt('view_'.$tabevent),\n    ));\n\n    return n.tag($link, 'li', array(\n        'id'    => 'tab-'.$tabevent,\n        'class' => $state,\n    ));\n}\n\n/**\n * Gets the name of the default section.\n *\n * @return string The section\n */\n\nfunction getDefaultSection()\n{\n    return get_pref('default_section');\n}\n\n/**\n * Renders 'override form' field.\n *\n * @param  string $form The selected form\n * @param  string $id   The HTML id\n * @return string HTML &lt;select&gt; input\n */\n\nfunction form_pop($form, $id)\n{\n    $rs = safe_column('name', 'txp_form', \"type = 'article' and name != 'default' order by name\");\n\n    if ($rs) {\n        return selectInput('override_form', $rs, $form, true, '', $id);\n    }\n}\n\n/**\n * Checks URL title for duplicates.\n *\n * @param  string $url_title The URL title\n * @return string Localised feedback message, or an empty string\n */\n\nfunction check_url_title($url_title)\n{\n    // Check for blank or previously used identical url-titles.\n    if (strlen($url_title) === 0) {\n        return gTxt('url_title_is_blank');\n    } else {\n        $url_title_count = safe_count('textpattern', \"url_title = '$url_title'\");\n\n        if ($url_title_count > 1) {\n            return gTxt('url_title_is_multiple', array('{count}' => $url_title_count));\n        }\n    }\n\n    return '';\n}\n\n/**\n * Translates a status ID to a feedback message.\n *\n * This message is displayed when an article is saved.\n *\n * @param  int    $Status The status\n * @return string The status message\n */\n\nfunction get_status_message($Status)\n{\n    switch ($Status) {\n        case STATUS_PENDING:\n            return gTxt(\"article_saved_pending\");\n        case STATUS_HIDDEN:\n            return gTxt(\"article_saved_hidden\");\n        case STATUS_DRAFT:\n            return gTxt(\"article_saved_draft\");\n        default:\n            return gTxt('article_posted');\n    }\n}\n\n/**\n * Parses article fields using Textile.\n *\n * @param  array $incoming\n * @return array\n */\n\nfunction textile_main_fields($incoming)\n{\n    $textile = new Textpattern_Textile_Parser();\n\n    $incoming['Title_plain'] = trim($incoming['Title']);\n    $incoming['Title_html'] = ''; // not used\n    $incoming['Title'] = $textile->textileEncode($incoming['Title_plain']);\n\n    $incoming['Body_html'] = Txp::get('Textpattern_Textfilter_Registry')->filter(\n        $incoming['textile_body'],\n        $incoming['Body'],\n        array('field' => 'Body', 'options' => array('lite' => false), 'data' => $incoming)\n    );\n\n    $incoming['Excerpt_html'] = Txp::get('Textpattern_Textfilter_Registry')->filter(\n        $incoming['textile_excerpt'],\n        $incoming['Excerpt'],\n        array('field' => 'Excerpt', 'options' => array('lite' => false), 'data' => $incoming)\n    );\n\n    return $incoming;\n}\n\n/**\n * Pings Ping-O-Matic when an article is published.\n */\n\nfunction do_pings()\n{\n    global $prefs, $production_status;\n\n    // Only ping for Live sites.\n    if ($production_status !== 'live') {\n        return;\n    }\n\n    include_once txpath.'/lib/IXRClass.php';\n\n    callback_event('ping');\n\n    if ($prefs['ping_weblogsdotcom'] == 1) {\n        $wl_client = new IXR_Client('http://rpc.pingomatic.com/');\n        $wl_client->query('weblogUpdates.ping', $prefs['sitename'], hu);\n    }\n}\n\n/**\n * Renders the &lt;title&gt; element for the 'Write' page.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_html_title($rs)\n{\n    return tag(admin_title($rs['Title']), 'title');\n}\n\n/**\n * Renders article formatting tips.\n *\n * The rendered widget can be customised via the 'article_ui > sidehelp'\n * pluggable UI callback event.\n *\n * @param array $rs Article data\n */\n\nfunction article_partial_sidehelp($rs)\n{\n    // Show markup help for both body and excerpt if they are different.\n    $help = Txp::get('Textpattern_Textfilter_Registry')->getHelp($rs['textile_body']);\n\n    if ($rs['textile_body'] != $rs['textile_excerpt']) {\n        $help .= Txp::get('Textpattern_Textfilter_Registry')->getHelp($rs['textile_excerpt']);\n    }\n\n    $out = wrapRegion('textfilter_group', $help, 'textfilter_help', 'textfilter_help', 'article_textfilter_help');\n\n    return pluggable_ui('article_ui', 'sidehelp', $out, $rs);\n}\n\n/**\n * Renders article title partial.\n *\n * The rendered widget can be customised via the 'article_ui > title'\n * pluggable UI callback event.\n *\n * @param array $rs Article data\n */\n\nfunction article_partial_title($rs)\n{\n    global $step;\n    $av_cb = $rs['partials_meta']['article_view']['cb'];\n    $ac_cb = $rs['partials_meta']['article_clone']['cb'];\n    $out = graf('<label for=\"title\">'.gTxt('title').'</label>'.popHelp('title').br.\n        n.'<input type=\"text\" id=\"title\" name=\"Title\" value=\"'.escape_title($rs['Title']).'\" size=\"48\" />'.\n        ($step != 'create' ?  $ac_cb($rs).$av_cb($rs) : ''), ' class=\"title\"');\n\n    return pluggable_ui('article_ui', 'title', $out, $rs);\n}\n\n/**\n * Gets article's title from the given article data set.\n *\n * @param  array  $rs Article data\n * @return string\n */\n\nfunction article_partial_title_value($rs)\n{\n    return html_entity_decode($rs['Title'], ENT_QUOTES, 'UTF-8');\n}\n\n/**\n * Renders author partial.\n *\n * The rendered widget can be customised via the 'article_ui > author'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_author($rs)\n{\n    extract($rs);\n    $out = n.'<p class=\"author\"><small>'.gTxt('posted_by').': '.txpspecialchars($AuthorID).' &#183; '.safe_strftime('%d %b %Y &#183; %X', $sPosted);\n\n    if ($sPosted != $sLastMod) {\n        $out .= br.gTxt('modified_by').': '.txpspecialchars($LastModID).' &#183; '.safe_strftime('%d %b %Y &#183; %X', $sLastMod);\n    }\n\n    $out .= '</small></p>';\n\n    return pluggable_ui('article_ui', 'author', $out, $rs);\n}\n\n/**\n * Renders custom field partial.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_custom_field($rs, $key)\n{\n    global $prefs;\n    extract($prefs);\n\n    preg_match('/custom_field_([0-9]+)/', $key, $m);\n    $custom_x_set = \"custom_{$m[1]}_set\";\n    $custom_x = \"custom_{$m[1]}\";\n\n    return ($$custom_x_set !== '' ? custField($m[1], $$custom_x_set,  $rs[$custom_x]) : '');\n}\n\n/**\n * Renders URL title partial.\n *\n * The rendered widget can be customised via the 'article_ui > url_title'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_url_title($rs)\n{\n    $out = graf('<label for=\"url-title\">'.gTxt('url_title').'</label>'.popHelp('url_title').br.\n        fInput('text', 'url_title', article_partial_url_title_value($rs), '', '', '', INPUT_REGULAR, '', 'url-title'), ' class=\"url-title\"');\n\n    return pluggable_ui('article_ui', 'url_title', $out, $rs);\n}\n\n/**\n * Gets URL title from the given article data set.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_url_title_value($rs)\n{\n    return $rs['url_title'];\n}\n\n/**\n * Renders description partial.\n *\n * The rendered widget can be customised via the 'article_ui > description'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_description($rs)\n{\n    $out = graf('<label for=\"description\">'.gTxt('description').'</label>'.popHelp('description').br.\n        text_area('description', 0, 0, article_partial_description_value($rs), 'description', TEXTAREA_HEIGHT_SMALL, INPUT_LARGE), ' class=\"description\"');\n\n    return pluggable_ui('article_ui', 'description', $out, $rs);\n}\n\n/**\n * Gets description from the given article data set.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_description_value($rs)\n{\n    return $rs['description'];\n}\n\n/**\n * Renders keywords partial.\n *\n * The rendered widget can be customised via the 'article_ui > keywords'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_keywords($rs)\n{\n    $out = graf('<label for=\"keywords\">'.gTxt('keywords').'</label>'.popHelp('keywords').br.\n        n.'<textarea id=\"keywords\" name=\"Keywords\" cols=\"'.INPUT_MEDIUM.'\" rows=\"'.TEXTAREA_HEIGHT_SMALL.'\">'.txpspecialchars(article_partial_keywords_value($rs)).'</textarea>', ' class=\"keywords\"');\n\n    return pluggable_ui('article_ui', 'keywords', $out, $rs);\n}\n\n/**\n * Gets keywords from the given article data set.\n *\n * @param  array  $rs Article data\n * @return string\n */\n\nfunction article_partial_keywords_value($rs)\n{\n    // Separate keywords by a comma plus at least one space.\n    return preg_replace('/,(\\S)/', ', $1', $rs['Keywords']);\n}\n\n/**\n * Renders article image partial.\n *\n * The rendered widget can be customised via the 'article_ui > article_image'\n * pluggable UI callback event.\n *\n * @param  array $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_image($rs)\n{\n    $default = graf(\n        '<label for=\"article-image\">'.gTxt('article_image').'</label>'.popHelp('article_image').br.\n            fInput('text', 'Image', $rs['Image'], '', '', '', INPUT_REGULAR, '', 'article-image'), ' class=\"article-image\"');\n\n    return wrapRegion('image_group', pluggable_ui('article_ui', 'article_image', $default, $rs), 'image', 'article_image', 'article_image');\n}\n\n/**\n * Renders all custom fields in one partial.\n *\n * The rendered widget can be customised via the 'article_ui > custom_fields'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_custom_fields($rs)\n{\n    global $cfs;\n    $cf = '';\n\n    foreach ($cfs as $k => $v) {\n        $cf .= article_partial_custom_field($rs, \"custom_field_{$k}\");\n    }\n\n    return wrapRegion('custom_field_group', pluggable_ui('article_ui', 'custom_fields', $cf, $rs), 'custom_field', 'custom', 'article_custom_field', (($cfs) ? '' : 'empty'));\n}\n\n/**\n * Renders &lt;ol&gt; list of recent articles.\n *\n * The rendered widget can be customised via the 'article_ui > recent_articles'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_recent_articles($rs)\n{\n    $recents = safe_rows_start('Title, ID', 'textpattern', '1=1 order by LastMod desc limit '.(int) WRITE_RECENT_ARTICLES_COUNT);\n    $ra = '';\n\n    if ($recents && numRows($recents)) {\n        $ra = '<ol class=\"recent\">';\n\n        while ($recent = nextRow($recents)) {\n            if ($recent['Title'] === '') {\n                $recent['Title'] = gTxt('untitled').sp.$recent['ID'];\n            }\n\n            $ra .= n.'<li class=\"recent-article\">'.\n                href(escape_title($recent['Title']), '?event=article'.a.'step=edit'.a.'ID='.$recent['ID']).\n                '</li>';\n        }\n\n        $ra .= '</ol>';\n    }\n\n    return pluggable_ui('article_ui', 'recent_articles', $ra, $rs);\n}\n\n/**\n * Renders article duplicate link.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_article_clone($rs)\n{\n    extract($rs);\n\n    return n.span(href(gTxt('duplicate'), '#', array('id' => 'txp_clone', 'class' => 'article-clone')), array(\n            'id'    => 'article_partial_article_clone',\n            'class' => 'txp-actions',\n        ));\n}\n\n/**\n * Renders article view link.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_article_view($rs)\n{\n    extract($rs);\n\n    if ($Status != STATUS_LIVE and $Status != STATUS_STICKY) {\n        $url = '?txpreview='.intval($ID).'.'.time(); // Article ID plus cachebuster.\n    } else {\n        include_once txpath.'/publish/taghandlers.php';\n        $url = permlinkurl_id($ID);\n    }\n\n    return n.span(href(gTxt('view'), $url, array('class' => 'article-view')), array(\n        'id'    => 'article_partial_article_view',\n        'class' => 'txp-actions',\n    ));\n}\n\n/**\n * Renders article body field.\n *\n * The rendered widget can be customised via the 'article_ui > body'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_body($rs)\n{\n    $out = graf('<label for=\"body\">'.gTxt('body').'</label>'.popHelp('body').br.\n        n.'<textarea id=\"body\" name=\"Body\" cols=\"'.INPUT_LARGE.'\" rows=\"'.TEXTAREA_HEIGHT_LARGE.'\">'.txpspecialchars($rs['Body']).'</textarea>', ' class=\"body\"'\n    );\n\n    return pluggable_ui('article_ui', 'body', $out, $rs);\n}\n\n/**\n * Renders article excerpt field.\n *\n * The rendered widget can be customised via the 'article_ui > excerpt'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_excerpt($rs)\n{\n    $out = graf('<label for=\"excerpt\">'.gTxt('excerpt').'</label>'.popHelp('excerpt').br.\n        n.'<textarea id=\"excerpt\" name=\"Excerpt\" cols=\"'.INPUT_LARGE.'\" rows=\"'.TEXTAREA_HEIGHT_MEDIUM.'\">'.txpspecialchars($rs['Excerpt']).'</textarea>', ' class=\"excerpt\"'\n    );\n\n    return pluggable_ui('article_ui', 'excerpt', $out, $rs);\n}\n\n/**\n * Renders list of view modes.\n *\n * The rendered widget can be customised via the 'article_ui > view'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_view_modes($rs)\n{\n    global $step, $view, $use_textile;\n\n    if ($step == \"create\") {\n        $hasfilter = ($use_textile !== LEAVE_TEXT_UNTOUCHED);\n    } else {\n        $hasfilter = ($rs['textile_body'] !== LEAVE_TEXT_UNTOUCHED || $rs['textile_excerpt'] !== LEAVE_TEXT_UNTOUCHED);\n    }\n\n    if ($hasfilter) {\n        $out = n.tag((tab('text', $view).tab('html', $view).tab('preview', $view)), 'ul');\n    } else {\n        $out = '&#160;';\n    }\n\n    $out = pluggable_ui('article_ui', 'view', $out, $rs);\n\n    return n.tag($out.n, 'div', array('id' => 'view_modes'));\n}\n\n/**\n * Renders next/prev links.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_article_nav($rs)\n{\n    $out = array();\n\n    if ($rs['prev_id']) {\n        $out[] = prevnext_link(gTxt('prev'), 'article', 'edit', $rs['prev_id'], '', 'prev');\n    } else {\n        $out[] = span(gTxt('prev'), array(\n            'class'         => 'navlink-disabled',\n            'aria-disabled' => 'true',\n        ));\n    }\n\n    if ($rs['next_id']) {\n        $out[] = prevnext_link(gTxt('next'), 'article', 'edit', $rs['next_id'], '', 'next');\n    } else {\n        $out[] = span(gTxt('next'), array(\n            'class'         => 'navlink-disabled',\n            'aria-disabled' => 'true',\n        ));\n    }\n\n    return graf(join('', $out), ' role=\"navigation\" class=\"nav-tertiary prev-next\"');\n}\n\n/**\n * Renders article status partial.\n *\n * The rendered widget can be customised via the 'article_ui > status'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_status($rs)\n{\n    return pluggable_ui('article_ui', 'status', status_display($rs['Status']), $rs);\n}\n\n/**\n * Renders article section partial.\n *\n * The rendered widget can be customised via the 'article_ui > section'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_section($rs)\n{\n    $out = graf(\n        '<label for=\"section\">'.gTxt('section').'</label>'.\n\n        sp.span(\n            span('[', array('aria-hidden' => 'true')).\n            eLink('section', '', '', '', gTxt('edit')).\n            span(']', array('aria-hidden' => 'true')), array('class' => 'section-edit')).br.\n\n        section_popup($rs['Section'], 'section'), ' class=\"section\"');\n\n    return pluggable_ui('article_ui', 'section', $out, $rs);\n}\n\n/**\n * Renders article categories partial.\n *\n * The rendered widget can be customised via the 'article_ui > categories'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_categories($rs)\n{\n    $out = n.'<div id=\"categories_group\">'.\n\n        graf(\n            '<label for=\"category-1\">'.gTxt('category1').'</label>'.\n\n            sp.span(\n                span('[', array('aria-hidden' => 'true')).\n                eLink('category', '', '', '', gTxt('edit')).\n                span(']', array('aria-hidden' => 'true')), array('class' => 'category-edit')).br.\n\n            category_popup('Category1', $rs['Category1'], 'category-1'), ' class=\"category category-1\"').\n\n        graf(\n            '<label for=\"category-2\">'.gTxt('category2').'</label>'.br.\n            category_popup('Category2', $rs['Category2'], 'category-2'), ' class=\"category category-2\"').\n\n        n.'</div>';\n\n    return pluggable_ui('article_ui', 'categories', $out, $rs);\n}\n\n/**\n * Renders comment options partial.\n *\n * The rendered widget can be customised via the 'article_ui > annotate_invite'\n * pluggable UI callback event.\n *\n * @param  array       $rs Article data\n * @return string|null HTML\n */\n\nfunction article_partial_comments($rs)\n{\n    global $step, $use_comments, $comments_disabled_after, $comments_default_invite, $comments_on_default;\n\n    extract($rs);\n\n    if ($step == \"create\") {\n        // Avoid invite disappearing when previewing.\n\n        if (!empty($store_out['AnnotateInvite'])) {\n            $AnnotateInvite = $store_out['AnnotateInvite'];\n        } else {\n            $AnnotateInvite = $comments_default_invite;\n        }\n\n        if ($comments_on_default == 1) {\n            $Annotate = 1;\n        }\n    }\n\n    if ($use_comments == 1) {\n        $comments_expired = false;\n\n        if ($step != 'create' && $comments_disabled_after) {\n            $lifespan = $comments_disabled_after * 86400;\n            $time_since = time() - $sPosted;\n\n            if ($time_since > $lifespan) {\n                $comments_expired = true;\n            }\n        }\n\n        if ($comments_expired) {\n            $invite = graf(gTxt('expired'), ' class=\"comment-annotate\" id=\"write-comments\"');\n        } else {\n            $invite = n.'<div id=\"write-comments\">'.\n                graf(\n                onoffRadio('Annotate', $Annotate), ' class=\"comment-annotate\"').\n\n                graf(\n                '<label for=\"comment-invite\">'.gTxt('comment_invitation').'</label>'.br.\n                    fInput('text', 'AnnotateInvite', $AnnotateInvite, '', '', '', INPUT_REGULAR, '', 'comment-invite'), ' class=\"comment-invite\"').\n                n.'</div>';\n        }\n\n        return pluggable_ui('article_ui', 'annotate_invite', $invite, $rs);\n    }\n}\n\n/**\n * Renders timestamp partial.\n *\n * The rendered widget can be customised via the 'article_ui > timestamp'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_posted($rs)\n{\n    extract($rs);\n\n    $out =\n        wrapRegion(\n            'write-timestamp',\n            graf(\n                checkbox('reset_time', '1', $reset_time, '', 'reset_time').\n                tag(gTxt('reset_time'), 'label', array('for' => 'reset_time')), ' class=\"reset-time\"'\n            ).\n\n            graf(gTxt('published_at').popHelp('timestamp'), ' class=\"publish-at\"').\n\n            graf(\n                span(gTxt('date'), array('class' => 'txp-label-fixed')).br.\n                tsi('year', '%Y', $sPosted).' / '.\n                tsi('month', '%m', $sPosted).' / '.\n                tsi('day', '%d', $sPosted), ' class=\"date posted created\"'\n            ).\n\n            graf(\n                span(gTxt('time'), array('class' => 'txp-label-fixed')).br.\n                tsi('hour', '%H', $sPosted).' : '.\n                tsi('minute', '%M', $sPosted).' : '.\n                tsi('second', '%S', $sPosted), ' class=\"time posted created\"'\n            ),\n            '',\n            gTxt('timestamp')\n        );\n\n    return pluggable_ui('article_ui', 'timestamp', $out, $rs);\n}\n\n/**\n * Renders expiration date partial.\n *\n * The rendered widget can be customised via the 'article_ui > expires'\n * pluggable UI callback event.\n *\n * @param  array  $rs Article data\n * @return string HTML\n */\n\nfunction article_partial_expires($rs)\n{\n    extract($rs);\n\n    $out =\n        wrapRegion(\n            'write-expires',\n            graf(\n                span(gTxt('date'), array('class' => 'txp-label-fixed')).br.\n                tsi('exp_year', '%Y', $sExpires).' / '.\n                tsi('exp_month', '%m', $sExpires).' / '.\n                tsi('exp_day', '%d', $sExpires), ' class=\"date expires\"'\n            ).\n\n            graf(\n                span(gTxt('time'), array('class' => 'txp-label-fixed')).br.\n                tsi('exp_hour', '%H', $sExpires).' : '.\n                tsi('exp_minute', '%M', $sExpires).' : '.\n                tsi('exp_second', '%S', $sExpires), ' class=\"time expires\"'\n            ).\n            hInput('sExpires', $sExpires),\n            '',\n            gTxt('expires')\n        );\n\n    return pluggable_ui('article_ui', 'expires', $out, $rs);\n}\n\n/**\n * Gets a partial value from the given article data set.\n *\n * @param  array  $rs  Article data\n * @param  string $key The value to get\n * @return string HTML\n */\n\nfunction article_partial_value($rs, $key)\n{\n    return($rs[$key]);\n}\n\n/**\n * Validates article data.\n *\n * @param  array        $rs  Article data\n * @param  string|array $msg Initial message\n * @return string HTML\n */\n\nfunction article_validate($rs, &$msg)\n{\n    global $prefs, $step, $statuses;\n\n    if (!empty($msg)) {\n        return false;\n    }\n\n    $constraints = array(\n        'Status' => new ChoiceConstraint(\n            $rs['Status'],\n            array('choices' => array_keys($statuses), 'message' => 'invalid_status')\n        ),\n        'Section' => new SectionConstraint($rs['Section']),\n        'Category1' => new CategoryConstraint(\n            $rs['Category1'],\n            array('type' => 'article')\n        ),\n        'Category2' => new CategoryConstraint(\n            $rs['Category2'],\n            array('type' => 'article')\n        ),\n        'textile_body' => new Textpattern_Textfilter_Constraint(\n            $rs['textile_body'],\n            array('message' => 'invalid_textfilter_body')\n        ),\n        'textile_excerpt' => new Textpattern_Textfilter_Constraint(\n            $rs['textile_excerpt'],\n            array('message' => 'invalid_textfilter_excerpt')\n        ),\n    );\n\n    if (!$prefs['articles_use_excerpts']) {\n        $constraints['excerpt_blank'] = new BlankConstraint(\n            $rs['Excerpt'],\n            array('message' => 'excerpt_not_blank')\n        );\n    }\n\n    if (!$prefs['use_comments']) {\n        $constraints['annotate_invite_blank'] = new BlankConstraint(\n            $rs['AnnotateInvite'],\n            array('message' => 'invite_not_blank')\n        );\n\n        $constraints['annotate_false'] = new FalseConstraint(\n            $rs['Annotate'],\n            array('message' => 'comments_are_on')\n        );\n    }\n\n    if ($prefs['allow_form_override']) {\n        $constraints['override_form'] = new FormConstraint(\n            $rs['override_form'],\n            array('type' => 'article')\n        );\n    } else {\n        $constraints['override_form'] = new BlankConstraint(\n            $rs['override_form'],\n            array('message' => 'override_form_not_blank')\n        );\n    }\n\n    callback_event_ref('article_ui', \"validate_$step\", 0, $rs, $constraints);\n\n    $validator = new Validator($constraints);\n    if ($validator->validate()) {\n        $msg = '';\n\n        return true;\n    } else {\n        $msg = doArray($validator->getMessages(), 'gTxt');\n        $msg = array(join(', ', $msg), E_ERROR);\n\n        return false;\n    }\n}\n"], "filenames": ["textpattern/include/txp_article.php"], "buggy_code_start_loc": [330], "buggy_code_end_loc": [751], "fixing_code_start_loc": [330], "fixing_code_end_loc": [759], "type": "CWE-269", "message": "In Textpattern 4.5.7, an unprivileged author can change an article's markup setting.", "other": {"cve": {"id": "CVE-2015-8032", "sourceIdentifier": "cve@mitre.org", "published": "2020-08-14T19:15:11.847", "lastModified": "2020-08-20T18:41:29.047", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Textpattern 4.5.7, an unprivileged author can change an article's markup setting."}, {"lang": "es", "value": "En Textpattern versi\u00f3n 4.5.7, un autor no privilegiado puede cambiar la configuraci\u00f3n de marcado de un art\u00edculo."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:textpattern:textpattern:4.5.7:*:*:*:*:*:*:*", "matchCriteriaId": "675C6B68-D490-4BE4-9DDF-93D7E03BFCFD"}]}]}], "references": [{"url": "https://github.com/textpattern/textpattern/blob/f94c3fb9916ee0c7fa4a52025fa4e8c3273e355b/HISTORY.txt", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/textpattern/textpattern/commit/950d9e0e4ee46efa41e791eac6cd55d2f558c3c9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/textpattern/textpattern/commit/950d9e0e4ee46efa41e791eac6cd55d2f558c3c9"}}