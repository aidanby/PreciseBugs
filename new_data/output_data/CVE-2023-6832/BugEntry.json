{"buggy_code": ["<?php\n\nnamespace MicroweberPackages\\Checkout;\n\nuse Carbon\\Carbon;\nuse Illuminate\\Encryption\\MissingAppKeyException;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Notifications\\AnonymousNotifiable;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Notification;\n\nuse MicroweberPackages\\Checkout\\Http\\Controllers\\CheckoutController;\n\n//use MicroweberPackages\\Invoice\\Address;\n//use MicroweberPackages\\Invoice\\Invoice;\nuse MicroweberPackages\\Order\\Events\\OrderWasPaid;\nuse MicroweberPackages\\Order\\Models\\Order;\nuse MicroweberPackages\\Order\\Notifications\\NewOrder;\nuse MicroweberPackages\\Utils\\Mail\\MailSender;\nuse Twig\\Environment;\nuse Twig\\Loader\\ArrayLoader;\n\nclass CheckoutManager\n{\n    /** @var \\MicroweberPackages\\App\\LaravelApplication */\n    public $app;\n\n    public $table = 'cart';\n    public $tables = array();\n\n    public function __construct($app = null)\n    {\n        if (is_object($app)) {\n            $this->app = $app;\n        } else {\n            $this->app = mw();\n        }\n\n        $tables['cart'] = 'cart';\n\n        $tables['cart_orders'] = 'cart_orders';\n\n        $tables['cart_shipping'] = 'cart_shipping';\n\n        /*$tables['cart_taxes'] = 'cart_taxes';*/\n\n        $this->tables = $tables;\n    }\n\n    public function checkout($data)\n    {\n        $exec_return = false;\n        $sid = $this->app->user_manager->session_id();\n        $sess_order_id = $this->app->user_manager->session_get('order_id');\n        $cart = array();\n        $cart_table = 'cart';\n        $table_orders = 'cart_orders';\n        $cart['session_id'] = $sid;\n        $cart['order_completed'] = 0;\n        $cart['for_checkout'] = true;\n        $cart['limit'] = 1;\n        $mw_process_payment = true;\n        $mw_process_payment_success = false;\n        $mw_process_payment_failed = false;\n        if (isset($_REQUEST['mw_payment_success']) or isset($_REQUEST['mw_payment_failure'])) {\n\n            $update_order = $update_order_orig = $this->app->order_manager->get_by_id($sess_order_id);\n            if (isset($update_order['payment_gw']) and isset($update_order['id'])) {\n                $gw_return = normalize_path(modules_path() . $update_order['payment_gw'] . DS . 'return.php', false);\n                if (is_file($gw_return)) {\n                    include $gw_return;\n\n                    if ($update_order != $update_order_orig) {\n\n                        if (isset($update_order['is_paid'])) {\n                            if (intval($update_order['is_paid']) == 1) {\n                                $_REQUEST['mw_payment_success'] = true;\n                                $_REQUEST['mw_payment_failure'] = null;\n                            } else {\n                                $_REQUEST['mw_payment_success'] = null;\n                                $_REQUEST['mw_payment_failure'] = true;\n                                //    mw()->cart_manager->recover_cart(session()->getId(), $update_order['id']);\n\n                            }\n                        }\n\n                        $should_mark_as_paid = false;\n\n\n                        $this->_verify_request_params($update_order);\n\n\n                        if (!isset($update_order_orig['is_paid']) or (isset($update_order_orig['is_paid']) and intval($update_order_orig['is_paid']) == 0)) {\n                            if (isset($update_order['is_paid']) and intval($update_order['is_paid']) == 1) {\n                                $should_mark_as_paid = true;\n                                unset($update_order['is_paid']);\n                            }\n                        }\n\n                        $this->app->order_manager->save($update_order);\n\n\n                        if ($should_mark_as_paid) {\n                            $this->app->checkout_manager->mark_order_as_paid($update_order['id']);\n                        }\n\n\n                        if (isset($update_order['id'])) {\n                            $this->after_checkout($update_order['id']);\n                        }\n\n\n                    }\n                }\n            }\n\n            if (isset($_REQUEST['mw_payment_success'])) {\n                $mw_process_payment = false;\n                $mw_process_payment_success = true;\n                $exec_return = true;\n            } elseif (isset($_REQUEST['mw_payment_failure'])) {\n\n                if (isset($_REQUEST['recart']) and $_REQUEST['recart'] != false and isset($_REQUEST['order_id'])) {\n\n                    mw()->cart_manager->recover_cart($_REQUEST['recart'], $_REQUEST['order_id']);\n                }\n\n                $mw_process_payment_failed = true;\n                $exec_return = true;\n            }\n        }\n\n        $cart_table_real = $this->app->database_manager->real_table_name($cart_table);\n        $order_table_real = $this->app->database_manager->real_table_name($table_orders);\n\n        if ($exec_return == true) {\n\n            $return_url = $this->app->user_manager->session_get('checkout_return_to_url');\n            if (isset($_REQUEST['return_to']) and $_REQUEST['return_to'] != false) {\n                $return_url = urldecode($_REQUEST['return_to']);\n            }\n            if ($return_url) {\n                $return_to = $return_url;\n                $append = '?';\n                if (strstr($return_to, '?')) {\n                    $append = '&';\n                }\n                if ($mw_process_payment_success == true) {\n                    $return_to = $return_to . $append . 'mw_payment_success=1';\n                } elseif ($mw_process_payment_failed == true) {\n                    $return_to = $return_to . $append . 'mw_payment_failure=1';\n                }\n\n                return $this->app->url_manager->redirect($return_to);\n            } else {\n\n                if(isset($update_order) and isset($update_order['id'])){\n                    if ($mw_process_payment_success == true) {\n                        return redirect(route('checkout.finish', $update_order['id']))->with('success',_e('Your payment is complete',true));\n                    } elseif ($mw_process_payment_failed == true) {\n                        return redirect(route('checkout.finish', $update_order['id']))->with('success',_e('Your payment was not complete',true));\n\n                    } else {\n                        return redirect('/');\n                    }\n                }\n\n\n            }\n        }\n\n        $additional_fields = false;\n        if (isset($data['for']) and isset($data['for_id'])) {\n            $additional_fields = $this->app->fields_manager->get([\n                'rel_type' => $data['for'],\n                'rel_id' => $data['for_id'],\n                'return_full' => true,\n            ]);\n        }\n\n        $seach_address_keys = array('country', 'city', 'address', 'state', 'zip');\n        $addr_found_from_search_in_post = false;\n\n        if (isset($data) and is_array($data)) {\n            foreach ($data as $k => $v) {\n                if (is_array($v)) {\n                    foreach ($seach_address_keys as $item) {\n                        $case1 = ucfirst($item);\n                        if (!isset($data[$item]) and (isset($v[$item]) or isset($v[$case1]))) {\n                            $data[$item] = $v[$item];\n                            if ($addr_found_from_search_in_post == false) {\n                                unset($data[$k]);\n                            }\n                            $addr_found_from_search_in_post = 1;\n                        }\n                    }\n                }\n            }\n        }\n        $save_custom_fields_for_order = array();\n        if (is_array($additional_fields) and !empty($additional_fields)) {\n            foreach ($additional_fields as $cf) {\n                if (isset($data) and is_array($data)) {\n                    foreach ($data as $k => $item) {\n                        $key1 = str_replace('_', ' ', $cf['name']);\n                        $key2 = str_replace('_', ' ', $k);\n                        if ($key1 == $key2) {\n                            $save_custom_fields_for_order[$key1] = $this->app->format->clean_html($item);\n                        }\n                    }\n                }\n            }\n        }\n\n   /*\n    *  OLD VALIDATION ON MODAL\n    *      $validator = app()->make(CheckoutController::class);\n\n        if (!empty($data)) {\n            $request = new Request();\n            $request->merge($data);\n            $is_valid = $validator->validate($request);\n        } else {\n            $is_valid['errors'] = 'Data not entered.';\n        }\n\n        if (is_object($is_valid)) {\n            return $is_valid;\n        }\n\n        if (isset($is_valid['errors'])) {\n            return $is_valid;\n        }*/\n\n        $checkout_errors = array();\n        $check_cart = $this->app->shop_manager->get_cart($cart);\n\n        if (!is_array($check_cart)) {\n            $checkout_errors['cart_empty'] = 'Your cart is empty';\n        } else {\n\n            if (!is_admin()) {\n                $shop_require_terms = $this->app->option_manager->get('shop_require_terms', 'website');\n                if ($shop_require_terms) {\n                    $user_id_or_email = $this->app->user_manager->id();\n                    if (!$user_id_or_email) {\n                        if (isset($data['email'])) {\n                            $user_id_or_email = $data['email'];\n                        }\n                    }\n\n                    if (!$user_id_or_email) {\n                        $checkout_errors['cart_needs_email'] = _e('You must provide email address', true);\n                    } else {\n                        $terms_and_conditions_name = 'terms_shop';\n\n                        $check_term = $this->app->user_manager->terms_check($terms_and_conditions_name, $user_id_or_email);\n                        if (!$check_term) {\n                            if (isset($data['terms']) and $data['terms']) {\n                                $this->app->user_manager->terms_accept($terms_and_conditions_name, $user_id_or_email);\n                            } else {\n                                return array(\n                                    'error' => _e('You must agree to terms and conditions', true),\n                                    'form_data_required' => 'terms',\n                                    'form_data_module' => 'users/terms'\n                                );\n\n                            }\n                        }\n                    }\n                }\n            }\n\n\n            if (!isset($data['payment_gw']) and $mw_process_payment == true) {\n                $data['payment_gw'] = 'none';\n            } else {\n                if ($mw_process_payment == true) {\n                  //  $gw_check = $this->payment_options('payment_gw_' . $data['payment_gw']);\n                    $gw_check = app()->payment_manager->hasPaymentProvider($data['payment_gw']);\n                    if ($gw_check) {\n                        $gateway = app()->payment_manager->getPaymentProviderModule($data['payment_gw']);\n                    } else {\n                        $checkout_errors['payment_gw'] = 'No such payment gateway is activated';\n                    }\n\n//                    if (isset($gw_check[0]) && is_array($gw_check[0])) {\n//                        $gateway = $gw_check[0];\n//                    } else {\n//                        $checkout_errors['payment_gw'] = 'No such payment gateway is activated';\n//                    }\n                }\n            }\n\n            $shipping_country = false;\n            $shipping_cost_max = false;\n            $shipping_cost = false;\n            $shipping_cost_above = false;\n\n            $discount_value = false;\n            $discount_type = false;\n\n            $coupon_id = false;\n            $coupon_code = false;\n            $shipping_cost = 0;\n\n            /*  if (($this->app->user_manager->session_get('shipping_country'))) {\n                  $shipping_country = $this->app->user_manager->session_get('shipping_country');\n              }\n              if (($this->app->user_manager->session_get('shipping_cost_max'))) {\n                  $shipping_cost_max = $this->app->user_manager->session_get('shipping_cost_max');\n              }\n              if (($this->app->user_manager->session_get('shipping_cost_above'))) {\n                  $shipping_cost_above = $this->app->user_manager->session_get('shipping_cost_above');\n              }*/\n\n\n//\n//            if ($this->app->user_manager->session_get('shipping_cost')) {\n//                $shipping_cost = $this->app->user_manager->session_get('shipping_cost');\n//            }\n//\n////\n////\n////\n////            $shipping_gw_from_session = $this->app->user_manager->session_get('shipping_provider');\n////            if(!isset($data['shipping_gw']) and $shipping_gw_from_session){\n////                $data['shipping_gw'] = $shipping_gw_from_session;\n////            }\n////            if(isset($data['shipping_gw']) and $data['shipping_gw']){\n////                try {\n////                    $shipping_cost = $this->app->shipping_manager->driver($data['shipping_gw'])->cost();\n////\n////                } catch (\\InvalidArgumentException $e) {\n////                    $shipping_cost = 0;\n////                    unset($data['shipping_gw']);\n////                }\n////             }\n\n            $shipping_cost = $this->getShippingCost($data);\n\n            if (($this->app->user_manager->session_get('discount_value'))) {\n                $discount_value = $this->app->user_manager->session_get('discount_value');\n            }\n            if (($this->app->user_manager->session_get('discount_type'))) {\n                $discount_type = $this->app->user_manager->session_get('discount_type');\n            }\n            if (($this->app->user_manager->session_get('coupon_id'))) {\n                $coupon_id = $this->app->user_manager->session_get('coupon_id');\n            }\n            if (($this->app->user_manager->session_get('coupon_code'))) {\n                $coupon_code = $this->app->user_manager->session_get('coupon_code');\n            }\n\n\n            //post any of those on the form\n            $flds_from_data = array('first_name', 'last_name', 'email', 'country', 'city', 'state', 'zip', 'address', 'address2', 'payment_email', 'payment_name', 'payment_country', 'payment_address', 'payment_city', 'payment_state', 'payment_zip', 'phone', 'promo_code', 'payment_gw', 'other_info');\n\n            if (!isset($data['email']) or $data['email'] == '') {\n                $data['email'] = user_name(user_id(), 'email');\n            }\n\n            if (get_option('shop_require_email', 'website') == 1) {\n                if (!isset($data['email']) or $data['email'] == '') {\n                    $checkout_errors['email'] = 'Email is required';\n                }\n            }\n\n            if (!isset($data['first_name']) or $data['first_name'] == '') {\n                $data['first_name'] = user_name(user_id(), 'first');\n            }\n\n            if (get_option('shop_require_first_name', 'website') == 1) {\n                if (!isset($data['first_name']) or $data['first_name'] == '') {\n                    $checkout_errors['first_name'] = 'First name is required';\n                }\n            }\n\n            if (get_option('shop_require_last_name', 'website') == 1) {\n                if (!isset($data['last_name']) or $data['last_name'] == '') {\n                    // $checkout_errors['last_name'] = 'Last name is required';\n                    $data['last_name'] = user_name(user_id(), 'last');\n                }\n            }\n\n            if (isset($data['payment_gw']) and $data['payment_gw'] != '') {\n                $data['payment_gw'] = sanitize_path($data['payment_gw']);\n            }\n\n\n            $custom_order_id = $this->app->option_manager->get('custom_order_id', 'shop');\n            $posted_fields = array();\n            $place_order = array();\n            $place_order['id'] = false;\n\n            $return_url_after = '';\n            $return_to_ref = false;\n            $set_return_url_for_order_finish = false;\n\n\n            $place_order['session_id'] = $sid;\n            $place_order['order_completed'] = 0;\n            $items_count = 0;\n\n            foreach ($flds_from_data as $value) {\n                if (isset($data[$value]) and ($data[$value]) != false) {\n                    $place_order[$value] = $data[$value];\n                    $posted_fields[$value] = $data[$value];\n                }\n            }\n\n\n            // Discount details save\n            if ($coupon_code) {\n                $place_order['promo_code'] = $coupon_code;\n                $place_order['coupon_id'] = $coupon_id;\n                $place_order['discount_type'] = $discount_type;\n                $place_order['discount_value'] = $discount_value;\n\n\n                if (!$this->app->cart_manager->couponCodeCheckIfValid($coupon_code)) {\n                    //check if coupon is valid\n                    if(function_exists('coupons_delete_session')){\n                        coupons_delete_session();\n                    }\n\n                    $place_order['promo_code'] = '';\n                    $place_order['coupon_id'] ='';\n                    $place_order['discount_type'] = '';\n                    $place_order['discount_value'] ='';\n                }\n            }\n\n\n\n\n\n            $amount = $this->app->shop_manager->cart_total();\n            $tax = $this->app->cart_manager->get_tax();\n\n\n            if (!empty($checkout_errors)) {\n                return array('error' => $checkout_errors);\n            }\n\n\n            if ($amount and is_numeric($amount) and is_float($amount) ) {\n                $amount = floatval($amount);\n                $amount = number_format($amount, 2, \".\", \"\");;\n            }\n\n            $place_order['amount'] = $amount;\n            $place_order['allow_html'] = true;\n            $place_order['currency'] = $this->app->option_manager->get('currency', 'payments');\n            if (!$place_order['currency']) {\n                $place_order['currency'] = 'USD';\n            }\n\n            if (isset($data['shipping_gw'])) {\n                $place_order['shipping_service'] = $data['shipping_gw'];\n            }\n            $place_order['shipping'] = $shipping_cost;\n            if ($tax != 0) {\n                $place_order['taxes_amount'] = $tax;\n            }\n\n            $items_count = $this->app->shop_manager->cart_sum(false);\n            $place_order['items_count'] = $items_count;\n\n            $cart_checksum = md5($sid . serialize($check_cart) . uniqid(time()));\n\n            $place_order['payment_verify_token'] = $cart_checksum;\n\n            if (isset($save_custom_fields_for_order) and !empty($save_custom_fields_for_order)) {\n                $place_order['custom_fields_data'] = $this->app->format->array_to_base64($save_custom_fields_for_order);\n            }\n\n            if (!isset($place_order['shipping']) or $place_order['shipping'] == false) {\n                $place_order['shipping'] = 0;\n            }\n\n            $temp_order = $this->app->database_manager->save($table_orders, $place_order);\n            if ($temp_order != false) {\n                $place_order['id'] = $temp_order;\n            } else {\n                $place_order['id'] = 0;\n            }\n\n            if ($custom_order_id != false) {\n                foreach ($place_order as $key => $value) {\n                    $custom_order_id = str_ireplace('{' . $key . '}', $value, $custom_order_id);\n                }\n\n                $custom_order_id = str_ireplace('{YYYYMMDD}', date('Ymd'), $custom_order_id);\n                $custom_order_id = str_ireplace('{date}', date('Y-m-d'), $custom_order_id);\n            }\n\n            if ($custom_order_id != false) {\n                $place_order['item_name'] = 'Order id:' . ' ' . $custom_order_id;\n                $place_order['order_id'] = $custom_order_id;\n            } else {\n                $place_order['item_name'] = 'Order id:' . ' ' . $place_order['id'];\n            }\n\n\n\n\n            // convert currency to payment provider currency\n            $currencies_list_paypal = app()->shop_manager->currency_get_for_paypal();\n            $currencyCode = strtoupper($place_order['currency']);\n            $amount = $place_order['amount'];\n\n            if (!isset($place_order['payment_amount'])) {\n                $place_order['payment_amount'] = $amount;\n            }\n            $place_order['payment_shipping'] = $place_order['shipping'];\n\n\n            $payment_currency = get_option('payment_currency', 'payments');\n            $payment_currency_rate = get_option('payment_currency_rate', 'payments');\n\n            if (!isset($place_order['payment_currency'])) {\n                $place_order['payment_currency'] = $place_order['currency'];\n            }\n\n            if ($payment_currency and $payment_currency != $currencyCode) {\n\n                if (!in_array(strtoupper($place_order['currency']), $currencies_list_paypal)) {\n\n                    $currencyCode = $payment_currency;\n\n\n                    if ($payment_currency_rate != false) {\n                        $payment_currency_rate = str_replace(',', '.', $payment_currency_rate);\n                        $payment_currency_rate = floatval($payment_currency_rate);\n\n                    }\n                    if ($payment_currency_rate != 0.00) {\n                        $amount = str_replace(',', '', $amount);\n                        $amount = floatval($amount);\n                        $amount = $amount * $payment_currency_rate;\n                        $place_order['payment_amount'] = $amount;\n                    }\n\n\n                    if ($place_order['payment_shipping']) {\n                        $place_order['payment_shipping'] = $place_order['payment_shipping'] * $payment_currency_rate;\n\n                    }\n\n\n                }\n            }\n\n\n            $place_order['payment_currency'] = $currencyCode;\n\n\n            // end of convert for curency\n\n\n            if ($mw_process_payment == true) {\n                $shop_dir = module_dir('shop');\n                $shop_dir = $shop_dir . DS . 'payments' . DS . 'gateways' . DS;\n\n                if ($data['payment_gw'] != 'none') {\n                    $place_order['posted_fields']  = $posted_fields;\n\n                    $encrypter = new \\Illuminate\\Encryption\\Encrypter(md5(\\Illuminate\\Support\\Facades\\Config::get('app.key') . $place_order['payment_verify_token']), \\Illuminate\\Support\\Facades\\Config::get('app.cipher'));\n\n                    $vkey_data = array();\n\n                    $vkey_data['payment_verify_token'] = $place_order['payment_verify_token'];\n\n                    $enc_key_hash = md5(json_encode($vkey_data));\n                    $enc_key_hash = $encrypter->encrypt($enc_key_hash);\n\n                    $mw_return_url = $this->app->url_manager->api_link('checkout') . '?mw_payment_success=1&order_id=' . $place_order['id'] . '&payment_gw=' . $place_order['payment_gw'] . '&payment_verify_token=' . $place_order['payment_verify_token'] . '&_vkey_url=' . $enc_key_hash . $return_url_after;\n                    $vkey_data_temp = $vkey_data;\n\n\n                    $mw_cancel_url = $this->app->url_manager->api_link('checkout') . '?mw_payment_failure=1&order_id=' . $place_order['id'] . '&payment_gw=' . $place_order['payment_gw'] . '&_vkey_url=' . $enc_key_hash . '&recart=' . $sid . $return_url_after;\n                    $vkey_data_temp = $vkey_data;\n\n\n                    $mw_ipn_url = $this->app->url_manager->api_link('checkout_ipn') . '?payment_gw=' . $place_order['payment_gw'] . '&order_id=' . $place_order['id'] . '&payment_verify_token=' . $place_order['payment_verify_token'] . '&_vkey_url=' . $enc_key_hash . $return_url_after;\n                    $vkey_data_temp = $vkey_data;\n\n\n                    $mw_payment_fields = array();\n                    $mw_payment_fields['enc_key_hash']  = $enc_key_hash;\n                    $mw_payment_fields['mw_return_url']  = $mw_return_url;\n                    $mw_payment_fields['mw_cancel_url']  = $mw_cancel_url;\n                    $mw_payment_fields['mw_ipn_url']  = $mw_ipn_url;\n\n                    $place_order['mw_payment_fields']  = $mw_payment_fields;\n                    $place_order['posted_data']  = $data;\n\n                    $paymentDriver = app()->payment_manager->driver($data['payment_gw']);\n                    $skipLegacy = false;\n                    if(method_exists($paymentDriver, 'process')){\n                        $skipLegacy = true;\n                        $place_order =  $paymentDriver->process($place_order);\n                    }\n\n\n\n                    if ($skipLegacy == false) {\n                        $place_order['payment_gw'] = $data['payment_gw'];\n                        $gw_process = modules_path() . $data['payment_gw'] . '_process.php';\n                        if (!is_file($gw_process)) {\n                            $gw_process = normalize_path(modules_path() . $data['payment_gw'] . DS . 'process.php', false);\n                        }\n\n\n                        if (is_file($gw_process)) {\n                            require_once $gw_process;\n                        } else {\n                            $checkout_errors['payment_gw'] = 'Payment gateway\\'s process file not found.';\n                        }\n                    }\n\n                    if (isset($place_order['posted_fields'])) {\n                        unset($place_order['posted_fields']);\n                    }\n                    if (isset($place_order['mw_payment_fields'])) {\n                        unset($place_order['mw_payment_fields']);\n                    } if (isset($place_order['posted_data'])) {\n                        unset($place_order['posted_data']);\n                    }\n\n                } else {\n                    $place_order['order_completed'] = 1;\n                    $place_order['is_paid'] = 0;\n                    $place_order['success'] = 'Your order has been placed successfully!';\n                }\n\n\n                $place_order['order_status'] = 'new';\n\n                if (!empty($checkout_errors)) {\n                    return array('error' => $checkout_errors);\n                }\n\n                if (isset($place_order['error'])) {\n                    return array('error' => $place_order['error']);\n                }\n\n\n                /*\n                     $invoicePrefix = 'INV';\n                     $nextInvoiceNumber = Invoice::getNextInvoiceNumber($invoicePrefix);\n                     $invoiceDate = Carbon::createFromFormat('Y-m-d', date('Y-m-d'));\n                     $dueDate = Carbon::createFromFormat('Y-m-d', date('Y-m-d', strtotime('+6 days', strtotime(date('Y-m-d')))));\n\n                     $invoiceTotal = ($place_order['amount'] * 100);\n\n                     $invoice = Invoice::create([\n                         'invoice_date' => $invoiceDate,\n                         'due_date' => $dueDate,\n                         'invoice_number' => $invoicePrefix . '-' . $nextInvoiceNumber,\n                         'reference_number' => '',\n                         'customer_id' => $findCustomer->id,\n                         'company_id' => 0,\n                         'invoice_template_id' => 1,\n                         'status' => Invoice::STATUS_DRAFT,\n                         'paid_status' => Invoice::STATUS_UNPAID,\n                         'sub_total' => $invoiceTotal,\n                         'discount' =>'',\n                         'discount_type' => $place_order['discount_type'],\n                         'discount_val' => ($place_order['discount_value'] * 100),\n                         'total' => $invoiceTotal,\n                         'due_amount' => $invoiceTotal,\n                         'tax_per_item' => '',\n                         'discount_per_item' => '',\n                         'tax' => '',\n                         'notes' => '',\n                         'unique_hash' => str_random(60)\n                     ]);\n\n                     foreach ($check_cart as $cartItem) {\n                         $invoice->items()->create([\n                             'name'=>$cartItem['title'],\n                             'description'=>$cartItem['description'],\n                             'price'=>($cartItem['price'] * 100),\n                             'quantity'=>$cartItem['qty'],\n                         ]);\n                     }*/\n\n                $ord = $this->app->shop_manager->place_order($place_order);\n                $place_order['id'] = $ord;\n\n                if (isset($place_order['is_paid']) and $place_order['is_paid']) {\n                    $this->app->event_manager->trigger('mw.cart.checkout.order_paid', $place_order);\n                }\n\n\n            }\n\n            if (isset($place_order) and !empty($place_order)) {\n                if (!isset($place_order['success'])) {\n                    $place_order['success'] = 'Your order has been placed successfully!';\n                }\n                $return = $place_order;\n                if (isset($place_order['redirect'])) {\n                    $return['redirect'] = $place_order['redirect'];\n                }\n\n                return $return;\n            }\n        }\n\n        if (!empty($checkout_errors)) {\n            return array('error' => $checkout_errors);\n        }\n    }\n\n    public function getUserInfo()\n    {\n        return $this->checkout_get_user_info();\n    }\n\n\n    public function checkout_get_user_info()\n    {\n\n        $ready = [];\n        $logged_user_data = [];\n        $shipping_address_from_profile = [];\n        $logged_user_data = [];\n\n\n        $selected_country_from_session = session_get('shipping_country');\n        $checkout_session = session_get('checkout');\n        $checkout_session2 = session_get('checkout_v2');\n\n        if (!$checkout_session) {\n            $checkout_session = [];\n        }\n        if (!$checkout_session2) {\n            $checkout_session2 = [];\n        }\n        $checkout_session = array_merge($checkout_session,$checkout_session2);\n        $user_fields_from_profile = ['email', 'last_name', 'first_name', 'phone', 'username', 'middle_name'];\n        $shipping_fields_keys = ['address', 'city', 'state', 'zip', 'other_info', 'country', 'shipping_gw', 'payment_gw'];\n\n        $all_field_keys = array_merge($user_fields_from_profile, $shipping_fields_keys);\n\n\n        if (is_logged()) {\n            $shipping_address_from_profile = app()->user_manager->get_shipping_address();\n        }\n        if ($checkout_session) {\n            foreach ($all_field_keys as $field_key) {\n                if (!empty($checkout_session) and !isset($ready[$field_key])) {\n                    foreach ($checkout_session as $k => $v) {\n                        if ($field_key == $k and $v) {\n                            $ready[$k] = $v;\n                        }\n                    }\n                }\n            }\n            if (!isset($ready['country']) and $selected_country_from_session) {\n                $ready['country'] = $selected_country_from_session;\n\n            }\n        }\n\n        if ($shipping_address_from_profile) {\n            foreach ($all_field_keys as $field_key) {\n                if (!empty($shipping_address_from_profile) and !isset($ready[$field_key])) {\n                    foreach ($shipping_address_from_profile as $k => $v) {\n                        if ($field_key == $k and $v) {\n                            $ready[$k] = $v;\n                        }\n\n                    }\n                }\n            }\n        }\n\n\n        if ($shipping_address_from_profile) {\n            $logged_user_data = get_user();\n            if ($logged_user_data) {\n                foreach ($all_field_keys as $field_key) {\n                    if (!empty($logged_user_data) and !isset($ready[$field_key])) {\n                        foreach ($logged_user_data as $k => $v) {\n                            if ($field_key == $k and $v) {\n                                $ready[$k] = $v;\n                            }\n\n                        }\n                    }\n                }\n            }\n\n        }\n        return $ready;\n    }\n\n    public function payment_options($option_key = false)\n    {\n        $option_key_q = '';\n        if (is_string($option_key)) {\n            $option_key_q = \"&limit=1&option_key={$option_key}\";\n        }\n        $providers = $this->app->option_manager->get_all('group=payments' . $option_key_q);\n      //  $providers = $this->app->option_repository->getByParams('group=payments' . $option_key_q);\n\n        $payment_modules = get_modules('type=payment_gateway');\n        $str = 'payment_gw_';\n        $l = strlen($str);\n        $enabled_providers = array();\n        if (!empty($payment_modules) and !empty($providers)) {\n            foreach ($payment_modules as $payment_module) {\n                foreach ($providers as $value) {\n                    if ($value['option_value'] == 1) {\n                        if (substr($value['option_key'], 0, $l) == $str) {\n                            $title = substr($value['option_key'], $l);\n                            $string = preg_replace('/(\\w+)([A-Z])/U', '\\\\1 \\\\2', $title);\n                            $value['gw_file'] = $title;\n\n                            if (isset($payment_module['module']) and $value['gw_file'] == $payment_module['module']) {\n                                $payment_module['gw_file'] = $title;\n                                $enabled_providers[] = $payment_module;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (!empty($enabled_providers)) {\n            return $enabled_providers;\n        }\n\n        // the rest is for comaptibily and will be removed in the near future\n        $str = 'payment_gw_';\n        $l = strlen($str);\n        if (is_array($providers)) {\n            $valid = array();\n            foreach ($providers as $value) {\n                if ($value['option_value'] == 1) {\n                    if (substr($value['option_key'], 0, $l) == $str) {\n                        $title = substr($value['option_key'], $l);\n                        $string = preg_replace('/(\\w+)([A-Z])/U', '\\\\1 \\\\2', $title);\n                        $value['gw_file'] = $title;\n                        $mod_infp = $this->app->module_manager->get('ui=any&one=1&module=' . $title);\n\n                        if (!empty($mod_infp)) {\n                            $value = $mod_infp;\n                            $title = sanitize_path($title);\n\n                            $value['gw_file'] = $title;\n                            $valid[] = $value;\n                        }\n                    }\n                }\n            }\n\n            return $valid;\n        }\n    }\n\n    public function after_checkout($orderId)\n    {\n        if ($orderId == false or trim($orderId) == '') {\n            return array('error' => _e('Invalid order ID'));\n        }\n\n        $order = Order::find($orderId);\n        if (!$order) {\n            return array('error' => _e('Order not found'));\n        }\n        // $this->confirm_email_send($orderId);\n    }\n\n\n    public function mark_order_as_paid($orderId)\n    {\n\n        $order = Order::find($orderId);\n        if (!$order) {\n            return;\n        }\n\n        $update_order_event_data = $order->toArray();\n\n        if (!isset($update_order_event_data['is_paid']) or (isset($update_order_event_data['is_paid']) and intval($update_order_event_data['is_paid']) == 0)) {\n            event($event = new OrderWasPaid($order, $update_order_event_data));\n            $this->app->event_manager->trigger('mw.cart.checkout.order_paid', $update_order_event_data);\n            $this->app->shop_manager->update_quantities($orderId);\n            $order->is_paid = 1;\n            $order->save();\n        }\n\n\n    }\n\n\n    public function confirm_email_send($order_id, $to = false, $no_cache = true, $skip_enabled_check = false)\n    {\n        $ord_data = $this->app->shop_manager->get_order_by_id($order_id);\n\n        if (is_array($ord_data)) {\n\n            if ($skip_enabled_check == false) {\n                $order_email_enabled = $this->app->option_manager->get('order_email_enabled', 'orders');\n            } else {\n                $order_email_enabled = $skip_enabled_check;\n            }\n\n            $send_to_client = true;\n            $send_to_admins = true;\n            $send_to_client_option = $this->app->option_manager->get('send_email_on_new_order', 'orders');\n            if (!empty($send_to_client_option)) {\n                if ($send_to_client_option == 'admins') {\n                    $send_to_admins = true;\n                    $send_to_client = false;\n                }\n                if ($send_to_client_option == 'client') {\n                    $send_to_admins = false;\n                    $send_to_client = true;\n                }\n            }\n\n            if ($order_email_enabled) {\n\n                //  $order_email_subject = $this->app->option_manager->get('order_email_subject', 'orders');\n                // $order_email_content = $this->app->option_manager->get('order_email_content', 'orders');\n\n                $mail_template = false;\n                $mail_template_binds = $this->app->event_manager->trigger('mw.cart.confirm_email_send', $order_id);\n                if (is_array($mail_template_binds)) {\n                    foreach ($mail_template_binds as $bind) {\n                        if (is_array($bind) && isset($bind['mail_template'])) {\n                            $mail_template = $bind['mail_template'];\n                        }\n                    }\n                }\n\n                if (!$mail_template) {\n                    return;\n                }\n\n                $order_email_cc_string = $mail_template['copy_to'];\n                $order_email_subject = $mail_template['subject'];\n                $order_email_content = $mail_template['message'];\n\n                $order_email_cc = array();\n                if (!empty($order_email_cc_string) && strpos($order_email_cc_string, ',')) {\n                    $order_email_cc = explode(',', $order_email_cc_string);\n                } else {\n                    $order_email_cc[] = $order_email_cc_string;\n                }\n\n                if (empty($order_email_cc)) {\n                    $admins = get_users('is_admin=1');\n                    foreach ($admins as $admin) {\n                        if (isset($admin['email']) && !empty($admin['email']) && filter_var($admin['email'], FILTER_VALIDATE_EMAIL)) {\n                            $order_email_cc[] = $admin['email'];\n                        }\n                    }\n                }\n\n                $order_email_send_when = $this->app->option_manager->get('order_email_send_when', 'orders');\n                if ($order_email_send_when == 'order_paid' and !$skip_enabled_check) {\n                    if (isset($ord_data['is_paid']) and $ord_data['is_paid'] == false) {\n                        return;\n                    }\n                }\n\n                if ($order_email_subject == false or trim($order_email_subject) == '') {\n                    $order_email_subject = 'Thank you for your order!';\n                }\n                if ($to == false) {\n                    $to = $ord_data['email'];\n                }\n                if ($order_email_content != false and trim($order_email_subject) != '') {\n                    $cart_items = array();\n                    if (!empty($ord_data)) {\n                        $cart_items = $this->app->shop_manager->get_cart('order_id=' . $ord_data['id'] . '&no_session_id=' . $this->app->user_manager->session_id());\n\n                        $cart_items_info = array();\n                        $order_items_html = '';\n                        if (!empty($cart_items)) {\n                            foreach ($cart_items as $cart_item) {\n                                $arr = array();\n                                if (isset($cart_item['item_image']) and $cart_item['item_image']) {\n\n                                    $arr['item_image'] = $cart_item['item_image'];\n                                    $arr['item_image'] = '<img src=\"' . $arr['item_image'] . '\" width=\"100\" />';\n                                }\n                                if (isset($cart_item['link'])) {\n                                    $arr['link'] = $cart_item['link'];\n                                }\n                                if (isset($cart_item['title'])) {\n                                    $arr['title'] = $cart_item['title'];\n                                }\n                                if (isset($cart_item['custom_fields'])) {\n                                    $arr['custom_fields'] = $cart_item['custom_fields'];\n                                }\n                                $cart_items_info[] = $arr;\n                            }\n                            $order_items_html = $this->app->format->array_to_table($cart_items_info);\n\n                        }\n                        $order_email_content = str_replace('{{cart_items}}', $order_items_html, $order_email_content);\n                        $order_email_content = str_replace('{{date}}', date('F jS, Y', strtotime($ord_data['created_at'])), $order_email_content);\n                        foreach ($ord_data as $key => $value) {\n                            if (!is_array($value) and is_string($key)) {\n                                if (strtolower($key) == 'amount') {\n                                    $value = number_format($value, 2);\n                                    $order_email_content = str_ireplace('{{' . $key . '}}', $value, $order_email_content);\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    if (get_option('bank_transfer_send_email_instructions', 'payments') == 'y') {\n                        $order_email_content .= _e(\"Follow payment instructions\", true);\n                        $order_email_content .= '<br />' . get_option('bank_transfer_instructions', 'payments');\n                    }\n\n                    $loader = new ArrayLoader([\n                        'checkout_mail.html' => $order_email_content,\n                    ]);\n                    $twig = new Environment($loader);\n                    $order_email_content = $twig->render(\n                        'checkout_mail.html', [\n                            'cart' => $cart_items,\n                            'order' => $ord_data,\n                            'order_id' => $ord_data['id'],\n                            'transaction_id' => $ord_data['transaction_id'],\n                            'currency' => $ord_data['currency'],\n                            'order_status' => $ord_data['order_status'],\n                            'first_name' => $ord_data['first_name'],\n                            'last_name' => $ord_data['last_name'],\n                            'email' => $ord_data['email'],\n                            'phone' => $ord_data['phone'],\n                            'address' => $ord_data['address'],\n                            'zip' => $ord_data['zip'],\n                            'state' => $ord_data['state'],\n                            'city' => $ord_data['city'],\n                            'country' => $ord_data['country']\n                        ]\n                    );\n\n                    $sender = new MailSender();\n\n                    // Send only to client\n                    if ($send_to_client && !$send_to_admins && filter_var($to, FILTER_VALIDATE_EMAIL)) {\n                        $sender->send($to, $order_email_subject, $order_email_content);\n                        // echo 'Send only to client.';\n                    }\n\n                    // Send only to admins\n                    if (!$send_to_client && $send_to_admins && is_array($order_email_cc)) {\n                        // echo 'Send only to admins.';\n                        foreach ($order_email_cc as $admin_email) {\n                            $sender->send($admin_email, $order_email_subject, $order_email_content, false, $no_cache);\n                        }\n                    }\n\n                    // Send to admins and client\n                    if ($send_to_client && $send_to_admins) {\n                        if (filter_var($to, FILTER_VALIDATE_EMAIL)) {\n                            $sender->send($to, $order_email_subject, $order_email_content);\n                            // echo 'Send to client.';\n                        }\n                        if (is_array($order_email_cc)) {\n                            // echo 'Send to admins.';\n                            foreach ($order_email_cc as $admin_email) {\n                                $sender->send($admin_email, $order_email_subject, $order_email_content, false, $no_cache);\n                            }\n                        }\n                    }\n\n                    return true;\n                }\n            }\n        }\n    }\n\n    public function checkout_ipn($data)\n    {\n        if (isset($data['payment_verify_token'])) {\n            $payment_verify_token = ($data['payment_verify_token']);\n        }\n        if (!isset($data['payment_gw'])) {\n            return array('error' => 'You must provide a payment gateway parameter!');\n        }\n\n\n        $data['payment_gw'] = sanitize_path($data['payment_gw']);\n\n        $should_mark_as_paid = false;\n\n        $client_ip = user_ip();\n\n        $hostname = $this->get_domain_from_str($client_ip);\n\n\n        $payment_verify_token = $this->app->database_manager->escape_string($payment_verify_token);\n        $table = 'cart_orders';\n\n        $query = array();\n        $query['payment_verify_token'] = $payment_verify_token;\n        if (isset($data['order_id'])) {\n            $query['id'] = intval($data['order_id']);\n        } else {\n            $query['transaction_id'] = '[null]';\n        }\n        $query['limit'] = 1;\n        $query['table'] = $table;\n        $query['no_cache'] = true;\n\n        $ord_data = $this->app->database_manager->get($query);\n        if (!isset($ord_data[0]) or !is_array($ord_data[0])) {\n            return array('error' => 'Order is completed or expired.');\n        } else {\n            $ord_data = $ord_data[0];\n            $ord = $ord_data['id'];\n        }\n\n        $cart_table = 'cart';\n        $table_orders = 'cart_orders';\n\n        $data['payment_gw'] = sanitize_path($data['payment_gw']);\n        $gw_process = modules_path() . $data['payment_gw'] . '_checkout_ipn.php';\n        if (!is_file($gw_process)) {\n            $gw_process = normalize_path(modules_path() . $data['payment_gw'] . DS . 'checkout_ipn.php', false);\n        }\n        if (!is_file($gw_process)) {\n            $gw_process = normalize_path(modules_path() . $data['payment_gw'] . DS . 'notify.php', false);\n        }\n\n\n        $update_order = array();\n        if (is_file($gw_process)) {\n            include $gw_process;\n\n            // $this->_verify_request_params($update_order);\n\n        } else {\n            return array('error' => 'The payment gateway is not found!');\n        }\n        $update_order_event_data = [];\n\n\n        if (is_array($update_order)) {\n            $update_order_event_data = array_merge($ord_data, $update_order);\n        }\n\n\n        if (!empty($update_order_event_data) and isset($update_order_event_data['order_completed']) and $update_order_event_data['order_completed'] == 1) {\n            $this->after_checkout($ord);\n\n            if (!isset($ord_data['is_paid']) or (isset($ord_data['is_paid']) and intval($ord_data['is_paid']) == 0)) {\n                if (isset($update_order_event_data['is_paid']) and intval($update_order_event_data['is_paid']) == 1) {\n                    $should_mark_as_paid = true;\n                }\n            }\n\n            if ($should_mark_as_paid) {\n                $this->app->checkout_manager->mark_order_as_paid($ord);\n            }\n\n\n            //            $update_order_event_data['id'] = $ord;\n//            $update_order_event_data['payment_gw'] = $data['payment_gw'];\n//            $ord = $this->app->database_manager->save($table_orders, $update_order_event_data);\n//\n//\n//            if (isset($update_order_event_data['is_paid']) and $update_order_event_data['is_paid']) {\n//                $this->app->event_manager->trigger('mw.cart.checkout.order_paid', $update_order_event_data);\n//            }\n//\n//            if (isset($update_order_event_data['is_paid']) and $update_order_event_data['is_paid'] == 1) {\n//                $this->app->shop_manager->update_quantities($ord);\n//\n//\n//            }\n//            if ($ord > 0) {\n//                $this->app->cache_manager->delete('cart');\n//                $this->app->cache_manager->delete('cart_orders');\n//                //return true;\n//            }\n//\n//            $this->confirm_email_send($ord);\n\n        }\n\n        if (isset($data['return_to'])) {\n            $return_to = urldecode($data['return_to']);\n\n            $append = '?';\n            if (strstr($return_to, '?')) {\n                $append = '&';\n            }\n            $return_to = $return_to . $append . 'mw_payment_success=1';\n\n            return $this->app->url_manager->redirect($return_to);\n        }\n\n        return;\n    }\n\n    private function get_domain_from_str($address)\n    {\n        $address = gethostbyaddr($address);\n        $parsed_url = parse_url($address);\n        if (!isset($parsed_url['host'])) {\n            if (isset($parsed_url['path'])) {\n                $parsed_url['host'] = $parsed_url['path'];\n            }\n        }\n        $check = $this->esip($parsed_url['host']);\n        $host = $parsed_url['host'];\n        if ($check == false) {\n            if ($host != '') {\n                $host = $this->domain_name($host);\n            } else {\n                $host = $this->domain_name($address);\n            }\n        }\n\n        return $host;\n    }\n\n    private function esip($ip_addr)\n    {\n        if (preg_match(\"/^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/\", $ip_addr)) {\n            $parts = explode('.', $ip_addr);\n            foreach ($parts as $ip_parts) {\n                if (intval($ip_parts) > 255 || intval($ip_parts) < 0) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private function domain_name($domainb)\n    {\n        $bits = explode('/', $domainb);\n        if ($bits[0] == 'http:' || $bits[0] == 'https:') {\n            $domainb = $bits[2];\n        } else {\n            $domainb = $bits[0];\n        }\n        unset($bits);\n        $bits = explode('.', $domainb);\n        $idz = count($bits);\n        $idz -= 3;\n        if (strlen($bits[($idz + 2)]) == 2) {\n            $url = $bits[$idz] . '.' . $bits[($idz + 1)] . '.' . $bits[($idz + 2)];\n        } elseif (strlen($bits[($idz + 2)]) == 0) {\n            $url = $bits[($idz)] . '.' . $bits[($idz + 1)];\n        } else {\n            $url = $bits[($idz + 1)] . '.' . $bits[($idz + 2)];\n        }\n\n        return $url;\n    }\n\n    private function _verify_request_params($data)\n    {\n\n        $error = true;\n\n        if (!isset($data['payment_verify_token'])) {\n            $error = true;\n        }\n        if (isset($data['order_id'])) {\n            $data['id'] = $data['order_id'];\n        }\n\n        if (!isset($data['payment_amount'])) {\n            $error = true;\n        }\n\n\n        if (!isset($data['payment_currency'])) {\n            $error = true;\n        }\n        if (!isset($data['id'])) {\n            $error = true;\n        }\n\n\n\n        $vkey = false;\n\n        if (isset($_REQUEST['_vkey_url'])) {\n            $vkey = $_REQUEST['_vkey_url'];\n        }\n\n\n//        $url = url_current();\n//        $param = '_vkey_url';\n//        $pieces = parse_url($url);\n//        $query = [];\n//        if ($pieces['query']) {\n//            parse_str($pieces['query'], $query);\n//            $data[$param] = $query[$param];\n//            unset($query[$param]);\n//            $pieces['query'] = http_build_query($query);\n//        }\n//        if (!isset($data['_vkey_url'])) {\n//            $error = true;\n//        } else {\n//            $vkey = $data['_vkey_url'];\n//        }\n\n\n        if (!$vkey) {\n            $error = true;\n        }\n        $order_data = false;\n        if(!$error and isset($data['id'])){\n        $order_data = get_order_by_id($data['id']);\n        }\n\n        if ($order_data and $vkey) {\n\n            $vkey_data = array();\n            //  $vkey_data['payment_amount'] = $order_data['payment_amount'];\n            // $vkey_data['payment_currency'] = $order_data['payment_currency'];\n            $vkey_data['payment_verify_token'] = $order_data['payment_verify_token'];\n            //  $vkey_data['id'] = $order_data['id'];\n//dd($order_data);\n            $enc_key_hash = md5(json_encode($vkey_data));\n            //   $enc_key_hash = md5(\\Config::get('app.key').json_encode($vkey_data));\n\n            // dd(2222,$vkey,$enc_key_hash,$data,$order_data);\n\n            // $vkey = urldecode($vkey);\n\n            $encrypter = new \\Illuminate\\Encryption\\Encrypter(md5(\\Config::get('app.key') . $order_data['payment_verify_token']), \\Config::get('app.cipher'));\n\n            $decrypt_data = $encrypter->decrypt($vkey);\n\n            //    dd($enc_key_hash,$decrypt_data);\n\n            //  $enc_key_hash = $encrypter->encrypt(json_encode($vkey_data));\n\n            //dd($vkey, $enc_key_hash,$order_data,$vkey_data);\n            if ($enc_key_hash === $decrypt_data) {\n                $error = false;\n\n            }\n\n            // $url_verify = $this->_build_url($pieces);\n            // $decrypt_data = @json_decode($encrypter->decrypt($vkey), true);\n\n//            if (!$decrypt_data) {\n//                $error = true;\n//            } else {\n//\n//                $decrypt_url = $decrypt_data['url'];\n//                $decrypt_payment_amount = $decrypt_data['payment_amount'];\n//                $decrypt_payment_currency = $decrypt_data['payment_currency'];\n//\n//                $url_verify = urldecode($url_verify);\n//                $decrypt_url = urldecode($decrypt_url);\n//\n//                if (md5($url_verify) !== md5($decrypt_url)) {\n//                    $error = true;\n//                }\n//\n//                if (md5(floatval($decrypt_payment_amount)) !== md5(floatval($data['payment_amount']))) {\n//                    $error = true;\n//                }\n//                if (md5(strtoupper($decrypt_payment_currency)) !== md5(strtoupper($data['payment_currency']))) {\n//                    $error = true;\n//                }\n//            }\n        }\n\n\n        if ($error) {\n\n            abort(403, 'Unauthorized action.');\n        }\n\n    }\n\n    public function getShippingModules()\n    {\n        return $this->app->shipping_manager->getShippingModules();\n\n    }\n\n    public function getShippingCost($data = [])\n    {\n\n        if (!is_array($data)) {\n            $data = [];\n        }\n        $shipping_cost = 0;\n\n        if ($this->app->user_manager->session_get('shipping_cost')) {\n            $shipping_cost = $this->app->user_manager->session_get('shipping_cost');\n        }\n\n\n        $shipping_gw_from_session = $this->app->user_manager->session_get('shipping_provider');\n        if (!isset($data['shipping_gw']) and $shipping_gw_from_session) {\n            $data['shipping_gw'] = $shipping_gw_from_session;\n        } else {\n            $data['shipping_gw'] = 'default';\n\n        }\n        if (isset($data['shipping_gw']) and $data['shipping_gw']) {\n            // $shipping_cost = $this->app->shipping_manager->driver($data['shipping_gw'])->cost();\n\n            try {\n                $shipping_cost = $this->app->shipping_manager->driver($data['shipping_gw'])->cost();\n\n            } catch (\\InvalidArgumentException $e) {\n                $shipping_cost = 0;\n                unset($data['shipping_gw']);\n            }\n        }\n        return $shipping_cost;\n\n    }\n\n    private function _build_url(array $elements)\n    {\n        $e = $elements;\n        return\n            (isset($e['host']) ? (\n                (isset($e['scheme']) ? \"$e[scheme]://\" : '//') .\n                (isset($e['user']) ? $e['user'] . (isset($e['pass']) ? \":$e[pass]\" : '') . '@' : '') .\n                $e['host'] .\n                (isset($e['port']) ? \":$e[port]\" : '')\n            ) : '') .\n            (isset($e['path']) ? $e['path'] : '/') .\n            (isset($e['query']) ? '?' . (is_array($e['query']) ? http_build_query($e['query'], '', '&') : $e['query']) : '') .\n            (isset($e['fragment']) ? \"#$e[fragment]\" : '');\n    }\n\n\n}\n", "<?php must_have_access(); ?>\n\n<?php\n$from_live_edit = false;\nif (isset($params[\"live_edit\"]) and $params[\"live_edit\"]) {\n    $from_live_edit = $params[\"live_edit\"];\n}\n?>\n\n<?php if (isset($params['backend'])): ?>\n    <module type=\"admin/modules/info\"/>\n<?php endif; ?>\n\n<script>\n    function editCoupon(coupon_id = false) {\n        var data = {};\n        data.coupon_id = coupon_id;\n        editModal = mw.tools.open_module_modal('shop/coupons/edit_coupon', data, {overlay: true, skin: 'simple', title: '<?php _ejs(\"Coupon Code\"); ?>'})\n    }\n\n    function deleteCoupon(coupon_id) {\n        var confirmUser = confirm('<?php _ejs('Are you sure to delete this coupon permanently?'); ?>');\n        if (confirmUser == true) {\n            $.ajax({\n                url: '<?php print api_url('coupon_delete');?>',\n                data: 'coupon_id=' + coupon_id,\n                type: 'POST',\n                dataType: 'json',\n                success: function (response) {\n                    if (typeof(reload_coupon_after_save) != 'undefined') {\n                        reload_coupon_after_save();\n                    }\n                }\n            });\n        }\n    }\n\n    function reload_coupon_after_save() {\n        //mw.reload_module_parent('#<?php //print $params['id'] ?>//');\n        //mw.reload_module_everywhere('shop/coupons/admin');\n        //mw.reload_module_everywhere('shop/coupons/edit_coupons');\n        //window.parent.$(window.parent.document).trigger('shop.coupons.update');\n        //if (typeof(editModal) != 'undefined' && editModal.modal) {\n        //    editModal.modal.remove();\n        //}\n        window.location.href = window.location.href;\n    }\n\n    $(document).ready(function () {\n        $(\".js-add-new-coupon\").click(function () {\n            editCoupon(false);\n        });\n    });\n</script>\n\n<script>\n    mw.lib.require('jqueryui');\n    mw.require(\"<?php print $config['url_to_module'];?>css/main.css\");\n</script>\n\n<?php\n$coupon_get_count = coupon_get_count();\n?>\n\n<div class=\"card\">\n    <div class=\"card-body mb-3 <?php if ($from_live_edit): ?>card-in-live-edit<?php endif; ?>\">\n        <div class=\"row\">\n\n            <div class=\"card-header d-flex align-items-center justify-content-between px-0\">\n\n                <module type=\"admin/modules/info_module_title\" for-module=\"<?php print $params['module'] ?>\"/>\n\n                <?php\n                if ($coupon_get_count > 0) {\n                ?>\n                <a href=\"javascript:;\" class=\"btn btn-primary js-add-new-coupon\"><?php _e('Add new'); ?></a>\n                <?php\n                }\n                ?>\n\n            </div>\n\n            <?php\n            if ($coupon_get_count > 0) {\n                ?>\n                <label class=\"form-check form-check-single form-switch ps-0 mb-4\" style=\"width: unset;\">\n                    <input type=\"checkbox\" name=\"enable_coupons\" class=\"mw_option_field form-check-input\" id=\"enable_coupons\" data-option-group=\"shop\" data-value-checked=\"y\" data-value-unchecked=\"n\" <?php if (get_option('enable_coupons', 'shop') == 1): ?>checked<?php endif; ?> />\n                    &nbsp; <?php _e('Enable'); ?>\n                </label>\n            <?php\n            }\n            ?>\n\n                <?php if ($from_live_edit): ?>\n                    <?php include 'admin_live_edit.php'; ?>\n                <?php else: ?>\n\n\n                <?php\n                    if ($coupon_get_count > 0) {\n                ?>\n                <nav class=\"nav nav-pills nav-justified btn-group btn-group-toggle btn-hover-style-3\">\n                    <a class=\"btn justify-content-center active\" data-bs-toggle=\"tab\" href=\"#list-coupons\"><?php _e('List coupons'); ?></a>\n                    <a class=\"btn justify-content-center\" data-bs-toggle=\"tab\" href=\"#list-log-coupons\"> <?php _e('Used coupons'); ?></a>\n                </nav>\n                <div class=\"tab-content py-3\">\n                    <div class=\"tab-pane fade show active\" id=\"list-coupons\">\n                        <!-- Settings Content -->\n                        <div class=\"module-coupons-settings\">\n                            <script type=\"text/javascript\">\n                                $(document).ready(function () {\n                                    mw.options.form('.<?php print $config['module_class'] ?>', function () {\n                                        mw.notification.success(\"<?php _ejs(\"Saved\"); ?>.\");\n                                    });\n                                });\n                            </script>\n                            <module type=\"shop/coupons/edit_coupons\"/>\n                        </div>\n                        <!-- Settings Content - End -->\n                    </div>\n\n                    <div class=\"tab-pane fade\" id=\"list-log-coupons\">\n                        <module type=\"shop/coupons/log\"/>\n                    </div>\n\n                </div>\n                    <?php\n                    } else {\n                        include 'no-coupons.php';\n                    }\n                ?>\n\n                <?php endif; ?>\n\n        </div>\n    </div>\n\n</div>\n", "<?php\n/**\n * Microweber Coupon Module\n * Developed by: Bozhidar Slaveykov\n *\n * @category   Modules\n * @package    Functions\n * @author     Bozhidar Slaveykov <selfworksbg@gmail.com>\n * @copyright  2018 Microweber\n */\ninclude __DIR__ . DS . 'src/CouponClass.php';\n\n//autoload_add_namespace(__DIR__ . '/src/', 'MicroweberPackages\\\\Modules\\\\Shop\\\\Coupons\\\\');\n\nfunction coupon_apply($params = array())\n{\n    $json = array();\n    $ok = false;\n    $errorMessage = '';\n\n    $coupon_code = $params['coupon_code'];\n    $coupon_code = xss_clean($coupon_code);\n\n    $coupon = coupon_get_by_code($coupon_code);\n    if (empty($coupon)) {\n        $json['error_message'] = _e('The coupon code is not valid.', true);\n        return $json;\n    }\n\n    $customer_ip = user_ip();\n\n//    $checkout = new MicroweberPackages\\Checkout\\CheckoutManager();\n//    $getCart = $checkout->app->shop_manager->get_cart(array(\n//        'session_id' => $checkout->app->user_manager->session_id()\n//\n//    ));\n\n    $getCart = false;\n    $coupon['total_amount'] = floatval($coupon['total_amount']);\n    $cartTotal = floatval( \\DB::table('cart')->where('session_id', app()->user_manager->session_id())->sum('price'));\n    $getCartItems =   \\DB::table('cart')->where('session_id', app()->user_manager->session_id())->get();\n\n    if($getCartItems){\n        $getCart = $getCartItems->toArray();\n    }\n\n    // Check rules\n     if ($coupon and isset($coupon['uses_per_customer']) and $coupon['uses_per_customer'] > 0) {\n        $getLog = coupon_log_get_by_code_and_customer_ip($coupon_code, $customer_ip);\n\n        if (is_array($getLog) and $getLog['uses_count'] !== false && $getLog['uses_count'] >= $coupon['uses_per_customer']) {\n            $errorMessage .= _e('The coupon cannot be applied cause maximum uses exceeded.', true) . \"<br />\";\n        }\n    }\n\n    if ($coupon['uses_per_coupon'] > 0) {\n        $getLogs = coupon_logs_get_by_code($coupon_code);\n\n        if (count($getLogs) >= $coupon['uses_per_coupon']) {\n            $errorMessage .= _e('The coupon code is expired', true) . '.<br />';\n        }\n    }\n\n    if ($coupon and isset($coupon['total_amount']) and  $cartTotal < $coupon['total_amount']) {\n        $errorMessage .= _e('The coupon can\\'t be applied because the minimum total amount is ', true) . currency_format($coupon['total_amount']) . \"<br />\";\n    }\n\n    if (!is_array($getCart)) {\n        $errorMessage .= _e('The coupon can\\'t be applied. The shopping cart is empty.', true);\n    }\n\n    if (empty($errorMessage)) {\n        $ok = true;\n    }\n\n    if(isset( $params['coupon_check_if_valid'])){\n       return $ok;\n    }\n\n\n    if ($ok) {\n\n        mw()->user_manager->session_set('coupon_code', $coupon['coupon_code']);\n        mw()->user_manager->session_set('coupon_id', $coupon['id']);\n        mw()->user_manager->session_set('discount_value', $coupon['discount_value']);\n        mw()->user_manager->session_set('discount_type', $coupon['discount_type']);\n\n        mw()->user_manager->session_set('applied_coupon_data', $coupon);\n\n        $json['success_message'] = _e('Coupon code applied.', true);\n        $json['success_apply'] = true;\n    } else {\n\n        coupons_delete_session();\n\n        $json['error_message'] = $errorMessage;\n    }\n\n    return $json;\n}\n\nfunction coupons_save_coupon($couponData = array())\n{\n    $json = array();\n    $ok = false;\n    $errorMessage = '';\n    $table = 'cart_coupons';\n\n    $couponData = xss_clean($couponData);\n\n    if (isset($couponData['is_active']) && $couponData['is_active'] == 'on') {\n        $couponData['is_active'] = 1;\n    } else {\n        $couponData['is_active'] = 0;\n    }\n\n    // check if coupon code exists\n    $check = coupon_get_by_code($couponData['coupon_code']);\n    if (!empty($check)) {\n        if ($check['id'] != $couponData['id']) {\n            $errorMessage .= _e('This coupon code already exists. Please, try with another', true) . '.<br />';\n        }\n    }\n\n    if (empty(trim($couponData['coupon_code']))) {\n        $errorMessage .= _e('Coupon code is empty', true) . '.<br />';\n    }\n\n    if (empty(trim($couponData['coupon_name']))) {\n        $errorMessage .= _e('Coupon name is empty', true) . '.<br />';\n    }\n\n    if (!is_numeric($couponData['uses_per_coupon'])) {\n        $errorMessage .= _e('Uses per coupon must be number', true) . '.<br />';\n    }\n\n    if (!is_numeric($couponData['uses_per_customer'])) {\n        $errorMessage .= _e('Uses per customer must be number', true) . '.<br />';\n    }\n\n    if (!is_numeric($couponData['discount_value'])) {\n        $errorMessage .= _e('Discount value must be number', true) . '.<br />';\n    }\n\n    if (!is_numeric($couponData['total_amount'])) {\n        $errorMessage .= _e('Total amount must be number', true) . '.<br />';\n    }\n\n    if (empty($errorMessage)) {\n        $ok = true;\n    }\n\n    if ($ok) {\n        $couponId = db_save($table, $couponData);\n        $json['coupon_id'] = $couponId;\n        $json['success_edit'] = true;\n    } else {\n        $json['error_message'] = $errorMessage;\n    }\n\n\n    if ($ok) {\n        $count = coupon_get_count();\n        if ($count == 1) {\n            save_option('enable_coupons', 1, 'shop');\n        }\n    }\n\n    return $json;\n}\n\n\nfunction coupon_log_customer($coupon_code, $customer_email, $customer_ip)\n{\n    $coupon = coupon_get_by_code($coupon_code);\n    if (empty($coupon)) {\n        return false;\n    }\n\n    $checkLog = coupon_log_get_by_code_and_customer_email_and_ip($coupon_code, $customer_email, $customer_ip);\n\n    $couponLogData = array();\n    $table = 'cart_coupon_logs';\n\n    if (!empty($checkLog)) {\n        $couponLogData['id'] = $checkLog['id'];\n        $couponLogData['uses_count'] = $checkLog['uses_count'] + 1;\n    } else {\n        $couponLogData['uses_count'] = 1;\n    }\n\n    $couponLogData['coupon_id'] = $coupon['id'];\n    $couponLogData['coupon_code'] = $coupon_code;\n    $couponLogData['customer_email'] = $customer_email;\n    $couponLogData['customer_ip'] = $customer_ip;\n    $couponLogData['use_date'] = date(\"Y-m-d H:i:s\");\n\n    $couponLogId = db_save($table, $couponLogData);\n}\n\n\nfunction coupon_log_get_by_code_and_customer_email_and_ip($coupon_code, $customer_email, $customer_ip)\n{\n    $table = \"cart_coupon_logs\";\n\n    return db_get($table, array(\n        'coupon_code' => $coupon_code,\n        'customer_email' => $customer_email,\n        'customer_ip' => $customer_ip,\n        'single' => true,\n        'no_cache' => true\n    ));\n}\n\nfunction coupon_log_get_by_code_and_customer_ip($coupon_code, $customer_ip)\n{\n    $table = \"cart_coupon_logs\";\n\n    return db_get($table, array(\n        'coupon_code' => $coupon_code,\n        'customer_ip' => $customer_ip,\n        'single' => true,\n        'no_cache' => true\n    ));\n}\n\nfunction coupon_logs_get_by_code($coupon_code)\n{\n    $table = \"cart_coupon_logs\";\n\n    return DB::table($table)->select('*')\n        ->where('coupon_code', $coupon_code)\n        ->get()\n        ->toArray();\n}\n\n\nfunction coupon_get_count()\n{\n    $table = 'cart_coupons';\n    $coupons = DB::table($table)->select('*')\n        ->count();\n\n    return $coupons;\n}\n\nfunction coupon_get_all()\n{\n    $table = 'cart_coupons';\n    $coupons = DB::table($table)->select('*')\n        ->get()\n        ->toArray();\n\n    $readyCoupons = array();\n    foreach ($coupons as $coupon) {\n        $readyCoupons[] = get_object_vars($coupon);\n    }\n\n    return $readyCoupons;\n}\n\n\nfunction coupon_logs()\n{\n    $table = 'cart_coupon_logs';\n    $coupons = DB::table($table)->select('*')\n        ->get()\n        ->toArray();\n\n    $readyCoupons = array();\n    foreach ($coupons as $coupon) {\n        $readyCoupons[] = get_object_vars($coupon);\n    }\n\n    return $readyCoupons;\n}\n\nfunction coupon_get_by_id($coupon_id)\n{\n    $table = \"cart_coupons\";\n\n    return db_get($table, array(\n        'id' => $coupon_id,\n        'single' => true,\n        'no_cache' => true\n    ));\n}\n\nfunction coupon_get_by_code($coupon_code)\n{\n    $table = \"cart_coupons\";\n\n    $get = db_get($table, array(\n        'is_active' => 1,\n        'coupon_code' => $coupon_code,\n        'single' => true,\n        'no_cache' => true\n    ));\n\n    return $get;\n}\n\nfunction coupon_delete($data)\n{\n    if (!is_admin())\n        return;\n\n    $table = \"cart_coupons\";\n\n    $couponId = (int) $data['coupon_id'];\n    if ($couponId == 0) {\n        return array(\n            'status' => 'failed'\n        );\n    }\n\n    $delete = db_delete($table, $couponId);\n\n    if ($delete) {\n        return array(\n            'status' => 'success'\n        );\n    } else {\n        return array(\n            'status' => 'failed'\n        );\n    }\n}\n\nfunction coupons_delete_session()\n{\n    mw()->user_manager->session_del('coupon_code');\n    mw()->user_manager->session_del('coupon_id');\n    mw()->user_manager->session_del('discount_value');\n    mw()->user_manager->session_del('discount_type');\n    mw()->user_manager->session_del('applied_coupon_data');\n}\n\n\nevent_bind('mw.admin.shop.settings.menu', function ($data) {\n    print '<div class=\"card-header col-12 col-md-6 col-xxl-4 p-0\">\n                <a href=\"?group=shop/coupons/admin\" class=\"d-flex settings-holder-wrapper\">\n                    <div class=\"icon-holder\"><i class=\"mdi mdi-scissors-cutting fs-1\"></i></div>\n                    <div class=\"card-title info-holder\">\n                        <div class=\"settings-info-holder-title\">' . _e('Coupons', true) . '</div>\n                        <small class=\"text-muted\">' . _e('Creating and managing coupon codes', true) . '</small>\n                    </div>\n                </a>\n            </div>';\n});\n\nevent_bind('mw.admin.shop.settings.coupons', function ($data) {\n    print '<module type=\"shop/coupons\" view=\"admin_block\" />';\n});\n"], "fixing_code": ["<?php\n\nnamespace MicroweberPackages\\Checkout;\n\nuse Carbon\\Carbon;\nuse Illuminate\\Encryption\\MissingAppKeyException;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Notifications\\AnonymousNotifiable;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Notification;\n\nuse MicroweberPackages\\Checkout\\Http\\Controllers\\CheckoutController;\n\n//use MicroweberPackages\\Invoice\\Address;\n//use MicroweberPackages\\Invoice\\Invoice;\nuse MicroweberPackages\\Order\\Events\\OrderWasPaid;\nuse MicroweberPackages\\Order\\Models\\Order;\nuse MicroweberPackages\\Order\\Notifications\\NewOrder;\nuse MicroweberPackages\\Utils\\Mail\\MailSender;\nuse Twig\\Environment;\nuse Twig\\Loader\\ArrayLoader;\n\nclass CheckoutManager\n{\n    /** @var \\MicroweberPackages\\App\\LaravelApplication */\n    public $app;\n\n    public $table = 'cart';\n    public $tables = array();\n\n    public function __construct($app = null)\n    {\n        if (is_object($app)) {\n            $this->app = $app;\n        } else {\n            $this->app = mw();\n        }\n\n        $tables['cart'] = 'cart';\n\n        $tables['cart_orders'] = 'cart_orders';\n\n        $tables['cart_shipping'] = 'cart_shipping';\n\n        /*$tables['cart_taxes'] = 'cart_taxes';*/\n\n        $this->tables = $tables;\n    }\n\n    public function checkout($data)\n    {\n        $exec_return = false;\n        $sid = $this->app->user_manager->session_id();\n        $sess_order_id = $this->app->user_manager->session_get('order_id');\n        $cart = array();\n        $cart_table = 'cart';\n        $table_orders = 'cart_orders';\n        $cart['session_id'] = $sid;\n        $cart['order_completed'] = 0;\n        $cart['for_checkout'] = true;\n        $cart['limit'] = 1;\n        $mw_process_payment = true;\n        $mw_process_payment_success = false;\n        $mw_process_payment_failed = false;\n        if (isset($_REQUEST['mw_payment_success']) or isset($_REQUEST['mw_payment_failure'])) {\n\n            $update_order = $update_order_orig = $this->app->order_manager->get_by_id($sess_order_id);\n            if (isset($update_order['payment_gw']) and isset($update_order['id'])) {\n                $gw_return = normalize_path(modules_path() . $update_order['payment_gw'] . DS . 'return.php', false);\n                if (is_file($gw_return)) {\n                    include $gw_return;\n\n                    if ($update_order != $update_order_orig) {\n\n                        if (isset($update_order['is_paid'])) {\n                            if (intval($update_order['is_paid']) == 1) {\n                                $_REQUEST['mw_payment_success'] = true;\n                                $_REQUEST['mw_payment_failure'] = null;\n                            } else {\n                                $_REQUEST['mw_payment_success'] = null;\n                                $_REQUEST['mw_payment_failure'] = true;\n                                //    mw()->cart_manager->recover_cart(session()->getId(), $update_order['id']);\n\n                            }\n                        }\n\n                        $should_mark_as_paid = false;\n\n\n                        $this->_verify_request_params($update_order);\n\n\n                        if (!isset($update_order_orig['is_paid']) or (isset($update_order_orig['is_paid']) and intval($update_order_orig['is_paid']) == 0)) {\n                            if (isset($update_order['is_paid']) and intval($update_order['is_paid']) == 1) {\n                                $should_mark_as_paid = true;\n                                unset($update_order['is_paid']);\n                            }\n                        }\n\n                        $this->app->order_manager->save($update_order);\n\n\n                        if ($should_mark_as_paid) {\n                            $this->app->checkout_manager->mark_order_as_paid($update_order['id']);\n                        }\n\n\n                        if (isset($update_order['id'])) {\n                            $this->after_checkout($update_order['id']);\n                        }\n\n\n                    }\n                }\n            }\n\n            if (isset($_REQUEST['mw_payment_success'])) {\n                $mw_process_payment = false;\n                $mw_process_payment_success = true;\n                $exec_return = true;\n            } elseif (isset($_REQUEST['mw_payment_failure'])) {\n\n                if (isset($_REQUEST['recart']) and $_REQUEST['recart'] != false and isset($_REQUEST['order_id'])) {\n\n                    mw()->cart_manager->recover_cart($_REQUEST['recart'], $_REQUEST['order_id']);\n                }\n\n                $mw_process_payment_failed = true;\n                $exec_return = true;\n            }\n        }\n\n        $cart_table_real = $this->app->database_manager->real_table_name($cart_table);\n        $order_table_real = $this->app->database_manager->real_table_name($table_orders);\n\n        if ($exec_return == true) {\n\n            $return_url = $this->app->user_manager->session_get('checkout_return_to_url');\n            if (isset($_REQUEST['return_to']) and $_REQUEST['return_to'] != false) {\n                $return_url = urldecode($_REQUEST['return_to']);\n            }\n            if ($return_url) {\n                $return_to = $return_url;\n                $append = '?';\n                if (strstr($return_to, '?')) {\n                    $append = '&';\n                }\n                if ($mw_process_payment_success == true) {\n                    $return_to = $return_to . $append . 'mw_payment_success=1';\n                } elseif ($mw_process_payment_failed == true) {\n                    $return_to = $return_to . $append . 'mw_payment_failure=1';\n                }\n\n                return $this->app->url_manager->redirect($return_to);\n            } else {\n\n                if(isset($update_order) and isset($update_order['id'])){\n                    if ($mw_process_payment_success == true) {\n                        return redirect(route('checkout.finish', $update_order['id']))->with('success',_e('Your payment is complete',true));\n                    } elseif ($mw_process_payment_failed == true) {\n                        return redirect(route('checkout.finish', $update_order['id']))->with('success',_e('Your payment was not complete',true));\n\n                    } else {\n                        return redirect('/');\n                    }\n                }\n\n\n            }\n        }\n\n        $additional_fields = false;\n        if (isset($data['for']) and isset($data['for_id'])) {\n            $additional_fields = $this->app->fields_manager->get([\n                'rel_type' => $data['for'],\n                'rel_id' => $data['for_id'],\n                'return_full' => true,\n            ]);\n        }\n\n        $seach_address_keys = array('country', 'city', 'address', 'state', 'zip');\n        $addr_found_from_search_in_post = false;\n\n        if (isset($data) and is_array($data)) {\n            foreach ($data as $k => $v) {\n                if (is_array($v)) {\n                    foreach ($seach_address_keys as $item) {\n                        $case1 = ucfirst($item);\n                        if (!isset($data[$item]) and (isset($v[$item]) or isset($v[$case1]))) {\n                            $data[$item] = $v[$item];\n                            if ($addr_found_from_search_in_post == false) {\n                                unset($data[$k]);\n                            }\n                            $addr_found_from_search_in_post = 1;\n                        }\n                    }\n                }\n            }\n        }\n        $save_custom_fields_for_order = array();\n        if (is_array($additional_fields) and !empty($additional_fields)) {\n            foreach ($additional_fields as $cf) {\n                if (isset($data) and is_array($data)) {\n                    foreach ($data as $k => $item) {\n                        $key1 = str_replace('_', ' ', $cf['name']);\n                        $key2 = str_replace('_', ' ', $k);\n                        if ($key1 == $key2) {\n                            $save_custom_fields_for_order[$key1] = $this->app->format->clean_html($item);\n                        }\n                    }\n                }\n            }\n        }\n\n   /*\n    *  OLD VALIDATION ON MODAL\n    *      $validator = app()->make(CheckoutController::class);\n\n        if (!empty($data)) {\n            $request = new Request();\n            $request->merge($data);\n            $is_valid = $validator->validate($request);\n        } else {\n            $is_valid['errors'] = 'Data not entered.';\n        }\n\n        if (is_object($is_valid)) {\n            return $is_valid;\n        }\n\n        if (isset($is_valid['errors'])) {\n            return $is_valid;\n        }*/\n\n        $checkout_errors = array();\n        $check_cart = $this->app->shop_manager->get_cart($cart);\n\n        if (!is_array($check_cart)) {\n            $checkout_errors['cart_empty'] = 'Your cart is empty';\n        } else {\n\n            if (!is_admin()) {\n                $shop_require_terms = $this->app->option_manager->get('shop_require_terms', 'website');\n                if ($shop_require_terms) {\n                    $user_id_or_email = $this->app->user_manager->id();\n                    if (!$user_id_or_email) {\n                        if (isset($data['email'])) {\n                            $user_id_or_email = $data['email'];\n                        }\n                    }\n\n                    if (!$user_id_or_email) {\n                        $checkout_errors['cart_needs_email'] = _e('You must provide email address', true);\n                    } else {\n                        $terms_and_conditions_name = 'terms_shop';\n\n                        $check_term = $this->app->user_manager->terms_check($terms_and_conditions_name, $user_id_or_email);\n                        if (!$check_term) {\n                            if (isset($data['terms']) and $data['terms']) {\n                                $this->app->user_manager->terms_accept($terms_and_conditions_name, $user_id_or_email);\n                            } else {\n                                return array(\n                                    'error' => _e('You must agree to terms and conditions', true),\n                                    'form_data_required' => 'terms',\n                                    'form_data_module' => 'users/terms'\n                                );\n\n                            }\n                        }\n                    }\n                }\n            }\n\n\n            if (!isset($data['payment_gw']) and $mw_process_payment == true) {\n                $data['payment_gw'] = 'none';\n            } else {\n                if ($mw_process_payment == true) {\n                  //  $gw_check = $this->payment_options('payment_gw_' . $data['payment_gw']);\n                    $gw_check = app()->payment_manager->hasPaymentProvider($data['payment_gw']);\n                    if ($gw_check) {\n                        $gateway = app()->payment_manager->getPaymentProviderModule($data['payment_gw']);\n                    } else {\n                        $checkout_errors['payment_gw'] = 'No such payment gateway is activated';\n                    }\n\n//                    if (isset($gw_check[0]) && is_array($gw_check[0])) {\n//                        $gateway = $gw_check[0];\n//                    } else {\n//                        $checkout_errors['payment_gw'] = 'No such payment gateway is activated';\n//                    }\n                }\n            }\n\n            $shipping_country = false;\n            $shipping_cost_max = false;\n            $shipping_cost = false;\n            $shipping_cost_above = false;\n\n            $discount_value = false;\n            $discount_type = false;\n\n            $coupon_id = false;\n            $coupon_code = false;\n            $shipping_cost = 0;\n\n            /*  if (($this->app->user_manager->session_get('shipping_country'))) {\n                  $shipping_country = $this->app->user_manager->session_get('shipping_country');\n              }\n              if (($this->app->user_manager->session_get('shipping_cost_max'))) {\n                  $shipping_cost_max = $this->app->user_manager->session_get('shipping_cost_max');\n              }\n              if (($this->app->user_manager->session_get('shipping_cost_above'))) {\n                  $shipping_cost_above = $this->app->user_manager->session_get('shipping_cost_above');\n              }*/\n\n\n//\n//            if ($this->app->user_manager->session_get('shipping_cost')) {\n//                $shipping_cost = $this->app->user_manager->session_get('shipping_cost');\n//            }\n//\n////\n////\n////\n////            $shipping_gw_from_session = $this->app->user_manager->session_get('shipping_provider');\n////            if(!isset($data['shipping_gw']) and $shipping_gw_from_session){\n////                $data['shipping_gw'] = $shipping_gw_from_session;\n////            }\n////            if(isset($data['shipping_gw']) and $data['shipping_gw']){\n////                try {\n////                    $shipping_cost = $this->app->shipping_manager->driver($data['shipping_gw'])->cost();\n////\n////                } catch (\\InvalidArgumentException $e) {\n////                    $shipping_cost = 0;\n////                    unset($data['shipping_gw']);\n////                }\n////             }\n\n            $shipping_cost = $this->getShippingCost($data);\n\n            if (($this->app->user_manager->session_get('discount_value'))) {\n                $discount_value = $this->app->user_manager->session_get('discount_value');\n            }\n            if (($this->app->user_manager->session_get('discount_type'))) {\n                $discount_type = $this->app->user_manager->session_get('discount_type');\n            }\n            if (($this->app->user_manager->session_get('coupon_id'))) {\n                $coupon_id = $this->app->user_manager->session_get('coupon_id');\n            }\n            if (($this->app->user_manager->session_get('coupon_code'))) {\n                $coupon_code = $this->app->user_manager->session_get('coupon_code');\n            }\n\n\n            //post any of those on the form\n            $flds_from_data = array('first_name', 'last_name', 'email', 'country', 'city', 'state', 'zip', 'address', 'address2', 'payment_email', 'payment_name', 'payment_country', 'payment_address', 'payment_city', 'payment_state', 'payment_zip', 'phone', 'promo_code', 'payment_gw', 'other_info');\n\n            if (!isset($data['email']) or $data['email'] == '') {\n                $data['email'] = user_name(user_id(), 'email');\n            }\n\n            if (get_option('shop_require_email', 'website') == 1) {\n                if (!isset($data['email']) or $data['email'] == '') {\n                    $checkout_errors['email'] = 'Email is required';\n                }\n            }\n\n            if (!isset($data['first_name']) or $data['first_name'] == '') {\n                $data['first_name'] = user_name(user_id(), 'first');\n            }\n\n            if (get_option('shop_require_first_name', 'website') == 1) {\n                if (!isset($data['first_name']) or $data['first_name'] == '') {\n                    $checkout_errors['first_name'] = 'First name is required';\n                }\n            }\n\n            if (get_option('shop_require_last_name', 'website') == 1) {\n                if (!isset($data['last_name']) or $data['last_name'] == '') {\n                    // $checkout_errors['last_name'] = 'Last name is required';\n                    $data['last_name'] = user_name(user_id(), 'last');\n                }\n            }\n\n            if (isset($data['payment_gw']) and $data['payment_gw'] != '') {\n                $data['payment_gw'] = sanitize_path($data['payment_gw']);\n            }\n\n\n            $custom_order_id = $this->app->option_manager->get('custom_order_id', 'shop');\n            $posted_fields = array();\n            $place_order = array();\n            $place_order['id'] = false;\n\n            $return_url_after = '';\n            $return_to_ref = false;\n            $set_return_url_for_order_finish = false;\n\n\n            $place_order['session_id'] = $sid;\n            $place_order['order_completed'] = 0;\n            $items_count = 0;\n\n            foreach ($flds_from_data as $value) {\n                if (isset($data[$value]) and ($data[$value]) != false) {\n                    $place_order[$value] = $data[$value];\n                    $posted_fields[$value] = $data[$value];\n                }\n            }\n            $canUseCoupons = $this->app->option_manager->get('enable_coupons', 'shop') == 1;\n\n            // Discount details save\n            if ($canUseCoupons and $coupon_code) {\n                $place_order['promo_code'] = $coupon_code;\n                $place_order['coupon_id'] = $coupon_id;\n                $place_order['discount_type'] = $discount_type;\n                $place_order['discount_value'] = $discount_value;\n\n\n                if (!$this->app->cart_manager->couponCodeCheckIfValid($coupon_code)) {\n                    //check if coupon is valid\n                    if(function_exists('coupons_delete_session')){\n                        coupons_delete_session();\n                    }\n\n                    $place_order['promo_code'] = '';\n                    $place_order['coupon_id'] ='';\n                    $place_order['discount_type'] = '';\n                    $place_order['discount_value'] ='';\n                }\n            }\n\n\n\n\n\n            $amount = $this->app->shop_manager->cart_total();\n            $tax = $this->app->cart_manager->get_tax();\n\n\n            if (!empty($checkout_errors)) {\n                return array('error' => $checkout_errors);\n            }\n\n\n            if ($amount and is_numeric($amount) and is_float($amount) ) {\n                $amount = floatval($amount);\n                $amount = number_format($amount, 2, \".\", \"\");;\n            }\n\n            $place_order['amount'] = $amount;\n            $place_order['allow_html'] = true;\n            $place_order['currency'] = $this->app->option_manager->get('currency', 'payments');\n            if (!$place_order['currency']) {\n                $place_order['currency'] = 'USD';\n            }\n\n            if (isset($data['shipping_gw'])) {\n                $place_order['shipping_service'] = $data['shipping_gw'];\n            }\n            $place_order['shipping'] = $shipping_cost;\n            if ($tax != 0) {\n                $place_order['taxes_amount'] = $tax;\n            }\n\n            $items_count = $this->app->shop_manager->cart_sum(false);\n            $place_order['items_count'] = $items_count;\n\n            $cart_checksum = md5($sid . serialize($check_cart) . uniqid(time()));\n\n            $place_order['payment_verify_token'] = $cart_checksum;\n\n            if (isset($save_custom_fields_for_order) and !empty($save_custom_fields_for_order)) {\n                $place_order['custom_fields_data'] = $this->app->format->array_to_base64($save_custom_fields_for_order);\n            }\n\n            if (!isset($place_order['shipping']) or $place_order['shipping'] == false) {\n                $place_order['shipping'] = 0;\n            }\n\n            $temp_order = $this->app->database_manager->save($table_orders, $place_order);\n            if ($temp_order != false) {\n                $place_order['id'] = $temp_order;\n            } else {\n                $place_order['id'] = 0;\n            }\n\n            if ($custom_order_id != false) {\n                foreach ($place_order as $key => $value) {\n                    $custom_order_id = str_ireplace('{' . $key . '}', $value, $custom_order_id);\n                }\n\n                $custom_order_id = str_ireplace('{YYYYMMDD}', date('Ymd'), $custom_order_id);\n                $custom_order_id = str_ireplace('{date}', date('Y-m-d'), $custom_order_id);\n            }\n\n            if ($custom_order_id != false) {\n                $place_order['item_name'] = 'Order id:' . ' ' . $custom_order_id;\n                $place_order['order_id'] = $custom_order_id;\n            } else {\n                $place_order['item_name'] = 'Order id:' . ' ' . $place_order['id'];\n            }\n\n\n\n\n            // convert currency to payment provider currency\n            $currencies_list_paypal = app()->shop_manager->currency_get_for_paypal();\n            $currencyCode = strtoupper($place_order['currency']);\n            $amount = $place_order['amount'];\n\n            if (!isset($place_order['payment_amount'])) {\n                $place_order['payment_amount'] = $amount;\n            }\n            $place_order['payment_shipping'] = $place_order['shipping'];\n\n\n            $payment_currency = get_option('payment_currency', 'payments');\n            $payment_currency_rate = get_option('payment_currency_rate', 'payments');\n\n            if (!isset($place_order['payment_currency'])) {\n                $place_order['payment_currency'] = $place_order['currency'];\n            }\n\n            if ($payment_currency and $payment_currency != $currencyCode) {\n\n                if (!in_array(strtoupper($place_order['currency']), $currencies_list_paypal)) {\n\n                    $currencyCode = $payment_currency;\n\n\n                    if ($payment_currency_rate != false) {\n                        $payment_currency_rate = str_replace(',', '.', $payment_currency_rate);\n                        $payment_currency_rate = floatval($payment_currency_rate);\n\n                    }\n                    if ($payment_currency_rate != 0.00) {\n                        $amount = str_replace(',', '', $amount);\n                        $amount = floatval($amount);\n                        $amount = $amount * $payment_currency_rate;\n                        $place_order['payment_amount'] = $amount;\n                    }\n\n\n                    if ($place_order['payment_shipping']) {\n                        $place_order['payment_shipping'] = $place_order['payment_shipping'] * $payment_currency_rate;\n\n                    }\n\n\n                }\n            }\n\n\n            $place_order['payment_currency'] = $currencyCode;\n\n\n            // end of convert for curency\n\n\n            if ($mw_process_payment == true) {\n                $shop_dir = module_dir('shop');\n                $shop_dir = $shop_dir . DS . 'payments' . DS . 'gateways' . DS;\n\n                if ($data['payment_gw'] != 'none') {\n                    $place_order['posted_fields']  = $posted_fields;\n\n                    $encrypter = new \\Illuminate\\Encryption\\Encrypter(md5(\\Illuminate\\Support\\Facades\\Config::get('app.key') . $place_order['payment_verify_token']), \\Illuminate\\Support\\Facades\\Config::get('app.cipher'));\n\n                    $vkey_data = array();\n\n                    $vkey_data['payment_verify_token'] = $place_order['payment_verify_token'];\n\n                    $enc_key_hash = md5(json_encode($vkey_data));\n                    $enc_key_hash = $encrypter->encrypt($enc_key_hash);\n\n                    $mw_return_url = $this->app->url_manager->api_link('checkout') . '?mw_payment_success=1&order_id=' . $place_order['id'] . '&payment_gw=' . $place_order['payment_gw'] . '&payment_verify_token=' . $place_order['payment_verify_token'] . '&_vkey_url=' . $enc_key_hash . $return_url_after;\n                    $vkey_data_temp = $vkey_data;\n\n\n                    $mw_cancel_url = $this->app->url_manager->api_link('checkout') . '?mw_payment_failure=1&order_id=' . $place_order['id'] . '&payment_gw=' . $place_order['payment_gw'] . '&_vkey_url=' . $enc_key_hash . '&recart=' . $sid . $return_url_after;\n                    $vkey_data_temp = $vkey_data;\n\n\n                    $mw_ipn_url = $this->app->url_manager->api_link('checkout_ipn') . '?payment_gw=' . $place_order['payment_gw'] . '&order_id=' . $place_order['id'] . '&payment_verify_token=' . $place_order['payment_verify_token'] . '&_vkey_url=' . $enc_key_hash . $return_url_after;\n                    $vkey_data_temp = $vkey_data;\n\n\n                    $mw_payment_fields = array();\n                    $mw_payment_fields['enc_key_hash']  = $enc_key_hash;\n                    $mw_payment_fields['mw_return_url']  = $mw_return_url;\n                    $mw_payment_fields['mw_cancel_url']  = $mw_cancel_url;\n                    $mw_payment_fields['mw_ipn_url']  = $mw_ipn_url;\n\n                    $place_order['mw_payment_fields']  = $mw_payment_fields;\n                    $place_order['posted_data']  = $data;\n\n                    $paymentDriver = app()->payment_manager->driver($data['payment_gw']);\n                    $skipLegacy = false;\n                    if(method_exists($paymentDriver, 'process')){\n                        $skipLegacy = true;\n                        $place_order =  $paymentDriver->process($place_order);\n                    }\n\n\n\n                    if ($skipLegacy == false) {\n                        $place_order['payment_gw'] = $data['payment_gw'];\n                        $gw_process = modules_path() . $data['payment_gw'] . '_process.php';\n                        if (!is_file($gw_process)) {\n                            $gw_process = normalize_path(modules_path() . $data['payment_gw'] . DS . 'process.php', false);\n                        }\n\n\n                        if (is_file($gw_process)) {\n                            require_once $gw_process;\n                        } else {\n                            $checkout_errors['payment_gw'] = 'Payment gateway\\'s process file not found.';\n                        }\n                    }\n\n                    if (isset($place_order['posted_fields'])) {\n                        unset($place_order['posted_fields']);\n                    }\n                    if (isset($place_order['mw_payment_fields'])) {\n                        unset($place_order['mw_payment_fields']);\n                    } if (isset($place_order['posted_data'])) {\n                        unset($place_order['posted_data']);\n                    }\n\n                } else {\n                    $place_order['order_completed'] = 1;\n                    $place_order['is_paid'] = 0;\n                    $place_order['success'] = 'Your order has been placed successfully!';\n                }\n\n\n                $place_order['order_status'] = 'new';\n\n                if (!empty($checkout_errors)) {\n                    return array('error' => $checkout_errors);\n                }\n\n                if (isset($place_order['error'])) {\n                    return array('error' => $place_order['error']);\n                }\n\n\n                /*\n                     $invoicePrefix = 'INV';\n                     $nextInvoiceNumber = Invoice::getNextInvoiceNumber($invoicePrefix);\n                     $invoiceDate = Carbon::createFromFormat('Y-m-d', date('Y-m-d'));\n                     $dueDate = Carbon::createFromFormat('Y-m-d', date('Y-m-d', strtotime('+6 days', strtotime(date('Y-m-d')))));\n\n                     $invoiceTotal = ($place_order['amount'] * 100);\n\n                     $invoice = Invoice::create([\n                         'invoice_date' => $invoiceDate,\n                         'due_date' => $dueDate,\n                         'invoice_number' => $invoicePrefix . '-' . $nextInvoiceNumber,\n                         'reference_number' => '',\n                         'customer_id' => $findCustomer->id,\n                         'company_id' => 0,\n                         'invoice_template_id' => 1,\n                         'status' => Invoice::STATUS_DRAFT,\n                         'paid_status' => Invoice::STATUS_UNPAID,\n                         'sub_total' => $invoiceTotal,\n                         'discount' =>'',\n                         'discount_type' => $place_order['discount_type'],\n                         'discount_val' => ($place_order['discount_value'] * 100),\n                         'total' => $invoiceTotal,\n                         'due_amount' => $invoiceTotal,\n                         'tax_per_item' => '',\n                         'discount_per_item' => '',\n                         'tax' => '',\n                         'notes' => '',\n                         'unique_hash' => str_random(60)\n                     ]);\n\n                     foreach ($check_cart as $cartItem) {\n                         $invoice->items()->create([\n                             'name'=>$cartItem['title'],\n                             'description'=>$cartItem['description'],\n                             'price'=>($cartItem['price'] * 100),\n                             'quantity'=>$cartItem['qty'],\n                         ]);\n                     }*/\n\n                $ord = $this->app->shop_manager->place_order($place_order);\n                $place_order['id'] = $ord;\n\n                if (isset($place_order['is_paid']) and $place_order['is_paid']) {\n                    $this->app->event_manager->trigger('mw.cart.checkout.order_paid', $place_order);\n                }\n\n\n            }\n\n            if (isset($place_order) and !empty($place_order)) {\n                if (!isset($place_order['success'])) {\n                    $place_order['success'] = 'Your order has been placed successfully!';\n                }\n                $return = $place_order;\n                if (isset($place_order['redirect'])) {\n                    $return['redirect'] = $place_order['redirect'];\n                }\n\n                return $return;\n            }\n        }\n\n        if (!empty($checkout_errors)) {\n            return array('error' => $checkout_errors);\n        }\n    }\n\n    public function getUserInfo()\n    {\n        return $this->checkout_get_user_info();\n    }\n\n\n    public function checkout_get_user_info()\n    {\n\n        $ready = [];\n        $logged_user_data = [];\n        $shipping_address_from_profile = [];\n        $logged_user_data = [];\n\n\n        $selected_country_from_session = session_get('shipping_country');\n        $checkout_session = session_get('checkout');\n        $checkout_session2 = session_get('checkout_v2');\n\n        if (!$checkout_session) {\n            $checkout_session = [];\n        }\n        if (!$checkout_session2) {\n            $checkout_session2 = [];\n        }\n        $checkout_session = array_merge($checkout_session,$checkout_session2);\n        $user_fields_from_profile = ['email', 'last_name', 'first_name', 'phone', 'username', 'middle_name'];\n        $shipping_fields_keys = ['address', 'city', 'state', 'zip', 'other_info', 'country', 'shipping_gw', 'payment_gw'];\n\n        $all_field_keys = array_merge($user_fields_from_profile, $shipping_fields_keys);\n\n\n        if (is_logged()) {\n            $shipping_address_from_profile = app()->user_manager->get_shipping_address();\n        }\n        if ($checkout_session) {\n            foreach ($all_field_keys as $field_key) {\n                if (!empty($checkout_session) and !isset($ready[$field_key])) {\n                    foreach ($checkout_session as $k => $v) {\n                        if ($field_key == $k and $v) {\n                            $ready[$k] = $v;\n                        }\n                    }\n                }\n            }\n            if (!isset($ready['country']) and $selected_country_from_session) {\n                $ready['country'] = $selected_country_from_session;\n\n            }\n        }\n\n        if ($shipping_address_from_profile) {\n            foreach ($all_field_keys as $field_key) {\n                if (!empty($shipping_address_from_profile) and !isset($ready[$field_key])) {\n                    foreach ($shipping_address_from_profile as $k => $v) {\n                        if ($field_key == $k and $v) {\n                            $ready[$k] = $v;\n                        }\n\n                    }\n                }\n            }\n        }\n\n\n        if ($shipping_address_from_profile) {\n            $logged_user_data = get_user();\n            if ($logged_user_data) {\n                foreach ($all_field_keys as $field_key) {\n                    if (!empty($logged_user_data) and !isset($ready[$field_key])) {\n                        foreach ($logged_user_data as $k => $v) {\n                            if ($field_key == $k and $v) {\n                                $ready[$k] = $v;\n                            }\n\n                        }\n                    }\n                }\n            }\n\n        }\n        return $ready;\n    }\n\n    public function payment_options($option_key = false)\n    {\n        $option_key_q = '';\n        if (is_string($option_key)) {\n            $option_key_q = \"&limit=1&option_key={$option_key}\";\n        }\n        $providers = $this->app->option_manager->get_all('group=payments' . $option_key_q);\n      //  $providers = $this->app->option_repository->getByParams('group=payments' . $option_key_q);\n\n        $payment_modules = get_modules('type=payment_gateway');\n        $str = 'payment_gw_';\n        $l = strlen($str);\n        $enabled_providers = array();\n        if (!empty($payment_modules) and !empty($providers)) {\n            foreach ($payment_modules as $payment_module) {\n                foreach ($providers as $value) {\n                    if ($value['option_value'] == 1) {\n                        if (substr($value['option_key'], 0, $l) == $str) {\n                            $title = substr($value['option_key'], $l);\n                            $string = preg_replace('/(\\w+)([A-Z])/U', '\\\\1 \\\\2', $title);\n                            $value['gw_file'] = $title;\n\n                            if (isset($payment_module['module']) and $value['gw_file'] == $payment_module['module']) {\n                                $payment_module['gw_file'] = $title;\n                                $enabled_providers[] = $payment_module;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (!empty($enabled_providers)) {\n            return $enabled_providers;\n        }\n\n        // the rest is for comaptibily and will be removed in the near future\n        $str = 'payment_gw_';\n        $l = strlen($str);\n        if (is_array($providers)) {\n            $valid = array();\n            foreach ($providers as $value) {\n                if ($value['option_value'] == 1) {\n                    if (substr($value['option_key'], 0, $l) == $str) {\n                        $title = substr($value['option_key'], $l);\n                        $string = preg_replace('/(\\w+)([A-Z])/U', '\\\\1 \\\\2', $title);\n                        $value['gw_file'] = $title;\n                        $mod_infp = $this->app->module_manager->get('ui=any&one=1&module=' . $title);\n\n                        if (!empty($mod_infp)) {\n                            $value = $mod_infp;\n                            $title = sanitize_path($title);\n\n                            $value['gw_file'] = $title;\n                            $valid[] = $value;\n                        }\n                    }\n                }\n            }\n\n            return $valid;\n        }\n    }\n\n    public function after_checkout($orderId)\n    {\n        if ($orderId == false or trim($orderId) == '') {\n            return array('error' => _e('Invalid order ID'));\n        }\n\n        $order = Order::find($orderId);\n        if (!$order) {\n            return array('error' => _e('Order not found'));\n        }\n        // $this->confirm_email_send($orderId);\n    }\n\n\n    public function mark_order_as_paid($orderId)\n    {\n\n        $order = Order::find($orderId);\n        if (!$order) {\n            return;\n        }\n\n        $update_order_event_data = $order->toArray();\n\n        if (!isset($update_order_event_data['is_paid']) or (isset($update_order_event_data['is_paid']) and intval($update_order_event_data['is_paid']) == 0)) {\n            event($event = new OrderWasPaid($order, $update_order_event_data));\n            $this->app->event_manager->trigger('mw.cart.checkout.order_paid', $update_order_event_data);\n            $this->app->shop_manager->update_quantities($orderId);\n            $order->is_paid = 1;\n            $order->save();\n        }\n\n\n    }\n\n\n    public function confirm_email_send($order_id, $to = false, $no_cache = true, $skip_enabled_check = false)\n    {\n        $ord_data = $this->app->shop_manager->get_order_by_id($order_id);\n\n        if (is_array($ord_data)) {\n\n            if ($skip_enabled_check == false) {\n                $order_email_enabled = $this->app->option_manager->get('order_email_enabled', 'orders');\n            } else {\n                $order_email_enabled = $skip_enabled_check;\n            }\n\n            $send_to_client = true;\n            $send_to_admins = true;\n            $send_to_client_option = $this->app->option_manager->get('send_email_on_new_order', 'orders');\n            if (!empty($send_to_client_option)) {\n                if ($send_to_client_option == 'admins') {\n                    $send_to_admins = true;\n                    $send_to_client = false;\n                }\n                if ($send_to_client_option == 'client') {\n                    $send_to_admins = false;\n                    $send_to_client = true;\n                }\n            }\n\n            if ($order_email_enabled) {\n\n                //  $order_email_subject = $this->app->option_manager->get('order_email_subject', 'orders');\n                // $order_email_content = $this->app->option_manager->get('order_email_content', 'orders');\n\n                $mail_template = false;\n                $mail_template_binds = $this->app->event_manager->trigger('mw.cart.confirm_email_send', $order_id);\n                if (is_array($mail_template_binds)) {\n                    foreach ($mail_template_binds as $bind) {\n                        if (is_array($bind) && isset($bind['mail_template'])) {\n                            $mail_template = $bind['mail_template'];\n                        }\n                    }\n                }\n\n                if (!$mail_template) {\n                    return;\n                }\n\n                $order_email_cc_string = $mail_template['copy_to'];\n                $order_email_subject = $mail_template['subject'];\n                $order_email_content = $mail_template['message'];\n\n                $order_email_cc = array();\n                if (!empty($order_email_cc_string) && strpos($order_email_cc_string, ',')) {\n                    $order_email_cc = explode(',', $order_email_cc_string);\n                } else {\n                    $order_email_cc[] = $order_email_cc_string;\n                }\n\n                if (empty($order_email_cc)) {\n                    $admins = get_users('is_admin=1');\n                    foreach ($admins as $admin) {\n                        if (isset($admin['email']) && !empty($admin['email']) && filter_var($admin['email'], FILTER_VALIDATE_EMAIL)) {\n                            $order_email_cc[] = $admin['email'];\n                        }\n                    }\n                }\n\n                $order_email_send_when = $this->app->option_manager->get('order_email_send_when', 'orders');\n                if ($order_email_send_when == 'order_paid' and !$skip_enabled_check) {\n                    if (isset($ord_data['is_paid']) and $ord_data['is_paid'] == false) {\n                        return;\n                    }\n                }\n\n                if ($order_email_subject == false or trim($order_email_subject) == '') {\n                    $order_email_subject = 'Thank you for your order!';\n                }\n                if ($to == false) {\n                    $to = $ord_data['email'];\n                }\n                if ($order_email_content != false and trim($order_email_subject) != '') {\n                    $cart_items = array();\n                    if (!empty($ord_data)) {\n                        $cart_items = $this->app->shop_manager->get_cart('order_id=' . $ord_data['id'] . '&no_session_id=' . $this->app->user_manager->session_id());\n\n                        $cart_items_info = array();\n                        $order_items_html = '';\n                        if (!empty($cart_items)) {\n                            foreach ($cart_items as $cart_item) {\n                                $arr = array();\n                                if (isset($cart_item['item_image']) and $cart_item['item_image']) {\n\n                                    $arr['item_image'] = $cart_item['item_image'];\n                                    $arr['item_image'] = '<img src=\"' . $arr['item_image'] . '\" width=\"100\" />';\n                                }\n                                if (isset($cart_item['link'])) {\n                                    $arr['link'] = $cart_item['link'];\n                                }\n                                if (isset($cart_item['title'])) {\n                                    $arr['title'] = $cart_item['title'];\n                                }\n                                if (isset($cart_item['custom_fields'])) {\n                                    $arr['custom_fields'] = $cart_item['custom_fields'];\n                                }\n                                $cart_items_info[] = $arr;\n                            }\n                            $order_items_html = $this->app->format->array_to_table($cart_items_info);\n\n                        }\n                        $order_email_content = str_replace('{{cart_items}}', $order_items_html, $order_email_content);\n                        $order_email_content = str_replace('{{date}}', date('F jS, Y', strtotime($ord_data['created_at'])), $order_email_content);\n                        foreach ($ord_data as $key => $value) {\n                            if (!is_array($value) and is_string($key)) {\n                                if (strtolower($key) == 'amount') {\n                                    $value = number_format($value, 2);\n                                    $order_email_content = str_ireplace('{{' . $key . '}}', $value, $order_email_content);\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    if (get_option('bank_transfer_send_email_instructions', 'payments') == 'y') {\n                        $order_email_content .= _e(\"Follow payment instructions\", true);\n                        $order_email_content .= '<br />' . get_option('bank_transfer_instructions', 'payments');\n                    }\n\n                    $loader = new ArrayLoader([\n                        'checkout_mail.html' => $order_email_content,\n                    ]);\n                    $twig = new Environment($loader);\n                    $order_email_content = $twig->render(\n                        'checkout_mail.html', [\n                            'cart' => $cart_items,\n                            'order' => $ord_data,\n                            'order_id' => $ord_data['id'],\n                            'transaction_id' => $ord_data['transaction_id'],\n                            'currency' => $ord_data['currency'],\n                            'order_status' => $ord_data['order_status'],\n                            'first_name' => $ord_data['first_name'],\n                            'last_name' => $ord_data['last_name'],\n                            'email' => $ord_data['email'],\n                            'phone' => $ord_data['phone'],\n                            'address' => $ord_data['address'],\n                            'zip' => $ord_data['zip'],\n                            'state' => $ord_data['state'],\n                            'city' => $ord_data['city'],\n                            'country' => $ord_data['country']\n                        ]\n                    );\n\n                    $sender = new MailSender();\n\n                    // Send only to client\n                    if ($send_to_client && !$send_to_admins && filter_var($to, FILTER_VALIDATE_EMAIL)) {\n                        $sender->send($to, $order_email_subject, $order_email_content);\n                        // echo 'Send only to client.';\n                    }\n\n                    // Send only to admins\n                    if (!$send_to_client && $send_to_admins && is_array($order_email_cc)) {\n                        // echo 'Send only to admins.';\n                        foreach ($order_email_cc as $admin_email) {\n                            $sender->send($admin_email, $order_email_subject, $order_email_content, false, $no_cache);\n                        }\n                    }\n\n                    // Send to admins and client\n                    if ($send_to_client && $send_to_admins) {\n                        if (filter_var($to, FILTER_VALIDATE_EMAIL)) {\n                            $sender->send($to, $order_email_subject, $order_email_content);\n                            // echo 'Send to client.';\n                        }\n                        if (is_array($order_email_cc)) {\n                            // echo 'Send to admins.';\n                            foreach ($order_email_cc as $admin_email) {\n                                $sender->send($admin_email, $order_email_subject, $order_email_content, false, $no_cache);\n                            }\n                        }\n                    }\n\n                    return true;\n                }\n            }\n        }\n    }\n\n    public function checkout_ipn($data)\n    {\n        if (isset($data['payment_verify_token'])) {\n            $payment_verify_token = ($data['payment_verify_token']);\n        }\n        if (!isset($data['payment_gw'])) {\n            return array('error' => 'You must provide a payment gateway parameter!');\n        }\n\n\n        $data['payment_gw'] = sanitize_path($data['payment_gw']);\n\n        $should_mark_as_paid = false;\n\n        $client_ip = user_ip();\n\n        $hostname = $this->get_domain_from_str($client_ip);\n\n\n        $payment_verify_token = $this->app->database_manager->escape_string($payment_verify_token);\n        $table = 'cart_orders';\n\n        $query = array();\n        $query['payment_verify_token'] = $payment_verify_token;\n        if (isset($data['order_id'])) {\n            $query['id'] = intval($data['order_id']);\n        } else {\n            $query['transaction_id'] = '[null]';\n        }\n        $query['limit'] = 1;\n        $query['table'] = $table;\n        $query['no_cache'] = true;\n\n        $ord_data = $this->app->database_manager->get($query);\n        if (!isset($ord_data[0]) or !is_array($ord_data[0])) {\n            return array('error' => 'Order is completed or expired.');\n        } else {\n            $ord_data = $ord_data[0];\n            $ord = $ord_data['id'];\n        }\n\n        $cart_table = 'cart';\n        $table_orders = 'cart_orders';\n\n        $data['payment_gw'] = sanitize_path($data['payment_gw']);\n        $gw_process = modules_path() . $data['payment_gw'] . '_checkout_ipn.php';\n        if (!is_file($gw_process)) {\n            $gw_process = normalize_path(modules_path() . $data['payment_gw'] . DS . 'checkout_ipn.php', false);\n        }\n        if (!is_file($gw_process)) {\n            $gw_process = normalize_path(modules_path() . $data['payment_gw'] . DS . 'notify.php', false);\n        }\n\n\n        $update_order = array();\n        if (is_file($gw_process)) {\n            include $gw_process;\n\n            // $this->_verify_request_params($update_order);\n\n        } else {\n            return array('error' => 'The payment gateway is not found!');\n        }\n        $update_order_event_data = [];\n\n\n        if (is_array($update_order)) {\n            $update_order_event_data = array_merge($ord_data, $update_order);\n        }\n\n\n        if (!empty($update_order_event_data) and isset($update_order_event_data['order_completed']) and $update_order_event_data['order_completed'] == 1) {\n            $this->after_checkout($ord);\n\n            if (!isset($ord_data['is_paid']) or (isset($ord_data['is_paid']) and intval($ord_data['is_paid']) == 0)) {\n                if (isset($update_order_event_data['is_paid']) and intval($update_order_event_data['is_paid']) == 1) {\n                    $should_mark_as_paid = true;\n                }\n            }\n\n            if ($should_mark_as_paid) {\n                $this->app->checkout_manager->mark_order_as_paid($ord);\n            }\n\n\n            //            $update_order_event_data['id'] = $ord;\n//            $update_order_event_data['payment_gw'] = $data['payment_gw'];\n//            $ord = $this->app->database_manager->save($table_orders, $update_order_event_data);\n//\n//\n//            if (isset($update_order_event_data['is_paid']) and $update_order_event_data['is_paid']) {\n//                $this->app->event_manager->trigger('mw.cart.checkout.order_paid', $update_order_event_data);\n//            }\n//\n//            if (isset($update_order_event_data['is_paid']) and $update_order_event_data['is_paid'] == 1) {\n//                $this->app->shop_manager->update_quantities($ord);\n//\n//\n//            }\n//            if ($ord > 0) {\n//                $this->app->cache_manager->delete('cart');\n//                $this->app->cache_manager->delete('cart_orders');\n//                //return true;\n//            }\n//\n//            $this->confirm_email_send($ord);\n\n        }\n\n        if (isset($data['return_to'])) {\n            $return_to = urldecode($data['return_to']);\n\n            $append = '?';\n            if (strstr($return_to, '?')) {\n                $append = '&';\n            }\n            $return_to = $return_to . $append . 'mw_payment_success=1';\n\n            return $this->app->url_manager->redirect($return_to);\n        }\n\n        return;\n    }\n\n    private function get_domain_from_str($address)\n    {\n        $address = gethostbyaddr($address);\n        $parsed_url = parse_url($address);\n        if (!isset($parsed_url['host'])) {\n            if (isset($parsed_url['path'])) {\n                $parsed_url['host'] = $parsed_url['path'];\n            }\n        }\n        $check = $this->esip($parsed_url['host']);\n        $host = $parsed_url['host'];\n        if ($check == false) {\n            if ($host != '') {\n                $host = $this->domain_name($host);\n            } else {\n                $host = $this->domain_name($address);\n            }\n        }\n\n        return $host;\n    }\n\n    private function esip($ip_addr)\n    {\n        if (preg_match(\"/^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/\", $ip_addr)) {\n            $parts = explode('.', $ip_addr);\n            foreach ($parts as $ip_parts) {\n                if (intval($ip_parts) > 255 || intval($ip_parts) < 0) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private function domain_name($domainb)\n    {\n        $bits = explode('/', $domainb);\n        if ($bits[0] == 'http:' || $bits[0] == 'https:') {\n            $domainb = $bits[2];\n        } else {\n            $domainb = $bits[0];\n        }\n        unset($bits);\n        $bits = explode('.', $domainb);\n        $idz = count($bits);\n        $idz -= 3;\n        if (strlen($bits[($idz + 2)]) == 2) {\n            $url = $bits[$idz] . '.' . $bits[($idz + 1)] . '.' . $bits[($idz + 2)];\n        } elseif (strlen($bits[($idz + 2)]) == 0) {\n            $url = $bits[($idz)] . '.' . $bits[($idz + 1)];\n        } else {\n            $url = $bits[($idz + 1)] . '.' . $bits[($idz + 2)];\n        }\n\n        return $url;\n    }\n\n    private function _verify_request_params($data)\n    {\n\n        $error = true;\n\n        if (!isset($data['payment_verify_token'])) {\n            $error = true;\n        }\n        if (isset($data['order_id'])) {\n            $data['id'] = $data['order_id'];\n        }\n\n        if (!isset($data['payment_amount'])) {\n            $error = true;\n        }\n\n\n        if (!isset($data['payment_currency'])) {\n            $error = true;\n        }\n        if (!isset($data['id'])) {\n            $error = true;\n        }\n\n\n\n        $vkey = false;\n\n        if (isset($_REQUEST['_vkey_url'])) {\n            $vkey = $_REQUEST['_vkey_url'];\n        }\n\n\n//        $url = url_current();\n//        $param = '_vkey_url';\n//        $pieces = parse_url($url);\n//        $query = [];\n//        if ($pieces['query']) {\n//            parse_str($pieces['query'], $query);\n//            $data[$param] = $query[$param];\n//            unset($query[$param]);\n//            $pieces['query'] = http_build_query($query);\n//        }\n//        if (!isset($data['_vkey_url'])) {\n//            $error = true;\n//        } else {\n//            $vkey = $data['_vkey_url'];\n//        }\n\n\n        if (!$vkey) {\n            $error = true;\n        }\n        $order_data = false;\n        if(!$error and isset($data['id'])){\n        $order_data = get_order_by_id($data['id']);\n        }\n\n        if ($order_data and $vkey) {\n\n            $vkey_data = array();\n            //  $vkey_data['payment_amount'] = $order_data['payment_amount'];\n            // $vkey_data['payment_currency'] = $order_data['payment_currency'];\n            $vkey_data['payment_verify_token'] = $order_data['payment_verify_token'];\n            //  $vkey_data['id'] = $order_data['id'];\n//dd($order_data);\n            $enc_key_hash = md5(json_encode($vkey_data));\n            //   $enc_key_hash = md5(\\Config::get('app.key').json_encode($vkey_data));\n\n            // dd(2222,$vkey,$enc_key_hash,$data,$order_data);\n\n            // $vkey = urldecode($vkey);\n\n            $encrypter = new \\Illuminate\\Encryption\\Encrypter(md5(\\Config::get('app.key') . $order_data['payment_verify_token']), \\Config::get('app.cipher'));\n\n            $decrypt_data = $encrypter->decrypt($vkey);\n\n            //    dd($enc_key_hash,$decrypt_data);\n\n            //  $enc_key_hash = $encrypter->encrypt(json_encode($vkey_data));\n\n            //dd($vkey, $enc_key_hash,$order_data,$vkey_data);\n            if ($enc_key_hash === $decrypt_data) {\n                $error = false;\n\n            }\n\n            // $url_verify = $this->_build_url($pieces);\n            // $decrypt_data = @json_decode($encrypter->decrypt($vkey), true);\n\n//            if (!$decrypt_data) {\n//                $error = true;\n//            } else {\n//\n//                $decrypt_url = $decrypt_data['url'];\n//                $decrypt_payment_amount = $decrypt_data['payment_amount'];\n//                $decrypt_payment_currency = $decrypt_data['payment_currency'];\n//\n//                $url_verify = urldecode($url_verify);\n//                $decrypt_url = urldecode($decrypt_url);\n//\n//                if (md5($url_verify) !== md5($decrypt_url)) {\n//                    $error = true;\n//                }\n//\n//                if (md5(floatval($decrypt_payment_amount)) !== md5(floatval($data['payment_amount']))) {\n//                    $error = true;\n//                }\n//                if (md5(strtoupper($decrypt_payment_currency)) !== md5(strtoupper($data['payment_currency']))) {\n//                    $error = true;\n//                }\n//            }\n        }\n\n\n        if ($error) {\n\n            abort(403, 'Unauthorized action.');\n        }\n\n    }\n\n    public function getShippingModules()\n    {\n        return $this->app->shipping_manager->getShippingModules();\n\n    }\n\n    public function getShippingCost($data = [])\n    {\n\n        if (!is_array($data)) {\n            $data = [];\n        }\n        $shipping_cost = 0;\n\n        if ($this->app->user_manager->session_get('shipping_cost')) {\n            $shipping_cost = $this->app->user_manager->session_get('shipping_cost');\n        }\n\n\n        $shipping_gw_from_session = $this->app->user_manager->session_get('shipping_provider');\n        if (!isset($data['shipping_gw']) and $shipping_gw_from_session) {\n            $data['shipping_gw'] = $shipping_gw_from_session;\n        } else {\n            $data['shipping_gw'] = 'default';\n\n        }\n        if (isset($data['shipping_gw']) and $data['shipping_gw']) {\n            // $shipping_cost = $this->app->shipping_manager->driver($data['shipping_gw'])->cost();\n\n            try {\n                $shipping_cost = $this->app->shipping_manager->driver($data['shipping_gw'])->cost();\n\n            } catch (\\InvalidArgumentException $e) {\n                $shipping_cost = 0;\n                unset($data['shipping_gw']);\n            }\n        }\n        return $shipping_cost;\n\n    }\n\n    private function _build_url(array $elements)\n    {\n        $e = $elements;\n        return\n            (isset($e['host']) ? (\n                (isset($e['scheme']) ? \"$e[scheme]://\" : '//') .\n                (isset($e['user']) ? $e['user'] . (isset($e['pass']) ? \":$e[pass]\" : '') . '@' : '') .\n                $e['host'] .\n                (isset($e['port']) ? \":$e[port]\" : '')\n            ) : '') .\n            (isset($e['path']) ? $e['path'] : '/') .\n            (isset($e['query']) ? '?' . (is_array($e['query']) ? http_build_query($e['query'], '', '&') : $e['query']) : '') .\n            (isset($e['fragment']) ? \"#$e[fragment]\" : '');\n    }\n\n\n}\n", "<?php must_have_access(); ?>\n\n<?php\n$from_live_edit = false;\nif (isset($params[\"live_edit\"]) and $params[\"live_edit\"]) {\n    $from_live_edit = $params[\"live_edit\"];\n}\n?>\n\n<?php if (isset($params['backend'])): ?>\n    <module type=\"admin/modules/info\"/>\n<?php endif; ?>\n\n<script>\n    function editCoupon(coupon_id = false) {\n        var data = {};\n        data.coupon_id = coupon_id;\n        editModal = mw.tools.open_module_modal('shop/coupons/edit_coupon', data, {overlay: true, skin: 'simple', title: '<?php _ejs(\"Coupon Code\"); ?>'})\n    }\n\n    function deleteCoupon(coupon_id) {\n        var confirmUser = confirm('<?php _ejs('Are you sure to delete this coupon permanently?'); ?>');\n        if (confirmUser == true) {\n            $.ajax({\n                url: '<?php print api_url('coupon_delete');?>',\n                data: 'coupon_id=' + coupon_id,\n                type: 'POST',\n                dataType: 'json',\n                success: function (response) {\n                    if (typeof(reload_coupon_after_save) != 'undefined') {\n                        reload_coupon_after_save();\n                    }\n                }\n            });\n        }\n    }\n\n    function reload_coupon_after_save() {\n        //mw.reload_module_parent('#<?php //print $params['id'] ?>//');\n        //mw.reload_module_everywhere('shop/coupons/admin');\n        //mw.reload_module_everywhere('shop/coupons/edit_coupons');\n        //window.parent.$(window.parent.document).trigger('shop.coupons.update');\n        //if (typeof(editModal) != 'undefined' && editModal.modal) {\n        //    editModal.modal.remove();\n        //}\n        window.location.href = window.location.href;\n    }\n\n    $(document).ready(function () {\n        $(\".js-add-new-coupon\").click(function () {\n            editCoupon(false);\n        });\n    });\n</script>\n\n<script>\n    mw.lib.require('jqueryui');\n    mw.require(\"<?php print $config['url_to_module'];?>css/main.css\");\n</script>\n\n<?php\n$coupon_get_count = coupon_get_count();\n?>\n\n<div class=\"card\">\n    <div class=\"card-body mb-3 <?php if ($from_live_edit): ?>card-in-live-edit<?php endif; ?>\">\n        <div class=\"row\">\n\n            <div class=\"card-header d-flex align-items-center justify-content-between px-0\">\n\n                <module type=\"admin/modules/info_module_title\" for-module=\"<?php print $params['module'] ?>\"/>\n\n                <?php\n                if ($coupon_get_count > 0) {\n                ?>\n                <a href=\"javascript:;\" class=\"btn btn-primary js-add-new-coupon\"><?php _e('Add new'); ?></a>\n                <?php\n                }\n                ?>\n\n            </div>\n\n            <?php\n            if ($coupon_get_count > 0) {\n                ?>\n                <label class=\"form-check form-check-single form-switch ps-0 mb-4\" style=\"width: unset;\">\n                    <input type=\"checkbox\" name=\"enable_coupons\" class=\"mw_option_field form-check-input\" id=\"enable_coupons\" data-option-group=\"shop\" data-value-checked=\"1\" data-value-unchecked=\"0\" <?php if (get_option('enable_coupons', 'shop') == 1): ?>checked<?php endif; ?> />\n                    &nbsp; <?php _e('Enable'); ?>\n                </label>\n            <?php\n            }\n            ?>\n\n                <?php if ($from_live_edit): ?>\n                    <?php include 'admin_live_edit.php'; ?>\n                <?php else: ?>\n\n\n                <?php\n                    if ($coupon_get_count > 0) {\n                ?>\n                <nav class=\"nav nav-pills nav-justified btn-group btn-group-toggle btn-hover-style-3\">\n                    <a class=\"btn justify-content-center active\" data-bs-toggle=\"tab\" href=\"#list-coupons\"><?php _e('List coupons'); ?></a>\n                    <a class=\"btn justify-content-center\" data-bs-toggle=\"tab\" href=\"#list-log-coupons\"> <?php _e('Used coupons'); ?></a>\n                </nav>\n                <div class=\"tab-content py-3\">\n                    <div class=\"tab-pane fade show active\" id=\"list-coupons\">\n                        <!-- Settings Content -->\n                        <div class=\"module-coupons-settings\">\n                            <script type=\"text/javascript\">\n                                $(document).ready(function () {\n                                    mw.options.form('.<?php print $config['module_class'] ?>', function () {\n                                        mw.notification.success(\"<?php _ejs(\"Saved\"); ?>.\");\n                                    });\n                                });\n                            </script>\n                            <module type=\"shop/coupons/edit_coupons\"/>\n                        </div>\n                        <!-- Settings Content - End -->\n                    </div>\n\n                    <div class=\"tab-pane fade\" id=\"list-log-coupons\">\n                        <module type=\"shop/coupons/log\"/>\n                    </div>\n\n                </div>\n                    <?php\n                    } else {\n                        include 'no-coupons.php';\n                    }\n                ?>\n\n                <?php endif; ?>\n\n        </div>\n    </div>\n\n</div>\n", "<?php\n/**\n * Microweber Coupon Module\n * Developed by: Bozhidar Slaveykov\n *\n * @category   Modules\n * @package    Functions\n * @author     Bozhidar Slaveykov <selfworksbg@gmail.com>\n * @copyright  2018 Microweber\n */\ninclude __DIR__ . DS . 'src/CouponClass.php';\n\n//autoload_add_namespace(__DIR__ . '/src/', 'MicroweberPackages\\\\Modules\\\\Shop\\\\Coupons\\\\');\n\nfunction coupon_apply($params = array())\n{\n    $json = array();\n    $ok = false;\n    $errorMessage = '';\n\n    $coupon_code = $params['coupon_code'];\n    $coupon_code = xss_clean($coupon_code);\n\n    if (get_option('enable_coupons', 'shop') == 0){\n        $json['error_message'] = _e('The coupon code usage is disabled.', true);\n        return $json;\n    }\n\n    $coupon = coupon_get_by_code($coupon_code);\n    if (empty($coupon)) {\n        $json['error_message'] = _e('The coupon code is not valid.', true);\n        return $json;\n    }\n\n    $customer_ip = user_ip();\n\n//    $checkout = new MicroweberPackages\\Checkout\\CheckoutManager();\n//    $getCart = $checkout->app->shop_manager->get_cart(array(\n//        'session_id' => $checkout->app->user_manager->session_id()\n//\n//    ));\n\n    $getCart = false;\n    $coupon['total_amount'] = floatval($coupon['total_amount']);\n    $cartTotal = floatval( \\DB::table('cart')->where('session_id', app()->user_manager->session_id())->sum('price'));\n    $getCartItems =   \\DB::table('cart')->where('session_id', app()->user_manager->session_id())->get();\n\n    if($getCartItems){\n        $getCart = $getCartItems->toArray();\n    }\n\n    // Check rules\n     if ($coupon and isset($coupon['uses_per_customer']) and $coupon['uses_per_customer'] > 0) {\n        $getLog = coupon_log_get_by_code_and_customer_ip($coupon_code, $customer_ip);\n\n        if (is_array($getLog) and $getLog['uses_count'] !== false && $getLog['uses_count'] >= $coupon['uses_per_customer']) {\n            $errorMessage .= _e('The coupon cannot be applied cause maximum uses exceeded.', true) . \"<br />\";\n        }\n    }\n\n    if ($coupon['uses_per_coupon'] > 0) {\n        $getLogs = coupon_logs_get_by_code($coupon_code);\n\n        if (count($getLogs) >= $coupon['uses_per_coupon']) {\n            $errorMessage .= _e('The coupon code is expired', true) . '.<br />';\n        }\n    }\n\n    if ($coupon and isset($coupon['total_amount']) and  $cartTotal < $coupon['total_amount']) {\n        $errorMessage .= _e('The coupon can\\'t be applied because the minimum total amount is ', true) . currency_format($coupon['total_amount']) . \"<br />\";\n    }\n\n    if (!is_array($getCart)) {\n        $errorMessage .= _e('The coupon can\\'t be applied. The shopping cart is empty.', true);\n    }\n\n    if (empty($errorMessage)) {\n        $ok = true;\n    }\n\n    if(isset( $params['coupon_check_if_valid'])){\n       return $ok;\n    }\n\n\n    if ($ok) {\n\n        mw()->user_manager->session_set('coupon_code', $coupon['coupon_code']);\n        mw()->user_manager->session_set('coupon_id', $coupon['id']);\n        mw()->user_manager->session_set('discount_value', $coupon['discount_value']);\n        mw()->user_manager->session_set('discount_type', $coupon['discount_type']);\n\n        mw()->user_manager->session_set('applied_coupon_data', $coupon);\n\n        $json['success_message'] = _e('Coupon code applied.', true);\n        $json['success_apply'] = true;\n    } else {\n\n        coupons_delete_session();\n\n        $json['error_message'] = $errorMessage;\n    }\n\n    return $json;\n}\n\nfunction coupons_save_coupon($couponData = array())\n{\n    $json = array();\n    $ok = false;\n    $errorMessage = '';\n    $table = 'cart_coupons';\n\n    $couponData = xss_clean($couponData);\n\n    if (isset($couponData['is_active']) && $couponData['is_active'] == 'on') {\n        $couponData['is_active'] = 1;\n    } else {\n        $couponData['is_active'] = 0;\n    }\n\n    // check if coupon code exists\n    $check = coupon_get_by_code($couponData['coupon_code']);\n    if (!empty($check)) {\n        if ($check['id'] != $couponData['id']) {\n            $errorMessage .= _e('This coupon code already exists. Please, try with another', true) . '.<br />';\n        }\n    }\n\n    if (empty(trim($couponData['coupon_code']))) {\n        $errorMessage .= _e('Coupon code is empty', true) . '.<br />';\n    }\n\n    if (empty(trim($couponData['coupon_name']))) {\n        $errorMessage .= _e('Coupon name is empty', true) . '.<br />';\n    }\n\n    if (!is_numeric($couponData['uses_per_coupon'])) {\n        $errorMessage .= _e('Uses per coupon must be number', true) . '.<br />';\n    }\n\n    if (!is_numeric($couponData['uses_per_customer'])) {\n        $errorMessage .= _e('Uses per customer must be number', true) . '.<br />';\n    }\n\n    if (!is_numeric($couponData['discount_value'])) {\n        $errorMessage .= _e('Discount value must be number', true) . '.<br />';\n    }\n\n    if (!is_numeric($couponData['total_amount'])) {\n        $errorMessage .= _e('Total amount must be number', true) . '.<br />';\n    }\n\n    if (empty($errorMessage)) {\n        $ok = true;\n    }\n\n    if ($ok) {\n        $couponId = db_save($table, $couponData);\n        $json['coupon_id'] = $couponId;\n        $json['success_edit'] = true;\n    } else {\n        $json['error_message'] = $errorMessage;\n    }\n\n\n    if ($ok) {\n        $count = coupon_get_count();\n        if ($count == 1) {\n            save_option('enable_coupons', 1, 'shop');\n        }\n    }\n\n    return $json;\n}\n\n\nfunction coupon_log_customer($coupon_code, $customer_email, $customer_ip)\n{\n    $coupon = coupon_get_by_code($coupon_code);\n    if (empty($coupon)) {\n        return false;\n    }\n\n    $checkLog = coupon_log_get_by_code_and_customer_email_and_ip($coupon_code, $customer_email, $customer_ip);\n\n    $couponLogData = array();\n    $table = 'cart_coupon_logs';\n\n    if (!empty($checkLog)) {\n        $couponLogData['id'] = $checkLog['id'];\n        $couponLogData['uses_count'] = $checkLog['uses_count'] + 1;\n    } else {\n        $couponLogData['uses_count'] = 1;\n    }\n\n    $couponLogData['coupon_id'] = $coupon['id'];\n    $couponLogData['coupon_code'] = $coupon_code;\n    $couponLogData['customer_email'] = $customer_email;\n    $couponLogData['customer_ip'] = $customer_ip;\n    $couponLogData['use_date'] = date(\"Y-m-d H:i:s\");\n\n    $couponLogId = db_save($table, $couponLogData);\n}\n\n\nfunction coupon_log_get_by_code_and_customer_email_and_ip($coupon_code, $customer_email, $customer_ip)\n{\n    $table = \"cart_coupon_logs\";\n\n    return db_get($table, array(\n        'coupon_code' => $coupon_code,\n        'customer_email' => $customer_email,\n        'customer_ip' => $customer_ip,\n        'single' => true,\n        'no_cache' => true\n    ));\n}\n\nfunction coupon_log_get_by_code_and_customer_ip($coupon_code, $customer_ip)\n{\n    $table = \"cart_coupon_logs\";\n\n    return db_get($table, array(\n        'coupon_code' => $coupon_code,\n        'customer_ip' => $customer_ip,\n        'single' => true,\n        'no_cache' => true\n    ));\n}\n\nfunction coupon_logs_get_by_code($coupon_code)\n{\n    $table = \"cart_coupon_logs\";\n\n    return DB::table($table)->select('*')\n        ->where('coupon_code', $coupon_code)\n        ->get()\n        ->toArray();\n}\n\n\nfunction coupon_get_count()\n{\n    $table = 'cart_coupons';\n    $coupons = DB::table($table)->select('*')\n        ->count();\n\n    return $coupons;\n}\n\nfunction coupon_get_all()\n{\n    $table = 'cart_coupons';\n    $coupons = DB::table($table)->select('*')\n        ->get()\n        ->toArray();\n\n    $readyCoupons = array();\n    foreach ($coupons as $coupon) {\n        $readyCoupons[] = get_object_vars($coupon);\n    }\n\n    return $readyCoupons;\n}\n\n\nfunction coupon_logs()\n{\n    $table = 'cart_coupon_logs';\n    $coupons = DB::table($table)->select('*')\n        ->get()\n        ->toArray();\n\n    $readyCoupons = array();\n    foreach ($coupons as $coupon) {\n        $readyCoupons[] = get_object_vars($coupon);\n    }\n\n    return $readyCoupons;\n}\n\nfunction coupon_get_by_id($coupon_id)\n{\n    $table = \"cart_coupons\";\n\n    return db_get($table, array(\n        'id' => $coupon_id,\n        'single' => true,\n        'no_cache' => true\n    ));\n}\n\nfunction coupon_get_by_code($coupon_code)\n{\n    $table = \"cart_coupons\";\n\n    $get = db_get($table, array(\n        'is_active' => 1,\n        'coupon_code' => $coupon_code,\n        'single' => true,\n        'no_cache' => true\n    ));\n\n    return $get;\n}\n\nfunction coupon_delete($data)\n{\n    if (!is_admin())\n        return;\n\n    $table = \"cart_coupons\";\n\n    $couponId = (int) $data['coupon_id'];\n    if ($couponId == 0) {\n        return array(\n            'status' => 'failed'\n        );\n    }\n\n    $delete = db_delete($table, $couponId);\n\n    if ($delete) {\n        return array(\n            'status' => 'success'\n        );\n    } else {\n        return array(\n            'status' => 'failed'\n        );\n    }\n}\n\nfunction coupons_delete_session()\n{\n    mw()->user_manager->session_del('coupon_code');\n    mw()->user_manager->session_del('coupon_id');\n    mw()->user_manager->session_del('discount_value');\n    mw()->user_manager->session_del('discount_type');\n    mw()->user_manager->session_del('applied_coupon_data');\n}\n\n\nevent_bind('mw.admin.shop.settings.menu', function ($data) {\n    print '<div class=\"card-header col-12 col-md-6 col-xxl-4 p-0\">\n                <a href=\"?group=shop/coupons/admin\" class=\"d-flex settings-holder-wrapper\">\n                    <div class=\"icon-holder\"><i class=\"mdi mdi-scissors-cutting fs-1\"></i></div>\n                    <div class=\"card-title info-holder\">\n                        <div class=\"settings-info-holder-title\">' . _e('Coupons', true) . '</div>\n                        <small class=\"text-muted\">' . _e('Creating and managing coupon codes', true) . '</small>\n                    </div>\n                </a>\n            </div>';\n});\n\nevent_bind('mw.admin.shop.settings.coupons', function ($data) {\n    print '<module type=\"shop/coupons\" view=\"admin_block\" />';\n});\n"], "filenames": ["src/MicroweberPackages/Checkout/CheckoutManager.php", "userfiles/modules/shop/coupons/admin.php", "userfiles/modules/shop/coupons/functions.php"], "buggy_code_start_loc": [411, 87, 23], "buggy_code_end_loc": [415, 88, 23], "fixing_code_start_loc": [411, 87, 24], "fixing_code_end_loc": [415, 88, 29], "type": "CWE-840", "message": "Business Logic Errors in GitHub repository microweber/microweber prior to 2.0.", "other": {"cve": {"id": "CVE-2023-6832", "sourceIdentifier": "security@huntr.dev", "published": "2023-12-15T01:15:08.353", "lastModified": "2023-12-21T14:47:05.363", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Business Logic Errors in GitHub repository microweber/microweber prior to 2.0."}, {"lang": "es", "value": "Errores de l\u00f3gica empresarial en el repositorio de GitHub microweber/microweber anterior a 2.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 6.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.5, "impactScore": 5.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-840"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0", "matchCriteriaId": "A3C150C1-4763-474B-91B5-B571C53BEC4D"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/890e9838aabbc799ebefcf6b20ba25e0fd6dbfee", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/53105a20-f4b1-45ad-a734-0349de6d7376", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/890e9838aabbc799ebefcf6b20ba25e0fd6dbfee"}}