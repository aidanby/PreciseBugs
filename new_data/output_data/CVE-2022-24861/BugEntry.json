{"buggy_code": ["server.port=8080\nlogging.level.org.jooq=INFO\nspring.jooq.sql-dialect=mysql\n# flyway\nspring.flyway.enabled=true\nspring.flyway.baseline-on-migrate=true\nspring.flyway.locations=classpath:db/migration\n# db\ndatabasir.db.url=localhost:3306\ndatabasir.db.username=root\ndatabasir.db.password=123456\ndatabasir.db.driver-directory=drivers", "server.port=8080\n# datasource\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.username=${databasir.db.username}\nspring.datasource.password=${databasir.db.password}\nspring.datasource.url=jdbc:mysql://${databasir.db.url}/${databasir.db.name:databasir}\n# jooq\nspring.jooq.sql-dialect=mysql\n# flyway\nspring.flyway.enabled=true\nspring.flyway.baseline-on-migrate=true\nspring.flyway.locations=classpath:db/migration\n# driver directory\ndatabasir.db.driver-directory=drivers", "package com.databasir.core.domain;\n\nimport com.databasir.common.DatabasirErrors;\nimport com.databasir.common.DatabasirException;\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\n@RequiredArgsConstructor\n@Getter\npublic enum DomainErrors implements DatabasirErrors {\n    REFRESH_TOKEN_EXPIRED(\"X_0001\", \"refresh token expired\"),\n    INVALID_REFRESH_TOKEN_OPERATION(\"X_0002\", \"invalid refresh token operation\"),\n    NETWORK_ERROR(\"X_0003\", \"\u7f51\u7edc\u4f3c\u4e4e\u4e0d\u7a33\u5b9a\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\"),\n    INVALID_ACCESS_TOKEN(\"X_0004\", \"\u65e0\u6548\u7684 access token\"),\n\n    NOT_SUPPORT_DATABASE_TYPE(\"A_10000\", \"\u4e0d\u652f\u6301\u7684\u6570\u636e\u5e93\u7c7b\u578b, \u8bf7\u68c0\u67e5\u9879\u76ee\u914d\u7f6e\"),\n    PROJECT_NOT_FOUND(\"A_10001\", \"\u9879\u76ee\u4e0d\u5b58\u5728\"),\n    DATABASE_META_NOT_FOUND(\"A_10002\", \"\u83b7\u53d6\u6570\u636e\u5e93\u4fe1\u606f\u5931\u8d25\"),\n    CONNECT_DATABASE_FAILED(\"A_10003\", \"\u8fde\u63a5\u6570\u636e\u5e93\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u8fde\u63a5\u914d\u7f6e\"),\n    GROUP_OWNER_MUST_NOT_BE_EMPTY(\"A_10004\", \"\u8bf7\u81f3\u5c11\u6307\u5b9a\u4e00\u4e2a\u5206\u7ec4\u7ec4\u957f\"),\n    PASSWORD_MUST_NOT_BE_BLANK(\"A_10005\", \"\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a\"),\n    USERNAME_OR_EMAIL_DUPLICATE(\"A_10006\", \"\u7528\u6237\u540d\u6216\u90ae\u7bb1\u5df2\u5b58\u5728\"),\n    USER_ROLE_DUPLICATE(\"A_10007\", \"\u7528\u6237\u89d2\u8272\u5df2\u5b58\u5728\"),\n    PROJECT_NAME_DUPLICATE(\"A_10008\", \"\u9879\u76ee\u540d\u79f0\u5df2\u88ab\u5360\u7528\"),\n    CANNOT_UPDATE_SELF_ROLE(\"A_10009\", \"\u65e0\u6cd5\u5bf9\u81ea\u5df1\u6267\u884c\u89d2\u8272\u53d8\u66f4\u7684\u64cd\u4f5c\"),\n    UPDATE_PASSWORD_CONFIRM_FAILED(\"A_10010\", \"\u4e24\u6b21\u5bc6\u7801\u8f93\u5165\u4e0d\u4e00\u81f4\"),\n    ORIGIN_PASSWORD_NOT_CORRECT(\"A_10011\", \"\u539f\u5bc6\u7801\u4e0d\u6b63\u786e\"),\n    INVALID_CRON_EXPRESSION(\"A_10012\", \"\u4e0d\u5408\u6cd5\u7684 cron \u8868\u8fbe\u5f0f\"),\n    REGISTRATION_ID_DUPLICATE(\"A_10013\", \"\u5e94\u7528\u6ce8\u518c ID \u4e0d\u80fd\u91cd\u590d\"),\n    REGISTRATION_ID_NOT_FOUND(\"A_10014\", \"\u5e94\u7528 ID \u4e0d\u5b58\u5728\"),\n    MISS_REQUIRED_PARAMETERS(\"A_10015\", \"\u7f3a\u5c11\u5fc5\u586b\u53c2\u6570\"),\n    DATABASE_TYPE_NAME_DUPLICATE(\"A_10016\", \"\u6570\u636e\u5e93\u7c7b\u578b\u540d\u5df2\u5b58\u5728\"),\n    MUST_NOT_MODIFY_SYSTEM_DEFAULT_DATABASE_TYPE(\"A_10017\", \"\u7981\u6b62\u4fee\u6539\u7cfb\u7edf\u9ed8\u8ba4\u6570\u636e\u5e93\u7c7b\u578b\"),\n    DOWNLOAD_DRIVER_ERROR(\"A_10018\", \"\u9a71\u52a8\u4e0b\u8f7d\u5931\u8d25\"),\n    INVALID_DATABASE_TYPE_URL_PATTERN(\"A_10019\", \"\u4e0d\u5408\u6cd5\u7684 url pattern\"),\n    DOCUMENT_VERSION_IS_INVALID(\"A_10020\", \"\u6587\u6863\u7248\u672c\u4e0d\u5408\u6cd5\"),\n    CANNOT_UPDATE_SELF_ENABLED_STATUS(\"A_10021\", \"\u65e0\u6cd5\u5bf9\u81ea\u5df1\u6267\u884c\u542f\u7528\u7981\u7528\u64cd\u4f5c\"),\n    MOCK_DATA_SCRIPT_MUST_NOT_BE_BLANK(\"A_10022\", \"\u811a\u672c\u5185\u5bb9\u4e0d\u80fd\u4e3a\u7a7a\"),\n    TABLE_META_NOT_FOUND(\"A_10023\", \"\u4e0d\u5b58\u5728\u7684\u6570\u636e\u5e93\u8868\"),\n    DEPENDENT_COLUMN_NAME_MUST_NOT_BE_BLANK(\"A_10024\", \"\u5fc5\u987b\u6307\u5b9a\u4f9d\u8d56\u7684\u5b57\u6bb5\"),\n    DEPENDENT_REF_MUST_NOT_BE_BLANK(\"A_10025\", \"\u8bf7\u9009\u62e9\u5173\u8054\u8868\u548c\u5b57\u6bb5\"),\n    MUST_NOT_REF_SELF(\"A_10026\", \"\u4e0d\u80fd\u5f15\u7528\u81ea\u8eab\"),\n    CIRCLE_REFERENCE(\"A_10027\", \"\u68c0\u67e5\u5230\u5faa\u73af\u5f15\u7528\"),\n    DUPLICATE_COLUMN(\"A_10028\", \"\u91cd\u590d\u7684\u5217\"),\n    INVALID_MOCK_DATA_SCRIPT(\"A_10029\", \"\u4e0d\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f\"),\n    CANNOT_DELETE_SELF(\"A_10030\", \"\u65e0\u6cd5\u5bf9\u81ea\u5df1\u6267\u884c\u5220\u9664\u8d26\u53f7\u64cd\u4f5c\"),\n    DRIVER_CLASS_NAME_OBTAIN_ERROR(\"A_10031\", \"\u83b7\u53d6\u9a71\u52a8\u7c7b\u540d\u5931\u8d25\"),\n    ;\n\n    private final String errCode;\n\n    private final String errMessage;\n\n    public DatabasirException exception() {\n        return new DatabasirException(this);\n    }\n\n    public DatabasirException exception(Throwable origin) {\n        return new DatabasirException(this, origin);\n    }\n\n    public DatabasirException exception(String message, Throwable origin) {\n        return new DatabasirException(this, message, origin);\n    }\n\n    public DatabasirException exception(String s) {\n        return exception(s, null);\n    }\n}\n", "package com.databasir.core.domain.database.service;\n\nimport com.databasir.core.domain.DomainErrors;\nimport com.databasir.core.domain.database.converter.DatabaseTypePojoConverter;\nimport com.databasir.core.domain.database.data.*;\nimport com.databasir.core.infrastructure.connection.DatabaseTypes;\nimport com.databasir.core.infrastructure.driver.DriverResources;\nimport com.databasir.dao.impl.DatabaseTypeDao;\nimport com.databasir.dao.impl.ProjectDao;\nimport com.databasir.dao.tables.pojos.DatabaseTypePojo;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.dao.DuplicateKeyException;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class DatabaseTypeService {\n\n    private final DriverResources driverResources;\n\n    private final DatabaseTypeDao databaseTypeDao;\n\n    private final ProjectDao projectDao;\n\n    private final DatabaseTypePojoConverter databaseTypePojoConverter;\n\n    public Integer create(DatabaseTypeCreateRequest request) {\n        DatabaseTypePojo pojo = databaseTypePojoConverter.of(request);\n        try {\n            return databaseTypeDao.insertAndReturnId(pojo);\n        } catch (DuplicateKeyException e) {\n            throw DomainErrors.DATABASE_TYPE_NAME_DUPLICATE.exception();\n        }\n    }\n\n    @Transactional\n    public void update(DatabaseTypeUpdateRequest request) {\n        databaseTypeDao.selectOptionalById(request.getId()).ifPresent(data -> {\n            if (DatabaseTypes.has(data.getDatabaseType())) {\n                throw DomainErrors.MUST_NOT_MODIFY_SYSTEM_DEFAULT_DATABASE_TYPE.exception();\n            }\n\n            DatabaseTypePojo pojo = databaseTypePojoConverter.of(request);\n            try {\n                databaseTypeDao.updateById(pojo);\n            } catch (DuplicateKeyException e) {\n                throw DomainErrors.DATABASE_TYPE_NAME_DUPLICATE.exception();\n            }\n\n            // \u540d\u79f0\u4fee\u6539\uff0c\u4e0b\u8f7d\u5730\u5740\u4fee\u6539\u9700\u8981\u5220\u9664\u539f\u6709\u7684 driver\n            if (!Objects.equals(request.getDatabaseType(), data.getDatabaseType())\n                    || !Objects.equals(request.getJdbcDriverFileUrl(), data.getJdbcDriverFileUrl())) {\n                driverResources.delete(data.getDatabaseType());\n            }\n        });\n\n    }\n\n    public void deleteById(Integer id) {\n        databaseTypeDao.selectOptionalById(id).ifPresent(data -> {\n            if (DatabaseTypes.has(data.getDatabaseType())) {\n                throw DomainErrors.MUST_NOT_MODIFY_SYSTEM_DEFAULT_DATABASE_TYPE.exception();\n            }\n            databaseTypeDao.deleteById(id);\n            driverResources.delete(data.getDatabaseType());\n        });\n    }\n\n    public Page<DatabaseTypePageResponse> findByPage(Pageable page,\n                                                     DatabaseTypePageCondition condition) {\n        Page<DatabaseTypePojo> pageData = databaseTypeDao.selectByPage(page, condition.toCondition());\n        List<String> databaseTypes = pageData.map(DatabaseTypePojo::getDatabaseType).toList();\n        Map<String, Integer> projectCountMapByDatabaseType = projectDao.countByDatabaseTypes(databaseTypes);\n        return pageData\n                .map(data -> {\n                    Integer count = projectCountMapByDatabaseType.getOrDefault(data.getDatabaseType(), 0);\n                    return databaseTypePojoConverter.toPageResponse(data, count);\n                });\n    }\n\n    public List<DatabaseTypeSimpleResponse> listSimpleDatabaseTypes() {\n        return databaseTypeDao.selectAll()\n                .stream()\n                .map(type -> {\n                    DatabaseTypeSimpleResponse response = new DatabaseTypeSimpleResponse();\n                    response.setDatabaseType(type.getDatabaseType());\n                    response.setUrlPattern(type.getUrlPattern());\n                    response.setDescription(type.getDescription());\n                    response.setJdbcProtocol(type.getJdbcProtocol());\n                    return response;\n                })\n                .collect(Collectors.toList());\n    }\n\n    public Optional<DatabaseTypeDetailResponse> selectOne(Integer id) {\n        return databaseTypeDao.selectOptionalById(id)\n                .map(databaseTypePojoConverter::toDetailResponse);\n    }\n\n    public String resolveDriverClassName(DriverClassNameResolveRequest request) {\n        return driverResources.resolveSqlDriverNameFromJar(request.getJdbcDriverFileUrl());\n    }\n\n}\n", "package com.databasir.core.infrastructure.connection;\n\nimport com.databasir.core.domain.DomainErrors;\nimport com.databasir.core.infrastructure.driver.DriverResources;\nimport com.databasir.dao.impl.DatabaseTypeDao;\nimport com.databasir.dao.tables.pojos.DatabaseTypePojo;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Component;\n\nimport java.io.File;\nimport java.lang.reflect.InvocationTargetException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.sql.Connection;\nimport java.sql.Driver;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\n@Component\n@RequiredArgsConstructor\n@Slf4j\n@Order\npublic class CustomDatabaseConnectionFactory implements DatabaseConnectionFactory {\n\n    private final DatabaseTypeDao databaseTypeDao;\n\n    private final DriverResources driverResources;\n\n    @Override\n    public boolean support(String databaseType) {\n        return databaseTypeDao.existsByDatabaseType(databaseType);\n    }\n\n    @Override\n    public Connection getConnection(Context context) throws SQLException {\n        DatabaseTypePojo type = databaseTypeDao.selectByDatabaseType(context.getDatabaseType());\n        File driverFile = driverResources.loadOrDownload(context.getDatabaseType(), type.getJdbcDriverFileUrl());\n        URLClassLoader loader = null;\n        try {\n            loader = new URLClassLoader(\n                    new URL[]{\n                            driverFile.toURI().toURL()\n                    },\n                    this.getClass().getClassLoader()\n            );\n        } catch (MalformedURLException e) {\n            log.error(\"load driver error \" + context, e);\n            throw DomainErrors.CONNECT_DATABASE_FAILED.exception(e.getMessage());\n        }\n        // retrieve the driver class\n\n        Class<?> clazz = null;\n        Driver driver = null;\n        try {\n            clazz = Class.forName(type.getJdbcDriverClassName(), true, loader);\n            driver = (Driver) clazz.getConstructor().newInstance();\n        } catch (ClassNotFoundException e) {\n            log.error(\"init driver error\", e);\n            throw DomainErrors.CONNECT_DATABASE_FAILED.exception(\"\u9a71\u52a8\u521d\u59cb\u5316\u5f02\u5e38, \u8bf7\u68c0\u67e5 Driver name\uff1a\" + e.getMessage());\n        } catch (InvocationTargetException\n                 | InstantiationException\n                 | IllegalAccessException\n                 | NoSuchMethodException e) {\n            log.error(\"init driver error\", e);\n            throw DomainErrors.CONNECT_DATABASE_FAILED.exception(\"\u9a71\u52a8\u521d\u59cb\u5316\u5f02\u5e38\uff1a\" + e.getMessage());\n        }\n\n        String urlPattern = type.getUrlPattern();\n        String jdbcUrl = urlPattern.replace(\"{{jdbc.protocol}}\", type.getJdbcProtocol())\n                .replace(\"{{db.url}}\", context.getUrl())\n                .replace(\"{{db.name}}\", context.getDatabaseName())\n                .replace(\"{{db.schema}}\", context.getSchemaName());\n        Properties info = new Properties();\n        info.put(\"user\", context.getUsername());\n        info.put(\"password\", context.getPassword());\n        return driver.connect(jdbcUrl, info);\n    }\n\n}\n", "package com.databasir.core.infrastructure.driver;\n\nimport com.databasir.core.domain.DomainErrors;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StreamUtils;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.UUID;\nimport java.util.jar.JarFile;\n\n@Component\n@Slf4j\n@RequiredArgsConstructor\npublic class DriverResources {\n\n    @Value(\"${databasir.db.driver-directory}\")\n    private String driverBaseDirectory;\n\n    private final RestTemplate restTemplate;\n\n    public void delete(String databaseType) {\n        Path path = Paths.get(driverFilePath(driverBaseDirectory, databaseType));\n        try {\n            Files.deleteIfExists(path);\n        } catch (IOException e) {\n            log.error(\"delete driver error \" + databaseType, e);\n        }\n    }\n\n    public String resolveSqlDriverNameFromJar(String driverFileUrl) {\n        String tempFilePath = \"temp/\" + UUID.randomUUID() + \".jar\";\n        File driverFile = doDownload(driverFileUrl, tempFilePath);\n        String className = doResolveSqlDriverNameFromJar(driverFile);\n        try {\n            Files.deleteIfExists(driverFile.toPath());\n        } catch (IOException e) {\n            log.error(\"delete driver error \" + tempFilePath, e);\n        }\n        return className;\n    }\n\n    public File loadOrDownload(String databaseType, String driverFileUrl) {\n        String filePath = driverFilePath(driverBaseDirectory, databaseType);\n        Path path = Path.of(filePath);\n        if (Files.exists(path)) {\n            // ignore\n            log.debug(\"{} already exists, ignore download from {}\", filePath, driverFileUrl);\n            return path.toFile();\n        }\n        return this.doDownload(driverFileUrl, filePath);\n    }\n\n    private File doDownload(String driverFileUrl, String filePath) {\n        Path path = Path.of(filePath);\n\n        // create parent directory\n        if (Files.notExists(path)) {\n            path.getParent().toFile().mkdirs();\n            try {\n                Files.createFile(path);\n            } catch (IOException e) {\n                log.error(\"create file error \" + filePath, e);\n                throw DomainErrors.DOWNLOAD_DRIVER_ERROR.exception(e.getMessage());\n            }\n        }\n\n        // download\n        try {\n            return restTemplate.execute(driverFileUrl, HttpMethod.GET, null, response -> {\n                if (response.getStatusCode().is2xxSuccessful()) {\n                    File file = path.toFile();\n                    FileOutputStream out = new FileOutputStream(file);\n                    StreamUtils.copy(response.getBody(), out);\n                    IOUtils.closeQuietly(out, ex -> log.error(\"close file error\", ex));\n                    log.info(\"{} download success \", filePath);\n                    return file;\n                } else {\n                    log.error(\"{} download error from {}: {} \", filePath, driverFileUrl, response);\n                    throw DomainErrors.DOWNLOAD_DRIVER_ERROR.exception(\"\u9a71\u52a8\u4e0b\u8f7d\u5931\u8d25\uff1a\"\n                            + response.getStatusCode()\n                            + \", \"\n                            + response.getStatusText());\n                }\n            });\n        } catch (IllegalArgumentException e) {\n            log.error(filePath + \" download driver error\", e);\n            throw DomainErrors.DOWNLOAD_DRIVER_ERROR.exception(e.getMessage());\n        }\n    }\n\n    private String doResolveSqlDriverNameFromJar(File driverFile) {\n        JarFile jarFile = null;\n        try {\n            jarFile = new JarFile(driverFile);\n        } catch (IOException e) {\n            log.error(\"resolve driver class name error\", e);\n            throw DomainErrors.DRIVER_CLASS_NAME_OBTAIN_ERROR.exception(e.getMessage());\n        }\n\n        final JarFile driverJar = jarFile;\n        String driverClassName = jarFile.stream()\n                .filter(entry -> entry.getName().contains(\"META-INF/services/java.sql.Driver\"))\n                .findFirst()\n                .map(entry -> {\n                    InputStream stream = null;\n                    BufferedReader reader = null;\n                    try {\n                        stream = driverJar.getInputStream(entry);\n                        reader = new BufferedReader(new InputStreamReader(stream));\n                        return reader.readLine();\n                    } catch (IOException e) {\n                        log.error(\"resolve driver class name error\", e);\n                        throw DomainErrors.DRIVER_CLASS_NAME_OBTAIN_ERROR.exception(e.getMessage());\n                    } finally {\n                        IOUtils.closeQuietly(reader, ex -> log.error(\"close reader error\", ex));\n                    }\n                })\n                .orElseThrow(DomainErrors.DRIVER_CLASS_NAME_OBTAIN_ERROR::exception);\n        IOUtils.closeQuietly(jarFile, ex -> log.error(\"close jar file error\", ex));\n        return driverClassName;\n    }\n\n    private String driverFilePath(String baseDir, String databaseType) {\n        String fileName = databaseType + \".jar\";\n        String filePath;\n        if (baseDir.endsWith(File.separator)) {\n            filePath = baseDir + fileName;\n        } else {\n            filePath = baseDir + File.separator + fileName;\n        }\n        return filePath;\n    }\n}\n", "package com.databasir.core.infrastructure.jwt;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.exceptions.JWTVerificationException;\nimport com.auth0.jwt.interfaces.JWTVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.Date;\n\n@Component\n@Slf4j\npublic class JwtTokens {\n\n    // 15 minutes\n    private static final long ACCESS_EXPIRE_TIME = 1000 * 60 * 15;\n\n    public static final String TOKEN_PREFIX = \"Bearer \";\n\n    private static final String ISSUER = \"Databasir\";\n\n    private static final String SECRET = \"Databasir2022\";\n\n    public String accessToken(String username) {\n        Algorithm algorithm = Algorithm.HMAC256(SECRET);\n\n        return JWT.create()\n                .withExpiresAt(new Date(new Date().getTime() + ACCESS_EXPIRE_TIME))\n                .withIssuer(ISSUER)\n                .withClaim(\"username\", username)\n                .sign(algorithm);\n    }\n\n    public boolean verify(String token) {\n        JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET))\n                .withIssuer(ISSUER)\n                .build();\n        try {\n            verifier.verify(token);\n            return true;\n        } catch (JWTVerificationException e) {\n            log.warn(\"verify jwt token failed \" + e.getMessage());\n            return false;\n        }\n    }\n\n    public String getUsername(String token) {\n        return JWT.decode(token).getClaim(\"username\").asString();\n    }\n\n    public LocalDateTime expireAt(String token) {\n        long time = JWT.decode(token).getExpiresAt().getTime();\n        return Instant.ofEpochMilli(time)\n                .atZone(ZoneId.systemDefault())\n                .toLocalDateTime();\n    }\n}\n", "package com.databasir.core.domain.database.service;\n\nimport com.databasir.common.DatabasirException;\nimport com.databasir.core.BaseTest;\nimport com.databasir.core.domain.DomainErrors;\nimport com.databasir.core.domain.database.data.DatabaseTypeCreateRequest;\nimport com.databasir.core.domain.database.data.DatabaseTypeUpdateRequest;\nimport com.databasir.dao.impl.DatabaseTypeDao;\nimport com.databasir.dao.tables.pojos.DatabaseTypePojo;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.jdbc.Sql;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Transactional\nclass DatabaseTypeServiceTest extends BaseTest {\n\n    @Autowired\n    private DatabaseTypeService databaseTypeService;\n\n    @Autowired\n    private DatabaseTypeDao databaseTypeDao;\n\n    @Test\n    void create() {\n        DatabaseTypeCreateRequest request = new DatabaseTypeCreateRequest();\n        request.setDatabaseType(\"ut-mysql\");\n        request.setIcon(\"\");\n        request.setDescription(\"integration test\");\n        request.setJdbcDriverFileUrl(\"some url\");\n        request.setJdbcDriverClassName(\"com.mysql.jdbc.Driver\");\n        request.setJdbcProtocol(\"jdbc:mysql\");\n        request.setUrlPattern(\"{{jdbc.protocol}}//{{db.url}}/{{db.schema}}\");\n        Integer id = databaseTypeService.create(request);\n        Assertions.assertNotNull(id);\n    }\n\n    @Test\n    @Sql(\"classpath:sql/domain/database/CreateDuplicate.sql\")\n    void createWhenDatabaseTypeDuplicate() {\n        DatabaseTypeCreateRequest request = new DatabaseTypeCreateRequest();\n        request.setDatabaseType(\"ut-mysql\");\n        request.setIcon(\"\");\n        request.setDescription(\"integration test\");\n        request.setJdbcDriverFileUrl(\"some url\");\n        request.setJdbcDriverClassName(\"com.mysql.jdbc.Driver\");\n        request.setJdbcProtocol(\"jdbc:mysql\");\n        request.setUrlPattern(\"{{jdbc.protocol}}//{{db.url}}/{{db.schema}}\");\n\n        DatabasirException err = Assertions.assertThrows(DatabasirException.class,\n                () -> databaseTypeService.create(request));\n        Assertions.assertEquals(DomainErrors.DATABASE_TYPE_NAME_DUPLICATE.getErrCode(), err.getErrCode());\n    }\n\n    @Test\n    @Sql(\"classpath:sql/domain/database/Update.sql\")\n    void update() {\n        DatabaseTypeUpdateRequest request = new DatabaseTypeUpdateRequest();\n        request.setId(-1000);\n        request.setIcon(\"\");\n        request.setDatabaseType(\"new-type\");\n        request.setDescription(\"integration test\");\n        request.setJdbcDriverFileUrl(\"some url\");\n        request.setJdbcDriverClassName(\"com.mysql.jdbc.Driver\");\n        request.setJdbcProtocol(\"jdbc:postgresql\");\n        request.setUrlPattern(\"{{jdbc.protocol}}//{{db.url}}/{{db.schema}}\");\n        databaseTypeService.update(request);\n\n        DatabaseTypePojo pojo = databaseTypeDao.selectByDatabaseType(\"new-type\");\n        Assertions.assertNotNull(pojo);\n        Assertions.assertEquals(\"integration test\", pojo.getDescription());\n        Assertions.assertEquals(\"jdbc:postgresql\", pojo.getJdbcProtocol());\n        Assertions.assertEquals(\"{{jdbc.protocol}}//{{db.url}}/{{db.schema}}\", pojo.getUrlPattern());\n    }\n\n    @Test\n    @Sql(\"classpath:sql/domain/database/DeleteById.sql\")\n    void deleteById() {\n        int id = -1000;\n        databaseTypeService.deleteById(id);\n        Assertions.assertFalse(databaseTypeDao.existsById(id));\n    }\n\n    @Test\n    void deleteByIdWhenNotExists() {\n        int id = -1000;\n        databaseTypeService.deleteById(id);\n        Assertions.assertFalse(databaseTypeDao.existsById(id));\n    }\n\n}", "logging.level.org.jooq=INFO\nserver.port=8080\n# datasource\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.username=${databasir.db.username}\nspring.datasource.password=${databasir.db.password}\nspring.datasource.url=jdbc:mysql://${databasir.db.url}/${databasir.db.name:databasir}?serverTimezone=UTC&characterEncoding=utf-8\n# driver directory\nspring.jooq.sql-dialect=mysql\n# flyway\nspring.flyway.enabled=true\nspring.flyway.baseline-on-migrate=true\nspring.flyway.locations=classpath:db/migration\n# db\ndatabasir.db.url=localhost:3306\ndatabasir.db.username=root\ndatabasir.db.password=123456\ndatabasir.db.driver-directory=drivers"], "fixing_code": ["server.port=8080\nlogging.level.org.jooq=INFO\nspring.jooq.sql-dialect=mysql\n# flyway\nspring.flyway.enabled=true\nspring.flyway.baseline-on-migrate=true\nspring.flyway.locations=classpath:db/migration\n# db\ndatabasir.db.url=localhost:3306\ndatabasir.db.username=root\ndatabasir.db.password=123456\ndatabasir.db.driver-directory=drivers\ndatabasir.jwt.secret=DatabasirJwtSecret", "server.port=8080\n# datasource\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.username=${databasir.db.username}\nspring.datasource.password=${databasir.db.password}\nspring.datasource.url=jdbc:mysql://${databasir.db.url}/${databasir.db.name:databasir}\n# jooq\nspring.jooq.sql-dialect=mysql\n# flyway\nspring.flyway.enabled=true\nspring.flyway.baseline-on-migrate=true\nspring.flyway.locations=classpath:db/migration\n# driver directory\ndatabasir.db.driver-directory=drivers\ndatabasir.jwt.secret=${random.uuid}", "package com.databasir.core.domain;\n\nimport com.databasir.common.DatabasirErrors;\nimport com.databasir.common.DatabasirException;\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\n@RequiredArgsConstructor\n@Getter\npublic enum DomainErrors implements DatabasirErrors {\n    REFRESH_TOKEN_EXPIRED(\"X_0001\", \"refresh token expired\"),\n    INVALID_REFRESH_TOKEN_OPERATION(\"X_0002\", \"invalid refresh token operation\"),\n    NETWORK_ERROR(\"X_0003\", \"\u7f51\u7edc\u4f3c\u4e4e\u4e0d\u7a33\u5b9a\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\"),\n    INVALID_ACCESS_TOKEN(\"X_0004\", \"\u65e0\u6548\u7684 access token\"),\n\n    NOT_SUPPORT_DATABASE_TYPE(\"A_10000\", \"\u4e0d\u652f\u6301\u7684\u6570\u636e\u5e93\u7c7b\u578b, \u8bf7\u68c0\u67e5\u9879\u76ee\u914d\u7f6e\"),\n    PROJECT_NOT_FOUND(\"A_10001\", \"\u9879\u76ee\u4e0d\u5b58\u5728\"),\n    DATABASE_META_NOT_FOUND(\"A_10002\", \"\u83b7\u53d6\u6570\u636e\u5e93\u4fe1\u606f\u5931\u8d25\"),\n    CONNECT_DATABASE_FAILED(\"A_10003\", \"\u8fde\u63a5\u6570\u636e\u5e93\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u8fde\u63a5\u914d\u7f6e\"),\n    GROUP_OWNER_MUST_NOT_BE_EMPTY(\"A_10004\", \"\u8bf7\u81f3\u5c11\u6307\u5b9a\u4e00\u4e2a\u5206\u7ec4\u7ec4\u957f\"),\n    PASSWORD_MUST_NOT_BE_BLANK(\"A_10005\", \"\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a\"),\n    USERNAME_OR_EMAIL_DUPLICATE(\"A_10006\", \"\u7528\u6237\u540d\u6216\u90ae\u7bb1\u5df2\u5b58\u5728\"),\n    USER_ROLE_DUPLICATE(\"A_10007\", \"\u7528\u6237\u89d2\u8272\u5df2\u5b58\u5728\"),\n    PROJECT_NAME_DUPLICATE(\"A_10008\", \"\u9879\u76ee\u540d\u79f0\u5df2\u88ab\u5360\u7528\"),\n    CANNOT_UPDATE_SELF_ROLE(\"A_10009\", \"\u65e0\u6cd5\u5bf9\u81ea\u5df1\u6267\u884c\u89d2\u8272\u53d8\u66f4\u7684\u64cd\u4f5c\"),\n    UPDATE_PASSWORD_CONFIRM_FAILED(\"A_10010\", \"\u4e24\u6b21\u5bc6\u7801\u8f93\u5165\u4e0d\u4e00\u81f4\"),\n    ORIGIN_PASSWORD_NOT_CORRECT(\"A_10011\", \"\u539f\u5bc6\u7801\u4e0d\u6b63\u786e\"),\n    INVALID_CRON_EXPRESSION(\"A_10012\", \"\u4e0d\u5408\u6cd5\u7684 cron \u8868\u8fbe\u5f0f\"),\n    REGISTRATION_ID_DUPLICATE(\"A_10013\", \"\u5e94\u7528\u6ce8\u518c ID \u4e0d\u80fd\u91cd\u590d\"),\n    REGISTRATION_ID_NOT_FOUND(\"A_10014\", \"\u5e94\u7528 ID \u4e0d\u5b58\u5728\"),\n    MISS_REQUIRED_PARAMETERS(\"A_10015\", \"\u7f3a\u5c11\u5fc5\u586b\u53c2\u6570\"),\n    DATABASE_TYPE_NAME_DUPLICATE(\"A_10016\", \"\u6570\u636e\u5e93\u7c7b\u578b\u540d\u5df2\u5b58\u5728\"),\n    MUST_NOT_MODIFY_SYSTEM_DEFAULT_DATABASE_TYPE(\"A_10017\", \"\u7981\u6b62\u4fee\u6539\u7cfb\u7edf\u9ed8\u8ba4\u6570\u636e\u5e93\u7c7b\u578b\"),\n    DOWNLOAD_DRIVER_ERROR(\"A_10018\", \"\u9a71\u52a8\u4e0b\u8f7d\u5931\u8d25\"),\n    INVALID_DATABASE_TYPE_URL_PATTERN(\"A_10019\", \"\u4e0d\u5408\u6cd5\u7684 url pattern\"),\n    DOCUMENT_VERSION_IS_INVALID(\"A_10020\", \"\u6587\u6863\u7248\u672c\u4e0d\u5408\u6cd5\"),\n    CANNOT_UPDATE_SELF_ENABLED_STATUS(\"A_10021\", \"\u65e0\u6cd5\u5bf9\u81ea\u5df1\u6267\u884c\u542f\u7528\u7981\u7528\u64cd\u4f5c\"),\n    MOCK_DATA_SCRIPT_MUST_NOT_BE_BLANK(\"A_10022\", \"\u811a\u672c\u5185\u5bb9\u4e0d\u80fd\u4e3a\u7a7a\"),\n    TABLE_META_NOT_FOUND(\"A_10023\", \"\u4e0d\u5b58\u5728\u7684\u6570\u636e\u5e93\u8868\"),\n    DEPENDENT_COLUMN_NAME_MUST_NOT_BE_BLANK(\"A_10024\", \"\u5fc5\u987b\u6307\u5b9a\u4f9d\u8d56\u7684\u5b57\u6bb5\"),\n    DEPENDENT_REF_MUST_NOT_BE_BLANK(\"A_10025\", \"\u8bf7\u9009\u62e9\u5173\u8054\u8868\u548c\u5b57\u6bb5\"),\n    MUST_NOT_REF_SELF(\"A_10026\", \"\u4e0d\u80fd\u5f15\u7528\u81ea\u8eab\"),\n    CIRCLE_REFERENCE(\"A_10027\", \"\u68c0\u67e5\u5230\u5faa\u73af\u5f15\u7528\"),\n    DUPLICATE_COLUMN(\"A_10028\", \"\u91cd\u590d\u7684\u5217\"),\n    INVALID_MOCK_DATA_SCRIPT(\"A_10029\", \"\u4e0d\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f\"),\n    CANNOT_DELETE_SELF(\"A_10030\", \"\u65e0\u6cd5\u5bf9\u81ea\u5df1\u6267\u884c\u5220\u9664\u8d26\u53f7\u64cd\u4f5c\"),\n    DRIVER_CLASS_NOT_FOUND(\"A_10031\", \"\u83b7\u53d6\u9a71\u52a8\u7c7b\u540d\u5931\u8d25\"),\n    ;\n\n    private final String errCode;\n\n    private final String errMessage;\n\n    public DatabasirException exception() {\n        return new DatabasirException(this);\n    }\n\n    public DatabasirException exception(Throwable origin) {\n        return new DatabasirException(this, origin);\n    }\n\n    public DatabasirException exception(String message, Throwable origin) {\n        return new DatabasirException(this, message, origin);\n    }\n\n    public DatabasirException exception(String s) {\n        return exception(s, null);\n    }\n}\n", "package com.databasir.core.domain.database.service;\n\nimport com.databasir.core.domain.DomainErrors;\nimport com.databasir.core.domain.database.converter.DatabaseTypePojoConverter;\nimport com.databasir.core.domain.database.data.*;\nimport com.databasir.core.infrastructure.connection.DatabaseTypes;\nimport com.databasir.core.infrastructure.driver.DriverResources;\nimport com.databasir.dao.impl.DatabaseTypeDao;\nimport com.databasir.dao.impl.ProjectDao;\nimport com.databasir.dao.tables.pojos.DatabaseTypePojo;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.dao.DuplicateKeyException;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class DatabaseTypeService {\n\n    private final DriverResources driverResources;\n\n    private final DatabaseTypeDao databaseTypeDao;\n\n    private final ProjectDao projectDao;\n\n    private final DatabaseTypePojoConverter databaseTypePojoConverter;\n\n    public Integer create(DatabaseTypeCreateRequest request) {\n        driverResources.validateJar(request.getJdbcDriverFileUrl(), request.getJdbcDriverClassName());\n        DatabaseTypePojo pojo = databaseTypePojoConverter.of(request);\n        try {\n            return databaseTypeDao.insertAndReturnId(pojo);\n        } catch (DuplicateKeyException e) {\n            throw DomainErrors.DATABASE_TYPE_NAME_DUPLICATE.exception();\n        }\n    }\n\n    @Transactional\n    public void update(DatabaseTypeUpdateRequest request) {\n        databaseTypeDao.selectOptionalById(request.getId()).ifPresent(data -> {\n            if (DatabaseTypes.has(data.getDatabaseType())) {\n                throw DomainErrors.MUST_NOT_MODIFY_SYSTEM_DEFAULT_DATABASE_TYPE.exception();\n            }\n            driverResources.validateJar(request.getJdbcDriverFileUrl(), request.getJdbcDriverClassName());\n            DatabaseTypePojo pojo = databaseTypePojoConverter.of(request);\n            try {\n                databaseTypeDao.updateById(pojo);\n            } catch (DuplicateKeyException e) {\n                throw DomainErrors.DATABASE_TYPE_NAME_DUPLICATE.exception();\n            }\n\n            // \u540d\u79f0\u4fee\u6539\uff0c\u4e0b\u8f7d\u5730\u5740\u4fee\u6539\u9700\u8981\u5220\u9664\u539f\u6709\u7684 driver\n            if (!Objects.equals(request.getDatabaseType(), data.getDatabaseType())\n                    || !Objects.equals(request.getJdbcDriverFileUrl(), data.getJdbcDriverFileUrl())) {\n                driverResources.deleteByDatabaseType(data.getDatabaseType());\n            }\n        });\n\n    }\n\n    public void deleteById(Integer id) {\n        databaseTypeDao.selectOptionalById(id).ifPresent(data -> {\n            if (DatabaseTypes.has(data.getDatabaseType())) {\n                throw DomainErrors.MUST_NOT_MODIFY_SYSTEM_DEFAULT_DATABASE_TYPE.exception();\n            }\n            databaseTypeDao.deleteById(id);\n            driverResources.deleteByDatabaseType(data.getDatabaseType());\n        });\n    }\n\n    public Page<DatabaseTypePageResponse> findByPage(Pageable page,\n                                                     DatabaseTypePageCondition condition) {\n        Page<DatabaseTypePojo> pageData = databaseTypeDao.selectByPage(page, condition.toCondition());\n        List<String> databaseTypes = pageData.map(DatabaseTypePojo::getDatabaseType).toList();\n        Map<String, Integer> projectCountMapByDatabaseType = projectDao.countByDatabaseTypes(databaseTypes);\n        return pageData\n                .map(data -> {\n                    Integer count = projectCountMapByDatabaseType.getOrDefault(data.getDatabaseType(), 0);\n                    return databaseTypePojoConverter.toPageResponse(data, count);\n                });\n    }\n\n    public List<DatabaseTypeSimpleResponse> listSimpleDatabaseTypes() {\n        return databaseTypeDao.selectAll()\n                .stream()\n                .map(type -> {\n                    DatabaseTypeSimpleResponse response = new DatabaseTypeSimpleResponse();\n                    response.setDatabaseType(type.getDatabaseType());\n                    response.setUrlPattern(type.getUrlPattern());\n                    response.setDescription(type.getDescription());\n                    response.setJdbcProtocol(type.getJdbcProtocol());\n                    return response;\n                })\n                .collect(Collectors.toList());\n    }\n\n    public Optional<DatabaseTypeDetailResponse> selectOne(Integer id) {\n        return databaseTypeDao.selectOptionalById(id)\n                .map(databaseTypePojoConverter::toDetailResponse);\n    }\n\n    public String resolveDriverClassName(DriverClassNameResolveRequest request) {\n        return driverResources.resolveDriverClassName(request.getJdbcDriverFileUrl());\n    }\n\n}\n", "package com.databasir.core.infrastructure.connection;\n\nimport com.databasir.core.domain.DomainErrors;\nimport com.databasir.core.infrastructure.driver.DriverResources;\nimport com.databasir.dao.impl.DatabaseTypeDao;\nimport com.databasir.dao.tables.pojos.DatabaseTypePojo;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Component;\n\nimport java.io.File;\nimport java.lang.reflect.InvocationTargetException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.sql.Connection;\nimport java.sql.Driver;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\n@Component\n@RequiredArgsConstructor\n@Slf4j\n@Order\npublic class CustomDatabaseConnectionFactory implements DatabaseConnectionFactory {\n\n    private final DatabaseTypeDao databaseTypeDao;\n\n    private final DriverResources driverResources;\n\n    @Override\n    public boolean support(String databaseType) {\n        return databaseTypeDao.existsByDatabaseType(databaseType);\n    }\n\n    @Override\n    public Connection getConnection(Context context) throws SQLException {\n        String databaseType = context.getDatabaseType();\n        DatabaseTypePojo type = databaseTypeDao.selectByDatabaseType(databaseType);\n        File driverFile = driverResources.loadOrDownloadByDatabaseType(databaseType, type.getJdbcDriverFileUrl());\n\n        URLClassLoader loader = null;\n        try {\n            loader = new URLClassLoader(\n                    new URL[]{\n                            driverFile.toURI().toURL()\n                    },\n                    this.getClass().getClassLoader()\n            );\n        } catch (MalformedURLException e) {\n            log.error(\"load driver error \" + context, e);\n            throw DomainErrors.CONNECT_DATABASE_FAILED.exception(e.getMessage());\n        }\n        // retrieve the driver class\n\n        Class<?> clazz = null;\n        Driver driver = null;\n        try {\n            clazz = Class.forName(type.getJdbcDriverClassName(), false, loader);\n            driver = (Driver) clazz.getConstructor().newInstance();\n        } catch (ClassNotFoundException e) {\n            log.error(\"init driver error\", e);\n            throw DomainErrors.CONNECT_DATABASE_FAILED.exception(\"\u9a71\u52a8\u521d\u59cb\u5316\u5f02\u5e38, \u8bf7\u68c0\u67e5\u9a71\u52a8\u7c7b\u540d\uff1a\" + e.getMessage());\n        } catch (InvocationTargetException\n                 | InstantiationException\n                 | IllegalAccessException\n                 | NoSuchMethodException e) {\n            log.error(\"init driver error\", e);\n            throw DomainErrors.CONNECT_DATABASE_FAILED.exception(\"\u9a71\u52a8\u521d\u59cb\u5316\u5f02\u5e38\uff1a\" + e.getMessage());\n        }\n\n        String urlPattern = type.getUrlPattern();\n        String jdbcUrl = urlPattern.replace(\"{{jdbc.protocol}}\", type.getJdbcProtocol())\n                .replace(\"{{db.url}}\", context.getUrl())\n                .replace(\"{{db.name}}\", context.getDatabaseName())\n                .replace(\"{{db.schema}}\", context.getSchemaName());\n        Properties info = new Properties();\n        info.put(\"user\", context.getUsername());\n        info.put(\"password\", context.getPassword());\n        return driver.connect(jdbcUrl, info);\n    }\n\n}\n", "package com.databasir.core.infrastructure.driver;\n\nimport com.databasir.core.domain.DomainErrors;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.ClassUtils;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StreamUtils;\nimport org.springframework.web.client.RestClientException;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.io.*;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.jar.JarFile;\n\n@Component\n@Slf4j\n@RequiredArgsConstructor\npublic class DriverResources {\n\n    @Value(\"${databasir.db.driver-directory}\")\n    private String driverBaseDirectory;\n\n    private final RestTemplate restTemplate;\n\n    public void deleteByDatabaseType(String databaseType) {\n        Path path = Paths.get(driverFilePath(driverBaseDirectory, databaseType));\n        try {\n            Files.deleteIfExists(path);\n        } catch (IOException e) {\n            log.error(\"delete driver error \" + databaseType, e);\n        }\n    }\n\n    public Optional<File> loadByDatabaseType(String databaseType) {\n        Path path = Paths.get(driverFilePath(driverBaseDirectory, databaseType));\n        if (Files.exists(path)) {\n            return Optional.of(path.toFile());\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    public File loadOrDownloadByDatabaseType(String databaseType, String driverFileUrl) {\n        return loadByDatabaseType(databaseType)\n                .orElseGet(() -> download(driverFileUrl, driverFilePath(driverBaseDirectory, databaseType)));\n    }\n\n    public String resolveDriverClassName(String driverFileUrl) {\n        String tempFilePath = \"temp/\" + UUID.randomUUID() + \".jar\";\n        File driverFile = download(driverFileUrl, tempFilePath);\n        String className = resolveDriverClassName(driverFile);\n        try {\n            Files.deleteIfExists(driverFile.toPath());\n        } catch (IOException e) {\n            log.error(\"delete driver error \" + tempFilePath, e);\n        }\n        return className;\n    }\n\n    public String resolveDriverClassName(File driverFile) {\n        JarFile jarFile = null;\n        try {\n            jarFile = new JarFile(driverFile);\n        } catch (IOException e) {\n            log.error(\"resolve driver class name error\", e);\n            throw DomainErrors.DRIVER_CLASS_NOT_FOUND.exception(e.getMessage());\n        }\n\n        final JarFile driverJar = jarFile;\n        String driverClassName = jarFile.stream()\n                .filter(entry -> entry.getName().contains(\"META-INF/services/java.sql.Driver\"))\n                .findFirst()\n                .map(entry -> {\n                    InputStream stream = null;\n                    BufferedReader reader = null;\n                    try {\n                        stream = driverJar.getInputStream(entry);\n                        reader = new BufferedReader(new InputStreamReader(stream));\n                        return reader.readLine();\n                    } catch (IOException e) {\n                        log.error(\"resolve driver class name error\", e);\n                        throw DomainErrors.DRIVER_CLASS_NOT_FOUND.exception(e.getMessage());\n                    } finally {\n                        IOUtils.closeQuietly(reader, ex -> log.error(\"close reader error\", ex));\n                    }\n                })\n                .orElseThrow(DomainErrors.DRIVER_CLASS_NOT_FOUND::exception);\n        IOUtils.closeQuietly(jarFile, ex -> log.error(\"close jar file error\", ex));\n        return driverClassName;\n    }\n\n    private File download(String driverFileUrl, String targetFile) {\n        Path path = Path.of(targetFile);\n\n        // create parent directory\n        if (Files.notExists(path)) {\n            path.getParent().toFile().mkdirs();\n            try {\n                Files.createFile(path);\n            } catch (IOException e) {\n                log.error(\"create file error \" + targetFile, e);\n                throw DomainErrors.DOWNLOAD_DRIVER_ERROR.exception(e.getMessage());\n            }\n        }\n\n        // download\n        try {\n            return restTemplate.execute(driverFileUrl, HttpMethod.GET, null, response -> {\n                if (response.getStatusCode().is2xxSuccessful()) {\n                    File file = path.toFile();\n                    FileOutputStream out = new FileOutputStream(file);\n                    StreamUtils.copy(response.getBody(), out);\n                    IOUtils.closeQuietly(out, ex -> log.error(\"close file error\", ex));\n                    log.info(\"{} download success \", targetFile);\n                    return file;\n                } else {\n                    log.error(\"{} download error from {}: {} \", targetFile, driverFileUrl, response);\n                    throw DomainErrors.DOWNLOAD_DRIVER_ERROR.exception(\"\u9a71\u52a8\u4e0b\u8f7d\u5931\u8d25\uff1a\"\n                            + response.getStatusCode()\n                            + \", \"\n                            + response.getStatusText());\n                }\n            });\n        } catch (RestClientException e) {\n            log.error(targetFile + \" download driver error\", e);\n            throw DomainErrors.DOWNLOAD_DRIVER_ERROR.exception(e.getMessage());\n        }\n    }\n\n    public void validateJar(String driverFileUrl, String className) {\n        String tempFilePath = \"temp/\" + UUID.randomUUID() + \".jar\";\n        File driverFile = download(driverFileUrl, tempFilePath);\n        URLClassLoader loader = null;\n        try {\n            loader = new URLClassLoader(\n                    new URL[]{driverFile.toURI().toURL()},\n                    this.getClass().getClassLoader()\n            );\n        } catch (MalformedURLException e) {\n            log.error(\"load driver jar error \", e);\n            throw DomainErrors.DOWNLOAD_DRIVER_ERROR.exception(e.getMessage());\n        }\n\n        try {\n            Class clazz = Class.forName(className, false, loader);\n            boolean isValid = ClassUtils.getAllInterfaces(clazz)\n                    .stream()\n                    .anyMatch(cls -> cls.getName().equals(\"java.sql.Driver\"));\n            if (!isValid) {\n                throw DomainErrors.DRIVER_CLASS_NOT_FOUND.exception(\"\u4e0d\u5408\u6cd5\u7684\u9a71\u52a8\u7c7b\uff0c\u8bf7\u91cd\u65b0\u6307\u5b9a\");\n            }\n        } catch (ClassNotFoundException e) {\n            log.error(\"init driver error\", e);\n            throw DomainErrors.DRIVER_CLASS_NOT_FOUND.exception(\"\u9a71\u52a8\u521d\u59cb\u5316\u5f02\u5e38, \u8bf7\u68c0\u67e5\u9a71\u52a8\u7c7b\u540d\uff1a\" + e.getMessage());\n        } finally {\n            IOUtils.closeQuietly(loader);\n            try {\n                Files.deleteIfExists(driverFile.toPath());\n            } catch (IOException e) {\n                log.error(\"delete driver error \" + tempFilePath, e);\n            }\n        }\n    }\n\n    private String driverFilePath(String baseDir, String databaseType) {\n        String fileName = databaseType + \".jar\";\n        String filePath;\n        if (baseDir.endsWith(File.separator)) {\n            filePath = baseDir + fileName;\n        } else {\n            filePath = baseDir + File.separator + fileName;\n        }\n        return filePath;\n    }\n}\n", "package com.databasir.core.infrastructure.jwt;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.exceptions.JWTVerificationException;\nimport com.auth0.jwt.interfaces.JWTVerifier;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.Date;\n\n@Component\n@Slf4j\npublic class JwtTokens {\n\n    // 15 minutes\n    private static final long ACCESS_EXPIRE_TIME = 1000 * 60 * 15;\n\n    public static final String TOKEN_PREFIX = \"Bearer \";\n\n    private static final String ISSUER = \"Databasir\";\n\n    @Value(\"${databasir.jwt.secret}\")\n    private String tokenSecret;\n\n    public String accessToken(String username) {\n        Algorithm algorithm = Algorithm.HMAC256(tokenSecret);\n\n        return JWT.create()\n                .withExpiresAt(new Date(new Date().getTime() + ACCESS_EXPIRE_TIME))\n                .withIssuer(ISSUER)\n                .withClaim(\"username\", username)\n                .sign(algorithm);\n    }\n\n    public boolean verify(String token) {\n        JWTVerifier verifier = JWT.require(Algorithm.HMAC256(tokenSecret))\n                .withIssuer(ISSUER)\n                .build();\n        try {\n            verifier.verify(token);\n            return true;\n        } catch (JWTVerificationException e) {\n            log.warn(\"verify jwt token failed \" + e.getMessage());\n            return false;\n        }\n    }\n\n    public String getUsername(String token) {\n        return JWT.decode(token).getClaim(\"username\").asString();\n    }\n\n    public LocalDateTime expireAt(String token) {\n        long time = JWT.decode(token).getExpiresAt().getTime();\n        return Instant.ofEpochMilli(time)\n                .atZone(ZoneId.systemDefault())\n                .toLocalDateTime();\n    }\n}\n", "package com.databasir.core.domain.database.service;\n\nimport com.databasir.common.DatabasirException;\nimport com.databasir.core.BaseTest;\nimport com.databasir.core.domain.DomainErrors;\nimport com.databasir.core.domain.database.data.DatabaseTypeCreateRequest;\nimport com.databasir.core.domain.database.data.DatabaseTypeUpdateRequest;\nimport com.databasir.core.infrastructure.driver.DriverResources;\nimport com.databasir.dao.impl.DatabaseTypeDao;\nimport com.databasir.dao.tables.pojos.DatabaseTypePojo;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.context.jdbc.Sql;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport static org.mockito.ArgumentMatchers.anyString;\n\n@Transactional\nclass DatabaseTypeServiceTest extends BaseTest {\n\n    @Autowired\n    private DatabaseTypeService databaseTypeService;\n\n    @Autowired\n    private DatabaseTypeDao databaseTypeDao;\n\n    @MockBean\n    private DriverResources driverResources;\n\n    @BeforeEach\n    public void setUp() {\n        Mockito.doNothing().when(driverResources).validateJar(anyString(), anyString());\n    }\n\n    @Test\n    void create() {\n        DatabaseTypeCreateRequest request = new DatabaseTypeCreateRequest();\n        request.setDatabaseType(\"ut-mysql\");\n        request.setIcon(\"\");\n        request.setDescription(\"integration test\");\n        request.setJdbcDriverFileUrl(\"some url\");\n        request.setJdbcDriverClassName(\"com.mysql.jdbc.Driver\");\n        request.setJdbcProtocol(\"jdbc:mysql\");\n        request.setUrlPattern(\"{{jdbc.protocol}}//{{db.url}}/{{db.schema}}\");\n        Integer id = databaseTypeService.create(request);\n        Assertions.assertNotNull(id);\n    }\n\n    @Test\n    @Sql(\"classpath:sql/domain/database/CreateDuplicate.sql\")\n    void createWhenDatabaseTypeDuplicate() {\n        DatabaseTypeCreateRequest request = new DatabaseTypeCreateRequest();\n        request.setDatabaseType(\"ut-mysql\");\n        request.setIcon(\"\");\n        request.setDescription(\"integration test\");\n        request.setJdbcDriverFileUrl(\"some url\");\n        request.setJdbcDriverClassName(\"com.mysql.jdbc.Driver\");\n        request.setJdbcProtocol(\"jdbc:mysql\");\n        request.setUrlPattern(\"{{jdbc.protocol}}//{{db.url}}/{{db.schema}}\");\n\n        DatabasirException err = Assertions.assertThrows(DatabasirException.class,\n                () -> databaseTypeService.create(request));\n        Assertions.assertEquals(DomainErrors.DATABASE_TYPE_NAME_DUPLICATE.getErrCode(), err.getErrCode());\n    }\n\n    @Test\n    @Sql(\"classpath:sql/domain/database/Update.sql\")\n    void update() {\n        DatabaseTypeUpdateRequest request = new DatabaseTypeUpdateRequest();\n        request.setId(-1000);\n        request.setIcon(\"\");\n        request.setDatabaseType(\"new-type\");\n        request.setDescription(\"integration test\");\n        request.setJdbcDriverFileUrl(\"some url\");\n        request.setJdbcDriverClassName(\"com.mysql.jdbc.Driver\");\n        request.setJdbcProtocol(\"jdbc:postgresql\");\n        request.setUrlPattern(\"{{jdbc.protocol}}//{{db.url}}/{{db.schema}}\");\n        databaseTypeService.update(request);\n\n        DatabaseTypePojo pojo = databaseTypeDao.selectByDatabaseType(\"new-type\");\n        Assertions.assertNotNull(pojo);\n        Assertions.assertEquals(\"integration test\", pojo.getDescription());\n        Assertions.assertEquals(\"jdbc:postgresql\", pojo.getJdbcProtocol());\n        Assertions.assertEquals(\"{{jdbc.protocol}}//{{db.url}}/{{db.schema}}\", pojo.getUrlPattern());\n    }\n\n    @Test\n    @Sql(\"classpath:sql/domain/database/DeleteById.sql\")\n    void deleteById() {\n        int id = -1000;\n        databaseTypeService.deleteById(id);\n        Assertions.assertFalse(databaseTypeDao.existsById(id));\n    }\n\n    @Test\n    void deleteByIdWhenNotExists() {\n        int id = -1000;\n        databaseTypeService.deleteById(id);\n        Assertions.assertFalse(databaseTypeDao.existsById(id));\n    }\n\n}", "logging.level.org.jooq=INFO\nserver.port=8080\n# datasource\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.username=${databasir.db.username}\nspring.datasource.password=${databasir.db.password}\nspring.datasource.url=jdbc:mysql://${databasir.db.url}/${databasir.db.name:databasir}?serverTimezone=UTC&characterEncoding=utf-8\n# driver directory\nspring.jooq.sql-dialect=mysql\n# flyway\nspring.flyway.enabled=true\nspring.flyway.baseline-on-migrate=true\nspring.flyway.locations=classpath:db/migration\n# db\ndatabasir.db.url=localhost:3306\ndatabasir.db.username=root\ndatabasir.db.password=123456\ndatabasir.db.driver-directory=drivers\ndatabasir.jwt.secret=DatabasirJwtSecret"], "filenames": ["api/src/main/resources/application-local.properties", "api/src/main/resources/application.properties", "core/src/main/java/com/databasir/core/domain/DomainErrors.java", "core/src/main/java/com/databasir/core/domain/database/service/DatabaseTypeService.java", "core/src/main/java/com/databasir/core/infrastructure/connection/CustomDatabaseConnectionFactory.java", "core/src/main/java/com/databasir/core/infrastructure/driver/DriverResources.java", "core/src/main/java/com/databasir/core/infrastructure/jwt/JwtTokens.java", "core/src/test/java/com/databasir/core/domain/database/service/DatabaseTypeServiceTest.java", "core/src/test/resources/application-ut.properties"], "buggy_code_start_loc": [12, 14, 47, 38, 39, 6, 7, 7, 18], "buggy_code_end_loc": [13, 15, 48, 113, 63, 129, 40, 23, 19], "fixing_code_start_loc": [12, 14, 47, 39, 39, 7, 8, 8, 18], "fixing_code_end_loc": [14, 16, 48, 114, 65, 174, 42, 38, 20], "type": "CWE-20", "message": "Databasir is a team-oriented relational database model document management platform. Databasir 1.01 has remote code execution vulnerability. JDBC drivers are not validated prior to use and may be provided by users of the system. This can lead to code execution by any basic user who has access to the system. Users are advised to upgrade. There are no known workarounds to this issue.", "other": {"cve": {"id": "CVE-2022-24861", "sourceIdentifier": "security-advisories@github.com", "published": "2022-04-20T19:15:07.920", "lastModified": "2022-05-03T15:02:25.047", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Databasir is a team-oriented relational database model document management platform. Databasir 1.01 has remote code execution vulnerability. JDBC drivers are not validated prior to use and may be provided by users of the system. This can lead to code execution by any basic user who has access to the system. Users are advised to upgrade. There are no known workarounds to this issue."}, {"lang": "es", "value": "Databasir es una plataforma de administraci\u00f3n de documentos con un modelo de base de datos relacional orientado al equipo. Databasir versi\u00f3n 1.01 presenta una vulnerabilidad de ejecuci\u00f3n de c\u00f3digo remota. Los controladores JDBC no son comprobados antes de su uso y pueden ser proporcionados por usuarios del sistema. Esto puede conllevar a una ejecuci\u00f3n de c\u00f3digo por parte de cualquier usuario b\u00e1sico que tenga acceso al sistema. Es recomendado a usuarios actualizar. No se presentan medidas de mitigaci\u00f3n conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.9, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:databasir:databasir:1.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "1759EA12-2B7C-41A7-BEDD-F886A27BBB56"}]}]}], "references": [{"url": "https://github.com/vran-dev/databasir/commit/ca22a8fef7a31c0235b0b2951260a7819b89993b", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/vran-dev/databasir/pull/103", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/vran-dev/databasir/security/advisories/GHSA-5r2v-wcwh-7xmp", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/vran-dev/databasir/commit/ca22a8fef7a31c0235b0b2951260a7819b89993b"}}