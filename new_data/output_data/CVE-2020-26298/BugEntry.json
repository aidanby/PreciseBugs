{"buggy_code": ["# Changelog\n\n## Version 3.5.0\n\n* Avoid mutating the options hash passed to a render object.\n\n  Refs #663.\n\n  *Max Schwenk*\n\n* Fix a segfault rendering quotes using `StripDown` and the `:quote`\n  option.\n\n  Fixes #639.\n\n* Fix `warning: instance variable @options not initialized` when\n  running under verbose mode (`-w`, `$VERBOSE = true`).\n\n* Fix SmartyPants single quotes right after a link. For example:\n\n  ~~~markdown\n  [John](http://john.doe)'s cat\n  ~~~\n\n  Will now properly converts `'` to a right single quote (i.e. `\u2019`).\n\n  Fixes #624.\n\n* Remove the `rel` and `rev` attributes from the output generated\n  for footnotes as they don't pass the HTML 5 validation.\n\n  Fixes #536.\n\n* Automatically enable the `fenced_code_blocks` option passing a\n  `HTML_TOC` object to the `Markdown` object's constructor since\n  some languages rely on the sharp to comment code.\n\n  Fixes #451.\n\n* Allow passing `Range` objects to the `nesting_level` option to have\n  a higher level of customization for table of contents:\n\n  ~~~ruby\n  Redcarpet::Render::HTML_TOC.new(nesting_level: 2..5)\n  ~~~\n\n  Fixes #519.\n\n## Version 3.4.0\n\n* Rely on djb2 hashing generating anchors with non-ASCII chars.\n\n  Fix issue [#538](https://github.com/vmg/redcarpet/issues/538).\n\n  *Alexey Kopytko*, *namusyaka*\n\n* Added suppport for HTML 5 `details` and `summary` tags.\n\n  Fix issue [#578](https://github.com/vmg/redcarpet/issues/578).\n\n  *James Edwards-Jones*\n\n* Multiple single quote pairs are parsed correctly with SmartyPants.\n\n  Fix issue [#549](https://github.com/vmg/redcarpet/issues/549).\n\n  *Jan J\u0119drychowski*\n\n* Table headers don't require a minimum of three dashes anymore; a\n  single one can be used for each row.\n\n* Remove escaped entities from `HTML` render table of contents'\n  ids to be consistent with the `HTML_TOC` render.\n\n  Fix issue [#529](https://github.com/vmg/redcarpet/issues/529).\n\n* Remove periods at the end of URLs when autolinking to make sure\n  that links at the end of a sentence get properly generated.\n\n  Fix issue [#465](https://github.com/vmg/redcarpet/issues/465).\n\n* Expose the Markdown and rendering options through a `Hash` inside\n  the `@options` instance variable for custom render objects.\n\n* Avoid escaping ampersands in href links.\n\n  *Nolan Evans*\n\n## Version 3.3.4\n\n* Fix `bufprintf` to correctly work on Windows MinGW-w64 so strings\n  are properly written to the buffer.\n\n  *Kenichi Saita*\n\n* Fix the header anchor normalization by skipping non-ASCII chars\n  and not calling tolower because this leads to invalid UTF-8 byte\n  sequences in the HTML output. (tolower is not locale-aware)\n\n  *Clemens Gruber*\n\n## Version 3.3.3\n\n* Fix a memory leak instantiating a `Redcarpet::Render::Base` object.\n\n  *Oleg Dashevskii*\n\n* Fix the `StripDown` renderer to handle the `:highlight` option.\n\n  *Itay Grudev*\n\n* The `StripDown` renderer handles tables if the `tables` extension is\n  enabled.\n\n  *amnesia7*\n\n* Fix Smarty Pants to avoid fraction conversions when there are several\n  numbers separated with slashes (e.g. for a date).\n\n  *Sam Saffron*\n\n## Version 3.3.2\n\n* Fix a potential security issue in the HTML renderer\n  (Thanks to Giancarlo Canales Barreto for the heads up)\n\n## Version 3.3.1\n\n* Include the `Redcarpet::CLI`'s file in the gemspec to make it\n  available when downloading.\n\n## Version 3.3.0\n\n* Fix the stripping of surrounding characters that should be removed\n  during anchor generation.\n\n* Provide a `Redcarpet::CLI` class to create custom binary files.\n\n  Relying on Ruby's OptionParser, it's now straightforward to add new\n  options, rely on custom render objects or handle differently the\n  rendering of the provided files.\n\n* Undeprecate the compatibility layer for the old RedCloth API.\n\n  This layer actually ease the support of libraries supporting different\n  Markdown processors.\n\n* Strip out `style` tags at the HTML-block rendering level when the\n  `:no_styles` options is enabled ; previously they were only removed\n  inside paragraphs.\n\n* Avoid parsing images when the given URL isn't safe and the\n  `:safe_links_only` option is enabled.\n\n  *Alex Serban*\n\n* Avoid parsing references inside fenced code blocks so they are\n  now kept in the code snippet.\n\n  *David Waller*\n\n* Avoid escaping table-of-contents' headers by default. A new\n  `:escape_html` option is now available for the `HTML_TOC` object\n  if there are security concerns.\n\n* Add the `lang-` prefix in front of the language's name when using\n  `:prettify` along with `:fenced_code_blocks`.\n\n* Non-alphanumeric chars are now stripped out from generated anchors\n  (along the lines of Active Support's `#parameterize` method).\n\n## Version 3.2.3\n\n* Avoid rewinding content of a previous inline when autolinking is\n  enabled.\n\n  *Daniel LeCheminant*\n\n* Fix escaping of forward slashes with the `Safe` render object (add a\n  missing semi-colon).\n\n## Version 3.2.2\n\n* Consider `script` as a block-level element so it doesn't get included\n  inside a paragraph.\n\n## Version 3.2.1\n\n* Load `RedcarpetCompat` when requiring Redcarpet for the sake of\n  backward compatibility.\n\n  *Loren Segal*\n\n## Version 3.2.0\n\n* Add a `Safe` renderer to deal with users' input. The `escape_html`\n  and `safe_links_only` options are turned on by default.\n\n  Moreover, the `block_code` callback removes the tag's class since\n  the user can basically set anything with the vanilla one.\n\n  *Robin Dupret*\n\n* HTML5 block-level tags are now recognized\n\n  *silverhammermba*\n\n* The `StripDown` render object now displays the URL of links\n  along with the text.\n\n  *Robin Dupret*\n\n* The RedCloth API compatibility layer is now deprecated.\n\n  *Robin Dupret*\n\n* A hyphen and an equal should not be converted to heading.\n\n  *namusyaka*\n\n* Fix emphasis character escape sequence detection while mid-emphasis.\n\n  *jcheatham*\n\n* Add `=` to the whitelist of escaped chars so it can be used inside\n  highlighted snippets.\n\n  *jcheatham*\n\n* Convert trailing single quotes to curly quotes. For example,\n  `Road Trippin'` now converts to `Road Trippin\u2019`.\n\n  *Kevin Chen*\n\n* Allow in-page links (e.g. `[headline](#headline)`) when `:safe_links_only` is set.\n\n  *jomo*\n\n* Enable emphasis inside of sentences in multi-byte languages when\n  `:no_intra_emphasis` is set.\n\n  *Chun-wei Kuo*\n\n* Avoid making `:no_intra_emphasis` only match spaces. This allows\n  using emphasizes inside quotes when the option is enabled for\n  instance.\n\n  *Jason Webb* and *BJ Homer*\n\n* The StripDown renderer handles image tags now.\n\n## Version 3.1.2\n\n* Remove the yielding of anchors in the `header` callback. This was\n  a breaking change between 3.0 and 3.1 as the method's arity changed.\n\n## Version 3.1.1\n\n* Fix a segfault when parsing text with headers.\n\n## Version 3.1.0\n\n* Yield the anchor of the headers\n\n  Using the `header` callback, it's now possible to get access to the\n  humanized generated id to easily keep tracking of the tree of headers\n  or simply handle the duplicate values easily.\n\n  Since the `HTML_TOC` and `HTML` objects both have this callback, it's\n  advisable to define a module and mix it in these objects to avoid\n  code duplication.\n\n  *Robin Dupret*\n\n* Allow using tabs between a reference's colon and its link\n\n  Fix issue [#337](https://github.com/vmg/redcarpet/issues/337)\n\n  *Juan Guerrero*\n\n* Make ordered lists preceded by paragraph parsed with `:lax_spacing`\n\n  Previously, enabling the `:lax_spacing` option, if a paragraph was\n  followed by an ordered list it was unparsed and was part of the\n  paragraph but this is no more the case.\n\n  *Robin Dupret*\n\n* Feed the gemspec into ExtensionTask so that we can pre-compile.\n  ie. `rake native gem`\n\n  *Todd Edwards*\n\n* Revert lax indent of less than 4 characters after list items\n\n  Follow the standard to detect when new paragraph is outside last item.\n  Fixes [issue #111](https://github.com/vmg/redcarpet/issues/111).\n\n  *Eric Br\u00e9chemier*\n\n* Fix code blocks' classes when using Google code prettify\n\n  When using the the `:prettify` option and specifying the\n  language name, the generated code block's class had a missing\n  space.\n\n  *Simonini*\n\n* Add `-v`/`--version` and `-h` flags to commandline redcarpet\n\n  *Lukas Stabe*\n\n* Add optional quote support through the `:quote` option. Render\n  quotations marks to `q` HTML tag.\n\n  This is a `\"quote\"`.\n\n  *Anatol Broder*\n\n* Ensure inline markup in titles is correctly stripped when generating\n  headers' anchor.\n\n  *Robin Dupret*\n\n* Revert the unescaping behavior on comments\n\n  This behavior doesn't follow the conformance suite.\n\n  *Robin Dupret*\n\n* Add optional footnotes support\n\n  Add PHP-Markdown style footnotes through the `:footnotes` option.\n\n  *Ben Dolman, Adam Florin, microjo, brief*\n\n* Enable GitHub style anchors for headers\n\n  Passing the `with_toc_data` option to a `HTML` render object now\n  generates GitHub style anchors.\n\n  *Matt Rogers*\n\n* Allow to set a maximum rendering level for HTML_TOC\n\n  Allow the user to pass a `nesting_level` option when instantiating a\n  new HTML_TOC render object in order to limit the nesting level in the\n  generated table of content. For example:\n\n  ~~~ruby\n  Redcarpet::Markdown.new(Redcarpet::Render::HTML_TOC.new(nesting_level: 2))\n  ~~~\n\n  *Robin Dupret*\n\n## Version 3.0.0\n\n* Remove support for Ruby 1.8.x *Matt Rogers & Robin Dupret*\n\n* Avoid escaping for HTML comments *Robin Dupret*\n\n* Make emphasis wrapped inside parenthesis parsed *Robin Dupret*\n\n* Remove the Sundown submodule *Robin Dupret*\n\n* Fix FTP uris identified as emails *Robin Dupret*\n\n* Add optional highlight support *Sam Soffes*\n\n  This is `==highlighted==`.\n\n* Ensure nested parenthesis are handled into links *Robin Dupret*\n\n* Ensure nested code spans put in emphasis work correctly *Robin Dupret*\n\n## Version 2.3.0\n\n* Add a `:disable_indented_code_blocks` option *Dmitriy Kiriyenko*\n\n* Fix issue [#57](https://github.com/vmg/redcarpet/issues/57) *Mike Morearty*\n\n* Ensure new lines characters are inserted when using the StripDown\nrender. *Robin Dupret*\n\n* Mark all symbols as hidden except the main entry point *Tom Hughes*\n\n  This avoids conflicts with other gems that may have some of the\n  same symbols, such as escape_utils which also uses houdini.\n\n* Remove unnecessary function pointer *Sam Soffes*\n\n* Add optional underline support *Sam Soffes*\n\n  This is `*italic*` and this is `_underline_` when enabled.\n\n* Test that links with quotes work *Michael Grosser*\n\n* Adding a prettyprint class for google-code-prettify *Joel Rosenberg*\n\n* Remove unused C macros *Matt Rogers*\n\n* Remove 'extern' definition for Init_redcarpet_rndr() *Matt Rogers*\n\n* Remove Gemfile.lock from the gemspec *Matt Rogers*\n\n* Removed extra unused test statement. *Slipp D. Thompson*\n\n* Use test-unit gem to get some red/green output when running tests\n*Michael Grosser*\n\n* Remove a deprecation warning and update Gemfile.lock *Robin Dupret*\n\n* Added contributing file *Brent Beer*\n\n* For tests for libxml2 > 2.8 *strzibny*\n\n* SmartyPants: Preserve single `backticks` in HTML *Mike Morearty*\n\n  When SmartyPants is processing HTML, single `backticks` should  be left\n  intact. Previously they were being deleted.\n\n* Removed and ignored Gemfile.lock *Ryan McGeary*\n\n* Added support for org-table syntax *Ryan McGeary*\n\n  Adds support for using a plus (+) as an intersection character instead of\n  requiring pipes (|). The emacs org-mode table syntax automatically manages\n  ascii tables, but uses pluses for line intersections.\n\n* Ignore /tmp directory *Ryan McGeary*\n\n* Add redcarpet_ prefix for `stack_*` functions *Kenta Murata*\n\n* Mark any html_attributes has held by a renderer as used *Tom Hughes*\n\n* Add Rubinius to the list of tested implementations *Gibheer*\n\n* Add a changelog file\n", "/*\n * Copyright (c) 2009, Natacha Port\u00e9\n * Copyright (c) 2015, Vicent Marti\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n#include \"markdown.h\"\n#include \"html.h\"\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <ctype.h>\n\n#include \"houdini.h\"\n\n#define USE_XHTML(opt) (opt->flags & HTML_USE_XHTML)\n\nint\nsdhtml_is_tag(const uint8_t *tag_data, size_t tag_size, const char *tagname)\n{\n\tsize_t i;\n\tint closed = 0;\n\n\tif (tag_size < 3 || tag_data[0] != '<')\n\t\treturn HTML_TAG_NONE;\n\n\ti = 1;\n\n\tif (tag_data[i] == '/') {\n\t\tclosed = 1;\n\t\ti++;\n\t}\n\n\tfor (; i < tag_size; ++i, ++tagname) {\n\t\tif (*tagname == 0)\n\t\t\tbreak;\n\n\t\tif (tag_data[i] != *tagname)\n\t\t\treturn HTML_TAG_NONE;\n\t}\n\n\tif (i == tag_size)\n\t\treturn HTML_TAG_NONE;\n\n\tif (isspace(tag_data[i]) || tag_data[i] == '>')\n\t\treturn closed ? HTML_TAG_CLOSE : HTML_TAG_OPEN;\n\n\treturn HTML_TAG_NONE;\n}\n\nstatic inline void escape_html(struct buf *ob, const uint8_t *source, size_t length)\n{\n\thoudini_escape_html0(ob, source, length, 0);\n}\n\nstatic inline void escape_href(struct buf *ob, const uint8_t *source, size_t length)\n{\n\thoudini_escape_href(ob, source, length);\n}\n\n/********************\n * GENERIC RENDERER *\n ********************/\nstatic int\nrndr_autolink(struct buf *ob, const struct buf *link, enum mkd_autolink type, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (!link || !link->size)\n\t\treturn 0;\n\n\tif ((options->flags & HTML_SAFELINK) != 0 &&\n\t\t!sd_autolink_issafe(link->data, link->size) &&\n\t\ttype != MKDA_EMAIL)\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<a href=\\\"\");\n\tif (type == MKDA_EMAIL)\n\t\tBUFPUTSL(ob, \"mailto:\");\n\tescape_href(ob, link->data, link->size);\n\n\tif (options->link_attributes) {\n\t\tbufputc(ob, '\\\"');\n\t\toptions->link_attributes(ob, link, opaque);\n\t\tbufputc(ob, '>');\n\t} else {\n\t\tBUFPUTSL(ob, \"\\\">\");\n\t}\n\n\t/*\n\t * Pretty printing: if we get an email address as\n\t * an actual URI, e.g. `mailto:foo@bar.com`, we don't\n\t * want to print the `mailto:` prefix\n\t */\n\tif (bufprefix(link, \"mailto:\") == 0) {\n\t\tescape_html(ob, link->data + 7, link->size - 7);\n\t} else {\n\t\tescape_html(ob, link->data, link->size);\n\t}\n\n\tBUFPUTSL(ob, \"</a>\");\n\n\treturn 1;\n}\n\nstatic void\nrndr_blockcode(struct buf *ob, const struct buf *text, const struct buf *lang, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (ob->size) bufputc(ob, '\\n');\n\n\tif (lang && lang->size) {\n\t\tsize_t i, cls;\n\t\tif (options->flags & HTML_PRETTIFY) {\n\t\t\tBUFPUTSL(ob, \"<pre><code class=\\\"prettyprint lang-\");\n\t\t\tcls++;\n\t\t} else {\n\t\t\tBUFPUTSL(ob, \"<pre><code class=\\\"\");\n\t\t}\n\n\t\tfor (i = 0, cls = 0; i < lang->size; ++i, ++cls) {\n\t\t\twhile (i < lang->size && isspace(lang->data[i]))\n\t\t\t\ti++;\n\n\t\t\tif (i < lang->size) {\n\t\t\t\tsize_t org = i;\n\t\t\t\twhile (i < lang->size && !isspace(lang->data[i]))\n\t\t\t\t\ti++;\n\n\t\t\t\tif (lang->data[org] == '.')\n\t\t\t\t\torg++;\n\n\t\t\t\tif (cls) bufputc(ob, ' ');\n\t\t\t\tescape_html(ob, lang->data + org, i - org);\n\t\t\t}\n\t\t}\n\n\t\tBUFPUTSL(ob, \"\\\">\");\n\t} else if (options->flags & HTML_PRETTIFY) {\n\t\tBUFPUTSL(ob, \"<pre><code class=\\\"prettyprint\\\">\");\n\t} else {\n\t\tBUFPUTSL(ob, \"<pre><code>\");\n\t}\n\n\tif (text)\n\t\tescape_html(ob, text->data, text->size);\n\n\tBUFPUTSL(ob, \"</code></pre>\\n\");\n}\n\nstatic void\nrndr_blockquote(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (ob->size) bufputc(ob, '\\n');\n\tBUFPUTSL(ob, \"<blockquote>\\n\");\n\tif (text) bufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</blockquote>\\n\");\n}\n\nstatic int\nrndr_codespan(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\tif (options->flags & HTML_PRETTIFY)\n\t\tBUFPUTSL(ob, \"<code class=\\\"prettyprint\\\">\");\n\telse\n\t\tBUFPUTSL(ob, \"<code>\");\n\tif (text) escape_html(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</code>\");\n\treturn 1;\n}\n\nstatic int\nrndr_strikethrough(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size)\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<del>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</del>\");\n\treturn 1;\n}\n\nstatic int\nrndr_double_emphasis(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size)\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<strong>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</strong>\");\n\n\treturn 1;\n}\n\nstatic int\nrndr_emphasis(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size) return 0;\n\tBUFPUTSL(ob, \"<em>\");\n\tif (text) bufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</em>\");\n\treturn 1;\n}\n\nstatic int\nrndr_underline(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size)\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<u>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</u>\");\n\n\treturn 1;\n}\n\nstatic int\nrndr_highlight(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size)\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<mark>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</mark>\");\n\n\treturn 1;\n}\n\nstatic int\nrndr_quote(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size)\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<q>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</q>\");\n\n\treturn 1;\n}\n\nstatic int\nrndr_linebreak(struct buf *ob, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\tbufputs(ob, USE_XHTML(options) ? \"<br/>\\n\" : \"<br>\\n\");\n\treturn 1;\n}\n\nstatic void\nrndr_header_anchor(struct buf *out, const struct buf *anchor)\n{\n\tstatic const char *STRIPPED = \" -&+$,/:;=?@\\\"#{}|^~[]`\\\\*()%.!'\";\n\n\tconst uint8_t *a = anchor->data;\n\tconst size_t size = anchor->size;\n\tsize_t i = 0;\n\tint stripped = 0, inserted = 0;\n\n\tfor (; i < size; ++i) {\n\t\t// skip html tags\n\t\tif (a[i] == '<') {\n\t\t\twhile (i < size && a[i] != '>')\n\t\t\t\ti++;\n\t\t// skip html entities\n\t\t} else if (a[i] == '&') {\n\t\t\twhile (i < size && a[i] != ';')\n\t\t\t\ti++;\n\t\t}\n\t\t// replace non-ascii or invalid characters with dashes\n\t\telse if (!isascii(a[i]) || strchr(STRIPPED, a[i])) {\n\t\t\tif (inserted && !stripped)\n\t\t\t\tbufputc(out, '-');\n\t\t\t// and do it only once\n\t\t\tstripped = 1;\n\t\t}\n\t\telse {\n\t\t\tbufputc(out, tolower(a[i]));\n\t\t\tstripped = 0;\n\t\t\tinserted++;\n\t\t}\n\t}\n\n\t// replace the last dash if there was anything added\n\tif (stripped && inserted)\n\t\tout->size--;\n\n\t// if anchor found empty, use djb2 hash for it\n\tif (!inserted && anchor->size) {\n\t        unsigned long hash = 5381;\n\t\tfor (i = 0; i < size; ++i) {\n\t\t\thash = ((hash << 5) + hash) + a[i]; /* h * 33 + c */\n\t\t}\n\t\tbufprintf(out, \"part-%lx\", hash);\n\t}\n}\n\nstatic void\nrndr_header(struct buf *ob, const struct buf *text, int level, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (ob->size)\n\t\tbufputc(ob, '\\n');\n\n\tif ((options->flags & HTML_TOC) && level >= options->toc_data.nesting_bounds[0] &&\n\t     level <= options->toc_data.nesting_bounds[1]) {\n\t\tbufprintf(ob, \"<h%d id=\\\"\", level);\n\t\trndr_header_anchor(ob, text);\n\t\tBUFPUTSL(ob, \"\\\">\");\n\t}\n\telse\n\t\tbufprintf(ob, \"<h%d>\", level);\n\n\tif (text) bufput(ob, text->data, text->size);\n\tbufprintf(ob, \"</h%d>\\n\", level);\n}\n\nstatic int\nrndr_link(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *content, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (link != NULL && (options->flags & HTML_SAFELINK) != 0 && !sd_autolink_issafe(link->data, link->size))\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<a href=\\\"\");\n\n\tif (link && link->size)\n\t\tescape_href(ob, link->data, link->size);\n\n\tif (title && title->size) {\n\t\tBUFPUTSL(ob, \"\\\" title=\\\"\");\n\t\tescape_html(ob, title->data, title->size);\n\t}\n\n\tif (options->link_attributes) {\n\t\tbufputc(ob, '\\\"');\n\t\toptions->link_attributes(ob, link, opaque);\n\t\tbufputc(ob, '>');\n\t} else {\n\t\tBUFPUTSL(ob, \"\\\">\");\n\t}\n\n\tif (content && content->size) bufput(ob, content->data, content->size);\n\tBUFPUTSL(ob, \"</a>\");\n\treturn 1;\n}\n\nstatic void\nrndr_list(struct buf *ob, const struct buf *text, int flags, void *opaque)\n{\n\tif (ob->size) bufputc(ob, '\\n');\n\tbufput(ob, flags & MKD_LIST_ORDERED ? \"<ol>\\n\" : \"<ul>\\n\", 5);\n\tif (text) bufput(ob, text->data, text->size);\n\tbufput(ob, flags & MKD_LIST_ORDERED ? \"</ol>\\n\" : \"</ul>\\n\", 6);\n}\n\nstatic void\nrndr_listitem(struct buf *ob, const struct buf *text, int flags, void *opaque)\n{\n\tBUFPUTSL(ob, \"<li>\");\n\tif (text) {\n\t\tsize_t size = text->size;\n\t\twhile (size && text->data[size - 1] == '\\n')\n\t\t\tsize--;\n\n\t\tbufput(ob, text->data, size);\n\t}\n\tBUFPUTSL(ob, \"</li>\\n\");\n}\n\nstatic void\nrndr_paragraph(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\tsize_t i = 0;\n\n\tif (ob->size) bufputc(ob, '\\n');\n\n\tif (!text || !text->size)\n\t\treturn;\n\n\twhile (i < text->size && isspace(text->data[i])) i++;\n\n\tif (i == text->size)\n\t\treturn;\n\n\tBUFPUTSL(ob, \"<p>\");\n\tif (options->flags & HTML_HARD_WRAP) {\n\t\tsize_t org;\n\t\twhile (i < text->size) {\n\t\t\torg = i;\n\t\t\twhile (i < text->size && text->data[i] != '\\n')\n\t\t\t\ti++;\n\n\t\t\tif (i > org)\n\t\t\t\tbufput(ob, text->data + org, i - org);\n\n\t\t\t/*\n\t\t\t * do not insert a line break if this newline\n\t\t\t * is the last character on the paragraph\n\t\t\t */\n\t\t\tif (i >= text->size - 1)\n\t\t\t\tbreak;\n\n\t\t\trndr_linebreak(ob, opaque);\n\t\t\ti++;\n\t\t}\n\t} else {\n\t\tbufput(ob, &text->data[i], text->size - i);\n\t}\n\tBUFPUTSL(ob, \"</p>\\n\");\n}\n\nstatic void\nrndr_raw_block(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tsize_t org, size;\n\tstruct html_renderopt *options = opaque;\n\n\tif (!text)\n\t\treturn;\n\n\tsize = text->size;\n\twhile (size > 0 && text->data[size - 1] == '\\n')\n\t\tsize--;\n\n\tfor (org = 0; org < size && text->data[org] == '\\n'; ++org)\n\n\tif (org >= size)\n\t\treturn;\n\n\t/* Remove style tags if the `:no_styles` option is enabled */\n\tif ((options->flags & HTML_SKIP_STYLE) != 0 &&\n\t\tsdhtml_is_tag(text->data, size, \"style\"))\n\t\treturn;\n\n\tif (ob->size)\n\t\tbufputc(ob, '\\n');\n\n\tbufput(ob, text->data + org, size - org);\n\tbufputc(ob, '\\n');\n}\n\nstatic int\nrndr_triple_emphasis(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size) return 0;\n\tBUFPUTSL(ob, \"<strong><em>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</em></strong>\");\n\treturn 1;\n}\n\nstatic void\nrndr_hrule(struct buf *ob, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\tif (ob->size) bufputc(ob, '\\n');\n\tbufputs(ob, USE_XHTML(options) ? \"<hr/>\\n\" : \"<hr>\\n\");\n}\n\nstatic int\nrndr_image(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *alt, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (link != NULL && (options->flags & HTML_SAFELINK) != 0 && !sd_autolink_issafe(link->data, link->size))\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<img src=\\\"\");\n\n\tif (link && link->size)\n\t\tescape_href(ob, link->data, link->size);\n\n\tBUFPUTSL(ob, \"\\\" alt=\\\"\");\n\n\tif (alt && alt->size)\n\t\tescape_html(ob, alt->data, alt->size);\n\n\tif (title && title->size) {\n\t\tBUFPUTSL(ob, \"\\\" title=\\\"\");\n\t\tescape_html(ob, title->data, title->size);\n\t}\n\n\tbufputs(ob, USE_XHTML(options) ? \"\\\"/>\" : \"\\\">\");\n\treturn 1;\n}\n\nstatic int\nrndr_raw_html(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\t/* HTML_ESCAPE overrides SKIP_HTML, SKIP_STYLE, SKIP_LINKS and SKIP_IMAGES\n\t   It doesn't see if there are any valid tags, just escape all of them. */\n\tif((options->flags & HTML_ESCAPE) != 0) {\n\t\tescape_html(ob, text->data, text->size);\n\t\treturn 1;\n\t}\n\n\tif ((options->flags & HTML_SKIP_HTML) != 0)\n\t\treturn 1;\n\n\tif ((options->flags & HTML_SKIP_STYLE) != 0 &&\n\t\tsdhtml_is_tag(text->data, text->size, \"style\"))\n\t\treturn 1;\n\n\tif ((options->flags & HTML_SKIP_LINKS) != 0 &&\n\t\tsdhtml_is_tag(text->data, text->size, \"a\"))\n\t\treturn 1;\n\n\tif ((options->flags & HTML_SKIP_IMAGES) != 0 &&\n\t\tsdhtml_is_tag(text->data, text->size, \"img\"))\n\t\treturn 1;\n\n\tbufput(ob, text->data, text->size);\n\treturn 1;\n}\n\nstatic void\nrndr_table(struct buf *ob, const struct buf *header, const struct buf *body, void *opaque)\n{\n\tif (ob->size) bufputc(ob, '\\n');\n\tBUFPUTSL(ob, \"<table><thead>\\n\");\n\tif (header)\n\t\tbufput(ob, header->data, header->size);\n\tBUFPUTSL(ob, \"</thead><tbody>\\n\");\n\tif (body)\n\t\tbufput(ob, body->data, body->size);\n\tBUFPUTSL(ob, \"</tbody></table>\\n\");\n}\n\nstatic void\nrndr_tablerow(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tBUFPUTSL(ob, \"<tr>\\n\");\n\tif (text)\n\t\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</tr>\\n\");\n}\n\nstatic void\nrndr_tablecell(struct buf *ob, const struct buf *text, int flags, void *opaque)\n{\n\tif (flags & MKD_TABLE_HEADER) {\n\t\tBUFPUTSL(ob, \"<th\");\n\t} else {\n\t\tBUFPUTSL(ob, \"<td\");\n\t}\n\n\tswitch (flags & MKD_TABLE_ALIGNMASK) {\n\tcase MKD_TABLE_ALIGN_CENTER:\n\t\tBUFPUTSL(ob, \" style=\\\"text-align: center\\\">\");\n\t\tbreak;\n\n\tcase MKD_TABLE_ALIGN_L:\n\t\tBUFPUTSL(ob, \" style=\\\"text-align: left\\\">\");\n\t\tbreak;\n\n\tcase MKD_TABLE_ALIGN_R:\n\t\tBUFPUTSL(ob, \" style=\\\"text-align: right\\\">\");\n\t\tbreak;\n\n\tdefault:\n\t\tBUFPUTSL(ob, \">\");\n\t}\n\n\tif (text)\n\t\tbufput(ob, text->data, text->size);\n\n\tif (flags & MKD_TABLE_HEADER) {\n\t\tBUFPUTSL(ob, \"</th>\\n\");\n\t} else {\n\t\tBUFPUTSL(ob, \"</td>\\n\");\n\t}\n}\n\nstatic int\nrndr_superscript(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size) return 0;\n\tBUFPUTSL(ob, \"<sup>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</sup>\");\n\treturn 1;\n}\n\nstatic void\nrndr_normal_text(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (text)\n\t\tescape_html(ob, text->data, text->size);\n}\n\nstatic void\nrndr_footnotes(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (ob->size) bufputc(ob, '\\n');\n\n\tBUFPUTSL(ob, \"<div class=\\\"footnotes\\\">\\n\");\n\tbufputs(ob, USE_XHTML(options) ? \"<hr/>\\n\" : \"<hr>\\n\");\n\tBUFPUTSL(ob, \"<ol>\\n\");\n\n\tif (text)\n\t\tbufput(ob, text->data, text->size);\n\n\tBUFPUTSL(ob, \"\\n</ol>\\n</div>\\n\");\n}\n\nstatic void\nrndr_footnote_def(struct buf *ob, const struct buf *text, unsigned int num, void *opaque)\n{\n\tsize_t i = 0;\n\tint pfound = 0;\n\n\t/* insert anchor at the end of first paragraph block */\n\tif (text) {\n\t\twhile ((i+3) < text->size) {\n\t\t\tif (text->data[i++] != '<') continue;\n\t\t\tif (text->data[i++] != '/') continue;\n\t\t\tif (text->data[i++] != 'p' && text->data[i] != 'P') continue;\n\t\t\tif (text->data[i] != '>') continue;\n\t\t\ti -= 3;\n\t\t\tpfound = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tbufprintf(ob, \"\\n<li id=\\\"fn%d\\\">\\n\", num);\n\tif (pfound) {\n\t\tbufput(ob, text->data, i);\n\t\tbufprintf(ob, \"&nbsp;<a href=\\\"#fnref%d\\\">&#8617;</a>\", num);\n\t\tbufput(ob, text->data + i, text->size - i);\n\t} else if (text) {\n\t\tbufput(ob, text->data, text->size);\n\t}\n\tBUFPUTSL(ob, \"</li>\\n\");\n}\n\nstatic int\nrndr_footnote_ref(struct buf *ob, unsigned int num, void *opaque)\n{\n\tbufprintf(ob, \"<sup id=\\\"fnref%d\\\"><a href=\\\"#fn%d\\\">%d</a></sup>\", num, num, num);\n\treturn 1;\n}\n\nstatic void\ntoc_header(struct buf *ob, const struct buf *text, int level, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (level >= options->toc_data.nesting_bounds[0] &&\n\t    level <= options->toc_data.nesting_bounds[1]) {\n\t\t/* set the level offset if this is the first header\n\t\t * we're parsing for the document */\n\t\tif (options->toc_data.current_level == 0)\n\t\t\toptions->toc_data.level_offset = level - 1;\n\n\t\tlevel -= options->toc_data.level_offset;\n\n\t\tif (level > options->toc_data.current_level) {\n\t\t\twhile (level > options->toc_data.current_level) {\n\t\t\t\tBUFPUTSL(ob, \"<ul>\\n<li>\\n\");\n\t\t\t\toptions->toc_data.current_level++;\n\t\t\t}\n\t\t} else if (level < options->toc_data.current_level) {\n\t\t\tBUFPUTSL(ob, \"</li>\\n\");\n\t\t\twhile (level < options->toc_data.current_level) {\n\t\t\t\tBUFPUTSL(ob, \"</ul>\\n</li>\\n\");\n\t\t\t\toptions->toc_data.current_level--;\n\t\t\t}\n\t\t\tBUFPUTSL(ob,\"<li>\\n\");\n\t\t} else {\n\t\t\tBUFPUTSL(ob,\"</li>\\n<li>\\n\");\n\t\t}\n\n\t\tbufprintf(ob, \"<a href=\\\"#\");\n\t\trndr_header_anchor(ob, text);\n\t\tBUFPUTSL(ob, \"\\\">\");\n\n\t\tif (text) {\n\t\t\tif (options->flags & HTML_ESCAPE)\n\t\t\t\tescape_html(ob, text->data, text->size);\n\t\t\telse\n\t\t\t\tbufput(ob, text->data, text->size);\n\t\t}\n\n\t\tBUFPUTSL(ob, \"</a>\\n\");\n\t}\n}\n\nstatic int\ntoc_link(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *content, void *opaque)\n{\n\tif (content && content->size)\n\t\tbufput(ob, content->data, content->size);\n\treturn 1;\n}\n\nstatic void\ntoc_finalize(struct buf *ob, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\twhile (options->toc_data.current_level > 0) {\n\t\tBUFPUTSL(ob, \"</li>\\n</ul>\\n\");\n\t\toptions->toc_data.current_level--;\n\t}\n}\n\nvoid\nsdhtml_toc_renderer(struct sd_callbacks *callbacks, struct html_renderopt *options, unsigned int render_flags)\n{\n\tstatic const struct sd_callbacks cb_default = {\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\ttoc_header,\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\trndr_footnotes,\n\t\trndr_footnote_def,\n\n\t\tNULL,\n\t\trndr_codespan,\n\t\trndr_double_emphasis,\n\t\trndr_emphasis,\n\t\trndr_underline,\n\t\trndr_highlight,\n\t\trndr_quote,\n\t\tNULL,\n\t\tNULL,\n\t\ttoc_link,\n\t\tNULL,\n\t\trndr_triple_emphasis,\n\t\trndr_strikethrough,\n\t\trndr_superscript,\n\t\trndr_footnote_ref,\n\n\t\tNULL,\n\t\tNULL,\n\n\t\tNULL,\n\t\ttoc_finalize,\n\t};\n\n\tmemset(options, 0x0, sizeof(struct html_renderopt));\n\toptions->flags = render_flags;\n\n\tmemcpy(callbacks, &cb_default, sizeof(struct sd_callbacks));\n}\n\nvoid\nsdhtml_renderer(struct sd_callbacks *callbacks, struct html_renderopt *options, unsigned int render_flags)\n{\n\tstatic const struct sd_callbacks cb_default = {\n\t\trndr_blockcode,\n\t\trndr_blockquote,\n\t\trndr_raw_block,\n\t\trndr_header,\n\t\trndr_hrule,\n\t\trndr_list,\n\t\trndr_listitem,\n\t\trndr_paragraph,\n\t\trndr_table,\n\t\trndr_tablerow,\n\t\trndr_tablecell,\n\t\trndr_footnotes,\n\t\trndr_footnote_def,\n\n\t\trndr_autolink,\n\t\trndr_codespan,\n\t\trndr_double_emphasis,\n\t\trndr_emphasis,\n\t\trndr_underline,\n\t\trndr_highlight,\n\t\trndr_quote,\n\t\trndr_image,\n\t\trndr_linebreak,\n\t\trndr_link,\n\t\trndr_raw_html,\n\t\trndr_triple_emphasis,\n\t\trndr_strikethrough,\n\t\trndr_superscript,\n\t\trndr_footnote_ref,\n\n\t\tNULL,\n\t\trndr_normal_text,\n\n\t\tNULL,\n\t\tNULL,\n\t};\n\n\t/* Prepare the options pointer */\n\tmemset(options, 0x0, sizeof(struct html_renderopt));\n\toptions->flags = render_flags;\n\toptions->toc_data.nesting_bounds[0] = 1;\n\toptions->toc_data.nesting_bounds[1] = 6;\n\n\t/* Prepare the callbacks */\n\tmemcpy(callbacks, &cb_default, sizeof(struct sd_callbacks));\n\n\tif (render_flags & HTML_SKIP_IMAGES)\n\t\tcallbacks->image = NULL;\n\n\tif (render_flags & HTML_SKIP_LINKS) {\n\t\tcallbacks->link = NULL;\n\t\tcallbacks->autolink = NULL;\n\t}\n\n\tif (render_flags & HTML_SKIP_HTML || render_flags & HTML_ESCAPE)\n\t\tcallbacks->blockhtml = NULL;\n}\n", "require 'redcarpet.so'\nrequire 'redcarpet/compat'\n\nmodule Redcarpet\n  VERSION = '3.5.0'\n\n  class Markdown\n    attr_reader :renderer\n  end\n\n  module Render\n\n    # XHTML Renderer\n    class XHTML < HTML\n      def initialize(extensions = {})\n        super(extensions.merge(xhtml: true))\n      end\n    end\n\n    # HTML + SmartyPants renderer\n    class SmartyHTML < HTML\n      include SmartyPants\n    end\n\n    # A renderer object you can use to deal with users' input. It\n    # enables +escape_html+ and +safe_links_only+ by default.\n    #\n    # The +block_code+ callback is also overriden not to include\n    # the lang's class as the user can basically specify anything\n    # with the vanilla one.\n    class Safe < HTML\n      def initialize(extensions = {})\n        super({\n          escape_html: true,\n          safe_links_only: true\n        }.merge(extensions))\n      end\n\n      def block_code(code, lang)\n        \"<pre>\" \\\n          \"<code>#{html_escape(code)}</code>\" \\\n        \"</pre>\"\n      end\n\n      private\n\n      # TODO: This is far from ideal to have such method as we\n      # are duplicating existing code from Houdini. This method\n      # should be defined at the C level.\n      def html_escape(string)\n        string.gsub(/['&\\\"<>\\/]/, {\n          '&' => '&amp;',\n          '<' => '&lt;',\n          '>' => '&gt;',\n          '\"' => '&quot;',\n          \"'\" => '&#x27;',\n          \"/\" => '&#x2F;',\n        })\n      end\n    end\n\n    # SmartyPants Mixin module\n    #\n    # Implements SmartyPants.postprocess, which\n    # performs smartypants replacements on the HTML file,\n    # once it has been fully rendered.\n    #\n    # To add SmartyPants postprocessing to your custom\n    # renderers, just mixin the module `include SmartyPants`\n    #\n    # You can also use this as a standalone SmartyPants\n    # implementation.\n    #\n    # Example:\n    #\n    #   # Mixin\n    #   class CoolRenderer < HTML\n    #     include SmartyPants\n    #     # more code here\n    #   end\n    #\n    #   # Standalone\n    #   Redcarpet::Render::SmartyPants.render(\"you're\")\n    #\n    module SmartyPants\n      extend self\n      def self.render(text)\n        postprocess text\n      end\n    end\n  end\nend\n", "# encoding: utf-8\nGem::Specification.new do |s|\n  s.name = 'redcarpet'\n  s.version = '3.5.0'\n  s.summary = \"Markdown that smells nice\"\n  s.description = 'A fast, safe and extensible Markdown to (X)HTML parser'\n  s.date = '2019-07-29'\n  s.email = 'vicent@github.com'\n  s.homepage = 'http://github.com/vmg/redcarpet'\n  s.authors = [\"Natacha Port\u00e9\", \"Vicent Mart\u00ed\"]\n  s.license = 'MIT'\n  s.required_ruby_version = '>= 1.9.2'\n  # = MANIFEST =\n  s.files = %w[\n    COPYING\n    Gemfile\n    README.markdown\n    Rakefile\n    bin/redcarpet\n    ext/redcarpet/autolink.c\n    ext/redcarpet/autolink.h\n    ext/redcarpet/buffer.c\n    ext/redcarpet/buffer.h\n    ext/redcarpet/extconf.rb\n    ext/redcarpet/houdini.h\n    ext/redcarpet/houdini_href_e.c\n    ext/redcarpet/houdini_html_e.c\n    ext/redcarpet/html.c\n    ext/redcarpet/html.h\n    ext/redcarpet/html_blocks.h\n    ext/redcarpet/html_smartypants.c\n    ext/redcarpet/markdown.c\n    ext/redcarpet/markdown.h\n    ext/redcarpet/rc_markdown.c\n    ext/redcarpet/rc_render.c\n    ext/redcarpet/redcarpet.h\n    ext/redcarpet/stack.c\n    ext/redcarpet/stack.h\n    lib/redcarpet.rb\n    lib/redcarpet/cli.rb\n    lib/redcarpet/compat.rb\n    lib/redcarpet/render_man.rb\n    lib/redcarpet/render_strip.rb\n    redcarpet.gemspec\n    test/benchmark.rb\n    test/custom_render_test.rb\n    test/fixtures/benchmark.md\n    test/html5_test.rb\n    test/html_render_test.rb\n    test/html_toc_render_test.rb\n    test/markdown_test.rb\n    test/pathological_inputs_test.rb\n    test/redcarpet_bin_test.rb\n    test/redcarpet_compat_test.rb\n    test/safe_render_test.rb\n    test/smarty_html_test.rb\n    test/smarty_pants_test.rb\n    test/stripdown_render_test.rb\n    test/test_helper.rb\n  ]\n  # = MANIFEST =\n  s.test_files = s.files.grep(%r{^test/})\n  s.extra_rdoc_files = [\"COPYING\"]\n  s.extensions = [\"ext/redcarpet/extconf.rb\"]\n  s.executables = [\"redcarpet\"]\n  s.require_paths = [\"lib\"]\n\n  s.add_development_dependency \"rake\", \"~> 12.2.1\"\n  s.add_development_dependency \"rake-compiler\", \"~> 1.0.3\"\n  s.add_development_dependency \"test-unit\", \"~> 3.2.3\"\nend\n", "# coding: UTF-8\nrequire 'test_helper'\n\nclass MarkdownTest < Redcarpet::TestCase\n  def setup\n    @renderer = Redcarpet::Render::HTML\n  end\n\n  def test_that_simple_one_liner_goes_to_html\n    assert_equal \"<p>Hello World.</p>\", render(\"Hello World.\")\n  end\n\n  def test_that_inline_markdown_goes_to_html\n    assert_equal \"<p><em>Hello World</em>!</p>\", render('_Hello World_!')\n  end\n\n  def test_that_inline_markdown_starts_and_ends_correctly\n    output   = render('_start _ foo_bar bar_baz _ end_ *italic* **bold** <a>_blah_</a>', with: [:no_intra_emphasis])\n    expected = \"<p><em>start _ foo_bar bar_baz _ end</em> <em>italic</em> <strong>bold</strong> <a><em>blah</em></a></p>\"\n\n    assert_equal expected, output\n\n    output   = render(\"Run 'rake radiant:extensions:rbac_base:migrate'\")\n    expected = \"<p>Run &#39;rake radiant:extensions:rbac_base:migrate&#39;</p>\"\n\n    assert_equal expected, output\n  end\n\n  def test_that_urls_are_not_doubly_escaped\n    output = render('[Page 2](/search?query=Markdown+Test&page=2)')\n    assert_equal \"<p><a href=\\\"/search?query=Markdown+Test&page=2\\\">Page 2</a></p>\", output\n  end\n\n  def test_simple_inline_html\n    output   = render(\"before\\n\\n<div>\\n  foo\\n</div>\\n\\nafter\")\n    expected = \"<p>before</p>\\n\\n<div>\\n  foo\\n</div>\\n\\n<p>after</p>\"\n\n    assert_equal expected, output\n  end\n\n  def test_that_html_blocks_do_not_require_their_own_end_tag_line\n    output   = render(\"Para 1\\n\\n<div><pre>HTML block\\n</pre></div>\\n\\nPara 2 [Link](#anchor)\")\n    expected = \"<p>Para 1</p>\\n\\n<div><pre>HTML block\\n</pre></div>\\n\\n<p>Para 2 <a href=\\\"#anchor\\\">Link</a></p>\"\n\n    assert_equal expected, output\n  end\n\n  # This isn't in the spec but is Markdown.pl behavior.\n  def test_block_quotes_preceded_by_spaces\n    output = render <<-Markdown.strip_heredoc\n      A wise man once said:\n\n\n       > Isn't it wonderful just to be alive.\n    Markdown\n    expected = <<-HTML.chomp.strip_heredoc\n      <p>A wise man once said:</p>\n\n      <blockquote>\n      <p>Isn&#39;t it wonderful just to be alive.</p>\n      </blockquote>\n    HTML\n\n    assert_equal expected, output\n  end\n\n  def test_para_before_block_html_should_not_wrap_in_p_tag\n    output   = render(\"Things to watch out for\\n<ul>\\n<li>Blah</li>\\n</ul>\", with: [:lax_spacing])\n    expected = \"<p>Things to watch out for</p>\\n\\n<ul>\\n<li>Blah</li>\\n</ul>\"\n\n    assert_equal expected, output\n  end\n\n  # https://github.com/vmg/redcarpet/issues/111\n  def test_p_with_less_than_4space_indent_should_not_be_part_of_last_list_item\n    text = <<-Markdown\n  * a\n  * b\n  * c\n\n  This paragraph is not part of the list.\n    Markdown\n    expected = <<-HTML.chomp.strip_heredoc\n      <ul>\n      <li>a</li>\n      <li>b</li>\n      <li>c</li>\n      </ul>\n\n      <p>This paragraph is not part of the list.</p>\n    HTML\n\n    assert_equal expected, render(text)\n  end\n\n  # http://github.com/rtomayko/rdiscount/issues/#issue/13\n  def test_headings_with_trailing_space\n    text = \"The Ant-Sugar Tales \\n\"       +\n           \"=================== \\n\\n\"     +\n           \"By Candice Yellowflower   \\n\"\n\n    assert_equal \"<h1>The Ant-Sugar Tales </h1>\\n\\n<p>By Candice Yellowflower   </p>\", render(text)\n  end\n\n  def test_that_intra_emphasis_works\n    assert_equal \"<p>foo<em>bar</em>baz</p>\", render(\"foo_bar_baz\")\n    assert_equal \"<p>foo_bar_baz</p>\", render(\"foo_bar_baz\", with: [:no_intra_emphasis])\n  end\n\n  def test_that_autolink_flag_works\n    output   = render(\"http://github.com/rtomayko/rdiscount\", with: [:autolink])\n    expected = \"<p><a href=\\\"http://github.com/rtomayko/rdiscount\\\">http://github.com/rtomayko/rdiscount</a></p>\"\n\n    assert_equal expected, output\n  end\n\n  def test_that_tags_can_have_dashes_and_underscores\n    output   = render(\"foo <asdf-qwerty>bar</asdf-qwerty> and <a_b>baz</a_b>\")\n    expected = \"<p>foo <asdf-qwerty>bar</asdf-qwerty> and <a_b>baz</a_b></p>\"\n\n    assert_equal expected, output\n  end\n\n  def test_link_syntax_is_not_processed_within_code_blocks\n    output   = render(\"    This is a code block\\n    This is a link [[1]] inside\\n\")\n    expected = \"<pre><code>This is a code block\\nThis is a link [[1]] inside\\n</code></pre>\"\n\n    assert_equal expected, output\n  end\n\n  def test_whitespace_after_urls\n    output   = render(\"Japan: http://www.abc.net.au/news/events/japan-quake-2011/beforeafter.htm (yes, japan)\", with: [:autolink])\n    expected = %(<p>Japan: <a href=\"http://www.abc.net.au/news/events/japan-quake-2011/beforeafter.htm\">http://www.abc.net.au/news/events/japan-quake-2011/beforeafter.htm</a> (yes, japan)</p>)\n\n    assert_equal expected, output\n  end\n\n  def test_memory_leak_when_parsing_char_links\n    render(<<-leaks.strip_heredoc)\n      2. Identify the wild-type cluster and determine all clusters\n         containing or contained by it:\n\n             wildtype <- wildtype.cluster(h)\n             wildtype.mask <- logical(nclust)\n             wildtype.mask[c(contains(h, wildtype),\n                             wildtype,\n                             contained.by(h, wildtype))] <- TRUE\n\n         This could be more elegant.\n    leaks\n  end\n\n  def test_infinite_loop_in_header\n    assert_equal \"<h1>Body</h1>\", render(<<-header.strip_heredoc)\n      ######\n      #Body#\n      ######\n    header\n  end\n\n  def test_a_hyphen_and_a_equal_should_not_be_converted_to_heading\n    assert_equal \"<p>-</p>\", render(\"-\")\n    assert_equal \"<p>=</p>\", render(\"=\")\n  end\n\n  def test_that_tables_flag_works\n    text = <<-Markdown.strip_heredoc\n       aaa | bbbb\n      -----|------\n      hello|sailor\n    Markdown\n\n    assert render(text) !~ /<table/\n    assert render(text, with: [:tables]) =~ /<table/\n  end\n\n  def test_that_tables_work_with_org_table_syntax\n    text = <<-Markdown.strip_heredoc\n      | aaa | bbbb |\n      |-----+------|\n      |hello|sailor|\n    Markdown\n\n    assert render(text) !~ /<table/\n    assert render(text, with: [:tables]) =~ /<table/\n  end\n\n  def test_strikethrough_flag_works\n    text = \"this is ~some~ striked ~~text~~\"\n\n    assert render(text) !~ /<del/\n    assert render(text, with: [:strikethrough]) =~ /<del/\n  end\n\n  def test_underline_flag_works\n    text   = \"this is *some* text that is _underlined_. ___boom___\"\n    output = render(text, with: [:underline])\n\n    refute render(text).include? '<u>underlined</u>'\n\n    assert output.include? '<u>underlined</u>'\n    assert output.include? '<em>some</em>'\n  end\n\n  def test_highlight_flag_works\n    text   = \"this is ==highlighted==\"\n    output = render(text, with: [:highlight])\n\n    refute render(text).include? '<mark>highlighted</mark>'\n\n    assert output.include? '<mark>highlighted</mark>'\n  end\n\n  def test_quote_flag_works\n    text   = 'this is a \"quote\"'\n    output = render(text, with: [:quote])\n\n    refute render(text).include? '<q>quote</q>'\n\n    assert_equal '<p>this is a <q>quote</q></p>', output\n  end\n\n  def test_that_fenced_flag_works\n    text = <<-fenced.strip_heredoc\n      This is a simple test\n\n      ~~~~~\n      This is some awesome code\n          with tabs and shit\n      ~~~\n    fenced\n\n    assert render(text) !~ /<code/\n    assert render(text, with: [:fenced_code_blocks]) =~ /<code/\n  end\n\n  def test_that_fenced_flag_works_without_space\n    text   = \"foo\\nbar\\n```\\nsome\\ncode\\n```\\nbaz\"\n    output = render(text, with: [:fenced_code_blocks, :lax_spacing])\n\n    assert output.include?(\"<pre><code>\")\n\n    output = render(text, with: [:fenced_code_blocks])\n    assert !output.include?(\"<pre><code>\")\n  end\n\n  def test_that_indented_code_preserves_references\n    text = <<-indented.strip_heredoc\n      This is normal text\n\n          Link to [Google][1]\n\n          [1]: http://google.com\n    indented\n\n    output = render(text, with: [:fenced_code_blocks])\n    assert output.include?(\"[1]: http://google.com\")\n  end\n\n  def test_that_fenced_flag_preserves_references\n    text = <<-fenced.strip_heredoc\n      This is normal text\n\n      ```\n      Link to [Google][1]\n\n      [1]: http://google.com\n      ```\n    fenced\n\n    out = render(text, with: [:fenced_code_blocks])\n    assert out.include?(\"[1]: http://google.com\")\n  end\n\n  def test_that_fenced_code_copies_language_verbatim_with_braces\n    text = \"```{rust,no_run}\\nx = 'foo'\\n```\"\n    html = render(text, with: [:fenced_code_blocks])\n\n    assert_equal \"<pre><code class=\\\"rust,no_run\\\">x = &#39;foo&#39;\\n</code></pre>\", html\n  end\n\n  def test_that_fenced_code_copies_language_verbatim\n    text = \"```rust,no_run\\nx = 'foo'\\n```\"\n    html = render(text, with: [:fenced_code_blocks])\n\n    assert_equal \"<pre><code class=\\\"rust,no_run\\\">x = &#39;foo&#39;\\n</code></pre>\", html\n  end\n\n  def test_that_indented_flag_works\n    text = <<-indented.strip_heredoc\n      This is a simple text\n\n          This is some awesome code\n          with shit\n\n      And this is again a simple text\n    indented\n\n    assert render(text) =~ /<code/\n    assert render(text, with: [:disable_indented_code_blocks]) !~ /<code/\n  end\n\n  def test_that_headers_are_linkable\n    output   = render('### Hello [GitHub](http://github.com)')\n    expected = \"<h3>Hello <a href=\\\"http://github.com\\\">GitHub</a></h3>\"\n\n    assert_equal expected, output\n  end\n\n  def test_autolinking_with_ent_chars\n    markdown = <<-Markdown.strip_heredoc\n      This a stupid link: https://github.com/rtomayko/tilt/issues?milestone=1&state=open\n    Markdown\n    output   = render(markdown, with: [:autolink])\n\n    assert_equal \"<p>This a stupid link: <a href=\\\"https://github.com/rtomayko/tilt/issues?milestone=1&state=open\\\">https://github.com/rtomayko/tilt/issues?milestone=1&amp;state=open</a></p>\", output\n  end\n\n  def test_spaced_headers\n    output = render(\"#123 a header yes\\n\", with: [:space_after_headers])\n\n    assert output !~ /<h1>/\n  end\n\n  def test_proper_intra_emphasis\n    assert render(\"http://en.wikipedia.org/wiki/Dave_Allen_(comedian)\", with: [:no_intra_emphasis]) !~ /<em>/\n    assert render(\"this fails: hello_world_\", with: [:no_intra_emphasis]) !~ /<em>/\n    assert render(\"this also fails: hello_world_#bye\", with: [:no_intra_emphasis]) !~ /<em>/\n    assert render(\"this works: hello_my_world\", with: [:no_intra_emphasis]) !~ /<em>/\n    assert render(\"\u53e5\u4e2d**\u7c97\u9ad4**\u6e2c\u8a66\", with: [:no_intra_emphasis]) =~ /<strong>/\n\n    markdown = \"This is (**bold**) and this_is_not_italic!\"\n    output   = \"<p>This is (<strong>bold</strong>) and this_is_not_italic!</p>\"\n\n    assert_equal output, render(markdown, with: [:no_intra_emphasis])\n\n    markdown = \"This is \\\"**bold**\\\"\"\n    output   = \"<p>This is &quot;<strong>bold</strong>&quot;</p>\"\n    assert_equal output, render(markdown, with: [:no_intra_emphasis])\n  end\n\n  def test_emphasis_escaping\n    assert_equal \"<p><strong>foo*</strong> <em>dd_dd</em></p>\", render(\"**foo\\\\*** _dd\\\\_dd_\")\n  end\n\n  def test_char_escaping_when_highlighting\n    output = render(\"==attribute\\\\===\", with: [:highlight])\n\n    assert_equal \"<p><mark>attribute=</mark></p>\", output\n  end\n\n  def test_ordered_lists_with_lax_spacing\n    output = render(\"Foo:\\n1. Foo\\n2. Bar\", with: [:lax_spacing])\n\n    assert_match /<ol>/, output\n    assert_match /<li>Foo<\\/li>/, output\n  end\n\n  def test_references_with_tabs_after_colon\n    output = render(\"[Link][id]\\n[id]:\\t\\t\\thttp://google.es\")\n\n    assert_equal \"<p><a href=\\\"http://google.es\\\">Link</a></p>\", output\n  end\n\n  def test_superscript\n    output = render(\"this is the 2^nd time\", with: [:superscript])\n\n    assert_equal \"<p>this is the 2<sup>nd</sup> time</p>\", output\n  end\n\n  def test_superscript_enclosed_in_parenthesis\n    output = render(\"this is the 2^(nd) time\", with: [:superscript])\n\n    assert_equal \"<p>this is the 2<sup>nd</sup> time</p>\", output\n  end\n\n  def test_no_rewind_into_previous_inline\n    result = \"<p><em>!dl</em><a href=\\\"mailto:1@danlec.com\\\">1@danlec.com</a></p>\"\n    output = render(\"_!dl_1@danlec.com\", with: [:autolink])\n\n    assert_equal result, output\n\n    result = \"<p>abc123<em><a href=\\\"http://www.foo.com\\\">www.foo.com</a></em>@foo.com</p>\"\n    output = render(\"abc123_www.foo.com_@foo.com\", with: [:autolink])\n\n    assert_equal result, output\n  end\n\n  def test_autolink_with_period_next_to_url\n    result = %(<p>Checkout a cool site like <a href=\"https://github.com\">https://github.com</a>.</p>)\n    output = render(\"Checkout a cool site like https://github.com.\", with: [:autolink])\n\n    assert_equal result, output\n  end\n\n  def test_single_dashes_on_table_headers\n    markdown = <<-Markdown.strip_heredoc\n      | a | b |\n      | - | - |\n      | c | d |\n    Markdown\n    output   = render(markdown, with: [:tables])\n\n    assert_match /<table>/, output\n  end\nend\n"], "fixing_code": ["# Changelog\n\n## Version 3.5.1 (Security)\n\n* Fix a security vulnerability using `:quote` in combination with the\n  `:escape_html` option.\n\n  Reported by *Johan Smits*.\n\n## Version 3.5.0\n\n* Avoid mutating the options hash passed to a render object.\n\n  Refs #663.\n\n  *Max Schwenk*\n\n* Fix a segfault rendering quotes using `StripDown` and the `:quote`\n  option.\n\n  Fixes #639.\n\n* Fix `warning: instance variable @options not initialized` when\n  running under verbose mode (`-w`, `$VERBOSE = true`).\n\n* Fix SmartyPants single quotes right after a link. For example:\n\n  ~~~markdown\n  [John](http://john.doe)'s cat\n  ~~~\n\n  Will now properly converts `'` to a right single quote (i.e. `\u2019`).\n\n  Fixes #624.\n\n* Remove the `rel` and `rev` attributes from the output generated\n  for footnotes as they don't pass the HTML 5 validation.\n\n  Fixes #536.\n\n* Automatically enable the `fenced_code_blocks` option passing a\n  `HTML_TOC` object to the `Markdown` object's constructor since\n  some languages rely on the sharp to comment code.\n\n  Fixes #451.\n\n* Allow passing `Range` objects to the `nesting_level` option to have\n  a higher level of customization for table of contents:\n\n  ~~~ruby\n  Redcarpet::Render::HTML_TOC.new(nesting_level: 2..5)\n  ~~~\n\n  Fixes #519.\n\n## Version 3.4.0\n\n* Rely on djb2 hashing generating anchors with non-ASCII chars.\n\n  Fix issue [#538](https://github.com/vmg/redcarpet/issues/538).\n\n  *Alexey Kopytko*, *namusyaka*\n\n* Added suppport for HTML 5 `details` and `summary` tags.\n\n  Fix issue [#578](https://github.com/vmg/redcarpet/issues/578).\n\n  *James Edwards-Jones*\n\n* Multiple single quote pairs are parsed correctly with SmartyPants.\n\n  Fix issue [#549](https://github.com/vmg/redcarpet/issues/549).\n\n  *Jan J\u0119drychowski*\n\n* Table headers don't require a minimum of three dashes anymore; a\n  single one can be used for each row.\n\n* Remove escaped entities from `HTML` render table of contents'\n  ids to be consistent with the `HTML_TOC` render.\n\n  Fix issue [#529](https://github.com/vmg/redcarpet/issues/529).\n\n* Remove periods at the end of URLs when autolinking to make sure\n  that links at the end of a sentence get properly generated.\n\n  Fix issue [#465](https://github.com/vmg/redcarpet/issues/465).\n\n* Expose the Markdown and rendering options through a `Hash` inside\n  the `@options` instance variable for custom render objects.\n\n* Avoid escaping ampersands in href links.\n\n  *Nolan Evans*\n\n## Version 3.3.4\n\n* Fix `bufprintf` to correctly work on Windows MinGW-w64 so strings\n  are properly written to the buffer.\n\n  *Kenichi Saita*\n\n* Fix the header anchor normalization by skipping non-ASCII chars\n  and not calling tolower because this leads to invalid UTF-8 byte\n  sequences in the HTML output. (tolower is not locale-aware)\n\n  *Clemens Gruber*\n\n## Version 3.3.3\n\n* Fix a memory leak instantiating a `Redcarpet::Render::Base` object.\n\n  *Oleg Dashevskii*\n\n* Fix the `StripDown` renderer to handle the `:highlight` option.\n\n  *Itay Grudev*\n\n* The `StripDown` renderer handles tables if the `tables` extension is\n  enabled.\n\n  *amnesia7*\n\n* Fix Smarty Pants to avoid fraction conversions when there are several\n  numbers separated with slashes (e.g. for a date).\n\n  *Sam Saffron*\n\n## Version 3.3.2\n\n* Fix a potential security issue in the HTML renderer\n  (Thanks to Giancarlo Canales Barreto for the heads up)\n\n## Version 3.3.1\n\n* Include the `Redcarpet::CLI`'s file in the gemspec to make it\n  available when downloading.\n\n## Version 3.3.0\n\n* Fix the stripping of surrounding characters that should be removed\n  during anchor generation.\n\n* Provide a `Redcarpet::CLI` class to create custom binary files.\n\n  Relying on Ruby's OptionParser, it's now straightforward to add new\n  options, rely on custom render objects or handle differently the\n  rendering of the provided files.\n\n* Undeprecate the compatibility layer for the old RedCloth API.\n\n  This layer actually ease the support of libraries supporting different\n  Markdown processors.\n\n* Strip out `style` tags at the HTML-block rendering level when the\n  `:no_styles` options is enabled ; previously they were only removed\n  inside paragraphs.\n\n* Avoid parsing images when the given URL isn't safe and the\n  `:safe_links_only` option is enabled.\n\n  *Alex Serban*\n\n* Avoid parsing references inside fenced code blocks so they are\n  now kept in the code snippet.\n\n  *David Waller*\n\n* Avoid escaping table-of-contents' headers by default. A new\n  `:escape_html` option is now available for the `HTML_TOC` object\n  if there are security concerns.\n\n* Add the `lang-` prefix in front of the language's name when using\n  `:prettify` along with `:fenced_code_blocks`.\n\n* Non-alphanumeric chars are now stripped out from generated anchors\n  (along the lines of Active Support's `#parameterize` method).\n\n## Version 3.2.3\n\n* Avoid rewinding content of a previous inline when autolinking is\n  enabled.\n\n  *Daniel LeCheminant*\n\n* Fix escaping of forward slashes with the `Safe` render object (add a\n  missing semi-colon).\n\n## Version 3.2.2\n\n* Consider `script` as a block-level element so it doesn't get included\n  inside a paragraph.\n\n## Version 3.2.1\n\n* Load `RedcarpetCompat` when requiring Redcarpet for the sake of\n  backward compatibility.\n\n  *Loren Segal*\n\n## Version 3.2.0\n\n* Add a `Safe` renderer to deal with users' input. The `escape_html`\n  and `safe_links_only` options are turned on by default.\n\n  Moreover, the `block_code` callback removes the tag's class since\n  the user can basically set anything with the vanilla one.\n\n  *Robin Dupret*\n\n* HTML5 block-level tags are now recognized\n\n  *silverhammermba*\n\n* The `StripDown` render object now displays the URL of links\n  along with the text.\n\n  *Robin Dupret*\n\n* The RedCloth API compatibility layer is now deprecated.\n\n  *Robin Dupret*\n\n* A hyphen and an equal should not be converted to heading.\n\n  *namusyaka*\n\n* Fix emphasis character escape sequence detection while mid-emphasis.\n\n  *jcheatham*\n\n* Add `=` to the whitelist of escaped chars so it can be used inside\n  highlighted snippets.\n\n  *jcheatham*\n\n* Convert trailing single quotes to curly quotes. For example,\n  `Road Trippin'` now converts to `Road Trippin\u2019`.\n\n  *Kevin Chen*\n\n* Allow in-page links (e.g. `[headline](#headline)`) when `:safe_links_only` is set.\n\n  *jomo*\n\n* Enable emphasis inside of sentences in multi-byte languages when\n  `:no_intra_emphasis` is set.\n\n  *Chun-wei Kuo*\n\n* Avoid making `:no_intra_emphasis` only match spaces. This allows\n  using emphasizes inside quotes when the option is enabled for\n  instance.\n\n  *Jason Webb* and *BJ Homer*\n\n* The StripDown renderer handles image tags now.\n\n## Version 3.1.2\n\n* Remove the yielding of anchors in the `header` callback. This was\n  a breaking change between 3.0 and 3.1 as the method's arity changed.\n\n## Version 3.1.1\n\n* Fix a segfault when parsing text with headers.\n\n## Version 3.1.0\n\n* Yield the anchor of the headers\n\n  Using the `header` callback, it's now possible to get access to the\n  humanized generated id to easily keep tracking of the tree of headers\n  or simply handle the duplicate values easily.\n\n  Since the `HTML_TOC` and `HTML` objects both have this callback, it's\n  advisable to define a module and mix it in these objects to avoid\n  code duplication.\n\n  *Robin Dupret*\n\n* Allow using tabs between a reference's colon and its link\n\n  Fix issue [#337](https://github.com/vmg/redcarpet/issues/337)\n\n  *Juan Guerrero*\n\n* Make ordered lists preceded by paragraph parsed with `:lax_spacing`\n\n  Previously, enabling the `:lax_spacing` option, if a paragraph was\n  followed by an ordered list it was unparsed and was part of the\n  paragraph but this is no more the case.\n\n  *Robin Dupret*\n\n* Feed the gemspec into ExtensionTask so that we can pre-compile.\n  ie. `rake native gem`\n\n  *Todd Edwards*\n\n* Revert lax indent of less than 4 characters after list items\n\n  Follow the standard to detect when new paragraph is outside last item.\n  Fixes [issue #111](https://github.com/vmg/redcarpet/issues/111).\n\n  *Eric Br\u00e9chemier*\n\n* Fix code blocks' classes when using Google code prettify\n\n  When using the the `:prettify` option and specifying the\n  language name, the generated code block's class had a missing\n  space.\n\n  *Simonini*\n\n* Add `-v`/`--version` and `-h` flags to commandline redcarpet\n\n  *Lukas Stabe*\n\n* Add optional quote support through the `:quote` option. Render\n  quotations marks to `q` HTML tag.\n\n  This is a `\"quote\"`.\n\n  *Anatol Broder*\n\n* Ensure inline markup in titles is correctly stripped when generating\n  headers' anchor.\n\n  *Robin Dupret*\n\n* Revert the unescaping behavior on comments\n\n  This behavior doesn't follow the conformance suite.\n\n  *Robin Dupret*\n\n* Add optional footnotes support\n\n  Add PHP-Markdown style footnotes through the `:footnotes` option.\n\n  *Ben Dolman, Adam Florin, microjo, brief*\n\n* Enable GitHub style anchors for headers\n\n  Passing the `with_toc_data` option to a `HTML` render object now\n  generates GitHub style anchors.\n\n  *Matt Rogers*\n\n* Allow to set a maximum rendering level for HTML_TOC\n\n  Allow the user to pass a `nesting_level` option when instantiating a\n  new HTML_TOC render object in order to limit the nesting level in the\n  generated table of content. For example:\n\n  ~~~ruby\n  Redcarpet::Markdown.new(Redcarpet::Render::HTML_TOC.new(nesting_level: 2))\n  ~~~\n\n  *Robin Dupret*\n\n## Version 3.0.0\n\n* Remove support for Ruby 1.8.x *Matt Rogers & Robin Dupret*\n\n* Avoid escaping for HTML comments *Robin Dupret*\n\n* Make emphasis wrapped inside parenthesis parsed *Robin Dupret*\n\n* Remove the Sundown submodule *Robin Dupret*\n\n* Fix FTP uris identified as emails *Robin Dupret*\n\n* Add optional highlight support *Sam Soffes*\n\n  This is `==highlighted==`.\n\n* Ensure nested parenthesis are handled into links *Robin Dupret*\n\n* Ensure nested code spans put in emphasis work correctly *Robin Dupret*\n\n## Version 2.3.0\n\n* Add a `:disable_indented_code_blocks` option *Dmitriy Kiriyenko*\n\n* Fix issue [#57](https://github.com/vmg/redcarpet/issues/57) *Mike Morearty*\n\n* Ensure new lines characters are inserted when using the StripDown\nrender. *Robin Dupret*\n\n* Mark all symbols as hidden except the main entry point *Tom Hughes*\n\n  This avoids conflicts with other gems that may have some of the\n  same symbols, such as escape_utils which also uses houdini.\n\n* Remove unnecessary function pointer *Sam Soffes*\n\n* Add optional underline support *Sam Soffes*\n\n  This is `*italic*` and this is `_underline_` when enabled.\n\n* Test that links with quotes work *Michael Grosser*\n\n* Adding a prettyprint class for google-code-prettify *Joel Rosenberg*\n\n* Remove unused C macros *Matt Rogers*\n\n* Remove 'extern' definition for Init_redcarpet_rndr() *Matt Rogers*\n\n* Remove Gemfile.lock from the gemspec *Matt Rogers*\n\n* Removed extra unused test statement. *Slipp D. Thompson*\n\n* Use test-unit gem to get some red/green output when running tests\n*Michael Grosser*\n\n* Remove a deprecation warning and update Gemfile.lock *Robin Dupret*\n\n* Added contributing file *Brent Beer*\n\n* For tests for libxml2 > 2.8 *strzibny*\n\n* SmartyPants: Preserve single `backticks` in HTML *Mike Morearty*\n\n  When SmartyPants is processing HTML, single `backticks` should  be left\n  intact. Previously they were being deleted.\n\n* Removed and ignored Gemfile.lock *Ryan McGeary*\n\n* Added support for org-table syntax *Ryan McGeary*\n\n  Adds support for using a plus (+) as an intersection character instead of\n  requiring pipes (|). The emacs org-mode table syntax automatically manages\n  ascii tables, but uses pluses for line intersections.\n\n* Ignore /tmp directory *Ryan McGeary*\n\n* Add redcarpet_ prefix for `stack_*` functions *Kenta Murata*\n\n* Mark any html_attributes has held by a renderer as used *Tom Hughes*\n\n* Add Rubinius to the list of tested implementations *Gibheer*\n\n* Add a changelog file\n", "/*\n * Copyright (c) 2009, Natacha Port\u00e9\n * Copyright (c) 2015, Vicent Marti\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n#include \"markdown.h\"\n#include \"html.h\"\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <ctype.h>\n\n#include \"houdini.h\"\n\n#define USE_XHTML(opt) (opt->flags & HTML_USE_XHTML)\n\nint\nsdhtml_is_tag(const uint8_t *tag_data, size_t tag_size, const char *tagname)\n{\n\tsize_t i;\n\tint closed = 0;\n\n\tif (tag_size < 3 || tag_data[0] != '<')\n\t\treturn HTML_TAG_NONE;\n\n\ti = 1;\n\n\tif (tag_data[i] == '/') {\n\t\tclosed = 1;\n\t\ti++;\n\t}\n\n\tfor (; i < tag_size; ++i, ++tagname) {\n\t\tif (*tagname == 0)\n\t\t\tbreak;\n\n\t\tif (tag_data[i] != *tagname)\n\t\t\treturn HTML_TAG_NONE;\n\t}\n\n\tif (i == tag_size)\n\t\treturn HTML_TAG_NONE;\n\n\tif (isspace(tag_data[i]) || tag_data[i] == '>')\n\t\treturn closed ? HTML_TAG_CLOSE : HTML_TAG_OPEN;\n\n\treturn HTML_TAG_NONE;\n}\n\nstatic inline void escape_html(struct buf *ob, const uint8_t *source, size_t length)\n{\n\thoudini_escape_html0(ob, source, length, 0);\n}\n\nstatic inline void escape_href(struct buf *ob, const uint8_t *source, size_t length)\n{\n\thoudini_escape_href(ob, source, length);\n}\n\n/********************\n * GENERIC RENDERER *\n ********************/\nstatic int\nrndr_autolink(struct buf *ob, const struct buf *link, enum mkd_autolink type, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (!link || !link->size)\n\t\treturn 0;\n\n\tif ((options->flags & HTML_SAFELINK) != 0 &&\n\t\t!sd_autolink_issafe(link->data, link->size) &&\n\t\ttype != MKDA_EMAIL)\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<a href=\\\"\");\n\tif (type == MKDA_EMAIL)\n\t\tBUFPUTSL(ob, \"mailto:\");\n\tescape_href(ob, link->data, link->size);\n\n\tif (options->link_attributes) {\n\t\tbufputc(ob, '\\\"');\n\t\toptions->link_attributes(ob, link, opaque);\n\t\tbufputc(ob, '>');\n\t} else {\n\t\tBUFPUTSL(ob, \"\\\">\");\n\t}\n\n\t/*\n\t * Pretty printing: if we get an email address as\n\t * an actual URI, e.g. `mailto:foo@bar.com`, we don't\n\t * want to print the `mailto:` prefix\n\t */\n\tif (bufprefix(link, \"mailto:\") == 0) {\n\t\tescape_html(ob, link->data + 7, link->size - 7);\n\t} else {\n\t\tescape_html(ob, link->data, link->size);\n\t}\n\n\tBUFPUTSL(ob, \"</a>\");\n\n\treturn 1;\n}\n\nstatic void\nrndr_blockcode(struct buf *ob, const struct buf *text, const struct buf *lang, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (ob->size) bufputc(ob, '\\n');\n\n\tif (lang && lang->size) {\n\t\tsize_t i, cls;\n\t\tif (options->flags & HTML_PRETTIFY) {\n\t\t\tBUFPUTSL(ob, \"<pre><code class=\\\"prettyprint lang-\");\n\t\t\tcls++;\n\t\t} else {\n\t\t\tBUFPUTSL(ob, \"<pre><code class=\\\"\");\n\t\t}\n\n\t\tfor (i = 0, cls = 0; i < lang->size; ++i, ++cls) {\n\t\t\twhile (i < lang->size && isspace(lang->data[i]))\n\t\t\t\ti++;\n\n\t\t\tif (i < lang->size) {\n\t\t\t\tsize_t org = i;\n\t\t\t\twhile (i < lang->size && !isspace(lang->data[i]))\n\t\t\t\t\ti++;\n\n\t\t\t\tif (lang->data[org] == '.')\n\t\t\t\t\torg++;\n\n\t\t\t\tif (cls) bufputc(ob, ' ');\n\t\t\t\tescape_html(ob, lang->data + org, i - org);\n\t\t\t}\n\t\t}\n\n\t\tBUFPUTSL(ob, \"\\\">\");\n\t} else if (options->flags & HTML_PRETTIFY) {\n\t\tBUFPUTSL(ob, \"<pre><code class=\\\"prettyprint\\\">\");\n\t} else {\n\t\tBUFPUTSL(ob, \"<pre><code>\");\n\t}\n\n\tif (text)\n\t\tescape_html(ob, text->data, text->size);\n\n\tBUFPUTSL(ob, \"</code></pre>\\n\");\n}\n\nstatic void\nrndr_blockquote(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (ob->size) bufputc(ob, '\\n');\n\tBUFPUTSL(ob, \"<blockquote>\\n\");\n\tif (text) bufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</blockquote>\\n\");\n}\n\nstatic int\nrndr_codespan(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\tif (options->flags & HTML_PRETTIFY)\n\t\tBUFPUTSL(ob, \"<code class=\\\"prettyprint\\\">\");\n\telse\n\t\tBUFPUTSL(ob, \"<code>\");\n\tif (text) escape_html(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</code>\");\n\treturn 1;\n}\n\nstatic int\nrndr_strikethrough(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size)\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<del>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</del>\");\n\treturn 1;\n}\n\nstatic int\nrndr_double_emphasis(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size)\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<strong>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</strong>\");\n\n\treturn 1;\n}\n\nstatic int\nrndr_emphasis(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size) return 0;\n\tBUFPUTSL(ob, \"<em>\");\n\tif (text) bufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</em>\");\n\treturn 1;\n}\n\nstatic int\nrndr_underline(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size)\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<u>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</u>\");\n\n\treturn 1;\n}\n\nstatic int\nrndr_highlight(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size)\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<mark>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</mark>\");\n\n\treturn 1;\n}\n\nstatic int\nrndr_quote(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size)\n\t\treturn 0;\n\n\tstruct html_renderopt *options = opaque;\n\n\tBUFPUTSL(ob, \"<q>\");\n\n\tif (options->flags & HTML_ESCAPE)\n\t\tescape_html(ob, text->data, text->size);\n\telse\n\t\tbufput(ob, text->data, text->size);\n\n\tBUFPUTSL(ob, \"</q>\");\n\n\treturn 1;\n}\n\nstatic int\nrndr_linebreak(struct buf *ob, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\tbufputs(ob, USE_XHTML(options) ? \"<br/>\\n\" : \"<br>\\n\");\n\treturn 1;\n}\n\nstatic void\nrndr_header_anchor(struct buf *out, const struct buf *anchor)\n{\n\tstatic const char *STRIPPED = \" -&+$,/:;=?@\\\"#{}|^~[]`\\\\*()%.!'\";\n\n\tconst uint8_t *a = anchor->data;\n\tconst size_t size = anchor->size;\n\tsize_t i = 0;\n\tint stripped = 0, inserted = 0;\n\n\tfor (; i < size; ++i) {\n\t\t// skip html tags\n\t\tif (a[i] == '<') {\n\t\t\twhile (i < size && a[i] != '>')\n\t\t\t\ti++;\n\t\t// skip html entities\n\t\t} else if (a[i] == '&') {\n\t\t\twhile (i < size && a[i] != ';')\n\t\t\t\ti++;\n\t\t}\n\t\t// replace non-ascii or invalid characters with dashes\n\t\telse if (!isascii(a[i]) || strchr(STRIPPED, a[i])) {\n\t\t\tif (inserted && !stripped)\n\t\t\t\tbufputc(out, '-');\n\t\t\t// and do it only once\n\t\t\tstripped = 1;\n\t\t}\n\t\telse {\n\t\t\tbufputc(out, tolower(a[i]));\n\t\t\tstripped = 0;\n\t\t\tinserted++;\n\t\t}\n\t}\n\n\t// replace the last dash if there was anything added\n\tif (stripped && inserted)\n\t\tout->size--;\n\n\t// if anchor found empty, use djb2 hash for it\n\tif (!inserted && anchor->size) {\n\t        unsigned long hash = 5381;\n\t\tfor (i = 0; i < size; ++i) {\n\t\t\thash = ((hash << 5) + hash) + a[i]; /* h * 33 + c */\n\t\t}\n\t\tbufprintf(out, \"part-%lx\", hash);\n\t}\n}\n\nstatic void\nrndr_header(struct buf *ob, const struct buf *text, int level, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (ob->size)\n\t\tbufputc(ob, '\\n');\n\n\tif ((options->flags & HTML_TOC) && level >= options->toc_data.nesting_bounds[0] &&\n\t     level <= options->toc_data.nesting_bounds[1]) {\n\t\tbufprintf(ob, \"<h%d id=\\\"\", level);\n\t\trndr_header_anchor(ob, text);\n\t\tBUFPUTSL(ob, \"\\\">\");\n\t}\n\telse\n\t\tbufprintf(ob, \"<h%d>\", level);\n\n\tif (text) bufput(ob, text->data, text->size);\n\tbufprintf(ob, \"</h%d>\\n\", level);\n}\n\nstatic int\nrndr_link(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *content, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (link != NULL && (options->flags & HTML_SAFELINK) != 0 && !sd_autolink_issafe(link->data, link->size))\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<a href=\\\"\");\n\n\tif (link && link->size)\n\t\tescape_href(ob, link->data, link->size);\n\n\tif (title && title->size) {\n\t\tBUFPUTSL(ob, \"\\\" title=\\\"\");\n\t\tescape_html(ob, title->data, title->size);\n\t}\n\n\tif (options->link_attributes) {\n\t\tbufputc(ob, '\\\"');\n\t\toptions->link_attributes(ob, link, opaque);\n\t\tbufputc(ob, '>');\n\t} else {\n\t\tBUFPUTSL(ob, \"\\\">\");\n\t}\n\n\tif (content && content->size) bufput(ob, content->data, content->size);\n\tBUFPUTSL(ob, \"</a>\");\n\treturn 1;\n}\n\nstatic void\nrndr_list(struct buf *ob, const struct buf *text, int flags, void *opaque)\n{\n\tif (ob->size) bufputc(ob, '\\n');\n\tbufput(ob, flags & MKD_LIST_ORDERED ? \"<ol>\\n\" : \"<ul>\\n\", 5);\n\tif (text) bufput(ob, text->data, text->size);\n\tbufput(ob, flags & MKD_LIST_ORDERED ? \"</ol>\\n\" : \"</ul>\\n\", 6);\n}\n\nstatic void\nrndr_listitem(struct buf *ob, const struct buf *text, int flags, void *opaque)\n{\n\tBUFPUTSL(ob, \"<li>\");\n\tif (text) {\n\t\tsize_t size = text->size;\n\t\twhile (size && text->data[size - 1] == '\\n')\n\t\t\tsize--;\n\n\t\tbufput(ob, text->data, size);\n\t}\n\tBUFPUTSL(ob, \"</li>\\n\");\n}\n\nstatic void\nrndr_paragraph(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\tsize_t i = 0;\n\n\tif (ob->size) bufputc(ob, '\\n');\n\n\tif (!text || !text->size)\n\t\treturn;\n\n\twhile (i < text->size && isspace(text->data[i])) i++;\n\n\tif (i == text->size)\n\t\treturn;\n\n\tBUFPUTSL(ob, \"<p>\");\n\tif (options->flags & HTML_HARD_WRAP) {\n\t\tsize_t org;\n\t\twhile (i < text->size) {\n\t\t\torg = i;\n\t\t\twhile (i < text->size && text->data[i] != '\\n')\n\t\t\t\ti++;\n\n\t\t\tif (i > org)\n\t\t\t\tbufput(ob, text->data + org, i - org);\n\n\t\t\t/*\n\t\t\t * do not insert a line break if this newline\n\t\t\t * is the last character on the paragraph\n\t\t\t */\n\t\t\tif (i >= text->size - 1)\n\t\t\t\tbreak;\n\n\t\t\trndr_linebreak(ob, opaque);\n\t\t\ti++;\n\t\t}\n\t} else {\n\t\tbufput(ob, &text->data[i], text->size - i);\n\t}\n\tBUFPUTSL(ob, \"</p>\\n\");\n}\n\nstatic void\nrndr_raw_block(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tsize_t org, size;\n\tstruct html_renderopt *options = opaque;\n\n\tif (!text)\n\t\treturn;\n\n\tsize = text->size;\n\twhile (size > 0 && text->data[size - 1] == '\\n')\n\t\tsize--;\n\n\tfor (org = 0; org < size && text->data[org] == '\\n'; ++org)\n\n\tif (org >= size)\n\t\treturn;\n\n\t/* Remove style tags if the `:no_styles` option is enabled */\n\tif ((options->flags & HTML_SKIP_STYLE) != 0 &&\n\t\tsdhtml_is_tag(text->data, size, \"style\"))\n\t\treturn;\n\n\tif (ob->size)\n\t\tbufputc(ob, '\\n');\n\n\tbufput(ob, text->data + org, size - org);\n\tbufputc(ob, '\\n');\n}\n\nstatic int\nrndr_triple_emphasis(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size) return 0;\n\tBUFPUTSL(ob, \"<strong><em>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</em></strong>\");\n\treturn 1;\n}\n\nstatic void\nrndr_hrule(struct buf *ob, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\tif (ob->size) bufputc(ob, '\\n');\n\tbufputs(ob, USE_XHTML(options) ? \"<hr/>\\n\" : \"<hr>\\n\");\n}\n\nstatic int\nrndr_image(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *alt, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (link != NULL && (options->flags & HTML_SAFELINK) != 0 && !sd_autolink_issafe(link->data, link->size))\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<img src=\\\"\");\n\n\tif (link && link->size)\n\t\tescape_href(ob, link->data, link->size);\n\n\tBUFPUTSL(ob, \"\\\" alt=\\\"\");\n\n\tif (alt && alt->size)\n\t\tescape_html(ob, alt->data, alt->size);\n\n\tif (title && title->size) {\n\t\tBUFPUTSL(ob, \"\\\" title=\\\"\");\n\t\tescape_html(ob, title->data, title->size);\n\t}\n\n\tbufputs(ob, USE_XHTML(options) ? \"\\\"/>\" : \"\\\">\");\n\treturn 1;\n}\n\nstatic int\nrndr_raw_html(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\t/* HTML_ESCAPE overrides SKIP_HTML, SKIP_STYLE, SKIP_LINKS and SKIP_IMAGES\n\t   It doesn't see if there are any valid tags, just escape all of them. */\n\tif((options->flags & HTML_ESCAPE) != 0) {\n\t\tescape_html(ob, text->data, text->size);\n\t\treturn 1;\n\t}\n\n\tif ((options->flags & HTML_SKIP_HTML) != 0)\n\t\treturn 1;\n\n\tif ((options->flags & HTML_SKIP_STYLE) != 0 &&\n\t\tsdhtml_is_tag(text->data, text->size, \"style\"))\n\t\treturn 1;\n\n\tif ((options->flags & HTML_SKIP_LINKS) != 0 &&\n\t\tsdhtml_is_tag(text->data, text->size, \"a\"))\n\t\treturn 1;\n\n\tif ((options->flags & HTML_SKIP_IMAGES) != 0 &&\n\t\tsdhtml_is_tag(text->data, text->size, \"img\"))\n\t\treturn 1;\n\n\tbufput(ob, text->data, text->size);\n\treturn 1;\n}\n\nstatic void\nrndr_table(struct buf *ob, const struct buf *header, const struct buf *body, void *opaque)\n{\n\tif (ob->size) bufputc(ob, '\\n');\n\tBUFPUTSL(ob, \"<table><thead>\\n\");\n\tif (header)\n\t\tbufput(ob, header->data, header->size);\n\tBUFPUTSL(ob, \"</thead><tbody>\\n\");\n\tif (body)\n\t\tbufput(ob, body->data, body->size);\n\tBUFPUTSL(ob, \"</tbody></table>\\n\");\n}\n\nstatic void\nrndr_tablerow(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tBUFPUTSL(ob, \"<tr>\\n\");\n\tif (text)\n\t\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</tr>\\n\");\n}\n\nstatic void\nrndr_tablecell(struct buf *ob, const struct buf *text, int flags, void *opaque)\n{\n\tif (flags & MKD_TABLE_HEADER) {\n\t\tBUFPUTSL(ob, \"<th\");\n\t} else {\n\t\tBUFPUTSL(ob, \"<td\");\n\t}\n\n\tswitch (flags & MKD_TABLE_ALIGNMASK) {\n\tcase MKD_TABLE_ALIGN_CENTER:\n\t\tBUFPUTSL(ob, \" style=\\\"text-align: center\\\">\");\n\t\tbreak;\n\n\tcase MKD_TABLE_ALIGN_L:\n\t\tBUFPUTSL(ob, \" style=\\\"text-align: left\\\">\");\n\t\tbreak;\n\n\tcase MKD_TABLE_ALIGN_R:\n\t\tBUFPUTSL(ob, \" style=\\\"text-align: right\\\">\");\n\t\tbreak;\n\n\tdefault:\n\t\tBUFPUTSL(ob, \">\");\n\t}\n\n\tif (text)\n\t\tbufput(ob, text->data, text->size);\n\n\tif (flags & MKD_TABLE_HEADER) {\n\t\tBUFPUTSL(ob, \"</th>\\n\");\n\t} else {\n\t\tBUFPUTSL(ob, \"</td>\\n\");\n\t}\n}\n\nstatic int\nrndr_superscript(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size) return 0;\n\tBUFPUTSL(ob, \"<sup>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</sup>\");\n\treturn 1;\n}\n\nstatic void\nrndr_normal_text(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (text)\n\t\tescape_html(ob, text->data, text->size);\n}\n\nstatic void\nrndr_footnotes(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (ob->size) bufputc(ob, '\\n');\n\n\tBUFPUTSL(ob, \"<div class=\\\"footnotes\\\">\\n\");\n\tbufputs(ob, USE_XHTML(options) ? \"<hr/>\\n\" : \"<hr>\\n\");\n\tBUFPUTSL(ob, \"<ol>\\n\");\n\n\tif (text)\n\t\tbufput(ob, text->data, text->size);\n\n\tBUFPUTSL(ob, \"\\n</ol>\\n</div>\\n\");\n}\n\nstatic void\nrndr_footnote_def(struct buf *ob, const struct buf *text, unsigned int num, void *opaque)\n{\n\tsize_t i = 0;\n\tint pfound = 0;\n\n\t/* insert anchor at the end of first paragraph block */\n\tif (text) {\n\t\twhile ((i+3) < text->size) {\n\t\t\tif (text->data[i++] != '<') continue;\n\t\t\tif (text->data[i++] != '/') continue;\n\t\t\tif (text->data[i++] != 'p' && text->data[i] != 'P') continue;\n\t\t\tif (text->data[i] != '>') continue;\n\t\t\ti -= 3;\n\t\t\tpfound = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tbufprintf(ob, \"\\n<li id=\\\"fn%d\\\">\\n\", num);\n\tif (pfound) {\n\t\tbufput(ob, text->data, i);\n\t\tbufprintf(ob, \"&nbsp;<a href=\\\"#fnref%d\\\">&#8617;</a>\", num);\n\t\tbufput(ob, text->data + i, text->size - i);\n\t} else if (text) {\n\t\tbufput(ob, text->data, text->size);\n\t}\n\tBUFPUTSL(ob, \"</li>\\n\");\n}\n\nstatic int\nrndr_footnote_ref(struct buf *ob, unsigned int num, void *opaque)\n{\n\tbufprintf(ob, \"<sup id=\\\"fnref%d\\\"><a href=\\\"#fn%d\\\">%d</a></sup>\", num, num, num);\n\treturn 1;\n}\n\nstatic void\ntoc_header(struct buf *ob, const struct buf *text, int level, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\tif (level >= options->toc_data.nesting_bounds[0] &&\n\t    level <= options->toc_data.nesting_bounds[1]) {\n\t\t/* set the level offset if this is the first header\n\t\t * we're parsing for the document */\n\t\tif (options->toc_data.current_level == 0)\n\t\t\toptions->toc_data.level_offset = level - 1;\n\n\t\tlevel -= options->toc_data.level_offset;\n\n\t\tif (level > options->toc_data.current_level) {\n\t\t\twhile (level > options->toc_data.current_level) {\n\t\t\t\tBUFPUTSL(ob, \"<ul>\\n<li>\\n\");\n\t\t\t\toptions->toc_data.current_level++;\n\t\t\t}\n\t\t} else if (level < options->toc_data.current_level) {\n\t\t\tBUFPUTSL(ob, \"</li>\\n\");\n\t\t\twhile (level < options->toc_data.current_level) {\n\t\t\t\tBUFPUTSL(ob, \"</ul>\\n</li>\\n\");\n\t\t\t\toptions->toc_data.current_level--;\n\t\t\t}\n\t\t\tBUFPUTSL(ob,\"<li>\\n\");\n\t\t} else {\n\t\t\tBUFPUTSL(ob,\"</li>\\n<li>\\n\");\n\t\t}\n\n\t\tbufprintf(ob, \"<a href=\\\"#\");\n\t\trndr_header_anchor(ob, text);\n\t\tBUFPUTSL(ob, \"\\\">\");\n\n\t\tif (text) {\n\t\t\tif (options->flags & HTML_ESCAPE)\n\t\t\t\tescape_html(ob, text->data, text->size);\n\t\t\telse\n\t\t\t\tbufput(ob, text->data, text->size);\n\t\t}\n\n\t\tBUFPUTSL(ob, \"</a>\\n\");\n\t}\n}\n\nstatic int\ntoc_link(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *content, void *opaque)\n{\n\tif (content && content->size)\n\t\tbufput(ob, content->data, content->size);\n\treturn 1;\n}\n\nstatic void\ntoc_finalize(struct buf *ob, void *opaque)\n{\n\tstruct html_renderopt *options = opaque;\n\n\twhile (options->toc_data.current_level > 0) {\n\t\tBUFPUTSL(ob, \"</li>\\n</ul>\\n\");\n\t\toptions->toc_data.current_level--;\n\t}\n}\n\nvoid\nsdhtml_toc_renderer(struct sd_callbacks *callbacks, struct html_renderopt *options, unsigned int render_flags)\n{\n\tstatic const struct sd_callbacks cb_default = {\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\ttoc_header,\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\trndr_footnotes,\n\t\trndr_footnote_def,\n\n\t\tNULL,\n\t\trndr_codespan,\n\t\trndr_double_emphasis,\n\t\trndr_emphasis,\n\t\trndr_underline,\n\t\trndr_highlight,\n\t\trndr_quote,\n\t\tNULL,\n\t\tNULL,\n\t\ttoc_link,\n\t\tNULL,\n\t\trndr_triple_emphasis,\n\t\trndr_strikethrough,\n\t\trndr_superscript,\n\t\trndr_footnote_ref,\n\n\t\tNULL,\n\t\tNULL,\n\n\t\tNULL,\n\t\ttoc_finalize,\n\t};\n\n\tmemset(options, 0x0, sizeof(struct html_renderopt));\n\toptions->flags = render_flags;\n\n\tmemcpy(callbacks, &cb_default, sizeof(struct sd_callbacks));\n}\n\nvoid\nsdhtml_renderer(struct sd_callbacks *callbacks, struct html_renderopt *options, unsigned int render_flags)\n{\n\tstatic const struct sd_callbacks cb_default = {\n\t\trndr_blockcode,\n\t\trndr_blockquote,\n\t\trndr_raw_block,\n\t\trndr_header,\n\t\trndr_hrule,\n\t\trndr_list,\n\t\trndr_listitem,\n\t\trndr_paragraph,\n\t\trndr_table,\n\t\trndr_tablerow,\n\t\trndr_tablecell,\n\t\trndr_footnotes,\n\t\trndr_footnote_def,\n\n\t\trndr_autolink,\n\t\trndr_codespan,\n\t\trndr_double_emphasis,\n\t\trndr_emphasis,\n\t\trndr_underline,\n\t\trndr_highlight,\n\t\trndr_quote,\n\t\trndr_image,\n\t\trndr_linebreak,\n\t\trndr_link,\n\t\trndr_raw_html,\n\t\trndr_triple_emphasis,\n\t\trndr_strikethrough,\n\t\trndr_superscript,\n\t\trndr_footnote_ref,\n\n\t\tNULL,\n\t\trndr_normal_text,\n\n\t\tNULL,\n\t\tNULL,\n\t};\n\n\t/* Prepare the options pointer */\n\tmemset(options, 0x0, sizeof(struct html_renderopt));\n\toptions->flags = render_flags;\n\toptions->toc_data.nesting_bounds[0] = 1;\n\toptions->toc_data.nesting_bounds[1] = 6;\n\n\t/* Prepare the callbacks */\n\tmemcpy(callbacks, &cb_default, sizeof(struct sd_callbacks));\n\n\tif (render_flags & HTML_SKIP_IMAGES)\n\t\tcallbacks->image = NULL;\n\n\tif (render_flags & HTML_SKIP_LINKS) {\n\t\tcallbacks->link = NULL;\n\t\tcallbacks->autolink = NULL;\n\t}\n\n\tif (render_flags & HTML_SKIP_HTML || render_flags & HTML_ESCAPE)\n\t\tcallbacks->blockhtml = NULL;\n}\n", "require 'redcarpet.so'\nrequire 'redcarpet/compat'\n\nmodule Redcarpet\n  VERSION = '3.5.1'\n\n  class Markdown\n    attr_reader :renderer\n  end\n\n  module Render\n\n    # XHTML Renderer\n    class XHTML < HTML\n      def initialize(extensions = {})\n        super(extensions.merge(xhtml: true))\n      end\n    end\n\n    # HTML + SmartyPants renderer\n    class SmartyHTML < HTML\n      include SmartyPants\n    end\n\n    # A renderer object you can use to deal with users' input. It\n    # enables +escape_html+ and +safe_links_only+ by default.\n    #\n    # The +block_code+ callback is also overriden not to include\n    # the lang's class as the user can basically specify anything\n    # with the vanilla one.\n    class Safe < HTML\n      def initialize(extensions = {})\n        super({\n          escape_html: true,\n          safe_links_only: true\n        }.merge(extensions))\n      end\n\n      def block_code(code, lang)\n        \"<pre>\" \\\n          \"<code>#{html_escape(code)}</code>\" \\\n        \"</pre>\"\n      end\n\n      private\n\n      # TODO: This is far from ideal to have such method as we\n      # are duplicating existing code from Houdini. This method\n      # should be defined at the C level.\n      def html_escape(string)\n        string.gsub(/['&\\\"<>\\/]/, {\n          '&' => '&amp;',\n          '<' => '&lt;',\n          '>' => '&gt;',\n          '\"' => '&quot;',\n          \"'\" => '&#x27;',\n          \"/\" => '&#x2F;',\n        })\n      end\n    end\n\n    # SmartyPants Mixin module\n    #\n    # Implements SmartyPants.postprocess, which\n    # performs smartypants replacements on the HTML file,\n    # once it has been fully rendered.\n    #\n    # To add SmartyPants postprocessing to your custom\n    # renderers, just mixin the module `include SmartyPants`\n    #\n    # You can also use this as a standalone SmartyPants\n    # implementation.\n    #\n    # Example:\n    #\n    #   # Mixin\n    #   class CoolRenderer < HTML\n    #     include SmartyPants\n    #     # more code here\n    #   end\n    #\n    #   # Standalone\n    #   Redcarpet::Render::SmartyPants.render(\"you're\")\n    #\n    module SmartyPants\n      extend self\n      def self.render(text)\n        postprocess text\n      end\n    end\n  end\nend\n", "# encoding: utf-8\nGem::Specification.new do |s|\n  s.name = 'redcarpet'\n  s.version = '3.5.1'\n  s.summary = \"Markdown that smells nice\"\n  s.description = 'A fast, safe and extensible Markdown to (X)HTML parser'\n  s.date = '2020-12-15'\n  s.email = 'vicent@github.com'\n  s.homepage = 'http://github.com/vmg/redcarpet'\n  s.authors = [\"Natacha Port\u00e9\", \"Vicent Mart\u00ed\"]\n  s.license = 'MIT'\n  s.required_ruby_version = '>= 1.9.2'\n  # = MANIFEST =\n  s.files = %w[\n    COPYING\n    Gemfile\n    README.markdown\n    Rakefile\n    bin/redcarpet\n    ext/redcarpet/autolink.c\n    ext/redcarpet/autolink.h\n    ext/redcarpet/buffer.c\n    ext/redcarpet/buffer.h\n    ext/redcarpet/extconf.rb\n    ext/redcarpet/houdini.h\n    ext/redcarpet/houdini_href_e.c\n    ext/redcarpet/houdini_html_e.c\n    ext/redcarpet/html.c\n    ext/redcarpet/html.h\n    ext/redcarpet/html_blocks.h\n    ext/redcarpet/html_smartypants.c\n    ext/redcarpet/markdown.c\n    ext/redcarpet/markdown.h\n    ext/redcarpet/rc_markdown.c\n    ext/redcarpet/rc_render.c\n    ext/redcarpet/redcarpet.h\n    ext/redcarpet/stack.c\n    ext/redcarpet/stack.h\n    lib/redcarpet.rb\n    lib/redcarpet/cli.rb\n    lib/redcarpet/compat.rb\n    lib/redcarpet/render_man.rb\n    lib/redcarpet/render_strip.rb\n    redcarpet.gemspec\n    test/benchmark.rb\n    test/custom_render_test.rb\n    test/fixtures/benchmark.md\n    test/html5_test.rb\n    test/html_render_test.rb\n    test/html_toc_render_test.rb\n    test/markdown_test.rb\n    test/pathological_inputs_test.rb\n    test/redcarpet_bin_test.rb\n    test/redcarpet_compat_test.rb\n    test/safe_render_test.rb\n    test/smarty_html_test.rb\n    test/smarty_pants_test.rb\n    test/stripdown_render_test.rb\n    test/test_helper.rb\n  ]\n  # = MANIFEST =\n  s.test_files = s.files.grep(%r{^test/})\n  s.extra_rdoc_files = [\"COPYING\"]\n  s.extensions = [\"ext/redcarpet/extconf.rb\"]\n  s.executables = [\"redcarpet\"]\n  s.require_paths = [\"lib\"]\n\n  s.add_development_dependency \"rake\", \"~> 12.2.1\"\n  s.add_development_dependency \"rake-compiler\", \"~> 1.0.3\"\n  s.add_development_dependency \"test-unit\", \"~> 3.2.3\"\nend\n", "# coding: UTF-8\nrequire 'test_helper'\n\nclass MarkdownTest < Redcarpet::TestCase\n  def setup\n    @renderer = Redcarpet::Render::HTML\n  end\n\n  def test_that_simple_one_liner_goes_to_html\n    assert_equal \"<p>Hello World.</p>\", render(\"Hello World.\")\n  end\n\n  def test_that_inline_markdown_goes_to_html\n    assert_equal \"<p><em>Hello World</em>!</p>\", render('_Hello World_!')\n  end\n\n  def test_that_inline_markdown_starts_and_ends_correctly\n    output   = render('_start _ foo_bar bar_baz _ end_ *italic* **bold** <a>_blah_</a>', with: [:no_intra_emphasis])\n    expected = \"<p><em>start _ foo_bar bar_baz _ end</em> <em>italic</em> <strong>bold</strong> <a><em>blah</em></a></p>\"\n\n    assert_equal expected, output\n\n    output   = render(\"Run 'rake radiant:extensions:rbac_base:migrate'\")\n    expected = \"<p>Run &#39;rake radiant:extensions:rbac_base:migrate&#39;</p>\"\n\n    assert_equal expected, output\n  end\n\n  def test_that_urls_are_not_doubly_escaped\n    output = render('[Page 2](/search?query=Markdown+Test&page=2)')\n    assert_equal \"<p><a href=\\\"/search?query=Markdown+Test&page=2\\\">Page 2</a></p>\", output\n  end\n\n  def test_simple_inline_html\n    output   = render(\"before\\n\\n<div>\\n  foo\\n</div>\\n\\nafter\")\n    expected = \"<p>before</p>\\n\\n<div>\\n  foo\\n</div>\\n\\n<p>after</p>\"\n\n    assert_equal expected, output\n  end\n\n  def test_that_html_blocks_do_not_require_their_own_end_tag_line\n    output   = render(\"Para 1\\n\\n<div><pre>HTML block\\n</pre></div>\\n\\nPara 2 [Link](#anchor)\")\n    expected = \"<p>Para 1</p>\\n\\n<div><pre>HTML block\\n</pre></div>\\n\\n<p>Para 2 <a href=\\\"#anchor\\\">Link</a></p>\"\n\n    assert_equal expected, output\n  end\n\n  # This isn't in the spec but is Markdown.pl behavior.\n  def test_block_quotes_preceded_by_spaces\n    output = render <<-Markdown.strip_heredoc\n      A wise man once said:\n\n\n       > Isn't it wonderful just to be alive.\n    Markdown\n    expected = <<-HTML.chomp.strip_heredoc\n      <p>A wise man once said:</p>\n\n      <blockquote>\n      <p>Isn&#39;t it wonderful just to be alive.</p>\n      </blockquote>\n    HTML\n\n    assert_equal expected, output\n  end\n\n  def test_para_before_block_html_should_not_wrap_in_p_tag\n    output   = render(\"Things to watch out for\\n<ul>\\n<li>Blah</li>\\n</ul>\", with: [:lax_spacing])\n    expected = \"<p>Things to watch out for</p>\\n\\n<ul>\\n<li>Blah</li>\\n</ul>\"\n\n    assert_equal expected, output\n  end\n\n  # https://github.com/vmg/redcarpet/issues/111\n  def test_p_with_less_than_4space_indent_should_not_be_part_of_last_list_item\n    text = <<-Markdown\n  * a\n  * b\n  * c\n\n  This paragraph is not part of the list.\n    Markdown\n    expected = <<-HTML.chomp.strip_heredoc\n      <ul>\n      <li>a</li>\n      <li>b</li>\n      <li>c</li>\n      </ul>\n\n      <p>This paragraph is not part of the list.</p>\n    HTML\n\n    assert_equal expected, render(text)\n  end\n\n  # http://github.com/rtomayko/rdiscount/issues/#issue/13\n  def test_headings_with_trailing_space\n    text = \"The Ant-Sugar Tales \\n\"       +\n           \"=================== \\n\\n\"     +\n           \"By Candice Yellowflower   \\n\"\n\n    assert_equal \"<h1>The Ant-Sugar Tales </h1>\\n\\n<p>By Candice Yellowflower   </p>\", render(text)\n  end\n\n  def test_that_intra_emphasis_works\n    assert_equal \"<p>foo<em>bar</em>baz</p>\", render(\"foo_bar_baz\")\n    assert_equal \"<p>foo_bar_baz</p>\", render(\"foo_bar_baz\", with: [:no_intra_emphasis])\n  end\n\n  def test_that_autolink_flag_works\n    output   = render(\"http://github.com/rtomayko/rdiscount\", with: [:autolink])\n    expected = \"<p><a href=\\\"http://github.com/rtomayko/rdiscount\\\">http://github.com/rtomayko/rdiscount</a></p>\"\n\n    assert_equal expected, output\n  end\n\n  def test_that_tags_can_have_dashes_and_underscores\n    output   = render(\"foo <asdf-qwerty>bar</asdf-qwerty> and <a_b>baz</a_b>\")\n    expected = \"<p>foo <asdf-qwerty>bar</asdf-qwerty> and <a_b>baz</a_b></p>\"\n\n    assert_equal expected, output\n  end\n\n  def test_link_syntax_is_not_processed_within_code_blocks\n    output   = render(\"    This is a code block\\n    This is a link [[1]] inside\\n\")\n    expected = \"<pre><code>This is a code block\\nThis is a link [[1]] inside\\n</code></pre>\"\n\n    assert_equal expected, output\n  end\n\n  def test_whitespace_after_urls\n    output   = render(\"Japan: http://www.abc.net.au/news/events/japan-quake-2011/beforeafter.htm (yes, japan)\", with: [:autolink])\n    expected = %(<p>Japan: <a href=\"http://www.abc.net.au/news/events/japan-quake-2011/beforeafter.htm\">http://www.abc.net.au/news/events/japan-quake-2011/beforeafter.htm</a> (yes, japan)</p>)\n\n    assert_equal expected, output\n  end\n\n  def test_memory_leak_when_parsing_char_links\n    render(<<-leaks.strip_heredoc)\n      2. Identify the wild-type cluster and determine all clusters\n         containing or contained by it:\n\n             wildtype <- wildtype.cluster(h)\n             wildtype.mask <- logical(nclust)\n             wildtype.mask[c(contains(h, wildtype),\n                             wildtype,\n                             contained.by(h, wildtype))] <- TRUE\n\n         This could be more elegant.\n    leaks\n  end\n\n  def test_infinite_loop_in_header\n    assert_equal \"<h1>Body</h1>\", render(<<-header.strip_heredoc)\n      ######\n      #Body#\n      ######\n    header\n  end\n\n  def test_a_hyphen_and_a_equal_should_not_be_converted_to_heading\n    assert_equal \"<p>-</p>\", render(\"-\")\n    assert_equal \"<p>=</p>\", render(\"=\")\n  end\n\n  def test_that_tables_flag_works\n    text = <<-Markdown.strip_heredoc\n       aaa | bbbb\n      -----|------\n      hello|sailor\n    Markdown\n\n    assert render(text) !~ /<table/\n    assert render(text, with: [:tables]) =~ /<table/\n  end\n\n  def test_that_tables_work_with_org_table_syntax\n    text = <<-Markdown.strip_heredoc\n      | aaa | bbbb |\n      |-----+------|\n      |hello|sailor|\n    Markdown\n\n    assert render(text) !~ /<table/\n    assert render(text, with: [:tables]) =~ /<table/\n  end\n\n  def test_strikethrough_flag_works\n    text = \"this is ~some~ striked ~~text~~\"\n\n    assert render(text) !~ /<del/\n    assert render(text, with: [:strikethrough]) =~ /<del/\n  end\n\n  def test_underline_flag_works\n    text   = \"this is *some* text that is _underlined_. ___boom___\"\n    output = render(text, with: [:underline])\n\n    refute render(text).include? '<u>underlined</u>'\n\n    assert output.include? '<u>underlined</u>'\n    assert output.include? '<em>some</em>'\n  end\n\n  def test_highlight_flag_works\n    text   = \"this is ==highlighted==\"\n    output = render(text, with: [:highlight])\n\n    refute render(text).include? '<mark>highlighted</mark>'\n\n    assert output.include? '<mark>highlighted</mark>'\n  end\n\n  def test_quote_flag_works\n    text   = 'this is a \"quote\"'\n    output = render(text, with: [:quote])\n\n    refute render(text).include? '<q>quote</q>'\n\n    assert_equal '<p>this is a <q>quote</q></p>', output\n  end\n\n  def test_quote_flag_honors_escape_html\n    text = 'We are not \"<svg/onload=pwned>\"'\n\n    output_enabled  = render(text, with: [:quote, :escape_html])\n    output_disabled = render(text, with: [:quote])\n\n    assert_equal \"<p>We are not <q>&lt;svg/onload=pwned&gt;</q></p>\", output_enabled\n    assert_equal \"<p>We are not <q><svg/onload=pwned></q></p>\", output_disabled\n  end\n\n  def test_that_fenced_flag_works\n    text = <<-fenced.strip_heredoc\n      This is a simple test\n\n      ~~~~~\n      This is some awesome code\n          with tabs and shit\n      ~~~\n    fenced\n\n    assert render(text) !~ /<code/\n    assert render(text, with: [:fenced_code_blocks]) =~ /<code/\n  end\n\n  def test_that_fenced_flag_works_without_space\n    text   = \"foo\\nbar\\n```\\nsome\\ncode\\n```\\nbaz\"\n    output = render(text, with: [:fenced_code_blocks, :lax_spacing])\n\n    assert output.include?(\"<pre><code>\")\n\n    output = render(text, with: [:fenced_code_blocks])\n    assert !output.include?(\"<pre><code>\")\n  end\n\n  def test_that_indented_code_preserves_references\n    text = <<-indented.strip_heredoc\n      This is normal text\n\n          Link to [Google][1]\n\n          [1]: http://google.com\n    indented\n\n    output = render(text, with: [:fenced_code_blocks])\n    assert output.include?(\"[1]: http://google.com\")\n  end\n\n  def test_that_fenced_flag_preserves_references\n    text = <<-fenced.strip_heredoc\n      This is normal text\n\n      ```\n      Link to [Google][1]\n\n      [1]: http://google.com\n      ```\n    fenced\n\n    out = render(text, with: [:fenced_code_blocks])\n    assert out.include?(\"[1]: http://google.com\")\n  end\n\n  def test_that_fenced_code_copies_language_verbatim_with_braces\n    text = \"```{rust,no_run}\\nx = 'foo'\\n```\"\n    html = render(text, with: [:fenced_code_blocks])\n\n    assert_equal \"<pre><code class=\\\"rust,no_run\\\">x = &#39;foo&#39;\\n</code></pre>\", html\n  end\n\n  def test_that_fenced_code_copies_language_verbatim\n    text = \"```rust,no_run\\nx = 'foo'\\n```\"\n    html = render(text, with: [:fenced_code_blocks])\n\n    assert_equal \"<pre><code class=\\\"rust,no_run\\\">x = &#39;foo&#39;\\n</code></pre>\", html\n  end\n\n  def test_that_indented_flag_works\n    text = <<-indented.strip_heredoc\n      This is a simple text\n\n          This is some awesome code\n          with shit\n\n      And this is again a simple text\n    indented\n\n    assert render(text) =~ /<code/\n    assert render(text, with: [:disable_indented_code_blocks]) !~ /<code/\n  end\n\n  def test_that_headers_are_linkable\n    output   = render('### Hello [GitHub](http://github.com)')\n    expected = \"<h3>Hello <a href=\\\"http://github.com\\\">GitHub</a></h3>\"\n\n    assert_equal expected, output\n  end\n\n  def test_autolinking_with_ent_chars\n    markdown = <<-Markdown.strip_heredoc\n      This a stupid link: https://github.com/rtomayko/tilt/issues?milestone=1&state=open\n    Markdown\n    output   = render(markdown, with: [:autolink])\n\n    assert_equal \"<p>This a stupid link: <a href=\\\"https://github.com/rtomayko/tilt/issues?milestone=1&state=open\\\">https://github.com/rtomayko/tilt/issues?milestone=1&amp;state=open</a></p>\", output\n  end\n\n  def test_spaced_headers\n    output = render(\"#123 a header yes\\n\", with: [:space_after_headers])\n\n    assert output !~ /<h1>/\n  end\n\n  def test_proper_intra_emphasis\n    assert render(\"http://en.wikipedia.org/wiki/Dave_Allen_(comedian)\", with: [:no_intra_emphasis]) !~ /<em>/\n    assert render(\"this fails: hello_world_\", with: [:no_intra_emphasis]) !~ /<em>/\n    assert render(\"this also fails: hello_world_#bye\", with: [:no_intra_emphasis]) !~ /<em>/\n    assert render(\"this works: hello_my_world\", with: [:no_intra_emphasis]) !~ /<em>/\n    assert render(\"\u53e5\u4e2d**\u7c97\u9ad4**\u6e2c\u8a66\", with: [:no_intra_emphasis]) =~ /<strong>/\n\n    markdown = \"This is (**bold**) and this_is_not_italic!\"\n    output   = \"<p>This is (<strong>bold</strong>) and this_is_not_italic!</p>\"\n\n    assert_equal output, render(markdown, with: [:no_intra_emphasis])\n\n    markdown = \"This is \\\"**bold**\\\"\"\n    output   = \"<p>This is &quot;<strong>bold</strong>&quot;</p>\"\n    assert_equal output, render(markdown, with: [:no_intra_emphasis])\n  end\n\n  def test_emphasis_escaping\n    assert_equal \"<p><strong>foo*</strong> <em>dd_dd</em></p>\", render(\"**foo\\\\*** _dd\\\\_dd_\")\n  end\n\n  def test_char_escaping_when_highlighting\n    output = render(\"==attribute\\\\===\", with: [:highlight])\n\n    assert_equal \"<p><mark>attribute=</mark></p>\", output\n  end\n\n  def test_ordered_lists_with_lax_spacing\n    output = render(\"Foo:\\n1. Foo\\n2. Bar\", with: [:lax_spacing])\n\n    assert_match /<ol>/, output\n    assert_match /<li>Foo<\\/li>/, output\n  end\n\n  def test_references_with_tabs_after_colon\n    output = render(\"[Link][id]\\n[id]:\\t\\t\\thttp://google.es\")\n\n    assert_equal \"<p><a href=\\\"http://google.es\\\">Link</a></p>\", output\n  end\n\n  def test_superscript\n    output = render(\"this is the 2^nd time\", with: [:superscript])\n\n    assert_equal \"<p>this is the 2<sup>nd</sup> time</p>\", output\n  end\n\n  def test_superscript_enclosed_in_parenthesis\n    output = render(\"this is the 2^(nd) time\", with: [:superscript])\n\n    assert_equal \"<p>this is the 2<sup>nd</sup> time</p>\", output\n  end\n\n  def test_no_rewind_into_previous_inline\n    result = \"<p><em>!dl</em><a href=\\\"mailto:1@danlec.com\\\">1@danlec.com</a></p>\"\n    output = render(\"_!dl_1@danlec.com\", with: [:autolink])\n\n    assert_equal result, output\n\n    result = \"<p>abc123<em><a href=\\\"http://www.foo.com\\\">www.foo.com</a></em>@foo.com</p>\"\n    output = render(\"abc123_www.foo.com_@foo.com\", with: [:autolink])\n\n    assert_equal result, output\n  end\n\n  def test_autolink_with_period_next_to_url\n    result = %(<p>Checkout a cool site like <a href=\"https://github.com\">https://github.com</a>.</p>)\n    output = render(\"Checkout a cool site like https://github.com.\", with: [:autolink])\n\n    assert_equal result, output\n  end\n\n  def test_single_dashes_on_table_headers\n    markdown = <<-Markdown.strip_heredoc\n      | a | b |\n      | - | - |\n      | c | d |\n    Markdown\n    output   = render(markdown, with: [:tables])\n\n    assert_match /<table>/, output\n  end\nend\n"], "filenames": ["CHANGELOG.md", "ext/redcarpet/html.c", "lib/redcarpet.rb", "redcarpet.gemspec", "test/markdown_test.rb"], "buggy_code_start_loc": [1, 257, 5, 4, 222], "buggy_code_end_loc": [1, 260, 6, 8, 222], "fixing_code_start_loc": [2, 258, 5, 4, 223], "fixing_code_end_loc": [9, 267, 6, 8, 233], "type": "CWE-74", "message": "Redcarpet is a Ruby library for Markdown processing. In Redcarpet before version 3.5.1, there is an injection vulnerability which can enable a cross-site scripting attack. In affected versions no HTML escaping was being performed when processing quotes. This applies even when the `:escape_html` option was being used. This is fixed in version 3.5.1 by the referenced commit.", "other": {"cve": {"id": "CVE-2020-26298", "sourceIdentifier": "security-advisories@github.com", "published": "2021-01-11T19:15:13.133", "lastModified": "2023-05-09T04:15:40.053", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Redcarpet is a Ruby library for Markdown processing. In Redcarpet before version 3.5.1, there is an injection vulnerability which can enable a cross-site scripting attack. In affected versions no HTML escaping was being performed when processing quotes. This applies even when the `:escape_html` option was being used. This is fixed in version 3.5.1 by the referenced commit."}, {"lang": "es", "value": "Redcarpet es una biblioteca de Ruby para el procesamiento de Descuentos.&#xa0;En Redcarpet versiones anteriores a 3.5.1, se presenta una vulnerabilidad de inyecci\u00f3n que puede habilitar un ataque de tipo cross-site scripting.&#xa0;En las versiones afectadas, no se llevaba a cabo ning\u00fan escape HTML al procesar las cotizaciones.&#xa0;Esto aplica incluso cuando la opci\u00f3n \":escape_html\" hab\u00eda sido usada.&#xa0;Esto es corregido en la versi\u00f3n 3.5.1 mediante la confirmaci\u00f3n de referencia"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redcarpet_project:redcarpet:*:*:*:*:*:ruby:*:*", "versionEndExcluding": "3.5.1", "matchCriteriaId": "902228CC-361A-4FB7-B856-DB57477CD68F"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}], "references": [{"url": "https://github.com/advisories/GHSA-q3wr-qw3g-3p4h", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/vmg/redcarpet/blob/master/CHANGELOG.md#version-351-security", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/vmg/redcarpet/commit/a699c82292b17c8e6a62e1914d5eccc252272793", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2021/01/msg00014.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BFMYDIONVWATY7EB6EARDVXT47AYCRNM/", "source": "security-advisories@github.com"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FNO4ZZUPGAEUXKQL4G2HRIH7CUZKPCT6/", "source": "security-advisories@github.com"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PXNNWHHAPREDM3XJDACYRTK7DBMUONBI/", "source": "security-advisories@github.com"}, {"url": "https://rubygems.org/gems/redcarpet", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2021/dsa-4831", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/vmg/redcarpet/commit/a699c82292b17c8e6a62e1914d5eccc252272793"}}