{"buggy_code": ["<?php\n/**\n * @package php-svg-lib\n * @link    http://github.com/PhenX/php-svg-lib\n * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n * @license GNU LGPLv3+ http://www.gnu.org/copyleft/lesser.html\n */\n\nnamespace Svg\\Tag;\n\nclass UseTag extends AbstractTag\n{\n    protected $x = 0;\n    protected $y = 0;\n    protected $width;\n    protected $height;\n\n    /** @var AbstractTag */\n    protected $reference;\n\n    protected function before($attributes)\n    {\n        if (isset($attributes['x'])) {\n            $this->x = $attributes['x'];\n        }\n        if (isset($attributes['y'])) {\n            $this->y = $attributes['y'];\n        }\n\n        if (isset($attributes['width'])) {\n            $this->width = $attributes['width'];\n        }\n        if (isset($attributes['height'])) {\n            $this->height = $attributes['height'];\n        }\n\n        parent::before($attributes);\n\n        $document = $this->getDocument();\n\n        $link = $attributes[\"href\"] ?? $attributes[\"xlink:href\"];\n        $this->reference = $document->getDef($link);\n\n        if ($this->reference) {\n            $this->reference->before($attributes);\n        }\n\n        $surface = $document->getSurface();\n        $surface->save();\n\n        $surface->translate($this->x, $this->y);\n    }\n\n    protected function after() {\n        parent::after();\n\n        if ($this->reference) {\n            $this->reference->after();\n        }\n\n        $this->getDocument()->getSurface()->restore();\n    }\n\n    public function handle($attributes)\n    {\n        parent::handle($attributes);\n\n        if (!$this->reference) {\n            return;\n        }\n\n        $mergedAttributes = $this->reference->attributes;\n        $attributesToNotMerge = ['x', 'y', 'width', 'height'];\n        foreach ($attributes as $attrKey => $attrVal) {\n            if (!in_array($attrKey, $attributesToNotMerge) && !isset($mergedAttributes[$attrKey])) {\n                $mergedAttributes[$attrKey] = $attrVal;\n            }\n        }\n\n        $this->reference->handle($mergedAttributes);\n\n        foreach ($this->reference->children as $_child) {\n            $_attributes = array_merge($_child->attributes, $mergedAttributes);\n            $_child->handle($_attributes);\n        }\n    }\n\n    public function handleEnd()\n    {\n        parent::handleEnd();\n\n        if (!$this->reference) {\n            return;\n        }\n\n        $this->reference->handleEnd();\n\n        foreach ($this->reference->children as $_child) {\n            $_child->handleEnd();\n        }\n    }\n} \n"], "fixing_code": ["<?php\n/**\n * @package php-svg-lib\n * @link    http://github.com/PhenX/php-svg-lib\n * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n * @license GNU LGPLv3+ http://www.gnu.org/copyleft/lesser.html\n */\n\nnamespace Svg\\Tag;\n\nclass UseTag extends AbstractTag\n{\n    protected $x = 0;\n    protected $y = 0;\n    protected $width;\n    protected $height;\n    protected $instances = 0;\n\n    /** @var AbstractTag */\n    protected $reference;\n\n    protected function before($attributes)\n    {\n        $this->instances++;\n        if ($this->instances > 1) {\n            //TODO: log circular reference error state\n            return;\n        }\n\n        if (isset($attributes['x'])) {\n            $this->x = $attributes['x'];\n        }\n        if (isset($attributes['y'])) {\n            $this->y = $attributes['y'];\n        }\n\n        if (isset($attributes['width'])) {\n            $this->width = $attributes['width'];\n        }\n        if (isset($attributes['height'])) {\n            $this->height = $attributes['height'];\n        }\n\n        parent::before($attributes);\n\n        $document = $this->getDocument();\n\n        $link = $attributes[\"href\"] ?? $attributes[\"xlink:href\"];\n        $this->reference = $document->getDef($link);\n\n        if ($this->reference) {\n            $this->reference->before($attributes);\n        }\n\n        $surface = $document->getSurface();\n        $surface->save();\n\n        $surface->translate($this->x, $this->y);\n    }\n\n    protected function after() {\n        if ($this->instances > 0) {\n            return;\n        }\n        parent::after();\n\n        if ($this->reference) {\n            $this->reference->after();\n        }\n\n        $this->getDocument()->getSurface()->restore();\n    }\n\n    public function handle($attributes)\n    {\n        if ($this->instances > 1) {\n            //TODO: log circular reference error state\n            return;\n        }\n\n        parent::handle($attributes);\n\n        if (!$this->reference) {\n            return;\n        }\n\n        $mergedAttributes = $this->reference->attributes;\n        $attributesToNotMerge = ['x', 'y', 'width', 'height'];\n        foreach ($attributes as $attrKey => $attrVal) {\n            if (!in_array($attrKey, $attributesToNotMerge) && !isset($mergedAttributes[$attrKey])) {\n                $mergedAttributes[$attrKey] = $attrVal;\n            }\n        }\n\n        $this->reference->handle($mergedAttributes);\n\n        foreach ($this->reference->children as $_child) {\n            $_attributes = array_merge($_child->attributes, $mergedAttributes);\n            $_child->handle($_attributes);\n        }\n    }\n\n    public function handleEnd()\n    {\n        $this->instances--;\n        if ($this->instances > 0) {\n            return;\n        }\n\n        parent::handleEnd();\n\n        if (!$this->reference) {\n            return;\n        }\n\n        $this->reference->handleEnd();\n\n        foreach ($this->reference->children as $_child) {\n            $_child->handleEnd();\n        }\n    }\n} \n"], "filenames": ["src/Svg/Tag/UseTag.php"], "buggy_code_start_loc": [16], "buggy_code_end_loc": [89], "fixing_code_start_loc": [17], "fixing_code_end_loc": [110], "type": "CWE-674", "message": "php-svg-lib is an SVG file parsing / rendering library. Prior to version 0.5.1, when parsing the attributes passed to a `use` tag inside an svg document, an attacker can cause the system to go to an infinite recursion. Depending on the system configuration and attack pattern this could exhaust the memory available to the executing process and/or to the server itself. An attacker sending multiple request to a system to render the above payload can potentially cause resource exhaustion to the point that the system is unable to handle incoming request. Version 0.5.1 contains a patch for this issue.", "other": {"cve": {"id": "CVE-2023-50251", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-12T21:15:08.453", "lastModified": "2023-12-15T17:51:25.283", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "php-svg-lib is an SVG file parsing / rendering library. Prior to version 0.5.1, when parsing the attributes passed to a `use` tag inside an svg document, an attacker can cause the system to go to an infinite recursion. Depending on the system configuration and attack pattern this could exhaust the memory available to the executing process and/or to the server itself. An attacker sending multiple request to a system to render the above payload can potentially cause resource exhaustion to the point that the system is unable to handle incoming request. Version 0.5.1 contains a patch for this issue."}, {"lang": "es", "value": "php-svg-lib es una librer\u00eda de an\u00e1lisis/representaci\u00f3n de archivos SVG. Antes de la versi\u00f3n 0.5.1, al analizar los atributos pasados a una etiqueta \"use\" dentro de un documento svg, un atacante pod\u00eda hacer que el sistema entrara en una recursividad infinita. Dependiendo de la configuraci\u00f3n del sistema y del patr\u00f3n de ataque, esto podr\u00eda agotar la memoria disponible para el proceso en ejecuci\u00f3n y/o para el propio servidor. Un atacante que env\u00eda m\u00faltiples solicitudes a un sistema para representar el payload anterior puede potencialmente causar el agotamiento de los recursos hasta el punto de que el sistema no pueda manejar la solicitud entrante. La versi\u00f3n 0.5.1 contiene un parche para este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-674"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dompdf:php-svg-lib:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.5.1", "matchCriteriaId": "F1E345BA-6667-40EB-AF3F-E279441B6C90"}]}]}], "references": [{"url": "https://github.com/dompdf/php-svg-lib/commit/88163cbe562d9b391b3a352e54d9c89d02d77ee0", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/dompdf/php-svg-lib/security/advisories/GHSA-ff5x-7qg5-vwf2", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/dompdf/php-svg-lib/commit/88163cbe562d9b391b3a352e54d9c89d02d77ee0"}}