{"buggy_code": ["# frozen_string_literal: true\n\nrequire \"action_view/helpers/tag_helper\"\n\nmodule ActionView\n  module Helpers #:nodoc:\n    module JavaScriptHelper\n      JS_ESCAPE_MAP = {\n        '\\\\'    => '\\\\\\\\',\n        \"</\"    => '<\\/',\n        \"\\r\\n\"  => '\\n',\n        \"\\n\"    => '\\n',\n        \"\\r\"    => '\\n',\n        '\"'     => '\\\\\"',\n        \"'\"     => \"\\\\'\"\n      }\n\n      JS_ESCAPE_MAP[(+\"\\342\\200\\250\").force_encoding(Encoding::UTF_8).encode!] = \"&#x2028;\"\n      JS_ESCAPE_MAP[(+\"\\342\\200\\251\").force_encoding(Encoding::UTF_8).encode!] = \"&#x2029;\"\n\n      # Escapes carriage returns and single and double quotes for JavaScript segments.\n      #\n      # Also available through the alias j(). This is particularly helpful in JavaScript\n      # responses, like:\n      #\n      #   $('some_element').replaceWith('<%= j render 'some/element_template' %>');\n      def escape_javascript(javascript)\n        javascript = javascript.to_s\n        if javascript.empty?\n          result = \"\"\n        else\n          result = javascript.gsub(/(\\\\|<\\/|\\r\\n|\\342\\200\\250|\\342\\200\\251|[\\n\\r\"'])/u, JS_ESCAPE_MAP)\n        end\n        javascript.html_safe? ? result.html_safe : result\n      end\n\n      alias_method :j, :escape_javascript\n\n      # Returns a JavaScript tag with the +content+ inside. Example:\n      #   javascript_tag \"alert('All is good')\"\n      #\n      # Returns:\n      #   <script>\n      #   //<![CDATA[\n      #   alert('All is good')\n      #   //]]>\n      #   </script>\n      #\n      # +html_options+ may be a hash of attributes for the <tt>\\<script></tt>\n      # tag.\n      #\n      #   javascript_tag \"alert('All is good')\", type: 'application/javascript'\n      #\n      # Returns:\n      #   <script type=\"application/javascript\">\n      #   //<![CDATA[\n      #   alert('All is good')\n      #   //]]>\n      #   </script>\n      #\n      # Instead of passing the content as an argument, you can also use a block\n      # in which case, you pass your +html_options+ as the first parameter.\n      #\n      #   <%= javascript_tag type: 'application/javascript' do -%>\n      #     alert('All is good')\n      #   <% end -%>\n      #\n      # If you have a content security policy enabled then you can add an automatic\n      # nonce value by passing <tt>nonce: true</tt> as part of +html_options+. Example:\n      #\n      #   <%= javascript_tag nonce: true do -%>\n      #     alert('All is good')\n      #   <% end -%>\n      def javascript_tag(content_or_options_with_block = nil, html_options = {}, &block)\n        content =\n          if block_given?\n            html_options = content_or_options_with_block if content_or_options_with_block.is_a?(Hash)\n            capture(&block)\n          else\n            content_or_options_with_block\n          end\n\n        if html_options[:nonce] == true\n          html_options[:nonce] = content_security_policy_nonce\n        end\n\n        content_tag(\"script\", javascript_cdata_section(content), html_options)\n      end\n\n      def javascript_cdata_section(content) #:nodoc:\n        \"\\n//#{cdata_section(\"\\n#{content}\\n//\")}\\n\".html_safe\n      end\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nrequire \"abstract_unit\"\n\nclass JavaScriptHelperTest < ActionView::TestCase\n  tests ActionView::Helpers::JavaScriptHelper\n\n  attr_accessor :output_buffer\n  attr_reader :request\n\n  setup do\n    @old_escape_html_entities_in_json = ActiveSupport.escape_html_entities_in_json\n    ActiveSupport.escape_html_entities_in_json = true\n    @template = self\n    @request = Class.new do\n      def send_early_hints(links) end\n    end.new\n  end\n\n  def teardown\n    ActiveSupport.escape_html_entities_in_json = @old_escape_html_entities_in_json\n  end\n\n  def test_escape_javascript\n    assert_equal \"\", escape_javascript(nil)\n    assert_equal \"123\", escape_javascript(123)\n    assert_equal \"en\", escape_javascript(:en)\n    assert_equal \"false\", escape_javascript(false)\n    assert_equal \"true\", escape_javascript(true)\n    assert_equal %(This \\\\\"thing\\\\\" is really\\\\n netos\\\\'), escape_javascript(%(This \"thing\" is really\\n netos'))\n    assert_equal %(backslash\\\\\\\\test), escape_javascript(%(backslash\\\\test))\n    assert_equal %(dont <\\\\/close> tags), escape_javascript(%(dont </close> tags))\n    assert_equal %(unicode &#x2028; newline), escape_javascript((+%(unicode \\342\\200\\250 newline)).force_encoding(Encoding::UTF_8).encode!)\n    assert_equal %(unicode &#x2029; newline), escape_javascript((+%(unicode \\342\\200\\251 newline)).force_encoding(Encoding::UTF_8).encode!)\n\n    assert_equal %(dont <\\\\/close> tags), j(%(dont </close> tags))\n  end\n\n  def test_escape_javascript_with_safebuffer\n    given = %('quoted' \"double-quoted\" new-line:\\n </closed>)\n    expect = %(\\\\'quoted\\\\' \\\\\"double-quoted\\\\\" new-line:\\\\n <\\\\/closed>)\n    assert_equal expect, escape_javascript(given)\n    assert_equal expect, escape_javascript(ActiveSupport::SafeBuffer.new(given))\n    assert_instance_of String, escape_javascript(given)\n    assert_instance_of ActiveSupport::SafeBuffer, escape_javascript(ActiveSupport::SafeBuffer.new(given))\n  end\n\n  def test_javascript_tag\n    self.output_buffer = \"foo\"\n\n    assert_dom_equal \"<script>\\n//<![CDATA[\\nalert('hello')\\n//]]>\\n</script>\",\n      javascript_tag(\"alert('hello')\")\n\n    assert_equal \"foo\", output_buffer, \"javascript_tag without a block should not concat to output_buffer\"\n  end\n\n  # Setting the :extname option will control what extension (if any) is appended to the URL for assets\n  def test_javascript_include_tag\n    assert_dom_equal \"<script src='/foo.js'></script>\",  javascript_include_tag(\"/foo\")\n    assert_dom_equal \"<script src='/foo'></script>\",     javascript_include_tag(\"/foo\", extname: false)\n    assert_dom_equal \"<script src='/foo.bar'></script>\", javascript_include_tag(\"/foo\", extname: \".bar\")\n  end\n\n  def test_javascript_tag_with_options\n    assert_dom_equal \"<script id=\\\"the_js_tag\\\">\\n//<![CDATA[\\nalert('hello')\\n//]]>\\n</script>\",\n      javascript_tag(\"alert('hello')\", id: \"the_js_tag\")\n  end\n\n  def test_javascript_cdata_section\n    assert_dom_equal \"\\n//<![CDATA[\\nalert('hello')\\n//]]>\\n\", javascript_cdata_section(\"alert('hello')\")\n  end\nend\n"], "fixing_code": ["# frozen_string_literal: true\n\nrequire \"action_view/helpers/tag_helper\"\n\nmodule ActionView\n  module Helpers #:nodoc:\n    module JavaScriptHelper\n      JS_ESCAPE_MAP = {\n        '\\\\'    => '\\\\\\\\',\n        \"</\"    => '<\\/',\n        \"\\r\\n\"  => '\\n',\n        \"\\n\"    => '\\n',\n        \"\\r\"    => '\\n',\n        '\"'     => '\\\\\"',\n        \"'\"     => \"\\\\'\",\n        \"`\"     => \"\\\\`\",\n        \"$\"     => \"\\\\$\"\n      }\n\n      JS_ESCAPE_MAP[(+\"\\342\\200\\250\").force_encoding(Encoding::UTF_8).encode!] = \"&#x2028;\"\n      JS_ESCAPE_MAP[(+\"\\342\\200\\251\").force_encoding(Encoding::UTF_8).encode!] = \"&#x2029;\"\n\n      # Escapes carriage returns and single and double quotes for JavaScript segments.\n      #\n      # Also available through the alias j(). This is particularly helpful in JavaScript\n      # responses, like:\n      #\n      #   $('some_element').replaceWith('<%= j render 'some/element_template' %>');\n      def escape_javascript(javascript)\n        javascript = javascript.to_s\n        if javascript.empty?\n          result = \"\"\n        else\n          result = javascript.gsub(/(\\\\|<\\/|\\r\\n|\\342\\200\\250|\\342\\200\\251|[\\n\\r\"']|[`]|[$])/u, JS_ESCAPE_MAP)\n        end\n        javascript.html_safe? ? result.html_safe : result\n      end\n\n      alias_method :j, :escape_javascript\n\n      # Returns a JavaScript tag with the +content+ inside. Example:\n      #   javascript_tag \"alert('All is good')\"\n      #\n      # Returns:\n      #   <script>\n      #   //<![CDATA[\n      #   alert('All is good')\n      #   //]]>\n      #   </script>\n      #\n      # +html_options+ may be a hash of attributes for the <tt>\\<script></tt>\n      # tag.\n      #\n      #   javascript_tag \"alert('All is good')\", type: 'application/javascript'\n      #\n      # Returns:\n      #   <script type=\"application/javascript\">\n      #   //<![CDATA[\n      #   alert('All is good')\n      #   //]]>\n      #   </script>\n      #\n      # Instead of passing the content as an argument, you can also use a block\n      # in which case, you pass your +html_options+ as the first parameter.\n      #\n      #   <%= javascript_tag type: 'application/javascript' do -%>\n      #     alert('All is good')\n      #   <% end -%>\n      #\n      # If you have a content security policy enabled then you can add an automatic\n      # nonce value by passing <tt>nonce: true</tt> as part of +html_options+. Example:\n      #\n      #   <%= javascript_tag nonce: true do -%>\n      #     alert('All is good')\n      #   <% end -%>\n      def javascript_tag(content_or_options_with_block = nil, html_options = {}, &block)\n        content =\n          if block_given?\n            html_options = content_or_options_with_block if content_or_options_with_block.is_a?(Hash)\n            capture(&block)\n          else\n            content_or_options_with_block\n          end\n\n        if html_options[:nonce] == true\n          html_options[:nonce] = content_security_policy_nonce\n        end\n\n        content_tag(\"script\", javascript_cdata_section(content), html_options)\n      end\n\n      def javascript_cdata_section(content) #:nodoc:\n        \"\\n//#{cdata_section(\"\\n#{content}\\n//\")}\\n\".html_safe\n      end\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nrequire \"abstract_unit\"\n\nclass JavaScriptHelperTest < ActionView::TestCase\n  tests ActionView::Helpers::JavaScriptHelper\n\n  attr_accessor :output_buffer\n  attr_reader :request\n\n  setup do\n    @old_escape_html_entities_in_json = ActiveSupport.escape_html_entities_in_json\n    ActiveSupport.escape_html_entities_in_json = true\n    @template = self\n    @request = Class.new do\n      def send_early_hints(links) end\n    end.new\n  end\n\n  def teardown\n    ActiveSupport.escape_html_entities_in_json = @old_escape_html_entities_in_json\n  end\n\n  def test_escape_javascript\n    assert_equal \"\", escape_javascript(nil)\n    assert_equal \"123\", escape_javascript(123)\n    assert_equal \"en\", escape_javascript(:en)\n    assert_equal \"false\", escape_javascript(false)\n    assert_equal \"true\", escape_javascript(true)\n    assert_equal %(This \\\\\"thing\\\\\" is really\\\\n netos\\\\'), escape_javascript(%(This \"thing\" is really\\n netos'))\n    assert_equal %(backslash\\\\\\\\test), escape_javascript(%(backslash\\\\test))\n    assert_equal %(dont <\\\\/close> tags), escape_javascript(%(dont </close> tags))\n    assert_equal %(unicode &#x2028; newline), escape_javascript((+%(unicode \\342\\200\\250 newline)).force_encoding(Encoding::UTF_8).encode!)\n    assert_equal %(unicode &#x2029; newline), escape_javascript((+%(unicode \\342\\200\\251 newline)).force_encoding(Encoding::UTF_8).encode!)\n\n    assert_equal %(dont <\\\\/close> tags), j(%(dont </close> tags))\n  end\n\n  def test_escape_backtick\n    assert_equal \"\\\\`\", escape_javascript(\"`\")\n  end\n\n  def test_escape_dollar_sign\n    assert_equal \"\\\\$\", escape_javascript(\"$\")\n  end\n\n  def test_escape_javascript_with_safebuffer\n    given = %('quoted' \"double-quoted\" new-line:\\n </closed>)\n    expect = %(\\\\'quoted\\\\' \\\\\"double-quoted\\\\\" new-line:\\\\n <\\\\/closed>)\n    assert_equal expect, escape_javascript(given)\n    assert_equal expect, escape_javascript(ActiveSupport::SafeBuffer.new(given))\n    assert_instance_of String, escape_javascript(given)\n    assert_instance_of ActiveSupport::SafeBuffer, escape_javascript(ActiveSupport::SafeBuffer.new(given))\n  end\n\n  def test_javascript_tag\n    self.output_buffer = \"foo\"\n\n    assert_dom_equal \"<script>\\n//<![CDATA[\\nalert('hello')\\n//]]>\\n</script>\",\n      javascript_tag(\"alert('hello')\")\n\n    assert_equal \"foo\", output_buffer, \"javascript_tag without a block should not concat to output_buffer\"\n  end\n\n  # Setting the :extname option will control what extension (if any) is appended to the URL for assets\n  def test_javascript_include_tag\n    assert_dom_equal \"<script src='/foo.js'></script>\",  javascript_include_tag(\"/foo\")\n    assert_dom_equal \"<script src='/foo'></script>\",     javascript_include_tag(\"/foo\", extname: false)\n    assert_dom_equal \"<script src='/foo.bar'></script>\", javascript_include_tag(\"/foo\", extname: \".bar\")\n  end\n\n  def test_javascript_tag_with_options\n    assert_dom_equal \"<script id=\\\"the_js_tag\\\">\\n//<![CDATA[\\nalert('hello')\\n//]]>\\n</script>\",\n      javascript_tag(\"alert('hello')\", id: \"the_js_tag\")\n  end\n\n  def test_javascript_cdata_section\n    assert_dom_equal \"\\n//<![CDATA[\\nalert('hello')\\n//]]>\\n\", javascript_cdata_section(\"alert('hello')\")\n  end\nend\n"], "filenames": ["actionview/lib/action_view/helpers/javascript_helper.rb", "actionview/test/template/javascript_helper_test.rb"], "buggy_code_start_loc": [15, 38], "buggy_code_end_loc": [33, 38], "fixing_code_start_loc": [15, 39], "fixing_code_end_loc": [35, 47], "type": "CWE-80", "message": "In ActionView before versions 6.0.2.2 and 5.2.4.2, there is a possible XSS vulnerability in ActionView's JavaScript literal escape helpers. Views that use the `j` or `escape_javascript` methods may be susceptible to XSS attacks. The issue is fixed in versions 6.0.2.2 and 5.2.4.2.", "other": {"cve": {"id": "CVE-2020-5267", "sourceIdentifier": "security-advisories@github.com", "published": "2020-03-19T18:15:16.023", "lastModified": "2023-02-03T16:39:43.397", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In ActionView before versions 6.0.2.2 and 5.2.4.2, there is a possible XSS vulnerability in ActionView's JavaScript literal escape helpers. Views that use the `j` or `escape_javascript` methods may be susceptible to XSS attacks. The issue is fixed in versions 6.0.2.2 and 5.2.4.2."}, {"lang": "es", "value": "En ActionView versiones anteriores a 6.0.2.2 y 5.2.4.2, se presenta una posible vulnerabilidad de tipo XSS en los asistentes de escape literal de JavaScript de ActionView. Las vistas que usan los m\u00e9todos \"j\" o \"escape_javascript\" pueden ser susceptibles a ataques de tipo XSS. El problema es corregido en las versiones 6.0.2.2 y 5.2.4.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.0, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-80"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rubyonrails:actionview:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.2.4.2", "matchCriteriaId": "E64E2A2D-571A-49FD-8AFC-8F7586DEF927"}, {"vulnerable": true, "criteria": "cpe:2.3:a:rubyonrails:actionview:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.0.0", "versionEndExcluding": "6.0.2.2", "matchCriteriaId": "611EB0D1-EFBD-4CFA-8BA6-4D0FAA6D787E"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:33:*:*:*:*:*:*:*", "matchCriteriaId": "E460AA51-FCDA-46B9-AE97-E6676AA5E194"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.1:*:*:*:*:*:*:*", "matchCriteriaId": "B620311B-34A3-48A6-82DF-6F078D7A4493"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2020-05/msg00019.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2020/03/19/1", "source": "security-advisories@github.com", "tags": ["Exploit", "Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/rails/rails/commit/033a738817abd6e446e1b320cb7d1a5c15224e9a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/rails/rails/security/advisories/GHSA-65cv-r6x7-79hv", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/03/msg00022.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJ7NUWXAEVRQCROIIBV4C6WXO6IR3KSB/", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/rails/rails/commit/033a738817abd6e446e1b320cb7d1a5c15224e9a"}}