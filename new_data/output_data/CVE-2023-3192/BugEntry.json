{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Admins;\nuse Froxlor\\Api\\Commands\\BackupStorages;\nuse Froxlor\\Api\\Commands\\Customers;\nuse Froxlor\\Api\\Commands\\MysqlServer;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Froxlor;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif (($page == 'customers' || $page == 'overview') && $userinfo['customers'] != '0') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_customers\");\n\n\t\ttry {\n\t\t\t$customer_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.customers.php';\n\t\t\t$collection = (new Collection(Customers::class, $userinfo, ['show_usages' => true]))\n\t\t\t\t->withPagination($customer_list_data['customer_list']['columns'], $customer_list_data['customer_list']['default_sorting']);\n\t\t\tif ($userinfo['change_serversettings']) {\n\t\t\t\t$collection->has('admin', Admins::class, 'adminid', 'adminid');\n\t\t\t}\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('customers')) {\n\t\t\t$actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'customers', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.customer_add')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $customer_list_data, 'customer_list'),\n\t\t\t'actions_links' => $actions_links\n\t\t]);\n\t} elseif ($action == 'su' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t$destination_user = $result['loginname'];\n\n\t\tif ($destination_user != '') {\n\t\t\tif ($result['deactivated'] == '1') {\n\t\t\t\tResponse::standardError(\"usercurrentlydeactivated\", $destination_user);\n\t\t\t}\n\n\t\t\t$result['switched_user'] = CurrentUser::getData();\n\t\t\t$result['adminsession'] = 0;\n\t\t\t$result['userid'] = $result['customerid'];\n\t\t\tCurrentUser::setData($result);\n\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"switched user and is now '\" . $destination_user . \"'\");\n\n\t\t\t$target = (isset($_GET['target']) ? $_GET['target'] : 'index');\n\t\t\t$redirect = \"customer_\" . $target . \".php\";\n\t\t\tif (!file_exists(Froxlor::getInstallDir() . \"/\" . $redirect)) {\n\t\t\t\t$redirect = \"customer_index.php\";\n\t\t\t}\n\t\t\tResponse::redirectTo($redirect, null, true);\n\t\t} else {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'action' => 'login'\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'unlock' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id\n\t\t\t\t])->unlock();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\tHTML::askYesNo('customer_reallyunlock', $filename, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'page' => $page,\n\t\t\t\t'action' => $action\n\t\t\t], $result['loginname']);\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'delete_userfiles' => (isset($_POST['delete_userfiles']) ? (int)$_POST['delete_userfiles'] : 0)\n\t\t\t\t])->delete();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\tHTML::askYesNoWithCheckbox('admin_customer_reallydelete', 'admin_customer_alsoremovefiles', $filename, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'page' => $page,\n\t\t\t\t'action' => $action\n\t\t\t], $result['loginname']);\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tCustomers::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$mysql_servers = [];\n\t\t\ttry {\n\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t$mysql_servers[] = [\n\t\t\t\t\t\t'label' => $dbdata['caption'],\n\t\t\t\t\t\t'value' => $dbserver\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t} catch (Exception $e) {\n\t\t\t\t/* just none */\n\t\t\t}\n\n\t\t\t$phpconfigs = [];\n\t\t\t$configs = Database::query(\"\n\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\");\n\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t'label' => $row['description'] . \" [\" . $row['interpreter'] . \"]\",\n\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t'label' => $row['description'],\n\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// hosting plans\n\t\t\t$hosting_plans = [];\n\t\t\t$plans = Database::query(\"\n\t\t\t\tSELECT *\n\t\t\t\tFROM `\" . TABLE_PANEL_PLANS . \"`\n\t\t\t\tORDER BY name ASC\n\t\t\t\");\n\t\t\t$hosting_plans = [\n\t\t\t\t0 => \"---\"\n\t\t\t];\n\t\t\twhile ($row = $plans->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$hosting_plans[$row['id']] = $row['name'];\n\t\t\t}\n\n\t\t\t// backup storages\n\t\t\t$backup_storages = [];\n\t\t\tif (Settings::Get('backup.enabled') == '1' && $userinfo['change_serversettings'] == '1') {\n\t\t\t\t$backup_storages = [\n\t\t\t\t\t0 => lng('backup.storage_none')\n\t\t\t\t];\n\t\t\t\ttry {\n\t\t\t\t\t$result_json = BackupStorages::getLocal($userinfo)->listing();\n\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\tforeach ($result_decoded as $storagedata) {\n\t\t\t\t\t\t$backup_storages[$storagedata['id']] = $storagedata['description'] . ' (' . $storagedata['type'] . ')';\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t/* just none */\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$customer_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/customer/formfield.customer_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'customers']),\n\t\t\t\t'formdata' => $customer_add_data['customer_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['loginname'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tCustomers::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t\t$result['traffic'] = round($result['traffic'] / (1024 * 1024), $dec_places);\n\t\t\t\t$result['diskspace'] = round($result['diskspace'] / 1024, $dec_places);\n\t\t\t\t$result['email'] = $idna_convert->decode($result['email']);\n\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$mysql_servers = [];\n\t\t\t\ttry {\n\t\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t\t$mysql_servers[] = [\n\t\t\t\t\t\t\t'label' => $dbdata['caption'],\n\t\t\t\t\t\t\t'value' => $dbserver\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t/* just none */\n\t\t\t\t}\n\n\t\t\t\t$phpconfigs = [];\n\t\t\t\t$configs = Database::query(\"\n\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\");\n\t\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t\t'label' => $row['description'] . \" [\" . $row['interpreter'] . \"]\",\n\t\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t\t];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t\t'label' => $row['description'],\n\t\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// hosting plans\n\t\t\t\t$plans = Database::query(\"\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PLANS . \"`\n\t\t\t\t\tORDER BY name ASC\n\t\t\t\t\");\n\t\t\t\t$hosting_plans = [\n\t\t\t\t\t0 => \"---\"\n\t\t\t\t];\n\t\t\t\twhile ($row = $plans->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$hosting_plans[$row['id']] = $row['name'];\n\t\t\t\t}\n\n\t\t\t\t// backup storages\n\t\t\t\t$backup_storages = [];\n\t\t\t\tif (Settings::Get('backup.enabled') == '1' && $userinfo['change_serversettings'] == '1') {\n\t\t\t\t\t$backup_storages = [\n\t\t\t\t\t\t0 => lng('backup.storage_none')\n\t\t\t\t\t];\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$result_json = BackupStorages::getLocal($userinfo)->listing();\n\t\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\t\tforeach ($result_decoded as $storagedata) {\n\t\t\t\t\t\t\t$backup_storages[$storagedata['id']] = $storagedata['description'] . ' (' . $storagedata['type'] . ')';\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t/* just none */\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$available_admins_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\tWHERE (`customers` = '-1' OR `customers` > `customers_used`)\n\t\t\t\t\tAND adminid <> :currentadmin\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($available_admins_stmt, ['currentadmin' => $result['adminid']]);\n\t\t\t\t$admin_select = [\n\t\t\t\t\t0 => \"---\"\n\t\t\t\t];\n\t\t\t\twhile ($available_admin = $available_admins_stmt->fetch()) {\n\t\t\t\t\t$admin_select[$available_admin['adminid']] = $available_admin['name'] . \" (\" . $available_admin['loginname'] . \")\";\n\t\t\t\t}\n\n\t\t\t\t$customer_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/customer/formfield.customer_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'customers', 'id' => $id]),\n\t\t\t\t\t'formdata' => $customer_edit_data['customer_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Admins as Admins;\nuse Froxlor\\Api\\Commands\\Froxlor as Froxlor;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Language;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\System\\Crypt;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\n\n$id = (int)Request::any('id');\n\nif ($action == 'logout') {\n\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"logged out\");\n\tunset($_SESSION['userinfo']);\n\tCurrentUser::setData();\n\tsession_destroy();\n\n\tResponse::redirectTo('index.php');\n} elseif ($action == 'suback') {\n\tif (is_array(CurrentUser::getField('switched_user'))) {\n\t\t$result = CurrentUser::getData();\n\t\t$result = $result['switched_user'];\n\t\tCurrentUser::setData($result);\n\t\t$target = (isset($_GET['target']) ? $_GET['target'] : 'index');\n\t\t$redirect = \"admin_\" . $target . \".php\";\n\t\tif (!file_exists(\\Froxlor\\Froxlor::getInstallDir() . \"/\" . $redirect)) {\n\t\t\t$redirect = \"admin_index.php\";\n\t\t}\n\t\tResponse::redirectTo($redirect, null, true);\n\t} else {\n\t\tResponse::dynamicError(\"Cannot change back - You've never switched to another user :-)\");\n\t}\n}\n\nif ($page == 'overview') {\n\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_index\");\n\t$params = [];\n\tif ($userinfo['customers_see_all'] == '0') {\n\t\t$params = [\n\t\t\t'adminid' => $userinfo['adminid']\n\t\t];\n\t}\n\t$overview_stmt = Database::prepare(\"SELECT COUNT(*) AS `number_customers`,\n\t\t\t\tSUM(case when `diskspace` > 0 then `diskspace` else 0 end) AS `diskspace_assigned`,\n\t\t\t\tSUM(`diskspace_used`) AS `diskspace_used`,\n\t\t\t\tSUM(case when `mysqls` > 0 then `mysqls` else 0 end) AS `mysqls_assigned`,\n\t\t\t\tSUM(`mysqls_used`) AS `mysqls_used`,\n\t\t\t\tSUM(case when `emails` > 0 then `emails` else 0 end) AS `emails_assigned`,\n\t\t\t\tSUM(`emails_used`) AS `emails_used`,\n\t\t\t\tSUM(case when `email_accounts` > 0 then `email_accounts` else 0 end) AS `email_accounts_assigned`,\n\t\t\t\tSUM(`email_accounts_used`) AS `email_accounts_used`,\n\t\t\t\tSUM(case when `email_forwarders` > 0 then `email_forwarders` else 0 end) AS `email_forwarders_assigned`,\n\t\t\t\tSUM(`email_forwarders_used`) AS `email_forwarders_used`,\n\t\t\t\tSUM(case when `email_quota` > 0 then `email_quota` else 0 end) AS `email_quota_assigned`,\n\t\t\t\tSUM(`email_quota_used`) AS `email_quota_used`,\n\t\t\t\tSUM(case when `ftps` > 0 then `ftps` else 0 end) AS `ftps_assigned`,\n\t\t\t\tSUM(`ftps_used`) AS `ftps_used`,\n\t\t\t\tSUM(case when `subdomains` > 0 then `subdomains` else 0 end) AS `subdomains_assigned`,\n\t\t\t\tSUM(`subdomains_used`) AS `subdomains_used`,\n\t\t\t\tSUM(case when `traffic` > 0 then `traffic` else 0 end) AS `traffic_assigned`,\n\t\t\t\tSUM(`traffic_used`) AS `traffic_used`\n\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"`\" . ($userinfo['customers_see_all'] ? '' : \" WHERE `adminid` = :adminid \"));\n\t$overview = Database::pexecute_first($overview_stmt, $params);\n\n\t$userinfo['diskspace_bytes'] = ($userinfo['diskspace'] > -1) ? $userinfo['diskspace'] * 1024 : -1;\n\t$overview['diskspace_bytes'] = $overview['diskspace_assigned'] * 1024;\n\t$overview['diskspace_bytes_used'] = $overview['diskspace_used'] * 1024;\n\n\t$userinfo['traffic_bytes'] = ($userinfo['traffic'] > -1) ? $userinfo['traffic'] * 1024 : -1;\n\t$overview['traffic_bytes'] = $overview['traffic_assigned'] * 1024;\n\t$overview['traffic_bytes_used'] = $overview['traffic_used'] * 1024;\n\n\t$number_domains_stmt = Database::prepare(\"\n\t\tSELECT COUNT(*) AS `number_domains` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\tWHERE `parentdomainid`='0'\" . ($userinfo['customers_see_all'] ? '' : \" AND `adminid` = :adminid\"));\n\t$number_domains = Database::pexecute_first($number_domains_stmt, $params);\n\n\t$overview['number_domains'] = $number_domains['number_domains'];\n\n\tif ((isset($_GET['lookfornewversion']) && $_GET['lookfornewversion'] == 'yes') || (isset($lookfornewversion) && $lookfornewversion == 'yes')) {\n\t\ttry {\n\t\t\t$json_result = Froxlor::getLocal($userinfo)->checkUpdate();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t$lookfornewversion_lable = $result['version'];\n\t\t$lookfornewversion_link = $result['link'];\n\t\t$lookfornewversion_message = $result['message'];\n\t\t$lookfornewversion_addinfo = $result['additional_info'];\n\t\t$isnewerversion = $result['isnewerversion'];\n\t} else {\n\t\t$lookfornewversion_lable = lng('admin.lookfornewversion.clickhere');\n\t\t$lookfornewversion_link = htmlspecialchars($filename . '?page=' . urlencode($page) . '&lookfornewversion=yes');\n\t\t$lookfornewversion_message = '';\n\t\t$lookfornewversion_addinfo = '';\n\t\t$isnewerversion = 0;\n\t}\n\n\t$cron_last_runs = Cronjob::getCronjobsLastRun();\n\t$outstanding_tasks = Cronjob::getOutstandingTasks();\n\n\t// additional sys-infos\n\t$meminfo = explode(\"\\n\", @file_get_contents(\"/proc/meminfo\"));\n\t$memory = \"\";\n\tfor ($i = 0; $i < count($meminfo); ++$i) {\n\t\tif (substr($meminfo[$i], 0, 3) === \"Mem\") {\n\t\t\t$memory .= $meminfo[$i] . PHP_EOL;\n\t\t}\n\t}\n\n\tif (function_exists('sys_getloadavg')) {\n\t\t$loadArray = sys_getloadavg();\n\t\t$load = number_format($loadArray[0], 2, '.', '') . \" / \" . number_format($loadArray[1], 2, '.', '') . \" / \" . number_format($loadArray[2], 2, '.', '');\n\t} else {\n\t\t$load = @file_get_contents('/proc/loadavg');\n\t\tif (!$load) {\n\t\t\t$load = lng('admin.noloadavailable');\n\t\t}\n\t}\n\n\t$kernel = '';\n\tif (function_exists('posix_uname')) {\n\t\t$kernel_nfo = posix_uname();\n\t\t$kernel = $kernel_nfo['release'] . ' (' . $kernel_nfo['machine'] . ')';\n\t}\n\n\t// Try to get the uptime\n\t// First: With exec (let's hope it's enabled for the Froxlor - vHost)\n\t$uptime_array = explode(\" \", @file_get_contents(\"/proc/uptime\"));\n\t$uptime = '';\n\tif (is_array($uptime_array) && isset($uptime_array[0]) && is_numeric($uptime_array[0])) {\n\t\t// Some calculatioon to get a nicly formatted display\n\t\t$seconds = round($uptime_array[0], 0);\n\t\t$minutes = $seconds / 60;\n\t\t$hours = $minutes / 60;\n\t\t$days = floor($hours / 24);\n\t\t$hours = floor($hours - ($days * 24));\n\t\t$minutes = floor($minutes - ($days * 24 * 60) - ($hours * 60));\n\t\t$seconds = floor($seconds - ($days * 24 * 60 * 60) - ($hours * 60 * 60) - ($minutes * 60));\n\t\t$uptime = \"{$days}d, {$hours}h, {$minutes}m, {$seconds}s\";\n\t\t// Just cleanup\n\t\tunset($uptime_array, $seconds, $minutes, $hours, $days);\n\t}\n\n\t$sysinfo = [\n\t\t'webserver' => $_SERVER['SERVER_SOFTWARE'] ?? 'unknown',\n\t\t'phpversion' => phpversion(),\n\t\t'mysqlserverversion' => Database::getAttribute(PDO::ATTR_SERVER_VERSION),\n\t\t'phpsapi' => strtoupper(@php_sapi_name()),\n\t\t'hostname' => gethostname(),\n\t\t'memory' => $memory,\n\t\t'load' => $load,\n\t\t'kernel' => $kernel,\n\t\t'uptime' => $uptime\n\t];\n\n\tUI::twig()->addGlobal('userinfo', $userinfo);\n\tUI::view('user/index.html.twig', [\n\t\t'sysinfo' => $sysinfo,\n\t\t'overview' => $overview,\n\t\t'outstanding_tasks' => $outstanding_tasks,\n\t\t'cron_last_runs' => $cron_last_runs\n\t]);\n} elseif ($page == 'profile') {\n\t$languages = Language::getLanguages();\n\n\tif (!empty($_POST)) {\n\t\tif ($_POST['send'] == 'changepassword') {\n\t\t\t$old_password = Validate::validate($_POST['old_password'], 'old password');\n\n\t\t\tif (!Crypt::validatePasswordLogin($userinfo, $old_password, TABLE_PANEL_ADMINS, 'adminid')) {\n\t\t\t\tResponse::standardError('oldpasswordnotcorrect');\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t$new_password = Crypt::validatePassword($_POST['new_password'], 'new password');\n\t\t\t\t$new_password_confirm = Crypt::validatePassword($_POST['new_password_confirm'], 'new password confirm');\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\n\t\t\tif ($old_password == '') {\n\t\t\t\tResponse::standardError([\n\t\t\t\t\t'stringisempty',\n\t\t\t\t\t'changepassword.old_password'\n\t\t\t\t]);\n\t\t\t} elseif ($new_password == '') {\n\t\t\t\tResponse::standardError([\n\t\t\t\t\t'stringisempty',\n\t\t\t\t\t'changepassword.new_password'\n\t\t\t\t]);\n\t\t\t} elseif ($new_password_confirm == '') {\n\t\t\t\tResponse::standardError([\n\t\t\t\t\t'stringisempty',\n\t\t\t\t\t'changepassword.new_password_confirm'\n\t\t\t\t]);\n\t\t\t} elseif ($new_password != $new_password_confirm) {\n\t\t\t\tResponse::standardError('newpasswordconfirmerror');\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $userinfo['adminid'],\n\t\t\t\t\t\t'admin_password' => $new_password\n\t\t\t\t\t])->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'changed password');\n\t\t\t\tResponse::redirectTo($filename);\n\t\t\t}\n\t\t} elseif ($_POST['send'] == 'changetheme') {\n\t\t\tif (Settings::Get('panel.allow_theme_change_admin') == 1) {\n\t\t\t\t$theme = Validate::validate($_POST['theme'], 'theme');\n\t\t\t\ttry {\n\t\t\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $userinfo['adminid'],\n\t\t\t\t\t\t'theme' => $theme\n\t\t\t\t\t])->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"changed his/her theme to '\" . $theme . \"'\");\n\t\t\t}\n\t\t\tResponse::redirectTo($filename);\n\t\t} elseif ($_POST['send'] == 'changelanguage') {\n\t\t\t$def_language = Validate::validate($_POST['def_language'], 'default language');\n\n\t\t\tif (isset($languages[$def_language])) {\n\t\t\t\ttry {\n\t\t\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $userinfo['adminid'],\n\t\t\t\t\t\t'def_language' => $def_language\n\t\t\t\t\t])->update();\n\t\t\t\t\tCurrentUser::setField('language', $def_language);\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"changed his/her default language to '\" . $def_language . \"'\");\n\t\t\tResponse::redirectTo($filename);\n\t\t}\n\t} else {\n\t\t// change theme\n\t\t$default_theme = Settings::Get('panel.default_theme');\n\t\tif ($userinfo['theme'] != '') {\n\t\t\t$default_theme = $userinfo['theme'];\n\t\t}\n\t\t$themes_avail = UI::getThemes();\n\n\t\t// change language\n\t\t$default_lang = Settings::Get('panel.standardlanguage');\n\t\tif ($userinfo['def_language'] != '') {\n\t\t\t$default_lang = $userinfo['def_language'];\n\t\t}\n\n\t\tUI::view('user/profile.html.twig', [\n\t\t\t'themes' => $themes_avail,\n\t\t\t'default_theme' => $default_theme,\n\t\t\t'languages' => $languages,\n\t\t\t'default_lang' => $default_lang,\n\t\t]);\n\t}\n} elseif ($page == 'send_error_report' && Settings::Get('system.allow_error_report_admin') == '1') {\n\trequire_once __DIR__ . '/error_report.php';\n} elseif ($page == 'apikeys' && Settings::Get('api.enabled') == 1) {\n\trequire_once __DIR__ . '/api_keys.php';\n} elseif ($page == '2fa' && Settings::Get('2fa.enabled') == 1) {\n\trequire_once __DIR__ . '/2fa.php';\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'login';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\FroxlorRPC;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Customer\\Customer;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FileDir;\nuse Froxlor\\Froxlor;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\FroxlorTwoFactorAuth;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Crypt;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\User;\nuse Froxlor\\Validate\\Validate;\n\nif ($action == '') {\n\t$action = 'login';\n}\n\nif ($action == '2fa_entercode') {\n\t// page for entering the 2FA code after successful login\n\tif (!isset($_SESSION) || !isset($_SESSION['secret_2fa'])) {\n\t\t// no session - redirect to index\n\t\tResponse::redirectTo('index.php');\n\t\texit();\n\t}\n\t$smessage = isset($_GET['showmessage']) ? (int)$_GET['showmessage'] : 0;\n\t$message = \"\";\n\tif ($smessage > 0) {\n\t\t$message = lng('error.2fa_wrongcode');\n\t}\n\t// show template to enter code\n\tUI::view('login/enter2fa.html.twig', [\n\t\t'pagetitle' => lng('login.2fa'),\n\t\t'message' => $message\n\t]);\n} elseif ($action == '2fa_verify') {\n\t// verify code from 2fa code-enter form\n\tif (!isset($_SESSION) || !isset($_SESSION['secret_2fa'])) {\n\t\t// no session - redirect to index\n\t\tResponse::redirectTo('index.php');\n\t\texit();\n\t}\n\t$code = isset($_POST['2fa_code']) ? $_POST['2fa_code'] : null;\n\t// verify entered code\n\t$tfa = new FroxlorTwoFactorAuth('Froxlor ' . Settings::Get('system.hostname'));\n\t$result = ($_SESSION['secret_2fa'] == 'email' ? true : $tfa->verifyCode($_SESSION['secret_2fa'], $code, 3));\n\t// get user-data\n\t$table = $_SESSION['uidtable_2fa'];\n\t$field = $_SESSION['uidfield_2fa'];\n\t$uid = $_SESSION['uid_2fa'];\n\t$isadmin = $_SESSION['unfo_2fa'];\n\t// either the code is valid when using authenticator-app, or we will select userdata by id and entered code\n\t// which is temporarily stored for the customer when using email-2fa\n\tif ($result) {\n\t\t$sel_param = [\n\t\t\t'uid' => $uid\n\t\t];\n\t\tif ($_SESSION['secret_2fa'] == 'email') {\n\t\t\t// verify code by selecting user by id and the temp. stored code,\n\t\t\t// so only if it's the correct code, we get the user-data\n\t\t\t$sel_stmt = Database::prepare(\"SELECT * FROM \" . $table . \" WHERE `\" . $field . \"` = :uid AND `data_2fa` = :code\");\n\t\t\t$sel_param['code'] = $code;\n\t\t} else {\n\t\t\t// Authenticator-verification has already happened at this point, so just get the user-data\n\t\t\t$sel_stmt = Database::prepare(\"SELECT * FROM \" . $table . \" WHERE `\" . $field . \"` = :uid\");\n\t\t}\n\t\t$userinfo = Database::pexecute_first($sel_stmt, $sel_param);\n\t\t// whoops, no (valid) user? Start again\n\t\tif (empty($userinfo)) {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'showmessage' => '2'\n\t\t\t]);\n\t\t}\n\t\t// set fields in $userinfo required for finishLogin()\n\t\t$userinfo['adminsession'] = $isadmin;\n\t\t$userinfo['userid'] = $uid;\n\n\t\t// if not successful somehow - start again\n\t\tif (!finishLogin($userinfo)) {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'showmessage' => '2'\n\t\t\t]);\n\t\t}\n\n\t\t// when using email-2fa, remove the one-time-code\n\t\tif ($userinfo['type_2fa'] == '1') {\n\t\t\t$del_stmt = Database::prepare(\"UPDATE \" . $table . \" SET `data_2fa` = '' WHERE `\" . $field . \"` = :uid\");\n\t\t\t$userinfo = Database::pexecute_first($del_stmt, [\n\t\t\t\t'uid' => $uid\n\t\t\t]);\n\t\t}\n\t\texit();\n\t}\n\t// wrong 2fa code - treat like \"wrong password\"\n\t$stmt = Database::prepare(\"\n\t\tUPDATE \" . $table . \"\n\t\tSET `lastlogin_fail`= :lastlogin_fail, `loginfail_count`=`loginfail_count`+1\n\t\tWHERE `\" . $field . \"`= :uid\n\t\");\n\tDatabase::pexecute($stmt, [\n\t\t\"lastlogin_fail\" => time(),\n\t\t\"uid\" => $uid\n\t]);\n\n\t// get data for processing further\n\t$stmt = Database::prepare(\"\n\t\tSELECT `loginname`, `loginfail_count`, `lastlogin_fail` FROM \" . $table . \"\n\t\tWHERE `\" . $field . \"`= :uid\n\t\");\n\t$fail_user = Database::pexecute_first($stmt, [\n\t\t\"uid\" => $uid\n\t]);\n\n\tif ($fail_user['loginfail_count'] >= Settings::Get('login.maxloginattempts') && $fail_user['lastlogin_fail'] > (time() - Settings::Get('login.deactivatetime'))) {\n\t\t// Log failed login\n\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t'loginname' => $_SERVER['REMOTE_ADDR']\n\t\t]);\n\t\t$rstlog->logAction(FroxlorLogger::LOGIN_ACTION, LOG_WARNING, \"User '\" . $fail_user['loginname'] . \"' entered wrong 2fa code too often.\");\n\t\tunset($fail_user);\n\t\tResponse::redirectTo('index.php', [\n\t\t\t'showmessage' => '3'\n\t\t]);\n\t\texit();\n\t}\n\tunset($fail_user);\n\t// back to form\n\tResponse::redirectTo('index.php', [\n\t\t'action' => '2fa_entercode',\n\t\t'showmessage' => '1'\n\t]);\n\texit();\n} elseif ($action == 'login') {\n\tif (!empty($_POST)) {\n\t\t$loginname = Validate::validate($_POST['loginname'], 'loginname');\n\t\t$password = Validate::validate($_POST['password'], 'password');\n\n\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `customer` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\tWHERE `loginname`= :loginname\");\n\t\tDatabase::pexecute($stmt, [\n\t\t\t\"loginname\" => $loginname\n\t\t]);\n\t\t$row = $stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\tif ($row && $row['customer'] == $loginname) {\n\t\t\t$table = \"`\" . TABLE_PANEL_CUSTOMERS . \"`\";\n\t\t\t$uid = 'customerid';\n\t\t\t$adminsession = '0';\n\t\t\t$is_admin = false;\n\t\t} else {\n\t\t\t$is_admin = true;\n\t\t\tif ((int)Settings::Get('login.domain_login') == 1) {\n\t\t\t\t$domainname = $idna_convert->encode(preg_replace([\n\t\t\t\t\t'/\\:(\\d)+$/',\n\t\t\t\t\t'/^https?\\:\\/\\//'\n\t\t\t\t], '', $loginname));\n\t\t\t\t$stmt = Database::prepare(\"SELECT `customerid` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `domain` = :domain\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\"domain\" => $domainname\n\t\t\t\t]);\n\t\t\t\t$row2 = $stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\t\t\tif (isset($row2['customerid']) && $row2['customerid'] > 0) {\n\t\t\t\t\t$loginname = Customer::getCustomerDetail($row2['customerid'], 'loginname');\n\t\t\t\t\tif ($loginname !== false) {\n\t\t\t\t\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `customer` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\t\tWHERE `loginname`= :loginname\");\n\t\t\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t\t\t]);\n\t\t\t\t\t\t$row3 = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t\t\tif ($row3 && $row3['customer'] == $loginname) {\n\t\t\t\t\t\t\t$table = \"`\" . TABLE_PANEL_CUSTOMERS . \"`\";\n\t\t\t\t\t\t\t$uid = 'customerid';\n\t\t\t\t\t\t\t$adminsession = '0';\n\t\t\t\t\t\t\t$is_admin = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((Froxlor::hasUpdates() || Froxlor::hasDbUpdates()) && $is_admin == false) {\n\t\t\tResponse::redirectTo('index.php');\n\t\t\texit();\n\t\t}\n\n\t\tif ($is_admin) {\n\t\t\tif (Froxlor::hasUpdates() || Froxlor::hasDbUpdates()) {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `admin` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\tWHERE `loginname`= :loginname\n\t\t\t\t\tAND `change_serversettings` = '1'\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t]);\n\t\t\t\t$row = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\tif (!isset($row['admin'])) {\n\t\t\t\t\t// not an admin who can see updates\n\t\t\t\t\tResponse::redirectTo('index.php');\n\t\t\t\t\texit();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `admin` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\tWHERE `loginname`= :loginname\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t]);\n\t\t\t\t$row = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t}\n\n\t\t\tif ($row && $row['admin'] == $loginname) {\n\t\t\t\t$table = \"`\" . TABLE_PANEL_ADMINS . \"`\";\n\t\t\t\t$uid = 'adminid';\n\t\t\t\t$adminsession = '1';\n\t\t\t} else {\n\t\t\t\t// Log failed login\n\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t\t'loginname' => $_SERVER['REMOTE_ADDR']\n\t\t\t\t]);\n\t\t\t\t$rstlog->logAction(FroxlorLogger::LOGIN_ACTION, LOG_WARNING, \"Unknown user '\" . $loginname . \"' tried to login.\");\n\n\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t'showmessage' => '2'\n\t\t\t\t]);\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\t$userinfo_stmt = Database::prepare(\"SELECT * FROM $table\n\t\t\tWHERE `loginname`= :loginname\");\n\t\tDatabase::pexecute($userinfo_stmt, [\n\t\t\t\"loginname\" => $loginname\n\t\t]);\n\t\t$userinfo = $userinfo_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\tif ($userinfo['loginfail_count'] >= Settings::Get('login.maxloginattempts') && $userinfo['lastlogin_fail'] > (time() - Settings::Get('login.deactivatetime'))) {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'showmessage' => '3'\n\t\t\t]);\n\t\t\texit();\n\t\t} elseif (Crypt::validatePasswordLogin($userinfo, $password, $table, $uid)) {\n\t\t\t// only show \"you're banned\" if the login was successful\n\t\t\t// because we don't want to publish that the user does exist\n\t\t\tif ($userinfo['deactivated']) {\n\t\t\t\tunset($userinfo);\n\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t'showmessage' => '5'\n\t\t\t\t]);\n\t\t\t\texit();\n\t\t\t} else {\n\t\t\t\t// login correct\n\t\t\t\t// reset loginfail_counter, set lastlogin_succ\n\t\t\t\t$stmt = Database::prepare(\"UPDATE $table\n\t\t\t\t\t  SET `lastlogin_succ`= :lastlogin_succ, `loginfail_count`='0'\n\t\t\t\t\t  WHERE `$uid`= :uid\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\"lastlogin_succ\" => time(),\n\t\t\t\t\t\"uid\" => $userinfo[$uid]\n\t\t\t\t]);\n\t\t\t\t$userinfo['userid'] = $userinfo[$uid];\n\t\t\t\t$userinfo['adminsession'] = $adminsession;\n\t\t\t}\n\t\t} else {\n\t\t\t// login incorrect\n\t\t\t$stmt = Database::prepare(\"UPDATE $table\n\t\t\t\tSET `lastlogin_fail`= :lastlogin_fail, `loginfail_count`=`loginfail_count`+1\n\t\t\t\tWHERE `$uid`= :uid\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\"lastlogin_fail\" => time(),\n\t\t\t\t\"uid\" => $userinfo[$uid]\n\t\t\t]);\n\n\t\t\t// Log failed login\n\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t'loginname' => $_SERVER['REMOTE_ADDR']\n\t\t\t]);\n\t\t\t$rstlog->logAction(FroxlorLogger::LOGIN_ACTION, LOG_WARNING, \"User '\" . $loginname . \"' tried to login with wrong password.\");\n\n\t\t\tunset($userinfo);\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'showmessage' => '2'\n\t\t\t]);\n\t\t\texit();\n\t\t}\n\n\t\t// 2FA activated\n\t\tif (Settings::Get('2fa.enabled') == '1' && $userinfo['type_2fa'] > 0) {\n\t\t\t// redirect to code-enter-page\n\t\t\t$_SESSION['secret_2fa'] = ($userinfo['type_2fa'] == 2 ? $userinfo['data_2fa'] : 'email');\n\t\t\t$_SESSION['uid_2fa'] = $userinfo[$uid];\n\t\t\t$_SESSION['uidfield_2fa'] = $uid;\n\t\t\t$_SESSION['uidtable_2fa'] = $table;\n\t\t\t$_SESSION['unfo_2fa'] = $is_admin;\n\t\t\t// send mail if type_2fa = 1 (email)\n\t\t\tif ($userinfo['type_2fa'] == 1) {\n\t\t\t\t// generate code\n\t\t\t\t$tfa = new FroxlorTwoFactorAuth('Froxlor ' . Settings::Get('system.hostname'));\n\t\t\t\t$code = $tfa->getCode($tfa->createSecret());\n\t\t\t\t// set code for user\n\t\t\t\t$stmt = Database::prepare(\"UPDATE $table SET `data_2fa` = :d2fa WHERE `$uid` = :uid\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\"d2fa\" => $code,\n\t\t\t\t\t\"uid\" => $userinfo[$uid]\n\t\t\t\t]);\n\t\t\t\t// build up & send email\n\t\t\t\t$_mailerror = false;\n\t\t\t\t$mailerr_msg = \"\";\n\t\t\t\t$replace_arr = [\n\t\t\t\t\t'CODE' => $code\n\t\t\t\t];\n\t\t\t\t$mail_body = html_entity_decode(PhpHelper::replaceVariables(lng('mails.2fa.mailbody'), $replace_arr));\n\n\t\t\t\ttry {\n\t\t\t\t\t$mail->Subject = lng('mails.2fa.subject');\n\t\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t\t$mail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t\t$mail->AddAddress($userinfo['email'], User::getCorrectUserSalutation($userinfo));\n\t\t\t\t\t$mail->Send();\n\t\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t\t$_mailerror = true;\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t\t$_mailerror = true;\n\t\t\t\t}\n\n\t\t\t\tif ($_mailerror) {\n\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t\t\t'loginname' => '2fa code-sending'\n\t\t\t\t\t]);\n\t\t\t\t\t$rstlog->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, \"Error sending mail: \" . $mailerr_msg);\n\t\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t\t'showmessage' => '4',\n\t\t\t\t\t\t'customermail' => $userinfo['email']\n\t\t\t\t\t]);\n\t\t\t\t\texit();\n\t\t\t\t}\n\n\t\t\t\t$mail->ClearAddresses();\n\t\t\t}\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'action' => '2fa_entercode'\n\t\t\t]);\n\t\t\texit();\n\t\t}\n\n\t\tif (!finishLogin($userinfo)) {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'showmessage' => '2'\n\t\t\t]);\n\t\t}\n\t\texit();\n\t} else {\n\t\t$smessage = isset($_GET['showmessage']) ? (int)$_GET['showmessage'] : 0;\n\t\t$message = '';\n\t\t$successmessage = '';\n\n\t\tswitch ($smessage) {\n\t\t\tcase 1:\n\t\t\t\t$successmessage = lng('pwdreminder.success');\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$message = lng('error.login');\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$message = lng('error.login_blocked', [Settings::Get('login.deactivatetime')]);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t$message = lng('error.errorsendingmailpub');\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$message = lng('error.user_banned');\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$successmessage = lng('pwdreminder.changed');\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\t$message = lng('pwdreminder.wrongcode');\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$message = lng('pwdreminder.notallowed');\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$update_in_progress = false;\n\t\tif (Froxlor::hasUpdates() || Froxlor::hasDbUpdates()) {\n\t\t\t$update_in_progress = true;\n\t\t}\n\n\t\t// Pass the last used page if needed\n\t\t$lastscript = \"\";\n\t\tif (isset($_REQUEST['script']) && $_REQUEST['script'] != \"\") {\n\t\t\t$lastscript = $_REQUEST['script'];\n\t\t\t$lastscript = str_replace(\"..\", \"\", $lastscript);\n\t\t\t$lastscript = htmlspecialchars($lastscript, ENT_QUOTES);\n\n\t\t\tif (!file_exists(__DIR__ . \"/\" . $lastscript)) {\n\t\t\t\t$lastscript = \"\";\n\t\t\t}\n\t\t}\n\t\t$lastqrystr = \"\";\n\t\tif (isset($_REQUEST['qrystr']) && $_REQUEST['qrystr'] != \"\") {\n\t\t\t$lastqrystr = urlencode($_REQUEST['qrystr']);\n\t\t}\n\t\t$_SESSION['lastscript'] = $lastscript;\n\t\t$_SESSION['lastqrystr'] = $lastqrystr;\n\n\t\tUI::view('login/login.html.twig', [\n\t\t\t'pagetitle' => 'Login',\n\t\t\t'upd_in_progress' => $update_in_progress,\n\t\t\t'message' => $message,\n\t\t\t'successmsg' => $successmessage\n\t\t]);\n\t}\n}\n\nif ($action == 'forgotpwd') {\n\t$adminchecked = false;\n\t$message = '';\n\n\tif (!empty($_POST)) {\n\t\t$loginname = Validate::validate($_POST['loginname'], 'loginname');\n\t\t$email = Validate::validateEmail($_POST['loginemail']);\n\t\t$result_stmt = Database::prepare(\"SELECT `adminid`, `customerid`, `customernumber`, `firstname`, `name`, `company`, `email`, `loginname`, `def_language`, `deactivated` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\tWHERE `loginname`= :loginname\n\t\t\tAND `email`= :email\");\n\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\"loginname\" => $loginname,\n\t\t\t\"email\" => $email\n\t\t]);\n\n\t\tif (Database::num_rows() == 0) {\n\t\t\t$result_stmt = Database::prepare(\"SELECT `adminid`, `name`, `email`, `loginname`, `def_language`, `deactivated` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\tWHERE `loginname`= :loginname\n\t\t\t\tAND `email`= :email\");\n\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t\"loginname\" => $loginname,\n\t\t\t\t\"email\" => $email\n\t\t\t]);\n\n\t\t\tif (Database::num_rows() > 0) {\n\t\t\t\t$adminchecked = true;\n\t\t\t} else {\n\t\t\t\t$result_stmt = null;\n\t\t\t}\n\t\t}\n\n\t\tif ($adminchecked) {\n\t\t\tif (Settings::Get('panel.allow_preset_admin') != '1') {\n\t\t\t\t$message = lng('pwdreminder.notallowed');\n\t\t\t\tunset($adminchecked);\n\t\t\t}\n\t\t} else {\n\t\t\tif (Settings::Get('panel.allow_preset') != '1') {\n\t\t\t\t$message = lng('pwdreminder.notallowed');\n\t\t\t}\n\t\t}\n\n\t\tif (empty($message)) {\n\t\t\tif ($result_stmt !== null) {\n\t\t\t\t$user = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\t\t\t/* Check whether user is banned */\n\t\t\t\tif ($user['deactivated']) {\n\t\t\t\t\t$message = lng('pwdreminder.notallowed');\n\t\t\t\t} else {\n\t\t\t\t\tif (($adminchecked && Settings::Get('panel.allow_preset_admin') == '1') || $adminchecked == false) {\n\t\t\t\t\t\tif ($user !== false) {\n\t\t\t\t\t\t\t// build a activation code\n\t\t\t\t\t\t\t$timestamp = time();\n\t\t\t\t\t\t\t$first = substr(md5($user['loginname'] . $timestamp . PhpHelper::randomStr(16)), 0, 15);\n\t\t\t\t\t\t\t$third = substr(md5($user['email'] . $timestamp . PhpHelper::randomStr(16)), -15);\n\t\t\t\t\t\t\t$activationcode = $first . $timestamp . $third . substr(md5($third . $timestamp), 0, 10);\n\n\t\t\t\t\t\t\t// Drop all existing activation codes for this user\n\t\t\t\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\t\t\t\tWHERE `userid` = :userid\n\t\t\t\t\t\t\t\tAND `admin` = :admin\");\n\t\t\t\t\t\t\t$params = [\n\t\t\t\t\t\t\t\t\"userid\" => $adminchecked ? $user['adminid'] : $user['customerid'],\n\t\t\t\t\t\t\t\t\"admin\" => $adminchecked ? 1 : 0\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\tDatabase::pexecute($stmt, $params);\n\n\t\t\t\t\t\t\t// Add new activation code to database\n\t\t\t\t\t\t\t$stmt = Database::prepare(\"INSERT INTO `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\t\t\t\t(userid, admin, creation, activationcode)\n\t\t\t\t\t\t\t\tVALUES (:userid, :admin, :creation, :activationcode)\");\n\t\t\t\t\t\t\t$params = [\n\t\t\t\t\t\t\t\t\"userid\" => $adminchecked ? $user['adminid'] : $user['customerid'],\n\t\t\t\t\t\t\t\t\"admin\" => $adminchecked ? 1 : 0,\n\t\t\t\t\t\t\t\t\"creation\" => $timestamp,\n\t\t\t\t\t\t\t\t\"activationcode\" => $activationcode\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\tDatabase::pexecute($stmt, $params);\n\n\t\t\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t$rstlog->logAction(FroxlorLogger::USR_ACTION, LOG_WARNING, \"User '\" . $user['loginname'] . \"' requested a link for setting a new password.\");\n\n\t\t\t\t\t\t\t// Set together our activation link\n\t\t\t\t\t\t\t$protocol = empty($_SERVER['HTTPS']) ? 'http' : 'https';\n\t\t\t\t\t\t\t// this can be a fixed value to avoid potential exploiting by modifying headers\n\t\t\t\t\t\t\t$host = Settings::Get('system.hostname'); // $_SERVER['HTTP_HOST'];\n\t\t\t\t\t\t\t$port = $_SERVER['SERVER_PORT'] != 80 ? ':' . $_SERVER['SERVER_PORT'] : '';\n\t\t\t\t\t\t\t// don't add :443 when https is used, as it is default (and just looks weird!)\n\t\t\t\t\t\t\tif ($protocol == 'https' && $_SERVER['SERVER_PORT'] == '443') {\n\t\t\t\t\t\t\t\t$port = '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// there can be only one script to handle this so we can use a fixed value here\n\t\t\t\t\t\t\t$script = \"/index.php\"; // $_SERVER['SCRIPT_NAME'];\n\t\t\t\t\t\t\tif (Settings::Get('system.froxlordirectlyviahostname') == 0) {\n\t\t\t\t\t\t\t\t$script = FileDir::makeCorrectFile(\"/\" . basename(__DIR__) . \"/\" . $script);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$activationlink = $protocol . '://' . $host . $port . $script . '?action=resetpwd&resetcode=' . $activationcode;\n\n\t\t\t\t\t\t\t$replace_arr = [\n\t\t\t\t\t\t\t\t'SALUTATION' => User::getCorrectUserSalutation($user),\n\t\t\t\t\t\t\t\t'NAME' => $user['name'],\n\t\t\t\t\t\t\t\t'FIRSTNAME' => $user['firstname'] ?? \"\",\n\t\t\t\t\t\t\t\t'COMPANY' => $user['company'] ?? \"\",\n\t\t\t\t\t\t\t\t'CUSTOMER_NO' => $user['customernumber'] ?? 0,\n\t\t\t\t\t\t\t\t'USERNAME' => $loginname,\n\t\t\t\t\t\t\t\t'LINK' => $activationlink\n\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\t$def_language = ($user['def_language'] != '') ? $user['def_language'] : Settings::Get('panel.standardlanguage');\n\t\t\t\t\t\t\t$result_stmt = Database::prepare('SELECT `value` FROM `' . TABLE_PANEL_TEMPLATES . '`\n\t\t\t\t\t\t\t\tWHERE `adminid`= :adminid\n\t\t\t\t\t\t\t\tAND `language`= :lang\n\t\t\t\t\t\t\t\tAND `templategroup`=\\'mails\\'\n\t\t\t\t\t\t\t\tAND `varname`=\\'password_reset_subject\\'');\n\t\t\t\t\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t\t\t\t\t\"adminid\" => $user['adminid'],\n\t\t\t\t\t\t\t\t\"lang\" => $def_language\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t\t\t\t$mail_subject = html_entity_decode(PhpHelper::replaceVariables((($result['value'] != '') ? $result['value'] : lng('mails.password_reset.subject')), $replace_arr));\n\n\t\t\t\t\t\t\t$result_stmt = Database::prepare('SELECT `value` FROM `' . TABLE_PANEL_TEMPLATES . '`\n\t\t\t\t\t\t\t\tWHERE `adminid`= :adminid\n\t\t\t\t\t\t\t\tAND `language`= :lang\n\t\t\t\t\t\t\t\tAND `templategroup`=\\'mails\\'\n\t\t\t\t\t\t\t\tAND `varname`=\\'password_reset_mailbody\\'');\n\t\t\t\t\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t\t\t\t\t\"adminid\" => $user['adminid'],\n\t\t\t\t\t\t\t\t\"lang\" => $def_language\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t\t\t\t$mail_body = html_entity_decode(PhpHelper::replaceVariables((($result['value'] != '') ? $result['value'] : lng('mails.password_reset.mailbody')), $replace_arr));\n\n\t\t\t\t\t\t\t$_mailerror = false;\n\t\t\t\t\t\t\t$mailerr_msg = \"\";\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t$mail->Subject = $mail_subject;\n\t\t\t\t\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t\t\t\t\t$mail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t\t\t\t\t$mail->AddAddress($user['email'], User::getCorrectUserSalutation($user));\n\t\t\t\t\t\t\t\t$mail->Send();\n\t\t\t\t\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ($_mailerror) {\n\t\t\t\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\t$rstlog->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, \"Error sending mail: \" . $mailerr_msg);\n\t\t\t\t\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t\t\t\t\t'showmessage' => '4',\n\t\t\t\t\t\t\t\t\t'customermail' => $user['email']\n\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\texit();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$mail->ClearAddresses();\n\t\t\t\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t\t\t\t'showmessage' => '1'\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\texit();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t$rstlog->logAction(FroxlorLogger::USR_ACTION, LOG_WARNING, \"User '\" . $loginname . \"' requested to set a new password, but was not found in database!\");\n\t\t\t\t\t\t\t$message = lng('login.usernotfound');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tunset($user);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$message = lng('pwdreminder.notallowed');\n\t\t\t}\n\t\t}\n\t}\n\n\tUI::view('login/fpwd.html.twig', [\n\t\t'pagetitle' => lng('login.presend'),\n\t\t'formaction' => 'index.php?action='.$action,\n\t\t'message' => $message,\n\t]);\n}\n\nif ($action == 'resetpwd') {\n\t$message = '';\n\n\t// Remove old activation codes\n\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\tWHERE creation < :oldest\");\n\tDatabase::pexecute($stmt, [\n\t\t\"oldest\" => time() - 86400\n\t]);\n\n\tif (isset($_GET['resetcode']) && strlen($_GET['resetcode']) == 50) {\n\t\t// Check if activation code is valid\n\t\t$activationcode = $_GET['resetcode'];\n\t\t$timestamp = substr($activationcode, 15, 10);\n\t\t$third = substr($activationcode, 25, 15);\n\t\t$check = substr($activationcode, 40, 10);\n\n\t\tif (substr(md5($third . $timestamp), 0, 10) == $check && $timestamp >= time() - 86400) {\n\t\t\tif (!empty($_POST)) {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `userid`, `admin` FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\tWHERE `activationcode` = :activationcode\");\n\t\t\t\t$result = Database::pexecute_first($stmt, [\n\t\t\t\t\t\"activationcode\" => $activationcode\n\t\t\t\t]);\n\n\t\t\t\tif ($result !== false) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$new_password = Crypt::validatePassword($_POST['new_password'], true);\n\t\t\t\t\t\t$new_password_confirm = Crypt::validatePassword($_POST['new_password_confirm'], true);\n\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t$message = $e->getMessage();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (empty($message) && (empty($new_password) || $new_password != $new_password_confirm)) {\n\t\t\t\t\t\t$message = lng('error.newpasswordconfirmerror');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (empty($message)) {\n\t\t\t\t\t\t// Update user password\n\t\t\t\t\t\tif ($result['admin'] == 1) {\n\t\t\t\t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\t\t\t\tSET `password` = :newpassword\n\t\t\t\t\t\t\t\tWHERE `adminid` = :userid\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\t\t\tSET `password` = :newpassword\n\t\t\t\t\t\t\t\tWHERE `customerid` = :userid\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\t\t\"newpassword\" => Crypt::makeCryptPassword($new_password),\n\t\t\t\t\t\t\t\"userid\" => $result['userid']\n\t\t\t\t\t\t]);\n\n\t\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t\t]);\n\t\t\t\t\t\t$rstlog->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"changed password using password reset.\");\n\n\t\t\t\t\t\t// Remove activation code from DB\n\t\t\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\t\t\tWHERE `activationcode` = :activationcode\n\t\t\t\t\t\t\tAND `userid` = :userid\");\n\t\t\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\t\t\"activationcode\" => $activationcode,\n\t\t\t\t\t\t\t\"userid\" => $result['userid']\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t\t\t\"showmessage\" => '6'\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t\t\"showmessage\" => '7'\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tUI::view('login/rpwd.html.twig', [\n\t\t\t\t'pagetitle' => lng('pwdreminder.choosenew'),\n\t\t\t\t'formaction' => 'index.php?action=resetpwd&resetcode=' . $activationcode,\n\t\t\t\t'message' => $message,\n\t\t\t]);\n\t\t} else {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\"showmessage\" => '7'\n\t\t\t]);\n\t\t}\n\t} else {\n\t\tResponse::redirectTo('index.php');\n\t}\n}\n\n// one-time link login\nif ($action == 'll') {\n\tif (!Froxlor::hasUpdates() && !Froxlor::hasDbUpdates()) {\n\t\t$loginname = Request::get('ln');\n\t\t$hash = Request::get('h');\n\t\tif ($loginname && $hash) {\n\t\t\t$sel_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_LOGINLINKS . \"`\n\t\t\t\tWHERE `loginname` = :loginname AND `hash` = :hash\n\t\t\t\");\n\t\t\ttry {\n\t\t\t\t$entry = Database::pexecute_first($sel_stmt, ['loginname' => $loginname, 'hash' => $hash]);\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$entry = false;\n\t\t\t}\n\t\t\tif ($entry) {\n\t\t\t\t// delete entry\n\t\t\t\t$del_stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_LOGINLINKS . \"` WHERE `loginname` = :loginname AND `hash` = :hash\");\n\t\t\t\tDatabase::pexecute($del_stmt, ['loginname' => $loginname, 'hash' => $hash]);\n\t\t\t\tif (time() <= $entry['valid_until']) {\n\t\t\t\t\t$valid = true;\n\t\t\t\t\t// validate source ip if specified\n\t\t\t\t\tif (!empty($entry['allowed_from'])) {\n\t\t\t\t\t\t$valid = false;\n\t\t\t\t\t\t$ip_list = explode(\",\", $entry['allowed_from']);\n\t\t\t\t\t\tif (FroxlorRPC::validateAllowedFrom($ip_list, $_SERVER['REMOTE_ADDR'])) {\n\t\t\t\t\t\t\t$valid = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ($valid) {\n\t\t\t\t\t\t// login user / select only non-deactivated (in case the user got deactivated after generating the link)\n\t\t\t\t\t\t$userinfo_stmt = Database::prepare(\"SELECT * FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `loginname`= :loginname AND `deactivated` = 0\");\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$userinfo = Database::pexecute_first($userinfo_stmt, [\n\t\t\t\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t\t$userinfo = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($userinfo) {\n\t\t\t\t\t\t\t$userinfo['userid'] = $userinfo['customerid'];\n\t\t\t\t\t\t\t$userinfo['adminsession'] = 0;\n\t\t\t\t\t\t\tfinishLogin($userinfo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tResponse::redirectTo('index.php');\n}\n\nfunction finishLogin($userinfo)\n{\n\tif (isset($userinfo['userid']) && $userinfo['userid'] != '') {\n\t\tCurrentUser::setData($userinfo);\n\n\t\t$language = $userinfo['def_language'] ?? Settings::Get('panel.standardlanguage');\n\t\tCurrentUser::setField('language', $language);\n\n\t\tif (isset($userinfo['theme']) && $userinfo['theme'] != '') {\n\t\t\t$theme = $userinfo['theme'];\n\t\t} else {\n\t\t\t$theme = Settings::Get('panel.default_theme');\n\t\t\tCurrentUser::setField('theme', $theme);\n\t\t}\n\n\t\t$qryparams = [];\n\t\tif (isset($_SESSION['lastqrystr']) && !empty($_SESSION['lastqrystr'])) {\n\t\t\tparse_str(urldecode($_SESSION['lastqrystr']), $qryparams);\n\t\t\tunset($_SESSION['lastqrystr']);\n\t\t}\n\n\t\tif ($userinfo['adminsession'] == '1') {\n\t\t\tif (Froxlor::hasUpdates() || Froxlor::hasDbUpdates()) {\n\t\t\t\tResponse::redirectTo('admin_updates.php?page=overview');\n\t\t\t} else {\n\t\t\t\tif (isset($_SESSION['lastscript']) && !empty($_SESSION['lastscript'])) {\n\t\t\t\t\t$lastscript = $_SESSION['lastscript'];\n\t\t\t\t\tunset($_SESSION['lastscript']);\n\t\t\t\t\tif (preg_match(\"/customer\\_/\", $lastscript) === 1) {\n\t\t\t\t\t\tResponse::redirectTo('admin_customers.php', [\n\t\t\t\t\t\t\t\"page\" => \"customers\"\n\t\t\t\t\t\t]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tResponse::redirectTo($lastscript, $qryparams);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tResponse::redirectTo('admin_index.php', $qryparams);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (isset($_SESSION['lastscript']) && !empty($_SESSION['lastscript'])) {\n\t\t\t\t$lastscript = $_SESSION['lastscript'];\n\t\t\t\tunset($_SESSION['lastscript']);\n\t\t\t\tResponse::redirectTo($lastscript, $qryparams);\n\t\t\t} else {\n\t\t\t\tResponse::redirectTo('customer_index.php', $qryparams);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Admins;\nuse Froxlor\\Api\\Commands\\BackupStorages;\nuse Froxlor\\Api\\Commands\\Customers;\nuse Froxlor\\Api\\Commands\\MysqlServer;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Froxlor;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif (($page == 'customers' || $page == 'overview') && $userinfo['customers'] != '0') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_customers\");\n\n\t\ttry {\n\t\t\t$customer_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.customers.php';\n\t\t\t$collection = (new Collection(Customers::class, $userinfo, ['show_usages' => true]))\n\t\t\t\t->withPagination($customer_list_data['customer_list']['columns'], $customer_list_data['customer_list']['default_sorting']);\n\t\t\tif ($userinfo['change_serversettings']) {\n\t\t\t\t$collection->has('admin', Admins::class, 'adminid', 'adminid');\n\t\t\t}\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('customers')) {\n\t\t\t$actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'customers', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.customer_add')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $customer_list_data, 'customer_list'),\n\t\t\t'actions_links' => $actions_links\n\t\t]);\n\t} elseif ($action == 'su' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t$destination_user = $result['loginname'];\n\n\t\tif ($destination_user != '') {\n\t\t\tif ($result['deactivated'] == '1') {\n\t\t\t\tResponse::standardError(\"usercurrentlydeactivated\", $destination_user);\n\t\t\t}\n\n\t\t\t$result['switched_user'] = CurrentUser::getData();\n\t\t\t$result['adminsession'] = 0;\n\t\t\t$result['userid'] = $result['customerid'];\n\t\t\tsession_regenerate_id();\n\t\t\tCurrentUser::setData($result);\n\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"switched user and is now '\" . $destination_user . \"'\");\n\n\t\t\t$target = (isset($_GET['target']) ? $_GET['target'] : 'index');\n\t\t\t$redirect = \"customer_\" . $target . \".php\";\n\t\t\tif (!file_exists(Froxlor::getInstallDir() . \"/\" . $redirect)) {\n\t\t\t\t$redirect = \"customer_index.php\";\n\t\t\t}\n\t\t\tResponse::redirectTo($redirect, null, true);\n\t\t} else {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'action' => 'login'\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'unlock' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id\n\t\t\t\t])->unlock();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\tHTML::askYesNo('customer_reallyunlock', $filename, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'page' => $page,\n\t\t\t\t'action' => $action\n\t\t\t], $result['loginname']);\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'delete_userfiles' => (isset($_POST['delete_userfiles']) ? (int)$_POST['delete_userfiles'] : 0)\n\t\t\t\t])->delete();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\tHTML::askYesNoWithCheckbox('admin_customer_reallydelete', 'admin_customer_alsoremovefiles', $filename, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'page' => $page,\n\t\t\t\t'action' => $action\n\t\t\t], $result['loginname']);\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tCustomers::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$mysql_servers = [];\n\t\t\ttry {\n\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t$mysql_servers[] = [\n\t\t\t\t\t\t'label' => $dbdata['caption'],\n\t\t\t\t\t\t'value' => $dbserver\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t} catch (Exception $e) {\n\t\t\t\t/* just none */\n\t\t\t}\n\n\t\t\t$phpconfigs = [];\n\t\t\t$configs = Database::query(\"\n\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\");\n\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t'label' => $row['description'] . \" [\" . $row['interpreter'] . \"]\",\n\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t'label' => $row['description'],\n\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// hosting plans\n\t\t\t$hosting_plans = [];\n\t\t\t$plans = Database::query(\"\n\t\t\t\tSELECT *\n\t\t\t\tFROM `\" . TABLE_PANEL_PLANS . \"`\n\t\t\t\tORDER BY name ASC\n\t\t\t\");\n\t\t\t$hosting_plans = [\n\t\t\t\t0 => \"---\"\n\t\t\t];\n\t\t\twhile ($row = $plans->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$hosting_plans[$row['id']] = $row['name'];\n\t\t\t}\n\n\t\t\t// backup storages\n\t\t\t$backup_storages = [];\n\t\t\tif (Settings::Get('backup.enabled') == '1' && $userinfo['change_serversettings'] == '1') {\n\t\t\t\t$backup_storages = [\n\t\t\t\t\t0 => lng('backup.storage_none')\n\t\t\t\t];\n\t\t\t\ttry {\n\t\t\t\t\t$result_json = BackupStorages::getLocal($userinfo)->listing();\n\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\tforeach ($result_decoded as $storagedata) {\n\t\t\t\t\t\t$backup_storages[$storagedata['id']] = $storagedata['description'] . ' (' . $storagedata['type'] . ')';\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t/* just none */\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$customer_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/customer/formfield.customer_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'customers']),\n\t\t\t\t'formdata' => $customer_add_data['customer_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['loginname'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tCustomers::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t\t$result['traffic'] = round($result['traffic'] / (1024 * 1024), $dec_places);\n\t\t\t\t$result['diskspace'] = round($result['diskspace'] / 1024, $dec_places);\n\t\t\t\t$result['email'] = $idna_convert->decode($result['email']);\n\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$mysql_servers = [];\n\t\t\t\ttry {\n\t\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t\t$mysql_servers[] = [\n\t\t\t\t\t\t\t'label' => $dbdata['caption'],\n\t\t\t\t\t\t\t'value' => $dbserver\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t/* just none */\n\t\t\t\t}\n\n\t\t\t\t$phpconfigs = [];\n\t\t\t\t$configs = Database::query(\"\n\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\");\n\t\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t\t'label' => $row['description'] . \" [\" . $row['interpreter'] . \"]\",\n\t\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t\t];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t\t'label' => $row['description'],\n\t\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// hosting plans\n\t\t\t\t$plans = Database::query(\"\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PLANS . \"`\n\t\t\t\t\tORDER BY name ASC\n\t\t\t\t\");\n\t\t\t\t$hosting_plans = [\n\t\t\t\t\t0 => \"---\"\n\t\t\t\t];\n\t\t\t\twhile ($row = $plans->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$hosting_plans[$row['id']] = $row['name'];\n\t\t\t\t}\n\n\t\t\t\t// backup storages\n\t\t\t\t$backup_storages = [];\n\t\t\t\tif (Settings::Get('backup.enabled') == '1' && $userinfo['change_serversettings'] == '1') {\n\t\t\t\t\t$backup_storages = [\n\t\t\t\t\t\t0 => lng('backup.storage_none')\n\t\t\t\t\t];\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$result_json = BackupStorages::getLocal($userinfo)->listing();\n\t\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\t\tforeach ($result_decoded as $storagedata) {\n\t\t\t\t\t\t\t$backup_storages[$storagedata['id']] = $storagedata['description'] . ' (' . $storagedata['type'] . ')';\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t/* just none */\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$available_admins_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\tWHERE (`customers` = '-1' OR `customers` > `customers_used`)\n\t\t\t\t\tAND adminid <> :currentadmin\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($available_admins_stmt, ['currentadmin' => $result['adminid']]);\n\t\t\t\t$admin_select = [\n\t\t\t\t\t0 => \"---\"\n\t\t\t\t];\n\t\t\t\twhile ($available_admin = $available_admins_stmt->fetch()) {\n\t\t\t\t\t$admin_select[$available_admin['adminid']] = $available_admin['name'] . \" (\" . $available_admin['loginname'] . \")\";\n\t\t\t\t}\n\n\t\t\t\t$customer_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/customer/formfield.customer_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'customers', 'id' => $id]),\n\t\t\t\t\t'formdata' => $customer_edit_data['customer_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Admins as Admins;\nuse Froxlor\\Api\\Commands\\Froxlor as Froxlor;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Language;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\System\\Crypt;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\n\n$id = (int)Request::any('id');\n\nif ($action == 'logout') {\n\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"logged out\");\n\tunset($_SESSION['userinfo']);\n\tCurrentUser::setData();\n\tsession_destroy();\n\n\tResponse::redirectTo('index.php');\n} elseif ($action == 'suback') {\n\tif (is_array(CurrentUser::getField('switched_user'))) {\n\t\t$result = CurrentUser::getData();\n\t\t$result = $result['switched_user'];\n\t\tsession_regenerate_id();\n\t\tCurrentUser::setData($result);\n\t\t$target = (isset($_GET['target']) ? $_GET['target'] : 'index');\n\t\t$redirect = \"admin_\" . $target . \".php\";\n\t\tif (!file_exists(\\Froxlor\\Froxlor::getInstallDir() . \"/\" . $redirect)) {\n\t\t\t$redirect = \"admin_index.php\";\n\t\t}\n\t\tResponse::redirectTo($redirect, null, true);\n\t} else {\n\t\tResponse::dynamicError(\"Cannot change back - You've never switched to another user :-)\");\n\t}\n}\n\nif ($page == 'overview') {\n\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_index\");\n\t$params = [];\n\tif ($userinfo['customers_see_all'] == '0') {\n\t\t$params = [\n\t\t\t'adminid' => $userinfo['adminid']\n\t\t];\n\t}\n\t$overview_stmt = Database::prepare(\"SELECT COUNT(*) AS `number_customers`,\n\t\t\t\tSUM(case when `diskspace` > 0 then `diskspace` else 0 end) AS `diskspace_assigned`,\n\t\t\t\tSUM(`diskspace_used`) AS `diskspace_used`,\n\t\t\t\tSUM(case when `mysqls` > 0 then `mysqls` else 0 end) AS `mysqls_assigned`,\n\t\t\t\tSUM(`mysqls_used`) AS `mysqls_used`,\n\t\t\t\tSUM(case when `emails` > 0 then `emails` else 0 end) AS `emails_assigned`,\n\t\t\t\tSUM(`emails_used`) AS `emails_used`,\n\t\t\t\tSUM(case when `email_accounts` > 0 then `email_accounts` else 0 end) AS `email_accounts_assigned`,\n\t\t\t\tSUM(`email_accounts_used`) AS `email_accounts_used`,\n\t\t\t\tSUM(case when `email_forwarders` > 0 then `email_forwarders` else 0 end) AS `email_forwarders_assigned`,\n\t\t\t\tSUM(`email_forwarders_used`) AS `email_forwarders_used`,\n\t\t\t\tSUM(case when `email_quota` > 0 then `email_quota` else 0 end) AS `email_quota_assigned`,\n\t\t\t\tSUM(`email_quota_used`) AS `email_quota_used`,\n\t\t\t\tSUM(case when `ftps` > 0 then `ftps` else 0 end) AS `ftps_assigned`,\n\t\t\t\tSUM(`ftps_used`) AS `ftps_used`,\n\t\t\t\tSUM(case when `subdomains` > 0 then `subdomains` else 0 end) AS `subdomains_assigned`,\n\t\t\t\tSUM(`subdomains_used`) AS `subdomains_used`,\n\t\t\t\tSUM(case when `traffic` > 0 then `traffic` else 0 end) AS `traffic_assigned`,\n\t\t\t\tSUM(`traffic_used`) AS `traffic_used`\n\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"`\" . ($userinfo['customers_see_all'] ? '' : \" WHERE `adminid` = :adminid \"));\n\t$overview = Database::pexecute_first($overview_stmt, $params);\n\n\t$userinfo['diskspace_bytes'] = ($userinfo['diskspace'] > -1) ? $userinfo['diskspace'] * 1024 : -1;\n\t$overview['diskspace_bytes'] = $overview['diskspace_assigned'] * 1024;\n\t$overview['diskspace_bytes_used'] = $overview['diskspace_used'] * 1024;\n\n\t$userinfo['traffic_bytes'] = ($userinfo['traffic'] > -1) ? $userinfo['traffic'] * 1024 : -1;\n\t$overview['traffic_bytes'] = $overview['traffic_assigned'] * 1024;\n\t$overview['traffic_bytes_used'] = $overview['traffic_used'] * 1024;\n\n\t$number_domains_stmt = Database::prepare(\"\n\t\tSELECT COUNT(*) AS `number_domains` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\tWHERE `parentdomainid`='0'\" . ($userinfo['customers_see_all'] ? '' : \" AND `adminid` = :adminid\"));\n\t$number_domains = Database::pexecute_first($number_domains_stmt, $params);\n\n\t$overview['number_domains'] = $number_domains['number_domains'];\n\n\tif ((isset($_GET['lookfornewversion']) && $_GET['lookfornewversion'] == 'yes') || (isset($lookfornewversion) && $lookfornewversion == 'yes')) {\n\t\ttry {\n\t\t\t$json_result = Froxlor::getLocal($userinfo)->checkUpdate();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t$lookfornewversion_lable = $result['version'];\n\t\t$lookfornewversion_link = $result['link'];\n\t\t$lookfornewversion_message = $result['message'];\n\t\t$lookfornewversion_addinfo = $result['additional_info'];\n\t\t$isnewerversion = $result['isnewerversion'];\n\t} else {\n\t\t$lookfornewversion_lable = lng('admin.lookfornewversion.clickhere');\n\t\t$lookfornewversion_link = htmlspecialchars($filename . '?page=' . urlencode($page) . '&lookfornewversion=yes');\n\t\t$lookfornewversion_message = '';\n\t\t$lookfornewversion_addinfo = '';\n\t\t$isnewerversion = 0;\n\t}\n\n\t$cron_last_runs = Cronjob::getCronjobsLastRun();\n\t$outstanding_tasks = Cronjob::getOutstandingTasks();\n\n\t// additional sys-infos\n\t$meminfo = explode(\"\\n\", @file_get_contents(\"/proc/meminfo\"));\n\t$memory = \"\";\n\tfor ($i = 0; $i < count($meminfo); ++$i) {\n\t\tif (substr($meminfo[$i], 0, 3) === \"Mem\") {\n\t\t\t$memory .= $meminfo[$i] . PHP_EOL;\n\t\t}\n\t}\n\n\tif (function_exists('sys_getloadavg')) {\n\t\t$loadArray = sys_getloadavg();\n\t\t$load = number_format($loadArray[0], 2, '.', '') . \" / \" . number_format($loadArray[1], 2, '.', '') . \" / \" . number_format($loadArray[2], 2, '.', '');\n\t} else {\n\t\t$load = @file_get_contents('/proc/loadavg');\n\t\tif (!$load) {\n\t\t\t$load = lng('admin.noloadavailable');\n\t\t}\n\t}\n\n\t$kernel = '';\n\tif (function_exists('posix_uname')) {\n\t\t$kernel_nfo = posix_uname();\n\t\t$kernel = $kernel_nfo['release'] . ' (' . $kernel_nfo['machine'] . ')';\n\t}\n\n\t// Try to get the uptime\n\t// First: With exec (let's hope it's enabled for the Froxlor - vHost)\n\t$uptime_array = explode(\" \", @file_get_contents(\"/proc/uptime\"));\n\t$uptime = '';\n\tif (is_array($uptime_array) && isset($uptime_array[0]) && is_numeric($uptime_array[0])) {\n\t\t// Some calculatioon to get a nicly formatted display\n\t\t$seconds = round($uptime_array[0], 0);\n\t\t$minutes = $seconds / 60;\n\t\t$hours = $minutes / 60;\n\t\t$days = floor($hours / 24);\n\t\t$hours = floor($hours - ($days * 24));\n\t\t$minutes = floor($minutes - ($days * 24 * 60) - ($hours * 60));\n\t\t$seconds = floor($seconds - ($days * 24 * 60 * 60) - ($hours * 60 * 60) - ($minutes * 60));\n\t\t$uptime = \"{$days}d, {$hours}h, {$minutes}m, {$seconds}s\";\n\t\t// Just cleanup\n\t\tunset($uptime_array, $seconds, $minutes, $hours, $days);\n\t}\n\n\t$sysinfo = [\n\t\t'webserver' => $_SERVER['SERVER_SOFTWARE'] ?? 'unknown',\n\t\t'phpversion' => phpversion(),\n\t\t'mysqlserverversion' => Database::getAttribute(PDO::ATTR_SERVER_VERSION),\n\t\t'phpsapi' => strtoupper(@php_sapi_name()),\n\t\t'hostname' => gethostname(),\n\t\t'memory' => $memory,\n\t\t'load' => $load,\n\t\t'kernel' => $kernel,\n\t\t'uptime' => $uptime\n\t];\n\n\tUI::twig()->addGlobal('userinfo', $userinfo);\n\tUI::view('user/index.html.twig', [\n\t\t'sysinfo' => $sysinfo,\n\t\t'overview' => $overview,\n\t\t'outstanding_tasks' => $outstanding_tasks,\n\t\t'cron_last_runs' => $cron_last_runs\n\t]);\n} elseif ($page == 'profile') {\n\t$languages = Language::getLanguages();\n\n\tif (!empty($_POST)) {\n\t\tif ($_POST['send'] == 'changepassword') {\n\t\t\t$old_password = Validate::validate($_POST['old_password'], 'old password');\n\n\t\t\tif (!Crypt::validatePasswordLogin($userinfo, $old_password, TABLE_PANEL_ADMINS, 'adminid')) {\n\t\t\t\tResponse::standardError('oldpasswordnotcorrect');\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t$new_password = Crypt::validatePassword($_POST['new_password'], 'new password');\n\t\t\t\t$new_password_confirm = Crypt::validatePassword($_POST['new_password_confirm'], 'new password confirm');\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\n\t\t\tif ($old_password == '') {\n\t\t\t\tResponse::standardError([\n\t\t\t\t\t'stringisempty',\n\t\t\t\t\t'changepassword.old_password'\n\t\t\t\t]);\n\t\t\t} elseif ($new_password == '') {\n\t\t\t\tResponse::standardError([\n\t\t\t\t\t'stringisempty',\n\t\t\t\t\t'changepassword.new_password'\n\t\t\t\t]);\n\t\t\t} elseif ($new_password_confirm == '') {\n\t\t\t\tResponse::standardError([\n\t\t\t\t\t'stringisempty',\n\t\t\t\t\t'changepassword.new_password_confirm'\n\t\t\t\t]);\n\t\t\t} elseif ($new_password != $new_password_confirm) {\n\t\t\t\tResponse::standardError('newpasswordconfirmerror');\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $userinfo['adminid'],\n\t\t\t\t\t\t'admin_password' => $new_password\n\t\t\t\t\t])->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'changed password');\n\t\t\t\tResponse::redirectTo($filename);\n\t\t\t}\n\t\t} elseif ($_POST['send'] == 'changetheme') {\n\t\t\tif (Settings::Get('panel.allow_theme_change_admin') == 1) {\n\t\t\t\t$theme = Validate::validate($_POST['theme'], 'theme');\n\t\t\t\ttry {\n\t\t\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $userinfo['adminid'],\n\t\t\t\t\t\t'theme' => $theme\n\t\t\t\t\t])->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"changed his/her theme to '\" . $theme . \"'\");\n\t\t\t}\n\t\t\tResponse::redirectTo($filename);\n\t\t} elseif ($_POST['send'] == 'changelanguage') {\n\t\t\t$def_language = Validate::validate($_POST['def_language'], 'default language');\n\n\t\t\tif (isset($languages[$def_language])) {\n\t\t\t\ttry {\n\t\t\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $userinfo['adminid'],\n\t\t\t\t\t\t'def_language' => $def_language\n\t\t\t\t\t])->update();\n\t\t\t\t\tCurrentUser::setField('language', $def_language);\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"changed his/her default language to '\" . $def_language . \"'\");\n\t\t\tResponse::redirectTo($filename);\n\t\t}\n\t} else {\n\t\t// change theme\n\t\t$default_theme = Settings::Get('panel.default_theme');\n\t\tif ($userinfo['theme'] != '') {\n\t\t\t$default_theme = $userinfo['theme'];\n\t\t}\n\t\t$themes_avail = UI::getThemes();\n\n\t\t// change language\n\t\t$default_lang = Settings::Get('panel.standardlanguage');\n\t\tif ($userinfo['def_language'] != '') {\n\t\t\t$default_lang = $userinfo['def_language'];\n\t\t}\n\n\t\tUI::view('user/profile.html.twig', [\n\t\t\t'themes' => $themes_avail,\n\t\t\t'default_theme' => $default_theme,\n\t\t\t'languages' => $languages,\n\t\t\t'default_lang' => $default_lang,\n\t\t]);\n\t}\n} elseif ($page == 'send_error_report' && Settings::Get('system.allow_error_report_admin') == '1') {\n\trequire_once __DIR__ . '/error_report.php';\n} elseif ($page == 'apikeys' && Settings::Get('api.enabled') == 1) {\n\trequire_once __DIR__ . '/api_keys.php';\n} elseif ($page == '2fa' && Settings::Get('2fa.enabled') == 1) {\n\trequire_once __DIR__ . '/2fa.php';\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'login';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\FroxlorRPC;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Customer\\Customer;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FileDir;\nuse Froxlor\\Froxlor;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\FroxlorTwoFactorAuth;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Crypt;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\User;\nuse Froxlor\\Validate\\Validate;\n\nif ($action == '') {\n\t$action = 'login';\n}\n\nif ($action == '2fa_entercode') {\n\t// page for entering the 2FA code after successful login\n\tif (!isset($_SESSION) || !isset($_SESSION['secret_2fa'])) {\n\t\t// no session - redirect to index\n\t\tResponse::redirectTo('index.php');\n\t\texit();\n\t}\n\t$smessage = isset($_GET['showmessage']) ? (int)$_GET['showmessage'] : 0;\n\t$message = \"\";\n\tif ($smessage > 0) {\n\t\t$message = lng('error.2fa_wrongcode');\n\t}\n\t// show template to enter code\n\tUI::view('login/enter2fa.html.twig', [\n\t\t'pagetitle' => lng('login.2fa'),\n\t\t'message' => $message\n\t]);\n} elseif ($action == '2fa_verify') {\n\t// verify code from 2fa code-enter form\n\tif (!isset($_SESSION) || !isset($_SESSION['secret_2fa'])) {\n\t\t// no session - redirect to index\n\t\tResponse::redirectTo('index.php');\n\t\texit();\n\t}\n\t$code = isset($_POST['2fa_code']) ? $_POST['2fa_code'] : null;\n\t// verify entered code\n\t$tfa = new FroxlorTwoFactorAuth('Froxlor ' . Settings::Get('system.hostname'));\n\t$result = ($_SESSION['secret_2fa'] == 'email' ? true : $tfa->verifyCode($_SESSION['secret_2fa'], $code, 3));\n\t// get user-data\n\t$table = $_SESSION['uidtable_2fa'];\n\t$field = $_SESSION['uidfield_2fa'];\n\t$uid = $_SESSION['uid_2fa'];\n\t$isadmin = $_SESSION['unfo_2fa'];\n\t// either the code is valid when using authenticator-app, or we will select userdata by id and entered code\n\t// which is temporarily stored for the customer when using email-2fa\n\tif ($result) {\n\t\t$sel_param = [\n\t\t\t'uid' => $uid\n\t\t];\n\t\tif ($_SESSION['secret_2fa'] == 'email') {\n\t\t\t// verify code by selecting user by id and the temp. stored code,\n\t\t\t// so only if it's the correct code, we get the user-data\n\t\t\t$sel_stmt = Database::prepare(\"SELECT * FROM \" . $table . \" WHERE `\" . $field . \"` = :uid AND `data_2fa` = :code\");\n\t\t\t$sel_param['code'] = $code;\n\t\t} else {\n\t\t\t// Authenticator-verification has already happened at this point, so just get the user-data\n\t\t\t$sel_stmt = Database::prepare(\"SELECT * FROM \" . $table . \" WHERE `\" . $field . \"` = :uid\");\n\t\t}\n\t\t$userinfo = Database::pexecute_first($sel_stmt, $sel_param);\n\t\t// whoops, no (valid) user? Start again\n\t\tif (empty($userinfo)) {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'showmessage' => '2'\n\t\t\t]);\n\t\t}\n\t\t// set fields in $userinfo required for finishLogin()\n\t\t$userinfo['adminsession'] = $isadmin;\n\t\t$userinfo['userid'] = $uid;\n\n\t\t// if not successful somehow - start again\n\t\tif (!finishLogin($userinfo)) {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'showmessage' => '2'\n\t\t\t]);\n\t\t}\n\n\t\t// when using email-2fa, remove the one-time-code\n\t\tif ($userinfo['type_2fa'] == '1') {\n\t\t\t$del_stmt = Database::prepare(\"UPDATE \" . $table . \" SET `data_2fa` = '' WHERE `\" . $field . \"` = :uid\");\n\t\t\t$userinfo = Database::pexecute_first($del_stmt, [\n\t\t\t\t'uid' => $uid\n\t\t\t]);\n\t\t}\n\t\texit();\n\t}\n\t// wrong 2fa code - treat like \"wrong password\"\n\t$stmt = Database::prepare(\"\n\t\tUPDATE \" . $table . \"\n\t\tSET `lastlogin_fail`= :lastlogin_fail, `loginfail_count`=`loginfail_count`+1\n\t\tWHERE `\" . $field . \"`= :uid\n\t\");\n\tDatabase::pexecute($stmt, [\n\t\t\"lastlogin_fail\" => time(),\n\t\t\"uid\" => $uid\n\t]);\n\n\t// get data for processing further\n\t$stmt = Database::prepare(\"\n\t\tSELECT `loginname`, `loginfail_count`, `lastlogin_fail` FROM \" . $table . \"\n\t\tWHERE `\" . $field . \"`= :uid\n\t\");\n\t$fail_user = Database::pexecute_first($stmt, [\n\t\t\"uid\" => $uid\n\t]);\n\n\tif ($fail_user['loginfail_count'] >= Settings::Get('login.maxloginattempts') && $fail_user['lastlogin_fail'] > (time() - Settings::Get('login.deactivatetime'))) {\n\t\t// Log failed login\n\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t'loginname' => $_SERVER['REMOTE_ADDR']\n\t\t]);\n\t\t$rstlog->logAction(FroxlorLogger::LOGIN_ACTION, LOG_WARNING, \"User '\" . $fail_user['loginname'] . \"' entered wrong 2fa code too often.\");\n\t\tunset($fail_user);\n\t\tResponse::redirectTo('index.php', [\n\t\t\t'showmessage' => '3'\n\t\t]);\n\t\texit();\n\t}\n\tunset($fail_user);\n\t// back to form\n\tResponse::redirectTo('index.php', [\n\t\t'action' => '2fa_entercode',\n\t\t'showmessage' => '1'\n\t]);\n\texit();\n} elseif ($action == 'login') {\n\tif (!empty($_POST)) {\n\t\t$loginname = Validate::validate($_POST['loginname'], 'loginname');\n\t\t$password = Validate::validate($_POST['password'], 'password');\n\n\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `customer` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\tWHERE `loginname`= :loginname\");\n\t\tDatabase::pexecute($stmt, [\n\t\t\t\"loginname\" => $loginname\n\t\t]);\n\t\t$row = $stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\tif ($row && $row['customer'] == $loginname) {\n\t\t\t$table = \"`\" . TABLE_PANEL_CUSTOMERS . \"`\";\n\t\t\t$uid = 'customerid';\n\t\t\t$adminsession = '0';\n\t\t\t$is_admin = false;\n\t\t} else {\n\t\t\t$is_admin = true;\n\t\t\tif ((int)Settings::Get('login.domain_login') == 1) {\n\t\t\t\t$domainname = $idna_convert->encode(preg_replace([\n\t\t\t\t\t'/\\:(\\d)+$/',\n\t\t\t\t\t'/^https?\\:\\/\\//'\n\t\t\t\t], '', $loginname));\n\t\t\t\t$stmt = Database::prepare(\"SELECT `customerid` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `domain` = :domain\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\"domain\" => $domainname\n\t\t\t\t]);\n\t\t\t\t$row2 = $stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\t\t\tif (isset($row2['customerid']) && $row2['customerid'] > 0) {\n\t\t\t\t\t$loginname = Customer::getCustomerDetail($row2['customerid'], 'loginname');\n\t\t\t\t\tif ($loginname !== false) {\n\t\t\t\t\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `customer` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\t\tWHERE `loginname`= :loginname\");\n\t\t\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t\t\t]);\n\t\t\t\t\t\t$row3 = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t\t\tif ($row3 && $row3['customer'] == $loginname) {\n\t\t\t\t\t\t\t$table = \"`\" . TABLE_PANEL_CUSTOMERS . \"`\";\n\t\t\t\t\t\t\t$uid = 'customerid';\n\t\t\t\t\t\t\t$adminsession = '0';\n\t\t\t\t\t\t\t$is_admin = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((Froxlor::hasUpdates() || Froxlor::hasDbUpdates()) && $is_admin == false) {\n\t\t\tResponse::redirectTo('index.php');\n\t\t\texit();\n\t\t}\n\n\t\tif ($is_admin) {\n\t\t\tif (Froxlor::hasUpdates() || Froxlor::hasDbUpdates()) {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `admin` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\tWHERE `loginname`= :loginname\n\t\t\t\t\tAND `change_serversettings` = '1'\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t]);\n\t\t\t\t$row = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\tif (!isset($row['admin'])) {\n\t\t\t\t\t// not an admin who can see updates\n\t\t\t\t\tResponse::redirectTo('index.php');\n\t\t\t\t\texit();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `admin` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\tWHERE `loginname`= :loginname\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t]);\n\t\t\t\t$row = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t}\n\n\t\t\tif ($row && $row['admin'] == $loginname) {\n\t\t\t\t$table = \"`\" . TABLE_PANEL_ADMINS . \"`\";\n\t\t\t\t$uid = 'adminid';\n\t\t\t\t$adminsession = '1';\n\t\t\t} else {\n\t\t\t\t// Log failed login\n\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t\t'loginname' => $_SERVER['REMOTE_ADDR']\n\t\t\t\t]);\n\t\t\t\t$rstlog->logAction(FroxlorLogger::LOGIN_ACTION, LOG_WARNING, \"Unknown user '\" . $loginname . \"' tried to login.\");\n\n\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t'showmessage' => '2'\n\t\t\t\t]);\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\t$userinfo_stmt = Database::prepare(\"SELECT * FROM $table\n\t\t\tWHERE `loginname`= :loginname\");\n\t\tDatabase::pexecute($userinfo_stmt, [\n\t\t\t\"loginname\" => $loginname\n\t\t]);\n\t\t$userinfo = $userinfo_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\tif ($userinfo['loginfail_count'] >= Settings::Get('login.maxloginattempts') && $userinfo['lastlogin_fail'] > (time() - Settings::Get('login.deactivatetime'))) {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'showmessage' => '3'\n\t\t\t]);\n\t\t\texit();\n\t\t} elseif (Crypt::validatePasswordLogin($userinfo, $password, $table, $uid)) {\n\t\t\t// only show \"you're banned\" if the login was successful\n\t\t\t// because we don't want to publish that the user does exist\n\t\t\tif ($userinfo['deactivated']) {\n\t\t\t\tunset($userinfo);\n\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t'showmessage' => '5'\n\t\t\t\t]);\n\t\t\t\texit();\n\t\t\t} else {\n\t\t\t\t// login correct\n\t\t\t\t// reset loginfail_counter, set lastlogin_succ\n\t\t\t\t$stmt = Database::prepare(\"UPDATE $table\n\t\t\t\t\t  SET `lastlogin_succ`= :lastlogin_succ, `loginfail_count`='0'\n\t\t\t\t\t  WHERE `$uid`= :uid\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\"lastlogin_succ\" => time(),\n\t\t\t\t\t\"uid\" => $userinfo[$uid]\n\t\t\t\t]);\n\t\t\t\t$userinfo['userid'] = $userinfo[$uid];\n\t\t\t\t$userinfo['adminsession'] = $adminsession;\n\t\t\t}\n\t\t} else {\n\t\t\t// login incorrect\n\t\t\t$stmt = Database::prepare(\"UPDATE $table\n\t\t\t\tSET `lastlogin_fail`= :lastlogin_fail, `loginfail_count`=`loginfail_count`+1\n\t\t\t\tWHERE `$uid`= :uid\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\"lastlogin_fail\" => time(),\n\t\t\t\t\"uid\" => $userinfo[$uid]\n\t\t\t]);\n\n\t\t\t// Log failed login\n\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t'loginname' => $_SERVER['REMOTE_ADDR']\n\t\t\t]);\n\t\t\t$rstlog->logAction(FroxlorLogger::LOGIN_ACTION, LOG_WARNING, \"User '\" . $loginname . \"' tried to login with wrong password.\");\n\n\t\t\tunset($userinfo);\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'showmessage' => '2'\n\t\t\t]);\n\t\t\texit();\n\t\t}\n\n\t\t// 2FA activated\n\t\tif (Settings::Get('2fa.enabled') == '1' && $userinfo['type_2fa'] > 0) {\n\t\t\t// redirect to code-enter-page\n\t\t\t$_SESSION['secret_2fa'] = ($userinfo['type_2fa'] == 2 ? $userinfo['data_2fa'] : 'email');\n\t\t\t$_SESSION['uid_2fa'] = $userinfo[$uid];\n\t\t\t$_SESSION['uidfield_2fa'] = $uid;\n\t\t\t$_SESSION['uidtable_2fa'] = $table;\n\t\t\t$_SESSION['unfo_2fa'] = $is_admin;\n\t\t\t// send mail if type_2fa = 1 (email)\n\t\t\tif ($userinfo['type_2fa'] == 1) {\n\t\t\t\t// generate code\n\t\t\t\t$tfa = new FroxlorTwoFactorAuth('Froxlor ' . Settings::Get('system.hostname'));\n\t\t\t\t$code = $tfa->getCode($tfa->createSecret());\n\t\t\t\t// set code for user\n\t\t\t\t$stmt = Database::prepare(\"UPDATE $table SET `data_2fa` = :d2fa WHERE `$uid` = :uid\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\"d2fa\" => $code,\n\t\t\t\t\t\"uid\" => $userinfo[$uid]\n\t\t\t\t]);\n\t\t\t\t// build up & send email\n\t\t\t\t$_mailerror = false;\n\t\t\t\t$mailerr_msg = \"\";\n\t\t\t\t$replace_arr = [\n\t\t\t\t\t'CODE' => $code\n\t\t\t\t];\n\t\t\t\t$mail_body = html_entity_decode(PhpHelper::replaceVariables(lng('mails.2fa.mailbody'), $replace_arr));\n\n\t\t\t\ttry {\n\t\t\t\t\t$mail->Subject = lng('mails.2fa.subject');\n\t\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t\t$mail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t\t$mail->AddAddress($userinfo['email'], User::getCorrectUserSalutation($userinfo));\n\t\t\t\t\t$mail->Send();\n\t\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t\t$_mailerror = true;\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t\t$_mailerror = true;\n\t\t\t\t}\n\n\t\t\t\tif ($_mailerror) {\n\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t\t\t'loginname' => '2fa code-sending'\n\t\t\t\t\t]);\n\t\t\t\t\t$rstlog->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, \"Error sending mail: \" . $mailerr_msg);\n\t\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t\t'showmessage' => '4',\n\t\t\t\t\t\t'customermail' => $userinfo['email']\n\t\t\t\t\t]);\n\t\t\t\t\texit();\n\t\t\t\t}\n\n\t\t\t\t$mail->ClearAddresses();\n\t\t\t}\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'action' => '2fa_entercode'\n\t\t\t]);\n\t\t\texit();\n\t\t}\n\n\t\tif (!finishLogin($userinfo)) {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'showmessage' => '2'\n\t\t\t]);\n\t\t}\n\t\texit();\n\t} else {\n\t\t$smessage = isset($_GET['showmessage']) ? (int)$_GET['showmessage'] : 0;\n\t\t$message = '';\n\t\t$successmessage = '';\n\n\t\tswitch ($smessage) {\n\t\t\tcase 1:\n\t\t\t\t$successmessage = lng('pwdreminder.success');\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$message = lng('error.login');\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$message = lng('error.login_blocked', [Settings::Get('login.deactivatetime')]);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t$message = lng('error.errorsendingmailpub');\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$message = lng('error.user_banned');\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$successmessage = lng('pwdreminder.changed');\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\t$message = lng('pwdreminder.wrongcode');\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$message = lng('pwdreminder.notallowed');\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$update_in_progress = false;\n\t\tif (Froxlor::hasUpdates() || Froxlor::hasDbUpdates()) {\n\t\t\t$update_in_progress = true;\n\t\t}\n\n\t\t// Pass the last used page if needed\n\t\t$lastscript = \"\";\n\t\tif (isset($_REQUEST['script']) && $_REQUEST['script'] != \"\") {\n\t\t\t$lastscript = $_REQUEST['script'];\n\t\t\t$lastscript = str_replace(\"..\", \"\", $lastscript);\n\t\t\t$lastscript = htmlspecialchars($lastscript, ENT_QUOTES);\n\n\t\t\tif (!file_exists(__DIR__ . \"/\" . $lastscript)) {\n\t\t\t\t$lastscript = \"\";\n\t\t\t}\n\t\t}\n\t\t$lastqrystr = \"\";\n\t\tif (isset($_REQUEST['qrystr']) && $_REQUEST['qrystr'] != \"\") {\n\t\t\t$lastqrystr = urlencode($_REQUEST['qrystr']);\n\t\t}\n\t\t$_SESSION['lastscript'] = $lastscript;\n\t\t$_SESSION['lastqrystr'] = $lastqrystr;\n\n\t\tUI::view('login/login.html.twig', [\n\t\t\t'pagetitle' => 'Login',\n\t\t\t'upd_in_progress' => $update_in_progress,\n\t\t\t'message' => $message,\n\t\t\t'successmsg' => $successmessage\n\t\t]);\n\t}\n}\n\nif ($action == 'forgotpwd') {\n\t$adminchecked = false;\n\t$message = '';\n\n\tif (!empty($_POST)) {\n\t\t$loginname = Validate::validate($_POST['loginname'], 'loginname');\n\t\t$email = Validate::validateEmail($_POST['loginemail']);\n\t\t$result_stmt = Database::prepare(\"SELECT `adminid`, `customerid`, `customernumber`, `firstname`, `name`, `company`, `email`, `loginname`, `def_language`, `deactivated` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\tWHERE `loginname`= :loginname\n\t\t\tAND `email`= :email\");\n\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\"loginname\" => $loginname,\n\t\t\t\"email\" => $email\n\t\t]);\n\n\t\tif (Database::num_rows() == 0) {\n\t\t\t$result_stmt = Database::prepare(\"SELECT `adminid`, `name`, `email`, `loginname`, `def_language`, `deactivated` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\tWHERE `loginname`= :loginname\n\t\t\t\tAND `email`= :email\");\n\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t\"loginname\" => $loginname,\n\t\t\t\t\"email\" => $email\n\t\t\t]);\n\n\t\t\tif (Database::num_rows() > 0) {\n\t\t\t\t$adminchecked = true;\n\t\t\t} else {\n\t\t\t\t$result_stmt = null;\n\t\t\t}\n\t\t}\n\n\t\tif ($adminchecked) {\n\t\t\tif (Settings::Get('panel.allow_preset_admin') != '1') {\n\t\t\t\t$message = lng('pwdreminder.notallowed');\n\t\t\t\tunset($adminchecked);\n\t\t\t}\n\t\t} else {\n\t\t\tif (Settings::Get('panel.allow_preset') != '1') {\n\t\t\t\t$message = lng('pwdreminder.notallowed');\n\t\t\t}\n\t\t}\n\n\t\tif (empty($message)) {\n\t\t\tif ($result_stmt !== null) {\n\t\t\t\t$user = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\t\t\t/* Check whether user is banned */\n\t\t\t\tif ($user['deactivated']) {\n\t\t\t\t\t$message = lng('pwdreminder.notallowed');\n\t\t\t\t} else {\n\t\t\t\t\tif (($adminchecked && Settings::Get('panel.allow_preset_admin') == '1') || $adminchecked == false) {\n\t\t\t\t\t\tif ($user !== false) {\n\t\t\t\t\t\t\t// build a activation code\n\t\t\t\t\t\t\t$timestamp = time();\n\t\t\t\t\t\t\t$first = substr(md5($user['loginname'] . $timestamp . PhpHelper::randomStr(16)), 0, 15);\n\t\t\t\t\t\t\t$third = substr(md5($user['email'] . $timestamp . PhpHelper::randomStr(16)), -15);\n\t\t\t\t\t\t\t$activationcode = $first . $timestamp . $third . substr(md5($third . $timestamp), 0, 10);\n\n\t\t\t\t\t\t\t// Drop all existing activation codes for this user\n\t\t\t\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\t\t\t\tWHERE `userid` = :userid\n\t\t\t\t\t\t\t\tAND `admin` = :admin\");\n\t\t\t\t\t\t\t$params = [\n\t\t\t\t\t\t\t\t\"userid\" => $adminchecked ? $user['adminid'] : $user['customerid'],\n\t\t\t\t\t\t\t\t\"admin\" => $adminchecked ? 1 : 0\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\tDatabase::pexecute($stmt, $params);\n\n\t\t\t\t\t\t\t// Add new activation code to database\n\t\t\t\t\t\t\t$stmt = Database::prepare(\"INSERT INTO `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\t\t\t\t(userid, admin, creation, activationcode)\n\t\t\t\t\t\t\t\tVALUES (:userid, :admin, :creation, :activationcode)\");\n\t\t\t\t\t\t\t$params = [\n\t\t\t\t\t\t\t\t\"userid\" => $adminchecked ? $user['adminid'] : $user['customerid'],\n\t\t\t\t\t\t\t\t\"admin\" => $adminchecked ? 1 : 0,\n\t\t\t\t\t\t\t\t\"creation\" => $timestamp,\n\t\t\t\t\t\t\t\t\"activationcode\" => $activationcode\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\tDatabase::pexecute($stmt, $params);\n\n\t\t\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t$rstlog->logAction(FroxlorLogger::USR_ACTION, LOG_WARNING, \"User '\" . $user['loginname'] . \"' requested a link for setting a new password.\");\n\n\t\t\t\t\t\t\t// Set together our activation link\n\t\t\t\t\t\t\t$protocol = empty($_SERVER['HTTPS']) ? 'http' : 'https';\n\t\t\t\t\t\t\t// this can be a fixed value to avoid potential exploiting by modifying headers\n\t\t\t\t\t\t\t$host = Settings::Get('system.hostname'); // $_SERVER['HTTP_HOST'];\n\t\t\t\t\t\t\t$port = $_SERVER['SERVER_PORT'] != 80 ? ':' . $_SERVER['SERVER_PORT'] : '';\n\t\t\t\t\t\t\t// don't add :443 when https is used, as it is default (and just looks weird!)\n\t\t\t\t\t\t\tif ($protocol == 'https' && $_SERVER['SERVER_PORT'] == '443') {\n\t\t\t\t\t\t\t\t$port = '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// there can be only one script to handle this so we can use a fixed value here\n\t\t\t\t\t\t\t$script = \"/index.php\"; // $_SERVER['SCRIPT_NAME'];\n\t\t\t\t\t\t\tif (Settings::Get('system.froxlordirectlyviahostname') == 0) {\n\t\t\t\t\t\t\t\t$script = FileDir::makeCorrectFile(\"/\" . basename(__DIR__) . \"/\" . $script);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$activationlink = $protocol . '://' . $host . $port . $script . '?action=resetpwd&resetcode=' . $activationcode;\n\n\t\t\t\t\t\t\t$replace_arr = [\n\t\t\t\t\t\t\t\t'SALUTATION' => User::getCorrectUserSalutation($user),\n\t\t\t\t\t\t\t\t'NAME' => $user['name'],\n\t\t\t\t\t\t\t\t'FIRSTNAME' => $user['firstname'] ?? \"\",\n\t\t\t\t\t\t\t\t'COMPANY' => $user['company'] ?? \"\",\n\t\t\t\t\t\t\t\t'CUSTOMER_NO' => $user['customernumber'] ?? 0,\n\t\t\t\t\t\t\t\t'USERNAME' => $loginname,\n\t\t\t\t\t\t\t\t'LINK' => $activationlink\n\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\t$def_language = ($user['def_language'] != '') ? $user['def_language'] : Settings::Get('panel.standardlanguage');\n\t\t\t\t\t\t\t$result_stmt = Database::prepare('SELECT `value` FROM `' . TABLE_PANEL_TEMPLATES . '`\n\t\t\t\t\t\t\t\tWHERE `adminid`= :adminid\n\t\t\t\t\t\t\t\tAND `language`= :lang\n\t\t\t\t\t\t\t\tAND `templategroup`=\\'mails\\'\n\t\t\t\t\t\t\t\tAND `varname`=\\'password_reset_subject\\'');\n\t\t\t\t\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t\t\t\t\t\"adminid\" => $user['adminid'],\n\t\t\t\t\t\t\t\t\"lang\" => $def_language\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t\t\t\t$mail_subject = html_entity_decode(PhpHelper::replaceVariables((($result['value'] != '') ? $result['value'] : lng('mails.password_reset.subject')), $replace_arr));\n\n\t\t\t\t\t\t\t$result_stmt = Database::prepare('SELECT `value` FROM `' . TABLE_PANEL_TEMPLATES . '`\n\t\t\t\t\t\t\t\tWHERE `adminid`= :adminid\n\t\t\t\t\t\t\t\tAND `language`= :lang\n\t\t\t\t\t\t\t\tAND `templategroup`=\\'mails\\'\n\t\t\t\t\t\t\t\tAND `varname`=\\'password_reset_mailbody\\'');\n\t\t\t\t\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t\t\t\t\t\"adminid\" => $user['adminid'],\n\t\t\t\t\t\t\t\t\"lang\" => $def_language\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t\t\t\t$mail_body = html_entity_decode(PhpHelper::replaceVariables((($result['value'] != '') ? $result['value'] : lng('mails.password_reset.mailbody')), $replace_arr));\n\n\t\t\t\t\t\t\t$_mailerror = false;\n\t\t\t\t\t\t\t$mailerr_msg = \"\";\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t$mail->Subject = $mail_subject;\n\t\t\t\t\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t\t\t\t\t$mail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t\t\t\t\t$mail->AddAddress($user['email'], User::getCorrectUserSalutation($user));\n\t\t\t\t\t\t\t\t$mail->Send();\n\t\t\t\t\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ($_mailerror) {\n\t\t\t\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\t$rstlog->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, \"Error sending mail: \" . $mailerr_msg);\n\t\t\t\t\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t\t\t\t\t'showmessage' => '4',\n\t\t\t\t\t\t\t\t\t'customermail' => $user['email']\n\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\texit();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$mail->ClearAddresses();\n\t\t\t\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t\t\t\t'showmessage' => '1'\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\texit();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t$rstlog->logAction(FroxlorLogger::USR_ACTION, LOG_WARNING, \"User '\" . $loginname . \"' requested to set a new password, but was not found in database!\");\n\t\t\t\t\t\t\t$message = lng('login.usernotfound');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tunset($user);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$message = lng('pwdreminder.notallowed');\n\t\t\t}\n\t\t}\n\t}\n\n\tUI::view('login/fpwd.html.twig', [\n\t\t'pagetitle' => lng('login.presend'),\n\t\t'formaction' => 'index.php?action='.$action,\n\t\t'message' => $message,\n\t]);\n}\n\nif ($action == 'resetpwd') {\n\t$message = '';\n\n\t// Remove old activation codes\n\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\tWHERE creation < :oldest\");\n\tDatabase::pexecute($stmt, [\n\t\t\"oldest\" => time() - 86400\n\t]);\n\n\tif (isset($_GET['resetcode']) && strlen($_GET['resetcode']) == 50) {\n\t\t// Check if activation code is valid\n\t\t$activationcode = $_GET['resetcode'];\n\t\t$timestamp = substr($activationcode, 15, 10);\n\t\t$third = substr($activationcode, 25, 15);\n\t\t$check = substr($activationcode, 40, 10);\n\n\t\tif (substr(md5($third . $timestamp), 0, 10) == $check && $timestamp >= time() - 86400) {\n\t\t\tif (!empty($_POST)) {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `userid`, `admin` FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\tWHERE `activationcode` = :activationcode\");\n\t\t\t\t$result = Database::pexecute_first($stmt, [\n\t\t\t\t\t\"activationcode\" => $activationcode\n\t\t\t\t]);\n\n\t\t\t\tif ($result !== false) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$new_password = Crypt::validatePassword($_POST['new_password'], true);\n\t\t\t\t\t\t$new_password_confirm = Crypt::validatePassword($_POST['new_password_confirm'], true);\n\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t$message = $e->getMessage();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (empty($message) && (empty($new_password) || $new_password != $new_password_confirm)) {\n\t\t\t\t\t\t$message = lng('error.newpasswordconfirmerror');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (empty($message)) {\n\t\t\t\t\t\t// Update user password\n\t\t\t\t\t\tif ($result['admin'] == 1) {\n\t\t\t\t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\t\t\t\tSET `password` = :newpassword\n\t\t\t\t\t\t\t\tWHERE `adminid` = :userid\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\t\t\tSET `password` = :newpassword\n\t\t\t\t\t\t\t\tWHERE `customerid` = :userid\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\t\t\"newpassword\" => Crypt::makeCryptPassword($new_password),\n\t\t\t\t\t\t\t\"userid\" => $result['userid']\n\t\t\t\t\t\t]);\n\n\t\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf([\n\t\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t\t]);\n\t\t\t\t\t\t$rstlog->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"changed password using password reset.\");\n\n\t\t\t\t\t\t// Remove activation code from DB\n\t\t\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\t\t\tWHERE `activationcode` = :activationcode\n\t\t\t\t\t\t\tAND `userid` = :userid\");\n\t\t\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\t\t\"activationcode\" => $activationcode,\n\t\t\t\t\t\t\t\"userid\" => $result['userid']\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t\t\t\"showmessage\" => '6'\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\t\t\"showmessage\" => '7'\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tUI::view('login/rpwd.html.twig', [\n\t\t\t\t'pagetitle' => lng('pwdreminder.choosenew'),\n\t\t\t\t'formaction' => 'index.php?action=resetpwd&resetcode=' . $activationcode,\n\t\t\t\t'message' => $message,\n\t\t\t]);\n\t\t} else {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t\"showmessage\" => '7'\n\t\t\t]);\n\t\t}\n\t} else {\n\t\tResponse::redirectTo('index.php');\n\t}\n}\n\n// one-time link login\nif ($action == 'll') {\n\tif (!Froxlor::hasUpdates() && !Froxlor::hasDbUpdates()) {\n\t\t$loginname = Request::get('ln');\n\t\t$hash = Request::get('h');\n\t\tif ($loginname && $hash) {\n\t\t\t$sel_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_LOGINLINKS . \"`\n\t\t\t\tWHERE `loginname` = :loginname AND `hash` = :hash\n\t\t\t\");\n\t\t\ttry {\n\t\t\t\t$entry = Database::pexecute_first($sel_stmt, ['loginname' => $loginname, 'hash' => $hash]);\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$entry = false;\n\t\t\t}\n\t\t\tif ($entry) {\n\t\t\t\t// delete entry\n\t\t\t\t$del_stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_LOGINLINKS . \"` WHERE `loginname` = :loginname AND `hash` = :hash\");\n\t\t\t\tDatabase::pexecute($del_stmt, ['loginname' => $loginname, 'hash' => $hash]);\n\t\t\t\tif (time() <= $entry['valid_until']) {\n\t\t\t\t\t$valid = true;\n\t\t\t\t\t// validate source ip if specified\n\t\t\t\t\tif (!empty($entry['allowed_from'])) {\n\t\t\t\t\t\t$valid = false;\n\t\t\t\t\t\t$ip_list = explode(\",\", $entry['allowed_from']);\n\t\t\t\t\t\tif (FroxlorRPC::validateAllowedFrom($ip_list, $_SERVER['REMOTE_ADDR'])) {\n\t\t\t\t\t\t\t$valid = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ($valid) {\n\t\t\t\t\t\t// login user / select only non-deactivated (in case the user got deactivated after generating the link)\n\t\t\t\t\t\t$userinfo_stmt = Database::prepare(\"SELECT * FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `loginname`= :loginname AND `deactivated` = 0\");\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$userinfo = Database::pexecute_first($userinfo_stmt, [\n\t\t\t\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t\t$userinfo = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($userinfo) {\n\t\t\t\t\t\t\t$userinfo['userid'] = $userinfo['customerid'];\n\t\t\t\t\t\t\t$userinfo['adminsession'] = 0;\n\t\t\t\t\t\t\tfinishLogin($userinfo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tResponse::redirectTo('index.php');\n}\n\nfunction finishLogin($userinfo)\n{\n\tif (isset($userinfo['userid']) && $userinfo['userid'] != '') {\n\t\tsession_regenerate_id();\n\t\tCurrentUser::setData($userinfo);\n\n\t\t$language = $userinfo['def_language'] ?? Settings::Get('panel.standardlanguage');\n\t\tCurrentUser::setField('language', $language);\n\n\t\tif (isset($userinfo['theme']) && $userinfo['theme'] != '') {\n\t\t\t$theme = $userinfo['theme'];\n\t\t} else {\n\t\t\t$theme = Settings::Get('panel.default_theme');\n\t\t\tCurrentUser::setField('theme', $theme);\n\t\t}\n\n\t\t$qryparams = [];\n\t\tif (isset($_SESSION['lastqrystr']) && !empty($_SESSION['lastqrystr'])) {\n\t\t\tparse_str(urldecode($_SESSION['lastqrystr']), $qryparams);\n\t\t\tunset($_SESSION['lastqrystr']);\n\t\t}\n\n\t\tif ($userinfo['adminsession'] == '1') {\n\t\t\tif (Froxlor::hasUpdates() || Froxlor::hasDbUpdates()) {\n\t\t\t\tResponse::redirectTo('admin_updates.php?page=overview');\n\t\t\t} else {\n\t\t\t\tif (isset($_SESSION['lastscript']) && !empty($_SESSION['lastscript'])) {\n\t\t\t\t\t$lastscript = $_SESSION['lastscript'];\n\t\t\t\t\tunset($_SESSION['lastscript']);\n\t\t\t\t\tif (preg_match(\"/customer\\_/\", $lastscript) === 1) {\n\t\t\t\t\t\tResponse::redirectTo('admin_customers.php', [\n\t\t\t\t\t\t\t\"page\" => \"customers\"\n\t\t\t\t\t\t]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tResponse::redirectTo($lastscript, $qryparams);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tResponse::redirectTo('admin_index.php', $qryparams);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (isset($_SESSION['lastscript']) && !empty($_SESSION['lastscript'])) {\n\t\t\t\t$lastscript = $_SESSION['lastscript'];\n\t\t\t\tunset($_SESSION['lastscript']);\n\t\t\t\tResponse::redirectTo($lastscript, $qryparams);\n\t\t\t} else {\n\t\t\t\tResponse::redirectTo('customer_index.php', $qryparams);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n"], "filenames": ["admin_customers.php", "admin_index.php", "index.php"], "buggy_code_start_loc": [96, 55, 788], "buggy_code_end_loc": [96, 55, 788], "fixing_code_start_loc": [97, 56, 789], "fixing_code_end_loc": [98, 57, 790], "type": "CWE-384", "message": "Session Fixation in GitHub repository froxlor/froxlor prior to 2.1.0.", "other": {"cve": {"id": "CVE-2023-3192", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-11T11:15:42.500", "lastModified": "2023-06-16T03:48:45.040", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Session Fixation in GitHub repository froxlor/froxlor prior to 2.1.0."}, {"lang": "es", "value": "Fijaci\u00f3n de sesi\u00f3n en el repositorio GitHub froxlor/froxlor anterior a 2.1.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.5, "impactScore": 3.6}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-384"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.0", "matchCriteriaId": "3198109A-4339-43E3-AC82-0C238676EE5A"}]}]}], "references": [{"url": "https://github.com/froxlor/froxlor/commit/94d9c3eedf31bc8447e3aa349e32880dde02ee52", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/f3644772-9c86-4f55-a0fa-aeb11f411551", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/froxlor/froxlor/commit/94d9c3eedf31bc8447e3aa349e32880dde02ee52"}}