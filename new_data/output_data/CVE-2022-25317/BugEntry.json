{"buggy_code": ["<?php\n    /*\n     * Generic form builder\n     *\n     * Simply pass a JSON with the following keys set:\n     * - model: The model used to create the form (such as Attribute, Event)\n     * - fields: an array with each element generating an input field\n     *     - field is the actual field name (such as org_id, name, etc) which is required\n     *     - optional fields: default, type, options, placeholder, label - these are passed directly to $this->Form->input(),\n     *     - requirements: boolean, if false is passed the field is skipped\n     * - metafields: fields that are outside of the scope of the form itself\n           - use these to define dynamic form fields, or anything that will feed into the regular fields via JS population\n     * - submit: The submit button itself. By default it will simply submit to the form as defined via the 'model' field\n     */\n    $this->Form->setConfig('errorClass', 'is-invalid');\n    $modelForForm = empty($data['model']) ?\n        h(\\Cake\\Utility\\Inflector::singularize(\\Cake\\Utility\\Inflector::classify($this->request->getParam('controller')))) :\n        h($data['model']);\n    $entity = isset($entity) ? $entity : null;\n    $fieldsString = '';\n    $simpleFieldWhitelist = [\n        'default', 'type', 'placeholder', 'label', 'empty', 'rows', 'div', 'required'\n    ];\n    //$fieldsArrayForPersistence = array();\n    if (empty($data['url'])) {\n        $data['url'] = [\"controller\" => $this->request->getParam('controller'), \"action\" => $this->request->getParam('url')];\n    }\n    $formRandomValue = Cake\\Utility\\Security::randomString(8);\n    $formCreate = $this->Form->create($entity, ['id' => 'form-' . $formRandomValue]);\n    $default_template = [\n        'inputContainer' => '<div class=\"row mb-3\">{{content}}</div>',\n        'inputContainerError' => '<div class=\"row mb-3 has-error\">{{content}}</div>',\n        'label' => '{{text}}',\n        'input' => '<input type=\"{{type}}\" name=\"{{name}}\"{{attrs}} />',\n        'textarea' => '<textarea name=\"{{name}}\" {{attrs}}>{{value}}</textarea>',\n        'select' => '<select name=\"{{name}}\" {{attrs}}>{{content}}</select>',\n        'checkbox' => '<input type=\"checkbox\" name=\"{{name}}\" value=\"{{value}}\"{{attrs}}>',\n        'checkboxFormGroup' => '{{label}}',\n        'formGroup' => '<div class=\"col-sm-2 form-label\" {{attrs}}>{{label}}</div><div class=\"col-sm-10\">{{input}}{{error}}</div>',\n        'nestingLabel' => '{{hidden}}<div class=\"col-sm-2 form-label\">{{text}}</div><div class=\"col-sm-10\">{{input}}</div>',\n        'option' => '<option value=\"{{value}}\"{{attrs}}>{{text}}</option>',\n        'optgroup' => '<optgroup label=\"{{label}}\"{{attrs}}>{{content}}</optgroup>',\n        'select' => '<select name=\"{{name}}\"{{attrs}}>{{content}}</select>',\n        'error' => '<div class=\"error-message invalid-feedback d-block\">{{content}}</div>',\n        'errorList' => '<ul>{{content}}</ul>',\n        'errorItem' => '<li>{{text}}</li>',\n    ];\n    if (!empty($data['fields'])) {\n        foreach ($data['fields'] as $fieldData) {\n            if (!empty($fields)) {\n                if (!in_array($fieldData['field'], $fields)) {\n                    continue;\n                }\n            }\n            $formTemplate = $default_template;\n            if (!empty($fieldData['floating-label'])) {\n                $formTemplate['inputContainer'] = '<div class=\"form-floating input {{type}}{{required}}\">{{content}}</div>';\n                $formTemplate['label'] = '<label{{attrs}}>{{text}}</label>';\n                $formTemplate['formGroup'] = '{{input}}{{label}}';\n                $fieldData['placeholder'] = !empty($fieldData['label']) ? $fieldData['label'] : h($fieldData['field']);\n            }\n            // we reset the template each iteration as individual fields might override the defaults.\n            $this->Form->setConfig($formTemplate);\n            $this->Form->setTemplates($formTemplate);\n            if (isset($fieldData['requirements']) && !$fieldData['requirements']) {\n                continue;\n            }\n            $fieldsString .= $this->element(\n                'genericElements/Form/fieldScaffold', [\n                    'fieldData' => $fieldData,\n                    'form' => $this->Form,\n                    'simpleFieldWhitelist' => $simpleFieldWhitelist\n                ]\n            );\n        }\n    }\n    if (!empty($data['metaTemplates']) && $data['metaTemplates']->count() > 0) {\n        $metaTemplateString = $this->element(\n            'genericElements/Form/metaTemplateScaffold', [\n                'metaTemplatesData' => $data['metaTemplates'],\n                'form' => $this->Form,\n            ]\n        );\n    }\n    $submitButtonData = ['model' => $modelForForm, 'formRandomValue' => $formRandomValue];\n    if (!empty($data['submit'])) {\n        $submitButtonData = array_merge($submitButtonData, $data['submit']);\n    }\n    if (!empty($data['ajaxSubmit'])) {\n        $submitButtonData['ajaxSubmit'] = $ajaxSubmit;\n    }\n    $ajaxFlashMessage = '';\n    if (!empty($ajax)) {\n        $ajaxFlashMessage = sprintf(\n            '<div id=\"flashContainer\"><div id=\"main-view-container\">%s</div></div>',\n            $this->Flash->render()\n        );\n    }\n    $formEnd = $this->Form->end();\n    $actionName = h(\\Cake\\Utility\\Inflector::humanize($this->request->getParam('action')));\n    $modelName = h(\\Cake\\Utility\\Inflector::humanize(\\Cake\\Utility\\Inflector::singularize($this->request->getParam('controller'))));\n    if (!empty($ajax)) {\n        echo $this->element('genericElements/genericModal', [\n            'title' => empty($data['title']) ? sprintf('%s %s', $actionName, $modelName) : h($data['title']),\n            'body' => sprintf(\n                '%s%s%s%s%s%s',\n                empty($data['description']) ? '' : sprintf(\n                    '<div class=\"pb-2 fw-light\">%s</div>',\n                    $data['description']\n                ),\n                $ajaxFlashMessage,\n                $formCreate,\n                $fieldsString,\n                empty($metaTemplateString) ? '' : $this->element(\n                    'genericElements/accordion_scaffold', [\n                        'children' => [\n                            [\n                                'body' => $metaTemplateString,\n                                'title' => 'Meta fields'\n                            ]\n                        ]\n                    ]\n                ),\n                $formEnd\n            ),\n            'actionButton' => $this->element('genericElements/Form/submitButton', $submitButtonData),\n            'class' => 'modal-lg'\n        ]);\n    } else if (!empty($raw)) {\n        echo sprintf(\n            '%s%s%s%s%s%s',\n            empty($data['description']) ? '' : sprintf(\n                '<div class=\"pb-2\">%s</div>',\n                $data['description']\n            ),\n            $ajaxFlashMessage,\n            $formCreate,\n            $fieldsString,\n            empty($metaTemplateString) ? '' : $this->element(\n                'genericElements/accordion_scaffold', [\n                    'children' => [\n                        [\n                            'body' => $metaTemplateString,\n                            'title' => 'Meta fields'\n                        ]\n                    ]\n                ]\n            ),\n            $formEnd\n        );\n    } else {\n        echo sprintf(\n            '%s<h2 class=\"fw-light\">%s</h2>%s%s%s%s%s%s%s%s%s',\n            empty($ajax) ? '<div class=\"col-8\">' : '',\n            empty($data['title']) ? sprintf('%s %s', $actionName, $modelName) : h($data['title']),\n            $formCreate,\n            $ajaxFlashMessage,\n            empty($data['description']) ? '' : sprintf(\n                '<div class=\"pb-3 fw-light\">%s</div>',\n                $data['description']\n            ),\n            sprintf('<div class=\"panel\">%s</div>', $fieldsString),\n            empty($metaTemplateString) ? '' : $this->element(\n                'genericElements/accordion_scaffold', [\n                    'children' => [\n                        [\n                            'body' => $metaTemplateString,\n                            'title' => 'Meta fields',\n                        ]\n                    ],\n                    'class' => 'mb-2'\n                ]\n            ),\n            $this->element('genericElements/Form/submitButton', $submitButtonData),\n            $formEnd,\n            '<br /><br />',\n            empty($ajax) ? '</div>' : ''\n        );\n    }\n?>\n<script type=\"text/javascript\">\n    $(document).ready(function() {\n        executeStateDependencyChecks();\n        $('.formDropdown').on('change', function() {\n            executeStateDependencyChecks('#' + this.id);\n        })\n    });\n</script>\n"], "fixing_code": ["<?php\n    /*\n     * Generic form builder\n     *\n     * Simply pass a JSON with the following keys set:\n     * - model: The model used to create the form (such as Attribute, Event)\n     * - fields: an array with each element generating an input field\n     *     - field is the actual field name (such as org_id, name, etc) which is required\n     *     - optional fields: default, type, options, placeholder, label - these are passed directly to $this->Form->input(),\n     *     - requirements: boolean, if false is passed the field is skipped\n     * - metafields: fields that are outside of the scope of the form itself\n           - use these to define dynamic form fields, or anything that will feed into the regular fields via JS population\n     * - submit: The submit button itself. By default it will simply submit to the form as defined via the 'model' field\n     */\n    $this->Form->setConfig('errorClass', 'is-invalid');\n    $modelForForm = empty($data['model']) ?\n        h(\\Cake\\Utility\\Inflector::singularize(\\Cake\\Utility\\Inflector::classify($this->request->getParam('controller')))) :\n        h($data['model']);\n    $entity = isset($entity) ? $entity : null;\n    $fieldsString = '';\n    $simpleFieldWhitelist = [\n        'default', 'type', 'placeholder', 'label', 'empty', 'rows', 'div', 'required'\n    ];\n    //$fieldsArrayForPersistence = array();\n    if (empty($data['url'])) {\n        $data['url'] = [\"controller\" => $this->request->getParam('controller'), \"action\" => $this->request->getParam('url')];\n    }\n    $formRandomValue = Cake\\Utility\\Security::randomString(8);\n    $formCreate = $this->Form->create($entity, ['id' => 'form-' . $formRandomValue]);\n    $default_template = [\n        'inputContainer' => '<div class=\"row mb-3\">{{content}}</div>',\n        'inputContainerError' => '<div class=\"row mb-3 has-error\">{{content}}</div>',\n        'label' => '{{text}}',\n        'input' => '<input type=\"{{type}}\" name=\"{{name}}\"{{attrs}} />',\n        'textarea' => '<textarea name=\"{{name}}\" {{attrs}}>{{value}}</textarea>',\n        'select' => '<select name=\"{{name}}\" {{attrs}}>{{content}}</select>',\n        'checkbox' => '<input type=\"checkbox\" name=\"{{name}}\" value=\"{{value}}\"{{attrs}}>',\n        'checkboxFormGroup' => '{{label}}',\n        'formGroup' => '<div class=\"col-sm-2 form-label\" {{attrs}}>{{label}}</div><div class=\"col-sm-10\">{{input}}{{error}}</div>',\n        'nestingLabel' => '{{hidden}}<div class=\"col-sm-2 form-label\">{{text}}</div><div class=\"col-sm-10\">{{input}}</div>',\n        'option' => '<option value=\"{{value}}\"{{attrs}}>{{text}}</option>',\n        'optgroup' => '<optgroup label=\"{{label}}\"{{attrs}}>{{content}}</optgroup>',\n        'select' => '<select name=\"{{name}}\"{{attrs}}>{{content}}</select>',\n        'error' => '<div class=\"error-message invalid-feedback d-block\">{{content}}</div>',\n        'errorList' => '<ul>{{content}}</ul>',\n        'errorItem' => '<li>{{text}}</li>',\n    ];\n    if (!empty($data['fields'])) {\n        foreach ($data['fields'] as $fieldData) {\n            if (!empty($fields)) {\n                if (!in_array($fieldData['field'], $fields)) {\n                    continue;\n                }\n            }\n            $formTemplate = $default_template;\n            if (!empty($fieldData['floating-label'])) {\n                $formTemplate['inputContainer'] = '<div class=\"form-floating input {{type}}{{required}}\">{{content}}</div>';\n                $formTemplate['label'] = '<label{{attrs}}>{{text}}</label>';\n                $formTemplate['formGroup'] = '{{input}}{{label}}';\n                $fieldData['placeholder'] = !empty($fieldData['label']) ? $fieldData['label'] : h($fieldData['field']);\n            }\n            // we reset the template each iteration as individual fields might override the defaults.\n            $this->Form->setConfig($formTemplate);\n            $this->Form->setTemplates($formTemplate);\n            if (isset($fieldData['requirements']) && !$fieldData['requirements']) {\n                continue;\n            }\n            $fieldsString .= $this->element(\n                'genericElements/Form/fieldScaffold', [\n                    'fieldData' => $fieldData,\n                    'form' => $this->Form,\n                    'simpleFieldWhitelist' => $simpleFieldWhitelist\n                ]\n            );\n        }\n    }\n    if (!empty($data['metaTemplates']) && $data['metaTemplates']->count() > 0) {\n        $metaTemplateString = $this->element(\n            'genericElements/Form/metaTemplateScaffold', [\n                'metaTemplatesData' => $data['metaTemplates'],\n                'form' => $this->Form,\n            ]\n        );\n    }\n    $submitButtonData = ['model' => $modelForForm, 'formRandomValue' => $formRandomValue];\n    if (!empty($data['submit'])) {\n        $submitButtonData = array_merge($submitButtonData, $data['submit']);\n    }\n    if (!empty($data['ajaxSubmit'])) {\n        $submitButtonData['ajaxSubmit'] = $ajaxSubmit;\n    }\n    $ajaxFlashMessage = '';\n    if (!empty($ajax)) {\n        $ajaxFlashMessage = sprintf(\n            '<div id=\"flashContainer\"><div id=\"main-view-container\">%s</div></div>',\n            $this->Flash->render()\n        );\n    }\n    $formEnd = $this->Form->end();\n    $actionName = h(\\Cake\\Utility\\Inflector::humanize($this->request->getParam('action')));\n    $modelName = h(\\Cake\\Utility\\Inflector::humanize(\\Cake\\Utility\\Inflector::singularize($this->request->getParam('controller'))));\n    if (!empty($ajax)) {\n        echo $this->element('genericElements/genericModal', [\n            'title' => empty($data['title']) ? sprintf('%s %s', $actionName, $modelName) : h($data['title']),\n            'body' => sprintf(\n                '%s%s%s%s%s%s',\n                empty($data['description']) ? '' : sprintf(\n                    '<div class=\"pb-2 fw-light\">%s</div>',\n                    h($data['description'])\n                ),\n                $ajaxFlashMessage,\n                $formCreate,\n                $fieldsString,\n                empty($metaTemplateString) ? '' : $this->element(\n                    'genericElements/accordion_scaffold', [\n                        'children' => [\n                            [\n                                'body' => $metaTemplateString,\n                                'title' => 'Meta fields'\n                            ]\n                        ]\n                    ]\n                ),\n                $formEnd\n            ),\n            'actionButton' => $this->element('genericElements/Form/submitButton', $submitButtonData),\n            'class' => 'modal-lg'\n        ]);\n    } else if (!empty($raw)) {\n        echo sprintf(\n            '%s%s%s%s%s%s',\n            empty($data['description']) ? '' : sprintf(\n                '<div class=\"pb-2\">%s</div>',\n                h($data['description'])\n            ),\n            $ajaxFlashMessage,\n            $formCreate,\n            $fieldsString,\n            empty($metaTemplateString) ? '' : $this->element(\n                'genericElements/accordion_scaffold', [\n                    'children' => [\n                        [\n                            'body' => $metaTemplateString,\n                            'title' => 'Meta fields'\n                        ]\n                    ]\n                ]\n            ),\n            $formEnd\n        );\n    } else {\n        echo sprintf(\n            '%s<h2 class=\"fw-light\">%s</h2>%s%s%s%s%s%s%s%s%s',\n            empty($ajax) ? '<div class=\"col-8\">' : '',\n            empty($data['title']) ? sprintf('%s %s', $actionName, $modelName) : h($data['title']),\n            $formCreate,\n            $ajaxFlashMessage,\n            empty($data['description']) ? '' : sprintf(\n                '<div class=\"pb-3 fw-light\">%s</div>',\n                h($data['description'])\n            ),\n            sprintf('<div class=\"panel\">%s</div>', $fieldsString),\n            empty($metaTemplateString) ? '' : $this->element(\n                'genericElements/accordion_scaffold', [\n                    'children' => [\n                        [\n                            'body' => $metaTemplateString,\n                            'title' => 'Meta fields',\n                        ]\n                    ],\n                    'class' => 'mb-2'\n                ]\n            ),\n            $this->element('genericElements/Form/submitButton', $submitButtonData),\n            $formEnd,\n            '<br /><br />',\n            empty($ajax) ? '</div>' : ''\n        );\n    }\n?>\n<script type=\"text/javascript\">\n    $(document).ready(function() {\n        executeStateDependencyChecks();\n        $('.formDropdown').on('change', function() {\n            executeStateDependencyChecks('#' + this.id);\n        })\n    });\n</script>\n"], "filenames": ["templates/element/genericElements/Form/genericForm.php"], "buggy_code_start_loc": [109], "buggy_code_end_loc": [161], "fixing_code_start_loc": [109], "fixing_code_end_loc": [161], "type": "CWE-79", "message": "An issue was discovered in Cerebrate through 1.4. genericForm allows reflected XSS in form descriptions via a user-controlled description.", "other": {"cve": {"id": "CVE-2022-25317", "sourceIdentifier": "cve@mitre.org", "published": "2022-02-18T06:15:10.357", "lastModified": "2022-02-25T15:34:12.833", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in Cerebrate through 1.4. genericForm allows reflected XSS in form descriptions via a user-controlled description."}, {"lang": "es", "value": "Se ha detectado un problema en Cerebrate versiones hasta 1.4. genericForm permite reflejar un ataque de tipo XSS en las descripciones de los formularios por medio de una descripci\u00f3n controlada por el usuario"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cerebrate-project:cerebrate:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.4", "matchCriteriaId": "94801AF4-44EE-499D-AD31-99E3EA6C79E2"}]}]}], "references": [{"url": "https://github.com/cerebrate-project/cerebrate/commit/e60d97c214f9ac6df90c87241b3b3554afc06238", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/cerebrate-project/cerebrate/commit/e60d97c214f9ac6df90c87241b3b3554afc06238"}}