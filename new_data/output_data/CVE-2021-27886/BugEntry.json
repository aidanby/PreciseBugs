{"buggy_code": ["const child_process = require( 'child_process' )\n\nexports.Terminal = command => new Promise((resolve, reject) => {\n  child_process.exec(command, {maxBuffer : 1500 * 1024}, function(error, stdout, stderr) {\n    if( !!error ) reject( error )\n    else resolve( stdout || stderr )\n  })\n})"], "fixing_code": ["const child_process = require(\"child_process\");\n\nconst isValidId = (id) => /^[0-9a-zA-Z]+$/.test(id.trim());\nconst isValidString = (id) => /^[a-zA-Z]+$/.test(id.trim());\n\nconst Terminal = (command) =>\n  new Promise((resolve, reject) => {\n    child_process.exec(\n      command,\n      { maxBuffer: 1500 * 1024 },\n      function (error, stdout, stderr) {\n        if (!!error) reject(error);\n        else resolve(stdout || stderr);\n      }\n    );\n  });\n\nexports.safeTerminal = {\n  installModules: async (backendPath) => {\n    await Terminal(`cd ${backendPath} && npm install`);\n  },\n  serve: async (backendPath) => {\n    await Terminal(`cd ${backendPath} && node index.js`);\n  },\n  allContainers: () => Terminal(`docker ps -q -a`),\n  inspectContainer: async (id) => {\n    if (isValidId(id)) {\n      return Terminal(`docker container inspect ${id}`);\n    } else {\n      throw new Error(\"The container id is invalid\");\n    }\n  },\n  generic: async (task, id) => {\n    if (!isValidString(task)) {\n      throw new Error(\"The task command is invalid.\");\n    }\n    if (!isValidId(id)) {\n      throw new Error(\"The container id is invalid\");\n    }\n    return Terminal(`docker container ${task} ${id}`);\n  },\n  logs: async (id) => {\n    if (!isValidId(id)) {\n      throw new Error(\"The container id is invalid\");\n    }\n    return Terminal(`docker container logs ${id} --tail 1500`);\n  },\n  stats: () =>\n    Terminal(\n      `docker container stats --no-stream --format '{\"id\": \"{{.ID}}\", \"cpu_percentage\": \"{{.CPUPerc}}\", \"memory_usage\": \"{{.MemUsage}}\", \"network_io\": \"{{.NetIO}}\"}'`\n    ),\n  prune: (pruneType) => {\n    if (!isValidString(pruneType)) {\n      throw new Error(\"The entity type is not valid\");\n    }\n    return Terminal(`docker ${pruneType} prune -f`);\n  },\n  containerLs: () => Terminal(`docker container ls --format '{{json .}}'`),\n  formattedImages: () =>\n    Terminal(\n      `docker images --format '{\"ID\": \"{{.ID}}\", \"Tag\": \"{{.Tag}}\", \"CreatedSince\": \"{{.CreatedSince}}\", \"Size\": \"{{.Size}}\", \"VirtualSize\": \"{{.VirtualSize}}\", \"Repository\": \"{{.Repository}}\"}'`\n    ),\n  singleImage: (task, id) => {\n    if (!isValidString(task)) {\n      throw new Error(\"The task command is invalid.\");\n    }\n    if (!isValidId(id)) {\n      throw new Error(\"The image id is invalid\");\n    }\n    if (task == \"run\") {\n      return Terminal(`docker ${task} ${id}`);\n    } else {\n      return Terminal(`docker image ${task} ${id}`);\n    }\n  },\n};\n"], "filenames": ["backend/utilities/terminal.js"], "buggy_code_start_loc": [1], "buggy_code_end_loc": [9], "fixing_code_start_loc": [1], "fixing_code_end_loc": [77], "type": "CWE-78", "message": "rakibtg Docker Dashboard before 2021-02-28 allows command injection in backend/utilities/terminal.js via shell metacharacters in the command parameter of an API request. NOTE: this is NOT a Docker, Inc. product.", "other": {"cve": {"id": "CVE-2021-27886", "sourceIdentifier": "cve@mitre.org", "published": "2021-03-02T00:15:18.097", "lastModified": "2022-05-23T15:59:23.547", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "rakibtg Docker Dashboard before 2021-02-28 allows command injection in backend/utilities/terminal.js via shell metacharacters in the command parameter of an API request. NOTE: this is NOT a Docker, Inc. product."}, {"lang": "es", "value": "rakibtg Docker Dashboard antes del 28 de febrero de 2021, permite la inyecci\u00f3n de comandos en el archivo backend/utilities/terminal.js por medio de metacaracteres de shell en el par\u00e1metro del comando de una petici\u00f3n de la API.&#xa0;NOTA: este NO es un producto de Docker, Inc"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:docker_dashboard_project:docker_dashboard:*:*:*:*:*:*:*:*", "versionEndExcluding": "2021-02-28", "matchCriteriaId": "44392BD7-3321-4E6C-AF23-CFE01B6FE298"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/163416/Docker-Dashboard-Remote-Command-Execution.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/rakibtg/docker-web-gui/commit/79cdc41809f2030fce21a1109898bd79e4190661", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/rakibtg/docker-web-gui/issues/23", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.docker.com/legal/trademark-guidelines", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/rakibtg/docker-web-gui/commit/79cdc41809f2030fce21a1109898bd79e4190661"}}