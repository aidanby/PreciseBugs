{"buggy_code": ["<?php\n/*\nWhois.php        PHP classes to conduct whois queries\n\nCopyright (C)1999,2005 easyDNS Technologies Inc. & Mark Jeftovic\n\nMaintained by David Saez\n\nFor the most recent version of this package visit:\n\nhttp://www.phpwhois.org\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n*/\n\n//-------------------------------------------------------------------------\n\nfunction generic_parser_a($rawdata, $translate, $contacts, $main = 'domain', $dateformat = 'dmy')\n{\n    $blocks = generic_parser_a_blocks($rawdata, $translate, $disclaimer);\n\n    if (isset($disclaimer) && is_array($disclaimer))\n        $ret['disclaimer'] = $disclaimer;\n\n    if (empty($blocks) || !is_array($blocks['main'])) {\n        $ret['registered'] = 'no';\n        return $ret;\n    }\n\n    $r = $blocks['main'];\n    $ret['registered'] = 'yes';\n\n    foreach ($contacts as $key => $val) {\n        if (isset($r[$key])) {\n            if (is_array($r[$key]))\n                $blk = $r[$key][count($r[$key]) - 1];\n            else\n                $blk = $r[$key];\n\n            $blk = strtoupper(strtok($blk, ' '));\n            if (isset($blocks[$blk])) $ret[$val] = $blocks[$blk];\n            unset($r[$key]);\n        }\n    }\n\n    if ($main) $ret[$main] = $r;\n\n    format_dates($ret, $dateformat);\n    return $ret;\n}\n\n//-------------------------------------------------------------------------\n\nfunction generic_parser_a_blocks($rawdata, $translate, &$disclaimer)\n{\n    $r = array();\n    $newblock = false;\n    $hasdata = false;\n    $block = array();\n    $blocks = false;\n    $gkey = 'main';\n    $dend = false;\n\n    foreach ($rawdata as $val) {\n        $val = trim($val);\n\n        if ($val != '' && ($val[0] == '%' || $val[0] == '#')) {\n            if (!$dend) $disclaimer[] = trim(substr($val, 1));\n            continue;\n        }\n        if ($val == '') {\n            $newblock = true;\n            continue;\n        }\n        if ($newblock && $hasdata) {\n            $blocks[$gkey] = $block;\n            $block = array();\n            $gkey = '';\n        }\n        $dend = true;\n        $newblock = false;\n        $k = trim(strtok($val, ':'));\n        $v = trim(substr(strstr($val, ':'), 1));\n\n        if ($v == '') continue;\n\n        $hasdata = true;\n\n        if (isset($translate[$k])) {\n            $k = $translate[$k];\n            if ($k == '') continue;\n            if (strstr($k, '.')) {\n                eval(\"\\$block\" . getvarname($k) . \"=\\$v;\");\n                continue;\n            }\n        } else $k = strtolower($k);\n\n        if ($k == 'handle') {\n            $v = strtok($v, ' ');\n            $gkey = strtoupper($v);\n        }\n\n        if (isset($block[$k]) && is_array($block[$k]))\n            $block[$k][] = $v;\n        else\n            if (!isset($block[$k]) || $block[$k] == '')\n                $block[$k] = $v;\n            else {\n                $x = $block[$k];\n                unset($block[$k]);\n                $block[$k][] = $x;\n                $block[$k][] = $v;\n            }\n    }\n\n    if ($hasdata) $blocks[$gkey] = $block;\n\n    return $blocks;\n}\n\n//-------------------------------------------------------------------------\n\nfunction generic_parser_b($rawdata, $items = false, $dateformat = 'mdy', $hasreg = true, $scanall = false)\n{\n    if (!$items)\n        $items = array(\n            'Domain Name:' => 'domain.name',\n            'Domain ID:' => 'domain.handle',\n            'Sponsoring Registrar:' => 'domain.sponsor',\n            'Registrar ID:' => 'domain.sponsor',\n            'Domain Status:' => 'domain.status.',\n            'Status:' => 'domain.status.',\n            'Name Server:' => 'domain.nserver.',\n            'Nameservers:' => 'domain.nserver.',\n            'Maintainer:' => 'domain.referer',\n\n            'Domain Registration Date:' => 'domain.created',\n            'Domain Create Date:' => 'domain.created',\n            'Domain Expiration Date:' => 'domain.expires',\n            'Domain Last Updated Date:' => 'domain.changed',\n            'Creation Date:' => 'domain.created',\n            'Last Modification Date:' => 'domain.changed',\n            'Expiration Date:' => 'domain.expires',\n            'Created On:' => 'domain.created',\n            'Last Updated On:' => 'domain.changed',\n\n            'Registrant ID:' => 'owner.handle',\n            'Registrant Name:' => 'owner.name',\n            'Registrant Organization:' => 'owner.organization',\n            'Registrant Address:' => 'owner.address.street.',\n            'Registrant Address1:' => 'owner.address.street.',\n            'Registrant Address2:' => 'owner.address.street.',\n            'Registrant Street:' => 'owner.address.street.',\n            'Registrant Street1:' => 'owner.address.street.',\n            'Registrant Street2:' => 'owner.address.street.',\n            'Registrant Street3:' => 'owner.address.street.',\n            'Registrant Postal Code:' => 'owner.address.pcode',\n            'Registrant City:' => 'owner.address.city',\n            'Registrant State/Province:' => 'owner.address.state',\n            'Registrant Country:' => 'owner.address.country',\n            'Registrant Country/Economy:' => 'owner.address.country',\n            'Registrant Phone Number:' => 'owner.phone',\n            'Registrant Phone:' => 'owner.phone',\n            'Registrant Facsimile Number:' => 'owner.fax',\n            'Registrant FAX:' => 'owner.fax',\n            'Registrant Email:' => 'owner.email',\n            'Registrant E-mail:' => 'owner.email',\n\n            'Administrative Contact ID:' => 'admin.handle',\n            'Administrative Contact Name:' => 'admin.name',\n            'Administrative Contact Organization:' => 'admin.organization',\n            'Administrative Contact Address:' => 'admin.address.street.',\n            'Administrative Contact Address1:' => 'admin.address.street.',\n            'Administrative Contact Address2:' => 'admin.address.street.',\n            'Administrative Contact Postal Code:' => 'admin.address.pcode',\n            'Administrative Contact City:' => 'admin.address.city',\n            'Administrative Contact State/Province:' => 'admin.address.state',\n            'Administrative Contact Country:' => 'admin.address.country',\n            'Administrative Contact Phone Number:' => 'admin.phone',\n            'Administrative Contact Email:' => 'admin.email',\n            'Administrative Contact Facsimile Number:' => 'admin.fax',\n            'Administrative Contact Tel:' => 'admin.phone',\n            'Administrative Contact Fax:' => 'admin.fax',\n            'Administrative ID:' => 'admin.handle',\n            'Administrative Name:' => 'admin.name',\n            'Administrative Organization:' => 'admin.organization',\n            'Administrative Address:' => 'admin.address.street.',\n            'Administrative Address1:' => 'admin.address.street.',\n            'Administrative Address2:' => 'admin.address.street.',\n            'Administrative Postal Code:' => 'admin.address.pcode',\n            'Administrative City:' => 'admin.address.city',\n            'Administrative State/Province:' => 'admin.address.state',\n            'Administrative Country/Economy:' => 'admin.address.country',\n            'Administrative Phone:' => 'admin.phone',\n            'Administrative E-mail:' => 'admin.email',\n            'Administrative Facsimile Number:' => 'admin.fax',\n            'Administrative Tel:' => 'admin.phone',\n            'Administrative FAX:' => 'admin.fax',\n            'Admin ID:' => 'admin.handle',\n            'Admin Name:' => 'admin.name',\n            'Admin Organization:' => 'admin.organization',\n            'Admin Street:' => 'admin.address.street.',\n            'Admin Street1:' => 'admin.address.street.',\n            'Admin Street2:' => 'admin.address.street.',\n            'Admin Street3:' => 'admin.address.street.',\n            'Admin Address:' => 'admin.address.street.',\n            'Admin Address2:' => 'admin.address.street.',\n            'Admin Address3:' => 'admin.address.street.',\n            'Admin City:' => 'admin.address.city',\n            'Admin State/Province:' => 'admin.address.state',\n            'Admin Postal Code:' => 'admin.address.pcode',\n            'Admin Country:' => 'admin.address.country',\n            'Admin Country/Economy:' => 'admin.address.country',\n            'Admin Phone:' => 'admin.phone',\n            'Admin FAX:' => 'admin.fax',\n            'Admin Email:' => 'admin.email',\n            'Admin E-mail:' => 'admin.email',\n\n            'Technical Contact ID:' => 'tech.handle',\n            'Technical Contact Name:' => 'tech.name',\n            'Technical Contact Organization:' => 'tech.organization',\n            'Technical Contact Address:' => 'tech.address.street.',\n            'Technical Contact Address1:' => 'tech.address.street.',\n            'Technical Contact Address2:' => 'tech.address.street.',\n            'Technical Contact Postal Code:' => 'tech.address.pcode',\n            'Technical Contact City:' => 'tech.address.city',\n            'Technical Contact State/Province:' => 'tech.address.state',\n            'Technical Contact Country:' => 'tech.address.country',\n            'Technical Contact Phone Number:' => 'tech.phone',\n            'Technical Contact Facsimile Number:' => 'tech.fax',\n            'Technical Contact Phone:' => 'tech.phone',\n            'Technical Contact Fax:' => 'tech.fax',\n            'Technical Contact Email:' => 'tech.email',\n            'Technical ID:' => 'tech.handle',\n            'Technical Name:' => 'tech.name',\n            'Technical Organization:' => 'tech.organization',\n            'Technical Address:' => 'tech.address.street.',\n            'Technical Address1:' => 'tech.address.street.',\n            'Technical Address2:' => 'tech.address.street.',\n            'Technical Postal Code:' => 'tech.address.pcode',\n            'Technical City:' => 'tech.address.city',\n            'Technical State/Province:' => 'tech.address.state',\n            'Technical Country/Economy:' => 'tech.address.country',\n            'Technical Phone Number:' => 'tech.phone',\n            'Technical Facsimile Number:' => 'tech.fax',\n            'Technical Phone:' => 'tech.phone',\n            'Technical Fax:' => 'tech.fax',\n            'Technical FAX:' => 'tech.fax',\n            'Technical E-mail:' => 'tech.email',\n            'Tech ID:' => 'tech.handle',\n            'Tech Name:' => 'tech.name',\n            'Tech Organization:' => 'tech.organization',\n            'Tech Address:' => 'tech.address.street.',\n            'Tech Address2:' => 'tech.address.street.',\n            'Tech Address3:' => 'tech.address.street.',\n            'Tech Street:' => 'tech.address.street.',\n            'Tech Street1:' => 'tech.address.street.',\n            'Tech Street2:' => 'tech.address.street.',\n            'Tech Street3:' => 'tech.address.street.',\n            'Tech City:' => 'tech.address.city',\n            'Tech Postal Code:' => 'tech.address.pcode',\n            'Tech State/Province:' => 'tech.address.state',\n            'Tech Country:' => 'tech.address.country',\n            'Tech Country/Economy:' => 'tech.address.country',\n            'Tech Phone:' => 'tech.phone',\n            'Tech FAX:' => 'tech.fax',\n            'Tech Email:' => 'tech.email',\n            'Tech E-mail:' => 'tech.email',\n\n            'Billing Contact ID:' => 'billing.handle',\n            'Billing Contact Name:' => 'billing.name',\n            'Billing Contact Organization:' => 'billing.organization',\n            'Billing Contact Address1:' => 'billing.address.street.',\n            'Billing Contact Address2:' => 'billing.address.street.',\n            'Billing Contact Postal Code:' => 'billing.address.pcode',\n            'Billing Contact City:' => 'billing.address.city',\n            'Billing Contact State/Province:' => 'billing.address.state',\n            'Billing Contact Country:' => 'billing.address.country',\n            'Billing Contact Phone Number:' => 'billing.phone',\n            'Billing Contact Facsimile Number:' => 'billing.fax',\n            'Billing Contact Email:' => 'billing.email',\n            'Billing ID:' => 'billing.handle',\n            'Billing Name:' => 'billing.name',\n            'Billing Organization:' => 'billing.organization',\n            'Billing Address:' => 'billing.address.street.',\n            'Billing Address1:' => 'billing.address.street.',\n            'Billing Address2:' => 'billing.address.street.',\n            'Billing Address3:' => 'billing.address.street.',\n            'Billing Street:' => 'billing.address.street.',\n            'Billing Street1:' => 'billing.address.street.',\n            'Billing Street2:' => 'billing.address.street.',\n            'Billing Street3:' => 'billing.address.street.',\n            'Billing City:' => 'billing.address.city',\n            'Billing Postal Code:' => 'billing.address.pcode',\n            'Billing State/Province:' => 'billing.address.state',\n            'Billing Country:' => 'billing.address.country',\n            'Billing Country/Economy:' => 'billing.address.country',\n            'Billing Phone:' => 'billing.phone',\n            'Billing Fax:' => 'billing.fax',\n            'Billing FAX:' => 'billing.fax',\n            'Billing Email:' => 'billing.email',\n            'Billing E-mail:' => 'billing.email',\n\n            'Zone ID:' => 'zone.handle',\n            'Zone Organization:' => 'zone.organization',\n            'Zone Name:' => 'zone.name',\n            'Zone Address:' => 'zone.address.street.',\n            'Zone Address 2:' => 'zone.address.street.',\n            'Zone City:' => 'zone.address.city',\n            'Zone State/Province:' => 'zone.address.state',\n            'Zone Postal Code:' => 'zone.address.pcode',\n            'Zone Country:' => 'zone.address.country',\n            'Zone Phone Number:' => 'zone.phone',\n            'Zone Fax Number:' => 'zone.fax',\n            'Zone Email:' => 'zone.email'\n        );\n\n    $r = array();\n    $disok = true;\n\n    foreach ($rawdata as $val) {\n        if (trim($val) != '') {\n            if (($val[0] == '%' || $val[0] == '#') && $disok) {\n                $r['disclaimer'][] = trim(substr($val, 1));\n                $disok = true;\n                continue;\n            }\n\n            $disok = false;\n\n            foreach ($items as $match => $field) {\n                $pos = strpos($val, $match);\n\n                if ($pos !== false) {\n                    if ($field != '') {\n                        $var = '$r' . getvarname($field);\n                        $itm = trim(substr($val, $pos + strlen($match)));\n\n                        if ($itm != '')\n                            eval($var . '=\"' . str_replace('\"', '\\\"', $itm) . '\";');\n                    }\n\n                    if (!$scanall)\n                        break;\n                }\n            }\n        }\n    }\n\n    if (empty($r)) {\n        if ($hasreg) $r['registered'] = 'no';\n    } else {\n        if ($hasreg) $r['registered'] = 'yes';\n\n        $r = format_dates($r, $dateformat);\n    }\n\n    return $r;\n}\n\n//-------------------------------------------------------------------------\n\nfunction getvarname($vdef)\n{\n    $parts = explode('.', $vdef);\n    $var = '';\n\n    foreach ($parts as $mn)\n        if ($mn == '') $var = $var . '[]';\n        else $var = $var . '[\"' . $mn . '\"]';\n\n    return $var;\n}\n\n//-------------------------------------------------------------------------\n\nfunction get_blocks($rawdata, $items, $partial_match = false, $def_block = false)\n{\n\n    $r = array();\n    $endtag = '';\n\n    while (list($key, $val) = each($rawdata)) {\n        $val = trim($val);\n        if ($val == '') continue;\n\n        $var = $found = false;\n\n        foreach ($items as $field => $match) {\n            $pos = strpos($val, $match);\n\n            if ($field != '' && $pos !== false) {\n                if ($val == $match) {\n                    $found = true;\n                    $endtag = '';\n                    $line = $val;\n                    break;\n                }\n\n                $last = substr($val, -1, 1);\n\n                if ($last == ':' || $last == '-' || $last == ']') {\n                    $found = true;\n                    $endtag = $last;\n                    $line = $val;\n                } else {\n                    $var = getvarname(strtok($field, '#'));\n                    $itm = trim(substr($val, $pos + strlen($match)));\n                    eval('$r' . $var . '=$itm;');\n                }\n\n                break;\n            }\n        }\n\n        if (!$found) {\n            if (!$var && $def_block) $r[$def_block][] = $val;\n            continue;\n        }\n\n        $block = array();\n\n        // Block found, get data ...\n\n        while (list($key, $val) = each($rawdata)) {\n            $val = trim($val);\n\n            if ($val == '' || $val == str_repeat($val[0], strlen($val))) continue;\n\n            $last = substr($val, -1, 1);\n            /*\n                    if ($last == $endtag)\n                        {\n                        // Another block found\n                        prev($rawdata);\n                        break;\n                        }\n\n                    if ($endtag == '' || $partial_match)\n                    */\n            if ($endtag == '' || $partial_match || $last == $endtag) {\n                //Check if this line starts another block\n                $et = false;\n\n                foreach ($items as $field => $match) {\n                    $pos = strpos($val, $match);\n\n                    if ($pos !== false && $pos == 0) {\n                        $et = true;\n                        break;\n                    }\n                }\n\n                if ($et) {\n                    // Another block found\n                    prev($rawdata);\n                    break;\n                }\n            }\n\n            $block[] = $val;\n        }\n\n        if (empty($block)) continue;\n\n        foreach ($items as $field => $match) {\n            $pos = strpos($line, $match);\n\n            if ($pos !== false) {\n                $var = getvarname(strtok($field, '#'));\n                if ($var != '[]') eval('$r' . $var . '=$block;');\n            }\n        }\n    }\n\n    return $r;\n}\n\n//-------------------------------------------------------------------------\n\nfunction easy_parser($data_str, $items, $date_format, $translate = false,\n                     $has_org = false, $partial_match = false,\n                     $def_block = false)\n{\n    $r = get_blocks($data_str, $items, $partial_match, $def_block);\n    $r = get_contacts($r, $translate, $has_org);\n    format_dates($r, $date_format);\n    return $r;\n}\n\n//-------------------------------------------------------------------------\n\nfunction get_contacts($array, $extra_items = '', $has_org = false)\n{\n    if (isset($array['billing']))\n        $array['billing'] = get_contact($array['billing'], $extra_items, $has_org);\n\n    if (isset($array['tech']))\n        $array['tech'] = get_contact($array['tech'], $extra_items, $has_org);\n\n    if (isset($array['zone']))\n        $array['zone'] = get_contact($array['zone'], $extra_items, $has_org);\n\n    if (isset($array['admin']))\n        $array['admin'] = get_contact($array['admin'], $extra_items, $has_org);\n\n    if (isset($array['owner']))\n        $array['owner'] = get_contact($array['owner'], $extra_items, $has_org);\n\n    if (isset($array['registrar']))\n        $array['registrar'] = get_contact($array['registrar'], $extra_items, $has_org);\n\n    return $array;\n}\n\n//-------------------------------------------------------------------------\n\nfunction get_contact($array, $extra_items = '', $has_org = false)\n{\n\n    if (!is_array($array))\n        return array();\n\n    $items = array(\n        'fax..:' => 'fax',\n        'fax.' => 'fax',\n        'fax-no:' => 'fax',\n        'fax -' => 'fax',\n        'fax-' => 'fax',\n        'fax::' => 'fax',\n        'fax:' => 'fax',\n        '[fax]' => 'fax',\n        '(fax)' => 'fax',\n        'fax' => 'fax',\n        'tel. ' => 'phone',\n        'tel:' => 'phone',\n        'phone::' => 'phone',\n        'phone:' => 'phone',\n        'phone-' => 'phone',\n        'phone -' => 'phone',\n        'email:' => 'email',\n        'e-mail:' => 'email',\n        'company name:' => 'organization',\n        'organisation:' => 'organization',\n        'first name:' => 'name.first',\n        'last name:' => 'name.last',\n        'street:' => 'address.street',\n        'address:' => 'address.street.',\n        'language:' => '',\n        'location:' => 'address.city',\n        'country:' => 'address.country',\n        'name:' => 'name',\n        'last modified:' => 'changed'\n    );\n\n    if ($extra_items) {\n        foreach ($items as $match => $field)\n            if (!isset($extra_items[$match]))\n                $extra_items[$match] = $field;\n        $items = $extra_items;\n    }\n\n    foreach ($array as $key => $val) {\n        $ok = true;\n\n        while ($ok) {\n            $ok = false;\n\n            foreach ($items as $match => $field) {\n                $pos = strpos(strtolower($val), $match);\n\n                if ($pos === false) continue;\n\n                $itm = trim(substr($val, $pos + strlen($match)));\n\n                if ($field != '' && $itm != '') {\n                    eval('$r' . getvarname($field) . '=$itm;');\n                }\n\n                $val = trim(substr($val, 0, $pos));\n\n                if ($val == '') {\n                    unset($array[$key]);\n                    break;\n                } else {\n                    $array[$key] = $val;\n                    $ok = true;\n                }\n                //break;\n            }\n\n            if (preg_match(\"/([+]*[-\\(\\)\\. x0-9]){7,}/\", $val, $matches)) {\n                $phone = trim(str_replace(' ', '', $matches[0]));\n\n                if (strlen($phone) > 8 && !preg_match('/[0-9]{5}\\-[0-9]{3}/', $phone)) {\n                    if (isset($r['phone'])) {\n                        if (isset($r['fax'])) continue;\n                        $r['fax'] = trim($matches[0]);\n                    } else {\n                        $r['phone'] = trim($matches[0]);\n                    }\n\n                    $val = str_replace($matches[0], '', $val);\n\n                    if ($val == '') {\n                        unset($array[$key]);\n                        continue;\n                    } else {\n                        $array[$key] = $val;\n                        $ok = true;\n                    }\n                }\n            }\n\n            if (preg_match('/([-0-9a-zA-Z._+&\\/=]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6})/', $val, $matches)) {\n                $r['email'] = $matches[0];\n\n                $val = str_replace($matches[0], '', $val);\n                $val = trim(str_replace('()', '', $val));\n\n                if ($val == '') {\n                    unset($array[$key]);\n                    continue;\n                } else {\n                    if (!isset($r['name'])) {\n                        $r['name'] = $val;\n                        unset($array[$key]);\n                    } else\n                        $array[$key] = $val;\n\n                    $ok = true;\n                }\n            }\n        }\n    }\n\n    if (!isset($r['name']) && count($array) > 0) {\n        $r['name'] = array_shift($array);\n    }\n\n    if ($has_org && count($array) > 0) {\n        $r['organization'] = array_shift($array);\n    }\n\n    if (isset($r['name']) && is_array($r['name'])) {\n        $r['name'] = implode($r['name'], ' ');\n    }\n\n    if (!empty($array)) {\n        if (isset($r['address']))\n            $r['address'] = array_merge($r['address'], $array);\n        else\n            $r['address'] = $array;\n    }\n\n    return $r;\n}\n\n//-------------------------------------------------------------------------\n\nfunction format_dates(&$res, $format = 'mdy')\n{\n    if (!is_array($res)) return $res;\n\n    foreach ($res as $key => $val) {\n        if (is_array($val)) {\n            if (!is_numeric($key) && ($key == 'expires' || $key == 'created' || $key == 'changed')) {\n                $d = get_date($val[0], $format);\n                if ($d) $res[$key] = $d;\n            } else {\n                $res[$key] = format_dates($val, $format);\n            }\n        } else {\n            if (!is_numeric($key) && ($key == 'expires' || $key == 'created' || $key == 'changed')) {\n                $d = get_date($val, $format);\n                if ($d) $res[$key] = $d;\n            }\n        }\n    }\n\n    return $res;\n}\n\n//-------------------------------------------------------------------------\n\nfunction get_date($date, $format)\n{\n\n    if (strtotime($date) > 0) {\n        return date('Y-m-d', strtotime($date));\n    }\n\n    $months = array('jan' => 1, 'ene' => 1, 'feb' => 2, 'mar' => 3, 'apr' => 4, 'abr' => 4,\n        'may' => 5, 'jun' => 6, 'jul' => 7, 'aug' => 8, 'ago' => 8, 'sep' => 9,\n        'oct' => 10, 'nov' => 11, 'dec' => 12, 'dic' => 12);\n\n    $parts = explode(' ', $date);\n\n    if (strpos($parts[0], '@') !== false) {\n        unset($parts[0]);\n        $date = implode(' ', $parts);\n    }\n\n    $date = str_replace(',', ' ', trim($date));\n    $date = str_replace('.', ' ', $date);\n    $date = str_replace('-', ' ', $date);\n    $date = str_replace('/', ' ', $date);\n    $date = str_replace(\"\\t\", ' ', $date);\n\n    $parts = explode(' ', $date);\n    $res = array();\n\n    if ((strlen($parts[0]) == 8 || count($parts) == 1) && is_numeric($parts[0])) {\n        $val = $parts[0];\n        for ($p = $i = 0; $i < 3; $i++) {\n            if ($format[$i] != 'Y') {\n                $res[$format[$i]] = substr($val, $p, 2);\n                $p += 2;\n            } else {\n                $res['y'] = substr($val, $p, 4);\n                $p += 4;\n            }\n        }\n    } else {\n        $format = strtolower($format);\n\n        for ($p = $i = 0; $p < count($parts) && $i < strlen($format); $p++) {\n            if (trim($parts[$p]) == '')\n                continue;\n\n            if ($format[$i] != '-') {\n                $res[$format[$i]] = $parts[$p];\n            }\n            $i++;\n        }\n    }\n\n    if (!$res) return $date;\n\n    $ok = false;\n\n    while (!$ok) {\n        $ok = true;\n\n        foreach ($res as $key => $val) {\n            if ($val == '' || $key == '') continue;\n\n            if (!is_numeric($val) && isset($months[substr(strtolower($val), 0, 3)])) {\n                $res[$key] = $res['m'];\n                $res['m'] = $months[substr(strtolower($val), 0, 3)];\n                $ok = false;\n                break;\n            }\n\n            if ($key != 'y' && $key != 'Y' && $val > 1900) {\n                $res[$key] = $res['y'];\n                $res['y'] = $val;\n                $ok = false;\n                break;\n            }\n        }\n    }\n\n    if ($res['m'] > 12) {\n        $v = $res['m'];\n        $res['m'] = $res['d'];\n        $res['d'] = $v;\n    }\n\n    if ($res['y'] < 70)\n        $res['y'] += 2000;\n    else\n        if ($res['y'] <= 99)\n            $res['y'] += 1900;\n\n    return sprintf(\"%.4d-%02d-%02d\", $res['y'], $res['m'], $res['d']);\n}\n"], "fixing_code": ["<?php\n/*\nWhois.php        PHP classes to conduct whois queries\n\nCopyright (C)1999,2005 easyDNS Technologies Inc. & Mark Jeftovic\n\nMaintained by David Saez\n\nFor the most recent version of this package visit:\n\nhttp://www.phpwhois.org\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n*/\n\n//-------------------------------------------------------------------------\n\nfunction generic_parser_a($rawdata, $translate, $contacts, $main = 'domain', $dateformat = 'dmy')\n{\n    $blocks = generic_parser_a_blocks($rawdata, $translate, $disclaimer);\n\n    if (isset($disclaimer) && is_array($disclaimer))\n        $ret['disclaimer'] = $disclaimer;\n\n    if (empty($blocks) || !is_array($blocks['main'])) {\n        $ret['registered'] = 'no';\n        return $ret;\n    }\n\n    $r = $blocks['main'];\n    $ret['registered'] = 'yes';\n\n    foreach ($contacts as $key => $val) {\n        if (isset($r[$key])) {\n            if (is_array($r[$key]))\n                $blk = $r[$key][count($r[$key]) - 1];\n            else\n                $blk = $r[$key];\n\n            $blk = strtoupper(strtok($blk, ' '));\n            if (isset($blocks[$blk])) $ret[$val] = $blocks[$blk];\n            unset($r[$key]);\n        }\n    }\n\n    if ($main) $ret[$main] = $r;\n\n    format_dates($ret, $dateformat);\n    return $ret;\n}\n\n//-------------------------------------------------------------------------\n\nfunction generic_parser_a_blocks($rawdata, $translate, &$disclaimer)\n{\n    $r = array();\n    $newblock = false;\n    $hasdata = false;\n    $block = array();\n    $blocks = false;\n    $gkey = 'main';\n    $dend = false;\n\n    foreach ($rawdata as $val) {\n        $val = trim($val);\n\n        if ($val != '' && ($val[0] == '%' || $val[0] == '#')) {\n            if (!$dend) $disclaimer[] = trim(substr($val, 1));\n            continue;\n        }\n        if ($val == '') {\n            $newblock = true;\n            continue;\n        }\n        if ($newblock && $hasdata) {\n            $blocks[$gkey] = $block;\n            $block = array();\n            $gkey = '';\n        }\n        $dend = true;\n        $newblock = false;\n        $k = trim(strtok($val, ':'));\n        $v = trim(substr(strstr($val, ':'), 1));\n\n        if ($v == '') continue;\n\n        $hasdata = true;\n\n        if (isset($translate[$k])) {\n            $k = $translate[$k];\n            if ($k == '') continue;\n            if (strstr($k, '.')) {\n                ${'block' . getvarname($k)} = $v;\n                continue;\n            }\n        } else {\n            $k = strtolower($k);\n        }\n\n        if ($k == 'handle') {\n            $v = strtok($v, ' ');\n            $gkey = strtoupper($v);\n        }\n\n        if (isset($block[$k]) && is_array($block[$k]))\n            $block[$k][] = $v;\n        else\n            if (!isset($block[$k]) || $block[$k] == '')\n                $block[$k] = $v;\n            else {\n                $x = $block[$k];\n                unset($block[$k]);\n                $block[$k][] = $x;\n                $block[$k][] = $v;\n            }\n    }\n\n    if ($hasdata) $blocks[$gkey] = $block;\n\n    return $blocks;\n}\n\n//-------------------------------------------------------------------------\n\nfunction generic_parser_b($rawdata, $items = false, $dateformat = 'mdy', $hasreg = true, $scanall = false)\n{\n    if (!$items)\n        $items = array(\n            'Domain Name:' => 'domain.name',\n            'Domain ID:' => 'domain.handle',\n            'Sponsoring Registrar:' => 'domain.sponsor',\n            'Registrar ID:' => 'domain.sponsor',\n            'Domain Status:' => 'domain.status.',\n            'Status:' => 'domain.status.',\n            'Name Server:' => 'domain.nserver.',\n            'Nameservers:' => 'domain.nserver.',\n            'Maintainer:' => 'domain.referer',\n\n            'Domain Registration Date:' => 'domain.created',\n            'Domain Create Date:' => 'domain.created',\n            'Domain Expiration Date:' => 'domain.expires',\n            'Domain Last Updated Date:' => 'domain.changed',\n            'Creation Date:' => 'domain.created',\n            'Last Modification Date:' => 'domain.changed',\n            'Expiration Date:' => 'domain.expires',\n            'Created On:' => 'domain.created',\n            'Last Updated On:' => 'domain.changed',\n\n            'Registrant ID:' => 'owner.handle',\n            'Registrant Name:' => 'owner.name',\n            'Registrant Organization:' => 'owner.organization',\n            'Registrant Address:' => 'owner.address.street.',\n            'Registrant Address1:' => 'owner.address.street.',\n            'Registrant Address2:' => 'owner.address.street.',\n            'Registrant Street:' => 'owner.address.street.',\n            'Registrant Street1:' => 'owner.address.street.',\n            'Registrant Street2:' => 'owner.address.street.',\n            'Registrant Street3:' => 'owner.address.street.',\n            'Registrant Postal Code:' => 'owner.address.pcode',\n            'Registrant City:' => 'owner.address.city',\n            'Registrant State/Province:' => 'owner.address.state',\n            'Registrant Country:' => 'owner.address.country',\n            'Registrant Country/Economy:' => 'owner.address.country',\n            'Registrant Phone Number:' => 'owner.phone',\n            'Registrant Phone:' => 'owner.phone',\n            'Registrant Facsimile Number:' => 'owner.fax',\n            'Registrant FAX:' => 'owner.fax',\n            'Registrant Email:' => 'owner.email',\n            'Registrant E-mail:' => 'owner.email',\n\n            'Administrative Contact ID:' => 'admin.handle',\n            'Administrative Contact Name:' => 'admin.name',\n            'Administrative Contact Organization:' => 'admin.organization',\n            'Administrative Contact Address:' => 'admin.address.street.',\n            'Administrative Contact Address1:' => 'admin.address.street.',\n            'Administrative Contact Address2:' => 'admin.address.street.',\n            'Administrative Contact Postal Code:' => 'admin.address.pcode',\n            'Administrative Contact City:' => 'admin.address.city',\n            'Administrative Contact State/Province:' => 'admin.address.state',\n            'Administrative Contact Country:' => 'admin.address.country',\n            'Administrative Contact Phone Number:' => 'admin.phone',\n            'Administrative Contact Email:' => 'admin.email',\n            'Administrative Contact Facsimile Number:' => 'admin.fax',\n            'Administrative Contact Tel:' => 'admin.phone',\n            'Administrative Contact Fax:' => 'admin.fax',\n            'Administrative ID:' => 'admin.handle',\n            'Administrative Name:' => 'admin.name',\n            'Administrative Organization:' => 'admin.organization',\n            'Administrative Address:' => 'admin.address.street.',\n            'Administrative Address1:' => 'admin.address.street.',\n            'Administrative Address2:' => 'admin.address.street.',\n            'Administrative Postal Code:' => 'admin.address.pcode',\n            'Administrative City:' => 'admin.address.city',\n            'Administrative State/Province:' => 'admin.address.state',\n            'Administrative Country/Economy:' => 'admin.address.country',\n            'Administrative Phone:' => 'admin.phone',\n            'Administrative E-mail:' => 'admin.email',\n            'Administrative Facsimile Number:' => 'admin.fax',\n            'Administrative Tel:' => 'admin.phone',\n            'Administrative FAX:' => 'admin.fax',\n            'Admin ID:' => 'admin.handle',\n            'Admin Name:' => 'admin.name',\n            'Admin Organization:' => 'admin.organization',\n            'Admin Street:' => 'admin.address.street.',\n            'Admin Street1:' => 'admin.address.street.',\n            'Admin Street2:' => 'admin.address.street.',\n            'Admin Street3:' => 'admin.address.street.',\n            'Admin Address:' => 'admin.address.street.',\n            'Admin Address2:' => 'admin.address.street.',\n            'Admin Address3:' => 'admin.address.street.',\n            'Admin City:' => 'admin.address.city',\n            'Admin State/Province:' => 'admin.address.state',\n            'Admin Postal Code:' => 'admin.address.pcode',\n            'Admin Country:' => 'admin.address.country',\n            'Admin Country/Economy:' => 'admin.address.country',\n            'Admin Phone:' => 'admin.phone',\n            'Admin FAX:' => 'admin.fax',\n            'Admin Email:' => 'admin.email',\n            'Admin E-mail:' => 'admin.email',\n\n            'Technical Contact ID:' => 'tech.handle',\n            'Technical Contact Name:' => 'tech.name',\n            'Technical Contact Organization:' => 'tech.organization',\n            'Technical Contact Address:' => 'tech.address.street.',\n            'Technical Contact Address1:' => 'tech.address.street.',\n            'Technical Contact Address2:' => 'tech.address.street.',\n            'Technical Contact Postal Code:' => 'tech.address.pcode',\n            'Technical Contact City:' => 'tech.address.city',\n            'Technical Contact State/Province:' => 'tech.address.state',\n            'Technical Contact Country:' => 'tech.address.country',\n            'Technical Contact Phone Number:' => 'tech.phone',\n            'Technical Contact Facsimile Number:' => 'tech.fax',\n            'Technical Contact Phone:' => 'tech.phone',\n            'Technical Contact Fax:' => 'tech.fax',\n            'Technical Contact Email:' => 'tech.email',\n            'Technical ID:' => 'tech.handle',\n            'Technical Name:' => 'tech.name',\n            'Technical Organization:' => 'tech.organization',\n            'Technical Address:' => 'tech.address.street.',\n            'Technical Address1:' => 'tech.address.street.',\n            'Technical Address2:' => 'tech.address.street.',\n            'Technical Postal Code:' => 'tech.address.pcode',\n            'Technical City:' => 'tech.address.city',\n            'Technical State/Province:' => 'tech.address.state',\n            'Technical Country/Economy:' => 'tech.address.country',\n            'Technical Phone Number:' => 'tech.phone',\n            'Technical Facsimile Number:' => 'tech.fax',\n            'Technical Phone:' => 'tech.phone',\n            'Technical Fax:' => 'tech.fax',\n            'Technical FAX:' => 'tech.fax',\n            'Technical E-mail:' => 'tech.email',\n            'Tech ID:' => 'tech.handle',\n            'Tech Name:' => 'tech.name',\n            'Tech Organization:' => 'tech.organization',\n            'Tech Address:' => 'tech.address.street.',\n            'Tech Address2:' => 'tech.address.street.',\n            'Tech Address3:' => 'tech.address.street.',\n            'Tech Street:' => 'tech.address.street.',\n            'Tech Street1:' => 'tech.address.street.',\n            'Tech Street2:' => 'tech.address.street.',\n            'Tech Street3:' => 'tech.address.street.',\n            'Tech City:' => 'tech.address.city',\n            'Tech Postal Code:' => 'tech.address.pcode',\n            'Tech State/Province:' => 'tech.address.state',\n            'Tech Country:' => 'tech.address.country',\n            'Tech Country/Economy:' => 'tech.address.country',\n            'Tech Phone:' => 'tech.phone',\n            'Tech FAX:' => 'tech.fax',\n            'Tech Email:' => 'tech.email',\n            'Tech E-mail:' => 'tech.email',\n\n            'Billing Contact ID:' => 'billing.handle',\n            'Billing Contact Name:' => 'billing.name',\n            'Billing Contact Organization:' => 'billing.organization',\n            'Billing Contact Address1:' => 'billing.address.street.',\n            'Billing Contact Address2:' => 'billing.address.street.',\n            'Billing Contact Postal Code:' => 'billing.address.pcode',\n            'Billing Contact City:' => 'billing.address.city',\n            'Billing Contact State/Province:' => 'billing.address.state',\n            'Billing Contact Country:' => 'billing.address.country',\n            'Billing Contact Phone Number:' => 'billing.phone',\n            'Billing Contact Facsimile Number:' => 'billing.fax',\n            'Billing Contact Email:' => 'billing.email',\n            'Billing ID:' => 'billing.handle',\n            'Billing Name:' => 'billing.name',\n            'Billing Organization:' => 'billing.organization',\n            'Billing Address:' => 'billing.address.street.',\n            'Billing Address1:' => 'billing.address.street.',\n            'Billing Address2:' => 'billing.address.street.',\n            'Billing Address3:' => 'billing.address.street.',\n            'Billing Street:' => 'billing.address.street.',\n            'Billing Street1:' => 'billing.address.street.',\n            'Billing Street2:' => 'billing.address.street.',\n            'Billing Street3:' => 'billing.address.street.',\n            'Billing City:' => 'billing.address.city',\n            'Billing Postal Code:' => 'billing.address.pcode',\n            'Billing State/Province:' => 'billing.address.state',\n            'Billing Country:' => 'billing.address.country',\n            'Billing Country/Economy:' => 'billing.address.country',\n            'Billing Phone:' => 'billing.phone',\n            'Billing Fax:' => 'billing.fax',\n            'Billing FAX:' => 'billing.fax',\n            'Billing Email:' => 'billing.email',\n            'Billing E-mail:' => 'billing.email',\n\n            'Zone ID:' => 'zone.handle',\n            'Zone Organization:' => 'zone.organization',\n            'Zone Name:' => 'zone.name',\n            'Zone Address:' => 'zone.address.street.',\n            'Zone Address 2:' => 'zone.address.street.',\n            'Zone City:' => 'zone.address.city',\n            'Zone State/Province:' => 'zone.address.state',\n            'Zone Postal Code:' => 'zone.address.pcode',\n            'Zone Country:' => 'zone.address.country',\n            'Zone Phone Number:' => 'zone.phone',\n            'Zone Fax Number:' => 'zone.fax',\n            'Zone Email:' => 'zone.email'\n        );\n\n    $r = array();\n    $disok = true;\n\n    foreach ($rawdata as $val) {\n        if (trim($val) != '') {\n            if (($val[0] == '%' || $val[0] == '#') && $disok) {\n                $r['disclaimer'][] = trim(substr($val, 1));\n                $disok = true;\n                continue;\n            }\n\n            $disok = false;\n\n            foreach ($items as $match => $field) {\n                $pos = strpos($val, $match);\n\n                if ($pos !== false) {\n                    if ($field != '') {\n                        $itm = trim(substr($val, $pos + strlen($match)));\n\n                        if ($itm != '') {\n                            ${'r' . getvarname($field)} = '=\"' . str_replace('\"', '\\\"', $itm) . '\";';\n                        }\n                    }\n\n                    if (!$scanall) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    if (empty($r)) {\n        if ($hasreg) $r['registered'] = 'no';\n    } else {\n        if ($hasreg) $r['registered'] = 'yes';\n\n        $r = format_dates($r, $dateformat);\n    }\n\n    return $r;\n}\n\n//-------------------------------------------------------------------------\n\nfunction getvarname($vdef)\n{\n    $parts = explode('.', $vdef);\n    $var = '';\n\n    foreach ($parts as $mn)\n        if ($mn == '') $var = $var . '[]';\n        else $var = $var . '[\"' . $mn . '\"]';\n\n    return $var;\n}\n\n//-------------------------------------------------------------------------\n\nfunction get_blocks($rawdata, $items, $partial_match = false, $def_block = false)\n{\n\n    $r = array();\n    $endtag = '';\n\n    while (list($key, $val) = each($rawdata)) {\n        $val = trim($val);\n        if ($val == '') continue;\n\n        $var = $found = false;\n\n        foreach ($items as $field => $match) {\n            $pos = strpos($val, $match);\n\n            if ($field != '' && $pos !== false) {\n                if ($val == $match) {\n                    $found = true;\n                    $endtag = '';\n                    $line = $val;\n                    break;\n                }\n\n                $last = substr($val, -1, 1);\n\n                if ($last == ':' || $last == '-' || $last == ']') {\n                    $found = true;\n                    $endtag = $last;\n                    $line = $val;\n                } else {\n                    $var = getvarname(strtok($field, '#'));\n                    $itm = trim(substr($val, $pos + strlen($match)));\n\n                    ${'r' . $var} = $itm;\n                }\n\n                break;\n            }\n        }\n\n        if (!$found) {\n            if (!$var && $def_block) $r[$def_block][] = $val;\n            continue;\n        }\n\n        $block = array();\n\n        // Block found, get data ...\n\n        while (list($key, $val) = each($rawdata)) {\n            $val = trim($val);\n\n            if ($val == '' || $val == str_repeat($val[0], strlen($val))) continue;\n\n            $last = substr($val, -1, 1);\n            /*\n                    if ($last == $endtag)\n                        {\n                        // Another block found\n                        prev($rawdata);\n                        break;\n                        }\n\n                    if ($endtag == '' || $partial_match)\n                    */\n            if ($endtag == '' || $partial_match || $last == $endtag) {\n                //Check if this line starts another block\n                $et = false;\n\n                foreach ($items as $field => $match) {\n                    $pos = strpos($val, $match);\n\n                    if ($pos !== false && $pos == 0) {\n                        $et = true;\n                        break;\n                    }\n                }\n\n                if ($et) {\n                    // Another block found\n                    prev($rawdata);\n                    break;\n                }\n            }\n\n            $block[] = $val;\n        }\n\n        if (empty($block)) continue;\n\n        foreach ($items as $field => $match) {\n            $pos = strpos($line, $match);\n\n            if ($pos !== false) {\n                $var = getvarname(strtok($field, '#'));\n                if ($var != '[]') {\n                    ${'r' . $var} = $block;\n                }\n            }\n        }\n    }\n\n    return $r;\n}\n\n//-------------------------------------------------------------------------\n\nfunction easy_parser($data_str, $items, $date_format, $translate = false,\n                     $has_org = false, $partial_match = false,\n                     $def_block = false)\n{\n    $r = get_blocks($data_str, $items, $partial_match, $def_block);\n    $r = get_contacts($r, $translate, $has_org);\n    format_dates($r, $date_format);\n    return $r;\n}\n\n//-------------------------------------------------------------------------\n\nfunction get_contacts($array, $extra_items = '', $has_org = false)\n{\n    if (isset($array['billing']))\n        $array['billing'] = get_contact($array['billing'], $extra_items, $has_org);\n\n    if (isset($array['tech']))\n        $array['tech'] = get_contact($array['tech'], $extra_items, $has_org);\n\n    if (isset($array['zone']))\n        $array['zone'] = get_contact($array['zone'], $extra_items, $has_org);\n\n    if (isset($array['admin']))\n        $array['admin'] = get_contact($array['admin'], $extra_items, $has_org);\n\n    if (isset($array['owner']))\n        $array['owner'] = get_contact($array['owner'], $extra_items, $has_org);\n\n    if (isset($array['registrar']))\n        $array['registrar'] = get_contact($array['registrar'], $extra_items, $has_org);\n\n    return $array;\n}\n\n//-------------------------------------------------------------------------\n\nfunction get_contact($array, $extra_items = '', $has_org = false)\n{\n\n    if (!is_array($array))\n        return array();\n\n    $items = array(\n        'fax..:' => 'fax',\n        'fax.' => 'fax',\n        'fax-no:' => 'fax',\n        'fax -' => 'fax',\n        'fax-' => 'fax',\n        'fax::' => 'fax',\n        'fax:' => 'fax',\n        '[fax]' => 'fax',\n        '(fax)' => 'fax',\n        'fax' => 'fax',\n        'tel. ' => 'phone',\n        'tel:' => 'phone',\n        'phone::' => 'phone',\n        'phone:' => 'phone',\n        'phone-' => 'phone',\n        'phone -' => 'phone',\n        'email:' => 'email',\n        'e-mail:' => 'email',\n        'company name:' => 'organization',\n        'organisation:' => 'organization',\n        'first name:' => 'name.first',\n        'last name:' => 'name.last',\n        'street:' => 'address.street',\n        'address:' => 'address.street.',\n        'language:' => '',\n        'location:' => 'address.city',\n        'country:' => 'address.country',\n        'name:' => 'name',\n        'last modified:' => 'changed'\n    );\n\n    if ($extra_items) {\n        foreach ($items as $match => $field)\n            if (!isset($extra_items[$match]))\n                $extra_items[$match] = $field;\n        $items = $extra_items;\n    }\n\n    foreach ($array as $key => $val) {\n        $ok = true;\n\n        while ($ok) {\n            $ok = false;\n\n            foreach ($items as $match => $field) {\n                $pos = strpos(strtolower($val), $match);\n\n                if ($pos === false) continue;\n\n                $itm = trim(substr($val, $pos + strlen($match)));\n\n                if ($field != '' && $itm != '') {\n                    ${'r' . getvarname($field)} = $itm;\n                }\n\n                $val = trim(substr($val, 0, $pos));\n\n                if ($val == '') {\n                    unset($array[$key]);\n                    break;\n                } else {\n                    $array[$key] = $val;\n                    $ok = true;\n                }\n                //break;\n            }\n\n            if (preg_match(\"/([+]*[-\\(\\)\\. x0-9]){7,}/\", $val, $matches)) {\n                $phone = trim(str_replace(' ', '', $matches[0]));\n\n                if (strlen($phone) > 8 && !preg_match('/[0-9]{5}\\-[0-9]{3}/', $phone)) {\n                    if (isset($r['phone'])) {\n                        if (isset($r['fax'])) continue;\n                        $r['fax'] = trim($matches[0]);\n                    } else {\n                        $r['phone'] = trim($matches[0]);\n                    }\n\n                    $val = str_replace($matches[0], '', $val);\n\n                    if ($val == '') {\n                        unset($array[$key]);\n                        continue;\n                    } else {\n                        $array[$key] = $val;\n                        $ok = true;\n                    }\n                }\n            }\n\n            if (preg_match('/([-0-9a-zA-Z._+&\\/=]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6})/', $val, $matches)) {\n                $r['email'] = $matches[0];\n\n                $val = str_replace($matches[0], '', $val);\n                $val = trim(str_replace('()', '', $val));\n\n                if ($val == '') {\n                    unset($array[$key]);\n                    continue;\n                } else {\n                    if (!isset($r['name'])) {\n                        $r['name'] = $val;\n                        unset($array[$key]);\n                    } else\n                        $array[$key] = $val;\n\n                    $ok = true;\n                }\n            }\n        }\n    }\n\n    if (!isset($r['name']) && count($array) > 0) {\n        $r['name'] = array_shift($array);\n    }\n\n    if ($has_org && count($array) > 0) {\n        $r['organization'] = array_shift($array);\n    }\n\n    if (isset($r['name']) && is_array($r['name'])) {\n        $r['name'] = implode($r['name'], ' ');\n    }\n\n    if (!empty($array)) {\n        if (isset($r['address']))\n            $r['address'] = array_merge($r['address'], $array);\n        else\n            $r['address'] = $array;\n    }\n\n    return $r;\n}\n\n//-------------------------------------------------------------------------\n\nfunction format_dates(&$res, $format = 'mdy')\n{\n    if (!is_array($res)) return $res;\n\n    foreach ($res as $key => $val) {\n        if (is_array($val)) {\n            if (!is_numeric($key) && ($key == 'expires' || $key == 'created' || $key == 'changed')) {\n                $d = get_date($val[0], $format);\n                if ($d) $res[$key] = $d;\n            } else {\n                $res[$key] = format_dates($val, $format);\n            }\n        } else {\n            if (!is_numeric($key) && ($key == 'expires' || $key == 'created' || $key == 'changed')) {\n                $d = get_date($val, $format);\n                if ($d) $res[$key] = $d;\n            }\n        }\n    }\n\n    return $res;\n}\n\n//-------------------------------------------------------------------------\n\nfunction get_date($date, $format)\n{\n\n    if (strtotime($date) > 0) {\n        return date('Y-m-d', strtotime($date));\n    }\n\n    $months = array('jan' => 1, 'ene' => 1, 'feb' => 2, 'mar' => 3, 'apr' => 4, 'abr' => 4,\n        'may' => 5, 'jun' => 6, 'jul' => 7, 'aug' => 8, 'ago' => 8, 'sep' => 9,\n        'oct' => 10, 'nov' => 11, 'dec' => 12, 'dic' => 12);\n\n    $parts = explode(' ', $date);\n\n    if (strpos($parts[0], '@') !== false) {\n        unset($parts[0]);\n        $date = implode(' ', $parts);\n    }\n\n    $date = str_replace(',', ' ', trim($date));\n    $date = str_replace('.', ' ', $date);\n    $date = str_replace('-', ' ', $date);\n    $date = str_replace('/', ' ', $date);\n    $date = str_replace(\"\\t\", ' ', $date);\n\n    $parts = explode(' ', $date);\n    $res = array();\n\n    if ((strlen($parts[0]) == 8 || count($parts) == 1) && is_numeric($parts[0])) {\n        $val = $parts[0];\n        for ($p = $i = 0; $i < 3; $i++) {\n            if ($format[$i] != 'Y') {\n                $res[$format[$i]] = substr($val, $p, 2);\n                $p += 2;\n            } else {\n                $res['y'] = substr($val, $p, 4);\n                $p += 4;\n            }\n        }\n    } else {\n        $format = strtolower($format);\n\n        for ($p = $i = 0; $p < count($parts) && $i < strlen($format); $p++) {\n            if (trim($parts[$p]) == '')\n                continue;\n\n            if ($format[$i] != '-') {\n                $res[$format[$i]] = $parts[$p];\n            }\n            $i++;\n        }\n    }\n\n    if (!$res) return $date;\n\n    $ok = false;\n\n    while (!$ok) {\n        $ok = true;\n\n        foreach ($res as $key => $val) {\n            if ($val == '' || $key == '') continue;\n\n            if (!is_numeric($val) && isset($months[substr(strtolower($val), 0, 3)])) {\n                $res[$key] = $res['m'];\n                $res['m'] = $months[substr(strtolower($val), 0, 3)];\n                $ok = false;\n                break;\n            }\n\n            if ($key != 'y' && $key != 'Y' && $val > 1900) {\n                $res[$key] = $res['y'];\n                $res['y'] = $val;\n                $ok = false;\n                break;\n            }\n        }\n    }\n\n    if ($res['m'] > 12) {\n        $v = $res['m'];\n        $res['m'] = $res['d'];\n        $res['d'] = $v;\n    }\n\n    if ($res['y'] < 70)\n        $res['y'] += 2000;\n    else\n        if ($res['y'] <= 99)\n            $res['y'] += 1900;\n\n    return sprintf(\"%.4d-%02d-%02d\", $res['y'], $res['m'], $res['d']);\n}\n"], "filenames": ["src/whois.parser.php"], "buggy_code_start_loc": [105], "buggy_code_end_loc": [590], "fixing_code_start_loc": [105], "fixing_code_end_loc": [596], "type": "CWE-94", "message": "phpWhois allows remote attackers to execute arbitrary code via a crafted whois record.", "other": {"cve": {"id": "CVE-2015-5243", "sourceIdentifier": "secalert@redhat.com", "published": "2018-08-20T21:29:00.417", "lastModified": "2019-06-26T12:48:15.740", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "phpWhois allows remote attackers to execute arbitrary code via a crafted whois record."}, {"lang": "es", "value": "hpWhois permite que los atacantes remotos ejecuten c\u00f3digo arbitrario mediante un registro whois manipulado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpwhois_project:phpwhois:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.2.2", "matchCriteriaId": "84F1A53F-EBC8-4644-B45C-5312B5F512A8"}]}]}], "references": [{"url": "https://blog.nettitude.com/uk/cve-2015-5243-phpwhois-remote-code-execution", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/Gemorroj/phpwhois/commit/91c937e03c876ba1290b6de2a3ad953d2105fdd0", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jsmitty12/phpWhois/blob/master/CHANGELOG.md", "source": "secalert@redhat.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/jsmitty12/phpWhois/issues/19", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/sbaresearch/advisories/tree/public/2018/SBA-ADV-20180425-01_phpWhois_Code_Execution", "source": "secalert@redhat.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/sparc/phpWhois.org/commit/5cc572490c9053d46598ec9348a11e36a5a33a46#diff-f150ae17da7341bf6c2eff928684b3a3", "source": "secalert@redhat.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Gemorroj/phpwhois/commit/91c937e03c876ba1290b6de2a3ad953d2105fdd0"}}