{"buggy_code": ["<?php\n/*******************************************************************************\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n ******************************************************************************/\n\n/*\nPlugin Name: WordPress Editorial Calendar\nDescription: The Editorial Calendar makes it possible to see all your posts and drag and drop them to manage your blog.\nVersion: 2.7\nAuthor: Colin Vernon, Justin Evans, Joachim Kudish, Mary Vogt, and Zack Grossbart\nAuthor URI: http://www.zackgrossbart.com\nPlugin URI: http://stresslimitdesign.com/editorial-calendar-plugin\n*/\n\n\nif ( is_admin() ) {\n    global $edcal;\n    if ( empty($edcal) )\n        $edcal = new EdCal();\n}\n\n\n/*\n * This error code matches CONCURRENCY_ERROR from edcal.js\n */\ndefine( 'EDCAL_CONCURRENCY_ERROR', 4 );\n\n/*\n * This error code matches PERMISSION_ERROR from edcal.js\n */\ndefine( 'EDCAL_PERMISSION_ERROR', 5 );\n\n/*\n * This error code matches NONCE_ERROR from edcal.js\n */\ndefine( 'EDCAL_NONCE_ERROR', 6 );\n\nclass EdCal {\n    \n    protected $supports_custom_types;\n    protected $default_time;\n\n    function __construct() {\n        add_action('wp_ajax_edcal_saveoptions', array(&$this, 'edcal_saveoptions'));\n        add_action('wp_ajax_edcal_changedate', array(&$this, 'edcal_changedate'));\n        add_action('wp_ajax_edcal_savepost', array(&$this, 'edcal_savepost'));\n        add_action('wp_ajax_edcal_changetitle', array(&$this, 'edcal_changetitle'));\n        add_action('admin_menu', array(&$this, 'edcal_list_add_management_page'));\n        add_action('wp_ajax_edcal_posts', array(&$this, 'edcal_posts'));\n        add_action('wp_ajax_edcal_getpost', array(&$this, 'edcal_getpost'));\n        add_action('wp_ajax_edcal_deletepost', array(&$this, 'edcal_deletepost'));\n        add_action(\"init\", array(&$this, 'edcal_load_language'));\n        \n        /*\n         * This boolean variable will be used to check whether this \n         * installation of WordPress supports custom post types.\n         */\n        $this->supports_custom_types = function_exists('get_post_types') && function_exists('get_post_type_object');\n\n        /*\n         * This is the default time that posts get created at, for now \n         * we are using 10am, but this could become an option later.\n         */\n        $this->default_time = get_option(\"edcal_default_time\") != \"\" ? get_option(\"edcal_default_time\") : '10:00';        \n        \n        /*\n         * We use these variables to hold the post dates for the filter when \n         * we do our post query.\n         */\n        //$edcal_startDate;\n        //$edcal_endDate;\n    }\n    \n    function edcal_load_language() {\n        $plugin_dir = basename(dirname(__FILE__));\n        load_plugin_textdomain( 'editorial-calendar', 'wp-content/plugins/' . $plugin_dir . '/languages/', $plugin_dir . '/languages/' );\n    }\n    \n    /*\n     * This function adds our calendar page to the admin UI\n     */\n    function edcal_list_add_management_page() {\n        if (function_exists('add_management_page') ) {\n            $page = add_posts_page( __('Calendar', 'editorial-calendar'), __('Calendar', 'editorial-calendar'), 'edit_posts', 'cal', array(&$this, 'edcal_list_admin'));\n            add_action( \"admin_print_scripts-$page\", array(&$this, 'edcal_scripts'));\n\n            if( $this->supports_custom_types ) {\n\n                /* \n                 * We add one calendar for Posts and then we add a separate calendar for each\n                 * custom post type.  This calendar will have an URL like this:\n                 * /wp-admin/edit.php?post_type=podcasts&page=cal_podcasts\n                 *\n                 * We can then use the post_type parameter to show the posts of just that custom\n                 * type and update the labels for each post type.\n                 */\n                $args = array(\n                    'public'   => true,\n                    '_builtin' => false\n                ); \n                $output = 'names'; // names or objects\n                $operator = 'and'; // 'and' or 'or'\n                $post_types = get_post_types($args,$output,$operator); \n\n                foreach ($post_types as $post_type) {\n                    $show_this_post_type = apply_filters(\"edcal_show_calendar_$post_type\", true);\n                    if ($show_this_post_type) {\n                        $page = add_submenu_page('edit.php?post_type=' . $post_type, __('Calendar', 'editorial-calendar'), __('Calendar', 'editorial-calendar'), 'edit_posts', 'cal_' . $post_type, array(&$this, 'edcal_list_admin'));\n                        add_action( \"admin_print_scripts-$page\", array(&$this, 'edcal_scripts'));\n                    }\n                }    \n            }\n        }\n    }\n    \n    /*\n     * This is a utility function to open a file add it to our\n     * output stream.  We use this to embed JavaScript and CSS\n     * files and cut down on the number of HTTP requests.\n     */\n    function edcal_echoFile($myFile) {\n        $fh = fopen($myFile, 'r');\n        $theData = fread($fh, filesize($myFile));\n        fclose($fh);\n        echo $theData;\n    }\n     \n    /*\n     * This is the function that generates our admin page.  It adds the CSS files and \n     * generates the divs that we need for the JavaScript to work.\n     */\n    function edcal_list_admin() {\n        \n        /*\n         * We want to count the number of times they load the calendar\n         * so we only show the feedback after they have been using it \n         * for a little while.\n         */\n        $edcal_count = get_option(\"edcal_count\");\n        if ($edcal_count == '') {\n            $edcal_count = 0;\n            add_option(\"edcal_count\", $edcal_count, \"\", \"yes\");\n        }\n            \n        if (get_option(\"edcal_do_feedback\") != \"done\") {\n            $edcal_count++;\n            update_option(\"edcal_count\", $edcal_count);\n        }\n        \n        /*\n         * This section of code embeds certain CSS and\n         * JavaScript files into the HTML.  This has the \n         * advantage of fewer HTTP requests, but the \n         * disadvantage that the browser can't cache the\n         * results.  We only do this for files that will\n         * be used on this page and nowhere else.\n         */\n         \n        echo '<!-- This is the styles from time picker.css -->';\n        echo '<style type=\"text/css\">';\n        $this->edcal_echoFile(dirname( __FILE__ ) . \"/lib/timePicker.css\");\n        echo '</style>';\n        \n        echo '<!-- This is the styles from humanmsg.css -->';\n        echo '<style type=\"text/css\">';\n        $this->edcal_echoFile(dirname( __FILE__ ) . \"/lib/humanmsg.css\");\n        echo '</style>';\n        \n        echo '<!-- This is the styles from edcal.css -->';\n        echo '<style type=\"text/css\">';\n        $this->edcal_echoFile(dirname( __FILE__ ) . \"/edcal.css\");\n        echo '</style>';\n        \n        /*\n         * We want to add the right to left stylesheet if \n         * we're in a right to left language.\n         */\n        if (__('ltr', 'editorial-calendar') == 'rtl') {\n            echo '<!-- This is the styles from edcal_rtl.css -->';\n            echo '<style type=\"text/css\">';\n            $this->edcal_echoFile(dirname( __FILE__ ) . \"/edcal_rtl.css\");\n            echo '</style>';\n        }\n        \n        \n        ?>\n        \n        <!-- This is just a little script so we can pass the AJAX URL and some localized strings -->\n        <script type=\"text/javascript\">\n            jQuery(document).ready(function(){\n                edcal.plugin_url = '<?php echo(plugins_url(\"/\", __FILE__ )); ?>';\n                edcal.wp_nonce = '<?php echo wp_create_nonce(\"edit-calendar\"); ?>';\n                <?php \n                    if (get_option(\"edcal_weeks_pref\") != \"\") {\n                ?>\n                    edcal.weeksPref = <?php echo(get_option(\"edcal_weeks_pref\")); ?>;\n                <?php\n                    }\n                ?>\n                \n                <?php \n                    if (get_option(\"edcal_author_pref\") != \"\") {\n                ?>\n                    edcal.authorPref = <?php echo(get_option(\"edcal_author_pref\")); ?>;\n                <?php\n                    }\n                ?>\n                \n                <?php \n                    if (get_option(\"edcal_time_pref\") != \"\") {\n                ?>\n                    edcal.timePref = <?php echo(get_option(\"edcal_time_pref\")); ?>;\n                <?php\n                    }\n                ?>\n                \n                <?php \n                    if (get_option(\"edcal_status_pref\") != \"\") {\n                ?>\n                    edcal.statusPref = <?php echo(get_option(\"edcal_status_pref\")); ?>;\n                <?php\n                    }\n                ?>\n                \n                <?php \n                    if (get_option(\"edcal_do_feedback\") != \"done\") {\n                ?>\n                    edcal.doFeedbackPref = true;\n                    edcal.visitCount = <?php echo(get_option(\"edcal_count\")); ?>;\n                <?php\n                    }\n                ?>\n    \n                <?php $this->edcal_getLastPost(); ?>\n                \n                edcal.startOfWeek = <?php echo(get_option(\"start_of_week\")); ?>;\n                edcal.timeFormat = \"<?php echo(get_option(\"time_format\")); ?>\";\n                edcal.previewDateFormat = \"MMMM d\";\n                edcal.defaultTime = \"<?php echo $this->default_time; ?>\";\n    \n                /*\n                 * We want to show the day of the first day of the week to match the user's \n                 * country code.  The problem is that we can't just use the WordPress locale.\n                 * If the locale was fr-FR so we started the week on Monday it would still \n                 * say Sunday was the first day if we didn't have a proper language bundle\n                 * for French.  Therefore we must depend on the language bundle writers to\n                 * specify the locale for the language they are adding.\n                 * \n                 */\n                edcal.locale = '<?php echo(__('en-US', 'editorial-calendar')) ?>';\n                \n                /*\n                 * These strings are all localized values.  The WordPress localization mechanism \n                 * doesn't really extend to JavaScript so we localize the strings in PHP and then\n                 * pass the values to JavaScript.\n                 */\n                \n                edcal.str_by = <?php echo($this->edcal_json_encode(__('%1$s by %2$s', 'editorial-calendar'))) ?>;\n                \n                edcal.str_addPostLink = <?php echo($this->edcal_json_encode(__('New Post', 'editorial-calendar'))) ?>;\n                edcal.str_addDraftLink = <?php echo($this->edcal_json_encode(__('New Draft', 'editorial-calendar'))) ?>;\n                edcal.ltr = <?php echo($this->edcal_json_encode(__('ltr', 'editorial-calendar'))) ?>;\n                \n                edcal.str_draft = <?php echo($this->edcal_json_encode(__(' [DRAFT]', 'editorial-calendar'))) ?>;\n                edcal.str_pending = <?php echo($this->edcal_json_encode(__(' [PENDING]', 'editorial-calendar'))) ?>;\n                edcal.str_sticky = <?php echo($this->edcal_json_encode(__(' [STICKY]', 'editorial-calendar'))) ?>;\n                edcal.str_draft_sticky = <?php echo($this->edcal_json_encode(__(' [DRAFT, STICKY]', 'editorial-calendar'))) ?>;\n                edcal.str_pending_sticky = <?php echo($this->edcal_json_encode(__(' [PENDING, STICKY]', 'editorial-calendar'))) ?>;\n                edcal.str_edit = <?php echo($this->edcal_json_encode(__('Edit', 'editorial-calendar'))) ?>;\n                edcal.str_quick_edit = <?php echo($this->edcal_json_encode(__('Quick Edit', 'editorial-calendar'))) ?>;\n                edcal.str_del = <?php echo($this->edcal_json_encode(__('Delete', 'editorial-calendar'))) ?>;\n                edcal.str_view = <?php echo($this->edcal_json_encode(__('View', 'editorial-calendar'))) ?>;\n                edcal.str_republish = <?php echo($this->edcal_json_encode(__('Edit', 'editorial-calendar'))) ?>;\n                edcal.str_status = <?php echo($this->edcal_json_encode(__('Status:', 'editorial-calendar'))) ?>;\n                edcal.str_cancel = <?php echo($this->edcal_json_encode(__('Cancel', 'editorial-calendar'))) ?>;\n                edcal.str_posttitle = <?php echo($this->edcal_json_encode(__('Title', 'editorial-calendar'))) ?>;\n                edcal.str_postcontent = <?php echo($this->edcal_json_encode(__('Content', 'editorial-calendar'))) ?>;\n                edcal.str_newpost = <?php echo($this->edcal_json_encode(__('Add a new post on %s', 'editorial-calendar'))) ?>;\n                edcal.str_newdraft = <?php echo($this->edcal_json_encode(__('Add a new draft', 'editorial-calendar'))) ?>;\n                edcal.str_newpost_title = <?php echo($this->edcal_json_encode(sprintf(__('New %s - ', 'editorial-calendar'), $this->edcal_get_posttype_singlename()))) ?> ;\n                edcal.str_newdraft_title = <?php echo($this->edcal_json_encode(__('New Draft', 'editorial-calendar'))) ?>;\n                edcal.str_update = <?php echo($this->edcal_json_encode(__('Update', 'editorial-calendar'))) ?>;\n                edcal.str_publish = <?php echo($this->edcal_json_encode(__('Schedule', 'editorial-calendar'))) ?>;\n                edcal.str_review = <?php echo($this->edcal_json_encode(__('Submit for Review', 'editorial-calendar'))) ?>;\n                edcal.str_save = <?php echo($this->edcal_json_encode(__('Save', 'editorial-calendar'))) ?>;\n                edcal.str_edit_post_title = <?php echo($this->edcal_json_encode(__('Edit %1$s - %2$s', 'editorial-calendar'))) ?>;\n                edcal.str_scheduled = <?php echo($this->edcal_json_encode(__('Scheduled', 'editorial-calendar'))) ?>;\n                \n                edcal.str_del_msg1 = <?php echo($this->edcal_json_encode(__('You are about to delete the post \"', 'editorial-calendar'))) ?>;\n                edcal.str_del_msg2 = <?php echo($this->edcal_json_encode(__('\". Press Cancel to stop, OK to delete.', 'editorial-calendar'))) ?>;\n                \n                edcal.concurrency_error = <?php echo($this->edcal_json_encode(__('Looks like someone else already moved this post.', 'editorial-calendar'))) ?>;\n                edcal.permission_error = <?php echo($this->edcal_json_encode(__('You do not have permission to edit posts.', 'editorial-calendar'))) ?>;\n                edcal.checksum_error = <?php echo($this->edcal_json_encode(__('Invalid checksum for post. This is commonly a cross-site scripting error.', 'editorial-calendar'))) ?>;\n                edcal.general_error = <?php echo($this->edcal_json_encode(__('There was an error contacting your blog.', 'editorial-calendar'))) ?>;\n                \n                edcal.str_screenoptions = <?php echo($this->edcal_json_encode(__('Screen Options', 'editorial-calendar'))) ?>;\n                edcal.str_optionscolors = <?php echo($this->edcal_json_encode(__('Colors', 'editorial-calendar'))) ?>;\n                edcal.str_optionsdraftcolor = <?php echo($this->edcal_json_encode(__('Drafts: ', 'editorial-calendar'))) ?>;\n                edcal.str_apply = <?php echo($this->edcal_json_encode(__('Apply', 'editorial-calendar'))) ?>;\n                edcal.str_show_title = <?php echo($this->edcal_json_encode(__('Show on screen', 'editorial-calendar'))) ?>;\n                edcal.str_opt_weeks = <?php echo($this->edcal_json_encode(__(' weeks at a time', 'editorial-calendar'))) ?>;\n                edcal.str_show_opts = <?php echo($this->edcal_json_encode(__('Show in Calendar Cell', 'editorial-calendar'))) ?>;\n                edcal.str_opt_author = <?php echo($this->edcal_json_encode(__('Author', 'editorial-calendar'))) ?>;\n                edcal.str_opt_status = <?php echo($this->edcal_json_encode(__('Status', 'editorial-calendar'))) ?>;\n                edcal.str_opt_time = <?php echo($this->edcal_json_encode(__('Time of day', 'editorial-calendar'))) ?>;\n                edcal.str_fatal_error = <?php echo($this->edcal_json_encode(__('An error occurred while loading the calendar: ', 'editorial-calendar'))) ?>;\n                \n                edcal.str_weekserror = <?php echo($this->edcal_json_encode(__('The calendar can only show between 1 and 8 weeks at a time.', 'editorial-calendar'))) ?>;\n                edcal.str_weekstt = <?php echo($this->edcal_json_encode(__('Select the number of weeks for the calendar to show.', 'editorial-calendar'))) ?>;\n\n                edcal.str_showdrafts = <?php echo($this->edcal_json_encode(__('Show Unscheduled Drafts'))) ?>;\n                edcal.str_hidedrafts = <?php echo($this->edcal_json_encode(__('Hide Unscheduled Drafts'))) ?>;\n    \n                edcal.str_feedbackmsg = <?php echo($this->edcal_json_encode(__('<div id=\"feedbacksection\">' . \n                 '<h2>Help us Make the Editorial Calendar Better</h2>' .\n                 'We are always trying to improve the Editorial Calendar and you can help. May we collect some data about your blog and browser settings to help us improve this plugin?  We\\'ll only do it once and your blog will show up on our <a target=\"_blank\" href=\"http://www.zackgrossbart.com/edcal/mint/\">Editorial Calendar Statistics page</a>.<br /><br />' . \n                 '<button class=\"button-secondary\" onclick=\"edcal.doFeedback();\">Collect Data</button> ' . \n                 '<a href=\"#\" id=\"nofeedbacklink\" onclick=\"edcal.noFeedback(); return false;\">No thank you</a></div>', 'editorial-calendar'))) ?>;\n    \n                edcal.str_feedbackdone = <?php echo($this->edcal_json_encode(__('<h2>We\\'re done</h2>We\\'ve finished collecting data.  Thank you for helping us make the calendar better.', 'editorial-calendar'))) ?>;\n            });\n        </script>\n        \n        <?php\n        /*\n         * There are a few images we want to reference where we need the full path to the image\n         * since we don't want to make assumptions about the plugin file structure.  We need to \n         * set those here since we need PHP to get the full path.  \n         */\n        ?>\n    \n        <style type=\"text/css\">\n            .loadingclass > .postlink, .loadingclass:hover > .postlink, .tiploading {\n                background-image: url('<?php echo(admin_url(\"images/loading.gif\", __FILE__ )); ?>');\n            }\n    \n            #loading {\n                background-image: url('<?php echo(admin_url(\"images/loading.gif\", __FILE__ )); ?>');\n            }\n    \n            #tipclose {\n                background-image: url('<?php echo(plugins_url(\"images/tip_close.png\", __FILE__ )); ?>');\n            }\n    \n        </style>\n        \n        <?php\n        echo '<!-- This is the code from edcal.js -->';\n        echo '<script type=\"text/javascript\">';\n        if (isset($_GET['debug'])) {\n            $this->edcal_echoFile(dirname( __FILE__ ) . \"/edcal.js\");\n        } else {\n            $this->edcal_echoFile(dirname( __FILE__ ) . \"/edcal.min.js\");\n        }\n        echo '</script>';\n        \n        ?>\n        \n        <div class=\"wrap\">\n            <div class=\"icon32\" id=\"icon-edit\"><br/></div>\n            <h2 id=\"edcal_main_title\"><?php echo sprintf( __('%1$s Calendar', 'editorial-calendar'), $this->edcal_get_posttype_multiplename() ) ?></h2>\n            \n            <div id=\"loadingcont\">\n                <div id=\"loading\"> </div>\n            </div>\n            \n            <div id=\"topbar\" class=\"tablenav clearfix\">\n                <div id=\"topleft\" class=\"tablenav-pages alignleft\">\n                    <h3>\n                        <a href=\"#\" title=\"<?php echo(__('Jump back', 'editorial-calendar')) ?>\" class=\"prev page-numbers\" id=\"prevmonth\">&lsaquo;</a>\n                        <span id=\"currentRange\"></span>\n                        <a href=\"#\" title=\"<?php echo(__('Skip ahead', 'editorial-calendar')) ?>\" class=\"next page-numbers\" id=\"nextmonth\">&rsaquo;</a>\n                        <a class=\"next page-numbers\" title=\"<?php echo(__('Scroll the calendar and make the last post visible', 'editorial-calendar')) ?>\" id=\"moveToLast\">&raquo;</a>\n\n                        <a class=\"next page-numbers\" title=\"<?php echo(__('Scroll the calendar and make the today visible', 'editorial-calendar')) ?>\" id=\"moveToToday\"><?php echo(__('Show Today', 'editorial-calendar')) ?></a>\n                        \n                        \n                    </h3>\n                </div>\n\n                <div id=\"topright\" class=\"tablenav-pages alignright\">\n                    <a class=\"next page-numbers\" title=\"<?php echo(__('Show unscheduled posts', 'editorial-calendar')) ?>\" id=\"showdraftsdrawer\"><?php echo(__('Show Unscheduled Drafts', 'editorial-calendar')) ?></a>\n                </div>\n            </div>\n            \n            <div id=\"draftsdrawer_cont\">\n                <div id=\"draftsdrawer\">\n                    <div class=\"draftsdrawerheadcont\" title=\"<?php echo(__('Unscheduled draft posts', 'editorial-calendar')) ?>\"><div class=\"dayhead\"><?php echo(__('Unscheduled', 'editorial-calendar')) ?></div></div>\n                    <div class=\"day\" id=\"00000000\">\n                        <div id=\"draftsdrawer_loading\"></div>\n                        <div id=\"unscheduled\" class=\"dayobj\"></div>\n                    </div>\n                </div>\n            </div>\n            \n            <div id=\"cal_cont\">\n                <div id=\"edcal_scrollable\" class=\"edcal_scrollable vertical\">\n                    <div id=\"cal\"></div>\n                </div>\n            </div>\n\n            <?php $this->edcal_edit_popup(); ?>\n            \n        </div><?php // end .wrap ?>\n    \n        <?php\n    }\n    \n    /*\n     * Generate the DOM elements for the quick edit popup from\n     * within the calendar.\n     */\n    function edcal_edit_popup() {\n    \n    ?>\n          <div id=\"edcal_quickedit\" style=\"display:none;\">\n            <div id=\"tooltiphead\">\n              <h3 id=\"tooltiptitle\"><?php _e('Edit Post', 'editorial-calendar') ?></h3>\n              <a href=\"#\" id=\"tipclose\" onclick=\"edcal.hideForm(); return false;\" title=\"close\"> </a>\n            </div>\n    \n                <div class=\"edcal_quickedit inline-edit-row\">\n    \n                    <fieldset>\n    \n                    <label>\n                        <span class=\"title\"><?php _e('Title', 'editorial-calendar') ?></span>\n                        <span class=\"input-text-wrap\"><input type=\"text\" class=\"ptitle\" id=\"edcal-title-new-field\" name=\"title\" /></span>\n                    </label>\n    \n                    <label>\n                        <span class=\"title\"><?php _e('Content', 'editorial-calendar') ?></span>\n                        <span class=\"input-text-wrap\"><textarea cols=\"15\" rows=\"7\" id=\"content\" name=\"content\"></textarea></span>\n                    </label>\n    \n                    <div id=\"timeEditControls\">\n                        <label>\n                            <span class=\"title\"><?php _e('Time', 'editorial-calendar') ?></span>\n                            <span class=\"input-text-wrap\"><input type=\"text\" class=\"ptitle\" id=\"edcal-time\" name=\"time\" value=\"\" size=\"8\" maxlength=\"8\" autocomplete=\"off\" /></span>\n                        </label>\n                            \n                        <label>\n                            <span class=\"title\"><?php _e('Status', 'editorial-calendar') ?></span>\n                            <span class=\"input-text-wrap\">\n                                <select name=\"status\" id=\"edcal-status\">\n                                    <option value=\"draft\"><?php _e('Draft', 'editorial-calendar') ?></option>\n                                    <option value=\"pending\"><?php _e('Pending Review', 'editorial-calendar') ?></option>\n                                    <?php if ( current_user_can('publish_posts') ) {?>\n                                        <option id=\"futureoption\" value=\"future\"><?php _e('Scheduled', 'editorial-calendar') ?></option>\n                                    <?php } ?>\n                                </select>\n                            </span>\n                        </label>\n                    </div>\n    \n    <?php /*                <label>\n                        <span class=\"title\"><?php _e('Author', 'editorial-calendar') ?></span>\n                        <span id=\"edcal-author-p\"><!-- Placeholder for the author's name, added dynamically --></span>\n                    </label>\n    */ ?>\n                    </fieldset>\n    \n                    <p class=\"submit inline-edit-save\" id=\"edit-slug-buttons\">\n                        <a class=\"button-primary disabled\" id=\"newPostScheduleButton\" href=\"#\"><?php _e('Schedule', 'editorial-calendar') ?></a>\n                        <a href=\"#\" onclick=\"edcal.hideForm(); return false;\" class=\"button-secondary cancel\"><?php _e('Cancel', 'editorial-calendar') ?></a>\n                    </p>\n    \n                    <input type=\"hidden\" id=\"edcal-date\" name=\"date\" value=\"\" />\n                    <input type=\"hidden\" id=\"edcal-id\" name=\"id\" value=\"\" />\n    \n                </div><?php // end .tooltip ?>\n            </div><?php // end #tooltip \n    }\n    \n    /*\n     * When we get a set of posts to populate the calendar we don't want\n     * to get all of the posts.  This filter allows us to specify the dates\n     * we want. We also exclude posts that have not been set to a specific date.\n     */\n    function edcal_filter_where($where = '') {\n        global $edcal_startDate, $edcal_endDate;\n        if ($edcal_startDate == '00000000') {\n            $where .= \" AND post_date_gmt LIKE '0000%'\";\n        } else {\n            $where .= \" AND post_date >= '\" . $edcal_startDate . \"' AND post_date < '\" . $edcal_endDate . \"' AND post_date_gmt NOT LIKE '0000%'\";\n        }\n        return $where;\n    }\n    \n    /*\n     * This function adds all of the JavaScript files we need.\n     *\n     */\n    function edcal_scripts() {\n        /*\n         * To get proper localization for dates we need to include the correct JavaScript file for the current\n         * locale.  We can do this based on the locale in the localized bundle to make sure the date locale matches\n         * the locale for the other strings.\n         */\n        wp_enqueue_script('jquery');\n        wp_enqueue_script('jquery-ui-draggable');\n        wp_enqueue_script('jquery-ui-droppable');\n    \n        //wp_enqueue_script(\"date-extras\", plugins_url(\"lib/date.extras.js\", __FILE__ ), array( 'jquery' ));\n    \n        wp_enqueue_script(\"edcal-date\", plugins_url(\"lib/languages/date-\".__('en-US', 'editorial-calendar').\".js\", __FILE__ ));\n        wp_enqueue_script(\"edcal-lib\", plugins_url(\"lib/edcallib.min.js\", __FILE__ ), array( 'jquery' ));\n    \n        if (isset($_GET['qunit'])) {\n            wp_enqueue_script(\"qunit\", plugins_url(\"lib/qunit.js\", __FILE__ ), array( 'jquery' ));\n            wp_enqueue_script(\"edcal-test\", plugins_url(\"edcal_test.js\", __FILE__ ), array( 'jquery' ));\n        }\n        \n        return;\n        \n        /*\n         * If you're using one of the specific libraries you should comment out the two lines\n         * above this comment.\n         */\n        wp_enqueue_script(\"bgiframe\", plugins_url(\"lib/jquery.bgiframe.js\", __FILE__ ), array( 'jquery' ));\n        wp_enqueue_script(\"humanMsg\", plugins_url(\"lib/humanmsg.js\", __FILE__ ), array( 'jquery' ));\n        wp_enqueue_script(\"jquery-timepicker\", plugins_url(\"lib/jquery.timepicker.js\", __FILE__ ), array( 'jquery' ));\n        \n        wp_enqueue_script(\"scrollable\", plugins_url(\"lib/tools.scrollable-1.1.2.js\", __FILE__ ), array( 'jquery' ));\n        wp_enqueue_script(\"mouse-wheel\", plugins_url(\"lib/lib/tools.scrollable.mousewheel-1.0.1.js\", __FILE__ ), array( 'jquery' ));\n    \n        wp_enqueue_script(\"json-parse2\", plugins_url(\"lib/json2.js\", __FILE__ ), array( 'jquery' ));\n    }\n    \n    /*\n     * This is an AJAX call that gets the posts between the from date \n     * and the to date.  \n     */\n    function edcal_posts() {\n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n        \n        global $edcal_startDate, $edcal_endDate;\n        \n        $edcal_startDate = isset($_GET['from']) ? $_GET['from'] : null;\n        $edcal_endDate = isset($_GET['to']) ? $_GET['to'] : null;\n        global $post;\n        $args = array(\n            'posts_per_page' => -1,\n            'post_status' => \"publish&future&draft\",\n            'post_parent' => null // any parent\n        );\n\n        /* \n         * If we're in the specific post type case we need to add\n         * the post type to our query.\n         */\n        $post_type = isset($_GET['post_type'])?$_GET['post_type']:null;\n        if ($post_type) {\n            $args['post_type'] = $post_type;\n        }\n\n        /* \n         * If we're getting the list of posts for the drafts drawer we\n         * want to sort them by the post title.\n         */\n        if ($edcal_startDate == '00000000') {\n            $args['orderby'] = 'title';\n        }\n\n        /* \n         * We add a WHERE clause to filter by calendar date and/or by whether\n         * or not the posts have been scheduled to a specific date:\n         * WHERE `post_date_gmt` = '0000-00-00 00:00:00'\n         */\n        add_filter( 'posts_where', array(&$this, 'edcal_filter_where' ));\n        $myposts = query_posts($args);\n        remove_filter( 'posts_where', array(&$this, 'edcal_filter_where' ));\n\n        ?>[\n        <?php\n        $size = sizeof($myposts);\n        \n        for($i = 0; $i < $size; $i++) {    \n            $post = $myposts[$i];\n            $this->edcal_postJSON($post, $i < $size - 1);\n        }\n        \n        ?> ]\n        <?php\n        \n        die();\n    }\n    \n    /*\n     * This filter specifies a special WHERE clause so we just get the posts we're \n     * interested in for the last post.\n     */\n    function edcal_lastpost_filter_where($where = '') {\n        $where .= \" AND (`post_status` = 'draft' OR `post_status` = 'publish' OR `post_status` = 'future')\";\n        return $where;\n    }\n    \n    /*\n     * Get information about the last post (the one furthest in the future) and make\n     * that information available to the JavaScript code so it can make the last post\n     * button work.\n     */\n    function edcal_getLastPost() {\n        $args = array(\n            'posts_per_page' => 1,\n            'post_parent' => null,\n            'order' => 'DESC'\n        );\n        \n        add_filter( 'posts_where', array(&$this, 'edcal_lastpost_filter_where' ));\n        $myposts = query_posts($args);\n        remove_filter( 'posts_where', array(&$this, 'edcal_lastpost_filter_where' ));\n        \n        if (sizeof($myposts) > 0) {\n            $post = $myposts[0];\n            setup_postdata($post);\n            ?>\n            edcal.lastPostDate = '<?php echo(date('dmY',strtotime($post->post_date))); ?>';\n            edcal.lastPostId = '<?php echo($post->ID); ?>';\n            <?php\n        } else {\n            ?>\n            edcal.lastPostDate = '-1';\n            edcal.lastPostId = '-1';\n            <?php\n        }\n    }\n    \n    /*\n     * This is for an AJAX call that returns a post with the specified ID\n     */\n    function edcal_getpost() {\n        \n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        // If nonce fails, return\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n        \n        $post_id = isset($_GET['postid'])?intval($_GET['postid']):-1;\n        \n        // If a proper post_id wasn't passed, return\n        if(!$post_id) die();\n        \n        $args = array(\n            'post__in' => array($post_id)\n        );\n        \n        /* \n         * If we're in the specific post type case we need to add\n         * the post type to our query.\n         */\n        $post_type = isset($_GET['post_type'])?$_GET['post_type']:null;\n        if ($post_type) {\n            $args['post_type'] = $post_type;\n        }\n        \n        $post = query_posts($args);\n        \n        // get_post and setup_postdata don't get along, so we're doing a mini-loop\n        if(have_posts()) :\n            while(have_posts()) : the_post();\n                ?>\n                {\n                \"post\" :\n                    <?php\n                    $this->edcal_postJSON($post[0], false, true);\n                    ?>\n                }\n                <?php\n            endwhile;\n        endif;\n        die();\n    }\n    \n    /*\n     * Wrap php's json_encode() for a WP-specific apostrophe bug\n     */\n    function edcal_json_encode($string) {\n        /*\n         * WordPress escapes apostrophe's when they show up in post titles as &#039;\n         * This is the HTML ASCII code for a straight apostrophe.  This works well\n         * with Firefox, but IE complains with a very unhelpful error message.  We\n         * can replace them with a right curly apostrophe since that works in IE\n         * and Firefox. It is also a little nicer typographically.  \n         */\n        return json_encode(str_replace(\"&#039;\", \"&#146;\", $string));\n    }\n    \n    /* \n     * This helper functions gets the plural name of the post\n     * type specified by the post_type parameter.\n     */\n    function edcal_get_posttype_multiplename() {\n    \n        $post_type = isset($_GET['post_type'])?$_GET['post_type']:null;\n        if (!$post_type) {\n            return __('Posts ', 'editorial-calendar');\n        }\n    \n        $postTypeObj = get_post_type_object($post_type);\n        return $postTypeObj->labels->name;\n    }\n    \n    /* \n     * This helper functions gets the singular name of the post\n     * type specified by the post_type parameter.\n     */\n    \n    function edcal_get_posttype_singlename() {\n    \n        $post_type = isset($_GET['post_type'])?$_GET['post_type']:null;\n        if (!$post_type) {\n            return __('Post ', 'editorial-calendar');\n        }\n    \n        $postTypeObj = get_post_type_object($post_type);\n        return $postTypeObj->labels->singular_name;\n    }\n    \n    /*\n     * This function sets up the post data and prints out the values we\n     * care about in a JSON data structure.  This prints out just the\n     * value part. If $fullPost is set to true, post_content is also returned.\n     */\n    function edcal_postJSON($post, $addComma = true, $fullPost = false) {\n        $timeFormat = get_option(\"time_format\");\n        if ($timeFormat == \"g:i a\") {\n            $timeFormat = \"ga\";\n        } else if ($timeFormat == \"g:i A\") {\n            $timeFormat = \"gA\";\n        } else if ($timeFormat == \"H:i\") {\n            $timeFormat = \"H\";\n        }\n        \n        setup_postdata($post);\n        \n        if (get_post_status() == 'auto-draft' || get_post_status() == 'inherit' || get_post_status() == 'trash' ) {\n            /*\n             * WordPress 3 added a new post status of auto-draft so\n             * we want to hide them from the calendar. \n             * We also want to hide posts with type 'inherit'\n             */\n            return;\n        }\n        \n        /* \n         * We want to return the type of each post as part of the\n         * JSON data about that post.  Right now this will always\n         * match the post_type parameter for the calendar, but in\n         * the future we might support a mixed post type calendar\n         * and this extra data will become useful.  Right now we\n         * are using this data for the title on the quick edit form.\n         */\n        if( $this->supports_custom_types ) {\n            $postTypeObj = get_post_type_object(get_post_type( $post ));\n            $postTypeTitle = $postTypeObj->labels->singular_name;\n        } else {\n            $postTypeTitle = 'post';\n        }\n\n        $post_date_gmt = date('dmY',strtotime($post->post_date_gmt));\n        if ($post_date_gmt == '01011970') {\n            $post_date_gmt = '00000000';\n        }\n        \n        /*\n         * The date function in PHP isn't consistent in the way it handles\n         * formatting dates that are all zeros.  In that case we can manually\n         * format the all zeros date so it shows up properly.\n         */\n        if ($post->post_date_gmt == '0000-00-00 00:00:00') {\n            $post_date_gmt = '00000000';\n        }\n        \n        \n        ?>\n            {\n                \"date\" : \"<?php the_time('d') ?><?php the_time('m') ?><?php the_time('Y') ?>\", \n                \"date_gmt\" : \"<?php echo $post_date_gmt; ?>\",\n                \"time\" : \"<?php echo trim(get_the_time()) ?>\", \n                \"formattedtime\" : \"<?php $this->edcal_json_encode(the_time($timeFormat)) ?>\", \n                \"sticky\" : \"<?php echo is_sticky($post->ID) ?>\",\n                \"url\" : \"<?php $this->edcal_json_encode(the_permalink()) ?>\", \n                \"status\" : \"<?php echo get_post_status() ?>\",\n                \"orig_status\" : \"<?php echo get_post_status() ?>\",\n                \"title\" : <?php echo $this->edcal_json_encode(get_the_title()) ?>,\n                \"author\" : <?php echo $this->edcal_json_encode(get_the_author()) ?>,\n                \"type\" : \"<?php echo get_post_type( $post ) ?>\",\n                \"typeTitle\" : \"<?php echo $postTypeTitle ?>\",\n    \n                <?php if ( current_user_can('edit_post', $post->ID) ) {?>\n                \"editlink\" : \"<?php echo get_edit_post_link($post->ID) ?>\",\n                <?php } ?>\n    \n                <?php if ( current_user_can('delete_post', $post->ID) ) {?>\n                \"dellink\" : \"javascript:edcal.deletePost(<?php echo $post->ID ?>)\",\n                <?php } ?>\n    \n                \"permalink\" : \"<?php echo get_permalink($post->ID) ?>\",\n                \"id\" : \"<?php the_ID(); ?>\"\n                \n                <?php if($fullPost) : ?>\n                , \"content\" : <?php echo $this->edcal_json_encode($post->post_content) ?>\n                \n                <?php endif; ?>\n            }\n        <?php\n        if ($addComma) {\n            ?>,<?php\n        }\n    }\n    \n    /*\n     * This is a helper AJAX function to delete a post. It gets called\n     * when a user clicks the delete button, and allows the user to \n     * retain their position within the calendar without a page refresh.\n     * It is not called unless the user has permission to delete the post.\n     */\n    function edcal_deletepost() {\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n    \n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        $edcal_postid = isset($_GET['postid'])?$_GET['postid']:null;\n        $post = get_post($edcal_postid, ARRAY_A);\n        $title = $post['post_title'];\n        $date = date('dmY', strtotime($post['post_date'])); // [TODO] : is there a better way to generate the date string ... ??\n        $date_gmt = date('dmY',strtotime($post['post_date_gmt']));\n        if ($date_gmt == '01011970') {\n            $date_gmt = '00000000';\n        }\n        \n        $force = !EMPTY_TRASH_DAYS;                    // wordpress 2.9 thing. deleted post hangs around (ie in a recycle bin) after deleted for this # of days\n        if ( isset($post->post_type) && ($post->post_type == 'attachment' )) {\n            $force = ( $force || !MEDIA_TRASH );\n            if ( ! wp_delete_attachment($edcal_postid, $force) )\n                wp_die( __('Error in deleting...') );\n        } else {\n            if ( !wp_delete_post($edcal_postid, $force) )\n                wp_die( __('Error in deleting...') );\n        }\n    \n    //    return the following info so that jQuery can then remove post from edcal display :\n    ?>\n    {\n        \"post\" :\n        {\n            \"date\" : \"<?php echo $date ?>\", \n            \"title\" : \"<?php echo $title ?>\",\n            \"id\" : \"<?php echo $edcal_postid ?>\",\n            \"date_gmt\" : \"<?php echo $date_gmt; ?>\"\n        }\n    }\n    <?php\n    \n        die();    \n    }\n    \n    /*\n     * This is a helper AJAX function to change the title of a post.  It\n     * gets called from the save button in the tooltip when you change a\n     * post title in a calendar.\n     */\n    function edcal_changetitle() {\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n    \n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        $edcal_postid = isset($_GET['postid'])?$_GET['postid']:null;\n        $edcal_newTitle = isset($_GET['title'])?$_GET['title']:null;\n        \n        $post = get_post($edcal_postid, ARRAY_A);\n        setup_postdata($post);\n        \n        $post['post_title'] = wp_strip_all_tags($edcal_newTitle);\n        \n        /*\n         * Now we finally update the post into the database\n         */\n        wp_update_post( $post );\n        \n        /*\n         * We finish by returning the latest data for the post in the JSON\n         */\n        global $post;\n        $args = array(\n            'posts_id' => $edcal_postid,\n        );\n        \n        $post = get_post($edcal_postid);\n        \n        ?>{\n            \"post\" :\n        <?php\n        \n            $this->edcal_postJSON($post);\n        \n        ?>\n        }\n        <?php\n        \n        \n        die();\n    }\n    \n    /*\n     * This is a helper function to create a new blank draft\n     * post on a specified date.\n     */\n    function edcal_newdraft() {\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n    \n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        $edcal_date = isset($_POST[\"date\"])?$_POST[\"date\"]:null;\n        \n        $my_post = array();\n        $my_post['post_title'] = isset($_POST[\"title\"])?wp_strip_all_tags($_POST[\"title\"]):null;\n        $my_post['post_content'] = isset($_POST[\"content\"])?$_POST[\"content\"]:null;\n        $my_post['post_status'] = 'draft';\n        \n        $my_post['post_date'] = $edcal_date;\n        $my_post['post_date_gmt'] = get_gmt_from_date($edcal_date);\n        $my_post['post_modified'] = $edcal_date;\n        $my_post['post_modified_gmt'] = get_gmt_from_date($edcal_date);\n        \n        // Insert the post into the database\n        $my_post_id = wp_insert_post( $my_post );\n        \n        /*\n         * We finish by returning the latest data for the post in the JSON\n         */\n        global $post;\n        $post = get_post($my_post_id);\n    \n        ?>{\n            \"post\" :\n        <?php\n        \n            $this->edcal_postJSON($post, false);\n        \n        ?>\n        }\n        <?php\n        \n        die();\n    }\n    \n    /*\n     * This is a helper function to create a new draft post on a specified date\n     * or update an existing post.\n     */\n    function edcal_savepost() {\n        \n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n        \n        // Most blogs have warnings turned off by default, but if they're\n        // turned on the warnings can cause errors in the JSON data when\n        // we change the post status so we set the warning level to hide\n        // warnings and then reset it at the end of this function.\n        $my_error_level = error_reporting();\n        error_reporting(E_ERROR);\n    \n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        $edcal_date = isset($_POST[\"date\"])?$_POST[\"date\"]:null;\n        $edcal_date_gmt = isset($_POST[\"date_gmt\"])?$_POST[\"date_gmt\"]:get_gmt_from_date($edcal_date);\n        \n        $my_post = array();\n        \n        // If the post id is not specified, we're creating a new post\n        if($_POST['id'] && intval($_POST['id']) > 0) {\n            $my_post['ID'] = intval($_POST['id']);\n        } else {\n            // We have a new post\n            //$my_post['ID'] = 0; // and the post ID to 0\n            \n            // Set the status to draft unless the user otherwise specifies\n            if ($_POST['status']) {\n                $my_post['post_status'] = $_POST['status'];\n            } else {\n                $my_post['post_status'] = 'draft';\n            }\n        }\n        \n        $my_post['post_title'] = isset($_POST[\"title\"])?wp_strip_all_tags($_POST[\"title\"]):null;\n        $my_post['post_content'] = isset($_POST[\"content\"])?$_POST[\"content\"]:null;\n        \n        if ($edcal_date_gmt != '0000-00-00 00:00:00' || $my_post['ID'] > 0) {\n            /*\n             * We don't want to set a date if this a new post in the drafts\n             * drawer since WordPress 3.5 will reject new posts with a 0000 \n             * GMT date.\n             */\n            $my_post['post_date'] = $edcal_date;\n            $my_post['post_date_gmt'] = $edcal_date_gmt;\n            $my_post['post_modified'] = $edcal_date;\n            $my_post['post_modified_gmt'] = $edcal_date_gmt;\n        }\n        \n        $my_post['post_status'] = $_POST['status'];\n        \n        /* \n         * When we create a new post we need to specify the post type\n         * passed in from the JavaScript.\n         */\n        $post_type = isset($_POST[\"post_type\"])?$_POST[\"post_type\"]:null;\n        if ($post_type) {\n            $my_post['post_type'] = $post_type;\n        }\n\n        // If we are updating a post\n        if($_POST['id']) {\n            if ($_POST['status'] != $_POST['orig_status']) {\n                wp_transition_post_status($_POST['status'], $_POST['orig_status'], $my_post);\n                $my_post['post_status'] = $_POST['status'];\n            }\n            $my_post_id = wp_update_post($my_post);\n        } else {\n            // We have a new post, insert the post into the database\n            $my_post_id = wp_insert_post($my_post, true);\n        }\n        \n        // TODO: throw error if update/insert or getsinglepost fails\n        /*\n         * We finish by returning the latest data for the post in the JSON\n         */\n        $args = array(\n            'post__in' => array($my_post_id)\n        );\n        \n        if ($post_type) {\n            $args['post_type'] = $post_type;\n        }\n        $post = query_posts($args);\n        \n        // get_post and setup_postdata don't get along, so we're doing a mini-loop\n        if(have_posts()) :\n            while(have_posts()) : the_post();\n                ?>\n                {\n                \"post\" :\n                    <?php\n                    $this->edcal_postJSON($post[0], false);\n                    ?>\n                }\n                <?php\n            endwhile;\n        endif;\n        \n        error_reporting($my_error_level);\n        \n        die();\n    }\n    \n    /*\n     * This function checks the nonce for the URL.  It returns\n     * true if the nonce checks out and outputs a JSON error\n     * and returns false otherwise.\n     */\n    function edcal_checknonce() {\n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        if (!wp_verify_nonce($_REQUEST['_wpnonce'], 'edit-calendar')) {\n           /*\n             * This is just a sanity check to make sure\n             * this isn't a CSRF attack.  Most of the time this\n             * will never be run because you can't see the calendar unless\n             * you are at least an editor\n             */\n            ?>\n            {\n                \"error\": <?php echo(EDCAL_NONCE_ERROR); ?>\n            }\n            <?php\n            return false;\n        }\n        return true;\n    }\n    \n    /*\n     * This function changes the date on a post.  It does optimistic \n     * concurrency checking by comparing the original post date from\n     * the browser with the one from the database.  If they don't match\n     * then it returns an error code and the updated post data.\n     *\n     * If the call is successful then it returns the updated post data.\n     */\n    function edcal_changedate() {\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        $edcal_postid = isset($_GET['postid'])?$_GET['postid']:null;\n        $edcal_newDate = isset($_GET['newdate'])?$_GET['newdate']:null;\n        $edcal_oldDate = isset($_GET['olddate'])?$_GET['olddate']:null;\n        $edcal_postStatus = isset($_GET['postStatus'])?$_GET['postStatus']:null;\n        $move_to_drawer = $edcal_newDate == '0000-00-00';\n        $move_from_drawer = $edcal_oldDate == '00000000';\n\n        global $post;\n        $args = array(\n            'posts_id' => $edcal_postid,\n        );\n        $post = get_post($edcal_postid);\n        setup_postdata($post);\n\n        /*\n         * Posts in WordPress have more than one date.  There is the GMT date,\n         * the date in the local time zone, the modified date in GMT and the\n         * modified date in the local time zone.  We update all of them.\n         */\n        if ( $move_from_drawer ) {\n            /* \n             * Set the date to 'unscheduled' [ie. 0]. We use this date \n             * further down in the concurrency check, and this will make the dates\n             * technically off by 10 hours, but it's still the same day. We only do \n             * this for posts that were created as drafts.  Works for now, but\n             * we would have to revamp this if we use an actual timestamp check.\n             */\n            $post->post_date = '0000-00-00 ' . date('H:i:s', strtotime($post->post_date));\n        } else if ( $move_to_drawer ) {\n            // echo ( \"\\r\\npost->post_date_gmt=\".$post->post_date_gmt);\n            $post->post_date_gmt = $post->post_date;\n        } else {\n            // set the scheduled time as our original time\n            $post->post_date_gmt = $post->post_date;\n        }\n// echo ( \"\\r\\npost->post_date_gmt = $post->post_date_gmt \\r\\npost->post_date = $post->post_date\");\n\n        /*\n         * Error-checking:\n         */\n        $error = false;\n        if (!current_user_can('edit_post', $edcal_postid)) {\n            /*\n             * This is just a sanity check to make sure that the current\n             * user has permission to edit posts.  Most of the time this\n             * will never be run because you can't see the calendar unless\n             * you are at least an editor.\n             */\n            $error = EDCAL_PERMISSION_ERROR;\n        } else if ( date('Y-m-d', strtotime($post->post_date)) != date('Y-m-d', strtotime($edcal_oldDate)) ) {\n            /*\n             * We are doing optimistic concurrency checking on the dates.  If\n             * the user tries to move a post we want to make sure nobody else\n             * has moved that post since the page was last updated.  If the \n             * old date in the database doesn't match the old date from the\n             * browser then we return an error to the browser along with the\n             * updated post data.\n             */\n            $error = EDCAL_CONCURRENCY_ERROR;\n        }\n\n        if ( $error ) {\n            // die('error= '.$error);\n            ?>\n            {\n                \"error\": <?php echo $error; ?>,\n                \"post\" :\n            <?php\n                $this->edcal_postJSON($post, false, true);\n            ?> }\n            \n            <?php\n            die();\n        }\n\n\n        /*\n         * No errors, so let's go create our new post parameters to update\n         */\n        \n        $updated_post = array();\n        $updated_post['ID'] = $edcal_postid;\n\n        if ( !$move_to_drawer ) {\n            $updated_post['post_date'] = $edcal_newDate . substr($post->post_date, strlen($edcal_newDate));\n        }\n\n        /*\n         * When a user creates a draft and never sets a date or publishes it \n         * then the GMT date will have a timestamp of 00:00:00 to indicate \n         * that the date hasn't been set.  In that case we need to specify\n         * an edit date or the wp_update_post function will strip our new\n         * date out and leave the post as publish immediately.\n         */\n        $needsEditDate = preg_match( '/^0000/', $post->post_date_gmt );\n\n        if ( $needsEditDate ) {\n            // echo \"\\r\\nneeds edit date\\r\\n\";\n            $updated_post['edit_date'] = $edcal_newDate . substr($post->post_date, strlen($edcal_newDate));\n        }\n\n        if ( $move_to_drawer ) {\n            $updated_post['post_date_gmt'] = \"0000-00-00 00:00:00\";\n            $updated_post['edit_date'] = $post->post_date;\n        } else if ( $move_from_drawer ) {\n            $updated_post['post_date_gmt'] = get_gmt_from_date($post->post_date);\n            $updated_post['post_modified_gmt'] = get_gmt_from_date($post->post_date);\n        }\n\n        /*\n         * We need to make sure to use the GMT formatting for the date.\n         */\n        if ( !$move_to_drawer ) {\n            $updated_post['post_date_gmt'] = get_gmt_from_date($updated_post['post_date']);\n            $updated_post['post_modified'] = $edcal_newDate . substr($post->post_modified, strlen($edcal_newDate));\n            $updated_post['post_modified_gmt'] = get_gmt_from_date($updated_post['post_date']);\n        }\n        \n        if ($edcal_postStatus != $post->post_status) {\n            /*\n             * We only want to update the post status if it has changed.\n             * If the post status has changed that takes a few more steps\n             */\n            wp_transition_post_status($edcal_postStatus, $post->post_status, $post);\n            $updated_post['post_status'] = $edcal_postStatus;\n            \n            // Update counts for the post's terms.\n            foreach ( (array) get_object_taxonomies('post') as $taxonomy ) {\n                $tt_ids = wp_get_object_terms($post_id, $taxonomy, 'fields=tt_ids');\n                wp_update_term_count($tt_ids, $taxonomy);\n            }\n            \n            do_action('edit_post', $edcal_postid, $post);\n            do_action('save_post', $edcal_postid, $post);\n            do_action('wp_insert_post', $edcal_postid, $post);\n        }\n        \n// die(var_dump($updated_post).'success!');\n        /*\n         * Now we finally update the post into the database\n         */\n        wp_update_post( $updated_post );\n        \n        /*\n         * We finish by returning the latest data for the post in the JSON\n         */\n        global $post;\n        $args = array(\n            'posts_id' => $edcal_postid,\n        );\n        \n        $post = get_post($edcal_postid);\n        ?>{\n            \"post\" :\n            \n        <?php\n            $this->edcal_postJSON($post, false, true);\n        ?>}\n        <?php\n        \n        die();\n    }\n    \n    /*\n     * This function saves the preferences\n     */\n    function edcal_saveoptions() {\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n    \n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        /*\n         * The number of weeks preference\n         */\n        $edcal_weeks = isset($_GET['weeks'])?$_GET['weeks']:null;\n        if ($edcal_weeks != null) {\n            add_option(\"edcal_weeks_pref\", $edcal_weeks, \"\", \"yes\");\n            update_option(\"edcal_weeks_pref\", $edcal_weeks);\n        }\n        \n        /*\n         * The show author preference\n         */\n        $edcal_author = isset($_GET['author-hide'])?$_GET['author-hide']:null;\n        if ($edcal_author != null) {\n            add_option(\"edcal_author_pref\", $edcal_author, \"\", \"yes\");\n            update_option(\"edcal_author_pref\", $edcal_author);\n        }\n        \n        /*\n         * The show status preference\n         */\n        $edcal_status = isset($_GET['status-hide'])?$_GET['status-hide']:null;\n        if ($edcal_status != null) {\n            add_option(\"edcal_status_pref\", $edcal_status, \"\", \"yes\");\n            update_option(\"edcal_status_pref\", $edcal_status);\n        }\n        \n        /*\n         * The show time preference\n         */\n        $edcal_time = isset($_GET['time-hide'])?$_GET['time-hide']:null;\n        if ($edcal_time != null) {\n            add_option(\"edcal_time_pref\", $edcal_time, \"\", \"yes\");\n            update_option(\"edcal_time_pref\", $edcal_time);\n        }\n    \n        /*\n         * The edcal feedback preference\n         */\n        $edcal_feedback = isset($_GET['dofeedback'])?$_GET['dofeedback']:null;\n        if ($edcal_feedback != null) {\n            add_option(\"edcal_do_feedback\", $edcal_feedback, \"\", \"yes\");\n            update_option(\"edcal_do_feedback\", $edcal_feedback);\n        }\n        \n        /*\n         * We finish by returning the latest data for the post in the JSON\n         */\n        ?>{\n            \"update\" : \"success\"\n        }\n        <?php\n        \n        die();\n    }\n    \n    /*\n     * Add the no cache headers to make sure that our responses aren't\n     * cached by the browser.\n     */\n    function edcal_addNoCacheHeaders() {\n        header(\"Cache-Control: no-cache, must-revalidate\"); // HTTP/1.1\n        header(\"Expires: Sat, 26 Jul 1997 05:00:00 GMT\"); // Date in the past\n    }\n\n}\n\n?>", "=== Editorial Calendar ===\nContributors: cvernon, justinstresslimit, jkudish, MaryVogt, zgrossbart\nTags: posts, post, calendar, AJAX, admin, administration\nRequires at least: 2.8.5\nTested up to: 3.5.1\nStable tag: 2.6\n\nThe Editorial Calendar makes it possible to see all your posts and drag and drop them to manage your blog.\n\n== Description ==\n\nDid you remember to write a post for next Tuesday?  What about the Tuesday after that?  WordPress doesn't make it easy to see when your posts are scheduled.  The editorial calendar gives you an overview of your blog and when each post will be published.  You can drag and drop to move posts, edit posts right in the calendar, and manage your entire blog.  \n\n<h4>Watch the video</h4>\n\n[vimeo http://vimeo.com/47251750]\n\n<h4>Try it out</h4>\nTry the calendar before you install it.  Check out the demo installation at <a href=\"http://www.zackgrossbart.com/extras/sandbox/wp-admin/edit.php?page=cal\">Zack's WordPress Sandbox</a>.\n\n\n<h4>Features</h4>\n\n1. See all of your posts and when they'll be posted.\n1. Drag and drop to change your post dates.\n1. Manage your drafts with our new drafts drawer.\n1. Quickedit post titles, contents, and times.\n1. Publish posts or manage drafts.\n1. Easily see the status of your posts.\n1. Manage posts from multiple authors.\n\n<h4>Make it better</h4>\n\nThank you to everyone who has given us feedback and helped us improve this plugin.  If you have questions, problems, or ideas for new features please let us know at <a href=\"mailto:wp-edcal@googlegroups.com\">wp-edcal@googlegroups.com</a>.\n\n<h4>Translate it</h4>\n\nAgain, thanks to all who have already helped make the plugin available in so many languages. If you would like to help us translate the plugin into your language, or if you use it in a language other than English already and would like to help us keep it up to date, please write to us at <a href=\"mailto:wp-edcal@googlegroups.com\">wp-edcal@googlegroups.com</a>\n\n== Installation ==\n\n1. <b>Backup your WordPress database</b>.\n1. Upload the plugin directory <code>editorial-calendar</code> to the <code>wp-content/plugins</code> directory.\n1. Activate the plugin through the 'Plugins' menu in WordPress.\n1. Click the new 'Calendar' option under the 'Posts' menu or any other custom post types.\n\n== Frequently Asked Questions ==\n\n= What is an editorial calendar? =\n\nAn editorial calendar is simply a plan for your blog.  It is thinking ahead about what you're going to write.  There's a detailed explanation of editorial calendars at <a href=\"http://www.copyblogger.com/editorial-calendar/\">The Easy-to-Use Tool that Helps You Build a Breakthrough Blog</a> from <a href=\"http://www.copyblogger.com/\">Copyblogger</a>.\n\n= What are other people saying about the calendar? =\n\nFrom time to time people write articles about the editorial calendar.  We appreciate every one.\n\n<a href=\"http://www.dailyblogtips.com/5-reasons-youll-love-the-wordpress-editorial-calendar/\">5 Reasons You\u2019ll Love the WordPress Editorial Calendar</a> by <a href=\"http://www.successfulblogging.com/\">Annabel Candy</a>\n\n<a href=\"http://www.chrisbrogan.com/use-an-editorial-calendar/\">Use An Editorial Calendar</a> by <a href=\"http://www.chrisbrogan.com\">Chris Brogan</a>\n\n<a href=\"http://www.smashingmagazine.com/2010/08/30/the-importance-of-consistency-using-editorial-calendars-and-style-guides/\">Blogging For Web Designers: Editorial Calendars and Style Guides</a> by <a href=\"http://jessica.smashingmagazine.com/\">Jessica Bordeau</a> at <a href=\"http://www.smashingmagazine.com/\">Smashing Magazine</a>\n\n<a href=\"http://mydigitalinternet.com/2010/editorial-calendar-wordpress-plugin-review\">\nEditorial Calendar WordPress plugin review</a> by Stephen Duckworth at <a href=\"http://mydigitalinternet.com/\">My Digital Internet</a>\n\n<a href=\"http://www.disruptiveconversations.com/2010/09/brogan-is-right-the-editorial-calendar-wordpress-plugin-truly-rocks.html\">Brogan is right - the \"Editorial Calendar\" WordPress plugin truly rocks!</a> by <a href=\"http://www.danyork.com/\">Dan York</a>\n\n<a href=\"http://www.socialbrandingblog.com/637/editorial-calendar-plugin-for-wordpress/\">Editorial Calendar Plugin for WordPress</a> by <a href=\"http://www.socialbrandingblog.com/\">Steve Campbell</a>\n\n<a href=\"http://marketplacemommies.com/2010/an-editorial-calendar-plugin-for-wordpress/\">\nAn Editorial Calendar Plugin For WordPress</a> by <a href=\"http://marketplacemommies.com/\">Marketplace Mommies</a>\n\n<a href=\"http://www.mequoda.com/articles/editorial-strategy/editorial-calendar-wp-plugin-review/\">Great WP Plugin for Online Editors: Editorial Calendar</a> by <a href=\"http://www.mequoda.com/\">Mequoda Daily</a>\n\n<a href=\"http://chrisg.org/drag-and-drop-post-scheduling-with-the-editorial-calendar-wordpress-plugin/\">Drag and Drop Post Scheduling with the Editorial Calendar WordPress plugin</a> by <a href=\"http://chrisg.org/\">Chris Garrett</a>\n\n<a href=\"http://theincidentaleconomist.com/wordpress-plug-in-plug-editorial-calendar/\">WordPress Plug-In Plug: Editorial Calendar</a> on <a href=\"http://theincidentaleconomist.com/\">The Incidental Economist</a>\n\n<a href=\"http://www.rezdwanhamid.com/tutorials/how-to-use-editorial-calendar-plugin-for-wordpress/\">How To Use The Editorial Calendar For WordPress</a> by <a href=\"http://www.rezdwanhamid.com/\">Rezdwan Hamid</a>\n\n<a href=\"http://wordcastnet.com/2010/01/12/visually-manage-your-post-publication-dates-with-the-editorial-calendar-wordpress-plugin/\">Visually Manage Your Post Publication Dates with the Editorial Calendar WordPress Plugin</a> on <a href=\"http://wordcastnet.com/\">WordCast</a>\n\n<a href=\"http://askcharlyleetham.com/blog/guest-authors/powerful-plugins-that-keep-you-organized-and-increase-your-productivity/comment-page-1#comment-5791\">Powerful Plugins That Keep You Organized and Increase Your Productivity</a> at <a href=\"http://www.askcharlyleetham.com\">askcharlyleetham.com</a>.\n\n<a href=\"http://websuccessdiva.com/seo-copywriting-checklist/\">SEO Copywriting Checklist for Wordpress Blogs</a> on <a href=\"http://websuccessdiva.com/\">@WebSuccessDiva</a> is a good article about SEO and using an editorial calendar.\n\n= Can I see a demo of the calendar? =\n\nCheck out our demo installation at <a href=\"http://www.zackgrossbart.com/extras/sandbox/wp-admin/edit.php?page=cal\">Zack's WordPress Sandbox</a>.\n\n= How do I get help using the calendar? =\n\nThe <a href=\"http://groups.google.com/group/wp-edcal\">WordPress Editorial Calendar Google Group</a> is a good place to ask questions, find answers, and post feedback.  We also follow the WordPress.org forum <a href=\"http://wordpress.org/tags/editorial-calendar?forum_id=10\">Editorial Calendar discussion</a>. \n\n= How do I navigate in the calendar? =\n\nYou can move around in the calendar using the arrows next to the months at the top or your mouse wheel. You can also move using your keyboard:\n\n<ul>\n<li>Move 1 week into the past - Up Arrow</li>\n<li>Move 1 week into the future - Down Arrow</li>\n<li>Jump multiple weeks into the past - Page Up or Ctrl+Up Arrow</li>\n<li>Jump multiple weeks into the future - Page Down or Ctrl+Down Arrow</li>\n</ul>\n\n= How do I change the first day of the week? =\n\nThe editorial calendar follows the Week Starts On preference on the WordPress General Settings page.  Choose the day you want and the calendar will use that day as the first day of the week.\n\n= What languages does the calendar support? =\n\nThe calendar is available in Brazilian Portuguese, Croatian, Czech, Dutch, English, French, German, Greek, Hebrew, Italian, Japanese, Lithuanian, Norwegian, Polish, Russian, Spanish, and Swedish. \n\n= Can I add new languages? =\n\nYes please!  We are looking for translators.  It only takes about 20 minutes.  If you're interested please <a href=\"mailto:wp-edcal@googlegroups.com\">contact us</a>.\n\n= How does the calendar work =\n\nThe calendar is written in JavaScript.  It contacts your blog when it scrolls to get data about your posts.  Just like Google Maps.  <a href=\"http://www.zackgrossbart.com/hackito/edcal/\">Creating a JQuery Powered Posts Calendar for WordPress</a> explains a lot of the technical details.\n\n= Is the calendar collecting data about my blog? =\n\nAfter you use the calendar a few times we'll prompt you to let us collect a little data about your blog.  Information like the size of your browser window and the number of posts you have per day help us make the calendar even better.\n\nThe collected data is all available to the public.  Check out the <a href=\"http://www.zackgrossbart.com/edcal/mint/\">Editorial Calendar Statistics</a>.\n\n= What users can use the calendar? =\n\nThe editorial calendar works differently based on your permissions.  \n\n* Administrators and Editors can use every feature available in the calendar.  \n* Authors can use the calendar to edit, move, and publish their own posts, but other people's posts are read-only.  \n* Contributors see everyone's posts and move their own posts, but can only save drafts.\n* Subscribers can't see the calendar.\n\nYou can see how it looks for different users on our <a href=\"http://www.zackgrossbart.com/extras/sandbox/wp-admin/edit.php?page=cal\">Zack's WordPress Sandbox</a> with the following users:\n\n* edgar the Editor\n* alice the Author\n* conrad the Contributor\n* sam the Subscriber\n\nEach of these users has the password test.\n\n= Can I use the editorial calendar with pages? =\n\nRight now the calendar only supports posts.  We're considering adding pages.  If you would like to see pages show up in the calendar let us know.\n\n= Does the calendar support group blogs? =\n\nIf your blog has multiple authors the calendar will work just fine.  You can show author names right in the calendar.  Just look under screen options.\n\nWe are currently working on new features for multi-author blogs.  If you have any ideas please <a href=\"mailto:wp-edcal@googlegroups.com\">contact us</a>.\n\n= Can my readers tell I'm using the editorial calendar? =\n\nNo.  The calendar is only an administration tool.  None of your readers will know you're running it unless you tell them.\n\n= Why can't I move published posts? =\n\nMoving published posts can cause problems with some RSS feeds and is generally not a very popular thing to do.  The calendar only allows you to move scheduled and draft posts.\n\n== Screenshots ==\n\n1. The calendar integrates seamlessly into the WordPress administration console\n2. See the big picture with a view of all your posts and when they'll be published.\n3. Drag and drop posts to easily change dates and take control of your blog.\n4. Create, edit, and schedule posts in one simple quickedit dialog.\n5. Show as much or as little of your blog as you like.\n6. Use a special calendar for each custom post type on your blog.\n7. Use the new unscheduled drafts section to manage drafts before you schedule them.\n\n== Changelog ==\n\n= 2.7 = \n\nThe calendar is now available in Italian thanks to Lorenzo Boldorini who blogs at http://www.webqbe.it.\n\nChanged all calls of the jQuery live method to use the new on method so the calendar will keep working when WordPress upgrades to jQuery 1.9.\n\nThe Editorial Calendar is now stripping all tags out of post titles created from the calendar.  This fixes a potential security issue found by the Mozilla security testing team.  https://bugzilla.mozilla.org/show_bug.cgi?id=738112\n\n= 2.6 = \n\nFixed some layout issues with the previous and next calendar buttons in WordPress 3.5.\n\nWe are now properly saving new posts in the drafts drawer in WordPress 3.5.\n\nAdded unit tests to cover creating a new post in the drafts drawer.\n\nAdded a few performance improvements to the calendar like making sure we only load our code in the admin console.\n\n= 2.5 =\n\nThe calendar is now handling the post ID in the same way for each call it uses to get data about each post when returning post data to the calendar to avoid some PHP warnings.\n\nThe calendar is now more careful about PHP warnings so it still works if the blog is set to show PHP warnings.\n\nThe unit tests are now using the correct CSS reference so they show up properly.\n\nMoved the setting for the default post time to the edcal.php so it's easier to change without recompiling the JavaScript.\n\nThe calendar now supports Russian thanks to Danny Zawacki and Lyudmila Kostryka.  Danny blogs at http://dannyzawacki.com\n\nWe have started to namespace css classes to avoid conflicts with other plugins & themes. \n\n= 2.4 =\n\nCreating a new unscheduled draft is now working properly from the calendar.\n\n= 2.3 = \n\nThe calendar is now loading relative URLs for CSS, JavaScript, and image files using the right API so they load properly when using SSL.\n\n= 2.2.1 =\n\nFixed a memory leak in the calendar where the calendar doesn't load if you have too many posts in your blog.\n\n= 2.2 =\n\nThe calendar is using JavaScript compression to load less data and run faster.\n\nWe've added a new mechanism to load the unscheduled drafts which spaces out the loading so the calendar responds super fast even when you have hundreds of unscheduled drafts.\n\nAdded a new button to jump to the last post in the calendar.\n\nAdded a namespace to fix a small issue of potential JavaScript file conflict with wp_enqueue_script().\n\n= 2.1 =\n\nThe calendar now moves posts from the drafts drawer to the main calendar properly on blogs with the alternate functionality of the date function.\n\nThe calendar can now display up to eight weeks at a time instead of just five.\n\n= 2.0 =\n\nThe calendar now has a new major feature, the \"drafts drawer,\" a post staging area where we make all unscheduled posts available to drag onto the calendar. You can also now drag posts from the calendar back into the drafts drawer to \"un-schedule\" them.\n\nMoved around functions in the js and css to be a bit more readable, and added table of contents to css file.\n\nUpdated css of Screen Options to be more core WordPress.\n\n= 1.9.1 =\n\nThe calendar is no longer blocking typing in the calendar quick edit dialog.\n\n= 1.9 =\n\nThe calendar is now translated into Lithuanian.  Thanks to Vincent G. from <a href=\"http://www.host1free.com\">host1free.com</a>.\n\n= 1.8.6 =\n\nThe calendar is now using the proper he_IL locale code for Hebrew instead of he.\n\n= 1.8.5 =\n\nThe calendar is now translated into Spanish.  Thanks to Alberto Balsalobre Rios who blogs at <a href=\"http://www.mediatripa.com\">Mediatripa.com</a>.\n\nThe calendar is now translated into Hebrew including right to left language support.  Thanks to Meir Pinto who blogs at <a href=\"http://www.meir-pinto.com/wp\">Pintolog</a>.\n\n= 1.8 =\n\nThe calendar is now translated into Norwegian.\n\nThe mouse wheel scrolling with the calendar is now working properly on WordPress 3.3.  Previously it would only scroll up (into the past) and not down (into the future).\n\nThe calendar is now translated into Japanese.  Thanks to Masahiro who blogs at <a href=\"http://www.buslog.net/\">http://www.buslog.net</a>.\n\nSupport for WordPress version 3.3.1.\n\n= 1.7 =\n\nVersion 1.7 supports WordPress 3.3 with fixes to the date display of newly created posts and alignment and margins of each day in the calendar.\n\nThe calendar is now scrolling in the right direction with the up and down arrows keys.\n\n= 1.6 =\n\nThe calendar is now setting the correct post time for manual set times at noon or midnight instead of changing it by 12 hours.\n\nThe up, down, page up, and page down keys are now working properly for moving around in the text in the quick edit dialog.\n\nThe calendar is now translated into Swedish.  Thanks to Johan Landstr\u00f6m.\n\n= 1.5 =\n\nThe post time field in the quick edit dialog is now editable so you can specify any time you want instead of having to pick in 30 minute increments.\n\nThe calendar is now translated into German.  Thanks to Matthias Nattke who uses the Editorial Calendar on his site <a href=\"http://www.kikamagazin.de\">Kikamagazin Bloggt</a>.\n\nThe calendar is now supporting a special post type \"edcal_show_calendar_\" to make sure certain custom post types don't show up in the calendar.\n\n= 1.4 =\n\n* We now have a new look and feel for the quick edit dialog and a few other elements to match WordPress 3.2.\n\n* We've refactored the Editorial Calendar into a PHP class for easier maintainability and better scoping.\n\n= 1.3.4 =\n* The calendar now shows authors properly when they have double quotes in their names\n\n= 1.3.3 =\n* The calendar now supports Dutch.  Thanks to Helma Paternostre.\n* We are no longer including the thickbox media upload files so the calendar loads faster.  \n* The calendar now loads JQuery UI drag and drop support from WordPress instead of embedding the code.  This allows us to upgrade to the latest version of JQuery UI, avoid some conflicts with other plugins, and load faster.\n* Fixed an error with the message panels so they will close properly on Chrome.\n\n= 1.3.2 =\n* We are now showing the full post content in the quick edit dialog even if there is a more tag\nso we don't overwrite the post without the full post content.\n\n= 1.3.1 =\n* Added an extra check so we aren't calling functions for supporting custom post types when they aren't available.  This problem only happens on WordPress 2.9.X.\n\n= 1.3 =\n* The Editorial Calendar will now show up for each custom post type and support a separate calendar for each type.\n* We are now disabling the save button on the quick edit dialog after it is pressed and before the post saves to prevent duplicate posts if the user presses the button twice in a row.\n* Upgraded the to the latest version of QUnit for our unit test framework\n* The calendar now supports Brazilian Portuguese.  Thanks to Janio Sarmento who uses the Editorial Calendar on his site <a href=\"http://janio.sarmento.org/\">O Blogue do Janio</a>.\n\n= 1.2 =\n* We are now smarter about the way we scroll the calendar day to show the action links when the day has scroll bars.\n* The calendar is now doing a better job determining the height of the list of posts in each day so the posts don't overlap other days.\n* The calendar will now show an error message when it can't load due to JavaScript conflicts with other plugins.\n\n= 1.1 =\n* There was a security hole in the calendar that allowed contributors to publish posts when they couldn't in the standard edit screen.  We now only allow contributors to save drafts and schedule a post for review.\n* Changed the easing we are using for the animation of the calendar so we can work with the BuddyPress plugin.\n* Changed the text of the edit link on published posts from Republish to Edit.\n\n= 1.0 =\n* Fixed a scrolling issue that prevented clicking the action links on the last post if the individual day showed a scroll bar.\n\n= 0.9 =\n* The calendar now uses the QUnit unit test framework to make sure the calendar maintains high quality in every release.  You can see the <a href=\"http://www.zackgrossbart.com/extras/sandbox/wp-admin/edit.php?page=cal&qunit=true\">tests run</a> on our integration blog or run them on your own blog by adding &qunit=true to the end of the URL for the calendar.\n* Made it easier to see the first day of the month using a special header and background color.\n* Changed to a lighter gradient for the calendar header to match the new theme of WordPress 3.0.\n* We now support pending review posts in the calendar.\n* The calendar supports a feedback mechanism where we collect data about your use of the calendar.  This anonymous data helps us improve the calendar and know which areas to focus on.  Everyone can view the <a href=\"http://www.zackgrossbart.com/edcal/mint/\">Editorial Calendar Statistics</a>.\n* Auto-drafts are now hidden from the calendar.\n\n= 0.8 =\n* We got the message and added an edit link that takes you to the WordPress edit page in addition to a link for the quick edit dialog in the calendar.\n* The calendar will now remember the last date and start there again the next time you access it.\n* Fixed a large performance problem that was causing the calendar to load the posts for and render many more weeks than it needed to.  The calendar is now faster than ever!\n* The calendar quick edit screen now shows the post author.\n* Sticky posts are now available in the calendar.  Schedule them like any other post.\n* The calendar now supports Greek.  Thanks to <a href=\"http://aenaon.biz/\">Mihalis Papanousis</a>.\n* We also support Polish.  Thanks to Krzysztof Nowak who uses the Editorial Calendar on his site <a href=\"http://classica-mediaevalia.pl\">Classica, mediaevalia et cetera</a>.\n\n= 0.7 =\n* You can now edit post contents, title, and time directly in the calendar.  You can also schedule a post for publication.\n* The layout of posts in the calendar has been optimized to you can see the maximum number of posts in a single day without scrolling.\n* The calendar is now available for Authors and grays out the posts the current user doesn't have permission to edit.\n* The calendar has been translated into Czech.  Thanks to Luk&#225;&#353; Adamec, who uses the Calendar on his blog <a href=\"http://hornihrad.cz/\">Horni Hrad</a>. \n* Added a link to view published posts directly from the calendar.\n* The calendar will now use the WordPress preference for the first day of the week and fall back on the server locale if it isn't set.\n* The calendar is also using the WordPress preferences for time format.\n* The calendar is now loading JavaScript libraries for just the calendar page.  That makes other pages load faster and avoids potential JavaScript conflicts with other plugins.\n* The visible weeks preference in the screen options is now a dropdown instead of a text box.\n\n\n= 0.6 =\n* The new look and feel of the calendar makes it easier to scan over your posts while showing you more information.\n* You can customize the number of weeks you work with in the calendar using the screen options pull down in the upper right.\n* The calendar now starts with the current day as the first week.\n* When dragging posts the calendar will now automatically scroll when you move a post past the top or bottom of the calendar.\n* You can now access the edit, view, and delete post links directly in the calendar without bringing up a second dialog.\n* The calendar now prevents you from changing posts that have already been published.\n* The calendar now supports using HTTPS for admin with the define('FORCE_SSL_ADMIN', true); option in wp-config.php.\n* The calendar is now properly handling posts with apostrophe's in the title in Internet Explorer.\n* The calendar now supports French.  Thanks to the guys at <a href=\"http://stresslimitdesign.com/\">StressLimitDesign</a>.\n\n= 0.5.4 =\n* I think this should finally fix the date format bugs we've been having.  Thanks for sticking with it guys.\n\n= 0.5.3 =\n* Fixed a date formatting bug when we update posts into the WordPress database\n\n= 0.5.2 =\n* Fixed a bug that way causing an invalid concurrency error when changing post dates in non-American countries\n\n= 0.5.1 =\n* Fixed a bug with the post creation date that was making posts created from the calendar sometimes show up on the wrong day\n* We are now properly encoding the post title when changing the title or creating a new draft so we can handle non-English characters properly.\n\n= 0.5 =\n* Added localization support for strings and dates in the calendar\n* The calendar is no longer showing posts that you have put in your trash\n* Fixed a problem that caused posts to never show up when working with WordPress in Croatian and other Eastern European languages.\n* The calendar now starts the week on the right day based on the configured locale in WordPress. \n* Added language support files for Croatian.  Special thanks to <a href=\"http://www.ivanbrezakbrkan.com\">Ivan Brezak Brkan</a>.\n\n= 0.4 =\n* We are now doing a better job arranging our tooltips and setting GMT dates correctly.\n* Fixed a problem with the post times so posts dragged with the calendar don't change their time of day.\n* Added a dialog for creating new drafts on specific dates of the calendar.\n\n= 0.3 =\n* Additional bug fixes and stabalizations as well as the ability to add new posts to a given date from the calendar.\n\n= 0.2 =\n* This version fixes a large number of bugs, makes many usability improvements, and has some significant performance increases.\n\n= 0.1 =\n* This version is just for beta testers\n"], "fixing_code": ["<?php\n/*******************************************************************************\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n ******************************************************************************/\n\n/*\nPlugin Name: WordPress Editorial Calendar\nDescription: The Editorial Calendar makes it possible to see all your posts and drag and drop them to manage your blog.\nVersion: 2.7\nAuthor: Colin Vernon, Justin Evans, Joachim Kudish, Mary Vogt, and Zack Grossbart\nAuthor URI: http://www.zackgrossbart.com\nPlugin URI: http://stresslimitdesign.com/editorial-calendar-plugin\n*/\n\n\nif ( is_admin() ) {\n    global $edcal;\n    if ( empty($edcal) )\n        $edcal = new EdCal();\n}\n\n\n/*\n * This error code matches CONCURRENCY_ERROR from edcal.js\n */\ndefine( 'EDCAL_CONCURRENCY_ERROR', 4 );\n\n/*\n * This error code matches PERMISSION_ERROR from edcal.js\n */\ndefine( 'EDCAL_PERMISSION_ERROR', 5 );\n\n/*\n * This error code matches NONCE_ERROR from edcal.js\n */\ndefine( 'EDCAL_NONCE_ERROR', 6 );\n\nclass EdCal {\n    \n    protected $supports_custom_types;\n    protected $default_time;\n\n    function __construct() {\n        add_action('wp_ajax_edcal_saveoptions', array(&$this, 'edcal_saveoptions'));\n        add_action('wp_ajax_edcal_changedate', array(&$this, 'edcal_changedate'));\n        add_action('wp_ajax_edcal_savepost', array(&$this, 'edcal_savepost'));\n        add_action('wp_ajax_edcal_changetitle', array(&$this, 'edcal_changetitle'));\n        add_action('admin_menu', array(&$this, 'edcal_list_add_management_page'));\n        add_action('wp_ajax_edcal_posts', array(&$this, 'edcal_posts'));\n        add_action('wp_ajax_edcal_getpost', array(&$this, 'edcal_getpost'));\n        add_action('wp_ajax_edcal_deletepost', array(&$this, 'edcal_deletepost'));\n        add_action(\"init\", array(&$this, 'edcal_load_language'));\n        \n        /*\n         * This boolean variable will be used to check whether this \n         * installation of WordPress supports custom post types.\n         */\n        $this->supports_custom_types = function_exists('get_post_types') && function_exists('get_post_type_object');\n\n        /*\n         * This is the default time that posts get created at, for now \n         * we are using 10am, but this could become an option later.\n         */\n        $this->default_time = get_option(\"edcal_default_time\") != \"\" ? get_option(\"edcal_default_time\") : '10:00';        \n        \n        /*\n         * We use these variables to hold the post dates for the filter when \n         * we do our post query.\n         */\n        //$edcal_startDate;\n        //$edcal_endDate;\n    }\n    \n    function edcal_load_language() {\n        $plugin_dir = basename(dirname(__FILE__));\n        load_plugin_textdomain( 'editorial-calendar', 'wp-content/plugins/' . $plugin_dir . '/languages/', $plugin_dir . '/languages/' );\n    }\n    \n    /*\n     * This function adds our calendar page to the admin UI\n     */\n    function edcal_list_add_management_page() {\n        if (function_exists('add_management_page') ) {\n            $page = add_posts_page( __('Calendar', 'editorial-calendar'), __('Calendar', 'editorial-calendar'), 'edit_posts', 'cal', array(&$this, 'edcal_list_admin'));\n            add_action( \"admin_print_scripts-$page\", array(&$this, 'edcal_scripts'));\n\n            if( $this->supports_custom_types ) {\n\n                /* \n                 * We add one calendar for Posts and then we add a separate calendar for each\n                 * custom post type.  This calendar will have an URL like this:\n                 * /wp-admin/edit.php?post_type=podcasts&page=cal_podcasts\n                 *\n                 * We can then use the post_type parameter to show the posts of just that custom\n                 * type and update the labels for each post type.\n                 */\n                $args = array(\n                    'public'   => true,\n                    '_builtin' => false\n                ); \n                $output = 'names'; // names or objects\n                $operator = 'and'; // 'and' or 'or'\n                $post_types = get_post_types($args,$output,$operator); \n\n                foreach ($post_types as $post_type) {\n                    $show_this_post_type = apply_filters(\"edcal_show_calendar_$post_type\", true);\n                    if ($show_this_post_type) {\n                        $page = add_submenu_page('edit.php?post_type=' . $post_type, __('Calendar', 'editorial-calendar'), __('Calendar', 'editorial-calendar'), 'edit_posts', 'cal_' . $post_type, array(&$this, 'edcal_list_admin'));\n                        add_action( \"admin_print_scripts-$page\", array(&$this, 'edcal_scripts'));\n                    }\n                }    \n            }\n        }\n    }\n    \n    /*\n     * This is a utility function to open a file add it to our\n     * output stream.  We use this to embed JavaScript and CSS\n     * files and cut down on the number of HTTP requests.\n     */\n    function edcal_echoFile($myFile) {\n        $fh = fopen($myFile, 'r');\n        $theData = fread($fh, filesize($myFile));\n        fclose($fh);\n        echo $theData;\n    }\n     \n    /*\n     * This is the function that generates our admin page.  It adds the CSS files and \n     * generates the divs that we need for the JavaScript to work.\n     */\n    function edcal_list_admin() {\n        \n        /*\n         * We want to count the number of times they load the calendar\n         * so we only show the feedback after they have been using it \n         * for a little while.\n         */\n        $edcal_count = get_option(\"edcal_count\");\n        if ($edcal_count == '') {\n            $edcal_count = 0;\n            add_option(\"edcal_count\", $edcal_count, \"\", \"yes\");\n        }\n            \n        if (get_option(\"edcal_do_feedback\") != \"done\") {\n            $edcal_count++;\n            update_option(\"edcal_count\", $edcal_count);\n        }\n        \n        /*\n         * This section of code embeds certain CSS and\n         * JavaScript files into the HTML.  This has the \n         * advantage of fewer HTTP requests, but the \n         * disadvantage that the browser can't cache the\n         * results.  We only do this for files that will\n         * be used on this page and nowhere else.\n         */\n         \n        echo '<!-- This is the styles from time picker.css -->';\n        echo '<style type=\"text/css\">';\n        $this->edcal_echoFile(dirname( __FILE__ ) . \"/lib/timePicker.css\");\n        echo '</style>';\n        \n        echo '<!-- This is the styles from humanmsg.css -->';\n        echo '<style type=\"text/css\">';\n        $this->edcal_echoFile(dirname( __FILE__ ) . \"/lib/humanmsg.css\");\n        echo '</style>';\n        \n        echo '<!-- This is the styles from edcal.css -->';\n        echo '<style type=\"text/css\">';\n        $this->edcal_echoFile(dirname( __FILE__ ) . \"/edcal.css\");\n        echo '</style>';\n        \n        /*\n         * We want to add the right to left stylesheet if \n         * we're in a right to left language.\n         */\n        if (__('ltr', 'editorial-calendar') == 'rtl') {\n            echo '<!-- This is the styles from edcal_rtl.css -->';\n            echo '<style type=\"text/css\">';\n            $this->edcal_echoFile(dirname( __FILE__ ) . \"/edcal_rtl.css\");\n            echo '</style>';\n        }\n        \n        \n        ?>\n        \n        <!-- This is just a little script so we can pass the AJAX URL and some localized strings -->\n        <script type=\"text/javascript\">\n            jQuery(document).ready(function(){\n                edcal.plugin_url = '<?php echo(plugins_url(\"/\", __FILE__ )); ?>';\n                edcal.wp_nonce = '<?php echo wp_create_nonce(\"edit-calendar\"); ?>';\n                <?php \n                    if (get_option(\"edcal_weeks_pref\") != \"\") {\n                ?>\n                    edcal.weeksPref = <?php echo(get_option(\"edcal_weeks_pref\")); ?>;\n                <?php\n                    }\n                ?>\n                \n                <?php \n                    if (get_option(\"edcal_author_pref\") != \"\") {\n                ?>\n                    edcal.authorPref = <?php echo(get_option(\"edcal_author_pref\")); ?>;\n                <?php\n                    }\n                ?>\n                \n                <?php \n                    if (get_option(\"edcal_time_pref\") != \"\") {\n                ?>\n                    edcal.timePref = <?php echo(get_option(\"edcal_time_pref\")); ?>;\n                <?php\n                    }\n                ?>\n                \n                <?php \n                    if (get_option(\"edcal_status_pref\") != \"\") {\n                ?>\n                    edcal.statusPref = <?php echo(get_option(\"edcal_status_pref\")); ?>;\n                <?php\n                    }\n                ?>\n                \n                <?php \n                    if (get_option(\"edcal_do_feedback\") != \"done\") {\n                ?>\n                    edcal.doFeedbackPref = true;\n                    edcal.visitCount = <?php echo(get_option(\"edcal_count\")); ?>;\n                <?php\n                    }\n                ?>\n    \n                <?php $this->edcal_getLastPost(); ?>\n                \n                edcal.startOfWeek = <?php echo(get_option(\"start_of_week\")); ?>;\n                edcal.timeFormat = \"<?php echo(get_option(\"time_format\")); ?>\";\n                edcal.previewDateFormat = \"MMMM d\";\n                edcal.defaultTime = \"<?php echo $this->default_time; ?>\";\n    \n                /*\n                 * We want to show the day of the first day of the week to match the user's \n                 * country code.  The problem is that we can't just use the WordPress locale.\n                 * If the locale was fr-FR so we started the week on Monday it would still \n                 * say Sunday was the first day if we didn't have a proper language bundle\n                 * for French.  Therefore we must depend on the language bundle writers to\n                 * specify the locale for the language they are adding.\n                 * \n                 */\n                edcal.locale = '<?php echo(__('en-US', 'editorial-calendar')) ?>';\n                \n                /*\n                 * These strings are all localized values.  The WordPress localization mechanism \n                 * doesn't really extend to JavaScript so we localize the strings in PHP and then\n                 * pass the values to JavaScript.\n                 */\n                \n                edcal.str_by = <?php echo($this->edcal_json_encode(__('%1$s by %2$s', 'editorial-calendar'))) ?>;\n                \n                edcal.str_addPostLink = <?php echo($this->edcal_json_encode(__('New Post', 'editorial-calendar'))) ?>;\n                edcal.str_addDraftLink = <?php echo($this->edcal_json_encode(__('New Draft', 'editorial-calendar'))) ?>;\n                edcal.ltr = <?php echo($this->edcal_json_encode(__('ltr', 'editorial-calendar'))) ?>;\n                \n                edcal.str_draft = <?php echo($this->edcal_json_encode(__(' [DRAFT]', 'editorial-calendar'))) ?>;\n                edcal.str_pending = <?php echo($this->edcal_json_encode(__(' [PENDING]', 'editorial-calendar'))) ?>;\n                edcal.str_sticky = <?php echo($this->edcal_json_encode(__(' [STICKY]', 'editorial-calendar'))) ?>;\n                edcal.str_draft_sticky = <?php echo($this->edcal_json_encode(__(' [DRAFT, STICKY]', 'editorial-calendar'))) ?>;\n                edcal.str_pending_sticky = <?php echo($this->edcal_json_encode(__(' [PENDING, STICKY]', 'editorial-calendar'))) ?>;\n                edcal.str_edit = <?php echo($this->edcal_json_encode(__('Edit', 'editorial-calendar'))) ?>;\n                edcal.str_quick_edit = <?php echo($this->edcal_json_encode(__('Quick Edit', 'editorial-calendar'))) ?>;\n                edcal.str_del = <?php echo($this->edcal_json_encode(__('Delete', 'editorial-calendar'))) ?>;\n                edcal.str_view = <?php echo($this->edcal_json_encode(__('View', 'editorial-calendar'))) ?>;\n                edcal.str_republish = <?php echo($this->edcal_json_encode(__('Edit', 'editorial-calendar'))) ?>;\n                edcal.str_status = <?php echo($this->edcal_json_encode(__('Status:', 'editorial-calendar'))) ?>;\n                edcal.str_cancel = <?php echo($this->edcal_json_encode(__('Cancel', 'editorial-calendar'))) ?>;\n                edcal.str_posttitle = <?php echo($this->edcal_json_encode(__('Title', 'editorial-calendar'))) ?>;\n                edcal.str_postcontent = <?php echo($this->edcal_json_encode(__('Content', 'editorial-calendar'))) ?>;\n                edcal.str_newpost = <?php echo($this->edcal_json_encode(__('Add a new post on %s', 'editorial-calendar'))) ?>;\n                edcal.str_newdraft = <?php echo($this->edcal_json_encode(__('Add a new draft', 'editorial-calendar'))) ?>;\n                edcal.str_newpost_title = <?php echo($this->edcal_json_encode(sprintf(__('New %s - ', 'editorial-calendar'), $this->edcal_get_posttype_singlename()))) ?> ;\n                edcal.str_newdraft_title = <?php echo($this->edcal_json_encode(__('New Draft', 'editorial-calendar'))) ?>;\n                edcal.str_update = <?php echo($this->edcal_json_encode(__('Update', 'editorial-calendar'))) ?>;\n                edcal.str_publish = <?php echo($this->edcal_json_encode(__('Schedule', 'editorial-calendar'))) ?>;\n                edcal.str_review = <?php echo($this->edcal_json_encode(__('Submit for Review', 'editorial-calendar'))) ?>;\n                edcal.str_save = <?php echo($this->edcal_json_encode(__('Save', 'editorial-calendar'))) ?>;\n                edcal.str_edit_post_title = <?php echo($this->edcal_json_encode(__('Edit %1$s - %2$s', 'editorial-calendar'))) ?>;\n                edcal.str_scheduled = <?php echo($this->edcal_json_encode(__('Scheduled', 'editorial-calendar'))) ?>;\n                \n                edcal.str_del_msg1 = <?php echo($this->edcal_json_encode(__('You are about to delete the post \"', 'editorial-calendar'))) ?>;\n                edcal.str_del_msg2 = <?php echo($this->edcal_json_encode(__('\". Press Cancel to stop, OK to delete.', 'editorial-calendar'))) ?>;\n                \n                edcal.concurrency_error = <?php echo($this->edcal_json_encode(__('Looks like someone else already moved this post.', 'editorial-calendar'))) ?>;\n                edcal.permission_error = <?php echo($this->edcal_json_encode(__('You do not have permission to edit posts.', 'editorial-calendar'))) ?>;\n                edcal.checksum_error = <?php echo($this->edcal_json_encode(__('Invalid checksum for post. This is commonly a cross-site scripting error.', 'editorial-calendar'))) ?>;\n                edcal.general_error = <?php echo($this->edcal_json_encode(__('There was an error contacting your blog.', 'editorial-calendar'))) ?>;\n                \n                edcal.str_screenoptions = <?php echo($this->edcal_json_encode(__('Screen Options', 'editorial-calendar'))) ?>;\n                edcal.str_optionscolors = <?php echo($this->edcal_json_encode(__('Colors', 'editorial-calendar'))) ?>;\n                edcal.str_optionsdraftcolor = <?php echo($this->edcal_json_encode(__('Drafts: ', 'editorial-calendar'))) ?>;\n                edcal.str_apply = <?php echo($this->edcal_json_encode(__('Apply', 'editorial-calendar'))) ?>;\n                edcal.str_show_title = <?php echo($this->edcal_json_encode(__('Show on screen', 'editorial-calendar'))) ?>;\n                edcal.str_opt_weeks = <?php echo($this->edcal_json_encode(__(' weeks at a time', 'editorial-calendar'))) ?>;\n                edcal.str_show_opts = <?php echo($this->edcal_json_encode(__('Show in Calendar Cell', 'editorial-calendar'))) ?>;\n                edcal.str_opt_author = <?php echo($this->edcal_json_encode(__('Author', 'editorial-calendar'))) ?>;\n                edcal.str_opt_status = <?php echo($this->edcal_json_encode(__('Status', 'editorial-calendar'))) ?>;\n                edcal.str_opt_time = <?php echo($this->edcal_json_encode(__('Time of day', 'editorial-calendar'))) ?>;\n                edcal.str_fatal_error = <?php echo($this->edcal_json_encode(__('An error occurred while loading the calendar: ', 'editorial-calendar'))) ?>;\n                \n                edcal.str_weekserror = <?php echo($this->edcal_json_encode(__('The calendar can only show between 1 and 8 weeks at a time.', 'editorial-calendar'))) ?>;\n                edcal.str_weekstt = <?php echo($this->edcal_json_encode(__('Select the number of weeks for the calendar to show.', 'editorial-calendar'))) ?>;\n\n                edcal.str_showdrafts = <?php echo($this->edcal_json_encode(__('Show Unscheduled Drafts'))) ?>;\n                edcal.str_hidedrafts = <?php echo($this->edcal_json_encode(__('Hide Unscheduled Drafts'))) ?>;\n    \n                edcal.str_feedbackmsg = <?php echo($this->edcal_json_encode(__('<div id=\"feedbacksection\">' . \n                 '<h2>Help us Make the Editorial Calendar Better</h2>' .\n                 'We are always trying to improve the Editorial Calendar and you can help. May we collect some data about your blog and browser settings to help us improve this plugin?  We\\'ll only do it once and your blog will show up on our <a target=\"_blank\" href=\"http://www.zackgrossbart.com/edcal/mint/\">Editorial Calendar Statistics page</a>.<br /><br />' . \n                 '<button class=\"button-secondary\" onclick=\"edcal.doFeedback();\">Collect Data</button> ' . \n                 '<a href=\"#\" id=\"nofeedbacklink\" onclick=\"edcal.noFeedback(); return false;\">No thank you</a></div>', 'editorial-calendar'))) ?>;\n    \n                edcal.str_feedbackdone = <?php echo($this->edcal_json_encode(__('<h2>We\\'re done</h2>We\\'ve finished collecting data.  Thank you for helping us make the calendar better.', 'editorial-calendar'))) ?>;\n            });\n        </script>\n        \n        <?php\n        /*\n         * There are a few images we want to reference where we need the full path to the image\n         * since we don't want to make assumptions about the plugin file structure.  We need to \n         * set those here since we need PHP to get the full path.  \n         */\n        ?>\n    \n        <style type=\"text/css\">\n            .loadingclass > .postlink, .loadingclass:hover > .postlink, .tiploading {\n                background-image: url('<?php echo(admin_url(\"images/loading.gif\", __FILE__ )); ?>');\n            }\n    \n            #loading {\n                background-image: url('<?php echo(admin_url(\"images/loading.gif\", __FILE__ )); ?>');\n            }\n    \n            #tipclose {\n                background-image: url('<?php echo(plugins_url(\"images/tip_close.png\", __FILE__ )); ?>');\n            }\n    \n        </style>\n        \n        <?php\n        echo '<!-- This is the code from edcal.js -->';\n        echo '<script type=\"text/javascript\">';\n        if (isset($_GET['debug'])) {\n            $this->edcal_echoFile(dirname( __FILE__ ) . \"/edcal.js\");\n        } else {\n            $this->edcal_echoFile(dirname( __FILE__ ) . \"/edcal.min.js\");\n        }\n        echo '</script>';\n        \n        ?>\n        \n        <div class=\"wrap\">\n            <div class=\"icon32\" id=\"icon-edit\"><br/></div>\n            <h2 id=\"edcal_main_title\"><?php echo sprintf( __('%1$s Calendar', 'editorial-calendar'), $this->edcal_get_posttype_multiplename() ) ?></h2>\n            \n            <div id=\"loadingcont\">\n                <div id=\"loading\"> </div>\n            </div>\n            \n            <div id=\"topbar\" class=\"tablenav clearfix\">\n                <div id=\"topleft\" class=\"tablenav-pages alignleft\">\n                    <h3>\n                        <a href=\"#\" title=\"<?php echo(__('Jump back', 'editorial-calendar')) ?>\" class=\"prev page-numbers\" id=\"prevmonth\">&lsaquo;</a>\n                        <span id=\"currentRange\"></span>\n                        <a href=\"#\" title=\"<?php echo(__('Skip ahead', 'editorial-calendar')) ?>\" class=\"next page-numbers\" id=\"nextmonth\">&rsaquo;</a>\n                        <a class=\"next page-numbers\" title=\"<?php echo(__('Scroll the calendar and make the last post visible', 'editorial-calendar')) ?>\" id=\"moveToLast\">&raquo;</a>\n\n                        <a class=\"next page-numbers\" title=\"<?php echo(__('Scroll the calendar and make the today visible', 'editorial-calendar')) ?>\" id=\"moveToToday\"><?php echo(__('Show Today', 'editorial-calendar')) ?></a>\n                        \n                        \n                    </h3>\n                </div>\n\n                <div id=\"topright\" class=\"tablenav-pages alignright\">\n                    <a class=\"next page-numbers\" title=\"<?php echo(__('Show unscheduled posts', 'editorial-calendar')) ?>\" id=\"showdraftsdrawer\"><?php echo(__('Show Unscheduled Drafts', 'editorial-calendar')) ?></a>\n                </div>\n            </div>\n            \n            <div id=\"draftsdrawer_cont\">\n                <div id=\"draftsdrawer\">\n                    <div class=\"draftsdrawerheadcont\" title=\"<?php echo(__('Unscheduled draft posts', 'editorial-calendar')) ?>\"><div class=\"dayhead\"><?php echo(__('Unscheduled', 'editorial-calendar')) ?></div></div>\n                    <div class=\"day\" id=\"00000000\">\n                        <div id=\"draftsdrawer_loading\"></div>\n                        <div id=\"unscheduled\" class=\"dayobj\"></div>\n                    </div>\n                </div>\n            </div>\n            \n            <div id=\"cal_cont\">\n                <div id=\"edcal_scrollable\" class=\"edcal_scrollable vertical\">\n                    <div id=\"cal\"></div>\n                </div>\n            </div>\n\n            <?php $this->edcal_edit_popup(); ?>\n            \n        </div><?php // end .wrap ?>\n    \n        <?php\n    }\n    \n    /*\n     * Generate the DOM elements for the quick edit popup from\n     * within the calendar.\n     */\n    function edcal_edit_popup() {\n    \n    ?>\n          <div id=\"edcal_quickedit\" style=\"display:none;\">\n            <div id=\"tooltiphead\">\n              <h3 id=\"tooltiptitle\"><?php _e('Edit Post', 'editorial-calendar') ?></h3>\n              <a href=\"#\" id=\"tipclose\" onclick=\"edcal.hideForm(); return false;\" title=\"close\"> </a>\n            </div>\n    \n                <div class=\"edcal_quickedit inline-edit-row\">\n    \n                    <fieldset>\n    \n                    <label>\n                        <span class=\"title\"><?php _e('Title', 'editorial-calendar') ?></span>\n                        <span class=\"input-text-wrap\"><input type=\"text\" class=\"ptitle\" id=\"edcal-title-new-field\" name=\"title\" /></span>\n                    </label>\n    \n                    <label>\n                        <span class=\"title\"><?php _e('Content', 'editorial-calendar') ?></span>\n                        <span class=\"input-text-wrap\"><textarea cols=\"15\" rows=\"7\" id=\"content\" name=\"content\"></textarea></span>\n                    </label>\n    \n                    <div id=\"timeEditControls\">\n                        <label>\n                            <span class=\"title\"><?php _e('Time', 'editorial-calendar') ?></span>\n                            <span class=\"input-text-wrap\"><input type=\"text\" class=\"ptitle\" id=\"edcal-time\" name=\"time\" value=\"\" size=\"8\" maxlength=\"8\" autocomplete=\"off\" /></span>\n                        </label>\n                            \n                        <label>\n                            <span class=\"title\"><?php _e('Status', 'editorial-calendar') ?></span>\n                            <span class=\"input-text-wrap\">\n                                <select name=\"status\" id=\"edcal-status\">\n                                    <option value=\"draft\"><?php _e('Draft', 'editorial-calendar') ?></option>\n                                    <option value=\"pending\"><?php _e('Pending Review', 'editorial-calendar') ?></option>\n                                    <?php if ( current_user_can('publish_posts') ) {?>\n                                        <option id=\"futureoption\" value=\"future\"><?php _e('Scheduled', 'editorial-calendar') ?></option>\n                                    <?php } ?>\n                                </select>\n                            </span>\n                        </label>\n                    </div>\n    \n    <?php /*                <label>\n                        <span class=\"title\"><?php _e('Author', 'editorial-calendar') ?></span>\n                        <span id=\"edcal-author-p\"><!-- Placeholder for the author's name, added dynamically --></span>\n                    </label>\n    */ ?>\n                    </fieldset>\n    \n                    <p class=\"submit inline-edit-save\" id=\"edit-slug-buttons\">\n                        <a class=\"button-primary disabled\" id=\"newPostScheduleButton\" href=\"#\"><?php _e('Schedule', 'editorial-calendar') ?></a>\n                        <a href=\"#\" onclick=\"edcal.hideForm(); return false;\" class=\"button-secondary cancel\"><?php _e('Cancel', 'editorial-calendar') ?></a>\n                    </p>\n    \n                    <input type=\"hidden\" id=\"edcal-date\" name=\"date\" value=\"\" />\n                    <input type=\"hidden\" id=\"edcal-id\" name=\"id\" value=\"\" />\n    \n                </div><?php // end .tooltip ?>\n            </div><?php // end #tooltip \n    }\n    \n    /*\n     * When we get a set of posts to populate the calendar we don't want\n     * to get all of the posts.  This filter allows us to specify the dates\n     * we want. We also exclude posts that have not been set to a specific date.\n     */\n    function edcal_filter_where($where = '') {\n        global $edcal_startDate, $edcal_endDate;\n        if ($edcal_startDate == '00000000') {\n            $where .= \" AND post_date_gmt LIKE '0000%'\";\n        } else {\n            /*\n             * The start date and end date come from the client and we want to make\n             * sure there's no SQL injection attack here.  We know these values must\n             * be dates in a format like 2013-02-03.  Date parsing is complex and PHP\n             * dates allow a lot of different formats.  The simplest way to make sure\n             * this isn't a SQL injection attack is to remove the dashes and check if\n             * the result is numeric.  If it is then this can't be a SQL injection attack.\n             */\n             if (!is_numeric(str_replace(\"-\", \"\", $edcal_startDate)) || !is_numeric(str_replace(\"-\", \"\", $edcal_endDate))) {\n                die(\"The specified start date and end date for the posts query must be numeric.\");\n             }\n             \n            $where .= \" AND post_date >= '\" . $edcal_startDate . \"' AND post_date < '\" . $edcal_endDate . \"' AND post_date_gmt NOT LIKE '0000%'\";\n        }\n        return $where;\n    }\n    \n    /*\n     * This function adds all of the JavaScript files we need.\n     *\n     */\n    function edcal_scripts() {\n        /*\n         * To get proper localization for dates we need to include the correct JavaScript file for the current\n         * locale.  We can do this based on the locale in the localized bundle to make sure the date locale matches\n         * the locale for the other strings.\n         */\n        wp_enqueue_script('jquery');\n        wp_enqueue_script('jquery-ui-draggable');\n        wp_enqueue_script('jquery-ui-droppable');\n    \n        //wp_enqueue_script(\"date-extras\", plugins_url(\"lib/date.extras.js\", __FILE__ ), array( 'jquery' ));\n    \n        wp_enqueue_script(\"edcal-date\", plugins_url(\"lib/languages/date-\".__('en-US', 'editorial-calendar').\".js\", __FILE__ ));\n        wp_enqueue_script(\"edcal-lib\", plugins_url(\"lib/edcallib.min.js\", __FILE__ ), array( 'jquery' ));\n    \n        if (isset($_GET['qunit'])) {\n            wp_enqueue_script(\"qunit\", plugins_url(\"lib/qunit.js\", __FILE__ ), array( 'jquery' ));\n            wp_enqueue_script(\"edcal-test\", plugins_url(\"edcal_test.js\", __FILE__ ), array( 'jquery' ));\n        }\n        \n        return;\n        \n        /*\n         * If you're using one of the specific libraries you should comment out the two lines\n         * above this comment.\n         */\n        wp_enqueue_script(\"bgiframe\", plugins_url(\"lib/jquery.bgiframe.js\", __FILE__ ), array( 'jquery' ));\n        wp_enqueue_script(\"humanMsg\", plugins_url(\"lib/humanmsg.js\", __FILE__ ), array( 'jquery' ));\n        wp_enqueue_script(\"jquery-timepicker\", plugins_url(\"lib/jquery.timepicker.js\", __FILE__ ), array( 'jquery' ));\n        \n        wp_enqueue_script(\"scrollable\", plugins_url(\"lib/tools.scrollable-1.1.2.js\", __FILE__ ), array( 'jquery' ));\n        wp_enqueue_script(\"mouse-wheel\", plugins_url(\"lib/lib/tools.scrollable.mousewheel-1.0.1.js\", __FILE__ ), array( 'jquery' ));\n    \n        wp_enqueue_script(\"json-parse2\", plugins_url(\"lib/json2.js\", __FILE__ ), array( 'jquery' ));\n    }\n    \n    /*\n     * This is an AJAX call that gets the posts between the from date \n     * and the to date.  \n     */\n    function edcal_posts() {\n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n        \n        global $edcal_startDate, $edcal_endDate;\n        \n        $edcal_startDate = isset($_GET['from']) ? $_GET['from'] : null;\n        $edcal_endDate = isset($_GET['to']) ? $_GET['to'] : null;\n        global $post;\n        $args = array(\n            'posts_per_page' => -1,\n            'post_status' => \"publish&future&draft\",\n            'post_parent' => null // any parent\n        );\n\n        /* \n         * If we're in the specific post type case we need to add\n         * the post type to our query.\n         */\n        $post_type = isset($_GET['post_type'])?$_GET['post_type']:null;\n        if ($post_type) {\n            $args['post_type'] = $post_type;\n        }\n\n        /* \n         * If we're getting the list of posts for the drafts drawer we\n         * want to sort them by the post title.\n         */\n        if ($edcal_startDate == '00000000') {\n            $args['orderby'] = 'title';\n        }\n\n        /* \n         * We add a WHERE clause to filter by calendar date and/or by whether\n         * or not the posts have been scheduled to a specific date:\n         * WHERE `post_date_gmt` = '0000-00-00 00:00:00'\n         */\n        add_filter( 'posts_where', array(&$this, 'edcal_filter_where' ));\n        $myposts = query_posts($args);\n        remove_filter( 'posts_where', array(&$this, 'edcal_filter_where' ));\n\n        ?>[\n        <?php\n        $size = sizeof($myposts);\n        \n        for($i = 0; $i < $size; $i++) {    \n            $post = $myposts[$i];\n            $this->edcal_postJSON($post, $i < $size - 1);\n        }\n        \n        ?> ]\n        <?php\n        \n        die();\n    }\n    \n    /*\n     * This filter specifies a special WHERE clause so we just get the posts we're \n     * interested in for the last post.\n     */\n    function edcal_lastpost_filter_where($where = '') {\n        $where .= \" AND (`post_status` = 'draft' OR `post_status` = 'publish' OR `post_status` = 'future')\";\n        return $where;\n    }\n    \n    /*\n     * Get information about the last post (the one furthest in the future) and make\n     * that information available to the JavaScript code so it can make the last post\n     * button work.\n     */\n    function edcal_getLastPost() {\n        $args = array(\n            'posts_per_page' => 1,\n            'post_parent' => null,\n            'order' => 'DESC'\n        );\n        \n        add_filter( 'posts_where', array(&$this, 'edcal_lastpost_filter_where' ));\n        $myposts = query_posts($args);\n        remove_filter( 'posts_where', array(&$this, 'edcal_lastpost_filter_where' ));\n        \n        if (sizeof($myposts) > 0) {\n            $post = $myposts[0];\n            setup_postdata($post);\n            ?>\n            edcal.lastPostDate = '<?php echo(date('dmY',strtotime($post->post_date))); ?>';\n            edcal.lastPostId = '<?php echo($post->ID); ?>';\n            <?php\n        } else {\n            ?>\n            edcal.lastPostDate = '-1';\n            edcal.lastPostId = '-1';\n            <?php\n        }\n    }\n    \n    /*\n     * This is for an AJAX call that returns a post with the specified ID\n     */\n    function edcal_getpost() {\n        \n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        // If nonce fails, return\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n        \n        $post_id = isset($_GET['postid'])?intval($_GET['postid']):-1;\n        \n        // If a proper post_id wasn't passed, return\n        if(!$post_id) die();\n        \n        $args = array(\n            'post__in' => array($post_id)\n        );\n        \n        /* \n         * If we're in the specific post type case we need to add\n         * the post type to our query.\n         */\n        $post_type = isset($_GET['post_type'])?$_GET['post_type']:null;\n        if ($post_type) {\n            $args['post_type'] = $post_type;\n        }\n        \n        $post = query_posts($args);\n        \n        // get_post and setup_postdata don't get along, so we're doing a mini-loop\n        if(have_posts()) :\n            while(have_posts()) : the_post();\n                ?>\n                {\n                \"post\" :\n                    <?php\n                    $this->edcal_postJSON($post[0], false, true);\n                    ?>\n                }\n                <?php\n            endwhile;\n        endif;\n        die();\n    }\n    \n    /*\n     * Wrap php's json_encode() for a WP-specific apostrophe bug\n     */\n    function edcal_json_encode($string) {\n        /*\n         * WordPress escapes apostrophe's when they show up in post titles as &#039;\n         * This is the HTML ASCII code for a straight apostrophe.  This works well\n         * with Firefox, but IE complains with a very unhelpful error message.  We\n         * can replace them with a right curly apostrophe since that works in IE\n         * and Firefox. It is also a little nicer typographically.  \n         */\n        return json_encode(str_replace(\"&#039;\", \"&#146;\", $string));\n    }\n    \n    /* \n     * This helper functions gets the plural name of the post\n     * type specified by the post_type parameter.\n     */\n    function edcal_get_posttype_multiplename() {\n    \n        $post_type = isset($_GET['post_type'])?$_GET['post_type']:null;\n        if (!$post_type) {\n            return __('Posts ', 'editorial-calendar');\n        }\n    \n        $postTypeObj = get_post_type_object($post_type);\n        return $postTypeObj->labels->name;\n    }\n    \n    /* \n     * This helper functions gets the singular name of the post\n     * type specified by the post_type parameter.\n     */\n    \n    function edcal_get_posttype_singlename() {\n    \n        $post_type = isset($_GET['post_type'])?$_GET['post_type']:null;\n        if (!$post_type) {\n            return __('Post ', 'editorial-calendar');\n        }\n    \n        $postTypeObj = get_post_type_object($post_type);\n        return $postTypeObj->labels->singular_name;\n    }\n    \n    /*\n     * This function sets up the post data and prints out the values we\n     * care about in a JSON data structure.  This prints out just the\n     * value part. If $fullPost is set to true, post_content is also returned.\n     */\n    function edcal_postJSON($post, $addComma = true, $fullPost = false) {\n        $timeFormat = get_option(\"time_format\");\n        if ($timeFormat == \"g:i a\") {\n            $timeFormat = \"ga\";\n        } else if ($timeFormat == \"g:i A\") {\n            $timeFormat = \"gA\";\n        } else if ($timeFormat == \"H:i\") {\n            $timeFormat = \"H\";\n        }\n        \n        setup_postdata($post);\n        \n        if (get_post_status() == 'auto-draft' || get_post_status() == 'inherit' || get_post_status() == 'trash' ) {\n            /*\n             * WordPress 3 added a new post status of auto-draft so\n             * we want to hide them from the calendar. \n             * We also want to hide posts with type 'inherit'\n             */\n            return;\n        }\n        \n        /* \n         * We want to return the type of each post as part of the\n         * JSON data about that post.  Right now this will always\n         * match the post_type parameter for the calendar, but in\n         * the future we might support a mixed post type calendar\n         * and this extra data will become useful.  Right now we\n         * are using this data for the title on the quick edit form.\n         */\n        if( $this->supports_custom_types ) {\n            $postTypeObj = get_post_type_object(get_post_type( $post ));\n            $postTypeTitle = $postTypeObj->labels->singular_name;\n        } else {\n            $postTypeTitle = 'post';\n        }\n\n        $post_date_gmt = date('dmY',strtotime($post->post_date_gmt));\n        if ($post_date_gmt == '01011970') {\n            $post_date_gmt = '00000000';\n        }\n        \n        /*\n         * The date function in PHP isn't consistent in the way it handles\n         * formatting dates that are all zeros.  In that case we can manually\n         * format the all zeros date so it shows up properly.\n         */\n        if ($post->post_date_gmt == '0000-00-00 00:00:00') {\n            $post_date_gmt = '00000000';\n        }\n        \n        \n        ?>\n            {\n                \"date\" : \"<?php the_time('d') ?><?php the_time('m') ?><?php the_time('Y') ?>\", \n                \"date_gmt\" : \"<?php echo $post_date_gmt; ?>\",\n                \"time\" : \"<?php echo trim(get_the_time()) ?>\", \n                \"formattedtime\" : \"<?php $this->edcal_json_encode(the_time($timeFormat)) ?>\", \n                \"sticky\" : \"<?php echo is_sticky($post->ID) ?>\",\n                \"url\" : \"<?php $this->edcal_json_encode(the_permalink()) ?>\", \n                \"status\" : \"<?php echo get_post_status() ?>\",\n                \"orig_status\" : \"<?php echo get_post_status() ?>\",\n                \"title\" : <?php echo $this->edcal_json_encode(get_the_title()) ?>,\n                \"author\" : <?php echo $this->edcal_json_encode(get_the_author()) ?>,\n                \"type\" : \"<?php echo get_post_type( $post ) ?>\",\n                \"typeTitle\" : \"<?php echo $postTypeTitle ?>\",\n    \n                <?php if ( current_user_can('edit_post', $post->ID) ) {?>\n                \"editlink\" : \"<?php echo get_edit_post_link($post->ID) ?>\",\n                <?php } ?>\n    \n                <?php if ( current_user_can('delete_post', $post->ID) ) {?>\n                \"dellink\" : \"javascript:edcal.deletePost(<?php echo $post->ID ?>)\",\n                <?php } ?>\n    \n                \"permalink\" : \"<?php echo get_permalink($post->ID) ?>\",\n                \"id\" : \"<?php the_ID(); ?>\"\n                \n                <?php if($fullPost) : ?>\n                , \"content\" : <?php echo $this->edcal_json_encode($post->post_content) ?>\n                \n                <?php endif; ?>\n            }\n        <?php\n        if ($addComma) {\n            ?>,<?php\n        }\n    }\n    \n    /*\n     * This is a helper AJAX function to delete a post. It gets called\n     * when a user clicks the delete button, and allows the user to \n     * retain their position within the calendar without a page refresh.\n     * It is not called unless the user has permission to delete the post.\n     */\n    function edcal_deletepost() {\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n    \n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        $edcal_postid = isset($_GET['postid'])?$_GET['postid']:null;\n        $post = get_post($edcal_postid, ARRAY_A);\n        $title = $post['post_title'];\n        $date = date('dmY', strtotime($post['post_date'])); // [TODO] : is there a better way to generate the date string ... ??\n        $date_gmt = date('dmY',strtotime($post['post_date_gmt']));\n        if ($date_gmt == '01011970') {\n            $date_gmt = '00000000';\n        }\n        \n        $force = !EMPTY_TRASH_DAYS;                    // wordpress 2.9 thing. deleted post hangs around (ie in a recycle bin) after deleted for this # of days\n        if ( isset($post->post_type) && ($post->post_type == 'attachment' )) {\n            $force = ( $force || !MEDIA_TRASH );\n            if ( ! wp_delete_attachment($edcal_postid, $force) )\n                wp_die( __('Error in deleting...') );\n        } else {\n            if ( !wp_delete_post($edcal_postid, $force) )\n                wp_die( __('Error in deleting...') );\n        }\n    \n    //    return the following info so that jQuery can then remove post from edcal display :\n    ?>\n    {\n        \"post\" :\n        {\n            \"date\" : \"<?php echo $date ?>\", \n            \"title\" : \"<?php echo $title ?>\",\n            \"id\" : \"<?php echo $edcal_postid ?>\",\n            \"date_gmt\" : \"<?php echo $date_gmt; ?>\"\n        }\n    }\n    <?php\n    \n        die();    \n    }\n    \n    /*\n     * This is a helper AJAX function to change the title of a post.  It\n     * gets called from the save button in the tooltip when you change a\n     * post title in a calendar.\n     */\n    function edcal_changetitle() {\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n    \n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        $edcal_postid = isset($_GET['postid'])?$_GET['postid']:null;\n        $edcal_newTitle = isset($_GET['title'])?$_GET['title']:null;\n        \n        $post = get_post($edcal_postid, ARRAY_A);\n        setup_postdata($post);\n        \n        $post['post_title'] = wp_strip_all_tags($edcal_newTitle);\n        \n        /*\n         * Now we finally update the post into the database\n         */\n        wp_update_post( $post );\n        \n        /*\n         * We finish by returning the latest data for the post in the JSON\n         */\n        global $post;\n        $args = array(\n            'posts_id' => $edcal_postid,\n        );\n        \n        $post = get_post($edcal_postid);\n        \n        ?>{\n            \"post\" :\n        <?php\n        \n            $this->edcal_postJSON($post);\n        \n        ?>\n        }\n        <?php\n        \n        \n        die();\n    }\n    \n    /*\n     * This is a helper function to create a new blank draft\n     * post on a specified date.\n     */\n    function edcal_newdraft() {\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n    \n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        $edcal_date = isset($_POST[\"date\"])?$_POST[\"date\"]:null;\n        \n        $my_post = array();\n        $my_post['post_title'] = isset($_POST[\"title\"])?wp_strip_all_tags($_POST[\"title\"]):null;\n        $my_post['post_content'] = isset($_POST[\"content\"])?$_POST[\"content\"]:null;\n        $my_post['post_status'] = 'draft';\n        \n        $my_post['post_date'] = $edcal_date;\n        $my_post['post_date_gmt'] = get_gmt_from_date($edcal_date);\n        $my_post['post_modified'] = $edcal_date;\n        $my_post['post_modified_gmt'] = get_gmt_from_date($edcal_date);\n        \n        // Insert the post into the database\n        $my_post_id = wp_insert_post( $my_post );\n        \n        /*\n         * We finish by returning the latest data for the post in the JSON\n         */\n        global $post;\n        $post = get_post($my_post_id);\n    \n        ?>{\n            \"post\" :\n        <?php\n        \n            $this->edcal_postJSON($post, false);\n        \n        ?>\n        }\n        <?php\n        \n        die();\n    }\n    \n    /*\n     * This is a helper function to create a new draft post on a specified date\n     * or update an existing post.\n     */\n    function edcal_savepost() {\n        \n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n        \n        // Most blogs have warnings turned off by default, but if they're\n        // turned on the warnings can cause errors in the JSON data when\n        // we change the post status so we set the warning level to hide\n        // warnings and then reset it at the end of this function.\n        $my_error_level = error_reporting();\n        error_reporting(E_ERROR);\n    \n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        $edcal_date = isset($_POST[\"date\"])?$_POST[\"date\"]:null;\n        $edcal_date_gmt = isset($_POST[\"date_gmt\"])?$_POST[\"date_gmt\"]:get_gmt_from_date($edcal_date);\n        \n        $my_post = array();\n        \n        // If the post id is not specified, we're creating a new post\n        if($_POST['id'] && intval($_POST['id']) > 0) {\n            $my_post['ID'] = intval($_POST['id']);\n        } else {\n            // We have a new post\n            //$my_post['ID'] = 0; // and the post ID to 0\n            \n            // Set the status to draft unless the user otherwise specifies\n            if ($_POST['status']) {\n                $my_post['post_status'] = $_POST['status'];\n            } else {\n                $my_post['post_status'] = 'draft';\n            }\n        }\n        \n        $my_post['post_title'] = isset($_POST[\"title\"])?wp_strip_all_tags($_POST[\"title\"]):null;\n        $my_post['post_content'] = isset($_POST[\"content\"])?$_POST[\"content\"]:null;\n        \n        if ($edcal_date_gmt != '0000-00-00 00:00:00' || $my_post['ID'] > 0) {\n            /*\n             * We don't want to set a date if this a new post in the drafts\n             * drawer since WordPress 3.5 will reject new posts with a 0000 \n             * GMT date.\n             */\n            $my_post['post_date'] = $edcal_date;\n            $my_post['post_date_gmt'] = $edcal_date_gmt;\n            $my_post['post_modified'] = $edcal_date;\n            $my_post['post_modified_gmt'] = $edcal_date_gmt;\n        }\n        \n        $my_post['post_status'] = $_POST['status'];\n        \n        /* \n         * When we create a new post we need to specify the post type\n         * passed in from the JavaScript.\n         */\n        $post_type = isset($_POST[\"post_type\"])?$_POST[\"post_type\"]:null;\n        if ($post_type) {\n            $my_post['post_type'] = $post_type;\n        }\n\n        // If we are updating a post\n        if($_POST['id']) {\n            if ($_POST['status'] != $_POST['orig_status']) {\n                wp_transition_post_status($_POST['status'], $_POST['orig_status'], $my_post);\n                $my_post['post_status'] = $_POST['status'];\n            }\n            $my_post_id = wp_update_post($my_post);\n        } else {\n            // We have a new post, insert the post into the database\n            $my_post_id = wp_insert_post($my_post, true);\n        }\n        \n        // TODO: throw error if update/insert or getsinglepost fails\n        /*\n         * We finish by returning the latest data for the post in the JSON\n         */\n        $args = array(\n            'post__in' => array($my_post_id)\n        );\n        \n        if ($post_type) {\n            $args['post_type'] = $post_type;\n        }\n        $post = query_posts($args);\n        \n        // get_post and setup_postdata don't get along, so we're doing a mini-loop\n        if(have_posts()) :\n            while(have_posts()) : the_post();\n                ?>\n                {\n                \"post\" :\n                    <?php\n                    $this->edcal_postJSON($post[0], false);\n                    ?>\n                }\n                <?php\n            endwhile;\n        endif;\n        \n        error_reporting($my_error_level);\n        \n        die();\n    }\n    \n    /*\n     * This function checks the nonce for the URL.  It returns\n     * true if the nonce checks out and outputs a JSON error\n     * and returns false otherwise.\n     */\n    function edcal_checknonce() {\n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        if (!wp_verify_nonce($_REQUEST['_wpnonce'], 'edit-calendar')) {\n           /*\n             * This is just a sanity check to make sure\n             * this isn't a CSRF attack.  Most of the time this\n             * will never be run because you can't see the calendar unless\n             * you are at least an editor\n             */\n            ?>\n            {\n                \"error\": <?php echo(EDCAL_NONCE_ERROR); ?>\n            }\n            <?php\n            return false;\n        }\n        return true;\n    }\n    \n    /*\n     * This function changes the date on a post.  It does optimistic \n     * concurrency checking by comparing the original post date from\n     * the browser with the one from the database.  If they don't match\n     * then it returns an error code and the updated post data.\n     *\n     * If the call is successful then it returns the updated post data.\n     */\n    function edcal_changedate() {\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        $edcal_postid = isset($_GET['postid'])?$_GET['postid']:null;\n        $edcal_newDate = isset($_GET['newdate'])?$_GET['newdate']:null;\n        $edcal_oldDate = isset($_GET['olddate'])?$_GET['olddate']:null;\n        $edcal_postStatus = isset($_GET['postStatus'])?$_GET['postStatus']:null;\n        $move_to_drawer = $edcal_newDate == '0000-00-00';\n        $move_from_drawer = $edcal_oldDate == '00000000';\n\n        global $post;\n        $args = array(\n            'posts_id' => $edcal_postid,\n        );\n        $post = get_post($edcal_postid);\n        setup_postdata($post);\n\n        /*\n         * Posts in WordPress have more than one date.  There is the GMT date,\n         * the date in the local time zone, the modified date in GMT and the\n         * modified date in the local time zone.  We update all of them.\n         */\n        if ( $move_from_drawer ) {\n            /* \n             * Set the date to 'unscheduled' [ie. 0]. We use this date \n             * further down in the concurrency check, and this will make the dates\n             * technically off by 10 hours, but it's still the same day. We only do \n             * this for posts that were created as drafts.  Works for now, but\n             * we would have to revamp this if we use an actual timestamp check.\n             */\n            $post->post_date = '0000-00-00 ' . date('H:i:s', strtotime($post->post_date));\n        } else if ( $move_to_drawer ) {\n            // echo ( \"\\r\\npost->post_date_gmt=\".$post->post_date_gmt);\n            $post->post_date_gmt = $post->post_date;\n        } else {\n            // set the scheduled time as our original time\n            $post->post_date_gmt = $post->post_date;\n        }\n// echo ( \"\\r\\npost->post_date_gmt = $post->post_date_gmt \\r\\npost->post_date = $post->post_date\");\n\n        /*\n         * Error-checking:\n         */\n        $error = false;\n        if (!current_user_can('edit_post', $edcal_postid)) {\n            /*\n             * This is just a sanity check to make sure that the current\n             * user has permission to edit posts.  Most of the time this\n             * will never be run because you can't see the calendar unless\n             * you are at least an editor.\n             */\n            $error = EDCAL_PERMISSION_ERROR;\n        } else if ( date('Y-m-d', strtotime($post->post_date)) != date('Y-m-d', strtotime($edcal_oldDate)) ) {\n            /*\n             * We are doing optimistic concurrency checking on the dates.  If\n             * the user tries to move a post we want to make sure nobody else\n             * has moved that post since the page was last updated.  If the \n             * old date in the database doesn't match the old date from the\n             * browser then we return an error to the browser along with the\n             * updated post data.\n             */\n            $error = EDCAL_CONCURRENCY_ERROR;\n        }\n\n        if ( $error ) {\n            // die('error= '.$error);\n            ?>\n            {\n                \"error\": <?php echo $error; ?>,\n                \"post\" :\n            <?php\n                $this->edcal_postJSON($post, false, true);\n            ?> }\n            \n            <?php\n            die();\n        }\n\n\n        /*\n         * No errors, so let's go create our new post parameters to update\n         */\n        \n        $updated_post = array();\n        $updated_post['ID'] = $edcal_postid;\n\n        if ( !$move_to_drawer ) {\n            $updated_post['post_date'] = $edcal_newDate . substr($post->post_date, strlen($edcal_newDate));\n        }\n\n        /*\n         * When a user creates a draft and never sets a date or publishes it \n         * then the GMT date will have a timestamp of 00:00:00 to indicate \n         * that the date hasn't been set.  In that case we need to specify\n         * an edit date or the wp_update_post function will strip our new\n         * date out and leave the post as publish immediately.\n         */\n        $needsEditDate = preg_match( '/^0000/', $post->post_date_gmt );\n\n        if ( $needsEditDate ) {\n            // echo \"\\r\\nneeds edit date\\r\\n\";\n            $updated_post['edit_date'] = $edcal_newDate . substr($post->post_date, strlen($edcal_newDate));\n        }\n\n        if ( $move_to_drawer ) {\n            $updated_post['post_date_gmt'] = \"0000-00-00 00:00:00\";\n            $updated_post['edit_date'] = $post->post_date;\n        } else if ( $move_from_drawer ) {\n            $updated_post['post_date_gmt'] = get_gmt_from_date($post->post_date);\n            $updated_post['post_modified_gmt'] = get_gmt_from_date($post->post_date);\n        }\n\n        /*\n         * We need to make sure to use the GMT formatting for the date.\n         */\n        if ( !$move_to_drawer ) {\n            $updated_post['post_date_gmt'] = get_gmt_from_date($updated_post['post_date']);\n            $updated_post['post_modified'] = $edcal_newDate . substr($post->post_modified, strlen($edcal_newDate));\n            $updated_post['post_modified_gmt'] = get_gmt_from_date($updated_post['post_date']);\n        }\n        \n        if ($edcal_postStatus != $post->post_status) {\n            /*\n             * We only want to update the post status if it has changed.\n             * If the post status has changed that takes a few more steps\n             */\n            wp_transition_post_status($edcal_postStatus, $post->post_status, $post);\n            $updated_post['post_status'] = $edcal_postStatus;\n            \n            // Update counts for the post's terms.\n            foreach ( (array) get_object_taxonomies('post') as $taxonomy ) {\n                $tt_ids = wp_get_object_terms($post_id, $taxonomy, 'fields=tt_ids');\n                wp_update_term_count($tt_ids, $taxonomy);\n            }\n            \n            do_action('edit_post', $edcal_postid, $post);\n            do_action('save_post', $edcal_postid, $post);\n            do_action('wp_insert_post', $edcal_postid, $post);\n        }\n        \n// die(var_dump($updated_post).'success!');\n        /*\n         * Now we finally update the post into the database\n         */\n        wp_update_post( $updated_post );\n        \n        /*\n         * We finish by returning the latest data for the post in the JSON\n         */\n        global $post;\n        $args = array(\n            'posts_id' => $edcal_postid,\n        );\n        \n        $post = get_post($edcal_postid);\n        ?>{\n            \"post\" :\n            \n        <?php\n            $this->edcal_postJSON($post, false, true);\n        ?>}\n        <?php\n        \n        die();\n    }\n    \n    /*\n     * This function saves the preferences\n     */\n    function edcal_saveoptions() {\n        if (!$this->edcal_checknonce()) {\n            die();\n        }\n    \n        header(\"Content-Type: application/json\");\n        $this->edcal_addNoCacheHeaders();\n        \n        /*\n         * The number of weeks preference\n         */\n        $edcal_weeks = isset($_GET['weeks'])?$_GET['weeks']:null;\n        if ($edcal_weeks != null) {\n            add_option(\"edcal_weeks_pref\", $edcal_weeks, \"\", \"yes\");\n            update_option(\"edcal_weeks_pref\", $edcal_weeks);\n        }\n        \n        /*\n         * The show author preference\n         */\n        $edcal_author = isset($_GET['author-hide'])?$_GET['author-hide']:null;\n        if ($edcal_author != null) {\n            add_option(\"edcal_author_pref\", $edcal_author, \"\", \"yes\");\n            update_option(\"edcal_author_pref\", $edcal_author);\n        }\n        \n        /*\n         * The show status preference\n         */\n        $edcal_status = isset($_GET['status-hide'])?$_GET['status-hide']:null;\n        if ($edcal_status != null) {\n            add_option(\"edcal_status_pref\", $edcal_status, \"\", \"yes\");\n            update_option(\"edcal_status_pref\", $edcal_status);\n        }\n        \n        /*\n         * The show time preference\n         */\n        $edcal_time = isset($_GET['time-hide'])?$_GET['time-hide']:null;\n        if ($edcal_time != null) {\n            add_option(\"edcal_time_pref\", $edcal_time, \"\", \"yes\");\n            update_option(\"edcal_time_pref\", $edcal_time);\n        }\n    \n        /*\n         * The edcal feedback preference\n         */\n        $edcal_feedback = isset($_GET['dofeedback'])?$_GET['dofeedback']:null;\n        if ($edcal_feedback != null) {\n            add_option(\"edcal_do_feedback\", $edcal_feedback, \"\", \"yes\");\n            update_option(\"edcal_do_feedback\", $edcal_feedback);\n        }\n        \n        /*\n         * We finish by returning the latest data for the post in the JSON\n         */\n        ?>{\n            \"update\" : \"success\"\n        }\n        <?php\n        \n        die();\n    }\n    \n    /*\n     * Add the no cache headers to make sure that our responses aren't\n     * cached by the browser.\n     */\n    function edcal_addNoCacheHeaders() {\n        header(\"Cache-Control: no-cache, must-revalidate\"); // HTTP/1.1\n        header(\"Expires: Sat, 26 Jul 1997 05:00:00 GMT\"); // Date in the past\n    }\n\n}\n\n?>", "=== Editorial Calendar ===\nContributors: cvernon, justinstresslimit, jkudish, MaryVogt, zgrossbart\nTags: posts, post, calendar, AJAX, admin, administration\nRequires at least: 2.8.5\nTested up to: 3.5.1\nStable tag: 2.6\n\nThe Editorial Calendar makes it possible to see all your posts and drag and drop them to manage your blog.\n\n== Description ==\n\nDid you remember to write a post for next Tuesday?  What about the Tuesday after that?  WordPress doesn't make it easy to see when your posts are scheduled.  The editorial calendar gives you an overview of your blog and when each post will be published.  You can drag and drop to move posts, edit posts right in the calendar, and manage your entire blog.  \n\n<h4>Watch the video</h4>\n\n[vimeo http://vimeo.com/47251750]\n\n<h4>Try it out</h4>\nTry the calendar before you install it.  Check out the demo installation at <a href=\"http://www.zackgrossbart.com/extras/sandbox/wp-admin/edit.php?page=cal\">Zack's WordPress Sandbox</a>.\n\n\n<h4>Features</h4>\n\n1. See all of your posts and when they'll be posted.\n1. Drag and drop to change your post dates.\n1. Manage your drafts with our new drafts drawer.\n1. Quickedit post titles, contents, and times.\n1. Publish posts or manage drafts.\n1. Easily see the status of your posts.\n1. Manage posts from multiple authors.\n\n<h4>Make it better</h4>\n\nThank you to everyone who has given us feedback and helped us improve this plugin.  If you have questions, problems, or ideas for new features please let us know at <a href=\"mailto:wp-edcal@googlegroups.com\">wp-edcal@googlegroups.com</a>.\n\n<h4>Translate it</h4>\n\nAgain, thanks to all who have already helped make the plugin available in so many languages. If you would like to help us translate the plugin into your language, or if you use it in a language other than English already and would like to help us keep it up to date, please write to us at <a href=\"mailto:wp-edcal@googlegroups.com\">wp-edcal@googlegroups.com</a>\n\n== Installation ==\n\n1. <b>Backup your WordPress database</b>.\n1. Upload the plugin directory <code>editorial-calendar</code> to the <code>wp-content/plugins</code> directory.\n1. Activate the plugin through the 'Plugins' menu in WordPress.\n1. Click the new 'Calendar' option under the 'Posts' menu or any other custom post types.\n\n== Frequently Asked Questions ==\n\n= What is an editorial calendar? =\n\nAn editorial calendar is simply a plan for your blog.  It is thinking ahead about what you're going to write.  There's a detailed explanation of editorial calendars at <a href=\"http://www.copyblogger.com/editorial-calendar/\">The Easy-to-Use Tool that Helps You Build a Breakthrough Blog</a> from <a href=\"http://www.copyblogger.com/\">Copyblogger</a>.\n\n= What are other people saying about the calendar? =\n\nFrom time to time people write articles about the editorial calendar.  We appreciate every one.\n\n<a href=\"http://www.dailyblogtips.com/5-reasons-youll-love-the-wordpress-editorial-calendar/\">5 Reasons You\u2019ll Love the WordPress Editorial Calendar</a> by <a href=\"http://www.successfulblogging.com/\">Annabel Candy</a>\n\n<a href=\"http://www.chrisbrogan.com/use-an-editorial-calendar/\">Use An Editorial Calendar</a> by <a href=\"http://www.chrisbrogan.com\">Chris Brogan</a>\n\n<a href=\"http://www.smashingmagazine.com/2010/08/30/the-importance-of-consistency-using-editorial-calendars-and-style-guides/\">Blogging For Web Designers: Editorial Calendars and Style Guides</a> by <a href=\"http://jessica.smashingmagazine.com/\">Jessica Bordeau</a> at <a href=\"http://www.smashingmagazine.com/\">Smashing Magazine</a>\n\n<a href=\"http://mydigitalinternet.com/2010/editorial-calendar-wordpress-plugin-review\">\nEditorial Calendar WordPress plugin review</a> by Stephen Duckworth at <a href=\"http://mydigitalinternet.com/\">My Digital Internet</a>\n\n<a href=\"http://www.disruptiveconversations.com/2010/09/brogan-is-right-the-editorial-calendar-wordpress-plugin-truly-rocks.html\">Brogan is right - the \"Editorial Calendar\" WordPress plugin truly rocks!</a> by <a href=\"http://www.danyork.com/\">Dan York</a>\n\n<a href=\"http://www.socialbrandingblog.com/637/editorial-calendar-plugin-for-wordpress/\">Editorial Calendar Plugin for WordPress</a> by <a href=\"http://www.socialbrandingblog.com/\">Steve Campbell</a>\n\n<a href=\"http://marketplacemommies.com/2010/an-editorial-calendar-plugin-for-wordpress/\">\nAn Editorial Calendar Plugin For WordPress</a> by <a href=\"http://marketplacemommies.com/\">Marketplace Mommies</a>\n\n<a href=\"http://www.mequoda.com/articles/editorial-strategy/editorial-calendar-wp-plugin-review/\">Great WP Plugin for Online Editors: Editorial Calendar</a> by <a href=\"http://www.mequoda.com/\">Mequoda Daily</a>\n\n<a href=\"http://chrisg.org/drag-and-drop-post-scheduling-with-the-editorial-calendar-wordpress-plugin/\">Drag and Drop Post Scheduling with the Editorial Calendar WordPress plugin</a> by <a href=\"http://chrisg.org/\">Chris Garrett</a>\n\n<a href=\"http://theincidentaleconomist.com/wordpress-plug-in-plug-editorial-calendar/\">WordPress Plug-In Plug: Editorial Calendar</a> on <a href=\"http://theincidentaleconomist.com/\">The Incidental Economist</a>\n\n<a href=\"http://www.rezdwanhamid.com/tutorials/how-to-use-editorial-calendar-plugin-for-wordpress/\">How To Use The Editorial Calendar For WordPress</a> by <a href=\"http://www.rezdwanhamid.com/\">Rezdwan Hamid</a>\n\n<a href=\"http://wordcastnet.com/2010/01/12/visually-manage-your-post-publication-dates-with-the-editorial-calendar-wordpress-plugin/\">Visually Manage Your Post Publication Dates with the Editorial Calendar WordPress Plugin</a> on <a href=\"http://wordcastnet.com/\">WordCast</a>\n\n<a href=\"http://askcharlyleetham.com/blog/guest-authors/powerful-plugins-that-keep-you-organized-and-increase-your-productivity/comment-page-1#comment-5791\">Powerful Plugins That Keep You Organized and Increase Your Productivity</a> at <a href=\"http://www.askcharlyleetham.com\">askcharlyleetham.com</a>.\n\n<a href=\"http://websuccessdiva.com/seo-copywriting-checklist/\">SEO Copywriting Checklist for Wordpress Blogs</a> on <a href=\"http://websuccessdiva.com/\">@WebSuccessDiva</a> is a good article about SEO and using an editorial calendar.\n\n= Can I see a demo of the calendar? =\n\nCheck out our demo installation at <a href=\"http://www.zackgrossbart.com/extras/sandbox/wp-admin/edit.php?page=cal\">Zack's WordPress Sandbox</a>.\n\n= How do I get help using the calendar? =\n\nThe <a href=\"http://groups.google.com/group/wp-edcal\">WordPress Editorial Calendar Google Group</a> is a good place to ask questions, find answers, and post feedback.  We also follow the WordPress.org forum <a href=\"http://wordpress.org/tags/editorial-calendar?forum_id=10\">Editorial Calendar discussion</a>. \n\n= How do I navigate in the calendar? =\n\nYou can move around in the calendar using the arrows next to the months at the top or your mouse wheel. You can also move using your keyboard:\n\n<ul>\n<li>Move 1 week into the past - Up Arrow</li>\n<li>Move 1 week into the future - Down Arrow</li>\n<li>Jump multiple weeks into the past - Page Up or Ctrl+Up Arrow</li>\n<li>Jump multiple weeks into the future - Page Down or Ctrl+Down Arrow</li>\n</ul>\n\n= How do I change the first day of the week? =\n\nThe editorial calendar follows the Week Starts On preference on the WordPress General Settings page.  Choose the day you want and the calendar will use that day as the first day of the week.\n\n= What languages does the calendar support? =\n\nThe calendar is available in Brazilian Portuguese, Croatian, Czech, Dutch, English, French, German, Greek, Hebrew, Italian, Japanese, Lithuanian, Norwegian, Polish, Russian, Spanish, and Swedish. \n\n= Can I add new languages? =\n\nYes please!  We are looking for translators.  It only takes about 20 minutes.  If you're interested please <a href=\"mailto:wp-edcal@googlegroups.com\">contact us</a>.\n\n= How does the calendar work =\n\nThe calendar is written in JavaScript.  It contacts your blog when it scrolls to get data about your posts.  Just like Google Maps.  <a href=\"http://www.zackgrossbart.com/hackito/edcal/\">Creating a JQuery Powered Posts Calendar for WordPress</a> explains a lot of the technical details.\n\n= Is the calendar collecting data about my blog? =\n\nAfter you use the calendar a few times we'll prompt you to let us collect a little data about your blog.  Information like the size of your browser window and the number of posts you have per day help us make the calendar even better.\n\nThe collected data is all available to the public.  Check out the <a href=\"http://www.zackgrossbart.com/edcal/mint/\">Editorial Calendar Statistics</a>.\n\n= What users can use the calendar? =\n\nThe editorial calendar works differently based on your permissions.  \n\n* Administrators and Editors can use every feature available in the calendar.  \n* Authors can use the calendar to edit, move, and publish their own posts, but other people's posts are read-only.  \n* Contributors see everyone's posts and move their own posts, but can only save drafts.\n* Subscribers can't see the calendar.\n\nYou can see how it looks for different users on our <a href=\"http://www.zackgrossbart.com/extras/sandbox/wp-admin/edit.php?page=cal\">Zack's WordPress Sandbox</a> with the following users:\n\n* edgar the Editor\n* alice the Author\n* conrad the Contributor\n* sam the Subscriber\n\nEach of these users has the password test.\n\n= Can I use the editorial calendar with pages? =\n\nRight now the calendar only supports posts.  We're considering adding pages.  If you would like to see pages show up in the calendar let us know.\n\n= Does the calendar support group blogs? =\n\nIf your blog has multiple authors the calendar will work just fine.  You can show author names right in the calendar.  Just look under screen options.\n\nWe are currently working on new features for multi-author blogs.  If you have any ideas please <a href=\"mailto:wp-edcal@googlegroups.com\">contact us</a>.\n\n= Can my readers tell I'm using the editorial calendar? =\n\nNo.  The calendar is only an administration tool.  None of your readers will know you're running it unless you tell them.\n\n= Why can't I move published posts? =\n\nMoving published posts can cause problems with some RSS feeds and is generally not a very popular thing to do.  The calendar only allows you to move scheduled and draft posts.\n\n== Screenshots ==\n\n1. The calendar integrates seamlessly into the WordPress administration console\n2. See the big picture with a view of all your posts and when they'll be published.\n3. Drag and drop posts to easily change dates and take control of your blog.\n4. Create, edit, and schedule posts in one simple quickedit dialog.\n5. Show as much or as little of your blog as you like.\n6. Use a special calendar for each custom post type on your blog.\n7. Use the new unscheduled drafts section to manage drafts before you schedule them.\n\n== Changelog ==\n\n= 2.7 = \n\nThe calendar is now available in Italian thanks to Lorenzo Boldorini who blogs at http://www.webqbe.it.\n\nChanged all calls of the jQuery live method to use the new on method so the calendar will keep working when WordPress upgrades to jQuery 1.9.\n\nThe Editorial Calendar is now stripping all tags out of post titles created from the calendar.  This fixes a potential security issue found by the Mozilla security testing team.  https://bugzilla.mozilla.org/show_bug.cgi?id=738112\n\nWe are now preventing a potential SQL injection attack with the start date and end date filter when querying posts.  This fixes a potential security issue found by the Mozilla security testing team.  https://bugzilla.mozilla.org/show_bug.cgi?id=738112\n\n\n\n= 2.6 = \n\nFixed some layout issues with the previous and next calendar buttons in WordPress 3.5.\n\nWe are now properly saving new posts in the drafts drawer in WordPress 3.5.\n\nAdded unit tests to cover creating a new post in the drafts drawer.\n\nAdded a few performance improvements to the calendar like making sure we only load our code in the admin console.\n\n= 2.5 =\n\nThe calendar is now handling the post ID in the same way for each call it uses to get data about each post when returning post data to the calendar to avoid some PHP warnings.\n\nThe calendar is now more careful about PHP warnings so it still works if the blog is set to show PHP warnings.\n\nThe unit tests are now using the correct CSS reference so they show up properly.\n\nMoved the setting for the default post time to the edcal.php so it's easier to change without recompiling the JavaScript.\n\nThe calendar now supports Russian thanks to Danny Zawacki and Lyudmila Kostryka.  Danny blogs at http://dannyzawacki.com\n\nWe have started to namespace css classes to avoid conflicts with other plugins & themes. \n\n= 2.4 =\n\nCreating a new unscheduled draft is now working properly from the calendar.\n\n= 2.3 = \n\nThe calendar is now loading relative URLs for CSS, JavaScript, and image files using the right API so they load properly when using SSL.\n\n= 2.2.1 =\n\nFixed a memory leak in the calendar where the calendar doesn't load if you have too many posts in your blog.\n\n= 2.2 =\n\nThe calendar is using JavaScript compression to load less data and run faster.\n\nWe've added a new mechanism to load the unscheduled drafts which spaces out the loading so the calendar responds super fast even when you have hundreds of unscheduled drafts.\n\nAdded a new button to jump to the last post in the calendar.\n\nAdded a namespace to fix a small issue of potential JavaScript file conflict with wp_enqueue_script().\n\n= 2.1 =\n\nThe calendar now moves posts from the drafts drawer to the main calendar properly on blogs with the alternate functionality of the date function.\n\nThe calendar can now display up to eight weeks at a time instead of just five.\n\n= 2.0 =\n\nThe calendar now has a new major feature, the \"drafts drawer,\" a post staging area where we make all unscheduled posts available to drag onto the calendar. You can also now drag posts from the calendar back into the drafts drawer to \"un-schedule\" them.\n\nMoved around functions in the js and css to be a bit more readable, and added table of contents to css file.\n\nUpdated css of Screen Options to be more core WordPress.\n\n= 1.9.1 =\n\nThe calendar is no longer blocking typing in the calendar quick edit dialog.\n\n= 1.9 =\n\nThe calendar is now translated into Lithuanian.  Thanks to Vincent G. from <a href=\"http://www.host1free.com\">host1free.com</a>.\n\n= 1.8.6 =\n\nThe calendar is now using the proper he_IL locale code for Hebrew instead of he.\n\n= 1.8.5 =\n\nThe calendar is now translated into Spanish.  Thanks to Alberto Balsalobre Rios who blogs at <a href=\"http://www.mediatripa.com\">Mediatripa.com</a>.\n\nThe calendar is now translated into Hebrew including right to left language support.  Thanks to Meir Pinto who blogs at <a href=\"http://www.meir-pinto.com/wp\">Pintolog</a>.\n\n= 1.8 =\n\nThe calendar is now translated into Norwegian.\n\nThe mouse wheel scrolling with the calendar is now working properly on WordPress 3.3.  Previously it would only scroll up (into the past) and not down (into the future).\n\nThe calendar is now translated into Japanese.  Thanks to Masahiro who blogs at <a href=\"http://www.buslog.net/\">http://www.buslog.net</a>.\n\nSupport for WordPress version 3.3.1.\n\n= 1.7 =\n\nVersion 1.7 supports WordPress 3.3 with fixes to the date display of newly created posts and alignment and margins of each day in the calendar.\n\nThe calendar is now scrolling in the right direction with the up and down arrows keys.\n\n= 1.6 =\n\nThe calendar is now setting the correct post time for manual set times at noon or midnight instead of changing it by 12 hours.\n\nThe up, down, page up, and page down keys are now working properly for moving around in the text in the quick edit dialog.\n\nThe calendar is now translated into Swedish.  Thanks to Johan Landstr\u00f6m.\n\n= 1.5 =\n\nThe post time field in the quick edit dialog is now editable so you can specify any time you want instead of having to pick in 30 minute increments.\n\nThe calendar is now translated into German.  Thanks to Matthias Nattke who uses the Editorial Calendar on his site <a href=\"http://www.kikamagazin.de\">Kikamagazin Bloggt</a>.\n\nThe calendar is now supporting a special post type \"edcal_show_calendar_\" to make sure certain custom post types don't show up in the calendar.\n\n= 1.4 =\n\n* We now have a new look and feel for the quick edit dialog and a few other elements to match WordPress 3.2.\n\n* We've refactored the Editorial Calendar into a PHP class for easier maintainability and better scoping.\n\n= 1.3.4 =\n* The calendar now shows authors properly when they have double quotes in their names\n\n= 1.3.3 =\n* The calendar now supports Dutch.  Thanks to Helma Paternostre.\n* We are no longer including the thickbox media upload files so the calendar loads faster.  \n* The calendar now loads JQuery UI drag and drop support from WordPress instead of embedding the code.  This allows us to upgrade to the latest version of JQuery UI, avoid some conflicts with other plugins, and load faster.\n* Fixed an error with the message panels so they will close properly on Chrome.\n\n= 1.3.2 =\n* We are now showing the full post content in the quick edit dialog even if there is a more tag\nso we don't overwrite the post without the full post content.\n\n= 1.3.1 =\n* Added an extra check so we aren't calling functions for supporting custom post types when they aren't available.  This problem only happens on WordPress 2.9.X.\n\n= 1.3 =\n* The Editorial Calendar will now show up for each custom post type and support a separate calendar for each type.\n* We are now disabling the save button on the quick edit dialog after it is pressed and before the post saves to prevent duplicate posts if the user presses the button twice in a row.\n* Upgraded the to the latest version of QUnit for our unit test framework\n* The calendar now supports Brazilian Portuguese.  Thanks to Janio Sarmento who uses the Editorial Calendar on his site <a href=\"http://janio.sarmento.org/\">O Blogue do Janio</a>.\n\n= 1.2 =\n* We are now smarter about the way we scroll the calendar day to show the action links when the day has scroll bars.\n* The calendar is now doing a better job determining the height of the list of posts in each day so the posts don't overlap other days.\n* The calendar will now show an error message when it can't load due to JavaScript conflicts with other plugins.\n\n= 1.1 =\n* There was a security hole in the calendar that allowed contributors to publish posts when they couldn't in the standard edit screen.  We now only allow contributors to save drafts and schedule a post for review.\n* Changed the easing we are using for the animation of the calendar so we can work with the BuddyPress plugin.\n* Changed the text of the edit link on published posts from Republish to Edit.\n\n= 1.0 =\n* Fixed a scrolling issue that prevented clicking the action links on the last post if the individual day showed a scroll bar.\n\n= 0.9 =\n* The calendar now uses the QUnit unit test framework to make sure the calendar maintains high quality in every release.  You can see the <a href=\"http://www.zackgrossbart.com/extras/sandbox/wp-admin/edit.php?page=cal&qunit=true\">tests run</a> on our integration blog or run them on your own blog by adding &qunit=true to the end of the URL for the calendar.\n* Made it easier to see the first day of the month using a special header and background color.\n* Changed to a lighter gradient for the calendar header to match the new theme of WordPress 3.0.\n* We now support pending review posts in the calendar.\n* The calendar supports a feedback mechanism where we collect data about your use of the calendar.  This anonymous data helps us improve the calendar and know which areas to focus on.  Everyone can view the <a href=\"http://www.zackgrossbart.com/edcal/mint/\">Editorial Calendar Statistics</a>.\n* Auto-drafts are now hidden from the calendar.\n\n= 0.8 =\n* We got the message and added an edit link that takes you to the WordPress edit page in addition to a link for the quick edit dialog in the calendar.\n* The calendar will now remember the last date and start there again the next time you access it.\n* Fixed a large performance problem that was causing the calendar to load the posts for and render many more weeks than it needed to.  The calendar is now faster than ever!\n* The calendar quick edit screen now shows the post author.\n* Sticky posts are now available in the calendar.  Schedule them like any other post.\n* The calendar now supports Greek.  Thanks to <a href=\"http://aenaon.biz/\">Mihalis Papanousis</a>.\n* We also support Polish.  Thanks to Krzysztof Nowak who uses the Editorial Calendar on his site <a href=\"http://classica-mediaevalia.pl\">Classica, mediaevalia et cetera</a>.\n\n= 0.7 =\n* You can now edit post contents, title, and time directly in the calendar.  You can also schedule a post for publication.\n* The layout of posts in the calendar has been optimized to you can see the maximum number of posts in a single day without scrolling.\n* The calendar is now available for Authors and grays out the posts the current user doesn't have permission to edit.\n* The calendar has been translated into Czech.  Thanks to Luk&#225;&#353; Adamec, who uses the Calendar on his blog <a href=\"http://hornihrad.cz/\">Horni Hrad</a>. \n* Added a link to view published posts directly from the calendar.\n* The calendar will now use the WordPress preference for the first day of the week and fall back on the server locale if it isn't set.\n* The calendar is also using the WordPress preferences for time format.\n* The calendar is now loading JavaScript libraries for just the calendar page.  That makes other pages load faster and avoids potential JavaScript conflicts with other plugins.\n* The visible weeks preference in the screen options is now a dropdown instead of a text box.\n\n\n= 0.6 =\n* The new look and feel of the calendar makes it easier to scan over your posts while showing you more information.\n* You can customize the number of weeks you work with in the calendar using the screen options pull down in the upper right.\n* The calendar now starts with the current day as the first week.\n* When dragging posts the calendar will now automatically scroll when you move a post past the top or bottom of the calendar.\n* You can now access the edit, view, and delete post links directly in the calendar without bringing up a second dialog.\n* The calendar now prevents you from changing posts that have already been published.\n* The calendar now supports using HTTPS for admin with the define('FORCE_SSL_ADMIN', true); option in wp-config.php.\n* The calendar is now properly handling posts with apostrophe's in the title in Internet Explorer.\n* The calendar now supports French.  Thanks to the guys at <a href=\"http://stresslimitdesign.com/\">StressLimitDesign</a>.\n\n= 0.5.4 =\n* I think this should finally fix the date format bugs we've been having.  Thanks for sticking with it guys.\n\n= 0.5.3 =\n* Fixed a date formatting bug when we update posts into the WordPress database\n\n= 0.5.2 =\n* Fixed a bug that way causing an invalid concurrency error when changing post dates in non-American countries\n\n= 0.5.1 =\n* Fixed a bug with the post creation date that was making posts created from the calendar sometimes show up on the wrong day\n* We are now properly encoding the post title when changing the title or creating a new draft so we can handle non-English characters properly.\n\n= 0.5 =\n* Added localization support for strings and dates in the calendar\n* The calendar is no longer showing posts that you have put in your trash\n* Fixed a problem that caused posts to never show up when working with WordPress in Croatian and other Eastern European languages.\n* The calendar now starts the week on the right day based on the configured locale in WordPress. \n* Added language support files for Croatian.  Special thanks to <a href=\"http://www.ivanbrezakbrkan.com\">Ivan Brezak Brkan</a>.\n\n= 0.4 =\n* We are now doing a better job arranging our tooltips and setting GMT dates correctly.\n* Fixed a problem with the post times so posts dragged with the calendar don't change their time of day.\n* Added a dialog for creating new drafts on specific dates of the calendar.\n\n= 0.3 =\n* Additional bug fixes and stabalizations as well as the ability to add new posts to a given date from the calendar.\n\n= 0.2 =\n* This version fixes a large number of bugs, makes many usability improvements, and has some significant performance increases.\n\n= 0.1 =\n* This version is just for beta testers\n"], "filenames": ["edcal.php", "readme.txt"], "buggy_code_start_loc": [497, 182], "buggy_code_end_loc": [497, 182], "fixing_code_start_loc": [498, 183], "fixing_code_end_loc": [510, 187], "type": "CWE-89", "message": "A vulnerability was found in Editorial Calendar Plugin up to 2.6. It has been declared as critical. Affected by this vulnerability is the function edcal_filter_where of the file edcal.php. The manipulation of the argument edcal_startDate/edcal_endDate leads to sql injection. The attack can be launched remotely. Upgrading to version 2.7 is able to address this issue. The name of the patch is a9277f13781187daee760b4dfd052b1b68e101cc. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-225151.", "other": {"cve": {"id": "CVE-2013-10023", "sourceIdentifier": "cna@vuldb.com", "published": "2023-04-08T09:15:07.000", "lastModified": "2023-04-17T14:12:43.913", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Editorial Calendar Plugin up to 2.6. It has been declared as critical. Affected by this vulnerability is the function edcal_filter_where of the file edcal.php. The manipulation of the argument edcal_startDate/edcal_endDate leads to sql injection. The attack can be launched remotely. Upgrading to version 2.7 is able to address this issue. The name of the patch is a9277f13781187daee760b4dfd052b1b68e101cc. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-225151."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:editorial_calendar_project:editorial_calendar:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "2.7", "matchCriteriaId": "ADB20A87-2899-49C1-B6AA-D42F0944C3CE"}]}]}], "references": [{"url": "https://github.com/wp-plugins/editorial-calendar/commit/a9277f13781187daee760b4dfd052b1b68e101cc", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/wp-plugins/editorial-calendar/releases/tag/2.7", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.225151", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.225151", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wp-plugins/editorial-calendar/commit/a9277f13781187daee760b4dfd052b1b68e101cc"}}