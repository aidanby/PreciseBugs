{"buggy_code": ["<?php\nnamespace App\\Http\\Controllers;\n\nuse Gate;\nuse Datatables;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Session;\nuse Carbon\\Carbon;\nuse App\\Models\\User;\nuse App\\Models\\Task;\nuse App\\Models\\Client;\nuse App\\Models\\Setting;\nuse App\\Models\\Status;\nuse App\\Models\\Lead;\nuse App\\Models\\Role;\nuse App\\Models\\Department;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\User\\UpdateUserRequest;\nuse App\\Http\\Requests\\User\\StoreUserRequest;\nuse Ramsey\\Uuid\\Uuid;\n\nclass UsersController extends Controller\n{\n    protected $users;\n    protected $roles;\n\n    public function __construct()\n    {\n        $this->middleware('user.create', ['only' => ['create']]);\n        $this->middleware('is.demo', ['only' => ['update', 'destroy']]);\n    }\n\n    /**\n     * @return mixed\n     */\n    public function index()\n    {\n        return view('users.index')->withUsers(User::all());\n    }\n\n    public function calendarUsers()\n    {\n        return User::with(['department', 'absences' =>  function ($q) {\n            return $q->whereBetween('start_at', [today()->subWeeks(2)->startOfDay(), today()->addWeeks(4)->endOfDay()])\n                      ->orWhereBetween('end_at', [today()->subWeeks(2)->startOfDay(), today()->addWeeks(4)->endOfDay()]);\n        }\n        ])->get();\n    }\n\n    public function users()\n    {\n        return User::with(['department'])->get();\n    }\n\n    public function anyData()\n    {\n        $users = User::select(['id', 'external_id', 'name', 'email', 'primary_number']);\n        return Datatables::of($users)\n            ->addColumn('namelink', '<a href=\"{{ route(\"users.show\",[$external_id]) }}\">{{$name}}</a>')\n            ->addColumn('view', function ($user) {\n                return '<a href=\"' . route(\"users.show\", $user->external_id) . '\" class=\"btn btn-link\">' . __('View') .'</a>';\n            })\n            ->addColumn('edit', function ($user) {\n                return '<a href=\"' . route(\"users.edit\", $user->external_id) . '\" class=\"btn btn-link\">' . __('Edit') .'</a>';\n            })\n//            ->addColumn('delete', function ($user) {\n//                return '<button type=\"button\" class=\"btn btn-link\" data-client_id=\"' . $user->external_id . '\" onClick=\"openModal(\\'' . $user->external_id . '\\')\" id=\"myBtn\">' . __('Delete') .'</button>';\n//            })\n            ->rawColumns(['namelink','view', 'edit', 'delete'])\n            ->make(true);\n    }\n\n    /**\n     * Json for Data tables\n     * @param $id\n     * @return mixed\n     */\n    public function taskData($id)\n    {\n        $tasks = Task::with(['status', 'client'])->select(\n            ['id', 'external_id', 'title', 'created_at', 'deadline', 'user_assigned_id', 'client_id', 'status_id']\n        )\n            ->where('user_assigned_id', $id)->get();\n        return Datatables::of($tasks)\n            ->addColumn('titlelink', '<a href=\"{{ route(\"tasks.show\",[$external_id]) }}\">{{$title}}</a>')\n            ->editColumn('created_at', function ($tasks) {\n                return $tasks->created_at ? with(new Carbon($tasks->created_at))\n                    ->format(carbonDate()) : '';\n            })\n            ->editColumn('deadline', function ($tasks) {\n                return $tasks->deadline ? with(new Carbon($tasks->deadline))\n                    ->format(carbonDate()) : '';\n            })\n            ->editColumn('status_id', function ($tasks) {\n                return '<span class=\"label label-success\" style=\"background-color:' . $tasks->status->color . '\"> ' .$tasks->status->title . '</span>';\n            })\n            ->editColumn('client_id', function ($tasks) {\n                return $tasks->client->primaryContact->name;\n            })\n            ->rawColumns(['titlelink','status_id'])\n            ->make(true);\n    }\n\n    /**\n     * Json for Data tables\n     * @param $id\n     * @return mixed\n     */\n    public function leadData($id)\n    {\n        $leads = Lead::with(['status', 'client'])->select(\n            ['id', 'external_id', 'title', 'created_at', 'deadline', 'user_assigned_id', 'client_id', 'status_id']\n        )\n            ->where('user_assigned_id', $id)->get();\n        return Datatables::of($leads)\n            ->addColumn('titlelink', '<a href=\"{{ route(\"leads.show\",[$external_id]) }}\">{{$title}}</a>')\n            ->editColumn('created_at', function ($leads) {\n                return $leads->created_at ? with(new Carbon($leads->created_at))\n                    ->format(carbonDate()) : '';\n            })\n            ->editColumn('deadline', function ($leads) {\n                return $leads->deadline ? with(new Carbon($leads->deadline))\n                    ->format(carbonDate()) : '';\n            })\n            ->editColumn('status_id', function ($leads) {\n                return '<span class=\"label label-success\" style=\"background-color:' . $leads->status->color . '\"> ' .\n                    $leads->status->title . '</span>';\n            })\n            ->editColumn('client_id', function ($tasks) {\n                return $tasks->client->primaryContact->name;\n            })\n            ->rawColumns(['titlelink','status_id'])\n            ->make(true);\n    }\n\n    /**\n     * Json for Data tables\n     * @param $id\n     * @return mixed\n     */\n    public function clientData($id)\n    {\n        $clients = Client::select(['external_id', 'company_name', 'vat', 'address'])->where('user_id', $id);\n        return Datatables::of($clients)\n            ->addColumn('clientlink', function ($clients) {\n                return '<a href=\"' . route('clients.show', $clients->external_id) . '\">' . $clients->company_name . '</a>';\n            })\n            ->editColumn('created_at', function ($clients) {\n                return $clients->created_at ? with(new Carbon($clients->created_at))\n                    ->format(carbonDate()) : '';\n            })\n            ->rawColumns(['clientlink'])\n            ->make(true);\n    }\n\n\n    /**\n     * @return mixed\n     */\n    public function create()\n    {\n        return view('users.create')\n            ->withRoles($this->allRoles()->pluck('display_name', 'id'))\n            ->withDepartments(Department::pluck('name', 'id'));\n    }\n\n    /**\n     * @param StoreUserRequest $userRequest\n     * @return mixed\n     */\n    public function store(StoreUserRequest $request)\n    {\n        $settings = Setting::first();\n        if (User::count() >= $settings->max_users) {\n            Session::flash('flash_message_warning', __('Max number of users reached'));\n            return redirect()->back();\n        }\n        $path = null;\n        if ($request->hasFile('image_path')) {\n            $file =  $request->file('image_path');\n\n            $filename = str_random(8) . '_' . $file->getClientOriginalName() ;\n            $path = Storage::put($settings->external_id, $file);\n        }\n\n\n        $user = new User();\n        $user->name = $request->name;\n        $user->external_id = Uuid::uuid4()->toString();\n        $user->email = $request->email;\n        $user->address = $request->address;\n        $user->primary_number = $request->primary_number;\n        $user->secondary_number = $request->secondary_number;\n        $user->password = bcrypt($request->password);\n        $user->image_path = $path;\n        $user->language = $request->language == \"dk\" ?: \"en\";\n        $user->save();\n        $user->roles()->attach($request->roles);\n        $user->department()->attach($request->departments);\n        $user->save();\n\n        Session::flash('flash_message', __('User successfully added'));\n        return redirect()->route('users.index');\n    }\n\n    /**\n     * @param $external_id\n     * @return mixed\n     */\n    public function show($external_id)\n    {\n        /** @var User $user */\n        $user = $this->findByExternalId($external_id);\n        return view('users.show')\n            ->withUser($user)\n            ->withCompanyname(Setting::first()->company)\n            ->with('task_statistics', $user->totalOpenAndClosedTasks($external_id))\n            ->with('lead_statistics', $user->totalOpenAndClosedLeads($external_id))\n            ->with('lead_statuses', Status::typeOfLead()->get())\n            ->with('task_statuses', Status::typeOfTask()->get());\n    }\n\n\n    /**\n     * @param $external_id\n     * @return mixed\n     */\n    public function edit($external_id)\n    {\n        return view('users.edit')\n            ->withUser($this->findByExternalId($external_id))\n            ->withRoles($this->allRoles()->pluck('display_name', 'id'))\n            ->withDepartments(Department::pluck('name', 'id'));\n    }\n\n    /**\n     * @param $external_id\n     * @param UpdateUserRequest $request\n     * @return mixed\n     */\n    public function update($external_id, UpdateUserRequest $request)\n    {\n        $user = $this->findByExternalId($external_id);\n        $password = bcrypt($request->password);\n        $role = $request->roles;\n        $department = $request->departments;\n        if ($request->hasFile('image_path')) {\n            $companyname = Setting::first()->external_id;\n            $file =  $request->file('image_path');\n\n            $filename = str_random(8) . '_' . $file->getClientOriginalName() ;\n\n            $path = Storage::put($companyname, $file);\n            if ($request->password == \"\") {\n                $input =  array_replace($request->except('password'), ['image_path'=>\"$path\"]);\n            } else {\n                $input =  array_replace($request->all(), ['image_path'=>\"$path\", 'password'=>\"$password\"]);\n            }\n        } else {\n            if ($request->password == \"\") {\n                $input =  array_replace($request->except('password'));\n            } else {\n                $input =  array_replace($request->all(), ['password'=>\"$password\"]);\n            }\n        }\n\n        $owners = User::whereHas('roles', function ($q) {\n            $q->where('name', Role::OWNER_ROLE);\n        })->get();\n\n        $user->fill($input)->save();\n        $role = $user->roles->first();\n        if ($role && $role->name == Role::OWNER_ROLE && $owners->count() <= 1) {\n            Session()->flash('flash_message_warning', __('Not able to change owner role, please choose a new owner first'));\n        } else {\n            $user->roles()->sync([$request->roles]);\n        }\n        $user->department()->sync([$department]);\n\n        Session()->flash('flash_message', __('User successfully updated'));\n        return redirect()->back();\n    }\n\n    /**\n     * @param $external_id\n     * @return mixed\n     */\n    public function destroy(Request $request, $external_id)\n    {\n        $user = $this->findByExternalId($external_id);\n\n        if ($user->hasRole('owner')) {\n            return Session()->flash('flash_message_warning', __('Not allowed to delete super admin'));\n        }\n\n        if ($request->tasks == \"move_all_tasks\" && $request->task_user != \"\") {\n            $user->moveTasks($request->task_user);\n        }\n        if ($request->leads == \"move_all_leads\" && $request->lead_user != \"\") {\n            $user->moveLeads($request->lead_user);\n        }\n        if ($request->clients == \"move_all_clients\" && $request->client_user != \"\") {\n            $user->moveClients($request->client_user);\n        }\n\n        try {\n            $user->delete();\n            Session()->flash('flash_message', __('User successfully deleted'));\n        } catch (\\Illuminate\\Database\\QueryException $e) {\n            Session()->flash('flash_message_warning', __('User can NOT have, leads, clients, or tasks assigned when deleted'));\n        }\n\n        return redirect()->route('users.index');\n    }\n\n    /**\n    * @param $external_id\n    * @return mixed\n    */\n    public function findByExternalId($external_id)\n    {\n        return User::whereExternalId($external_id)->firstOrFail();\n    }\n    /**\n     * @return \\Illuminate\\Database\\Eloquent\\Collection|static[]\n     */\n    private function allRoles()\n    {\n        if (auth()->user()->roles->first()->name == Role::OWNER_ROLE) {\n            return Role::all('display_name', 'id', 'name', 'external_id')->sortBy('display_name');\n        }\n\n        return Role::all('display_name', 'id', 'name', 'external_id')->filter(function ($value, $key) {\n            return $value->name != \"owner\";\n        })->sortBy('display_name');\n    }\n}\n", "<?php\nnamespace App\\Models;\n\nuse Fenos\\Notifynder\\Notifable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Cache;\nuse App\\Models\\Client;\nuse App\\Zizaco\\Entrust\\Traits\\EntrustUserTrait;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse App\\Models\\Setting;\nuse App\\Api\\v1\\Models\\Token;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Laravel\\Cashier\\Billable;\nuse Carbon\\Carbon;\n\nclass User extends Authenticatable\n{\n    use Notifiable, EntrustUserTrait,  SoftDeletes, Billable;\n\n    public function restore()\n    {\n        $this->restoreA();\n        $this->restoreB();\n    }\n\n    /**\n     * The database table used by the model.\n     *\n     * @var string\n     */\n    protected $table = 'users';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'external_id',\n        'name',\n        'email',\n        'password',\n        'address',\n        'primary_number',\n        'secondary_number',\n        'image_path',\n        'language',\n    ];\n\n    /**\n     * The attributes excluded from the model's JSON form.\n     *\n     * @var array\n     */\n    protected $hidden = ['id', 'password', 'password_confirmation', 'remember_token', 'image_path'];\n    protected $appends = ['avatar'];\n\n    protected $primaryKey = 'id';\n\n    public function tasks()\n    {\n        return $this->hasMany(Task::class, 'user_assigned_id', 'id');\n    }\n\n    public function leads()\n    {\n        return $this->hasMany(Lead::class, 'user_assigned_id', 'id');\n    }\n\n    public function clients()\n    {\n        return $this->hasMany(Client::class, 'user_id', 'id');\n    }\n\n    public function department()\n    {\n        return $this->belongsToMany(Department::class);\n    }\n\n    public function userRole()\n    {\n        return $this->hasOne(RoleUser::class, 'user_id', 'id');\n    }\n\n    public function appointments()\n    {\n        return $this->hasMany(Appointment::class);\n    }\n\n    public function absences()\n    {\n        return $this->hasMany(Absence::class);\n    }\n\n    public function tokens()\n    {\n        return $this->hasMany(Token::class, 'user_id', 'id');\n    }\n\n\n\n    public function isOnline()\n    {\n        return Cache::has('user-is-online-' . $this->id);\n    }\n\n    public function getNameAndDepartmentAttribute()\n    {\n        //dd($this->name, $this->department()->toSql(), $this->department()->getBindings());\n        return $this->name . ' ' . '(' . $this->department()->first()->name . ')';\n    }\n\n\n    public function getNameAndDepartmentEagerLoadingAttribute()\n    {\n        //dd($this->name, $this->department()->toSql(), $this->department()->getBindings());\n        return $this->name . ' ' . '(' . $this->relations['department'][0]->name . ')';\n    }\n\n    public function moveTasks($user_id)\n    {\n        $tasks = $this->tasks()->get();\n        foreach ($tasks as $task) {\n            $task->user_assigned_id = $user_id;\n            $task->save();\n        }\n    }\n\n    public function moveLeads($user_id)\n    {\n        $leads = $this->leads()->get();\n        foreach ($leads as $lead) {\n            $lead->user_assigned_id = $user_id;\n            $lead->save();\n        }\n    }\n\n    public function moveClients($user_id)\n    {\n        $clients = $this->clients()->get();\n        foreach ($clients as $client) {\n            $client->user_id = $user_id;\n            $client->save();\n        }\n    }\n\n    public function getAvatarattribute()\n    {\n        $image_path = $this->image_path ? Storage::url($this->image_path) : '/images/default_avatar.jpg';\n        return $image_path;\n    }\n\n    public function totalOpenAndClosedLeads()\n    {\n        $groups = $this->leads()->with('status')->get()->sortBy('status.title')->groupBy('status.title');\n        $keys = collect();\n        $counts = collect();\n        foreach ($groups as $groupKey => $group) {\n            $keys->push($groupKey);\n            $counts->push(count($group));\n        }\n\n        return collect(['keys' => $keys, 'counts' => $counts]);\n    }\n\n    /**\n     * @param $external_id\n     * @return mixed\n     */\n    public function totalOpenAndClosedTasks()\n    {\n        $groups = $this->tasks()->with('status')->get()->sortBy('status.title')->groupBy('status.title');\n        $keys = collect();\n        $counts = collect();\n        foreach ($groups as $groupKey => $group) {\n            $keys->push($groupKey);\n            $counts->push(count($group));\n        }\n\n        return collect(['keys' => $keys, 'counts' => $counts]);\n    }\n}\n", "\n<div class=\"col-sm-3\">\n    <label for=\"name\" class=\"base-input-label\">@lang('Name')</label>\n</div>\n<div class=\"col-sm-9\">\n        <div class=\"form-group col-sm-8\">\n            <input type=\"text\" name=\"name\" class=\"form-control\" value=\"{{isset($user) ? optional($user)->name : ''}}\">\n        </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n<div class=\"col-sm-3\">\n    <label for=\"image_path\" class=\"base-input-label\">@lang('Image')</label>\n</div>\n<div class=\"col-sm-9\">\n    <div class=\"form-group form-inline col-sm-8\">\n        <div class=\"input-group \">\n            <img id=\"preview_avatar\" src=\"{{isset($user) ? optional($user)->avatar : '/images/default_avatar.jpg'}}\" style=\"max-height: 40px; border-radius: 25px;\">\n        </div>\n        <div id=\"input_avatar\" class=\"input-group\" style=\"margin-left: 0.7em;\">\n            <input type=\"file\" name=\"image_path\" id=\"avatar_image\" onchange=\"loadPreview(this);\">\n            <span style=\"font-size:10px\">Recommended size 300x300</span>\n        </div>\n        <div class=\"input-group\" style=\"margin-left: 0.7em;\">\n            <button id=\"delete_avatar\" type=\"button\">remove</button>\n        </div>\n    </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n<div class=\"col-sm-3\">\n    <label for=\"name\" class=\"base-input-label\">@lang('Address')</label>\n</div>\n<div class=\"col-sm-9\">\n    <div class=\"form-group col-sm-8\">\n        <input type=\"text\" name=\"address\" class=\"form-control\" value=\"{{isset($user) ? optional($user)->address : ''}}\">\n    </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n<div class=\"col-sm-3\">\n    <label for=\"name\" class=\"base-input-label\">@lang('Contact information')</label>\n</div>\n<div class=\"col-sm-9\">\n    <div class=\"form-group col-sm-8\">\n        <label for=\"email\" class=\"control-label thin-weight\">@lang('Email')</label>\n        <input type=\"email\" name=\"email\" class=\"form-control\" value=\"{{isset($user) ? optional($user)->email : ''}}\">\n    </div>\n    <div class=\"form-group col-sm-8\">\n        <label for=\"primary_number\" class=\"control-label thin-weight\">@lang('Primary number')</label>\n        <input type=\"number\" name=\"primary_number\" class=\"form-control\" value=\"{{isset($user) ? optional($user)->primary_number : ''}}\">\n    </div>\n    <div class=\"form-group col-sm-8\">\n        <label for=\"secondary_number\" class=\"control-label thin-weight\">@lang('Secondary number')</label>\n        <input type=\"number\" name=\"secondary_number\" class=\"form-control\" value=\"{{isset($user) ? optional($user)->secondary_number : ''}}\">\n    </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n\n<div class=\"col-sm-3\">\n    <label for=\"name\" class=\"base-input-label\">@lang('Security')</label>\n</div>\n<div class=\"col-sm-9\">\n    <div class=\"form-group col-sm-8\">\n        <label for=\"password\" class=\"control-label thin-weight\">@lang('Password')</label>\n        <input type=\"password\" name=\"password\" class=\"form-control\" value=\"\">\n    </div>\n    <div class=\"form-group col-sm-8\">\n        <label for=\"password_confirmation\" class=\"control-label thin-weight\">@lang('Confirm password')</label>\n        <input type=\"password\" name=\"password_confirmation\" class=\"form-control\" value=\"\">\n    </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n<div class=\"col-sm-3\">\n    <label for=\"name\" class=\"base-input-label\">@lang('Access')</label>\n</div>\n<div class=\"col-sm-9\">\n    <div class=\"form-group col-sm-8\">\n        <label for=\"roles\" class=\"control-label thin-weight\">@lang('Assign role')</label>\n        <select name=\"roles\" id=\"\" class=\"form-control\">\n        @foreach($roles as $key => $role)\n                <option {{ isset($user) && optional($user->userRole)->role_id === $key ? \"selected\" : \"\" }} value=\"{{$key}}\">{{$role}}</option>\n        @endforeach\n        </select>\n    </div>\n    <div class=\"form-group col-sm-8\">\n        <label for=\"departments\" class=\"control-label thin-weight\">@lang('Assign department')</label>\n        <select name=\"departments\" id=\"\" class=\"form-control\">\n            @foreach($departments as $key => $department)\n                <option {{ isset($user) && $user->department->first()->id === $key ? \"selected\" : \"\" }} value=\"{{$key}}\">{{$department}}</option>\n            @endforeach\n        </select>\n    </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n<div class=\"col-sm-3\">\n    <label for=\"name\" class=\"base-input-label\">@lang('Settings')</label>\n</div>\n<div class=\"col-sm-9\">\n    <div class=\"form-group col-sm-8\">\n        <label for=\"language\" class=\"control-label thin-weight\">@lang('Language')</label> <br>\n        <label class=\"radio-inline\">\n            <input value=\"dk\" type=\"radio\" name=\"language\" {{isset($user) && strtolower($user->language) == \"dk\" ? 'checked': ''}}>@lang('Danish')\n        </label>\n        <label class=\"radio-inline\">\n            <input value=\"en\" type=\"radio\" name=\"language\" {{isset($user) && strtolower($user->language) == \"en\" ? 'checked': ''}}>@lang('English')\n        </label>\n        <label class=\"radio-inline\">\n            <input value=\"es\" type=\"radio\" name=\"language\" {{isset($user) && strtolower($user->language) == \"es\" ? 'checked': ''}}>@lang('Spanish')\n        </label>\n    </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n<div class=\"col-lg-12\">\n    <input type=\"submit\" value=\"{{$submitButtonText}}\" class=\"btn btn-md btn-brand\">\n</div>"], "fixing_code": ["<?php\nnamespace App\\Http\\Controllers;\n\nuse Gate;\nuse Datatables;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Session;\nuse Carbon\\Carbon;\nuse App\\Models\\User;\nuse App\\Models\\Task;\nuse App\\Models\\Client;\nuse App\\Models\\Setting;\nuse App\\Models\\Status;\nuse App\\Models\\Lead;\nuse App\\Models\\Role;\nuse App\\Models\\Department;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\User\\UpdateUserRequest;\nuse App\\Http\\Requests\\User\\StoreUserRequest;\nuse Ramsey\\Uuid\\Uuid;\n\nclass UsersController extends Controller\n{\n    protected $users;\n    protected $roles;\n\n    public function __construct()\n    {\n        $this->middleware('user.create', ['only' => ['create']]);\n        $this->middleware('is.demo', ['only' => ['update', 'destroy']]);\n    }\n\n    /**\n     * @return mixed\n     */\n    public function index()\n    {\n        return view('users.index')->withUsers(User::all());\n    }\n\n    public function calendarUsers()\n    {\n        if (!auth()->user()->can('absence-view')) {\n            session()->flash('flash_message_warning', __('You do not have permission to view this page'));\n            return redirect()->back();\n        }\n        return User::with(['department', 'absences' =>  function ($q) {\n            return $q->whereBetween('start_at', [today()->subWeeks(2)->startOfDay(), today()->addWeeks(4)->endOfDay()])\n                      ->orWhereBetween('end_at', [today()->subWeeks(2)->startOfDay(), today()->addWeeks(4)->endOfDay()]);\n        }\n        ])->get();\n    }\n\n    public function users()\n    {\n        return User::with(['department'])->get();\n    }\n\n    public function anyData()\n    {\n        $users = User::select(['id', 'external_id', 'name', 'email', 'primary_number']);\n        return Datatables::of($users)\n            ->addColumn('namelink', '<a href=\"{{ route(\"users.show\",[$external_id]) }}\">{{$name}}</a>')\n            ->addColumn('view', function ($user) {\n                return '<a href=\"' . route(\"users.show\", $user->external_id) . '\" class=\"btn btn-link\">' . __('View') .'</a>';\n            })\n            ->addColumn('edit', function ($user) {\n                return '<a href=\"' . route(\"users.edit\", $user->external_id) . '\" class=\"btn btn-link\">' . __('Edit') .'</a>';\n            })\n//            ->addColumn('delete', function ($user) {\n//                return '<button type=\"button\" class=\"btn btn-link\" data-client_id=\"' . $user->external_id . '\" onClick=\"openModal(\\'' . $user->external_id . '\\')\" id=\"myBtn\">' . __('Delete') .'</button>';\n//            })\n            ->rawColumns(['namelink','view', 'edit', 'delete'])\n            ->make(true);\n    }\n\n    /**\n     * Json for Data tables\n     * @param $id\n     * @return mixed\n     */\n    public function taskData($id)\n    {\n        $tasks = Task::with(['status', 'client'])->select(\n            ['id', 'external_id', 'title', 'created_at', 'deadline', 'user_assigned_id', 'client_id', 'status_id']\n        )\n            ->where('user_assigned_id', $id)->get();\n        return Datatables::of($tasks)\n            ->addColumn('titlelink', '<a href=\"{{ route(\"tasks.show\",[$external_id]) }}\">{{$title}}</a>')\n            ->editColumn('created_at', function ($tasks) {\n                return $tasks->created_at ? with(new Carbon($tasks->created_at))\n                    ->format(carbonDate()) : '';\n            })\n            ->editColumn('deadline', function ($tasks) {\n                return $tasks->deadline ? with(new Carbon($tasks->deadline))\n                    ->format(carbonDate()) : '';\n            })\n            ->editColumn('status_id', function ($tasks) {\n                return '<span class=\"label label-success\" style=\"background-color:' . $tasks->status->color . '\"> ' .$tasks->status->title . '</span>';\n            })\n            ->editColumn('client_id', function ($tasks) {\n                return $tasks->client->primaryContact->name;\n            })\n            ->rawColumns(['titlelink','status_id'])\n            ->make(true);\n    }\n\n    /**\n     * Json for Data tables\n     * @param $id\n     * @return mixed\n     */\n    public function leadData($id)\n    {\n        $leads = Lead::with(['status', 'client'])->select(\n            ['id', 'external_id', 'title', 'created_at', 'deadline', 'user_assigned_id', 'client_id', 'status_id']\n        )\n            ->where('user_assigned_id', $id)->get();\n        return Datatables::of($leads)\n            ->addColumn('titlelink', '<a href=\"{{ route(\"leads.show\",[$external_id]) }}\">{{$title}}</a>')\n            ->editColumn('created_at', function ($leads) {\n                return $leads->created_at ? with(new Carbon($leads->created_at))\n                    ->format(carbonDate()) : '';\n            })\n            ->editColumn('deadline', function ($leads) {\n                return $leads->deadline ? with(new Carbon($leads->deadline))\n                    ->format(carbonDate()) : '';\n            })\n            ->editColumn('status_id', function ($leads) {\n                return '<span class=\"label label-success\" style=\"background-color:' . $leads->status->color . '\"> ' .\n                    $leads->status->title . '</span>';\n            })\n            ->editColumn('client_id', function ($tasks) {\n                return $tasks->client->primaryContact->name;\n            })\n            ->rawColumns(['titlelink','status_id'])\n            ->make(true);\n    }\n\n    /**\n     * Json for Data tables\n     * @param $id\n     * @return mixed\n     */\n    public function clientData($id)\n    {\n        $clients = Client::select(['external_id', 'company_name', 'vat', 'address'])->where('user_id', $id);\n        return Datatables::of($clients)\n            ->addColumn('clientlink', function ($clients) {\n                return '<a href=\"' . route('clients.show', $clients->external_id) . '\">' . $clients->company_name . '</a>';\n            })\n            ->editColumn('created_at', function ($clients) {\n                return $clients->created_at ? with(new Carbon($clients->created_at))\n                    ->format(carbonDate()) : '';\n            })\n            ->rawColumns(['clientlink'])\n            ->make(true);\n    }\n\n\n    /**\n     * @return mixed\n     */\n    public function create()\n    {\n        return view('users.create')\n            ->withRoles($this->allRoles()->pluck('display_name', 'id'))\n            ->withDepartments(Department::pluck('name', 'id'));\n    }\n\n    /**\n     * @param StoreUserRequest $userRequest\n     * @return mixed\n     */\n    public function store(StoreUserRequest $request)\n    {\n        $settings = Setting::first();\n        if (User::count() >= $settings->max_users) {\n            Session::flash('flash_message_warning', __('Max number of users reached'));\n            return redirect()->back();\n        }\n        $path = null;\n        if ($request->hasFile('image_path')) {\n            $file =  $request->file('image_path');\n\n            $filename = str_random(8) . '_' . $file->getClientOriginalName() ;\n            $path = Storage::put($settings->external_id, $file);\n        }\n\n\n        $user = new User();\n        $user->name = $request->name;\n        $user->external_id = Uuid::uuid4()->toString();\n        $user->email = $request->email;\n        $user->address = $request->address;\n        $user->primary_number = $request->primary_number;\n        $user->secondary_number = $request->secondary_number;\n        $user->password = bcrypt($request->password);\n        $user->image_path = $path;\n        $user->language = $request->language == \"dk\" ?: \"en\";\n        $user->save();\n        $user->roles()->attach($request->roles);\n        $user->department()->attach($request->departments);\n        $user->save();\n\n        Session::flash('flash_message', __('User successfully added'));\n        return redirect()->route('users.index');\n    }\n\n    /**\n     * @param $external_id\n     * @return mixed\n     */\n    public function show($external_id)\n    {\n        /** @var User $user */\n        $user = $this->findByExternalId($external_id);\n        return view('users.show')\n            ->withUser($user)\n            ->withCompanyname(Setting::first()->company)\n            ->with('task_statistics', $user->totalOpenAndClosedTasks($external_id))\n            ->with('lead_statistics', $user->totalOpenAndClosedLeads($external_id))\n            ->with('lead_statuses', Status::typeOfLead()->get())\n            ->with('task_statuses', Status::typeOfTask()->get());\n    }\n\n\n    /**\n     * @param $external_id\n     * @return mixed\n     */\n    public function edit($external_id)\n    {\n        return view('users.edit')\n            ->withUser($this->findByExternalId($external_id))\n            ->withRoles($this->allRoles()->pluck('display_name', 'id'))\n            ->withDepartments(Department::pluck('name', 'id'));\n    }\n\n    /**\n     * @param $external_id\n     * @param UpdateUserRequest $request\n     * @return mixed\n     */\n    public function update($external_id, UpdateUserRequest $request)\n    {\n        $user = $this->findByExternalId($external_id);\n        $password = bcrypt($request->password);\n        $role = $request->roles;\n        $department = $request->departments;\n\n        if( !auth()->user()->canChangePasswordOn($user) ) {\n            unset($request['password']);\n        }\n\n\n        if ($request->hasFile('image_path')) {\n            $companyname = Setting::first()->external_id;\n            $file =  $request->file('image_path');\n\n            $filename = str_random(8) . '_' . $file->getClientOriginalName() ;\n\n            $path = Storage::put($companyname, $file);\n            if ($request->password == \"\") {\n                $input =  array_replace($request->except('password'), ['image_path'=>\"$path\"]);\n            } else {\n                $input =  array_replace($request->all(), ['image_path'=>\"$path\", 'password'=>\"$password\"]);\n            }\n        } else {\n            if ($request->password == \"\") {\n                $input =  array_replace($request->except('password'));\n            } else {\n                $input =  array_replace($request->all(), ['password'=>\"$password\"]);\n            }\n        }\n\n        $owners = User::whereHas('roles', function ($q) {\n            $q->where('name', Role::OWNER_ROLE);\n        })->get();\n\n        $user->fill($input)->save();\n        $role = $user->roles->first();\n        if ($role && $role->name == Role::OWNER_ROLE && $owners->count() <= 1) {\n            Session()->flash('flash_message_warning', __('Not able to change owner role, please choose a new owner first'));\n        } else {\n            if(auth()->user()->canChangeRole() ) {\n                $user->roles()->sync([$request->roles]);\n            }\n        }\n        $user->department()->sync([$department]);\n\n        Session()->flash('flash_message', __('User successfully updated'));\n        return redirect()->back();\n    }\n\n    /**\n     * @param $external_id\n     * @return mixed\n     */\n    public function destroy(Request $request, $external_id)\n    {\n        $user = $this->findByExternalId($external_id);\n\n        if ($user->hasRole('owner')) {\n            return Session()->flash('flash_message_warning', __('Not allowed to delete super admin'));\n        }\n\n        if ($request->tasks == \"move_all_tasks\" && $request->task_user != \"\") {\n            $user->moveTasks($request->task_user);\n        }\n        if ($request->leads == \"move_all_leads\" && $request->lead_user != \"\") {\n            $user->moveLeads($request->lead_user);\n        }\n        if ($request->clients == \"move_all_clients\" && $request->client_user != \"\") {\n            $user->moveClients($request->client_user);\n        }\n\n        try {\n            $user->delete();\n            Session()->flash('flash_message', __('User successfully deleted'));\n        } catch (\\Illuminate\\Database\\QueryException $e) {\n            Session()->flash('flash_message_warning', __('User can NOT have, leads, clients, or tasks assigned when deleted'));\n        }\n\n        return redirect()->route('users.index');\n    }\n\n    /**\n    * @param $external_id\n    * @return mixed\n    */\n    public function findByExternalId($external_id)\n    {\n        return User::whereExternalId($external_id)->firstOrFail();\n    }\n    /**\n     * @return \\Illuminate\\Database\\Eloquent\\Collection|static[]\n     */\n    private function allRoles()\n    {\n        if (auth()->user()->roles->first()->name == Role::OWNER_ROLE) {\n            return Role::all('display_name', 'id', 'name', 'external_id')->sortBy('display_name');\n        }\n\n        return Role::all('display_name', 'id', 'name', 'external_id')->filter(function ($value, $key) {\n            return $value->name != \"owner\";\n        })->sortBy('display_name');\n    }\n}\n", "<?php\nnamespace App\\Models;\n\nuse Fenos\\Notifynder\\Notifable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Cache;\nuse App\\Models\\Client;\nuse App\\Zizaco\\Entrust\\Traits\\EntrustUserTrait;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse App\\Models\\Setting;\nuse App\\Api\\v1\\Models\\Token;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Laravel\\Cashier\\Billable;\nuse Carbon\\Carbon;\n\nclass User extends Authenticatable\n{\n    use Notifiable, EntrustUserTrait,  SoftDeletes, Billable;\n\n    public function restore()\n    {\n        $this->restoreA();\n        $this->restoreB();\n    }\n\n    /**\n     * The database table used by the model.\n     *\n     * @var string\n     */\n    protected $table = 'users';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'external_id',\n        'name',\n        'email',\n        'password',\n        'address',\n        'primary_number',\n        'secondary_number',\n        'image_path',\n        'language',\n    ];\n\n    /**\n     * The attributes excluded from the model's JSON form.\n     *\n     * @var array\n     */\n    protected $hidden = ['id', 'password', 'password_confirmation', 'remember_token', 'image_path'];\n    protected $appends = ['avatar'];\n\n    protected $primaryKey = 'id';\n\n    public function tasks()\n    {\n        return $this->hasMany(Task::class, 'user_assigned_id', 'id');\n    }\n\n    public function leads()\n    {\n        return $this->hasMany(Lead::class, 'user_assigned_id', 'id');\n    }\n\n    public function clients()\n    {\n        return $this->hasMany(Client::class, 'user_id', 'id');\n    }\n\n    public function department()\n    {\n        return $this->belongsToMany(Department::class);\n    }\n\n    public function userRole()\n    {\n        return $this->hasOne(RoleUser::class, 'user_id', 'id');\n    }\n\n    public function appointments()\n    {\n        return $this->hasMany(Appointment::class);\n    }\n\n    public function absences()\n    {\n        return $this->hasMany(Absence::class);\n    }\n\n    public function tokens()\n    {\n        return $this->hasMany(Token::class, 'user_id', 'id');\n    }\n\n    public function canChangePasswordOn(User $user)\n    {\n        if($this->id === $user->id || ( $this->roles->first()->name == Role::OWNER_ROLE || $this->roles->first()->name == Role::ADMIN_ROLE)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public function canChangeRole()\n    {\n        return $this->roles->first()->name == Role::OWNER_ROLE || $this->roles->first()->name == Role::ADMIN_ROLE;\n    }\n\n\n    public function isOnline()\n    {\n        return Cache::has('user-is-online-' . $this->id);\n    }\n\n    public function getNameAndDepartmentAttribute()\n    {\n        //dd($this->name, $this->department()->toSql(), $this->department()->getBindings());\n        return $this->name . ' ' . '(' . $this->department()->first()->name . ')';\n    }\n\n\n    public function getNameAndDepartmentEagerLoadingAttribute()\n    {\n        //dd($this->name, $this->department()->toSql(), $this->department()->getBindings());\n        return $this->name . ' ' . '(' . $this->relations['department'][0]->name . ')';\n    }\n\n    public function moveTasks($user_id)\n    {\n        $tasks = $this->tasks()->get();\n        foreach ($tasks as $task) {\n            $task->user_assigned_id = $user_id;\n            $task->save();\n        }\n    }\n\n    public function moveLeads($user_id)\n    {\n        $leads = $this->leads()->get();\n        foreach ($leads as $lead) {\n            $lead->user_assigned_id = $user_id;\n            $lead->save();\n        }\n    }\n\n    public function moveClients($user_id)\n    {\n        $clients = $this->clients()->get();\n        foreach ($clients as $client) {\n            $client->user_id = $user_id;\n            $client->save();\n        }\n    }\n\n    public function getAvatarattribute()\n    {\n        $image_path = $this->image_path ? Storage::url($this->image_path) : '/images/default_avatar.jpg';\n        return $image_path;\n    }\n\n    public function totalOpenAndClosedLeads()\n    {\n        $groups = $this->leads()->with('status')->get()->sortBy('status.title')->groupBy('status.title');\n        $keys = collect();\n        $counts = collect();\n        foreach ($groups as $groupKey => $group) {\n            $keys->push($groupKey);\n            $counts->push(count($group));\n        }\n\n        return collect(['keys' => $keys, 'counts' => $counts]);\n    }\n\n    /**\n     * @param $external_id\n     * @return mixed\n     */\n    public function totalOpenAndClosedTasks()\n    {\n        $groups = $this->tasks()->with('status')->get()->sortBy('status.title')->groupBy('status.title');\n        $keys = collect();\n        $counts = collect();\n        foreach ($groups as $groupKey => $group) {\n            $keys->push($groupKey);\n            $counts->push(count($group));\n        }\n\n        return collect(['keys' => $keys, 'counts' => $counts]);\n    }\n}\n", "\n<div class=\"col-sm-3\">\n    <label for=\"name\" class=\"base-input-label\">@lang('Name')</label>\n</div>\n<div class=\"col-sm-9\">\n        <div class=\"form-group col-sm-8\">\n            <input type=\"text\" name=\"name\" class=\"form-control\" value=\"{{isset($user) ? optional($user)->name : ''}}\">\n        </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n<div class=\"col-sm-3\">\n    <label for=\"image_path\" class=\"base-input-label\">@lang('Image')</label>\n</div>\n<div class=\"col-sm-9\">\n    <div class=\"form-group form-inline col-sm-8\">\n        <div class=\"input-group \">\n            <img id=\"preview_avatar\" src=\"{{isset($user) ? optional($user)->avatar : '/images/default_avatar.jpg'}}\" style=\"max-height: 40px; border-radius: 25px;\">\n        </div>\n        <div id=\"input_avatar\" class=\"input-group\" style=\"margin-left: 0.7em;\">\n            <input type=\"file\" name=\"image_path\" id=\"avatar_image\" onchange=\"loadPreview(this);\">\n            <span style=\"font-size:10px\">Recommended size 300x300</span>\n        </div>\n        <div class=\"input-group\" style=\"margin-left: 0.7em;\">\n            <button id=\"delete_avatar\" type=\"button\">remove</button>\n        </div>\n    </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n<div class=\"col-sm-3\">\n    <label for=\"name\" class=\"base-input-label\">@lang('Address')</label>\n</div>\n<div class=\"col-sm-9\">\n    <div class=\"form-group col-sm-8\">\n        <input type=\"text\" name=\"address\" class=\"form-control\" value=\"{{isset($user) ? optional($user)->address : ''}}\">\n    </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n<div class=\"col-sm-3\">\n    <label for=\"name\" class=\"base-input-label\">@lang('Contact information')</label>\n</div>\n<div class=\"col-sm-9\">\n    <div class=\"form-group col-sm-8\">\n        <label for=\"email\" class=\"control-label thin-weight\">@lang('Email')</label>\n        <input type=\"email\" name=\"email\" class=\"form-control\" value=\"{{isset($user) ? optional($user)->email : ''}}\">\n    </div>\n    <div class=\"form-group col-sm-8\">\n        <label for=\"primary_number\" class=\"control-label thin-weight\">@lang('Primary number')</label>\n        <input type=\"number\" name=\"primary_number\" class=\"form-control\" value=\"{{isset($user) ? optional($user)->primary_number : ''}}\">\n    </div>\n    <div class=\"form-group col-sm-8\">\n        <label for=\"secondary_number\" class=\"control-label thin-weight\">@lang('Secondary number')</label>\n        <input type=\"number\" name=\"secondary_number\" class=\"form-control\" value=\"{{isset($user) ? optional($user)->secondary_number : ''}}\">\n    </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n@if(isset($user) && auth()->user()->canChangePasswordOn($user))\n<div class=\"col-sm-3\">\n    <label for=\"name\" class=\"base-input-label\">@lang('Security')</label>\n</div>\n\n<div class=\"col-sm-9\">\n    <div class=\"form-group col-sm-8\">\n        <label for=\"password\" class=\"control-label thin-weight\">@lang('Password')</label>\n        <input type=\"password\" name=\"password\" class=\"form-control\" value=\"\">\n    </div>\n    <div class=\"form-group col-sm-8\">\n        <label for=\"password_confirmation\" class=\"control-label thin-weight\">@lang('Confirm password')</label>\n        <input type=\"password\" name=\"password_confirmation\" class=\"form-control\" value=\"\">\n    </div>\n</div>\n@endif\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n<div class=\"col-sm-3\">\n    <label for=\"name\" class=\"base-input-label\">@lang('Access')</label>\n</div>\n<div class=\"col-sm-9\">\n@if(isset($user) && auth()->user()->canChangeRole())\n    <div class=\"form-group col-sm-8\">\n        <label for=\"roles\" class=\"control-label thin-weight\">@lang('Assign role')</label>\n        <select name=\"roles\" id=\"\" class=\"form-control\">\n        @foreach($roles as $key => $role)\n                <option {{ isset($user) && optional($user->userRole)->role_id === $key ? \"selected\" : \"\" }} value=\"{{$key}}\">{{$role}}</option>\n        @endforeach\n        </select>\n    </div>\n@endif\n    <div class=\"form-group col-sm-8\">\n        <label for=\"departments\" class=\"control-label thin-weight\">@lang('Assign department')</label>\n        <select name=\"departments\" id=\"\" class=\"form-control\">\n            @foreach($departments as $key => $department)\n                <option {{ isset($user) && $user->department->first()->id === $key ? \"selected\" : \"\" }} value=\"{{$key}}\">{{$department}}</option>\n            @endforeach\n        </select>\n    </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n<div class=\"col-sm-3\">\n    <label for=\"name\" class=\"base-input-label\">@lang('Settings')</label>\n</div>\n<div class=\"col-sm-9\">\n    <div class=\"form-group col-sm-8\">\n        <label for=\"language\" class=\"control-label thin-weight\">@lang('Language')</label> <br>\n        <label class=\"radio-inline\">\n            <input value=\"dk\" type=\"radio\" name=\"language\" {{isset($user) && strtolower($user->language) == \"dk\" ? 'checked': ''}}>@lang('Danish')\n        </label>\n        <label class=\"radio-inline\">\n            <input value=\"en\" type=\"radio\" name=\"language\" {{isset($user) && strtolower($user->language) == \"en\" ? 'checked': ''}}>@lang('English')\n        </label>\n        <label class=\"radio-inline\">\n            <input value=\"es\" type=\"radio\" name=\"language\" {{isset($user) && strtolower($user->language) == \"es\" ? 'checked': ''}}>@lang('Spanish')\n        </label>\n    </div>\n</div>\n<div class=\"col-sm-12\">\n    <hr>\n</div>\n<div class=\"col-lg-12\">\n    <input type=\"submit\" value=\"{{$submitButtonText}}\" class=\"btn btn-md btn-brand\">\n</div>"], "filenames": ["app/Http/Controllers/UsersController.php", "app/Models/User.php", "resources/views/users/form.blade.php"], "buggy_code_start_loc": [42, 100, 64], "buggy_code_end_loc": [277, 100, 92], "fixing_code_start_loc": [43, 101, 64], "fixing_code_end_loc": [289, 114, 97], "type": "CWE-862", "message": "In Daybyday CRM, versions 2.0.0 through 2.2.0 are vulnerable to Missing Authorization. An attacker that has the lowest privileges account (employee type user), can view the absences of all users in the system including administrators. This type of user is not authorized to view this kind of information.", "other": {"cve": {"id": "CVE-2022-22108", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2022-01-05T15:15:07.787", "lastModified": "2022-01-08T02:49:50.347", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Daybyday CRM, versions 2.0.0 through 2.2.0 are vulnerable to Missing Authorization. An attacker that has the lowest privileges account (employee type user), can view the absences of all users in the system including administrators. This type of user is not authorized to view this kind of information."}, {"lang": "es", "value": "En Daybyday CRM, versiones 2.0.0 hasta 2.2.0, son vulnerables a una falta de autorizaci\u00f3n. Un atacante que tenga la cuenta con menos privilegios (usuario tipo empleado), puede visualizar las ausencias de todos los usuarios del sistema, incluidos los administradores. Este tipo de usuario no est\u00e1 autorizado a visualizar este tipo de informaci\u00f3n."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:daybydaycrm:daybyday_crm:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndIncluding": "2.2.0", "matchCriteriaId": "ADAFF08E-EF6E-45ED-A139-DD7DDD947C52"}]}]}], "references": [{"url": "https://github.com/Bottelet/DaybydayCRM/commit/fe842ea5ede237443f1f45a99aeb839133115d8b", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2022-22108", "source": "vulnerabilitylab@mend.io", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Bottelet/DaybydayCRM/commit/fe842ea5ede237443f1f45a99aeb839133115d8b"}}