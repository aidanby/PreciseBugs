{"buggy_code": ["/*\n * The MIT License\n * \n * Copyright (c) 2004-2010, Sun Microsystems, Inc., Kohsuke Kawaguchi, CloudBees, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.util;\n\nimport groovy.lang.Binding;\nimport groovy.lang.GroovyShell;\nimport hudson.FilePath;\nimport hudson.Functions;\nimport jenkins.model.Jenkins;\nimport hudson.remoting.AsyncFutureImpl;\nimport hudson.remoting.Callable;\nimport hudson.remoting.DelegatingCallable;\nimport hudson.remoting.Future;\nimport hudson.remoting.VirtualChannel;\nimport hudson.security.AccessControlled;\nimport org.codehaus.groovy.control.CompilerConfiguration;\nimport org.codehaus.groovy.control.customizers.ImportCustomizer;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.StaplerResponse;\nimport org.kohsuke.stapler.WebMethod;\n\nimport javax.management.JMException;\nimport javax.management.MBeanServer;\nimport javax.management.ObjectName;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.lang.management.ManagementFactory;\nimport java.lang.management.ThreadInfo;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\n\n/**\n * Various remoting operations related to diagnostics.\n *\n * <p>\n * These code are useful wherever {@link VirtualChannel} is used, such as master, slaves, Maven JVMs, etc.\n *\n * @author Kohsuke Kawaguchi\n * @since 1.175\n */\npublic final class RemotingDiagnostics {\n    public static Map<Object,Object> getSystemProperties(VirtualChannel channel) throws IOException, InterruptedException {\n        if(channel==null)\n            return Collections.<Object,Object>singletonMap(\"N/A\",\"N/A\");\n        return channel.call(new GetSystemProperties());\n    }\n\n    private static final class GetSystemProperties implements Callable<Map<Object,Object>,RuntimeException> {\n        public Map<Object,Object> call() {\n            return new TreeMap<Object,Object>(System.getProperties());\n        }\n        private static final long serialVersionUID = 1L;\n    }\n\n    public static Map<String,String> getThreadDump(VirtualChannel channel) throws IOException, InterruptedException {\n        if(channel==null)\n            return Collections.singletonMap(\"N/A\",\"N/A\");\n        return channel.call(new GetThreadDump());\n    }\n\n    public static Future<Map<String,String>> getThreadDumpAsync(VirtualChannel channel) throws IOException, InterruptedException {\n        if(channel==null)\n            return new AsyncFutureImpl<Map<String, String>>(Collections.singletonMap(\"N/A\",\"offline\"));\n        return channel.callAsync(new GetThreadDump());\n    }\n\n    private static final class GetThreadDump implements Callable<Map<String,String>,RuntimeException> {\n        public Map<String,String> call() {\n            Map<String,String> r = new LinkedHashMap<String,String>();\n            try {\n                ThreadInfo[] data = Functions.getThreadInfos();\n                Functions.ThreadGroupMap map = Functions.sortThreadsAndGetGroupMap(data);\n                for (ThreadInfo ti : data)\n                    r.put(ti.getThreadName(),Functions.dumpThreadInfo(ti,map));\n            } catch (LinkageError _) {\n                // not in JDK6. fall back to JDK5\n                r.clear();\n                for (Map.Entry<Thread,StackTraceElement[]> t : Functions.dumpAllThreads().entrySet()) {\n                    StringBuilder buf = new StringBuilder();\n                    for (StackTraceElement e : t.getValue())\n                        buf.append(e).append('\\n');\n                    r.put(t.getKey().getName(),buf.toString());\n                }\n            }\n            return r;\n        }\n        private static final long serialVersionUID = 1L;\n    }\n\n    /**\n     * Executes Groovy script remotely.\n     */\n    public static String executeGroovy(String script, VirtualChannel channel) throws IOException, InterruptedException {\n        return channel.call(new Script(script));\n    }\n\n    private static final class Script implements DelegatingCallable<String,RuntimeException> {\n        private final String script;\n        private transient ClassLoader cl;\n\n        private Script(String script) {\n            this.script = script;\n            cl = getClassLoader();\n        }\n\n        public ClassLoader getClassLoader() {\n            return Jenkins.getInstance().getPluginManager().uberClassLoader;\n        }\n\n        public String call() throws RuntimeException {\n            // if we run locally, cl!=null. Otherwise the delegating classloader will be available as context classloader.\n            if (cl==null)       cl = Thread.currentThread().getContextClassLoader();\n            CompilerConfiguration cc = new CompilerConfiguration();\n            cc.addCompilationCustomizers(new ImportCustomizer().addStarImports(\n                    \"jenkins\",\n                    \"jenkins.model\",\n                    \"hudson\",\n                    \"hudson.model\"));\n            GroovyShell shell = new GroovyShell(cl,new Binding(),cc);\n\n            StringWriter out = new StringWriter();\n            PrintWriter pw = new PrintWriter(out);\n            shell.setVariable(\"out\", pw);\n            try {\n                Object output = shell.evaluate(script);\n                if(output!=null)\n                pw.println(\"Result: \"+output);\n            } catch (Throwable t) {\n                t.printStackTrace(pw);\n            }\n            return out.toString();\n        }\n    }\n\n    /**\n     * Obtains the heap dump in an HPROF file.\n     */\n    public static FilePath getHeapDump(VirtualChannel channel) throws IOException, InterruptedException {\n        return channel.call(new Callable<FilePath, IOException>() {\n            public FilePath call() throws IOException {\n                final File hprof = File.createTempFile(\"hudson-heapdump\", \"hprof\");\n                hprof.delete();\n                try {\n                    MBeanServer server = ManagementFactory.getPlatformMBeanServer();\n                    server.invoke(new ObjectName(\"com.sun.management:type=HotSpotDiagnostic\"), \"dumpHeap\",\n                            new Object[]{hprof.getAbsolutePath(), true}, new String[]{String.class.getName(), boolean.class.getName()});\n\n                    return new FilePath(hprof);\n                } catch (JMException e) {\n                    throw new IOException2(e);\n                }\n            }\n\n            private static final long serialVersionUID = 1L;\n        });\n    }\n\n    /**\n     * Heap dump, exposable to URL via Stapler.\n     *\n     */\n    public static class HeapDump {\n        private final AccessControlled owner;\n        private final VirtualChannel channel;\n\n        public HeapDump(AccessControlled owner, VirtualChannel channel) {\n            this.owner = owner;\n            this.channel = channel;\n        }\n\n        /**\n         * Obtains the heap dump.\n         */\n        public void doIndex(StaplerResponse rsp) throws IOException {\n            rsp.sendRedirect(\"heapdump.hprof\");\n        }\n\n        @WebMethod(name=\"heapdump.hprof\")\n        public void doHeapDump(StaplerRequest req, StaplerResponse rsp) throws IOException, InterruptedException {\n            owner.checkPermission(Jenkins.ADMINISTER);\n            rsp.setContentType(\"application/octet-stream\");\n\n            FilePath dump = obtain();\n            try {\n                dump.copyTo(rsp.getCompressedOutputStream(req));\n            } finally {\n                dump.delete();\n            }\n        }\n\n        public FilePath obtain() throws IOException, InterruptedException {\n            return RemotingDiagnostics.getHeapDump(channel);\n        }\n    }\n}\n"], "fixing_code": ["/*\n * The MIT License\n * \n * Copyright (c) 2004-2010, Sun Microsystems, Inc., Kohsuke Kawaguchi, CloudBees, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.util;\n\nimport groovy.lang.Binding;\nimport groovy.lang.GroovyShell;\nimport hudson.FilePath;\nimport hudson.Functions;\nimport jenkins.model.Jenkins;\nimport hudson.remoting.AsyncFutureImpl;\nimport hudson.remoting.Callable;\nimport hudson.remoting.DelegatingCallable;\nimport hudson.remoting.Future;\nimport hudson.remoting.VirtualChannel;\nimport hudson.security.AccessControlled;\nimport org.codehaus.groovy.control.CompilerConfiguration;\nimport org.codehaus.groovy.control.customizers.ImportCustomizer;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.StaplerResponse;\nimport org.kohsuke.stapler.WebMethod;\n\nimport javax.management.JMException;\nimport javax.management.MBeanServer;\nimport javax.management.ObjectName;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.lang.management.ManagementFactory;\nimport java.lang.management.ThreadInfo;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\n\n/**\n * Various remoting operations related to diagnostics.\n *\n * <p>\n * These code are useful wherever {@link VirtualChannel} is used, such as master, slaves, Maven JVMs, etc.\n *\n * @author Kohsuke Kawaguchi\n * @since 1.175\n */\npublic final class RemotingDiagnostics {\n    public static Map<Object,Object> getSystemProperties(VirtualChannel channel) throws IOException, InterruptedException {\n        if(channel==null)\n            return Collections.<Object,Object>singletonMap(\"N/A\",\"N/A\");\n        return channel.call(new GetSystemProperties());\n    }\n\n    private static final class GetSystemProperties implements Callable<Map<Object,Object>,RuntimeException> {\n        public Map<Object,Object> call() {\n            return new TreeMap<Object,Object>(System.getProperties());\n        }\n        private static final long serialVersionUID = 1L;\n    }\n\n    public static Map<String,String> getThreadDump(VirtualChannel channel) throws IOException, InterruptedException {\n        if(channel==null)\n            return Collections.singletonMap(\"N/A\",\"N/A\");\n        return channel.call(new GetThreadDump());\n    }\n\n    public static Future<Map<String,String>> getThreadDumpAsync(VirtualChannel channel) throws IOException, InterruptedException {\n        if(channel==null)\n            return new AsyncFutureImpl<Map<String, String>>(Collections.singletonMap(\"N/A\",\"offline\"));\n        return channel.callAsync(new GetThreadDump());\n    }\n\n    private static final class GetThreadDump implements Callable<Map<String,String>,RuntimeException> {\n        public Map<String,String> call() {\n            Map<String,String> r = new LinkedHashMap<String,String>();\n            try {\n                ThreadInfo[] data = Functions.getThreadInfos();\n                Functions.ThreadGroupMap map = Functions.sortThreadsAndGetGroupMap(data);\n                for (ThreadInfo ti : data)\n                    r.put(ti.getThreadName(),Functions.dumpThreadInfo(ti,map));\n            } catch (LinkageError _) {\n                // not in JDK6. fall back to JDK5\n                r.clear();\n                for (Map.Entry<Thread,StackTraceElement[]> t : Functions.dumpAllThreads().entrySet()) {\n                    StringBuilder buf = new StringBuilder();\n                    for (StackTraceElement e : t.getValue())\n                        buf.append(e).append('\\n');\n                    r.put(t.getKey().getName(),buf.toString());\n                }\n            }\n            return r;\n        }\n        private static final long serialVersionUID = 1L;\n    }\n\n    /**\n     * Executes Groovy script remotely.\n     */\n    public static String executeGroovy(String script, VirtualChannel channel) throws IOException, InterruptedException {\n        return channel.call(new Script(script));\n    }\n\n    private static final class Script implements DelegatingCallable<String,RuntimeException> {\n        private final String script;\n        private transient ClassLoader cl;\n\n        private Script(String script) {\n            this.script = script;\n            cl = getClassLoader();\n        }\n\n        public ClassLoader getClassLoader() {\n            return Jenkins.getInstance().getPluginManager().uberClassLoader;\n        }\n\n        public String call() throws RuntimeException {\n            // if we run locally, cl!=null. Otherwise the delegating classloader will be available as context classloader.\n            if (cl==null)       cl = Thread.currentThread().getContextClassLoader();\n            CompilerConfiguration cc = new CompilerConfiguration();\n            cc.addCompilationCustomizers(new ImportCustomizer().addStarImports(\n                    \"jenkins\",\n                    \"jenkins.model\",\n                    \"hudson\",\n                    \"hudson.model\"));\n            GroovyShell shell = new GroovyShell(cl,new Binding(),cc);\n\n            StringWriter out = new StringWriter();\n            PrintWriter pw = new PrintWriter(out);\n            shell.setVariable(\"out\", pw);\n            try {\n                Object output = shell.evaluate(script);\n                if(output!=null)\n                pw.println(\"Result: \"+output);\n            } catch (Throwable t) {\n                t.printStackTrace(pw);\n            }\n            return out.toString();\n        }\n    }\n\n    /**\n     * Obtains the heap dump in an HPROF file.\n     */\n    public static FilePath getHeapDump(VirtualChannel channel) throws IOException, InterruptedException {\n        return channel.call(new Callable<FilePath, IOException>() {\n            public FilePath call() throws IOException {\n                final File hprof = File.createTempFile(\"hudson-heapdump\", \"hprof\");\n                hprof.delete();\n                try {\n                    MBeanServer server = ManagementFactory.getPlatformMBeanServer();\n                    server.invoke(new ObjectName(\"com.sun.management:type=HotSpotDiagnostic\"), \"dumpHeap\",\n                            new Object[]{hprof.getAbsolutePath(), true}, new String[]{String.class.getName(), boolean.class.getName()});\n\n                    return new FilePath(hprof);\n                } catch (JMException e) {\n                    throw new IOException2(e);\n                }\n            }\n\n            private static final long serialVersionUID = 1L;\n        });\n    }\n\n    /**\n     * Heap dump, exposable to URL via Stapler.\n     *\n     */\n    public static class HeapDump {\n        private final AccessControlled owner;\n        private final VirtualChannel channel;\n\n        public HeapDump(AccessControlled owner, VirtualChannel channel) {\n            this.owner = owner;\n            this.channel = channel;\n        }\n\n        /**\n         * Obtains the heap dump.\n         */\n        public void doIndex(StaplerResponse rsp) throws IOException {\n            rsp.sendRedirect(\"heapdump.hprof\");\n        }\n\n        @WebMethod(name=\"heapdump.hprof\")\n        public void doHeapDump(StaplerRequest req, StaplerResponse rsp) throws IOException, InterruptedException {\n            owner.checkPermission(Jenkins.RUN_SCRIPTS);\n            rsp.setContentType(\"application/octet-stream\");\n\n            FilePath dump = obtain();\n            try {\n                dump.copyTo(rsp.getCompressedOutputStream(req));\n            } finally {\n                dump.delete();\n            }\n        }\n\n        public FilePath obtain() throws IOException, InterruptedException {\n            return RemotingDiagnostics.getHeapDump(channel);\n        }\n    }\n}\n"], "filenames": ["core/src/main/java/hudson/util/RemotingDiagnostics.java"], "buggy_code_start_loc": [205], "buggy_code_end_loc": [206], "fixing_code_start_loc": [205], "fixing_code_end_loc": [206], "type": "CWE-264", "message": "The doIndex function in hudson/util/RemotingDiagnostics.java in CloudBees Jenkins before 1.551 and LTS before 1.532.2 allows remote authenticated users with the ADMINISTER permission to obtain sensitive information via vectors related to heapDump.", "other": {"cve": {"id": "CVE-2014-2068", "sourceIdentifier": "security@debian.org", "published": "2014-10-17T15:55:05.883", "lastModified": "2016-06-13T23:43:23.127", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The doIndex function in hudson/util/RemotingDiagnostics.java in CloudBees Jenkins before 1.551 and LTS before 1.532.2 allows remote authenticated users with the ADMINISTER permission to obtain sensitive information via vectors related to heapDump."}, {"lang": "es", "value": "La funci\u00f3n doIndex en hudson/util/RemotingDiagnostics.java de CloudBees Jenkins anterior a 1.551 y LTS anterior a 1.532.2 permite a usuarios remotos autenticados con el permiso ADMINISTER obtener infomaci\u00f3n sensible a trav\u00e9s de vectores relacionados con heapDump."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-264"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jenkins:jenkins:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.550", "matchCriteriaId": "07E4FEB5-A7D9-49FE-839A-0D650CC19C42"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jenkins:jenkins:*:*:*:*:lts:*:*:*", "versionEndIncluding": "1.532.1", "matchCriteriaId": "F5EDE52E-F7BE-457D-8E56-F24800F02241"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2014/02/21/2", "source": "security@debian.org"}, {"url": "https://github.com/jenkinsci/jenkins/commit/0530a6645aac10fec005614211660e98db44b5eb", "source": "security@debian.org", "tags": ["Patch"]}, {"url": "https://wiki.jenkins-ci.org/display/SECURITY/Jenkins+Security+Advisory+2014-02-14", "source": "security@debian.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/jenkinsci/jenkins/commit/0530a6645aac10fec005614211660e98db44b5eb"}}