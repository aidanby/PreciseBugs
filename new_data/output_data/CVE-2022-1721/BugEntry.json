{"buggy_code": ["/**\n * Copyright (c) 2020, JGraph Ltd\n * Copyright (c) 2020, draw.io AG\n */\npackage com.mxgraph.online;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.logging.Logger;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * Servlet to fake a .well-known directory\n */\n@SuppressWarnings(\"serial\")\npublic class WellKnownServlet extends HttpServlet\n{\n\tprivate static final Logger log = Logger\n\t\t\t.getLogger(HttpServlet.class.getName());\n\n\t/**\n\t * @see HttpServlet#HttpServlet()\n\t */\n\tpublic WellKnownServlet()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n\t */\n\tprotected void doGet(HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws ServletException, IOException\n\t{\n        // GAE can't serve dot prefixed folders\n        String uri = request.getRequestURI().replace(\"/.\", \"/\");\n\n        if (uri.toLowerCase().contains(\".json\"))\n        {\n        \tresponse.setContentType(\"application/json\");\n        }\n\n        // Serve whatever was requested from .well-known\n        try (InputStream in = getServletContext().getResourceAsStream(uri))\n        {\n            if (in == null)\n            {\n            \tresponse.sendError(404);\n                return;\n            }\n            \n            byte[] buffer = new byte[8192];\n            int count;\n\n            while ((count = in.read(buffer)) > 0)\n            {\n            \tresponse.getOutputStream().write(buffer, 0, count);\n            }\n            \n            response.getOutputStream().flush();\n            response.getOutputStream().close();\n        }\n    }\n}\n"], "fixing_code": ["/**\n * Copyright (c) 2020, JGraph Ltd\n * Copyright (c) 2020, draw.io AG\n */\npackage com.mxgraph.online;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.logging.Logger;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * Servlet to fake a .well-known directory, GAE does not directly support . prefixed directories\n */\n@SuppressWarnings(\"serial\")\npublic class WellKnownServlet extends HttpServlet\n{\n\tprivate static final Logger log = Logger\n\t\t\t.getLogger(HttpServlet.class.getName());\n\n\t/**\n\t * @see HttpServlet#HttpServlet()\n\t */\n\tpublic WellKnownServlet()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n\t */\n\tprotected void doGet(HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws ServletException, IOException\n\t{\n        // GAE can't serve dot prefixed folders\n        String uri = request.getRequestURI().replace(\"/.\", \"/\");\n        \n        // Currently, there is only one file that this servlet serves. This is only\n        // needed if you want OneDrive integration. \n        if (uri != null && uri.equals(\"/well-known/microsoft-identity-association.json\"))\n        {\n            if (uri.toLowerCase().contains(\".json\"))\n            {\n                response.setContentType(\"application/json\");\n            }\n\n            // Serve whatever was requested from .well-known\n            try (InputStream in = getServletContext().getResourceAsStream(uri))\n            {\n                if (in == null)\n                {\n                    response.sendError(404);\n                    return;\n                }\n                \n                byte[] buffer = new byte[8192];\n                int count;\n\n                while ((count = in.read(buffer)) > 0)\n                {\n                    response.getOutputStream().write(buffer, 0, count);\n                }\n                \n                response.getOutputStream().flush();\n                response.getOutputStream().close();\n            }\n        }\n        else\n        {\n            response.sendError(404);\n            return;\n        }\n    }\n}\n"], "filenames": ["src/main/java/com/mxgraph/online/WellKnownServlet.java"], "buggy_code_start_loc": [17], "buggy_code_end_loc": [66], "fixing_code_start_loc": [17], "fixing_code_end_loc": [76], "type": "CWE-22", "message": "Path Traversal in WellKnownServlet in GitHub repository jgraph/drawio prior to 18.0.5. Read local files of the web application.", "other": {"cve": {"id": "CVE-2022-1721", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-16T15:15:10.243", "lastModified": "2023-02-16T18:11:22.660", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Path Traversal in WellKnownServlet in GitHub repository jgraph/drawio prior to 18.0.5. Read local files of the web application."}, {"lang": "es", "value": "Un Salto de Ruta en WellKnownServlet en el repositorio de GitHub jgraph/drawio versiones anteriores a 18.0.5. Leer archivos locales de la aplicaci\u00f3n web"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:diagrams:drawio:*:*:*:*:*:*:*:*", "versionEndExcluding": "18.0.5", "matchCriteriaId": "0D128DAB-74C0-4269-BE2E-68E645BC391A"}]}]}], "references": [{"url": "https://github.com/jgraph/drawio/commit/01ccb271d34258872b859c0fc1d253cc81341917", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/000931cc-6d0e-4a4f-b4d8-4ba46ba0e699", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jgraph/drawio/commit/01ccb271d34258872b859c0fc1d253cc81341917"}}