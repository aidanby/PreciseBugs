{"buggy_code": ["document.addEventListener('DOMContentLoaded', function(event) {\n    var settings = {\n        activeSignatures: [],\n        burger: document.getElementById('burger'),\n        connectionStats: document.getElementById('connection-status'),\n        matchesCount: document.getElementById('matches-count').getElementsByTagName('span')[0],\n        filtersClear: document.getElementById('filters-clear'),\n        filtersCount: document.getElementById('filters-count').getElementsByTagName('span')[0]\n    };\n    const slugify = (value) => value.toLowerCase().replace(/[^a-z0-9 -]/g, '').replace(/\\s+/g, '-').replace(/-+/g, '-');\n    const sort = (list) => {      \n        signatures = list.getElementsByTagName(\"li\");\n        Array.from(signatures)\n            .sort((a, b) => parseInt(b.getElementsByClassName('menu-item')[0].getAttribute('data-badge') || 0) - parseInt(a.getElementsByClassName('menu-item')[0].getAttribute('data-badge') || 0))\n            .forEach(li => list.appendChild(li));\n    };\n    const updateStatus = (text, cls) => {\n        settings.connectionStats.classList.remove('is-info', 'is-success', 'is-warning', 'is-danger');\n        settings.connectionStats.classList.add(cls);\n        settings.connectionStats.textContent = text;\n    };\n    const filterSignature = (signature) => {\n        var state = settings.activeSignatures.includes(signature.id);\n        signature.classList.toggle('is-active');\n\n        if (!state) settings.activeSignatures.push(signature.id);\n\n        Array.from(document.getElementsByClassName('log')).forEach(log => log.style.display = 'none');\n        settings.activeSignatures.forEach((signatureId) => {\n            Array.from(document.getElementsByClassName(signatureId)).forEach(log => {\n                if (state && signatureId == signature.id) return;\n\n                log.style.display = '';\n            });\n        });\n        \n        if (state) {\n            settings.activeSignatures.splice(settings.activeSignatures.indexOf(signature.id), 1);\n            var anyActive = (settings.activeSignatures.length > 0);\n            Array.from(document.getElementsByClassName(anyActive ? signature.id : 'log')).forEach(log => {\n\n                log.style.display = anyActive ? 'none' : '';\n            });\n        }\n\n        settings.filtersCount.textContent = `${settings.activeSignatures.length} filters`;\n    };\n    const processEvent = (data) => {\n        var eventId = CryptoJS.MD5(JSON.stringify(data)).toString();\n        if (document.getElementById(eventId)) return; // duplicate\n\n        var sigId = slugify(data.category);\n        switch (true) {\n          case sigId.startsWith(\"cve-\"):\n            sigId = \"cves\";\n            break;\n          case sigId.startsWith(\"common-web-attack\"):\n            sigId = \"common-web-attacks\";\n            break;\n          default:\n             break;\n        }\n\n        document.getElementById(sigId) == null ? createSignature(data.category) : true;\n        var sigMenuItem = document.getElementById(sigId).getElementsByClassName('menu-item')[0];\n        sigMenuItem.setAttribute('data-badge', parseInt(sigMenuItem.getAttribute('data-badge') || 0) + 1);\n        sort(document.getElementById('signatures'));\n\n        var row = document.getElementById('messages').insertRow(0);\n        row.classList.add('log', sigId);\n        row.id = eventId;\n        row.insertCell(0).innerHTML = `<td class=\"date\"><span class=\"datetime\" title=\"${new Date().toLocaleString}\">${new Date().toLocaleTimeString()}</span></td>`;\n        row.insertCell(1).innerHTML = `<td class=\"category-name\"><strong>${data.category}</strong></td>`;\n        row.insertCell(2).innerHTML = `<td class=\"element\"><div>${data.element}</pre></div></td>`;\n        row.insertCell(3).innerHTML = `<td class=\"matches\"><strong>${data[data.element]}</strong></td>`;\n        row.insertCell(4).innerHTML = `<td class=\"log-line\"><div><pre>${JSON.stringify(data)}</pre></div></td>`;\n        settings.matchesCount.textContent = `${document.getElementsByClassName('log').length} threats`;\n\n        if (settings.activeSignatures.length > 0 && !settings.activeSignatures.includes(sigId)) row.style.display = 'none';\n    };\n    const listenForEvents = () => {\n        var endpoint = new URL(\"http://{{ .TELER_DASHBOARD_HOST }}:{{ .TELER_DASHBOARD_PORT }}\");\n        endpoint.pathname = \"{{ .TELER_DASHBOARD_ENDPOINT }}\";\n        endpoint.search = \"?stream=teler\";\n\n        var source = new EventSource(endpoint);\n\n        source.onerror = (e) => {\n            updateStatus('Reconnect...', 'is-warning');\n        };\n\n        source.onoopen = (e) => {\n            updateStatus('Syncing...', 'is-info');\n        }\n\n        source.onmessage = (e) => {\n            updateStatus('Connected', 'is-success');\n\n            if (document.getElementById('loading')) document.getElementById('loading').remove();\n            processEvent(JSON.parse(e.data));\n        };\n    };\n    const createSignature = (name) => {\n        var li = document.createElement('li');\n        li.id = slugify(name)\n        li.innerHTML = `<a href=\"#\" class=\"menu-item\" title=\"${name}\">${name}</a>`;\n        li.addEventListener('click', (e) => {\n            e.preventDefault();\n            filterSignature(li);\n        });\n\n        document.getElementById('signatures').appendChild(li);\n    };\n\n    (() => {\n        burger.addEventListener('click', () => {\n            const target = burger.dataset.target;\n            const $target = document.getElementById(target);\n    \n            burger.classList.toggle('is-active');\n            $target.classList.toggle('is-active');\n        });\n\n        settings.filtersClear.addEventListener('click', (event) => {\n            settings.activeSignatures = [];\n            settings.filtersCount.textContent = \"0 filters\";\n\n            Array.from(document.querySelectorAll('#signatures li.is-active')).forEach(log => log.classList.remove('is-active'));\n            Array.from(document.getElementsByClassName('log')).forEach(log => log.style.display = '');\n        });\n\n        fetch(`signatures.json`)\n            .then((resp) => resp.json())\n            .then(signatures => {\n                signatures.forEach(name => {\n                    createSignature(name)\n                });\n\n                listenForEvents();\n            })\n            .catch((err) => {\n                alert('Failed to retrieve signatures! Reloading...')\n                console.error(err)\n            });\n    })();\n});"], "fixing_code": ["document.addEventListener('DOMContentLoaded', function(event) {\n    var settings = {\n        activeSignatures: [],\n        burger: document.getElementById('burger'),\n        connectionStats: document.getElementById('connection-status'),\n        matchesCount: document.getElementById('matches-count').getElementsByTagName('span')[0],\n        filtersClear: document.getElementById('filters-clear'),\n        filtersCount: document.getElementById('filters-count').getElementsByTagName('span')[0]\n    };\n    const slugify = (value) => value.toLowerCase().replace(/[^a-z0-9 -]/g, '').replace(/\\s+/g, '-').replace(/-+/g, '-');\n    const escapeHTML = (string) => {\n        const map = {'&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#039;'};\n        return string.replace(/[&<>\"']/g, function(m) { return map[m]; });\n    };\n    const sort = (list) => {      \n        signatures = list.getElementsByTagName(\"li\");\n        Array.from(signatures)\n            .sort((a, b) => parseInt(b.getElementsByClassName('menu-item')[0].getAttribute('data-badge') || 0) - parseInt(a.getElementsByClassName('menu-item')[0].getAttribute('data-badge') || 0))\n            .forEach(li => list.appendChild(li));\n    };\n    const updateStatus = (text, cls) => {\n        settings.connectionStats.classList.remove('is-info', 'is-success', 'is-warning', 'is-danger');\n        settings.connectionStats.classList.add(cls);\n        settings.connectionStats.textContent = text;\n    };\n    const filterSignature = (signature) => {\n        var state = settings.activeSignatures.includes(signature.id);\n        signature.classList.toggle('is-active');\n\n        if (!state) settings.activeSignatures.push(signature.id);\n\n        Array.from(document.getElementsByClassName('log')).forEach(log => log.style.display = 'none');\n        settings.activeSignatures.forEach((signatureId) => {\n            Array.from(document.getElementsByClassName(signatureId)).forEach(log => {\n                if (state && signatureId == signature.id) return;\n\n                log.style.display = '';\n            });\n        });\n        \n        if (state) {\n            settings.activeSignatures.splice(settings.activeSignatures.indexOf(signature.id), 1);\n            var anyActive = (settings.activeSignatures.length > 0);\n            Array.from(document.getElementsByClassName(anyActive ? signature.id : 'log')).forEach(log => {\n\n                log.style.display = anyActive ? 'none' : '';\n            });\n        }\n\n        settings.filtersCount.textContent = `${settings.activeSignatures.length} filters`;\n    };\n    const processEvent = (data) => {\n        var eventId = CryptoJS.MD5(JSON.stringify(data)).toString();\n        if (document.getElementById(eventId)) return; // duplicate\n\n        var sigId = slugify(data.category);\n        switch (true) {\n          case sigId.startsWith(\"cve-\"):\n            sigId = \"cves\";\n            break;\n          case sigId.startsWith(\"common-web-attack\"):\n            sigId = \"common-web-attacks\";\n            break;\n          default:\n             break;\n        }\n\n        document.getElementById(sigId) == null ? createSignature(data.category) : true;\n        var sigMenuItem = document.getElementById(sigId).getElementsByClassName('menu-item')[0];\n        sigMenuItem.setAttribute('data-badge', parseInt(sigMenuItem.getAttribute('data-badge') || 0) + 1);\n        sort(document.getElementById('signatures'));\n\n        var row = document.getElementById('messages').insertRow(0);\n        row.classList.add('log', sigId);\n        row.id = eventId;\n        row.insertCell(0).innerHTML = `<td class=\"date\"><span class=\"datetime\" title=\"${new Date().toLocaleString}\">${new Date().toLocaleTimeString()}</span></td>`;\n        row.insertCell(1).innerHTML = `<td class=\"category-name\"><strong>${escapeHTML(data.category)}</strong></td>`;\n        row.insertCell(2).innerHTML = `<td class=\"element\"><div>${data.element}</pre></div></td>`;\n        row.insertCell(3).innerHTML = `<td class=\"matches\"><strong>${escapeHTML(data[data.element])}</strong></td>`;\n        row.insertCell(4).innerHTML = `<td class=\"log-line\"><div><pre>${JSON.stringify(data)}</pre></div></td>`;\n        settings.matchesCount.textContent = `${document.getElementsByClassName('log').length} threats`;\n\n        if (settings.activeSignatures.length > 0 && !settings.activeSignatures.includes(sigId)) row.style.display = 'none';\n    };\n    const listenForEvents = () => {\n        var endpoint = new URL(\"http://{{ .TELER_DASHBOARD_HOST }}:{{ .TELER_DASHBOARD_PORT }}\");\n        endpoint.pathname = \"{{ .TELER_DASHBOARD_ENDPOINT }}\";\n        endpoint.search = \"?stream=teler\";\n\n        var source = new EventSource(endpoint);\n\n        source.onerror = (e) => {\n            updateStatus('Reconnect...', 'is-warning');\n        };\n\n        source.onoopen = (e) => {\n            updateStatus('Syncing...', 'is-info');\n        }\n\n        source.onmessage = (e) => {\n            updateStatus('Connected', 'is-success');\n\n            if (document.getElementById('loading')) document.getElementById('loading').remove();\n            processEvent(JSON.parse(e.data));\n        };\n    };\n    const createSignature = (name) => {\n        var li = document.createElement('li');\n        li.id = slugify(name)\n        li.innerHTML = `<a href=\"#\" class=\"menu-item\" title=\"${escapeHTML(name)}\">${escapeHTML(name)}</a>`;\n        li.addEventListener('click', (e) => {\n            e.preventDefault();\n            filterSignature(li);\n        });\n\n        document.getElementById('signatures').appendChild(li);\n    };\n\n    (() => {\n        burger.addEventListener('click', () => {\n            const target = burger.dataset.target;\n            const $target = document.getElementById(target);\n    \n            burger.classList.toggle('is-active');\n            $target.classList.toggle('is-active');\n        });\n\n        settings.filtersClear.addEventListener('click', (event) => {\n            settings.activeSignatures = [];\n            settings.filtersCount.textContent = \"0 filters\";\n\n            Array.from(document.querySelectorAll('#signatures li.is-active')).forEach(log => log.classList.remove('is-active'));\n            Array.from(document.getElementsByClassName('log')).forEach(log => log.style.display = '');\n        });\n\n        fetch(`signatures.json`)\n            .then((resp) => resp.json())\n            .then(signatures => {\n                signatures.forEach(name => {\n                    createSignature(name)\n                });\n\n                listenForEvents();\n            })\n            .catch((err) => {\n                alert('Failed to retrieve signatures! Reloading...')\n                console.error(err)\n            });\n    })();\n});"], "filenames": ["internal/event/www/script.js"], "buggy_code_start_loc": [10], "buggy_code_end_loc": [107], "fixing_code_start_loc": [11], "fixing_code_end_loc": [111], "type": "CWE-79", "message": "teler is an real-time intrusion detection and threat alert dashboard. teler prior to version 2.0.0-rc.4 is vulnerable to DOM-based cross-site scripting (XSS) in the teler dashboard. When teler requests messages from the event stream on the `/events` endpoint, the log data displayed on the dashboard are not sanitized. This only affects authenticated users and can only be exploited based on detected threats if the log contains a DOM scripting payload. This vulnerability has been fixed on version `v2.0.0-rc.4`. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2022-23466", "sourceIdentifier": "security-advisories@github.com", "published": "2022-12-06T18:15:09.997", "lastModified": "2022-12-09T13:37:33.953", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "teler is an real-time intrusion detection and threat alert dashboard. teler prior to version 2.0.0-rc.4 is vulnerable to DOM-based cross-site scripting (XSS) in the teler dashboard. When teler requests messages from the event stream on the `/events` endpoint, the log data displayed on the dashboard are not sanitized. This only affects authenticated users and can only be exploited based on detected threats if the log contains a DOM scripting payload. This vulnerability has been fixed on version `v2.0.0-rc.4`. Users are advised to upgrade. There are no known workarounds for this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:teler_project:teler:2.0.0:dev:*:*:*:*:*:*", "matchCriteriaId": "B8D05462-0FF8-4C55-8D74-32792BCFE605"}, {"vulnerable": true, "criteria": "cpe:2.3:a:teler_project:teler:2.0.0:rc:*:*:*:*:*:*", "matchCriteriaId": "3C0CCA04-45FC-4F70-8370-D9996B6689B0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:teler_project:teler:2.0.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "9AFDB28D-E9A2-4255-BE1E-2B5A0EBAD9F5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:teler_project:teler:2.0.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "333A02F9-5BA3-45F4-BB8B-FC84F49DF75B"}]}]}], "references": [{"url": "https://github.com/kitabisa/teler/commit/20f59eda2420ac64e29f199a61230a0abc875e8e", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/kitabisa/teler/security/advisories/GHSA-xr7p-8q82-878q", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kitabisa/teler/commit/20f59eda2420ac64e29f199a61230a0abc875e8e"}}