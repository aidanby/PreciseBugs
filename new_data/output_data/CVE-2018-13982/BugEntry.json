{"buggy_code": ["<?php\n/**\n * Project:     Smarty: the PHP compiling template engine\n * File:        Smarty.class.php\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n * For questions, help, comments, discussion, etc., please join the\n * Smarty mailing list. Send a blank e-mail to\n * smarty-discussion-subscribe@googlegroups.com\n *\n * @link      http://www.smarty.net/\n * @copyright 2018 New Digital Group, Inc.\n * @copyright 2018 Uwe Tews\n * @author    Monte Ohrt <monte at ohrt dot com>\n * @author    Uwe Tews   <uwe dot tews at gmail dot com>\n * @author    Rodney Rehm\n * @package   Smarty\n * @version   3.1.33-dev\n */\n/**\n * set SMARTY_DIR to absolute path to Smarty library files.\n * Sets SMARTY_DIR only if user application has not already defined it.\n */\nif (!defined('SMARTY_DIR')) {\n    /**\n     *\n     */\n    define('SMARTY_DIR', dirname(__FILE__) . DIRECTORY_SEPARATOR);\n}\n/**\n * set SMARTY_SYSPLUGINS_DIR to absolute path to Smarty internal plugins.\n * Sets SMARTY_SYSPLUGINS_DIR only if user application has not already defined it.\n */\nif (!defined('SMARTY_SYSPLUGINS_DIR')) {\n    /**\n     *\n     */\n    define('SMARTY_SYSPLUGINS_DIR', SMARTY_DIR . 'sysplugins' . DIRECTORY_SEPARATOR);\n}\nif (!defined('SMARTY_PLUGINS_DIR')) {\n    /**\n     *\n     */\n    define('SMARTY_PLUGINS_DIR', SMARTY_DIR . 'plugins' . DIRECTORY_SEPARATOR);\n}\nif (!defined('SMARTY_MBSTRING')) {\n    /**\n     *\n     */\n    define('SMARTY_MBSTRING', function_exists('mb_get_info'));\n}\nif (!defined('SMARTY_RESOURCE_CHAR_SET')) {\n    // UTF-8 can only be done properly when mbstring is available!\n    /**\n     * @deprecated in favor of Smarty::$_CHARSET\n     */\n    define('SMARTY_RESOURCE_CHAR_SET', SMARTY_MBSTRING ? 'UTF-8' : 'ISO-8859-1');\n}\nif (!defined('SMARTY_RESOURCE_DATE_FORMAT')) {\n    /**\n     * @deprecated in favor of Smarty::$_DATE_FORMAT\n     */\n    define('SMARTY_RESOURCE_DATE_FORMAT', '%b %e, %Y');\n}\n/**\n * Load Smarty_Autoloader\n */\nif (!class_exists('Smarty_Autoloader')) {\n    include dirname(__FILE__) . '/bootstrap.php';\n}\n/**\n * Load always needed external class files\n */\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_internal_data.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_internal_extension_handler.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_internal_templatebase.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_internal_template.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_resource.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_variable.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_template_source.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_template_resource_base.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_internal_resource_file.php';\n\n/**\n * This is the main Smarty class\n *\n * @package Smarty\n *\n * The following methods will be dynamically loaded by the extension handler when they are called.\n * They are located in a corresponding Smarty_Internal_Method_xxxx class\n *\n * @method int clearAllCache(int $exp_time = null, string $type = null)\n * @method int clearCache(string $template_name, string $cache_id = null, string $compile_id = null, int $exp_time = null, string $type = null)\n * @method int compileAllTemplates(string $extension = '.tpl', bool $force_compile = false, int $time_limit = 0, $max_errors = null)\n * @method int compileAllConfig(string $extension = '.conf', bool $force_compile = false, int $time_limit = 0, $max_errors = null)\n * @method int clearCompiledTemplate($resource_name = null, $compile_id = null, $exp_time = null)\n */\nclass Smarty extends Smarty_Internal_TemplateBase\n{\n    /**\n     * smarty version\n     */\n    const SMARTY_VERSION = '3.1.33-dev-1';\n    /**\n     * define variable scopes\n     */\n    const SCOPE_LOCAL    = 1;\n    const SCOPE_PARENT   = 2;\n    const SCOPE_TPL_ROOT = 4;\n    const SCOPE_ROOT     = 8;\n    const SCOPE_SMARTY   = 16;\n    const SCOPE_GLOBAL   = 32;\n    /**\n     * define caching modes\n     */\n    const CACHING_OFF              = 0;\n    const CACHING_LIFETIME_CURRENT = 1;\n    const CACHING_LIFETIME_SAVED   = 2;\n    /**\n     * define constant for clearing cache files be saved expiration dates\n     */\n    const CLEAR_EXPIRED = -1;\n    /**\n     * define compile check modes\n     */\n    const COMPILECHECK_OFF       = 0;\n    const COMPILECHECK_ON        = 1;\n    const COMPILECHECK_CACHEMISS = 2;\n    /**\n     * define debug modes\n     */\n    const DEBUG_OFF        = 0;\n    const DEBUG_ON         = 1;\n    const DEBUG_INDIVIDUAL = 2;\n    /**\n     * modes for handling of \"<?php ... ?>\" tags in templates.\n     */\n    const PHP_PASSTHRU = 0; //-> print tags as plain text\n    const PHP_QUOTE    = 1; //-> escape tags as entities\n    const PHP_REMOVE   = 2; //-> escape tags as entities\n    const PHP_ALLOW    = 3; //-> escape tags as entities\n    /**\n     * filter types\n     */\n    const FILTER_POST     = 'post';\n    const FILTER_PRE      = 'pre';\n    const FILTER_OUTPUT   = 'output';\n    const FILTER_VARIABLE = 'variable';\n    /**\n     * plugin types\n     */\n    const PLUGIN_FUNCTION         = 'function';\n    const PLUGIN_BLOCK            = 'block';\n    const PLUGIN_COMPILER         = 'compiler';\n    const PLUGIN_MODIFIER         = 'modifier';\n    const PLUGIN_MODIFIERCOMPILER = 'modifiercompiler';\n    /**\n     * assigned global tpl vars\n     */\n    public static $global_tpl_vars = array();\n    /**\n     * Flag denoting if Multibyte String functions are available\n     */\n    public static $_MBSTRING = SMARTY_MBSTRING;\n    /**\n     * The character set to adhere to (e.g. \"UTF-8\")\n     */\n    public static $_CHARSET = SMARTY_RESOURCE_CHAR_SET;\n    /**\n     * The date format to be used internally\n     * (accepts date() and strftime())\n     */\n    public static $_DATE_FORMAT = SMARTY_RESOURCE_DATE_FORMAT;\n    /**\n     * Flag denoting if PCRE should run in UTF-8 mode\n     */\n    public static $_UTF8_MODIFIER = 'u';\n    /**\n     * Flag denoting if operating system is windows\n     */\n    public static $_IS_WINDOWS = false;\n    /**\n     * auto literal on delimiters with whitespace\n     *\n     * @var boolean\n     */\n    public $auto_literal = true;\n    /**\n     * display error on not assigned variables\n     *\n     * @var boolean\n     */\n    public $error_unassigned = false;\n    /**\n     * look up relative file path in include_path\n     *\n     * @var boolean\n     */\n    public $use_include_path = false;\n    /**\n     * flag if template_dir is normalized\n     *\n     * @var bool\n     */\n    public $_templateDirNormalized = false;\n    /**\n     * joined template directory string used in cache keys\n     *\n     * @var string\n     */\n    public $_joined_template_dir = null;\n    /**\n     * flag if config_dir is normalized\n     *\n     * @var bool\n     */\n    public $_configDirNormalized = false;\n    /**\n     * joined config directory string used in cache keys\n     *\n     * @var string\n     */\n    public $_joined_config_dir = null;\n    /**\n     * default template handler\n     *\n     * @var callable\n     */\n    public $default_template_handler_func = null;\n    /**\n     * default config handler\n     *\n     * @var callable\n     */\n    public $default_config_handler_func = null;\n    /**\n     * default plugin handler\n     *\n     * @var callable\n     */\n    public $default_plugin_handler_func = null;\n    /**\n     * flag if template_dir is normalized\n     *\n     * @var bool\n     */\n    public $_compileDirNormalized = false;\n    /**\n     * flag if plugins_dir is normalized\n     *\n     * @var bool\n     */\n    public $_pluginsDirNormalized = false;\n    /**\n     * flag if template_dir is normalized\n     *\n     * @var bool\n     */\n    public $_cacheDirNormalized = false;\n    /**\n     * force template compiling?\n     *\n     * @var boolean\n     */\n    public $force_compile = false;\n     /**\n     * use sub dirs for compiled/cached files?\n     *\n     * @var boolean\n     */\n    public $use_sub_dirs = false;\n    /**\n     * allow ambiguous resources (that are made unique by the resource handler)\n     *\n     * @var boolean\n     */\n    public $allow_ambiguous_resources = false;\n    /**\n     * merge compiled includes\n     *\n     * @var boolean\n     */\n    public $merge_compiled_includes = false;\n    /*\n    * flag for behaviour when extends: resource  and {extends} tag are used simultaneous\n    *   if false disable execution of {extends} in templates called by extends resource.\n    *   (behaviour as versions < 3.1.28)\n    *\n    * @var boolean\n    */\n    public $extends_recursion = true;\n    /**\n     * force cache file creation\n     *\n     * @var boolean\n     */\n    public $force_cache = false;\n    /**\n     * template left-delimiter\n     *\n     * @var string\n     */\n    public $left_delimiter = \"{\";\n    /**\n     * template right-delimiter\n     *\n     * @var string\n     */\n    public $right_delimiter = \"}\";\n    /**\n     * array of strings which shall be treated as literal by compiler\n     *\n     * @var array string\n     */\n    public $literals = array();\n    /**\n     * class name\n     * This should be instance of Smarty_Security.\n     *\n     * @var string\n     * @see Smarty_Security\n     */\n    public $security_class = 'Smarty_Security';\n    /**\n     * implementation of security class\n     *\n     * @var Smarty_Security\n     */\n    public $security_policy = null;\n    /**\n     * controls handling of PHP-blocks\n     *\n     * @var integer\n     */\n    public $php_handling = self::PHP_PASSTHRU;\n    /**\n     * controls if the php template file resource is allowed\n     *\n     * @var bool\n     */\n    public $allow_php_templates = false;\n    /**\n     * debug mode\n     * Setting this to true enables the debug-console.\n     *\n     * @var boolean\n     */\n    public $debugging = false;\n    /**\n     * This determines if debugging is enable-able from the browser.\n     * <ul>\n     *  <li>NONE => no debugging control allowed</li>\n     *  <li>URL => enable debugging when SMARTY_DEBUG is found in the URL.</li>\n     * </ul>\n     *\n     * @var string\n     */\n    public $debugging_ctrl = 'NONE';\n    /**\n     * Name of debugging URL-param.\n     * Only used when $debugging_ctrl is set to 'URL'.\n     * The name of the URL-parameter that activates debugging.\n     *\n     * @var string\n     */\n    public $smarty_debug_id = 'SMARTY_DEBUG';\n    /**\n     * Path of debug template.\n     *\n     * @var string\n     */\n    public $debug_tpl = null;\n    /**\n     * When set, smarty uses this value as error_reporting-level.\n     *\n     * @var int\n     */\n    public $error_reporting = null;\n    /**\n     * Controls whether variables with the same name overwrite each other.\n     *\n     * @var boolean\n     */\n    public $config_overwrite = true;\n    /**\n     * Controls whether config values of on/true/yes and off/false/no get converted to boolean.\n     *\n     * @var boolean\n     */\n    public $config_booleanize = true;\n    /**\n     * Controls whether hidden config sections/vars are read from the file.\n     *\n     * @var boolean\n     */\n    public $config_read_hidden = false;\n    /**\n     * locking concurrent compiles\n     *\n     * @var boolean\n     */\n    public $compile_locking = true;\n    /**\n     * Controls whether cache resources should use locking mechanism\n     *\n     * @var boolean\n     */\n    public $cache_locking = false;\n    /**\n     * seconds to wait for acquiring a lock before ignoring the write lock\n     *\n     * @var float\n     */\n    public $locking_timeout = 10;\n    /**\n     * resource type used if none given\n     * Must be an valid key of $registered_resources.\n     *\n     * @var string\n     */\n    public $default_resource_type = 'file';\n    /**\n     * caching type\n     * Must be an element of $cache_resource_types.\n     *\n     * @var string\n     */\n    public $caching_type = 'file';\n    /**\n     * config type\n     *\n     * @var string\n     */\n    public $default_config_type = 'file';\n    /**\n     * check If-Modified-Since headers\n     *\n     * @var boolean\n     */\n    public $cache_modified_check = false;\n    /**\n     * registered plugins\n     *\n     * @var array\n     */\n    public $registered_plugins = array();\n    /**\n     * registered objects\n     *\n     * @var array\n     */\n    public $registered_objects = array();\n    /**\n     * registered classes\n     *\n     * @var array\n     */\n    public $registered_classes = array();\n    /**\n     * registered filters\n     *\n     * @var array\n     */\n    public $registered_filters = array();\n    /**\n     * registered resources\n     *\n     * @var array\n     */\n    public $registered_resources = array();\n    /**\n     * registered cache resources\n     *\n     * @var array\n     */\n    public $registered_cache_resources = array();\n    /**\n     * autoload filter\n     *\n     * @var array\n     */\n    public $autoload_filters = array();\n    /**\n     * default modifier\n     *\n     * @var array\n     */\n    public $default_modifiers = array();\n    /**\n     * autoescape variable output\n     *\n     * @var boolean\n     */\n    public $escape_html = false;\n    /**\n     * start time for execution time calculation\n     *\n     * @var int\n     */\n    public $start_time = 0;\n    /**\n     * required by the compiler for BC\n     *\n     * @var string\n     */\n    public $_current_file = null;\n    /**\n     * internal flag to enable parser debugging\n     *\n     * @var bool\n     */\n    public $_parserdebug = false;\n    /**\n     * This object type (Smarty = 1, template = 2, data = 4)\n     *\n     * @var int\n     */\n    public $_objType = 1;\n    /**\n     * Debug object\n     *\n     * @var Smarty_Internal_Debug\n     */\n    public $_debug = null;\n    /**\n     * template directory\n     *\n     * @var array\n     */\n    protected $template_dir = array('./templates/');\n    /**\n     * flags for normalized template directory entries\n     *\n     * @var array\n     */\n    protected $_processedTemplateDir = array();\n    /**\n     * config directory\n     *\n     * @var array\n     */\n    protected $config_dir = array('./configs/');\n    /**\n     * flags for normalized template directory entries\n     *\n     * @var array\n     */\n    protected $_processedConfigDir = array();\n    /**\n     * compile directory\n     *\n     * @var string\n     */\n    protected $compile_dir = './templates_c/';\n    /**\n     * plugins directory\n     *\n     * @var array\n     */\n    protected $plugins_dir = array();\n    /**\n     * cache directory\n     *\n     * @var string\n     */\n    protected $cache_dir = './cache/';\n    /**\n     * removed properties\n     *\n     * @var string[]\n     */\n    protected $obsoleteProperties = array('resource_caching', 'template_resource_caching', 'direct_access_security',\n                                          '_dir_perms', '_file_perms', 'plugin_search_order',\n                                          'inheritance_merge_compiled_includes', 'resource_cache_mode',);\n    /**\n     * List of private properties which will call getter/setter on a direct access\n     *\n     * @var string[]\n     */\n    protected $accessMap = array('template_dir' => 'TemplateDir', 'config_dir' => 'ConfigDir',\n                                 'plugins_dir'  => 'PluginsDir', 'compile_dir' => 'CompileDir',\n                                 'cache_dir'    => 'CacheDir',);\n\n    /**\n     * Initialize new Smarty object\n     */\n    public function __construct()\n    {\n        $this->_clearTemplateCache();\n        parent::__construct();\n        if (is_callable('mb_internal_encoding')) {\n            mb_internal_encoding(Smarty::$_CHARSET);\n        }\n        $this->start_time = microtime(true);\n        if (isset($_SERVER[ 'SCRIPT_NAME' ])) {\n            Smarty::$global_tpl_vars[ 'SCRIPT_NAME' ] = new Smarty_Variable($_SERVER[ 'SCRIPT_NAME' ]);\n        }\n        // Check if we're running on windows\n        Smarty::$_IS_WINDOWS = strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';\n        // let PCRE (preg_*) treat strings as ISO-8859-1 if we're not dealing with UTF-8\n        if (Smarty::$_CHARSET !== 'UTF-8') {\n            Smarty::$_UTF8_MODIFIER = '';\n        }\n    }\n\n    /**\n     * Enable error handler to mute expected messages\n     *\n     * @return boolean\n     * @deprecated\n     */\n    public static function muteExpectedErrors()\n    {\n        return Smarty_Internal_ErrorHandler::muteExpectedErrors();\n    }\n\n    /**\n     * Disable error handler muting expected messages\n     *\n     * @deprecated\n     */\n    public static function unmuteExpectedErrors()\n    {\n        restore_error_handler();\n    }\n\n    /**\n     * Check if a template resource exists\n     *\n     * @param  string $resource_name template name\n     *\n     * @return bool status\n     * @throws \\SmartyException\n     */\n    public function templateExists($resource_name)\n    {\n        // create source object\n        $source = Smarty_Template_Source::load(null, $this, $resource_name);\n        return $source->exists;\n    }\n\n    /**\n     * Loads security class and enables security\n     *\n     * @param  string|Smarty_Security $security_class if a string is used, it must be class-name\n     *\n     * @return Smarty                 current Smarty instance for chaining\n     * @throws SmartyException        when an invalid class name is provided\n     */\n    public function enableSecurity($security_class = null)\n    {\n        Smarty_Security::enableSecurity($this, $security_class);\n        return $this;\n    }\n\n    /**\n     * Disable security\n     *\n     * @return Smarty current Smarty instance for chaining\n     */\n    public function disableSecurity()\n    {\n        $this->security_policy = null;\n        return $this;\n    }\n\n    /**\n     * Add template directory(s)\n     *\n     * @param  string|array $template_dir directory(s) of template sources\n     * @param  string       $key          of the array element to assign the template dir to\n     * @param bool          $isConfig     true for config_dir\n     *\n     * @return Smarty          current Smarty instance for chaining\n     */\n    public function addTemplateDir($template_dir, $key = null, $isConfig = false)\n    {\n        if ($isConfig) {\n            $processed = &$this->_processedConfigDir;\n            $dir = &$this->config_dir;\n            $this->_configDirNormalized = false;\n        } else {\n            $processed = &$this->_processedTemplateDir;\n            $dir = &$this->template_dir;\n            $this->_templateDirNormalized = false;\n        }\n        if (is_array($template_dir)) {\n            foreach ($template_dir as $k => $v) {\n                if (is_int($k)) {\n                    // indexes are not merged but appended\n                    $dir[] = $v;\n                } else {\n                    // string indexes are overridden\n                    $dir[ $k ] = $v;\n                    unset($processed[ $key ]);\n                }\n            }\n        } else {\n            if ($key !== null) {\n                // override directory at specified index\n                $dir[ $key ] = $template_dir;\n                unset($processed[ $key ]);\n            } else {\n                // append new directory\n                $dir[] = $template_dir;\n            }\n        }\n        return $this;\n    }\n\n    /**\n     * Get template directories\n     *\n     * @param mixed $index    index of directory to get, null to get all\n     * @param bool  $isConfig true for config_dir\n     *\n     * @return array list of template directories, or directory of $index\n     */\n    public function getTemplateDir($index = null, $isConfig = false)\n    {\n        if ($isConfig) {\n            $dir = &$this->config_dir;\n        } else {\n            $dir = &$this->template_dir;\n        }\n        if ($isConfig ? !$this->_configDirNormalized : !$this->_templateDirNormalized) {\n            $this->_normalizeTemplateConfig($isConfig);\n        }\n        if ($index !== null) {\n            return isset($dir[ $index ]) ? $dir[ $index ] : null;\n        }\n        return $dir;\n    }\n\n    /**\n     * Set template directory\n     *\n     * @param  string|array $template_dir directory(s) of template sources\n     * @param bool          $isConfig     true for config_dir\n     *\n     * @return \\Smarty current Smarty instance for chaining\n     */\n    public function setTemplateDir($template_dir, $isConfig = false)\n    {\n        if ($isConfig) {\n            $this->config_dir = array();\n            $this->_processedConfigDir = array();\n        } else {\n            $this->template_dir = array();\n            $this->_processedTemplateDir = array();\n        }\n        $this->addTemplateDir($template_dir, null, $isConfig);\n        return $this;\n    }\n\n    /**\n     * Add config directory(s)\n     *\n     * @param string|array $config_dir directory(s) of config sources\n     * @param mixed        $key        key of the array element to assign the config dir to\n     *\n     * @return Smarty current Smarty instance for chaining\n     */\n    public function addConfigDir($config_dir, $key = null)\n    {\n        return $this->addTemplateDir($config_dir, $key, true);\n    }\n\n    /**\n     * Get config directory\n     *\n     * @param mixed $index index of directory to get, null to get all\n     *\n     * @return array configuration directory\n     */\n    public function getConfigDir($index = null)\n    {\n        return $this->getTemplateDir($index, true);\n    }\n\n    /**\n     * Set config directory\n     *\n     * @param $config_dir\n     *\n     * @return Smarty       current Smarty instance for chaining\n     */\n    public function setConfigDir($config_dir)\n    {\n        return $this->setTemplateDir($config_dir, true);\n    }\n\n    /**\n     * Adds directory of plugin files\n     *\n     * @param null|array|string $plugins_dir\n     *\n     * @return Smarty current Smarty instance for chaining\n     */\n    public function addPluginsDir($plugins_dir)\n    {\n        if (empty($this->plugins_dir)) {\n            $this->plugins_dir[] = SMARTY_PLUGINS_DIR;\n        }\n        $this->plugins_dir = array_merge($this->plugins_dir, (array)$plugins_dir);\n        $this->_pluginsDirNormalized = false;\n        return $this;\n    }\n\n    /**\n     * Get plugin directories\n     *\n     * @return array list of plugin directories\n     */\n    public function getPluginsDir()\n    {\n        if (empty($this->plugins_dir)) {\n            $this->plugins_dir[] = SMARTY_PLUGINS_DIR;\n            $this->_pluginsDirNormalized = false;\n        }\n        if (!$this->_pluginsDirNormalized) {\n            if (!is_array($this->plugins_dir)) {\n                $this->plugins_dir = (array)$this->plugins_dir;\n            }\n            foreach ($this->plugins_dir as $k => $v) {\n                $this->plugins_dir[ $k ] = $this->_realpath(rtrim($v, '/\\\\') . DIRECTORY_SEPARATOR, true);\n            }\n            $this->_cache[ 'plugin_files' ] = array();\n            $this->_pluginsDirNormalized = true;\n        }\n        return $this->plugins_dir;\n    }\n\n    /**\n     * Set plugins directory\n     *\n     * @param  string|array $plugins_dir directory(s) of plugins\n     *\n     * @return Smarty       current Smarty instance for chaining\n     */\n    public function setPluginsDir($plugins_dir)\n    {\n        $this->plugins_dir = (array)$plugins_dir;\n        $this->_pluginsDirNormalized = false;\n        return $this;\n    }\n\n    /**\n     * Get compiled directory\n     *\n     * @return string path to compiled templates\n     */\n    public function getCompileDir()\n    {\n        if (!$this->_compileDirNormalized) {\n            $this->_normalizeDir('compile_dir', $this->compile_dir);\n            $this->_compileDirNormalized = true;\n        }\n        return $this->compile_dir;\n    }\n\n    /**\n     *\n     * @param  string $compile_dir directory to store compiled templates in\n     *\n     * @return Smarty current Smarty instance for chaining\n     */\n    public function setCompileDir($compile_dir)\n    {\n        $this->_normalizeDir('compile_dir', $compile_dir);\n        $this->_compileDirNormalized = true;\n        return $this;\n    }\n\n    /**\n     * Get cache directory\n     *\n     * @return string path of cache directory\n     */\n    public function getCacheDir()\n    {\n        if (!$this->_cacheDirNormalized) {\n            $this->_normalizeDir('cache_dir', $this->cache_dir);\n            $this->_cacheDirNormalized = true;\n        }\n        return $this->cache_dir;\n    }\n\n    /**\n     * Set cache directory\n     *\n     * @param  string $cache_dir directory to store cached templates in\n     *\n     * @return Smarty current Smarty instance for chaining\n     */\n    public function setCacheDir($cache_dir)\n    {\n        $this->_normalizeDir('cache_dir', $cache_dir);\n        $this->_cacheDirNormalized = true;\n        return $this;\n    }\n\n    /**\n     * creates a template object\n     *\n     * @param  string  $template   the resource handle of the template file\n     * @param  mixed   $cache_id   cache id to be used with this template\n     * @param  mixed   $compile_id compile id to be used with this template\n     * @param  object  $parent     next higher level of Smarty variables\n     * @param  boolean $do_clone   flag is Smarty object shall be cloned\n     *\n     * @return \\Smarty_Internal_Template template object\n     * @throws \\SmartyException\n     */\n    public function createTemplate($template, $cache_id = null, $compile_id = null, $parent = null, $do_clone = true)\n    {\n        if ($cache_id !== null && (is_object($cache_id) || is_array($cache_id))) {\n            $parent = $cache_id;\n            $cache_id = null;\n        }\n        if ($parent !== null && is_array($parent)) {\n            $data = $parent;\n            $parent = null;\n        } else {\n            $data = null;\n        }\n        if (!$this->_templateDirNormalized) {\n            $this->_normalizeTemplateConfig(false);\n        }\n        $_templateId = $this->_getTemplateId($template, $cache_id, $compile_id);\n        $tpl = null;\n        if ($this->caching && isset(Smarty_Internal_Template::$isCacheTplObj[ $_templateId ])) {\n            $tpl = $do_clone ? clone Smarty_Internal_Template::$isCacheTplObj[ $_templateId ] :\n                Smarty_Internal_Template::$isCacheTplObj[ $_templateId ];\n            $tpl->inheritance = null;\n            $tpl->tpl_vars = $tpl->config_vars = array();\n        } else if (!$do_clone && isset(Smarty_Internal_Template::$tplObjCache[ $_templateId ])) {\n            $tpl = clone Smarty_Internal_Template::$tplObjCache[ $_templateId ];\n            $tpl->inheritance = null;\n            $tpl->tpl_vars = $tpl->config_vars = array();\n        } else {\n            /* @var Smarty_Internal_Template $tpl */\n            $tpl = new $this->template_class($template, $this, null, $cache_id, $compile_id, null, null);\n            $tpl->templateId = $_templateId;\n        }\n        if ($do_clone) {\n            $tpl->smarty = clone $tpl->smarty;\n        }\n        $tpl->parent = $parent ? $parent : $this;\n        // fill data if present\n        if (!empty($data) && is_array($data)) {\n            // set up variable values\n            foreach ($data as $_key => $_val) {\n                $tpl->tpl_vars[ $_key ] = new Smarty_Variable($_val);\n            }\n        }\n        if ($this->debugging || $this->debugging_ctrl === 'URL') {\n            $tpl->smarty->_debug = new Smarty_Internal_Debug();\n            // check URL debugging control\n            if (!$this->debugging && $this->debugging_ctrl === 'URL') {\n                $tpl->smarty->_debug->debugUrl($tpl->smarty);\n            }\n        }\n        return $tpl;\n    }\n\n    /**\n     * Takes unknown classes and loads plugin files for them\n     * class name format: Smarty_PluginType_PluginName\n     * plugin filename format: plugintype.pluginname.php\n     *\n     * @param  string $plugin_name class plugin name to load\n     * @param  bool   $check       check if already loaded\n     *\n     * @throws SmartyException\n     * @return string |boolean filepath of loaded file or false\n     */\n    public function loadPlugin($plugin_name, $check = true)\n    {\n        return $this->ext->loadPlugin->loadPlugin($this, $plugin_name, $check);\n    }\n\n    /**\n     * Get unique template id\n     *\n     * @param string                    $template_name\n     * @param null|mixed                $cache_id\n     * @param null|mixed                $compile_id\n     * @param null                      $caching\n     * @param \\Smarty_Internal_Template $template\n     *\n     * @return string\n     * @throws \\SmartyException\n     */\n    public function _getTemplateId($template_name,\n                                   $cache_id = null,\n                                   $compile_id = null,\n                                   $caching = null,\n                                   Smarty_Internal_Template $template = null)\n    {\n        $template_name = (strpos($template_name, ':') === false) ? \"{$this->default_resource_type}:{$template_name}\" :\n            $template_name;\n        $cache_id = $cache_id === null ? $this->cache_id : $cache_id;\n        $compile_id = $compile_id === null ? $this->compile_id : $compile_id;\n        $caching = (int)($caching === null ? $this->caching : $caching);\n        if ((isset($template) && strpos($template_name, ':.') !== false) || $this->allow_ambiguous_resources) {\n            $_templateId =\n                Smarty_Resource::getUniqueTemplateName((isset($template) ? $template : $this), $template_name) .\n                \"#{$cache_id}#{$compile_id}#{$caching}\";\n        } else {\n            $_templateId = $this->_joined_template_dir . \"#{$template_name}#{$cache_id}#{$compile_id}#{$caching}\";\n        }\n        if (isset($_templateId[ 150 ])) {\n            $_templateId = sha1($_templateId);\n        }\n        return $_templateId;\n    }\n\n    /**\n     * Normalize path\n     *  - remove /./ and /../\n     *  - make it absolute if required\n     *\n     * @param string $path      file path\n     * @param bool   $realpath  if true - convert to absolute\n     *                          false - convert to relative\n     *                          null - keep as it is but remove /./ /../\n     *\n     * @return string\n     */\n    public function _realpath($path, $realpath = null)\n    {\n        static $nds = null;\n        static $sepDotSep = null;\n         static $sepSep =null;\n        if (!isset($nds)) {\n            $nds = array('/' => '\\\\', '\\\\' => '/');\n            $sepDotSep = DIRECTORY_SEPARATOR . '.' . DIRECTORY_SEPARATOR;\n            $sepSep = DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR;\n        }\n        // normalize DIRECTORY_SEPARATOR\n        $path = str_replace(array($nds[DIRECTORY_SEPARATOR], $sepDotSep), DIRECTORY_SEPARATOR, $path);\n        preg_match('%^(?<root>(?:[[:alpha:]]:[\\\\\\\\]|/|[\\\\\\\\]{2}[[:alpha:]]+|[[:print:]]{2,}:[/]{2}|[\\\\\\\\])?)(?<path>(.*))$%u',\n                   $path,\n                   $parts);\n        $path = $parts[ 'path' ];\n        if ($parts[ 'root' ] === '\\\\') {\n            $parts[ 'root' ] = substr(getcwd(), 0, 2) . $parts[ 'root' ];\n        } else {\n            if ($realpath !== null && !$parts[ 'root' ]) {\n                $path = getcwd() . DIRECTORY_SEPARATOR . $path;\n            }\n        }\n       // remove noop 'DIRECTORY_SEPARATOR DIRECTORY_SEPARATOR' and 'DIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR' patterns\n        $path = str_replace(array($sepDotSep,$sepSep), DIRECTORY_SEPARATOR, $path);\n        // resolve '..DIRECTORY_SEPARATOR' pattern, smallest first\n        if (strpos($path, '..' . DIRECTORY_SEPARATOR) !== false &&\n            preg_match_all('#[\\\\\\\\/]([.][.][\\\\\\\\/])+#u', $path, $match)\n        ) {\n            $counts = array();\n            foreach ($match[ 0 ] as $m) {\n                $counts[] = (int)((strlen($m) - 1) / 3);\n            }\n            sort($counts);\n            foreach ($counts as $count) {\n                $path = preg_replace('#([\\\\\\\\/]+[^\\\\\\\\/]+){' . $count .\n                                     '}[\\\\\\\\/]+([.][.][\\\\\\\\/]+){' . $count . '}#u',\n                                     DIRECTORY_SEPARATOR,\n                                     $path);\n            }\n        }\n        return $realpath !== false ? $parts[ 'root' ] . $path : str_ireplace(getcwd(), '.', $parts[ 'root' ] . $path);\n    }\n\n    /**\n     * Empty template objects cache\n     */\n    public function _clearTemplateCache()\n    {\n        Smarty_Internal_Template::$isCacheTplObj = array();\n        Smarty_Internal_Template::$tplObjCache = array();\n    }\n\n    /**\n     * @param boolean $use_sub_dirs\n     */\n    public function setUseSubDirs($use_sub_dirs)\n    {\n        $this->use_sub_dirs = $use_sub_dirs;\n    }\n\n    /**\n     * @param int $error_reporting\n     */\n    public function setErrorReporting($error_reporting)\n    {\n        $this->error_reporting = $error_reporting;\n    }\n\n    /**\n     * @param boolean $escape_html\n     */\n    public function setEscapeHtml($escape_html)\n    {\n        $this->escape_html = $escape_html;\n    }\n\n    /**\n     * Return auto_literal flag\n     *\n     * @return boolean\n     */\n    public function getAutoLiteral()\n    {\n        return $this->auto_literal;\n    }\n\n    /**\n     * Set auto_literal flag\n     *\n     * @param boolean $auto_literal\n     */\n    public function setAutoLiteral($auto_literal = true)\n    {\n        $this->auto_literal = $auto_literal;\n    }\n\n    /**\n     * @param boolean $force_compile\n     */\n    public function setForceCompile($force_compile)\n    {\n        $this->force_compile = $force_compile;\n    }\n\n    /**\n     * @param boolean $merge_compiled_includes\n     */\n    public function setMergeCompiledIncludes($merge_compiled_includes)\n    {\n        $this->merge_compiled_includes = $merge_compiled_includes;\n    }\n\n    /**\n     * Get left delimiter\n     *\n     * @return string\n     */\n    public function getLeftDelimiter()\n    {\n        return $this->left_delimiter;\n    }\n\n    /**\n     * Set left delimiter\n     *\n     * @param string $left_delimiter\n     */\n    public function setLeftDelimiter($left_delimiter)\n    {\n        $this->left_delimiter = $left_delimiter;\n    }\n\n    /**\n     * Get right delimiter\n     *\n     * @return string $right_delimiter\n     */\n    public function getRightDelimiter()\n    {\n        return $this->right_delimiter;\n    }\n\n    /**\n     * Set right delimiter\n     *\n     * @param string\n     */\n    public function setRightDelimiter($right_delimiter)\n    {\n        $this->right_delimiter = $right_delimiter;\n    }\n\n    /**\n     * @param boolean $debugging\n     */\n    public function setDebugging($debugging)\n    {\n        $this->debugging = $debugging;\n    }\n\n    /**\n     * @param boolean $config_overwrite\n     */\n    public function setConfigOverwrite($config_overwrite)\n    {\n        $this->config_overwrite = $config_overwrite;\n    }\n\n    /**\n     * @param boolean $config_booleanize\n     */\n    public function setConfigBooleanize($config_booleanize)\n    {\n        $this->config_booleanize = $config_booleanize;\n    }\n\n    /**\n     * @param boolean $config_read_hidden\n     */\n    public function setConfigReadHidden($config_read_hidden)\n    {\n        $this->config_read_hidden = $config_read_hidden;\n    }\n\n    /**\n     * @param boolean $compile_locking\n     */\n    public function setCompileLocking($compile_locking)\n    {\n        $this->compile_locking = $compile_locking;\n    }\n\n    /**\n     * @param string $default_resource_type\n     */\n    public function setDefaultResourceType($default_resource_type)\n    {\n        $this->default_resource_type = $default_resource_type;\n    }\n\n    /**\n     * @param string $caching_type\n     */\n    public function setCachingType($caching_type)\n    {\n        $this->caching_type = $caching_type;\n    }\n\n    /**\n     * Test install\n     *\n     * @param null $errors\n     */\n    public function testInstall(&$errors = null)\n    {\n        Smarty_Internal_TestInstall::testInstall($this, $errors);\n    }\n\n    /**\n     * Get Smarty object\n     *\n     * @return Smarty\n     */\n    public function _getSmartyObj()\n    {\n        return $this;\n    }\n\n    /**\n     * <<magic>> Generic getter.\n     * Calls the appropriate getter function.\n     * Issues an E_USER_NOTICE if no valid getter is found.\n     *\n     * @param  string $name property name\n     *\n     * @return mixed\n     * @throws \\SmartyException\n     */\n    public function __get($name)\n    {\n        if (isset($this->accessMap[ $name ])) {\n            $method = 'get' . $this->accessMap[ $name ];\n            return $this->{$method}();\n        } else if (isset($this->_cache[ $name ])) {\n            return $this->_cache[ $name ];\n        } else if (in_array($name, $this->obsoleteProperties)) {\n            return null;\n        } else {\n            trigger_error('Undefined property: ' . get_class($this) . '::$' . $name, E_USER_NOTICE);\n        }\n        return null;\n    }\n\n    /**\n     * <<magic>> Generic setter.\n     * Calls the appropriate setter function.\n     * Issues an E_USER_NOTICE if no valid setter is found.\n     *\n     * @param string $name  property name\n     * @param mixed  $value parameter passed to setter\n     *\n     * @throws \\SmartyException\n     */\n    public function __set($name, $value)\n    {\n        if (isset($this->accessMap[ $name ])) {\n            $method = 'set' . $this->accessMap[ $name ];\n            $this->{$method}($value);\n        } else if (in_array($name, $this->obsoleteProperties)) {\n            return;\n        } else {\n            if (is_object($value) && method_exists($value, $name)) {\n                $this->$name = $value;\n            } else {\n                trigger_error('Undefined property: ' . get_class($this) . '::$' . $name, E_USER_NOTICE);\n            }\n        }\n    }\n\n    /**\n     * Normalize and set directory string\n     *\n     * @param string $dirName cache_dir or compile_dir\n     * @param string $dir     filepath of folder\n     */\n    private function _normalizeDir($dirName, $dir)\n    {\n        $this->{$dirName} = $this->_realpath(rtrim($dir, \"/\\\\\") . DIRECTORY_SEPARATOR, true);\n        if (class_exists('Smarty_Internal_ErrorHandler', false)) {\n            if (!isset(Smarty_Internal_ErrorHandler::$mutedDirectories[ $this->{$dirName} ])) {\n                Smarty_Internal_ErrorHandler::$mutedDirectories[ $this->{$dirName} ] = null;\n            }\n        }\n    }\n\n    /**\n     * Normalize template_dir or config_dir\n     *\n     * @param bool $isConfig true for config_dir\n     *\n     */\n    private function _normalizeTemplateConfig($isConfig)\n    {\n        if ($isConfig) {\n            $processed = &$this->_processedConfigDir;\n            $dir = &$this->config_dir;\n        } else {\n            $processed = &$this->_processedTemplateDir;\n            $dir = &$this->template_dir;\n        }\n        if (!is_array($dir)) {\n            $dir = (array)$dir;\n        }\n        foreach ($dir as $k => $v) {\n            if (!isset($processed[ $k ])) {\n                $dir[ $k ] = $v = $this->_realpath(rtrim($v, \"/\\\\\") . DIRECTORY_SEPARATOR, true);\n                $processed[ $k ] = true;\n            }\n        }\n        $isConfig ? $this->_configDirNormalized = true : $this->_templateDirNormalized = true;\n        $isConfig ? $this->_joined_config_dir = join('#', $this->config_dir) :\n            $this->_joined_template_dir = join('#', $this->template_dir);\n    }\n}\n", "<?php\n/**\n * Smarty plugin\n *\n * @package    Smarty\n * @subpackage Security\n * @author     Uwe Tews\n */\n\n/*\n * FIXME: Smarty_Security API\n *      - getter and setter instead of public properties would allow cultivating an internal cache properly\n *      - current implementation of isTrustedResourceDir() assumes that Smarty::$template_dir and Smarty::$config_dir are immutable\n *        the cache is killed every time either of the variables change. That means that two distinct Smarty objects with differing\n *        $template_dir or $config_dir should NOT share the same Smarty_Security instance,\n *        as this would lead to (severe) performance penalty! how should this be handled?\n */\n\n/**\n * This class does contain the security settings\n */\nclass Smarty_Security\n{\n    /**\n     * This determines how Smarty handles \"<?php ... ?>\" tags in templates.\n     * possible values:\n     * <ul>\n     *   <li>Smarty::PHP_PASSTHRU -> echo PHP tags as they are</li>\n     *   <li>Smarty::PHP_QUOTE    -> escape tags as entities</li>\n     *   <li>Smarty::PHP_REMOVE   -> remove php tags</li>\n     *   <li>Smarty::PHP_ALLOW    -> execute php tags</li>\n     * </ul>\n     *\n     * @var integer\n     */\n    public $php_handling = Smarty::PHP_PASSTHRU;\n\n    /**\n     * This is the list of template directories that are considered secure.\n     * $template_dir is in this list implicitly.\n     *\n     * @var array\n     */\n    public $secure_dir = array();\n\n    /**\n     * This is an array of directories where trusted php scripts reside.\n     * {@link $security} is disabled during their inclusion/execution.\n     *\n     * @var array\n     */\n    public $trusted_dir = array();\n\n    /**\n     * List of regular expressions (PCRE) that include trusted URIs\n     *\n     * @var array\n     */\n    public $trusted_uri = array();\n\n    /**\n     * List of trusted constants names\n     *\n     * @var array\n     */\n    public $trusted_constants = array();\n\n    /**\n     * This is an array of trusted static classes.\n     * If empty access to all static classes is allowed.\n     * If set to 'none' none is allowed.\n     *\n     * @var array\n     */\n    public $static_classes = array();\n\n    /**\n     * This is an nested array of trusted classes and static methods.\n     * If empty access to all static classes and methods is allowed.\n     * Format:\n     * array (\n     *         'class_1' => array('method_1', 'method_2'), // allowed methods listed\n     *         'class_2' => array(),                       // all methods of class allowed\n     *       )\n     * If set to null none is allowed.\n     *\n     * @var array\n     */\n    public $trusted_static_methods = array();\n\n    /**\n     * This is an array of trusted static properties.\n     * If empty access to all static classes and properties is allowed.\n     * Format:\n     * array (\n     *         'class_1' => array('prop_1', 'prop_2'), // allowed properties listed\n     *         'class_2' => array(),                   // all properties of class allowed\n     *       )\n     * If set to null none is allowed.\n     *\n     * @var array\n     */\n    public $trusted_static_properties = array();\n\n    /**\n     * This is an array of trusted PHP functions.\n     * If empty all functions are allowed.\n     * To disable all PHP functions set $php_functions = null.\n     *\n     * @var array\n     */\n    public $php_functions = array('isset', 'empty', 'count', 'sizeof', 'in_array', 'is_array', 'time',);\n\n    /**\n     * This is an array of trusted PHP modifiers.\n     * If empty all modifiers are allowed.\n     * To disable all modifier set $php_modifiers = null.\n     *\n     * @var array\n     */\n    public $php_modifiers = array('escape', 'count', 'nl2br',);\n\n    /**\n     * This is an array of allowed tags.\n     * If empty no restriction by allowed_tags.\n     *\n     * @var array\n     */\n    public $allowed_tags = array();\n\n    /**\n     * This is an array of disabled tags.\n     * If empty no restriction by disabled_tags.\n     *\n     * @var array\n     */\n    public $disabled_tags = array();\n\n    /**\n     * This is an array of allowed modifier plugins.\n     * If empty no restriction by allowed_modifiers.\n     *\n     * @var array\n     */\n    public $allowed_modifiers = array();\n\n    /**\n     * This is an array of disabled modifier plugins.\n     * If empty no restriction by disabled_modifiers.\n     *\n     * @var array\n     */\n    public $disabled_modifiers = array();\n\n    /**\n     * This is an array of disabled special $smarty variables.\n     *\n     * @var array\n     */\n    public $disabled_special_smarty_vars = array();\n\n    /**\n     * This is an array of trusted streams.\n     * If empty all streams are allowed.\n     * To disable all streams set $streams = null.\n     *\n     * @var array\n     */\n    public $streams = array('file');\n\n    /**\n     * + flag if constants can be accessed from template\n     *\n     * @var boolean\n     */\n    public $allow_constants = true;\n\n    /**\n     * + flag if super globals can be accessed from template\n     *\n     * @var boolean\n     */\n    public $allow_super_globals = true;\n\n    /**\n     * max template nesting level\n     *\n     * @var int\n     */\n    public $max_template_nesting = 0;\n\n    /**\n     * current template nesting level\n     *\n     * @var int\n     */\n    private $_current_template_nesting = 0;\n\n    /**\n     * Cache for $resource_dir lookup\n     *\n     * @var array\n     */\n    protected $_resource_dir = array();\n\n    /**\n     * Cache for $template_dir lookup\n     *\n     * @var array\n     */\n    protected $_template_dir = array();\n\n    /**\n     * Cache for $config_dir lookup\n     *\n     * @var array\n     */\n    protected $_config_dir = array();\n\n    /**\n     * Cache for $secure_dir lookup\n     *\n     * @var array\n     */\n    protected $_secure_dir = array();\n\n    /**\n     * Cache for $php_resource_dir lookup\n     *\n     * @var array\n     */\n    protected $_php_resource_dir = null;\n\n    /**\n     * Cache for $trusted_dir lookup\n     *\n     * @var array\n     */\n    protected $_trusted_dir = null;\n\n    /**\n     * Cache for include path status\n     *\n     * @var bool\n     */\n    protected $_include_path_status = false;\n\n    /**\n     * Cache for $_include_array lookup\n     *\n     * @var array\n     */\n    protected $_include_dir = array();\n\n    /**\n     * @param Smarty $smarty\n     */\n    public function __construct($smarty)\n    {\n        $this->smarty = $smarty;\n    }\n\n    /**\n     * Check if PHP function is trusted.\n     *\n     * @param  string $function_name\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if function is trusted\n     * @throws SmartyCompilerException if php function is not trusted\n     */\n    public function isTrustedPhpFunction($function_name, $compiler)\n    {\n        if (isset($this->php_functions) &&\n            (empty($this->php_functions) || in_array($function_name, $this->php_functions))\n        ) {\n            return true;\n        }\n\n        $compiler->trigger_template_error(\"PHP function '{$function_name}' not allowed by security setting\");\n\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if static class is trusted.\n     *\n     * @param  string $class_name\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if class is trusted\n     * @throws SmartyCompilerException if static class is not trusted\n     */\n    public function isTrustedStaticClass($class_name, $compiler)\n    {\n        if (isset($this->static_classes) &&\n            (empty($this->static_classes) || in_array($class_name, $this->static_classes))\n        ) {\n            return true;\n        }\n\n        $compiler->trigger_template_error(\"access to static class '{$class_name}' not allowed by security setting\");\n\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if static class method/property is trusted.\n     *\n     * @param  string $class_name\n     * @param  string $params\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if class method is trusted\n     * @throws SmartyCompilerException if static class method is not trusted\n     */\n    public function isTrustedStaticClassAccess($class_name, $params, $compiler)\n    {\n        if (!isset($params[ 2 ])) {\n            // fall back\n            return $this->isTrustedStaticClass($class_name, $compiler);\n        }\n        if ($params[ 2 ] === 'method') {\n            $allowed = $this->trusted_static_methods;\n            $name = substr($params[ 0 ], 0, strpos($params[ 0 ], '('));\n        } else {\n            $allowed = $this->trusted_static_properties;\n            // strip '$'\n            $name = substr($params[ 0 ], 1);\n        }\n        if (isset($allowed)) {\n            if (empty($allowed)) {\n                // fall back\n                return $this->isTrustedStaticClass($class_name, $compiler);\n            }\n            if (isset($allowed[ $class_name ]) &&\n                (empty($allowed[ $class_name ]) || in_array($name, $allowed[ $class_name ]))\n            ) {\n                return true;\n            }\n        }\n        $compiler->trigger_template_error(\"access to static class '{$class_name}' {$params[2]} '{$name}' not allowed by security setting\");\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if PHP modifier is trusted.\n     *\n     * @param  string $modifier_name\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if modifier is trusted\n     * @throws SmartyCompilerException if modifier is not trusted\n     */\n    public function isTrustedPhpModifier($modifier_name, $compiler)\n    {\n        if (isset($this->php_modifiers) &&\n            (empty($this->php_modifiers) || in_array($modifier_name, $this->php_modifiers))\n        ) {\n            return true;\n        }\n\n        $compiler->trigger_template_error(\"modifier '{$modifier_name}' not allowed by security setting\");\n\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if tag is trusted.\n     *\n     * @param  string $tag_name\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if tag is trusted\n     * @throws SmartyCompilerException if modifier is not trusted\n     */\n    public function isTrustedTag($tag_name, $compiler)\n    {\n        // check for internal always required tags\n        if (in_array($tag_name,\n                     array('assign', 'call', 'private_filter', 'private_block_plugin', 'private_function_plugin',\n                           'private_object_block_function', 'private_object_function', 'private_registered_function',\n                           'private_registered_block', 'private_special_variable', 'private_print_expression',\n                           'private_modifier'))) {\n            return true;\n        }\n        // check security settings\n        if (empty($this->allowed_tags)) {\n            if (empty($this->disabled_tags) || !in_array($tag_name, $this->disabled_tags)) {\n                return true;\n            } else {\n                $compiler->trigger_template_error(\"tag '{$tag_name}' disabled by security setting\", null, true);\n            }\n        } elseif (in_array($tag_name, $this->allowed_tags) && !in_array($tag_name, $this->disabled_tags)) {\n            return true;\n        } else {\n            $compiler->trigger_template_error(\"tag '{$tag_name}' not allowed by security setting\", null, true);\n        }\n\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if special $smarty variable is trusted.\n     *\n     * @param  string $var_name\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if tag is trusted\n     * @throws SmartyCompilerException if modifier is not trusted\n     */\n    public function isTrustedSpecialSmartyVar($var_name, $compiler)\n    {\n        if (!in_array($var_name, $this->disabled_special_smarty_vars)) {\n            return true;\n        } else {\n            $compiler->trigger_template_error(\"special variable '\\$smarty.{$var_name}' not allowed by security setting\",\n                                              null, true);\n        }\n\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if modifier plugin is trusted.\n     *\n     * @param  string $modifier_name\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if tag is trusted\n     * @throws SmartyCompilerException if modifier is not trusted\n     */\n    public function isTrustedModifier($modifier_name, $compiler)\n    {\n        // check for internal always allowed modifier\n        if (in_array($modifier_name, array('default'))) {\n            return true;\n        }\n        // check security settings\n        if (empty($this->allowed_modifiers)) {\n            if (empty($this->disabled_modifiers) || !in_array($modifier_name, $this->disabled_modifiers)) {\n                return true;\n            } else {\n                $compiler->trigger_template_error(\"modifier '{$modifier_name}' disabled by security setting\", null,\n                                                  true);\n            }\n        } elseif (in_array($modifier_name, $this->allowed_modifiers) &&\n                  !in_array($modifier_name, $this->disabled_modifiers)\n        ) {\n            return true;\n        } else {\n            $compiler->trigger_template_error(\"modifier '{$modifier_name}' not allowed by security setting\", null,\n                                              true);\n        }\n\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if constants are enabled or trusted\n     *\n     * @param  string $const    constant name\n     * @param  object $compiler compiler object\n     *\n     * @return bool\n     */\n    public function isTrustedConstant($const, $compiler)\n    {\n        if (in_array($const, array('true', 'false', 'null'))) {\n            return true;\n        }\n        if (!empty($this->trusted_constants)) {\n            if (!in_array(strtolower($const), $this->trusted_constants)) {\n                $compiler->trigger_template_error(\"Security: access to constant '{$const}' not permitted\");\n                return false;\n            }\n            return true;\n        }\n        if ($this->allow_constants) {\n            return true;\n        }\n        $compiler->trigger_template_error(\"Security: access to constants not permitted\");\n        return false;\n    }\n\n    /**\n     * Check if stream is trusted.\n     *\n     * @param  string $stream_name\n     *\n     * @return boolean         true if stream is trusted\n     * @throws SmartyException if stream is not trusted\n     */\n    public function isTrustedStream($stream_name)\n    {\n        if (isset($this->streams) && (empty($this->streams) || in_array($stream_name, $this->streams))) {\n            return true;\n        }\n\n        throw new SmartyException(\"stream '{$stream_name}' not allowed by security setting\");\n    }\n\n    /**\n     * Check if directory of file resource is trusted.\n     *\n     * @param  string   $filepath\n     * @param null|bool $isConfig\n     *\n     * @return bool true if directory is trusted\n     * @throws \\SmartyException if directory is not trusted\n     */\n    public function isTrustedResourceDir($filepath, $isConfig = null)\n    {\n        if ($this->_include_path_status !== $this->smarty->use_include_path) {\n            $_dir = $this->smarty->use_include_path ? $this->smarty->ext->_getIncludePath->getIncludePathDirs($this->smarty) : array();\n            if ($this->_include_dir !== $_dir) {\n                $this->_updateResourceDir($this->_include_dir, $_dir);\n                $this->_include_dir = $_dir;\n            }\n            $this->_include_path_status = $this->smarty->use_include_path;\n        }\n\n            $_dir = $this->smarty->getTemplateDir();\n            if ($this->_template_dir !== $_dir) {\n                $this->_updateResourceDir($this->_template_dir, $_dir);\n                $this->_template_dir = $_dir;\n            }\n\n            $_dir = $this->smarty->getConfigDir();\n            if ($this->_config_dir !== $_dir) {\n                $this->_updateResourceDir($this->_config_dir, $_dir);\n                $this->_config_dir = $_dir;\n            }\n\n        if ($this->_secure_dir !== $this->secure_dir) {\n            $this->secure_dir = (array)$this->secure_dir;\n            foreach($this->secure_dir as $k => $d) {\n                $this->secure_dir[$k] = $this->smarty->_realpath($d. DIRECTORY_SEPARATOR,true);\n            }\n            $this->_updateResourceDir($this->_secure_dir, $this->secure_dir);\n            $this->_secure_dir = $this->secure_dir;\n        }\n        $addPath =  $this->_checkDir($filepath, $this->_resource_dir);\n        if ($addPath !== false) {\n           $this->_resource_dir = array_merge($this->_resource_dir, $addPath);\n        }\n        return true;\n    }\n\n    /**\n     * Check if URI (e.g. {fetch} or {html_image}) is trusted\n     * To simplify things, isTrustedUri() resolves all input to \"{$PROTOCOL}://{$HOSTNAME}\".\n     * So \"http://username:password@hello.world.example.org:8080/some-path?some=query-string\"\n     * is reduced to \"http://hello.world.example.org\" prior to applying the patters from {@link $trusted_uri}.\n     *\n     * @param  string $uri\n     *\n     * @return boolean         true if URI is trusted\n     * @throws SmartyException if URI is not trusted\n     * @uses $trusted_uri for list of patterns to match against $uri\n     */\n    public function isTrustedUri($uri)\n    {\n        $_uri = parse_url($uri);\n        if (!empty($_uri[ 'scheme' ]) && !empty($_uri[ 'host' ])) {\n            $_uri = $_uri[ 'scheme' ] . '://' . $_uri[ 'host' ];\n            foreach ($this->trusted_uri as $pattern) {\n                if (preg_match($pattern, $_uri)) {\n                    return true;\n                }\n            }\n        }\n\n        throw new SmartyException(\"URI '{$uri}' not allowed by security setting\");\n    }\n\n    /**\n     * Check if directory of file resource is trusted.\n     *\n     * @param  string $filepath\n     *\n     * @return boolean         true if directory is trusted\n     * @throws SmartyException if PHP directory is not trusted\n     */\n    public function isTrustedPHPDir($filepath)\n    {\n        if (empty($this->trusted_dir)) {\n            throw new SmartyException(\"directory '{$filepath}' not allowed by security setting (no trusted_dir specified)\");\n        }\n\n        // check if index is outdated\n        if (!$this->_trusted_dir || $this->_trusted_dir !== $this->trusted_dir) {\n            $this->_php_resource_dir = array();\n\n            $this->_trusted_dir = $this->trusted_dir;\n            foreach ((array) $this->trusted_dir as $directory) {\n                $directory = $this->smarty->_realpath($directory . '/', true);\n                $this->_php_resource_dir[ $directory ] = true;\n            }\n        }\n        $addPath =  $this->_checkDir($filepath, $this->_php_resource_dir);\n        if ($addPath !== false) {\n           $this->_php_resource_dir = array_merge($this->_php_resource_dir, $addPath);\n        }\n         return true;\n    }\n\n    /**\n     * Remove old directories and its sub folders, add new directories\n     *\n     * @param array $oldDir\n     * @param array $newDir\n     */\n    private function _updateResourceDir($oldDir, $newDir) {\n        foreach ($oldDir as $directory) {\n //           $directory = $this->smarty->_realpath($directory, true);\n            $length = strlen($directory);\n            foreach ($this->_resource_dir as $dir) {\n                if (substr($dir, 0,$length) === $directory) {\n                    unset($this->_resource_dir[ $dir ]);\n                }\n            }\n        }\n        foreach ($newDir as $directory) {\n //           $directory = $this->smarty->_realpath($directory, true);\n            $this->_resource_dir[ $directory ] = true;\n        }\n    }\n    /**\n     * Check if file is inside a valid directory\n     *\n     * @param string $filepath\n     * @param array  $dirs valid directories\n     *\n     * @return array|bool\n     * @throws \\SmartyException\n     */\n    private function _checkDir($filepath, $dirs)\n    {\n        $directory = dirname($this->smarty->_realpath($filepath, true)) . DIRECTORY_SEPARATOR;\n        $_directory = array();\n        while (true) {\n             // test if the directory is trusted\n            if (isset($dirs[ $directory ])) {\n               return $_directory;\n            }\n            // abort if we've reached root\n            if (!preg_match('#[\\\\\\\\/][^\\\\\\\\/]+[\\\\\\\\/]$#', $directory)) {\n                // give up\n                throw new SmartyException(sprintf('Smarty Security: not trusted file path \\'%s\\' ',$filepath));\n            }\n            // remember the directory to add it to _resource_dir in case we're successful\n            $_directory[ $directory ] = true;\n           // bubble up one level\n            $directory = preg_replace('#[\\\\\\\\/][^\\\\\\\\/]+[\\\\\\\\/]$#', '/', $directory);\n        }\n    }\n\n    /**\n     * Loads security class and enables security\n     *\n     * @param \\Smarty                 $smarty\n     * @param  string|Smarty_Security $security_class if a string is used, it must be class-name\n     *\n     * @return \\Smarty current Smarty instance for chaining\n     * @throws \\SmartyException when an invalid class name is provided\n     */\n    public static function enableSecurity(Smarty $smarty, $security_class)\n    {\n        if ($security_class instanceof Smarty_Security) {\n            $smarty->security_policy = $security_class;\n            return $smarty;\n        } elseif (is_object($security_class)) {\n            throw new SmartyException(\"Class '\" . get_class($security_class) . \"' must extend Smarty_Security.\");\n        }\n        if ($security_class === null) {\n            $security_class = $smarty->security_class;\n        }\n        if (!class_exists($security_class)) {\n            throw new SmartyException(\"Security class '$security_class' is not defined\");\n        } elseif ($security_class !== 'Smarty_Security' && !is_subclass_of($security_class, 'Smarty_Security')) {\n            throw new SmartyException(\"Class '$security_class' must extend Smarty_Security.\");\n        } else {\n            $smarty->security_policy = new $security_class($smarty);\n        }\n        return $smarty;\n    }\n    /**\n     * Start template processing\n     *\n     * @param $template\n     *\n     * @throws SmartyException\n     */\n    public function startTemplate($template)\n    {\n        if ($this->max_template_nesting > 0 && $this->_current_template_nesting ++ >= $this->max_template_nesting) {\n            throw new SmartyException(\"maximum template nesting level of '{$this->max_template_nesting}' exceeded when calling '{$template->template_resource}'\");\n        }\n    }\n\n    /**\n     * Exit template processing\n     *\n     */\n    public function endTemplate()\n    {\n        if ($this->max_template_nesting > 0) {\n            $this->_current_template_nesting --;\n        }\n    }\n\n    /**\n     * Register callback functions call at start/end of template rendering\n     *\n     * @param \\Smarty_Internal_Template $template\n     */\n    public function registerCallBacks(Smarty_Internal_Template $template)\n    {\n        $template->startRenderCallbacks[] = array($this, 'startTemplate');\n        $template->endRenderCallbacks[] = array($this, 'endTemplate');\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Project:     Smarty: the PHP compiling template engine\n * File:        Smarty.class.php\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n * For questions, help, comments, discussion, etc., please join the\n * Smarty mailing list. Send a blank e-mail to\n * smarty-discussion-subscribe@googlegroups.com\n *\n * @link      http://www.smarty.net/\n * @copyright 2018 New Digital Group, Inc.\n * @copyright 2018 Uwe Tews\n * @author    Monte Ohrt <monte at ohrt dot com>\n * @author    Uwe Tews   <uwe dot tews at gmail dot com>\n * @author    Rodney Rehm\n * @package   Smarty\n * @version   3.1.33-dev\n */\n/**\n * set SMARTY_DIR to absolute path to Smarty library files.\n * Sets SMARTY_DIR only if user application has not already defined it.\n */\nif (!defined('SMARTY_DIR')) {\n    /**\n     *\n     */\n    define('SMARTY_DIR', dirname(__FILE__) . DIRECTORY_SEPARATOR);\n}\n/**\n * set SMARTY_SYSPLUGINS_DIR to absolute path to Smarty internal plugins.\n * Sets SMARTY_SYSPLUGINS_DIR only if user application has not already defined it.\n */\nif (!defined('SMARTY_SYSPLUGINS_DIR')) {\n    /**\n     *\n     */\n    define('SMARTY_SYSPLUGINS_DIR', SMARTY_DIR . 'sysplugins' . DIRECTORY_SEPARATOR);\n}\nif (!defined('SMARTY_PLUGINS_DIR')) {\n    /**\n     *\n     */\n    define('SMARTY_PLUGINS_DIR', SMARTY_DIR . 'plugins' . DIRECTORY_SEPARATOR);\n}\nif (!defined('SMARTY_MBSTRING')) {\n    /**\n     *\n     */\n    define('SMARTY_MBSTRING', function_exists('mb_get_info'));\n}\nif (!defined('SMARTY_RESOURCE_CHAR_SET')) {\n    // UTF-8 can only be done properly when mbstring is available!\n    /**\n     * @deprecated in favor of Smarty::$_CHARSET\n     */\n    define('SMARTY_RESOURCE_CHAR_SET', SMARTY_MBSTRING ? 'UTF-8' : 'ISO-8859-1');\n}\nif (!defined('SMARTY_RESOURCE_DATE_FORMAT')) {\n    /**\n     * @deprecated in favor of Smarty::$_DATE_FORMAT\n     */\n    define('SMARTY_RESOURCE_DATE_FORMAT', '%b %e, %Y');\n}\n/**\n * Load Smarty_Autoloader\n */\nif (!class_exists('Smarty_Autoloader')) {\n    include dirname(__FILE__) . '/bootstrap.php';\n}\n/**\n * Load always needed external class files\n */\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_internal_data.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_internal_extension_handler.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_internal_templatebase.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_internal_template.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_resource.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_variable.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_template_source.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_template_resource_base.php';\nrequire_once SMARTY_SYSPLUGINS_DIR . 'smarty_internal_resource_file.php';\n\n/**\n * This is the main Smarty class\n *\n * @package Smarty\n *\n * The following methods will be dynamically loaded by the extension handler when they are called.\n * They are located in a corresponding Smarty_Internal_Method_xxxx class\n *\n * @method int clearAllCache(int $exp_time = null, string $type = null)\n * @method int clearCache(string $template_name, string $cache_id = null, string $compile_id = null, int $exp_time = null, string $type = null)\n * @method int compileAllTemplates(string $extension = '.tpl', bool $force_compile = false, int $time_limit = 0, $max_errors = null)\n * @method int compileAllConfig(string $extension = '.conf', bool $force_compile = false, int $time_limit = 0, $max_errors = null)\n * @method int clearCompiledTemplate($resource_name = null, $compile_id = null, $exp_time = null)\n */\nclass Smarty extends Smarty_Internal_TemplateBase\n{\n    /**\n     * smarty version\n     */\n    const SMARTY_VERSION = '3.1.33-dev-1';\n    /**\n     * define variable scopes\n     */\n    const SCOPE_LOCAL    = 1;\n    const SCOPE_PARENT   = 2;\n    const SCOPE_TPL_ROOT = 4;\n    const SCOPE_ROOT     = 8;\n    const SCOPE_SMARTY   = 16;\n    const SCOPE_GLOBAL   = 32;\n    /**\n     * define caching modes\n     */\n    const CACHING_OFF              = 0;\n    const CACHING_LIFETIME_CURRENT = 1;\n    const CACHING_LIFETIME_SAVED   = 2;\n    /**\n     * define constant for clearing cache files be saved expiration dates\n     */\n    const CLEAR_EXPIRED = -1;\n    /**\n     * define compile check modes\n     */\n    const COMPILECHECK_OFF       = 0;\n    const COMPILECHECK_ON        = 1;\n    const COMPILECHECK_CACHEMISS = 2;\n    /**\n     * define debug modes\n     */\n    const DEBUG_OFF        = 0;\n    const DEBUG_ON         = 1;\n    const DEBUG_INDIVIDUAL = 2;\n    /**\n     * modes for handling of \"<?php ... ?>\" tags in templates.\n     */\n    const PHP_PASSTHRU = 0; //-> print tags as plain text\n    const PHP_QUOTE    = 1; //-> escape tags as entities\n    const PHP_REMOVE   = 2; //-> escape tags as entities\n    const PHP_ALLOW    = 3; //-> escape tags as entities\n    /**\n     * filter types\n     */\n    const FILTER_POST     = 'post';\n    const FILTER_PRE      = 'pre';\n    const FILTER_OUTPUT   = 'output';\n    const FILTER_VARIABLE = 'variable';\n    /**\n     * plugin types\n     */\n    const PLUGIN_FUNCTION         = 'function';\n    const PLUGIN_BLOCK            = 'block';\n    const PLUGIN_COMPILER         = 'compiler';\n    const PLUGIN_MODIFIER         = 'modifier';\n    const PLUGIN_MODIFIERCOMPILER = 'modifiercompiler';\n    /**\n     * assigned global tpl vars\n     */\n    public static $global_tpl_vars = array();\n    /**\n     * Flag denoting if Multibyte String functions are available\n     */\n    public static $_MBSTRING = SMARTY_MBSTRING;\n    /**\n     * The character set to adhere to (e.g. \"UTF-8\")\n     */\n    public static $_CHARSET = SMARTY_RESOURCE_CHAR_SET;\n    /**\n     * The date format to be used internally\n     * (accepts date() and strftime())\n     */\n    public static $_DATE_FORMAT = SMARTY_RESOURCE_DATE_FORMAT;\n    /**\n     * Flag denoting if PCRE should run in UTF-8 mode\n     */\n    public static $_UTF8_MODIFIER = 'u';\n    /**\n     * Flag denoting if operating system is windows\n     */\n    public static $_IS_WINDOWS = false;\n    /**\n     * auto literal on delimiters with whitespace\n     *\n     * @var boolean\n     */\n    public $auto_literal = true;\n    /**\n     * display error on not assigned variables\n     *\n     * @var boolean\n     */\n    public $error_unassigned = false;\n    /**\n     * look up relative file path in include_path\n     *\n     * @var boolean\n     */\n    public $use_include_path = false;\n    /**\n     * flag if template_dir is normalized\n     *\n     * @var bool\n     */\n    public $_templateDirNormalized = false;\n    /**\n     * joined template directory string used in cache keys\n     *\n     * @var string\n     */\n    public $_joined_template_dir = null;\n    /**\n     * flag if config_dir is normalized\n     *\n     * @var bool\n     */\n    public $_configDirNormalized = false;\n    /**\n     * joined config directory string used in cache keys\n     *\n     * @var string\n     */\n    public $_joined_config_dir = null;\n    /**\n     * default template handler\n     *\n     * @var callable\n     */\n    public $default_template_handler_func = null;\n    /**\n     * default config handler\n     *\n     * @var callable\n     */\n    public $default_config_handler_func = null;\n    /**\n     * default plugin handler\n     *\n     * @var callable\n     */\n    public $default_plugin_handler_func = null;\n    /**\n     * flag if template_dir is normalized\n     *\n     * @var bool\n     */\n    public $_compileDirNormalized = false;\n    /**\n     * flag if plugins_dir is normalized\n     *\n     * @var bool\n     */\n    public $_pluginsDirNormalized = false;\n    /**\n     * flag if template_dir is normalized\n     *\n     * @var bool\n     */\n    public $_cacheDirNormalized = false;\n    /**\n     * force template compiling?\n     *\n     * @var boolean\n     */\n    public $force_compile = false;\n     /**\n     * use sub dirs for compiled/cached files?\n     *\n     * @var boolean\n     */\n    public $use_sub_dirs = false;\n    /**\n     * allow ambiguous resources (that are made unique by the resource handler)\n     *\n     * @var boolean\n     */\n    public $allow_ambiguous_resources = false;\n    /**\n     * merge compiled includes\n     *\n     * @var boolean\n     */\n    public $merge_compiled_includes = false;\n    /*\n    * flag for behaviour when extends: resource  and {extends} tag are used simultaneous\n    *   if false disable execution of {extends} in templates called by extends resource.\n    *   (behaviour as versions < 3.1.28)\n    *\n    * @var boolean\n    */\n    public $extends_recursion = true;\n    /**\n     * force cache file creation\n     *\n     * @var boolean\n     */\n    public $force_cache = false;\n    /**\n     * template left-delimiter\n     *\n     * @var string\n     */\n    public $left_delimiter = \"{\";\n    /**\n     * template right-delimiter\n     *\n     * @var string\n     */\n    public $right_delimiter = \"}\";\n    /**\n     * array of strings which shall be treated as literal by compiler\n     *\n     * @var array string\n     */\n    public $literals = array();\n    /**\n     * class name\n     * This should be instance of Smarty_Security.\n     *\n     * @var string\n     * @see Smarty_Security\n     */\n    public $security_class = 'Smarty_Security';\n    /**\n     * implementation of security class\n     *\n     * @var Smarty_Security\n     */\n    public $security_policy = null;\n    /**\n     * controls handling of PHP-blocks\n     *\n     * @var integer\n     */\n    public $php_handling = self::PHP_PASSTHRU;\n    /**\n     * controls if the php template file resource is allowed\n     *\n     * @var bool\n     */\n    public $allow_php_templates = false;\n    /**\n     * debug mode\n     * Setting this to true enables the debug-console.\n     *\n     * @var boolean\n     */\n    public $debugging = false;\n    /**\n     * This determines if debugging is enable-able from the browser.\n     * <ul>\n     *  <li>NONE => no debugging control allowed</li>\n     *  <li>URL => enable debugging when SMARTY_DEBUG is found in the URL.</li>\n     * </ul>\n     *\n     * @var string\n     */\n    public $debugging_ctrl = 'NONE';\n    /**\n     * Name of debugging URL-param.\n     * Only used when $debugging_ctrl is set to 'URL'.\n     * The name of the URL-parameter that activates debugging.\n     *\n     * @var string\n     */\n    public $smarty_debug_id = 'SMARTY_DEBUG';\n    /**\n     * Path of debug template.\n     *\n     * @var string\n     */\n    public $debug_tpl = null;\n    /**\n     * When set, smarty uses this value as error_reporting-level.\n     *\n     * @var int\n     */\n    public $error_reporting = null;\n    /**\n     * Controls whether variables with the same name overwrite each other.\n     *\n     * @var boolean\n     */\n    public $config_overwrite = true;\n    /**\n     * Controls whether config values of on/true/yes and off/false/no get converted to boolean.\n     *\n     * @var boolean\n     */\n    public $config_booleanize = true;\n    /**\n     * Controls whether hidden config sections/vars are read from the file.\n     *\n     * @var boolean\n     */\n    public $config_read_hidden = false;\n    /**\n     * locking concurrent compiles\n     *\n     * @var boolean\n     */\n    public $compile_locking = true;\n    /**\n     * Controls whether cache resources should use locking mechanism\n     *\n     * @var boolean\n     */\n    public $cache_locking = false;\n    /**\n     * seconds to wait for acquiring a lock before ignoring the write lock\n     *\n     * @var float\n     */\n    public $locking_timeout = 10;\n    /**\n     * resource type used if none given\n     * Must be an valid key of $registered_resources.\n     *\n     * @var string\n     */\n    public $default_resource_type = 'file';\n    /**\n     * caching type\n     * Must be an element of $cache_resource_types.\n     *\n     * @var string\n     */\n    public $caching_type = 'file';\n    /**\n     * config type\n     *\n     * @var string\n     */\n    public $default_config_type = 'file';\n    /**\n     * check If-Modified-Since headers\n     *\n     * @var boolean\n     */\n    public $cache_modified_check = false;\n    /**\n     * registered plugins\n     *\n     * @var array\n     */\n    public $registered_plugins = array();\n    /**\n     * registered objects\n     *\n     * @var array\n     */\n    public $registered_objects = array();\n    /**\n     * registered classes\n     *\n     * @var array\n     */\n    public $registered_classes = array();\n    /**\n     * registered filters\n     *\n     * @var array\n     */\n    public $registered_filters = array();\n    /**\n     * registered resources\n     *\n     * @var array\n     */\n    public $registered_resources = array();\n    /**\n     * registered cache resources\n     *\n     * @var array\n     */\n    public $registered_cache_resources = array();\n    /**\n     * autoload filter\n     *\n     * @var array\n     */\n    public $autoload_filters = array();\n    /**\n     * default modifier\n     *\n     * @var array\n     */\n    public $default_modifiers = array();\n    /**\n     * autoescape variable output\n     *\n     * @var boolean\n     */\n    public $escape_html = false;\n    /**\n     * start time for execution time calculation\n     *\n     * @var int\n     */\n    public $start_time = 0;\n    /**\n     * required by the compiler for BC\n     *\n     * @var string\n     */\n    public $_current_file = null;\n    /**\n     * internal flag to enable parser debugging\n     *\n     * @var bool\n     */\n    public $_parserdebug = false;\n    /**\n     * This object type (Smarty = 1, template = 2, data = 4)\n     *\n     * @var int\n     */\n    public $_objType = 1;\n    /**\n     * Debug object\n     *\n     * @var Smarty_Internal_Debug\n     */\n    public $_debug = null;\n    /**\n     * template directory\n     *\n     * @var array\n     */\n    protected $template_dir = array('./templates/');\n    /**\n     * flags for normalized template directory entries\n     *\n     * @var array\n     */\n    protected $_processedTemplateDir = array();\n    /**\n     * config directory\n     *\n     * @var array\n     */\n    protected $config_dir = array('./configs/');\n    /**\n     * flags for normalized template directory entries\n     *\n     * @var array\n     */\n    protected $_processedConfigDir = array();\n    /**\n     * compile directory\n     *\n     * @var string\n     */\n    protected $compile_dir = './templates_c/';\n    /**\n     * plugins directory\n     *\n     * @var array\n     */\n    protected $plugins_dir = array();\n    /**\n     * cache directory\n     *\n     * @var string\n     */\n    protected $cache_dir = './cache/';\n    /**\n     * removed properties\n     *\n     * @var string[]\n     */\n    protected $obsoleteProperties = array('resource_caching', 'template_resource_caching', 'direct_access_security',\n                                          '_dir_perms', '_file_perms', 'plugin_search_order',\n                                          'inheritance_merge_compiled_includes', 'resource_cache_mode',);\n    /**\n     * List of private properties which will call getter/setter on a direct access\n     *\n     * @var string[]\n     */\n    protected $accessMap = array('template_dir' => 'TemplateDir', 'config_dir' => 'ConfigDir',\n                                 'plugins_dir'  => 'PluginsDir', 'compile_dir' => 'CompileDir',\n                                 'cache_dir'    => 'CacheDir',);\n\n    /**\n     * Initialize new Smarty object\n     */\n    public function __construct()\n    {\n        $this->_clearTemplateCache();\n        parent::__construct();\n        if (is_callable('mb_internal_encoding')) {\n            mb_internal_encoding(Smarty::$_CHARSET);\n        }\n        $this->start_time = microtime(true);\n        if (isset($_SERVER[ 'SCRIPT_NAME' ])) {\n            Smarty::$global_tpl_vars[ 'SCRIPT_NAME' ] = new Smarty_Variable($_SERVER[ 'SCRIPT_NAME' ]);\n        }\n        // Check if we're running on windows\n        Smarty::$_IS_WINDOWS = strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';\n        // let PCRE (preg_*) treat strings as ISO-8859-1 if we're not dealing with UTF-8\n        if (Smarty::$_CHARSET !== 'UTF-8') {\n            Smarty::$_UTF8_MODIFIER = '';\n        }\n    }\n\n    /**\n     * Enable error handler to mute expected messages\n     *\n     * @return boolean\n     * @deprecated\n     */\n    public static function muteExpectedErrors()\n    {\n        return Smarty_Internal_ErrorHandler::muteExpectedErrors();\n    }\n\n    /**\n     * Disable error handler muting expected messages\n     *\n     * @deprecated\n     */\n    public static function unmuteExpectedErrors()\n    {\n        restore_error_handler();\n    }\n\n    /**\n     * Check if a template resource exists\n     *\n     * @param  string $resource_name template name\n     *\n     * @return bool status\n     * @throws \\SmartyException\n     */\n    public function templateExists($resource_name)\n    {\n        // create source object\n        $source = Smarty_Template_Source::load(null, $this, $resource_name);\n        return $source->exists;\n    }\n\n    /**\n     * Loads security class and enables security\n     *\n     * @param  string|Smarty_Security $security_class if a string is used, it must be class-name\n     *\n     * @return Smarty                 current Smarty instance for chaining\n     * @throws SmartyException        when an invalid class name is provided\n     */\n    public function enableSecurity($security_class = null)\n    {\n        Smarty_Security::enableSecurity($this, $security_class);\n        return $this;\n    }\n\n    /**\n     * Disable security\n     *\n     * @return Smarty current Smarty instance for chaining\n     */\n    public function disableSecurity()\n    {\n        $this->security_policy = null;\n        return $this;\n    }\n\n    /**\n     * Add template directory(s)\n     *\n     * @param  string|array $template_dir directory(s) of template sources\n     * @param  string       $key          of the array element to assign the template dir to\n     * @param bool          $isConfig     true for config_dir\n     *\n     * @return Smarty          current Smarty instance for chaining\n     */\n    public function addTemplateDir($template_dir, $key = null, $isConfig = false)\n    {\n        if ($isConfig) {\n            $processed = &$this->_processedConfigDir;\n            $dir = &$this->config_dir;\n            $this->_configDirNormalized = false;\n        } else {\n            $processed = &$this->_processedTemplateDir;\n            $dir = &$this->template_dir;\n            $this->_templateDirNormalized = false;\n        }\n        if (is_array($template_dir)) {\n            foreach ($template_dir as $k => $v) {\n                if (is_int($k)) {\n                    // indexes are not merged but appended\n                    $dir[] = $v;\n                } else {\n                    // string indexes are overridden\n                    $dir[ $k ] = $v;\n                    unset($processed[ $key ]);\n                }\n            }\n        } else {\n            if ($key !== null) {\n                // override directory at specified index\n                $dir[ $key ] = $template_dir;\n                unset($processed[ $key ]);\n            } else {\n                // append new directory\n                $dir[] = $template_dir;\n            }\n        }\n        return $this;\n    }\n\n    /**\n     * Get template directories\n     *\n     * @param mixed $index    index of directory to get, null to get all\n     * @param bool  $isConfig true for config_dir\n     *\n     * @return array list of template directories, or directory of $index\n     */\n    public function getTemplateDir($index = null, $isConfig = false)\n    {\n        if ($isConfig) {\n            $dir = &$this->config_dir;\n        } else {\n            $dir = &$this->template_dir;\n        }\n        if ($isConfig ? !$this->_configDirNormalized : !$this->_templateDirNormalized) {\n            $this->_normalizeTemplateConfig($isConfig);\n        }\n        if ($index !== null) {\n            return isset($dir[ $index ]) ? $dir[ $index ] : null;\n        }\n        return $dir;\n    }\n\n    /**\n     * Set template directory\n     *\n     * @param  string|array $template_dir directory(s) of template sources\n     * @param bool          $isConfig     true for config_dir\n     *\n     * @return \\Smarty current Smarty instance for chaining\n     */\n    public function setTemplateDir($template_dir, $isConfig = false)\n    {\n        if ($isConfig) {\n            $this->config_dir = array();\n            $this->_processedConfigDir = array();\n        } else {\n            $this->template_dir = array();\n            $this->_processedTemplateDir = array();\n        }\n        $this->addTemplateDir($template_dir, null, $isConfig);\n        return $this;\n    }\n\n    /**\n     * Add config directory(s)\n     *\n     * @param string|array $config_dir directory(s) of config sources\n     * @param mixed        $key        key of the array element to assign the config dir to\n     *\n     * @return Smarty current Smarty instance for chaining\n     */\n    public function addConfigDir($config_dir, $key = null)\n    {\n        return $this->addTemplateDir($config_dir, $key, true);\n    }\n\n    /**\n     * Get config directory\n     *\n     * @param mixed $index index of directory to get, null to get all\n     *\n     * @return array configuration directory\n     */\n    public function getConfigDir($index = null)\n    {\n        return $this->getTemplateDir($index, true);\n    }\n\n    /**\n     * Set config directory\n     *\n     * @param $config_dir\n     *\n     * @return Smarty       current Smarty instance for chaining\n     */\n    public function setConfigDir($config_dir)\n    {\n        return $this->setTemplateDir($config_dir, true);\n    }\n\n    /**\n     * Adds directory of plugin files\n     *\n     * @param null|array|string $plugins_dir\n     *\n     * @return Smarty current Smarty instance for chaining\n     */\n    public function addPluginsDir($plugins_dir)\n    {\n        if (empty($this->plugins_dir)) {\n            $this->plugins_dir[] = SMARTY_PLUGINS_DIR;\n        }\n        $this->plugins_dir = array_merge($this->plugins_dir, (array)$plugins_dir);\n        $this->_pluginsDirNormalized = false;\n        return $this;\n    }\n\n    /**\n     * Get plugin directories\n     *\n     * @return array list of plugin directories\n     */\n    public function getPluginsDir()\n    {\n        if (empty($this->plugins_dir)) {\n            $this->plugins_dir[] = SMARTY_PLUGINS_DIR;\n            $this->_pluginsDirNormalized = false;\n        }\n        if (!$this->_pluginsDirNormalized) {\n            if (!is_array($this->plugins_dir)) {\n                $this->plugins_dir = (array)$this->plugins_dir;\n            }\n            foreach ($this->plugins_dir as $k => $v) {\n                $this->plugins_dir[ $k ] = $this->_realpath(rtrim($v, '/\\\\') . DIRECTORY_SEPARATOR, true);\n            }\n            $this->_cache[ 'plugin_files' ] = array();\n            $this->_pluginsDirNormalized = true;\n        }\n        return $this->plugins_dir;\n    }\n\n    /**\n     * Set plugins directory\n     *\n     * @param  string|array $plugins_dir directory(s) of plugins\n     *\n     * @return Smarty       current Smarty instance for chaining\n     */\n    public function setPluginsDir($plugins_dir)\n    {\n        $this->plugins_dir = (array)$plugins_dir;\n        $this->_pluginsDirNormalized = false;\n        return $this;\n    }\n\n    /**\n     * Get compiled directory\n     *\n     * @return string path to compiled templates\n     */\n    public function getCompileDir()\n    {\n        if (!$this->_compileDirNormalized) {\n            $this->_normalizeDir('compile_dir', $this->compile_dir);\n            $this->_compileDirNormalized = true;\n        }\n        return $this->compile_dir;\n    }\n\n    /**\n     *\n     * @param  string $compile_dir directory to store compiled templates in\n     *\n     * @return Smarty current Smarty instance for chaining\n     */\n    public function setCompileDir($compile_dir)\n    {\n        $this->_normalizeDir('compile_dir', $compile_dir);\n        $this->_compileDirNormalized = true;\n        return $this;\n    }\n\n    /**\n     * Get cache directory\n     *\n     * @return string path of cache directory\n     */\n    public function getCacheDir()\n    {\n        if (!$this->_cacheDirNormalized) {\n            $this->_normalizeDir('cache_dir', $this->cache_dir);\n            $this->_cacheDirNormalized = true;\n        }\n        return $this->cache_dir;\n    }\n\n    /**\n     * Set cache directory\n     *\n     * @param  string $cache_dir directory to store cached templates in\n     *\n     * @return Smarty current Smarty instance for chaining\n     */\n    public function setCacheDir($cache_dir)\n    {\n        $this->_normalizeDir('cache_dir', $cache_dir);\n        $this->_cacheDirNormalized = true;\n        return $this;\n    }\n\n    /**\n     * creates a template object\n     *\n     * @param  string  $template   the resource handle of the template file\n     * @param  mixed   $cache_id   cache id to be used with this template\n     * @param  mixed   $compile_id compile id to be used with this template\n     * @param  object  $parent     next higher level of Smarty variables\n     * @param  boolean $do_clone   flag is Smarty object shall be cloned\n     *\n     * @return \\Smarty_Internal_Template template object\n     * @throws \\SmartyException\n     */\n    public function createTemplate($template, $cache_id = null, $compile_id = null, $parent = null, $do_clone = true)\n    {\n        if ($cache_id !== null && (is_object($cache_id) || is_array($cache_id))) {\n            $parent = $cache_id;\n            $cache_id = null;\n        }\n        if ($parent !== null && is_array($parent)) {\n            $data = $parent;\n            $parent = null;\n        } else {\n            $data = null;\n        }\n        if (!$this->_templateDirNormalized) {\n            $this->_normalizeTemplateConfig(false);\n        }\n        $_templateId = $this->_getTemplateId($template, $cache_id, $compile_id);\n        $tpl = null;\n        if ($this->caching && isset(Smarty_Internal_Template::$isCacheTplObj[ $_templateId ])) {\n            $tpl = $do_clone ? clone Smarty_Internal_Template::$isCacheTplObj[ $_templateId ] :\n                Smarty_Internal_Template::$isCacheTplObj[ $_templateId ];\n            $tpl->inheritance = null;\n            $tpl->tpl_vars = $tpl->config_vars = array();\n        } else if (!$do_clone && isset(Smarty_Internal_Template::$tplObjCache[ $_templateId ])) {\n            $tpl = clone Smarty_Internal_Template::$tplObjCache[ $_templateId ];\n            $tpl->inheritance = null;\n            $tpl->tpl_vars = $tpl->config_vars = array();\n        } else {\n            /* @var Smarty_Internal_Template $tpl */\n            $tpl = new $this->template_class($template, $this, null, $cache_id, $compile_id, null, null);\n            $tpl->templateId = $_templateId;\n        }\n        if ($do_clone) {\n            $tpl->smarty = clone $tpl->smarty;\n        }\n        $tpl->parent = $parent ? $parent : $this;\n        // fill data if present\n        if (!empty($data) && is_array($data)) {\n            // set up variable values\n            foreach ($data as $_key => $_val) {\n                $tpl->tpl_vars[ $_key ] = new Smarty_Variable($_val);\n            }\n        }\n        if ($this->debugging || $this->debugging_ctrl === 'URL') {\n            $tpl->smarty->_debug = new Smarty_Internal_Debug();\n            // check URL debugging control\n            if (!$this->debugging && $this->debugging_ctrl === 'URL') {\n                $tpl->smarty->_debug->debugUrl($tpl->smarty);\n            }\n        }\n        return $tpl;\n    }\n\n    /**\n     * Takes unknown classes and loads plugin files for them\n     * class name format: Smarty_PluginType_PluginName\n     * plugin filename format: plugintype.pluginname.php\n     *\n     * @param  string $plugin_name class plugin name to load\n     * @param  bool   $check       check if already loaded\n     *\n     * @throws SmartyException\n     * @return string |boolean filepath of loaded file or false\n     */\n    public function loadPlugin($plugin_name, $check = true)\n    {\n        return $this->ext->loadPlugin->loadPlugin($this, $plugin_name, $check);\n    }\n\n    /**\n     * Get unique template id\n     *\n     * @param string                    $template_name\n     * @param null|mixed                $cache_id\n     * @param null|mixed                $compile_id\n     * @param null                      $caching\n     * @param \\Smarty_Internal_Template $template\n     *\n     * @return string\n     * @throws \\SmartyException\n     */\n    public function _getTemplateId($template_name,\n                                   $cache_id = null,\n                                   $compile_id = null,\n                                   $caching = null,\n                                   Smarty_Internal_Template $template = null)\n    {\n        $template_name = (strpos($template_name, ':') === false) ? \"{$this->default_resource_type}:{$template_name}\" :\n            $template_name;\n        $cache_id = $cache_id === null ? $this->cache_id : $cache_id;\n        $compile_id = $compile_id === null ? $this->compile_id : $compile_id;\n        $caching = (int)($caching === null ? $this->caching : $caching);\n        if ((isset($template) && strpos($template_name, ':.') !== false) || $this->allow_ambiguous_resources) {\n            $_templateId =\n                Smarty_Resource::getUniqueTemplateName((isset($template) ? $template : $this), $template_name) .\n                \"#{$cache_id}#{$compile_id}#{$caching}\";\n        } else {\n            $_templateId = $this->_joined_template_dir . \"#{$template_name}#{$cache_id}#{$compile_id}#{$caching}\";\n        }\n        if (isset($_templateId[ 150 ])) {\n            $_templateId = sha1($_templateId);\n        }\n        return $_templateId;\n    }\n\n    /**\n     * Normalize path\n     *  - remove /./ and /../\n     *  - make it absolute if required\n     *\n     * @param string $path      file path\n     * @param bool   $realpath  if true - convert to absolute\n     *                          false - convert to relative\n     *                          null - keep as it is but remove /./ /../\n     *\n     * @return string\n     */\n    public function _realpath($path, $realpath = null)\n    {\n        $nds = array('/' => '\\\\', '\\\\' => '/');\n        // normalize DIRECTORY_SEPARATOR\n        $path = str_replace(array($nds[DIRECTORY_SEPARATOR], DIRECTORY_SEPARATOR . '.' . DIRECTORY_SEPARATOR), DIRECTORY_SEPARATOR, $path);\n        preg_match('%^(?<root>(?:[[:alpha:]]:[\\\\\\\\]|/|[\\\\\\\\]{2}[[:alpha:]]+|[[:print:]]{2,}:[/]{2}|[\\\\\\\\])?)(?<path>(.*))$%u',\n                   $path,\n                   $parts);\n        $path = $parts[ 'path' ];\n        if ($parts[ 'root' ] === '\\\\') {\n            $parts[ 'root' ] = substr(getcwd(), 0, 2) . $parts[ 'root' ];\n        } else {\n            if ($realpath !== null && !$parts[ 'root' ]) {\n                $path = getcwd() . DIRECTORY_SEPARATOR . $path;\n            }\n        }\n        do {\n            $path = preg_replace(\n            array('#[\\\\\\\\/]{2}#', '#[\\\\\\\\/][.][\\\\\\\\/]#', '#[\\\\\\\\/]([^\\\\\\\\/.]+)[\\\\\\\\/][.][.][\\\\\\\\/]#'),\n            DIRECTORY_SEPARATOR, $path, -1, $count);\n        } while($count > 0);\n        return $realpath !== false ? $parts[ 'root' ] . $path : str_ireplace(getcwd(), '.', $parts[ 'root' ] . $path);\n    }\n\n    /**\n     * Empty template objects cache\n     */\n    public function _clearTemplateCache()\n    {\n        Smarty_Internal_Template::$isCacheTplObj = array();\n        Smarty_Internal_Template::$tplObjCache = array();\n    }\n\n    /**\n     * @param boolean $use_sub_dirs\n     */\n    public function setUseSubDirs($use_sub_dirs)\n    {\n        $this->use_sub_dirs = $use_sub_dirs;\n    }\n\n    /**\n     * @param int $error_reporting\n     */\n    public function setErrorReporting($error_reporting)\n    {\n        $this->error_reporting = $error_reporting;\n    }\n\n    /**\n     * @param boolean $escape_html\n     */\n    public function setEscapeHtml($escape_html)\n    {\n        $this->escape_html = $escape_html;\n    }\n\n    /**\n     * Return auto_literal flag\n     *\n     * @return boolean\n     */\n    public function getAutoLiteral()\n    {\n        return $this->auto_literal;\n    }\n\n    /**\n     * Set auto_literal flag\n     *\n     * @param boolean $auto_literal\n     */\n    public function setAutoLiteral($auto_literal = true)\n    {\n        $this->auto_literal = $auto_literal;\n    }\n\n    /**\n     * @param boolean $force_compile\n     */\n    public function setForceCompile($force_compile)\n    {\n        $this->force_compile = $force_compile;\n    }\n\n    /**\n     * @param boolean $merge_compiled_includes\n     */\n    public function setMergeCompiledIncludes($merge_compiled_includes)\n    {\n        $this->merge_compiled_includes = $merge_compiled_includes;\n    }\n\n    /**\n     * Get left delimiter\n     *\n     * @return string\n     */\n    public function getLeftDelimiter()\n    {\n        return $this->left_delimiter;\n    }\n\n    /**\n     * Set left delimiter\n     *\n     * @param string $left_delimiter\n     */\n    public function setLeftDelimiter($left_delimiter)\n    {\n        $this->left_delimiter = $left_delimiter;\n    }\n\n    /**\n     * Get right delimiter\n     *\n     * @return string $right_delimiter\n     */\n    public function getRightDelimiter()\n    {\n        return $this->right_delimiter;\n    }\n\n    /**\n     * Set right delimiter\n     *\n     * @param string\n     */\n    public function setRightDelimiter($right_delimiter)\n    {\n        $this->right_delimiter = $right_delimiter;\n    }\n\n    /**\n     * @param boolean $debugging\n     */\n    public function setDebugging($debugging)\n    {\n        $this->debugging = $debugging;\n    }\n\n    /**\n     * @param boolean $config_overwrite\n     */\n    public function setConfigOverwrite($config_overwrite)\n    {\n        $this->config_overwrite = $config_overwrite;\n    }\n\n    /**\n     * @param boolean $config_booleanize\n     */\n    public function setConfigBooleanize($config_booleanize)\n    {\n        $this->config_booleanize = $config_booleanize;\n    }\n\n    /**\n     * @param boolean $config_read_hidden\n     */\n    public function setConfigReadHidden($config_read_hidden)\n    {\n        $this->config_read_hidden = $config_read_hidden;\n    }\n\n    /**\n     * @param boolean $compile_locking\n     */\n    public function setCompileLocking($compile_locking)\n    {\n        $this->compile_locking = $compile_locking;\n    }\n\n    /**\n     * @param string $default_resource_type\n     */\n    public function setDefaultResourceType($default_resource_type)\n    {\n        $this->default_resource_type = $default_resource_type;\n    }\n\n    /**\n     * @param string $caching_type\n     */\n    public function setCachingType($caching_type)\n    {\n        $this->caching_type = $caching_type;\n    }\n\n    /**\n     * Test install\n     *\n     * @param null $errors\n     */\n    public function testInstall(&$errors = null)\n    {\n        Smarty_Internal_TestInstall::testInstall($this, $errors);\n    }\n\n    /**\n     * Get Smarty object\n     *\n     * @return Smarty\n     */\n    public function _getSmartyObj()\n    {\n        return $this;\n    }\n\n    /**\n     * <<magic>> Generic getter.\n     * Calls the appropriate getter function.\n     * Issues an E_USER_NOTICE if no valid getter is found.\n     *\n     * @param  string $name property name\n     *\n     * @return mixed\n     * @throws \\SmartyException\n     */\n    public function __get($name)\n    {\n        if (isset($this->accessMap[ $name ])) {\n            $method = 'get' . $this->accessMap[ $name ];\n            return $this->{$method}();\n        } else {if (isset($this->_cache[ $name ])) {\n            return $this->_cache[ $name ];\n        } else {if (in_array($name, $this->obsoleteProperties)) {\n            return null;\n        } else {\n            trigger_error('Undefined property: ' . get_class($this) . '::$' . $name, E_USER_NOTICE);\n        }}}\n        return null;\n    }\n\n    /**\n     * <<magic>> Generic setter.\n     * Calls the appropriate setter function.\n     * Issues an E_USER_NOTICE if no valid setter is found.\n     *\n     * @param string $name  property name\n     * @param mixed  $value parameter passed to setter\n     *\n     * @throws \\SmartyException\n     */\n    public function __set($name, $value)\n    {\n        if (isset($this->accessMap[ $name ])) {\n            $method = 'set' . $this->accessMap[ $name ];\n            $this->{$method}($value);\n        } else {if (in_array($name, $this->obsoleteProperties)) {\n            return;\n        } else {\n            if (is_object($value) && method_exists($value, $name)) {\n                $this->$name = $value;\n            } else {\n                trigger_error('Undefined property: ' . get_class($this) . '::$' . $name, E_USER_NOTICE);\n            }\n        }}\n    }\n\n    /**\n     * Normalize and set directory string\n     *\n     * @param string $dirName cache_dir or compile_dir\n     * @param string $dir     filepath of folder\n     */\n    private function _normalizeDir($dirName, $dir)\n    {\n        $this->{$dirName} = $this->_realpath(rtrim($dir, \"/\\\\\") . DIRECTORY_SEPARATOR, true);\n        if (class_exists('Smarty_Internal_ErrorHandler', false)) {\n            if (!isset(Smarty_Internal_ErrorHandler::$mutedDirectories[ $this->{$dirName} ])) {\n                Smarty_Internal_ErrorHandler::$mutedDirectories[ $this->{$dirName} ] = null;\n            }\n        }\n    }\n\n    /**\n     * Normalize template_dir or config_dir\n     *\n     * @param bool $isConfig true for config_dir\n     *\n     */\n    private function _normalizeTemplateConfig($isConfig)\n    {\n        if ($isConfig) {\n            $processed = &$this->_processedConfigDir;\n            $dir = &$this->config_dir;\n        } else {\n            $processed = &$this->_processedTemplateDir;\n            $dir = &$this->template_dir;\n        }\n        if (!is_array($dir)) {\n            $dir = (array)$dir;\n        }\n        foreach ($dir as $k => $v) {\n            if (!isset($processed[ $k ])) {\n                $dir[ $k ] = $v = $this->_realpath(rtrim($v, \"/\\\\\") . DIRECTORY_SEPARATOR, true);\n                $processed[ $k ] = true;\n            }\n        }\n        $isConfig ? $this->_configDirNormalized = true : $this->_templateDirNormalized = true;\n        $isConfig ? $this->_joined_config_dir = join('#', $this->config_dir) :\n            $this->_joined_template_dir = join('#', $this->template_dir);\n    }\n}\n", "<?php\n/**\n * Smarty plugin\n *\n * @package    Smarty\n * @subpackage Security\n * @author     Uwe Tews\n */\n\n/*\n * FIXME: Smarty_Security API\n *      - getter and setter instead of public properties would allow cultivating an internal cache properly\n *      - current implementation of isTrustedResourceDir() assumes that Smarty::$template_dir and Smarty::$config_dir are immutable\n *        the cache is killed every time either of the variables change. That means that two distinct Smarty objects with differing\n *        $template_dir or $config_dir should NOT share the same Smarty_Security instance,\n *        as this would lead to (severe) performance penalty! how should this be handled?\n */\n\n/**\n * This class does contain the security settings\n */\nclass Smarty_Security\n{\n    /**\n     * This determines how Smarty handles \"<?php ... ?>\" tags in templates.\n     * possible values:\n     * <ul>\n     *   <li>Smarty::PHP_PASSTHRU -> echo PHP tags as they are</li>\n     *   <li>Smarty::PHP_QUOTE    -> escape tags as entities</li>\n     *   <li>Smarty::PHP_REMOVE   -> remove php tags</li>\n     *   <li>Smarty::PHP_ALLOW    -> execute php tags</li>\n     * </ul>\n     *\n     * @var integer\n     */\n    public $php_handling = Smarty::PHP_PASSTHRU;\n\n    /**\n     * This is the list of template directories that are considered secure.\n     * $template_dir is in this list implicitly.\n     *\n     * @var array\n     */\n    public $secure_dir = array();\n\n    /**\n     * This is an array of directories where trusted php scripts reside.\n     * {@link $security} is disabled during their inclusion/execution.\n     *\n     * @var array\n     */\n    public $trusted_dir = array();\n\n    /**\n     * List of regular expressions (PCRE) that include trusted URIs\n     *\n     * @var array\n     */\n    public $trusted_uri = array();\n\n    /**\n     * List of trusted constants names\n     *\n     * @var array\n     */\n    public $trusted_constants = array();\n\n    /**\n     * This is an array of trusted static classes.\n     * If empty access to all static classes is allowed.\n     * If set to 'none' none is allowed.\n     *\n     * @var array\n     */\n    public $static_classes = array();\n\n    /**\n     * This is an nested array of trusted classes and static methods.\n     * If empty access to all static classes and methods is allowed.\n     * Format:\n     * array (\n     *         'class_1' => array('method_1', 'method_2'), // allowed methods listed\n     *         'class_2' => array(),                       // all methods of class allowed\n     *       )\n     * If set to null none is allowed.\n     *\n     * @var array\n     */\n    public $trusted_static_methods = array();\n\n    /**\n     * This is an array of trusted static properties.\n     * If empty access to all static classes and properties is allowed.\n     * Format:\n     * array (\n     *         'class_1' => array('prop_1', 'prop_2'), // allowed properties listed\n     *         'class_2' => array(),                   // all properties of class allowed\n     *       )\n     * If set to null none is allowed.\n     *\n     * @var array\n     */\n    public $trusted_static_properties = array();\n\n    /**\n     * This is an array of trusted PHP functions.\n     * If empty all functions are allowed.\n     * To disable all PHP functions set $php_functions = null.\n     *\n     * @var array\n     */\n    public $php_functions = array('isset', 'empty', 'count', 'sizeof', 'in_array', 'is_array', 'time',);\n\n    /**\n     * This is an array of trusted PHP modifiers.\n     * If empty all modifiers are allowed.\n     * To disable all modifier set $php_modifiers = null.\n     *\n     * @var array\n     */\n    public $php_modifiers = array('escape', 'count', 'nl2br',);\n\n    /**\n     * This is an array of allowed tags.\n     * If empty no restriction by allowed_tags.\n     *\n     * @var array\n     */\n    public $allowed_tags = array();\n\n    /**\n     * This is an array of disabled tags.\n     * If empty no restriction by disabled_tags.\n     *\n     * @var array\n     */\n    public $disabled_tags = array();\n\n    /**\n     * This is an array of allowed modifier plugins.\n     * If empty no restriction by allowed_modifiers.\n     *\n     * @var array\n     */\n    public $allowed_modifiers = array();\n\n    /**\n     * This is an array of disabled modifier plugins.\n     * If empty no restriction by disabled_modifiers.\n     *\n     * @var array\n     */\n    public $disabled_modifiers = array();\n\n    /**\n     * This is an array of disabled special $smarty variables.\n     *\n     * @var array\n     */\n    public $disabled_special_smarty_vars = array();\n\n    /**\n     * This is an array of trusted streams.\n     * If empty all streams are allowed.\n     * To disable all streams set $streams = null.\n     *\n     * @var array\n     */\n    public $streams = array('file');\n\n    /**\n     * + flag if constants can be accessed from template\n     *\n     * @var boolean\n     */\n    public $allow_constants = true;\n\n    /**\n     * + flag if super globals can be accessed from template\n     *\n     * @var boolean\n     */\n    public $allow_super_globals = true;\n\n    /**\n     * max template nesting level\n     *\n     * @var int\n     */\n    public $max_template_nesting = 0;\n\n    /**\n     * current template nesting level\n     *\n     * @var int\n     */\n    private $_current_template_nesting = 0;\n\n    /**\n     * Cache for $resource_dir lookup\n     *\n     * @var array\n     */\n    protected $_resource_dir = array();\n\n    /**\n     * Cache for $template_dir lookup\n     *\n     * @var array\n     */\n    protected $_template_dir = array();\n\n    /**\n     * Cache for $config_dir lookup\n     *\n     * @var array\n     */\n    protected $_config_dir = array();\n\n    /**\n     * Cache for $secure_dir lookup\n     *\n     * @var array\n     */\n    protected $_secure_dir = array();\n\n    /**\n     * Cache for $php_resource_dir lookup\n     *\n     * @var array\n     */\n    protected $_php_resource_dir = null;\n\n    /**\n     * Cache for $trusted_dir lookup\n     *\n     * @var array\n     */\n    protected $_trusted_dir = null;\n\n    /**\n     * Cache for include path status\n     *\n     * @var bool\n     */\n    protected $_include_path_status = false;\n\n    /**\n     * Cache for $_include_array lookup\n     *\n     * @var array\n     */\n    protected $_include_dir = array();\n\n    /**\n     * @param Smarty $smarty\n     */\n    public function __construct($smarty)\n    {\n        $this->smarty = $smarty;\n    }\n\n    /**\n     * Check if PHP function is trusted.\n     *\n     * @param  string $function_name\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if function is trusted\n     * @throws SmartyCompilerException if php function is not trusted\n     */\n    public function isTrustedPhpFunction($function_name, $compiler)\n    {\n        if (isset($this->php_functions) &&\n            (empty($this->php_functions) || in_array($function_name, $this->php_functions))\n        ) {\n            return true;\n        }\n\n        $compiler->trigger_template_error(\"PHP function '{$function_name}' not allowed by security setting\");\n\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if static class is trusted.\n     *\n     * @param  string $class_name\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if class is trusted\n     * @throws SmartyCompilerException if static class is not trusted\n     */\n    public function isTrustedStaticClass($class_name, $compiler)\n    {\n        if (isset($this->static_classes) &&\n            (empty($this->static_classes) || in_array($class_name, $this->static_classes))\n        ) {\n            return true;\n        }\n\n        $compiler->trigger_template_error(\"access to static class '{$class_name}' not allowed by security setting\");\n\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if static class method/property is trusted.\n     *\n     * @param  string $class_name\n     * @param  string $params\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if class method is trusted\n     * @throws SmartyCompilerException if static class method is not trusted\n     */\n    public function isTrustedStaticClassAccess($class_name, $params, $compiler)\n    {\n        if (!isset($params[ 2 ])) {\n            // fall back\n            return $this->isTrustedStaticClass($class_name, $compiler);\n        }\n        if ($params[ 2 ] === 'method') {\n            $allowed = $this->trusted_static_methods;\n            $name = substr($params[ 0 ], 0, strpos($params[ 0 ], '('));\n        } else {\n            $allowed = $this->trusted_static_properties;\n            // strip '$'\n            $name = substr($params[ 0 ], 1);\n        }\n        if (isset($allowed)) {\n            if (empty($allowed)) {\n                // fall back\n                return $this->isTrustedStaticClass($class_name, $compiler);\n            }\n            if (isset($allowed[ $class_name ]) &&\n                (empty($allowed[ $class_name ]) || in_array($name, $allowed[ $class_name ]))\n            ) {\n                return true;\n            }\n        }\n        $compiler->trigger_template_error(\"access to static class '{$class_name}' {$params[2]} '{$name}' not allowed by security setting\");\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if PHP modifier is trusted.\n     *\n     * @param  string $modifier_name\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if modifier is trusted\n     * @throws SmartyCompilerException if modifier is not trusted\n     */\n    public function isTrustedPhpModifier($modifier_name, $compiler)\n    {\n        if (isset($this->php_modifiers) &&\n            (empty($this->php_modifiers) || in_array($modifier_name, $this->php_modifiers))\n        ) {\n            return true;\n        }\n\n        $compiler->trigger_template_error(\"modifier '{$modifier_name}' not allowed by security setting\");\n\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if tag is trusted.\n     *\n     * @param  string $tag_name\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if tag is trusted\n     * @throws SmartyCompilerException if modifier is not trusted\n     */\n    public function isTrustedTag($tag_name, $compiler)\n    {\n        // check for internal always required tags\n        if (in_array($tag_name,\n                     array('assign', 'call', 'private_filter', 'private_block_plugin', 'private_function_plugin',\n                           'private_object_block_function', 'private_object_function', 'private_registered_function',\n                           'private_registered_block', 'private_special_variable', 'private_print_expression',\n                           'private_modifier'))) {\n            return true;\n        }\n        // check security settings\n        if (empty($this->allowed_tags)) {\n            if (empty($this->disabled_tags) || !in_array($tag_name, $this->disabled_tags)) {\n                return true;\n            } else {\n                $compiler->trigger_template_error(\"tag '{$tag_name}' disabled by security setting\", null, true);\n            }\n        } elseif (in_array($tag_name, $this->allowed_tags) && !in_array($tag_name, $this->disabled_tags)) {\n            return true;\n        } else {\n            $compiler->trigger_template_error(\"tag '{$tag_name}' not allowed by security setting\", null, true);\n        }\n\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if special $smarty variable is trusted.\n     *\n     * @param  string $var_name\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if tag is trusted\n     * @throws SmartyCompilerException if modifier is not trusted\n     */\n    public function isTrustedSpecialSmartyVar($var_name, $compiler)\n    {\n        if (!in_array($var_name, $this->disabled_special_smarty_vars)) {\n            return true;\n        } else {\n            $compiler->trigger_template_error(\"special variable '\\$smarty.{$var_name}' not allowed by security setting\",\n                                              null, true);\n        }\n\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if modifier plugin is trusted.\n     *\n     * @param  string $modifier_name\n     * @param  object $compiler compiler object\n     *\n     * @return boolean                 true if tag is trusted\n     * @throws SmartyCompilerException if modifier is not trusted\n     */\n    public function isTrustedModifier($modifier_name, $compiler)\n    {\n        // check for internal always allowed modifier\n        if (in_array($modifier_name, array('default'))) {\n            return true;\n        }\n        // check security settings\n        if (empty($this->allowed_modifiers)) {\n            if (empty($this->disabled_modifiers) || !in_array($modifier_name, $this->disabled_modifiers)) {\n                return true;\n            } else {\n                $compiler->trigger_template_error(\"modifier '{$modifier_name}' disabled by security setting\", null,\n                                                  true);\n            }\n        } elseif (in_array($modifier_name, $this->allowed_modifiers) &&\n                  !in_array($modifier_name, $this->disabled_modifiers)\n        ) {\n            return true;\n        } else {\n            $compiler->trigger_template_error(\"modifier '{$modifier_name}' not allowed by security setting\", null,\n                                              true);\n        }\n\n        return false; // should not, but who knows what happens to the compiler in the future?\n    }\n\n    /**\n     * Check if constants are enabled or trusted\n     *\n     * @param  string $const    constant name\n     * @param  object $compiler compiler object\n     *\n     * @return bool\n     */\n    public function isTrustedConstant($const, $compiler)\n    {\n        if (in_array($const, array('true', 'false', 'null'))) {\n            return true;\n        }\n        if (!empty($this->trusted_constants)) {\n            if (!in_array(strtolower($const), $this->trusted_constants)) {\n                $compiler->trigger_template_error(\"Security: access to constant '{$const}' not permitted\");\n                return false;\n            }\n            return true;\n        }\n        if ($this->allow_constants) {\n            return true;\n        }\n        $compiler->trigger_template_error(\"Security: access to constants not permitted\");\n        return false;\n    }\n\n    /**\n     * Check if stream is trusted.\n     *\n     * @param  string $stream_name\n     *\n     * @return boolean         true if stream is trusted\n     * @throws SmartyException if stream is not trusted\n     */\n    public function isTrustedStream($stream_name)\n    {\n        if (isset($this->streams) && (empty($this->streams) || in_array($stream_name, $this->streams))) {\n            return true;\n        }\n\n        throw new SmartyException(\"stream '{$stream_name}' not allowed by security setting\");\n    }\n\n    /**\n     * Check if directory of file resource is trusted.\n     *\n     * @param  string   $filepath\n     * @param null|bool $isConfig\n     *\n     * @return bool true if directory is trusted\n     * @throws \\SmartyException if directory is not trusted\n     */\n    public function isTrustedResourceDir($filepath, $isConfig = null)\n    {\n        if ($this->_include_path_status !== $this->smarty->use_include_path) {\n            $_dir = $this->smarty->use_include_path ? $this->smarty->ext->_getIncludePath->getIncludePathDirs($this->smarty) : array();\n            if ($this->_include_dir !== $_dir) {\n                $this->_updateResourceDir($this->_include_dir, $_dir);\n                $this->_include_dir = $_dir;\n            }\n            $this->_include_path_status = $this->smarty->use_include_path;\n        }\n\n            $_dir = $this->smarty->getTemplateDir();\n            if ($this->_template_dir !== $_dir) {\n                $this->_updateResourceDir($this->_template_dir, $_dir);\n                $this->_template_dir = $_dir;\n            }\n\n            $_dir = $this->smarty->getConfigDir();\n            if ($this->_config_dir !== $_dir) {\n                $this->_updateResourceDir($this->_config_dir, $_dir);\n                $this->_config_dir = $_dir;\n            }\n\n        if ($this->_secure_dir !== $this->secure_dir) {\n            $this->secure_dir = (array)$this->secure_dir;\n            foreach($this->secure_dir as $k => $d) {\n                $this->secure_dir[$k] = $this->smarty->_realpath($d. DIRECTORY_SEPARATOR,true);\n            }\n            $this->_updateResourceDir($this->_secure_dir, $this->secure_dir);\n            $this->_secure_dir = $this->secure_dir;\n        }\n        $addPath =  $this->_checkDir($filepath, $this->_resource_dir);\n        if ($addPath !== false) {\n           $this->_resource_dir = array_merge($this->_resource_dir, $addPath);\n        }\n        return true;\n    }\n\n    /**\n     * Check if URI (e.g. {fetch} or {html_image}) is trusted\n     * To simplify things, isTrustedUri() resolves all input to \"{$PROTOCOL}://{$HOSTNAME}\".\n     * So \"http://username:password@hello.world.example.org:8080/some-path?some=query-string\"\n     * is reduced to \"http://hello.world.example.org\" prior to applying the patters from {@link $trusted_uri}.\n     *\n     * @param  string $uri\n     *\n     * @return boolean         true if URI is trusted\n     * @throws SmartyException if URI is not trusted\n     * @uses $trusted_uri for list of patterns to match against $uri\n     */\n    public function isTrustedUri($uri)\n    {\n        $_uri = parse_url($uri);\n        if (!empty($_uri[ 'scheme' ]) && !empty($_uri[ 'host' ])) {\n            $_uri = $_uri[ 'scheme' ] . '://' . $_uri[ 'host' ];\n            foreach ($this->trusted_uri as $pattern) {\n                if (preg_match($pattern, $_uri)) {\n                    return true;\n                }\n            }\n        }\n\n        throw new SmartyException(\"URI '{$uri}' not allowed by security setting\");\n    }\n\n    /**\n     * Check if directory of file resource is trusted.\n     *\n     * @param  string $filepath\n     *\n     * @return boolean         true if directory is trusted\n     * @throws SmartyException if PHP directory is not trusted\n     */\n    public function isTrustedPHPDir($filepath)\n    {\n        if (empty($this->trusted_dir)) {\n            throw new SmartyException(\"directory '{$filepath}' not allowed by security setting (no trusted_dir specified)\");\n        }\n\n        // check if index is outdated\n        if (!$this->_trusted_dir || $this->_trusted_dir !== $this->trusted_dir) {\n            $this->_php_resource_dir = array();\n\n            $this->_trusted_dir = $this->trusted_dir;\n            foreach ((array) $this->trusted_dir as $directory) {\n                $directory = $this->smarty->_realpath($directory . '/', true);\n                $this->_php_resource_dir[ $directory ] = true;\n            }\n        }\n        $addPath =  $this->_checkDir($filepath, $this->_php_resource_dir);\n        if ($addPath !== false) {\n           $this->_php_resource_dir = array_merge($this->_php_resource_dir, $addPath);\n        }\n         return true;\n    }\n\n    /**\n     * Remove old directories and its sub folders, add new directories\n     *\n     * @param array $oldDir\n     * @param array $newDir\n     */\n    private function _updateResourceDir($oldDir, $newDir) {\n        foreach ($oldDir as $directory) {\n //           $directory = $this->smarty->_realpath($directory, true);\n            $length = strlen($directory);\n            foreach ($this->_resource_dir as $dir) {\n                if (substr($dir, 0,$length) === $directory) {\n                    unset($this->_resource_dir[ $dir ]);\n                }\n            }\n        }\n        foreach ($newDir as $directory) {\n //           $directory = $this->smarty->_realpath($directory, true);\n            $this->_resource_dir[ $directory ] = true;\n        }\n    }\n    /**\n     * Check if file is inside a valid directory\n     *\n     * @param string $filepath\n     * @param array  $dirs valid directories\n     *\n     * @return array|bool\n     * @throws \\SmartyException\n     */\n    private function _checkDir($filepath, $dirs)\n    {\n        $directory = dirname($this->smarty->_realpath($filepath, true)) . DIRECTORY_SEPARATOR;\n        $_directory = array();\n        while (true) {\n             // test if the directory is trusted\n            if (isset($dirs[ $directory ])) {\n               return $_directory;\n            }\n            // abort if we've reached root\n            if (!preg_match('#[\\\\\\\\/][^\\\\\\\\/]+[\\\\\\\\/]$#', $directory)) {\n                // give up\n                throw new SmartyException(sprintf('Smarty Security: not trusted file path \\'%s\\' ',$filepath));\n            }\n            // remember the directory to add it to _resource_dir in case we're successful\n            $_directory[ $directory ] = true;\n           // bubble up one level\n            $directory = preg_replace('#[\\\\\\\\/][^\\\\\\\\/]+[\\\\\\\\/]$#', DIRECTORY_SEPARATOR, $directory);\n        }\n    }\n\n    /**\n     * Loads security class and enables security\n     *\n     * @param \\Smarty                 $smarty\n     * @param  string|Smarty_Security $security_class if a string is used, it must be class-name\n     *\n     * @return \\Smarty current Smarty instance for chaining\n     * @throws \\SmartyException when an invalid class name is provided\n     */\n    public static function enableSecurity(Smarty $smarty, $security_class)\n    {\n        if ($security_class instanceof Smarty_Security) {\n            $smarty->security_policy = $security_class;\n            return $smarty;\n        } elseif (is_object($security_class)) {\n            throw new SmartyException(\"Class '\" . get_class($security_class) . \"' must extend Smarty_Security.\");\n        }\n        if ($security_class === null) {\n            $security_class = $smarty->security_class;\n        }\n        if (!class_exists($security_class)) {\n            throw new SmartyException(\"Security class '$security_class' is not defined\");\n        } elseif ($security_class !== 'Smarty_Security' && !is_subclass_of($security_class, 'Smarty_Security')) {\n            throw new SmartyException(\"Class '$security_class' must extend Smarty_Security.\");\n        } else {\n            $smarty->security_policy = new $security_class($smarty);\n        }\n        return $smarty;\n    }\n    /**\n     * Start template processing\n     *\n     * @param $template\n     *\n     * @throws SmartyException\n     */\n    public function startTemplate($template)\n    {\n        if ($this->max_template_nesting > 0 && $this->_current_template_nesting ++ >= $this->max_template_nesting) {\n            throw new SmartyException(\"maximum template nesting level of '{$this->max_template_nesting}' exceeded when calling '{$template->template_resource}'\");\n        }\n    }\n\n    /**\n     * Exit template processing\n     *\n     */\n    public function endTemplate()\n    {\n        if ($this->max_template_nesting > 0) {\n            $this->_current_template_nesting --;\n        }\n    }\n\n    /**\n     * Register callback functions call at start/end of template rendering\n     *\n     * @param \\Smarty_Internal_Template $template\n     */\n    public function registerCallBacks(Smarty_Internal_Template $template)\n    {\n        $template->startRenderCallbacks[] = array($this, 'startTemplate');\n        $template->endRenderCallbacks[] = array($this, 'endTemplate');\n    }\n}\n"], "filenames": ["libs/Smarty.class.php", "libs/sysplugins/smarty_security.php"], "buggy_code_start_loc": [1045, 655], "buggy_code_end_loc": [1321, 656], "fixing_code_start_loc": [1045, 655], "fixing_code_end_loc": [1301, 656], "type": "CWE-22", "message": "Smarty_Security::isTrustedResourceDir() in Smarty before 3.1.33 is prone to a path traversal vulnerability due to insufficient template code sanitization. This allows attackers controlling the executed template code to bypass the trusted directory security restriction and read arbitrary files.", "other": {"cve": {"id": "CVE-2018-13982", "sourceIdentifier": "cve@mitre.org", "published": "2018-09-18T21:29:02.247", "lastModified": "2021-11-02T14:01:02.210", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Smarty_Security::isTrustedResourceDir() in Smarty before 3.1.33 is prone to a path traversal vulnerability due to insufficient template code sanitization. This allows attackers controlling the executed template code to bypass the trusted directory security restriction and read arbitrary files."}, {"lang": "es", "value": "Smarty_Security::isTrustedResourceDir() en Smarty en versiones anteriores a la 3.1.33 es propenso a una vulnerabilidad de salto de directorio debido al saneamiento insuficiente de c\u00f3digos de plantilla. Esto permite que los atacantes que controlan el c\u00f3digo de plantilla ejecutado omitan las restricciones de seguridad del directorio de confianza y lean archivos arbitrarios."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:smarty:smarty:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.33", "matchCriteriaId": "0613AA6E-3478-438E-974B-88FF5DC03791"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "https://github.com/sbaresearch/advisories/tree/public/2018/SBA-ADV-20180420-01_Smarty_Path_Traversal", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/smarty-php/smarty/commit/2e081a51b1effddb23f87952959139ac62654d50", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/smarty-php/smarty/commit/8d21f38dc35c4cd6b31c2f23fc9b8e5adbc56dfe", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/smarty-php/smarty/commit/bcedfd6b58bed4a7366336979ebaa5a240581531", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/smarty-php/smarty/commit/c9dbe1d08c081912d02bd851d1d1b6388f6133d1", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/smarty-php/smarty/commit/f9ca3c63d1250bb56b2bda609dcc9dd81f0065f8", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2021/04/msg00004.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2021/04/msg00014.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2021/10/msg00015.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/smarty-php/smarty/commit/2e081a51b1effddb23f87952959139ac62654d50"}}