{"buggy_code": ["# Markdown to PDF\n\n[![Github Actions Badge](https://github.com/simonhaenisch/md-to-pdf/workflows/Node%20CI/badge.svg)](https://github.com/simonhaenisch/md-to-pdf/actions)\n[![NPM version](https://img.shields.io/npm/v/md-to-pdf.svg)](https://www.npmjs.com/md-to-pdf)\n[![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo)\n\n![Screenshot of markdown file and resulting PDF](https://files-iiiuxybjc.now.sh)\n\n**A simple and hackable CLI tool for converting markdown to pdf**. It uses [Marked](https://github.com/markedjs/marked) to convert `markdown` to `html` and [Puppeteer](https://github.com/GoogleChrome/puppeteer) (headless Chromium) to further convert the `html` to `pdf`. It also uses [highlight.js](https://github.com/isagalaev/highlight.js) for code highlighting. The whole source code of this tool is ~only \\~250 lines of JS~ ~400 lines of Typescript and ~100 lines of CSS, so it is easy to clone and customize.\n\n**Highlights:**\n\n- Concurrently convert multiple Markdown files\n- Watch mode\n- Use your own or remote stylesheets/scripts\n- Front-matter for configuration\n- Headers and Footers\n- Page Breaks\n- Syntax highlighting in code blocks\n- Extend the options of the underlying tools\n- Programmatic API\n- Supports `stdio`\n\n## Installation\n\n**Option 1: NPM**\n\n```sh\nnpm i -g md-to-pdf\n```\n\n**Option 2: Git**\n\nIf you want to have your own copy to hack around with, clone the repository instead:\n\n```sh\ngit clone \"https://github.com/simonhaenisch/md-to-pdf\"\ncd md-to-pdf\nnpm link # or npm i -g\n```\n\nThen the commands `md-to-pdf` and `md2pdf` (as a shorthand) will be globally available in your cli. Use `npm start` to start the TypeScript compiler (`tsc`) in watch mode.\n\n## Update\n\nIf you installed via npm, run `npm i -g md-to-pdf@latest` in your CLI. If you cloned this repository instead, you can simply do a `git pull` to get the latest changes from the master branch, then do `npm run build` to re-build. Unless there have been changes to packages (i. e. `package-lock.json`), you don't need to re-install the package (because NPM 5+ uses symlinks, at least on Unix systems).\n\n## Usage\n\n```\n$ md-to-pdf [options] path/to/file.md\n\nOptions:\n\n  -h, --help ............... Output usage information\n  -v, --version ............ Output version\n  -w, --watch .............. Watch the current file(s) for changes\n  --watch-options .......... Options for Chokidar's watch call\n  --basedir ................ Base directory to be served by the file server\n  --stylesheet ............. Path to a local or remote stylesheet (can be passed multiple times)\n  --css .................... String of styles\n  --document-title ......... Name of the HTML Document.\n  --body-class ............. Classes to be added to the body tag (can be passed multiple times)\n  --page-media-type ........ Media type to emulate the page with (default: screen)\n  --highlight-style ........ Style to be used by highlight.js (default: github)\n  --marked-options ......... Set custom options for marked (as a JSON string)\n  --pdf-options ............ Set custom options for the generated PDF (as a JSON string)\n  --launch-options ......... Set custom launch options for Puppeteer\n  --port ................... Set the port to run the http server on\n  --md-file-encoding ....... Set the file encoding for the markdown file\n  --stylesheet-encoding .... Set the file encoding for the stylesheet\n  --as-html ................ Output as HTML instead\n  --config-file ............ Path to a JSON or JS configuration file\n  --devtools ............... Open the browser with devtools instead of creating PDF\n```\n\nThe pdf is generated into the same directory as the source file and uses the same filename (with `.pdf` extension) by default. Multiple files can be specified by using shell globbing, e. g.:\n\n```sh\nmd-to-pdf ./**/*.md\n```\n\n_(If you use bash, you might need to enable the `globstar` shell option to make recursive globbing work.)_\n\nAlternatively, you can pass the markdown in from `stdin` and pipe its `stdout` into a target file:\n\n```sh\ncat file.md | md-to-pdf > path/to/output.pdf\n```\n\n_Tip: You can concatenate multiple files using `cat file1.md file2.md`._\n\nThe current working directory (`process.cwd()`) serves as the base directory of the file server by default. This can be adjusted with the `--basedir` flag (or equivalent config option).\n\n#### Watch Mode\n\nWatch mode (`--watch`) uses Chokidar's `watch` method on the markdown file. If you're having issues, you can adjust the watch options via the config (`watch_options`) or `--watch-options` CLI arg. The `awaitWriteFinish` option might be particularly useful if you use editor plugins (e. g. TOC generators) that modify and save the file after the initial save. Check out the [Chokidar docs](https://github.com/paulmillr/chokidar#api) for a full list of options.\n\nNote that Preview on macOS does not automatically reload the preview when the file has changed (or at least not reliably). There are PDF viewers available that can check for file changes and offer auto-reload (e. g. [Skim](https://skim-app.sourceforge.io/)'s \"Sync\" feature).\n\n#### Programmatic API\n\nThe programmatic API is very simple: it only exposes one function that accepts either a `path` to or `content` of a markdown file, and an optional config object (which can be used to specify the output file destination).\n\n```js\nconst fs = require('fs');\nconst { mdToPdf } = require('md-to-pdf');\n\n(async () => {\n\tconst pdf = await mdToPdf({ path: 'readme.md' }).catch(console.error);\n\n\tif (pdf) {\n\t\tfs.writeFileSync(pdf.filename, pdf.content);\n\t}\n})();\n```\n\nThe function throws an error if anything goes wrong, which can be handled by catching the rejected promise. If you set the `dest` option in the config, the file will be written to the specified location straight away:\n\n```js\nawait mdToPdf({ content: '# Hello, World' }, { dest: 'path/to/output.pdf' });\n```\n\n#### Page Break\n\nPlace an element with class `page-break` to force a page break at a certain point of the document (uses the CSS rule `page-break-after: always`), e. g.:\n\n```html\n<div class=\"page-break\"></div>\n```\n\n#### Header/Footer\n\nUse `headerTemplate` and `footerTemplate` of Puppeteer's [`page.pdf()` options](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagepdfoptions). If either of the two is set, then `displayHeaderFooter` will be enabled by default. It's possible to inject a few dynamic values like page numbers by using certain class names, as stated in the Puppeteer docs. Please note that for some reason the font-size defaults to 1pt, and you need to make sure to have enough page margin, otherwise your header/footer might be overlayed by your content. If you add a `<style/>` tag in either of the templates, it will be applied to both header and footer.\n\nExample markdown frontmatter config that prints the date in the header and the page number in the footer:\n\n```markdown\n---\npdf_options:\n  format: a4\n  margin: 30mm 20mm\n  printBackground: true\n  headerTemplate: |-\n    <style>\n      section {\n        margin: 0 auto;\n        font-family: system-ui;\n        font-size: 11px;\n      }\n    </style>\n    <section>\n      <span class=\"title\"></span>\n      <span class=\"date\"></span>\n    </section>\n  footerTemplate: |-\n    <section>\n      <div>\n        Page <span class=\"pageNumber\"></span>\n        of <span class=\"totalPages\"></span>\n      </div>\n    </section>\n---\n```\n\nRefer to the [Puppeteer docs](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagepdfoptions) for more info about headers and footers.\n\n#### Formulas\n\nThis can be achieved with [MathJax](https://www.mathjax.org/). A simple example can be found in [`/src/test/mathjax`](/src/test/mathjax).\n\n#### Default and Advanced Options\n\nFor default and advanced options see the following links. The default highlight.js styling for code blocks is `github`. The default PDF options are the A4 format and some margin (see `lib/config.ts` for the full default config).\n\n- [Marked Advanced Options](https://github.com/markedjs/marked/blob/master/docs/USING_ADVANCED.md)\n- [Puppeteer PDF Options](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagepdfoptions)\n- [Puppeteer Launch Options](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#puppeteerlaunchoptions)\n- [highlight.js Styles](https://github.com/isagalaev/highlight.js/tree/master/src/styles)\n\n## Options\n\n| Option                  | Examples                                                              |\n| ----------------------- | --------------------------------------------------------------------- |\n| `--basedir`             | `path/to/folder`                                                      |\n| `--stylesheet`          | `path/to/style.css`, `https://example.org/stylesheet.css`             |\n| `--css`                 | `body { color: tomato; }`                                             |\n| `--document-title`      | `Read me`                                                             |\n| `--body-class`          | `markdown-body`                                                       |\n| `--page-media-type`     | `print`                                                               |\n| `--highlight-style`     | `monokai`, `solarized-light`                                          |\n| `--marked-options`      | `'{ \"gfm\": false }'`                                                  |\n| `--pdf-options`         | `'{ \"format\": \"Letter\", \"margin\": \"20mm\", \"printBackground\": true }'` |\n| `--launch-options`      | `'{ \"args\": [\"--no-sandbox\"] }'`                                      |\n| `--port`                | `3000`                                                                |\n| `--md-file-encoding`    | `utf-8`, `windows1252`                                                |\n| `--stylesheet-encoding` | `utf-8`, `windows1252`                                                |\n| `--config-file`         | `path/to/config.json`                                                 |\n\n**`margin`:** instead of an object (as stated in the Puppeteer docs), it is also possible to pass a CSS-like string, e. g. `1em` (all), `1in 2in` (top/bottom right/left), `10mm 20mm 30mm` (top right/left bottom) or `1px 2px 3px 4px` (top right bottom left).\n\n**`highlight-style`:** if you set a highlight style with a background color, make sure that `\"printBackground\": true` is set in the pdf options.\n\nThe options can also be set with front-matter or a config file (except `--md-file-encoding` can't be set by front-matter). In that case, remove the leading two hyphens (`--`) from the cli argument name and replace the hyphens (`-`) with underscores (`_`). `--stylesheet` and `--body-class` can be passed multiple times (i. e. to create an array). It's possible to set the output path for the PDF as `dest` in the config. If the same config option exists in multiple places, the priority (from low to high) is: defaults, config file, front-matter, cli arguments.\n\nExample front-matter:\n\n```markdown\n---\ndest: ./path/to/output.pdf\nstylesheet:\n  - path/to/style.css\nbody_class: markdown-body\nhighlight_style: monokai\npdf_options:\n  format: A5\n  margin: 10mm\n  printBackground: true\n---\n\n# Content\n```\n\nThe config file can be a Javascript file that exports a config object, which gives you the full power of the eco-system (e. g. for advanced header/footer templates); or it can also be a `.json` if you like it simple.\n\nExample `config.js`:\n\n```js\nmodule.exports = {\n\tstylesheet: ['path/to/style.css', 'https://example.org/stylesheet.css'],\n\tcss: `body { color: tomato; }`,\n\tbody_class: 'markdown-body',\n\tmarked_options: {\n\t\theaderIds: false,\n\t\tsmartypants: true,\n\t},\n\tpdf_options: {\n\t\tformat: 'A5',\n\t\tmargin: '20mm',\n\t\tprintBackground: true,\n\t},\n\tstylesheet_encoding: 'utf-8',\n};\n```\n\nExample `config.json`:\n\n```json\n{\n\t\"highlight_style\": \"monokai\",\n\t\"body_class\": [\"dark\", \"content\"]\n}\n```\n\n#### Github Styles\n\nHere is an example front-matter for how to get Github-like output:\n\n```markdown\n---\nstylesheet: https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/2.10.0/github-markdown.min.css\nbody_class: markdown-body\ncss: |-\n  .page-break { page-break-after: always; }\n  .markdown-body { font-size: 11px; }\n  .markdown-body pre > code { white-space: pre-wrap; }\n---\n```\n\n## Security Consideration\n\nBy default, this tool serves the current working directory via a http server on `localhost` on a relatively random port (or the port you specify), and that server gets shut down when the process exits (or as soon as it is killed). Please be aware that for the duration of the process this server will be accessible on your local network, and therefore all files within the served folder that the process has permission to read. So as a suggestion, maybe don't run this in watch mode in your system's root folder. \ud83d\ude09\n\n## Customization/Development\n\nAfter cloning and linking/installing globally (`npm link`), just run the transpiler in watch mode (`npm start`). Then you can start making changes to the files and Typescript will transpile them on save. NPM 5+ uses symlinks for locally installed global packages, so all changes are reflected immediately without needing to re-install the package (except when there have been changes to required packages, then re-install using `npm i`). This also means that you can just do a `git pull` to get the latest version onto your machine.\n\nIdeas, feature requests and PRs are welcome. Just keep it simple! \ud83e\udd13\n\n## Credits\n\nI want to thank the following people:\n\n- [imcvampire](https://github.com/imcvampire) for handing over the npm package name.\n- [Sindre Sorhus](https://github.com/sindresorhus) and [Zeit](https://github.com/zeit) for inspiration on how to write cli tools.\n- [Josh Bruce](https://github.com/joshbruce) for [reviving Marked](https://github.com/markedjs/marked/issues/1106).\n\n## License\n\n[MIT](/license).\n", "#!/usr/bin/env node\n\n// --\n// Packages\n\nimport arg from 'arg';\nimport chalk from 'chalk';\nimport { watch, WatchOptions } from 'chokidar';\nimport getPort from 'get-port';\nimport getStdin from 'get-stdin';\nimport Listr from 'listr';\nimport path from 'path';\nimport { PackageJson } from '.';\nimport { Config, defaultConfig } from './lib/config';\nimport { help } from './lib/help';\nimport { setProcessAndTermTitle } from './lib/helpers';\nimport { convertMdToPdf } from './lib/md-to-pdf';\nimport { closeServer, serveDirectory } from './lib/serve-dir';\nimport { validateNodeVersion } from './lib/validate-node-version';\n\n// --\n// Configure CLI Arguments\n\nexport const cliFlags = arg({\n\t'--help': Boolean,\n\t'--version': Boolean,\n\t'--basedir': String,\n\t'--watch': Boolean,\n\t'--watch-options': String,\n\t'--stylesheet': [String],\n\t'--css': String,\n\t'--document-title': String,\n\t'--body-class': [String],\n\t'--page-media-type': String,\n\t'--highlight-style': String,\n\t'--marked-options': String,\n\t'--html-pdf-options': String,\n\t'--pdf-options': String,\n\t'--launch-options': String,\n\t'--port': Number,\n\t'--md-file-encoding': String,\n\t'--stylesheet-encoding': String,\n\t'--as-html': Boolean,\n\t'--config-file': String,\n\t'--devtools': Boolean,\n\n\t// aliases\n\t'-h': '--help',\n\t'-v': '--version',\n\t'-w': '--watch',\n});\n\n// --\n// Run\n\nmain(cliFlags, defaultConfig).catch((error) => {\n\tconsole.error(error);\n\tprocess.exit(1);\n});\n\n// --\n// Define Main Function\n\nasync function main(args: typeof cliFlags, config: Config) {\n\tsetProcessAndTermTitle('md-to-pdf');\n\n\tif (!validateNodeVersion()) {\n\t\tthrow new Error('Please use a Node.js version that satisfies the version specified in the engines field.');\n\t}\n\n\tif (args['--version']) {\n\t\treturn console.log((require('../package.json') as PackageJson).version);\n\t}\n\n\tif (args['--help']) {\n\t\treturn help();\n\t}\n\n\t/**\n\t * 1. Get input.\n\t */\n\n\tconst files = args._;\n\n\tconst stdin = await getStdin();\n\n\tif (files.length === 0 && !stdin) {\n\t\treturn help();\n\t}\n\n\t/**\n\t * 2. Read config file and merge it into the config object.\n\t */\n\n\tif (args['--config-file']) {\n\t\ttry {\n\t\t\tconst configFile: Partial<Config> = require(path.resolve(args['--config-file']));\n\n\t\t\tconfig = {\n\t\t\t\t...config,\n\t\t\t\t...configFile,\n\t\t\t\tpdf_options: { ...config.pdf_options, ...configFile.pdf_options },\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.warn(chalk.red(`Warning: couldn't read config file: ${path.resolve(args['--config-file'])}`));\n\t\t\tconsole.warn(error instanceof SyntaxError ? error.message : error);\n\t\t}\n\t}\n\n\t/**\n\t * 3. Start the file server.\n\t */\n\n\tif (args['--basedir']) {\n\t\tconfig.basedir = args['--basedir'];\n\t}\n\n\tconfig.port = args['--port'] ?? (await getPort());\n\n\tconst server = await serveDirectory(config);\n\n\t/**\n\t * 4. Either process stdin or create a Listr task for each file.\n\t */\n\n\tif (stdin) {\n\t\tawait convertMdToPdf({ content: stdin }, config, args)\n\t\t\t.then(async () => closeServer(server))\n\t\t\t.catch(async (error: Error) => {\n\t\t\t\tawait closeServer(server);\n\n\t\t\t\tthrow error;\n\t\t\t});\n\n\t\treturn;\n\t}\n\n\tconst getListrTask = (file: string) => ({\n\t\ttitle: `generating ${args['--as-html'] ? 'HTML' : 'PDF'} from ${chalk.underline(file)}`,\n\t\ttask: async () => convertMdToPdf({ path: file }, config, args),\n\t});\n\n\tawait new Listr(files.map(getListrTask), { concurrent: true, exitOnError: false })\n\t\t.run()\n\t\t.then(() => {\n\t\t\tif (args['--watch']) {\n\t\t\t\tconsole.log(chalk.bgBlue('\\n watching for changes \\n'));\n\n\t\t\t\tconst watchOptions = args['--watch-options']\n\t\t\t\t\t? (JSON.parse(args['--watch-options']) as WatchOptions)\n\t\t\t\t\t: config.watch_options;\n\n\t\t\t\twatch(files, watchOptions).on('change', async (file) =>\n\t\t\t\t\tnew Listr([getListrTask(file)], { exitOnError: false }).run().catch(console.error),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tserver.close();\n\t\t\t}\n\t\t})\n\t\t.catch((error: Error) => {\n\t\t\t/**\n\t\t\t * In watch mode the error needs to be shown immediately because the `main` function's catch handler will never execute.\n\t\t\t *\n\t\t\t * @todo is this correct or does `main` actually finish and the process is just kept alive because of the file server?\n\t\t\t */\n\t\t\tif (args['--watch']) {\n\t\t\t\treturn console.error(error);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t});\n}\n", "import { WatchOptions } from 'chokidar';\nimport { MarkedOptions } from 'marked';\nimport { resolve } from 'path';\nimport { FrameAddScriptTagOptions, launch, PDFOptions } from 'puppeteer';\n\nexport const defaultConfig: Config = {\n\tbasedir: process.cwd(),\n\tstylesheet: [resolve(__dirname, '..', '..', 'markdown.css')],\n\tscript: [],\n\tcss: '',\n\tdocument_title: '',\n\tbody_class: [],\n\tpage_media_type: 'screen',\n\thighlight_style: 'github',\n\tmarked_options: {},\n\tpdf_options: {\n\t\tprintBackground: true,\n\t\tformat: 'a4',\n\t\tmargin: {\n\t\t\ttop: '30mm',\n\t\t\tright: '40mm',\n\t\t\tbottom: '30mm',\n\t\t\tleft: '20mm',\n\t\t},\n\t},\n\tlaunch_options: {},\n\tmd_file_encoding: 'utf-8',\n\tstylesheet_encoding: 'utf-8',\n\tas_html: false,\n\tdevtools: false,\n};\n\n/**\n * In config keys, dashes of cli flag names are replaced with underscores.\n */\nexport type Config = PdfConfig | HtmlConfig;\n\nexport interface PdfConfig extends BasicConfig {\n\t/**\n\t * If true, generate HTML output instead of PDF output. Default: `false`.\n\t */\n\tas_html?: false;\n}\n\nexport interface HtmlConfig extends BasicConfig {\n\t/**\n\t * If true, generate HTML output instead of PDF output. Default: `false`.\n\t */\n\tas_html: true;\n}\n\ninterface BasicConfig {\n\t/**\n\t * Base directory to be served by the file server.\n\t */\n\tbasedir: string;\n\n\t/**\n\t * Optional destination path for the output file (including the extension).\n\t */\n\tdest?: string;\n\n\t/**\n\t * List of css files to use for styling.\n\t *\n\t * @todo change to `FrameAddStyleTagOptions` (will be a breaking change)\n\t */\n\tstylesheet: string[];\n\n\t/**\n\t * Custom css styles.\n\t */\n\tcss: string;\n\n\t/**\n\t * List of scripts to load into the page.\n\t *\n\t * @see https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageaddscripttagoptions\n\t */\n\tscript: FrameAddScriptTagOptions[];\n\n\t/**\n\t * Name of the HTML Document.\n\t */\n\tdocument_title: string;\n\n\t/**\n\t * List of classes for the body tag.\n\t */\n\tbody_class: string[];\n\n\t/**\n\t * Media type to emulate the page with.\n\t */\n\tpage_media_type: 'screen' | 'print';\n\n\t/**\n\t * Highlight.js stylesheet to use (without the .css extension).\n\t *\n\t * @see https://github.com/isagalaev/highlight.js/tree/master/src/styles\n\t */\n\thighlight_style: string;\n\n\t/**\n\t * Options for the Marked parser.\n\t *\n\t * @see https://marked.js.org/#/USING_ADVANCED.md\n\t */\n\tmarked_options: MarkedOptions;\n\n\t/**\n\t * PDF options for Puppeteer.\n\t *\n\t * @see https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagepdfoptions\n\t */\n\tpdf_options: PDFOptions;\n\n\t/**\n\t * Launch options for Puppeteer.\n\t *\n\t * @see https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#puppeteerlaunchoptions\n\t */\n\tlaunch_options: PuppeteerLaunchOptions;\n\n\t/**\n\t * Markdown file encoding. Default: `utf-8`.\n\t */\n\tmd_file_encoding: string;\n\n\t/**\n\t * CSS stylesheet encoding. Default: `utf-8`.\n\t */\n\tstylesheet_encoding: string;\n\n\t/**\n\t * If true, open chromium with devtools instead of saving the pdf. This is\n\t * meant for development only, to inspect the rendered HTML.\n\t */\n\tdevtools: boolean;\n\n\t/**\n\t * Port to run the local server on.\n\t */\n\tport?: number;\n\n\t/**\n\t * Options to pass to Chokidar's `watch` call.\n\t *\n\t * This is specifically useful when running into issues when editor plugins trigger additional saves after the initial save.\n\t */\n\twatch_options?: WatchOptions;\n}\n\nexport type PuppeteerLaunchOptions = Parameters<typeof launch>[0];\n", "import chalk from 'chalk';\n\nconst helpText = `\n  ${chalk.bold('$ md-to-pdf')} [options] path/to/file.md\n\n  ${chalk.dim.underline.bold('Options:')}\n\n    -h, --help ${chalk.dim('...............')} Output usage information\n    -v, --version ${chalk.dim('............')} Output version\n    -w, --watch ${chalk.dim('..............')} Watch the current file(s) for changes\n\t\t--watch-options ${chalk.dim('..........')} Options for Chokidar's watch call\n    --basedir ${chalk.dim('................')} Base directory to be served by the file server\n    --stylesheet ${chalk.dim('.............')} Path to a local or remote stylesheet (can be passed multiple times)\n    --css ${chalk.dim('....................')} String of styles\n    --document-title ${chalk.dim('.........')} Name of the HTML Document.\n    --body-class ${chalk.dim('.............')} Classes to be added to the body tag (can be passed multiple times)\n    --page-media-type ${chalk.dim('........')} Media type to emulate the page with (default: screen)\n    --highlight-style ${chalk.dim('........')} Style to be used by highlight.js (default: github)\n    --marked-options ${chalk.dim('.........')} Set custom options for marked (as a JSON string)\n    --pdf-options ${chalk.dim('............')} Set custom options for the generated PDF (as a JSON string)\n    --launch-options ${chalk.dim('.........')} Set custom launch options for Puppeteer\n    --port ${chalk.dim('...................')} Set the port to run the http server on\n    --md-file-encoding ${chalk.dim('.......')} Set the file encoding for the markdown file\n    --stylesheet-encoding ${chalk.dim('....')} Set the file encoding for the stylesheet\n    --as-html ${chalk.dim('................')} Output as HTML instead\n    --config-file ${chalk.dim('............')} Path to a JSON or JS configuration file\n    --devtools ${chalk.dim('...............')} Open the browser with devtools instead of creating PDF\n\n  ${chalk.dim.underline.bold('Examples:')}\n\n  ${chalk.gray('\u2013')} Convert ./file.md and save to ./file.pdf\n\n    ${chalk.cyan('$ md-to-pdf file.md')}\n\n  ${chalk.gray('\u2013')} Convert all markdown files in current directory\n\n    ${chalk.cyan('$ md-to-pdf ./*.md')}\n\n  ${chalk.gray('\u2013')} Convert all markdown files in current directory recursively\n\n    ${chalk.cyan('$ md-to-pdf ./**/*.md')}\n\n  ${chalk.gray('\u2013')} Convert and enable watch mode\n\n    ${chalk.cyan('$ md-to-pdf ./*.md -w')}\n\n  ${chalk.gray('\u2013')} Convert and enable watch mode with custom options\n\n    ${chalk.cyan('$ md-to-pdf ./*.md --watch --watch-options \\'{ \"atomic\": true }\\'')}\n\n  ${chalk.gray('\u2013')} Convert path/to/file.md with a different base directory\n\n    ${chalk.cyan('$ md-to-pdf path/to/file.md --basedir path')}\n\n  ${chalk.gray('\u2013')} Convert file.md using custom-markdown.css\n\n    ${chalk.cyan('$ md-to-pdf file.md --stylesheet custom-markdown.css')}\n\n  ${chalk.gray('\u2013')} Convert file.md using the Monokai theme for code highlighting\n\n    ${chalk.cyan('$ md-to-pdf file.md --highlight-style monokai')}\n\n  ${chalk.gray('\u2013')} Convert file.md using custom page options\n\n    ${chalk.cyan('$ md-to-pdf file.md --pdf-options \\'{ \"format\": \"Letter\" }\\'')}\n\n  ${chalk.gray('\u2013')} Convert file.md but save the intermediate HTML instead\n\n    ${chalk.cyan('$ md-to-pdf file.md --as-html')}\n`;\n\nexport const help = () => console.log(helpText);\n", "import { promises as fs } from 'fs';\nimport grayMatter from 'gray-matter';\nimport { dirname, resolve } from 'path';\nimport { Config } from './config';\nimport { generateOutput } from './generate-output';\nimport { getHtml } from './get-html';\nimport { getOutputFilePath } from './get-output-file-path';\nimport { getMarginObject } from './helpers';\nimport { readFile } from './read-file';\n\ntype CliArgs = typeof import('../cli').cliFlags;\n\n/**\n * Convert markdown to pdf.\n */\nexport const convertMdToPdf = async (\n\tinput: { path: string } | { content: string },\n\tconfig: Config,\n\targs: CliArgs = {} as CliArgs,\n) => {\n\tconst mdFileContent =\n\t\t'content' in input\n\t\t\t? input.content\n\t\t\t: await readFile(input.path, args['--md-file-encoding'] ?? config.md_file_encoding);\n\n\tconst { content: md, data: frontMatterConfig } = grayMatter(mdFileContent);\n\n\t// merge front-matter config\n\tconfig = {\n\t\t...config,\n\t\t...(frontMatterConfig as Config),\n\t\tpdf_options: { ...config.pdf_options, ...frontMatterConfig.pdf_options },\n\t};\n\n\tconst { headerTemplate, footerTemplate, displayHeaderFooter } = config.pdf_options;\n\n\tif ((headerTemplate || footerTemplate) && displayHeaderFooter === undefined) {\n\t\tconfig.pdf_options.displayHeaderFooter = true;\n\t}\n\n\tconst arrayOptions = ['body_class', 'script', 'stylesheet'] as const;\n\n\t// sanitize frontmatter array options\n\tfor (const option of arrayOptions) {\n\t\tif (!Array.isArray(config[option])) {\n\t\t\tconfig[option] = [config[option]].filter(Boolean) as any;\n\t\t}\n\t}\n\n\tconst jsonArgs = new Set(['--marked-options', '--pdf-options', '--launch-options']);\n\n\t// merge cli args into config\n\tfor (const arg of Object.entries(args)) {\n\t\tconst [argKey, argValue] = arg as [string, string];\n\t\tconst key = argKey.slice(2).replace(/-/g, '_');\n\n\t\t(config as Record<string, any>)[key] = jsonArgs.has(argKey) ? JSON.parse(argValue) : argValue;\n\t}\n\n\t// sanitize the margin in pdf_options\n\tif (typeof config.pdf_options.margin === 'string') {\n\t\tconfig.pdf_options.margin = getMarginObject(config.pdf_options.margin);\n\t}\n\n\t// set output destination\n\tif (config.dest === undefined) {\n\t\tconfig.dest = 'path' in input ? getOutputFilePath(input.path, config.as_html ? 'html' : 'pdf') : 'stdout';\n\t}\n\n\tconst highlightStylesheet = resolve(\n\t\tdirname(require.resolve('highlight.js')),\n\t\t'..',\n\t\t'styles',\n\t\t`${config.highlight_style}.css`,\n\t);\n\n\tconfig.stylesheet = [...new Set([...config.stylesheet, highlightStylesheet])];\n\n\tconst html = getHtml(md, config);\n\n\tconst relativePath = 'path' in input ? resolve(input.path).replace(config.basedir, '') : '/';\n\n\tconst output = await generateOutput(html, relativePath, config);\n\n\tif (!output) {\n\t\tif (config.devtools) {\n\t\t\tthrow new Error('No file is generated with --devtools.');\n\t\t}\n\n\t\tthrow new Error(`Failed to create ${config.as_html ? 'HTML' : 'PDF'}.`);\n\t}\n\n\tif (output.filename) {\n\t\tif (output.filename === 'stdout') {\n\t\t\tprocess.stdout.write(output.content);\n\t\t} else {\n\t\t\tawait fs.writeFile(output.filename, output.content);\n\t\t}\n\t}\n\n\treturn output;\n};\n", "import test, { before } from 'ava';\nimport { readFileSync, unlinkSync } from 'fs';\nimport { basename, resolve } from 'path';\nimport { getDocument } from 'pdfjs-dist/legacy/build/pdf';\nimport { mdToPdf } from '..';\n\nbefore(() => {\n\tconst filesToDelete = [resolve(__dirname, 'basic', 'api-test.pdf'), resolve(__dirname, 'basic', 'api-test.html')];\n\n\tfor (const file of filesToDelete) {\n\t\ttry {\n\t\t\tunlinkSync(file);\n\t\t} catch (error) {\n\t\t\tif ((error as { code: string }).code !== 'ENOENT') {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n});\n\ntest('compile the basic example to pdf', async (t) => {\n\tconst pdf = await mdToPdf({ path: resolve(__dirname, 'basic', 'test.md') });\n\n\tt.is(pdf.filename, '');\n\tt.truthy(pdf.content);\n\tt.truthy(pdf.content instanceof Buffer);\n});\n\ntest('compile the basic example to pdf and write to disk', async (t) => {\n\tconst pdf = await mdToPdf(\n\t\t{ path: resolve(__dirname, 'basic', 'test.md') },\n\t\t{ dest: resolve(__dirname, 'basic', 'api-test.pdf') },\n\t);\n\n\tt.is(basename(pdf.filename!), 'api-test.pdf');\n\n\tt.notThrows(() => readFileSync(resolve(__dirname, 'basic', 'api-test.pdf'), 'utf-8'));\n});\n\ntest('compile some content to html', async (t) => {\n\tconst html = await mdToPdf({ content: '# Foo' }, { as_html: true });\n\n\tt.is(html.filename, '');\n\tt.is(typeof html.content, 'string');\n\tt.truthy(html.content.includes('<h1 id=\"foo\">Foo</h1>'));\n});\n\ntest('compile the basic example to html and write to disk', async (t) => {\n\tconst html = await mdToPdf(\n\t\t{ path: resolve(__dirname, 'basic', 'test.md') },\n\t\t{ dest: resolve(__dirname, 'basic', 'api-test.html'), as_html: true },\n\t);\n\n\tt.is(basename(html.filename!), 'api-test.html');\n\n\tt.notThrows(() => readFileSync(resolve(__dirname, 'basic', 'api-test.html'), 'utf-8'));\n});\n\ntest('compile the MathJax test', async (t) => {\n\tconst pdf = await mdToPdf({ path: resolve(__dirname, 'mathjax', 'math.md') });\n\n\tt.is(pdf.filename, '');\n\tt.truthy(pdf.content);\n\n\tconst doc = await getDocument({ data: pdf.content }).promise;\n\tconst page = await doc.getPage(1);\n\tconst text = (await page.getTextContent()).items.map(({ str }) => str).join('');\n\n\tt.true(text.startsWith('Formulas with MathJax'));\n\tt.true(text.includes('a\u22600'));\n});\n"], "fixing_code": ["# Markdown to PDF\n\n[![Github Actions Badge](https://github.com/simonhaenisch/md-to-pdf/workflows/Node%20CI/badge.svg)](https://github.com/simonhaenisch/md-to-pdf/actions)\n[![NPM version](https://img.shields.io/npm/v/md-to-pdf.svg)](https://www.npmjs.com/md-to-pdf)\n[![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo)\n\n![Screenshot of markdown file and resulting PDF](https://files-iiiuxybjc.now.sh)\n\n**A simple and hackable CLI tool for converting markdown to pdf**. It uses [Marked](https://github.com/markedjs/marked) to convert `markdown` to `html` and [Puppeteer](https://github.com/GoogleChrome/puppeteer) (headless Chromium) to further convert the `html` to `pdf`. It also uses [highlight.js](https://github.com/isagalaev/highlight.js) for code highlighting. The whole source code of this tool is ~only \\~250 lines of JS~ ~400 lines of Typescript and ~100 lines of CSS, so it is easy to clone and customize.\n\n**Highlights:**\n\n- Concurrently convert multiple Markdown files\n- Watch mode\n- Use your own or remote stylesheets/scripts\n- Front-matter for configuration\n- Headers and Footers\n- Page Breaks\n- Syntax highlighting in code blocks\n- Extend the options of the underlying tools\n- Programmatic API\n- Supports `stdio`\n\n## Installation\n\n**Option 1: NPM**\n\n```sh\nnpm i -g md-to-pdf\n```\n\n**Option 2: Git**\n\nIf you want to have your own copy to hack around with, clone the repository instead:\n\n```sh\ngit clone \"https://github.com/simonhaenisch/md-to-pdf\"\ncd md-to-pdf\nnpm link # or npm i -g\n```\n\nThen the commands `md-to-pdf` and `md2pdf` (as a shorthand) will be globally available in your cli. Use `npm start` to start the TypeScript compiler (`tsc`) in watch mode.\n\n## Update\n\nIf you installed via npm, run `npm i -g md-to-pdf@latest` in your CLI. If you cloned this repository instead, you can simply do a `git pull` to get the latest changes from the master branch, then do `npm run build` to re-build. Unless there have been changes to packages (i. e. `package-lock.json`), you don't need to re-install the package (because NPM 5+ uses symlinks, at least on Unix systems).\n\n## Usage\n\n```\n$ md-to-pdf [options] path/to/file.md\n\nOptions:\n\n  -h, --help ............... Output usage information\n  -v, --version ............ Output version\n  -w, --watch .............. Watch the current file(s) for changes\n  --watch-options .......... Options for Chokidar's watch call\n  --basedir ................ Base directory to be served by the file server\n  --stylesheet ............. Path to a local or remote stylesheet (can be passed multiple times)\n  --css .................... String of styles\n  --document-title ......... Name of the HTML Document.\n  --body-class ............. Classes to be added to the body tag (can be passed multiple times)\n  --page-media-type ........ Media type to emulate the page with (default: screen)\n  --highlight-style ........ Style to be used by highlight.js (default: github)\n  --marked-options ......... Set custom options for marked (as a JSON string)\n  --pdf-options ............ Set custom options for the generated PDF (as a JSON string)\n  --launch-options ......... Set custom launch options for Puppeteer\n  --gray-matter-options .... Set custom options for gray-matter\n  --port ................... Set the port to run the http server on\n  --md-file-encoding ....... Set the file encoding for the markdown file\n  --stylesheet-encoding .... Set the file encoding for the stylesheet\n  --as-html ................ Output as HTML instead\n  --config-file ............ Path to a JSON or JS configuration file\n  --devtools ............... Open the browser with devtools instead of creating PDF\n```\n\nThe pdf is generated into the same directory as the source file and uses the same filename (with `.pdf` extension) by default. Multiple files can be specified by using shell globbing, e. g.:\n\n```sh\nmd-to-pdf ./**/*.md\n```\n\n_(If you use bash, you might need to enable the `globstar` shell option to make recursive globbing work.)_\n\nAlternatively, you can pass the markdown in from `stdin` and pipe its `stdout` into a target file:\n\n```sh\ncat file.md | md-to-pdf > path/to/output.pdf\n```\n\n_Tip: You can concatenate multiple files using `cat file1.md file2.md`._\n\nThe current working directory (`process.cwd()`) serves as the base directory of the file server by default. This can be adjusted with the `--basedir` flag (or equivalent config option).\n\n#### Watch Mode\n\nWatch mode (`--watch`) uses Chokidar's `watch` method on the markdown file. If you're having issues, you can adjust the watch options via the config (`watch_options`) or `--watch-options` CLI arg. The `awaitWriteFinish` option might be particularly useful if you use editor plugins (e. g. TOC generators) that modify and save the file after the initial save. Check out the [Chokidar docs](https://github.com/paulmillr/chokidar#api) for a full list of options.\n\nNote that Preview on macOS does not automatically reload the preview when the file has changed (or at least not reliably). There are PDF viewers available that can check for file changes and offer auto-reload (e. g. [Skim](https://skim-app.sourceforge.io/)'s \"Sync\" feature).\n\n#### Programmatic API\n\nThe programmatic API is very simple: it only exposes one function that accepts either a `path` to or `content` of a markdown file, and an optional config object (which can be used to specify the output file destination).\n\n```js\nconst fs = require('fs');\nconst { mdToPdf } = require('md-to-pdf');\n\n(async () => {\n\tconst pdf = await mdToPdf({ path: 'readme.md' }).catch(console.error);\n\n\tif (pdf) {\n\t\tfs.writeFileSync(pdf.filename, pdf.content);\n\t}\n})();\n```\n\nThe function throws an error if anything goes wrong, which can be handled by catching the rejected promise. If you set the `dest` option in the config, the file will be written to the specified location straight away:\n\n```js\nawait mdToPdf({ content: '# Hello, World' }, { dest: 'path/to/output.pdf' });\n```\n\n#### Page Break\n\nPlace an element with class `page-break` to force a page break at a certain point of the document (uses the CSS rule `page-break-after: always`), e. g.:\n\n```html\n<div class=\"page-break\"></div>\n```\n\n#### Header/Footer\n\nUse `headerTemplate` and `footerTemplate` of Puppeteer's [`page.pdf()` options](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagepdfoptions). If either of the two is set, then `displayHeaderFooter` will be enabled by default. It's possible to inject a few dynamic values like page numbers by using certain class names, as stated in the Puppeteer docs. Please note that for some reason the font-size defaults to 1pt, and you need to make sure to have enough page margin, otherwise your header/footer might be overlayed by your content. If you add a `<style/>` tag in either of the templates, it will be applied to both header and footer.\n\nExample markdown frontmatter config that prints the date in the header and the page number in the footer:\n\n```markdown\n---\npdf_options:\n  format: a4\n  margin: 30mm 20mm\n  printBackground: true\n  headerTemplate: |-\n    <style>\n      section {\n        margin: 0 auto;\n        font-family: system-ui;\n        font-size: 11px;\n      }\n    </style>\n    <section>\n      <span class=\"title\"></span>\n      <span class=\"date\"></span>\n    </section>\n  footerTemplate: |-\n    <section>\n      <div>\n        Page <span class=\"pageNumber\"></span>\n        of <span class=\"totalPages\"></span>\n      </div>\n    </section>\n---\n```\n\nRefer to the [Puppeteer docs](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagepdfoptions) for more info about headers and footers.\n\n#### Formulas\n\nThis can be achieved with [MathJax](https://www.mathjax.org/). A simple example can be found in [`/src/test/mathjax`](/src/test/mathjax).\n\n#### Default and Advanced Options\n\nFor default and advanced options see the following links. The default highlight.js styling for code blocks is `github`. The default PDF options are the A4 format and some margin (see `lib/config.ts` for the full default config).\n\n- [Marked Advanced Options](https://github.com/markedjs/marked/blob/master/docs/USING_ADVANCED.md)\n- [Puppeteer PDF Options](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagepdfoptions)\n- [Puppeteer Launch Options](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#puppeteerlaunchoptions)\n- [highlight.js Styles](https://github.com/isagalaev/highlight.js/tree/master/src/styles)\n\n## Options\n\n| Option                  | Examples                                                              |\n| ----------------------- | --------------------------------------------------------------------- |\n| `--basedir`             | `path/to/folder`                                                      |\n| `--stylesheet`          | `path/to/style.css`, `https://example.org/stylesheet.css`             |\n| `--css`                 | `body { color: tomato; }`                                             |\n| `--document-title`      | `Read me`                                                             |\n| `--body-class`          | `markdown-body`                                                       |\n| `--page-media-type`     | `print`                                                               |\n| `--highlight-style`     | `monokai`, `solarized-light`                                          |\n| `--marked-options`      | `'{ \"gfm\": false }'`                                                  |\n| `--pdf-options`         | `'{ \"format\": \"Letter\", \"margin\": \"20mm\", \"printBackground\": true }'` |\n| `--launch-options`      | `'{ \"args\": [\"--no-sandbox\"] }'`                                      |\n| `--gray-matter-options` | `null`                                                                |\n| `--port`                | `3000`                                                                |\n| `--md-file-encoding`    | `utf-8`, `windows1252`                                                |\n| `--stylesheet-encoding` | `utf-8`, `windows1252`                                                |\n| `--config-file`         | `path/to/config.json`                                                 |\n\n**`margin`:** instead of an object (as stated in the Puppeteer docs), it is also possible to pass a CSS-like string, e. g. `1em` (all), `1in 2in` (top/bottom right/left), `10mm 20mm 30mm` (top right/left bottom) or `1px 2px 3px 4px` (top right bottom left).\n\n**`highlight-style`:** if you set a highlight style with a background color, make sure that `\"printBackground\": true` is set in the pdf options.\n\nThe options can also be set with front-matter or a config file (except `--md-file-encoding` can't be set by front-matter). In that case, remove the leading two hyphens (`--`) from the cli argument name and replace the hyphens (`-`) with underscores (`_`). `--stylesheet` and `--body-class` can be passed multiple times (i. e. to create an array). It's possible to set the output path for the PDF as `dest` in the config. If the same config option exists in multiple places, the priority (from low to high) is: defaults, config file, front-matter, cli arguments.\n\nThe JS engine for front-matter is disabled by default for security reasons. You can enable it by overwriting the default gray-matter options (`--gray-matter-options null`, or `gray_matter_options: undefined` in the API).\n\nExample front-matter:\n\n```markdown\n---\ndest: ./path/to/output.pdf\nstylesheet:\n  - path/to/style.css\nbody_class: markdown-body\nhighlight_style: monokai\npdf_options:\n  format: A5\n  margin: 10mm\n  printBackground: true\n---\n\n# Content\n```\n\nThe config file can be a Javascript file that exports a config object, which gives you the full power of the eco-system (e. g. for advanced header/footer templates); or it can also be a `.json` if you like it simple.\n\nExample `config.js`:\n\n```js\nmodule.exports = {\n\tstylesheet: ['path/to/style.css', 'https://example.org/stylesheet.css'],\n\tcss: `body { color: tomato; }`,\n\tbody_class: 'markdown-body',\n\tmarked_options: {\n\t\theaderIds: false,\n\t\tsmartypants: true,\n\t},\n\tpdf_options: {\n\t\tformat: 'A5',\n\t\tmargin: '20mm',\n\t\tprintBackground: true,\n\t},\n\tstylesheet_encoding: 'utf-8',\n};\n```\n\nExample `config.json`:\n\n```json\n{\n\t\"highlight_style\": \"monokai\",\n\t\"body_class\": [\"dark\", \"content\"]\n}\n```\n\n#### Github Styles\n\nHere is an example front-matter for how to get Github-like output:\n\n```markdown\n---\nstylesheet: https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/2.10.0/github-markdown.min.css\nbody_class: markdown-body\ncss: |-\n  .page-break { page-break-after: always; }\n  .markdown-body { font-size: 11px; }\n  .markdown-body pre > code { white-space: pre-wrap; }\n---\n```\n\n## Security Considerations\n\n### Local file server\n\nBy default, this tool serves the current working directory via a http server on `localhost` on a relatively random port (or the port you specify), and that server gets shut down when the process exits (or as soon as it is killed). Please be aware that for the duration of the process this server will be accessible on your local network, and therefore all files within the served folder that the process has permission to read. So as a suggestion, maybe don't run this in watch mode in your system's root folder. \ud83d\ude09\n\n### Don't trust markdown content you don't control\n\nIf you intend to use this tool to convert user-provided markdown content, please be aware that - as always - you should sanitize it before processing it with `md-to-pdf`.\n\n## Customization/Development\n\nAfter cloning and linking/installing globally (`npm link`), just run the transpiler in watch mode (`npm start`). Then you can start making changes to the files and Typescript will transpile them on save. NPM 5+ uses symlinks for locally installed global packages, so all changes are reflected immediately without needing to re-install the package (except when there have been changes to required packages, then re-install using `npm i`). This also means that you can just do a `git pull` to get the latest version onto your machine.\n\nIdeas, feature requests and PRs are welcome. Just keep it simple! \ud83e\udd13\n\n## Credits\n\nI want to thank the following people:\n\n- [imcvampire](https://github.com/imcvampire) for handing over the npm package name.\n- [Sindre Sorhus](https://github.com/sindresorhus) and [Zeit](https://github.com/zeit) for inspiration on how to write cli tools.\n- [Josh Bruce](https://github.com/joshbruce) for [reviving Marked](https://github.com/markedjs/marked/issues/1106).\n\n## License\n\n[MIT](/license).\n", "#!/usr/bin/env node\n\n// --\n// Packages\n\nimport arg from 'arg';\nimport chalk from 'chalk';\nimport { watch, WatchOptions } from 'chokidar';\nimport getPort from 'get-port';\nimport getStdin from 'get-stdin';\nimport Listr from 'listr';\nimport path from 'path';\nimport { PackageJson } from '.';\nimport { Config, defaultConfig } from './lib/config';\nimport { help } from './lib/help';\nimport { setProcessAndTermTitle } from './lib/helpers';\nimport { convertMdToPdf } from './lib/md-to-pdf';\nimport { closeServer, serveDirectory } from './lib/serve-dir';\nimport { validateNodeVersion } from './lib/validate-node-version';\n\n// --\n// Configure CLI Arguments\n\nexport const cliFlags = arg({\n\t'--help': Boolean,\n\t'--version': Boolean,\n\t'--basedir': String,\n\t'--watch': Boolean,\n\t'--watch-options': String,\n\t'--stylesheet': [String],\n\t'--css': String,\n\t'--document-title': String,\n\t'--body-class': [String],\n\t'--page-media-type': String,\n\t'--highlight-style': String,\n\t'--marked-options': String,\n\t'--html-pdf-options': String,\n\t'--pdf-options': String,\n\t'--launch-options': String,\n\t'--gray-matter-options': String,\n\t'--port': Number,\n\t'--md-file-encoding': String,\n\t'--stylesheet-encoding': String,\n\t'--as-html': Boolean,\n\t'--config-file': String,\n\t'--devtools': Boolean,\n\n\t// aliases\n\t'-h': '--help',\n\t'-v': '--version',\n\t'-w': '--watch',\n});\n\n// --\n// Run\n\nmain(cliFlags, defaultConfig).catch((error) => {\n\tconsole.error(error);\n\tprocess.exit(1);\n});\n\n// --\n// Define Main Function\n\nasync function main(args: typeof cliFlags, config: Config) {\n\tsetProcessAndTermTitle('md-to-pdf');\n\n\tif (!validateNodeVersion()) {\n\t\tthrow new Error('Please use a Node.js version that satisfies the version specified in the engines field.');\n\t}\n\n\tif (args['--version']) {\n\t\treturn console.log((require('../package.json') as PackageJson).version);\n\t}\n\n\tif (args['--help']) {\n\t\treturn help();\n\t}\n\n\t/**\n\t * 1. Get input.\n\t */\n\n\tconst files = args._;\n\n\tconst stdin = await getStdin();\n\n\tif (files.length === 0 && !stdin) {\n\t\treturn help();\n\t}\n\n\t/**\n\t * 2. Read config file and merge it into the config object.\n\t */\n\n\tif (args['--config-file']) {\n\t\ttry {\n\t\t\tconst configFile: Partial<Config> = require(path.resolve(args['--config-file']));\n\n\t\t\tconfig = {\n\t\t\t\t...config,\n\t\t\t\t...configFile,\n\t\t\t\tpdf_options: { ...config.pdf_options, ...configFile.pdf_options },\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.warn(chalk.red(`Warning: couldn't read config file: ${path.resolve(args['--config-file'])}`));\n\t\t\tconsole.warn(error instanceof SyntaxError ? error.message : error);\n\t\t}\n\t}\n\n\t/**\n\t * 3. Start the file server.\n\t */\n\n\tif (args['--basedir']) {\n\t\tconfig.basedir = args['--basedir'];\n\t}\n\n\tconfig.port = args['--port'] ?? (await getPort());\n\n\tconst server = await serveDirectory(config);\n\n\t/**\n\t * 4. Either process stdin or create a Listr task for each file.\n\t */\n\n\tif (stdin) {\n\t\tawait convertMdToPdf({ content: stdin }, config, args)\n\t\t\t.then(async () => closeServer(server))\n\t\t\t.catch(async (error: Error) => {\n\t\t\t\tawait closeServer(server);\n\n\t\t\t\tthrow error;\n\t\t\t});\n\n\t\treturn;\n\t}\n\n\tconst getListrTask = (file: string) => ({\n\t\ttitle: `generating ${args['--as-html'] ? 'HTML' : 'PDF'} from ${chalk.underline(file)}`,\n\t\ttask: async () => convertMdToPdf({ path: file }, config, args),\n\t});\n\n\tawait new Listr(files.map(getListrTask), { concurrent: true, exitOnError: false })\n\t\t.run()\n\t\t.then(() => {\n\t\t\tif (args['--watch']) {\n\t\t\t\tconsole.log(chalk.bgBlue('\\n watching for changes \\n'));\n\n\t\t\t\tconst watchOptions = args['--watch-options']\n\t\t\t\t\t? (JSON.parse(args['--watch-options']) as WatchOptions)\n\t\t\t\t\t: config.watch_options;\n\n\t\t\t\twatch(files, watchOptions).on('change', async (file) =>\n\t\t\t\t\tnew Listr([getListrTask(file)], { exitOnError: false }).run().catch(console.error),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tserver.close();\n\t\t\t}\n\t\t})\n\t\t.catch((error: Error) => {\n\t\t\t/**\n\t\t\t * In watch mode the error needs to be shown immediately because the `main` function's catch handler will never execute.\n\t\t\t *\n\t\t\t * @todo is this correct or does `main` actually finish and the process is just kept alive because of the file server?\n\t\t\t */\n\t\t\tif (args['--watch']) {\n\t\t\t\treturn console.error(error);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t});\n}\n", "import { WatchOptions } from 'chokidar';\nimport { GrayMatterOption } from 'gray-matter';\nimport { MarkedOptions } from 'marked';\nimport { resolve } from 'path';\nimport { FrameAddScriptTagOptions, launch, PDFOptions } from 'puppeteer';\n\nexport const defaultConfig: Config = {\n\tbasedir: process.cwd(),\n\tstylesheet: [resolve(__dirname, '..', '..', 'markdown.css')],\n\tscript: [],\n\tcss: '',\n\tdocument_title: '',\n\tbody_class: [],\n\tpage_media_type: 'screen',\n\thighlight_style: 'github',\n\tmarked_options: {},\n\tpdf_options: {\n\t\tprintBackground: true,\n\t\tformat: 'a4',\n\t\tmargin: {\n\t\t\ttop: '30mm',\n\t\t\tright: '40mm',\n\t\t\tbottom: '30mm',\n\t\t\tleft: '20mm',\n\t\t},\n\t},\n\tlaunch_options: {},\n\tgray_matter_options: {\n\t\tengines: {\n\t\t\tjs: () =>\n\t\t\t\tnew Error(\n\t\t\t\t\t'The JS engine for front-matter is disabled by default for security reasons. You can enable it by configuring graymatter_options.',\n\t\t\t\t),\n\t\t},\n\t},\n\tmd_file_encoding: 'utf-8',\n\tstylesheet_encoding: 'utf-8',\n\tas_html: false,\n\tdevtools: false,\n};\n\n/**\n * In config keys, dashes of cli flag names are replaced with underscores.\n */\nexport type Config = PdfConfig | HtmlConfig;\n\nexport interface PdfConfig extends BasicConfig {\n\t/**\n\t * If true, generate HTML output instead of PDF output. Default: `false`.\n\t */\n\tas_html?: false;\n}\n\nexport interface HtmlConfig extends BasicConfig {\n\t/**\n\t * If true, generate HTML output instead of PDF output. Default: `false`.\n\t */\n\tas_html: true;\n}\n\ninterface BasicConfig {\n\t/**\n\t * Base directory to be served by the file server.\n\t */\n\tbasedir: string;\n\n\t/**\n\t * Optional destination path for the output file (including the extension).\n\t */\n\tdest?: string;\n\n\t/**\n\t * List of css files to use for styling.\n\t *\n\t * @todo change to `FrameAddStyleTagOptions` (will be a breaking change)\n\t */\n\tstylesheet: string[];\n\n\t/**\n\t * Custom css styles.\n\t */\n\tcss: string;\n\n\t/**\n\t * List of scripts to load into the page.\n\t *\n\t * @see https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageaddscripttagoptions\n\t */\n\tscript: FrameAddScriptTagOptions[];\n\n\t/**\n\t * Name of the HTML Document.\n\t */\n\tdocument_title: string;\n\n\t/**\n\t * List of classes for the body tag.\n\t */\n\tbody_class: string[];\n\n\t/**\n\t * Media type to emulate the page with.\n\t */\n\tpage_media_type: 'screen' | 'print';\n\n\t/**\n\t * Highlight.js stylesheet to use (without the .css extension).\n\t *\n\t * @see https://github.com/isagalaev/highlight.js/tree/master/src/styles\n\t */\n\thighlight_style: string;\n\n\t/**\n\t * Options for the Marked parser.\n\t *\n\t * @see https://marked.js.org/#/USING_ADVANCED.md\n\t */\n\tmarked_options: MarkedOptions;\n\n\t/**\n\t * PDF options for Puppeteer.\n\t *\n\t * @see https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagepdfoptions\n\t */\n\tpdf_options: PDFOptions;\n\n\t/**\n\t * Launch options for Puppeteer.\n\t *\n\t * @see https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#puppeteerlaunchoptions\n\t */\n\tlaunch_options: PuppeteerLaunchOptions;\n\n\t/**\n\t * Options for gray-matter (front-matter parser).\n\t *\n\t * @see https://github.com/jonschlinkert/gray-matter#options\n\t */\n\tgray_matter_options: GrayMatterOption<string, any>;\n\n\t/**\n\t * Markdown file encoding. Default: `utf-8`.\n\t */\n\tmd_file_encoding: string;\n\n\t/**\n\t * CSS stylesheet encoding. Default: `utf-8`.\n\t */\n\tstylesheet_encoding: string;\n\n\t/**\n\t * If true, open chromium with devtools instead of saving the pdf. This is\n\t * meant for development only, to inspect the rendered HTML.\n\t */\n\tdevtools: boolean;\n\n\t/**\n\t * Port to run the local server on.\n\t */\n\tport?: number;\n\n\t/**\n\t * Options to pass to Chokidar's `watch` call.\n\t *\n\t * This is specifically useful when running into issues when editor plugins trigger additional saves after the initial save.\n\t */\n\twatch_options?: WatchOptions;\n}\n\nexport type PuppeteerLaunchOptions = Parameters<typeof launch>[0];\n", "import chalk from 'chalk';\n\nconst helpText = `\n  ${chalk.bold('$ md-to-pdf')} [options] path/to/file.md\n\n  ${chalk.dim.underline.bold('Options:')}\n\n    -h, --help ${chalk.dim('...............')} Output usage information\n    -v, --version ${chalk.dim('............')} Output version\n    -w, --watch ${chalk.dim('..............')} Watch the current file(s) for changes\n\t\t--watch-options ${chalk.dim('..........')} Options for Chokidar's watch call\n    --basedir ${chalk.dim('................')} Base directory to be served by the file server\n    --stylesheet ${chalk.dim('.............')} Path to a local or remote stylesheet (can be passed multiple times)\n    --css ${chalk.dim('....................')} String of styles\n    --document-title ${chalk.dim('.........')} Name of the HTML Document.\n    --body-class ${chalk.dim('.............')} Classes to be added to the body tag (can be passed multiple times)\n    --page-media-type ${chalk.dim('........')} Media type to emulate the page with (default: screen)\n    --highlight-style ${chalk.dim('........')} Style to be used by highlight.js (default: github)\n    --marked-options ${chalk.dim('.........')} Set custom options for marked (as a JSON string)\n    --pdf-options ${chalk.dim('............')} Set custom options for the generated PDF (as a JSON string)\n    --launch-options ${chalk.dim('.........')} Set custom launch options for Puppeteer\n\t\t--gray-matter-options ${chalk.dim('....')} Set custom options for gray-matter\n    --port ${chalk.dim('...................')} Set the port to run the http server on\n    --md-file-encoding ${chalk.dim('.......')} Set the file encoding for the markdown file\n    --stylesheet-encoding ${chalk.dim('....')} Set the file encoding for the stylesheet\n    --as-html ${chalk.dim('................')} Output as HTML instead\n    --config-file ${chalk.dim('............')} Path to a JSON or JS configuration file\n    --devtools ${chalk.dim('...............')} Open the browser with devtools instead of creating PDF\n\n  ${chalk.dim.underline.bold('Examples:')}\n\n  ${chalk.gray('\u2013')} Convert ./file.md and save to ./file.pdf\n\n    ${chalk.cyan('$ md-to-pdf file.md')}\n\n  ${chalk.gray('\u2013')} Convert all markdown files in current directory\n\n    ${chalk.cyan('$ md-to-pdf ./*.md')}\n\n  ${chalk.gray('\u2013')} Convert all markdown files in current directory recursively\n\n    ${chalk.cyan('$ md-to-pdf ./**/*.md')}\n\n  ${chalk.gray('\u2013')} Convert and enable watch mode\n\n    ${chalk.cyan('$ md-to-pdf ./*.md -w')}\n\n  ${chalk.gray('\u2013')} Convert and enable watch mode with custom options\n\n    ${chalk.cyan('$ md-to-pdf ./*.md --watch --watch-options \\'{ \"atomic\": true }\\'')}\n\n  ${chalk.gray('\u2013')} Convert path/to/file.md with a different base directory\n\n    ${chalk.cyan('$ md-to-pdf path/to/file.md --basedir path')}\n\n  ${chalk.gray('\u2013')} Convert file.md using custom-markdown.css\n\n    ${chalk.cyan('$ md-to-pdf file.md --stylesheet custom-markdown.css')}\n\n  ${chalk.gray('\u2013')} Convert file.md using the Monokai theme for code highlighting\n\n    ${chalk.cyan('$ md-to-pdf file.md --highlight-style monokai')}\n\n  ${chalk.gray('\u2013')} Convert file.md using custom page options\n\n    ${chalk.cyan('$ md-to-pdf file.md --pdf-options \\'{ \"format\": \"Letter\" }\\'')}\n\n  ${chalk.gray('\u2013')} Convert file.md but save the intermediate HTML instead\n\n    ${chalk.cyan('$ md-to-pdf file.md --as-html')}\n`;\n\nexport const help = () => console.log(helpText);\n", "import { promises as fs } from 'fs';\nimport grayMatter from 'gray-matter';\nimport { dirname, resolve } from 'path';\nimport { Config } from './config';\nimport { generateOutput } from './generate-output';\nimport { getHtml } from './get-html';\nimport { getOutputFilePath } from './get-output-file-path';\nimport { getMarginObject } from './helpers';\nimport { readFile } from './read-file';\n\ntype CliArgs = typeof import('../cli').cliFlags;\n\n/**\n * Convert markdown to pdf.\n */\nexport const convertMdToPdf = async (\n\tinput: { path: string } | { content: string },\n\tconfig: Config,\n\targs: CliArgs = {} as CliArgs,\n) => {\n\tconst mdFileContent =\n\t\t'content' in input\n\t\t\t? input.content\n\t\t\t: await readFile(input.path, args['--md-file-encoding'] ?? config.md_file_encoding);\n\n\tconst { content: md, data: frontMatterConfig } = grayMatter(\n\t\tmdFileContent,\n\t\targs['--gray-matter-options'] ? JSON.parse(args['--gray-matter-options']) : config.gray_matter_options,\n\t);\n\n\t// merge front-matter config\n\tif (frontMatterConfig instanceof Error) {\n\t\tconsole.warn('Warning: the front-matter was ignored because it could not be parsed:\\n', frontMatterConfig);\n\t} else {\n\t\tconfig = {\n\t\t\t...config,\n\t\t\t...(frontMatterConfig as Config),\n\t\t\tpdf_options: { ...config.pdf_options, ...frontMatterConfig.pdf_options },\n\t\t};\n\t}\n\n\tconst { headerTemplate, footerTemplate, displayHeaderFooter } = config.pdf_options;\n\n\tif ((headerTemplate || footerTemplate) && displayHeaderFooter === undefined) {\n\t\tconfig.pdf_options.displayHeaderFooter = true;\n\t}\n\n\tconst arrayOptions = ['body_class', 'script', 'stylesheet'] as const;\n\n\t// sanitize frontmatter array options\n\tfor (const option of arrayOptions) {\n\t\tif (!Array.isArray(config[option])) {\n\t\t\tconfig[option] = [config[option]].filter(Boolean) as any;\n\t\t}\n\t}\n\n\tconst jsonArgs = new Set(['--marked-options', '--pdf-options', '--launch-options']);\n\n\t// merge cli args into config\n\tfor (const arg of Object.entries(args)) {\n\t\tconst [argKey, argValue] = arg as [string, string];\n\t\tconst key = argKey.slice(2).replace(/-/g, '_');\n\n\t\t(config as Record<string, any>)[key] = jsonArgs.has(argKey) ? JSON.parse(argValue) : argValue;\n\t}\n\n\t// sanitize the margin in pdf_options\n\tif (typeof config.pdf_options.margin === 'string') {\n\t\tconfig.pdf_options.margin = getMarginObject(config.pdf_options.margin);\n\t}\n\n\t// set output destination\n\tif (config.dest === undefined) {\n\t\tconfig.dest = 'path' in input ? getOutputFilePath(input.path, config.as_html ? 'html' : 'pdf') : 'stdout';\n\t}\n\n\tconst highlightStylesheet = resolve(\n\t\tdirname(require.resolve('highlight.js')),\n\t\t'..',\n\t\t'styles',\n\t\t`${config.highlight_style}.css`,\n\t);\n\n\tconfig.stylesheet = [...new Set([...config.stylesheet, highlightStylesheet])];\n\n\tconst html = getHtml(md, config);\n\n\tconst relativePath = 'path' in input ? resolve(input.path).replace(config.basedir, '') : '/';\n\n\tconst output = await generateOutput(html, relativePath, config);\n\n\tif (!output) {\n\t\tif (config.devtools) {\n\t\t\tthrow new Error('No file is generated with --devtools.');\n\t\t}\n\n\t\tthrow new Error(`Failed to create ${config.as_html ? 'HTML' : 'PDF'}.`);\n\t}\n\n\tif (output.filename) {\n\t\tif (output.filename === 'stdout') {\n\t\t\tprocess.stdout.write(output.content);\n\t\t} else {\n\t\t\tawait fs.writeFile(output.filename, output.content);\n\t\t}\n\t}\n\n\treturn output;\n};\n", "import test, { before } from 'ava';\nimport { readFileSync, unlinkSync } from 'fs';\nimport { basename, resolve } from 'path';\nimport { getDocument } from 'pdfjs-dist/legacy/build/pdf';\nimport { mdToPdf } from '..';\n\nconst getPdfTextContent = async (content: Buffer) => {\n\tconst doc = await getDocument({ data: content }).promise;\n\tconst page = await doc.getPage(1);\n\tconst textContent = (await page.getTextContent()).items.map(({ str }) => str).join('');\n\n\treturn textContent;\n};\n\nbefore(() => {\n\tconst filesToDelete = [resolve(__dirname, 'basic', 'api-test.pdf'), resolve(__dirname, 'basic', 'api-test.html')];\n\n\tfor (const file of filesToDelete) {\n\t\ttry {\n\t\t\tunlinkSync(file);\n\t\t} catch (error) {\n\t\t\tif ((error as { code: string }).code !== 'ENOENT') {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n});\n\ntest('compile the basic example to pdf', async (t) => {\n\tconst pdf = await mdToPdf({ path: resolve(__dirname, 'basic', 'test.md') });\n\n\tt.is(pdf.filename, '');\n\tt.truthy(pdf.content);\n\tt.truthy(pdf.content instanceof Buffer);\n});\n\ntest('compile the basic example to pdf and write to disk', async (t) => {\n\tconst pdf = await mdToPdf(\n\t\t{ path: resolve(__dirname, 'basic', 'test.md') },\n\t\t{ dest: resolve(__dirname, 'basic', 'api-test.pdf') },\n\t);\n\n\tt.is(basename(pdf.filename!), 'api-test.pdf');\n\n\tt.notThrows(() => readFileSync(resolve(__dirname, 'basic', 'api-test.pdf'), 'utf-8'));\n});\n\ntest('compile some content to html', async (t) => {\n\tconst html = await mdToPdf({ content: '# Foo' }, { as_html: true });\n\n\tt.is(html.filename, '');\n\tt.is(typeof html.content, 'string');\n\tt.truthy(html.content.includes('<h1 id=\"foo\">Foo</h1>'));\n});\n\ntest('compile the basic example to html and write to disk', async (t) => {\n\tconst html = await mdToPdf(\n\t\t{ path: resolve(__dirname, 'basic', 'test.md') },\n\t\t{ dest: resolve(__dirname, 'basic', 'api-test.html'), as_html: true },\n\t);\n\n\tt.is(basename(html.filename!), 'api-test.html');\n\n\tt.notThrows(() => readFileSync(resolve(__dirname, 'basic', 'api-test.html'), 'utf-8'));\n});\n\ntest('compile the MathJax test', async (t) => {\n\tconst pdf = await mdToPdf({ path: resolve(__dirname, 'mathjax', 'math.md') });\n\n\tt.is(pdf.filename, '');\n\tt.truthy(pdf.content);\n\n\tconst textContent = await getPdfTextContent(pdf.content);\n\n\tt.true(textContent.startsWith('Formulas with MathJax'));\n\tt.true(textContent.includes('a\u22600'));\n});\n\ntest('the JS engine is disabled by default', async (t) => {\n\tconst css = '`body::before { display: block; content: \"${\"i am injected\"}\"}`'; // eslint-disable-line no-template-curly-in-string\n\n\tconst pdf = await mdToPdf({ content: `---js\\n{ css: ${css} }\\n---` });\n\n\tconst textContent = await getPdfTextContent(pdf.content);\n\n\tt.is(textContent, '');\n});\n\ntest('the JS engine for front-matter can be enabled', async (t) => {\n\tconst css = '`body::before { display: block; content: \"${\"i am injected\"}\"}`'; // eslint-disable-line no-template-curly-in-string\n\n\tconst pdf = await mdToPdf({ content: `---js\\n{ css: ${css} }\\n---` }, { gray_matter_options: undefined });\n\n\tconst textContent = await getPdfTextContent(pdf.content);\n\n\tt.is(textContent, 'i am injected');\n});\n"], "filenames": ["readme.md", "src/cli.ts", "src/lib/config.ts", "src/lib/help.ts", "src/lib/md-to-pdf.ts", "src/test/api.spec.ts"], "buggy_code_start_loc": [68, 39, 1, 21, 26, 5], "buggy_code_end_loc": [272, 39, 125, 21, 34, 71], "fixing_code_start_loc": [69, 40, 2, 22, 26, 6], "fixing_code_end_loc": [283, 41, 142, 23, 41, 98], "type": "NVD-CWE-noinfo", "message": "The package md-to-pdf before 5.0.0 are vulnerable to Remote Code Execution (RCE) due to utilizing the library gray-matter to parse front matter content, without disabling the JS engine.", "other": {"cve": {"id": "CVE-2021-23639", "sourceIdentifier": "report@snyk.io", "published": "2021-12-10T20:15:08.387", "lastModified": "2021-12-14T18:48:22.543", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package md-to-pdf before 5.0.0 are vulnerable to Remote Code Execution (RCE) due to utilizing the library gray-matter to parse front matter content, without disabling the JS engine."}, {"lang": "es", "value": "El paquete md-to-pdf versiones anteriores a 5.0.0, es vulnerable a una Ejecuci\u00f3n de C\u00f3digo Remota (RCE) debido al uso de la biblioteca gray-matter para analizar el contenido del front matter, sin deshabilitar el motor JS"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:markdown_to_pdf_project:markdown_to_pdf:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "5.0.0", "matchCriteriaId": "3FF5044C-A0C6-4CF9-AB44-E51BF070AF85"}]}]}], "references": [{"url": "https://github.com/simonhaenisch/md-to-pdf/commit/a716259c548c82fa1d3b14a3422e9100619d2d8a", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/simonhaenisch/md-to-pdf/issues/99", "source": "report@snyk.io", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-MDTOPDF-1657880", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/simonhaenisch/md-to-pdf/commit/a716259c548c82fa1d3b14a3422e9100619d2d8a"}}