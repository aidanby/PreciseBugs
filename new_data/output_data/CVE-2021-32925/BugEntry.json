{"buggy_code": ["<?php\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\ExtraFieldOptions;\nuse ChamiloSession as Session;\n\n/**\n * This tool allows platform admins to add users by uploading a CSV or XML file.\n */\n$cidReset = true;\nrequire_once __DIR__.'/../inc/global.inc.php';\n\n// Set this option to true to enforce strict purification for usenames.\n$purification_option_for_usernames = false;\n$userId = api_get_user_id();\n\napi_protect_admin_script(true, null);\napi_protect_limit_for_session_admin();\nset_time_limit(0);\n\n/**\n * @param array $users\n * @param bool  $checkUniqueEmail\n *\n * @return array\n */\nfunction validate_data($users, $checkUniqueEmail = false)\n{\n    global $defined_auth_sources;\n    $usernames = [];\n\n    // 1. Check if mandatory fields are set.\n    $mandatory_fields = ['LastName', 'FirstName'];\n    if (api_get_setting('registration', 'email') == 'true' || $checkUniqueEmail) {\n        $mandatory_fields[] = 'Email';\n    }\n\n    $classExistList = [];\n    $usergroup = new UserGroup();\n    foreach ($users as &$user) {\n        $user['has_error'] = false;\n        $user['message'] = '';\n\n        foreach ($mandatory_fields as $field) {\n            if (empty($user[$field])) {\n                $user['message'] .= Display::return_message(get_lang($field.'Mandatory'), 'warning');\n                $user['has_error'] = true;\n            }\n        }\n\n        $username = isset($user['UserName']) ? $user['UserName'] : '';\n        // 2. Check username, first, check whether it is empty.\n        if (!UserManager::is_username_empty($username)) {\n            // 2.1. Check whether username is too long.\n            if (UserManager::is_username_too_long($username)) {\n                $user['message'] .= Display::return_message(get_lang('UserNameTooLong'), 'warning');\n                $user['has_error'] = true;\n            }\n            // 2.1.1\n            /*$hasDash = strpos($username, '-');\n            if ($hasDash !== false) {\n                $user['message'] .= Display::return_message(get_lang('UserNameHasDash'), 'warning');\n                $user['has_error'] = true;\n            }*/\n            // 2.2. Check whether the username was used twice in import file.\n            if (isset($usernames[$username])) {\n                $user['message'] .= Display::return_message(get_lang('UserNameUsedTwice'), 'warning');\n                $user['has_error'] = true;\n            }\n            $usernames[$username] = 1;\n            // 2.3. Check whether username is already occupied.\n            if (!UserManager::is_username_available($username)) {\n                $user['message'] .= Display::return_message(get_lang('UserNameNotAvailable'), 'warning');\n                $user['has_error'] = true;\n            }\n\n            if ('true' === api_get_setting('login_is_email')) {\n                if (false === api_valid_email($username)) {\n                    $user['message'] .= Display::return_message(get_lang('PleaseEnterValidEmail'), 'warning');\n                    $user['has_error'] = true;\n                }\n            } else {\n                if (!UserManager::is_username_valid($username)) {\n                    $user['message'] .= Display::return_message(get_lang('UsernameWrong'), 'warning');\n                    $user['has_error'] = true;\n                }\n            }\n        }\n\n        if (isset($user['Email'])) {\n            $result = api_valid_email($user['Email']);\n            if ($result === false) {\n                $user['message'] .= Display::return_message(get_lang('PleaseEnterValidEmail'), 'warning');\n                $user['has_error'] = true;\n            }\n        }\n\n        if ($checkUniqueEmail) {\n            if (isset($user['Email'])) {\n                $userFromEmail = api_get_user_info_from_email($user['Email']);\n                if (!empty($userFromEmail)) {\n                    $user['message'] .= Display::return_message(get_lang('EmailUsedTwice'), 'warning');\n                    $user['has_error'] = true;\n                }\n            }\n        }\n\n        // 3. Check status.\n        if (isset($user['Status']) && !api_status_exists($user['Status'])) {\n            $user['message'] .= Display::return_message(get_lang('WrongStatus'), 'warning');\n            $user['has_error'] = true;\n        }\n\n        // 4. Check ClassId\n        if (!empty($user['ClassId'])) {\n            $classId = explode('|', trim($user['ClassId']));\n            foreach ($classId as $id) {\n                if (in_array($id, $classExistList)) {\n                    continue;\n                }\n                $info = $usergroup->get($id);\n                if (empty($info)) {\n                    $user['message'] .= Display::return_message(\n                        sprintf(get_lang('ClassIdDoesntExists'), $id),\n                        'warning'\n                    );\n                    $user['has_error'] = true;\n                } else {\n                    $classExistList[] = $info['id'];\n                }\n            }\n        }\n\n        // 5. Check authentication source\n        if (!empty($user['AuthSource'])) {\n            if (!in_array($user['AuthSource'], $defined_auth_sources)) {\n                $user['message'] .= Display::return_message(get_lang('AuthSourceNotAvailable'), 'warning');\n                $user['has_error'] = true;\n            }\n        }\n    }\n\n    return $users;\n}\n\n/**\n * Add missing user-information (which isn't required, like password, username etc).\n *\n * @param array $user\n */\nfunction complete_missing_data($user)\n{\n    global $purification_option_for_usernames;\n\n    $username = isset($user['UserName']) ? $user['UserName'] : '';\n\n    // 1. Create a username if necessary.\n    if (UserManager::is_username_empty($username)) {\n        $user['UserName'] = UserManager::create_unique_username(\n            $user['FirstName'],\n            $user['LastName']\n        );\n    } else {\n        $user['UserName'] = UserManager::purify_username(\n            $user['UserName'],\n            $purification_option_for_usernames\n        );\n    }\n\n    // 2. Generate a password if necessary.\n    if (empty($user['Password'])) {\n        $user['Password'] = api_generate_password();\n    }\n    // 3. Set status if not allready set.\n    if (empty($user['Status'])) {\n        $user['Status'] = 'user';\n    }\n    // 4. Set authsource if not allready set.\n    if (empty($user['AuthSource'])) {\n        $user['AuthSource'] = PLATFORM_AUTH_SOURCE;\n    }\n\n    if (empty($user['ExpiryDate'])) {\n        $user['ExpiryDate'] = '';\n    }\n\n    if (!isset($user['OfficialCode'])) {\n        $user['OfficialCode'] = '';\n    }\n\n    if (!isset($user['language'])) {\n        $user['language'] = '';\n    }\n\n    if (!isset($user['PhoneNumber'])) {\n        $user['PhoneNumber'] = '';\n    }\n\n    if (!isset($user['OfficialCode'])) {\n        $user['OfficialCode'] = '';\n    }\n\n    return $user;\n}\n\n/**\n * Save the imported data.\n *\n * @param array $users    List of users\n * @param bool  $sendMail\n *\n * @uses \\global variable $inserted_in_course, which returns the list of\n * courses the user was inserted in\n */\nfunction save_data($users, $sendMail = false)\n{\n    global $inserted_in_course, $extra_fields;\n\n    // Not all scripts declare the $inserted_in_course array (although they should).\n    if (!isset($inserted_in_course)) {\n        $inserted_in_course = [];\n    }\n\n    $usergroup = new UserGroup();\n    if (is_array($users)) {\n        $efo = new ExtraFieldOption('user');\n\n        $optionsByField = [];\n\n        foreach ($users as &$user) {\n            if ($user['has_error']) {\n                continue;\n            }\n\n            $user = complete_missing_data($user);\n            $user['Status'] = api_status_key($user['Status']);\n            $redirection = isset($user['Redirection']) ? $user['Redirection'] : '';\n\n            $user_id = UserManager::create_user(\n                $user['FirstName'],\n                $user['LastName'],\n                $user['Status'],\n                $user['Email'],\n                $user['UserName'],\n                $user['Password'],\n                $user['OfficialCode'],\n                $user['language'],\n                $user['PhoneNumber'],\n                '',\n                $user['AuthSource'],\n                $user['ExpiryDate'],\n                1,\n                0,\n                null,\n                null,\n                $sendMail,\n                false,\n                '',\n                false,\n                null,\n                null,\n                null,\n                $redirection\n            );\n\n            if ($user_id) {\n                $returnMessage = Display::return_message(get_lang('UserAdded'), 'success');\n\n                if (isset($user['Courses']) && is_array($user['Courses'])) {\n                    foreach ($user['Courses'] as $course) {\n                        if (CourseManager::course_exists($course)) {\n                            $result = CourseManager::subscribeUser($user_id, $course, $user['Status']);\n                            if ($result) {\n                                $course_info = api_get_course_info($course);\n                                $inserted_in_course[$course] = $course_info['title'];\n                            }\n                        }\n                    }\n                }\n\n                if (isset($user['Sessions']) && is_array($user['Sessions'])) {\n                    foreach ($user['Sessions'] as $sessionId) {\n                        $sessionInfo = api_get_session_info($sessionId);\n                        if (!empty($sessionInfo)) {\n                            SessionManager::subscribeUsersToSession(\n                                $sessionId,\n                                [$user_id],\n                                SESSION_VISIBLE_READ_ONLY,\n                                false\n                            );\n                        }\n                    }\n                }\n\n                if (!empty($user['ClassId'])) {\n                    $classId = explode('|', trim($user['ClassId']));\n                    foreach ($classId as $id) {\n                        $usergroup->subscribe_users_to_usergroup($id, [$user_id], false);\n                    }\n                }\n\n                // We are sure that the extra field exists.\n                foreach ($extra_fields as $extras) {\n                    if (!isset($user[$extras[1]])) {\n                        continue;\n                    }\n\n                    $key = $extras[1];\n                    $value = $user[$key];\n\n                    if (!array_key_exists($key, $optionsByField)) {\n                        $optionsByField[$key] = $efo->getOptionsByFieldVariable($key);\n                    }\n\n                    /** @var ExtraFieldOptions $option */\n                    foreach ($optionsByField[$key] as $option) {\n                        if ($option->getDisplayText() === $value) {\n                            $value = $option->getValue();\n                        }\n                    }\n\n                    UserManager::update_extra_field_value($user_id, $key, $value);\n                }\n            } else {\n                $returnMessage = Display::return_message(get_lang('Error'), 'warning');\n            }\n            $user['message'] = $returnMessage;\n        }\n    }\n\n    return $users;\n}\n\n/**\n * @param array  $users\n * @param string $fileName\n * @param int    $sendEmail\n * @param bool   $checkUniqueEmail\n * @param bool   $resumeImport\n *\n * @return array\n */\nfunction parse_csv_data($users, $fileName, $sendEmail = 0, $checkUniqueEmail = true, $resumeImport = false)\n{\n    $usersFromOrigin = $users;\n    $allowRandom = api_get_configuration_value('generate_random_login');\n    if ($allowRandom) {\n        $factory = new RandomLib\\Factory();\n        $generator = $factory->getLowStrengthGenerator();\n        $chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    }\n\n    $readMax = 50;\n    $userId = api_get_user_id();\n    $logMessages = '';\n    $importData = Session::read('user_import_data_'.$userId);\n    if (!empty($importData)) {\n        $counter = $importData['counter'];\n        $users = $importData['complete_list'];\n        $users = array_splice($users, $counter, $readMax);\n        $logMessages = $importData['log_messages'];\n    } else {\n        $users = array_splice($users, 0, $readMax);\n    }\n\n    if ($resumeImport === false) {\n        $users = $usersFromOrigin;\n    }\n\n    $counter = 0;\n    foreach ($users as $index => $user) {\n        if ($resumeImport) {\n            if ($counter >= $readMax) {\n                $users = array_splice($users, $counter, $readMax);\n                break;\n            }\n        }\n        $counter++;\n        if (empty($user['UserName'])) {\n            if ($allowRandom) {\n                $username = $generator->generateString(10, $chars);\n                $user['UserName'] = $username;\n            }\n        }\n        if (isset($user['Courses'])) {\n            $user['Courses'] = explode('|', trim($user['Courses']));\n        }\n\n        if (isset($user['Sessions'])) {\n            $user['Sessions'] = explode('|', trim($user['Sessions']));\n        }\n\n        // Lastname is needed.\n        if (!isset($user['LastName']) || (isset($user['LastName']) && empty($user['LastName']))) {\n            unset($users[$index]);\n            continue;\n        }\n\n        // FirstName is needed.\n        if (!isset($user['FirstName']) || (isset($user['FirstName']) && empty($user['FirstName']))) {\n            unset($users[$index]);\n            continue;\n        }\n\n        $users[$index] = $user;\n    }\n\n    $globalCounter = $counter;\n    if (!empty($importData)) {\n        $globalCounter = $importData['counter'] + $counter;\n    }\n\n    $importData = [\n        'complete_list' => $usersFromOrigin,\n        'filename' => $fileName,\n        'counter' => $globalCounter,\n        'check_unique_email' => $checkUniqueEmail,\n        'send_email' => $sendEmail,\n        'date' => api_get_utc_datetime(),\n        'log_messages' => $logMessages,\n        'resume' => $resumeImport,\n    ];\n\n    Session::write('user_import_data_'.$userId, $importData);\n\n    return $users;\n}\n\n/**\n * Read the XML-file.\n *\n * @param string $file Path to the XML-file\n *\n * @return array All user information read from the file\n */\nfunction parse_xml_data($file)\n{\n    $crawler = new \\Symfony\\Component\\DomCrawler\\Crawler();\n    $crawler->addXmlContent(file_get_contents($file));\n    $crawler = $crawler->filter('Contacts > Contact ');\n    $array = [];\n    foreach ($crawler as $domElement) {\n        $row = [];\n        foreach ($domElement->childNodes as $node) {\n            if ($node->nodeName != '#text') {\n                $row[$node->nodeName] = $node->nodeValue;\n            }\n        }\n        if (!empty($row)) {\n            $array[] = $row;\n        }\n    }\n\n    return $array;\n}\n\n/**\n * @param array $users\n * @param bool  $sendMail\n */\nfunction processUsers(&$users, $sendMail)\n{\n    $users = save_data($users, $sendMail);\n\n    $warningMessage = '';\n    if (!empty($users)) {\n        $table = new HTML_Table(['class' => 'table table-responsive']);\n        $headers = [\n            get_lang('User'),\n            get_lang('Status'),\n        ];\n        $row = 0;\n        $column = 0;\n        foreach ($headers as $header) {\n            $table->setHeaderContents($row, $column, $header);\n            $column++;\n        }\n        $row++;\n        foreach ($users as $user) {\n            $column = 0;\n            $email = isset($user['Email']) ? ' - '.$user['Email'] : null;\n            $userData =\n                '<strong>'.$user['UserName'].'</strong> - '.\n                api_get_person_name(\n                    $user['FirstName'],\n                    $user['LastName']\n                ).' '.$email;\n            $table->setCellContents($row, $column, $userData);\n            $table->setCellContents($row, ++$column, $user['message']);\n            $row++;\n        }\n        $warningMessage = $table->toHtml();\n    }\n\n    // if the warning message is too long then we display the warning message trough a session\n    //Display::addFlash(Display::return_message(get_lang('FileImported'), 'confirmation', false));\n\n    $importData = Session::read('user_import_data_'.api_get_user_id());\n    if (!empty($importData)) {\n        if (isset($importData['log_messages'])) {\n            $importData['log_messages'] .= $warningMessage;\n        } else {\n            $importData['log_messages'] = $warningMessage;\n        }\n        Session::write('user_import_data_'.api_get_user_id(), $importData);\n    }\n}\n\n$this_section = SECTION_PLATFORM_ADMIN;\n$defined_auth_sources[] = PLATFORM_AUTH_SOURCE;\nif (isset($extAuthSource) && is_array($extAuthSource)) {\n    $defined_auth_sources = array_merge($defined_auth_sources, array_keys($extAuthSource));\n}\n\n$tool_name = get_lang('ImportUserListXMLCSV');\n$interbreadcrumb[] = ['url' => 'index.php', 'name' => get_lang('PlatformAdmin')];\n$reloadImport = (isset($_REQUEST['reload_import']) && (int) $_REQUEST['reload_import'] === 1);\n\n$extra_fields = UserManager::get_extra_fields(0, 0, 5, 'ASC', true);\n\nif (isset($_POST['formSent']) && $_POST['formSent'] && $_FILES['import_file']['size'] !== 0) {\n    $file_type = $_POST['file_type'];\n    Security::clear_token();\n    $tok = Security::get_token();\n    $allowed_file_mimetype = ['csv', 'xml'];\n    $error_kind_file = true;\n\n    $checkUniqueEmail = isset($_POST['check_unique_email']) ? $_POST['check_unique_email'] : null;\n    $sendMail = $_POST['sendMail'] ? true : false;\n    $resume = isset($_POST['resume_import']) ? true : false;\n    $uploadInfo = pathinfo($_FILES['import_file']['name']);\n    $ext_import_file = $uploadInfo['extension'];\n\n    $users = [];\n    if (in_array($ext_import_file, $allowed_file_mimetype)) {\n        if (strcmp($file_type, 'csv') === 0 &&\n            $ext_import_file == $allowed_file_mimetype[0]\n        ) {\n            Session::erase('user_import_data_'.$userId);\n            $users = Import::csvToArray($_FILES['import_file']['tmp_name']);\n            $users = parse_csv_data(\n                $users,\n                $_FILES['import_file']['name'],\n                $sendMail,\n                $checkUniqueEmail,\n                $resume\n            );\n            $users = validate_data($users, $checkUniqueEmail);\n            $error_kind_file = false;\n        } elseif (strcmp($file_type, 'xml') === 0 && $ext_import_file == $allowed_file_mimetype[1]) {\n            $users = parse_xml_data($_FILES['import_file']['tmp_name']);\n            $users = validate_data($users, $checkUniqueEmail);\n            $error_kind_file = false;\n        }\n\n        processUsers($users, $sendMail);\n\n        if ($error_kind_file) {\n            Display::addFlash(\n                Display::return_message(\n                    get_lang('YouMustImportAFileAccordingToSelectedOption'),\n                    'error',\n                    false\n                )\n            );\n        } else {\n            $reload = '';\n            if ($resume) {\n                $reload = '?reload_import=1';\n            }\n            header('Location: '.api_get_self().$reload);\n            exit;\n        }\n    } else {\n        Display::addFlash(\n            Display::return_message(\n                get_lang('YouMustImportAFileAccordingToSelectedOption'),\n                'error',\n                false\n            )\n        );\n\n        header('Location: '.api_get_self());\n        exit;\n    }\n}\n\n$importData = Session::read('user_import_data_'.$userId);\n\n$formContinue = false;\n$resumeStop = true;\nif (!empty($importData)) {\n    $isResume = $importData['resume'];\n\n    $formContinue = new FormValidator('user_import_continue', 'post', api_get_self());\n    $label = get_lang('Results');\n    if ($isResume) {\n        $label = get_lang('ContinueLastImport');\n    }\n    $formContinue->addHeader($label);\n    $formContinue->addLabel(get_lang('File'), $importData['filename']);\n\n    $resumeStop = true;\n    if ($isResume) {\n        $totalUsers = isset($importData['complete_list']) ? count($importData['complete_list']) : 0;\n        $counter = isset($importData['counter']) ? $importData['counter'] : 0;\n        $bar = '';\n        if (!empty($totalUsers)) {\n            $bar = Display::bar_progress($counter / $totalUsers * 100);\n        }\n        $formContinue->addLabel(get_lang('Status'), $bar);\n        $formContinue->addLabel(\n            get_lang('UsersAdded'),\n            $importData['counter'].' / '.count($importData['complete_list'])\n        );\n    } else {\n        $formContinue->addLabel(\n            get_lang('Users'),\n            count($importData['complete_list'])\n        );\n    }\n\n    $formContinue->addLabel(\n        get_lang('CheckUniqueEmail'),\n        $importData['check_unique_email'] ? get_lang('Yes') : get_lang('No')\n    );\n    $formContinue->addLabel(get_lang('SendMailToUsers'), $importData['send_email'] ? get_lang('Yes') : get_lang('No'));\n    $formContinue->addLabel(get_lang('Date'), Display::dateToStringAgoAndLongDate($importData['date']));\n\n    if ($isResume) {\n        $resumeStop = $importData['counter'] >= count($importData['complete_list']);\n        if ($resumeStop == false) {\n            $formContinue->addButtonImport(get_lang('ContinueImport'), 'import_continue');\n        }\n    }\n\n    $formContinue->addHtml('<br />'.$importData['log_messages']);\n\n    if ($formContinue->validate()) {\n        $users = parse_csv_data(\n            $importData['complete_list'],\n            $importData['filename'],\n            $importData['send_email'],\n            $importData['check_unique_email'],\n            true\n        );\n        $users = validate_data($users, $importData['check_unique_email']);\n\n        processUsers($users, $importData['send_email']);\n\n        $reload = '';\n        if ($isResume && $resumeStop === false) {\n            $reload = '?reload_import=1';\n        }\n\n        header('Location: '.api_get_self().$reload);\n        exit;\n    }\n}\n\nDisplay::display_header($tool_name);\n\n$form = new FormValidator('user_import', 'post', api_get_self());\n$form->addHeader($tool_name);\n$form->addElement('hidden', 'formSent');\n$form->addElement('file', 'import_file', get_lang('ImportFileLocation'));\n$group = [\n    $form->createElement(\n        'radio',\n        'file_type',\n        '',\n        'CSV (<a href=\"example.csv\" target=\"_blank\" download>'.get_lang('ExampleCSVFile').'</a>)',\n        'csv'\n    ),\n    $form->createElement(\n        'radio',\n        'file_type',\n        null,\n        'XML (<a href=\"example.xml\" target=\"_blank\" download>'.get_lang('ExampleXMLFile').'</a>)',\n        'xml'\n    ),\n];\n\n$form->addGroup($group, '', get_lang('FileType'));\n\n$group = [\n    $form->createElement('radio', 'sendMail', '', get_lang('Yes'), 1),\n    $form->createElement('radio', 'sendMail', null, get_lang('No'), 0),\n];\n$form->addGroup($group, '', get_lang('SendMailToUsers'));\n\n$form->addElement(\n    'checkbox',\n    'check_unique_email',\n    '',\n    get_lang('CheckUniqueEmail')\n);\n\n$form->addElement(\n    'checkbox',\n    'resume_import',\n    '',\n    get_lang('ResumeImport')\n);\n\n$form->addButtonImport(get_lang('Import'));\n\n$defaults['formSent'] = 1;\n$defaults['sendMail'] = 0;\n$defaults['file_type'] = 'csv';\n\n$extraSettings = api_get_configuration_value('user_import_settings');\nif (!empty($extraSettings) && isset($extraSettings['options']) &&\n    isset($extraSettings['options']['send_mail_default_option'])\n) {\n    $defaults['sendMail'] = $extraSettings['options']['send_mail_default_option'];\n}\n\n$form->setDefaults($defaults);\n$form->display();\n\nif ($formContinue) {\n    $formContinue->display();\n}\n\nif ($reloadImport) {\n    echo '<script>\n\n        $(function() {\n            function reload() {\n                $(\"#user_import_continue\").submit();\n            }\n            setTimeout(reload, 3000);\n        });\n    </script>';\n}\n\n$list = [];\n$list_reponse = [];\n$result_xml = '';\n$i = 0;\n$count_fields = count($extra_fields);\nif ($count_fields > 0) {\n    foreach ($extra_fields as $extra) {\n        $list[] = $extra[1];\n        $list_reponse[] = 'xxx';\n        $spaces = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';\n        $result_xml .= $spaces.'&lt;'.$extra[1].'&gt;xxx&lt;/'.$extra[1].'&gt;';\n        if ($i != $count_fields - 1) {\n            $result_xml .= '<br/>';\n        }\n        $i++;\n    }\n}\n\nif (api_get_configuration_value('plugin_redirection_enabled')) {\n    $list[] = 'Redirection';\n    $list_reponse[] = api_get_path(WEB_PATH);\n}\n\n?>\n<p><?php echo get_lang('CSVMustLookLike').' ('.get_lang('MandatoryFields').')'; ?> :</p>\n<blockquote>\n<pre>\n<b>LastName</b>;<b>FirstName</b>;<b>Email</b>;UserName;Password;AuthSource;OfficialCode;language;PhoneNumber;Status;ExpiryDate;<span style=\"color:red;\"><?php if (count($list) > 0) {\n    echo implode(';', $list).';';\n} ?></span>Courses;Sessions;ClassId;\n<b>xxx</b>;<b>xxx</b>;<b>xxx</b>;xxx;xxx;<?php echo implode('/', $defined_auth_sources); ?>;xxx;english/spanish/(other);xxx;user/teacher/drh;0000-00-00 00:00:00;<span style=\"color:red;\"><?php if (count($list_reponse) > 0) {\n    echo implode(';', $list_reponse).';';\n} ?></span>xxx1|xxx2|xxx3;sessionId|sessionId|sessionId;1;<br />\n</pre>\n</blockquote>\n<p><?php echo get_lang('XMLMustLookLike').' ('.get_lang('MandatoryFields').')'; ?> :</p>\n<blockquote>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;Contacts&gt;\n    &lt;Contact&gt;\n        <b>&lt;LastName&gt;xxx&lt;/LastName&gt;</b>\n        <b>&lt;FirstName&gt;xxx&lt;/FirstName&gt;</b>\n        &lt;UserName&gt;xxx&lt;/UserName&gt;\n        &lt;Password&gt;xxx&lt;/Password&gt;\n        &lt;AuthSource&gt;<?php echo implode('/', $defined_auth_sources); ?>&lt;/AuthSource&gt;\n        <b>&lt;Email&gt;xxx&lt;/Email&gt;</b>\n        &lt;OfficialCode&gt;xxx&lt;/OfficialCode&gt;\n        &lt;language&gt;english/spanish/(other)&lt;/language&gt;\n        &lt;PhoneNumber&gt;xxx&lt;/PhoneNumber&gt;\n        &lt;Status&gt;user/teacher/drh&lt;/Status&gt;<?php if ($result_xml != '') {\n    echo '<br /><span style=\"color:red;\">', $result_xml;\n    echo '</span><br />';\n} ?>\n        &lt;Courses&gt;xxx1|xxx2|xxx3&lt;/Courses&gt;\n        &lt;Sessions&gt;sessionId|sessionId|sessionId&lt;/Sessions&gt;\n        &lt;ClassId&gt;1&lt;/ClassId&gt;\n    &lt;/Contact&gt;\n&lt;/Contacts&gt;\n</pre>\n</blockquote>\n<?php\nDisplay::display_footer();\n", "<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Symfony\\Component\\DomCrawler\\Crawler;\n\n/**\n * This tool allows platform admins to add users by uploading a CSV or XML file.\n */\n$cidReset = true;\nrequire_once __DIR__.'/../inc/global.inc.php';\n\n// Set this option to true to enforce strict purification for usernames.\n$purification_option_for_usernames = false;\n\n/**\n * @param array $users\n *\n * @return array\n */\nfunction validate_data($users)\n{\n    global $defined_auth_sources;\n    $errors = [];\n    $usernames = [];\n    $classExistList = [];\n    $usergroup = new UserGroup();\n\n    foreach ($users as $user) {\n        // 2. Check username, first, check whether it is empty.\n        if (isset($user['NewUserName'])) {\n            if (!UserManager::is_username_empty($user['NewUserName'])) {\n                // 2.1. Check whether username is too long.\n                if (UserManager::is_username_too_long($user['NewUserName'])) {\n                    $errors[$user['UserName']][] = get_lang('UserNameTooLong');\n                }\n                // 2.2. Check whether the username was used twice in import file.\n                if (isset($usernames[$user['NewUserName']])) {\n                    $errors[$user['UserName']][] = get_lang('UserNameUsedTwice');\n                }\n                $usernames[$user['UserName']] = 1;\n                // 2.3. Check whether username is allready occupied.\n                if (!UserManager::is_username_available($user['NewUserName']) &&\n                    $user['NewUserName'] != $user['UserName']\n                ) {\n                    $errors[$user['UserName']][] = get_lang('UserNameNotAvailable');\n                }\n            }\n        }\n\n        // 3. Check status.\n        if (isset($user['Status']) && !api_status_exists($user['Status'])) {\n            $errors[$user['UserName']][] = get_lang('WrongStatus');\n        }\n\n        // 4. Check ClassId\n        if (!empty($user['ClassId'])) {\n            $classId = explode('|', trim($user['ClassId']));\n            foreach ($classId as $id) {\n                if (in_array($id, $classExistList)) {\n                    continue;\n                }\n                $info = $usergroup->get($id);\n                if (empty($info)) {\n                    $errors[$user['UserName']][] = sprintf(get_lang('ClassIdDoesntExists'), $id);\n                } else {\n                    $classExistList[] = $info['id'];\n                }\n            }\n        }\n\n        // 5. Check authentication source\n        if (!empty($user['AuthSource'])) {\n            if (!in_array($user['AuthSource'], $defined_auth_sources)) {\n                $errors[$user['UserName']][] = get_lang('AuthSourceNotAvailable');\n            }\n        }\n    }\n\n    return $errors;\n}\n\n/**\n * Update users from the imported data.\n *\n * @param array $users         List of users.\n * @param bool  $resetPassword Optional.\n * @param bool  $sendEmail     Optional.\n */\nfunction updateUsers(\n    $users,\n    $resetPassword = false,\n    $sendEmail = false)\n{\n    $usergroup = new UserGroup();\n    $extraFieldValue = new ExtraFieldValue('user');\n    if (is_array($users)) {\n        foreach ($users as $user) {\n            if (isset($user['Status'])) {\n                $user['Status'] = api_status_key($user['Status']);\n            }\n\n            $userInfo = api_get_user_info_from_username($user['UserName']);\n\n            if (empty($userInfo)) {\n                continue;\n            }\n\n            $user_id = $userInfo['user_id'];\n            $firstName = isset($user['FirstName']) ? $user['FirstName'] : $userInfo['firstname'];\n            $lastName = isset($user['LastName']) ? $user['LastName'] : $userInfo['lastname'];\n            $userName = isset($user['NewUserName']) ? $user['NewUserName'] : $userInfo['username'];\n            $changePassMethod = 0;\n            $password = null;\n            $authSource = $userInfo['auth_source'];\n\n            if ($resetPassword) {\n                $changePassMethod = 1;\n            } else {\n                if (isset($user['Password'])) {\n                    $changePassMethod = 2;\n                    $password = $user['Password'];\n                }\n\n                if (isset($user['AuthSource']) && $user['AuthSource'] != $authSource) {\n                    $authSource = $user['AuthSource'];\n                    $changePassMethod = 3;\n                }\n            }\n\n            $email = isset($user['Email']) ? $user['Email'] : $userInfo['email'];\n            $status = isset($user['Status']) ? $user['Status'] : $userInfo['status'];\n            $officialCode = isset($user['OfficialCode']) ? $user['OfficialCode'] : $userInfo['official_code'];\n            $phone = isset($user['PhoneNumber']) ? $user['PhoneNumber'] : $userInfo['phone'];\n            $pictureUrl = isset($user['PictureUri']) ? $user['PictureUri'] : $userInfo['picture_uri'];\n            $expirationDate = isset($user['ExpiryDate']) ? $user['ExpiryDate'] : $userInfo['expiration_date'];\n            $active = $userInfo['active'];\n            if (isset($user['Active'])) {\n                $user['Active'] = (int) $user['Active'];\n                if (-1 === $user['Active']) {\n                    $user['Active'] = 0;\n                }\n                $active = $user['Active'];\n            }\n\n            $creatorId = $userInfo['creator_id'];\n            $hrDeptId = $userInfo['hr_dept_id'];\n            $language = isset($user['Language']) ? $user['Language'] : $userInfo['language'];\n            //$sendEmail = isset($user['SendEmail']) ? $user['SendEmail'] : $userInfo['language'];\n            //$sendEmail = false;\n            // see BT#17893\n            if ($resetPassword && $sendEmail == false) {\n                $sendEmail = true;\n            }\n\n            UserManager::update_user(\n                $user_id,\n                $firstName,\n                $lastName,\n                $userName,\n                $password,\n                $authSource,\n                $email,\n                $status,\n                $officialCode,\n                $phone,\n                $pictureUrl,\n                $expirationDate,\n                $active,\n                $creatorId,\n                $hrDeptId,\n                null,\n                $language,\n                '',\n                $sendEmail,\n                $changePassMethod\n            );\n\n            if (!empty($user['Courses']) && !is_array($user['Courses'])) {\n                $user['Courses'] = [$user['Courses']];\n            }\n            if (!empty($user['Courses']) && is_array($user['Courses'])) {\n                foreach ($user['Courses'] as $course) {\n                    if (CourseManager::course_exists($course)) {\n                        CourseManager::subscribeUser($user_id, $course, $user['Status']);\n                    }\n                }\n            }\n            if (!empty($user['ClassId'])) {\n                $classId = explode('|', trim($user['ClassId']));\n                foreach ($classId as $id) {\n                    $usergroup->subscribe_users_to_usergroup(\n                        $id,\n                        [$user_id],\n                        false\n                    );\n                }\n            }\n\n            // Saving extra fields.\n            global $extra_fields;\n\n            // We are sure that the extra field exists.\n            $userExtraFields = [\n                'item_id' => $user_id,\n            ];\n            $add = false;\n            foreach ($extra_fields as $extras) {\n                if (isset($user[$extras[1]])) {\n                    $key = $extras[1];\n                    $value = $user[$extras[1]];\n                    $userExtraFields[\"extra_$key\"] = $value;\n                    $add = true;\n                }\n            }\n            if ($add) {\n                $extraFieldValue->saveFieldValues($userExtraFields, true);\n            }\n\n            $userUpdated = api_get_user_info($user_id);\n            Display::addFlash(\n                Display::return_message(get_lang('UserUpdated').': '.$userUpdated['complete_name_with_username'])\n            );\n        }\n    }\n}\n\n/**\n * Read the CSV-file.\n *\n * @param string $file Path to the CSV-file\n *\n * @throws Exception\n *\n * @return array All userinformation read from the file\n */\nfunction parse_csv_data($file)\n{\n    $data = Import::csv_reader($file);\n    if (empty($data)) {\n        throw new Exception(get_lang('NoDataAvailable'));\n    }\n    $users = [];\n    foreach ($data as $row) {\n        if (isset($row['Courses'])) {\n            $row['Courses'] = explode('|', trim($row['Courses']));\n        }\n        if (!isset($row['UserName'])) {\n            throw new Exception(get_lang('ThisFieldIsRequired').': UserName');\n        }\n        $users[] = $row;\n    }\n\n    return $users;\n}\n\nfunction parse_xml_data($file)\n{\n    $crawler = new Crawler();\n    $crawler->addXmlContent(file_get_contents($file));\n    $crawler = $crawler->filter('Contacts > Contact ');\n    $array = [];\n    foreach ($crawler as $domElement) {\n        $row = [];\n        foreach ($domElement->childNodes as $node) {\n            if ($node->nodeName != '#text') {\n                $row[$node->nodeName] = $node->nodeValue;\n            }\n        }\n        if (!empty($row)) {\n            $array[] = $row;\n        }\n    }\n\n    return $array;\n}\n\n$this_section = SECTION_PLATFORM_ADMIN;\napi_protect_admin_script(true, null);\n\n$defined_auth_sources[] = PLATFORM_AUTH_SOURCE;\nif (isset($extAuthSource) && is_array($extAuthSource)) {\n    $defined_auth_sources = array_merge($defined_auth_sources, array_keys($extAuthSource));\n}\n\n$tool_name = get_lang('UpdateUserListXMLCSV');\n$interbreadcrumb[] = [\"url\" => 'index.php', \"name\" => get_lang('PlatformAdmin')];\n\nset_time_limit(0);\n$extra_fields = UserManager::get_extra_fields(0, 0, 5, 'ASC', true);\n\n$form = new FormValidator('user_update_import', 'post', api_get_self());\n$form->addHeader($tool_name);\n$form->addFile('import_file', get_lang('ImportFileLocation'), ['accept' => 'text/csv', 'id' => 'import_file']);\n$form->addCheckBox('reset_password', '', get_lang('AutoGeneratePassword'));\n\n$group = [\n    $form->createElement('radio', 'sendMail', '', get_lang('Yes'), 1),\n    $form->createElement('radio', 'sendMail', null, get_lang('No'), 0),\n];\n$form->addGroup($group, '', get_lang('SendMailToUsers'));\n$defaults['sendMail'] = 0;\n\nif ($form->validate()) {\n    if (Security::check_token('post')) {\n        Security::clear_token();\n        $formValues = $form->exportValues();\n\n        if (empty($_FILES['import_file']) || empty($_FILES['import_file']['size'])) {\n            header('Location: '.api_get_self());\n            exit;\n        }\n\n        $uploadInfo = pathinfo($_FILES['import_file']['name']);\n\n        if ($uploadInfo['extension'] !== 'csv') {\n            Display::addFlash(\n                Display::return_message(get_lang('YouMustImportAFileAccordingToSelectedOption'), 'error')\n            );\n\n            header('Location: '.api_get_self());\n            exit;\n        }\n\n        try {\n            $users = parse_csv_data($_FILES['import_file']['tmp_name']);\n        } catch (Exception $exception) {\n            Display::addFlash(\n                Display::return_message($exception->getMessage(), 'error')\n            );\n\n            header('Location: '.api_get_self());\n            exit;\n        }\n\n        $errors = validate_data($users);\n        $errorUsers = array_keys($errors);\n        $usersToUpdate = [];\n\n        foreach ($users as $user) {\n            if (!in_array($user['UserName'], $errorUsers)) {\n                $usersToUpdate[] = $user;\n            }\n        }\n\n        $sendEmail = $_POST['sendMail'] ? true : false;\n        updateUsers($usersToUpdate, isset($formValues['reset_password']), $sendEmail);\n\n        if (empty($errors)) {\n            Display::addFlash(\n                Display::return_message(get_lang('FileImported'), 'success')\n            );\n        } else {\n            $warningMessage = '';\n            foreach ($errors as $errorUsername => $errorUserMessages) {\n                $warningMessage .= \"<strong>$errorUsername</strong>\";\n                $warningMessage .= '<ul><li>'.implode('</li><li>', $errorUserMessages).'</li></ul>';\n            }\n\n            Display::addFlash(\n                Display::return_message(get_lang('FileImportedJustUsersThatAreNotRegistered'), 'warning')\n            );\n            Display::addFlash(Display::return_message($warningMessage, 'warning', false));\n        }\n\n        header('Location: '.api_get_self());\n        exit;\n    } else {\n        Display::addFlash(Display::return_message(get_lang('LinkExpired'), 'warning', false));\n        header('Location: '.api_get_self());\n        exit;\n    }\n}\n\nDisplay::display_header($tool_name);\n$token = Security::get_token();\n\n$form->setDefaults($defaults);\n$form->addHidden('sec_token', $token);\n$form->addButtonImport(get_lang('Import'));\n$form->display();\n\n$list = [];\n$list_reponse = [];\n$result_xml = '';\n$i = 0;\n$count_fields = count($extra_fields);\nif ($count_fields > 0) {\n    foreach ($extra_fields as $extra) {\n        $list[] = $extra[1];\n        $list_reponse[] = 'xxx';\n        $spaces = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';\n        $result_xml .= $spaces.'&lt;'.$extra[1].'&gt;xxx&lt;/'.$extra[1].'&gt;';\n        if ($i != $count_fields - 1) {\n            $result_xml .= '<br/>';\n        }\n        $i++;\n    }\n}\n\n?>\n    <p><?php echo get_lang('CSVMustLookLike').' ('.get_lang('MandatoryFields').')'; ?> :</p>\n    <blockquote>\n    <pre>\n        <b>UserName</b>;LastName;FirstName;Email;NewUserName;Password;AuthSource;OfficialCode;PhoneNumber;Status;ExpiryDate;Active;Language;<span style=\"color:red;\"><?php if (count($list) > 0) {\n    echo implode(';', $list).';';\n} ?></span>Courses;ClassId;\n        xxx;xxx;xxx;xxx;xxx;xxx;xxx;xxx;xxx;user/teacher/drh;YYYY-MM-DD 00:00:00;0/1;xxx;<span\n            style=\"color:red;\"><?php if (count($list_reponse) > 0) {\n    echo implode(';', $list_reponse).';';\n} ?></span>xxx1|xxx2|xxx3;1;<br/>\n    </pre>\n    </blockquote>\n    <p>\n<?php\nDisplay::display_footer();\n", "<?php\n/* For licensing terms, see /license.txt */\n\nuse Ddeboer\\DataImport\\Reader\\ExcelReader;\nuse League\\Csv\\Reader;\n\n/**\n * Class Import\n * This class provides some functions which can be used when importing data from\n * external files into Chamilo.\n */\nclass Import\n{\n    /**\n     * @param string $path\n     * @param bool   $setFirstRowAsHeader\n     *\n     * @return array\n     */\n    public static function csv_reader($path, $setFirstRowAsHeader = true)\n    {\n        return self::csvToArray($path);\n    }\n\n    /**\n     * Reads a CSV-file into an array. The first line of the CSV-file should contain the array-keys.\n     * The encoding of the input file is tried to be detected.\n     * The elements of the returned array are encoded in the system encoding.\n     * Example:\n     *   FirstName;LastName;Email\n     *   John;Doe;john.doe@mail.com\n     *   Adam;Adams;adam@mail.com\n     *  returns\n     *   $result [0]['FirstName'] = 'John';\n     *   $result [0]['LastName'] = 'Doe';\n     *   $result [0]['Email'] = 'john.doe@mail. com';\n     *   $result [1]['FirstName'] = 'Adam';\n     *   ...\n     *\n     * @param string $filename the path to the CSV-file which should be imported\n     *\n     * @return array returns an array (in the system encoding) that contains all data from the CSV-file\n     */\n    public static function csvToArray($filename)\n    {\n        if (empty($filename)) {\n            return [];\n        }\n\n        $reader = Reader::createFromPath($filename, 'r');\n        if ($reader) {\n            $reader->setDelimiter(';');\n            $reader->stripBom(true);\n            /*$contents = $reader->__toString();\n            if (!Utf8::isUtf8($contents)) {\n                // If file is not in utf8 try converting to ISO-8859-15\n                if ($reader->getStreamFilterMode() == 1) {\n                    $reader->appendStreamFilter('convert.iconv.ISO-8859-15/UTF-8');\n                }\n            }*/\n\n            $iterator = $reader->fetchAssoc(0);\n\n            return iterator_to_array($iterator);\n        }\n\n        return [];\n    }\n\n    /**\n     * @param string $filename\n     *\n     * @return array\n     */\n    public static function xlsToArray($filename)\n    {\n        if (empty($filename)) {\n            return [];\n        }\n\n        $file = new \\SplFileObject($filename);\n        $reader = new ExcelReader($file, 0);\n\n        return $reader;\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\nuse ChamiloSession as Session;\nuse CpChart\\Cache as pCache;\nuse CpChart\\Data as pData;\nuse CpChart\\Image as pImage;\n\n/**\n * Class MySpace.\n */\nclass MySpace\n{\n    /**\n     * Get admin actions.\n     *\n     * @return string\n     */\n    public static function getAdminActions()\n    {\n        $actions = [\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=coaches',\n                'content' => get_lang('DisplayCoaches'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=user',\n                'content' => get_lang('DisplayUserOverview'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=session',\n                'content' => get_lang('DisplaySessionOverview'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=course',\n                'content' => get_lang('DisplayCourseOverview'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'tracking/question_course_report.php?view=admin',\n                'content' => get_lang('LPQuestionListResults'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'tracking/course_session_report.php?view=admin',\n                'content' => get_lang('LPExerciseResultsBySession'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=accessoverview',\n                'content' => get_lang('DisplayAccessOverview').' ('.get_lang('Beta').')',\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/exercise_category_report.php',\n                'content' => get_lang('ExerciseCategoryAllSessionsReport'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/survey_report.php',\n                'content' => get_lang('SurveysReport'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/tc_report.php',\n                'content' => get_lang('TCReport'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/ti_report.php',\n                'content' => get_lang('TIReport'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/question_stats_global.php',\n                'content' => get_lang('QuestionStats'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/question_stats_global_detail.php',\n                'content' => get_lang('QuestionStatsDetailedReport'),\n            ],\n        ];\n\n        $field = new ExtraField('user');\n        $companyField = $field->get_handler_field_info_by_field_variable('company');\n        if (!empty($companyField)) {\n            $actions[] = [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=company',\n                'content' => get_lang('UserByEntityReport'),\n            ];\n        }\n        $field = new ExtraField('lp');\n        $authorsField = $field->get_handler_field_info_by_field_variable('authors');\n        if (!empty($authorsField)) {\n            $actions[] = [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=learningPath',\n                'content' => get_lang('LpByAuthor'),\n            ];\n        }\n        $field = new ExtraField('lp_item');\n        $authorsItemField = $field->get_handler_field_info_by_field_variable('authorlpitem');\n        if (!empty($authorsItemField)) {\n            $actions[] = [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=learningPathByItem',\n                'content' => get_lang('LearningPathItemByAuthor'),\n            ];\n        }\n\n        return Display::actions($actions, null);\n    }\n\n    /**\n     * @return string\n     */\n    public static function getTopMenu()\n    {\n        $menuItems = [];\n        $menuItems[] = Display::url(\n            Display::return_icon(\n                'statistics.png',\n                get_lang('MyStats'),\n                '',\n                ICON_SIZE_MEDIUM\n            ),\n            api_get_path(WEB_CODE_PATH).\"auth/my_progress.php\"\n        );\n        $menuItems[] = Display::url(\n            Display::return_icon(\n                'teacher.png',\n                get_lang('TeacherInterface'),\n                [],\n                32\n            ),\n            api_get_path(WEB_CODE_PATH).'mySpace/?view=teacher'\n        );\n        $menuItems[] = Display::url(\n            Display::return_icon(\n                'star_na.png',\n                get_lang('AdminInterface'),\n                [],\n                32\n            ),\n            '#'\n        );\n        $menuItems[] = Display::url(\n            Display::return_icon('quiz.png', get_lang('ExamTracking'), [], 32),\n            api_get_path(WEB_CODE_PATH).'tracking/exams.php'\n        );\n        $menu = '';\n        foreach ($menuItems as $item) {\n            $menu .= $item;\n        }\n        $menu .= '<br />';\n\n        return $menu;\n    }\n\n    /**\n     * This function serves exporting data in CSV format.\n     *\n     * @param array  $header    the header labels\n     * @param array  $data      the data array\n     * @param string $file_name the name of the file which contains exported data\n     *\n     * @return string mixed             Returns a message (string) if an error occurred\n     */\n    public function export_csv($header, $data, $file_name = 'export.csv')\n    {\n        $archive_path = api_get_path(SYS_ARCHIVE_PATH);\n        $archive_url = api_get_path(WEB_CODE_PATH).'course_info/download.php?archive_path=&archive=';\n        $message = '';\n        if (!$open = fopen($archive_path.$file_name, 'w+')) {\n            $message = get_lang('noOpen');\n        } else {\n            $info = '';\n\n            foreach ($header as $value) {\n                $info .= $value.';';\n            }\n            $info .= \"\\r\\n\";\n\n            foreach ($data as $row) {\n                foreach ($row as $value) {\n                    $info .= $value.';';\n                }\n                $info .= \"\\r\\n\";\n            }\n\n            fwrite($open, $info);\n            fclose($open);\n            @chmod($file_name, api_get_permissions_for_new_files());\n\n            header(\"Location:\".$archive_url.$file_name);\n            exit;\n        }\n\n        return $message;\n    }\n\n    /**\n     * Gets the connections to a course as an array of login and logout time.\n     *\n     * @param int   $userId     User id\n     * @param array $courseInfo\n     * @param int   $sessionId  Session id (optional, default = 0)\n     *\n     * @return array Connections\n     */\n    public static function get_connections_to_course(\n        $userId,\n        $courseInfo,\n        $sessionId = 0\n    ) {\n        $table = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n\n        // protect data\n        $userId = (int) $userId;\n        $courseId = (int) $courseInfo['real_id'];\n        $sessionId = (int) $sessionId;\n        $sessionCondition = api_get_session_condition($sessionId);\n\n        $sql = 'SELECT login_course_date, logout_course_date\n                FROM '.$table.'\n                WHERE\n                    user_id = '.$userId.' AND\n                    c_id = '.$courseId.'\n                    '.$sessionCondition.'\n                ORDER BY login_course_date ASC';\n        $rs = Database::query($sql);\n        $connections = [];\n\n        while ($row = Database::fetch_array($rs)) {\n            $connections[] = [\n                'login' => $row['login_course_date'],\n                'logout' => $row['logout_course_date'],\n            ];\n        }\n\n        return $connections;\n    }\n\n    /**\n     * @param $user_id\n     * @param $course_list\n     * @param int $session_id\n     *\n     * @return array|bool\n     */\n    public static function get_connections_from_course_list(\n        $user_id,\n        $course_list,\n        $session_id = 0\n    ) {\n        // Database table definitions\n        $tbl_track_course = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n        if (empty($course_list)) {\n            return false;\n        }\n\n        // protect data\n        $user_id = (int) $user_id;\n        $session_id = (int) $session_id;\n        $new_course_list = [];\n        foreach ($course_list as $course_item) {\n            $courseInfo = api_get_course_info($course_item['code']);\n            if ($courseInfo) {\n                $courseId = $courseInfo['real_id'];\n                $new_course_list[] = '\"'.$courseId.'\"';\n            }\n        }\n        $course_list = implode(', ', $new_course_list);\n\n        if (empty($course_list)) {\n            return false;\n        }\n        $sql = 'SELECT login_course_date, logout_course_date, c_id\n                FROM '.$tbl_track_course.'\n                WHERE\n                    user_id = '.$user_id.' AND\n                    c_id IN ('.$course_list.') AND\n                    session_id = '.$session_id.'\n                ORDER BY login_course_date ASC';\n        $rs = Database::query($sql);\n        $connections = [];\n\n        while ($row = Database::fetch_array($rs)) {\n            $timestamp_login_date = api_strtotime($row['login_course_date'], 'UTC');\n            $timestamp_logout_date = api_strtotime($row['logout_course_date'], 'UTC');\n            $connections[] = [\n                'login' => $timestamp_login_date,\n                'logout' => $timestamp_logout_date,\n                'c_id' => $row['c_id'],\n            ];\n        }\n\n        return $connections;\n    }\n\n    /**\n     * Creates a small table in the last column of the table with the user overview.\n     *\n     * @param int $user_id the id of the user\n     *\n     * @return array List course\n     */\n    public static function returnCourseTracking($user_id)\n    {\n        $user_id = (int) $user_id;\n\n        if (empty($user_id)) {\n            return [];\n        }\n\n        $tbl_course_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        // getting all the courses of the user\n        $sql = \"SELECT * FROM $tbl_course_user\n                WHERE\n                    user_id = $user_id AND\n                    relation_type <> \".COURSE_RELATION_TYPE_RRHH;\n        $result = Database::query($sql);\n\n        $list = [];\n\n        while ($row = Database::fetch_array($result)) {\n            $courseInfo = api_get_course_info_by_id($row['c_id']);\n            $courseId = $courseInfo['real_id'];\n            $courseCode = $courseInfo['code'];\n\n            if (empty($courseInfo)) {\n                continue;\n            }\n\n            $avg_score = Tracking::get_avg_student_score($user_id, $courseCode);\n            if (is_numeric($avg_score)) {\n                $avg_score = round($avg_score, 2);\n            } else {\n                $avg_score = '-';\n            }\n\n            // Student exercises results (obtained score, maximum score, number of exercises answered, score percentage)\n            $exercisesResults = self::exercises_results($user_id, $courseCode);\n\n            $resultToString = '';\n            if (!is_null($exercisesResults['percentage'])) {\n                $resultToString = $exercisesResults['score_obtained'].'/'.$exercisesResults['score_possible'].' ( '.$exercisesResults['percentage'].'% )';\n            }\n\n            $item = [\n                'code' => $courseInfo['code'],\n                'real_id' => $courseInfo['real_id'],\n                'title' => $courseInfo['title'],\n                'category' => $courseInfo['categoryName'],\n                'image_small' => $courseInfo['course_image'],\n                'image_large' => $courseInfo['course_image_large'],\n                'time_spent' => api_time_to_hms(Tracking::get_time_spent_on_the_course($user_id, $courseId)),\n                'student_progress' => round(Tracking::get_avg_student_progress($user_id, $courseCode)),\n                'student_score' => $avg_score,\n                'student_message' => Tracking::count_student_messages($user_id, $courseCode),\n                'student_assignments' => Tracking::count_student_assignments($user_id, $courseCode),\n                'student_exercises' => $resultToString,\n                'questions_answered' => $exercisesResults['questions_answered'],\n                'last_connection' => Tracking::get_last_connection_date_on_the_course($user_id, $courseInfo),\n            ];\n            $list[] = $item;\n        }\n\n        return $list;\n    }\n\n    /**\n     * Display a sortable table that contains an overview off all the\n     * reporting progress of all users and all courses the user is subscribed to.\n     *\n     * @author Patrick Cool <patrick.cool@UGent.be>, Ghent University, Belgium\n     *          Alex Aragon <alex.aragon@beeznest.com>, BeezNest, Per\u00fa\n     *\n     * @version Chamilo 1.11.8\n     *\n     * @since April 2019\n     */\n    public static function returnTrackingUserOverviewFilter($user_id)\n    {\n        $tpl = new Template('', false, false, false, false, false, false);\n        $userInfo = api_get_user_info($user_id);\n\n        $avatar = UserManager::getUserPicture($user_id, USER_IMAGE_SIZE_SMALL);\n        $user = [\n            'id' => $user_id,\n            'code_user' => $userInfo['official_code'],\n            'complete_name' => $userInfo['complete_name'],\n            'username' => $userInfo['username'],\n            'course' => self::returnCourseTracking($user_id),\n            'avatar' => $avatar,\n        ];\n\n        $tpl->assign('item', $user);\n        $templateName = $tpl->get_template('my_space/partials/tracking_user_overview.tpl');\n        $content = $tpl->fetch($templateName);\n\n        return $content;\n    }\n\n    /**\n     * Display a sortable table that contains an overview off all the\n     * reporting progress of all users and all courses the user is subscribed to.\n     *\n     * @author Patrick Cool <patrick.cool@UGent.be>, Ghent University, Belgium\n     *         Alex Aragon <alex.aragon@beeznest.com>, BeezNest, Per\u00fa\n     *\n     * @version Chamilo 1.11.8\n     *\n     * @since October 2008, Update April 2019\n     */\n    public static function display_tracking_user_overview()\n    {\n        self::display_user_overview_export_options();\n\n        $params = ['view' => 'admin', 'display' => 'user'];\n        $table = new SortableTable(\n            'tracking_user_overview',\n            ['MySpace', 'get_number_of_users_tracking_overview'],\n            ['MySpace', 'get_user_data_tracking_overview'],\n            0,\n            20,\n            'ASC',\n            null, [\n                'class' => 'table table-transparent',\n            ]\n        );\n        $table->additional_parameters = $params;\n\n        $table->set_column_filter(0, ['MySpace', 'returnTrackingUserOverviewFilter']);\n        $tableContent = $table->return_table();\n        $tpl = new Template('', false, false, false, false, false, false);\n        $tpl->assign('table', $tableContent);\n        $templateName = $tpl->get_template('my_space/user_summary.tpl');\n        $tpl->display($templateName);\n    }\n\n    /**\n     * @param $export_csv\n     */\n    public static function display_tracking_coach_overview($export_csv)\n    {\n        if ($export_csv) {\n            $is_western_name_order = api_is_western_name_order(PERSON_NAME_DATA_EXPORT);\n        } else {\n            $is_western_name_order = api_is_western_name_order();\n        }\n        $sort_by_first_name = api_sort_by_first_name();\n\n        if (isset($_GET['tracking_list_coaches_column'])) {\n            $tracking_column = (int) $_GET['tracking_list_coaches_column'];\n        } else {\n            $tracking_column = ($is_western_name_order xor $sort_by_first_name) ? 1 : 0;\n        }\n\n        $tracking_direction = (isset($_GET['tracking_list_coaches_direction']) && in_array(strtoupper($_GET['tracking_list_coaches_direction']), ['ASC', 'DESC', 'ASCENDING', 'DESCENDING', '0', '1'])) ? $_GET['tracking_list_coaches_direction'] : 'DESC';\n        // Prepare array for column order - when impossible, use some of user names.\n        if ($is_western_name_order) {\n            $order = [\n                0 => 'firstname',\n                1 => 'lastname',\n                2 => $sort_by_first_name ? 'firstname' : 'lastname',\n                3 => 'login_date',\n                4 => $sort_by_first_name ? 'firstname' : 'lastname',\n                5 => $sort_by_first_name ? 'firstname' : 'lastname',\n            ];\n        } else {\n            $order = [\n                0 => 'lastname',\n                1 => 'firstname',\n                2 => $sort_by_first_name ? 'firstname' : 'lastname',\n                3 => 'login_date',\n                4 => $sort_by_first_name ? 'firstname' : 'lastname',\n                5 => $sort_by_first_name ? 'firstname' : 'lastname',\n            ];\n        }\n        $table = new SortableTable(\n            'tracking_list_coaches_myspace',\n            ['MySpace', 'count_coaches'],\n            null,\n            ($is_western_name_order xor $sort_by_first_name) ? 1 : 0\n        );\n        $parameters['view'] = 'admin';\n        $table->set_additional_parameters($parameters);\n        if ($is_western_name_order) {\n            $table->set_header(0, get_lang('FirstName'), true);\n            $table->set_header(1, get_lang('LastName'), true);\n        } else {\n            $table->set_header(0, get_lang('LastName'), true);\n            $table->set_header(1, get_lang('FirstName'), true);\n        }\n        $table->set_header(2, get_lang('TimeSpentOnThePlatform'), false);\n        $table->set_header(3, get_lang('LastConnexion'), false);\n        $table->set_header(4, get_lang('NbStudents'), false);\n        $table->set_header(5, get_lang('CountCours'), false);\n        $table->set_header(6, get_lang('NumberOfSessions'), false);\n        $table->set_header(7, get_lang('Sessions'), false);\n\n        if ($is_western_name_order) {\n            $csv_header[] = [\n                get_lang('FirstName'),\n                get_lang('LastName'),\n                get_lang('TimeSpentOnThePlatform'),\n                get_lang('LastConnexion'),\n                get_lang('NbStudents'),\n                get_lang('CountCours'),\n                get_lang('NumberOfSessions'),\n            ];\n        } else {\n            $csv_header[] = [\n                get_lang('LastName'),\n                get_lang('FirstName'),\n                get_lang('TimeSpentOnThePlatform'),\n                get_lang('LastConnexion'),\n                get_lang('NbStudents'),\n                get_lang('CountCours'),\n                get_lang('NumberOfSessions'),\n            ];\n        }\n\n        $tbl_track_login = Database::get_main_table(TABLE_STATISTIC_TRACK_E_LOGIN);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_session_course_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_sessions = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        $sqlCoachs = \"SELECT DISTINCT\n                        scu.user_id as id_coach,\n                        u.id as user_id,\n                        lastname,\n                        firstname,\n                        MAX(login_date) as login_date\n                        FROM $tbl_user u, $tbl_session_course_user scu, $tbl_track_login\n                        WHERE\n                            scu.user_id = u.id AND scu.status=2 AND login_user_id=u.id\n                        GROUP BY user_id \";\n\n        if (api_is_multiple_url_enabled()) {\n            $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $access_url_id = api_get_current_access_url_id();\n            if ($access_url_id != -1) {\n                $sqlCoachs = \"SELECT DISTINCT\n                                    scu.user_id as id_coach,\n                                    u.id as user_id,\n                                    lastname,\n                                    firstname,\n                                    MAX(login_date) as login_date\n                                FROM $tbl_user u,\n                                $tbl_session_course_user scu,\n                                $tbl_track_login ,\n                                $tbl_session_rel_access_url session_rel_url\n                                WHERE\n                                    scu.user_id = u.id AND\n                                    scu.status = 2 AND\n                                    login_user_id = u.id AND\n                                    access_url_id = $access_url_id AND\n                                    session_rel_url.session_id = scu.session_id\n                                GROUP BY u.id\";\n            }\n        }\n        if (!empty($order[$tracking_column])) {\n            $sqlCoachs .= \" ORDER BY `\".$order[$tracking_column].\"` \".$tracking_direction;\n        }\n\n        $result_coaches = Database::query($sqlCoachs);\n        $global_coaches = [];\n        while ($coach = Database::fetch_array($result_coaches)) {\n            $global_coaches[$coach['user_id']] = $coach;\n        }\n\n        $sql_session_coach = \"SELECT session.id_coach, u.id as user_id, lastname, firstname, MAX(login_date) as login_date\n                                FROM $tbl_user u , $tbl_sessions as session, $tbl_track_login\n                                WHERE id_coach = u.id AND login_user_id = u.id\n                                GROUP BY u.id\n                                ORDER BY login_date $tracking_direction\";\n\n        if (api_is_multiple_url_enabled()) {\n            $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $access_url_id = api_get_current_access_url_id();\n            if ($access_url_id != -1) {\n                $sql_session_coach = \"SELECT session.id_coach, u.id as user_id, lastname, firstname, MAX(login_date) as login_date\n\t\t\t\t\tFROM $tbl_user u , $tbl_sessions as session, $tbl_track_login , $tbl_session_rel_access_url as session_rel_url\n\t\t\t\t\tWHERE\n\t\t\t\t\t    id_coach = u.id AND\n\t\t\t\t\t    login_user_id = u.id  AND\n\t\t\t\t\t    access_url_id = $access_url_id AND\n\t\t\t\t\t    session_rel_url.session_id = session.id\n\t\t\t\t\tGROUP BY  u.id\n\t\t\t\t\tORDER BY login_date $tracking_direction\";\n            }\n        }\n\n        $result_sessions_coach = Database::query($sql_session_coach);\n        //$total_no_coaches += Database::num_rows($result_sessions_coach);\n        while ($coach = Database::fetch_array($result_sessions_coach)) {\n            $global_coaches[$coach['user_id']] = $coach;\n        }\n\n        $all_datas = [];\n        foreach ($global_coaches as $id_coach => $coaches) {\n            $time_on_platform = api_time_to_hms(\n                Tracking::get_time_spent_on_the_platform($coaches['user_id'])\n            );\n            $last_connection = Tracking::get_last_connection_date(\n                $coaches['user_id']\n            );\n            $nb_students = count(\n                Tracking::get_student_followed_by_coach($coaches['user_id'])\n            );\n            $nb_courses = count(\n                Tracking::get_courses_followed_by_coach($coaches['user_id'])\n            );\n            $nb_sessions = count(\n                Tracking::get_sessions_coached_by_user($coaches['user_id'])\n            );\n\n            $table_row = [];\n            if ($is_western_name_order) {\n                $table_row[] = $coaches['firstname'];\n                $table_row[] = $coaches['lastname'];\n            } else {\n                $table_row[] = $coaches['lastname'];\n                $table_row[] = $coaches['firstname'];\n            }\n            $table_row[] = $time_on_platform;\n            $table_row[] = $last_connection;\n            $table_row[] = $nb_students;\n            $table_row[] = $nb_courses;\n            $table_row[] = $nb_sessions;\n            $table_row[] = '<a href=\"session.php?id_coach='.$coaches['user_id'].'\">\n                '.Display::return_icon('2rightarrow.png', get_lang('Details')).'\n            </a>';\n            $all_datas[] = $table_row;\n\n            if ($is_western_name_order) {\n                $csv_content[] = [\n                    api_html_entity_decode($coaches['firstname'], ENT_QUOTES),\n                    api_html_entity_decode($coaches['lastname'], ENT_QUOTES),\n                    $time_on_platform,\n                    $last_connection,\n                    $nb_students,\n                    $nb_courses,\n                    $nb_sessions,\n                ];\n            } else {\n                $csv_content[] = [\n                    api_html_entity_decode($coaches['lastname'], ENT_QUOTES),\n                    api_html_entity_decode($coaches['firstname'], ENT_QUOTES),\n                    $time_on_platform,\n                    $last_connection,\n                    $nb_students,\n                    $nb_courses,\n                    $nb_sessions,\n                ];\n            }\n        }\n\n        if ($tracking_column != 3) {\n            if ($tracking_direction == 'DESC') {\n                usort($all_datas, ['MySpace', 'rsort_users']);\n            } else {\n                usort($all_datas, ['MySpace', 'sort_users']);\n            }\n        }\n\n        if ($export_csv && $tracking_column != 3) {\n            usort($csv_content, 'sort_users');\n        }\n        if ($export_csv) {\n            $csv_content = array_merge($csv_header, $csv_content);\n        }\n\n        foreach ($all_datas as $row) {\n            $table->addRow($row, 'align=\"right\"');\n        }\n        $table->display();\n    }\n\n    /**\n     * @return mixed\n     */\n    public static function count_coaches()\n    {\n        global $total_no_coaches;\n\n        return $total_no_coaches;\n    }\n\n    public static function sort_users($a, $b)\n    {\n        $tracking = Session::read('tracking_column');\n\n        return api_strcmp(\n            trim(api_strtolower($a[$tracking])),\n            trim(api_strtolower($b[$tracking]))\n        );\n    }\n\n    public static function rsort_users($a, $b)\n    {\n        $tracking = Session::read('tracking_column');\n\n        return api_strcmp(\n            trim(api_strtolower($b[$tracking])),\n            trim(api_strtolower($a[$tracking]))\n        );\n    }\n\n    /**\n     * Display a sortable table that contains an overview off all the progress of the user in a session.\n     *\n     * @deprecated ?\n     *\n     * @author C\u00e9sar Perales <cesar.perales@beeznest.com>, Beeznest Team\n     */\n    public static function display_tracking_lp_progress_overview(\n        $sessionId = '',\n        $courseId = '',\n        $date_from,\n        $date_to\n    ) {\n        $course = api_get_course_info_by_id($courseId);\n        /**\n         * Column name\n         * The order is important you need to check the $column variable in the model.ajax.php file.\n         */\n        $columns = [\n            get_lang('Username'),\n            get_lang('FirstName'),\n            get_lang('LastName'),\n        ];\n        //add lessons of course\n        $lessons = LearnpathList::get_course_lessons($course['code'], $sessionId);\n\n        //create columns array\n        foreach ($lessons as $lesson_id => $lesson) {\n            $columns[] = $lesson['name'];\n        }\n\n        $columns[] = get_lang('Total');\n\n        /**\n         * Column config.\n         */\n        $column_model = [\n            [\n                'name' => 'username',\n                'index' => 'username',\n                'align' => 'left',\n                'search' => 'true',\n                'wrap_cell' => \"true\",\n            ],\n            [\n                'name' => 'firstname',\n                'index' => 'firstname',\n                'align' => 'left',\n                'search' => 'true',\n            ],\n            [\n                'name' => 'lastname',\n                'index' => 'lastname',\n                'align' => 'left',\n                'search' => 'true',\n            ],\n        ];\n\n        // Get dinamic column names\n        foreach ($lessons as $lesson_id => $lesson) {\n            $column_model[] = [\n                'name' => $lesson['id'],\n                'index' => $lesson['id'],\n                'align' => 'left',\n                'search' => 'true',\n            ];\n        }\n\n        $column_model[] = [\n            'name' => 'total',\n            'index' => 'total',\n            'align' => 'left',\n            'search' => 'true',\n        ];\n\n        $action_links = '';\n        // jqgrid will use this URL to do the selects\n        $url = api_get_path(WEB_AJAX_PATH).'model.ajax.php?a=get_session_lp_progress&session_id='.$sessionId.'&course_id='.$courseId.'&date_to='.$date_to.'&date_from='.$date_from;\n\n        // Table Id\n        $tableId = 'lpProgress';\n\n        // Autowidth\n        $extra_params['autowidth'] = 'true';\n\n        // height auto\n        $extra_params['height'] = 'auto';\n\n        $table = Display::grid_js(\n            $tableId,\n            $url,\n            $columns,\n            $column_model,\n            $extra_params,\n            [],\n            $action_links,\n            true\n        );\n\n        $return = '<script>$(function() {'.$table.\n            'jQuery(\"#'.$tableId.'\").jqGrid(\"navGrid\",\"#'.$tableId.'_pager\",{view:false, edit:false, add:false, del:false, search:false, excel:true});\n                jQuery(\"#'.$tableId.'\").jqGrid(\"navButtonAdd\",\"#'.$tableId.'_pager\",{\n                       caption:\"\",\n                       title:\"'.get_lang('ExportExcel').'\",\n                       onClickButton : function () {\n                           jQuery(\"#'.$tableId.'\").jqGrid(\"excelExport\",{\"url\":\"'.$url.'&export_format=xls\"});\n                       }\n                });\n            });</script>';\n        $return .= Display::grid_html($tableId);\n\n        return $return;\n    }\n\n    /**\n     * Display a sortable table that contains an overview off all the progress of the user in a session.\n     *\n     * @param int $sessionId  The session ID\n     * @param int $courseId   The course ID\n     * @param int $exerciseId The quiz ID\n     * @param     $date_from\n     * @param     $date_to\n     *\n     * @return string HTML array of results formatted for gridJS\n     *\n     * @deprecated ?\n     *\n     * @author C\u00e9sar Perales <cesar.perales@beeznest.com>, Beeznest Team\n     */\n    public static function display_tracking_exercise_progress_overview(\n        $sessionId = 0,\n        $courseId = 0,\n        $exerciseId = 0,\n        $date_from = null,\n        $date_to = null\n    ) {\n        $date_from = Security::remove_XSS($date_from);\n        $date_to = Security::remove_XSS($date_to);\n        /**\n         * Column names\n         * The column order is important. Check $column variable in the main/inc/ajax/model.ajax.php file.\n         */\n        $columns = [\n            get_lang('Session'),\n            get_lang('ExerciseId'),\n            get_lang('ExerciseName'),\n            get_lang('Username'),\n            get_lang('LastName'),\n            get_lang('FirstName'),\n            get_lang('Time'),\n            get_lang('QuestionId'),\n            get_lang('QuestionTitle'),\n            get_lang('WorkDescription'),\n            get_lang('Answer'),\n            get_lang('Correct'),\n        ];\n\n        /**\n         * Column config.\n         */\n        $column_model = [\n            ['name' => 'session', 'index' => 'session', 'align' => 'left', 'search' => 'true', 'wrap_cell' => \"true\"],\n            ['name' => 'exercise_id', 'index' => 'exercise_id', 'align' => 'left', 'search' => 'true'],\n            ['name' => 'quiz_title', 'index' => 'quiz_title', 'align' => 'left', 'search' => 'true'],\n            ['name' => 'username', 'index' => 'username', 'align' => 'left', 'search' => 'true'],\n            ['name' => 'lastname', 'index' => 'lastname', 'align' => 'left', 'search' => 'true'],\n            ['name' => 'firstname', 'index' => 'firstname', 'align' => 'left', 'search' => 'true'],\n            ['name' => 'time', 'index' => 'time', 'align' => 'left', 'search' => 'true', 'wrap_cell' => \"true\"],\n            ['name' => 'question_id', 'index' => 'question_id', 'align' => 'left', 'search' => 'true'],\n            ['name' => 'question', 'index' => 'question', 'align' => 'left', 'search' => 'true', 'wrap_cell' => \"true\"],\n            ['name' => 'description', 'index' => 'description', 'align' => 'left', 'width' => '550', 'search' => 'true', 'wrap_cell' => \"true\"],\n            ['name' => 'answer', 'index' => 'answer', 'align' => 'left', 'search' => 'true', 'wrap_cell' => \"true\"],\n            ['name' => 'correct', 'index' => 'correct', 'align' => 'left', 'search' => 'true', 'wrap_cell' => \"true\"],\n        ];\n        //get dynamic column names\n\n        // jqgrid will use this URL to do the selects\n        $url = api_get_path(WEB_AJAX_PATH).'model.ajax.php?a=get_exercise_progress&session_id='.$sessionId.'&course_id='.$courseId.'&exercise_id='.$exerciseId.'&date_to='.$date_to.'&date_from='.$date_from;\n\n        // Autowidth\n        $extra_params['autowidth'] = 'true';\n\n        // height auto\n        $extra_params['height'] = 'auto';\n\n        $tableId = 'exerciseProgressOverview';\n        $table = Display::grid_js(\n            $tableId,\n            $url,\n            $columns,\n            $column_model,\n            $extra_params,\n            [],\n            '',\n            true\n        );\n\n        $return = '<script>$(function() {'.$table.\n            'jQuery(\"#'.$tableId.'\").jqGrid(\"navGrid\",\"#'.$tableId.'_pager\",{view:false, edit:false, add:false, del:false, search:false, excel:true});\n                jQuery(\"#'.$tableId.'\").jqGrid(\"navButtonAdd\",\"#'.$tableId.'_pager\",{\n                       caption:\"\",\n                       title:\"'.get_lang('ExportExcel').'\",\n                       onClickButton : function () {\n                           jQuery(\"#'.$tableId.'\").jqGrid(\"excelExport\",{\"url\":\"'.$url.'&export_format=xls\"});\n                       }\n                });\n            });</script>';\n        $return .= Display::grid_html($tableId);\n\n        return $return;\n    }\n\n    /**\n     * Displays a form with all the additionally defined user fields of the profile\n     * and give you the opportunity to include these in the CSV export.\n     *\n     * @author Patrick Cool <patrick.cool@UGent.be>, Ghent University, Belgium\n     *\n     * @version 1.8.6\n     *\n     * @since November 2008\n     */\n    public static function display_user_overview_export_options()\n    {\n        $message = '';\n        $defaults = [];\n        // include the user manager and formvalidator library\n        if (isset($_GET['export']) && 'options' == $_GET['export']) {\n            // get all the defined extra fields\n            $extrafields = UserManager::get_extra_fields(\n                0,\n                50,\n                5,\n                'ASC',\n                false,\n                1\n            );\n\n            // creating the form with all the defined extra fields\n            $form = new FormValidator(\n                'exportextrafields',\n                'post',\n                api_get_self().\"?view=\".Security::remove_XSS($_GET['view']).'&display='.Security::remove_XSS($_GET['display']).'&export='.Security::remove_XSS($_GET['export'])\n            );\n\n            if (is_array($extrafields) && count($extrafields) > 0) {\n                foreach ($extrafields as $key => $extra) {\n                    $form->addElement('checkbox', 'extra_export_field'.$extra[0], '', $extra[3]);\n                }\n                $form->addButtonSave(get_lang('Ok'), 'submit');\n\n                // setting the default values for the form that contains all the extra fields\n                $exportFields = Session::read('additional_export_fields');\n                if (is_array($exportFields)) {\n                    foreach ($exportFields as $key => $value) {\n                        $defaults['extra_export_field'.$value] = 1;\n                    }\n                }\n                $form->setDefaults($defaults);\n            } else {\n                $form->addElement('html', Display::return_message(get_lang('ThereAreNotExtrafieldsAvailable'), 'warning'));\n            }\n\n            if ($form->validate()) {\n                // exporting the form values\n                $values = $form->exportValues();\n\n                // re-initialising the session that contains the additional fields that need to be exported\n                Session::write('additional_export_fields', []);\n\n                // adding the fields that are checked to the session\n                $message = '';\n                $additionalExportFields = [];\n                foreach ($values as $field_ids => $value) {\n                    if ($value == 1 && strstr($field_ids, 'extra_export_field')) {\n                        $additionalExportFields[] = str_replace('extra_export_field', '', $field_ids);\n                    }\n                }\n                Session::write('additional_export_fields', $additionalExportFields);\n\n                // adding the fields that will be also exported to a message string\n                $additionalExportFields = Session::read('additional_export_fields');\n                if (is_array($additionalExportFields)) {\n                    foreach ($additionalExportFields as $key => $extra_field_export) {\n                        $message .= '<li>'.$extrafields[$extra_field_export][3].'</li>';\n                    }\n                }\n\n                // Displaying a feedback message\n                if (!empty($additionalExportFields)) {\n                    echo Display::return_message(\n                        get_lang('FollowingFieldsWillAlsoBeExported').': <br /><ul>'.$message.'</ul>',\n                        'confirm',\n                        false\n                    );\n                } else {\n                    echo Display::return_message(\n                        get_lang('NoAdditionalFieldsWillBeExported'),\n                        'confirm',\n                        false\n                    );\n                }\n            } else {\n                $form->display();\n            }\n        } else {\n            $additionalExportFields = Session::read('additional_export_fields');\n            if (!empty($additionalExportFields)) {\n                // get all the defined extra fields\n                $extrafields = UserManager::get_extra_fields(0, 50, 5, 'ASC');\n\n                foreach ($additionalExportFields as $key => $extra_field_export) {\n                    $message .= '<li>'.$extrafields[$extra_field_export][3].'</li>';\n                }\n\n                echo Display::return_message(\n                    get_lang('FollowingFieldsWillAlsoBeExported').': <br /><ul>'.$message.'</ul>',\n                    'normal',\n                    false\n                );\n            }\n        }\n    }\n\n    /**\n     * Export to cvs a list of users who were enrolled in the lessons.\n     * It is necessary that in the extra field, a company is defined.\n     *\n     * @param string|null $startDate\n     * @param string|null $endDate\n     *\n     * @return array\n     */\n    public static function exportCompanyResumeCsv($startDate, $endDate)\n    {\n        $companys = self::getCompanyLearnpathSubscription($startDate, $endDate);\n        $csv_content = [];\n        // Printing table\n        $total = 0;\n        $displayText = get_lang('Company');\n        // the first line of the csv file with the column headers\n        $csv_row = [];\n        $csv_row[] = $displayText;\n\n        $csv_row[] = get_lang('CountOfSubscribedUsers');\n        $csv_content[] = $csv_row;\n\n        foreach ($companys as $entity => $student) {\n            $csv_row = [];\n            // user official code\n            $csv_row[] = $entity;\n            $csv_row[] = count($student);\n            $total += count($student);\n            $csv_content[] = $csv_row;\n        }\n\n        $csv_row = [];\n        // user official code\n        $csv_row[] = get_lang('GeneralTotal');\n        $csv_row[] = $total;\n        $csv_content[] = $csv_row;\n        Export::arrayToCsv($csv_content, 'reporting_company_resume');\n        exit;\n    }\n\n    /**\n     * Generates a structure to show the links or names for the authors by lesson report.\n     *\n     * @param array $students\n     * @param array $studentRegistered\n     * @param       $lpCourseCode\n     */\n    public static function getStudentDataToReportByLp($students = [], $studentRegistered = [], $lpCourseCode)\n    {\n        $data = [];\n        $totalStudents = 0;\n        $data['csv'] = '';\n        $data['html'] = '';\n        $icon = Display::return_icon('statistics.png', get_lang('Stats'));\n        foreach ($students as $student) {\n            $lpSessionId = isset($student['session_id']) ? (int) $student['session_id'] : 0;\n            $studentId = (int) $student['id'];\n            if (!isset($studentRegistered[$studentId][$lpSessionId])) {\n                $url = api_get_path(WEB_CODE_PATH).\"mySpace/myStudents.php?details=true&student=$studentId\";\n                if (0 != $lpSessionId) {\n                    $url .= \"&id_session=$lpSessionId\";\n                }\n                $url .= \"&course=$lpCourseCode\";\n                $reportLink = Display::url(\n                    $icon,\n                    $url\n                );\n                $studentName = $student['complete_name'].\"(\".$student['company'].\")\";\n                $studentRegistered[$studentId][$lpSessionId] = $student;\n                $data['csv'] .= $studentName.' / ';\n                $data['html'] .= \"$reportLink <strong>$studentName</strong><br>\";\n                $totalStudents++;\n            }\n        }\n        $data['student_registered'] = $studentRegistered;\n        $data['total_students'] = $totalStudents;\n\n        return $data;\n    }\n\n    /**\n     * * Generates a structure to show the names for the authors by lesson report by item.\n     *\n     * @param array  $students\n     * @param array  $studentProcessed\n     * @param string $typeReport\n     * @param false  $csv\n     */\n    public static function getStudentDataToReportByLpItem($students = [], $studentProcessed = [], $typeReport = '', $csv = false)\n    {\n        $totalStudent = count($students);\n        $sessionIcon = Display::return_icon(\n            'admin_star.png',\n            get_lang('StudentInSessionCourse'),\n            [],\n            ICON_SIZE_MEDIUM\n        );\n        $classIcon = Display::return_icon(\n            'group_summary.png',\n            get_lang('UsersInsideClass'),\n            '',\n            ICON_SIZE_MEDIUM\n        );\n        /* use 'for' to performance */\n        for ($i = 0; $i < $totalStudent; $i++) {\n            $student = $students[$i];\n            $studentId = $student['id'];\n            $lpItemIdStudent = $student['lp_item_id'];\n            $sessionId = isset($student['session_id']) ? (int) $student['session_id'] : 0;\n            $studentName = $student['complete_name'];\n            $studentCompany = $student['company'];\n            $studentName = \"$studentName($studentCompany)\";\n            $type = isset($student['type']) ? $student['type'] : null;\n            $icon = null;\n            if (0 != $sessionId) {\n                $icon = $sessionIcon;\n            }\n            if ('class' == $typeReport) {\n                $icon = $classIcon;\n            }\n            $studentString = \"$icon $studentName\";\n            if (0 != $sessionId) {\n                $studentString = \"<strong>$studentString</strong>\";\n            }\n            if ($csv == false) {\n                $studentProcessed[$lpItemIdStudent][$type][$studentId] = $studentString.'<br>';\n            } else {\n                $studentProcessed[$lpItemIdStudent][$type][$studentId] = \"$studentName / \";\n            }\n        }\n\n        return $studentProcessed;\n    }\n\n    /**\n     * Displays a list as a table of users who were enrolled in the lessons.\n     * It is necessary that in the extra field, a company is defined.\n     *\n     * @param string|null $startDate\n     * @param string|null $endDate\n     */\n    public static function displayResumeCompany(\n        $startDate = null,\n        $endDate = null\n    ) {\n        $companys = self::getCompanyLearnpathSubscription($startDate, $endDate);\n        $tableHtml = '';\n        // Printing table\n        $total = 0;\n        $table = \"<div class='table-responsive'><table class='table table-hover table-striped table-bordered data_table'>\";\n\n        $displayText = get_lang('Company');\n        $table .= \"<thead><tr><th class='th-header'>$displayText</th><th class='th-header'> \".get_lang('CountOfSubscribedUsers').\" </th></tr></thead><tbody>\";\n\n        foreach ($companys as $entity => $student) {\n            $table .= \"<tr><td>$entity</td><td>\".count($student).\"</td></tr>\";\n            $total += count($student);\n        }\n        $table .= \"<tr><td>\".get_lang('GeneralTotal').\"</td><td>$total</td></tr>\";\n        $table .= '</tbody></table></div>';\n\n        if (!empty($startDate) or !empty($endDate)) {\n            $tableHtml = $table;\n        }\n\n        $form = new FormValidator('searchDate', 'get');\n        $form->addHidden('display', 'company');\n        $today = new DateTime();\n        if (empty($startDate)) {\n            $startDate = api_get_local_time($today->modify('first day of this month')->format('Y-m-d'));\n        }\n        if (empty($endDate)) {\n            $endDate = api_get_local_time($today->modify('last day of this month')->format('Y-m-d'));\n        }\n        $form->addDatePicker(\n            'startDate',\n            get_lang('DateStart'),\n            [\n                'value' => $startDate,\n            ]);\n        $form->addDatePicker(\n            'endDate',\n            get_lang('DateEnd'),\n            [\n                'value' => $endDate,\n            ]);\n        $form->addButtonSearch(get_lang('Search'));\n        if (count($companys) != 0) {\n            //$form->addButtonSave(get_lang('Ok'), 'export');\n            $form\n                ->addButton(\n                    'export_csv',\n                    get_lang('ExportAsCSV'),\n                    'check',\n                    'primary',\n                    null,\n                    null,\n                    [\n                    ]\n                );\n        }\n\n        $tableContent = $form->returnForm();\n        $tableContent .= $tableHtml;\n        // $tableContent .= $table->return_table();\n\n        $tpl = new Template('', false, false, false, false, false, false);\n        $tpl->assign('table', $tableContent);\n        $templateName = $tpl->get_template('my_space/course_summary.tpl');\n        $tpl->display($templateName);\n    }\n\n    /**\n     *  Displays a list as a table of teachers who are set authors by a extra_field authors.\n     *\n     * @param string|null $startDate\n     * @param string|null $endDate\n     * @param bool        $csv\n     */\n    public static function displayResumeLP(\n        $startDate = null,\n        $endDate = null,\n        $csv = false\n    ) {\n        $tblExtraField = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $tblCourse = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tblExtraFieldValue = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tblLpItem = Database::get_course_table(TABLE_LP_ITEM);\n        $tblLp = Database::get_course_table(TABLE_LP_MAIN);\n        $tblAccessUrlCourse = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n        $accessUrlFilter = '';\n        if (api_is_multiple_url_enabled()) {\n            $urlId = api_get_current_access_url_id();\n            $accessUrlFilter = \" INNER JOIN $tblAccessUrlCourse aurc\n                      ON (c.id = aurc.c_id AND aurc.access_url_id = $urlId)\";\n        }\n        $query = \"\n        SELECT DISTINCT\n            lp.name,\n            lpi.title,\n            lp.id as lp_id,\n            lpi.id AS lp_item_id,\n            REPLACE (efv.value, ';', ',') AS users_id,\n            c.title AS course_title,\n            c.code AS course_code\n        FROM $tblExtraFieldValue AS efv\n        INNER JOIN $tblExtraField AS ef\n        ON (\n            efv.field_id = ef.id AND\n            ef.variable = 'authorlpitem' AND\n            efv.value != ''\n            )\n        INNER JOIN $tblLpItem AS lpi\n        ON (efv.item_id = lpi.iid)\n        INNER JOIN $tblLp AS lp\n        ON (lpi.lp_id = lp.iid AND lpi.c_id = lp.c_id)\n        INNER JOIN $tblCourse AS c\n        ON (lp.c_id = c.id)\n        $accessUrlFilter\";\n        $queryResult = Database::query($query);\n        $dataTeachers = Database::store_result($queryResult, 'ASSOC');\n        $totalData = count($dataTeachers);\n        $lpItems = [];\n        $teachers = [];\n        $users = [];\n        $learningPaths = [];\n        $csvContent = [];\n        $htmlData = '';\n        /* use 'for' to performance */\n        for ($i = 0; $i < $totalData; $i++) {\n            $row = $dataTeachers[$i];\n            $lpId = $row['lp_id'];\n            $lpItems[] = $lpId;\n            $authorData = $row['users_id'];\n            $learningPaths[$lpId] = $row;\n            if (strpos($authorData, \",\") === false) {\n                if (!isset($users[$authorData])) {\n                    $users[$authorData] = api_get_user_info($authorData);\n                }\n                $teachers[$authorData][$lpId] = $users[$authorData];\n                $learningPaths[$lpId]['teachers'][$authorData] = $users[$authorData];\n            } else {\n                $items = explode(',', $authorData);\n                $totalItems = count($items);\n                for ($j = 0; $j < $totalItems; $j++) {\n                    $authorData = $items[$j];\n                    if (!isset($users[$authorData])) {\n                        $users[$authorData] = api_get_user_info($authorData);\n                    }\n                    $teachers[$authorData][$lpId] = $users[$authorData];\n                    $learningPaths[$lpId]['teachers'][$authorData] = $users[$authorData];\n                }\n            }\n        }\n        $lpItems = array_unique($lpItems);\n        $whereInLp = implode(',', $lpItems);\n        if (count($lpItems) != 0) {\n            $registeredUsers = self::getCompanyLearnpathSubscription(\n                $startDate,\n                $endDate,\n                $whereInLp\n            );\n            foreach ($registeredUsers as $students) {\n                $totalStudents = count($students);\n                /* use 'for' to performance */\n                for ($i = 0; $i < $totalStudents; $i++) {\n                    $user = $students[$i];\n                    $lpId = $user['lp_item'];\n                    $studentId = $user['id'];\n                    $learningPaths[$lpId]['courseStudent'][$studentId] = $user;\n                }\n            }\n            $registeredUsersBySession = self::getSessionAddUserCourseFromTrackDefault(\n                $startDate,\n                $endDate,\n                $whereInLp\n            );\n            foreach ($registeredUsersBySession as $lpId => $student) {\n                $totalStudents = count($student);\n                /* use 'for' to performance */\n                for ($i = 0; $i < $totalStudents; $i++) {\n                    $user = $student[$i];\n                    $lpId = $user['lp'];\n                    $studentId = $user['id'];\n                    $learningPaths[$lpId]['sessionStudent'][$studentId] = $user;\n                    $learningPaths[$lpId]['sessionStudent'][$studentId]['session_id'] = $user;\n                }\n            }\n            $registeredUsersGroup = self::getCompanyLearnpathSubscription(\n                $startDate,\n                $endDate,\n                $whereInLp,\n                true\n            );\n            foreach ($registeredUsersGroup as $student) {\n                $totalStudents = count($student);\n                /* use 'for' to performance */\n                for ($i = 0; $i < $totalStudents; $i++) {\n                    $user = $student[$i];\n                    $lpId = $user['lp_item'];\n                    $studentId = $user['id'];\n                    $learningPaths[$lpId]['courseStudentGroup'][$studentId] = $user;\n                }\n            }\n\n            $index = 0;\n            $iconAdd = Display::return_icon('add.png', get_lang('ShowOrHide'), '', ICON_SIZE_SMALL);\n            $iconRemove = Display::return_icon('error.png', get_lang('ShowOrHide'), '', ICON_SIZE_SMALL);\n            $htmlData = \"<div class='table-responsive'>\n            <table class='table table-hover table-striped table-bordered data_table'>\n            <thead>\n                <tr>\n                    <th class='th-header'>\".get_lang('Author').\"</th>\n                    <th class='th-header'>\".get_lang('LearningPathList').\"</th>\n                    <th class='th-header'>\".get_lang('CountOfSubscribedUsers').\"</th>\n                    <th class='th-header'>\".get_lang('StudentList').\"</th>\n                </tr>\n            </thead>\n                <tbody>\";\n            $lastTeacher = '';\n            /* csv */\n            $csv_row = [];\n            $csv_row[] = get_lang('Author');\n            $csv_row[] = get_lang('LearningPathList');\n            $csv_row[] = get_lang('CountOfSubscribedUsers');\n            $csv_row[] = get_lang('StudentList');\n            $csvContent[] = $csv_row;\n            $studentsName = '';\n            /* csv */\n            foreach ($teachers as $authorLId => $teacher) {\n                $totalStudents = 0;\n                foreach ($teacher as $lpId => $teacherData) {\n                    $lpSessionId = 0;\n                    $lpData = $learningPaths[$lpId];\n                    $printTeacherName = ($lastTeacher != $teacherData['complete_name']) ? $teacherData['complete_name'] : '';\n                    $htmlData .= \"<tr><td>$printTeacherName</td>\";\n                    $hiddenField = 'student_show_'.$index;\n                    $hiddenFieldLink = 'student_show_'.$index.'_';\n                    $lpCourseCode = $lpData['course_code'];\n                    $lpName = $lpData['name'];\n                    $courseStudent = isset($lpData['courseStudent']) ? $lpData['courseStudent'] : [];\n                    $courseStudentGroup = isset($lpData['courseStudentGroup']) ? $lpData['courseStudentGroup'] : [];\n                    $sessionStudent = isset($lpData['sessionStudent']) ? $lpData['sessionStudent'] : [];\n                    $htmlData .= \"<td>$lpName</td><td>\".count($courseStudent).\" ( \".count($sessionStudent).\" )</td><td>\";\n                    $csv_row = [];\n                    $csv_row[] = $printTeacherName;\n                    $csv_row[] = $lpName;\n                    $csv_row[] = count($courseStudent).' ( '.count($sessionStudent).\" )\";\n                    if (!empty($courseStudent)\n                        || !empty($courseStudentGroup)\n                        || !empty($sessionStudent)\n                    ) {\n                        $htmlData .= \"<a href='#!' id='$hiddenFieldLink' onclick='showHideStudent(\\\"$hiddenField\\\")'>\n                        <div class='icon_add'>$iconAdd</div>\n                        <div class='icon_remove hidden'>$iconRemove</div>\n                        </a>\n                        <div id='$hiddenField' class='hidden'>\";\n                        $studentRegistered = [];\n\n                        $tempArray = self::getStudentDataToReportByLp($courseStudent, $studentRegistered, $lpCourseCode);\n                        $studentsName .= $tempArray['csv'];\n                        $htmlData .= $tempArray['html'];\n                        $studentRegistered = $tempArray['student_registered'];\n                        $totalStudents += $tempArray['total_students'];\n\n                        $tempArray = self::getStudentDataToReportByLp($sessionStudent, $studentRegistered, $lpCourseCode);\n                        $studentsName .= $tempArray['csv'];\n                        $htmlData .= $tempArray['html'];\n                        $studentRegistered = $tempArray['student_registered'];\n                        $totalStudents += $tempArray['total_students'];\n\n                        $tempArray = self::getStudentDataToReportByLp($courseStudentGroup, $studentRegistered, $lpCourseCode);\n                        $studentsName .= $tempArray['csv'];\n                        $htmlData .= $tempArray['html'];\n                        $studentRegistered = $tempArray['student_registered'];\n                        $totalStudents += $tempArray['total_students'];\n\n                        $htmlData .= \"</div>\";\n                    }\n                    $htmlData .= \"</td></tr>\";\n                    $index++;\n                    $csv_row[] = trim($studentsName, ' / ');\n                    $studentsName = '';\n                    $csvContent[] = $csv_row;\n                    $lastTeacher = $teacherData['complete_name'];\n                }\n                $htmlData .= \"<tr>\n                <td></td>\n                <td><strong>\".get_lang('LearnpathsTotal').\" \".count($teacher).\" </strong></td>\n                <td><strong>$totalStudents</strong></td>\n                <td></td>\n                </tr>\";\n            }\n            $htmlData .= \"</tbody>\n            </table>\n            </div>\";\n        }\n        if (false == $csv) {\n            $form = new FormValidator('searchDate', 'get');\n            $form->addHidden('display', 'learningPath');\n            $today = new DateTime();\n            if (empty($startDate)) {\n                $startDate = $today->modify('first day of this month')->format('Y-m-d');\n            }\n            if (empty($endDate)) {\n                $endDate = $today->modify('last day of this month')->format('Y-m-d');\n            }\n            $form->addDatePicker(\n                'startDate',\n                get_lang('DateStart'),\n                [\n                    'value' => $startDate,\n                ]);\n            $form->addDatePicker(\n                'endDate',\n                get_lang('DateEnd'),\n                [\n                    'value' => $endDate,\n                ]);\n            $form->addButtonSearch(get_lang('Search'));\n            if (0 != count($csvContent)) {\n                $form\n                    ->addButton(\n                        'export_csv',\n                        get_lang('ExportAsCSV'),\n                        'check',\n                        'primary',\n                        null,\n                        null,\n                        [\n                        ]\n                    );\n            }\n            $tableContent = $form->returnForm();\n            if (!empty($startDate) || !empty($endDate)) {\n                $tableContent .= $htmlData;\n            }\n            $tpl = new Template('', false, false, false, false, false, false);\n            $tpl->assign('table', $tableContent);\n            $templateName = $tpl->get_template('my_space/course_summary.tpl');\n            $tpl->display($templateName);\n        } else {\n            if (count($csvContent) != 0) {\n                Export::arrayToCsv($csvContent, 'reporting_lp_by_authors');\n            }\n        }\n    }\n\n    /**\n     *  Displays a list as a table of teachers who are set authors of lp's item by a extra_field authors.\n     *\n     * @param string|null $startDate\n     * @param string|null $endDate\n     * @param bool        $csv\n     */\n    public static function displayResumeLpByItem($startDate = null, $endDate = null, $csv = false)\n    {\n        $tableHtml = '';\n        $table = '';\n        $tblExtraField = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $tblExtraFieldValue = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tblLpItem = Database::get_course_table(TABLE_LP_ITEM);\n        $tblLp = Database::get_course_table(TABLE_LP_MAIN);\n        $tblAccessUrlCourse = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n        $accessUrlFilter = '';\n        if (api_is_multiple_url_enabled()) {\n            $urlId = api_get_current_access_url_id();\n            $accessUrlFilter = \" INNER JOIN $tblAccessUrlCourse aurc\n                      ON (lp.c_id = aurc.c_id AND aurc.access_url_id = $urlId)\";\n        }\n        $index = 0;\n        $cLpItems = [];\n        $cLpItemsAuthor = [];\n        $authorArray = [];\n        $studentArray = [];\n        $whereInLp = [];\n        $dataSet = [];\n        /** Get lp items only with authors */\n        $sql = \" SELECT\n                efv.item_id AS lp_item_id,\n                efv.value AS author\n            FROM $tblExtraFieldValue AS efv\n            INNER JOIN $tblExtraField AS ef\n            ON (\n                ef.variable = 'authorlpitem' AND\n                efv.field_id = ef.id AND\n                efv.value != ''\n            )\n            ORDER BY efv.item_id \";\n        $queryResult = Database::query($sql);\n        $data = Database::store_result($queryResult, 'ASSOC');\n        $totalData = count($data);\n        /* use 'for' to performance */\n        for ($i = 0; $i < $totalData; $i++) {\n            $cLpItemsAuthor[$data[$i]['lp_item_id']] = $data[$i]['author'];\n        }\n        /** Get lp items only with price */\n        $sql = \" SELECT\n               lp.iid AS lp_id,\n               lp.name AS lp_name,\n               efv.item_id AS lp_item_id,\n               lpi.title AS title,\n               efv.value AS price\n            FROM $tblExtraFieldValue AS efv\n            INNER JOIN $tblExtraField AS ef\n            ON (\n                ef.variable = 'price' AND\n                efv.field_id = ef.id AND\n                efv.value > 0\n            )\n            INNER JOIN $tblLpItem AS lpi\n            ON (lpi.iid = efv.item_id)\n            INNER JOIN $tblLp AS lp\n            ON (lpi.lp_id = lp.iid AND lpi.c_id = lp.c_id)\n            $accessUrlFilter\";\n        $queryResult = Database::query($sql);\n        $data = Database::store_result($queryResult, 'ASSOC');\n        $totalData = count($data);\n        /* use 'for' to performance */\n        for ($i = 0; $i < $totalData; $i++) {\n            $item = $data[$i];\n            $lpItemId = (int) $item['lp_item_id'];\n            $whereInLp[] = $item['lp_id'];\n            $author = isset($cLpItemsAuthor[$lpItemId]) ? $cLpItemsAuthor[$lpItemId] : null;\n            $item['author'] = $author;\n            if (!empty($author)) {\n                $cLpItems[count($cLpItems)] = $item;\n            }\n        }\n        $totalLpItems = count($cLpItems);\n        $tableNoData = \"<div class='table-responsive'>\n                <table class='table table-hover table-striped table-bordered data_table'>\n                <thead>\n                    <tr>\n                    <th class='th-header'>\".get_lang('NoDataAvailable').'</th>\n                </tr>\n                </thead>\n                </tbody>\n                </tbody>\n                </table>\n                </div>';\n        if (0 == $totalLpItems) {\n            $tableHtml = $tableNoData;\n        } elseif (0 == count($whereInLp)) {\n            $tableHtml = $tableNoData;\n        } else {\n            $whereInLp = array_unique($whereInLp);\n            $whereInLp = implode(',', $whereInLp);\n            $registeredUsersBySession = self::getSessionAddUserCourseFromTrackDefault(\n                $startDate,\n                $endDate,\n                $whereInLp\n            );\n            $registeredUsersInCourse = self::getUserSubscribedInCourseByDateAndLp($startDate, $endDate, $whereInLp);\n            $registeredUsersInLp = self::getCompanyLearnpathSubscription(\n                $startDate,\n                $endDate,\n                $whereInLp\n            );\n            $registeredGroupsInLp = self::getCompanyLearnpathSubscription(\n                $startDate,\n                $endDate,\n                $whereInLp,\n                true\n            );\n            /* use 'for' to performance */\n            for ($i = 0; $i < $totalLpItems; $i++) {\n                $lpItem = $cLpItems[$i];\n                $lpItemId = $lpItem['lp_item_id'];\n                $author = str_replace(';', ',', $lpItem['author']);\n                $tempArrayAuthor = explode(',', $author);\n                $byCourse = $registeredUsersInLp[$lpItemId] ?? [];\n                $byCourseGroups = $registeredGroupsInLp[$lpItemId] ?? [];\n                $bySession = $registeredUsersBySession[$lpItemId] ?? [];\n                $byUserInCourse = $registeredUsersInCourse[$lpItemId] ?? [];\n                if (is_array($tempArrayAuthor)) {\n                    $totalAuthors = count($tempArrayAuthor);\n                    for ($j = 0; $j < $totalAuthors; $j++) {\n                        if (!isset($authorArray[$tempArrayAuthor[$j]])) {\n                            $authorArray[$tempArrayAuthor[$j]] = api_get_user_info($tempArrayAuthor[$j]);\n                        }\n                        $dataSet[$tempArrayAuthor[$j]][$lpItemId] = [\n                            'course' => $byCourse,\n                            'courseGroups' => $byCourseGroups,\n                            'session' => $bySession,\n                            'lp_item' => $lpItem,\n                            'course_user' => $byUserInCourse,\n                        ];\n                    }\n                } else {\n                    if (!isset($authorArray[$author])) {\n                        $authorArray[$author] = api_get_user_info($author);\n                    }\n                    $dataSet[$author][$lpItemId] = [\n                        'course' => $byCourse,\n                        'courseGroups' => $byCourseGroups,\n                        'session' => $bySession,\n                        'lp_item' => $lpItem,\n                        'course_user' => $byUserInCourse,\n                    ];\n                }\n            }\n        }\n        if ($csv == false) {\n            if (empty($tableHtml)) {\n                $table .= \"<div class='table-responsive'>\n                    <table class='table table-hover table-striped table-bordered data_table'>\n                    <thead>\n                    <tr>\n                    <th class='th-header'>\".get_lang('Author').\"</th>\n                    <th class='th-header'>\".get_lang('ContentList').\"</th>\n                    <th class='th-header'>\".get_lang('Tariff').\"</th>\n                    <th class='th-header'>\".get_lang('CountOfSubscribedUsers').\"</th>\n                    <th class='th-header'>\".get_lang('ToInvoice').\"</th>\n                    <th class='th-header'>\".get_lang('StudentList').\"</th>\n                    </tr>\n                    </thead>\n                    <tbody>\";\n                //Icon Constant\n                $iconAdd = Display::return_icon('add.png', get_lang('ShowOrHide'), '', ICON_SIZE_SMALL);\n                $iconRemove = Display::return_icon('error.png', get_lang('ShowOrHide'), '', ICON_SIZE_SMALL);\n\n                $lastAuthor = '';\n                $total = 0;\n                foreach ($dataSet as $authorId => $lpItems) {\n                    $authorTemp = $authorArray[$authorId];\n                    $totalSudent = 0;\n                    foreach ($lpItems as $lpItem) {\n                        $totalStudents = 0;\n                        $itemLp = $lpItem['lp_item'];\n                        $title = $itemLp['title'];\n                        $price = $itemLp['price'];\n                        $byCourse = $lpItem['course'];\n                        $byCourseGroups = $lpItem['courseGroups'];\n                        $bySession = $lpItem['session'];\n                        $byUserInCourse = $lpItem['course_user'];\n                        $hide = \"class='author_$authorId hidden' \";\n                        $tableTemp = '';\n                        if ($lastAuthor != $authorTemp) {\n                            $table .= \"<tr><td>\".$authorTemp['complete_name'].\"</td>\";\n                        } else {\n                            $table .= \"<tr $hide ><td></td>\";\n                        }\n                        $table .= \"<td>$title</td><td>$price</td>\";\n                        $studentRegister = count($byCourse);\n                        $studentGroupsRegister = count($byCourseGroups);\n                        $studentRegisterBySession = count($bySession);\n                        $usersInCourseCount = count($byUserInCourse);\n\n                        $hiddenField = 'student_show_'.$index;\n                        $hiddenFieldLink = 'student_show_'.$index.'_';\n                        if (0 != $studentRegister ||\n                            0 != $studentRegisterBySession ||\n                            0 != $studentGroupsRegister ||\n                            0 != $usersInCourseCount\n                        ) {\n                            $tableTemp .= \"<td>\n                                <a href='#!' id='$hiddenFieldLink' onclick='showHideStudent(\\\"$hiddenField\\\")'>\n                                <div class='icon_add'>$iconAdd</div>\n                                <div class='icon_remove hidden'>$iconRemove</div>\n                                </a>\n                                <div id='$hiddenField' class='hidden'>\";\n                            $studentProcessed = [];\n                            /* Student by course*/\n                            $studentProcessed = self::getStudentDataToReportByLpItem($byCourse, $studentProcessed);\n                            /* Student by Class*/\n                            $studentProcessed = self::getStudentDataToReportByLpItem($byCourseGroups, $studentProcessed, 'class');\n                            /* Student by sessions*/\n                            $studentProcessed = self::getStudentDataToReportByLpItem($bySession, $studentProcessed);\n                            // Students in course*/\n                            $studentProcessed = self::getStudentDataToReportByLpItem($byUserInCourse, $studentProcessed);\n                            $index++;\n                            foreach ($studentProcessed as $lpItemId => $item) {\n                                foreach ($item as $type => $student) {\n                                    foreach ($student as $userId => $text) {\n                                        if ('LearnpathSubscription' == $type) {\n                                            $tableTemp .= $text;\n                                            $totalStudents++;\n                                        } else {\n                                            if (!isset($studentProcessed[$lpItemId]['LearnpathSubscription'])) {\n                                                $tableTemp .= $text;\n                                                $totalStudents++;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            $tableTemp .= \"</div></td>\";\n                        } else {\n                            $tableTemp .= \"<td></td>\";\n                        }\n                        $table .= \"<td>$totalStudents</td>\";\n                        $invoicing = ($totalStudents * $price);\n                        $table .= \"<td>$invoicing</td>\";\n                        $total += $invoicing;\n                        $totalSudent += $totalStudents;\n                        $table .= $tableTemp.\"</tr>\";\n                        $lastAuthor = $authorTemp;\n                    }\n                    $hiddenFieldLink = 'student__show_'.$index.'_';\n                    $index++;\n                    $table .= \"<tr>\n                    <th class='th-header'></th>\n                    <th class='th-header'>\n                            <a href='#!' id='$hiddenFieldLink' onclick='ShowMoreAuthor(\\\"$authorId\\\")'>\n                                <div class='icon_add_author_$authorId'>$iconAdd</div>\n                                <div class='icon_remove_author_$authorId hidden'>$iconRemove</div>\n                            </a>\n                        </th>\n                    <th class='th-header'></th>\n                    <th class='th-header'>$totalSudent</th>\n                    <th class='th-header'>$total</th>\n                    <th class='th-header'></tr>\";\n                    $total = 0;\n                }\n                $table .= \"</tbody></table></div>\";\n                $tableHtml = $table;\n            }\n\n            $form = new FormValidator('searchDate', 'get');\n            $form->addHidden('display', 'learningPathByItem');\n            $today = new DateTime();\n            if (empty($startDate)) {\n                $startDate = $today->modify('first day of this month')->format('Y-m-d');\n            }\n            if (empty($endDate)) {\n                $endDate = $today->modify('last day of this month')->format('Y-m-d');\n            }\n            $form->addDatePicker(\n                'startDate',\n                get_lang('DateStart'),\n                [\n                    'value' => $startDate,\n                ]\n            );\n            $form->addDatePicker(\n                'endDate',\n                get_lang('DateEnd'),\n                [\n                    'value' => $endDate,\n                ]\n            );\n            $form->addButtonSearch(get_lang('Search'));\n\n            if (count($dataSet) != 0) {\n                $form->addButton(\n                    'export_csv',\n                    get_lang('ExportAsCSV'),\n                    'check',\n                    'primary',\n                    null,\n                    null,\n                    [\n                    ]\n                );\n            }\n            $tableContent = $form->returnForm();\n            $tableContent .= $tableHtml;\n            $tpl = new Template('', false, false, false, false, false, false);\n            $tpl->assign('table', $tableContent);\n            $templateName = $tpl->get_template('my_space/course_summary.tpl');\n            $tpl->display($templateName);\n        } else {\n            $csv_content = [];\n            $csv_row = [];\n            $csv_row[] = get_lang('Author');\n            $csv_row[] = get_lang('ContentList');\n            $csv_row[] = get_lang('Tariff');\n            $csv_row[] = get_lang('CountOfSubscribedUsers');\n            $csv_row[] = get_lang('ToInvoice');\n            $csv_row[] = get_lang('StudentList');\n            $csv_content[] = $csv_row;\n            $total = 0;\n            foreach ($dataSet as $authorId => $lpItems) {\n                $authorTemp = $authorArray[$authorId];\n                $totalSudent = 0;\n                foreach ($lpItems as $lpItem) {\n                    $totalStudents = 0;\n                    $itemLp = $lpItem['lp_item'];\n                    $itemLpId = $itemLp['lp_item_id'];\n                    $title = $itemLp['title'];\n                    $price = $itemLp['price'];\n                    $byCourse = $lpItem['course'];\n                    $bySession = $lpItem['session'];\n                    $byCourseGroups = $lpItem['courseGroups'];\n                    $byUserInCourse = $lpItem['course_user'];\n\n                    $csv_row = [];\n                    $csv_row[] = $authorTemp['complete_name'];\n                    $csv_row[] = $title;\n                    $csv_row[] = $price;\n\n                    $studentRegister = count($byCourse);\n                    $studentRegisterBySession = count($bySession);\n                    $studentGroupsRegister = count($byCourseGroups);\n\n                    $studentsName = '';\n                    if (0 != $studentRegister ||\n                        0 != $studentRegisterBySession ||\n                        0 != $studentGroupsRegister) {\n                        $studentProcessed = [];\n                        /* Student by course*/\n                        $studentProcessed = self::getStudentDataToReportByLpItem($byCourse, $studentProcessed, '', true);\n                        /* Student by Class*/\n                        $studentProcessed = self::getStudentDataToReportByLpItem($byCourseGroups, $studentProcessed, 'class', true);\n                        /* Student by sessions*/\n                        $studentProcessed = self::getStudentDataToReportByLpItem($bySession, $studentProcessed, '', true);\n                        // Students in course*/\n                        $studentProcessed = self::getStudentDataToReportByLpItem($byUserInCourse, $studentProcessed, '', true);\n\n                        $index++;\n                        foreach ($studentProcessed as $lpItemId => $item) {\n                            foreach ($item as $type => $student) {\n                                foreach ($student as $userId => $text) {\n                                    if ('LearnpathSubscription' == $type) {\n                                        $studentsName .= $text;\n                                        $totalStudents++;\n                                    } else {\n                                        if (!isset($studentProcessed[$lpItemId]['LearnpathSubscription'])) {\n                                            $studentsName .= $text;\n                                            $totalStudents++;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    $csv_row[] = $totalStudents;\n                    $csv_row[] = $price * $totalStudents;\n                    $csv_row[] = trim($studentsName, \" / \");\n                    $csv_content[] = $csv_row;\n                }\n            }\n            Export::arrayToCsv($csv_content, 'reporting_lp_by_authors');\n        }\n    }\n\n    public static function getSessionAddUserCourseFromTrackDefault(\n        $startDate = null,\n        $endDate = null,\n        $whereInLp = null\n    ) {\n        $whereInLp = Database::escape_string($whereInLp);\n        $data = [];\n        $tblTrackDefault = Database::get_main_table(TABLE_STATISTIC_TRACK_E_DEFAULT);\n        $tblSessionRelCourseUser = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tblLp = Database::get_course_table(TABLE_LP_MAIN);\n        $tblLpItem = Database::get_course_table(TABLE_LP_ITEM);\n        $tblUser = Database::get_main_table(TABLE_MAIN_USER);\n        $tblAccessUrlUser = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USER);\n        $accessUrlFilter = '';\n        if (api_is_multiple_url_enabled()) {\n            $urlId = api_get_current_access_url_id();\n            $accessUrlFilter = \" INNER JOIN $tblAccessUrlUser auru\n                      ON (u.id = auru.user_id AND auru.access_url_id = $urlId)\";\n        }\n\n        if (!empty($startDate)) {\n            $startDate = new DateTime($startDate);\n        } else {\n            $startDate = new DateTime();\n        }\n        if (!empty($endDate)) {\n            $endDate = new DateTime($endDate);\n        } else {\n            $endDate = new DateTime();\n        }\n        if (!empty($startDate) and !empty($endDate)) {\n            if ($startDate > $endDate) {\n                $dateTemp = $endDate;\n                $endDate = $startDate;\n                $startDate = $dateTemp;\n                unset($dateTemp);\n            }\n        }\n        $startDate = api_get_utc_datetime($startDate->setTime(0, 0, 0)->format('Y-m-d H:i:s'));\n        $endDate = api_get_utc_datetime($endDate->setTime(0, 0, 0)->format('Y-m-d H:i:s'));\n        $extra = '';\n        if (!empty($whereInLp)) {\n            $extra = \" AND lpi.lp_id in ($whereInLp) \";\n        }\n\n        $sql = \"SELECT DISTINCT\n            lp.iid AS lp,\n            lpi.iid AS lp_item,\n            lpi.iid AS lp_item_id,\n            td.default_value AS id,\n            srcu.session_id AS session_id,\n            u.username AS username,\n            td.default_date AS default_date,\n            td.default_event_type AS type,\n            u.firstname as firstname,\n            u.lastname as lastname\n        FROM $tblTrackDefault AS td\n        INNER JOIN $tblSessionRelCourseUser AS srcu\n        ON (td.default_value = srcu.user_id AND td.c_id = srcu.c_id)\n        INNER JOIN $tblLp AS lp\n        ON (lp.c_id = srcu.c_id)\n        INNER JOIN $tblLpItem AS lpi\n        ON (\n            lpi.c_id = srcu.c_id AND\n            lp.id = lpi.lp_id AND\n            lpi.c_id = lp.c_id\n        )\n        INNER JOIN $tblUser AS u\n        ON (u.id = srcu.user_id)\n        $accessUrlFilter\n        WHERE\n            td.default_event_type = 'session_add_user_course' AND\n            td.default_date >= '$startDate' AND\n            td.default_date <= '$endDate'\n            $extra\n        ORDER BY td.default_value \";\n        $queryResult = Database::query($sql);\n        $dataTrack = Database::store_result($queryResult, 'ASSOC');\n        foreach ($dataTrack as $item) {\n            $item['complete_name'] = api_get_person_name($item['firstname'], $item['lastname']);\n            $item['company'] = self::getCompanyOfUser($item['id']);\n            $data[$item['lp_item_id']][] = $item;\n        }\n\n        return $data;\n    }\n\n    public static function getUserSubscribedInCourseByDateAndLp(\n        $startDate = null,\n        $endDate = null,\n        $whereInLp = null\n    ): array {\n        $whereInLp = Database::escape_string($whereInLp);\n        $tblTrackDefault = Database::get_main_table(TABLE_STATISTIC_TRACK_E_DEFAULT);\n        $tblCourseRelUser = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        $tblLp = Database::get_course_table(TABLE_LP_MAIN);\n        $tblLpItem = Database::get_course_table(TABLE_LP_ITEM);\n        $tblUser = Database::get_main_table(TABLE_MAIN_USER);\n        $tblAccessUrlUser = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USER);\n        $accessUrlFilter = '';\n\n        if (api_is_multiple_url_enabled()) {\n            $urlId = api_get_current_access_url_id();\n            $accessUrlFilter = \" INNER JOIN $tblAccessUrlUser auru\n                ON (u.id = auru.user_id AND auru.access_url_id = $urlId)\";\n        }\n\n        $startDate = !empty($startDate) ? new DateTime($startDate) : new DateTime();\n        $endDate = !empty($endDate) ? new DateTime($endDate) : new DateTime();\n\n        $startDate = api_get_utc_datetime($startDate->setTime(0, 0)->format('Y-m-d H:i:s'));\n        $endDate = api_get_utc_datetime($endDate->setTime(0, 0)->format('Y-m-d H:i:s'));\n\n        $extra = '';\n\n        if (!empty($whereInLp)) {\n            $extra = \" AND lpi.lp_id in ($whereInLp) \";\n        }\n\n        $sql = \"SELECT DISTINCT\n                lp.iid AS lp,\n                lpi.iid AS lp_item,\n                lpi.iid AS lp_item_id,\n                u.id AS id,\n                u.username AS username,\n                td.default_date AS default_date,\n                td.default_event_type AS type,\n                u.firstname as firstname,\n                u.lastname as lastname\n            FROM $tblTrackDefault AS td\n            INNER JOIN $tblCourseRelUser AS cru ON td.c_id = cru.c_id\n            INNER JOIN $tblLp AS lp ON lp.c_id = cru.c_id\n            INNER JOIN $tblLpItem AS lpi\n                ON (lpi.c_id = cru.c_id AND lp.id = lpi.lp_id AND lpi.c_id = lp.c_id)\n            INNER JOIN $tblUser AS u ON u.id = cru.user_id\n            $accessUrlFilter\n            WHERE\n                td.default_event_type = '\".LOG_SUBSCRIBE_USER_TO_COURSE.\"'\n                AND td.default_date >= '$startDate'\n                AND td.default_date <= '$endDate'\n                AND td.default_value LIKE CONCAT('%s:2:\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\";i:', cru.user_id, ';%')\n                $extra\n            ORDER BY u.id\";\n\n        $result = Database::query($sql);\n\n        $data = [];\n\n        while ($item = Database::fetch_assoc($result)) {\n            $item['complete_name'] = api_get_person_name($item['firstname'], $item['lastname']);\n            $item['company'] = self::getCompanyOfUser($item['id']);\n\n            $data[$item['lp_item_id']][] = $item;\n        }\n\n        return $data;\n    }\n\n    /**\n     * Display a sortable table that contains an overview of all the reporting progress of all courses.\n     */\n    public static function display_tracking_course_overview()\n    {\n        $params = ['view' => 'admin', 'display' => 'courseoverview'];\n        $table = new SortableTable(\n            'tracking_session_overview',\n            ['MySpace', 'get_total_number_courses'],\n            ['MySpace', 'get_course_data_tracking_overview'],\n            1,\n            20,\n            'ASC',\n            null, [\n                'class' => 'table table-transparent',\n            ]\n        );\n        $table->additional_parameters = $params;\n        $table->set_column_filter(0, ['MySpace', 'course_tracking_filter']);\n        $tableContent = $table->return_table();\n\n        $tpl = new Template('', false, false, false, false, false, false);\n        $tpl->assign('table', $tableContent);\n        $templateName = $tpl->get_template('my_space/course_summary.tpl');\n        $tpl->display($templateName);\n    }\n\n    /**\n     * Get the total number of courses.\n     *\n     * @return int Total number of courses\n     */\n    public static function get_total_number_courses()\n    {\n        return CourseManager::count_courses(api_get_current_access_url_id());\n    }\n\n    /**\n     * Get data for the courses.\n     *\n     * @param int    $from        Inferior limit\n     * @param int    $numberItems Number of items to select\n     * @param string $column      Column to order on\n     * @param string $direction   Order direction\n     *\n     * @return array Results\n     */\n    public static function get_course_data_tracking_overview(\n        $from,\n        $numberItems,\n        $column,\n        $direction\n    ) {\n        switch ($column) {\n            default:\n            case 1:\n                $column = 'title';\n                break;\n        }\n\n        $courses = CourseManager::get_courses_list(\n            $from,\n            $numberItems,\n            $column,\n            $direction,\n             -1,\n            '',\n            api_get_current_access_url_id()\n        );\n\n        $list = [];\n        foreach ($courses as $course) {\n            $list[] = [\n                '0' => $course['code'],\n                'col0' => $course['code'],\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * Fills in course reporting data.\n     *\n     * @param int course code\n     * @param array $url_params additional url parameters\n     * @param array $row        the row information (the other columns)\n     *\n     * @return string html code\n     */\n    public static function course_tracking_filter($course_code, $url_params, $row)\n    {\n        $course_code = $row[0];\n        $courseInfo = api_get_course_info($course_code);\n        $courseId = $courseInfo['real_id'];\n\n        $tpl = new Template('', false, false, false, false, false, false);\n        $data = null;\n\n        // database table definition\n        $tbl_course_rel_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        // getting all the courses of the user\n        $sql = \"SELECT *\n                FROM $tbl_user AS u\n                INNER JOIN $tbl_course_rel_user AS cu\n                ON cu.user_id = u.user_id\n                WHERE cu.c_id = '\".$courseId.\"'\";\n        $result = Database::query($sql);\n        $time_spent = 0;\n        $progress = 0;\n        $nb_progress_lp = 0;\n        $score = 0;\n        $nb_score_lp = 0;\n        $nb_messages = 0;\n        $nb_assignments = 0;\n        $last_login_date = false;\n        $total_score_obtained = 0;\n        $total_score_possible = 0;\n        $total_questions_answered = 0;\n        while ($row = Database::fetch_object($result)) {\n            // get time spent in the course and session\n            $time_spent += Tracking::get_time_spent_on_the_course(\n                $row->user_id,\n                $courseInfo['real_id']\n            );\n            $progress_tmp = Tracking::get_avg_student_progress(\n                $row->user_id,\n                $course_code,\n                [],\n                null,\n                true\n            );\n\n            if ($progress_tmp) {\n                $progress += $progress_tmp[0];\n                $nb_progress_lp += $progress_tmp[1];\n            }\n            $score_tmp = Tracking::get_avg_student_score(\n                $row->user_id,\n                $course_code,\n                [],\n                null,\n                true\n            );\n            if (is_array($score_tmp)) {\n                $score += $score_tmp[0];\n                $nb_score_lp += $score_tmp[1];\n            }\n            $nb_messages += Tracking::count_student_messages(\n                $row->user_id,\n                $course_code\n            );\n            $nb_assignments += Tracking::count_student_assignments(\n                $row->user_id,\n                $course_code\n            );\n            $last_login_date_tmp = Tracking::get_last_connection_date_on_the_course(\n                $row->user_id,\n                $courseInfo,\n                null,\n                false\n            );\n            if ($last_login_date_tmp != false &&\n                $last_login_date == false\n            ) { // TODO: To be cleaned\n                $last_login_date = $last_login_date_tmp;\n            } elseif ($last_login_date_tmp != false && $last_login_date != false) {\n                // TODO: Repeated previous condition. To be cleaned.\n                // Find the max and assign it to first_login_date\n                if (strtotime($last_login_date_tmp) > strtotime($last_login_date)) {\n                    $last_login_date = $last_login_date_tmp;\n                }\n            }\n\n            $exercise_results_tmp = self::exercises_results($row->user_id, $course_code);\n            $total_score_obtained += $exercise_results_tmp['score_obtained'];\n            $total_score_possible += $exercise_results_tmp['score_possible'];\n            $total_questions_answered += $exercise_results_tmp['questions_answered'];\n        }\n        if ($nb_progress_lp > 0) {\n            $avg_progress = round($progress / $nb_progress_lp, 2);\n        } else {\n            $avg_progress = 0;\n        }\n        if ($nb_score_lp > 0) {\n            $avg_score = round($score / $nb_score_lp, 2);\n        } else {\n            $avg_score = '-';\n        }\n        if ($last_login_date) {\n            $last_login_date = api_convert_and_format_date(\n                $last_login_date,\n                DATE_FORMAT_SHORT,\n                date_default_timezone_get()\n            );\n        } else {\n            $last_login_date = '-';\n        }\n        if ($total_score_possible > 0) {\n            $total_score_percentage = round($total_score_obtained / $total_score_possible * 100, 2);\n        } else {\n            $total_score_percentage = 0;\n        }\n        if ($total_score_percentage > 0) {\n            $total_score = $total_score_obtained.'/'.$total_score_possible.' ('.$total_score_percentage.' %)';\n        } else {\n            $total_score = '-';\n        }\n\n        $data = [\n            'course_code' => $course_code,\n            'id' => $courseId,\n            'image' => $courseInfo['course_image_large'],\n            'image_small' => $courseInfo['course_image'],\n            'title' => $courseInfo['title'],\n            'url' => $courseInfo['course_public_url'],\n            'category' => $courseInfo['categoryName'],\n            'time_spent' => api_time_to_hms($time_spent),\n            'avg_progress' => $avg_progress,\n            'avg_score' => $avg_score,\n            'number_message' => $nb_messages,\n            'number_assignments' => $nb_assignments,\n            'total_score' => $total_score,\n            'questions_answered' => $total_questions_answered,\n            'last_login' => $last_login_date,\n        ];\n\n        $tpl->assign('data', $data);\n        $layout = $tpl->get_template('my_space/partials/tracking_course_overview.tpl');\n        $content = $tpl->fetch($layout);\n\n        return $content;\n    }\n\n    /**\n     * This function exports the table that we see in display_tracking_course_overview().\n     */\n    public static function export_tracking_course_overview()\n    {\n        // database table definition\n        $tbl_course_rel_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        // the values of the sortable table\n        if ($_GET['tracking_course_overview_page_nr']) {\n            $from = $_GET['tracking_course_overview_page_nr'];\n        } else {\n            $from = 0;\n        }\n        if ($_GET['tracking_course_overview_column']) {\n            $orderby = $_GET['tracking_course_overview_column'];\n        } else {\n            $orderby = 0;\n        }\n\n        if ($_GET['tracking_course_overview_direction']) {\n            $direction = $_GET['tracking_course_overview_direction'];\n        } else {\n            $direction = 'ASC';\n        }\n\n        $course_data = self::get_course_data_tracking_overview(\n            $from,\n            1000,\n            $orderby,\n            $direction\n        );\n\n        $csv_content = [];\n\n        // the first line of the csv file with the column headers\n        $csv_row = [];\n        $csv_row[] = get_lang('Course');\n        $csv_row[] = get_lang('AvgTimeSpentInTheCourse');\n        $csv_row[] = get_lang('AvgStudentsProgress');\n        $csv_row[] = get_lang('AvgCourseScore');\n        $csv_row[] = get_lang('TotalNumberOfMessages');\n        $csv_row[] = get_lang('TotalNumberOfAssignments');\n        $csv_row[] = get_lang('TotalExercisesScoreObtained');\n        $csv_row[] = get_lang('TotalExercisesScorePossible');\n        $csv_row[] = get_lang('TotalExercisesAnswered');\n        $csv_row[] = get_lang('TotalExercisesScorePercentage');\n        $csv_row[] = get_lang('LatestLogin');\n        $csv_content[] = $csv_row;\n\n        // the other lines (the data)\n        foreach ($course_data as $key => $course) {\n            $course_code = $course[0];\n            $courseInfo = api_get_course_info($course_code);\n            $course_title = $courseInfo['title'];\n            $courseId = $courseInfo['real_id'];\n\n            $csv_row = [];\n            $csv_row[] = $course_title;\n\n            // getting all the courses of the session\n            $sql = \"SELECT *\n                    FROM $tbl_user AS u\n                    INNER JOIN $tbl_course_rel_user AS cu\n                    ON cu.user_id = u.user_id\n                    WHERE cu.c_id = '\".$courseId.\"'\";\n            $result = Database::query($sql);\n            $time_spent = 0;\n            $progress = 0;\n            $nb_progress_lp = 0;\n            $score = 0;\n            $nb_score_lp = 0;\n            $nb_messages = 0;\n            $nb_assignments = 0;\n            $last_login_date = false;\n            $total_score_obtained = 0;\n            $total_score_possible = 0;\n            $total_questions_answered = 0;\n            while ($row = Database::fetch_object($result)) {\n                // get time spent in the course and session\n                $time_spent += Tracking::get_time_spent_on_the_course(\n                    $row->user_id,\n                    $courseId\n                );\n                $progress_tmp = Tracking::get_avg_student_progress(\n                    $row->user_id,\n                    $course_code,\n                    [],\n                    null,\n                    true\n                );\n                $progress += $progress_tmp[0];\n                $nb_progress_lp += $progress_tmp[1];\n                $score_tmp = Tracking::get_avg_student_score(\n                    $row->user_id,\n                    $course_code,\n                    [],\n                    null,\n                    true\n                );\n                if (is_array($score_tmp)) {\n                    $score += $score_tmp[0];\n                    $nb_score_lp += $score_tmp[1];\n                }\n                $nb_messages += Tracking::count_student_messages(\n                    $row->user_id,\n                    $course_code\n                );\n                $nb_assignments += Tracking::count_student_assignments(\n                    $row->user_id,\n                    $course_code\n                );\n\n                $last_login_date_tmp = Tracking::get_last_connection_date_on_the_course(\n                    $row->user_id,\n                    $courseInfo,\n                    null,\n                    false\n                );\n                if ($last_login_date_tmp != false && $last_login_date == false) {\n                    // TODO: To be cleaned.\n                    $last_login_date = $last_login_date_tmp;\n                } elseif ($last_login_date_tmp != false && $last_login_date == false) {\n                    // TODO: Repeated previous condition. To be cleaned.\n                    // Find the max and assign it to first_login_date\n                    if (strtotime($last_login_date_tmp) > strtotime($last_login_date)) {\n                        $last_login_date = $last_login_date_tmp;\n                    }\n                }\n\n                $exercise_results_tmp = self::exercises_results($row->user_id, $course_code);\n                $total_score_obtained += $exercise_results_tmp['score_obtained'];\n                $total_score_possible += $exercise_results_tmp['score_possible'];\n                $total_questions_answered += $exercise_results_tmp['questions_answered'];\n            }\n            if ($nb_progress_lp > 0) {\n                $avg_progress = round($progress / $nb_progress_lp, 2);\n            } else {\n                $avg_progress = 0;\n            }\n            if ($nb_score_lp > 0) {\n                $avg_score = round($score / $nb_score_lp, 2);\n            } else {\n                $avg_score = '-';\n            }\n            if ($last_login_date) {\n                $last_login_date = api_convert_and_format_date(\n                    $last_login_date,\n                    DATE_FORMAT_SHORT,\n                    date_default_timezone_get()\n                );\n            } else {\n                $last_login_date = '-';\n            }\n            if ($total_score_possible > 0) {\n                $total_score_percentage = round($total_score_obtained / $total_score_possible * 100, 2);\n            } else {\n                $total_score_percentage = 0;\n            }\n            // time spent in the course\n            $csv_row[] = api_time_to_hms($time_spent);\n            // student progress in course\n            $csv_row[] = $avg_progress;\n            // student score\n            $csv_row[] = $avg_score;\n            // student messages\n            $csv_row[] = $nb_messages;\n            // student assignments\n            $csv_row[] = $nb_assignments;\n            // student exercises results (obtained score, maximum score, number of exercises answered, score percentage)\n            $csv_row[] = $total_score_obtained;\n            $csv_row[] = $total_score_possible;\n            $csv_row[] = $total_questions_answered;\n            $csv_row[] = $total_score_percentage;\n            // last connection\n            $csv_row[] = $last_login_date;\n            $csv_content[] = $csv_row;\n        }\n        Export::arrayToCsv($csv_content, 'reporting_course_overview');\n        exit;\n    }\n\n    /**\n     * Display a sortable table that contains an overview of all the reporting\n     * progress of all sessions and all courses the user is subscribed to.\n     *\n     * @author Guillaume Viguier <guillaume@viguierjust.com>\n     */\n    public static function display_tracking_session_overview()\n    {\n        $head = '<table style=\"width: 100%;border:0;padding:0;border-collapse:collapse;table-layout: fixed\">';\n        $head .= '<tr>';\n        $head .= '<th width=\"155px\" style=\"border-left:0;border-bottom:0\"><span>'.get_lang('Course').'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0\"><span>'.cut(get_lang('AvgTimeSpentInTheCourse'), 6, true).'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0\"><span>'.cut(get_lang('AvgStudentsProgress'), 6, true).'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0\"><span>'.cut(get_lang('AvgCourseScore'), 6, true).'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0\"><span>'.cut(get_lang('TotalNumberOfMessages'), 6, true).'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0\"><span>'.cut(get_lang('TotalNumberOfAssignments'), 6, true).'</span></th>';\n        $head .= '<th width=\"105px\" style=\"border-bottom:0\"><span>'.get_lang('TotalExercisesScoreObtained').'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0\"><span>'.cut(get_lang('TotalExercisesAnswered'), 6, true).'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0;border-right:0;\"><span>'.get_lang('LatestLogin').'</span></th>';\n        $head .= '</tr></table>';\n\n        $params = ['view' => 'admin', 'display' => 'sessionoverview'];\n        $table = new SortableTable(\n            'tracking_session_overview',\n            ['MySpace', 'get_total_number_sessions'],\n            ['MySpace', 'get_session_data_tracking_overview'],\n            1\n        );\n        $table->additional_parameters = $params;\n\n        $table->set_header(0, '', false, null, ['style' => 'display: none']);\n        $table->set_header(\n            1,\n            get_lang('Session'),\n            true,\n            ['style' => 'font-size:8pt'],\n            ['style' => 'font-size:8pt']\n        );\n        $table->set_header(\n            2,\n            $head,\n            false,\n            ['style' => 'width:90%;border:0;padding:0;font-size:7.5pt;'],\n            ['style' => 'width:90%;padding:0;font-size:7.5pt;']\n        );\n        $table->set_column_filter(2, ['MySpace', 'session_tracking_filter']);\n        $table->display();\n    }\n\n    /**\n     * Get the total number of sessions.\n     *\n     * @return int Total number of sessions\n     */\n    public static function get_total_number_sessions()\n    {\n        return SessionManager::count_sessions(api_get_current_access_url_id());\n    }\n\n    /**\n     * Get data for the sessions.\n     *\n     * @param int    $from        Inferior limit\n     * @param int    $numberItems Number of items to select\n     * @param string $column      Column to order on\n     * @param string $direction   Order direction\n     *\n     * @return array Results\n     */\n    public static function get_session_data_tracking_overview(\n        $from,\n        $numberItems,\n        $column,\n        $direction\n    ) {\n        $from = (int) $from;\n        $numberItems = (int) $numberItems;\n        $direction = Database::escape_string($direction);\n        $columnName = 'name';\n        if ($column === 1) {\n            $columnName = 'id';\n        }\n\n        $options = [\n            'order' => \" $columnName $direction\",\n            'limit' => \" $from,$numberItems\",\n        ];\n        $sessions = SessionManager::formatSessionsAdminForGrid($options);\n        $list = [];\n        foreach ($sessions as $session) {\n            $list[] = [\n                '0' => $session['id'],\n                'col0' => $session['id'],\n                '1' => strip_tags($session['name']),\n                'col1' => strip_tags($session['name']),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * Fills in session reporting data.\n     *\n     * @param int   $session_id the id of the user\n     * @param array $url_params additonal url parameters\n     * @param array $row        the row information (the other columns)\n     *\n     * @return string html code\n     */\n    public static function session_tracking_filter($session_id, $url_params, $row)\n    {\n        $session_id = $row[0];\n        // the table header\n        $return = '<table class=\"table table-hover table-striped data_table\" style=\"width: 100%;border:0;padding:0;border-collapse:collapse;table-layout: fixed\">';\n\n        // database table definition\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        // getting all the courses of the user\n        $sql = \"SELECT * FROM $tbl_course AS c\n                INNER JOIN $tbl_session_rel_course AS sc\n                ON sc.c_id = c.id\n                WHERE sc.session_id = '\".$session_id.\"'\";\n        $result = Database::query($sql);\n        while ($row = Database::fetch_object($result)) {\n            $courseId = $row->c_id;\n            $courseInfo = api_get_course_info_by_id($courseId);\n            $return .= '<tr>';\n            // course code\n            $return .= '    <td width=\"157px\" >'.$row->title.'</td>';\n            // get the users in the course\n            $sql = \"SELECT u.user_id\n                    FROM $tbl_user AS u\n                    INNER JOIN $tbl_session_rel_course_rel_user AS scu\n                    ON u.user_id = scu.user_id\n                    WHERE scu.session_id = '\".$session_id.\"' AND scu.c_id = '\".$courseId.\"'\";\n            $result_users = Database::query($sql);\n            $time_spent = 0;\n            $progress = 0;\n            $nb_progress_lp = 0;\n            $score = 0;\n            $nb_score_lp = 0;\n            $nb_messages = 0;\n            $nb_assignments = 0;\n            $last_login_date = false;\n            $total_score_obtained = 0;\n            $total_score_possible = 0;\n            $total_questions_answered = 0;\n            while ($row_user = Database::fetch_object($result_users)) {\n                // get time spent in the course and session\n                $time_spent += Tracking::get_time_spent_on_the_course($row_user->user_id, $courseId, $session_id);\n                $progress_tmp = Tracking::get_avg_student_progress($row_user->user_id, $row->code, [], $session_id, true);\n                $progress += $progress_tmp[0];\n                $nb_progress_lp += $progress_tmp[1];\n                $score_tmp = Tracking::get_avg_student_score($row_user->user_id, $row->code, [], $session_id, true);\n                if (is_array($score_tmp)) {\n                    $score += $score_tmp[0];\n                    $nb_score_lp += $score_tmp[1];\n                }\n                $nb_messages += Tracking::count_student_messages($row_user->user_id, $row->code, $session_id);\n                $nb_assignments += Tracking::count_student_assignments($row_user->user_id, $row->code, $session_id);\n                $last_login_date_tmp = Tracking::get_last_connection_date_on_the_course(\n                    $row_user->user_id,\n                    $courseInfo,\n                    $session_id,\n                    false\n                );\n                if ($last_login_date_tmp != false && $last_login_date == false) {\n                    // TODO: To be cleaned.\n                    $last_login_date = $last_login_date_tmp;\n                } elseif ($last_login_date_tmp != false && $last_login_date != false) {\n                    // TODO: Repeated previous condition! To be cleaned.\n                    // Find the max and assign it to first_login_date\n                    if (strtotime($last_login_date_tmp) > strtotime($last_login_date)) {\n                        $last_login_date = $last_login_date_tmp;\n                    }\n                }\n\n                $exercise_results_tmp = self::exercises_results($row_user->user_id, $row->code, $session_id);\n                $total_score_obtained += $exercise_results_tmp['score_obtained'];\n                $total_score_possible += $exercise_results_tmp['score_possible'];\n                $total_questions_answered += $exercise_results_tmp['questions_answered'];\n            }\n            if ($nb_progress_lp > 0) {\n                $avg_progress = round($progress / $nb_progress_lp, 2);\n            } else {\n                $avg_progress = 0;\n            }\n            if ($nb_score_lp > 0) {\n                $avg_score = round($score / $nb_score_lp, 2);\n            } else {\n                $avg_score = '-';\n            }\n            if ($last_login_date) {\n                $last_login_date = api_convert_and_format_date(\n                    $last_login_date,\n                    DATE_FORMAT_SHORT,\n                    date_default_timezone_get()\n                );\n            } else {\n                $last_login_date = '-';\n            }\n            if ($total_score_possible > 0) {\n                $total_score_percentage = round($total_score_obtained / $total_score_possible * 100, 2);\n            } else {\n                $total_score_percentage = 0;\n            }\n            if ($total_score_percentage > 0) {\n                $total_score = $total_score_obtained.'/'.$total_score_possible.' ('.$total_score_percentage.' %)';\n            } else {\n                $total_score = '-';\n            }\n            // time spent in the course\n            $return .= '    <td><div>'.api_time_to_hms($time_spent).'</div></td>';\n            // student progress in course\n            $return .= '    <td><div>'.$avg_progress.'</div></td>';\n            // student score\n            $return .= '    <td><div>'.$avg_score.'</div></td>';\n            // student messages\n            $return .= '    <td><div>'.$nb_messages.'</div></td>';\n            // student assignments\n            $return .= '    <td><div>'.$nb_assignments.'</div></td>';\n            // student exercises results (obtained score, maximum score, number of exercises answered, score percentage)\n            $return .= '<td width=\"105px;\">'.$total_score.'</td>';\n            $return .= '<td>'.$total_questions_answered.'</td>';\n            // last connection\n            $return .= '    <td><div>'.$last_login_date.'</div></td>';\n            $return .= '<tr>';\n        }\n        $return .= '</table>';\n\n        return $return;\n    }\n\n    /**\n     * This function exports the table that we see in display_tracking_session_overview().\n     */\n    public static function export_tracking_session_overview()\n    {\n        // database table definition\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        // the values of the sortable table\n        $from = 0;\n        if ($_GET['tracking_session_overview_page_nr']) {\n            $from = $_GET['tracking_session_overview_page_nr'];\n        }\n\n        $orderby = 0;\n        if ($_GET['tracking_session_overview_column']) {\n            $orderby = $_GET['tracking_session_overview_column'];\n        }\n\n        $direction = 'ASC';\n        if ($_GET['tracking_session_overview_direction']) {\n            $direction = $_GET['tracking_session_overview_direction'];\n        }\n\n        $session_data = self::get_session_data_tracking_overview($from, 1000, $orderby, $direction);\n\n        $csv_content = [];\n\n        // the first line of the csv file with the column headers\n        $csv_row = [];\n        $csv_row[] = get_lang('Session');\n        $csv_row[] = get_lang('Course');\n        $csv_row[] = get_lang('AvgTimeSpentInTheCourse');\n        $csv_row[] = get_lang('AvgStudentsProgress');\n        $csv_row[] = get_lang('AvgCourseScore');\n        $csv_row[] = get_lang('TotalNumberOfMessages');\n        $csv_row[] = get_lang('TotalNumberOfAssignments');\n        $csv_row[] = get_lang('TotalExercisesScoreObtained');\n        $csv_row[] = get_lang('TotalExercisesScorePossible');\n        $csv_row[] = get_lang('TotalExercisesAnswered');\n        $csv_row[] = get_lang('TotalExercisesScorePercentage');\n        $csv_row[] = get_lang('LatestLogin');\n        $csv_content[] = $csv_row;\n\n        // the other lines (the data)\n        foreach ($session_data as $key => $session) {\n            $session_id = $session[0];\n            $session_title = $session[1];\n\n            // getting all the courses of the session\n            $sql = \"SELECT * FROM $tbl_course AS c\n                    INNER JOIN $tbl_session_rel_course AS sc\n                    ON sc.c_id = c.id\n                    WHERE sc.session_id = '\".$session_id.\"';\";\n            $result = Database::query($sql);\n            while ($row = Database::fetch_object($result)) {\n                $courseId = $row->c_id;\n                $courseInfo = api_get_course_info_by_id($courseId);\n                $csv_row = [];\n                $csv_row[] = $session_title;\n                $csv_row[] = $row->title;\n                // get the users in the course\n                $sql = \"SELECT scu.user_id\n                        FROM $tbl_user AS u\n                        INNER JOIN $tbl_session_rel_course_rel_user AS scu\n                        ON u.user_id = scu.user_id\n                        WHERE scu.session_id = '\".$session_id.\"' AND scu.c_id = '\".$courseId.\"'\";\n                $result_users = Database::query($sql);\n                $time_spent = 0;\n                $progress = 0;\n                $nb_progress_lp = 0;\n                $score = 0;\n                $nb_score_lp = 0;\n                $nb_messages = 0;\n                $nb_assignments = 0;\n                $last_login_date = false;\n                $total_score_obtained = 0;\n                $total_score_possible = 0;\n                $total_questions_answered = 0;\n                while ($row_user = Database::fetch_object($result_users)) {\n                    // get time spent in the course and session\n                    $time_spent += Tracking::get_time_spent_on_the_course($row_user->user_id, $courseId, $session_id);\n                    $progress_tmp = Tracking::get_avg_student_progress(\n                        $row_user->user_id,\n                        $row->code,\n                        [],\n                        $session_id,\n                        true\n                    );\n                    $progress += $progress_tmp[0];\n                    $nb_progress_lp += $progress_tmp[1];\n                    $score_tmp = Tracking::get_avg_student_score(\n                        $row_user->user_id,\n                        $row->code,\n                        [],\n                        $session_id,\n                        true\n                    );\n                    if (is_array($score_tmp)) {\n                        $score += $score_tmp[0];\n                        $nb_score_lp += $score_tmp[1];\n                    }\n                    $nb_messages += Tracking::count_student_messages(\n                        $row_user->user_id,\n                        $row->code,\n                        $session_id\n                    );\n\n                    $nb_assignments += Tracking::count_student_assignments(\n                        $row_user->user_id,\n                        $row->code,\n                        $session_id\n                    );\n\n                    $last_login_date_tmp = Tracking:: get_last_connection_date_on_the_course(\n                        $row_user->user_id,\n                        $courseInfo,\n                        $session_id,\n                        false\n                    );\n                    if ($last_login_date_tmp != false && $last_login_date == false) {\n                        // TODO: To be cleaned.\n                        $last_login_date = $last_login_date_tmp;\n                    } elseif ($last_login_date_tmp != false && $last_login_date == false) {\n                        // TODO: Repeated previous condition. To be cleaned.\n                        // Find the max and assign it to first_login_date\n                        if (strtotime($last_login_date_tmp) > strtotime($last_login_date)) {\n                            $last_login_date = $last_login_date_tmp;\n                        }\n                    }\n\n                    $exercise_results_tmp = self::exercises_results($row_user->user_id, $row->code, $session_id);\n                    $total_score_obtained += $exercise_results_tmp['score_obtained'];\n                    $total_score_possible += $exercise_results_tmp['score_possible'];\n                    $total_questions_answered += $exercise_results_tmp['questions_answered'];\n                }\n                if ($nb_progress_lp > 0) {\n                    $avg_progress = round($progress / $nb_progress_lp, 2);\n                } else {\n                    $avg_progress = 0;\n                }\n                if ($nb_score_lp > 0) {\n                    $avg_score = round($score / $nb_score_lp, 2);\n                } else {\n                    $avg_score = '-';\n                }\n                if ($last_login_date) {\n                    $last_login_date = api_convert_and_format_date(\n                        $last_login_date,\n                        DATE_FORMAT_SHORT,\n                        date_default_timezone_get()\n                    );\n                } else {\n                    $last_login_date = '-';\n                }\n                if ($total_score_possible > 0) {\n                    $total_score_percentage = round($total_score_obtained / $total_score_possible * 100, 2);\n                } else {\n                    $total_score_percentage = 0;\n                }\n                if ($total_score_percentage > 0) {\n                    $total_score = $total_score_obtained.'/'.$total_score_possible.' ('.$total_score_percentage.' %)';\n                } else {\n                    $total_score = '-';\n                }\n                // time spent in the course\n                $csv_row[] = api_time_to_hms($time_spent);\n                // student progress in course\n                $csv_row[] = $avg_progress;\n                // student score\n                $csv_row[] = $avg_score;\n                // student messages\n                $csv_row[] = $nb_messages;\n                // student assignments\n                $csv_row[] = $nb_assignments;\n                // student exercises results (obtained score, maximum score, number of exercises answered, score percentage)\n                $csv_row[] = $total_score_obtained;\n                $csv_row[] = $total_score_possible;\n                $csv_row[] = $total_questions_answered;\n                $csv_row[] = $total_score_percentage;\n                // last connection\n                $csv_row[] = $last_login_date;\n                $csv_content[] = $csv_row;\n            }\n        }\n        Export::arrayToCsv($csv_content, 'reporting_session_overview');\n        exit;\n    }\n\n    /**\n     * Get general information about the exercise performance of the user\n     * the total obtained score (all the score on all the questions)\n     * the maximum score that could be obtained\n     * the number of questions answered\n     * the success percentage.\n     *\n     * @param int    $user_id     the id of the user\n     * @param string $course_code the course code\n     * @param int    $session_id\n     *\n     * @return array\n     *\n     * @author Patrick Cool <patrick.cool@UGent.be>, Ghent University, Belgium\n     *\n     * @version Dokeos 1.8.6\n     *\n     * @since November 2008\n     */\n    public static function exercises_results($user_id, $course_code, $session_id = 0)\n    {\n        $user_id = (int) $user_id;\n        $courseId = api_get_course_int_id($course_code);\n        $table = Database::get_main_table(TABLE_STATISTIC_TRACK_E_EXERCISES);\n\n        $sql = \"SELECT exe_result, exe_weighting\n                FROM $table\n                WHERE\n                    c_id = $courseId AND\n                    exe_user_id = $user_id\";\n\n        $session_id = (int) $session_id;\n        if (!empty($session_id)) {\n            $sql .= \" AND session_id = '\".$session_id.\"' \";\n        }\n        $result = Database::query($sql);\n        $score_obtained = 0;\n        $score_possible = 0;\n        $questions_answered = 0;\n        while ($row = Database::fetch_array($result)) {\n            $score_obtained += $row['exe_result'];\n            $score_possible += $row['exe_weighting'];\n            $questions_answered++;\n        }\n\n        $percentage = null;\n        if ($score_possible != 0) {\n            $percentage = round(($score_obtained / $score_possible * 100), 2);\n        }\n\n        return [\n            'score_obtained' => $score_obtained,\n            'score_possible' => $score_possible,\n            'questions_answered' => $questions_answered,\n            'percentage' => $percentage,\n        ];\n    }\n\n    /**\n     * This function exports the table that we see in display_tracking_user_overview().\n     *\n     * @author Patrick Cool <patrick.cool@UGent.be>, Ghent University, Belgium\n     *\n     * @version Dokeos 1.8.6\n     *\n     * @since October 2008\n     */\n    public static function export_tracking_user_overview()\n    {\n        // database table definitions\n        $tbl_course_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        $is_western_name_order = api_is_western_name_order(PERSON_NAME_DATA_EXPORT);\n\n        // the values of the sortable table\n        if ($_GET['tracking_user_overview_page_nr']) {\n            $from = $_GET['tracking_user_overview_page_nr'];\n        } else {\n            $from = 0;\n        }\n        if ($_GET['tracking_user_overview_column']) {\n            $orderby = $_GET['tracking_user_overview_column'];\n        } else {\n            $orderby = 0;\n        }\n        if ($is_western_name_order != api_is_western_name_order() && ($orderby == 1 || $orderby == 2)) {\n            // Swapping the sorting column if name order for export is different than the common name order.\n            $orderby = 3 - $orderby;\n        }\n        if ($_GET['tracking_user_overview_direction']) {\n            $direction = $_GET['tracking_user_overview_direction'];\n        } else {\n            $direction = 'ASC';\n        }\n\n        $user_data = self::get_user_data_tracking_overview(\n            $from,\n            1000,\n            $orderby,\n            $direction\n        );\n\n        // the first line of the csv file with the column headers\n        $csv_row = [];\n        $csv_row[] = get_lang('OfficialCode');\n        if ($is_western_name_order) {\n            $csv_row[] = get_lang('FirstName');\n            $csv_row[] = get_lang('LastName');\n        } else {\n            $csv_row[] = get_lang('LastName');\n            $csv_row[] = get_lang('FirstName');\n        }\n        $csv_row[] = get_lang('LoginName');\n        $csv_row[] = get_lang('CourseCode');\n\n        // the additional user defined fields (only those that were selected to be exported)\n        $fields = UserManager::get_extra_fields(0, 50, 5, 'ASC');\n\n        $additionalExportFields = Session::read('additional_export_fields');\n\n        if (is_array($additionalExportFields)) {\n            foreach ($additionalExportFields as $key => $extra_field_export) {\n                $csv_row[] = $fields[$extra_field_export][3];\n                $field_names_to_be_exported[] = 'extra_'.$fields[$extra_field_export][1];\n            }\n        }\n        $csv_row[] = get_lang('AvgTimeSpentInTheCourse', '');\n        $csv_row[] = get_lang('AvgStudentsProgress', '');\n        $csv_row[] = get_lang('AvgCourseScore', '');\n        $csv_row[] = get_lang('AvgExercisesScore', '');\n        $csv_row[] = get_lang('AvgMessages', '');\n        $csv_row[] = get_lang('AvgAssignments', '');\n        $csv_row[] = get_lang('TotalExercisesScoreObtained', '');\n        $csv_row[] = get_lang('TotalExercisesScorePossible', '');\n        $csv_row[] = get_lang('TotalExercisesAnswered', '');\n        $csv_row[] = get_lang('TotalExercisesScorePercentage', '');\n        $csv_row[] = get_lang('FirstLogin', '');\n        $csv_row[] = get_lang('LatestLogin', '');\n        $csv_content[] = $csv_row;\n\n        // the other lines (the data)\n        foreach ($user_data as $key => $user) {\n            // getting all the courses of the user\n            $sql = \"SELECT * FROM $tbl_course_user\n                    WHERE user_id = '\".intval($user[4]).\"' AND relation_type<>\".COURSE_RELATION_TYPE_RRHH.\" \";\n            $result = Database::query($sql);\n            while ($row = Database::fetch_row($result)) {\n                $courseInfo = api_get_course_info($row['course_code']);\n                $courseId = $courseInfo['real_id'];\n\n                $csv_row = [];\n                // user official code\n                $csv_row[] = $user[0];\n                // user first|last name\n                $csv_row[] = $user[1];\n                // user last|first name\n                $csv_row[] = $user[2];\n                // user login name\n                $csv_row[] = $user[3];\n                // course code\n                $csv_row[] = $row[0];\n                // the additional defined user fields\n                $extra_fields = self::get_user_overview_export_extra_fields($user[4]);\n\n                if (is_array($field_names_to_be_exported)) {\n                    foreach ($field_names_to_be_exported as $key => $extra_field_export) {\n                        $csv_row[] = $extra_fields[$extra_field_export];\n                    }\n                }\n                // time spent in the course\n                $csv_row[] = api_time_to_hms(Tracking::get_time_spent_on_the_course($user[4], $courseId));\n                // student progress in course\n                $csv_row[] = round(Tracking::get_avg_student_progress($user[4], $row[0]), 2);\n                // student score\n                $csv_row[] = round(Tracking::get_avg_student_score($user[4], $row[0]), 2);\n                // student tes score\n                $csv_row[] = round(Tracking::get_avg_student_exercise_score($user[4], $row[0]), 2);\n                // student messages\n                $csv_row[] = Tracking::count_student_messages($user[4], $row[0]);\n                // student assignments\n                $csv_row[] = Tracking::count_student_assignments($user[4], $row[0]);\n                // student exercises results\n                $exercises_results = self::exercises_results($user[4], $row[0]);\n                $csv_row[] = $exercises_results['score_obtained'];\n                $csv_row[] = $exercises_results['score_possible'];\n                $csv_row[] = $exercises_results['questions_answered'];\n                $csv_row[] = $exercises_results['percentage'];\n                // first connection\n                $csv_row[] = Tracking::get_first_connection_date_on_the_course($user[4], $courseId);\n                // last connection\n                $csv_row[] = strip_tags(Tracking::get_last_connection_date_on_the_course($user[4], $courseInfo));\n\n                $csv_content[] = $csv_row;\n            }\n        }\n        Export::arrayToCsv($csv_content, 'reporting_user_overview');\n        exit;\n    }\n\n    /**\n     * Get data for courses list in sortable with pagination.\n     *\n     * @return array\n     */\n    public static function get_course_data($from, $number_of_items, $column, $direction)\n    {\n        global $courses, $csv_content, $charset, $session_id;\n\n        // definition database tables\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_course_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        $tbl_session_course_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n\n        $course_data = [];\n        $courses_code = array_keys($courses);\n\n        foreach ($courses_code as &$code) {\n            $code = \"'$code'\";\n        }\n\n        // get all courses with limit\n        $sql = \"SELECT course.code as col1, course.title as col2\n                FROM $tbl_course course\n                WHERE course.code IN (\".implode(',', $courses_code).\")\";\n\n        if (!in_array($direction, ['ASC', 'DESC'])) {\n            $direction = 'ASC';\n        }\n\n        $column = (int) $column;\n        $from = (int) $from;\n        $number_of_items = (int) $number_of_items;\n\n        $sql .= \" ORDER BY col$column $direction \";\n        $sql .= \" LIMIT $from,$number_of_items\";\n\n        $res = Database::query($sql);\n        while ($row_course = Database::fetch_row($res)) {\n            $course_code = $row_course[0];\n            $courseInfo = api_get_course_info($course_code);\n            $courseId = $courseInfo['real_id'];\n            $avg_assignments_in_course = $avg_messages_in_course = $nb_students_in_course = $avg_progress_in_course = $avg_score_in_course = $avg_time_spent_in_course = $avg_score_in_exercise = 0;\n\n            // students directly subscribed to the course\n            if (empty($session_id)) {\n                $sql = \"SELECT user_id\n                        FROM $tbl_course_user as course_rel_user\n                        WHERE\n                            course_rel_user.status='5' AND\n                            course_rel_user.c_id = '$courseId'\";\n            } else {\n                $sql = \"SELECT user_id FROM $tbl_session_course_user srcu\n                        WHERE\n                            c_id = '$courseId' AND\n                            session_id = '$session_id' AND\n                            status<>2\";\n            }\n            $rs = Database::query($sql);\n            $users = [];\n            while ($row = Database::fetch_array($rs)) {\n                $users[] = $row['user_id'];\n            }\n\n            if (count($users) > 0) {\n                $nb_students_in_course = count($users);\n                $avg_assignments_in_course = Tracking::count_student_assignments($users, $course_code, $session_id);\n                $avg_messages_in_course = Tracking::count_student_messages($users, $course_code, $session_id);\n                $avg_progress_in_course = Tracking::get_avg_student_progress($users, $course_code, [], $session_id);\n                $avg_score_in_course = Tracking::get_avg_student_score($users, $course_code, [], $session_id);\n                $avg_score_in_exercise = Tracking::get_avg_student_exercise_score($users, $course_code, 0, $session_id);\n                $avg_time_spent_in_course = Tracking::get_time_spent_on_the_course(\n                    $users,\n                    $courseInfo['real_id'],\n                    $session_id\n                );\n\n                $avg_progress_in_course = round($avg_progress_in_course / $nb_students_in_course, 2);\n                if (is_numeric($avg_score_in_course)) {\n                    $avg_score_in_course = round($avg_score_in_course / $nb_students_in_course, 2);\n                }\n                $avg_time_spent_in_course = api_time_to_hms($avg_time_spent_in_course / $nb_students_in_course);\n            } else {\n                $avg_time_spent_in_course = null;\n                $avg_progress_in_course = null;\n                $avg_score_in_course = null;\n                $avg_score_in_exercise = null;\n                $avg_messages_in_course = null;\n                $avg_assignments_in_course = null;\n            }\n            $table_row = [];\n            $table_row[] = $row_course[1];\n            $table_row[] = $nb_students_in_course;\n            $table_row[] = $avg_time_spent_in_course;\n            $table_row[] = is_null($avg_progress_in_course) ? '' : $avg_progress_in_course.'%';\n            $table_row[] = is_null($avg_score_in_course) ? '' : $avg_score_in_course.'%';\n            $table_row[] = is_null($avg_score_in_exercise) ? '' : $avg_score_in_exercise.'%';\n            $table_row[] = $avg_messages_in_course;\n            $table_row[] = $avg_assignments_in_course;\n\n            //set the \"from\" value to know if I access the Reporting by the chamilo tab or the course link\n            $table_row[] = '<center><a href=\"../../tracking/courseLog.php?cidReq='.$course_code.'&from=myspace&id_session='.$session_id.'\">\n                             '.Display::return_icon('2rightarrow.png', get_lang('Details')).'\n                             </a>\n                            </center>';\n\n            $scoreInCourse = null;\n            if (null !== $avg_score_in_course) {\n                if (is_numeric($avg_score_in_course)) {\n                    $scoreInCourse = $avg_score_in_course.'%';\n                } else {\n                    $scoreInCourse = $avg_score_in_course;\n                }\n            }\n\n            $csv_content[] = [\n                api_html_entity_decode($row_course[1], ENT_QUOTES, $charset),\n                $nb_students_in_course,\n                $avg_time_spent_in_course,\n                is_null($avg_progress_in_course) ? null : $avg_progress_in_course.'%',\n                $scoreInCourse,\n                is_null($avg_score_in_exercise) ? null : $avg_score_in_exercise.'%',\n                $avg_messages_in_course,\n                $avg_assignments_in_course,\n            ];\n            $course_data[] = $table_row;\n        }\n\n        return $course_data;\n    }\n\n    /**\n     * Get the number of users of the platform.\n     *\n     * @return int\n     */\n    public static function get_number_of_users_tracking_overview()\n    {\n        return UserManager::get_number_of_users(0, api_get_current_access_url_id());\n    }\n\n    /**\n     * Get all the data for the sortable table of the reporting progress of\n     * all users and all the courses the user is subscribed to.\n     *\n     * @param int    $from\n     * @param int    $numberItems\n     * @param int    $column\n     * @param string $direction\n     *\n     * @return array\n     */\n    public static function get_user_data_tracking_overview($from, $numberItems, $column, $direction)\n    {\n        $isWestern = api_is_western_name_order();\n\n        switch ($column) {\n            case '0':\n                $column = $isWestern ? 'firstname' : 'lastname';\n                break;\n        }\n\n        $order = [\n            \" `$column` $direction\",\n        ];\n        $userList = UserManager::get_user_list([], $order, $from, $numberItems);\n        $return = [];\n        foreach ($userList as $user) {\n            $return[] = [\n                '0' => $user['user_id'],\n                'col0' => $user['user_id'],\n            ];\n        }\n\n        return $return;\n    }\n\n    /**\n     * Get all information that the user with user_id = $user_data has\n     * entered in the additionally defined profile fields.\n     *\n     * @param int $user_id the id of the user\n     *\n     * @return array\n     *\n     * @author Patrick Cool <patrick.cool@UGent.be>, Ghent University, Belgium\n     *\n     * @version Dokeos 1.8.6\n     *\n     * @since November 2008\n     */\n    public static function get_user_overview_export_extra_fields($user_id)\n    {\n        // include the user manager\n        $data = UserManager::get_extra_user_data($user_id, true);\n\n        return $data;\n    }\n\n    /**\n     * Checks if a username exist in the DB otherwise it create a \"double\"\n     * i.e. if we look into for jmontoya but the user's name already exist we create the user jmontoya2\n     * the return array will be array(username=>'jmontoya', sufix='2').\n     *\n     * @param string firstname\n     * @param string lastname\n     * @param string username\n     *\n     * @return array with the username, the sufix\n     *\n     * @author Julio Montoya\n     */\n    public static function make_username($firstname, $lastname, $username, $language = null, $encoding = null)\n    {\n        // if username exist\n        if (!UserManager::is_username_available($username) || empty($username)) {\n            $i = 0;\n            while (1) {\n                if ($i == 0) {\n                    $sufix = '';\n                } else {\n                    $sufix = $i;\n                }\n                $desired_username = UserManager::create_username(\n                    $firstname,\n                    $lastname\n                );\n                if (UserManager::is_username_available($desired_username.$sufix)) {\n                    break;\n                } else {\n                    $i++;\n                }\n            }\n            $username_array = ['username' => $desired_username, 'sufix' => $sufix];\n\n            return $username_array;\n        } else {\n            $username_array = ['username' => $username, 'sufix' => ''];\n\n            return $username_array;\n        }\n    }\n\n    /**\n     * Checks if there are repeted users in a given array.\n     *\n     * @param array $usernames  list of the usernames in the uploaded file\n     * @param array $user_array $user_array['username'] and $user_array['sufix']\n     *                          where suffix is the number part in a login i.e -> jmontoya2\n     *\n     * @return array with the $usernames array and the $user_array array\n     *\n     * @author Julio Montoya\n     */\n    public static function check_user_in_array($usernames, $user_array)\n    {\n        $user_list = array_keys($usernames);\n        $username = $user_array['username'].$user_array['sufix'];\n\n        if (in_array($username, $user_list)) {\n            $user_array['sufix'] += $usernames[$username];\n            $usernames[$username]++;\n        } else {\n            $usernames[$username] = 1;\n        }\n        $result_array = [$usernames, $user_array];\n\n        return $result_array;\n    }\n\n    /**\n     * Checks whether a username has been already subscribed in a session.\n     *\n     * @param string $username    a given username\n     * @param array  $course_list the array with the course list id\n     * @param int    $id_session  the session id\n     *\n     * @return int 0 if the user is not subscribed otherwise it returns the user_id of the given username\n     *\n     * @author Julio Montoya\n     */\n    public static function user_available_in_session($username, $course_list, $id_session)\n    {\n        $table_user = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $id_session = (int) $id_session;\n        $username = Database::escape_string($username);\n        foreach ($course_list as $courseId) {\n            $courseId = (int) $courseId;\n            $sql = \" SELECT u.user_id FROM $tbl_session_rel_course_rel_user rel\n                     INNER JOIN $table_user u\n                     ON (rel.user_id = u.user_id)\n                     WHERE\n                        rel.session_id='$id_session' AND\n                        u.status='5' AND\n                        u.username ='$username' AND\n                        rel.c_id='$courseId'\";\n            $rs = Database::query($sql);\n            if (Database::num_rows($rs) > 0) {\n                return Database::result($rs, 0, 0);\n            }\n        }\n\n        return 0;\n    }\n\n    /**\n     * This function checks whether some users in the uploaded file\n     * repeated and creates unique usernames if necesary.\n     * A case: Within the file there is an user repeted twice (Julio Montoya / Julio Montoya)\n     * and the username fields are empty.\n     * Then, this function would create unique usernames based on the first and the last name.\n     * Two users wiould be created - jmontoya and jmontoya2.\n     * Of course, if in the database there is a user with the name jmontoya,\n     * the newly created two users registered would be jmontoya2 and jmontoya3.\n     *\n     * @param $users list of users\n     *\n     * @return array\n     *\n     * @author Julio Montoya Armas\n     */\n    public static function check_all_usernames($users, $course_list, $id_session)\n    {\n        $table_user = Database::get_main_table(TABLE_MAIN_USER);\n        $usernames = [];\n        $new_users = [];\n        foreach ($users as $index => $user) {\n            $desired_username = [];\n            if (empty($user['UserName'])) {\n                $desired_username = self::make_username($user['FirstName'], $user['LastName'], '');\n                $pre_username = $desired_username['username'].$desired_username['sufix'];\n                $user['UserName'] = $pre_username;\n                $user['create'] = '1';\n            } else {\n                if (UserManager::is_username_available($user['UserName'])) {\n                    $desired_username = self::make_username($user['FirstName'], $user['LastName'], $user['UserName']);\n                    $user['UserName'] = $desired_username['username'].$desired_username['sufix'];\n                    $user['create'] = '1';\n                } else {\n                    $is_session_avail = self::user_available_in_session($user['UserName'], $course_list, $id_session);\n                    if (0 == $is_session_avail) {\n                        $user_name = $user['UserName'];\n                        $sql_select = \"SELECT user_id FROM $table_user WHERE username ='$user_name' \";\n                        $rs = Database::query($sql_select);\n                        $user['create'] = Database::result($rs, 0, 0);\n                    } else {\n                        $user['create'] = $is_session_avail;\n                    }\n                }\n            }\n            // Usernames is the current list of users in the file.\n            $result_array = self::check_user_in_array($usernames, $desired_username);\n            $usernames = $result_array[0];\n            $desired_username = $result_array[1];\n            $user['UserName'] = $desired_username['username'].$desired_username['sufix'];\n            $new_users[] = $user;\n        }\n\n        return $new_users;\n    }\n\n    /**\n     * This functions checks whether there are users that are already\n     * registered in the DB by different creator than the current coach.\n     *\n     * @param array $users\n     *\n     * @return array\n     *\n     * @author Julio Montoya Armas\n     */\n    public static function get_user_creator($users)\n    {\n        $errors = [];\n        $table_user = Database::get_main_table(TABLE_MAIN_USER);\n        foreach ($users as $index => $user) {\n            $username = Database::escape_string($user['UserName']);\n            $sql = \"SELECT creator_id FROM $table_user WHERE username='$username' \";\n\n            $rs = Database::query($sql);\n            $creator_id = Database::result($rs, 0, 0);\n            // check if we are the creators or not\n            if ($creator_id != '') {\n                if ($creator_id != api_get_user_id()) {\n                    $user['error'] = get_lang('UserAlreadyRegisteredByOtherCreator');\n                    $errors[] = $user;\n                }\n            }\n        }\n\n        return $errors;\n    }\n\n    /**\n     * Validates imported data.\n     *\n     * @param array $users list of users\n     */\n    public static function validate_data($users, $id_session = null)\n    {\n        $errors = [];\n        $new_users = [];\n        foreach ($users as $index => $user) {\n            // 1. Check whether mandatory fields are set.\n            $mandatory_fields = ['LastName', 'FirstName'];\n            if (api_get_setting('registration', 'email') == 'true') {\n                $mandatory_fields[] = 'Email';\n            }\n\n            foreach ($mandatory_fields as $key => $field) {\n                if (!isset($user[$field]) || strlen($user[$field]) == 0) {\n                    $user['error'] = get_lang($field.'Mandatory');\n                    $errors[] = $user;\n                }\n            }\n            // 2. Check whether the username is too long.\n            if (UserManager::is_username_too_long($user['UserName'])) {\n                $user['error'] = get_lang('UserNameTooLong');\n                $errors[] = $user;\n            }\n\n            $user['UserName'] = trim($user['UserName']);\n\n            if (empty($user['UserName'])) {\n                $user['UserName'] = UserManager::create_username($user['FirstName'], $user['LastName']);\n            }\n            $new_users[] = $user;\n        }\n        $results = ['errors' => $errors, 'users' => $new_users];\n\n        return $results;\n    }\n\n    /**\n     * Adds missing user-information (which isn't required, like password, etc).\n     */\n    public static function complete_missing_data($user)\n    {\n        // 1. Generate a password if it is necessary.\n        if (!isset($user['Password']) || strlen($user['Password']) == 0) {\n            $user['Password'] = api_generate_password();\n        }\n\n        return $user;\n    }\n\n    /**\n     * Saves imported data.\n     */\n    public static function save_data($users, $course_list, $id_session)\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n\n        $id_session = (int) $id_session;\n        $sendMail = $_POST['sendMail'] ? 1 : 0;\n\n        // Adding users to the platform.\n        $new_users = [];\n        foreach ($users as $index => $user) {\n            $user = self::complete_missing_data($user);\n            // coach only will registered users\n            $default_status = STUDENT;\n            if ($user['create'] == COURSEMANAGER) {\n                $user['id'] = UserManager:: create_user(\n                    $user['FirstName'],\n                    $user['LastName'],\n                    $default_status,\n                    $user['Email'],\n                    $user['UserName'],\n                    $user['Password'],\n                    $user['OfficialCode'],\n                    api_get_setting('PlatformLanguage'),\n                    $user['PhoneNumber'],\n                    ''\n                );\n                $user['added_at_platform'] = 1;\n            } else {\n                $user['id'] = $user['create'];\n                $user['added_at_platform'] = 0;\n            }\n            $new_users[] = $user;\n        }\n        // Update user list.\n        $users = $new_users;\n\n        // Inserting users.\n        foreach ($course_list as $enreg_course) {\n            $nbr_users = 0;\n            $new_users = [];\n            $enreg_course = Database::escape_string($enreg_course);\n            foreach ($users as $index => $user) {\n                $userid = (int) $user['id'];\n                $sql = \"INSERT IGNORE INTO $tbl_session_rel_course_rel_user(session_id, c_id, user_id)\n                        VALUES('$id_session','$enreg_course','$userid')\";\n                $result = Database::query($sql);\n                if (Database::affected_rows($result)) {\n                    $nbr_users++;\n                }\n                $new_users[] = $user;\n            }\n\n            //update the nbr_users field\n            $sql_select = \"SELECT COUNT(user_id) as nbUsers FROM $tbl_session_rel_course_rel_user\n                           WHERE session_id='$id_session' AND c_id='$enreg_course'\";\n            $rs = Database::query($sql_select);\n            [$nbr_users] = Database::fetch_array($rs);\n            $sql_update = \"UPDATE $tbl_session_rel_course SET nbr_users=$nbr_users\n                           WHERE session_id='$id_session' AND c_id='$enreg_course'\";\n            Database::query($sql_update);\n\n            $sql_update = \"UPDATE $tbl_session SET nbr_users= '$nbr_users' WHERE id='$id_session'\";\n            Database::query($sql_update);\n        }\n\n        $new_users = [];\n        foreach ($users as $index => $user) {\n            $userid = $user['id'];\n            $sql_insert = \"INSERT IGNORE INTO $tbl_session_rel_user(session_id, user_id, registered_at)\n                           VALUES ('$id_session','$userid', '\".api_get_utc_datetime().\"')\";\n            Database::query($sql_insert);\n            $user['added_at_session'] = 1;\n            $new_users[] = $user;\n        }\n\n        $users = $new_users;\n        $registered_users = get_lang('FileImported').'<br /> Import file results : <br />';\n        // Sending emails.\n        $addedto = '';\n        if ($sendMail) {\n            foreach ($users as $index => $user) {\n                $emailsubject = '['.api_get_setting('siteName').'] '.get_lang('YourReg').' '.api_get_setting('siteName');\n                $emailbody = get_lang('Dear').' '.\n                    api_get_person_name($user['FirstName'], $user['LastName']).\",\\n\\n\".\n                    get_lang('YouAreReg').\" \".api_get_setting('siteName').\" \".get_lang('WithTheFollowingSettings').\"\\n\\n\".\n                    get_lang('Username').\" : $user[UserName]\\n\".\n                    get_lang('Pass').\" : $user[Password]\\n\\n\".\n                    get_lang('Address').\" \".api_get_setting('siteName').\" \".get_lang('Is').\" : \".api_get_path(WEB_PATH).\" \\n\\n\".\n                    get_lang('Problem').\"\\n\\n\".\n                    get_lang('SignatureFormula').\",\\n\\n\".\n                    api_get_person_name(api_get_setting('administratorName'), api_get_setting('administratorSurname')).\"\\n\".\n                    get_lang('Manager').\" \".api_get_setting('siteName').\"\\nT. \".\n                    api_get_setting('administratorTelephone').\"\\n\".get_lang('Email').\" : \".api_get_setting('emailAdministrator');\n\n                MessageManager::send_message_simple($user['id'], $emailsubject, $emailbody);\n\n                $userInfo = api_get_user_info($user['id']);\n\n                if (($user['added_at_platform'] == 1 && $user['added_at_session'] == 1) || $user['added_at_session'] == 1) {\n                    if ($user['added_at_platform'] == 1) {\n                        $addedto = get_lang('UserCreatedPlatform');\n                    } else {\n                        $addedto = '          ';\n                    }\n\n                    if ($user['added_at_session'] == 1) {\n                        $addedto .= get_lang('UserInSession');\n                    }\n                } else {\n                    $addedto = get_lang('UserNotAdded');\n                }\n\n                $registered_users .= UserManager::getUserProfileLink($userInfo).' - '.$addedto.'<br />';\n            }\n        } else {\n            foreach ($users as $index => $user) {\n                $userInfo = api_get_user_info($user['id']);\n                if (($user['added_at_platform'] == 1 && $user['added_at_session'] == 1) || $user['added_at_session'] == 1) {\n                    if ($user['added_at_platform'] == 1) {\n                        $addedto = get_lang('UserCreatedPlatform');\n                    } else {\n                        $addedto = '          ';\n                    }\n\n                    if ($user['added_at_session'] == 1) {\n                        $addedto .= ' '.get_lang('UserInSession');\n                    }\n                } else {\n                    $addedto = get_lang('UserNotAdded');\n                }\n                $registered_users .= \"<a href=\\\"../user/userInfo.php?uInfo=\".$user['id'].\"\\\">\".\n                    Security::remove_XSS($userInfo['complete_user_name']).\"</a> - \".$addedto.'<br />';\n            }\n        }\n        Display::addFlash(Display::return_message($registered_users, 'normal', false));\n        header('Location: course.php?id_session='.$id_session);\n        exit;\n    }\n\n    /**\n     * Reads CSV-file.\n     *\n     * @param string $file Path to the CSV-file\n     *\n     * @return array All userinformation read from the file\n     */\n    public function parse_csv_data($file)\n    {\n        $users = Import::csvToArray($file);\n        foreach ($users as $index => $user) {\n            if (isset($user['Courses'])) {\n                $user['Courses'] = explode('|', trim($user['Courses']));\n            }\n            $users[$index] = $user;\n        }\n\n        return $users;\n    }\n\n    /**\n     * Reads XML-file.\n     *\n     * @param string $file Path to the XML-file\n     *\n     * @return array All userinformation read from the file\n     */\n    public static function parse_xml_data($file)\n    {\n        $crawler = new \\Symfony\\Component\\DomCrawler\\Crawler();\n        $crawler->addXmlContent(file_get_contents($file));\n        $crawler = $crawler->filter('Contacts > Contact ');\n        $array = [];\n        foreach ($crawler as $domElement) {\n            $row = [];\n            foreach ($domElement->childNodes as $node) {\n                if ($node->nodeName != '#text') {\n                    $row[$node->nodeName] = $node->nodeValue;\n                }\n            }\n            if (!empty($row)) {\n                $array[] = $row;\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * @param int $courseId\n     * @param int $sessionId\n     * @param int $studentId\n     */\n    public static function displayTrackingAccessOverView(\n        $courseId,\n        $sessionId,\n        $studentId,\n        $perPage = 20,\n        $dates = null\n    ) {\n        $courseId = (int) $courseId;\n        $sessionId = (int) $sessionId;\n        $studentId = (int) $studentId;\n\n        $courseList = [];\n        $sessionList = [];\n        $studentList = [];\n\n        if (!empty($courseId)) {\n            $course = api_get_course_entity($courseId);\n            if ($course) {\n                $courseList[$course->getId()] = $course->getTitle();\n            }\n        }\n\n        if (!empty($sessionId)) {\n            $session = api_get_session_entity($sessionId);\n            if ($session) {\n                $sessionList[$session->getId()] = $session->getName();\n            }\n        }\n\n        if (!empty($studentId)) {\n            $student = api_get_user_entity($studentId);\n            if ($student) {\n                $studentList[$student->getId()] = UserManager::formatUserFullName($student);\n            }\n        }\n\n        $form = new FormValidator('access_overview', 'GET');\n        $form->addElement(\n            'select_ajax',\n            'course_id',\n            get_lang('SearchCourse'),\n            $courseList,\n            [\n                'url' => api_get_path(WEB_AJAX_PATH).'course.ajax.php?'.http_build_query(\n                    [\n                        'a' => 'search_course_by_session_all',\n                        'session_id' => $sessionId,\n                        'course_id' => $courseId,\n                    ]\n                ),\n            ]\n        );\n\n        $form->addElement(\n            'select_ajax',\n            'session_id',\n            get_lang('SearchSession'),\n            $sessionList,\n            [\n                'url_function' => \"\n                    function () {\n                        var params = $.param({\n                            a: 'search_session_by_course',\n                            course_id: $('#access_overview_course_id').val() || 0\n                        });\n\n                        return '\".api_get_path(WEB_AJAX_PATH).\"session.ajax.php?' + params;\n                    }\n                \",\n            ]\n        );\n\n        $form->addSelect(\n            'profile',\n            get_lang('Profile'),\n            [\n                '' => get_lang('Select'),\n                STUDENT => get_lang('Student'),\n                COURSEMANAGER => get_lang('CourseManager'),\n                DRH => get_lang('Drh'),\n            ],\n            ['id' => 'profile']\n        );\n\n        $form->addElement(\n            'select_ajax',\n            'student_id',\n            get_lang('SearchUsers'),\n            $studentList,\n            [\n                'placeholder' => get_lang('All'),\n                'url_function' => \"\n                    function () {\n                        var params = $.param({\n                            a: 'search_user_by_course',\n                            session_id: $('#access_overview_session_id').val(),\n                            course_id: $('#access_overview_course_id').val()\n                        });\n\n                        return '\".api_get_path(WEB_AJAX_PATH).\"course.ajax.php?' + params;\n                    }\n                \",\n            ]\n        );\n\n        $form->addDateRangePicker(\n            'date',\n            get_lang('DateRange'),\n            true,\n            [\n                'id' => 'date_range',\n                'format' => 'YYYY-MM-DD HH:mm',\n                'timePicker' => 'true',\n                //'validate_format' => 'Y-m-d',\n            ]\n        );\n\n        $form->addHidden('display', 'accessoverview');\n        $form->addRule('course_id', get_lang('Required'), 'required');\n        $form->addRule('profile', get_lang('Required'), 'required');\n        $form->addButton('submit', get_lang('Generate'), 'gear', 'primary');\n\n        $table = null;\n        if (!empty($dates)) {\n            //if ($form->validate()) {\n            $table = new SortableTable(\n                'tracking_access_overview',\n                ['MySpace', 'getNumberOfTrackAccessOverview'],\n                ['MySpace', 'getUserDataAccessTrackingOverview'],\n                0,\n                $perPage\n            );\n            $table->set_additional_parameters(\n                [\n                    'course_id' => $courseId,\n                    'session_id' => $sessionId,\n                    'student_id' => $studentId,\n                    'date' => $dates,\n                    'tracking_access_overview_per_page' => $perPage,\n                    'display' => 'accessoverview',\n                ]\n            );\n            $table->set_header(0, get_lang('LoginDate'), true);\n            $table->set_header(1, get_lang('Username'), true);\n            if (api_is_western_name_order()) {\n                $table->set_header(2, get_lang('FirstName'), true);\n                $table->set_header(3, get_lang('LastName'), true);\n            } else {\n                $table->set_header(2, get_lang('LastName'), true);\n                $table->set_header(3, get_lang('FirstName'), true);\n            }\n            //$table->set_header(4, get_lang('Clicks'), false);\n            $table->set_header(4, get_lang('IP'), false);\n            $table->set_header(5, get_lang('TimeLoggedIn'), false);\n        }\n\n        $template = new Template(\n            null,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false\n        );\n        $template->assign('form', $form->returnForm());\n        $template->assign('table', $table ? $table->return_table() : null);\n\n        echo $template->fetch(\n            $template->get_template('my_space/accessoverview.tpl')\n        );\n    }\n\n    /**\n     * @return int\n     */\n    public static function getNumberOfTrackAccessOverview()\n    {\n        $user = Database::get_main_table(TABLE_MAIN_USER);\n        $course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $trackCourseAccess = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n\n        $sql = \"SELECT COUNT(course_access_id) count\n                FROM $trackCourseAccess a\n                INNER JOIN $user u\n                ON a.user_id = u.id\n                INNER JOIN $course c\n                ON a.c_id = c.id\n                \";\n        $sql = self::getDataAccessTrackingFilters($sql);\n\n        $result = Database::query($sql);\n        $row = Database::fetch_assoc($result);\n\n        if ($row) {\n            return $row['count'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param $from\n     * @param $numberItems\n     * @param $column\n     * @param $orderDirection\n     *\n     * @return array\n     */\n    public static function getUserDataAccessTrackingOverview(\n        $from,\n        $numberItems,\n        $column,\n        $orderDirection\n    ) {\n        $from = (int) $from;\n        $numberItems = (int) $numberItems;\n        $column = (int) $column;\n        $orderDirection = Database::escape_string($orderDirection);\n        $orderDirection = !in_array(strtolower(trim($orderDirection)), ['asc', 'desc']) ? 'asc' : $orderDirection;\n\n        $user = Database::get_main_table(TABLE_MAIN_USER);\n        $course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $track_e_login = Database::get_main_table(TABLE_STATISTIC_TRACK_E_LOGIN);\n        $trackCourseAccess = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n\n        global $export_csv;\n        $is_western_name_order = api_is_western_name_order();\n        if ($export_csv) {\n            $is_western_name_order = api_is_western_name_order(PERSON_NAME_DATA_EXPORT);\n        }\n\n        //TODO add course name\n        $sql = \"SELECT\n                a.login_course_date as col0,\n                u.username as col1,\n                \".(\n                    $is_western_name_order ? \"\n                        u.firstname AS col2,\n                        u.lastname AS col3,\n                    \" : \"\n                        u.lastname AS col2,\n                        u.firstname AS col3,\n                \"\n        ).\"\n                a.login_course_date,\n                a.logout_course_date,\n                c.title,\n                c.code,\n                u.id as user_id,\n                user_ip\n            FROM $trackCourseAccess a\n            INNER JOIN $user u\n            ON a.user_id = u.id\n            INNER JOIN $course c\n            ON a.c_id = c.id\n            WHERE 1=1 \";\n\n        $sql = self::getDataAccessTrackingFilters($sql);\n\n        $sql .= \" ORDER BY col$column $orderDirection \";\n        $sql .= \" LIMIT $from, $numberItems\";\n\n        $result = Database::query($sql);\n\n        $data = [];\n        while ($user = Database::fetch_assoc($result)) {\n            $data[] = $user;\n        }\n\n        $return = [];\n        //TODO: Dont use numeric index\n        foreach ($data as $key => $info) {\n            $return[] = [\n                api_get_local_time($info['login_course_date']),\n                $info['col1'],\n                $info['col2'],\n                $info['col3'],\n                $info['user_ip'],\n                gmdate('H:i:s', strtotime($info['logout_course_date']) - strtotime($info['login_course_date'])),\n            ];\n        }\n\n        return $return;\n    }\n\n    /**\n     * Gets the connections to a course as an array of login and logout time.\n     *\n     * @param int    $user_id\n     * @param array  $course_info\n     * @param int    $sessionId\n     * @param string $start_date\n     * @param string $end_date\n     * @param bool   $addUserIp\n     *\n     * @author  Jorge Frisancho Jibaja\n     * @author  Julio Montoya <gugli100@gmail.com> fixing the function\n     *\n     * @version OCT-22- 2010\n     *\n     * @return array\n     */\n    public static function get_connections_to_course_by_date(\n        $user_id,\n        $course_info,\n        $sessionId,\n        $start_date,\n        $end_date,\n        $addUserIp = false\n    ) {\n        $table = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n        $user_id = (int) $user_id;\n        $connections = [];\n        if (!empty($course_info)) {\n            $courseId = (int) $course_info['real_id'];\n            $end_date = self::add_day_to($end_date);\n\n            $start_date = Database::escape_string($start_date);\n            $end_date = Database::escape_string($end_date);\n            $sessionCondition = api_get_session_condition($sessionId);\n            $sql = \"SELECT\n                        login_course_date,\n                        logout_course_date,\n                        TIMESTAMPDIFF(SECOND, login_course_date, logout_course_date) duration,\n                        user_ip\n                    FROM $table\n                    WHERE\n                        user_id = $user_id AND\n                        c_id = $courseId AND\n                        login_course_date BETWEEN '$start_date' AND '$end_date' AND\n                        logout_course_date BETWEEN '$start_date' AND '$end_date'\n                        $sessionCondition\n                    ORDER BY login_course_date ASC\";\n            $rs = Database::query($sql);\n\n            while ($row = Database::fetch_array($rs)) {\n                $item = [\n                    'login' => $row['login_course_date'],\n                    'logout' => $row['logout_course_date'],\n                    'duration' => $row['duration'],\n                ];\n                if ($addUserIp) {\n                    $item['user_ip'] = $row['user_ip'];\n                }\n                $connections[] = $item;\n            }\n        }\n\n        return $connections;\n    }\n\n    /**\n     * @param int   $user_id\n     * @param array $course_info\n     * @param int   $sessionId\n     * @param null  $start_date\n     * @param null  $end_date\n     *\n     * @return array\n     */\n    public static function getStats($user_id, $course_info, $sessionId, $start_date = null, $end_date = null)\n    {\n        $table = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n        $result = [];\n        if (!empty($course_info)) {\n            $stringStartDate = '';\n            $stringEndDate = '';\n            if ($start_date != null && $end_date != null) {\n                $end_date = self::add_day_to($end_date);\n\n                $start_date = Database::escape_string($start_date);\n                $end_date = Database::escape_string($end_date);\n\n                $stringStartDate = \"AND login_course_date BETWEEN '$start_date' AND '$end_date'\";\n                $stringEndDate = \"AND logout_course_date BETWEEN '$start_date' AND '$end_date'\";\n            }\n            $user_id = (int) $user_id;\n            $courseId = (int) $course_info['real_id'];\n            $sessionCondition = api_get_session_condition($sessionId);\n            $sql = \"SELECT\n                SEC_TO_TIME(AVG(time_to_sec(timediff(logout_course_date,login_course_date)))) as avrg,\n                SEC_TO_TIME(SUM(time_to_sec(timediff(logout_course_date,login_course_date)))) as total,\n                count(user_id) as times\n                FROM $table\n                WHERE\n                    user_id = $user_id AND\n                    c_id = $courseId $stringStartDate $stringEndDate\n                    $sessionCondition\n                ORDER BY login_course_date ASC\";\n\n            $rs = Database::query($sql);\n            if ($row = Database::fetch_array($rs)) {\n                $foo_avg = $row['avrg'];\n                $foo_total = $row['total'];\n                $foo_times = $row['times'];\n                $result = [\n                    'avg' => $foo_avg,\n                    'total' => $foo_total,\n                    'times' => $foo_times,\n                ];\n            }\n        }\n\n        return $result;\n    }\n\n    public static function add_day_to($end_date)\n    {\n        $foo_date = strtotime($end_date);\n        $foo_date = strtotime(' +1 day', $foo_date);\n        $foo_date = date('Y-m-d', $foo_date);\n\n        return $foo_date;\n    }\n\n    /**\n     * This function draw the graphic to be displayed on the user view as an image.\n     *\n     * @param array  $sql_result\n     * @param string $start_date\n     * @param string $end_date\n     * @param string $type\n     *\n     * @author Jorge Frisancho Jibaja\n     *\n     * @version OCT-22- 2010\n     *\n     * @return string\n     */\n    public static function grapher($sql_result, $start_date, $end_date, $type = '')\n    {\n        if (empty($start_date)) {\n            $start_date = '';\n        }\n        if (empty($end_date)) {\n            $end_date = '';\n        }\n        if ('' == $type) {\n            $type = 'day';\n        }\n        $main_year = $main_month_year = $main_day = [];\n\n        $period = new DatePeriod(\n            new DateTime($start_date),\n            new DateInterval('P1D'),\n            new DateTime($end_date)\n        );\n\n        foreach ($period as $date) {\n            $main_day[$date->format('d-m-Y')] = 0;\n        }\n\n        $period = new DatePeriod(\n            new DateTime($start_date),\n            new DateInterval('P1M'),\n            new DateTime($end_date)\n        );\n\n        foreach ($period as $date) {\n            $main_month_year[$date->format('m-Y')] = 0;\n        }\n\n        $i = 0;\n        if (is_array($sql_result) && count($sql_result) > 0) {\n            foreach ($sql_result as $key => $data) {\n                $login = api_strtotime($data['login']);\n                $logout = api_strtotime($data['logout']);\n                //creating the main array\n                if (isset($main_month_year[date('m-Y', $login)])) {\n                    $main_month_year[date('m-Y', $login)] += (float) ($logout - $login) / 60;\n                }\n                if (isset($main_day[date('d-m-Y', $login)])) {\n                    $main_day[date('d-m-Y', $login)] += (float) ($logout - $login) / 60;\n                }\n                if ($i > 500) {\n                    break;\n                }\n                $i++;\n            }\n            switch ($type) {\n                case 'day':\n                    $main_date = $main_day;\n                    break;\n                case 'month':\n                    $main_date = $main_month_year;\n                    break;\n                case 'year':\n                    $main_date = $main_year;\n                    break;\n            }\n\n            $labels = array_keys($main_date);\n            if (1 == count($main_date)) {\n                $labels = $labels[0];\n                $main_date = $main_date[$labels];\n            }\n\n            /* Create and populate the pData object */\n            $myData = new pData();\n            $myData->addPoints($main_date, 'Serie1');\n            if (count($main_date) != 1) {\n                $myData->addPoints($labels, 'Labels');\n                $myData->setSerieDescription('Labels', 'Months');\n                $myData->setAbscissa('Labels');\n            }\n            $myData->setSerieWeight('Serie1', 1);\n            $myData->setSerieDescription('Serie1', get_lang('MyResults'));\n            $myData->setAxisName(0, get_lang('Minutes'));\n            $myData->loadPalette(api_get_path(SYS_CODE_PATH).'palettes/pchart/default.color', true);\n\n            // Cache definition\n            $cachePath = api_get_path(SYS_ARCHIVE_PATH);\n            $myCache = new pCache(['CacheFolder' => substr($cachePath, 0, strlen($cachePath) - 1)]);\n            $chartHash = $myCache->getHash($myData);\n\n            if ($myCache->isInCache($chartHash)) {\n                //if we already created the img\n                $imgPath = api_get_path(SYS_ARCHIVE_PATH).$chartHash;\n                $myCache->saveFromCache($chartHash, $imgPath);\n                $imgPath = api_get_path(WEB_ARCHIVE_PATH).$chartHash;\n            } else {\n                /* Define width, height and angle */\n                $mainWidth = 760;\n                $mainHeight = 230;\n                $angle = 50;\n\n                /* Create the pChart object */\n                $myPicture = new pImage($mainWidth, $mainHeight, $myData);\n\n                /* Turn of Antialiasing */\n                $myPicture->Antialias = false;\n                /* Draw the background */\n                $settings = [\"R\" => 255, \"G\" => 255, \"B\" => 255];\n                $myPicture->drawFilledRectangle(0, 0, $mainWidth, $mainHeight, $settings);\n\n                /* Add a border to the picture */\n                $myPicture->drawRectangle(\n                    0,\n                    0,\n                    $mainWidth - 1,\n                    $mainHeight - 1,\n                    [\"R\" => 0, \"G\" => 0, \"B\" => 0]\n                );\n\n                /* Set the default font */\n                $myPicture->setFontProperties(\n                    [\n                        \"FontName\" => api_get_path(SYS_FONTS_PATH).'opensans/OpenSans-Regular.ttf',\n                        \"FontSize\" => 10, ]\n                );\n                /* Write the chart title */\n                $myPicture->drawText(\n                    $mainWidth / 2,\n                    30,\n                    get_lang('TimeSpentInTheCourse'),\n                    [\n                        \"FontSize\" => 12,\n                        \"Align\" => TEXT_ALIGN_BOTTOMMIDDLE,\n                    ]\n                );\n\n                /* Set the default font */\n                $myPicture->setFontProperties(\n                    [\n                        \"FontName\" => api_get_path(SYS_FONTS_PATH).'opensans/OpenSans-Regular.ttf',\n                        \"FontSize\" => 8,\n                    ]\n                );\n\n                /* Define the chart area */\n                $myPicture->setGraphArea(50, 40, $mainWidth - 40, $mainHeight - 80);\n\n                /* Draw the scale */\n                $scaleSettings = [\n                    'XMargin' => 10,\n                    'YMargin' => 10,\n                    'Floating' => true,\n                    'GridR' => 200,\n                    'GridG' => 200,\n                    'GridB' => 200,\n                    'DrawSubTicks' => true,\n                    'CycleBackground' => true,\n                    'LabelRotation' => $angle,\n                    'Mode' => SCALE_MODE_ADDALL_START0,\n                ];\n                $myPicture->drawScale($scaleSettings);\n\n                /* Turn on Antialiasing */\n                $myPicture->Antialias = true;\n\n                /* Enable shadow computing */\n                $myPicture->setShadow(\n                    true,\n                    [\n                        \"X\" => 1,\n                        \"Y\" => 1,\n                        \"R\" => 0,\n                        \"G\" => 0,\n                        \"B\" => 0,\n                        \"Alpha\" => 10,\n                    ]\n                );\n\n                /* Draw the line chart */\n                $myPicture->setFontProperties(\n                    [\n                        \"FontName\" => api_get_path(SYS_FONTS_PATH).'opensans/OpenSans-Regular.ttf',\n                        \"FontSize\" => 10,\n                    ]\n                );\n                $myPicture->drawSplineChart();\n                $myPicture->drawPlotChart(\n                    [\n                        \"DisplayValues\" => true,\n                        \"PlotBorder\" => true,\n                        \"BorderSize\" => 1,\n                        \"Surrounding\" => -60,\n                        \"BorderAlpha\" => 80,\n                    ]\n                );\n\n                /* Do NOT Write the chart legend */\n\n                /* Write and save into cache */\n                $myCache->writeToCache($chartHash, $myPicture);\n                $imgPath = api_get_path(SYS_ARCHIVE_PATH).$chartHash;\n                $myCache->saveFromCache($chartHash, $imgPath);\n                $imgPath = api_get_path(WEB_ARCHIVE_PATH).$chartHash;\n            }\n\n            return '<img src=\"'.$imgPath.'\">';\n        } else {\n            return api_convert_encoding(\n                '<div id=\"messages\" class=\"warning-message\">'.get_lang('GraphicNotAvailable').'</div>',\n                'UTF-8'\n            );\n        }\n    }\n\n    /*\n     * Gets the company name of a user based on the extra field 'company'.\n     *\n     * @param int $userId\n     *\n     * @return string\n     */\n    public static function getCompanyOfUser($userId = 0)\n    {\n        $userId = (int) $userId;\n        if (0 != $userId) {\n            $tblExtraFieldValue = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n            $tblExtraField = Database::get_main_table(TABLE_EXTRA_FIELD);\n            $sql = \"SELECT\n                    extra_field_value.item_id AS userId,\n                    extra_field_value.value AS company\n                FROM $tblExtraFieldValue AS extra_field_value\n                INNER JOIN $tblExtraField AS extra_field\n                ON (\n                    extra_field_value.field_id = extra_field.id AND\n                    extra_field.variable = 'company'\n                )\n                WHERE\n                    extra_field_value.value != '' AND\n                    extra_field_value.item_id = $userId \";\n            $queryResult = Database::query($sql);\n            $data = Database::store_result($queryResult, 'ASSOC');\n            $totalData = count($data);\n            /* use 'for' to performance */\n            for ($i = 0; $i < $totalData; $i++) {\n                $row = $data[$i];\n                if (isset($row['company']) && !empty($row['company'])) {\n                    return $row['company'];\n                }\n            }\n        }\n\n        return get_lang('NoEntity');\n    }\n\n    /**\n     * Gets a list of users who were enrolled in the lessons.\n     * It is necessary that in the extra field, a company is defined.\n     *\n     *  if lpId is different to 0, this search by lp id too\n     *\n     * Variable $withGroups determines the consultation of the enrollment in groups. The group in total will be taken\n     *\n     * @param string|null $startDate\n     * @param string|null $endDate\n     * @param int         $lpId\n     * @param bool        $withGroups\n     *\n     * @return array\n     */\n    protected static function getCompanyLearnpathSubscription(\n        $startDate = null,\n        $endDate = null,\n        $whereInLp = null,\n        $withGroups = false\n    ) {\n        $whereInLp = Database::escape_string($whereInLp);\n        $tblItemProperty = Database::get_course_table(TABLE_ITEM_PROPERTY);\n        $tblLp = Database::get_course_table(TABLE_LP_MAIN);\n        $tblLpItem = Database::get_course_table(TABLE_LP_ITEM);\n        $tblGroupUser = Database::get_course_table(TABLE_GROUP_USER);\n        $tblUser = Database::get_main_table(TABLE_MAIN_USER);\n        $tblAccessUrlUser = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USER);\n        $accessUrlFilter = '';\n        if (api_is_multiple_url_enabled()) {\n            $urlId = api_get_current_access_url_id();\n            $accessUrlFilter = \" INNER JOIN $tblAccessUrlUser auru\n                      ON (u.id = auru.user_id AND auru.access_url_id = $urlId)\";\n        }\n        $whereCondition = '';\n\n        //Validating dates\n        if (!empty($startDate)) {\n            $startDate = new DateTime($startDate);\n        }\n        if (!empty($endDate)) {\n            $endDate = new DateTime($endDate);\n        }\n        if (!empty($startDate) && !empty($endDate)) {\n            if ($startDate > $endDate) {\n                $dateTemp = $endDate;\n                $endDate = $startDate;\n                $startDate = $dateTemp;\n                unset($dateTemp);\n            }\n        }\n\n        // Settings condition and parametter GET to right date\n        if (!empty($startDate)) {\n            $startDate = api_get_utc_datetime($startDate->setTime(0, 0, 0)->format('Y-m-d H:i:s'));\n            $_GET['startDate'] = $startDate;\n            $whereCondition .= \" AND ip.lastedit_date >= '$startDate' \";\n        }\n        if (!empty($endDate)) {\n            $endDate = api_get_utc_datetime($endDate->setTime(23, 59, 59)->format('Y-m-d H:i:s'));\n            $_GET['endDate'] = $endDate;\n            $whereCondition .= \" AND ip.lastedit_date <= '$endDate' \";\n        }\n        if (!empty($whereInLp)) {\n            $whereCondition .= \" AND ip.ref in ($whereInLp) \";\n        }\n        $datas = [];\n        if (!empty($startDate) or !empty($endDate)) {\n            $query = \"\n            SELECT DISTINCT\n                ip.ref AS lp_item,\n                lpi.iid AS lp_item_id,\n                ip.session_id AS session_id,\n                ip.lastedit_type AS type,\n                u.username AS username,\n                ip.lastedit_date AS lastedit_date,\n                ip.to_user_id AS id,\n                u.firstname as firstname,\n                u.lastname as lastname\n            FROM $tblItemProperty AS ip\n            INNER JOIN $tblUser AS u\n            ON (u.id = ip.to_user_id)\n            INNER JOIN $tblLp AS lp\n            ON (lp.iid = ip.ref AND lp.c_id = ip.c_id)\n            INNER JOIN $tblLpItem AS lpi\n            ON (lp.id = lpi.lp_id AND lp.c_id = lpi.c_id)\n            $accessUrlFilter\n                    WHERE\n                ip.lastedit_type = 'LearnpathSubscription' \";\n            if (strlen($whereCondition) > 2) {\n                $query .= $whereCondition;\n            }\n            if ($withGroups) {\n                $query = \"\n                SELECT DISTINCT\n                    ip.ref AS lp_item,\n                    lpi.iid AS lp_item_id,\n                    ip.session_id AS session_id,\n                    ip.lastedit_type AS type,\n                    ip.lastedit_date AS lastedit_date,\n                    ip.to_group_id AS group_id,\n                    ug.user_id AS id,\n                    u.firstname as firstname,\n                    u.lastname as lastname\n            FROM\n                    $tblItemProperty AS ip\n                INNER JOIN $tblGroupUser AS ug\n                ON (ug.group_id = ip.to_group_id AND ip.c_id = ug.c_id)\n                INNER JOIN $tblUser AS u\n                ON (u.id = ug.user_id)\n                INNER JOIN $tblLp AS lp\n                ON (lp.iid = ip.ref AND ug.c_id = lp.c_id)\n                INNER JOIN $tblLpItem AS lpi\n                ON (lp.id = lpi.lp_id AND lp.c_id = lpi.c_id)\n                $accessUrlFilter\n            WHERE\n                    ip.lastedit_type = 'LearnpathSubscription' AND\n                    ip.to_group_id != 0 \";\n                if (strlen($whereCondition) > 2) {\n                    $query .= $whereCondition;\n                }\n            }\n            $query .= ' ORDER BY ip.ref, ip.session_id ';\n            $queryResult = Database::query($query);\n            $data = Database::store_result($queryResult, 'ASSOC');\n            $totalData = count($data);\n            /* use 'for' to performance */\n            for ($i = 0; $i < $totalData; $i++) {\n                $row = $data[$i];\n                $row['complete_name'] = api_get_person_name($row['firstname'], $row['lastname']);\n                $row['company'] = self::getCompanyOfUser($row['id']);\n                $datas[$row['lp_item_id']][] = $row;\n            }\n        }\n\n        return $datas;\n    }\n\n    private static function getDataAccessTrackingFilters($sql)\n    {\n        if (isset($_GET['course_id']) && !empty($_GET['course_id'])) {\n            $courseId = (int) $_GET['course_id'];\n            $sql .= \" AND c.id = \".$courseId;\n        }\n\n        if (isset($_GET['session_id']) && !empty($_GET['session_id'])) {\n            $sessionId = (int) $_GET['session_id'];\n            $sql .= \" AND a.session_id = \".$sessionId;\n        }\n\n        if (isset($_GET['student_id']) && !empty($_GET['student_id'])) {\n            $userId = (int) $_GET['student_id'];\n            $sql .= \" AND u.user_id = \".$userId;\n        }\n\n        $sql .= \" AND u.status <> \".ANONYMOUS;\n\n        if (isset($_GET['date']) && !empty($_GET['date'])) {\n            $dateRangePicker = new DateRangePicker('date', '', ['timePicker' => 'true']);\n            $dates = $dateRangePicker->parseDateRange($_GET['date']);\n            if (isset($dates['start']) && !empty($dates['start'])) {\n                $dates['start'] = Database::escape_string(api_get_utc_datetime($dates['start']));\n                $sql .= \" AND login_course_date >= '\".$dates['start'].\"'\";\n            }\n            if (isset($dates['end']) && !empty($dates['end'])) {\n                $dates['end'] = Database::escape_string(api_get_utc_datetime($dates['end']));\n                $sql .= \" AND logout_course_date <= '\".$dates['end'].\"'\";\n            }\n        }\n\n        return $sql;\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\nuse Symfony\\Component\\DomCrawler\\Crawler;\n\n/**\n * Defines the scorm class, which is meant to contain the scorm items (nuclear elements).\n *\n * @author    Yannick Warnier <ywarnier@beeznest.org>\n */\nclass scorm extends learnpath\n{\n    public $manifest = [];\n    public $resources = [];\n    public $resources_att = [];\n    public $organizations = [];\n    public $organizations_att = [];\n    public $metadata = [];\n    // Will hold the references to resources for each item ID found.\n    public $idrefs = [];\n    // For each resource found, stores the file url/uri.\n    public $refurls = [];\n    /*  Path between the scorm/ directory and the imsmanifest.xml e.g.\n    maritime_nav/maritime_nav. This is the path that will be used in the\n    lp_path when importing a package. */\n    public $subdir = '';\n    public $items = [];\n    // Keeps the zipfile safe for the object's life so that we can use it if no title avail.\n    public $zipname = '';\n    // Keeps an index of the number of uses of the zipname so far.\n    public $lastzipnameindex = 0;\n    public $manifest_encoding = 'UTF-8';\n    public $debug = false;\n\n    /**\n     * Class constructor. Based on the parent constructor.\n     *\n     * @param    string    Course code\n     * @param    int    Learnpath ID in DB\n     * @param    int    User ID\n     */\n    public function __construct($course_code = null, $resource_id = null, $user_id = null)\n    {\n        if ($this->debug > 0) {\n            error_log('New LP - scorm::scorm('.$course_code.','.$resource_id.','.$user_id.') - In scorm constructor');\n        }\n\n        parent::__construct($course_code, $resource_id, $user_id);\n    }\n\n    /**\n     * Opens a resource.\n     *\n     * @param int $id Database ID of the resource\n     */\n    public function open($id)\n    {\n        if ($this->debug > 0) {\n            error_log('New LP - scorm::open() - In scorm::open method', 0);\n        }\n        // redefine parent method\n    }\n\n    /**\n     * Possible SCO status: see CAM doc 2.3.2.5.1: passed, completed, browsed, failed, not attempted, incomplete.\n     * Prerequisites: see CAM doc 2.3.2.5.1 for pseudo-code.\n     *\n     * Parses an imsmanifest.xml file and puts everything into the $manifest array.\n     *\n     * @param\tstring\tPath to the imsmanifest.xml file on the system.\n     * If not defined, uses the base path of the course's scorm dir\n     *\n     * @return array Structured array representing the imsmanifest's contents\n     */\n    public function parse_manifest($file = '')\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::parse_manifest('.$file.')', 0);\n        }\n        if (empty($file)) {\n            // Get the path of the imsmanifest file.\n        }\n\n        if (is_file($file) && is_readable($file) && ($xml = @file_get_contents($file))) {\n            // Parsing using PHP5 DOMXML methods.\n            if ($this->debug > 0) {\n                error_log('In scorm::parse_manifest() - Parsing using PHP5 method');\n            }\n            // $this->manifest_encoding = api_detect_encoding_xml($xml);\n            // This is the usual way for reading the encoding.\n            // This method reads the encoding, it tries to be correct even in cases\n            // of wrong or missing encoding declarations.\n            $this->manifest_encoding = self::detect_manifest_encoding($xml);\n\n            // UTF-8 is supported by DOMDocument class, this is for sure.\n            $xml = api_utf8_encode_xml($xml, $this->manifest_encoding);\n\n            $crawler = new Crawler();\n            $crawler->addXmlContent($xml);\n\n            $xmlErrors = libxml_get_errors();\n\n            if (!empty($xmlErrors)) {\n                if ($this->debug > 0) {\n                    error_log('New LP - In scorm::parse_manifest() - Exception thrown when loading '.$file.' in DOMDocument');\n                }\n                // Throw exception?\n                return null;\n            }\n\n            if ($this->debug > 1) {\n                error_log('New LP - Called  (encoding:'.$this->manifest_encoding.' - saved: '.$this->manifest_encoding.')', 0);\n            }\n\n            $root = $crawler->getNode(0);\n\n            if ($root->hasAttributes()) {\n                $attributes = $root->attributes;\n                if (0 !== $attributes->length) {\n                    foreach ($attributes as $attrib) {\n                        // <manifest> element attributes\n                        $this->manifest[$attrib->name] = $attrib->value;\n                    }\n                }\n            }\n            $this->manifest['name'] = $root->tagName;\n            if ($root->hasChildNodes()) {\n                $children = $root->childNodes;\n                if (0 !== $children->length) {\n                    foreach ($children as $child) {\n                        // <manifest> element children (can be <metadata>, <organizations> or <resources> )\n                        if (XML_ELEMENT_NODE == $child->nodeType) {\n                            switch ($child->tagName) {\n                                case 'metadata':\n                                    // Parse items from inside the <metadata> element.\n                                    $this->metadata = new scormMetadata('manifest', $child);\n                                    break;\n                                case 'organizations':\n                                    // Contains the course structure - this element appears 1 and only 1 time in a package imsmanifest.\n                                    // It contains at least one 'organization' sub-element.\n                                    $orgs_attribs = $child->attributes;\n                                    foreach ($orgs_attribs as $orgs_attrib) {\n                                        // Attributes of the <organizations> element.\n                                        if (XML_ATTRIBUTE_NODE == $orgs_attrib->nodeType) {\n                                            $this->manifest['organizations'][$orgs_attrib->name] = $orgs_attrib->value;\n                                        }\n                                    }\n                                    $orgs_nodes = $child->childNodes;\n                                    $i = 0;\n                                    $found_an_org = false;\n                                    foreach ($orgs_nodes as $orgnode) {\n                                        // <organization> elements - can contain <item>, <metadata> and <title>\n                                        // Here we are at the 'organization' level. There might be several organization tags but\n                                        // there is generally only one.\n                                        // There are generally three children nodes we are looking for inside and organization:\n                                        // -title\n                                        // -item (may contain other item tags or may appear several times inside organization)\n                                        // -metadata (relative to the organization)\n                                        $found_an_org = false;\n                                        switch ($orgnode->nodeType) {\n                                            case XML_TEXT_NODE:\n                                                // Ignore here.\n                                                break;\n                                            case XML_ATTRIBUTE_NODE:\n                                                // Just in case there would be interesting attributes inside the organization tag.\n                                                // There shouldn't as this is a node-level, not a data level.\n                                                //$manifest['organizations'][$i][$orgnode->name] = $orgnode->value;\n                                                //$found_an_org = true;\n                                                break;\n                                            case XML_ELEMENT_NODE:\n                                                // <item>, <metadata> or <title> (or attributes)\n                                                $organizations_attributes = $orgnode->attributes;\n                                                foreach ($organizations_attributes as $orgs_attr) {\n                                                    $this->organizations_att[$orgs_attr->name] = $orgs_attr->value;\n                                                }\n                                                $oOrganization = new scormOrganization(\n                                                    'manifest',\n                                                    $orgnode,\n                                                    $this->manifest_encoding\n                                                );\n                                                if ($oOrganization->identifier != '') {\n                                                    $name = $oOrganization->get_name();\n                                                    if (empty($name)) {\n                                                        // If the org title is empty, use zip file name.\n                                                        $myname = $this->zipname;\n                                                        if ($this->lastzipnameindex != 0) {\n                                                            $myname = $myname + $this->lastzipnameindex;\n                                                            $this->lastzipnameindex++;\n                                                        }\n                                                        $oOrganization->set_name($this->zipname);\n                                                    }\n                                                    $this->organizations[$oOrganization->identifier] = $oOrganization;\n                                                }\n                                                break;\n                                        }\n                                    }\n                                    break;\n                                case 'resources':\n                                    if ($child->hasAttributes()) {\n                                        $resources_attribs = $child->attributes;\n                                        foreach ($resources_attribs as $res_attr) {\n                                            if ($res_attr->type == XML_ATTRIBUTE_NODE) {\n                                                $this->manifest['resources'][$res_attr->name] = $res_attr->value;\n                                            }\n                                        }\n                                    }\n                                    if ($child->hasChildNodes()) {\n                                        $resources_nodes = $child->childNodes;\n                                        $i = 0;\n                                        foreach ($resources_nodes as $res_node) {\n                                            $oResource = new scormResource('manifest', $res_node);\n                                            if ($oResource->identifier != '') {\n                                                $this->resources[$oResource->identifier] = $oResource;\n                                                $i++;\n                                            }\n                                        }\n                                    }\n                                    // Contains links to physical resources.\n                                    break;\n                                case 'manifest':\n                                    // Only for sub-manifests.\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n            // End parsing using PHP5 DOMXML methods.\n        } else {\n            if ($this->debug > 1) {\n                error_log('New LP - Could not open/read file '.$file);\n            }\n            $this->set_error_msg(\"File $file could not be read\");\n\n            return null;\n        }\n\n        $fixTemplate = api_get_configuration_value('learnpath_fix_xerte_template');\n        $proxyPath = api_get_configuration_value('learnpath_proxy_url');\n        if ($fixTemplate && !empty($proxyPath)) {\n            // Check organisations:\n            if (isset($this->manifest['organizations'])) {\n                foreach ($this->manifest['organizations'] as $data) {\n                    if (strpos(strtolower($data), 'xerte') !== false) {\n                        // Check if template.xml exists:\n                        $templatePath = str_replace('imsmanifest.xml', 'template.xml', $file);\n                        if (file_exists($templatePath) && is_file($templatePath)) {\n                            $templateContent = file_get_contents($templatePath);\n                            $find = [\n                                'href=\"www.',\n                                'href=\"https://',\n                                'href=\"http://',\n                                'url=\"www.',\n                                'pdfs/download.php?',\n                            ];\n\n                            $replace = [\n                                'href=\"http://www.',\n                                'target = \"_blank\" href=\"'.$proxyPath.'?type=link&src=https://',\n                                'target = \"_blank\" href=\"'.$proxyPath.'?type=link&src=http://',\n                                'url=\"http://www.',\n                                'pdfs/download.php&',\n                            ];\n                            $templateContent = str_replace($find, $replace, $templateContent);\n                            file_put_contents($templatePath, $templateContent);\n                        }\n\n                        // Fix link generation:\n                        $linkPath = str_replace('imsmanifest.xml', 'models_html5/links.html', $file);\n                        if (file_exists($linkPath) && is_file($linkPath)) {\n                            $linkContent = file_get_contents($linkPath);\n                            $find = [\n                                ':this.getAttribute(\"url\")',\n                            ];\n                            $replace = [\n                                ':\"'.$proxyPath.'?type=link&src=\" + this.getAttribute(\"url\")',\n                            ];\n                            $linkContent = str_replace($find, $replace, $linkContent);\n                            file_put_contents($linkPath, $linkContent);\n                        }\n\n                        // Fix iframe generation\n                        $framePath = str_replace('imsmanifest.xml', 'models_html5/embedDiv.html', $file);\n\n                        if (file_exists($framePath) && is_file($framePath)) {\n                            $content = file_get_contents($framePath);\n                            $find = [\n                                '$iFrameHolder.html(iFrameTag);',\n                            ];\n                            $replace = [\n                                'iFrameTag = \\'<a target =\"_blank\" href=\"'.$proxyPath.'?type=link&src=\\'+ pageSrc + \\'\">Open website. <img width=\"16px\" src=\"'.Display::returnIconPath('link-external.png').'\"></a>\\'; $iFrameHolder.html(iFrameTag); ',\n                            ];\n                            $content = str_replace($find, $replace, $content);\n                            file_put_contents($framePath, $content);\n                        }\n\n                        // Fix new window generation\n                        $newWindowPath = str_replace('imsmanifest.xml', 'models_html5/newWindow.html', $file);\n\n                        if (file_exists($newWindowPath) && is_file($newWindowPath)) {\n                            $content = file_get_contents($newWindowPath);\n                            $find = [\n                                'var src = x_currentPageXML',\n                            ];\n                            $replace = [\n                                'var src = \"'.$proxyPath.'?type=link&src=\" + x_currentPageXML',\n                            ];\n                            $content = str_replace($find, $replace, $content);\n                            file_put_contents($newWindowPath, $content);\n                        }\n                    }\n                }\n            }\n        }\n\n        // TODO: Close the DOM handler.\n        return $this->manifest;\n    }\n\n    /**\n     * Import the scorm object (as a result from the parse_manifest function) into the database structure.\n     *\n     * @param string $courseCode\n     * @param int    $userMaxScore\n     * @param int    $sessionId\n     * @param int    $userId\n     *\n     * @return bool Returns -1 on error\n     */\n    public function import_manifest(\n        $courseCode,\n        $userMaxScore = 1,\n        $sessionId = 0,\n        $userId = 0\n    ) {\n        if ($this->debug > 0) {\n            error_log('New LP - Entered import_manifest('.$courseCode.')', 0);\n        }\n        $courseInfo = api_get_course_info($courseCode);\n        $courseId = $courseInfo['real_id'];\n\n        $userId = (int) $userId;\n        if (empty($userId)) {\n            $userId = api_get_user_id();\n        }\n        // Get table names.\n        $new_lp = Database::get_course_table(TABLE_LP_MAIN);\n        $new_lp_item = Database::get_course_table(TABLE_LP_ITEM);\n        $userMaxScore = (int) $userMaxScore;\n        $sessionId = empty($sessionId) ? api_get_session_id() : (int) $sessionId;\n        foreach ($this->organizations as $id => $dummy) {\n            $oOrganization = &$this->organizations[$id];\n            // Prepare and execute insert queries:\n            // -for learnpath\n            // -for items\n            // -for views?\n            $get_max = \"SELECT MAX(display_order) FROM $new_lp WHERE c_id = $courseId \";\n            $res_max = Database::query($get_max);\n            $dsp = 1;\n            if (Database::num_rows($res_max) > 0) {\n                $row = Database::fetch_array($res_max);\n                $dsp = $row[0] + 1;\n            }\n            $myname = api_utf8_decode($oOrganization->get_name());\n            $now = api_get_utc_datetime();\n\n            $params = [\n                'c_id' => $courseId,\n                'lp_type' => 2,\n                'name' => $myname,\n                'ref' => $oOrganization->get_ref(),\n                'description' => '',\n                'path' => $this->subdir,\n                'force_commit' => 0,\n                'default_view_mod' => 'embedded',\n                'default_encoding' => $this->manifest_encoding,\n                'js_lib' => 'scorm_api.php',\n                'display_order' => $dsp,\n                'session_id' => $sessionId,\n                'use_max_score' => $userMaxScore,\n                'content_maker' => '',\n                'content_license' => '',\n                'debug' => 0,\n                'theme' => '',\n                'preview_image' => '',\n                'author' => '',\n                'prerequisite' => 0,\n                'hide_toc_frame' => 0,\n                'seriousgame_mode' => 0,\n                'autolaunch' => 0,\n                'category_id' => 0,\n                'max_attempts' => 0,\n                'subscribe_users' => 0,\n                'created_on' => $now,\n                'modified_on' => $now,\n                'publicated_on' => $now,\n            ];\n\n            $lp_id = Database::insert($new_lp, $params);\n\n            if ($lp_id) {\n                $sql = \"UPDATE $new_lp SET id = iid WHERE iid = $lp_id\";\n                Database::query($sql);\n\n                $this->lp_id = $lp_id;\n\n                // Insert into item_property.\n                api_item_property_update(\n                    $courseInfo,\n                    TOOL_LEARNPATH,\n                    $this->lp_id,\n                    'LearnpathAdded',\n                    $userId\n                );\n\n                api_item_property_update(\n                    $courseInfo,\n                    TOOL_LEARNPATH,\n                    $this->lp_id,\n                    'visible',\n                    $userId\n                );\n            }\n\n            // Now insert all elements from inside that learning path.\n            // Make sure we also get the href and sco/asset from the resources.\n            $list = $oOrganization->get_flat_items_list();\n            $parents_stack = [0];\n            $parent = 0;\n            $previous = 0;\n            $level = 0;\n\n            foreach ($list as $item) {\n                if ($item['level'] > $level) {\n                    // Push something into the parents array.\n                    array_push($parents_stack, $previous);\n                    $parent = $previous;\n                } elseif ($item['level'] < $level) {\n                    $diff = $level - $item['level'];\n                    // Pop something out of the parents array.\n                    for ($j = 1; $j <= $diff; $j++) {\n                        $outdated_parent = array_pop($parents_stack);\n                    }\n                    $parent = array_pop($parents_stack); // Just save that value, then add it back.\n                    array_push($parents_stack, $parent);\n                }\n                $path = '';\n                $type = 'dir';\n                if (isset($this->resources[$item['identifierref']])) {\n                    $oRes = &$this->resources[$item['identifierref']];\n                    $path = @$oRes->get_path();\n                    if (!empty($path)) {\n                        $temptype = $oRes->get_scorm_type();\n                        if (!empty($temptype)) {\n                            $type = $temptype;\n                        }\n                    }\n                }\n                $level = $item['level'];\n                $field_add = '';\n                $value_add = '';\n\n                if (!empty($item['masteryscore'])) {\n                    $field_add .= 'mastery_score, ';\n                    $value_add .= $item['masteryscore'].',';\n                }\n\n                if (!empty($item['maxtimeallowed'])) {\n                    $field_add .= 'max_time_allowed, ';\n                    $value_add .= \"'\".$item['maxtimeallowed'].\"',\";\n                }\n                $title = Database::escape_string($item['title']);\n                $title = api_utf8_decode($title);\n                $max_score = (int) $item['max_score'];\n\n                if ($max_score === 0) {\n                    // If max score is not set The use_max_score parameter\n                    // is check in order to use 100 (chamilo style) or '' (strict scorm)\n                    $max_score = 'NULL';\n                    if ($userMaxScore) {\n                        $max_score = 100;\n                    }\n                } else {\n                    // Otherwise save the max score.\n                    $max_score = \"'$max_score'\";\n                }\n\n                $identifier = Database::escape_string($item['identifier']);\n\n                if (empty($title)) {\n                    $title = get_lang('Untitled');\n                }\n\n                $prereq = Database::escape_string($item['prerequisites']);\n                $item['datafromlms'] = Database::escape_string($item['datafromlms']);\n                $item['parameters'] = Database::escape_string($item['parameters']);\n\n                $sql = \"INSERT INTO $new_lp_item (c_id, lp_id,item_type,ref,title, path,min_score,max_score, $field_add parent_item_id,previous_item_id,next_item_id, prerequisite,display_order,launch_data, parameters)\n                        VALUES ($courseId, $lp_id, '$type', '$identifier', '$title', '$path' , 0, $max_score, $value_add $parent, $previous, 0, '$prereq', \".$item['rel_order'].\", '\".$item['datafromlms'].\"', '\".$item['parameters'].\"' )\";\n\n                Database::query($sql);\n                if ($this->debug > 1) {\n                    error_log('New LP - In import_manifest(), inserting item : '.$sql);\n                }\n                $item_id = Database::insert_id();\n\n                if ($item_id) {\n                    $sql = \"UPDATE $new_lp_item SET id = iid WHERE iid = $item_id\";\n                    Database::query($sql);\n\n                    // Now update previous item to change next_item_id.\n                    $upd = \"UPDATE $new_lp_item SET next_item_id = $item_id\n                            WHERE iid = $previous\";\n                    Database::query($upd);\n                    // Update previous item id.\n                    $previous = $item_id;\n                }\n\n                // Code for indexing, now only index specific fields like terms and the title.\n                if (!empty($_POST['index_document'])) {\n                    require_once api_get_path(LIBRARY_PATH).'specific_fields_manager.lib.php';\n\n                    $di = new ChamiloIndexer();\n                    isset($_POST['language']) ? $lang = Database::escape_string($_POST['language']) : $lang = 'english';\n                    $di->connectDb(null, null, $lang);\n                    $ic_slide = new IndexableChunk();\n                    $ic_slide->addValue('title', $title);\n                    $specific_fields = get_specific_field_list();\n                    $all_specific_terms = '';\n                    foreach ($specific_fields as $specific_field) {\n                        if (isset($_REQUEST[$specific_field['code']])) {\n                            $sterms = trim($_REQUEST[$specific_field['code']]);\n                            $all_specific_terms .= ' '.$sterms;\n                            if (!empty($sterms)) {\n                                $sterms = explode(',', $sterms);\n                                foreach ($sterms as $sterm) {\n                                    $ic_slide->addTerm(trim($sterm), $specific_field['code']);\n                                }\n                            }\n                        }\n                    }\n                    $body_to_index = $all_specific_terms.' '.$title;\n                    $ic_slide->addValue(\"content\", $body_to_index);\n                    // TODO: Add a comment to say terms separated by commas.\n                    $courseid = api_get_course_id();\n                    $ic_slide->addCourseId($courseid);\n                    $ic_slide->addToolId(TOOL_LEARNPATH);\n                    // TODO: Unify with other lp types.\n                    $xapian_data = [\n                        SE_COURSE_ID => $courseid,\n                        SE_TOOL_ID => TOOL_LEARNPATH,\n                        SE_DATA => ['lp_id' => $lp_id, 'lp_item' => $previous, 'document_id' => ''],\n                        SE_USER => api_get_user_id(),\n                    ];\n                    $ic_slide->xapian_data = serialize($xapian_data);\n                    $di->addChunk($ic_slide);\n                    // Index and return search engine document id.\n                    $did = $di->index();\n                    if ($did) {\n                        // Save it to db.\n                        $tbl_se_ref = Database::get_main_table(TABLE_MAIN_SEARCH_ENGINE_REF);\n                        $sql = 'INSERT INTO %s (id, course_code, tool_id, ref_id_high_level, ref_id_second_level, search_did)\n                                VALUES (NULL , \\'%s\\', \\'%s\\', %s, %s, %s)';\n                        $sql = sprintf($sql, $tbl_se_ref, $courseCode, TOOL_LEARNPATH, $lp_id, $previous, $did);\n                        Database::query($sql);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Intermediate to import_package only to allow import from local zip files.\n     *\n     * @param  string    Path to the zip file, from the sys root\n     * @param  string    Current path (optional)\n     *\n     * @return string Absolute path to the imsmanifest.xml file or empty string on error\n     */\n    public function import_local_package($file_path, $currentDir = '')\n    {\n        // TODO: Prepare info as given by the $_FILES[''] vector.\n        $fileInfo = [];\n        $fileInfo['tmp_name'] = $file_path;\n        $fileInfo['name'] = basename($file_path);\n        // Call the normal import_package function.\n        return $this->import_package($fileInfo, $currentDir);\n    }\n\n    /**\n     * Imports a zip file into the Chamilo structure.\n     *\n     * @param string    $zipFileInfo       Zip file info as given by $_FILES['userFile']\n     * @param string    $currentDir\n     * @param array     $courseInfo\n     * @param bool      $updateDirContents\n     * @param learnpath $lpToCheck\n     * @param bool      $allowHtaccess\n     *\n     * @return string $current_dir Absolute path to the imsmanifest.xml file or empty string on error\n     */\n    public function import_package(\n        $zipFileInfo,\n        $currentDir = '',\n        $courseInfo = [],\n        $updateDirContents = false,\n        $lpToCheck = null,\n        $allowHtaccess = false\n    ) {\n        if ($this->debug > 0) {\n            error_log(\n                'In scorm::import_package('.print_r($zipFileInfo, true).',\"'.$currentDir.'\") method'\n            );\n        }\n\n        $courseInfo = empty($courseInfo) ? api_get_course_info() : $courseInfo;\n        $maxFilledSpace = DocumentManager::get_course_quota($courseInfo['code']);\n\n        $zipFilePath = $zipFileInfo['tmp_name'];\n        $zipFileName = $zipFileInfo['name'];\n\n        if ($this->debug > 1) {\n            error_log(\n                'New LP - import_package() - zip file path = '.$zipFilePath.', zip file name = '.$zipFileName,\n                0\n            );\n        }\n\n        $courseRelDir = api_get_course_path($courseInfo['code']).'/scorm'; // scorm dir web path starting from /courses\n        $courseSysDir = api_get_path(SYS_COURSE_PATH).$courseRelDir; // Absolute system path for this course.\n        $currentDir = api_replace_dangerous_char(trim($currentDir)); // Current dir we are in, inside scorm/\n\n        if ($this->debug > 1) {\n            error_log('New LP - import_package() - current_dir = '.$currentDir, 0);\n        }\n\n        // Get name of the zip file without the extension.\n        $fileInfo = pathinfo($zipFileName);\n        $filename = $fileInfo['basename'];\n        $extension = $fileInfo['extension'];\n        $fileBaseName = str_replace('.'.$extension, '', $filename); // Filename without its extension.\n        $this->zipname = $fileBaseName; // Save for later in case we don't have a title.\n        $newDir = api_replace_dangerous_char(trim($fileBaseName));\n        $this->subdir = $newDir;\n        if ($this->debug > 1) {\n            error_log('New LP - Received zip file name: '.$zipFilePath);\n            error_log(\"New LP - subdir is first set to : \".$this->subdir);\n            error_log(\"New LP - base file name is : \".$fileBaseName);\n        }\n\n        $zipFile = new PclZip($zipFilePath);\n        // Check the zip content (real size and file extension).\n        $zipContentArray = $zipFile->listContent();\n        $packageType = '';\n        $manifestList = [];\n        // The following loop should be stopped as soon as we found the right imsmanifest.xml (how to recognize it?).\n        $realFileSize = 0;\n        foreach ($zipContentArray as $thisContent) {\n            if (preg_match('~.(php.*|phtml)$~i', $thisContent['filename'])) {\n                $file = $thisContent['filename'];\n                $this->set_error_msg(\"File $file contains a PHP script\");\n            } elseif (stristr($thisContent['filename'], 'imsmanifest.xml')) {\n                if ($thisContent['filename'] == basename($thisContent['filename'])) {\n                } else {\n                    if ($this->debug > 2) {\n                        error_log(\"New LP - subdir is now \".$this->subdir);\n                    }\n                }\n                $packageType = 'scorm';\n                $manifestList[] = $thisContent['filename'];\n            }\n            $realFileSize += $thisContent['size'];\n        }\n\n        // Now get the shortest path (basically, the imsmanifest that is the closest to the root).\n        $shortestPath = $manifestList[0];\n        $slashCount = substr_count($shortestPath, '/');\n        foreach ($manifestList as $manifestPath) {\n            $tmpSlashCount = substr_count($manifestPath, '/');\n            if ($tmpSlashCount < $slashCount) {\n                $shortestPath = $manifestPath;\n                $slashCount = $tmpSlashCount;\n            }\n        }\n\n        $this->subdir .= '/'.dirname($shortestPath); // Do not concatenate because already done above.\n        $manifest = $shortestPath;\n        if ($this->debug) {\n            error_log(\"New LP - Package type is now: '$packageType'\");\n        }\n        if ($packageType == '') {\n            Display::addFlash(\n                Display::return_message(get_lang('NotScormContent'))\n            );\n\n            return false;\n        }\n\n        if (!enough_size($realFileSize, $courseSysDir, $maxFilledSpace)) {\n            if ($this->debug > 1) {\n                error_log('New LP - Not enough space to store package');\n            }\n            Display::addFlash(\n                Display::return_message(get_lang('NoSpace'))\n            );\n\n            return false;\n        }\n\n        if ($updateDirContents && $lpToCheck) {\n            $originalPath = str_replace('/.', '', $lpToCheck->path);\n            if ($originalPath != $newDir) {\n                Display::addFlash(Display::return_message(get_lang('FileError')));\n\n                return false;\n            }\n        }\n\n        // It happens on Linux that $newDir sometimes doesn't start with '/'\n        if ($newDir[0] != '/') {\n            $newDir = '/'.$newDir;\n        }\n\n        if ($newDir[strlen($newDir) - 1] == '/') {\n            $newDir = substr($newDir, 0, -1);\n        }\n\n        /* Uncompressing phase */\n        /*\n            We need to process each individual file in the zip archive to\n            - add it to the database\n            - parse & change relative html links\n            - make sure the filenames are secure (filter funny characters or php extensions)\n        */\n        if (is_dir($courseSysDir.$newDir) ||\n            @mkdir(\n                $courseSysDir.$newDir,\n                api_get_permissions_for_new_directories()\n            )\n        ) {\n            // PHP method - slower...\n            if ($this->debug >= 1) {\n                error_log('New LP - Changing dir to '.$courseSysDir.$newDir);\n            }\n\n            chdir($courseSysDir.$newDir);\n\n            $callBack = 'clean_up_files_in_zip';\n            if ($allowHtaccess) {\n                $callBack = 'cleanZipFilesAllowHtaccess';\n            }\n\n            if (api_get_configuration_value('skip_scorm_package_clean_up')) {\n                $callBack = 'cleanZipFilesNoRename';\n            }\n\n            $zipFile->extract(\n                PCLZIP_CB_PRE_EXTRACT,\n                $callBack\n            );\n\n            if (!empty($newDir)) {\n                $newDir = $newDir.'/';\n            }\n            api_chmod_R($courseSysDir.$newDir, api_get_permissions_for_new_directories());\n        } else {\n            return false;\n        }\n\n        return $courseSysDir.$newDir.$manifest;\n    }\n\n    /**\n     * Sets the proximity setting in the database.\n     *\n     * @param string    Proximity setting\n     * @param int $courseId\n     *\n     * @return bool\n     */\n    public function set_proximity($proxy = '', $courseId = null)\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::set_proximity('.$proxy.') method');\n        }\n        $lp = $this->get_id();\n        if ($lp != 0) {\n            $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n            $sql = \"UPDATE $tbl_lp SET content_local = '$proxy'\n                    WHERE iid = $lp\";\n            $res = Database::query($sql);\n\n            return $res;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Sets the theme setting in the database.\n     *\n     * @param string    theme setting\n     *\n     * @return bool\n     */\n    public function set_theme($theme = '')\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::set_theme('.$theme.') method');\n        }\n        $lp = $this->get_id();\n        if ($lp != 0) {\n            $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n            $sql = \"UPDATE $tbl_lp SET theme = '$theme'\n                    WHERE iid = $lp\";\n            $res = Database::query($sql);\n\n            return $res;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Sets the image setting in the database.\n     *\n     * @param string preview_image setting\n     *\n     * @return bool\n     */\n    public function set_preview_image($preview_image = '')\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::set_theme('.$preview_image.') method', 0);\n        }\n        $lp = $this->get_id();\n        if ($lp != 0) {\n            $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n            $sql = \"UPDATE $tbl_lp SET preview_image = '$preview_image'\n                    WHERE iid = $lp\";\n            $res = Database::query($sql);\n\n            return $res;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Sets the author  setting in the database.\n     *\n     * @param string $author\n     *\n     * @return bool\n     */\n    public function set_author($author = '')\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::set_author('.$author.') method', 0);\n        }\n        $lp = $this->get_id();\n        if ($lp != 0) {\n            $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n            $sql = \"UPDATE $tbl_lp SET author = '$author'\n                    WHERE iid = \".$lp;\n            $res = Database::query($sql);\n\n            return $res;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Sets the content maker setting in the database.\n     *\n     * @param string    Proximity setting\n     *\n     * @return bool\n     */\n    public function set_maker($maker = '', $courseId = null)\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::set_maker method('.$maker.')', 0);\n        }\n        $lp = $this->get_id();\n        if ($lp != 0) {\n            $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n            $sql = \"UPDATE $tbl_lp SET content_maker = '$maker' WHERE iid = $lp\";\n            $res = Database::query($sql);\n\n            return $res;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Exports the current SCORM object's files as a zip.\n     * Excerpts taken from learnpath_functions.inc.php::exportpath().\n     *\n     * @param int    Learnpath ID (optional, taken from object context if not defined)\n     *\n     * @return bool\n     */\n    public function export_zip($lp_id = null)\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::export_zip method('.$lp_id.')');\n        }\n        if (empty($lp_id)) {\n            if (!is_object($this)) {\n                return false;\n            } else {\n                $id = $this->get_id();\n                if (empty($id)) {\n                    return false;\n                } else {\n                    $lp_id = $this->get_id();\n                }\n            }\n        }\n        //zip everything that is in the corresponding scorm dir\n        //write the zip file somewhere (might be too big to return)\n\n        $_course = api_get_course_info();\n        $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n        $sql = \"SELECT * FROM $tbl_lp WHERE iid = $lp_id\";\n        $result = Database::query($sql);\n        $row = Database::fetch_array($result);\n        $LPname = $row['path'];\n        $list = explode('/', $LPname);\n        $LPnamesafe = $list[0];\n        $zipfoldername = api_get_path(SYS_COURSE_PATH).$_course['directory'].'/temp/'.$LPnamesafe;\n        $scormfoldername = api_get_path(SYS_COURSE_PATH).$_course['directory'].'/scorm/'.$LPnamesafe;\n        $zipfilename = $zipfoldername.'/'.$LPnamesafe.'.zip';\n\n        // Get a temporary dir for creating the zip file.\n        //error_log('New LP - cleaning dir '.$zipfoldername, 0);\n        my_delete($zipfoldername); // Make sure the temp dir is cleared.\n        mkdir($zipfoldername, api_get_permissions_for_new_directories());\n\n        // Create zipfile of given directory.\n        $zip_folder = new PclZip($zipfilename);\n        $zip_folder->create($scormfoldername.'/', PCLZIP_OPT_REMOVE_PATH, $scormfoldername.'/');\n\n        //This file sending implies removing the default mime-type from php.ini\n        //DocumentManager::file_send_for_download($zipfilename, true, $LPnamesafe.'.zip');\n        DocumentManager::file_send_for_download($zipfilename, true);\n\n        // Delete the temporary zip file and directory in fileManage.lib.php\n        my_delete($zipfilename);\n        my_delete($zipfoldername);\n\n        return true;\n    }\n\n    /**\n     * Gets a resource's path if available, otherwise return empty string.\n     *\n     * @param\tstring\tResource ID as used in resource array\n     *\n     * @return string The resource's path as declared in imsmanifest.xml\n     */\n    public function get_res_path($id)\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::get_res_path('.$id.') method');\n        }\n        $path = '';\n        if (isset($this->resources[$id])) {\n            $oRes = &$this->resources[$id];\n            $path = @$oRes->get_path();\n        }\n\n        return $path;\n    }\n\n    /**\n     * Gets a resource's type if available, otherwise return empty string.\n     *\n     * @param  string    Resource ID as used in resource array\n     *\n     * @return string The resource's type as declared in imsmanifest.xml\n     */\n    public function get_res_type($id)\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::get_res_type('.$id.') method');\n        }\n        $type = '';\n        if (isset($this->resources[$id])) {\n            $oRes = &$this->resources[$id];\n            $temptype = $oRes->get_scorm_type();\n            if (!empty($temptype)) {\n                $type = $temptype;\n            }\n        }\n\n        return $type;\n    }\n\n    /**\n     * Gets the default organisation's title.\n     *\n     * @return string The organization's title\n     */\n    public function get_title()\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::get_title() method');\n        }\n        $title = '';\n        if (isset($this->manifest['organizations']['default'])) {\n            $title = $this->organizations[$this->manifest['organizations']['default']]->get_name();\n        } elseif (count($this->organizations) == 1) {\n            // This will only get one title but so we don't need to know the index.\n            foreach ($this->organizations as $id => $value) {\n                $title = $this->organizations[$id]->get_name();\n                break;\n            }\n        }\n\n        return $title;\n    }\n\n    /**\n     * // TODO @TODO Implement this function to restore items data from an imsmanifest,\n     * updating the existing table... This will prove very useful in case initial data\n     * from imsmanifest were not imported well enough.\n     *\n     * @param string $courseCode\n     * @param int\tLP ID (in database)\n     * @param string\tManifest file path (optional if lp_id defined)\n     *\n     * @return int New LP ID or false on failure\n     *             TODO @TODO Implement imsmanifest_path parameter\n     */\n    public function reimport_manifest($courseCode, $lp_id = null, $imsmanifest_path = '')\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::reimport_manifest() method', 0);\n        }\n\n        $courseInfo = api_get_course_info($courseCode);\n        if (empty($courseInfo)) {\n            $this->error = 'Course code does not exist in database';\n\n            return false;\n        }\n\n        $this->cc = $courseInfo['code'];\n\n        $lp_table = Database::get_course_table(TABLE_LP_MAIN);\n        $lp_id = intval($lp_id);\n        $sql = \"SELECT * FROM $lp_table WHERE iid = $lp_id\";\n        if ($this->debug > 2) {\n            error_log('New LP - scorm::reimport_manifest() '.__LINE__.' - Querying lp: '.$sql);\n        }\n        $res = Database::query($sql);\n        if (Database::num_rows($res) > 0) {\n            $this->lp_id = $lp_id;\n            $row = Database::fetch_array($res);\n            $this->type = $row['lp_type'];\n            $this->name = stripslashes($row['name']);\n            $this->encoding = $row['default_encoding'];\n            $this->proximity = $row['content_local'];\n            $this->maker = $row['content_maker'];\n            $this->prevent_reinit = $row['prevent_reinit'];\n            $this->license = $row['content_license'];\n            $this->scorm_debug = $row['debug'];\n            $this->js_lib = $row['js_lib'];\n            $this->path = $row['path'];\n            if ($this->type == 2) {\n                if ($row['force_commit'] == 1) {\n                    $this->force_commit = true;\n                }\n            }\n            $this->mode = $row['default_view_mod'];\n            $this->subdir = $row['path'];\n        }\n        // Parse the manifest (it is already in this lp's details).\n        $manifest_file = api_get_path(SYS_COURSE_PATH).$courseInfo['directory'].'/scorm/'.$this->subdir.'/imsmanifest.xml';\n        if ($this->subdir == '') {\n            $manifest_file = api_get_path(SYS_COURSE_PATH).$courseInfo['directory'].'/scorm/imsmanifest.xml';\n        }\n        echo $manifest_file;\n        if (is_file($manifest_file) && is_readable($manifest_file)) {\n            // Re-parse the manifest file.\n            if ($this->debug > 1) {\n                error_log('New LP - In scorm::reimport_manifest() - Parsing manifest '.$manifest_file);\n            }\n            $manifest = $this->parse_manifest($manifest_file);\n            // Import new LP in DB (ignore the current one).\n            if ($this->debug > 1) {\n                error_log('New LP - In scorm::reimport_manifest() - Importing manifest '.$manifest_file);\n            }\n            $this->import_manifest($this->cc);\n        } else {\n            if ($this->debug > 0) {\n                error_log('New LP - In scorm::reimport_manifest() - Could not find manifest file at '.$manifest_file);\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Detects the encoding of a given manifest (a xml-text).\n     * It is possible the encoding of the manifest to be wrongly declared or\n     * not to be declared at all. The proposed method tries to resolve these problems.\n     *\n     * @param string $xml the input xml-text\n     *\n     * @return string the detected value of the input xml\n     */\n    private function detect_manifest_encoding(&$xml)\n    {\n        if (api_is_valid_utf8($xml)) {\n            return 'UTF-8';\n        }\n\n        if (preg_match(_PCRE_XML_ENCODING, $xml, $matches)) {\n            $declared_encoding = api_refine_encoding_id($matches[1]);\n        } else {\n            $declared_encoding = '';\n        }\n\n        if (!empty($declared_encoding) && !api_is_utf8($declared_encoding)) {\n            return $declared_encoding;\n        }\n\n        $test_string = '';\n        if (preg_match_all('/<langstring[^>]*>(.*)<\\/langstring>/m', $xml, $matches)) {\n            $test_string = implode(\"\\n\", $matches[1]);\n            unset($matches);\n        }\n        if (preg_match_all('/<title[^>]*>(.*)<\\/title>/m', $xml, $matches)) {\n            $test_string .= \"\\n\".implode(\"\\n\", $matches[1]);\n            unset($matches);\n        }\n        if (empty($test_string)) {\n            $test_string = $xml;\n        }\n\n        return api_detect_encoding($test_string);\n    }\n}\n"], "fixing_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\ExtraFieldOptions;\nuse ChamiloSession as Session;\n\n/**\n * This tool allows platform admins to add users by uploading a CSV or XML file.\n */\n$cidReset = true;\nrequire_once __DIR__.'/../inc/global.inc.php';\n\n// Set this option to true to enforce strict purification for usenames.\n$purification_option_for_usernames = false;\n$userId = api_get_user_id();\napi_protect_admin_script(true, null);\napi_protect_limit_for_session_admin();\nset_time_limit(0);\n\n/**\n * @param array $users\n * @param bool  $checkUniqueEmail\n *\n * @return array\n */\nfunction validate_data($users, $checkUniqueEmail = false)\n{\n    global $defined_auth_sources;\n    $usernames = [];\n\n    // 1. Check if mandatory fields are set.\n    $mandatory_fields = ['LastName', 'FirstName'];\n    if (api_get_setting('registration', 'email') == 'true' || $checkUniqueEmail) {\n        $mandatory_fields[] = 'Email';\n    }\n\n    $classExistList = [];\n    $usergroup = new UserGroup();\n    foreach ($users as &$user) {\n        $user['has_error'] = false;\n        $user['message'] = '';\n\n        foreach ($mandatory_fields as $field) {\n            if (empty($user[$field])) {\n                $user['message'] .= Display::return_message(get_lang($field.'Mandatory'), 'warning');\n                $user['has_error'] = true;\n            }\n        }\n\n        $username = isset($user['UserName']) ? $user['UserName'] : '';\n        // 2. Check username, first, check whether it is empty.\n        if (!UserManager::is_username_empty($username)) {\n            // 2.1. Check whether username is too long.\n            if (UserManager::is_username_too_long($username)) {\n                $user['message'] .= Display::return_message(get_lang('UserNameTooLong'), 'warning');\n                $user['has_error'] = true;\n            }\n            // 2.1.1\n            /*$hasDash = strpos($username, '-');\n            if ($hasDash !== false) {\n                $user['message'] .= Display::return_message(get_lang('UserNameHasDash'), 'warning');\n                $user['has_error'] = true;\n            }*/\n            // 2.2. Check whether the username was used twice in import file.\n            if (isset($usernames[$username])) {\n                $user['message'] .= Display::return_message(get_lang('UserNameUsedTwice'), 'warning');\n                $user['has_error'] = true;\n            }\n            $usernames[$username] = 1;\n            // 2.3. Check whether username is already occupied.\n            if (!UserManager::is_username_available($username)) {\n                $user['message'] .= Display::return_message(get_lang('UserNameNotAvailable'), 'warning');\n                $user['has_error'] = true;\n            }\n\n            if ('true' === api_get_setting('login_is_email')) {\n                if (false === api_valid_email($username)) {\n                    $user['message'] .= Display::return_message(get_lang('PleaseEnterValidEmail'), 'warning');\n                    $user['has_error'] = true;\n                }\n            } else {\n                if (!UserManager::is_username_valid($username)) {\n                    $user['message'] .= Display::return_message(get_lang('UsernameWrong'), 'warning');\n                    $user['has_error'] = true;\n                }\n            }\n        }\n\n        if (isset($user['Email'])) {\n            $result = api_valid_email($user['Email']);\n            if ($result === false) {\n                $user['message'] .= Display::return_message(get_lang('PleaseEnterValidEmail'), 'warning');\n                $user['has_error'] = true;\n            }\n        }\n\n        if ($checkUniqueEmail) {\n            if (isset($user['Email'])) {\n                $userFromEmail = api_get_user_info_from_email($user['Email']);\n                if (!empty($userFromEmail)) {\n                    $user['message'] .= Display::return_message(get_lang('EmailUsedTwice'), 'warning');\n                    $user['has_error'] = true;\n                }\n            }\n        }\n\n        // 3. Check status.\n        if (isset($user['Status']) && !api_status_exists($user['Status'])) {\n            $user['message'] .= Display::return_message(get_lang('WrongStatus'), 'warning');\n            $user['has_error'] = true;\n        }\n\n        // 4. Check ClassId\n        if (!empty($user['ClassId'])) {\n            $classId = explode('|', trim($user['ClassId']));\n            foreach ($classId as $id) {\n                if (in_array($id, $classExistList)) {\n                    continue;\n                }\n                $info = $usergroup->get($id);\n                if (empty($info)) {\n                    $user['message'] .= Display::return_message(\n                        sprintf(get_lang('ClassIdDoesntExists'), $id),\n                        'warning'\n                    );\n                    $user['has_error'] = true;\n                } else {\n                    $classExistList[] = $info['id'];\n                }\n            }\n        }\n\n        // 5. Check authentication source\n        if (!empty($user['AuthSource'])) {\n            if (!in_array($user['AuthSource'], $defined_auth_sources)) {\n                $user['message'] .= Display::return_message(get_lang('AuthSourceNotAvailable'), 'warning');\n                $user['has_error'] = true;\n            }\n        }\n    }\n\n    return $users;\n}\n\n/**\n * Add missing user-information (which isn't required, like password, username etc).\n *\n * @param array $user\n */\nfunction complete_missing_data($user)\n{\n    global $purification_option_for_usernames;\n\n    $username = isset($user['UserName']) ? $user['UserName'] : '';\n\n    // 1. Create a username if necessary.\n    if (UserManager::is_username_empty($username)) {\n        $user['UserName'] = UserManager::create_unique_username(\n            $user['FirstName'],\n            $user['LastName']\n        );\n    } else {\n        $user['UserName'] = UserManager::purify_username(\n            $user['UserName'],\n            $purification_option_for_usernames\n        );\n    }\n\n    // 2. Generate a password if necessary.\n    if (empty($user['Password'])) {\n        $user['Password'] = api_generate_password();\n    }\n    // 3. Set status if not allready set.\n    if (empty($user['Status'])) {\n        $user['Status'] = 'user';\n    }\n    // 4. Set authsource if not allready set.\n    if (empty($user['AuthSource'])) {\n        $user['AuthSource'] = PLATFORM_AUTH_SOURCE;\n    }\n\n    if (empty($user['ExpiryDate'])) {\n        $user['ExpiryDate'] = '';\n    }\n\n    if (!isset($user['OfficialCode'])) {\n        $user['OfficialCode'] = '';\n    }\n\n    if (!isset($user['language'])) {\n        $user['language'] = '';\n    }\n\n    if (!isset($user['PhoneNumber'])) {\n        $user['PhoneNumber'] = '';\n    }\n\n    if (!isset($user['OfficialCode'])) {\n        $user['OfficialCode'] = '';\n    }\n\n    return $user;\n}\n\n/**\n * Save the imported data.\n *\n * @param array $users    List of users\n * @param bool  $sendMail\n *\n * @uses \\global variable $inserted_in_course, which returns the list of\n * courses the user was inserted in\n */\nfunction save_data($users, $sendMail = false)\n{\n    global $inserted_in_course, $extra_fields;\n\n    // Not all scripts declare the $inserted_in_course array (although they should).\n    if (!isset($inserted_in_course)) {\n        $inserted_in_course = [];\n    }\n    $usergroup = new UserGroup();\n    if (is_array($users)) {\n        $efo = new ExtraFieldOption('user');\n\n        $optionsByField = [];\n\n        foreach ($users as &$user) {\n            if ($user['has_error']) {\n                continue;\n            }\n\n            $user = complete_missing_data($user);\n            $user['Status'] = api_status_key($user['Status']);\n            $redirection = isset($user['Redirection']) ? $user['Redirection'] : '';\n\n            $user_id = UserManager::create_user(\n                $user['FirstName'],\n                $user['LastName'],\n                $user['Status'],\n                $user['Email'],\n                $user['UserName'],\n                $user['Password'],\n                $user['OfficialCode'],\n                $user['language'],\n                $user['PhoneNumber'],\n                '',\n                $user['AuthSource'],\n                $user['ExpiryDate'],\n                1,\n                0,\n                null,\n                null,\n                $sendMail,\n                false,\n                '',\n                false,\n                null,\n                null,\n                null,\n                $redirection\n            );\n\n            if ($user_id) {\n                $returnMessage = Display::return_message(get_lang('UserAdded'), 'success');\n\n                if (isset($user['Courses']) && is_array($user['Courses'])) {\n                    foreach ($user['Courses'] as $course) {\n                        if (CourseManager::course_exists($course)) {\n                            $result = CourseManager::subscribeUser($user_id, $course, $user['Status']);\n                            if ($result) {\n                                $course_info = api_get_course_info($course);\n                                $inserted_in_course[$course] = $course_info['title'];\n                            }\n                        }\n                    }\n                }\n\n                if (isset($user['Sessions']) && is_array($user['Sessions'])) {\n                    foreach ($user['Sessions'] as $sessionId) {\n                        $sessionInfo = api_get_session_info($sessionId);\n                        if (!empty($sessionInfo)) {\n                            SessionManager::subscribeUsersToSession(\n                                $sessionId,\n                                [$user_id],\n                                SESSION_VISIBLE_READ_ONLY,\n                                false\n                            );\n                        }\n                    }\n                }\n\n                if (!empty($user['ClassId'])) {\n                    $classId = explode('|', trim($user['ClassId']));\n                    foreach ($classId as $id) {\n                        $usergroup->subscribe_users_to_usergroup($id, [$user_id], false);\n                    }\n                }\n\n                // We are sure that the extra field exists.\n                foreach ($extra_fields as $extras) {\n                    if (!isset($user[$extras[1]])) {\n                        continue;\n                    }\n\n                    $key = $extras[1];\n                    $value = $user[$key];\n\n                    if (!array_key_exists($key, $optionsByField)) {\n                        $optionsByField[$key] = $efo->getOptionsByFieldVariable($key);\n                    }\n\n                    /** @var ExtraFieldOptions $option */\n                    foreach ($optionsByField[$key] as $option) {\n                        if ($option->getDisplayText() === $value) {\n                            $value = $option->getValue();\n                        }\n                    }\n\n                    UserManager::update_extra_field_value($user_id, $key, $value);\n                }\n            } else {\n                $returnMessage = Display::return_message(get_lang('Error'), 'warning');\n            }\n            $user['message'] = $returnMessage;\n        }\n    }\n\n    return $users;\n}\n\n/**\n * @param array  $users\n * @param string $fileName\n * @param int    $sendEmail\n * @param bool   $checkUniqueEmail\n * @param bool   $resumeImport\n *\n * @return array\n */\nfunction parse_csv_data($users, $fileName, $sendEmail = 0, $checkUniqueEmail = true, $resumeImport = false)\n{\n    $usersFromOrigin = $users;\n    $allowRandom = api_get_configuration_value('generate_random_login');\n    if ($allowRandom) {\n        $factory = new RandomLib\\Factory();\n        $generator = $factory->getLowStrengthGenerator();\n        $chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    }\n\n    $readMax = 50;\n    $userId = api_get_user_id();\n    $logMessages = '';\n    $importData = Session::read('user_import_data_'.$userId);\n    if (!empty($importData)) {\n        $counter = $importData['counter'];\n        $users = $importData['complete_list'];\n        $users = array_splice($users, $counter, $readMax);\n        $logMessages = $importData['log_messages'];\n    } else {\n        $users = array_splice($users, 0, $readMax);\n    }\n\n    if ($resumeImport === false) {\n        $users = $usersFromOrigin;\n    }\n\n    $counter = 0;\n    foreach ($users as $index => $user) {\n        if ($resumeImport) {\n            if ($counter >= $readMax) {\n                $users = array_splice($users, $counter, $readMax);\n                break;\n            }\n        }\n        $counter++;\n        if (empty($user['UserName'])) {\n            if ($allowRandom) {\n                $username = $generator->generateString(10, $chars);\n                $user['UserName'] = $username;\n            }\n        }\n        if (isset($user['Courses'])) {\n            $user['Courses'] = explode('|', trim($user['Courses']));\n        }\n\n        if (isset($user['Sessions'])) {\n            $user['Sessions'] = explode('|', trim($user['Sessions']));\n        }\n\n        // Lastname is needed.\n        if (!isset($user['LastName']) || (isset($user['LastName']) && empty($user['LastName']))) {\n            unset($users[$index]);\n            continue;\n        }\n\n        // FirstName is needed.\n        if (!isset($user['FirstName']) || (isset($user['FirstName']) && empty($user['FirstName']))) {\n            unset($users[$index]);\n            continue;\n        }\n\n        $users[$index] = $user;\n    }\n\n    $globalCounter = $counter;\n    if (!empty($importData)) {\n        $globalCounter = $importData['counter'] + $counter;\n    }\n\n    $importData = [\n        'complete_list' => $usersFromOrigin,\n        'filename' => $fileName,\n        'counter' => $globalCounter,\n        'check_unique_email' => $checkUniqueEmail,\n        'send_email' => $sendEmail,\n        'date' => api_get_utc_datetime(),\n        'log_messages' => $logMessages,\n        'resume' => $resumeImport,\n    ];\n\n    Session::write('user_import_data_'.$userId, $importData);\n\n    return $users;\n}\n\n/**\n * Read the XML-file.\n *\n * @param string $file Path to the XML-file\n *\n * @return array All user information read from the file\n */\nfunction parse_xml_data($file, $sendEmail = 0, $checkUniqueEmail = true)\n{\n    $crawler = Import::xml($file);\n    $crawler = $crawler->filter('Contacts > Contact ');\n    $array = [];\n    foreach ($crawler as $domElement) {\n        $row = [];\n        foreach ($domElement->childNodes as $node) {\n            if ($node->nodeName != '#text') {\n                $row[$node->nodeName] = $node->nodeValue;\n            }\n        }\n        if (!empty($row)) {\n            $array[] = $row;\n        }\n    }\n\n    Session::write(\n        'user_import_data_'.api_get_user_id(),\n        [\n            'check_unique_email' => $checkUniqueEmail,\n            'send_email' => $sendEmail,\n            'date' => api_get_utc_datetime(),\n            'log_messages' => '',\n        ]\n    );\n\n    return $array;\n}\n\n/**\n * @param array $users\n * @param bool  $sendMail\n */\nfunction processUsers(&$users, $sendMail)\n{\n    $users = save_data($users, $sendMail);\n\n    $warningMessage = '';\n    if (!empty($users)) {\n        $table = new HTML_Table(['class' => 'table table-responsive']);\n        $headers = [\n            get_lang('User'),\n            get_lang('Status'),\n        ];\n        $row = 0;\n        $column = 0;\n        foreach ($headers as $header) {\n            $table->setHeaderContents($row, $column, $header);\n            $column++;\n        }\n        $row++;\n        foreach ($users as $user) {\n            $column = 0;\n            $email = isset($user['Email']) ? ' - '.$user['Email'] : null;\n            $userData =\n                '<strong>'.$user['UserName'].'</strong> - '.\n                api_get_person_name(\n                    $user['FirstName'],\n                    $user['LastName']\n                ).' '.$email;\n            $table->setCellContents($row, $column, $userData);\n            $table->setCellContents($row, ++$column, $user['message']);\n            $row++;\n        }\n        $warningMessage = $table->toHtml();\n    }\n\n    // if the warning message is too long then we display the warning message trough a session\n    //Display::addFlash(Display::return_message(get_lang('FileImported'), 'confirmation', false));\n\n    $importData = Session::read('user_import_data_'.api_get_user_id());\n    if (!empty($importData)) {\n        if (isset($importData['log_messages'])) {\n            $importData['log_messages'] .= $warningMessage;\n        } else {\n            $importData['log_messages'] = $warningMessage;\n        }\n        Session::write('user_import_data_'.api_get_user_id(), $importData);\n    }\n}\n\n$this_section = SECTION_PLATFORM_ADMIN;\n$defined_auth_sources[] = PLATFORM_AUTH_SOURCE;\nif (isset($extAuthSource) && is_array($extAuthSource)) {\n    $defined_auth_sources = array_merge($defined_auth_sources, array_keys($extAuthSource));\n}\n\n$tool_name = get_lang('ImportUserListXMLCSV');\n$interbreadcrumb[] = ['url' => 'index.php', 'name' => get_lang('PlatformAdmin')];\n$reloadImport = (isset($_REQUEST['reload_import']) && (int) $_REQUEST['reload_import'] === 1);\n\n$extra_fields = UserManager::get_extra_fields(0, 0, 5, 'ASC', true);\n\nif (isset($_POST['formSent']) && $_POST['formSent'] && $_FILES['import_file']['size'] !== 0) {\n    $file_type = $_POST['file_type'];\n    Security::clear_token();\n    $tok = Security::get_token();\n    $allowed_file_mimetype = ['csv', 'xml'];\n    $error_kind_file = true;\n\n    $checkUniqueEmail = isset($_POST['check_unique_email']) ? $_POST['check_unique_email'] : null;\n    $sendMail = $_POST['sendMail'] ? true : false;\n    $resume = isset($_POST['resume_import']) ? true : false;\n    $uploadInfo = pathinfo($_FILES['import_file']['name']);\n    $ext_import_file = $uploadInfo['extension'];\n\n    $users = [];\n    if (in_array($ext_import_file, $allowed_file_mimetype)) {\n        if (strcmp($file_type, 'csv') === 0 &&\n            $ext_import_file == $allowed_file_mimetype[0]\n        ) {\n            Session::erase('user_import_data_'.$userId);\n            $users = Import::csvToArray($_FILES['import_file']['tmp_name']);\n            $users = parse_csv_data(\n                $users,\n                $_FILES['import_file']['name'],\n                $sendMail,\n                $checkUniqueEmail,\n                $resume\n            );\n            $users = validate_data($users, $checkUniqueEmail);\n            $error_kind_file = false;\n        } elseif (strcmp($file_type, 'xml') === 0 && $ext_import_file == $allowed_file_mimetype[1]) {\n            $users = parse_xml_data(\n                $_FILES['import_file']['tmp_name'],\n                $sendMail,\n                $checkUniqueEmail\n            );\n            $users = validate_data($users, $checkUniqueEmail);\n            $error_kind_file = false;\n        }\n\n        processUsers($users, $sendMail);\n\n        if ($error_kind_file) {\n            Display::addFlash(\n                Display::return_message(\n                    get_lang('YouMustImportAFileAccordingToSelectedOption'),\n                    'error',\n                    false\n                )\n            );\n        } else {\n            $reload = '';\n            if ($resume) {\n                $reload = '?reload_import=1';\n            }\n            header('Location: '.api_get_self().$reload);\n            exit;\n        }\n    } else {\n        Display::addFlash(\n            Display::return_message(\n                get_lang('YouMustImportAFileAccordingToSelectedOption'),\n                'error',\n                false\n            )\n        );\n\n        header('Location: '.api_get_self());\n        exit;\n    }\n}\n\n$importData = Session::read('user_import_data_'.$userId);\n\n$formContinue = false;\n$resumeStop = true;\nif (!empty($importData)) {\n    $isResume = $importData['resume'] ?? false;\n\n    $formContinue = new FormValidator('user_import_continue', 'post', api_get_self());\n    $label = get_lang('Results');\n    if ($isResume) {\n        $label = get_lang('ContinueLastImport');\n    }\n    $formContinue->addHeader($label);\n    if (isset($importData['filename'])) {\n        $formContinue->addLabel(get_lang('File'), $importData['filename'] ?? '');\n    }\n\n    $resumeStop = true;\n    if ($isResume) {\n        $totalUsers = isset($importData['complete_list']) ? count($importData['complete_list']) : 0;\n        $counter = isset($importData['counter']) ? $importData['counter'] : 0;\n        $bar = '';\n        if (!empty($totalUsers)) {\n            $bar = Display::bar_progress($counter / $totalUsers * 100);\n        }\n        $formContinue->addLabel(get_lang('Status'), $bar);\n        $formContinue->addLabel(\n            get_lang('UsersAdded'),\n            $importData['counter'].' / '.count($importData['complete_list'])\n        );\n    } else {\n        if (!empty($importData['complete_list'])) {\n            $formContinue->addLabel(\n                get_lang('Users'),\n                count($importData['complete_list'])\n            );\n        }\n    }\n\n    $formContinue->addLabel(\n        get_lang('CheckUniqueEmail'),\n        $importData['check_unique_email'] ? get_lang('Yes') : get_lang('No')\n    );\n    $formContinue->addLabel(get_lang('SendMailToUsers'), $importData['send_email'] ? get_lang('Yes') : get_lang('No'));\n    $formContinue->addLabel(get_lang('Date'), Display::dateToStringAgoAndLongDate($importData['date']));\n\n    if ($isResume) {\n        $resumeStop = $importData['counter'] >= count($importData['complete_list']);\n        if ($resumeStop == false) {\n            $formContinue->addButtonImport(get_lang('ContinueImport'), 'import_continue');\n        }\n    }\n\n    $formContinue->addHtml('<br />'.$importData['log_messages']);\n\n    if ($formContinue->validate()) {\n        $users = parse_csv_data(\n            $importData['complete_list'],\n            $importData['filename'],\n            $importData['send_email'],\n            $importData['check_unique_email'],\n            true\n        );\n        $users = validate_data($users, $importData['check_unique_email']);\n\n        processUsers($users, $importData['send_email']);\n\n        $reload = '';\n        if ($isResume && $resumeStop === false) {\n            $reload = '?reload_import=1';\n        }\n\n        header('Location: '.api_get_self().$reload);\n        exit;\n    }\n}\n\nDisplay::display_header($tool_name);\n\n$form = new FormValidator('user_import', 'post', api_get_self());\n$form->addHeader($tool_name);\n$form->addElement('hidden', 'formSent');\n$form->addElement('file', 'import_file', get_lang('ImportFileLocation'));\n$group = [\n    $form->createElement(\n        'radio',\n        'file_type',\n        '',\n        'CSV (<a href=\"example.csv\" target=\"_blank\" download>'.get_lang('ExampleCSVFile').'</a>)',\n        'csv'\n    ),\n    $form->createElement(\n        'radio',\n        'file_type',\n        null,\n        'XML (<a href=\"example.xml\" target=\"_blank\" download>'.get_lang('ExampleXMLFile').'</a>)',\n        'xml'\n    ),\n];\n\n$form->addGroup($group, '', get_lang('FileType'));\n\n$group = [\n    $form->createElement('radio', 'sendMail', '', get_lang('Yes'), 1),\n    $form->createElement('radio', 'sendMail', null, get_lang('No'), 0),\n];\n$form->addGroup($group, '', get_lang('SendMailToUsers'));\n\n$form->addElement(\n    'checkbox',\n    'check_unique_email',\n    '',\n    get_lang('CheckUniqueEmail')\n);\n\n$form->addElement(\n    'checkbox',\n    'resume_import',\n    '',\n    get_lang('ResumeImport')\n);\n\n$form->addButtonImport(get_lang('Import'));\n\n$defaults['formSent'] = 1;\n$defaults['sendMail'] = 0;\n$defaults['file_type'] = 'csv';\n\n$extraSettings = api_get_configuration_value('user_import_settings');\nif (!empty($extraSettings) && isset($extraSettings['options']) &&\n    isset($extraSettings['options']['send_mail_default_option'])\n) {\n    $defaults['sendMail'] = $extraSettings['options']['send_mail_default_option'];\n}\n\n$form->setDefaults($defaults);\n$form->display();\n\nif ($formContinue) {\n    $formContinue->display();\n}\n\nif ($reloadImport) {\n    echo '<script>\n\n        $(function() {\n            function reload() {\n                $(\"#user_import_continue\").submit();\n            }\n            setTimeout(reload, 3000);\n        });\n    </script>';\n}\n\n$list = [];\n$list_reponse = [];\n$result_xml = '';\n$i = 0;\n$count_fields = count($extra_fields);\nif ($count_fields > 0) {\n    foreach ($extra_fields as $extra) {\n        $list[] = $extra[1];\n        $list_reponse[] = 'xxx';\n        $spaces = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';\n        $result_xml .= $spaces.'&lt;'.$extra[1].'&gt;xxx&lt;/'.$extra[1].'&gt;';\n        if ($i != $count_fields - 1) {\n            $result_xml .= '<br/>';\n        }\n        $i++;\n    }\n}\n\nif (api_get_configuration_value('plugin_redirection_enabled')) {\n    $list[] = 'Redirection';\n    $list_reponse[] = api_get_path(WEB_PATH);\n}\n\n?>\n<p><?php echo get_lang('CSVMustLookLike').' ('.get_lang('MandatoryFields').')'; ?> :</p>\n<blockquote>\n<pre>\n<b>LastName</b>;<b>FirstName</b>;<b>Email</b>;UserName;Password;AuthSource;OfficialCode;language;PhoneNumber;Status;ExpiryDate;<span style=\"color:red;\"><?php if (count($list) > 0) {\n    echo implode(';', $list).';';\n} ?></span>Courses;Sessions;ClassId;\n<b>xxx</b>;<b>xxx</b>;<b>xxx</b>;xxx;xxx;<?php echo implode('/', $defined_auth_sources); ?>;xxx;english/spanish/(other);xxx;user/teacher/drh;0000-00-00 00:00:00;<span style=\"color:red;\"><?php if (count($list_reponse) > 0) {\n    echo implode(';', $list_reponse).';';\n} ?></span>xxx1|xxx2|xxx3;sessionId|sessionId|sessionId;1;<br />\n</pre>\n</blockquote>\n<p><?php echo get_lang('XMLMustLookLike').' ('.get_lang('MandatoryFields').')'; ?> :</p>\n<blockquote>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;Contacts&gt;\n    &lt;Contact&gt;\n        <b>&lt;LastName&gt;xxx&lt;/LastName&gt;</b>\n        <b>&lt;FirstName&gt;xxx&lt;/FirstName&gt;</b>\n        &lt;UserName&gt;xxx&lt;/UserName&gt;\n        &lt;Password&gt;xxx&lt;/Password&gt;\n        &lt;AuthSource&gt;<?php echo implode('/', $defined_auth_sources); ?>&lt;/AuthSource&gt;\n        <b>&lt;Email&gt;xxx&lt;/Email&gt;</b>\n        &lt;OfficialCode&gt;xxx&lt;/OfficialCode&gt;\n        &lt;language&gt;english/spanish/(other)&lt;/language&gt;\n        &lt;PhoneNumber&gt;xxx&lt;/PhoneNumber&gt;\n        &lt;Status&gt;user/teacher/drh&lt;/Status&gt;<?php if ($result_xml != '') {\n    echo '<br /><span style=\"color:red;\">', $result_xml;\n    echo '</span><br />';\n} ?>\n        &lt;Courses&gt;xxx1|xxx2|xxx3&lt;/Courses&gt;\n        &lt;Sessions&gt;sessionId|sessionId|sessionId&lt;/Sessions&gt;\n        &lt;ClassId&gt;1&lt;/ClassId&gt;\n    &lt;/Contact&gt;\n&lt;/Contacts&gt;\n</pre>\n</blockquote>\n<?php\nDisplay::display_footer();\n", "<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Symfony\\Component\\DomCrawler\\Crawler;\n\n/**\n * This tool allows platform admins to add users by uploading a CSV or XML file.\n */\n$cidReset = true;\nrequire_once __DIR__.'/../inc/global.inc.php';\n\n// Set this option to true to enforce strict purification for usernames.\n$purification_option_for_usernames = false;\n\n/**\n * @param array $users\n *\n * @return array\n */\nfunction validate_data($users)\n{\n    global $defined_auth_sources;\n    $errors = [];\n    $usernames = [];\n    $classExistList = [];\n    $usergroup = new UserGroup();\n\n    foreach ($users as $user) {\n        // 2. Check username, first, check whether it is empty.\n        if (isset($user['NewUserName'])) {\n            if (!UserManager::is_username_empty($user['NewUserName'])) {\n                // 2.1. Check whether username is too long.\n                if (UserManager::is_username_too_long($user['NewUserName'])) {\n                    $errors[$user['UserName']][] = get_lang('UserNameTooLong');\n                }\n                // 2.2. Check whether the username was used twice in import file.\n                if (isset($usernames[$user['NewUserName']])) {\n                    $errors[$user['UserName']][] = get_lang('UserNameUsedTwice');\n                }\n                $usernames[$user['UserName']] = 1;\n                // 2.3. Check whether username is allready occupied.\n                if (!UserManager::is_username_available($user['NewUserName']) &&\n                    $user['NewUserName'] != $user['UserName']\n                ) {\n                    $errors[$user['UserName']][] = get_lang('UserNameNotAvailable');\n                }\n            }\n        }\n\n        // 3. Check status.\n        if (isset($user['Status']) && !api_status_exists($user['Status'])) {\n            $errors[$user['UserName']][] = get_lang('WrongStatus');\n        }\n\n        // 4. Check ClassId\n        if (!empty($user['ClassId'])) {\n            $classId = explode('|', trim($user['ClassId']));\n            foreach ($classId as $id) {\n                if (in_array($id, $classExistList)) {\n                    continue;\n                }\n                $info = $usergroup->get($id);\n                if (empty($info)) {\n                    $errors[$user['UserName']][] = sprintf(get_lang('ClassIdDoesntExists'), $id);\n                } else {\n                    $classExistList[] = $info['id'];\n                }\n            }\n        }\n\n        // 5. Check authentication source\n        if (!empty($user['AuthSource'])) {\n            if (!in_array($user['AuthSource'], $defined_auth_sources)) {\n                $errors[$user['UserName']][] = get_lang('AuthSourceNotAvailable');\n            }\n        }\n    }\n\n    return $errors;\n}\n\n/**\n * Update users from the imported data.\n *\n * @param array $users         List of users.\n * @param bool  $resetPassword Optional.\n * @param bool  $sendEmail     Optional.\n */\nfunction updateUsers(\n    $users,\n    $resetPassword = false,\n    $sendEmail = false)\n{\n    $usergroup = new UserGroup();\n    $extraFieldValue = new ExtraFieldValue('user');\n    if (is_array($users)) {\n        foreach ($users as $user) {\n            if (isset($user['Status'])) {\n                $user['Status'] = api_status_key($user['Status']);\n            }\n\n            $userInfo = api_get_user_info_from_username($user['UserName']);\n\n            if (empty($userInfo)) {\n                continue;\n            }\n\n            $user_id = $userInfo['user_id'];\n            $firstName = isset($user['FirstName']) ? $user['FirstName'] : $userInfo['firstname'];\n            $lastName = isset($user['LastName']) ? $user['LastName'] : $userInfo['lastname'];\n            $userName = isset($user['NewUserName']) ? $user['NewUserName'] : $userInfo['username'];\n            $changePassMethod = 0;\n            $password = null;\n            $authSource = $userInfo['auth_source'];\n\n            if ($resetPassword) {\n                $changePassMethod = 1;\n            } else {\n                if (isset($user['Password'])) {\n                    $changePassMethod = 2;\n                    $password = $user['Password'];\n                }\n\n                if (isset($user['AuthSource']) && $user['AuthSource'] != $authSource) {\n                    $authSource = $user['AuthSource'];\n                    $changePassMethod = 3;\n                }\n            }\n\n            $email = isset($user['Email']) ? $user['Email'] : $userInfo['email'];\n            $status = isset($user['Status']) ? $user['Status'] : $userInfo['status'];\n            $officialCode = isset($user['OfficialCode']) ? $user['OfficialCode'] : $userInfo['official_code'];\n            $phone = isset($user['PhoneNumber']) ? $user['PhoneNumber'] : $userInfo['phone'];\n            $pictureUrl = isset($user['PictureUri']) ? $user['PictureUri'] : $userInfo['picture_uri'];\n            $expirationDate = isset($user['ExpiryDate']) ? $user['ExpiryDate'] : $userInfo['expiration_date'];\n            $active = $userInfo['active'];\n            if (isset($user['Active'])) {\n                $user['Active'] = (int) $user['Active'];\n                if (-1 === $user['Active']) {\n                    $user['Active'] = 0;\n                }\n                $active = $user['Active'];\n            }\n\n            $creatorId = $userInfo['creator_id'];\n            $hrDeptId = $userInfo['hr_dept_id'];\n            $language = isset($user['Language']) ? $user['Language'] : $userInfo['language'];\n            //$sendEmail = isset($user['SendEmail']) ? $user['SendEmail'] : $userInfo['language'];\n            //$sendEmail = false;\n            // see BT#17893\n            if ($resetPassword && $sendEmail == false) {\n                $sendEmail = true;\n            }\n\n            UserManager::update_user(\n                $user_id,\n                $firstName,\n                $lastName,\n                $userName,\n                $password,\n                $authSource,\n                $email,\n                $status,\n                $officialCode,\n                $phone,\n                $pictureUrl,\n                $expirationDate,\n                $active,\n                $creatorId,\n                $hrDeptId,\n                null,\n                $language,\n                '',\n                $sendEmail,\n                $changePassMethod\n            );\n\n            if (!empty($user['Courses']) && !is_array($user['Courses'])) {\n                $user['Courses'] = [$user['Courses']];\n            }\n            if (!empty($user['Courses']) && is_array($user['Courses'])) {\n                foreach ($user['Courses'] as $course) {\n                    if (CourseManager::course_exists($course)) {\n                        CourseManager::subscribeUser($user_id, $course, $user['Status']);\n                    }\n                }\n            }\n            if (!empty($user['ClassId'])) {\n                $classId = explode('|', trim($user['ClassId']));\n                foreach ($classId as $id) {\n                    $usergroup->subscribe_users_to_usergroup(\n                        $id,\n                        [$user_id],\n                        false\n                    );\n                }\n            }\n\n            // Saving extra fields.\n            global $extra_fields;\n\n            // We are sure that the extra field exists.\n            $userExtraFields = [\n                'item_id' => $user_id,\n            ];\n            $add = false;\n            foreach ($extra_fields as $extras) {\n                if (isset($user[$extras[1]])) {\n                    $key = $extras[1];\n                    $value = $user[$extras[1]];\n                    $userExtraFields[\"extra_$key\"] = $value;\n                    $add = true;\n                }\n            }\n            if ($add) {\n                $extraFieldValue->saveFieldValues($userExtraFields, true);\n            }\n\n            $userUpdated = api_get_user_info($user_id);\n            Display::addFlash(\n                Display::return_message(get_lang('UserUpdated').': '.$userUpdated['complete_name_with_username'])\n            );\n        }\n    }\n}\n\n/**\n * Read the CSV-file.\n *\n * @param string $file Path to the CSV-file\n *\n * @throws Exception\n *\n * @return array All userinformation read from the file\n */\nfunction parse_csv_data($file)\n{\n    $data = Import::csv_reader($file);\n    if (empty($data)) {\n        throw new Exception(get_lang('NoDataAvailable'));\n    }\n    $users = [];\n    foreach ($data as $row) {\n        if (isset($row['Courses'])) {\n            $row['Courses'] = explode('|', trim($row['Courses']));\n        }\n        if (!isset($row['UserName'])) {\n            throw new Exception(get_lang('ThisFieldIsRequired').': UserName');\n        }\n        $users[] = $row;\n    }\n\n    return $users;\n}\n\nfunction parse_xml_data($file)\n{\n    $crawler = Import::xml($file);\n    $crawler = $crawler->filter('Contacts > Contact ');\n    $array = [];\n    foreach ($crawler as $domElement) {\n        $row = [];\n        foreach ($domElement->childNodes as $node) {\n            if ($node->nodeName != '#text') {\n                $row[$node->nodeName] = $node->nodeValue;\n            }\n        }\n        if (!empty($row)) {\n            $array[] = $row;\n        }\n    }\n\n    return $array;\n}\n\n$this_section = SECTION_PLATFORM_ADMIN;\napi_protect_admin_script(true, null);\n\n$defined_auth_sources[] = PLATFORM_AUTH_SOURCE;\nif (isset($extAuthSource) && is_array($extAuthSource)) {\n    $defined_auth_sources = array_merge($defined_auth_sources, array_keys($extAuthSource));\n}\n\n$tool_name = get_lang('UpdateUserListXMLCSV');\n$interbreadcrumb[] = [\"url\" => 'index.php', \"name\" => get_lang('PlatformAdmin')];\n\nset_time_limit(0);\n$extra_fields = UserManager::get_extra_fields(0, 0, 5, 'ASC', true);\n\n$form = new FormValidator('user_update_import', 'post', api_get_self());\n$form->addHeader($tool_name);\n$form->addFile('import_file', get_lang('ImportFileLocation'), ['accept' => 'text/csv', 'id' => 'import_file']);\n$form->addCheckBox('reset_password', '', get_lang('AutoGeneratePassword'));\n\n$group = [\n    $form->createElement('radio', 'sendMail', '', get_lang('Yes'), 1),\n    $form->createElement('radio', 'sendMail', null, get_lang('No'), 0),\n];\n$form->addGroup($group, '', get_lang('SendMailToUsers'));\n$defaults['sendMail'] = 0;\n\nif ($form->validate()) {\n    if (Security::check_token('post')) {\n        Security::clear_token();\n        $formValues = $form->exportValues();\n\n        if (empty($_FILES['import_file']) || empty($_FILES['import_file']['size'])) {\n            header('Location: '.api_get_self());\n            exit;\n        }\n\n        $uploadInfo = pathinfo($_FILES['import_file']['name']);\n\n        if ($uploadInfo['extension'] !== 'csv') {\n            Display::addFlash(\n                Display::return_message(get_lang('YouMustImportAFileAccordingToSelectedOption'), 'error')\n            );\n\n            header('Location: '.api_get_self());\n            exit;\n        }\n\n        try {\n            $users = parse_csv_data($_FILES['import_file']['tmp_name']);\n        } catch (Exception $exception) {\n            Display::addFlash(\n                Display::return_message($exception->getMessage(), 'error')\n            );\n\n            header('Location: '.api_get_self());\n            exit;\n        }\n\n        $errors = validate_data($users);\n        $errorUsers = array_keys($errors);\n        $usersToUpdate = [];\n\n        foreach ($users as $user) {\n            if (!in_array($user['UserName'], $errorUsers)) {\n                $usersToUpdate[] = $user;\n            }\n        }\n\n        $sendEmail = $_POST['sendMail'] ? true : false;\n        updateUsers($usersToUpdate, isset($formValues['reset_password']), $sendEmail);\n\n        if (empty($errors)) {\n            Display::addFlash(\n                Display::return_message(get_lang('FileImported'), 'success')\n            );\n        } else {\n            $warningMessage = '';\n            foreach ($errors as $errorUsername => $errorUserMessages) {\n                $warningMessage .= \"<strong>$errorUsername</strong>\";\n                $warningMessage .= '<ul><li>'.implode('</li><li>', $errorUserMessages).'</li></ul>';\n            }\n\n            Display::addFlash(\n                Display::return_message(get_lang('FileImportedJustUsersThatAreNotRegistered'), 'warning')\n            );\n            Display::addFlash(Display::return_message($warningMessage, 'warning', false));\n        }\n\n        header('Location: '.api_get_self());\n        exit;\n    } else {\n        Display::addFlash(Display::return_message(get_lang('LinkExpired'), 'warning', false));\n        header('Location: '.api_get_self());\n        exit;\n    }\n}\n\nDisplay::display_header($tool_name);\n$token = Security::get_token();\n\n$form->setDefaults($defaults);\n$form->addHidden('sec_token', $token);\n$form->addButtonImport(get_lang('Import'));\n$form->display();\n\n$list = [];\n$list_reponse = [];\n$result_xml = '';\n$i = 0;\n$count_fields = count($extra_fields);\nif ($count_fields > 0) {\n    foreach ($extra_fields as $extra) {\n        $list[] = $extra[1];\n        $list_reponse[] = 'xxx';\n        $spaces = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';\n        $result_xml .= $spaces.'&lt;'.$extra[1].'&gt;xxx&lt;/'.$extra[1].'&gt;';\n        if ($i != $count_fields - 1) {\n            $result_xml .= '<br/>';\n        }\n        $i++;\n    }\n}\n\n?>\n    <p><?php echo get_lang('CSVMustLookLike').' ('.get_lang('MandatoryFields').')'; ?> :</p>\n    <blockquote>\n    <pre>\n        <b>UserName</b>;LastName;FirstName;Email;NewUserName;Password;AuthSource;OfficialCode;PhoneNumber;Status;ExpiryDate;Active;Language;<span style=\"color:red;\"><?php if (count($list) > 0) {\n    echo implode(';', $list).';';\n} ?></span>Courses;ClassId;\n        xxx;xxx;xxx;xxx;xxx;xxx;xxx;xxx;xxx;user/teacher/drh;YYYY-MM-DD 00:00:00;0/1;xxx;<span\n            style=\"color:red;\"><?php if (count($list_reponse) > 0) {\n    echo implode(';', $list_reponse).';';\n} ?></span>xxx1|xxx2|xxx3;1;<br/>\n    </pre>\n    </blockquote>\n    <p>\n<?php\nDisplay::display_footer();\n", "<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Ddeboer\\DataImport\\Reader\\ExcelReader;\nuse League\\Csv\\Reader;\nuse Symfony\\Component\\DomCrawler\\Crawler;\n\n/**\n * Class Import\n * This class provides some functions which can be used when importing data from\n * external files into Chamilo.\n */\nclass Import\n{\n    /**\n     * @param string $path\n     * @param bool   $setFirstRowAsHeader\n     *\n     * @return array\n     */\n    public static function csv_reader($path, $setFirstRowAsHeader = true)\n    {\n        return self::csvToArray($path);\n    }\n\n    /**\n     * Reads a CSV-file into an array. The first line of the CSV-file should contain the array-keys.\n     * The encoding of the input file is tried to be detected.\n     * The elements of the returned array are encoded in the system encoding.\n     * Example:\n     *   FirstName;LastName;Email\n     *   John;Doe;john.doe@mail.com\n     *   Adam;Adams;adam@mail.com\n     *  returns\n     *   $result [0]['FirstName'] = 'John';\n     *   $result [0]['LastName'] = 'Doe';\n     *   $result [0]['Email'] = 'john.doe@mail. com';\n     *   $result [1]['FirstName'] = 'Adam';\n     *   ...\n     *\n     * @param string $filename the path to the CSV-file which should be imported\n     *\n     * @return array returns an array (in the system encoding) that contains all data from the CSV-file\n     */\n    public static function csvToArray($filename)\n    {\n        if (empty($filename)) {\n            return [];\n        }\n\n        $reader = Reader::createFromPath($filename, 'r');\n        if ($reader) {\n            $reader->setDelimiter(';');\n            $reader->stripBom(true);\n            /*$contents = $reader->__toString();\n            if (!Utf8::isUtf8($contents)) {\n                // If file is not in utf8 try converting to ISO-8859-15\n                if ($reader->getStreamFilterMode() == 1) {\n                    $reader->appendStreamFilter('convert.iconv.ISO-8859-15/UTF-8');\n                }\n            }*/\n\n            $iterator = $reader->fetchAssoc(0);\n\n            return iterator_to_array($iterator);\n        }\n\n        return [];\n    }\n\n    /**\n     * @param string $filename\n     *\n     * @return array\n     */\n    public static function xlsToArray($filename)\n    {\n        if (empty($filename)) {\n            return [];\n        }\n\n        $file = new \\SplFileObject($filename);\n\n        return new ExcelReader($file, 0);\n    }\n\n    /**\n     * @param string $file\n     *\n     * @return Crawler\n     */\n    public static function xml($file)\n    {\n        @libxml_disable_entity_loader(true);\n\n        $crawler = new Crawler();\n        $crawler->addXmlContent(file_get_contents($file));\n\n        return $crawler;\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\nuse ChamiloSession as Session;\nuse CpChart\\Cache as pCache;\nuse CpChart\\Data as pData;\nuse CpChart\\Image as pImage;\n\n/**\n * Class MySpace.\n */\nclass MySpace\n{\n    /**\n     * Get admin actions.\n     *\n     * @return string\n     */\n    public static function getAdminActions()\n    {\n        $actions = [\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=coaches',\n                'content' => get_lang('DisplayCoaches'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=user',\n                'content' => get_lang('DisplayUserOverview'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=session',\n                'content' => get_lang('DisplaySessionOverview'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=course',\n                'content' => get_lang('DisplayCourseOverview'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'tracking/question_course_report.php?view=admin',\n                'content' => get_lang('LPQuestionListResults'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'tracking/course_session_report.php?view=admin',\n                'content' => get_lang('LPExerciseResultsBySession'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=accessoverview',\n                'content' => get_lang('DisplayAccessOverview').' ('.get_lang('Beta').')',\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/exercise_category_report.php',\n                'content' => get_lang('ExerciseCategoryAllSessionsReport'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/survey_report.php',\n                'content' => get_lang('SurveysReport'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/tc_report.php',\n                'content' => get_lang('TCReport'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/ti_report.php',\n                'content' => get_lang('TIReport'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/question_stats_global.php',\n                'content' => get_lang('QuestionStats'),\n            ],\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/question_stats_global_detail.php',\n                'content' => get_lang('QuestionStatsDetailedReport'),\n            ],\n        ];\n\n        $field = new ExtraField('user');\n        $companyField = $field->get_handler_field_info_by_field_variable('company');\n        if (!empty($companyField)) {\n            $actions[] = [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=company',\n                'content' => get_lang('UserByEntityReport'),\n            ];\n        }\n        $field = new ExtraField('lp');\n        $authorsField = $field->get_handler_field_info_by_field_variable('authors');\n        if (!empty($authorsField)) {\n            $actions[] = [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=learningPath',\n                'content' => get_lang('LpByAuthor'),\n            ];\n        }\n        $field = new ExtraField('lp_item');\n        $authorsItemField = $field->get_handler_field_info_by_field_variable('authorlpitem');\n        if (!empty($authorsItemField)) {\n            $actions[] = [\n                'url' => api_get_path(WEB_CODE_PATH).'mySpace/admin_view.php?display=learningPathByItem',\n                'content' => get_lang('LearningPathItemByAuthor'),\n            ];\n        }\n\n        return Display::actions($actions, null);\n    }\n\n    /**\n     * @return string\n     */\n    public static function getTopMenu()\n    {\n        $menuItems = [];\n        $menuItems[] = Display::url(\n            Display::return_icon(\n                'statistics.png',\n                get_lang('MyStats'),\n                '',\n                ICON_SIZE_MEDIUM\n            ),\n            api_get_path(WEB_CODE_PATH).\"auth/my_progress.php\"\n        );\n        $menuItems[] = Display::url(\n            Display::return_icon(\n                'teacher.png',\n                get_lang('TeacherInterface'),\n                [],\n                32\n            ),\n            api_get_path(WEB_CODE_PATH).'mySpace/?view=teacher'\n        );\n        $menuItems[] = Display::url(\n            Display::return_icon(\n                'star_na.png',\n                get_lang('AdminInterface'),\n                [],\n                32\n            ),\n            '#'\n        );\n        $menuItems[] = Display::url(\n            Display::return_icon('quiz.png', get_lang('ExamTracking'), [], 32),\n            api_get_path(WEB_CODE_PATH).'tracking/exams.php'\n        );\n        $menu = '';\n        foreach ($menuItems as $item) {\n            $menu .= $item;\n        }\n        $menu .= '<br />';\n\n        return $menu;\n    }\n\n    /**\n     * This function serves exporting data in CSV format.\n     *\n     * @param array  $header    the header labels\n     * @param array  $data      the data array\n     * @param string $file_name the name of the file which contains exported data\n     *\n     * @return string mixed             Returns a message (string) if an error occurred\n     */\n    public function export_csv($header, $data, $file_name = 'export.csv')\n    {\n        $archive_path = api_get_path(SYS_ARCHIVE_PATH);\n        $archive_url = api_get_path(WEB_CODE_PATH).'course_info/download.php?archive_path=&archive=';\n        $message = '';\n        if (!$open = fopen($archive_path.$file_name, 'w+')) {\n            $message = get_lang('noOpen');\n        } else {\n            $info = '';\n\n            foreach ($header as $value) {\n                $info .= $value.';';\n            }\n            $info .= \"\\r\\n\";\n\n            foreach ($data as $row) {\n                foreach ($row as $value) {\n                    $info .= $value.';';\n                }\n                $info .= \"\\r\\n\";\n            }\n\n            fwrite($open, $info);\n            fclose($open);\n            @chmod($file_name, api_get_permissions_for_new_files());\n\n            header(\"Location:\".$archive_url.$file_name);\n            exit;\n        }\n\n        return $message;\n    }\n\n    /**\n     * Gets the connections to a course as an array of login and logout time.\n     *\n     * @param int   $userId     User id\n     * @param array $courseInfo\n     * @param int   $sessionId  Session id (optional, default = 0)\n     *\n     * @return array Connections\n     */\n    public static function get_connections_to_course(\n        $userId,\n        $courseInfo,\n        $sessionId = 0\n    ) {\n        $table = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n\n        // protect data\n        $userId = (int) $userId;\n        $courseId = (int) $courseInfo['real_id'];\n        $sessionId = (int) $sessionId;\n        $sessionCondition = api_get_session_condition($sessionId);\n\n        $sql = 'SELECT login_course_date, logout_course_date\n                FROM '.$table.'\n                WHERE\n                    user_id = '.$userId.' AND\n                    c_id = '.$courseId.'\n                    '.$sessionCondition.'\n                ORDER BY login_course_date ASC';\n        $rs = Database::query($sql);\n        $connections = [];\n\n        while ($row = Database::fetch_array($rs)) {\n            $connections[] = [\n                'login' => $row['login_course_date'],\n                'logout' => $row['logout_course_date'],\n            ];\n        }\n\n        return $connections;\n    }\n\n    /**\n     * @param $user_id\n     * @param $course_list\n     * @param int $session_id\n     *\n     * @return array|bool\n     */\n    public static function get_connections_from_course_list(\n        $user_id,\n        $course_list,\n        $session_id = 0\n    ) {\n        // Database table definitions\n        $tbl_track_course = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n        if (empty($course_list)) {\n            return false;\n        }\n\n        // protect data\n        $user_id = (int) $user_id;\n        $session_id = (int) $session_id;\n        $new_course_list = [];\n        foreach ($course_list as $course_item) {\n            $courseInfo = api_get_course_info($course_item['code']);\n            if ($courseInfo) {\n                $courseId = $courseInfo['real_id'];\n                $new_course_list[] = '\"'.$courseId.'\"';\n            }\n        }\n        $course_list = implode(', ', $new_course_list);\n\n        if (empty($course_list)) {\n            return false;\n        }\n        $sql = 'SELECT login_course_date, logout_course_date, c_id\n                FROM '.$tbl_track_course.'\n                WHERE\n                    user_id = '.$user_id.' AND\n                    c_id IN ('.$course_list.') AND\n                    session_id = '.$session_id.'\n                ORDER BY login_course_date ASC';\n        $rs = Database::query($sql);\n        $connections = [];\n\n        while ($row = Database::fetch_array($rs)) {\n            $timestamp_login_date = api_strtotime($row['login_course_date'], 'UTC');\n            $timestamp_logout_date = api_strtotime($row['logout_course_date'], 'UTC');\n            $connections[] = [\n                'login' => $timestamp_login_date,\n                'logout' => $timestamp_logout_date,\n                'c_id' => $row['c_id'],\n            ];\n        }\n\n        return $connections;\n    }\n\n    /**\n     * Creates a small table in the last column of the table with the user overview.\n     *\n     * @param int $user_id the id of the user\n     *\n     * @return array List course\n     */\n    public static function returnCourseTracking($user_id)\n    {\n        $user_id = (int) $user_id;\n\n        if (empty($user_id)) {\n            return [];\n        }\n\n        $tbl_course_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        // getting all the courses of the user\n        $sql = \"SELECT * FROM $tbl_course_user\n                WHERE\n                    user_id = $user_id AND\n                    relation_type <> \".COURSE_RELATION_TYPE_RRHH;\n        $result = Database::query($sql);\n\n        $list = [];\n\n        while ($row = Database::fetch_array($result)) {\n            $courseInfo = api_get_course_info_by_id($row['c_id']);\n            $courseId = $courseInfo['real_id'];\n            $courseCode = $courseInfo['code'];\n\n            if (empty($courseInfo)) {\n                continue;\n            }\n\n            $avg_score = Tracking::get_avg_student_score($user_id, $courseCode);\n            if (is_numeric($avg_score)) {\n                $avg_score = round($avg_score, 2);\n            } else {\n                $avg_score = '-';\n            }\n\n            // Student exercises results (obtained score, maximum score, number of exercises answered, score percentage)\n            $exercisesResults = self::exercises_results($user_id, $courseCode);\n\n            $resultToString = '';\n            if (!is_null($exercisesResults['percentage'])) {\n                $resultToString = $exercisesResults['score_obtained'].'/'.$exercisesResults['score_possible'].' ( '.$exercisesResults['percentage'].'% )';\n            }\n\n            $item = [\n                'code' => $courseInfo['code'],\n                'real_id' => $courseInfo['real_id'],\n                'title' => $courseInfo['title'],\n                'category' => $courseInfo['categoryName'],\n                'image_small' => $courseInfo['course_image'],\n                'image_large' => $courseInfo['course_image_large'],\n                'time_spent' => api_time_to_hms(Tracking::get_time_spent_on_the_course($user_id, $courseId)),\n                'student_progress' => round(Tracking::get_avg_student_progress($user_id, $courseCode)),\n                'student_score' => $avg_score,\n                'student_message' => Tracking::count_student_messages($user_id, $courseCode),\n                'student_assignments' => Tracking::count_student_assignments($user_id, $courseCode),\n                'student_exercises' => $resultToString,\n                'questions_answered' => $exercisesResults['questions_answered'],\n                'last_connection' => Tracking::get_last_connection_date_on_the_course($user_id, $courseInfo),\n            ];\n            $list[] = $item;\n        }\n\n        return $list;\n    }\n\n    /**\n     * Display a sortable table that contains an overview off all the\n     * reporting progress of all users and all courses the user is subscribed to.\n     *\n     * @author Patrick Cool <patrick.cool@UGent.be>, Ghent University, Belgium\n     *          Alex Aragon <alex.aragon@beeznest.com>, BeezNest, Per\u00fa\n     *\n     * @version Chamilo 1.11.8\n     *\n     * @since April 2019\n     */\n    public static function returnTrackingUserOverviewFilter($user_id)\n    {\n        $tpl = new Template('', false, false, false, false, false, false);\n        $userInfo = api_get_user_info($user_id);\n\n        $avatar = UserManager::getUserPicture($user_id, USER_IMAGE_SIZE_SMALL);\n        $user = [\n            'id' => $user_id,\n            'code_user' => $userInfo['official_code'],\n            'complete_name' => $userInfo['complete_name'],\n            'username' => $userInfo['username'],\n            'course' => self::returnCourseTracking($user_id),\n            'avatar' => $avatar,\n        ];\n\n        $tpl->assign('item', $user);\n        $templateName = $tpl->get_template('my_space/partials/tracking_user_overview.tpl');\n        $content = $tpl->fetch($templateName);\n\n        return $content;\n    }\n\n    /**\n     * Display a sortable table that contains an overview off all the\n     * reporting progress of all users and all courses the user is subscribed to.\n     *\n     * @author Patrick Cool <patrick.cool@UGent.be>, Ghent University, Belgium\n     *         Alex Aragon <alex.aragon@beeznest.com>, BeezNest, Per\u00fa\n     *\n     * @version Chamilo 1.11.8\n     *\n     * @since October 2008, Update April 2019\n     */\n    public static function display_tracking_user_overview()\n    {\n        self::display_user_overview_export_options();\n\n        $params = ['view' => 'admin', 'display' => 'user'];\n        $table = new SortableTable(\n            'tracking_user_overview',\n            ['MySpace', 'get_number_of_users_tracking_overview'],\n            ['MySpace', 'get_user_data_tracking_overview'],\n            0,\n            20,\n            'ASC',\n            null, [\n                'class' => 'table table-transparent',\n            ]\n        );\n        $table->additional_parameters = $params;\n\n        $table->set_column_filter(0, ['MySpace', 'returnTrackingUserOverviewFilter']);\n        $tableContent = $table->return_table();\n        $tpl = new Template('', false, false, false, false, false, false);\n        $tpl->assign('table', $tableContent);\n        $templateName = $tpl->get_template('my_space/user_summary.tpl');\n        $tpl->display($templateName);\n    }\n\n    /**\n     * @param $export_csv\n     */\n    public static function display_tracking_coach_overview($export_csv)\n    {\n        if ($export_csv) {\n            $is_western_name_order = api_is_western_name_order(PERSON_NAME_DATA_EXPORT);\n        } else {\n            $is_western_name_order = api_is_western_name_order();\n        }\n        $sort_by_first_name = api_sort_by_first_name();\n\n        if (isset($_GET['tracking_list_coaches_column'])) {\n            $tracking_column = (int) $_GET['tracking_list_coaches_column'];\n        } else {\n            $tracking_column = ($is_western_name_order xor $sort_by_first_name) ? 1 : 0;\n        }\n\n        $tracking_direction = (isset($_GET['tracking_list_coaches_direction']) && in_array(strtoupper($_GET['tracking_list_coaches_direction']), ['ASC', 'DESC', 'ASCENDING', 'DESCENDING', '0', '1'])) ? $_GET['tracking_list_coaches_direction'] : 'DESC';\n        // Prepare array for column order - when impossible, use some of user names.\n        if ($is_western_name_order) {\n            $order = [\n                0 => 'firstname',\n                1 => 'lastname',\n                2 => $sort_by_first_name ? 'firstname' : 'lastname',\n                3 => 'login_date',\n                4 => $sort_by_first_name ? 'firstname' : 'lastname',\n                5 => $sort_by_first_name ? 'firstname' : 'lastname',\n            ];\n        } else {\n            $order = [\n                0 => 'lastname',\n                1 => 'firstname',\n                2 => $sort_by_first_name ? 'firstname' : 'lastname',\n                3 => 'login_date',\n                4 => $sort_by_first_name ? 'firstname' : 'lastname',\n                5 => $sort_by_first_name ? 'firstname' : 'lastname',\n            ];\n        }\n        $table = new SortableTable(\n            'tracking_list_coaches_myspace',\n            ['MySpace', 'count_coaches'],\n            null,\n            ($is_western_name_order xor $sort_by_first_name) ? 1 : 0\n        );\n        $parameters['view'] = 'admin';\n        $table->set_additional_parameters($parameters);\n        if ($is_western_name_order) {\n            $table->set_header(0, get_lang('FirstName'), true);\n            $table->set_header(1, get_lang('LastName'), true);\n        } else {\n            $table->set_header(0, get_lang('LastName'), true);\n            $table->set_header(1, get_lang('FirstName'), true);\n        }\n        $table->set_header(2, get_lang('TimeSpentOnThePlatform'), false);\n        $table->set_header(3, get_lang('LastConnexion'), false);\n        $table->set_header(4, get_lang('NbStudents'), false);\n        $table->set_header(5, get_lang('CountCours'), false);\n        $table->set_header(6, get_lang('NumberOfSessions'), false);\n        $table->set_header(7, get_lang('Sessions'), false);\n\n        if ($is_western_name_order) {\n            $csv_header[] = [\n                get_lang('FirstName'),\n                get_lang('LastName'),\n                get_lang('TimeSpentOnThePlatform'),\n                get_lang('LastConnexion'),\n                get_lang('NbStudents'),\n                get_lang('CountCours'),\n                get_lang('NumberOfSessions'),\n            ];\n        } else {\n            $csv_header[] = [\n                get_lang('LastName'),\n                get_lang('FirstName'),\n                get_lang('TimeSpentOnThePlatform'),\n                get_lang('LastConnexion'),\n                get_lang('NbStudents'),\n                get_lang('CountCours'),\n                get_lang('NumberOfSessions'),\n            ];\n        }\n\n        $tbl_track_login = Database::get_main_table(TABLE_STATISTIC_TRACK_E_LOGIN);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_session_course_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_sessions = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        $sqlCoachs = \"SELECT DISTINCT\n                        scu.user_id as id_coach,\n                        u.id as user_id,\n                        lastname,\n                        firstname,\n                        MAX(login_date) as login_date\n                        FROM $tbl_user u, $tbl_session_course_user scu, $tbl_track_login\n                        WHERE\n                            scu.user_id = u.id AND scu.status=2 AND login_user_id=u.id\n                        GROUP BY user_id \";\n\n        if (api_is_multiple_url_enabled()) {\n            $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $access_url_id = api_get_current_access_url_id();\n            if ($access_url_id != -1) {\n                $sqlCoachs = \"SELECT DISTINCT\n                                    scu.user_id as id_coach,\n                                    u.id as user_id,\n                                    lastname,\n                                    firstname,\n                                    MAX(login_date) as login_date\n                                FROM $tbl_user u,\n                                $tbl_session_course_user scu,\n                                $tbl_track_login ,\n                                $tbl_session_rel_access_url session_rel_url\n                                WHERE\n                                    scu.user_id = u.id AND\n                                    scu.status = 2 AND\n                                    login_user_id = u.id AND\n                                    access_url_id = $access_url_id AND\n                                    session_rel_url.session_id = scu.session_id\n                                GROUP BY u.id\";\n            }\n        }\n        if (!empty($order[$tracking_column])) {\n            $sqlCoachs .= \" ORDER BY `\".$order[$tracking_column].\"` \".$tracking_direction;\n        }\n\n        $result_coaches = Database::query($sqlCoachs);\n        $global_coaches = [];\n        while ($coach = Database::fetch_array($result_coaches)) {\n            $global_coaches[$coach['user_id']] = $coach;\n        }\n\n        $sql_session_coach = \"SELECT session.id_coach, u.id as user_id, lastname, firstname, MAX(login_date) as login_date\n                                FROM $tbl_user u , $tbl_sessions as session, $tbl_track_login\n                                WHERE id_coach = u.id AND login_user_id = u.id\n                                GROUP BY u.id\n                                ORDER BY login_date $tracking_direction\";\n\n        if (api_is_multiple_url_enabled()) {\n            $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $access_url_id = api_get_current_access_url_id();\n            if ($access_url_id != -1) {\n                $sql_session_coach = \"SELECT session.id_coach, u.id as user_id, lastname, firstname, MAX(login_date) as login_date\n\t\t\t\t\tFROM $tbl_user u , $tbl_sessions as session, $tbl_track_login , $tbl_session_rel_access_url as session_rel_url\n\t\t\t\t\tWHERE\n\t\t\t\t\t    id_coach = u.id AND\n\t\t\t\t\t    login_user_id = u.id  AND\n\t\t\t\t\t    access_url_id = $access_url_id AND\n\t\t\t\t\t    session_rel_url.session_id = session.id\n\t\t\t\t\tGROUP BY  u.id\n\t\t\t\t\tORDER BY login_date $tracking_direction\";\n            }\n        }\n\n        $result_sessions_coach = Database::query($sql_session_coach);\n        //$total_no_coaches += Database::num_rows($result_sessions_coach);\n        while ($coach = Database::fetch_array($result_sessions_coach)) {\n            $global_coaches[$coach['user_id']] = $coach;\n        }\n\n        $all_datas = [];\n        foreach ($global_coaches as $id_coach => $coaches) {\n            $time_on_platform = api_time_to_hms(\n                Tracking::get_time_spent_on_the_platform($coaches['user_id'])\n            );\n            $last_connection = Tracking::get_last_connection_date(\n                $coaches['user_id']\n            );\n            $nb_students = count(\n                Tracking::get_student_followed_by_coach($coaches['user_id'])\n            );\n            $nb_courses = count(\n                Tracking::get_courses_followed_by_coach($coaches['user_id'])\n            );\n            $nb_sessions = count(\n                Tracking::get_sessions_coached_by_user($coaches['user_id'])\n            );\n\n            $table_row = [];\n            if ($is_western_name_order) {\n                $table_row[] = $coaches['firstname'];\n                $table_row[] = $coaches['lastname'];\n            } else {\n                $table_row[] = $coaches['lastname'];\n                $table_row[] = $coaches['firstname'];\n            }\n            $table_row[] = $time_on_platform;\n            $table_row[] = $last_connection;\n            $table_row[] = $nb_students;\n            $table_row[] = $nb_courses;\n            $table_row[] = $nb_sessions;\n            $table_row[] = '<a href=\"session.php?id_coach='.$coaches['user_id'].'\">\n                '.Display::return_icon('2rightarrow.png', get_lang('Details')).'\n            </a>';\n            $all_datas[] = $table_row;\n\n            if ($is_western_name_order) {\n                $csv_content[] = [\n                    api_html_entity_decode($coaches['firstname'], ENT_QUOTES),\n                    api_html_entity_decode($coaches['lastname'], ENT_QUOTES),\n                    $time_on_platform,\n                    $last_connection,\n                    $nb_students,\n                    $nb_courses,\n                    $nb_sessions,\n                ];\n            } else {\n                $csv_content[] = [\n                    api_html_entity_decode($coaches['lastname'], ENT_QUOTES),\n                    api_html_entity_decode($coaches['firstname'], ENT_QUOTES),\n                    $time_on_platform,\n                    $last_connection,\n                    $nb_students,\n                    $nb_courses,\n                    $nb_sessions,\n                ];\n            }\n        }\n\n        if ($tracking_column != 3) {\n            if ($tracking_direction == 'DESC') {\n                usort($all_datas, ['MySpace', 'rsort_users']);\n            } else {\n                usort($all_datas, ['MySpace', 'sort_users']);\n            }\n        }\n\n        if ($export_csv && $tracking_column != 3) {\n            usort($csv_content, 'sort_users');\n        }\n        if ($export_csv) {\n            $csv_content = array_merge($csv_header, $csv_content);\n        }\n\n        foreach ($all_datas as $row) {\n            $table->addRow($row, 'align=\"right\"');\n        }\n        $table->display();\n    }\n\n    /**\n     * @return mixed\n     */\n    public static function count_coaches()\n    {\n        global $total_no_coaches;\n\n        return $total_no_coaches;\n    }\n\n    public static function sort_users($a, $b)\n    {\n        $tracking = Session::read('tracking_column');\n\n        return api_strcmp(\n            trim(api_strtolower($a[$tracking])),\n            trim(api_strtolower($b[$tracking]))\n        );\n    }\n\n    public static function rsort_users($a, $b)\n    {\n        $tracking = Session::read('tracking_column');\n\n        return api_strcmp(\n            trim(api_strtolower($b[$tracking])),\n            trim(api_strtolower($a[$tracking]))\n        );\n    }\n\n    /**\n     * Display a sortable table that contains an overview off all the progress of the user in a session.\n     *\n     * @deprecated ?\n     *\n     * @author C\u00e9sar Perales <cesar.perales@beeznest.com>, Beeznest Team\n     */\n    public static function display_tracking_lp_progress_overview(\n        $sessionId = '',\n        $courseId = '',\n        $date_from,\n        $date_to\n    ) {\n        $course = api_get_course_info_by_id($courseId);\n        /**\n         * Column name\n         * The order is important you need to check the $column variable in the model.ajax.php file.\n         */\n        $columns = [\n            get_lang('Username'),\n            get_lang('FirstName'),\n            get_lang('LastName'),\n        ];\n        //add lessons of course\n        $lessons = LearnpathList::get_course_lessons($course['code'], $sessionId);\n\n        //create columns array\n        foreach ($lessons as $lesson_id => $lesson) {\n            $columns[] = $lesson['name'];\n        }\n\n        $columns[] = get_lang('Total');\n\n        /**\n         * Column config.\n         */\n        $column_model = [\n            [\n                'name' => 'username',\n                'index' => 'username',\n                'align' => 'left',\n                'search' => 'true',\n                'wrap_cell' => \"true\",\n            ],\n            [\n                'name' => 'firstname',\n                'index' => 'firstname',\n                'align' => 'left',\n                'search' => 'true',\n            ],\n            [\n                'name' => 'lastname',\n                'index' => 'lastname',\n                'align' => 'left',\n                'search' => 'true',\n            ],\n        ];\n\n        // Get dinamic column names\n        foreach ($lessons as $lesson_id => $lesson) {\n            $column_model[] = [\n                'name' => $lesson['id'],\n                'index' => $lesson['id'],\n                'align' => 'left',\n                'search' => 'true',\n            ];\n        }\n\n        $column_model[] = [\n            'name' => 'total',\n            'index' => 'total',\n            'align' => 'left',\n            'search' => 'true',\n        ];\n\n        $action_links = '';\n        // jqgrid will use this URL to do the selects\n        $url = api_get_path(WEB_AJAX_PATH).'model.ajax.php?a=get_session_lp_progress&session_id='.$sessionId.'&course_id='.$courseId.'&date_to='.$date_to.'&date_from='.$date_from;\n\n        // Table Id\n        $tableId = 'lpProgress';\n\n        // Autowidth\n        $extra_params['autowidth'] = 'true';\n\n        // height auto\n        $extra_params['height'] = 'auto';\n\n        $table = Display::grid_js(\n            $tableId,\n            $url,\n            $columns,\n            $column_model,\n            $extra_params,\n            [],\n            $action_links,\n            true\n        );\n\n        $return = '<script>$(function() {'.$table.\n            'jQuery(\"#'.$tableId.'\").jqGrid(\"navGrid\",\"#'.$tableId.'_pager\",{view:false, edit:false, add:false, del:false, search:false, excel:true});\n                jQuery(\"#'.$tableId.'\").jqGrid(\"navButtonAdd\",\"#'.$tableId.'_pager\",{\n                       caption:\"\",\n                       title:\"'.get_lang('ExportExcel').'\",\n                       onClickButton : function () {\n                           jQuery(\"#'.$tableId.'\").jqGrid(\"excelExport\",{\"url\":\"'.$url.'&export_format=xls\"});\n                       }\n                });\n            });</script>';\n        $return .= Display::grid_html($tableId);\n\n        return $return;\n    }\n\n    /**\n     * Display a sortable table that contains an overview off all the progress of the user in a session.\n     *\n     * @param int $sessionId  The session ID\n     * @param int $courseId   The course ID\n     * @param int $exerciseId The quiz ID\n     * @param     $date_from\n     * @param     $date_to\n     *\n     * @return string HTML array of results formatted for gridJS\n     *\n     * @deprecated ?\n     *\n     * @author C\u00e9sar Perales <cesar.perales@beeznest.com>, Beeznest Team\n     */\n    public static function display_tracking_exercise_progress_overview(\n        $sessionId = 0,\n        $courseId = 0,\n        $exerciseId = 0,\n        $date_from = null,\n        $date_to = null\n    ) {\n        $date_from = Security::remove_XSS($date_from);\n        $date_to = Security::remove_XSS($date_to);\n        /**\n         * Column names\n         * The column order is important. Check $column variable in the main/inc/ajax/model.ajax.php file.\n         */\n        $columns = [\n            get_lang('Session'),\n            get_lang('ExerciseId'),\n            get_lang('ExerciseName'),\n            get_lang('Username'),\n            get_lang('LastName'),\n            get_lang('FirstName'),\n            get_lang('Time'),\n            get_lang('QuestionId'),\n            get_lang('QuestionTitle'),\n            get_lang('WorkDescription'),\n            get_lang('Answer'),\n            get_lang('Correct'),\n        ];\n\n        /**\n         * Column config.\n         */\n        $column_model = [\n            ['name' => 'session', 'index' => 'session', 'align' => 'left', 'search' => 'true', 'wrap_cell' => \"true\"],\n            ['name' => 'exercise_id', 'index' => 'exercise_id', 'align' => 'left', 'search' => 'true'],\n            ['name' => 'quiz_title', 'index' => 'quiz_title', 'align' => 'left', 'search' => 'true'],\n            ['name' => 'username', 'index' => 'username', 'align' => 'left', 'search' => 'true'],\n            ['name' => 'lastname', 'index' => 'lastname', 'align' => 'left', 'search' => 'true'],\n            ['name' => 'firstname', 'index' => 'firstname', 'align' => 'left', 'search' => 'true'],\n            ['name' => 'time', 'index' => 'time', 'align' => 'left', 'search' => 'true', 'wrap_cell' => \"true\"],\n            ['name' => 'question_id', 'index' => 'question_id', 'align' => 'left', 'search' => 'true'],\n            ['name' => 'question', 'index' => 'question', 'align' => 'left', 'search' => 'true', 'wrap_cell' => \"true\"],\n            ['name' => 'description', 'index' => 'description', 'align' => 'left', 'width' => '550', 'search' => 'true', 'wrap_cell' => \"true\"],\n            ['name' => 'answer', 'index' => 'answer', 'align' => 'left', 'search' => 'true', 'wrap_cell' => \"true\"],\n            ['name' => 'correct', 'index' => 'correct', 'align' => 'left', 'search' => 'true', 'wrap_cell' => \"true\"],\n        ];\n        //get dynamic column names\n\n        // jqgrid will use this URL to do the selects\n        $url = api_get_path(WEB_AJAX_PATH).'model.ajax.php?a=get_exercise_progress&session_id='.$sessionId.'&course_id='.$courseId.'&exercise_id='.$exerciseId.'&date_to='.$date_to.'&date_from='.$date_from;\n\n        // Autowidth\n        $extra_params['autowidth'] = 'true';\n\n        // height auto\n        $extra_params['height'] = 'auto';\n\n        $tableId = 'exerciseProgressOverview';\n        $table = Display::grid_js(\n            $tableId,\n            $url,\n            $columns,\n            $column_model,\n            $extra_params,\n            [],\n            '',\n            true\n        );\n\n        $return = '<script>$(function() {'.$table.\n            'jQuery(\"#'.$tableId.'\").jqGrid(\"navGrid\",\"#'.$tableId.'_pager\",{view:false, edit:false, add:false, del:false, search:false, excel:true});\n                jQuery(\"#'.$tableId.'\").jqGrid(\"navButtonAdd\",\"#'.$tableId.'_pager\",{\n                       caption:\"\",\n                       title:\"'.get_lang('ExportExcel').'\",\n                       onClickButton : function () {\n                           jQuery(\"#'.$tableId.'\").jqGrid(\"excelExport\",{\"url\":\"'.$url.'&export_format=xls\"});\n                       }\n                });\n            });</script>';\n        $return .= Display::grid_html($tableId);\n\n        return $return;\n    }\n\n    /**\n     * Displays a form with all the additionally defined user fields of the profile\n     * and give you the opportunity to include these in the CSV export.\n     *\n     * @author Patrick Cool <patrick.cool@UGent.be>, Ghent University, Belgium\n     *\n     * @version 1.8.6\n     *\n     * @since November 2008\n     */\n    public static function display_user_overview_export_options()\n    {\n        $message = '';\n        $defaults = [];\n        // include the user manager and formvalidator library\n        if (isset($_GET['export']) && 'options' == $_GET['export']) {\n            // get all the defined extra fields\n            $extrafields = UserManager::get_extra_fields(\n                0,\n                50,\n                5,\n                'ASC',\n                false,\n                1\n            );\n\n            // creating the form with all the defined extra fields\n            $form = new FormValidator(\n                'exportextrafields',\n                'post',\n                api_get_self().\"?view=\".Security::remove_XSS($_GET['view']).'&display='.Security::remove_XSS($_GET['display']).'&export='.Security::remove_XSS($_GET['export'])\n            );\n\n            if (is_array($extrafields) && count($extrafields) > 0) {\n                foreach ($extrafields as $key => $extra) {\n                    $form->addElement('checkbox', 'extra_export_field'.$extra[0], '', $extra[3]);\n                }\n                $form->addButtonSave(get_lang('Ok'), 'submit');\n\n                // setting the default values for the form that contains all the extra fields\n                $exportFields = Session::read('additional_export_fields');\n                if (is_array($exportFields)) {\n                    foreach ($exportFields as $key => $value) {\n                        $defaults['extra_export_field'.$value] = 1;\n                    }\n                }\n                $form->setDefaults($defaults);\n            } else {\n                $form->addElement('html', Display::return_message(get_lang('ThereAreNotExtrafieldsAvailable'), 'warning'));\n            }\n\n            if ($form->validate()) {\n                // exporting the form values\n                $values = $form->exportValues();\n\n                // re-initialising the session that contains the additional fields that need to be exported\n                Session::write('additional_export_fields', []);\n\n                // adding the fields that are checked to the session\n                $message = '';\n                $additionalExportFields = [];\n                foreach ($values as $field_ids => $value) {\n                    if ($value == 1 && strstr($field_ids, 'extra_export_field')) {\n                        $additionalExportFields[] = str_replace('extra_export_field', '', $field_ids);\n                    }\n                }\n                Session::write('additional_export_fields', $additionalExportFields);\n\n                // adding the fields that will be also exported to a message string\n                $additionalExportFields = Session::read('additional_export_fields');\n                if (is_array($additionalExportFields)) {\n                    foreach ($additionalExportFields as $key => $extra_field_export) {\n                        $message .= '<li>'.$extrafields[$extra_field_export][3].'</li>';\n                    }\n                }\n\n                // Displaying a feedback message\n                if (!empty($additionalExportFields)) {\n                    echo Display::return_message(\n                        get_lang('FollowingFieldsWillAlsoBeExported').': <br /><ul>'.$message.'</ul>',\n                        'confirm',\n                        false\n                    );\n                } else {\n                    echo Display::return_message(\n                        get_lang('NoAdditionalFieldsWillBeExported'),\n                        'confirm',\n                        false\n                    );\n                }\n            } else {\n                $form->display();\n            }\n        } else {\n            $additionalExportFields = Session::read('additional_export_fields');\n            if (!empty($additionalExportFields)) {\n                // get all the defined extra fields\n                $extrafields = UserManager::get_extra_fields(0, 50, 5, 'ASC');\n\n                foreach ($additionalExportFields as $key => $extra_field_export) {\n                    $message .= '<li>'.$extrafields[$extra_field_export][3].'</li>';\n                }\n\n                echo Display::return_message(\n                    get_lang('FollowingFieldsWillAlsoBeExported').': <br /><ul>'.$message.'</ul>',\n                    'normal',\n                    false\n                );\n            }\n        }\n    }\n\n    /**\n     * Export to cvs a list of users who were enrolled in the lessons.\n     * It is necessary that in the extra field, a company is defined.\n     *\n     * @param string|null $startDate\n     * @param string|null $endDate\n     *\n     * @return array\n     */\n    public static function exportCompanyResumeCsv($startDate, $endDate)\n    {\n        $companys = self::getCompanyLearnpathSubscription($startDate, $endDate);\n        $csv_content = [];\n        // Printing table\n        $total = 0;\n        $displayText = get_lang('Company');\n        // the first line of the csv file with the column headers\n        $csv_row = [];\n        $csv_row[] = $displayText;\n\n        $csv_row[] = get_lang('CountOfSubscribedUsers');\n        $csv_content[] = $csv_row;\n\n        foreach ($companys as $entity => $student) {\n            $csv_row = [];\n            // user official code\n            $csv_row[] = $entity;\n            $csv_row[] = count($student);\n            $total += count($student);\n            $csv_content[] = $csv_row;\n        }\n\n        $csv_row = [];\n        // user official code\n        $csv_row[] = get_lang('GeneralTotal');\n        $csv_row[] = $total;\n        $csv_content[] = $csv_row;\n        Export::arrayToCsv($csv_content, 'reporting_company_resume');\n        exit;\n    }\n\n    /**\n     * Generates a structure to show the links or names for the authors by lesson report.\n     *\n     * @param array $students\n     * @param array $studentRegistered\n     * @param       $lpCourseCode\n     */\n    public static function getStudentDataToReportByLp($students = [], $studentRegistered = [], $lpCourseCode)\n    {\n        $data = [];\n        $totalStudents = 0;\n        $data['csv'] = '';\n        $data['html'] = '';\n        $icon = Display::return_icon('statistics.png', get_lang('Stats'));\n        foreach ($students as $student) {\n            $lpSessionId = isset($student['session_id']) ? (int) $student['session_id'] : 0;\n            $studentId = (int) $student['id'];\n            if (!isset($studentRegistered[$studentId][$lpSessionId])) {\n                $url = api_get_path(WEB_CODE_PATH).\"mySpace/myStudents.php?details=true&student=$studentId\";\n                if (0 != $lpSessionId) {\n                    $url .= \"&id_session=$lpSessionId\";\n                }\n                $url .= \"&course=$lpCourseCode\";\n                $reportLink = Display::url(\n                    $icon,\n                    $url\n                );\n                $studentName = $student['complete_name'].\"(\".$student['company'].\")\";\n                $studentRegistered[$studentId][$lpSessionId] = $student;\n                $data['csv'] .= $studentName.' / ';\n                $data['html'] .= \"$reportLink <strong>$studentName</strong><br>\";\n                $totalStudents++;\n            }\n        }\n        $data['student_registered'] = $studentRegistered;\n        $data['total_students'] = $totalStudents;\n\n        return $data;\n    }\n\n    /**\n     * * Generates a structure to show the names for the authors by lesson report by item.\n     *\n     * @param array  $students\n     * @param array  $studentProcessed\n     * @param string $typeReport\n     * @param false  $csv\n     */\n    public static function getStudentDataToReportByLpItem($students = [], $studentProcessed = [], $typeReport = '', $csv = false)\n    {\n        $totalStudent = count($students);\n        $sessionIcon = Display::return_icon(\n            'admin_star.png',\n            get_lang('StudentInSessionCourse'),\n            [],\n            ICON_SIZE_MEDIUM\n        );\n        $classIcon = Display::return_icon(\n            'group_summary.png',\n            get_lang('UsersInsideClass'),\n            '',\n            ICON_SIZE_MEDIUM\n        );\n        /* use 'for' to performance */\n        for ($i = 0; $i < $totalStudent; $i++) {\n            $student = $students[$i];\n            $studentId = $student['id'];\n            $lpItemIdStudent = $student['lp_item_id'];\n            $sessionId = isset($student['session_id']) ? (int) $student['session_id'] : 0;\n            $studentName = $student['complete_name'];\n            $studentCompany = $student['company'];\n            $studentName = \"$studentName($studentCompany)\";\n            $type = isset($student['type']) ? $student['type'] : null;\n            $icon = null;\n            if (0 != $sessionId) {\n                $icon = $sessionIcon;\n            }\n            if ('class' == $typeReport) {\n                $icon = $classIcon;\n            }\n            $studentString = \"$icon $studentName\";\n            if (0 != $sessionId) {\n                $studentString = \"<strong>$studentString</strong>\";\n            }\n            if ($csv == false) {\n                $studentProcessed[$lpItemIdStudent][$type][$studentId] = $studentString.'<br>';\n            } else {\n                $studentProcessed[$lpItemIdStudent][$type][$studentId] = \"$studentName / \";\n            }\n        }\n\n        return $studentProcessed;\n    }\n\n    /**\n     * Displays a list as a table of users who were enrolled in the lessons.\n     * It is necessary that in the extra field, a company is defined.\n     *\n     * @param string|null $startDate\n     * @param string|null $endDate\n     */\n    public static function displayResumeCompany(\n        $startDate = null,\n        $endDate = null\n    ) {\n        $companys = self::getCompanyLearnpathSubscription($startDate, $endDate);\n        $tableHtml = '';\n        // Printing table\n        $total = 0;\n        $table = \"<div class='table-responsive'><table class='table table-hover table-striped table-bordered data_table'>\";\n\n        $displayText = get_lang('Company');\n        $table .= \"<thead><tr><th class='th-header'>$displayText</th><th class='th-header'> \".get_lang('CountOfSubscribedUsers').\" </th></tr></thead><tbody>\";\n\n        foreach ($companys as $entity => $student) {\n            $table .= \"<tr><td>$entity</td><td>\".count($student).\"</td></tr>\";\n            $total += count($student);\n        }\n        $table .= \"<tr><td>\".get_lang('GeneralTotal').\"</td><td>$total</td></tr>\";\n        $table .= '</tbody></table></div>';\n\n        if (!empty($startDate) or !empty($endDate)) {\n            $tableHtml = $table;\n        }\n\n        $form = new FormValidator('searchDate', 'get');\n        $form->addHidden('display', 'company');\n        $today = new DateTime();\n        if (empty($startDate)) {\n            $startDate = api_get_local_time($today->modify('first day of this month')->format('Y-m-d'));\n        }\n        if (empty($endDate)) {\n            $endDate = api_get_local_time($today->modify('last day of this month')->format('Y-m-d'));\n        }\n        $form->addDatePicker(\n            'startDate',\n            get_lang('DateStart'),\n            [\n                'value' => $startDate,\n            ]);\n        $form->addDatePicker(\n            'endDate',\n            get_lang('DateEnd'),\n            [\n                'value' => $endDate,\n            ]);\n        $form->addButtonSearch(get_lang('Search'));\n        if (count($companys) != 0) {\n            //$form->addButtonSave(get_lang('Ok'), 'export');\n            $form\n                ->addButton(\n                    'export_csv',\n                    get_lang('ExportAsCSV'),\n                    'check',\n                    'primary',\n                    null,\n                    null,\n                    [\n                    ]\n                );\n        }\n\n        $tableContent = $form->returnForm();\n        $tableContent .= $tableHtml;\n        // $tableContent .= $table->return_table();\n\n        $tpl = new Template('', false, false, false, false, false, false);\n        $tpl->assign('table', $tableContent);\n        $templateName = $tpl->get_template('my_space/course_summary.tpl');\n        $tpl->display($templateName);\n    }\n\n    /**\n     *  Displays a list as a table of teachers who are set authors by a extra_field authors.\n     *\n     * @param string|null $startDate\n     * @param string|null $endDate\n     * @param bool        $csv\n     */\n    public static function displayResumeLP(\n        $startDate = null,\n        $endDate = null,\n        $csv = false\n    ) {\n        $tblExtraField = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $tblCourse = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tblExtraFieldValue = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tblLpItem = Database::get_course_table(TABLE_LP_ITEM);\n        $tblLp = Database::get_course_table(TABLE_LP_MAIN);\n        $tblAccessUrlCourse = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n        $accessUrlFilter = '';\n        if (api_is_multiple_url_enabled()) {\n            $urlId = api_get_current_access_url_id();\n            $accessUrlFilter = \" INNER JOIN $tblAccessUrlCourse aurc\n                      ON (c.id = aurc.c_id AND aurc.access_url_id = $urlId)\";\n        }\n        $query = \"\n        SELECT DISTINCT\n            lp.name,\n            lpi.title,\n            lp.id as lp_id,\n            lpi.id AS lp_item_id,\n            REPLACE (efv.value, ';', ',') AS users_id,\n            c.title AS course_title,\n            c.code AS course_code\n        FROM $tblExtraFieldValue AS efv\n        INNER JOIN $tblExtraField AS ef\n        ON (\n            efv.field_id = ef.id AND\n            ef.variable = 'authorlpitem' AND\n            efv.value != ''\n            )\n        INNER JOIN $tblLpItem AS lpi\n        ON (efv.item_id = lpi.iid)\n        INNER JOIN $tblLp AS lp\n        ON (lpi.lp_id = lp.iid AND lpi.c_id = lp.c_id)\n        INNER JOIN $tblCourse AS c\n        ON (lp.c_id = c.id)\n        $accessUrlFilter\";\n        $queryResult = Database::query($query);\n        $dataTeachers = Database::store_result($queryResult, 'ASSOC');\n        $totalData = count($dataTeachers);\n        $lpItems = [];\n        $teachers = [];\n        $users = [];\n        $learningPaths = [];\n        $csvContent = [];\n        $htmlData = '';\n        /* use 'for' to performance */\n        for ($i = 0; $i < $totalData; $i++) {\n            $row = $dataTeachers[$i];\n            $lpId = $row['lp_id'];\n            $lpItems[] = $lpId;\n            $authorData = $row['users_id'];\n            $learningPaths[$lpId] = $row;\n            if (strpos($authorData, \",\") === false) {\n                if (!isset($users[$authorData])) {\n                    $users[$authorData] = api_get_user_info($authorData);\n                }\n                $teachers[$authorData][$lpId] = $users[$authorData];\n                $learningPaths[$lpId]['teachers'][$authorData] = $users[$authorData];\n            } else {\n                $items = explode(',', $authorData);\n                $totalItems = count($items);\n                for ($j = 0; $j < $totalItems; $j++) {\n                    $authorData = $items[$j];\n                    if (!isset($users[$authorData])) {\n                        $users[$authorData] = api_get_user_info($authorData);\n                    }\n                    $teachers[$authorData][$lpId] = $users[$authorData];\n                    $learningPaths[$lpId]['teachers'][$authorData] = $users[$authorData];\n                }\n            }\n        }\n        $lpItems = array_unique($lpItems);\n        $whereInLp = implode(',', $lpItems);\n        if (count($lpItems) != 0) {\n            $registeredUsers = self::getCompanyLearnpathSubscription(\n                $startDate,\n                $endDate,\n                $whereInLp\n            );\n            foreach ($registeredUsers as $students) {\n                $totalStudents = count($students);\n                /* use 'for' to performance */\n                for ($i = 0; $i < $totalStudents; $i++) {\n                    $user = $students[$i];\n                    $lpId = $user['lp_item'];\n                    $studentId = $user['id'];\n                    $learningPaths[$lpId]['courseStudent'][$studentId] = $user;\n                }\n            }\n            $registeredUsersBySession = self::getSessionAddUserCourseFromTrackDefault(\n                $startDate,\n                $endDate,\n                $whereInLp\n            );\n            foreach ($registeredUsersBySession as $lpId => $student) {\n                $totalStudents = count($student);\n                /* use 'for' to performance */\n                for ($i = 0; $i < $totalStudents; $i++) {\n                    $user = $student[$i];\n                    $lpId = $user['lp'];\n                    $studentId = $user['id'];\n                    $learningPaths[$lpId]['sessionStudent'][$studentId] = $user;\n                    $learningPaths[$lpId]['sessionStudent'][$studentId]['session_id'] = $user;\n                }\n            }\n            $registeredUsersGroup = self::getCompanyLearnpathSubscription(\n                $startDate,\n                $endDate,\n                $whereInLp,\n                true\n            );\n            foreach ($registeredUsersGroup as $student) {\n                $totalStudents = count($student);\n                /* use 'for' to performance */\n                for ($i = 0; $i < $totalStudents; $i++) {\n                    $user = $student[$i];\n                    $lpId = $user['lp_item'];\n                    $studentId = $user['id'];\n                    $learningPaths[$lpId]['courseStudentGroup'][$studentId] = $user;\n                }\n            }\n\n            $index = 0;\n            $iconAdd = Display::return_icon('add.png', get_lang('ShowOrHide'), '', ICON_SIZE_SMALL);\n            $iconRemove = Display::return_icon('error.png', get_lang('ShowOrHide'), '', ICON_SIZE_SMALL);\n            $htmlData = \"<div class='table-responsive'>\n            <table class='table table-hover table-striped table-bordered data_table'>\n            <thead>\n                <tr>\n                    <th class='th-header'>\".get_lang('Author').\"</th>\n                    <th class='th-header'>\".get_lang('LearningPathList').\"</th>\n                    <th class='th-header'>\".get_lang('CountOfSubscribedUsers').\"</th>\n                    <th class='th-header'>\".get_lang('StudentList').\"</th>\n                </tr>\n            </thead>\n                <tbody>\";\n            $lastTeacher = '';\n            /* csv */\n            $csv_row = [];\n            $csv_row[] = get_lang('Author');\n            $csv_row[] = get_lang('LearningPathList');\n            $csv_row[] = get_lang('CountOfSubscribedUsers');\n            $csv_row[] = get_lang('StudentList');\n            $csvContent[] = $csv_row;\n            $studentsName = '';\n            /* csv */\n            foreach ($teachers as $authorLId => $teacher) {\n                $totalStudents = 0;\n                foreach ($teacher as $lpId => $teacherData) {\n                    $lpSessionId = 0;\n                    $lpData = $learningPaths[$lpId];\n                    $printTeacherName = ($lastTeacher != $teacherData['complete_name']) ? $teacherData['complete_name'] : '';\n                    $htmlData .= \"<tr><td>$printTeacherName</td>\";\n                    $hiddenField = 'student_show_'.$index;\n                    $hiddenFieldLink = 'student_show_'.$index.'_';\n                    $lpCourseCode = $lpData['course_code'];\n                    $lpName = $lpData['name'];\n                    $courseStudent = isset($lpData['courseStudent']) ? $lpData['courseStudent'] : [];\n                    $courseStudentGroup = isset($lpData['courseStudentGroup']) ? $lpData['courseStudentGroup'] : [];\n                    $sessionStudent = isset($lpData['sessionStudent']) ? $lpData['sessionStudent'] : [];\n                    $htmlData .= \"<td>$lpName</td><td>\".count($courseStudent).\" ( \".count($sessionStudent).\" )</td><td>\";\n                    $csv_row = [];\n                    $csv_row[] = $printTeacherName;\n                    $csv_row[] = $lpName;\n                    $csv_row[] = count($courseStudent).' ( '.count($sessionStudent).\" )\";\n                    if (!empty($courseStudent)\n                        || !empty($courseStudentGroup)\n                        || !empty($sessionStudent)\n                    ) {\n                        $htmlData .= \"<a href='#!' id='$hiddenFieldLink' onclick='showHideStudent(\\\"$hiddenField\\\")'>\n                        <div class='icon_add'>$iconAdd</div>\n                        <div class='icon_remove hidden'>$iconRemove</div>\n                        </a>\n                        <div id='$hiddenField' class='hidden'>\";\n                        $studentRegistered = [];\n\n                        $tempArray = self::getStudentDataToReportByLp($courseStudent, $studentRegistered, $lpCourseCode);\n                        $studentsName .= $tempArray['csv'];\n                        $htmlData .= $tempArray['html'];\n                        $studentRegistered = $tempArray['student_registered'];\n                        $totalStudents += $tempArray['total_students'];\n\n                        $tempArray = self::getStudentDataToReportByLp($sessionStudent, $studentRegistered, $lpCourseCode);\n                        $studentsName .= $tempArray['csv'];\n                        $htmlData .= $tempArray['html'];\n                        $studentRegistered = $tempArray['student_registered'];\n                        $totalStudents += $tempArray['total_students'];\n\n                        $tempArray = self::getStudentDataToReportByLp($courseStudentGroup, $studentRegistered, $lpCourseCode);\n                        $studentsName .= $tempArray['csv'];\n                        $htmlData .= $tempArray['html'];\n                        $studentRegistered = $tempArray['student_registered'];\n                        $totalStudents += $tempArray['total_students'];\n\n                        $htmlData .= \"</div>\";\n                    }\n                    $htmlData .= \"</td></tr>\";\n                    $index++;\n                    $csv_row[] = trim($studentsName, ' / ');\n                    $studentsName = '';\n                    $csvContent[] = $csv_row;\n                    $lastTeacher = $teacherData['complete_name'];\n                }\n                $htmlData .= \"<tr>\n                <td></td>\n                <td><strong>\".get_lang('LearnpathsTotal').\" \".count($teacher).\" </strong></td>\n                <td><strong>$totalStudents</strong></td>\n                <td></td>\n                </tr>\";\n            }\n            $htmlData .= \"</tbody>\n            </table>\n            </div>\";\n        }\n        if (false == $csv) {\n            $form = new FormValidator('searchDate', 'get');\n            $form->addHidden('display', 'learningPath');\n            $today = new DateTime();\n            if (empty($startDate)) {\n                $startDate = $today->modify('first day of this month')->format('Y-m-d');\n            }\n            if (empty($endDate)) {\n                $endDate = $today->modify('last day of this month')->format('Y-m-d');\n            }\n            $form->addDatePicker(\n                'startDate',\n                get_lang('DateStart'),\n                [\n                    'value' => $startDate,\n                ]);\n            $form->addDatePicker(\n                'endDate',\n                get_lang('DateEnd'),\n                [\n                    'value' => $endDate,\n                ]);\n            $form->addButtonSearch(get_lang('Search'));\n            if (0 != count($csvContent)) {\n                $form\n                    ->addButton(\n                        'export_csv',\n                        get_lang('ExportAsCSV'),\n                        'check',\n                        'primary',\n                        null,\n                        null,\n                        [\n                        ]\n                    );\n            }\n            $tableContent = $form->returnForm();\n            if (!empty($startDate) || !empty($endDate)) {\n                $tableContent .= $htmlData;\n            }\n            $tpl = new Template('', false, false, false, false, false, false);\n            $tpl->assign('table', $tableContent);\n            $templateName = $tpl->get_template('my_space/course_summary.tpl');\n            $tpl->display($templateName);\n        } else {\n            if (count($csvContent) != 0) {\n                Export::arrayToCsv($csvContent, 'reporting_lp_by_authors');\n            }\n        }\n    }\n\n    /**\n     *  Displays a list as a table of teachers who are set authors of lp's item by a extra_field authors.\n     *\n     * @param string|null $startDate\n     * @param string|null $endDate\n     * @param bool        $csv\n     */\n    public static function displayResumeLpByItem($startDate = null, $endDate = null, $csv = false)\n    {\n        $tableHtml = '';\n        $table = '';\n        $tblExtraField = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $tblExtraFieldValue = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tblLpItem = Database::get_course_table(TABLE_LP_ITEM);\n        $tblLp = Database::get_course_table(TABLE_LP_MAIN);\n        $tblAccessUrlCourse = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n        $accessUrlFilter = '';\n        if (api_is_multiple_url_enabled()) {\n            $urlId = api_get_current_access_url_id();\n            $accessUrlFilter = \" INNER JOIN $tblAccessUrlCourse aurc\n                      ON (lp.c_id = aurc.c_id AND aurc.access_url_id = $urlId)\";\n        }\n        $index = 0;\n        $cLpItems = [];\n        $cLpItemsAuthor = [];\n        $authorArray = [];\n        $studentArray = [];\n        $whereInLp = [];\n        $dataSet = [];\n        /** Get lp items only with authors */\n        $sql = \" SELECT\n                efv.item_id AS lp_item_id,\n                efv.value AS author\n            FROM $tblExtraFieldValue AS efv\n            INNER JOIN $tblExtraField AS ef\n            ON (\n                ef.variable = 'authorlpitem' AND\n                efv.field_id = ef.id AND\n                efv.value != ''\n            )\n            ORDER BY efv.item_id \";\n        $queryResult = Database::query($sql);\n        $data = Database::store_result($queryResult, 'ASSOC');\n        $totalData = count($data);\n        /* use 'for' to performance */\n        for ($i = 0; $i < $totalData; $i++) {\n            $cLpItemsAuthor[$data[$i]['lp_item_id']] = $data[$i]['author'];\n        }\n        /** Get lp items only with price */\n        $sql = \" SELECT\n               lp.iid AS lp_id,\n               lp.name AS lp_name,\n               efv.item_id AS lp_item_id,\n               lpi.title AS title,\n               efv.value AS price\n            FROM $tblExtraFieldValue AS efv\n            INNER JOIN $tblExtraField AS ef\n            ON (\n                ef.variable = 'price' AND\n                efv.field_id = ef.id AND\n                efv.value > 0\n            )\n            INNER JOIN $tblLpItem AS lpi\n            ON (lpi.iid = efv.item_id)\n            INNER JOIN $tblLp AS lp\n            ON (lpi.lp_id = lp.iid AND lpi.c_id = lp.c_id)\n            $accessUrlFilter\";\n        $queryResult = Database::query($sql);\n        $data = Database::store_result($queryResult, 'ASSOC');\n        $totalData = count($data);\n        /* use 'for' to performance */\n        for ($i = 0; $i < $totalData; $i++) {\n            $item = $data[$i];\n            $lpItemId = (int) $item['lp_item_id'];\n            $whereInLp[] = $item['lp_id'];\n            $author = isset($cLpItemsAuthor[$lpItemId]) ? $cLpItemsAuthor[$lpItemId] : null;\n            $item['author'] = $author;\n            if (!empty($author)) {\n                $cLpItems[count($cLpItems)] = $item;\n            }\n        }\n        $totalLpItems = count($cLpItems);\n        $tableNoData = \"<div class='table-responsive'>\n                <table class='table table-hover table-striped table-bordered data_table'>\n                <thead>\n                    <tr>\n                    <th class='th-header'>\".get_lang('NoDataAvailable').'</th>\n                </tr>\n                </thead>\n                </tbody>\n                </tbody>\n                </table>\n                </div>';\n        if (0 == $totalLpItems) {\n            $tableHtml = $tableNoData;\n        } elseif (0 == count($whereInLp)) {\n            $tableHtml = $tableNoData;\n        } else {\n            $whereInLp = array_unique($whereInLp);\n            $whereInLp = implode(',', $whereInLp);\n            $registeredUsersBySession = self::getSessionAddUserCourseFromTrackDefault(\n                $startDate,\n                $endDate,\n                $whereInLp\n            );\n            $registeredUsersInCourse = self::getUserSubscribedInCourseByDateAndLp($startDate, $endDate, $whereInLp);\n            $registeredUsersInLp = self::getCompanyLearnpathSubscription(\n                $startDate,\n                $endDate,\n                $whereInLp\n            );\n            $registeredGroupsInLp = self::getCompanyLearnpathSubscription(\n                $startDate,\n                $endDate,\n                $whereInLp,\n                true\n            );\n            /* use 'for' to performance */\n            for ($i = 0; $i < $totalLpItems; $i++) {\n                $lpItem = $cLpItems[$i];\n                $lpItemId = $lpItem['lp_item_id'];\n                $author = str_replace(';', ',', $lpItem['author']);\n                $tempArrayAuthor = explode(',', $author);\n                $byCourse = $registeredUsersInLp[$lpItemId] ?? [];\n                $byCourseGroups = $registeredGroupsInLp[$lpItemId] ?? [];\n                $bySession = $registeredUsersBySession[$lpItemId] ?? [];\n                $byUserInCourse = $registeredUsersInCourse[$lpItemId] ?? [];\n                if (is_array($tempArrayAuthor)) {\n                    $totalAuthors = count($tempArrayAuthor);\n                    for ($j = 0; $j < $totalAuthors; $j++) {\n                        if (!isset($authorArray[$tempArrayAuthor[$j]])) {\n                            $authorArray[$tempArrayAuthor[$j]] = api_get_user_info($tempArrayAuthor[$j]);\n                        }\n                        $dataSet[$tempArrayAuthor[$j]][$lpItemId] = [\n                            'course' => $byCourse,\n                            'courseGroups' => $byCourseGroups,\n                            'session' => $bySession,\n                            'lp_item' => $lpItem,\n                            'course_user' => $byUserInCourse,\n                        ];\n                    }\n                } else {\n                    if (!isset($authorArray[$author])) {\n                        $authorArray[$author] = api_get_user_info($author);\n                    }\n                    $dataSet[$author][$lpItemId] = [\n                        'course' => $byCourse,\n                        'courseGroups' => $byCourseGroups,\n                        'session' => $bySession,\n                        'lp_item' => $lpItem,\n                        'course_user' => $byUserInCourse,\n                    ];\n                }\n            }\n        }\n        if ($csv == false) {\n            if (empty($tableHtml)) {\n                $table .= \"<div class='table-responsive'>\n                    <table class='table table-hover table-striped table-bordered data_table'>\n                    <thead>\n                    <tr>\n                    <th class='th-header'>\".get_lang('Author').\"</th>\n                    <th class='th-header'>\".get_lang('ContentList').\"</th>\n                    <th class='th-header'>\".get_lang('Tariff').\"</th>\n                    <th class='th-header'>\".get_lang('CountOfSubscribedUsers').\"</th>\n                    <th class='th-header'>\".get_lang('ToInvoice').\"</th>\n                    <th class='th-header'>\".get_lang('StudentList').\"</th>\n                    </tr>\n                    </thead>\n                    <tbody>\";\n                //Icon Constant\n                $iconAdd = Display::return_icon('add.png', get_lang('ShowOrHide'), '', ICON_SIZE_SMALL);\n                $iconRemove = Display::return_icon('error.png', get_lang('ShowOrHide'), '', ICON_SIZE_SMALL);\n\n                $lastAuthor = '';\n                $total = 0;\n                foreach ($dataSet as $authorId => $lpItems) {\n                    $authorTemp = $authorArray[$authorId];\n                    $totalSudent = 0;\n                    foreach ($lpItems as $lpItem) {\n                        $totalStudents = 0;\n                        $itemLp = $lpItem['lp_item'];\n                        $title = $itemLp['title'];\n                        $price = $itemLp['price'];\n                        $byCourse = $lpItem['course'];\n                        $byCourseGroups = $lpItem['courseGroups'];\n                        $bySession = $lpItem['session'];\n                        $byUserInCourse = $lpItem['course_user'];\n                        $hide = \"class='author_$authorId hidden' \";\n                        $tableTemp = '';\n                        if ($lastAuthor != $authorTemp) {\n                            $table .= \"<tr><td>\".$authorTemp['complete_name'].\"</td>\";\n                        } else {\n                            $table .= \"<tr $hide ><td></td>\";\n                        }\n                        $table .= \"<td>$title</td><td>$price</td>\";\n                        $studentRegister = count($byCourse);\n                        $studentGroupsRegister = count($byCourseGroups);\n                        $studentRegisterBySession = count($bySession);\n                        $usersInCourseCount = count($byUserInCourse);\n\n                        $hiddenField = 'student_show_'.$index;\n                        $hiddenFieldLink = 'student_show_'.$index.'_';\n                        if (0 != $studentRegister ||\n                            0 != $studentRegisterBySession ||\n                            0 != $studentGroupsRegister ||\n                            0 != $usersInCourseCount\n                        ) {\n                            $tableTemp .= \"<td>\n                                <a href='#!' id='$hiddenFieldLink' onclick='showHideStudent(\\\"$hiddenField\\\")'>\n                                <div class='icon_add'>$iconAdd</div>\n                                <div class='icon_remove hidden'>$iconRemove</div>\n                                </a>\n                                <div id='$hiddenField' class='hidden'>\";\n                            $studentProcessed = [];\n                            /* Student by course*/\n                            $studentProcessed = self::getStudentDataToReportByLpItem($byCourse, $studentProcessed);\n                            /* Student by Class*/\n                            $studentProcessed = self::getStudentDataToReportByLpItem($byCourseGroups, $studentProcessed, 'class');\n                            /* Student by sessions*/\n                            $studentProcessed = self::getStudentDataToReportByLpItem($bySession, $studentProcessed);\n                            // Students in course*/\n                            $studentProcessed = self::getStudentDataToReportByLpItem($byUserInCourse, $studentProcessed);\n                            $index++;\n                            foreach ($studentProcessed as $lpItemId => $item) {\n                                foreach ($item as $type => $student) {\n                                    foreach ($student as $userId => $text) {\n                                        if ('LearnpathSubscription' == $type) {\n                                            $tableTemp .= $text;\n                                            $totalStudents++;\n                                        } else {\n                                            if (!isset($studentProcessed[$lpItemId]['LearnpathSubscription'])) {\n                                                $tableTemp .= $text;\n                                                $totalStudents++;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            $tableTemp .= \"</div></td>\";\n                        } else {\n                            $tableTemp .= \"<td></td>\";\n                        }\n                        $table .= \"<td>$totalStudents</td>\";\n                        $invoicing = ($totalStudents * $price);\n                        $table .= \"<td>$invoicing</td>\";\n                        $total += $invoicing;\n                        $totalSudent += $totalStudents;\n                        $table .= $tableTemp.\"</tr>\";\n                        $lastAuthor = $authorTemp;\n                    }\n                    $hiddenFieldLink = 'student__show_'.$index.'_';\n                    $index++;\n                    $table .= \"<tr>\n                    <th class='th-header'></th>\n                    <th class='th-header'>\n                            <a href='#!' id='$hiddenFieldLink' onclick='ShowMoreAuthor(\\\"$authorId\\\")'>\n                                <div class='icon_add_author_$authorId'>$iconAdd</div>\n                                <div class='icon_remove_author_$authorId hidden'>$iconRemove</div>\n                            </a>\n                        </th>\n                    <th class='th-header'></th>\n                    <th class='th-header'>$totalSudent</th>\n                    <th class='th-header'>$total</th>\n                    <th class='th-header'></tr>\";\n                    $total = 0;\n                }\n                $table .= \"</tbody></table></div>\";\n                $tableHtml = $table;\n            }\n\n            $form = new FormValidator('searchDate', 'get');\n            $form->addHidden('display', 'learningPathByItem');\n            $today = new DateTime();\n            if (empty($startDate)) {\n                $startDate = $today->modify('first day of this month')->format('Y-m-d');\n            }\n            if (empty($endDate)) {\n                $endDate = $today->modify('last day of this month')->format('Y-m-d');\n            }\n            $form->addDatePicker(\n                'startDate',\n                get_lang('DateStart'),\n                [\n                    'value' => $startDate,\n                ]\n            );\n            $form->addDatePicker(\n                'endDate',\n                get_lang('DateEnd'),\n                [\n                    'value' => $endDate,\n                ]\n            );\n            $form->addButtonSearch(get_lang('Search'));\n\n            if (count($dataSet) != 0) {\n                $form->addButton(\n                    'export_csv',\n                    get_lang('ExportAsCSV'),\n                    'check',\n                    'primary',\n                    null,\n                    null,\n                    [\n                    ]\n                );\n            }\n            $tableContent = $form->returnForm();\n            $tableContent .= $tableHtml;\n            $tpl = new Template('', false, false, false, false, false, false);\n            $tpl->assign('table', $tableContent);\n            $templateName = $tpl->get_template('my_space/course_summary.tpl');\n            $tpl->display($templateName);\n        } else {\n            $csv_content = [];\n            $csv_row = [];\n            $csv_row[] = get_lang('Author');\n            $csv_row[] = get_lang('ContentList');\n            $csv_row[] = get_lang('Tariff');\n            $csv_row[] = get_lang('CountOfSubscribedUsers');\n            $csv_row[] = get_lang('ToInvoice');\n            $csv_row[] = get_lang('StudentList');\n            $csv_content[] = $csv_row;\n            $total = 0;\n            foreach ($dataSet as $authorId => $lpItems) {\n                $authorTemp = $authorArray[$authorId];\n                $totalSudent = 0;\n                foreach ($lpItems as $lpItem) {\n                    $totalStudents = 0;\n                    $itemLp = $lpItem['lp_item'];\n                    $itemLpId = $itemLp['lp_item_id'];\n                    $title = $itemLp['title'];\n                    $price = $itemLp['price'];\n                    $byCourse = $lpItem['course'];\n                    $bySession = $lpItem['session'];\n                    $byCourseGroups = $lpItem['courseGroups'];\n                    $byUserInCourse = $lpItem['course_user'];\n\n                    $csv_row = [];\n                    $csv_row[] = $authorTemp['complete_name'];\n                    $csv_row[] = $title;\n                    $csv_row[] = $price;\n\n                    $studentRegister = count($byCourse);\n                    $studentRegisterBySession = count($bySession);\n                    $studentGroupsRegister = count($byCourseGroups);\n\n                    $studentsName = '';\n                    if (0 != $studentRegister ||\n                        0 != $studentRegisterBySession ||\n                        0 != $studentGroupsRegister) {\n                        $studentProcessed = [];\n                        /* Student by course*/\n                        $studentProcessed = self::getStudentDataToReportByLpItem($byCourse, $studentProcessed, '', true);\n                        /* Student by Class*/\n                        $studentProcessed = self::getStudentDataToReportByLpItem($byCourseGroups, $studentProcessed, 'class', true);\n                        /* Student by sessions*/\n                        $studentProcessed = self::getStudentDataToReportByLpItem($bySession, $studentProcessed, '', true);\n                        // Students in course*/\n                        $studentProcessed = self::getStudentDataToReportByLpItem($byUserInCourse, $studentProcessed, '', true);\n\n                        $index++;\n                        foreach ($studentProcessed as $lpItemId => $item) {\n                            foreach ($item as $type => $student) {\n                                foreach ($student as $userId => $text) {\n                                    if ('LearnpathSubscription' == $type) {\n                                        $studentsName .= $text;\n                                        $totalStudents++;\n                                    } else {\n                                        if (!isset($studentProcessed[$lpItemId]['LearnpathSubscription'])) {\n                                            $studentsName .= $text;\n                                            $totalStudents++;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    $csv_row[] = $totalStudents;\n                    $csv_row[] = $price * $totalStudents;\n                    $csv_row[] = trim($studentsName, \" / \");\n                    $csv_content[] = $csv_row;\n                }\n            }\n            Export::arrayToCsv($csv_content, 'reporting_lp_by_authors');\n        }\n    }\n\n    public static function getSessionAddUserCourseFromTrackDefault(\n        $startDate = null,\n        $endDate = null,\n        $whereInLp = null\n    ) {\n        $whereInLp = Database::escape_string($whereInLp);\n        $data = [];\n        $tblTrackDefault = Database::get_main_table(TABLE_STATISTIC_TRACK_E_DEFAULT);\n        $tblSessionRelCourseUser = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tblLp = Database::get_course_table(TABLE_LP_MAIN);\n        $tblLpItem = Database::get_course_table(TABLE_LP_ITEM);\n        $tblUser = Database::get_main_table(TABLE_MAIN_USER);\n        $tblAccessUrlUser = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USER);\n        $accessUrlFilter = '';\n        if (api_is_multiple_url_enabled()) {\n            $urlId = api_get_current_access_url_id();\n            $accessUrlFilter = \" INNER JOIN $tblAccessUrlUser auru\n                      ON (u.id = auru.user_id AND auru.access_url_id = $urlId)\";\n        }\n\n        if (!empty($startDate)) {\n            $startDate = new DateTime($startDate);\n        } else {\n            $startDate = new DateTime();\n        }\n        if (!empty($endDate)) {\n            $endDate = new DateTime($endDate);\n        } else {\n            $endDate = new DateTime();\n        }\n        if (!empty($startDate) and !empty($endDate)) {\n            if ($startDate > $endDate) {\n                $dateTemp = $endDate;\n                $endDate = $startDate;\n                $startDate = $dateTemp;\n                unset($dateTemp);\n            }\n        }\n        $startDate = api_get_utc_datetime($startDate->setTime(0, 0, 0)->format('Y-m-d H:i:s'));\n        $endDate = api_get_utc_datetime($endDate->setTime(0, 0, 0)->format('Y-m-d H:i:s'));\n        $extra = '';\n        if (!empty($whereInLp)) {\n            $extra = \" AND lpi.lp_id in ($whereInLp) \";\n        }\n\n        $sql = \"SELECT DISTINCT\n            lp.iid AS lp,\n            lpi.iid AS lp_item,\n            lpi.iid AS lp_item_id,\n            td.default_value AS id,\n            srcu.session_id AS session_id,\n            u.username AS username,\n            td.default_date AS default_date,\n            td.default_event_type AS type,\n            u.firstname as firstname,\n            u.lastname as lastname\n        FROM $tblTrackDefault AS td\n        INNER JOIN $tblSessionRelCourseUser AS srcu\n        ON (td.default_value = srcu.user_id AND td.c_id = srcu.c_id)\n        INNER JOIN $tblLp AS lp\n        ON (lp.c_id = srcu.c_id)\n        INNER JOIN $tblLpItem AS lpi\n        ON (\n            lpi.c_id = srcu.c_id AND\n            lp.id = lpi.lp_id AND\n            lpi.c_id = lp.c_id\n        )\n        INNER JOIN $tblUser AS u\n        ON (u.id = srcu.user_id)\n        $accessUrlFilter\n        WHERE\n            td.default_event_type = 'session_add_user_course' AND\n            td.default_date >= '$startDate' AND\n            td.default_date <= '$endDate'\n            $extra\n        ORDER BY td.default_value \";\n        $queryResult = Database::query($sql);\n        $dataTrack = Database::store_result($queryResult, 'ASSOC');\n        foreach ($dataTrack as $item) {\n            $item['complete_name'] = api_get_person_name($item['firstname'], $item['lastname']);\n            $item['company'] = self::getCompanyOfUser($item['id']);\n            $data[$item['lp_item_id']][] = $item;\n        }\n\n        return $data;\n    }\n\n    public static function getUserSubscribedInCourseByDateAndLp(\n        $startDate = null,\n        $endDate = null,\n        $whereInLp = null\n    ): array {\n        $whereInLp = Database::escape_string($whereInLp);\n        $tblTrackDefault = Database::get_main_table(TABLE_STATISTIC_TRACK_E_DEFAULT);\n        $tblCourseRelUser = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        $tblLp = Database::get_course_table(TABLE_LP_MAIN);\n        $tblLpItem = Database::get_course_table(TABLE_LP_ITEM);\n        $tblUser = Database::get_main_table(TABLE_MAIN_USER);\n        $tblAccessUrlUser = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USER);\n        $accessUrlFilter = '';\n\n        if (api_is_multiple_url_enabled()) {\n            $urlId = api_get_current_access_url_id();\n            $accessUrlFilter = \" INNER JOIN $tblAccessUrlUser auru\n                ON (u.id = auru.user_id AND auru.access_url_id = $urlId)\";\n        }\n\n        $startDate = !empty($startDate) ? new DateTime($startDate) : new DateTime();\n        $endDate = !empty($endDate) ? new DateTime($endDate) : new DateTime();\n\n        $startDate = api_get_utc_datetime($startDate->setTime(0, 0)->format('Y-m-d H:i:s'));\n        $endDate = api_get_utc_datetime($endDate->setTime(0, 0)->format('Y-m-d H:i:s'));\n\n        $extra = '';\n\n        if (!empty($whereInLp)) {\n            $extra = \" AND lpi.lp_id in ($whereInLp) \";\n        }\n\n        $sql = \"SELECT DISTINCT\n                lp.iid AS lp,\n                lpi.iid AS lp_item,\n                lpi.iid AS lp_item_id,\n                u.id AS id,\n                u.username AS username,\n                td.default_date AS default_date,\n                td.default_event_type AS type,\n                u.firstname as firstname,\n                u.lastname as lastname\n            FROM $tblTrackDefault AS td\n            INNER JOIN $tblCourseRelUser AS cru ON td.c_id = cru.c_id\n            INNER JOIN $tblLp AS lp ON lp.c_id = cru.c_id\n            INNER JOIN $tblLpItem AS lpi\n                ON (lpi.c_id = cru.c_id AND lp.id = lpi.lp_id AND lpi.c_id = lp.c_id)\n            INNER JOIN $tblUser AS u ON u.id = cru.user_id\n            $accessUrlFilter\n            WHERE\n                td.default_event_type = '\".LOG_SUBSCRIBE_USER_TO_COURSE.\"'\n                AND td.default_date >= '$startDate'\n                AND td.default_date <= '$endDate'\n                AND td.default_value LIKE CONCAT('%s:2:\\\\\\\\\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\\\\\";i:', cru.user_id, ';%')\n                $extra\n            ORDER BY u.id\";\n\n        $result = Database::query($sql);\n\n        $data = [];\n\n        while ($item = Database::fetch_assoc($result)) {\n            $item['complete_name'] = api_get_person_name($item['firstname'], $item['lastname']);\n            $item['company'] = self::getCompanyOfUser($item['id']);\n\n            $data[$item['lp_item_id']][] = $item;\n        }\n\n        return $data;\n    }\n\n    /**\n     * Display a sortable table that contains an overview of all the reporting progress of all courses.\n     */\n    public static function display_tracking_course_overview()\n    {\n        $params = ['view' => 'admin', 'display' => 'courseoverview'];\n        $table = new SortableTable(\n            'tracking_session_overview',\n            ['MySpace', 'get_total_number_courses'],\n            ['MySpace', 'get_course_data_tracking_overview'],\n            1,\n            20,\n            'ASC',\n            null, [\n                'class' => 'table table-transparent',\n            ]\n        );\n        $table->additional_parameters = $params;\n        $table->set_column_filter(0, ['MySpace', 'course_tracking_filter']);\n        $tableContent = $table->return_table();\n\n        $tpl = new Template('', false, false, false, false, false, false);\n        $tpl->assign('table', $tableContent);\n        $templateName = $tpl->get_template('my_space/course_summary.tpl');\n        $tpl->display($templateName);\n    }\n\n    /**\n     * Get the total number of courses.\n     *\n     * @return int Total number of courses\n     */\n    public static function get_total_number_courses()\n    {\n        return CourseManager::count_courses(api_get_current_access_url_id());\n    }\n\n    /**\n     * Get data for the courses.\n     *\n     * @param int    $from        Inferior limit\n     * @param int    $numberItems Number of items to select\n     * @param string $column      Column to order on\n     * @param string $direction   Order direction\n     *\n     * @return array Results\n     */\n    public static function get_course_data_tracking_overview(\n        $from,\n        $numberItems,\n        $column,\n        $direction\n    ) {\n        switch ($column) {\n            default:\n            case 1:\n                $column = 'title';\n                break;\n        }\n\n        $courses = CourseManager::get_courses_list(\n            $from,\n            $numberItems,\n            $column,\n            $direction,\n             -1,\n            '',\n            api_get_current_access_url_id()\n        );\n\n        $list = [];\n        foreach ($courses as $course) {\n            $list[] = [\n                '0' => $course['code'],\n                'col0' => $course['code'],\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * Fills in course reporting data.\n     *\n     * @param int course code\n     * @param array $url_params additional url parameters\n     * @param array $row        the row information (the other columns)\n     *\n     * @return string html code\n     */\n    public static function course_tracking_filter($course_code, $url_params, $row)\n    {\n        $course_code = $row[0];\n        $courseInfo = api_get_course_info($course_code);\n        $courseId = $courseInfo['real_id'];\n\n        $tpl = new Template('', false, false, false, false, false, false);\n        $data = null;\n\n        // database table definition\n        $tbl_course_rel_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        // getting all the courses of the user\n        $sql = \"SELECT *\n                FROM $tbl_user AS u\n                INNER JOIN $tbl_course_rel_user AS cu\n                ON cu.user_id = u.user_id\n                WHERE cu.c_id = '\".$courseId.\"'\";\n        $result = Database::query($sql);\n        $time_spent = 0;\n        $progress = 0;\n        $nb_progress_lp = 0;\n        $score = 0;\n        $nb_score_lp = 0;\n        $nb_messages = 0;\n        $nb_assignments = 0;\n        $last_login_date = false;\n        $total_score_obtained = 0;\n        $total_score_possible = 0;\n        $total_questions_answered = 0;\n        while ($row = Database::fetch_object($result)) {\n            // get time spent in the course and session\n            $time_spent += Tracking::get_time_spent_on_the_course(\n                $row->user_id,\n                $courseInfo['real_id']\n            );\n            $progress_tmp = Tracking::get_avg_student_progress(\n                $row->user_id,\n                $course_code,\n                [],\n                null,\n                true\n            );\n\n            if ($progress_tmp) {\n                $progress += $progress_tmp[0];\n                $nb_progress_lp += $progress_tmp[1];\n            }\n            $score_tmp = Tracking::get_avg_student_score(\n                $row->user_id,\n                $course_code,\n                [],\n                null,\n                true\n            );\n            if (is_array($score_tmp)) {\n                $score += $score_tmp[0];\n                $nb_score_lp += $score_tmp[1];\n            }\n            $nb_messages += Tracking::count_student_messages(\n                $row->user_id,\n                $course_code\n            );\n            $nb_assignments += Tracking::count_student_assignments(\n                $row->user_id,\n                $course_code\n            );\n            $last_login_date_tmp = Tracking::get_last_connection_date_on_the_course(\n                $row->user_id,\n                $courseInfo,\n                null,\n                false\n            );\n            if ($last_login_date_tmp != false &&\n                $last_login_date == false\n            ) { // TODO: To be cleaned\n                $last_login_date = $last_login_date_tmp;\n            } elseif ($last_login_date_tmp != false && $last_login_date != false) {\n                // TODO: Repeated previous condition. To be cleaned.\n                // Find the max and assign it to first_login_date\n                if (strtotime($last_login_date_tmp) > strtotime($last_login_date)) {\n                    $last_login_date = $last_login_date_tmp;\n                }\n            }\n\n            $exercise_results_tmp = self::exercises_results($row->user_id, $course_code);\n            $total_score_obtained += $exercise_results_tmp['score_obtained'];\n            $total_score_possible += $exercise_results_tmp['score_possible'];\n            $total_questions_answered += $exercise_results_tmp['questions_answered'];\n        }\n        if ($nb_progress_lp > 0) {\n            $avg_progress = round($progress / $nb_progress_lp, 2);\n        } else {\n            $avg_progress = 0;\n        }\n        if ($nb_score_lp > 0) {\n            $avg_score = round($score / $nb_score_lp, 2);\n        } else {\n            $avg_score = '-';\n        }\n        if ($last_login_date) {\n            $last_login_date = api_convert_and_format_date(\n                $last_login_date,\n                DATE_FORMAT_SHORT,\n                date_default_timezone_get()\n            );\n        } else {\n            $last_login_date = '-';\n        }\n        if ($total_score_possible > 0) {\n            $total_score_percentage = round($total_score_obtained / $total_score_possible * 100, 2);\n        } else {\n            $total_score_percentage = 0;\n        }\n        if ($total_score_percentage > 0) {\n            $total_score = $total_score_obtained.'/'.$total_score_possible.' ('.$total_score_percentage.' %)';\n        } else {\n            $total_score = '-';\n        }\n\n        $data = [\n            'course_code' => $course_code,\n            'id' => $courseId,\n            'image' => $courseInfo['course_image_large'],\n            'image_small' => $courseInfo['course_image'],\n            'title' => $courseInfo['title'],\n            'url' => $courseInfo['course_public_url'],\n            'category' => $courseInfo['categoryName'],\n            'time_spent' => api_time_to_hms($time_spent),\n            'avg_progress' => $avg_progress,\n            'avg_score' => $avg_score,\n            'number_message' => $nb_messages,\n            'number_assignments' => $nb_assignments,\n            'total_score' => $total_score,\n            'questions_answered' => $total_questions_answered,\n            'last_login' => $last_login_date,\n        ];\n\n        $tpl->assign('data', $data);\n        $layout = $tpl->get_template('my_space/partials/tracking_course_overview.tpl');\n        $content = $tpl->fetch($layout);\n\n        return $content;\n    }\n\n    /**\n     * This function exports the table that we see in display_tracking_course_overview().\n     */\n    public static function export_tracking_course_overview()\n    {\n        // database table definition\n        $tbl_course_rel_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        // the values of the sortable table\n        if ($_GET['tracking_course_overview_page_nr']) {\n            $from = $_GET['tracking_course_overview_page_nr'];\n        } else {\n            $from = 0;\n        }\n        if ($_GET['tracking_course_overview_column']) {\n            $orderby = $_GET['tracking_course_overview_column'];\n        } else {\n            $orderby = 0;\n        }\n\n        if ($_GET['tracking_course_overview_direction']) {\n            $direction = $_GET['tracking_course_overview_direction'];\n        } else {\n            $direction = 'ASC';\n        }\n\n        $course_data = self::get_course_data_tracking_overview(\n            $from,\n            1000,\n            $orderby,\n            $direction\n        );\n\n        $csv_content = [];\n\n        // the first line of the csv file with the column headers\n        $csv_row = [];\n        $csv_row[] = get_lang('Course');\n        $csv_row[] = get_lang('AvgTimeSpentInTheCourse');\n        $csv_row[] = get_lang('AvgStudentsProgress');\n        $csv_row[] = get_lang('AvgCourseScore');\n        $csv_row[] = get_lang('TotalNumberOfMessages');\n        $csv_row[] = get_lang('TotalNumberOfAssignments');\n        $csv_row[] = get_lang('TotalExercisesScoreObtained');\n        $csv_row[] = get_lang('TotalExercisesScorePossible');\n        $csv_row[] = get_lang('TotalExercisesAnswered');\n        $csv_row[] = get_lang('TotalExercisesScorePercentage');\n        $csv_row[] = get_lang('LatestLogin');\n        $csv_content[] = $csv_row;\n\n        // the other lines (the data)\n        foreach ($course_data as $key => $course) {\n            $course_code = $course[0];\n            $courseInfo = api_get_course_info($course_code);\n            $course_title = $courseInfo['title'];\n            $courseId = $courseInfo['real_id'];\n\n            $csv_row = [];\n            $csv_row[] = $course_title;\n\n            // getting all the courses of the session\n            $sql = \"SELECT *\n                    FROM $tbl_user AS u\n                    INNER JOIN $tbl_course_rel_user AS cu\n                    ON cu.user_id = u.user_id\n                    WHERE cu.c_id = '\".$courseId.\"'\";\n            $result = Database::query($sql);\n            $time_spent = 0;\n            $progress = 0;\n            $nb_progress_lp = 0;\n            $score = 0;\n            $nb_score_lp = 0;\n            $nb_messages = 0;\n            $nb_assignments = 0;\n            $last_login_date = false;\n            $total_score_obtained = 0;\n            $total_score_possible = 0;\n            $total_questions_answered = 0;\n            while ($row = Database::fetch_object($result)) {\n                // get time spent in the course and session\n                $time_spent += Tracking::get_time_spent_on_the_course(\n                    $row->user_id,\n                    $courseId\n                );\n                $progress_tmp = Tracking::get_avg_student_progress(\n                    $row->user_id,\n                    $course_code,\n                    [],\n                    null,\n                    true\n                );\n                $progress += $progress_tmp[0];\n                $nb_progress_lp += $progress_tmp[1];\n                $score_tmp = Tracking::get_avg_student_score(\n                    $row->user_id,\n                    $course_code,\n                    [],\n                    null,\n                    true\n                );\n                if (is_array($score_tmp)) {\n                    $score += $score_tmp[0];\n                    $nb_score_lp += $score_tmp[1];\n                }\n                $nb_messages += Tracking::count_student_messages(\n                    $row->user_id,\n                    $course_code\n                );\n                $nb_assignments += Tracking::count_student_assignments(\n                    $row->user_id,\n                    $course_code\n                );\n\n                $last_login_date_tmp = Tracking::get_last_connection_date_on_the_course(\n                    $row->user_id,\n                    $courseInfo,\n                    null,\n                    false\n                );\n                if ($last_login_date_tmp != false && $last_login_date == false) {\n                    // TODO: To be cleaned.\n                    $last_login_date = $last_login_date_tmp;\n                } elseif ($last_login_date_tmp != false && $last_login_date == false) {\n                    // TODO: Repeated previous condition. To be cleaned.\n                    // Find the max and assign it to first_login_date\n                    if (strtotime($last_login_date_tmp) > strtotime($last_login_date)) {\n                        $last_login_date = $last_login_date_tmp;\n                    }\n                }\n\n                $exercise_results_tmp = self::exercises_results($row->user_id, $course_code);\n                $total_score_obtained += $exercise_results_tmp['score_obtained'];\n                $total_score_possible += $exercise_results_tmp['score_possible'];\n                $total_questions_answered += $exercise_results_tmp['questions_answered'];\n            }\n            if ($nb_progress_lp > 0) {\n                $avg_progress = round($progress / $nb_progress_lp, 2);\n            } else {\n                $avg_progress = 0;\n            }\n            if ($nb_score_lp > 0) {\n                $avg_score = round($score / $nb_score_lp, 2);\n            } else {\n                $avg_score = '-';\n            }\n            if ($last_login_date) {\n                $last_login_date = api_convert_and_format_date(\n                    $last_login_date,\n                    DATE_FORMAT_SHORT,\n                    date_default_timezone_get()\n                );\n            } else {\n                $last_login_date = '-';\n            }\n            if ($total_score_possible > 0) {\n                $total_score_percentage = round($total_score_obtained / $total_score_possible * 100, 2);\n            } else {\n                $total_score_percentage = 0;\n            }\n            // time spent in the course\n            $csv_row[] = api_time_to_hms($time_spent);\n            // student progress in course\n            $csv_row[] = $avg_progress;\n            // student score\n            $csv_row[] = $avg_score;\n            // student messages\n            $csv_row[] = $nb_messages;\n            // student assignments\n            $csv_row[] = $nb_assignments;\n            // student exercises results (obtained score, maximum score, number of exercises answered, score percentage)\n            $csv_row[] = $total_score_obtained;\n            $csv_row[] = $total_score_possible;\n            $csv_row[] = $total_questions_answered;\n            $csv_row[] = $total_score_percentage;\n            // last connection\n            $csv_row[] = $last_login_date;\n            $csv_content[] = $csv_row;\n        }\n        Export::arrayToCsv($csv_content, 'reporting_course_overview');\n        exit;\n    }\n\n    /**\n     * Display a sortable table that contains an overview of all the reporting\n     * progress of all sessions and all courses the user is subscribed to.\n     *\n     * @author Guillaume Viguier <guillaume@viguierjust.com>\n     */\n    public static function display_tracking_session_overview()\n    {\n        $head = '<table style=\"width: 100%;border:0;padding:0;border-collapse:collapse;table-layout: fixed\">';\n        $head .= '<tr>';\n        $head .= '<th width=\"155px\" style=\"border-left:0;border-bottom:0\"><span>'.get_lang('Course').'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0\"><span>'.cut(get_lang('AvgTimeSpentInTheCourse'), 6, true).'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0\"><span>'.cut(get_lang('AvgStudentsProgress'), 6, true).'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0\"><span>'.cut(get_lang('AvgCourseScore'), 6, true).'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0\"><span>'.cut(get_lang('TotalNumberOfMessages'), 6, true).'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0\"><span>'.cut(get_lang('TotalNumberOfAssignments'), 6, true).'</span></th>';\n        $head .= '<th width=\"105px\" style=\"border-bottom:0\"><span>'.get_lang('TotalExercisesScoreObtained').'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0\"><span>'.cut(get_lang('TotalExercisesAnswered'), 6, true).'</span></th>';\n        $head .= '<th style=\"padding:0;border-bottom:0;border-right:0;\"><span>'.get_lang('LatestLogin').'</span></th>';\n        $head .= '</tr></table>';\n\n        $params = ['view' => 'admin', 'display' => 'sessionoverview'];\n        $table = new SortableTable(\n            'tracking_session_overview',\n            ['MySpace', 'get_total_number_sessions'],\n            ['MySpace', 'get_session_data_tracking_overview'],\n            1\n        );\n        $table->additional_parameters = $params;\n\n        $table->set_header(0, '', false, null, ['style' => 'display: none']);\n        $table->set_header(\n            1,\n            get_lang('Session'),\n            true,\n            ['style' => 'font-size:8pt'],\n            ['style' => 'font-size:8pt']\n        );\n        $table->set_header(\n            2,\n            $head,\n            false,\n            ['style' => 'width:90%;border:0;padding:0;font-size:7.5pt;'],\n            ['style' => 'width:90%;padding:0;font-size:7.5pt;']\n        );\n        $table->set_column_filter(2, ['MySpace', 'session_tracking_filter']);\n        $table->display();\n    }\n\n    /**\n     * Get the total number of sessions.\n     *\n     * @return int Total number of sessions\n     */\n    public static function get_total_number_sessions()\n    {\n        return SessionManager::count_sessions(api_get_current_access_url_id());\n    }\n\n    /**\n     * Get data for the sessions.\n     *\n     * @param int    $from        Inferior limit\n     * @param int    $numberItems Number of items to select\n     * @param string $column      Column to order on\n     * @param string $direction   Order direction\n     *\n     * @return array Results\n     */\n    public static function get_session_data_tracking_overview(\n        $from,\n        $numberItems,\n        $column,\n        $direction\n    ) {\n        $from = (int) $from;\n        $numberItems = (int) $numberItems;\n        $direction = Database::escape_string($direction);\n        $columnName = 'name';\n        if ($column === 1) {\n            $columnName = 'id';\n        }\n\n        $options = [\n            'order' => \" $columnName $direction\",\n            'limit' => \" $from,$numberItems\",\n        ];\n        $sessions = SessionManager::formatSessionsAdminForGrid($options);\n        $list = [];\n        foreach ($sessions as $session) {\n            $list[] = [\n                '0' => $session['id'],\n                'col0' => $session['id'],\n                '1' => strip_tags($session['name']),\n                'col1' => strip_tags($session['name']),\n            ];\n        }\n\n        return $list;\n    }\n\n    /**\n     * Fills in session reporting data.\n     *\n     * @param int   $session_id the id of the user\n     * @param array $url_params additonal url parameters\n     * @param array $row        the row information (the other columns)\n     *\n     * @return string html code\n     */\n    public static function session_tracking_filter($session_id, $url_params, $row)\n    {\n        $session_id = $row[0];\n        // the table header\n        $return = '<table class=\"table table-hover table-striped data_table\" style=\"width: 100%;border:0;padding:0;border-collapse:collapse;table-layout: fixed\">';\n\n        // database table definition\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        // getting all the courses of the user\n        $sql = \"SELECT * FROM $tbl_course AS c\n                INNER JOIN $tbl_session_rel_course AS sc\n                ON sc.c_id = c.id\n                WHERE sc.session_id = '\".$session_id.\"'\";\n        $result = Database::query($sql);\n        while ($row = Database::fetch_object($result)) {\n            $courseId = $row->c_id;\n            $courseInfo = api_get_course_info_by_id($courseId);\n            $return .= '<tr>';\n            // course code\n            $return .= '    <td width=\"157px\" >'.$row->title.'</td>';\n            // get the users in the course\n            $sql = \"SELECT u.user_id\n                    FROM $tbl_user AS u\n                    INNER JOIN $tbl_session_rel_course_rel_user AS scu\n                    ON u.user_id = scu.user_id\n                    WHERE scu.session_id = '\".$session_id.\"' AND scu.c_id = '\".$courseId.\"'\";\n            $result_users = Database::query($sql);\n            $time_spent = 0;\n            $progress = 0;\n            $nb_progress_lp = 0;\n            $score = 0;\n            $nb_score_lp = 0;\n            $nb_messages = 0;\n            $nb_assignments = 0;\n            $last_login_date = false;\n            $total_score_obtained = 0;\n            $total_score_possible = 0;\n            $total_questions_answered = 0;\n            while ($row_user = Database::fetch_object($result_users)) {\n                // get time spent in the course and session\n                $time_spent += Tracking::get_time_spent_on_the_course($row_user->user_id, $courseId, $session_id);\n                $progress_tmp = Tracking::get_avg_student_progress($row_user->user_id, $row->code, [], $session_id, true);\n                $progress += $progress_tmp[0];\n                $nb_progress_lp += $progress_tmp[1];\n                $score_tmp = Tracking::get_avg_student_score($row_user->user_id, $row->code, [], $session_id, true);\n                if (is_array($score_tmp)) {\n                    $score += $score_tmp[0];\n                    $nb_score_lp += $score_tmp[1];\n                }\n                $nb_messages += Tracking::count_student_messages($row_user->user_id, $row->code, $session_id);\n                $nb_assignments += Tracking::count_student_assignments($row_user->user_id, $row->code, $session_id);\n                $last_login_date_tmp = Tracking::get_last_connection_date_on_the_course(\n                    $row_user->user_id,\n                    $courseInfo,\n                    $session_id,\n                    false\n                );\n                if ($last_login_date_tmp != false && $last_login_date == false) {\n                    // TODO: To be cleaned.\n                    $last_login_date = $last_login_date_tmp;\n                } elseif ($last_login_date_tmp != false && $last_login_date != false) {\n                    // TODO: Repeated previous condition! To be cleaned.\n                    // Find the max and assign it to first_login_date\n                    if (strtotime($last_login_date_tmp) > strtotime($last_login_date)) {\n                        $last_login_date = $last_login_date_tmp;\n                    }\n                }\n\n                $exercise_results_tmp = self::exercises_results($row_user->user_id, $row->code, $session_id);\n                $total_score_obtained += $exercise_results_tmp['score_obtained'];\n                $total_score_possible += $exercise_results_tmp['score_possible'];\n                $total_questions_answered += $exercise_results_tmp['questions_answered'];\n            }\n            if ($nb_progress_lp > 0) {\n                $avg_progress = round($progress / $nb_progress_lp, 2);\n            } else {\n                $avg_progress = 0;\n            }\n            if ($nb_score_lp > 0) {\n                $avg_score = round($score / $nb_score_lp, 2);\n            } else {\n                $avg_score = '-';\n            }\n            if ($last_login_date) {\n                $last_login_date = api_convert_and_format_date(\n                    $last_login_date,\n                    DATE_FORMAT_SHORT,\n                    date_default_timezone_get()\n                );\n            } else {\n                $last_login_date = '-';\n            }\n            if ($total_score_possible > 0) {\n                $total_score_percentage = round($total_score_obtained / $total_score_possible * 100, 2);\n            } else {\n                $total_score_percentage = 0;\n            }\n            if ($total_score_percentage > 0) {\n                $total_score = $total_score_obtained.'/'.$total_score_possible.' ('.$total_score_percentage.' %)';\n            } else {\n                $total_score = '-';\n            }\n            // time spent in the course\n            $return .= '    <td><div>'.api_time_to_hms($time_spent).'</div></td>';\n            // student progress in course\n            $return .= '    <td><div>'.$avg_progress.'</div></td>';\n            // student score\n            $return .= '    <td><div>'.$avg_score.'</div></td>';\n            // student messages\n            $return .= '    <td><div>'.$nb_messages.'</div></td>';\n            // student assignments\n            $return .= '    <td><div>'.$nb_assignments.'</div></td>';\n            // student exercises results (obtained score, maximum score, number of exercises answered, score percentage)\n            $return .= '<td width=\"105px;\">'.$total_score.'</td>';\n            $return .= '<td>'.$total_questions_answered.'</td>';\n            // last connection\n            $return .= '    <td><div>'.$last_login_date.'</div></td>';\n            $return .= '<tr>';\n        }\n        $return .= '</table>';\n\n        return $return;\n    }\n\n    /**\n     * This function exports the table that we see in display_tracking_session_overview().\n     */\n    public static function export_tracking_session_overview()\n    {\n        // database table definition\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        // the values of the sortable table\n        $from = 0;\n        if ($_GET['tracking_session_overview_page_nr']) {\n            $from = $_GET['tracking_session_overview_page_nr'];\n        }\n\n        $orderby = 0;\n        if ($_GET['tracking_session_overview_column']) {\n            $orderby = $_GET['tracking_session_overview_column'];\n        }\n\n        $direction = 'ASC';\n        if ($_GET['tracking_session_overview_direction']) {\n            $direction = $_GET['tracking_session_overview_direction'];\n        }\n\n        $session_data = self::get_session_data_tracking_overview($from, 1000, $orderby, $direction);\n\n        $csv_content = [];\n\n        // the first line of the csv file with the column headers\n        $csv_row = [];\n        $csv_row[] = get_lang('Session');\n        $csv_row[] = get_lang('Course');\n        $csv_row[] = get_lang('AvgTimeSpentInTheCourse');\n        $csv_row[] = get_lang('AvgStudentsProgress');\n        $csv_row[] = get_lang('AvgCourseScore');\n        $csv_row[] = get_lang('TotalNumberOfMessages');\n        $csv_row[] = get_lang('TotalNumberOfAssignments');\n        $csv_row[] = get_lang('TotalExercisesScoreObtained');\n        $csv_row[] = get_lang('TotalExercisesScorePossible');\n        $csv_row[] = get_lang('TotalExercisesAnswered');\n        $csv_row[] = get_lang('TotalExercisesScorePercentage');\n        $csv_row[] = get_lang('LatestLogin');\n        $csv_content[] = $csv_row;\n\n        // the other lines (the data)\n        foreach ($session_data as $key => $session) {\n            $session_id = $session[0];\n            $session_title = $session[1];\n\n            // getting all the courses of the session\n            $sql = \"SELECT * FROM $tbl_course AS c\n                    INNER JOIN $tbl_session_rel_course AS sc\n                    ON sc.c_id = c.id\n                    WHERE sc.session_id = '\".$session_id.\"';\";\n            $result = Database::query($sql);\n            while ($row = Database::fetch_object($result)) {\n                $courseId = $row->c_id;\n                $courseInfo = api_get_course_info_by_id($courseId);\n                $csv_row = [];\n                $csv_row[] = $session_title;\n                $csv_row[] = $row->title;\n                // get the users in the course\n                $sql = \"SELECT scu.user_id\n                        FROM $tbl_user AS u\n                        INNER JOIN $tbl_session_rel_course_rel_user AS scu\n                        ON u.user_id = scu.user_id\n                        WHERE scu.session_id = '\".$session_id.\"' AND scu.c_id = '\".$courseId.\"'\";\n                $result_users = Database::query($sql);\n                $time_spent = 0;\n                $progress = 0;\n                $nb_progress_lp = 0;\n                $score = 0;\n                $nb_score_lp = 0;\n                $nb_messages = 0;\n                $nb_assignments = 0;\n                $last_login_date = false;\n                $total_score_obtained = 0;\n                $total_score_possible = 0;\n                $total_questions_answered = 0;\n                while ($row_user = Database::fetch_object($result_users)) {\n                    // get time spent in the course and session\n                    $time_spent += Tracking::get_time_spent_on_the_course($row_user->user_id, $courseId, $session_id);\n                    $progress_tmp = Tracking::get_avg_student_progress(\n                        $row_user->user_id,\n                        $row->code,\n                        [],\n                        $session_id,\n                        true\n                    );\n                    $progress += $progress_tmp[0];\n                    $nb_progress_lp += $progress_tmp[1];\n                    $score_tmp = Tracking::get_avg_student_score(\n                        $row_user->user_id,\n                        $row->code,\n                        [],\n                        $session_id,\n                        true\n                    );\n                    if (is_array($score_tmp)) {\n                        $score += $score_tmp[0];\n                        $nb_score_lp += $score_tmp[1];\n                    }\n                    $nb_messages += Tracking::count_student_messages(\n                        $row_user->user_id,\n                        $row->code,\n                        $session_id\n                    );\n\n                    $nb_assignments += Tracking::count_student_assignments(\n                        $row_user->user_id,\n                        $row->code,\n                        $session_id\n                    );\n\n                    $last_login_date_tmp = Tracking:: get_last_connection_date_on_the_course(\n                        $row_user->user_id,\n                        $courseInfo,\n                        $session_id,\n                        false\n                    );\n                    if ($last_login_date_tmp != false && $last_login_date == false) {\n                        // TODO: To be cleaned.\n                        $last_login_date = $last_login_date_tmp;\n                    } elseif ($last_login_date_tmp != false && $last_login_date == false) {\n                        // TODO: Repeated previous condition. To be cleaned.\n                        // Find the max and assign it to first_login_date\n                        if (strtotime($last_login_date_tmp) > strtotime($last_login_date)) {\n                            $last_login_date = $last_login_date_tmp;\n                        }\n                    }\n\n                    $exercise_results_tmp = self::exercises_results($row_user->user_id, $row->code, $session_id);\n                    $total_score_obtained += $exercise_results_tmp['score_obtained'];\n                    $total_score_possible += $exercise_results_tmp['score_possible'];\n                    $total_questions_answered += $exercise_results_tmp['questions_answered'];\n                }\n                if ($nb_progress_lp > 0) {\n                    $avg_progress = round($progress / $nb_progress_lp, 2);\n                } else {\n                    $avg_progress = 0;\n                }\n                if ($nb_score_lp > 0) {\n                    $avg_score = round($score / $nb_score_lp, 2);\n                } else {\n                    $avg_score = '-';\n                }\n                if ($last_login_date) {\n                    $last_login_date = api_convert_and_format_date(\n                        $last_login_date,\n                        DATE_FORMAT_SHORT,\n                        date_default_timezone_get()\n                    );\n                } else {\n                    $last_login_date = '-';\n                }\n                if ($total_score_possible > 0) {\n                    $total_score_percentage = round($total_score_obtained / $total_score_possible * 100, 2);\n                } else {\n                    $total_score_percentage = 0;\n                }\n                if ($total_score_percentage > 0) {\n                    $total_score = $total_score_obtained.'/'.$total_score_possible.' ('.$total_score_percentage.' %)';\n                } else {\n                    $total_score = '-';\n                }\n                // time spent in the course\n                $csv_row[] = api_time_to_hms($time_spent);\n                // student progress in course\n                $csv_row[] = $avg_progress;\n                // student score\n                $csv_row[] = $avg_score;\n                // student messages\n                $csv_row[] = $nb_messages;\n                // student assignments\n                $csv_row[] = $nb_assignments;\n                // student exercises results (obtained score, maximum score, number of exercises answered, score percentage)\n                $csv_row[] = $total_score_obtained;\n                $csv_row[] = $total_score_possible;\n                $csv_row[] = $total_questions_answered;\n                $csv_row[] = $total_score_percentage;\n                // last connection\n                $csv_row[] = $last_login_date;\n                $csv_content[] = $csv_row;\n            }\n        }\n        Export::arrayToCsv($csv_content, 'reporting_session_overview');\n        exit;\n    }\n\n    /**\n     * Get general information about the exercise performance of the user\n     * the total obtained score (all the score on all the questions)\n     * the maximum score that could be obtained\n     * the number of questions answered\n     * the success percentage.\n     *\n     * @param int    $user_id     the id of the user\n     * @param string $course_code the course code\n     * @param int    $session_id\n     *\n     * @return array\n     *\n     * @author Patrick Cool <patrick.cool@UGent.be>, Ghent University, Belgium\n     *\n     * @version Dokeos 1.8.6\n     *\n     * @since November 2008\n     */\n    public static function exercises_results($user_id, $course_code, $session_id = 0)\n    {\n        $user_id = (int) $user_id;\n        $courseId = api_get_course_int_id($course_code);\n        $table = Database::get_main_table(TABLE_STATISTIC_TRACK_E_EXERCISES);\n\n        $sql = \"SELECT exe_result, exe_weighting\n                FROM $table\n                WHERE\n                    c_id = $courseId AND\n                    exe_user_id = $user_id\";\n\n        $session_id = (int) $session_id;\n        if (!empty($session_id)) {\n            $sql .= \" AND session_id = '\".$session_id.\"' \";\n        }\n        $result = Database::query($sql);\n        $score_obtained = 0;\n        $score_possible = 0;\n        $questions_answered = 0;\n        while ($row = Database::fetch_array($result)) {\n            $score_obtained += $row['exe_result'];\n            $score_possible += $row['exe_weighting'];\n            $questions_answered++;\n        }\n\n        $percentage = null;\n        if ($score_possible != 0) {\n            $percentage = round(($score_obtained / $score_possible * 100), 2);\n        }\n\n        return [\n            'score_obtained' => $score_obtained,\n            'score_possible' => $score_possible,\n            'questions_answered' => $questions_answered,\n            'percentage' => $percentage,\n        ];\n    }\n\n    /**\n     * This function exports the table that we see in display_tracking_user_overview().\n     *\n     * @author Patrick Cool <patrick.cool@UGent.be>, Ghent University, Belgium\n     *\n     * @version Dokeos 1.8.6\n     *\n     * @since October 2008\n     */\n    public static function export_tracking_user_overview()\n    {\n        // database table definitions\n        $tbl_course_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        $is_western_name_order = api_is_western_name_order(PERSON_NAME_DATA_EXPORT);\n\n        // the values of the sortable table\n        if ($_GET['tracking_user_overview_page_nr']) {\n            $from = $_GET['tracking_user_overview_page_nr'];\n        } else {\n            $from = 0;\n        }\n        if ($_GET['tracking_user_overview_column']) {\n            $orderby = $_GET['tracking_user_overview_column'];\n        } else {\n            $orderby = 0;\n        }\n        if ($is_western_name_order != api_is_western_name_order() && ($orderby == 1 || $orderby == 2)) {\n            // Swapping the sorting column if name order for export is different than the common name order.\n            $orderby = 3 - $orderby;\n        }\n        if ($_GET['tracking_user_overview_direction']) {\n            $direction = $_GET['tracking_user_overview_direction'];\n        } else {\n            $direction = 'ASC';\n        }\n\n        $user_data = self::get_user_data_tracking_overview(\n            $from,\n            1000,\n            $orderby,\n            $direction\n        );\n\n        // the first line of the csv file with the column headers\n        $csv_row = [];\n        $csv_row[] = get_lang('OfficialCode');\n        if ($is_western_name_order) {\n            $csv_row[] = get_lang('FirstName');\n            $csv_row[] = get_lang('LastName');\n        } else {\n            $csv_row[] = get_lang('LastName');\n            $csv_row[] = get_lang('FirstName');\n        }\n        $csv_row[] = get_lang('LoginName');\n        $csv_row[] = get_lang('CourseCode');\n\n        // the additional user defined fields (only those that were selected to be exported)\n        $fields = UserManager::get_extra_fields(0, 50, 5, 'ASC');\n\n        $additionalExportFields = Session::read('additional_export_fields');\n\n        if (is_array($additionalExportFields)) {\n            foreach ($additionalExportFields as $key => $extra_field_export) {\n                $csv_row[] = $fields[$extra_field_export][3];\n                $field_names_to_be_exported[] = 'extra_'.$fields[$extra_field_export][1];\n            }\n        }\n        $csv_row[] = get_lang('AvgTimeSpentInTheCourse', '');\n        $csv_row[] = get_lang('AvgStudentsProgress', '');\n        $csv_row[] = get_lang('AvgCourseScore', '');\n        $csv_row[] = get_lang('AvgExercisesScore', '');\n        $csv_row[] = get_lang('AvgMessages', '');\n        $csv_row[] = get_lang('AvgAssignments', '');\n        $csv_row[] = get_lang('TotalExercisesScoreObtained', '');\n        $csv_row[] = get_lang('TotalExercisesScorePossible', '');\n        $csv_row[] = get_lang('TotalExercisesAnswered', '');\n        $csv_row[] = get_lang('TotalExercisesScorePercentage', '');\n        $csv_row[] = get_lang('FirstLogin', '');\n        $csv_row[] = get_lang('LatestLogin', '');\n        $csv_content[] = $csv_row;\n\n        // the other lines (the data)\n        foreach ($user_data as $key => $user) {\n            // getting all the courses of the user\n            $sql = \"SELECT * FROM $tbl_course_user\n                    WHERE user_id = '\".intval($user[4]).\"' AND relation_type<>\".COURSE_RELATION_TYPE_RRHH.\" \";\n            $result = Database::query($sql);\n            while ($row = Database::fetch_row($result)) {\n                $courseInfo = api_get_course_info($row['course_code']);\n                $courseId = $courseInfo['real_id'];\n\n                $csv_row = [];\n                // user official code\n                $csv_row[] = $user[0];\n                // user first|last name\n                $csv_row[] = $user[1];\n                // user last|first name\n                $csv_row[] = $user[2];\n                // user login name\n                $csv_row[] = $user[3];\n                // course code\n                $csv_row[] = $row[0];\n                // the additional defined user fields\n                $extra_fields = self::get_user_overview_export_extra_fields($user[4]);\n\n                if (is_array($field_names_to_be_exported)) {\n                    foreach ($field_names_to_be_exported as $key => $extra_field_export) {\n                        $csv_row[] = $extra_fields[$extra_field_export];\n                    }\n                }\n                // time spent in the course\n                $csv_row[] = api_time_to_hms(Tracking::get_time_spent_on_the_course($user[4], $courseId));\n                // student progress in course\n                $csv_row[] = round(Tracking::get_avg_student_progress($user[4], $row[0]), 2);\n                // student score\n                $csv_row[] = round(Tracking::get_avg_student_score($user[4], $row[0]), 2);\n                // student tes score\n                $csv_row[] = round(Tracking::get_avg_student_exercise_score($user[4], $row[0]), 2);\n                // student messages\n                $csv_row[] = Tracking::count_student_messages($user[4], $row[0]);\n                // student assignments\n                $csv_row[] = Tracking::count_student_assignments($user[4], $row[0]);\n                // student exercises results\n                $exercises_results = self::exercises_results($user[4], $row[0]);\n                $csv_row[] = $exercises_results['score_obtained'];\n                $csv_row[] = $exercises_results['score_possible'];\n                $csv_row[] = $exercises_results['questions_answered'];\n                $csv_row[] = $exercises_results['percentage'];\n                // first connection\n                $csv_row[] = Tracking::get_first_connection_date_on_the_course($user[4], $courseId);\n                // last connection\n                $csv_row[] = strip_tags(Tracking::get_last_connection_date_on_the_course($user[4], $courseInfo));\n\n                $csv_content[] = $csv_row;\n            }\n        }\n        Export::arrayToCsv($csv_content, 'reporting_user_overview');\n        exit;\n    }\n\n    /**\n     * Get data for courses list in sortable with pagination.\n     *\n     * @return array\n     */\n    public static function get_course_data($from, $number_of_items, $column, $direction)\n    {\n        global $courses, $csv_content, $charset, $session_id;\n\n        // definition database tables\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_course_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        $tbl_session_course_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n\n        $course_data = [];\n        $courses_code = array_keys($courses);\n\n        foreach ($courses_code as &$code) {\n            $code = \"'$code'\";\n        }\n\n        // get all courses with limit\n        $sql = \"SELECT course.code as col1, course.title as col2\n                FROM $tbl_course course\n                WHERE course.code IN (\".implode(',', $courses_code).\")\";\n\n        if (!in_array($direction, ['ASC', 'DESC'])) {\n            $direction = 'ASC';\n        }\n\n        $column = (int) $column;\n        $from = (int) $from;\n        $number_of_items = (int) $number_of_items;\n\n        $sql .= \" ORDER BY col$column $direction \";\n        $sql .= \" LIMIT $from,$number_of_items\";\n\n        $res = Database::query($sql);\n        while ($row_course = Database::fetch_row($res)) {\n            $course_code = $row_course[0];\n            $courseInfo = api_get_course_info($course_code);\n            $courseId = $courseInfo['real_id'];\n            $avg_assignments_in_course = $avg_messages_in_course = $nb_students_in_course = $avg_progress_in_course = $avg_score_in_course = $avg_time_spent_in_course = $avg_score_in_exercise = 0;\n\n            // students directly subscribed to the course\n            if (empty($session_id)) {\n                $sql = \"SELECT user_id\n                        FROM $tbl_course_user as course_rel_user\n                        WHERE\n                            course_rel_user.status='5' AND\n                            course_rel_user.c_id = '$courseId'\";\n            } else {\n                $sql = \"SELECT user_id FROM $tbl_session_course_user srcu\n                        WHERE\n                            c_id = '$courseId' AND\n                            session_id = '$session_id' AND\n                            status<>2\";\n            }\n            $rs = Database::query($sql);\n            $users = [];\n            while ($row = Database::fetch_array($rs)) {\n                $users[] = $row['user_id'];\n            }\n\n            if (count($users) > 0) {\n                $nb_students_in_course = count($users);\n                $avg_assignments_in_course = Tracking::count_student_assignments($users, $course_code, $session_id);\n                $avg_messages_in_course = Tracking::count_student_messages($users, $course_code, $session_id);\n                $avg_progress_in_course = Tracking::get_avg_student_progress($users, $course_code, [], $session_id);\n                $avg_score_in_course = Tracking::get_avg_student_score($users, $course_code, [], $session_id);\n                $avg_score_in_exercise = Tracking::get_avg_student_exercise_score($users, $course_code, 0, $session_id);\n                $avg_time_spent_in_course = Tracking::get_time_spent_on_the_course(\n                    $users,\n                    $courseInfo['real_id'],\n                    $session_id\n                );\n\n                $avg_progress_in_course = round($avg_progress_in_course / $nb_students_in_course, 2);\n                if (is_numeric($avg_score_in_course)) {\n                    $avg_score_in_course = round($avg_score_in_course / $nb_students_in_course, 2);\n                }\n                $avg_time_spent_in_course = api_time_to_hms($avg_time_spent_in_course / $nb_students_in_course);\n            } else {\n                $avg_time_spent_in_course = null;\n                $avg_progress_in_course = null;\n                $avg_score_in_course = null;\n                $avg_score_in_exercise = null;\n                $avg_messages_in_course = null;\n                $avg_assignments_in_course = null;\n            }\n            $table_row = [];\n            $table_row[] = $row_course[1];\n            $table_row[] = $nb_students_in_course;\n            $table_row[] = $avg_time_spent_in_course;\n            $table_row[] = is_null($avg_progress_in_course) ? '' : $avg_progress_in_course.'%';\n            $table_row[] = is_null($avg_score_in_course) ? '' : $avg_score_in_course.'%';\n            $table_row[] = is_null($avg_score_in_exercise) ? '' : $avg_score_in_exercise.'%';\n            $table_row[] = $avg_messages_in_course;\n            $table_row[] = $avg_assignments_in_course;\n\n            //set the \"from\" value to know if I access the Reporting by the chamilo tab or the course link\n            $table_row[] = '<center><a href=\"../../tracking/courseLog.php?cidReq='.$course_code.'&from=myspace&id_session='.$session_id.'\">\n                             '.Display::return_icon('2rightarrow.png', get_lang('Details')).'\n                             </a>\n                            </center>';\n\n            $scoreInCourse = null;\n            if (null !== $avg_score_in_course) {\n                if (is_numeric($avg_score_in_course)) {\n                    $scoreInCourse = $avg_score_in_course.'%';\n                } else {\n                    $scoreInCourse = $avg_score_in_course;\n                }\n            }\n\n            $csv_content[] = [\n                api_html_entity_decode($row_course[1], ENT_QUOTES, $charset),\n                $nb_students_in_course,\n                $avg_time_spent_in_course,\n                is_null($avg_progress_in_course) ? null : $avg_progress_in_course.'%',\n                $scoreInCourse,\n                is_null($avg_score_in_exercise) ? null : $avg_score_in_exercise.'%',\n                $avg_messages_in_course,\n                $avg_assignments_in_course,\n            ];\n            $course_data[] = $table_row;\n        }\n\n        return $course_data;\n    }\n\n    /**\n     * Get the number of users of the platform.\n     *\n     * @return int\n     */\n    public static function get_number_of_users_tracking_overview()\n    {\n        return UserManager::get_number_of_users(0, api_get_current_access_url_id());\n    }\n\n    /**\n     * Get all the data for the sortable table of the reporting progress of\n     * all users and all the courses the user is subscribed to.\n     *\n     * @param int    $from\n     * @param int    $numberItems\n     * @param int    $column\n     * @param string $direction\n     *\n     * @return array\n     */\n    public static function get_user_data_tracking_overview($from, $numberItems, $column, $direction)\n    {\n        $isWestern = api_is_western_name_order();\n\n        switch ($column) {\n            case '0':\n                $column = $isWestern ? 'firstname' : 'lastname';\n                break;\n        }\n\n        $order = [\n            \" `$column` $direction\",\n        ];\n        $userList = UserManager::get_user_list([], $order, $from, $numberItems);\n        $return = [];\n        foreach ($userList as $user) {\n            $return[] = [\n                '0' => $user['user_id'],\n                'col0' => $user['user_id'],\n            ];\n        }\n\n        return $return;\n    }\n\n    /**\n     * Get all information that the user with user_id = $user_data has\n     * entered in the additionally defined profile fields.\n     *\n     * @param int $user_id the id of the user\n     *\n     * @return array\n     *\n     * @author Patrick Cool <patrick.cool@UGent.be>, Ghent University, Belgium\n     *\n     * @version Dokeos 1.8.6\n     *\n     * @since November 2008\n     */\n    public static function get_user_overview_export_extra_fields($user_id)\n    {\n        // include the user manager\n        $data = UserManager::get_extra_user_data($user_id, true);\n\n        return $data;\n    }\n\n    /**\n     * Checks if a username exist in the DB otherwise it create a \"double\"\n     * i.e. if we look into for jmontoya but the user's name already exist we create the user jmontoya2\n     * the return array will be array(username=>'jmontoya', sufix='2').\n     *\n     * @param string firstname\n     * @param string lastname\n     * @param string username\n     *\n     * @return array with the username, the sufix\n     *\n     * @author Julio Montoya\n     */\n    public static function make_username($firstname, $lastname, $username, $language = null, $encoding = null)\n    {\n        // if username exist\n        if (!UserManager::is_username_available($username) || empty($username)) {\n            $i = 0;\n            while (1) {\n                if ($i == 0) {\n                    $sufix = '';\n                } else {\n                    $sufix = $i;\n                }\n                $desired_username = UserManager::create_username(\n                    $firstname,\n                    $lastname\n                );\n                if (UserManager::is_username_available($desired_username.$sufix)) {\n                    break;\n                } else {\n                    $i++;\n                }\n            }\n            $username_array = ['username' => $desired_username, 'sufix' => $sufix];\n\n            return $username_array;\n        } else {\n            $username_array = ['username' => $username, 'sufix' => ''];\n\n            return $username_array;\n        }\n    }\n\n    /**\n     * Checks if there are repeted users in a given array.\n     *\n     * @param array $usernames  list of the usernames in the uploaded file\n     * @param array $user_array $user_array['username'] and $user_array['sufix']\n     *                          where suffix is the number part in a login i.e -> jmontoya2\n     *\n     * @return array with the $usernames array and the $user_array array\n     *\n     * @author Julio Montoya\n     */\n    public static function check_user_in_array($usernames, $user_array)\n    {\n        $user_list = array_keys($usernames);\n        $username = $user_array['username'].$user_array['sufix'];\n\n        if (in_array($username, $user_list)) {\n            $user_array['sufix'] += $usernames[$username];\n            $usernames[$username]++;\n        } else {\n            $usernames[$username] = 1;\n        }\n        $result_array = [$usernames, $user_array];\n\n        return $result_array;\n    }\n\n    /**\n     * Checks whether a username has been already subscribed in a session.\n     *\n     * @param string $username    a given username\n     * @param array  $course_list the array with the course list id\n     * @param int    $id_session  the session id\n     *\n     * @return int 0 if the user is not subscribed otherwise it returns the user_id of the given username\n     *\n     * @author Julio Montoya\n     */\n    public static function user_available_in_session($username, $course_list, $id_session)\n    {\n        $table_user = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $id_session = (int) $id_session;\n        $username = Database::escape_string($username);\n        foreach ($course_list as $courseId) {\n            $courseId = (int) $courseId;\n            $sql = \" SELECT u.user_id FROM $tbl_session_rel_course_rel_user rel\n                     INNER JOIN $table_user u\n                     ON (rel.user_id = u.user_id)\n                     WHERE\n                        rel.session_id='$id_session' AND\n                        u.status='5' AND\n                        u.username ='$username' AND\n                        rel.c_id='$courseId'\";\n            $rs = Database::query($sql);\n            if (Database::num_rows($rs) > 0) {\n                return Database::result($rs, 0, 0);\n            }\n        }\n\n        return 0;\n    }\n\n    /**\n     * This function checks whether some users in the uploaded file\n     * repeated and creates unique usernames if necesary.\n     * A case: Within the file there is an user repeted twice (Julio Montoya / Julio Montoya)\n     * and the username fields are empty.\n     * Then, this function would create unique usernames based on the first and the last name.\n     * Two users wiould be created - jmontoya and jmontoya2.\n     * Of course, if in the database there is a user with the name jmontoya,\n     * the newly created two users registered would be jmontoya2 and jmontoya3.\n     *\n     * @param $users list of users\n     *\n     * @return array\n     *\n     * @author Julio Montoya Armas\n     */\n    public static function check_all_usernames($users, $course_list, $id_session)\n    {\n        $table_user = Database::get_main_table(TABLE_MAIN_USER);\n        $usernames = [];\n        $new_users = [];\n        foreach ($users as $index => $user) {\n            $desired_username = [];\n            if (empty($user['UserName'])) {\n                $desired_username = self::make_username($user['FirstName'], $user['LastName'], '');\n                $pre_username = $desired_username['username'].$desired_username['sufix'];\n                $user['UserName'] = $pre_username;\n                $user['create'] = '1';\n            } else {\n                if (UserManager::is_username_available($user['UserName'])) {\n                    $desired_username = self::make_username($user['FirstName'], $user['LastName'], $user['UserName']);\n                    $user['UserName'] = $desired_username['username'].$desired_username['sufix'];\n                    $user['create'] = '1';\n                } else {\n                    $is_session_avail = self::user_available_in_session($user['UserName'], $course_list, $id_session);\n                    if (0 == $is_session_avail) {\n                        $user_name = $user['UserName'];\n                        $sql_select = \"SELECT user_id FROM $table_user WHERE username ='$user_name' \";\n                        $rs = Database::query($sql_select);\n                        $user['create'] = Database::result($rs, 0, 0);\n                    } else {\n                        $user['create'] = $is_session_avail;\n                    }\n                }\n            }\n            // Usernames is the current list of users in the file.\n            $result_array = self::check_user_in_array($usernames, $desired_username);\n            $usernames = $result_array[0];\n            $desired_username = $result_array[1];\n            $user['UserName'] = $desired_username['username'].$desired_username['sufix'];\n            $new_users[] = $user;\n        }\n\n        return $new_users;\n    }\n\n    /**\n     * This functions checks whether there are users that are already\n     * registered in the DB by different creator than the current coach.\n     *\n     * @param array $users\n     *\n     * @return array\n     *\n     * @author Julio Montoya Armas\n     */\n    public static function get_user_creator($users)\n    {\n        $errors = [];\n        $table_user = Database::get_main_table(TABLE_MAIN_USER);\n        foreach ($users as $index => $user) {\n            $username = Database::escape_string($user['UserName']);\n            $sql = \"SELECT creator_id FROM $table_user WHERE username='$username' \";\n\n            $rs = Database::query($sql);\n            $creator_id = Database::result($rs, 0, 0);\n            // check if we are the creators or not\n            if ($creator_id != '') {\n                if ($creator_id != api_get_user_id()) {\n                    $user['error'] = get_lang('UserAlreadyRegisteredByOtherCreator');\n                    $errors[] = $user;\n                }\n            }\n        }\n\n        return $errors;\n    }\n\n    /**\n     * Validates imported data.\n     *\n     * @param array $users list of users\n     */\n    public static function validate_data($users, $id_session = null)\n    {\n        $errors = [];\n        $new_users = [];\n        foreach ($users as $index => $user) {\n            // 1. Check whether mandatory fields are set.\n            $mandatory_fields = ['LastName', 'FirstName'];\n            if (api_get_setting('registration', 'email') == 'true') {\n                $mandatory_fields[] = 'Email';\n            }\n\n            foreach ($mandatory_fields as $key => $field) {\n                if (!isset($user[$field]) || strlen($user[$field]) == 0) {\n                    $user['error'] = get_lang($field.'Mandatory');\n                    $errors[] = $user;\n                }\n            }\n            // 2. Check whether the username is too long.\n            if (UserManager::is_username_too_long($user['UserName'])) {\n                $user['error'] = get_lang('UserNameTooLong');\n                $errors[] = $user;\n            }\n\n            $user['UserName'] = trim($user['UserName']);\n\n            if (empty($user['UserName'])) {\n                $user['UserName'] = UserManager::create_username($user['FirstName'], $user['LastName']);\n            }\n            $new_users[] = $user;\n        }\n        $results = ['errors' => $errors, 'users' => $new_users];\n\n        return $results;\n    }\n\n    /**\n     * Adds missing user-information (which isn't required, like password, etc).\n     */\n    public static function complete_missing_data($user)\n    {\n        // 1. Generate a password if it is necessary.\n        if (!isset($user['Password']) || strlen($user['Password']) == 0) {\n            $user['Password'] = api_generate_password();\n        }\n\n        return $user;\n    }\n\n    /**\n     * Saves imported data.\n     */\n    public static function save_data($users, $course_list, $id_session)\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n\n        $id_session = (int) $id_session;\n        $sendMail = $_POST['sendMail'] ? 1 : 0;\n\n        // Adding users to the platform.\n        $new_users = [];\n        foreach ($users as $index => $user) {\n            $user = self::complete_missing_data($user);\n            // coach only will registered users\n            $default_status = STUDENT;\n            if ($user['create'] == COURSEMANAGER) {\n                $user['id'] = UserManager:: create_user(\n                    $user['FirstName'],\n                    $user['LastName'],\n                    $default_status,\n                    $user['Email'],\n                    $user['UserName'],\n                    $user['Password'],\n                    $user['OfficialCode'],\n                    api_get_setting('PlatformLanguage'),\n                    $user['PhoneNumber'],\n                    ''\n                );\n                $user['added_at_platform'] = 1;\n            } else {\n                $user['id'] = $user['create'];\n                $user['added_at_platform'] = 0;\n            }\n            $new_users[] = $user;\n        }\n        // Update user list.\n        $users = $new_users;\n\n        // Inserting users.\n        foreach ($course_list as $enreg_course) {\n            $nbr_users = 0;\n            $new_users = [];\n            $enreg_course = Database::escape_string($enreg_course);\n            foreach ($users as $index => $user) {\n                $userid = (int) $user['id'];\n                $sql = \"INSERT IGNORE INTO $tbl_session_rel_course_rel_user(session_id, c_id, user_id)\n                        VALUES('$id_session','$enreg_course','$userid')\";\n                $result = Database::query($sql);\n                if (Database::affected_rows($result)) {\n                    $nbr_users++;\n                }\n                $new_users[] = $user;\n            }\n\n            //update the nbr_users field\n            $sql_select = \"SELECT COUNT(user_id) as nbUsers FROM $tbl_session_rel_course_rel_user\n                           WHERE session_id='$id_session' AND c_id='$enreg_course'\";\n            $rs = Database::query($sql_select);\n            [$nbr_users] = Database::fetch_array($rs);\n            $sql_update = \"UPDATE $tbl_session_rel_course SET nbr_users=$nbr_users\n                           WHERE session_id='$id_session' AND c_id='$enreg_course'\";\n            Database::query($sql_update);\n\n            $sql_update = \"UPDATE $tbl_session SET nbr_users= '$nbr_users' WHERE id='$id_session'\";\n            Database::query($sql_update);\n        }\n\n        $new_users = [];\n        foreach ($users as $index => $user) {\n            $userid = $user['id'];\n            $sql_insert = \"INSERT IGNORE INTO $tbl_session_rel_user(session_id, user_id, registered_at)\n                           VALUES ('$id_session','$userid', '\".api_get_utc_datetime().\"')\";\n            Database::query($sql_insert);\n            $user['added_at_session'] = 1;\n            $new_users[] = $user;\n        }\n\n        $users = $new_users;\n        $registered_users = get_lang('FileImported').'<br /> Import file results : <br />';\n        // Sending emails.\n        $addedto = '';\n        if ($sendMail) {\n            foreach ($users as $index => $user) {\n                $emailsubject = '['.api_get_setting('siteName').'] '.get_lang('YourReg').' '.api_get_setting('siteName');\n                $emailbody = get_lang('Dear').' '.\n                    api_get_person_name($user['FirstName'], $user['LastName']).\",\\n\\n\".\n                    get_lang('YouAreReg').\" \".api_get_setting('siteName').\" \".get_lang('WithTheFollowingSettings').\"\\n\\n\".\n                    get_lang('Username').\" : $user[UserName]\\n\".\n                    get_lang('Pass').\" : $user[Password]\\n\\n\".\n                    get_lang('Address').\" \".api_get_setting('siteName').\" \".get_lang('Is').\" : \".api_get_path(WEB_PATH).\" \\n\\n\".\n                    get_lang('Problem').\"\\n\\n\".\n                    get_lang('SignatureFormula').\",\\n\\n\".\n                    api_get_person_name(api_get_setting('administratorName'), api_get_setting('administratorSurname')).\"\\n\".\n                    get_lang('Manager').\" \".api_get_setting('siteName').\"\\nT. \".\n                    api_get_setting('administratorTelephone').\"\\n\".get_lang('Email').\" : \".api_get_setting('emailAdministrator');\n\n                MessageManager::send_message_simple($user['id'], $emailsubject, $emailbody);\n\n                $userInfo = api_get_user_info($user['id']);\n\n                if (($user['added_at_platform'] == 1 && $user['added_at_session'] == 1) || $user['added_at_session'] == 1) {\n                    if ($user['added_at_platform'] == 1) {\n                        $addedto = get_lang('UserCreatedPlatform');\n                    } else {\n                        $addedto = '          ';\n                    }\n\n                    if ($user['added_at_session'] == 1) {\n                        $addedto .= get_lang('UserInSession');\n                    }\n                } else {\n                    $addedto = get_lang('UserNotAdded');\n                }\n\n                $registered_users .= UserManager::getUserProfileLink($userInfo).' - '.$addedto.'<br />';\n            }\n        } else {\n            foreach ($users as $index => $user) {\n                $userInfo = api_get_user_info($user['id']);\n                if (($user['added_at_platform'] == 1 && $user['added_at_session'] == 1) || $user['added_at_session'] == 1) {\n                    if ($user['added_at_platform'] == 1) {\n                        $addedto = get_lang('UserCreatedPlatform');\n                    } else {\n                        $addedto = '          ';\n                    }\n\n                    if ($user['added_at_session'] == 1) {\n                        $addedto .= ' '.get_lang('UserInSession');\n                    }\n                } else {\n                    $addedto = get_lang('UserNotAdded');\n                }\n                $registered_users .= \"<a href=\\\"../user/userInfo.php?uInfo=\".$user['id'].\"\\\">\".\n                    Security::remove_XSS($userInfo['complete_user_name']).\"</a> - \".$addedto.'<br />';\n            }\n        }\n        Display::addFlash(Display::return_message($registered_users, 'normal', false));\n        header('Location: course.php?id_session='.$id_session);\n        exit;\n    }\n\n    /**\n     * Reads CSV-file.\n     *\n     * @param string $file Path to the CSV-file\n     *\n     * @return array All userinformation read from the file\n     */\n    public function parse_csv_data($file)\n    {\n        $users = Import::csvToArray($file);\n        foreach ($users as $index => $user) {\n            if (isset($user['Courses'])) {\n                $user['Courses'] = explode('|', trim($user['Courses']));\n            }\n            $users[$index] = $user;\n        }\n\n        return $users;\n    }\n\n    /**\n     * Reads XML-file.\n     *\n     * @param string $file Path to the XML-file\n     *\n     * @return array All userinformation read from the file\n     */\n    public static function parse_xml_data($file)\n    {\n        $crawler = Import::xml($file);\n        $crawler = $crawler->filter('Contacts > Contact ');\n        $array = [];\n        foreach ($crawler as $domElement) {\n            $row = [];\n            foreach ($domElement->childNodes as $node) {\n                if ($node->nodeName != '#text') {\n                    $row[$node->nodeName] = $node->nodeValue;\n                }\n            }\n            if (!empty($row)) {\n                $array[] = $row;\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * @param int $courseId\n     * @param int $sessionId\n     * @param int $studentId\n     */\n    public static function displayTrackingAccessOverView(\n        $courseId,\n        $sessionId,\n        $studentId,\n        $perPage = 20,\n        $dates = null\n    ) {\n        $courseId = (int) $courseId;\n        $sessionId = (int) $sessionId;\n        $studentId = (int) $studentId;\n\n        $courseList = [];\n        $sessionList = [];\n        $studentList = [];\n\n        if (!empty($courseId)) {\n            $course = api_get_course_entity($courseId);\n            if ($course) {\n                $courseList[$course->getId()] = $course->getTitle();\n            }\n        }\n\n        if (!empty($sessionId)) {\n            $session = api_get_session_entity($sessionId);\n            if ($session) {\n                $sessionList[$session->getId()] = $session->getName();\n            }\n        }\n\n        if (!empty($studentId)) {\n            $student = api_get_user_entity($studentId);\n            if ($student) {\n                $studentList[$student->getId()] = UserManager::formatUserFullName($student);\n            }\n        }\n\n        $form = new FormValidator('access_overview', 'GET');\n        $form->addElement(\n            'select_ajax',\n            'course_id',\n            get_lang('SearchCourse'),\n            $courseList,\n            [\n                'url' => api_get_path(WEB_AJAX_PATH).'course.ajax.php?'.http_build_query(\n                    [\n                        'a' => 'search_course_by_session_all',\n                        'session_id' => $sessionId,\n                        'course_id' => $courseId,\n                    ]\n                ),\n            ]\n        );\n\n        $form->addElement(\n            'select_ajax',\n            'session_id',\n            get_lang('SearchSession'),\n            $sessionList,\n            [\n                'url_function' => \"\n                    function () {\n                        var params = $.param({\n                            a: 'search_session_by_course',\n                            course_id: $('#access_overview_course_id').val() || 0\n                        });\n\n                        return '\".api_get_path(WEB_AJAX_PATH).\"session.ajax.php?' + params;\n                    }\n                \",\n            ]\n        );\n\n        $form->addSelect(\n            'profile',\n            get_lang('Profile'),\n            [\n                '' => get_lang('Select'),\n                STUDENT => get_lang('Student'),\n                COURSEMANAGER => get_lang('CourseManager'),\n                DRH => get_lang('Drh'),\n            ],\n            ['id' => 'profile']\n        );\n\n        $form->addElement(\n            'select_ajax',\n            'student_id',\n            get_lang('SearchUsers'),\n            $studentList,\n            [\n                'placeholder' => get_lang('All'),\n                'url_function' => \"\n                    function () {\n                        var params = $.param({\n                            a: 'search_user_by_course',\n                            session_id: $('#access_overview_session_id').val(),\n                            course_id: $('#access_overview_course_id').val()\n                        });\n\n                        return '\".api_get_path(WEB_AJAX_PATH).\"course.ajax.php?' + params;\n                    }\n                \",\n            ]\n        );\n\n        $form->addDateRangePicker(\n            'date',\n            get_lang('DateRange'),\n            true,\n            [\n                'id' => 'date_range',\n                'format' => 'YYYY-MM-DD HH:mm',\n                'timePicker' => 'true',\n                //'validate_format' => 'Y-m-d',\n            ]\n        );\n\n        $form->addHidden('display', 'accessoverview');\n        $form->addRule('course_id', get_lang('Required'), 'required');\n        $form->addRule('profile', get_lang('Required'), 'required');\n        $form->addButton('submit', get_lang('Generate'), 'gear', 'primary');\n\n        $table = null;\n        if (!empty($dates)) {\n            //if ($form->validate()) {\n            $table = new SortableTable(\n                'tracking_access_overview',\n                ['MySpace', 'getNumberOfTrackAccessOverview'],\n                ['MySpace', 'getUserDataAccessTrackingOverview'],\n                0,\n                $perPage\n            );\n            $table->set_additional_parameters(\n                [\n                    'course_id' => $courseId,\n                    'session_id' => $sessionId,\n                    'student_id' => $studentId,\n                    'date' => $dates,\n                    'tracking_access_overview_per_page' => $perPage,\n                    'display' => 'accessoverview',\n                ]\n            );\n            $table->set_header(0, get_lang('LoginDate'), true);\n            $table->set_header(1, get_lang('Username'), true);\n            if (api_is_western_name_order()) {\n                $table->set_header(2, get_lang('FirstName'), true);\n                $table->set_header(3, get_lang('LastName'), true);\n            } else {\n                $table->set_header(2, get_lang('LastName'), true);\n                $table->set_header(3, get_lang('FirstName'), true);\n            }\n            //$table->set_header(4, get_lang('Clicks'), false);\n            $table->set_header(4, get_lang('IP'), false);\n            $table->set_header(5, get_lang('TimeLoggedIn'), false);\n        }\n\n        $template = new Template(\n            null,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false\n        );\n        $template->assign('form', $form->returnForm());\n        $template->assign('table', $table ? $table->return_table() : null);\n\n        echo $template->fetch(\n            $template->get_template('my_space/accessoverview.tpl')\n        );\n    }\n\n    /**\n     * @return int\n     */\n    public static function getNumberOfTrackAccessOverview()\n    {\n        $user = Database::get_main_table(TABLE_MAIN_USER);\n        $course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $trackCourseAccess = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n\n        $sql = \"SELECT COUNT(course_access_id) count\n                FROM $trackCourseAccess a\n                INNER JOIN $user u\n                ON a.user_id = u.id\n                INNER JOIN $course c\n                ON a.c_id = c.id\n                \";\n        $sql = self::getDataAccessTrackingFilters($sql);\n\n        $result = Database::query($sql);\n        $row = Database::fetch_assoc($result);\n\n        if ($row) {\n            return $row['count'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param $from\n     * @param $numberItems\n     * @param $column\n     * @param $orderDirection\n     *\n     * @return array\n     */\n    public static function getUserDataAccessTrackingOverview(\n        $from,\n        $numberItems,\n        $column,\n        $orderDirection\n    ) {\n        $from = (int) $from;\n        $numberItems = (int) $numberItems;\n        $column = (int) $column;\n        $orderDirection = Database::escape_string($orderDirection);\n        $orderDirection = !in_array(strtolower(trim($orderDirection)), ['asc', 'desc']) ? 'asc' : $orderDirection;\n\n        $user = Database::get_main_table(TABLE_MAIN_USER);\n        $course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $track_e_login = Database::get_main_table(TABLE_STATISTIC_TRACK_E_LOGIN);\n        $trackCourseAccess = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n\n        global $export_csv;\n        $is_western_name_order = api_is_western_name_order();\n        if ($export_csv) {\n            $is_western_name_order = api_is_western_name_order(PERSON_NAME_DATA_EXPORT);\n        }\n\n        //TODO add course name\n        $sql = \"SELECT\n                a.login_course_date as col0,\n                u.username as col1,\n                \".(\n                    $is_western_name_order ? \"\n                        u.firstname AS col2,\n                        u.lastname AS col3,\n                    \" : \"\n                        u.lastname AS col2,\n                        u.firstname AS col3,\n                \"\n        ).\"\n                a.login_course_date,\n                a.logout_course_date,\n                c.title,\n                c.code,\n                u.id as user_id,\n                user_ip\n            FROM $trackCourseAccess a\n            INNER JOIN $user u\n            ON a.user_id = u.id\n            INNER JOIN $course c\n            ON a.c_id = c.id\n            WHERE 1=1 \";\n\n        $sql = self::getDataAccessTrackingFilters($sql);\n\n        $sql .= \" ORDER BY col$column $orderDirection \";\n        $sql .= \" LIMIT $from, $numberItems\";\n\n        $result = Database::query($sql);\n\n        $data = [];\n        while ($user = Database::fetch_assoc($result)) {\n            $data[] = $user;\n        }\n\n        $return = [];\n        //TODO: Dont use numeric index\n        foreach ($data as $key => $info) {\n            $return[] = [\n                api_get_local_time($info['login_course_date']),\n                $info['col1'],\n                $info['col2'],\n                $info['col3'],\n                $info['user_ip'],\n                gmdate('H:i:s', strtotime($info['logout_course_date']) - strtotime($info['login_course_date'])),\n            ];\n        }\n\n        return $return;\n    }\n\n    /**\n     * Gets the connections to a course as an array of login and logout time.\n     *\n     * @param int    $user_id\n     * @param array  $course_info\n     * @param int    $sessionId\n     * @param string $start_date\n     * @param string $end_date\n     * @param bool   $addUserIp\n     *\n     * @author  Jorge Frisancho Jibaja\n     * @author  Julio Montoya <gugli100@gmail.com> fixing the function\n     *\n     * @version OCT-22- 2010\n     *\n     * @return array\n     */\n    public static function get_connections_to_course_by_date(\n        $user_id,\n        $course_info,\n        $sessionId,\n        $start_date,\n        $end_date,\n        $addUserIp = false\n    ) {\n        $table = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n        $user_id = (int) $user_id;\n        $connections = [];\n        if (!empty($course_info)) {\n            $courseId = (int) $course_info['real_id'];\n            $end_date = self::add_day_to($end_date);\n\n            $start_date = Database::escape_string($start_date);\n            $end_date = Database::escape_string($end_date);\n            $sessionCondition = api_get_session_condition($sessionId);\n            $sql = \"SELECT\n                        login_course_date,\n                        logout_course_date,\n                        TIMESTAMPDIFF(SECOND, login_course_date, logout_course_date) duration,\n                        user_ip\n                    FROM $table\n                    WHERE\n                        user_id = $user_id AND\n                        c_id = $courseId AND\n                        login_course_date BETWEEN '$start_date' AND '$end_date' AND\n                        logout_course_date BETWEEN '$start_date' AND '$end_date'\n                        $sessionCondition\n                    ORDER BY login_course_date ASC\";\n            $rs = Database::query($sql);\n\n            while ($row = Database::fetch_array($rs)) {\n                $item = [\n                    'login' => $row['login_course_date'],\n                    'logout' => $row['logout_course_date'],\n                    'duration' => $row['duration'],\n                ];\n                if ($addUserIp) {\n                    $item['user_ip'] = $row['user_ip'];\n                }\n                $connections[] = $item;\n            }\n        }\n\n        return $connections;\n    }\n\n    /**\n     * @param int   $user_id\n     * @param array $course_info\n     * @param int   $sessionId\n     * @param null  $start_date\n     * @param null  $end_date\n     *\n     * @return array\n     */\n    public static function getStats($user_id, $course_info, $sessionId, $start_date = null, $end_date = null)\n    {\n        $table = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n        $result = [];\n        if (!empty($course_info)) {\n            $stringStartDate = '';\n            $stringEndDate = '';\n            if ($start_date != null && $end_date != null) {\n                $end_date = self::add_day_to($end_date);\n\n                $start_date = Database::escape_string($start_date);\n                $end_date = Database::escape_string($end_date);\n\n                $stringStartDate = \"AND login_course_date BETWEEN '$start_date' AND '$end_date'\";\n                $stringEndDate = \"AND logout_course_date BETWEEN '$start_date' AND '$end_date'\";\n            }\n            $user_id = (int) $user_id;\n            $courseId = (int) $course_info['real_id'];\n            $sessionCondition = api_get_session_condition($sessionId);\n            $sql = \"SELECT\n                SEC_TO_TIME(AVG(time_to_sec(timediff(logout_course_date,login_course_date)))) as avrg,\n                SEC_TO_TIME(SUM(time_to_sec(timediff(logout_course_date,login_course_date)))) as total,\n                count(user_id) as times\n                FROM $table\n                WHERE\n                    user_id = $user_id AND\n                    c_id = $courseId $stringStartDate $stringEndDate\n                    $sessionCondition\n                ORDER BY login_course_date ASC\";\n\n            $rs = Database::query($sql);\n            if ($row = Database::fetch_array($rs)) {\n                $foo_avg = $row['avrg'];\n                $foo_total = $row['total'];\n                $foo_times = $row['times'];\n                $result = [\n                    'avg' => $foo_avg,\n                    'total' => $foo_total,\n                    'times' => $foo_times,\n                ];\n            }\n        }\n\n        return $result;\n    }\n\n    public static function add_day_to($end_date)\n    {\n        $foo_date = strtotime($end_date);\n        $foo_date = strtotime(' +1 day', $foo_date);\n        $foo_date = date('Y-m-d', $foo_date);\n\n        return $foo_date;\n    }\n\n    /**\n     * This function draw the graphic to be displayed on the user view as an image.\n     *\n     * @param array  $sql_result\n     * @param string $start_date\n     * @param string $end_date\n     * @param string $type\n     *\n     * @author Jorge Frisancho Jibaja\n     *\n     * @version OCT-22- 2010\n     *\n     * @return string\n     */\n    public static function grapher($sql_result, $start_date, $end_date, $type = '')\n    {\n        if (empty($start_date)) {\n            $start_date = '';\n        }\n        if (empty($end_date)) {\n            $end_date = '';\n        }\n        if ('' == $type) {\n            $type = 'day';\n        }\n        $main_year = $main_month_year = $main_day = [];\n\n        $period = new DatePeriod(\n            new DateTime($start_date),\n            new DateInterval('P1D'),\n            new DateTime($end_date)\n        );\n\n        foreach ($period as $date) {\n            $main_day[$date->format('d-m-Y')] = 0;\n        }\n\n        $period = new DatePeriod(\n            new DateTime($start_date),\n            new DateInterval('P1M'),\n            new DateTime($end_date)\n        );\n\n        foreach ($period as $date) {\n            $main_month_year[$date->format('m-Y')] = 0;\n        }\n\n        $i = 0;\n        if (is_array($sql_result) && count($sql_result) > 0) {\n            foreach ($sql_result as $key => $data) {\n                $login = api_strtotime($data['login']);\n                $logout = api_strtotime($data['logout']);\n                //creating the main array\n                if (isset($main_month_year[date('m-Y', $login)])) {\n                    $main_month_year[date('m-Y', $login)] += (float) ($logout - $login) / 60;\n                }\n                if (isset($main_day[date('d-m-Y', $login)])) {\n                    $main_day[date('d-m-Y', $login)] += (float) ($logout - $login) / 60;\n                }\n                if ($i > 500) {\n                    break;\n                }\n                $i++;\n            }\n            switch ($type) {\n                case 'day':\n                    $main_date = $main_day;\n                    break;\n                case 'month':\n                    $main_date = $main_month_year;\n                    break;\n                case 'year':\n                    $main_date = $main_year;\n                    break;\n            }\n\n            $labels = array_keys($main_date);\n            if (1 == count($main_date)) {\n                $labels = $labels[0];\n                $main_date = $main_date[$labels];\n            }\n\n            /* Create and populate the pData object */\n            $myData = new pData();\n            $myData->addPoints($main_date, 'Serie1');\n            if (count($main_date) != 1) {\n                $myData->addPoints($labels, 'Labels');\n                $myData->setSerieDescription('Labels', 'Months');\n                $myData->setAbscissa('Labels');\n            }\n            $myData->setSerieWeight('Serie1', 1);\n            $myData->setSerieDescription('Serie1', get_lang('MyResults'));\n            $myData->setAxisName(0, get_lang('Minutes'));\n            $myData->loadPalette(api_get_path(SYS_CODE_PATH).'palettes/pchart/default.color', true);\n\n            // Cache definition\n            $cachePath = api_get_path(SYS_ARCHIVE_PATH);\n            $myCache = new pCache(['CacheFolder' => substr($cachePath, 0, strlen($cachePath) - 1)]);\n            $chartHash = $myCache->getHash($myData);\n\n            if ($myCache->isInCache($chartHash)) {\n                //if we already created the img\n                $imgPath = api_get_path(SYS_ARCHIVE_PATH).$chartHash;\n                $myCache->saveFromCache($chartHash, $imgPath);\n                $imgPath = api_get_path(WEB_ARCHIVE_PATH).$chartHash;\n            } else {\n                /* Define width, height and angle */\n                $mainWidth = 760;\n                $mainHeight = 230;\n                $angle = 50;\n\n                /* Create the pChart object */\n                $myPicture = new pImage($mainWidth, $mainHeight, $myData);\n\n                /* Turn of Antialiasing */\n                $myPicture->Antialias = false;\n                /* Draw the background */\n                $settings = [\"R\" => 255, \"G\" => 255, \"B\" => 255];\n                $myPicture->drawFilledRectangle(0, 0, $mainWidth, $mainHeight, $settings);\n\n                /* Add a border to the picture */\n                $myPicture->drawRectangle(\n                    0,\n                    0,\n                    $mainWidth - 1,\n                    $mainHeight - 1,\n                    [\"R\" => 0, \"G\" => 0, \"B\" => 0]\n                );\n\n                /* Set the default font */\n                $myPicture->setFontProperties(\n                    [\n                        \"FontName\" => api_get_path(SYS_FONTS_PATH).'opensans/OpenSans-Regular.ttf',\n                        \"FontSize\" => 10, ]\n                );\n                /* Write the chart title */\n                $myPicture->drawText(\n                    $mainWidth / 2,\n                    30,\n                    get_lang('TimeSpentInTheCourse'),\n                    [\n                        \"FontSize\" => 12,\n                        \"Align\" => TEXT_ALIGN_BOTTOMMIDDLE,\n                    ]\n                );\n\n                /* Set the default font */\n                $myPicture->setFontProperties(\n                    [\n                        \"FontName\" => api_get_path(SYS_FONTS_PATH).'opensans/OpenSans-Regular.ttf',\n                        \"FontSize\" => 8,\n                    ]\n                );\n\n                /* Define the chart area */\n                $myPicture->setGraphArea(50, 40, $mainWidth - 40, $mainHeight - 80);\n\n                /* Draw the scale */\n                $scaleSettings = [\n                    'XMargin' => 10,\n                    'YMargin' => 10,\n                    'Floating' => true,\n                    'GridR' => 200,\n                    'GridG' => 200,\n                    'GridB' => 200,\n                    'DrawSubTicks' => true,\n                    'CycleBackground' => true,\n                    'LabelRotation' => $angle,\n                    'Mode' => SCALE_MODE_ADDALL_START0,\n                ];\n                $myPicture->drawScale($scaleSettings);\n\n                /* Turn on Antialiasing */\n                $myPicture->Antialias = true;\n\n                /* Enable shadow computing */\n                $myPicture->setShadow(\n                    true,\n                    [\n                        \"X\" => 1,\n                        \"Y\" => 1,\n                        \"R\" => 0,\n                        \"G\" => 0,\n                        \"B\" => 0,\n                        \"Alpha\" => 10,\n                    ]\n                );\n\n                /* Draw the line chart */\n                $myPicture->setFontProperties(\n                    [\n                        \"FontName\" => api_get_path(SYS_FONTS_PATH).'opensans/OpenSans-Regular.ttf',\n                        \"FontSize\" => 10,\n                    ]\n                );\n                $myPicture->drawSplineChart();\n                $myPicture->drawPlotChart(\n                    [\n                        \"DisplayValues\" => true,\n                        \"PlotBorder\" => true,\n                        \"BorderSize\" => 1,\n                        \"Surrounding\" => -60,\n                        \"BorderAlpha\" => 80,\n                    ]\n                );\n\n                /* Do NOT Write the chart legend */\n\n                /* Write and save into cache */\n                $myCache->writeToCache($chartHash, $myPicture);\n                $imgPath = api_get_path(SYS_ARCHIVE_PATH).$chartHash;\n                $myCache->saveFromCache($chartHash, $imgPath);\n                $imgPath = api_get_path(WEB_ARCHIVE_PATH).$chartHash;\n            }\n\n            return '<img src=\"'.$imgPath.'\">';\n        } else {\n            return api_convert_encoding(\n                '<div id=\"messages\" class=\"warning-message\">'.get_lang('GraphicNotAvailable').'</div>',\n                'UTF-8'\n            );\n        }\n    }\n\n    /*\n     * Gets the company name of a user based on the extra field 'company'.\n     *\n     * @param int $userId\n     *\n     * @return string\n     */\n    public static function getCompanyOfUser($userId = 0)\n    {\n        $userId = (int) $userId;\n        if (0 != $userId) {\n            $tblExtraFieldValue = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n            $tblExtraField = Database::get_main_table(TABLE_EXTRA_FIELD);\n            $sql = \"SELECT\n                    extra_field_value.item_id AS userId,\n                    extra_field_value.value AS company\n                FROM $tblExtraFieldValue AS extra_field_value\n                INNER JOIN $tblExtraField AS extra_field\n                ON (\n                    extra_field_value.field_id = extra_field.id AND\n                    extra_field.variable = 'company'\n                )\n                WHERE\n                    extra_field_value.value != '' AND\n                    extra_field_value.item_id = $userId \";\n            $queryResult = Database::query($sql);\n            $data = Database::store_result($queryResult, 'ASSOC');\n            $totalData = count($data);\n            /* use 'for' to performance */\n            for ($i = 0; $i < $totalData; $i++) {\n                $row = $data[$i];\n                if (isset($row['company']) && !empty($row['company'])) {\n                    return $row['company'];\n                }\n            }\n        }\n\n        return get_lang('NoEntity');\n    }\n\n    /**\n     * Gets a list of users who were enrolled in the lessons.\n     * It is necessary that in the extra field, a company is defined.\n     *\n     *  if lpId is different to 0, this search by lp id too\n     *\n     * Variable $withGroups determines the consultation of the enrollment in groups. The group in total will be taken\n     *\n     * @param string|null $startDate\n     * @param string|null $endDate\n     * @param int         $lpId\n     * @param bool        $withGroups\n     *\n     * @return array\n     */\n    protected static function getCompanyLearnpathSubscription(\n        $startDate = null,\n        $endDate = null,\n        $whereInLp = null,\n        $withGroups = false\n    ) {\n        $whereInLp = Database::escape_string($whereInLp);\n        $tblItemProperty = Database::get_course_table(TABLE_ITEM_PROPERTY);\n        $tblLp = Database::get_course_table(TABLE_LP_MAIN);\n        $tblLpItem = Database::get_course_table(TABLE_LP_ITEM);\n        $tblGroupUser = Database::get_course_table(TABLE_GROUP_USER);\n        $tblUser = Database::get_main_table(TABLE_MAIN_USER);\n        $tblAccessUrlUser = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USER);\n        $accessUrlFilter = '';\n        if (api_is_multiple_url_enabled()) {\n            $urlId = api_get_current_access_url_id();\n            $accessUrlFilter = \" INNER JOIN $tblAccessUrlUser auru\n                      ON (u.id = auru.user_id AND auru.access_url_id = $urlId)\";\n        }\n        $whereCondition = '';\n\n        //Validating dates\n        if (!empty($startDate)) {\n            $startDate = new DateTime($startDate);\n        }\n        if (!empty($endDate)) {\n            $endDate = new DateTime($endDate);\n        }\n        if (!empty($startDate) && !empty($endDate)) {\n            if ($startDate > $endDate) {\n                $dateTemp = $endDate;\n                $endDate = $startDate;\n                $startDate = $dateTemp;\n                unset($dateTemp);\n            }\n        }\n\n        // Settings condition and parametter GET to right date\n        if (!empty($startDate)) {\n            $startDate = api_get_utc_datetime($startDate->setTime(0, 0, 0)->format('Y-m-d H:i:s'));\n            $_GET['startDate'] = $startDate;\n            $whereCondition .= \" AND ip.lastedit_date >= '$startDate' \";\n        }\n        if (!empty($endDate)) {\n            $endDate = api_get_utc_datetime($endDate->setTime(23, 59, 59)->format('Y-m-d H:i:s'));\n            $_GET['endDate'] = $endDate;\n            $whereCondition .= \" AND ip.lastedit_date <= '$endDate' \";\n        }\n        if (!empty($whereInLp)) {\n            $whereCondition .= \" AND ip.ref in ($whereInLp) \";\n        }\n        $datas = [];\n        if (!empty($startDate) or !empty($endDate)) {\n            $query = \"\n            SELECT DISTINCT\n                ip.ref AS lp_item,\n                lpi.iid AS lp_item_id,\n                ip.session_id AS session_id,\n                ip.lastedit_type AS type,\n                u.username AS username,\n                ip.lastedit_date AS lastedit_date,\n                ip.to_user_id AS id,\n                u.firstname as firstname,\n                u.lastname as lastname\n            FROM $tblItemProperty AS ip\n            INNER JOIN $tblUser AS u\n            ON (u.id = ip.to_user_id)\n            INNER JOIN $tblLp AS lp\n            ON (lp.iid = ip.ref AND lp.c_id = ip.c_id)\n            INNER JOIN $tblLpItem AS lpi\n            ON (lp.id = lpi.lp_id AND lp.c_id = lpi.c_id)\n            $accessUrlFilter\n                    WHERE\n                ip.lastedit_type = 'LearnpathSubscription' \";\n            if (strlen($whereCondition) > 2) {\n                $query .= $whereCondition;\n            }\n            if ($withGroups) {\n                $query = \"\n                SELECT DISTINCT\n                    ip.ref AS lp_item,\n                    lpi.iid AS lp_item_id,\n                    ip.session_id AS session_id,\n                    ip.lastedit_type AS type,\n                    ip.lastedit_date AS lastedit_date,\n                    ip.to_group_id AS group_id,\n                    ug.user_id AS id,\n                    u.firstname as firstname,\n                    u.lastname as lastname\n            FROM\n                    $tblItemProperty AS ip\n                INNER JOIN $tblGroupUser AS ug\n                ON (ug.group_id = ip.to_group_id AND ip.c_id = ug.c_id)\n                INNER JOIN $tblUser AS u\n                ON (u.id = ug.user_id)\n                INNER JOIN $tblLp AS lp\n                ON (lp.iid = ip.ref AND ug.c_id = lp.c_id)\n                INNER JOIN $tblLpItem AS lpi\n                ON (lp.id = lpi.lp_id AND lp.c_id = lpi.c_id)\n                $accessUrlFilter\n            WHERE\n                    ip.lastedit_type = 'LearnpathSubscription' AND\n                    ip.to_group_id != 0 \";\n                if (strlen($whereCondition) > 2) {\n                    $query .= $whereCondition;\n                }\n            }\n            $query .= ' ORDER BY ip.ref, ip.session_id ';\n            $queryResult = Database::query($query);\n            $data = Database::store_result($queryResult, 'ASSOC');\n            $totalData = count($data);\n            /* use 'for' to performance */\n            for ($i = 0; $i < $totalData; $i++) {\n                $row = $data[$i];\n                $row['complete_name'] = api_get_person_name($row['firstname'], $row['lastname']);\n                $row['company'] = self::getCompanyOfUser($row['id']);\n                $datas[$row['lp_item_id']][] = $row;\n            }\n        }\n\n        return $datas;\n    }\n\n    private static function getDataAccessTrackingFilters($sql)\n    {\n        if (isset($_GET['course_id']) && !empty($_GET['course_id'])) {\n            $courseId = (int) $_GET['course_id'];\n            $sql .= \" AND c.id = \".$courseId;\n        }\n\n        if (isset($_GET['session_id']) && !empty($_GET['session_id'])) {\n            $sessionId = (int) $_GET['session_id'];\n            $sql .= \" AND a.session_id = \".$sessionId;\n        }\n\n        if (isset($_GET['student_id']) && !empty($_GET['student_id'])) {\n            $userId = (int) $_GET['student_id'];\n            $sql .= \" AND u.user_id = \".$userId;\n        }\n\n        $sql .= \" AND u.status <> \".ANONYMOUS;\n\n        if (isset($_GET['date']) && !empty($_GET['date'])) {\n            $dateRangePicker = new DateRangePicker('date', '', ['timePicker' => 'true']);\n            $dates = $dateRangePicker->parseDateRange($_GET['date']);\n            if (isset($dates['start']) && !empty($dates['start'])) {\n                $dates['start'] = Database::escape_string(api_get_utc_datetime($dates['start']));\n                $sql .= \" AND login_course_date >= '\".$dates['start'].\"'\";\n            }\n            if (isset($dates['end']) && !empty($dates['end'])) {\n                $dates['end'] = Database::escape_string(api_get_utc_datetime($dates['end']));\n                $sql .= \" AND logout_course_date <= '\".$dates['end'].\"'\";\n            }\n        }\n\n        return $sql;\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\nuse Symfony\\Component\\DomCrawler\\Crawler;\n\n/**\n * Defines the scorm class, which is meant to contain the scorm items (nuclear elements).\n *\n * @author    Yannick Warnier <ywarnier@beeznest.org>\n */\nclass scorm extends learnpath\n{\n    public $manifest = [];\n    public $resources = [];\n    public $resources_att = [];\n    public $organizations = [];\n    public $organizations_att = [];\n    public $metadata = [];\n    // Will hold the references to resources for each item ID found.\n    public $idrefs = [];\n    // For each resource found, stores the file url/uri.\n    public $refurls = [];\n    /*  Path between the scorm/ directory and the imsmanifest.xml e.g.\n    maritime_nav/maritime_nav. This is the path that will be used in the\n    lp_path when importing a package. */\n    public $subdir = '';\n    public $items = [];\n    // Keeps the zipfile safe for the object's life so that we can use it if no title avail.\n    public $zipname = '';\n    // Keeps an index of the number of uses of the zipname so far.\n    public $lastzipnameindex = 0;\n    public $manifest_encoding = 'UTF-8';\n    public $debug = false;\n\n    /**\n     * Class constructor. Based on the parent constructor.\n     *\n     * @param    string    Course code\n     * @param    int    Learnpath ID in DB\n     * @param    int    User ID\n     */\n    public function __construct($course_code = null, $resource_id = null, $user_id = null)\n    {\n        if ($this->debug > 0) {\n            error_log('New LP - scorm::scorm('.$course_code.','.$resource_id.','.$user_id.') - In scorm constructor');\n        }\n\n        parent::__construct($course_code, $resource_id, $user_id);\n    }\n\n    /**\n     * Opens a resource.\n     *\n     * @param int $id Database ID of the resource\n     */\n    public function open($id)\n    {\n        if ($this->debug > 0) {\n            error_log('New LP - scorm::open() - In scorm::open method', 0);\n        }\n        // redefine parent method\n    }\n\n    /**\n     * Possible SCO status: see CAM doc 2.3.2.5.1: passed, completed, browsed, failed, not attempted, incomplete.\n     * Prerequisites: see CAM doc 2.3.2.5.1 for pseudo-code.\n     *\n     * Parses an imsmanifest.xml file and puts everything into the $manifest array.\n     *\n     * @param\tstring\tPath to the imsmanifest.xml file on the system.\n     * If not defined, uses the base path of the course's scorm dir\n     *\n     * @return array Structured array representing the imsmanifest's contents\n     */\n    public function parse_manifest($file = '')\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::parse_manifest('.$file.')', 0);\n        }\n        if (empty($file)) {\n            // Get the path of the imsmanifest file.\n        }\n\n        if (is_file($file) && is_readable($file) && ($xml = @file_get_contents($file))) {\n            // Parsing using PHP5 DOMXML methods.\n            if ($this->debug > 0) {\n                error_log('In scorm::parse_manifest() - Parsing using PHP5 method');\n            }\n            // $this->manifest_encoding = api_detect_encoding_xml($xml);\n            // This is the usual way for reading the encoding.\n            // This method reads the encoding, it tries to be correct even in cases\n            // of wrong or missing encoding declarations.\n            $this->manifest_encoding = self::detect_manifest_encoding($xml);\n\n            // UTF-8 is supported by DOMDocument class, this is for sure.\n            $xml = api_utf8_encode_xml($xml, $this->manifest_encoding);\n\n            /*$crawler = new Crawler();\n            $crawler->addXmlContent($xml);*/\n            $crawler = Import::xml($xml);\n\n            $xmlErrors = libxml_get_errors();\n\n            if (!empty($xmlErrors)) {\n                if ($this->debug > 0) {\n                    error_log('New LP - In scorm::parse_manifest() - Exception thrown when loading '.$file.' in DOMDocument');\n                }\n                // Throw exception?\n                return null;\n            }\n\n            if ($this->debug > 1) {\n                error_log('New LP - Called  (encoding:'.$this->manifest_encoding.' - saved: '.$this->manifest_encoding.')', 0);\n            }\n\n            $root = $crawler->getNode(0);\n\n            if ($root->hasAttributes()) {\n                $attributes = $root->attributes;\n                if (0 !== $attributes->length) {\n                    foreach ($attributes as $attrib) {\n                        // <manifest> element attributes\n                        $this->manifest[$attrib->name] = $attrib->value;\n                    }\n                }\n            }\n            $this->manifest['name'] = $root->tagName;\n            if ($root->hasChildNodes()) {\n                $children = $root->childNodes;\n                if (0 !== $children->length) {\n                    foreach ($children as $child) {\n                        // <manifest> element children (can be <metadata>, <organizations> or <resources> )\n                        if (XML_ELEMENT_NODE == $child->nodeType) {\n                            switch ($child->tagName) {\n                                case 'metadata':\n                                    // Parse items from inside the <metadata> element.\n                                    $this->metadata = new scormMetadata('manifest', $child);\n                                    break;\n                                case 'organizations':\n                                    // Contains the course structure - this element appears 1 and only 1 time in a package imsmanifest.\n                                    // It contains at least one 'organization' sub-element.\n                                    $orgs_attribs = $child->attributes;\n                                    foreach ($orgs_attribs as $orgs_attrib) {\n                                        // Attributes of the <organizations> element.\n                                        if (XML_ATTRIBUTE_NODE == $orgs_attrib->nodeType) {\n                                            $this->manifest['organizations'][$orgs_attrib->name] = $orgs_attrib->value;\n                                        }\n                                    }\n                                    $orgs_nodes = $child->childNodes;\n                                    $i = 0;\n                                    $found_an_org = false;\n                                    foreach ($orgs_nodes as $orgnode) {\n                                        // <organization> elements - can contain <item>, <metadata> and <title>\n                                        // Here we are at the 'organization' level. There might be several organization tags but\n                                        // there is generally only one.\n                                        // There are generally three children nodes we are looking for inside and organization:\n                                        // -title\n                                        // -item (may contain other item tags or may appear several times inside organization)\n                                        // -metadata (relative to the organization)\n                                        $found_an_org = false;\n                                        switch ($orgnode->nodeType) {\n                                            case XML_TEXT_NODE:\n                                                // Ignore here.\n                                                break;\n                                            case XML_ATTRIBUTE_NODE:\n                                                // Just in case there would be interesting attributes inside the organization tag.\n                                                // There shouldn't as this is a node-level, not a data level.\n                                                //$manifest['organizations'][$i][$orgnode->name] = $orgnode->value;\n                                                //$found_an_org = true;\n                                                break;\n                                            case XML_ELEMENT_NODE:\n                                                // <item>, <metadata> or <title> (or attributes)\n                                                $organizations_attributes = $orgnode->attributes;\n                                                foreach ($organizations_attributes as $orgs_attr) {\n                                                    $this->organizations_att[$orgs_attr->name] = $orgs_attr->value;\n                                                }\n                                                $oOrganization = new scormOrganization(\n                                                    'manifest',\n                                                    $orgnode,\n                                                    $this->manifest_encoding\n                                                );\n                                                if ($oOrganization->identifier != '') {\n                                                    $name = $oOrganization->get_name();\n                                                    if (empty($name)) {\n                                                        // If the org title is empty, use zip file name.\n                                                        $myname = $this->zipname;\n                                                        if ($this->lastzipnameindex != 0) {\n                                                            $myname = $myname + $this->lastzipnameindex;\n                                                            $this->lastzipnameindex++;\n                                                        }\n                                                        $oOrganization->set_name($this->zipname);\n                                                    }\n                                                    $this->organizations[$oOrganization->identifier] = $oOrganization;\n                                                }\n                                                break;\n                                        }\n                                    }\n                                    break;\n                                case 'resources':\n                                    if ($child->hasAttributes()) {\n                                        $resources_attribs = $child->attributes;\n                                        foreach ($resources_attribs as $res_attr) {\n                                            if ($res_attr->type == XML_ATTRIBUTE_NODE) {\n                                                $this->manifest['resources'][$res_attr->name] = $res_attr->value;\n                                            }\n                                        }\n                                    }\n                                    if ($child->hasChildNodes()) {\n                                        $resources_nodes = $child->childNodes;\n                                        $i = 0;\n                                        foreach ($resources_nodes as $res_node) {\n                                            $oResource = new scormResource('manifest', $res_node);\n                                            if ($oResource->identifier != '') {\n                                                $this->resources[$oResource->identifier] = $oResource;\n                                                $i++;\n                                            }\n                                        }\n                                    }\n                                    // Contains links to physical resources.\n                                    break;\n                                case 'manifest':\n                                    // Only for sub-manifests.\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n            // End parsing using PHP5 DOMXML methods.\n        } else {\n            if ($this->debug > 1) {\n                error_log('New LP - Could not open/read file '.$file);\n            }\n            $this->set_error_msg(\"File $file could not be read\");\n\n            return null;\n        }\n\n        $fixTemplate = api_get_configuration_value('learnpath_fix_xerte_template');\n        $proxyPath = api_get_configuration_value('learnpath_proxy_url');\n        if ($fixTemplate && !empty($proxyPath)) {\n            // Check organisations:\n            if (isset($this->manifest['organizations'])) {\n                foreach ($this->manifest['organizations'] as $data) {\n                    if (strpos(strtolower($data), 'xerte') !== false) {\n                        // Check if template.xml exists:\n                        $templatePath = str_replace('imsmanifest.xml', 'template.xml', $file);\n                        if (file_exists($templatePath) && is_file($templatePath)) {\n                            $templateContent = file_get_contents($templatePath);\n                            $find = [\n                                'href=\"www.',\n                                'href=\"https://',\n                                'href=\"http://',\n                                'url=\"www.',\n                                'pdfs/download.php?',\n                            ];\n\n                            $replace = [\n                                'href=\"http://www.',\n                                'target = \"_blank\" href=\"'.$proxyPath.'?type=link&src=https://',\n                                'target = \"_blank\" href=\"'.$proxyPath.'?type=link&src=http://',\n                                'url=\"http://www.',\n                                'pdfs/download.php&',\n                            ];\n                            $templateContent = str_replace($find, $replace, $templateContent);\n                            file_put_contents($templatePath, $templateContent);\n                        }\n\n                        // Fix link generation:\n                        $linkPath = str_replace('imsmanifest.xml', 'models_html5/links.html', $file);\n                        if (file_exists($linkPath) && is_file($linkPath)) {\n                            $linkContent = file_get_contents($linkPath);\n                            $find = [\n                                ':this.getAttribute(\"url\")',\n                            ];\n                            $replace = [\n                                ':\"'.$proxyPath.'?type=link&src=\" + this.getAttribute(\"url\")',\n                            ];\n                            $linkContent = str_replace($find, $replace, $linkContent);\n                            file_put_contents($linkPath, $linkContent);\n                        }\n\n                        // Fix iframe generation\n                        $framePath = str_replace('imsmanifest.xml', 'models_html5/embedDiv.html', $file);\n\n                        if (file_exists($framePath) && is_file($framePath)) {\n                            $content = file_get_contents($framePath);\n                            $find = [\n                                '$iFrameHolder.html(iFrameTag);',\n                            ];\n                            $replace = [\n                                'iFrameTag = \\'<a target =\"_blank\" href=\"'.$proxyPath.'?type=link&src=\\'+ pageSrc + \\'\">Open website. <img width=\"16px\" src=\"'.Display::returnIconPath('link-external.png').'\"></a>\\'; $iFrameHolder.html(iFrameTag); ',\n                            ];\n                            $content = str_replace($find, $replace, $content);\n                            file_put_contents($framePath, $content);\n                        }\n\n                        // Fix new window generation\n                        $newWindowPath = str_replace('imsmanifest.xml', 'models_html5/newWindow.html', $file);\n\n                        if (file_exists($newWindowPath) && is_file($newWindowPath)) {\n                            $content = file_get_contents($newWindowPath);\n                            $find = [\n                                'var src = x_currentPageXML',\n                            ];\n                            $replace = [\n                                'var src = \"'.$proxyPath.'?type=link&src=\" + x_currentPageXML',\n                            ];\n                            $content = str_replace($find, $replace, $content);\n                            file_put_contents($newWindowPath, $content);\n                        }\n                    }\n                }\n            }\n        }\n\n        // TODO: Close the DOM handler.\n        return $this->manifest;\n    }\n\n    /**\n     * Import the scorm object (as a result from the parse_manifest function) into the database structure.\n     *\n     * @param string $courseCode\n     * @param int    $userMaxScore\n     * @param int    $sessionId\n     * @param int    $userId\n     *\n     * @return bool Returns -1 on error\n     */\n    public function import_manifest(\n        $courseCode,\n        $userMaxScore = 1,\n        $sessionId = 0,\n        $userId = 0\n    ) {\n        if ($this->debug > 0) {\n            error_log('New LP - Entered import_manifest('.$courseCode.')', 0);\n        }\n        $courseInfo = api_get_course_info($courseCode);\n        $courseId = $courseInfo['real_id'];\n\n        $userId = (int) $userId;\n        if (empty($userId)) {\n            $userId = api_get_user_id();\n        }\n        // Get table names.\n        $new_lp = Database::get_course_table(TABLE_LP_MAIN);\n        $new_lp_item = Database::get_course_table(TABLE_LP_ITEM);\n        $userMaxScore = (int) $userMaxScore;\n        $sessionId = empty($sessionId) ? api_get_session_id() : (int) $sessionId;\n        foreach ($this->organizations as $id => $dummy) {\n            $oOrganization = &$this->organizations[$id];\n            // Prepare and execute insert queries:\n            // -for learnpath\n            // -for items\n            // -for views?\n            $get_max = \"SELECT MAX(display_order) FROM $new_lp WHERE c_id = $courseId \";\n            $res_max = Database::query($get_max);\n            $dsp = 1;\n            if (Database::num_rows($res_max) > 0) {\n                $row = Database::fetch_array($res_max);\n                $dsp = $row[0] + 1;\n            }\n            $myname = api_utf8_decode($oOrganization->get_name());\n            $now = api_get_utc_datetime();\n\n            $params = [\n                'c_id' => $courseId,\n                'lp_type' => 2,\n                'name' => $myname,\n                'ref' => $oOrganization->get_ref(),\n                'description' => '',\n                'path' => $this->subdir,\n                'force_commit' => 0,\n                'default_view_mod' => 'embedded',\n                'default_encoding' => $this->manifest_encoding,\n                'js_lib' => 'scorm_api.php',\n                'display_order' => $dsp,\n                'session_id' => $sessionId,\n                'use_max_score' => $userMaxScore,\n                'content_maker' => '',\n                'content_license' => '',\n                'debug' => 0,\n                'theme' => '',\n                'preview_image' => '',\n                'author' => '',\n                'prerequisite' => 0,\n                'hide_toc_frame' => 0,\n                'seriousgame_mode' => 0,\n                'autolaunch' => 0,\n                'category_id' => 0,\n                'max_attempts' => 0,\n                'subscribe_users' => 0,\n                'created_on' => $now,\n                'modified_on' => $now,\n                'publicated_on' => $now,\n            ];\n\n            $lp_id = Database::insert($new_lp, $params);\n\n            if ($lp_id) {\n                $sql = \"UPDATE $new_lp SET id = iid WHERE iid = $lp_id\";\n                Database::query($sql);\n\n                $this->lp_id = $lp_id;\n\n                // Insert into item_property.\n                api_item_property_update(\n                    $courseInfo,\n                    TOOL_LEARNPATH,\n                    $this->lp_id,\n                    'LearnpathAdded',\n                    $userId\n                );\n\n                api_item_property_update(\n                    $courseInfo,\n                    TOOL_LEARNPATH,\n                    $this->lp_id,\n                    'visible',\n                    $userId\n                );\n            }\n\n            // Now insert all elements from inside that learning path.\n            // Make sure we also get the href and sco/asset from the resources.\n            $list = $oOrganization->get_flat_items_list();\n            $parents_stack = [0];\n            $parent = 0;\n            $previous = 0;\n            $level = 0;\n\n            foreach ($list as $item) {\n                if ($item['level'] > $level) {\n                    // Push something into the parents array.\n                    array_push($parents_stack, $previous);\n                    $parent = $previous;\n                } elseif ($item['level'] < $level) {\n                    $diff = $level - $item['level'];\n                    // Pop something out of the parents array.\n                    for ($j = 1; $j <= $diff; $j++) {\n                        $outdated_parent = array_pop($parents_stack);\n                    }\n                    $parent = array_pop($parents_stack); // Just save that value, then add it back.\n                    array_push($parents_stack, $parent);\n                }\n                $path = '';\n                $type = 'dir';\n                if (isset($this->resources[$item['identifierref']])) {\n                    $oRes = &$this->resources[$item['identifierref']];\n                    $path = @$oRes->get_path();\n                    if (!empty($path)) {\n                        $temptype = $oRes->get_scorm_type();\n                        if (!empty($temptype)) {\n                            $type = $temptype;\n                        }\n                    }\n                }\n                $level = $item['level'];\n                $field_add = '';\n                $value_add = '';\n\n                if (!empty($item['masteryscore'])) {\n                    $field_add .= 'mastery_score, ';\n                    $value_add .= $item['masteryscore'].',';\n                }\n\n                if (!empty($item['maxtimeallowed'])) {\n                    $field_add .= 'max_time_allowed, ';\n                    $value_add .= \"'\".$item['maxtimeallowed'].\"',\";\n                }\n                $title = Database::escape_string($item['title']);\n                $title = api_utf8_decode($title);\n                $max_score = (int) $item['max_score'];\n\n                if ($max_score === 0) {\n                    // If max score is not set The use_max_score parameter\n                    // is check in order to use 100 (chamilo style) or '' (strict scorm)\n                    $max_score = 'NULL';\n                    if ($userMaxScore) {\n                        $max_score = 100;\n                    }\n                } else {\n                    // Otherwise save the max score.\n                    $max_score = \"'$max_score'\";\n                }\n\n                $identifier = Database::escape_string($item['identifier']);\n\n                if (empty($title)) {\n                    $title = get_lang('Untitled');\n                }\n\n                $prereq = Database::escape_string($item['prerequisites']);\n                $item['datafromlms'] = Database::escape_string($item['datafromlms']);\n                $item['parameters'] = Database::escape_string($item['parameters']);\n\n                $sql = \"INSERT INTO $new_lp_item (c_id, lp_id,item_type,ref,title, path,min_score,max_score, $field_add parent_item_id,previous_item_id,next_item_id, prerequisite,display_order,launch_data, parameters)\n                        VALUES ($courseId, $lp_id, '$type', '$identifier', '$title', '$path' , 0, $max_score, $value_add $parent, $previous, 0, '$prereq', \".$item['rel_order'].\", '\".$item['datafromlms'].\"', '\".$item['parameters'].\"' )\";\n\n                Database::query($sql);\n                if ($this->debug > 1) {\n                    error_log('New LP - In import_manifest(), inserting item : '.$sql);\n                }\n                $item_id = Database::insert_id();\n\n                if ($item_id) {\n                    $sql = \"UPDATE $new_lp_item SET id = iid WHERE iid = $item_id\";\n                    Database::query($sql);\n\n                    // Now update previous item to change next_item_id.\n                    $upd = \"UPDATE $new_lp_item SET next_item_id = $item_id\n                            WHERE iid = $previous\";\n                    Database::query($upd);\n                    // Update previous item id.\n                    $previous = $item_id;\n                }\n\n                // Code for indexing, now only index specific fields like terms and the title.\n                if (!empty($_POST['index_document'])) {\n                    require_once api_get_path(LIBRARY_PATH).'specific_fields_manager.lib.php';\n\n                    $di = new ChamiloIndexer();\n                    isset($_POST['language']) ? $lang = Database::escape_string($_POST['language']) : $lang = 'english';\n                    $di->connectDb(null, null, $lang);\n                    $ic_slide = new IndexableChunk();\n                    $ic_slide->addValue('title', $title);\n                    $specific_fields = get_specific_field_list();\n                    $all_specific_terms = '';\n                    foreach ($specific_fields as $specific_field) {\n                        if (isset($_REQUEST[$specific_field['code']])) {\n                            $sterms = trim($_REQUEST[$specific_field['code']]);\n                            $all_specific_terms .= ' '.$sterms;\n                            if (!empty($sterms)) {\n                                $sterms = explode(',', $sterms);\n                                foreach ($sterms as $sterm) {\n                                    $ic_slide->addTerm(trim($sterm), $specific_field['code']);\n                                }\n                            }\n                        }\n                    }\n                    $body_to_index = $all_specific_terms.' '.$title;\n                    $ic_slide->addValue(\"content\", $body_to_index);\n                    // TODO: Add a comment to say terms separated by commas.\n                    $courseid = api_get_course_id();\n                    $ic_slide->addCourseId($courseid);\n                    $ic_slide->addToolId(TOOL_LEARNPATH);\n                    // TODO: Unify with other lp types.\n                    $xapian_data = [\n                        SE_COURSE_ID => $courseid,\n                        SE_TOOL_ID => TOOL_LEARNPATH,\n                        SE_DATA => ['lp_id' => $lp_id, 'lp_item' => $previous, 'document_id' => ''],\n                        SE_USER => api_get_user_id(),\n                    ];\n                    $ic_slide->xapian_data = serialize($xapian_data);\n                    $di->addChunk($ic_slide);\n                    // Index and return search engine document id.\n                    $did = $di->index();\n                    if ($did) {\n                        // Save it to db.\n                        $tbl_se_ref = Database::get_main_table(TABLE_MAIN_SEARCH_ENGINE_REF);\n                        $sql = 'INSERT INTO %s (id, course_code, tool_id, ref_id_high_level, ref_id_second_level, search_did)\n                                VALUES (NULL , \\'%s\\', \\'%s\\', %s, %s, %s)';\n                        $sql = sprintf($sql, $tbl_se_ref, $courseCode, TOOL_LEARNPATH, $lp_id, $previous, $did);\n                        Database::query($sql);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Intermediate to import_package only to allow import from local zip files.\n     *\n     * @param  string    Path to the zip file, from the sys root\n     * @param  string    Current path (optional)\n     *\n     * @return string Absolute path to the imsmanifest.xml file or empty string on error\n     */\n    public function import_local_package($file_path, $currentDir = '')\n    {\n        // TODO: Prepare info as given by the $_FILES[''] vector.\n        $fileInfo = [];\n        $fileInfo['tmp_name'] = $file_path;\n        $fileInfo['name'] = basename($file_path);\n        // Call the normal import_package function.\n        return $this->import_package($fileInfo, $currentDir);\n    }\n\n    /**\n     * Imports a zip file into the Chamilo structure.\n     *\n     * @param string    $zipFileInfo       Zip file info as given by $_FILES['userFile']\n     * @param string    $currentDir\n     * @param array     $courseInfo\n     * @param bool      $updateDirContents\n     * @param learnpath $lpToCheck\n     * @param bool      $allowHtaccess\n     *\n     * @return string $current_dir Absolute path to the imsmanifest.xml file or empty string on error\n     */\n    public function import_package(\n        $zipFileInfo,\n        $currentDir = '',\n        $courseInfo = [],\n        $updateDirContents = false,\n        $lpToCheck = null,\n        $allowHtaccess = false\n    ) {\n        if ($this->debug > 0) {\n            error_log(\n                'In scorm::import_package('.print_r($zipFileInfo, true).',\"'.$currentDir.'\") method'\n            );\n        }\n\n        $courseInfo = empty($courseInfo) ? api_get_course_info() : $courseInfo;\n        $maxFilledSpace = DocumentManager::get_course_quota($courseInfo['code']);\n\n        $zipFilePath = $zipFileInfo['tmp_name'];\n        $zipFileName = $zipFileInfo['name'];\n\n        if ($this->debug > 1) {\n            error_log(\n                'New LP - import_package() - zip file path = '.$zipFilePath.', zip file name = '.$zipFileName,\n                0\n            );\n        }\n\n        $courseRelDir = api_get_course_path($courseInfo['code']).'/scorm'; // scorm dir web path starting from /courses\n        $courseSysDir = api_get_path(SYS_COURSE_PATH).$courseRelDir; // Absolute system path for this course.\n        $currentDir = api_replace_dangerous_char(trim($currentDir)); // Current dir we are in, inside scorm/\n\n        if ($this->debug > 1) {\n            error_log('New LP - import_package() - current_dir = '.$currentDir, 0);\n        }\n\n        // Get name of the zip file without the extension.\n        $fileInfo = pathinfo($zipFileName);\n        $filename = $fileInfo['basename'];\n        $extension = $fileInfo['extension'];\n        $fileBaseName = str_replace('.'.$extension, '', $filename); // Filename without its extension.\n        $this->zipname = $fileBaseName; // Save for later in case we don't have a title.\n        $newDir = api_replace_dangerous_char(trim($fileBaseName));\n        $this->subdir = $newDir;\n        if ($this->debug > 1) {\n            error_log('New LP - Received zip file name: '.$zipFilePath);\n            error_log(\"New LP - subdir is first set to : \".$this->subdir);\n            error_log(\"New LP - base file name is : \".$fileBaseName);\n        }\n\n        $zipFile = new PclZip($zipFilePath);\n        // Check the zip content (real size and file extension).\n        $zipContentArray = $zipFile->listContent();\n        $packageType = '';\n        $manifestList = [];\n        // The following loop should be stopped as soon as we found the right imsmanifest.xml (how to recognize it?).\n        $realFileSize = 0;\n        foreach ($zipContentArray as $thisContent) {\n            if (preg_match('~.(php.*|phtml)$~i', $thisContent['filename'])) {\n                $file = $thisContent['filename'];\n                $this->set_error_msg(\"File $file contains a PHP script\");\n            } elseif (stristr($thisContent['filename'], 'imsmanifest.xml')) {\n                if ($thisContent['filename'] == basename($thisContent['filename'])) {\n                } else {\n                    if ($this->debug > 2) {\n                        error_log(\"New LP - subdir is now \".$this->subdir);\n                    }\n                }\n                $packageType = 'scorm';\n                $manifestList[] = $thisContent['filename'];\n            }\n            $realFileSize += $thisContent['size'];\n        }\n\n        // Now get the shortest path (basically, the imsmanifest that is the closest to the root).\n        $shortestPath = $manifestList[0];\n        $slashCount = substr_count($shortestPath, '/');\n        foreach ($manifestList as $manifestPath) {\n            $tmpSlashCount = substr_count($manifestPath, '/');\n            if ($tmpSlashCount < $slashCount) {\n                $shortestPath = $manifestPath;\n                $slashCount = $tmpSlashCount;\n            }\n        }\n\n        $this->subdir .= '/'.dirname($shortestPath); // Do not concatenate because already done above.\n        $manifest = $shortestPath;\n        if ($this->debug) {\n            error_log(\"New LP - Package type is now: '$packageType'\");\n        }\n        if ($packageType == '') {\n            Display::addFlash(\n                Display::return_message(get_lang('NotScormContent'))\n            );\n\n            return false;\n        }\n\n        if (!enough_size($realFileSize, $courseSysDir, $maxFilledSpace)) {\n            if ($this->debug > 1) {\n                error_log('New LP - Not enough space to store package');\n            }\n            Display::addFlash(\n                Display::return_message(get_lang('NoSpace'))\n            );\n\n            return false;\n        }\n\n        if ($updateDirContents && $lpToCheck) {\n            $originalPath = str_replace('/.', '', $lpToCheck->path);\n            if ($originalPath != $newDir) {\n                Display::addFlash(Display::return_message(get_lang('FileError')));\n\n                return false;\n            }\n        }\n\n        // It happens on Linux that $newDir sometimes doesn't start with '/'\n        if ($newDir[0] != '/') {\n            $newDir = '/'.$newDir;\n        }\n\n        if ($newDir[strlen($newDir) - 1] == '/') {\n            $newDir = substr($newDir, 0, -1);\n        }\n\n        /* Uncompressing phase */\n        /*\n            We need to process each individual file in the zip archive to\n            - add it to the database\n            - parse & change relative html links\n            - make sure the filenames are secure (filter funny characters or php extensions)\n        */\n        if (is_dir($courseSysDir.$newDir) ||\n            @mkdir(\n                $courseSysDir.$newDir,\n                api_get_permissions_for_new_directories()\n            )\n        ) {\n            // PHP method - slower...\n            if ($this->debug >= 1) {\n                error_log('New LP - Changing dir to '.$courseSysDir.$newDir);\n            }\n\n            chdir($courseSysDir.$newDir);\n\n            $callBack = 'clean_up_files_in_zip';\n            if ($allowHtaccess) {\n                $callBack = 'cleanZipFilesAllowHtaccess';\n            }\n\n            if (api_get_configuration_value('skip_scorm_package_clean_up')) {\n                $callBack = 'cleanZipFilesNoRename';\n            }\n\n            $zipFile->extract(\n                PCLZIP_CB_PRE_EXTRACT,\n                $callBack\n            );\n\n            if (!empty($newDir)) {\n                $newDir = $newDir.'/';\n            }\n            api_chmod_R($courseSysDir.$newDir, api_get_permissions_for_new_directories());\n        } else {\n            return false;\n        }\n\n        return $courseSysDir.$newDir.$manifest;\n    }\n\n    /**\n     * Sets the proximity setting in the database.\n     *\n     * @param string    Proximity setting\n     * @param int $courseId\n     *\n     * @return bool\n     */\n    public function set_proximity($proxy = '', $courseId = null)\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::set_proximity('.$proxy.') method');\n        }\n        $lp = $this->get_id();\n        if ($lp != 0) {\n            $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n            $sql = \"UPDATE $tbl_lp SET content_local = '$proxy'\n                    WHERE iid = $lp\";\n            $res = Database::query($sql);\n\n            return $res;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Sets the theme setting in the database.\n     *\n     * @param string    theme setting\n     *\n     * @return bool\n     */\n    public function set_theme($theme = '')\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::set_theme('.$theme.') method');\n        }\n        $lp = $this->get_id();\n        if ($lp != 0) {\n            $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n            $sql = \"UPDATE $tbl_lp SET theme = '$theme'\n                    WHERE iid = $lp\";\n            $res = Database::query($sql);\n\n            return $res;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Sets the image setting in the database.\n     *\n     * @param string preview_image setting\n     *\n     * @return bool\n     */\n    public function set_preview_image($preview_image = '')\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::set_theme('.$preview_image.') method', 0);\n        }\n        $lp = $this->get_id();\n        if ($lp != 0) {\n            $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n            $sql = \"UPDATE $tbl_lp SET preview_image = '$preview_image'\n                    WHERE iid = $lp\";\n            $res = Database::query($sql);\n\n            return $res;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Sets the author  setting in the database.\n     *\n     * @param string $author\n     *\n     * @return bool\n     */\n    public function set_author($author = '')\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::set_author('.$author.') method', 0);\n        }\n        $lp = $this->get_id();\n        if ($lp != 0) {\n            $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n            $sql = \"UPDATE $tbl_lp SET author = '$author'\n                    WHERE iid = \".$lp;\n            $res = Database::query($sql);\n\n            return $res;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Sets the content maker setting in the database.\n     *\n     * @param string    Proximity setting\n     *\n     * @return bool\n     */\n    public function set_maker($maker = '', $courseId = null)\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::set_maker method('.$maker.')', 0);\n        }\n        $lp = $this->get_id();\n        if ($lp != 0) {\n            $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n            $sql = \"UPDATE $tbl_lp SET content_maker = '$maker' WHERE iid = $lp\";\n            $res = Database::query($sql);\n\n            return $res;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Exports the current SCORM object's files as a zip.\n     * Excerpts taken from learnpath_functions.inc.php::exportpath().\n     *\n     * @param int    Learnpath ID (optional, taken from object context if not defined)\n     *\n     * @return bool\n     */\n    public function export_zip($lp_id = null)\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::export_zip method('.$lp_id.')');\n        }\n        if (empty($lp_id)) {\n            if (!is_object($this)) {\n                return false;\n            } else {\n                $id = $this->get_id();\n                if (empty($id)) {\n                    return false;\n                } else {\n                    $lp_id = $this->get_id();\n                }\n            }\n        }\n        //zip everything that is in the corresponding scorm dir\n        //write the zip file somewhere (might be too big to return)\n\n        $_course = api_get_course_info();\n        $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n        $sql = \"SELECT * FROM $tbl_lp WHERE iid = $lp_id\";\n        $result = Database::query($sql);\n        $row = Database::fetch_array($result);\n        $LPname = $row['path'];\n        $list = explode('/', $LPname);\n        $LPnamesafe = $list[0];\n        $zipfoldername = api_get_path(SYS_COURSE_PATH).$_course['directory'].'/temp/'.$LPnamesafe;\n        $scormfoldername = api_get_path(SYS_COURSE_PATH).$_course['directory'].'/scorm/'.$LPnamesafe;\n        $zipfilename = $zipfoldername.'/'.$LPnamesafe.'.zip';\n\n        // Get a temporary dir for creating the zip file.\n        //error_log('New LP - cleaning dir '.$zipfoldername, 0);\n        my_delete($zipfoldername); // Make sure the temp dir is cleared.\n        mkdir($zipfoldername, api_get_permissions_for_new_directories());\n\n        // Create zipfile of given directory.\n        $zip_folder = new PclZip($zipfilename);\n        $zip_folder->create($scormfoldername.'/', PCLZIP_OPT_REMOVE_PATH, $scormfoldername.'/');\n\n        //This file sending implies removing the default mime-type from php.ini\n        //DocumentManager::file_send_for_download($zipfilename, true, $LPnamesafe.'.zip');\n        DocumentManager::file_send_for_download($zipfilename, true);\n\n        // Delete the temporary zip file and directory in fileManage.lib.php\n        my_delete($zipfilename);\n        my_delete($zipfoldername);\n\n        return true;\n    }\n\n    /**\n     * Gets a resource's path if available, otherwise return empty string.\n     *\n     * @param\tstring\tResource ID as used in resource array\n     *\n     * @return string The resource's path as declared in imsmanifest.xml\n     */\n    public function get_res_path($id)\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::get_res_path('.$id.') method');\n        }\n        $path = '';\n        if (isset($this->resources[$id])) {\n            $oRes = &$this->resources[$id];\n            $path = @$oRes->get_path();\n        }\n\n        return $path;\n    }\n\n    /**\n     * Gets a resource's type if available, otherwise return empty string.\n     *\n     * @param  string    Resource ID as used in resource array\n     *\n     * @return string The resource's type as declared in imsmanifest.xml\n     */\n    public function get_res_type($id)\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::get_res_type('.$id.') method');\n        }\n        $type = '';\n        if (isset($this->resources[$id])) {\n            $oRes = &$this->resources[$id];\n            $temptype = $oRes->get_scorm_type();\n            if (!empty($temptype)) {\n                $type = $temptype;\n            }\n        }\n\n        return $type;\n    }\n\n    /**\n     * Gets the default organisation's title.\n     *\n     * @return string The organization's title\n     */\n    public function get_title()\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::get_title() method');\n        }\n        $title = '';\n        if (isset($this->manifest['organizations']['default'])) {\n            $title = $this->organizations[$this->manifest['organizations']['default']]->get_name();\n        } elseif (count($this->organizations) == 1) {\n            // This will only get one title but so we don't need to know the index.\n            foreach ($this->organizations as $id => $value) {\n                $title = $this->organizations[$id]->get_name();\n                break;\n            }\n        }\n\n        return $title;\n    }\n\n    /**\n     * // TODO @TODO Implement this function to restore items data from an imsmanifest,\n     * updating the existing table... This will prove very useful in case initial data\n     * from imsmanifest were not imported well enough.\n     *\n     * @param string $courseCode\n     * @param int\tLP ID (in database)\n     * @param string\tManifest file path (optional if lp_id defined)\n     *\n     * @return int New LP ID or false on failure\n     *             TODO @TODO Implement imsmanifest_path parameter\n     */\n    public function reimport_manifest($courseCode, $lp_id = null, $imsmanifest_path = '')\n    {\n        if ($this->debug > 0) {\n            error_log('In scorm::reimport_manifest() method', 0);\n        }\n\n        $courseInfo = api_get_course_info($courseCode);\n        if (empty($courseInfo)) {\n            $this->error = 'Course code does not exist in database';\n\n            return false;\n        }\n\n        $this->cc = $courseInfo['code'];\n\n        $lp_table = Database::get_course_table(TABLE_LP_MAIN);\n        $lp_id = intval($lp_id);\n        $sql = \"SELECT * FROM $lp_table WHERE iid = $lp_id\";\n        if ($this->debug > 2) {\n            error_log('New LP - scorm::reimport_manifest() '.__LINE__.' - Querying lp: '.$sql);\n        }\n        $res = Database::query($sql);\n        if (Database::num_rows($res) > 0) {\n            $this->lp_id = $lp_id;\n            $row = Database::fetch_array($res);\n            $this->type = $row['lp_type'];\n            $this->name = stripslashes($row['name']);\n            $this->encoding = $row['default_encoding'];\n            $this->proximity = $row['content_local'];\n            $this->maker = $row['content_maker'];\n            $this->prevent_reinit = $row['prevent_reinit'];\n            $this->license = $row['content_license'];\n            $this->scorm_debug = $row['debug'];\n            $this->js_lib = $row['js_lib'];\n            $this->path = $row['path'];\n            if ($this->type == 2) {\n                if ($row['force_commit'] == 1) {\n                    $this->force_commit = true;\n                }\n            }\n            $this->mode = $row['default_view_mod'];\n            $this->subdir = $row['path'];\n        }\n        // Parse the manifest (it is already in this lp's details).\n        $manifest_file = api_get_path(SYS_COURSE_PATH).$courseInfo['directory'].'/scorm/'.$this->subdir.'/imsmanifest.xml';\n        if ($this->subdir == '') {\n            $manifest_file = api_get_path(SYS_COURSE_PATH).$courseInfo['directory'].'/scorm/imsmanifest.xml';\n        }\n        echo $manifest_file;\n        if (is_file($manifest_file) && is_readable($manifest_file)) {\n            // Re-parse the manifest file.\n            if ($this->debug > 1) {\n                error_log('New LP - In scorm::reimport_manifest() - Parsing manifest '.$manifest_file);\n            }\n            $manifest = $this->parse_manifest($manifest_file);\n            // Import new LP in DB (ignore the current one).\n            if ($this->debug > 1) {\n                error_log('New LP - In scorm::reimport_manifest() - Importing manifest '.$manifest_file);\n            }\n            $this->import_manifest($this->cc);\n        } else {\n            if ($this->debug > 0) {\n                error_log('New LP - In scorm::reimport_manifest() - Could not find manifest file at '.$manifest_file);\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Detects the encoding of a given manifest (a xml-text).\n     * It is possible the encoding of the manifest to be wrongly declared or\n     * not to be declared at all. The proposed method tries to resolve these problems.\n     *\n     * @param string $xml the input xml-text\n     *\n     * @return string the detected value of the input xml\n     */\n    private function detect_manifest_encoding(&$xml)\n    {\n        if (api_is_valid_utf8($xml)) {\n            return 'UTF-8';\n        }\n\n        if (preg_match(_PCRE_XML_ENCODING, $xml, $matches)) {\n            $declared_encoding = api_refine_encoding_id($matches[1]);\n        } else {\n            $declared_encoding = '';\n        }\n\n        if (!empty($declared_encoding) && !api_is_utf8($declared_encoding)) {\n            return $declared_encoding;\n        }\n\n        $test_string = '';\n        if (preg_match_all('/<langstring[^>]*>(.*)<\\/langstring>/m', $xml, $matches)) {\n            $test_string = implode(\"\\n\", $matches[1]);\n            unset($matches);\n        }\n        if (preg_match_all('/<title[^>]*>(.*)<\\/title>/m', $xml, $matches)) {\n            $test_string .= \"\\n\".implode(\"\\n\", $matches[1]);\n            unset($matches);\n        }\n        if (empty($test_string)) {\n            $test_string = $xml;\n        }\n\n        return api_detect_encoding($test_string);\n    }\n}\n"], "filenames": ["main/admin/user_import.php", "main/admin/user_update_import.php", "main/inc/lib/import.lib.php", "main/inc/lib/myspace.lib.php", "main/lp/scorm.class.php"], "buggy_code_start_loc": [1, 259, 1, 3730, 98], "buggy_code_end_loc": [621, 261, 85, 3732, 100], "fixing_code_start_loc": [2, 259, 2, 3730, 98], "fixing_code_end_loc": [637, 260, 101, 3731, 101], "type": "CWE-611", "message": "admin/user_import.php in Chamilo 1.11.x reads XML data without disabling the ability to load external entities.", "other": {"cve": {"id": "CVE-2021-32925", "sourceIdentifier": "cve@mitre.org", "published": "2021-05-13T18:15:11.597", "lastModified": "2022-06-28T14:11:45.273", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "admin/user_import.php in Chamilo 1.11.x reads XML data without disabling the ability to load external entities."}, {"lang": "es", "value": "el archivo admin/user_import.php en Chamilo versi\u00f3n 1.11.x, lee datos XML sin deshabilitar la capacidad de cargar entidades externas"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndIncluding": "1.11.16", "matchCriteriaId": "E7ADDA4A-9064-4D82-BA16-964A6DE5FF6E"}]}]}], "references": [{"url": "https://github.com/andrejspuler/writeups/blob/main/chamilo-lms/README.md#authenticated-rcelfi-in-user-import-via-xml-external-entity---cve-2021-32925", "source": "cve@mitre.org", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/e71437c8de809044ba3ae1b181d70857c050a3e9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-58-2021-05-12-High-impact-very-low-risk-LFIRCE-vulnerability-in-users-import", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.php.net/manual/en/function.libxml-disable-entity-loader.php", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/e71437c8de809044ba3ae1b181d70857c050a3e9"}}