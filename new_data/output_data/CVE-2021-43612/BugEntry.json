{"buggy_code": ["lldpd (1.0.13)\n * Fix:\n   + Add support for 2.5G, 5G, 25G and 50G based Ethernet (#475)\n   + Fix link-down detection on OpenBSD (#476)\n   + Fix LLDP packets encapsuled in VLAN 0 in some conditions\n\nlldpd (1.0.12)\n  * Fix:\n    + Use a dedicated file lock to prevent concurrent changes from lldpcli.\n    + Require/display powerpairs for Dot3 power even when device type is PD.\n  * Changes:\n    + Provide a Docker image and make it available on GitHub.\n\nlldpd (1.0.11)\n  * Changes:\n    + Disable LLDP in firmware for Intel X7xx cards.\n  * Fix:\n    + Ensure Intel E8xx cards can transmit LLDP packets.\n\nlldpd (1.0.10)\n  * Fix:\n    + Fix chroot directory creation.\n\nlldpd (1.0.9)\n  * Fix:\n    + Do not use interface alias if we set it ourselves.\n    + More memory leak fixes on duplicate TLVs in LLDP, CDP and EDP\n      (related to CVE-2020-27827).\n    + On OSX, handle empty groups correctly when looking for a free UID/GID.\n  * Changes:\n    + Display port status with \"show interfaces\".\n    + Do not display \"age\" and \"via\" when using \"show interfaces\".\n\nlldpd (1.0.8)\n  * Fix:\n    + Out-of-bound read access when parsing LLDP-MED civic address in\n      liblldpctl for malformed fields.\n    + Fix memory leak when receiving LLDPU with duplicate fields.\n      CVE-2020-27827.\n  * Changes:\n    + Enable \"router\" capability bit when IPv6 routing is enabled.\n\nlldpd (1.0.7)\n  * Fix:\n    + Do not listen only to LLDP packets on Linux. When an interface\n      is enslaved to an Open vSwitch, incoming packets are missed.\n\nlldpd (1.0.6)\n  * Fix:\n    + Do not loose chassis local information when interface status changes.\n    + Fix SNMP walk on lldpRemTable when missing remote system\n      name or description.\n    + Remove length limitation on system description and platform.\n  * Changes:\n    + Deprecate use of lldpctl_watch_callback(). Use\n      lldpctl_watch_callback2() instead.\n    + Upgrade embedded libevent to 2.1.11-stable\n    + Add support of sending LLDP frames on a configured VLAN\n\nlldpd (1.0.5)\n  * Changes:\n    + Interface names are also matched for management addresses.\n    + On Linux, only register protocol handler for LLDP when only LLDP\n      is enabled.\n    + Stricter on LLDP incoming frames validation.\n    + Add support for VLAN-aware bridges for Linux (no range support).\n    + Add support for 802.3BT (no SNMP support).\n    + Add support for millisecond-grained tx-interval (Jean-Pierre Tosoni).\n    + Use generic names for VLAN names, instead of interface names (eg\n      vlan100 instead of eth1.100).\n  * Fix:\n    + Don't clear chassis TLV on shutdown LLDPDU.\n    + Don't require/display powerpairs for Dot3 power when device type\n      is PD.\n\nlldpd (1.0.4)\n  * Changes:\n    + Add \"configure system max-neighbors XX\" command to modify maximum\n      of neighbors accepted per port.\n    + Implement lldpRemOrgDefInfoTable table for custom TLVs.\n  * Fix:\n    + Better compliance for statsTLVsUnrecognizedTotal and\n      statsAgeoutsTotal counters.\n    + On Linux, handle rare blocking case in Netlink code.\n\nlldpd (1.0.3)\n  * Fix:\n    + Fix creation of chroot directory.\n\nlldpd (1.0.2)\n  * Changes:\n    + On Linux, the monitor process will now drop its privileges\n      instead of running as root. It will keep CAP_NET_RAW,\n      CAP_NET_ADMIN and CAP_DAC_OVERRIDE capabilities.\n    + Support for CDP PD PoE (with negotiation). Thanks to Gustav\n      Wiklander.\n    + Move support for bonded devices on Linux < 2.6.27 into the\n      `--enable-oldies` option. This avoids duplicate packets\n      starting from Linux 4.19.\n\nlldpd (1.0.1)\n  * Fix:\n    + Use \"mkdir -p\" instead of \"mkdir\" in systemd unit.\n\nlldpd (1.0.0)\n  * Changes:\n    + Chassis ID can be set to an arbitrary value with \"configure system\n      chassisid\".\n    + Port description can be overriden directly with \"configure lldp\n      portdescription\".\n    + Command \"configure system interface permanent\" enables one to\n      specify a pattern for interfaces to be kept in memory even when\n      they are removed from the system.\n  * Fix:\n    + Ensure chassis-related changes are propagated immediately.\n    + Ensure management address change is correctly detected.\n\nlldpd (0.9.9)\n  * Changes:\n    + lldpcli can now display local interfaces with LLDP data sent on\n      each of them (\"show interfaces\").\n    + As Dot3 PD device, echo back allocated value from PSE device.\n  * Fix:\n    + Don't remove interfaces when they are released from a bridge.\n    + Don't use \"expect stop\" with Upstart. It's buggy.\n\nlldpd (0.9.8)\n  * Changes:\n    + \"Station\" capability is only set if no other bit is set.\n    + Use ethtool to get permanent address for bonds and teams. This\n      might provide different results than the previous method. Some\n      devices may still use the previous method.\n    + Don't run ethtool as root. Kernels older than 2.6.19 won't get\n      link information anymore.\n    + Add \"configure system hostname .\" option to not use a FQDN\n      for system name.\n    + Add \"-f json0\" to provide a more regular/machine-parsable output\n      to JSON output, even when not compiled with --enable-json0.\n  * Fixes:\n    + Handle team interfaces like a bond. Real MAC address cannot be\n      retrieved yet.\n\nlldpd (0.9.7)\n  * Changes:\n    + Attach remote TTL to port instead of chassis.\n    + JSON support is now built-in and unconditionally enabled. Use\n      --enable-json0 to keep the pre-0.9.2 json-c format.\n    + When logging to syslog and daemonizing, don't log to stderr.\n    + vxlan interfaces are now ignored as they are multi-point interfaces.\n    + Maximum number of neighbors for an interface is increased from 4 to 32.\n\nlldpd (0.9.6)\n  * Changes:\n    + Add a compile-time option to restore pre-0.9.2 JSON format (when\n      using json-c). Use `--enable-json0` to enable this option.\n    + Support for newer ethtool interface on Linux\n      (ETHTOOL_GLINKSETTINGS) and additional speed settings.\n    + Current MAU type is displayed even when autoneg is off.\n    + Increase netlink receive buffer by default. Can be changed at\n      compile-time through ./configure.\n  * Fixes:\n    + Correctly parse LLDP-MED civic address when the length of the\n      TLV exceeds the length of the address.\n    + Fix 100% CPU on some rare error condition.\n    + Fix lost timer when an interface is enslaved on Linux.\n\nlldpd (0.9.5)\n  * Changes:\n    + More Ethernet media supported. However, RFC4836 is quite\n      out-of-date with respected to 10G+ speeds, bringing some\n      inaccuracies.\n    + Directly get media information for an interface without using\n      the privileged process.\n    + LLDP-MED capability TLV is not sent when LLDP-MED is not enabled,\n      even if other LLDP-MED TLV are present.\n  * Fixes:\n    + Compilation fix with older versions of GCC.\n    + Don't use ethtool at all to get real MAC address for enslaved\n      devices (always use /proc).\n\nlldpd (0.9.4)\n  * Changes:\n    + Make lldpd accepts a `-p` option to specify the PID file.\n    + Ability to change multicast MAC address to two additional values\n      to reach customer bridges.\n    + lldpcli will now display chassis TTL when detailed view is enabled.\n  * Fixes:\n    + Fix setting of local value for port ID.\n    + Fix compilation with BSD make.\n    + Ensure lldpcli returns an error code on invalid commands.\n\nlldpd (0.9.3)\n  * Changes:\n    + Do not rely on support of constructors for liblldpctl.\n    + Always log to stderr (even in addition to syslog).\n    + `lldpcli watch` accepts a limit on the number of received events.\n  * Fixes:\n    + `lldpcli -f {xml,json} watch` should work now.\n    + Consider `veth` interfaces as physical interfaces.\n\nlldpd (0.9.2)\n  * Changes:\n    + Ability to add/remove/replace custom TLV from lldpcli.\n    + LLDP-MED capabilities are displayed differently in lldpcli.\n    + Limit the maximum depth (5) when trying to apply a VLAN.\n    + Change JSON output format when using json-c to match Jansson\n      output.\n    + Integration tests for the major parts of lldpd, including use of\n      address and leak sanitizer.\n  * Fixes:\n    + LLDP-MED POE TLV are now displayed in lldpcli.\n    + Ignore lower link when it is in another namespace.\n    + Fix various problems with interfaces being enslaved.\n    + Fix a memory leak when modifying port-related settings.\n\nlldpd (0.9.1)\n  * Changes:\n    + Rework packaging for OS X to make it work with El Capitan. To\n      simplify a bit, it is not possible anymore to build fat\n      binaries. Latest version of OS X supporting 32bit was 10.6.\n  * Fixes:\n    + By default, when using port alias as description, use port name\n      as port ID.\n    + Miscellaneous fixes with netlink cache.\n    + Ensure large netlink messages can be received.\n\nlldpd (0.9.0)\n  * Changes:\n    + Don't rely on libnl3 for netlink. Reuse the previous code and\n      implement a lighweight cache.\n\nlldpd (0.8.0, never released)\n  * Changes:\n    + PIE is now disabled by default. It's too difficult to reliably\n      detect if it works. Use --enable-pie to enable it.\n    + Retrieve the permanent MAC address of an interface through\n      ethtool for Linux if /proc/net/bonding is not available.\n    + Running lldpd with \"-d\" will keep the process in foreground but\n      logs will still go to syslog. To log to the console, add at\n      least one \"-d\".\n    + Fix minimal kernel version to 2.6.39. Add a runtime warning when\n      this is not the case.\n    + Remove old bridge code (the one using ioctl).\n    + Don't discard down interfaces. Notably, this enables us to keep\n      their specific configuration if any.\n    + For Linux, switch to libnl3. Be aware of the licensing issues in\n      case of static linking.\n    + Introduce the notion of default local port. New interfaces will\n      use it as a base. This allows setting various MED stuff.\n    + Provide an apparmor profile (untested).\n  * Fixes:\n    + Fix a buffer overflow when receiving a too large management\n      address TLV. Unless hardening has been disabled, this overflow\n      cannot be used for arbitrary code execution.\n    + Update LLDP-MED policy L2 priority values to match\n      802.1Q-2005. This may be a breaking change.\n\nlldpd (0.7.17)\n  * Fixes:\n    + Fix the way libevent configure is called.\n    + Fix an infinite loop when using veth on Linux 4.1+ kernels.\n    + Make CDP advertise the appropriate kernel name as platform,\n      not just \"Linux\".\n\nlldpd (0.7.16)\n  * Changes:\n    + For Linux, 2.6.32 is now the minimal required kernel. When using\n      an older kernel, use `--enable-oldies`.\n    + For Linux, use netlink to retrieve information about bridges,\n      VLAN and bonds. The code was contributed by Cumulus Networks.\n    + Use symbol versioning for liblldpctl.so.\n    + Ability to get local chassis information with \"show\n      chassis\".\n    + The library also has the same ability with the\n      `lldpctl_get_local_chassis()` function. It is also possible to\n      get a chassis atom from a port with `lldpctl_k_port_chassis`\n      key. This is now the preferred way to retrieve chassis related\n      information.\n  * Fixes:\n    + Fix build on OS X.\n    + Accept \"language\" when configuring MED location as a civic address.\n\nlldpd (0.7.15)\n  * Changes:\n    + Optional features can be configured with \"auto\" to autodetect if\n      they are usable. This is the default value for JSON and XML support.\n    + Ability to send and decode custom/unknown TLV. Thanks to Alexandru\n      Ardelean.\n    + Modify checksum function. While this should be strictly\n      equivalent, if you notice CDP packets not accepted anymore, this\n      change is the first culprit.\n\nlldpd (0.7.14)\n  * Changes:\n    + Shutdown LLPDU are sent on MSAP change and when lldpd exits.\n    + When an exact IP is provided as a management pattern, use it\n      unconditionally.\n    + Ability to set port ID and description to an arbitrary value,\n      thanks to Alexandru Ardelean.\n  * Fixes:\n    + Incorrect boundary check when decoding management address and\n      protocol identity may lead to lldpd crash when processing\n      malformed LLDPDU.\n    + Many edge cases where lldpd was leaving hanging processes after\n      crashing.\n\nlldpd (0.7.13)\n  * Fixes:\n    + Unbreak customization of Unix socket path from command line.\n\nlldpd (0.7.12)\n  * Changes:\n    + Interface pattern, management pattern, system description,\n      system platform and system hostname can be unconfigured to their\n      default values.\n  * Fixes:\n    + Don't complain when parsing a commented line.\n    + Correctly persist configuration changes for \"system interface\n      promiscuous\", \"system interface description\" \"med fast-start\n      enable\", \"pause\" and \"resume\".\n    + Fix listening on bond devices for old kernels (< 2.6.27).\n\nlldpd (0.7.11)\n  * Changes:\n    + Ship bash and zsh completion.\n    + Abort when some command-line options are repeated.\n  * Fixes:\n    + Handle correctly read failures in liblldpctl.\n\nlldpd (0.7.10)\n  * Changes:\n    + Ability to set promiscuous mode to work around bugs of some\n      switches encapsulating LLDP frames inside 802.1Q frames.\n    + JSON support for lldpcli can use json-c instead of jansson,\n      thanks to Michel Stam.\n  * Fixes:\n    + Fix checksum computation for Cisco CDP.\n    + Fix ability to disable LLDP.\n    + Fix seccomp sandbox, thanks to Patrick McLean.\n\nlldpd (0.7.9)\n  * Changes:\n    + Default location for chroot, socket and PID are now configurable\n      in `./configure`. The default location is based on the value of\n      `runstatedir` which in turn may be based on the value of\n      `localstatedir` which defaults to `/usr/local/var`. Therefore,\n      to get the previous locations, lldpd should be configured with\n      `./configure --localstatedir=/var`.\n    + Add support for shutdown LLDPU.\n    + Ability to configure IP management pattern from lldpcli.\n    + Ability to choose what port ID should be (MAC or interface name).\n  * Fixes:\n    + Fix `configure system bond-slave-src-mac-type local`. Also use\n      it as default.\n\nlldpd (0.7.8)\n  * Changes:\n    + Android support\n    + Add the possibility to disable privilege separation (lower\n      memory consumption, lower security, don't do it).\n    + Interfaces can now be whitelisted. For example, *,!eth*,!!eth1\n      is a valid pattern for all interfaces except eth ones, except\n      eth1. Moreover, on exact match, an matching interface\n      circumvents most sanity checks (like VLAN handling).\n    + Ability to override the hostname.\n  * Fixes:\n    + Don't hard-code default values for system name, system\n      description and port description. When the field is not present,\n      just don't display it.\n    + Fix lldpcli behaviour when suid.\n    + On OSX, don't use p2p0 interfaces: it would break WLAN.\n    + Fix SNMP support on RHEL.\n\nlldpd (0.7.7)\n  * Changes:\n    + Use a locally administered MAC address or an arbitrary one\n      instead of null MAC address for bond devices on Linux. This is\n      configurable through `lldpcli`.\n    + Add support for \"team\" driver (alternative to bond devices).\n    + Preliminary support for DTrace/systemtap.\n    + Preliminary support for seccomp (for monitor process).\n    + Setup chroot inside lldpd instead of relying on init script.\n  * Fixes:\n    + Various bugs related to fixed point number handling (for\n      coordinates in LLDP-MED)\n    + Fix a regression in how MAC address of an enslaved device is\n      retrieved.\n\nlldpd (0.7.6)\n  * Changes:\n    + Provide a way to build packages for OSX.\n    + Add an option to update interface description with neighbor name.\n  * Fixes:\n    + Compilation fix for OSX 10.6.\n\nlldpd (0.7.5)\n  * Fixes:\n    + Segfault while tokenizing in lldpcli.\n\nlldpd (0.7.4)\n  * Fixes:\n    + Segfault in lldpcli.\n    + Memory leak in liblldpctl when using a custom log handler.\n    + Fix some unaligned memory accesses.\n    + Fix frame reception on OpenBSD.\n  * Changes:\n    + Allow to configure hold value from lldpcli (and hence the TTL).\n    + Allow to configure pattern for valid interfaces from lldpcli.\n    + Allow to override system description from lldpcli.\n    + Display the neighbor connected as the process title (or the\n      number of connected neighbors).\n\nlldpd (0.7.3)\n  * Changes:\n    + DragonFly BSD support.\n    + Solaris support (incomplete).\n    + LLDP-MED fast start support (thanks to Roopa Prabhu).\n    + Provide global statistics through \"show statistics summary\"\n      command (thanks to Roopa Prabhu).\n  * Fixes:\n    + Fix IPv4/IPv6 address discovery in Linux.\n\nlldpd (0.7.2)\n  * Changes:\n    + lldpd can be configured through /etc/lldpd.conf and\n      /etc/lldpd.d. All commands accepted by lldpcli are accepted.\n    + Lock BPF interfaces before handing them to chrooted process on\n      BSD.\n    + Limit the number of neighbors for each port to 4 (per protocol).\n    + Force CDPv2 protocol with argument `-ccc`.\n    + Provide port statistics through \"show statistics\" command\n      (thanks to Roopa Prabhu).\n  * Fixes:\n    + Driver whitelisting is done before checking if an interface has\n      a lower interface in Linux.\n    + Expire remote ports and chassis in a timely manner.\n\nlldpd (0.7.1)\n  * Changes:\n    + Mac OS X support, sponsored by Xcloud, Mac cloud server hosting\n      provider. http://xcloud.me/\n    + Upstart and systemd support.\n    + Remove Unix socket when there is no process listening.\n\nlldpd (0.7.0)\n  * Changes:\n    + FreeBSD support.\n    + OpenBSD support.\n    + NetBSD support.\n    + Detect interface changes.\n    + CLI for lldpctl: lldpcli.\n    + Allow to disable LLDP protocol (with `-ll`). In this case, the\n      first enabled protocol will be used when no neighbor is detected.\n    + Allow to filter debug logs using tokens. Add more debug logs.\n    + lldpctl can now output JSON.\n    + Use netlink to gather interface information on Linux.\n    + Don't use ioctl for bridges anymore on Linux. The configure\n      option `--enable-oldies` allow to reenable their uses for\n      systems not supporting sysfs.\n\nlldpd (0.6.1)\n  * Changes:\n    + Provide liblldpctl.so, a library to interface with lldpd. The\n      documentation is provided through Doxygen. See src/lib/lldpctl.h\n      which contains all the exported functions.\n    + Make lldpctl uses liblldpctl.so.\n    + Add a \"watch\" option to lldpctl to monitor neighbor changes.\n    + Add the possibility to display the current configuration of\n      lldpd with lldpctl. Also add the possibility to reset the\n      current transmit delay.\n\nlldpd (0.6)\n  * Changes:\n    + Allow lldpctl to display hidden ports.\n    + Add a switch to specify interfaces to use to get chassis ID.\n    + Support for multiple management addresses and IPv6 management\n      addresses. Contributed by Jo\u00e3o Valverde.\n    + Switch to libevent. See README.md for details.\n    + Partial rewrite of the SNMP part. Less code.\n    + Unit tests for SNMP.\n    + Major rewrite of the protocol between lldpd and lldpctl. Less\n      code.\n  * Fixes:\n    + Several small SNMP fixes (discovered by unit tests).\n\nlldpd (0.5.7)\n * Fixes:\n    + Configure issue with NetSNMP and some linkers\n    + Fix infinite loop for the receive part: on certain conditions,\n      lldpd will stop sending packets and stop updating local data.\n\nlldpd (0.5.6)\n  * Changes:\n    + Send and receive native VLAN TLV with CDP\n    + Add a whitelist for some drivers (currently: dsa and veth)\n  * Fixes:\n    + Compilation issues with NetSNMP 5.7 (and with earlier versions too)\n    + Small optimization of BPF filter\n\nlldpd (0.5.5)\n  * Changes:\n    + Support for PPVID and PI Dot1 TLV, thanks to Shuah Khan.\n    + Extend whitelist with possibility to blacklist.\n  * Fixes:\n    + Key/value output was incorrect when a dot was present in\n      interface names. This is fixed but it is preferable to use XML\n      output since the parsing is more difficult in this case.\n    + Only grab DMI information once. Only uses DMI for x86 platform.\n    + Padding issues with socket protocol. This introduces a change in\n      the socket protocol!\n    + Fix a segfault when neither /etc/os-release nor lsb_release\n      are available.\n\nlldpd (0.5.4)\n  * Changes:\n    + Get OS information from /etc/os-release if available. Patch from\n      Michael Tremer.\n    + Add a flag to specify which interfaces lldpd should listen to.\n\nlldpd (0.5.3)\n  * Changes:\n    + Handle Dot3 POE-MDI TLV (802.3af and 802.3at).\n    + Allow to set Dot3 POE-MDI from lldpctl.\n  * Fixes:\n    + Allow root to change configuration of lldpd when lldpctl has suid set.\n\nlldpd (0.5.2)\n  * Changes:\n    + More flexible smart mode and new default. Manual page has been updated.\n    + Add a \"receive-only\" mode with \"-r\" switch.\n\nlldpd (0.5.1)\n  * Changes:\n    + Allow to force a protocol even when no peer for this protocol is\n      detected.\n    + Add a smart mode that allows to discard bogus port information,\n      for example CDP packets that are flooded through a switch that\n      does not support CDP.\n    + Allow to set LLDP-MED network policy from lldpctl, thanks to a patch from\n      Philipp Kempgen.\n    + Allow to set LLDP-MED POE-MDI from lldpctl.\n    + Add a summary of available options in \"lldpd -h\" and \"lldpctl -h\",\n      thanks to a patch from Jorge Boncompte.\n    + Add a new output (keyvalue) for lldpctl.\n    + Listen on VLAN using an appropriate BPF filter, VLAN\n      decapsulation. Older \"listen on vlan\" feature is discarded. See\n      README for more information on the new feature.\n    + Use output of lsb_release if available for system description.\n  * Fixes:\n    + Ignore interface with no queue. It should filter out interfaces\n      like \"vnet0\" that would fail if we try to send something on them.\n    + Don't check CDP checksums (not really a fix but it appears that\n      Cisco checksum have some difficult corner cases).\n\nlldpd (0.5.0)\n  * Changes:\n    + lldpd can now handle several systems on the same port. This\n      modification also allows to speak to a switch using CDP and LLDP\n      for example.\n    + The way that lldpd gathers information for each port has been\n      abstracted. This should allow to support more systems (BSD for\n      examples) or switch cores in the future. Sending/receive support\n      is also abstracted.\n    + Add \"-k\" switch to avoid to emit too much information on running\n      kernel.\n    + Support of ifAlias with kernel >= 2.6.28\n    + Lot of portability stuff. lldpd can now be compiled on RHEL\n      2.1. Still Linux-only though.\n    + Add an option to specify AgentX socket (-X).\n    + Add some unit tests\n    + lldpctl has been reworked; it is now able to output data in XML\n      format for easier parsing. Patches were provided by Andreas\n      Hofmeister.\n  * Fixes:\n    + Fix EDP VLAN handling\n    + Silent warnings about bridge stuff.\n    + Copy /etc/localtime into chroot before starting lldpd daemon to\n      ensure correct timestamps for logs.\n\nlldpd (0.4.1)\n  * Fix EDP handling when there is no VLAN\n  * Fix CDP version to not always be 1\n  * Misc fix:\n     + incorrect number of arguments for a LLOG_INFO call\n     + fix SNMP last change in case this change occurs before start time\n\nlldpd (0.4)\n  * Rewrite of packet builder and parser to be able to cope with\n    architecture that cannot do unaligned read. For decoder, we don't\n    cast structures any more since they can be unaligned. For encoder,\n    we use memcpy through the use of macro that build packets step by\n    step.\n\nlldpd (0.3.2)\n  * Fix LLDP-MED support\n\nlldpd (0.3.1)\n  * Misc fixes, including memory leaks\n\nlldpd (0.3)\n  * Initial support of LLDP-MED\n  * Fix for bridge detection (don't send bridge ioctl on random interfaces)\n  * For bonded devices, get the real hardware address. For inactive\n    slaves, transmit using a random MAC address.\n\nlldpd (0.2.1)\n  * Fix a syntax error in manual page\n  * Fix open() calls\n\nlldpd (0.2)\n  * Add privilege separation\n  * Add FDP support\n  * Support CDP encapsulated into native VLAN\n  * Various fixes\n\nlldpd (0.1)\n  * Initial release\n", "/* -*- mode: c; c-file-style: \"openbsd\" -*- */\n/*\n * Copyright (c) 2008 Vincent Bernat <bernat@luffy.cx>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#include \"../lldpd.h\"\n#include \"../frame.h\"\n\n#ifdef ENABLE_SONMP\n\n#include <stdio.h>\n#include <unistd.h>\n#include <errno.h>\n#include <arpa/inet.h>\n\nstatic struct sonmp_chassis sonmp_chassis_types[] = {\n\t{1, \"unknown (via SONMP)\"},\n\t{2, \"Nortel 3000\"},\n\t{3, \"Nortel 3030\"},\n\t{4, \"Nortel 2310\"},\n\t{5, \"Nortel 2810\"},\n\t{6, \"Nortel 2912\"},\n\t{7, \"Nortel 2914\"},\n\t{8, \"Nortel 271x\"},\n\t{9, \"Nortel 2813\"},\n\t{10, \"Nortel 2814\"},\n\t{11, \"Nortel 2915\"},\n\t{12, \"Nortel 5000\"},\n\t{13, \"Nortel 2813SA\"},\n\t{14, \"Nortel 2814SA\"},\n\t{15, \"Nortel 810M\"},\n\t{16, \"Nortel EtherCell\"},\n\t{17, \"Nortel 5005\"},\n\t{18, \"Alcatel Ethernet workgroup conc.\"},\n\t{20, \"Nortel 2715SA\"},\n\t{21, \"Nortel 2486\"},\n\t{22, \"Nortel 28000 series\"},\n\t{23, \"Nortel 23000 series\"},\n\t{24, \"Nortel 5DN00x series\"},\n\t{25, \"BayStack Ethernet\"},\n\t{26, \"Nortel 23100 series\"},\n\t{27, \"Nortel 100Base-T Hub\"},\n\t{28, \"Nortel 3000 Fast Ethernet\"},\n\t{29, \"Nortel Orion switch\"},\n\t{30, \"unknown\"},\n\t{31, \"Nortel DDS \"},\n\t{32, \"Nortel Centillion\"},\n\t{33, \"Nortel Centillion\"},\n\t{34, \"Nortel Centillion\"},\n\t{35, \"BayStack 301\"},\n\t{36, \"BayStack TokenRing Hub\"},\n\t{37, \"Nortel FVC Multimedia Switch\"},\n\t{38, \"Nortel Switch Node\"},\n\t{39, \"BayStack 302 Switch\"},\n\t{40, \"BayStack 350 Switch\"},\n\t{41, \"BayStack 150 Ethernet Hub\"},\n\t{42, \"Nortel Centillion 50N switch\"},\n\t{43, \"Nortel Centillion 50T switch\"},\n\t{44, \"BayStack 303 and 304 Switches\"},\n\t{45, \"BayStack 200 Ethernet Hub\"},\n\t{46, \"BayStack 250 10/100 Ethernet Hub\"},\n\t{48, \"BayStack 450 10/100/1000 Switches\"},\n\t{49, \"BayStack 410 10/100 Switches\"},\n\t{50, \"Nortel Ethernet Routing 1200 L3 Switch\"},\n\t{51, \"Nortel Ethernet Routing 1250 L3 Switch\"},\n\t{52, \"Nortel Ethernet Routing 1100 L3 Switch\"},\n\t{53, \"Nortel Ethernet Routing 1150 L3 Switch\"},\n\t{54, \"Nortel Ethernet Routing 1050 L3 Switch\"},\n\t{55, \"Nortel Ethernet Routing 1051 L3 Switch\"},\n\t{56, \"Nortel Ethernet Routing 8610 L3 Switch\"},\n\t{57, \"Nortel Ethernet Routing 8606 L3 Switch\"},\n\t{58, \"Nortel Ethernet Routing Switch 8010\"},\n\t{59, \"Nortel Ethernet Routing Switch 8006\"},\n\t{60, \"BayStack 670 wireless access point\"},\n\t{61, \"Nortel Ethernet Routing Switch 740 \"},\n\t{62, \"Nortel Ethernet Routing Switch 750 \"},\n\t{63, \"Nortel Ethernet Routing Switch 790\"},\n\t{64, \"Nortel Business Policy Switch 2000 10/100 Switches\"},\n\t{65, \"Nortel Ethernet Routing 8110 L2 Switch\"},\n\t{66, \"Nortel Ethernet Routing 8106 L2 Switch\"},\n\t{67, \"BayStack 3580 Gig Switch\"},\n\t{68, \"BayStack 10 Power Supply Unit\"},\n\t{69, \"BayStack 420 10/100 Switch\"},\n\t{70, \"OPTera Metro 1200 Ethernet Service Module\"},\n\t{71, \"Nortel Ethernet Routing Switch 8010co\"},\n\t{72, \"Nortel Ethernet Routing 8610co L3 switch\"},\n\t{73, \"Nortel Ethernet Routing 8110co L2 switch\"},\n\t{74, \"Nortel Ethernet Routing 8003\"},\n\t{75, \"Nortel Ethernet Routing 8603 L3 switch\"},\n\t{76, \"Nortel Ethernet Routing 8103 L2 switch\"},\n\t{77, \"BayStack 380 10/100/1000 Switch\"},\n\t{78, \"Nortel Ethernet Switch 470-48T\"},\n\t{79, \"OPTera Metro 1450 Ethernet Service Module\"},\n\t{80, \"OPTera Metro 1400 Ethernet Service Module\"},\n\t{81, \"Alteon Switch Family\"},\n\t{82, \"Ethernet Switch 460-24T-PWR\"},\n\t{83, \"OPTera Metro 8010 OPM L2 Switch\"},\n\t{84, \"OPTera Metro 8010co OPM L2 Switch\"},\n\t{85, \"OPTera Metro 8006 OPM L2 Switch\"},\n\t{86, \"OPTera Metro 8003 OPM L2 Switch\"},\n\t{87, \"Alteon 180e\"},\n\t{88, \"Alteon AD3\"},\n\t{89, \"Alteon 184\"},\n\t{90, \"Alteon AD4\"},\n\t{91, \"Nortel Ethernet Routing 1424 L3 switch\"},\n\t{92, \"Nortel Ethernet Routing 1648 L3 switch\"},\n\t{93, \"Nortel Ethernet Routing 1612 L3 switch\"},\n\t{94, \"Nortel Ethernet Routing 1624 L3 switch \"},\n\t{95, \"BayStack 380-24F Fiber 1000 Switch\"},\n\t{96, \"Nortel Ethernet Routing Switch 5510-24T\"},\n\t{97, \"Nortel Ethernet Routing Switch 5510-48T\"},\n\t{98, \"Nortel Ethernet Switch 470-24T\"},\n\t{99, \"Nortel Networks Wireless LAN Access Point 2220\"},\n\t{100, \"Ethernet Routing RBS 2402 L3 switch\"},\n\t{101, \"Alteon Application Switch 2424  \"},\n\t{102, \"Alteon Application Switch 2224 \"},\n\t{103, \"Alteon Application Switch 2208 \"},\n\t{104, \"Alteon Application Switch 2216\"},\n\t{105, \"Alteon Application Switch 3408\"},\n\t{106, \"Alteon Application Switch 3416\"},\n\t{107, \"Nortel Networks Wireless LAN SecuritySwitch 2250\"},\n\t{108, \"Ethernet Switch 425-48T\"},\n\t{109, \"Ethernet Switch 425-24T\"},\n\t{110, \"Nortel Networks Wireless LAN Access Point 2221\"},\n\t{111, \"Nortel Metro Ethernet Service Unit 24-T SPF switch\"},\n\t{112, \"Nortel Metro Ethernet Service Unit 24-T LX DC switch\"},\n\t{113, \"Nortel Ethernet Routing Switch 8300 10-slot chassis\"},\n\t{114, \"Nortel Ethernet Routing Switch 8300 6-slot chassis\"},\n\t{115, \"Nortel Ethernet Routing Switch 5520-24T-PWR\"},\n\t{116, \"Nortel Ethernet Routing Switch 5520-48T-PWR\"},\n\t{117, \"Nortel Networks VPN Gateway 3050\"},\n\t{118, \"Alteon SSL 310 10/100\"},\n\t{119, \"Alteon SSL 310 10/100 Fiber\"},\n\t{120, \"Alteon SSL 310 10/100 FIPS\"},\n\t{121, \"Alteon SSL 410 10/100/1000\"},\n\t{122, \"Alteon SSL 410 10/100/1000 Fiber\"},\n\t{123, \"Alteon Application Switch 2424-SSL\"},\n\t{124, \"Nortel Ethernet Switch 325-24T\"},\n\t{125, \"Nortel Ethernet Switch 325-24G\"},\n\t{126, \"Nortel Networks Wireless LAN Access Point 2225\"},\n\t{127, \"Nortel Networks Wireless LAN SecuritySwitch 2270\"},\n\t{128, \"Nortel 24-port Ethernet Switch 470-24T-PWR\"},\n\t{129, \"Nortel 48-port Ethernet Switch 470-48T-PWR\"},\n\t{130, \"Nortel Ethernet Routing Switch 5530-24TFD\"},\n\t{131, \"Nortel Ethernet Switch 3510-24T\"},\n\t{132, \"Nortel Metro Ethernet Service Unit 12G AC L3 switch\"},\n\t{133, \"Nortel Metro Ethernet Service Unit 12G DC L3 switch\"},\n\t{134, \"Nortel Secure Access Switch\"},\n\t{135, \"Networks VPN Gateway 3070\"},\n\t{136, \"OPTera Metro 3500\"},\n\t{137, \"SMB BES 1010 24T\"},\n\t{138, \"SMB BES 1010 48T\"},\n\t{139, \"SMB BES 1020 24T PWR\"},\n\t{140, \"SMB BES 1020 48T PWR\"},\n\t{141, \"SMB BES 2010 24T\"},\n\t{142, \"SMB BES 2010 48T\"},\n\t{143, \"SMB BES 2020 24T PWR\"},\n\t{144, \"SMB BES 2020 48T PWR\"},\n\t{145, \"SMB BES 110 24T\"},\n\t{146, \"SMB BES 110 48T\"},\n\t{147, \"SMB BES 120 24T PWR\"},\n\t{148, \"SMB BES 120 48T PWR\"},\n\t{149, \"SMB BES 210 24T\"},\n\t{150, \"SMB BES 210 48T\"},\n\t{151, \"SMB BES 220 24T PWR\"},\n\t{152, \"SMB BES 220 48T PWR\"},\n\t{153, \"OME 6500\"},\n\t{0, \"unknown (via SONMP)\"},\n};\n\nint\nsonmp_send(struct lldpd *global,\n    struct lldpd_hardware *hardware)\n{\n\tconst u_int8_t mcastaddr[] = SONMP_MULTICAST_ADDR;\n\tconst u_int8_t llcorg[] = LLC_ORG_NORTEL;\n\tstruct lldpd_chassis *chassis;\n\tstruct lldpd_mgmt *mgmt;\n\tu_int8_t *packet, *pos, *pos_pid, *end;\n\tint length;\n\tstruct in_addr address;\n\n\tlog_debug(\"sonmp\", \"send SONMP PDU to %s\",\n\t    hardware->h_ifname);\n\n\tchassis = hardware->h_lport.p_chassis;\n\tlength = hardware->h_mtu;\n\tif ((packet = (u_int8_t*)calloc(1, length)) == NULL)\n\t\treturn ENOMEM;\n\tpos = packet;\n\n\t/* Ethernet header */\n\tif (!(\n\t      /* SONMP multicast address as target */\n\t      POKE_BYTES(mcastaddr, sizeof(mcastaddr)) &&\n\t      /* Source MAC addresss */\n\t      POKE_BYTES(&hardware->h_lladdr, ETHER_ADDR_LEN) &&\n\t      /* SONMP frame is of fixed size */\n\t      POKE_UINT16(SONMP_SIZE)))\n\t\tgoto toobig;\n\n\t/* LLC header */\n\tif (!(\n\t      /* DSAP and SSAP */\n\t      POKE_UINT8(0xaa) && POKE_UINT8(0xaa) &&\n\t      /* Control field */\n\t      POKE_UINT8(0x03) &&\n\t      /* ORG */\n\t      POKE_BYTES(llcorg, sizeof(llcorg)) &&\n\t      POKE_SAVE(pos_pid) && /* We will modify PID later to\n\t\t\t\t       create a new frame */\n\t      POKE_UINT16(LLC_PID_SONMP_HELLO)))\n\t\tgoto toobig;\n\n\n\taddress.s_addr = htonl(INADDR_ANY);\n\tTAILQ_FOREACH(mgmt, &chassis->c_mgmt, m_entries) {\n\t\tif (mgmt->m_family == LLDPD_AF_IPV4) {\n\t\t\taddress.s_addr = mgmt->m_addr.inet.s_addr;\n\t\t}\n\t\tbreak;\n\t}\n\n\t/* SONMP */\n\tif (!(\n\t\t  /* Our IP address */\n\t\t  POKE_BYTES(&address, sizeof(struct in_addr)) &&\n\t\t  /* Segment on three bytes, we don't have slots, so we\n\t\t skip the first two bytes */\n\t\t  POKE_UINT16(0) &&\n\t\t  POKE_UINT8(hardware->h_ifindex) &&\n\t\t  POKE_UINT8(1) &&  /* Chassis: Other */\n\t\t  POKE_UINT8(12) &&\t/* Back: Ethernet, Fast Ethernet and Gigabit */\n\t\t  POKE_UINT8(SONMP_TOPOLOGY_NEW) && /* Should work. We have no state */\n\t\t  POKE_UINT8(1) &&\t/* Links: Dunno what it is */\n\t\t  POKE_SAVE(end)))\n\t\tgoto toobig;\n\t\t\t\t\n\tif (interfaces_send_helper(global, hardware,\n\t\t(char *)packet, end - packet) == -1) {\n\t\tlog_warn(\"sonmp\", \"unable to send packet on real device for %s\",\n\t\t\t   hardware->h_ifname);\n\t\tfree(packet);\n\t\treturn ENETDOWN;\n\t}\n\n\tPOKE_RESTORE(pos_pid);\t/* Modify LLC PID */\n\t(void)POKE_UINT16(LLC_PID_SONMP_FLATNET);\n\tPOKE_RESTORE(packet);\t/* Go to the beginning */\n\tPEEK_DISCARD(ETHER_ADDR_LEN - 1); /* Modify the last byte of the MAC address */\n\t(void)POKE_UINT8(1);\n\n\tif (interfaces_send_helper(global, hardware,\n\t\t(char *)packet, end - packet) == -1) {\n\t\tlog_warn(\"sonmp\", \"unable to send second SONMP packet on real device for %s\",\n\t\t\t   hardware->h_ifname);\n\t\tfree(packet);\n\t\treturn ENETDOWN;\n\t}\n\n\tfree(packet);\n\thardware->h_tx_cnt++;\n\treturn 0;\n toobig:\n\tfree(packet);\n\treturn -1;\n}\n\nint\nsonmp_decode(struct lldpd *cfg, char *frame, int s,\n    struct lldpd_hardware *hardware,\n    struct lldpd_chassis **newchassis, struct lldpd_port **newport)\n{\n\tconst u_int8_t mcastaddr[] = SONMP_MULTICAST_ADDR;\n\tstruct lldpd_chassis *chassis;\n\tstruct lldpd_port *port;\n\tstruct lldpd_mgmt *mgmt;\n\tint length, i;\n\tu_int8_t *pos;\n\tu_int8_t seg[3], rchassis;\n\tstruct in_addr address;\n\n\tlog_debug(\"sonmp\", \"decode SONMP PDU from %s\",\n\t    hardware->h_ifname);\n\n\tif ((chassis = calloc(1, sizeof(struct lldpd_chassis))) == NULL) {\n\t\tlog_warn(\"sonmp\", \"failed to allocate remote chassis\");\n\t\treturn -1;\n\t}\n\tTAILQ_INIT(&chassis->c_mgmt);\n\tif ((port = calloc(1, sizeof(struct lldpd_port))) == NULL) {\n\t\tlog_warn(\"sonmp\", \"failed to allocate remote port\");\n\t\tfree(chassis);\n\t\treturn -1;\n\t}\n#ifdef ENABLE_DOT1\n\tTAILQ_INIT(&port->p_vlans);\n#endif\n\n\tlength = s;\n\tpos = (u_int8_t*)frame;\n\tif (length < SONMP_SIZE) {\n\t\tlog_warnx(\"sonmp\", \"too short SONMP frame received on %s\", hardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\tif (PEEK_CMP(mcastaddr, sizeof(mcastaddr)) != 0)\n\t\t/* There is two multicast address. We just handle only one of\n\t\t * them. */\n\t\tgoto malformed;\n\t/* We skip to LLC PID */\n\tPEEK_DISCARD(ETHER_ADDR_LEN); PEEK_DISCARD_UINT16;\n\tPEEK_DISCARD(6);\n\tif (PEEK_UINT16 != LLC_PID_SONMP_HELLO) {\n\t\tlog_debug(\"sonmp\", \"incorrect LLC protocol ID received for SONMP on %s\",\n\t\t    hardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\n\tchassis->c_id_subtype = LLDP_CHASSISID_SUBTYPE_ADDR;\n\tif ((chassis->c_id = calloc(1, sizeof(struct in_addr) + 1)) == NULL) {\n\t\tlog_warn(\"sonmp\", \"unable to allocate memory for chassis id on %s\",\n\t\t\thardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\tchassis->c_id_len = sizeof(struct in_addr) + 1;\n\tchassis->c_id[0] = 1;\n\tPEEK_BYTES(&address, sizeof(struct in_addr));\n\tmemcpy(chassis->c_id + 1, &address, sizeof(struct in_addr));\n\tif (asprintf(&chassis->c_name, \"%s\", inet_ntoa(address)) == -1) {\n\t\tlog_warnx(\"sonmp\", \"unable to write chassis name for %s\",\n\t\t    hardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\tPEEK_BYTES(seg, sizeof(seg));\n\trchassis = PEEK_UINT8;\n\tfor (i=0; sonmp_chassis_types[i].type != 0; i++) {\n\t\tif (sonmp_chassis_types[i].type == rchassis)\n\t\t\tbreak;\n\t}\n\tif (asprintf(&chassis->c_descr, \"%s\",\n\t\tsonmp_chassis_types[i].description) == -1) {\n\t\tlog_warnx(\"sonmp\", \"unable to write chassis description for %s\",\n\t\t    hardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\tmgmt = lldpd_alloc_mgmt(LLDPD_AF_IPV4, &address, sizeof(struct in_addr), 0);\n\tif (mgmt == NULL) {\n\t\tif (errno == ENOMEM)\n\t\t\tlog_warn(\"sonmp\", \"unable to allocate memory for management address\");\n\t\telse\n\t\t\tlog_warn(\"sonmp\", \"too large management address received on %s\",\n\t\t\t    hardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\tTAILQ_INSERT_TAIL(&chassis->c_mgmt, mgmt, m_entries);\n\tport->p_ttl = cfg?(cfg->g_config.c_tx_interval * cfg->g_config.c_tx_hold):\n\t    LLDPD_TTL;\n\tport->p_ttl = (port->p_ttl + 999) / 1000;\n\n\tport->p_id_subtype = LLDP_PORTID_SUBTYPE_LOCAL;\n\tif (asprintf(&port->p_id, \"%02x-%02x-%02x\",\n\t\tseg[0], seg[1], seg[2]) == -1) {\n\t\tlog_warn(\"sonmp\", \"unable to allocate memory for port id on %s\",\n\t\t    hardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\tport->p_id_len = strlen(port->p_id);\n\n\t/* Port description depend on the number of segments */\n\tif ((seg[0] == 0) && (seg[1] == 0)) {\n\t\tif (asprintf(&port->p_descr, \"port %d\",\n\t\t\tseg[2]) == -1) {\n\t\t\tlog_warnx(\"sonmp\", \"unable to write port description for %s\",\n\t\t\t    hardware->h_ifname);\n\t\t\tgoto malformed;\n\t\t}\n\t} else if (seg[0] == 0) {\n\t\tif (asprintf(&port->p_descr, \"port %d/%d\",\n\t\t\tseg[1], seg[2]) == -1) {\n\t\t\tlog_warnx(\"sonmp\", \"unable to write port description for %s\",\n\t\t\t    hardware->h_ifname);\n\t\t\tgoto malformed;\n\t\t}\n\t} else {\n\t\tif (asprintf(&port->p_descr, \"port %x:%x:%x\",\n\t\t\tseg[0], seg[1], seg[2]) == -1) {\n\t\t\tlog_warnx(\"sonmp\", \"unable to write port description for %s\",\n\t\t\t    hardware->h_ifname);\n\t\t\tgoto malformed;\n\t\t}\n\t}\n\t*newchassis = chassis;\n\t*newport = port;\n\treturn 1;\n\nmalformed:\n\tlldpd_chassis_cleanup(chassis, 1);\n\tlldpd_port_cleanup(port, 1);\n\tfree(port);\n\treturn -1;\n}\n\n#endif /* ENABLE_SONMP */\n", "/* -*- mode: c; c-file-style: \"openbsd\" -*- */\n/*\n * Copyright (c) 2008 Vincent Bernat <bernat@luffy.cx>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#ifndef _SONMP_H\n#define _SONMP_H\n\n#define SONMP_MULTICAST_ADDR\t{\t\t\t\t\t\t\\\n\t0x01, 0x00, 0x81, 0x00, 0x01, 0x00\t\t\t\t\t\\\n}\n#define LLC_ORG_NORTEL { 0x00, 0x00, 0x81 }\n#define LLC_PID_SONMP_HELLO 0x01a2\n#define LLC_PID_SONMP_FLATNET 0x01a1\n#define SONMP_SIZE (2*ETHER_ADDR_LEN + sizeof(u_int16_t) + 8)\n\nstruct sonmp_chassis {\n\tint type;\n\tchar *description;\n};\n\n#define SONMP_TOPOLOGY_CHANGED 1\n#define SONMP_TOPOLOGY_UNCHANGED 2\n#define SONMP_TOPOLOGY_NEW 3\n\n#endif /* _SONMP_H */\n", "/* -*- mode: c; c-file-style: \"openbsd\" -*- */\n/*\n * Copyright (c) 2015 Vincent Bernat <bernat@luffy.cx>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#include <stdlib.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <netinet/in.h>\n#include <check.h>\n#include \"common.h\"\n\nchar filenameprefix[] = \"sonmp_send\";\n\n#ifdef ENABLE_SONMP\n\nSTART_TEST (test_send_sonmp)\n{\n\tint n;\n\t/* Packet we should build:\nIEEE 802.3 Ethernet \n    Destination: Bay-Networks-(Synoptics)-autodiscovery (01:00:81:00:01:00)\n    Source: 5e:10:8e:e7:84:ad (5e:10:8e:e7:84:ad)\n    Length: 22\nLogical-Link Control\n    DSAP: SNAP (0xaa)\n    IG Bit: Individual\n    SSAP: SNAP (0xaa)\n    CR Bit: Command\n    Control field: U, func=UI (0x03)\n        000. 00.. = Command: Unnumbered Information (0x00)\n        .... ..11 = Frame type: Unnumbered frame (0x03)\n    Organization Code: Nortel Networks SONMP (0x000081)\n    PID: SONMP segment hello (0x01a2)\nNortel Networks / SynOptics Network Management Protocol\n    NMM IP address: 172.17.142.37 (172.17.142.37)\n    Segment Identifier: 0x000004\n    Chassis type: Unknown (1)\n    Backplane type: ethernet, fast ethernet and gigabit ethernet (12)\n    NMM state: New (3)\n    Number of links: 1\n\nIEEE 802.3 Ethernet \n    Destination: Bay-Networks-(Synoptics)-autodiscovery (01:00:81:00:01:01)\n    Source: 5e:10:8e:e7:84:ad (5e:10:8e:e7:84:ad)\n    Length: 22\nLogical-Link Control\n    DSAP: SNAP (0xaa)\n    IG Bit: Individual\n    SSAP: SNAP (0xaa)\n    CR Bit: Command\n    Control field: U, func=UI (0x03)\n        000. 00.. = Command: Unnumbered Information (0x00)\n        .... ..11 = Frame type: Unnumbered frame (0x03)\n    Organization Code: Nortel Networks SONMP (0x000081)\n    PID: SONMP flatnet hello (0x01a1)\nNortel Networks / SynOptics Network Management Protocol\n    NMM IP address: 172.17.142.37 (172.17.142.37)\n    Segment Identifier: 0x000004\n    Chassis type: Unknown (1)\n    Backplane type: ethernet, fast ethernet and gigabit ethernet (12)\n    NMM state: New (3)\n    Number of links: 1\n\t*/\n\tchar pkt1[] = {\n\t\t0x01, 0x00, 0x81, 0x00, 0x01, 0x00, 0x5e, 0x10,\n\t\t0x8e, 0xe7, 0x84, 0xad, 0x00, 0x16, 0xaa, 0xaa,\n\t\t0x03, 0x00, 0x00, 0x81, 0x01, 0xa2, 0xac, 0x11,\n\t\t0x8e, 0x25, 0x00, 0x00, 0x04, 0x01, 0x0c, 0x03,\n\t\t0x01 };\n\tchar pkt2[] = {\n\t\t0x01, 0x00, 0x81, 0x00, 0x01, 0x01, 0x5e, 0x10,\n\t\t0x8e, 0xe7, 0x84, 0xad, 0x00, 0x16, 0xaa, 0xaa,\n\t\t0x03, 0x00, 0x00, 0x81, 0x01, 0xa1, 0xac, 0x11,\n\t\t0x8e, 0x25, 0x00, 0x00, 0x04, 0x01, 0x0c, 0x03,\n\t\t0x01 };\n\tstruct packet *pkt;\n\tin_addr_t addr;\t\n\tstruct lldpd_mgmt *mgmt;\n\n\t/* Populate port and chassis */\n\thardware.h_lport.p_id_subtype = LLDP_PORTID_SUBTYPE_IFNAME;\n\thardware.h_lport.p_id = \"Not used\";\n\thardware.h_lport.p_id_len = strlen(hardware.h_lport.p_id);\n\tchassis.c_id_subtype = LLDP_CHASSISID_SUBTYPE_LLADDR;\n\tchassis.c_id = macaddress;\n\tchassis.c_id_len = ETHER_ADDR_LEN;\n\tTAILQ_INIT(&chassis.c_mgmt);\n\taddr = inet_addr(\"172.17.142.37\");\n\tmgmt = lldpd_alloc_mgmt(LLDPD_AF_IPV4, \n\t\t\t\t&addr, sizeof(in_addr_t), 0);\n\tif (mgmt == NULL)\n\t\tck_abort();\n\tTAILQ_INSERT_TAIL(&chassis.c_mgmt, mgmt, m_entries);\n\n\t/* Build packet */\n\tn = sonmp_send(NULL, &hardware);\n\tif (n != 0) {\n\t\tfail(\"unable to build packet\");\n\t\treturn;\n\t}\n\tif (TAILQ_EMPTY(&pkts)) {\n\t\tfail(\"no packets sent\");\n\t\treturn;\n\t}\n\tpkt = TAILQ_FIRST(&pkts);\n\tck_assert_int_eq(pkt->size, sizeof(pkt1));\n\tfail_unless(memcmp(pkt->data, pkt1, sizeof(pkt1)) == 0);\n\tpkt = TAILQ_NEXT(pkt, next);\n\tif (!pkt) {\n\t\tfail(\"need one more packet\");\n\t\treturn;\n\t}\n\tck_assert_int_eq(pkt->size, sizeof(pkt2));\n\tfail_unless(memcmp(pkt->data, pkt2, sizeof(pkt2)) == 0);\n\tfail_unless(TAILQ_NEXT(pkt, next) == NULL, \"more than two packets sent\");\n}\nEND_TEST\n\nSTART_TEST (test_recv_sonmp)\n{\n\tchar pkt1[] = {\n\t\t0x01, 0x00, 0x81, 0x00, 0x01, 0x00, 0x00, 0x1b,\n\t\t0x25, 0x08, 0x50, 0x47, 0x00, 0x13, 0xaa, 0xaa,\n\t\t0x03, 0x00, 0x00, 0x81, 0x01, 0xa2, 0xac, 0x10,\n\t\t0x65, 0xa8, 0x00, 0x02, 0x08, 0x38, 0x0c, 0x02,\n\t\t0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00 };\n\t/* This is:\nIEEE 802.3 Ethernet \n    Destination: Bay-Networks-(Synoptics)-autodiscovery (01:00:81:00:01:00)\n    Source: Nortel_08:50:47 (00:1b:25:08:50:47)\n    Length: 19\n    Trailer: 000000000000000000000000000000000000000000000000...\nLogical-Link Control\n    DSAP: SNAP (0xaa)\n    IG Bit: Individual\n    SSAP: SNAP (0xaa)\n    CR Bit: Command\n    Control field: U, func=UI (0x03)\n        000. 00.. = Command: Unnumbered Information (0x00)\n        .... ..11 = Frame type: Unnumbered frame (0x03)\n    Organization Code: Nortel Networks SONMP (0x000081)\n    PID: SONMP segment hello (0x01a2)\nNortel Networks / SynOptics Network Management Protocol\n    NMM IP address: 172.16.101.168 (172.16.101.168)\n    Segment Identifier: 0x000208\n    Chassis type: Accelar 8610 L3 switch (56)\n    Backplane type: ethernet, fast ethernet and gigabit ethernet (12)\n    NMM state: Heartbeat (2)\n    Number of links: 1\n\t*/\n\tstruct lldpd_chassis *nchassis = NULL;\n\tstruct lldpd_port *nport = NULL;\n\tchar cid[5];\n\tin_addr_t ip;\n\n\tfail_unless(sonmp_decode(NULL, pkt1, sizeof(pkt1), &hardware,\n\t\t&nchassis, &nport) != -1);\n\tif (!nchassis || !nport) {\n\t\tfail(\"unable to decode packet\");\n\t\treturn;\n\t}\n\tck_assert_int_eq(nchassis->c_id_subtype,\n\t    LLDP_CHASSISID_SUBTYPE_ADDR);\n\tck_assert_int_eq(nchassis->c_id_len, 5);\n\tcid[0] = 1;\n\tip = inet_addr(\"172.16.101.168\");\n\tmemcpy(cid + 1, &ip, sizeof(in_addr_t));\n\tfail_unless(memcmp(nchassis->c_id, cid, 5) == 0);\n\tck_assert_str_eq(nchassis->c_name, \"172.16.101.168\");\n\tck_assert_str_eq(nchassis->c_descr, \"Nortel Ethernet Routing 8610 L3 Switch\");\n\tck_assert_int_eq(TAILQ_FIRST(&nchassis->c_mgmt)->m_addr.inet.s_addr,\n\t    (u_int32_t)inet_addr(\"172.16.101.168\"));\n\tck_assert_int_eq(TAILQ_FIRST(&nchassis->c_mgmt)->m_iface, 0);\n\tck_assert_str_eq(nport->p_descr, \"port 2/8\");\n\tck_assert_int_eq(nport->p_id_subtype,\n\t    LLDP_PORTID_SUBTYPE_LOCAL);\n\tck_assert_int_eq(nport->p_id_len, strlen(\"00-02-08\"));\n\tfail_unless(memcmp(nport->p_id,\n\t\t\"00-02-08\", strlen(\"00-02-08\")) == 0);\n\tck_assert_int_eq(nchassis->c_cap_enabled, 0);\n}\nEND_TEST\n\n#endif\n\nSuite *\nsonmp_suite(void)\n{\n\tSuite *s = suite_create(\"SONMP\");\n\n#ifdef ENABLE_SONMP\n\tTCase *tc_send = tcase_create(\"Send SONMP packets\");\n\tTCase *tc_receive = tcase_create(\"Receive SONMP packets\");\n\n\ttcase_add_checked_fixture(tc_send, pcap_setup, pcap_teardown);\n\ttcase_add_test(tc_send, test_send_sonmp);\n\tsuite_add_tcase(s, tc_send);\n\n\ttcase_add_test(tc_receive, test_recv_sonmp);\n\tsuite_add_tcase(s, tc_receive);\n#endif\n\n\treturn s;\n}\n\nint\nmain()\n{\n\tint number_failed;\n\tSuite *s = sonmp_suite ();\n\tSRunner *sr = srunner_create (s);\n\tsrunner_set_fork_status (sr, CK_NOFORK); /* Can't fork because\n\t\t\t\t\t\t    we need to write\n\t\t\t\t\t\t    files */\n\tsrunner_run_all (sr, CK_ENV);\n\tnumber_failed = srunner_ntests_failed (sr);\n\tsrunner_free (sr);\n\treturn (number_failed == 0) ? EXIT_SUCCESS : EXIT_FAILURE;\n}\n"], "fixing_code": ["lldpd (1.0.13)\n * Fix:\n   + Add support for 2.5G, 5G, 25G and 50G based Ethernet (#475)\n   + Fix link-down detection on OpenBSD (#476)\n   + Fix LLDP packets encapsuled in VLAN 0 in some conditions\n   + Fix heap overflow when reading SONMP. CVE-2021-43612.\n     Thanks to Jeremy Galindo for discovering this one.\n\nlldpd (1.0.12)\n  * Fix:\n    + Use a dedicated file lock to prevent concurrent changes from lldpcli.\n    + Require/display powerpairs for Dot3 power even when device type is PD.\n  * Changes:\n    + Provide a Docker image and make it available on GitHub.\n\nlldpd (1.0.11)\n  * Changes:\n    + Disable LLDP in firmware for Intel X7xx cards.\n  * Fix:\n    + Ensure Intel E8xx cards can transmit LLDP packets.\n\nlldpd (1.0.10)\n  * Fix:\n    + Fix chroot directory creation.\n\nlldpd (1.0.9)\n  * Fix:\n    + Do not use interface alias if we set it ourselves.\n    + More memory leak fixes on duplicate TLVs in LLDP, CDP and EDP\n      (related to CVE-2020-27827).\n    + On OSX, handle empty groups correctly when looking for a free UID/GID.\n  * Changes:\n    + Display port status with \"show interfaces\".\n    + Do not display \"age\" and \"via\" when using \"show interfaces\".\n\nlldpd (1.0.8)\n  * Fix:\n    + Out-of-bound read access when parsing LLDP-MED civic address in\n      liblldpctl for malformed fields.\n    + Fix memory leak when receiving LLDPU with duplicate fields.\n      CVE-2020-27827.\n  * Changes:\n    + Enable \"router\" capability bit when IPv6 routing is enabled.\n\nlldpd (1.0.7)\n  * Fix:\n    + Do not listen only to LLDP packets on Linux. When an interface\n      is enslaved to an Open vSwitch, incoming packets are missed.\n\nlldpd (1.0.6)\n  * Fix:\n    + Do not loose chassis local information when interface status changes.\n    + Fix SNMP walk on lldpRemTable when missing remote system\n      name or description.\n    + Remove length limitation on system description and platform.\n  * Changes:\n    + Deprecate use of lldpctl_watch_callback(). Use\n      lldpctl_watch_callback2() instead.\n    + Upgrade embedded libevent to 2.1.11-stable\n    + Add support of sending LLDP frames on a configured VLAN\n\nlldpd (1.0.5)\n  * Changes:\n    + Interface names are also matched for management addresses.\n    + On Linux, only register protocol handler for LLDP when only LLDP\n      is enabled.\n    + Stricter on LLDP incoming frames validation.\n    + Add support for VLAN-aware bridges for Linux (no range support).\n    + Add support for 802.3BT (no SNMP support).\n    + Add support for millisecond-grained tx-interval (Jean-Pierre Tosoni).\n    + Use generic names for VLAN names, instead of interface names (eg\n      vlan100 instead of eth1.100).\n  * Fix:\n    + Don't clear chassis TLV on shutdown LLDPDU.\n    + Don't require/display powerpairs for Dot3 power when device type\n      is PD.\n\nlldpd (1.0.4)\n  * Changes:\n    + Add \"configure system max-neighbors XX\" command to modify maximum\n      of neighbors accepted per port.\n    + Implement lldpRemOrgDefInfoTable table for custom TLVs.\n  * Fix:\n    + Better compliance for statsTLVsUnrecognizedTotal and\n      statsAgeoutsTotal counters.\n    + On Linux, handle rare blocking case in Netlink code.\n\nlldpd (1.0.3)\n  * Fix:\n    + Fix creation of chroot directory.\n\nlldpd (1.0.2)\n  * Changes:\n    + On Linux, the monitor process will now drop its privileges\n      instead of running as root. It will keep CAP_NET_RAW,\n      CAP_NET_ADMIN and CAP_DAC_OVERRIDE capabilities.\n    + Support for CDP PD PoE (with negotiation). Thanks to Gustav\n      Wiklander.\n    + Move support for bonded devices on Linux < 2.6.27 into the\n      `--enable-oldies` option. This avoids duplicate packets\n      starting from Linux 4.19.\n\nlldpd (1.0.1)\n  * Fix:\n    + Use \"mkdir -p\" instead of \"mkdir\" in systemd unit.\n\nlldpd (1.0.0)\n  * Changes:\n    + Chassis ID can be set to an arbitrary value with \"configure system\n      chassisid\".\n    + Port description can be overriden directly with \"configure lldp\n      portdescription\".\n    + Command \"configure system interface permanent\" enables one to\n      specify a pattern for interfaces to be kept in memory even when\n      they are removed from the system.\n  * Fix:\n    + Ensure chassis-related changes are propagated immediately.\n    + Ensure management address change is correctly detected.\n\nlldpd (0.9.9)\n  * Changes:\n    + lldpcli can now display local interfaces with LLDP data sent on\n      each of them (\"show interfaces\").\n    + As Dot3 PD device, echo back allocated value from PSE device.\n  * Fix:\n    + Don't remove interfaces when they are released from a bridge.\n    + Don't use \"expect stop\" with Upstart. It's buggy.\n\nlldpd (0.9.8)\n  * Changes:\n    + \"Station\" capability is only set if no other bit is set.\n    + Use ethtool to get permanent address for bonds and teams. This\n      might provide different results than the previous method. Some\n      devices may still use the previous method.\n    + Don't run ethtool as root. Kernels older than 2.6.19 won't get\n      link information anymore.\n    + Add \"configure system hostname .\" option to not use a FQDN\n      for system name.\n    + Add \"-f json0\" to provide a more regular/machine-parsable output\n      to JSON output, even when not compiled with --enable-json0.\n  * Fixes:\n    + Handle team interfaces like a bond. Real MAC address cannot be\n      retrieved yet.\n\nlldpd (0.9.7)\n  * Changes:\n    + Attach remote TTL to port instead of chassis.\n    + JSON support is now built-in and unconditionally enabled. Use\n      --enable-json0 to keep the pre-0.9.2 json-c format.\n    + When logging to syslog and daemonizing, don't log to stderr.\n    + vxlan interfaces are now ignored as they are multi-point interfaces.\n    + Maximum number of neighbors for an interface is increased from 4 to 32.\n\nlldpd (0.9.6)\n  * Changes:\n    + Add a compile-time option to restore pre-0.9.2 JSON format (when\n      using json-c). Use `--enable-json0` to enable this option.\n    + Support for newer ethtool interface on Linux\n      (ETHTOOL_GLINKSETTINGS) and additional speed settings.\n    + Current MAU type is displayed even when autoneg is off.\n    + Increase netlink receive buffer by default. Can be changed at\n      compile-time through ./configure.\n  * Fixes:\n    + Correctly parse LLDP-MED civic address when the length of the\n      TLV exceeds the length of the address.\n    + Fix 100% CPU on some rare error condition.\n    + Fix lost timer when an interface is enslaved on Linux.\n\nlldpd (0.9.5)\n  * Changes:\n    + More Ethernet media supported. However, RFC4836 is quite\n      out-of-date with respected to 10G+ speeds, bringing some\n      inaccuracies.\n    + Directly get media information for an interface without using\n      the privileged process.\n    + LLDP-MED capability TLV is not sent when LLDP-MED is not enabled,\n      even if other LLDP-MED TLV are present.\n  * Fixes:\n    + Compilation fix with older versions of GCC.\n    + Don't use ethtool at all to get real MAC address for enslaved\n      devices (always use /proc).\n\nlldpd (0.9.4)\n  * Changes:\n    + Make lldpd accepts a `-p` option to specify the PID file.\n    + Ability to change multicast MAC address to two additional values\n      to reach customer bridges.\n    + lldpcli will now display chassis TTL when detailed view is enabled.\n  * Fixes:\n    + Fix setting of local value for port ID.\n    + Fix compilation with BSD make.\n    + Ensure lldpcli returns an error code on invalid commands.\n\nlldpd (0.9.3)\n  * Changes:\n    + Do not rely on support of constructors for liblldpctl.\n    + Always log to stderr (even in addition to syslog).\n    + `lldpcli watch` accepts a limit on the number of received events.\n  * Fixes:\n    + `lldpcli -f {xml,json} watch` should work now.\n    + Consider `veth` interfaces as physical interfaces.\n\nlldpd (0.9.2)\n  * Changes:\n    + Ability to add/remove/replace custom TLV from lldpcli.\n    + LLDP-MED capabilities are displayed differently in lldpcli.\n    + Limit the maximum depth (5) when trying to apply a VLAN.\n    + Change JSON output format when using json-c to match Jansson\n      output.\n    + Integration tests for the major parts of lldpd, including use of\n      address and leak sanitizer.\n  * Fixes:\n    + LLDP-MED POE TLV are now displayed in lldpcli.\n    + Ignore lower link when it is in another namespace.\n    + Fix various problems with interfaces being enslaved.\n    + Fix a memory leak when modifying port-related settings.\n\nlldpd (0.9.1)\n  * Changes:\n    + Rework packaging for OS X to make it work with El Capitan. To\n      simplify a bit, it is not possible anymore to build fat\n      binaries. Latest version of OS X supporting 32bit was 10.6.\n  * Fixes:\n    + By default, when using port alias as description, use port name\n      as port ID.\n    + Miscellaneous fixes with netlink cache.\n    + Ensure large netlink messages can be received.\n\nlldpd (0.9.0)\n  * Changes:\n    + Don't rely on libnl3 for netlink. Reuse the previous code and\n      implement a lighweight cache.\n\nlldpd (0.8.0, never released)\n  * Changes:\n    + PIE is now disabled by default. It's too difficult to reliably\n      detect if it works. Use --enable-pie to enable it.\n    + Retrieve the permanent MAC address of an interface through\n      ethtool for Linux if /proc/net/bonding is not available.\n    + Running lldpd with \"-d\" will keep the process in foreground but\n      logs will still go to syslog. To log to the console, add at\n      least one \"-d\".\n    + Fix minimal kernel version to 2.6.39. Add a runtime warning when\n      this is not the case.\n    + Remove old bridge code (the one using ioctl).\n    + Don't discard down interfaces. Notably, this enables us to keep\n      their specific configuration if any.\n    + For Linux, switch to libnl3. Be aware of the licensing issues in\n      case of static linking.\n    + Introduce the notion of default local port. New interfaces will\n      use it as a base. This allows setting various MED stuff.\n    + Provide an apparmor profile (untested).\n  * Fixes:\n    + Fix a buffer overflow when receiving a too large management\n      address TLV. Unless hardening has been disabled, this overflow\n      cannot be used for arbitrary code execution.\n    + Update LLDP-MED policy L2 priority values to match\n      802.1Q-2005. This may be a breaking change.\n\nlldpd (0.7.17)\n  * Fixes:\n    + Fix the way libevent configure is called.\n    + Fix an infinite loop when using veth on Linux 4.1+ kernels.\n    + Make CDP advertise the appropriate kernel name as platform,\n      not just \"Linux\".\n\nlldpd (0.7.16)\n  * Changes:\n    + For Linux, 2.6.32 is now the minimal required kernel. When using\n      an older kernel, use `--enable-oldies`.\n    + For Linux, use netlink to retrieve information about bridges,\n      VLAN and bonds. The code was contributed by Cumulus Networks.\n    + Use symbol versioning for liblldpctl.so.\n    + Ability to get local chassis information with \"show\n      chassis\".\n    + The library also has the same ability with the\n      `lldpctl_get_local_chassis()` function. It is also possible to\n      get a chassis atom from a port with `lldpctl_k_port_chassis`\n      key. This is now the preferred way to retrieve chassis related\n      information.\n  * Fixes:\n    + Fix build on OS X.\n    + Accept \"language\" when configuring MED location as a civic address.\n\nlldpd (0.7.15)\n  * Changes:\n    + Optional features can be configured with \"auto\" to autodetect if\n      they are usable. This is the default value for JSON and XML support.\n    + Ability to send and decode custom/unknown TLV. Thanks to Alexandru\n      Ardelean.\n    + Modify checksum function. While this should be strictly\n      equivalent, if you notice CDP packets not accepted anymore, this\n      change is the first culprit.\n\nlldpd (0.7.14)\n  * Changes:\n    + Shutdown LLPDU are sent on MSAP change and when lldpd exits.\n    + When an exact IP is provided as a management pattern, use it\n      unconditionally.\n    + Ability to set port ID and description to an arbitrary value,\n      thanks to Alexandru Ardelean.\n  * Fixes:\n    + Incorrect boundary check when decoding management address and\n      protocol identity may lead to lldpd crash when processing\n      malformed LLDPDU.\n    + Many edge cases where lldpd was leaving hanging processes after\n      crashing.\n\nlldpd (0.7.13)\n  * Fixes:\n    + Unbreak customization of Unix socket path from command line.\n\nlldpd (0.7.12)\n  * Changes:\n    + Interface pattern, management pattern, system description,\n      system platform and system hostname can be unconfigured to their\n      default values.\n  * Fixes:\n    + Don't complain when parsing a commented line.\n    + Correctly persist configuration changes for \"system interface\n      promiscuous\", \"system interface description\" \"med fast-start\n      enable\", \"pause\" and \"resume\".\n    + Fix listening on bond devices for old kernels (< 2.6.27).\n\nlldpd (0.7.11)\n  * Changes:\n    + Ship bash and zsh completion.\n    + Abort when some command-line options are repeated.\n  * Fixes:\n    + Handle correctly read failures in liblldpctl.\n\nlldpd (0.7.10)\n  * Changes:\n    + Ability to set promiscuous mode to work around bugs of some\n      switches encapsulating LLDP frames inside 802.1Q frames.\n    + JSON support for lldpcli can use json-c instead of jansson,\n      thanks to Michel Stam.\n  * Fixes:\n    + Fix checksum computation for Cisco CDP.\n    + Fix ability to disable LLDP.\n    + Fix seccomp sandbox, thanks to Patrick McLean.\n\nlldpd (0.7.9)\n  * Changes:\n    + Default location for chroot, socket and PID are now configurable\n      in `./configure`. The default location is based on the value of\n      `runstatedir` which in turn may be based on the value of\n      `localstatedir` which defaults to `/usr/local/var`. Therefore,\n      to get the previous locations, lldpd should be configured with\n      `./configure --localstatedir=/var`.\n    + Add support for shutdown LLDPU.\n    + Ability to configure IP management pattern from lldpcli.\n    + Ability to choose what port ID should be (MAC or interface name).\n  * Fixes:\n    + Fix `configure system bond-slave-src-mac-type local`. Also use\n      it as default.\n\nlldpd (0.7.8)\n  * Changes:\n    + Android support\n    + Add the possibility to disable privilege separation (lower\n      memory consumption, lower security, don't do it).\n    + Interfaces can now be whitelisted. For example, *,!eth*,!!eth1\n      is a valid pattern for all interfaces except eth ones, except\n      eth1. Moreover, on exact match, an matching interface\n      circumvents most sanity checks (like VLAN handling).\n    + Ability to override the hostname.\n  * Fixes:\n    + Don't hard-code default values for system name, system\n      description and port description. When the field is not present,\n      just don't display it.\n    + Fix lldpcli behaviour when suid.\n    + On OSX, don't use p2p0 interfaces: it would break WLAN.\n    + Fix SNMP support on RHEL.\n\nlldpd (0.7.7)\n  * Changes:\n    + Use a locally administered MAC address or an arbitrary one\n      instead of null MAC address for bond devices on Linux. This is\n      configurable through `lldpcli`.\n    + Add support for \"team\" driver (alternative to bond devices).\n    + Preliminary support for DTrace/systemtap.\n    + Preliminary support for seccomp (for monitor process).\n    + Setup chroot inside lldpd instead of relying on init script.\n  * Fixes:\n    + Various bugs related to fixed point number handling (for\n      coordinates in LLDP-MED)\n    + Fix a regression in how MAC address of an enslaved device is\n      retrieved.\n\nlldpd (0.7.6)\n  * Changes:\n    + Provide a way to build packages for OSX.\n    + Add an option to update interface description with neighbor name.\n  * Fixes:\n    + Compilation fix for OSX 10.6.\n\nlldpd (0.7.5)\n  * Fixes:\n    + Segfault while tokenizing in lldpcli.\n\nlldpd (0.7.4)\n  * Fixes:\n    + Segfault in lldpcli.\n    + Memory leak in liblldpctl when using a custom log handler.\n    + Fix some unaligned memory accesses.\n    + Fix frame reception on OpenBSD.\n  * Changes:\n    + Allow to configure hold value from lldpcli (and hence the TTL).\n    + Allow to configure pattern for valid interfaces from lldpcli.\n    + Allow to override system description from lldpcli.\n    + Display the neighbor connected as the process title (or the\n      number of connected neighbors).\n\nlldpd (0.7.3)\n  * Changes:\n    + DragonFly BSD support.\n    + Solaris support (incomplete).\n    + LLDP-MED fast start support (thanks to Roopa Prabhu).\n    + Provide global statistics through \"show statistics summary\"\n      command (thanks to Roopa Prabhu).\n  * Fixes:\n    + Fix IPv4/IPv6 address discovery in Linux.\n\nlldpd (0.7.2)\n  * Changes:\n    + lldpd can be configured through /etc/lldpd.conf and\n      /etc/lldpd.d. All commands accepted by lldpcli are accepted.\n    + Lock BPF interfaces before handing them to chrooted process on\n      BSD.\n    + Limit the number of neighbors for each port to 4 (per protocol).\n    + Force CDPv2 protocol with argument `-ccc`.\n    + Provide port statistics through \"show statistics\" command\n      (thanks to Roopa Prabhu).\n  * Fixes:\n    + Driver whitelisting is done before checking if an interface has\n      a lower interface in Linux.\n    + Expire remote ports and chassis in a timely manner.\n\nlldpd (0.7.1)\n  * Changes:\n    + Mac OS X support, sponsored by Xcloud, Mac cloud server hosting\n      provider. http://xcloud.me/\n    + Upstart and systemd support.\n    + Remove Unix socket when there is no process listening.\n\nlldpd (0.7.0)\n  * Changes:\n    + FreeBSD support.\n    + OpenBSD support.\n    + NetBSD support.\n    + Detect interface changes.\n    + CLI for lldpctl: lldpcli.\n    + Allow to disable LLDP protocol (with `-ll`). In this case, the\n      first enabled protocol will be used when no neighbor is detected.\n    + Allow to filter debug logs using tokens. Add more debug logs.\n    + lldpctl can now output JSON.\n    + Use netlink to gather interface information on Linux.\n    + Don't use ioctl for bridges anymore on Linux. The configure\n      option `--enable-oldies` allow to reenable their uses for\n      systems not supporting sysfs.\n\nlldpd (0.6.1)\n  * Changes:\n    + Provide liblldpctl.so, a library to interface with lldpd. The\n      documentation is provided through Doxygen. See src/lib/lldpctl.h\n      which contains all the exported functions.\n    + Make lldpctl uses liblldpctl.so.\n    + Add a \"watch\" option to lldpctl to monitor neighbor changes.\n    + Add the possibility to display the current configuration of\n      lldpd with lldpctl. Also add the possibility to reset the\n      current transmit delay.\n\nlldpd (0.6)\n  * Changes:\n    + Allow lldpctl to display hidden ports.\n    + Add a switch to specify interfaces to use to get chassis ID.\n    + Support for multiple management addresses and IPv6 management\n      addresses. Contributed by Jo\u00e3o Valverde.\n    + Switch to libevent. See README.md for details.\n    + Partial rewrite of the SNMP part. Less code.\n    + Unit tests for SNMP.\n    + Major rewrite of the protocol between lldpd and lldpctl. Less\n      code.\n  * Fixes:\n    + Several small SNMP fixes (discovered by unit tests).\n\nlldpd (0.5.7)\n * Fixes:\n    + Configure issue with NetSNMP and some linkers\n    + Fix infinite loop for the receive part: on certain conditions,\n      lldpd will stop sending packets and stop updating local data.\n\nlldpd (0.5.6)\n  * Changes:\n    + Send and receive native VLAN TLV with CDP\n    + Add a whitelist for some drivers (currently: dsa and veth)\n  * Fixes:\n    + Compilation issues with NetSNMP 5.7 (and with earlier versions too)\n    + Small optimization of BPF filter\n\nlldpd (0.5.5)\n  * Changes:\n    + Support for PPVID and PI Dot1 TLV, thanks to Shuah Khan.\n    + Extend whitelist with possibility to blacklist.\n  * Fixes:\n    + Key/value output was incorrect when a dot was present in\n      interface names. This is fixed but it is preferable to use XML\n      output since the parsing is more difficult in this case.\n    + Only grab DMI information once. Only uses DMI for x86 platform.\n    + Padding issues with socket protocol. This introduces a change in\n      the socket protocol!\n    + Fix a segfault when neither /etc/os-release nor lsb_release\n      are available.\n\nlldpd (0.5.4)\n  * Changes:\n    + Get OS information from /etc/os-release if available. Patch from\n      Michael Tremer.\n    + Add a flag to specify which interfaces lldpd should listen to.\n\nlldpd (0.5.3)\n  * Changes:\n    + Handle Dot3 POE-MDI TLV (802.3af and 802.3at).\n    + Allow to set Dot3 POE-MDI from lldpctl.\n  * Fixes:\n    + Allow root to change configuration of lldpd when lldpctl has suid set.\n\nlldpd (0.5.2)\n  * Changes:\n    + More flexible smart mode and new default. Manual page has been updated.\n    + Add a \"receive-only\" mode with \"-r\" switch.\n\nlldpd (0.5.1)\n  * Changes:\n    + Allow to force a protocol even when no peer for this protocol is\n      detected.\n    + Add a smart mode that allows to discard bogus port information,\n      for example CDP packets that are flooded through a switch that\n      does not support CDP.\n    + Allow to set LLDP-MED network policy from lldpctl, thanks to a patch from\n      Philipp Kempgen.\n    + Allow to set LLDP-MED POE-MDI from lldpctl.\n    + Add a summary of available options in \"lldpd -h\" and \"lldpctl -h\",\n      thanks to a patch from Jorge Boncompte.\n    + Add a new output (keyvalue) for lldpctl.\n    + Listen on VLAN using an appropriate BPF filter, VLAN\n      decapsulation. Older \"listen on vlan\" feature is discarded. See\n      README for more information on the new feature.\n    + Use output of lsb_release if available for system description.\n  * Fixes:\n    + Ignore interface with no queue. It should filter out interfaces\n      like \"vnet0\" that would fail if we try to send something on them.\n    + Don't check CDP checksums (not really a fix but it appears that\n      Cisco checksum have some difficult corner cases).\n\nlldpd (0.5.0)\n  * Changes:\n    + lldpd can now handle several systems on the same port. This\n      modification also allows to speak to a switch using CDP and LLDP\n      for example.\n    + The way that lldpd gathers information for each port has been\n      abstracted. This should allow to support more systems (BSD for\n      examples) or switch cores in the future. Sending/receive support\n      is also abstracted.\n    + Add \"-k\" switch to avoid to emit too much information on running\n      kernel.\n    + Support of ifAlias with kernel >= 2.6.28\n    + Lot of portability stuff. lldpd can now be compiled on RHEL\n      2.1. Still Linux-only though.\n    + Add an option to specify AgentX socket (-X).\n    + Add some unit tests\n    + lldpctl has been reworked; it is now able to output data in XML\n      format for easier parsing. Patches were provided by Andreas\n      Hofmeister.\n  * Fixes:\n    + Fix EDP VLAN handling\n    + Silent warnings about bridge stuff.\n    + Copy /etc/localtime into chroot before starting lldpd daemon to\n      ensure correct timestamps for logs.\n\nlldpd (0.4.1)\n  * Fix EDP handling when there is no VLAN\n  * Fix CDP version to not always be 1\n  * Misc fix:\n     + incorrect number of arguments for a LLOG_INFO call\n     + fix SNMP last change in case this change occurs before start time\n\nlldpd (0.4)\n  * Rewrite of packet builder and parser to be able to cope with\n    architecture that cannot do unaligned read. For decoder, we don't\n    cast structures any more since they can be unaligned. For encoder,\n    we use memcpy through the use of macro that build packets step by\n    step.\n\nlldpd (0.3.2)\n  * Fix LLDP-MED support\n\nlldpd (0.3.1)\n  * Misc fixes, including memory leaks\n\nlldpd (0.3)\n  * Initial support of LLDP-MED\n  * Fix for bridge detection (don't send bridge ioctl on random interfaces)\n  * For bonded devices, get the real hardware address. For inactive\n    slaves, transmit using a random MAC address.\n\nlldpd (0.2.1)\n  * Fix a syntax error in manual page\n  * Fix open() calls\n\nlldpd (0.2)\n  * Add privilege separation\n  * Add FDP support\n  * Support CDP encapsulated into native VLAN\n  * Various fixes\n\nlldpd (0.1)\n  * Initial release\n", "/* -*- mode: c; c-file-style: \"openbsd\" -*- */\n/*\n * Copyright (c) 2008 Vincent Bernat <bernat@luffy.cx>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#include \"../lldpd.h\"\n#include \"../frame.h\"\n\n#ifdef ENABLE_SONMP\n\n#include <stdio.h>\n#include <unistd.h>\n#include <errno.h>\n#include <arpa/inet.h>\n\nstatic struct sonmp_chassis sonmp_chassis_types[] = {\n\t{1, \"unknown (via SONMP)\"},\n\t{2, \"Nortel 3000\"},\n\t{3, \"Nortel 3030\"},\n\t{4, \"Nortel 2310\"},\n\t{5, \"Nortel 2810\"},\n\t{6, \"Nortel 2912\"},\n\t{7, \"Nortel 2914\"},\n\t{8, \"Nortel 271x\"},\n\t{9, \"Nortel 2813\"},\n\t{10, \"Nortel 2814\"},\n\t{11, \"Nortel 2915\"},\n\t{12, \"Nortel 5000\"},\n\t{13, \"Nortel 2813SA\"},\n\t{14, \"Nortel 2814SA\"},\n\t{15, \"Nortel 810M\"},\n\t{16, \"Nortel EtherCell\"},\n\t{17, \"Nortel 5005\"},\n\t{18, \"Alcatel Ethernet workgroup conc.\"},\n\t{20, \"Nortel 2715SA\"},\n\t{21, \"Nortel 2486\"},\n\t{22, \"Nortel 28000 series\"},\n\t{23, \"Nortel 23000 series\"},\n\t{24, \"Nortel 5DN00x series\"},\n\t{25, \"BayStack Ethernet\"},\n\t{26, \"Nortel 23100 series\"},\n\t{27, \"Nortel 100Base-T Hub\"},\n\t{28, \"Nortel 3000 Fast Ethernet\"},\n\t{29, \"Nortel Orion switch\"},\n\t{30, \"unknown\"},\n\t{31, \"Nortel DDS \"},\n\t{32, \"Nortel Centillion\"},\n\t{33, \"Nortel Centillion\"},\n\t{34, \"Nortel Centillion\"},\n\t{35, \"BayStack 301\"},\n\t{36, \"BayStack TokenRing Hub\"},\n\t{37, \"Nortel FVC Multimedia Switch\"},\n\t{38, \"Nortel Switch Node\"},\n\t{39, \"BayStack 302 Switch\"},\n\t{40, \"BayStack 350 Switch\"},\n\t{41, \"BayStack 150 Ethernet Hub\"},\n\t{42, \"Nortel Centillion 50N switch\"},\n\t{43, \"Nortel Centillion 50T switch\"},\n\t{44, \"BayStack 303 and 304 Switches\"},\n\t{45, \"BayStack 200 Ethernet Hub\"},\n\t{46, \"BayStack 250 10/100 Ethernet Hub\"},\n\t{48, \"BayStack 450 10/100/1000 Switches\"},\n\t{49, \"BayStack 410 10/100 Switches\"},\n\t{50, \"Nortel Ethernet Routing 1200 L3 Switch\"},\n\t{51, \"Nortel Ethernet Routing 1250 L3 Switch\"},\n\t{52, \"Nortel Ethernet Routing 1100 L3 Switch\"},\n\t{53, \"Nortel Ethernet Routing 1150 L3 Switch\"},\n\t{54, \"Nortel Ethernet Routing 1050 L3 Switch\"},\n\t{55, \"Nortel Ethernet Routing 1051 L3 Switch\"},\n\t{56, \"Nortel Ethernet Routing 8610 L3 Switch\"},\n\t{57, \"Nortel Ethernet Routing 8606 L3 Switch\"},\n\t{58, \"Nortel Ethernet Routing Switch 8010\"},\n\t{59, \"Nortel Ethernet Routing Switch 8006\"},\n\t{60, \"BayStack 670 wireless access point\"},\n\t{61, \"Nortel Ethernet Routing Switch 740 \"},\n\t{62, \"Nortel Ethernet Routing Switch 750 \"},\n\t{63, \"Nortel Ethernet Routing Switch 790\"},\n\t{64, \"Nortel Business Policy Switch 2000 10/100 Switches\"},\n\t{65, \"Nortel Ethernet Routing 8110 L2 Switch\"},\n\t{66, \"Nortel Ethernet Routing 8106 L2 Switch\"},\n\t{67, \"BayStack 3580 Gig Switch\"},\n\t{68, \"BayStack 10 Power Supply Unit\"},\n\t{69, \"BayStack 420 10/100 Switch\"},\n\t{70, \"OPTera Metro 1200 Ethernet Service Module\"},\n\t{71, \"Nortel Ethernet Routing Switch 8010co\"},\n\t{72, \"Nortel Ethernet Routing 8610co L3 switch\"},\n\t{73, \"Nortel Ethernet Routing 8110co L2 switch\"},\n\t{74, \"Nortel Ethernet Routing 8003\"},\n\t{75, \"Nortel Ethernet Routing 8603 L3 switch\"},\n\t{76, \"Nortel Ethernet Routing 8103 L2 switch\"},\n\t{77, \"BayStack 380 10/100/1000 Switch\"},\n\t{78, \"Nortel Ethernet Switch 470-48T\"},\n\t{79, \"OPTera Metro 1450 Ethernet Service Module\"},\n\t{80, \"OPTera Metro 1400 Ethernet Service Module\"},\n\t{81, \"Alteon Switch Family\"},\n\t{82, \"Ethernet Switch 460-24T-PWR\"},\n\t{83, \"OPTera Metro 8010 OPM L2 Switch\"},\n\t{84, \"OPTera Metro 8010co OPM L2 Switch\"},\n\t{85, \"OPTera Metro 8006 OPM L2 Switch\"},\n\t{86, \"OPTera Metro 8003 OPM L2 Switch\"},\n\t{87, \"Alteon 180e\"},\n\t{88, \"Alteon AD3\"},\n\t{89, \"Alteon 184\"},\n\t{90, \"Alteon AD4\"},\n\t{91, \"Nortel Ethernet Routing 1424 L3 switch\"},\n\t{92, \"Nortel Ethernet Routing 1648 L3 switch\"},\n\t{93, \"Nortel Ethernet Routing 1612 L3 switch\"},\n\t{94, \"Nortel Ethernet Routing 1624 L3 switch \"},\n\t{95, \"BayStack 380-24F Fiber 1000 Switch\"},\n\t{96, \"Nortel Ethernet Routing Switch 5510-24T\"},\n\t{97, \"Nortel Ethernet Routing Switch 5510-48T\"},\n\t{98, \"Nortel Ethernet Switch 470-24T\"},\n\t{99, \"Nortel Networks Wireless LAN Access Point 2220\"},\n\t{100, \"Ethernet Routing RBS 2402 L3 switch\"},\n\t{101, \"Alteon Application Switch 2424  \"},\n\t{102, \"Alteon Application Switch 2224 \"},\n\t{103, \"Alteon Application Switch 2208 \"},\n\t{104, \"Alteon Application Switch 2216\"},\n\t{105, \"Alteon Application Switch 3408\"},\n\t{106, \"Alteon Application Switch 3416\"},\n\t{107, \"Nortel Networks Wireless LAN SecuritySwitch 2250\"},\n\t{108, \"Ethernet Switch 425-48T\"},\n\t{109, \"Ethernet Switch 425-24T\"},\n\t{110, \"Nortel Networks Wireless LAN Access Point 2221\"},\n\t{111, \"Nortel Metro Ethernet Service Unit 24-T SPF switch\"},\n\t{112, \"Nortel Metro Ethernet Service Unit 24-T LX DC switch\"},\n\t{113, \"Nortel Ethernet Routing Switch 8300 10-slot chassis\"},\n\t{114, \"Nortel Ethernet Routing Switch 8300 6-slot chassis\"},\n\t{115, \"Nortel Ethernet Routing Switch 5520-24T-PWR\"},\n\t{116, \"Nortel Ethernet Routing Switch 5520-48T-PWR\"},\n\t{117, \"Nortel Networks VPN Gateway 3050\"},\n\t{118, \"Alteon SSL 310 10/100\"},\n\t{119, \"Alteon SSL 310 10/100 Fiber\"},\n\t{120, \"Alteon SSL 310 10/100 FIPS\"},\n\t{121, \"Alteon SSL 410 10/100/1000\"},\n\t{122, \"Alteon SSL 410 10/100/1000 Fiber\"},\n\t{123, \"Alteon Application Switch 2424-SSL\"},\n\t{124, \"Nortel Ethernet Switch 325-24T\"},\n\t{125, \"Nortel Ethernet Switch 325-24G\"},\n\t{126, \"Nortel Networks Wireless LAN Access Point 2225\"},\n\t{127, \"Nortel Networks Wireless LAN SecuritySwitch 2270\"},\n\t{128, \"Nortel 24-port Ethernet Switch 470-24T-PWR\"},\n\t{129, \"Nortel 48-port Ethernet Switch 470-48T-PWR\"},\n\t{130, \"Nortel Ethernet Routing Switch 5530-24TFD\"},\n\t{131, \"Nortel Ethernet Switch 3510-24T\"},\n\t{132, \"Nortel Metro Ethernet Service Unit 12G AC L3 switch\"},\n\t{133, \"Nortel Metro Ethernet Service Unit 12G DC L3 switch\"},\n\t{134, \"Nortel Secure Access Switch\"},\n\t{135, \"Networks VPN Gateway 3070\"},\n\t{136, \"OPTera Metro 3500\"},\n\t{137, \"SMB BES 1010 24T\"},\n\t{138, \"SMB BES 1010 48T\"},\n\t{139, \"SMB BES 1020 24T PWR\"},\n\t{140, \"SMB BES 1020 48T PWR\"},\n\t{141, \"SMB BES 2010 24T\"},\n\t{142, \"SMB BES 2010 48T\"},\n\t{143, \"SMB BES 2020 24T PWR\"},\n\t{144, \"SMB BES 2020 48T PWR\"},\n\t{145, \"SMB BES 110 24T\"},\n\t{146, \"SMB BES 110 48T\"},\n\t{147, \"SMB BES 120 24T PWR\"},\n\t{148, \"SMB BES 120 48T PWR\"},\n\t{149, \"SMB BES 210 24T\"},\n\t{150, \"SMB BES 210 48T\"},\n\t{151, \"SMB BES 220 24T PWR\"},\n\t{152, \"SMB BES 220 48T PWR\"},\n\t{153, \"OME 6500\"},\n\t{0, \"unknown (via SONMP)\"},\n};\n\nint\nsonmp_send(struct lldpd *global,\n    struct lldpd_hardware *hardware)\n{\n\tconst u_int8_t mcastaddr[] = SONMP_MULTICAST_ADDR;\n\tconst u_int8_t llcorg[] = LLC_ORG_NORTEL;\n\tstruct lldpd_chassis *chassis;\n\tstruct lldpd_mgmt *mgmt;\n\tu_int8_t *packet, *pos, *pos_pid, *end;\n\tint length;\n\tstruct in_addr address;\n\n\tlog_debug(\"sonmp\", \"send SONMP PDU to %s\",\n\t    hardware->h_ifname);\n\n\tchassis = hardware->h_lport.p_chassis;\n\tlength = hardware->h_mtu;\n\tif ((packet = (u_int8_t*)calloc(1, length)) == NULL)\n\t\treturn ENOMEM;\n\tpos = packet;\n\n\t/* Ethernet header */\n\tif (!(\n\t      /* SONMP multicast address as target */\n\t      POKE_BYTES(mcastaddr, sizeof(mcastaddr)) &&\n\t      /* Source MAC addresss */\n\t      POKE_BYTES(&hardware->h_lladdr, ETHER_ADDR_LEN) &&\n\t      /* SONMP frame is of fixed size */\n\t      POKE_UINT16(SONMP_SIZE)))\n\t\tgoto toobig;\n\n\t/* LLC header */\n\tif (!(\n\t      /* DSAP and SSAP */\n\t      POKE_UINT8(0xaa) && POKE_UINT8(0xaa) &&\n\t      /* Control field */\n\t      POKE_UINT8(0x03) &&\n\t      /* ORG */\n\t      POKE_BYTES(llcorg, sizeof(llcorg)) &&\n\t      POKE_SAVE(pos_pid) && /* We will modify PID later to\n\t\t\t\t       create a new frame */\n\t      POKE_UINT16(LLC_PID_SONMP_HELLO)))\n\t\tgoto toobig;\n\n\n\taddress.s_addr = htonl(INADDR_ANY);\n\tTAILQ_FOREACH(mgmt, &chassis->c_mgmt, m_entries) {\n\t\tif (mgmt->m_family == LLDPD_AF_IPV4) {\n\t\t\taddress.s_addr = mgmt->m_addr.inet.s_addr;\n\t\t}\n\t\tbreak;\n\t}\n\n\t/* SONMP */\n\tif (!(\n\t\t  /* Our IP address */\n\t\t  POKE_BYTES(&address, sizeof(struct in_addr)) &&\n\t\t  /* Segment on three bytes, we don't have slots, so we\n\t\t skip the first two bytes */\n\t\t  POKE_UINT16(0) &&\n\t\t  POKE_UINT8(hardware->h_ifindex) &&\n\t\t  POKE_UINT8(1) &&  /* Chassis: Other */\n\t\t  POKE_UINT8(12) &&\t/* Back: Ethernet, Fast Ethernet and Gigabit */\n\t\t  POKE_UINT8(SONMP_TOPOLOGY_NEW) && /* Should work. We have no state */\n\t\t  POKE_UINT8(1) &&\t/* Links: Dunno what it is */\n\t\t  POKE_SAVE(end)))\n\t\tgoto toobig;\n\t\t\t\t\n\tif (interfaces_send_helper(global, hardware,\n\t\t(char *)packet, end - packet) == -1) {\n\t\tlog_warn(\"sonmp\", \"unable to send packet on real device for %s\",\n\t\t\t   hardware->h_ifname);\n\t\tfree(packet);\n\t\treturn ENETDOWN;\n\t}\n\n\tPOKE_RESTORE(pos_pid);\t/* Modify LLC PID */\n\t(void)POKE_UINT16(LLC_PID_SONMP_FLATNET);\n\tPOKE_RESTORE(packet);\t/* Go to the beginning */\n\tPEEK_DISCARD(ETHER_ADDR_LEN - 1); /* Modify the last byte of the MAC address */\n\t(void)POKE_UINT8(1);\n\n\tif (interfaces_send_helper(global, hardware,\n\t\t(char *)packet, end - packet) == -1) {\n\t\tlog_warn(\"sonmp\", \"unable to send second SONMP packet on real device for %s\",\n\t\t\t   hardware->h_ifname);\n\t\tfree(packet);\n\t\treturn ENETDOWN;\n\t}\n\n\tfree(packet);\n\thardware->h_tx_cnt++;\n\treturn 0;\n toobig:\n\tfree(packet);\n\treturn -1;\n}\n\nint\nsonmp_decode(struct lldpd *cfg, char *frame, int s,\n    struct lldpd_hardware *hardware,\n    struct lldpd_chassis **newchassis, struct lldpd_port **newport)\n{\n\tconst u_int8_t mcastaddr[] = SONMP_MULTICAST_ADDR;\n\tstruct lldpd_chassis *chassis;\n\tstruct lldpd_port *port;\n\tstruct lldpd_mgmt *mgmt;\n\tint length, i;\n\tu_int8_t *pos;\n\tu_int8_t seg[3], rchassis;\n\tstruct in_addr address;\n\n\tlog_debug(\"sonmp\", \"decode SONMP PDU from %s\",\n\t    hardware->h_ifname);\n\n\tif ((chassis = calloc(1, sizeof(struct lldpd_chassis))) == NULL) {\n\t\tlog_warn(\"sonmp\", \"failed to allocate remote chassis\");\n\t\treturn -1;\n\t}\n\tTAILQ_INIT(&chassis->c_mgmt);\n\tif ((port = calloc(1, sizeof(struct lldpd_port))) == NULL) {\n\t\tlog_warn(\"sonmp\", \"failed to allocate remote port\");\n\t\tfree(chassis);\n\t\treturn -1;\n\t}\n#ifdef ENABLE_DOT1\n\tTAILQ_INIT(&port->p_vlans);\n#endif\n\n\tlength = s;\n\tpos = (u_int8_t*)frame;\n\tif (length < SONMP_SIZE + 2*ETHER_ADDR_LEN + sizeof(u_int16_t)) {\n\t\tlog_warnx(\"sonmp\", \"too short SONMP frame received on %s\", hardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\tif (PEEK_CMP(mcastaddr, sizeof(mcastaddr)) != 0)\n\t\t/* There is two multicast address. We just handle only one of\n\t\t * them. */\n\t\tgoto malformed;\n\t/* We skip to LLC PID */\n\tPEEK_DISCARD(ETHER_ADDR_LEN); PEEK_DISCARD_UINT16;\n\tPEEK_DISCARD(6);\n\tif (PEEK_UINT16 != LLC_PID_SONMP_HELLO) {\n\t\tlog_debug(\"sonmp\", \"incorrect LLC protocol ID received for SONMP on %s\",\n\t\t    hardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\n\tchassis->c_id_subtype = LLDP_CHASSISID_SUBTYPE_ADDR;\n\tif ((chassis->c_id = calloc(1, sizeof(struct in_addr) + 1)) == NULL) {\n\t\tlog_warn(\"sonmp\", \"unable to allocate memory for chassis id on %s\",\n\t\t\thardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\tchassis->c_id_len = sizeof(struct in_addr) + 1;\n\tchassis->c_id[0] = 1;\n\tPEEK_BYTES(&address, sizeof(struct in_addr));\n\tmemcpy(chassis->c_id + 1, &address, sizeof(struct in_addr));\n\tif (asprintf(&chassis->c_name, \"%s\", inet_ntoa(address)) == -1) {\n\t\tlog_warnx(\"sonmp\", \"unable to write chassis name for %s\",\n\t\t    hardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\tPEEK_BYTES(seg, sizeof(seg));\n\trchassis = PEEK_UINT8;\n\tfor (i=0; sonmp_chassis_types[i].type != 0; i++) {\n\t\tif (sonmp_chassis_types[i].type == rchassis)\n\t\t\tbreak;\n\t}\n\tif (asprintf(&chassis->c_descr, \"%s\",\n\t\tsonmp_chassis_types[i].description) == -1) {\n\t\tlog_warnx(\"sonmp\", \"unable to write chassis description for %s\",\n\t\t    hardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\tmgmt = lldpd_alloc_mgmt(LLDPD_AF_IPV4, &address, sizeof(struct in_addr), 0);\n\tif (mgmt == NULL) {\n\t\tif (errno == ENOMEM)\n\t\t\tlog_warn(\"sonmp\", \"unable to allocate memory for management address\");\n\t\telse\n\t\t\tlog_warn(\"sonmp\", \"too large management address received on %s\",\n\t\t\t    hardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\tTAILQ_INSERT_TAIL(&chassis->c_mgmt, mgmt, m_entries);\n\tport->p_ttl = cfg?(cfg->g_config.c_tx_interval * cfg->g_config.c_tx_hold):\n\t    LLDPD_TTL;\n\tport->p_ttl = (port->p_ttl + 999) / 1000;\n\n\tport->p_id_subtype = LLDP_PORTID_SUBTYPE_LOCAL;\n\tif (asprintf(&port->p_id, \"%02x-%02x-%02x\",\n\t\tseg[0], seg[1], seg[2]) == -1) {\n\t\tlog_warn(\"sonmp\", \"unable to allocate memory for port id on %s\",\n\t\t    hardware->h_ifname);\n\t\tgoto malformed;\n\t}\n\tport->p_id_len = strlen(port->p_id);\n\n\t/* Port description depend on the number of segments */\n\tif ((seg[0] == 0) && (seg[1] == 0)) {\n\t\tif (asprintf(&port->p_descr, \"port %d\",\n\t\t\tseg[2]) == -1) {\n\t\t\tlog_warnx(\"sonmp\", \"unable to write port description for %s\",\n\t\t\t    hardware->h_ifname);\n\t\t\tgoto malformed;\n\t\t}\n\t} else if (seg[0] == 0) {\n\t\tif (asprintf(&port->p_descr, \"port %d/%d\",\n\t\t\tseg[1], seg[2]) == -1) {\n\t\t\tlog_warnx(\"sonmp\", \"unable to write port description for %s\",\n\t\t\t    hardware->h_ifname);\n\t\t\tgoto malformed;\n\t\t}\n\t} else {\n\t\tif (asprintf(&port->p_descr, \"port %x:%x:%x\",\n\t\t\tseg[0], seg[1], seg[2]) == -1) {\n\t\t\tlog_warnx(\"sonmp\", \"unable to write port description for %s\",\n\t\t\t    hardware->h_ifname);\n\t\t\tgoto malformed;\n\t\t}\n\t}\n\t*newchassis = chassis;\n\t*newport = port;\n\treturn 1;\n\nmalformed:\n\tlldpd_chassis_cleanup(chassis, 1);\n\tlldpd_port_cleanup(port, 1);\n\tfree(port);\n\treturn -1;\n}\n\n#endif /* ENABLE_SONMP */\n", "/* -*- mode: c; c-file-style: \"openbsd\" -*- */\n/*\n * Copyright (c) 2008 Vincent Bernat <bernat@luffy.cx>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#ifndef _SONMP_H\n#define _SONMP_H\n\n#define SONMP_MULTICAST_ADDR\t{\t\t\t\t\t\t\\\n\t0x01, 0x00, 0x81, 0x00, 0x01, 0x00\t\t\t\t\t\\\n}\n#define LLC_ORG_NORTEL { 0x00, 0x00, 0x81 }\n#define LLC_PID_SONMP_HELLO 0x01a2\n#define LLC_PID_SONMP_FLATNET 0x01a1\n#define SONMP_SIZE 19\n\nstruct sonmp_chassis {\n\tint type;\n\tchar *description;\n};\n\n#define SONMP_TOPOLOGY_CHANGED 1\n#define SONMP_TOPOLOGY_UNCHANGED 2\n#define SONMP_TOPOLOGY_NEW 3\n\n#endif /* _SONMP_H */\n", "/* -*- mode: c; c-file-style: \"openbsd\" -*- */\n/*\n * Copyright (c) 2015 Vincent Bernat <bernat@luffy.cx>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#include <stdlib.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <netinet/in.h>\n#include <check.h>\n#include \"common.h\"\n\nchar filenameprefix[] = \"sonmp_send\";\n\n#ifdef ENABLE_SONMP\n\nSTART_TEST (test_send_sonmp)\n{\n\tint n;\n\t/* Packet we should build:\nIEEE 802.3 Ethernet \n    Destination: Bay-Networks-(Synoptics)-autodiscovery (01:00:81:00:01:00)\n    Source: 5e:10:8e:e7:84:ad (5e:10:8e:e7:84:ad)\n    Length: 19\nLogical-Link Control\n    DSAP: SNAP (0xaa)\n    IG Bit: Individual\n    SSAP: SNAP (0xaa)\n    CR Bit: Command\n    Control field: U, func=UI (0x03)\n        000. 00.. = Command: Unnumbered Information (0x00)\n        .... ..11 = Frame type: Unnumbered frame (0x03)\n    Organization Code: Nortel Networks SONMP (0x000081)\n    PID: SONMP segment hello (0x01a2)\nNortel Networks / SynOptics Network Management Protocol\n    NMM IP address: 172.17.142.37 (172.17.142.37)\n    Segment Identifier: 0x000004\n    Chassis type: Unknown (1)\n    Backplane type: ethernet, fast ethernet and gigabit ethernet (12)\n    NMM state: New (3)\n    Number of links: 1\n\nIEEE 802.3 Ethernet \n    Destination: Bay-Networks-(Synoptics)-autodiscovery (01:00:81:00:01:01)\n    Source: 5e:10:8e:e7:84:ad (5e:10:8e:e7:84:ad)\n    Length: 19\nLogical-Link Control\n    DSAP: SNAP (0xaa)\n    IG Bit: Individual\n    SSAP: SNAP (0xaa)\n    CR Bit: Command\n    Control field: U, func=UI (0x03)\n        000. 00.. = Command: Unnumbered Information (0x00)\n        .... ..11 = Frame type: Unnumbered frame (0x03)\n    Organization Code: Nortel Networks SONMP (0x000081)\n    PID: SONMP flatnet hello (0x01a1)\nNortel Networks / SynOptics Network Management Protocol\n    NMM IP address: 172.17.142.37 (172.17.142.37)\n    Segment Identifier: 0x000004\n    Chassis type: Unknown (1)\n    Backplane type: ethernet, fast ethernet and gigabit ethernet (12)\n    NMM state: New (3)\n    Number of links: 1\n\t*/\n\tchar pkt1[] = {\n\t\t0x01, 0x00, 0x81, 0x00, 0x01, 0x00, 0x5e, 0x10,\n\t\t0x8e, 0xe7, 0x84, 0xad, 0x00, 0x13, 0xaa, 0xaa,\n\t\t0x03, 0x00, 0x00, 0x81, 0x01, 0xa2, 0xac, 0x11,\n\t\t0x8e, 0x25, 0x00, 0x00, 0x04, 0x01, 0x0c, 0x03,\n\t\t0x01 };\n\tchar pkt2[] = {\n\t\t0x01, 0x00, 0x81, 0x00, 0x01, 0x01, 0x5e, 0x10,\n\t\t0x8e, 0xe7, 0x84, 0xad, 0x00, 0x13, 0xaa, 0xaa,\n\t\t0x03, 0x00, 0x00, 0x81, 0x01, 0xa1, 0xac, 0x11,\n\t\t0x8e, 0x25, 0x00, 0x00, 0x04, 0x01, 0x0c, 0x03,\n\t\t0x01 };\n\tstruct packet *pkt;\n\tin_addr_t addr;\t\n\tstruct lldpd_mgmt *mgmt;\n\n\t/* Populate port and chassis */\n\thardware.h_lport.p_id_subtype = LLDP_PORTID_SUBTYPE_IFNAME;\n\thardware.h_lport.p_id = \"Not used\";\n\thardware.h_lport.p_id_len = strlen(hardware.h_lport.p_id);\n\tchassis.c_id_subtype = LLDP_CHASSISID_SUBTYPE_LLADDR;\n\tchassis.c_id = macaddress;\n\tchassis.c_id_len = ETHER_ADDR_LEN;\n\tTAILQ_INIT(&chassis.c_mgmt);\n\taddr = inet_addr(\"172.17.142.37\");\n\tmgmt = lldpd_alloc_mgmt(LLDPD_AF_IPV4,\n\t\t\t\t&addr, sizeof(in_addr_t), 0);\n\tif (mgmt == NULL)\n\t\tck_abort();\n\tTAILQ_INSERT_TAIL(&chassis.c_mgmt, mgmt, m_entries);\n\n\t/* Build packet */\n\tn = sonmp_send(NULL, &hardware);\n\tif (n != 0) {\n\t\tfail(\"unable to build packet\");\n\t\treturn;\n\t}\n\tif (TAILQ_EMPTY(&pkts)) {\n\t\tfail(\"no packets sent\");\n\t\treturn;\n\t}\n\tpkt = TAILQ_FIRST(&pkts);\n\tck_assert_int_eq(pkt->size, sizeof(pkt1));\n\tfail_unless(memcmp(pkt->data, pkt1, sizeof(pkt1)) == 0);\n\tpkt = TAILQ_NEXT(pkt, next);\n\tif (!pkt) {\n\t\tfail(\"need one more packet\");\n\t\treturn;\n\t}\n\tck_assert_int_eq(pkt->size, sizeof(pkt2));\n\tfail_unless(memcmp(pkt->data, pkt2, sizeof(pkt2)) == 0);\n\tfail_unless(TAILQ_NEXT(pkt, next) == NULL, \"more than two packets sent\");\n}\nEND_TEST\n\nSTART_TEST (test_recv_sonmp)\n{\n\tchar pkt1[] = {\n\t\t0x01, 0x00, 0x81, 0x00, 0x01, 0x00, 0x00, 0x1b,\n\t\t0x25, 0x08, 0x50, 0x47, 0x00, 0x13, 0xaa, 0xaa,\n\t\t0x03, 0x00, 0x00, 0x81, 0x01, 0xa2, 0xac, 0x10,\n\t\t0x65, 0xa8, 0x00, 0x02, 0x08, 0x38, 0x0c, 0x02,\n\t\t0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00, 0x00, 0x00 };\n\t/* This is:\nIEEE 802.3 Ethernet \n    Destination: Bay-Networks-(Synoptics)-autodiscovery (01:00:81:00:01:00)\n    Source: Nortel_08:50:47 (00:1b:25:08:50:47)\n    Length: 19\n    Trailer: 000000000000000000000000000000000000000000000000...\nLogical-Link Control\n    DSAP: SNAP (0xaa)\n    IG Bit: Individual\n    SSAP: SNAP (0xaa)\n    CR Bit: Command\n    Control field: U, func=UI (0x03)\n        000. 00.. = Command: Unnumbered Information (0x00)\n        .... ..11 = Frame type: Unnumbered frame (0x03)\n    Organization Code: Nortel Networks SONMP (0x000081)\n    PID: SONMP segment hello (0x01a2)\nNortel Networks / SynOptics Network Management Protocol\n    NMM IP address: 172.16.101.168 (172.16.101.168)\n    Segment Identifier: 0x000208\n    Chassis type: Accelar 8610 L3 switch (56)\n    Backplane type: ethernet, fast ethernet and gigabit ethernet (12)\n    NMM state: Heartbeat (2)\n    Number of links: 1\n\t*/\n\tstruct lldpd_chassis *nchassis = NULL;\n\tstruct lldpd_port *nport = NULL;\n\tchar cid[5];\n\tin_addr_t ip;\n\n\tfail_unless(sonmp_decode(NULL, pkt1, sizeof(pkt1), &hardware,\n\t\t&nchassis, &nport) != -1);\n\tif (!nchassis || !nport) {\n\t\tfail(\"unable to decode packet\");\n\t\treturn;\n\t}\n\tck_assert_int_eq(nchassis->c_id_subtype,\n\t    LLDP_CHASSISID_SUBTYPE_ADDR);\n\tck_assert_int_eq(nchassis->c_id_len, 5);\n\tcid[0] = 1;\n\tip = inet_addr(\"172.16.101.168\");\n\tmemcpy(cid + 1, &ip, sizeof(in_addr_t));\n\tfail_unless(memcmp(nchassis->c_id, cid, 5) == 0);\n\tck_assert_str_eq(nchassis->c_name, \"172.16.101.168\");\n\tck_assert_str_eq(nchassis->c_descr, \"Nortel Ethernet Routing 8610 L3 Switch\");\n\tck_assert_int_eq(TAILQ_FIRST(&nchassis->c_mgmt)->m_addr.inet.s_addr,\n\t    (u_int32_t)inet_addr(\"172.16.101.168\"));\n\tck_assert_int_eq(TAILQ_FIRST(&nchassis->c_mgmt)->m_iface, 0);\n\tck_assert_str_eq(nport->p_descr, \"port 2/8\");\n\tck_assert_int_eq(nport->p_id_subtype,\n\t    LLDP_PORTID_SUBTYPE_LOCAL);\n\tck_assert_int_eq(nport->p_id_len, strlen(\"00-02-08\"));\n\tfail_unless(memcmp(nport->p_id,\n\t\t\"00-02-08\", strlen(\"00-02-08\")) == 0);\n\tck_assert_int_eq(nchassis->c_cap_enabled, 0);\n}\nEND_TEST\n\n#endif\n\nSuite *\nsonmp_suite(void)\n{\n\tSuite *s = suite_create(\"SONMP\");\n\n#ifdef ENABLE_SONMP\n\tTCase *tc_send = tcase_create(\"Send SONMP packets\");\n\tTCase *tc_receive = tcase_create(\"Receive SONMP packets\");\n\n\ttcase_add_checked_fixture(tc_send, pcap_setup, pcap_teardown);\n\ttcase_add_test(tc_send, test_send_sonmp);\n\tsuite_add_tcase(s, tc_send);\n\n\ttcase_add_test(tc_receive, test_recv_sonmp);\n\tsuite_add_tcase(s, tc_receive);\n#endif\n\n\treturn s;\n}\n\nint\nmain()\n{\n\tint number_failed;\n\tSuite *s = sonmp_suite ();\n\tSRunner *sr = srunner_create (s);\n\tsrunner_set_fork_status (sr, CK_NOFORK); /* Can't fork because\n\t\t\t\t\t\t    we need to write\n\t\t\t\t\t\t    files */\n\tsrunner_run_all (sr, CK_ENV);\n\tnumber_failed = srunner_ntests_failed (sr);\n\tsrunner_free (sr);\n\treturn (number_failed == 0) ? EXIT_SUCCESS : EXIT_FAILURE;\n}\n"], "filenames": ["NEWS", "src/daemon/protocols/sonmp.c", "src/daemon/protocols/sonmp.h", "tests/check_sonmp.c"], "buggy_code_start_loc": [5, 314, 27, 36], "buggy_code_end_loc": [5, 315, 28, 103], "fixing_code_start_loc": [6, 314, 27, 36], "fixing_code_end_loc": [8, 315, 28, 103], "type": "CWE-787", "message": "In lldpd before 1.0.13, when decoding SONMP packets in the sonmp_decode function, it's possible to trigger an out-of-bounds heap read via short SONMP packets.", "other": {"cve": {"id": "CVE-2021-43612", "sourceIdentifier": "cve@mitre.org", "published": "2023-04-15T22:15:07.033", "lastModified": "2023-04-26T14:31:07.350", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In lldpd before 1.0.13, when decoding SONMP packets in the sonmp_decode function, it's possible to trigger an out-of-bounds heap read via short SONMP packets."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:lldpd_project:lldpd:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.13", "matchCriteriaId": "633CAE1D-E0A9-4CE0-B7F1-65BCD6743718"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:36:*:*:*:*:*:*:*", "matchCriteriaId": "5C675112-476C-4D7C-BCB9-A2FB2D0BC9FD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:37:*:*:*:*:*:*:*", "matchCriteriaId": "E30D0E6F-4AE8-4284-8716-991DFA48CC5D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:38:*:*:*:*:*:*:*", "matchCriteriaId": "CC559B26-5DFC-4B7A-A27C-B77DE755DFF9"}]}]}], "references": [{"url": "https://github.com/lldpd/lldpd/commit/73d42680fce8598324364dbb31b9bc3b8320adf7", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/lldpd/lldpd/compare/1.0.12...1.0.13", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3T5XHPOGIPWCRRPJUE6P3HVC5PTSD5JS/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JYA4AMJXCNF6UPFG36L2TPPT32C242SP/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SKQWHG2SZJZSGC7PXVDAEJYBN7ESDR7D/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lldpd.github.io/security.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/lldpd/lldpd/commit/73d42680fce8598324364dbb31b9bc3b8320adf7"}}