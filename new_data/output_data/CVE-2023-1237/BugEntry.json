{"buggy_code": ["import { useState, useEffect, useCallback } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\nimport classNames from 'classnames';\nimport { unionBy } from 'lodash';\nimport { marked } from 'marked';\n\nimport * as Types from '@/common/interface';\nimport { Modal } from '@/components';\nimport { usePageUsers, useReportModal } from '@/hooks';\nimport {\n  matchedUsers,\n  parseUserInfo,\n  scrollToElementTop,\n  bgFadeOut,\n} from '@/utils';\nimport { tryNormalLogged } from '@/utils/guard';\nimport {\n  useQueryComments,\n  addComment,\n  deleteComment,\n  updateComment,\n  postVote,\n} from '@/services';\n\nimport { Form, ActionBar, Reply } from './components';\n\nimport './index.scss';\n\nconst Comment = ({ objectId, mode, commentId }) => {\n  const pageUsers = usePageUsers();\n  const [pageIndex, setPageIndex] = useState(0);\n  const [visibleComment, setVisibleComment] = useState(false);\n  const pageSize = pageIndex === 0 ? 3 : 15;\n  const { data, mutate } = useQueryComments({\n    object_id: objectId,\n    comment_id: commentId,\n    page: pageIndex,\n    page_size: pageSize,\n  });\n  const [comments, setComments] = useState<any>([]);\n\n  const reportModal = useReportModal();\n\n  const { t } = useTranslation('translation', { keyPrefix: 'comment' });\n  const scrollCallback = useCallback((el, co) => {\n    if (pageIndex === 0 && co.comment_id === commentId) {\n      setTimeout(() => {\n        scrollToElementTop(el);\n        bgFadeOut(el);\n      }, 100);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    if (pageIndex === 1 || pageIndex === 0) {\n      setComments(data?.list);\n    } else {\n      setComments([...comments, ...data.list]);\n    }\n    const user: Types.PageUser[] = [];\n    data.list.forEach((item) => {\n      user.push({\n        id: item.user_id,\n        displayName: item.user_display_name,\n        userName: item.username,\n      });\n      user.push({\n        id: item.reply_comment_id,\n        displayName: item.reply_user_display_name,\n        userName: item.username,\n      });\n    });\n    pageUsers.setUsers(user);\n  }, [data]);\n\n  const handleReply = (id) => {\n    if (!tryNormalLogged(true)) {\n      return;\n    }\n    setComments(\n      comments.map((item) => {\n        if (item.comment_id === id) {\n          item.showReply = !item.showReply;\n        }\n        return item;\n      }),\n    );\n  };\n\n  const handleEdit = (id) => {\n    setComments(\n      comments.map((item) => {\n        if (item.comment_id === id) {\n          item.showEdit = !item.showEdit;\n        }\n        return item;\n      }),\n    );\n  };\n\n  const handleSendReply = (item) => {\n    const users = matchedUsers(item.value);\n    const userNames = unionBy(users.map((user) => user.userName));\n    const commentMarkDown = parseUserInfo(item.value);\n    const html = marked.parse(commentMarkDown);\n    // if (!commentMarkDown || !html) {\n    //   return;\n    // }\n    const params = {\n      object_id: objectId,\n      original_text: commentMarkDown,\n      mention_username_list: userNames,\n      parsed_text: html,\n      ...(item.type === 'reply'\n        ? {\n            reply_comment_id: item.comment_id,\n          }\n        : {}),\n    };\n\n    if (item.type === 'edit') {\n      return updateComment({\n        ...params,\n        comment_id: item.comment_id,\n      }).then(() => {\n        setComments(\n          comments.map((comment) => {\n            if (comment.comment_id === item.comment_id) {\n              comment.showEdit = false;\n              comment.parsed_text = html;\n              comment.original_text = item.value;\n            }\n            return comment;\n          }),\n        );\n      });\n    }\n    return addComment(params).then((res) => {\n      if (item.type === 'reply') {\n        const index = comments.findIndex(\n          (comment) => comment.comment_id === item.comment_id,\n        );\n        comments[index].showReply = false;\n        comments.splice(index + 1, 0, res);\n        setComments([...comments]);\n      } else {\n        setComments([\n          ...comments.map((comment) => {\n            if (comment.comment_id === item.comment_id) {\n              comment.showReply = false;\n            }\n            return comment;\n          }),\n          res,\n        ]);\n      }\n\n      setVisibleComment(false);\n    });\n  };\n\n  const handleDelete = (id) => {\n    Modal.confirm({\n      title: t('title', { keyPrefix: 'delete' }),\n      content: t('other', { keyPrefix: 'delete' }),\n      confirmBtnVariant: 'danger',\n      confirmText: t('delete', { keyPrefix: 'btns' }),\n      onConfirm: () => {\n        deleteComment(id).then(() => {\n          if (pageIndex === 0) {\n            mutate();\n          }\n          setComments(comments.filter((item) => item.comment_id !== id));\n        });\n      },\n    });\n  };\n\n  const handleVote = (id, is_cancel) => {\n    if (!tryNormalLogged(true)) {\n      return;\n    }\n\n    postVote(\n      {\n        object_id: id,\n        is_cancel,\n      },\n      'up',\n    ).then(() => {\n      setComments(\n        comments.map((item) => {\n          if (item.comment_id === id) {\n            item.vote_count = is_cancel\n              ? item.vote_count - 1\n              : item.vote_count + 1;\n            item.is_vote = !is_cancel;\n          }\n          return item;\n        }),\n      );\n    });\n  };\n\n  const handleAction = ({ action }, item) => {\n    if (!tryNormalLogged(true)) {\n      return;\n    }\n    if (action === 'report') {\n      reportModal.onShow({\n        id: item.comment_id,\n        type: 'comment',\n        action: 'flag',\n      });\n    } else if (action === 'delete') {\n      handleDelete(item.comment_id);\n    } else if (action === 'edit') {\n      handleEdit(item.comment_id);\n    }\n  };\n\n  const handleCancel = (id) => {\n    setComments(\n      comments.map((item) => {\n        if (item.comment_id === id) {\n          item.showReply = false;\n          item.showEdit = false;\n        }\n        return item;\n      }),\n    );\n  };\n  return (\n    <div className=\"comments-wrap\">\n      {comments.map((item, index) => {\n        return (\n          <div\n            key={item.comment_id}\n            ref={(el) => {\n              scrollCallback(el, item);\n            }}\n            className={classNames(\n              'border-bottom py-2 comment-item',\n              index === 0 && 'border-top',\n            )}>\n            {item.showEdit ? (\n              <Form\n                className=\"mt-2\"\n                value={item.original_text}\n                type=\"edit\"\n                mode={mode}\n                onSendReply={(value) =>\n                  handleSendReply({ ...item, value, type: 'edit' })\n                }\n                onCancel={() => handleCancel(item.comment_id)}\n              />\n            ) : (\n              <div className=\"d-block\">\n                {item.reply_user_display_name && (\n                  <Link to=\".\" className=\"fs-14 me-1 text-nowrap\">\n                    @{item.reply_user_display_name}\n                  </Link>\n                )}\n\n                <div\n                  className=\"fmt fs-14 text-break text-wrap\"\n                  dangerouslySetInnerHTML={{ __html: item.parsed_text }}\n                />\n              </div>\n            )}\n\n            {item.showReply ? (\n              <Reply\n                userName={item.user_display_name}\n                mode={mode}\n                onSendReply={(value) =>\n                  handleSendReply({ ...item, value, type: 'reply' })\n                }\n                onCancel={() => handleCancel(item.comment_id)}\n              />\n            ) : null}\n            {item.showEdit || item.showReply ? null : (\n              <ActionBar\n                nickName={item.user_display_name}\n                username={item.username}\n                createdAt={item.created_at}\n                voteCount={item.vote_count}\n                isVote={item.is_vote}\n                memberActions={item.member_actions}\n                userStatus={item.user_status}\n                onReply={() => {\n                  handleReply(item.comment_id);\n                }}\n                onAction={(action) => handleAction(action, item)}\n                onVote={(e) => {\n                  e.preventDefault();\n                  handleVote(item.comment_id, item.is_vote);\n                }}\n              />\n            )}\n          </div>\n        );\n      })}\n\n      <div className=\"mt-2\">\n        <Button\n          variant=\"link\"\n          className=\"p-0 fs-14 btn-no-border\"\n          onClick={() => {\n            if (tryNormalLogged(true)) {\n              setVisibleComment(!visibleComment);\n            }\n          }}>\n          {t('btn_add_comment')}\n        </Button>\n        {data && (pageIndex || 1) < Math.ceil((data?.count || 0) / pageSize) && (\n          <Button\n            variant=\"link\"\n            className=\"p-0 fs-14 ms-3 btn-no-border\"\n            onClick={() => {\n              setPageIndex(pageIndex + 1);\n            }}>\n            {t('show_more')}\n          </Button>\n        )}\n      </div>\n\n      {visibleComment && (\n        <Form\n          mode={mode}\n          className=\"mt-2\"\n          onSendReply={(value) => handleSendReply({ value, type: 'comment' })}\n          onCancel={() => setVisibleComment(!visibleComment)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Comment;\n"], "fixing_code": ["import { useState, useEffect, useCallback } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\nimport classNames from 'classnames';\nimport { unionBy } from 'lodash';\n\nimport * as Types from '@/common/interface';\nimport { Modal } from '@/components';\nimport { usePageUsers, useReportModal } from '@/hooks';\nimport {\n  matchedUsers,\n  parseUserInfo,\n  scrollToElementTop,\n  bgFadeOut,\n} from '@/utils';\nimport { tryNormalLogged } from '@/utils/guard';\nimport {\n  useQueryComments,\n  addComment,\n  deleteComment,\n  updateComment,\n  postVote,\n} from '@/services';\n\nimport { Form, ActionBar, Reply } from './components';\n\nimport './index.scss';\n\nconst Comment = ({ objectId, mode, commentId }) => {\n  const pageUsers = usePageUsers();\n  const [pageIndex, setPageIndex] = useState(0);\n  const [visibleComment, setVisibleComment] = useState(false);\n  const pageSize = pageIndex === 0 ? 3 : 15;\n  const { data, mutate } = useQueryComments({\n    object_id: objectId,\n    comment_id: commentId,\n    page: pageIndex,\n    page_size: pageSize,\n  });\n  const [comments, setComments] = useState<any>([]);\n\n  const reportModal = useReportModal();\n\n  const { t } = useTranslation('translation', { keyPrefix: 'comment' });\n  const scrollCallback = useCallback((el, co) => {\n    if (pageIndex === 0 && co.comment_id === commentId) {\n      setTimeout(() => {\n        scrollToElementTop(el);\n        bgFadeOut(el);\n      }, 100);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    if (pageIndex === 1 || pageIndex === 0) {\n      setComments(data?.list);\n    } else {\n      setComments([...comments, ...data.list]);\n    }\n    const user: Types.PageUser[] = [];\n    data.list.forEach((item) => {\n      user.push({\n        id: item.user_id,\n        displayName: item.user_display_name,\n        userName: item.username,\n      });\n      user.push({\n        id: item.reply_comment_id,\n        displayName: item.reply_user_display_name,\n        userName: item.username,\n      });\n    });\n    pageUsers.setUsers(user);\n  }, [data]);\n\n  const handleReply = (id) => {\n    if (!tryNormalLogged(true)) {\n      return;\n    }\n    setComments(\n      comments.map((item) => {\n        if (item.comment_id === id) {\n          item.showReply = !item.showReply;\n        }\n        return item;\n      }),\n    );\n  };\n\n  const handleEdit = (id) => {\n    setComments(\n      comments.map((item) => {\n        if (item.comment_id === id) {\n          item.showEdit = !item.showEdit;\n        }\n        return item;\n      }),\n    );\n  };\n\n  const handleSendReply = (item) => {\n    const users = matchedUsers(item.value);\n    const userNames = unionBy(users.map((user) => user.userName));\n    const commentMarkDown = parseUserInfo(item.value);\n\n    const params = {\n      object_id: objectId,\n      original_text: commentMarkDown,\n      mention_username_list: userNames,\n      ...(item.type === 'reply'\n        ? {\n            reply_comment_id: item.comment_id,\n          }\n        : {}),\n    };\n\n    if (item.type === 'edit') {\n      return updateComment({\n        ...params,\n        comment_id: item.comment_id,\n      }).then((res) => {\n        setComments(\n          comments.map((comment) => {\n            if (comment.comment_id === item.comment_id) {\n              comment.showEdit = false;\n              comment.parsed_text = res.parsed_text;\n              comment.original_text = res.original_text;\n            }\n            return comment;\n          }),\n        );\n      });\n    }\n    return addComment(params).then((res) => {\n      if (item.type === 'reply') {\n        const index = comments.findIndex(\n          (comment) => comment.comment_id === item.comment_id,\n        );\n        comments[index].showReply = false;\n        comments.splice(index + 1, 0, res);\n        setComments([...comments]);\n      } else {\n        setComments([\n          ...comments.map((comment) => {\n            if (comment.comment_id === item.comment_id) {\n              comment.showReply = false;\n            }\n            return comment;\n          }),\n          res,\n        ]);\n      }\n\n      setVisibleComment(false);\n    });\n  };\n\n  const handleDelete = (id) => {\n    Modal.confirm({\n      title: t('title', { keyPrefix: 'delete' }),\n      content: t('other', { keyPrefix: 'delete' }),\n      confirmBtnVariant: 'danger',\n      confirmText: t('delete', { keyPrefix: 'btns' }),\n      onConfirm: () => {\n        deleteComment(id).then(() => {\n          if (pageIndex === 0) {\n            mutate();\n          }\n          setComments(comments.filter((item) => item.comment_id !== id));\n        });\n      },\n    });\n  };\n\n  const handleVote = (id, is_cancel) => {\n    if (!tryNormalLogged(true)) {\n      return;\n    }\n\n    postVote(\n      {\n        object_id: id,\n        is_cancel,\n      },\n      'up',\n    ).then(() => {\n      setComments(\n        comments.map((item) => {\n          if (item.comment_id === id) {\n            item.vote_count = is_cancel\n              ? item.vote_count - 1\n              : item.vote_count + 1;\n            item.is_vote = !is_cancel;\n          }\n          return item;\n        }),\n      );\n    });\n  };\n\n  const handleAction = ({ action }, item) => {\n    if (!tryNormalLogged(true)) {\n      return;\n    }\n    if (action === 'report') {\n      reportModal.onShow({\n        id: item.comment_id,\n        type: 'comment',\n        action: 'flag',\n      });\n    } else if (action === 'delete') {\n      handleDelete(item.comment_id);\n    } else if (action === 'edit') {\n      handleEdit(item.comment_id);\n    }\n  };\n\n  const handleCancel = (id) => {\n    setComments(\n      comments.map((item) => {\n        if (item.comment_id === id) {\n          item.showReply = false;\n          item.showEdit = false;\n        }\n        return item;\n      }),\n    );\n  };\n  return (\n    <div className=\"comments-wrap\">\n      {comments.map((item, index) => {\n        return (\n          <div\n            key={item.comment_id}\n            ref={(el) => {\n              scrollCallback(el, item);\n            }}\n            className={classNames(\n              'border-bottom py-2 comment-item',\n              index === 0 && 'border-top',\n            )}>\n            {item.showEdit ? (\n              <Form\n                className=\"mt-2\"\n                value={item.original_text}\n                type=\"edit\"\n                mode={mode}\n                onSendReply={(value) =>\n                  handleSendReply({ ...item, value, type: 'edit' })\n                }\n                onCancel={() => handleCancel(item.comment_id)}\n              />\n            ) : (\n              <div className=\"d-block\">\n                {item.reply_user_display_name && (\n                  <Link to=\".\" className=\"fs-14 me-1 text-nowrap\">\n                    @{item.reply_user_display_name}\n                  </Link>\n                )}\n\n                <div\n                  className=\"fmt fs-14 text-break text-wrap\"\n                  dangerouslySetInnerHTML={{ __html: item.parsed_text }}\n                />\n              </div>\n            )}\n\n            {item.showReply ? (\n              <Reply\n                userName={item.user_display_name}\n                mode={mode}\n                onSendReply={(value) =>\n                  handleSendReply({ ...item, value, type: 'reply' })\n                }\n                onCancel={() => handleCancel(item.comment_id)}\n              />\n            ) : null}\n            {item.showEdit || item.showReply ? null : (\n              <ActionBar\n                nickName={item.user_display_name}\n                username={item.username}\n                createdAt={item.created_at}\n                voteCount={item.vote_count}\n                isVote={item.is_vote}\n                memberActions={item.member_actions}\n                userStatus={item.user_status}\n                onReply={() => {\n                  handleReply(item.comment_id);\n                }}\n                onAction={(action) => handleAction(action, item)}\n                onVote={(e) => {\n                  e.preventDefault();\n                  handleVote(item.comment_id, item.is_vote);\n                }}\n              />\n            )}\n          </div>\n        );\n      })}\n\n      <div className=\"mt-2\">\n        <Button\n          variant=\"link\"\n          className=\"p-0 fs-14 btn-no-border\"\n          onClick={() => {\n            if (tryNormalLogged(true)) {\n              setVisibleComment(!visibleComment);\n            }\n          }}>\n          {t('btn_add_comment')}\n        </Button>\n        {data && (pageIndex || 1) < Math.ceil((data?.count || 0) / pageSize) && (\n          <Button\n            variant=\"link\"\n            className=\"p-0 fs-14 ms-3 btn-no-border\"\n            onClick={() => {\n              setPageIndex(pageIndex + 1);\n            }}>\n            {t('show_more')}\n          </Button>\n        )}\n      </div>\n\n      {visibleComment && (\n        <Form\n          mode={mode}\n          className=\"mt-2\"\n          onSendReply={(value) => handleSendReply({ value, type: 'comment' })}\n          onCancel={() => setVisibleComment(!visibleComment)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Comment;\n"], "filenames": ["ui/src/components/Comment/index.tsx"], "buggy_code_start_loc": [8], "buggy_code_end_loc": [138], "fixing_code_start_loc": [7], "fixing_code_end_loc": [133], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.6.", "other": {"cve": {"id": "CVE-2023-1237", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-07T08:15:08.680", "lastModified": "2023-03-13T15:16:28.540", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.6."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.4, "baseSeverity": "LOW"}, "exploitabilityScore": 1.6, "impactScore": 1.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:answer:answer:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.6", "matchCriteriaId": "BC30C65B-0A27-4181-94A2-75BDAD7D7145"}]}]}], "references": [{"url": "https://github.com/answerdev/answer/commit/0566894a2c0e13cf07d877f41467e2e21529fee8", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/cc2aa618-05da-495d-a5cd-51c40557d481", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/answerdev/answer/commit/0566894a2c0e13cf07d877f41467e2e21529fee8"}}