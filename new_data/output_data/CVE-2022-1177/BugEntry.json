{"buggy_code": ["<?php\n\n/**\n * Upgrade script for access controls.\n *\n * This script will update the phpGACL database, which include\n * Access Control Objects(ACO), Groups(ARO), and Access Control\n * Lists(ACL) to the most recent version.\n * It will display whether each update already exist\n * or if it was updated succesfully.\n * To avoid reversing customizations, upgrade is done in versions,\n * which are recorded in the database. To add another version of\n * changes, use the following template:\n * <pre>// Upgrade for acl_version <acl_version_here>\n * $upgrade_acl = <acl_version_here>;\n * if ($acl_version < $upgrade_acl) {\n *   echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \".$upgrade_acl.\":</B></BR>\";\n *\n *   //Collect the ACL ID numbers.\n *   echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n *\n *   //Add new object Sections\n *   echo \"<BR/><B>Adding new object sections</B><BR/>\";\n *\n *   //Add new Objects\n *   echo \"<BR/><B>Adding new objects</B><BR/>\";\n *\n *   //Update already existing Objects\n *   echo \"<BR/><B>Upgrading objects</B><BR/>\";\n *\n *   //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n *   // (will also place in the appropriate group and CREATE a new group if needed)\n *   echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n *\n *   //Update the ACLs\n *   echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n *\n *   //DONE with upgrading to this version\n *   $acl_version = $upgrade_acl;\n * }\n * </pre>\n *\n * Updates included:\n *  <pre>---VERSION 1 ACL---\n *   2.8.2\n *     Section \"sensitivities\" (Sensitivities):\n *       ADD  normal   Normal              (Administrators, Physicians, Clinicians(addonly))\n *       ADD  high     High                (Administrators, Physicians)\n *     Section \"admin\"         (Administration):\n *       ADD  super    Superuser           (Adminstrators)\n *   2.8.4\n *     Section \"admin\"         (Administration):\n *       ADD  drugs    Pharmacy Dispensary (Administrators, Physicians, Clinicians(write))\n *       ADD  acl      ACL Administration (Administrators)\n *     Section \"sensitivities\" (Sensitivities):\n *       EDIT high     High               (ensure the order variable is '20')\n *     Section \"acct\"          (Accounting):\n *       ADD  disc     Price Discounting (Administrators, Physicians, Accounting(write))\n *   3.0.2\n *     ADD Section \"lists\" (Lists):\n *       ADD  default   Default List (write,addonly optional)  (Administrators)\n *       ADD  state     State List (write,addonly optional)  (Administrators)\n *       ADD  country   Country List (write,addonly optional)  (Administrators)\n *       ADD  language  Language List (write,addonly optional)  (Administrators)\n *       ADD  ethrace   Ethnicity-Race List (write,addonly optional)  (Administrators)\n *     ADD Section \"placeholder\" (Placeholder):\n *       ADD  filler    Placeholder (Maintains empty ACLs)\n *     ACL/Group  doc   addonly  \"Physicians\"   (filler aco)\n *     ACL/Group  front addonly  \"Front Office\" (filler aco)\n *     ACL/Group  back  addonly  \"Accounting\"   (filler aco)\n *   3.3.0\n *     Section \"patients\" (Patients):\n *       ADD  sign  Sign Lab Results (Physicians)\n *     ACL/Group  breakglass  write  \"Emergency Login\"  (added all aco's to it)\n *   4.1.0\n *     Section \"nationnotes\" (Nation Notes):\n *       ADD  nn_configure  Nation Notes Configure  (Administrators, Emergency Login)\n *     Section \"patientportal\" (Patient Portal):\n *       ADD  portal    Patient Portal     (Administrators, Emergency Login)\n *   4.1.1\n *     ACL/Group  doc   wsome  \"Physicians\"   (filler aco)\n *     ACL/Group  clin  wsome  \"Clinicians\"   (filler aco)\n *     ACL/Group  front wsome  \"Front Office\" (filler aco)\n *     ACL/Group  back  wsome  \"Accounting\"   (filler aco)\n *     ACL/Group  doc   view   \"Physicians\"   (filler aco)\n *     ACL/Group  clin  view   \"Clinicians\"   (filler aco)\n *     ACL/Group  front view   \"Front Office\" (filler aco)\n *     ACL/Group  back  view   \"Accounting\"   (filler aco)\n *   4.1.3\n *     Section \"menus\" (Menus):\n *       ADD modle Module (Administrators, Emergency Login)\n *   5.0.1\n *     Section \"patients\" (Patients):\n *       ADD  reminder    Patient Reminders         (Physicians,Clinicians(addonly))\n *       ADD  alert       Clinical Reminders/Alerts (Physicians,Clinicians,Front Office(view),Accounting(view))\n *       ADD  disclosure  Disclosures               (Physicians,Clinicians(addonly))\n *       ADD  rx          Prescriptions             (Physicians,Clinicians(addonly))\n *       ADD  amendment   Amendments                (Physicians,Clinicians(addonly))\n *       ADD  lab         Lab Results               (Physicians,Clinicians(addonly))\n *       ADD  docs_rm     Documents Delete          (Administrators)\n *     Section \"admin\" (Administration):\n *       ADD  multipledb  Multipledb                (Administrators)\n *       ADD  menu        Menu                      (Administrators)\n *     Section \"groups\" (Groups):\n *       ADD  gadd        View/Add/Update groups    (Administrators)\n *       ADD  gcalendar   View/Create/Update groups appointment in calendar (Administrators,Physicians,Clinicians)\n *       ADD  glog        Group encounter log       (Administrators,Physicians, Clinicians)\n *       ADD  gdlog       Group detailed log of appointment in patient record (Administrators)\n *       ADD  gm          Send message from the permanent group therapist to the personal therapist (Administrators)\n *   5.0.2\n *     Section \"patients\" (Patients):\n *       ADD  pat_rep     Patient Report            (Administrators)\n * </pre>\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2012-2017 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n// Checks if the server's PHP version is compatible with OpenEMR:\nrequire_once(dirname(__FILE__) . \"/src/Common/Compatibility/Checker.php\");\n$response = OpenEMR\\Common\\Compatibility\\Checker::checkPhpVersion();\nif ($response !== true) {\n    die(htmlspecialchars($response));\n}\n\n$ignoreAuth = true; // no login required\n\nrequire_once('interface/globals.php');\n\nuse OpenEMR\\Common\\Acl\\AclExtended;\n\n$acl_version = AclExtended::getAclVersion();\nif (empty($acl_version)) {\n    $acl_version = 0;\n}\n\n// Upgrade for acl_version 1\n$upgrade_acl = 1;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    //Get Administrator ACL ID number\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    //Get Doctor ACL ID Number\n    $doc_write = AclExtended::getAclIdNumber('Physicians', 'write');\n    //Get Clinician ACL with write access ID number\n    $clin_write = AclExtended::getAclIdNumber('Clinicians', 'write');\n    //Get Clinician ACL with addonly access ID number\n    $clin_addonly = AclExtended::getAclIdNumber('Clinicians', 'addonly');\n    //Get Receptionist ACL ID number\n    $front_write = AclExtended::getAclIdNumber('Front Office', 'write');\n    //Get Accountant ACL ID number\n    $back_write = AclExtended::getAclIdNumber('Accounting', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    //Add 'Sensitivities' object section (added in 2.8.2)\n    AclExtended::addObjectSectionAcl('sensitivities', 'Sensitivities');\n    //Add 'Lists' object section (added in 3.0.2)\n    AclExtended::addObjectSectionAcl('lists', 'Lists');\n    //Add 'Placeholder' object section (added in 3.0.2)\n    AclExtended::addObjectSectionAcl('placeholder', 'Placeholder');\n    //Add 'Nation Notes' object section (added in 4.1.0)\n    AclExtended::addObjectSectionAcl('nationnotes', 'Nation Notes');\n    //Add 'Patient Portal' object section (added in 4.1.0)\n    AclExtended::addObjectSectionAcl('patientportal', 'Patient Portal');\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n    //Add 'Normal' sensitivity object, order variable is default 10 (added in 2.8.2)\n    AclExtended::addObjectAcl('sensitivities', 'Sensitivities', 'normal', 'Normal');\n    //Add 'High' sensitivity object, order variable is set to 20 (added in 2.8.2)\n    AclExtended::addObjectAclWithOrder('sensitivities', 'Sensitivities', 'high', 'High', 20);\n    //Add 'Pharmacy Dispensary' object (added in 2.8.4)\n    AclExtended::addObjectAcl('admin', 'Administration', 'drugs', 'Pharmacy Dispensary');\n    //Add 'ACL Administration' object (added in 2.8.4)\n    AclExtended::addObjectAcl('admin', 'Administration', 'acl', 'ACL Administration');\n    //Add 'Price Discounting' object (added in 2.8.4)\n    AclExtended::addObjectAcl('acct', 'Accounting', 'disc', 'Price Discounting');\n    //Add 'Default List (write,addonly optional)' object (added in 3.0.2)\n    AclExtended::addObjectAcl('lists', 'Lists', 'default', 'Default List (write,addonly optional)');\n    //Add 'State List (write,addonly optional)' object (added in 3.0.2)\n    AclExtended::addObjectAcl('lists', 'Lists', 'state', 'State List (write,addonly optional)');\n    //Add 'Country List (write,addonly optional)' object (added in 3.0.2)\n    AclExtended::addObjectAcl('lists', 'Lists', 'country', 'Country List (write,addonly optional)');\n    //Add 'Language List (write,addonly optional)' object (added in 3.0.2)\n    AclExtended::addObjectAcl('lists', 'Lists', 'language', 'Language List (write,addonly optional)');\n    //Add 'Ethnicity-Race List (write,addonly optional)' object (added in 3.0.2)\n    AclExtended::addObjectAcl('lists', 'Lists', 'ethrace', 'Ethnicity-Race List (write,addonly optional)');\n    //Add 'Placeholder (Maintains empty ACLs)' object (added in 3.0.2)\n    AclExtended::addObjectAcl('placeholder', 'Placeholder', 'filler', 'Placeholder (Maintains empty ACLs)');\n    //Add 'Sign Lab Results (write,addonly optional)' object (added in 3.3.0)\n    AclExtended::addObjectAcl('patients', 'Patients', 'sign', 'Sign Lab Results (write,addonly optional)');\n    //Add 'nationnotes' object (added in 4.1.0)\n    AclExtended::addObjectAcl('nationnotes', 'Nation Notes', 'nn_configure', 'Nation Notes Configure');\n    //Add 'patientportal' object (added in 4.1.0)\n    AclExtended::addObjectAcl('patientportal', 'Patient Portal', 'portal', 'Patient Portal');\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n    //Ensure that 'High' sensitivity object order variable is set to 20\n    AclExtended::editObjectAcl('sensitivities', 'Sensitivities', 'high', 'High', 20);\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n    //Add 'Physicians' ACL with 'addonly' and collect the ID number (added in 3.0.2)\n    $doc_addonly = AclExtended::addNewACL('Physicians', 'doc', 'addonly', 'Things that physicians can read and enter but not modify');\n    //Add 'Front Office' ACL with 'addonly' and collect the ID number (added in 3.0.2)\n    $front_addonly = AclExtended::addNewACL('Front Office', 'front', 'addonly', 'Things that front office can read and enter but not modify');\n    //Add 'Accounting' ACL with 'addonly' and collect the ID number (added in 3.0.2)\n    $back_addonly = AclExtended::addNewACL('Accounting', 'back', 'addonly', 'Things that back office can read and enter but not modify');\n    //Add 'Emergency Login' ACL with 'write' and collect the ID number (added in 3.3.0)\n    $emergency_write = AclExtended::addNewACL('Emergency Login', 'breakglass', 'write', 'Things that can use for emergency login, can read and modify');\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    //Insert the 'super' object from the 'admin' section into the Administrators group write ACL (added in 2.8.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'admin', 'Administration', 'super', 'Superuser', 'write');\n    //Insert the 'high' object from the 'sensitivities' section into the Administrators group write ACL (added in 2.8.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'sensitivities', 'Sensitivities', 'high', 'High', 'write');\n    //Insert the 'normal' object from the 'sensitivities' section into the Administrators group write ACL (added in 2.8.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'sensitivities', 'Sensitivities', 'normal', 'Normal', 'write');\n    //Insert the 'high' object from the 'sensitivities' section into the Physicians group write ACL (added in 2.8.2)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'sensitivities', 'Sensitivities', 'high', 'High', 'write');\n    //Insert the 'normal' object from the 'sensitivities' section into the Physicians group write ACL (added in 2.8.2)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'sensitivities', 'Sensitivities', 'normal', 'Normal', 'write');\n    //Insert the 'normal' object from the 'sensitivities' section into the Clinicians group  addonly ACL (added in 2.8.2)\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'sensitivities', 'Sensitivities', 'normal', 'Normal', 'addonly');\n    //Insert the 'drugs' object from the 'admin' section into the Administrators group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'admin', 'Administration', 'drugs', 'Pharmacy Dispensary', 'write');\n    //Insert the 'drugs' object from the 'admin' section into the Physicians group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'admin', 'Administration', 'drugs', 'Pharmacy Dispensary', 'write');\n    //Insert the 'drugs' object from the 'admin' section into the Clinicians group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($clin_write, 'Clinicians', 'admin', 'Administration', 'drugs', 'Pharmacy Dispensary', 'write');\n    //Insert the 'acl' object from the 'admin' section into the Administrators group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'admin', 'Administration', 'acl', 'ACL Administration', 'write');\n    //Insert the 'disc' object from the 'acct' section into the Administrators group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'acct', 'Accounting', 'disc', 'Price Discounting', 'write');\n    //Insert the 'disc' object from the 'acct' section into the Accounting group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($back_write, 'Accounting', 'acct', 'Accounting', 'disc', 'Price Discounting', 'write');\n    //Insert the 'disc' object from the 'acct' section into the Physicians group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'acct', 'Accounting', 'disc', 'Price Discounting', 'write');\n    //Insert the 'default' object from the 'lists' section into the Administrators group write ACL (added in 3.0.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'lists', 'Lists', 'default', 'Default List (write,addonly optional)', 'write');\n    //Insert the 'state' object from the 'lists' section into the Administrators group write ACL (added in 3.0.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'lists', 'Lists', 'state', 'State List (write,addonly optional)', 'write');\n    //Insert the 'country' object from the 'lists' section into the Administrators group write ACL (added in 3.0.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'lists', 'Lists', 'country', 'Country List (write,addonly optional)', 'write');\n    //Insert the 'language' object from the 'lists' section into the Administrators group write ACL (added in 3.0.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'lists', 'Lists', 'language', 'Language List (write,addonly optional)', 'write');\n    //Insert the 'race' object from the 'lists' section into the Administrators group write ACL (added in 3.0.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'lists', 'Lists', 'ethrace', 'Ethnicity-Race List (write,addonly optional)', 'write');\n    //Update ACLs for Emergency Login\n    //Insert the 'disc' object from the 'acct' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'acct', 'Accounting', 'disc', 'Price Discounting', 'write');\n    //Insert the 'bill' object from the 'acct' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'acct', 'Accounting', 'bill', 'Billing (write optional)', 'write');\n    //Insert the 'eob' object from the 'acct' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'acct', 'Accounting', 'eob', 'EOB Data Entry', 'write');\n    //Insert the 'rep' object from the 'acct' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'acct', 'Accounting', 'rep', 'Financial Reporting - my encounters', 'write');\n    //Insert the 'rep_a' object from the 'acct' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'acct', 'Accounting', 'rep_a', 'Financial Reporting - anything', 'write');\n    //Insert the 'calendar' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'calendar', 'Calendar Settings', 'write');\n    //Insert the 'database' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'database', 'Database Reporting', 'write');\n    //Insert the 'forms' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'forms', 'Forms Administration', 'write');\n    //Insert the 'practice' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'practice', 'Practice Settings', 'write');\n    //Insert the 'superbill' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'superbill', 'Superbill Codes Administration', 'write');\n    //Insert the 'users' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'users', 'Users/Groups/Logs Administration', 'write');\n    //Insert the 'batchcom' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'batchcom', 'Batch Communication Tool', 'write');\n    //Insert the 'language' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'language', 'Language Interface Tool', 'write');\n    //Insert the 'super' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'super', 'Superuser', 'write');\n    //Insert the 'drugs' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'drugs', 'Pharmacy Dispensary', 'write');\n    //Insert the 'acl' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'acl', 'ACL Administration', 'write');\n    //Insert the 'auth_a' object from the 'encounters' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'auth_a', 'Authorize - any encounters', 'write');\n    //Insert the 'coding_a' object from the 'encounters' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'coding_a', 'Coding - any encounters (write,wsome optional)', 'write');\n    //Insert the 'notes_a' object from the 'encounters' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'notes_a', 'Notes - any encounters (write,addonly optional)', 'write');\n    //Insert the 'date_a' object from the 'encounters' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'date_a', 'Fix encounter dates - any encounters', 'write');\n    //Insert the 'default' object from the 'lists' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'lists', 'Lists', 'default', 'Default List (write,addonly optional)', 'write');\n    //Insert the 'state' object from the 'lists' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'lists', 'Lists', 'state', 'State List (write,addonly optional)', 'write');\n    //Insert the 'country' object from the 'lists' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'lists', 'Lists', 'country', 'Country List (write,addonly optional)', 'write');\n    //Insert the 'language' object from the 'lists' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'lists', 'Lists', 'language', 'Language List (write,addonly optional)', 'write');\n    //Insert the 'ethrace' object from the 'lists' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'lists', 'Lists', 'ethrace', 'Ethnicity-Race List (write,addonly optional)', 'write');\n    //Insert the 'appt' object from the 'patients' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'appt', 'Appointments (write,wsome optional)', 'write');\n    //Insert the 'demo' object from the 'patients' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'demo', 'Demographics (write,addonly optional)', 'write');\n    //Insert the 'med' object from the 'patients' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'med', 'Medical/History (write,addonly optional)', 'write');\n    //Insert the 'trans' object from the 'patients' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'trans', 'Transactions (write optional)', 'write');\n    //Insert the 'docs' object from the 'patients' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'docs', 'Documents (write,addonly optional)', 'write');\n    //Insert the 'notes' object from the 'patients' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'notes', 'Patient Notes (write,addonly optional)', 'write');\n    //Insert the 'high' object from the 'sensitivities' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'sensitivities', 'Sensitivities', 'high', 'High', 'write');\n    //Insert the 'normal' object from the 'sensitivities' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'sensitivities', 'Sensitivities', 'normal', 'Normal', 'write');\n    //Insert the 'sign' object from the 'patients' section into the Physicians group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'sign', 'Sign Lab Results (write,addonly optional)', 'write');\n    //Insert the 'sign' object from the 'nationnotes' section into the Administrators group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'nationnotes', 'Nation Notes', 'nn_configure', 'Nation Notes Configure', 'write');\n    //Insert the 'sign' object from the 'nationnotes' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'nationnotes', 'Nation Notes', 'nn_configure', 'Nation Notes Configure', 'write');\n    //Insert the 'patientportal' object from the 'patientportal' section into the Administrators group write ACL (added in 4.1.0)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patientportal', 'Patient Portal', 'portal', 'Patient Portal', 'write');\n    //Insert the 'patientportal' object from the 'patientportal' section into the Emergency Login group write ACL (added in 4.1.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patientportal', 'Patient Portal', 'portal', 'Patient Portal', 'write');\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 2\n$upgrade_acl = 2;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n    AclExtended::addNewACL('Physicians', 'doc', 'wsome', 'Things that physicians can read and partly modify');\n    AclExtended::addNewACL('Clinicians', 'clin', 'wsome', 'Things that clinicians can read and partly modify');\n    AclExtended::addNewACL('Front Office', 'front', 'wsome', 'Things that front office can read and partly modify');\n    AclExtended::addNewACL('Accounting', 'back', 'wsome', 'Things that back office can read and partly modify');\n    AclExtended::addNewACL('Physicians', 'doc', 'view', 'Things that physicians can only read');\n    AclExtended::addNewACL('Clinicians', 'clin', 'view', 'Things that clinicians can only read');\n    AclExtended::addNewACL('Front Office', 'front', 'view', 'Things that front office can only read');\n    AclExtended::addNewACL('Accounting', 'back', 'view', 'Things that back office can only read');\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 3\n$upgrade_acl = 3;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    //Get Administrator ACL ID number\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    //Get Emergency ACL ID number\n    $emergency_write = AclExtended::getAclIdNumber('Emergency Login', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    //Add 'Menus' object section (added in 4.1.3)\n    AclExtended::addObjectSectionAcl('menus', 'Menus');\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n    //Add 'modules' object (added in 4.1.3)\n    AclExtended::addObjectAcl('menus', 'Menus', 'modle', 'Modules');\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    //Insert the 'Modules' object from the 'Menus' section into the Administrators group write ACL (added in 4.1.3)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'menus', 'Menus', 'modle', 'Modules', 'write');\n    //Insert the 'Modules' object from the 'Menus' section into the Emergency Login group write ACL (added in 4.1.3)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'menus', 'Menus', 'modle', 'Modules', 'write');\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 4\n$upgrade_acl = 4;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    //Get Administrator ACL ID number\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    //Get Doctor ACL ID Number\n    $doc_write = AclExtended::getAclIdNumber('Physicians', 'write');\n    //Get Clinician ACL with write access ID number\n    $clin_write = AclExtended::getAclIdNumber('Clinicians', 'write');\n    //Get Clinician ACL with addonly access ID number\n    $clin_addonly = AclExtended::getAclIdNumber('Clinicians', 'addonly');\n    //Get Receptionist ACL ID number\n    $front_write = AclExtended::getAclIdNumber('Front Office', 'write');\n    //Get Accountant ACL ID number\n    $back_write = AclExtended::getAclIdNumber('Accounting', 'write');\n\n    //Add new object Sections\n    // echo \"<BR/><B>Adding new object sections</B><BR/>\";\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n    // Add 'Patient Reminders (write,addonly optional)' object (added in 5.0.1)\n    AclExtended::addObjectAcl('patients', 'Patients', 'reminder', 'Patient Reminders (write,addonly optional)');\n    // Add 'Clinical Reminders/Alerts (write,addonly optional)' object (added in 5.0.1)\n    AclExtended::addObjectAcl('patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)');\n    // Add 'Disclosures (write,addonly optional)' object (added in 5.0.1)\n    AclExtended::addObjectAcl('patients', 'Patients', 'disclosure', 'Disclosures (write,addonly optional)');\n    // Add 'Prescriptions (write,addonly optional)' object (added in 5.0.1)\n    AclExtended::addObjectAcl('patients', 'Patients', 'rx', 'Prescriptions (write,addonly optional)');\n    // Add 'Amendments (write,addonly optional)' object (added in 5.0.1)\n    AclExtended::addObjectAcl('patients', 'Patients', 'amendment', 'Amendments (write,addonly optional)');\n    // Add 'Lab Results (write,addonly optional)' object (added in 5.0.1)\n    AclExtended::addObjectAcl('patients', 'Patients', 'lab', 'Lab Results (write,addonly optional)');\n\n    //Update already existing Objects\n    // echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    // echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    //Insert the 'reminder' object from the 'patients' section into the Physicians group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'reminder', 'Patient Reminders (write,addonly optional)', 'write');\n    //Insert the 'alert' object from the 'patients' section into the Physicians group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)', 'write');\n    //Insert the 'disclosure' object from the 'patients' section into the Physicians group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'disclosure', 'Disclosures (write,addonly optional)', 'write');\n    //Insert the 'rx' object from the 'patients' section into the Physicians group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'rx', 'Prescriptions (write,addonly optional)', 'write');\n    //Insert the 'amendment' object from the 'patients' section into the Physicians group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'amendment', 'Amendments (write,addonly optional)', 'write');\n    //Insert the 'lab' object from the 'patients' section into the Physicians group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'lab', 'Lab Results (write,addonly optional)', 'write');\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n //This is a template for a new revision, when needed\n// Upgrade for acl_version 5\n$upgrade_acl = 5;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    //Get Accountant ACL ID number\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    // Add 'Groups' object (added in 5.0.1)\n    AclExtended::addObjectSectionAcl('groups', 'Groups');\n\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n    // Add 'Multipledb' object (added in 5.0.1)\n    AclExtended::addObjectAcl('admin', 'Administration', 'multipledb', 'Multipledb');\n    AclExtended::addObjectAcl('groups', 'Groups', 'gadd', 'View/Add/Update groups');\n    AclExtended::addObjectAcl('groups', 'Groups', 'gcalendar', 'View/Create/Update groups appointment in calendar');\n    AclExtended::addObjectAcl('groups', 'Groups', 'glog', 'Group encounter log');\n    AclExtended::addObjectAcl('groups', 'Groups', 'gdlog', 'Group detailed log of appointment in patient record');\n    AclExtended::addObjectAcl('groups', 'Groups', 'gm', 'Send message from the permanent group therapist to the personal therapist');\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    AclExtended::updateAcl($admin_write, 'Administrators', 'groups', 'Groups', 'gadd', 'View/Add/Update groups', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'groups', 'Groups', 'gcalendar', 'View/Create/Update groups appointment in calendar', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'groups', 'Groups', 'glog', 'Group encounter log', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'groups', 'Groups', 'gdlog', 'Group detailed log of appointment in patient record', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'groups', 'Groups', 'gm', 'Send message from the permanent group therapist to the personal therapist', 'write');\n    //Insert the 'Multipledb' object from the 'admin' section into the Administrators group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'admin', 'Administration', 'multipledb', 'Multipledb', 'write');\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 6\n$upgrade_acl = 6;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    $doc_write = AclExtended::getAclIdNumber('Physicians', 'write');\n    $clin_addonly = AclExtended::getAclIdNumber('Clinicians', 'addonly');\n    $clin_write = AclExtended::getAclIdNumber('Clinicians', 'write');\n    $front_view = AclExtended::getAclIdNumber('Front Office', 'view');\n    $front_write = AclExtended::getAclIdNumber('Front Office', 'write');\n    $back_view = AclExtended::getAclIdNumber('Accounting', 'view');\n    $emergency_write = AclExtended::getAclIdNumber('Emergency Login', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    AclExtended::addObjectAcl('admin', 'Administration', 'menu', 'Menu');\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    AclExtended::updateAcl($admin_write, 'Administrators', 'admin', 'Administration', 'menu', 'Menu', 'write');\n\n    AclExtended::updateAcl($admin_write, 'Administrators', 'encounters', 'Encounters', 'auth', 'Authorize - my encounters', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'encounters', 'Encounters', 'coding', 'Coding - my encounters (write,wsome optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'encounters', 'Encounters', 'notes', 'Notes - my encounters (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'encounters', 'Encounters', 'relaxed', 'Less-private information (write,addonly optional)', 'write');\n\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'sign', 'Sign Lab Results (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'reminder', 'Patient Reminders (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'disclosure', 'Disclosures (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'rx', 'Prescriptions (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'amendment', 'Amendments (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'lab', 'Lab Results (write,addonly optional)', 'write');\n\n    AclExtended::updateAcl($doc_write, 'Physicians', 'encounters', 'Encounters', 'auth', 'Authorize - my encounters', 'write');\n    AclExtended::updateAcl($doc_write, 'Physicians', 'encounters', 'Encounters', 'coding', 'Coding - my encounters (write,wsome optional)', 'write');\n    AclExtended::updateAcl($doc_write, 'Physicians', 'encounters', 'Encounters', 'notes', 'Notes - my encounters (write,addonly optional)', 'write');\n    AclExtended::updateAcl($doc_write, 'Physicians', 'encounters', 'Encounters', 'relaxed', 'Less-private information (write,addonly optional)', 'write');\n\n    AclExtended::updateAcl($doc_write, 'Physicians', 'groups', 'Groups', 'gcalendar', 'View/Create/Update groups appointment in calendar', 'write');\n    AclExtended::updateAcl($doc_write, 'Physicians', 'groups', 'Groups', 'glog', 'Group encounter log', 'write');\n\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'trans', 'Transactions (write optional)', 'addonly');\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'reminder', 'Patient Reminders (write,addonly optional)', 'addonly');\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)', 'addonly');\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'disclosure', 'Disclosures (write,addonly optional)', 'addonly');\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'rx', 'Prescriptions (write,addonly optional)', 'addonly');\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'amendment', 'Amendments (write,addonly optional)', 'addonly');\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'lab', 'Lab Results (write,addonly optional)', 'addonly');\n\n    AclExtended::updateAcl($clin_write, 'Clinicians', 'groups', 'Groups', 'gcalendar', 'View/Create/Update groups appointment in calendar', 'write');\n    AclExtended::updateAcl($clin_write, 'Clinicians', 'groups', 'Groups', 'glog', 'Group encounter log', 'write');\n\n    AclExtended::updateAcl($front_view, 'Front Office', 'patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)', 'view');\n\n    AclExtended::updateAcl($front_write, 'Front Office', 'groups', 'Groups', 'gcalendar', 'View/Create/Update groups appointment in calendar', 'write');\n\n    AclExtended::updateAcl($back_view, 'Accounting', 'patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)', 'view');\n\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'multipledb', 'Multipledb', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'menu', 'Menu', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'auth', 'Authorize - my encounters', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'coding', 'Coding - my encounters (write,wsome optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'notes', 'Notes - my encounters (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'relaxed', 'Less-private information (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'sign', 'Sign Lab Results (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'reminder', 'Patient Reminders (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'disclosure', 'Disclosures (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'rx', 'Prescriptions (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'amendment', 'Amendments (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'lab', 'Lab Results (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'groups', 'Groups', 'gadd', 'View/Add/Update groups', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'groups', 'Groups', 'gcalendar', 'View/Create/Update groups appointment in calendar', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'groups', 'Groups', 'glog', 'Group encounter log', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'groups', 'Groups', 'gdlog', 'Group detailed log of appointment in patient record', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'groups', 'Groups', 'gm', 'Send message from the permanent group therapist to the personal therapist', 'write');\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n\n// Upgrade for acl_version 7\n$upgrade_acl = 7;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    $emergency_write = AclExtended::getAclIdNumber('Emergency Login', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    AclExtended::addObjectAcl('admin', 'Administration', 'manage_modules', 'Manage modules');\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n    AclExtended::updateAcl($admin_write, 'Administrators', 'admin', 'Administration', 'manage_modules', 'Manage modules', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'manage_modules', 'Manage modules', 'write');\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 8\n$upgrade_acl = 8;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    $emergency_write = AclExtended::getAclIdNumber('Emergency Login', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    AclExtended::addObjectAcl('patients', 'Patients', 'docs_rm', 'Documents Delete');\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'docs_rm', 'Documents Delete', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'docs_rm', 'Documents Delete', 'write');\n\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 9\n$upgrade_acl = 9;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    $accounting_view = AclExtended::getAclIdNumber('Accounting', 'view');\n    $clinicians_view = AclExtended::getAclIdNumber('Clinicians', 'view');\n    $emergency_write = AclExtended::getAclIdNumber('Emergency Login', 'write');\n    $frontoffice_view = AclExtended::getAclIdNumber('Front Office', 'view');\n    $physicians_view = AclExtended::getAclIdNumber('Physicians', 'view');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n    AclExtended::addObjectAcl('patients', 'Patients', 'pat_rep', 'Patient Report');\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'write');\n    AclExtended::updateAcl($accounting_view, 'Accounting', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'view');\n    AclExtended::updateAcl($clinicians_view, 'Clinicians', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'view');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'write');\n    AclExtended::updateAcl($frontoffice_view, 'Front Office', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'view');\n    AclExtended::updateAcl($physicians_view, 'Physicians', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'view');\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 10\n$upgrade_acl = 10;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    $emergency_write = AclExtended::getAclIdNumber('Emergency Login', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    AclExtended::addObjectSectionAcl('inventory', 'Inventory');\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'lots', 'Lots');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'sales', 'Sales');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'purchases', 'Purchases');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'transfers', 'Transfers');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'adjustments', 'Adjustments');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'consumption', 'Consumption');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'destruction', 'Destruction');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'reporting', 'Reporting');\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n    //Rename \"Pharmacy Dispensary\" to \"Inventory Administration\".\n    AclExtended::editObjectAcl('admin', 'Administration', 'drugs', 'Inventory Administration', 10);\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'lots', 'Lots', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'sales', 'Sales', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'purchases', 'Purchases', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'transfers', 'Transfers', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'adjustments', 'Adjustments', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'consumption', 'Consumption', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'destruction', 'Destruction', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'reporting', 'Reporting', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'lots', 'Lots', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'sales', 'Sales', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'purchases', 'Purchases', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'transfers', 'Transfers', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'adjustments', 'Adjustments', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'consumption', 'Consumption', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'destruction', 'Destruction', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'reporting', 'Reporting', 'write');\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 11\n$upgrade_acl = 11;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $clin_write = AclExtended::getAclIdNumber('Clinicians', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    AclExtended::updateAcl($clin_write, 'Clinicians', 'encounters', 'Encounters', 'auth', 'Authorize - my encounters', 'write');\n    AclExtended::updateAcl($clin_write, 'Clinicians', 'encounters', 'Encounters', 'notes', 'Notes - my encounters (write,addonly optional)', 'write');\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n\n/* This is a template for a new revision, when needed\n// Upgrade for acl_version 12\n$upgrade_acl = 12;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n*/\n\n//All done\nAclExtended::setAclVersion($acl_version);\necho \"DONE upgrading access controls\";\n", "<?php\n\n/**\n * Patient custom report.\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Ken Chapple <ken@mi-squared.com>\n * @author    Tony McCormick <tony@mi-squared.com>\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2018 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2017-2020 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nrequire_once(\"../../globals.php\");\nrequire_once(\"$srcdir/forms.inc\");\nrequire_once(\"$srcdir/pnotes.inc\");\nrequire_once(\"$srcdir/patient.inc\");\nrequire_once(\"$srcdir/options.inc.php\");\nrequire_once(\"$srcdir/lists.inc\");\nrequire_once(\"$srcdir/report.inc\");\nrequire_once(dirname(__file__) . \"/../../../custom/code_types.inc.php\");\nrequire_once $GLOBALS['srcdir'] . '/ESign/Api.php';\nrequire_once($GLOBALS[\"include_root\"] . \"/orders/single_order_results.inc.php\");\nrequire_once(\"$srcdir/appointments.inc.php\");\nrequire_once($GLOBALS['fileroot'] . \"/controllers/C_Document.class.php\");\n\nuse ESign\\Api;\nuse Mpdf\\Mpdf;\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Core\\Header;\nuse OpenEMR\\MedicalDevice\\MedicalDevice;\nuse OpenEMR\\Services\\FacilityService;\n\n$facilityService = new FacilityService();\n\n$staged_docs = array();\n$archive_name = '';\n\n// For those who care that this is the patient report.\n$GLOBALS['PATIENT_REPORT_ACTIVE'] = true;\n\n$PDF_OUTPUT = empty($_POST['pdf']) ? 0 : intval($_POST['pdf']);\n$PDF_FAX = empty($_POST['fax']) ? 0 : intval($_POST['fax']);\nif ($PDF_FAX) {\n    $PDF_OUTPUT = 1;\n}\n\nif ($PDF_OUTPUT) {\n    $config_mpdf = array(\n        'tempDir' => $GLOBALS['MPDF_WRITE_DIR'],\n        'mode' => $GLOBALS['pdf_language'],\n        'format' => $GLOBALS['pdf_size'],\n        'default_font_size' => '9',\n        'default_font' => 'dejavusans',\n        'margin_left' => $GLOBALS['pdf_left_margin'],\n        'margin_right' => $GLOBALS['pdf_right_margin'],\n        'margin_top' => $GLOBALS['pdf_top_margin'],\n        'margin_bottom' => $GLOBALS['pdf_bottom_margin'],\n        'margin_header' => '',\n        'margin_footer' => '',\n        'orientation' => $GLOBALS['pdf_layout'],\n        'shrink_tables_to_fit' => 1,\n        'use_kwt' => true,\n        'autoScriptToLang' => true,\n        'keep_table_proportions' => true\n    );\n    $pdf = new mPDF($config_mpdf);\n    if ($_SESSION['language_direction'] == 'rtl') {\n        $pdf->SetDirectionality('rtl');\n    }\n    ob_start();\n} // end pdf conditional.\n\n// get various authorization levels\n$auth_notes_a = AclMain::aclCheckCore('encounters', 'notes_a');\n$auth_notes = AclMain::aclCheckCore('encounters', 'notes');\n$auth_coding_a = AclMain::aclCheckCore('encounters', 'coding_a');\n$auth_coding = AclMain::aclCheckCore('encounters', 'coding');\n$auth_relaxed = AclMain::aclCheckCore('encounters', 'relaxed');\n$auth_med = AclMain::aclCheckCore('patients', 'med');\n$auth_demo = AclMain::aclCheckCore('patients', 'demo');\n\n$esignApi = new Api();\n\n$printable = empty($_GET['printable']) ? false : true;\nif ($PDF_OUTPUT) {\n    $printable = true;\n}\n\nunset($_GET['printable']);\n\n// Number of columns in tables for insurance and encounter forms.\n$N = $PDF_OUTPUT ? 4 : 6;\n\n$first_issue = 1;\n\nfunction getContent()\n{\n    global $web_root, $webserver_root;\n    $content = ob_get_clean();\n    // Fix a nasty mPDF bug - it ignores document root!\n    $i = 0;\n    $wrlen = strlen($web_root);\n    $wsrlen = strlen($webserver_root);\n    while (true) {\n        $i = stripos($content, \" src='/\", $i + 1);\n        if ($i === false) {\n            break;\n        }\n\n        if (\n            substr($content, $i + 6, $wrlen) === $web_root &&\n            substr($content, $i + 6, $wsrlen) !== $webserver_root\n        ) {\n            $content = substr($content, 0, $i + 6) . $webserver_root . substr($content, $i + 6 + $wrlen);\n        }\n    }\n\n    return $content;\n}\n\nfunction postToGet($arin)\n{\n    $getstring = \"\";\n    foreach ($arin as $key => $val) {\n        if (is_array($val)) {\n            foreach ($val as $k => $v) {\n                $getstring .= attr_url($key . \"[]\") . \"=\" . attr_url($v) . \"&\";\n            }\n        } else {\n            $getstring .= attr_url($key) . \"=\" . attr_url($val) . \"&\";\n        }\n    }\n\n    return $getstring;\n}\n\nfunction report_basename($pid)\n{\n    $ptd = getPatientData($pid, \"fname,lname\");\n    // escape names for pesky periods hyphen etc.\n    $esc = $ptd['fname'] . '_' . $ptd['lname'];\n    $esc = str_replace(array('.', ',', ' '), '', $esc);\n    $fn = basename_international(strtolower($esc . '_' . $pid . '_' . xl('report')));\n\n    return array('base' => $fn, 'fname' => $ptd['fname'], 'lname' => $ptd['lname']);\n}\n\nfunction zip_content($source, $destination, $content = '', $create = true)\n{\n    if (!extension_loaded('zip')) {\n        return false;\n    }\n\n    $zip = new ZipArchive();\n    if ($create) {\n        if (!$zip->open($destination, ZipArchive::CREATE)) {\n            return false;\n        }\n    } else {\n        if (!$zip->open($destination, ZipArchive::OVERWRITE)) {\n            return false;\n        }\n    }\n\n    if (is_file($source) === true) {\n        $zip->addFromString(basename($source), file_get_contents($source));\n    } elseif (!empty($content)) {\n        $zip->addFromString(basename($source), $content);\n    }\n\n    return $zip->close();\n}\n\n?>\n\n<?php if ($PDF_OUTPUT) { ?>\n    <?php Header::setupAssets(['pdf-style', 'esign-theme-only']); ?>\n<?php } else { ?>\n<html>\n<head>\n    <?php Header::setupHeader(['esign-theme-only', 'search-highlight']); ?>\n    <?php } ?>\n\n    <?php // do not show stuff from report.php in forms that is encaspulated\n    // by div of navigateLink class. Specifically used for CAMOS, but\n    // can also be used by other forms that require output in the\n    // encounter listings output, but not in the custom report. ?>\n\n    <style>\n      div.navigateLink {\n        display: none;\n      }\n\n      .hilite2 {\n        background-color: transparent;\n      }\n\n      .hilite, mark, .next {\n        background-color: var(--yellow);\n      }\n\n      img {\n        max-width: 700px;\n      }\n    </style>\n\n    <?php if (!$PDF_OUTPUT) { ?>\n        <?php // if the track_anything form exists, then include the styling\n        if (file_exists(__DIR__ . \"/../../forms/track_anything/style.css\")) { ?>\n            <?php Header::setupAssets('track-anything'); ?>\n        <?php } ?>\n\n</head>\n<?php } ?>\n\n<body>\n    <div class=\"container\">\n        <div id=\"report_custom w-100\">  <!-- large outer DIV -->\n            <?php\n            if (sizeof($_GET) > 0) {\n                $ar = $_GET;\n            } else {\n                $ar = $_POST;\n            }\n\n            if ($printable) {\n                /*******************************************************************\n                 * $titleres = getPatientData($pid, \"fname,lname,providerID\");\n                 * $sql = \"SELECT * FROM facility ORDER BY billing_location DESC LIMIT 1\";\n                 *******************************************************************/\n                $titleres = getPatientData($pid, \"fname,lname,providerID,DATE_FORMAT(DOB,'%m/%d/%Y') as DOB_TS\");\n                $facility = null;\n                if ($_SESSION['pc_facility']) {\n                    $facility = $facilityService->getById($_SESSION['pc_facility']);\n                } else {\n                    $facility = $facilityService->getPrimaryBillingLocation();\n                }\n\n                /******************************************************************/\n                // Setup Headers and Footers for mPDF only Download\n                // in HTML view it's just one line at the top of page 1\n                echo '<page_header class=\"custom-tag text-right\"> ' . xlt(\"PATIENT\") . ':' . text($titleres['lname']) . ', ' . text($titleres['fname']) . ' - ' . text($titleres['DOB_TS']) . '</page_header>    ';\n                echo '<page_footer class=\"custom-tag text-right\">' . xlt('Generated on') . ' ' . text(oeFormatShortDate()) . ' - ' . text($facility['name']) . ' ' . text($facility['phone']) . '</page_footer>';\n\n                // Use logo if it exists as 'practice_logo.gif' in the site dir\n                // old code used the global custom dir which is no longer a valid\n                $practice_logo = \"\";\n                $plogo = glob(\"$OE_SITE_DIR/images/*\");// let's give the user a little say in image format.\n                $plogo = preg_grep('~practice_logo\\.(gif|png|jpg|jpeg)$~i', $plogo);\n                if (!empty($plogo)) {\n                    $k = current(array_keys($plogo));\n                    $practice_logo = $plogo[$k];\n                }\n\n                echo \"<div class='table-responsive'><table class='table'><tbody><tr><td>\";\n                if (file_exists($practice_logo)) {\n                    $logo_path = $GLOBALS['OE_SITE_WEBROOT'] . \"/images/\" . basename($practice_logo);\n                    echo \"<img class='h-auto' style='max-width:250px;' src='$logo_path'>\"; // keep size within reason\n                    echo \"</td><td>\";\n                }\n                ?>\n                <h5><?php echo text($facility['name']); ?></h5>\n                <?php echo text($facility['street']); ?><br />\n                <?php echo text($facility['city']); ?>, <?php echo text($facility['state']); ?><?php echo text($facility['postal_code']); ?><br clear='all'>\n                <?php echo text($facility['phone']); ?><br />\n\n                <a href=\"javascript:window.close();\"><span class='title'><?php echo xlt('Patient') . \": \" . text($titleres['fname']) . \" \" . text($titleres['lname']); ?></span></a><br />\n                <span class='text'><?php echo xlt('Generated on'); ?>: <?php echo text(oeFormatShortDate()); ?></span>\n                <?php echo \"</td></tr></tbody></table></div>\"; ?>\n\n            <?php } else { // not printable\n                ?>\n                <div class=\"border-bottom fixed-top px-5 pt-4 report_search_bar\">\n                    <div class=\"row\">\n                        <div class=\"col-md\">\n                            <input type=\"text\" class=\"form-control\" onkeyup=\"clear_last_visit();remove_mark_all();find_all();\" name=\"search_element\" id=\"search_element\" />\n                        </div>\n                        <div class=\"col-md\">\n                            <div class=\"btn-group\">\n                                <button type=\"button\" class=\"btn btn-primary btn-search\" onClick=\"clear_last_visit();remove_mark_all();find_all();\"><?php echo xlt('Find'); ?></button>\n                                <button type=\"button\" class=\"btn btn-primary\" onClick=\"next_prev('prev');\"><?php echo xlt('Prev'); ?></button>\n                                <button type=\"button\" class=\"btn btn-primary\" onClick=\"next_prev('next');\"><?php echo xlt('Next'); ?></button>\n                            </div>\n                        </div>\n                        <div class=\"col-md\">\n                            <span><?php echo xlt('Match case'); ?></span>\n                            <input type=\"checkbox\" onClick=\"clear_last_visit();remove_mark_all();find_all();\" name=\"search_case\" id=\"search_case\" />\n                        </div>\n                        <div class=\"col-md mb-2\">\n                            <span class=\"text font-weight-bold\"><?php echo xlt('Search In'); ?>:</span>\n                            <br />\n                            <?php\n                            $form_id_arr = array();\n                            $form_dir_arr = array();\n                            $last_key = '';\n                            //ksort($ar);\n                            foreach ($ar as $key_search => $val_search) {\n                                if ($key_search == 'pdf' || $key_search == '') {\n                                    continue;\n                                }\n\n                                if (($auth_notes_a || $auth_notes || $auth_coding_a || $auth_coding || $auth_med || $auth_relaxed)) {\n                                    preg_match('/^(.*)_(\\d+)$/', $key_search, $res_search);\n                                    $form_id_arr[] = add_escape_custom($res_search[2] ?? '');\n                                    $form_dir_arr[] = add_escape_custom($res_search[1] ?? '');\n                                }\n                            }\n\n                            //echo json_encode(json_encode($array_key_id));\n                            if (sizeof($form_id_arr) > 0) {\n                                $query = \"SELECT DISTINCT(form_name),formdir FROM forms WHERE form_id IN ( '\" . implode(\"','\", $form_id_arr) . \"') AND formdir IN ( '\" . implode(\"','\", $form_dir_arr) . \"')\";\n                                $arr = sqlStatement($query);\n                                echo \"<select multiple size='4' class='form-control' id='forms_to_search' onchange='clear_last_visit();remove_mark_all();find_all();' >\";\n                                while ($res_forms_ids = sqlFetchArray($arr)) {\n                                    echo \"<option value='\" . attr($res_forms_ids['formdir']) . \"' selected>\" . text($res_forms_ids['form_name']) . \"</option>\";\n                                }\n                                echo \"</select>\";\n                            }\n                            ?>\n                        </div>\n                        <div class=\"col-md\">\n                            <span id='alert_msg' class='text-danger'></span>\n                        </div>\n                    </div>\n                </div>\n                <div id=\"backLink\">\n                    <a href=\"patient_report.php\" onclick='top.restoreSession()'>\n                        <span class='title'><?php echo xlt('Patient Report'); ?></span>\n                        <span class='back'><?php echo text($tback); ?></span>\n                    </a>\n                </div>\n                <br />\n                <br />\n                <a href=\"custom_report.php?printable=1&<?php print postToGet($ar); ?>\" class='link_submit' target='new' onclick='top.restoreSession()'>\n                    [<?php echo xlt('Printable Version'); ?>]\n                </a>\n            <?php } // end not printable ?>\n\n            <?php\n\n            // include ALL form's report.php files\n            $inclookupres = sqlStatement(\"select distinct formdir from forms where pid = ? AND deleted=0\", array($pid));\n            while ($result = sqlFetchArray($inclookupres)) {\n                // include_once(\"{$GLOBALS['incdir']}/forms/\" . $result[\"formdir\"] . \"/report.php\");\n                $formdir = $result['formdir'];\n                if (substr($formdir, 0, 3) == 'LBF') {\n                    include_once($GLOBALS['incdir'] . \"/forms/LBF/report.php\");\n                } else {\n                    include_once($GLOBALS['incdir'] . \"/forms/$formdir/report.php\");\n                }\n            }\n\n            if ($PDF_OUTPUT) {\n                $tmp_files_remove = array();\n            }\n\n            // For each form field from patient_report.php...\n            //\n            foreach ($ar as $key => $val) {\n                if ($key == 'pdf') {\n                    continue;\n                }\n\n                // These are the top checkboxes (demographics, allergies, etc.).\n                //\n                if (stristr($key, \"include_\")) {\n                    if ($val == \"recurring_days\") {\n                        /// label/header for recurring days\n                        echo \"<hr />\";\n                        echo \"<div class='text' id='appointments'>\\n\";\n                        print \"<h4>\" . xlt('Recurrent Appointments') . \":</h4>\";\n\n                        //fetch the data of the recurring days\n                        $recurrences = fetchRecurrences($pid);\n\n                        //print the recurring days to screen\n                        if (empty($recurrences)) { //if there are no recurrent appointments:\n                            echo \"<div class='text' >\";\n                            echo \"<span>\" . xlt('None{{Appointment}}') . \"</span>\";\n                            echo \"</div>\";\n                            echo \"<br />\";\n                        } else {\n                            foreach ($recurrences as $row) {\n                                //checks if there are recurrences and if they are current (git didn't end yet)\n                                if (!recurrence_is_current($row['pc_endDate'])) {\n                                    continue;\n                                }\n\n                                echo \"<div class='text' >\";\n                                echo \"<span>\" . xlt('Appointment Category') . ': ' . xlt($row['pc_catname']) . \"</span>\";\n                                echo \"<br />\";\n                                echo \"<span>\" . xlt('Recurrence') . ': ' . text($row['pc_recurrspec']) . \"</span>\";\n                                echo \"<br />\";\n\n                                if (ends_in_a_week($row['pc_endDate'])) {\n                                    echo \"<span class='text-danger'>\" . xlt('End Date') . ': ' . text($row['pc_endDate']) . \"</span>\";\n                                } else {\n                                    echo \"<span>\" . xlt('End Date') . ': ' . text($row['pc_endDate']) . \"</span>\";\n                                }\n\n                                echo \"</div>\";\n                                echo \"<br />\";\n                            }\n                        }\n\n                        echo \"</div><br />\";\n                    } elseif ($val == \"demographics\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text demographics' id='DEM'>\\n\";\n                        print \"<h4>\" . xlt('Patient Data') . \":</h4>\";\n                        // printRecDataOne($patient_data_array, getRecPatientData ($pid), $N);\n                        $result1 = getPatientData($pid);\n                        $result2 = getEmployerData($pid);\n                        echo \"   <div class='table-responsive'><table class='table'>\\n\";\n                        display_layout_rows('DEM', $result1, $result2);\n                        echo \"   </table></div>\\n\";\n                        echo \"</div>\\n\";\n                    } elseif ($val == \"history\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text history' id='HIS'>\\n\";\n                        if (AclMain::aclCheckCore('patients', 'med')) {\n                            print \"<h4>\" . xlt('History Data') . \":</h4>\";\n                            // printRecDataOne($history_data_array, getRecHistoryData ($pid), $N);\n                            $result1 = getHistoryData($pid);\n                            echo \"   <table>\\n\";\n                            display_layout_rows('HIS', $result1);\n                            echo \"   </table>\\n\";\n                        }\n\n                        echo \"</div>\";\n\n                        // } elseif ($val == \"employer\") {\n                        //   print \"<br /><span class='bold'>\".xl('Employer Data').\":</span><br />\";\n                        //   printRecDataOne($employer_data_array, getRecEmployerData ($pid), $N);\n                    } elseif ($val == \"insurance\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text insurance'>\";\n                        echo \"<h4>\" . xlt('Insurance Data') . \":</h4>\";\n                        print \"<br /><span class='font-weight-bold'>\" . xlt('Primary Insurance Data') . \":</span><br />\";\n                        printRecDataOne($insurance_data_array, getRecInsuranceData($pid, \"primary\"), $N);\n                        print \"<span class='font-weight-bold'>\" . xlt('Secondary Insurance Data') . \":</span><br />\";\n                        printRecDataOne($insurance_data_array, getRecInsuranceData($pid, \"secondary\"), $N);\n                        print \"<span class='font-weight-bold'>\" . xlt('Tertiary Insurance Data') . \":</span><br />\";\n                        printRecDataOne($insurance_data_array, getRecInsuranceData($pid, \"tertiary\"), $N);\n                        echo \"</div>\";\n                    } elseif ($val == \"billing\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text billing'>\";\n                        print \"<h4>\" . xlt('Billing Information') . \":</h4>\";\n                        if (!empty($ar['newpatient']) && count($ar['newpatient']) > 0) {\n                            $billings = array();\n                            echo \"<div class='table-responsive'><table class='table'>\";\n                            echo \"<tr><td class='font-weight-bold'>\" . xlt('Code') . \"</td><td class='font-weight-bold'>\" . xlt('Fee') . \"</td></tr>\\n\";\n                            $total = 0.00;\n                            $copays = 0.00;\n                            foreach ($ar['newpatient'] as $be) {\n                                $ta = explode(\":\", $be);\n                                $billing = getPatientBillingEncounter($pid, $ta[1]);\n                                $billings[] = $billing;\n                                foreach ($billing as $b) {\n                                    echo \"<tr>\\n\";\n                                    echo \"<td class='text'>\";\n                                    echo text($b['code_type']) . \":\\t\" . text($b['code']) . \"&nbsp;\" . text($b['modifier']) . \"&nbsp;&nbsp;&nbsp;\" . text($b['code_text']) . \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\";\n                                    echo \"</td>\\n\";\n                                    echo \"<td class='text'>\";\n                                    echo text(oeFormatMoney($b['fee']));\n                                    echo \"</td>\\n\";\n                                    echo \"</tr>\\n\";\n                                    $total += $b['fee'];\n                                    if ($b['code_type'] == \"COPAY\") {\n                                        $copays += $b['fee'];\n                                    }\n                                }\n                            }\n\n                            echo \"<tr><td>&nbsp;</td></tr>\";\n                            echo \"<tr><td class='font-weight-bold'>\" . xlt('Sub-Total') . \"</td><td class='text'>\" . text(oeFormatMoney($total + abs($copays))) . \"</td></tr>\";\n                            echo \"<tr><td class='font-weight-bold'>\" . xlt('Paid') . \"</td><td class='text'>\" . text(oeFormatMoney(abs($copays))) . \"</td></tr>\";\n                            echo \"<tr><td class='font-weight-bold'>\" . xlt('Total') . \"</td><td class='text'>\" . text(oeFormatMoney($total)) . \"</td></tr>\";\n                            echo \"</table></div>\";\n                            echo \"<pre>\";\n                            //print_r($billings);\n                            echo \"</pre>\";\n                        } else {\n                            printPatientBilling($pid);\n                        }\n\n                        echo \"</div>\\n\"; // end of billing DIV\n                    } elseif ($val == \"immunizations\") {\n                        if (AclMain::aclCheckCore('patients', 'med')) {\n                            echo \"<hr />\";\n                            echo \"<div class='text immunizations'>\\n\";\n                            print \"<h4>\" . xlt('Patient Immunization') . \":</h4>\";\n                            $sql = \"select i1.immunization_id, i1.administered_date, substring(i1.note,1,20) as immunization_note, c.code_text_short \" .\n                                \" from immunizations i1 \" .\n                                \" left join code_types ct on ct.ct_key = 'CVX' \" .\n                                \" left join codes c on c.code_type = ct.ct_id AND i1.cvx_code = c.code \" .\n                                \" where i1.patient_id = ? and i1.added_erroneously = 0 \" .\n                                \" order by administered_date desc\";\n                            $result = sqlStatement($sql, array($pid));\n                            while ($row = sqlFetchArray($result)) {\n                                // Figure out which name to use (ie. from cvx list or from the custom list)\n                                if ($GLOBALS['use_custom_immun_list']) {\n                                    $vaccine_display = generate_display_field(array('data_type' => '1', 'list_id' => 'immunizations'), $row['immunization_id']);\n                                } else {\n                                    if (!empty($row['code_text_short'])) {\n                                        $vaccine_display = xlt($row['code_text_short']);\n                                    } else {\n                                        $vaccine_display = generate_display_field(array('data_type' => '1', 'list_id' => 'immunizations'), $row['immunization_id']);\n                                    }\n                                }\n\n                                echo text($row['administered_date']) . \" - \" . $vaccine_display;\n                                if ($row['immunization_note']) {\n                                    echo \" - \" . text($row['immunization_note']);\n                                }\n\n                                echo \"<br />\\n\";\n                            }\n\n                            echo \"</div>\\n\";\n                        }\n\n                        // communication report\n                    } elseif ($val == \"batchcom\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text transactions'>\\n\";\n                        print \"<h4>\" . xlt('Patient Communication sent') . \":</h4>\";\n                        $sql = \"SELECT concat( 'Messsage Type: ', batchcom.msg_type, ', Message Subject: ', batchcom.msg_subject, ', Sent on:', batchcom.msg_date_sent ) AS batchcom_data, batchcom.msg_text, concat( users.fname, users.lname ) AS user_name FROM `batchcom` JOIN `users` ON users.id = batchcom.sent_by WHERE batchcom.patient_id=?\";\n                        // echo $sql;\n                        $result = sqlStatement($sql, array($pid));\n                        while ($row = sqlFetchArray($result)) {\n                            echo text($row['batchcom_data']) . \", By: \" . text($row['user_name']) . \"<br />Text:<br /> \" . text($row['msg_txt']) . \"<br />\\n\";\n                        }\n\n                        echo \"</div>\\n\";\n                    } elseif ($val == \"notes\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text notes'>\\n\";\n                        print \"<h4>\" . xlt('Patient Notes') . \":</h4>\";\n                        printPatientNotes($pid);\n                        echo \"</div>\";\n                    } elseif ($val == \"transactions\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text transactions'>\\n\";\n                        print \"<h4>\" . xlt('Patient Transactions') . \":</h4>\";\n                        printPatientTransactions($pid);\n                        echo \"</div>\";\n                    }\n                } else {\n                    // Documents is an array of checkboxes whose values are document IDs.\n                    //\n                    if ($key == \"documents\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text documents'>\";\n                        foreach ($val as $valkey => $valvalue) {\n                            $document_id = $valvalue;\n                            if (!is_numeric($document_id)) {\n                                continue;\n                            }\n\n                            $d = new Document($document_id);\n                            $fname = basename($d->get_name());\n                            //  Extract the extension by the mime/type and not the file name extension\n                            // -There is an exception. Need to manually see if it a pdf since\n                            //  the image_type_to_extension() is not working to identify pdf.\n                            $extension = strtolower(substr($fname, strrpos($fname, \".\")));\n                            if ($extension != '.pdf') { // Will print pdf header within pdf import\n                                echo \"<h5>\" . xlt('Document') . \" '\" . text($fname) . \"-\" . text($d->get_id()) . \"'</h5>\";\n                            }\n\n                            $notes = $d->get_notes();\n                            if (!empty($notes)) {\n                                echo \"<div class='table-responsive'><table class='table'>\";\n                            }\n\n                            foreach ($notes as $note) {\n                                echo '<tr>';\n                                echo '<td>' . xlt('Note') . ' #' . text($note->get_id()) . '</td>';\n                                echo '</tr>';\n                                echo '<tr>';\n                                echo '<td>' . xlt('Date') . ': ' . text(oeFormatShortDate($note->get_date())) . '</td>';\n                                echo '</tr>';\n                                echo '<tr>';\n                                echo '<td>' . text($note->get_note()) . '<br /><br /></td>';\n                                echo '</tr>';\n                            }\n\n                            if (!empty($notes)) {\n                                echo \"</table></div>\";\n                            }\n\n                            // adding support for .txt MDM-TXA interface/orders/receive_hl7_results.inc.php\n                            if ($extension != (\".pdf\" || \".txt\")) {\n                                $tempCDoc = new C_Document();\n                                $tempFile = $tempCDoc->retrieve_action($d->get_foreign_id(), $document_id, false, true, true, true);\n                                // tmp file in temporary_files_dir\n                                $tempFileName = tempnam($GLOBALS['temporary_files_dir'], \"oer\");\n                                file_put_contents($tempFileName, $tempFile);\n                                $image_data = getimagesize($tempFileName);\n                                $extension = image_type_to_extension($image_data[2]);\n                                unlink($tempFileName);\n                            }\n\n                            if ($extension == \".png\" || $extension == \".jpg\" || $extension == \".jpeg\" || $extension == \".gif\") {\n                                if ($PDF_OUTPUT) {\n                                    // OK to link to the image file because it will be accessed by the\n                                    // mPDF parser and not the browser.\n                                    $tempDocC = new C_Document();\n                                    $fileTemp = $tempDocC->retrieve_action($d->get_foreign_id(), $document_id, false, true, true, true);\n                                    // tmp file in ../documents/temp since need to be available via webroot\n                                    $from_file_tmp_web_name = tempnam($GLOBALS['OE_SITE_DIR'] . '/documents/temp', \"oer\");\n                                    file_put_contents($from_file_tmp_web_name, $fileTemp);\n                                    echo \"<img src='$from_file_tmp_web_name'\";\n                                    // Flag images with excessive width for possible stylesheet action.\n                                    $asize = getimagesize($from_file_tmp_web_name);\n                                    if ($asize[0] > 750) {\n                                        echo \" class='bigimage'\";\n                                    }\n                                    $tmp_files_remove[] = $from_file_tmp_web_name;\n                                    echo \" /><br /><br />\";\n                                } else {\n                                    echo \"<img src='\" . $GLOBALS['webroot'] .\n                                        \"/controller.php?document&retrieve&patient_id=&document_id=\" .\n                                        attr_url($document_id) . \"&as_file=false&original_file=true&disable_exit=false&show_original=true'><br /><br />\";\n                                }\n                            } else {\n                                // Most clinic documents are expected to be PDFs, and in that happy case\n                                // we can avoid the lengthy image conversion process.\n                                if ($PDF_OUTPUT && $extension == \".pdf\") {\n                                    echo \"</div></div>\\n\"; // HTML to PDF conversion will fail if there are open tags.\n                                    $content = getContent();\n                                    $pdf->writeHTML($content); // catch up with buffer.\n                                    $err = '';\n                                    try {\n                                        // below header isn't being used. missed maybe!\n                                        $pg_header = \"<span>\" . xlt('Document') . \" \" . text($fname) . \"-\" . text($d->get_id()) . \"</span>\";\n                                        $tempDocC = new C_Document();\n                                        $pdfTemp = $tempDocC->retrieve_action($d->get_foreign_id(), $document_id, false, true, true, true);\n                                        // tmp file in temporary_files_dir\n                                        $from_file_tmp_name = tempnam($GLOBALS['temporary_files_dir'], \"oer\");\n                                        file_put_contents($from_file_tmp_name, $pdfTemp);\n\n                                        $pagecount = $pdf->setSourceFile($from_file_tmp_name);\n                                        for ($i = 0; $i < $pagecount; ++$i) {\n                                            $pdf->AddPage();\n                                            $itpl = $pdf->importPage($i + 1);\n                                            $pdf->useTemplate($itpl);\n                                        }\n                                    } catch (Exception $e) {\n                                        // chances are PDF is > v1.4 and compression level not supported.\n                                        // regardless, we're here so lets dispose in different way.\n                                        //\n                                        unlink($from_file_tmp_name);\n                                        $archive_name = ($GLOBALS['temporary_files_dir'] . '/' . report_basename($pid)['base'] . \".zip\");\n                                        $rtn = zip_content(basename($d->url), $archive_name, $pdfTemp);\n                                        $err = \"<span>\" . xlt('PDF Document Parse Error and not included. Check if included in archive.') . \" : \" . text($fname) . \"</span>\";\n                                        $pdf->writeHTML($err);\n                                        $staged_docs[] = array('path' => $d->url, 'fname' => $fname);\n                                    } finally {\n                                        unlink($from_file_tmp_name);\n                                        // Make sure whatever follows is on a new page. Maybe!\n                                        // okay if not a series of pdfs so if so need @todo\n                                        if (empty($err)) {\n                                            $pdf->AddPage();\n                                        }\n                                        // Resume output buffering and the above-closed tags.\n                                        ob_start();\n                                        echo \"<div><div class='text documents'>\\n\";\n                                    }\n                                } elseif ($extension == \".txt\") {\n                                    echo \"<pre>\";\n                                    $tempDocC = new C_Document();\n                                    $textTemp = $tempDocC->retrieve_action($d->get_foreign_id(), $document_id, false, true, true, true);\n                                    echo text($textTemp);\n                                    echo \"</pre>\";\n                                } else {\n                                    if ($PDF_OUTPUT) {\n                                        // OK to link to the image file because it will be accessed by the mPDF parser and not the browser.\n                                        $tempDocC = new C_Document();\n                                        $fileTemp = $tempDocC->retrieve_action($d->get_foreign_id(), $document_id, false, false, true, true);\n                                        // tmp file in ../documents/temp since need to be available via webroot\n                                        $from_file_tmp_web_name = tempnam($GLOBALS['OE_SITE_DIR'] . '/documents/temp', \"oer\");\n                                        file_put_contents($from_file_tmp_web_name, $fileTemp);\n                                        echo \"<img src='$from_file_tmp_web_name'><br /><br />\";\n                                        $tmp_files_remove[] = $from_file_tmp_web_name;\n                                    } else {\n                                        if ($extension === '.pdf' || $extension === '.zip') {\n                                            echo \"<strong>\" . xlt('Available Document') . \":</strong><em> \" . text($fname) . \"</em><br />\";\n                                        } else {\n                                            echo \"<img src='\" . $GLOBALS['webroot'] . \"/controller.php?document&retrieve&patient_id=&document_id=\" . attr_url($document_id) . \"&as_file=false&original_file=false'><br /><br />\";\n                                        }\n                                    }\n                                }\n                            } // end if-else\n                        } // end Documents loop\n                        echo \"</div>\";\n                    } elseif ($key == \"procedures\") { // Procedures is an array of checkboxes whose values are procedure order IDs.\n                        if ($auth_med) {\n                            echo \"<hr />\";\n                            echo \"<div class='text documents'>\";\n                            foreach ($val as $valkey => $poid) {\n                                if (empty($GLOBALS['esign_report_show_only_signed'])) {\n                                    echo '<h4>' . xlt('Procedure Order') . ':</h4>';\n                                    echo \"<br />\\n\";\n                                    generate_order_report($poid, false, !$PDF_OUTPUT);\n                                    echo \"<br />\\n\";\n                                }\n                            }\n                            echo \"</div>\";\n                        }\n                    } elseif (strpos($key, \"issue_\") === 0) {\n                        // display patient Issues\n                        if ($first_issue) {\n                            $prevIssueType = 'asdf1234!@#$'; // random junk so as to not match anything\n                            $first_issue = 0;\n                            echo \"<hr />\";\n                            echo \"<h4>\" . xlt(\"Issues\") . \"</h4>\";\n                        }\n\n                        preg_match('/^(.*)_(\\d+)$/', $key, $res);\n                        $rowid = $res[2];\n                        $irow = sqlQuery(\"SELECT type, title, comments, diagnosis, udi_data \" .\n                            \"FROM lists WHERE id = ?\", array($rowid));\n                        $diagnosis = $irow['diagnosis'];\n                        if ($prevIssueType != $irow['type']) {\n                            // output a header for each Issue Type we encounter\n                            $disptype = $ISSUE_TYPES[$irow['type']][0];\n                            echo \"<div class='issue_type'>\" . text($disptype) . \":</div>\\n\";\n                            $prevIssueType = $irow['type'];\n                        }\n\n                        echo \"<div class='text issue'>\";\n                        if ($prevIssueType == \"medical_device\") {\n                            echo \"<span class='issue_title'><span class='font-weight-bold'>\" . xlt('Title') . \": </span>\" . text($irow['title']) . \"</span><br>\";\n                            echo \"<span class='issue_title'>\" . (new MedicalDevice($irow['udi_data']))->fullOutputHtml() . \"</span>\";\n                            echo \"<span class='issue_comments'> \" . text($irow['comments']) . \"</span><br><br>\\n\";\n                        } else {\n                            echo \"<span class='issue_title'>\" . text($irow['title']) . \":</span>\";\n                            echo \"<span class='issue_comments'> \" . text($irow['comments']) . \"</span>\\n\";\n                        }\n\n                        // Show issue's chief diagnosis and its description:\n                        if ($diagnosis) {\n                            echo \"<div class='text issue_diag'>\";\n                            echo \"<span class='font-weight-bold'>[\" . xlt('Diagnosis') . \"]</span><br />\";\n                            $dcodes = explode(\";\", $diagnosis);\n                            foreach ($dcodes as $dcode) {\n                                echo \"<span class='italic'>\" . text($dcode) . \"</span>: \";\n                                echo text(lookup_code_descriptions($dcode)) . \"<br />\\n\";\n                            }\n\n                            //echo $diagnosis.\" -- \".lookup_code_descriptions($diagnosis).\"\\n\";\n                            echo \"</div>\";\n                        }\n\n                        // Supplemental data for GCAC or Contraception issues.\n                        if ($irow['type'] == 'ippf_gcac') {\n                            echo \"   <div class='table-responsive'><table class='table'>\\n\";\n                            display_layout_rows('GCA', sqlQuery(\"SELECT * FROM lists_ippf_gcac WHERE id = ?\", array($rowid)));\n                            echo \"   </table></div>\\n\";\n                        } elseif ($irow['type'] == 'contraceptive') {\n                            echo \"   <div class='table-responsive'><table class='table'>\\n\";\n                            display_layout_rows('CON', sqlQuery(\"SELECT * FROM lists_ippf_con WHERE id = ?\", array($rowid)));\n                            echo \"   </table></div>\\n\";\n                        }\n\n                        echo \"</div>\\n\"; //end the issue DIV\n                    } else {\n                        // we have an \"encounter form\" form field whose name is like\n                        // dirname_formid, with a value which is the encounter ID.\n                        //\n                        // display encounter forms, encoded as a POST variable\n                        // in the format: <formdirname_formid>=<encounterID>\n\n                        if (($auth_notes_a || $auth_notes || $auth_coding_a || $auth_coding || $auth_med || $auth_relaxed)) {\n                            $form_encounter = $val;\n                            preg_match('/^(.*)_(\\d+)$/', $key, $res);\n                            $form_id = $res[2];\n                            $formres = getFormNameByFormdirAndFormid($res[1], $form_id);\n                            $dateres = getEncounterDateByEncounter($form_encounter);\n                            $formId = getFormIdByFormdirAndFormid($res[1], $form_id);\n\n                            if ($res[1] == 'newpatient') {\n                                echo \"<div class='text encounter'>\\n\";\n                                echo \"<h4>\" . xlt($formres[\"form_name\"]) . \"</h4>\";\n                            } else {\n                                echo \"<div class='text encounter_form'>\";\n                                echo \"<h4>\" . text(xl_form_title($formres[\"form_name\"])) . \"</h4>\";\n                            }\n\n                            // show the encounter's date\n                            echo \"(\" . text(oeFormatSDFT(strtotime($dateres[\"date\"]))) . \") \";\n                            if ($res[1] == 'newpatient') {\n                                // display the provider info\n                                echo ' ' . xlt('Provider') . ': ' . text(getProviderName(getProviderIdOfEncounter($form_encounter)));\n                            }\n\n                            echo \"<br />\\n\";\n\n                            // call the report function for the form\n                            ?>\n                            <div name=\"search_div\" id=\"search_div_<?php echo attr($form_id) ?>_<?php echo attr($res[1]) ?>\" class=\"report_search_div class_<?php echo attr($res[1]); ?>\">\n                                <?php\n                                $esign = $esignApi->createFormESign($formId, $res[1], $form_encounter);\n                                if ($esign->isSigned('report') && !empty($GLOBALS['esign_report_show_only_signed'])) {\n                                    if (substr($res[1], 0, 3) == 'LBF') {\n                                        call_user_func(\"lbf_report\", $pid, $form_encounter, $N, $form_id, $res[1]);\n                                    } else {\n                                        call_user_func($res[1] . \"_report\", $pid, $form_encounter, $N, $form_id);\n                                    }\n                                } elseif (empty($GLOBALS['esign_report_show_only_signed'])) {\n                                    if (substr($res[1], 0, 3) == 'LBF') {\n                                        call_user_func('lbf_report', $pid, $form_encounter, $N, $form_id, $res[1]);\n                                    } else {\n                                        call_user_func($res[1] . '_report', $pid, $form_encounter, $N, $form_id);\n                                    }\n                                } else {\n                                    echo \"<h6>\" . xlt(\"Not signed.\") . \"</h6>\";\n                                }\n                                if ($esign->isLogViewable(\"report\")) {\n                                    $esign->renderLog();\n                                }\n                                ?>\n\n                            </div>\n                            <?php\n\n                            if ($res[1] == 'newpatient') {\n                                // display billing info\n                                $bres = sqlStatement(\n                                    \"SELECT b.date, b.code, b.code_text, b.modifier \" .\n                                    \"FROM billing AS b, code_types AS ct WHERE \" .\n                                    \"b.pid = ? AND \" .\n                                    \"b.encounter = ? AND \" .\n                                    \"b.activity = 1 AND \" .\n                                    \"b.code_type = ct.ct_key AND \" .\n                                    \"ct.ct_diag = 0 \" .\n                                    \"ORDER BY b.date\",\n                                    array($pid, $form_encounter)\n                                );\n                                while ($brow = sqlFetchArray($bres)) {\n                                    echo \"<div class='font-weight-bold d-inline-block'>&nbsp;\" . xlt('Procedure') . \": </div><div class='text d-inline-block'>\" .\n                                        text($brow['code']) . \":\" . text($brow['modifier']) . \" \" . text($brow['code_text']) . \"</div><br />\\n\";\n                                }\n                            }\n\n                            print \"</div>\";\n                        } // end auth-check for encounter forms\n                    } // end if('issue_')... else...\n                } // end if('include_')... else...\n            } // end $ar loop\n\n            if ($printable && !$PDF_OUTPUT) {// Patched out of pdf 04/20/2017 sjpadgett\n                echo \"<br /><br />\" . xlt('Signature') . \": _______________________________<br />\";\n            }\n            ?>\n\n        </div> <!-- end of report_custom DIV -->\n    </div>\n\n    <?php\n    if ($PDF_OUTPUT) {\n        $content = getContent();\n        $ptd = report_basename($pid);\n        $fn = $ptd['base'] . \".pdf\";\n        $pdf->SetTitle(ucfirst($ptd['fname']) . ' ' . $ptd['lname'] . ' ' . xl('Id') . ':' . $pid . ' ' . xl('Report'));\n        $isit_utf8 = preg_match('//u', $content); // quick check for invalid encoding\n        if (!$isit_utf8) {\n            if (function_exists('iconv')) { // if we can lets save the report\n                $content = iconv(\"UTF-8\", \"UTF-8//IGNORE\", $content);\n            } else { // no sense going on.\n                $die_str = xlt(\"Failed UTF8 encoding check! Could not automatically fix.\");\n                die($die_str);\n            }\n        }\n\n        try {\n            $pdf->writeHTML($content); // convert html\n        } catch (MpdfException $exception) {\n            die(text($exception));\n        }\n\n        if ($PDF_OUTPUT == 1) {\n            try {\n                if ($PDF_FAX === 1) {\n                    $fax_pdf = $pdf->Output($fn, 'S');\n                    $tmp_file = $GLOBALS['temporary_files_dir'] . '/' . $fn; // is deleted in sendFax...\n                    file_put_contents($tmp_file, $fax_pdf);\n                    echo $tmp_file;\n                    exit();\n                } else {\n                    if (!empty($archive_name) && sizeof($staged_docs) > 0) {\n                        $rtn = zip_content(basename($fn), $archive_name, $pdf->Output($fn, 'S'));\n                        header('Content-Description: File Transfer');\n                        header('Content-Transfer-Encoding: binary');\n                        header('Expires: 0');\n                        header(\"Cache-control: private\");\n                        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                        header(\"Content-Type: application/zip; charset=utf-8\");\n                        header(\"Content-Length: \" . filesize($archive_name));\n                        header('Content-Disposition: attachment; filename=\"' . basename($archive_name) . '\"');\n\n                        ob_end_clean();\n                        @readfile($archive_name) or error_log(\"Archive temp file not found: \" . $archive_name);\n\n                        unlink($archive_name);\n                    } else {\n                        $pdf->Output($fn, $GLOBALS['pdf_output']); // D = Download, I = Inline\n                    }\n                }\n            } catch (MpdfException $exception) {\n                die(text($exception));\n            }\n        } else {\n            // This is the case of writing the PDF as a message to the CMS portal.\n            $ptdata = getPatientData($pid, 'cmsportal_login');\n            $contents = $pdf->Output('', true);\n            echo \"<html><head>\\n\";\n            Header::setupHeader();\n            echo \"</head><body>\\n\";\n            $result = cms_portal_call(array(\n                'action' => 'putmessage',\n                'user' => $ptdata['cmsportal_login'],\n                'title' => xl('Your Clinical Report'),\n                'message' => xl('Please see the attached PDF.'),\n                'filename' => 'report.pdf',\n                'mimetype' => 'application/pdf',\n                'contents' => base64_encode($contents)\n            ));\n            if ($result['errmsg']) {\n                die(text($result['errmsg']));\n            }\n\n            echo \"<p class='mt-3'>\" . xlt('Report has been sent to the patient.') . \"</p>\\n\";\n            echo \"</body></html>\\n\";\n        }\n        foreach ($tmp_files_remove as $tmp_file) {\n            // Remove the tmp files that were created\n            unlink($tmp_file);\n        }\n    } else {\n        ?>\n        <?php if (!$printable) { ?>\n        <script src=\"<?php echo $GLOBALS['web_root'] ?>/interface/patient_file/report/custom_report.js?v=<?php echo $v_js_includes; ?>\"></script>\n        <script>\n            const searchBarHeight = document.querySelectorAll('.report_search_bar')[0].clientHeight;\n            document.getElementById('backLink').style.marginTop = `${searchBarHeight}px`;\n        </script>\n    <?php } ?>\n    \n</body>\n</html>\n<?php } ?>\n", "<?php\n\n/**\n *\n * Installer class.\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Andrew Moore <amoore@cpan.org>\n * @author    Ranganath Pathak <pathak@scrs1.org>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2010 Andrew Moore <amoore@cpan.org>\n * @copyright Copyright (c) 2019 Ranganath Pathak <pathak@scrs1.org>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nuse OpenEMR\\Gacl\\GaclApi;\n\nclass Installer\n{\n    public function __construct($cgi_variables)\n    {\n        // Installation variables\n        // For a good explanation of these variables, see documentation in\n        //   the contrib/util/installScripts/InstallerAuto.php file.\n        $this->iuser                    = isset($cgi_variables['iuser']) ? ($cgi_variables['iuser']) : '';\n        $this->iuserpass                = isset($cgi_variables['iuserpass']) ? ($cgi_variables['iuserpass']) : '';\n        $this->iuname                   = isset($cgi_variables['iuname']) ? ($cgi_variables['iuname']) : '';\n        $this->iufname                  = isset($cgi_variables['iufname']) ? ($cgi_variables['iufname']) : '';\n        $this->igroup                   = isset($cgi_variables['igroup']) ? ($cgi_variables['igroup']) : '';\n        $this->i2faEnable               = isset($cgi_variables['i2faenable']) ? ($cgi_variables['i2faenable']) : '';\n        $this->i2faSecret               = isset($cgi_variables['i2fasecret']) ? ($cgi_variables['i2fasecret']) : '';\n        $this->server                   = isset($cgi_variables['server']) ? ($cgi_variables['server']) : ''; // mysql server (usually localhost)\n        $this->loginhost                = isset($cgi_variables['loginhost']) ? ($cgi_variables['loginhost']) : ''; // php/apache server (usually localhost)\n        $this->port                     = isset($cgi_variables['port']) ? ($cgi_variables['port']) : '';\n        $this->root                     = isset($cgi_variables['root']) ? ($cgi_variables['root']) : '';\n        $this->rootpass                 = isset($cgi_variables['rootpass']) ? ($cgi_variables['rootpass']) : '';\n        $this->login                    = isset($cgi_variables['login']) ? ($cgi_variables['login']) : '';\n        $this->pass                     = isset($cgi_variables['pass']) ? ($cgi_variables['pass']) : '';\n        $this->dbname                   = isset($cgi_variables['dbname']) ? ($cgi_variables['dbname']) : '';\n        $this->collate                  = isset($cgi_variables['collate']) ? ($cgi_variables['collate']) : '';\n        $this->site                     = isset($cgi_variables['site']) ? ($cgi_variables['site']) : '';\n        $this->source_site_id           = isset($cgi_variables['source_site_id']) ? ($cgi_variables['source_site_id']) : '';\n        $this->clone_database           = isset($cgi_variables['clone_database']) ? ($cgi_variables['clone_database']) : '';\n        $this->no_root_db_access        = isset($cgi_variables['no_root_db_access']) ? ($cgi_variables['no_root_db_access']) : ''; // no root access to database. user/privileges pre-configured\n        $this->development_translations = isset($cgi_variables['development_translations']) ? ($cgi_variables['development_translations']) : '';\n        $this->new_theme                = isset($cgi_variables['new_theme']) ? ($cgi_variables['new_theme']) : '';\n        // Make this true for IPPF.\n        $this->ippf_specific = false;\n\n        // Record name of sql access file\n        $GLOBALS['OE_SITES_BASE'] = dirname(__FILE__) . '/../../sites';\n        $GLOBALS['OE_SITE_DIR'] = $GLOBALS['OE_SITES_BASE'] . '/' . $this->site;\n        $this->conffile  =  $GLOBALS['OE_SITE_DIR'] . '/sqlconf.php';\n\n        // Record names of sql table files\n        $this->main_sql = dirname(__FILE__) . '/../../sql/database.sql';\n        $this->translation_sql = dirname(__FILE__) . '/../../contrib/util/language_translations/currentLanguage_utf8.sql';\n        $this->devel_translation_sql = \"http://translations.openemr.io/languageTranslations_utf8.sql\";\n        $this->ippf_sql = dirname(__FILE__) . \"/../../sql/ippf_layout.sql\";\n        $this->icd9 = dirname(__FILE__) . \"/../../sql/icd9.sql\";\n        $this->cvx = dirname(__FILE__) . \"/../../sql/cvx_codes.sql\";\n        $this->additional_users = dirname(__FILE__) . \"/../../sql/official_additional_users.sql\";\n\n        // Prepare the dumpfile list\n        $this->initialize_dumpfile_list();\n\n        // Entities to hold error and debug messages\n        $this->error_message = '';\n        $this->debug_message = '';\n\n        // Entity to hold sql connection\n        $this->dbh = false;\n    }\n\n    public function login_is_valid()\n    {\n        if (($this->login == '') || (! isset($this->login))) {\n            $this->error_message = \"login is invalid: '$this->login'\";\n            return false;\n        }\n\n        return true;\n    }\n\n    public function char_is_valid($input_text)\n    {\n        // to prevent php injection\n        trim($input_text);\n        if ($input_text == '') {\n            return false;\n        }\n\n        if (preg_match('@[\\\\\\\\;()<>/\\'\"]@', $input_text)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function databaseNameIsValid($name)\n    {\n        if (preg_match('/[^A-Za-z0-9_-]/', $name)) {\n            return false;\n        }\n        return true;\n    }\n\n    public function collateNameIsValid($name)\n    {\n        if (preg_match('/[^A-Za-z0-9_-]/', $name)) {\n            return false;\n        }\n        return true;\n    }\n\n    public function iuser_is_valid()\n    {\n        if (strpos($this->iuser, \" \")) {\n            $this->error_message = \"Initial user is invalid: '$this->iuser'\";\n            return false;\n        }\n\n        return true;\n    }\n\n    public function iuname_is_valid()\n    {\n        if ($this->iuname == \"\" || !isset($this->iuname)) {\n            $this->error_message = \"Initial user last name is invalid: '$this->iuname'\";\n            return false;\n        }\n\n        return true;\n    }\n\n    public function password_is_valid()\n    {\n        if ($this->pass == \"\" || !isset($this->pass)) {\n            $this->error_message = \"The password for the new database account is invalid: '$this->pass'\";\n            return false;\n        }\n\n        return true;\n    }\n\n    public function user_password_is_valid()\n    {\n        if ($this->iuserpass == \"\" || !isset($this->iuserpass)) {\n            $this->error_message = \"The password for the user is invalid: '$this->iuserpass'\";\n            return false;\n        }\n\n        return true;\n    }\n\n\n\n    public function root_database_connection()\n    {\n        $this->dbh = $this->connect_to_database($this->server, $this->root, $this->rootpass, $this->port);\n        if ($this->dbh) {\n            if (! $this->set_sql_strict()) {\n                $this->error_message = 'unable to set strict sql setting';\n                return false;\n            }\n\n            return true;\n        } else {\n            $this->error_message = 'unable to connect to database as root';\n            return false;\n        }\n    }\n\n    public function user_database_connection()\n    {\n        $this->dbh = $this->connect_to_database($this->server, $this->login, $this->pass, $this->port, $this->dbname);\n        if (! $this->dbh) {\n            $this->error_message = \"unable to connect to database as user: '$this->login'\";\n            return false;\n        }\n\n        if (! $this->set_sql_strict()) {\n            $this->error_message = 'unable to set strict sql setting';\n            return false;\n        }\n\n        if (! $this->set_collation()) {\n            $this->error_message = 'unable to set sql collation';\n            return false;\n        }\n\n        if (! mysqli_select_db($this->dbh, $this->dbname)) {\n            $this->error_message = \"unable to select database: '$this->dbname'\";\n            return false;\n        }\n\n        return true;\n    }\n\n    public function create_database()\n    {\n        $sql = \"create database \" . $this->escapeDatabaseName($this->dbname);\n        if (empty($this->collate) || ($this->collate == 'utf8_general_ci')) {\n            $this->collate = 'utf8mb4_general_ci';\n        }\n        $sql .= \" character set utf8mb4 collate \" . $this->escapeCollateName($this->collate);\n        $this->set_collation();\n\n        return $this->execute_sql($sql);\n    }\n\n    public function drop_database()\n    {\n        $sql = \"drop database if exists \" . $this->escapeDatabaseName($this->dbname);\n        return $this->execute_sql($sql);\n    }\n\n    public function create_database_user()\n    {\n        // First, check for database user in the mysql.user table (this works for all except mariadb 10.4+)\n        $checkUser = $this->execute_sql(\"SELECT user FROM mysql.user WHERE user = '\" . $this->escapeSql($this->login) . \"' AND host = '\" . $this->escapeSql($this->loginhost) . \"'\", false);\n        if ($checkUser === false) {\n            // Above caused error, so is MariaDB 10.4+, and need to do below query instead in the mysql.global_priv table\n            $checkUser = $this->execute_sql(\"SELECT user FROM mysql.global_priv WHERE user = '\" . $this->escapeSql($this->login) . \"' AND host = '\" . $this->escapeSql($this->loginhost) . \"'\");\n        }\n\n        if ($checkUser === false) {\n            // there was an error in the check database user query, so return false\n            return false;\n        } elseif ($checkUser->num_rows > 0) {\n            // the mysql user already exists, so do not need to create the user, but need to set the password\n            // Note need to try two different methods, first is for newer mysql versions and second is for older mysql versions (if the first method fails)\n            $returnSql = $this->execute_sql(\"ALTER USER '\" . $this->escapeSql($this->login) . \"'@'\" . $this->escapeSql($this->loginhost) . \"' IDENTIFIED BY '\" . $this->escapeSql($this->pass) . \"'\", false);\n            if ($returnSql === false) {\n                error_log(\"Using older mysql version method to set password for the mysql user\");\n                $returnSql = $this->execute_sql(\"SET PASSWORD FOR '\" . $this->escapeSql($this->login) . \"'@'\" . $this->escapeSql($this->loginhost) . \"' = PASSWORD('\" . $this->escapeSql($this->pass) . \"')\");\n            }\n            return $returnSql;\n        } else {\n            // the mysql user does not yet exist, so create the user\n            return $this->execute_sql(\"CREATE USER '\" . $this->escapeSql($this->login) . \"'@'\" . $this->escapeSql($this->loginhost) . \"' IDENTIFIED BY '\" . $this->escapeSql($this->pass) . \"'\");\n        }\n    }\n\n    public function grant_privileges()\n    {\n        return $this->execute_sql(\"GRANT ALL PRIVILEGES ON \" . $this->escapeDatabaseName($this->dbname) . \".* TO '\" . $this->escapeSql($this->login) . \"'@'\" . $this->escapeSql($this->loginhost) . \"'\");\n    }\n\n    public function disconnect()\n    {\n        return mysqli_close($this->dbh);\n    }\n\n  /**\n   * This method creates any dumpfiles necessary.\n   * This is actually only done if we're cloning an existing site\n   * and we need to dump their database into a file.\n   * @return bool indicating success\n   */\n    public function create_dumpfiles()\n    {\n        return $this->dumpSourceDatabase();\n    }\n\n    public function load_dumpfiles()\n    {\n        $sql_results = ''; // information string which is returned\n        foreach ($this->dumpfiles as $filename => $title) {\n            $sql_results_temp = '';\n            $sql_results_temp = $this->load_file($filename, $title);\n            if ($sql_results_temp == false) {\n                return false;\n            }\n\n            $sql_results .= $sql_results_temp;\n        }\n\n        return $sql_results;\n    }\n\n    public function load_file($filename, $title)\n    {\n        $sql_results = ''; // information string which is returned\n        $sql_results .= \"Creating $title tables...\\n\";\n        $fd = fopen($filename, 'r');\n        if ($fd == false) {\n            $this->error_message = \"ERROR.  Could not open dumpfile '$filename'.\\n\";\n            return false;\n        }\n\n        $query = \"\";\n        $line = \"\";\n\n        // Settings to drastically speed up installation with InnoDB\n        if (! $this->execute_sql(\"SET autocommit=0;\")) {\n            return false;\n        }\n\n        if (! $this->execute_sql(\"START TRANSACTION;\")) {\n            return false;\n        }\n\n        while (!feof($fd)) {\n            $line = fgets($fd, 1024);\n            $line = rtrim($line);\n            if (substr($line, 0, 2) == \"--\") { // Kill comments\n                    continue;\n            }\n\n            if (substr($line, 0, 1) == \"#\") { // Kill comments\n                    continue;\n            }\n\n            if ($line == \"\") {\n                    continue;\n            }\n\n            $query = $query . $line;          // Check for full query\n            $chr = substr($query, strlen($query) - 1, 1);\n            if ($chr == \";\") { // valid query, execute\n                    $query = rtrim($query, \";\");\n                if (! $this->execute_sql($query)) {\n                    return false;\n                }\n\n                    $query = \"\";\n            }\n        }\n\n        // Settings to drastically speed up installation with InnoDB\n        if (! $this->execute_sql(\"COMMIT;\")) {\n            return false;\n        }\n\n        if (! $this->execute_sql(\"SET autocommit=1;\")) {\n            return false;\n        }\n\n        $sql_results .= \"<span class='text-success'><b>OK</b></span>.<br>\\n\";\n        fclose($fd);\n        return $sql_results;\n    }\n\n    public function add_version_info()\n    {\n        include dirname(__FILE__) . \"/../../version.php\";\n        if ($this->execute_sql(\"UPDATE version SET v_major = '\" . $this->escapeSql($v_major) . \"', v_minor = '\" . $this->escapeSql($v_minor) . \"', v_patch = '\" . $this->escapeSql($v_patch) . \"', v_realpatch = '\" . $this->escapeSql($v_realpatch) . \"', v_tag = '\" . $this->escapeSql($v_tag) . \"', v_database = '\" . $this->escapeSql($v_database) . \"', v_acl = '\" . $this->escapeSql($v_acl) . \"'\") == false) {\n            $this->error_message = \"ERROR. Unable insert version information into database\\n\" .\n            \"<p>\" . mysqli_error($this->dbh) . \" (#\" . mysqli_errno($this->dbh) . \")\\n\";\n            return false;\n        }\n\n        return true;\n    }\n\n    public function add_initial_user()\n    {\n        if ($this->execute_sql(\"INSERT INTO `groups` (id, name, user) VALUES (1,'\" . $this->escapeSql($this->igroup) . \"','\" . $this->escapeSql($this->iuser) . \"')\") == false) {\n            $this->error_message = \"ERROR. Unable to add initial user group\\n\" .\n            \"<p>\" . mysqli_error($this->dbh) . \" (#\" . mysqli_errno($this->dbh) . \")\\n\";\n            return false;\n        }\n\n        if ($this->execute_sql(\"INSERT INTO users (id, username, password, authorized, lname, fname, facility_id, calendar, cal_ui) VALUES (1,'\" . $this->escapeSql($this->iuser) . \"','NoLongerUsed',1,'\" . $this->escapeSql($this->iuname) . \"','\" . $this->escapeSql($this->iufname) . \"',3,1,3)\") == false) {\n            $this->error_message = \"ERROR. Unable to add initial user\\n\" .\n            \"<p>\" . mysqli_error($this->dbh) . \" (#\" . mysqli_errno($this->dbh) . \")\\n\";\n            return false;\n        }\n\n        $hash = password_hash($this->iuserpass, PASSWORD_DEFAULT);\n        if (empty($hash)) {\n            // Something is seriously wrong\n            error_log('OpenEMR Error : OpenEMR is not working because unable to create a hash.');\n            die(\"OpenEMR Error : OpenEMR is not working because unable to create a hash.\");\n        }\n        if ($this->execute_sql(\"INSERT INTO users_secure (id, username, password, last_update_password) VALUES (1,'\" . $this->escapeSql($this->iuser) . \"','\" . $this->escapeSql($hash) . \"',NOW())\") == false) {\n            $this->error_message = \"ERROR. Unable to add initial user login credentials\\n\" .\n            \"<p>\" . mysqli_error($this->dbh) . \" (#\" . mysqli_errno($this->dbh) . \")\\n\";\n            return false;\n        }\n\n        // Create new 2fa if enabled\n        if (($this->i2faEnable) && (!empty($this->i2faSecret)) && (class_exists('Totp')) && (class_exists('OpenEMR\\Common\\Crypto\\CryptoGen'))) {\n            // Encrypt the new secret with the hashed password\n            $cryptoGen = new OpenEMR\\Common\\Crypto\\CryptoGen();\n            $secret = $cryptoGen->encryptStandard($this->i2faSecret, $hash);\n            if ($this->execute_sql(\"INSERT INTO login_mfa_registrations (user_id, name, method, var1, var2) VALUES (1, 'App Based 2FA', 'TOTP', '\" . $this->escapeSql($secret) . \"', '')\") == false) {\n                $this->error_message = \"ERROR. Unable to add initial user's 2FA credentials\\n\" .\n                    \"<p>\" . mysqli_error($this->dbh) . \" (#\" . mysqli_errno($this->dbh) . \")\\n\";\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Handle the additional users now that our gacl's have finished installing.\n     * @return bool\n     */\n    public function install_additional_users()\n    {\n        // Add the official openemr users (services)\n        if ($this->load_file($this->additional_users, \"Additional Official Users\") == false) {\n            return false;\n        }\n        return true;\n    }\n\n    public function on_care_coordination()\n    {\n        $resource = $this->execute_sql(\"SELECT `mod_id` FROM `modules` WHERE `mod_name` = 'Carecoordination' LIMIT 1\");\n        $resource_array = mysqli_fetch_array($resource, MYSQLI_ASSOC);\n        $modId = $resource_array['mod_id'];\n        if (empty($modId)) {\n            $this->error_message = \"ERROR configuring Care Coordination module. Unable to get mod_id for Carecoordination module\\n\";\n            return false;\n        }\n\n        $resource = $this->execute_sql(\"SELECT `section_id` FROM `module_acl_sections` WHERE `section_identifier` = 'carecoordination' LIMIT 1\");\n        $resource_array = mysqli_fetch_array($resource, MYSQLI_ASSOC);\n        $sectionId = $resource_array['section_id'];\n        if (empty($sectionId)) {\n            $this->error_message = \"ERROR configuring Care Coordination module. Unable to get section_id for carecoordination module section\\n\";\n            return false;\n        }\n\n        $resource = $this->execute_sql(\"SELECT `id` FROM `gacl_aro_groups` WHERE `value` = 'admin' LIMIT 1\");\n        $resource_array = mysqli_fetch_array($resource, MYSQLI_ASSOC);\n        $groupId = $resource_array['id'];\n        if (empty($groupId)) {\n            $this->error_message = \"ERROR configuring Care Coordination module. Unable to get id for gacl_aro_groups admin section\\n\";\n            return false;\n        }\n\n        if ($this->execute_sql(\"INSERT INTO `module_acl_group_settings` (`module_id`, `group_id`, `section_id`, `allowed`) VALUES ('\" . $this->escapeSql($modId) . \"', '\" . $this->escapeSql($groupId) . \"', '\" . $this->escapeSql($sectionId) . \"', 1)\") == false) {\n            $this->error_message = \"ERROR configuring Care Coordination module. Unable to add the module_acl_group_settings acl entry\\n\";\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Generates the initial user's 2FA QR Code\n     * @return bool|string|void\n     */\n    public function get_initial_user_2fa_qr()\n    {\n        if (($this->i2faEnable) && (!empty($this->i2faSecret)) && (class_exists('Totp'))) {\n            $adminTotp = new Totp($this->i2faSecret, $this->iuser);\n            $qr = $adminTotp->generateQrCode();\n            return $qr;\n        }\n        return false;\n    }\n\n  /**\n   * Create site directory if it is missing.\n   * @global string $GLOBALS['OE_SITE_DIR'] contains the name of the site directory to create\n   * @return name of the site directory or False\n   */\n    public function create_site_directory()\n    {\n        if (!file_exists($GLOBALS['OE_SITE_DIR'])) {\n            $source_directory      = $GLOBALS['OE_SITES_BASE'] . \"/\" . $this->source_site_id;\n            $destination_directory = $GLOBALS['OE_SITE_DIR'];\n            if (! $this->recurse_copy($source_directory, $destination_directory)) {\n                $this->error_message = \"unable to copy directory: '$source_directory' to '$destination_directory'. \" . $this->error_message;\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public function write_configuration_file()\n    {\n        @touch($this->conffile); // php bug\n        $fd = @fopen($this->conffile, 'w');\n        if (! $fd) {\n            $this->error_message = 'unable to open configuration file for writing: ' . $this->conffile;\n            return false;\n        }\n\n        $string = '<?php\n//  OpenEMR\n//  MySQL Config\n\n';\n\n        $it_died = 0;   //fmg: variable keeps running track of any errors\n\n        fwrite($fd, $string) or $it_died++;\n        fwrite($fd, \"global \\$disable_utf8_flag;\\n\") or $it_died++;\n        fwrite($fd, \"\\$disable_utf8_flag = false;\\n\\n\") or $it_died++;\n        fwrite($fd, \"\\$host\\t= '$this->server';\\n\") or $it_died++;\n        fwrite($fd, \"\\$port\\t= '$this->port';\\n\") or $it_died++;\n        fwrite($fd, \"\\$login\\t= '$this->login';\\n\") or $it_died++;\n        fwrite($fd, \"\\$pass\\t= '$this->pass';\\n\") or $it_died++;\n        fwrite($fd, \"\\$dbase\\t= '$this->dbname';\\n\") or $it_died++;\n        fwrite($fd, \"\\$db_encoding\\t= 'utf8mb4';\\n\") or $it_died++;\n\n        $string = '\n$sqlconf = array();\nglobal $sqlconf;\n$sqlconf[\"host\"]= $host;\n$sqlconf[\"port\"] = $port;\n$sqlconf[\"login\"] = $login;\n$sqlconf[\"pass\"] = $pass;\n$sqlconf[\"dbase\"] = $dbase;\n$sqlconf[\"db_encoding\"] = $db_encoding;\n\n//////////////////////////\n//////////////////////////\n//////////////////////////\n//////DO NOT TOUCH THIS///\n$config = 1; /////////////\n//////////////////////////\n//////////////////////////\n//////////////////////////\n?>\n';\n\n        fwrite($fd, $string) or $it_died++;\n        fclose($fd) or $it_died++;\n\n        //it's rather irresponsible to not report errors when writing this file.\n        if ($it_died != 0) {\n            $this->error_message = \"ERROR. Couldn't write $it_died lines to config file '$this->conffile'.\\n\";\n            return false;\n        }\n\n        // Tell PHP that its cached bytecode version of sqlconf.php is no longer usable.\n        if (function_exists('opcache_invalidate')) {\n            opcache_invalidate($this->conffile, true);\n        }\n\n        return true;\n    }\n\n    public function insert_globals()\n    {\n        if (!(function_exists('xl'))) {\n            function xl($s)\n            {\n                return $s;\n            }\n        } else {\n            $GLOBALS['temp_skip_translations'] = true;\n        }\n        $skipGlobalEvent = true; //use in globals.inc.php script to skip event stuff\n        require(dirname(__FILE__) . '/../globals.inc.php');\n        foreach ($GLOBALS_METADATA as $grpname => $grparr) {\n            foreach ($grparr as $fldid => $fldarr) {\n                list($fldname, $fldtype, $flddef, $flddesc) = $fldarr;\n                if (is_array($fldtype) || substr($fldtype, 0, 2) !== 'm_') {\n                    $res = $this->execute_sql(\"SELECT count(*) AS count FROM globals WHERE gl_name = '\" . $this->escapeSql($fldid) . \"'\");\n                    $row = mysqli_fetch_array($res, MYSQLI_ASSOC);\n                    if (empty($row['count'])) {\n                        $this->execute_sql(\"INSERT INTO globals ( gl_name, gl_index, gl_value ) \" .\n                           \"VALUES ( '\" . $this->escapeSql($fldid) . \"', '0', '\" . $this->escapeSql($flddef) . \"' )\");\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public function install_gacl()\n    {\n\n        $gacl = new GaclApi();\n\n        // Create the ACO sections.  Every ACO must have a section.\n        //\n        if ($gacl->add_object_section('Accounting', 'acct', 10, 0, 'ACO') === false) {\n            $this->error_message = \"ERROR, Unable to create the access controls for OpenEMR.\";\n            return false;\n        }\n        // xl('Accounting')\n        $gacl->add_object_section('Administration', 'admin', 10, 0, 'ACO');\n        // xl('Administration')\n        $gacl->add_object_section('Encounters', 'encounters', 10, 0, 'ACO');\n        // xl('Encounters')\n        $gacl->add_object_section('Lists', 'lists', 10, 0, 'ACO');\n        // xl('Lists')\n        $gacl->add_object_section('Patients', 'patients', 10, 0, 'ACO');\n        // xl('Patients')\n        $gacl->add_object_section('Squads', 'squads', 10, 0, 'ACO');\n        // xl('Squads')\n        $gacl->add_object_section('Sensitivities', 'sensitivities', 10, 0, 'ACO');\n        // xl('Sensitivities')\n        $gacl->add_object_section('Placeholder', 'placeholder', 10, 0, 'ACO');\n        // xl('Placeholder')\n        $gacl->add_object_section('Nation Notes', 'nationnotes', 10, 0, 'ACO');\n        // xl('Nation Notes')\n        $gacl->add_object_section('Patient Portal', 'patientportal', 10, 0, 'ACO');\n        // xl('Patient Portal')\n        $gacl->add_object_section('Menus', 'menus', 10, 0, 'ACO');\n        // xl('Menus')\n        $gacl->add_object_section('Groups', 'groups', 10, 0, 'ACO');\n        // xl('Groups')\n        $gacl->add_object_section('Inventory', 'inventory', 10, 0, 'ACO');\n        // xl('Inventory')\n\n        // Create Accounting ACOs.\n        //\n        $gacl->add_object('acct', 'Billing (write optional)', 'bill', 10, 0, 'ACO');\n        // xl('Billing (write optional)')\n        $gacl->add_object('acct', 'Price Discounting', 'disc', 10, 0, 'ACO');\n        // xl('Price Discounting')\n        $gacl->add_object('acct', 'EOB Data Entry', 'eob', 10, 0, 'ACO');\n        // xl('EOB Data Entry')\n        $gacl->add_object('acct', 'Financial Reporting - my encounters', 'rep', 10, 0, 'ACO');\n        // xl('Financial Reporting - my encounters')\n        $gacl->add_object('acct', 'Financial Reporting - anything', 'rep_a', 10, 0, 'ACO');\n        // xl('Financial Reporting - anything')\n\n        // Create Administration ACOs.\n        //\n        $gacl->add_object('admin', 'Superuser', 'super', 10, 0, 'ACO');\n        // xl('Superuser')\n        $gacl->add_object('admin', 'Calendar Settings', 'calendar', 10, 0, 'ACO');\n        // xl('Calendar Settings')\n        $gacl->add_object('admin', 'Database Reporting', 'database', 10, 0, 'ACO');\n        // xl('Database Reporting')\n        $gacl->add_object('admin', 'Forms Administration', 'forms', 10, 0, 'ACO');\n        // xl('Forms Administration')\n        $gacl->add_object('admin', 'Practice Settings', 'practice', 10, 0, 'ACO');\n        // xl('Practice Settings')\n        $gacl->add_object('admin', 'Superbill Codes Administration', 'superbill', 10, 0, 'ACO');\n        // xl('Superbill Codes Administration')\n        $gacl->add_object('admin', 'Users/Groups/Logs Administration', 'users', 10, 0, 'ACO');\n        // xl('Users/Groups/Logs Administration')\n        $gacl->add_object('admin', 'Batch Communication Tool', 'batchcom', 10, 0, 'ACO');\n        // xl('Batch Communication Tool')\n        $gacl->add_object('admin', 'Language Interface Tool', 'language', 10, 0, 'ACO');\n        // xl('Language Interface Tool')\n        $gacl->add_object('admin', 'Inventory Administration', 'drugs', 10, 0, 'ACO');\n        // xl('Inventory Administration')\n        $gacl->add_object('admin', 'ACL Administration', 'acl', 10, 0, 'ACO');\n        // xl('ACL Administration')\n        $gacl->add_object('admin', 'Multipledb', 'multipledb', 10, 0, 'ACO');\n        // xl('Multipledb')\n        $gacl->add_object('admin', 'Menu', 'menu', 10, 0, 'ACO');\n        // xl('Menu')\n        $gacl->add_object('admin', 'Manage modules', 'manage_modules', 10, 0, 'ACO');\n        // xl('Manage modules')\n\n\n        // Create ACOs for encounters.\n        //\n        $gacl->add_object('encounters', 'Authorize - my encounters', 'auth', 10, 0, 'ACO');\n        // xl('Authorize - my encounters')\n        $gacl->add_object('encounters', 'Authorize - any encounters', 'auth_a', 10, 0, 'ACO');\n        // xl('Authorize - any encounters')\n        $gacl->add_object('encounters', 'Coding - my encounters (write,wsome optional)', 'coding', 10, 0, 'ACO');\n        // xl('Coding - my encounters (write,wsome optional)')\n        $gacl->add_object('encounters', 'Coding - any encounters (write,wsome optional)', 'coding_a', 10, 0, 'ACO');\n        // xl('Coding - any encounters (write,wsome optional)')\n        $gacl->add_object('encounters', 'Notes - my encounters (write,addonly optional)', 'notes', 10, 0, 'ACO');\n        // xl('Notes - my encounters (write,addonly optional)')\n        $gacl->add_object('encounters', 'Notes - any encounters (write,addonly optional)', 'notes_a', 10, 0, 'ACO');\n        // xl('Notes - any encounters (write,addonly optional)')\n        $gacl->add_object('encounters', 'Fix encounter dates - any encounters', 'date_a', 10, 0, 'ACO');\n        // xl('Fix encounter dates - any encounters')\n        $gacl->add_object('encounters', 'Less-private information (write,addonly optional)', 'relaxed', 10, 0, 'ACO');\n        // xl('Less-private information (write,addonly optional)')\n\n        // Create ACOs for lists.\n        //\n        $gacl->add_object('lists', 'Default List (write,addonly optional)', 'default', 10, 0, 'ACO');\n        // xl('Default List (write,addonly optional)')\n        $gacl->add_object('lists', 'State List (write,addonly optional)', 'state', 10, 0, 'ACO');\n        // xl('State List (write,addonly optional)')\n        $gacl->add_object('lists', 'Country List (write,addonly optional)', 'country', 10, 0, 'ACO');\n        // xl('Country List (write,addonly optional)')\n        $gacl->add_object('lists', 'Language List (write,addonly optional)', 'language', 10, 0, 'ACO');\n        // xl('Language List (write,addonly optional)')\n        $gacl->add_object('lists', 'Ethnicity-Race List (write,addonly optional)', 'ethrace', 10, 0, 'ACO');\n        // xl('Ethnicity-Race List (write,addonly optional)')\n\n        // Create ACOs for patientportal.\n        //\n        $gacl->add_object('patientportal', 'Patient Portal', 'portal', 10, 0, 'ACO');\n        // xl('Patient Portal')\n\n        // Create ACOs for modules.\n        //\n        $gacl->add_object('menus', 'Modules', 'modle', 10, 0, 'ACO');\n        // xl('Modules')\n\n        // Create ACOs for patients.\n        //\n        $gacl->add_object('patients', 'Appointments (write,wsome optional)', 'appt', 10, 0, 'ACO');\n        // xl('Appointments (write,wsome optional)')\n        $gacl->add_object('patients', 'Demographics (write,addonly optional)', 'demo', 10, 0, 'ACO');\n        // xl('Demographics (write,addonly optional)')\n        $gacl->add_object('patients', 'Medical/History (write,addonly optional)', 'med', 10, 0, 'ACO');\n        // xl('Medical/History (write,addonly optional)')\n        $gacl->add_object('patients', 'Transactions (write optional)', 'trans', 10, 0, 'ACO');\n        // xl('Transactions (write optional)')\n        $gacl->add_object('patients', 'Documents (write,addonly optional)', 'docs', 10, 0, 'ACO');\n        // xl('Documents (write,addonly optional)')\n        $gacl->add_object('patients', 'Documents Delete', 'docs_rm', 10, 0, 'ACO');\n        // xl('Documents Delete')\n        $gacl->add_object('patients', 'Patient Notes (write,addonly optional)', 'notes', 10, 0, 'ACO');\n        // xl('Patient Notes (write,addonly optional)')\n        $gacl->add_object('patients', 'Sign Lab Results (write,addonly optional)', 'sign', 10, 0, 'ACO');\n        // xl('Sign Lab Results (write,addonly optional)')\n        $gacl->add_object('patients', 'Patient Reminders (write,addonly optional)', 'reminder', 10, 0, 'ACO');\n        // xl('Patient Reminders (write,addonly optional)')\n        $gacl->add_object('patients', 'Clinical Reminders/Alerts (write,addonly optional)', 'alert', 10, 0, 'ACO');\n        // xl('Clinical Reminders/Alerts (write,addonly optional)')\n        $gacl->add_object('patients', 'Disclosures (write,addonly optional)', 'disclosure', 10, 0, 'ACO');\n        // xl('Disclosures (write,addonly optional)')\n        $gacl->add_object('patients', 'Prescriptions (write,addonly optional)', 'rx', 10, 0, 'ACO');\n        // xl('Prescriptions (write,addonly optional)')\n        $gacl->add_object('patients', 'Amendments (write,addonly optional)', 'amendment', 10, 0, 'ACO');\n        // xl('Amendments (write,addonly optional)')\n        $gacl->add_object('patients', 'Lab Results (write,addonly optional)', 'lab', 10, 0, 'ACO');\n        // xl('Lab Results (write,addonly optional)')\n        $gacl->add_object('patients', 'Patient Report', 'pat_rep', 10, 0, 'ACO');\n        // xl('Patient Report')\n\n\n        $gacl->add_object('groups', 'View/Add/Update groups', 'gadd', 10, 0, 'ACO');\n        // xl('View/Add/Update groups')\n        $gacl->add_object('groups', 'View/Create/Update groups appointment in calendar', 'gcalendar', 10, 0, 'ACO');\n        // xl('View/Create/Update groups appointment in calendar')\n        $gacl->add_object('groups', 'Group encounter log', 'glog', 10, 0, 'ACO');\n        // xl('Group encounter log')\n        $gacl->add_object('groups', 'Group detailed log of appointment in patient record', 'gdlog', 10, 0, 'ACO');\n        // xl('Group detailed log of appointment in patient record')\n        $gacl->add_object('groups', 'Send message from the permanent group therapist to the personal therapist', 'gm', 10, 0, 'ACO');\n        // xl('Send message from the permanent group therapist to the personal therapist')\n\n        // Create ACOs for sensitivities.\n        //\n        $gacl->add_object('sensitivities', 'Normal', 'normal', 10, 0, 'ACO');\n        // xl('Normal')\n        $gacl->add_object('sensitivities', 'High', 'high', 20, 0, 'ACO');\n        // xl('High')\n\n        // Create ACO for placeholder.\n        //\n        $gacl->add_object('placeholder', 'Placeholder (Maintains empty ACLs)', 'filler', 10, 0, 'ACO');\n        // xl('Placeholder (Maintains empty ACLs)')\n\n        // Create ACO for nationnotes.\n        //\n        $gacl->add_object('nationnotes', 'Nation Notes Configure', 'nn_configure', 10, 0, 'ACO');\n        // xl('Nation Notes Configure')\n\n        // Create ACOs for Inventory.\n        //\n        $gacl->add_object('inventory', 'Lots', 'lots', 10, 0, 'ACO');\n        // xl('Lots')\n        $gacl->add_object('inventory', 'Sales', 'sales', 20, 0, 'ACO');\n        // xl('Sales')\n        $gacl->add_object('inventory', 'Purchases', 'purchases', 30, 0, 'ACO');\n        // xl('Purchases')\n        $gacl->add_object('inventory', 'Transfers', 'transfers', 40, 0, 'ACO');\n        // xl('Transfers')\n        $gacl->add_object('inventory', 'Adjustments', 'adjustments', 50, 0, 'ACO');\n        // xl('Adjustments')\n        $gacl->add_object('inventory', 'Consumption', 'consumption', 60, 0, 'ACO');\n        // xl('Consumption')\n        $gacl->add_object('inventory', 'Destruction', 'destruction', 70, 0, 'ACO');\n        // xl('Destruction')\n        $gacl->add_object('inventory', 'Reporting', 'reporting', 80, 0, 'ACO');\n        // xl('Reporting')\n\n        // Create ARO groups.\n        //\n        $users = $gacl->add_group('users', 'OpenEMR Users', 0, 'ARO');\n        // xl('OpenEMR Users')\n        $admin = $gacl->add_group('admin', 'Administrators', $users, 'ARO');\n        // xl('Administrators')\n        $clin  = $gacl->add_group('clin', 'Clinicians', $users, 'ARO');\n        // xl('Clinicians')\n        $doc   = $gacl->add_group('doc', 'Physicians', $users, 'ARO');\n        // xl('Physicians')\n        $front = $gacl->add_group('front', 'Front Office', $users, 'ARO');\n        // xl('Front Office')\n        $back  = $gacl->add_group('back', 'Accounting', $users, 'ARO');\n        // xl('Accounting')\n        $breakglass  = $gacl->add_group('breakglass', 'Emergency Login', $users, 'ARO');\n        // xl('Emergency Login')\n\n\n        // Create a Users section for the AROs (humans).\n        //\n        $gacl->add_object_section('Users', 'users', 10, 0, 'ARO');\n        // xl('Users')\n\n        // Create the Administrator in the above-created \"users\" section\n        // and add him/her to the above-created \"admin\" group.\n        // If this script is being used by OpenEMR's setup, then will\n        //   incorporate the installation values. Otherwise will\n        //    hardcode the 'admin' user.\n        if (isset($this) && isset($this->iuser)) {\n            $gacl->add_object('users', $this->iuname, $this->iuser, 10, 0, 'ARO');\n            $gacl->add_group_object($admin, 'users', $this->iuser, 'ARO');\n        } else {\n            $gacl->add_object('users', 'Administrator', 'admin', 10, 0, 'ARO');\n            $gacl->add_group_object($admin, 'users', 'admin', 'ARO');\n        }\n\n        // Declare return terms for language translations\n        //  xl('write') xl('wsome') xl('addonly') xl('view')\n\n        // Set permissions for administrators.\n        //\n        $gacl->add_acl(\n            array(\n                'acct' => array('bill', 'disc', 'eob', 'rep', 'rep_a'),\n                'admin' => array('calendar', 'database', 'forms', 'practice', 'superbill', 'users', 'batchcom', 'language', 'super', 'drugs', 'acl','multipledb','menu','manage_modules'),\n                'encounters' => array('auth_a', 'auth', 'coding_a', 'coding', 'notes_a', 'notes', 'date_a', 'relaxed'),\n                'inventory' => array('lots', 'sales', 'purchases', 'transfers', 'adjustments', 'consumption', 'destruction', 'reporting'),\n                'lists' => array('default','state','country','language','ethrace'),\n                'patients' => array('appt', 'demo', 'med', 'trans', 'docs', 'notes', 'sign', 'reminder', 'alert', 'disclosure', 'rx', 'amendment', 'lab', 'docs_rm','pat_rep'),\n                'sensitivities' => array('normal', 'high'),\n                'nationnotes' => array('nn_configure'),\n                'patientportal' => array('portal'),\n                'menus' => array('modle'),\n                'groups' => array('gadd','gcalendar','glog','gdlog','gm')\n            ),\n            null,\n            array($admin),\n            null,\n            null,\n            1,\n            1,\n            'write',\n            'Administrators can do anything'\n        );\n        // xl('Administrators can do anything')\n\n        // Set permissions for physicians.\n        //\n        $gacl->add_acl(\n            array(\n                'patients' => array('pat_rep')\n            ),\n            null,\n            array($doc),\n            null,\n            null,\n            1,\n            1,\n            'view',\n            'Things that physicians can only read'\n        );\n        // xl('Things that physicians can only read')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($doc),\n            null,\n            null,\n            1,\n            1,\n            'addonly',\n            'Things that physicians can read and enter but not modify'\n        );\n        // xl('Things that physicians can read and enter but not modify')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($doc),\n            null,\n            null,\n            1,\n            1,\n            'wsome',\n            'Things that physicians can read and partly modify'\n        );\n        // xl('Things that physicians can read and partly modify')\n        $gacl->add_acl(\n            array(\n                'acct' => array('disc', 'rep'),\n                'admin' => array('drugs'),\n                'encounters' => array('auth_a', 'auth', 'coding_a', 'coding', 'notes_a', 'notes', 'date_a', 'relaxed'),\n                'patients' => array('appt', 'demo', 'med', 'trans', 'docs', 'notes', 'sign', 'reminder', 'alert',\n                    'disclosure', 'rx', 'amendment', 'lab'),\n                'sensitivities' => array('normal', 'high'),\n                'groups' => array('gcalendar','glog')\n            ),\n            null,\n            array($doc),\n            null,\n            null,\n            1,\n            1,\n            'write',\n            'Things that physicians can read and modify'\n        );\n        // xl('Things that physicians can read and modify')\n\n        // Set permissions for clinicians.\n        //\n        $gacl->add_acl(\n            array(\n                'patients' => array('pat_rep')\n            ),\n            null,\n            array($clin),\n            null,\n            null,\n            1,\n            1,\n            'view',\n            'Things that clinicians can only read'\n        );\n        // xl('Things that clinicians can only read')\n        $gacl->add_acl(\n            array(\n                'encounters' => array('notes', 'relaxed'),\n                'patients' => array('demo', 'med', 'docs', 'notes','trans', 'reminder', 'alert', 'disclosure', 'rx', 'amendment', 'lab'),\n                'sensitivities' => array('normal')\n            ),\n            null,\n            array($clin),\n            null,\n            null,\n            1,\n            1,\n            'addonly',\n            'Things that clinicians can read and enter but not modify'\n        );\n        // xl('Things that clinicians can read and enter but not modify')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($clin),\n            null,\n            null,\n            1,\n            1,\n            'wsome',\n            'Things that clinicians can read and partly modify'\n        );\n        // xl('Things that clinicians can read and partly modify')\n        $gacl->add_acl(\n            array(\n                'admin' => array('drugs'),\n                'encounters' => array('auth', 'coding', 'notes'),\n                'patients' => array('appt'),\n                'groups' => array('gcalendar', 'glog')\n            ),\n            null,\n            array($clin),\n            null,\n            null,\n            1,\n            1,\n            'write',\n            'Things that clinicians can read and modify'\n        );\n        // xl('Things that clinicians can read and modify')\n\n        // Set permissions for front office staff.\n        //\n        $gacl->add_acl(\n            array(\n                'patients' => array('alert','pat_rep')\n            ),\n            null,\n            array($front),\n            null,\n            null,\n            1,\n            1,\n            'view',\n            'Things that front office can only read'\n        );\n        // xl('Things that front office can only read')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($front),\n            null,\n            null,\n            1,\n            1,\n            'addonly',\n            'Things that front office can read and enter but not modify'\n        );\n        // xl('Things that front office can read and enter but not modify')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($front),\n            null,\n            null,\n            1,\n            1,\n            'wsome',\n            'Things that front office can read and partly modify'\n        );\n        // xl('Things that front office can read and partly modify')\n        $gacl->add_acl(\n            array(\n                'patients' => array('appt', 'demo', 'trans', 'notes'),\n                'groups' => array('gcalendar')\n            ),\n            null,\n            array($front),\n            null,\n            null,\n            1,\n            1,\n            'write',\n            'Things that front office can read and modify'\n        );\n        // xl('Things that front office can read and modify')\n\n        // Set permissions for back office staff.\n        //\n        $gacl->add_acl(\n            array(\n                'patients' => array('alert','pat_rep')\n            ),\n            null,\n            array($back),\n            null,\n            null,\n            1,\n            1,\n            'view',\n            'Things that back office can only read'\n        );\n        // xl('Things that back office can only read')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($back),\n            null,\n            null,\n            1,\n            1,\n            'addonly',\n            'Things that back office can read and enter but not modify'\n        );\n        // xl('Things that back office can read and enter but not modify')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($back),\n            null,\n            null,\n            1,\n            1,\n            'wsome',\n            'Things that back office can read and partly modify'\n        );\n        // xl('Things that back office can read and partly modify')\n        $gacl->add_acl(\n            array(\n                'acct' => array('bill', 'disc', 'eob', 'rep', 'rep_a'),\n                'admin' => array('practice', 'superbill'),\n                'encounters' => array('auth_a', 'coding_a', 'date_a'),\n                'patients' => array('appt', 'demo')\n            ),\n            null,\n            array($back),\n            null,\n            null,\n            1,\n            1,\n            'write',\n            'Things that back office can read and modify'\n        );\n        // xl('Things that back office can read and modify')\n\n        // Set permissions for Emergency Login.\n        //\n        $gacl->add_acl(\n            array(\n                'acct' => array('bill', 'disc', 'eob', 'rep', 'rep_a'),\n                'admin' => array('calendar', 'database', 'forms', 'practice', 'superbill', 'users', 'batchcom', 'language', 'super', 'drugs', 'acl','multipledb','menu','manage_modules'),\n                'encounters' => array('auth_a', 'auth', 'coding_a', 'coding', 'notes_a', 'notes', 'date_a', 'relaxed'),\n                'inventory' => array('lots', 'sales', 'purchases', 'transfers', 'adjustments', 'consumption', 'destruction', 'reporting'),\n                'lists' => array('default','state','country','language','ethrace'),\n                'patients' => array('appt', 'demo', 'med', 'trans', 'docs', 'notes', 'sign', 'reminder', 'alert', 'disclosure', 'rx', 'amendment', 'lab', 'docs_rm','pat_rep'),\n                'sensitivities' => array('normal', 'high'),\n                'nationnotes' => array('nn_configure'),\n                'patientportal' => array('portal'),\n                'menus' => array('modle'),\n                'groups' => array('gadd','gcalendar','glog','gdlog','gm')\n            ),\n            null,\n            array($breakglass),\n            null,\n            null,\n            1,\n            1,\n            'write',\n            'Emergency Login user can do anything'\n        );\n        // xl('Emergency Login user can do anything')\n\n        return true;\n    }\n\n    public function quick_install()\n    {\n        // Validation of OpenEMR user settings\n        //   (applicable if not cloning from another database)\n        if (empty($this->clone_database)) {\n            if (! $this->login_is_valid()) {\n                return false;\n            }\n\n            if (! $this->iuser_is_valid()) {\n                return false;\n            }\n\n            if (! $this->user_password_is_valid()) {\n                return false;\n            }\n        }\n\n        // Validation of mysql database password\n        if (! $this->password_is_valid()) {\n            return false;\n        }\n\n        if (! $this->no_root_db_access) {\n            // Connect to mysql via root user\n            if (! $this->root_database_connection()) {\n                return false;\n            }\n\n            // Create the dumpfile\n            //   (applicable if cloning from another database)\n            if (! empty($this->clone_database)) {\n                if (! $this->create_dumpfiles()) {\n                    return false;\n                }\n            }\n\n            // Create the site directory\n            //   (applicable if mirroring another local site)\n            if (! empty($this->source_site_id)) {\n                if (! $this->create_site_directory()) {\n                    return false;\n                }\n            }\n\n            $this->disconnect();\n            // Using @ in below call to hide the php warning in cases where the\n            //  below connection does not work, which is expected behavior.\n            // Using try in below call to catch the mysqli exception when the\n            //  below connection does not work, which is expected behavior (needed to\n            //  add this try/catch clause for PHP 8.1).\n            try {\n                $checkUserDatabaseConnection = @$this->user_database_connection();\n            } catch (Exception $e) {\n                $checkUserDatabaseConnection = false;\n            }\n            if (! $checkUserDatabaseConnection) {\n                // Re-connect to mysql via root user\n                if (! $this->root_database_connection()) {\n                    return false;\n                }\n\n                // Create the mysql database\n                if (! $this->create_database()) {\n                    return false;\n                }\n\n                // Create the mysql user\n                if (! $this->create_database_user()) {\n                    return false;\n                }\n\n                // Grant user privileges to the mysql database\n                if (! $this->grant_privileges()) {\n                    return false;\n                }\n            }\n\n            $this->disconnect();\n        }\n\n        // Connect to mysql via created user\n        if (! $this->user_database_connection()) {\n            return false;\n        }\n\n        // Build the database\n        if (! $this->load_dumpfiles()) {\n            return false;\n        }\n\n        // Write the sql configuration file\n        if (! $this->write_configuration_file()) {\n            return false;\n        }\n\n        // Load the version information, globals settings,\n        // initial user, and set up gacl access controls.\n        //  (applicable if not cloning from another database)\n        if (empty($this->clone_database)) {\n            if (! $this->add_version_info()) {\n                return false;\n            }\n\n            if (! $this->insert_globals()) {\n                return false;\n            }\n\n            if (! $this->add_initial_user()) {\n                return false;\n            }\n\n            if (! $this->install_gacl()) {\n                return false;\n            }\n\n            if (! $this->install_additional_users()) {\n                return false;\n            }\n\n            if (! $this->on_care_coordination()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private function escapeSql($sql)\n    {\n        return mysqli_real_escape_string($this->dbh, $sql);\n    }\n\n    private function escapeDatabaseName($name)\n    {\n        if (preg_match('/[^A-Za-z0-9_-]/', $name)) {\n            error_log(\"Illegal character(s) in database name\");\n            die(\"Illegal character(s) in database name\");\n        }\n        return $name;\n    }\n\n    private function escapeCollateName($name)\n    {\n        if (preg_match('/[^A-Za-z0-9_-]/', $name)) {\n            error_log(\"Illegal character(s) in collation name\");\n            die(\"Illegal character(s) in collation name\");\n        }\n        return $name;\n    }\n\n    private function execute_sql($sql, $showError = true)\n    {\n        $this->error_message = '';\n        if (! $this->dbh) {\n            $this->user_database_connection();\n        }\n\n        $results = mysqli_query($this->dbh, $sql);\n        if ($results) {\n            return $results;\n        } else {\n            if ($showError) {\n                $error_mes = mysqli_error($this->dbh);\n                $this->error_message = \"unable to execute SQL: '$sql' due to: \" . $error_mes;\n                error_log(\"ERROR IN OPENEMR INSTALL: Unable to execute SQL: \" . htmlspecialchars($sql, ENT_QUOTES) . \" due to: \" . htmlspecialchars($error_mes, ENT_QUOTES));\n            }\n            return false;\n        }\n    }\n\n    private function connect_to_database($server, $user, $password, $port, $dbname = '')\n    {\n        $pathToCerts = __DIR__ . \"/../../sites/\" . $this->site . \"/documents/certificates/\";\n        $mysqlSsl = false;\n        $mysqli = mysqli_init();\n        if (defined('MYSQLI_CLIENT_SSL') && file_exists($pathToCerts . \"mysql-ca\")) {\n            $mysqlSsl = true;\n            if (\n                file_exists($pathToCerts . \"mysql-key\") &&\n                file_exists($pathToCerts . \"mysql-cert\")\n            ) {\n                // with client side certificate/key\n                mysqli_ssl_set(\n                    $mysqli,\n                    $pathToCerts . \"mysql-key\",\n                    $pathToCerts . \"mysql-cert\",\n                    $pathToCerts . \"mysql-ca\",\n                    null,\n                    null\n                );\n            } else {\n                // without client side certificate/key\n                mysqli_ssl_set(\n                    $mysqli,\n                    null,\n                    null,\n                    $pathToCerts . \"mysql-ca\",\n                    null,\n                    null\n                );\n            }\n        }\n        if ($mysqlSsl) {\n            $ok = mysqli_real_connect($mysqli, $server, $user, $password, $dbname, (int)$port != 0 ? (int)$port : 3306, '', MYSQLI_CLIENT_SSL);\n        } else {\n            $ok = mysqli_real_connect($mysqli, $server, $user, $password, $dbname, (int)$port != 0 ? (int)$port : 3306);\n        }\n        if (!$ok) {\n            $this->error_message = 'unable to connect to sql server because of: (' . mysqli_connect_errno() . ') ' . mysqli_connect_error();\n            return false;\n        }\n        return $mysqli;\n    }\n\n    private function set_sql_strict()\n    {\n        // Turn off STRICT SQL\n        return $this->execute_sql(\"SET sql_mode = ''\");\n    }\n\n    private function set_collation()\n    {\n        return $this->execute_sql(\"SET NAMES 'utf8mb4'\");\n    }\n\n  /**\n   * innitialize $this->dumpfiles, an array of the dumpfiles that will\n   * be loaded into the database, including the correct translation\n   * dumpfile.\n   * The keys are the paths of the dumpfiles, and the values are the titles\n   * @return array\n   */\n    private function initialize_dumpfile_list()\n    {\n        if ($this->clone_database) {\n            $this->dumpfiles = array( $this->get_backup_filename() => 'clone database' );\n        } else {\n            $dumpfiles = array( $this->main_sql => 'Main' );\n            if (! empty($this->development_translations)) {\n                // Use the online development translation set\n                $dumpfiles[ $this->devel_translation_sql ] = \"Online Development Language Translations (utf8)\";\n            } else {\n                // Use the local translation set\n                $dumpfiles[ $this->translation_sql ] = \"Language Translation (utf8)\";\n            }\n\n            if ($this->ippf_specific) {\n                $dumpfiles[ $this->ippf_sql ] = \"IPPF Layout\";\n            }\n\n            // Load ICD-9 codes if present.\n            if (file_exists($this->icd9)) {\n                $dumpfiles[ $this->icd9 ] = \"ICD-9\";\n            }\n\n            // Load CVX codes if present\n            if (file_exists($this->cvx)) {\n                $dumpfiles[ $this->cvx ] = \"CVX Immunization Codes\";\n            }\n\n            $this->dumpfiles = $dumpfiles;\n        }\n\n        return $this->dumpfiles;\n    }\n\n  /**\n   *\n   * Directory copy logic borrowed from a user comment at\n   * http://www.php.net/manual/en/function.copy.php\n   * @param string $src name of the directory to copy\n   * @param string $dst name of the destination to copy to\n   * @return bool indicating success\n   */\n    private function recurse_copy($src, $dst)\n    {\n        $dir = opendir($src);\n        if (! @mkdir($dst)) {\n            $this->error_message = \"unable to create directory: '$dst'\";\n            return false;\n        }\n\n        while (false !== ($file = readdir($dir))) {\n            if ($file != '.' && $file != '..') {\n                if (is_dir($src . '/' . $file)) {\n                    $this->recurse_copy($src . '/' . $file, $dst . '/' . $file);\n                } else {\n                    copy($src . '/' . $file, $dst . '/' . $file);\n                }\n            }\n        }\n\n        closedir($dir);\n        return true;\n    }\n\n  /**\n   *\n   * dump a site's database to a temporary file.\n   * @param string $source_site_id the site_id of the site to dump\n   * @return filename of the backup\n   */\n    private function dumpSourceDatabase()\n    {\n        global $OE_SITES_BASE;\n        $source_site_id = $this->source_site_id;\n\n        include(\"$OE_SITES_BASE/$source_site_id/sqlconf.php\");\n\n        if (empty($config)) {\n            die(\"Source site $source_site_id has not been set up!\");\n        }\n\n        $backup_file = $this->get_backup_filename();\n        $cmd = \"mysqldump -u \" . escapeshellarg($login) .\n        \" -h \" . $host .\n        \" -p\" . escapeshellarg($pass) .\n        \" --hex-blob --opt --skip-extended-insert --quote-names -r $backup_file \" .\n        escapeshellarg($dbase);\n\n        $tmp1 = [];\n        $tmp0 = exec($cmd, $tmp1, $tmp2);\n        if ($tmp2) {\n            die(\"Error $tmp2 running \\\"$cmd\\\": $tmp0 \" . implode(' ', $tmp1));\n        }\n\n        return $backup_file;\n    }\n\n  /**\n   * @return filename of the source backup database for cloning\n   */\n    private function get_backup_filename()\n    {\n        if (stristr(PHP_OS, 'WIN')) {\n            $backup_file = 'C:/windows/temp/setup_dump.sql';\n        } else {\n            $backup_file = '/tmp/setup_dump.sql';\n        }\n\n        return $backup_file;\n    }\n    //RP_ADDED\n    public function getCurrentTheme()\n    {\n        $current_theme =  $this->execute_sql(\"SELECT gl_value FROM globals WHERE gl_name LIKE '%css_header%'\");\n        $current_theme = mysqli_fetch_array($current_theme);\n        return $current_theme [0];\n    }\n\n    public function setCurrentTheme()\n    {\n        $this->getCurrentTheme();//why is this needed ?\n        return $this->execute_sql(\"UPDATE globals SET gl_value='\" . $this->escapeSql($this->new_theme) . \"' WHERE gl_name LIKE '%css_header%'\");\n    }\n\n    public function listThemes()\n    {\n        $themes_img_dir = \"public/images/stylesheets/\";\n        $arr_themes_img = array_values(array_filter(scandir($themes_img_dir), function ($item) {\n            return $item[0] !== '.';\n        }));\n        return $arr_themes_img;\n    }\n\n    private function extractFileName($theme_file_name = '')\n    {\n        $this->theme_file_name = $theme_file_name;\n        $under_score = strpos($theme_file_name, '_') + 1;\n        $dot = strpos($theme_file_name, '.');\n        $theme_value = substr($theme_file_name, $under_score, ($dot - $under_score));\n        $theme_title = ucwords(str_replace(\"_\", \" \", $theme_value));\n        return array('theme_value' => $theme_value, 'theme_title' => $theme_title);\n    }\n\n    public function displayThemesDivs()\n    {\n        $themes_number = count($this->listThemes());\n        for ($i = 0; $i < $themes_number; $i++) {\n            $id = $i + 1;\n            $arr_theme_name = $this->listThemes();\n            $theme_file_name = $arr_theme_name[$i];\n            $arr_extracted_file_name = $this->extractFileName($theme_file_name);\n            $theme_value = $arr_extracted_file_name['theme_value'];\n            $theme_title = $arr_extracted_file_name['theme_title'];\n            $img_path = \"public/images/stylesheets/\";\n            $theme_file_path = $img_path . $theme_file_name;\n            $div_start = \"                      <div class='row'>\";\n            $div_end = \"                      </div>\";\n            $img_div = \"                <div class='col-sm-2 checkboxgroup'>\n                                            <label for='my_radio_button_id\" . attr($id) . \"'><img height='160px' src='\" . attr($theme_file_path) . \"' width='100%'></label>\n                                            <p class='m-0'>\" . text($theme_title) . \"</p><input id='my_radio_button_id\" . attr($id) . \"' name='stylesheet' type='radio' value='\" . attr($theme_value) . \"'>\n                                        </div>\";\n            $theme_img_number = $i % 6; //to ensure that last file in array will always generate 5 and will end the row\n            switch ($theme_img_number) {\n                case 0: //start row\n                    echo $div_start . \"\\r\\n\";\n                    echo $img_div . \"\\r\\n\";\n                    break;\n\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                    echo $img_div . \"\\r\\n\";\n                    break;\n\n                case 5://end row\n                    echo $img_div . \"\\r\\n\";\n                    echo $div_end . \"\\r\\n\";\n                    echo \"<br />\" . \"\\r\\n\";\n                    break;\n\n                default:\n                    echo $div_start . \"\\r\\n\";\n                    echo \"<h5>Sorry no stylesheet images in directory</h5>\";\n                    echo $div_end . \"\\r\\n\";\n                    break;\n            }\n        }\n        return;\n    }\n\n    public function displaySelectedThemeDiv()\n    {\n        $theme_file_name = $this->getCurrentTheme();\n        $arr_extracted_file_name = $this->extractFileName($theme_file_name);\n        $theme_value = $arr_extracted_file_name['theme_value'];\n        $theme_title = $arr_extracted_file_name['theme_title'];\n        $img_path = \"public/images/stylesheets/\";\n        $theme_file_path = $img_path . \"style_\" . $theme_value . \".png\";\n\n        $display_selected_theme_div = <<<DSTD\n                        <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                                <h4>Current Theme:</h4>\n                                <div class=\"col-sm-4 offset-sm-4 checkboxgroup\">\n                                    <label for=\"nothing\"><img  id=\"current_theme\" src=\"{$theme_file_path}\" width=\"100%\"></label>\n                                    <p id=\"current_theme_title\"style=\"margin:0\">{$theme_title}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <br />\nDSTD;\n        echo $display_selected_theme_div . \"\\r\\n\";\n        return;\n    }\n\n    public function displayNewThemeDiv()\n    {\n        $theme_file_name = $this->new_theme;\n        $arr_extracted_file_name = $this->extractFileName($theme_file_name);\n        $theme_value = $arr_extracted_file_name['theme_value'];\n        $theme_title = $arr_extracted_file_name['theme_title'];\n        $img_path = \"public/images/stylesheets/\";\n        $theme_file_path = $img_path . \"style_\" . $theme_value . \".png\";\n\n        $display_selected_theme_div = <<<DSTD\n                        <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                                <div class=\"col-sm-4 offset-sm-4 checkboxgroup\">\n                                    <label for=\"nothing\"><img  id=\"current_theme\" src=\"{$theme_file_path}\" width=\"75%\"></label>\n                                    <p id=\"current_theme_title\"style=\"margin:0\">{$theme_title}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <br />\nDSTD;\n        echo $display_selected_theme_div . \"\\r\\n\";\n        return;\n    }\n\n    public function setupHelpModal()\n    {\n        $setup_help_modal = <<<SETHLP\n    <div class=\"row\">\n            <div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-dialog modal-lg\">\n                    <div class=\"modal-content  oe-modal-content\" style=\"height:700px\">\n                        <div class=\"modal-header clearfix\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=Close>\n                            <span aria-hidden=\"true\" style=\"color:var(--black); font-size:1.5em;\">\u00d7</span></button>\n                        </div>\n                        <div class=\"modal-body\" style=\"height:80%;\">\n                            <iframe src=\"\" id=\"targetiframe\" style=\"height:100%; width:100%; overflow-x: hidden; border:none\"\n                            allowtransparency=\"true\"></iframe>\n                        </div>\n                        <div class=\"modal-footer\" style=\"margin-top:0px;\">\n                           <button class=\"btn btn-link btn-cancel oe-pull-away\" data-dismiss=\"modal\" type=\"button\">Close</button>\n                           <!--<button class=\"btn btn-secondary btn-print oe-pull-away\" data-dismiss=\"modal\" id=\"print-help-href\" type=\"button\">Print</button>-->\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <script>\n            $(function () {\n                $('#help-href').click (function(){\n                    document.getElementById('targetiframe').src = \"Documentation/help_files/openemr_installation_help.php\";\n                })\n            });\n            $(function () {\n                $('#print-help-href').click (function(){\n                    $(\"#targetiframe\").get(0).contentWindow.print();\n                })\n            });\n            // Jquery draggable\n            $(\".modal-dialog\").addClass('drag-action');\n            $(\".modal-content\").addClass('resize-action');\n        </script>\nSETHLP;\n        echo $setup_help_modal  . \"\\r\\n\";\n        return;\n    }\n}\n", "<?php\n\n/**\n * AclExtended class.\n *\n *   Provides Acl functions that are above and beyond the standard acl checks.\n *\n *   Note that it stores a static GaclApi object to improve performance (this avoids doing\n *    separate database connection for every call to GaclApi)\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2020 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2021 Rod Roark <rod@sunsetsystems.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nnamespace OpenEMR\\Common\\Acl;\n\nuse OpenEMR\\Gacl\\GaclApi;\nuse OpenEMR\\Services\\UserService;\nuse OpenEMR\\Services\\VersionService;\nuse OpenEMR\\Common\\Acl\\AclMain;\n\nclass AclExtended\n{\n    // Holds the static GaclApi object\n    private static $gaclApiObject;\n\n    // Collect the stored GaclApi object (create it if it doesn't yet exist)\n    //  Sharing one object will prevent opening a database connection for every call to GaclApi.\n    private static function collectGaclApiObject()\n    {\n        if (!is_object(self::$gaclApiObject)) {\n            // GaclApi object does not yet exist, so create it\n            self::$gaclApiObject = new GaclApi();\n        }\n        return self::$gaclApiObject;\n    }\n\n    // Return an array keyed on squad ACO names.\n    // This is only applicable for sports team use.\n    //\n    public static function aclGetSquads()\n    {\n        $squads = self::aclGetSectionAcos('squads');\n        uasort($squads, \"self::aclSquadCompare\");\n        return $squads;\n    }\n\n    // Return an array keyed on encounter sensitivity level ACO names.\n    // Sensitivities are useful when some encounter notes are not\n    // medically sensitive (e.g. a physical fitness test), and/or if\n    // some will be \"for doctor's eyes only\" (e.g. STD treatment).\n    //\n    // When a non-blank sensitivity value exists in the new encounter\n    // form, it names an additional ACO required for access to all forms\n    // in the encounter.  If you want some encounters to be non-sensitive,\n    // then you also need some default nonblank sensitivity for normal\n    // encounters, as well as greater encounter notes permissions for\n    // those allowed to view non-sensitive encounters.\n    //\n    public static function aclGetSensitivities()\n    {\n        return self::aclGetSectionAcos('sensitivities');\n    }\n\n    // Get the ACO name/value pairs for a designated section.  Each value\n    // is an array (section_value, value, order_value, name, hidden).\n    //\n    private static function aclGetSectionAcos($section)\n    {\n        $gacl = self::collectGaclApiObject();\n        $arr1 = $gacl->get_objects($section, 1, 'ACO');\n        $arr = array();\n        if (!empty($arr1[$section])) {\n            foreach ($arr1[$section] as $value) {\n                $odata = $gacl->get_object_data($gacl->get_object_id($section, $value, 'ACO'), 'ACO');\n                $arr[$value] = $odata[0];\n            }\n        }\n        return $arr;\n    }\n\n    // Sort squads by their order value.  Used only by aclGetSquads().\n    private static function aclSquadCompare($a, $b)\n    {\n        if ($a[2] == $b[2]) {\n            // If order value is the same, sort by squad name.\n            if ($a[3] == $b[3]) {\n                return 0;\n            }\n            return ($a[3] < $b[3]) ? -1 : 1;\n        }\n        return ($a[2] < $b[2]) ? -1 : 1;\n    }\n\n    //\n    // Returns true if aco exist\n    // Returns false if aco doesn't exist\n    //    $section_name = name of section (string)\n    //    $aco_name = name of aco (string)\n    //\n    public static function acoExist($section_name, $aco_name)\n    {\n        $gacl = self::collectGaclApiObject();\n        $aco_id = $gacl->get_object_id($section_name, $aco_name, 'ACO');\n        if ($aco_id) {\n            return true;\n        }\n    }\n\n    //\n    // Returns a sorted array of all available Group Titles.\n    //\n    public static function aclGetGroupTitleList($include_superusers = true)\n    {\n        $gacl = self::collectGaclApiObject();\n        $parent_id = $gacl->get_root_group_id();\n        $arr_group_ids = $gacl->get_group_children($parent_id, 'ARO', 'RECURSE');\n        $arr_group_titles = array();\n        foreach ($arr_group_ids as $value) {\n            $arr_group_data = $gacl->get_group_data($value, 'ARO');\n            // add if $include_superusers is true or group not include admin|super rule.\n            if ($include_superusers || !self::isGroupIncludeSuperuser($arr_group_data[3])) {\n                $arr_group_titles[$value] = $arr_group_data[3];\n            }\n        }\n        sort($arr_group_titles);\n        return $arr_group_titles;\n    }\n\n    //\n    // Returns a sorted array of group Titles that a user belongs to.\n    // Returns 0 if does not belong to any group yet.\n    //   $user_name = Username, which is login name.\n    //\n    public static function aclGetGroupTitles($user_name)\n    {\n        $gacl = self::collectGaclApiObject();\n        $user_aro_id = $gacl->get_object_id('users', $user_name, 'ARO');\n        if ($user_aro_id) {\n            $arr_group_id = $gacl->get_object_groups($user_aro_id, 'ARO', 'NO_RECURSE');\n            if ($arr_group_id) {\n                foreach ($arr_group_id as $key => $value) {\n                    $arr_group_data = $gacl->get_group_data($value, 'ARO');\n                    $arr_group_titles[$key] = $arr_group_data[3];\n                }\n                sort($arr_group_titles);\n                return $arr_group_titles;\n            }\n        }\n    }\n\n    //\n    // This will place the user aro object into selected group(s)\n    // It uses the setUserAro() function\n    //   $username = username (string)\n    //   $group = title of group(s) (string or array)\n    //\n    public static function addUserAros($username, $group)\n    {\n        $current_user_groups = self::aclGetGroupTitles($username);\n        if (!$current_user_groups) {\n            $current_user_groups = array();\n        }\n        if (is_array($group)) {\n            foreach ($group as $value) {\n                if (!in_array($value, $current_user_groups)) {\n                    array_push($current_user_groups, $value);\n                }\n            }\n        } else {\n            if (!in_array($group, $current_user_groups)) {\n                array_push($current_user_groups, $group);\n            }\n        }\n        $user_data = sqlFetchArray(sqlStatement(\"SELECT * FROM users WHERE username = ?\", array($username)));\n        self::setUserAro(\n            $current_user_groups,\n            $username,\n            $user_data[\"fname\"],\n            $user_data[\"mname\"],\n            $user_data[\"lname\"]\n        );\n        return;\n    }\n\n    //\n    // This will remove the user aro object from the selected group(s)\n    // It uses the setUserAro() function\n    //   $username = username (string)\n    //   $group = title of group(s) (string or array)\n    //\n    public static function removeUserAros($username, $group)\n    {\n        $current_user_groups = self::aclGetGroupTitles($username);\n        $new_user_groups = array();\n        if (is_array($group)) {\n            foreach ($current_user_groups as $value) {\n                if (!in_array($value, $group)) {\n                    array_push($new_user_groups, $value);\n                }\n            }\n        } else {\n            foreach ($current_user_groups as $value) {\n                if ($value != $group) {\n                    array_push($new_user_groups, $value);\n                }\n            }\n        }\n        $user_data = sqlFetchArray(sqlStatement(\"SELECT * FROM users WHERE username = ?\", array($username)));\n        self::setUserAro(\n            $new_user_groups,\n            $username,\n            $user_data[\"fname\"],\n            $user_data[\"mname\"],\n            $user_data[\"lname\"]\n        );\n        return;\n    }\n\n    //\n    // This will either create or edit a user aro object, and then place it\n    // in the requested groups. It will not allow removal of the 'admin'\n    // user or gacl_protected users from the 'admin' group.\n    //   $arr_group_titles = titles of the groups that user will be added to.\n    //   $user_name = username, which is login name.\n    //   $first_name = first name\n    //   $middle_name = middle name\n    //   $last_name = last name\n    //\n    public static function setUserAro($arr_group_titles, $user_name, $first_name, $middle_name, $last_name)\n    {\n        $gacl = self::collectGaclApiObject();\n\n        //see if this user is gacl protected (ie. do not allow\n        //removal from the Administrators group)\n        require_once(dirname(__FILE__) . '/../../../library/user.inc');\n\n        $userNameToID = (new UserService())->getIdByUsername($user_name);\n\n        if (checkUserSetting(\"gacl_protect\", \"1\", $userNameToID) || $user_name == \"admin\") {\n            $gacl_protect = true;\n        } else {\n            $gacl_protect = false;\n        }\n\n        //get array of all available group ID numbers\n        $parent_id = $gacl->get_root_group_id();\n        $arr_all_group_ids = $gacl->get_group_children($parent_id, 'ARO', 'RECURSE');\n\n        //Cycle through ID array to find and process each selected group\n        //Create a counter since processing of first hit is unique\n        $counter = 0;\n        foreach ($arr_all_group_ids as $value) {\n            $arr_group_data = $gacl->get_group_data($value, 'ARO');\n            if (\n                (empty($arr_group_titles)) ||\n                (in_array($arr_group_data[3], $arr_group_titles))\n            ) {\n                //We have a hit, so need to add group and increment counter\n                // because processing of first hit is unique\n                //This will also deal with an empty $arr_group_titles array\n                // removing user from all groups unless 'admin'\n                $counter = $counter + 1;\n                //create user full name field\n                if ($middle_name) {\n                    $full_name = $first_name . \" \" . $middle_name . \" \" . $last_name;\n                } else {\n                    if ($last_name) {\n                        $full_name = $first_name . \" \" . $last_name;\n                    } else {\n                        $full_name = $first_name;\n                    }\n                }\n\n                //If this is not the first group to be added, then will skip below\n                // and will be added. If this is the first group, then need to\n                // go thru several steps before adding the group.\n                if ($counter == 1) {\n                    //get ID of user ARO object, if it exist\n                    $user_aro_id = $gacl->get_object_id('users', $user_name, 'ARO');\n                    if ($user_aro_id) {\n                        //user ARO object already exist, so will edit it\n                        $gacl->edit_object($user_aro_id, 'users', $full_name, $user_name, 10, 0, 'ARO');\n\n                        //remove all current user ARO object group associations\n                        $arr_remove_group_ids = $gacl->get_object_groups($user_aro_id, 'ARO', 'NO_RECURSE');\n                        foreach ($arr_remove_group_ids as $value2) {\n                            $gacl->del_group_object($value2, 'users', $user_name, 'ARO');\n                        }\n                    } else {\n                        //user ARO object does not exist, so will create it\n                        $gacl->add_object('users', $full_name, $user_name, 10, 0, 'ARO');\n                    }\n                }\n\n                //place the user ARO object in the selected group (if group(s) is selected)\n                if (!empty($arr_group_titles)) {\n                    $gacl->add_group_object($value, 'users', $user_name, 'ARO');\n                }\n\n                //\n                //Below will not allow 'admin' or gacl_protected user to be removed from 'admin' group\n                //\n                if ($gacl_protect) {\n                    $boolean_admin = 0;\n                    $admin_id = $gacl->get_object_id('users', $user_name, 'ARO');\n                    $arr_admin = $gacl->get_object_groups($admin_id, 'ARO', 'NO_RECURSE');\n                    if (!empty($arr_admin)) {\n                        foreach ($arr_admin as $value3) {\n                            $arr_admin_data = $gacl->get_group_data($value3, 'ARO');\n                            if (strcmp($arr_admin_data[2], 'admin') == 0) {\n                                $boolean_admin = 1;\n                            }\n                        }\n                        if (!$boolean_admin) {\n                            foreach ($arr_all_group_ids as $value4) {\n                                $arr_temp = $gacl->get_group_data($value4, 'ARO');\n                                if ($arr_temp[2] == 'admin') {\n                                    $gacl->add_group_object($value4, 'users', $user_name, 'ARO');\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            //if array of groups was empty, then we are done, and can break from loop\n            if (empty($arr_group_titles)) {\n                break;\n            }\n        }\n        return true;\n    }\n\n    //\n    // Returns true if acl exist\n    // Returns false if acl doesn't exist\n    //  EITHER $title or $name is required(send FALSE in variable\n    //  not being used). If both are sent, then only $title will be\n    //  used.\n    //  $return_value is required\n    //    $title = title of acl (string)\n    //    $name = name of acl (string)\n    //    $return_value = return value of acl (string)\n    //\n    public static function aclExist($title, $name, $return_value)\n    {\n        $gacl = self::collectGaclApiObject();\n        if (!$name) {\n            $acl = $gacl->search_acl(false, false, false, false, $title, false, false, false, $return_value);\n        } else {\n            if (!$title) {\n                $group_id = $gacl->get_group_id($name, null, 'ARO');\n                if ($group_id) {\n                    $group_data = $gacl->get_group_data($group_id, 'ARO');\n                    $acl = $gacl->search_acl(false, false, false, false, $group_data[3], false, false, false, $return_value);\n                } else {\n                    return false;\n                }\n            } else {\n                $acl = $gacl->search_acl(false, false, false, false, $title, false, false, false, $return_value);\n            }\n        }\n        if (!empty($acl)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    //\n    // This will add a new acl and group(if group doesn't yet exist)\n    // with one aco in it.\n    //   $acl_title = title of acl (string)\n    //   $acl_name = name of acl (string)\n    //   $return_value = return value of acl (string)\n    //   $note = description of acl (array)\n    //\n    public static function aclAdd($acl_title, $acl_name, $return_value, $note)\n    {\n        $gacl = self::collectGaclApiObject();\n        $group_id = $gacl->get_group_id($acl_name, $acl_title, 'ARO');\n        if ($group_id) {\n            //group already exist, so just create acl\n            $gacl->add_acl(\n                array(\"placeholder\" => array(\"filler\")),\n                null,\n                array($group_id),\n                null,\n                null,\n                1,\n                1,\n                $return_value,\n                $note\n            );\n        } else {\n            //create group, then create acl\n            $parent_id = $gacl->get_root_group_id();\n            $aro_id = $gacl->add_group($acl_name, $acl_title, $parent_id, 'ARO');\n            $gacl->add_acl(\n                array(\"placeholder\" => array(\"filler\")),\n                null,\n                array($aro_id),\n                null,\n                null,\n                1,\n                1,\n                $return_value,\n                $note\n            );\n        }\n        return;\n    }\n\n    //\n    // This will remove acl. It will also remove group(if the group\n    // is no longer associated with any acl's).\n    //   $acl_title = title of acl (string)\n    //   $acl_name = name of acl (string)\n    //   $return_value = return value of acl (string)\n    //   $note = description of acl (array)\n    //\n    public static function aclRemove($acl_title, $return_value)\n    {\n        $gacl = self::collectGaclApiObject();\n        //First, delete the acl\n        $acl_id = $gacl->search_acl(false, false, false, false, $acl_title, false, false, false, $return_value);\n        $gacl->del_acl($acl_id[0]);\n        //Then, remove the group(if no more acl's are remaining)\n        $acl_search = $gacl->search_acl(false, false, false, false, $acl_title, false, false, false, false);\n        if (empty($acl_search)) {\n            $group_id = $gacl->get_group_id(null, $acl_title, 'ARO');\n            $gacl->del_group($group_id, true, 'ARO');\n        }\n        return;\n    }\n\n    //\n    // This will place the aco(s) into the selected acl\n    //   $acl_title = title of acl (string)\n    //   $return_value = return value of acl (string)\n    //   $aco_id = id of aco (array)\n    //\n    public static function aclAddAcos($acl_title, $return_value, $aco_id)\n    {\n        $gacl = self::collectGaclApiObject();\n        $acl_id = $gacl->search_acl(false, false, false, false, $acl_title, false, false, false, $return_value);\n        foreach ($aco_id as $value) {\n            $aco_data = $gacl->get_object_data($value, 'ACO');\n            $aco_section = $aco_data[0][0];\n            $aco_name = $aco_data[0][1];\n            $gacl->append_acl($acl_id[0], null, null, null, null, array($aco_section => array($aco_name)));\n        }\n        return;\n    }\n\n    //\n    // This will remove the aco(s) from the selected acl\n    //  Note if all aco's are removed, then will place the filler-placeholder\n    //  into the acl to avoid complete removal of the acl.\n    //   $acl_title = title of acl (string)\n    //   $return_value = return value of acl (string)\n    //   $aco_id = id of aco (array)\n    //\n    public static function aclRemoveAcos($acl_title, $return_value, $aco_id)\n    {\n        $gacl = self::collectGaclApiObject();\n        $acl_id = $gacl->search_acl(false, false, false, false, $acl_title, false, false, false, $return_value);\n\n        // Check to see if removing all acos. If removing all acos then will\n        //  ensure the filler-placeholder aco in acl to avoid complete\n        //  removal of the acl.\n        if (count($aco_id) == self::aclCountAcos($acl_title, $return_value)) {\n            //1-get the filler-placeholder aco id\n            $filler_aco_id = $gacl->get_object_id('placeholder', 'filler', 'ACO');\n            //2-add filler-placeholder aco\n            self::aclAddAcos($acl_title, $return_value, array($filler_aco_id));\n            //3-ensure filler-placeholder aco is not to be deleted\n            $safeListaco = self::removeElement($_POST[\"selection\"], $filler_aco_id);\n            //4-prepare to safely delete the acos\n            $aco_id = $safeListaco;\n        }\n\n        foreach ($aco_id as $value) {\n            $aco_data = $gacl->get_object_data($value, 'ACO');\n            $aco_section = $aco_data[0][0];\n            $aco_name = $aco_data[0][1];\n            $gacl->shift_acl($acl_id[0], null, null, null, null, array($aco_section => array($aco_name)));\n        }\n        return;\n    }\n\n    //\n    // This will return the number of aco objects\n    //  in a specified acl.\n    //   $acl_title = title of acl (string)\n    //   $return_value = return value of acl (string)\n    //\n    private static function aclCountAcos($acl_title, $return_value)\n    {\n        $gacl = self::collectGaclApiObject();\n        $acl_id = $gacl->search_acl(false, false, false, false, $acl_title, false, false, false, $return_value);\n        $acl_data = $gacl->get_acl($acl_id[0]);\n        $aco_count = 0;\n        foreach ($acl_data['aco'] as $key => $value) {\n            $aco_count = $aco_count + count($acl_data['aco'][$key]);\n        }\n        return $aco_count;\n    }\n\n    //\n    // Function to remove an element from an array\n    //\n    private static function removeElement($arr, $val)\n    {\n        $arr2 = array();\n        foreach ($arr as $value) {\n            if ($value != $val) {\n                array_push($arr2, $value);\n            }\n        }\n        return $arr2;\n    }\n\n    // This generates an HTML options list for all ACOs.\n    // The caller inserts this between <select> and </select> tags.\n    //\n    public static function genAcoHtmlOptions($default = '')\n    {\n        $acoArray = self::genAcoArray();\n        $s = '';\n        foreach ($acoArray as $section => $acos_array) {\n            $s .= \"<optgroup label='\" . xla($section) . \"'>\\n\";\n            foreach ($acos_array as $aco_array) {\n                $s .= \"<option value='\" . attr($aco_array['value']) . \"'\";\n                if ($aco_array['value'] == $default) {\n                    $s .= ' selected';\n                }\n                $s .= \">\" . xlt($aco_array['name']) . \"</option>\";\n            }\n            $s .= \"</optgroup>\";\n        }\n        return $s;\n    }\n\n\n    // Returns array of all ACOs\n    public static function genAcoArray()\n    {\n        $acoArray = array();\n        $gacl = self::collectGaclApiObject();\n        // collect and sort all aco objects\n        $list_aco_objects = $gacl->get_objects(null, 0, 'ACO');\n        ksort($list_aco_objects);\n        foreach ($list_aco_objects as $seckey => $dummy) {\n            if (empty($dummy)) {\n                continue;\n            }\n            asort($list_aco_objects[$seckey]);\n            $aco_section_data = $gacl->get_section_data($seckey, 'ACO');\n            $aco_section_title = $aco_section_data[3];\n            foreach ($list_aco_objects[$seckey] as $acokey) {\n                $aco_id = $gacl->get_object_id($seckey, $acokey, 'ACO');\n                $aco_data = $gacl->get_object_data($aco_id, 'ACO');\n                $aco_title = $aco_data[0][3];\n                $optkey = \"$seckey|$acokey\";\n                $acoArray[$aco_section_title][$aco_id]['name'] = $aco_title;\n                $acoArray[$aco_section_title][$aco_id]['value'] = $optkey;\n            }\n        }\n        return $acoArray;\n    }\n\n    // check if aro group have superuser rule\n    public static function isGroupIncludeSuperuser($aro_group_name)\n    {\n        $gacl = self::collectGaclApiObject();\n        return empty($gacl->search_acl('admin', 'super', false, false, $aro_group_name)) ? false : true;\n    }\n\n    //\n    // Returns acl listings(including return value) via xml message.\n    //   $err = error strings (array)\n    //\n    public static function aclListingsXml($err)\n    {\n        $gacl = self::collectGaclApiObject();\n\n        $message = \"<?xml version=\\\"1.0\\\"?>\\n\" .\n            \"<response>\\n\";\n        foreach (self::aclGetGroupTitleList() as $value) {\n            $acl_id = $gacl->search_acl(false, false, false, false, $value, false, false, false, false);\n            foreach ($acl_id as $value2) {\n                $acl = $gacl->get_acl($value2);\n                $ret = $acl[\"return_value\"];\n                $note = $acl[\"note\"];\n\n                // Modified 6-2009 by BM - Translate gacl group name if applicable\n                //                         Translate return value\n                //                         Translate description\n                $message .= \"\\t<acl>\\n\" .\n                    \"\\t\\t<value>\" . $value . \"</value>\\n\" .\n                    \"\\t\\t<title>\" . xl_gacl_group($value) . \"</title>\\n\" .\n                    \"\\t\\t<returnid>\" . $ret  . \"</returnid>\\n\" .\n                    \"\\t\\t<returntitle>\" . xl($ret)  . \"</returntitle>\\n\" .\n                    \"\\t\\t<note>\" . xl($note)  . \"</note>\\n\" .\n                    \"\\t</acl>\\n\";\n            }\n        }\n\n        if (isset($err)) {\n            foreach ($err as $value) {\n                $message .= \"\\t<error>\" . $value . \"</error>\\n\";\n            }\n        }\n\n        $message .= \"</response>\\n\";\n        return $message;\n    }\n\n    //\n    // Return aco listings by sections(active and inactive lists)\n    // via xml message.\n    //   $group = group title (string)\n    //   $return_value = return value (string)\n    //   $err = error strings (array)\n    //\n    public static function acoListingsXml($group, $return_value, $err)\n    {\n        $gacl = self::collectGaclApiObject();\n\n        //collect and sort all aco objects\n        $list_aco_objects = $gacl->get_objects(null, 0, 'ACO');\n        foreach ($list_aco_objects as $key => $value) {\n            asort($list_aco_objects[$key]);\n        }\n\n        //collect aco objects within the specified acl(already sorted)\n        $acl_id = $gacl->search_acl(false, false, false, false, $group, false, false, false, $return_value);\n        $acl = $gacl->get_acl($acl_id[0]);\n        $active_aco_objects = $acl[\"aco\"];\n\n        $message = \"<?xml version=\\\"1.0\\\"?>\\n\" .\n            \"<response>\\n\" .\n            \"\\t<inactive>\\n\";\n        foreach ($list_aco_objects as $key => $value) {\n            $counter = 0;\n            foreach ($list_aco_objects[$key] as $value2) {\n                if (!array_key_exists($key, $active_aco_objects) || !in_array($value2, $active_aco_objects[$key])) {\n                    if ($counter == 0) {\n                        $counter = $counter + 1;\n                        $aco_section_data = $gacl->get_section_data($key, 'ACO');\n                        $aco_section_title = $aco_section_data[3];\n\n                        // Modified 6-2009 by BM - Translate gacl aco section name\n                        $message .= \"\\t\\t<section>\\n\" .\n                            \"\\t\\t\\t<name>\" . xl($aco_section_title) . \"</name>\\n\";\n                    }\n\n                    $aco_id = $gacl->get_object_id($key, $value2, 'ACO');\n                    $aco_data = $gacl->get_object_data($aco_id, 'ACO');\n                    $aco_title = $aco_data[0][3];\n                    $message .= \"\\t\\t\\t<aco>\\n\";\n\n                    // Modified 6-2009 by BM - Translate gacl aco name\n                    $message .= \"\\t\\t\\t\\t<title>\" . xl($aco_title) . \"</title>\\n\";\n\n                    $message .= \"\\t\\t\\t\\t<id>\" . $aco_id . \"</id>\\n\";\n                    $message .= \"\\t\\t\\t</aco>\\n\";\n                }\n            }\n\n            if ($counter != 0) {\n                $message .= \"\\t\\t</section>\\n\";\n            }\n        }\n\n        $message .= \"\\t</inactive>\\n\" .\n            \"\\t<active>\\n\";\n        foreach ($active_aco_objects as $key => $value) {\n            $aco_section_data = $gacl->get_section_data($key, 'ACO');\n            $aco_section_title = $aco_section_data[3];\n\n            // Modified 6-2009 by BM - Translate gacl aco section name\n            $message .= \"\\t\\t<section>\\n\" .\n                \"\\t\\t\\t<name>\" . xl($aco_section_title) . \"</name>\\n\";\n\n            foreach ($active_aco_objects[$key] as $value2) {\n                $aco_id = $gacl->get_object_id($key, $value2, 'ACO');\n                $aco_data = $gacl->get_object_data($aco_id, 'ACO');\n                $aco_title = $aco_data[0][3];\n                $message .= \"\\t\\t\\t<aco>\\n\";\n\n                // Modified 6-2009 by BM - Translate gacl aco name\n                $message .= \"\\t\\t\\t\\t<title>\" . xl($aco_title) . \"</title>\\n\";\n\n                $message .= \"\\t\\t\\t\\t<id>\" . $aco_id . \"</id>\\n\";\n                $message .= \"\\t\\t\\t</aco>\\n\";\n            }\n\n            $message .= \"\\t\\t</section>\\n\";\n        }\n\n        $message .= \"\\t</active>\\n\";\n        if (isset($err)) {\n            foreach ($err as $value) {\n                $message .= \"\\t<error>\" . $value . \"</error>\\n\";\n            }\n        }\n\n        $message .= \"</response>\\n\";\n        return $message;\n    }\n\n    //\n    // Returns listing of all possible return values via xml message.\n    //   $err = error strings (array)\n    //\n    public static function returnValuesXml($err)\n    {\n        $gacl = self::collectGaclApiObject();\n        $returns = array();\n\n        $message = \"<?xml version=\\\"1.0\\\"?>\\n\" .\n            \"<response>\\n\";\n        foreach (self::aclGetGroupTitleList() as $value) {\n            $acl_id = $gacl->search_acl(false, false, false, false, $value, false, false, false, false);\n            foreach ($acl_id as $value2) {\n                $acl = $gacl->get_acl($value2);\n                $ret = $acl[\"return_value\"];\n                if (!in_array($ret, $returns)) {\n                    // Modified 6-2009 by BM - Translate return value\n                    $message .= \"\\t<return>\\n\";\n                    $message .= \"\\t\\t<returnid>\" . $ret  . \"</returnid>\\n\";\n                    $message .= \"\\t\\t<returntitle>\" . xl($ret)  . \"</returntitle>\\n\";\n                    $message .= \"\\t</return>\\n\";\n\n                    array_push($returns, $ret);\n                }\n            }\n        }\n\n        if (isset($err)) {\n            foreach ($err as $value) {\n                $message .= \"\\t<error>\" . $value . \"</error>\\n\";\n            }\n        }\n\n        $message .= \"</response>\\n\";\n        return $message;\n    }\n\n    /**\n     * Returns the current access control version.\n     *\n     * @return  integer  The current access control version.\n     */\n    public static function getAclVersion()\n    {\n        $versionService = new VersionService();\n        $version = $versionService->fetch();\n        return $version['v_acl'];\n    }\n\n    /**\n     * Records the access control version.\n     *\n     * @param  integer  $acl_version  access control version\n     */\n    public static function setAclVersion($acl_version)\n    {\n        $versionService = new VersionService();\n        $version = $versionService->fetch();\n        $version['v_acl'] = $acl_version;\n        $versionService->update($version);\n        return;\n    }\n\n    /**\n     * Function will return an array that contains the ACL ID number. It will also check to ensure\n     * the ACL exist and is not duplicated.\n     *\n     * @param  string  $title         Title of group.\n     * @param  string  $return_value  What the acl returns), usually 'write' or 'addonly'\n     * @return array                  An array that contains the ACL ID number.\n     */\n    public static function getAclIdNumber($title, $return_value)\n    {\n        $gacl = self::collectGaclApiObject();\n        $temp_acl_id_array  = $gacl->search_acl(false, false, false, false, $title, false, false, false, $return_value);\n        switch (count($temp_acl_id_array)) {\n            case 0:\n                echo \"<B>ERROR</B>, '$title' group '$return_value' ACL does not exist.</BR>\";\n                break;\n            case 1:\n                echo \"'$title' group '$return_value' ACL is present.</BR>\";\n                break;\n            default:\n                echo \"<B>ERROR</B>, Multiple '$title' group '$return_value' ACLs are present.</BR>\";\n                break;\n        }\n\n        return $temp_acl_id_array;\n    }\n\n    /**\n     * Function will add an ACL (if doesn't already exist).\n     * It will also place the acl in the group, or will CREATE a new group.\n     * It will return the ID number of the acl (created or old)\n     *\n     * @param   string  $title         Title of group.\n     * @param   string  $name          name of acl\n     * @param   string  $return_value  What the acl returns, usually 'write' or 'addonly'\n     * @param   string  $note          description of acl\n     * @return  array                  ID number of the acl (created or old)\n     */\n    public static function addNewACL($title, $name, $return_value, $note)\n    {\n        $gacl = self::collectGaclApiObject();\n        $temp_acl_id_array  = $gacl->search_acl(false, false, false, false, $title, false, false, false, $return_value);\n        switch (count($temp_acl_id_array)) {\n            case 0:\n                $group_id = $gacl->get_group_id($name, $title, 'ARO');\n                if ($group_id) {\n                    //group already exist, so just create acl\n                    $temp_acl_id = $gacl->add_acl(array(\"placeholder\" => array(\"filler\")), null, array($group_id), null, null, 1, 1, $return_value, $note);\n                    if ($temp_acl_id) {\n                        echo \"The '$title' group already exist.</BR>\";\n                        echo \"The '$title' group '$return_value' ACL has been successfully added.</BR>\";\n                        $temp_acl_id_array = array($temp_acl_id);\n                    } else {\n                        echo \"The '$title' group already exist.</BR>\";\n                        echo \"<B>ERROR</B>, Unable to create the '$title' group '$return_value' ACL.</BR>\";\n                    }\n                } else {\n                    //create group, then create acl\n                    $parent_id = $gacl->get_root_group_id();\n                    $aro_id = $gacl->add_group($name, $title, $parent_id, 'ARO');\n                    $temp_acl_id = $gacl->add_acl(array(\"placeholder\" => array(\"filler\")), null, array($aro_id), null, null, 1, 1, $return_value, $note);\n                    if ($aro_id) {\n                        echo \"The '$title' group has been successfully added.</BR>\";\n                    } else {\n                        echo \"<B>ERROR</B>, Unable to create the '$title' group.</BR>\";\n                    }\n\n                    if ($temp_acl_id) {\n                        echo \"The '$title' group '$return_value' ACL has been successfully added.</BR>\";\n                        $temp_acl_id_array = array($temp_acl_id);\n                    } else {\n                        echo \"<B>ERROR</B>, Unable to create the '$title' group '$return_value' ACL.</BR>\";\n                    }\n                }\n                break;\n            case 1:\n                echo \"'$title' group '$return_value' ACL already exist.</BR>\";\n                break;\n\n            default:\n                echo \"<B>ERROR</B>, Multiple '$title' group '$return_value' ACLs are present.</BR>\";\n                break;\n        }\n\n        return $temp_acl_id_array;\n    }\n\n    /**\n     * Function to add an object section.\n     * It will check to ensure the object section doesn't already exist.\n     *\n     * @param  string  $name   identifier of section\n     * @param  string  $title  Title o object.\n     */\n    public static function addObjectSectionAcl($name, $title)\n    {\n        $gacl = self::collectGaclApiObject();\n        if ($gacl->get_object_section_section_id($title, $name, 'ACO')) {\n            echo \"The '$title' object section already exist.</BR>\";\n        } else {\n            $tmp_boolean = $gacl->add_object_section($title, $name, 10, 0, 'ACO');\n            if ($tmp_boolean) {\n                echo \"The '$title' object section has been successfully added.</BR>\";\n            } else {\n                echo \"<B>ERROR</B>,unable to create the '$title' object section.</BR>\";\n            }\n        }\n\n        return;\n    }\n\n\n    /**\n     * Function to add an object.\n     * It will check to ensure the object doesn't already exist.\n     *\n     * @param  string  $section_name   Identifier of section\n     * @param  string  $section_title  Title of section\n     * @param  string  $object_name    Identifier of object\n     * @param  string  $object_title   Title of object\n     */\n    public static function addObjectAcl($section_name, $section_title, $object_name, $object_title)\n    {\n        $gacl = self::collectGaclApiObject();\n        if ($gacl->get_object_id($section_name, $object_name, 'ACO')) {\n            echo \"The '$object_title' object in the '$section_title' section already exist.</BR>\";\n        } else {\n            $tmp_boolean = $gacl->add_object($section_name, $object_title, $object_name, 10, 0, 'ACO');\n            if ($tmp_boolean) {\n                echo \"The '$object_title' object in the '$section_title' section has been successfully added.</BR>\";\n            } else {\n                echo \"<B>ERROR</B>,unable to create the '$object_title' object in the '$section_title' section.</BR>\";\n            }\n        }\n\n        return;\n    }\n\n    /**\n     * Function to add an object and set the 'order' variable.\n     * It will check to ensure the object doesn't already exist.\n     *\n     * @param  string  $section_name   Identifier of section\n     * @param  string  $section_title  Title of section\n     * @param  string  $object_name    Identifier of object\n     * @param  string  $object_title   Title of object\n     * @param  string  $order_number   number to determine order in list. used in sensitivities to order the choices in openemr\n     */\n    public static function addObjectAclWithOrder($section_name, $section_title, $object_name, $object_title, $order_number)\n    {\n        $gacl = self::collectGaclApiObject();\n        if ($gacl->get_object_id($section_name, $object_name, 'ACO')) {\n            echo \"The '$object_title' object in the '$section_title' section already exist.</BR>\";\n        } else {\n            $tmp_boolean = $gacl->add_object($section_name, $object_title, $object_name, $order_number, 0, 'ACO');\n            if ($tmp_boolean) {\n                echo \"The '$object_title' object in the '$section_title' section has been successfully added.</BR>\";\n            } else {\n                echo \"<B>ERROR</B>,unable to create the '$object_title' object in the '$section_title' section.</BR>\";\n            }\n        }\n\n        return;\n    }\n\n    /**\n     * Function to edit an object and set the 'order' variable.\n     * It will check to ensure the object doesn't already exist, and hasn't been upgraded yet.\n     *\n     * @param  string  $section_name   Identifier of section\n     * @param  string  $section_title  Title of section\n     * @param  string  $object_name    Identifier of object\n     * @param  string  $object_title   Title of object\n     * @param  string  $order_number   number to determine order in list. used in sensitivities to order the choices in openemr\n     */\n    public static function editObjectAcl($section_name, $section_title, $object_name, $object_title, $order_number)\n    {\n        $gacl = self::collectGaclApiObject();\n        $tmp_objectID = $gacl->get_object_id($section_name, $object_name, 'ACO');\n        if ($tmp_objectID) {\n            $tmp_object = $gacl->get_object_data($tmp_objectID, 'ACO');\n            if (\n                $tmp_object[0][2] ==  $order_number &&\n                $tmp_object[0][0] ==  $section_name &&\n                $tmp_object[0][1] ==  $object_name &&\n                $tmp_object[0][3] ==  $object_title\n            ) {\n                echo \"The '$object_title' object in the '$section_title' section has already been updated.</BR>\";\n            } else {\n                $tmp_boolean = $gacl->edit_object($tmp_objectID, $section_name, $object_title, $object_name, $order_number, 0, 'ACO');\n                if ($tmp_boolean) {\n                    echo \"The '$object_title' object in the '$section_title' section has been successfully updated.</BR>\";\n                } else {\n                    echo \"<B>ERROR</B>,unable to update the '$object_title' object in the '$section_title' section.</BR>\";\n                }\n            }\n        } else {\n            echo \"<B>ERROR</B>, the '$object_title' object in the '$section_title' section does not exist.</BR>\";\n        }\n\n        return;\n    }\n\n    /**\n     * Update the ACL.\n     * It will check to ensure the ACL hasn't already been updated.\n     *\n     * @param  array   $array_acl_id_number   Array containing hopefully one element, which is an integer, and is identifier of acl to be updated.\n     * @param  string  $group_title           Title of group.\n     * @param  string  $object_section_name   Identifier of section\n     * @param  string  $object_section_title  Title of section\n     * @param  string  $object_name           Identifier of object\n     * @param  string  $object_title          Title of object\n     * @param  string  $acl_return_value      What the acl returns (string), usually 'write', 'addonly', 'wsome' or 'view'\n     */\n    public static function updateAcl($array_acl_id_number, $group_title, $section_name, $section_title, $object_name, $object_title, $return_value)\n    {\n        $gacl = self::collectGaclApiObject();\n        $tmp_array = $gacl->search_acl($section_name, $object_name, false, false, $group_title, false, false, false, $return_value);\n        switch (count($tmp_array)) {\n            case 0:\n                $tmp_boolean = @$gacl->append_acl($array_acl_id_number[0], null, null, null, null, array($section_name => array($object_name)));\n                if ($tmp_boolean) {\n                    echo \"Successfully placed the '$object_title' object of the '$section_title' section into the '$group_title' group '$return_value' ACL.</BR>\";\n                } else {\n                    echo \"<B>ERROR</B>,unable to place the '$object_title' object of the '$section_title' section into the '$group_title' group '$return_value' ACL.</BR>\";\n                }\n                break;\n            case 1:\n                echo \"The '$object_title' object of the '$section_title' section is already found in the '$group_title' group '$return_value' ACL.</BR>\";\n                break;\n            default:\n                echo \"<B>ERROR</B>, Multiple '$group_title' group '$return_value' ACLs with the '$object_title' object of the '$section_title' section are present.</BR>\";\n                break;\n        }\n\n        return;\n    }\n\n    /**\n     * Update the provided array of ACOs that the designated group has permission for.\n     * This is an array keyed on ACO section ID with values that are arrays keyed on ACO ID\n     * with values that are arrays keyed on return value.\n     *\n     * @param  string  $group_name            Name of group\n     * @param  array   $perms                 The array to update\n     */\n    public static function getGroupPermissions($group_name, &$perms)\n    {\n        $gacl = self::collectGaclApiObject();\n        $acl_ids = $gacl->search_acl(false, false, false, false, $group_name, false, false, false, false);\n        foreach ($acl_ids as $acl_id) {\n            $acl = $gacl->get_acl($acl_id);\n            $ret = $acl['return_value'];\n            foreach ($acl['aco'] as $sectionid => $acos) {\n                if ($sectionid != 'placeholder') {\n                    foreach ($acos as $aco) {\n                        $perms[$sectionid][$aco][$ret] = 1;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Return an array of all ACOs that the designated user has permission for.\n     * This is an array keyed on ACO section ID with values that are arrays keyed on ACO ID\n     * with values that are arrays keyed on return value.\n     *\n     * @param  string  $username              Name of user\n     * @return array                          The array of ACOs\n     */\n    public static function getUserPermissions($username = '')\n    {\n        if (!$username) {\n            $username = $_SESSION['authUser'];\n        }\n        $gacl = self::collectGaclApiObject();\n        $perms = array();\n        $username_acl_groups = self::aclGetGroupTitles($username); // array of roles for the user\n        if ($username_acl_groups) {\n            foreach ($username_acl_groups as $group_name) {\n                self::getGroupPermissions($group_name, $perms);\n            }\n        }\n        return $perms;\n    }\n\n    /**\n     * Test if the logged-in user has all of the permissions of the specified user.\n     *\n     * @param  string  $username              Name of user\n     * @return boolean\n     */\n    public static function iHavePermissionsOf($username)\n    {\n        $perms = self::getUserPermissions($username);\n        $myperms = self::getUserPermissions();\n        foreach ($perms as $sectionid => $acos) {\n            foreach ($acos as $aco => $rets) {\n                foreach ($rets as $ret => $dummy) {\n                    // Next test is just to speed things up.\n                    if (empty($myperms[$sectionid][$aco][$ret]) && empty($myperms[$sectionid][$aco]['write'])) {\n                        if (!aclMain::aclCheckCore($sectionid, $aco, '', $ret)) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Test if the logged-in user has all of the permissions of the specified group.\n     *\n     * @param  string  $group_name            Name of group\n     * @return boolean\n     */\n    public static function iHaveGroupPermissions($group_name)\n    {\n        $perms = array();\n        self::getGroupPermissions($group_name, $perms);\n        $myperms = self::getUserPermissions();\n        foreach ($perms as $sectionid => $acos) {\n            foreach ($acos as $aco => $rets) {\n                foreach ($rets as $ret => $dummy) {\n                    // Next test is just to speed things up.\n                    if (empty($myperms[$sectionid][$aco][$ret]) && empty($myperms[$sectionid][$aco]['write'])) {\n                        if (!aclMain::aclCheckCore($sectionid, $aco, '', $ret)) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}\n", "<?php\n/**\n * GaclApi class - phpGACL extended API Class\n *\n * Original code from phpGACL - Generic Access Control List\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Mike Benoit <ipso@snappymail.ca>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2002-2003 Mike Benoit <ipso@snappymail.ca>\n * @copyright Copyright (c) 2020 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html GNU Lesser General Public License 2.1\n */\n\n\nnamespace OpenEMR\\Gacl;\n\nclass GaclApi extends Gacl {\n\n\t/*\n\t *\n\t * Misc helper functions.\n\t *\n\t */\n\n\t/**\n\t * showarray()\n\t *\n\t * Dump all contents of an array in HTML (kinda)\n\t *\n\t * @param array\n\t *\n\t */\n\tfunction showarray($array) {\n\t\techo \"<br /><pre>\\n\";\n\t\tvar_dump($array);\n\t\techo \"</pre><br />\\n\";\n\t}\n\n\t/**\n\t * count_all()\n\t *\n\t * Recursively counts elements in an array and sub-arrays.\n\t *\n\t * This is different from count($arg, COUNT_RECURSIVE)\n\t * in PHP >= 4.2.0, which includes sub-arrays in the count.\n\t *\n\t * @return int The returned count is a count of all scalar elements found.\n\t *\n\t * @param array Array to count\n\t */\n\tfunction count_all($arg = NULL) {\n\t\tswitch (TRUE) {\n\t\t\tcase is_scalar($arg):\n\t\t\tcase is_object($arg):\n\t\t\t\t// single object\n\t\t\t\treturn 1;\n\t\t\tcase is_array($arg):\n\t\t\t\t// call recursively for all elements of $arg\n\t\t\t\t$count = 0;\n\t\t\t\tforeach ($arg as $val) {\n\t\t\t\t\t$count += $this->count_all($val);\n\t\t\t\t}\n\t\t\t\treturn $count;\n\t\t}\n\t\treturn FALSE;\n\t}\n\n\t/**\n\t * get_version()\n\t *\n\t * Grabs phpGACL version from the database.\n\t *\n\t * @return string Version of phpGACL\n\t */\n\tfunction get_version() {\n\t\t$query = \"select value from \".$this->_db_table_prefix.\"phpgacl where name = 'version'\";\n\t\t$version = $this->db->GetOne($query);\n\n\t\treturn $version;\n\t}\n\n\t/**\n\t * get_schema_version()\n\t *\n\t * Grabs phpGACL schema version from the database.\n\t *\n\t * @return string Schema Version\n\t */\n\tfunction get_schema_version() {\n\t\t$query = \"select value from \".$this->_db_table_prefix.\"phpgacl where name = 'schema_version'\";\n\t\t$version = $this->db->GetOne($query);\n\n\t\treturn $version;\n\t}\n\n\t/*\n\t *\n\t * ACL\n\t *\n\t */\n\n\t/**\n\t * consolidated_edit_acl()\n\t *\n\t * Add's an ACL but checks to see if it can consolidate it with another one first.\n\t *\n\t * This ONLY works with ACO's and ARO's. Groups, and AXO are excluded.\n\t * As well this function is designed for handling ACLs with return values,\n\t * and consolidating on the return_value, in hopes of keeping the ACL count to a minimum.\n\t *\n\t * A return value of false must _always_ be handled outside this function.\n\t * As this function will remove AROs from ACLs and return false, in most cases\n\t * you will need to a create a completely new ACL on a false return.\n\t *\n\t * @return bool Special boolean return value. See note.\n\t *\n\t * @param string ACO Section Value\n\t * @param string ACO Value\n\t * @param string ARO Section Value\n\t * @param string ARO Value\n\t * @param string Return Value of ACL\n\t */\n\tfunction consolidated_edit_acl($aco_section_value, $aco_value, $aro_section_value, $aro_value, $return_value) {\n\n\t\t$this->debug_text(\"consolidated_edit_acl(): ACO Section Value: $aco_section_value ACO Value: $aco_value ARO Section Value: $aro_section_value ARO Value: $aro_value Return Value: $return_value\");\n\n\t\t$acl_ids = array();\n\n\t\tif (empty($aco_section_value) ) {\n\t\t\t$this->debug_text(\"consolidated_edit_acl(): ACO Section Value ($aco_section_value) is empty, this is required!\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($aco_value) ) {\n\t\t\t$this->debug_text(\"consolidated_edit_acl(): ACO Value ($aco_value) is empty, this is required!\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($aro_section_value) ) {\n\t\t\t$this->debug_text(\"consolidated_edit_acl(): ARO Section Value ($aro_section_value) is empty, this is required!\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($aro_value) ) {\n\t\t\t$this->debug_text(\"consolidated_edit_acl(): ARO Value ($aro_value) is empty, this is required!\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($return_value) ) {\n\t\t\t$this->debug_text(\"consolidated_edit_acl(): Return Value ($return_value) is empty, this is required!\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//See if a current ACL exists with the current objects, excluding return value\n\t\t$current_acl_ids = $this->search_acl($aco_section_value, $aco_value, $aro_section_value, $aro_value, FALSE, FALSE, FALSE, FALSE, FALSE);\n\t\t//showarray($current_acl_ids);\n\n\t\tif (is_array($current_acl_ids)) {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Found current ACL_IDs, counting ACOs\");\n\n\t\t\tforeach ($current_acl_ids as $current_acl_id) {\n\t\t\t\t//Check to make sure these ACLs only have a single ACO mapped to them.\n\t\t\t\t$current_acl_array = &$this->get_acl($current_acl_id);\n\n\t\t\t\t//showarray($current_acl_array);\n\t\t\t\t$this->debug_text(\"add_consolidated_acl(): Current Count: \".$this->count_all($current_acl_array['aco']).\"\");\n\n\t\t\t\tif ( $this->count_all($current_acl_array['aco']) == 1) {\n\t\t\t\t\t$this->debug_text(\"add_consolidated_acl(): ACL ID: $current_acl_id has 1 ACO.\");\n\n\t\t\t\t\t//Test to see if the return values match, if they do, no need removing or appending ARO. Just return true.\n\t\t\t\t\tif ($current_acl_array['return_value'] == $return_value) {\n\t\t\t\t\t\t$this->debug_text(\"add_consolidated_acl(): ACL ID: $current_acl_id has 1 ACO, and the same return value. No need to modify.\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\t$acl_ids[] = $current_acl_id;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t//showarray($acl_ids);\n\t\t$acl_ids_count = count($acl_ids);\n\n\t\t//If acl_id's turns up more then one ACL, lets remove the ARO from all of them in hopes to\n\t\t//eliminate any conflicts.\n\t\tif (is_array($acl_ids) AND $acl_ids_count > 0) {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Removing specified ARO from existing ACL.\");\n\n\t\t\tforeach ($acl_ids as $acl_id) {\n\t\t\t\t//Remove ARO from current ACLs, so we don't create conflicting ACLs later on.\n\t\t\t\tif (!$this->shift_acl($acl_id, array($aro_section_value => array($aro_value)) ) ) {\n\t\t\t\t\t$this->debug_text(\"add_consolidated_acl(): Error removing specified ARO from ACL ID: $acl_id\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Didn't find any current ACLs with a single ACO. \");\n\t\t}\n\t\t//unset($acl_ids);\n    $acl_ids = array();\n\t\tunset($acl_ids_count);\n\n\t\t//At this point there should be no conflicting ACLs, searching for an existing ACL with the new values.\n\t\t$new_acl_ids = $this->search_acl($aco_section_value, $aco_value, FALSE, FALSE, NULL, NULL, NULL, NULL, $return_value);\n\t\t$new_acl_count = count($new_acl_ids);\n\t\t//showarray($new_acl_ids);\n\n\t\tif (is_array($new_acl_ids)) {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Found new ACL_IDs, counting ACOs\");\n\n\t\t\tforeach ($new_acl_ids as $new_acl_id) {\n\t\t\t\t//Check to make sure these ACLs only have a single ACO mapped to them.\n\t\t\t\t$new_acl_array = &$this->get_acl($new_acl_id);\n\t\t\t\t//showarray($new_acl_array);\n\t\t\t\t$this->debug_text(\"add_consolidated_acl(): New Count: \".$this->count_all($new_acl_array['aco']).\"\");\n\t\t\t\tif ( $this->count_all($new_acl_array['aco']) == 1) {\n\n\t\t\t\t\t$this->debug_text(\"add_consolidated_acl(): ACL ID: $new_acl_id has 1 ACO, append should be able to take place.\");\n\t\t\t\t\t$acl_ids[] = $new_acl_id;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t//showarray($acl_ids);\n\t\t$acl_ids_count = count($acl_ids);\n\n\t\tif (is_array($acl_ids) AND $acl_ids_count == 1) {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Appending specified ARO to existing ACL.\");\n\n\t\t\t$acl_id=$acl_ids[0];\n\n\t\t\tif (!$this->append_acl($acl_id, array($aro_section_value => array($aro_value)) ) ) {\n\t\t\t\t$this->debug_text(\"add_consolidated_acl(): Error appending specified ARO to ACL ID: $acl_id\");\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Hot damn, ACL consolidated!\");\n\t\t\treturn true;\n\t\t} elseif($acl_ids_count > 1) {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Found more then one ACL with a single ACO. Possible conflicting ACLs.\");\n\t\t\treturn false;\n\t\t} elseif ($acl_ids_count == 0) {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): No existing ACLs found, create a new one.\");\n\n\t\t\tif (!$this->add_acl(\tarray( $aco_section_value => array($aco_value) ),\n\t\t\t\t\t\t\t\t\tarray( $aro_section_value => array($aro_value) ),\n\t\t\t\t\t\t\t\t\tNULL,\n\t\t\t\t\t\t\t\t\tNULL,\n\t\t\t\t\t\t\t\t\tNULL,\n\t\t\t\t\t\t\t\t\tTRUE,\n\t\t\t\t\t\t\t\t\tTRUE,\n\t\t\t\t\t\t\t\t\t$return_value,\n\t\t\t\t\t\t\t\t\tNULL)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t$this->debug_text(\"add_consolidated_acl(): Error adding new ACL for ACO Section: $aco_section_value ACO Value: $aco_value Return Value: $return_value\");\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$this->debug_text(\"add_consolidated_acl(): ADD_ACL() successfull, returning True.\");\n\t\t\treturn true;\n\t\t}\n\n\t\t$this->debug_text(\"add_consolidated_acl(): Returning false.\");\n\t\treturn false;\n\t}\n\n\t/**\n\t * search_acl()\n\t *\n\t * Searches for ACL's with specified objects mapped to them.\n\t *\n\t * NULL values are included in the search, if you want to ignore\n\t * for instance aro_groups use FALSE instead of NULL.\n\t *\n\t * @return array containing ACL IDs if search is successful\n\t *\n\t * @param string ACO Section Value\n\t * @param string ACO Value\n\t * @param string ARO Section Value\n\t * @param string ARO Value\n\t * @param string ARO Group Name\n\t * @param string AXO Section Value\n\t * @param string AXO Value\n\t * @param string AXO Group Name\n\t * @param string Return Value\n\t */\n\tfunction search_acl($aco_section_value=NULL, $aco_value=NULL, $aro_section_value=NULL, $aro_value=NULL, $aro_group_name=NULL, $axo_section_value=NULL, $axo_value=NULL, $axo_group_name=NULL, $return_value=NULL) {\n\t\t$this->debug_text(\"search_acl(): aco_section_value: $aco_section_value aco_value: $aco_value, aro_section_value: $aro_section_value, aro_value: $aro_value, aro_group_name: $aro_group_name, axo_section_value: $axo_section_value, axo_value: $axo_value, axo_group_name: $axo_group_name, return_value: $return_value\");\n\n\t\t$query = '\n\t\t\t\tSELECT\t\ta.id\n\t\t\t\tFROM\t\t'. $this->_db_table_prefix .'acl a';\n\n\t\t$where_query = array();\n\n\t\t// ACO\n\t\tif ($aco_section_value !== FALSE AND $aco_value !== FALSE) {\n\t\t\t$query .= '\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aco_map ac ON a.id=ac.acl_id';\n\n\t\t\tif ($aco_section_value == NULL AND $aco_value == NULL) {\n\t\t\t\t$where_query[] = '(ac.section_value IS NULL AND ac.value IS NULL)';\n\t\t\t} else {\n\t\t\t\t$where_query[] = '(ac.section_value='. $this->db->quote($aco_section_value) .' AND ac.value='. $this->db->quote($aco_value) .')';\n\t\t\t}\n\t\t}\n\n\t\t// ARO\n\t\tif ($aro_section_value !== FALSE AND $aro_value !== FALSE) {\n\t\t\t$query .= '\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_map ar ON a.id=ar.acl_id';\n\n\t\t\tif ($aro_section_value == NULL AND $aro_value == NULL) {\n\t\t\t\t$where_query[] = '(ar.section_value IS NULL AND ar.value IS NULL)';\n\t\t\t} else {\n\t\t\t\t$where_query[] = '(ar.section_value='. $this->db->quote($aro_section_value) .' AND ar.value='. $this->db->quote($aro_value) .')';\n\t\t\t}\n\t\t}\n\n\t\t// AXO\n\t\tif ($axo_section_value !== FALSE AND $axo_value !== FALSE) {\n\t\t\t$query .= '\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_map ax ON a.id=ax.acl_id';\n\n\t\t\tif ($axo_section_value == NULL AND $axo_value == NULL) {\n\t\t\t\t$where_query[] = '(ax.section_value IS NULL AND ax.value IS NULL)';\n\t\t\t} else {\n\t\t\t\t$where_query[] = '(ax.section_value='. $this->db->quote($axo_section_value) .' AND ax.value='. $this->db->quote($axo_value) .')';\n\t\t\t}\n\t\t}\n\n\t\t// ARO Group\n\t\tif ($aro_group_name !== FALSE) {\n\t\t\t$query .= '\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_groups_map arg ON a.id=arg.acl_id\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_groups rg ON arg.group_id=rg.id';\n\n\t\t\tif ($aro_group_name == NULL) {\n\t\t\t\t$where_query[] = '(rg.name IS NULL)';\n\t\t\t} else {\n\t\t\t\t$where_query[] = '(rg.name='. $this->db->quote($aro_group_name) .')';\n\t\t\t}\n\t\t}\n\n\t\t// AXO Group\n\t\tif ($axo_group_name !== FALSE) {\n\t\t\t$query .= '\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_groups_map axg ON a.id=axg.acl_id\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_groups xg ON axg.group_id=xg.id';\n\n\t\t\tif ($axo_group_name == NULL) {\n\t\t\t\t$where_query[] = '(xg.name IS NULL)';\n\t\t\t} else {\n\t\t\t\t$where_query[] = '(xg.name='. $this->db->quote($axo_group_name) .')';\n\t\t\t}\n\t\t}\n\t\tif ($return_value != FALSE) {\n\t\t\tif ($return_value == NULL) {\n\t\t\t\t$where_query[] = '(a.return_value IS NULL)';\n\t\t\t} else {\n\t\t\t\t$where_query[] = '(a.return_value='. $this->db->quote($return_value) .')';\n\t\t\t}\n\t\t}\n\n\t\tif (count($where_query) > 0) {\n\t\t\t$query .= '\n\t\t\t\tWHERE\t\t'. implode (' AND ', $where_query);\n\t\t}\n\n\t\treturn $this->db->GetCol($query);\n\t}\n\n\t/**\n\t * append_acl()\n\t *\n\t * Appends objects on to a specific ACL.\n\t *\n\t * @return bool TRUE if successful, FALSE otherwise.\n\t *\n\t * @param int ACL ID #\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t */\n\tfunction append_acl($acl_id, $aro_array=NULL, $aro_group_ids=NULL, $axo_array=NULL, $axo_group_ids=NULL, $aco_array=NULL) {\n\t\t$this->debug_text(\"append_acl(): ACL_ID: $acl_id\");\n\n\t\t$update = 0;\n\n\t\tif (empty($acl_id)) {\n\t\t\t$this->debug_text(\"append_acl(): No ACL_ID specified! ACL_ID: $acl_id\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Grab ACL data.\n\t\t$acl_array = &$this->get_acl($acl_id);\n\n\t\t//Append each object type seperately.\n\t\tif (is_array($aro_array) AND count($aro_array) > 0) {\n\t\t\t$this->debug_text(\"append_acl(): Appending ARO's\");\n\n            foreach ($aro_array as $aro_section_value => $aro_value_array) {\n\t\t\t\tforeach ($aro_value_array as $aro_value) {\n\t\t\t\t\tif ( count($acl_array['aro'][$aro_section_value]) != 0 ) {\n\t\t\t\t\t\tif (!in_array($aro_value, $acl_array['aro'][$aro_section_value])) {\n\t\t\t\t\t\t\t$this->debug_text(\"append_acl(): ARO Section Value: $aro_section_value ARO VALUE: $aro_value\");\n\t\t\t\t\t\t\t$acl_array['aro'][$aro_section_value][] = $aro_value;\n\t\t\t\t\t\t\t$update=1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->debug_text(\"append_acl(): Duplicate ARO, ignoring... \");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { //Array is empty so add this aro value.\n\t\t\t\t\t\t$acl_array['aro'][$aro_section_value][] = $aro_value;\n\t\t\t\t\t\t$update = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($aro_group_ids) AND count($aro_group_ids) > 0) {\n\t\t\t$this->debug_text(\"append_acl(): Appending ARO_GROUP_ID's\");\n\n\t\t\tforeach ($aro_group_ids as $aro_group_id) {\n\t\t\t\tif (!is_array($acl_array['aro_groups']) OR !in_array($aro_group_id, $acl_array['aro_groups'])) {\n\t\t\t\t\t$this->debug_text(\"append_acl(): ARO Group ID: $aro_group_id\");\n\t\t\t\t\t$acl_array['aro_groups'][] = $aro_group_id;\n\t\t\t\t\t$update = 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->debug_text(\"append_acl(): Duplicate ARO_Group_ID, ignoring... \");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($axo_array) AND count($axo_array) > 0) {\n\t\t\t$this->debug_text(\"append_acl(): Appending AXO's\");\n\n\t\t\tforeach($axo_array as $axo_section_value => $axo_value_array) {\n\t\t\t\tforeach ($axo_value_array as $axo_value) {\n\t\t\t\t\tif (!in_array($axo_value, $acl_array['axo'][$axo_section_value])) {\n\t\t\t\t\t\t$this->debug_text(\"append_acl(): AXO Section Value: $axo_section_value AXO VALUE: $axo_value\");\n\t\t\t\t\t\t$acl_array['axo'][$axo_section_value][] = $axo_value;\n\t\t\t\t\t\t$update = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->debug_text(\"append_acl(): Duplicate AXO, ignoring... \");\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($axo_group_ids) AND count($axo_group_ids) > 0) {\n\t\t\t$this->debug_text(\"append_acl(): Appending AXO_GROUP_ID's\");\n\t\t\tforeach ($axo_group_ids as $axo_group_id) {\n\t\t\t\tif (!is_array($acl_array['axo_groups']) OR !in_array($axo_group_id, $acl_array['axo_groups'])) {\n\t\t\t\t\t$this->debug_text(\"append_acl(): AXO Group ID: $axo_group_id\");\n\t\t\t\t\t$acl_array['axo_groups'][] = $axo_group_id;\n\t\t\t\t\t$update = 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->debug_text(\"append_acl(): Duplicate ARO_Group_ID, ignoring... \");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($aco_array) AND count($aco_array) > 0) {\n\t\t\t$this->debug_text(\"append_acl(): Appending ACO's\");\n\n            foreach ($aco_array as $aco_section_value => $aco_value_array) {\n\t\t\t\tforeach ($aco_value_array as $aco_value) {\n\t\t\t\t\tif (empty($acl_array['aco'][$aco_section_value]) || !is_array($acl_array['aco'][$aco_section_value]) || !in_array($aco_value, $acl_array['aco'][$aco_section_value])) {\n\t\t\t\t\t\t$this->debug_text(\"append_acl(): ACO Section Value: $aco_section_value ACO VALUE: $aco_value\");\n\t\t\t\t\t\t$acl_array['aco'][$aco_section_value][] = $aco_value;\n\t\t\t\t\t\t$update = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->debug_text(\"append_acl(): Duplicate ACO, ignoring... \");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($update == 1) {\n\t\t\t$this->debug_text(\"append_acl(): Update flag set, updating ACL.\");\n\t\t\t//function edit_acl($acl_id, $aco_array, $aro_array, $aro_group_ids=NULL, $axo_array=NULL, $axo_group_ids=NULL, $allow=1, $enabled=1, $return_value=NULL, $note=NULL) {\n\t\t\treturn $this->edit_acl($acl_id, $acl_array['aco'], $acl_array['aro'], $acl_array['aro_groups'], $acl_array['axo'], $acl_array['axo_groups'], $acl_array['allow'], $acl_array['enabled'], $acl_array['return_value'], $acl_array['note']);\n\t\t}\n\n\t\t//Return true if everything is duplicate and no ACL id updated.\n\t\t$this->debug_text(\"append_acl(): Update flag not set, NOT updating ACL.\");\n\t\treturn true;\n\t}\n\n\t/**\n\t * shift_acl()\n\t *\n\t * Opposite of append_acl(). Removes objects from a specific ACL. (named after PHP's array_shift())\n\t *\n\t * @return bool TRUE if successful, FALSE otherwise.\n\t *\n\t * @param int ACL ID #\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t */\n\tfunction shift_acl($acl_id, $aro_array=NULL, $aro_group_ids=NULL, $axo_array=NULL, $axo_group_ids=NULL, $aco_array=NULL) {\n\t\t$this->debug_text(\"shift_acl(): ACL_ID: $acl_id\");\n\n\t\t$update = 0;\n\n\t\tif (empty($acl_id)) {\n\t\t\t$this->debug_text(\"shift_acl(): No ACL_ID specified! ACL_ID: $acl_id\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Grab ACL data.\n\t\t$acl_array = &$this->get_acl($acl_id);\n\n\t\t//showarray($acl_array);\n\t\t//Remove each object type seperately.\n\t\tif (is_array($aro_array) AND count($aro_array) > 0) {\n\t\t\t$this->debug_text(\"shift_acl(): Removing ARO's\");\n\n\t\t\tforeach($aro_array as $aro_section_value => $aro_value_array) {\n\t\t\t\tforeach ($aro_value_array as $aro_value) {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): ARO Section Value: $aro_section_value ARO VALUE: $aro_value\");\n\n\t\t\t\t\t//Only search if aro array contains data.\n\t\t\t\t\tif ( count($acl_array['aro'][$aro_section_value]) != 0 ) {\n\t\t\t\t\t\t$aro_key = array_search($aro_value, $acl_array['aro'][$aro_section_value]);\n\n\t\t\t\t\t\tif ($aro_key !== FALSE) {\n\t\t\t\t\t\t\t$this->debug_text(\"shift_acl(): Removing ARO. ($aro_key)\");\n\t\t\t\t\t\t\tunset($acl_array['aro'][$aro_section_value][$aro_key]);\n\t\t\t\t\t\t\t$update = 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->debug_text(\"shift_acl(): ARO doesn't exist, can't remove it.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($aro_group_ids) AND count($aro_group_ids) > 0) {\n\t\t\t$this->debug_text(\"shift_acl(): Removing ARO_GROUP_ID's\");\n\n\t\t\tforeach ($aro_group_ids as $aro_group_id) {\n\t\t\t\t$this->debug_text(\"shift_acl(): ARO Group ID: $aro_group_id\");\n\t\t\t\t$aro_group_key = array_search($aro_group_id, $acl_array['aro_groups']);\n\n\t\t\t\tif ($aro_group_key !== FALSE) {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): Removing ARO Group. ($aro_group_key)\");\n\t\t\t\t\tunset($acl_array['aro_groups'][$aro_group_key]);\n\t\t\t\t\t$update = 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): ARO Group doesn't exist, can't remove it.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($axo_array) AND count($axo_array) > 0) {\n\t\t\t$this->debug_text(\"shift_acl(): Removing AXO's\");\n\n\t\t\tforeach($axo_array as $axo_section_value => $axo_value_array) {\n\t\t\t\tforeach ($axo_value_array as $axo_value) {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): AXO Section Value: $axo_section_value AXO VALUE: $axo_value\");\n\t\t\t\t\t$axo_key = array_search($axo_value, $acl_array['axo'][$axo_section_value]);\n\n\t\t\t\t\tif ($axo_key !== FALSE) {\n\t\t\t\t\t\t$this->debug_text(\"shift_acl(): Removing AXO. ($axo_key)\");\n\t\t\t\t\t\tunset($acl_array['axo'][$axo_section_value][$axo_key]);\n\t\t\t\t\t\t$update = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->debug_text(\"shift_acl(): AXO doesn't exist, can't remove it.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($axo_group_ids) AND count($axo_group_ids) > 0) {\n\t\t\t$this->debug_text(\"shift_acl(): Removing AXO_GROUP_ID's\");\n\n\t\t\tforeach ($axo_group_ids as $axo_group_id) {\n\t\t\t\t$this->debug_text(\"shift_acl(): AXO Group ID: $axo_group_id\");\n\t\t\t\t$axo_group_key = array_search($axo_group_id, $acl_array['axo_groups']);\n\n\t\t\t\tif ($axo_group_key !== FALSE) {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): Removing AXO Group. ($axo_group_key)\");\n\t\t\t\t\tunset($acl_array['axo_groups'][$axo_group_key]);\n\t\t\t\t\t$update = 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): AXO Group doesn't exist, can't remove it.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($aco_array) AND count($aco_array) > 0) {\n\t\t\t$this->debug_text(\"shift_acl(): Removing ACO's\");\n\n\t\t\tforeach ($aco_array as $aco_section_value => $aco_value_array) {\n\t\t\t\tforeach ($aco_value_array as $aco_value) {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): ACO Section Value: $aco_section_value ACO VALUE: $aco_value\");\n\t\t\t\t\t$aco_key = array_search($aco_value, $acl_array['aco'][$aco_section_value]);\n\n\t\t\t\t\tif ($aco_key !== FALSE) {\n\t\t\t\t\t\t$this->debug_text(\"shift_acl(): Removing ACO. ($aco_key)\");\n\t\t\t\t\t\tunset($acl_array['aco'][$aco_section_value][$aco_key]);\n\t\t\t\t\t\t$update = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->debug_text(\"shift_acl(): ACO doesn't exist, can't remove it.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($update == 1) {\n\t\t\t//We know something was changed, so lets see if no ACO's or no ARO's are left assigned to this ACL, if so, delete the ACL completely.\n\t\t\t//$this->showarray($acl_array);\n\t\t\t$this->debug_text(\"shift_acl(): ACOs: \". $this->count_all($acl_array['aco']) .\" AROs: \".$this->count_all($acl_array['aro']).\"\");\n\n\t\t\tif ( $this->count_all($acl_array['aco']) == 0\n\t\t\t\t\tOR ( $this->count_all($acl_array['aro']) == 0\n\t\t\t\t\t\tAND ( $this->count_all($acl_array['axo']) == 0 OR $acl_array['axo'] == FALSE)\n\t\t\t\t\t\tAND (count($acl_array['aro_groups']) == 0 OR $acl_array['aro_groups'] == FALSE)\n\t\t\t\t\t\tAND (count($acl_array['axo_groups']) == 0 OR $acl_array['axo_groups'] == FALSE)\n\t\t\t\t\t\t) ) {\n\t\t\t\t$this->debug_text(\"shift_acl(): No ACOs or ( AROs AND AXOs AND ARO Groups AND AXO Groups) left assigned to this ACL (ID: $acl_id), deleting ACL.\");\n\n\t\t\t\treturn $this->del_acl($acl_id);\n\t\t\t}\n\n\t\t\t$this->debug_text(\"shift_acl(): Update flag set, updating ACL.\");\n\n\t\t\treturn $this->edit_acl($acl_id, $acl_array['aco'], $acl_array['aro'], $acl_array['aro_groups'], $acl_array['axo'], $acl_array['axo_groups'], $acl_array['allow'], $acl_array['enabled'], $acl_array['return_value'], $acl_array['note']);\n\t\t}\n\n\t\t//Return true if everything is duplicate and no ACL id updated.\n\t\t$this->debug_text(\"shift_acl(): Update flag not set, NOT updating ACL.\");\n\t\treturn true;\n\t}\n\n\t/**\n\t * get_acl()\n\t *\n\t * Grabs ACL data.\n\t *\n\t * @return bool FALSE if not found, or Associative Array with the following items:\n\t *\n\t *\t- 'aco' => Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t *\t- 'aro' => Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t *\t- 'axo' => Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t *\t- 'aro_groups' => Array of Group IDs\n\t *\t- 'axo_groups' => Array of Group IDs\n\t *\t- 'acl_id' => int ACL ID #\n\t *\t- 'allow' => int Allow flag\n\t *\t- 'enabled' => int Enabled flag\n\t *\t- 'return_value' => string Return Value\n\t *\t- 'note' => string Note\n\t *\n\t * @param int ACL ID #\n\t */\n\tfunction get_acl($acl_id) {\n\n\t\t$this->debug_text(\"get_acl(): ACL_ID: $acl_id\");\n\n\t\tif (empty($acl_id)) {\n\t\t\t$this->debug_text(\"get_acl(): No ACL_ID specified! ACL_ID: $acl_id\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Grab ACL information\n\t\t$query = \"select id, allow, enabled, return_value, note from \".$this->_db_table_prefix.\"acl where id = \" . $this->db->quote($acl_id);\n\t\t$acl_row = $this->db->GetRow($query);\n\n\t\t// return false if not found\n\t\tif (!$acl_row) {\n\t\t\t$this->debug_text(\"get_acl(): No ACL found for that ID! ACL_ID: $acl_id\");\n\t\t\treturn false;\n\t\t}\n\n\t\tlist($retarr['acl_id'], $retarr['allow'], $retarr['enabled'], $retarr['return_value'], $retarr['note']) = $acl_row;\n\n\t\t//Grab selected ACO's\n\t\t$query = \"select distinct a.section_value, a.value, c.name, b.name from \".$this->_db_table_prefix.\"aco_map a, \".$this->_db_table_prefix.\"aco b, \".$this->_db_table_prefix.\"aco_sections c\n\t\t\t\t\t\t\twhere ( a.section_value=b.section_value AND a.value = b.value) AND b.section_value=c.value AND a.acl_id = \" . $this->db->quote($acl_id);\n\t\t$rs = $this->db->Execute($query);\n\t\t$rows = $rs->GetRows();\n\n\t\t$retarr['aco'] = array();\n\t\tforeach ($rows as $row) {\n\t\t\tlist($section_value, $value, $section, $aco) = $row;\n\t\t\t$this->debug_text(\"Section Value: $section_value Value: $value Section: $section ACO: $aco\");\n\n\t\t\t$retarr['aco'][$section_value][] = $value;\n\n\t\t}\n\t\t//showarray($aco);\n\n\t\t//Grab selected ARO's\n\t\t$query = \"select distinct a.section_value, a.value, c.name, b.name from \".$this->_db_table_prefix.\"aro_map a, \".$this->_db_table_prefix.\"aro b, \".$this->_db_table_prefix.\"aro_sections c\n\t\t\t\t\t\t\twhere ( a.section_value=b.section_value AND a.value = b.value) AND b.section_value=c.value AND a.acl_id = \" . $this->db->quote($acl_id);\n\t\t$rs = $this->db->Execute($query);\n\t\t$rows = $rs->GetRows();\n\n\t\t$retarr['aro'] = array();\n        foreach ($rows as $row) {\n\t\t\tlist($section_value, $value, $section, $aro) = $row;\n\t\t\t$this->debug_text(\"Section Value: $section_value Value: $value Section: $section ARO: $aro\");\n\n\t\t\t$retarr['aro'][$section_value][] = $value;\n\n\t\t}\n\t\t//showarray($options_aro);\n\n\t\t//Grab selected AXO's\n\t\t$query = \"select distinct a.section_value, a.value, c.name, b.name from \".$this->_db_table_prefix.\"axo_map a, \".$this->_db_table_prefix.\"axo b, \".$this->_db_table_prefix.\"axo_sections c\n\t\t\t\t\t\t\twhere ( a.section_value=b.section_value AND a.value = b.value) AND b.section_value=c.value AND a.acl_id = \" . $this->db->quote($acl_id);\n\t\t$rs = $this->db->Execute($query);\n\t\t$rows = $rs->GetRows();\n\n\t\t$retarr['axo'] = array();\n        foreach ($rows as $row) {\n\t\t\tlist($section_value, $value, $section, $axo) = $row;\n\t\t\t$this->debug_text(\"Section Value: $section_value Value: $value Section: $section AXO: $axo\");\n\n\t\t\t$retarr['axo'][$section_value][] = $value;\n\n\t\t}\n\t\t//showarray($options_aro);\n\n\t\t//Grab selected ARO groups.\n\t\t$retarr['aro_groups'] = array();\n\t\t$query = \"select distinct group_id from \".$this->_db_table_prefix.\"aro_groups_map where  acl_id = \" . $this->db->quote($acl_id);\n\t\t$retarr['aro_groups'] = $this->db->GetCol($query);\n\t\t//showarray($selected_groups);\n\n\t\t//Grab selected AXO groups.\n\t\t$retarr['axo_groups'] = array();\n\t\t$query = \"select distinct group_id from \".$this->_db_table_prefix.\"axo_groups_map where  acl_id = \" . $this->db->quote($acl_id);\n\t\t$retarr['axo_groups'] = $this->db->GetCol($query);\n\t\t//showarray($selected_groups);\n\n\t\treturn $retarr;\n\t}\n\n\t/**\n\t * is_conflicting_acl()\n\t *\n\t * Checks for conflicts when adding a specific ACL.\n\t *\n\t * @return bool Returns true if conflict is found.\n\t *\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Array of ACL IDs to ignore from the result set.\n\t *\n\t */\n\tfunction is_conflicting_acl($aco_array, $aro_array, $aro_group_ids=NULL, $axo_array=NULL, $axo_group_ids=NULL, $ignore_acl_ids=NULL) {\n\t\t//Check for potential conflicts. Ignore groups, as groups will almost always have \"conflicting\" ACLs.\n\t\t//Thats part of inheritance.\n\n\t\tif (!is_array($aco_array)) {\n\t\t\t$this->debug_text('is_conflicting_acl(): Invalid ACO Array.');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif (!is_array($aro_array)) {\n\t\t\t$this->debug_text('is_conflicting_acl(): Invalid ARO Array.');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$query  = '\n\t\t\tSELECT\t\ta.id\n\t\t\tFROM\t\t'. $this->_db_table_prefix .'acl a\n\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aco_map ac ON ac.acl_id=a.id\n\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_map ar ON ar.acl_id=a.id\n\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_map ax ON ax.acl_id=a.id\n\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_groups_map axg ON axg.acl_id=a.id\n\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_groups xg ON xg.id=axg.group_id\n\t\t\t';\n\n\t\t//ACO\n\t\tforeach ($aco_array as $aco_section_value => $aco_value_array) {\n\t\t\t$this->debug_text(\"is_conflicting_acl(): ACO Section Value: $aco_section_value ACO VALUE: \" . implode(',', $aco_value_array));\n\t\t\t//showarray($aco_array);\n\n\t\t\tif (!is_array($aco_value_array)) {\n\t\t\t\t$this->debug_text('is_conflicting_acl(): Invalid Format for ACO Array item. Skipping...');\n\t\t\t\tcontinue;\n\t\t\t\t// return TRUE;\n\t\t\t}\n\t\t\t//Move the below line in to the LEFT JOIN above for PostgreSQL sake.\n\t\t\t//'ac1' => 'ac.acl_id=a.id',\n\t\t\t$where_query = array(\n\t\t\t\t'ac2' => '(ac.section_value='. $this->db->quote($aco_section_value) .' AND ac.value IN (\\''. implode ('\\',\\'', $aco_value_array) .'\\'))'\n\t\t\t);\n\n\t\t\t//ARO\n\t\t\tforeach ($aro_array as $aro_section_value => $aro_value_array) {\n\t\t\t\t$this->debug_text(\"is_conflicting_acl(): ARO Section Value: $aro_section_value ARO VALUE: $aro_value_array\");\n\n\t\t\t\tif (!is_array($aro_value_array))\n\t\t\t\t{\n\t\t\t\t\t$this->debug_text('is_conflicting_acl(): Invalid Format for ARO Array item. Skipping...');\n\t\t\t\t\tcontinue;\n\t\t\t\t\t// return TRUE;\n\t\t\t\t}\n\n\t\t\t\t$this->debug_text(\"is_conflicting_acl(): Search: ACO Section: $aco_section_value ACO Value: $aco_value_array ARO Section: $aro_section_value ARO Value: $aro_value_array\");\n\n\t\t\t\t//Move the below line in to the LEFT JOIN above for PostgreSQL sake.\n\t\t\t\t//$where_query['ar1'] = 'ar.acl_id=a.id';\n\t\t\t\t$where_query['ar2'] = '(ar.section_value='. $this->db->quote($aro_section_value) .' AND ar.value IN (\\''. implode ('\\',\\'', $aro_value_array) .'\\'))';\n\n\t\t\t\tif (is_array($axo_array) AND count($axo_array) > 0) {\n\t\t\t\t\tforeach ($axo_array as $axo_section_value => $axo_value_array) {\n\t\t\t\t\t\t$this->debug_text(\"is_conflicting_acl(): AXO Section Value: $axo_section_value AXO VALUE: $axo_value_array\");\n\n\t\t\t\t\t\tif (!is_array($axo_value_array)) {\n\t\t\t\t\t\t\t$this->debug_text('is_conflicting_acl(): Invalid Format for AXO Array item. Skipping...');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t// return TRUE;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$this->debug_text(\"is_conflicting_acl(): Search: ACO Section: $aco_section_value ACO Value: $aco_value_array ARO Section: $aro_section_value ARO Value: $aro_value_array AXO Section: $axo_section_value AXO Value: $axo_value_array\");\n\n\t\t\t\t\t\t//$where_query['ax1'] = 'ax.acl_id=x.id';\n\t\t\t\t\t\t$where_query['ax1'] = 'ax.acl_id=a.id';\n\t\t\t\t\t\t$where_query['ax2'] = '(ax.section_value='. $this->db->quote($axo_section_value) .' AND ax.value IN (\\''. implode ('\\',\\'', $axo_value_array) .'\\'))';\n\n\t\t\t\t\t\t$where  = 'WHERE ' . implode(' AND ', $where_query);\n\n\t\t\t\t\t\t$conflict_result = $this->db->GetCol($query . $where);\n\n\t\t\t\t\t\tif (is_array($conflict_result) AND !empty($conflict_result)) {\n\t\t\t\t\t\t\t// showarray($conflict_result);\n\n\t\t\t\t\t\t\tif (is_array($ignore_acl_ids)) {\n\t\t\t\t\t\t\t\t$conflict_result = array_diff($conflict_result, $ignore_acl_ids);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (count($conflict_result) > 0) {\n\t\t\t\t\t\t\t\t$conflicting_acls_str = implode(',', $conflict_result);\n\t\t\t\t\t\t\t\t$this->debug_text(\"is_conflicting_acl(): Conflict FOUND!!! ACL_IDS: ($conflicting_acls_str)\");\n\t\t\t\t\t\t\t\treturn TRUE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$where_query['ax1'] = '(ax.section_value IS NULL AND ax.value IS NULL)';\n\t\t\t\t\t$where_query['ax2'] = 'xg.name IS NULL';\n\n\t\t\t\t\t$where  = 'WHERE ' . implode(' AND ', $where_query);\n\n\t\t\t\t\t$conflict_result = $this->db->GetCol($query . $where);\n\n\t\t\t\t\tif (is_array($conflict_result) AND !empty($conflict_result)) {\n\t\t\t\t\t\t// showarray($conflict_result);\n\n\t\t\t\t\t\tif (is_array($ignore_acl_ids)) {\n\t\t\t\t\t\t\t$conflict_result = array_diff($conflict_result, $ignore_acl_ids);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (count($conflict_result) > 0) {\n\t\t\t\t\t\t\t$conflicting_acls_str = implode(',', $conflict_result);\n\t\t\t\t\t\t\t$this->debug_text(\"is_conflicting_acl(): Conflict FOUND!!! ACL_IDS: ($conflicting_acls_str)\");\n\t\t\t\t\t\t\treturn TRUE;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->debug_text('is_conflicting_acl(): No conflicting ACL found.');\n\t\treturn FALSE;\n\t}\n\n\t/**\n\t * add_acl()\n\t *\n\t * Add's an ACL. ACO_IDS, ARO_IDS, GROUP_IDS must all be arrays.\n\t *\n\t * @return bool Return ACL ID of new ACL if successful, FALSE otherewise.\n\t *\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param int Allow flag\n\t * @param int Enabled flag\n\t * @param string Return Value\n\t * @param string Note\n\t * @param string ACL Section Value\n\t * @param int ACL ID # Specific Request\n\n\t */\n\tfunction add_acl($aco_array, $aro_array, $aro_group_ids=NULL, $axo_array=NULL, $axo_group_ids=NULL, $allow=1, $enabled=1, $return_value=NULL, $note=NULL, $section_value=NULL, $acl_id=FALSE ) {\n\n\t\t$this->debug_text(\"add_acl():\");\n\n\t\tif (empty($aco_array) || count($aco_array) == 0) {\n\t\t\t$this->debug_text(\"Must select at least one Access Control Object\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif ((empty($aro_array) || count($aro_array) == 0) AND (empty($aro_group_ids) || count($aro_group_ids) == 0)) {\n\t\t\t$this->debug_text(\"Must select at least one Access Request Object or Group\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($allow)) {\n\t\t\t$allow=0;\n\t\t}\n\n\t\tif (empty($enabled)) {\n\t\t\t$enabled=0;\n\t\t}\n\n\t\tif (!empty($section_value)\n\t\t\tAND !$this->get_object_section_section_id(NULL, $section_value, 'ACL')) {\n\t\t\t$this->debug_text(\"add_acl(): Section Value: $section_value DOES NOT exist in the database.\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Unique the group arrays. Later one we unique ACO/ARO/AXO arrays.\n\t\tif (is_array($aro_group_ids)) {\n\t\t\t$aro_group_ids = array_unique($aro_group_ids);\n\t\t}\n\t\tif (is_array($axo_group_ids)) {\n\t\t\t$axo_group_ids = array_unique($axo_group_ids);\n\t\t}\n\n\t\t//Check for conflicting ACLs.\n\t\tif ($this->is_conflicting_acl($aco_array,$aro_array,$aro_group_ids,$axo_array,$axo_group_ids,array($acl_id))) {\n\t\t\t$this->debug_text(\"add_acl(): Detected possible ACL conflict, not adding ACL!\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Edit ACL if acl_id is set. This is simply if we're being called by edit_acl().\n\t\tif ($this->get_acl($acl_id) == FALSE) {\n\t\t\tif ( empty($section_value) ) {\n\t\t\t\t$section_value='system';\n\t\t\t\tif( !$this->get_object_section_section_id(NULL, $section_value, 'ACL') ) {\n\t\t\t\t\t// Use the acl section with the lowest order value.\n\t\t\t\t\t$acl_sections_table = $this->_db_table_prefix .'acl_sections';\n\t\t\t\t\t$acl_section_order_value = $this->db->GetOne(\"SELECT min(order_value) from $acl_sections_table\");\n\n\t\t\t\t\t$query = \"\n\t\t\t\t\t\tSELECT value\n\t\t\t\t\t\tFROM $acl_sections_table\n\t\t\t\t\t\tWHERE order_value = \" . $this->db->quote($acl_section_order_value);\n\t\t\t\t\t$section_value = $this->db->GetOne($query);\n\n\t\t\t\t\tif ( empty($section_value) ) {\n\t\t\t\t\t\t$this->debug_text(\"add_acl(): No valid acl section found.\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->debug_text(\"add_acl(): Using default section value: $section_value.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//ACL not specified, so create acl_id\n\t\t\tif (empty($acl_id)) {\n\t\t\t\t//Create ACL row first, so we have the acl_id\n\t\t\t\t$acl_id = $this->db->GenID($this->_db_table_prefix.'acl_seq',10);\n\n\t\t\t\t//Double check the ACL ID was generated.\n\t\t\t\tif (empty($acl_id)) {\n\t\t\t\t\t$this->debug_text(\"add_acl(): ACL_ID generation failed!\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Begin transaction _after_ GenID. Because on the first run, if GenID has to create the sequence,\n\t\t\t//the transaction will fail.\n\t\t\t$this->db->BeginTrans();\n\n\t\t\t$query = 'INSERT INTO '.$this->_db_table_prefix.'acl (id,section_value,allow,enabled,return_value,note,updated_date) VALUES('. $this->db->quote($acl_id) .','. $this->db->quote($section_value) .','. $this->db->quote($allow) .','. $this->db->quote($enabled) .','. $this->db->quote($return_value) .', '. $this->db->quote($note) .','. time() .')';\n\t\t\t$result = $this->db->Execute($query);\n\t\t} else {\n\t\t\t$section_sql = '';\n\t\t\tif ( !empty($section_value) ) {\n\t\t\t\t$section_sql = 'section_value='. $this->db->quote ($section_value) .',';\n\t\t\t}\n\n\t\t\t$this->db->BeginTrans();\n\n\t\t\t//Update ACL row, and remove all mappings so they can be re-inserted.\n\t\t\t$query  = '\n\t\t\t\tUPDATE\t'. $this->_db_table_prefix .'acl\n\t\t\t\tSET             ' . $section_sql . '\n\t\t\t\t\t\tallow='. $this->db->quote($allow) .',\n\t\t\t\t\t\tenabled='. $this->db->quote($enabled) .',\n\t\t\t\t\t\treturn_value='. $this->db->quote($return_value) .',\n\t\t\t\t\t\tnote='. $this->db->quote($note) .',\n\t\t\t\t\t\tupdated_date='. time() .'\n\t\t\t\tWHERE\tid='. $this->db->quote($acl_id);\n\t\t\t$result = $this->db->Execute($query);\n\n\t\t\tif ($result) {\n\t\t\t\t$this->debug_text(\"Update completed without error, delete mappings...\");\n\t\t\t\t//Delete all mappings so they can be re-inserted.\n\t\t\t\tforeach (array('aco_map', 'aro_map', 'axo_map', 'aro_groups_map', 'axo_groups_map') as $map) {\n\t\t\t\t\t$query = 'DELETE FROM '. $this->_db_table_prefix . $map .' WHERE acl_id='. $this->db->quote($acl_id);\n\t\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\t\tif (!is_object($rs))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->debug_db('add_acl');\n\t\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\t\treturn FALSE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!is_object($result)) {\n\t\t\t$this->debug_db('add_acl');\n\t\t\t$this->db->RollBackTrans();\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text(\"Insert or Update completed without error, insert new mappings.\");\n\t\t// Insert ACO/ARO/AXO mappings\n\t\tforeach (array('aco', 'aro', 'axo') as $map) {\n\t\t\t$map_array = ${$map .'_array'};\n\n\t\t\tif (!is_array ($map_array)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tforeach ($map_array as $section_value => $value_array) {\n\t\t\t\t$this->debug_text ('Insert: '. strtoupper($map) . ' Section Value: $section_value' . strtoupper($map) . ' VALUE: $value_array');\n\t\t\t\t// $this->showarray ($aco_value_array);\n\n\t\t\t\tif (!is_array($value_array)) {\n\t\t\t\t\t$this->debug_text ('add_acl (): Invalid Format for '. strtoupper ($map) .' Array item. Skipping...');\n\t\t\t\t\tcontinue;\n\t\t\t\t\t// return true;\n\t\t\t\t}\n\n\t\t\t\t$value_array = array_unique($value_array);\n\n\t\t\t\tforeach ($value_array as $value) {\n\t\t\t\t\t$get_object_id = $this->get_object_id($section_value, $value, $map);\n\t\t\t\t\t$object_id = &$get_object_id;\n\n\t\t\t\t\tif (empty($object_id))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->debug_text('add_acl(): '. strtoupper($map) . \" Object Section Value: $section_value Value: $value DOES NOT exist in the database. Skipping...\");\n\t\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$query  = 'INSERT INTO '. $this->_db_table_prefix . $map .'_map (acl_id,section_value,value) VALUES ('. $this->db->quote($acl_id) .', '. $this->db->quote($section_value) .', '. $this->db->quote($value) .')';\n\t\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\t\tif (!is_object($rs))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->debug_db('add_acl');\n\t\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Insert ARO/AXO GROUP mappings\n\t\tforeach (array('aro', 'axo') as $map) {\n\t\t\t$map_group_ids = ${$map .'_group_ids'};\n\n\t\t\tif (!is_array($map_group_ids)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tforeach ($map_group_ids as $group_id) {\n\t\t\t\t$this->debug_text ('Insert: '. strtoupper($map) .' GROUP ID: '. $group_id);\n        $get_group_data = $this->get_group_data($group_id, $map);\n        $group_data = &$get_group_data;\n\n\t\t\t\tif (empty($group_data)) {\n\t\t\t\t\t$this->debug_text('add_acl(): '. strtoupper($map) . \" Group: $group_id DOES NOT exist in the database. Skipping...\");\n\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t$query  = 'INSERT INTO '. $this->_db_table_prefix . $map .'_groups_map (acl_id,group_id) VALUES ('. $this->db->quote($acl_id) .', '. $this->db->quote($group_id) .')';\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\t$this->debug_db('add_acl');\n\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->db->CommitTrans();\n\n\t\tif ($this->_caching == TRUE AND $this->_force_cache_expire == TRUE) {\n\t\t\t//Expire all cache.\n\t\t\t$this->Cache_Lite->clean('default');\n\t\t}\n\n\t\t//Return only the ID in the first row.\n\t\treturn $acl_id;\n\t}\n\n\t/**\n\t * edit_acl()\n\t *\n\t * Edit's an ACL, ACO_IDS, ARO_IDS, GROUP_IDS must all be arrays.\n\t *\n\t * @return bool Return TRUE if successful, FALSE otherewise.\n\t *\n\t * @param int ACL ID # to edit\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param int Allow flag\n\t * @param int Enabled flag\n\t * @param string Return Value\n\t * @param string Note\n\t * @param string ACL Section Value\n\t */\n\tfunction edit_acl($acl_id, $aco_array, $aro_array, $aro_group_ids=NULL, $axo_array=NULL, $axo_group_ids=NULL, $allow=1, $enabled=1, $return_value=NULL, $note=NULL, $section_value=NULL) {\n\n\t\t$this->debug_text(\"edit_acl():\");\n\n\t\tif (empty($acl_id) ) {\n\t\t\t$this->debug_text(\"edit_acl(): Must specify a single ACL_ID to edit\");\n\t\t\treturn false;\n\t\t}\n\t\tif (count($aco_array) == 0) {\n\t\t\t$this->debug_text(\"edit_acl(): Must select at least one Access Control Object\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (count($aro_array) == 0 AND count($aro_group_ids) == 0) {\n\t\t\t$this->debug_text(\"edit_acl(): Must select at least one Access Request Object or Group\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($allow)) {\n\t\t\t$allow=0;\n\t\t}\n\n\t\tif (empty($enabled)) {\n\t\t\t$enabled=0;\n\t\t}\n\n\t\t//if ($this->add_acl($aco_array, $aro_array, $group_ids, $allow, $enabled, $acl_id)) {\n\t\tif ($this->add_acl($aco_array, $aro_array, $aro_group_ids, $axo_array, $axo_group_ids, $allow, $enabled, $return_value, $note, $section_value, $acl_id)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$this->debug_text(\"edit_acl(): error in add_acl()\");\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * del_acl()\n\t *\n\t * Deletes a given ACL\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise.\n\t *\n\t * @param int ACL ID # to delete\n\t */\n\tfunction del_acl($acl_id) {\n\n\t\t$this->debug_text(\"del_acl(): ID: $acl_id\");\n\n\t\tif (empty($acl_id) ) {\n\t\t\t$this->debug_text(\"del_acl(): ACL_ID ($acl_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\n\t\t// Delete all mappings to the ACL first\n\t\tforeach (array('aco_map', 'aro_map', 'axo_map', 'aro_groups_map', 'axo_groups_map') as $map) {\n\t\t\t$query  = 'DELETE FROM '. $this->_db_table_prefix . $map .' WHERE acl_id='. $this->db->quote($acl_id);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('del_acl');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Delete the ACL\n\t\t$query  = 'DELETE FROM '. $this->_db_table_prefix .'acl WHERE id='. $this->db->quote($acl_id);\n\t\t$this->debug_text('delete query: '. $query);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('del_acl');\n\t\t\t$this->db->RollBackTrans();\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text(\"del_acl(): deleted ACL ID: $acl_id\");\n\t\t$this->db->CommitTrans();\n\n\t\tif ($this->_caching == TRUE AND $this->_force_cache_expire == TRUE) {\n\t\t\t//Expire all cache.\n\t\t\t$this->Cache_Lite->clean('default');\n\t\t}\n\n\t\treturn TRUE;\n\t}\n\n\n\t/*\n\t *\n\t * Groups\n\t *\n\t */\n\n\t/**\n\t * sort_groups()\n\t *\n\t * Grabs all the groups from the database doing preliminary grouping by parent\n\t *\n\t * @return array Returns 2-Dimensional array: $array[<parent_id>][<group_id>] = <group_name>\n\t *\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction sort_groups($group_type='ARO') {\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//Grab all groups from the database.\n\t\t$query  = 'SELECT id, parent_id, name FROM '. $table .' ORDER BY parent_id, name';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('sort_groups');\n\t\t\treturn false;\n\t\t}\n\n\t\t/*\n\t\t * Save groups in an array sorted by parent. Should be make it easier for later on.\n\t\t */\n\t\t$sorted_groups = array();\n\n\t\twhile ($row = $rs->FetchRow()) {\n\t\t\t$id = &$row[0];\n\t\t\t$parent_id = &$row[1];\n\t\t\t$name = &$row[2];\n\n\t\t\t$sorted_groups[$parent_id][$id] = $name;\n\t\t}\n\n\t\treturn $sorted_groups;\n\t}\n\n\t/**\n\t * format_groups()\n\t *\n\t * Takes the array returned by sort_groups() and formats for human\n\t * consumption. Recursively calls itself to produce the desired output.\n\t *\n\t * @return array Array of formatted text, ordered by group id, formatted according to $type\n\t *\n\t * @param array Output from gacl_api->sorted_groups($group_type)\n\t * @param array Output type desired, either 'TEXT', 'HTML', or 'ARRAY'\n\t * @param int Root of tree to produce\n\t * @param int Current level of depth\n\t * @param array Pass the current formatted groups object for appending via recursion.\n\t */\n\tfunction format_groups($sorted_groups, $type='TEXT', $root_id=0, $level=0, $formatted_groups=NULL) {\n\t\tif ( !is_array ($sorted_groups) ) {\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif ( !is_array ($formatted_groups) ) {\n\t\t\t$formatted_groups = array ();\n\t\t}\n\n\t\t//$this->showarray($formatted_groups);\n\n\t\tif (isset($sorted_groups[$root_id])) {\n\t\t\t//$last_id = end( array_keys($sorted_groups[$root_id]));\n\t\t\t//PHP5 compatibility\n\t\t\t$keys = array_keys($sorted_groups[$root_id]);\n\t\t\t$last_id = end($keys);\n\t\t\tunset($keys);\n\n\t\t\tforeach ($sorted_groups[$root_id] as $id => $name) {\n\t\t\t\tswitch (strtoupper($type)) {\n\t\t\t\t\tcase 'TEXT':\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Formatting optimized for TEXT (combo box) output.\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tif ( is_numeric($level) ) {\n\t\t\t\t\t\t\t$level = str_repeat('&nbsp;&nbsp; ', $level);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( strlen($level) >= 8 ) {\n\t\t\t\t\t\t\tif ( $id == $last_id ) {\n\t\t\t\t\t\t\t\t$spacing = substr($level, 0, -8) .'\\'- ';\n\t\t\t\t\t\t\t\t$level = substr($level, 0, -8) .'&nbsp;&nbsp; ';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$spacing = substr($level, 0, -8) .'|- ';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$spacing = $level;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$next = $level .'|&nbsp; ';\n\t\t\t\t\t\t$text = $spacing.htmlspecialchars($name,ENT_QUOTES);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HTML':\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Formatting optimized for HTML (tables) output.\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$width= $level * 20;\n\t\t\t\t\t\t$spacing = \"<img src=\\\"s.gif\\\" width=\\\"$width\\\">\";\n\t\t\t\t\t\t$next = $level + 1;\n\t\t\t\t\t\t$text = $spacing.\" \".htmlspecialchars($name,ENT_QUOTES);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ARRAY':\n\t\t\t\t\t\t$next = $level;\n\t\t\t\t\t\t$text = $name;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn FALSE;\n\t\t\t\t}\n\n\t\t\t\t$formatted_groups[$id] = $text;\n\t\t\t\t/*\n\t\t\t\t * Recurse if we can.\n\t\t\t\t */\n\n\t\t\t\t//if (isset($sorted_groups[$id]) AND count($sorted_groups[$id]) > 0) {\n\t\t\t\tif (isset($sorted_groups[$id]) ) {\n\t\t\t\t\t//$this->debug_text(\"format_groups(): Recursing! Level: $level\");\n\t\t\t\t\t$formatted_groups = $this->format_groups($sorted_groups, $type, $id, $next, $formatted_groups);\n\t\t\t\t} else {\n\t\t\t\t\t//$this->debug_text(\"format_groups(): Found last branch!\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//$this->debug_text(\"format_groups(): Returning final array.\");\n\n\t\treturn $formatted_groups;\n\t}\n\n\t/**\n\t * get_group_id()\n\t *\n\t * Gets the group_id given the name or value.\n\t *\n\t * Will only return one group id, so if there are duplicate names, it will return false.\n\t *\n\t * @return int Returns Group ID if found and Group ID is unique in database, otherwise, returns FALSE\n\t *\n\t * @param string Group Value\n\t * @param string Group Name\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction get_group_id($value = NULL, $name = NULL, $group_type = 'ARO') {\n\n\t\t$this->debug_text(\"get_group_id(): Value: $value, Name: $name, Type: $group_type\" );\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$name = trim($name);\n\t\t$value = trim($value);\n\n\t\tif (empty($name) AND empty($value) ) {\n\t\t\t$this->debug_text(\"get_group_id(): name and value, at least one is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query = 'SELECT id FROM '. $table .' WHERE ';\n\t\tif ( !empty($value) ) {\n\t\t  $query .= ' value='. $this->db->quote($value);\n\t\t} else {\n\t\t  $query .= ' name='. $this->db->quote($name);\n\t\t}\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_group_id');\n\t\t\treturn false;\n\t\t}\n\n\t\t$row_count = $rs->RecordCount();\n\n\t\tif ($row_count > 1) {\n\t\t\t$this->debug_text(\"get_group_id(): Returned $row_count rows, can only return one. Please make your names unique.\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($row_count == 0) {\n\t\t\t$this->debug_text(\"get_group_id(): Returned $row_count rows\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$row = $rs->FetchRow();\n\n\t\t//Return the ID.\n\t\treturn $row[0];\n\t}\n\n\t/**\n\t * get_group_children()\n\t *\n\t * Gets a groups child IDs\n\t *\n\t * @return array Array of Child ID's of the referenced group\n\t *\n\t * @param int Group ID #\n\t * @param int Group Type, either 'ARO' or 'AXO'\n\t * @param string Either 'RECURSE' or 'NO_RECURSE', to recurse while fetching group children.\n\t */\n\tfunction get_group_children($group_id, $group_type = 'ARO', $recurse = 'NO_RECURSE') {\n\t\t$this->debug_text(\"get_group_children(): Group_ID: $group_id Group Type: $group_type Recurse: $recurse\");\n\n\t\tswitch (strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t}\n\n\t\tif (empty($group_id)) {\n\t\t\t$this->debug_text(\"get_group_children(): ID ($group_id) is empty, this is required\");\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$query  = '\n\t\t\t\tSELECT\t\tg1.id\n\t\t\t\tFROM\t\t'. $table .' g1';\n\n\t\t//FIXME-mikeb: Why is group_id in quotes?\n\t\tswitch (strtoupper($recurse)) {\n\t\t\tcase 'RECURSE':\n\t\t\t\t$query .= '\n\t\t\t\tLEFT JOIN \t'. $table .' g2 ON g2.lft<g1.lft AND g2.rgt>g1.rgt\n\t\t\t\tWHERE\t\tg2.id='. $this->db->quote($group_id);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$query .= '\n\t\t\t\tWHERE\t\tg1.parent_id='. $this->db->quote($group_id);\n\t\t}\n\n\t\t$query .= '\n\t\t\t\tORDER BY\tg1.value';\n\n\t\treturn $this->db->GetCol($query);\n\t}\n\n\t/**\n\t * get_group_data()\n\t *\n\t * Gets the group data given the GROUP_ID.\n\t *\n\t * @return array Returns numerically indexed array with the following columns:\n\t *\t- array[0] = (int) Group ID #\n\t *\t- array[1] = (int) Parent Group ID #\n\t *\t- array[2] = (string) Group Value\n\t *\t- array[3] = (string) Group Name\n\t *\t- array[4] = (int) lft MPTT Value\n\t *\t- array[5] = (int) rgt MPTT Value\n\t *\n\t * @param int Group ID #\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction get_group_data($group_id, $group_type = 'ARO') {\n\n\t\t$this->debug_text(\"get_group_data(): Group_ID: $group_id Group Type: $group_type\");\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (empty($group_id) ) {\n\t\t\t$this->debug_text(\"get_group_data(): ID ($group_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query  = 'SELECT id, parent_id, value, name, lft, rgt FROM '. $table .' WHERE id='. $this->db->quote($group_id);\n\t\t//$rs = $this->db->Execute($query);\n\t\t$row = $this->db->GetRow($query);\n\n\t\tif ($row) {\n\t\t\treturn $row;\n\t\t}\n\n\t\t$this->debug_text(\"get_object_data(): Group does not exist.\");\n\t\treturn false;\n\t}\n\n\t/**\n\t * get_group_parent_id()\n\t *\n\t * Grabs the parent_id of a given group\n\t *\n\t * @return int Parent ID of the Group\n\t *\n\t * @param int Group ID #\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction get_group_parent_id($id, $group_type='ARO') {\n\n\t\t$this->debug_text(\"get_group_parent_id(): ID: $id Group Type: $group_type\");\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (empty($id) ) {\n\t\t\t$this->debug_text(\"get_group_parent_id(): ID ($id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query = 'SELECT parent_id FROM '. $table .' WHERE id='. $this->db->quote($id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_group_parent_id');\n\t\t\treturn false;\n\t\t}\n\n\t\t$row_count = $rs->RecordCount();\n\n\t\tif ($row_count > 1) {\n\t\t\t$this->debug_text(\"get_group_parent_id(): Returned $row_count rows, can only return one. Please make your names unique.\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($row_count == 0) {\n\t\t\t$this->debug_text(\"get_group_parent_id(): Returned $row_count rows\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$row = $rs->FetchRow();\n\n\t\t//Return the ID.\n\t\treturn $row[0];\n\t}\n\n\n\t/**\n\t * get_root_group_id ()\n\t *\n\t * Grabs the id of the root group for the specified tree\n\t *\n\t * @return int Root Group ID #\n\t *\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction get_root_group_id($group_type='ARO') {\n\n\t\t$this->debug_text('get_root_group_id(): Group Type: '. $group_type);\n\n\t\tswitch (strtolower($group_type)) {\n\t\t\tcase 'axo':\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_root_group_id(): Invalid Group Type: '. $group_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$query = 'SELECT id FROM '. $table .' WHERE parent_id=0';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_root_group_id');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$row_count = $rs->RecordCount();\n\n\t\tswitch ($row_count) {\n\t\t\tcase 1:\n\t\t\t\t$row = $rs->FetchRow();\n\t\t\t\t// Return the ID.\n\t\t\t\treturn $row[0];\n\t\t\tcase 0:\n\t\t\t\t$this->debug_text('get_root_group_id(): Returned 0 rows, you do not have a root group defined yet.');\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text('get_root_group_id(): Returned '. $row_count .' rows, can only return one. Your tree is very broken.');\n\t\treturn FALSE;\n\t}\n\n\t/*======================================================================*\\\n\t\tFunction:\tmap_path_to_root()\n\t\tPurpose:\tMaps a unique path to root to a specific group. Each group can only have\n\t\t\t\t\t\tone path to root.\n\t\\*======================================================================*/\n\t/** REMOVED **/\n\t/*======================================================================*\\\n\t\tFunction:\tput_path_to_root()\n\t\tPurpose:\tWrites the unique path to root to the database. There should really only be\n\t\t\t\t\t\tone path to root for each level \"deep\" the groups go. If the groups are branched\n\t\t\t\t\t\t10 levels deep, there should only be 10 unique path to roots. These of course\n\t\t\t\t\t\toverlap each other more and more the closer to the root/trunk they get.\n\t\\*======================================================================*/\n\t/** REMOVED **/\n\t/*======================================================================*\\\n\t\tFunction:\tclean_path_to_root()\n\t\tPurpose:\tCleans up any paths that are not being used.\n\t\\*======================================================================*/\n\t/** REMOVED **/\n\t/*======================================================================*\\\n\t\tFunction:\tget_path_to_root()\n\t\tPurpose:\tGenerates the path to root for a given group.\n\t\\*======================================================================*/\n\t/** REMOVED **/\n\n\t/**\n\t * add_group()\n\t *\n\t * Inserts a group, defaults to be on the \"root\" branch.\n\t *\n\t * Since v3.3.x you can only create one group with Parent_ID=0\n\t * So, its a good idea to create a \"Virtual Root\" group with Parent_ID=0\n\t * Then assign other groups to that.\n\t *\n\t * @return int New Group ID # if successful, FALSE if otherwise.\n\t *\n\t * @param string Group Value\n\t * @param string Group Name\n\t * @param int Parent Group ID #\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction add_group($value, $name, $parent_id=0, $group_type='ARO') {\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"add_group(): Name: $name Value: $value Parent ID: $parent_id Group Type: $group_type\");\n\n\t\t$name = trim($name);\n\t\t$value = trim($value);\n\n\t\tif ( $name == '' ) {\n\t\t\t$this->debug_text(\"add_group(): name ($name) OR parent id ($parent_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//This has to be outside the transaction, because the first time it is run, it will say the sequence\n\t\t//doesn't exist. Then try to create it, but the transaction will already by aborted by then.\n\t\t$insert_id = $this->db->GenID($this->_db_table_prefix.$group_type.'_groups_id_seq',10);\n\t\tif ( $value === '' ) {\n\t\t\t$value = $insert_id;\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\n\t\t// special case for root group\n\t\tif ($parent_id == 0) {\n\t\t\t// check a root group is not already defined\n\t\t\t$query = 'SELECT id FROM '. $table .' WHERE parent_id=0';\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('add_group');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\tif ($rs->RowCount() > 0) {\n\t\t\t\t$this->debug_text('add_group (): A root group already exists.');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$parent_lft = 0;\n\t\t\t$parent_rgt = 1;\n\t\t} else {\n\t\t\tif (empty($parent_id)) {\n\t\t\t\t$this->debug_text(\"add_group (): parent id ($parent_id) is empty, this is required\");\n\t\t\t\t$this->db->RollbackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t// grab parent details from database\n\t\t\t$query = 'SELECT id, lft, rgt FROM '. $table .' WHERE id='. $this->db->quote($parent_id);\n\t\t\t$row = $this->db->GetRow($query);\n\n\t\t\tif (!is_array($row)) {\n\t\t\t\t$this->debug_db('add_group');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\tif (empty($row)) {\n\t\t\t\t$this->debug_text('add_group (): Parent ID: '. $parent_id .' not found.');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$parent_lft = &$row[1];\n\t\t\t$parent_rgt = &$row[2];\n\n\t\t\t// make room for the new group\n\t\t\t$query  = 'UPDATE '. $table .' SET rgt=rgt+2 WHERE rgt>='. $this->db->quote($parent_rgt);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('add_group');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$query  = 'UPDATE '. $table .' SET lft=lft+2 WHERE lft>'. $this->db->quote($parent_rgt);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('add_group');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t$query = 'INSERT INTO '. $table .' (id,parent_id,name,value,lft,rgt) VALUES ('. $this->db->quote($insert_id) .','. $this->db->quote($parent_id) .','. $this->db->quote($name) .','. $this->db->quote($value) .','. $this->db->quote($parent_rgt) .','. $this->db->quote($parent_rgt + 1) .')';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('add_group');\n\t\t\t$this->db->RollBackTrans();\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->db->CommitTrans();\n\n\t\t$this->debug_text('add_group (): Added group as ID: '. $insert_id);\n\t\treturn $insert_id;\n\t}\n\n\t/**\n\t * get_group_objects()\n\t *\n\t * Gets all objects assigned to a group.\n\t *\n\t * If $option == 'RECURSE' it will get all objects in child groups as well.\n\t * defaults to omit child groups.\n\t *\n\t * @return array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\n\t *\n\t * @param int Group ID #\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t * @param string Option, either 'RECURSE' or 'NO_RECURSE'\n\t */\n\tfunction get_group_objects($group_id, $group_type='ARO', $option='NO_RECURSE') {\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$object_table = $this->_db_table_prefix .'axo';\n\t\t\t\t$group_table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\t$map_table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$object_table = $this->_db_table_prefix .'aro';\n\t\t\t\t$group_table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\t$map_table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"get_group_objects(): Group ID: $group_id\");\n\n\t\tif (empty($group_id)) {\n\t\t\t$this->debug_text(\"get_group_objects(): Group ID:  ($group_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query  = '\n\t\t\t\tSELECT\t\to.section_value,o.value';\n\n\t\tif ($option == 'RECURSE') {\n\t\t\t$query .= '\n\t\t\t\tFROM\t\t'. $group_table .' g2\n\t\t\t\tJOIN\t\t'. $group_table .' g1 ON g1.lft>=g2.lft AND g1.rgt<=g2.rgt\n\t\t\t\tJOIN\t\t'. $map_table .' gm ON gm.group_id=g1.id\n\t\t\t\tJOIN\t\t'. $object_table .' o ON o.id=gm.'. $group_type .'_id\n\t\t\t\tWHERE\t\tg2.id='. $this->db->quote($group_id);\n\t\t} else {\n\t\t\t$query .= '\n\t\t\t\tFROM\t\t'. $map_table .' gm\n\t\t\t\tJOIN\t\t'. $object_table .' o ON o.id=gm.'. $group_type .'_id\n\t\t\t\tWHERE\t\tgm.group_id='. $this->db->quote($group_id);\n\t\t}\n\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_group_objects');\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text(\"get_group_objects(): Got group objects, formatting array.\");\n\n\t\t$retarr = array();\n\n\t\t//format return array.\n\t\twhile ($row = $rs->FetchRow()) {\n\t\t\t$section = &$row[0];\n\t\t\t$value = &$row[1];\n\n\t\t\t$retarr[$section][] = $value;\n\t\t}\n\n\t\treturn $retarr;\n\t}\n\n\t/**\n\t * add_group_object()\n\t *\n\t * Assigns an Object to a group\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise.\n\t *\n\t * @param int Group ID #\n\t * @param string Object Section Value\n\t * @param string Object Value\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction add_group_object($group_id, $object_section_value, $object_value, $group_type='ARO') {\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\t$object_table = $this->_db_table_prefix .'axo';\n\t\t\t\t$group_table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\t$object_table = $this->_db_table_prefix .'aro';\n\t\t\t\t$group_table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"add_group_object(): Group ID: $group_id Section Value: $object_section_value Value: $object_value Group Type: $group_type\");\n\n\t\t$object_section_value = trim($object_section_value);\n\t\t$object_value = trim($object_value);\n\n\t\tif (empty($group_id) OR empty($object_value) OR empty($object_section_value)) {\n\t\t\t$this->debug_text(\"add_group_object(): Group ID: ($group_id) OR Value ($object_value) OR Section value ($object_section_value) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t// test to see if object & group exist and if object is already a member\n\t\t$query  = '\n\t\t\t\tSELECT\t\to.id AS id,g.id AS group_id,gm.group_id AS `member`\n\t\t\t\tFROM\t\t'. $object_table .' o\n\t\t\t\tLEFT JOIN\t'. $group_table .' g ON g.id='. $this->db->quote($group_id) .'\n\t\t\t\tLEFT JOIN\t'. $table .' gm ON (gm.'. $group_type .'_id=o.id AND gm.group_id=g.id)\n\t\t\t\tWHERE\t\t(o.section_value='. $this->db->quote($object_section_value) .' AND o.value='. $this->db->quote($object_value) .')';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('add_group_object');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif ($rs->RecordCount() != 1) {\n\t\t\t$this->debug_text('add_group_object(): Value ('. $object_value .') OR Section value ('. $object_section_value .') is invalid. Does this object exist?');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$row = $rs->FetchRow();\n\n\t\tif ($row[1] != $group_id) {\n\t\t\t$this->debug_text('add_group_object(): Group ID ('. $group_id .') is invalid. Does this group exist?');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t//Group_ID == Member\n\t\tif ($row[1] == $row[2]) {\n\t\t\t$this->debug_text('add_group_object(): Object: ('. $object_section_value .' -> '. $object_value .') is already a member of Group: ('. $group_id .')');\n\t\t\t//Object is already assigned to group. Return true.\n\t\t\treturn TRUE;\n\t\t}\n\n\t\t$object_id = $row[0];\n\n\t\t$query = 'INSERT INTO '. $table .' (group_id,'. $group_type .'_id) VALUES ('. $this->db->quote($group_id) .','. $this->db->quote($object_id) .')';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('add_group_object');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text('add_group_object(): Added Object: '. $object_id .' to Group ID: '. $group_id);\n\n\t\tif ($this->_caching == TRUE AND $this->_force_cache_expire == TRUE) {\n\t\t\t//Expire all cache.\n\t\t\t$this->Cache_Lite->clean('default');\n\t\t}\n\n\t\treturn TRUE;\n\t}\n\n\t/**\n\t * del_group_object()\n\t *\n\t * Removes an Object from a group.\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t * @param int Group ID #\n\t * @param string Object Section Value\n\t * @param string Object Value\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction del_group_object($group_id, $object_section_value, $object_value, $group_type='ARO') {\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"del_group_object(): Group ID: $group_id Section value: $object_section_value Value: $object_value\");\n\n\t\t$object_section_value = trim($object_section_value);\n\t\t$object_value = trim($object_value);\n\n\t\tif (empty($group_id) OR empty($object_value) OR empty($object_section_value)) {\n\t\t\t$this->debug_text(\"del_group_object(): Group ID:  ($group_id) OR Section value: $object_section_value OR Value ($object_value) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n \t\tif (!$object_id = $this->get_object_id($object_section_value, $object_value, $group_type)) {\n\t\t\t$this->debug_text (\"del_group_object (): Group ID ($group_id) OR Value ($object_value) OR Section value ($object_section_value) is invalid. Does this object exist?\");\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$query = 'DELETE FROM '. $table .' WHERE group_id='. $this->db->quote($group_id) .' AND '. $group_type .'_id='. $this->db->quote($object_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('del_group_object');\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text(\"del_group_object(): Deleted Value: $object_value to Group ID: $group_id assignment\");\n\n\t\tif ($this->_caching == TRUE AND $this->_force_cache_expire == TRUE) {\n\t\t\t//Expire all cache.\n\t\t\t$this->Cache_Lite->clean('default');\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * edit_group()\n\t *\n\t * Edits a group\n\t *\n\t * @returns bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t * @param int Group ID #\n\t * @param string Group Value\n\t * @param string Group Name\n\t * @param int Parent ID #\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction edit_group($group_id, $value=NULL, $name=NULL, $parent_id=NULL, $group_type='ARO') {\n\t\t$this->debug_text(\"edit_group(): ID: $group_id Name: $name Value: $value Parent ID: $parent_id Group Type: $group_type\");\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (empty($group_id) ) {\n\t\t\t$this->debug_text('edit_group(): Group ID ('. $group_id .') is empty, this is required');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif ( !is_array($curr = $this->get_group_data($group_id, $group_type)) ) {\n\t\t\t$this->debug_text('edit_group(): Invalid Group ID: '. $group_id);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$name = trim($name);\n\n\t\t// don't set name if it is unchanged\n\t\tif ($name == $curr[3]) {\n\t\t\tunset($name);\n\t\t}\n\n\t\t// don't set parent_id if it is unchanged\n\t\tif ($parent_id == $curr[1]) {\n\t\t\tunset($parent_id);\n\t\t}\n\n\t\tif (!empty($parent_id)) {\n\t\t\tif ($group_id == $parent_id) {\n\t\t\t\t$this->debug_text('edit_group(): Groups can\\'t be a parent to themselves. Incest is bad. ;)');\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t//Make sure we don't re-parent to our own children.\n\t\t\t//Grab all children of this group_id.\n\t\t\t$children_ids = $this->get_group_children($group_id, $group_type, 'RECURSE');\n\t\t\tif (is_array($children_ids)) {\n\t\t\t\tif (@in_array($parent_id, $children_ids) ) {\n\t\t\t\t\t$this->debug_text('edit_group(): Groups can\\'t be re-parented to their own children, this would be incestuous!');\n\t\t\t\t\treturn FALSE;\n\t\t\t\t}\n\t\t\t}\n\t\t\tunset($children_ids);\n\n\t\t\t// make sure parent exists\n\t\t\tif (!$this->get_group_data($parent_id, $group_type)) {\n\t\t\t\t$this->debug_text('edit_group(): Parent Group ('. $parent_id .') doesn\\'t exist');\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t$set = array();\n\n\t\t// update name if it is specified.\n\t\tif (!empty($name)) {\n\t\t\t$set[] = 'name='. $this->db->quote($name);\n\t\t}\n\n\t\t// update parent_id if it is specified.\n\t\tif (!empty($parent_id)) {\n\t\t\t$set[] = 'parent_id='. $this->db->quote($parent_id);\n\t\t}\n\n\t\t// update value if it is specified.\n\t\tif (!empty($value)) {\n\t\t\t$set[] = 'value='. $this->db->quote($value);\n\t\t}\n\n\t\tif (empty($set)) {\n\t\t\t$this->debug_text('edit_group(): Nothing to update.');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\n\t\t$query  = 'UPDATE '. $table .' SET '. implode(',', $set) .' WHERE id='. $this->db->quote($group_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('edit_group');\n\t\t\t$this->db->RollbackTrans();\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text('edit_group(): Modified group ID: '. $group_id);\n\n\t\t// rebuild group tree if parent_id has changed\n\t\tif (!empty($parent_id)) {\n\t\t\tif (!$this->_rebuild_tree($table, $this->get_root_group_id($group_type))) {\n\t\t\t\t$this->db->RollbackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t$this->db->CommitTrans();\n\n\t\tif ($this->_caching == TRUE AND $this->_force_cache_expire == TRUE) {\n\t\t\t// Expire all cache.\n\t\t\t$this->Cache_Lite->clean('default');\n\t\t}\n\n\t\treturn TRUE;\n\t}\n\n\t/**\n\t * rebuild_tree ()\n\t *\n\t * rebuilds the group tree for the given type\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t * @param int Group ID #\n\t * @param int Left value of Group\n\t */\n\tfunction rebuild_tree($group_type = 'ARO', $group_id = NULL, $left = 1) {\n\t\t$this->debug_text(\"rebuild_tree(): Group Type: $group_type Group ID: $group_id Left: $left\");\n\n\t\tswitch (strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!isset($group_id)) {\n\t\t\tif ($group_id = $this->get_root_group_id($group_type)) {\n\t\t\t\t$left = 1;\n\t\t\t\t$this->debug_text('rebuild_tree(): No Group ID Specified, using Root Group ID: '. $group_id);\n\t\t\t} else {\n\t\t\t\t$this->debug_text('rebuild_tree(): A Root group could not be found, are there any groups defined?');\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\t\t$rebuilt = $this->_rebuild_tree($table, $group_id, $left);\n\n\t\tif ($rebuilt === FALSE) {\n\t\t\t$this->debug_text('rebuild_tree(): Error rebuilding tree!');\n\t\t\t$this->db->RollBackTrans();\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->db->CommitTrans();\n\t\t$this->debug_text('rebuild_tree(): Tree rebuilt.');\n\t\treturn TRUE;\n\t}\n\t/**\n\t * _rebuild_tree ()\n\t *\n\t * Utility recursive function called by rebuild_tree()\n\t *\n\t * @return int Returns right value of this node + 1\n\t *\n\t * @param string Table name of group type\n\t * @param int Group ID #\n\t * @param int Left value of Group\n\t */\n\tfunction _rebuild_tree($table, $group_id, $left = 1) {\n\t\t$this->debug_text(\"_rebuild_tree(): Table: $table Group ID: $group_id Left: $left\");\n\n\t\t// get all children of this node\n\t\t$query = 'SELECT id FROM '. $table .' WHERE parent_id='. $this->db->quote($group_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('_rebuild_tree');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t// the right value of this node is the left value + 1\n\t\t$right = $left + 1;\n\n\t\twhile ($row = $rs->FetchRow()) {\n\t\t\t// recursive execution of this function for each\n\t\t\t// child of this node\n\t\t\t// $right is the current right value, which is\n\t\t\t// incremented by the rebuild_tree function\n\t\t\t$right = $this->_rebuild_tree($table, $row[0], $right);\n\n\t\t\tif ($right === FALSE) {\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t// we've got the left value, and now that we've processed\n\t\t// the children of this node we also know the right value\n\t\t$query  = 'UPDATE '. $table .' SET lft='. $this->db->quote($left) .', rgt='. $this->db->quote($right) .' WHERE id='. $this->db->quote($group_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('_rebuild_tree');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t// return the right value of this node + 1\n\t\treturn $right + 1;\n\t}\n\n\t/**\n\t * del_group()\n\t *\n\t * deletes a given group\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise.\n\t *\n\t * @param int Group ID #\n\t * @param bool If TRUE, child groups of this group will be reparented to the current group's parent.\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction del_group($group_id, $reparent_children=TRUE, $group_type='ARO') {\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\t$groups_map_table = $this->_db_table_prefix .'axo_groups_map';\n\t\t\t\t$groups_object_map_table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\t$groups_map_table = $this->_db_table_prefix .'aro_groups_map';\n\t\t\t\t$groups_object_map_table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"del_group(): ID: $group_id Reparent Children: $reparent_children Group Type: $group_type\");\n\n\t\tif (empty($group_id) ) {\n\t\t\t$this->debug_text(\"del_group(): Group ID ($group_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t// Get details of this group\n\t\t$query = 'SELECT id, parent_id, name, lft, rgt FROM '. $table .' WHERE id='. $this->db->quote($group_id);\n\t\t$group_details = $this->db->GetRow($query);\n\n\t\tif (!is_array($group_details)) {\n\t\t\t$this->debug_db('del_group');\n\t\t\treturn false;\n\t\t}\n\n\t\t$parent_id = $group_details[1];\n\n\t\t$left = $group_details[3];\n\t\t$right = $group_details[4];\n\n\t\t$this->db->BeginTrans();\n\n\t\t// grab list of all children\n\t\t$children_ids = $this->get_group_children($group_id, $group_type, 'RECURSE');\n\n\t\t// prevent deletion of root group & reparent of children if it has more than one immediate child\n\t\tif ($parent_id == 0) {\n\t\t\t$query = 'SELECT count(*) FROM '. $table .' WHERE parent_id='. $this->db->quote($group_id);\n\t\t\t$child_count = $this->db->GetOne($query);\n\n\t\t\tif (($child_count > 1) AND $reparent_children) {\n\t\t\t\t$this->debug_text ('del_group (): You cannot delete the root group and reparent children, this would create multiple root groups.');\n\t\t\t\t$this->db->RollbackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t$success = FALSE;\n\n\t\t/*\n\t\t * Handle children here.\n\t\t */\n\t\tswitch (TRUE) {\n\t\t\t// there are no child groups, just delete group\n\t\t\tcase !is_array($children_ids):\n\t\t\tcase count($children_ids) == 0:\n\t\t\t\t// remove acl maps\n\t\t\t\t$query = 'DELETE FROM '. $groups_map_table .' WHERE group_id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// remove group object maps\n\t\t\t\t$query = 'DELETE FROM '. $groups_object_map_table .' WHERE group_id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// remove group\n\t\t\t\t$query = 'DELETE FROM '. $table .' WHERE id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// move all groups right of deleted group left by width of deleted group\n\t\t\t\t$query = 'UPDATE '. $table .' SET lft=lft-' . ($right-$left+1) . ' WHERE lft>'. $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$query = 'UPDATE '. $table .' SET rgt=rgt-' . ($right-$left+1) . ' WHERE rgt>'. $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$success = TRUE;\n\t\t\t\tbreak;\n\t\t\tcase $reparent_children == TRUE:\n\t\t\t\t// remove acl maps\n\t\t\t\t$query = 'DELETE FROM '. $groups_map_table .' WHERE group_id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// remove group object maps\n\t\t\t\t$query = 'DELETE FROM '. $groups_object_map_table .' WHERE group_id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// remove group\n\t\t\t\t$query = 'DELETE FROM '. $table .' WHERE id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// set parent of immediate children to parent group\n\t\t\t\t$query = 'UPDATE '. $table .' SET parent_id='. $this->db->quote($parent_id) .' WHERE parent_id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// move all children left by 1\n\t\t\t\t$query = 'UPDATE '. $table .' SET lft=lft-1, rgt=rgt-1 WHERE lft>'. $this->db->quote($left) .' AND rgt<'. $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// move all groups right of deleted group left by 2\n\t\t\t\t$query = 'UPDATE '. $table .' SET lft=lft-2 WHERE lft>'. $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$query = 'UPDATE '. $table .' SET rgt=rgt-2 WHERE rgt>'. $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$success = TRUE;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// make list of group and all children\n\t\t\t\t$group_ids = $children_ids;\n\t\t\t\t$group_ids[] = $group_id;\n\n\t\t\t\t// remove acl maps\n\t\t\t\t$query = 'DELETE FROM '. $groups_map_table .' WHERE group_id IN ('. implode (',', $group_ids) .')';\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// remove group object maps\n\t\t\t\t$query = 'DELETE FROM '. $groups_object_map_table .' WHERE group_id IN ('. implode (',', $group_ids) .')';\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// remove groups\n\t\t\t\t$query = 'DELETE FROM '. $table .' WHERE id IN ('. implode (',', $group_ids) .')';\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// move all groups right of deleted group left by width of deleted group\n\t\t\t\t$query = 'UPDATE '. $table .' SET lft=lft-'. ($right - $left + 1) . ' WHERE lft>' . $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$query = 'UPDATE '. $table .' SET rgt=rgt-'. ($right - $left + 1) . ' WHERE rgt>' . $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$success = TRUE;\n\t\t}\n\n\t\t// if the delete failed, rollback the trans and return false\n\t\tif (!$success) {\n\n\t\t\t$this->debug_db('del_group');\n\t\t\t$this->db->RollBackTrans();\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text(\"del_group(): deleted group ID: $group_id\");\n\t\t$this->db->CommitTrans();\n\n\t\tif ($this->_caching == TRUE AND $this->_force_cache_expire == TRUE) {\n\t\t\t//Expire all cache.\n\t\t\t$this->Cache_Lite->clean('default');\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\n\t/*\n\t *\n\t * Objects (ACO/ARO/AXO)\n\t *\n\t */\n\n\t/**\n\t * get_object()\n\t *\n\t * Grabs all Objects's in the database, or specific to a section_value\n\t *\n\t * @return ADORecordSet  Returns recordset directly, with object ID only selected:\n\t *\n\t * @param string Filter to this section value\n\t * @param int Returns hidden objects if 1, leaves them out otherwise.\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO', or 'ACL'\n\t */\n\tfunction get_object($section_value = null, $return_hidden=1, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\tbreak;\n\t\t\tcase 'acl':\n\t\t\t\t$object_type = 'acl';\n\t\t\t\t$table = $this->_db_table_prefix .'acl';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_object(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"get_object(): Section Value: $section_value Object Type: $object_type\");\n\n\t\t$query = 'SELECT id FROM '. $table;\n\n\t\t$where = array();\n\n\t\tif (!empty($section_value)) {\n\t\t\t$where[] = 'section_value='. $this->db->quote($section_value);\n\t\t}\n\n\t\tif ($return_hidden==0 AND $object_type != 'acl') {\n\t\t\t$where[] = 'hidden=0';\n\t\t}\n\n\t\tif (!empty($where)) {\n\t\t\t$query .= ' WHERE '. implode(' AND ', $where);\n\t\t}\n\n\t\t$rs = $this->db->GetCol($query);\n\n\t\tif (!is_array($rs)) {\n\t\t\t$this->debug_db('get_object');\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return Object IDs\n\t\treturn $rs;\n\t}\n\t/**\n\t * get_ungrouped_objects()\n\t *\n\t * Grabs ID's of all Objects (ARO's and AXO's only) in the database not assigned to a Group.\n\t *\n\t * This function is useful for applications that synchronize user databases with an outside source.\n\t * If syncrhonization doesn't automatically place users in an appropriate group, this function can\n\t * quickly identify them so that they can be assigned to the correct group.\n\t *\n\t * @return array Returns an array of object ID's\n\t *\n\t * @param int Returns hidden objects if 1, does not if 0.\n\t * @param string Object Type, either 'ARO' or 'AXO' (groupable types)\n\t */\n\n\tfunction get_ungrouped_objects($return_hidden=1, $object_type=NULL) {\n\n\t\t   switch(strtolower(trim($object_type))) {\n\t\t\t\t   case 'aro':\n\t\t\t\t\t\t   $object_type = 'aro';\n\t\t\t\t\t\t   $table = $this->_db_table_prefix .'aro';\n\t\t\t\t\t\t   break;\n\t\t\t\t   case 'axo':\n\t\t\t\t\t\t   $object_type = 'axo';\n\t\t\t\t\t\t   $table = $this->_db_table_prefix .'axo';\n\t\t\t\t\t\t   break;\n\t\t\t\t   default:\n\t\t\t\t\t\t   $this->debug_text('get_ungrouped_objects(): Invalid Object Type: '. $object_type);\n\t\t\t\t\t\t   return FALSE;\n\t\t   }\n\n\t\t   $this->debug_text(\"get_ungrouped_objects(): Object Type: $object_type\");\n\n\t\t\t$query = 'SELECT id FROM '. $table. ' a\n\t\t\t\t\t\t\tLEFT JOIN ' . $this->_db_table_prefix. 'groups_'.$object_type.'_map b ON a.id = b.'. $object_type .'_id';\n\n\t\t   $where = array();\n\t\t   $where[] = 'b.group_id IS NULL';\n\n\t\t   if ($return_hidden==0) {\n\t\t\t\t   $where[] = 'a.hidden=0';\n\t\t   }\n\n\t\t   if (!empty($where)) {\n\t\t\t\t   $query .= ' WHERE '. implode(' AND ', $where);\n\t\t   }\n\n\t\t   $rs = $this->db->Execute($query);\n\n\t\t   if (!is_object($rs)) {\n\t\t\t\t   $this->debug_db('get_ungrouped_objects');\n\t\t\t\t   return false;\n\t\t   }\n\n\t\t   while(!$rs->EOF) {\n\t\t\t\t   $retarr[] = $rs->fields[0];\n\t\t\t\t   $rs->MoveNext();\n\t\t   }\n\n\t\t   // Return Array of object IDS\n\t\t   return $retarr;\n\t}\n\n\n\t/**\n\t * get_objects ()\n\t *\n\t * Grabs all Objects in the database, or specific to a section_value\n\t *\n\t * @return array Returns objects in format suitable for add_acl and is_conflicting_acl\n\t *\t- i.e. Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t *\n\t * @param string Filter for section value\n\t * @param int Returns hidden objects if 1, does not if 0\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO'\n\t */\n\tfunction get_objects($section_value = NULL, $return_hidden = 1, $object_type = NULL) {\n\t\tswitch (strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_objects(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"get_objects(): Section Value: $section_value Object Type: $object_type\");\n\n\t\t$query = 'SELECT section_value,value FROM '. $table;\n\n\t\t$where = array();\n\n\t\tif (!empty($section_value)) {\n\t\t\t$where[] = 'section_value='. $this->db->quote($section_value);\n\t\t}\n\n\t\tif ($return_hidden==0) {\n\t\t\t$where[] = 'hidden=0';\n\t\t}\n\n\t\tif (!empty($where)) {\n\t\t\t$query .= ' WHERE '. implode(' AND ', $where);\n\t\t}\n\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_objects');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$retarr = array();\n\n\t\twhile ($row = $rs->FetchRow()) {\n\t\t\t$retarr[$row[0]][] = $row[1];\n\t\t}\n\n\t\t// Return objects\n\t\treturn $retarr;\n\t}\n\n\t/**\n\t * get_object_data()\n\t *\n\t * Gets all data pertaining to a specific Object.\n\t *\n\t * @return array Returns 2-Dimensional array of rows with columns = ( section_value, value, order_value, name, hidden )\n\t *\n\t * @param int Object ID #\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO'\n\t */\n\tfunction get_object_data($object_id, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_object_data(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"get_object_data(): Object ID: $object_id Object Type: $object_type\");\n\n\t\tif (empty($object_id) ) {\n\t\t\t$this->debug_text(\"get_object_data(): Object ID ($object_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"get_object_data(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query  = 'SELECT section_value,value,order_value,name,hidden FROM '. $table .' WHERE id='. $this->db->quote($object_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_object_data');\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($rs->RecordCount() < 1) {\n\t\t\t$this->debug_text('get_object_data(): Returned  '. $row_count .' rows');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t// Return all objects\n\t\treturn $rs->GetRows();\n\t}\n\n\t/**\n\t * get_object_id()\n\t *\n\t * Gets the object_id given the section_value AND value of the object.\n\t *\n\t * @return int Object ID #\n\t *\n\t * @param string Object Section Value\n\t * @param string Object Value\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO'\n\t */\n\tfunction get_object_id($section_value, $value, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_object_id(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"get_object_id(): Section Value: $section_value Value: $value Object Type: $object_type\");\n\n\t\t$section_value = trim($section_value);\n\t\t$value = trim($value);\n\n\t\tif (empty($section_value) AND empty($value) ) {\n\t\t\t$this->debug_text(\"get_object_id(): Section Value ($value) AND value ($value) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"get_object_id(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query = 'SELECT id FROM '. $table .' WHERE section_value='. $this->db->quote($section_value) .' AND value='. $this->db->quote($value);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_object_id');\n\t\t\treturn false;\n\t\t}\n\n\t\t$row_count = $rs->RecordCount();\n\n\t\tif ($row_count > 1) {\n\t\t\t$this->debug_text(\"get_object_id(): Returned $row_count rows, can only return one. This should never happen, the database may be missing a unique key.\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($row_count == 0) {\n\t\t\t$this->debug_text(\"get_object_id(): Returned $row_count rows\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$row = $rs->FetchRow();\n\n\t\t//Return the ID.\n\t\treturn $row[0];\n\t}\n\n\t/**\n\t * get_object_section_value()\n\t *\n\t * Gets the object_section_value given object id\n\t *\n\t * @return string Object Section Value\n\t *\n\t * @param int Object ID #\n\t * @param string Object Type, either 'ACO', 'ARO', or 'AXO'\n\t */\n\tfunction get_object_section_value($object_id, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_object_section_value(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"get_object_section_value(): Object ID: $object_id Object Type: $object_type\");\n\n\t\tif (empty($object_id) ) {\n\t\t\t$this->debug_text(\"get_object_section_value(): Object ID ($object_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"get_object_section_value(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query = 'SELECT section_value FROM '. $table .' WHERE id='. $object_id;\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_object_section_value');\n\t\t\treturn false;\n\t\t}\n\n\t\t$row_count = $rs->RecordCount();\n\n\t\tif ($row_count > 1) {\n\t\t\t$this->debug_text(\"get_object_section_value(): Returned $row_count rows, can only return one.\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($row_count == 0) {\n\t\t\t$this->debug_text(\"get_object_section_value(): Returned $row_count rows\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$row = $rs->FetchRow();\n\n\t\t//Return the ID.\n\t\treturn $row[0];\n\t}\n\n\t/**\n\t * get_object_groups()\n\t *\n\t * Gets all groups an object is a member of.\n\t *\n\t * If $option == 'RECURSE' it will get all ancestor groups.\n\t * defaults to only get direct parents.\n\t *\n\t * @return array Array of Group ID #'s, or FALSE if Failed\n\t *\n\t * @param int Object ID #\n\t * @param string Object Type, either 'ARO' or 'AXO'\n\t * @param string Option, either 'RECURSE', or 'NO_RECURSE'\n\t */\n\tfunction get_object_groups($object_id, $object_type = 'ARO', $option = 'NO_RECURSE') {\n\t\t$this->debug_text('get_object_groups(): Object ID: '. $object_id .' Object Type: '. $object_type .' Option: '. $option);\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$group_table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\t$map_table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$group_table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\t$map_table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_object_groups(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\tif (empty($object_id)) {\n\t\t\t$this->debug_text('get_object_groups(): Object ID: ('. $object_id .') is empty, this is required');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif (strtoupper($option) == 'RECURSE') {\n\t\t    $query = '\n\t\t\t\tSELECT\t\tDISTINCT g.id AS group_id\n\t\t\t\tFROM\t\t'. $map_table .' gm\n\t\t\t\tLEFT JOIN\t'. $group_table .' g1 ON g1.id=gm.group_id\n\t\t\t\tLEFT JOIN\t'. $group_table .' g ON g.lft<=g1.lft AND g.rgt>=g1.rgt';\n\t\t} else {\n\t\t    $query = '\n\t\t    \tSELECT\t\tgm.group_id\n\t\t    \tFROM\t\t'. $map_table .' gm';\n\t\t}\n\n\t\t$query .= '\n\t\t\t\tWHERE\t\tgm.'. $object_type .'_id='. $this->db->quote($object_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_object_groups');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$retarr = array();\n\n\t\twhile ($row = $rs->FetchRow()) {\n\t\t\t$retarr[] = $row[0];\n\t\t}\n\n\t\treturn $retarr;\n\t}\n\n\t/**\n\t * add_object()\n\t *\n\t * Inserts a new object\n\t *\n\t * @return int Returns the ID # of the new object if successful, FALSE otherwise\n\t *\n\t * @param string Object Section Value\n\t * @param string Object Name\n\t * @param string Object Value\n\t * @param int Display Order\n\t * @param int Hidden Flag, either 1 to hide, or 0 to show.\n\t * @param string Object Type, either 'ACO', 'ARO', or 'AXO'\n\t */\n\tfunction add_object($section_value, $name, $value=0, $order=0, $hidden=0, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aco_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aro_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'axo_sections';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('add_object(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"add_object(): Section Value: $section_value Value: $value Order: $order Name: $name Object Type: $object_type\");\n\n\t\t$section_value = trim($section_value);\n\t\t$name = trim($name);\n\t\t$value = trim($value);\n\t\t$order = trim($order);\n\t\t$hidden = intval($hidden);\n\n\t\tif ($order == NULL OR $order == '') {\n\t\t\t$order = 0;\n\t\t}\n\n\t\tif (empty($name) OR empty($section_value) ) {\n\t\t\t$this->debug_text(\"add_object(): name ($name) OR section value ($section_value) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (strlen($name) >= 255 OR strlen($value) >= 230 ) {\n\t\t\t$this->debug_text(\"add_object(): name ($name) OR value ($value) is too long.\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"add_object(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t// Test to see if the section is invalid or object already exists.\n\t\t$query  = '\n\t\t\tSELECT\t\tCASE WHEN o.id IS NULL THEN 0 ELSE 1 END AS object_exists\n\t\t\tFROM\t\t'. $object_sections_table .' s\n\t\t\tLEFT JOIN\t'. $table .' o ON (s.value=o.section_value AND o.value='. $this->db->quote($value) .')\n\t\t\tWHERE\t\ts.value='. $this->db->quote($section_value);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('add_object');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif ($rs->RecordCount() != 1) {\n\t\t\t// Section is invalid\n\t\t\t$this->debug_text(\"add_object(): Section Value: $section_value Object Type ($object_type) does not exist, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$row = $rs->FetchRow();\n\n\t\tif ($row[0] == 1) {\n\t\t\t//Object is already created.\n\t\t\treturn true;\n\t\t}\n\n\t\t$insert_id = $this->db->GenID($this->_db_table_prefix.$object_type.'_seq',10);\n\t\t$query = 'INSERT INTO '. $table .' (id,section_value,value,order_value,name,hidden) VALUES('. $this->db->quote($insert_id) .','. $this->db->quote($section_value) .','. $this->db->quote($value) .','. $this->db->quote($order) .','. $this->db->quote($name) .','. $this->db->quote($hidden) .')';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('add_object');\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text(\"add_object(): Added object as ID: $insert_id\");\n\t\treturn $insert_id;\n\t}\n\n\t/**\n\t * edit_object()\n\t *\n\t * Edits a given Object\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t * @param int Object ID #\n\t * @param string Object Section Value\n\t * @param string Object Name\n\t * @param string Object Value\n\t * @param int Display Order\n\t * @param int Hidden Flag, either 1 to hide, or 0 to show\n\t * @param string Object Type, either 'ACO', 'ARO', or 'AXO'\n\t */\n\tfunction edit_object($object_id, $section_value, $name, $value=0, $order=0, $hidden=0, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'aco_map';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'aro_map';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'axo_map';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"edit_object(): ID: $object_id Section Value: $section_value Value: $value Order: $order Name: $name Object Type: $object_type\");\n\n\t\t$section_value = trim($section_value);\n\t\t$name = trim($name);\n\t\t$value = trim($value);\n\t\t$order = trim($order);\n\t\t$hidden = intval($hidden);\n\n\t\tif (empty($object_id) OR empty($section_value) ) {\n\t\t\t$this->debug_text(\"edit_object(): Object ID ($object_id) OR Section Value ($section_value) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($name) ) {\n\t\t\t$this->debug_text(\"edit_object(): name ($name) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"edit_object(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\n\t\t//Get old value incase it changed, before we do the update.\n\t\t$query = 'SELECT value, section_value FROM '. $table .' WHERE id='. $object_id;\n\t\t$old = $this->db->GetRow($query);\n\n\t\t$query  = '\n\t\t\tUPDATE\t'. $table .'\n\t\t\tSET\t\tsection_value='. $this->db->quote($section_value) .',\n\t\t\t\t\tvalue='. $this->db->quote($value) .',\n\t\t\t\t\torder_value='. $this->db->quote($order) .',\n\t\t\t\t\tname='. $this->db->quote($name) .',\n\t\t\t\t\thidden='. $this->db->quote($hidden) .'\n\t\t\tWHERE\tid='. $this->db->quote($object_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('edit_object');\n\t\t\t$this->db->RollbackTrans();\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text('edit_object(): Modified '. strtoupper($object_type) .' ID: '. $object_id);\n\n\t\tif ($old[0] != $value OR $old[1] != $section_value) {\n\t\t\t$this->debug_text(\"edit_object(): Value OR Section Value Changed, update other tables.\");\n\n\t\t\t$query  = '\n\t\t\t\tUPDATE\t'. $object_map_table .'\n\t\t\t\tSET\t\tvalue='. $this->db->quote($value) .',\n\t\t\t\t\t\tsection_value='. $this->db->quote($section_value) .'\n\t\t\t\tWHERE\tsection_value='. $this->db->quote($old[1]) .'\n\t\t\t\t\tAND\tvalue='. $this->db->quote($old[0]);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('edit_object');\n\t\t\t\t$this->db->RollbackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$this->debug_text ('edit_object(): Modified Map Value: '. $value .' Section Value: '. $section_value);\n\t\t}\n\n\t\t$this->db->CommitTrans();\n\n\t\treturn TRUE;\n\t}\n\n\t/**\n\t * del_object()\n\t *\n\t * Deletes a given Object and, if instructed to do so, erase all referencing objects\n\t *\n\t * ERASE feature by: Martino Piccinato\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise.\n\t *\n\t * @param int Object ID #\n\t * @param string Object Type, either 'ACO', 'ARO', or 'AXO'\n\t * @param bool Erases all referencing objects if TRUE, leaves them alone otherwise.\n\t */\n\tfunction del_object($object_id, $object_type=NULL, $erase=FALSE) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'aco_map';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'aro_map';\n\t\t\t\t$groups_map_table = $this->_db_table_prefix .'aro_groups_map';\n\t\t\t\t$object_group_table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'axo_map';\n\t\t\t\t$groups_map_table = $this->_db_table_prefix .'axo_groups_map';\n\t\t\t\t$object_group_table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('del_object(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"del_object(): ID: $object_id Object Type: $object_type, Erase all referencing objects: $erase\");\n\n\t\tif (empty($object_id) ) {\n\t\t\t$this->debug_text(\"del_object(): Object ID ($object_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"del_object(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\n\t\t// Get Object section_value/value (needed to look for referencing objects)\n\t\t$query = 'SELECT section_value,value FROM '. $table .' WHERE id='. $this->db->quote($object_id);\n\t\t$object = $this->db->GetRow($query);\n\n\t\tif (empty($object)) {\n\t\t\t$this->debug_text('del_object(): The specified object ('. strtoupper($object_type) .' ID: '. $object_id .') could not be found.');\n\t\t\t$this->db->RollbackTrans();\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$section_value = $object[0];\n\t\t$value = $object[1];\n\n\t\t// Get ids of acl referencing the Object (if any)\n\t\t$query = \"SELECT acl_id FROM $object_map_table WHERE value=\" . $this->db->quote($value) . \" AND section_value=\" . $this->db->quote($section_value);\n\t\t$acl_ids = $this->db->GetCol($query);\n\n\t\tif ($erase) {\n\t\t\t// We were asked to erase all acl referencing it\n\n\t\t\t$this->debug_text(\"del_object(): Erase was set to TRUE, delete all referencing objects\");\n\n\t\t\tif ($object_type == \"aro\" OR $object_type == \"axo\") {\n\t\t\t\t// The object can be referenced in groups_X_map tables\n\t\t\t\t// in the future this branching may become useless because\n\t\t\t\t// ACO might me \"groupable\" too\n\n\t\t\t\t// Get rid of groups_map referencing the Object\n\t\t\t\t$query = 'DELETE FROM '. $object_group_table .' WHERE '. $object_type .'_id='. $this->db->quote($object_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\t$this->debug_db('edit_object');\n\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!empty($acl_ids)) {\n\t\t\t\t//There are acls actually referencing the object\n\n\t\t\t\tif ($object_type == 'aco') {\n\t\t\t\t\t// I know it's extremely dangerous but\n\t\t\t\t\t// if asked to really erase an ACO\n\t\t\t\t\t// we should delete all acl referencing it\n\t\t\t\t\t// (and relative maps)\n\n\t\t\t\t\t// Do this below this branching\n\t\t\t\t\t// where it uses $orphan_acl_ids as\n\t\t\t\t\t// the array of the \"orphaned\" acl\n\t\t\t\t\t// in this case all referenced acl are\n\t\t\t\t\t// orhpaned acl\n\n\t\t\t\t\t$orphan_acl_ids = $acl_ids;\n\t\t\t\t} else {\n\t\t\t\t\t// The object is not an ACO and might be referenced\n\t\t\t\t\t// in still valid acls regarding also other object.\n\t\t\t\t\t// In these cases the acl MUST NOT be deleted\n\n\t\t\t\t\t// Get rid of $object_id map referencing erased objects\n\t\t\t\t\t$query = \"DELETE FROM $object_map_table WHERE section_value=\" . $this->db->quote($section_value) . \" AND value=\" . $this->db->quote($value);\n\t\t\t\t\t$this->db->Execute($query);\n\n\t\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\t\t$this->debug_db('edit_object');\n\t\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Find the \"orphaned\" acl. I mean acl referencing the erased Object (map)\n\t\t\t\t\t// not referenced anymore by other objects\n\n\t\t\t\t\t$sql_acl_ids = implode(\",\", $acl_ids);\n\n\t\t\t\t\t$query = '\n\t\t\t\t\t\tSELECT\t\ta.id\n\t\t\t\t\t\tFROM\t\t'. $this->_db_table_prefix .'acl a\n\t\t\t\t\t\tLEFT JOIN\t'. $object_map_table .' b ON a.id=b.acl_id\n\t\t\t\t\t\tLEFT JOIN\t'. $groups_map_table .' c ON a.id=c.acl_id\n\t\t\t\t\t\tWHERE\t\tb.value IS NULL\n\t\t\t\t\t\t\tAND\t\tb.section_value IS NULL\n\t\t\t\t\t\t\tAND\t\tc.group_id IS NULL\n\t\t\t\t\t\t\tAND\t\ta.id in ('. $sql_acl_ids .')';\n\t\t\t\t\t$orphan_acl_ids = $this->db->GetCol($query);\n\n\t\t\t\t} // End of else section of \"if ($object_type == \"aco\")\"\n\n\t\t\t\tif ($orphan_acl_ids) {\n\t\t\t\t\t// If there are orphaned acls get rid of them\n\n\t\t\t\t\tforeach ($orphan_acl_ids as $acl) {\n\t\t\t\t\t\t$this->del_acl($acl);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} // End of if ($acl_ids)\n\n\t\t\t// Finally delete the Object itself\n\t\t\t$query = \"DELETE FROM $table WHERE id=\" . $this->db->quote($object_id);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('edit_object');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$this->db->CommitTrans();\n\t\t\treturn true;\n\n\t\t} // End of \"if ($erase)\"\n\n\t\t$groups_ids = FALSE;\n\n\t\tif ($object_type == 'axo' OR $object_type == 'aro') {\n\t\t\t// If the object is \"groupable\" (may become unnecessary,\n\t\t\t// see above\n\n\t\t\t// Get id of groups where the object is assigned:\n\t\t\t// you must explicitly remove the object from its groups before\n\t\t\t// deleting it (don't know if this is really needed, anyway it's safer ;-)\n\n\t\t\t$query = 'SELECT group_id FROM '. $object_group_table .' WHERE '. $object_type .'_id='. $this->db->quote($object_id);\n\t\t\t$groups_ids = $this->db->GetCol($query);\n\t\t}\n\n\t\tif ( ( isset($acl_ids) AND !empty($acl_ids) ) OR ( isset($groups_ids) AND !empty($groups_ids) ) ) {\n\t\t\t// The Object is referenced somewhere (group or acl), can't delete it\n\n\t\t\t$this->debug_text(\"del_object(): Can't delete the object as it is being referenced by GROUPs (\".@implode($groups_ids).\") or ACLs (\".@implode($acl_ids,\",\").\")\");\n\t\t\t$this->db->RollBackTrans();\n\t\t\treturn false;\n\t\t} else {\n\t\t\t// The Object is NOT referenced anywhere, delete it\n\n\t\t\t$query = \"DELETE FROM $table WHERE id=\" . $this->db->quote($object_id);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif ( !is_object($rs) ) {\n\t\t\t\t$this->debug_db('edit_object');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$this->db->CommitTrans();\n\t\t\treturn true;\n\t\t}\n\n\t\t$this->db->RollbackTrans();\n\t\treturn false;\n\t}\n\n\t/*\n\t *\n\t * Object Sections\n\t *\n\t */\n\n\t/**\n\t * get_object_section_section_id()\n\t *\n\t * Gets the object_section_id given the name AND/OR value of the section.\n\t *\n\t * Will only return one section id, so if there are duplicate names it will return false.\n\t *\n\t * @return int Object Section ID if the object section is found AND is unique, or FALSE otherwise.\n\t *\n\t * @param string Object Name\n\t * @param string Object Value\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO', or 'ACL'\n\t *\n\t */\n\tfunction get_object_section_section_id($name = NULL, $value = NULL, $object_type = NULL) {\n\t\t$this->debug_text(\"get_object_section_section_id(): Value: $value Name: $name Object Type: $object_type\");\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\tcase 'aro':\n\t\t\tcase 'axo':\n\t\t\tcase 'acl':\n\t\t\t\t$object_type = strtolower(trim($object_type));\n\t\t\t\t$table = $this->_db_table_prefix . $object_type;\n\t\t\t\t$object_sections_table = $this->_db_table_prefix . $object_type .'_sections';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_object_section_section_id(): Invalid Object Type ('. $object_type . ')');\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$name = trim($name ?? '');\n\t\t$value = trim($value);\n\n\t\tif (empty($name) AND empty($value) ) {\n\t\t\t$this->debug_text('get_object_section_section_id(): Both Name ('. $name .') and Value ('. $value .') are empty, you must specify at least one.');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$query = 'SELECT id FROM '. $object_sections_table;\n\t\t$where = ' WHERE ';\n\n\t\t// limit by value if specified\n\t\tif (!empty($value)) {\n\t\t\t$query .= $where .'value='. $this->db->quote($value);\n\t\t\t$where = ' AND ';\n\t\t}\n\n\t\t// only use name if asked, this is SLOW\n\t\tif (!empty($name)) {\n\t\t\t$query .= $where .'name='. $this->db->quote($name);\n\t\t}\n\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_object_section_section_id');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$row_count = $rs->RecordCount();\n\n\t\t// If only one row is returned\n\t\tif ($row_count == 1) {\n\t\t\t// Return only the ID in the first row.\n\t\t\t$row = $rs->FetchRow();\n\t\t\treturn $row[0];\n\t\t}\n\n\t\t// If more than one row is returned\n\t\t// should only ever occur when using name as values are unique.\n\t\tif ($row_count > 1) {\n\t\t\t$this->debug_text('get_object_section_section_id(): Returned '. $row_count .' rows, can only return one. Please search by value not name, or make your names unique.');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t// No rows returned, no matching section found\n\t\t$this->debug_text('get_object_section_section_id(): Returned '. $row_count .' rows, no matching section found.');\n\t\treturn FALSE;\n\t}\n\n\t/**\n\t * add_object_section()\n\t *\n\t * Inserts an object Section\n\t *\n\t * @return int Object Section ID of new section\n\t *\n\t * @param string Object Name\n\t * @param string Object Value\n\t * @param int Display Order\n\t * @param int Hidden flag, hides section if 1, shows section if 0\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO', or 'ACL'\n\t */\n\tfunction add_object_section($name, $value=0, $order=0, $hidden=0, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aco_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aro_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'axo_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'acl':\n\t\t\t\t$object_type = 'acl';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'acl_sections';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"add_object_section(): Value: $value Order: $order Name: $name Object Type: $object_type\");\n\n\t\t$name = trim($name);\n\t\t$value = trim($value);\n\t\t$order = trim($order);\n\t\t$hidden = intval($hidden);\n\n\t\tif ($order == NULL OR $order == '') {\n\t\t\t$order = 0;\n\t\t}\n\n\t\tif (empty($name) ) {\n\t\t\t$this->debug_text(\"add_object_section(): name ($name) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"add_object_section(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$insert_id = $this->db->GenID($this->_db_table_prefix.$object_type.'_sections_seq',10);\n\t\t$query = 'insert into '. $object_sections_table .' (id,value,order_value,name,hidden) VALUES( '. $this->db->quote($insert_id) .', '. $this->db->quote($value) .', '. $this->db->quote($order) .', '. $this->db->quote($name) .', '. $this->db->quote($hidden) .')';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('add_object_section');\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$this->debug_text(\"add_object_section(): Added object_section as ID: $insert_id\");\n\t\t\treturn $insert_id;\n\t\t}\n\t}\n\n\t/**\n\t * edit_object_section()\n\t *\n\t * Edits a given Object Section\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t * @param int Object Section ID #\n\t * @param string Object Section Name\n\t * @param string Object Section Value\n\t * @param int Display Order\n\t * @param int Hidden Flag, hide object section if 1, show if 0\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO', or 'ACL'\n\t */\n\tfunction edit_object_section($object_section_id, $name, $value=0, $order=0, $hidden=0, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aco_sections';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'aco_map';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aro_sections';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'aro_map';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'axo_sections';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'axo_map';\n\t\t\t\tbreak;\n\t\t\tcase 'acl':\n\t\t\t\t$object_type = 'acl';\n\t\t\t\t$table = $this->_db_table_prefix .'acl';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'acl_sections';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('edit_object_section(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"edit_object_section(): ID: $object_section_id Value: $value Order: $order Name: $name Object Type: $object_type\");\n\n\t\t$name = trim($name);\n\t\t$value = trim($value);\n\t\t$order = trim($order);\n\t\t$hidden = intval($hidden);\n\n\t\tif (empty($object_section_id) ) {\n\t\t\t$this->debug_text(\"edit_object_section(): Section ID ($object_section_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($name) ) {\n\t\t\t$this->debug_text(\"edit_object_section(): name ($name) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"edit_object_section(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\n\t\t//Get old value incase it changed, before we do the update.\n\t\t$query = \"select value from $object_sections_table where id=\" . $this->db->quote($object_section_id);\n\t\t$old_value = $this->db->GetOne($query);\n\n\t\t$query = \"update $object_sections_table set\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue=\" . $this->db->quote($value) . \",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\torder_value=\" .$this->db->quote($order) . \",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\" . $this->db->quote($name) . \",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thidden=\" . $this->db->quote($hidden) . \"\n\t\t\t\t\t\t\t\t\t\t\t\t\twhere   id=\" . $this->db->quote($object_section_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('edit_object_section');\n\n\t\t\t$this->db->RollbackTrans();\n\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$this->debug_text(\"edit_object_section(): Modified aco_section ID: $object_section_id\");\n\n\t\t\tif ($old_value != $value) {\n\t\t\t\t$this->debug_text(\"edit_object_section(): Value Changed, update other tables.\");\n\n\t\t\t\t$query = \"update $table set\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsection_value=\" . $this->db->quote($value) . \"\n\t\t\t\t\t\t\t\t\t\t\t\t\twhere section_value = \" . $this->db->quote($old_value);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\t$this->debug_db('edit_object_section');\n\n\t\t\t\t\t$this->db->RollbackTrans();\n\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tif (!empty($object_map_table)) {\n\t\t\t\t\t\t$query = \"update $object_map_table set\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsection_value=\" . $this->db->quote($value) . \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhere section_value = \" . $this->db->quote($old_value);\n\t\t\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\t\t\tif ( !is_object($rs) ) {\n\t\t\t\t\t\t\t$this->debug_db('edit_object_section');\n\n\t\t\t\t\t\t\t$this->db->RollbackTrans();\n\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->debug_text(\"edit_object_section(): Modified ojbect_map value: $value\");\n\n\t\t\t\t\t\t\t$this->db->CommitTrans();\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//ACL sections, have no mapping table. Return true.\n\n\t\t\t\t\t\t$this->db->CommitTrans();\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n      $this->db->CommitTrans();\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * del_object_section()\n\t *\n\t * Deletes a given Object Section and, if explicitly asked, all the section objects\n\t *\n\t * ERASE feature by: Martino Piccinato\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t * @param int Object Section ID # to delete\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO', or 'ACL'\n\t * @param bool Erases all section objects assigned to the section\n\t */\n\tfunction del_object_section($object_section_id, $object_type=NULL, $erase=FALSE) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aco_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aro_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'axo_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'acl':\n\t\t\t\t$object_type = 'acl';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'acl_sections';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"del_object_section(): ID: $object_section_id Object Type: $object_type, Erase all: $erase\");\n\n\t\tif (empty($object_section_id) ) {\n\t\t\t$this->debug_text(\"del_object_section(): Section ID ($object_section_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"del_object_section(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t// Get the value of the section\n\t\t$query=\"SELECT value FROM $object_sections_table WHERE id=\" . $this->db->quote($object_section_id);\n\t\t$section_value = $this->db->GetOne($query);\n\n\t\t// Get all objects ids in the section\n\t\t$object_ids = $this->get_object($section_value, 1, $object_type);\n\n\t\tif($erase) {\n\t\t\t// Delete all objects in the section and for\n\t\t\t// each object delete the referencing object\n\t\t\t// (see del_object method)\n\t\t\tif (is_array($object_ids)) {\n\t\t\t\t\tforeach ($object_ids as $id) {\n\t\t\t\t\t\tif ( $object_type === 'acl' ) {\n\t\t\t\t\t\t\t$this->del_acl($id);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->del_object($id, $object_type, TRUE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif($object_ids AND !$erase) {\n\t\t\t// There are objects in the section and we\n\t\t\t// were not asked to erase them: don't delete it\n\n\t\t\t$this->debug_text(\"del_object_section(): Could not delete the section ($section_value) as it is not empty.\");\n\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\t// The section is empty (or emptied by this method)\n\n\t\t\t$query = \"DELETE FROM $object_sections_table where id=\" . $this->db->quote($object_section_id);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('del_object_section');\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$this->debug_text(\"del_object_section(): deleted section ID: $object_section_id Value: $section_value\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * get_section_data()\n\t *\n\t * Gets the section data given the Section Value\n\t *\n\t * @return array Returns numerically indexed array with the following columns:\n\t *\t- array[0] = (int) Section ID #\n\t *\t- array[1] = (string) Section Value\n\t *\t- array[2] = (int) Section Order\n\t *\t- array[3] = (string) Section Name\n\t *\t- array[4] = (int) Section Hidden?\n\t * @param string Section Value\n\t * @param string Object Type, either 'ACO', 'ARO', or 'AXO'\n\t */\n\tfunction get_section_data($section_value, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_sections';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_section_data(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"get_section_data(): Section Value: $section_value Object Type: $object_type\");\n\n\t\tif (empty($section_value) ) {\n\t\t\t$this->debug_text(\"get_section_data(): Section Value ($section_value) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"get_section_data(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query = \"SELECT id, value, order_value, name, hidden FROM $table WHERE value=\" . $this->db->quote($section_value);\n\t\t$row = $this->db->GetRow($query);\n\n\t\tif ($row) {\n\t\t\treturn $row;\n\t\t}\n\n\t\t$this->debug_text(\"get_section_data(): Section does not exist.\");\n\t\treturn false;\n\t}\n\n\t/**\n\t * clear_database()\n\t *\n\t * Deletes all data from the phpGACL tables. USE WITH CAUTION.\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t */\n        function clear_database(){\n\n\t\t\t$tablesToClear = array(\n\t\t\t\t\t$this->_db_table_prefix.'acl',\n\t\t\t\t\t$this->_db_table_prefix.'aco',\n\t\t\t\t\t$this->_db_table_prefix.'aco_map',\n\t\t\t\t\t$this->_db_table_prefix.'aco_sections',\n\t\t\t\t\t$this->_db_table_prefix.'aro',\n\t\t\t\t\t$this->_db_table_prefix.'aro_groups',\n\t\t\t\t\t$this->_db_table_prefix.'aro_groups_map',\n\t\t\t\t\t$this->_db_table_prefix.'aro_map',\n\t\t\t\t\t$this->_db_table_prefix.'aro_sections',\n\t\t\t\t\t$this->_db_table_prefix.'axo',\n\t\t\t\t\t$this->_db_table_prefix.'axo_groups',\n\t\t\t\t\t$this->_db_table_prefix.'axo_groups_map',\n\t\t\t\t\t$this->_db_table_prefix.'axo_map',\n\t\t\t\t\t$this->_db_table_prefix.'axo_sections',\n\t\t\t\t\t$this->_db_table_prefix.'groups_aro_map',\n\t\t\t\t\t$this->_db_table_prefix.'groups_axo_map'\n\t\t\t\t\t);\n\n\t\t\t// Get all the table names and loop\n\t\t\t$tableNames = $this->db->MetaTables('TABLES');\n\t\t\t$query = array();\n\t\t\tforeach ($tableNames as $key => $value){\n\t\t\t\t\tif (in_array($value, $tablesToClear) ) {\n\t\t\t\t\t\t\t$query[] = 'TRUNCATE TABLE '.$value.';';\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Loop the queries and return.\n\t\t\tforeach ($query as $key => $value){\n\t\t\t\t\t$result = $this->db->Execute($value);\n\t\t\t}\n\n\t\t\treturn TRUE;\n        }\n\n}\n?>\n", "<?php\n\n/**\n * Software version identification.\n *\n * @package OpenEMR\n * @link https://www.open-emr.org/wiki\n * @author Robert Down <robertdown@live.com>\n * @license https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n *\n */\n\n// Software version identification.\n// This is used for display purposes, and also the major/minor/patch\n// numbers are stored in the database and used to determine which sql\n// upgrade file is the starting point for the next upgrade.\n$v_major = '6';\n$v_minor = '1';\n$v_patch = '0';\n$v_tag   = '-dev'; // minor revision number, should be empty for production releases\n\n// A real patch identifier. This is incremented when we release a patch for a\n// production release. Note the above $v_patch variable is a misnomer and actually\n// stores release version information.\n$v_realpatch = '0';\n\n// Database version identifier, this is to be incremented whenever there\n// is a database change in the course of development.  It is used\n// internally to determine when a database upgrade is needed.\n//\n$v_database = 435;\n\n// Access control version identifier, this is to be incremented whenever there\n// is a access control change in the course of development.  It is used\n// during installation to determine what the installed version of the access\n// controls is (subsequently the acl_upgrade.php script then is used to\n// upgrade and track this value)\n//\n$v_acl = 11;\n\n// Version for JavaScript and stylesheet includes. Increment whenever a .js or .css file changes.\n// Also whenever you change a .js or .css file, make sure that all URLs referencing it\n// end with \"?v=$v_js_includes\".  Search the code for examples of doing this.\n// All this is to keep browsers from using an older cached version.\n// Need to assign it as a global below to work in template scripts.\nif (!empty($_ENV['OPENEMR__ENVIRONMENT']) && ($_ENV['OPENEMR__ENVIRONMENT'] === 'dev')) {\n    $v_js_includes = md5(microtime());\n} else {\n    // Change this number when bumping\n    $v_js_includes = 69;\n}\n\n// Do not modify below\n$GLOBALS['v_js_includes'] = $v_js_includes;\n"], "fixing_code": ["<?php\n\n/**\n * Upgrade script for access controls.\n *\n * This script will update the phpGACL database, which include\n * Access Control Objects(ACO), Groups(ARO), and Access Control\n * Lists(ACL) to the most recent version.\n * It will display whether each update already exist\n * or if it was updated succesfully.\n * To avoid reversing customizations, upgrade is done in versions,\n * which are recorded in the database. To add another version of\n * changes, use the following template:\n * <pre>// Upgrade for acl_version <acl_version_here>\n * $upgrade_acl = <acl_version_here>;\n * if ($acl_version < $upgrade_acl) {\n *   echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \".$upgrade_acl.\":</B></BR>\";\n *\n *   //Collect the ACL ID numbers.\n *   echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n *\n *   //Add new object Sections\n *   echo \"<BR/><B>Adding new object sections</B><BR/>\";\n *\n *   //Add new Objects\n *   echo \"<BR/><B>Adding new objects</B><BR/>\";\n *\n *   //Update already existing Objects\n *   echo \"<BR/><B>Upgrading objects</B><BR/>\";\n *\n *   //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n *   // (will also place in the appropriate group and CREATE a new group if needed)\n *   echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n *\n *   //Update the ACLs\n *   echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n *\n *   //DONE with upgrading to this version\n *   $acl_version = $upgrade_acl;\n * }\n * </pre>\n *\n * Updates included:\n *  <pre>---VERSION 1 ACL---\n *   2.8.2\n *     Section \"sensitivities\" (Sensitivities):\n *       ADD  normal   Normal              (Administrators, Physicians, Clinicians(addonly))\n *       ADD  high     High                (Administrators, Physicians)\n *     Section \"admin\"         (Administration):\n *       ADD  super    Superuser           (Adminstrators)\n *   2.8.4\n *     Section \"admin\"         (Administration):\n *       ADD  drugs    Pharmacy Dispensary (Administrators, Physicians, Clinicians(write))\n *       ADD  acl      ACL Administration (Administrators)\n *     Section \"sensitivities\" (Sensitivities):\n *       EDIT high     High               (ensure the order variable is '20')\n *     Section \"acct\"          (Accounting):\n *       ADD  disc     Price Discounting (Administrators, Physicians, Accounting(write))\n *   3.0.2\n *     ADD Section \"lists\" (Lists):\n *       ADD  default   Default List (write,addonly optional)  (Administrators)\n *       ADD  state     State List (write,addonly optional)  (Administrators)\n *       ADD  country   Country List (write,addonly optional)  (Administrators)\n *       ADD  language  Language List (write,addonly optional)  (Administrators)\n *       ADD  ethrace   Ethnicity-Race List (write,addonly optional)  (Administrators)\n *     ADD Section \"placeholder\" (Placeholder):\n *       ADD  filler    Placeholder (Maintains empty ACLs)\n *     ACL/Group  doc   addonly  \"Physicians\"   (filler aco)\n *     ACL/Group  front addonly  \"Front Office\" (filler aco)\n *     ACL/Group  back  addonly  \"Accounting\"   (filler aco)\n *   3.3.0\n *     Section \"patients\" (Patients):\n *       ADD  sign  Sign Lab Results (Physicians)\n *     ACL/Group  breakglass  write  \"Emergency Login\"  (added all aco's to it)\n *   4.1.0\n *     Section \"nationnotes\" (Nation Notes):\n *       ADD  nn_configure  Nation Notes Configure  (Administrators, Emergency Login)\n *     Section \"patientportal\" (Patient Portal):\n *       ADD  portal    Patient Portal     (Administrators, Emergency Login)\n *   4.1.1\n *     ACL/Group  doc   wsome  \"Physicians\"   (filler aco)\n *     ACL/Group  clin  wsome  \"Clinicians\"   (filler aco)\n *     ACL/Group  front wsome  \"Front Office\" (filler aco)\n *     ACL/Group  back  wsome  \"Accounting\"   (filler aco)\n *     ACL/Group  doc   view   \"Physicians\"   (filler aco)\n *     ACL/Group  clin  view   \"Clinicians\"   (filler aco)\n *     ACL/Group  front view   \"Front Office\" (filler aco)\n *     ACL/Group  back  view   \"Accounting\"   (filler aco)\n *   4.1.3\n *     Section \"menus\" (Menus):\n *       ADD modle Module (Administrators, Emergency Login)\n *   5.0.1\n *     Section \"patients\" (Patients):\n *       ADD  reminder    Patient Reminders         (Physicians,Clinicians(addonly))\n *       ADD  alert       Clinical Reminders/Alerts (Physicians,Clinicians,Front Office(view),Accounting(view))\n *       ADD  disclosure  Disclosures               (Physicians,Clinicians(addonly))\n *       ADD  rx          Prescriptions             (Physicians,Clinicians(addonly))\n *       ADD  amendment   Amendments                (Physicians,Clinicians(addonly))\n *       ADD  lab         Lab Results               (Physicians,Clinicians(addonly))\n *       ADD  docs_rm     Documents Delete          (Administrators)\n *     Section \"admin\" (Administration):\n *       ADD  multipledb  Multipledb                (Administrators)\n *       ADD  menu        Menu                      (Administrators)\n *     Section \"groups\" (Groups):\n *       ADD  gadd        View/Add/Update groups    (Administrators)\n *       ADD  gcalendar   View/Create/Update groups appointment in calendar (Administrators,Physicians,Clinicians)\n *       ADD  glog        Group encounter log       (Administrators,Physicians, Clinicians)\n *       ADD  gdlog       Group detailed log of appointment in patient record (Administrators)\n *       ADD  gm          Send message from the permanent group therapist to the personal therapist (Administrators)\n *   5.0.2\n *     Section \"patients\" (Patients):\n *       ADD  pat_rep     Patient Report            (Administrators)\n * </pre>\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2012-2017 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n// Checks if the server's PHP version is compatible with OpenEMR:\nrequire_once(dirname(__FILE__) . \"/src/Common/Compatibility/Checker.php\");\n$response = OpenEMR\\Common\\Compatibility\\Checker::checkPhpVersion();\nif ($response !== true) {\n    die(htmlspecialchars($response));\n}\n\n$ignoreAuth = true; // no login required\n\nrequire_once('interface/globals.php');\n\nuse OpenEMR\\Common\\Acl\\AclExtended;\n\n$acl_version = AclExtended::getAclVersion();\nif (empty($acl_version)) {\n    $acl_version = 0;\n}\n\n// Upgrade for acl_version 1\n$upgrade_acl = 1;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    //Get Administrator ACL ID number\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    //Get Doctor ACL ID Number\n    $doc_write = AclExtended::getAclIdNumber('Physicians', 'write');\n    //Get Clinician ACL with write access ID number\n    $clin_write = AclExtended::getAclIdNumber('Clinicians', 'write');\n    //Get Clinician ACL with addonly access ID number\n    $clin_addonly = AclExtended::getAclIdNumber('Clinicians', 'addonly');\n    //Get Receptionist ACL ID number\n    $front_write = AclExtended::getAclIdNumber('Front Office', 'write');\n    //Get Accountant ACL ID number\n    $back_write = AclExtended::getAclIdNumber('Accounting', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    //Add 'Sensitivities' object section (added in 2.8.2)\n    AclExtended::addObjectSectionAcl('sensitivities', 'Sensitivities');\n    //Add 'Lists' object section (added in 3.0.2)\n    AclExtended::addObjectSectionAcl('lists', 'Lists');\n    //Add 'Placeholder' object section (added in 3.0.2)\n    AclExtended::addObjectSectionAcl('placeholder', 'Placeholder');\n    //Add 'Nation Notes' object section (added in 4.1.0)\n    AclExtended::addObjectSectionAcl('nationnotes', 'Nation Notes');\n    //Add 'Patient Portal' object section (added in 4.1.0)\n    AclExtended::addObjectSectionAcl('patientportal', 'Patient Portal');\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n    //Add 'Normal' sensitivity object, order variable is default 10 (added in 2.8.2)\n    AclExtended::addObjectAcl('sensitivities', 'Sensitivities', 'normal', 'Normal');\n    //Add 'High' sensitivity object, order variable is set to 20 (added in 2.8.2)\n    AclExtended::addObjectAclWithOrder('sensitivities', 'Sensitivities', 'high', 'High', 20);\n    //Add 'Pharmacy Dispensary' object (added in 2.8.4)\n    AclExtended::addObjectAcl('admin', 'Administration', 'drugs', 'Pharmacy Dispensary');\n    //Add 'ACL Administration' object (added in 2.8.4)\n    AclExtended::addObjectAcl('admin', 'Administration', 'acl', 'ACL Administration');\n    //Add 'Price Discounting' object (added in 2.8.4)\n    AclExtended::addObjectAcl('acct', 'Accounting', 'disc', 'Price Discounting');\n    //Add 'Default List (write,addonly optional)' object (added in 3.0.2)\n    AclExtended::addObjectAcl('lists', 'Lists', 'default', 'Default List (write,addonly optional)');\n    //Add 'State List (write,addonly optional)' object (added in 3.0.2)\n    AclExtended::addObjectAcl('lists', 'Lists', 'state', 'State List (write,addonly optional)');\n    //Add 'Country List (write,addonly optional)' object (added in 3.0.2)\n    AclExtended::addObjectAcl('lists', 'Lists', 'country', 'Country List (write,addonly optional)');\n    //Add 'Language List (write,addonly optional)' object (added in 3.0.2)\n    AclExtended::addObjectAcl('lists', 'Lists', 'language', 'Language List (write,addonly optional)');\n    //Add 'Ethnicity-Race List (write,addonly optional)' object (added in 3.0.2)\n    AclExtended::addObjectAcl('lists', 'Lists', 'ethrace', 'Ethnicity-Race List (write,addonly optional)');\n    //Add 'Placeholder (Maintains empty ACLs)' object (added in 3.0.2)\n    AclExtended::addObjectAcl('placeholder', 'Placeholder', 'filler', 'Placeholder (Maintains empty ACLs)');\n    //Add 'Sign Lab Results (write,addonly optional)' object (added in 3.3.0)\n    AclExtended::addObjectAcl('patients', 'Patients', 'sign', 'Sign Lab Results (write,addonly optional)');\n    //Add 'nationnotes' object (added in 4.1.0)\n    AclExtended::addObjectAcl('nationnotes', 'Nation Notes', 'nn_configure', 'Nation Notes Configure');\n    //Add 'patientportal' object (added in 4.1.0)\n    AclExtended::addObjectAcl('patientportal', 'Patient Portal', 'portal', 'Patient Portal');\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n    //Ensure that 'High' sensitivity object order variable is set to 20\n    AclExtended::editObjectAcl('sensitivities', 'Sensitivities', 'high', 'High', 20);\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n    //Add 'Physicians' ACL with 'addonly' and collect the ID number (added in 3.0.2)\n    $doc_addonly = AclExtended::addNewACL('Physicians', 'doc', 'addonly', 'Things that physicians can read and enter but not modify');\n    //Add 'Front Office' ACL with 'addonly' and collect the ID number (added in 3.0.2)\n    $front_addonly = AclExtended::addNewACL('Front Office', 'front', 'addonly', 'Things that front office can read and enter but not modify');\n    //Add 'Accounting' ACL with 'addonly' and collect the ID number (added in 3.0.2)\n    $back_addonly = AclExtended::addNewACL('Accounting', 'back', 'addonly', 'Things that back office can read and enter but not modify');\n    //Add 'Emergency Login' ACL with 'write' and collect the ID number (added in 3.3.0)\n    $emergency_write = AclExtended::addNewACL('Emergency Login', 'breakglass', 'write', 'Things that can use for emergency login, can read and modify');\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    //Insert the 'super' object from the 'admin' section into the Administrators group write ACL (added in 2.8.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'admin', 'Administration', 'super', 'Superuser', 'write');\n    //Insert the 'high' object from the 'sensitivities' section into the Administrators group write ACL (added in 2.8.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'sensitivities', 'Sensitivities', 'high', 'High', 'write');\n    //Insert the 'normal' object from the 'sensitivities' section into the Administrators group write ACL (added in 2.8.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'sensitivities', 'Sensitivities', 'normal', 'Normal', 'write');\n    //Insert the 'high' object from the 'sensitivities' section into the Physicians group write ACL (added in 2.8.2)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'sensitivities', 'Sensitivities', 'high', 'High', 'write');\n    //Insert the 'normal' object from the 'sensitivities' section into the Physicians group write ACL (added in 2.8.2)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'sensitivities', 'Sensitivities', 'normal', 'Normal', 'write');\n    //Insert the 'normal' object from the 'sensitivities' section into the Clinicians group  addonly ACL (added in 2.8.2)\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'sensitivities', 'Sensitivities', 'normal', 'Normal', 'addonly');\n    //Insert the 'drugs' object from the 'admin' section into the Administrators group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'admin', 'Administration', 'drugs', 'Pharmacy Dispensary', 'write');\n    //Insert the 'drugs' object from the 'admin' section into the Physicians group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'admin', 'Administration', 'drugs', 'Pharmacy Dispensary', 'write');\n    //Insert the 'drugs' object from the 'admin' section into the Clinicians group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($clin_write, 'Clinicians', 'admin', 'Administration', 'drugs', 'Pharmacy Dispensary', 'write');\n    //Insert the 'acl' object from the 'admin' section into the Administrators group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'admin', 'Administration', 'acl', 'ACL Administration', 'write');\n    //Insert the 'disc' object from the 'acct' section into the Administrators group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'acct', 'Accounting', 'disc', 'Price Discounting', 'write');\n    //Insert the 'disc' object from the 'acct' section into the Accounting group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($back_write, 'Accounting', 'acct', 'Accounting', 'disc', 'Price Discounting', 'write');\n    //Insert the 'disc' object from the 'acct' section into the Physicians group write ACL (added in 2.8.4)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'acct', 'Accounting', 'disc', 'Price Discounting', 'write');\n    //Insert the 'default' object from the 'lists' section into the Administrators group write ACL (added in 3.0.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'lists', 'Lists', 'default', 'Default List (write,addonly optional)', 'write');\n    //Insert the 'state' object from the 'lists' section into the Administrators group write ACL (added in 3.0.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'lists', 'Lists', 'state', 'State List (write,addonly optional)', 'write');\n    //Insert the 'country' object from the 'lists' section into the Administrators group write ACL (added in 3.0.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'lists', 'Lists', 'country', 'Country List (write,addonly optional)', 'write');\n    //Insert the 'language' object from the 'lists' section into the Administrators group write ACL (added in 3.0.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'lists', 'Lists', 'language', 'Language List (write,addonly optional)', 'write');\n    //Insert the 'race' object from the 'lists' section into the Administrators group write ACL (added in 3.0.2)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'lists', 'Lists', 'ethrace', 'Ethnicity-Race List (write,addonly optional)', 'write');\n    //Update ACLs for Emergency Login\n    //Insert the 'disc' object from the 'acct' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'acct', 'Accounting', 'disc', 'Price Discounting', 'write');\n    //Insert the 'bill' object from the 'acct' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'acct', 'Accounting', 'bill', 'Billing (write optional)', 'write');\n    //Insert the 'eob' object from the 'acct' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'acct', 'Accounting', 'eob', 'EOB Data Entry', 'write');\n    //Insert the 'rep' object from the 'acct' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'acct', 'Accounting', 'rep', 'Financial Reporting - my encounters', 'write');\n    //Insert the 'rep_a' object from the 'acct' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'acct', 'Accounting', 'rep_a', 'Financial Reporting - anything', 'write');\n    //Insert the 'calendar' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'calendar', 'Calendar Settings', 'write');\n    //Insert the 'database' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'database', 'Database Reporting', 'write');\n    //Insert the 'forms' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'forms', 'Forms Administration', 'write');\n    //Insert the 'practice' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'practice', 'Practice Settings', 'write');\n    //Insert the 'superbill' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'superbill', 'Superbill Codes Administration', 'write');\n    //Insert the 'users' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'users', 'Users/Groups/Logs Administration', 'write');\n    //Insert the 'batchcom' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'batchcom', 'Batch Communication Tool', 'write');\n    //Insert the 'language' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'language', 'Language Interface Tool', 'write');\n    //Insert the 'super' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'super', 'Superuser', 'write');\n    //Insert the 'drugs' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'drugs', 'Pharmacy Dispensary', 'write');\n    //Insert the 'acl' object from the 'admin' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'acl', 'ACL Administration', 'write');\n    //Insert the 'auth_a' object from the 'encounters' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'auth_a', 'Authorize - any encounters', 'write');\n    //Insert the 'coding_a' object from the 'encounters' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'coding_a', 'Coding - any encounters (write,wsome optional)', 'write');\n    //Insert the 'notes_a' object from the 'encounters' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'notes_a', 'Notes - any encounters (write,addonly optional)', 'write');\n    //Insert the 'date_a' object from the 'encounters' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'date_a', 'Fix encounter dates - any encounters', 'write');\n    //Insert the 'default' object from the 'lists' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'lists', 'Lists', 'default', 'Default List (write,addonly optional)', 'write');\n    //Insert the 'state' object from the 'lists' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'lists', 'Lists', 'state', 'State List (write,addonly optional)', 'write');\n    //Insert the 'country' object from the 'lists' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'lists', 'Lists', 'country', 'Country List (write,addonly optional)', 'write');\n    //Insert the 'language' object from the 'lists' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'lists', 'Lists', 'language', 'Language List (write,addonly optional)', 'write');\n    //Insert the 'ethrace' object from the 'lists' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'lists', 'Lists', 'ethrace', 'Ethnicity-Race List (write,addonly optional)', 'write');\n    //Insert the 'appt' object from the 'patients' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'appt', 'Appointments (write,wsome optional)', 'write');\n    //Insert the 'demo' object from the 'patients' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'demo', 'Demographics (write,addonly optional)', 'write');\n    //Insert the 'med' object from the 'patients' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'med', 'Medical/History (write,addonly optional)', 'write');\n    //Insert the 'trans' object from the 'patients' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'trans', 'Transactions (write optional)', 'write');\n    //Insert the 'docs' object from the 'patients' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'docs', 'Documents (write,addonly optional)', 'write');\n    //Insert the 'notes' object from the 'patients' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'notes', 'Patient Notes (write,addonly optional)', 'write');\n    //Insert the 'high' object from the 'sensitivities' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'sensitivities', 'Sensitivities', 'high', 'High', 'write');\n    //Insert the 'normal' object from the 'sensitivities' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'sensitivities', 'Sensitivities', 'normal', 'Normal', 'write');\n    //Insert the 'sign' object from the 'patients' section into the Physicians group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'sign', 'Sign Lab Results (write,addonly optional)', 'write');\n    //Insert the 'sign' object from the 'nationnotes' section into the Administrators group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'nationnotes', 'Nation Notes', 'nn_configure', 'Nation Notes Configure', 'write');\n    //Insert the 'sign' object from the 'nationnotes' section into the Emergency Login group write ACL (added in 3.3.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'nationnotes', 'Nation Notes', 'nn_configure', 'Nation Notes Configure', 'write');\n    //Insert the 'patientportal' object from the 'patientportal' section into the Administrators group write ACL (added in 4.1.0)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patientportal', 'Patient Portal', 'portal', 'Patient Portal', 'write');\n    //Insert the 'patientportal' object from the 'patientportal' section into the Emergency Login group write ACL (added in 4.1.0)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patientportal', 'Patient Portal', 'portal', 'Patient Portal', 'write');\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 2\n$upgrade_acl = 2;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n    AclExtended::addNewACL('Physicians', 'doc', 'wsome', 'Things that physicians can read and partly modify');\n    AclExtended::addNewACL('Clinicians', 'clin', 'wsome', 'Things that clinicians can read and partly modify');\n    AclExtended::addNewACL('Front Office', 'front', 'wsome', 'Things that front office can read and partly modify');\n    AclExtended::addNewACL('Accounting', 'back', 'wsome', 'Things that back office can read and partly modify');\n    AclExtended::addNewACL('Physicians', 'doc', 'view', 'Things that physicians can only read');\n    AclExtended::addNewACL('Clinicians', 'clin', 'view', 'Things that clinicians can only read');\n    AclExtended::addNewACL('Front Office', 'front', 'view', 'Things that front office can only read');\n    AclExtended::addNewACL('Accounting', 'back', 'view', 'Things that back office can only read');\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 3\n$upgrade_acl = 3;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    //Get Administrator ACL ID number\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    //Get Emergency ACL ID number\n    $emergency_write = AclExtended::getAclIdNumber('Emergency Login', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    //Add 'Menus' object section (added in 4.1.3)\n    AclExtended::addObjectSectionAcl('menus', 'Menus');\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n    //Add 'modules' object (added in 4.1.3)\n    AclExtended::addObjectAcl('menus', 'Menus', 'modle', 'Modules');\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    //Insert the 'Modules' object from the 'Menus' section into the Administrators group write ACL (added in 4.1.3)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'menus', 'Menus', 'modle', 'Modules', 'write');\n    //Insert the 'Modules' object from the 'Menus' section into the Emergency Login group write ACL (added in 4.1.3)\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'menus', 'Menus', 'modle', 'Modules', 'write');\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 4\n$upgrade_acl = 4;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    //Get Administrator ACL ID number\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    //Get Doctor ACL ID Number\n    $doc_write = AclExtended::getAclIdNumber('Physicians', 'write');\n    //Get Clinician ACL with write access ID number\n    $clin_write = AclExtended::getAclIdNumber('Clinicians', 'write');\n    //Get Clinician ACL with addonly access ID number\n    $clin_addonly = AclExtended::getAclIdNumber('Clinicians', 'addonly');\n    //Get Receptionist ACL ID number\n    $front_write = AclExtended::getAclIdNumber('Front Office', 'write');\n    //Get Accountant ACL ID number\n    $back_write = AclExtended::getAclIdNumber('Accounting', 'write');\n\n    //Add new object Sections\n    // echo \"<BR/><B>Adding new object sections</B><BR/>\";\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n    // Add 'Patient Reminders (write,addonly optional)' object (added in 5.0.1)\n    AclExtended::addObjectAcl('patients', 'Patients', 'reminder', 'Patient Reminders (write,addonly optional)');\n    // Add 'Clinical Reminders/Alerts (write,addonly optional)' object (added in 5.0.1)\n    AclExtended::addObjectAcl('patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)');\n    // Add 'Disclosures (write,addonly optional)' object (added in 5.0.1)\n    AclExtended::addObjectAcl('patients', 'Patients', 'disclosure', 'Disclosures (write,addonly optional)');\n    // Add 'Prescriptions (write,addonly optional)' object (added in 5.0.1)\n    AclExtended::addObjectAcl('patients', 'Patients', 'rx', 'Prescriptions (write,addonly optional)');\n    // Add 'Amendments (write,addonly optional)' object (added in 5.0.1)\n    AclExtended::addObjectAcl('patients', 'Patients', 'amendment', 'Amendments (write,addonly optional)');\n    // Add 'Lab Results (write,addonly optional)' object (added in 5.0.1)\n    AclExtended::addObjectAcl('patients', 'Patients', 'lab', 'Lab Results (write,addonly optional)');\n\n    //Update already existing Objects\n    // echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    // echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    //Insert the 'reminder' object from the 'patients' section into the Physicians group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'reminder', 'Patient Reminders (write,addonly optional)', 'write');\n    //Insert the 'alert' object from the 'patients' section into the Physicians group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)', 'write');\n    //Insert the 'disclosure' object from the 'patients' section into the Physicians group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'disclosure', 'Disclosures (write,addonly optional)', 'write');\n    //Insert the 'rx' object from the 'patients' section into the Physicians group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'rx', 'Prescriptions (write,addonly optional)', 'write');\n    //Insert the 'amendment' object from the 'patients' section into the Physicians group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'amendment', 'Amendments (write,addonly optional)', 'write');\n    //Insert the 'lab' object from the 'patients' section into the Physicians group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($doc_write, 'Physicians', 'patients', 'Patients', 'lab', 'Lab Results (write,addonly optional)', 'write');\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n //This is a template for a new revision, when needed\n// Upgrade for acl_version 5\n$upgrade_acl = 5;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    //Get Accountant ACL ID number\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    // Add 'Groups' object (added in 5.0.1)\n    AclExtended::addObjectSectionAcl('groups', 'Groups');\n\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n    // Add 'Multipledb' object (added in 5.0.1)\n    AclExtended::addObjectAcl('admin', 'Administration', 'multipledb', 'Multipledb');\n    AclExtended::addObjectAcl('groups', 'Groups', 'gadd', 'View/Add/Update groups');\n    AclExtended::addObjectAcl('groups', 'Groups', 'gcalendar', 'View/Create/Update groups appointment in calendar');\n    AclExtended::addObjectAcl('groups', 'Groups', 'glog', 'Group encounter log');\n    AclExtended::addObjectAcl('groups', 'Groups', 'gdlog', 'Group detailed log of appointment in patient record');\n    AclExtended::addObjectAcl('groups', 'Groups', 'gm', 'Send message from the permanent group therapist to the personal therapist');\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    AclExtended::updateAcl($admin_write, 'Administrators', 'groups', 'Groups', 'gadd', 'View/Add/Update groups', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'groups', 'Groups', 'gcalendar', 'View/Create/Update groups appointment in calendar', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'groups', 'Groups', 'glog', 'Group encounter log', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'groups', 'Groups', 'gdlog', 'Group detailed log of appointment in patient record', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'groups', 'Groups', 'gm', 'Send message from the permanent group therapist to the personal therapist', 'write');\n    //Insert the 'Multipledb' object from the 'admin' section into the Administrators group write ACL (added in 5.0.1)\n    AclExtended::updateAcl($admin_write, 'Administrators', 'admin', 'Administration', 'multipledb', 'Multipledb', 'write');\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 6\n$upgrade_acl = 6;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    $doc_write = AclExtended::getAclIdNumber('Physicians', 'write');\n    $clin_addonly = AclExtended::getAclIdNumber('Clinicians', 'addonly');\n    $clin_write = AclExtended::getAclIdNumber('Clinicians', 'write');\n    $front_view = AclExtended::getAclIdNumber('Front Office', 'view');\n    $front_write = AclExtended::getAclIdNumber('Front Office', 'write');\n    $back_view = AclExtended::getAclIdNumber('Accounting', 'view');\n    $emergency_write = AclExtended::getAclIdNumber('Emergency Login', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    AclExtended::addObjectAcl('admin', 'Administration', 'menu', 'Menu');\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    AclExtended::updateAcl($admin_write, 'Administrators', 'admin', 'Administration', 'menu', 'Menu', 'write');\n\n    AclExtended::updateAcl($admin_write, 'Administrators', 'encounters', 'Encounters', 'auth', 'Authorize - my encounters', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'encounters', 'Encounters', 'coding', 'Coding - my encounters (write,wsome optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'encounters', 'Encounters', 'notes', 'Notes - my encounters (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'encounters', 'Encounters', 'relaxed', 'Less-private information (write,addonly optional)', 'write');\n\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'sign', 'Sign Lab Results (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'reminder', 'Patient Reminders (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'disclosure', 'Disclosures (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'rx', 'Prescriptions (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'amendment', 'Amendments (write,addonly optional)', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'lab', 'Lab Results (write,addonly optional)', 'write');\n\n    AclExtended::updateAcl($doc_write, 'Physicians', 'encounters', 'Encounters', 'auth', 'Authorize - my encounters', 'write');\n    AclExtended::updateAcl($doc_write, 'Physicians', 'encounters', 'Encounters', 'coding', 'Coding - my encounters (write,wsome optional)', 'write');\n    AclExtended::updateAcl($doc_write, 'Physicians', 'encounters', 'Encounters', 'notes', 'Notes - my encounters (write,addonly optional)', 'write');\n    AclExtended::updateAcl($doc_write, 'Physicians', 'encounters', 'Encounters', 'relaxed', 'Less-private information (write,addonly optional)', 'write');\n\n    AclExtended::updateAcl($doc_write, 'Physicians', 'groups', 'Groups', 'gcalendar', 'View/Create/Update groups appointment in calendar', 'write');\n    AclExtended::updateAcl($doc_write, 'Physicians', 'groups', 'Groups', 'glog', 'Group encounter log', 'write');\n\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'trans', 'Transactions (write optional)', 'addonly');\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'reminder', 'Patient Reminders (write,addonly optional)', 'addonly');\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)', 'addonly');\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'disclosure', 'Disclosures (write,addonly optional)', 'addonly');\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'rx', 'Prescriptions (write,addonly optional)', 'addonly');\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'amendment', 'Amendments (write,addonly optional)', 'addonly');\n    AclExtended::updateAcl($clin_addonly, 'Clinicians', 'patients', 'Patients', 'lab', 'Lab Results (write,addonly optional)', 'addonly');\n\n    AclExtended::updateAcl($clin_write, 'Clinicians', 'groups', 'Groups', 'gcalendar', 'View/Create/Update groups appointment in calendar', 'write');\n    AclExtended::updateAcl($clin_write, 'Clinicians', 'groups', 'Groups', 'glog', 'Group encounter log', 'write');\n\n    AclExtended::updateAcl($front_view, 'Front Office', 'patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)', 'view');\n\n    AclExtended::updateAcl($front_write, 'Front Office', 'groups', 'Groups', 'gcalendar', 'View/Create/Update groups appointment in calendar', 'write');\n\n    AclExtended::updateAcl($back_view, 'Accounting', 'patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)', 'view');\n\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'multipledb', 'Multipledb', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'menu', 'Menu', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'auth', 'Authorize - my encounters', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'coding', 'Coding - my encounters (write,wsome optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'notes', 'Notes - my encounters (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'encounters', 'Encounters', 'relaxed', 'Less-private information (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'sign', 'Sign Lab Results (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'reminder', 'Patient Reminders (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'alert', 'Clinical Reminders/Alerts (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'disclosure', 'Disclosures (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'rx', 'Prescriptions (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'amendment', 'Amendments (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'lab', 'Lab Results (write,addonly optional)', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'groups', 'Groups', 'gadd', 'View/Add/Update groups', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'groups', 'Groups', 'gcalendar', 'View/Create/Update groups appointment in calendar', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'groups', 'Groups', 'glog', 'Group encounter log', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'groups', 'Groups', 'gdlog', 'Group detailed log of appointment in patient record', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'groups', 'Groups', 'gm', 'Send message from the permanent group therapist to the personal therapist', 'write');\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n\n// Upgrade for acl_version 7\n$upgrade_acl = 7;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    $emergency_write = AclExtended::getAclIdNumber('Emergency Login', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    AclExtended::addObjectAcl('admin', 'Administration', 'manage_modules', 'Manage modules');\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n    AclExtended::updateAcl($admin_write, 'Administrators', 'admin', 'Administration', 'manage_modules', 'Manage modules', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'admin', 'Administration', 'manage_modules', 'Manage modules', 'write');\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 8\n$upgrade_acl = 8;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    $emergency_write = AclExtended::getAclIdNumber('Emergency Login', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    AclExtended::addObjectAcl('patients', 'Patients', 'docs_rm', 'Documents Delete');\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'docs_rm', 'Documents Delete', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'docs_rm', 'Documents Delete', 'write');\n\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 9\n$upgrade_acl = 9;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    $accounting_view = AclExtended::getAclIdNumber('Accounting', 'view');\n    $clinicians_view = AclExtended::getAclIdNumber('Clinicians', 'view');\n    $emergency_write = AclExtended::getAclIdNumber('Emergency Login', 'write');\n    $frontoffice_view = AclExtended::getAclIdNumber('Front Office', 'view');\n    $physicians_view = AclExtended::getAclIdNumber('Physicians', 'view');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n    AclExtended::addObjectAcl('patients', 'Patients', 'pat_rep', 'Patient Report');\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n    AclExtended::updateAcl($admin_write, 'Administrators', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'write');\n    AclExtended::updateAcl($accounting_view, 'Accounting', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'view');\n    AclExtended::updateAcl($clinicians_view, 'Clinicians', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'view');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'write');\n    AclExtended::updateAcl($frontoffice_view, 'Front Office', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'view');\n    AclExtended::updateAcl($physicians_view, 'Physicians', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'view');\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 10\n$upgrade_acl = 10;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $admin_write = AclExtended::getAclIdNumber('Administrators', 'write');\n    $emergency_write = AclExtended::getAclIdNumber('Emergency Login', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n    AclExtended::addObjectSectionAcl('inventory', 'Inventory');\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'lots', 'Lots');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'sales', 'Sales');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'purchases', 'Purchases');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'transfers', 'Transfers');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'adjustments', 'Adjustments');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'consumption', 'Consumption');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'destruction', 'Destruction');\n    AclExtended::addObjectAcl('inventory', 'Inventory', 'reporting', 'Reporting');\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n    //Rename \"Pharmacy Dispensary\" to \"Inventory Administration\".\n    AclExtended::editObjectAcl('admin', 'Administration', 'drugs', 'Inventory Administration', 10);\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'lots', 'Lots', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'sales', 'Sales', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'purchases', 'Purchases', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'transfers', 'Transfers', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'adjustments', 'Adjustments', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'consumption', 'Consumption', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'destruction', 'Destruction', 'write');\n    AclExtended::updateAcl($admin_write, 'Administrators', 'inventory', 'Inventory', 'reporting', 'Reporting', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'lots', 'Lots', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'sales', 'Sales', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'purchases', 'Purchases', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'transfers', 'Transfers', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'adjustments', 'Adjustments', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'consumption', 'Consumption', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'destruction', 'Destruction', 'write');\n    AclExtended::updateAcl($emergency_write, 'Emergency Login', 'inventory', 'Inventory', 'reporting', 'Reporting', 'write');\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 11\n$upgrade_acl = 11;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $clin_write = AclExtended::getAclIdNumber('Clinicians', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    AclExtended::updateAcl($clin_write, 'Clinicians', 'encounters', 'Encounters', 'auth', 'Authorize - my encounters', 'write');\n    AclExtended::updateAcl($clin_write, 'Clinicians', 'encounters', 'Encounters', 'notes', 'Notes - my encounters (write,addonly optional)', 'write');\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n// Upgrade for acl_version 12\n$upgrade_acl = 12;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n    $accounting_view = AclExtended::getAclIdNumber('Accounting', 'view');\n    $frontoffice_view = AclExtended::getAclIdNumber('Front Office', 'view');\n    $frontoffice_write = AclExtended::getAclIdNumber('Front Office', 'write');\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n    AclExtended::shiftAcl($accounting_view, 'Accounting', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'view');\n    AclExtended::shiftAcl($frontoffice_view, 'Front Office', 'patients', 'Patients', 'pat_rep', 'Patient Report', 'view');\n    AclExtended::shiftAcl($frontoffice_write, 'Front Office', 'patients', 'Patients', 'trans', 'Transactions (write,wsome optional)', 'write');\n    AclExtended::shiftAcl($frontoffice_write, 'Front Office', 'patients', 'Patients', 'notes', 'Patient Notes (write,wsome optional)', 'write');\n\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n\n/* This is a template for a new revision, when needed\n// Upgrade for acl_version 13\n$upgrade_acl = 13;\nif ($acl_version < $upgrade_acl) {\n    echo \"<B>UPGRADING ACCESS CONTROLS TO VERSION \" . $upgrade_acl . \":</B></BR>\";\n\n    //Collect the ACL ID numbers.\n    echo \"<B>Checking to ensure all the proper ACL(access control list) are present:</B></BR>\";\n\n    //Add new object Sections\n    echo \"<BR/><B>Adding new object sections</B><BR/>\";\n\n    //Add new Objects\n    echo \"<BR/><B>Adding new objects</B><BR/>\";\n\n    //Update already existing Objects\n    echo \"<BR/><B>Upgrading objects</B><BR/>\";\n\n    //Add new ACLs here (will return the ACL ID of newly created or already existant ACL)\n    // (will also place in the appropriate group and CREATE a new group if needed)\n    echo \"<BR/><B>Adding ACLs(Access Control Lists) and groups</B><BR/>\";\n\n    //Update the ACLs\n    echo \"<BR/><B>Updating the ACLs(Access Control Lists)</B><BR/>\";\n\n    //DONE with upgrading to this version\n    $acl_version = $upgrade_acl;\n}\n*/\n\n//All done\nAclExtended::setAclVersion($acl_version);\necho \"DONE upgrading access controls\";\n", "<?php\n\n/**\n * Patient custom report.\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Ken Chapple <ken@mi-squared.com>\n * @author    Tony McCormick <tony@mi-squared.com>\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2018 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2017-2020 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nrequire_once(\"../../globals.php\");\nrequire_once(\"$srcdir/forms.inc\");\nrequire_once(\"$srcdir/pnotes.inc\");\nrequire_once(\"$srcdir/patient.inc\");\nrequire_once(\"$srcdir/options.inc.php\");\nrequire_once(\"$srcdir/lists.inc\");\nrequire_once(\"$srcdir/report.inc\");\nrequire_once(dirname(__file__) . \"/../../../custom/code_types.inc.php\");\nrequire_once $GLOBALS['srcdir'] . '/ESign/Api.php';\nrequire_once($GLOBALS[\"include_root\"] . \"/orders/single_order_results.inc.php\");\nrequire_once(\"$srcdir/appointments.inc.php\");\nrequire_once($GLOBALS['fileroot'] . \"/controllers/C_Document.class.php\");\n\nuse ESign\\Api;\nuse Mpdf\\Mpdf;\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Core\\Header;\nuse OpenEMR\\MedicalDevice\\MedicalDevice;\nuse OpenEMR\\Services\\FacilityService;\n\nif (!AclMain::aclCheckCore('patients', 'pat_rep')) {\n    die(xlt('Not authorized'));\n}\n\n$facilityService = new FacilityService();\n\n$staged_docs = array();\n$archive_name = '';\n\n// For those who care that this is the patient report.\n$GLOBALS['PATIENT_REPORT_ACTIVE'] = true;\n\n$PDF_OUTPUT = empty($_POST['pdf']) ? 0 : intval($_POST['pdf']);\n$PDF_FAX = empty($_POST['fax']) ? 0 : intval($_POST['fax']);\nif ($PDF_FAX) {\n    $PDF_OUTPUT = 1;\n}\n\nif ($PDF_OUTPUT) {\n    $config_mpdf = array(\n        'tempDir' => $GLOBALS['MPDF_WRITE_DIR'],\n        'mode' => $GLOBALS['pdf_language'],\n        'format' => $GLOBALS['pdf_size'],\n        'default_font_size' => '9',\n        'default_font' => 'dejavusans',\n        'margin_left' => $GLOBALS['pdf_left_margin'],\n        'margin_right' => $GLOBALS['pdf_right_margin'],\n        'margin_top' => $GLOBALS['pdf_top_margin'],\n        'margin_bottom' => $GLOBALS['pdf_bottom_margin'],\n        'margin_header' => '',\n        'margin_footer' => '',\n        'orientation' => $GLOBALS['pdf_layout'],\n        'shrink_tables_to_fit' => 1,\n        'use_kwt' => true,\n        'autoScriptToLang' => true,\n        'keep_table_proportions' => true\n    );\n    $pdf = new mPDF($config_mpdf);\n    if ($_SESSION['language_direction'] == 'rtl') {\n        $pdf->SetDirectionality('rtl');\n    }\n    ob_start();\n} // end pdf conditional.\n\n// get various authorization levels\n$auth_notes_a = AclMain::aclCheckCore('encounters', 'notes_a');\n$auth_notes = AclMain::aclCheckCore('encounters', 'notes');\n$auth_coding_a = AclMain::aclCheckCore('encounters', 'coding_a');\n$auth_coding = AclMain::aclCheckCore('encounters', 'coding');\n$auth_relaxed = AclMain::aclCheckCore('encounters', 'relaxed');\n$auth_med = AclMain::aclCheckCore('patients', 'med');\n$auth_demo = AclMain::aclCheckCore('patients', 'demo');\n\n$esignApi = new Api();\n\n$printable = empty($_GET['printable']) ? false : true;\nif ($PDF_OUTPUT) {\n    $printable = true;\n}\n\nunset($_GET['printable']);\n\n// Number of columns in tables for insurance and encounter forms.\n$N = $PDF_OUTPUT ? 4 : 6;\n\n$first_issue = 1;\n\nfunction getContent()\n{\n    global $web_root, $webserver_root;\n    $content = ob_get_clean();\n    // Fix a nasty mPDF bug - it ignores document root!\n    $i = 0;\n    $wrlen = strlen($web_root);\n    $wsrlen = strlen($webserver_root);\n    while (true) {\n        $i = stripos($content, \" src='/\", $i + 1);\n        if ($i === false) {\n            break;\n        }\n\n        if (\n            substr($content, $i + 6, $wrlen) === $web_root &&\n            substr($content, $i + 6, $wsrlen) !== $webserver_root\n        ) {\n            $content = substr($content, 0, $i + 6) . $webserver_root . substr($content, $i + 6 + $wrlen);\n        }\n    }\n\n    return $content;\n}\n\nfunction postToGet($arin)\n{\n    $getstring = \"\";\n    foreach ($arin as $key => $val) {\n        if (is_array($val)) {\n            foreach ($val as $k => $v) {\n                $getstring .= attr_url($key . \"[]\") . \"=\" . attr_url($v) . \"&\";\n            }\n        } else {\n            $getstring .= attr_url($key) . \"=\" . attr_url($val) . \"&\";\n        }\n    }\n\n    return $getstring;\n}\n\nfunction report_basename($pid)\n{\n    $ptd = getPatientData($pid, \"fname,lname\");\n    // escape names for pesky periods hyphen etc.\n    $esc = $ptd['fname'] . '_' . $ptd['lname'];\n    $esc = str_replace(array('.', ',', ' '), '', $esc);\n    $fn = basename_international(strtolower($esc . '_' . $pid . '_' . xl('report')));\n\n    return array('base' => $fn, 'fname' => $ptd['fname'], 'lname' => $ptd['lname']);\n}\n\nfunction zip_content($source, $destination, $content = '', $create = true)\n{\n    if (!extension_loaded('zip')) {\n        return false;\n    }\n\n    $zip = new ZipArchive();\n    if ($create) {\n        if (!$zip->open($destination, ZipArchive::CREATE)) {\n            return false;\n        }\n    } else {\n        if (!$zip->open($destination, ZipArchive::OVERWRITE)) {\n            return false;\n        }\n    }\n\n    if (is_file($source) === true) {\n        $zip->addFromString(basename($source), file_get_contents($source));\n    } elseif (!empty($content)) {\n        $zip->addFromString(basename($source), $content);\n    }\n\n    return $zip->close();\n}\n\n?>\n\n<?php if ($PDF_OUTPUT) { ?>\n    <?php Header::setupAssets(['pdf-style', 'esign-theme-only']); ?>\n<?php } else { ?>\n<html>\n<head>\n    <?php Header::setupHeader(['esign-theme-only', 'search-highlight']); ?>\n    <?php } ?>\n\n    <?php // do not show stuff from report.php in forms that is encaspulated\n    // by div of navigateLink class. Specifically used for CAMOS, but\n    // can also be used by other forms that require output in the\n    // encounter listings output, but not in the custom report. ?>\n\n    <style>\n      div.navigateLink {\n        display: none;\n      }\n\n      .hilite2 {\n        background-color: transparent;\n      }\n\n      .hilite, mark, .next {\n        background-color: var(--yellow);\n      }\n\n      img {\n        max-width: 700px;\n      }\n    </style>\n\n    <?php if (!$PDF_OUTPUT) { ?>\n        <?php // if the track_anything form exists, then include the styling\n        if (file_exists(__DIR__ . \"/../../forms/track_anything/style.css\")) { ?>\n            <?php Header::setupAssets('track-anything'); ?>\n        <?php } ?>\n\n</head>\n<?php } ?>\n\n<body>\n    <div class=\"container\">\n        <div id=\"report_custom w-100\">  <!-- large outer DIV -->\n            <?php\n            if (sizeof($_GET) > 0) {\n                $ar = $_GET;\n            } else {\n                $ar = $_POST;\n            }\n\n            if ($printable) {\n                /*******************************************************************\n                 * $titleres = getPatientData($pid, \"fname,lname,providerID\");\n                 * $sql = \"SELECT * FROM facility ORDER BY billing_location DESC LIMIT 1\";\n                 *******************************************************************/\n                $titleres = getPatientData($pid, \"fname,lname,providerID,DATE_FORMAT(DOB,'%m/%d/%Y') as DOB_TS\");\n                $facility = null;\n                if ($_SESSION['pc_facility']) {\n                    $facility = $facilityService->getById($_SESSION['pc_facility']);\n                } else {\n                    $facility = $facilityService->getPrimaryBillingLocation();\n                }\n\n                /******************************************************************/\n                // Setup Headers and Footers for mPDF only Download\n                // in HTML view it's just one line at the top of page 1\n                echo '<page_header class=\"custom-tag text-right\"> ' . xlt(\"PATIENT\") . ':' . text($titleres['lname']) . ', ' . text($titleres['fname']) . ' - ' . text($titleres['DOB_TS']) . '</page_header>    ';\n                echo '<page_footer class=\"custom-tag text-right\">' . xlt('Generated on') . ' ' . text(oeFormatShortDate()) . ' - ' . text($facility['name']) . ' ' . text($facility['phone']) . '</page_footer>';\n\n                // Use logo if it exists as 'practice_logo.gif' in the site dir\n                // old code used the global custom dir which is no longer a valid\n                $practice_logo = \"\";\n                $plogo = glob(\"$OE_SITE_DIR/images/*\");// let's give the user a little say in image format.\n                $plogo = preg_grep('~practice_logo\\.(gif|png|jpg|jpeg)$~i', $plogo);\n                if (!empty($plogo)) {\n                    $k = current(array_keys($plogo));\n                    $practice_logo = $plogo[$k];\n                }\n\n                echo \"<div class='table-responsive'><table class='table'><tbody><tr><td>\";\n                if (file_exists($practice_logo)) {\n                    $logo_path = $GLOBALS['OE_SITE_WEBROOT'] . \"/images/\" . basename($practice_logo);\n                    echo \"<img class='h-auto' style='max-width:250px;' src='$logo_path'>\"; // keep size within reason\n                    echo \"</td><td>\";\n                }\n                ?>\n                <h5><?php echo text($facility['name']); ?></h5>\n                <?php echo text($facility['street']); ?><br />\n                <?php echo text($facility['city']); ?>, <?php echo text($facility['state']); ?><?php echo text($facility['postal_code']); ?><br clear='all'>\n                <?php echo text($facility['phone']); ?><br />\n\n                <a href=\"javascript:window.close();\"><span class='title'><?php echo xlt('Patient') . \": \" . text($titleres['fname']) . \" \" . text($titleres['lname']); ?></span></a><br />\n                <span class='text'><?php echo xlt('Generated on'); ?>: <?php echo text(oeFormatShortDate()); ?></span>\n                <?php echo \"</td></tr></tbody></table></div>\"; ?>\n\n            <?php } else { // not printable\n                ?>\n                <div class=\"border-bottom fixed-top px-5 pt-4 report_search_bar\">\n                    <div class=\"row\">\n                        <div class=\"col-md\">\n                            <input type=\"text\" class=\"form-control\" onkeyup=\"clear_last_visit();remove_mark_all();find_all();\" name=\"search_element\" id=\"search_element\" />\n                        </div>\n                        <div class=\"col-md\">\n                            <div class=\"btn-group\">\n                                <button type=\"button\" class=\"btn btn-primary btn-search\" onClick=\"clear_last_visit();remove_mark_all();find_all();\"><?php echo xlt('Find'); ?></button>\n                                <button type=\"button\" class=\"btn btn-primary\" onClick=\"next_prev('prev');\"><?php echo xlt('Prev'); ?></button>\n                                <button type=\"button\" class=\"btn btn-primary\" onClick=\"next_prev('next');\"><?php echo xlt('Next'); ?></button>\n                            </div>\n                        </div>\n                        <div class=\"col-md\">\n                            <span><?php echo xlt('Match case'); ?></span>\n                            <input type=\"checkbox\" onClick=\"clear_last_visit();remove_mark_all();find_all();\" name=\"search_case\" id=\"search_case\" />\n                        </div>\n                        <div class=\"col-md mb-2\">\n                            <span class=\"text font-weight-bold\"><?php echo xlt('Search In'); ?>:</span>\n                            <br />\n                            <?php\n                            $form_id_arr = array();\n                            $form_dir_arr = array();\n                            $last_key = '';\n                            //ksort($ar);\n                            foreach ($ar as $key_search => $val_search) {\n                                if ($key_search == 'pdf' || $key_search == '') {\n                                    continue;\n                                }\n\n                                if (($auth_notes_a || $auth_notes || $auth_coding_a || $auth_coding || $auth_med || $auth_relaxed)) {\n                                    preg_match('/^(.*)_(\\d+)$/', $key_search, $res_search);\n                                    $form_id_arr[] = add_escape_custom($res_search[2] ?? '');\n                                    $form_dir_arr[] = add_escape_custom($res_search[1] ?? '');\n                                }\n                            }\n\n                            //echo json_encode(json_encode($array_key_id));\n                            if (sizeof($form_id_arr) > 0) {\n                                $query = \"SELECT DISTINCT(form_name),formdir FROM forms WHERE form_id IN ( '\" . implode(\"','\", $form_id_arr) . \"') AND formdir IN ( '\" . implode(\"','\", $form_dir_arr) . \"')\";\n                                $arr = sqlStatement($query);\n                                echo \"<select multiple size='4' class='form-control' id='forms_to_search' onchange='clear_last_visit();remove_mark_all();find_all();' >\";\n                                while ($res_forms_ids = sqlFetchArray($arr)) {\n                                    echo \"<option value='\" . attr($res_forms_ids['formdir']) . \"' selected>\" . text($res_forms_ids['form_name']) . \"</option>\";\n                                }\n                                echo \"</select>\";\n                            }\n                            ?>\n                        </div>\n                        <div class=\"col-md\">\n                            <span id='alert_msg' class='text-danger'></span>\n                        </div>\n                    </div>\n                </div>\n                <div id=\"backLink\">\n                    <a href=\"patient_report.php\" onclick='top.restoreSession()'>\n                        <span class='title'><?php echo xlt('Patient Report'); ?></span>\n                        <span class='back'><?php echo text($tback); ?></span>\n                    </a>\n                </div>\n                <br />\n                <br />\n                <a href=\"custom_report.php?printable=1&<?php print postToGet($ar); ?>\" class='link_submit' target='new' onclick='top.restoreSession()'>\n                    [<?php echo xlt('Printable Version'); ?>]\n                </a>\n            <?php } // end not printable ?>\n\n            <?php\n\n            // include ALL form's report.php files\n            $inclookupres = sqlStatement(\"select distinct formdir from forms where pid = ? AND deleted=0\", array($pid));\n            while ($result = sqlFetchArray($inclookupres)) {\n                // include_once(\"{$GLOBALS['incdir']}/forms/\" . $result[\"formdir\"] . \"/report.php\");\n                $formdir = $result['formdir'];\n                if (substr($formdir, 0, 3) == 'LBF') {\n                    include_once($GLOBALS['incdir'] . \"/forms/LBF/report.php\");\n                } else {\n                    include_once($GLOBALS['incdir'] . \"/forms/$formdir/report.php\");\n                }\n            }\n\n            if ($PDF_OUTPUT) {\n                $tmp_files_remove = array();\n            }\n\n            // For each form field from patient_report.php...\n            //\n            foreach ($ar as $key => $val) {\n                if ($key == 'pdf') {\n                    continue;\n                }\n\n                // These are the top checkboxes (demographics, allergies, etc.).\n                //\n                if (stristr($key, \"include_\")) {\n                    if ($val == \"recurring_days\") {\n                        /// label/header for recurring days\n                        echo \"<hr />\";\n                        echo \"<div class='text' id='appointments'>\\n\";\n                        print \"<h4>\" . xlt('Recurrent Appointments') . \":</h4>\";\n\n                        //fetch the data of the recurring days\n                        $recurrences = fetchRecurrences($pid);\n\n                        //print the recurring days to screen\n                        if (empty($recurrences)) { //if there are no recurrent appointments:\n                            echo \"<div class='text' >\";\n                            echo \"<span>\" . xlt('None{{Appointment}}') . \"</span>\";\n                            echo \"</div>\";\n                            echo \"<br />\";\n                        } else {\n                            foreach ($recurrences as $row) {\n                                //checks if there are recurrences and if they are current (git didn't end yet)\n                                if (!recurrence_is_current($row['pc_endDate'])) {\n                                    continue;\n                                }\n\n                                echo \"<div class='text' >\";\n                                echo \"<span>\" . xlt('Appointment Category') . ': ' . xlt($row['pc_catname']) . \"</span>\";\n                                echo \"<br />\";\n                                echo \"<span>\" . xlt('Recurrence') . ': ' . text($row['pc_recurrspec']) . \"</span>\";\n                                echo \"<br />\";\n\n                                if (ends_in_a_week($row['pc_endDate'])) {\n                                    echo \"<span class='text-danger'>\" . xlt('End Date') . ': ' . text($row['pc_endDate']) . \"</span>\";\n                                } else {\n                                    echo \"<span>\" . xlt('End Date') . ': ' . text($row['pc_endDate']) . \"</span>\";\n                                }\n\n                                echo \"</div>\";\n                                echo \"<br />\";\n                            }\n                        }\n\n                        echo \"</div><br />\";\n                    } elseif ($val == \"demographics\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text demographics' id='DEM'>\\n\";\n                        print \"<h4>\" . xlt('Patient Data') . \":</h4>\";\n                        // printRecDataOne($patient_data_array, getRecPatientData ($pid), $N);\n                        $result1 = getPatientData($pid);\n                        $result2 = getEmployerData($pid);\n                        echo \"   <div class='table-responsive'><table class='table'>\\n\";\n                        display_layout_rows('DEM', $result1, $result2);\n                        echo \"   </table></div>\\n\";\n                        echo \"</div>\\n\";\n                    } elseif ($val == \"history\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text history' id='HIS'>\\n\";\n                        if (AclMain::aclCheckCore('patients', 'med')) {\n                            print \"<h4>\" . xlt('History Data') . \":</h4>\";\n                            // printRecDataOne($history_data_array, getRecHistoryData ($pid), $N);\n                            $result1 = getHistoryData($pid);\n                            echo \"   <table>\\n\";\n                            display_layout_rows('HIS', $result1);\n                            echo \"   </table>\\n\";\n                        }\n\n                        echo \"</div>\";\n\n                        // } elseif ($val == \"employer\") {\n                        //   print \"<br /><span class='bold'>\".xl('Employer Data').\":</span><br />\";\n                        //   printRecDataOne($employer_data_array, getRecEmployerData ($pid), $N);\n                    } elseif ($val == \"insurance\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text insurance'>\";\n                        echo \"<h4>\" . xlt('Insurance Data') . \":</h4>\";\n                        print \"<br /><span class='font-weight-bold'>\" . xlt('Primary Insurance Data') . \":</span><br />\";\n                        printRecDataOne($insurance_data_array, getRecInsuranceData($pid, \"primary\"), $N);\n                        print \"<span class='font-weight-bold'>\" . xlt('Secondary Insurance Data') . \":</span><br />\";\n                        printRecDataOne($insurance_data_array, getRecInsuranceData($pid, \"secondary\"), $N);\n                        print \"<span class='font-weight-bold'>\" . xlt('Tertiary Insurance Data') . \":</span><br />\";\n                        printRecDataOne($insurance_data_array, getRecInsuranceData($pid, \"tertiary\"), $N);\n                        echo \"</div>\";\n                    } elseif ($val == \"billing\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text billing'>\";\n                        print \"<h4>\" . xlt('Billing Information') . \":</h4>\";\n                        if (!empty($ar['newpatient']) && count($ar['newpatient']) > 0) {\n                            $billings = array();\n                            echo \"<div class='table-responsive'><table class='table'>\";\n                            echo \"<tr><td class='font-weight-bold'>\" . xlt('Code') . \"</td><td class='font-weight-bold'>\" . xlt('Fee') . \"</td></tr>\\n\";\n                            $total = 0.00;\n                            $copays = 0.00;\n                            foreach ($ar['newpatient'] as $be) {\n                                $ta = explode(\":\", $be);\n                                $billing = getPatientBillingEncounter($pid, $ta[1]);\n                                $billings[] = $billing;\n                                foreach ($billing as $b) {\n                                    echo \"<tr>\\n\";\n                                    echo \"<td class='text'>\";\n                                    echo text($b['code_type']) . \":\\t\" . text($b['code']) . \"&nbsp;\" . text($b['modifier']) . \"&nbsp;&nbsp;&nbsp;\" . text($b['code_text']) . \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\";\n                                    echo \"</td>\\n\";\n                                    echo \"<td class='text'>\";\n                                    echo text(oeFormatMoney($b['fee']));\n                                    echo \"</td>\\n\";\n                                    echo \"</tr>\\n\";\n                                    $total += $b['fee'];\n                                    if ($b['code_type'] == \"COPAY\") {\n                                        $copays += $b['fee'];\n                                    }\n                                }\n                            }\n\n                            echo \"<tr><td>&nbsp;</td></tr>\";\n                            echo \"<tr><td class='font-weight-bold'>\" . xlt('Sub-Total') . \"</td><td class='text'>\" . text(oeFormatMoney($total + abs($copays))) . \"</td></tr>\";\n                            echo \"<tr><td class='font-weight-bold'>\" . xlt('Paid') . \"</td><td class='text'>\" . text(oeFormatMoney(abs($copays))) . \"</td></tr>\";\n                            echo \"<tr><td class='font-weight-bold'>\" . xlt('Total') . \"</td><td class='text'>\" . text(oeFormatMoney($total)) . \"</td></tr>\";\n                            echo \"</table></div>\";\n                            echo \"<pre>\";\n                            //print_r($billings);\n                            echo \"</pre>\";\n                        } else {\n                            printPatientBilling($pid);\n                        }\n\n                        echo \"</div>\\n\"; // end of billing DIV\n                    } elseif ($val == \"immunizations\") {\n                        if (AclMain::aclCheckCore('patients', 'med')) {\n                            echo \"<hr />\";\n                            echo \"<div class='text immunizations'>\\n\";\n                            print \"<h4>\" . xlt('Patient Immunization') . \":</h4>\";\n                            $sql = \"select i1.immunization_id, i1.administered_date, substring(i1.note,1,20) as immunization_note, c.code_text_short \" .\n                                \" from immunizations i1 \" .\n                                \" left join code_types ct on ct.ct_key = 'CVX' \" .\n                                \" left join codes c on c.code_type = ct.ct_id AND i1.cvx_code = c.code \" .\n                                \" where i1.patient_id = ? and i1.added_erroneously = 0 \" .\n                                \" order by administered_date desc\";\n                            $result = sqlStatement($sql, array($pid));\n                            while ($row = sqlFetchArray($result)) {\n                                // Figure out which name to use (ie. from cvx list or from the custom list)\n                                if ($GLOBALS['use_custom_immun_list']) {\n                                    $vaccine_display = generate_display_field(array('data_type' => '1', 'list_id' => 'immunizations'), $row['immunization_id']);\n                                } else {\n                                    if (!empty($row['code_text_short'])) {\n                                        $vaccine_display = xlt($row['code_text_short']);\n                                    } else {\n                                        $vaccine_display = generate_display_field(array('data_type' => '1', 'list_id' => 'immunizations'), $row['immunization_id']);\n                                    }\n                                }\n\n                                echo text($row['administered_date']) . \" - \" . $vaccine_display;\n                                if ($row['immunization_note']) {\n                                    echo \" - \" . text($row['immunization_note']);\n                                }\n\n                                echo \"<br />\\n\";\n                            }\n\n                            echo \"</div>\\n\";\n                        }\n\n                        // communication report\n                    } elseif ($val == \"batchcom\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text transactions'>\\n\";\n                        print \"<h4>\" . xlt('Patient Communication sent') . \":</h4>\";\n                        $sql = \"SELECT concat( 'Messsage Type: ', batchcom.msg_type, ', Message Subject: ', batchcom.msg_subject, ', Sent on:', batchcom.msg_date_sent ) AS batchcom_data, batchcom.msg_text, concat( users.fname, users.lname ) AS user_name FROM `batchcom` JOIN `users` ON users.id = batchcom.sent_by WHERE batchcom.patient_id=?\";\n                        // echo $sql;\n                        $result = sqlStatement($sql, array($pid));\n                        while ($row = sqlFetchArray($result)) {\n                            echo text($row['batchcom_data']) . \", By: \" . text($row['user_name']) . \"<br />Text:<br /> \" . text($row['msg_txt']) . \"<br />\\n\";\n                        }\n\n                        echo \"</div>\\n\";\n                    } elseif ($val == \"notes\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text notes'>\\n\";\n                        print \"<h4>\" . xlt('Patient Notes') . \":</h4>\";\n                        printPatientNotes($pid);\n                        echo \"</div>\";\n                    } elseif ($val == \"transactions\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text transactions'>\\n\";\n                        print \"<h4>\" . xlt('Patient Transactions') . \":</h4>\";\n                        printPatientTransactions($pid);\n                        echo \"</div>\";\n                    }\n                } else {\n                    // Documents is an array of checkboxes whose values are document IDs.\n                    //\n                    if ($key == \"documents\") {\n                        echo \"<hr />\";\n                        echo \"<div class='text documents'>\";\n                        foreach ($val as $valkey => $valvalue) {\n                            $document_id = $valvalue;\n                            if (!is_numeric($document_id)) {\n                                continue;\n                            }\n\n                            $d = new Document($document_id);\n                            $fname = basename($d->get_name());\n                            //  Extract the extension by the mime/type and not the file name extension\n                            // -There is an exception. Need to manually see if it a pdf since\n                            //  the image_type_to_extension() is not working to identify pdf.\n                            $extension = strtolower(substr($fname, strrpos($fname, \".\")));\n                            if ($extension != '.pdf') { // Will print pdf header within pdf import\n                                echo \"<h5>\" . xlt('Document') . \" '\" . text($fname) . \"-\" . text($d->get_id()) . \"'</h5>\";\n                            }\n\n                            $notes = $d->get_notes();\n                            if (!empty($notes)) {\n                                echo \"<div class='table-responsive'><table class='table'>\";\n                            }\n\n                            foreach ($notes as $note) {\n                                echo '<tr>';\n                                echo '<td>' . xlt('Note') . ' #' . text($note->get_id()) . '</td>';\n                                echo '</tr>';\n                                echo '<tr>';\n                                echo '<td>' . xlt('Date') . ': ' . text(oeFormatShortDate($note->get_date())) . '</td>';\n                                echo '</tr>';\n                                echo '<tr>';\n                                echo '<td>' . text($note->get_note()) . '<br /><br /></td>';\n                                echo '</tr>';\n                            }\n\n                            if (!empty($notes)) {\n                                echo \"</table></div>\";\n                            }\n\n                            // adding support for .txt MDM-TXA interface/orders/receive_hl7_results.inc.php\n                            if ($extension != (\".pdf\" || \".txt\")) {\n                                $tempCDoc = new C_Document();\n                                $tempFile = $tempCDoc->retrieve_action($d->get_foreign_id(), $document_id, false, true, true, true);\n                                // tmp file in temporary_files_dir\n                                $tempFileName = tempnam($GLOBALS['temporary_files_dir'], \"oer\");\n                                file_put_contents($tempFileName, $tempFile);\n                                $image_data = getimagesize($tempFileName);\n                                $extension = image_type_to_extension($image_data[2]);\n                                unlink($tempFileName);\n                            }\n\n                            if ($extension == \".png\" || $extension == \".jpg\" || $extension == \".jpeg\" || $extension == \".gif\") {\n                                if ($PDF_OUTPUT) {\n                                    // OK to link to the image file because it will be accessed by the\n                                    // mPDF parser and not the browser.\n                                    $tempDocC = new C_Document();\n                                    $fileTemp = $tempDocC->retrieve_action($d->get_foreign_id(), $document_id, false, true, true, true);\n                                    // tmp file in ../documents/temp since need to be available via webroot\n                                    $from_file_tmp_web_name = tempnam($GLOBALS['OE_SITE_DIR'] . '/documents/temp', \"oer\");\n                                    file_put_contents($from_file_tmp_web_name, $fileTemp);\n                                    echo \"<img src='$from_file_tmp_web_name'\";\n                                    // Flag images with excessive width for possible stylesheet action.\n                                    $asize = getimagesize($from_file_tmp_web_name);\n                                    if ($asize[0] > 750) {\n                                        echo \" class='bigimage'\";\n                                    }\n                                    $tmp_files_remove[] = $from_file_tmp_web_name;\n                                    echo \" /><br /><br />\";\n                                } else {\n                                    echo \"<img src='\" . $GLOBALS['webroot'] .\n                                        \"/controller.php?document&retrieve&patient_id=&document_id=\" .\n                                        attr_url($document_id) . \"&as_file=false&original_file=true&disable_exit=false&show_original=true'><br /><br />\";\n                                }\n                            } else {\n                                // Most clinic documents are expected to be PDFs, and in that happy case\n                                // we can avoid the lengthy image conversion process.\n                                if ($PDF_OUTPUT && $extension == \".pdf\") {\n                                    echo \"</div></div>\\n\"; // HTML to PDF conversion will fail if there are open tags.\n                                    $content = getContent();\n                                    $pdf->writeHTML($content); // catch up with buffer.\n                                    $err = '';\n                                    try {\n                                        // below header isn't being used. missed maybe!\n                                        $pg_header = \"<span>\" . xlt('Document') . \" \" . text($fname) . \"-\" . text($d->get_id()) . \"</span>\";\n                                        $tempDocC = new C_Document();\n                                        $pdfTemp = $tempDocC->retrieve_action($d->get_foreign_id(), $document_id, false, true, true, true);\n                                        // tmp file in temporary_files_dir\n                                        $from_file_tmp_name = tempnam($GLOBALS['temporary_files_dir'], \"oer\");\n                                        file_put_contents($from_file_tmp_name, $pdfTemp);\n\n                                        $pagecount = $pdf->setSourceFile($from_file_tmp_name);\n                                        for ($i = 0; $i < $pagecount; ++$i) {\n                                            $pdf->AddPage();\n                                            $itpl = $pdf->importPage($i + 1);\n                                            $pdf->useTemplate($itpl);\n                                        }\n                                    } catch (Exception $e) {\n                                        // chances are PDF is > v1.4 and compression level not supported.\n                                        // regardless, we're here so lets dispose in different way.\n                                        //\n                                        unlink($from_file_tmp_name);\n                                        $archive_name = ($GLOBALS['temporary_files_dir'] . '/' . report_basename($pid)['base'] . \".zip\");\n                                        $rtn = zip_content(basename($d->url), $archive_name, $pdfTemp);\n                                        $err = \"<span>\" . xlt('PDF Document Parse Error and not included. Check if included in archive.') . \" : \" . text($fname) . \"</span>\";\n                                        $pdf->writeHTML($err);\n                                        $staged_docs[] = array('path' => $d->url, 'fname' => $fname);\n                                    } finally {\n                                        unlink($from_file_tmp_name);\n                                        // Make sure whatever follows is on a new page. Maybe!\n                                        // okay if not a series of pdfs so if so need @todo\n                                        if (empty($err)) {\n                                            $pdf->AddPage();\n                                        }\n                                        // Resume output buffering and the above-closed tags.\n                                        ob_start();\n                                        echo \"<div><div class='text documents'>\\n\";\n                                    }\n                                } elseif ($extension == \".txt\") {\n                                    echo \"<pre>\";\n                                    $tempDocC = new C_Document();\n                                    $textTemp = $tempDocC->retrieve_action($d->get_foreign_id(), $document_id, false, true, true, true);\n                                    echo text($textTemp);\n                                    echo \"</pre>\";\n                                } else {\n                                    if ($PDF_OUTPUT) {\n                                        // OK to link to the image file because it will be accessed by the mPDF parser and not the browser.\n                                        $tempDocC = new C_Document();\n                                        $fileTemp = $tempDocC->retrieve_action($d->get_foreign_id(), $document_id, false, false, true, true);\n                                        // tmp file in ../documents/temp since need to be available via webroot\n                                        $from_file_tmp_web_name = tempnam($GLOBALS['OE_SITE_DIR'] . '/documents/temp', \"oer\");\n                                        file_put_contents($from_file_tmp_web_name, $fileTemp);\n                                        echo \"<img src='$from_file_tmp_web_name'><br /><br />\";\n                                        $tmp_files_remove[] = $from_file_tmp_web_name;\n                                    } else {\n                                        if ($extension === '.pdf' || $extension === '.zip') {\n                                            echo \"<strong>\" . xlt('Available Document') . \":</strong><em> \" . text($fname) . \"</em><br />\";\n                                        } else {\n                                            echo \"<img src='\" . $GLOBALS['webroot'] . \"/controller.php?document&retrieve&patient_id=&document_id=\" . attr_url($document_id) . \"&as_file=false&original_file=false'><br /><br />\";\n                                        }\n                                    }\n                                }\n                            } // end if-else\n                        } // end Documents loop\n                        echo \"</div>\";\n                    } elseif ($key == \"procedures\") { // Procedures is an array of checkboxes whose values are procedure order IDs.\n                        if ($auth_med) {\n                            echo \"<hr />\";\n                            echo \"<div class='text documents'>\";\n                            foreach ($val as $valkey => $poid) {\n                                if (empty($GLOBALS['esign_report_show_only_signed'])) {\n                                    echo '<h4>' . xlt('Procedure Order') . ':</h4>';\n                                    echo \"<br />\\n\";\n                                    generate_order_report($poid, false, !$PDF_OUTPUT);\n                                    echo \"<br />\\n\";\n                                }\n                            }\n                            echo \"</div>\";\n                        }\n                    } elseif (strpos($key, \"issue_\") === 0) {\n                        // display patient Issues\n                        if ($first_issue) {\n                            $prevIssueType = 'asdf1234!@#$'; // random junk so as to not match anything\n                            $first_issue = 0;\n                            echo \"<hr />\";\n                            echo \"<h4>\" . xlt(\"Issues\") . \"</h4>\";\n                        }\n\n                        preg_match('/^(.*)_(\\d+)$/', $key, $res);\n                        $rowid = $res[2];\n                        $irow = sqlQuery(\"SELECT type, title, comments, diagnosis, udi_data \" .\n                            \"FROM lists WHERE id = ?\", array($rowid));\n                        $diagnosis = $irow['diagnosis'];\n                        if ($prevIssueType != $irow['type']) {\n                            // output a header for each Issue Type we encounter\n                            $disptype = $ISSUE_TYPES[$irow['type']][0];\n                            echo \"<div class='issue_type'>\" . text($disptype) . \":</div>\\n\";\n                            $prevIssueType = $irow['type'];\n                        }\n\n                        echo \"<div class='text issue'>\";\n                        if ($prevIssueType == \"medical_device\") {\n                            echo \"<span class='issue_title'><span class='font-weight-bold'>\" . xlt('Title') . \": </span>\" . text($irow['title']) . \"</span><br>\";\n                            echo \"<span class='issue_title'>\" . (new MedicalDevice($irow['udi_data']))->fullOutputHtml() . \"</span>\";\n                            echo \"<span class='issue_comments'> \" . text($irow['comments']) . \"</span><br><br>\\n\";\n                        } else {\n                            echo \"<span class='issue_title'>\" . text($irow['title']) . \":</span>\";\n                            echo \"<span class='issue_comments'> \" . text($irow['comments']) . \"</span>\\n\";\n                        }\n\n                        // Show issue's chief diagnosis and its description:\n                        if ($diagnosis) {\n                            echo \"<div class='text issue_diag'>\";\n                            echo \"<span class='font-weight-bold'>[\" . xlt('Diagnosis') . \"]</span><br />\";\n                            $dcodes = explode(\";\", $diagnosis);\n                            foreach ($dcodes as $dcode) {\n                                echo \"<span class='italic'>\" . text($dcode) . \"</span>: \";\n                                echo text(lookup_code_descriptions($dcode)) . \"<br />\\n\";\n                            }\n\n                            //echo $diagnosis.\" -- \".lookup_code_descriptions($diagnosis).\"\\n\";\n                            echo \"</div>\";\n                        }\n\n                        // Supplemental data for GCAC or Contraception issues.\n                        if ($irow['type'] == 'ippf_gcac') {\n                            echo \"   <div class='table-responsive'><table class='table'>\\n\";\n                            display_layout_rows('GCA', sqlQuery(\"SELECT * FROM lists_ippf_gcac WHERE id = ?\", array($rowid)));\n                            echo \"   </table></div>\\n\";\n                        } elseif ($irow['type'] == 'contraceptive') {\n                            echo \"   <div class='table-responsive'><table class='table'>\\n\";\n                            display_layout_rows('CON', sqlQuery(\"SELECT * FROM lists_ippf_con WHERE id = ?\", array($rowid)));\n                            echo \"   </table></div>\\n\";\n                        }\n\n                        echo \"</div>\\n\"; //end the issue DIV\n                    } else {\n                        // we have an \"encounter form\" form field whose name is like\n                        // dirname_formid, with a value which is the encounter ID.\n                        //\n                        // display encounter forms, encoded as a POST variable\n                        // in the format: <formdirname_formid>=<encounterID>\n\n                        if (($auth_notes_a || $auth_notes || $auth_coding_a || $auth_coding || $auth_med || $auth_relaxed)) {\n                            $form_encounter = $val;\n                            preg_match('/^(.*)_(\\d+)$/', $key, $res);\n                            $form_id = $res[2];\n                            $formres = getFormNameByFormdirAndFormid($res[1], $form_id);\n                            $dateres = getEncounterDateByEncounter($form_encounter);\n                            $formId = getFormIdByFormdirAndFormid($res[1], $form_id);\n\n                            if ($res[1] == 'newpatient') {\n                                echo \"<div class='text encounter'>\\n\";\n                                echo \"<h4>\" . xlt($formres[\"form_name\"]) . \"</h4>\";\n                            } else {\n                                echo \"<div class='text encounter_form'>\";\n                                echo \"<h4>\" . text(xl_form_title($formres[\"form_name\"])) . \"</h4>\";\n                            }\n\n                            // show the encounter's date\n                            echo \"(\" . text(oeFormatSDFT(strtotime($dateres[\"date\"]))) . \") \";\n                            if ($res[1] == 'newpatient') {\n                                // display the provider info\n                                echo ' ' . xlt('Provider') . ': ' . text(getProviderName(getProviderIdOfEncounter($form_encounter)));\n                            }\n\n                            echo \"<br />\\n\";\n\n                            // call the report function for the form\n                            ?>\n                            <div name=\"search_div\" id=\"search_div_<?php echo attr($form_id) ?>_<?php echo attr($res[1]) ?>\" class=\"report_search_div class_<?php echo attr($res[1]); ?>\">\n                                <?php\n                                $esign = $esignApi->createFormESign($formId, $res[1], $form_encounter);\n                                if ($esign->isSigned('report') && !empty($GLOBALS['esign_report_show_only_signed'])) {\n                                    if (substr($res[1], 0, 3) == 'LBF') {\n                                        call_user_func(\"lbf_report\", $pid, $form_encounter, $N, $form_id, $res[1]);\n                                    } else {\n                                        call_user_func($res[1] . \"_report\", $pid, $form_encounter, $N, $form_id);\n                                    }\n                                } elseif (empty($GLOBALS['esign_report_show_only_signed'])) {\n                                    if (substr($res[1], 0, 3) == 'LBF') {\n                                        call_user_func('lbf_report', $pid, $form_encounter, $N, $form_id, $res[1]);\n                                    } else {\n                                        call_user_func($res[1] . '_report', $pid, $form_encounter, $N, $form_id);\n                                    }\n                                } else {\n                                    echo \"<h6>\" . xlt(\"Not signed.\") . \"</h6>\";\n                                }\n                                if ($esign->isLogViewable(\"report\")) {\n                                    $esign->renderLog();\n                                }\n                                ?>\n\n                            </div>\n                            <?php\n\n                            if ($res[1] == 'newpatient') {\n                                // display billing info\n                                $bres = sqlStatement(\n                                    \"SELECT b.date, b.code, b.code_text, b.modifier \" .\n                                    \"FROM billing AS b, code_types AS ct WHERE \" .\n                                    \"b.pid = ? AND \" .\n                                    \"b.encounter = ? AND \" .\n                                    \"b.activity = 1 AND \" .\n                                    \"b.code_type = ct.ct_key AND \" .\n                                    \"ct.ct_diag = 0 \" .\n                                    \"ORDER BY b.date\",\n                                    array($pid, $form_encounter)\n                                );\n                                while ($brow = sqlFetchArray($bres)) {\n                                    echo \"<div class='font-weight-bold d-inline-block'>&nbsp;\" . xlt('Procedure') . \": </div><div class='text d-inline-block'>\" .\n                                        text($brow['code']) . \":\" . text($brow['modifier']) . \" \" . text($brow['code_text']) . \"</div><br />\\n\";\n                                }\n                            }\n\n                            print \"</div>\";\n                        } // end auth-check for encounter forms\n                    } // end if('issue_')... else...\n                } // end if('include_')... else...\n            } // end $ar loop\n\n            if ($printable && !$PDF_OUTPUT) {// Patched out of pdf 04/20/2017 sjpadgett\n                echo \"<br /><br />\" . xlt('Signature') . \": _______________________________<br />\";\n            }\n            ?>\n\n        </div> <!-- end of report_custom DIV -->\n    </div>\n\n    <?php\n    if ($PDF_OUTPUT) {\n        $content = getContent();\n        $ptd = report_basename($pid);\n        $fn = $ptd['base'] . \".pdf\";\n        $pdf->SetTitle(ucfirst($ptd['fname']) . ' ' . $ptd['lname'] . ' ' . xl('Id') . ':' . $pid . ' ' . xl('Report'));\n        $isit_utf8 = preg_match('//u', $content); // quick check for invalid encoding\n        if (!$isit_utf8) {\n            if (function_exists('iconv')) { // if we can lets save the report\n                $content = iconv(\"UTF-8\", \"UTF-8//IGNORE\", $content);\n            } else { // no sense going on.\n                $die_str = xlt(\"Failed UTF8 encoding check! Could not automatically fix.\");\n                die($die_str);\n            }\n        }\n\n        try {\n            $pdf->writeHTML($content); // convert html\n        } catch (MpdfException $exception) {\n            die(text($exception));\n        }\n\n        if ($PDF_OUTPUT == 1) {\n            try {\n                if ($PDF_FAX === 1) {\n                    $fax_pdf = $pdf->Output($fn, 'S');\n                    $tmp_file = $GLOBALS['temporary_files_dir'] . '/' . $fn; // is deleted in sendFax...\n                    file_put_contents($tmp_file, $fax_pdf);\n                    echo $tmp_file;\n                    exit();\n                } else {\n                    if (!empty($archive_name) && sizeof($staged_docs) > 0) {\n                        $rtn = zip_content(basename($fn), $archive_name, $pdf->Output($fn, 'S'));\n                        header('Content-Description: File Transfer');\n                        header('Content-Transfer-Encoding: binary');\n                        header('Expires: 0');\n                        header(\"Cache-control: private\");\n                        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                        header(\"Content-Type: application/zip; charset=utf-8\");\n                        header(\"Content-Length: \" . filesize($archive_name));\n                        header('Content-Disposition: attachment; filename=\"' . basename($archive_name) . '\"');\n\n                        ob_end_clean();\n                        @readfile($archive_name) or error_log(\"Archive temp file not found: \" . $archive_name);\n\n                        unlink($archive_name);\n                    } else {\n                        $pdf->Output($fn, $GLOBALS['pdf_output']); // D = Download, I = Inline\n                    }\n                }\n            } catch (MpdfException $exception) {\n                die(text($exception));\n            }\n        } else {\n            // This is the case of writing the PDF as a message to the CMS portal.\n            $ptdata = getPatientData($pid, 'cmsportal_login');\n            $contents = $pdf->Output('', true);\n            echo \"<html><head>\\n\";\n            Header::setupHeader();\n            echo \"</head><body>\\n\";\n            $result = cms_portal_call(array(\n                'action' => 'putmessage',\n                'user' => $ptdata['cmsportal_login'],\n                'title' => xl('Your Clinical Report'),\n                'message' => xl('Please see the attached PDF.'),\n                'filename' => 'report.pdf',\n                'mimetype' => 'application/pdf',\n                'contents' => base64_encode($contents)\n            ));\n            if ($result['errmsg']) {\n                die(text($result['errmsg']));\n            }\n\n            echo \"<p class='mt-3'>\" . xlt('Report has been sent to the patient.') . \"</p>\\n\";\n            echo \"</body></html>\\n\";\n        }\n        foreach ($tmp_files_remove as $tmp_file) {\n            // Remove the tmp files that were created\n            unlink($tmp_file);\n        }\n    } else {\n        ?>\n        <?php if (!$printable) { ?>\n        <script src=\"<?php echo $GLOBALS['web_root'] ?>/interface/patient_file/report/custom_report.js?v=<?php echo $v_js_includes; ?>\"></script>\n        <script>\n            const searchBarHeight = document.querySelectorAll('.report_search_bar')[0].clientHeight;\n            document.getElementById('backLink').style.marginTop = `${searchBarHeight}px`;\n        </script>\n    <?php } ?>\n    \n</body>\n</html>\n<?php } ?>\n", "<?php\n\n/**\n *\n * Installer class.\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Andrew Moore <amoore@cpan.org>\n * @author    Ranganath Pathak <pathak@scrs1.org>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2010 Andrew Moore <amoore@cpan.org>\n * @copyright Copyright (c) 2019 Ranganath Pathak <pathak@scrs1.org>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nuse OpenEMR\\Gacl\\GaclApi;\n\nclass Installer\n{\n    public function __construct($cgi_variables)\n    {\n        // Installation variables\n        // For a good explanation of these variables, see documentation in\n        //   the contrib/util/installScripts/InstallerAuto.php file.\n        $this->iuser                    = isset($cgi_variables['iuser']) ? ($cgi_variables['iuser']) : '';\n        $this->iuserpass                = isset($cgi_variables['iuserpass']) ? ($cgi_variables['iuserpass']) : '';\n        $this->iuname                   = isset($cgi_variables['iuname']) ? ($cgi_variables['iuname']) : '';\n        $this->iufname                  = isset($cgi_variables['iufname']) ? ($cgi_variables['iufname']) : '';\n        $this->igroup                   = isset($cgi_variables['igroup']) ? ($cgi_variables['igroup']) : '';\n        $this->i2faEnable               = isset($cgi_variables['i2faenable']) ? ($cgi_variables['i2faenable']) : '';\n        $this->i2faSecret               = isset($cgi_variables['i2fasecret']) ? ($cgi_variables['i2fasecret']) : '';\n        $this->server                   = isset($cgi_variables['server']) ? ($cgi_variables['server']) : ''; // mysql server (usually localhost)\n        $this->loginhost                = isset($cgi_variables['loginhost']) ? ($cgi_variables['loginhost']) : ''; // php/apache server (usually localhost)\n        $this->port                     = isset($cgi_variables['port']) ? ($cgi_variables['port']) : '';\n        $this->root                     = isset($cgi_variables['root']) ? ($cgi_variables['root']) : '';\n        $this->rootpass                 = isset($cgi_variables['rootpass']) ? ($cgi_variables['rootpass']) : '';\n        $this->login                    = isset($cgi_variables['login']) ? ($cgi_variables['login']) : '';\n        $this->pass                     = isset($cgi_variables['pass']) ? ($cgi_variables['pass']) : '';\n        $this->dbname                   = isset($cgi_variables['dbname']) ? ($cgi_variables['dbname']) : '';\n        $this->collate                  = isset($cgi_variables['collate']) ? ($cgi_variables['collate']) : '';\n        $this->site                     = isset($cgi_variables['site']) ? ($cgi_variables['site']) : '';\n        $this->source_site_id           = isset($cgi_variables['source_site_id']) ? ($cgi_variables['source_site_id']) : '';\n        $this->clone_database           = isset($cgi_variables['clone_database']) ? ($cgi_variables['clone_database']) : '';\n        $this->no_root_db_access        = isset($cgi_variables['no_root_db_access']) ? ($cgi_variables['no_root_db_access']) : ''; // no root access to database. user/privileges pre-configured\n        $this->development_translations = isset($cgi_variables['development_translations']) ? ($cgi_variables['development_translations']) : '';\n        $this->new_theme                = isset($cgi_variables['new_theme']) ? ($cgi_variables['new_theme']) : '';\n        // Make this true for IPPF.\n        $this->ippf_specific = false;\n\n        // Record name of sql access file\n        $GLOBALS['OE_SITES_BASE'] = dirname(__FILE__) . '/../../sites';\n        $GLOBALS['OE_SITE_DIR'] = $GLOBALS['OE_SITES_BASE'] . '/' . $this->site;\n        $this->conffile  =  $GLOBALS['OE_SITE_DIR'] . '/sqlconf.php';\n\n        // Record names of sql table files\n        $this->main_sql = dirname(__FILE__) . '/../../sql/database.sql';\n        $this->translation_sql = dirname(__FILE__) . '/../../contrib/util/language_translations/currentLanguage_utf8.sql';\n        $this->devel_translation_sql = \"http://translations.openemr.io/languageTranslations_utf8.sql\";\n        $this->ippf_sql = dirname(__FILE__) . \"/../../sql/ippf_layout.sql\";\n        $this->icd9 = dirname(__FILE__) . \"/../../sql/icd9.sql\";\n        $this->cvx = dirname(__FILE__) . \"/../../sql/cvx_codes.sql\";\n        $this->additional_users = dirname(__FILE__) . \"/../../sql/official_additional_users.sql\";\n\n        // Prepare the dumpfile list\n        $this->initialize_dumpfile_list();\n\n        // Entities to hold error and debug messages\n        $this->error_message = '';\n        $this->debug_message = '';\n\n        // Entity to hold sql connection\n        $this->dbh = false;\n    }\n\n    public function login_is_valid()\n    {\n        if (($this->login == '') || (! isset($this->login))) {\n            $this->error_message = \"login is invalid: '$this->login'\";\n            return false;\n        }\n\n        return true;\n    }\n\n    public function char_is_valid($input_text)\n    {\n        // to prevent php injection\n        trim($input_text);\n        if ($input_text == '') {\n            return false;\n        }\n\n        if (preg_match('@[\\\\\\\\;()<>/\\'\"]@', $input_text)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function databaseNameIsValid($name)\n    {\n        if (preg_match('/[^A-Za-z0-9_-]/', $name)) {\n            return false;\n        }\n        return true;\n    }\n\n    public function collateNameIsValid($name)\n    {\n        if (preg_match('/[^A-Za-z0-9_-]/', $name)) {\n            return false;\n        }\n        return true;\n    }\n\n    public function iuser_is_valid()\n    {\n        if (strpos($this->iuser, \" \")) {\n            $this->error_message = \"Initial user is invalid: '$this->iuser'\";\n            return false;\n        }\n\n        return true;\n    }\n\n    public function iuname_is_valid()\n    {\n        if ($this->iuname == \"\" || !isset($this->iuname)) {\n            $this->error_message = \"Initial user last name is invalid: '$this->iuname'\";\n            return false;\n        }\n\n        return true;\n    }\n\n    public function password_is_valid()\n    {\n        if ($this->pass == \"\" || !isset($this->pass)) {\n            $this->error_message = \"The password for the new database account is invalid: '$this->pass'\";\n            return false;\n        }\n\n        return true;\n    }\n\n    public function user_password_is_valid()\n    {\n        if ($this->iuserpass == \"\" || !isset($this->iuserpass)) {\n            $this->error_message = \"The password for the user is invalid: '$this->iuserpass'\";\n            return false;\n        }\n\n        return true;\n    }\n\n\n\n    public function root_database_connection()\n    {\n        $this->dbh = $this->connect_to_database($this->server, $this->root, $this->rootpass, $this->port);\n        if ($this->dbh) {\n            if (! $this->set_sql_strict()) {\n                $this->error_message = 'unable to set strict sql setting';\n                return false;\n            }\n\n            return true;\n        } else {\n            $this->error_message = 'unable to connect to database as root';\n            return false;\n        }\n    }\n\n    public function user_database_connection()\n    {\n        $this->dbh = $this->connect_to_database($this->server, $this->login, $this->pass, $this->port, $this->dbname);\n        if (! $this->dbh) {\n            $this->error_message = \"unable to connect to database as user: '$this->login'\";\n            return false;\n        }\n\n        if (! $this->set_sql_strict()) {\n            $this->error_message = 'unable to set strict sql setting';\n            return false;\n        }\n\n        if (! $this->set_collation()) {\n            $this->error_message = 'unable to set sql collation';\n            return false;\n        }\n\n        if (! mysqli_select_db($this->dbh, $this->dbname)) {\n            $this->error_message = \"unable to select database: '$this->dbname'\";\n            return false;\n        }\n\n        return true;\n    }\n\n    public function create_database()\n    {\n        $sql = \"create database \" . $this->escapeDatabaseName($this->dbname);\n        if (empty($this->collate) || ($this->collate == 'utf8_general_ci')) {\n            $this->collate = 'utf8mb4_general_ci';\n        }\n        $sql .= \" character set utf8mb4 collate \" . $this->escapeCollateName($this->collate);\n        $this->set_collation();\n\n        return $this->execute_sql($sql);\n    }\n\n    public function drop_database()\n    {\n        $sql = \"drop database if exists \" . $this->escapeDatabaseName($this->dbname);\n        return $this->execute_sql($sql);\n    }\n\n    public function create_database_user()\n    {\n        // First, check for database user in the mysql.user table (this works for all except mariadb 10.4+)\n        $checkUser = $this->execute_sql(\"SELECT user FROM mysql.user WHERE user = '\" . $this->escapeSql($this->login) . \"' AND host = '\" . $this->escapeSql($this->loginhost) . \"'\", false);\n        if ($checkUser === false) {\n            // Above caused error, so is MariaDB 10.4+, and need to do below query instead in the mysql.global_priv table\n            $checkUser = $this->execute_sql(\"SELECT user FROM mysql.global_priv WHERE user = '\" . $this->escapeSql($this->login) . \"' AND host = '\" . $this->escapeSql($this->loginhost) . \"'\");\n        }\n\n        if ($checkUser === false) {\n            // there was an error in the check database user query, so return false\n            return false;\n        } elseif ($checkUser->num_rows > 0) {\n            // the mysql user already exists, so do not need to create the user, but need to set the password\n            // Note need to try two different methods, first is for newer mysql versions and second is for older mysql versions (if the first method fails)\n            $returnSql = $this->execute_sql(\"ALTER USER '\" . $this->escapeSql($this->login) . \"'@'\" . $this->escapeSql($this->loginhost) . \"' IDENTIFIED BY '\" . $this->escapeSql($this->pass) . \"'\", false);\n            if ($returnSql === false) {\n                error_log(\"Using older mysql version method to set password for the mysql user\");\n                $returnSql = $this->execute_sql(\"SET PASSWORD FOR '\" . $this->escapeSql($this->login) . \"'@'\" . $this->escapeSql($this->loginhost) . \"' = PASSWORD('\" . $this->escapeSql($this->pass) . \"')\");\n            }\n            return $returnSql;\n        } else {\n            // the mysql user does not yet exist, so create the user\n            return $this->execute_sql(\"CREATE USER '\" . $this->escapeSql($this->login) . \"'@'\" . $this->escapeSql($this->loginhost) . \"' IDENTIFIED BY '\" . $this->escapeSql($this->pass) . \"'\");\n        }\n    }\n\n    public function grant_privileges()\n    {\n        return $this->execute_sql(\"GRANT ALL PRIVILEGES ON \" . $this->escapeDatabaseName($this->dbname) . \".* TO '\" . $this->escapeSql($this->login) . \"'@'\" . $this->escapeSql($this->loginhost) . \"'\");\n    }\n\n    public function disconnect()\n    {\n        return mysqli_close($this->dbh);\n    }\n\n  /**\n   * This method creates any dumpfiles necessary.\n   * This is actually only done if we're cloning an existing site\n   * and we need to dump their database into a file.\n   * @return bool indicating success\n   */\n    public function create_dumpfiles()\n    {\n        return $this->dumpSourceDatabase();\n    }\n\n    public function load_dumpfiles()\n    {\n        $sql_results = ''; // information string which is returned\n        foreach ($this->dumpfiles as $filename => $title) {\n            $sql_results_temp = '';\n            $sql_results_temp = $this->load_file($filename, $title);\n            if ($sql_results_temp == false) {\n                return false;\n            }\n\n            $sql_results .= $sql_results_temp;\n        }\n\n        return $sql_results;\n    }\n\n    public function load_file($filename, $title)\n    {\n        $sql_results = ''; // information string which is returned\n        $sql_results .= \"Creating $title tables...\\n\";\n        $fd = fopen($filename, 'r');\n        if ($fd == false) {\n            $this->error_message = \"ERROR.  Could not open dumpfile '$filename'.\\n\";\n            return false;\n        }\n\n        $query = \"\";\n        $line = \"\";\n\n        // Settings to drastically speed up installation with InnoDB\n        if (! $this->execute_sql(\"SET autocommit=0;\")) {\n            return false;\n        }\n\n        if (! $this->execute_sql(\"START TRANSACTION;\")) {\n            return false;\n        }\n\n        while (!feof($fd)) {\n            $line = fgets($fd, 1024);\n            $line = rtrim($line);\n            if (substr($line, 0, 2) == \"--\") { // Kill comments\n                    continue;\n            }\n\n            if (substr($line, 0, 1) == \"#\") { // Kill comments\n                    continue;\n            }\n\n            if ($line == \"\") {\n                    continue;\n            }\n\n            $query = $query . $line;          // Check for full query\n            $chr = substr($query, strlen($query) - 1, 1);\n            if ($chr == \";\") { // valid query, execute\n                    $query = rtrim($query, \";\");\n                if (! $this->execute_sql($query)) {\n                    return false;\n                }\n\n                    $query = \"\";\n            }\n        }\n\n        // Settings to drastically speed up installation with InnoDB\n        if (! $this->execute_sql(\"COMMIT;\")) {\n            return false;\n        }\n\n        if (! $this->execute_sql(\"SET autocommit=1;\")) {\n            return false;\n        }\n\n        $sql_results .= \"<span class='text-success'><b>OK</b></span>.<br>\\n\";\n        fclose($fd);\n        return $sql_results;\n    }\n\n    public function add_version_info()\n    {\n        include dirname(__FILE__) . \"/../../version.php\";\n        if ($this->execute_sql(\"UPDATE version SET v_major = '\" . $this->escapeSql($v_major) . \"', v_minor = '\" . $this->escapeSql($v_minor) . \"', v_patch = '\" . $this->escapeSql($v_patch) . \"', v_realpatch = '\" . $this->escapeSql($v_realpatch) . \"', v_tag = '\" . $this->escapeSql($v_tag) . \"', v_database = '\" . $this->escapeSql($v_database) . \"', v_acl = '\" . $this->escapeSql($v_acl) . \"'\") == false) {\n            $this->error_message = \"ERROR. Unable insert version information into database\\n\" .\n            \"<p>\" . mysqli_error($this->dbh) . \" (#\" . mysqli_errno($this->dbh) . \")\\n\";\n            return false;\n        }\n\n        return true;\n    }\n\n    public function add_initial_user()\n    {\n        if ($this->execute_sql(\"INSERT INTO `groups` (id, name, user) VALUES (1,'\" . $this->escapeSql($this->igroup) . \"','\" . $this->escapeSql($this->iuser) . \"')\") == false) {\n            $this->error_message = \"ERROR. Unable to add initial user group\\n\" .\n            \"<p>\" . mysqli_error($this->dbh) . \" (#\" . mysqli_errno($this->dbh) . \")\\n\";\n            return false;\n        }\n\n        if ($this->execute_sql(\"INSERT INTO users (id, username, password, authorized, lname, fname, facility_id, calendar, cal_ui) VALUES (1,'\" . $this->escapeSql($this->iuser) . \"','NoLongerUsed',1,'\" . $this->escapeSql($this->iuname) . \"','\" . $this->escapeSql($this->iufname) . \"',3,1,3)\") == false) {\n            $this->error_message = \"ERROR. Unable to add initial user\\n\" .\n            \"<p>\" . mysqli_error($this->dbh) . \" (#\" . mysqli_errno($this->dbh) . \")\\n\";\n            return false;\n        }\n\n        $hash = password_hash($this->iuserpass, PASSWORD_DEFAULT);\n        if (empty($hash)) {\n            // Something is seriously wrong\n            error_log('OpenEMR Error : OpenEMR is not working because unable to create a hash.');\n            die(\"OpenEMR Error : OpenEMR is not working because unable to create a hash.\");\n        }\n        if ($this->execute_sql(\"INSERT INTO users_secure (id, username, password, last_update_password) VALUES (1,'\" . $this->escapeSql($this->iuser) . \"','\" . $this->escapeSql($hash) . \"',NOW())\") == false) {\n            $this->error_message = \"ERROR. Unable to add initial user login credentials\\n\" .\n            \"<p>\" . mysqli_error($this->dbh) . \" (#\" . mysqli_errno($this->dbh) . \")\\n\";\n            return false;\n        }\n\n        // Create new 2fa if enabled\n        if (($this->i2faEnable) && (!empty($this->i2faSecret)) && (class_exists('Totp')) && (class_exists('OpenEMR\\Common\\Crypto\\CryptoGen'))) {\n            // Encrypt the new secret with the hashed password\n            $cryptoGen = new OpenEMR\\Common\\Crypto\\CryptoGen();\n            $secret = $cryptoGen->encryptStandard($this->i2faSecret, $hash);\n            if ($this->execute_sql(\"INSERT INTO login_mfa_registrations (user_id, name, method, var1, var2) VALUES (1, 'App Based 2FA', 'TOTP', '\" . $this->escapeSql($secret) . \"', '')\") == false) {\n                $this->error_message = \"ERROR. Unable to add initial user's 2FA credentials\\n\" .\n                    \"<p>\" . mysqli_error($this->dbh) . \" (#\" . mysqli_errno($this->dbh) . \")\\n\";\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Handle the additional users now that our gacl's have finished installing.\n     * @return bool\n     */\n    public function install_additional_users()\n    {\n        // Add the official openemr users (services)\n        if ($this->load_file($this->additional_users, \"Additional Official Users\") == false) {\n            return false;\n        }\n        return true;\n    }\n\n    public function on_care_coordination()\n    {\n        $resource = $this->execute_sql(\"SELECT `mod_id` FROM `modules` WHERE `mod_name` = 'Carecoordination' LIMIT 1\");\n        $resource_array = mysqli_fetch_array($resource, MYSQLI_ASSOC);\n        $modId = $resource_array['mod_id'];\n        if (empty($modId)) {\n            $this->error_message = \"ERROR configuring Care Coordination module. Unable to get mod_id for Carecoordination module\\n\";\n            return false;\n        }\n\n        $resource = $this->execute_sql(\"SELECT `section_id` FROM `module_acl_sections` WHERE `section_identifier` = 'carecoordination' LIMIT 1\");\n        $resource_array = mysqli_fetch_array($resource, MYSQLI_ASSOC);\n        $sectionId = $resource_array['section_id'];\n        if (empty($sectionId)) {\n            $this->error_message = \"ERROR configuring Care Coordination module. Unable to get section_id for carecoordination module section\\n\";\n            return false;\n        }\n\n        $resource = $this->execute_sql(\"SELECT `id` FROM `gacl_aro_groups` WHERE `value` = 'admin' LIMIT 1\");\n        $resource_array = mysqli_fetch_array($resource, MYSQLI_ASSOC);\n        $groupId = $resource_array['id'];\n        if (empty($groupId)) {\n            $this->error_message = \"ERROR configuring Care Coordination module. Unable to get id for gacl_aro_groups admin section\\n\";\n            return false;\n        }\n\n        if ($this->execute_sql(\"INSERT INTO `module_acl_group_settings` (`module_id`, `group_id`, `section_id`, `allowed`) VALUES ('\" . $this->escapeSql($modId) . \"', '\" . $this->escapeSql($groupId) . \"', '\" . $this->escapeSql($sectionId) . \"', 1)\") == false) {\n            $this->error_message = \"ERROR configuring Care Coordination module. Unable to add the module_acl_group_settings acl entry\\n\";\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Generates the initial user's 2FA QR Code\n     * @return bool|string|void\n     */\n    public function get_initial_user_2fa_qr()\n    {\n        if (($this->i2faEnable) && (!empty($this->i2faSecret)) && (class_exists('Totp'))) {\n            $adminTotp = new Totp($this->i2faSecret, $this->iuser);\n            $qr = $adminTotp->generateQrCode();\n            return $qr;\n        }\n        return false;\n    }\n\n  /**\n   * Create site directory if it is missing.\n   * @global string $GLOBALS['OE_SITE_DIR'] contains the name of the site directory to create\n   * @return name of the site directory or False\n   */\n    public function create_site_directory()\n    {\n        if (!file_exists($GLOBALS['OE_SITE_DIR'])) {\n            $source_directory      = $GLOBALS['OE_SITES_BASE'] . \"/\" . $this->source_site_id;\n            $destination_directory = $GLOBALS['OE_SITE_DIR'];\n            if (! $this->recurse_copy($source_directory, $destination_directory)) {\n                $this->error_message = \"unable to copy directory: '$source_directory' to '$destination_directory'. \" . $this->error_message;\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public function write_configuration_file()\n    {\n        @touch($this->conffile); // php bug\n        $fd = @fopen($this->conffile, 'w');\n        if (! $fd) {\n            $this->error_message = 'unable to open configuration file for writing: ' . $this->conffile;\n            return false;\n        }\n\n        $string = '<?php\n//  OpenEMR\n//  MySQL Config\n\n';\n\n        $it_died = 0;   //fmg: variable keeps running track of any errors\n\n        fwrite($fd, $string) or $it_died++;\n        fwrite($fd, \"global \\$disable_utf8_flag;\\n\") or $it_died++;\n        fwrite($fd, \"\\$disable_utf8_flag = false;\\n\\n\") or $it_died++;\n        fwrite($fd, \"\\$host\\t= '$this->server';\\n\") or $it_died++;\n        fwrite($fd, \"\\$port\\t= '$this->port';\\n\") or $it_died++;\n        fwrite($fd, \"\\$login\\t= '$this->login';\\n\") or $it_died++;\n        fwrite($fd, \"\\$pass\\t= '$this->pass';\\n\") or $it_died++;\n        fwrite($fd, \"\\$dbase\\t= '$this->dbname';\\n\") or $it_died++;\n        fwrite($fd, \"\\$db_encoding\\t= 'utf8mb4';\\n\") or $it_died++;\n\n        $string = '\n$sqlconf = array();\nglobal $sqlconf;\n$sqlconf[\"host\"]= $host;\n$sqlconf[\"port\"] = $port;\n$sqlconf[\"login\"] = $login;\n$sqlconf[\"pass\"] = $pass;\n$sqlconf[\"dbase\"] = $dbase;\n$sqlconf[\"db_encoding\"] = $db_encoding;\n\n//////////////////////////\n//////////////////////////\n//////////////////////////\n//////DO NOT TOUCH THIS///\n$config = 1; /////////////\n//////////////////////////\n//////////////////////////\n//////////////////////////\n?>\n';\n\n        fwrite($fd, $string) or $it_died++;\n        fclose($fd) or $it_died++;\n\n        //it's rather irresponsible to not report errors when writing this file.\n        if ($it_died != 0) {\n            $this->error_message = \"ERROR. Couldn't write $it_died lines to config file '$this->conffile'.\\n\";\n            return false;\n        }\n\n        // Tell PHP that its cached bytecode version of sqlconf.php is no longer usable.\n        if (function_exists('opcache_invalidate')) {\n            opcache_invalidate($this->conffile, true);\n        }\n\n        return true;\n    }\n\n    public function insert_globals()\n    {\n        if (!(function_exists('xl'))) {\n            function xl($s)\n            {\n                return $s;\n            }\n        } else {\n            $GLOBALS['temp_skip_translations'] = true;\n        }\n        $skipGlobalEvent = true; //use in globals.inc.php script to skip event stuff\n        require(dirname(__FILE__) . '/../globals.inc.php');\n        foreach ($GLOBALS_METADATA as $grpname => $grparr) {\n            foreach ($grparr as $fldid => $fldarr) {\n                list($fldname, $fldtype, $flddef, $flddesc) = $fldarr;\n                if (is_array($fldtype) || substr($fldtype, 0, 2) !== 'm_') {\n                    $res = $this->execute_sql(\"SELECT count(*) AS count FROM globals WHERE gl_name = '\" . $this->escapeSql($fldid) . \"'\");\n                    $row = mysqli_fetch_array($res, MYSQLI_ASSOC);\n                    if (empty($row['count'])) {\n                        $this->execute_sql(\"INSERT INTO globals ( gl_name, gl_index, gl_value ) \" .\n                           \"VALUES ( '\" . $this->escapeSql($fldid) . \"', '0', '\" . $this->escapeSql($flddef) . \"' )\");\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public function install_gacl()\n    {\n\n        $gacl = new GaclApi();\n\n        // Create the ACO sections.  Every ACO must have a section.\n        //\n        if ($gacl->add_object_section('Accounting', 'acct', 10, 0, 'ACO') === false) {\n            $this->error_message = \"ERROR, Unable to create the access controls for OpenEMR.\";\n            return false;\n        }\n        // xl('Accounting')\n        $gacl->add_object_section('Administration', 'admin', 10, 0, 'ACO');\n        // xl('Administration')\n        $gacl->add_object_section('Encounters', 'encounters', 10, 0, 'ACO');\n        // xl('Encounters')\n        $gacl->add_object_section('Lists', 'lists', 10, 0, 'ACO');\n        // xl('Lists')\n        $gacl->add_object_section('Patients', 'patients', 10, 0, 'ACO');\n        // xl('Patients')\n        $gacl->add_object_section('Squads', 'squads', 10, 0, 'ACO');\n        // xl('Squads')\n        $gacl->add_object_section('Sensitivities', 'sensitivities', 10, 0, 'ACO');\n        // xl('Sensitivities')\n        $gacl->add_object_section('Placeholder', 'placeholder', 10, 0, 'ACO');\n        // xl('Placeholder')\n        $gacl->add_object_section('Nation Notes', 'nationnotes', 10, 0, 'ACO');\n        // xl('Nation Notes')\n        $gacl->add_object_section('Patient Portal', 'patientportal', 10, 0, 'ACO');\n        // xl('Patient Portal')\n        $gacl->add_object_section('Menus', 'menus', 10, 0, 'ACO');\n        // xl('Menus')\n        $gacl->add_object_section('Groups', 'groups', 10, 0, 'ACO');\n        // xl('Groups')\n        $gacl->add_object_section('Inventory', 'inventory', 10, 0, 'ACO');\n        // xl('Inventory')\n\n        // Create Accounting ACOs.\n        //\n        $gacl->add_object('acct', 'Billing (write optional)', 'bill', 10, 0, 'ACO');\n        // xl('Billing (write optional)')\n        $gacl->add_object('acct', 'Price Discounting', 'disc', 10, 0, 'ACO');\n        // xl('Price Discounting')\n        $gacl->add_object('acct', 'EOB Data Entry', 'eob', 10, 0, 'ACO');\n        // xl('EOB Data Entry')\n        $gacl->add_object('acct', 'Financial Reporting - my encounters', 'rep', 10, 0, 'ACO');\n        // xl('Financial Reporting - my encounters')\n        $gacl->add_object('acct', 'Financial Reporting - anything', 'rep_a', 10, 0, 'ACO');\n        // xl('Financial Reporting - anything')\n\n        // Create Administration ACOs.\n        //\n        $gacl->add_object('admin', 'Superuser', 'super', 10, 0, 'ACO');\n        // xl('Superuser')\n        $gacl->add_object('admin', 'Calendar Settings', 'calendar', 10, 0, 'ACO');\n        // xl('Calendar Settings')\n        $gacl->add_object('admin', 'Database Reporting', 'database', 10, 0, 'ACO');\n        // xl('Database Reporting')\n        $gacl->add_object('admin', 'Forms Administration', 'forms', 10, 0, 'ACO');\n        // xl('Forms Administration')\n        $gacl->add_object('admin', 'Practice Settings', 'practice', 10, 0, 'ACO');\n        // xl('Practice Settings')\n        $gacl->add_object('admin', 'Superbill Codes Administration', 'superbill', 10, 0, 'ACO');\n        // xl('Superbill Codes Administration')\n        $gacl->add_object('admin', 'Users/Groups/Logs Administration', 'users', 10, 0, 'ACO');\n        // xl('Users/Groups/Logs Administration')\n        $gacl->add_object('admin', 'Batch Communication Tool', 'batchcom', 10, 0, 'ACO');\n        // xl('Batch Communication Tool')\n        $gacl->add_object('admin', 'Language Interface Tool', 'language', 10, 0, 'ACO');\n        // xl('Language Interface Tool')\n        $gacl->add_object('admin', 'Inventory Administration', 'drugs', 10, 0, 'ACO');\n        // xl('Inventory Administration')\n        $gacl->add_object('admin', 'ACL Administration', 'acl', 10, 0, 'ACO');\n        // xl('ACL Administration')\n        $gacl->add_object('admin', 'Multipledb', 'multipledb', 10, 0, 'ACO');\n        // xl('Multipledb')\n        $gacl->add_object('admin', 'Menu', 'menu', 10, 0, 'ACO');\n        // xl('Menu')\n        $gacl->add_object('admin', 'Manage modules', 'manage_modules', 10, 0, 'ACO');\n        // xl('Manage modules')\n\n\n        // Create ACOs for encounters.\n        //\n        $gacl->add_object('encounters', 'Authorize - my encounters', 'auth', 10, 0, 'ACO');\n        // xl('Authorize - my encounters')\n        $gacl->add_object('encounters', 'Authorize - any encounters', 'auth_a', 10, 0, 'ACO');\n        // xl('Authorize - any encounters')\n        $gacl->add_object('encounters', 'Coding - my encounters (write,wsome optional)', 'coding', 10, 0, 'ACO');\n        // xl('Coding - my encounters (write,wsome optional)')\n        $gacl->add_object('encounters', 'Coding - any encounters (write,wsome optional)', 'coding_a', 10, 0, 'ACO');\n        // xl('Coding - any encounters (write,wsome optional)')\n        $gacl->add_object('encounters', 'Notes - my encounters (write,addonly optional)', 'notes', 10, 0, 'ACO');\n        // xl('Notes - my encounters (write,addonly optional)')\n        $gacl->add_object('encounters', 'Notes - any encounters (write,addonly optional)', 'notes_a', 10, 0, 'ACO');\n        // xl('Notes - any encounters (write,addonly optional)')\n        $gacl->add_object('encounters', 'Fix encounter dates - any encounters', 'date_a', 10, 0, 'ACO');\n        // xl('Fix encounter dates - any encounters')\n        $gacl->add_object('encounters', 'Less-private information (write,addonly optional)', 'relaxed', 10, 0, 'ACO');\n        // xl('Less-private information (write,addonly optional)')\n\n        // Create ACOs for lists.\n        //\n        $gacl->add_object('lists', 'Default List (write,addonly optional)', 'default', 10, 0, 'ACO');\n        // xl('Default List (write,addonly optional)')\n        $gacl->add_object('lists', 'State List (write,addonly optional)', 'state', 10, 0, 'ACO');\n        // xl('State List (write,addonly optional)')\n        $gacl->add_object('lists', 'Country List (write,addonly optional)', 'country', 10, 0, 'ACO');\n        // xl('Country List (write,addonly optional)')\n        $gacl->add_object('lists', 'Language List (write,addonly optional)', 'language', 10, 0, 'ACO');\n        // xl('Language List (write,addonly optional)')\n        $gacl->add_object('lists', 'Ethnicity-Race List (write,addonly optional)', 'ethrace', 10, 0, 'ACO');\n        // xl('Ethnicity-Race List (write,addonly optional)')\n\n        // Create ACOs for patientportal.\n        //\n        $gacl->add_object('patientportal', 'Patient Portal', 'portal', 10, 0, 'ACO');\n        // xl('Patient Portal')\n\n        // Create ACOs for modules.\n        //\n        $gacl->add_object('menus', 'Modules', 'modle', 10, 0, 'ACO');\n        // xl('Modules')\n\n        // Create ACOs for patients.\n        //\n        $gacl->add_object('patients', 'Appointments (write,wsome optional)', 'appt', 10, 0, 'ACO');\n        // xl('Appointments (write,wsome optional)')\n        $gacl->add_object('patients', 'Demographics (write,addonly optional)', 'demo', 10, 0, 'ACO');\n        // xl('Demographics (write,addonly optional)')\n        $gacl->add_object('patients', 'Medical/History (write,addonly optional)', 'med', 10, 0, 'ACO');\n        // xl('Medical/History (write,addonly optional)')\n        $gacl->add_object('patients', 'Transactions (write optional)', 'trans', 10, 0, 'ACO');\n        // xl('Transactions (write optional)')\n        $gacl->add_object('patients', 'Documents (write,addonly optional)', 'docs', 10, 0, 'ACO');\n        // xl('Documents (write,addonly optional)')\n        $gacl->add_object('patients', 'Documents Delete', 'docs_rm', 10, 0, 'ACO');\n        // xl('Documents Delete')\n        $gacl->add_object('patients', 'Patient Notes (write,addonly optional)', 'notes', 10, 0, 'ACO');\n        // xl('Patient Notes (write,addonly optional)')\n        $gacl->add_object('patients', 'Sign Lab Results (write,addonly optional)', 'sign', 10, 0, 'ACO');\n        // xl('Sign Lab Results (write,addonly optional)')\n        $gacl->add_object('patients', 'Patient Reminders (write,addonly optional)', 'reminder', 10, 0, 'ACO');\n        // xl('Patient Reminders (write,addonly optional)')\n        $gacl->add_object('patients', 'Clinical Reminders/Alerts (write,addonly optional)', 'alert', 10, 0, 'ACO');\n        // xl('Clinical Reminders/Alerts (write,addonly optional)')\n        $gacl->add_object('patients', 'Disclosures (write,addonly optional)', 'disclosure', 10, 0, 'ACO');\n        // xl('Disclosures (write,addonly optional)')\n        $gacl->add_object('patients', 'Prescriptions (write,addonly optional)', 'rx', 10, 0, 'ACO');\n        // xl('Prescriptions (write,addonly optional)')\n        $gacl->add_object('patients', 'Amendments (write,addonly optional)', 'amendment', 10, 0, 'ACO');\n        // xl('Amendments (write,addonly optional)')\n        $gacl->add_object('patients', 'Lab Results (write,addonly optional)', 'lab', 10, 0, 'ACO');\n        // xl('Lab Results (write,addonly optional)')\n        $gacl->add_object('patients', 'Patient Report', 'pat_rep', 10, 0, 'ACO');\n        // xl('Patient Report')\n\n\n        $gacl->add_object('groups', 'View/Add/Update groups', 'gadd', 10, 0, 'ACO');\n        // xl('View/Add/Update groups')\n        $gacl->add_object('groups', 'View/Create/Update groups appointment in calendar', 'gcalendar', 10, 0, 'ACO');\n        // xl('View/Create/Update groups appointment in calendar')\n        $gacl->add_object('groups', 'Group encounter log', 'glog', 10, 0, 'ACO');\n        // xl('Group encounter log')\n        $gacl->add_object('groups', 'Group detailed log of appointment in patient record', 'gdlog', 10, 0, 'ACO');\n        // xl('Group detailed log of appointment in patient record')\n        $gacl->add_object('groups', 'Send message from the permanent group therapist to the personal therapist', 'gm', 10, 0, 'ACO');\n        // xl('Send message from the permanent group therapist to the personal therapist')\n\n        // Create ACOs for sensitivities.\n        //\n        $gacl->add_object('sensitivities', 'Normal', 'normal', 10, 0, 'ACO');\n        // xl('Normal')\n        $gacl->add_object('sensitivities', 'High', 'high', 20, 0, 'ACO');\n        // xl('High')\n\n        // Create ACO for placeholder.\n        //\n        $gacl->add_object('placeholder', 'Placeholder (Maintains empty ACLs)', 'filler', 10, 0, 'ACO');\n        // xl('Placeholder (Maintains empty ACLs)')\n\n        // Create ACO for nationnotes.\n        //\n        $gacl->add_object('nationnotes', 'Nation Notes Configure', 'nn_configure', 10, 0, 'ACO');\n        // xl('Nation Notes Configure')\n\n        // Create ACOs for Inventory.\n        //\n        $gacl->add_object('inventory', 'Lots', 'lots', 10, 0, 'ACO');\n        // xl('Lots')\n        $gacl->add_object('inventory', 'Sales', 'sales', 20, 0, 'ACO');\n        // xl('Sales')\n        $gacl->add_object('inventory', 'Purchases', 'purchases', 30, 0, 'ACO');\n        // xl('Purchases')\n        $gacl->add_object('inventory', 'Transfers', 'transfers', 40, 0, 'ACO');\n        // xl('Transfers')\n        $gacl->add_object('inventory', 'Adjustments', 'adjustments', 50, 0, 'ACO');\n        // xl('Adjustments')\n        $gacl->add_object('inventory', 'Consumption', 'consumption', 60, 0, 'ACO');\n        // xl('Consumption')\n        $gacl->add_object('inventory', 'Destruction', 'destruction', 70, 0, 'ACO');\n        // xl('Destruction')\n        $gacl->add_object('inventory', 'Reporting', 'reporting', 80, 0, 'ACO');\n        // xl('Reporting')\n\n        // Create ARO groups.\n        //\n        $users = $gacl->add_group('users', 'OpenEMR Users', 0, 'ARO');\n        // xl('OpenEMR Users')\n        $admin = $gacl->add_group('admin', 'Administrators', $users, 'ARO');\n        // xl('Administrators')\n        $clin  = $gacl->add_group('clin', 'Clinicians', $users, 'ARO');\n        // xl('Clinicians')\n        $doc   = $gacl->add_group('doc', 'Physicians', $users, 'ARO');\n        // xl('Physicians')\n        $front = $gacl->add_group('front', 'Front Office', $users, 'ARO');\n        // xl('Front Office')\n        $back  = $gacl->add_group('back', 'Accounting', $users, 'ARO');\n        // xl('Accounting')\n        $breakglass  = $gacl->add_group('breakglass', 'Emergency Login', $users, 'ARO');\n        // xl('Emergency Login')\n\n\n        // Create a Users section for the AROs (humans).\n        //\n        $gacl->add_object_section('Users', 'users', 10, 0, 'ARO');\n        // xl('Users')\n\n        // Create the Administrator in the above-created \"users\" section\n        // and add him/her to the above-created \"admin\" group.\n        // If this script is being used by OpenEMR's setup, then will\n        //   incorporate the installation values. Otherwise will\n        //    hardcode the 'admin' user.\n        if (isset($this) && isset($this->iuser)) {\n            $gacl->add_object('users', $this->iuname, $this->iuser, 10, 0, 'ARO');\n            $gacl->add_group_object($admin, 'users', $this->iuser, 'ARO');\n        } else {\n            $gacl->add_object('users', 'Administrator', 'admin', 10, 0, 'ARO');\n            $gacl->add_group_object($admin, 'users', 'admin', 'ARO');\n        }\n\n        // Declare return terms for language translations\n        //  xl('write') xl('wsome') xl('addonly') xl('view')\n\n        // Set permissions for administrators.\n        //\n        $gacl->add_acl(\n            array(\n                'acct' => array('bill', 'disc', 'eob', 'rep', 'rep_a'),\n                'admin' => array('calendar', 'database', 'forms', 'practice', 'superbill', 'users', 'batchcom', 'language', 'super', 'drugs', 'acl','multipledb','menu','manage_modules'),\n                'encounters' => array('auth_a', 'auth', 'coding_a', 'coding', 'notes_a', 'notes', 'date_a', 'relaxed'),\n                'inventory' => array('lots', 'sales', 'purchases', 'transfers', 'adjustments', 'consumption', 'destruction', 'reporting'),\n                'lists' => array('default','state','country','language','ethrace'),\n                'patients' => array('appt', 'demo', 'med', 'trans', 'docs', 'notes', 'sign', 'reminder', 'alert', 'disclosure', 'rx', 'amendment', 'lab', 'docs_rm','pat_rep'),\n                'sensitivities' => array('normal', 'high'),\n                'nationnotes' => array('nn_configure'),\n                'patientportal' => array('portal'),\n                'menus' => array('modle'),\n                'groups' => array('gadd','gcalendar','glog','gdlog','gm')\n            ),\n            null,\n            array($admin),\n            null,\n            null,\n            1,\n            1,\n            'write',\n            'Administrators can do anything'\n        );\n        // xl('Administrators can do anything')\n\n        // Set permissions for physicians.\n        //\n        $gacl->add_acl(\n            array(\n                'patients' => array('pat_rep')\n            ),\n            null,\n            array($doc),\n            null,\n            null,\n            1,\n            1,\n            'view',\n            'Things that physicians can only read'\n        );\n        // xl('Things that physicians can only read')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($doc),\n            null,\n            null,\n            1,\n            1,\n            'addonly',\n            'Things that physicians can read and enter but not modify'\n        );\n        // xl('Things that physicians can read and enter but not modify')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($doc),\n            null,\n            null,\n            1,\n            1,\n            'wsome',\n            'Things that physicians can read and partly modify'\n        );\n        // xl('Things that physicians can read and partly modify')\n        $gacl->add_acl(\n            array(\n                'acct' => array('disc', 'rep'),\n                'admin' => array('drugs'),\n                'encounters' => array('auth_a', 'auth', 'coding_a', 'coding', 'notes_a', 'notes', 'date_a', 'relaxed'),\n                'patients' => array('appt', 'demo', 'med', 'trans', 'docs', 'notes', 'sign', 'reminder', 'alert',\n                    'disclosure', 'rx', 'amendment', 'lab'),\n                'sensitivities' => array('normal', 'high'),\n                'groups' => array('gcalendar','glog')\n            ),\n            null,\n            array($doc),\n            null,\n            null,\n            1,\n            1,\n            'write',\n            'Things that physicians can read and modify'\n        );\n        // xl('Things that physicians can read and modify')\n\n        // Set permissions for clinicians.\n        //\n        $gacl->add_acl(\n            array(\n                'patients' => array('pat_rep')\n            ),\n            null,\n            array($clin),\n            null,\n            null,\n            1,\n            1,\n            'view',\n            'Things that clinicians can only read'\n        );\n        // xl('Things that clinicians can only read')\n        $gacl->add_acl(\n            array(\n                'encounters' => array('notes', 'relaxed'),\n                'patients' => array('demo', 'med', 'docs', 'notes','trans', 'reminder', 'alert', 'disclosure', 'rx', 'amendment', 'lab'),\n                'sensitivities' => array('normal')\n            ),\n            null,\n            array($clin),\n            null,\n            null,\n            1,\n            1,\n            'addonly',\n            'Things that clinicians can read and enter but not modify'\n        );\n        // xl('Things that clinicians can read and enter but not modify')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($clin),\n            null,\n            null,\n            1,\n            1,\n            'wsome',\n            'Things that clinicians can read and partly modify'\n        );\n        // xl('Things that clinicians can read and partly modify')\n        $gacl->add_acl(\n            array(\n                'admin' => array('drugs'),\n                'encounters' => array('auth', 'coding', 'notes'),\n                'patients' => array('appt'),\n                'groups' => array('gcalendar', 'glog')\n            ),\n            null,\n            array($clin),\n            null,\n            null,\n            1,\n            1,\n            'write',\n            'Things that clinicians can read and modify'\n        );\n        // xl('Things that clinicians can read and modify')\n\n        // Set permissions for front office staff.\n        //\n        $gacl->add_acl(\n            array(\n                'patients' => array('alert')\n            ),\n            null,\n            array($front),\n            null,\n            null,\n            1,\n            1,\n            'view',\n            'Things that front office can only read'\n        );\n        // xl('Things that front office can only read')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($front),\n            null,\n            null,\n            1,\n            1,\n            'addonly',\n            'Things that front office can read and enter but not modify'\n        );\n        // xl('Things that front office can read and enter but not modify')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($front),\n            null,\n            null,\n            1,\n            1,\n            'wsome',\n            'Things that front office can read and partly modify'\n        );\n        // xl('Things that front office can read and partly modify')\n        $gacl->add_acl(\n            array(\n                'patients' => array('appt', 'demo'),\n                'groups' => array('gcalendar')\n            ),\n            null,\n            array($front),\n            null,\n            null,\n            1,\n            1,\n            'write',\n            'Things that front office can read and modify'\n        );\n        // xl('Things that front office can read and modify')\n\n        // Set permissions for back office staff.\n        //\n        $gacl->add_acl(\n            array(\n                'patients' => array('alert')\n            ),\n            null,\n            array($back),\n            null,\n            null,\n            1,\n            1,\n            'view',\n            'Things that back office can only read'\n        );\n        // xl('Things that back office can only read')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($back),\n            null,\n            null,\n            1,\n            1,\n            'addonly',\n            'Things that back office can read and enter but not modify'\n        );\n        // xl('Things that back office can read and enter but not modify')\n        $gacl->add_acl(\n            array(\n                'placeholder' => array('filler')\n            ),\n            null,\n            array($back),\n            null,\n            null,\n            1,\n            1,\n            'wsome',\n            'Things that back office can read and partly modify'\n        );\n        // xl('Things that back office can read and partly modify')\n        $gacl->add_acl(\n            array(\n                'acct' => array('bill', 'disc', 'eob', 'rep', 'rep_a'),\n                'admin' => array('practice', 'superbill'),\n                'encounters' => array('auth_a', 'coding_a', 'date_a'),\n                'patients' => array('appt', 'demo')\n            ),\n            null,\n            array($back),\n            null,\n            null,\n            1,\n            1,\n            'write',\n            'Things that back office can read and modify'\n        );\n        // xl('Things that back office can read and modify')\n\n        // Set permissions for Emergency Login.\n        //\n        $gacl->add_acl(\n            array(\n                'acct' => array('bill', 'disc', 'eob', 'rep', 'rep_a'),\n                'admin' => array('calendar', 'database', 'forms', 'practice', 'superbill', 'users', 'batchcom', 'language', 'super', 'drugs', 'acl','multipledb','menu','manage_modules'),\n                'encounters' => array('auth_a', 'auth', 'coding_a', 'coding', 'notes_a', 'notes', 'date_a', 'relaxed'),\n                'inventory' => array('lots', 'sales', 'purchases', 'transfers', 'adjustments', 'consumption', 'destruction', 'reporting'),\n                'lists' => array('default','state','country','language','ethrace'),\n                'patients' => array('appt', 'demo', 'med', 'trans', 'docs', 'notes', 'sign', 'reminder', 'alert', 'disclosure', 'rx', 'amendment', 'lab', 'docs_rm','pat_rep'),\n                'sensitivities' => array('normal', 'high'),\n                'nationnotes' => array('nn_configure'),\n                'patientportal' => array('portal'),\n                'menus' => array('modle'),\n                'groups' => array('gadd','gcalendar','glog','gdlog','gm')\n            ),\n            null,\n            array($breakglass),\n            null,\n            null,\n            1,\n            1,\n            'write',\n            'Emergency Login user can do anything'\n        );\n        // xl('Emergency Login user can do anything')\n\n        return true;\n    }\n\n    public function quick_install()\n    {\n        // Validation of OpenEMR user settings\n        //   (applicable if not cloning from another database)\n        if (empty($this->clone_database)) {\n            if (! $this->login_is_valid()) {\n                return false;\n            }\n\n            if (! $this->iuser_is_valid()) {\n                return false;\n            }\n\n            if (! $this->user_password_is_valid()) {\n                return false;\n            }\n        }\n\n        // Validation of mysql database password\n        if (! $this->password_is_valid()) {\n            return false;\n        }\n\n        if (! $this->no_root_db_access) {\n            // Connect to mysql via root user\n            if (! $this->root_database_connection()) {\n                return false;\n            }\n\n            // Create the dumpfile\n            //   (applicable if cloning from another database)\n            if (! empty($this->clone_database)) {\n                if (! $this->create_dumpfiles()) {\n                    return false;\n                }\n            }\n\n            // Create the site directory\n            //   (applicable if mirroring another local site)\n            if (! empty($this->source_site_id)) {\n                if (! $this->create_site_directory()) {\n                    return false;\n                }\n            }\n\n            $this->disconnect();\n            // Using @ in below call to hide the php warning in cases where the\n            //  below connection does not work, which is expected behavior.\n            // Using try in below call to catch the mysqli exception when the\n            //  below connection does not work, which is expected behavior (needed to\n            //  add this try/catch clause for PHP 8.1).\n            try {\n                $checkUserDatabaseConnection = @$this->user_database_connection();\n            } catch (Exception $e) {\n                $checkUserDatabaseConnection = false;\n            }\n            if (! $checkUserDatabaseConnection) {\n                // Re-connect to mysql via root user\n                if (! $this->root_database_connection()) {\n                    return false;\n                }\n\n                // Create the mysql database\n                if (! $this->create_database()) {\n                    return false;\n                }\n\n                // Create the mysql user\n                if (! $this->create_database_user()) {\n                    return false;\n                }\n\n                // Grant user privileges to the mysql database\n                if (! $this->grant_privileges()) {\n                    return false;\n                }\n            }\n\n            $this->disconnect();\n        }\n\n        // Connect to mysql via created user\n        if (! $this->user_database_connection()) {\n            return false;\n        }\n\n        // Build the database\n        if (! $this->load_dumpfiles()) {\n            return false;\n        }\n\n        // Write the sql configuration file\n        if (! $this->write_configuration_file()) {\n            return false;\n        }\n\n        // Load the version information, globals settings,\n        // initial user, and set up gacl access controls.\n        //  (applicable if not cloning from another database)\n        if (empty($this->clone_database)) {\n            if (! $this->add_version_info()) {\n                return false;\n            }\n\n            if (! $this->insert_globals()) {\n                return false;\n            }\n\n            if (! $this->add_initial_user()) {\n                return false;\n            }\n\n            if (! $this->install_gacl()) {\n                return false;\n            }\n\n            if (! $this->install_additional_users()) {\n                return false;\n            }\n\n            if (! $this->on_care_coordination()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private function escapeSql($sql)\n    {\n        return mysqli_real_escape_string($this->dbh, $sql);\n    }\n\n    private function escapeDatabaseName($name)\n    {\n        if (preg_match('/[^A-Za-z0-9_-]/', $name)) {\n            error_log(\"Illegal character(s) in database name\");\n            die(\"Illegal character(s) in database name\");\n        }\n        return $name;\n    }\n\n    private function escapeCollateName($name)\n    {\n        if (preg_match('/[^A-Za-z0-9_-]/', $name)) {\n            error_log(\"Illegal character(s) in collation name\");\n            die(\"Illegal character(s) in collation name\");\n        }\n        return $name;\n    }\n\n    private function execute_sql($sql, $showError = true)\n    {\n        $this->error_message = '';\n        if (! $this->dbh) {\n            $this->user_database_connection();\n        }\n\n        $results = mysqli_query($this->dbh, $sql);\n        if ($results) {\n            return $results;\n        } else {\n            if ($showError) {\n                $error_mes = mysqli_error($this->dbh);\n                $this->error_message = \"unable to execute SQL: '$sql' due to: \" . $error_mes;\n                error_log(\"ERROR IN OPENEMR INSTALL: Unable to execute SQL: \" . htmlspecialchars($sql, ENT_QUOTES) . \" due to: \" . htmlspecialchars($error_mes, ENT_QUOTES));\n            }\n            return false;\n        }\n    }\n\n    private function connect_to_database($server, $user, $password, $port, $dbname = '')\n    {\n        $pathToCerts = __DIR__ . \"/../../sites/\" . $this->site . \"/documents/certificates/\";\n        $mysqlSsl = false;\n        $mysqli = mysqli_init();\n        if (defined('MYSQLI_CLIENT_SSL') && file_exists($pathToCerts . \"mysql-ca\")) {\n            $mysqlSsl = true;\n            if (\n                file_exists($pathToCerts . \"mysql-key\") &&\n                file_exists($pathToCerts . \"mysql-cert\")\n            ) {\n                // with client side certificate/key\n                mysqli_ssl_set(\n                    $mysqli,\n                    $pathToCerts . \"mysql-key\",\n                    $pathToCerts . \"mysql-cert\",\n                    $pathToCerts . \"mysql-ca\",\n                    null,\n                    null\n                );\n            } else {\n                // without client side certificate/key\n                mysqli_ssl_set(\n                    $mysqli,\n                    null,\n                    null,\n                    $pathToCerts . \"mysql-ca\",\n                    null,\n                    null\n                );\n            }\n        }\n        if ($mysqlSsl) {\n            $ok = mysqli_real_connect($mysqli, $server, $user, $password, $dbname, (int)$port != 0 ? (int)$port : 3306, '', MYSQLI_CLIENT_SSL);\n        } else {\n            $ok = mysqli_real_connect($mysqli, $server, $user, $password, $dbname, (int)$port != 0 ? (int)$port : 3306);\n        }\n        if (!$ok) {\n            $this->error_message = 'unable to connect to sql server because of: (' . mysqli_connect_errno() . ') ' . mysqli_connect_error();\n            return false;\n        }\n        return $mysqli;\n    }\n\n    private function set_sql_strict()\n    {\n        // Turn off STRICT SQL\n        return $this->execute_sql(\"SET sql_mode = ''\");\n    }\n\n    private function set_collation()\n    {\n        return $this->execute_sql(\"SET NAMES 'utf8mb4'\");\n    }\n\n  /**\n   * innitialize $this->dumpfiles, an array of the dumpfiles that will\n   * be loaded into the database, including the correct translation\n   * dumpfile.\n   * The keys are the paths of the dumpfiles, and the values are the titles\n   * @return array\n   */\n    private function initialize_dumpfile_list()\n    {\n        if ($this->clone_database) {\n            $this->dumpfiles = array( $this->get_backup_filename() => 'clone database' );\n        } else {\n            $dumpfiles = array( $this->main_sql => 'Main' );\n            if (! empty($this->development_translations)) {\n                // Use the online development translation set\n                $dumpfiles[ $this->devel_translation_sql ] = \"Online Development Language Translations (utf8)\";\n            } else {\n                // Use the local translation set\n                $dumpfiles[ $this->translation_sql ] = \"Language Translation (utf8)\";\n            }\n\n            if ($this->ippf_specific) {\n                $dumpfiles[ $this->ippf_sql ] = \"IPPF Layout\";\n            }\n\n            // Load ICD-9 codes if present.\n            if (file_exists($this->icd9)) {\n                $dumpfiles[ $this->icd9 ] = \"ICD-9\";\n            }\n\n            // Load CVX codes if present\n            if (file_exists($this->cvx)) {\n                $dumpfiles[ $this->cvx ] = \"CVX Immunization Codes\";\n            }\n\n            $this->dumpfiles = $dumpfiles;\n        }\n\n        return $this->dumpfiles;\n    }\n\n  /**\n   *\n   * Directory copy logic borrowed from a user comment at\n   * http://www.php.net/manual/en/function.copy.php\n   * @param string $src name of the directory to copy\n   * @param string $dst name of the destination to copy to\n   * @return bool indicating success\n   */\n    private function recurse_copy($src, $dst)\n    {\n        $dir = opendir($src);\n        if (! @mkdir($dst)) {\n            $this->error_message = \"unable to create directory: '$dst'\";\n            return false;\n        }\n\n        while (false !== ($file = readdir($dir))) {\n            if ($file != '.' && $file != '..') {\n                if (is_dir($src . '/' . $file)) {\n                    $this->recurse_copy($src . '/' . $file, $dst . '/' . $file);\n                } else {\n                    copy($src . '/' . $file, $dst . '/' . $file);\n                }\n            }\n        }\n\n        closedir($dir);\n        return true;\n    }\n\n  /**\n   *\n   * dump a site's database to a temporary file.\n   * @param string $source_site_id the site_id of the site to dump\n   * @return filename of the backup\n   */\n    private function dumpSourceDatabase()\n    {\n        global $OE_SITES_BASE;\n        $source_site_id = $this->source_site_id;\n\n        include(\"$OE_SITES_BASE/$source_site_id/sqlconf.php\");\n\n        if (empty($config)) {\n            die(\"Source site $source_site_id has not been set up!\");\n        }\n\n        $backup_file = $this->get_backup_filename();\n        $cmd = \"mysqldump -u \" . escapeshellarg($login) .\n        \" -h \" . $host .\n        \" -p\" . escapeshellarg($pass) .\n        \" --hex-blob --opt --skip-extended-insert --quote-names -r $backup_file \" .\n        escapeshellarg($dbase);\n\n        $tmp1 = [];\n        $tmp0 = exec($cmd, $tmp1, $tmp2);\n        if ($tmp2) {\n            die(\"Error $tmp2 running \\\"$cmd\\\": $tmp0 \" . implode(' ', $tmp1));\n        }\n\n        return $backup_file;\n    }\n\n  /**\n   * @return filename of the source backup database for cloning\n   */\n    private function get_backup_filename()\n    {\n        if (stristr(PHP_OS, 'WIN')) {\n            $backup_file = 'C:/windows/temp/setup_dump.sql';\n        } else {\n            $backup_file = '/tmp/setup_dump.sql';\n        }\n\n        return $backup_file;\n    }\n    //RP_ADDED\n    public function getCurrentTheme()\n    {\n        $current_theme =  $this->execute_sql(\"SELECT gl_value FROM globals WHERE gl_name LIKE '%css_header%'\");\n        $current_theme = mysqli_fetch_array($current_theme);\n        return $current_theme [0];\n    }\n\n    public function setCurrentTheme()\n    {\n        $this->getCurrentTheme();//why is this needed ?\n        return $this->execute_sql(\"UPDATE globals SET gl_value='\" . $this->escapeSql($this->new_theme) . \"' WHERE gl_name LIKE '%css_header%'\");\n    }\n\n    public function listThemes()\n    {\n        $themes_img_dir = \"public/images/stylesheets/\";\n        $arr_themes_img = array_values(array_filter(scandir($themes_img_dir), function ($item) {\n            return $item[0] !== '.';\n        }));\n        return $arr_themes_img;\n    }\n\n    private function extractFileName($theme_file_name = '')\n    {\n        $this->theme_file_name = $theme_file_name;\n        $under_score = strpos($theme_file_name, '_') + 1;\n        $dot = strpos($theme_file_name, '.');\n        $theme_value = substr($theme_file_name, $under_score, ($dot - $under_score));\n        $theme_title = ucwords(str_replace(\"_\", \" \", $theme_value));\n        return array('theme_value' => $theme_value, 'theme_title' => $theme_title);\n    }\n\n    public function displayThemesDivs()\n    {\n        $themes_number = count($this->listThemes());\n        for ($i = 0; $i < $themes_number; $i++) {\n            $id = $i + 1;\n            $arr_theme_name = $this->listThemes();\n            $theme_file_name = $arr_theme_name[$i];\n            $arr_extracted_file_name = $this->extractFileName($theme_file_name);\n            $theme_value = $arr_extracted_file_name['theme_value'];\n            $theme_title = $arr_extracted_file_name['theme_title'];\n            $img_path = \"public/images/stylesheets/\";\n            $theme_file_path = $img_path . $theme_file_name;\n            $div_start = \"                      <div class='row'>\";\n            $div_end = \"                      </div>\";\n            $img_div = \"                <div class='col-sm-2 checkboxgroup'>\n                                            <label for='my_radio_button_id\" . attr($id) . \"'><img height='160px' src='\" . attr($theme_file_path) . \"' width='100%'></label>\n                                            <p class='m-0'>\" . text($theme_title) . \"</p><input id='my_radio_button_id\" . attr($id) . \"' name='stylesheet' type='radio' value='\" . attr($theme_value) . \"'>\n                                        </div>\";\n            $theme_img_number = $i % 6; //to ensure that last file in array will always generate 5 and will end the row\n            switch ($theme_img_number) {\n                case 0: //start row\n                    echo $div_start . \"\\r\\n\";\n                    echo $img_div . \"\\r\\n\";\n                    break;\n\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                    echo $img_div . \"\\r\\n\";\n                    break;\n\n                case 5://end row\n                    echo $img_div . \"\\r\\n\";\n                    echo $div_end . \"\\r\\n\";\n                    echo \"<br />\" . \"\\r\\n\";\n                    break;\n\n                default:\n                    echo $div_start . \"\\r\\n\";\n                    echo \"<h5>Sorry no stylesheet images in directory</h5>\";\n                    echo $div_end . \"\\r\\n\";\n                    break;\n            }\n        }\n        return;\n    }\n\n    public function displaySelectedThemeDiv()\n    {\n        $theme_file_name = $this->getCurrentTheme();\n        $arr_extracted_file_name = $this->extractFileName($theme_file_name);\n        $theme_value = $arr_extracted_file_name['theme_value'];\n        $theme_title = $arr_extracted_file_name['theme_title'];\n        $img_path = \"public/images/stylesheets/\";\n        $theme_file_path = $img_path . \"style_\" . $theme_value . \".png\";\n\n        $display_selected_theme_div = <<<DSTD\n                        <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                                <h4>Current Theme:</h4>\n                                <div class=\"col-sm-4 offset-sm-4 checkboxgroup\">\n                                    <label for=\"nothing\"><img  id=\"current_theme\" src=\"{$theme_file_path}\" width=\"100%\"></label>\n                                    <p id=\"current_theme_title\"style=\"margin:0\">{$theme_title}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <br />\nDSTD;\n        echo $display_selected_theme_div . \"\\r\\n\";\n        return;\n    }\n\n    public function displayNewThemeDiv()\n    {\n        $theme_file_name = $this->new_theme;\n        $arr_extracted_file_name = $this->extractFileName($theme_file_name);\n        $theme_value = $arr_extracted_file_name['theme_value'];\n        $theme_title = $arr_extracted_file_name['theme_title'];\n        $img_path = \"public/images/stylesheets/\";\n        $theme_file_path = $img_path . \"style_\" . $theme_value . \".png\";\n\n        $display_selected_theme_div = <<<DSTD\n                        <div class=\"row\">\n                            <div class=\"col-sm-12\">\n                                <div class=\"col-sm-4 offset-sm-4 checkboxgroup\">\n                                    <label for=\"nothing\"><img  id=\"current_theme\" src=\"{$theme_file_path}\" width=\"75%\"></label>\n                                    <p id=\"current_theme_title\"style=\"margin:0\">{$theme_title}</p>\n                                </div>\n                            </div>\n                        </div>\n                        <br />\nDSTD;\n        echo $display_selected_theme_div . \"\\r\\n\";\n        return;\n    }\n\n    public function setupHelpModal()\n    {\n        $setup_help_modal = <<<SETHLP\n    <div class=\"row\">\n            <div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-dialog modal-lg\">\n                    <div class=\"modal-content  oe-modal-content\" style=\"height:700px\">\n                        <div class=\"modal-header clearfix\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=Close>\n                            <span aria-hidden=\"true\" style=\"color:var(--black); font-size:1.5em;\">\u00d7</span></button>\n                        </div>\n                        <div class=\"modal-body\" style=\"height:80%;\">\n                            <iframe src=\"\" id=\"targetiframe\" style=\"height:100%; width:100%; overflow-x: hidden; border:none\"\n                            allowtransparency=\"true\"></iframe>\n                        </div>\n                        <div class=\"modal-footer\" style=\"margin-top:0px;\">\n                           <button class=\"btn btn-link btn-cancel oe-pull-away\" data-dismiss=\"modal\" type=\"button\">Close</button>\n                           <!--<button class=\"btn btn-secondary btn-print oe-pull-away\" data-dismiss=\"modal\" id=\"print-help-href\" type=\"button\">Print</button>-->\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <script>\n            $(function () {\n                $('#help-href').click (function(){\n                    document.getElementById('targetiframe').src = \"Documentation/help_files/openemr_installation_help.php\";\n                })\n            });\n            $(function () {\n                $('#print-help-href').click (function(){\n                    $(\"#targetiframe\").get(0).contentWindow.print();\n                })\n            });\n            // Jquery draggable\n            $(\".modal-dialog\").addClass('drag-action');\n            $(\".modal-content\").addClass('resize-action');\n        </script>\nSETHLP;\n        echo $setup_help_modal  . \"\\r\\n\";\n        return;\n    }\n}\n", "<?php\n\n/**\n * AclExtended class.\n *\n *   Provides Acl functions that are above and beyond the standard acl checks.\n *\n *   Note that it stores a static GaclApi object to improve performance (this avoids doing\n *    separate database connection for every call to GaclApi)\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2020 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2021 Rod Roark <rod@sunsetsystems.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nnamespace OpenEMR\\Common\\Acl;\n\nuse OpenEMR\\Gacl\\GaclApi;\nuse OpenEMR\\Services\\UserService;\nuse OpenEMR\\Services\\VersionService;\nuse OpenEMR\\Common\\Acl\\AclMain;\n\nclass AclExtended\n{\n    // Holds the static GaclApi object\n    private static $gaclApiObject;\n\n    // Collect the stored GaclApi object (create it if it doesn't yet exist)\n    //  Sharing one object will prevent opening a database connection for every call to GaclApi.\n    private static function collectGaclApiObject()\n    {\n        if (!is_object(self::$gaclApiObject)) {\n            // GaclApi object does not yet exist, so create it\n            self::$gaclApiObject = new GaclApi();\n        }\n        return self::$gaclApiObject;\n    }\n\n    // Return an array keyed on squad ACO names.\n    // This is only applicable for sports team use.\n    //\n    public static function aclGetSquads()\n    {\n        $squads = self::aclGetSectionAcos('squads');\n        uasort($squads, \"self::aclSquadCompare\");\n        return $squads;\n    }\n\n    // Return an array keyed on encounter sensitivity level ACO names.\n    // Sensitivities are useful when some encounter notes are not\n    // medically sensitive (e.g. a physical fitness test), and/or if\n    // some will be \"for doctor's eyes only\" (e.g. STD treatment).\n    //\n    // When a non-blank sensitivity value exists in the new encounter\n    // form, it names an additional ACO required for access to all forms\n    // in the encounter.  If you want some encounters to be non-sensitive,\n    // then you also need some default nonblank sensitivity for normal\n    // encounters, as well as greater encounter notes permissions for\n    // those allowed to view non-sensitive encounters.\n    //\n    public static function aclGetSensitivities()\n    {\n        return self::aclGetSectionAcos('sensitivities');\n    }\n\n    // Get the ACO name/value pairs for a designated section.  Each value\n    // is an array (section_value, value, order_value, name, hidden).\n    //\n    private static function aclGetSectionAcos($section)\n    {\n        $gacl = self::collectGaclApiObject();\n        $arr1 = $gacl->get_objects($section, 1, 'ACO');\n        $arr = array();\n        if (!empty($arr1[$section])) {\n            foreach ($arr1[$section] as $value) {\n                $odata = $gacl->get_object_data($gacl->get_object_id($section, $value, 'ACO'), 'ACO');\n                $arr[$value] = $odata[0];\n            }\n        }\n        return $arr;\n    }\n\n    // Sort squads by their order value.  Used only by aclGetSquads().\n    private static function aclSquadCompare($a, $b)\n    {\n        if ($a[2] == $b[2]) {\n            // If order value is the same, sort by squad name.\n            if ($a[3] == $b[3]) {\n                return 0;\n            }\n            return ($a[3] < $b[3]) ? -1 : 1;\n        }\n        return ($a[2] < $b[2]) ? -1 : 1;\n    }\n\n    //\n    // Returns true if aco exist\n    // Returns false if aco doesn't exist\n    //    $section_name = name of section (string)\n    //    $aco_name = name of aco (string)\n    //\n    public static function acoExist($section_name, $aco_name)\n    {\n        $gacl = self::collectGaclApiObject();\n        $aco_id = $gacl->get_object_id($section_name, $aco_name, 'ACO');\n        if ($aco_id) {\n            return true;\n        }\n    }\n\n    //\n    // Returns a sorted array of all available Group Titles.\n    //\n    public static function aclGetGroupTitleList($include_superusers = true)\n    {\n        $gacl = self::collectGaclApiObject();\n        $parent_id = $gacl->get_root_group_id();\n        $arr_group_ids = $gacl->get_group_children($parent_id, 'ARO', 'RECURSE');\n        $arr_group_titles = array();\n        foreach ($arr_group_ids as $value) {\n            $arr_group_data = $gacl->get_group_data($value, 'ARO');\n            // add if $include_superusers is true or group not include admin|super rule.\n            if ($include_superusers || !self::isGroupIncludeSuperuser($arr_group_data[3])) {\n                $arr_group_titles[$value] = $arr_group_data[3];\n            }\n        }\n        sort($arr_group_titles);\n        return $arr_group_titles;\n    }\n\n    //\n    // Returns a sorted array of group Titles that a user belongs to.\n    // Returns 0 if does not belong to any group yet.\n    //   $user_name = Username, which is login name.\n    //\n    public static function aclGetGroupTitles($user_name)\n    {\n        $gacl = self::collectGaclApiObject();\n        $user_aro_id = $gacl->get_object_id('users', $user_name, 'ARO');\n        if ($user_aro_id) {\n            $arr_group_id = $gacl->get_object_groups($user_aro_id, 'ARO', 'NO_RECURSE');\n            if ($arr_group_id) {\n                foreach ($arr_group_id as $key => $value) {\n                    $arr_group_data = $gacl->get_group_data($value, 'ARO');\n                    $arr_group_titles[$key] = $arr_group_data[3];\n                }\n                sort($arr_group_titles);\n                return $arr_group_titles;\n            }\n        }\n    }\n\n    //\n    // This will place the user aro object into selected group(s)\n    // It uses the setUserAro() function\n    //   $username = username (string)\n    //   $group = title of group(s) (string or array)\n    //\n    public static function addUserAros($username, $group)\n    {\n        $current_user_groups = self::aclGetGroupTitles($username);\n        if (!$current_user_groups) {\n            $current_user_groups = array();\n        }\n        if (is_array($group)) {\n            foreach ($group as $value) {\n                if (!in_array($value, $current_user_groups)) {\n                    array_push($current_user_groups, $value);\n                }\n            }\n        } else {\n            if (!in_array($group, $current_user_groups)) {\n                array_push($current_user_groups, $group);\n            }\n        }\n        $user_data = sqlFetchArray(sqlStatement(\"SELECT * FROM users WHERE username = ?\", array($username)));\n        self::setUserAro(\n            $current_user_groups,\n            $username,\n            $user_data[\"fname\"],\n            $user_data[\"mname\"],\n            $user_data[\"lname\"]\n        );\n        return;\n    }\n\n    //\n    // This will remove the user aro object from the selected group(s)\n    // It uses the setUserAro() function\n    //   $username = username (string)\n    //   $group = title of group(s) (string or array)\n    //\n    public static function removeUserAros($username, $group)\n    {\n        $current_user_groups = self::aclGetGroupTitles($username);\n        $new_user_groups = array();\n        if (is_array($group)) {\n            foreach ($current_user_groups as $value) {\n                if (!in_array($value, $group)) {\n                    array_push($new_user_groups, $value);\n                }\n            }\n        } else {\n            foreach ($current_user_groups as $value) {\n                if ($value != $group) {\n                    array_push($new_user_groups, $value);\n                }\n            }\n        }\n        $user_data = sqlFetchArray(sqlStatement(\"SELECT * FROM users WHERE username = ?\", array($username)));\n        self::setUserAro(\n            $new_user_groups,\n            $username,\n            $user_data[\"fname\"],\n            $user_data[\"mname\"],\n            $user_data[\"lname\"]\n        );\n        return;\n    }\n\n    //\n    // This will either create or edit a user aro object, and then place it\n    // in the requested groups. It will not allow removal of the 'admin'\n    // user or gacl_protected users from the 'admin' group.\n    //   $arr_group_titles = titles of the groups that user will be added to.\n    //   $user_name = username, which is login name.\n    //   $first_name = first name\n    //   $middle_name = middle name\n    //   $last_name = last name\n    //\n    public static function setUserAro($arr_group_titles, $user_name, $first_name, $middle_name, $last_name)\n    {\n        $gacl = self::collectGaclApiObject();\n\n        //see if this user is gacl protected (ie. do not allow\n        //removal from the Administrators group)\n        require_once(dirname(__FILE__) . '/../../../library/user.inc');\n\n        $userNameToID = (new UserService())->getIdByUsername($user_name);\n\n        if (checkUserSetting(\"gacl_protect\", \"1\", $userNameToID) || $user_name == \"admin\") {\n            $gacl_protect = true;\n        } else {\n            $gacl_protect = false;\n        }\n\n        //get array of all available group ID numbers\n        $parent_id = $gacl->get_root_group_id();\n        $arr_all_group_ids = $gacl->get_group_children($parent_id, 'ARO', 'RECURSE');\n\n        //Cycle through ID array to find and process each selected group\n        //Create a counter since processing of first hit is unique\n        $counter = 0;\n        foreach ($arr_all_group_ids as $value) {\n            $arr_group_data = $gacl->get_group_data($value, 'ARO');\n            if (\n                (empty($arr_group_titles)) ||\n                (in_array($arr_group_data[3], $arr_group_titles))\n            ) {\n                //We have a hit, so need to add group and increment counter\n                // because processing of first hit is unique\n                //This will also deal with an empty $arr_group_titles array\n                // removing user from all groups unless 'admin'\n                $counter = $counter + 1;\n                //create user full name field\n                if ($middle_name) {\n                    $full_name = $first_name . \" \" . $middle_name . \" \" . $last_name;\n                } else {\n                    if ($last_name) {\n                        $full_name = $first_name . \" \" . $last_name;\n                    } else {\n                        $full_name = $first_name;\n                    }\n                }\n\n                //If this is not the first group to be added, then will skip below\n                // and will be added. If this is the first group, then need to\n                // go thru several steps before adding the group.\n                if ($counter == 1) {\n                    //get ID of user ARO object, if it exist\n                    $user_aro_id = $gacl->get_object_id('users', $user_name, 'ARO');\n                    if ($user_aro_id) {\n                        //user ARO object already exist, so will edit it\n                        $gacl->edit_object($user_aro_id, 'users', $full_name, $user_name, 10, 0, 'ARO');\n\n                        //remove all current user ARO object group associations\n                        $arr_remove_group_ids = $gacl->get_object_groups($user_aro_id, 'ARO', 'NO_RECURSE');\n                        foreach ($arr_remove_group_ids as $value2) {\n                            $gacl->del_group_object($value2, 'users', $user_name, 'ARO');\n                        }\n                    } else {\n                        //user ARO object does not exist, so will create it\n                        $gacl->add_object('users', $full_name, $user_name, 10, 0, 'ARO');\n                    }\n                }\n\n                //place the user ARO object in the selected group (if group(s) is selected)\n                if (!empty($arr_group_titles)) {\n                    $gacl->add_group_object($value, 'users', $user_name, 'ARO');\n                }\n\n                //\n                //Below will not allow 'admin' or gacl_protected user to be removed from 'admin' group\n                //\n                if ($gacl_protect) {\n                    $boolean_admin = 0;\n                    $admin_id = $gacl->get_object_id('users', $user_name, 'ARO');\n                    $arr_admin = $gacl->get_object_groups($admin_id, 'ARO', 'NO_RECURSE');\n                    if (!empty($arr_admin)) {\n                        foreach ($arr_admin as $value3) {\n                            $arr_admin_data = $gacl->get_group_data($value3, 'ARO');\n                            if (strcmp($arr_admin_data[2], 'admin') == 0) {\n                                $boolean_admin = 1;\n                            }\n                        }\n                        if (!$boolean_admin) {\n                            foreach ($arr_all_group_ids as $value4) {\n                                $arr_temp = $gacl->get_group_data($value4, 'ARO');\n                                if ($arr_temp[2] == 'admin') {\n                                    $gacl->add_group_object($value4, 'users', $user_name, 'ARO');\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            //if array of groups was empty, then we are done, and can break from loop\n            if (empty($arr_group_titles)) {\n                break;\n            }\n        }\n        return true;\n    }\n\n    //\n    // Returns true if acl exist\n    // Returns false if acl doesn't exist\n    //  EITHER $title or $name is required(send FALSE in variable\n    //  not being used). If both are sent, then only $title will be\n    //  used.\n    //  $return_value is required\n    //    $title = title of acl (string)\n    //    $name = name of acl (string)\n    //    $return_value = return value of acl (string)\n    //\n    public static function aclExist($title, $name, $return_value)\n    {\n        $gacl = self::collectGaclApiObject();\n        if (!$name) {\n            $acl = $gacl->search_acl(false, false, false, false, $title, false, false, false, $return_value);\n        } else {\n            if (!$title) {\n                $group_id = $gacl->get_group_id($name, null, 'ARO');\n                if ($group_id) {\n                    $group_data = $gacl->get_group_data($group_id, 'ARO');\n                    $acl = $gacl->search_acl(false, false, false, false, $group_data[3], false, false, false, $return_value);\n                } else {\n                    return false;\n                }\n            } else {\n                $acl = $gacl->search_acl(false, false, false, false, $title, false, false, false, $return_value);\n            }\n        }\n        if (!empty($acl)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    //\n    // This will add a new acl and group(if group doesn't yet exist)\n    // with one aco in it.\n    //   $acl_title = title of acl (string)\n    //   $acl_name = name of acl (string)\n    //   $return_value = return value of acl (string)\n    //   $note = description of acl (array)\n    //\n    public static function aclAdd($acl_title, $acl_name, $return_value, $note)\n    {\n        $gacl = self::collectGaclApiObject();\n        $group_id = $gacl->get_group_id($acl_name, $acl_title, 'ARO');\n        if ($group_id) {\n            //group already exist, so just create acl\n            $gacl->add_acl(\n                array(\"placeholder\" => array(\"filler\")),\n                null,\n                array($group_id),\n                null,\n                null,\n                1,\n                1,\n                $return_value,\n                $note\n            );\n        } else {\n            //create group, then create acl\n            $parent_id = $gacl->get_root_group_id();\n            $aro_id = $gacl->add_group($acl_name, $acl_title, $parent_id, 'ARO');\n            $gacl->add_acl(\n                array(\"placeholder\" => array(\"filler\")),\n                null,\n                array($aro_id),\n                null,\n                null,\n                1,\n                1,\n                $return_value,\n                $note\n            );\n        }\n        return;\n    }\n\n    //\n    // This will remove acl. It will also remove group(if the group\n    // is no longer associated with any acl's).\n    //   $acl_title = title of acl (string)\n    //   $acl_name = name of acl (string)\n    //   $return_value = return value of acl (string)\n    //   $note = description of acl (array)\n    //\n    public static function aclRemove($acl_title, $return_value)\n    {\n        $gacl = self::collectGaclApiObject();\n        //First, delete the acl\n        $acl_id = $gacl->search_acl(false, false, false, false, $acl_title, false, false, false, $return_value);\n        $gacl->del_acl($acl_id[0]);\n        //Then, remove the group(if no more acl's are remaining)\n        $acl_search = $gacl->search_acl(false, false, false, false, $acl_title, false, false, false, false);\n        if (empty($acl_search)) {\n            $group_id = $gacl->get_group_id(null, $acl_title, 'ARO');\n            $gacl->del_group($group_id, true, 'ARO');\n        }\n        return;\n    }\n\n    //\n    // This will place the aco(s) into the selected acl\n    //   $acl_title = title of acl (string)\n    //   $return_value = return value of acl (string)\n    //   $aco_id = id of aco (array)\n    //\n    public static function aclAddAcos($acl_title, $return_value, $aco_id)\n    {\n        $gacl = self::collectGaclApiObject();\n        $acl_id = $gacl->search_acl(false, false, false, false, $acl_title, false, false, false, $return_value);\n        foreach ($aco_id as $value) {\n            $aco_data = $gacl->get_object_data($value, 'ACO');\n            $aco_section = $aco_data[0][0];\n            $aco_name = $aco_data[0][1];\n            $gacl->append_acl($acl_id[0], null, null, null, null, array($aco_section => array($aco_name)));\n        }\n        return;\n    }\n\n    //\n    // This will remove the aco(s) from the selected acl\n    //  Note if all aco's are removed, then will place the filler-placeholder\n    //  into the acl to avoid complete removal of the acl.\n    //   $acl_title = title of acl (string)\n    //   $return_value = return value of acl (string)\n    //   $aco_id = id of aco (array)\n    //\n    public static function aclRemoveAcos($acl_title, $return_value, $aco_id)\n    {\n        $gacl = self::collectGaclApiObject();\n        $acl_id = $gacl->search_acl(false, false, false, false, $acl_title, false, false, false, $return_value);\n\n        // Check to see if removing all acos. If removing all acos then will\n        //  ensure the filler-placeholder aco in acl to avoid complete\n        //  removal of the acl.\n        if (count($aco_id) == self::aclCountAcos($acl_title, $return_value)) {\n            //1-get the filler-placeholder aco id\n            $filler_aco_id = $gacl->get_object_id('placeholder', 'filler', 'ACO');\n            //2-add filler-placeholder aco\n            self::aclAddAcos($acl_title, $return_value, array($filler_aco_id));\n            //3-ensure filler-placeholder aco is not to be deleted\n            $safeListaco = self::removeElement($_POST[\"selection\"], $filler_aco_id);\n            //4-prepare to safely delete the acos\n            $aco_id = $safeListaco;\n        }\n\n        foreach ($aco_id as $value) {\n            $aco_data = $gacl->get_object_data($value, 'ACO');\n            $aco_section = $aco_data[0][0];\n            $aco_name = $aco_data[0][1];\n            $gacl->shift_acl($acl_id[0], null, null, null, null, array($aco_section => array($aco_name)));\n        }\n        return;\n    }\n\n    //\n    // This will return the number of aco objects\n    //  in a specified acl.\n    //   $acl_title = title of acl (string)\n    //   $return_value = return value of acl (string)\n    //\n    private static function aclCountAcos($acl_title, $return_value)\n    {\n        $gacl = self::collectGaclApiObject();\n        $acl_id = $gacl->search_acl(false, false, false, false, $acl_title, false, false, false, $return_value);\n        $acl_data = $gacl->get_acl($acl_id[0]);\n        $aco_count = 0;\n        foreach ($acl_data['aco'] as $key => $value) {\n            $aco_count = $aco_count + count($acl_data['aco'][$key]);\n        }\n        return $aco_count;\n    }\n\n    //\n    // Function to remove an element from an array\n    //\n    private static function removeElement($arr, $val)\n    {\n        $arr2 = array();\n        foreach ($arr as $value) {\n            if ($value != $val) {\n                array_push($arr2, $value);\n            }\n        }\n        return $arr2;\n    }\n\n    // This generates an HTML options list for all ACOs.\n    // The caller inserts this between <select> and </select> tags.\n    //\n    public static function genAcoHtmlOptions($default = '')\n    {\n        $acoArray = self::genAcoArray();\n        $s = '';\n        foreach ($acoArray as $section => $acos_array) {\n            $s .= \"<optgroup label='\" . xla($section) . \"'>\\n\";\n            foreach ($acos_array as $aco_array) {\n                $s .= \"<option value='\" . attr($aco_array['value']) . \"'\";\n                if ($aco_array['value'] == $default) {\n                    $s .= ' selected';\n                }\n                $s .= \">\" . xlt($aco_array['name']) . \"</option>\";\n            }\n            $s .= \"</optgroup>\";\n        }\n        return $s;\n    }\n\n\n    // Returns array of all ACOs\n    public static function genAcoArray()\n    {\n        $acoArray = array();\n        $gacl = self::collectGaclApiObject();\n        // collect and sort all aco objects\n        $list_aco_objects = $gacl->get_objects(null, 0, 'ACO');\n        ksort($list_aco_objects);\n        foreach ($list_aco_objects as $seckey => $dummy) {\n            if (empty($dummy)) {\n                continue;\n            }\n            asort($list_aco_objects[$seckey]);\n            $aco_section_data = $gacl->get_section_data($seckey, 'ACO');\n            $aco_section_title = $aco_section_data[3];\n            foreach ($list_aco_objects[$seckey] as $acokey) {\n                $aco_id = $gacl->get_object_id($seckey, $acokey, 'ACO');\n                $aco_data = $gacl->get_object_data($aco_id, 'ACO');\n                $aco_title = $aco_data[0][3];\n                $optkey = \"$seckey|$acokey\";\n                $acoArray[$aco_section_title][$aco_id]['name'] = $aco_title;\n                $acoArray[$aco_section_title][$aco_id]['value'] = $optkey;\n            }\n        }\n        return $acoArray;\n    }\n\n    // check if aro group have superuser rule\n    public static function isGroupIncludeSuperuser($aro_group_name)\n    {\n        $gacl = self::collectGaclApiObject();\n        return empty($gacl->search_acl('admin', 'super', false, false, $aro_group_name)) ? false : true;\n    }\n\n    //\n    // Returns acl listings(including return value) via xml message.\n    //   $err = error strings (array)\n    //\n    public static function aclListingsXml($err)\n    {\n        $gacl = self::collectGaclApiObject();\n\n        $message = \"<?xml version=\\\"1.0\\\"?>\\n\" .\n            \"<response>\\n\";\n        foreach (self::aclGetGroupTitleList() as $value) {\n            $acl_id = $gacl->search_acl(false, false, false, false, $value, false, false, false, false);\n            foreach ($acl_id as $value2) {\n                $acl = $gacl->get_acl($value2);\n                $ret = $acl[\"return_value\"];\n                $note = $acl[\"note\"];\n\n                // Modified 6-2009 by BM - Translate gacl group name if applicable\n                //                         Translate return value\n                //                         Translate description\n                $message .= \"\\t<acl>\\n\" .\n                    \"\\t\\t<value>\" . $value . \"</value>\\n\" .\n                    \"\\t\\t<title>\" . xl_gacl_group($value) . \"</title>\\n\" .\n                    \"\\t\\t<returnid>\" . $ret  . \"</returnid>\\n\" .\n                    \"\\t\\t<returntitle>\" . xl($ret)  . \"</returntitle>\\n\" .\n                    \"\\t\\t<note>\" . xl($note)  . \"</note>\\n\" .\n                    \"\\t</acl>\\n\";\n            }\n        }\n\n        if (isset($err)) {\n            foreach ($err as $value) {\n                $message .= \"\\t<error>\" . $value . \"</error>\\n\";\n            }\n        }\n\n        $message .= \"</response>\\n\";\n        return $message;\n    }\n\n    //\n    // Return aco listings by sections(active and inactive lists)\n    // via xml message.\n    //   $group = group title (string)\n    //   $return_value = return value (string)\n    //   $err = error strings (array)\n    //\n    public static function acoListingsXml($group, $return_value, $err)\n    {\n        $gacl = self::collectGaclApiObject();\n\n        //collect and sort all aco objects\n        $list_aco_objects = $gacl->get_objects(null, 0, 'ACO');\n        foreach ($list_aco_objects as $key => $value) {\n            asort($list_aco_objects[$key]);\n        }\n\n        //collect aco objects within the specified acl(already sorted)\n        $acl_id = $gacl->search_acl(false, false, false, false, $group, false, false, false, $return_value);\n        $acl = $gacl->get_acl($acl_id[0]);\n        $active_aco_objects = $acl[\"aco\"];\n\n        $message = \"<?xml version=\\\"1.0\\\"?>\\n\" .\n            \"<response>\\n\" .\n            \"\\t<inactive>\\n\";\n        foreach ($list_aco_objects as $key => $value) {\n            $counter = 0;\n            foreach ($list_aco_objects[$key] as $value2) {\n                if (!array_key_exists($key, $active_aco_objects) || !in_array($value2, $active_aco_objects[$key])) {\n                    if ($counter == 0) {\n                        $counter = $counter + 1;\n                        $aco_section_data = $gacl->get_section_data($key, 'ACO');\n                        $aco_section_title = $aco_section_data[3];\n\n                        // Modified 6-2009 by BM - Translate gacl aco section name\n                        $message .= \"\\t\\t<section>\\n\" .\n                            \"\\t\\t\\t<name>\" . xl($aco_section_title) . \"</name>\\n\";\n                    }\n\n                    $aco_id = $gacl->get_object_id($key, $value2, 'ACO');\n                    $aco_data = $gacl->get_object_data($aco_id, 'ACO');\n                    $aco_title = $aco_data[0][3];\n                    $message .= \"\\t\\t\\t<aco>\\n\";\n\n                    // Modified 6-2009 by BM - Translate gacl aco name\n                    $message .= \"\\t\\t\\t\\t<title>\" . xl($aco_title) . \"</title>\\n\";\n\n                    $message .= \"\\t\\t\\t\\t<id>\" . $aco_id . \"</id>\\n\";\n                    $message .= \"\\t\\t\\t</aco>\\n\";\n                }\n            }\n\n            if ($counter != 0) {\n                $message .= \"\\t\\t</section>\\n\";\n            }\n        }\n\n        $message .= \"\\t</inactive>\\n\" .\n            \"\\t<active>\\n\";\n        foreach ($active_aco_objects as $key => $value) {\n            $aco_section_data = $gacl->get_section_data($key, 'ACO');\n            $aco_section_title = $aco_section_data[3];\n\n            // Modified 6-2009 by BM - Translate gacl aco section name\n            $message .= \"\\t\\t<section>\\n\" .\n                \"\\t\\t\\t<name>\" . xl($aco_section_title) . \"</name>\\n\";\n\n            foreach ($active_aco_objects[$key] as $value2) {\n                $aco_id = $gacl->get_object_id($key, $value2, 'ACO');\n                $aco_data = $gacl->get_object_data($aco_id, 'ACO');\n                $aco_title = $aco_data[0][3];\n                $message .= \"\\t\\t\\t<aco>\\n\";\n\n                // Modified 6-2009 by BM - Translate gacl aco name\n                $message .= \"\\t\\t\\t\\t<title>\" . xl($aco_title) . \"</title>\\n\";\n\n                $message .= \"\\t\\t\\t\\t<id>\" . $aco_id . \"</id>\\n\";\n                $message .= \"\\t\\t\\t</aco>\\n\";\n            }\n\n            $message .= \"\\t\\t</section>\\n\";\n        }\n\n        $message .= \"\\t</active>\\n\";\n        if (isset($err)) {\n            foreach ($err as $value) {\n                $message .= \"\\t<error>\" . $value . \"</error>\\n\";\n            }\n        }\n\n        $message .= \"</response>\\n\";\n        return $message;\n    }\n\n    //\n    // Returns listing of all possible return values via xml message.\n    //   $err = error strings (array)\n    //\n    public static function returnValuesXml($err)\n    {\n        $gacl = self::collectGaclApiObject();\n        $returns = array();\n\n        $message = \"<?xml version=\\\"1.0\\\"?>\\n\" .\n            \"<response>\\n\";\n        foreach (self::aclGetGroupTitleList() as $value) {\n            $acl_id = $gacl->search_acl(false, false, false, false, $value, false, false, false, false);\n            foreach ($acl_id as $value2) {\n                $acl = $gacl->get_acl($value2);\n                $ret = $acl[\"return_value\"];\n                if (!in_array($ret, $returns)) {\n                    // Modified 6-2009 by BM - Translate return value\n                    $message .= \"\\t<return>\\n\";\n                    $message .= \"\\t\\t<returnid>\" . $ret  . \"</returnid>\\n\";\n                    $message .= \"\\t\\t<returntitle>\" . xl($ret)  . \"</returntitle>\\n\";\n                    $message .= \"\\t</return>\\n\";\n\n                    array_push($returns, $ret);\n                }\n            }\n        }\n\n        if (isset($err)) {\n            foreach ($err as $value) {\n                $message .= \"\\t<error>\" . $value . \"</error>\\n\";\n            }\n        }\n\n        $message .= \"</response>\\n\";\n        return $message;\n    }\n\n    /**\n     * Returns the current access control version.\n     *\n     * @return  integer  The current access control version.\n     */\n    public static function getAclVersion()\n    {\n        $versionService = new VersionService();\n        $version = $versionService->fetch();\n        return $version['v_acl'];\n    }\n\n    /**\n     * Records the access control version.\n     *\n     * @param  integer  $acl_version  access control version\n     */\n    public static function setAclVersion($acl_version)\n    {\n        $versionService = new VersionService();\n        $version = $versionService->fetch();\n        $version['v_acl'] = $acl_version;\n        $versionService->update($version);\n        return;\n    }\n\n    /**\n     * Function will return an array that contains the ACL ID number. It will also check to ensure\n     * the ACL exist and is not duplicated.\n     *\n     * @param  string  $title         Title of group.\n     * @param  string  $return_value  What the acl returns), usually 'write' or 'addonly'\n     * @return array                  An array that contains the ACL ID number.\n     */\n    public static function getAclIdNumber($title, $return_value)\n    {\n        $gacl = self::collectGaclApiObject();\n        $temp_acl_id_array  = $gacl->search_acl(false, false, false, false, $title, false, false, false, $return_value);\n        switch (count($temp_acl_id_array)) {\n            case 0:\n                echo \"<B>ERROR</B>, '$title' group '$return_value' ACL does not exist.</BR>\";\n                break;\n            case 1:\n                echo \"'$title' group '$return_value' ACL is present.</BR>\";\n                break;\n            default:\n                echo \"<B>ERROR</B>, Multiple '$title' group '$return_value' ACLs are present.</BR>\";\n                break;\n        }\n\n        return $temp_acl_id_array;\n    }\n\n    /**\n     * Function will add an ACL (if doesn't already exist).\n     * It will also place the acl in the group, or will CREATE a new group.\n     * It will return the ID number of the acl (created or old)\n     *\n     * @param   string  $title         Title of group.\n     * @param   string  $name          name of acl\n     * @param   string  $return_value  What the acl returns, usually 'write' or 'addonly'\n     * @param   string  $note          description of acl\n     * @return  array                  ID number of the acl (created or old)\n     */\n    public static function addNewACL($title, $name, $return_value, $note)\n    {\n        $gacl = self::collectGaclApiObject();\n        $temp_acl_id_array  = $gacl->search_acl(false, false, false, false, $title, false, false, false, $return_value);\n        switch (count($temp_acl_id_array)) {\n            case 0:\n                $group_id = $gacl->get_group_id($name, $title, 'ARO');\n                if ($group_id) {\n                    //group already exist, so just create acl\n                    $temp_acl_id = $gacl->add_acl(array(\"placeholder\" => array(\"filler\")), null, array($group_id), null, null, 1, 1, $return_value, $note);\n                    if ($temp_acl_id) {\n                        echo \"The '$title' group already exist.</BR>\";\n                        echo \"The '$title' group '$return_value' ACL has been successfully added.</BR>\";\n                        $temp_acl_id_array = array($temp_acl_id);\n                    } else {\n                        echo \"The '$title' group already exist.</BR>\";\n                        echo \"<B>ERROR</B>, Unable to create the '$title' group '$return_value' ACL.</BR>\";\n                    }\n                } else {\n                    //create group, then create acl\n                    $parent_id = $gacl->get_root_group_id();\n                    $aro_id = $gacl->add_group($name, $title, $parent_id, 'ARO');\n                    $temp_acl_id = $gacl->add_acl(array(\"placeholder\" => array(\"filler\")), null, array($aro_id), null, null, 1, 1, $return_value, $note);\n                    if ($aro_id) {\n                        echo \"The '$title' group has been successfully added.</BR>\";\n                    } else {\n                        echo \"<B>ERROR</B>, Unable to create the '$title' group.</BR>\";\n                    }\n\n                    if ($temp_acl_id) {\n                        echo \"The '$title' group '$return_value' ACL has been successfully added.</BR>\";\n                        $temp_acl_id_array = array($temp_acl_id);\n                    } else {\n                        echo \"<B>ERROR</B>, Unable to create the '$title' group '$return_value' ACL.</BR>\";\n                    }\n                }\n                break;\n            case 1:\n                echo \"'$title' group '$return_value' ACL already exist.</BR>\";\n                break;\n\n            default:\n                echo \"<B>ERROR</B>, Multiple '$title' group '$return_value' ACLs are present.</BR>\";\n                break;\n        }\n\n        return $temp_acl_id_array;\n    }\n\n    /**\n     * Function to add an object section.\n     * It will check to ensure the object section doesn't already exist.\n     *\n     * @param  string  $name   identifier of section\n     * @param  string  $title  Title o object.\n     */\n    public static function addObjectSectionAcl($name, $title)\n    {\n        $gacl = self::collectGaclApiObject();\n        if ($gacl->get_object_section_section_id($title, $name, 'ACO')) {\n            echo \"The '$title' object section already exist.</BR>\";\n        } else {\n            $tmp_boolean = $gacl->add_object_section($title, $name, 10, 0, 'ACO');\n            if ($tmp_boolean) {\n                echo \"The '$title' object section has been successfully added.</BR>\";\n            } else {\n                echo \"<B>ERROR</B>,unable to create the '$title' object section.</BR>\";\n            }\n        }\n\n        return;\n    }\n\n\n    /**\n     * Function to add an object.\n     * It will check to ensure the object doesn't already exist.\n     *\n     * @param  string  $section_name   Identifier of section\n     * @param  string  $section_title  Title of section\n     * @param  string  $object_name    Identifier of object\n     * @param  string  $object_title   Title of object\n     */\n    public static function addObjectAcl($section_name, $section_title, $object_name, $object_title)\n    {\n        $gacl = self::collectGaclApiObject();\n        if ($gacl->get_object_id($section_name, $object_name, 'ACO')) {\n            echo \"The '$object_title' object in the '$section_title' section already exist.</BR>\";\n        } else {\n            $tmp_boolean = $gacl->add_object($section_name, $object_title, $object_name, 10, 0, 'ACO');\n            if ($tmp_boolean) {\n                echo \"The '$object_title' object in the '$section_title' section has been successfully added.</BR>\";\n            } else {\n                echo \"<B>ERROR</B>,unable to create the '$object_title' object in the '$section_title' section.</BR>\";\n            }\n        }\n\n        return;\n    }\n\n    /**\n     * Function to add an object and set the 'order' variable.\n     * It will check to ensure the object doesn't already exist.\n     *\n     * @param  string  $section_name   Identifier of section\n     * @param  string  $section_title  Title of section\n     * @param  string  $object_name    Identifier of object\n     * @param  string  $object_title   Title of object\n     * @param  string  $order_number   number to determine order in list. used in sensitivities to order the choices in openemr\n     */\n    public static function addObjectAclWithOrder($section_name, $section_title, $object_name, $object_title, $order_number)\n    {\n        $gacl = self::collectGaclApiObject();\n        if ($gacl->get_object_id($section_name, $object_name, 'ACO')) {\n            echo \"The '$object_title' object in the '$section_title' section already exist.</BR>\";\n        } else {\n            $tmp_boolean = $gacl->add_object($section_name, $object_title, $object_name, $order_number, 0, 'ACO');\n            if ($tmp_boolean) {\n                echo \"The '$object_title' object in the '$section_title' section has been successfully added.</BR>\";\n            } else {\n                echo \"<B>ERROR</B>,unable to create the '$object_title' object in the '$section_title' section.</BR>\";\n            }\n        }\n\n        return;\n    }\n\n    /**\n     * Function to edit an object and set the 'order' variable.\n     * It will check to ensure the object doesn't already exist, and hasn't been upgraded yet.\n     *\n     * @param  string  $section_name   Identifier of section\n     * @param  string  $section_title  Title of section\n     * @param  string  $object_name    Identifier of object\n     * @param  string  $object_title   Title of object\n     * @param  string  $order_number   number to determine order in list. used in sensitivities to order the choices in openemr\n     */\n    public static function editObjectAcl($section_name, $section_title, $object_name, $object_title, $order_number)\n    {\n        $gacl = self::collectGaclApiObject();\n        $tmp_objectID = $gacl->get_object_id($section_name, $object_name, 'ACO');\n        if ($tmp_objectID) {\n            $tmp_object = $gacl->get_object_data($tmp_objectID, 'ACO');\n            if (\n                $tmp_object[0][2] ==  $order_number &&\n                $tmp_object[0][0] ==  $section_name &&\n                $tmp_object[0][1] ==  $object_name &&\n                $tmp_object[0][3] ==  $object_title\n            ) {\n                echo \"The '$object_title' object in the '$section_title' section has already been updated.</BR>\";\n            } else {\n                $tmp_boolean = $gacl->edit_object($tmp_objectID, $section_name, $object_title, $object_name, $order_number, 0, 'ACO');\n                if ($tmp_boolean) {\n                    echo \"The '$object_title' object in the '$section_title' section has been successfully updated.</BR>\";\n                } else {\n                    echo \"<B>ERROR</B>,unable to update the '$object_title' object in the '$section_title' section.</BR>\";\n                }\n            }\n        } else {\n            echo \"<B>ERROR</B>, the '$object_title' object in the '$section_title' section does not exist.</BR>\";\n        }\n\n        return;\n    }\n\n    /**\n     * Update the ACL.\n     * It will check to ensure the ACL hasn't already been updated.\n     *\n     * @param  array   $array_acl_id_number   Array containing hopefully one element, which is an integer, and is identifier of acl to be updated.\n     * @param  string  $group_title           Title of group.\n     * @param  string  $object_section_name   Identifier of section\n     * @param  string  $object_section_title  Title of section\n     * @param  string  $object_name           Identifier of object\n     * @param  string  $object_title          Title of object\n     * @param  string  $acl_return_value      What the acl returns (string), usually 'write', 'addonly', 'wsome' or 'view'\n     */\n    public static function updateAcl($array_acl_id_number, $group_title, $section_name, $section_title, $object_name, $object_title, $return_value)\n    {\n        $gacl = self::collectGaclApiObject();\n        $tmp_array = $gacl->search_acl($section_name, $object_name, false, false, $group_title, false, false, false, $return_value);\n        switch (count($tmp_array)) {\n            case 0:\n                $tmp_boolean = @$gacl->append_acl($array_acl_id_number[0], null, null, null, null, array($section_name => array($object_name)));\n                if ($tmp_boolean) {\n                    echo \"Successfully placed the '$object_title' object of the '$section_title' section into the '$group_title' group '$return_value' ACL.</BR>\";\n                } else {\n                    echo \"<B>ERROR</B>,unable to place the '$object_title' object of the '$section_title' section into the '$group_title' group '$return_value' ACL.</BR>\";\n                }\n                break;\n            case 1:\n                echo \"The '$object_title' object of the '$section_title' section is already found in the '$group_title' group '$return_value' ACL.</BR>\";\n                break;\n            default:\n                echo \"<B>ERROR</B>, Multiple '$group_title' group '$return_value' ACLs with the '$object_title' object of the '$section_title' section are present.</BR>\";\n                break;\n        }\n\n        return;\n    }\n\n\n    /**\n     * Shift the ACL, opposite of updateAcl()\n     * Tries to remove the object from a specific ACL if only one is found.\n     *\n     * @param  array   $array_acl_id_number   Array containing hopefully one element, which is an integer, and is identifier of acl to be updated.\n     * @param  string  $group_title           Title of group.\n     * @param  string  $object_section_name   Identifier of section\n     * @param  string  $object_section_title  Title of section\n     * @param  string  $object_name           Identifier of object\n     * @param  string  $object_title          Title of object\n     * @param  string  $acl_return_value      What the acl returns (string), usually 'write', 'addonly', 'wsome' or 'view'\n     */\n    public static function shiftAcl($array_acl_id_number, $group_title, $section_name, $section_title, $object_name, $object_title, $return_value)\n    {\n        $gacl = self::collectGaclApiObject();\n        $tmp_array = $gacl->search_acl($section_name, $object_name, false, false, $group_title, false, false, false, $return_value);\n        switch (count($tmp_array)) {\n            case 0:\n                echo \"The '$object_title' object of the '$section_title' section is not found in the '$group_title' group '$return_value' ACL.</BR>\";\n                break;\n            case 1:\n                $tmp_boolean = @$gacl->shift_acl($array_acl_id_number[0], null, null, null, null, array($section_name => array($object_name)));\n                if ($tmp_boolean) {\n                    echo \"Successfully removed the '$object_title' object of the '$section_title' section into the '$group_title' group '$return_value' ACL.</BR>\";\n                } else {\n                    echo \"<B>ERROR</B>,unable to remove the '$object_title' object of the '$section_title' section into the '$group_title' group '$return_value' ACL.</BR>\";\n                }\n                break;\n            default:\n                echo \"<B>ERROR</B>, Multiple '$group_title' group '$return_value' ACLs with the '$object_title' object of the '$section_title' section are present.</BR>\";\n                break;\n        }\n\n        return;\n    }\n\n    /**\n     * Update the provided array of ACOs that the designated group has permission for.\n     * This is an array keyed on ACO section ID with values that are arrays keyed on ACO ID\n     * with values that are arrays keyed on return value.\n     *\n     * @param  string  $group_name            Name of group\n     * @param  array   $perms                 The array to update\n     */\n    public static function getGroupPermissions($group_name, &$perms)\n    {\n        $gacl = self::collectGaclApiObject();\n        $acl_ids = $gacl->search_acl(false, false, false, false, $group_name, false, false, false, false);\n        foreach ($acl_ids as $acl_id) {\n            $acl = $gacl->get_acl($acl_id);\n            $ret = $acl['return_value'];\n            foreach ($acl['aco'] as $sectionid => $acos) {\n                if ($sectionid != 'placeholder') {\n                    foreach ($acos as $aco) {\n                        $perms[$sectionid][$aco][$ret] = 1;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Return an array of all ACOs that the designated user has permission for.\n     * This is an array keyed on ACO section ID with values that are arrays keyed on ACO ID\n     * with values that are arrays keyed on return value.\n     *\n     * @param  string  $username              Name of user\n     * @return array                          The array of ACOs\n     */\n    public static function getUserPermissions($username = '')\n    {\n        if (!$username) {\n            $username = $_SESSION['authUser'];\n        }\n        $gacl = self::collectGaclApiObject();\n        $perms = array();\n        $username_acl_groups = self::aclGetGroupTitles($username); // array of roles for the user\n        if ($username_acl_groups) {\n            foreach ($username_acl_groups as $group_name) {\n                self::getGroupPermissions($group_name, $perms);\n            }\n        }\n        return $perms;\n    }\n\n    /**\n     * Test if the logged-in user has all of the permissions of the specified user.\n     *\n     * @param  string  $username              Name of user\n     * @return boolean\n     */\n    public static function iHavePermissionsOf($username)\n    {\n        $perms = self::getUserPermissions($username);\n        $myperms = self::getUserPermissions();\n        foreach ($perms as $sectionid => $acos) {\n            foreach ($acos as $aco => $rets) {\n                foreach ($rets as $ret => $dummy) {\n                    // Next test is just to speed things up.\n                    if (empty($myperms[$sectionid][$aco][$ret]) && empty($myperms[$sectionid][$aco]['write'])) {\n                        if (!aclMain::aclCheckCore($sectionid, $aco, '', $ret)) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Test if the logged-in user has all of the permissions of the specified group.\n     *\n     * @param  string  $group_name            Name of group\n     * @return boolean\n     */\n    public static function iHaveGroupPermissions($group_name)\n    {\n        $perms = array();\n        self::getGroupPermissions($group_name, $perms);\n        $myperms = self::getUserPermissions();\n        foreach ($perms as $sectionid => $acos) {\n            foreach ($acos as $aco => $rets) {\n                foreach ($rets as $ret => $dummy) {\n                    // Next test is just to speed things up.\n                    if (empty($myperms[$sectionid][$aco][$ret]) && empty($myperms[$sectionid][$aco]['write'])) {\n                        if (!aclMain::aclCheckCore($sectionid, $aco, '', $ret)) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}\n", "<?php\n/**\n * GaclApi class - phpGACL extended API Class\n *\n * Original code from phpGACL - Generic Access Control List\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Mike Benoit <ipso@snappymail.ca>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2002-2003 Mike Benoit <ipso@snappymail.ca>\n * @copyright Copyright (c) 2020 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html GNU Lesser General Public License 2.1\n */\n\n\nnamespace OpenEMR\\Gacl;\n\nclass GaclApi extends Gacl {\n\n\t/*\n\t *\n\t * Misc helper functions.\n\t *\n\t */\n\n\t/**\n\t * showarray()\n\t *\n\t * Dump all contents of an array in HTML (kinda)\n\t *\n\t * @param array\n\t *\n\t */\n\tfunction showarray($array) {\n\t\techo \"<br /><pre>\\n\";\n\t\tvar_dump($array);\n\t\techo \"</pre><br />\\n\";\n\t}\n\n\t/**\n\t * count_all()\n\t *\n\t * Recursively counts elements in an array and sub-arrays.\n\t *\n\t * This is different from count($arg, COUNT_RECURSIVE)\n\t * in PHP >= 4.2.0, which includes sub-arrays in the count.\n\t *\n\t * @return int The returned count is a count of all scalar elements found.\n\t *\n\t * @param array Array to count\n\t */\n\tfunction count_all($arg = NULL) {\n\t\tswitch (TRUE) {\n\t\t\tcase is_scalar($arg):\n\t\t\tcase is_object($arg):\n\t\t\t\t// single object\n\t\t\t\treturn 1;\n\t\t\tcase is_array($arg):\n\t\t\t\t// call recursively for all elements of $arg\n\t\t\t\t$count = 0;\n\t\t\t\tforeach ($arg as $val) {\n\t\t\t\t\t$count += $this->count_all($val);\n\t\t\t\t}\n\t\t\t\treturn $count;\n\t\t}\n\t\treturn FALSE;\n\t}\n\n\t/**\n\t * get_version()\n\t *\n\t * Grabs phpGACL version from the database.\n\t *\n\t * @return string Version of phpGACL\n\t */\n\tfunction get_version() {\n\t\t$query = \"select value from \".$this->_db_table_prefix.\"phpgacl where name = 'version'\";\n\t\t$version = $this->db->GetOne($query);\n\n\t\treturn $version;\n\t}\n\n\t/**\n\t * get_schema_version()\n\t *\n\t * Grabs phpGACL schema version from the database.\n\t *\n\t * @return string Schema Version\n\t */\n\tfunction get_schema_version() {\n\t\t$query = \"select value from \".$this->_db_table_prefix.\"phpgacl where name = 'schema_version'\";\n\t\t$version = $this->db->GetOne($query);\n\n\t\treturn $version;\n\t}\n\n\t/*\n\t *\n\t * ACL\n\t *\n\t */\n\n\t/**\n\t * consolidated_edit_acl()\n\t *\n\t * Add's an ACL but checks to see if it can consolidate it with another one first.\n\t *\n\t * This ONLY works with ACO's and ARO's. Groups, and AXO are excluded.\n\t * As well this function is designed for handling ACLs with return values,\n\t * and consolidating on the return_value, in hopes of keeping the ACL count to a minimum.\n\t *\n\t * A return value of false must _always_ be handled outside this function.\n\t * As this function will remove AROs from ACLs and return false, in most cases\n\t * you will need to a create a completely new ACL on a false return.\n\t *\n\t * @return bool Special boolean return value. See note.\n\t *\n\t * @param string ACO Section Value\n\t * @param string ACO Value\n\t * @param string ARO Section Value\n\t * @param string ARO Value\n\t * @param string Return Value of ACL\n\t */\n\tfunction consolidated_edit_acl($aco_section_value, $aco_value, $aro_section_value, $aro_value, $return_value) {\n\n\t\t$this->debug_text(\"consolidated_edit_acl(): ACO Section Value: $aco_section_value ACO Value: $aco_value ARO Section Value: $aro_section_value ARO Value: $aro_value Return Value: $return_value\");\n\n\t\t$acl_ids = array();\n\n\t\tif (empty($aco_section_value) ) {\n\t\t\t$this->debug_text(\"consolidated_edit_acl(): ACO Section Value ($aco_section_value) is empty, this is required!\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($aco_value) ) {\n\t\t\t$this->debug_text(\"consolidated_edit_acl(): ACO Value ($aco_value) is empty, this is required!\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($aro_section_value) ) {\n\t\t\t$this->debug_text(\"consolidated_edit_acl(): ARO Section Value ($aro_section_value) is empty, this is required!\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($aro_value) ) {\n\t\t\t$this->debug_text(\"consolidated_edit_acl(): ARO Value ($aro_value) is empty, this is required!\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($return_value) ) {\n\t\t\t$this->debug_text(\"consolidated_edit_acl(): Return Value ($return_value) is empty, this is required!\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//See if a current ACL exists with the current objects, excluding return value\n\t\t$current_acl_ids = $this->search_acl($aco_section_value, $aco_value, $aro_section_value, $aro_value, FALSE, FALSE, FALSE, FALSE, FALSE);\n\t\t//showarray($current_acl_ids);\n\n\t\tif (is_array($current_acl_ids)) {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Found current ACL_IDs, counting ACOs\");\n\n\t\t\tforeach ($current_acl_ids as $current_acl_id) {\n\t\t\t\t//Check to make sure these ACLs only have a single ACO mapped to them.\n\t\t\t\t$current_acl_array = &$this->get_acl($current_acl_id);\n\n\t\t\t\t//showarray($current_acl_array);\n\t\t\t\t$this->debug_text(\"add_consolidated_acl(): Current Count: \".$this->count_all($current_acl_array['aco']).\"\");\n\n\t\t\t\tif ( $this->count_all($current_acl_array['aco']) == 1) {\n\t\t\t\t\t$this->debug_text(\"add_consolidated_acl(): ACL ID: $current_acl_id has 1 ACO.\");\n\n\t\t\t\t\t//Test to see if the return values match, if they do, no need removing or appending ARO. Just return true.\n\t\t\t\t\tif ($current_acl_array['return_value'] == $return_value) {\n\t\t\t\t\t\t$this->debug_text(\"add_consolidated_acl(): ACL ID: $current_acl_id has 1 ACO, and the same return value. No need to modify.\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\t$acl_ids[] = $current_acl_id;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t//showarray($acl_ids);\n\t\t$acl_ids_count = count($acl_ids);\n\n\t\t//If acl_id's turns up more then one ACL, lets remove the ARO from all of them in hopes to\n\t\t//eliminate any conflicts.\n\t\tif (is_array($acl_ids) AND $acl_ids_count > 0) {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Removing specified ARO from existing ACL.\");\n\n\t\t\tforeach ($acl_ids as $acl_id) {\n\t\t\t\t//Remove ARO from current ACLs, so we don't create conflicting ACLs later on.\n\t\t\t\tif (!$this->shift_acl($acl_id, array($aro_section_value => array($aro_value)) ) ) {\n\t\t\t\t\t$this->debug_text(\"add_consolidated_acl(): Error removing specified ARO from ACL ID: $acl_id\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Didn't find any current ACLs with a single ACO. \");\n\t\t}\n\t\t//unset($acl_ids);\n    $acl_ids = array();\n\t\tunset($acl_ids_count);\n\n\t\t//At this point there should be no conflicting ACLs, searching for an existing ACL with the new values.\n\t\t$new_acl_ids = $this->search_acl($aco_section_value, $aco_value, FALSE, FALSE, NULL, NULL, NULL, NULL, $return_value);\n\t\t$new_acl_count = count($new_acl_ids);\n\t\t//showarray($new_acl_ids);\n\n\t\tif (is_array($new_acl_ids)) {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Found new ACL_IDs, counting ACOs\");\n\n\t\t\tforeach ($new_acl_ids as $new_acl_id) {\n\t\t\t\t//Check to make sure these ACLs only have a single ACO mapped to them.\n\t\t\t\t$new_acl_array = &$this->get_acl($new_acl_id);\n\t\t\t\t//showarray($new_acl_array);\n\t\t\t\t$this->debug_text(\"add_consolidated_acl(): New Count: \".$this->count_all($new_acl_array['aco']).\"\");\n\t\t\t\tif ( $this->count_all($new_acl_array['aco']) == 1) {\n\n\t\t\t\t\t$this->debug_text(\"add_consolidated_acl(): ACL ID: $new_acl_id has 1 ACO, append should be able to take place.\");\n\t\t\t\t\t$acl_ids[] = $new_acl_id;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t//showarray($acl_ids);\n\t\t$acl_ids_count = count($acl_ids);\n\n\t\tif (is_array($acl_ids) AND $acl_ids_count == 1) {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Appending specified ARO to existing ACL.\");\n\n\t\t\t$acl_id=$acl_ids[0];\n\n\t\t\tif (!$this->append_acl($acl_id, array($aro_section_value => array($aro_value)) ) ) {\n\t\t\t\t$this->debug_text(\"add_consolidated_acl(): Error appending specified ARO to ACL ID: $acl_id\");\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Hot damn, ACL consolidated!\");\n\t\t\treturn true;\n\t\t} elseif($acl_ids_count > 1) {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): Found more then one ACL with a single ACO. Possible conflicting ACLs.\");\n\t\t\treturn false;\n\t\t} elseif ($acl_ids_count == 0) {\n\t\t\t$this->debug_text(\"add_consolidated_acl(): No existing ACLs found, create a new one.\");\n\n\t\t\tif (!$this->add_acl(\tarray( $aco_section_value => array($aco_value) ),\n\t\t\t\t\t\t\t\t\tarray( $aro_section_value => array($aro_value) ),\n\t\t\t\t\t\t\t\t\tNULL,\n\t\t\t\t\t\t\t\t\tNULL,\n\t\t\t\t\t\t\t\t\tNULL,\n\t\t\t\t\t\t\t\t\tTRUE,\n\t\t\t\t\t\t\t\t\tTRUE,\n\t\t\t\t\t\t\t\t\t$return_value,\n\t\t\t\t\t\t\t\t\tNULL)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t$this->debug_text(\"add_consolidated_acl(): Error adding new ACL for ACO Section: $aco_section_value ACO Value: $aco_value Return Value: $return_value\");\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$this->debug_text(\"add_consolidated_acl(): ADD_ACL() successfull, returning True.\");\n\t\t\treturn true;\n\t\t}\n\n\t\t$this->debug_text(\"add_consolidated_acl(): Returning false.\");\n\t\treturn false;\n\t}\n\n\t/**\n\t * search_acl()\n\t *\n\t * Searches for ACL's with specified objects mapped to them.\n\t *\n\t * NULL values are included in the search, if you want to ignore\n\t * for instance aro_groups use FALSE instead of NULL.\n\t *\n\t * @return array containing ACL IDs if search is successful\n\t *\n\t * @param string ACO Section Value\n\t * @param string ACO Value\n\t * @param string ARO Section Value\n\t * @param string ARO Value\n\t * @param string ARO Group Name\n\t * @param string AXO Section Value\n\t * @param string AXO Value\n\t * @param string AXO Group Name\n\t * @param string Return Value\n\t */\n\tfunction search_acl($aco_section_value=NULL, $aco_value=NULL, $aro_section_value=NULL, $aro_value=NULL, $aro_group_name=NULL, $axo_section_value=NULL, $axo_value=NULL, $axo_group_name=NULL, $return_value=NULL) {\n\t\t$this->debug_text(\"search_acl(): aco_section_value: $aco_section_value aco_value: $aco_value, aro_section_value: $aro_section_value, aro_value: $aro_value, aro_group_name: $aro_group_name, axo_section_value: $axo_section_value, axo_value: $axo_value, axo_group_name: $axo_group_name, return_value: $return_value\");\n\n\t\t$query = '\n\t\t\t\tSELECT\t\ta.id\n\t\t\t\tFROM\t\t'. $this->_db_table_prefix .'acl a';\n\n\t\t$where_query = array();\n\n\t\t// ACO\n\t\tif ($aco_section_value !== FALSE AND $aco_value !== FALSE) {\n\t\t\t$query .= '\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aco_map ac ON a.id=ac.acl_id';\n\n\t\t\tif ($aco_section_value == NULL AND $aco_value == NULL) {\n\t\t\t\t$where_query[] = '(ac.section_value IS NULL AND ac.value IS NULL)';\n\t\t\t} else {\n\t\t\t\t$where_query[] = '(ac.section_value='. $this->db->quote($aco_section_value) .' AND ac.value='. $this->db->quote($aco_value) .')';\n\t\t\t}\n\t\t}\n\n\t\t// ARO\n\t\tif ($aro_section_value !== FALSE AND $aro_value !== FALSE) {\n\t\t\t$query .= '\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_map ar ON a.id=ar.acl_id';\n\n\t\t\tif ($aro_section_value == NULL AND $aro_value == NULL) {\n\t\t\t\t$where_query[] = '(ar.section_value IS NULL AND ar.value IS NULL)';\n\t\t\t} else {\n\t\t\t\t$where_query[] = '(ar.section_value='. $this->db->quote($aro_section_value) .' AND ar.value='. $this->db->quote($aro_value) .')';\n\t\t\t}\n\t\t}\n\n\t\t// AXO\n\t\tif ($axo_section_value !== FALSE AND $axo_value !== FALSE) {\n\t\t\t$query .= '\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_map ax ON a.id=ax.acl_id';\n\n\t\t\tif ($axo_section_value == NULL AND $axo_value == NULL) {\n\t\t\t\t$where_query[] = '(ax.section_value IS NULL AND ax.value IS NULL)';\n\t\t\t} else {\n\t\t\t\t$where_query[] = '(ax.section_value='. $this->db->quote($axo_section_value) .' AND ax.value='. $this->db->quote($axo_value) .')';\n\t\t\t}\n\t\t}\n\n\t\t// ARO Group\n\t\tif ($aro_group_name !== FALSE) {\n\t\t\t$query .= '\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_groups_map arg ON a.id=arg.acl_id\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_groups rg ON arg.group_id=rg.id';\n\n\t\t\tif ($aro_group_name == NULL) {\n\t\t\t\t$where_query[] = '(rg.name IS NULL)';\n\t\t\t} else {\n\t\t\t\t$where_query[] = '(rg.name='. $this->db->quote($aro_group_name) .')';\n\t\t\t}\n\t\t}\n\n\t\t// AXO Group\n\t\tif ($axo_group_name !== FALSE) {\n\t\t\t$query .= '\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_groups_map axg ON a.id=axg.acl_id\n\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_groups xg ON axg.group_id=xg.id';\n\n\t\t\tif ($axo_group_name == NULL) {\n\t\t\t\t$where_query[] = '(xg.name IS NULL)';\n\t\t\t} else {\n\t\t\t\t$where_query[] = '(xg.name='. $this->db->quote($axo_group_name) .')';\n\t\t\t}\n\t\t}\n\t\tif ($return_value != FALSE) {\n\t\t\tif ($return_value == NULL) {\n\t\t\t\t$where_query[] = '(a.return_value IS NULL)';\n\t\t\t} else {\n\t\t\t\t$where_query[] = '(a.return_value='. $this->db->quote($return_value) .')';\n\t\t\t}\n\t\t}\n\n\t\tif (count($where_query) > 0) {\n\t\t\t$query .= '\n\t\t\t\tWHERE\t\t'. implode (' AND ', $where_query);\n\t\t}\n\n\t\treturn $this->db->GetCol($query);\n\t}\n\n\t/**\n\t * append_acl()\n\t *\n\t * Appends objects on to a specific ACL.\n\t *\n\t * @return bool TRUE if successful, FALSE otherwise.\n\t *\n\t * @param int ACL ID #\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t */\n\tfunction append_acl($acl_id, $aro_array=NULL, $aro_group_ids=NULL, $axo_array=NULL, $axo_group_ids=NULL, $aco_array=NULL) {\n\t\t$this->debug_text(\"append_acl(): ACL_ID: $acl_id\");\n\n\t\t$update = 0;\n\n\t\tif (empty($acl_id)) {\n\t\t\t$this->debug_text(\"append_acl(): No ACL_ID specified! ACL_ID: $acl_id\");\n\t\t\treturn false;\n\t\t}\n\n        //Grab ACL data.\n        $get_acl = $this->get_acl($acl_id);\n        $acl_array = &$get_acl;\n\n\t\t//Append each object type seperately.\n\t\tif (is_array($aro_array) AND count($aro_array) > 0) {\n\t\t\t$this->debug_text(\"append_acl(): Appending ARO's\");\n\n            foreach ($aro_array as $aro_section_value => $aro_value_array) {\n\t\t\t\tforeach ($aro_value_array as $aro_value) {\n\t\t\t\t\tif ( count($acl_array['aro'][$aro_section_value]) != 0 ) {\n\t\t\t\t\t\tif (!in_array($aro_value, $acl_array['aro'][$aro_section_value])) {\n\t\t\t\t\t\t\t$this->debug_text(\"append_acl(): ARO Section Value: $aro_section_value ARO VALUE: $aro_value\");\n\t\t\t\t\t\t\t$acl_array['aro'][$aro_section_value][] = $aro_value;\n\t\t\t\t\t\t\t$update=1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->debug_text(\"append_acl(): Duplicate ARO, ignoring... \");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { //Array is empty so add this aro value.\n\t\t\t\t\t\t$acl_array['aro'][$aro_section_value][] = $aro_value;\n\t\t\t\t\t\t$update = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($aro_group_ids) AND count($aro_group_ids) > 0) {\n\t\t\t$this->debug_text(\"append_acl(): Appending ARO_GROUP_ID's\");\n\n\t\t\tforeach ($aro_group_ids as $aro_group_id) {\n\t\t\t\tif (!is_array($acl_array['aro_groups']) OR !in_array($aro_group_id, $acl_array['aro_groups'])) {\n\t\t\t\t\t$this->debug_text(\"append_acl(): ARO Group ID: $aro_group_id\");\n\t\t\t\t\t$acl_array['aro_groups'][] = $aro_group_id;\n\t\t\t\t\t$update = 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->debug_text(\"append_acl(): Duplicate ARO_Group_ID, ignoring... \");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($axo_array) AND count($axo_array) > 0) {\n\t\t\t$this->debug_text(\"append_acl(): Appending AXO's\");\n\n\t\t\tforeach($axo_array as $axo_section_value => $axo_value_array) {\n\t\t\t\tforeach ($axo_value_array as $axo_value) {\n\t\t\t\t\tif (!in_array($axo_value, $acl_array['axo'][$axo_section_value])) {\n\t\t\t\t\t\t$this->debug_text(\"append_acl(): AXO Section Value: $axo_section_value AXO VALUE: $axo_value\");\n\t\t\t\t\t\t$acl_array['axo'][$axo_section_value][] = $axo_value;\n\t\t\t\t\t\t$update = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->debug_text(\"append_acl(): Duplicate AXO, ignoring... \");\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($axo_group_ids) AND count($axo_group_ids) > 0) {\n\t\t\t$this->debug_text(\"append_acl(): Appending AXO_GROUP_ID's\");\n\t\t\tforeach ($axo_group_ids as $axo_group_id) {\n\t\t\t\tif (!is_array($acl_array['axo_groups']) OR !in_array($axo_group_id, $acl_array['axo_groups'])) {\n\t\t\t\t\t$this->debug_text(\"append_acl(): AXO Group ID: $axo_group_id\");\n\t\t\t\t\t$acl_array['axo_groups'][] = $axo_group_id;\n\t\t\t\t\t$update = 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->debug_text(\"append_acl(): Duplicate ARO_Group_ID, ignoring... \");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($aco_array) AND count($aco_array) > 0) {\n\t\t\t$this->debug_text(\"append_acl(): Appending ACO's\");\n\n            foreach ($aco_array as $aco_section_value => $aco_value_array) {\n\t\t\t\tforeach ($aco_value_array as $aco_value) {\n\t\t\t\t\tif (empty($acl_array['aco'][$aco_section_value]) || !is_array($acl_array['aco'][$aco_section_value]) || !in_array($aco_value, $acl_array['aco'][$aco_section_value])) {\n\t\t\t\t\t\t$this->debug_text(\"append_acl(): ACO Section Value: $aco_section_value ACO VALUE: $aco_value\");\n\t\t\t\t\t\t$acl_array['aco'][$aco_section_value][] = $aco_value;\n\t\t\t\t\t\t$update = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->debug_text(\"append_acl(): Duplicate ACO, ignoring... \");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($update == 1) {\n\t\t\t$this->debug_text(\"append_acl(): Update flag set, updating ACL.\");\n\t\t\t//function edit_acl($acl_id, $aco_array, $aro_array, $aro_group_ids=NULL, $axo_array=NULL, $axo_group_ids=NULL, $allow=1, $enabled=1, $return_value=NULL, $note=NULL) {\n\t\t\treturn $this->edit_acl($acl_id, $acl_array['aco'], $acl_array['aro'], $acl_array['aro_groups'], $acl_array['axo'], $acl_array['axo_groups'], $acl_array['allow'], $acl_array['enabled'], $acl_array['return_value'], $acl_array['note']);\n\t\t}\n\n\t\t//Return true if everything is duplicate and no ACL id updated.\n\t\t$this->debug_text(\"append_acl(): Update flag not set, NOT updating ACL.\");\n\t\treturn true;\n\t}\n\n\t/**\n\t * shift_acl()\n\t *\n\t * Opposite of append_acl(). Removes objects from a specific ACL. (named after PHP's array_shift())\n\t *\n\t * @return bool TRUE if successful, FALSE otherwise.\n\t *\n\t * @param int ACL ID #\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t */\n\tfunction shift_acl($acl_id, $aro_array=NULL, $aro_group_ids=NULL, $axo_array=NULL, $axo_group_ids=NULL, $aco_array=NULL) {\n\t\t$this->debug_text(\"shift_acl(): ACL_ID: $acl_id\");\n\n\t\t$update = 0;\n\n\t\tif (empty($acl_id)) {\n\t\t\t$this->debug_text(\"shift_acl(): No ACL_ID specified! ACL_ID: $acl_id\");\n\t\t\treturn false;\n\t\t}\n\n        //Grab ACL data.\n        $get_acl = $this->get_acl($acl_id);\n        $acl_array = &$get_acl;\n\n\t\t//showarray($acl_array);\n\t\t//Remove each object type seperately.\n\t\tif (is_array($aro_array) AND count($aro_array) > 0) {\n\t\t\t$this->debug_text(\"shift_acl(): Removing ARO's\");\n\n\t\t\tforeach($aro_array as $aro_section_value => $aro_value_array) {\n\t\t\t\tforeach ($aro_value_array as $aro_value) {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): ARO Section Value: $aro_section_value ARO VALUE: $aro_value\");\n\n\t\t\t\t\t//Only search if aro array contains data.\n\t\t\t\t\tif ( count($acl_array['aro'][$aro_section_value]) != 0 ) {\n\t\t\t\t\t\t$aro_key = array_search($aro_value, $acl_array['aro'][$aro_section_value]);\n\n\t\t\t\t\t\tif ($aro_key !== FALSE) {\n\t\t\t\t\t\t\t$this->debug_text(\"shift_acl(): Removing ARO. ($aro_key)\");\n\t\t\t\t\t\t\tunset($acl_array['aro'][$aro_section_value][$aro_key]);\n\t\t\t\t\t\t\t$update = 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->debug_text(\"shift_acl(): ARO doesn't exist, can't remove it.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($aro_group_ids) AND count($aro_group_ids) > 0) {\n\t\t\t$this->debug_text(\"shift_acl(): Removing ARO_GROUP_ID's\");\n\n\t\t\tforeach ($aro_group_ids as $aro_group_id) {\n\t\t\t\t$this->debug_text(\"shift_acl(): ARO Group ID: $aro_group_id\");\n\t\t\t\t$aro_group_key = array_search($aro_group_id, $acl_array['aro_groups']);\n\n\t\t\t\tif ($aro_group_key !== FALSE) {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): Removing ARO Group. ($aro_group_key)\");\n\t\t\t\t\tunset($acl_array['aro_groups'][$aro_group_key]);\n\t\t\t\t\t$update = 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): ARO Group doesn't exist, can't remove it.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($axo_array) AND count($axo_array) > 0) {\n\t\t\t$this->debug_text(\"shift_acl(): Removing AXO's\");\n\n\t\t\tforeach($axo_array as $axo_section_value => $axo_value_array) {\n\t\t\t\tforeach ($axo_value_array as $axo_value) {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): AXO Section Value: $axo_section_value AXO VALUE: $axo_value\");\n\t\t\t\t\t$axo_key = array_search($axo_value, $acl_array['axo'][$axo_section_value]);\n\n\t\t\t\t\tif ($axo_key !== FALSE) {\n\t\t\t\t\t\t$this->debug_text(\"shift_acl(): Removing AXO. ($axo_key)\");\n\t\t\t\t\t\tunset($acl_array['axo'][$axo_section_value][$axo_key]);\n\t\t\t\t\t\t$update = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->debug_text(\"shift_acl(): AXO doesn't exist, can't remove it.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($axo_group_ids) AND count($axo_group_ids) > 0) {\n\t\t\t$this->debug_text(\"shift_acl(): Removing AXO_GROUP_ID's\");\n\n\t\t\tforeach ($axo_group_ids as $axo_group_id) {\n\t\t\t\t$this->debug_text(\"shift_acl(): AXO Group ID: $axo_group_id\");\n\t\t\t\t$axo_group_key = array_search($axo_group_id, $acl_array['axo_groups']);\n\n\t\t\t\tif ($axo_group_key !== FALSE) {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): Removing AXO Group. ($axo_group_key)\");\n\t\t\t\t\tunset($acl_array['axo_groups'][$axo_group_key]);\n\t\t\t\t\t$update = 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): AXO Group doesn't exist, can't remove it.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_array($aco_array) AND count($aco_array) > 0) {\n\t\t\t$this->debug_text(\"shift_acl(): Removing ACO's\");\n\n\t\t\tforeach ($aco_array as $aco_section_value => $aco_value_array) {\n\t\t\t\tforeach ($aco_value_array as $aco_value) {\n\t\t\t\t\t$this->debug_text(\"shift_acl(): ACO Section Value: $aco_section_value ACO VALUE: $aco_value\");\n\t\t\t\t\t$aco_key = array_search($aco_value, ($acl_array['aco'][$aco_section_value] ?? []));\n\n\t\t\t\t\tif ($aco_key !== FALSE) {\n\t\t\t\t\t\t$this->debug_text(\"shift_acl(): Removing ACO. ($aco_key)\");\n\t\t\t\t\t\tunset($acl_array['aco'][$aco_section_value][$aco_key]);\n\t\t\t\t\t\t$update = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->debug_text(\"shift_acl(): ACO doesn't exist, can't remove it.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($update == 1) {\n\t\t\t//We know something was changed, so lets see if no ACO's or no ARO's are left assigned to this ACL, if so, delete the ACL completely.\n\t\t\t//$this->showarray($acl_array);\n\t\t\t$this->debug_text(\"shift_acl(): ACOs: \". $this->count_all($acl_array['aco']) .\" AROs: \".$this->count_all($acl_array['aro']).\"\");\n\n\t\t\tif ( $this->count_all($acl_array['aco']) == 0\n\t\t\t\t\tOR ( $this->count_all($acl_array['aro']) == 0\n\t\t\t\t\t\tAND ( $this->count_all($acl_array['axo']) == 0 OR $acl_array['axo'] == FALSE)\n\t\t\t\t\t\tAND (count($acl_array['aro_groups']) == 0 OR $acl_array['aro_groups'] == FALSE)\n\t\t\t\t\t\tAND (count($acl_array['axo_groups']) == 0 OR $acl_array['axo_groups'] == FALSE)\n\t\t\t\t\t\t) ) {\n\t\t\t\t$this->debug_text(\"shift_acl(): No ACOs or ( AROs AND AXOs AND ARO Groups AND AXO Groups) left assigned to this ACL (ID: $acl_id), deleting ACL.\");\n\n\t\t\t\treturn $this->del_acl($acl_id);\n\t\t\t}\n\n\t\t\t$this->debug_text(\"shift_acl(): Update flag set, updating ACL.\");\n\n\t\t\treturn $this->edit_acl($acl_id, $acl_array['aco'], $acl_array['aro'], $acl_array['aro_groups'], $acl_array['axo'], $acl_array['axo_groups'], $acl_array['allow'], $acl_array['enabled'], $acl_array['return_value'], $acl_array['note']);\n\t\t}\n\n\t\t//Return true if everything is duplicate and no ACL id updated.\n\t\t$this->debug_text(\"shift_acl(): Update flag not set, NOT updating ACL.\");\n\t\treturn true;\n\t}\n\n\t/**\n\t * get_acl()\n\t *\n\t * Grabs ACL data.\n\t *\n\t * @return bool FALSE if not found, or Associative Array with the following items:\n\t *\n\t *\t- 'aco' => Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t *\t- 'aro' => Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t *\t- 'axo' => Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t *\t- 'aro_groups' => Array of Group IDs\n\t *\t- 'axo_groups' => Array of Group IDs\n\t *\t- 'acl_id' => int ACL ID #\n\t *\t- 'allow' => int Allow flag\n\t *\t- 'enabled' => int Enabled flag\n\t *\t- 'return_value' => string Return Value\n\t *\t- 'note' => string Note\n\t *\n\t * @param int ACL ID #\n\t */\n\tfunction get_acl($acl_id) {\n\n\t\t$this->debug_text(\"get_acl(): ACL_ID: $acl_id\");\n\n\t\tif (empty($acl_id)) {\n\t\t\t$this->debug_text(\"get_acl(): No ACL_ID specified! ACL_ID: $acl_id\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Grab ACL information\n\t\t$query = \"select id, allow, enabled, return_value, note from \".$this->_db_table_prefix.\"acl where id = \" . $this->db->quote($acl_id);\n\t\t$acl_row = $this->db->GetRow($query);\n\n\t\t// return false if not found\n\t\tif (!$acl_row) {\n\t\t\t$this->debug_text(\"get_acl(): No ACL found for that ID! ACL_ID: $acl_id\");\n\t\t\treturn false;\n\t\t}\n\n\t\tlist($retarr['acl_id'], $retarr['allow'], $retarr['enabled'], $retarr['return_value'], $retarr['note']) = $acl_row;\n\n\t\t//Grab selected ACO's\n\t\t$query = \"select distinct a.section_value, a.value, c.name, b.name from \".$this->_db_table_prefix.\"aco_map a, \".$this->_db_table_prefix.\"aco b, \".$this->_db_table_prefix.\"aco_sections c\n\t\t\t\t\t\t\twhere ( a.section_value=b.section_value AND a.value = b.value) AND b.section_value=c.value AND a.acl_id = \" . $this->db->quote($acl_id);\n\t\t$rs = $this->db->Execute($query);\n\t\t$rows = $rs->GetRows();\n\n\t\t$retarr['aco'] = array();\n\t\tforeach ($rows as $row) {\n\t\t\tlist($section_value, $value, $section, $aco) = $row;\n\t\t\t$this->debug_text(\"Section Value: $section_value Value: $value Section: $section ACO: $aco\");\n\n\t\t\t$retarr['aco'][$section_value][] = $value;\n\n\t\t}\n\t\t//showarray($aco);\n\n\t\t//Grab selected ARO's\n\t\t$query = \"select distinct a.section_value, a.value, c.name, b.name from \".$this->_db_table_prefix.\"aro_map a, \".$this->_db_table_prefix.\"aro b, \".$this->_db_table_prefix.\"aro_sections c\n\t\t\t\t\t\t\twhere ( a.section_value=b.section_value AND a.value = b.value) AND b.section_value=c.value AND a.acl_id = \" . $this->db->quote($acl_id);\n\t\t$rs = $this->db->Execute($query);\n\t\t$rows = $rs->GetRows();\n\n\t\t$retarr['aro'] = array();\n        foreach ($rows as $row) {\n\t\t\tlist($section_value, $value, $section, $aro) = $row;\n\t\t\t$this->debug_text(\"Section Value: $section_value Value: $value Section: $section ARO: $aro\");\n\n\t\t\t$retarr['aro'][$section_value][] = $value;\n\n\t\t}\n\t\t//showarray($options_aro);\n\n\t\t//Grab selected AXO's\n\t\t$query = \"select distinct a.section_value, a.value, c.name, b.name from \".$this->_db_table_prefix.\"axo_map a, \".$this->_db_table_prefix.\"axo b, \".$this->_db_table_prefix.\"axo_sections c\n\t\t\t\t\t\t\twhere ( a.section_value=b.section_value AND a.value = b.value) AND b.section_value=c.value AND a.acl_id = \" . $this->db->quote($acl_id);\n\t\t$rs = $this->db->Execute($query);\n\t\t$rows = $rs->GetRows();\n\n\t\t$retarr['axo'] = array();\n        foreach ($rows as $row) {\n\t\t\tlist($section_value, $value, $section, $axo) = $row;\n\t\t\t$this->debug_text(\"Section Value: $section_value Value: $value Section: $section AXO: $axo\");\n\n\t\t\t$retarr['axo'][$section_value][] = $value;\n\n\t\t}\n\t\t//showarray($options_aro);\n\n\t\t//Grab selected ARO groups.\n\t\t$retarr['aro_groups'] = array();\n\t\t$query = \"select distinct group_id from \".$this->_db_table_prefix.\"aro_groups_map where  acl_id = \" . $this->db->quote($acl_id);\n\t\t$retarr['aro_groups'] = $this->db->GetCol($query);\n\t\t//showarray($selected_groups);\n\n\t\t//Grab selected AXO groups.\n\t\t$retarr['axo_groups'] = array();\n\t\t$query = \"select distinct group_id from \".$this->_db_table_prefix.\"axo_groups_map where  acl_id = \" . $this->db->quote($acl_id);\n\t\t$retarr['axo_groups'] = $this->db->GetCol($query);\n\t\t//showarray($selected_groups);\n\n\t\treturn $retarr;\n\t}\n\n\t/**\n\t * is_conflicting_acl()\n\t *\n\t * Checks for conflicts when adding a specific ACL.\n\t *\n\t * @return bool Returns true if conflict is found.\n\t *\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Array of ACL IDs to ignore from the result set.\n\t *\n\t */\n\tfunction is_conflicting_acl($aco_array, $aro_array, $aro_group_ids=NULL, $axo_array=NULL, $axo_group_ids=NULL, $ignore_acl_ids=NULL) {\n\t\t//Check for potential conflicts. Ignore groups, as groups will almost always have \"conflicting\" ACLs.\n\t\t//Thats part of inheritance.\n\n\t\tif (!is_array($aco_array)) {\n\t\t\t$this->debug_text('is_conflicting_acl(): Invalid ACO Array.');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif (!is_array($aro_array)) {\n\t\t\t$this->debug_text('is_conflicting_acl(): Invalid ARO Array.');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$query  = '\n\t\t\tSELECT\t\ta.id\n\t\t\tFROM\t\t'. $this->_db_table_prefix .'acl a\n\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aco_map ac ON ac.acl_id=a.id\n\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_map ar ON ar.acl_id=a.id\n\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_map ax ON ax.acl_id=a.id\n\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_groups_map axg ON axg.acl_id=a.id\n\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_groups xg ON xg.id=axg.group_id\n\t\t\t';\n\n\t\t//ACO\n\t\tforeach ($aco_array as $aco_section_value => $aco_value_array) {\n\t\t\t$this->debug_text(\"is_conflicting_acl(): ACO Section Value: $aco_section_value ACO VALUE: \" . implode(',', $aco_value_array));\n\t\t\t//showarray($aco_array);\n\n\t\t\tif (!is_array($aco_value_array)) {\n\t\t\t\t$this->debug_text('is_conflicting_acl(): Invalid Format for ACO Array item. Skipping...');\n\t\t\t\tcontinue;\n\t\t\t\t// return TRUE;\n\t\t\t}\n\t\t\t//Move the below line in to the LEFT JOIN above for PostgreSQL sake.\n\t\t\t//'ac1' => 'ac.acl_id=a.id',\n\t\t\t$where_query = array(\n\t\t\t\t'ac2' => '(ac.section_value='. $this->db->quote($aco_section_value) .' AND ac.value IN (\\''. implode ('\\',\\'', $aco_value_array) .'\\'))'\n\t\t\t);\n\n\t\t\t//ARO\n\t\t\tforeach ($aro_array as $aro_section_value => $aro_value_array) {\n\t\t\t\t$this->debug_text(\"is_conflicting_acl(): ARO Section Value: $aro_section_value ARO VALUE: $aro_value_array\");\n\n\t\t\t\tif (!is_array($aro_value_array))\n\t\t\t\t{\n\t\t\t\t\t$this->debug_text('is_conflicting_acl(): Invalid Format for ARO Array item. Skipping...');\n\t\t\t\t\tcontinue;\n\t\t\t\t\t// return TRUE;\n\t\t\t\t}\n\n\t\t\t\t$this->debug_text(\"is_conflicting_acl(): Search: ACO Section: $aco_section_value ACO Value: $aco_value_array ARO Section: $aro_section_value ARO Value: $aro_value_array\");\n\n\t\t\t\t//Move the below line in to the LEFT JOIN above for PostgreSQL sake.\n\t\t\t\t//$where_query['ar1'] = 'ar.acl_id=a.id';\n\t\t\t\t$where_query['ar2'] = '(ar.section_value='. $this->db->quote($aro_section_value) .' AND ar.value IN (\\''. implode ('\\',\\'', $aro_value_array) .'\\'))';\n\n\t\t\t\tif (is_array($axo_array) AND count($axo_array) > 0) {\n\t\t\t\t\tforeach ($axo_array as $axo_section_value => $axo_value_array) {\n\t\t\t\t\t\t$this->debug_text(\"is_conflicting_acl(): AXO Section Value: $axo_section_value AXO VALUE: $axo_value_array\");\n\n\t\t\t\t\t\tif (!is_array($axo_value_array)) {\n\t\t\t\t\t\t\t$this->debug_text('is_conflicting_acl(): Invalid Format for AXO Array item. Skipping...');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t// return TRUE;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$this->debug_text(\"is_conflicting_acl(): Search: ACO Section: $aco_section_value ACO Value: $aco_value_array ARO Section: $aro_section_value ARO Value: $aro_value_array AXO Section: $axo_section_value AXO Value: $axo_value_array\");\n\n\t\t\t\t\t\t//$where_query['ax1'] = 'ax.acl_id=x.id';\n\t\t\t\t\t\t$where_query['ax1'] = 'ax.acl_id=a.id';\n\t\t\t\t\t\t$where_query['ax2'] = '(ax.section_value='. $this->db->quote($axo_section_value) .' AND ax.value IN (\\''. implode ('\\',\\'', $axo_value_array) .'\\'))';\n\n\t\t\t\t\t\t$where  = 'WHERE ' . implode(' AND ', $where_query);\n\n\t\t\t\t\t\t$conflict_result = $this->db->GetCol($query . $where);\n\n\t\t\t\t\t\tif (is_array($conflict_result) AND !empty($conflict_result)) {\n\t\t\t\t\t\t\t// showarray($conflict_result);\n\n\t\t\t\t\t\t\tif (is_array($ignore_acl_ids)) {\n\t\t\t\t\t\t\t\t$conflict_result = array_diff($conflict_result, $ignore_acl_ids);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (count($conflict_result) > 0) {\n\t\t\t\t\t\t\t\t$conflicting_acls_str = implode(',', $conflict_result);\n\t\t\t\t\t\t\t\t$this->debug_text(\"is_conflicting_acl(): Conflict FOUND!!! ACL_IDS: ($conflicting_acls_str)\");\n\t\t\t\t\t\t\t\treturn TRUE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$where_query['ax1'] = '(ax.section_value IS NULL AND ax.value IS NULL)';\n\t\t\t\t\t$where_query['ax2'] = 'xg.name IS NULL';\n\n\t\t\t\t\t$where  = 'WHERE ' . implode(' AND ', $where_query);\n\n\t\t\t\t\t$conflict_result = $this->db->GetCol($query . $where);\n\n\t\t\t\t\tif (is_array($conflict_result) AND !empty($conflict_result)) {\n\t\t\t\t\t\t// showarray($conflict_result);\n\n\t\t\t\t\t\tif (is_array($ignore_acl_ids)) {\n\t\t\t\t\t\t\t$conflict_result = array_diff($conflict_result, $ignore_acl_ids);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (count($conflict_result) > 0) {\n\t\t\t\t\t\t\t$conflicting_acls_str = implode(',', $conflict_result);\n\t\t\t\t\t\t\t$this->debug_text(\"is_conflicting_acl(): Conflict FOUND!!! ACL_IDS: ($conflicting_acls_str)\");\n\t\t\t\t\t\t\treturn TRUE;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->debug_text('is_conflicting_acl(): No conflicting ACL found.');\n\t\treturn FALSE;\n\t}\n\n\t/**\n\t * add_acl()\n\t *\n\t * Add's an ACL. ACO_IDS, ARO_IDS, GROUP_IDS must all be arrays.\n\t *\n\t * @return bool Return ACL ID of new ACL if successful, FALSE otherewise.\n\t *\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param int Allow flag\n\t * @param int Enabled flag\n\t * @param string Return Value\n\t * @param string Note\n\t * @param string ACL Section Value\n\t * @param int ACL ID # Specific Request\n\n\t */\n\tfunction add_acl($aco_array, $aro_array, $aro_group_ids=NULL, $axo_array=NULL, $axo_group_ids=NULL, $allow=1, $enabled=1, $return_value=NULL, $note=NULL, $section_value=NULL, $acl_id=FALSE ) {\n\n\t\t$this->debug_text(\"add_acl():\");\n\n\t\tif (empty($aco_array) || count($aco_array) == 0) {\n\t\t\t$this->debug_text(\"Must select at least one Access Control Object\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif ((empty($aro_array) || count($aro_array) == 0) AND (empty($aro_group_ids) || count($aro_group_ids) == 0)) {\n\t\t\t$this->debug_text(\"Must select at least one Access Request Object or Group\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($allow)) {\n\t\t\t$allow=0;\n\t\t}\n\n\t\tif (empty($enabled)) {\n\t\t\t$enabled=0;\n\t\t}\n\n\t\tif (!empty($section_value)\n\t\t\tAND !$this->get_object_section_section_id(NULL, $section_value, 'ACL')) {\n\t\t\t$this->debug_text(\"add_acl(): Section Value: $section_value DOES NOT exist in the database.\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Unique the group arrays. Later one we unique ACO/ARO/AXO arrays.\n\t\tif (is_array($aro_group_ids)) {\n\t\t\t$aro_group_ids = array_unique($aro_group_ids);\n\t\t}\n\t\tif (is_array($axo_group_ids)) {\n\t\t\t$axo_group_ids = array_unique($axo_group_ids);\n\t\t}\n\n\t\t//Check for conflicting ACLs.\n\t\tif ($this->is_conflicting_acl($aco_array,$aro_array,$aro_group_ids,$axo_array,$axo_group_ids,array($acl_id))) {\n\t\t\t$this->debug_text(\"add_acl(): Detected possible ACL conflict, not adding ACL!\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Edit ACL if acl_id is set. This is simply if we're being called by edit_acl().\n\t\tif ($this->get_acl($acl_id) == FALSE) {\n\t\t\tif ( empty($section_value) ) {\n\t\t\t\t$section_value='system';\n\t\t\t\tif( !$this->get_object_section_section_id(NULL, $section_value, 'ACL') ) {\n\t\t\t\t\t// Use the acl section with the lowest order value.\n\t\t\t\t\t$acl_sections_table = $this->_db_table_prefix .'acl_sections';\n\t\t\t\t\t$acl_section_order_value = $this->db->GetOne(\"SELECT min(order_value) from $acl_sections_table\");\n\n\t\t\t\t\t$query = \"\n\t\t\t\t\t\tSELECT value\n\t\t\t\t\t\tFROM $acl_sections_table\n\t\t\t\t\t\tWHERE order_value = \" . $this->db->quote($acl_section_order_value);\n\t\t\t\t\t$section_value = $this->db->GetOne($query);\n\n\t\t\t\t\tif ( empty($section_value) ) {\n\t\t\t\t\t\t$this->debug_text(\"add_acl(): No valid acl section found.\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->debug_text(\"add_acl(): Using default section value: $section_value.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//ACL not specified, so create acl_id\n\t\t\tif (empty($acl_id)) {\n\t\t\t\t//Create ACL row first, so we have the acl_id\n\t\t\t\t$acl_id = $this->db->GenID($this->_db_table_prefix.'acl_seq',10);\n\n\t\t\t\t//Double check the ACL ID was generated.\n\t\t\t\tif (empty($acl_id)) {\n\t\t\t\t\t$this->debug_text(\"add_acl(): ACL_ID generation failed!\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Begin transaction _after_ GenID. Because on the first run, if GenID has to create the sequence,\n\t\t\t//the transaction will fail.\n\t\t\t$this->db->BeginTrans();\n\n\t\t\t$query = 'INSERT INTO '.$this->_db_table_prefix.'acl (id,section_value,allow,enabled,return_value,note,updated_date) VALUES('. $this->db->quote($acl_id) .','. $this->db->quote($section_value) .','. $this->db->quote($allow) .','. $this->db->quote($enabled) .','. $this->db->quote($return_value) .', '. $this->db->quote($note) .','. time() .')';\n\t\t\t$result = $this->db->Execute($query);\n\t\t} else {\n\t\t\t$section_sql = '';\n\t\t\tif ( !empty($section_value) ) {\n\t\t\t\t$section_sql = 'section_value='. $this->db->quote ($section_value) .',';\n\t\t\t}\n\n\t\t\t$this->db->BeginTrans();\n\n\t\t\t//Update ACL row, and remove all mappings so they can be re-inserted.\n\t\t\t$query  = '\n\t\t\t\tUPDATE\t'. $this->_db_table_prefix .'acl\n\t\t\t\tSET             ' . $section_sql . '\n\t\t\t\t\t\tallow='. $this->db->quote($allow) .',\n\t\t\t\t\t\tenabled='. $this->db->quote($enabled) .',\n\t\t\t\t\t\treturn_value='. $this->db->quote($return_value) .',\n\t\t\t\t\t\tnote='. $this->db->quote($note) .',\n\t\t\t\t\t\tupdated_date='. time() .'\n\t\t\t\tWHERE\tid='. $this->db->quote($acl_id);\n\t\t\t$result = $this->db->Execute($query);\n\n\t\t\tif ($result) {\n\t\t\t\t$this->debug_text(\"Update completed without error, delete mappings...\");\n\t\t\t\t//Delete all mappings so they can be re-inserted.\n\t\t\t\tforeach (array('aco_map', 'aro_map', 'axo_map', 'aro_groups_map', 'axo_groups_map') as $map) {\n\t\t\t\t\t$query = 'DELETE FROM '. $this->_db_table_prefix . $map .' WHERE acl_id='. $this->db->quote($acl_id);\n\t\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\t\tif (!is_object($rs))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->debug_db('add_acl');\n\t\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\t\treturn FALSE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!is_object($result)) {\n\t\t\t$this->debug_db('add_acl');\n\t\t\t$this->db->RollBackTrans();\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text(\"Insert or Update completed without error, insert new mappings.\");\n\t\t// Insert ACO/ARO/AXO mappings\n\t\tforeach (array('aco', 'aro', 'axo') as $map) {\n\t\t\t$map_array = ${$map .'_array'};\n\n\t\t\tif (!is_array ($map_array)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tforeach ($map_array as $section_value => $value_array) {\n\t\t\t\t$this->debug_text ('Insert: '. strtoupper($map) . ' Section Value: $section_value' . strtoupper($map) . ' VALUE: $value_array');\n\t\t\t\t// $this->showarray ($aco_value_array);\n\n\t\t\t\tif (!is_array($value_array)) {\n\t\t\t\t\t$this->debug_text ('add_acl (): Invalid Format for '. strtoupper ($map) .' Array item. Skipping...');\n\t\t\t\t\tcontinue;\n\t\t\t\t\t// return true;\n\t\t\t\t}\n\n\t\t\t\t$value_array = array_unique($value_array);\n\n\t\t\t\tforeach ($value_array as $value) {\n\t\t\t\t\t$get_object_id = $this->get_object_id($section_value, $value, $map);\n\t\t\t\t\t$object_id = &$get_object_id;\n\n\t\t\t\t\tif (empty($object_id))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->debug_text('add_acl(): '. strtoupper($map) . \" Object Section Value: $section_value Value: $value DOES NOT exist in the database. Skipping...\");\n\t\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$query  = 'INSERT INTO '. $this->_db_table_prefix . $map .'_map (acl_id,section_value,value) VALUES ('. $this->db->quote($acl_id) .', '. $this->db->quote($section_value) .', '. $this->db->quote($value) .')';\n\t\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\t\tif (!is_object($rs))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->debug_db('add_acl');\n\t\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Insert ARO/AXO GROUP mappings\n\t\tforeach (array('aro', 'axo') as $map) {\n\t\t\t$map_group_ids = ${$map .'_group_ids'};\n\n\t\t\tif (!is_array($map_group_ids)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tforeach ($map_group_ids as $group_id) {\n\t\t\t\t$this->debug_text ('Insert: '. strtoupper($map) .' GROUP ID: '. $group_id);\n        $get_group_data = $this->get_group_data($group_id, $map);\n        $group_data = &$get_group_data;\n\n\t\t\t\tif (empty($group_data)) {\n\t\t\t\t\t$this->debug_text('add_acl(): '. strtoupper($map) . \" Group: $group_id DOES NOT exist in the database. Skipping...\");\n\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t$query  = 'INSERT INTO '. $this->_db_table_prefix . $map .'_groups_map (acl_id,group_id) VALUES ('. $this->db->quote($acl_id) .', '. $this->db->quote($group_id) .')';\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\t$this->debug_db('add_acl');\n\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->db->CommitTrans();\n\n\t\tif ($this->_caching == TRUE AND $this->_force_cache_expire == TRUE) {\n\t\t\t//Expire all cache.\n\t\t\t$this->Cache_Lite->clean('default');\n\t\t}\n\n\t\t//Return only the ID in the first row.\n\t\treturn $acl_id;\n\t}\n\n\t/**\n\t * edit_acl()\n\t *\n\t * Edit's an ACL, ACO_IDS, ARO_IDS, GROUP_IDS must all be arrays.\n\t *\n\t * @return bool Return TRUE if successful, FALSE otherewise.\n\t *\n\t * @param int ACL ID # to edit\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t * @param array Array of Group IDs\n\t * @param int Allow flag\n\t * @param int Enabled flag\n\t * @param string Return Value\n\t * @param string Note\n\t * @param string ACL Section Value\n\t */\n\tfunction edit_acl($acl_id, $aco_array, $aro_array, $aro_group_ids=NULL, $axo_array=NULL, $axo_group_ids=NULL, $allow=1, $enabled=1, $return_value=NULL, $note=NULL, $section_value=NULL) {\n\n\t\t$this->debug_text(\"edit_acl():\");\n\n\t\tif (empty($acl_id) ) {\n\t\t\t$this->debug_text(\"edit_acl(): Must specify a single ACL_ID to edit\");\n\t\t\treturn false;\n\t\t}\n\t\tif (count($aco_array) == 0) {\n\t\t\t$this->debug_text(\"edit_acl(): Must select at least one Access Control Object\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (count($aro_array) == 0 AND count($aro_group_ids) == 0) {\n\t\t\t$this->debug_text(\"edit_acl(): Must select at least one Access Request Object or Group\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($allow)) {\n\t\t\t$allow=0;\n\t\t}\n\n\t\tif (empty($enabled)) {\n\t\t\t$enabled=0;\n\t\t}\n\n\t\t//if ($this->add_acl($aco_array, $aro_array, $group_ids, $allow, $enabled, $acl_id)) {\n\t\tif ($this->add_acl($aco_array, $aro_array, $aro_group_ids, $axo_array, $axo_group_ids, $allow, $enabled, $return_value, $note, $section_value, $acl_id)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$this->debug_text(\"edit_acl(): error in add_acl()\");\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * del_acl()\n\t *\n\t * Deletes a given ACL\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise.\n\t *\n\t * @param int ACL ID # to delete\n\t */\n\tfunction del_acl($acl_id) {\n\n\t\t$this->debug_text(\"del_acl(): ID: $acl_id\");\n\n\t\tif (empty($acl_id) ) {\n\t\t\t$this->debug_text(\"del_acl(): ACL_ID ($acl_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\n\t\t// Delete all mappings to the ACL first\n\t\tforeach (array('aco_map', 'aro_map', 'axo_map', 'aro_groups_map', 'axo_groups_map') as $map) {\n\t\t\t$query  = 'DELETE FROM '. $this->_db_table_prefix . $map .' WHERE acl_id='. $this->db->quote($acl_id);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('del_acl');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Delete the ACL\n\t\t$query  = 'DELETE FROM '. $this->_db_table_prefix .'acl WHERE id='. $this->db->quote($acl_id);\n\t\t$this->debug_text('delete query: '. $query);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('del_acl');\n\t\t\t$this->db->RollBackTrans();\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text(\"del_acl(): deleted ACL ID: $acl_id\");\n\t\t$this->db->CommitTrans();\n\n\t\tif ($this->_caching == TRUE AND $this->_force_cache_expire == TRUE) {\n\t\t\t//Expire all cache.\n\t\t\t$this->Cache_Lite->clean('default');\n\t\t}\n\n\t\treturn TRUE;\n\t}\n\n\n\t/*\n\t *\n\t * Groups\n\t *\n\t */\n\n\t/**\n\t * sort_groups()\n\t *\n\t * Grabs all the groups from the database doing preliminary grouping by parent\n\t *\n\t * @return array Returns 2-Dimensional array: $array[<parent_id>][<group_id>] = <group_name>\n\t *\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction sort_groups($group_type='ARO') {\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//Grab all groups from the database.\n\t\t$query  = 'SELECT id, parent_id, name FROM '. $table .' ORDER BY parent_id, name';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('sort_groups');\n\t\t\treturn false;\n\t\t}\n\n\t\t/*\n\t\t * Save groups in an array sorted by parent. Should be make it easier for later on.\n\t\t */\n\t\t$sorted_groups = array();\n\n\t\twhile ($row = $rs->FetchRow()) {\n\t\t\t$id = &$row[0];\n\t\t\t$parent_id = &$row[1];\n\t\t\t$name = &$row[2];\n\n\t\t\t$sorted_groups[$parent_id][$id] = $name;\n\t\t}\n\n\t\treturn $sorted_groups;\n\t}\n\n\t/**\n\t * format_groups()\n\t *\n\t * Takes the array returned by sort_groups() and formats for human\n\t * consumption. Recursively calls itself to produce the desired output.\n\t *\n\t * @return array Array of formatted text, ordered by group id, formatted according to $type\n\t *\n\t * @param array Output from gacl_api->sorted_groups($group_type)\n\t * @param array Output type desired, either 'TEXT', 'HTML', or 'ARRAY'\n\t * @param int Root of tree to produce\n\t * @param int Current level of depth\n\t * @param array Pass the current formatted groups object for appending via recursion.\n\t */\n\tfunction format_groups($sorted_groups, $type='TEXT', $root_id=0, $level=0, $formatted_groups=NULL) {\n\t\tif ( !is_array ($sorted_groups) ) {\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif ( !is_array ($formatted_groups) ) {\n\t\t\t$formatted_groups = array ();\n\t\t}\n\n\t\t//$this->showarray($formatted_groups);\n\n\t\tif (isset($sorted_groups[$root_id])) {\n\t\t\t//$last_id = end( array_keys($sorted_groups[$root_id]));\n\t\t\t//PHP5 compatibility\n\t\t\t$keys = array_keys($sorted_groups[$root_id]);\n\t\t\t$last_id = end($keys);\n\t\t\tunset($keys);\n\n\t\t\tforeach ($sorted_groups[$root_id] as $id => $name) {\n\t\t\t\tswitch (strtoupper($type)) {\n\t\t\t\t\tcase 'TEXT':\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Formatting optimized for TEXT (combo box) output.\n\t\t\t\t\t\t */\n\n\t\t\t\t\t\tif ( is_numeric($level) ) {\n\t\t\t\t\t\t\t$level = str_repeat('&nbsp;&nbsp; ', $level);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( strlen($level) >= 8 ) {\n\t\t\t\t\t\t\tif ( $id == $last_id ) {\n\t\t\t\t\t\t\t\t$spacing = substr($level, 0, -8) .'\\'- ';\n\t\t\t\t\t\t\t\t$level = substr($level, 0, -8) .'&nbsp;&nbsp; ';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$spacing = substr($level, 0, -8) .'|- ';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$spacing = $level;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$next = $level .'|&nbsp; ';\n\t\t\t\t\t\t$text = $spacing.htmlspecialchars($name,ENT_QUOTES);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HTML':\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Formatting optimized for HTML (tables) output.\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$width= $level * 20;\n\t\t\t\t\t\t$spacing = \"<img src=\\\"s.gif\\\" width=\\\"$width\\\">\";\n\t\t\t\t\t\t$next = $level + 1;\n\t\t\t\t\t\t$text = $spacing.\" \".htmlspecialchars($name,ENT_QUOTES);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ARRAY':\n\t\t\t\t\t\t$next = $level;\n\t\t\t\t\t\t$text = $name;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn FALSE;\n\t\t\t\t}\n\n\t\t\t\t$formatted_groups[$id] = $text;\n\t\t\t\t/*\n\t\t\t\t * Recurse if we can.\n\t\t\t\t */\n\n\t\t\t\t//if (isset($sorted_groups[$id]) AND count($sorted_groups[$id]) > 0) {\n\t\t\t\tif (isset($sorted_groups[$id]) ) {\n\t\t\t\t\t//$this->debug_text(\"format_groups(): Recursing! Level: $level\");\n\t\t\t\t\t$formatted_groups = $this->format_groups($sorted_groups, $type, $id, $next, $formatted_groups);\n\t\t\t\t} else {\n\t\t\t\t\t//$this->debug_text(\"format_groups(): Found last branch!\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//$this->debug_text(\"format_groups(): Returning final array.\");\n\n\t\treturn $formatted_groups;\n\t}\n\n\t/**\n\t * get_group_id()\n\t *\n\t * Gets the group_id given the name or value.\n\t *\n\t * Will only return one group id, so if there are duplicate names, it will return false.\n\t *\n\t * @return int Returns Group ID if found and Group ID is unique in database, otherwise, returns FALSE\n\t *\n\t * @param string Group Value\n\t * @param string Group Name\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction get_group_id($value = NULL, $name = NULL, $group_type = 'ARO') {\n\n\t\t$this->debug_text(\"get_group_id(): Value: $value, Name: $name, Type: $group_type\" );\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$name = trim($name);\n\t\t$value = trim($value);\n\n\t\tif (empty($name) AND empty($value) ) {\n\t\t\t$this->debug_text(\"get_group_id(): name and value, at least one is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query = 'SELECT id FROM '. $table .' WHERE ';\n\t\tif ( !empty($value) ) {\n\t\t  $query .= ' value='. $this->db->quote($value);\n\t\t} else {\n\t\t  $query .= ' name='. $this->db->quote($name);\n\t\t}\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_group_id');\n\t\t\treturn false;\n\t\t}\n\n\t\t$row_count = $rs->RecordCount();\n\n\t\tif ($row_count > 1) {\n\t\t\t$this->debug_text(\"get_group_id(): Returned $row_count rows, can only return one. Please make your names unique.\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($row_count == 0) {\n\t\t\t$this->debug_text(\"get_group_id(): Returned $row_count rows\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$row = $rs->FetchRow();\n\n\t\t//Return the ID.\n\t\treturn $row[0];\n\t}\n\n\t/**\n\t * get_group_children()\n\t *\n\t * Gets a groups child IDs\n\t *\n\t * @return array Array of Child ID's of the referenced group\n\t *\n\t * @param int Group ID #\n\t * @param int Group Type, either 'ARO' or 'AXO'\n\t * @param string Either 'RECURSE' or 'NO_RECURSE', to recurse while fetching group children.\n\t */\n\tfunction get_group_children($group_id, $group_type = 'ARO', $recurse = 'NO_RECURSE') {\n\t\t$this->debug_text(\"get_group_children(): Group_ID: $group_id Group Type: $group_type Recurse: $recurse\");\n\n\t\tswitch (strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t}\n\n\t\tif (empty($group_id)) {\n\t\t\t$this->debug_text(\"get_group_children(): ID ($group_id) is empty, this is required\");\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$query  = '\n\t\t\t\tSELECT\t\tg1.id\n\t\t\t\tFROM\t\t'. $table .' g1';\n\n\t\t//FIXME-mikeb: Why is group_id in quotes?\n\t\tswitch (strtoupper($recurse)) {\n\t\t\tcase 'RECURSE':\n\t\t\t\t$query .= '\n\t\t\t\tLEFT JOIN \t'. $table .' g2 ON g2.lft<g1.lft AND g2.rgt>g1.rgt\n\t\t\t\tWHERE\t\tg2.id='. $this->db->quote($group_id);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$query .= '\n\t\t\t\tWHERE\t\tg1.parent_id='. $this->db->quote($group_id);\n\t\t}\n\n\t\t$query .= '\n\t\t\t\tORDER BY\tg1.value';\n\n\t\treturn $this->db->GetCol($query);\n\t}\n\n\t/**\n\t * get_group_data()\n\t *\n\t * Gets the group data given the GROUP_ID.\n\t *\n\t * @return array Returns numerically indexed array with the following columns:\n\t *\t- array[0] = (int) Group ID #\n\t *\t- array[1] = (int) Parent Group ID #\n\t *\t- array[2] = (string) Group Value\n\t *\t- array[3] = (string) Group Name\n\t *\t- array[4] = (int) lft MPTT Value\n\t *\t- array[5] = (int) rgt MPTT Value\n\t *\n\t * @param int Group ID #\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction get_group_data($group_id, $group_type = 'ARO') {\n\n\t\t$this->debug_text(\"get_group_data(): Group_ID: $group_id Group Type: $group_type\");\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (empty($group_id) ) {\n\t\t\t$this->debug_text(\"get_group_data(): ID ($group_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query  = 'SELECT id, parent_id, value, name, lft, rgt FROM '. $table .' WHERE id='. $this->db->quote($group_id);\n\t\t//$rs = $this->db->Execute($query);\n\t\t$row = $this->db->GetRow($query);\n\n\t\tif ($row) {\n\t\t\treturn $row;\n\t\t}\n\n\t\t$this->debug_text(\"get_object_data(): Group does not exist.\");\n\t\treturn false;\n\t}\n\n\t/**\n\t * get_group_parent_id()\n\t *\n\t * Grabs the parent_id of a given group\n\t *\n\t * @return int Parent ID of the Group\n\t *\n\t * @param int Group ID #\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction get_group_parent_id($id, $group_type='ARO') {\n\n\t\t$this->debug_text(\"get_group_parent_id(): ID: $id Group Type: $group_type\");\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (empty($id) ) {\n\t\t\t$this->debug_text(\"get_group_parent_id(): ID ($id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query = 'SELECT parent_id FROM '. $table .' WHERE id='. $this->db->quote($id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_group_parent_id');\n\t\t\treturn false;\n\t\t}\n\n\t\t$row_count = $rs->RecordCount();\n\n\t\tif ($row_count > 1) {\n\t\t\t$this->debug_text(\"get_group_parent_id(): Returned $row_count rows, can only return one. Please make your names unique.\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($row_count == 0) {\n\t\t\t$this->debug_text(\"get_group_parent_id(): Returned $row_count rows\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$row = $rs->FetchRow();\n\n\t\t//Return the ID.\n\t\treturn $row[0];\n\t}\n\n\n\t/**\n\t * get_root_group_id ()\n\t *\n\t * Grabs the id of the root group for the specified tree\n\t *\n\t * @return int Root Group ID #\n\t *\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction get_root_group_id($group_type='ARO') {\n\n\t\t$this->debug_text('get_root_group_id(): Group Type: '. $group_type);\n\n\t\tswitch (strtolower($group_type)) {\n\t\t\tcase 'axo':\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_root_group_id(): Invalid Group Type: '. $group_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$query = 'SELECT id FROM '. $table .' WHERE parent_id=0';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_root_group_id');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$row_count = $rs->RecordCount();\n\n\t\tswitch ($row_count) {\n\t\t\tcase 1:\n\t\t\t\t$row = $rs->FetchRow();\n\t\t\t\t// Return the ID.\n\t\t\t\treturn $row[0];\n\t\t\tcase 0:\n\t\t\t\t$this->debug_text('get_root_group_id(): Returned 0 rows, you do not have a root group defined yet.');\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text('get_root_group_id(): Returned '. $row_count .' rows, can only return one. Your tree is very broken.');\n\t\treturn FALSE;\n\t}\n\n\t/*======================================================================*\\\n\t\tFunction:\tmap_path_to_root()\n\t\tPurpose:\tMaps a unique path to root to a specific group. Each group can only have\n\t\t\t\t\t\tone path to root.\n\t\\*======================================================================*/\n\t/** REMOVED **/\n\t/*======================================================================*\\\n\t\tFunction:\tput_path_to_root()\n\t\tPurpose:\tWrites the unique path to root to the database. There should really only be\n\t\t\t\t\t\tone path to root for each level \"deep\" the groups go. If the groups are branched\n\t\t\t\t\t\t10 levels deep, there should only be 10 unique path to roots. These of course\n\t\t\t\t\t\toverlap each other more and more the closer to the root/trunk they get.\n\t\\*======================================================================*/\n\t/** REMOVED **/\n\t/*======================================================================*\\\n\t\tFunction:\tclean_path_to_root()\n\t\tPurpose:\tCleans up any paths that are not being used.\n\t\\*======================================================================*/\n\t/** REMOVED **/\n\t/*======================================================================*\\\n\t\tFunction:\tget_path_to_root()\n\t\tPurpose:\tGenerates the path to root for a given group.\n\t\\*======================================================================*/\n\t/** REMOVED **/\n\n\t/**\n\t * add_group()\n\t *\n\t * Inserts a group, defaults to be on the \"root\" branch.\n\t *\n\t * Since v3.3.x you can only create one group with Parent_ID=0\n\t * So, its a good idea to create a \"Virtual Root\" group with Parent_ID=0\n\t * Then assign other groups to that.\n\t *\n\t * @return int New Group ID # if successful, FALSE if otherwise.\n\t *\n\t * @param string Group Value\n\t * @param string Group Name\n\t * @param int Parent Group ID #\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction add_group($value, $name, $parent_id=0, $group_type='ARO') {\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"add_group(): Name: $name Value: $value Parent ID: $parent_id Group Type: $group_type\");\n\n\t\t$name = trim($name);\n\t\t$value = trim($value);\n\n\t\tif ( $name == '' ) {\n\t\t\t$this->debug_text(\"add_group(): name ($name) OR parent id ($parent_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//This has to be outside the transaction, because the first time it is run, it will say the sequence\n\t\t//doesn't exist. Then try to create it, but the transaction will already by aborted by then.\n\t\t$insert_id = $this->db->GenID($this->_db_table_prefix.$group_type.'_groups_id_seq',10);\n\t\tif ( $value === '' ) {\n\t\t\t$value = $insert_id;\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\n\t\t// special case for root group\n\t\tif ($parent_id == 0) {\n\t\t\t// check a root group is not already defined\n\t\t\t$query = 'SELECT id FROM '. $table .' WHERE parent_id=0';\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('add_group');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\tif ($rs->RowCount() > 0) {\n\t\t\t\t$this->debug_text('add_group (): A root group already exists.');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$parent_lft = 0;\n\t\t\t$parent_rgt = 1;\n\t\t} else {\n\t\t\tif (empty($parent_id)) {\n\t\t\t\t$this->debug_text(\"add_group (): parent id ($parent_id) is empty, this is required\");\n\t\t\t\t$this->db->RollbackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t// grab parent details from database\n\t\t\t$query = 'SELECT id, lft, rgt FROM '. $table .' WHERE id='. $this->db->quote($parent_id);\n\t\t\t$row = $this->db->GetRow($query);\n\n\t\t\tif (!is_array($row)) {\n\t\t\t\t$this->debug_db('add_group');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\tif (empty($row)) {\n\t\t\t\t$this->debug_text('add_group (): Parent ID: '. $parent_id .' not found.');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$parent_lft = &$row[1];\n\t\t\t$parent_rgt = &$row[2];\n\n\t\t\t// make room for the new group\n\t\t\t$query  = 'UPDATE '. $table .' SET rgt=rgt+2 WHERE rgt>='. $this->db->quote($parent_rgt);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('add_group');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$query  = 'UPDATE '. $table .' SET lft=lft+2 WHERE lft>'. $this->db->quote($parent_rgt);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('add_group');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t$query = 'INSERT INTO '. $table .' (id,parent_id,name,value,lft,rgt) VALUES ('. $this->db->quote($insert_id) .','. $this->db->quote($parent_id) .','. $this->db->quote($name) .','. $this->db->quote($value) .','. $this->db->quote($parent_rgt) .','. $this->db->quote($parent_rgt + 1) .')';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('add_group');\n\t\t\t$this->db->RollBackTrans();\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->db->CommitTrans();\n\n\t\t$this->debug_text('add_group (): Added group as ID: '. $insert_id);\n\t\treturn $insert_id;\n\t}\n\n\t/**\n\t * get_group_objects()\n\t *\n\t * Gets all objects assigned to a group.\n\t *\n\t * If $option == 'RECURSE' it will get all objects in child groups as well.\n\t * defaults to omit child groups.\n\t *\n\t * @return array Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\n\t *\n\t * @param int Group ID #\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t * @param string Option, either 'RECURSE' or 'NO_RECURSE'\n\t */\n\tfunction get_group_objects($group_id, $group_type='ARO', $option='NO_RECURSE') {\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$object_table = $this->_db_table_prefix .'axo';\n\t\t\t\t$group_table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\t$map_table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$object_table = $this->_db_table_prefix .'aro';\n\t\t\t\t$group_table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\t$map_table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"get_group_objects(): Group ID: $group_id\");\n\n\t\tif (empty($group_id)) {\n\t\t\t$this->debug_text(\"get_group_objects(): Group ID:  ($group_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query  = '\n\t\t\t\tSELECT\t\to.section_value,o.value';\n\n\t\tif ($option == 'RECURSE') {\n\t\t\t$query .= '\n\t\t\t\tFROM\t\t'. $group_table .' g2\n\t\t\t\tJOIN\t\t'. $group_table .' g1 ON g1.lft>=g2.lft AND g1.rgt<=g2.rgt\n\t\t\t\tJOIN\t\t'. $map_table .' gm ON gm.group_id=g1.id\n\t\t\t\tJOIN\t\t'. $object_table .' o ON o.id=gm.'. $group_type .'_id\n\t\t\t\tWHERE\t\tg2.id='. $this->db->quote($group_id);\n\t\t} else {\n\t\t\t$query .= '\n\t\t\t\tFROM\t\t'. $map_table .' gm\n\t\t\t\tJOIN\t\t'. $object_table .' o ON o.id=gm.'. $group_type .'_id\n\t\t\t\tWHERE\t\tgm.group_id='. $this->db->quote($group_id);\n\t\t}\n\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_group_objects');\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text(\"get_group_objects(): Got group objects, formatting array.\");\n\n\t\t$retarr = array();\n\n\t\t//format return array.\n\t\twhile ($row = $rs->FetchRow()) {\n\t\t\t$section = &$row[0];\n\t\t\t$value = &$row[1];\n\n\t\t\t$retarr[$section][] = $value;\n\t\t}\n\n\t\treturn $retarr;\n\t}\n\n\t/**\n\t * add_group_object()\n\t *\n\t * Assigns an Object to a group\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise.\n\t *\n\t * @param int Group ID #\n\t * @param string Object Section Value\n\t * @param string Object Value\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction add_group_object($group_id, $object_section_value, $object_value, $group_type='ARO') {\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\t$object_table = $this->_db_table_prefix .'axo';\n\t\t\t\t$group_table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\t$object_table = $this->_db_table_prefix .'aro';\n\t\t\t\t$group_table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"add_group_object(): Group ID: $group_id Section Value: $object_section_value Value: $object_value Group Type: $group_type\");\n\n\t\t$object_section_value = trim($object_section_value);\n\t\t$object_value = trim($object_value);\n\n\t\tif (empty($group_id) OR empty($object_value) OR empty($object_section_value)) {\n\t\t\t$this->debug_text(\"add_group_object(): Group ID: ($group_id) OR Value ($object_value) OR Section value ($object_section_value) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t// test to see if object & group exist and if object is already a member\n\t\t$query  = '\n\t\t\t\tSELECT\t\to.id AS id,g.id AS group_id,gm.group_id AS `member`\n\t\t\t\tFROM\t\t'. $object_table .' o\n\t\t\t\tLEFT JOIN\t'. $group_table .' g ON g.id='. $this->db->quote($group_id) .'\n\t\t\t\tLEFT JOIN\t'. $table .' gm ON (gm.'. $group_type .'_id=o.id AND gm.group_id=g.id)\n\t\t\t\tWHERE\t\t(o.section_value='. $this->db->quote($object_section_value) .' AND o.value='. $this->db->quote($object_value) .')';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('add_group_object');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif ($rs->RecordCount() != 1) {\n\t\t\t$this->debug_text('add_group_object(): Value ('. $object_value .') OR Section value ('. $object_section_value .') is invalid. Does this object exist?');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$row = $rs->FetchRow();\n\n\t\tif ($row[1] != $group_id) {\n\t\t\t$this->debug_text('add_group_object(): Group ID ('. $group_id .') is invalid. Does this group exist?');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t//Group_ID == Member\n\t\tif ($row[1] == $row[2]) {\n\t\t\t$this->debug_text('add_group_object(): Object: ('. $object_section_value .' -> '. $object_value .') is already a member of Group: ('. $group_id .')');\n\t\t\t//Object is already assigned to group. Return true.\n\t\t\treturn TRUE;\n\t\t}\n\n\t\t$object_id = $row[0];\n\n\t\t$query = 'INSERT INTO '. $table .' (group_id,'. $group_type .'_id) VALUES ('. $this->db->quote($group_id) .','. $this->db->quote($object_id) .')';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('add_group_object');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text('add_group_object(): Added Object: '. $object_id .' to Group ID: '. $group_id);\n\n\t\tif ($this->_caching == TRUE AND $this->_force_cache_expire == TRUE) {\n\t\t\t//Expire all cache.\n\t\t\t$this->Cache_Lite->clean('default');\n\t\t}\n\n\t\treturn TRUE;\n\t}\n\n\t/**\n\t * del_group_object()\n\t *\n\t * Removes an Object from a group.\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t * @param int Group ID #\n\t * @param string Object Section Value\n\t * @param string Object Value\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction del_group_object($group_id, $object_section_value, $object_value, $group_type='ARO') {\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"del_group_object(): Group ID: $group_id Section value: $object_section_value Value: $object_value\");\n\n\t\t$object_section_value = trim($object_section_value);\n\t\t$object_value = trim($object_value);\n\n\t\tif (empty($group_id) OR empty($object_value) OR empty($object_section_value)) {\n\t\t\t$this->debug_text(\"del_group_object(): Group ID:  ($group_id) OR Section value: $object_section_value OR Value ($object_value) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n \t\tif (!$object_id = $this->get_object_id($object_section_value, $object_value, $group_type)) {\n\t\t\t$this->debug_text (\"del_group_object (): Group ID ($group_id) OR Value ($object_value) OR Section value ($object_section_value) is invalid. Does this object exist?\");\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$query = 'DELETE FROM '. $table .' WHERE group_id='. $this->db->quote($group_id) .' AND '. $group_type .'_id='. $this->db->quote($object_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('del_group_object');\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text(\"del_group_object(): Deleted Value: $object_value to Group ID: $group_id assignment\");\n\n\t\tif ($this->_caching == TRUE AND $this->_force_cache_expire == TRUE) {\n\t\t\t//Expire all cache.\n\t\t\t$this->Cache_Lite->clean('default');\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * edit_group()\n\t *\n\t * Edits a group\n\t *\n\t * @returns bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t * @param int Group ID #\n\t * @param string Group Value\n\t * @param string Group Name\n\t * @param int Parent ID #\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction edit_group($group_id, $value=NULL, $name=NULL, $parent_id=NULL, $group_type='ARO') {\n\t\t$this->debug_text(\"edit_group(): ID: $group_id Name: $name Value: $value Parent ID: $parent_id Group Type: $group_type\");\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (empty($group_id) ) {\n\t\t\t$this->debug_text('edit_group(): Group ID ('. $group_id .') is empty, this is required');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif ( !is_array($curr = $this->get_group_data($group_id, $group_type)) ) {\n\t\t\t$this->debug_text('edit_group(): Invalid Group ID: '. $group_id);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$name = trim($name);\n\n\t\t// don't set name if it is unchanged\n\t\tif ($name == $curr[3]) {\n\t\t\tunset($name);\n\t\t}\n\n\t\t// don't set parent_id if it is unchanged\n\t\tif ($parent_id == $curr[1]) {\n\t\t\tunset($parent_id);\n\t\t}\n\n\t\tif (!empty($parent_id)) {\n\t\t\tif ($group_id == $parent_id) {\n\t\t\t\t$this->debug_text('edit_group(): Groups can\\'t be a parent to themselves. Incest is bad. ;)');\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t//Make sure we don't re-parent to our own children.\n\t\t\t//Grab all children of this group_id.\n\t\t\t$children_ids = $this->get_group_children($group_id, $group_type, 'RECURSE');\n\t\t\tif (is_array($children_ids)) {\n\t\t\t\tif (@in_array($parent_id, $children_ids) ) {\n\t\t\t\t\t$this->debug_text('edit_group(): Groups can\\'t be re-parented to their own children, this would be incestuous!');\n\t\t\t\t\treturn FALSE;\n\t\t\t\t}\n\t\t\t}\n\t\t\tunset($children_ids);\n\n\t\t\t// make sure parent exists\n\t\t\tif (!$this->get_group_data($parent_id, $group_type)) {\n\t\t\t\t$this->debug_text('edit_group(): Parent Group ('. $parent_id .') doesn\\'t exist');\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t$set = array();\n\n\t\t// update name if it is specified.\n\t\tif (!empty($name)) {\n\t\t\t$set[] = 'name='. $this->db->quote($name);\n\t\t}\n\n\t\t// update parent_id if it is specified.\n\t\tif (!empty($parent_id)) {\n\t\t\t$set[] = 'parent_id='. $this->db->quote($parent_id);\n\t\t}\n\n\t\t// update value if it is specified.\n\t\tif (!empty($value)) {\n\t\t\t$set[] = 'value='. $this->db->quote($value);\n\t\t}\n\n\t\tif (empty($set)) {\n\t\t\t$this->debug_text('edit_group(): Nothing to update.');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\n\t\t$query  = 'UPDATE '. $table .' SET '. implode(',', $set) .' WHERE id='. $this->db->quote($group_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('edit_group');\n\t\t\t$this->db->RollbackTrans();\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text('edit_group(): Modified group ID: '. $group_id);\n\n\t\t// rebuild group tree if parent_id has changed\n\t\tif (!empty($parent_id)) {\n\t\t\tif (!$this->_rebuild_tree($table, $this->get_root_group_id($group_type))) {\n\t\t\t\t$this->db->RollbackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t$this->db->CommitTrans();\n\n\t\tif ($this->_caching == TRUE AND $this->_force_cache_expire == TRUE) {\n\t\t\t// Expire all cache.\n\t\t\t$this->Cache_Lite->clean('default');\n\t\t}\n\n\t\treturn TRUE;\n\t}\n\n\t/**\n\t * rebuild_tree ()\n\t *\n\t * rebuilds the group tree for the given type\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t * @param int Group ID #\n\t * @param int Left value of Group\n\t */\n\tfunction rebuild_tree($group_type = 'ARO', $group_id = NULL, $left = 1) {\n\t\t$this->debug_text(\"rebuild_tree(): Group Type: $group_type Group ID: $group_id Left: $left\");\n\n\t\tswitch (strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!isset($group_id)) {\n\t\t\tif ($group_id = $this->get_root_group_id($group_type)) {\n\t\t\t\t$left = 1;\n\t\t\t\t$this->debug_text('rebuild_tree(): No Group ID Specified, using Root Group ID: '. $group_id);\n\t\t\t} else {\n\t\t\t\t$this->debug_text('rebuild_tree(): A Root group could not be found, are there any groups defined?');\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\t\t$rebuilt = $this->_rebuild_tree($table, $group_id, $left);\n\n\t\tif ($rebuilt === FALSE) {\n\t\t\t$this->debug_text('rebuild_tree(): Error rebuilding tree!');\n\t\t\t$this->db->RollBackTrans();\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->db->CommitTrans();\n\t\t$this->debug_text('rebuild_tree(): Tree rebuilt.');\n\t\treturn TRUE;\n\t}\n\t/**\n\t * _rebuild_tree ()\n\t *\n\t * Utility recursive function called by rebuild_tree()\n\t *\n\t * @return int Returns right value of this node + 1\n\t *\n\t * @param string Table name of group type\n\t * @param int Group ID #\n\t * @param int Left value of Group\n\t */\n\tfunction _rebuild_tree($table, $group_id, $left = 1) {\n\t\t$this->debug_text(\"_rebuild_tree(): Table: $table Group ID: $group_id Left: $left\");\n\n\t\t// get all children of this node\n\t\t$query = 'SELECT id FROM '. $table .' WHERE parent_id='. $this->db->quote($group_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('_rebuild_tree');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t// the right value of this node is the left value + 1\n\t\t$right = $left + 1;\n\n\t\twhile ($row = $rs->FetchRow()) {\n\t\t\t// recursive execution of this function for each\n\t\t\t// child of this node\n\t\t\t// $right is the current right value, which is\n\t\t\t// incremented by the rebuild_tree function\n\t\t\t$right = $this->_rebuild_tree($table, $row[0], $right);\n\n\t\t\tif ($right === FALSE) {\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t// we've got the left value, and now that we've processed\n\t\t// the children of this node we also know the right value\n\t\t$query  = 'UPDATE '. $table .' SET lft='. $this->db->quote($left) .', rgt='. $this->db->quote($right) .' WHERE id='. $this->db->quote($group_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('_rebuild_tree');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t// return the right value of this node + 1\n\t\treturn $right + 1;\n\t}\n\n\t/**\n\t * del_group()\n\t *\n\t * deletes a given group\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise.\n\t *\n\t * @param int Group ID #\n\t * @param bool If TRUE, child groups of this group will be reparented to the current group's parent.\n\t * @param string Group Type, either 'ARO' or 'AXO'\n\t */\n\tfunction del_group($group_id, $reparent_children=TRUE, $group_type='ARO') {\n\n\t\tswitch(strtolower(trim($group_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\t$groups_map_table = $this->_db_table_prefix .'axo_groups_map';\n\t\t\t\t$groups_object_map_table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\t$groups_map_table = $this->_db_table_prefix .'aro_groups_map';\n\t\t\t\t$groups_object_map_table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"del_group(): ID: $group_id Reparent Children: $reparent_children Group Type: $group_type\");\n\n\t\tif (empty($group_id) ) {\n\t\t\t$this->debug_text(\"del_group(): Group ID ($group_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t// Get details of this group\n\t\t$query = 'SELECT id, parent_id, name, lft, rgt FROM '. $table .' WHERE id='. $this->db->quote($group_id);\n\t\t$group_details = $this->db->GetRow($query);\n\n\t\tif (!is_array($group_details)) {\n\t\t\t$this->debug_db('del_group');\n\t\t\treturn false;\n\t\t}\n\n\t\t$parent_id = $group_details[1];\n\n\t\t$left = $group_details[3];\n\t\t$right = $group_details[4];\n\n\t\t$this->db->BeginTrans();\n\n\t\t// grab list of all children\n\t\t$children_ids = $this->get_group_children($group_id, $group_type, 'RECURSE');\n\n\t\t// prevent deletion of root group & reparent of children if it has more than one immediate child\n\t\tif ($parent_id == 0) {\n\t\t\t$query = 'SELECT count(*) FROM '. $table .' WHERE parent_id='. $this->db->quote($group_id);\n\t\t\t$child_count = $this->db->GetOne($query);\n\n\t\t\tif (($child_count > 1) AND $reparent_children) {\n\t\t\t\t$this->debug_text ('del_group (): You cannot delete the root group and reparent children, this would create multiple root groups.');\n\t\t\t\t$this->db->RollbackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\t\t}\n\n\t\t$success = FALSE;\n\n\t\t/*\n\t\t * Handle children here.\n\t\t */\n\t\tswitch (TRUE) {\n\t\t\t// there are no child groups, just delete group\n\t\t\tcase !is_array($children_ids):\n\t\t\tcase count($children_ids) == 0:\n\t\t\t\t// remove acl maps\n\t\t\t\t$query = 'DELETE FROM '. $groups_map_table .' WHERE group_id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// remove group object maps\n\t\t\t\t$query = 'DELETE FROM '. $groups_object_map_table .' WHERE group_id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// remove group\n\t\t\t\t$query = 'DELETE FROM '. $table .' WHERE id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// move all groups right of deleted group left by width of deleted group\n\t\t\t\t$query = 'UPDATE '. $table .' SET lft=lft-' . ($right-$left+1) . ' WHERE lft>'. $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$query = 'UPDATE '. $table .' SET rgt=rgt-' . ($right-$left+1) . ' WHERE rgt>'. $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$success = TRUE;\n\t\t\t\tbreak;\n\t\t\tcase $reparent_children == TRUE:\n\t\t\t\t// remove acl maps\n\t\t\t\t$query = 'DELETE FROM '. $groups_map_table .' WHERE group_id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// remove group object maps\n\t\t\t\t$query = 'DELETE FROM '. $groups_object_map_table .' WHERE group_id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// remove group\n\t\t\t\t$query = 'DELETE FROM '. $table .' WHERE id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// set parent of immediate children to parent group\n\t\t\t\t$query = 'UPDATE '. $table .' SET parent_id='. $this->db->quote($parent_id) .' WHERE parent_id='. $this->db->quote($group_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// move all children left by 1\n\t\t\t\t$query = 'UPDATE '. $table .' SET lft=lft-1, rgt=rgt-1 WHERE lft>'. $this->db->quote($left) .' AND rgt<'. $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// move all groups right of deleted group left by 2\n\t\t\t\t$query = 'UPDATE '. $table .' SET lft=lft-2 WHERE lft>'. $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$query = 'UPDATE '. $table .' SET rgt=rgt-2 WHERE rgt>'. $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$success = TRUE;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// make list of group and all children\n\t\t\t\t$group_ids = $children_ids;\n\t\t\t\t$group_ids[] = $group_id;\n\n\t\t\t\t// remove acl maps\n\t\t\t\t$query = 'DELETE FROM '. $groups_map_table .' WHERE group_id IN ('. implode (',', $group_ids) .')';\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// remove group object maps\n\t\t\t\t$query = 'DELETE FROM '. $groups_object_map_table .' WHERE group_id IN ('. implode (',', $group_ids) .')';\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// remove groups\n\t\t\t\t$query = 'DELETE FROM '. $table .' WHERE id IN ('. implode (',', $group_ids) .')';\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// move all groups right of deleted group left by width of deleted group\n\t\t\t\t$query = 'UPDATE '. $table .' SET lft=lft-'. ($right - $left + 1) . ' WHERE lft>' . $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$query = 'UPDATE '. $table .' SET rgt=rgt-'. ($right - $left + 1) . ' WHERE rgt>' . $this->db->quote($right);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$success = TRUE;\n\t\t}\n\n\t\t// if the delete failed, rollback the trans and return false\n\t\tif (!$success) {\n\n\t\t\t$this->debug_db('del_group');\n\t\t\t$this->db->RollBackTrans();\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text(\"del_group(): deleted group ID: $group_id\");\n\t\t$this->db->CommitTrans();\n\n\t\tif ($this->_caching == TRUE AND $this->_force_cache_expire == TRUE) {\n\t\t\t//Expire all cache.\n\t\t\t$this->Cache_Lite->clean('default');\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\n\t/*\n\t *\n\t * Objects (ACO/ARO/AXO)\n\t *\n\t */\n\n\t/**\n\t * get_object()\n\t *\n\t * Grabs all Objects's in the database, or specific to a section_value\n\t *\n\t * @return ADORecordSet  Returns recordset directly, with object ID only selected:\n\t *\n\t * @param string Filter to this section value\n\t * @param int Returns hidden objects if 1, leaves them out otherwise.\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO', or 'ACL'\n\t */\n\tfunction get_object($section_value = null, $return_hidden=1, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\tbreak;\n\t\t\tcase 'acl':\n\t\t\t\t$object_type = 'acl';\n\t\t\t\t$table = $this->_db_table_prefix .'acl';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_object(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"get_object(): Section Value: $section_value Object Type: $object_type\");\n\n\t\t$query = 'SELECT id FROM '. $table;\n\n\t\t$where = array();\n\n\t\tif (!empty($section_value)) {\n\t\t\t$where[] = 'section_value='. $this->db->quote($section_value);\n\t\t}\n\n\t\tif ($return_hidden==0 AND $object_type != 'acl') {\n\t\t\t$where[] = 'hidden=0';\n\t\t}\n\n\t\tif (!empty($where)) {\n\t\t\t$query .= ' WHERE '. implode(' AND ', $where);\n\t\t}\n\n\t\t$rs = $this->db->GetCol($query);\n\n\t\tif (!is_array($rs)) {\n\t\t\t$this->debug_db('get_object');\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return Object IDs\n\t\treturn $rs;\n\t}\n\t/**\n\t * get_ungrouped_objects()\n\t *\n\t * Grabs ID's of all Objects (ARO's and AXO's only) in the database not assigned to a Group.\n\t *\n\t * This function is useful for applications that synchronize user databases with an outside source.\n\t * If syncrhonization doesn't automatically place users in an appropriate group, this function can\n\t * quickly identify them so that they can be assigned to the correct group.\n\t *\n\t * @return array Returns an array of object ID's\n\t *\n\t * @param int Returns hidden objects if 1, does not if 0.\n\t * @param string Object Type, either 'ARO' or 'AXO' (groupable types)\n\t */\n\n\tfunction get_ungrouped_objects($return_hidden=1, $object_type=NULL) {\n\n\t\t   switch(strtolower(trim($object_type))) {\n\t\t\t\t   case 'aro':\n\t\t\t\t\t\t   $object_type = 'aro';\n\t\t\t\t\t\t   $table = $this->_db_table_prefix .'aro';\n\t\t\t\t\t\t   break;\n\t\t\t\t   case 'axo':\n\t\t\t\t\t\t   $object_type = 'axo';\n\t\t\t\t\t\t   $table = $this->_db_table_prefix .'axo';\n\t\t\t\t\t\t   break;\n\t\t\t\t   default:\n\t\t\t\t\t\t   $this->debug_text('get_ungrouped_objects(): Invalid Object Type: '. $object_type);\n\t\t\t\t\t\t   return FALSE;\n\t\t   }\n\n\t\t   $this->debug_text(\"get_ungrouped_objects(): Object Type: $object_type\");\n\n\t\t\t$query = 'SELECT id FROM '. $table. ' a\n\t\t\t\t\t\t\tLEFT JOIN ' . $this->_db_table_prefix. 'groups_'.$object_type.'_map b ON a.id = b.'. $object_type .'_id';\n\n\t\t   $where = array();\n\t\t   $where[] = 'b.group_id IS NULL';\n\n\t\t   if ($return_hidden==0) {\n\t\t\t\t   $where[] = 'a.hidden=0';\n\t\t   }\n\n\t\t   if (!empty($where)) {\n\t\t\t\t   $query .= ' WHERE '. implode(' AND ', $where);\n\t\t   }\n\n\t\t   $rs = $this->db->Execute($query);\n\n\t\t   if (!is_object($rs)) {\n\t\t\t\t   $this->debug_db('get_ungrouped_objects');\n\t\t\t\t   return false;\n\t\t   }\n\n\t\t   while(!$rs->EOF) {\n\t\t\t\t   $retarr[] = $rs->fields[0];\n\t\t\t\t   $rs->MoveNext();\n\t\t   }\n\n\t\t   // Return Array of object IDS\n\t\t   return $retarr;\n\t}\n\n\n\t/**\n\t * get_objects ()\n\t *\n\t * Grabs all Objects in the database, or specific to a section_value\n\t *\n\t * @return array Returns objects in format suitable for add_acl and is_conflicting_acl\n\t *\t- i.e. Associative array, item={Section Value}, key={Array of Object Values} i.e. [\"<Section Value>\" => [\"<Value 1>\", \"<Value 2>\", \"<Value 3>\"], ...]\n\t *\n\t * @param string Filter for section value\n\t * @param int Returns hidden objects if 1, does not if 0\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO'\n\t */\n\tfunction get_objects($section_value = NULL, $return_hidden = 1, $object_type = NULL) {\n\t\tswitch (strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_objects(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"get_objects(): Section Value: $section_value Object Type: $object_type\");\n\n\t\t$query = 'SELECT section_value,value FROM '. $table;\n\n\t\t$where = array();\n\n\t\tif (!empty($section_value)) {\n\t\t\t$where[] = 'section_value='. $this->db->quote($section_value);\n\t\t}\n\n\t\tif ($return_hidden==0) {\n\t\t\t$where[] = 'hidden=0';\n\t\t}\n\n\t\tif (!empty($where)) {\n\t\t\t$query .= ' WHERE '. implode(' AND ', $where);\n\t\t}\n\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_objects');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$retarr = array();\n\n\t\twhile ($row = $rs->FetchRow()) {\n\t\t\t$retarr[$row[0]][] = $row[1];\n\t\t}\n\n\t\t// Return objects\n\t\treturn $retarr;\n\t}\n\n\t/**\n\t * get_object_data()\n\t *\n\t * Gets all data pertaining to a specific Object.\n\t *\n\t * @return array Returns 2-Dimensional array of rows with columns = ( section_value, value, order_value, name, hidden )\n\t *\n\t * @param int Object ID #\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO'\n\t */\n\tfunction get_object_data($object_id, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_object_data(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"get_object_data(): Object ID: $object_id Object Type: $object_type\");\n\n\t\tif (empty($object_id) ) {\n\t\t\t$this->debug_text(\"get_object_data(): Object ID ($object_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"get_object_data(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query  = 'SELECT section_value,value,order_value,name,hidden FROM '. $table .' WHERE id='. $this->db->quote($object_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_object_data');\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($rs->RecordCount() < 1) {\n\t\t\t$this->debug_text('get_object_data(): Returned  '. $row_count .' rows');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t// Return all objects\n\t\treturn $rs->GetRows();\n\t}\n\n\t/**\n\t * get_object_id()\n\t *\n\t * Gets the object_id given the section_value AND value of the object.\n\t *\n\t * @return int Object ID #\n\t *\n\t * @param string Object Section Value\n\t * @param string Object Value\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO'\n\t */\n\tfunction get_object_id($section_value, $value, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_object_id(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"get_object_id(): Section Value: $section_value Value: $value Object Type: $object_type\");\n\n\t\t$section_value = trim($section_value);\n\t\t$value = trim($value);\n\n\t\tif (empty($section_value) AND empty($value) ) {\n\t\t\t$this->debug_text(\"get_object_id(): Section Value ($value) AND value ($value) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"get_object_id(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query = 'SELECT id FROM '. $table .' WHERE section_value='. $this->db->quote($section_value) .' AND value='. $this->db->quote($value);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_object_id');\n\t\t\treturn false;\n\t\t}\n\n\t\t$row_count = $rs->RecordCount();\n\n\t\tif ($row_count > 1) {\n\t\t\t$this->debug_text(\"get_object_id(): Returned $row_count rows, can only return one. This should never happen, the database may be missing a unique key.\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($row_count == 0) {\n\t\t\t$this->debug_text(\"get_object_id(): Returned $row_count rows\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$row = $rs->FetchRow();\n\n\t\t//Return the ID.\n\t\treturn $row[0];\n\t}\n\n\t/**\n\t * get_object_section_value()\n\t *\n\t * Gets the object_section_value given object id\n\t *\n\t * @return string Object Section Value\n\t *\n\t * @param int Object ID #\n\t * @param string Object Type, either 'ACO', 'ARO', or 'AXO'\n\t */\n\tfunction get_object_section_value($object_id, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_object_section_value(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"get_object_section_value(): Object ID: $object_id Object Type: $object_type\");\n\n\t\tif (empty($object_id) ) {\n\t\t\t$this->debug_text(\"get_object_section_value(): Object ID ($object_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"get_object_section_value(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query = 'SELECT section_value FROM '. $table .' WHERE id='. $object_id;\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_object_section_value');\n\t\t\treturn false;\n\t\t}\n\n\t\t$row_count = $rs->RecordCount();\n\n\t\tif ($row_count > 1) {\n\t\t\t$this->debug_text(\"get_object_section_value(): Returned $row_count rows, can only return one.\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($row_count == 0) {\n\t\t\t$this->debug_text(\"get_object_section_value(): Returned $row_count rows\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$row = $rs->FetchRow();\n\n\t\t//Return the ID.\n\t\treturn $row[0];\n\t}\n\n\t/**\n\t * get_object_groups()\n\t *\n\t * Gets all groups an object is a member of.\n\t *\n\t * If $option == 'RECURSE' it will get all ancestor groups.\n\t * defaults to only get direct parents.\n\t *\n\t * @return array Array of Group ID #'s, or FALSE if Failed\n\t *\n\t * @param int Object ID #\n\t * @param string Object Type, either 'ARO' or 'AXO'\n\t * @param string Option, either 'RECURSE', or 'NO_RECURSE'\n\t */\n\tfunction get_object_groups($object_id, $object_type = 'ARO', $option = 'NO_RECURSE') {\n\t\t$this->debug_text('get_object_groups(): Object ID: '. $object_id .' Object Type: '. $object_type .' Option: '. $option);\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$group_table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\t$map_table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$group_table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\t$map_table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_object_groups(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\tif (empty($object_id)) {\n\t\t\t$this->debug_text('get_object_groups(): Object ID: ('. $object_id .') is empty, this is required');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif (strtoupper($option) == 'RECURSE') {\n\t\t    $query = '\n\t\t\t\tSELECT\t\tDISTINCT g.id AS group_id\n\t\t\t\tFROM\t\t'. $map_table .' gm\n\t\t\t\tLEFT JOIN\t'. $group_table .' g1 ON g1.id=gm.group_id\n\t\t\t\tLEFT JOIN\t'. $group_table .' g ON g.lft<=g1.lft AND g.rgt>=g1.rgt';\n\t\t} else {\n\t\t    $query = '\n\t\t    \tSELECT\t\tgm.group_id\n\t\t    \tFROM\t\t'. $map_table .' gm';\n\t\t}\n\n\t\t$query .= '\n\t\t\t\tWHERE\t\tgm.'. $object_type .'_id='. $this->db->quote($object_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_object_groups');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$retarr = array();\n\n\t\twhile ($row = $rs->FetchRow()) {\n\t\t\t$retarr[] = $row[0];\n\t\t}\n\n\t\treturn $retarr;\n\t}\n\n\t/**\n\t * add_object()\n\t *\n\t * Inserts a new object\n\t *\n\t * @return int Returns the ID # of the new object if successful, FALSE otherwise\n\t *\n\t * @param string Object Section Value\n\t * @param string Object Name\n\t * @param string Object Value\n\t * @param int Display Order\n\t * @param int Hidden Flag, either 1 to hide, or 0 to show.\n\t * @param string Object Type, either 'ACO', 'ARO', or 'AXO'\n\t */\n\tfunction add_object($section_value, $name, $value=0, $order=0, $hidden=0, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aco_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aro_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'axo_sections';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('add_object(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"add_object(): Section Value: $section_value Value: $value Order: $order Name: $name Object Type: $object_type\");\n\n\t\t$section_value = trim($section_value);\n\t\t$name = trim($name);\n\t\t$value = trim($value);\n\t\t$order = trim($order);\n\t\t$hidden = intval($hidden);\n\n\t\tif ($order == NULL OR $order == '') {\n\t\t\t$order = 0;\n\t\t}\n\n\t\tif (empty($name) OR empty($section_value) ) {\n\t\t\t$this->debug_text(\"add_object(): name ($name) OR section value ($section_value) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (strlen($name) >= 255 OR strlen($value) >= 230 ) {\n\t\t\t$this->debug_text(\"add_object(): name ($name) OR value ($value) is too long.\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"add_object(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t// Test to see if the section is invalid or object already exists.\n\t\t$query  = '\n\t\t\tSELECT\t\tCASE WHEN o.id IS NULL THEN 0 ELSE 1 END AS object_exists\n\t\t\tFROM\t\t'. $object_sections_table .' s\n\t\t\tLEFT JOIN\t'. $table .' o ON (s.value=o.section_value AND o.value='. $this->db->quote($value) .')\n\t\t\tWHERE\t\ts.value='. $this->db->quote($section_value);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('add_object');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif ($rs->RecordCount() != 1) {\n\t\t\t// Section is invalid\n\t\t\t$this->debug_text(\"add_object(): Section Value: $section_value Object Type ($object_type) does not exist, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$row = $rs->FetchRow();\n\n\t\tif ($row[0] == 1) {\n\t\t\t//Object is already created.\n\t\t\treturn true;\n\t\t}\n\n\t\t$insert_id = $this->db->GenID($this->_db_table_prefix.$object_type.'_seq',10);\n\t\t$query = 'INSERT INTO '. $table .' (id,section_value,value,order_value,name,hidden) VALUES('. $this->db->quote($insert_id) .','. $this->db->quote($section_value) .','. $this->db->quote($value) .','. $this->db->quote($order) .','. $this->db->quote($name) .','. $this->db->quote($hidden) .')';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('add_object');\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text(\"add_object(): Added object as ID: $insert_id\");\n\t\treturn $insert_id;\n\t}\n\n\t/**\n\t * edit_object()\n\t *\n\t * Edits a given Object\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t * @param int Object ID #\n\t * @param string Object Section Value\n\t * @param string Object Name\n\t * @param string Object Value\n\t * @param int Display Order\n\t * @param int Hidden Flag, either 1 to hide, or 0 to show\n\t * @param string Object Type, either 'ACO', 'ARO', or 'AXO'\n\t */\n\tfunction edit_object($object_id, $section_value, $name, $value=0, $order=0, $hidden=0, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'aco_map';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'aro_map';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'axo_map';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"edit_object(): ID: $object_id Section Value: $section_value Value: $value Order: $order Name: $name Object Type: $object_type\");\n\n\t\t$section_value = trim($section_value);\n\t\t$name = trim($name);\n\t\t$value = trim($value);\n\t\t$order = trim($order);\n\t\t$hidden = intval($hidden);\n\n\t\tif (empty($object_id) OR empty($section_value) ) {\n\t\t\t$this->debug_text(\"edit_object(): Object ID ($object_id) OR Section Value ($section_value) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($name) ) {\n\t\t\t$this->debug_text(\"edit_object(): name ($name) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"edit_object(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\n\t\t//Get old value incase it changed, before we do the update.\n\t\t$query = 'SELECT value, section_value FROM '. $table .' WHERE id='. $object_id;\n\t\t$old = $this->db->GetRow($query);\n\n\t\t$query  = '\n\t\t\tUPDATE\t'. $table .'\n\t\t\tSET\t\tsection_value='. $this->db->quote($section_value) .',\n\t\t\t\t\tvalue='. $this->db->quote($value) .',\n\t\t\t\t\torder_value='. $this->db->quote($order) .',\n\t\t\t\t\tname='. $this->db->quote($name) .',\n\t\t\t\t\thidden='. $this->db->quote($hidden) .'\n\t\t\tWHERE\tid='. $this->db->quote($object_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('edit_object');\n\t\t\t$this->db->RollbackTrans();\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->debug_text('edit_object(): Modified '. strtoupper($object_type) .' ID: '. $object_id);\n\n\t\tif ($old[0] != $value OR $old[1] != $section_value) {\n\t\t\t$this->debug_text(\"edit_object(): Value OR Section Value Changed, update other tables.\");\n\n\t\t\t$query  = '\n\t\t\t\tUPDATE\t'. $object_map_table .'\n\t\t\t\tSET\t\tvalue='. $this->db->quote($value) .',\n\t\t\t\t\t\tsection_value='. $this->db->quote($section_value) .'\n\t\t\t\tWHERE\tsection_value='. $this->db->quote($old[1]) .'\n\t\t\t\t\tAND\tvalue='. $this->db->quote($old[0]);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('edit_object');\n\t\t\t\t$this->db->RollbackTrans();\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$this->debug_text ('edit_object(): Modified Map Value: '. $value .' Section Value: '. $section_value);\n\t\t}\n\n\t\t$this->db->CommitTrans();\n\n\t\treturn TRUE;\n\t}\n\n\t/**\n\t * del_object()\n\t *\n\t * Deletes a given Object and, if instructed to do so, erase all referencing objects\n\t *\n\t * ERASE feature by: Martino Piccinato\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise.\n\t *\n\t * @param int Object ID #\n\t * @param string Object Type, either 'ACO', 'ARO', or 'AXO'\n\t * @param bool Erases all referencing objects if TRUE, leaves them alone otherwise.\n\t */\n\tfunction del_object($object_id, $object_type=NULL, $erase=FALSE) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'aco_map';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'aro_map';\n\t\t\t\t$groups_map_table = $this->_db_table_prefix .'aro_groups_map';\n\t\t\t\t$object_group_table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'axo_map';\n\t\t\t\t$groups_map_table = $this->_db_table_prefix .'axo_groups_map';\n\t\t\t\t$object_group_table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('del_object(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"del_object(): ID: $object_id Object Type: $object_type, Erase all referencing objects: $erase\");\n\n\t\tif (empty($object_id) ) {\n\t\t\t$this->debug_text(\"del_object(): Object ID ($object_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"del_object(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\n\t\t// Get Object section_value/value (needed to look for referencing objects)\n\t\t$query = 'SELECT section_value,value FROM '. $table .' WHERE id='. $this->db->quote($object_id);\n\t\t$object = $this->db->GetRow($query);\n\n\t\tif (empty($object)) {\n\t\t\t$this->debug_text('del_object(): The specified object ('. strtoupper($object_type) .' ID: '. $object_id .') could not be found.');\n\t\t\t$this->db->RollbackTrans();\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$section_value = $object[0];\n\t\t$value = $object[1];\n\n\t\t// Get ids of acl referencing the Object (if any)\n\t\t$query = \"SELECT acl_id FROM $object_map_table WHERE value=\" . $this->db->quote($value) . \" AND section_value=\" . $this->db->quote($section_value);\n\t\t$acl_ids = $this->db->GetCol($query);\n\n\t\tif ($erase) {\n\t\t\t// We were asked to erase all acl referencing it\n\n\t\t\t$this->debug_text(\"del_object(): Erase was set to TRUE, delete all referencing objects\");\n\n\t\t\tif ($object_type == \"aro\" OR $object_type == \"axo\") {\n\t\t\t\t// The object can be referenced in groups_X_map tables\n\t\t\t\t// in the future this branching may become useless because\n\t\t\t\t// ACO might me \"groupable\" too\n\n\t\t\t\t// Get rid of groups_map referencing the Object\n\t\t\t\t$query = 'DELETE FROM '. $object_group_table .' WHERE '. $object_type .'_id='. $this->db->quote($object_id);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\t$this->debug_db('edit_object');\n\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!empty($acl_ids)) {\n\t\t\t\t//There are acls actually referencing the object\n\n\t\t\t\tif ($object_type == 'aco') {\n\t\t\t\t\t// I know it's extremely dangerous but\n\t\t\t\t\t// if asked to really erase an ACO\n\t\t\t\t\t// we should delete all acl referencing it\n\t\t\t\t\t// (and relative maps)\n\n\t\t\t\t\t// Do this below this branching\n\t\t\t\t\t// where it uses $orphan_acl_ids as\n\t\t\t\t\t// the array of the \"orphaned\" acl\n\t\t\t\t\t// in this case all referenced acl are\n\t\t\t\t\t// orhpaned acl\n\n\t\t\t\t\t$orphan_acl_ids = $acl_ids;\n\t\t\t\t} else {\n\t\t\t\t\t// The object is not an ACO and might be referenced\n\t\t\t\t\t// in still valid acls regarding also other object.\n\t\t\t\t\t// In these cases the acl MUST NOT be deleted\n\n\t\t\t\t\t// Get rid of $object_id map referencing erased objects\n\t\t\t\t\t$query = \"DELETE FROM $object_map_table WHERE section_value=\" . $this->db->quote($section_value) . \" AND value=\" . $this->db->quote($value);\n\t\t\t\t\t$this->db->Execute($query);\n\n\t\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\t\t$this->debug_db('edit_object');\n\t\t\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Find the \"orphaned\" acl. I mean acl referencing the erased Object (map)\n\t\t\t\t\t// not referenced anymore by other objects\n\n\t\t\t\t\t$sql_acl_ids = implode(\",\", $acl_ids);\n\n\t\t\t\t\t$query = '\n\t\t\t\t\t\tSELECT\t\ta.id\n\t\t\t\t\t\tFROM\t\t'. $this->_db_table_prefix .'acl a\n\t\t\t\t\t\tLEFT JOIN\t'. $object_map_table .' b ON a.id=b.acl_id\n\t\t\t\t\t\tLEFT JOIN\t'. $groups_map_table .' c ON a.id=c.acl_id\n\t\t\t\t\t\tWHERE\t\tb.value IS NULL\n\t\t\t\t\t\t\tAND\t\tb.section_value IS NULL\n\t\t\t\t\t\t\tAND\t\tc.group_id IS NULL\n\t\t\t\t\t\t\tAND\t\ta.id in ('. $sql_acl_ids .')';\n\t\t\t\t\t$orphan_acl_ids = $this->db->GetCol($query);\n\n\t\t\t\t} // End of else section of \"if ($object_type == \"aco\")\"\n\n\t\t\t\tif ($orphan_acl_ids) {\n\t\t\t\t\t// If there are orphaned acls get rid of them\n\n\t\t\t\t\tforeach ($orphan_acl_ids as $acl) {\n\t\t\t\t\t\t$this->del_acl($acl);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} // End of if ($acl_ids)\n\n\t\t\t// Finally delete the Object itself\n\t\t\t$query = \"DELETE FROM $table WHERE id=\" . $this->db->quote($object_id);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('edit_object');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$this->db->CommitTrans();\n\t\t\treturn true;\n\n\t\t} // End of \"if ($erase)\"\n\n\t\t$groups_ids = FALSE;\n\n\t\tif ($object_type == 'axo' OR $object_type == 'aro') {\n\t\t\t// If the object is \"groupable\" (may become unnecessary,\n\t\t\t// see above\n\n\t\t\t// Get id of groups where the object is assigned:\n\t\t\t// you must explicitly remove the object from its groups before\n\t\t\t// deleting it (don't know if this is really needed, anyway it's safer ;-)\n\n\t\t\t$query = 'SELECT group_id FROM '. $object_group_table .' WHERE '. $object_type .'_id='. $this->db->quote($object_id);\n\t\t\t$groups_ids = $this->db->GetCol($query);\n\t\t}\n\n\t\tif ( ( isset($acl_ids) AND !empty($acl_ids) ) OR ( isset($groups_ids) AND !empty($groups_ids) ) ) {\n\t\t\t// The Object is referenced somewhere (group or acl), can't delete it\n\n\t\t\t$this->debug_text(\"del_object(): Can't delete the object as it is being referenced by GROUPs (\".@implode($groups_ids).\") or ACLs (\".@implode($acl_ids,\",\").\")\");\n\t\t\t$this->db->RollBackTrans();\n\t\t\treturn false;\n\t\t} else {\n\t\t\t// The Object is NOT referenced anywhere, delete it\n\n\t\t\t$query = \"DELETE FROM $table WHERE id=\" . $this->db->quote($object_id);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif ( !is_object($rs) ) {\n\t\t\t\t$this->debug_db('edit_object');\n\t\t\t\t$this->db->RollBackTrans();\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$this->db->CommitTrans();\n\t\t\treturn true;\n\t\t}\n\n\t\t$this->db->RollbackTrans();\n\t\treturn false;\n\t}\n\n\t/*\n\t *\n\t * Object Sections\n\t *\n\t */\n\n\t/**\n\t * get_object_section_section_id()\n\t *\n\t * Gets the object_section_id given the name AND/OR value of the section.\n\t *\n\t * Will only return one section id, so if there are duplicate names it will return false.\n\t *\n\t * @return int Object Section ID if the object section is found AND is unique, or FALSE otherwise.\n\t *\n\t * @param string Object Name\n\t * @param string Object Value\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO', or 'ACL'\n\t *\n\t */\n\tfunction get_object_section_section_id($name = NULL, $value = NULL, $object_type = NULL) {\n\t\t$this->debug_text(\"get_object_section_section_id(): Value: $value Name: $name Object Type: $object_type\");\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\tcase 'aro':\n\t\t\tcase 'axo':\n\t\t\tcase 'acl':\n\t\t\t\t$object_type = strtolower(trim($object_type));\n\t\t\t\t$table = $this->_db_table_prefix . $object_type;\n\t\t\t\t$object_sections_table = $this->_db_table_prefix . $object_type .'_sections';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_object_section_section_id(): Invalid Object Type ('. $object_type . ')');\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$name = trim($name ?? '');\n\t\t$value = trim($value);\n\n\t\tif (empty($name) AND empty($value) ) {\n\t\t\t$this->debug_text('get_object_section_section_id(): Both Name ('. $name .') and Value ('. $value .') are empty, you must specify at least one.');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$query = 'SELECT id FROM '. $object_sections_table;\n\t\t$where = ' WHERE ';\n\n\t\t// limit by value if specified\n\t\tif (!empty($value)) {\n\t\t\t$query .= $where .'value='. $this->db->quote($value);\n\t\t\t$where = ' AND ';\n\t\t}\n\n\t\t// only use name if asked, this is SLOW\n\t\tif (!empty($name)) {\n\t\t\t$query .= $where .'name='. $this->db->quote($name);\n\t\t}\n\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('get_object_section_section_id');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t$row_count = $rs->RecordCount();\n\n\t\t// If only one row is returned\n\t\tif ($row_count == 1) {\n\t\t\t// Return only the ID in the first row.\n\t\t\t$row = $rs->FetchRow();\n\t\t\treturn $row[0];\n\t\t}\n\n\t\t// If more than one row is returned\n\t\t// should only ever occur when using name as values are unique.\n\t\tif ($row_count > 1) {\n\t\t\t$this->debug_text('get_object_section_section_id(): Returned '. $row_count .' rows, can only return one. Please search by value not name, or make your names unique.');\n\t\t\treturn FALSE;\n\t\t}\n\n\t\t// No rows returned, no matching section found\n\t\t$this->debug_text('get_object_section_section_id(): Returned '. $row_count .' rows, no matching section found.');\n\t\treturn FALSE;\n\t}\n\n\t/**\n\t * add_object_section()\n\t *\n\t * Inserts an object Section\n\t *\n\t * @return int Object Section ID of new section\n\t *\n\t * @param string Object Name\n\t * @param string Object Value\n\t * @param int Display Order\n\t * @param int Hidden flag, hides section if 1, shows section if 0\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO', or 'ACL'\n\t */\n\tfunction add_object_section($name, $value=0, $order=0, $hidden=0, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aco_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aro_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'axo_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'acl':\n\t\t\t\t$object_type = 'acl';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'acl_sections';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"add_object_section(): Value: $value Order: $order Name: $name Object Type: $object_type\");\n\n\t\t$name = trim($name);\n\t\t$value = trim($value);\n\t\t$order = trim($order);\n\t\t$hidden = intval($hidden);\n\n\t\tif ($order == NULL OR $order == '') {\n\t\t\t$order = 0;\n\t\t}\n\n\t\tif (empty($name) ) {\n\t\t\t$this->debug_text(\"add_object_section(): name ($name) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"add_object_section(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$insert_id = $this->db->GenID($this->_db_table_prefix.$object_type.'_sections_seq',10);\n\t\t$query = 'insert into '. $object_sections_table .' (id,value,order_value,name,hidden) VALUES( '. $this->db->quote($insert_id) .', '. $this->db->quote($value) .', '. $this->db->quote($order) .', '. $this->db->quote($name) .', '. $this->db->quote($hidden) .')';\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('add_object_section');\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$this->debug_text(\"add_object_section(): Added object_section as ID: $insert_id\");\n\t\t\treturn $insert_id;\n\t\t}\n\t}\n\n\t/**\n\t * edit_object_section()\n\t *\n\t * Edits a given Object Section\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t * @param int Object Section ID #\n\t * @param string Object Section Name\n\t * @param string Object Section Value\n\t * @param int Display Order\n\t * @param int Hidden Flag, hide object section if 1, show if 0\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO', or 'ACL'\n\t */\n\tfunction edit_object_section($object_section_id, $name, $value=0, $order=0, $hidden=0, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aco_sections';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'aco_map';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aro_sections';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'aro_map';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'axo_sections';\n\t\t\t\t$object_map_table = $this->_db_table_prefix .'axo_map';\n\t\t\t\tbreak;\n\t\t\tcase 'acl':\n\t\t\t\t$object_type = 'acl';\n\t\t\t\t$table = $this->_db_table_prefix .'acl';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'acl_sections';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('edit_object_section(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"edit_object_section(): ID: $object_section_id Value: $value Order: $order Name: $name Object Type: $object_type\");\n\n\t\t$name = trim($name);\n\t\t$value = trim($value);\n\t\t$order = trim($order);\n\t\t$hidden = intval($hidden);\n\n\t\tif (empty($object_section_id) ) {\n\t\t\t$this->debug_text(\"edit_object_section(): Section ID ($object_section_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($name) ) {\n\t\t\t$this->debug_text(\"edit_object_section(): name ($name) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"edit_object_section(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->db->BeginTrans();\n\n\t\t//Get old value incase it changed, before we do the update.\n\t\t$query = \"select value from $object_sections_table where id=\" . $this->db->quote($object_section_id);\n\t\t$old_value = $this->db->GetOne($query);\n\n\t\t$query = \"update $object_sections_table set\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue=\" . $this->db->quote($value) . \",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\torder_value=\" .$this->db->quote($order) . \",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\" . $this->db->quote($name) . \",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thidden=\" . $this->db->quote($hidden) . \"\n\t\t\t\t\t\t\t\t\t\t\t\t\twhere   id=\" . $this->db->quote($object_section_id);\n\t\t$rs = $this->db->Execute($query);\n\n\t\tif (!is_object($rs)) {\n\t\t\t$this->debug_db('edit_object_section');\n\n\t\t\t$this->db->RollbackTrans();\n\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$this->debug_text(\"edit_object_section(): Modified aco_section ID: $object_section_id\");\n\n\t\t\tif ($old_value != $value) {\n\t\t\t\t$this->debug_text(\"edit_object_section(): Value Changed, update other tables.\");\n\n\t\t\t\t$query = \"update $table set\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsection_value=\" . $this->db->quote($value) . \"\n\t\t\t\t\t\t\t\t\t\t\t\t\twhere section_value = \" . $this->db->quote($old_value);\n\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\tif (!is_object($rs)) {\n\t\t\t\t\t$this->debug_db('edit_object_section');\n\n\t\t\t\t\t$this->db->RollbackTrans();\n\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tif (!empty($object_map_table)) {\n\t\t\t\t\t\t$query = \"update $object_map_table set\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsection_value=\" . $this->db->quote($value) . \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhere section_value = \" . $this->db->quote($old_value);\n\t\t\t\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\t\t\t\tif ( !is_object($rs) ) {\n\t\t\t\t\t\t\t$this->debug_db('edit_object_section');\n\n\t\t\t\t\t\t\t$this->db->RollbackTrans();\n\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->debug_text(\"edit_object_section(): Modified ojbect_map value: $value\");\n\n\t\t\t\t\t\t\t$this->db->CommitTrans();\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//ACL sections, have no mapping table. Return true.\n\n\t\t\t\t\t\t$this->db->CommitTrans();\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n      $this->db->CommitTrans();\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * del_object_section()\n\t *\n\t * Deletes a given Object Section and, if explicitly asked, all the section objects\n\t *\n\t * ERASE feature by: Martino Piccinato\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t * @param int Object Section ID # to delete\n\t * @param string Object Type, either 'ACO', 'ARO', 'AXO', or 'ACL'\n\t * @param bool Erases all section objects assigned to the section\n\t */\n\tfunction del_object_section($object_section_id, $object_type=NULL, $erase=FALSE) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aco_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'aro_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'axo_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'acl':\n\t\t\t\t$object_type = 'acl';\n\t\t\t\t$object_sections_table = $this->_db_table_prefix .'acl_sections';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$this->debug_text(\"del_object_section(): ID: $object_section_id Object Type: $object_type, Erase all: $erase\");\n\n\t\tif (empty($object_section_id) ) {\n\t\t\t$this->debug_text(\"del_object_section(): Section ID ($object_section_id) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"del_object_section(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t// Get the value of the section\n\t\t$query=\"SELECT value FROM $object_sections_table WHERE id=\" . $this->db->quote($object_section_id);\n\t\t$section_value = $this->db->GetOne($query);\n\n\t\t// Get all objects ids in the section\n\t\t$object_ids = $this->get_object($section_value, 1, $object_type);\n\n\t\tif($erase) {\n\t\t\t// Delete all objects in the section and for\n\t\t\t// each object delete the referencing object\n\t\t\t// (see del_object method)\n\t\t\tif (is_array($object_ids)) {\n\t\t\t\t\tforeach ($object_ids as $id) {\n\t\t\t\t\t\tif ( $object_type === 'acl' ) {\n\t\t\t\t\t\t\t$this->del_acl($id);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->del_object($id, $object_type, TRUE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif($object_ids AND !$erase) {\n\t\t\t// There are objects in the section and we\n\t\t\t// were not asked to erase them: don't delete it\n\n\t\t\t$this->debug_text(\"del_object_section(): Could not delete the section ($section_value) as it is not empty.\");\n\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\t// The section is empty (or emptied by this method)\n\n\t\t\t$query = \"DELETE FROM $object_sections_table where id=\" . $this->db->quote($object_section_id);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('del_object_section');\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$this->debug_text(\"del_object_section(): deleted section ID: $object_section_id Value: $section_value\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * get_section_data()\n\t *\n\t * Gets the section data given the Section Value\n\t *\n\t * @return array Returns numerically indexed array with the following columns:\n\t *\t- array[0] = (int) Section ID #\n\t *\t- array[1] = (string) Section Value\n\t *\t- array[2] = (int) Section Order\n\t *\t- array[3] = (string) Section Name\n\t *\t- array[4] = (int) Section Hidden?\n\t * @param string Section Value\n\t * @param string Object Type, either 'ACO', 'ARO', or 'AXO'\n\t */\n\tfunction get_section_data($section_value, $object_type=NULL) {\n\n\t\tswitch(strtolower(trim($object_type))) {\n\t\t\tcase 'aco':\n\t\t\t\t$object_type = 'aco';\n\t\t\t\t$table = $this->_db_table_prefix .'aco_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'aro':\n\t\t\t\t$object_type = 'aro';\n\t\t\t\t$table = $this->_db_table_prefix .'aro_sections';\n\t\t\t\tbreak;\n\t\t\tcase 'axo':\n\t\t\t\t$object_type = 'axo';\n\t\t\t\t$table = $this->_db_table_prefix .'axo_sections';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->debug_text('get_section_data(): Invalid Object Type: '. $object_type);\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\t$this->debug_text(\"get_section_data(): Section Value: $section_value Object Type: $object_type\");\n\n\t\tif (empty($section_value) ) {\n\t\t\t$this->debug_text(\"get_section_data(): Section Value ($section_value) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\tif (empty($object_type) ) {\n\t\t\t$this->debug_text(\"get_section_data(): Object Type ($object_type) is empty, this is required\");\n\t\t\treturn false;\n\t\t}\n\n\t\t$query = \"SELECT id, value, order_value, name, hidden FROM $table WHERE value=\" . $this->db->quote($section_value);\n\t\t$row = $this->db->GetRow($query);\n\n\t\tif ($row) {\n\t\t\treturn $row;\n\t\t}\n\n\t\t$this->debug_text(\"get_section_data(): Section does not exist.\");\n\t\treturn false;\n\t}\n\n\t/**\n\t * clear_database()\n\t *\n\t * Deletes all data from the phpGACL tables. USE WITH CAUTION.\n\t *\n\t * @return bool Returns TRUE if successful, FALSE otherwise\n\t *\n\t */\n        function clear_database(){\n\n\t\t\t$tablesToClear = array(\n\t\t\t\t\t$this->_db_table_prefix.'acl',\n\t\t\t\t\t$this->_db_table_prefix.'aco',\n\t\t\t\t\t$this->_db_table_prefix.'aco_map',\n\t\t\t\t\t$this->_db_table_prefix.'aco_sections',\n\t\t\t\t\t$this->_db_table_prefix.'aro',\n\t\t\t\t\t$this->_db_table_prefix.'aro_groups',\n\t\t\t\t\t$this->_db_table_prefix.'aro_groups_map',\n\t\t\t\t\t$this->_db_table_prefix.'aro_map',\n\t\t\t\t\t$this->_db_table_prefix.'aro_sections',\n\t\t\t\t\t$this->_db_table_prefix.'axo',\n\t\t\t\t\t$this->_db_table_prefix.'axo_groups',\n\t\t\t\t\t$this->_db_table_prefix.'axo_groups_map',\n\t\t\t\t\t$this->_db_table_prefix.'axo_map',\n\t\t\t\t\t$this->_db_table_prefix.'axo_sections',\n\t\t\t\t\t$this->_db_table_prefix.'groups_aro_map',\n\t\t\t\t\t$this->_db_table_prefix.'groups_axo_map'\n\t\t\t\t\t);\n\n\t\t\t// Get all the table names and loop\n\t\t\t$tableNames = $this->db->MetaTables('TABLES');\n\t\t\t$query = array();\n\t\t\tforeach ($tableNames as $key => $value){\n\t\t\t\t\tif (in_array($value, $tablesToClear) ) {\n\t\t\t\t\t\t\t$query[] = 'TRUNCATE TABLE '.$value.';';\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Loop the queries and return.\n\t\t\tforeach ($query as $key => $value){\n\t\t\t\t\t$result = $this->db->Execute($value);\n\t\t\t}\n\n\t\t\treturn TRUE;\n        }\n\n}\n?>\n", "<?php\n\n/**\n * Software version identification.\n *\n * @package OpenEMR\n * @link https://www.open-emr.org/wiki\n * @author Robert Down <robertdown@live.com>\n * @license https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n *\n */\n\n// Software version identification.\n// This is used for display purposes, and also the major/minor/patch\n// numbers are stored in the database and used to determine which sql\n// upgrade file is the starting point for the next upgrade.\n$v_major = '6';\n$v_minor = '1';\n$v_patch = '0';\n$v_tag   = '-dev'; // minor revision number, should be empty for production releases\n\n// A real patch identifier. This is incremented when we release a patch for a\n// production release. Note the above $v_patch variable is a misnomer and actually\n// stores release version information.\n$v_realpatch = '0';\n\n// Database version identifier, this is to be incremented whenever there\n// is a database change in the course of development.  It is used\n// internally to determine when a database upgrade is needed.\n//\n$v_database = 435;\n\n// Access control version identifier, this is to be incremented whenever there\n// is a access control change in the course of development.  It is used\n// during installation to determine what the installed version of the access\n// controls is (subsequently the acl_upgrade.php script then is used to\n// upgrade and track this value)\n//\n$v_acl = 12;\n\n// Version for JavaScript and stylesheet includes. Increment whenever a .js or .css file changes.\n// Also whenever you change a .js or .css file, make sure that all URLs referencing it\n// end with \"?v=$v_js_includes\".  Search the code for examples of doing this.\n// All this is to keep browsers from using an older cached version.\n// Need to assign it as a global below to work in template scripts.\nif (!empty($_ENV['OPENEMR__ENVIRONMENT']) && ($_ENV['OPENEMR__ENVIRONMENT'] === 'dev')) {\n    $v_js_includes = md5(microtime());\n} else {\n    // Change this number when bumping\n    $v_js_includes = 69;\n}\n\n// Do not modify below\n$GLOBALS['v_js_includes'] = $v_js_includes;\n"], "filenames": ["acl_upgrade.php", "interface/patient_file/report/custom_report.php", "library/classes/Installer.class.php", "src/Common/Acl/AclExtended.php", "src/Gacl/GaclApi.php", "version.php"], "buggy_code_start_loc": [819, 35, 978, 1021, 407, 39], "buggy_code_end_loc": [822, 35, 1039, 1021, 616, 40], "fixing_code_start_loc": [818, 36, 978, 1022, 407, 39], "fixing_code_end_loc": [858, 40, 1039, 1059, 618, 40], "type": "CWE-863", "message": "Accounting User Can Download Patient Reports in openemr in GitHub repository openemr/openemr prior to 6.1.0.", "other": {"cve": {"id": "CVE-2022-1177", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-30T11:15:07.577", "lastModified": "2022-04-04T19:40:55.303", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Accounting User Can Download Patient Reports in openemr in GitHub repository openemr/openemr prior to 6.1.0."}, {"lang": "es", "value": "El Usuario de Contabilidad Puede Descargar Informes de Pacientes en openemr en el repositorio de GitHub openemr/openemr versiones anteriores a 6.1.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-1220"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.1.0", "matchCriteriaId": "85D9730B-F612-46CC-A4E4-5D0BA5415A77"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/a2e918abcf15f9fc1f7cb4a1f2b09ff019021175", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/0bb2979b-9643-4cdf-ab58-4354976b481b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/a2e918abcf15f9fc1f7cb4a1f2b09ff019021175"}}