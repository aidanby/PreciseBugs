{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Http\\RequestHelper;\nuse Pimcore\\Logger;\nuse Pimcore\\Mail;\nuse Pimcore\\Model\\Element\\ElementInterface;\nuse Pimcore\\Model\\Tool;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Profiler\\Profiler;\nuse Symfony\\Component\\Mime\\Address;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/email\")\n *\n * @internal\n */\nclass EmailController extends AdminController\n{\n    /**\n     * @Route(\"/email-logs\", name=\"pimcore_admin_email_emaillogs\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function emailLogsAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails') && !$this->getAdminUser()->isAllowed('gdpr_data_extractor')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $list = new Tool\\Email\\Log\\Listing();\n        if ($request->get('documentId')) {\n            $list->setCondition('documentId = ' . (int)$request->get('documentId'));\n        }\n        $list->setLimit($request->get('limit'));\n        $list->setOffset($request->get('start'));\n        $list->setOrderKey('sentDate');\n\n        if ($request->get('filter')) {\n            $filterTerm = $request->get('filter');\n            if ($filterTerm == '*') {\n                $filterTerm = '';\n            }\n\n            $filterTerm = str_replace('%', '*', $filterTerm);\n            $filterTerm = htmlspecialchars($filterTerm, ENT_QUOTES);\n\n            if (strpos($filterTerm, '@')) {\n                $parts = explode(' ', $filterTerm);\n                $parts = array_map(function ($part) {\n                    if (strpos($part, '@')) {\n                        $part = '\"' . $part . '\"';\n                    }\n\n                    return $part;\n                }, $parts);\n                $filterTerm = implode(' ', $parts);\n            }\n\n            $condition = '( MATCH (`from`,`to`,`cc`,`bcc`,`subject`,`params`) AGAINST (' . $list->quote($filterTerm) . ' IN BOOLEAN MODE) )';\n\n            if ($request->get('documentId')) {\n                $condition .= 'AND documentId = ' . (int)$request->get('documentId');\n            }\n\n            $list->setCondition($condition);\n        }\n\n        $list->setOrder('DESC');\n\n        $data = $list->load();\n        $jsonData = [];\n\n        if (is_array($data)) {\n            foreach ($data as $entry) {\n                $tmp = $entry->getObjectVars();\n                unset($tmp['bodyHtml']);\n                unset($tmp['bodyText']);\n                $jsonData[] = $tmp;\n            }\n        }\n\n        return $this->adminJson([\n            'data' => $jsonData,\n            'success' => true,\n            'total' => $list->getTotalCount(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/show-email-log\", name=\"pimcore_admin_email_showemaillog\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param Profiler|null $profiler\n     *\n     * @return JsonResponse|Response\n     *\n     * @throws \\Exception\n     */\n    public function showEmailLogAction(Request $request, ?Profiler $profiler)\n    {\n        if ($profiler) {\n            $profiler->disable();\n        }\n\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw $this->createAccessDeniedHttpException(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $type = $request->get('type');\n        $emailLog = Tool\\Email\\Log::getById((int) $request->get('id'));\n\n        if (!$emailLog) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($type === 'text') {\n            return $this->render('@PimcoreAdmin/Admin/Email/text.html.twig', ['log' => $emailLog->getTextLog()]);\n        } elseif ($type === 'html') {\n            return new Response($emailLog->getHtmlLog(), 200, [\n                'Content-Security-Policy' => \"default-src 'self'; style-src 'self' 'unsafe-inline'; img-src * data:\",\n            ]);\n        } elseif ($type === 'params') {\n            try {\n                $params = $this->decodeJson($emailLog->getParams());\n            } catch (\\Exception $e) {\n                Logger::warning('Could not decode JSON param string');\n                $params = [];\n            }\n            foreach ($params as &$entry) {\n                $this->enhanceLoggingData($entry);\n            }\n\n            return $this->adminJson($params);\n        } elseif ($type === 'details') {\n            $data = $emailLog->getObjectVars();\n\n            return $this->adminJson($data);\n        } else {\n            return new Response('No Type specified');\n        }\n    }\n\n    /**\n     * @param array $data\n     * @param array $fullEntry\n     */\n    protected function enhanceLoggingData(&$data, &$fullEntry = null)\n    {\n        if (!empty($data['objectClass'])) {\n            $class = '\\\\' . ltrim($data['objectClass'], '\\\\');\n            $reflection = new \\ReflectionClass($class);\n\n            if (!empty($data['objectId']) && $reflection->implementsInterface(ElementInterface::class)) {\n                $obj = $class::getById($data['objectId']);\n                if (is_null($obj)) {\n                    $data['objectPath'] = '';\n                } else {\n                    $data['objectPath'] = $obj->getRealFullPath();\n                }\n                //check for classmapping\n                if (stristr($class, '\\\\Pimcore\\\\Model') === false) {\n                    $niceClassName = '\\\\' . ltrim($reflection->getParentClass()->getName(), '\\\\');\n                } else {\n                    $niceClassName = $class;\n                }\n                $niceClassName = str_replace('\\\\Pimcore\\\\Model\\\\', '', $niceClassName);\n                $niceClassName = str_replace('_', '\\\\', $niceClassName);\n\n                $tmp = explode('\\\\', $niceClassName);\n                if (in_array($tmp[0], ['DataObject', 'Document', 'Asset'])) {\n                    $data['objectClassBase'] = $tmp[0];\n                    $data['objectClassSubType'] = $tmp[1];\n                }\n            }\n        }\n\n        foreach ($data as &$value) {\n            if (is_array($value)) {\n                $this->enhanceLoggingData($value, $data);\n            }\n        }\n        if ($data['children'] ?? false) {\n            foreach ($data['children'] as $key => $entry) {\n                if (is_string($key)) { //key must be integers\n                    unset($data['children'][$key]);\n                }\n            }\n            $data['iconCls'] = 'pimcore_icon_folder';\n            $data['data'] = ['type' => 'simple', 'value' => 'Children (' . count($data['children']) . ')'];\n        } else {\n            //setting the icon class\n            if (empty($data['iconCls'])) {\n                if (($data['objectClassBase'] ?? '') == 'DataObject') {\n                    $fullEntry['iconCls'] = 'pimcore_icon_object';\n                } elseif (($data['objectClassBase'] ?? '') == 'Asset') {\n                    switch ($data['objectClassSubType']) {\n                        case 'Image':\n                            $fullEntry['iconCls'] = 'pimcore_icon_image';\n\n                            break;\n                        case 'Video':\n                            $fullEntry['iconCls'] = 'pimcore_icon_wmv';\n\n                            break;\n                        case 'Text':\n                            $fullEntry['iconCls'] = 'pimcore_icon_txt';\n\n                            break;\n                        case 'Document':\n                            $fullEntry['iconCls'] = 'pimcore_icon_pdf';\n\n                            break;\n                        default:\n                            $fullEntry['iconCls'] = 'pimcore_icon_asset';\n                    }\n                } elseif (strpos($data['objectClass'] ?? '', 'Document') === 0) {\n                    $fullEntry['iconCls'] = 'pimcore_icon_' . strtolower($data['objectClassSubType']);\n                } else {\n                    $data['iconCls'] = 'pimcore_icon_text';\n                }\n            }\n\n            $data['leaf'] = true;\n        }\n    }\n\n    /**\n     * @Route(\"/delete-email-log\", name=\"pimcore_admin_email_deleteemaillog\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteEmailLogAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw $this->createAccessDeniedHttpException(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $success = false;\n        $emailLog = Tool\\Email\\Log::getById((int) $request->get('id'));\n        if ($emailLog instanceof Tool\\Email\\Log) {\n            $emailLog->delete();\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/resend-email\", name=\"pimcore_admin_email_resendemail\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function resendEmailAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw $this->createAccessDeniedHttpException(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $success = false;\n        $emailLog = Tool\\Email\\Log::getById((int) $request->get('id'));\n\n        if ($emailLog instanceof Tool\\Email\\Log) {\n            $mail = new Mail();\n            $mail->preventDebugInformationAppending();\n            $mail->setIgnoreDebugMode(true);\n\n            if (!empty($request->get('to'))) {\n                $emailLog->setTo(null);\n                $emailLog->setCc(null);\n                $emailLog->setBcc(null);\n            } else {\n                $mail->disableLogging();\n            }\n\n            if ($html = $emailLog->getHtmlLog()) {\n                $mail->html($html);\n            }\n\n            if ($text = $emailLog->getTextLog()) {\n                $mail->text($text);\n            }\n\n            foreach (['From', 'To', 'Cc', 'Bcc', 'ReplyTo'] as $field) {\n                if (!$values = $request->get(strtolower($field))) {\n                    $getter = 'get' . $field;\n                    $values = $emailLog->{$getter}();\n                }\n\n                $values = \\Pimcore\\Helper\\Mail::parseEmailAddressField($values);\n\n                if (!empty($values)) {\n                    list($value) = $values;\n                    if ($value) {\n                        $prefix = 'add';\n                        $mail->{$prefix . $field}(new Address($value['email'], $value['name'] ?? ''));\n                    }\n                }\n            }\n\n            $mail->subject($emailLog->getSubject());\n\n            // add document\n            if ($emailLog->getDocumentId()) {\n                $mail->setDocument($emailLog->getDocumentId());\n            }\n\n            // re-add params\n            try {\n                $params = $this->decodeJson($emailLog->getParams());\n            } catch (\\Exception $e) {\n                Logger::warning('Could not decode JSON param string');\n                $params = [];\n            }\n\n            foreach ($params as $entry) {\n                $data = null;\n                $hasChildren = isset($entry['children']) && is_array($entry['children']);\n\n                if ($hasChildren) {\n                    $childData = [];\n                    foreach ($entry['children'] as $childParam) {\n                        $childData[$childParam['key']] = $this->parseLoggingParamObject($childParam);\n                    }\n                    $data = $childData;\n                } else {\n                    $data = $this->parseLoggingParamObject($entry);\n                }\n\n                $mail->setParam($entry['key'], $data);\n            }\n\n            $mail->send();\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/send-test-email\", name=\"pimcore_admin_email_sendtestemail\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function sendTestEmailAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        // Simulate a frontend request to prefix assets\n        $request->attributes->set(RequestHelper::ATTRIBUTE_FRONTEND_REQUEST, true);\n\n        $mail = new Mail();\n\n        if ($request->get('emailType') == 'text') {\n            $mail->text($request->get('content'));\n        } elseif ($request->get('emailType') == 'html') {\n            $mail->html($request->get('content'));\n        } elseif ($request->get('emailType') == 'document') {\n            $doc = \\Pimcore\\Model\\Document::getByPath($request->get('documentPath'));\n\n            if ($doc instanceof \\Pimcore\\Model\\Document\\Email || $doc instanceof \\Pimcore\\Model\\Document\\Newsletter) {\n                $mail->setDocument($doc);\n\n                if ($request->get('mailParamaters')) {\n                    if ($mailParamsArray = json_decode($request->get('mailParamaters'), true)) {\n                        foreach ($mailParamsArray as $mailParam) {\n                            if ($mailParam['key']) {\n                                $mail->setParam($mailParam['key'], $mailParam['value']);\n                            }\n                        }\n                    }\n                }\n            } else {\n                throw new \\Exception('Email document not found!');\n            }\n        }\n\n        if ($from = $request->get('from')) {\n            $addressArray = \\Pimcore\\Helper\\Mail::parseEmailAddressField($from);\n            if ($addressArray) {\n                //use the first address only\n                list($cleanedFromAddress) = $addressArray;\n                $mail->from(new Address($cleanedFromAddress['email'], $cleanedFromAddress['name'] ?? ''));\n            }\n        }\n\n        $toAddresses = \\Pimcore\\Helper\\Mail::parseEmailAddressField($request->get('to'));\n        foreach ($toAddresses as $cleanedToAddress) {\n            $mail->addTo($cleanedToAddress['email'], $cleanedToAddress['name'] ?? '');\n        }\n\n        $mail->subject($request->get('subject'));\n        $mail->setIgnoreDebugMode(true);\n\n        $mail->send();\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/blacklist\", name=\"pimcore_admin_email_blacklist\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function blacklistAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        if ($request->get('data')) {\n            $data = $this->decodeJson($request->get('data'));\n\n            if (is_array($data)) {\n                foreach ($data as &$value) {\n                    if (is_string($value)) {\n                        $value = trim($value);\n                    }\n                }\n            }\n\n            if ($request->get('xaction') == 'destroy') {\n                $address = Tool\\Email\\Blacklist::getByAddress($data['address']);\n                $address->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $address = Tool\\Email\\Blacklist::getByAddress($data['address']);\n                $address->setValues($data);\n                $address->save();\n\n                return $this->adminJson(['data' => $address->getObjectVars(), 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                unset($data['id']);\n\n                $address = new Tool\\Email\\Blacklist();\n                $address->setValues($data);\n                $address->save();\n\n                return $this->adminJson(['data' => $address->getObjectVars(), 'success' => true]);\n            }\n        } else {\n            // get list of routes\n\n            $list = new Tool\\Email\\Blacklist\\Listing();\n\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($request->query->all());\n            if ($sortingSettings['orderKey']) {\n                $orderKey = $sortingSettings['orderKey'];\n            }\n            if ($sortingSettings['order']) {\n                $order = $sortingSettings['order'];\n            }\n\n            if ($request->get('filter')) {\n                $list->setCondition('`address` LIKE ' . $list->quote('%'.$request->get('filter').'%'));\n            }\n\n            $data = $list->load();\n            $jsonData = [];\n            if (is_array($data)) {\n                foreach ($data as $entry) {\n                    $jsonData[] = $entry->getObjectVars();\n                }\n            }\n\n            return $this->adminJson([\n                'success' => true,\n                'data' => $jsonData,\n                'total' => $list->getTotalCount(),\n            ]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @param array $params\n     *\n     * @return array\n     */\n    protected function parseLoggingParamObject($params)\n    {\n        $data = null;\n        if ($params['data']['type'] === 'object') {\n            $class = '\\\\' . ltrim($params['data']['objectClass'], '\\\\');\n            $reflection = new \\ReflectionClass($class);\n\n            if (!empty($params['data']['objectId']) && $reflection->implementsInterface(ElementInterface::class)) {\n                $obj = $class::getById($params['data']['objectId']);\n                if (!is_null($obj)) {\n                    $data = $obj;\n                }\n            }\n        } else {\n            $data = $params['data']['value'];\n        }\n\n        return $data;\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n/*global localStorage */\npimcore.registerNS(\"pimcore.helpers.x\");\n\npimcore.helpers.registerKeyBindings = function (bindEl, ExtJS) {\n\n    if (!ExtJS) {\n        ExtJS = Ext;\n    }\n\n    var user = pimcore.globalmanager.get(\"user\");\n    var bindings = [];\n\n    var decodedKeyBindings = Ext.decode(user.keyBindings);\n    if (decodedKeyBindings) {\n        for (var i = 0; i < decodedKeyBindings.length; i++) {\n            var item = decodedKeyBindings[i];\n            if (item == null) {\n                continue;\n            }\n\n            if (!item.key) {\n                continue;\n            }\n            var action = item.action;\n            var handler = pimcore.helpers.keyBindingMapping[action];\n            if (handler) {\n                var binding = item;\n                item[\"fn\"] = handler;\n                bindings.push(binding);\n            }\n        }\n    }\n\n    pimcore.keymap = new ExtJS.util.KeyMap({\n        target: bindEl,\n        binding: bindings\n    });\n};\n\npimcore.helpers.openClassEditor = function () {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"classes\")) {\n        var toolbar = pimcore.globalmanager.get(\"layout_toolbar\");\n        toolbar.editClasses();\n    }\n};\n\npimcore.helpers.openWelcomePage = function (keyCode, e) {\n\n    if (e[\"stopEvent\"]) {\n        e.stopEvent();\n    }\n\n    try {\n        pimcore.globalmanager.get(\"layout_portal_welcome\").activate();\n    }\n    catch (e) {\n        pimcore.globalmanager.add(\"layout_portal_welcome\", new pimcore.layout.portal());\n    }\n};\n\npimcore.helpers.openAsset = function (id, type, options) {\n\n    if (pimcore.globalmanager.exists(\"asset_\" + id) == false) {\n\n        if (!pimcore.asset[type]) {\n            pimcore.globalmanager.add(\"asset_\" + id, new pimcore.asset.unknown(id, options));\n        }\n        else {\n            pimcore.globalmanager.add(\"asset_\" + id, new pimcore.asset[type](id, options));\n        }\n\n        pimcore.helpers.rememberOpenTab(\"asset_\" + id + \"_\" + type);\n\n        if (options != undefined) {\n            if (options.ignoreForHistory) {\n                var element = pimcore.globalmanager.get(\"asset_\" + id);\n                element.setAddToHistory(false);\n            }\n        }\n\n    }\n    else {\n        pimcore.globalmanager.get(\"asset_\" + id).activate();\n    }\n};\n\npimcore.helpers.closeAsset = function (id) {\n\n    try {\n        var tabId = \"asset_\" + id;\n        var panel = Ext.getCmp(tabId);\n        if (panel) {\n            panel.close();\n        }\n\n        pimcore.helpers.removeTreeNodeLoadingIndicator(\"asset\", id);\n        pimcore.globalmanager.remove(\"asset_\" + id);\n    } catch (e) {\n        console.log(e);\n    }\n};\n\npimcore.helpers.openDocument = function (id, type, options) {\n    if (pimcore.globalmanager.exists(\"document_\" + id) == false) {\n        if (pimcore.document[type]) {\n            pimcore.globalmanager.add(\"document_\" + id, new pimcore.document[type](id, options));\n            pimcore.helpers.rememberOpenTab(\"document_\" + id + \"_\" + type);\n\n            if (options !== undefined) {\n                if (options.ignoreForHistory) {\n                    var element = pimcore.globalmanager.get(\"document_\" + id);\n                    element.setAddToHistory(false);\n                }\n            }\n        }\n    }\n    else {\n        pimcore.globalmanager.get(\"document_\" + id).activate();\n    }\n};\n\npimcore.helpers.closeDocument = function (id) {\n    try {\n        var tabId = \"document_\" + id;\n        var panel = Ext.getCmp(tabId);\n        if (panel) {\n            panel.close();\n        }\n\n        pimcore.helpers.removeTreeNodeLoadingIndicator(\"document\", id);\n        pimcore.globalmanager.remove(\"document_\" + id);\n    } catch (e) {\n        console.log(e);\n    }\n\n};\n\npimcore.helpers.openObject = function (id, type, options) {\n    if (pimcore.globalmanager.exists(\"object_\" + id) == false) {\n\n        if (type != \"folder\" && type != \"variant\" && type != \"object\") {\n            type = \"object\";\n        }\n\n        pimcore.globalmanager.add(\"object_\" + id, new pimcore.object[type](id, options));\n        pimcore.helpers.rememberOpenTab(\"object_\" + id + \"_\" + type);\n\n        if (options !== undefined) {\n            if (options.ignoreForHistory) {\n                var element = pimcore.globalmanager.get(\"object_\" + id);\n                element.setAddToHistory(false);\n            }\n        }\n    }\n    else {\n        var tab = pimcore.globalmanager.get(\"object_\" + id);\n        tab.activate();\n    }\n};\n\npimcore.helpers.closeObject = function (id) {\n    try {\n        var tabId = \"object_\" + id;\n        var panel = Ext.getCmp(tabId);\n        if (panel) {\n            panel.close();\n        }\n\n        pimcore.helpers.removeTreeNodeLoadingIndicator(\"object\", id);\n        pimcore.globalmanager.remove(\"object_\" + id);\n    } catch (e) {\n        console.log(e);\n    }\n};\n\npimcore.helpers.updateTreeElementStyle = function (type, id, treeData) {\n    if (treeData) {\n\n        var key = type + \"_\" + id;\n        if (pimcore.globalmanager.exists(key)) {\n            var editMask = pimcore.globalmanager.get(key);\n            if (editMask.tab) {\n                if (typeof treeData.iconCls !== \"undefined\") {\n                    editMask.tab.setIconCls(treeData.iconCls);\n                }\n\n                if (typeof treeData.icon !== \"undefined\") {\n                    editMask.tab.setIcon(treeData.icon);\n                }\n            }\n        }\n\n        var treeNames = pimcore.elementservice.getElementTreeNames(type);\n\n        for (var index = 0; index < treeNames.length; index++) {\n            var treeName = treeNames[index];\n            var tree = pimcore.globalmanager.get(treeName);\n            if (!tree) {\n                continue;\n            }\n            tree = tree.tree;\n            var store = tree.getStore();\n            var record = store.getById(id);\n            if (record) {\n                if (typeof treeData.icon !== \"undefined\") {\n                    record.set(\"icon\", treeData.icon);\n                }\n\n                if (typeof treeData.cls !== \"undefined\") {\n                    record.set(\"cls\", treeData.cls);\n                }\n\n                if (typeof treeData.iconCls !== \"undefined\") {\n                    record.set(\"iconCls\", treeData.iconCls);\n                }\n\n                if (typeof treeData.qtipCfg !== \"undefined\") {\n                    record.set(\"qtipCfg\", treeData.qtipCfg);\n                }\n            }\n        }\n    }\n};\n\npimcore.helpers.getHistory = function () {\n    var history = localStorage.getItem(\"pimcore_element_history\");\n    if (!history) {\n        history = [];\n    } else {\n        history = JSON.parse(history);\n    }\n    return history;\n};\n\npimcore.helpers.recordElement = function (id, type, name) {\n\n    var history = pimcore.helpers.getHistory();\n\n    var newDate = new Date();\n\n    for (var i = history.length - 1; i >= 0; i--) {\n        var item = history[i];\n        if (item.type == type && item.id == id) {\n            history.splice(i, 1);\n        }\n    }\n\n\n    var historyItem = {\n        id: id,\n        type: type,\n        name: name,\n        time: newDate.getTime()\n    };\n    history.unshift(historyItem);\n\n    history = history.slice(0, 30);\n\n    var json = JSON.stringify(history);\n    localStorage.setItem(\"pimcore_element_history\", json);\n\n    try {\n        var historyPanel = pimcore.globalmanager.get(\"element_history\");\n        if (historyPanel) {\n            var thePair = {\n                \"id\": id,\n                \"type\": type,\n                \"name\": name,\n                \"time\": newDate\n            };\n\n            var storeCount = historyPanel.store.getCount();\n            for (var i = storeCount - 1; i >= 0; i--) {\n\n                var record = historyPanel.store.getAt(i);\n                var data = record.data;\n                if (i > 100 || (data.id == id && data.type == type)) {\n                    historyPanel.store.remove(record);\n                }\n            }\n\n            historyPanel.store.insert(0, thePair);\n            historyPanel.resultpanel.getView().refresh();\n        }\n    }\n    catch (e) {\n        console.log(e);\n    }\n\n};\n\npimcore.helpers.openElement = function (idOrPath, type, subtype) {\n    if (typeof subtype != \"undefined\" && subtype !== null) {\n        if (type == \"document\") {\n            pimcore.helpers.openDocument(idOrPath, subtype);\n        }\n        else if (type == \"asset\") {\n            pimcore.helpers.openAsset(idOrPath, subtype);\n        }\n        else if (type == \"object\") {\n            pimcore.helpers.openObject(idOrPath, subtype);\n        }\n    } else {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_element_getsubtype'),\n            params: {\n                id: idOrPath,\n                type: type\n            },\n            success: function (response) {\n                var res = Ext.decode(response.responseText);\n                if (res.success) {\n                    pimcore.helpers.openElement(res.id, res.type, res.subtype);\n                } else {\n                    Ext.MessageBox.alert(t(\"error\"), t(\"element_not_found\"));\n                }\n            }\n        });\n    }\n};\n\npimcore.helpers.closeElement = function (id, type) {\n    if (type == \"document\") {\n        pimcore.helpers.closeDocument(id);\n    }\n    else if (type == \"asset\") {\n        pimcore.helpers.closeAsset(id);\n    }\n    else if (type == \"object\") {\n        pimcore.helpers.closeObject(id);\n    }\n};\n\npimcore.helpers.getElementTypeByObject = function (object) {\n    var type = null;\n    if (object instanceof pimcore.document.document) {\n        type = \"document\";\n    } else if (object instanceof pimcore.asset.asset) {\n        type = \"asset\";\n    } else if (object instanceof pimcore.object.abstract) {\n        type = \"object\";\n    }\n    return type;\n};\n\npimcore.helpers.getTreeNodeLoadingIndicatorElements = function (type, id) {\n    // display loading indicator on treenode\n    var elements = [];\n    var treeNames = pimcore.elementservice.getElementTreeNames(type);\n\n    for (index = 0; index < treeNames.length; index++) {\n        var treeName = treeNames[index];\n        var tree = pimcore.globalmanager.get(treeName);\n        if (!tree) {\n            continue;\n        }\n        tree = tree.tree;\n\n        try {\n            var store = tree.getStore();\n            var node = store.getNodeById(id);\n            if (node) {\n                var view = tree.getView();\n                var nodeEl = Ext.fly(view.getNodeByRecord(node));\n                var icon = nodeEl.query(\".x-tree-icon\")[0];\n\n                var iconEl = Ext.get(icon);\n                if (iconEl) {\n                    elements.push(iconEl);\n                }\n            }\n        } catch (e) {\n            //console.log(e);\n        }\n    }\n    return elements;\n};\n\npimcore.helpers.treeNodeLoadingIndicatorTimeouts = {};\n\npimcore.helpers.addTreeNodeLoadingIndicator = function (type, id, disableExpander) {\n\n    if(disableExpander !== false) {\n        disableExpander = true;\n    }\n\n    pimcore.helpers.treeNodeLoadingIndicatorTimeouts[type + id] = window.setTimeout(function () {\n        // display loading indicator on treenode\n        var iconEls = pimcore.helpers.getTreeNodeLoadingIndicatorElements(type, id);\n        for (var index = 0; index < iconEls.length; index++) {\n            var iconEl = iconEls[index];\n            if (iconEl) {\n                iconEl.addCls(\"pimcore_tree_node_loading_indicator\");\n                if(disableExpander) {\n                    iconEl.up('.x-grid-cell').addCls('pimcore_treenode_hide_plus_button');\n                }\n            }\n        }\n    }, 200);\n};\n\npimcore.helpers.removeTreeNodeLoadingIndicator = function (type, id) {\n\n    clearTimeout(pimcore.helpers.treeNodeLoadingIndicatorTimeouts[type + id]);\n\n    // display loading indicator on treenode\n    var iconEls = pimcore.helpers.getTreeNodeLoadingIndicatorElements(type, id);\n    for (var index = 0; index < iconEls.length; index++) {\n        var iconEl = iconEls[index];\n        if (iconEl) {\n            iconEl.removeCls(\"pimcore_tree_node_loading_indicator\");\n            iconEl.up('.x-grid-cell').removeCls('pimcore_treenode_hide_plus_button');\n        }\n    }\n};\n\npimcore.helpers.hasTreeNodeLoadingIndicator = function (type, id) {\n    var iconEls = pimcore.helpers.getTreeNodeLoadingIndicatorElements(type, id);\n    for (var index = 0; index < iconEls.length; index++) {\n        var iconEl = iconEls[index];\n        if (iconEl) {\n            return iconEl.hasCls(\"pimcore_tree_node_loading_indicator\");\n        }\n    }\n\n    return false;\n};\n\n\npimcore.helpers.openSeemode = function () {\n    if (pimcore.globalmanager.exists(\"pimcore_seemode\")) {\n        pimcore.globalmanager.get(\"pimcore_seemode\").start();\n    }\n    else {\n        pimcore.globalmanager.add(\"pimcore_seemode\", new pimcore.document.seemode());\n    }\n};\n\npimcore.helpers.isValidFilename = function (value) {\n    var result = value.match(/[a-zA-Z0-9_.\\-~]+/);\n    if (result == value) {\n        // key must be at least one character, an maximum 30 characters\n        if (value.length < 1 && value.length > 30) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n};\n\n\npimcore.helpers.getValidFilenameCache = {};\n\npimcore.helpers.getValidFilename = function (value, type) {\n\n    value = value.trim();\n\n    if (pimcore.helpers.getValidFilenameCache[value + type]) {\n        return pimcore.helpers.getValidFilenameCache[value + type];\n    }\n\n    var response = Ext.Ajax.request({\n        url: Routing.generate('pimcore_admin_misc_getvalidfilename'),\n        async: false,\n        params: {\n            value: value,\n            type: type\n        }\n    });\n\n    var res = Ext.decode(response.responseText);\n    pimcore.helpers.getValidFilenameCache[value + type] = res[\"filename\"];\n    return res[\"filename\"];\n};\n\npimcore.helpers.showPrettyError = function (type, title, text, errorText, stack, code, hideDelay) {\n    pimcore.helpers.showNotification(title, text, \"error\", errorText, hideDelay);\n};\n\npimcore.helpers.showNotification = function (title, text, type, detailText, hideDelay) {\n    // icon types: info,error,success\n    if (type === \"error\") {\n\n        if (detailText) {\n            detailText =\n                '<pre style=\"font-size:11px;word-wrap: break-word;\">'\n                    + strip_tags(detailText) +\n                \"</pre>\";\n        }\n\n        var errWin = new Ext.Window({\n            modal: true,\n            iconCls: \"pimcore_icon_error\",\n            title: title,\n            width: 700,\n            maxHeight: 500,\n            html: text,\n            autoScroll: true,\n            bodyStyle: \"padding: 10px;\",\n            buttonAlign: \"center\",\n            shadow: false,\n            closable: false,\n            buttons: [{\n                text: t(\"details\"),\n                hidden: !detailText,\n                handler: function () {\n                    errWin.close();\n\n                    var detailWindow = new Ext.Window({\n                        modal: true,\n                        title: t('details'),\n                        width: 1000,\n                        height: '95%',\n                        html: detailText,\n                        autoScroll: true,\n                        bodyStyle: \"padding: 10px;\",\n                        buttonAlign: \"center\",\n                        shadow: false,\n                        closable: true,\n                        buttons: [{\n                            text: t(\"OK\"),\n                            handler: function () {\n                                detailWindow.close();\n                            }\n                        }]\n                    });\n                    detailWindow.show();\n                }\n            }, {\n                text: t(\"OK\"),\n                handler: function () {\n                    errWin.close();\n                }\n            }]\n        });\n        errWin.show();\n    } else {\n        // Avoid overlapping any footer toolbar buttons\n        // Find current active tab to find its footer if there is one\n        let paddingY = 10;\n        let tabsBody = document.getElementById('pimcore_panel_tabs-body');\n        let activeTab = tabsBody.querySelector(':scope > [aria-expanded=\"true\"]');\n        if (activeTab) {\n            let footerToolbar = activeTab.querySelector(':scope .x-toolbar-footer');\n            if (footerToolbar) {\n                paddingY += footerToolbar.scrollHeight;\n            }\n        }\n\n        var notification = Ext.create('Ext.window.Toast', {\n            iconCls: 'pimcore_icon_' + type,\n            title: title,\n            html: text,\n            autoShow: true,\n            width: 'auto',\n            maxWidth: 350,\n            closeable: true,\n            align: \"br\",\n            anchor: Ext.get(tabsBody),\n            paddingX: 5,\n            paddingY: paddingY\n        });\n        notification.show(document);\n    }\n\n};\n\n\npimcore.helpers.rename = function (keyCode, e) {\n\n    e.stopEvent();\n\n    var tabpanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    var activeTab = tabpanel.getActiveTab();\n\n    if (activeTab) {\n        // for document\n        var el = activeTab.initialConfig;\n        if (el.document && el.document.rename) {\n            el.document.rename();\n\n        }\n        else if (el.object && el.object.rename) {\n            el.object.rename();\n\n        }\n        else if (el.asset && el.asset.rename) {\n            el.asset.rename();\n        }\n    }\n};\n\npimcore.helpers.togglePublish = function (publish, keyCode, e) {\n\n    e.stopEvent();\n\n    var tabpanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    var activeTab = tabpanel.getActiveTab();\n\n    if (activeTab) {\n        // for document\n        var el = activeTab.initialConfig;\n        if (el.document) {\n            if (publish) {\n                el.document.publish();\n            } else {\n                el.document.unpublish();\n            }\n        }\n        else if (el.object) {\n            if (publish) {\n                el.object.publish();\n            } else {\n                el.object.unpublish();\n            }\n        }\n        else if (el.asset) {\n            el.asset.save();\n        }\n    }\n};\n\n\npimcore.helpers.handleCtrlS = function (keyCode, e) {\n\n    e.stopEvent();\n\n    var tabpanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    var activeTab = tabpanel.getActiveTab();\n\n    if (activeTab) {\n        // for document\n        var el = activeTab.initialConfig;\n        if (el.document) {\n            if (el.document.data.published) {\n                el.document.publish();\n            } else {\n                el.document.save('version');\n            }\n        }\n        else if (el.object) {\n            if (el.object.data.general.o_published) {\n                el.object.publish();\n            } else {\n                el.object.save('version');\n            }\n        }\n        else if (el.asset) {\n            el.asset.save();\n        }\n    }\n};\n\npimcore.helpers.showMetaInfo = function (keyCode, e) {\n\n    e.stopEvent();\n\n    var tabpanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    var activeTab = tabpanel.getActiveTab();\n\n    if (activeTab) {\n        if (activeTab.initialConfig.document) {\n            activeTab.initialConfig.document.showMetaInfo();\n        } else if (activeTab.initialConfig.asset) {\n            activeTab.initialConfig.asset.showMetaInfo();\n        } else if (activeTab.initialConfig.object) {\n            activeTab.initialConfig.object.showMetaInfo();\n        }\n    }\n};\n\npimcore.helpers.openInTree = function (keyCode, e) {\n\n    e.stopEvent();\n\n    var tabpanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    var activeTab = tabpanel.getActiveTab();\n\n    if (activeTab) {\n        if (activeTab.initialConfig.document || activeTab.initialConfig.asset || activeTab.initialConfig.object) {\n            var tabId = activeTab.id;\n            var parts = tabId.split(\"_\");\n            var type = parts[0];\n            var elementId = parts[1];\n            pimcore.treenodelocator.showInTree(elementId, type);\n\n        }\n    }\n};\n\n\npimcore.helpers.handleF5 = function (keyCode, e) {\n\n    e.stopEvent();\n\n    var tabpanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    var activeTab = tabpanel.getActiveTab();\n\n    if (activeTab) {\n        // for document\n        if (activeTab.initialConfig.document) {\n            activeTab.initialConfig.document.reload();\n            return;\n        }\n        else if (activeTab.initialConfig.object) {\n            activeTab.initialConfig.object.reload();\n            return;\n        }\n    }\n\n    var date = new Date();\n    location.href = Routing.generate('pimcore_admin_index', {'_dc': date.getTime()});\n};\n\npimcore.helpers.lockManager = function (cid, ctype, csubtype, data) {\n\n    var lockDate = new Date(data.editlock.date * 1000);\n    var lockDetails = \"<br /><br />\";\n    lockDetails += \"<b>\" + t(\"path\") + \": <i>\" + data.editlock.cpath + \"</i></b><br />\";\n    lockDetails += \"<b>\" + t(\"type\") + \": </b>\" + t(ctype) + \"<br />\";\n    if (data.editlock.user) {\n        lockDetails += \"<b>\" + t(\"user\") + \":</b> \" + data.editlock.user.name + \"<br />\";\n    }\n    lockDetails += \"<b>\" + t(\"since\") + \": </b>\" + Ext.util.Format.date(lockDate, \"Y-m-d H:i\");\n    lockDetails += \"<br /><br />\" + t(\"element_lock_question\");\n\n    Ext.MessageBox.confirm(t(\"element_is_locked\"), t(\"element_lock_message\") + lockDetails,\n        function (lock, buttonValue) {\n            if (buttonValue == \"yes\") {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_element_unlockelement'),\n                    method: 'PUT',\n                    params: {\n                        id: lock[0],\n                        type: lock[1]\n                    },\n                    success: function () {\n                        pimcore.helpers.openElement(lock[0], lock[1], lock[2]);\n                    }\n                });\n            }\n        }.bind(this, arguments));\n};\n\n\npimcore.helpers.closeAllUnmodified = function () {\n    var unmodifiedElements = [];\n\n    var tabs = Ext.getCmp(\"pimcore_panel_tabs\").items;\n    if (tabs.getCount() > 0) {\n        tabs.each(function (item, index, length) {\n            if (item.title.indexOf(\"*\") > -1) {\n                unmodifiedElements.push(item);\n            }\n        });\n    }\n\n\n    pimcore.helpers.closeAllElements(unmodifiedElements);\n};\n\npimcore.helpers.closeAllElements = function (except, tabPanel) {\n\n    var exceptions = [];\n    if (except instanceof Ext.Panel) {\n        exceptions.push(except);\n    } else if (except instanceof Array) {\n        exceptions = except;\n    }\n\n    if (typeof tabPanel == \"undefined\") {\n        tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    }\n\n    var tabs = tabPanel.items;\n    if (tabs.getCount() > 0) {\n        tabs.each(function (item, index, length) {\n            window.setTimeout(function () {\n                if (!in_array(item, exceptions)) {\n                    item.close();\n                }\n            }, 100 * index);\n        });\n    }\n};\n\n\npimcore.helpers.loadingShow = function () {\n    pimcore.globalmanager.get(\"loadingmask\").show();\n};\n\npimcore.helpers.loadingHide = function () {\n    pimcore.globalmanager.get(\"loadingmask\").hide();\n};\n\npimcore.helpers.itemselector = function (multiselect, callback, restrictions, config) {\n    var itemselector = new pimcore.element.selector.selector(multiselect, callback, restrictions, config);\n};\n\n\npimcore.helpers.activateMaintenance = function () {\n\n    Ext.Ajax.request({\n        url: Routing.generate('pimcore_admin_misc_maintenance', {activate: true}),\n        method: \"POST\"\n    });\n\n    var button = Ext.get(\"pimcore_menu_maintenance\");\n    if (!button.isVisible()) {\n        pimcore.helpers.showMaintenanceDisableButton();\n    }\n};\n\npimcore.helpers.deactivateMaintenance = function () {\n\n    Ext.Ajax.request({\n        url: Routing.generate('pimcore_admin_misc_maintenance', {deactivate: true}),\n        method: \"POST\"\n    });\n\n    var button = Ext.get(\"pimcore_menu_maintenance\");\n    button.setStyle(\"display\", \"none\");\n};\n\npimcore.helpers.showMaintenanceDisableButton = function () {\n    var button = Ext.get(\"pimcore_menu_maintenance\");\n    button.show();\n    button.clearListeners();\n    button.on(\"click\", pimcore.helpers.deactivateMaintenance);\n};\n\npimcore.helpers.download = function (url) {\n    pimcore.settings.showCloseConfirmation = false;\n    window.setTimeout(function () {\n        pimcore.settings.showCloseConfirmation = true;\n    }, 1000);\n\n    location.href = url;\n};\n\npimcore.helpers.getFileExtension = function (filename) {\n    var extensionP = filename.split(\"\\.\");\n    return extensionP[extensionP.length - 1];\n};\n\n\npimcore.helpers.getOpenTab = function () {\n    var openTabs = localStorage.getItem(\"pimcore_opentabs\");\n    if (!openTabs) {\n        openTabs = [];\n    } else {\n        // using native JSON functionalities here because of /admin/login/deeplink -> No ExtJS should be loaded\n        openTabs = JSON.parse(openTabs);\n    }\n\n    return openTabs;\n};\n\npimcore.helpers.clearOpenTab = function () {\n    localStorage.setItem(\"pimcore_opentabs\", JSON.stringify([]));\n};\n\npimcore.helpers.rememberOpenTab = function (item, forceOpenTab) {\n    var openTabs = pimcore.helpers.getOpenTab();\n\n    if (!in_array(item, openTabs)) {\n        openTabs.push(item);\n    }\n\n    // using native JSON functionalities here because of /admin/login/deeplink -> No ExtJS should be loaded\n    localStorage.setItem(\"pimcore_opentabs\", JSON.stringify(openTabs));\n    if (forceOpenTab) {\n        localStorage.setItem(\"pimcore_opentabs_forceopenonce\", true);\n    }\n};\n\npimcore.helpers.forgetOpenTab = function (item) {\n\n    var openTabs = pimcore.helpers.getOpenTab();\n\n    if (in_array(item, openTabs)) {\n        var pos = array_search(item, openTabs);\n        openTabs.splice(pos, 1);\n    }\n\n    // using native JSON functionalities here because of /admin/login/deeplink -> No ExtJS should be loaded\n    localStorage.setItem(\"pimcore_opentabs\", JSON.stringify(openTabs));\n};\n\npimcore.helpers.forceOpenMemorizedTabsOnce = function () {\n    if (localStorage.getItem(\"pimcore_opentabs_forceopenonce\")) {\n        localStorage.removeItem(\"pimcore_opentabs_forceopenonce\");\n        return true;\n    }\n    return false;\n};\n\npimcore.helpers.openMemorizedTabs = function () {\n    var openTabs = pimcore.helpers.getOpenTab();\n\n    // limit to the latest 10\n    openTabs.reverse();\n    openTabs.splice(10, 1000);\n    openTabs.reverse();\n\n    var openedTabs = [];\n\n    for (var i = 0; i < openTabs.length; i++) {\n        if (!empty(openTabs[i])) {\n            if (!in_array(openTabs[i], openedTabs)) {\n                var parts = openTabs[i].split(\"_\");\n                window.setTimeout(function (parts) {\n                    if (parts[1] && parts[2]) {\n                        if (parts[0] == \"asset\") {\n                            pimcore.helpers.openAsset(parts[1], parts[2], {\n                                ignoreForHistory: true,\n                                ignoreNotFoundError: true\n                            });\n                        } else if (parts[0] == \"document\") {\n                            pimcore.helpers.openDocument(parts[1], parts[2], {\n                                ignoreForHistory: true,\n                                ignoreNotFoundError: true\n                            });\n                        } else if (parts[0] == \"object\") {\n                            pimcore.helpers.openObject(parts[1], parts[2], {\n                                ignoreForHistory: true,\n                                ignoreNotFoundError: true\n                            });\n                        }\n                    }\n                }.bind(this, parts), 200);\n            }\n            openedTabs.push(openTabs[i]);\n        }\n    }\n};\n\npimcore.helpers.assetSingleUploadDialog = function (parent, parentType, success, failure, context, uploadAssetType) {\n\n    var params = {};\n    params['parent' + ucfirst(parentType)] = parent;\n\n    var url = Routing.generate('pimcore_admin_asset_addassetcompatibility', params);\n    if (context) {\n        url += \"&context=\" + Ext.encode(context);\n    }\n\n    if(uploadAssetType) {\n        url += \"&uploadAssetType=\" + uploadAssetType;\n    }\n\n    pimcore.helpers.uploadDialog(url, 'Filedata', success, failure);\n};\n\n/**\n * @deprecated\n */\npimcore.helpers.addCsrfTokenToUrl = function (url) {\n    console.error('pimcore.helpers.addCsrfTokenToUrl() function is deprecated. It will be removed in Pimcore 11.');\n\n    // we don't use the CSRF token in the query string\n    return url;\n};\n\npimcore.helpers.uploadDialog = function (url, filename, success, failure, description) {\n\n    if (typeof success != \"function\") {\n        success = function () {\n        };\n    }\n\n    if (typeof failure != \"function\") {\n        failure = function () {\n        };\n    }\n\n    if (typeof filename != \"string\") {\n        filename = \"Filedata\";\n    }\n\n    if (empty(filename)) {\n        filename = \"Filedata\";\n    }\n\n    var uploadWindowCompatible = new Ext.Window({\n        autoHeight: true,\n        title: t('upload'),\n        closeAction: 'close',\n        width: 400,\n        modal: true\n    });\n\n    var items = [];\n\n    if (description) {\n        items.push({\n           xtype: 'displayfield',\n           value: description\n        });\n    }\n\n    items.push({\n        xtype: 'fileuploadfield',\n        emptyText: t(\"select_a_file\"),\n        fieldLabel: t(\"file\"),\n        width: 470,\n        name: filename,\n        buttonText: \"\",\n        buttonConfig: {\n            iconCls: 'pimcore_icon_upload'\n        },\n        listeners: {\n            change: function (fileUploadField) {\n                if(fileUploadField.fileInputEl.dom.files[0].size > pimcore.settings[\"upload_max_filesize\"]) {\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"file_is_bigger_that_upload_limit\") + \" \" + fileUploadField.fileInputEl.dom.files[0].name, \"error\");\n                    return;\n                }\n\n                uploadForm.getForm().submit({\n                    url: url,\n                    params: {\n                        csrfToken: pimcore.settings['csrfToken']\n                    },\n                    waitMsg: t(\"please_wait\"),\n                    success: function (el, res) {\n                        // content-type in response has to be text/html, otherwise (when application/json is sent)\n                        // chrome will complain in Ext.form.Action.Submit and mark the submission as failed\n                        success(res);\n                        uploadWindowCompatible.close();\n                    },\n                    failure: function (el, res) {\n                        failure(res);\n                        uploadWindowCompatible.close();\n                    }\n                });\n            }\n        }\n    });\n\n\n    var uploadForm = new Ext.form.FormPanel({\n        fileUpload: true,\n        width: 500,\n        bodyStyle: 'padding: 10px;',\n        items: items\n    });\n\n    uploadWindowCompatible.add(uploadForm);\n    uploadWindowCompatible.show();\n    uploadWindowCompatible.setWidth(501);\n    uploadWindowCompatible.updateLayout();\n};\n\n\npimcore.helpers.getClassForIcon = function (icon) {\n\n    var styleContainerId = \"pimcore_dynamic_class_for_icon\";\n    var styleContainer = Ext.get(styleContainerId);\n    if (!styleContainer) {\n        styleContainer = Ext.getBody().insertHtml(\"beforeEnd\", '<style type=\"text/css\" id=\"' + styleContainerId\n            + '\"></style>', true);\n    }\n\n    var content = styleContainer.dom.innerHTML;\n    var classname = \"pimcore_dynamic_class_for_icon_\" + uniqid();\n    content += (\".\" + classname + \" { background: url(\" + icon + \") left center no-repeat !important; background-size: 100% 100% !important; }\\n\");\n    styleContainer.dom.innerHTML = content;\n\n    return classname;\n};\n\npimcore.helpers.searchAction = function (type) {\n    pimcore.helpers.itemselector(false, function (selection) {\n            pimcore.helpers.openElement(selection.id, selection.type, selection.subtype);\n        }, {type: [type]},\n        {\n            asTab: true,\n            context: {\n                scope: \"globalSearch\"\n            }\n        });\n};\n\n\npimcore.helpers.openElementByIdDialog = function (type, keyCode, e) {\n\n    if (e[\"stopEvent\"]) {\n        e.stopEvent();\n    }\n\n    Ext.MessageBox.prompt(t('open_' + type + '_by_id'), t('please_enter_the_id_of_the_' + type),\n        function (button, value, object) {\n            if (button == \"ok\" && !Ext.isEmpty(value)) {\n                pimcore.helpers.openElement(value, type);\n            }\n        });\n};\n\npimcore.helpers.openDocumentByPath = function (path) {\n    pimcore.helpers.openElement(path, \"document\");\n};\n\npimcore.helpers.sanitizeAllowedTypes = function (data, name) {\n    if (data[name]) {\n        var newList = [];\n        for (var i = 0; i < data[name].length; i++) {\n            newList.push(data[name][i][name]);\n        }\n        data[name] = newList;\n    }\n};\n\npimcore.helpers.treeNodeThumbnailTimeout = null;\npimcore.helpers.treeNodeThumbnailHideTimeout = null;\npimcore.helpers.treeNodeThumbnailLastClose = 0;\n\npimcore.helpers.treeNodeThumbnailPreview = function (treeView, record, item, index, e, eOpts) {\n\n    if (typeof record.data[\"thumbnail\"] != \"undefined\") {\n\n        // only display thumbnails when dnd is not active\n        if (Ext.dd.DragDropMgr.dragCurrent) {\n            return;\n        }\n\n        var thumbnail = record.data[\"thumbnail\"];\n\n        if (thumbnail) {\n\n            if (pimcore.helpers.treeNodeThumbnailHideTimeout) {\n                clearTimeout(pimcore.helpers.treeNodeThumbnailHideTimeout);\n                pimcore.helpers.treeNodeThumbnailHideTimeout = null;\n            }\n\n            var treeEl = Ext.get(\"pimcore_panel_tree_\" + this.position);\n            var position = treeEl.getOffsetsTo(Ext.getBody());\n            position = position[0];\n\n            if (this.position == \"right\") {\n                position = position - 420;\n            } else {\n                position = treeEl.getWidth() + position;\n            }\n\n            var container = Ext.get(\"pimcore_tree_preview\");\n            if (!container) {\n                container = Ext.getBody().insertHtml(\"beforeEnd\", '<div id=\"pimcore_tree_preview\" class=\"hidden\"><div id=\"pimcore_tree_preview_thumb\"></div></div>');\n                container = Ext.get(container);\n            }\n\n            var triggerTime = (new Date()).getTime();\n            var thumbContainer = Ext.get(\"pimcore_tree_preview_thumb\");\n            thumbContainer.update('');\n\n            pimcore.helpers.treeNodeThumbnailTimeout = window.setTimeout(function () {\n                let img = document.createElement(\"img\");\n                img.src = thumbnail;\n                img.addEventListener('load', function (ev) {\n\n                    if(triggerTime > pimcore.helpers.treeNodeThumbnailLastClose) {\n                        thumbContainer.addCls('complete');\n                        container.removeCls(\"hidden\");\n                    }\n                });\n\n                img.addEventListener('error', function (ev) {\n                    container.addCls(\"hidden\");\n                });\n\n                container.applyStyles(\"left: \" + position + \"px\");\n                thumbContainer.dom.appendChild(img);\n\n            }, 300);\n        }\n    }\n};\n\npimcore.helpers.treeNodeThumbnailPreviewHide = function () {\n\n    if (pimcore.helpers.treeNodeThumbnailTimeout) {\n        clearTimeout(pimcore.helpers.treeNodeThumbnailTimeout);\n        pimcore.helpers.treeNodeThumbnailTimeout = null;\n    }\n\n    let container = Ext.get(\"pimcore_tree_preview\");\n    if (container) {\n        pimcore.helpers.treeNodeThumbnailLastClose = (new Date()).getTime();\n        pimcore.helpers.treeNodeThumbnailHideTimeout = window.setTimeout(function () {\n            container.addCls(\"hidden\");\n        }, 50);\n    }\n};\n\npimcore.helpers.showUser = function (specificUser) {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"users\")) {\n        var panel = null;\n        try {\n            panel = pimcore.globalmanager.get(\"users\");\n            panel.activate();\n        }\n        catch (e) {\n            panel = new pimcore.settings.user.panel();\n            pimcore.globalmanager.add(\"users\", panel);\n        }\n\n        if (specificUser) {\n            panel.openUser(specificUser);\n        }\n    }\n};\n\npimcore.helpers.insertTextAtCursorPosition = function (text) {\n\n    // get focused element\n    var focusedElement = document.activeElement;\n    var win = window;\n    var doc = document;\n\n    // now check if the focus is inside an iframe\n    try {\n        while (focusedElement.tagName.toLowerCase() == \"iframe\") {\n            win = window[focusedElement.getAttribute(\"name\")];\n            doc = win.document;\n            focusedElement = doc.activeElement;\n        }\n    } catch (e) {\n        console.log(e);\n    }\n\n    var elTagName = focusedElement.tagName.toLowerCase();\n\n    if (elTagName == \"input\" || elTagName == \"textarea\") {\n        insertTextToFormElementAtCursor(focusedElement, text);\n    } else if (elTagName == \"div\" && focusedElement.getAttribute(\"contenteditable\")) {\n        insertTextToContenteditableAtCursor(text, win, doc);\n    }\n\n};\n\n\npimcore.helpers.getMainTabMenuItems = function () {\n    items = [{\n        text: t('close_others'),\n        iconCls: \"\",\n        handler: function (menuItem) {\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            var plugin = tabPanel.getPlugin(\"tabclosemenu\");\n            el = plugin.item;\n            pimcore.helpers.closeAllElements(el);\n            // clear the opentab store, so that also non existing elements are flushed\n            pimcore.helpers.clearOpenTab();\n        }.bind(this)\n    }, {\n        text: t('close_unmodified'),\n        iconCls: \"\",\n        handler: function (item) {\n            pimcore.helpers.closeAllUnmodified();\n            // clear the opentab store, so that also non existing elements are flushed\n            pimcore.helpers.clearOpenTab();\n        }.bind(this)\n    }];\n\n\n    // every tab panel can get this\n    items.push({\n        text: t('close_all'),\n        iconCls: \"\",\n        handler: function (item) {\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            pimcore.helpers.closeAllElements(null, tabPanel);\n            // clear the opentab store, so that also non existing elements are flushed\n            pimcore.helpers.clearOpenTab();\n        }.bind(this)\n    });\n\n    return items;\n};\n\n\n//pimcore.helpers.handleTabRightClick = function (tabPanel, el, index) {\n//\n//\n//    if(Ext.get(el.tab)) {\n//        Ext.get(el.tab).on(\"contextmenu\", function (e) {\n//\n//            var items = [];\n//\n//            // this is only for the main tab panel\n//            if(tabPanel.getId() == \"pimcore_panel_tabs\") {\n//                items = [{\n//                    text: t('close_others'),\n//                    iconCls: \"\",\n//                    handler: function (item) {\n//                        pimcore.helpers.closeAllElements(el);\n//                        // clear the opentab store, so that also non existing elements are flushed\n//                        pimcore.helpers.clearOpenTab();\n//                    }.bind(this)\n//                }, {\n//                    text: t('close_unmodified'),\n//                    iconCls: \"\",\n//                    handler: function (item) {\n//                        pimcore.helpers.closeAllUnmodified();\n//                        // clear the opentab store, so that also non existing elements are flushed\n//                        pimcore.helpers.clearOpenTab();\n//                    }.bind(this)\n//                }];\n//            }\n//\n//            // every tab panel can get this\n//            items.push({\n//                text: t('close_all'),\n//                iconCls: \"\",\n//                handler: function (item) {\n//                    pimcore.helpers.closeAllElements(null,tabPanel);\n//                    // clear the opentab store, so that also non existing elements are flushed\n//                    pimcore.helpers.clearOpenTab();\n//                }.bind(this)\n//            });\n//\n//\n//            var menu = new Ext.menu.Menu({\n//                items: items\n//            });\n//\n//            menu.showAt(e.getXY());\n//            e.stopEvent();\n//        });\n//    }\n//};\n\npimcore.helpers.uploadAssetFromFileObject = function (file, url, callbackSuccess, callbackProgress, callbackFailure) {\n\n    if (typeof callbackSuccess != \"function\") {\n        callbackSuccess = function () {\n        };\n    }\n    if (typeof callbackProgress != \"function\") {\n        callbackProgress = function () {\n        };\n    }\n    if (typeof callbackFailure != \"function\") {\n        callbackFailure = function () {\n        };\n    }\n\n    if (file[\"size\"]) {\n        if (file[\"size\"] > pimcore.settings[\"upload_max_filesize\"]) {\n            callbackSuccess();\n            pimcore.helpers.showNotification(t(\"error\"), t(\"file_is_bigger_that_upload_limit\") + \" \" + file.name, \"error\");\n            return;\n        }\n    }\n\n    var data = new FormData();\n    data.append('Filedata', file);\n    data.append(\"filename\", file.name);\n    data.append(\"csrfToken\", pimcore.settings['csrfToken']);\n\n    var request = new XMLHttpRequest();\n\n    // these wrappers simulate the jQuery behavior\n    var successWrapper = function (ev) {\n        var data = JSON.parse(request.responseText);\n        if(ev.currentTarget.status < 400 && data.success === true) {\n            callbackSuccess(data, request.statusText, request);\n        } else {\n            callbackFailure(request, request.statusText, ev);\n        }\n    };\n\n    var errorWrapper = function (ev) {\n        callbackFailure(request, request.statusText, ev);\n    };\n\n    request.upload.addEventListener(\"progress\", callbackProgress, false);\n    request.addEventListener(\"load\", successWrapper, false);\n    request.addEventListener(\"error\", errorWrapper, false);\n    request.addEventListener(\"abort\", errorWrapper, false);\n    request.open('POST', url);\n    request.send(data);\n};\n\n\npimcore.helpers.searchAndMove = function (parentId, callback, type) {\n    if (type == \"object\") {\n        config = {\n            type: [\"object\"],\n            subtype: {\n                object: [\"object\", \"folder\"]\n            },\n            specific: {\n                classes: null\n            }\n        };\n    } else {\n        config = {\n            type: [type]\n        }\n    }\n    pimcore.helpers.itemselector(true, function (selection) {\n\n        var jobs = [];\n\n        if (selection && selection.length > 0) {\n            for (var i = 0; i < selection.length; i++) {\n                var params;\n                if (type == \"object\") {\n                    params = {\n                        id: selection[i][\"id\"],\n                        values: Ext.encode({\n                            parentId: parentId\n                        })\n                    };\n                } else {\n                    params = {\n                        id: selection[i][\"id\"],\n                        parentId: parentId\n                    };\n                }\n                jobs.push([{\n                    url: Routing.getBaseUrl() + \"/admin/\" + type + \"/update\",\n                    method: 'PUT',\n                    params: params\n                }]);\n            }\n        }\n\n        if (jobs.length == 0) {\n            return;\n        }\n\n        this.addChildProgressBar = new Ext.ProgressBar({\n            text: t('initializing')\n        });\n\n        this.addChildWindow = new Ext.Window({\n            title: t(\"move\"),\n            layout: 'fit',\n            width: 200,\n            bodyStyle: \"padding: 10px;\",\n            closable: false,\n            plain: true,\n            items: [this.addChildProgressBar],\n            listeners: pimcore.helpers.getProgressWindowListeners()\n        });\n\n        this.addChildWindow.show();\n\n        var pj = new pimcore.tool.paralleljobs({\n            success: function (callbackFunction) {\n\n                if (this.addChildWindow) {\n                    this.addChildWindow.close();\n                }\n\n                this.deleteProgressBar = null;\n                this.addChildWindow = null;\n\n                if (typeof callbackFunction == \"function\") {\n                    callbackFunction();\n                }\n\n                try {\n                    var node = pimcore.globalmanager.get(\"layout_object_tree\").tree.getNodeById(this.object.id);\n                    if (node) {\n                        tree.getStore().load({\n                            node: node\n                        });\n                    }\n                } catch (e) {\n                    // node is not present\n                }\n            }.bind(this, callback),\n            update: function (currentStep, steps, percent) {\n                if (this.addChildProgressBar) {\n                    var status = currentStep / steps;\n                    this.addChildProgressBar.updateProgress(status, percent + \"%\");\n                }\n            }.bind(this),\n            failure: function (response) {\n                this.addChildWindow.close();\n                Ext.MessageBox.alert(t(\"error\"), t(response));\n            }.bind(this),\n            jobs: jobs\n        });\n\n    }.bind(this), config);\n};\n\n\npimcore.helpers.sendTestEmail = function (from, to, subject, emailType, documentPath, content) {\n\n    if(!emailType) {\n        emailType = 'text';\n    }\n\n    var emailContentTextField = new Ext.form.TextArea({\n        name: \"content\",\n        fieldLabel: t(\"content\"),\n        height: 300,\n    });\n    emailContentTextField.hide();\n\n    var documentTextField = new Ext.form.TextField({\n        name: 'documentPath',\n        flex: 1,\n        editable: false\n    });\n    var searchDocumentButton = new Ext.Button({\n        name: 'searchDocument',\n        fieldLabel: t('document'),\n        iconCls: 'pimcore_icon_search',\n        handler: function() {\n            pimcore.helpers.itemselector(false, function(e) {\n                documentTextField.setValue(e.fullpath);\n            }, {\n                type: [\"document\"],\n                subtype: {\n                    document: [\"email\", \"newsletter\"]\n                }\n            });\n        }\n    });\n\n    var documentComponent = Ext.create('Ext.form.FieldContainer', {\n        fieldLabel: t('document'),\n        layout: 'hbox',\n        items: [\n            documentTextField,\n            searchDocumentButton\n        ],\n        componentCls: \"object_field\",\n        border: false,\n        style: {\n            padding: 0\n        }\n    });\n    documentComponent.hide();\n\n\n    var emailTypeDropdown = new Ext.form.ComboBox({\n        name: 'emailType',\n        width: 300,\n        value: emailType,\n        store: [\n            ['document', t('document')],\n            ['html', t('html')],\n            ['text', t('text')]\n        ],\n        fieldLabel: t('type'),\n        listeners: {\n            select: function(t) {\n                if(t.value == 'text' || t.value == 'html') {\n                    emailContentTextField.show();\n                } else {\n                    emailContentTextField.hide();\n                }\n\n                if(t.value == 'document') {\n                    documentComponent.show();\n                    paramGrid.show();\n                } else {\n                    documentComponent.hide();\n                    paramGrid.hide();\n                }\n            }\n        }\n    });\n\n    var fromTextField = new Ext.form.TextField({\n        name: \"from\",\n        fieldLabel: t(\"from\"),\n    });\n\n    var toTextField = new Ext.form.TextField({\n        name: \"to\",\n        fieldLabel: t(\"to\"),\n    });\n\n    var subjectTextField = new Ext.form.TextField({\n        name: \"subject\",\n        fieldLabel: t(\"subject\"),\n    });\n\n    var paramsStore = new Ext.data.ArrayStore({\n        fields: [\n            {name: 'key', type: 'string', persist: false},\n            {name: 'value', type: 'string', persist: false}\n        ]\n    });\n\n    var paramGrid = Ext.create('Ext.grid.Panel', {\n        store: paramsStore,\n        columns: [\n            {\n                text: t('key'),\n                dataIndex: 'key',\n                editor: new Ext.form.TextField(),\n                width: 200\n            },\n            {\n                text: t('value'),\n                dataIndex: 'value',\n                editor: new Ext.form.TextField(),\n                flex: 1\n            }\n        ],\n        stripeRows: true,\n        columnLines: true,\n        bodyCls: \"pimcore_editable_grid\",\n        autoHeight: true,\n        selModel: Ext.create('Ext.selection.CellModel'),\n        hideHeaders: false,\n        plugins: [\n            Ext.create('Ext.grid.plugin.CellEditing', {})\n        ],\n        tbar: [\n            {\n                iconCls: \"pimcore_icon_table_row pimcore_icon_overlay_add\",\n                handler: function() {\n                    paramsStore.add({'key' : '', 'value': ''});\n                }\n            },\n            {\n                xtype: 'label',\n                html: t('parameters')\n            }\n        ]\n    });\n    paramGrid.hide();\n\n    var win = new Ext.Window({\n\n        width: 800,\n        height: 600,\n        modal: true,\n        title: t(\"send_test_email\"),\n        layout: \"fit\",\n        closeAction: \"close\",\n        items: [{\n            xtype: \"form\",\n            bodyStyle: \"padding:10px;\",\n            itemId: \"form\",\n            items: [\n                fromTextField,\n                toTextField,\n                subjectTextField,\n                emailTypeDropdown,\n                emailContentTextField,\n                documentComponent,\n                paramGrid\n            ],\n            defaults: {\n                width: 780\n            }\n        }],\n        buttons: [{\n            text: t(\"send\"),\n            iconCls: \"pimcore_icon_email\",\n            handler: function () {\n                send();\n            }\n        }]\n    });\n\n    var send = function () {\n\n\n        var params = win.getComponent(\"form\").getForm().getFieldValues();\n        if(emailTypeDropdown.getValue() === 'document') {\n            var allRecords = paramsStore\n                .queryBy(function() { return true; }) // returns a collection\n                .getRange();\n            var emailParamsArray = [];\n            for (var i = 0; i < allRecords.length; i++) {\n                emailParamsArray.push({\"key\": allRecords[i].data['key'], \"value\": allRecords[i].data['value']});\n\n            }\n            params['mailParamaters'] =  JSON.stringify(emailParamsArray);\n        }\n\n\n        win.disable();\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_email_sendtestemail'),\n            params: params,\n            method: \"post\",\n            success: function () {\n                Ext.Msg.show({\n                    title: t(\"send_test_email\"),\n                    message: t(\"send_test_email_success\"),\n                    buttons: Ext.Msg.YESNO,\n                    icon: Ext.Msg.QUESTION,\n                    fn: function (btn) {\n                        win.enable();\n                        if (btn === 'no') {\n                            win.close();\n                        }\n                    }\n                });\n            },\n            failure: function () {\n                win.close();\n            }\n        });\n\n    };\n\n\n\n    if(emailType) {\n        emailTypeDropdown.setValue(emailType);\n        if(emailType == 'document') {\n            documentComponent.show();\n            paramGrid.show();\n        }\n        if(emailType == 'html' || emailType == 'text') {\n            emailContentTextField.show();\n        }\n    }\n    if(documentPath) {\n        documentTextField.setValue(documentPath);\n    }\n    if(content) {\n        emailContentTextField.setValue(content);\n    }\n    if(from) {\n        fromTextField.setValue(from);\n    }\n    if(to) {\n        toTextField.setValue(to);\n    }\n    if(subject) {\n        subjectTextField.setValue(subject);\n    }\n\n\n    win.show();\n\n\n};\n\n/* this is here so that it can be opened in the parent window when in editmode frame */\npimcore.helpers.openImageCropper = function (imageId, data, saveCallback, config) {\n    var cropper = new top.pimcore.element.tag.imagecropper(imageId, data, saveCallback, config);\n    return cropper;\n};\n\n/* this is here so that it can be opened in the parent window when in editmode frame */\npimcore.helpers.openImageHotspotMarkerEditor = function (imageId, data, saveCallback, config) {\n    var editor = new pimcore.element.tag.imagehotspotmarkereditor(imageId, data, saveCallback, config);\n    return editor;\n};\n\n\npimcore.helpers.editmode = {};\n\npimcore.helpers.editmode.openLinkEditPanel = function (data, callback) {\n\n\n    var internalTypeField = new Ext.form.Hidden({\n        fieldLabel: 'internalType',\n        value: data.internalType,\n        name: 'internalType',\n        readOnly: true,\n        width: 520\n    });\n\n    var linkTypeField = new Ext.form.Hidden({\n        fieldLabel: 'linktype',\n        value: data.linktype,\n        name: 'linktype',\n        readOnly: true,\n        width: 520\n    });\n\n    var fieldPath = new Ext.form.TextField({\n        fieldLabel: t('path'),\n        value: data.path,\n        name: \"path\",\n        width: 520,\n        fieldCls: \"pimcore_droptarget_input\",\n        enableKeyEvents: true,\n        listeners: {\n            keyup: function (el) {\n                const value = el.getValue();\n                const pathRegex = new RegExp('^(/|(/[^/]+)+/?)$');\n\n                if(value && !value.match(pathRegex)) {\n                    internalTypeField.setValue(null);\n                    linkTypeField.setValue(\"direct\");\n                }\n            }\n        }\n    });\n\n\n    fieldPath.on(\"render\", function (el) {\n        // add drop zone\n        new Ext.dd.DropZone(el.getEl(), {\n            reference: this,\n            ddGroup: \"element\",\n            getTargetFromEvent: function (e) {\n                return fieldPath.getEl();\n            },\n\n            onNodeOver: function (target, dd, e, data) {\n                if (data.records.length === 1 && data.records[0].data.type !== \"folder\") {\n                    return Ext.dd.DropZone.prototype.dropAllowed;\n                }\n            }.bind(this),\n\n            onNodeDrop: function (target, dd, e, data) {\n\n                if(!pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                    return false;\n                }\n\n                data = data.records[0].data;\n                if (data.type !== \"folder\") {\n                    internalTypeField.setValue(data.elementType);\n                    linkTypeField.setValue('internal');\n                    fieldPath.setValue(data.path);\n                    return true;\n                }\n                return false;\n            }.bind(this)\n        });\n    }.bind(this));\n\n    var form = new Ext.FormPanel({\n        itemId: \"form\",\n        items: [\n            {\n                xtype: 'tabpanel',\n                deferredRender: false,\n                defaults: {autoHeight: true, bodyStyle: 'padding:10px'},\n                border: false,\n                items: [\n                    {\n                        title: t('basic'),\n                        layout: 'vbox',\n                        border: false,\n                        defaultType: 'textfield',\n                        items: [\n                            // do not change the order, the server-side works with setValues - setPath expects\n                            // the types are already set correctly\n                            internalTypeField,\n                            linkTypeField,\n                            {\n                                fieldLabel: t('text'),\n                                name: 'text',\n                                value: data.text\n                            },\n                            {\n                                xtype: \"fieldcontainer\",\n                                layout: 'hbox',\n                                border: false,\n                                items: [fieldPath, {\n                                    xtype: \"button\",\n                                    iconCls: \"pimcore_icon_search\",\n                                    style: \"margin-left: 5px\",\n                                    handler: function () {\n                                        pimcore.helpers.itemselector(false, function (item) {\n                                            if (item) {\n                                                internalTypeField.setValue(item.type);\n                                                linkTypeField.setValue('internal');\n                                                fieldPath.setValue(item.fullpath);\n                                                return true;\n                                            }\n                                        }, {\n                                            type: [\"asset\", \"document\", \"object\"]\n                                        });\n                                    }\n                                }]\n                            },\n                            {\n                                xtype: 'fieldset',\n                                layout: 'vbox',\n                                title: t('properties'),\n                                collapsible: false,\n                                defaultType: 'textfield',\n                                width: '100%',\n                                defaults: {\n                                    width: 250\n                                },\n                                items: [\n                                    {\n                                        xtype: \"combo\",\n                                        fieldLabel: t('target'),\n                                        name: 'target',\n                                        triggerAction: 'all',\n                                        editable: true,\n                                        mode: \"local\",\n                                        store: [\"\", \"_blank\", \"_self\", \"_top\", \"_parent\"],\n                                        value: data.target,\n                                        width: 300\n                                    },\n                                    {\n                                        fieldLabel: t('parameters'),\n                                        name: 'parameters',\n                                        value: data.parameters\n                                    },\n                                    {\n                                        fieldLabel: t('anchor'),\n                                        name: 'anchor',\n                                        value: data.anchor\n                                    },\n                                    {\n                                        fieldLabel: t('title'),\n                                        name: 'title',\n                                        value: data.title\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        title: t('advanced'),\n                        layout: 'form',\n                        defaultType: 'textfield',\n                        border: false,\n                        items: [\n                            {\n                                fieldLabel: t('accesskey'),\n                                name: 'accesskey',\n                                value: data.accesskey\n                            },\n                            {\n                                fieldLabel: t('relation'),\n                                name: 'rel',\n                                width: 300,\n                                value: data.rel\n                            },\n                            {\n                                fieldLabel: ('tabindex'),\n                                name: 'tabindex',\n                                value: data.tabindex\n                            },\n                            {\n                                fieldLabel: t('class'),\n                                name: 'class',\n                                width: 300,\n                                value: data[\"class\"]\n                            },\n                            {\n                                fieldLabel: t('attributes') + ' (key=\"value\")',\n                                name: 'attributes',\n                                width: 300,\n                                value: data[\"attributes\"]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ],\n        buttons: [\n            {\n                text: t(\"empty\"),\n                listeners: {\n                    \"click\": callback[\"empty\"]\n                },\n                iconCls: \"pimcore_icon_empty\"\n            },\n            {\n                text: t(\"cancel\"),\n                listeners: {\n                    \"click\": callback[\"cancel\"]\n                },\n                iconCls: \"pimcore_icon_cancel\"\n            },\n            {\n                text: t(\"save\"),\n                listeners: {\n                    \"click\": callback[\"save\"]\n                },\n                iconCls: \"pimcore_icon_save\"\n            }\n        ]\n    });\n\n\n    var window = new Ext.Window({\n        modal: false,\n        width: 600,\n        height: 470,\n        title: t(\"edit_link\"),\n        items: [form],\n        layout: \"fit\"\n    });\n\n    window.show();\n\n    return window;\n};\n\n\npimcore.helpers.editmode.openVideoEditPanel = function (data, callback) {\n\n    const allowedTypes = data.allowedTypes;\n    var window = null;\n    var form = null;\n    var fieldPath = new Ext.form.TextField({\n        fieldLabel: t('path'),\n        itemId: \"path\",\n        value: data.path,\n        name: \"path\",\n        width: 420,\n        fieldCls: \"pimcore_droptarget_input\",\n        enableKeyEvents: true,\n        listeners: {\n            keyup: function (el) {\n                if (allowedTypes.includes(\"youtube\")\n                    && (el.getValue().indexOf(\"youtu.be\") >= 0 || el.getValue().indexOf(\"youtube.com\") >= 0) && el.getValue().indexOf(\"http\") >= 0) {\n                    form.getComponent(\"type\").setValue(\"youtube\");\n                    updateType(\"youtube\");\n                } else if (allowedTypes.includes(\"vimeo\")\n                    && el.getValue().indexOf(\"vimeo\") >= 0 && el.getValue().indexOf(\"http\") >= 0) {\n                    form.getComponent(\"type\").setValue(\"vimeo\");\n                    updateType(\"vimeo\");\n                } else if (allowedTypes.includes(\"dailymotion\")\n                    && (el.getValue().indexOf(\"dai.ly\") >= 0 || el.getValue().indexOf(\"dailymotion\") >= 0) && el.getValue().indexOf(\"http\") >= 0) {\n                    form.getComponent(\"type\").setValue(\"dailymotion\");\n                    updateType(\"dailymotion\");\n                }\n            }.bind(this)\n        }\n    });\n\n    var poster = new Ext.form.TextField({\n        fieldLabel: t('poster_image'),\n        value: data.poster,\n        name: \"poster\",\n        width: 420,\n        fieldCls: \"pimcore_droptarget_input\",\n        enableKeyEvents: true,\n        listeners: {\n            keyup: function (el) {\n                //el.setValue(data.poster)\n            }.bind(this)\n        }\n    });\n\n    var initDD = function (el) {\n        // register at global DnD manager\n        new Ext.dd.DropZone(el.getEl(), {\n            reference: this,\n            ddGroup: \"element\",\n            getTargetFromEvent: function (e) {\n                return el.getEl();\n            },\n\n            onNodeOver: function (target, dd, e, data) {\n                if(data.records.length === 1) {\n                    data = data.records[0].data;\n                    if (target && target.getId() == poster.getId()) {\n                        if (data.elementType == \"asset\" && data.type == \"image\") {\n                            return Ext.dd.DropZone.prototype.dropAllowed;\n                        }\n                    } else {\n                        if (data.elementType == \"asset\" && data.type == \"video\") {\n                            return Ext.dd.DropZone.prototype.dropAllowed;\n                        }\n                    }\n                }\n                return Ext.dd.DropZone.prototype.dropNotAllowed;\n            }.bind(this),\n\n            onNodeDrop: function (target, dd, e, data) {\n\n                if(!pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                    return false;\n                }\n\n                if (target) {\n                    data = data.records[0].data;\n\n                    if (target.getId() == fieldPath.getId()) {\n                        if (data.elementType == \"asset\" && data.type == \"video\") {\n                            fieldPath.setValue(data.path);\n                            form.getComponent(\"type\").setValue(\"asset\");\n                            updateType(\"asset\");\n                            return true;\n                        }\n                    } else if (target.getId() == poster.getId()) {\n                        if (data.elementType == \"asset\" && data.type == \"image\") {\n                            poster.setValue(data.path);\n                            return true;\n                        }\n                    }\n                }\n\n                return false;\n            }.bind(this)\n        });\n    };\n\n    if (allowedTypes.includes(\"asset\")) {\n        fieldPath.on(\"render\", initDD);\n        poster.on(\"render\", initDD);\n    }\n\n    var searchButton = new Ext.Button({\n        iconCls: \"pimcore_icon_search\",\n        handler: function () {\n            pimcore.helpers.itemselector(false, function (item) {\n                if (item) {\n                    fieldPath.setValue(item.fullpath);\n                    return true;\n                }\n            }, {\n                type: [\"asset\"],\n                subtype: {\n                    asset: [\"video\"]\n                }\n            });\n        }\n    });\n\n    var openButton = new Ext.Button({\n        iconCls: \"pimcore_icon_open\",\n        handler: function () {\n            pimcore.helpers.openElement(fieldPath.getValue(), 'asset');\n            window.close();\n        }\n    });\n\n    var posterImageSearchButton = new Ext.Button({\n        iconCls: \"pimcore_icon_search\",\n        handler: function () {\n            pimcore.helpers.itemselector(false, function (item) {\n                if (item) {\n                    poster.setValue(item.fullpath);\n                    return true;\n                }\n            }, {\n                type: [\"asset\"],\n                subtype: {\n                    asset: [\"image\"]\n                }\n            });\n        }\n    });\n\n    var posterImageOpenButton = new Ext.Button({\n        iconCls: \"pimcore_icon_open\",\n        handler: function () {\n            pimcore.helpers.openElement(poster.getValue(), 'asset');\n            window.close();\n        }\n    });\n\n    var updateType = function (type) {\n        searchButton.enable();\n        openButton.enable();\n\n        var labelEl = form.getComponent(\"pathContainer\").getComponent(\"path\").labelEl;\n        labelEl.update(t(\"path\"));\n\n        if (type != \"asset\") {\n            searchButton.disable();\n            openButton.disable();\n\n            poster.hide();\n            poster.setValue(\"\");\n            form.getComponent(\"posterContainer\").hide();\n            form.getComponent(\"title\").hide();\n            form.getComponent(\"title\").setValue(\"\");\n            form.getComponent(\"description\").hide();\n            form.getComponent(\"description\").setValue(\"\");\n        } else {\n            poster.show();\n            form.getComponent(\"posterContainer\").show();\n            form.getComponent(\"title\").show();\n            form.getComponent(\"description\").show();\n        }\n\n        if (type == \"youtube\") {\n            labelEl.update(\"ID\");\n        }\n\n        if (type == \"vimeo\") {\n            labelEl.update(\"ID\");\n        }\n\n        if (type == \"dailymotion\") {\n            labelEl.update(\"ID\");\n        }\n    };\n\n    form = new Ext.FormPanel({\n        itemId: \"form\",\n        bodyStyle: \"padding:10px;\",\n        items: [{\n            xtype: \"combo\",\n            itemId: \"type\",\n            fieldLabel: t('type'),\n            name: 'type',\n            triggerAction: 'all',\n            editable: false,\n            width: 270,\n            mode: \"local\",\n            store: allowedTypes,\n            value: data.type,\n            listeners: {\n                select: function (combo) {\n                    var type = combo.getValue();\n                    updateType(type);\n                }.bind(this)\n            }\n        }, {\n            xtype: \"fieldcontainer\",\n            layout: 'hbox',\n            border: false,\n            itemId: \"pathContainer\",\n            items: [fieldPath, searchButton, openButton]\n        }, {\n            xtype: \"fieldcontainer\",\n            layout: 'hbox',\n            border: false,\n            itemId: \"posterContainer\",\n            items: [poster, posterImageSearchButton, posterImageOpenButton]\n        }, {\n            xtype: \"textfield\",\n            name: \"title\",\n            itemId: \"title\",\n            fieldLabel: t('title'),\n            width: 420,\n            value: data.title\n        }, {\n            xtype: \"textarea\",\n            itemId: \"description\",\n            name: \"description\",\n            fieldLabel: t('description'),\n            width: 420,\n            height: 50,\n            value: data.description\n        }],\n        buttons: [\n            {\n                text: t(\"save\"),\n                listeners: {\n                    \"click\": callback[\"save\"]\n                },\n                iconCls: \"pimcore_icon_save\"\n            },\n            {\n                text: t(\"cancel\"),\n                iconCls: \"pimcore_icon_cancel\",\n                listeners: {\n                    \"click\": callback[\"cancel\"]\n                }\n            }\n        ]\n    });\n\n    window = new Ext.Window({\n        width: 510,\n        height: 370,\n        title: t(\"video\"),\n        items: [form],\n        layout: \"fit\",\n        listeners: {\n            afterrender: function () {\n                updateType(data.type);\n            }.bind(this)\n        }\n    });\n    window.show();\n\n    return window;\n};\n\n\npimcore.helpers.showAbout = function () {\n\n    var html = '<div class=\"pimcore_about_window\">';\n    html += '<br><img src=\"/bundles/pimcoreadmin/img/logo-gray.svg\" style=\"width: 300px;\"><br>';\n    html += '<br><b>Version: ' + pimcore.settings.version + '</b>';\n    html += '<br><b>Git Hash: <a href=\"https://github.com/pimcore/pimcore/commit/' + pimcore.settings.build + '\" target=\"_blank\">' + pimcore.settings.build + '</a></b>';\n    html += '<br><br>&copy; by pimcore GmbH (<a href=\"https://pimcore.com/\" target=\"_blank\">pimcore.com</a>)';\n    html += '<br><br><a href=\"https://github.com/pimcore/pimcore/blob/10.5/LICENSE.md\" target=\"_blank\">License</a> | ';\n    html += '<a href=\"https://pimcore.com/en/about/contact\" target=\"_blank\">Contact</a>';\n    html += '<img src=\"/bundles/pimcoreadmin/img/austria-heart.svg\" style=\"position:absolute;top:172px;right:45px;width:32px;\">';\n    html += '</div>';\n\n    var win = new Ext.Window({\n        title: t(\"about\"),\n        width: 500,\n        height: 300,\n        bodyStyle: \"padding: 10px;\",\n        modal: true,\n        html: html\n    });\n\n    win.show();\n};\n\npimcore.helpers.markColumnConfigAsFavourite = function (objectId, classId, gridConfigId, searchType, global, type) {\n\n    type = type || \"object\";\n\n    var assetRoute = 'pimcore_admin_asset_assethelper_gridmarkfavouritecolumnconfig';\n    var objectRoute = 'pimcore_admin_dataobject_dataobjecthelper_gridmarkfavouritecolumnconfig';\n    var route = null;\n\n    if (type === 'object') {\n        route = objectRoute;\n    }\n    else if (type === 'asset') {\n        route = assetRoute;\n    }\n    else {\n        throw new Error('Unknown type given, given \"' + type + '\"');\n    }\n\n    try {\n        var url = Routing.generate(route);\n\n        Ext.Ajax.request({\n            url: url,\n            method: \"post\",\n            params: {\n                objectId: objectId,\n                classId: classId,\n                gridConfigId: gridConfigId,\n                searchType: searchType,\n                global: global ? 1 : 0,\n                type: type\n            },\n            success: function (response) {\n                try {\n                    var rdata = Ext.decode(response.responseText);\n\n                    if (rdata && rdata.success) {\n                        pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n\n                        if (rdata.spezializedConfigs) {\n                            pimcore.helpers.removeOtherConfigs(objectId, classId, gridConfigId, searchType);\n                        }\n                    }\n                    else {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"),\n                            \"error\", t(rdata.message));\n                    }\n                } catch (e) {\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n                }\n            }.bind(this),\n            failure: function () {\n                pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n            }\n        });\n\n    } catch (e3) {\n        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n    }\n};\n\n\npimcore.helpers.removeOtherConfigs = function (objectId, classId, gridConfigId, searchType) {\n    Ext.MessageBox.show({\n        title: t('apply_to_all_objects'),\n        msg: t('apply_to_all_objects_msg'),\n        buttons: Ext.Msg.YESNO,\n        icon: Ext.MessageBox.INFO,\n        fn: function (btn) {\n            if (btn == \"yes\") {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_dataobject_dataobjecthelper_gridconfigapplytoall'),\n                    method: \"post\",\n                    params: {\n                        objectId: objectId,\n                        classId: classId,\n                        gridConfigId: gridConfigId,\n                        searchType: searchType,\n                    }\n                });\n            }\n\n        }.bind(this)\n    });\n};\n\npimcore.helpers.saveColumnConfig = function (objectId, classId, configuration, searchType, button, callback, settings, type, context) {\n\n    type = type || \"object\";\n\n    var assetRoute = 'pimcore_admin_asset_assethelper_gridsavecolumnconfig';\n    var objectRoute = 'pimcore_admin_dataobject_dataobjecthelper_gridsavecolumnconfig';\n    var route = null;\n\n    if (type === 'object') {\n        route = objectRoute;\n    }\n    else if (type === 'asset') {\n        route = assetRoute;\n    }\n    else {\n        throw new Error('Unknown type given, given \"' + type + '\"');\n    }\n\n    try {\n        type = type || \"object\";\n        var data = {\n            id: objectId,\n            class_id: classId,\n            gridconfig: Ext.encode(configuration),\n            searchType: searchType,\n            settings: Ext.encode(settings),\n            context: Ext.encode(context),\n            type: type\n        };\n\n        var url = Routing.generate(route);\n\n        Ext.Ajax.request({\n            url: url,\n            method: \"post\",\n            params: data,\n            success: function (response) {\n                try {\n                    var rdata = Ext.decode(response.responseText);\n                    if (rdata && rdata.success) {\n                        if (button) {\n                            button.hide();\n                        }\n                        if (typeof callback == \"function\") {\n                            callback(rdata);\n                        }\n                        pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n                    }\n                    else {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"),\n                            \"error\", t(rdata.message));\n                    }\n                } catch (e) {\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n                }\n            }.bind(this),\n            failure: function () {\n                pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n            }\n        });\n\n    } catch (e3) {\n        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n    }\n};\n\npimcore.helpers.openGenericIframeWindow = function (id, src, iconCls, title) {\n    try {\n        pimcore.globalmanager.get(id).activate();\n    }\n    catch (e) {\n        pimcore.globalmanager.add(id, new pimcore.tool.genericiframewindow(id, src, iconCls, title));\n    }\n};\n\npimcore.helpers.hideRedundantSeparators = function (menu) {\n    var showSeparator = false;\n\n    for (var i = 0; i < menu.items.length; i++) {\n        var item = menu.items.getAt(i);\n\n        if (item instanceof Ext.menu.Separator) {\n            if (!showSeparator || i == menu.items.length - 1) {\n                item.hide();\n            }\n            showSeparator = false;\n        } else {\n            showSeparator = true;\n        }\n    }\n};\n\npimcore.helpers.initMenuTooltips = function () {\n    Ext.each(Ext.query(\"[data-menu-tooltip]:not(.initialized)\"), function (el) {\n        var item = Ext.get(el);\n\n        if (item) {\n            item.on(\"mouseenter\", function (e) {\n                var pimcore_tooltip = Ext.get('pimcore_tooltip');\n                var item = Ext.get(e.target);\n                pimcore_tooltip.show();\n                pimcore_tooltip.removeCls('right');\n                pimcore_tooltip.update(item.getAttribute(\"data-menu-tooltip\"));\n\n                var offset = item.getXY();\n                var top = offset[1];\n                top = top + (item.getHeight() / 2);\n\n                pimcore_tooltip.applyStyles({\n                    top: top + \"px\",\n                    left: '60px',\n                    right: 'auto'\n                });\n            }.bind(this));\n\n            item.on(\"mouseleave\", function (e) {\n                Ext.get('pimcore_tooltip').hide();\n            });\n\n            item.addCls(\"initialized\", \"true\");\n        }\n    });\n};\n\npimcore.helpers.requestNicePathDataGridDecorator = function (gridView, targets) {\n\n    if(targets && targets.count() > 0) {\n        gridView.mask();\n    }\n    targets.each(function (record) {\n        var el = gridView.getRow(record);\n        if (el) {\n            el = Ext.fly(el);\n            el.addCls(\"grid_nicepath_requested\");\n        }\n    }, this);\n\n};\n\npimcore.helpers.requestNicePathData = function (source, targets, config, fieldConfig, context, decorator, responseHandler) {\n    if (context && (context['containerType'] == \"batch\" || context['containerType'] == \"filterByRelationWindow\")) {\n        return;\n    }\n\n    if (!config.loadEditModeData && (typeof targets === \"undefined\" || !fieldConfig.pathFormatterClass)) {\n        return;\n    }\n\n    if (!targets.getCount() > 0) {\n        return;\n    }\n\n    config = config || {};\n    Ext.applyIf(config, {\n        idProperty: \"id\"\n    });\n\n    var elementData = {};\n\n    targets.each(function (record) {\n        var recordId = record.data[config.idProperty];\n        elementData[recordId] = record.data;\n    }, this);\n\n    if (decorator) {\n        decorator(targets);\n    }\n\n    elementData = Ext.encode(elementData);\n\n    Ext.Ajax.request({\n        method: 'POST',\n        url: Routing.generate('pimcore_admin_element_getnicepath'),\n        params: {\n            source: Ext.encode(source),\n            targets: elementData,\n            context: Ext.encode(context),\n            loadEditModeData: config.loadEditModeData,\n            idProperty: config.idProperty\n        },\n        success: function (response) {\n            try {\n                var rdata = Ext.decode(response.responseText);\n                if (rdata.success) {\n\n                    var responseData = rdata.data;\n                    responseHandler(responseData);\n\n                    pimcore.layout.refresh();\n                }\n            } catch (e) {\n                console.log(e);\n            }\n        }.bind(this)\n    });\n\n    return true;\n};\n\npimcore.helpers.getNicePathHandlerStore = function (store, config, gridView, responseData) {\n    config = config || {};\n    Ext.applyIf(config, {\n        idProperty: \"id\",\n        pathProperty: \"path\"\n    });\n\n    store.ignoreDataChanged = true;\n    store.each(function (record, id) {\n        var recordId = record.data[config.idProperty];\n\n        if (typeof responseData[recordId] != \"undefined\") {\n\n            if(config.loadEditModeData) {\n                for(var i = 0; i < config.fields.length; i++) {\n                    record.set(config.fields[i], responseData[recordId][config.fields[i]], {dirty: false});\n                }\n                if(responseData[recordId]['$$nicepath']) {\n                    record.set(config.pathProperty, responseData[recordId]['$$nicepath'], {dirty: false});\n                }\n            } else {\n                record.set(config.pathProperty, responseData[recordId], {dirty: false});\n            }\n\n            var el = gridView.getRow(record);\n            if (el) {\n                el = Ext.fly(el);\n                el.removeCls(\"grid_nicepath_requested\");\n            }\n\n        }\n    }, this);\n    store.ignoreDataChanged = false;\n\n    gridView.unmask();\n    gridView.updateLayout();\n};\n\npimcore.helpers.exportWarning = function (type, callback) {\n    var iconComponent = new Ext.Component({\n        cls: \"x-message-box-warning x-dlg-icon\"\n    });\n\n    var textContainer = Ext.Component({\n        html: type.warningText\n    });\n\n    var promptContainer = new Ext.container.Container({\n        flex: 1,\n        layout: {\n            type: 'vbox',\n            align: 'stretch'\n        },\n        padding: '0px 0px 0px 10px',\n        items: [textContainer]\n    });\n\n    var topContainer = new Ext.container.Container({\n            layout: 'hbox',\n            padding: 10,\n            style: {\n                overflow: 'hidden'\n            },\n            items: [iconComponent, promptContainer]\n        }\n    );\n\n    var objectSettingsContainer = type.getObjectSettingsContainer();\n\n    var formPanelItems = [];\n\n    if (objectSettingsContainer) {\n        formPanelItems.push(objectSettingsContainer);\n    }\n\n    var exportSettingsContainer = type.getExportSettingsContainer();\n\n    if (exportSettingsContainer) {\n        formPanelItems.push(exportSettingsContainer);\n    }\n\n    var formPanel = new Ext.form.FormPanel({\n        bodyStyle: 'padding:10px',\n        items: formPanelItems\n    });\n\n    var window = new Ext.Window({\n        modal: true,\n        title: type.text,\n        width: 600,\n        bodyStyle: \"padding: 10px;\",\n        buttonAlign: \"center\",\n        shadow: false,\n        closable: true,\n        items: [topContainer, formPanel],\n        buttons: [{\n            text: t(\"OK\"),\n            handler: function () {\n                if (formPanel.isValid()) {\n                    callback(formPanel.getValues());\n                    window.close();\n                }\n            }.bind(this)\n        },\n            {\n                text: t(\"cancel\"),\n                handler: function () {\n                    window.close();\n                }\n            }\n        ]\n    });\n\n    window.show();\n};\n\npimcore.helpers.generatePassword = function (len) {\n    var length = (len) ? (len) : (20);\n    var string = \"abcdefghijklmnopqrstuvwxyz\"; //to upper\n    var numeric = '0123456789';\n    var password = \"\";\n    var character = \"\";\n    while (password.length < length) {\n        entity1 = Math.ceil(string.length * Math.random() * Math.random());\n        entity2 = Math.ceil(numeric.length * Math.random() * Math.random());\n        hold = string.charAt(entity1);\n        hold = (entity1 % 2 == 0) ? (hold.toUpperCase()) : (hold);\n        character += hold;\n        character += numeric.charAt(entity2);\n        password = character;\n    }\n    return password;\n};\n\npimcore.helpers.isValidPassword = function (pass) {\n    if (pass.length < 10) {\n        return false;\n    }\n    return true;\n};\n\npimcore.helpers.getDeeplink = function (type, id, subtype) {\n    let target = type + \"_\" + id + \"_\" + subtype;\n    let url    = Routing.generate('pimcore_admin_login_deeplink', {}, true) + '?' + target;\n\n    if (pimcore.settings['custom_admin_entrypoint_url'] !== null) {\n        url = pimcore.settings['custom_admin_entrypoint_url'] + '?deeplink=' + target;\n    }\n\n    return url;\n};\n\npimcore.helpers.showElementHistory = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"objects\") || user.isAllowed(\"documents\") || user.isAllowed(\"assets\")) {\n        pimcore.layout.toolbar.prototype.showElementHistory();\n    }\n};\n\npimcore.helpers.closeAllTabs = function() {\n    pimcore.helpers.closeAllElements();\n    // clear the opentab store, so that also non existing elements are flushed\n    pimcore.helpers.clearOpenTab();\n\n};\n\npimcore.helpers.searchAndReplaceAssignments = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"objects\") || user.isAllowed(\"documents\") || user.isAllowed(\"assets\")) {\n        new pimcore.element.replace_assignments();\n    }\n};\n\npimcore.helpers.glossary = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"glossary\")) {\n        pimcore.layout.toolbar.prototype.editGlossary();\n    }\n};\n\npimcore.helpers.redirects = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"redirects\")) {\n        pimcore.layout.toolbar.prototype.editRedirects();\n    }\n};\n\npimcore.helpers.sharedTranslations = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"translations\")) {\n        pimcore.layout.toolbar.prototype.editTranslations();\n    }\n};\n\npimcore.helpers.recycleBin = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"recyclebin\")) {\n        pimcore.layout.toolbar.prototype.recyclebin();\n    }\n};\n\npimcore.helpers.notesEvents = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"notes_events\")) {\n        pimcore.layout.toolbar.prototype.notes();\n    }\n};\n\npimcore.helpers.applicationLogger = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"application_logging\")) {\n        pimcore.layout.toolbar.prototype.logAdmin();\n    }\n};\n\npimcore.helpers.reports = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"reports\")) {\n        pimcore.layout.toolbar.prototype.showReports(null);\n    }\n};\n\npimcore.helpers.seoDocumentEditor = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"documents\") && user.isAllowed(\"seo_document_editor\")) {\n        pimcore.layout.toolbar.prototype.showDocumentSeo();\n    }\n};\n\npimcore.helpers.robots = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"robots.txt\")) {\n        pimcore.layout.toolbar.prototype.showRobotsTxt();\n    }\n};\n\npimcore.helpers.httpErrorLog = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"http_errors\")) {\n        pimcore.layout.toolbar.prototype.showHttpErrorLog();\n    }\n};\n\npimcore.helpers.customReports = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"reports\")) {\n        pimcore.layout.toolbar.prototype.showCustomReports();\n    }\n};\n\npimcore.helpers.tagConfiguration = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"tags_configuration\")) {\n        pimcore.layout.toolbar.prototype.showTagConfiguration();\n    }\n};\n\npimcore.helpers.users = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"users\")) {\n        pimcore.layout.toolbar.prototype.editUsers();\n    }\n};\n\npimcore.helpers.roles = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"users\")) {\n        pimcore.layout.toolbar.prototype.editRoles();\n    }\n};\n\npimcore.helpers.clearAllCaches = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if ((user.isAllowed(\"clear_cache\") || user.isAllowed(\"clear_temp_files\") || user.isAllowed(\"clear_fullpage_cache\"))) {\n        pimcore.layout.toolbar.prototype.clearCache({'env[]': ['dev','prod']});\n    }\n};\n\npimcore.helpers.clearDataCache = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if ((user.isAllowed(\"clear_cache\") || user.isAllowed(\"clear_temp_files\") || user.isAllowed(\"clear_fullpage_cache\"))) {\n        pimcore.layout.toolbar.prototype.clearCache({'only_pimcore_cache': true})\n    }\n};\n\npimcore.helpers.showQuickSearch = function () {\n\n    // close all windows, tooltips and previews\n    // we use each() because .hideAll() doesn't hide the modal (seems to be an ExtJS bug)\n    Ext.WindowManager.each(function (win) {\n        win.close();\n    });\n    pimcore.helpers.treeNodeThumbnailPreviewHide();\n    pimcore.helpers.treeToolTipHide();\n\n    var quicksearchContainer = Ext.get('pimcore_quicksearch');\n    quicksearchContainer.show();\n    quicksearchContainer.removeCls('filled');\n\n    var combo = Ext.getCmp('quickSearchCombo');\n    combo.reset();\n    combo.focus();\n\n    Ext.get('pimcore_body').addCls('blurry');\n    Ext.get('pimcore_sidebar').addCls('blurry');\n    var elem = document.createElement('div');\n    elem.id = 'pimcore_quickSearch_overlay';\n    elem.style.cssText = 'position:absolute;width:100vw;height:100vh;z-index:100;top:0;left:0;opacity:0';\n    elem.addEventListener('click', function(e) {\n        document.body.removeChild(elem);\n        pimcore.helpers.hideQuickSearch();\n    });\n    document.body.appendChild(elem);\n};\n\npimcore.helpers.hideQuickSearch = function () {\n    var quicksearchContainer = Ext.get('pimcore_quicksearch');\n    quicksearchContainer.hide();\n    Ext.get('pimcore_body').removeCls('blurry');\n    Ext.get('pimcore_sidebar').removeCls('blurry');\n    if (Ext.get('pimcore_quickSearch_overlay')) {\n        Ext.get('pimcore_quickSearch_overlay').remove();\n    }\n};\n\n\n// HAS TO BE THE VERY LAST ENTRY !!!\npimcore.helpers.keyBindingMapping = {\n    \"save\": pimcore.helpers.handleCtrlS,\n    \"publish\": pimcore.helpers.togglePublish.bind(this, true),\n    \"unpublish\": pimcore.helpers.togglePublish.bind(this, false),\n    \"rename\": pimcore.helpers.rename.bind(this),\n    \"refresh\": pimcore.helpers.handleF5,\n    \"openDocument\": pimcore.helpers.openElementByIdDialog.bind(this, \"document\"),\n    \"openAsset\": pimcore.helpers.openElementByIdDialog.bind(this, \"asset\"),\n    \"openObject\": pimcore.helpers.openElementByIdDialog.bind(this, \"object\"),\n    \"openClassEditor\": pimcore.helpers.openClassEditor,\n    \"openInTree\": pimcore.helpers.openInTree,\n    \"showMetaInfo\": pimcore.helpers.showMetaInfo,\n    \"searchDocument\": pimcore.helpers.searchAction.bind(this, \"document\"),\n    \"searchAsset\": pimcore.helpers.searchAction.bind(this, \"asset\"),\n    \"searchObject\": pimcore.helpers.searchAction.bind(this, \"object\"),\n    \"showElementHistory\": pimcore.helpers.showElementHistory,\n    \"closeAllTabs\": pimcore.helpers.closeAllTabs,\n    \"searchAndReplaceAssignments\": pimcore.helpers.searchAndReplaceAssignments,\n    \"glossary\": pimcore.helpers.glossary,\n    \"redirects\": pimcore.helpers.redirects,\n    \"sharedTranslations\": pimcore.helpers.sharedTranslations,\n    \"recycleBin\": pimcore.helpers.recycleBin,\n    \"notesEvents\": pimcore.helpers.notesEvents,\n    \"applicationLogger\": pimcore.helpers.applicationLogger,\n    \"reports\": pimcore.helpers.reports,\n    \"tagManager\": pimcore.helpers.tagManager,\n    \"seoDocumentEditor\": pimcore.helpers.seoDocumentEditor,\n    \"robots\": pimcore.helpers.robots,\n    \"httpErrorLog\": pimcore.helpers.httpErrorLog,\n    \"customReports\": pimcore.helpers.customReports,\n    \"tagConfiguration\": pimcore.helpers.tagConfiguration,\n    \"users\": pimcore.helpers.users,\n    \"roles\": pimcore.helpers.roles,\n    \"clearAllCaches\": pimcore.helpers.clearAllCaches,\n    \"clearDataCache\": pimcore.helpers.clearDataCache,\n    \"quickSearch\": pimcore.helpers.showQuickSearch\n};\n\npimcore.helpers.showPermissionError = function(permission) {\n    Ext.MessageBox.alert(t(\"error\"), sprintf(t('permission_missing'), t(permission)));\n};\n\npimcore.helpers.registerAssetDnDSingleUpload = function (element, parent, parentType, success, failure, context) {\n\n    if (typeof success != \"function\") {\n        success = function () {\n        };\n    }\n\n    if (typeof failure != \"function\") {\n        failure = function () {\n        };\n    }\n\n    var fn = function (e) {\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'copy';\n        return false;\n    };\n\n    element.addEventListener(\"dragenter\", fn, true);\n    element.addEventListener(\"dragover\", fn, true);\n    element.addEventListener(\"drop\", function (e) {\n\n        e.stopPropagation();\n        e.preventDefault();\n\n        var dataTransfer = e.dataTransfer;\n\n        var win = new Ext.Window({\n            items: [],\n            modal: true,\n            closable: false,\n            bodyStyle: \"padding:10px;\",\n            width: 500,\n            autoHeight: true,\n            autoScroll: true\n        });\n        win.show();\n\n        if(dataTransfer[\"files\"]) {\n            if(dataTransfer[\"files\"][0]) {\n                var file = dataTransfer[\"files\"][0];\n\n                if (window.FileList && file.name && file.size) { // check for size (folder has size=0)\n                    var pbar = new Ext.ProgressBar({\n                        width:465,\n                        text: file.name,\n                        style: \"margin-bottom: 5px\"\n                    });\n\n                    win.add(pbar);\n                    win.updateLayout();\n\n                    var params = {};\n\n                    if(parentType === 'path') {\n                        params['parentPath'] = parent;\n                    } else if (parentType === 'id') {\n                        params['parentId'] = parent;\n                    }\n\n                    if (context) {\n                        params['context'] = Ext.encode(context);\n                    }\n\n                    var uploadUrl = Routing.generate('pimcore_admin_asset_addasset', params);\n\n                    pimcore.helpers.uploadAssetFromFileObject(file, uploadUrl,\n                        function (evt) {\n                            // success\n                            win.close();\n                            success(evt);\n                        },\n                        function (evt) {\n                            //progress\n                            if (evt.lengthComputable) {\n                                var percentComplete = evt.loaded / evt.total;\n                                var progressText = file.name + \" ( \" + Math.floor(percentComplete*100) + \"% )\";\n                                if(percentComplete == 1) {\n                                    progressText = file.name + \" \" + t(\"please_wait\");\n                                }\n\n                                pbar.updateProgress(percentComplete, progressText);\n                            }\n                        },\n                        function (evt) {\n                            // error\n                            var res = Ext.decode(evt[\"responseText\"]);\n                            pimcore.helpers.showNotification(t(\"error\"), res.message ? res.message : t(\"error\"), \"error\", evt[\"responseText\"]);\n                            win.close();\n                            failure(evt);\n                        }\n                    );\n\n                } else if (!empty(file.type) && file.size < 1) { //throw error for 0 byte file\n                    Ext.MessageBox.alert(t('error'), t('error_empty_file_upload'));\n                    win.close();\n                } else {\n                    Ext.MessageBox.alert(t('error'), t('unsupported_filetype'));\n                    win.close();\n                }\n            } else {\n                // if no files are uploaded (doesn't match criteria, ...) close the progress win immediately\n                win.close();\n            }\n        }\n    }.bind(this), true);\n};\n\npimcore.helpers.dragAndDropValidateSingleItem = function (data) {\n    if(data.records.length > 1) {\n        Ext.MessageBox.alert(t('error'), t('you_can_only_drop_one_element_here'));\n        return false;\n    }\n\n    return true;\n};\n\npimcore.helpers.openProfile = function () {\n    try {\n        pimcore.globalmanager.get(\"profile\").activate();\n    }\n    catch (e) {\n        pimcore.globalmanager.add(\"profile\", new pimcore.settings.profile.panel());\n    }\n};\n\npimcore.helpers.copyStringToClipboard = function (str) {\n    var selection = document.getSelection(),\n        prevSelection = (selection.rangeCount > 0) ? selection.getRangeAt(0) : false,\n        el;\n\n    // create element and insert string\n    el = document.createElement('textarea');\n    el.value = str;\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n\n    // insert element, select all text and copy\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n\n    // restore previous selection\n    if (prevSelection) {\n        selection.removeAllRanges();\n        selection.addRange(prevSelection);\n    }\n};\n\npimcore.helpers.treeToolTipShow = function (el, record, item) {\n\n    if (record.data.qtipCfg) {\n        var text = \"<b>\" + record.data.qtipCfg.title + \"</b> | \";\n\n        if (record.data.qtipCfg.text) {\n            text += record.data.qtipCfg.text;\n        } else {\n            text += (t(\"type\") + \": \"+ t(record.data.type));\n        }\n\n        var pimcore_tooltip = Ext.get('pimcore_tooltip');\n\n        pimcore_tooltip.show();\n        pimcore_tooltip.update(text);\n        pimcore_tooltip.removeCls('right');\n\n        var offsetTabPanel = Ext.get('pimcore_panel_tabs').getXY();\n        var offsetTreeNode = Ext.get(item).getXY();\n        var parentTree = el.ownerCt.ownerCt;\n\n        if(parentTree.region == 'west') {\n            pimcore_tooltip.applyStyles({\n                top: (offsetTreeNode[1] + 8) + \"px\",\n                left: offsetTabPanel[0] + \"px\",\n                right: 'auto'\n            });\n        }\n\n        if(parentTree.region == 'east') {\n            pimcore_tooltip.addCls('right');\n            pimcore_tooltip.applyStyles({\n                top: (offsetTreeNode[1] + 8) + \"px\",\n                right: (parentTree.width + 35) + \"px\",\n                left: 'auto'\n            });\n        }\n    }\n};\n\npimcore.helpers.getAssetMetadataDataTypes = function (allowIn) {\n    var result = [];\n    for (var property in pimcore.asset.metadata.data) {\n        // filter out base class\n        if (property !== \"data\" && pimcore.asset.metadata.data.hasOwnProperty(property)) {\n            if (pimcore.asset.metadata.data[property].prototype.allowIn[allowIn]) {\n                result.push(property);\n            }\n        }\n    }\n    return result;\n};\n\npimcore.helpers.treeToolTipHide = function () {\n    Ext.get('pimcore_tooltip').hide();\n};\n\npimcore.helpers.progressWindowOffsets = [-50];\n\npimcore.helpers.getProgressWindowListeners = function () {\n    return {\n        show: function(win) {\n            let winY = pimcore.helpers.progressWindowOffsets.reduce(function(a, b) {\n                return Math.min(a, b);\n            });\n\n            win.alignTo(Ext.getBody(), \"br-br\", [-40, winY]);\n            let newOffset = winY - (win.getHeight()+20);\n            pimcore.helpers.progressWindowOffsets.push(newOffset);\n            win.myProgressWinOffset = newOffset;\n        },\n        destroy: function(win) {\n            let index = pimcore.helpers.progressWindowOffsets.indexOf(win.myProgressWinOffset);\n            if (index !== -1) {\n                pimcore.helpers.progressWindowOffsets.splice(index, 1);\n            }\n        }\n    };\n};\n\npimcore.helpers.reloadUserImage = function (userId) {\n    var image = Routing.generate('pimcore_admin_user_getimage', {id: userId, '_dc': Ext.Date.now()});\n\n    if (pimcore.currentuser.id == userId) {\n        Ext.get(\"pimcore_avatar\").query('img')[0].src = image;\n    }\n\n    if (Ext.getCmp(\"pimcore_user_image_\" + userId)) {\n        Ext.getCmp(\"pimcore_user_image_\" + userId).setSrc(image);\n    }\n\n    if (Ext.getCmp(\"pimcore_profile_image_\" + userId)) {\n        Ext.getCmp(\"pimcore_profile_image_\" + userId).setSrc(image);\n    }\n};\n\n/**\n * Takes a number representing seconds and formats it as a human-readable string such as \"1:15:05\" for 1 hour 15 minutes 5 seconds\n * @param {int|float} dataDuration duration in seconds\n * @returns {string|*}\n */\npimcore.helpers.formatTimeDuration = function (dataDuration) {\n    if (!is_numeric(dataDuration)) {\n        // Unknown data, return as is\n        return dataDuration;\n    }\n\n    let durationString = '';\n\n    let hours = Math.floor(dataDuration / 3600);\n    dataDuration %= 3600;\n    if (hours > 0) {\n        durationString += hours + \":\";\n    }\n\n    durationString += Math.floor(dataDuration / 60) + \":\";\n    durationString += (\"0\" + Math.round(dataDuration % 60)).slice(-2);\n\n    return durationString;\n};\n\n/**\n * Delete confim dialog box\n *\n * @param title\n * @param name\n * @param deleteCallback\n */\npimcore.helpers.deleteConfirm = function (title, name, deleteCallback) {\n    Ext.Msg.confirm(t('delete'), sprintf(t('delete_message_advanced'),\n            title, name),\n        function (btn) {\n            if (btn == 'yes') {\n                if (typeof deleteCallback == \"function\") {\n                    deleteCallback();\n                }\n            }\n        }.bind(this))\n};\n\npimcore.helpers.treeDragDropValidate = function (node, oldParent, newParent) {\n    const disabledLayoutTypes = ['accordion', 'text', 'iframe', 'button']\n    if (newParent.data.editor) {\n        if (disabledLayoutTypes.includes(newParent.data.editor.type)) {\n            return false;\n        }\n    }\n\n    if (newParent.data.root) {\n        return false;\n    }\n\n    return true;\n};\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.email.blacklist\");\npimcore.settings.email.blacklist = Class.create({\n\n    initialize:function () {\n\n        this.getTabPanel();\n    },\n\n    activate:function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"email_blacklist\");\n    },\n\n    getTabPanel:function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id:\"email_blacklist\",\n                title:t(\"email_blacklist\"),\n                iconCls:\"pimcore_icon_email pimcore_icon_overlay_delete\",\n                border:false,\n                layout:\"fit\",\n                closable:true,\n                items:[this.getRowEditor()]\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"email_blacklist\");\n\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"email_blacklist\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getRowEditor:function () {\n\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize();\n        var url = Routing.generate('pimcore_admin_email_blacklist');\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            url,\n            [\n                {name:'address', allowBlank: false},\n                {name:'creationDate'},\n                {name:'modificationDate'}\n            ],\n            itemsPerPage\n        );\n\n\n        this.filterField = new Ext.form.TextField({\n            xtype:\"textfield\",\n            width:200,\n            style:\"margin: 0 10px 0 0;\",\n            enableKeyEvents:true,\n            listeners:{\n                \"keydown\":function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        var input = field;\n                        var proxy = this.store.getProxy();\n                        proxy.extraParams.filter = input.getValue();\n                        this.store.load();\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store);\n\n        var typesColumns = [\n            {text:t(\"email_address\"), flex:50, sortable:true, dataIndex:'address', editable: false},\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false,\n                hidden: false,\n                width: 150,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false,\n                hidden: true,\n                width: 150,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {\n                xtype:'actioncolumn',\n                menuText:t('delete'),\n                width:30,\n                items:[\n                    {\n                        tooltip:t('delete'),\n                        icon:\"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                        handler:function (grid, rowIndex) {\n                            let data = grid.getStore().getAt(rowIndex);\n                            pimcore.helpers.deleteConfirm(t('email_blacklist'), data.data.address, function () {\n                                grid.getStore().removeAt(rowIndex);\n                            }.bind(this));\n                        }.bind(this)\n                    }\n                ]\n            }\n        ];\n\n        this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        });\n\n        var toolbar = Ext.create('Ext.Toolbar', {\n            cls: 'pimcore_main_toolbar',\n            items: [\n                {\n                    text:t('add'),\n                    handler:this.onAdd.bind(this),\n                    iconCls:\"pimcore_icon_add\"\n                },\n                \"->\",\n                {\n                    text:t(\"filter\") + \"/\" + t(\"search\"),\n                    xtype:\"tbtext\",\n                    style:\"margin: 0 10px 0 0;\"\n                },\n                this.filterField\n            ]\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame:false,\n            autoScroll:true,\n            store:this.store,\n            columnLines:true,\n            trackMouseOver:true,\n            stripeRows:true,\n            columns: {\n                items: typesColumns,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                },\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            plugins: [\n                this.cellEditing\n            ],\n            bbar:this.pagingtoolbar,\n            tbar: toolbar,\n            viewConfig:{\n                forceFit:true\n            }\n        });\n\n        return this.grid;\n    },\n\n\n    onAdd:function (btn, ev) {\n        Ext.MessageBox.prompt(\"\", t(\"email_address\"), function (button, value) {\n            if(button == \"ok\") {\n                var u = {\n                    \"address\": value\n                };\n\n                this.grid.store.insert(0, u);\n            }\n\n        }.bind(this));\n    }\n});\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Http\\RequestHelper;\nuse Pimcore\\Logger;\nuse Pimcore\\Mail;\nuse Pimcore\\Model\\Element\\ElementInterface;\nuse Pimcore\\Model\\Tool;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Profiler\\Profiler;\nuse Symfony\\Component\\Mime\\Address;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/email\")\n *\n * @internal\n */\nclass EmailController extends AdminController\n{\n    /**\n     * @Route(\"/email-logs\", name=\"pimcore_admin_email_emaillogs\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function emailLogsAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails') && !$this->getAdminUser()->isAllowed('gdpr_data_extractor')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $list = new Tool\\Email\\Log\\Listing();\n        if ($request->get('documentId')) {\n            $list->setCondition('documentId = ' . (int)$request->get('documentId'));\n        }\n        $list->setLimit($request->get('limit'));\n        $list->setOffset($request->get('start'));\n        $list->setOrderKey('sentDate');\n\n        if ($request->get('filter')) {\n            $filterTerm = $request->get('filter');\n            if ($filterTerm == '*') {\n                $filterTerm = '';\n            }\n\n            $filterTerm = str_replace('%', '*', $filterTerm);\n            $filterTerm = htmlspecialchars($filterTerm, ENT_QUOTES);\n\n            if (strpos($filterTerm, '@')) {\n                $parts = explode(' ', $filterTerm);\n                $parts = array_map(function ($part) {\n                    if (strpos($part, '@')) {\n                        $part = '\"' . $part . '\"';\n                    }\n\n                    return $part;\n                }, $parts);\n                $filterTerm = implode(' ', $parts);\n            }\n\n            $condition = '( MATCH (`from`,`to`,`cc`,`bcc`,`subject`,`params`) AGAINST (' . $list->quote($filterTerm) . ' IN BOOLEAN MODE) )';\n\n            if ($request->get('documentId')) {\n                $condition .= 'AND documentId = ' . (int)$request->get('documentId');\n            }\n\n            $list->setCondition($condition);\n        }\n\n        $list->setOrder('DESC');\n\n        $data = $list->load();\n        $jsonData = [];\n\n        if (is_array($data)) {\n            foreach ($data as $entry) {\n                $tmp = $entry->getObjectVars();\n                unset($tmp['bodyHtml']);\n                unset($tmp['bodyText']);\n                $jsonData[] = $tmp;\n            }\n        }\n\n        return $this->adminJson([\n            'data' => $jsonData,\n            'success' => true,\n            'total' => $list->getTotalCount(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/show-email-log\", name=\"pimcore_admin_email_showemaillog\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param Profiler|null $profiler\n     *\n     * @return JsonResponse|Response\n     *\n     * @throws \\Exception\n     */\n    public function showEmailLogAction(Request $request, ?Profiler $profiler)\n    {\n        if ($profiler) {\n            $profiler->disable();\n        }\n\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw $this->createAccessDeniedHttpException(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $type = $request->get('type');\n        $emailLog = Tool\\Email\\Log::getById((int) $request->get('id'));\n\n        if (!$emailLog) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($type === 'text') {\n            return $this->render('@PimcoreAdmin/Admin/Email/text.html.twig', ['log' => $emailLog->getTextLog()]);\n        } elseif ($type === 'html') {\n            return new Response($emailLog->getHtmlLog(), 200, [\n                'Content-Security-Policy' => \"default-src 'self'; style-src 'self' 'unsafe-inline'; img-src * data:\",\n            ]);\n        } elseif ($type === 'params') {\n            try {\n                $params = $this->decodeJson($emailLog->getParams());\n            } catch (\\Exception $e) {\n                Logger::warning('Could not decode JSON param string');\n                $params = [];\n            }\n            foreach ($params as &$entry) {\n                $this->enhanceLoggingData($entry);\n            }\n\n            return $this->adminJson($params);\n        } elseif ($type === 'details') {\n            $data = $emailLog->getObjectVars();\n\n            return $this->adminJson($data);\n        } else {\n            return new Response('No Type specified');\n        }\n    }\n\n    /**\n     * @param array $data\n     * @param array $fullEntry\n     */\n    protected function enhanceLoggingData(&$data, &$fullEntry = null)\n    {\n        if (!empty($data['objectClass'])) {\n            $class = '\\\\' . ltrim($data['objectClass'], '\\\\');\n            $reflection = new \\ReflectionClass($class);\n\n            if (!empty($data['objectId']) && $reflection->implementsInterface(ElementInterface::class)) {\n                $obj = $class::getById($data['objectId']);\n                if (is_null($obj)) {\n                    $data['objectPath'] = '';\n                } else {\n                    $data['objectPath'] = $obj->getRealFullPath();\n                }\n                //check for classmapping\n                if (stristr($class, '\\\\Pimcore\\\\Model') === false) {\n                    $niceClassName = '\\\\' . ltrim($reflection->getParentClass()->getName(), '\\\\');\n                } else {\n                    $niceClassName = $class;\n                }\n                $niceClassName = str_replace('\\\\Pimcore\\\\Model\\\\', '', $niceClassName);\n                $niceClassName = str_replace('_', '\\\\', $niceClassName);\n\n                $tmp = explode('\\\\', $niceClassName);\n                if (in_array($tmp[0], ['DataObject', 'Document', 'Asset'])) {\n                    $data['objectClassBase'] = $tmp[0];\n                    $data['objectClassSubType'] = $tmp[1];\n                }\n            }\n        }\n\n        foreach ($data as &$value) {\n            if (is_array($value)) {\n                $this->enhanceLoggingData($value, $data);\n            }\n        }\n        if ($data['children'] ?? false) {\n            foreach ($data['children'] as $key => $entry) {\n                if (is_string($key)) { //key must be integers\n                    unset($data['children'][$key]);\n                }\n            }\n            $data['iconCls'] = 'pimcore_icon_folder';\n            $data['data'] = ['type' => 'simple', 'value' => 'Children (' . count($data['children']) . ')'];\n        } else {\n            //setting the icon class\n            if (empty($data['iconCls'])) {\n                if (($data['objectClassBase'] ?? '') == 'DataObject') {\n                    $fullEntry['iconCls'] = 'pimcore_icon_object';\n                } elseif (($data['objectClassBase'] ?? '') == 'Asset') {\n                    switch ($data['objectClassSubType']) {\n                        case 'Image':\n                            $fullEntry['iconCls'] = 'pimcore_icon_image';\n\n                            break;\n                        case 'Video':\n                            $fullEntry['iconCls'] = 'pimcore_icon_wmv';\n\n                            break;\n                        case 'Text':\n                            $fullEntry['iconCls'] = 'pimcore_icon_txt';\n\n                            break;\n                        case 'Document':\n                            $fullEntry['iconCls'] = 'pimcore_icon_pdf';\n\n                            break;\n                        default:\n                            $fullEntry['iconCls'] = 'pimcore_icon_asset';\n                    }\n                } elseif (strpos($data['objectClass'] ?? '', 'Document') === 0) {\n                    $fullEntry['iconCls'] = 'pimcore_icon_' . strtolower($data['objectClassSubType']);\n                } else {\n                    $data['iconCls'] = 'pimcore_icon_text';\n                }\n            }\n\n            $data['leaf'] = true;\n        }\n    }\n\n    /**\n     * @Route(\"/delete-email-log\", name=\"pimcore_admin_email_deleteemaillog\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteEmailLogAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw $this->createAccessDeniedHttpException(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $success = false;\n        $emailLog = Tool\\Email\\Log::getById((int) $request->get('id'));\n        if ($emailLog instanceof Tool\\Email\\Log) {\n            $emailLog->delete();\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/resend-email\", name=\"pimcore_admin_email_resendemail\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function resendEmailAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw $this->createAccessDeniedHttpException(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $success = false;\n        $emailLog = Tool\\Email\\Log::getById((int) $request->get('id'));\n\n        if ($emailLog instanceof Tool\\Email\\Log) {\n            $mail = new Mail();\n            $mail->preventDebugInformationAppending();\n            $mail->setIgnoreDebugMode(true);\n\n            if (!empty($request->get('to'))) {\n                $emailLog->setTo(null);\n                $emailLog->setCc(null);\n                $emailLog->setBcc(null);\n            } else {\n                $mail->disableLogging();\n            }\n\n            if ($html = $emailLog->getHtmlLog()) {\n                $mail->html($html);\n            }\n\n            if ($text = $emailLog->getTextLog()) {\n                $mail->text($text);\n            }\n\n            foreach (['From', 'To', 'Cc', 'Bcc', 'ReplyTo'] as $field) {\n                if (!$values = $request->get(strtolower($field))) {\n                    $getter = 'get' . $field;\n                    $values = $emailLog->{$getter}();\n                }\n\n                $values = \\Pimcore\\Helper\\Mail::parseEmailAddressField($values);\n\n                if (!empty($values)) {\n                    list($value) = $values;\n                    if ($value) {\n                        $prefix = 'add';\n                        $mail->{$prefix . $field}(new Address($value['email'], $value['name'] ?? ''));\n                    }\n                }\n            }\n\n            $mail->subject($emailLog->getSubject());\n\n            // add document\n            if ($emailLog->getDocumentId()) {\n                $mail->setDocument($emailLog->getDocumentId());\n            }\n\n            // re-add params\n            try {\n                $params = $this->decodeJson($emailLog->getParams());\n            } catch (\\Exception $e) {\n                Logger::warning('Could not decode JSON param string');\n                $params = [];\n            }\n\n            foreach ($params as $entry) {\n                $data = null;\n                $hasChildren = isset($entry['children']) && is_array($entry['children']);\n\n                if ($hasChildren) {\n                    $childData = [];\n                    foreach ($entry['children'] as $childParam) {\n                        $childData[$childParam['key']] = $this->parseLoggingParamObject($childParam);\n                    }\n                    $data = $childData;\n                } else {\n                    $data = $this->parseLoggingParamObject($entry);\n                }\n\n                $mail->setParam($entry['key'], $data);\n            }\n\n            $mail->send();\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/send-test-email\", name=\"pimcore_admin_email_sendtestemail\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function sendTestEmailAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        // Simulate a frontend request to prefix assets\n        $request->attributes->set(RequestHelper::ATTRIBUTE_FRONTEND_REQUEST, true);\n\n        $mail = new Mail();\n\n        if ($request->get('emailType') == 'text') {\n            $mail->text($request->get('content'));\n        } elseif ($request->get('emailType') == 'html') {\n            $mail->html($request->get('content'));\n        } elseif ($request->get('emailType') == 'document') {\n            $doc = \\Pimcore\\Model\\Document::getByPath($request->get('documentPath'));\n\n            if ($doc instanceof \\Pimcore\\Model\\Document\\Email || $doc instanceof \\Pimcore\\Model\\Document\\Newsletter) {\n                $mail->setDocument($doc);\n\n                if ($request->get('mailParamaters')) {\n                    if ($mailParamsArray = json_decode($request->get('mailParamaters'), true)) {\n                        foreach ($mailParamsArray as $mailParam) {\n                            if ($mailParam['key']) {\n                                $mail->setParam($mailParam['key'], $mailParam['value']);\n                            }\n                        }\n                    }\n                }\n            } else {\n                throw new \\Exception('Email document not found!');\n            }\n        }\n\n        if ($from = $request->get('from')) {\n            $addressArray = \\Pimcore\\Helper\\Mail::parseEmailAddressField($from);\n            if ($addressArray) {\n                //use the first address only\n                list($cleanedFromAddress) = $addressArray;\n                $mail->from(new Address($cleanedFromAddress['email'], $cleanedFromAddress['name'] ?? ''));\n            }\n        }\n\n        $toAddresses = \\Pimcore\\Helper\\Mail::parseEmailAddressField($request->get('to'));\n        foreach ($toAddresses as $cleanedToAddress) {\n            $mail->addTo($cleanedToAddress['email'], $cleanedToAddress['name'] ?? '');\n        }\n\n        $mail->subject($request->get('subject'));\n        $mail->setIgnoreDebugMode(true);\n\n        $mail->send();\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/blacklist\", name=\"pimcore_admin_email_blacklist\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function blacklistAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        if ($request->get('data')) {\n            $data = $this->decodeJson($request->get('data'));\n\n            if (is_array($data)) {\n                foreach ($data as $key => &$value) {\n                    if (is_string($value)) {\n                        if($key === 'address'){\n                            $value = filter_var($value, FILTER_SANITIZE_EMAIL);\n                        }\n\n                        $value = trim($value);\n                    }\n                }\n            }\n\n            if ($request->get('xaction') == 'destroy') {\n                $address = Tool\\Email\\Blacklist::getByAddress($data['address']);\n                $address->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $address = Tool\\Email\\Blacklist::getByAddress($data['address']);\n                $address->setValues($data);\n                $address->save();\n\n                return $this->adminJson(['data' => $address->getObjectVars(), 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                unset($data['id']);\n\n                $address = new Tool\\Email\\Blacklist();\n                $address->setValues($data);\n                $address->save();\n\n                return $this->adminJson(['data' => $address->getObjectVars(), 'success' => true]);\n            }\n        } else {\n            // get list of routes\n\n            $list = new Tool\\Email\\Blacklist\\Listing();\n\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($request->query->all());\n            if ($sortingSettings['orderKey']) {\n                $orderKey = $sortingSettings['orderKey'];\n            }\n            if ($sortingSettings['order']) {\n                $order = $sortingSettings['order'];\n            }\n\n            if ($request->get('filter')) {\n                $list->setCondition('`address` LIKE ' . $list->quote('%'.$request->get('filter').'%'));\n            }\n\n            $data = $list->load();\n            $jsonData = [];\n            if (is_array($data)) {\n                foreach ($data as $entry) {\n                    $jsonData[] = $entry->getObjectVars();\n                }\n            }\n\n            return $this->adminJson([\n                'success' => true,\n                'data' => $jsonData,\n                'total' => $list->getTotalCount(),\n            ]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @param array $params\n     *\n     * @return array\n     */\n    protected function parseLoggingParamObject($params)\n    {\n        $data = null;\n        if ($params['data']['type'] === 'object') {\n            $class = '\\\\' . ltrim($params['data']['objectClass'], '\\\\');\n            $reflection = new \\ReflectionClass($class);\n\n            if (!empty($params['data']['objectId']) && $reflection->implementsInterface(ElementInterface::class)) {\n                $obj = $class::getById($params['data']['objectId']);\n                if (!is_null($obj)) {\n                    $data = $obj;\n                }\n            }\n        } else {\n            $data = $params['data']['value'];\n        }\n\n        return $data;\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n/*global localStorage */\npimcore.registerNS(\"pimcore.helpers.x\");\n\npimcore.helpers.sanitizeEmail = function (email) {\n    return email.replace(/[^a-zA-Z0-9_\\-@.+]/g,'');\n};\n\npimcore.helpers.registerKeyBindings = function (bindEl, ExtJS) {\n\n    if (!ExtJS) {\n        ExtJS = Ext;\n    }\n\n    var user = pimcore.globalmanager.get(\"user\");\n    var bindings = [];\n\n    var decodedKeyBindings = Ext.decode(user.keyBindings);\n    if (decodedKeyBindings) {\n        for (var i = 0; i < decodedKeyBindings.length; i++) {\n            var item = decodedKeyBindings[i];\n            if (item == null) {\n                continue;\n            }\n\n            if (!item.key) {\n                continue;\n            }\n            var action = item.action;\n            var handler = pimcore.helpers.keyBindingMapping[action];\n            if (handler) {\n                var binding = item;\n                item[\"fn\"] = handler;\n                bindings.push(binding);\n            }\n        }\n    }\n\n    pimcore.keymap = new ExtJS.util.KeyMap({\n        target: bindEl,\n        binding: bindings\n    });\n};\n\npimcore.helpers.openClassEditor = function () {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"classes\")) {\n        var toolbar = pimcore.globalmanager.get(\"layout_toolbar\");\n        toolbar.editClasses();\n    }\n};\n\npimcore.helpers.openWelcomePage = function (keyCode, e) {\n\n    if (e[\"stopEvent\"]) {\n        e.stopEvent();\n    }\n\n    try {\n        pimcore.globalmanager.get(\"layout_portal_welcome\").activate();\n    }\n    catch (e) {\n        pimcore.globalmanager.add(\"layout_portal_welcome\", new pimcore.layout.portal());\n    }\n};\n\npimcore.helpers.openAsset = function (id, type, options) {\n\n    if (pimcore.globalmanager.exists(\"asset_\" + id) == false) {\n\n        if (!pimcore.asset[type]) {\n            pimcore.globalmanager.add(\"asset_\" + id, new pimcore.asset.unknown(id, options));\n        }\n        else {\n            pimcore.globalmanager.add(\"asset_\" + id, new pimcore.asset[type](id, options));\n        }\n\n        pimcore.helpers.rememberOpenTab(\"asset_\" + id + \"_\" + type);\n\n        if (options != undefined) {\n            if (options.ignoreForHistory) {\n                var element = pimcore.globalmanager.get(\"asset_\" + id);\n                element.setAddToHistory(false);\n            }\n        }\n\n    }\n    else {\n        pimcore.globalmanager.get(\"asset_\" + id).activate();\n    }\n};\n\npimcore.helpers.closeAsset = function (id) {\n\n    try {\n        var tabId = \"asset_\" + id;\n        var panel = Ext.getCmp(tabId);\n        if (panel) {\n            panel.close();\n        }\n\n        pimcore.helpers.removeTreeNodeLoadingIndicator(\"asset\", id);\n        pimcore.globalmanager.remove(\"asset_\" + id);\n    } catch (e) {\n        console.log(e);\n    }\n};\n\npimcore.helpers.openDocument = function (id, type, options) {\n    if (pimcore.globalmanager.exists(\"document_\" + id) == false) {\n        if (pimcore.document[type]) {\n            pimcore.globalmanager.add(\"document_\" + id, new pimcore.document[type](id, options));\n            pimcore.helpers.rememberOpenTab(\"document_\" + id + \"_\" + type);\n\n            if (options !== undefined) {\n                if (options.ignoreForHistory) {\n                    var element = pimcore.globalmanager.get(\"document_\" + id);\n                    element.setAddToHistory(false);\n                }\n            }\n        }\n    }\n    else {\n        pimcore.globalmanager.get(\"document_\" + id).activate();\n    }\n};\n\npimcore.helpers.closeDocument = function (id) {\n    try {\n        var tabId = \"document_\" + id;\n        var panel = Ext.getCmp(tabId);\n        if (panel) {\n            panel.close();\n        }\n\n        pimcore.helpers.removeTreeNodeLoadingIndicator(\"document\", id);\n        pimcore.globalmanager.remove(\"document_\" + id);\n    } catch (e) {\n        console.log(e);\n    }\n\n};\n\npimcore.helpers.openObject = function (id, type, options) {\n    if (pimcore.globalmanager.exists(\"object_\" + id) == false) {\n\n        if (type != \"folder\" && type != \"variant\" && type != \"object\") {\n            type = \"object\";\n        }\n\n        pimcore.globalmanager.add(\"object_\" + id, new pimcore.object[type](id, options));\n        pimcore.helpers.rememberOpenTab(\"object_\" + id + \"_\" + type);\n\n        if (options !== undefined) {\n            if (options.ignoreForHistory) {\n                var element = pimcore.globalmanager.get(\"object_\" + id);\n                element.setAddToHistory(false);\n            }\n        }\n    }\n    else {\n        var tab = pimcore.globalmanager.get(\"object_\" + id);\n        tab.activate();\n    }\n};\n\npimcore.helpers.closeObject = function (id) {\n    try {\n        var tabId = \"object_\" + id;\n        var panel = Ext.getCmp(tabId);\n        if (panel) {\n            panel.close();\n        }\n\n        pimcore.helpers.removeTreeNodeLoadingIndicator(\"object\", id);\n        pimcore.globalmanager.remove(\"object_\" + id);\n    } catch (e) {\n        console.log(e);\n    }\n};\n\npimcore.helpers.updateTreeElementStyle = function (type, id, treeData) {\n    if (treeData) {\n\n        var key = type + \"_\" + id;\n        if (pimcore.globalmanager.exists(key)) {\n            var editMask = pimcore.globalmanager.get(key);\n            if (editMask.tab) {\n                if (typeof treeData.iconCls !== \"undefined\") {\n                    editMask.tab.setIconCls(treeData.iconCls);\n                }\n\n                if (typeof treeData.icon !== \"undefined\") {\n                    editMask.tab.setIcon(treeData.icon);\n                }\n            }\n        }\n\n        var treeNames = pimcore.elementservice.getElementTreeNames(type);\n\n        for (var index = 0; index < treeNames.length; index++) {\n            var treeName = treeNames[index];\n            var tree = pimcore.globalmanager.get(treeName);\n            if (!tree) {\n                continue;\n            }\n            tree = tree.tree;\n            var store = tree.getStore();\n            var record = store.getById(id);\n            if (record) {\n                if (typeof treeData.icon !== \"undefined\") {\n                    record.set(\"icon\", treeData.icon);\n                }\n\n                if (typeof treeData.cls !== \"undefined\") {\n                    record.set(\"cls\", treeData.cls);\n                }\n\n                if (typeof treeData.iconCls !== \"undefined\") {\n                    record.set(\"iconCls\", treeData.iconCls);\n                }\n\n                if (typeof treeData.qtipCfg !== \"undefined\") {\n                    record.set(\"qtipCfg\", treeData.qtipCfg);\n                }\n            }\n        }\n    }\n};\n\npimcore.helpers.getHistory = function () {\n    var history = localStorage.getItem(\"pimcore_element_history\");\n    if (!history) {\n        history = [];\n    } else {\n        history = JSON.parse(history);\n    }\n    return history;\n};\n\npimcore.helpers.recordElement = function (id, type, name) {\n\n    var history = pimcore.helpers.getHistory();\n\n    var newDate = new Date();\n\n    for (var i = history.length - 1; i >= 0; i--) {\n        var item = history[i];\n        if (item.type == type && item.id == id) {\n            history.splice(i, 1);\n        }\n    }\n\n\n    var historyItem = {\n        id: id,\n        type: type,\n        name: name,\n        time: newDate.getTime()\n    };\n    history.unshift(historyItem);\n\n    history = history.slice(0, 30);\n\n    var json = JSON.stringify(history);\n    localStorage.setItem(\"pimcore_element_history\", json);\n\n    try {\n        var historyPanel = pimcore.globalmanager.get(\"element_history\");\n        if (historyPanel) {\n            var thePair = {\n                \"id\": id,\n                \"type\": type,\n                \"name\": name,\n                \"time\": newDate\n            };\n\n            var storeCount = historyPanel.store.getCount();\n            for (var i = storeCount - 1; i >= 0; i--) {\n\n                var record = historyPanel.store.getAt(i);\n                var data = record.data;\n                if (i > 100 || (data.id == id && data.type == type)) {\n                    historyPanel.store.remove(record);\n                }\n            }\n\n            historyPanel.store.insert(0, thePair);\n            historyPanel.resultpanel.getView().refresh();\n        }\n    }\n    catch (e) {\n        console.log(e);\n    }\n\n};\n\npimcore.helpers.openElement = function (idOrPath, type, subtype) {\n    if (typeof subtype != \"undefined\" && subtype !== null) {\n        if (type == \"document\") {\n            pimcore.helpers.openDocument(idOrPath, subtype);\n        }\n        else if (type == \"asset\") {\n            pimcore.helpers.openAsset(idOrPath, subtype);\n        }\n        else if (type == \"object\") {\n            pimcore.helpers.openObject(idOrPath, subtype);\n        }\n    } else {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_element_getsubtype'),\n            params: {\n                id: idOrPath,\n                type: type\n            },\n            success: function (response) {\n                var res = Ext.decode(response.responseText);\n                if (res.success) {\n                    pimcore.helpers.openElement(res.id, res.type, res.subtype);\n                } else {\n                    Ext.MessageBox.alert(t(\"error\"), t(\"element_not_found\"));\n                }\n            }\n        });\n    }\n};\n\npimcore.helpers.closeElement = function (id, type) {\n    if (type == \"document\") {\n        pimcore.helpers.closeDocument(id);\n    }\n    else if (type == \"asset\") {\n        pimcore.helpers.closeAsset(id);\n    }\n    else if (type == \"object\") {\n        pimcore.helpers.closeObject(id);\n    }\n};\n\npimcore.helpers.getElementTypeByObject = function (object) {\n    var type = null;\n    if (object instanceof pimcore.document.document) {\n        type = \"document\";\n    } else if (object instanceof pimcore.asset.asset) {\n        type = \"asset\";\n    } else if (object instanceof pimcore.object.abstract) {\n        type = \"object\";\n    }\n    return type;\n};\n\npimcore.helpers.getTreeNodeLoadingIndicatorElements = function (type, id) {\n    // display loading indicator on treenode\n    var elements = [];\n    var treeNames = pimcore.elementservice.getElementTreeNames(type);\n\n    for (index = 0; index < treeNames.length; index++) {\n        var treeName = treeNames[index];\n        var tree = pimcore.globalmanager.get(treeName);\n        if (!tree) {\n            continue;\n        }\n        tree = tree.tree;\n\n        try {\n            var store = tree.getStore();\n            var node = store.getNodeById(id);\n            if (node) {\n                var view = tree.getView();\n                var nodeEl = Ext.fly(view.getNodeByRecord(node));\n                var icon = nodeEl.query(\".x-tree-icon\")[0];\n\n                var iconEl = Ext.get(icon);\n                if (iconEl) {\n                    elements.push(iconEl);\n                }\n            }\n        } catch (e) {\n            //console.log(e);\n        }\n    }\n    return elements;\n};\n\npimcore.helpers.treeNodeLoadingIndicatorTimeouts = {};\n\npimcore.helpers.addTreeNodeLoadingIndicator = function (type, id, disableExpander) {\n\n    if(disableExpander !== false) {\n        disableExpander = true;\n    }\n\n    pimcore.helpers.treeNodeLoadingIndicatorTimeouts[type + id] = window.setTimeout(function () {\n        // display loading indicator on treenode\n        var iconEls = pimcore.helpers.getTreeNodeLoadingIndicatorElements(type, id);\n        for (var index = 0; index < iconEls.length; index++) {\n            var iconEl = iconEls[index];\n            if (iconEl) {\n                iconEl.addCls(\"pimcore_tree_node_loading_indicator\");\n                if(disableExpander) {\n                    iconEl.up('.x-grid-cell').addCls('pimcore_treenode_hide_plus_button');\n                }\n            }\n        }\n    }, 200);\n};\n\npimcore.helpers.removeTreeNodeLoadingIndicator = function (type, id) {\n\n    clearTimeout(pimcore.helpers.treeNodeLoadingIndicatorTimeouts[type + id]);\n\n    // display loading indicator on treenode\n    var iconEls = pimcore.helpers.getTreeNodeLoadingIndicatorElements(type, id);\n    for (var index = 0; index < iconEls.length; index++) {\n        var iconEl = iconEls[index];\n        if (iconEl) {\n            iconEl.removeCls(\"pimcore_tree_node_loading_indicator\");\n            iconEl.up('.x-grid-cell').removeCls('pimcore_treenode_hide_plus_button');\n        }\n    }\n};\n\npimcore.helpers.hasTreeNodeLoadingIndicator = function (type, id) {\n    var iconEls = pimcore.helpers.getTreeNodeLoadingIndicatorElements(type, id);\n    for (var index = 0; index < iconEls.length; index++) {\n        var iconEl = iconEls[index];\n        if (iconEl) {\n            return iconEl.hasCls(\"pimcore_tree_node_loading_indicator\");\n        }\n    }\n\n    return false;\n};\n\n\npimcore.helpers.openSeemode = function () {\n    if (pimcore.globalmanager.exists(\"pimcore_seemode\")) {\n        pimcore.globalmanager.get(\"pimcore_seemode\").start();\n    }\n    else {\n        pimcore.globalmanager.add(\"pimcore_seemode\", new pimcore.document.seemode());\n    }\n};\n\npimcore.helpers.isValidFilename = function (value) {\n    var result = value.match(/[a-zA-Z0-9_.\\-~]+/);\n    if (result == value) {\n        // key must be at least one character, an maximum 30 characters\n        if (value.length < 1 && value.length > 30) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n};\n\n\npimcore.helpers.getValidFilenameCache = {};\n\npimcore.helpers.getValidFilename = function (value, type) {\n\n    value = value.trim();\n\n    if (pimcore.helpers.getValidFilenameCache[value + type]) {\n        return pimcore.helpers.getValidFilenameCache[value + type];\n    }\n\n    var response = Ext.Ajax.request({\n        url: Routing.generate('pimcore_admin_misc_getvalidfilename'),\n        async: false,\n        params: {\n            value: value,\n            type: type\n        }\n    });\n\n    var res = Ext.decode(response.responseText);\n    pimcore.helpers.getValidFilenameCache[value + type] = res[\"filename\"];\n    return res[\"filename\"];\n};\n\npimcore.helpers.showPrettyError = function (type, title, text, errorText, stack, code, hideDelay) {\n    pimcore.helpers.showNotification(title, text, \"error\", errorText, hideDelay);\n};\n\npimcore.helpers.showNotification = function (title, text, type, detailText, hideDelay) {\n    // icon types: info,error,success\n    if (type === \"error\") {\n\n        if (detailText) {\n            detailText =\n                '<pre style=\"font-size:11px;word-wrap: break-word;\">'\n                    + strip_tags(detailText) +\n                \"</pre>\";\n        }\n\n        var errWin = new Ext.Window({\n            modal: true,\n            iconCls: \"pimcore_icon_error\",\n            title: title,\n            width: 700,\n            maxHeight: 500,\n            html: text,\n            autoScroll: true,\n            bodyStyle: \"padding: 10px;\",\n            buttonAlign: \"center\",\n            shadow: false,\n            closable: false,\n            buttons: [{\n                text: t(\"details\"),\n                hidden: !detailText,\n                handler: function () {\n                    errWin.close();\n\n                    var detailWindow = new Ext.Window({\n                        modal: true,\n                        title: t('details'),\n                        width: 1000,\n                        height: '95%',\n                        html: detailText,\n                        autoScroll: true,\n                        bodyStyle: \"padding: 10px;\",\n                        buttonAlign: \"center\",\n                        shadow: false,\n                        closable: true,\n                        buttons: [{\n                            text: t(\"OK\"),\n                            handler: function () {\n                                detailWindow.close();\n                            }\n                        }]\n                    });\n                    detailWindow.show();\n                }\n            }, {\n                text: t(\"OK\"),\n                handler: function () {\n                    errWin.close();\n                }\n            }]\n        });\n        errWin.show();\n    } else {\n        // Avoid overlapping any footer toolbar buttons\n        // Find current active tab to find its footer if there is one\n        let paddingY = 10;\n        let tabsBody = document.getElementById('pimcore_panel_tabs-body');\n        let activeTab = tabsBody.querySelector(':scope > [aria-expanded=\"true\"]');\n        if (activeTab) {\n            let footerToolbar = activeTab.querySelector(':scope .x-toolbar-footer');\n            if (footerToolbar) {\n                paddingY += footerToolbar.scrollHeight;\n            }\n        }\n\n        var notification = Ext.create('Ext.window.Toast', {\n            iconCls: 'pimcore_icon_' + type,\n            title: title,\n            html: text,\n            autoShow: true,\n            width: 'auto',\n            maxWidth: 350,\n            closeable: true,\n            align: \"br\",\n            anchor: Ext.get(tabsBody),\n            paddingX: 5,\n            paddingY: paddingY\n        });\n        notification.show(document);\n    }\n\n};\n\n\npimcore.helpers.rename = function (keyCode, e) {\n\n    e.stopEvent();\n\n    var tabpanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    var activeTab = tabpanel.getActiveTab();\n\n    if (activeTab) {\n        // for document\n        var el = activeTab.initialConfig;\n        if (el.document && el.document.rename) {\n            el.document.rename();\n\n        }\n        else if (el.object && el.object.rename) {\n            el.object.rename();\n\n        }\n        else if (el.asset && el.asset.rename) {\n            el.asset.rename();\n        }\n    }\n};\n\npimcore.helpers.togglePublish = function (publish, keyCode, e) {\n\n    e.stopEvent();\n\n    var tabpanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    var activeTab = tabpanel.getActiveTab();\n\n    if (activeTab) {\n        // for document\n        var el = activeTab.initialConfig;\n        if (el.document) {\n            if (publish) {\n                el.document.publish();\n            } else {\n                el.document.unpublish();\n            }\n        }\n        else if (el.object) {\n            if (publish) {\n                el.object.publish();\n            } else {\n                el.object.unpublish();\n            }\n        }\n        else if (el.asset) {\n            el.asset.save();\n        }\n    }\n};\n\n\npimcore.helpers.handleCtrlS = function (keyCode, e) {\n\n    e.stopEvent();\n\n    var tabpanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    var activeTab = tabpanel.getActiveTab();\n\n    if (activeTab) {\n        // for document\n        var el = activeTab.initialConfig;\n        if (el.document) {\n            if (el.document.data.published) {\n                el.document.publish();\n            } else {\n                el.document.save('version');\n            }\n        }\n        else if (el.object) {\n            if (el.object.data.general.o_published) {\n                el.object.publish();\n            } else {\n                el.object.save('version');\n            }\n        }\n        else if (el.asset) {\n            el.asset.save();\n        }\n    }\n};\n\npimcore.helpers.showMetaInfo = function (keyCode, e) {\n\n    e.stopEvent();\n\n    var tabpanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    var activeTab = tabpanel.getActiveTab();\n\n    if (activeTab) {\n        if (activeTab.initialConfig.document) {\n            activeTab.initialConfig.document.showMetaInfo();\n        } else if (activeTab.initialConfig.asset) {\n            activeTab.initialConfig.asset.showMetaInfo();\n        } else if (activeTab.initialConfig.object) {\n            activeTab.initialConfig.object.showMetaInfo();\n        }\n    }\n};\n\npimcore.helpers.openInTree = function (keyCode, e) {\n\n    e.stopEvent();\n\n    var tabpanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    var activeTab = tabpanel.getActiveTab();\n\n    if (activeTab) {\n        if (activeTab.initialConfig.document || activeTab.initialConfig.asset || activeTab.initialConfig.object) {\n            var tabId = activeTab.id;\n            var parts = tabId.split(\"_\");\n            var type = parts[0];\n            var elementId = parts[1];\n            pimcore.treenodelocator.showInTree(elementId, type);\n\n        }\n    }\n};\n\n\npimcore.helpers.handleF5 = function (keyCode, e) {\n\n    e.stopEvent();\n\n    var tabpanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    var activeTab = tabpanel.getActiveTab();\n\n    if (activeTab) {\n        // for document\n        if (activeTab.initialConfig.document) {\n            activeTab.initialConfig.document.reload();\n            return;\n        }\n        else if (activeTab.initialConfig.object) {\n            activeTab.initialConfig.object.reload();\n            return;\n        }\n    }\n\n    var date = new Date();\n    location.href = Routing.generate('pimcore_admin_index', {'_dc': date.getTime()});\n};\n\npimcore.helpers.lockManager = function (cid, ctype, csubtype, data) {\n\n    var lockDate = new Date(data.editlock.date * 1000);\n    var lockDetails = \"<br /><br />\";\n    lockDetails += \"<b>\" + t(\"path\") + \": <i>\" + data.editlock.cpath + \"</i></b><br />\";\n    lockDetails += \"<b>\" + t(\"type\") + \": </b>\" + t(ctype) + \"<br />\";\n    if (data.editlock.user) {\n        lockDetails += \"<b>\" + t(\"user\") + \":</b> \" + data.editlock.user.name + \"<br />\";\n    }\n    lockDetails += \"<b>\" + t(\"since\") + \": </b>\" + Ext.util.Format.date(lockDate, \"Y-m-d H:i\");\n    lockDetails += \"<br /><br />\" + t(\"element_lock_question\");\n\n    Ext.MessageBox.confirm(t(\"element_is_locked\"), t(\"element_lock_message\") + lockDetails,\n        function (lock, buttonValue) {\n            if (buttonValue == \"yes\") {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_element_unlockelement'),\n                    method: 'PUT',\n                    params: {\n                        id: lock[0],\n                        type: lock[1]\n                    },\n                    success: function () {\n                        pimcore.helpers.openElement(lock[0], lock[1], lock[2]);\n                    }\n                });\n            }\n        }.bind(this, arguments));\n};\n\n\npimcore.helpers.closeAllUnmodified = function () {\n    var unmodifiedElements = [];\n\n    var tabs = Ext.getCmp(\"pimcore_panel_tabs\").items;\n    if (tabs.getCount() > 0) {\n        tabs.each(function (item, index, length) {\n            if (item.title.indexOf(\"*\") > -1) {\n                unmodifiedElements.push(item);\n            }\n        });\n    }\n\n\n    pimcore.helpers.closeAllElements(unmodifiedElements);\n};\n\npimcore.helpers.closeAllElements = function (except, tabPanel) {\n\n    var exceptions = [];\n    if (except instanceof Ext.Panel) {\n        exceptions.push(except);\n    } else if (except instanceof Array) {\n        exceptions = except;\n    }\n\n    if (typeof tabPanel == \"undefined\") {\n        tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n    }\n\n    var tabs = tabPanel.items;\n    if (tabs.getCount() > 0) {\n        tabs.each(function (item, index, length) {\n            window.setTimeout(function () {\n                if (!in_array(item, exceptions)) {\n                    item.close();\n                }\n            }, 100 * index);\n        });\n    }\n};\n\n\npimcore.helpers.loadingShow = function () {\n    pimcore.globalmanager.get(\"loadingmask\").show();\n};\n\npimcore.helpers.loadingHide = function () {\n    pimcore.globalmanager.get(\"loadingmask\").hide();\n};\n\npimcore.helpers.itemselector = function (multiselect, callback, restrictions, config) {\n    var itemselector = new pimcore.element.selector.selector(multiselect, callback, restrictions, config);\n};\n\n\npimcore.helpers.activateMaintenance = function () {\n\n    Ext.Ajax.request({\n        url: Routing.generate('pimcore_admin_misc_maintenance', {activate: true}),\n        method: \"POST\"\n    });\n\n    var button = Ext.get(\"pimcore_menu_maintenance\");\n    if (!button.isVisible()) {\n        pimcore.helpers.showMaintenanceDisableButton();\n    }\n};\n\npimcore.helpers.deactivateMaintenance = function () {\n\n    Ext.Ajax.request({\n        url: Routing.generate('pimcore_admin_misc_maintenance', {deactivate: true}),\n        method: \"POST\"\n    });\n\n    var button = Ext.get(\"pimcore_menu_maintenance\");\n    button.setStyle(\"display\", \"none\");\n};\n\npimcore.helpers.showMaintenanceDisableButton = function () {\n    var button = Ext.get(\"pimcore_menu_maintenance\");\n    button.show();\n    button.clearListeners();\n    button.on(\"click\", pimcore.helpers.deactivateMaintenance);\n};\n\npimcore.helpers.download = function (url) {\n    pimcore.settings.showCloseConfirmation = false;\n    window.setTimeout(function () {\n        pimcore.settings.showCloseConfirmation = true;\n    }, 1000);\n\n    location.href = url;\n};\n\npimcore.helpers.getFileExtension = function (filename) {\n    var extensionP = filename.split(\"\\.\");\n    return extensionP[extensionP.length - 1];\n};\n\n\npimcore.helpers.getOpenTab = function () {\n    var openTabs = localStorage.getItem(\"pimcore_opentabs\");\n    if (!openTabs) {\n        openTabs = [];\n    } else {\n        // using native JSON functionalities here because of /admin/login/deeplink -> No ExtJS should be loaded\n        openTabs = JSON.parse(openTabs);\n    }\n\n    return openTabs;\n};\n\npimcore.helpers.clearOpenTab = function () {\n    localStorage.setItem(\"pimcore_opentabs\", JSON.stringify([]));\n};\n\npimcore.helpers.rememberOpenTab = function (item, forceOpenTab) {\n    var openTabs = pimcore.helpers.getOpenTab();\n\n    if (!in_array(item, openTabs)) {\n        openTabs.push(item);\n    }\n\n    // using native JSON functionalities here because of /admin/login/deeplink -> No ExtJS should be loaded\n    localStorage.setItem(\"pimcore_opentabs\", JSON.stringify(openTabs));\n    if (forceOpenTab) {\n        localStorage.setItem(\"pimcore_opentabs_forceopenonce\", true);\n    }\n};\n\npimcore.helpers.forgetOpenTab = function (item) {\n\n    var openTabs = pimcore.helpers.getOpenTab();\n\n    if (in_array(item, openTabs)) {\n        var pos = array_search(item, openTabs);\n        openTabs.splice(pos, 1);\n    }\n\n    // using native JSON functionalities here because of /admin/login/deeplink -> No ExtJS should be loaded\n    localStorage.setItem(\"pimcore_opentabs\", JSON.stringify(openTabs));\n};\n\npimcore.helpers.forceOpenMemorizedTabsOnce = function () {\n    if (localStorage.getItem(\"pimcore_opentabs_forceopenonce\")) {\n        localStorage.removeItem(\"pimcore_opentabs_forceopenonce\");\n        return true;\n    }\n    return false;\n};\n\npimcore.helpers.openMemorizedTabs = function () {\n    var openTabs = pimcore.helpers.getOpenTab();\n\n    // limit to the latest 10\n    openTabs.reverse();\n    openTabs.splice(10, 1000);\n    openTabs.reverse();\n\n    var openedTabs = [];\n\n    for (var i = 0; i < openTabs.length; i++) {\n        if (!empty(openTabs[i])) {\n            if (!in_array(openTabs[i], openedTabs)) {\n                var parts = openTabs[i].split(\"_\");\n                window.setTimeout(function (parts) {\n                    if (parts[1] && parts[2]) {\n                        if (parts[0] == \"asset\") {\n                            pimcore.helpers.openAsset(parts[1], parts[2], {\n                                ignoreForHistory: true,\n                                ignoreNotFoundError: true\n                            });\n                        } else if (parts[0] == \"document\") {\n                            pimcore.helpers.openDocument(parts[1], parts[2], {\n                                ignoreForHistory: true,\n                                ignoreNotFoundError: true\n                            });\n                        } else if (parts[0] == \"object\") {\n                            pimcore.helpers.openObject(parts[1], parts[2], {\n                                ignoreForHistory: true,\n                                ignoreNotFoundError: true\n                            });\n                        }\n                    }\n                }.bind(this, parts), 200);\n            }\n            openedTabs.push(openTabs[i]);\n        }\n    }\n};\n\npimcore.helpers.assetSingleUploadDialog = function (parent, parentType, success, failure, context, uploadAssetType) {\n\n    var params = {};\n    params['parent' + ucfirst(parentType)] = parent;\n\n    var url = Routing.generate('pimcore_admin_asset_addassetcompatibility', params);\n    if (context) {\n        url += \"&context=\" + Ext.encode(context);\n    }\n\n    if(uploadAssetType) {\n        url += \"&uploadAssetType=\" + uploadAssetType;\n    }\n\n    pimcore.helpers.uploadDialog(url, 'Filedata', success, failure);\n};\n\n/**\n * @deprecated\n */\npimcore.helpers.addCsrfTokenToUrl = function (url) {\n    console.error('pimcore.helpers.addCsrfTokenToUrl() function is deprecated. It will be removed in Pimcore 11.');\n\n    // we don't use the CSRF token in the query string\n    return url;\n};\n\npimcore.helpers.uploadDialog = function (url, filename, success, failure, description) {\n\n    if (typeof success != \"function\") {\n        success = function () {\n        };\n    }\n\n    if (typeof failure != \"function\") {\n        failure = function () {\n        };\n    }\n\n    if (typeof filename != \"string\") {\n        filename = \"Filedata\";\n    }\n\n    if (empty(filename)) {\n        filename = \"Filedata\";\n    }\n\n    var uploadWindowCompatible = new Ext.Window({\n        autoHeight: true,\n        title: t('upload'),\n        closeAction: 'close',\n        width: 400,\n        modal: true\n    });\n\n    var items = [];\n\n    if (description) {\n        items.push({\n           xtype: 'displayfield',\n           value: description\n        });\n    }\n\n    items.push({\n        xtype: 'fileuploadfield',\n        emptyText: t(\"select_a_file\"),\n        fieldLabel: t(\"file\"),\n        width: 470,\n        name: filename,\n        buttonText: \"\",\n        buttonConfig: {\n            iconCls: 'pimcore_icon_upload'\n        },\n        listeners: {\n            change: function (fileUploadField) {\n                if(fileUploadField.fileInputEl.dom.files[0].size > pimcore.settings[\"upload_max_filesize\"]) {\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"file_is_bigger_that_upload_limit\") + \" \" + fileUploadField.fileInputEl.dom.files[0].name, \"error\");\n                    return;\n                }\n\n                uploadForm.getForm().submit({\n                    url: url,\n                    params: {\n                        csrfToken: pimcore.settings['csrfToken']\n                    },\n                    waitMsg: t(\"please_wait\"),\n                    success: function (el, res) {\n                        // content-type in response has to be text/html, otherwise (when application/json is sent)\n                        // chrome will complain in Ext.form.Action.Submit and mark the submission as failed\n                        success(res);\n                        uploadWindowCompatible.close();\n                    },\n                    failure: function (el, res) {\n                        failure(res);\n                        uploadWindowCompatible.close();\n                    }\n                });\n            }\n        }\n    });\n\n\n    var uploadForm = new Ext.form.FormPanel({\n        fileUpload: true,\n        width: 500,\n        bodyStyle: 'padding: 10px;',\n        items: items\n    });\n\n    uploadWindowCompatible.add(uploadForm);\n    uploadWindowCompatible.show();\n    uploadWindowCompatible.setWidth(501);\n    uploadWindowCompatible.updateLayout();\n};\n\n\npimcore.helpers.getClassForIcon = function (icon) {\n\n    var styleContainerId = \"pimcore_dynamic_class_for_icon\";\n    var styleContainer = Ext.get(styleContainerId);\n    if (!styleContainer) {\n        styleContainer = Ext.getBody().insertHtml(\"beforeEnd\", '<style type=\"text/css\" id=\"' + styleContainerId\n            + '\"></style>', true);\n    }\n\n    var content = styleContainer.dom.innerHTML;\n    var classname = \"pimcore_dynamic_class_for_icon_\" + uniqid();\n    content += (\".\" + classname + \" { background: url(\" + icon + \") left center no-repeat !important; background-size: 100% 100% !important; }\\n\");\n    styleContainer.dom.innerHTML = content;\n\n    return classname;\n};\n\npimcore.helpers.searchAction = function (type) {\n    pimcore.helpers.itemselector(false, function (selection) {\n            pimcore.helpers.openElement(selection.id, selection.type, selection.subtype);\n        }, {type: [type]},\n        {\n            asTab: true,\n            context: {\n                scope: \"globalSearch\"\n            }\n        });\n};\n\n\npimcore.helpers.openElementByIdDialog = function (type, keyCode, e) {\n\n    if (e[\"stopEvent\"]) {\n        e.stopEvent();\n    }\n\n    Ext.MessageBox.prompt(t('open_' + type + '_by_id'), t('please_enter_the_id_of_the_' + type),\n        function (button, value, object) {\n            if (button == \"ok\" && !Ext.isEmpty(value)) {\n                pimcore.helpers.openElement(value, type);\n            }\n        });\n};\n\npimcore.helpers.openDocumentByPath = function (path) {\n    pimcore.helpers.openElement(path, \"document\");\n};\n\npimcore.helpers.sanitizeAllowedTypes = function (data, name) {\n    if (data[name]) {\n        var newList = [];\n        for (var i = 0; i < data[name].length; i++) {\n            newList.push(data[name][i][name]);\n        }\n        data[name] = newList;\n    }\n};\n\npimcore.helpers.treeNodeThumbnailTimeout = null;\npimcore.helpers.treeNodeThumbnailHideTimeout = null;\npimcore.helpers.treeNodeThumbnailLastClose = 0;\n\npimcore.helpers.treeNodeThumbnailPreview = function (treeView, record, item, index, e, eOpts) {\n\n    if (typeof record.data[\"thumbnail\"] != \"undefined\") {\n\n        // only display thumbnails when dnd is not active\n        if (Ext.dd.DragDropMgr.dragCurrent) {\n            return;\n        }\n\n        var thumbnail = record.data[\"thumbnail\"];\n\n        if (thumbnail) {\n\n            if (pimcore.helpers.treeNodeThumbnailHideTimeout) {\n                clearTimeout(pimcore.helpers.treeNodeThumbnailHideTimeout);\n                pimcore.helpers.treeNodeThumbnailHideTimeout = null;\n            }\n\n            var treeEl = Ext.get(\"pimcore_panel_tree_\" + this.position);\n            var position = treeEl.getOffsetsTo(Ext.getBody());\n            position = position[0];\n\n            if (this.position == \"right\") {\n                position = position - 420;\n            } else {\n                position = treeEl.getWidth() + position;\n            }\n\n            var container = Ext.get(\"pimcore_tree_preview\");\n            if (!container) {\n                container = Ext.getBody().insertHtml(\"beforeEnd\", '<div id=\"pimcore_tree_preview\" class=\"hidden\"><div id=\"pimcore_tree_preview_thumb\"></div></div>');\n                container = Ext.get(container);\n            }\n\n            var triggerTime = (new Date()).getTime();\n            var thumbContainer = Ext.get(\"pimcore_tree_preview_thumb\");\n            thumbContainer.update('');\n\n            pimcore.helpers.treeNodeThumbnailTimeout = window.setTimeout(function () {\n                let img = document.createElement(\"img\");\n                img.src = thumbnail;\n                img.addEventListener('load', function (ev) {\n\n                    if(triggerTime > pimcore.helpers.treeNodeThumbnailLastClose) {\n                        thumbContainer.addCls('complete');\n                        container.removeCls(\"hidden\");\n                    }\n                });\n\n                img.addEventListener('error', function (ev) {\n                    container.addCls(\"hidden\");\n                });\n\n                container.applyStyles(\"left: \" + position + \"px\");\n                thumbContainer.dom.appendChild(img);\n\n            }, 300);\n        }\n    }\n};\n\npimcore.helpers.treeNodeThumbnailPreviewHide = function () {\n\n    if (pimcore.helpers.treeNodeThumbnailTimeout) {\n        clearTimeout(pimcore.helpers.treeNodeThumbnailTimeout);\n        pimcore.helpers.treeNodeThumbnailTimeout = null;\n    }\n\n    let container = Ext.get(\"pimcore_tree_preview\");\n    if (container) {\n        pimcore.helpers.treeNodeThumbnailLastClose = (new Date()).getTime();\n        pimcore.helpers.treeNodeThumbnailHideTimeout = window.setTimeout(function () {\n            container.addCls(\"hidden\");\n        }, 50);\n    }\n};\n\npimcore.helpers.showUser = function (specificUser) {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"users\")) {\n        var panel = null;\n        try {\n            panel = pimcore.globalmanager.get(\"users\");\n            panel.activate();\n        }\n        catch (e) {\n            panel = new pimcore.settings.user.panel();\n            pimcore.globalmanager.add(\"users\", panel);\n        }\n\n        if (specificUser) {\n            panel.openUser(specificUser);\n        }\n    }\n};\n\npimcore.helpers.insertTextAtCursorPosition = function (text) {\n\n    // get focused element\n    var focusedElement = document.activeElement;\n    var win = window;\n    var doc = document;\n\n    // now check if the focus is inside an iframe\n    try {\n        while (focusedElement.tagName.toLowerCase() == \"iframe\") {\n            win = window[focusedElement.getAttribute(\"name\")];\n            doc = win.document;\n            focusedElement = doc.activeElement;\n        }\n    } catch (e) {\n        console.log(e);\n    }\n\n    var elTagName = focusedElement.tagName.toLowerCase();\n\n    if (elTagName == \"input\" || elTagName == \"textarea\") {\n        insertTextToFormElementAtCursor(focusedElement, text);\n    } else if (elTagName == \"div\" && focusedElement.getAttribute(\"contenteditable\")) {\n        insertTextToContenteditableAtCursor(text, win, doc);\n    }\n\n};\n\n\npimcore.helpers.getMainTabMenuItems = function () {\n    items = [{\n        text: t('close_others'),\n        iconCls: \"\",\n        handler: function (menuItem) {\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            var plugin = tabPanel.getPlugin(\"tabclosemenu\");\n            el = plugin.item;\n            pimcore.helpers.closeAllElements(el);\n            // clear the opentab store, so that also non existing elements are flushed\n            pimcore.helpers.clearOpenTab();\n        }.bind(this)\n    }, {\n        text: t('close_unmodified'),\n        iconCls: \"\",\n        handler: function (item) {\n            pimcore.helpers.closeAllUnmodified();\n            // clear the opentab store, so that also non existing elements are flushed\n            pimcore.helpers.clearOpenTab();\n        }.bind(this)\n    }];\n\n\n    // every tab panel can get this\n    items.push({\n        text: t('close_all'),\n        iconCls: \"\",\n        handler: function (item) {\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            pimcore.helpers.closeAllElements(null, tabPanel);\n            // clear the opentab store, so that also non existing elements are flushed\n            pimcore.helpers.clearOpenTab();\n        }.bind(this)\n    });\n\n    return items;\n};\n\n\n//pimcore.helpers.handleTabRightClick = function (tabPanel, el, index) {\n//\n//\n//    if(Ext.get(el.tab)) {\n//        Ext.get(el.tab).on(\"contextmenu\", function (e) {\n//\n//            var items = [];\n//\n//            // this is only for the main tab panel\n//            if(tabPanel.getId() == \"pimcore_panel_tabs\") {\n//                items = [{\n//                    text: t('close_others'),\n//                    iconCls: \"\",\n//                    handler: function (item) {\n//                        pimcore.helpers.closeAllElements(el);\n//                        // clear the opentab store, so that also non existing elements are flushed\n//                        pimcore.helpers.clearOpenTab();\n//                    }.bind(this)\n//                }, {\n//                    text: t('close_unmodified'),\n//                    iconCls: \"\",\n//                    handler: function (item) {\n//                        pimcore.helpers.closeAllUnmodified();\n//                        // clear the opentab store, so that also non existing elements are flushed\n//                        pimcore.helpers.clearOpenTab();\n//                    }.bind(this)\n//                }];\n//            }\n//\n//            // every tab panel can get this\n//            items.push({\n//                text: t('close_all'),\n//                iconCls: \"\",\n//                handler: function (item) {\n//                    pimcore.helpers.closeAllElements(null,tabPanel);\n//                    // clear the opentab store, so that also non existing elements are flushed\n//                    pimcore.helpers.clearOpenTab();\n//                }.bind(this)\n//            });\n//\n//\n//            var menu = new Ext.menu.Menu({\n//                items: items\n//            });\n//\n//            menu.showAt(e.getXY());\n//            e.stopEvent();\n//        });\n//    }\n//};\n\npimcore.helpers.uploadAssetFromFileObject = function (file, url, callbackSuccess, callbackProgress, callbackFailure) {\n\n    if (typeof callbackSuccess != \"function\") {\n        callbackSuccess = function () {\n        };\n    }\n    if (typeof callbackProgress != \"function\") {\n        callbackProgress = function () {\n        };\n    }\n    if (typeof callbackFailure != \"function\") {\n        callbackFailure = function () {\n        };\n    }\n\n    if (file[\"size\"]) {\n        if (file[\"size\"] > pimcore.settings[\"upload_max_filesize\"]) {\n            callbackSuccess();\n            pimcore.helpers.showNotification(t(\"error\"), t(\"file_is_bigger_that_upload_limit\") + \" \" + file.name, \"error\");\n            return;\n        }\n    }\n\n    var data = new FormData();\n    data.append('Filedata', file);\n    data.append(\"filename\", file.name);\n    data.append(\"csrfToken\", pimcore.settings['csrfToken']);\n\n    var request = new XMLHttpRequest();\n\n    // these wrappers simulate the jQuery behavior\n    var successWrapper = function (ev) {\n        var data = JSON.parse(request.responseText);\n        if(ev.currentTarget.status < 400 && data.success === true) {\n            callbackSuccess(data, request.statusText, request);\n        } else {\n            callbackFailure(request, request.statusText, ev);\n        }\n    };\n\n    var errorWrapper = function (ev) {\n        callbackFailure(request, request.statusText, ev);\n    };\n\n    request.upload.addEventListener(\"progress\", callbackProgress, false);\n    request.addEventListener(\"load\", successWrapper, false);\n    request.addEventListener(\"error\", errorWrapper, false);\n    request.addEventListener(\"abort\", errorWrapper, false);\n    request.open('POST', url);\n    request.send(data);\n};\n\n\npimcore.helpers.searchAndMove = function (parentId, callback, type) {\n    if (type == \"object\") {\n        config = {\n            type: [\"object\"],\n            subtype: {\n                object: [\"object\", \"folder\"]\n            },\n            specific: {\n                classes: null\n            }\n        };\n    } else {\n        config = {\n            type: [type]\n        }\n    }\n    pimcore.helpers.itemselector(true, function (selection) {\n\n        var jobs = [];\n\n        if (selection && selection.length > 0) {\n            for (var i = 0; i < selection.length; i++) {\n                var params;\n                if (type == \"object\") {\n                    params = {\n                        id: selection[i][\"id\"],\n                        values: Ext.encode({\n                            parentId: parentId\n                        })\n                    };\n                } else {\n                    params = {\n                        id: selection[i][\"id\"],\n                        parentId: parentId\n                    };\n                }\n                jobs.push([{\n                    url: Routing.getBaseUrl() + \"/admin/\" + type + \"/update\",\n                    method: 'PUT',\n                    params: params\n                }]);\n            }\n        }\n\n        if (jobs.length == 0) {\n            return;\n        }\n\n        this.addChildProgressBar = new Ext.ProgressBar({\n            text: t('initializing')\n        });\n\n        this.addChildWindow = new Ext.Window({\n            title: t(\"move\"),\n            layout: 'fit',\n            width: 200,\n            bodyStyle: \"padding: 10px;\",\n            closable: false,\n            plain: true,\n            items: [this.addChildProgressBar],\n            listeners: pimcore.helpers.getProgressWindowListeners()\n        });\n\n        this.addChildWindow.show();\n\n        var pj = new pimcore.tool.paralleljobs({\n            success: function (callbackFunction) {\n\n                if (this.addChildWindow) {\n                    this.addChildWindow.close();\n                }\n\n                this.deleteProgressBar = null;\n                this.addChildWindow = null;\n\n                if (typeof callbackFunction == \"function\") {\n                    callbackFunction();\n                }\n\n                try {\n                    var node = pimcore.globalmanager.get(\"layout_object_tree\").tree.getNodeById(this.object.id);\n                    if (node) {\n                        tree.getStore().load({\n                            node: node\n                        });\n                    }\n                } catch (e) {\n                    // node is not present\n                }\n            }.bind(this, callback),\n            update: function (currentStep, steps, percent) {\n                if (this.addChildProgressBar) {\n                    var status = currentStep / steps;\n                    this.addChildProgressBar.updateProgress(status, percent + \"%\");\n                }\n            }.bind(this),\n            failure: function (response) {\n                this.addChildWindow.close();\n                Ext.MessageBox.alert(t(\"error\"), t(response));\n            }.bind(this),\n            jobs: jobs\n        });\n\n    }.bind(this), config);\n};\n\n\npimcore.helpers.sendTestEmail = function (from, to, subject, emailType, documentPath, content) {\n\n    if(!emailType) {\n        emailType = 'text';\n    }\n\n    var emailContentTextField = new Ext.form.TextArea({\n        name: \"content\",\n        fieldLabel: t(\"content\"),\n        height: 300,\n    });\n    emailContentTextField.hide();\n\n    var documentTextField = new Ext.form.TextField({\n        name: 'documentPath',\n        flex: 1,\n        editable: false\n    });\n    var searchDocumentButton = new Ext.Button({\n        name: 'searchDocument',\n        fieldLabel: t('document'),\n        iconCls: 'pimcore_icon_search',\n        handler: function() {\n            pimcore.helpers.itemselector(false, function(e) {\n                documentTextField.setValue(e.fullpath);\n            }, {\n                type: [\"document\"],\n                subtype: {\n                    document: [\"email\", \"newsletter\"]\n                }\n            });\n        }\n    });\n\n    var documentComponent = Ext.create('Ext.form.FieldContainer', {\n        fieldLabel: t('document'),\n        layout: 'hbox',\n        items: [\n            documentTextField,\n            searchDocumentButton\n        ],\n        componentCls: \"object_field\",\n        border: false,\n        style: {\n            padding: 0\n        }\n    });\n    documentComponent.hide();\n\n\n    var emailTypeDropdown = new Ext.form.ComboBox({\n        name: 'emailType',\n        width: 300,\n        value: emailType,\n        store: [\n            ['document', t('document')],\n            ['html', t('html')],\n            ['text', t('text')]\n        ],\n        fieldLabel: t('type'),\n        listeners: {\n            select: function(t) {\n                if(t.value == 'text' || t.value == 'html') {\n                    emailContentTextField.show();\n                } else {\n                    emailContentTextField.hide();\n                }\n\n                if(t.value == 'document') {\n                    documentComponent.show();\n                    paramGrid.show();\n                } else {\n                    documentComponent.hide();\n                    paramGrid.hide();\n                }\n            }\n        }\n    });\n\n    var fromTextField = new Ext.form.TextField({\n        name: \"from\",\n        fieldLabel: t(\"from\"),\n    });\n\n    var toTextField = new Ext.form.TextField({\n        name: \"to\",\n        fieldLabel: t(\"to\"),\n    });\n\n    var subjectTextField = new Ext.form.TextField({\n        name: \"subject\",\n        fieldLabel: t(\"subject\"),\n    });\n\n    var paramsStore = new Ext.data.ArrayStore({\n        fields: [\n            {name: 'key', type: 'string', persist: false},\n            {name: 'value', type: 'string', persist: false}\n        ]\n    });\n\n    var paramGrid = Ext.create('Ext.grid.Panel', {\n        store: paramsStore,\n        columns: [\n            {\n                text: t('key'),\n                dataIndex: 'key',\n                editor: new Ext.form.TextField(),\n                width: 200\n            },\n            {\n                text: t('value'),\n                dataIndex: 'value',\n                editor: new Ext.form.TextField(),\n                flex: 1\n            }\n        ],\n        stripeRows: true,\n        columnLines: true,\n        bodyCls: \"pimcore_editable_grid\",\n        autoHeight: true,\n        selModel: Ext.create('Ext.selection.CellModel'),\n        hideHeaders: false,\n        plugins: [\n            Ext.create('Ext.grid.plugin.CellEditing', {})\n        ],\n        tbar: [\n            {\n                iconCls: \"pimcore_icon_table_row pimcore_icon_overlay_add\",\n                handler: function() {\n                    paramsStore.add({'key' : '', 'value': ''});\n                }\n            },\n            {\n                xtype: 'label',\n                html: t('parameters')\n            }\n        ]\n    });\n    paramGrid.hide();\n\n    var win = new Ext.Window({\n\n        width: 800,\n        height: 600,\n        modal: true,\n        title: t(\"send_test_email\"),\n        layout: \"fit\",\n        closeAction: \"close\",\n        items: [{\n            xtype: \"form\",\n            bodyStyle: \"padding:10px;\",\n            itemId: \"form\",\n            items: [\n                fromTextField,\n                toTextField,\n                subjectTextField,\n                emailTypeDropdown,\n                emailContentTextField,\n                documentComponent,\n                paramGrid\n            ],\n            defaults: {\n                width: 780\n            }\n        }],\n        buttons: [{\n            text: t(\"send\"),\n            iconCls: \"pimcore_icon_email\",\n            handler: function () {\n                send();\n            }\n        }]\n    });\n\n    var send = function () {\n\n\n        var params = win.getComponent(\"form\").getForm().getFieldValues();\n        if(emailTypeDropdown.getValue() === 'document') {\n            var allRecords = paramsStore\n                .queryBy(function() { return true; }) // returns a collection\n                .getRange();\n            var emailParamsArray = [];\n            for (var i = 0; i < allRecords.length; i++) {\n                emailParamsArray.push({\"key\": allRecords[i].data['key'], \"value\": allRecords[i].data['value']});\n\n            }\n            params['mailParamaters'] =  JSON.stringify(emailParamsArray);\n        }\n\n\n        win.disable();\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_email_sendtestemail'),\n            params: params,\n            method: \"post\",\n            success: function () {\n                Ext.Msg.show({\n                    title: t(\"send_test_email\"),\n                    message: t(\"send_test_email_success\"),\n                    buttons: Ext.Msg.YESNO,\n                    icon: Ext.Msg.QUESTION,\n                    fn: function (btn) {\n                        win.enable();\n                        if (btn === 'no') {\n                            win.close();\n                        }\n                    }\n                });\n            },\n            failure: function () {\n                win.close();\n            }\n        });\n\n    };\n\n\n\n    if(emailType) {\n        emailTypeDropdown.setValue(emailType);\n        if(emailType == 'document') {\n            documentComponent.show();\n            paramGrid.show();\n        }\n        if(emailType == 'html' || emailType == 'text') {\n            emailContentTextField.show();\n        }\n    }\n    if(documentPath) {\n        documentTextField.setValue(documentPath);\n    }\n    if(content) {\n        emailContentTextField.setValue(content);\n    }\n    if(from) {\n        fromTextField.setValue(from);\n    }\n    if(to) {\n        toTextField.setValue(to);\n    }\n    if(subject) {\n        subjectTextField.setValue(subject);\n    }\n\n\n    win.show();\n\n\n};\n\n/* this is here so that it can be opened in the parent window when in editmode frame */\npimcore.helpers.openImageCropper = function (imageId, data, saveCallback, config) {\n    var cropper = new top.pimcore.element.tag.imagecropper(imageId, data, saveCallback, config);\n    return cropper;\n};\n\n/* this is here so that it can be opened in the parent window when in editmode frame */\npimcore.helpers.openImageHotspotMarkerEditor = function (imageId, data, saveCallback, config) {\n    var editor = new pimcore.element.tag.imagehotspotmarkereditor(imageId, data, saveCallback, config);\n    return editor;\n};\n\n\npimcore.helpers.editmode = {};\n\npimcore.helpers.editmode.openLinkEditPanel = function (data, callback) {\n\n\n    var internalTypeField = new Ext.form.Hidden({\n        fieldLabel: 'internalType',\n        value: data.internalType,\n        name: 'internalType',\n        readOnly: true,\n        width: 520\n    });\n\n    var linkTypeField = new Ext.form.Hidden({\n        fieldLabel: 'linktype',\n        value: data.linktype,\n        name: 'linktype',\n        readOnly: true,\n        width: 520\n    });\n\n    var fieldPath = new Ext.form.TextField({\n        fieldLabel: t('path'),\n        value: data.path,\n        name: \"path\",\n        width: 520,\n        fieldCls: \"pimcore_droptarget_input\",\n        enableKeyEvents: true,\n        listeners: {\n            keyup: function (el) {\n                const value = el.getValue();\n                const pathRegex = new RegExp('^(/|(/[^/]+)+/?)$');\n\n                if(value && !value.match(pathRegex)) {\n                    internalTypeField.setValue(null);\n                    linkTypeField.setValue(\"direct\");\n                }\n            }\n        }\n    });\n\n\n    fieldPath.on(\"render\", function (el) {\n        // add drop zone\n        new Ext.dd.DropZone(el.getEl(), {\n            reference: this,\n            ddGroup: \"element\",\n            getTargetFromEvent: function (e) {\n                return fieldPath.getEl();\n            },\n\n            onNodeOver: function (target, dd, e, data) {\n                if (data.records.length === 1 && data.records[0].data.type !== \"folder\") {\n                    return Ext.dd.DropZone.prototype.dropAllowed;\n                }\n            }.bind(this),\n\n            onNodeDrop: function (target, dd, e, data) {\n\n                if(!pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                    return false;\n                }\n\n                data = data.records[0].data;\n                if (data.type !== \"folder\") {\n                    internalTypeField.setValue(data.elementType);\n                    linkTypeField.setValue('internal');\n                    fieldPath.setValue(data.path);\n                    return true;\n                }\n                return false;\n            }.bind(this)\n        });\n    }.bind(this));\n\n    var form = new Ext.FormPanel({\n        itemId: \"form\",\n        items: [\n            {\n                xtype: 'tabpanel',\n                deferredRender: false,\n                defaults: {autoHeight: true, bodyStyle: 'padding:10px'},\n                border: false,\n                items: [\n                    {\n                        title: t('basic'),\n                        layout: 'vbox',\n                        border: false,\n                        defaultType: 'textfield',\n                        items: [\n                            // do not change the order, the server-side works with setValues - setPath expects\n                            // the types are already set correctly\n                            internalTypeField,\n                            linkTypeField,\n                            {\n                                fieldLabel: t('text'),\n                                name: 'text',\n                                value: data.text\n                            },\n                            {\n                                xtype: \"fieldcontainer\",\n                                layout: 'hbox',\n                                border: false,\n                                items: [fieldPath, {\n                                    xtype: \"button\",\n                                    iconCls: \"pimcore_icon_search\",\n                                    style: \"margin-left: 5px\",\n                                    handler: function () {\n                                        pimcore.helpers.itemselector(false, function (item) {\n                                            if (item) {\n                                                internalTypeField.setValue(item.type);\n                                                linkTypeField.setValue('internal');\n                                                fieldPath.setValue(item.fullpath);\n                                                return true;\n                                            }\n                                        }, {\n                                            type: [\"asset\", \"document\", \"object\"]\n                                        });\n                                    }\n                                }]\n                            },\n                            {\n                                xtype: 'fieldset',\n                                layout: 'vbox',\n                                title: t('properties'),\n                                collapsible: false,\n                                defaultType: 'textfield',\n                                width: '100%',\n                                defaults: {\n                                    width: 250\n                                },\n                                items: [\n                                    {\n                                        xtype: \"combo\",\n                                        fieldLabel: t('target'),\n                                        name: 'target',\n                                        triggerAction: 'all',\n                                        editable: true,\n                                        mode: \"local\",\n                                        store: [\"\", \"_blank\", \"_self\", \"_top\", \"_parent\"],\n                                        value: data.target,\n                                        width: 300\n                                    },\n                                    {\n                                        fieldLabel: t('parameters'),\n                                        name: 'parameters',\n                                        value: data.parameters\n                                    },\n                                    {\n                                        fieldLabel: t('anchor'),\n                                        name: 'anchor',\n                                        value: data.anchor\n                                    },\n                                    {\n                                        fieldLabel: t('title'),\n                                        name: 'title',\n                                        value: data.title\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        title: t('advanced'),\n                        layout: 'form',\n                        defaultType: 'textfield',\n                        border: false,\n                        items: [\n                            {\n                                fieldLabel: t('accesskey'),\n                                name: 'accesskey',\n                                value: data.accesskey\n                            },\n                            {\n                                fieldLabel: t('relation'),\n                                name: 'rel',\n                                width: 300,\n                                value: data.rel\n                            },\n                            {\n                                fieldLabel: ('tabindex'),\n                                name: 'tabindex',\n                                value: data.tabindex\n                            },\n                            {\n                                fieldLabel: t('class'),\n                                name: 'class',\n                                width: 300,\n                                value: data[\"class\"]\n                            },\n                            {\n                                fieldLabel: t('attributes') + ' (key=\"value\")',\n                                name: 'attributes',\n                                width: 300,\n                                value: data[\"attributes\"]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ],\n        buttons: [\n            {\n                text: t(\"empty\"),\n                listeners: {\n                    \"click\": callback[\"empty\"]\n                },\n                iconCls: \"pimcore_icon_empty\"\n            },\n            {\n                text: t(\"cancel\"),\n                listeners: {\n                    \"click\": callback[\"cancel\"]\n                },\n                iconCls: \"pimcore_icon_cancel\"\n            },\n            {\n                text: t(\"save\"),\n                listeners: {\n                    \"click\": callback[\"save\"]\n                },\n                iconCls: \"pimcore_icon_save\"\n            }\n        ]\n    });\n\n\n    var window = new Ext.Window({\n        modal: false,\n        width: 600,\n        height: 470,\n        title: t(\"edit_link\"),\n        items: [form],\n        layout: \"fit\"\n    });\n\n    window.show();\n\n    return window;\n};\n\n\npimcore.helpers.editmode.openVideoEditPanel = function (data, callback) {\n\n    const allowedTypes = data.allowedTypes;\n    var window = null;\n    var form = null;\n    var fieldPath = new Ext.form.TextField({\n        fieldLabel: t('path'),\n        itemId: \"path\",\n        value: data.path,\n        name: \"path\",\n        width: 420,\n        fieldCls: \"pimcore_droptarget_input\",\n        enableKeyEvents: true,\n        listeners: {\n            keyup: function (el) {\n                if (allowedTypes.includes(\"youtube\")\n                    && (el.getValue().indexOf(\"youtu.be\") >= 0 || el.getValue().indexOf(\"youtube.com\") >= 0) && el.getValue().indexOf(\"http\") >= 0) {\n                    form.getComponent(\"type\").setValue(\"youtube\");\n                    updateType(\"youtube\");\n                } else if (allowedTypes.includes(\"vimeo\")\n                    && el.getValue().indexOf(\"vimeo\") >= 0 && el.getValue().indexOf(\"http\") >= 0) {\n                    form.getComponent(\"type\").setValue(\"vimeo\");\n                    updateType(\"vimeo\");\n                } else if (allowedTypes.includes(\"dailymotion\")\n                    && (el.getValue().indexOf(\"dai.ly\") >= 0 || el.getValue().indexOf(\"dailymotion\") >= 0) && el.getValue().indexOf(\"http\") >= 0) {\n                    form.getComponent(\"type\").setValue(\"dailymotion\");\n                    updateType(\"dailymotion\");\n                }\n            }.bind(this)\n        }\n    });\n\n    var poster = new Ext.form.TextField({\n        fieldLabel: t('poster_image'),\n        value: data.poster,\n        name: \"poster\",\n        width: 420,\n        fieldCls: \"pimcore_droptarget_input\",\n        enableKeyEvents: true,\n        listeners: {\n            keyup: function (el) {\n                //el.setValue(data.poster)\n            }.bind(this)\n        }\n    });\n\n    var initDD = function (el) {\n        // register at global DnD manager\n        new Ext.dd.DropZone(el.getEl(), {\n            reference: this,\n            ddGroup: \"element\",\n            getTargetFromEvent: function (e) {\n                return el.getEl();\n            },\n\n            onNodeOver: function (target, dd, e, data) {\n                if(data.records.length === 1) {\n                    data = data.records[0].data;\n                    if (target && target.getId() == poster.getId()) {\n                        if (data.elementType == \"asset\" && data.type == \"image\") {\n                            return Ext.dd.DropZone.prototype.dropAllowed;\n                        }\n                    } else {\n                        if (data.elementType == \"asset\" && data.type == \"video\") {\n                            return Ext.dd.DropZone.prototype.dropAllowed;\n                        }\n                    }\n                }\n                return Ext.dd.DropZone.prototype.dropNotAllowed;\n            }.bind(this),\n\n            onNodeDrop: function (target, dd, e, data) {\n\n                if(!pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                    return false;\n                }\n\n                if (target) {\n                    data = data.records[0].data;\n\n                    if (target.getId() == fieldPath.getId()) {\n                        if (data.elementType == \"asset\" && data.type == \"video\") {\n                            fieldPath.setValue(data.path);\n                            form.getComponent(\"type\").setValue(\"asset\");\n                            updateType(\"asset\");\n                            return true;\n                        }\n                    } else if (target.getId() == poster.getId()) {\n                        if (data.elementType == \"asset\" && data.type == \"image\") {\n                            poster.setValue(data.path);\n                            return true;\n                        }\n                    }\n                }\n\n                return false;\n            }.bind(this)\n        });\n    };\n\n    if (allowedTypes.includes(\"asset\")) {\n        fieldPath.on(\"render\", initDD);\n        poster.on(\"render\", initDD);\n    }\n\n    var searchButton = new Ext.Button({\n        iconCls: \"pimcore_icon_search\",\n        handler: function () {\n            pimcore.helpers.itemselector(false, function (item) {\n                if (item) {\n                    fieldPath.setValue(item.fullpath);\n                    return true;\n                }\n            }, {\n                type: [\"asset\"],\n                subtype: {\n                    asset: [\"video\"]\n                }\n            });\n        }\n    });\n\n    var openButton = new Ext.Button({\n        iconCls: \"pimcore_icon_open\",\n        handler: function () {\n            pimcore.helpers.openElement(fieldPath.getValue(), 'asset');\n            window.close();\n        }\n    });\n\n    var posterImageSearchButton = new Ext.Button({\n        iconCls: \"pimcore_icon_search\",\n        handler: function () {\n            pimcore.helpers.itemselector(false, function (item) {\n                if (item) {\n                    poster.setValue(item.fullpath);\n                    return true;\n                }\n            }, {\n                type: [\"asset\"],\n                subtype: {\n                    asset: [\"image\"]\n                }\n            });\n        }\n    });\n\n    var posterImageOpenButton = new Ext.Button({\n        iconCls: \"pimcore_icon_open\",\n        handler: function () {\n            pimcore.helpers.openElement(poster.getValue(), 'asset');\n            window.close();\n        }\n    });\n\n    var updateType = function (type) {\n        searchButton.enable();\n        openButton.enable();\n\n        var labelEl = form.getComponent(\"pathContainer\").getComponent(\"path\").labelEl;\n        labelEl.update(t(\"path\"));\n\n        if (type != \"asset\") {\n            searchButton.disable();\n            openButton.disable();\n\n            poster.hide();\n            poster.setValue(\"\");\n            form.getComponent(\"posterContainer\").hide();\n            form.getComponent(\"title\").hide();\n            form.getComponent(\"title\").setValue(\"\");\n            form.getComponent(\"description\").hide();\n            form.getComponent(\"description\").setValue(\"\");\n        } else {\n            poster.show();\n            form.getComponent(\"posterContainer\").show();\n            form.getComponent(\"title\").show();\n            form.getComponent(\"description\").show();\n        }\n\n        if (type == \"youtube\") {\n            labelEl.update(\"ID\");\n        }\n\n        if (type == \"vimeo\") {\n            labelEl.update(\"ID\");\n        }\n\n        if (type == \"dailymotion\") {\n            labelEl.update(\"ID\");\n        }\n    };\n\n    form = new Ext.FormPanel({\n        itemId: \"form\",\n        bodyStyle: \"padding:10px;\",\n        items: [{\n            xtype: \"combo\",\n            itemId: \"type\",\n            fieldLabel: t('type'),\n            name: 'type',\n            triggerAction: 'all',\n            editable: false,\n            width: 270,\n            mode: \"local\",\n            store: allowedTypes,\n            value: data.type,\n            listeners: {\n                select: function (combo) {\n                    var type = combo.getValue();\n                    updateType(type);\n                }.bind(this)\n            }\n        }, {\n            xtype: \"fieldcontainer\",\n            layout: 'hbox',\n            border: false,\n            itemId: \"pathContainer\",\n            items: [fieldPath, searchButton, openButton]\n        }, {\n            xtype: \"fieldcontainer\",\n            layout: 'hbox',\n            border: false,\n            itemId: \"posterContainer\",\n            items: [poster, posterImageSearchButton, posterImageOpenButton]\n        }, {\n            xtype: \"textfield\",\n            name: \"title\",\n            itemId: \"title\",\n            fieldLabel: t('title'),\n            width: 420,\n            value: data.title\n        }, {\n            xtype: \"textarea\",\n            itemId: \"description\",\n            name: \"description\",\n            fieldLabel: t('description'),\n            width: 420,\n            height: 50,\n            value: data.description\n        }],\n        buttons: [\n            {\n                text: t(\"save\"),\n                listeners: {\n                    \"click\": callback[\"save\"]\n                },\n                iconCls: \"pimcore_icon_save\"\n            },\n            {\n                text: t(\"cancel\"),\n                iconCls: \"pimcore_icon_cancel\",\n                listeners: {\n                    \"click\": callback[\"cancel\"]\n                }\n            }\n        ]\n    });\n\n    window = new Ext.Window({\n        width: 510,\n        height: 370,\n        title: t(\"video\"),\n        items: [form],\n        layout: \"fit\",\n        listeners: {\n            afterrender: function () {\n                updateType(data.type);\n            }.bind(this)\n        }\n    });\n    window.show();\n\n    return window;\n};\n\n\npimcore.helpers.showAbout = function () {\n\n    var html = '<div class=\"pimcore_about_window\">';\n    html += '<br><img src=\"/bundles/pimcoreadmin/img/logo-gray.svg\" style=\"width: 300px;\"><br>';\n    html += '<br><b>Version: ' + pimcore.settings.version + '</b>';\n    html += '<br><b>Git Hash: <a href=\"https://github.com/pimcore/pimcore/commit/' + pimcore.settings.build + '\" target=\"_blank\">' + pimcore.settings.build + '</a></b>';\n    html += '<br><br>&copy; by pimcore GmbH (<a href=\"https://pimcore.com/\" target=\"_blank\">pimcore.com</a>)';\n    html += '<br><br><a href=\"https://github.com/pimcore/pimcore/blob/10.5/LICENSE.md\" target=\"_blank\">License</a> | ';\n    html += '<a href=\"https://pimcore.com/en/about/contact\" target=\"_blank\">Contact</a>';\n    html += '<img src=\"/bundles/pimcoreadmin/img/austria-heart.svg\" style=\"position:absolute;top:172px;right:45px;width:32px;\">';\n    html += '</div>';\n\n    var win = new Ext.Window({\n        title: t(\"about\"),\n        width: 500,\n        height: 300,\n        bodyStyle: \"padding: 10px;\",\n        modal: true,\n        html: html\n    });\n\n    win.show();\n};\n\npimcore.helpers.markColumnConfigAsFavourite = function (objectId, classId, gridConfigId, searchType, global, type) {\n\n    type = type || \"object\";\n\n    var assetRoute = 'pimcore_admin_asset_assethelper_gridmarkfavouritecolumnconfig';\n    var objectRoute = 'pimcore_admin_dataobject_dataobjecthelper_gridmarkfavouritecolumnconfig';\n    var route = null;\n\n    if (type === 'object') {\n        route = objectRoute;\n    }\n    else if (type === 'asset') {\n        route = assetRoute;\n    }\n    else {\n        throw new Error('Unknown type given, given \"' + type + '\"');\n    }\n\n    try {\n        var url = Routing.generate(route);\n\n        Ext.Ajax.request({\n            url: url,\n            method: \"post\",\n            params: {\n                objectId: objectId,\n                classId: classId,\n                gridConfigId: gridConfigId,\n                searchType: searchType,\n                global: global ? 1 : 0,\n                type: type\n            },\n            success: function (response) {\n                try {\n                    var rdata = Ext.decode(response.responseText);\n\n                    if (rdata && rdata.success) {\n                        pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n\n                        if (rdata.spezializedConfigs) {\n                            pimcore.helpers.removeOtherConfigs(objectId, classId, gridConfigId, searchType);\n                        }\n                    }\n                    else {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"),\n                            \"error\", t(rdata.message));\n                    }\n                } catch (e) {\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n                }\n            }.bind(this),\n            failure: function () {\n                pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n            }\n        });\n\n    } catch (e3) {\n        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n    }\n};\n\n\npimcore.helpers.removeOtherConfigs = function (objectId, classId, gridConfigId, searchType) {\n    Ext.MessageBox.show({\n        title: t('apply_to_all_objects'),\n        msg: t('apply_to_all_objects_msg'),\n        buttons: Ext.Msg.YESNO,\n        icon: Ext.MessageBox.INFO,\n        fn: function (btn) {\n            if (btn == \"yes\") {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_dataobject_dataobjecthelper_gridconfigapplytoall'),\n                    method: \"post\",\n                    params: {\n                        objectId: objectId,\n                        classId: classId,\n                        gridConfigId: gridConfigId,\n                        searchType: searchType,\n                    }\n                });\n            }\n\n        }.bind(this)\n    });\n};\n\npimcore.helpers.saveColumnConfig = function (objectId, classId, configuration, searchType, button, callback, settings, type, context) {\n\n    type = type || \"object\";\n\n    var assetRoute = 'pimcore_admin_asset_assethelper_gridsavecolumnconfig';\n    var objectRoute = 'pimcore_admin_dataobject_dataobjecthelper_gridsavecolumnconfig';\n    var route = null;\n\n    if (type === 'object') {\n        route = objectRoute;\n    }\n    else if (type === 'asset') {\n        route = assetRoute;\n    }\n    else {\n        throw new Error('Unknown type given, given \"' + type + '\"');\n    }\n\n    try {\n        type = type || \"object\";\n        var data = {\n            id: objectId,\n            class_id: classId,\n            gridconfig: Ext.encode(configuration),\n            searchType: searchType,\n            settings: Ext.encode(settings),\n            context: Ext.encode(context),\n            type: type\n        };\n\n        var url = Routing.generate(route);\n\n        Ext.Ajax.request({\n            url: url,\n            method: \"post\",\n            params: data,\n            success: function (response) {\n                try {\n                    var rdata = Ext.decode(response.responseText);\n                    if (rdata && rdata.success) {\n                        if (button) {\n                            button.hide();\n                        }\n                        if (typeof callback == \"function\") {\n                            callback(rdata);\n                        }\n                        pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n                    }\n                    else {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"),\n                            \"error\", t(rdata.message));\n                    }\n                } catch (e) {\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n                }\n            }.bind(this),\n            failure: function () {\n                pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n            }\n        });\n\n    } catch (e3) {\n        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n    }\n};\n\npimcore.helpers.openGenericIframeWindow = function (id, src, iconCls, title) {\n    try {\n        pimcore.globalmanager.get(id).activate();\n    }\n    catch (e) {\n        pimcore.globalmanager.add(id, new pimcore.tool.genericiframewindow(id, src, iconCls, title));\n    }\n};\n\npimcore.helpers.hideRedundantSeparators = function (menu) {\n    var showSeparator = false;\n\n    for (var i = 0; i < menu.items.length; i++) {\n        var item = menu.items.getAt(i);\n\n        if (item instanceof Ext.menu.Separator) {\n            if (!showSeparator || i == menu.items.length - 1) {\n                item.hide();\n            }\n            showSeparator = false;\n        } else {\n            showSeparator = true;\n        }\n    }\n};\n\npimcore.helpers.initMenuTooltips = function () {\n    Ext.each(Ext.query(\"[data-menu-tooltip]:not(.initialized)\"), function (el) {\n        var item = Ext.get(el);\n\n        if (item) {\n            item.on(\"mouseenter\", function (e) {\n                var pimcore_tooltip = Ext.get('pimcore_tooltip');\n                var item = Ext.get(e.target);\n                pimcore_tooltip.show();\n                pimcore_tooltip.removeCls('right');\n                pimcore_tooltip.update(item.getAttribute(\"data-menu-tooltip\"));\n\n                var offset = item.getXY();\n                var top = offset[1];\n                top = top + (item.getHeight() / 2);\n\n                pimcore_tooltip.applyStyles({\n                    top: top + \"px\",\n                    left: '60px',\n                    right: 'auto'\n                });\n            }.bind(this));\n\n            item.on(\"mouseleave\", function (e) {\n                Ext.get('pimcore_tooltip').hide();\n            });\n\n            item.addCls(\"initialized\", \"true\");\n        }\n    });\n};\n\npimcore.helpers.requestNicePathDataGridDecorator = function (gridView, targets) {\n\n    if(targets && targets.count() > 0) {\n        gridView.mask();\n    }\n    targets.each(function (record) {\n        var el = gridView.getRow(record);\n        if (el) {\n            el = Ext.fly(el);\n            el.addCls(\"grid_nicepath_requested\");\n        }\n    }, this);\n\n};\n\npimcore.helpers.requestNicePathData = function (source, targets, config, fieldConfig, context, decorator, responseHandler) {\n    if (context && (context['containerType'] == \"batch\" || context['containerType'] == \"filterByRelationWindow\")) {\n        return;\n    }\n\n    if (!config.loadEditModeData && (typeof targets === \"undefined\" || !fieldConfig.pathFormatterClass)) {\n        return;\n    }\n\n    if (!targets.getCount() > 0) {\n        return;\n    }\n\n    config = config || {};\n    Ext.applyIf(config, {\n        idProperty: \"id\"\n    });\n\n    var elementData = {};\n\n    targets.each(function (record) {\n        var recordId = record.data[config.idProperty];\n        elementData[recordId] = record.data;\n    }, this);\n\n    if (decorator) {\n        decorator(targets);\n    }\n\n    elementData = Ext.encode(elementData);\n\n    Ext.Ajax.request({\n        method: 'POST',\n        url: Routing.generate('pimcore_admin_element_getnicepath'),\n        params: {\n            source: Ext.encode(source),\n            targets: elementData,\n            context: Ext.encode(context),\n            loadEditModeData: config.loadEditModeData,\n            idProperty: config.idProperty\n        },\n        success: function (response) {\n            try {\n                var rdata = Ext.decode(response.responseText);\n                if (rdata.success) {\n\n                    var responseData = rdata.data;\n                    responseHandler(responseData);\n\n                    pimcore.layout.refresh();\n                }\n            } catch (e) {\n                console.log(e);\n            }\n        }.bind(this)\n    });\n\n    return true;\n};\n\npimcore.helpers.getNicePathHandlerStore = function (store, config, gridView, responseData) {\n    config = config || {};\n    Ext.applyIf(config, {\n        idProperty: \"id\",\n        pathProperty: \"path\"\n    });\n\n    store.ignoreDataChanged = true;\n    store.each(function (record, id) {\n        var recordId = record.data[config.idProperty];\n\n        if (typeof responseData[recordId] != \"undefined\") {\n\n            if(config.loadEditModeData) {\n                for(var i = 0; i < config.fields.length; i++) {\n                    record.set(config.fields[i], responseData[recordId][config.fields[i]], {dirty: false});\n                }\n                if(responseData[recordId]['$$nicepath']) {\n                    record.set(config.pathProperty, responseData[recordId]['$$nicepath'], {dirty: false});\n                }\n            } else {\n                record.set(config.pathProperty, responseData[recordId], {dirty: false});\n            }\n\n            var el = gridView.getRow(record);\n            if (el) {\n                el = Ext.fly(el);\n                el.removeCls(\"grid_nicepath_requested\");\n            }\n\n        }\n    }, this);\n    store.ignoreDataChanged = false;\n\n    gridView.unmask();\n    gridView.updateLayout();\n};\n\npimcore.helpers.exportWarning = function (type, callback) {\n    var iconComponent = new Ext.Component({\n        cls: \"x-message-box-warning x-dlg-icon\"\n    });\n\n    var textContainer = Ext.Component({\n        html: type.warningText\n    });\n\n    var promptContainer = new Ext.container.Container({\n        flex: 1,\n        layout: {\n            type: 'vbox',\n            align: 'stretch'\n        },\n        padding: '0px 0px 0px 10px',\n        items: [textContainer]\n    });\n\n    var topContainer = new Ext.container.Container({\n            layout: 'hbox',\n            padding: 10,\n            style: {\n                overflow: 'hidden'\n            },\n            items: [iconComponent, promptContainer]\n        }\n    );\n\n    var objectSettingsContainer = type.getObjectSettingsContainer();\n\n    var formPanelItems = [];\n\n    if (objectSettingsContainer) {\n        formPanelItems.push(objectSettingsContainer);\n    }\n\n    var exportSettingsContainer = type.getExportSettingsContainer();\n\n    if (exportSettingsContainer) {\n        formPanelItems.push(exportSettingsContainer);\n    }\n\n    var formPanel = new Ext.form.FormPanel({\n        bodyStyle: 'padding:10px',\n        items: formPanelItems\n    });\n\n    var window = new Ext.Window({\n        modal: true,\n        title: type.text,\n        width: 600,\n        bodyStyle: \"padding: 10px;\",\n        buttonAlign: \"center\",\n        shadow: false,\n        closable: true,\n        items: [topContainer, formPanel],\n        buttons: [{\n            text: t(\"OK\"),\n            handler: function () {\n                if (formPanel.isValid()) {\n                    callback(formPanel.getValues());\n                    window.close();\n                }\n            }.bind(this)\n        },\n            {\n                text: t(\"cancel\"),\n                handler: function () {\n                    window.close();\n                }\n            }\n        ]\n    });\n\n    window.show();\n};\n\npimcore.helpers.generatePassword = function (len) {\n    var length = (len) ? (len) : (20);\n    var string = \"abcdefghijklmnopqrstuvwxyz\"; //to upper\n    var numeric = '0123456789';\n    var password = \"\";\n    var character = \"\";\n    while (password.length < length) {\n        entity1 = Math.ceil(string.length * Math.random() * Math.random());\n        entity2 = Math.ceil(numeric.length * Math.random() * Math.random());\n        hold = string.charAt(entity1);\n        hold = (entity1 % 2 == 0) ? (hold.toUpperCase()) : (hold);\n        character += hold;\n        character += numeric.charAt(entity2);\n        password = character;\n    }\n    return password;\n};\n\npimcore.helpers.isValidPassword = function (pass) {\n    if (pass.length < 10) {\n        return false;\n    }\n    return true;\n};\n\npimcore.helpers.getDeeplink = function (type, id, subtype) {\n    let target = type + \"_\" + id + \"_\" + subtype;\n    let url    = Routing.generate('pimcore_admin_login_deeplink', {}, true) + '?' + target;\n\n    if (pimcore.settings['custom_admin_entrypoint_url'] !== null) {\n        url = pimcore.settings['custom_admin_entrypoint_url'] + '?deeplink=' + target;\n    }\n\n    return url;\n};\n\npimcore.helpers.showElementHistory = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"objects\") || user.isAllowed(\"documents\") || user.isAllowed(\"assets\")) {\n        pimcore.layout.toolbar.prototype.showElementHistory();\n    }\n};\n\npimcore.helpers.closeAllTabs = function() {\n    pimcore.helpers.closeAllElements();\n    // clear the opentab store, so that also non existing elements are flushed\n    pimcore.helpers.clearOpenTab();\n\n};\n\npimcore.helpers.searchAndReplaceAssignments = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"objects\") || user.isAllowed(\"documents\") || user.isAllowed(\"assets\")) {\n        new pimcore.element.replace_assignments();\n    }\n};\n\npimcore.helpers.glossary = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"glossary\")) {\n        pimcore.layout.toolbar.prototype.editGlossary();\n    }\n};\n\npimcore.helpers.redirects = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"redirects\")) {\n        pimcore.layout.toolbar.prototype.editRedirects();\n    }\n};\n\npimcore.helpers.sharedTranslations = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"translations\")) {\n        pimcore.layout.toolbar.prototype.editTranslations();\n    }\n};\n\npimcore.helpers.recycleBin = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"recyclebin\")) {\n        pimcore.layout.toolbar.prototype.recyclebin();\n    }\n};\n\npimcore.helpers.notesEvents = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"notes_events\")) {\n        pimcore.layout.toolbar.prototype.notes();\n    }\n};\n\npimcore.helpers.applicationLogger = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"application_logging\")) {\n        pimcore.layout.toolbar.prototype.logAdmin();\n    }\n};\n\npimcore.helpers.reports = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"reports\")) {\n        pimcore.layout.toolbar.prototype.showReports(null);\n    }\n};\n\npimcore.helpers.seoDocumentEditor = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"documents\") && user.isAllowed(\"seo_document_editor\")) {\n        pimcore.layout.toolbar.prototype.showDocumentSeo();\n    }\n};\n\npimcore.helpers.robots = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"robots.txt\")) {\n        pimcore.layout.toolbar.prototype.showRobotsTxt();\n    }\n};\n\npimcore.helpers.httpErrorLog = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"http_errors\")) {\n        pimcore.layout.toolbar.prototype.showHttpErrorLog();\n    }\n};\n\npimcore.helpers.customReports = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"reports\")) {\n        pimcore.layout.toolbar.prototype.showCustomReports();\n    }\n};\n\npimcore.helpers.tagConfiguration = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"tags_configuration\")) {\n        pimcore.layout.toolbar.prototype.showTagConfiguration();\n    }\n};\n\npimcore.helpers.users = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"users\")) {\n        pimcore.layout.toolbar.prototype.editUsers();\n    }\n};\n\npimcore.helpers.roles = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if (user.isAllowed(\"users\")) {\n        pimcore.layout.toolbar.prototype.editRoles();\n    }\n};\n\npimcore.helpers.clearAllCaches = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if ((user.isAllowed(\"clear_cache\") || user.isAllowed(\"clear_temp_files\") || user.isAllowed(\"clear_fullpage_cache\"))) {\n        pimcore.layout.toolbar.prototype.clearCache({'env[]': ['dev','prod']});\n    }\n};\n\npimcore.helpers.clearDataCache = function() {\n    var user = pimcore.globalmanager.get(\"user\");\n    if ((user.isAllowed(\"clear_cache\") || user.isAllowed(\"clear_temp_files\") || user.isAllowed(\"clear_fullpage_cache\"))) {\n        pimcore.layout.toolbar.prototype.clearCache({'only_pimcore_cache': true})\n    }\n};\n\npimcore.helpers.showQuickSearch = function () {\n\n    // close all windows, tooltips and previews\n    // we use each() because .hideAll() doesn't hide the modal (seems to be an ExtJS bug)\n    Ext.WindowManager.each(function (win) {\n        win.close();\n    });\n    pimcore.helpers.treeNodeThumbnailPreviewHide();\n    pimcore.helpers.treeToolTipHide();\n\n    var quicksearchContainer = Ext.get('pimcore_quicksearch');\n    quicksearchContainer.show();\n    quicksearchContainer.removeCls('filled');\n\n    var combo = Ext.getCmp('quickSearchCombo');\n    combo.reset();\n    combo.focus();\n\n    Ext.get('pimcore_body').addCls('blurry');\n    Ext.get('pimcore_sidebar').addCls('blurry');\n    var elem = document.createElement('div');\n    elem.id = 'pimcore_quickSearch_overlay';\n    elem.style.cssText = 'position:absolute;width:100vw;height:100vh;z-index:100;top:0;left:0;opacity:0';\n    elem.addEventListener('click', function(e) {\n        document.body.removeChild(elem);\n        pimcore.helpers.hideQuickSearch();\n    });\n    document.body.appendChild(elem);\n};\n\npimcore.helpers.hideQuickSearch = function () {\n    var quicksearchContainer = Ext.get('pimcore_quicksearch');\n    quicksearchContainer.hide();\n    Ext.get('pimcore_body').removeCls('blurry');\n    Ext.get('pimcore_sidebar').removeCls('blurry');\n    if (Ext.get('pimcore_quickSearch_overlay')) {\n        Ext.get('pimcore_quickSearch_overlay').remove();\n    }\n};\n\n\n// HAS TO BE THE VERY LAST ENTRY !!!\npimcore.helpers.keyBindingMapping = {\n    \"save\": pimcore.helpers.handleCtrlS,\n    \"publish\": pimcore.helpers.togglePublish.bind(this, true),\n    \"unpublish\": pimcore.helpers.togglePublish.bind(this, false),\n    \"rename\": pimcore.helpers.rename.bind(this),\n    \"refresh\": pimcore.helpers.handleF5,\n    \"openDocument\": pimcore.helpers.openElementByIdDialog.bind(this, \"document\"),\n    \"openAsset\": pimcore.helpers.openElementByIdDialog.bind(this, \"asset\"),\n    \"openObject\": pimcore.helpers.openElementByIdDialog.bind(this, \"object\"),\n    \"openClassEditor\": pimcore.helpers.openClassEditor,\n    \"openInTree\": pimcore.helpers.openInTree,\n    \"showMetaInfo\": pimcore.helpers.showMetaInfo,\n    \"searchDocument\": pimcore.helpers.searchAction.bind(this, \"document\"),\n    \"searchAsset\": pimcore.helpers.searchAction.bind(this, \"asset\"),\n    \"searchObject\": pimcore.helpers.searchAction.bind(this, \"object\"),\n    \"showElementHistory\": pimcore.helpers.showElementHistory,\n    \"closeAllTabs\": pimcore.helpers.closeAllTabs,\n    \"searchAndReplaceAssignments\": pimcore.helpers.searchAndReplaceAssignments,\n    \"glossary\": pimcore.helpers.glossary,\n    \"redirects\": pimcore.helpers.redirects,\n    \"sharedTranslations\": pimcore.helpers.sharedTranslations,\n    \"recycleBin\": pimcore.helpers.recycleBin,\n    \"notesEvents\": pimcore.helpers.notesEvents,\n    \"applicationLogger\": pimcore.helpers.applicationLogger,\n    \"reports\": pimcore.helpers.reports,\n    \"tagManager\": pimcore.helpers.tagManager,\n    \"seoDocumentEditor\": pimcore.helpers.seoDocumentEditor,\n    \"robots\": pimcore.helpers.robots,\n    \"httpErrorLog\": pimcore.helpers.httpErrorLog,\n    \"customReports\": pimcore.helpers.customReports,\n    \"tagConfiguration\": pimcore.helpers.tagConfiguration,\n    \"users\": pimcore.helpers.users,\n    \"roles\": pimcore.helpers.roles,\n    \"clearAllCaches\": pimcore.helpers.clearAllCaches,\n    \"clearDataCache\": pimcore.helpers.clearDataCache,\n    \"quickSearch\": pimcore.helpers.showQuickSearch\n};\n\npimcore.helpers.showPermissionError = function(permission) {\n    Ext.MessageBox.alert(t(\"error\"), sprintf(t('permission_missing'), t(permission)));\n};\n\npimcore.helpers.registerAssetDnDSingleUpload = function (element, parent, parentType, success, failure, context) {\n\n    if (typeof success != \"function\") {\n        success = function () {\n        };\n    }\n\n    if (typeof failure != \"function\") {\n        failure = function () {\n        };\n    }\n\n    var fn = function (e) {\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'copy';\n        return false;\n    };\n\n    element.addEventListener(\"dragenter\", fn, true);\n    element.addEventListener(\"dragover\", fn, true);\n    element.addEventListener(\"drop\", function (e) {\n\n        e.stopPropagation();\n        e.preventDefault();\n\n        var dataTransfer = e.dataTransfer;\n\n        var win = new Ext.Window({\n            items: [],\n            modal: true,\n            closable: false,\n            bodyStyle: \"padding:10px;\",\n            width: 500,\n            autoHeight: true,\n            autoScroll: true\n        });\n        win.show();\n\n        if(dataTransfer[\"files\"]) {\n            if(dataTransfer[\"files\"][0]) {\n                var file = dataTransfer[\"files\"][0];\n\n                if (window.FileList && file.name && file.size) { // check for size (folder has size=0)\n                    var pbar = new Ext.ProgressBar({\n                        width:465,\n                        text: file.name,\n                        style: \"margin-bottom: 5px\"\n                    });\n\n                    win.add(pbar);\n                    win.updateLayout();\n\n                    var params = {};\n\n                    if(parentType === 'path') {\n                        params['parentPath'] = parent;\n                    } else if (parentType === 'id') {\n                        params['parentId'] = parent;\n                    }\n\n                    if (context) {\n                        params['context'] = Ext.encode(context);\n                    }\n\n                    var uploadUrl = Routing.generate('pimcore_admin_asset_addasset', params);\n\n                    pimcore.helpers.uploadAssetFromFileObject(file, uploadUrl,\n                        function (evt) {\n                            // success\n                            win.close();\n                            success(evt);\n                        },\n                        function (evt) {\n                            //progress\n                            if (evt.lengthComputable) {\n                                var percentComplete = evt.loaded / evt.total;\n                                var progressText = file.name + \" ( \" + Math.floor(percentComplete*100) + \"% )\";\n                                if(percentComplete == 1) {\n                                    progressText = file.name + \" \" + t(\"please_wait\");\n                                }\n\n                                pbar.updateProgress(percentComplete, progressText);\n                            }\n                        },\n                        function (evt) {\n                            // error\n                            var res = Ext.decode(evt[\"responseText\"]);\n                            pimcore.helpers.showNotification(t(\"error\"), res.message ? res.message : t(\"error\"), \"error\", evt[\"responseText\"]);\n                            win.close();\n                            failure(evt);\n                        }\n                    );\n\n                } else if (!empty(file.type) && file.size < 1) { //throw error for 0 byte file\n                    Ext.MessageBox.alert(t('error'), t('error_empty_file_upload'));\n                    win.close();\n                } else {\n                    Ext.MessageBox.alert(t('error'), t('unsupported_filetype'));\n                    win.close();\n                }\n            } else {\n                // if no files are uploaded (doesn't match criteria, ...) close the progress win immediately\n                win.close();\n            }\n        }\n    }.bind(this), true);\n};\n\npimcore.helpers.dragAndDropValidateSingleItem = function (data) {\n    if(data.records.length > 1) {\n        Ext.MessageBox.alert(t('error'), t('you_can_only_drop_one_element_here'));\n        return false;\n    }\n\n    return true;\n};\n\npimcore.helpers.openProfile = function () {\n    try {\n        pimcore.globalmanager.get(\"profile\").activate();\n    }\n    catch (e) {\n        pimcore.globalmanager.add(\"profile\", new pimcore.settings.profile.panel());\n    }\n};\n\npimcore.helpers.copyStringToClipboard = function (str) {\n    var selection = document.getSelection(),\n        prevSelection = (selection.rangeCount > 0) ? selection.getRangeAt(0) : false,\n        el;\n\n    // create element and insert string\n    el = document.createElement('textarea');\n    el.value = str;\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n\n    // insert element, select all text and copy\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n\n    // restore previous selection\n    if (prevSelection) {\n        selection.removeAllRanges();\n        selection.addRange(prevSelection);\n    }\n};\n\npimcore.helpers.treeToolTipShow = function (el, record, item) {\n\n    if (record.data.qtipCfg) {\n        var text = \"<b>\" + record.data.qtipCfg.title + \"</b> | \";\n\n        if (record.data.qtipCfg.text) {\n            text += record.data.qtipCfg.text;\n        } else {\n            text += (t(\"type\") + \": \"+ t(record.data.type));\n        }\n\n        var pimcore_tooltip = Ext.get('pimcore_tooltip');\n\n        pimcore_tooltip.show();\n        pimcore_tooltip.update(text);\n        pimcore_tooltip.removeCls('right');\n\n        var offsetTabPanel = Ext.get('pimcore_panel_tabs').getXY();\n        var offsetTreeNode = Ext.get(item).getXY();\n        var parentTree = el.ownerCt.ownerCt;\n\n        if(parentTree.region == 'west') {\n            pimcore_tooltip.applyStyles({\n                top: (offsetTreeNode[1] + 8) + \"px\",\n                left: offsetTabPanel[0] + \"px\",\n                right: 'auto'\n            });\n        }\n\n        if(parentTree.region == 'east') {\n            pimcore_tooltip.addCls('right');\n            pimcore_tooltip.applyStyles({\n                top: (offsetTreeNode[1] + 8) + \"px\",\n                right: (parentTree.width + 35) + \"px\",\n                left: 'auto'\n            });\n        }\n    }\n};\n\npimcore.helpers.getAssetMetadataDataTypes = function (allowIn) {\n    var result = [];\n    for (var property in pimcore.asset.metadata.data) {\n        // filter out base class\n        if (property !== \"data\" && pimcore.asset.metadata.data.hasOwnProperty(property)) {\n            if (pimcore.asset.metadata.data[property].prototype.allowIn[allowIn]) {\n                result.push(property);\n            }\n        }\n    }\n    return result;\n};\n\npimcore.helpers.treeToolTipHide = function () {\n    Ext.get('pimcore_tooltip').hide();\n};\n\npimcore.helpers.progressWindowOffsets = [-50];\n\npimcore.helpers.getProgressWindowListeners = function () {\n    return {\n        show: function(win) {\n            let winY = pimcore.helpers.progressWindowOffsets.reduce(function(a, b) {\n                return Math.min(a, b);\n            });\n\n            win.alignTo(Ext.getBody(), \"br-br\", [-40, winY]);\n            let newOffset = winY - (win.getHeight()+20);\n            pimcore.helpers.progressWindowOffsets.push(newOffset);\n            win.myProgressWinOffset = newOffset;\n        },\n        destroy: function(win) {\n            let index = pimcore.helpers.progressWindowOffsets.indexOf(win.myProgressWinOffset);\n            if (index !== -1) {\n                pimcore.helpers.progressWindowOffsets.splice(index, 1);\n            }\n        }\n    };\n};\n\npimcore.helpers.reloadUserImage = function (userId) {\n    var image = Routing.generate('pimcore_admin_user_getimage', {id: userId, '_dc': Ext.Date.now()});\n\n    if (pimcore.currentuser.id == userId) {\n        Ext.get(\"pimcore_avatar\").query('img')[0].src = image;\n    }\n\n    if (Ext.getCmp(\"pimcore_user_image_\" + userId)) {\n        Ext.getCmp(\"pimcore_user_image_\" + userId).setSrc(image);\n    }\n\n    if (Ext.getCmp(\"pimcore_profile_image_\" + userId)) {\n        Ext.getCmp(\"pimcore_profile_image_\" + userId).setSrc(image);\n    }\n};\n\n/**\n * Takes a number representing seconds and formats it as a human-readable string such as \"1:15:05\" for 1 hour 15 minutes 5 seconds\n * @param {int|float} dataDuration duration in seconds\n * @returns {string|*}\n */\npimcore.helpers.formatTimeDuration = function (dataDuration) {\n    if (!is_numeric(dataDuration)) {\n        // Unknown data, return as is\n        return dataDuration;\n    }\n\n    let durationString = '';\n\n    let hours = Math.floor(dataDuration / 3600);\n    dataDuration %= 3600;\n    if (hours > 0) {\n        durationString += hours + \":\";\n    }\n\n    durationString += Math.floor(dataDuration / 60) + \":\";\n    durationString += (\"0\" + Math.round(dataDuration % 60)).slice(-2);\n\n    return durationString;\n};\n\n/**\n * Delete confim dialog box\n *\n * @param title\n * @param name\n * @param deleteCallback\n */\npimcore.helpers.deleteConfirm = function (title, name, deleteCallback) {\n    Ext.Msg.confirm(t('delete'), sprintf(t('delete_message_advanced'),\n            title, name),\n        function (btn) {\n            if (btn == 'yes') {\n                if (typeof deleteCallback == \"function\") {\n                    deleteCallback();\n                }\n            }\n        }.bind(this))\n};\n\npimcore.helpers.treeDragDropValidate = function (node, oldParent, newParent) {\n    const disabledLayoutTypes = ['accordion', 'text', 'iframe', 'button']\n    if (newParent.data.editor) {\n        if (disabledLayoutTypes.includes(newParent.data.editor.type)) {\n            return false;\n        }\n    }\n\n    if (newParent.data.root) {\n        return false;\n    }\n\n    return true;\n};\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.email.blacklist\");\npimcore.settings.email.blacklist = Class.create({\n\n    initialize:function () {\n\n        this.getTabPanel();\n    },\n\n    activate:function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"email_blacklist\");\n    },\n\n    getTabPanel:function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id:\"email_blacklist\",\n                title:t(\"email_blacklist\"),\n                iconCls:\"pimcore_icon_email pimcore_icon_overlay_delete\",\n                border:false,\n                layout:\"fit\",\n                closable:true,\n                items:[this.getRowEditor()]\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"email_blacklist\");\n\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"email_blacklist\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getRowEditor:function () {\n\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize();\n        var url = Routing.generate('pimcore_admin_email_blacklist');\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            url,\n            [\n                {name:'address', allowBlank: false},\n                {name:'creationDate'},\n                {name:'modificationDate'}\n            ],\n            itemsPerPage\n        );\n\n\n        this.filterField = new Ext.form.TextField({\n            xtype:\"textfield\",\n            width:200,\n            style:\"margin: 0 10px 0 0;\",\n            enableKeyEvents:true,\n            listeners:{\n                \"keydown\":function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        var input = field;\n                        var proxy = this.store.getProxy();\n                        proxy.extraParams.filter = input.getValue();\n                        this.store.load();\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store);\n\n        var typesColumns = [\n            {text:t(\"email_address\"), flex:50, sortable:true, dataIndex:'address', editable: false},\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false,\n                hidden: false,\n                width: 150,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false,\n                hidden: true,\n                width: 150,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {\n                xtype:'actioncolumn',\n                menuText:t('delete'),\n                width:30,\n                items:[\n                    {\n                        tooltip:t('delete'),\n                        icon:\"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                        handler:function (grid, rowIndex) {\n                            let data = grid.getStore().getAt(rowIndex);\n                            const sanitizedEmail = pimcore.helpers.sanitizeEmail(data.data.address);\n\n                            pimcore.helpers.deleteConfirm(\n                                t('email_blacklist'),\n                                sanitizedEmail,\n                                function () {\n                                    grid.getStore().removeAt(rowIndex);\n                                }.bind(this)\n                            );\n                        }.bind(this)\n                    }\n                ]\n            }\n        ];\n\n        this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        });\n\n        var toolbar = Ext.create('Ext.Toolbar', {\n            cls: 'pimcore_main_toolbar',\n            items: [\n                {\n                    text:t('add'),\n                    handler:this.onAdd.bind(this),\n                    iconCls:\"pimcore_icon_add\"\n                },\n                \"->\",\n                {\n                    text:t(\"filter\") + \"/\" + t(\"search\"),\n                    xtype:\"tbtext\",\n                    style:\"margin: 0 10px 0 0;\"\n                },\n                this.filterField\n            ]\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame:false,\n            autoScroll:true,\n            store:this.store,\n            columnLines:true,\n            trackMouseOver:true,\n            stripeRows:true,\n            columns: {\n                items: typesColumns,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                },\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            plugins: [\n                this.cellEditing\n            ],\n            bbar:this.pagingtoolbar,\n            tbar: toolbar,\n            viewConfig:{\n                forceFit:true\n            }\n        });\n\n        return this.grid;\n    },\n\n\n    onAdd:function (btn, ev) {\n        Ext.MessageBox.prompt(\"\", t(\"email_address\"), function (button, value) {\n            if(button == \"ok\") {\n                const sanitizedEmail = pimcore.helpers.sanitizeEmail(value);\n\n                var u = {\n                    \"address\": sanitizedEmail\n                };\n\n                this.grid.store.insert(0, u);\n            }\n\n        }.bind(this));\n    }\n});\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/EmailController.php", "bundles/AdminBundle/Resources/public/js/pimcore/helpers.js", "bundles/AdminBundle/Resources/public/js/pimcore/settings/email/blacklist.js"], "buggy_code_start_loc": [461, 15, 126], "buggy_code_end_loc": [462, 15, 190], "fixing_code_start_loc": [461, 16, 126], "fixing_code_end_loc": [467, 20, 198], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.18.", "other": {"cve": {"id": "CVE-2023-1116", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-01T14:15:16.593", "lastModified": "2023-03-04T02:01:54.877", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.18."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.18", "matchCriteriaId": "C5062760-52C7-46A6-8252-9C6869A920AA"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/f6d322efa207a737eedd8726b7c92e957a83341e", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/3245ff99-9adf-4db9-af94-f995747e09d1", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/f6d322efa207a737eedd8726b7c92e957a83341e"}}