{"buggy_code": ["<?php\n\ndeclare(strict_types=1);\n\nnamespace Engelsystem\\Controllers;\n\nuse Engelsystem\\Http\\Exceptions\\HttpNotFound;\nuse Engelsystem\\Http\\Request;\nuse Engelsystem\\Http\\Response;\nuse Engelsystem\\Mail\\EngelsystemMailer;\nuse Engelsystem\\Models\\User\\PasswordReset;\nuse Engelsystem\\Models\\User\\User;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;\n\nclass PasswordResetController extends BaseController\n{\n    use HasUserNotifications;\n\n    /** @var array<string, string> */\n    protected array $permissions = [\n        'reset'             => 'login',\n        'postReset'         => 'login',\n        'resetPassword'     => 'login',\n        'postResetPassword' => 'login',\n    ];\n\n    public function __construct(\n        protected Response $response,\n        protected SessionInterface $session,\n        protected EngelsystemMailer $mail,\n        protected LoggerInterface $log\n    ) {\n    }\n\n    public function reset(): Response\n    {\n        return $this->showView('pages/password/reset');\n    }\n\n    public function postReset(Request $request): Response\n    {\n        $data = $this->validate($request, [\n            'email' => 'required|email',\n        ]);\n\n        /** @var User $user */\n        $user = User::whereEmail($data['email'])->first();\n        if ($user) {\n            $reset = (new PasswordReset())->findOrNew($user->id);\n            $reset->user_id = $user->id;\n            $reset->token = bin2hex(random_bytes(16));\n            $reset->save();\n\n            $this->log->info(\n                sprintf('Password recovery for %s (%u)', $user->name, $user->id),\n                ['user' => $user->toJson()]\n            );\n\n            $this->mail->sendViewTranslated(\n                $user,\n                'Password recovery',\n                'emails/password-reset',\n                ['username' => $user->displayName, 'reset' => $reset]\n            );\n        }\n\n        return $this->showView('pages/password/reset-success', ['type' => 'email']);\n    }\n\n    public function resetPassword(Request $request): Response\n    {\n        $this->requireToken($request);\n\n        return $this->showView(\n            'pages/password/reset-form',\n            ['min_length' => config('min_password_length')]\n        );\n    }\n\n    public function postResetPassword(Request $request): Response\n    {\n        $reset = $this->requireToken($request);\n\n        $data = $this->validate($request, [\n            'password'              => 'required|min:' . config('min_password_length'),\n            'password_confirmation' => 'required',\n        ]);\n\n        if ($data['password'] !== $data['password_confirmation']) {\n            $this->addNotification('validation.password.confirmed', NotificationType::ERROR);\n\n            return $this->showView('pages/password/reset-form');\n        }\n\n        auth()->setPassword($reset->user, $data['password']);\n        $reset->delete();\n\n        return $this->showView('pages/password/reset-success', ['type' => 'reset']);\n    }\n\n    protected function showView(string $view = 'pages/password/reset', array $data = []): Response\n    {\n        return $this->response->withView($view, $data);\n    }\n\n    protected function requireToken(Request $request): PasswordReset\n    {\n        $token = $request->getAttribute('token');\n\n        /** @var PasswordReset|null $reset */\n        $reset = PasswordReset::whereToken($token)->first();\n\n        if (!$reset) {\n            throw new HttpNotFound();\n        }\n\n        return $reset;\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\nnamespace Engelsystem\\Test\\Unit\\Controllers;\n\nuse DMS\\PHPUnitExtensions\\ArraySubset\\ArraySubsetAsserts;\nuse Engelsystem\\Config\\Config;\nuse Engelsystem\\Controllers\\NotificationType;\nuse Engelsystem\\Controllers\\PasswordResetController;\nuse Engelsystem\\Helpers\\Authenticator;\nuse Engelsystem\\Http\\Exceptions\\HttpNotFound;\nuse Engelsystem\\Http\\Exceptions\\ValidationException;\nuse Engelsystem\\Http\\Request;\nuse Engelsystem\\Http\\Response;\nuse Engelsystem\\Http\\Validation\\Validator;\nuse Engelsystem\\Mail\\EngelsystemMailer;\nuse Engelsystem\\Models\\User\\PasswordReset;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\Renderer\\Renderer;\nuse Engelsystem\\Test\\Unit\\HasDatabase;\nuse PHPUnit\\Framework\\MockObject\\MockObject;\nuse Psr\\Log\\Test\\TestLogger;\nuse Symfony\\Component\\HttpFoundation\\Session\\Session;\nuse Symfony\\Component\\HttpFoundation\\Session\\Storage\\MockArraySessionStorage;\n\nclass PasswordResetControllerTest extends ControllerTest\n{\n    use ArraySubsetAsserts;\n    use HasDatabase;\n\n    /** @var array */\n    protected array $args = [];\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::reset\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::__construct\n     */\n    public function testReset(): void\n    {\n        $controller = $this->getController('pages/password/reset');\n        $response = $controller->reset();\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::postReset\n     */\n    public function testPostReset(): void\n    {\n        $this->initDatabase();\n        $request = new Request([], ['email' => 'foo@bar.batz']);\n        $user = $this->createUser();\n\n        $controller = $this->getController(\n            'pages/password/reset-success',\n            ['type' => 'email']\n        );\n        /** @var TestLogger $log */\n        $log = $this->args['log'];\n        /** @var EngelsystemMailer|MockObject $mailer */\n        $mailer = $this->args['mailer'];\n        $this->setExpects($mailer, 'sendViewTranslated');\n\n        $controller->postReset($request);\n\n        $this->assertNotEmpty((new PasswordReset())->find($user->id)->first());\n        $this->assertTrue($log->hasInfoThatContains($user->name));\n        $this->assertHasNoNotifications();\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::postReset\n     */\n    public function testPostResetInvalidRequest(): void\n    {\n        $request = new Request();\n\n        $controller = $this->getController();\n\n        $this->expectException(ValidationException::class);\n        $controller->postReset($request);\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::postReset\n     */\n    public function testPostResetNoUser(): void\n    {\n        $this->initDatabase();\n        $request = new Request([], ['email' => 'foo@bar.batz']);\n\n        $controller = $this->getController(\n            'pages/password/reset-success',\n            ['type' => 'email']\n        );\n\n        $controller->postReset($request);\n        $this->assertHasNoNotifications();\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::resetPassword\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::requireToken\n     */\n    public function testResetPassword(): void\n    {\n        $this->initDatabase();\n\n        $this->app->instance('config', new Config(['min_password_length' => 3]));\n        $user = $this->createUser();\n        $token = $this->createToken($user);\n        $request = new Request([], [], ['token' => $token->token]);\n\n        $controller = $this->getController('pages/password/reset-form');\n\n        $controller->resetPassword($request);\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::resetPassword\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::requireToken\n     */\n    public function testResetPasswordNoToken(): void\n    {\n        $this->initDatabase();\n        $controller = $this->getController();\n\n        $this->expectException(HttpNotFound::class);\n        $controller->resetPassword(new Request());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::postResetPassword\n     */\n    public function testPostResetPassword(): void\n    {\n        $this->initDatabase();\n\n        $this->app->instance('config', new Config(['min_password_length' => 3]));\n        $user = $this->createUser();\n        $token = $this->createToken($user);\n        $password = 'SomeRandomPasswordForAmazingSecurity';\n        $request = new Request(\n            [],\n            ['password' => $password, 'password_confirmation' => $password],\n            ['token' => $token->token]\n        );\n\n        $controller = $this->getController(\n            'pages/password/reset-success',\n            ['type' => 'reset']\n        );\n\n        $auth = new Authenticator($request, $this->args['session'], $user);\n        $this->app->instance('authenticator', $auth);\n\n        $response = $controller->postResetPassword($request);\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $this->assertEmpty((new PasswordReset())->find($user->id));\n        $this->assertNotNull(auth()->authenticate($user->name, $password));\n        $this->assertHasNoNotifications();\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::postResetPassword\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::showView\n     */\n    public function testPostResetPasswordNotMatching(): void\n    {\n        $this->initDatabase();\n\n        $this->app->instance('config', new Config(['min_password_length' => 3]));\n        $user = $this->createUser();\n        $token = $this->createToken($user);\n        $password = 'SomeRandomPasswordForAmazingSecurity';\n        $request = new Request(\n            [],\n            ['password' => $password, 'password_confirmation' => $password . 'OrNot'],\n            ['token' => $token->token]\n        );\n\n        $controller = $this->getController('pages/password/reset-form');\n\n        $controller->postResetPassword($request);\n        $this->assertHasNotification('validation.password.confirmed', NotificationType::ERROR);\n    }\n\n    protected function getControllerArgs(): array\n    {\n        $response = new Response();\n        $session = new Session(new MockArraySessionStorage());\n        /** @var EngelsystemMailer|MockObject $mailer */\n        $mailer = $this->createMock(EngelsystemMailer::class);\n        $log = new TestLogger();\n        $renderer = $this->createMock(Renderer::class);\n        $response->setRenderer($renderer);\n\n        $this->app->instance('session', $session);\n\n        $this->session = $session;\n        $this->response = $response;\n        $this->log = $log;\n\n        return $this->args = [\n            'response' => $response,\n            'session'  => $session,\n            'mailer'   => $mailer,\n            'log'      => $log,\n            'renderer' => $renderer,\n        ];\n    }\n\n    protected function getController(?string $view = null, ?array $data = null): PasswordResetController\n    {\n        /** @var Response $response */\n        /** @var Session $session */\n        /** @var EngelsystemMailer|MockObject $mailer */\n        /** @var TestLogger $log */\n        /** @var Renderer|MockObject $renderer */\n        list($response, $session, $mailer, $log, $renderer) = array_values($this->getControllerArgs());\n        $controller = new PasswordResetController($response, $session, $mailer, $log);\n        $controller->setValidator(new Validator());\n\n        if ($view) {\n            /** @var array|mixed[] $args */\n            $args = [$view];\n            if ($data) {\n                $args[] = $data;\n            }\n\n            $renderer->expects($this->atLeastOnce())\n                ->method('render')\n                ->willReturnCallback(function ($template, $data = []) use ($args) {\n                    $this->assertEquals($args[0], $template);\n                    if (isset($args[1])) {\n                        $this->assertArraySubset($args[1], $data);\n                    }\n\n                    return 'Foo';\n                });\n        }\n\n        return $controller;\n    }\n\n    protected function createUser(): User\n    {\n        return User::factory()->create(['email' => 'foo@bar.batz']);\n    }\n\n    protected function createToken(User $user): PasswordReset\n    {\n        $reset = new PasswordReset(['user_id' => $user->id, 'token' => 'SomeTestToken123']);\n        $reset->save();\n\n        return $reset;\n    }\n}\n"], "fixing_code": ["<?php\n\ndeclare(strict_types=1);\n\nnamespace Engelsystem\\Controllers;\n\nuse Engelsystem\\Http\\Exceptions\\HttpNotFound;\nuse Engelsystem\\Http\\Request;\nuse Engelsystem\\Http\\Response;\nuse Engelsystem\\Mail\\EngelsystemMailer;\nuse Engelsystem\\Models\\User\\PasswordReset;\nuse Engelsystem\\Models\\User\\User;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;\n\nclass PasswordResetController extends BaseController\n{\n    use HasUserNotifications;\n\n    /** @var array<string, string> */\n    protected array $permissions = [\n        'reset'             => 'login',\n        'postReset'         => 'login',\n        'resetPassword'     => 'login',\n        'postResetPassword' => 'login',\n    ];\n\n    public function __construct(\n        protected Response $response,\n        protected SessionInterface $session,\n        protected EngelsystemMailer $mail,\n        protected LoggerInterface $log\n    ) {\n    }\n\n    public function reset(): Response\n    {\n        return $this->showView('pages/password/reset');\n    }\n\n    public function postReset(Request $request): Response\n    {\n        $data = $this->validate($request, [\n            'email' => 'required|email',\n        ]);\n\n        /** @var User $user */\n        $user = User::whereEmail($data['email'])->first();\n        if ($user) {\n            $reset = (new PasswordReset())->findOrNew($user->id);\n            $reset->user_id = $user->id;\n            $reset->token = bin2hex(random_bytes(16));\n            $reset->save();\n\n            $this->log->info(\n                sprintf('Password recovery for %s (%u)', $user->name, $user->id),\n                ['user' => $user->toJson()]\n            );\n\n            $this->mail->sendViewTranslated(\n                $user,\n                'Password recovery',\n                'emails/password-reset',\n                ['username' => $user->displayName, 'reset' => $reset]\n            );\n        }\n\n        return $this->showView('pages/password/reset-success', ['type' => 'email']);\n    }\n\n    public function resetPassword(Request $request): Response\n    {\n        $this->requireToken($request);\n\n        return $this->showView(\n            'pages/password/reset-form',\n            ['min_length' => config('min_password_length')]\n        );\n    }\n\n    public function postResetPassword(Request $request): Response\n    {\n        $reset = $this->requireToken($request);\n\n        $data = $this->validate($request, [\n            'password'              => 'required|min:' . config('min_password_length'),\n            'password_confirmation' => 'required',\n        ]);\n\n        if ($data['password'] !== $data['password_confirmation']) {\n            $this->addNotification('validation.password.confirmed', NotificationType::ERROR);\n\n            return $this->showView('pages/password/reset-form');\n        }\n\n        auth()->setPassword($reset->user, $data['password']);\n        $reset->delete();\n\n        $reset->user->sessions()->getQuery()->delete();\n\n        return $this->showView('pages/password/reset-success', ['type' => 'reset']);\n    }\n\n    protected function showView(string $view = 'pages/password/reset', array $data = []): Response\n    {\n        return $this->response->withView($view, $data);\n    }\n\n    protected function requireToken(Request $request): PasswordReset\n    {\n        $token = $request->getAttribute('token');\n\n        /** @var PasswordReset|null $reset */\n        $reset = PasswordReset::whereToken($token)->first();\n\n        if (!$reset) {\n            throw new HttpNotFound();\n        }\n\n        return $reset;\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\nnamespace Engelsystem\\Test\\Unit\\Controllers;\n\nuse DMS\\PHPUnitExtensions\\ArraySubset\\ArraySubsetAsserts;\nuse Engelsystem\\Config\\Config;\nuse Engelsystem\\Controllers\\NotificationType;\nuse Engelsystem\\Controllers\\PasswordResetController;\nuse Engelsystem\\Helpers\\Authenticator;\nuse Engelsystem\\Http\\Exceptions\\HttpNotFound;\nuse Engelsystem\\Http\\Exceptions\\ValidationException;\nuse Engelsystem\\Http\\Request;\nuse Engelsystem\\Http\\Response;\nuse Engelsystem\\Http\\Validation\\Validator;\nuse Engelsystem\\Mail\\EngelsystemMailer;\nuse Engelsystem\\Models\\Session as SessionModel;\nuse Engelsystem\\Models\\User\\PasswordReset;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\Renderer\\Renderer;\nuse Engelsystem\\Test\\Unit\\HasDatabase;\nuse PHPUnit\\Framework\\MockObject\\MockObject;\nuse Psr\\Log\\Test\\TestLogger;\nuse Symfony\\Component\\HttpFoundation\\Session\\Session;\nuse Symfony\\Component\\HttpFoundation\\Session\\Storage\\MockArraySessionStorage;\n\nclass PasswordResetControllerTest extends ControllerTest\n{\n    use ArraySubsetAsserts;\n    use HasDatabase;\n\n    /** @var array */\n    protected array $args = [];\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::reset\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::__construct\n     */\n    public function testReset(): void\n    {\n        $controller = $this->getController('pages/password/reset');\n        $response = $controller->reset();\n\n        $this->assertEquals(200, $response->getStatusCode());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::postReset\n     */\n    public function testPostReset(): void\n    {\n        $this->initDatabase();\n        $request = new Request([], ['email' => 'foo@bar.batz']);\n        $user = $this->createUser();\n\n        $controller = $this->getController(\n            'pages/password/reset-success',\n            ['type' => 'email']\n        );\n        /** @var TestLogger $log */\n        $log = $this->args['log'];\n        /** @var EngelsystemMailer|MockObject $mailer */\n        $mailer = $this->args['mailer'];\n        $this->setExpects($mailer, 'sendViewTranslated');\n\n        $controller->postReset($request);\n\n        $this->assertNotEmpty((new PasswordReset())->find($user->id)->first());\n        $this->assertTrue($log->hasInfoThatContains($user->name));\n        $this->assertHasNoNotifications();\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::postReset\n     */\n    public function testPostResetInvalidRequest(): void\n    {\n        $request = new Request();\n\n        $controller = $this->getController();\n\n        $this->expectException(ValidationException::class);\n        $controller->postReset($request);\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::postReset\n     */\n    public function testPostResetNoUser(): void\n    {\n        $this->initDatabase();\n        $request = new Request([], ['email' => 'foo@bar.batz']);\n\n        $controller = $this->getController(\n            'pages/password/reset-success',\n            ['type' => 'email']\n        );\n\n        $controller->postReset($request);\n        $this->assertHasNoNotifications();\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::resetPassword\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::requireToken\n     */\n    public function testResetPassword(): void\n    {\n        $this->initDatabase();\n\n        $this->app->instance('config', new Config(['min_password_length' => 3]));\n        $user = $this->createUser();\n        $token = $this->createToken($user);\n        $request = new Request([], [], ['token' => $token->token]);\n\n        $controller = $this->getController('pages/password/reset-form');\n\n        $controller->resetPassword($request);\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::resetPassword\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::requireToken\n     */\n    public function testResetPasswordNoToken(): void\n    {\n        $this->initDatabase();\n        $controller = $this->getController();\n\n        $this->expectException(HttpNotFound::class);\n        $controller->resetPassword(new Request());\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::postResetPassword\n     */\n    public function testPostResetPassword(): void\n    {\n        $this->initDatabase();\n\n        $this->app->instance('config', new Config(['min_password_length' => 3]));\n        $user = $this->createUser();\n        $token = $this->createToken($user);\n        $password = 'SomeRandomPasswordForAmazingSecurity';\n        $request = new Request(\n            [],\n            ['password' => $password, 'password_confirmation' => $password],\n            ['token' => $token->token]\n        );\n        SessionModel::factory()->create(); // Some other session\n        SessionModel::factory(3)->create(['user_id' => $user->id]);\n\n        $controller = $this->getController(\n            'pages/password/reset-success',\n            ['type' => 'reset']\n        );\n\n        $auth = new Authenticator($request, $this->args['session'], $user);\n        $this->app->instance('authenticator', $auth);\n\n        $response = $controller->postResetPassword($request);\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $this->assertEmpty((new PasswordReset())->find($user->id));\n        $this->assertNotNull(auth()->authenticate($user->name, $password));\n        $this->assertHasNoNotifications();\n\n        $this->assertEmpty(\n            SessionModel::whereUserId($user->id)->get(),\n            'All user sessions should be deleted after successful password reset'\n        );\n        $this->assertCount(1, SessionModel::all()); // Another session should be still there\n    }\n\n    /**\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::postResetPassword\n     * @covers \\Engelsystem\\Controllers\\PasswordResetController::showView\n     */\n    public function testPostResetPasswordNotMatching(): void\n    {\n        $this->initDatabase();\n\n        $this->app->instance('config', new Config(['min_password_length' => 3]));\n        $user = $this->createUser();\n        $token = $this->createToken($user);\n        $password = 'SomeRandomPasswordForAmazingSecurity';\n        $request = new Request(\n            [],\n            ['password' => $password, 'password_confirmation' => $password . 'OrNot'],\n            ['token' => $token->token]\n        );\n\n        $controller = $this->getController('pages/password/reset-form');\n\n        $controller->postResetPassword($request);\n        $this->assertHasNotification('validation.password.confirmed', NotificationType::ERROR);\n    }\n\n    protected function getControllerArgs(): array\n    {\n        $response = new Response();\n        $session = new Session(new MockArraySessionStorage());\n        /** @var EngelsystemMailer|MockObject $mailer */\n        $mailer = $this->createMock(EngelsystemMailer::class);\n        $log = new TestLogger();\n        $renderer = $this->createMock(Renderer::class);\n        $response->setRenderer($renderer);\n\n        $this->app->instance('session', $session);\n\n        $this->session = $session;\n        $this->response = $response;\n        $this->log = $log;\n\n        return $this->args = [\n            'response' => $response,\n            'session'  => $session,\n            'mailer'   => $mailer,\n            'log'      => $log,\n            'renderer' => $renderer,\n        ];\n    }\n\n    protected function getController(?string $view = null, ?array $data = null): PasswordResetController\n    {\n        /** @var Response $response */\n        /** @var Session $session */\n        /** @var EngelsystemMailer|MockObject $mailer */\n        /** @var TestLogger $log */\n        /** @var Renderer|MockObject $renderer */\n        list($response, $session, $mailer, $log, $renderer) = array_values($this->getControllerArgs());\n        $controller = new PasswordResetController($response, $session, $mailer, $log);\n        $controller->setValidator(new Validator());\n\n        if ($view) {\n            /** @var array|mixed[] $args */\n            $args = [$view];\n            if ($data) {\n                $args[] = $data;\n            }\n\n            $renderer->expects($this->atLeastOnce())\n                ->method('render')\n                ->willReturnCallback(function ($template, $data = []) use ($args) {\n                    $this->assertEquals($args[0], $template);\n                    if (isset($args[1])) {\n                        $this->assertArraySubset($args[1], $data);\n                    }\n\n                    return 'Foo';\n                });\n        }\n\n        return $controller;\n    }\n\n    protected function createUser(): User\n    {\n        return User::factory()->create(['email' => 'foo@bar.batz']);\n    }\n\n    protected function createToken(User $user): PasswordReset\n    {\n        $reset = new PasswordReset(['user_id' => $user->id, 'token' => 'SomeTestToken123']);\n        $reset->save();\n\n        return $reset;\n    }\n}\n"], "filenames": ["src/Controllers/PasswordResetController.php", "tests/Unit/Controllers/PasswordResetControllerTest.php"], "buggy_code_start_loc": [98, 17], "buggy_code_end_loc": [98, 164], "fixing_code_start_loc": [99, 18], "fixing_code_end_loc": [101, 174], "type": "CWE-613", "message": "Engelsystem is a shift planning system for chaos events.  If a users' password is compromised and an attacker gained access to a users' account, i.e., logged in and obtained a session, an attackers' session is not terminated if the users' account password is reset. This vulnerability has been fixed in the commit `dbb089315ff3d`. Users are advised to update their installations. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-45659", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-17T00:15:11.233", "lastModified": "2023-10-30T18:03:57.393", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Engelsystem is a shift planning system for chaos events.  If a users' password is compromised and an attacker gained access to a users' account, i.e., logged in and obtained a session, an attackers' session is not terminated if the users' account password is reset. This vulnerability has been fixed in the commit `dbb089315ff3d`. Users are advised to update their installations. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "Engelsystem es un sistema de planificaci\u00f3n de turnos para eventos de chaos. Si la contrase\u00f1a de un usuario se ve comprometida y un atacante obtuvo acceso a la cuenta de un usuario, es decir, inici\u00f3 sesi\u00f3n y obtuvo una sesi\u00f3n, la sesi\u00f3n del atacante no finaliza si se restablece la contrase\u00f1a de la cuenta de los usuarios. Esta vulnerabilidad se ha solucionado en el commit `dbb089315ff3d`. Se recomienda a los usuarios que actualicen sus instalaciones. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 2.8, "baseSeverity": "LOW"}, "exploitabilityScore": 1.3, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.6, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-613"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:engelsystem:engelsystem:*:*:*:*:*:*:*:*", "versionEndExcluding": "2023-09-18", "matchCriteriaId": "B0F10C38-ED39-422A-8507-FA4099FAEE32"}]}]}], "references": [{"url": "https://github.com/engelsystem/engelsystem/commit/dbb089315ff3d8aabc11445e78fb50765208b27d", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/engelsystem/engelsystem/security/advisories/GHSA-f6mm-3v2h-jm6x", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/engelsystem/engelsystem/commit/dbb089315ff3d8aabc11445e78fb50765208b27d"}}