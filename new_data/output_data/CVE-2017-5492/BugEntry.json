{"buggy_code": ["<?php\n/**\n * Screen API: WP_Screen class\n *\n * @package WordPress\n * @subpackage Administration\n * @since 4.4.0\n */\n\n/**\n * Core class used to implement an admin screen API.\n *\n * @since 3.3.0\n */\nfinal class WP_Screen {\n\t/**\n\t * Any action associated with the screen. 'add' for *-add.php and *-new.php screens. Empty otherwise.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $action;\n\n\t/**\n\t * The base type of the screen. This is typically the same as $id but with any post types and taxonomies stripped.\n\t * For example, for an $id of 'edit-post' the base is 'edit'.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $base;\n\n\t/**\n\t * The number of columns to display. Access with get_columns().\n\t *\n\t * @since 3.4.0\n\t * @var int\n\t * @access private\n\t */\n\tprivate $columns = 0;\n\n\t/**\n\t * The unique ID of the screen.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $id;\n\n\t/**\n\t * Which admin the screen is in. network | user | site | false\n\t *\n\t * @since 3.5.0\n\t * @var string\n\t * @access protected\n\t */\n\tprotected $in_admin;\n\n\t/**\n\t * Whether the screen is in the network admin.\n\t *\n\t * Deprecated. Use in_admin() instead.\n\t *\n\t * @since 3.3.0\n\t * @deprecated 3.5.0\n\t * @var bool\n\t * @access public\n\t */\n\tpublic $is_network;\n\n\t/**\n\t * Whether the screen is in the user admin.\n\t *\n\t * Deprecated. Use in_admin() instead.\n\t *\n\t * @since 3.3.0\n\t * @deprecated 3.5.0\n\t * @var bool\n\t * @access public\n\t */\n\tpublic $is_user;\n\n\t/**\n\t * The base menu parent.\n\t * This is derived from $parent_file by removing the query string and any .php extension.\n\t * $parent_file values of 'edit.php?post_type=page' and 'edit.php?post_type=post' have a $parent_base of 'edit'.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $parent_base;\n\n\t/**\n\t * The parent_file for the screen per the admin menu system.\n\t * Some $parent_file values are 'edit.php?post_type=page', 'edit.php', and 'options-general.php'.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $parent_file;\n\n\t/**\n\t * The post type associated with the screen, if any.\n\t * The 'edit.php?post_type=page' screen has a post type of 'page'.\n\t * The 'edit-tags.php?taxonomy=$taxonomy&post_type=page' screen has a post type of 'page'.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $post_type;\n\n\t/**\n\t * The taxonomy associated with the screen, if any.\n\t * The 'edit-tags.php?taxonomy=category' screen has a taxonomy of 'category'.\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $taxonomy;\n\n\t/**\n\t * The help tab data associated with the screen, if any.\n\t *\n\t * @since 3.3.0\n\t * @var array\n\t * @access private\n\t */\n\tprivate $_help_tabs = array();\n\n\t/**\n\t * The help sidebar data associated with screen, if any.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access private\n\t */\n\tprivate $_help_sidebar = '';\n\n \t/**\n\t * The accessible hidden headings and text associated with the screen, if any.\n\t *\n\t * @since 4.4.0\n\t * @access private\n\t * @var array\n\t */\n\tprivate $_screen_reader_content = array();\n\n\t/**\n\t * Stores old string-based help.\n\t *\n\t * @static\n\t * @access private\n\t *\n\t * @var array\n\t */\n\tprivate static $_old_compat_help = array();\n\n\t/**\n\t * The screen options associated with screen, if any.\n\t *\n\t * @since 3.3.0\n\t * @var array\n\t * @access private\n\t */\n\tprivate $_options = array();\n\n\t/**\n\t * The screen object registry.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @static\n\t * @access private\n\t *\n\t * @var array\n\t */\n\tprivate static $_registry = array();\n\n\t/**\n\t * Stores the result of the public show_screen_options function.\n\t *\n\t * @since 3.3.0\n\t * @var bool\n\t * @access private\n\t */\n\tprivate $_show_screen_options;\n\n\t/**\n\t * Stores the 'screen_settings' section of screen options.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access private\n\t */\n\tprivate $_screen_settings;\n\n\t/**\n\t * Fetches a screen object.\n\t *\n\t * @since 3.3.0\n\t * @access public\n\t *\n\t * @static\n\t *\n\t * @global string $hook_suffix\n\t *\n\t * @param string|WP_Screen $hook_name Optional. The hook name (also known as the hook suffix) used to determine the screen.\n\t * \t                                  Defaults to the current $hook_suffix global.\n\t * @return WP_Screen Screen object.\n\t */\n\tpublic static function get( $hook_name = '' ) {\n\t\tif ( $hook_name instanceof WP_Screen ) {\n\t\t\treturn $hook_name;\n\t\t}\n\n\t\t$post_type = $taxonomy = null;\n\t\t$in_admin = false;\n\t\t$action = '';\n\n\t\tif ( $hook_name )\n\t\t\t$id = $hook_name;\n\t\telse\n\t\t\t$id = $GLOBALS['hook_suffix'];\n\n\t\t// For those pesky meta boxes.\n\t\tif ( $hook_name && post_type_exists( $hook_name ) ) {\n\t\t\t$post_type = $id;\n\t\t\t$id = 'post'; // changes later. ends up being $base.\n\t\t} else {\n\t\t\tif ( '.php' == substr( $id, -4 ) )\n\t\t\t\t$id = substr( $id, 0, -4 );\n\n\t\t\tif ( 'post-new' == $id || 'link-add' == $id || 'media-new' == $id || 'user-new' == $id ) {\n\t\t\t\t$id = substr( $id, 0, -4 );\n\t\t\t\t$action = 'add';\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $post_type && $hook_name ) {\n\t\t\tif ( '-network' == substr( $id, -8 ) ) {\n\t\t\t\t$id = substr( $id, 0, -8 );\n\t\t\t\t$in_admin = 'network';\n\t\t\t} elseif ( '-user' == substr( $id, -5 ) ) {\n\t\t\t\t$id = substr( $id, 0, -5 );\n\t\t\t\t$in_admin = 'user';\n\t\t\t}\n\n\t\t\t$id = sanitize_key( $id );\n\t\t\tif ( 'edit-comments' != $id && 'edit-tags' != $id && 'edit-' == substr( $id, 0, 5 ) ) {\n\t\t\t\t$maybe = substr( $id, 5 );\n\t\t\t\tif ( taxonomy_exists( $maybe ) ) {\n\t\t\t\t\t$id = 'edit-tags';\n\t\t\t\t\t$taxonomy = $maybe;\n\t\t\t\t} elseif ( post_type_exists( $maybe ) ) {\n\t\t\t\t\t$id = 'edit';\n\t\t\t\t\t$post_type = $maybe;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! $in_admin )\n\t\t\t\t$in_admin = 'site';\n\t\t} else {\n\t\t\tif ( defined( 'WP_NETWORK_ADMIN' ) && WP_NETWORK_ADMIN )\n\t\t\t\t$in_admin = 'network';\n\t\t\telseif ( defined( 'WP_USER_ADMIN' ) && WP_USER_ADMIN )\n\t\t\t\t$in_admin = 'user';\n\t\t\telse\n\t\t\t\t$in_admin = 'site';\n\t\t}\n\n\t\tif ( 'index' == $id )\n\t\t\t$id = 'dashboard';\n\t\telseif ( 'front' == $id )\n\t\t\t$in_admin = false;\n\n\t\t$base = $id;\n\n\t\t// If this is the current screen, see if we can be more accurate for post types and taxonomies.\n\t\tif ( ! $hook_name ) {\n\t\t\tif ( isset( $_REQUEST['post_type'] ) )\n\t\t\t\t$post_type = post_type_exists( $_REQUEST['post_type'] ) ? $_REQUEST['post_type'] : false;\n\t\t\tif ( isset( $_REQUEST['taxonomy'] ) )\n\t\t\t\t$taxonomy = taxonomy_exists( $_REQUEST['taxonomy'] ) ? $_REQUEST['taxonomy'] : false;\n\n\t\t\tswitch ( $base ) {\n\t\t\t\tcase 'post' :\n\t\t\t\t\tif ( isset( $_GET['post'] ) )\n\t\t\t\t\t\t$post_id = (int) $_GET['post'];\n\t\t\t\t\telseif ( isset( $_POST['post_ID'] ) )\n\t\t\t\t\t\t$post_id = (int) $_POST['post_ID'];\n\t\t\t\t\telse\n\t\t\t\t\t\t$post_id = 0;\n\n\t\t\t\t\tif ( $post_id ) {\n\t\t\t\t\t\t$post = get_post( $post_id );\n\t\t\t\t\t\tif ( $post )\n\t\t\t\t\t\t\t$post_type = $post->post_type;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'edit-tags' :\n\t\t\t\tcase 'term' :\n\t\t\t\t\tif ( null === $post_type && is_object_in_taxonomy( 'post', $taxonomy ? $taxonomy : 'post_tag' ) )\n\t\t\t\t\t\t$post_type = 'post';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tswitch ( $base ) {\n\t\t\tcase 'post' :\n\t\t\t\tif ( null === $post_type )\n\t\t\t\t\t$post_type = 'post';\n\t\t\t\t$id = $post_type;\n\t\t\t\tbreak;\n\t\t\tcase 'edit' :\n\t\t\t\tif ( null === $post_type )\n\t\t\t\t\t$post_type = 'post';\n\t\t\t\t$id .= '-' . $post_type;\n\t\t\t\tbreak;\n\t\t\tcase 'edit-tags' :\n\t\t\tcase 'term' :\n\t\t\t\tif ( null === $taxonomy )\n\t\t\t\t\t$taxonomy = 'post_tag';\n\t\t\t\t// The edit-tags ID does not contain the post type. Look for it in the request.\n\t\t\t\tif ( null === $post_type ) {\n\t\t\t\t\t$post_type = 'post';\n\t\t\t\t\tif ( isset( $_REQUEST['post_type'] ) && post_type_exists( $_REQUEST['post_type'] ) )\n\t\t\t\t\t\t$post_type = $_REQUEST['post_type'];\n\t\t\t\t}\n\n\t\t\t\t$id = 'edit-' . $taxonomy;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ( 'network' == $in_admin ) {\n\t\t\t$id   .= '-network';\n\t\t\t$base .= '-network';\n\t\t} elseif ( 'user' == $in_admin ) {\n\t\t\t$id   .= '-user';\n\t\t\t$base .= '-user';\n\t\t}\n\n\t\tif ( isset( self::$_registry[ $id ] ) ) {\n\t\t\t$screen = self::$_registry[ $id ];\n\t\t\tif ( $screen === get_current_screen() )\n\t\t\t\treturn $screen;\n\t\t} else {\n\t\t\t$screen = new WP_Screen();\n\t\t\t$screen->id     = $id;\n\t\t}\n\n\t\t$screen->base       = $base;\n\t\t$screen->action     = $action;\n\t\t$screen->post_type  = (string) $post_type;\n\t\t$screen->taxonomy   = (string) $taxonomy;\n\t\t$screen->is_user    = ( 'user' == $in_admin );\n\t\t$screen->is_network = ( 'network' == $in_admin );\n\t\t$screen->in_admin   = $in_admin;\n\n\t\tself::$_registry[ $id ] = $screen;\n\n\t\treturn $screen;\n\t}\n\n\t/**\n\t * Makes the screen object the current screen.\n\t *\n\t * @see set_current_screen()\n\t * @since 3.3.0\n\t *\n\t * @global WP_Screen $current_screen\n\t * @global string    $taxnow\n\t * @global string    $typenow\n\t */\n\tpublic function set_current_screen() {\n\t\tglobal $current_screen, $taxnow, $typenow;\n\t\t$current_screen = $this;\n\t\t$taxnow = $this->taxonomy;\n\t\t$typenow = $this->post_type;\n\n\t\t/**\n\t\t * Fires after the current screen has been set.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param WP_Screen $current_screen Current WP_Screen object.\n\t\t */\n\t\tdo_action( 'current_screen', $current_screen );\n\t}\n\n\t/**\n\t * Constructor\n\t *\n\t * @since 3.3.0\n\t * @access private\n\t */\n\tprivate function __construct() {}\n\n\t/**\n\t * Indicates whether the screen is in a particular admin\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param string $admin The admin to check against (network | user | site).\n\t *                      If empty any of the three admins will result in true.\n\t * @return bool True if the screen is in the indicated admin, false otherwise.\n\t */\n\tpublic function in_admin( $admin = null ) {\n\t\tif ( empty( $admin ) )\n\t\t\treturn (bool) $this->in_admin;\n\n\t\treturn ( $admin == $this->in_admin );\n\t}\n\n\t/**\n\t * Sets the old string-based contextual help for the screen for backward compatibility.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @static\n\t *\n\t * @param WP_Screen $screen A screen object.\n\t * @param string $help Help text.\n\t */\n\tpublic static function add_old_compat_help( $screen, $help ) {\n\t\tself::$_old_compat_help[ $screen->id ] = $help;\n\t}\n\n\t/**\n\t * Set the parent information for the screen.\n\t * This is called in admin-header.php after the menu parent for the screen has been determined.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $parent_file The parent file of the screen. Typically the $parent_file global.\n\t */\n\tpublic function set_parentage( $parent_file ) {\n\t\t$this->parent_file = $parent_file;\n\t\tlist( $this->parent_base ) = explode( '?', $parent_file );\n\t\t$this->parent_base = str_replace( '.php', '', $this->parent_base );\n\t}\n\n\t/**\n\t * Adds an option for the screen.\n\t * Call this in template files after admin.php is loaded and before admin-header.php is loaded to add screen options.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $option Option ID\n\t * @param mixed $args Option-dependent arguments.\n\t */\n\tpublic function add_option( $option, $args = array() ) {\n\t\t$this->_options[ $option ] = $args;\n\t}\n\n\t/**\n\t * Remove an option from the screen.\n\t *\n\t * @since 3.8.0\n\t *\n\t * @param string $option Option ID.\n\t */\n\tpublic function remove_option( $option ) {\n\t\tunset( $this->_options[ $option ] );\n\t}\n\n\t/**\n\t * Remove all options from the screen.\n\t *\n\t * @since 3.8.0\n\t */\n\tpublic function remove_options() {\n\t\t$this->_options = array();\n\t}\n\n\t/**\n\t * Get the options registered for the screen.\n\t *\n\t * @since 3.8.0\n\t *\n\t * @return array Options with arguments.\n\t */\n\tpublic function get_options() {\n\t\treturn $this->_options;\n\t}\n\n\t/**\n\t * Gets the arguments for an option for the screen.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $option Option name.\n\t * @param string $key    Optional. Specific array key for when the option is an array.\n\t *                       Default false.\n\t * @return string The option value if set, null otherwise.\n\t */\n\tpublic function get_option( $option, $key = false ) {\n\t\tif ( ! isset( $this->_options[ $option ] ) )\n\t\t\treturn null;\n\t\tif ( $key ) {\n\t\t\tif ( isset( $this->_options[ $option ][ $key ] ) )\n\t\t\t\treturn $this->_options[ $option ][ $key ];\n\t\t\treturn null;\n\t\t}\n\t\treturn $this->_options[ $option ];\n\t}\n\n\t/**\n\t * Gets the help tabs registered for the screen.\n\t *\n\t * @since 3.4.0\n\t * @since 4.4.0 Help tabs are ordered by their priority.\n\t *\n\t * @return array Help tabs with arguments.\n\t */\n\tpublic function get_help_tabs() {\n\t\t$help_tabs = $this->_help_tabs;\n\n\t\t$priorities = array();\n\t\tforeach ( $help_tabs as $help_tab ) {\n\t\t\tif ( isset( $priorities[ $help_tab['priority'] ] ) ) {\n\t\t\t\t$priorities[ $help_tab['priority'] ][] = $help_tab;\n\t\t\t} else {\n\t\t\t\t$priorities[ $help_tab['priority'] ] = array( $help_tab );\n\t\t\t}\n\t\t}\n\n\t\tksort( $priorities );\n\n\t\t$sorted = array();\n\t\tforeach ( $priorities as $list ) {\n\t\t\tforeach ( $list as $tab ) {\n\t\t\t\t$sorted[ $tab['id'] ] = $tab;\n\t\t\t}\n\t\t}\n\n\t\treturn $sorted;\n\t}\n\n\t/**\n\t * Gets the arguments for a help tab.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id Help Tab ID.\n\t * @return array Help tab arguments.\n\t */\n\tpublic function get_help_tab( $id ) {\n\t\tif ( ! isset( $this->_help_tabs[ $id ] ) )\n\t\t\treturn null;\n\t\treturn $this->_help_tabs[ $id ];\n\t}\n\n\t/**\n\t * Add a help tab to the contextual help for the screen.\n\t * Call this on the load-$pagenow hook for the relevant screen.\n\t *\n\t * @since 3.3.0\n\t * @since 4.4.0 The `$priority` argument was added.\n\t *\n\t * @param array $args {\n\t *     Array of arguments used to display the help tab.\n\t *\n\t *     @type string $title    Title for the tab. Default false.\n\t *     @type string $id       Tab ID. Must be HTML-safe. Default false.\n\t *     @type string $content  Optional. Help tab content in plain text or HTML. Default empty string.\n\t *     @type string $callback Optional. A callback to generate the tab content. Default false.\n\t *     @type int    $priority Optional. The priority of the tab, used for ordering. Default 10.\n\t * }\n\t */\n\tpublic function add_help_tab( $args ) {\n\t\t$defaults = array(\n\t\t\t'title'    => false,\n\t\t\t'id'       => false,\n\t\t\t'content'  => '',\n\t\t\t'callback' => false,\n\t\t\t'priority' => 10,\n\t\t);\n\t\t$args = wp_parse_args( $args, $defaults );\n\n\t\t$args['id'] = sanitize_html_class( $args['id'] );\n\n\t\t// Ensure we have an ID and title.\n\t\tif ( ! $args['id'] || ! $args['title'] )\n\t\t\treturn;\n\n\t\t// Allows for overriding an existing tab with that ID.\n\t\t$this->_help_tabs[ $args['id'] ] = $args;\n\t}\n\n\t/**\n\t * Removes a help tab from the contextual help for the screen.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $id The help tab ID.\n\t */\n\tpublic function remove_help_tab( $id ) {\n\t\tunset( $this->_help_tabs[ $id ] );\n\t}\n\n\t/**\n\t * Removes all help tabs from the contextual help for the screen.\n\t *\n\t * @since 3.3.0\n\t */\n\tpublic function remove_help_tabs() {\n\t\t$this->_help_tabs = array();\n\t}\n\n\t/**\n\t * Gets the content from a contextual help sidebar.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return string Contents of the help sidebar.\n\t */\n\tpublic function get_help_sidebar() {\n\t\treturn $this->_help_sidebar;\n\t}\n\n\t/**\n\t * Add a sidebar to the contextual help for the screen.\n\t * Call this in template files after admin.php is loaded and before admin-header.php is loaded to add a sidebar to the contextual help.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $content Sidebar content in plain text or HTML.\n\t */\n\tpublic function set_help_sidebar( $content ) {\n\t\t$this->_help_sidebar = $content;\n\t}\n\n\t/**\n\t * Gets the number of layout columns the user has selected.\n\t *\n\t * The layout_columns option controls the max number and default number of\n\t * columns. This method returns the number of columns within that range selected\n\t * by the user via Screen Options. If no selection has been made, the default\n\t * provisioned in layout_columns is returned. If the screen does not support\n\t * selecting the number of layout columns, 0 is returned.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return int Number of columns to display.\n\t */\n\tpublic function get_columns() {\n\t\treturn $this->columns;\n\t}\n\n \t/**\n\t * Get the accessible hidden headings and text used in the screen.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @see set_screen_reader_content() For more information on the array format.\n\t *\n\t * @return array An associative array of screen reader text strings.\n\t */\n\tpublic function get_screen_reader_content() {\n\t\treturn $this->_screen_reader_content;\n\t}\n\n\t/**\n\t * Get a screen reader text string.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $key Screen reader text array named key.\n\t * @return string Screen reader text string.\n\t */\n\tpublic function get_screen_reader_text( $key ) {\n\t\tif ( ! isset( $this->_screen_reader_content[ $key ] ) ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn $this->_screen_reader_content[ $key ];\n\t}\n\n\t/**\n\t * Add accessible hidden headings and text for the screen.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array $content {\n\t *     An associative array of screen reader text strings.\n\t *\n\t *     @type string $heading_views      Screen reader text for the filter links heading.\n\t *                                      Default 'Filter items list'.\n\t *     @type string $heading_pagination Screen reader text for the pagination heading.\n\t *                                      Default 'Items list navigation'.\n\t *     @type string $heading_list       Screen reader text for the items list heading.\n\t *                                      Default 'Items list'.\n\t * }\n\t */\n\tpublic function set_screen_reader_content( $content = array() ) {\n\t\t$defaults = array(\n\t\t\t'heading_views'      => __( 'Filter items list' ),\n\t\t\t'heading_pagination' => __( 'Items list navigation' ),\n\t\t\t'heading_list'       => __( 'Items list' ),\n\t\t);\n\t\t$content = wp_parse_args( $content, $defaults );\n\n\t\t$this->_screen_reader_content = $content;\n\t}\n\n\t/**\n\t * Remove all the accessible hidden headings and text for the screen.\n\t *\n\t * @since 4.4.0\n\t */\n\tpublic function remove_screen_reader_content() {\n\t\t$this->_screen_reader_content = array();\n\t}\n\n\t/**\n\t * Render the screen's help section.\n\t *\n\t * This will trigger the deprecated filters for backward compatibility.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @global string $screen_layout_columns\n\t */\n\tpublic function render_screen_meta() {\n\n\t\t/**\n\t\t * Filters the legacy contextual help list.\n\t\t *\n\t\t * @since 2.7.0\n\t\t * @deprecated 3.3.0 Use get_current_screen()->add_help_tab() or\n\t\t *                   get_current_screen()->remove_help_tab() instead.\n\t\t *\n\t\t * @param array     $old_compat_help Old contextual help.\n\t\t * @param WP_Screen $this            Current WP_Screen instance.\n\t\t */\n\t\tself::$_old_compat_help = apply_filters( 'contextual_help_list', self::$_old_compat_help, $this );\n\n\t\t$old_help = isset( self::$_old_compat_help[ $this->id ] ) ? self::$_old_compat_help[ $this->id ] : '';\n\n\t\t/**\n\t\t * Filters the legacy contextual help text.\n\t\t *\n\t\t * @since 2.7.0\n\t\t * @deprecated 3.3.0 Use get_current_screen()->add_help_tab() or\n\t\t *                   get_current_screen()->remove_help_tab() instead.\n\t\t *\n\t\t * @param string    $old_help  Help text that appears on the screen.\n\t\t * @param string    $screen_id Screen ID.\n\t\t * @param WP_Screen $this      Current WP_Screen instance.\n\t\t *\n\t\t */\n\t\t$old_help = apply_filters( 'contextual_help', $old_help, $this->id, $this );\n\n\t\t// Default help only if there is no old-style block of text and no new-style help tabs.\n\t\tif ( empty( $old_help ) && ! $this->get_help_tabs() ) {\n\n\t\t\t/**\n\t\t\t * Filters the default legacy contextual help text.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t * @deprecated 3.3.0 Use get_current_screen()->add_help_tab() or\n\t\t\t *                   get_current_screen()->remove_help_tab() instead.\n\t\t\t *\n\t\t\t * @param string $old_help_default Default contextual help text.\n\t\t\t */\n\t\t\t$default_help = apply_filters( 'default_contextual_help', '' );\n\t\t\tif ( $default_help )\n\t\t\t\t$old_help = '<p>' . $default_help . '</p>';\n\t\t}\n\n\t\tif ( $old_help ) {\n\t\t\t$this->add_help_tab( array(\n\t\t\t\t'id'      => 'old-contextual-help',\n\t\t\t\t'title'   => __('Overview'),\n\t\t\t\t'content' => $old_help,\n\t\t\t) );\n\t\t}\n\n\t\t$help_sidebar = $this->get_help_sidebar();\n\n\t\t$help_class = 'hidden';\n\t\tif ( ! $help_sidebar )\n\t\t\t$help_class .= ' no-sidebar';\n\n\t\t// Time to render!\n\t\t?>\n\t\t<div id=\"screen-meta\" class=\"metabox-prefs\">\n\n\t\t\t<div id=\"contextual-help-wrap\" class=\"<?php echo esc_attr( $help_class ); ?>\" tabindex=\"-1\" aria-label=\"<?php esc_attr_e('Contextual Help Tab'); ?>\">\n\t\t\t\t<div id=\"contextual-help-back\"></div>\n\t\t\t\t<div id=\"contextual-help-columns\">\n\t\t\t\t\t<div class=\"contextual-help-tabs\">\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t$class = ' class=\"active\"';\n\t\t\t\t\t\tforeach ( $this->get_help_tabs() as $tab ) :\n\t\t\t\t\t\t\t$link_id  = \"tab-link-{$tab['id']}\";\n\t\t\t\t\t\t\t$panel_id = \"tab-panel-{$tab['id']}\";\n\t\t\t\t\t\t\t?>\n\n\t\t\t\t\t\t\t<li id=\"<?php echo esc_attr( $link_id ); ?>\"<?php echo $class; ?>>\n\t\t\t\t\t\t\t\t<a href=\"<?php echo esc_url( \"#$panel_id\" ); ?>\" aria-controls=\"<?php echo esc_attr( $panel_id ); ?>\">\n\t\t\t\t\t\t\t\t\t<?php echo esc_html( $tab['title'] ); ?>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t$class = '';\n\t\t\t\t\t\tendforeach;\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<?php if ( $help_sidebar ) : ?>\n\t\t\t\t\t<div class=\"contextual-help-sidebar\">\n\t\t\t\t\t\t<?php echo $help_sidebar; ?>\n\t\t\t\t\t</div>\n\t\t\t\t\t<?php endif; ?>\n\n\t\t\t\t\t<div class=\"contextual-help-tabs-wrap\">\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t$classes = 'help-tab-content active';\n\t\t\t\t\t\tforeach ( $this->get_help_tabs() as $tab ):\n\t\t\t\t\t\t\t$panel_id = \"tab-panel-{$tab['id']}\";\n\t\t\t\t\t\t\t?>\n\n\t\t\t\t\t\t\t<div id=\"<?php echo esc_attr( $panel_id ); ?>\" class=\"<?php echo $classes; ?>\">\n\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t// Print tab content.\n\t\t\t\t\t\t\t\techo $tab['content'];\n\n\t\t\t\t\t\t\t\t// If it exists, fire tab callback.\n\t\t\t\t\t\t\t\tif ( ! empty( $tab['callback'] ) )\n\t\t\t\t\t\t\t\t\tcall_user_func_array( $tab['callback'], array( $this, $tab ) );\n\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t$classes = 'help-tab-content';\n\t\t\t\t\t\tendforeach;\n\t\t\t\t\t\t?>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t<?php\n\t\t// Setup layout columns\n\n\t\t/**\n\t\t * Filters the array of screen layout columns.\n\t\t *\n\t\t * This hook provides back-compat for plugins using the back-compat\n\t\t * Filters instead of add_screen_option().\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param array     $empty_columns Empty array.\n\t\t * @param string    $screen_id     Screen ID.\n\t\t * @param WP_Screen $this          Current WP_Screen instance.\n\t\t */\n\t\t$columns = apply_filters( 'screen_layout_columns', array(), $this->id, $this );\n\n\t\tif ( ! empty( $columns ) && isset( $columns[ $this->id ] ) )\n\t\t\t$this->add_option( 'layout_columns', array('max' => $columns[ $this->id ] ) );\n\n\t\tif ( $this->get_option( 'layout_columns' ) ) {\n\t\t\t$this->columns = (int) get_user_option(\"screen_layout_$this->id\");\n\n\t\t\tif ( ! $this->columns && $this->get_option( 'layout_columns', 'default' ) )\n\t\t\t\t$this->columns = $this->get_option( 'layout_columns', 'default' );\n\t\t}\n\t\t$GLOBALS[ 'screen_layout_columns' ] = $this->columns; // Set the global for back-compat.\n\n\t\t// Add screen options\n\t\tif ( $this->show_screen_options() )\n\t\t\t$this->render_screen_options();\n\t\t?>\n\t\t</div>\n\t\t<?php\n\t\tif ( ! $this->get_help_tabs() && ! $this->show_screen_options() )\n\t\t\treturn;\n\t\t?>\n\t\t<div id=\"screen-meta-links\">\n\t\t<?php if ( $this->get_help_tabs() ) : ?>\n\t\t\t<div id=\"contextual-help-link-wrap\" class=\"hide-if-no-js screen-meta-toggle\">\n\t\t\t<button type=\"button\" id=\"contextual-help-link\" class=\"button show-settings\" aria-controls=\"contextual-help-wrap\" aria-expanded=\"false\"><?php _e( 'Help' ); ?></button>\n\t\t\t</div>\n\t\t<?php endif;\n\t\tif ( $this->show_screen_options() ) : ?>\n\t\t\t<div id=\"screen-options-link-wrap\" class=\"hide-if-no-js screen-meta-toggle\">\n\t\t\t<button type=\"button\" id=\"show-settings-link\" class=\"button show-settings\" aria-controls=\"screen-options-wrap\" aria-expanded=\"false\"><?php _e( 'Screen Options' ); ?></button>\n\t\t\t</div>\n\t\t<?php endif; ?>\n\t\t</div>\n\t\t<?php\n\t}\n\n\t/**\n\t *\n\t * @global array $wp_meta_boxes\n\t *\n\t * @return bool\n\t */\n\tpublic function show_screen_options() {\n\t\tglobal $wp_meta_boxes;\n\n\t\tif ( is_bool( $this->_show_screen_options ) )\n\t\t\treturn $this->_show_screen_options;\n\n\t\t$columns = get_column_headers( $this );\n\n\t\t$show_screen = ! empty( $wp_meta_boxes[ $this->id ] ) || $columns || $this->get_option( 'per_page' );\n\n\t\tswitch ( $this->base ) {\n\t\t\tcase 'widgets':\n\t\t\t\t$this->_screen_settings = '<p><a id=\"access-on\" href=\"widgets.php?widgets-access=on\">' . __('Enable accessibility mode') . '</a><a id=\"access-off\" href=\"widgets.php?widgets-access=off\">' . __('Disable accessibility mode') . \"</a></p>\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 'post' :\n\t\t\t\t$expand = '<fieldset class=\"editor-expand hidden\"><legend>' . __( 'Additional settings' ) . '</legend><label for=\"editor-expand-toggle\">';\n\t\t\t\t$expand .= '<input type=\"checkbox\" id=\"editor-expand-toggle\"' . checked( get_user_setting( 'editor_expand', 'on' ), 'on', false ) . ' />';\n\t\t\t\t$expand .= __( 'Enable full-height editor and distraction-free functionality.' ) . '</label></fieldset>';\n\t\t\t\t$this->_screen_settings = $expand;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->_screen_settings = '';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t/**\n\t\t * Filters the screen settings text displayed in the Screen Options tab.\n\t\t *\n\t\t * This filter is currently only used on the Widgets screen to enable\n\t\t * accessibility mode.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param string    $screen_settings Screen settings.\n\t\t * @param WP_Screen $this            WP_Screen object.\n\t\t */\n\t\t$this->_screen_settings = apply_filters( 'screen_settings', $this->_screen_settings, $this );\n\n\t\tif ( $this->_screen_settings || $this->_options )\n\t\t\t$show_screen = true;\n\n\t\t/**\n\t\t * Filters whether to show the Screen Options tab.\n\t\t *\n\t\t * @since 3.2.0\n\t\t *\n\t\t * @param bool      $show_screen Whether to show Screen Options tab.\n\t\t *                               Default true.\n\t\t * @param WP_Screen $this        Current WP_Screen instance.\n\t\t */\n\t\t$this->_show_screen_options = apply_filters( 'screen_options_show_screen', $show_screen, $this );\n\t\treturn $this->_show_screen_options;\n\t}\n\n\t/**\n\t * Render the screen options tab.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param array $options {\n\t *     @type bool $wrap  Whether the screen-options-wrap div will be included. Defaults to true.\n\t * }\n\t */\n\tpublic function render_screen_options( $options = array() ) {\n\t\t$options = wp_parse_args( $options, array(\n\t\t\t'wrap' => true,\n\t\t) );\n\n\t\t$wrapper_start = $wrapper_end = $form_start = $form_end = '';\n\n\t\t// Output optional wrapper.\n\t\tif ( $options['wrap'] ) {\n\t\t\t$wrapper_start = '<div id=\"screen-options-wrap\" class=\"hidden\" tabindex=\"-1\" aria-label=\"' . esc_attr__( 'Screen Options Tab' ) . '\">';\n\t\t\t$wrapper_end = '</div>';\n\t\t}\n\n\t\t// Don't output the form and nonce for the widgets accessibility mode links.\n\t\tif ( 'widgets' !== $this->base ) {\n\t\t\t$form_start = \"\\n<form id='adv-settings' method='post'>\\n\";\n\t\t\t$form_end = \"\\n\" . wp_nonce_field( 'screen-options-nonce', 'screenoptionnonce', false, false ) . \"\\n</form>\\n\";\n\t\t}\n\n\t\techo $wrapper_start . $form_start;\n\n\t\t$this->render_meta_boxes_preferences();\n\t\t$this->render_list_table_columns_preferences();\n\t\t$this->render_screen_layout();\n\t\t$this->render_per_page_options();\n\t\t$this->render_view_mode();\n\t\techo $this->_screen_settings;\n\n\t\t/**\n\t\t * Filters whether to show the Screen Options submit button.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param bool      $show_button Whether to show Screen Options submit button.\n\t\t *                               Default false.\n\t\t * @param WP_Screen $this        Current WP_Screen instance.\n\t\t */\n\t\t$show_button = apply_filters( 'screen_options_show_submit', false, $this );\n\n\t\tif ( $show_button ) {\n\t\t\tsubmit_button( __( 'Apply' ), 'primary', 'screen-options-apply', true );\n\t\t}\n\n\t\techo $form_end . $wrapper_end;\n\t}\n\n\t/**\n\t * Render the meta boxes preferences.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @global array $wp_meta_boxes\n\t */\n\tpublic function render_meta_boxes_preferences() {\n\t\tglobal $wp_meta_boxes;\n\n\t\tif ( ! isset( $wp_meta_boxes[ $this->id ] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<fieldset class=\"metabox-prefs\">\n\t\t<legend><?php _e( 'Boxes' ); ?></legend>\n\t\t<?php\n\t\t\tmeta_box_prefs( $this );\n\n\t\t\tif ( 'dashboard' === $this->id && has_action( 'welcome_panel' ) && current_user_can( 'edit_theme_options' ) ) {\n\t\t\t\tif ( isset( $_GET['welcome'] ) ) {\n\t\t\t\t\t$welcome_checked = empty( $_GET['welcome'] ) ? 0 : 1;\n\t\t\t\t\tupdate_user_meta( get_current_user_id(), 'show_welcome_panel', $welcome_checked );\n\t\t\t\t} else {\n\t\t\t\t\t$welcome_checked = get_user_meta( get_current_user_id(), 'show_welcome_panel', true );\n\t\t\t\t\tif ( 2 == $welcome_checked && wp_get_current_user()->user_email != get_option( 'admin_email' ) ) {\n\t\t\t\t\t\t$welcome_checked = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo '<label for=\"wp_welcome_panel-hide\">';\n\t\t\t\techo '<input type=\"checkbox\" id=\"wp_welcome_panel-hide\"' . checked( (bool) $welcome_checked, true, false ) . ' />';\n\t\t\t\techo _x( 'Welcome', 'Welcome panel' ) . \"</label>\\n\";\n\t\t\t}\n\t\t?>\n\t\t</fieldset>\n\t\t<?php\n\t}\n\n\t/**\n\t * Render the list table columns preferences.\n\t *\n\t * @since 4.4.0\n\t */\n\tpublic function render_list_table_columns_preferences() {\n\n\t\t$columns = get_column_headers( $this );\n\t\t$hidden  = get_hidden_columns( $this );\n\n\t\tif ( ! $columns ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$legend = ! empty( $columns['_title'] ) ? $columns['_title'] : __( 'Columns' );\n\t\t?>\n\t\t<fieldset class=\"metabox-prefs\">\n\t\t<legend><?php echo $legend; ?></legend>\n\t\t<?php\n\t\t$special = array( '_title', 'cb', 'comment', 'media', 'name', 'title', 'username', 'blogname' );\n\n\t\tforeach ( $columns as $column => $title ) {\n\t\t\t// Can't hide these for they are special\n\t\t\tif ( in_array( $column, $special ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( empty( $title ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( 'comments' == $column ) {\n\t\t\t\t$title = __( 'Comments' );\n\t\t\t}\n\n\t\t\t$id = \"$column-hide\";\n\t\t\techo '<label>';\n\t\t\techo '<input class=\"hide-column-tog\" name=\"' . $id . '\" type=\"checkbox\" id=\"' . $id . '\" value=\"' . $column . '\"' . checked( ! in_array( $column, $hidden ), true, false ) . ' />';\n\t\t\techo \"$title</label>\\n\";\n\t\t}\n\t\t?>\n\t\t</fieldset>\n\t\t<?php\n\t}\n\n\t/**\n\t * Render the option for number of columns on the page\n\t *\n\t * @since 3.3.0\n\t */\n\tpublic function render_screen_layout() {\n\t\tif ( ! $this->get_option( 'layout_columns' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$screen_layout_columns = $this->get_columns();\n\t\t$num = $this->get_option( 'layout_columns', 'max' );\n\n\t\t?>\n\t\t<fieldset class='columns-prefs'>\n\t\t<legend class=\"screen-layout\"><?php _e( 'Layout' ); ?></legend><?php\n\t\t\tfor ( $i = 1; $i <= $num; ++$i ):\n\t\t\t\t?>\n\t\t\t\t<label class=\"columns-prefs-<?php echo $i; ?>\">\n\t\t\t\t\t<input type='radio' name='screen_columns' value='<?php echo esc_attr( $i ); ?>'\n\t\t\t\t\t\t<?php checked( $screen_layout_columns, $i ); ?> />\n\t\t\t\t\t<?php printf( _n( '%s column', '%s columns', $i ), number_format_i18n( $i ) ); ?>\n\t\t\t\t</label>\n\t\t\t\t<?php\n\t\t\tendfor; ?>\n\t\t</fieldset>\n\t\t<?php\n\t}\n\n\t/**\n\t * Render the items per page option\n\t *\n\t * @since 3.3.0\n\t */\n\tpublic function render_per_page_options() {\n\t\tif ( null === $this->get_option( 'per_page' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$per_page_label = $this->get_option( 'per_page', 'label' );\n\t\tif ( null === $per_page_label ) {\n\t\t\t$per_page_label = __( 'Number of items per page:' );\n\t\t}\n\n\t\t$option = $this->get_option( 'per_page', 'option' );\n\t\tif ( ! $option ) {\n\t\t\t$option = str_replace( '-', '_', \"{$this->id}_per_page\" );\n\t\t}\n\n\t\t$per_page = (int) get_user_option( $option );\n\t\tif ( empty( $per_page ) || $per_page < 1 ) {\n\t\t\t$per_page = $this->get_option( 'per_page', 'default' );\n\t\t\tif ( ! $per_page ) {\n\t\t\t\t$per_page = 20;\n\t\t\t}\n\t\t}\n\n\t\tif ( 'edit_comments_per_page' == $option ) {\n\t\t\t$comment_status = isset( $_REQUEST['comment_status'] ) ? $_REQUEST['comment_status'] : 'all';\n\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-comments-list-table.php */\n\t\t\t$per_page = apply_filters( 'comments_per_page', $per_page, $comment_status );\n\t\t} elseif ( 'categories_per_page' == $option ) {\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-terms-list-table.php */\n\t\t\t$per_page = apply_filters( 'edit_categories_per_page', $per_page );\n\t\t} else {\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-list-table.php */\n\t\t\t$per_page = apply_filters( \"{$option}\", $per_page );\n\t\t}\n\n\t\t// Back compat\n\t\tif ( isset( $this->post_type ) ) {\n\t\t\t/** This filter is documented in wp-admin/includes/post.php */\n\t\t\t$per_page = apply_filters( 'edit_posts_per_page', $per_page, $this->post_type );\n\t\t}\n\n\t\t// This needs a submit button\n\t\tadd_filter( 'screen_options_show_submit', '__return_true' );\n\n\t\t?>\n\t\t<fieldset class=\"screen-options\">\n\t\t<legend><?php _e( 'Pagination' ); ?></legend>\n\t\t\t<?php if ( $per_page_label ) : ?>\n\t\t\t\t<label for=\"<?php echo esc_attr( $option ); ?>\"><?php echo $per_page_label; ?></label>\n\t\t\t\t<input type=\"number\" step=\"1\" min=\"1\" max=\"999\" class=\"screen-per-page\" name=\"wp_screen_options[value]\"\n\t\t\t\t\tid=\"<?php echo esc_attr( $option ); ?>\" maxlength=\"3\"\n\t\t\t\t\tvalue=\"<?php echo esc_attr( $per_page ); ?>\" />\n\t\t\t<?php endif; ?>\n\t\t\t\t<input type=\"hidden\" name=\"wp_screen_options[option]\" value=\"<?php echo esc_attr( $option ); ?>\" />\n\t\t</fieldset>\n\t\t<?php\n\t}\n\n\t/**\n\t * Render the list table view mode preferences.\n\t *\n\t * @since 4.4.0\n\t */\n\tpublic function render_view_mode() {\n\t\t$screen = get_current_screen();\n\n\t\t// Currently only enabled for posts lists\n\t\tif ( 'edit' !== $screen->base ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$view_mode_post_types = get_post_types( array( 'hierarchical' => false, 'show_ui' => true ) );\n\n\t\t/**\n\t\t * Filters the post types that have different view mode options.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param array $view_mode_post_types Array of post types that can change view modes.\n\t\t *                                    Default hierarchical post types with show_ui on.\n\t\t */\n\t\t$view_mode_post_types = apply_filters( 'view_mode_post_types', $view_mode_post_types );\n\n\t\tif ( ! in_array( $this->post_type, $view_mode_post_types ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tglobal $mode;\n\n\t\t// This needs a submit button\n\t\tadd_filter( 'screen_options_show_submit', '__return_true' );\n?>\n\t\t<fieldset class=\"metabox-prefs view-mode\">\n\t\t<legend><?php _e( 'View Mode' ); ?></legend>\n\t\t\t\t<label for=\"list-view-mode\">\n\t\t\t\t\t<input id=\"list-view-mode\" type=\"radio\" name=\"mode\" value=\"list\" <?php checked( 'list', $mode ); ?> />\n\t\t\t\t\t<?php _e( 'List View' ); ?>\n\t\t\t\t</label>\n\t\t\t\t<label for=\"excerpt-view-mode\">\n\t\t\t\t\t<input id=\"excerpt-view-mode\" type=\"radio\" name=\"mode\" value=\"excerpt\" <?php checked( 'excerpt', $mode ); ?> />\n\t\t\t\t\t<?php _e( 'Excerpt View' ); ?>\n\t\t\t\t</label>\n\t\t</fieldset>\n<?php\n\t}\n\n\t/**\n\t * Render screen reader text.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $key The screen reader text array named key.\n\t * @param string $tag Optional. The HTML tag to wrap the screen reader text. Default h2.\n\t */\n\tpublic function render_screen_reader_content( $key = '', $tag = 'h2' ) {\n\n\t\tif ( ! isset( $this->_screen_reader_content[ $key ] ) ) {\n\t\t\treturn;\n\t\t}\n\t\techo \"<$tag class='screen-reader-text'>\" . $this->_screen_reader_content[ $key ] . \"</$tag>\";\n\t}\n}\n", "<?php\n/**\n * Widget administration panel\n *\n * @package WordPress\n * @subpackage Administration\n */\n\n/** WordPress Administration Bootstrap */\nrequire_once( dirname( __FILE__ ) . '/admin.php' );\n\n/** WordPress Administration Widgets API */\nrequire_once(ABSPATH . 'wp-admin/includes/widgets.php');\n\nif ( ! current_user_can( 'edit_theme_options' ) ) {\n\twp_die(\n\t\t'<h1>' . __( 'Cheatin&#8217; uh?' ) . '</h1>' .\n\t\t'<p>' . __( 'Sorry, you are not allowed to edit theme options on this site.' ) . '</p>',\n\t\t403\n\t);\n}\n\n$widgets_access = get_user_setting( 'widgets_access' );\nif ( isset($_GET['widgets-access']) ) {\n\t$widgets_access = 'on' == $_GET['widgets-access'] ? 'on' : 'off';\n\tset_user_setting( 'widgets_access', $widgets_access );\n}\n\nif ( 'on' == $widgets_access ) {\n\tadd_filter( 'admin_body_class', 'wp_widgets_access_body_class' );\n} else {\n\twp_enqueue_script('admin-widgets');\n\n\tif ( wp_is_mobile() )\n\t\twp_enqueue_script( 'jquery-touch-punch' );\n}\n\n/**\n * Fires early before the Widgets administration screen loads,\n * after scripts are enqueued.\n *\n * @since 2.2.0\n */\ndo_action( 'sidebar_admin_setup' );\n\n$title = __( 'Widgets' );\n$parent_file = 'themes.php';\n\nget_current_screen()->add_help_tab( array(\n'id'\t\t=> 'overview',\n'title'\t\t=> __('Overview'),\n'content'\t=>\n\t'<p>' . __('Widgets are independent sections of content that can be placed into any widgetized area provided by your theme (commonly called sidebars). To populate your sidebars/widget areas with individual widgets, drag and drop the title bars into the desired area. By default, only the first widget area is expanded. To populate additional widget areas, click on their title bars to expand them.') . '</p>\n\t<p>' . __('The Available Widgets section contains all the widgets you can choose from. Once you drag a widget into a sidebar, it will open to allow you to configure its settings. When you are happy with the widget settings, click the Save button and the widget will go live on your site. If you click Delete, it will remove the widget.') . '</p>'\n) );\nget_current_screen()->add_help_tab( array(\n'id'\t\t=> 'removing-reusing',\n'title'\t\t=> __('Removing and Reusing'),\n'content'\t=>\n\t'<p>' . __('If you want to remove the widget but save its setting for possible future use, just drag it into the Inactive Widgets area. You can add them back anytime from there. This is especially helpful when you switch to a theme with fewer or different widget areas.') . '</p>\n\t<p>' . __('Widgets may be used multiple times. You can give each widget a title, to display on your site, but it&#8217;s not required.') . '</p>\n\t<p>' . __('Enabling Accessibility Mode, via Screen Options, allows you to use Add and Edit buttons instead of using drag and drop.') . '</p>'\n) );\nget_current_screen()->add_help_tab( array(\n'id'\t\t=> 'missing-widgets',\n'title'\t\t=> __('Missing Widgets'),\n'content'\t=>\n\t'<p>' . __('Many themes show some sidebar widgets by default until you edit your sidebars, but they are not automatically displayed in your sidebar management tool. After you make your first widget change, you can re-add the default widgets by adding them from the Available Widgets area.') . '</p>' .\n\t\t'<p>' . __('When changing themes, there is often some variation in the number and setup of widget areas/sidebars and sometimes these conflicts make the transition a bit less smooth. If you changed themes and seem to be missing widgets, scroll down on this screen to the Inactive Widgets area, where all of your widgets and their settings will have been saved.') . '</p>'\n) );\n\nget_current_screen()->set_help_sidebar(\n\t'<p><strong>' . __('For more information:') . '</strong></p>' .\n\t'<p>' . __('<a href=\"https://codex.wordpress.org/Appearance_Widgets_Screen\">Documentation on Widgets</a>') . '</p>' .\n\t'<p>' . __('<a href=\"https://wordpress.org/support/\">Support Forums</a>') . '</p>'\n);\n\nif ( ! current_theme_supports( 'widgets' ) ) {\n\twp_die( __( 'The theme you are currently using isn&#8217;t widget-aware, meaning that it has no sidebars that you are able to change. For information on making your theme widget-aware, please <a href=\"https://codex.wordpress.org/Widgetizing_Themes\">follow these instructions</a>.' ) );\n}\n\n// These are the widgets grouped by sidebar\n$sidebars_widgets = wp_get_sidebars_widgets();\n\nif ( empty( $sidebars_widgets ) )\n\t$sidebars_widgets = wp_get_widget_defaults();\n\nforeach ( $sidebars_widgets as $sidebar_id => $widgets ) {\n\tif ( 'wp_inactive_widgets' == $sidebar_id )\n\t\tcontinue;\n\n\tif ( ! is_registered_sidebar( $sidebar_id ) ) {\n\t\tif ( ! empty( $widgets ) ) { // register the inactive_widgets area as sidebar\n\t\t\tregister_sidebar(array(\n\t\t\t\t'name' => __( 'Inactive Sidebar (not used)' ),\n\t\t\t\t'id' => $sidebar_id,\n\t\t\t\t'class' => 'inactive-sidebar orphan-sidebar',\n\t\t\t\t'description' => __( 'This sidebar is no longer available and does not show anywhere on your site. Remove each of the widgets below to fully remove this inactive sidebar.' ),\n\t\t\t\t'before_widget' => '',\n\t\t\t\t'after_widget' => '',\n\t\t\t\t'before_title' => '',\n\t\t\t\t'after_title' => '',\n\t\t\t));\n\t\t} else {\n\t\t\tunset( $sidebars_widgets[ $sidebar_id ] );\n\t\t}\n\t}\n}\n\n// register the inactive_widgets area as sidebar\nregister_sidebar(array(\n\t'name' => __('Inactive Widgets'),\n\t'id' => 'wp_inactive_widgets',\n\t'class' => 'inactive-sidebar',\n\t'description' => __( 'Drag widgets here to remove them from the sidebar but keep their settings.' ),\n\t'before_widget' => '',\n\t'after_widget' => '',\n\t'before_title' => '',\n\t'after_title' => '',\n));\n\nretrieve_widgets();\n\n// We're saving a widget without js\nif ( isset($_POST['savewidget']) || isset($_POST['removewidget']) ) {\n\t$widget_id = $_POST['widget-id'];\n\tcheck_admin_referer(\"save-delete-widget-$widget_id\");\n\n\t$number = isset($_POST['multi_number']) ? (int) $_POST['multi_number'] : '';\n\tif ( $number ) {\n\t\tforeach ( $_POST as $key => $val ) {\n\t\t\tif ( is_array($val) && preg_match('/__i__|%i%/', key($val)) ) {\n\t\t\t\t$_POST[$key] = array( $number => array_shift($val) );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t$sidebar_id = $_POST['sidebar'];\n\t$position = isset($_POST[$sidebar_id . '_position']) ? (int) $_POST[$sidebar_id . '_position'] - 1 : 0;\n\n\t$id_base = $_POST['id_base'];\n\t$sidebar = isset($sidebars_widgets[$sidebar_id]) ? $sidebars_widgets[$sidebar_id] : array();\n\n\t// Delete.\n\tif ( isset($_POST['removewidget']) && $_POST['removewidget'] ) {\n\n\t\tif ( !in_array($widget_id, $sidebar, true) ) {\n\t\t\twp_redirect( admin_url('widgets.php?error=0') );\n\t\t\texit;\n\t\t}\n\n\t\t$sidebar = array_diff( $sidebar, array($widget_id) );\n\t\t$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');\n\n\t\t/**\n\t\t * Fires immediately after a widget has been marked for deletion.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param string $widget_id  ID of the widget marked for deletion.\n\t\t * @param string $sidebar_id ID of the sidebar the widget was deleted from.\n\t\t * @param string $id_base    ID base for the widget.\n\t\t */\n\t\tdo_action( 'delete_widget', $widget_id, $sidebar_id, $id_base );\n\t}\n\n\t$_POST['widget-id'] = $sidebar;\n\n\tforeach ( (array) $wp_registered_widget_updates as $name => $control ) {\n\t\tif ( $name != $id_base || !is_callable($control['callback']) )\n\t\t\tcontinue;\n\n\t\tob_start();\n\t\t\tcall_user_func_array( $control['callback'], $control['params'] );\n\t\tob_end_clean();\n\n\t\tbreak;\n\t}\n\n\t$sidebars_widgets[$sidebar_id] = $sidebar;\n\n\t// Remove old position.\n\tif ( !isset($_POST['delete_widget']) ) {\n\t\tforeach ( $sidebars_widgets as $key => $sb ) {\n\t\t\tif ( is_array($sb) )\n\t\t\t\t$sidebars_widgets[$key] = array_diff( $sb, array($widget_id) );\n\t\t}\n\t\tarray_splice( $sidebars_widgets[$sidebar_id], $position, 0, $widget_id );\n\t}\n\n\twp_set_sidebars_widgets($sidebars_widgets);\n\twp_redirect( admin_url('widgets.php?message=0') );\n\texit;\n}\n\n// Remove inactive widgets without js\nif ( isset( $_POST['removeinactivewidgets'] ) ) {\n\tcheck_admin_referer( 'remove-inactive-widgets', '_wpnonce_remove_inactive_widgets' );\n\n\tif ( $_POST['removeinactivewidgets'] ) {\n\t\tforeach ( $sidebars_widgets['wp_inactive_widgets'] as $key => $widget_id ) {\n\t\t\t$pieces = explode( '-', $widget_id );\n\t\t\t$multi_number = array_pop( $pieces );\n\t\t\t$id_base = implode( '-', $pieces );\n\t\t\t$widget = get_option( 'widget_' . $id_base );\n\t\t\tunset( $widget[$multi_number] );\n\t\t\tupdate_option( 'widget_' . $id_base, $widget );\n\t\t\tunset( $sidebars_widgets['wp_inactive_widgets'][$key] );\n\t\t}\n\n\t\twp_set_sidebars_widgets( $sidebars_widgets );\n\t}\n\n\twp_redirect( admin_url( 'widgets.php?message=0' ) );\n\texit;\n}\n\n// Output the widget form without js\nif ( isset($_GET['editwidget']) && $_GET['editwidget'] ) {\n\t$widget_id = $_GET['editwidget'];\n\n\tif ( isset($_GET['addnew']) ) {\n\t\t// Default to the first sidebar\n\t\t$keys = array_keys( $wp_registered_sidebars );\n\t\t$sidebar = reset( $keys );\n\n\t\tif ( isset($_GET['base']) && isset($_GET['num']) ) { // multi-widget\n\t\t\t// Copy minimal info from an existing instance of this widget to a new instance\n\t\t\tforeach ( $wp_registered_widget_controls as $control ) {\n\t\t\t\tif ( $_GET['base'] === $control['id_base'] ) {\n\t\t\t\t\t$control_callback = $control['callback'];\n\t\t\t\t\t$multi_number = (int) $_GET['num'];\n\t\t\t\t\t$control['params'][0]['number'] = -1;\n\t\t\t\t\t$widget_id = $control['id'] = $control['id_base'] . '-' . $multi_number;\n\t\t\t\t\t$wp_registered_widget_controls[$control['id']] = $control;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( isset($wp_registered_widget_controls[$widget_id]) && !isset($control) ) {\n\t\t$control = $wp_registered_widget_controls[$widget_id];\n\t\t$control_callback = $control['callback'];\n\t} elseif ( !isset($wp_registered_widget_controls[$widget_id]) && isset($wp_registered_widgets[$widget_id]) ) {\n\t\t$name = esc_html( strip_tags($wp_registered_widgets[$widget_id]['name']) );\n\t}\n\n\tif ( !isset($name) )\n\t\t$name = esc_html( strip_tags($control['name']) );\n\n\tif ( !isset($sidebar) )\n\t\t$sidebar = isset($_GET['sidebar']) ? $_GET['sidebar'] : 'wp_inactive_widgets';\n\n\tif ( !isset($multi_number) )\n\t\t$multi_number = isset($control['params'][0]['number']) ? $control['params'][0]['number'] : '';\n\n\t$id_base = isset($control['id_base']) ? $control['id_base'] : $control['id'];\n\n\t// Show the widget form.\n\t$width = ' style=\"width:' . max($control['width'], 350) . 'px\"';\n\t$key = isset($_GET['key']) ? (int) $_GET['key'] : 0;\n\n\trequire_once( ABSPATH . 'wp-admin/admin-header.php' ); ?>\n\t<div class=\"wrap\">\n\t<h1><?php echo esc_html( $title ); ?></h1>\n\t<div class=\"editwidget\"<?php echo $width; ?>>\n\t<h2><?php printf( __( 'Widget %s' ), $name ); ?></h2>\n\n\t<form action=\"widgets.php\" method=\"post\">\n\t<div class=\"widget-inside\">\n<?php\n\tif ( is_callable( $control_callback ) )\n\t\tcall_user_func_array( $control_callback, $control['params'] );\n\telse\n\t\techo '<p>' . __('There are no options for this widget.') . \"</p>\\n\"; ?>\n\t</div>\n\n\t<p class=\"describe\"><?php _e('Select both the sidebar for this widget and the position of the widget in that sidebar.'); ?></p>\n\t<div class=\"widget-position\">\n\t<table class=\"widefat\"><thead><tr><th><?php _e('Sidebar'); ?></th><th><?php _e('Position'); ?></th></tr></thead><tbody>\n<?php\n\tforeach ( $wp_registered_sidebars as $sbname => $sbvalue ) {\n\t\techo \"\\t\\t<tr><td><label><input type='radio' name='sidebar' value='\" . esc_attr($sbname) . \"'\" . checked( $sbname, $sidebar, false ) . \" /> $sbvalue[name]</label></td><td>\";\n\t\tif ( 'wp_inactive_widgets' == $sbname || 'orphaned_widgets' == substr( $sbname, 0, 16 ) ) {\n\t\t\techo '&nbsp;';\n\t\t} else {\n\t\t\tif ( !isset($sidebars_widgets[$sbname]) || !is_array($sidebars_widgets[$sbname]) ) {\n\t\t\t\t$j = 1;\n\t\t\t\t$sidebars_widgets[$sbname] = array();\n\t\t\t} else {\n\t\t\t\t$j = count($sidebars_widgets[$sbname]);\n\t\t\t\tif ( isset($_GET['addnew']) || !in_array($widget_id, $sidebars_widgets[$sbname], true) )\n\t\t\t\t\t$j++;\n\t\t\t}\n\t\t\t$selected = '';\n\t\t\techo \"\\t\\t<select name='{$sbname}_position'>\\n\";\n\t\t\techo \"\\t\\t<option value=''>\" . __('&mdash; Select &mdash;') . \"</option>\\n\";\n\t\t\tfor ( $i = 1; $i <= $j; $i++ ) {\n\t\t\t\tif ( in_array($widget_id, $sidebars_widgets[$sbname], true) )\n\t\t\t\t\t$selected = selected( $i, $key + 1, false );\n\t\t\t\techo \"\\t\\t<option value='$i'$selected> $i </option>\\n\";\n\t\t\t}\n\t\t\techo \"\\t\\t</select>\\n\";\n\t\t}\n\t\techo \"</td></tr>\\n\";\n\t} ?>\n\t</tbody></table>\n\t</div>\n\n\t<div class=\"widget-control-actions\">\n<?php\n\tif ( isset($_GET['addnew']) ) { ?>\n\t<a href=\"widgets.php\" class=\"button alignleft\"><?php _e('Cancel'); ?></a>\n<?php\n\t} else {\n\t\tsubmit_button( __( 'Delete' ), 'alignleft', 'removewidget', false );\n\t}\n\tsubmit_button( __( 'Save Widget' ), 'primary alignright', 'savewidget', false ); ?>\n\t<input type=\"hidden\" name=\"widget-id\" class=\"widget-id\" value=\"<?php echo esc_attr($widget_id); ?>\" />\n\t<input type=\"hidden\" name=\"id_base\" class=\"id_base\" value=\"<?php echo esc_attr($id_base); ?>\" />\n\t<input type=\"hidden\" name=\"multi_number\" class=\"multi_number\" value=\"<?php echo esc_attr($multi_number); ?>\" />\n<?php\twp_nonce_field(\"save-delete-widget-$widget_id\"); ?>\n\t<br class=\"clear\" />\n\t</div>\n\t</form>\n\t</div>\n\t</div>\n<?php\n\trequire_once( ABSPATH . 'wp-admin/admin-footer.php' );\n\texit;\n}\n\n$messages = array(\n\t__('Changes saved.')\n);\n\n$errors = array(\n\t__('Error while saving.'),\n\t__('Error in displaying the widget settings form.')\n);\n\nrequire_once( ABSPATH . 'wp-admin/admin-header.php' ); ?>\n\n<div class=\"wrap\">\n<h1 class=\"wp-heading-inline\"><?php\necho esc_html( $title );\n?></h1>\n\n<?php\nif ( current_user_can( 'customize' ) ) {\n\tprintf(\n\t\t' <a class=\"page-title-action hide-if-no-customize\" href=\"%1$s\">%2$s</a>',\n\t\tesc_url( add_query_arg(\n\t\t\tarray(\n\t\t\t\tarray( 'autofocus' => array( 'panel' => 'widgets' ) ),\n\t\t\t\t'return' => urlencode( wp_unslash( $_SERVER['REQUEST_URI'] ) )\n\t\t\t),\n\t\t\tadmin_url( 'customize.php' )\n\t\t) ),\n\t\t__( 'Manage with Live Preview' )\n\t);\n}\n?>\n\n<hr class=\"wp-header-end\">\n\n<?php if ( isset($_GET['message']) && isset($messages[$_GET['message']]) ) { ?>\n<div id=\"message\" class=\"updated notice is-dismissible\"><p><?php echo $messages[$_GET['message']]; ?></p></div>\n<?php } ?>\n<?php if ( isset($_GET['error']) && isset($errors[$_GET['error']]) ) { ?>\n<div id=\"message\" class=\"error\"><p><?php echo $errors[$_GET['error']]; ?></p></div>\n<?php } ?>\n\n<?php\n/**\n * Fires before the Widgets administration page content loads.\n *\n * @since 3.0.0\n */\ndo_action( 'widgets_admin_page' ); ?>\n\n<div class=\"widget-liquid-left\">\n<div id=\"widgets-left\">\n\t<div id=\"available-widgets\" class=\"widgets-holder-wrap\">\n\t\t<div class=\"sidebar-name\">\n\t\t\t<div class=\"sidebar-name-arrow\"><br /></div>\n\t\t\t<h2><?php _e( 'Available Widgets' ); ?> <span id=\"removing-widget\"><?php _ex( 'Deactivate', 'removing-widget' ); ?> <span></span></span></h2>\n\t\t</div>\n\t\t<div class=\"widget-holder\">\n\t\t\t<div class=\"sidebar-description\">\n\t\t\t\t<p class=\"description\"><?php _e('To activate a widget drag it to a sidebar or click on it. To deactivate a widget and delete its settings, drag it back.'); ?></p>\n\t\t\t</div>\n\t\t\t<div id=\"widget-list\">\n\t\t\t\t<?php wp_list_widgets(); ?>\n\t\t\t</div>\n\t\t\t<br class='clear' />\n\t\t</div>\n\t\t<br class=\"clear\" />\n\t</div>\n\n<?php\n\n$theme_sidebars = array();\nforeach ( $wp_registered_sidebars as $sidebar => $registered_sidebar ) {\n\tif ( false !== strpos( $registered_sidebar['class'], 'inactive-sidebar' ) || 'orphaned_widgets' == substr( $sidebar, 0, 16 ) ) {\n\t\t$wrap_class = 'widgets-holder-wrap';\n\t\tif ( !empty( $registered_sidebar['class'] ) )\n\t\t\t$wrap_class .= ' ' . $registered_sidebar['class'];\n\n\t\t$is_inactive_widgets = 'wp_inactive_widgets' == $registered_sidebar['id'];\n\t\t?>\n\t\t<div class=\"<?php echo esc_attr( $wrap_class ); ?>\">\n\t\t\t<div class=\"widget-holder inactive\">\n\t\t\t\t<?php wp_list_widget_controls( $registered_sidebar['id'], $registered_sidebar['name'] ); ?>\n\n\t\t\t\t<?php if ( $is_inactive_widgets ) { ?>\n\t\t\t\t<div class=\"remove-inactive-widgets\">\n\t\t\t\t\t<form action=\"\" method=\"post\">\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t$attributes = array( 'id' => 'inactive-widgets-control-remove' );\n\n\t\t\t\t\t\t\tif ( empty($sidebars_widgets['wp_inactive_widgets']) ) {\n\t\t\t\t\t\t\t\t$attributes['disabled'] = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsubmit_button( __( 'Clear Inactive Widgets' ), 'delete', 'removeinactivewidgets', false, $attributes );\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<span class=\"spinner\"></span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<?php wp_nonce_field( 'remove-inactive-widgets', '_wpnonce_remove_inactive_widgets' ); ?>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<?php } ?>\n\t\t\t</div>\n\t\t\t<?php if ( $is_inactive_widgets ) { ?>\n\t\t\t<p class=\"description\"><?php _e( 'This will clear all items from the inactive widgets list. You will not be able to restore any customizations.' ); ?></p>\n\t\t\t<?php } ?>\n\t\t</div>\n\t\t<?php\n\n\t} else {\n\t\t$theme_sidebars[$sidebar] = $registered_sidebar;\n\t}\n}\n\n?>\n</div>\n</div>\n<?php\n\n$i = $split = 0;\n$single_sidebar_class = '';\n$sidebars_count = count( $theme_sidebars );\n\nif ( $sidebars_count > 1 ) {\n\t$split = ceil( $sidebars_count / 2 );\n} else {\n\t$single_sidebar_class = ' single-sidebar';\n}\n\n?>\n<div class=\"widget-liquid-right\">\n<div id=\"widgets-right\" class=\"wp-clearfix<?php echo $single_sidebar_class; ?>\">\n<div class=\"sidebars-column-1\">\n<?php\n\nforeach ( $theme_sidebars as $sidebar => $registered_sidebar ) {\n\t$wrap_class = 'widgets-holder-wrap';\n\tif ( !empty( $registered_sidebar['class'] ) )\n\t\t$wrap_class .= ' sidebar-' . $registered_sidebar['class'];\n\n\tif ( $i > 0 )\n\t\t$wrap_class .= ' closed';\n\n\tif ( $split && $i == $split ) {\n\t\t?>\n\t\t</div><div class=\"sidebars-column-2\">\n\t\t<?php\n\t}\n\n\t?>\n\t<div class=\"<?php echo esc_attr( $wrap_class ); ?>\">\n\t\t<?php wp_list_widget_controls( $sidebar, $registered_sidebar['name'] ); // Show the control forms for each of the widgets in this sidebar ?>\n\t</div>\n\t<?php\n\n\t$i++;\n}\n\n?>\n</div>\n</div>\n</div>\n<form method=\"post\">\n<?php wp_nonce_field( 'save-sidebar-widgets', '_wpnonce_widgets', false ); ?>\n</form>\n<br class=\"clear\" />\n</div>\n\n<div class=\"widgets-chooser\">\n\t<ul class=\"widgets-chooser-sidebars\"></ul>\n\t<div class=\"widgets-chooser-actions\">\n\t\t<button class=\"button widgets-chooser-cancel\"><?php _e( 'Cancel' ); ?></button>\n\t\t<button class=\"button button-primary widgets-chooser-add\"><?php _e( 'Add Widget' ); ?></button>\n\t</div>\n</div>\n\n<?php\n\n/**\n * Fires after the available widgets and sidebars have loaded, before the admin footer.\n *\n * @since 2.2.0\n */\ndo_action( 'sidebar_admin_page' );\nrequire_once( ABSPATH . 'wp-admin/admin-footer.php' );\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-39759';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * Screen API: WP_Screen class\n *\n * @package WordPress\n * @subpackage Administration\n * @since 4.4.0\n */\n\n/**\n * Core class used to implement an admin screen API.\n *\n * @since 3.3.0\n */\nfinal class WP_Screen {\n\t/**\n\t * Any action associated with the screen. 'add' for *-add.php and *-new.php screens. Empty otherwise.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $action;\n\n\t/**\n\t * The base type of the screen. This is typically the same as $id but with any post types and taxonomies stripped.\n\t * For example, for an $id of 'edit-post' the base is 'edit'.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $base;\n\n\t/**\n\t * The number of columns to display. Access with get_columns().\n\t *\n\t * @since 3.4.0\n\t * @var int\n\t * @access private\n\t */\n\tprivate $columns = 0;\n\n\t/**\n\t * The unique ID of the screen.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $id;\n\n\t/**\n\t * Which admin the screen is in. network | user | site | false\n\t *\n\t * @since 3.5.0\n\t * @var string\n\t * @access protected\n\t */\n\tprotected $in_admin;\n\n\t/**\n\t * Whether the screen is in the network admin.\n\t *\n\t * Deprecated. Use in_admin() instead.\n\t *\n\t * @since 3.3.0\n\t * @deprecated 3.5.0\n\t * @var bool\n\t * @access public\n\t */\n\tpublic $is_network;\n\n\t/**\n\t * Whether the screen is in the user admin.\n\t *\n\t * Deprecated. Use in_admin() instead.\n\t *\n\t * @since 3.3.0\n\t * @deprecated 3.5.0\n\t * @var bool\n\t * @access public\n\t */\n\tpublic $is_user;\n\n\t/**\n\t * The base menu parent.\n\t * This is derived from $parent_file by removing the query string and any .php extension.\n\t * $parent_file values of 'edit.php?post_type=page' and 'edit.php?post_type=post' have a $parent_base of 'edit'.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $parent_base;\n\n\t/**\n\t * The parent_file for the screen per the admin menu system.\n\t * Some $parent_file values are 'edit.php?post_type=page', 'edit.php', and 'options-general.php'.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $parent_file;\n\n\t/**\n\t * The post type associated with the screen, if any.\n\t * The 'edit.php?post_type=page' screen has a post type of 'page'.\n\t * The 'edit-tags.php?taxonomy=$taxonomy&post_type=page' screen has a post type of 'page'.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $post_type;\n\n\t/**\n\t * The taxonomy associated with the screen, if any.\n\t * The 'edit-tags.php?taxonomy=category' screen has a taxonomy of 'category'.\n\t * @since 3.3.0\n\t * @var string\n\t * @access public\n\t */\n\tpublic $taxonomy;\n\n\t/**\n\t * The help tab data associated with the screen, if any.\n\t *\n\t * @since 3.3.0\n\t * @var array\n\t * @access private\n\t */\n\tprivate $_help_tabs = array();\n\n\t/**\n\t * The help sidebar data associated with screen, if any.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access private\n\t */\n\tprivate $_help_sidebar = '';\n\n \t/**\n\t * The accessible hidden headings and text associated with the screen, if any.\n\t *\n\t * @since 4.4.0\n\t * @access private\n\t * @var array\n\t */\n\tprivate $_screen_reader_content = array();\n\n\t/**\n\t * Stores old string-based help.\n\t *\n\t * @static\n\t * @access private\n\t *\n\t * @var array\n\t */\n\tprivate static $_old_compat_help = array();\n\n\t/**\n\t * The screen options associated with screen, if any.\n\t *\n\t * @since 3.3.0\n\t * @var array\n\t * @access private\n\t */\n\tprivate $_options = array();\n\n\t/**\n\t * The screen object registry.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @static\n\t * @access private\n\t *\n\t * @var array\n\t */\n\tprivate static $_registry = array();\n\n\t/**\n\t * Stores the result of the public show_screen_options function.\n\t *\n\t * @since 3.3.0\n\t * @var bool\n\t * @access private\n\t */\n\tprivate $_show_screen_options;\n\n\t/**\n\t * Stores the 'screen_settings' section of screen options.\n\t *\n\t * @since 3.3.0\n\t * @var string\n\t * @access private\n\t */\n\tprivate $_screen_settings;\n\n\t/**\n\t * Fetches a screen object.\n\t *\n\t * @since 3.3.0\n\t * @access public\n\t *\n\t * @static\n\t *\n\t * @global string $hook_suffix\n\t *\n\t * @param string|WP_Screen $hook_name Optional. The hook name (also known as the hook suffix) used to determine the screen.\n\t * \t                                  Defaults to the current $hook_suffix global.\n\t * @return WP_Screen Screen object.\n\t */\n\tpublic static function get( $hook_name = '' ) {\n\t\tif ( $hook_name instanceof WP_Screen ) {\n\t\t\treturn $hook_name;\n\t\t}\n\n\t\t$post_type = $taxonomy = null;\n\t\t$in_admin = false;\n\t\t$action = '';\n\n\t\tif ( $hook_name )\n\t\t\t$id = $hook_name;\n\t\telse\n\t\t\t$id = $GLOBALS['hook_suffix'];\n\n\t\t// For those pesky meta boxes.\n\t\tif ( $hook_name && post_type_exists( $hook_name ) ) {\n\t\t\t$post_type = $id;\n\t\t\t$id = 'post'; // changes later. ends up being $base.\n\t\t} else {\n\t\t\tif ( '.php' == substr( $id, -4 ) )\n\t\t\t\t$id = substr( $id, 0, -4 );\n\n\t\t\tif ( 'post-new' == $id || 'link-add' == $id || 'media-new' == $id || 'user-new' == $id ) {\n\t\t\t\t$id = substr( $id, 0, -4 );\n\t\t\t\t$action = 'add';\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $post_type && $hook_name ) {\n\t\t\tif ( '-network' == substr( $id, -8 ) ) {\n\t\t\t\t$id = substr( $id, 0, -8 );\n\t\t\t\t$in_admin = 'network';\n\t\t\t} elseif ( '-user' == substr( $id, -5 ) ) {\n\t\t\t\t$id = substr( $id, 0, -5 );\n\t\t\t\t$in_admin = 'user';\n\t\t\t}\n\n\t\t\t$id = sanitize_key( $id );\n\t\t\tif ( 'edit-comments' != $id && 'edit-tags' != $id && 'edit-' == substr( $id, 0, 5 ) ) {\n\t\t\t\t$maybe = substr( $id, 5 );\n\t\t\t\tif ( taxonomy_exists( $maybe ) ) {\n\t\t\t\t\t$id = 'edit-tags';\n\t\t\t\t\t$taxonomy = $maybe;\n\t\t\t\t} elseif ( post_type_exists( $maybe ) ) {\n\t\t\t\t\t$id = 'edit';\n\t\t\t\t\t$post_type = $maybe;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! $in_admin )\n\t\t\t\t$in_admin = 'site';\n\t\t} else {\n\t\t\tif ( defined( 'WP_NETWORK_ADMIN' ) && WP_NETWORK_ADMIN )\n\t\t\t\t$in_admin = 'network';\n\t\t\telseif ( defined( 'WP_USER_ADMIN' ) && WP_USER_ADMIN )\n\t\t\t\t$in_admin = 'user';\n\t\t\telse\n\t\t\t\t$in_admin = 'site';\n\t\t}\n\n\t\tif ( 'index' == $id )\n\t\t\t$id = 'dashboard';\n\t\telseif ( 'front' == $id )\n\t\t\t$in_admin = false;\n\n\t\t$base = $id;\n\n\t\t// If this is the current screen, see if we can be more accurate for post types and taxonomies.\n\t\tif ( ! $hook_name ) {\n\t\t\tif ( isset( $_REQUEST['post_type'] ) )\n\t\t\t\t$post_type = post_type_exists( $_REQUEST['post_type'] ) ? $_REQUEST['post_type'] : false;\n\t\t\tif ( isset( $_REQUEST['taxonomy'] ) )\n\t\t\t\t$taxonomy = taxonomy_exists( $_REQUEST['taxonomy'] ) ? $_REQUEST['taxonomy'] : false;\n\n\t\t\tswitch ( $base ) {\n\t\t\t\tcase 'post' :\n\t\t\t\t\tif ( isset( $_GET['post'] ) )\n\t\t\t\t\t\t$post_id = (int) $_GET['post'];\n\t\t\t\t\telseif ( isset( $_POST['post_ID'] ) )\n\t\t\t\t\t\t$post_id = (int) $_POST['post_ID'];\n\t\t\t\t\telse\n\t\t\t\t\t\t$post_id = 0;\n\n\t\t\t\t\tif ( $post_id ) {\n\t\t\t\t\t\t$post = get_post( $post_id );\n\t\t\t\t\t\tif ( $post )\n\t\t\t\t\t\t\t$post_type = $post->post_type;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'edit-tags' :\n\t\t\t\tcase 'term' :\n\t\t\t\t\tif ( null === $post_type && is_object_in_taxonomy( 'post', $taxonomy ? $taxonomy : 'post_tag' ) )\n\t\t\t\t\t\t$post_type = 'post';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tswitch ( $base ) {\n\t\t\tcase 'post' :\n\t\t\t\tif ( null === $post_type )\n\t\t\t\t\t$post_type = 'post';\n\t\t\t\t$id = $post_type;\n\t\t\t\tbreak;\n\t\t\tcase 'edit' :\n\t\t\t\tif ( null === $post_type )\n\t\t\t\t\t$post_type = 'post';\n\t\t\t\t$id .= '-' . $post_type;\n\t\t\t\tbreak;\n\t\t\tcase 'edit-tags' :\n\t\t\tcase 'term' :\n\t\t\t\tif ( null === $taxonomy )\n\t\t\t\t\t$taxonomy = 'post_tag';\n\t\t\t\t// The edit-tags ID does not contain the post type. Look for it in the request.\n\t\t\t\tif ( null === $post_type ) {\n\t\t\t\t\t$post_type = 'post';\n\t\t\t\t\tif ( isset( $_REQUEST['post_type'] ) && post_type_exists( $_REQUEST['post_type'] ) )\n\t\t\t\t\t\t$post_type = $_REQUEST['post_type'];\n\t\t\t\t}\n\n\t\t\t\t$id = 'edit-' . $taxonomy;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ( 'network' == $in_admin ) {\n\t\t\t$id   .= '-network';\n\t\t\t$base .= '-network';\n\t\t} elseif ( 'user' == $in_admin ) {\n\t\t\t$id   .= '-user';\n\t\t\t$base .= '-user';\n\t\t}\n\n\t\tif ( isset( self::$_registry[ $id ] ) ) {\n\t\t\t$screen = self::$_registry[ $id ];\n\t\t\tif ( $screen === get_current_screen() )\n\t\t\t\treturn $screen;\n\t\t} else {\n\t\t\t$screen = new WP_Screen();\n\t\t\t$screen->id     = $id;\n\t\t}\n\n\t\t$screen->base       = $base;\n\t\t$screen->action     = $action;\n\t\t$screen->post_type  = (string) $post_type;\n\t\t$screen->taxonomy   = (string) $taxonomy;\n\t\t$screen->is_user    = ( 'user' == $in_admin );\n\t\t$screen->is_network = ( 'network' == $in_admin );\n\t\t$screen->in_admin   = $in_admin;\n\n\t\tself::$_registry[ $id ] = $screen;\n\n\t\treturn $screen;\n\t}\n\n\t/**\n\t * Makes the screen object the current screen.\n\t *\n\t * @see set_current_screen()\n\t * @since 3.3.0\n\t *\n\t * @global WP_Screen $current_screen\n\t * @global string    $taxnow\n\t * @global string    $typenow\n\t */\n\tpublic function set_current_screen() {\n\t\tglobal $current_screen, $taxnow, $typenow;\n\t\t$current_screen = $this;\n\t\t$taxnow = $this->taxonomy;\n\t\t$typenow = $this->post_type;\n\n\t\t/**\n\t\t * Fires after the current screen has been set.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param WP_Screen $current_screen Current WP_Screen object.\n\t\t */\n\t\tdo_action( 'current_screen', $current_screen );\n\t}\n\n\t/**\n\t * Constructor\n\t *\n\t * @since 3.3.0\n\t * @access private\n\t */\n\tprivate function __construct() {}\n\n\t/**\n\t * Indicates whether the screen is in a particular admin\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param string $admin The admin to check against (network | user | site).\n\t *                      If empty any of the three admins will result in true.\n\t * @return bool True if the screen is in the indicated admin, false otherwise.\n\t */\n\tpublic function in_admin( $admin = null ) {\n\t\tif ( empty( $admin ) )\n\t\t\treturn (bool) $this->in_admin;\n\n\t\treturn ( $admin == $this->in_admin );\n\t}\n\n\t/**\n\t * Sets the old string-based contextual help for the screen for backward compatibility.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @static\n\t *\n\t * @param WP_Screen $screen A screen object.\n\t * @param string $help Help text.\n\t */\n\tpublic static function add_old_compat_help( $screen, $help ) {\n\t\tself::$_old_compat_help[ $screen->id ] = $help;\n\t}\n\n\t/**\n\t * Set the parent information for the screen.\n\t * This is called in admin-header.php after the menu parent for the screen has been determined.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $parent_file The parent file of the screen. Typically the $parent_file global.\n\t */\n\tpublic function set_parentage( $parent_file ) {\n\t\t$this->parent_file = $parent_file;\n\t\tlist( $this->parent_base ) = explode( '?', $parent_file );\n\t\t$this->parent_base = str_replace( '.php', '', $this->parent_base );\n\t}\n\n\t/**\n\t * Adds an option for the screen.\n\t * Call this in template files after admin.php is loaded and before admin-header.php is loaded to add screen options.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $option Option ID\n\t * @param mixed $args Option-dependent arguments.\n\t */\n\tpublic function add_option( $option, $args = array() ) {\n\t\t$this->_options[ $option ] = $args;\n\t}\n\n\t/**\n\t * Remove an option from the screen.\n\t *\n\t * @since 3.8.0\n\t *\n\t * @param string $option Option ID.\n\t */\n\tpublic function remove_option( $option ) {\n\t\tunset( $this->_options[ $option ] );\n\t}\n\n\t/**\n\t * Remove all options from the screen.\n\t *\n\t * @since 3.8.0\n\t */\n\tpublic function remove_options() {\n\t\t$this->_options = array();\n\t}\n\n\t/**\n\t * Get the options registered for the screen.\n\t *\n\t * @since 3.8.0\n\t *\n\t * @return array Options with arguments.\n\t */\n\tpublic function get_options() {\n\t\treturn $this->_options;\n\t}\n\n\t/**\n\t * Gets the arguments for an option for the screen.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $option Option name.\n\t * @param string $key    Optional. Specific array key for when the option is an array.\n\t *                       Default false.\n\t * @return string The option value if set, null otherwise.\n\t */\n\tpublic function get_option( $option, $key = false ) {\n\t\tif ( ! isset( $this->_options[ $option ] ) )\n\t\t\treturn null;\n\t\tif ( $key ) {\n\t\t\tif ( isset( $this->_options[ $option ][ $key ] ) )\n\t\t\t\treturn $this->_options[ $option ][ $key ];\n\t\t\treturn null;\n\t\t}\n\t\treturn $this->_options[ $option ];\n\t}\n\n\t/**\n\t * Gets the help tabs registered for the screen.\n\t *\n\t * @since 3.4.0\n\t * @since 4.4.0 Help tabs are ordered by their priority.\n\t *\n\t * @return array Help tabs with arguments.\n\t */\n\tpublic function get_help_tabs() {\n\t\t$help_tabs = $this->_help_tabs;\n\n\t\t$priorities = array();\n\t\tforeach ( $help_tabs as $help_tab ) {\n\t\t\tif ( isset( $priorities[ $help_tab['priority'] ] ) ) {\n\t\t\t\t$priorities[ $help_tab['priority'] ][] = $help_tab;\n\t\t\t} else {\n\t\t\t\t$priorities[ $help_tab['priority'] ] = array( $help_tab );\n\t\t\t}\n\t\t}\n\n\t\tksort( $priorities );\n\n\t\t$sorted = array();\n\t\tforeach ( $priorities as $list ) {\n\t\t\tforeach ( $list as $tab ) {\n\t\t\t\t$sorted[ $tab['id'] ] = $tab;\n\t\t\t}\n\t\t}\n\n\t\treturn $sorted;\n\t}\n\n\t/**\n\t * Gets the arguments for a help tab.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $id Help Tab ID.\n\t * @return array Help tab arguments.\n\t */\n\tpublic function get_help_tab( $id ) {\n\t\tif ( ! isset( $this->_help_tabs[ $id ] ) )\n\t\t\treturn null;\n\t\treturn $this->_help_tabs[ $id ];\n\t}\n\n\t/**\n\t * Add a help tab to the contextual help for the screen.\n\t * Call this on the load-$pagenow hook for the relevant screen.\n\t *\n\t * @since 3.3.0\n\t * @since 4.4.0 The `$priority` argument was added.\n\t *\n\t * @param array $args {\n\t *     Array of arguments used to display the help tab.\n\t *\n\t *     @type string $title    Title for the tab. Default false.\n\t *     @type string $id       Tab ID. Must be HTML-safe. Default false.\n\t *     @type string $content  Optional. Help tab content in plain text or HTML. Default empty string.\n\t *     @type string $callback Optional. A callback to generate the tab content. Default false.\n\t *     @type int    $priority Optional. The priority of the tab, used for ordering. Default 10.\n\t * }\n\t */\n\tpublic function add_help_tab( $args ) {\n\t\t$defaults = array(\n\t\t\t'title'    => false,\n\t\t\t'id'       => false,\n\t\t\t'content'  => '',\n\t\t\t'callback' => false,\n\t\t\t'priority' => 10,\n\t\t);\n\t\t$args = wp_parse_args( $args, $defaults );\n\n\t\t$args['id'] = sanitize_html_class( $args['id'] );\n\n\t\t// Ensure we have an ID and title.\n\t\tif ( ! $args['id'] || ! $args['title'] )\n\t\t\treturn;\n\n\t\t// Allows for overriding an existing tab with that ID.\n\t\t$this->_help_tabs[ $args['id'] ] = $args;\n\t}\n\n\t/**\n\t * Removes a help tab from the contextual help for the screen.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $id The help tab ID.\n\t */\n\tpublic function remove_help_tab( $id ) {\n\t\tunset( $this->_help_tabs[ $id ] );\n\t}\n\n\t/**\n\t * Removes all help tabs from the contextual help for the screen.\n\t *\n\t * @since 3.3.0\n\t */\n\tpublic function remove_help_tabs() {\n\t\t$this->_help_tabs = array();\n\t}\n\n\t/**\n\t * Gets the content from a contextual help sidebar.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return string Contents of the help sidebar.\n\t */\n\tpublic function get_help_sidebar() {\n\t\treturn $this->_help_sidebar;\n\t}\n\n\t/**\n\t * Add a sidebar to the contextual help for the screen.\n\t * Call this in template files after admin.php is loaded and before admin-header.php is loaded to add a sidebar to the contextual help.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $content Sidebar content in plain text or HTML.\n\t */\n\tpublic function set_help_sidebar( $content ) {\n\t\t$this->_help_sidebar = $content;\n\t}\n\n\t/**\n\t * Gets the number of layout columns the user has selected.\n\t *\n\t * The layout_columns option controls the max number and default number of\n\t * columns. This method returns the number of columns within that range selected\n\t * by the user via Screen Options. If no selection has been made, the default\n\t * provisioned in layout_columns is returned. If the screen does not support\n\t * selecting the number of layout columns, 0 is returned.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @return int Number of columns to display.\n\t */\n\tpublic function get_columns() {\n\t\treturn $this->columns;\n\t}\n\n \t/**\n\t * Get the accessible hidden headings and text used in the screen.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @see set_screen_reader_content() For more information on the array format.\n\t *\n\t * @return array An associative array of screen reader text strings.\n\t */\n\tpublic function get_screen_reader_content() {\n\t\treturn $this->_screen_reader_content;\n\t}\n\n\t/**\n\t * Get a screen reader text string.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $key Screen reader text array named key.\n\t * @return string Screen reader text string.\n\t */\n\tpublic function get_screen_reader_text( $key ) {\n\t\tif ( ! isset( $this->_screen_reader_content[ $key ] ) ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn $this->_screen_reader_content[ $key ];\n\t}\n\n\t/**\n\t * Add accessible hidden headings and text for the screen.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array $content {\n\t *     An associative array of screen reader text strings.\n\t *\n\t *     @type string $heading_views      Screen reader text for the filter links heading.\n\t *                                      Default 'Filter items list'.\n\t *     @type string $heading_pagination Screen reader text for the pagination heading.\n\t *                                      Default 'Items list navigation'.\n\t *     @type string $heading_list       Screen reader text for the items list heading.\n\t *                                      Default 'Items list'.\n\t * }\n\t */\n\tpublic function set_screen_reader_content( $content = array() ) {\n\t\t$defaults = array(\n\t\t\t'heading_views'      => __( 'Filter items list' ),\n\t\t\t'heading_pagination' => __( 'Items list navigation' ),\n\t\t\t'heading_list'       => __( 'Items list' ),\n\t\t);\n\t\t$content = wp_parse_args( $content, $defaults );\n\n\t\t$this->_screen_reader_content = $content;\n\t}\n\n\t/**\n\t * Remove all the accessible hidden headings and text for the screen.\n\t *\n\t * @since 4.4.0\n\t */\n\tpublic function remove_screen_reader_content() {\n\t\t$this->_screen_reader_content = array();\n\t}\n\n\t/**\n\t * Render the screen's help section.\n\t *\n\t * This will trigger the deprecated filters for backward compatibility.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @global string $screen_layout_columns\n\t */\n\tpublic function render_screen_meta() {\n\n\t\t/**\n\t\t * Filters the legacy contextual help list.\n\t\t *\n\t\t * @since 2.7.0\n\t\t * @deprecated 3.3.0 Use get_current_screen()->add_help_tab() or\n\t\t *                   get_current_screen()->remove_help_tab() instead.\n\t\t *\n\t\t * @param array     $old_compat_help Old contextual help.\n\t\t * @param WP_Screen $this            Current WP_Screen instance.\n\t\t */\n\t\tself::$_old_compat_help = apply_filters( 'contextual_help_list', self::$_old_compat_help, $this );\n\n\t\t$old_help = isset( self::$_old_compat_help[ $this->id ] ) ? self::$_old_compat_help[ $this->id ] : '';\n\n\t\t/**\n\t\t * Filters the legacy contextual help text.\n\t\t *\n\t\t * @since 2.7.0\n\t\t * @deprecated 3.3.0 Use get_current_screen()->add_help_tab() or\n\t\t *                   get_current_screen()->remove_help_tab() instead.\n\t\t *\n\t\t * @param string    $old_help  Help text that appears on the screen.\n\t\t * @param string    $screen_id Screen ID.\n\t\t * @param WP_Screen $this      Current WP_Screen instance.\n\t\t *\n\t\t */\n\t\t$old_help = apply_filters( 'contextual_help', $old_help, $this->id, $this );\n\n\t\t// Default help only if there is no old-style block of text and no new-style help tabs.\n\t\tif ( empty( $old_help ) && ! $this->get_help_tabs() ) {\n\n\t\t\t/**\n\t\t\t * Filters the default legacy contextual help text.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t * @deprecated 3.3.0 Use get_current_screen()->add_help_tab() or\n\t\t\t *                   get_current_screen()->remove_help_tab() instead.\n\t\t\t *\n\t\t\t * @param string $old_help_default Default contextual help text.\n\t\t\t */\n\t\t\t$default_help = apply_filters( 'default_contextual_help', '' );\n\t\t\tif ( $default_help )\n\t\t\t\t$old_help = '<p>' . $default_help . '</p>';\n\t\t}\n\n\t\tif ( $old_help ) {\n\t\t\t$this->add_help_tab( array(\n\t\t\t\t'id'      => 'old-contextual-help',\n\t\t\t\t'title'   => __('Overview'),\n\t\t\t\t'content' => $old_help,\n\t\t\t) );\n\t\t}\n\n\t\t$help_sidebar = $this->get_help_sidebar();\n\n\t\t$help_class = 'hidden';\n\t\tif ( ! $help_sidebar )\n\t\t\t$help_class .= ' no-sidebar';\n\n\t\t// Time to render!\n\t\t?>\n\t\t<div id=\"screen-meta\" class=\"metabox-prefs\">\n\n\t\t\t<div id=\"contextual-help-wrap\" class=\"<?php echo esc_attr( $help_class ); ?>\" tabindex=\"-1\" aria-label=\"<?php esc_attr_e('Contextual Help Tab'); ?>\">\n\t\t\t\t<div id=\"contextual-help-back\"></div>\n\t\t\t\t<div id=\"contextual-help-columns\">\n\t\t\t\t\t<div class=\"contextual-help-tabs\">\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t$class = ' class=\"active\"';\n\t\t\t\t\t\tforeach ( $this->get_help_tabs() as $tab ) :\n\t\t\t\t\t\t\t$link_id  = \"tab-link-{$tab['id']}\";\n\t\t\t\t\t\t\t$panel_id = \"tab-panel-{$tab['id']}\";\n\t\t\t\t\t\t\t?>\n\n\t\t\t\t\t\t\t<li id=\"<?php echo esc_attr( $link_id ); ?>\"<?php echo $class; ?>>\n\t\t\t\t\t\t\t\t<a href=\"<?php echo esc_url( \"#$panel_id\" ); ?>\" aria-controls=\"<?php echo esc_attr( $panel_id ); ?>\">\n\t\t\t\t\t\t\t\t\t<?php echo esc_html( $tab['title'] ); ?>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t$class = '';\n\t\t\t\t\t\tendforeach;\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<?php if ( $help_sidebar ) : ?>\n\t\t\t\t\t<div class=\"contextual-help-sidebar\">\n\t\t\t\t\t\t<?php echo $help_sidebar; ?>\n\t\t\t\t\t</div>\n\t\t\t\t\t<?php endif; ?>\n\n\t\t\t\t\t<div class=\"contextual-help-tabs-wrap\">\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t$classes = 'help-tab-content active';\n\t\t\t\t\t\tforeach ( $this->get_help_tabs() as $tab ):\n\t\t\t\t\t\t\t$panel_id = \"tab-panel-{$tab['id']}\";\n\t\t\t\t\t\t\t?>\n\n\t\t\t\t\t\t\t<div id=\"<?php echo esc_attr( $panel_id ); ?>\" class=\"<?php echo $classes; ?>\">\n\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t// Print tab content.\n\t\t\t\t\t\t\t\techo $tab['content'];\n\n\t\t\t\t\t\t\t\t// If it exists, fire tab callback.\n\t\t\t\t\t\t\t\tif ( ! empty( $tab['callback'] ) )\n\t\t\t\t\t\t\t\t\tcall_user_func_array( $tab['callback'], array( $this, $tab ) );\n\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t$classes = 'help-tab-content';\n\t\t\t\t\t\tendforeach;\n\t\t\t\t\t\t?>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t<?php\n\t\t// Setup layout columns\n\n\t\t/**\n\t\t * Filters the array of screen layout columns.\n\t\t *\n\t\t * This hook provides back-compat for plugins using the back-compat\n\t\t * Filters instead of add_screen_option().\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param array     $empty_columns Empty array.\n\t\t * @param string    $screen_id     Screen ID.\n\t\t * @param WP_Screen $this          Current WP_Screen instance.\n\t\t */\n\t\t$columns = apply_filters( 'screen_layout_columns', array(), $this->id, $this );\n\n\t\tif ( ! empty( $columns ) && isset( $columns[ $this->id ] ) )\n\t\t\t$this->add_option( 'layout_columns', array('max' => $columns[ $this->id ] ) );\n\n\t\tif ( $this->get_option( 'layout_columns' ) ) {\n\t\t\t$this->columns = (int) get_user_option(\"screen_layout_$this->id\");\n\n\t\t\tif ( ! $this->columns && $this->get_option( 'layout_columns', 'default' ) )\n\t\t\t\t$this->columns = $this->get_option( 'layout_columns', 'default' );\n\t\t}\n\t\t$GLOBALS[ 'screen_layout_columns' ] = $this->columns; // Set the global for back-compat.\n\n\t\t// Add screen options\n\t\tif ( $this->show_screen_options() )\n\t\t\t$this->render_screen_options();\n\t\t?>\n\t\t</div>\n\t\t<?php\n\t\tif ( ! $this->get_help_tabs() && ! $this->show_screen_options() )\n\t\t\treturn;\n\t\t?>\n\t\t<div id=\"screen-meta-links\">\n\t\t<?php if ( $this->get_help_tabs() ) : ?>\n\t\t\t<div id=\"contextual-help-link-wrap\" class=\"hide-if-no-js screen-meta-toggle\">\n\t\t\t<button type=\"button\" id=\"contextual-help-link\" class=\"button show-settings\" aria-controls=\"contextual-help-wrap\" aria-expanded=\"false\"><?php _e( 'Help' ); ?></button>\n\t\t\t</div>\n\t\t<?php endif;\n\t\tif ( $this->show_screen_options() ) : ?>\n\t\t\t<div id=\"screen-options-link-wrap\" class=\"hide-if-no-js screen-meta-toggle\">\n\t\t\t<button type=\"button\" id=\"show-settings-link\" class=\"button show-settings\" aria-controls=\"screen-options-wrap\" aria-expanded=\"false\"><?php _e( 'Screen Options' ); ?></button>\n\t\t\t</div>\n\t\t<?php endif; ?>\n\t\t</div>\n\t\t<?php\n\t}\n\n\t/**\n\t *\n\t * @global array $wp_meta_boxes\n\t *\n\t * @return bool\n\t */\n\tpublic function show_screen_options() {\n\t\tglobal $wp_meta_boxes;\n\n\t\tif ( is_bool( $this->_show_screen_options ) )\n\t\t\treturn $this->_show_screen_options;\n\n\t\t$columns = get_column_headers( $this );\n\n\t\t$show_screen = ! empty( $wp_meta_boxes[ $this->id ] ) || $columns || $this->get_option( 'per_page' );\n\n\t\tswitch ( $this->base ) {\n\t\t\tcase 'widgets':\n\t\t\t\t$nonce = wp_create_nonce( 'widgets-access' );\n\t\t\t\t$this->_screen_settings = '<p><a id=\"access-on\" href=\"widgets.php?widgets-access=on&_wpnonce=' . urlencode( $nonce ) . '\">' . __('Enable accessibility mode') . '</a><a id=\"access-off\" href=\"widgets.php?widgets-access=off&_wpnonce=' . urlencode( $nonce ) . '\">' . __('Disable accessibility mode') . \"</a></p>\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 'post' :\n\t\t\t\t$expand = '<fieldset class=\"editor-expand hidden\"><legend>' . __( 'Additional settings' ) . '</legend><label for=\"editor-expand-toggle\">';\n\t\t\t\t$expand .= '<input type=\"checkbox\" id=\"editor-expand-toggle\"' . checked( get_user_setting( 'editor_expand', 'on' ), 'on', false ) . ' />';\n\t\t\t\t$expand .= __( 'Enable full-height editor and distraction-free functionality.' ) . '</label></fieldset>';\n\t\t\t\t$this->_screen_settings = $expand;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->_screen_settings = '';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t/**\n\t\t * Filters the screen settings text displayed in the Screen Options tab.\n\t\t *\n\t\t * This filter is currently only used on the Widgets screen to enable\n\t\t * accessibility mode.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param string    $screen_settings Screen settings.\n\t\t * @param WP_Screen $this            WP_Screen object.\n\t\t */\n\t\t$this->_screen_settings = apply_filters( 'screen_settings', $this->_screen_settings, $this );\n\n\t\tif ( $this->_screen_settings || $this->_options )\n\t\t\t$show_screen = true;\n\n\t\t/**\n\t\t * Filters whether to show the Screen Options tab.\n\t\t *\n\t\t * @since 3.2.0\n\t\t *\n\t\t * @param bool      $show_screen Whether to show Screen Options tab.\n\t\t *                               Default true.\n\t\t * @param WP_Screen $this        Current WP_Screen instance.\n\t\t */\n\t\t$this->_show_screen_options = apply_filters( 'screen_options_show_screen', $show_screen, $this );\n\t\treturn $this->_show_screen_options;\n\t}\n\n\t/**\n\t * Render the screen options tab.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param array $options {\n\t *     @type bool $wrap  Whether the screen-options-wrap div will be included. Defaults to true.\n\t * }\n\t */\n\tpublic function render_screen_options( $options = array() ) {\n\t\t$options = wp_parse_args( $options, array(\n\t\t\t'wrap' => true,\n\t\t) );\n\n\t\t$wrapper_start = $wrapper_end = $form_start = $form_end = '';\n\n\t\t// Output optional wrapper.\n\t\tif ( $options['wrap'] ) {\n\t\t\t$wrapper_start = '<div id=\"screen-options-wrap\" class=\"hidden\" tabindex=\"-1\" aria-label=\"' . esc_attr__( 'Screen Options Tab' ) . '\">';\n\t\t\t$wrapper_end = '</div>';\n\t\t}\n\n\t\t// Don't output the form and nonce for the widgets accessibility mode links.\n\t\tif ( 'widgets' !== $this->base ) {\n\t\t\t$form_start = \"\\n<form id='adv-settings' method='post'>\\n\";\n\t\t\t$form_end = \"\\n\" . wp_nonce_field( 'screen-options-nonce', 'screenoptionnonce', false, false ) . \"\\n</form>\\n\";\n\t\t}\n\n\t\techo $wrapper_start . $form_start;\n\n\t\t$this->render_meta_boxes_preferences();\n\t\t$this->render_list_table_columns_preferences();\n\t\t$this->render_screen_layout();\n\t\t$this->render_per_page_options();\n\t\t$this->render_view_mode();\n\t\techo $this->_screen_settings;\n\n\t\t/**\n\t\t * Filters whether to show the Screen Options submit button.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param bool      $show_button Whether to show Screen Options submit button.\n\t\t *                               Default false.\n\t\t * @param WP_Screen $this        Current WP_Screen instance.\n\t\t */\n\t\t$show_button = apply_filters( 'screen_options_show_submit', false, $this );\n\n\t\tif ( $show_button ) {\n\t\t\tsubmit_button( __( 'Apply' ), 'primary', 'screen-options-apply', true );\n\t\t}\n\n\t\techo $form_end . $wrapper_end;\n\t}\n\n\t/**\n\t * Render the meta boxes preferences.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @global array $wp_meta_boxes\n\t */\n\tpublic function render_meta_boxes_preferences() {\n\t\tglobal $wp_meta_boxes;\n\n\t\tif ( ! isset( $wp_meta_boxes[ $this->id ] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<fieldset class=\"metabox-prefs\">\n\t\t<legend><?php _e( 'Boxes' ); ?></legend>\n\t\t<?php\n\t\t\tmeta_box_prefs( $this );\n\n\t\t\tif ( 'dashboard' === $this->id && has_action( 'welcome_panel' ) && current_user_can( 'edit_theme_options' ) ) {\n\t\t\t\tif ( isset( $_GET['welcome'] ) ) {\n\t\t\t\t\t$welcome_checked = empty( $_GET['welcome'] ) ? 0 : 1;\n\t\t\t\t\tupdate_user_meta( get_current_user_id(), 'show_welcome_panel', $welcome_checked );\n\t\t\t\t} else {\n\t\t\t\t\t$welcome_checked = get_user_meta( get_current_user_id(), 'show_welcome_panel', true );\n\t\t\t\t\tif ( 2 == $welcome_checked && wp_get_current_user()->user_email != get_option( 'admin_email' ) ) {\n\t\t\t\t\t\t$welcome_checked = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo '<label for=\"wp_welcome_panel-hide\">';\n\t\t\t\techo '<input type=\"checkbox\" id=\"wp_welcome_panel-hide\"' . checked( (bool) $welcome_checked, true, false ) . ' />';\n\t\t\t\techo _x( 'Welcome', 'Welcome panel' ) . \"</label>\\n\";\n\t\t\t}\n\t\t?>\n\t\t</fieldset>\n\t\t<?php\n\t}\n\n\t/**\n\t * Render the list table columns preferences.\n\t *\n\t * @since 4.4.0\n\t */\n\tpublic function render_list_table_columns_preferences() {\n\n\t\t$columns = get_column_headers( $this );\n\t\t$hidden  = get_hidden_columns( $this );\n\n\t\tif ( ! $columns ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$legend = ! empty( $columns['_title'] ) ? $columns['_title'] : __( 'Columns' );\n\t\t?>\n\t\t<fieldset class=\"metabox-prefs\">\n\t\t<legend><?php echo $legend; ?></legend>\n\t\t<?php\n\t\t$special = array( '_title', 'cb', 'comment', 'media', 'name', 'title', 'username', 'blogname' );\n\n\t\tforeach ( $columns as $column => $title ) {\n\t\t\t// Can't hide these for they are special\n\t\t\tif ( in_array( $column, $special ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( empty( $title ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( 'comments' == $column ) {\n\t\t\t\t$title = __( 'Comments' );\n\t\t\t}\n\n\t\t\t$id = \"$column-hide\";\n\t\t\techo '<label>';\n\t\t\techo '<input class=\"hide-column-tog\" name=\"' . $id . '\" type=\"checkbox\" id=\"' . $id . '\" value=\"' . $column . '\"' . checked( ! in_array( $column, $hidden ), true, false ) . ' />';\n\t\t\techo \"$title</label>\\n\";\n\t\t}\n\t\t?>\n\t\t</fieldset>\n\t\t<?php\n\t}\n\n\t/**\n\t * Render the option for number of columns on the page\n\t *\n\t * @since 3.3.0\n\t */\n\tpublic function render_screen_layout() {\n\t\tif ( ! $this->get_option( 'layout_columns' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$screen_layout_columns = $this->get_columns();\n\t\t$num = $this->get_option( 'layout_columns', 'max' );\n\n\t\t?>\n\t\t<fieldset class='columns-prefs'>\n\t\t<legend class=\"screen-layout\"><?php _e( 'Layout' ); ?></legend><?php\n\t\t\tfor ( $i = 1; $i <= $num; ++$i ):\n\t\t\t\t?>\n\t\t\t\t<label class=\"columns-prefs-<?php echo $i; ?>\">\n\t\t\t\t\t<input type='radio' name='screen_columns' value='<?php echo esc_attr( $i ); ?>'\n\t\t\t\t\t\t<?php checked( $screen_layout_columns, $i ); ?> />\n\t\t\t\t\t<?php printf( _n( '%s column', '%s columns', $i ), number_format_i18n( $i ) ); ?>\n\t\t\t\t</label>\n\t\t\t\t<?php\n\t\t\tendfor; ?>\n\t\t</fieldset>\n\t\t<?php\n\t}\n\n\t/**\n\t * Render the items per page option\n\t *\n\t * @since 3.3.0\n\t */\n\tpublic function render_per_page_options() {\n\t\tif ( null === $this->get_option( 'per_page' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$per_page_label = $this->get_option( 'per_page', 'label' );\n\t\tif ( null === $per_page_label ) {\n\t\t\t$per_page_label = __( 'Number of items per page:' );\n\t\t}\n\n\t\t$option = $this->get_option( 'per_page', 'option' );\n\t\tif ( ! $option ) {\n\t\t\t$option = str_replace( '-', '_', \"{$this->id}_per_page\" );\n\t\t}\n\n\t\t$per_page = (int) get_user_option( $option );\n\t\tif ( empty( $per_page ) || $per_page < 1 ) {\n\t\t\t$per_page = $this->get_option( 'per_page', 'default' );\n\t\t\tif ( ! $per_page ) {\n\t\t\t\t$per_page = 20;\n\t\t\t}\n\t\t}\n\n\t\tif ( 'edit_comments_per_page' == $option ) {\n\t\t\t$comment_status = isset( $_REQUEST['comment_status'] ) ? $_REQUEST['comment_status'] : 'all';\n\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-comments-list-table.php */\n\t\t\t$per_page = apply_filters( 'comments_per_page', $per_page, $comment_status );\n\t\t} elseif ( 'categories_per_page' == $option ) {\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-terms-list-table.php */\n\t\t\t$per_page = apply_filters( 'edit_categories_per_page', $per_page );\n\t\t} else {\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-list-table.php */\n\t\t\t$per_page = apply_filters( \"{$option}\", $per_page );\n\t\t}\n\n\t\t// Back compat\n\t\tif ( isset( $this->post_type ) ) {\n\t\t\t/** This filter is documented in wp-admin/includes/post.php */\n\t\t\t$per_page = apply_filters( 'edit_posts_per_page', $per_page, $this->post_type );\n\t\t}\n\n\t\t// This needs a submit button\n\t\tadd_filter( 'screen_options_show_submit', '__return_true' );\n\n\t\t?>\n\t\t<fieldset class=\"screen-options\">\n\t\t<legend><?php _e( 'Pagination' ); ?></legend>\n\t\t\t<?php if ( $per_page_label ) : ?>\n\t\t\t\t<label for=\"<?php echo esc_attr( $option ); ?>\"><?php echo $per_page_label; ?></label>\n\t\t\t\t<input type=\"number\" step=\"1\" min=\"1\" max=\"999\" class=\"screen-per-page\" name=\"wp_screen_options[value]\"\n\t\t\t\t\tid=\"<?php echo esc_attr( $option ); ?>\" maxlength=\"3\"\n\t\t\t\t\tvalue=\"<?php echo esc_attr( $per_page ); ?>\" />\n\t\t\t<?php endif; ?>\n\t\t\t\t<input type=\"hidden\" name=\"wp_screen_options[option]\" value=\"<?php echo esc_attr( $option ); ?>\" />\n\t\t</fieldset>\n\t\t<?php\n\t}\n\n\t/**\n\t * Render the list table view mode preferences.\n\t *\n\t * @since 4.4.0\n\t */\n\tpublic function render_view_mode() {\n\t\t$screen = get_current_screen();\n\n\t\t// Currently only enabled for posts lists\n\t\tif ( 'edit' !== $screen->base ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$view_mode_post_types = get_post_types( array( 'hierarchical' => false, 'show_ui' => true ) );\n\n\t\t/**\n\t\t * Filters the post types that have different view mode options.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param array $view_mode_post_types Array of post types that can change view modes.\n\t\t *                                    Default hierarchical post types with show_ui on.\n\t\t */\n\t\t$view_mode_post_types = apply_filters( 'view_mode_post_types', $view_mode_post_types );\n\n\t\tif ( ! in_array( $this->post_type, $view_mode_post_types ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tglobal $mode;\n\n\t\t// This needs a submit button\n\t\tadd_filter( 'screen_options_show_submit', '__return_true' );\n?>\n\t\t<fieldset class=\"metabox-prefs view-mode\">\n\t\t<legend><?php _e( 'View Mode' ); ?></legend>\n\t\t\t\t<label for=\"list-view-mode\">\n\t\t\t\t\t<input id=\"list-view-mode\" type=\"radio\" name=\"mode\" value=\"list\" <?php checked( 'list', $mode ); ?> />\n\t\t\t\t\t<?php _e( 'List View' ); ?>\n\t\t\t\t</label>\n\t\t\t\t<label for=\"excerpt-view-mode\">\n\t\t\t\t\t<input id=\"excerpt-view-mode\" type=\"radio\" name=\"mode\" value=\"excerpt\" <?php checked( 'excerpt', $mode ); ?> />\n\t\t\t\t\t<?php _e( 'Excerpt View' ); ?>\n\t\t\t\t</label>\n\t\t</fieldset>\n<?php\n\t}\n\n\t/**\n\t * Render screen reader text.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string $key The screen reader text array named key.\n\t * @param string $tag Optional. The HTML tag to wrap the screen reader text. Default h2.\n\t */\n\tpublic function render_screen_reader_content( $key = '', $tag = 'h2' ) {\n\n\t\tif ( ! isset( $this->_screen_reader_content[ $key ] ) ) {\n\t\t\treturn;\n\t\t}\n\t\techo \"<$tag class='screen-reader-text'>\" . $this->_screen_reader_content[ $key ] . \"</$tag>\";\n\t}\n}\n", "<?php\n/**\n * Widget administration panel\n *\n * @package WordPress\n * @subpackage Administration\n */\n\n/** WordPress Administration Bootstrap */\nrequire_once( dirname( __FILE__ ) . '/admin.php' );\n\n/** WordPress Administration Widgets API */\nrequire_once(ABSPATH . 'wp-admin/includes/widgets.php');\n\nif ( ! current_user_can( 'edit_theme_options' ) ) {\n\twp_die(\n\t\t'<h1>' . __( 'Cheatin&#8217; uh?' ) . '</h1>' .\n\t\t'<p>' . __( 'Sorry, you are not allowed to edit theme options on this site.' ) . '</p>',\n\t\t403\n\t);\n}\n\n$widgets_access = get_user_setting( 'widgets_access' );\nif ( isset($_GET['widgets-access']) ) {\n\tcheck_admin_referer( 'widgets-access' );\n\n\t$widgets_access = 'on' == $_GET['widgets-access'] ? 'on' : 'off';\n\tset_user_setting( 'widgets_access', $widgets_access );\n}\n\nif ( 'on' == $widgets_access ) {\n\tadd_filter( 'admin_body_class', 'wp_widgets_access_body_class' );\n} else {\n\twp_enqueue_script('admin-widgets');\n\n\tif ( wp_is_mobile() )\n\t\twp_enqueue_script( 'jquery-touch-punch' );\n}\n\n/**\n * Fires early before the Widgets administration screen loads,\n * after scripts are enqueued.\n *\n * @since 2.2.0\n */\ndo_action( 'sidebar_admin_setup' );\n\n$title = __( 'Widgets' );\n$parent_file = 'themes.php';\n\nget_current_screen()->add_help_tab( array(\n'id'\t\t=> 'overview',\n'title'\t\t=> __('Overview'),\n'content'\t=>\n\t'<p>' . __('Widgets are independent sections of content that can be placed into any widgetized area provided by your theme (commonly called sidebars). To populate your sidebars/widget areas with individual widgets, drag and drop the title bars into the desired area. By default, only the first widget area is expanded. To populate additional widget areas, click on their title bars to expand them.') . '</p>\n\t<p>' . __('The Available Widgets section contains all the widgets you can choose from. Once you drag a widget into a sidebar, it will open to allow you to configure its settings. When you are happy with the widget settings, click the Save button and the widget will go live on your site. If you click Delete, it will remove the widget.') . '</p>'\n) );\nget_current_screen()->add_help_tab( array(\n'id'\t\t=> 'removing-reusing',\n'title'\t\t=> __('Removing and Reusing'),\n'content'\t=>\n\t'<p>' . __('If you want to remove the widget but save its setting for possible future use, just drag it into the Inactive Widgets area. You can add them back anytime from there. This is especially helpful when you switch to a theme with fewer or different widget areas.') . '</p>\n\t<p>' . __('Widgets may be used multiple times. You can give each widget a title, to display on your site, but it&#8217;s not required.') . '</p>\n\t<p>' . __('Enabling Accessibility Mode, via Screen Options, allows you to use Add and Edit buttons instead of using drag and drop.') . '</p>'\n) );\nget_current_screen()->add_help_tab( array(\n'id'\t\t=> 'missing-widgets',\n'title'\t\t=> __('Missing Widgets'),\n'content'\t=>\n\t'<p>' . __('Many themes show some sidebar widgets by default until you edit your sidebars, but they are not automatically displayed in your sidebar management tool. After you make your first widget change, you can re-add the default widgets by adding them from the Available Widgets area.') . '</p>' .\n\t\t'<p>' . __('When changing themes, there is often some variation in the number and setup of widget areas/sidebars and sometimes these conflicts make the transition a bit less smooth. If you changed themes and seem to be missing widgets, scroll down on this screen to the Inactive Widgets area, where all of your widgets and their settings will have been saved.') . '</p>'\n) );\n\nget_current_screen()->set_help_sidebar(\n\t'<p><strong>' . __('For more information:') . '</strong></p>' .\n\t'<p>' . __('<a href=\"https://codex.wordpress.org/Appearance_Widgets_Screen\">Documentation on Widgets</a>') . '</p>' .\n\t'<p>' . __('<a href=\"https://wordpress.org/support/\">Support Forums</a>') . '</p>'\n);\n\nif ( ! current_theme_supports( 'widgets' ) ) {\n\twp_die( __( 'The theme you are currently using isn&#8217;t widget-aware, meaning that it has no sidebars that you are able to change. For information on making your theme widget-aware, please <a href=\"https://codex.wordpress.org/Widgetizing_Themes\">follow these instructions</a>.' ) );\n}\n\n// These are the widgets grouped by sidebar\n$sidebars_widgets = wp_get_sidebars_widgets();\n\nif ( empty( $sidebars_widgets ) )\n\t$sidebars_widgets = wp_get_widget_defaults();\n\nforeach ( $sidebars_widgets as $sidebar_id => $widgets ) {\n\tif ( 'wp_inactive_widgets' == $sidebar_id )\n\t\tcontinue;\n\n\tif ( ! is_registered_sidebar( $sidebar_id ) ) {\n\t\tif ( ! empty( $widgets ) ) { // register the inactive_widgets area as sidebar\n\t\t\tregister_sidebar(array(\n\t\t\t\t'name' => __( 'Inactive Sidebar (not used)' ),\n\t\t\t\t'id' => $sidebar_id,\n\t\t\t\t'class' => 'inactive-sidebar orphan-sidebar',\n\t\t\t\t'description' => __( 'This sidebar is no longer available and does not show anywhere on your site. Remove each of the widgets below to fully remove this inactive sidebar.' ),\n\t\t\t\t'before_widget' => '',\n\t\t\t\t'after_widget' => '',\n\t\t\t\t'before_title' => '',\n\t\t\t\t'after_title' => '',\n\t\t\t));\n\t\t} else {\n\t\t\tunset( $sidebars_widgets[ $sidebar_id ] );\n\t\t}\n\t}\n}\n\n// register the inactive_widgets area as sidebar\nregister_sidebar(array(\n\t'name' => __('Inactive Widgets'),\n\t'id' => 'wp_inactive_widgets',\n\t'class' => 'inactive-sidebar',\n\t'description' => __( 'Drag widgets here to remove them from the sidebar but keep their settings.' ),\n\t'before_widget' => '',\n\t'after_widget' => '',\n\t'before_title' => '',\n\t'after_title' => '',\n));\n\nretrieve_widgets();\n\n// We're saving a widget without js\nif ( isset($_POST['savewidget']) || isset($_POST['removewidget']) ) {\n\t$widget_id = $_POST['widget-id'];\n\tcheck_admin_referer(\"save-delete-widget-$widget_id\");\n\n\t$number = isset($_POST['multi_number']) ? (int) $_POST['multi_number'] : '';\n\tif ( $number ) {\n\t\tforeach ( $_POST as $key => $val ) {\n\t\t\tif ( is_array($val) && preg_match('/__i__|%i%/', key($val)) ) {\n\t\t\t\t$_POST[$key] = array( $number => array_shift($val) );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t$sidebar_id = $_POST['sidebar'];\n\t$position = isset($_POST[$sidebar_id . '_position']) ? (int) $_POST[$sidebar_id . '_position'] - 1 : 0;\n\n\t$id_base = $_POST['id_base'];\n\t$sidebar = isset($sidebars_widgets[$sidebar_id]) ? $sidebars_widgets[$sidebar_id] : array();\n\n\t// Delete.\n\tif ( isset($_POST['removewidget']) && $_POST['removewidget'] ) {\n\n\t\tif ( !in_array($widget_id, $sidebar, true) ) {\n\t\t\twp_redirect( admin_url('widgets.php?error=0') );\n\t\t\texit;\n\t\t}\n\n\t\t$sidebar = array_diff( $sidebar, array($widget_id) );\n\t\t$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');\n\n\t\t/**\n\t\t * Fires immediately after a widget has been marked for deletion.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param string $widget_id  ID of the widget marked for deletion.\n\t\t * @param string $sidebar_id ID of the sidebar the widget was deleted from.\n\t\t * @param string $id_base    ID base for the widget.\n\t\t */\n\t\tdo_action( 'delete_widget', $widget_id, $sidebar_id, $id_base );\n\t}\n\n\t$_POST['widget-id'] = $sidebar;\n\n\tforeach ( (array) $wp_registered_widget_updates as $name => $control ) {\n\t\tif ( $name != $id_base || !is_callable($control['callback']) )\n\t\t\tcontinue;\n\n\t\tob_start();\n\t\t\tcall_user_func_array( $control['callback'], $control['params'] );\n\t\tob_end_clean();\n\n\t\tbreak;\n\t}\n\n\t$sidebars_widgets[$sidebar_id] = $sidebar;\n\n\t// Remove old position.\n\tif ( !isset($_POST['delete_widget']) ) {\n\t\tforeach ( $sidebars_widgets as $key => $sb ) {\n\t\t\tif ( is_array($sb) )\n\t\t\t\t$sidebars_widgets[$key] = array_diff( $sb, array($widget_id) );\n\t\t}\n\t\tarray_splice( $sidebars_widgets[$sidebar_id], $position, 0, $widget_id );\n\t}\n\n\twp_set_sidebars_widgets($sidebars_widgets);\n\twp_redirect( admin_url('widgets.php?message=0') );\n\texit;\n}\n\n// Remove inactive widgets without js\nif ( isset( $_POST['removeinactivewidgets'] ) ) {\n\tcheck_admin_referer( 'remove-inactive-widgets', '_wpnonce_remove_inactive_widgets' );\n\n\tif ( $_POST['removeinactivewidgets'] ) {\n\t\tforeach ( $sidebars_widgets['wp_inactive_widgets'] as $key => $widget_id ) {\n\t\t\t$pieces = explode( '-', $widget_id );\n\t\t\t$multi_number = array_pop( $pieces );\n\t\t\t$id_base = implode( '-', $pieces );\n\t\t\t$widget = get_option( 'widget_' . $id_base );\n\t\t\tunset( $widget[$multi_number] );\n\t\t\tupdate_option( 'widget_' . $id_base, $widget );\n\t\t\tunset( $sidebars_widgets['wp_inactive_widgets'][$key] );\n\t\t}\n\n\t\twp_set_sidebars_widgets( $sidebars_widgets );\n\t}\n\n\twp_redirect( admin_url( 'widgets.php?message=0' ) );\n\texit;\n}\n\n// Output the widget form without js\nif ( isset($_GET['editwidget']) && $_GET['editwidget'] ) {\n\t$widget_id = $_GET['editwidget'];\n\n\tif ( isset($_GET['addnew']) ) {\n\t\t// Default to the first sidebar\n\t\t$keys = array_keys( $wp_registered_sidebars );\n\t\t$sidebar = reset( $keys );\n\n\t\tif ( isset($_GET['base']) && isset($_GET['num']) ) { // multi-widget\n\t\t\t// Copy minimal info from an existing instance of this widget to a new instance\n\t\t\tforeach ( $wp_registered_widget_controls as $control ) {\n\t\t\t\tif ( $_GET['base'] === $control['id_base'] ) {\n\t\t\t\t\t$control_callback = $control['callback'];\n\t\t\t\t\t$multi_number = (int) $_GET['num'];\n\t\t\t\t\t$control['params'][0]['number'] = -1;\n\t\t\t\t\t$widget_id = $control['id'] = $control['id_base'] . '-' . $multi_number;\n\t\t\t\t\t$wp_registered_widget_controls[$control['id']] = $control;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( isset($wp_registered_widget_controls[$widget_id]) && !isset($control) ) {\n\t\t$control = $wp_registered_widget_controls[$widget_id];\n\t\t$control_callback = $control['callback'];\n\t} elseif ( !isset($wp_registered_widget_controls[$widget_id]) && isset($wp_registered_widgets[$widget_id]) ) {\n\t\t$name = esc_html( strip_tags($wp_registered_widgets[$widget_id]['name']) );\n\t}\n\n\tif ( !isset($name) )\n\t\t$name = esc_html( strip_tags($control['name']) );\n\n\tif ( !isset($sidebar) )\n\t\t$sidebar = isset($_GET['sidebar']) ? $_GET['sidebar'] : 'wp_inactive_widgets';\n\n\tif ( !isset($multi_number) )\n\t\t$multi_number = isset($control['params'][0]['number']) ? $control['params'][0]['number'] : '';\n\n\t$id_base = isset($control['id_base']) ? $control['id_base'] : $control['id'];\n\n\t// Show the widget form.\n\t$width = ' style=\"width:' . max($control['width'], 350) . 'px\"';\n\t$key = isset($_GET['key']) ? (int) $_GET['key'] : 0;\n\n\trequire_once( ABSPATH . 'wp-admin/admin-header.php' ); ?>\n\t<div class=\"wrap\">\n\t<h1><?php echo esc_html( $title ); ?></h1>\n\t<div class=\"editwidget\"<?php echo $width; ?>>\n\t<h2><?php printf( __( 'Widget %s' ), $name ); ?></h2>\n\n\t<form action=\"widgets.php\" method=\"post\">\n\t<div class=\"widget-inside\">\n<?php\n\tif ( is_callable( $control_callback ) )\n\t\tcall_user_func_array( $control_callback, $control['params'] );\n\telse\n\t\techo '<p>' . __('There are no options for this widget.') . \"</p>\\n\"; ?>\n\t</div>\n\n\t<p class=\"describe\"><?php _e('Select both the sidebar for this widget and the position of the widget in that sidebar.'); ?></p>\n\t<div class=\"widget-position\">\n\t<table class=\"widefat\"><thead><tr><th><?php _e('Sidebar'); ?></th><th><?php _e('Position'); ?></th></tr></thead><tbody>\n<?php\n\tforeach ( $wp_registered_sidebars as $sbname => $sbvalue ) {\n\t\techo \"\\t\\t<tr><td><label><input type='radio' name='sidebar' value='\" . esc_attr($sbname) . \"'\" . checked( $sbname, $sidebar, false ) . \" /> $sbvalue[name]</label></td><td>\";\n\t\tif ( 'wp_inactive_widgets' == $sbname || 'orphaned_widgets' == substr( $sbname, 0, 16 ) ) {\n\t\t\techo '&nbsp;';\n\t\t} else {\n\t\t\tif ( !isset($sidebars_widgets[$sbname]) || !is_array($sidebars_widgets[$sbname]) ) {\n\t\t\t\t$j = 1;\n\t\t\t\t$sidebars_widgets[$sbname] = array();\n\t\t\t} else {\n\t\t\t\t$j = count($sidebars_widgets[$sbname]);\n\t\t\t\tif ( isset($_GET['addnew']) || !in_array($widget_id, $sidebars_widgets[$sbname], true) )\n\t\t\t\t\t$j++;\n\t\t\t}\n\t\t\t$selected = '';\n\t\t\techo \"\\t\\t<select name='{$sbname}_position'>\\n\";\n\t\t\techo \"\\t\\t<option value=''>\" . __('&mdash; Select &mdash;') . \"</option>\\n\";\n\t\t\tfor ( $i = 1; $i <= $j; $i++ ) {\n\t\t\t\tif ( in_array($widget_id, $sidebars_widgets[$sbname], true) )\n\t\t\t\t\t$selected = selected( $i, $key + 1, false );\n\t\t\t\techo \"\\t\\t<option value='$i'$selected> $i </option>\\n\";\n\t\t\t}\n\t\t\techo \"\\t\\t</select>\\n\";\n\t\t}\n\t\techo \"</td></tr>\\n\";\n\t} ?>\n\t</tbody></table>\n\t</div>\n\n\t<div class=\"widget-control-actions\">\n<?php\n\tif ( isset($_GET['addnew']) ) { ?>\n\t<a href=\"widgets.php\" class=\"button alignleft\"><?php _e('Cancel'); ?></a>\n<?php\n\t} else {\n\t\tsubmit_button( __( 'Delete' ), 'alignleft', 'removewidget', false );\n\t}\n\tsubmit_button( __( 'Save Widget' ), 'primary alignright', 'savewidget', false ); ?>\n\t<input type=\"hidden\" name=\"widget-id\" class=\"widget-id\" value=\"<?php echo esc_attr($widget_id); ?>\" />\n\t<input type=\"hidden\" name=\"id_base\" class=\"id_base\" value=\"<?php echo esc_attr($id_base); ?>\" />\n\t<input type=\"hidden\" name=\"multi_number\" class=\"multi_number\" value=\"<?php echo esc_attr($multi_number); ?>\" />\n<?php\twp_nonce_field(\"save-delete-widget-$widget_id\"); ?>\n\t<br class=\"clear\" />\n\t</div>\n\t</form>\n\t</div>\n\t</div>\n<?php\n\trequire_once( ABSPATH . 'wp-admin/admin-footer.php' );\n\texit;\n}\n\n$messages = array(\n\t__('Changes saved.')\n);\n\n$errors = array(\n\t__('Error while saving.'),\n\t__('Error in displaying the widget settings form.')\n);\n\nrequire_once( ABSPATH . 'wp-admin/admin-header.php' ); ?>\n\n<div class=\"wrap\">\n<h1 class=\"wp-heading-inline\"><?php\necho esc_html( $title );\n?></h1>\n\n<?php\nif ( current_user_can( 'customize' ) ) {\n\tprintf(\n\t\t' <a class=\"page-title-action hide-if-no-customize\" href=\"%1$s\">%2$s</a>',\n\t\tesc_url( add_query_arg(\n\t\t\tarray(\n\t\t\t\tarray( 'autofocus' => array( 'panel' => 'widgets' ) ),\n\t\t\t\t'return' => urlencode( wp_unslash( $_SERVER['REQUEST_URI'] ) )\n\t\t\t),\n\t\t\tadmin_url( 'customize.php' )\n\t\t) ),\n\t\t__( 'Manage with Live Preview' )\n\t);\n}\n?>\n\n<hr class=\"wp-header-end\">\n\n<?php if ( isset($_GET['message']) && isset($messages[$_GET['message']]) ) { ?>\n<div id=\"message\" class=\"updated notice is-dismissible\"><p><?php echo $messages[$_GET['message']]; ?></p></div>\n<?php } ?>\n<?php if ( isset($_GET['error']) && isset($errors[$_GET['error']]) ) { ?>\n<div id=\"message\" class=\"error\"><p><?php echo $errors[$_GET['error']]; ?></p></div>\n<?php } ?>\n\n<?php\n/**\n * Fires before the Widgets administration page content loads.\n *\n * @since 3.0.0\n */\ndo_action( 'widgets_admin_page' ); ?>\n\n<div class=\"widget-liquid-left\">\n<div id=\"widgets-left\">\n\t<div id=\"available-widgets\" class=\"widgets-holder-wrap\">\n\t\t<div class=\"sidebar-name\">\n\t\t\t<div class=\"sidebar-name-arrow\"><br /></div>\n\t\t\t<h2><?php _e( 'Available Widgets' ); ?> <span id=\"removing-widget\"><?php _ex( 'Deactivate', 'removing-widget' ); ?> <span></span></span></h2>\n\t\t</div>\n\t\t<div class=\"widget-holder\">\n\t\t\t<div class=\"sidebar-description\">\n\t\t\t\t<p class=\"description\"><?php _e('To activate a widget drag it to a sidebar or click on it. To deactivate a widget and delete its settings, drag it back.'); ?></p>\n\t\t\t</div>\n\t\t\t<div id=\"widget-list\">\n\t\t\t\t<?php wp_list_widgets(); ?>\n\t\t\t</div>\n\t\t\t<br class='clear' />\n\t\t</div>\n\t\t<br class=\"clear\" />\n\t</div>\n\n<?php\n\n$theme_sidebars = array();\nforeach ( $wp_registered_sidebars as $sidebar => $registered_sidebar ) {\n\tif ( false !== strpos( $registered_sidebar['class'], 'inactive-sidebar' ) || 'orphaned_widgets' == substr( $sidebar, 0, 16 ) ) {\n\t\t$wrap_class = 'widgets-holder-wrap';\n\t\tif ( !empty( $registered_sidebar['class'] ) )\n\t\t\t$wrap_class .= ' ' . $registered_sidebar['class'];\n\n\t\t$is_inactive_widgets = 'wp_inactive_widgets' == $registered_sidebar['id'];\n\t\t?>\n\t\t<div class=\"<?php echo esc_attr( $wrap_class ); ?>\">\n\t\t\t<div class=\"widget-holder inactive\">\n\t\t\t\t<?php wp_list_widget_controls( $registered_sidebar['id'], $registered_sidebar['name'] ); ?>\n\n\t\t\t\t<?php if ( $is_inactive_widgets ) { ?>\n\t\t\t\t<div class=\"remove-inactive-widgets\">\n\t\t\t\t\t<form action=\"\" method=\"post\">\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t$attributes = array( 'id' => 'inactive-widgets-control-remove' );\n\n\t\t\t\t\t\t\tif ( empty($sidebars_widgets['wp_inactive_widgets']) ) {\n\t\t\t\t\t\t\t\t$attributes['disabled'] = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsubmit_button( __( 'Clear Inactive Widgets' ), 'delete', 'removeinactivewidgets', false, $attributes );\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<span class=\"spinner\"></span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<?php wp_nonce_field( 'remove-inactive-widgets', '_wpnonce_remove_inactive_widgets' ); ?>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<?php } ?>\n\t\t\t</div>\n\t\t\t<?php if ( $is_inactive_widgets ) { ?>\n\t\t\t<p class=\"description\"><?php _e( 'This will clear all items from the inactive widgets list. You will not be able to restore any customizations.' ); ?></p>\n\t\t\t<?php } ?>\n\t\t</div>\n\t\t<?php\n\n\t} else {\n\t\t$theme_sidebars[$sidebar] = $registered_sidebar;\n\t}\n}\n\n?>\n</div>\n</div>\n<?php\n\n$i = $split = 0;\n$single_sidebar_class = '';\n$sidebars_count = count( $theme_sidebars );\n\nif ( $sidebars_count > 1 ) {\n\t$split = ceil( $sidebars_count / 2 );\n} else {\n\t$single_sidebar_class = ' single-sidebar';\n}\n\n?>\n<div class=\"widget-liquid-right\">\n<div id=\"widgets-right\" class=\"wp-clearfix<?php echo $single_sidebar_class; ?>\">\n<div class=\"sidebars-column-1\">\n<?php\n\nforeach ( $theme_sidebars as $sidebar => $registered_sidebar ) {\n\t$wrap_class = 'widgets-holder-wrap';\n\tif ( !empty( $registered_sidebar['class'] ) )\n\t\t$wrap_class .= ' sidebar-' . $registered_sidebar['class'];\n\n\tif ( $i > 0 )\n\t\t$wrap_class .= ' closed';\n\n\tif ( $split && $i == $split ) {\n\t\t?>\n\t\t</div><div class=\"sidebars-column-2\">\n\t\t<?php\n\t}\n\n\t?>\n\t<div class=\"<?php echo esc_attr( $wrap_class ); ?>\">\n\t\t<?php wp_list_widget_controls( $sidebar, $registered_sidebar['name'] ); // Show the control forms for each of the widgets in this sidebar ?>\n\t</div>\n\t<?php\n\n\t$i++;\n}\n\n?>\n</div>\n</div>\n</div>\n<form method=\"post\">\n<?php wp_nonce_field( 'save-sidebar-widgets', '_wpnonce_widgets', false ); ?>\n</form>\n<br class=\"clear\" />\n</div>\n\n<div class=\"widgets-chooser\">\n\t<ul class=\"widgets-chooser-sidebars\"></ul>\n\t<div class=\"widgets-chooser-actions\">\n\t\t<button class=\"button widgets-chooser-cancel\"><?php _e( 'Cancel' ); ?></button>\n\t\t<button class=\"button button-primary widgets-chooser-add\"><?php _e( 'Add Widget' ); ?></button>\n\t</div>\n</div>\n\n<?php\n\n/**\n * Fires after the available widgets and sidebars have loaded, before the admin footer.\n *\n * @since 2.2.0\n */\ndo_action( 'sidebar_admin_page' );\nrequire_once( ABSPATH . 'wp-admin/admin-footer.php' );\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-39760';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-admin/includes/class-wp-screen.php", "wp-admin/widgets.php", "wp-includes/version.php"], "buggy_code_start_loc": [918, 24, 7], "buggy_code_end_loc": [919, 24, 8], "fixing_code_start_loc": [918, 25, 7], "fixing_code_end_loc": [920, 27, 8], "type": "CWE-352", "message": "Cross-site request forgery (CSRF) vulnerability in the widget-editing accessibility-mode feature in WordPress before 4.7.1 allows remote attackers to hijack the authentication of unspecified victims for requests that perform a widgets-access action, related to wp-admin/includes/class-wp-screen.php and wp-admin/widgets.php.", "other": {"cve": {"id": "CVE-2017-5492", "sourceIdentifier": "cve@mitre.org", "published": "2017-01-15T02:59:03.033", "lastModified": "2017-11-04T01:29:43.820", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site request forgery (CSRF) vulnerability in the widget-editing accessibility-mode feature in WordPress before 4.7.1 allows remote attackers to hijack the authentication of unspecified victims for requests that perform a widgets-access action, related to wp-admin/includes/class-wp-screen.php and wp-admin/widgets.php."}, {"lang": "es", "value": "Vulnerabilidad de CSRF en la funcionalidad de modo de accesibilidad de edici\u00f3n de widget en WordPress en versiones anteriores a 4.7.1 permite a atacantes remotos secuestrar la autenticaci\u00f3n de victimas no especificadas para solicitudes que realizan una acci\u00f3n de acceso a widgets, relacionado con wp-admin/includes/class-wp-screen.php and wp-admin/widgets.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.7", "matchCriteriaId": "5C55F44C-4A71-4C47-9908-071A23D46939"}]}]}], "references": [{"url": "http://www.debian.org/security/2017/dsa-3779", "source": "cve@mitre.org"}, {"url": "http://www.openwall.com/lists/oss-security/2017/01/14/6", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/95407", "source": "cve@mitre.org"}, {"url": "http://www.securitytracker.com/id/1037591", "source": "cve@mitre.org"}, {"url": "https://codex.wordpress.org/Version_4.7.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/03e5c0314aeffe6b27f4b98fef842bf0fb00c733", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://wordpress.org/news/2017/01/wordpress-4-7-1-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8720", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/03e5c0314aeffe6b27f4b98fef842bf0fb00c733"}}