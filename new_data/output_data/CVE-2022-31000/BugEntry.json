{"buggy_code": ["<table class=\"index adjustments\" data-hook=\"adjustments\">\n  <thead data-hook=\"adjustmment_head\">\n    <tr>\n      <th><%= Spree::Adjustment.human_attribute_name(:adjustable) %></th>\n      <th><%= Spree::Adjustment.human_attribute_name(:label) %></th>\n      <th><%= Spree::Adjustment.human_attribute_name(:amount) %></th>\n      <th><%= Spree::Adjustment.human_attribute_name(:state) %></th>\n      <th class=\"actions\"></th>\n    </tr>\n  </thead>\n  <tbody>\n    <%= render partial: \"adjustment\", collection: @adjustments %>\n    <tr data-hook=\"adjustment_buttons\">\n      <td class=\"align-right\" colspan=\"2\" style=\"width: 50%\">\n        <% if can? :update, Spree::Adjustment %>\n          <%= button_to t('spree.unfinalize_all_adjustments'), adjustments_unfinalize_admin_order_path(@order), method: :get %>\n        <% end %>\n      </td>\n      <td colspan=\"2\" style=\"width: 50%\">\n        <% if can? :update, Spree::Adjustment %>\n          <%= button_to t('spree.finalize_all_adjustments'), adjustments_finalize_admin_order_path(@order), method: :get %>\n        <% end %>\n      </td>\n      <td class='actions'>&nbsp;</td>\n    </tr>\n  </tbody>\n</table>\n", "# frozen_string_literal: true\n\nSpree::Core::Engine.routes.draw do\n  namespace :admin do\n    get '/search/users', to: \"search#users\", as: :search_users\n    get '/search/products', to: \"search#products\", as: :search_products\n\n    put '/locale/set', to: 'locale#set', defaults: { format: :json }, as: :set_locale\n\n    resources :dashboards, only: [] do\n      collection do\n        get :home\n      end\n    end\n\n    resources :promotions do\n      resources :promotion_rules\n      resources :promotion_actions\n      resources :promotion_codes, only: [:index, :new, :create]\n      resources :promotion_code_batches, only: [:index, :new, :create] do\n        get '/download', to: \"promotion_code_batches#download\", defaults: { format: \"csv\" }\n      end\n    end\n\n    resources :promotion_categories, except: [:show]\n\n    resources :zones\n\n    resources :tax_categories\n\n    resources :products do\n      resources :product_properties do\n        collection do\n          post :update_positions\n        end\n      end\n      resources :variant_property_rule_values, only: [:destroy] do\n        collection do\n          post :update_positions\n        end\n      end\n      resources :images do\n        collection do\n          post :update_positions\n        end\n      end\n      member do\n        post :clone\n      end\n      resources :variants, only: [:index, :edit, :update, :new, :create, :destroy] do\n        collection do\n          post :update_positions\n        end\n      end\n      resources :variants_including_master, only: [:update]\n      resources :prices, only: [:destroy, :index, :edit, :update, :new, :create]\n    end\n    get '/products/:product_slug/stock', to: \"stock_items#index\", as: :product_stock\n\n    resources :option_types do\n      collection do\n        post :update_positions\n        post :update_values_positions\n      end\n    end\n\n    delete '/option_values/:id', to: \"option_values#destroy\", as: :option_value\n\n    resources :properties\n\n    delete '/product_properties/:id', to: \"product_properties#destroy\", as: :product_property\n\n    resources :orders, except: [:show] do\n      member do\n        get :cart\n        put :advance\n        get :confirm\n        put :complete\n        post :resend\n        get \"/adjustments/unfinalize\", to: \"orders#unfinalize_adjustments\"\n        get \"/adjustments/finalize\", to: \"orders#finalize_adjustments\"\n        put :approve\n        put :cancel\n        put :resume\n      end\n\n      resource :customer, controller: \"orders/customer_details\"\n      resources :customer_returns, only: [:index, :new, :edit, :create, :update] do\n        member do\n          put :refund\n        end\n      end\n\n      resources :adjustments\n      resources :return_authorizations do\n        member do\n          put :fire\n        end\n      end\n      resources :payments, only: [:index, :new, :show, :create] do\n        member do\n          put :fire\n        end\n\n        resources :refunds, only: [:new, :create, :edit, :update]\n      end\n\n      resources :reimbursements, only: [:index, :create, :show, :edit, :update] do\n        member do\n          post :perform\n        end\n      end\n\n      resources :cancellations, only: [:index] do\n        collection do\n          post :short_ship\n        end\n      end\n    end\n\n    resource :general_settings, only: :edit\n    resources :stores, only: [:index, :new, :create, :edit, :update]\n\n    resources :return_items, only: [:update]\n\n    resources :taxonomies do\n      collection do\n        post :update_positions\n      end\n      resources :taxons do\n        resource :attachment, controller: 'taxons/attachment', only: [:destroy]\n      end\n    end\n\n    resources :taxons, only: [:index, :show] do\n      collection do\n        get :search\n      end\n    end\n\n    resources :reimbursement_types, only: [:index]\n    resources :adjustment_reasons, except: [:show, :destroy]\n    resources :refund_reasons, except: [:show, :destroy]\n    resources :return_reasons, except: [:show, :destroy]\n    resources :store_credit_reasons, except: [:show]\n\n    resources :shipping_methods\n    resources :shipping_categories\n\n    resources :stock_locations do\n      resources :stock_movements, only: [:index]\n      collection do\n        post :transfer_stock\n        post :update_positions\n      end\n    end\n\n    resources :stock_items, except: [:show, :new, :edit]\n    resources :tax_rates\n\n    resources :payment_methods do\n      collection do\n        post :update_positions\n      end\n    end\n\n    resources :users do\n      member do\n        get :orders\n        get :items\n        get :addresses\n        put :addresses\n      end\n      resources :store_credits, except: [:destroy] do\n        member do\n          get :edit_amount\n          put :update_amount\n          get :edit_validity\n          put :invalidate\n        end\n      end\n    end\n\n    resources :style_guide, only: [:index]\n  end\n\n  get '/admin', to: 'admin/root#index', as: :admin\nend\n", "# frozen_string_literal: true\n\nrequire 'spec_helper'\n\ndescribe \"Adjustments\", type: :feature do\n  stub_authorization!\n\n  context \"when the order is completed\" do\n    let!(:ship_address) { create(:address) }\n    let!(:tax_zone) { create(:global_zone) } # will include the above address\n    let!(:tax_rate) { create(:tax_rate, amount: 0.20, zone: tax_zone, tax_categories: [tax_category]) }\n\n    let!(:order) do\n      create(\n        :completed_order_with_totals,\n        line_items_attributes: [{ price: 10, variant: variant }] * 5,\n        ship_address: ship_address,\n      )\n    end\n    let!(:line_item) { order.line_items[0] }\n\n    let(:tax_category) { create(:tax_category) }\n    let(:variant) { create(:variant, tax_category: tax_category) }\n\n    let!(:non_eligible_adjustment) { order.adjustments.create!(order: order, label: 'Non-Eligible', amount: 10, eligible: false) }\n    let!(:adjustment) { order.adjustments.create!(order: order, label: 'Rebate', amount: 10) }\n\n    before(:each) do\n      order.recalculate\n\n      visit spree.admin_path\n      click_link \"Orders\"\n      within_row(1) { click_icon :edit }\n      click_link \"Adjustments\"\n    end\n\n    context \"admin managing adjustments\" do\n      it \"should display the correct values for existing order adjustments\" do\n        within first('table tr', text: 'Tax') do\n          expect(column_text(2)).to match(/TaxCategory - \\d+ 20\\.000%/)\n          expect(column_text(3)).to eq(\"$2.00\")\n        end\n      end\n\n      it \"shows both eligible and non-eligible adjustments\" do\n        expect(page).to have_content(\"Rebate\")\n        expect(page).to have_content(\"Non-Eligible\")\n        expect(find('tr', text: 'Rebate')[:class]).not_to eq('adjustment-ineligible')\n        expect(find('tr', text: 'Non-Eligible')[:class]).to eq('adjustment-ineligible')\n      end\n    end\n\n    context \"admin creating a new adjustment\" do\n      before(:each) do\n        click_link \"New Adjustment\"\n      end\n\n      context \"successfully\" do\n        it \"should create a new adjustment\" do\n          fill_in \"adjustment_amount\", with: \"10\"\n          fill_in \"adjustment_label\", with: \"rebate\"\n          click_button \"Continue\"\n\n          order.reload.all_adjustments.each do |adjustment|\n            expect(adjustment.order_id).to equal(order.id)\n          end\n        end\n      end\n\n      context \"with validation errors\" do\n        it \"should not create a new adjustment\" do\n          fill_in \"adjustment_amount\", with: \"\"\n          fill_in \"adjustment_label\", with: \"\"\n          click_button \"Continue\"\n          expect(page).to have_content(\"Label can't be blank\")\n          expect(page).to have_content(\"Amount is not a number\")\n        end\n      end\n    end\n\n    context \"admin editing an adjustment\" do\n      before(:each) do\n        within('table tr', text: 'Rebate') do\n          click_icon :edit\n        end\n      end\n\n      context \"successfully\" do\n        it \"should update the adjustment\" do\n          fill_in \"adjustment_amount\", with: \"99\"\n          fill_in \"adjustment_label\", with: \"rebate 99\"\n          click_button \"Continue\"\n          expect(page).to have_content(\"successfully updated!\")\n          expect(page).to have_content(\"rebate 99\")\n          within(\".adjustments\") do\n            expect(page).to have_content(\"$99.00\")\n          end\n\n          expect(page).to have_content(\"Total: $259.00\")\n        end\n      end\n\n      context \"with validation errors\" do\n        it \"should not update the adjustment\" do\n          fill_in \"adjustment_amount\", with: \"\"\n          fill_in \"adjustment_label\", with: \"\"\n          click_button \"Continue\"\n          expect(page).to have_content(\"Label can't be blank\")\n          expect(page).to have_content(\"Amount is not a number\")\n        end\n      end\n    end\n\n    context \"deleting an adjustment\" do\n      context 'when the adjustment is finalized' do\n        let!(:adjustment) { super().tap(&:finalize!) }\n\n        it 'should not be possible' do\n          within('table tr', text: 'Rebate') do\n            expect(page).not_to have_css('.fa-trash')\n          end\n        end\n      end\n\n      it \"should update the total\", js: true do\n        accept_alert do\n          within('table tr', text: 'Rebate') do\n            click_icon(:trash)\n          end\n        end\n\n        expect(page).to have_content('Total: $170.00', normalize_ws: true)\n      end\n    end\n  end\n\n  context \"when the order is not completed\" do\n    let(:order) { create(:order_ready_to_complete) }\n\n    before do\n      visit spree.edit_admin_order_path(order)\n      click_link \"Adjustments\"\n    end\n\n    context \"when the order is not complete\" do\n      context \"when the user can edit and update orders\" do\n        custom_authorization! do |_user|\n          can :update, Spree::Order\n          can :edit, Spree::Order\n        end\n\n        it \"allows to enter a coupon code\", :js do\n          expect(page).to have_content('Add Coupon Code')\n          expect(page).to have_selector('input#coupon_code')\n        end\n      end\n\n      context \"when the user can edit but cannot update orders\" do\n        custom_authorization! do |_user|\n          cannot :update, Spree::Order\n          can :edit, Spree::Order\n        end\n\n        it \"doesn't allow to enter a coupon code\" do\n          expect(page).not_to have_content('Add Coupon Code')\n          expect(page).not_to have_selector('input#coupon_code')\n        end\n      end\n    end\n  end\nend\n"], "fixing_code": ["<table class=\"index adjustments\" data-hook=\"adjustments\">\n  <thead data-hook=\"adjustmment_head\">\n    <tr>\n      <th><%= Spree::Adjustment.human_attribute_name(:adjustable) %></th>\n      <th><%= Spree::Adjustment.human_attribute_name(:label) %></th>\n      <th><%= Spree::Adjustment.human_attribute_name(:amount) %></th>\n      <th><%= Spree::Adjustment.human_attribute_name(:state) %></th>\n      <th class=\"actions\"></th>\n    </tr>\n  </thead>\n  <tbody>\n    <%= render partial: \"adjustment\", collection: @adjustments %>\n    <tr data-hook=\"adjustment_buttons\">\n      <td class=\"align-right\" colspan=\"2\" style=\"width: 50%\">\n        <% if can? :update, Spree::Adjustment %>\n          <%= button_to t('spree.unfinalize_all_adjustments'), adjustments_unfinalize_admin_order_path(@order), method: :put %>\n        <% end %>\n      </td>\n      <td colspan=\"2\" style=\"width: 50%\">\n        <% if can? :update, Spree::Adjustment %>\n          <%= button_to t('spree.finalize_all_adjustments'), adjustments_finalize_admin_order_path(@order), method: :put %>\n        <% end %>\n      </td>\n      <td class='actions'>&nbsp;</td>\n    </tr>\n  </tbody>\n</table>\n", "# frozen_string_literal: true\n\nSpree::Core::Engine.routes.draw do\n  namespace :admin do\n    get '/search/users', to: \"search#users\", as: :search_users\n    get '/search/products', to: \"search#products\", as: :search_products\n\n    put '/locale/set', to: 'locale#set', defaults: { format: :json }, as: :set_locale\n\n    resources :dashboards, only: [] do\n      collection do\n        get :home\n      end\n    end\n\n    resources :promotions do\n      resources :promotion_rules\n      resources :promotion_actions\n      resources :promotion_codes, only: [:index, :new, :create]\n      resources :promotion_code_batches, only: [:index, :new, :create] do\n        get '/download', to: \"promotion_code_batches#download\", defaults: { format: \"csv\" }\n      end\n    end\n\n    resources :promotion_categories, except: [:show]\n\n    resources :zones\n\n    resources :tax_categories\n\n    resources :products do\n      resources :product_properties do\n        collection do\n          post :update_positions\n        end\n      end\n      resources :variant_property_rule_values, only: [:destroy] do\n        collection do\n          post :update_positions\n        end\n      end\n      resources :images do\n        collection do\n          post :update_positions\n        end\n      end\n      member do\n        post :clone\n      end\n      resources :variants, only: [:index, :edit, :update, :new, :create, :destroy] do\n        collection do\n          post :update_positions\n        end\n      end\n      resources :variants_including_master, only: [:update]\n      resources :prices, only: [:destroy, :index, :edit, :update, :new, :create]\n    end\n    get '/products/:product_slug/stock', to: \"stock_items#index\", as: :product_stock\n\n    resources :option_types do\n      collection do\n        post :update_positions\n        post :update_values_positions\n      end\n    end\n\n    delete '/option_values/:id', to: \"option_values#destroy\", as: :option_value\n\n    resources :properties\n\n    delete '/product_properties/:id', to: \"product_properties#destroy\", as: :product_property\n\n    resources :orders, except: [:show] do\n      member do\n        get :cart\n        put :advance\n        get :confirm\n        put :complete\n        post :resend\n        put \"/adjustments/unfinalize\", to: \"orders#unfinalize_adjustments\"\n        put \"/adjustments/finalize\", to: \"orders#finalize_adjustments\"\n        put :approve\n        put :cancel\n        put :resume\n      end\n\n      resource :customer, controller: \"orders/customer_details\"\n      resources :customer_returns, only: [:index, :new, :edit, :create, :update] do\n        member do\n          put :refund\n        end\n      end\n\n      resources :adjustments, except: [:show]\n      resources :return_authorizations do\n        member do\n          put :fire\n        end\n      end\n      resources :payments, only: [:index, :new, :show, :create] do\n        member do\n          put :fire\n        end\n\n        resources :refunds, only: [:new, :create, :edit, :update]\n      end\n\n      resources :reimbursements, only: [:index, :create, :show, :edit, :update] do\n        member do\n          post :perform\n        end\n      end\n\n      resources :cancellations, only: [:index] do\n        collection do\n          post :short_ship\n        end\n      end\n    end\n\n    resource :general_settings, only: :edit\n    resources :stores, only: [:index, :new, :create, :edit, :update]\n\n    resources :return_items, only: [:update]\n\n    resources :taxonomies do\n      collection do\n        post :update_positions\n      end\n      resources :taxons do\n        resource :attachment, controller: 'taxons/attachment', only: [:destroy]\n      end\n    end\n\n    resources :taxons, only: [:index, :show] do\n      collection do\n        get :search\n      end\n    end\n\n    resources :reimbursement_types, only: [:index]\n    resources :adjustment_reasons, except: [:show, :destroy]\n    resources :refund_reasons, except: [:show, :destroy]\n    resources :return_reasons, except: [:show, :destroy]\n    resources :store_credit_reasons, except: [:show]\n\n    resources :shipping_methods\n    resources :shipping_categories\n\n    resources :stock_locations do\n      resources :stock_movements, only: [:index]\n      collection do\n        post :transfer_stock\n        post :update_positions\n      end\n    end\n\n    resources :stock_items, except: [:show, :new, :edit]\n    resources :tax_rates\n\n    resources :payment_methods do\n      collection do\n        post :update_positions\n      end\n    end\n\n    resources :users do\n      member do\n        get :orders\n        get :items\n        get :addresses\n        put :addresses\n      end\n      resources :store_credits, except: [:destroy] do\n        member do\n          get :edit_amount\n          put :update_amount\n          get :edit_validity\n          put :invalidate\n        end\n      end\n    end\n\n    resources :style_guide, only: [:index]\n  end\n\n  get '/admin', to: 'admin/root#index', as: :admin\nend\n", "# frozen_string_literal: true\n\nrequire 'spec_helper'\n\ndescribe \"Adjustments\", type: :feature do\n  stub_authorization!\n\n  context \"when the order is completed\" do\n    let!(:ship_address) { create(:address) }\n    let!(:tax_zone) { create(:global_zone) } # will include the above address\n    let!(:tax_rate) { create(:tax_rate, amount: 0.20, zone: tax_zone, tax_categories: [tax_category]) }\n\n    let!(:order) do\n      create(\n        :completed_order_with_totals,\n        line_items_attributes: [{ price: 10, variant: variant }] * 5,\n        ship_address: ship_address,\n      )\n    end\n    let!(:line_item) { order.line_items[0] }\n\n    let(:tax_category) { create(:tax_category) }\n    let(:variant) { create(:variant, tax_category: tax_category) }\n\n    let!(:non_eligible_adjustment) { order.adjustments.create!(order: order, label: 'Non-Eligible', amount: 10, eligible: false) }\n    let!(:adjustment) { order.adjustments.create!(order: order, label: 'Rebate', amount: 10) }\n\n    before(:each) do\n      order.recalculate\n\n      visit spree.admin_path\n      click_link \"Orders\"\n      within_row(1) { click_icon :edit }\n      click_link \"Adjustments\"\n    end\n\n    context \"admin managing adjustments\" do\n      it \"should display the correct values for existing order adjustments\" do\n        within first('table tr', text: 'Tax') do\n          expect(column_text(2)).to match(/TaxCategory - \\d+ 20\\.000%/)\n          expect(column_text(3)).to eq(\"$2.00\")\n        end\n      end\n\n      it \"shows both eligible and non-eligible adjustments\" do\n        expect(page).to have_content(\"Rebate\")\n        expect(page).to have_content(\"Non-Eligible\")\n        expect(find('tr', text: 'Rebate')[:class]).not_to eq('adjustment-ineligible')\n        expect(find('tr', text: 'Non-Eligible')[:class]).to eq('adjustment-ineligible')\n      end\n    end\n\n    context \"admin creating a new adjustment\" do\n      before(:each) do\n        click_link \"New Adjustment\"\n      end\n\n      context \"successfully\" do\n        it \"should create a new adjustment\" do\n          fill_in \"adjustment_amount\", with: \"10\"\n          fill_in \"adjustment_label\", with: \"rebate\"\n          click_button \"Continue\"\n\n          order.reload.all_adjustments.each do |adjustment|\n            expect(adjustment.order_id).to equal(order.id)\n          end\n        end\n      end\n\n      context \"with validation errors\" do\n        it \"should not create a new adjustment\" do\n          fill_in \"adjustment_amount\", with: \"\"\n          fill_in \"adjustment_label\", with: \"\"\n          click_button \"Continue\"\n          expect(page).to have_content(\"Label can't be blank\")\n          expect(page).to have_content(\"Amount is not a number\")\n        end\n      end\n    end\n\n    context \"admin editing an adjustment\" do\n      before(:each) do\n        within('table tr', text: 'Rebate') do\n          click_icon :edit\n        end\n      end\n\n      context \"successfully\" do\n        it \"should update the adjustment\" do\n          fill_in \"adjustment_amount\", with: \"99\"\n          fill_in \"adjustment_label\", with: \"rebate 99\"\n          click_button \"Continue\"\n          expect(page).to have_content(\"successfully updated!\")\n          expect(page).to have_content(\"rebate 99\")\n          within(\".adjustments\") do\n            expect(page).to have_content(\"$99.00\")\n          end\n\n          expect(page).to have_content(\"Total: $259.00\")\n        end\n      end\n\n      context \"with validation errors\" do\n        it \"should not update the adjustment\" do\n          fill_in \"adjustment_amount\", with: \"\"\n          fill_in \"adjustment_label\", with: \"\"\n          click_button \"Continue\"\n          expect(page).to have_content(\"Label can't be blank\")\n          expect(page).to have_content(\"Amount is not a number\")\n        end\n      end\n    end\n\n    context \"admin bulk editing adjustments\" do\n      it \"allows finalizing all the adjustments\" do\n        order.all_adjustments.each(&:unfinalize!)\n\n        click_button \"Finalize All Adjustments\"\n\n        expect(order.reload.adjustments.all?(&:finalized?)).to be(true)\n      end\n\n      it \"allows unfinalizing all the adjustments\" do\n        order.all_adjustments.each(&:finalize!)\n\n        click_button \"Unfinalize All Adjustments\"\n\n        expect(order.reload.adjustments.any?(&:finalized?)).to be(false)\n      end\n\n      it \"can't finalize via a GET request\" do\n        order.all_adjustments.each(&:unfinalize!)\n\n        expect {\n          visit \"/admin/orders/#{order.number}/adjustments/finalize\"\n        }.to raise_error(ActionController::RoutingError)\n\n        expect(order.reload.adjustments.any?(&:finalized?)).to be(false)\n      end\n\n      it \"can't unfinalize via a GET request\" do\n        order.all_adjustments.each(&:finalize!)\n\n        expect {\n          visit \"/admin/orders/#{order.number}/adjustments/unfinalize\"\n        }.to raise_error(ActionController::RoutingError)\n\n        expect(order.reload.adjustments.all?(&:finalized?)).to be(true)\n      end\n    end\n\n    context \"deleting an adjustment\" do\n      context 'when the adjustment is finalized' do\n        let!(:adjustment) { super().tap(&:finalize!) }\n\n        it 'should not be possible' do\n          within('table tr', text: 'Rebate') do\n            expect(page).not_to have_css('.fa-trash')\n          end\n        end\n      end\n\n      it \"should update the total\", js: true do\n        accept_alert do\n          within('table tr', text: 'Rebate') do\n            click_icon(:trash)\n          end\n        end\n\n        expect(page).to have_content('Total: $170.00', normalize_ws: true)\n      end\n    end\n  end\n\n  context \"when the order is not completed\" do\n    let(:order) { create(:order_ready_to_complete) }\n\n    before do\n      visit spree.edit_admin_order_path(order)\n      click_link \"Adjustments\"\n    end\n\n    context \"when the order is not complete\" do\n      context \"when the user can edit and update orders\" do\n        custom_authorization! do |_user|\n          can :update, Spree::Order\n          can :edit, Spree::Order\n        end\n\n        it \"allows to enter a coupon code\", :js do\n          expect(page).to have_content('Add Coupon Code')\n          expect(page).to have_selector('input#coupon_code')\n        end\n      end\n\n      context \"when the user can edit but cannot update orders\" do\n        custom_authorization! do |_user|\n          cannot :update, Spree::Order\n          can :edit, Spree::Order\n        end\n\n        it \"doesn't allow to enter a coupon code\" do\n          expect(page).not_to have_content('Add Coupon Code')\n          expect(page).not_to have_selector('input#coupon_code')\n        end\n      end\n    end\n  end\nend\n"], "filenames": ["backend/app/views/spree/admin/adjustments/_adjustments_table.html.erb", "backend/config/routes.rb", "backend/spec/features/admin/orders/adjustments_spec.rb"], "buggy_code_start_loc": [16, 80, 113], "buggy_code_end_loc": [22, 95, 113], "fixing_code_start_loc": [16, 80, 114], "fixing_code_end_loc": [22, 95, 152], "type": "CWE-352", "message": "solidus_backend is the admin interface for the Solidus e-commerce framework. Versions prior to 3.1.6, 3.0.6, and 2.11.16 contain a cross-site request forgery (CSRF) vulnerability. The vulnerability allows attackers to change the state of an order's adjustments if they hold its number, and the execution happens on a store administrator's computer. Users should upgrade to solidus_backend 3.1.6, 3.0.6, or 2.11.16 to receive a patch.", "other": {"cve": {"id": "CVE-2022-31000", "sourceIdentifier": "security-advisories@github.com", "published": "2022-06-01T18:15:07.873", "lastModified": "2022-06-08T20:13:10.833", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "solidus_backend is the admin interface for the Solidus e-commerce framework. Versions prior to 3.1.6, 3.0.6, and 2.11.16 contain a cross-site request forgery (CSRF) vulnerability. The vulnerability allows attackers to change the state of an order's adjustments if they hold its number, and the execution happens on a store administrator's computer. Users should upgrade to solidus_backend 3.1.6, 3.0.6, or 2.11.16 to receive a patch."}, {"lang": "es", "value": "solidus_backend es la interfaz de administraci\u00f3n del framework de comercio electr\u00f3nico Solidus. Las versiones anteriores a 3.1.6, 3.0.6 y 2.11.16, contienen una vulnerabilidad de tipo cross-site request forgery (CSRF). La vulnerabilidad permite a atacantes cambiar el estado de los ajustes de un pedido si presentan su n\u00famero, y la ejecuci\u00f3n ocurre en el ordenador de un administrador de la tienda. Los usuarios deben actualizar a solidus_backend versiones 3.1.6, 3.0.6 o 2.11.16 para recibir el parche"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:N/I:L/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 2.3, "baseSeverity": "LOW"}, "exploitabilityScore": 0.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nebulab:solidus:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.11.16", "matchCriteriaId": "6A5D9F81-FC48-4924-9C43-2D769567A39C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nebulab:solidus:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0.0", "versionEndExcluding": "3.0.5", "matchCriteriaId": "B58D450A-ADBF-4E0F-9C11-B11752ADE39E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nebulab:solidus:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.1.0", "versionEndExcluding": "3.1.6", "matchCriteriaId": "09243C20-0699-4273-A7B9-C2DE53E062E8"}]}]}], "references": [{"url": "https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c"}}