{"buggy_code": ["'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , CRHTLF = /[\\n\\r\\t]/g\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\\\/]+)?([\\S\\s]*)/i\n  , windowsDriveLetter = /^[a-zA-Z]:/\n  , whitespace = /^[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+/;\n\n/**\n * Trim a given string.\n *\n * @param {String} str String to trim.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(whitespace, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address, url) {     // Sanitize what is left of the address\n    return isSpecial(url.protocol) ? address.replace(/\\\\/g, '/') : address;\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d*)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * Check whether a protocol scheme is special.\n *\n * @param {String} The protocol scheme of the URL\n * @return {Boolean} `true` if the protocol scheme is special, else `false`\n * @private\n */\nfunction isSpecial(scheme) {\n  return (\n    scheme === 'file:' ||\n    scheme === 'ftp:' ||\n    scheme === 'http:' ||\n    scheme === 'https:' ||\n    scheme === 'ws:' ||\n    scheme === 'wss:'\n  );\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @param {Object} location\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address, location) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n  location = location || {};\n\n  var match = protocolre.exec(address);\n  var protocol = match[1] ? match[1].toLowerCase() : '';\n  var forwardSlashes = !!match[2];\n  var otherSlashes = !!match[3];\n  var slashesCount = 0;\n  var rest;\n\n  if (forwardSlashes) {\n    if (otherSlashes) {\n      rest = match[2] + match[3] + match[4];\n      slashesCount = match[2].length + match[3].length;\n    } else {\n      rest = match[2] + match[4];\n      slashesCount = match[2].length;\n    }\n  } else {\n    if (otherSlashes) {\n      rest = match[3] + match[4];\n      slashesCount = match[3].length;\n    } else {\n      rest = match[4]\n    }\n  }\n\n  if (protocol === 'file:') {\n    if (slashesCount >= 2) {\n      rest = rest.slice(2);\n    }\n  } else if (isSpecial(protocol)) {\n    rest = match[4];\n  } else if (protocol) {\n    if (forwardSlashes) {\n      rest = rest.slice(2);\n    }\n  } else if (slashesCount >= 2 && isSpecial(location.protocol)) {\n    rest = match[4];\n  }\n\n  return {\n    protocol: protocol,\n    slashes: forwardSlashes || isSpecial(protocol),\n    slashesCount: slashesCount,\n    rest: rest\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '', location);\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (\n    extracted.protocol === 'file:' && (\n      extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) ||\n    (!extracted.slashes &&\n      (extracted.protocol ||\n        extracted.slashesCount < 2 ||\n        !isSpecial(url.protocol)))\n  ) {\n    instructions[3] = [/(.*)/, 'pathname'];\n  }\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address, url);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      index = parse === '@'\n        ? address.lastIndexOf(parse)\n        : address.indexOf(parse);\n\n      if (~index) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n\n  if (url.auth) {\n    index = url.auth.indexOf(':');\n\n    if (~index) {\n      url.username = url.auth.slice(0, index);\n      url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n      url.password = url.auth.slice(index + 1);\n      url.password = encodeURIComponent(decodeURIComponent(url.password))\n    } else {\n      url.username = encodeURIComponent(decodeURIComponent(url.auth));\n    }\n\n    url.auth = url.password ? url.username +':'+ url.password : url.username;\n  }\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    case 'username':\n    case 'password':\n      url[part] = encodeURIComponent(value);\n      break;\n\n    case 'auth':\n      var index = value.indexOf(':');\n\n      if (~index) {\n        url.username = value.slice(0, index);\n        url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n        url.password = value.slice(index + 1);\n        url.password = encodeURIComponent(decodeURIComponent(url.password));\n      } else {\n        url.username = encodeURIComponent(decodeURIComponent(value));\n      }\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.auth = url.password ? url.username +':'+ url.password : url.username;\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , host = url.host\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result =\n    protocol +\n    ((url.protocol && url.slashes) || isSpecial(url.protocol) ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  } else if (url.password) {\n    result += ':'+ url.password;\n    result += '@';\n  } else if (\n    url.protocol !== 'file:' &&\n    isSpecial(url.protocol) &&\n    !host &&\n    url.pathname !== '/'\n  ) {\n    //\n    // Add back the empty userinfo, otherwise the original invalid URL\n    // might be transformed into a valid one with `url.pathname` as host.\n    //\n    result += '@';\n  }\n\n  //\n  // Trailing colon is removed from `url.host` when it is parsed. If it still\n  // ends with a colon, then add back the trailing colon that was removed. This\n  // prevents an invalid URL from being transformed into a valid one.\n  //\n  if (host[host.length - 1] === ':') host += ':';\n  result += host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n", "describe('url-parse', function () {\n  'use strict';\n\n  var assume = require('assume')\n    , parse = require('../');\n\n  it('exposes parse as a function', function () {\n    assume(parse).is.a('function');\n  });\n\n  it('exposes the querystring module', function () {\n    assume(parse.qs).equals(require('querystringify'));\n  });\n\n  it('exposes the location function', function () {\n    assume(parse.location).is.a('function');\n  });\n\n  it('exposes the extractProtocol function', function () {\n    assume(parse.extractProtocol).is.a('function');\n  });\n\n  it('defaults to empty address to return valid URL instance', function () {\n    var url = parse();\n\n    assume(url).to.be.an('object');\n    assume(url.pathname).to.be.a('string');\n    assume(url.host).to.be.a('string');\n    assume(url.hostname).to.be.a('string');\n  });\n\n  it('works when the global variable is not defined', function () {\n    var globalVar = global;\n    global = undefined;\n    var url = parse('http://google.com/?foo=bar', true);\n\n    assume(url).to.be.an('object');\n    assume(url.pathname).to.be.a('string');\n    assume(url.host).to.be.a('string');\n    assume(url.hostname).to.be.a('string');\n\n    global = globalVar;\n  });\n\n  describe('trimLeft', function () {\n    it('is a function', function () {\n      assume(parse.trimLeft).is.a('function');\n    });\n\n    it('removes whitespace on the left', function () {\n      assume(parse.trimLeft('  lol')).equals('lol');\n    });\n\n    it('calls toString on a given value', function () {\n      //\n      // When users pass in `window.location` it's not an actual string\n      // so you can't replace on it. So it needs to be cast to a string.\n      //\n      var fake = {\n        toString: function () {\n          return 'wat';\n        }\n      };\n\n      assume(parse.trimLeft(fake)).equals('wat');\n    });\n  });\n\n  describe('extractProtocol', function () {\n    it('extracts the protocol data', function () {\n      assume(parse.extractProtocol('http://example.com')).eql({\n        slashes: true,\n        protocol: 'http:',\n        rest: 'example.com',\n        slashesCount: 2\n      });\n    });\n\n    it('extracts the protocol data for nothing', function () {\n      assume(parse.extractProtocol('')).eql({\n        slashes: false,\n        protocol: '',\n        rest: '',\n        slashesCount: 0\n      });\n    });\n\n    it('correctly resolves paths', function () {\n      assume(parse.extractProtocol('/foo')).eql({\n        slashes: false,\n        protocol: '',\n        rest: '/foo',\n        slashesCount: 1\n      });\n\n      assume(parse.extractProtocol('//foo/bar')).eql({\n        slashes: true,\n        protocol: '',\n        rest: '//foo/bar',\n        slashesCount: 2\n      });\n    });\n\n    it('does not truncate the input string', function () {\n      var input = 'foo\\x0bbar\\x0cbaz\\u2028qux\\u2029';\n\n      assume(parse.extractProtocol(input)).eql({\n        slashes: false,\n        protocol: '',\n        rest: input,\n        slashesCount: 0\n      });\n    });\n\n    it('trimsLeft', function () {\n      assume(parse.extractProtocol('\\x0b\\x0c javascript://foo')).eql({\n        slashes: true,\n        protocol: 'javascript:',\n        rest: 'foo',\n        slashesCount: 2\n      });\n    });\n\n    it('removes CR, HT, and LF', function () {\n      assume(parse.extractProtocol('jav\\n\\rasc\\nript\\r:/\\t/fo\\no')).eql({\n        slashes: true,\n        protocol: 'javascript:',\n        rest: 'foo',\n        slashesCount: 2\n      });\n    });\n  });\n\n  it('parses the query string into an object', function () {\n    var url = 'http://google.com/?foo=bar'\n      , data = parse(url, true);\n\n    assume(data.query).is.a('object');\n    assume(data.query.foo).equals('bar');\n\n    url = 'http://google.com/';\n    data = parse(url, true);\n\n    assume(data.query).is.a('object');\n    assume(data.query).is.empty();\n  });\n\n  it('does not add question mark to href if query string is empty', function () {\n    var url = 'http://google.com/'\n      , data = parse(url, true);\n\n    assume(data.href).equals(url);\n  });\n\n  it('allows a custom function as parser', function () {\n    var url = 'http://google.com/?foo=bar'\n      , data = parse(url, function () { return '1337'; });\n\n    assume(data.query).equals('1337');\n  });\n\n  it('allows a custom stringify function', function () {\n    var url = 'http://google.com/?foo=bar'\n      , data = parse(url, true)\n      , str;\n\n    str = data.toString(function () { return 'lolcakes'; });\n    assume(str).equals('http://google.com/?lolcakes');\n  });\n\n  it('allows a custom location object', function () {\n    var url = '/foo?foo=bar'\n      , data = parse(url, parse('http://google.com'));\n\n    assume(data.href).equals('http://google.com/foo?foo=bar');\n  });\n\n  it('is blob: location aware', function () {\n    var blob = {\n      'href': 'blob:https%3A//gist.github.com/3f272586-6dac-4e29-92d0-f674f2dde618',\n      'pathname': 'https%3A//gist.github.com/3f272586-6dac-4e29-92d0-f674f2dde618',\n      'origin': 'https://gist.github.com',\n      'protocol': 'blob:',\n      'hostname': '',\n      'search': '',\n      'hash': '',\n      'host': '',\n      'port': ''\n    };\n\n    var url = '/unshiftio/url-parse'\n      , data = parse(url, blob);\n\n    assume(data.href).equals('https://gist.github.com/unshiftio/url-parse');\n  });\n\n  it('can parse complex urls multiple times without errors', function () {\n    var url = 'https://www.mozilla.org/en-US/firefox/34.0/whatsnew/?oldversion=33.1';\n\n    for (var i = 0; i < 100; i++) {\n      parse(url);\n    }\n  });\n\n  it('converts hostname to lowercase', function () {\n    var url = 'HTTP://fOo.eXaMPle.com';\n\n    assume(parse(url).hostname).equals('foo.example.com');\n  });\n\n  it('does not lowercase the path', function () {\n    var url = 'HTTP://X.COM/Y/Z';\n\n    assume(parse(url).pathname).equals('/Y/Z');\n  });\n\n  it('removes default port numbers', function () {\n    var url = 'http://example.com:80'\n      , parsed = parse(url);\n\n    assume(parsed.port).equals('');\n    assume(parsed.pathname).equals('/');\n    assume(parsed.host).equals('example.com');\n    assume(parsed.hostname).equals('example.com');\n    assume(parsed.href).equals('http://example.com/');\n  });\n\n  it('understands an / as pathname', function () {\n    var url = 'http://example.com:80/'\n      , parsed = parse(url);\n\n    assume(parsed.port).equals('');\n    assume(parsed.username).equals('');\n    assume(parsed.password).equals('');\n    assume(parsed.pathname).equals('/');\n    assume(parsed.host).equals('example.com');\n    assume(parsed.hostname).equals('example.com');\n    assume(parsed.href).equals('http://example.com/');\n  });\n\n  it('correctly parses pathnames for relative paths', function () {\n    var url = '/dataApi/PROD/ws'\n     , parsed = parse(url, 'http://localhost:3000/PROD/trends');\n\n    assume(parsed.pathname).equals('/dataApi/PROD/ws');\n\n    url = '/sections/?project=default'\n    parsed = parse(url, 'http://example.com/foo/bar');\n\n    assume(parsed.pathname).equals('/sections/');\n    assume(parsed.hostname).equals('example.com');\n    assume(parsed.href).equals('http://example.com/sections/?project=default');\n  });\n\n  it('does not care about spaces', function () {\n    var url = 'http://x.com/path?that\\'s#all, folks'\n      , parsed = parse(url);\n\n    assume(parsed.port).equals('');\n    assume(parsed.username).equals('');\n    assume(parsed.password).equals('');\n    assume(parsed.pathname).equals('/path');\n    assume(parsed.hash).equal('#all, folks');\n    assume(parsed.query).equal('?that\\'s');\n    assume(parsed.host).equals('x.com');\n    assume(parsed.hostname).equals('x.com');\n  });\n\n  it('accepts + in the url', function () {\n    var url = 'http://x.y.com+a/b/c'\n      , parsed = parse(url);\n\n    assume(parsed.protocol).equals('http:');\n    assume(parsed.host).equals('x.y.com+a');\n    assume(parsed.hostname).equals('x.y.com+a');\n    assume(parsed.pathname).equals('/b/c');\n  });\n\n  it('ignores \\\\ in pathnames', function () {\n    var url = 'http://google.com:80\\\\@yahoo.com/#what\\\\is going on'\n      , parsed = parse(url);\n\n    assume(parsed.port).equals('');\n    assume(parsed.username).equals('');\n    assume(parsed.password).equals('');\n    assume(parsed.hostname).equals('google.com');\n    assume(parsed.hash).equals('#what\\\\is going on');\n\n    parsed = parse('http://yolo.com\\\\what-is-up.com');\n    assume(parsed.pathname).equals('/what-is-up.com');\n  });\n\n  it('correctly ignores multiple slashes //', function () {\n    var url = '////what-is-up.com'\n      , parsed = parse(url, parse('http://google.com'));\n\n    assume(parsed.host).equals('what-is-up.com');\n    assume(parsed.href).equals('http://what-is-up.com/');\n\n    url = '\\\\\\\\\\\\\\\\what-is-up.com'\n    parsed = parse(url, parse('http://google.com'));\n\n    assume(parsed.host).equals('what-is-up.com');\n    assume(parsed.href).equals('http://what-is-up.com/');\n  });\n\n  it('ignores slashes after the protocol for special URLs', function () {\n    var url = 'https:\\\\/github.com/foo/bar'\n      , parsed = parse(url);\n\n    assume(parsed.host).equals('github.com');\n    assume(parsed.hostname).equals('github.com');\n    assume(parsed.pathname).equals('/foo/bar');\n    assume(parsed.slashes).is.true();\n    assume(parsed.href).equals('https://github.com/foo/bar');\n\n    url = 'https:/\\\\/\\\\/\\\\github.com/foo/bar';\n    parsed = parse(url);\n    assume(parsed.host).equals('github.com');\n    assume(parsed.hostname).equals('github.com');\n    assume(parsed.pathname).equals('/foo/bar');\n    assume(parsed.slashes).is.true();\n    assume(parsed.href).equals('https://github.com/foo/bar');\n\n    url = 'https:/github.com/foo/bar';\n    parsed = parse(url);\n    assume(parsed.host).equals('github.com');\n    assume(parsed.pathname).equals('/foo/bar');\n    assume(parsed.slashes).is.true();\n    assume(parsed.href).equals('https://github.com/foo/bar');\n\n    url = 'https:\\\\github.com/foo/bar';\n    parsed = parse(url);\n    assume(parsed.host).equals('github.com');\n    assume(parsed.pathname).equals('/foo/bar');\n    assume(parsed.slashes).is.true();\n    assume(parsed.href).equals('https://github.com/foo/bar');\n\n    url = 'https:github.com/foo/bar';\n    parsed = parse(url);\n    assume(parsed.host).equals('github.com');\n    assume(parsed.pathname).equals('/foo/bar');\n    assume(parsed.slashes).is.true();\n    assume(parsed.href).equals('https://github.com/foo/bar');\n\n    url = 'https:github.com/foo/bar';\n    parsed = parse(url);\n    assume(parsed.host).equals('github.com');\n    assume(parsed.pathname).equals('/foo/bar');\n    assume(parsed.slashes).is.true();\n    assume(parsed.href).equals('https://github.com/foo/bar');\n  });\n\n  it('handles slashes after the protocol for non special URLs', function () {\n    var url = 'foo:example.com'\n      , parsed = parse(url);\n\n    assume(parsed.hostname).equals('');\n    assume(parsed.pathname).equals('example.com');\n    assume(parsed.href).equals('foo:example.com');\n    assume(parsed.slashes).is.false();\n\n    url = 'foo:/example.com';\n    parsed = parse(url);\n    assume(parsed.hostname).equals('');\n    assume(parsed.pathname).equals('/example.com');\n    assume(parsed.href).equals('foo:/example.com');\n    assume(parsed.slashes).is.false();\n\n    url = 'foo:\\\\example.com';\n    parsed = parse(url);\n    assume(parsed.hostname).equals('');\n    assume(parsed.pathname).equals('\\\\example.com');\n    assume(parsed.href).equals('foo:\\\\example.com');\n    assume(parsed.slashes).is.false();\n\n    url = 'foo://example.com';\n    parsed = parse(url);\n    assume(parsed.hostname).equals('example.com');\n    assume(parsed.pathname).equals('');\n    assume(parsed.href).equals('foo://example.com');\n    assume(parsed.slashes).is.true();\n\n    url = 'foo:\\\\\\\\example.com';\n    parsed = parse(url);\n    assume(parsed.hostname).equals('');\n    assume(parsed.pathname).equals('\\\\\\\\example.com');\n    assume(parsed.href).equals('foo:\\\\\\\\example.com');\n    assume(parsed.slashes).is.false();\n\n    url = 'foo:///example.com';\n    parsed = parse(url);\n    assume(parsed.hostname).equals('');\n    assume(parsed.pathname).equals('/example.com');\n    assume(parsed.href).equals('foo:///example.com');\n    assume(parsed.slashes).is.true();\n\n    url = 'foo:\\\\\\\\\\\\example.com';\n    parsed = parse(url);\n    assume(parsed.hostname).equals('');\n    assume(parsed.pathname).equals('\\\\\\\\\\\\example.com');\n    assume(parsed.href).equals('foo:\\\\\\\\\\\\example.com');\n    assume(parsed.slashes).is.false();\n\n    url = '\\\\\\\\example.com/foo/bar';\n    parsed = parse(url, 'foo://bar.com');\n    assume(parsed.hostname).equals('bar.com');\n    assume(parsed.pathname).equals('/\\\\\\\\example.com/foo/bar');\n    assume(parsed.href).equals('foo://bar.com/\\\\\\\\example.com/foo/bar');\n    assume(parsed.slashes).is.true();\n  });\n\n  it('does not readd slashes to href if there is no protocol', function() {\n    var parsed = parse('//example.com', {});\n\n    assume(parsed.pathname).equals('//example.com');\n    assume(parsed.href).equals('//example.com');\n  });\n\n  it('removes CR, HT, and LF', function () {\n    var parsed = parse(\n      'ht\\ntp://a\\rb:\\tcd@exam\\rple.com:80\\t80/pat\\thname?fo\\no=b\\rar#ba\\tz'\n    );\n\n    assume(parsed.protocol).equals('http:');\n    assume(parsed.username).equals('ab');\n    assume(parsed.password).equals('cd');\n    assume(parsed.host).equals('example.com:8080');\n    assume(parsed.hostname).equals('example.com');\n    assume(parsed.port).equals('8080');\n    assume(parsed.pathname).equals('/pathname');\n    assume(parsed.query).equals('?foo=bar');\n    assume(parsed.hash).equals('#baz');\n    assume(parsed.href).equals(\n      'http://ab:cd@example.com:8080/pathname?foo=bar#baz'\n    );\n\n    parsed = parse('s\\nip:al\\rice@atl\\tanta.com');\n\n    assume(parsed.protocol).equals('sip:');\n    assume(parsed.pathname).equals('alice@atlanta.com');\n    assume(parsed.href).equals('sip:alice@atlanta.com');\n  });\n\n  it('handles the case where the port is specified but empty', function () {\n    var parsed = parse('http://example.com:');\n\n    assume(parsed.protocol).equals('http:');\n    assume(parsed.port).equals('');\n    assume(parsed.host).equals('example.com');\n    assume(parsed.hostname).equals('example.com');\n    assume(parsed.pathname).equals('/');\n    assume(parsed.origin).equals('http://example.com');\n    assume(parsed.href).equals('http://example.com/');\n\n    parsed = parse('http://example.com::');\n\n    assume(parsed.protocol).equals('http:');\n    assume(parsed.port).equals('');\n    assume(parsed.host).equals('example.com:');\n    assume(parsed.hostname).equals('example.com:');\n    assume(parsed.pathname).equals('/');\n    assume(parsed.origin).equals('http://example.com:');\n    assume(parsed.href).equals('http://example.com::/');\n  });\n\n  describe('origin', function () {\n    it('generates an origin property', function () {\n      var url = 'http://google.com:80/pathname'\n        , parsed = parse(url);\n\n      assume(parsed.origin).equals('http://google.com');\n    });\n\n    it('is lowercased', function () {\n      var url = 'HTTP://gOogle.cOm:80/pathname'\n        , parsed = parse(url);\n\n      assume(parsed.origin).equals('http://google.com');\n    });\n\n    it('sets null if no hostname is specified', function () {\n      var url = 'http://'\n        , parsed = parse(url, {});\n\n      assume(parsed.origin).equals('null');\n    });\n\n    it('is null for non special URLs', function () {\n      var o = parse('foo://example.com/pathname');\n      assume(o.hostname).equals('example.com');\n      assume(o.pathname).equals('/pathname');\n      assume(o.origin).equals('null');\n    });\n\n    it('removes default ports for http', function () {\n      var o = parse('http://google.com:80/pathname');\n      assume(o.origin).equals('http://google.com');\n\n      o = parse('http://google.com:80');\n      assume(o.origin).equals('http://google.com');\n\n      o = parse('http://google.com');\n      assume(o.origin).equals('http://google.com');\n\n      o = parse('https://google.com:443/pathname');\n      assume(o.origin).equals('https://google.com');\n\n      o = parse('http://google.com:443/pathname');\n      assume(o.origin).equals('http://google.com:443');\n\n      o = parse('https://google.com:80/pathname');\n      assume(o.origin).equals('https://google.com:80');\n    });\n\n    it('handles file:// based urls as null', function () {\n      var o = parse('file://google.com/pathname');\n      assume(o.origin).equals('null');\n    });\n\n    it('removes default ports for ws', function () {\n      var o = parse('ws://google.com:80/pathname');\n      assume(o.origin).equals('ws://google.com');\n\n      o = parse('wss://google.com:443/pathname');\n      assume(o.origin).equals('wss://google.com');\n\n      o = parse('ws://google.com:443/pathname');\n      assume(o.origin).equals('ws://google.com:443');\n\n      o = parse('wss://google.com:80/pathname');\n      assume(o.origin).equals('wss://google.com:80');\n    });\n\n    it('maintains the port number for non-default port numbers', function () {\n      var parsed = parse('http://google.com:8080/pathname');\n\n      assume(parsed.host).equals('google.com:8080');\n      assume(parsed.href).equals('http://google.com:8080/pathname');\n    });\n  });\n\n  describe('protocol', function () {\n    it('extracts the right protocol from a url', function () {\n      var testData = [\n        {\n          href: 'http://example.com/',\n          protocol: 'http:',\n          pathname: '/',\n          slashes: true\n        },\n        {\n          href: 'ws://example.com/',\n          protocol: 'ws:',\n          pathname: '/',\n          slashes: true\n        },\n        {\n          href: 'wss://example.com/',\n          protocol: 'wss:',\n          pathname: '/',\n          slashes: true\n        },\n        {\n          href: 'mailto:test@example.com',\n          pathname: 'test@example.com',\n          protocol: 'mailto:',\n          slashes: false\n        },\n        {\n          href: 'data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E',\n          pathname: 'text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E',\n          protocol: 'data:',\n          slashes: false,\n        },\n        {\n          href: 'sip:alice@atlanta.com',\n          pathname: 'alice@atlanta.com',\n          protocol: 'sip:',\n          slashes: false,\n        }\n      ];\n\n      var data, test;\n      for (var i = 0, len = testData.length; i < len; ++i) {\n        test = testData[i];\n        data = parse(test.href);\n\n        assume(data.protocol).equals(test.protocol);\n        assume(data.pathname).equals(test.pathname);\n        assume(data.slashes).equals(test.slashes);\n        assume(data.href).equals(test.href);\n      }\n    });\n\n    it('converts protocol to lowercase', function () {\n      var url = 'HTTP://example.com';\n\n      assume(parse(url).protocol).equals('http:');\n    });\n\n    it('correctly adds \":\" to protocol in final url string', function () {\n      var data = parse('google.com/foo', {});\n      data.set('protocol', 'https');\n      assume(data.href).equals('https://google.com/foo');\n\n      data = parse('https://google.com/foo');\n      data.protocol = 'http';\n      assume(data.toString()).equals('http://google.com/foo');\n\n      data = parse('http://google.com/foo');\n      data.set('protocol', 'https:');\n      assume(data.href).equals('https://google.com/foo');\n    });\n\n    it('handles the file: protocol', function () {\n      var slashes = ['', '/', '//', '///'];\n      var data;\n      var url;\n\n      for (var i = 0; i < slashes.length; i++) {\n        data = parse('file:' + slashes[i]);\n        assume(data.protocol).equals('file:');\n        assume(data.pathname).equals('/');\n        assume(data.href).equals('file:///');\n      }\n\n      url = 'file:////';\n      data = parse(url);\n      assume(data.protocol).equals('file:');\n      assume(data.pathname).equals('//');\n      assume(data.href).equals(url);\n\n      url = 'file://///';\n      data = parse(url);\n      assume(data.protocol).equals('file:');\n      assume(data.pathname).equals('///');\n      assume(data.href).equals(url);\n\n      url = 'file:///Users/foo/BAR/baz.pdf';\n      data = parse(url);\n      assume(data.protocol).equals('file:');\n      assume(data.pathname).equals('/Users/foo/BAR/baz.pdf');\n      assume(data.href).equals(url);\n\n      url = 'file:///foo/bar?baz=qux#hash';\n      data = parse(url);\n      assume(data.protocol).equals('file:');\n      assume(data.hash).equals('#hash');\n      assume(data.query).equals('?baz=qux');\n      assume(data.pathname).equals('/foo/bar');\n      assume(data.href).equals(url);\n\n      data = parse('file://c:\\\\foo\\\\bar\\\\');\n      assume(data.protocol).equals('file:');\n      assume(data.pathname).equals('/c:/foo/bar/');\n      assume(data.href).equals('file:///c:/foo/bar/');\n\n      data = parse('file://host/file');\n      assume(data.protocol).equals('file:');\n      assume(data.host).equals('host');\n      assume(data.hostname).equals('host');\n      assume(data.pathname).equals('/file');\n      assume(data.href).equals('file://host/file');\n\n      data = parse('foo/bar', 'file:///baz');\n      assume(data.protocol).equals('file:');\n      assume(data.pathname).equals('/foo/bar');\n      assume(data.href).equals('file:///foo/bar');\n\n      data = parse('foo/bar', 'file:///baz/');\n      assume(data.protocol).equals('file:');\n      assume(data.pathname).equals('/baz/foo/bar');\n      assume(data.href).equals('file:///baz/foo/bar');\n    });\n  });\n\n  describe('ip', function () {\n    it('parses ipv6', function () {\n      var url = 'http://[1080:0:0:0:8:800:200C:417A]:61616/foo/bar?q=z'\n        , parsed = parse(url);\n\n      assume(parsed.port).equals('61616');\n      assume(parsed.query).equals('?q=z');\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.hostname).equals('[1080:0:0:0:8:800:200c:417a]');\n      assume(parsed.pathname).equals('/foo/bar');\n      assume(parsed.href).equals('http://[1080:0:0:0:8:800:200c:417a]:61616/foo/bar?q=z');\n    });\n\n    it('parses ipv6 with auth', function () {\n      var url = 'http://user:password@[3ffe:2a00:100:7031::1]:8080/'\n        , parsed = parse(url);\n\n      assume(parsed.username).equals('user');\n      assume(parsed.password).equals('password');\n      assume(parsed.host).equals('[3ffe:2a00:100:7031::1]:8080');\n      assume(parsed.hostname).equals('[3ffe:2a00:100:7031::1]');\n      assume(parsed.pathname).equals('/');\n      assume(parsed.href).equals(url);\n    });\n\n    it('parses ipv4', function () {\n      var url = 'http://222.148.142.13:61616/foo/bar?q=z'\n        , parsed = parse(url);\n\n      assume(parsed.port).equals('61616');\n      assume(parsed.query).equals('?q=z');\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.hostname).equals('222.148.142.13');\n      assume(parsed.pathname).equals('/foo/bar');\n      assume(parsed.href).equals(url);\n    });\n  });\n\n  describe('auth', function () {\n    it('does not lowercase the USER:PASS', function () {\n      var url = 'HTTP://USER:PASS@EXAMPLE.COM'\n        , parsed = parse(url);\n\n      assume(parsed.username).equals('USER');\n      assume(parsed.password).equals('PASS');\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.host).equals('example.com');\n      assume(parsed.hostname).equals('example.com');\n    });\n\n    it('accepts @ in pathnames', function () {\n      var url = 'http://mt0.google.com/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s='\n        , parsed = parse(url);\n\n      assume(parsed.pathname).equals('/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=');\n      assume(parsed.username).equals('');\n      assume(parsed.password).equals('');\n    });\n\n    it('does not require passwords for auth', function () {\n      var url = 'http://user@www.example.com/'\n        , parsed = parse(url);\n\n      assume(parsed.password).equals('');\n      assume(parsed.pathname).equals('/');\n      assume(parsed.username).equals('user');\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.hostname).equals('www.example.com');\n      assume(parsed.href).equals(url);\n    });\n\n    it('handles @ in username', function () {\n      var url = 'http://user@@www.example.com/'\n        , parsed = parse(url);\n\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.auth).equals('user%40');\n      assume(parsed.username).equals('user%40');\n      assume(parsed.password).equals('');\n      assume(parsed.hostname).equals('www.example.com');\n      assume(parsed.pathname).equals('/');\n      assume(parsed.href).equals('http://user%40@www.example.com/');\n\n      url = 'http://user%40@www.example.com/';\n      parsed = parse(url);\n\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.auth).equals('user%40');\n      assume(parsed.username).equals('user%40');\n      assume(parsed.password).equals('');\n      assume(parsed.hostname).equals('www.example.com');\n      assume(parsed.pathname).equals('/');\n      assume(parsed.href).equals('http://user%40@www.example.com/');\n    });\n\n    it('handles @ in password', function () {\n      var url = 'http://user@:pas:s@@www.example.com/'\n        , parsed = parse(url);\n\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.auth).equals('user%40:pas%3As%40');\n      assume(parsed.username).equals('user%40');\n      assume(parsed.password).equals('pas%3As%40');\n      assume(parsed.hostname).equals('www.example.com');\n      assume(parsed.pathname).equals('/');\n      assume(parsed.href).equals('http://user%40:pas%3As%40@www.example.com/');\n\n      url = 'http://user%40:pas%3As%40@www.example.com/'\n      parsed = parse(url);\n\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.auth).equals('user%40:pas%3As%40');\n      assume(parsed.username).equals('user%40');\n      assume(parsed.password).equals('pas%3As%40');\n      assume(parsed.hostname).equals('www.example.com');\n      assume(parsed.pathname).equals('/');\n      assume(parsed.href).equals('http://user%40:pas%3As%40@www.example.com/');\n    });\n\n    it('adds @ to href if auth and host are empty', function () {\n      var parsed, i = 0;\n      var urls = [\n        'http:@/127.0.0.1',\n        'http::@/127.0.0.1',\n        'http:/@/127.0.0.1',\n        'http:/:@/127.0.0.1',\n        'http://@/127.0.0.1',\n        'http://:@/127.0.0.1',\n        'http:///@/127.0.0.1',\n        'http:///:@/127.0.0.1'\n      ];\n\n      for (; i < urls.length; i++) {\n        parsed = parse(urls[i]);\n\n        assume(parsed.protocol).equals('http:');\n        assume(parsed.auth).equals('');\n        assume(parsed.username).equals('');\n        assume(parsed.password).equals('');\n        assume(parsed.host).equals('');\n        assume(parsed.hostname).equals('');\n        assume(parsed.pathname).equals('/127.0.0.1');\n        assume(parsed.origin).equals('null');\n        assume(parsed.href).equals('http://@/127.0.0.1');\n        assume(parsed.toString()).equals('http://@/127.0.0.1');\n      }\n\n      urls = [\n        'http:@/',\n        'http:@',\n        'http::@/',\n        'http::@',\n        'http:/@/',\n        'http:/@',\n        'http:/:@/',\n        'http:/:@',\n        'http://@/',\n        'http://@',\n        'http://:@/',\n        'http://:@'\n      ];\n\n      for (i = 0; i < urls.length; i++) {\n        parsed = parse(urls[i]);\n\n        assume(parsed.protocol).equals('http:');\n        assume(parsed.auth).equals('');\n        assume(parsed.username).equals('');\n        assume(parsed.password).equals('');\n        assume(parsed.host).equals('');\n        assume(parsed.hostname).equals('');\n        assume(parsed.pathname).equals('/');\n        assume(parsed.origin).equals('null');\n        assume(parsed.href).equals('http:///');\n        assume(parsed.toString()).equals('http:///');\n      }\n    });\n  });\n\n  it('accepts multiple ???', function () {\n    var url = 'http://mt0.google.com/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s=';\n    assume(parse(url).query).equals('???&hl=en&src=api&x=2&y=2&z=3&s=');\n  });\n\n  it('accepts a string as source argument', function () {\n    var data = parse('/foo', 'http://sub.example.com/bar?foo=bar#hash');\n\n    assume(data.port).equals('');\n    assume(data.host).equals('sub.example.com');\n    assume(data.href).equals('http://sub.example.com/foo');\n  });\n\n  describe('inheritance', function () {\n    it('does not inherit port numbers for non relative urls', function () {\n      var data = parse('http://localhost', parse('http://sub.example.com:808/'));\n\n      assume(data.port).equals('');\n      assume(data.host).equals('localhost');\n      assume(data.href).equals('http://localhost/');\n    });\n\n    it('inherits port numbers for relative urls', function () {\n      var data = parse('/foo', parse('http://sub.example.com:808/'));\n\n      assume(data.port).equals('808');\n      assume(data.hostname).equals('sub.example.com');\n      assume(data.host).equals('sub.example.com:808');\n      assume(data.href).equals('http://sub.example.com:808/foo');\n    });\n\n    it('inherits slashes for relative urls', function () {\n      var data = parse('/foo', {\n        hash: '',\n        host: 'example.com',\n        hostname: 'example.com',\n        href: 'http://example.com/',\n        origin: 'http://example.com',\n        password: '',\n        pathname: '/',\n        port: '',\n        protocol: 'http:',\n        search: ''\n      });\n\n      assume(data.slashes).equals(true);\n      assume(data.href).equals('http://example.com/foo');\n\n      data = parse('/foo', {\n        auth: null,\n        hash: null,\n        host: 'example.com',\n        hostname: 'example.com',\n        href: 'http://example.com/',\n        path: '/',\n        pathname: '/',\n        port: null,\n        protocol: 'http:',\n        query: null,\n        search: null,\n        slashes: true\n      });\n\n      assume(data.slashes).equals(true);\n      assume(data.href).equals('http://example.com/foo');\n    });\n\n    it('inherits protocol for relative protocols', function () {\n      var lolcation = parse('http://sub.example.com:808/')\n        , data = parse('//foo.com/foo', lolcation);\n\n      assume(data.port).equals('');\n      assume(data.host).equals('foo.com');\n      assume(data.protocol).equals('http:');\n      assume(data.href).equals('http://foo.com/foo');\n    });\n\n    it('does not inherit pathname for non relative urls', function () {\n      var data = parse('http://localhost', parse('http://foo:bar@sub.example.com/bar?foo=bar#hash'));\n\n      assume(data.port).equals('');\n      assume(data.host).equals('localhost');\n      assume(data.href).equals('http://localhost/');\n    });\n\n    it('resolves pathname for relative urls', function () {\n      var data, i = 0;\n      var tests = [\n        ['', 'http://foo.com', '/'],\n        ['', 'http://foo.com/', '/'],\n        ['', 'http://foo.com/a', '/a'],\n        ['a', 'http://foo.com', '/a'],\n        ['a/', 'http://foo.com', '/a/'],\n        ['b/c', 'http://foo.com/a', '/b/c'],\n        ['b/c', 'http://foo.com/a/', '/a/b/c'],\n        ['.', 'http://foo.com', '/'],\n        ['./', 'http://foo.com', '/'],\n        ['./.', 'http://foo.com', '/'],\n        ['.', 'http://foo.com/a', '/'],\n        ['.', 'http://foo.com/a/', '/a/'],\n        ['./', 'http://foo.com/a/', '/a/'],\n        ['./.', 'http://foo.com/a/', '/a/'],\n        ['./b', 'http://foo.com/a/', '/a/b'],\n        ['..', 'http://foo.com', '/'],\n        ['../', 'http://foo.com', '/'],\n        ['../..', 'http://foo.com', '/'],\n        ['..', 'http://foo.com/a/b', '/'],\n        ['..', 'http://foo.com/a/b/', '/a/'],\n        ['../..', 'http://foo.com/a/b', '/'],\n        ['../..', 'http://foo.com/a/b/', '/'],\n        ['../../../../c', 'http://foo.com/a/b/', '/c'],\n        ['./../d', 'http://foo.com/a/b/c', '/a/d'],\n        ['d/e/f/./../../g', 'http://foo.com/a/b/c', '/a/b/d/g']\n      ];\n\n      for (; i < tests.length; i++) {\n        data = parse(tests[i][0], tests[i][1]);\n        assume(data.pathname).equals(tests[i][2]);\n      }\n    });\n\n    it('does not inherit hashes and query strings from source object', function () {\n      var data = parse('/foo', parse('http://sub.example.com/bar?foo=bar#hash'));\n\n      assume(data.port).equals('');\n      assume(data.host).equals('sub.example.com');\n      assume(data.href).equals('http://sub.example.com/foo');\n    });\n\n    it('does not inherit auth from source object', function () {\n      var base = parse('http://foo:bar@sub.example.com')\n        , data = parse('/foo', base);\n\n      assume(data.port).equals('');\n      assume(data.username).equals('');\n      assume(data.password).equals('');\n      assume(data.host).equals('sub.example.com');\n      assume(data.href).equals('http://sub.example.com/foo');\n    });\n  });\n\n  describe('#set', function () {\n    it('correctly updates the host when setting port', function () {\n      var data = parse('http://google.com/foo');\n\n      assume(data.set('port', 8080)).equals(data);\n\n      assume(data.host).equals('google.com:8080');\n      assume(data.href).equals('http://google.com:8080/foo');\n    });\n\n    it('correctly updates the host when setting port (IPv6)', function () {\n      var data = parse('http://[7886:3423::1233]/foo');\n\n      assume(data.set('port', 8080)).equals(data);\n\n      assume(data.host).equals('[7886:3423::1233]:8080');\n      assume(data.href).equals('http://[7886:3423::1233]:8080/foo');\n    });\n\n    it('removes querystring and hash', function () {\n      var data = parse('https://thisanurl.com/?swag=yolo#representing');\n\n      data.set('query', '');\n      data.set('hash', '');\n\n      assume(data.href).equals('https://thisanurl.com/');\n    });\n\n    it('only sets port when its not default', function () {\n      var data = parse('http://google.com/foo');\n\n      assume(data.set('port', 80)).equals(data);\n\n      assume(data.host).equals('google.com');\n      assume(data.href).equals('http://google.com/foo');\n\n      assume(data.set('port', 443)).equals(data);\n      assume(data.host).equals('google.com:443');\n      assume(data.href).equals('http://google.com:443/foo');\n    });\n\n    it('only sets port when its not default (IPv6)', function () {\n      var data = parse('http://[7886:3423::1233]/foo');\n\n      assume(data.set('port', 80)).equals(data);\n\n      assume(data.host).equals('[7886:3423::1233]');\n      assume(data.href).equals('http://[7886:3423::1233]/foo');\n\n      assume(data.set('port', 443)).equals(data);\n      assume(data.host).equals('[7886:3423::1233]:443');\n      assume(data.href).equals('http://[7886:3423::1233]:443/foo');\n    });\n\n    it('prepends / to pathname', function () {\n      var url = parse();\n\n      url\n        .set('protocol', 'http')\n        .set('host', 'example.com:80')\n        .set('pathname', 'will/get/slash/prepended');\n\n      assume(url.pathname).equals('/will/get/slash/prepended');\n      assume(url.href).equals('http://example.com:80/will/get/slash/prepended');\n\n      url.set('pathname', '');\n\n      assume(url.pathname).equals('');\n      assume(url.href).equals('http://example.com:80');\n\n      url.set('pathname', '/has/slash');\n\n      assume(url.pathname).equals('/has/slash');\n      assume(url.href).equals('http://example.com:80/has/slash');\n    });\n\n    it('updates query with object', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('query', { bar: 'foo' })).equals(data);\n\n      assume(data.query.foo).equals(undefined);\n      assume(data.query.bar).equals('foo');\n\n      assume(data.href).equals('http://google.com/?bar=foo');\n    });\n\n    it('updates query with a string', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('query', 'bar=foo')).equals(data);\n\n      assume(data.query.foo).equals(undefined);\n      assume(data.query.bar).equals('foo');\n\n      assume(data.href).equals('http://google.com/?bar=foo');\n\n      assume(data.set('query', '?baz=foo')).equals(data);\n\n      assume(data.query.bar).equals(undefined);\n      assume(data.query.baz).equals('foo');\n\n      assume(data.href).equals('http://google.com/?baz=foo');\n    });\n\n    it('allows custom parser when updating query', function() {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('query', 'bar=foo', function () { return '1337'; })).equals(data);\n\n      assume(data.query).equals('1337');\n\n      assume(data.href).equals('http://google.com/?1337');\n    });\n\n    it('throws error when updating query, if custom parser is not a function', function() {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(function () {\n        data.set('query', 'bar=foo', '1337');\n      }).throws(Error);\n\n      //\n      // `data` is unchanged.\n      //\n      assume(data.href).equals('http://google.com/?foo=bar');\n    });\n\n    it('prepends # to hash', function () {\n      var data = parse('http://example.com');\n\n      data.set('hash', 'usage');\n\n      assume(data.hash).equals('#usage');\n      assume(data.href).equals('http://example.com/#usage');\n\n      data.set('hash', '#license');\n\n      assume(data.hash).equals('#license');\n      assume(data.href).equals('http://example.com/#license');\n    });\n\n    it('updates the port when updating host', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('host', 'yahoo.com:808')).equals(data);\n\n      assume(data.hostname).equals('yahoo.com');\n      assume(data.host).equals('yahoo.com:808');\n      assume(data.port).equals('808');\n\n      assume(data.href).equals('http://yahoo.com:808/?foo=bar');\n    });\n\n    it('updates the port when updating host (IPv6)', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('host', '[56h7::1]:808')).equals(data);\n\n      assume(data.hostname).equals('[56h7::1]');\n      assume(data.host).equals('[56h7::1]:808');\n      assume(data.port).equals('808');\n\n      assume(data.href).equals('http://[56h7::1]:808/?foo=bar');\n    });\n\n    it('unsets the port when port is missing (IPv6)', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('host', '[56h7::1]')).equals(data);\n\n      assume(data.hostname).equals('[56h7::1]');\n      assume(data.host).equals('[56h7::1]');\n      assume(data.port).equals('');\n\n      assume(data.href).equals('http://[56h7::1]/?foo=bar');\n    });\n\n    it('unsets the port when the port is missing from host', function () {\n      var data = parse('http://google.com:8000/?foo=bar');\n\n      assume(data.set('host', 'yahoo.com')).equals(data);\n\n      assume(data.hostname).equals('yahoo.com');\n      assume(data.host).equals('yahoo.com');\n      assume(data.port).equals('');\n\n      assume(data.href).equals('http://yahoo.com/?foo=bar');\n    });\n\n    it('updates the host when updating hostname', function () {\n      var data = parse('http://google.com:808/?foo=bar');\n\n      assume(data.set('hostname', 'yahoo.com')).equals(data);\n\n      assume(data.hostname).equals('yahoo.com');\n      assume(data.host).equals('yahoo.com:808');\n      assume(data.port).equals('808');\n\n      assume(data.href).equals('http://yahoo.com:808/?foo=bar');\n    });\n\n    it('updates slashes when updating protocol', function() {\n      var data = parse('sip:alice@atlanta.com');\n\n      assume(data.set('protocol', 'https')).equals(data);\n\n      assume(data.href).equals('https://alice@atlanta.com');\n\n      assume(data.set('protocol', 'mailto', true)).equals(data);\n\n      assume(data.href).equals('mailto:alice@atlanta.com');\n    });\n\n    it('updates auth when updating username', function() {\n      var data = parse('https://example.com');\n\n      assume(data.set('username', 'foo')).equals(data);\n      assume(data.username).equals('foo');\n      assume(data.auth).equals('foo')\n      assume(data.href).equals('https://foo@example.com/');\n\n      data.set('username', '');\n\n      assume(data.username).equals('');\n      assume(data.auth).equals('')\n      assume(data.href).equals('https://example.com/');\n\n      data.set('username', 'foo:');\n\n      assume(data.username).equals('foo%3A');\n      assume(data.auth).equals('foo%3A')\n      assume(data.href).equals('https://foo%3A@example.com/');\n\n      data = parse('https://foo:bar@example.com')\n      data.set('username', 'baz');\n\n      assume(data.username).equals('baz');\n      assume(data.auth).equals('baz:bar')\n      assume(data.href).equals('https://baz:bar@example.com/');\n    });\n\n    it('updates auth when updating password', function() {\n      var data = parse('https://example.com');\n\n      assume(data.set('password', 'foo')).equals(data);\n      assume(data.password).equals('foo');\n      assume(data.auth).equals(':foo')\n      assume(data.href).equals('https://:foo@example.com/');\n\n      data.set('password', '');\n\n      assume(data.password).equals('');\n      assume(data.auth).equals('')\n      assume(data.href).equals('https://example.com/');\n\n      data.set('password', ':foo@');\n\n      assume(data.password).equals('%3Afoo%40');\n      assume(data.auth).equals(':%3Afoo%40')\n      assume(data.href).equals('https://:%3Afoo%40@example.com/');\n\n      data = parse('https://foo:bar@example.com')\n      data.set('password', 'baz');\n\n      assume(data.password).equals('baz');\n      assume(data.auth).equals('foo:baz')\n      assume(data.href).equals('https://foo:baz@example.com/');\n    });\n\n    it('updates username and password when updating auth', function() {\n      var data = parse('https://example.com');\n\n      assume(data.set('auth', 'foo:bar')).equals(data);\n      assume(data.username).equals('foo');\n      assume(data.password).equals('bar');\n      assume(data.href).equals('https://foo:bar@example.com/');\n\n      assume(data.set('auth', 'baz:')).equals(data);\n      assume(data.username).equals('baz');\n      assume(data.password).equals('');\n      assume(data.href).equals('https://baz@example.com/');\n\n      assume(data.set('auth', 'qux')).equals(data);\n      assume(data.username).equals('qux');\n      assume(data.password).equals('');\n      assume(data.href).equals('https://qux@example.com/');\n\n      assume(data.set('auth', ':quux')).equals(data);\n      assume(data.username).equals('');\n      assume(data.password).equals('quux');\n      assume(data.href).equals('https://:quux@example.com/');\n\n      assume(data.set('auth', 'user@:pass@')).equals(data);\n      assume(data.username).equals('user%40');\n      assume(data.password).equals('pass%40');\n      assume(data.href).equals('https://user%40:pass%40@example.com/');\n\n      assume(data.set('auth', 'user%40:pass%40')).equals(data);\n      assume(data.username).equals('user%40');\n      assume(data.password).equals('pass%40');\n      assume(data.href).equals('https://user%40:pass%40@example.com/');\n\n      assume(data.set('auth', 'user:pass:word')).equals(data);\n      assume(data.username).equals('user');\n      assume(data.password).equals('pass%3Aword');\n      assume(data.href).equals('https://user:pass%3Aword@example.com/');\n\n      assume(data.set('auth', 'user:pass%3Aword')).equals(data);\n      assume(data.username).equals('user');\n      assume(data.password).equals('pass%3Aword');\n      assume(data.href).equals('https://user:pass%3Aword@example.com/');\n    });\n\n    it('updates other values', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('protocol', 'https:')).equals(data);\n      assume(data.protocol).equals('https:');\n      assume(data.href).equals('https://google.com/?foo=bar');\n\n      data.set('username', 'foo');\n\n      assume(data.username).equals('foo');\n      assume(data.href).equals('https://foo@google.com/?foo=bar');\n    });\n\n    it('lowercases the required values', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      data.set('protocol', 'HTTPS:');\n      assume(data.protocol).equals('https:');\n      assume(data.href).equals('https://google.com/?foo=bar');\n\n      data.set('host', 'GOOGLE.LOL');\n      assume(data.host).equals('google.lol');\n      assume(data.href).equals('https://google.lol/?foo=bar');\n\n      data.set('hostname', 'YAhOo.COm');\n      assume(data.hostname).equals('yahoo.com');\n      assume(data.href).equals('https://yahoo.com/?foo=bar');\n    });\n\n    it('correctly updates the origin when host/protocol/port changes', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      data.set('protocol', 'HTTPS:');\n      assume(data.protocol).equals('https:');\n      assume(data.origin).equals('https://google.com');\n\n      data.set('port', '1337');\n      assume(data.port).equals('1337');\n      assume(data.origin).equals('https://google.com:1337');\n\n      data.set('protocol', 'file:');\n      assume(data.protocol).equals('file:');\n      assume(data.origin).equals('null');\n    });\n  });\n\n  describe('fuzzy', function () {\n    var fuzz = require('./fuzzy')\n      , times = 10;\n\n    for (var i = 0; i < times; i++) {\n      (function (spec) {\n        it('parses: '+ spec.href, function () {\n          var url = parse(spec.href)\n            , prop;\n\n          for (prop in spec) {\n            assume(url[prop]).equals(spec[prop]);\n          }\n        });\n      })(fuzz());\n    }\n  });\n});\n"], "fixing_code": ["'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , CRHTLF = /[\\n\\r\\t]/g\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\\\/]+)?([\\S\\s]*)/i\n  , windowsDriveLetter = /^[a-zA-Z]:/\n  , whitespace = /^[\\x00-\\x20\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+/;\n\n/**\n * Trim a given string.\n *\n * @param {String} str String to trim.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(whitespace, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address, url) {     // Sanitize what is left of the address\n    return isSpecial(url.protocol) ? address.replace(/\\\\/g, '/') : address;\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d*)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * Check whether a protocol scheme is special.\n *\n * @param {String} The protocol scheme of the URL\n * @return {Boolean} `true` if the protocol scheme is special, else `false`\n * @private\n */\nfunction isSpecial(scheme) {\n  return (\n    scheme === 'file:' ||\n    scheme === 'ftp:' ||\n    scheme === 'http:' ||\n    scheme === 'https:' ||\n    scheme === 'ws:' ||\n    scheme === 'wss:'\n  );\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @param {Object} location\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address, location) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n  location = location || {};\n\n  var match = protocolre.exec(address);\n  var protocol = match[1] ? match[1].toLowerCase() : '';\n  var forwardSlashes = !!match[2];\n  var otherSlashes = !!match[3];\n  var slashesCount = 0;\n  var rest;\n\n  if (forwardSlashes) {\n    if (otherSlashes) {\n      rest = match[2] + match[3] + match[4];\n      slashesCount = match[2].length + match[3].length;\n    } else {\n      rest = match[2] + match[4];\n      slashesCount = match[2].length;\n    }\n  } else {\n    if (otherSlashes) {\n      rest = match[3] + match[4];\n      slashesCount = match[3].length;\n    } else {\n      rest = match[4]\n    }\n  }\n\n  if (protocol === 'file:') {\n    if (slashesCount >= 2) {\n      rest = rest.slice(2);\n    }\n  } else if (isSpecial(protocol)) {\n    rest = match[4];\n  } else if (protocol) {\n    if (forwardSlashes) {\n      rest = rest.slice(2);\n    }\n  } else if (slashesCount >= 2 && isSpecial(location.protocol)) {\n    rest = match[4];\n  }\n\n  return {\n    protocol: protocol,\n    slashes: forwardSlashes || isSpecial(protocol),\n    slashesCount: slashesCount,\n    rest: rest\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '', location);\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (\n    extracted.protocol === 'file:' && (\n      extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) ||\n    (!extracted.slashes &&\n      (extracted.protocol ||\n        extracted.slashesCount < 2 ||\n        !isSpecial(url.protocol)))\n  ) {\n    instructions[3] = [/(.*)/, 'pathname'];\n  }\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address, url);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      index = parse === '@'\n        ? address.lastIndexOf(parse)\n        : address.indexOf(parse);\n\n      if (~index) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n\n  if (url.auth) {\n    index = url.auth.indexOf(':');\n\n    if (~index) {\n      url.username = url.auth.slice(0, index);\n      url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n      url.password = url.auth.slice(index + 1);\n      url.password = encodeURIComponent(decodeURIComponent(url.password))\n    } else {\n      url.username = encodeURIComponent(decodeURIComponent(url.auth));\n    }\n\n    url.auth = url.password ? url.username +':'+ url.password : url.username;\n  }\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    case 'username':\n    case 'password':\n      url[part] = encodeURIComponent(value);\n      break;\n\n    case 'auth':\n      var index = value.indexOf(':');\n\n      if (~index) {\n        url.username = value.slice(0, index);\n        url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n        url.password = value.slice(index + 1);\n        url.password = encodeURIComponent(decodeURIComponent(url.password));\n      } else {\n        url.username = encodeURIComponent(decodeURIComponent(value));\n      }\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.auth = url.password ? url.username +':'+ url.password : url.username;\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , host = url.host\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result =\n    protocol +\n    ((url.protocol && url.slashes) || isSpecial(url.protocol) ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  } else if (url.password) {\n    result += ':'+ url.password;\n    result += '@';\n  } else if (\n    url.protocol !== 'file:' &&\n    isSpecial(url.protocol) &&\n    !host &&\n    url.pathname !== '/'\n  ) {\n    //\n    // Add back the empty userinfo, otherwise the original invalid URL\n    // might be transformed into a valid one with `url.pathname` as host.\n    //\n    result += '@';\n  }\n\n  //\n  // Trailing colon is removed from `url.host` when it is parsed. If it still\n  // ends with a colon, then add back the trailing colon that was removed. This\n  // prevents an invalid URL from being transformed into a valid one.\n  //\n  if (host[host.length - 1] === ':') host += ':';\n  result += host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n", "describe('url-parse', function () {\n  'use strict';\n\n  var assume = require('assume')\n    , parse = require('../');\n\n  it('exposes parse as a function', function () {\n    assume(parse).is.a('function');\n  });\n\n  it('exposes the querystring module', function () {\n    assume(parse.qs).equals(require('querystringify'));\n  });\n\n  it('exposes the location function', function () {\n    assume(parse.location).is.a('function');\n  });\n\n  it('exposes the extractProtocol function', function () {\n    assume(parse.extractProtocol).is.a('function');\n  });\n\n  it('defaults to empty address to return valid URL instance', function () {\n    var url = parse();\n\n    assume(url).to.be.an('object');\n    assume(url.pathname).to.be.a('string');\n    assume(url.host).to.be.a('string');\n    assume(url.hostname).to.be.a('string');\n  });\n\n  it('works when the global variable is not defined', function () {\n    var globalVar = global;\n    global = undefined;\n    var url = parse('http://google.com/?foo=bar', true);\n\n    assume(url).to.be.an('object');\n    assume(url.pathname).to.be.a('string');\n    assume(url.host).to.be.a('string');\n    assume(url.hostname).to.be.a('string');\n\n    global = globalVar;\n  });\n\n  describe('trimLeft', function () {\n    it('is a function', function () {\n      assume(parse.trimLeft).is.a('function');\n    });\n\n    it('removes control characters on the left', function () {\n      var i = 0;\n      var prefix = ''\n\n      for (; i < 33; i++) {\n        prefix = String.fromCharCode(i);\n        assume(parse.trimLeft(prefix + prefix +'lol')).equals('lol');\n      }\n    });\n\n    it('calls toString on a given value', function () {\n      //\n      // When users pass in `window.location` it's not an actual string\n      // so you can't replace on it. So it needs to be cast to a string.\n      //\n      var fake = {\n        toString: function () {\n          return 'wat';\n        }\n      };\n\n      assume(parse.trimLeft(fake)).equals('wat');\n    });\n  });\n\n  describe('extractProtocol', function () {\n    it('extracts the protocol data', function () {\n      assume(parse.extractProtocol('http://example.com')).eql({\n        slashes: true,\n        protocol: 'http:',\n        rest: 'example.com',\n        slashesCount: 2\n      });\n    });\n\n    it('extracts the protocol data for nothing', function () {\n      assume(parse.extractProtocol('')).eql({\n        slashes: false,\n        protocol: '',\n        rest: '',\n        slashesCount: 0\n      });\n    });\n\n    it('correctly resolves paths', function () {\n      assume(parse.extractProtocol('/foo')).eql({\n        slashes: false,\n        protocol: '',\n        rest: '/foo',\n        slashesCount: 1\n      });\n\n      assume(parse.extractProtocol('//foo/bar')).eql({\n        slashes: true,\n        protocol: '',\n        rest: '//foo/bar',\n        slashesCount: 2\n      });\n    });\n\n    it('does not truncate the input string', function () {\n      var input = 'foo\\x0bbar\\x0cbaz\\u2028qux\\u2029';\n\n      assume(parse.extractProtocol(input)).eql({\n        slashes: false,\n        protocol: '',\n        rest: input,\n        slashesCount: 0\n      });\n    });\n\n    it('trimsLeft', function () {\n      assume(parse.extractProtocol('\\x0b\\x0c javascript://foo')).eql({\n        slashes: true,\n        protocol: 'javascript:',\n        rest: 'foo',\n        slashesCount: 2\n      });\n    });\n\n    it('removes CR, HT, and LF', function () {\n      assume(parse.extractProtocol('jav\\n\\rasc\\nript\\r:/\\t/fo\\no')).eql({\n        slashes: true,\n        protocol: 'javascript:',\n        rest: 'foo',\n        slashesCount: 2\n      });\n    });\n  });\n\n  it('parses the query string into an object', function () {\n    var url = 'http://google.com/?foo=bar'\n      , data = parse(url, true);\n\n    assume(data.query).is.a('object');\n    assume(data.query.foo).equals('bar');\n\n    url = 'http://google.com/';\n    data = parse(url, true);\n\n    assume(data.query).is.a('object');\n    assume(data.query).is.empty();\n  });\n\n  it('does not add question mark to href if query string is empty', function () {\n    var url = 'http://google.com/'\n      , data = parse(url, true);\n\n    assume(data.href).equals(url);\n  });\n\n  it('allows a custom function as parser', function () {\n    var url = 'http://google.com/?foo=bar'\n      , data = parse(url, function () { return '1337'; });\n\n    assume(data.query).equals('1337');\n  });\n\n  it('allows a custom stringify function', function () {\n    var url = 'http://google.com/?foo=bar'\n      , data = parse(url, true)\n      , str;\n\n    str = data.toString(function () { return 'lolcakes'; });\n    assume(str).equals('http://google.com/?lolcakes');\n  });\n\n  it('allows a custom location object', function () {\n    var url = '/foo?foo=bar'\n      , data = parse(url, parse('http://google.com'));\n\n    assume(data.href).equals('http://google.com/foo?foo=bar');\n  });\n\n  it('is blob: location aware', function () {\n    var blob = {\n      'href': 'blob:https%3A//gist.github.com/3f272586-6dac-4e29-92d0-f674f2dde618',\n      'pathname': 'https%3A//gist.github.com/3f272586-6dac-4e29-92d0-f674f2dde618',\n      'origin': 'https://gist.github.com',\n      'protocol': 'blob:',\n      'hostname': '',\n      'search': '',\n      'hash': '',\n      'host': '',\n      'port': ''\n    };\n\n    var url = '/unshiftio/url-parse'\n      , data = parse(url, blob);\n\n    assume(data.href).equals('https://gist.github.com/unshiftio/url-parse');\n  });\n\n  it('can parse complex urls multiple times without errors', function () {\n    var url = 'https://www.mozilla.org/en-US/firefox/34.0/whatsnew/?oldversion=33.1';\n\n    for (var i = 0; i < 100; i++) {\n      parse(url);\n    }\n  });\n\n  it('converts hostname to lowercase', function () {\n    var url = 'HTTP://fOo.eXaMPle.com';\n\n    assume(parse(url).hostname).equals('foo.example.com');\n  });\n\n  it('does not lowercase the path', function () {\n    var url = 'HTTP://X.COM/Y/Z';\n\n    assume(parse(url).pathname).equals('/Y/Z');\n  });\n\n  it('removes default port numbers', function () {\n    var url = 'http://example.com:80'\n      , parsed = parse(url);\n\n    assume(parsed.port).equals('');\n    assume(parsed.pathname).equals('/');\n    assume(parsed.host).equals('example.com');\n    assume(parsed.hostname).equals('example.com');\n    assume(parsed.href).equals('http://example.com/');\n  });\n\n  it('understands an / as pathname', function () {\n    var url = 'http://example.com:80/'\n      , parsed = parse(url);\n\n    assume(parsed.port).equals('');\n    assume(parsed.username).equals('');\n    assume(parsed.password).equals('');\n    assume(parsed.pathname).equals('/');\n    assume(parsed.host).equals('example.com');\n    assume(parsed.hostname).equals('example.com');\n    assume(parsed.href).equals('http://example.com/');\n  });\n\n  it('correctly parses pathnames for relative paths', function () {\n    var url = '/dataApi/PROD/ws'\n     , parsed = parse(url, 'http://localhost:3000/PROD/trends');\n\n    assume(parsed.pathname).equals('/dataApi/PROD/ws');\n\n    url = '/sections/?project=default'\n    parsed = parse(url, 'http://example.com/foo/bar');\n\n    assume(parsed.pathname).equals('/sections/');\n    assume(parsed.hostname).equals('example.com');\n    assume(parsed.href).equals('http://example.com/sections/?project=default');\n  });\n\n  it('does not care about spaces', function () {\n    var url = 'http://x.com/path?that\\'s#all, folks'\n      , parsed = parse(url);\n\n    assume(parsed.port).equals('');\n    assume(parsed.username).equals('');\n    assume(parsed.password).equals('');\n    assume(parsed.pathname).equals('/path');\n    assume(parsed.hash).equal('#all, folks');\n    assume(parsed.query).equal('?that\\'s');\n    assume(parsed.host).equals('x.com');\n    assume(parsed.hostname).equals('x.com');\n  });\n\n  it('accepts + in the url', function () {\n    var url = 'http://x.y.com+a/b/c'\n      , parsed = parse(url);\n\n    assume(parsed.protocol).equals('http:');\n    assume(parsed.host).equals('x.y.com+a');\n    assume(parsed.hostname).equals('x.y.com+a');\n    assume(parsed.pathname).equals('/b/c');\n  });\n\n  it('ignores \\\\ in pathnames', function () {\n    var url = 'http://google.com:80\\\\@yahoo.com/#what\\\\is going on'\n      , parsed = parse(url);\n\n    assume(parsed.port).equals('');\n    assume(parsed.username).equals('');\n    assume(parsed.password).equals('');\n    assume(parsed.hostname).equals('google.com');\n    assume(parsed.hash).equals('#what\\\\is going on');\n\n    parsed = parse('http://yolo.com\\\\what-is-up.com');\n    assume(parsed.pathname).equals('/what-is-up.com');\n  });\n\n  it('correctly ignores multiple slashes //', function () {\n    var url = '////what-is-up.com'\n      , parsed = parse(url, parse('http://google.com'));\n\n    assume(parsed.host).equals('what-is-up.com');\n    assume(parsed.href).equals('http://what-is-up.com/');\n\n    url = '\\\\\\\\\\\\\\\\what-is-up.com'\n    parsed = parse(url, parse('http://google.com'));\n\n    assume(parsed.host).equals('what-is-up.com');\n    assume(parsed.href).equals('http://what-is-up.com/');\n  });\n\n  it('ignores slashes after the protocol for special URLs', function () {\n    var url = 'https:\\\\/github.com/foo/bar'\n      , parsed = parse(url);\n\n    assume(parsed.host).equals('github.com');\n    assume(parsed.hostname).equals('github.com');\n    assume(parsed.pathname).equals('/foo/bar');\n    assume(parsed.slashes).is.true();\n    assume(parsed.href).equals('https://github.com/foo/bar');\n\n    url = 'https:/\\\\/\\\\/\\\\github.com/foo/bar';\n    parsed = parse(url);\n    assume(parsed.host).equals('github.com');\n    assume(parsed.hostname).equals('github.com');\n    assume(parsed.pathname).equals('/foo/bar');\n    assume(parsed.slashes).is.true();\n    assume(parsed.href).equals('https://github.com/foo/bar');\n\n    url = 'https:/github.com/foo/bar';\n    parsed = parse(url);\n    assume(parsed.host).equals('github.com');\n    assume(parsed.pathname).equals('/foo/bar');\n    assume(parsed.slashes).is.true();\n    assume(parsed.href).equals('https://github.com/foo/bar');\n\n    url = 'https:\\\\github.com/foo/bar';\n    parsed = parse(url);\n    assume(parsed.host).equals('github.com');\n    assume(parsed.pathname).equals('/foo/bar');\n    assume(parsed.slashes).is.true();\n    assume(parsed.href).equals('https://github.com/foo/bar');\n\n    url = 'https:github.com/foo/bar';\n    parsed = parse(url);\n    assume(parsed.host).equals('github.com');\n    assume(parsed.pathname).equals('/foo/bar');\n    assume(parsed.slashes).is.true();\n    assume(parsed.href).equals('https://github.com/foo/bar');\n\n    url = 'https:github.com/foo/bar';\n    parsed = parse(url);\n    assume(parsed.host).equals('github.com');\n    assume(parsed.pathname).equals('/foo/bar');\n    assume(parsed.slashes).is.true();\n    assume(parsed.href).equals('https://github.com/foo/bar');\n  });\n\n  it('handles slashes after the protocol for non special URLs', function () {\n    var url = 'foo:example.com'\n      , parsed = parse(url);\n\n    assume(parsed.hostname).equals('');\n    assume(parsed.pathname).equals('example.com');\n    assume(parsed.href).equals('foo:example.com');\n    assume(parsed.slashes).is.false();\n\n    url = 'foo:/example.com';\n    parsed = parse(url);\n    assume(parsed.hostname).equals('');\n    assume(parsed.pathname).equals('/example.com');\n    assume(parsed.href).equals('foo:/example.com');\n    assume(parsed.slashes).is.false();\n\n    url = 'foo:\\\\example.com';\n    parsed = parse(url);\n    assume(parsed.hostname).equals('');\n    assume(parsed.pathname).equals('\\\\example.com');\n    assume(parsed.href).equals('foo:\\\\example.com');\n    assume(parsed.slashes).is.false();\n\n    url = 'foo://example.com';\n    parsed = parse(url);\n    assume(parsed.hostname).equals('example.com');\n    assume(parsed.pathname).equals('');\n    assume(parsed.href).equals('foo://example.com');\n    assume(parsed.slashes).is.true();\n\n    url = 'foo:\\\\\\\\example.com';\n    parsed = parse(url);\n    assume(parsed.hostname).equals('');\n    assume(parsed.pathname).equals('\\\\\\\\example.com');\n    assume(parsed.href).equals('foo:\\\\\\\\example.com');\n    assume(parsed.slashes).is.false();\n\n    url = 'foo:///example.com';\n    parsed = parse(url);\n    assume(parsed.hostname).equals('');\n    assume(parsed.pathname).equals('/example.com');\n    assume(parsed.href).equals('foo:///example.com');\n    assume(parsed.slashes).is.true();\n\n    url = 'foo:\\\\\\\\\\\\example.com';\n    parsed = parse(url);\n    assume(parsed.hostname).equals('');\n    assume(parsed.pathname).equals('\\\\\\\\\\\\example.com');\n    assume(parsed.href).equals('foo:\\\\\\\\\\\\example.com');\n    assume(parsed.slashes).is.false();\n\n    url = '\\\\\\\\example.com/foo/bar';\n    parsed = parse(url, 'foo://bar.com');\n    assume(parsed.hostname).equals('bar.com');\n    assume(parsed.pathname).equals('/\\\\\\\\example.com/foo/bar');\n    assume(parsed.href).equals('foo://bar.com/\\\\\\\\example.com/foo/bar');\n    assume(parsed.slashes).is.true();\n  });\n\n  it('does not readd slashes to href if there is no protocol', function() {\n    var parsed = parse('//example.com', {});\n\n    assume(parsed.pathname).equals('//example.com');\n    assume(parsed.href).equals('//example.com');\n  });\n\n  it('removes CR, HT, and LF', function () {\n    var parsed = parse(\n      'ht\\ntp://a\\rb:\\tcd@exam\\rple.com:80\\t80/pat\\thname?fo\\no=b\\rar#ba\\tz'\n    );\n\n    assume(parsed.protocol).equals('http:');\n    assume(parsed.username).equals('ab');\n    assume(parsed.password).equals('cd');\n    assume(parsed.host).equals('example.com:8080');\n    assume(parsed.hostname).equals('example.com');\n    assume(parsed.port).equals('8080');\n    assume(parsed.pathname).equals('/pathname');\n    assume(parsed.query).equals('?foo=bar');\n    assume(parsed.hash).equals('#baz');\n    assume(parsed.href).equals(\n      'http://ab:cd@example.com:8080/pathname?foo=bar#baz'\n    );\n\n    parsed = parse('s\\nip:al\\rice@atl\\tanta.com');\n\n    assume(parsed.protocol).equals('sip:');\n    assume(parsed.pathname).equals('alice@atlanta.com');\n    assume(parsed.href).equals('sip:alice@atlanta.com');\n  });\n\n  it('handles the case where the port is specified but empty', function () {\n    var parsed = parse('http://example.com:');\n\n    assume(parsed.protocol).equals('http:');\n    assume(parsed.port).equals('');\n    assume(parsed.host).equals('example.com');\n    assume(parsed.hostname).equals('example.com');\n    assume(parsed.pathname).equals('/');\n    assume(parsed.origin).equals('http://example.com');\n    assume(parsed.href).equals('http://example.com/');\n\n    parsed = parse('http://example.com::');\n\n    assume(parsed.protocol).equals('http:');\n    assume(parsed.port).equals('');\n    assume(parsed.host).equals('example.com:');\n    assume(parsed.hostname).equals('example.com:');\n    assume(parsed.pathname).equals('/');\n    assume(parsed.origin).equals('http://example.com:');\n    assume(parsed.href).equals('http://example.com::/');\n  });\n\n  describe('origin', function () {\n    it('generates an origin property', function () {\n      var url = 'http://google.com:80/pathname'\n        , parsed = parse(url);\n\n      assume(parsed.origin).equals('http://google.com');\n    });\n\n    it('is lowercased', function () {\n      var url = 'HTTP://gOogle.cOm:80/pathname'\n        , parsed = parse(url);\n\n      assume(parsed.origin).equals('http://google.com');\n    });\n\n    it('sets null if no hostname is specified', function () {\n      var url = 'http://'\n        , parsed = parse(url, {});\n\n      assume(parsed.origin).equals('null');\n    });\n\n    it('is null for non special URLs', function () {\n      var o = parse('foo://example.com/pathname');\n      assume(o.hostname).equals('example.com');\n      assume(o.pathname).equals('/pathname');\n      assume(o.origin).equals('null');\n    });\n\n    it('removes default ports for http', function () {\n      var o = parse('http://google.com:80/pathname');\n      assume(o.origin).equals('http://google.com');\n\n      o = parse('http://google.com:80');\n      assume(o.origin).equals('http://google.com');\n\n      o = parse('http://google.com');\n      assume(o.origin).equals('http://google.com');\n\n      o = parse('https://google.com:443/pathname');\n      assume(o.origin).equals('https://google.com');\n\n      o = parse('http://google.com:443/pathname');\n      assume(o.origin).equals('http://google.com:443');\n\n      o = parse('https://google.com:80/pathname');\n      assume(o.origin).equals('https://google.com:80');\n    });\n\n    it('handles file:// based urls as null', function () {\n      var o = parse('file://google.com/pathname');\n      assume(o.origin).equals('null');\n    });\n\n    it('removes default ports for ws', function () {\n      var o = parse('ws://google.com:80/pathname');\n      assume(o.origin).equals('ws://google.com');\n\n      o = parse('wss://google.com:443/pathname');\n      assume(o.origin).equals('wss://google.com');\n\n      o = parse('ws://google.com:443/pathname');\n      assume(o.origin).equals('ws://google.com:443');\n\n      o = parse('wss://google.com:80/pathname');\n      assume(o.origin).equals('wss://google.com:80');\n    });\n\n    it('maintains the port number for non-default port numbers', function () {\n      var parsed = parse('http://google.com:8080/pathname');\n\n      assume(parsed.host).equals('google.com:8080');\n      assume(parsed.href).equals('http://google.com:8080/pathname');\n    });\n  });\n\n  describe('protocol', function () {\n    it('extracts the right protocol from a url', function () {\n      var testData = [\n        {\n          href: 'http://example.com/',\n          protocol: 'http:',\n          pathname: '/',\n          slashes: true\n        },\n        {\n          href: 'ws://example.com/',\n          protocol: 'ws:',\n          pathname: '/',\n          slashes: true\n        },\n        {\n          href: 'wss://example.com/',\n          protocol: 'wss:',\n          pathname: '/',\n          slashes: true\n        },\n        {\n          href: 'mailto:test@example.com',\n          pathname: 'test@example.com',\n          protocol: 'mailto:',\n          slashes: false\n        },\n        {\n          href: 'data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E',\n          pathname: 'text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E',\n          protocol: 'data:',\n          slashes: false,\n        },\n        {\n          href: 'sip:alice@atlanta.com',\n          pathname: 'alice@atlanta.com',\n          protocol: 'sip:',\n          slashes: false,\n        }\n      ];\n\n      var data, test;\n      for (var i = 0, len = testData.length; i < len; ++i) {\n        test = testData[i];\n        data = parse(test.href);\n\n        assume(data.protocol).equals(test.protocol);\n        assume(data.pathname).equals(test.pathname);\n        assume(data.slashes).equals(test.slashes);\n        assume(data.href).equals(test.href);\n      }\n    });\n\n    it('converts protocol to lowercase', function () {\n      var url = 'HTTP://example.com';\n\n      assume(parse(url).protocol).equals('http:');\n    });\n\n    it('correctly adds \":\" to protocol in final url string', function () {\n      var data = parse('google.com/foo', {});\n      data.set('protocol', 'https');\n      assume(data.href).equals('https://google.com/foo');\n\n      data = parse('https://google.com/foo');\n      data.protocol = 'http';\n      assume(data.toString()).equals('http://google.com/foo');\n\n      data = parse('http://google.com/foo');\n      data.set('protocol', 'https:');\n      assume(data.href).equals('https://google.com/foo');\n    });\n\n    it('handles the file: protocol', function () {\n      var slashes = ['', '/', '//', '///'];\n      var data;\n      var url;\n\n      for (var i = 0; i < slashes.length; i++) {\n        data = parse('file:' + slashes[i]);\n        assume(data.protocol).equals('file:');\n        assume(data.pathname).equals('/');\n        assume(data.href).equals('file:///');\n      }\n\n      url = 'file:////';\n      data = parse(url);\n      assume(data.protocol).equals('file:');\n      assume(data.pathname).equals('//');\n      assume(data.href).equals(url);\n\n      url = 'file://///';\n      data = parse(url);\n      assume(data.protocol).equals('file:');\n      assume(data.pathname).equals('///');\n      assume(data.href).equals(url);\n\n      url = 'file:///Users/foo/BAR/baz.pdf';\n      data = parse(url);\n      assume(data.protocol).equals('file:');\n      assume(data.pathname).equals('/Users/foo/BAR/baz.pdf');\n      assume(data.href).equals(url);\n\n      url = 'file:///foo/bar?baz=qux#hash';\n      data = parse(url);\n      assume(data.protocol).equals('file:');\n      assume(data.hash).equals('#hash');\n      assume(data.query).equals('?baz=qux');\n      assume(data.pathname).equals('/foo/bar');\n      assume(data.href).equals(url);\n\n      data = parse('file://c:\\\\foo\\\\bar\\\\');\n      assume(data.protocol).equals('file:');\n      assume(data.pathname).equals('/c:/foo/bar/');\n      assume(data.href).equals('file:///c:/foo/bar/');\n\n      data = parse('file://host/file');\n      assume(data.protocol).equals('file:');\n      assume(data.host).equals('host');\n      assume(data.hostname).equals('host');\n      assume(data.pathname).equals('/file');\n      assume(data.href).equals('file://host/file');\n\n      data = parse('foo/bar', 'file:///baz');\n      assume(data.protocol).equals('file:');\n      assume(data.pathname).equals('/foo/bar');\n      assume(data.href).equals('file:///foo/bar');\n\n      data = parse('foo/bar', 'file:///baz/');\n      assume(data.protocol).equals('file:');\n      assume(data.pathname).equals('/baz/foo/bar');\n      assume(data.href).equals('file:///baz/foo/bar');\n    });\n  });\n\n  describe('ip', function () {\n    it('parses ipv6', function () {\n      var url = 'http://[1080:0:0:0:8:800:200C:417A]:61616/foo/bar?q=z'\n        , parsed = parse(url);\n\n      assume(parsed.port).equals('61616');\n      assume(parsed.query).equals('?q=z');\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.hostname).equals('[1080:0:0:0:8:800:200c:417a]');\n      assume(parsed.pathname).equals('/foo/bar');\n      assume(parsed.href).equals('http://[1080:0:0:0:8:800:200c:417a]:61616/foo/bar?q=z');\n    });\n\n    it('parses ipv6 with auth', function () {\n      var url = 'http://user:password@[3ffe:2a00:100:7031::1]:8080/'\n        , parsed = parse(url);\n\n      assume(parsed.username).equals('user');\n      assume(parsed.password).equals('password');\n      assume(parsed.host).equals('[3ffe:2a00:100:7031::1]:8080');\n      assume(parsed.hostname).equals('[3ffe:2a00:100:7031::1]');\n      assume(parsed.pathname).equals('/');\n      assume(parsed.href).equals(url);\n    });\n\n    it('parses ipv4', function () {\n      var url = 'http://222.148.142.13:61616/foo/bar?q=z'\n        , parsed = parse(url);\n\n      assume(parsed.port).equals('61616');\n      assume(parsed.query).equals('?q=z');\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.hostname).equals('222.148.142.13');\n      assume(parsed.pathname).equals('/foo/bar');\n      assume(parsed.href).equals(url);\n    });\n  });\n\n  describe('auth', function () {\n    it('does not lowercase the USER:PASS', function () {\n      var url = 'HTTP://USER:PASS@EXAMPLE.COM'\n        , parsed = parse(url);\n\n      assume(parsed.username).equals('USER');\n      assume(parsed.password).equals('PASS');\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.host).equals('example.com');\n      assume(parsed.hostname).equals('example.com');\n    });\n\n    it('accepts @ in pathnames', function () {\n      var url = 'http://mt0.google.com/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s='\n        , parsed = parse(url);\n\n      assume(parsed.pathname).equals('/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=');\n      assume(parsed.username).equals('');\n      assume(parsed.password).equals('');\n    });\n\n    it('does not require passwords for auth', function () {\n      var url = 'http://user@www.example.com/'\n        , parsed = parse(url);\n\n      assume(parsed.password).equals('');\n      assume(parsed.pathname).equals('/');\n      assume(parsed.username).equals('user');\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.hostname).equals('www.example.com');\n      assume(parsed.href).equals(url);\n    });\n\n    it('handles @ in username', function () {\n      var url = 'http://user@@www.example.com/'\n        , parsed = parse(url);\n\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.auth).equals('user%40');\n      assume(parsed.username).equals('user%40');\n      assume(parsed.password).equals('');\n      assume(parsed.hostname).equals('www.example.com');\n      assume(parsed.pathname).equals('/');\n      assume(parsed.href).equals('http://user%40@www.example.com/');\n\n      url = 'http://user%40@www.example.com/';\n      parsed = parse(url);\n\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.auth).equals('user%40');\n      assume(parsed.username).equals('user%40');\n      assume(parsed.password).equals('');\n      assume(parsed.hostname).equals('www.example.com');\n      assume(parsed.pathname).equals('/');\n      assume(parsed.href).equals('http://user%40@www.example.com/');\n    });\n\n    it('handles @ in password', function () {\n      var url = 'http://user@:pas:s@@www.example.com/'\n        , parsed = parse(url);\n\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.auth).equals('user%40:pas%3As%40');\n      assume(parsed.username).equals('user%40');\n      assume(parsed.password).equals('pas%3As%40');\n      assume(parsed.hostname).equals('www.example.com');\n      assume(parsed.pathname).equals('/');\n      assume(parsed.href).equals('http://user%40:pas%3As%40@www.example.com/');\n\n      url = 'http://user%40:pas%3As%40@www.example.com/'\n      parsed = parse(url);\n\n      assume(parsed.protocol).equals('http:');\n      assume(parsed.auth).equals('user%40:pas%3As%40');\n      assume(parsed.username).equals('user%40');\n      assume(parsed.password).equals('pas%3As%40');\n      assume(parsed.hostname).equals('www.example.com');\n      assume(parsed.pathname).equals('/');\n      assume(parsed.href).equals('http://user%40:pas%3As%40@www.example.com/');\n    });\n\n    it('adds @ to href if auth and host are empty', function () {\n      var parsed, i = 0;\n      var urls = [\n        'http:@/127.0.0.1',\n        'http::@/127.0.0.1',\n        'http:/@/127.0.0.1',\n        'http:/:@/127.0.0.1',\n        'http://@/127.0.0.1',\n        'http://:@/127.0.0.1',\n        'http:///@/127.0.0.1',\n        'http:///:@/127.0.0.1'\n      ];\n\n      for (; i < urls.length; i++) {\n        parsed = parse(urls[i]);\n\n        assume(parsed.protocol).equals('http:');\n        assume(parsed.auth).equals('');\n        assume(parsed.username).equals('');\n        assume(parsed.password).equals('');\n        assume(parsed.host).equals('');\n        assume(parsed.hostname).equals('');\n        assume(parsed.pathname).equals('/127.0.0.1');\n        assume(parsed.origin).equals('null');\n        assume(parsed.href).equals('http://@/127.0.0.1');\n        assume(parsed.toString()).equals('http://@/127.0.0.1');\n      }\n\n      urls = [\n        'http:@/',\n        'http:@',\n        'http::@/',\n        'http::@',\n        'http:/@/',\n        'http:/@',\n        'http:/:@/',\n        'http:/:@',\n        'http://@/',\n        'http://@',\n        'http://:@/',\n        'http://:@'\n      ];\n\n      for (i = 0; i < urls.length; i++) {\n        parsed = parse(urls[i]);\n\n        assume(parsed.protocol).equals('http:');\n        assume(parsed.auth).equals('');\n        assume(parsed.username).equals('');\n        assume(parsed.password).equals('');\n        assume(parsed.host).equals('');\n        assume(parsed.hostname).equals('');\n        assume(parsed.pathname).equals('/');\n        assume(parsed.origin).equals('null');\n        assume(parsed.href).equals('http:///');\n        assume(parsed.toString()).equals('http:///');\n      }\n    });\n  });\n\n  it('accepts multiple ???', function () {\n    var url = 'http://mt0.google.com/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s=';\n    assume(parse(url).query).equals('???&hl=en&src=api&x=2&y=2&z=3&s=');\n  });\n\n  it('accepts a string as source argument', function () {\n    var data = parse('/foo', 'http://sub.example.com/bar?foo=bar#hash');\n\n    assume(data.port).equals('');\n    assume(data.host).equals('sub.example.com');\n    assume(data.href).equals('http://sub.example.com/foo');\n  });\n\n  describe('inheritance', function () {\n    it('does not inherit port numbers for non relative urls', function () {\n      var data = parse('http://localhost', parse('http://sub.example.com:808/'));\n\n      assume(data.port).equals('');\n      assume(data.host).equals('localhost');\n      assume(data.href).equals('http://localhost/');\n    });\n\n    it('inherits port numbers for relative urls', function () {\n      var data = parse('/foo', parse('http://sub.example.com:808/'));\n\n      assume(data.port).equals('808');\n      assume(data.hostname).equals('sub.example.com');\n      assume(data.host).equals('sub.example.com:808');\n      assume(data.href).equals('http://sub.example.com:808/foo');\n    });\n\n    it('inherits slashes for relative urls', function () {\n      var data = parse('/foo', {\n        hash: '',\n        host: 'example.com',\n        hostname: 'example.com',\n        href: 'http://example.com/',\n        origin: 'http://example.com',\n        password: '',\n        pathname: '/',\n        port: '',\n        protocol: 'http:',\n        search: ''\n      });\n\n      assume(data.slashes).equals(true);\n      assume(data.href).equals('http://example.com/foo');\n\n      data = parse('/foo', {\n        auth: null,\n        hash: null,\n        host: 'example.com',\n        hostname: 'example.com',\n        href: 'http://example.com/',\n        path: '/',\n        pathname: '/',\n        port: null,\n        protocol: 'http:',\n        query: null,\n        search: null,\n        slashes: true\n      });\n\n      assume(data.slashes).equals(true);\n      assume(data.href).equals('http://example.com/foo');\n    });\n\n    it('inherits protocol for relative protocols', function () {\n      var lolcation = parse('http://sub.example.com:808/')\n        , data = parse('//foo.com/foo', lolcation);\n\n      assume(data.port).equals('');\n      assume(data.host).equals('foo.com');\n      assume(data.protocol).equals('http:');\n      assume(data.href).equals('http://foo.com/foo');\n    });\n\n    it('does not inherit pathname for non relative urls', function () {\n      var data = parse('http://localhost', parse('http://foo:bar@sub.example.com/bar?foo=bar#hash'));\n\n      assume(data.port).equals('');\n      assume(data.host).equals('localhost');\n      assume(data.href).equals('http://localhost/');\n    });\n\n    it('resolves pathname for relative urls', function () {\n      var data, i = 0;\n      var tests = [\n        ['', 'http://foo.com', '/'],\n        ['', 'http://foo.com/', '/'],\n        ['', 'http://foo.com/a', '/a'],\n        ['a', 'http://foo.com', '/a'],\n        ['a/', 'http://foo.com', '/a/'],\n        ['b/c', 'http://foo.com/a', '/b/c'],\n        ['b/c', 'http://foo.com/a/', '/a/b/c'],\n        ['.', 'http://foo.com', '/'],\n        ['./', 'http://foo.com', '/'],\n        ['./.', 'http://foo.com', '/'],\n        ['.', 'http://foo.com/a', '/'],\n        ['.', 'http://foo.com/a/', '/a/'],\n        ['./', 'http://foo.com/a/', '/a/'],\n        ['./.', 'http://foo.com/a/', '/a/'],\n        ['./b', 'http://foo.com/a/', '/a/b'],\n        ['..', 'http://foo.com', '/'],\n        ['../', 'http://foo.com', '/'],\n        ['../..', 'http://foo.com', '/'],\n        ['..', 'http://foo.com/a/b', '/'],\n        ['..', 'http://foo.com/a/b/', '/a/'],\n        ['../..', 'http://foo.com/a/b', '/'],\n        ['../..', 'http://foo.com/a/b/', '/'],\n        ['../../../../c', 'http://foo.com/a/b/', '/c'],\n        ['./../d', 'http://foo.com/a/b/c', '/a/d'],\n        ['d/e/f/./../../g', 'http://foo.com/a/b/c', '/a/b/d/g']\n      ];\n\n      for (; i < tests.length; i++) {\n        data = parse(tests[i][0], tests[i][1]);\n        assume(data.pathname).equals(tests[i][2]);\n      }\n    });\n\n    it('does not inherit hashes and query strings from source object', function () {\n      var data = parse('/foo', parse('http://sub.example.com/bar?foo=bar#hash'));\n\n      assume(data.port).equals('');\n      assume(data.host).equals('sub.example.com');\n      assume(data.href).equals('http://sub.example.com/foo');\n    });\n\n    it('does not inherit auth from source object', function () {\n      var base = parse('http://foo:bar@sub.example.com')\n        , data = parse('/foo', base);\n\n      assume(data.port).equals('');\n      assume(data.username).equals('');\n      assume(data.password).equals('');\n      assume(data.host).equals('sub.example.com');\n      assume(data.href).equals('http://sub.example.com/foo');\n    });\n  });\n\n  describe('#set', function () {\n    it('correctly updates the host when setting port', function () {\n      var data = parse('http://google.com/foo');\n\n      assume(data.set('port', 8080)).equals(data);\n\n      assume(data.host).equals('google.com:8080');\n      assume(data.href).equals('http://google.com:8080/foo');\n    });\n\n    it('correctly updates the host when setting port (IPv6)', function () {\n      var data = parse('http://[7886:3423::1233]/foo');\n\n      assume(data.set('port', 8080)).equals(data);\n\n      assume(data.host).equals('[7886:3423::1233]:8080');\n      assume(data.href).equals('http://[7886:3423::1233]:8080/foo');\n    });\n\n    it('removes querystring and hash', function () {\n      var data = parse('https://thisanurl.com/?swag=yolo#representing');\n\n      data.set('query', '');\n      data.set('hash', '');\n\n      assume(data.href).equals('https://thisanurl.com/');\n    });\n\n    it('only sets port when its not default', function () {\n      var data = parse('http://google.com/foo');\n\n      assume(data.set('port', 80)).equals(data);\n\n      assume(data.host).equals('google.com');\n      assume(data.href).equals('http://google.com/foo');\n\n      assume(data.set('port', 443)).equals(data);\n      assume(data.host).equals('google.com:443');\n      assume(data.href).equals('http://google.com:443/foo');\n    });\n\n    it('only sets port when its not default (IPv6)', function () {\n      var data = parse('http://[7886:3423::1233]/foo');\n\n      assume(data.set('port', 80)).equals(data);\n\n      assume(data.host).equals('[7886:3423::1233]');\n      assume(data.href).equals('http://[7886:3423::1233]/foo');\n\n      assume(data.set('port', 443)).equals(data);\n      assume(data.host).equals('[7886:3423::1233]:443');\n      assume(data.href).equals('http://[7886:3423::1233]:443/foo');\n    });\n\n    it('prepends / to pathname', function () {\n      var url = parse();\n\n      url\n        .set('protocol', 'http')\n        .set('host', 'example.com:80')\n        .set('pathname', 'will/get/slash/prepended');\n\n      assume(url.pathname).equals('/will/get/slash/prepended');\n      assume(url.href).equals('http://example.com:80/will/get/slash/prepended');\n\n      url.set('pathname', '');\n\n      assume(url.pathname).equals('');\n      assume(url.href).equals('http://example.com:80');\n\n      url.set('pathname', '/has/slash');\n\n      assume(url.pathname).equals('/has/slash');\n      assume(url.href).equals('http://example.com:80/has/slash');\n    });\n\n    it('updates query with object', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('query', { bar: 'foo' })).equals(data);\n\n      assume(data.query.foo).equals(undefined);\n      assume(data.query.bar).equals('foo');\n\n      assume(data.href).equals('http://google.com/?bar=foo');\n    });\n\n    it('updates query with a string', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('query', 'bar=foo')).equals(data);\n\n      assume(data.query.foo).equals(undefined);\n      assume(data.query.bar).equals('foo');\n\n      assume(data.href).equals('http://google.com/?bar=foo');\n\n      assume(data.set('query', '?baz=foo')).equals(data);\n\n      assume(data.query.bar).equals(undefined);\n      assume(data.query.baz).equals('foo');\n\n      assume(data.href).equals('http://google.com/?baz=foo');\n    });\n\n    it('allows custom parser when updating query', function() {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('query', 'bar=foo', function () { return '1337'; })).equals(data);\n\n      assume(data.query).equals('1337');\n\n      assume(data.href).equals('http://google.com/?1337');\n    });\n\n    it('throws error when updating query, if custom parser is not a function', function() {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(function () {\n        data.set('query', 'bar=foo', '1337');\n      }).throws(Error);\n\n      //\n      // `data` is unchanged.\n      //\n      assume(data.href).equals('http://google.com/?foo=bar');\n    });\n\n    it('prepends # to hash', function () {\n      var data = parse('http://example.com');\n\n      data.set('hash', 'usage');\n\n      assume(data.hash).equals('#usage');\n      assume(data.href).equals('http://example.com/#usage');\n\n      data.set('hash', '#license');\n\n      assume(data.hash).equals('#license');\n      assume(data.href).equals('http://example.com/#license');\n    });\n\n    it('updates the port when updating host', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('host', 'yahoo.com:808')).equals(data);\n\n      assume(data.hostname).equals('yahoo.com');\n      assume(data.host).equals('yahoo.com:808');\n      assume(data.port).equals('808');\n\n      assume(data.href).equals('http://yahoo.com:808/?foo=bar');\n    });\n\n    it('updates the port when updating host (IPv6)', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('host', '[56h7::1]:808')).equals(data);\n\n      assume(data.hostname).equals('[56h7::1]');\n      assume(data.host).equals('[56h7::1]:808');\n      assume(data.port).equals('808');\n\n      assume(data.href).equals('http://[56h7::1]:808/?foo=bar');\n    });\n\n    it('unsets the port when port is missing (IPv6)', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('host', '[56h7::1]')).equals(data);\n\n      assume(data.hostname).equals('[56h7::1]');\n      assume(data.host).equals('[56h7::1]');\n      assume(data.port).equals('');\n\n      assume(data.href).equals('http://[56h7::1]/?foo=bar');\n    });\n\n    it('unsets the port when the port is missing from host', function () {\n      var data = parse('http://google.com:8000/?foo=bar');\n\n      assume(data.set('host', 'yahoo.com')).equals(data);\n\n      assume(data.hostname).equals('yahoo.com');\n      assume(data.host).equals('yahoo.com');\n      assume(data.port).equals('');\n\n      assume(data.href).equals('http://yahoo.com/?foo=bar');\n    });\n\n    it('updates the host when updating hostname', function () {\n      var data = parse('http://google.com:808/?foo=bar');\n\n      assume(data.set('hostname', 'yahoo.com')).equals(data);\n\n      assume(data.hostname).equals('yahoo.com');\n      assume(data.host).equals('yahoo.com:808');\n      assume(data.port).equals('808');\n\n      assume(data.href).equals('http://yahoo.com:808/?foo=bar');\n    });\n\n    it('updates slashes when updating protocol', function() {\n      var data = parse('sip:alice@atlanta.com');\n\n      assume(data.set('protocol', 'https')).equals(data);\n\n      assume(data.href).equals('https://alice@atlanta.com');\n\n      assume(data.set('protocol', 'mailto', true)).equals(data);\n\n      assume(data.href).equals('mailto:alice@atlanta.com');\n    });\n\n    it('updates auth when updating username', function() {\n      var data = parse('https://example.com');\n\n      assume(data.set('username', 'foo')).equals(data);\n      assume(data.username).equals('foo');\n      assume(data.auth).equals('foo')\n      assume(data.href).equals('https://foo@example.com/');\n\n      data.set('username', '');\n\n      assume(data.username).equals('');\n      assume(data.auth).equals('')\n      assume(data.href).equals('https://example.com/');\n\n      data.set('username', 'foo:');\n\n      assume(data.username).equals('foo%3A');\n      assume(data.auth).equals('foo%3A')\n      assume(data.href).equals('https://foo%3A@example.com/');\n\n      data = parse('https://foo:bar@example.com')\n      data.set('username', 'baz');\n\n      assume(data.username).equals('baz');\n      assume(data.auth).equals('baz:bar')\n      assume(data.href).equals('https://baz:bar@example.com/');\n    });\n\n    it('updates auth when updating password', function() {\n      var data = parse('https://example.com');\n\n      assume(data.set('password', 'foo')).equals(data);\n      assume(data.password).equals('foo');\n      assume(data.auth).equals(':foo')\n      assume(data.href).equals('https://:foo@example.com/');\n\n      data.set('password', '');\n\n      assume(data.password).equals('');\n      assume(data.auth).equals('')\n      assume(data.href).equals('https://example.com/');\n\n      data.set('password', ':foo@');\n\n      assume(data.password).equals('%3Afoo%40');\n      assume(data.auth).equals(':%3Afoo%40')\n      assume(data.href).equals('https://:%3Afoo%40@example.com/');\n\n      data = parse('https://foo:bar@example.com')\n      data.set('password', 'baz');\n\n      assume(data.password).equals('baz');\n      assume(data.auth).equals('foo:baz')\n      assume(data.href).equals('https://foo:baz@example.com/');\n    });\n\n    it('updates username and password when updating auth', function() {\n      var data = parse('https://example.com');\n\n      assume(data.set('auth', 'foo:bar')).equals(data);\n      assume(data.username).equals('foo');\n      assume(data.password).equals('bar');\n      assume(data.href).equals('https://foo:bar@example.com/');\n\n      assume(data.set('auth', 'baz:')).equals(data);\n      assume(data.username).equals('baz');\n      assume(data.password).equals('');\n      assume(data.href).equals('https://baz@example.com/');\n\n      assume(data.set('auth', 'qux')).equals(data);\n      assume(data.username).equals('qux');\n      assume(data.password).equals('');\n      assume(data.href).equals('https://qux@example.com/');\n\n      assume(data.set('auth', ':quux')).equals(data);\n      assume(data.username).equals('');\n      assume(data.password).equals('quux');\n      assume(data.href).equals('https://:quux@example.com/');\n\n      assume(data.set('auth', 'user@:pass@')).equals(data);\n      assume(data.username).equals('user%40');\n      assume(data.password).equals('pass%40');\n      assume(data.href).equals('https://user%40:pass%40@example.com/');\n\n      assume(data.set('auth', 'user%40:pass%40')).equals(data);\n      assume(data.username).equals('user%40');\n      assume(data.password).equals('pass%40');\n      assume(data.href).equals('https://user%40:pass%40@example.com/');\n\n      assume(data.set('auth', 'user:pass:word')).equals(data);\n      assume(data.username).equals('user');\n      assume(data.password).equals('pass%3Aword');\n      assume(data.href).equals('https://user:pass%3Aword@example.com/');\n\n      assume(data.set('auth', 'user:pass%3Aword')).equals(data);\n      assume(data.username).equals('user');\n      assume(data.password).equals('pass%3Aword');\n      assume(data.href).equals('https://user:pass%3Aword@example.com/');\n    });\n\n    it('updates other values', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      assume(data.set('protocol', 'https:')).equals(data);\n      assume(data.protocol).equals('https:');\n      assume(data.href).equals('https://google.com/?foo=bar');\n\n      data.set('username', 'foo');\n\n      assume(data.username).equals('foo');\n      assume(data.href).equals('https://foo@google.com/?foo=bar');\n    });\n\n    it('lowercases the required values', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      data.set('protocol', 'HTTPS:');\n      assume(data.protocol).equals('https:');\n      assume(data.href).equals('https://google.com/?foo=bar');\n\n      data.set('host', 'GOOGLE.LOL');\n      assume(data.host).equals('google.lol');\n      assume(data.href).equals('https://google.lol/?foo=bar');\n\n      data.set('hostname', 'YAhOo.COm');\n      assume(data.hostname).equals('yahoo.com');\n      assume(data.href).equals('https://yahoo.com/?foo=bar');\n    });\n\n    it('correctly updates the origin when host/protocol/port changes', function () {\n      var data = parse('http://google.com/?foo=bar');\n\n      data.set('protocol', 'HTTPS:');\n      assume(data.protocol).equals('https:');\n      assume(data.origin).equals('https://google.com');\n\n      data.set('port', '1337');\n      assume(data.port).equals('1337');\n      assume(data.origin).equals('https://google.com:1337');\n\n      data.set('protocol', 'file:');\n      assume(data.protocol).equals('file:');\n      assume(data.origin).equals('null');\n    });\n  });\n\n  describe('fuzzy', function () {\n    var fuzz = require('./fuzzy')\n      , times = 10;\n\n    for (var i = 0; i < times; i++) {\n      (function (spec) {\n        it('parses: '+ spec.href, function () {\n          var url = parse(spec.href)\n            , prop;\n\n          for (prop in spec) {\n            assume(url[prop]).equals(spec[prop]);\n          }\n        });\n      })(fuzz());\n    }\n  });\n});\n"], "filenames": ["index.js", "test/test.js"], "buggy_code_start_loc": [9, 50], "buggy_code_end_loc": [10, 52], "fixing_code_start_loc": [9, 50], "fixing_code_end_loc": [10, 58], "type": "CWE-639", "message": "Authorization Bypass Through User-Controlled Key in NPM url-parse prior to 1.5.9.", "other": {"cve": {"id": "CVE-2022-0691", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-21T09:15:07.297", "lastModified": "2023-02-23T03:15:11.820", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Authorization Bypass Through User-Controlled Key in NPM url-parse prior to 1.5.9."}, {"lang": "es", "value": "Una Omisi\u00f3n de Autorizaci\u00f3n Mediante la Clave Controlada por el Usuario en NPM url-parse versiones anteriores a 1.5.9"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-639"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-639"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:url-parse_project:url-parse:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.5.9", "matchCriteriaId": "96C6953C-4507-42DB-802F-9DD1FE068E8A"}]}]}], "references": [{"url": "https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/57124ed5-4b68-4934-8325-2c546257f2e4", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2023/02/msg00030.html", "source": "security@huntr.dev"}, {"url": "https://security.netapp.com/advisory/ntap-20220325-0006/", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63"}}