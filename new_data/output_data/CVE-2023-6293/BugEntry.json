{"buggy_code": ["/**\n * Deep copies properties of all sources into target object.\n * The last source overrides all properties of the previous\n * ones, if they have the same names\n */\nexport function deepAssign<T, S1, S2, S3>(\n  target: T,\n  source1: S1,\n  source2: S2,\n  source3: S3\n): T & S1 & S2 & S3;\nexport function deepAssign<T, S1, S2>(target: T, source1: S1, source2: S2): T & S1 & S2;\nexport function deepAssign<T, S>(target: T, source: S): T & S;\nexport function deepAssign<S>(target: {}, source: S): S;\nexport function deepAssign(target: any, ...sources: any[]): any {\n  sources.forEach((source) => {\n    Object.getOwnPropertyNames(source).forEach((key) => assign(key, target, source));\n    /* istanbul ignore next */\n    if (Object.getOwnPropertySymbols) {\n      Object.getOwnPropertySymbols(source).forEach((key) => assign(key, target, source));\n    }\n  });\n  return target;\n\n  function assign(key: string | number | symbol, _target: any, _source: any): void {\n    const sourceValue = _source[key];\n\n    if (sourceValue !== void 0) {\n      let targetValue = _target[key];\n\n      if (Array.isArray(sourceValue)) {\n        if (!Array.isArray(targetValue)) {\n          targetValue = [];\n        }\n        const length = targetValue.length;\n\n        sourceValue.forEach((_, index) => assign(length + index, targetValue, sourceValue));\n      } else if (typeof sourceValue === 'object') {\n        if (sourceValue instanceof RegExp) {\n          targetValue = cloneRegExp(sourceValue);\n        } else if (sourceValue instanceof Date) {\n          targetValue = new Date(sourceValue);\n        } else if (sourceValue === null) {\n          targetValue = null;\n        } else {\n          if (!targetValue) {\n            targetValue = Object.create(sourceValue.constructor.prototype);\n          }\n          deepAssign(targetValue, sourceValue);\n        }\n      } else {\n        targetValue = sourceValue;\n      }\n      _target[key] = targetValue;\n    }\n  }\n}\n\n/**\n * I clone the given RegExp object, and ensure that the given flags exist on\n * the clone. The injectFlags parameter is purely additive - it cannot remove\n * flags that already exist on the\n *\n * @param input RegExp - I am the regular expression object being cloned.\n * @param injectFlags String( Optional ) - I am the flags to enforce on the clone.\n * @source https://www.bennadel.com/blog/2664-cloning-regexp-regular-expression-objects-in-javascript.htm\n */\nexport function cloneRegExp(input: RegExp, injectFlags?: string): RegExp {\n  const pattern = input.source;\n  let flags = '';\n  // Make sure the parameter is a defined string - it will make the conditional\n  // logic easier to read.\n  injectFlags = injectFlags || '';\n  // Test for global.\n  if (input.global || /g/i.test(injectFlags)) {\n    flags += 'g';\n  }\n  // Test for ignoreCase.\n  if (input.ignoreCase || /i/i.test(injectFlags)) {\n    flags += 'i';\n  }\n  // Test for multiline.\n  if (input.multiline || /m/i.test(injectFlags)) {\n    flags += 'm';\n  }\n  // Return a clone with the additive flags.\n  return new RegExp(pattern, flags);\n}\n\nexport function getAllPropertyNames(obj: any): string[] {\n  const names: string[] = [];\n  const exists: { [name: string]: boolean | undefined } = {};\n  do {\n    // eslint-disable-next-line prefer-spread\n    names.push.apply(names, Object.getOwnPropertyNames(obj));\n    obj = Object.getPrototypeOf(obj);\n  } while (obj !== Object.prototype);\n\n  return names.filter((name) => {\n    const isValid = !exists[name] && name !== 'constructor';\n    exists[name] = true;\n    return isValid;\n  });\n}\n", "import { expect } from 'chai';\nimport { deepAssign } from '../../../src/shared/object';\n\ndescribe('utils', () => {\n  describe('object', () => {\n    describe('deepAssign', () => {\n      const childSourceF = {};\n      const childSourceA = { f: childSourceF };\n      const childSourceB = {};\n      const source1 = {\n        a: childSourceA,\n        b: childSourceB,\n        c: 1,\n        d: 'd',\n        over: 'ride',\n        regex: /reg/gim,\n        notNull: null,\n      };\n      const source2 = {\n        e: 'f\u00fcr elisa',\n        g: () => null,\n        arr: [{ h: 1 }, {}, 'e'],\n        over: 'ridden',\n        nullable: null,\n        notNull: 'notNull',\n      };\n      const sourceKeys = [].concat(Object.keys(source1), Object.keys(source2));\n\n      it('should not be undefined', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        expect(copy).not.to.be.undefined;\n      });\n\n      it('should have all keys of sources', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        sourceKeys.forEach((key) => expect(copy).to.have.property(key));\n      });\n\n      it('should override previous properties', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        expect(copy).to.have.property('over', 'ridden');\n      });\n\n      it('should have all primitive & function values of sources', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        sourceKeys.forEach((key) => {\n          if (typeof copy[key] !== 'object') {\n            expect(copy[key]).to.equal(source2[key] || source1[key]);\n          }\n        });\n      });\n\n      it('should have copies of all non-primitive values of sources', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        sourceKeys.forEach((key) => {\n          if (typeof copy[key] === 'object' && copy[key] !== null) {\n            expect(copy[key]).not.to.equal(source1[key] || source2[key]);\n            expect(copy[key]).to.eql(source1[key] || source2[key]);\n          }\n        });\n      });\n\n      it('should have copies of child source', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        expect(copy.a).to.have.property('f');\n        expect(copy.a.f).to.not.equal(source1.a.f);\n        expect(copy.a.f).to.eql(source1.a.f);\n      });\n\n      it('should have copy of array items', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        expect(copy.arr).to.be.an('array');\n\n        copy.arr.forEach((value, index) => {\n          const isObject = typeof value === 'object';\n\n          if (isObject) {\n            expect(value).not.to.equal(source2.arr[index]);\n            expect(value).to.eql(source2.arr[index]);\n          } else {\n            expect(value).to.equal(source2.arr[index]);\n          }\n        });\n      });\n\n      it('should have copy of nullable', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        expect(copy.nullable).to.equals(null);\n        expect(copy.notNull).to.not.equals(null);\n      });\n\n      it('should keep prototype chain', () => {\n        class Test {\n          protoFn(): any {\n            // protoFn\n          }\n        }\n\n        const copy = deepAssign({}, { test: new Test() });\n\n        expect(copy.test).to.have.property('protoFn').that.is.a('function');\n      });\n\n      if (Object.getOwnPropertySymbols) {\n        it('should copy symbol based objects', () => {\n          const symbol = Symbol('test');\n          const value = 'test';\n          const copy = deepAssign({}, { [symbol]: value });\n\n          expect(copy[symbol]).to.equal(value);\n        });\n      }\n    });\n  });\n});\n"], "fixing_code": ["/**\n * Deep copies properties of all sources into target object.\n * The last source overrides all properties of the previous\n * ones, if they have the same names\n */\nexport function deepAssign<T, S1, S2, S3>(\n  target: T,\n  source1: S1,\n  source2: S2,\n  source3: S3\n): T & S1 & S2 & S3;\nexport function deepAssign<T, S1, S2>(target: T, source1: S1, source2: S2): T & S1 & S2;\nexport function deepAssign<T, S>(target: T, source: S): T & S;\nexport function deepAssign<S>(target: {}, source: S): S;\nexport function deepAssign(target: any, ...sources: any[]): any {\n  sources.forEach((source) => {\n    Object.getOwnPropertyNames(source).forEach(\n      (key) =>\n        !['__proto__', 'constructor', 'prototype'].includes(key) && assign(key, target, source)\n    );\n    /* istanbul ignore next */\n    if (Object.getOwnPropertySymbols) {\n      Object.getOwnPropertySymbols(source).forEach((key) => assign(key, target, source));\n    }\n  });\n  return target;\n\n  function assign(key: string | number | symbol, _target: any, _source: any): void {\n    const sourceValue = _source[key];\n\n    if (sourceValue !== void 0) {\n      let targetValue = _target[key];\n\n      if (Array.isArray(sourceValue)) {\n        if (!Array.isArray(targetValue)) {\n          targetValue = [];\n        }\n        const length = targetValue.length;\n\n        sourceValue.forEach((_, index) => assign(length + index, targetValue, sourceValue));\n      } else if (typeof sourceValue === 'object') {\n        if (sourceValue instanceof RegExp) {\n          targetValue = cloneRegExp(sourceValue);\n        } else if (sourceValue instanceof Date) {\n          targetValue = new Date(sourceValue);\n        } else if (sourceValue === null) {\n          targetValue = null;\n        } else {\n          if (!targetValue) {\n            targetValue = Object.create(sourceValue.constructor.prototype);\n          }\n          deepAssign(targetValue, sourceValue);\n        }\n      } else {\n        targetValue = sourceValue;\n      }\n      _target[key] = targetValue;\n    }\n  }\n}\n\n/**\n * I clone the given RegExp object, and ensure that the given flags exist on\n * the clone. The injectFlags parameter is purely additive - it cannot remove\n * flags that already exist on the\n *\n * @param input RegExp - I am the regular expression object being cloned.\n * @param injectFlags String( Optional ) - I am the flags to enforce on the clone.\n * @source https://www.bennadel.com/blog/2664-cloning-regexp-regular-expression-objects-in-javascript.htm\n */\nexport function cloneRegExp(input: RegExp, injectFlags?: string): RegExp {\n  const pattern = input.source;\n  let flags = '';\n  // Make sure the parameter is a defined string - it will make the conditional\n  // logic easier to read.\n  injectFlags = injectFlags || '';\n  // Test for global.\n  if (input.global || /g/i.test(injectFlags)) {\n    flags += 'g';\n  }\n  // Test for ignoreCase.\n  if (input.ignoreCase || /i/i.test(injectFlags)) {\n    flags += 'i';\n  }\n  // Test for multiline.\n  if (input.multiline || /m/i.test(injectFlags)) {\n    flags += 'm';\n  }\n  // Return a clone with the additive flags.\n  return new RegExp(pattern, flags);\n}\n\nexport function getAllPropertyNames(obj: any): string[] {\n  const names: string[] = [];\n  const exists: { [name: string]: boolean | undefined } = {};\n  do {\n    // eslint-disable-next-line prefer-spread\n    names.push.apply(names, Object.getOwnPropertyNames(obj));\n    obj = Object.getPrototypeOf(obj);\n  } while (obj !== Object.prototype);\n\n  return names.filter((name) => {\n    const isValid = !exists[name] && name !== 'constructor';\n    exists[name] = true;\n    return isValid;\n  });\n}\n", "import { expect } from 'chai';\nimport { deepAssign } from '../../../src/shared/object';\nimport { addScopeOptions } from '../../../src/scopes/scope-service';\n\ndescribe('utils', () => {\n  describe('object', () => {\n    describe('deepAssign', () => {\n      const childSourceF = {};\n      const childSourceA = { f: childSourceF };\n      const childSourceB = {};\n      const source1 = {\n        a: childSourceA,\n        b: childSourceB,\n        c: 1,\n        d: 'd',\n        over: 'ride',\n        regex: /reg/gim,\n        notNull: null,\n      };\n      const source2 = {\n        e: 'f\u00fcr elisa',\n        g: () => null,\n        arr: [{ h: 1 }, {}, 'e'],\n        over: 'ridden',\n        nullable: null,\n        notNull: 'notNull',\n      };\n      const sourceKeys = [].concat(Object.keys(source1), Object.keys(source2));\n\n      it('should not be undefined', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        expect(copy).not.to.be.undefined;\n      });\n\n      it('should have all keys of sources', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        sourceKeys.forEach((key) => expect(copy).to.have.property(key));\n      });\n\n      it('should override previous properties', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        expect(copy).to.have.property('over', 'ridden');\n      });\n\n      it('should have all primitive & function values of sources', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        sourceKeys.forEach((key) => {\n          if (typeof copy[key] !== 'object') {\n            expect(copy[key]).to.equal(source2[key] || source1[key]);\n          }\n        });\n      });\n\n      it('should have copies of all non-primitive values of sources', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        sourceKeys.forEach((key) => {\n          if (typeof copy[key] === 'object' && copy[key] !== null) {\n            expect(copy[key]).not.to.equal(source1[key] || source2[key]);\n            expect(copy[key]).to.eql(source1[key] || source2[key]);\n          }\n        });\n      });\n\n      it('should have copies of child source', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        expect(copy.a).to.have.property('f');\n        expect(copy.a.f).to.not.equal(source1.a.f);\n        expect(copy.a.f).to.eql(source1.a.f);\n      });\n\n      it('should have copy of array items', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        expect(copy.arr).to.be.an('array');\n\n        copy.arr.forEach((value, index) => {\n          const isObject = typeof value === 'object';\n\n          if (isObject) {\n            expect(value).not.to.equal(source2.arr[index]);\n            expect(value).to.eql(source2.arr[index]);\n          } else {\n            expect(value).to.equal(source2.arr[index]);\n          }\n        });\n      });\n\n      it('should have copy of nullable', () => {\n        const copy = deepAssign({}, source1, source2);\n\n        expect(copy.nullable).to.equals(null);\n        expect(copy.notNull).to.not.equals(null);\n      });\n\n      it('should keep prototype chain', () => {\n        class Test {\n          protoFn(): any {\n            // protoFn\n          }\n        }\n\n        const copy = deepAssign({}, { test: new Test() });\n\n        expect(copy.test).to.have.property('protoFn').that.is.a('function');\n      });\n\n      it('ignore prototype property', () => {\n        const BAD_JSON = JSON.parse('{\"__proto__\":{\"polluted\":true}}');\n        const empty_scope = {};\n\n        addScopeOptions(empty_scope, BAD_JSON);\n        expect(empty_scope).not.to.have.property('polluted');\n      });\n\n      if (Object.getOwnPropertySymbols) {\n        it('should copy symbol based objects', () => {\n          const symbol = Symbol('test');\n          const value = 'test';\n          const copy = deepAssign({}, { [symbol]: value });\n\n          expect(copy[symbol]).to.equal(value);\n        });\n      }\n    });\n  });\n});\n"], "filenames": ["src/shared/object.ts", "test/specs/utils/object.spec.ts"], "buggy_code_start_loc": [17, 2], "buggy_code_end_loc": [18, 111], "fixing_code_start_loc": [17, 3], "fixing_code_end_loc": [21, 121], "type": "CWE-1321", "message": "Prototype Pollution in GitHub repository robinbuschmann/sequelize-typescript prior to 2.1.6.", "other": {"cve": {"id": "CVE-2023-6293", "sourceIdentifier": "security@huntr.dev", "published": "2023-11-24T20:15:07.293", "lastModified": "2023-11-30T19:55:33.327", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Prototype Pollution in GitHub repository robinbuschmann/sequelize-typescript prior to 2.1.6."}, {"lang": "es", "value": "Prototipo de contaminaci\u00f3n en el repositorio de GitHub robinbuschmann/sequelize-typescript anterior a 2.1.6."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.2}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sequelizejs:sequelize-typescript:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "2.1.6", "matchCriteriaId": "90D60CEC-FA6E-44DE-9975-731B18314733"}]}]}], "references": [{"url": "https://github.com/robinbuschmann/sequelize-typescript/commit/5ce8afdd1671b08c774ce106b000605ba8fccf78", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/36a7ecbf-4d3d-462e-86a3-cda7b1ec64e2", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/robinbuschmann/sequelize-typescript/commit/5ce8afdd1671b08c774ce106b000605ba8fccf78"}}