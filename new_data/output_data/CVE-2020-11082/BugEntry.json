{"buggy_code": ["# frozen_string_literal: true\n\nmodule Kaminari\n  module Helpers\n    PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name].freeze\n\n    # A tag stands for an HTML tag inside the paginator.\n    # Basically, a tag has its own partial template file, so every tag can be\n    # rendered into String using its partial template.\n    #\n    # The template file should be placed in your app/views/kaminari/ directory\n    # with underscored class name (besides the \"Tag\" class. Tag is an abstract\n    # class, so _tag partial is not needed).\n    #   e.g.)  PrevLink  ->  app/views/kaminari/_prev_link.html.erb\n    #\n    # When no matching template were found in your app, the engine's pre\n    # installed template will be used.\n    #   e.g.)  Paginator  ->  $GEM_HOME/kaminari-x.x.x/app/views/kaminari/_paginator.html.erb\n    class Tag\n      def initialize(template, params: {}, param_name: nil, theme: nil, views_prefix: nil, **options) #:nodoc:\n        @template, @theme, @views_prefix, @options = template, theme, views_prefix, options\n        @param_name = param_name || Kaminari.config.param_name\n        @params = template.params\n        # @params in Rails 5 no longer inherits from Hash\n        @params = @params.to_unsafe_h if @params.respond_to?(:to_unsafe_h)\n        @params = @params.with_indifferent_access\n        @params.except!(*PARAM_KEY_EXCEPT_LIST)\n        @params.merge! params\n      end\n\n      def to_s(locals = {}) #:nodoc:\n        formats = (@template.respond_to?(:formats) ? @template.formats : Array(@template.params[:format])) + [:html]\n        @template.render partial: partial_path, locals: @options.merge(locals), formats: formats\n      end\n\n      def page_url_for(page)\n        params = params_for(page)\n        params[:only_path] = true\n        @template.url_for params\n      end\n\n      private\n\n      def params_for(page)\n        page_params = Rack::Utils.parse_nested_query(\"#{@param_name}=#{page}\")\n        page_params = @params.deep_merge(page_params)\n\n        if !Kaminari.config.params_on_first_page && (page <= 1)\n          # This converts a hash:\n          #   from: {other: \"params\", page: 1}\n          #     to: {other: \"params\", page: nil}\n          #   (when @param_name == \"page\")\n          #\n          #   from: {other: \"params\", user: {name: \"yuki\", page: 1}}\n          #     to: {other: \"params\", user: {name: \"yuki\", page: nil}}\n          #   (when @param_name == \"user[page]\")\n          @param_name.to_s.scan(/[\\w\\.]+/)[0..-2].inject(page_params){|h, k| h[k] }[$&] = nil\n        end\n\n        page_params\n      end\n\n      def partial_path\n        [\n         @views_prefix,\n         \"kaminari\",\n         @theme,\n         self.class.name.demodulize.underscore\n        ].compact.join(\"/\")\n      end\n    end\n\n    # Tag that contains a link\n    module Link\n      # target page number\n      def page\n        raise 'Override page with the actual page value to be a Page.'\n      end\n      # the link's href\n      def url\n        page_url_for page\n      end\n      def to_s(locals = {}) #:nodoc:\n        locals[:url] = url\n        super locals\n      end\n    end\n\n    # A page\n    class Page < Tag\n      include Link\n      # target page number\n      def page\n        @options[:page]\n      end\n      def to_s(locals = {}) #:nodoc:\n        locals[:page] = page\n        super locals\n      end\n    end\n\n    # Link with page number that appears at the leftmost\n    class FirstPage < Tag\n      include Link\n      def page #:nodoc:\n        1\n      end\n    end\n\n    # Link with page number that appears at the rightmost\n    class LastPage < Tag\n      include Link\n      def page #:nodoc:\n        @options[:total_pages]\n      end\n    end\n\n    # The \"previous\" page of the current page\n    class PrevPage < Tag\n      include Link\n\n      # TODO: Remove this initializer before 1.3.0.\n      def initialize(template, params: {}, param_name: nil, theme: nil, views_prefix: nil, **options) #:nodoc:\n        # params in Rails 5 may not be a Hash either,\n        # so it must be converted to a Hash to be merged into @params\n        if params && params.respond_to?(:to_unsafe_h)\n          ActiveSupport::Deprecation.warn 'Explicitly passing params to helpers could be omitted.'\n          params = params.to_unsafe_h\n        end\n\n        super(template, params: params, param_name: param_name, theme: theme, views_prefix: views_prefix, **options)\n      end\n\n      def page #:nodoc:\n        @options[:current_page] - 1\n      end\n    end\n\n    # The \"next\" page of the current page\n    class NextPage < Tag\n      include Link\n\n      # TODO: Remove this initializer before 1.3.0.\n      def initialize(template, params: {}, param_name: nil, theme: nil, views_prefix: nil, **options) #:nodoc:\n        # params in Rails 5 may not be a Hash either,\n        # so it must be converted to a Hash to be merged into @params\n        if params && params.respond_to?(:to_unsafe_h)\n          ActiveSupport::Deprecation.warn 'Explicitly passing params to helpers could be omitted.'\n          params = params.to_unsafe_h\n        end\n\n        super(template, params: params, param_name: param_name, theme: theme, views_prefix: views_prefix, **options)\n      end\n\n      def page #:nodoc:\n        @options[:current_page] + 1\n      end\n    end\n\n    # Non-link tag that stands for skipped pages...\n    class Gap < Tag\n    end\n  end\nend\n"], "fixing_code": ["# frozen_string_literal: true\n\nmodule Kaminari\n  module Helpers\n    PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name, :original_script_name].freeze\n\n    # A tag stands for an HTML tag inside the paginator.\n    # Basically, a tag has its own partial template file, so every tag can be\n    # rendered into String using its partial template.\n    #\n    # The template file should be placed in your app/views/kaminari/ directory\n    # with underscored class name (besides the \"Tag\" class. Tag is an abstract\n    # class, so _tag partial is not needed).\n    #   e.g.)  PrevLink  ->  app/views/kaminari/_prev_link.html.erb\n    #\n    # When no matching template were found in your app, the engine's pre\n    # installed template will be used.\n    #   e.g.)  Paginator  ->  $GEM_HOME/kaminari-x.x.x/app/views/kaminari/_paginator.html.erb\n    class Tag\n      def initialize(template, params: {}, param_name: nil, theme: nil, views_prefix: nil, **options) #:nodoc:\n        @template, @theme, @views_prefix, @options = template, theme, views_prefix, options\n        @param_name = param_name || Kaminari.config.param_name\n        @params = template.params\n        # @params in Rails 5 no longer inherits from Hash\n        @params = @params.to_unsafe_h if @params.respond_to?(:to_unsafe_h)\n        @params = @params.with_indifferent_access\n        @params.except!(*PARAM_KEY_EXCEPT_LIST)\n        @params.merge! params\n      end\n\n      def to_s(locals = {}) #:nodoc:\n        formats = (@template.respond_to?(:formats) ? @template.formats : Array(@template.params[:format])) + [:html]\n        @template.render partial: partial_path, locals: @options.merge(locals), formats: formats\n      end\n\n      def page_url_for(page)\n        params = params_for(page)\n        params[:only_path] = true\n        @template.url_for params\n      end\n\n      private\n\n      def params_for(page)\n        page_params = Rack::Utils.parse_nested_query(\"#{@param_name}=#{page}\")\n        page_params = @params.deep_merge(page_params)\n\n        if !Kaminari.config.params_on_first_page && (page <= 1)\n          # This converts a hash:\n          #   from: {other: \"params\", page: 1}\n          #     to: {other: \"params\", page: nil}\n          #   (when @param_name == \"page\")\n          #\n          #   from: {other: \"params\", user: {name: \"yuki\", page: 1}}\n          #     to: {other: \"params\", user: {name: \"yuki\", page: nil}}\n          #   (when @param_name == \"user[page]\")\n          @param_name.to_s.scan(/[\\w\\.]+/)[0..-2].inject(page_params){|h, k| h[k] }[$&] = nil\n        end\n\n        page_params\n      end\n\n      def partial_path\n        [\n         @views_prefix,\n         \"kaminari\",\n         @theme,\n         self.class.name.demodulize.underscore\n        ].compact.join(\"/\")\n      end\n    end\n\n    # Tag that contains a link\n    module Link\n      # target page number\n      def page\n        raise 'Override page with the actual page value to be a Page.'\n      end\n      # the link's href\n      def url\n        page_url_for page\n      end\n      def to_s(locals = {}) #:nodoc:\n        locals[:url] = url\n        super locals\n      end\n    end\n\n    # A page\n    class Page < Tag\n      include Link\n      # target page number\n      def page\n        @options[:page]\n      end\n      def to_s(locals = {}) #:nodoc:\n        locals[:page] = page\n        super locals\n      end\n    end\n\n    # Link with page number that appears at the leftmost\n    class FirstPage < Tag\n      include Link\n      def page #:nodoc:\n        1\n      end\n    end\n\n    # Link with page number that appears at the rightmost\n    class LastPage < Tag\n      include Link\n      def page #:nodoc:\n        @options[:total_pages]\n      end\n    end\n\n    # The \"previous\" page of the current page\n    class PrevPage < Tag\n      include Link\n\n      # TODO: Remove this initializer before 1.3.0.\n      def initialize(template, params: {}, param_name: nil, theme: nil, views_prefix: nil, **options) #:nodoc:\n        # params in Rails 5 may not be a Hash either,\n        # so it must be converted to a Hash to be merged into @params\n        if params && params.respond_to?(:to_unsafe_h)\n          ActiveSupport::Deprecation.warn 'Explicitly passing params to helpers could be omitted.'\n          params = params.to_unsafe_h\n        end\n\n        super(template, params: params, param_name: param_name, theme: theme, views_prefix: views_prefix, **options)\n      end\n\n      def page #:nodoc:\n        @options[:current_page] - 1\n      end\n    end\n\n    # The \"next\" page of the current page\n    class NextPage < Tag\n      include Link\n\n      # TODO: Remove this initializer before 1.3.0.\n      def initialize(template, params: {}, param_name: nil, theme: nil, views_prefix: nil, **options) #:nodoc:\n        # params in Rails 5 may not be a Hash either,\n        # so it must be converted to a Hash to be merged into @params\n        if params && params.respond_to?(:to_unsafe_h)\n          ActiveSupport::Deprecation.warn 'Explicitly passing params to helpers could be omitted.'\n          params = params.to_unsafe_h\n        end\n\n        super(template, params: params, param_name: param_name, theme: theme, views_prefix: views_prefix, **options)\n      end\n\n      def page #:nodoc:\n        @options[:current_page] + 1\n      end\n    end\n\n    # Non-link tag that stands for skipped pages...\n    class Gap < Tag\n    end\n  end\nend\n"], "filenames": ["kaminari-core/lib/kaminari/helpers/tags.rb"], "buggy_code_start_loc": [5], "buggy_code_end_loc": [6], "fixing_code_start_loc": [5], "fixing_code_end_loc": [6], "type": "CWE-79", "message": "In Kaminari before 1.2.1, there is a vulnerability that would allow an attacker to inject arbitrary code into pages with pagination links. This has been fixed in 1.2.1.", "other": {"cve": {"id": "CVE-2020-11082", "sourceIdentifier": "security-advisories@github.com", "published": "2020-05-28T21:15:11.437", "lastModified": "2021-11-30T22:07:23.293", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Kaminari before 1.2.1, there is a vulnerability that would allow an attacker to inject arbitrary code into pages with pagination links. This has been fixed in 1.2.1."}, {"lang": "es", "value": "En Kaminari versiones anteriores a 1.2.1, presenta una vulnerabilidad que permitir\u00eda a un atacante inyectar c\u00f3digo arbitrario en p\u00e1ginas con enlaces de paginaci\u00f3n. Esto ha sido corregido en la versi\u00f3n 1.2.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kaminari_project:kaminari:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.1", "matchCriteriaId": "595134CB-7583-4980-937B-DE07E7A661FB"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}], "references": [{"url": "https://github.com/github/advisory-review/pull/1020", "source": "security-advisories@github.com", "tags": ["Broken Link"]}, {"url": "https://github.com/kaminari/kaminari/commit/8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/kaminari/kaminari/security/advisories/GHSA-r5jw-62xg-j433", "source": "security-advisories@github.com", "tags": ["Mitigation", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2021/09/msg00011.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2021/dsa-5005", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kaminari/kaminari/commit/8dd52a1aed3d2fa2835d836de23fc0d8c4ff5db8"}}