{"buggy_code": ["<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\nrequire_once MAX_PATH . '/lib/OA/Dal.php';\nrequire_once MAX_PATH . '/lib/OA/Permission.php';\nrequire_once MAX_PATH . '/lib/OA/Permission/User.php';\nrequire_once MAX_PATH . '/lib/OA/Admin/Template.php';\nrequire_once LIB_PATH . '/Extension/authentication/authentication.php';\n\n/**\n * A class to deal with user authentication\n *\n */\nclass OA_Auth\n{\n    /**\n     * Returns authentication plugin\n     *\n     * @static\n     * @param string $authType\n     * @return Plugins_Authentication\n     */\n    static function staticGetAuthPlugin()\n    {\n        static $authPlugin;\n        static $authPluginType;\n\n        if (!isset($authPlugin) || $authPluginType != $authType) {\n            $aConf = $GLOBALS['_MAX']['CONF'];\n            if (!empty($aConf['authentication']['type'])) {\n                $authType = $aConf['authentication']['type'];\n                $authPlugin = OX_Component::factoryByComponentIdentifier($authType);\n            }\n            if (!$authPlugin) {\n                // Fall back to internal\n                $authType = 'none';\n                $authPlugin = new Plugins_Authentication();\n            }\n            if (!$authPlugin) {\n                OA::debug('Error while including authentication plugin and unable to fallback', PEAR_LOG_ERR);\n            }\n            $authPluginType = $authType;\n        }\n        return $authPlugin;\n    }\n\n    /**\n     * Logs in an user\n     *\n     * @static\n     *\n     * @param callback $redirectCallback\n     * @return mixed Array on success\n     */\n    function login($redirectCallback = null)\n    {\n        $aConf = $GLOBALS['_MAX']['CONF'];\n\n        if (!is_callable($redirectCallback)) {\n            // Set the default callback\n            $redirectCallback = array('OA_Auth', 'checkRedirect');\n        }\n\n        if (call_user_func($redirectCallback)) {\n            header('location: http://'.$aConf['webpath']['admin']);\n            exit();\n        }\n\n        if (defined('OA_SKIP_LOGIN')) {\n            return OA_Auth::getFakeSessionData();\n        }\n\n        if (OA_Auth::suppliedCredentials()) {\n            $doUser = OA_Auth::authenticateUser();\n\n            if (!$doUser) {\n                sleep(3);\n                OA_Auth::restart($GLOBALS['strUsernameOrPasswordWrong']);\n            }\n\n            return OA_Auth::getSessionData($doUser);\n        }\n\n        OA_Auth::restart();\n    }\n\n    /**\n     * A method to logout and redirect to the correct URL\n     *\n     * @static\n     *\n     * @todo Fix when preferences are ready and logout url is stored into the\n     * preferences table\n     */\n    function logout()\n    {\n        $authPlugin = OA_Auth::staticGetAuthPlugin();\n        $authPlugin->logout();\n    }\n\n    /**\n     * A method to check if the login credential were supplied as POST parameters\n     *\n     * @static\n     *\n     * @return bool\n     */\n    function suppliedCredentials()\n    {\n        $authPlugin = OA_Auth::staticGetAuthPlugin();\n        return $authPlugin->suppliedCredentials();\n    }\n\n    /**\n     * A method to authenticate user\n     *\n     * @static\n     *\n     * @return bool\n     */\n    function authenticateUser()\n    {\n        $authPlugin = OA_Auth::staticGetAuthPlugin();\n        $doUsers = $authPlugin->authenticateUser();\n        if ($doUsers) {\n            // never upgrade the username\n            $tmpUserName = $doUsers->username;\n            unset($doUsers->username);\n            $doUsers->logDateLastLogIn();\n            $doUsers->username = $tmpUserName;\n        }\n        return $doUsers;\n    }\n\n    /**\n     * A method to test if the user is logged in\n     *\n     * @return boolean\n     */\n    function isLoggedIn()\n    {\n        return is_a(OA_Permission::getCurrentUser(), 'OA_Permission_User');\n    }\n\n    /**\n     * A static method to return the data to be stored in the session variable\n     *\n     * @static\n     *\n     * @param DataObjects_Users $doUser\n     * @param bool $skipDatabaseAccess True if the OA_Permission_User constructor should\n     *                                 avoid performing some checks accessing the database\n     * @return array\n     */\n    function getSessionData($doUser, $skipDatabaseAccess = false)\n    {\n        return array(\n            'user' => new OA_Permission_User($doUser, $skipDatabaseAccess)\n        );\n    }\n\n    /**\n     * A static method to return fake data to be stored in the session variable\n     *\n     * @static\n     *\n     * @return array\n     */\n    function getFakeSessionData()\n    {\n        return array(\n            'user' => false\n        );\n    }\n\n    /**\n     * A static method to restart with a login screen, eventually displaying a custom message\n     *\n     * @static\n     *\n     * @param string $sMessage Optional message\n     */\n    function restart($sMessage = '')\n    {\n        $_COOKIE['sessionID'] = phpAds_SessionStart();\n        OA_Auth::displayLogin($sMessage, $_COOKIE['sessionID']);\n    }\n\n    /**\n     * A static method to restart with a login screen, displaying an error message\n     *\n     * @static\n     *\n     * @param PEAR_Error $oError\n     */\n    function displayError($oError)\n    {\n        OA_Auth::restart($oError->getMessage());\n    }\n\n    /**\n     * A static method to display a login screen\n     *\n     * @static\n     *\n     * @param string $sMessage\n     * @param string $sessionID\n     * @param bool $inlineLogin\n     */\n    function displayLogin($sMessage = '', $sessionID = 0, $inLineLogin = false)\n    {\n        $authLogin = OA_Auth::staticGetAuthPlugin();\n        $authLogin->displayLogin($sMessage, $sessionID, $inLineLogin);\n    }\n\n    /**\n     * Check if application is running from appropriate dir\n     *\n     * @static\n     *\n     * @param string $location\n     * @return boolean True if a redirect is needed\n     */\n    function checkRedirect($location = 'admin')\n    {\n        $aConf = $GLOBALS['_MAX']['CONF'];\n\n        $redirect = false;\n        // Is it possible to detect that we are NOT in the admin directory\n        // via the URL the user is accessing OpenXwith?\n        if (!preg_match('#/'. $location .'/?$#', $_SERVER['REQUEST_URI'])) {\n            $dirName = dirname($_SERVER['REQUEST_URI']);\n            // This check now allows for files in plugin folders\n            $pluginDirName = basename($aConf['pluginPaths'][$location]);\n            if (!preg_match(\"#/{$location}(/{$pluginDirName}/.*?)?/?$#\", $dirName)) {\n                // The user is not in the \"admin\" folder directly. Are they\n                // in the admin folder as a result of a \"full\" virtual host\n                // configuration?\n                if ($aConf['webpath']['admin'] != OX_getHostName()) {\n                    // Not a \"full\" virtual host setup, so re-direct\n                    $redirect = true;\n                }\n            }\n        }\n\n        return $redirect;\n    }\n\n}\n\n?>\n", "<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\nrequire_once MAX_PATH . '/lib/max/Plugin/Translation.php';\nrequire_once LIB_PATH . '/Plugin/Component.php';\nrequire_once 'Date.php';\nrequire_once MAX_PATH . '/lib/max/language/Loader.php';\nrequire_once MAX_PATH . '/lib/pear/HTML/QuickForm/Rule/Email.php';\n\nLanguage_Loader::load('settings');\n\n/**\n * Plugins_Authentication is an parent class for Authentication plugins\n *\n * @package    OpenXPlugin\n * @subpackage Authentication\n */\nclass Plugins_Authentication extends OX_Component\n{\n    /**\n     * Array to keep a reference to signup errors (if any)\n     *\n     * @var array\n     */\n    var $aSignupErrors = array();\n\n    var $aValidationErrors = array();\n\n    /**\n     * Checks if credentials are passed and whether the plugin should carry on the authentication\n     *\n     * @return boolean  True if credentials were passed, else false\n     */\n    function suppliedCredentials()\n    {\n        return isset($_POST['username']) || isset($_POST['password']);\n    }\n\n    /**\n     * Authenticate user\n     *\n     * @return DataObjects_Users  returns users dataobject on success authentication\n     *                            or null if user wasn't succesfully authenticated\n     */\n    function &authenticateUser()\n    {\n        $aCredentials = $this->_getCredentials();\n        if (PEAR::isError($aCredentials)) {\n            OA_Auth::displayError($aCredentials);\n        }\n        return $this->checkPassword($aCredentials['username'],\n            $aCredentials['password']);\n    }\n\n        /**\n     * A to get the login credential supplied as POST parameters\n     *\n     * Additional checks are also performed and error eventually returned\n     *\n     * @param bool $performCookieCheck\n     * @return mixed Array on success, PEAR_Error otherwise\n     */\n    function _getCredentials($performCookieCheck = true)\n    {\n        if (empty($_POST['username']) || empty($_POST['password'])) {\n            return new PEAR_Error($GLOBALS['strEnterBoth']);\n        }\n\n        if ($performCookieCheck && !isset($_COOKIE['sessionID'])) {\n            return new PEAR_Error($GLOBALS['strEnableCookies']);\n        }\n\n        if ($performCookieCheck && $_COOKIE['sessionID'] != $_POST['oa_cookiecheck']) {\n            return new PEAR_Error($GLOBALS['strSessionIDNotMatch']);\n        }\n\n        return array(\n            'username' => MAX_commonGetPostValueUnslashed('username'),\n            'password' => MAX_commonGetPostValueUnslashed('password')\n        );\n    }\n\n    /**\n     * A method to check a username and password\n     *\n     * @param string $username\n     * @param string $password\n     * @return mixed A DataObjects_Users instance, or false if no matching user was found\n     */\n    function checkPassword($username, $password)\n    {\n        $doUser = OA_Dal::factoryDO('users');\n        $doUser->username = strtolower($username);\n        $doUser->password = md5($password);\n        $doUser->find();\n\n        if ($doUser->fetch()) {\n            return $doUser;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Cleans up the session and carry on any additional tasks required to logout the user\n     *\n     */\n    function logout()\n    {\n        phpAds_SessionDataDestroy();\n        $dalAgency = OA_Dal::factoryDAL('agency');\n        header (\"Location: \" . $dalAgency->getLogoutUrl(OA_Permission::getAgencyId()));\n        exit;\n    }\n\n    /**\n     * A static method to display a login screen\n     *\n     * @static\n     *\n     * @param string $sMessage\n     * @param string $sessionID\n     * @param bool $inlineLogin\n     */\n    function displayLogin($sMessage = '', $sessionID = 0, $inLineLogin = false)\n    {\n        global $strUsername, $strPassword, $strLogin, $strWelcomeTo, $strEnterUsername,\n               $strNoAdminInteface, $strForgotPassword;\n\n        $aConf = $GLOBALS['_MAX']['CONF'];\n        $aPref = $GLOBALS['_MAX']['PREF'];\n\n        @header('Cache-Control: max-age=0, no-cache, proxy-revalidate, must-revalidate');\n\n        if (!$inLineLogin) {\n            phpAds_PageHeader(phpAds_Login);\n        }\n\n        // Check environment settings\n        $oSystemMgr = new OA_Environment_Manager();\n        $aSysInfo = $oSystemMgr->checkSystem();\n\n        foreach ($aSysInfo as $env => $vals) {\n            $errDetails = '';\n            if (is_array($vals['error']) && !empty($vals['error'])) {\n                if ($env == 'PERMS') {\n                    // Just note that some file/folders are unwritable and that more information can be found in the debug.log\n                    OA_Admin_UI::queueMessage('Error: File permission errors detected.<br />These <em>may</em> impact the accurate delivery of your ads,<br />See the debug.log file for the list of unwritable files', 'global', 'error', 0);\n                } else {\n                    foreach ($vals['error'] as $key => $val) {\n                        $errDetails .= '<li>' . htmlspecialchars($key) . ' &nbsp; => &nbsp; ' . htmlspecialchars($val) . '</li>';\n                    }\n\t\t\t\t\tphpAds_Die( ' Error: ' . $err, $errDetails );\n                }\n            }\n        }\n\n        $oTpl = new OA_Admin_Template('login.html');\n\n        $appName = !empty($aConf['ui']['applicationName']) ? $aConf['ui']['applicationName'] : PRODUCT_NAME;\n\n        $oTpl->assign('uiEnabled', $aConf['ui']['enabled']);\n        $oTpl->assign('sessionID', $sessionID);\n        $oTpl->assign('appName', $appName);\n        $oTpl->assign('message', $sMessage);\n\n        $oTpl->display();\n\n        phpAds_PageFooter();\n        exit;\n    }\n\n    /**\n     * A method to perform DLL level validation\n     *\n     * @param OA_Dll_User $oUser\n     * @param OA_Dll_UserInfo $oUserInfo\n     * @return boolean\n     */\n    function dllValidation(&$oUser, &$oUserInfo)\n    {\n        if (!isset($oUserInfo->userId)) {\n            if (!$oUser->checkStructureRequiredStringField($oUserInfo, 'username', 64) ||\n                !$oUser->checkStructureRequiredStringField($oUserInfo, 'password', 32)) {\n                return false;\n            }\n        }\n\n        if (isset($oUserInfo->password)) {\n            // Save MD5 hash of the password\n            $oUserInfo->password = md5($oUserInfo->password);\n        }\n        return true;\n    }\n\n    /**\n     * A method to set the required template variables, if any\n     *\n     * @param OA_Admin_Template $oTpl\n     */\n    function setTemplateVariables(&$oTpl)\n    {\n        if (preg_match('/-user-start\\.html$/', $oTpl->templateName)) {\n            $oTpl->assign('fields', array(\n               array(\n                   'fields'    => array(\n                       array(\n                           'name'      => 'login',\n                           'label'     => $GLOBALS['strUsernameToLink'],\n                           'value'     => '',\n                           'id'        => 'user-key'\n                       ),\n                   )\n               ),\n            ));\n        }\n    }\n\n    /**\n     * Build user details array fields required by user access (edit) pages\n     *\n     * @param array $userData  Array containing users data (see users table)\n     * @return array  Array formatted for use in template object as in user access pages\n     */\n    function getUserDetailsFields($userData)\n    {\n        $userExists = !empty($userData['user_id']);\n        $userDetailsFields = array();\n        $aLanguages = RV_Admin_Languages::getAvailableLanguages();\n\n        $userDetailsFields[] = array(\n                'name'      => 'login',\n                'label'     => $GLOBALS['strUsername'],\n                'value'     => $userData['username'],\n                'freezed'   => !empty($userData['user_id'])\n            );\n        $userDetailsFields[] = array(\n                'name'      => 'passwd',\n                'label'     => $GLOBALS['strPassword'],\n                'type'      => 'password',\n                'value'     => '',\n                'hidden'   => !empty($userData['user_id'])\n            );\n        $userDetailsFields[] = array(\n                'name'      => 'passwd2',\n                'label'     => $GLOBALS['strPasswordRepeat'],\n                'type'      => 'password',\n                'value'     => '',\n                'hidden'   => !empty($userData['user_id'])\n            );\n        $userDetailsFields[] = array(\n                'name'      => 'contact_name',\n                'label'     => $GLOBALS['strContactName'],\n                'value'     => $userData['contact_name'],\n                'freezed'   => $userExists\n            );\n        $userDetailsFields[] = array(\n                'name'      => 'email_address',\n                'label'     => $GLOBALS['strEMail'],\n                'value'     => $userData['email_address'],\n                'freezed'   => $userExists\n            );\n        $userDetailsFields[] = array(\n                'type'      => 'select',\n                'name'      => 'language',\n                'label'     => $GLOBALS['strLanguage'],\n                'options'   => $aLanguages,\n                'value'     => (!empty($userData['language'])) ? $userData['language'] : $GLOBALS['_MAX']['PREF']['language'],\n                'disabled'   => $userExists\n            );\n\n        return $userDetailsFields;\n    }\n\n    function getMatchingUserId($email, $login)\n    {\n        $doUsers = OA_Dal::factoryDO('users');\n        return $doUsers->getUserIdByProperty('username', $login);\n    }\n\n    /**\n     * Validates user's email address\n     *\n     * @param string $email\n     * @return array  Array containing error strings or empty\n     *                array if no validation errors were found\n     */\n    function validateUsersEmail($email)\n    {\n        if (!$this->isValidEmail($email)) {\n            $this->addValidationError($GLOBALS['strInvalidEmail']);\n        }\n    }\n\n    /**\n     * Returns true if email address is valid else false\n     *\n     * @param string $email\n     * @return boolean\n     */\n    function isValidEmail($email)\n    {\n        $rule = new HTML_QuickForm_Rule_Email;\n        return $rule->validate($email);\n    }\n\n    function saveUser($userid, $login, $password, $contactName,\n        $emailAddress, $language, $accountId)\n    {\n        $doUsers = OA_Dal::factoryDO('users');\n        $doUsers->loadByProperty('user_id', $userid);\n\n        return $this->saveUserDo($doUsers, $login, $password, $contactName,\n        $emailAddress, $language, $accountId);\n    }\n\n    /**\n     * Method used in user access pages. Either creates new user if\n     * necessary or update existing one.\n     *\n     * @param DB_DataObject_Users $doUsers  Users dataobject with any preset variables\n     * @param string $login  User name\n     * @param string $password  Password\n     * @param string $contactName  Contact name\n     * @param string $emailAddress  Email address\n     * @param integer $accountId  a\n     * @return integer  User ID or false on error\n     */\n    function saveUserDo(&$doUsers, $login, $password, $contactName,\n        $emailAddress, $language, $accountId)\n    {\n        $doUsers->contact_name = $contactName;\n        $doUsers->email_address = $emailAddress;\n        $doUsers->language = $language;\n        if ($doUsers->user_id) {\n            $doUsers->update();\n            return $doUsers->user_id;\n        } else {\n            $doUsers->default_account_id = $accountId;\n            $doUsers->username = $login;\n            $doUsers->password = md5($password);\n            return $doUsers->insert();\n        }\n    }\n\n    /**\n     * Returns array of errors which happened during sigup\n     *\n     * @return array\n     */\n    function getSignupErrors()\n    {\n        return $this->aSignupErrors;\n    }\n\n    /**\n     * Adds an error message to signup errors array\n     *\n     * @param string $errorMessage\n     */\n    function addSignupError($error)\n    {\n        if (PEAR::isError($error)) {\n            $errorMessage = $error->getMessage();\n        } else {\n            $errorMessage = $error;\n        }\n        if (!in_array($errorMessage, $this->aSignupErrors)) {\n            $this->aSignupErrors[] = $errorMessage;\n        }\n    }\n\n    /**\n     * Returns array of errors which happened during sigup\n     *\n     * @return array\n     */\n    function getValidationErrors()\n    {\n        return $this->aValidationErrors;\n    }\n\n    /**\n     * Adds an error message to validation errors array\n     *\n     * @param string $aValidationErrors\n     */\n    function addValidationError($error)\n    {\n        $this->aValidationErrors[] = $error;\n    }\n\n    /**\n     * A method to change a user password\n     *\n     * @param DataObjects_Users $doUsers\n     * @param string $newPassword\n     * @param string $oldPassword\n     * @return mixed True on success, PEAR_Error otherwise\n     */\n    function changePassword(&$doUsers, $newPassword, $oldPassword)\n    {\n        $doUsers->password = md5($newPassword);\n        return true;\n    }\n\n    /**\n     * A method to set a new user password\n     *\n     * @param string $userId\n     * @param string $newPassword\n     * @return mixed True on success, PEAR_Error otherwise\n     */\n    function setNewPassword($userId, $newPassword)\n    {\n        $doUsers = OA_Dal::staticGetDO('users', $userId);\n        if (!$doUsers) {\n            return false;\n        }\n        $doUsers->password = md5($newPassword);\n        return $doUsers->update();\n    }\n\n    /**\n     * A method to change a user email\n     *\n     * @param DataObjects_Users $doUsers\n     * @param string $emailAddress\n     * @param string $password\n     * @return bool\n     */\n    function changeEmail(&$doUsers, $emailAddress, $password)\n    {\n        $doUsers->email_address = $emailAddress;\n        $doUsers->email_updated = $doUsers->formatDate(new Date());\n        return true;\n    }\n\n    /**\n     * Delete unverified accounts. Used by cas\n     *\n     * @param OA_Maintenance $oMaintenance\n     * @return boolean\n     */\n    function deleteUnverifiedUsers(&$oMaintenance)\n    {\n        return true;\n    }\n\n    // These were pulled straight from the internal class...\n        /**\n     * Validates user login - required for linking new users\n     *\n     * @param string $login\n     */\n    function validateUsersLogin($login)\n    {\n        if (empty($login)) {\n            $this->addValidationError($GLOBALS['strInvalidUsername']);\n        } elseif (OA_Permission::userNameExists($login)) {\n            $this->addValidationError($GLOBALS['strDuplicateClientName']);\n        }\n    }\n\n    /**\n     * Validates user password - required for linking new users\n     *\n     * @param string $password\n     * @return array  Array containing error strings or empty\n     *                array if no validation errors were found\n     */\n    function validateUsersPassword($password)\n    {\n        if (!strlen($password) || strstr(\"\\\\\", $password)) {\n            $this->addValidationError($GLOBALS['strInvalidPassword']);\n        }\n    }\n\n    function validateUsersPasswords($password1, $password2)\n    {\n        if ($password1 != $password2) {\n            $this->addValidationError($GLOBALS['strNotSamePasswords']);\n        }\n    }\n\n    /**\n     * Validates user data - required for linking new users\n     *\n     * @param string $login\n     * @param string $password\n     * @return array  Array containing error strings or empty\n     *                array if no validation errors were found\n     */\n    function validateUsersData($data)\n    {\n        if (empty($data['userid'])) {\n            $this->validateUsersLogin($data['login']);\n            $this->validateUsersPasswords($data['passwd'], $data['passwd2']);\n            $this->validateUsersPassword($data['passwd']);\n        }\n        $this->validateUsersEmail($data['email_address']);\n\n        if (!phpAds_SessionValidateToken($data['token'])) {\n            $this->addValidationError('Invalid request token');\n        }\n\n        return $this->getValidationErrors();\n    }\n}\n\n?>"], "fixing_code": ["<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\nrequire_once MAX_PATH . '/lib/OA/Dal.php';\nrequire_once MAX_PATH . '/lib/OA/Permission.php';\nrequire_once MAX_PATH . '/lib/OA/Permission/User.php';\nrequire_once MAX_PATH . '/lib/OA/Admin/Template.php';\nrequire_once LIB_PATH . '/Extension/authentication/authentication.php';\n\n/**\n * A class to deal with user authentication\n *\n */\nclass OA_Auth\n{\n    /**\n     * Returns authentication plugin\n     *\n     * @static\n     * @param string $authType\n     * @return Plugins_Authentication\n     */\n    static function staticGetAuthPlugin()\n    {\n        static $authPlugin;\n        static $authPluginType;\n\n        if (!isset($authPlugin) || $authPluginType != $authType) {\n            $aConf = $GLOBALS['_MAX']['CONF'];\n            if (!empty($aConf['authentication']['type'])) {\n                $authType = $aConf['authentication']['type'];\n                $authPlugin = OX_Component::factoryByComponentIdentifier($authType);\n            }\n            if (!$authPlugin) {\n                // Fall back to internal\n                $authType = 'none';\n                $authPlugin = new Plugins_Authentication();\n            }\n            if (!$authPlugin) {\n                OA::debug('Error while including authentication plugin and unable to fallback', PEAR_LOG_ERR);\n            }\n            $authPluginType = $authType;\n        }\n        return $authPlugin;\n    }\n\n    /**\n     * Logs in an user\n     *\n     * @static\n     *\n     * @param callback $redirectCallback\n     * @return mixed Array on success\n     */\n    function login($redirectCallback = null)\n    {\n        $aConf = $GLOBALS['_MAX']['CONF'];\n\n        if (!is_callable($redirectCallback)) {\n            // Set the default callback\n            $redirectCallback = array('OA_Auth', 'checkRedirect');\n        }\n\n        if (call_user_func($redirectCallback)) {\n            header('location: http://'.$aConf['webpath']['admin']);\n            exit();\n        }\n\n        if (defined('OA_SKIP_LOGIN')) {\n            return OA_Auth::getFakeSessionData();\n        }\n\n        if (OA_Auth::suppliedCredentials()) {\n            $doUser = OA_Auth::authenticateUser();\n\n            if (!$doUser) {\n                OA_Auth::restart($GLOBALS['strUsernameOrPasswordWrong']);\n            }\n\n            return OA_Auth::getSessionData($doUser);\n        }\n\n        OA_Auth::restart();\n    }\n\n    /**\n     * A method to logout and redirect to the correct URL\n     *\n     * @static\n     *\n     * @todo Fix when preferences are ready and logout url is stored into the\n     * preferences table\n     */\n    function logout()\n    {\n        $authPlugin = OA_Auth::staticGetAuthPlugin();\n        $authPlugin->logout();\n    }\n\n    /**\n     * A method to check if the login credential were supplied as POST parameters\n     *\n     * @static\n     *\n     * @return bool\n     */\n    function suppliedCredentials()\n    {\n        $authPlugin = OA_Auth::staticGetAuthPlugin();\n        return $authPlugin->suppliedCredentials();\n    }\n\n    /**\n     * A method to authenticate user\n     *\n     * @static\n     *\n     * @return bool\n     */\n    function authenticateUser()\n    {\n        $authPlugin = OA_Auth::staticGetAuthPlugin();\n        $doUsers = $authPlugin->authenticateUser();\n        if ($doUsers) {\n            // never upgrade the username\n            $tmpUserName = $doUsers->username;\n            unset($doUsers->username);\n            $doUsers->logDateLastLogIn();\n            $doUsers->username = $tmpUserName;\n        }\n        return $doUsers;\n    }\n\n    /**\n     * A method to test if the user is logged in\n     *\n     * @return boolean\n     */\n    function isLoggedIn()\n    {\n        return is_a(OA_Permission::getCurrentUser(), 'OA_Permission_User');\n    }\n\n    /**\n     * A static method to return the data to be stored in the session variable\n     *\n     * @static\n     *\n     * @param DataObjects_Users $doUser\n     * @param bool $skipDatabaseAccess True if the OA_Permission_User constructor should\n     *                                 avoid performing some checks accessing the database\n     * @return array\n     */\n    function getSessionData($doUser, $skipDatabaseAccess = false)\n    {\n        return array(\n            'user' => new OA_Permission_User($doUser, $skipDatabaseAccess)\n        );\n    }\n\n    /**\n     * A static method to return fake data to be stored in the session variable\n     *\n     * @static\n     *\n     * @return array\n     */\n    function getFakeSessionData()\n    {\n        return array(\n            'user' => false\n        );\n    }\n\n    /**\n     * A static method to restart with a login screen, eventually displaying a custom message\n     *\n     * @static\n     *\n     * @param string $sMessage Optional message\n     */\n    function restart($sMessage = '')\n    {\n        $_COOKIE['sessionID'] = phpAds_SessionStart();\n        OA_Auth::displayLogin($sMessage, $_COOKIE['sessionID']);\n    }\n\n    /**\n     * A static method to restart with a login screen, displaying an error message\n     *\n     * @static\n     *\n     * @param PEAR_Error $oError\n     */\n    function displayError($oError)\n    {\n        OA_Auth::restart($oError->getMessage());\n    }\n\n    /**\n     * A static method to display a login screen\n     *\n     * @static\n     *\n     * @param string $sMessage\n     * @param string $sessionID\n     * @param bool $inlineLogin\n     */\n    function displayLogin($sMessage = '', $sessionID = 0, $inLineLogin = false)\n    {\n        $authLogin = OA_Auth::staticGetAuthPlugin();\n        $authLogin->displayLogin($sMessage, $sessionID, $inLineLogin);\n    }\n\n    /**\n     * Check if application is running from appropriate dir\n     *\n     * @static\n     *\n     * @param string $location\n     * @return boolean True if a redirect is needed\n     */\n    function checkRedirect($location = 'admin')\n    {\n        $aConf = $GLOBALS['_MAX']['CONF'];\n\n        $redirect = false;\n        // Is it possible to detect that we are NOT in the admin directory\n        // via the URL the user is accessing OpenXwith?\n        if (!preg_match('#/'. $location .'/?$#', $_SERVER['REQUEST_URI'])) {\n            $dirName = dirname($_SERVER['REQUEST_URI']);\n            // This check now allows for files in plugin folders\n            $pluginDirName = basename($aConf['pluginPaths'][$location]);\n            if (!preg_match(\"#/{$location}(/{$pluginDirName}/.*?)?/?$#\", $dirName)) {\n                // The user is not in the \"admin\" folder directly. Are they\n                // in the admin folder as a result of a \"full\" virtual host\n                // configuration?\n                if ($aConf['webpath']['admin'] != OX_getHostName()) {\n                    // Not a \"full\" virtual host setup, so re-direct\n                    $redirect = true;\n                }\n            }\n        }\n\n        return $redirect;\n    }\n\n}\n\n?>\n", "<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\nrequire_once MAX_PATH . '/lib/max/Plugin/Translation.php';\nrequire_once LIB_PATH . '/Plugin/Component.php';\nrequire_once 'Date.php';\nrequire_once MAX_PATH . '/lib/max/language/Loader.php';\nrequire_once MAX_PATH . '/lib/pear/HTML/QuickForm/Rule/Email.php';\nrequire_once MAX_PATH . '/lib/OA/DB/AdvisoryLock.php';\n\nLanguage_Loader::load('settings');\n\n/**\n * Plugins_Authentication is an parent class for Authentication plugins\n *\n * @package    OpenXPlugin\n * @subpackage Authentication\n */\nclass Plugins_Authentication extends OX_Component\n{\n    /**\n     * Array to keep a reference to signup errors (if any)\n     *\n     * @var array\n     */\n    var $aSignupErrors = array();\n\n    var $aValidationErrors = array();\n\n    /**\n     * Checks if credentials are passed and whether the plugin should carry on the authentication\n     *\n     * @return boolean  True if credentials were passed, else false\n     */\n    function suppliedCredentials()\n    {\n        return isset($_POST['username']) || isset($_POST['password']);\n    }\n\n    /**\n     * Authenticate user\n     *\n     * @return DataObjects_Users  returns users dataobject on success authentication\n     *                            or null if user wasn't succesfully authenticated\n     */\n    function &authenticateUser()\n    {\n        $aCredentials = $this->_getCredentials();\n        if (PEAR::isError($aCredentials)) {\n            OA_Auth::displayError($aCredentials);\n        }\n        return $this->checkPassword($aCredentials['username'],\n            $aCredentials['password']);\n    }\n\n        /**\n     * A to get the login credential supplied as POST parameters\n     *\n     * Additional checks are also performed and error eventually returned\n     *\n     * @param bool $performCookieCheck\n     * @return mixed Array on success, PEAR_Error otherwise\n     */\n    function _getCredentials($performCookieCheck = true)\n    {\n        if (empty($_POST['username']) || empty($_POST['password'])) {\n            return new PEAR_Error($GLOBALS['strEnterBoth']);\n        }\n\n        if ($performCookieCheck && !isset($_COOKIE['sessionID'])) {\n            return new PEAR_Error($GLOBALS['strEnableCookies']);\n        }\n\n        if ($performCookieCheck && $_COOKIE['sessionID'] != $_POST['oa_cookiecheck']) {\n            return new PEAR_Error($GLOBALS['strSessionIDNotMatch']);\n        }\n\n        return array(\n            'username' => MAX_commonGetPostValueUnslashed('username'),\n            'password' => MAX_commonGetPostValueUnslashed('password')\n        );\n    }\n\n    /**\n     * A method to check a username and password\n     *\n     * @param string $username\n     * @param string $password\n     * @return mixed A DataObjects_Users instance, or false if no matching user was found\n     */\n    function checkPassword($username, $password)\n    {\n        // Introduce a random delay in case of failures, as recommended by:\n        // https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks\n        //\n        // The base delay is 1-5 seconds.\n        $waitMs = mt_rand(1000, 5000);\n\n        $oLock = OA_DB_AdvisoryLock::factory();\n\n        // Username check is case insensitive\n        $username = strtolower($username);\n\n        // Try to acquire an excusive advisory lock for the username\n        $lock = $oLock->get('auth.'.md5($username));\n\n        if (!$lock) {\n            // We couldn't acquire the lock immediately, which means that\n            // another authentication process for the same username is underway.\n            //\n            // This might mean that the account is being targeted by a\n            // multi-threaded brute force attack, so we try to discourage such\n            // behaviour by increasing the delay time by 4x.\n            //\n            // However, if the actual user tries to log in while their account\n            // is being attacked, we will allow them in, they'd just have to\n            // be patient (max 20 seconds).\n            usleep($waitMs * 4000);\n        }\n\n        $doUser = OA_Dal::factoryDO('users');\n        $doUser->username = $username;\n        $doUser->password = md5($password);\n\n        $doUser->find();\n\n        if ($doUser->fetch()) {\n            $oLock->release();\n\n            return $doUser;\n        }\n\n        if ($lock) {\n            // The password was wrong, but no other login attempt was in place\n            // so we apply just the base delay time.\n            usleep($waitMs * 1000);\n        }\n\n        $oLock->release();\n\n        return false;\n    }\n\n    /**\n     * Cleans up the session and carry on any additional tasks required to logout the user\n     *\n     */\n    function logout()\n    {\n        phpAds_SessionDataDestroy();\n        $dalAgency = OA_Dal::factoryDAL('agency');\n        header (\"Location: \" . $dalAgency->getLogoutUrl(OA_Permission::getAgencyId()));\n        exit;\n    }\n\n    /**\n     * A static method to display a login screen\n     *\n     * @static\n     *\n     * @param string $sMessage\n     * @param string $sessionID\n     * @param bool $inlineLogin\n     */\n    function displayLogin($sMessage = '', $sessionID = 0, $inLineLogin = false)\n    {\n        global $strUsername, $strPassword, $strLogin, $strWelcomeTo, $strEnterUsername,\n               $strNoAdminInteface, $strForgotPassword;\n\n        $aConf = $GLOBALS['_MAX']['CONF'];\n        $aPref = $GLOBALS['_MAX']['PREF'];\n\n        @header('Cache-Control: max-age=0, no-cache, proxy-revalidate, must-revalidate');\n\n        if (!$inLineLogin) {\n            phpAds_PageHeader(phpAds_Login);\n        }\n\n        // Check environment settings\n        $oSystemMgr = new OA_Environment_Manager();\n        $aSysInfo = $oSystemMgr->checkSystem();\n\n        foreach ($aSysInfo as $env => $vals) {\n            $errDetails = '';\n            if (is_array($vals['error']) && !empty($vals['error'])) {\n                if ($env == 'PERMS') {\n                    // Just note that some file/folders are unwritable and that more information can be found in the debug.log\n                    OA_Admin_UI::queueMessage('Error: File permission errors detected.<br />These <em>may</em> impact the accurate delivery of your ads,<br />See the debug.log file for the list of unwritable files', 'global', 'error', 0);\n                } else {\n                    foreach ($vals['error'] as $key => $val) {\n                        $errDetails .= '<li>' . htmlspecialchars($key) . ' &nbsp; => &nbsp; ' . htmlspecialchars($val) . '</li>';\n                    }\n\t\t\t\t\tphpAds_Die( ' Error: ' . $err, $errDetails );\n                }\n            }\n        }\n\n        $oTpl = new OA_Admin_Template('login.html');\n\n        $appName = !empty($aConf['ui']['applicationName']) ? $aConf['ui']['applicationName'] : PRODUCT_NAME;\n\n        $oTpl->assign('uiEnabled', $aConf['ui']['enabled']);\n        $oTpl->assign('sessionID', $sessionID);\n        $oTpl->assign('appName', $appName);\n        $oTpl->assign('message', $sMessage);\n\n        $oTpl->display();\n\n        phpAds_PageFooter();\n        exit;\n    }\n\n    /**\n     * A method to perform DLL level validation\n     *\n     * @param OA_Dll_User $oUser\n     * @param OA_Dll_UserInfo $oUserInfo\n     * @return boolean\n     */\n    function dllValidation(&$oUser, &$oUserInfo)\n    {\n        if (!isset($oUserInfo->userId)) {\n            if (!$oUser->checkStructureRequiredStringField($oUserInfo, 'username', 64) ||\n                !$oUser->checkStructureRequiredStringField($oUserInfo, 'password', 32)) {\n                return false;\n            }\n        }\n\n        if (isset($oUserInfo->password)) {\n            // Save MD5 hash of the password\n            $oUserInfo->password = md5($oUserInfo->password);\n        }\n        return true;\n    }\n\n    /**\n     * A method to set the required template variables, if any\n     *\n     * @param OA_Admin_Template $oTpl\n     */\n    function setTemplateVariables(&$oTpl)\n    {\n        if (preg_match('/-user-start\\.html$/', $oTpl->templateName)) {\n            $oTpl->assign('fields', array(\n               array(\n                   'fields'    => array(\n                       array(\n                           'name'      => 'login',\n                           'label'     => $GLOBALS['strUsernameToLink'],\n                           'value'     => '',\n                           'id'        => 'user-key'\n                       ),\n                   )\n               ),\n            ));\n        }\n    }\n\n    /**\n     * Build user details array fields required by user access (edit) pages\n     *\n     * @param array $userData  Array containing users data (see users table)\n     * @return array  Array formatted for use in template object as in user access pages\n     */\n    function getUserDetailsFields($userData)\n    {\n        $userExists = !empty($userData['user_id']);\n        $userDetailsFields = array();\n        $aLanguages = RV_Admin_Languages::getAvailableLanguages();\n\n        $userDetailsFields[] = array(\n                'name'      => 'login',\n                'label'     => $GLOBALS['strUsername'],\n                'value'     => $userData['username'],\n                'freezed'   => !empty($userData['user_id'])\n            );\n        $userDetailsFields[] = array(\n                'name'      => 'passwd',\n                'label'     => $GLOBALS['strPassword'],\n                'type'      => 'password',\n                'value'     => '',\n                'hidden'   => !empty($userData['user_id'])\n            );\n        $userDetailsFields[] = array(\n                'name'      => 'passwd2',\n                'label'     => $GLOBALS['strPasswordRepeat'],\n                'type'      => 'password',\n                'value'     => '',\n                'hidden'   => !empty($userData['user_id'])\n            );\n        $userDetailsFields[] = array(\n                'name'      => 'contact_name',\n                'label'     => $GLOBALS['strContactName'],\n                'value'     => $userData['contact_name'],\n                'freezed'   => $userExists\n            );\n        $userDetailsFields[] = array(\n                'name'      => 'email_address',\n                'label'     => $GLOBALS['strEMail'],\n                'value'     => $userData['email_address'],\n                'freezed'   => $userExists\n            );\n        $userDetailsFields[] = array(\n                'type'      => 'select',\n                'name'      => 'language',\n                'label'     => $GLOBALS['strLanguage'],\n                'options'   => $aLanguages,\n                'value'     => (!empty($userData['language'])) ? $userData['language'] : $GLOBALS['_MAX']['PREF']['language'],\n                'disabled'   => $userExists\n            );\n\n        return $userDetailsFields;\n    }\n\n    function getMatchingUserId($email, $login)\n    {\n        $doUsers = OA_Dal::factoryDO('users');\n        return $doUsers->getUserIdByProperty('username', $login);\n    }\n\n    /**\n     * Validates user's email address\n     *\n     * @param string $email\n     * @return array  Array containing error strings or empty\n     *                array if no validation errors were found\n     */\n    function validateUsersEmail($email)\n    {\n        if (!$this->isValidEmail($email)) {\n            $this->addValidationError($GLOBALS['strInvalidEmail']);\n        }\n    }\n\n    /**\n     * Returns true if email address is valid else false\n     *\n     * @param string $email\n     * @return boolean\n     */\n    function isValidEmail($email)\n    {\n        $rule = new HTML_QuickForm_Rule_Email;\n        return $rule->validate($email);\n    }\n\n    function saveUser($userid, $login, $password, $contactName,\n        $emailAddress, $language, $accountId)\n    {\n        $doUsers = OA_Dal::factoryDO('users');\n        $doUsers->loadByProperty('user_id', $userid);\n\n        return $this->saveUserDo($doUsers, $login, $password, $contactName,\n        $emailAddress, $language, $accountId);\n    }\n\n    /**\n     * Method used in user access pages. Either creates new user if\n     * necessary or update existing one.\n     *\n     * @param DB_DataObject_Users $doUsers  Users dataobject with any preset variables\n     * @param string $login  User name\n     * @param string $password  Password\n     * @param string $contactName  Contact name\n     * @param string $emailAddress  Email address\n     * @param integer $accountId  a\n     * @return integer  User ID or false on error\n     */\n    function saveUserDo(&$doUsers, $login, $password, $contactName,\n        $emailAddress, $language, $accountId)\n    {\n        $doUsers->contact_name = $contactName;\n        $doUsers->email_address = $emailAddress;\n        $doUsers->language = $language;\n        if ($doUsers->user_id) {\n            $doUsers->update();\n            return $doUsers->user_id;\n        } else {\n            $doUsers->default_account_id = $accountId;\n            $doUsers->username = $login;\n            $doUsers->password = md5($password);\n            return $doUsers->insert();\n        }\n    }\n\n    /**\n     * Returns array of errors which happened during sigup\n     *\n     * @return array\n     */\n    function getSignupErrors()\n    {\n        return $this->aSignupErrors;\n    }\n\n    /**\n     * Adds an error message to signup errors array\n     *\n     * @param string $errorMessage\n     */\n    function addSignupError($error)\n    {\n        if (PEAR::isError($error)) {\n            $errorMessage = $error->getMessage();\n        } else {\n            $errorMessage = $error;\n        }\n        if (!in_array($errorMessage, $this->aSignupErrors)) {\n            $this->aSignupErrors[] = $errorMessage;\n        }\n    }\n\n    /**\n     * Returns array of errors which happened during sigup\n     *\n     * @return array\n     */\n    function getValidationErrors()\n    {\n        return $this->aValidationErrors;\n    }\n\n    /**\n     * Adds an error message to validation errors array\n     *\n     * @param string $aValidationErrors\n     */\n    function addValidationError($error)\n    {\n        $this->aValidationErrors[] = $error;\n    }\n\n    /**\n     * A method to change a user password\n     *\n     * @param DataObjects_Users $doUsers\n     * @param string $newPassword\n     * @param string $oldPassword\n     * @return mixed True on success, PEAR_Error otherwise\n     */\n    function changePassword(&$doUsers, $newPassword, $oldPassword)\n    {\n        $doUsers->password = md5($newPassword);\n        return true;\n    }\n\n    /**\n     * A method to set a new user password\n     *\n     * @param string $userId\n     * @param string $newPassword\n     * @return mixed True on success, PEAR_Error otherwise\n     */\n    function setNewPassword($userId, $newPassword)\n    {\n        $doUsers = OA_Dal::staticGetDO('users', $userId);\n        if (!$doUsers) {\n            return false;\n        }\n        $doUsers->password = md5($newPassword);\n        return $doUsers->update();\n    }\n\n    /**\n     * A method to change a user email\n     *\n     * @param DataObjects_Users $doUsers\n     * @param string $emailAddress\n     * @param string $password\n     * @return bool\n     */\n    function changeEmail(&$doUsers, $emailAddress, $password)\n    {\n        $doUsers->email_address = $emailAddress;\n        $doUsers->email_updated = $doUsers->formatDate(new Date());\n        return true;\n    }\n\n    /**\n     * Delete unverified accounts. Used by cas\n     *\n     * @param OA_Maintenance $oMaintenance\n     * @return boolean\n     */\n    function deleteUnverifiedUsers(&$oMaintenance)\n    {\n        return true;\n    }\n\n    // These were pulled straight from the internal class...\n        /**\n     * Validates user login - required for linking new users\n     *\n     * @param string $login\n     */\n    function validateUsersLogin($login)\n    {\n        if (empty($login)) {\n            $this->addValidationError($GLOBALS['strInvalidUsername']);\n        } elseif (OA_Permission::userNameExists($login)) {\n            $this->addValidationError($GLOBALS['strDuplicateClientName']);\n        }\n    }\n\n    /**\n     * Validates user password - required for linking new users\n     *\n     * @param string $password\n     * @return array  Array containing error strings or empty\n     *                array if no validation errors were found\n     */\n    function validateUsersPassword($password)\n    {\n        if (!strlen($password) || strstr(\"\\\\\", $password)) {\n            $this->addValidationError($GLOBALS['strInvalidPassword']);\n        }\n    }\n\n    function validateUsersPasswords($password1, $password2)\n    {\n        if ($password1 != $password2) {\n            $this->addValidationError($GLOBALS['strNotSamePasswords']);\n        }\n    }\n\n    /**\n     * Validates user data - required for linking new users\n     *\n     * @param string $login\n     * @param string $password\n     * @return array  Array containing error strings or empty\n     *                array if no validation errors were found\n     */\n    function validateUsersData($data)\n    {\n        if (empty($data['userid'])) {\n            $this->validateUsersLogin($data['login']);\n            $this->validateUsersPasswords($data['passwd'], $data['passwd2']);\n            $this->validateUsersPassword($data['passwd']);\n        }\n        $this->validateUsersEmail($data['email_address']);\n\n        if (!phpAds_SessionValidateToken($data['token'])) {\n            $this->addValidationError('Invalid request token');\n        }\n\n        return $this->getValidationErrors();\n    }\n}\n\n\nclass Plugins_Authentication_Exception extends Exception\n{\n}\n"], "filenames": ["lib/OA/Auth.php", "lib/OX/Extension/authentication/authentication.php"], "buggy_code_start_loc": [86, 17], "buggy_code_end_loc": [87, 521], "fixing_code_start_loc": [85, 18], "fixing_code_end_loc": [85, 564], "type": "CWE-287", "message": "Revive Adserver before 3.2.3 suffers from Improper Restriction of Excessive Authentication Attempts. The login page of Revive Adserver is vulnerable to password-guessing attacks. An account lockdown feature was considered, but rejected to avoid introducing service disruptions to regular users during such attacks. A random delay has instead been introduced as a countermeasure in case of password failures, along with a system to discourage parallel brute forcing. These systems will effectively allow the valid users to log in to the adserver, even while an attack is in progress.", "other": {"cve": {"id": "CVE-2016-9124", "sourceIdentifier": "support@hackerone.com", "published": "2017-03-28T02:59:00.323", "lastModified": "2019-10-09T23:20:18.693", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Revive Adserver before 3.2.3 suffers from Improper Restriction of Excessive Authentication Attempts. The login page of Revive Adserver is vulnerable to password-guessing attacks. An account lockdown feature was considered, but rejected to avoid introducing service disruptions to regular users during such attacks. A random delay has instead been introduced as a countermeasure in case of password failures, along with a system to discourage parallel brute forcing. These systems will effectively allow the valid users to log in to the adserver, even while an attack is in progress."}, {"lang": "es", "value": "Revive Adserver en versiones anteriores a 3.2.3. sufre de restricci\u00f3n incorrecta de intentos de autenticaci\u00f3n excesiva. La p\u00e1gina de inicio de sesi\u00f3n de Revive Adserver es vulnerable a los ataques de detecci\u00f3n de contrase\u00f1a. Una caracter\u00edstica de bloqueo de cuenta ha sido considerada, pero se rechaz\u00f3 para evitar la introducci\u00f3n de interrupciones del servicio a usuarios regulares durante dichos ataques. Un retraso aleatorio se ha introducido como una contramedida en caso de fallos de contrase\u00f1a, junto con un sistema para desalentar el forzamiento bruto paralelo. Estos sistemas permitir\u00e1n efectivamente que los usuarios v\u00e1lidos inicien sesi\u00f3n en el adserver, incluso mientras un ataque est\u00e1 en progreso."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-307"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:revive-adserver:revive_adserver:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.2.2", "matchCriteriaId": "94F64F5A-ACD3-4AED-82BE-832D7B4801DA"}]}]}], "references": [{"url": "https://github.com/revive-adserver/revive-adserver/commit/847941390f5b3310d51b07c92ec91cc1f4cc82c9", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://hackerone.com/reports/96115", "source": "support@hackerone.com", "tags": ["Permissions Required"]}, {"url": "https://www.revive-adserver.com/security/revive-sa-2016-001/", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/revive-adserver/revive-adserver/commit/847941390f5b3310d51b07c92ec91cc1f4cc82c9"}}