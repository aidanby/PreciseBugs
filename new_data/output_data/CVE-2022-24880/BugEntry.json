{"buggy_code": ["import unittest\nfrom flask_session_captcha import FlaskSessionCaptcha\nfrom flask import Flask, request\nfrom flask_sessionstore import Session\n\n\nclass FlaskSessionCaptchaTestCase(unittest.TestCase):\n    def setUp(self):\n        self.app = Flask(__name__)\n        self.app.config['SECRET_KEY'] = 'aba'\n        self.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite://'\n        self.app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n        self.app.config['SESSION_TYPE'] = 'sqlalchemy'\n        self.app.config['CAPTCHA_ENABLE'] = True\n        self.app.config['CAPTCHA_LENGTH'] = 5\n        self.app.testing = True\n        Session(self.app)\n\n        self.client = self.app.test_client()\n\n    def test_captcha_wrong(self):\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        # try some wrong values\n        r = self.client.post(\"/\", data={\"s\": \"something\"})\n        assert r.data == b\"nope\"\n        r = self.client.post(\"/\", data={\"s\": \"something\", \"captcha\": \"\"})\n        assert r.data == b\"nope\"\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": \"also wrong\"})\n        assert r.data == b\"nope\"\n\n    def test_captcha_without_cookie(self):\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        # without right cookie\n        r = self.client.get(\"/\")\n        self.client.set_cookie(\"localhost\", \"session\", \"wrong\")\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": r.data.decode('utf-8')})\n        assert r.data == b\"nope\"  # no session\n\n    def test_captcha_ok(self):\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n        # everything ok\n        r = self.client.get(\"/\")\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": r.data.decode('utf-8')})\n        assert r.data == b\"ok\"\n\n    def test_captcha_replay(self):\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        r = self.client.get(\"/\")\n        captcha_value = r.data.decode('utf-8')\n\n        cookies = self.client.cookie_jar._cookies['localhost.local']['/']['session']\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": captcha_value})\n        assert r.data == b\"ok\"\n        self.client.set_cookie(\"localhost\", \"session\", cookies.value)\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": captcha_value})\n        assert r.data == b\"nope\"\n\n    def test_captcha_passthrough_when_disabled(self):\n        self.app.config[\"CAPTCHA_ENABLE\"] = False\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        r = self.client.post(\"/\", data={\"s\": \"something\"})\n        assert r.data == b\"ok\"\n        r = self.client.get(\"/\")\n        captcha_value = r.data.decode('utf-8')\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": captcha_value})\n        assert r.data == b\"ok\"\n        r = self.client.post(\"/\", data={\"s\": \"something\", \"captcha\": \"false\"})\n        assert r.data == b\"ok\"\n\n    def test_captcha_least_digits(self):\n        self.app.config[\"CAPTCHA_LENGTH\"] = 8\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        r = self.client.get(\"http://localhost:5000/\")\n        captcha_value = r.data.decode('utf-8')\n        assert len(captcha_value) == 8\n\n    def test_captcha_validate_value(self):\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        with self.app.test_request_context('/'):\n            captcha.generate()\n            answer = captcha.get_answer()\n            assert not captcha.validate(value=\"wrong\")\n            captcha.generate()\n            answer = captcha.get_answer()\n            assert captcha.validate(value=answer)\n\n    def test_captcha_jinja_global(self):\n        captcha = FlaskSessionCaptcha(self.app)\n        with self.app.test_request_context('/'):\n            function = self.app.jinja_env.globals['captcha']\n            assert not captcha.get_answer()\n            img = function()\n            assert \"<img\" in img\n            assert captcha.get_answer()\n\n    def test_captcha_jinja_global_empty_while_disabled(self):\n        self.app.config[\"CAPTCHA_ENABLE\"] = False\n        captcha = FlaskSessionCaptcha(self.app)\n        with self.app.test_request_context('/'):\n            function = self.app.jinja_env.globals['captcha']\n            try:\n                captcha.get_answer()\n                assert False\n            except:\n                pass\n            img = function()\n            assert img == \"\"\n\n    def test_captcha_warning_on_non_server_storage(self):\n        self.app.config['SESSION_TYPE'] = 'null'\n        Session(self.app)\n        with self.assertRaises(RuntimeWarning):\n            FlaskSessionCaptcha(self.app)\n        self.app.config['SESSION_TYPE'] = None\n        Session(self.app)\n        with self.assertRaises(RuntimeWarning):\n            FlaskSessionCaptcha(self.app)\n\n    def test_captcha_session_file_storage(self):\n        self.app.config['SESSION_TYPE'] = 'filesystem'\n        Session(self.app)\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        r = self.client.get(\"/\")\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": r.data.decode('utf-8')})\n        assert r.data == b\"ok\"\n\n    def test_captcha_with_init_app_ok(self):\n        captcha = FlaskSessionCaptcha()\n        _default_routes(captcha, self.app)\n        captcha.init_app(self.app)\n        # everything ok\n        r = self.client.get(\"/\")\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": r.data.decode('utf-8')})\n        assert r.data == b\"ok\"\n\n    def test_captcha_with_undefined_width_and_height(self):\n        self.app.config['CAPTCHA_WIDTH'] = None\n        self.app.config['CAPTCHA_HEIGHT'] = None\n        captcha = FlaskSessionCaptcha()\n        _default_routes(captcha, self.app)\n        captcha.init_app(self.app)\n        r = self.client.get(\"/\")\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": r.data.decode('utf-8')})\n        assert r.data == b\"ok\"\n\n    def test_captcha_with_defined_width_and_height(self):\n        self.app.config['CAPTCHA_WIDTH'] = 400\n        self.app.config['CAPTCHA_HEIGHT'] = 150\n        captcha = FlaskSessionCaptcha()\n        _default_routes(captcha, self.app)\n        captcha.init_app(self.app)\n        r = self.client.get(\"/\")\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": r.data.decode('utf-8')})\n        assert r.data == b\"ok\"\n\n    def tearDown(self):\n        pass\n\n\ndef _default_routes(captcha, app):\n    @app.route(\"/\", methods=[\"POST\", \"GET\"])\n    def hello():\n        if request.method == \"POST\":\n            if captcha.validate():\n                return \"ok\"\n            return \"nope\"\n        captcha.generate()\n        return str(captcha.get_answer())\n"], "fixing_code": ["import unittest\nfrom flask_session_captcha import FlaskSessionCaptcha\nfrom flask import Flask, request\nfrom flask_sessionstore import Session\n\n\nclass FlaskSessionCaptchaTestCase(unittest.TestCase):\n    def setUp(self):\n        self.app = Flask(__name__)\n        self.app.config['SECRET_KEY'] = 'aba'\n        self.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite://'\n        self.app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n        self.app.config['SESSION_TYPE'] = 'sqlalchemy'\n        self.app.config['CAPTCHA_ENABLE'] = True\n        self.app.config['CAPTCHA_LENGTH'] = 5\n        self.app.testing = True\n        Session(self.app)\n\n        self.client = self.app.test_client()\n\n    def test_captcha_wrong(self):\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        # try some wrong values\n        r = self.client.post(\"/\", data={\"s\": \"something\"})\n        assert r.data == b\"nope\"\n        r = self.client.post(\"/\", data={\"s\": \"something\", \"captcha\": \"\"})\n        assert r.data == b\"nope\"\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": \"also wrong\"})\n        assert r.data == b\"nope\"\n\n    def test_captcha_without_cookie(self):\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        # without right cookie\n        r = self.client.get(\"/\")\n        self.client.set_cookie(\"localhost\", \"session\", \"wrong\")\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": r.data.decode('utf-8')})\n        assert r.data == b\"nope\"  # no session\n\n    def test_captcha_ok(self):\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n        # everything ok\n        r = self.client.get(\"/\")\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": r.data.decode('utf-8')})\n        assert r.data == b\"ok\"\n\n    def test_captcha_replay(self):\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        r = self.client.get(\"/\")\n        captcha_value = r.data.decode('utf-8')\n\n        cookies = self.client.cookie_jar._cookies['localhost.local']['/']['session']\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": captcha_value})\n        assert r.data == b\"ok\"\n        self.client.set_cookie(\"localhost\", \"session\", cookies.value)\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": captcha_value})\n        assert r.data == b\"nope\"\n\n    def test_captcha_passthrough_when_disabled(self):\n        self.app.config[\"CAPTCHA_ENABLE\"] = False\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        r = self.client.post(\"/\", data={\"s\": \"something\"})\n        assert r.data == b\"ok\"\n        r = self.client.get(\"/\")\n        captcha_value = r.data.decode('utf-8')\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": captcha_value})\n        assert r.data == b\"ok\"\n        r = self.client.post(\"/\", data={\"s\": \"something\", \"captcha\": \"false\"})\n        assert r.data == b\"ok\"\n\n    def test_captcha_least_digits(self):\n        self.app.config[\"CAPTCHA_LENGTH\"] = 8\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        r = self.client.get(\"http://localhost:5000/\")\n        captcha_value = r.data.decode('utf-8')\n        assert len(captcha_value) == 8\n\n    def test_captcha_validate_value(self):\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        with self.app.test_request_context('/'):\n            captcha.generate()\n            answer = captcha.get_answer()\n            assert captcha.validate(value=None) == False\n            captcha.generate()\n            answer = captcha.get_answer()\n            assert captcha.validate(value=\"\") == False\n            captcha.generate()\n            answer = captcha.get_answer()\n            assert captcha.validate(value=\"wrong\") == False\n            captcha.generate()\n            answer = captcha.get_answer()\n            assert captcha.validate(value=answer)\n\n    def test_captcha_jinja_global(self):\n        captcha = FlaskSessionCaptcha(self.app)\n        with self.app.test_request_context('/'):\n            function = self.app.jinja_env.globals['captcha']\n            assert not captcha.get_answer()\n            img = function()\n            assert \"<img\" in img\n            assert captcha.get_answer()\n\n    def test_captcha_jinja_global_empty_while_disabled(self):\n        self.app.config[\"CAPTCHA_ENABLE\"] = False\n        captcha = FlaskSessionCaptcha(self.app)\n        with self.app.test_request_context('/'):\n            function = self.app.jinja_env.globals['captcha']\n            try:\n                captcha.get_answer()\n                assert False\n            except:\n                pass\n            img = function()\n            assert img == \"\"\n\n    def test_captcha_warning_on_non_server_storage(self):\n        self.app.config['SESSION_TYPE'] = 'null'\n        Session(self.app)\n        with self.assertRaises(RuntimeWarning):\n            FlaskSessionCaptcha(self.app)\n        self.app.config['SESSION_TYPE'] = None\n        Session(self.app)\n        with self.assertRaises(RuntimeWarning):\n            FlaskSessionCaptcha(self.app)\n\n    def test_captcha_session_file_storage(self):\n        self.app.config['SESSION_TYPE'] = 'filesystem'\n        Session(self.app)\n        captcha = FlaskSessionCaptcha(self.app)\n        _default_routes(captcha, self.app)\n\n        r = self.client.get(\"/\")\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": r.data.decode('utf-8')})\n        assert r.data == b\"ok\"\n\n    def test_captcha_with_init_app_ok(self):\n        captcha = FlaskSessionCaptcha()\n        _default_routes(captcha, self.app)\n        captcha.init_app(self.app)\n        # everything ok\n        r = self.client.get(\"/\")\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": r.data.decode('utf-8')})\n        assert r.data == b\"ok\"\n\n    def test_captcha_with_undefined_width_and_height(self):\n        self.app.config['CAPTCHA_WIDTH'] = None\n        self.app.config['CAPTCHA_HEIGHT'] = None\n        captcha = FlaskSessionCaptcha()\n        _default_routes(captcha, self.app)\n        captcha.init_app(self.app)\n        r = self.client.get(\"/\")\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": r.data.decode('utf-8')})\n        assert r.data == b\"ok\"\n\n    def test_captcha_with_defined_width_and_height(self):\n        self.app.config['CAPTCHA_WIDTH'] = 400\n        self.app.config['CAPTCHA_HEIGHT'] = 150\n        captcha = FlaskSessionCaptcha()\n        _default_routes(captcha, self.app)\n        captcha.init_app(self.app)\n        r = self.client.get(\"/\")\n        r = self.client.post(\n            \"/\", data={\"s\": \"something\", \"captcha\": r.data.decode('utf-8')})\n        assert r.data == b\"ok\"\n\n    def tearDown(self):\n        pass\n\n\ndef _default_routes(captcha, app):\n    @app.route(\"/\", methods=[\"POST\", \"GET\"])\n    def hello():\n        if request.method == \"POST\":\n            if captcha.validate():\n                return \"ok\"\n            return \"nope\"\n        captcha.generate()\n        return str(captcha.get_answer())\n"], "filenames": ["test_flask_session_captcha.py"], "buggy_code_start_loc": [101], "buggy_code_end_loc": [102], "fixing_code_start_loc": [101], "fixing_code_end_loc": [108], "type": "CWE-754", "message": "flask-session-captcha is a package which allows users to extend Flask by adding an image based captcha stored in a server side session. In versions prior to 1.2.1, he `captcha.validate()` function would return `None` if passed no value (e.g. by submitting an having an empty form). If implementing users were checking the return value to be **False**, the captcha verification check could be bypassed. Version 1.2.1 fixes the issue. Users can workaround the issue by not explicitly checking that the value is False. Checking the return value less explicitly should still work.", "other": {"cve": {"id": "CVE-2022-24880", "sourceIdentifier": "security-advisories@github.com", "published": "2022-04-25T22:15:43.883", "lastModified": "2022-05-05T18:20:02.583", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "flask-session-captcha is a package which allows users to extend Flask by adding an image based captcha stored in a server side session. In versions prior to 1.2.1, he `captcha.validate()` function would return `None` if passed no value (e.g. by submitting an having an empty form). If implementing users were checking the return value to be **False**, the captcha verification check could be bypassed. Version 1.2.1 fixes the issue. Users can workaround the issue by not explicitly checking that the value is False. Checking the return value less explicitly should still work."}, {"lang": "es", "value": "flask-session-captcha es un paquete que permite a usuarios ampliar Flask al a\u00f1adir un captcha basado en una imagen almacenada en una sesi\u00f3n del lado del servidor. En versiones anteriores a 1.2.1, la funci\u00f3n \"captcha.validate()\" devolv\u00eda \"None\" si no le es pasado ning\u00fan valor (por ejemplo, al enviar un formulario vac\u00edo). Si usuarios implementadores comprobaban que el valor de retorno era **False**, la comprobaci\u00f3n del captcha pod\u00eda omitirse. La versi\u00f3n 1.2.1 corrige el problema. Los usuarios pueden mitigar el problema al no comprobar expl\u00edcitamente que el valor es False. Comprobar el valor de retorno de forma menos expl\u00edcita deber\u00eda seguir funcionando"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-754"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-253"}, {"lang": "en", "value": "CWE-394"}, {"lang": "en", "value": "CWE-754"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:flask-session-captcha_project:flask-session-captcha:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.1", "matchCriteriaId": "6FD99903-1464-46F1-8437-BDE027792C34"}]}]}], "references": [{"url": "https://github.com/Tethik/flask-session-captcha/commit/2811ae23a38d33b620fb7a07de8837c6d65c13e4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Tethik/flask-session-captcha/pull/27", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Tethik/flask-session-captcha/releases/tag/v1.2.1", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/Tethik/flask-session-captcha/security/advisories/GHSA-7r87-cj48-wj45", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Tethik/flask-session-captcha/commit/2811ae23a38d33b620fb7a07de8837c6d65c13e4"}}