{"buggy_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse PrestaShop\\PrestaShop\\Adapter\\LegacyLogger;\nuse PrestaShop\\PrestaShop\\Adapter\\Module\\ModuleDataProvider;\nuse PrestaShop\\PrestaShop\\Adapter\\ServiceLocator;\nuse PrestaShop\\PrestaShop\\Adapter\\SymfonyContainer;\nuse PrestaShop\\PrestaShop\\Core\\Foundation\\Filesystem\\FileSystem;\nuse PrestaShop\\PrestaShop\\Core\\Module\\ModuleInterface;\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\nuse PrestaShop\\TranslationToolsBundle\\Translation\\Helper\\DomainHelper;\n\nabstract class ModuleCore implements ModuleInterface\n{\n    /** @var int Module ID */\n    public $id = null;\n\n    /** @var float Version */\n    public $version;\n    public $database_version;\n\n    /**\n     * @since 1.5.0.1\n     *\n     * @var string Registered Version in database\n     */\n    public $registered_version;\n\n    /** @var array filled with known compliant PS versions */\n    public $ps_versions_compliancy = array();\n\n    /** @var array filled with modules needed for install */\n    public $dependencies = array();\n\n    /** @var string Unique name */\n    public $name;\n\n    /** @var string Human name */\n    public $displayName;\n\n    /** @var string A little description of the module */\n    public $description;\n\n    /** @var string author of the module */\n    public $author;\n\n    /** @var string URI author of the module */\n    public $author_uri = '';\n\n    /** @var string Module key provided by addons.prestashop.com */\n    public $module_key = '';\n\n    public $description_full;\n\n    public $additional_description;\n\n    public $compatibility;\n\n    public $nb_rates;\n\n    public $avg_rate;\n\n    public $badges;\n\n    /** @var int need_instance */\n    public $need_instance = 1;\n\n    /** @var string Admin tab corresponding to the module */\n    public $tab = null;\n\n    /** @var bool Status */\n    public $active = false;\n\n    /** @var bool Is the module certified by addons.prestashop.com */\n    public $trusted = false;\n\n    /** @var string Fill it if the module is installed but not yet set up */\n    public $warning;\n\n    public $enable_device = 7;\n\n    /** @var array to store the limited country */\n    public $limited_countries = array();\n\n    /** @var array names of the controllers */\n    public $controllers = array();\n\n    /** @var array used by AdminTab to determine which lang file to use (admin.php or module lang file) */\n    public static $classInModule = array();\n\n    /** @var array current language translations */\n    protected $_lang = array();\n\n    /** @var string Module web path (eg. '/shop/modules/modulename/') */\n    protected $_path = null;\n    /**\n     * @since 1.5.0.1\n     *\n     * @var string Module local path (eg. '/home/prestashop/modules/modulename/')\n     */\n    protected $local_path = null;\n\n    /** @var array Array filled with module errors */\n    protected $_errors = array();\n\n    /** @var array Array  array filled with module success */\n    protected $_confirmations = array();\n\n    /** @var string Main table used for modules installed */\n    protected $table = 'module';\n\n    /** @var string Identifier of the main table */\n    protected $identifier = 'id_module';\n\n    /** @var array Array cache filled with modules informations */\n    protected static $modules_cache;\n\n    /** @var array Array cache filled with modules instances */\n    protected static $_INSTANCE = array();\n\n    /** @var bool Config xml generation mode */\n    protected static $_generate_config_xml_mode = false;\n\n    /** @var array Array filled with cache translations */\n    protected static $l_cache = array();\n\n    /** @var array Array filled with cache permissions (modules / employee profiles) */\n    protected static $cache_permissions = array();\n\n    /** @var array Array filled with cache permissions (modules / employee profiles) */\n    protected static $cache_lgc_access = array();\n\n    /** @var Context */\n    protected $context;\n\n    /** @var Smarty_Data */\n    protected $smarty;\n\n    /** @var Smarty_Internal_Template|null */\n    protected $current_subtemplate = null;\n\n    protected static $update_translations_after_install = true;\n\n    protected static $_batch_mode = false;\n    protected static $_defered_clearCache = array();\n    protected static $_defered_func_call = array();\n\n    /**\n     * @var array array of arrays representing tabs added by this module\n     *\n     * @see PrestaShop\\PrestaShop\\Adapter\\Module\\Tab\\RegisterTabs($module)\n     */\n    protected $tabs = array();\n\n    /** @var bool If true, allow push */\n    public $allow_push;\n\n    public $push_time_limit = 180;\n\n    /** @var bool Define if we will log modules performances for this session */\n    public static $_log_modules_perfs = null;\n    /** @var bool Random session for modules perfs logs */\n    public static $_log_modules_perfs_session = null;\n\n    /** @var \\Symfony\\Component\\DependencyInjection\\ContainerInterface */\n    private $container;\n\n    /** @var array|null used to cache module ids */\n    private static $cachedModuleNames = null;\n\n    const CACHE_FILE_MODULES_LIST = '/config/xml/modules_list.xml';\n\n    const CACHE_FILE_TAB_MODULES_LIST = '/config/xml/tab_modules_list.xml';\n\n    const CACHE_FILE_ALL_COUNTRY_MODULES_LIST = '/config/xml/modules_native_addons.xml';\n    const CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST = '/config/xml/default_country_modules_list.xml';\n\n    const CACHE_FILE_CUSTOMER_MODULES_LIST = '/config/xml/customer_modules_list.xml';\n\n    const CACHE_FILE_MUST_HAVE_MODULES_LIST = '/config/xml/must_have_modules_list.xml';\n\n    const CACHE_FILE_TRUSTED_MODULES_LIST = '/config/xml/trusted_modules_list.xml';\n    const CACHE_FILE_UNTRUSTED_MODULES_LIST = '/config/xml/untrusted_modules_list.xml';\n\n    public static $hosted_modules_blacklist = array('autoupgrade');\n\n    /**\n     * Set the flag to indicate we are doing an import.\n     *\n     * @param bool $value\n     */\n    public static function setBatchMode($value)\n    {\n        self::$_batch_mode = (bool) $value;\n    }\n\n    /**\n     * @return bool\n     */\n    public static function getBatchMode()\n    {\n        return self::$_batch_mode;\n    }\n\n    public static function processDeferedFuncCall()\n    {\n        self::setBatchMode(false);\n        foreach (self::$_defered_func_call as $func_call) {\n            call_user_func_array($func_call[0], $func_call[1]);\n        }\n\n        self::$_defered_func_call = array();\n    }\n\n    /**\n     * Clear the caches stored in $_defered_clearCache.\n     */\n    public static function processDeferedClearCache()\n    {\n        self::setBatchMode(false);\n\n        foreach (self::$_defered_clearCache as $clearCache_array) {\n            self::_deferedClearCache($clearCache_array[0], $clearCache_array[1], $clearCache_array[2]);\n        }\n\n        self::$_defered_clearCache = array();\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param string $name Module unique name\n     * @param Context $context\n     */\n    public function __construct($name = null, Context $context = null)\n    {\n        if (isset($this->ps_versions_compliancy) && !isset($this->ps_versions_compliancy['min'])) {\n            $this->ps_versions_compliancy['min'] = '1.4.0.0';\n        }\n\n        if (isset($this->ps_versions_compliancy) && !isset($this->ps_versions_compliancy['max'])) {\n            $this->ps_versions_compliancy['max'] = _PS_VERSION_;\n        }\n\n        if (strlen($this->ps_versions_compliancy['min']) == 3) {\n            $this->ps_versions_compliancy['min'] .= '.0.0';\n        }\n\n        if (strlen($this->ps_versions_compliancy['min']) == 5) {\n            $this->ps_versions_compliancy['min'] .= '.0';\n        }\n\n        if (strlen($this->ps_versions_compliancy['max']) == 5) {\n            $this->ps_versions_compliancy['max'] .= '.999';\n        }\n\n        if (strlen($this->ps_versions_compliancy['max']) == 3) {\n            $this->ps_versions_compliancy['max'] .= '.999.999';\n        }\n\n        // Load context and smarty\n        $this->context = $context ? $context : Context::getContext();\n        if (is_object($this->context->smarty)) {\n            $this->smarty = $this->context->smarty->createData($this->context->smarty);\n        }\n\n        // If the module has no name we gave him its id as name\n        if ($this->name === null) {\n            $this->name = $this->id;\n        }\n\n        // If the module has the name we load the corresponding data from the cache\n        if ($this->name != null) {\n            // If cache is not generated, we generate it\n            if (self::$modules_cache == null && !is_array(self::$modules_cache)) {\n                $id_shop = (Validate::isLoadedObject($this->context->shop) ? $this->context->shop->id : Configuration::get('PS_SHOP_DEFAULT'));\n\n                self::$modules_cache = array();\n                // Join clause is done to check if the module is activated in current shop context\n                $result = Db::getInstance()->executeS('\n                SELECT m.`id_module`, m.`name`, ms.`id_module`as `mshop`\n                FROM `' . _DB_PREFIX_ . 'module` m\n                LEFT JOIN `' . _DB_PREFIX_ . 'module_shop` ms\n                ON m.`id_module` = ms.`id_module`\n                AND ms.`id_shop` = ' . (int) $id_shop);\n                foreach ($result as $row) {\n                    self::$modules_cache[$row['name']] = $row;\n                    self::$modules_cache[$row['name']]['active'] = ($row['mshop'] > 0) ? 1 : 0;\n                }\n            }\n\n            // We load configuration from the cache\n            if (isset(self::$modules_cache[$this->name])) {\n                if (isset(self::$modules_cache[$this->name]['id_module'])) {\n                    $this->id = self::$modules_cache[$this->name]['id_module'];\n                }\n                foreach (self::$modules_cache[$this->name] as $key => $value) {\n                    if (array_key_exists($key, $this)) {\n                        $this->{$key} = $value;\n                    }\n                }\n                $this->_path = __PS_BASE_URI__ . 'modules/' . $this->name . '/';\n            }\n            if (!$this->context->controller instanceof Controller) {\n                self::$modules_cache = null;\n            }\n            $this->local_path = _PS_MODULE_DIR_ . $this->name . '/';\n        }\n    }\n\n    /**\n     * Insert module into datable.\n     */\n    public function install()\n    {\n        Hook::exec('actionModuleInstallBefore', array('object' => $this));\n        // Check module name validation\n        if (!Validate::isModuleName($this->name)) {\n            $this->_errors[] = Context::getContext()->getTranslator()->trans('Unable to install the module (Module name is not valid).', array(), 'Admin.Modules.Notification');\n\n            return false;\n        }\n\n        // Check PS version compliancy\n        if (!$this->checkCompliancy()) {\n            $this->_errors[] = Context::getContext()->getTranslator()->trans('The version of your module is not compliant with your PrestaShop version.', array(), 'Admin.Modules.Notification');\n\n            return false;\n        }\n\n        // Check module dependencies\n        if (count($this->dependencies) > 0) {\n            foreach ($this->dependencies as $dependency) {\n                if (!Db::getInstance()->getRow('SELECT `id_module` FROM `' . _DB_PREFIX_ . 'module` WHERE LOWER(`name`) = \\'' . pSQL(Tools::strtolower($dependency)) . '\\'')) {\n                    $error = Context::getContext()->getTranslator()->trans('Before installing this module, you have to install this/these module(s) first:', array(), 'Admin.Modules.Notification') . '<br />';\n                    foreach ($this->dependencies as $d) {\n                        $error .= '- ' . $d . '<br />';\n                    }\n                    $this->_errors[] = $error;\n\n                    return false;\n                }\n            }\n        }\n\n        // Check if module is installed\n        $result = (new ModuleDataProvider(new LegacyLogger(), $this->getTranslator()))->isInstalled($this->name);\n        if ($result) {\n            $this->_errors[] = Context::getContext()->getTranslator()->trans('This module has already been installed.', array(), 'Admin.Modules.Notification');\n\n            return false;\n        }\n\n        if (!$this->installControllers()) {\n            $this->_errors[] = Context::getContext()->getTranslator()->trans('Could not install module controllers.', array(), 'Admin.Modules.Notification');\n            $this->uninstallOverrides();\n\n            return false;\n        }\n\n        // Install module and retrieve the installation id\n        $result = Db::getInstance()->insert($this->table, array('name' => $this->name, 'active' => 1, 'version' => $this->version));\n        if (!$result) {\n            $this->_errors[] = Context::getContext()->getTranslator()->trans('Technical error: PrestaShop could not install this module.', array(), 'Admin.Modules.Notification');\n            $this->uninstallTabs();\n            $this->uninstallOverrides();\n\n            return false;\n        }\n        $this->id = Db::getInstance()->Insert_ID();\n\n        Cache::clean('Module::isInstalled' . $this->name);\n\n        // Enable the module for current shops in context\n        $this->enable();\n\n        // Permissions management\n        foreach (array('CREATE', 'READ', 'UPDATE', 'DELETE') as $action) {\n            $slug = 'ROLE_MOD_MODULE_' . strtoupper($this->name) . '_' . $action;\n\n            Db::getInstance()->execute(\n                'INSERT INTO `' . _DB_PREFIX_ . 'authorization_role` (`slug`) VALUES (\"' . $slug . '\")'\n            );\n\n            Db::getInstance()->execute('\n                INSERT INTO `' . _DB_PREFIX_ . 'module_access` (`id_profile`, `id_authorization_role`) (\n                    SELECT id_profile, \"' . Db::getInstance()->Insert_ID() . '\"\n                    FROM ' . _DB_PREFIX_ . 'access a\n                    LEFT JOIN `' . _DB_PREFIX_ . 'authorization_role` r\n                    ON r.id_authorization_role = a.id_authorization_role\n                    WHERE r.slug = \"ROLE_MOD_TAB_ADMINMODULESSF_' . $action . '\"\n            )');\n        }\n\n        // Adding Restrictions for client groups\n        Group::addRestrictionsForModule($this->id, Shop::getShops(true, null, true));\n        Hook::exec('actionModuleInstallAfter', array('object' => $this));\n\n        if (Module::$update_translations_after_install) {\n            $this->updateModuleTranslations();\n        }\n\n        return true;\n    }\n\n    public function checkCompliancy()\n    {\n        if (version_compare(_PS_VERSION_, $this->ps_versions_compliancy['min'], '<') || version_compare(_PS_VERSION_, $this->ps_versions_compliancy['max'], '>')) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public static function updateTranslationsAfterInstall($update = true)\n    {\n        Module::$update_translations_after_install = (bool) $update;\n    }\n\n    public function updateModuleTranslations()\n    {\n        return Language::updateModulesTranslations(array($this->name));\n    }\n\n    /**\n     * Set errors, warning or success message of a module upgrade.\n     *\n     * @param $upgrade_detail\n     */\n    protected function setUpgradeMessage($upgrade_detail)\n    {\n        // Store information if a module has been upgraded (memory optimization)\n        if ($upgrade_detail['available_upgrade']) {\n            if ($upgrade_detail['success']) {\n                $this->_confirmations[] = Context::getContext()->getTranslator()->trans('Current version: %s', array($this->version), 'Admin.Modules.Notification');\n                $this->_confirmations[] = Context::getContext()->getTranslator()->trans('%d file upgrade applied', array($upgrade_detail['number_upgraded']), 'Admin.Modules.Notification');\n            } else {\n                if (!$upgrade_detail['number_upgraded']) {\n                    $this->_errors[] = Context::getContext()->getTranslator()->trans('No upgrade has been applied', array(), 'Admin.Modules.Notification');\n                } else {\n                    $this->_errors[] = Context::getContext()->getTranslator()->trans('Upgraded from: %s to %s', array($upgrade_detail['upgraded_from'], $upgrade_detail['upgraded_to']), 'Admin.Modules.Notification');\n                    $this->_errors[] = Context::getContext()->getTranslator()->trans('%d upgrade left', array($upgrade_detail['number_upgrade_left']), 'Admin.Modules.Notification');\n                }\n\n                if (isset($upgrade_detail['duplicate']) && $upgrade_detail['duplicate']) {\n                    $this->_errors[] = Context::getContext()->getTranslator()->trans('Module %s cannot be upgraded this time: please refresh this page to update it.', array($this->name), 'Admin.Modules.Notification');\n                } else {\n                    $this->_errors[] = Context::getContext()->getTranslator()->trans('To prevent any problem, this module has been turned off', array(), 'Admin.Modules.Notification');\n                }\n            }\n        }\n    }\n\n    /**\n     * Init the upgrade module.\n     *\n     * @param $module\n     *\n     * @return bool\n     */\n    public static function initUpgradeModule($module)\n    {\n        if (((int) $module->installed == 1) & (empty($module->database_version) === true)) {\n            Module::upgradeModuleVersion($module->name, $module->version);\n            $module->database_version = $module->version;\n        }\n\n        // Init cache upgrade details\n        self::$modules_cache[$module->name]['upgrade'] = array(\n            'success' => false, // bool to know if upgrade succeed or not\n            'available_upgrade' => 0, // Number of available module before any upgrade\n            'number_upgraded' => 0, // Number of upgrade done\n            'number_upgrade_left' => 0,\n            'upgrade_file_left' => array(), // List of the upgrade file left\n            'version_fail' => 0, // Version of the upgrade failure\n            'upgraded_from' => 0, // Version number before upgrading anything\n            'upgraded_to' => 0, // Last upgrade applied\n        );\n\n        // Need Upgrade will check and load upgrade file to the moduleCache upgrade case detail\n        $ret = $module->installed && Module::needUpgrade($module);\n\n        return $ret;\n    }\n\n    /**\n     * Run the upgrade for a given module name and version.\n     *\n     * @return array\n     */\n    public function runUpgradeModule()\n    {\n        $upgrade = &self::$modules_cache[$this->name]['upgrade'];\n        foreach ($upgrade['upgrade_file_left'] as $num => $file_detail) {\n            foreach ($file_detail['upgrade_function'] as $item) {\n                if (function_exists($item)) {\n                    $upgrade['success'] = false;\n                    $upgrade['duplicate'] = true;\n\n                    break 2;\n                }\n            }\n\n            include $file_detail['file'];\n\n            // Call the upgrade function if defined\n            $upgrade['success'] = false;\n            foreach ($file_detail['upgrade_function'] as $item) {\n                if (function_exists($item)) {\n                    $upgrade['success'] = $item($this);\n                }\n            }\n\n            // Set detail when an upgrade succeed or failed\n            if ($upgrade['success']) {\n                ++$upgrade['number_upgraded'];\n                $upgrade['upgraded_to'] = $file_detail['version'];\n\n                unset($upgrade['upgrade_file_left'][$num]);\n            } else {\n                $upgrade['version_fail'] = $file_detail['version'];\n\n                // If any errors, the module is disabled\n                $this->disable();\n\n                break;\n            }\n        }\n\n        $upgrade['number_upgrade_left'] = count($upgrade['upgrade_file_left']);\n\n        // Update module version in DB with the last succeed upgrade\n        if ($upgrade['upgraded_to']) {\n            Module::upgradeModuleVersion($this->name, $upgrade['upgraded_to']);\n        }\n        $this->setUpgradeMessage($upgrade);\n\n        return $upgrade;\n    }\n\n    /**\n     * Upgrade the registered version to a new one.\n     *\n     * @param $name\n     * @param $version\n     *\n     * @return bool\n     */\n    public static function upgradeModuleVersion($name, $version)\n    {\n        return Db::getInstance()->execute('\n            UPDATE `' . _DB_PREFIX_ . 'module` m\n            SET m.version = \\'' . pSQL($version) . '\\'\n            WHERE m.name = \\'' . pSQL($name) . '\\'');\n    }\n\n    /**\n     * Check if a module need to be upgraded.\n     * This method modify the module_cache adding an upgrade list file.\n     *\n     * @param $module\n     *\n     * @return bool\n     */\n    public static function needUpgrade($module)\n    {\n        self::$modules_cache[$module->name]['upgrade']['upgraded_from'] = $module->database_version;\n        // Check the version of the module with the registered one and look if any upgrade file exist\n        if (Tools::version_compare($module->version, $module->database_version, '>')) {\n            $old_version = $module->database_version;\n            $module = Module::getInstanceByName($module->name);\n            if ($module instanceof Module) {\n                return $module->loadUpgradeVersionList($module->name, $module->version, $old_version);\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Load the available list of upgrade of a specified module\n     * with an associated version.\n     *\n     * @param $module_name\n     * @param $module_version\n     * @param $registered_version\n     *\n     * @return bool to know directly if any files have been found\n     */\n    protected static function loadUpgradeVersionList($module_name, $module_version, $registered_version)\n    {\n        $list = array();\n\n        $upgrade_path = _PS_MODULE_DIR_ . $module_name . '/upgrade/';\n\n        // Check if folder exist and it could be read\n        if (file_exists($upgrade_path) && ($files = scandir($upgrade_path, SCANDIR_SORT_NONE))) {\n            // Read each file name\n            foreach ($files as $file) {\n                if (!in_array($file, array('.', '..', '.svn', 'index.php')) && preg_match('/\\.php$/', $file)) {\n                    $tab = explode('-', $file);\n\n                    if (!isset($tab[1])) {\n                        continue;\n                    }\n\n                    $file_version = basename($tab[1], '.php');\n                    // Compare version, if minor than actual, we need to upgrade the module\n                    if (count($tab) == 2 &&\n                         (Tools::version_compare($file_version, $module_version, '<=') &&\n                            Tools::version_compare($file_version, $registered_version, '>'))) {\n                        $list[] = array(\n                            'file' => $upgrade_path . $file,\n                            'version' => $file_version,\n                            'upgrade_function' => array(\n                                'upgrade_module_' . str_replace('.', '_', $file_version),\n                                'upgradeModule' . str_replace('.', '', $file_version), ),\n                        );\n                    }\n                }\n            }\n        }\n\n        // No files upgrade, then upgrade succeed\n        if (count($list) == 0) {\n            self::$modules_cache[$module_name]['upgrade']['success'] = true;\n            Module::upgradeModuleVersion($module_name, $module_version);\n        }\n\n        usort($list, 'ps_module_version_sort');\n\n        // Set the list to module cache\n        self::$modules_cache[$module_name]['upgrade']['upgrade_file_left'] = $list;\n        self::$modules_cache[$module_name]['upgrade']['available_upgrade'] = count($list);\n\n        return (bool) count($list);\n    }\n\n    /**\n     * Return the status of the upgraded module.\n     *\n     * @param $module_name\n     *\n     * @return bool\n     */\n    public static function getUpgradeStatus($module_name)\n    {\n        return isset(self::$modules_cache[$module_name]) &&\n            self::$modules_cache[$module_name]['upgrade']['success'];\n    }\n\n    /**\n     * Delete module from datable.\n     *\n     * @return bool result\n     */\n    public function uninstall()\n    {\n        // Check module installation id validation\n        if (!Validate::isUnsignedId($this->id)) {\n            $this->_errors[] = Context::getContext()->getTranslator()->trans('The module is not installed.', array(), 'Admin.Modules.Notification');\n\n            return false;\n        }\n\n        // Uninstall overrides\n        if (!$this->uninstallOverrides()) {\n            return false;\n        }\n\n        // Retrieve hooks used by the module\n        $sql = 'SELECT DISTINCT(`id_hook`) FROM `' . _DB_PREFIX_ . 'hook_module` WHERE `id_module` = ' . (int) $this->id;\n        $result = Db::getInstance()->executeS($sql);\n        foreach ($result as $row) {\n            $this->unregisterHook((int) $row['id_hook']);\n            $this->unregisterExceptions((int) $row['id_hook']);\n        }\n\n        foreach ($this->controllers as $controller) {\n            $page_name = 'module-' . $this->name . '-' . $controller;\n            $meta = Db::getInstance()->getValue('SELECT id_meta FROM `' . _DB_PREFIX_ . 'meta` WHERE page=\"' . pSQL($page_name) . '\"');\n            if ((int) $meta > 0) {\n                Db::getInstance()->execute('DELETE FROM `' . _DB_PREFIX_ . 'meta_lang` WHERE id_meta=' . (int) $meta);\n                Db::getInstance()->execute('DELETE FROM `' . _DB_PREFIX_ . 'meta` WHERE id_meta=' . (int) $meta);\n            }\n        }\n\n        // Disable the module for all shops\n        $this->disable(true);\n\n        // Delete permissions module access\n        $roles = Db::getInstance()->executeS('SELECT `id_authorization_role` FROM `' . _DB_PREFIX_ . 'authorization_role` WHERE `slug` LIKE \"ROLE_MOD_MODULE_' . strtoupper($this->name) . '_%\"');\n\n        if (!empty($roles)) {\n            foreach ($roles as $role) {\n                Db::getInstance()->execute(\n                    'DELETE FROM `' . _DB_PREFIX_ . 'module_access` WHERE `id_authorization_role` = ' . $role['id_authorization_role']\n                );\n                Db::getInstance()->execute(\n                    'DELETE FROM `' . _DB_PREFIX_ . 'authorization_role` WHERE `id_authorization_role` = ' . $role['id_authorization_role']\n                );\n            }\n        }\n\n        // Remove restrictions for client groups\n        Group::truncateRestrictionsByModule($this->id);\n\n        // Uninstall the module\n        if (Db::getInstance()->execute('DELETE FROM `' . _DB_PREFIX_ . 'module` WHERE `id_module` = ' . (int) $this->id)) {\n            Cache::clean('Module::isInstalled' . $this->name);\n            Cache::clean('Module::getModuleIdByName_' . pSQL($this->name));\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * This function enable module $name. If an $name is an array,\n     * this will enable all of them.\n     *\n     * @param array|string $name\n     *\n     * @return true if succeed\n     *\n     * @since 1.4.1\n     * @deprecated since 1.7\n     * @see  PrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleManager->enable($name)\n     */\n    public static function enableByName($name)\n    {\n        // If $name is not an array, we set it as an array\n        if (!is_array($name)) {\n            $name = array($name);\n        }\n        $res = true;\n        // Enable each module\n        foreach ($name as $n) {\n            if (Validate::isModuleName($n)) {\n                $res &= Module::getInstanceByName($n)->enable();\n            }\n        }\n\n        return $res;\n    }\n\n    /**\n     * Activate current module.\n     *\n     * @param bool $force_all If true, enable module for all shop\n     */\n    public function enable($force_all = false)\n    {\n        // Retrieve all shops where the module is enabled\n        $list = Shop::getContextListShopID();\n        if (!$this->id || !is_array($list)) {\n            return false;\n        }\n        $sql = 'SELECT `id_shop` FROM `' . _DB_PREFIX_ . 'module_shop`\n                WHERE `id_module` = ' . (int) $this->id .\n                ((!$force_all) ? ' AND `id_shop` IN(' . implode(', ', $list) . ')' : '');\n\n        // Store the results in an array\n        $items = array();\n        if ($results = Db::getInstance($sql)->executeS($sql)) {\n            foreach ($results as $row) {\n                $items[] = $row['id_shop'];\n            }\n        }\n\n        if ($this->getOverrides() != null) {\n            // Install overrides\n            try {\n                $this->installOverrides();\n            } catch (Exception $e) {\n                $this->_errors[] = Context::getContext()->getTranslator()->trans('Unable to install override: %s', array($e->getMessage()), 'Admin.Modules.Notification');\n                $this->uninstallOverrides();\n\n                return false;\n            }\n        }\n\n        // Enable module in the shop where it is not enabled yet\n        foreach ($list as $id) {\n            if (!in_array($id, $items)) {\n                Db::getInstance()->insert('module_shop', array(\n                    'id_module' => $this->id,\n                    'id_shop' => $id,\n                ));\n            }\n        }\n\n        return true;\n    }\n\n    public function enableDevice($device)\n    {\n        Db::getInstance()->execute(\n            '\n            UPDATE ' . _DB_PREFIX_ . 'module_shop\n            SET enable_device = enable_device + ' . (int) $device . '\n            WHERE (enable_device &~ ' . (int) $device . ' OR enable_device = 0) AND id_module=' . (int) $this->id .\n            Shop::addSqlRestriction()\n        );\n\n        return true;\n    }\n\n    public function disableDevice($device)\n    {\n        Db::getInstance()->execute(\n            'UPDATE ' . _DB_PREFIX_ . 'module_shop\n            SET enable_device = enable_device - ' . (int) $device . '\n            WHERE enable_device & ' . (int) $device . ' AND id_module=' . (int) $this->id .\n            Shop::addSqlRestriction()\n        );\n\n        return true;\n    }\n\n    /**\n     * This function disable all module $name. If an $name is an array,\n     * this will disable all of them.\n     *\n     * @param array|string $name\n     *\n     * @return true if succeed\n     *\n     * @since 1.7\n     */\n    public static function disableAllByName($name)\n    {\n        // If $name is not an array, we set it as an array\n        if (!is_array($name)) {\n            $name = array($name);\n        }\n        $res = true;\n        // Disable each module\n        foreach ($name as $n) {\n            $sql = 'DELETE `' . _DB_PREFIX_ . 'module_shop` FROM `' . _DB_PREFIX_ . 'module_shop` JOIN `' . _DB_PREFIX_ . 'module` USING (id_module) WHERE `name` = \"' . pSQL($n) . '\"';\n            $res &= Db::getInstance()->execute($sql);\n        }\n\n        return $res;\n    }\n\n    /**\n     * This function disable module $name. If an $name is an array,\n     * this will disable all of them.\n     *\n     * @param array|string $name\n     *\n     * @return true if succeed\n     *\n     * @since 1.4.1\n     * @deprecated since 1.7\n     * @see  PrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleManager->disable($name)\n     */\n    public static function disableByName($name)\n    {\n        // If $name is not an array, we set it as an array\n        if (!is_array($name)) {\n            $name = array($name);\n        }\n        $res = true;\n        // Disable each module\n        foreach ($name as $n) {\n            if (Validate::isModuleName($n)) {\n                $res &= Module::getInstanceByName($n)->disable();\n            }\n        }\n\n        return $res;\n    }\n\n    /**\n     * Desactivate current module.\n     *\n     * @param bool $force_all If true, disable module for all shop\n     */\n    public function disable($force_all = false)\n    {\n        $result = true;\n        if ($this->getOverrides() != null) {\n            $result &= $this->uninstallOverrides();\n        }\n\n        // Disable module for all shops\n        $sql = 'DELETE FROM `' . _DB_PREFIX_ . 'module_shop` WHERE `id_module` = ' . (int) $this->id . ' ' . ((!$force_all) ? ' AND `id_shop` IN(' . implode(', ', Shop::getContextListShopID()) . ')' : '');\n\n        return $result && Db::getInstance()->execute($sql);\n    }\n\n    /**\n     * Display flags in forms for translations.\n     *\n     * @deprecated since 1.6.0.10\n     *\n     * @param array $languages All languages available\n     * @param int $default_language Default language id\n     * @param string $ids Multilingual div ids in form\n     * @param string $id Current div id]\n     * @param bool $return define the return way : false for a display, true for a return\n     * @param bool $use_vars_instead_of_ids use an js vars instead of ids seperate by \"\u00a4\"\n     */\n    public function displayFlags($languages, $default_language, $ids, $id, $return = false, $use_vars_instead_of_ids = false)\n    {\n        if (count($languages) == 1) {\n            return false;\n        }\n\n        $output = '\n        <div class=\"displayed_flag\">\n            <img src=\"../img/l/' . $default_language . '.jpg\" class=\"pointer\" id=\"language_current_' . $id . '\" onclick=\"toggleLanguageFlags(this);\" alt=\"\" />\n        </div>\n        <div id=\"languages_' . $id . '\" class=\"language_flags\">\n            ' . $this->getTranslator()->trans('Choose language:', array(), 'Admin.Actions') . '<br /><br />';\n        foreach ($languages as $language) {\n            if ($use_vars_instead_of_ids) {\n                $output .= '<img src=\"../img/l/' . (int) $language['id_lang'] . '.jpg\" class=\"pointer\" alt=\"' . $language['name'] . '\" title=\"' . $language['name'] . '\" onclick=\"changeLanguage(\\'' . $id . '\\', ' . $ids . ', ' . $language['id_lang'] . ', \\'' . $language['iso_code'] . '\\');\" /> ';\n            } else {\n                $output .= '<img src=\"../img/l/' . (int) $language['id_lang'] . '.jpg\" class=\"pointer\" alt=\"' . $language['name'] . '\" title=\"' . $language['name'] . '\" onclick=\"changeLanguage(\\'' . $id . '\\', \\'' . $ids . '\\', ' . $language['id_lang'] . ', \\'' . $language['iso_code'] . '\\');\" /> ';\n            }\n        }\n        $output .= '</div>';\n\n        if ($return) {\n            return $output;\n        }\n        echo $output;\n    }\n\n    /**\n     * Connect module to a hook.\n     *\n     * @param string $hook_name Hook name\n     * @param array $shop_list List of shop linked to the hook (if null, link hook to all shops)\n     *\n     * @return bool result\n     */\n    public function registerHook($hook_name, $shop_list = null)\n    {\n        return Hook::registerHook($this, $hook_name, $shop_list);\n    }\n\n    /**\n     * Unregister module from hook.\n     *\n     * @param mixed $id_hook Hook id (can be a hook name since 1.5.0)\n     * @param array $shop_list List of shop\n     *\n     * @return bool result\n     */\n    public function unregisterHook($hook_id, $shop_list = null)\n    {\n        return Hook::unregisterHook($this, $hook_id, $shop_list);\n    }\n\n    /**\n     * Unregister exceptions linked to module.\n     *\n     * @param int $id_hook Hook id\n     * @param array $shop_list List of shop\n     *\n     * @return bool result\n     */\n    public function unregisterExceptions($hook_id, $shop_list = null)\n    {\n        $sql = 'DELETE FROM `' . _DB_PREFIX_ . 'hook_module_exceptions`\n            WHERE `id_module` = ' . (int) $this->id . ' AND `id_hook` = ' . (int) $hook_id\n            . (($shop_list) ? ' AND `id_shop` IN(' . implode(', ', array_map('intval', $shop_list)) . ')' : '');\n\n        return Db::getInstance()->execute($sql);\n    }\n\n    /**\n     * Add exceptions for module->Hook.\n     *\n     * @param int $id_hook Hook id\n     * @param array $excepts List of file name\n     * @param array $shop_list List of shop\n     *\n     * @return bool result\n     */\n    public function registerExceptions($id_hook, $excepts, $shop_list = null)\n    {\n        // If shop lists is null, we fill it with all shops\n        if (null === $shop_list) {\n            $shop_list = Shop::getContextListShopID();\n        }\n\n        // Save modules exception for each shop\n        foreach ($shop_list as $shop_id) {\n            foreach ($excepts as $except) {\n                if (!$except) {\n                    continue;\n                }\n                $insert_exception = array(\n                    'id_module' => (int) $this->id,\n                    'id_hook' => (int) $id_hook,\n                    'id_shop' => (int) $shop_id,\n                    'file_name' => pSQL($except),\n                );\n                $result = Db::getInstance()->insert('hook_module_exceptions', $insert_exception);\n                if (!$result) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Edit exceptions for module->Hook.\n     *\n     * @param int $hookID Hook id\n     * @param array $excepts List of shopID and file name\n     *\n     * @return bool result\n     */\n    public function editExceptions($id_hook, $excepts)\n    {\n        $result = true;\n        foreach ($excepts as $shop_id => $except) {\n            $shop_list = ($shop_id == 0) ? Shop::getContextListShopID() : array($shop_id);\n            $this->unregisterExceptions($id_hook, $shop_list);\n            $result &= $this->registerExceptions($id_hook, $except, $shop_list);\n        }\n\n        return $result;\n    }\n\n    /**\n     * This function is used to determine the module name\n     * of an AdminTab which belongs to a module, in order to keep translation\n     * related to a module in its directory (instead of $_LANGADM).\n     *\n     * @param mixed $current_class the\n     *\n     * @return bool|string if the class belongs to a module, will return the module name. Otherwise, return false.\n     */\n    public static function getModuleNameFromClass($current_class)\n    {\n        // Module can now define AdminTab keeping the module translations method,\n        // i.e. in modules/[module name]/[iso_code].php\n        if (!isset(self::$classInModule[$current_class]) && class_exists($current_class)) {\n            global $_MODULES;\n            $_MODULE = array();\n            $reflection_class = new ReflectionClass($current_class);\n            $file_path = realpath($reflection_class->getFileName());\n            $realpath_module_dir = realpath(_PS_MODULE_DIR_);\n            if (substr(realpath($file_path), 0, strlen($realpath_module_dir)) == $realpath_module_dir) {\n                // For controllers in module/controllers path\n                if (basename(dirname(dirname($file_path))) == 'controllers') {\n                    self::$classInModule[$current_class] = basename(dirname(dirname(dirname($file_path))));\n                } else {\n                    // For old AdminTab controllers\n                    self::$classInModule[$current_class] = substr(dirname($file_path), strlen($realpath_module_dir) + 1);\n                }\n\n                $file = _PS_MODULE_DIR_ . self::$classInModule[$current_class] . '/' . Context::getContext()->language->iso_code . '.php';\n                if (Tools::file_exists_cache($file) && include_once($file)) {\n                    $_MODULES = !empty($_MODULES) ? array_merge($_MODULES, $_MODULE) : $_MODULE;\n                }\n            } else {\n                self::$classInModule[$current_class] = false;\n            }\n        }\n\n        // return name of the module, or false\n        return self::$classInModule[$current_class];\n    }\n\n    /**\n     * Return an instance of the specified module.\n     *\n     * @param string $module_name Module name\n     *\n     * @return Module\n     */\n    public static function getInstanceByName($module_name)\n    {\n        if (!Validate::isModuleName($module_name)) {\n            if (_PS_MODE_DEV_) {\n                die(Tools::displayError(Context::getContext()->getTranslator()->trans('%1$s is not a valid module name.', array(Tools::safeOutput($module_name)), 'Admin.Modules.Notification')));\n            }\n\n            return false;\n        }\n\n        if (!isset(self::$_INSTANCE[$module_name])) {\n            if (!Tools::file_exists_no_cache(_PS_MODULE_DIR_ . $module_name . '/' . $module_name . '.php')) {\n                return false;\n            }\n\n            return Module::coreLoadModule($module_name);\n        }\n\n        return self::$_INSTANCE[$module_name];\n    }\n\n    protected static function coreLoadModule($module_name)\n    {\n        include_once _PS_MODULE_DIR_ . $module_name . '/' . $module_name . '.php';\n\n        $r = false;\n        if (Tools::file_exists_no_cache(_PS_OVERRIDE_DIR_ . 'modules/' . $module_name . '/' . $module_name . '.php')) {\n            include_once _PS_OVERRIDE_DIR_ . 'modules/' . $module_name . '/' . $module_name . '.php';\n            $override = $module_name . 'Override';\n\n            if (class_exists($override, false)) {\n                $r = self::$_INSTANCE[$module_name] = ServiceLocator::get($override);\n            }\n        }\n\n        if (!$r && class_exists($module_name, false)) {\n            $r = self::$_INSTANCE[$module_name] = ServiceLocator::get($module_name);\n        }\n\n        return $r;\n    }\n\n    /**\n     * Return an instance of the specified module.\n     *\n     * @param int $id_module Module ID\n     *\n     * @return Module instance\n     */\n    public static function getInstanceById($id_module)\n    {\n        if (null === self::$cachedModuleNames) {\n            self::$cachedModuleNames = [];\n            $sql = 'SELECT `id_module`, `name` FROM `' . _DB_PREFIX_ . 'module`';\n            if ($results = Db::getInstance()->executeS($sql)) {\n                foreach ($results as $row) {\n                    self::$cachedModuleNames[$row['id_module']] = $row['name'];\n                }\n            }\n        }\n\n        if (isset(self::$cachedModuleNames[$id_module])) {\n            return Module::getInstanceByName(self::$cachedModuleNames[$id_module]);\n        }\n\n        return false;\n    }\n\n    /**\n     * Clear static cache.\n     */\n    public static function clearStaticCache()\n    {\n        self::$cachedModuleNames = null;\n    }\n\n    public static function configXmlStringFormat($string)\n    {\n        return Tools::htmlentitiesDecodeUTF8($string);\n    }\n\n    public static function getModuleName($module)\n    {\n        $iso = substr(Context::getContext()->language->iso_code, 0, 2);\n\n        // Config file\n        $config_file = _PS_MODULE_DIR_ . $module . '/config_' . $iso . '.xml';\n        // For \"en\" iso code, we keep the default config.xml name\n        if ($iso == 'en' || !file_exists($config_file)) {\n            $config_file = _PS_MODULE_DIR_ . $module . '/config.xml';\n            if (!file_exists($config_file)) {\n                return 'Module ' . ucfirst($module);\n            }\n        }\n\n        // Load config.xml\n        libxml_use_internal_errors(true);\n        $xml_module = @simplexml_load_file($config_file);\n        if (!$xml_module) {\n            return 'Module ' . ucfirst($module);\n        }\n        foreach (libxml_get_errors() as $error) {\n            libxml_clear_errors();\n\n            return 'Module ' . ucfirst($module);\n        }\n        libxml_clear_errors();\n\n        // Find translations\n        global $_MODULES;\n        $file = _PS_MODULE_DIR_ . $module . '/' . Context::getContext()->language->iso_code . '.php';\n        if (Tools::file_exists_cache($file) && include_once($file)) {\n            if (isset($_MODULE) && is_array($_MODULE)) {\n                $_MODULES = !empty($_MODULES) ? array_merge($_MODULES, $_MODULE) : $_MODULE;\n            }\n        }\n\n        // Return Name\n        return Translate::getModuleTranslation((string) $xml_module->name, Module::configXmlStringFormat($xml_module->displayName), (string) $xml_module->name);\n    }\n\n    protected static function useTooMuchMemory()\n    {\n        $memory_limit = Tools::getMemoryLimit();\n        if (function_exists('memory_get_usage') && $memory_limit != '-1') {\n            $current_memory = memory_get_usage(true);\n            $memory_threshold = (int) max($memory_limit * 0.15, Tools::isX86_64arch() ? 4194304 : 2097152);\n            $memory_left = $memory_limit - $current_memory;\n\n            if ($memory_left <= $memory_threshold) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Return available modules.\n     *\n     * @param bool $use_config in order to use config.xml file in module dir\n     *\n     * @return array Modules\n     */\n    public static function getModulesOnDisk($use_config = false, $logged_on_addons = false, $id_employee = false)\n    {\n        global $_MODULES;\n\n        // Init var\n        $module_list = array();\n        $module_name_list = array();\n        $modules_name_to_cursor = array();\n        $errors = array();\n\n        // Get modules directory list and memory limit\n        $modules_dir = Module::getModulesDirOnDisk();\n\n        $modules_installed = array();\n        $result = Db::getInstance()->executeS('\n        SELECT m.name, m.version, mp.interest, module_shop.enable_device\n        FROM `' . _DB_PREFIX_ . 'module` m\n        ' . Shop::addSqlAssociation('module', 'm', false) . '\n        LEFT JOIN `' . _DB_PREFIX_ . 'module_preference` mp ON (mp.`module` = m.`name` AND mp.`id_employee` = ' . (int) $id_employee . ')');\n        foreach ($result as $row) {\n            $modules_installed[$row['name']] = $row;\n        }\n\n        foreach ($modules_dir as $module) {\n            $module_errors = array();\n            if (Module::useTooMuchMemory()) {\n                $module_errors[] = Context::getContext()->getTranslator()->trans('All modules cannot be loaded due to memory limit restrictions, please increase your memory_limit value on your server configuration', array(), 'Admin.Modules.Notification');\n\n                break;\n            }\n\n            $iso = substr(Context::getContext()->language->iso_code, 0, 2);\n\n            // Check if config.xml module file exists and if it's not outdated\n\n            if ($iso == 'en') {\n                $config_file = _PS_MODULE_DIR_ . $module . '/config.xml';\n            } else {\n                $config_file = _PS_MODULE_DIR_ . $module . '/config_' . $iso . '.xml';\n            }\n\n            $xml_exist = (file_exists($config_file));\n            $need_new_config_file = $xml_exist ? (@filemtime($config_file) < @filemtime(_PS_MODULE_DIR_ . $module . '/' . $module . '.php')) : true;\n\n            // If config.xml exists and that the use config flag is at true\n            if ($use_config && $xml_exist && !$need_new_config_file) {\n                // Load config.xml\n                libxml_use_internal_errors(true);\n                $xml_module = @simplexml_load_file($config_file);\n                if (!$xml_module) {\n                    $module_errors[] = Context::getContext()->getTranslator()->trans(\n                        '%s could not be loaded.',\n                        array($config_file),\n                        'Admin.Modules.Notification'\n                    );\n\n                    break;\n                }\n                foreach (libxml_get_errors() as $error) {\n                    $module_errors[] = '[' . $module . '] ' . Context::getContext()->getTranslator()->trans('Error found in config file:', array(), 'Admin.Modules.Notification') . ' ' . htmlentities($error->message);\n                }\n                libxml_clear_errors();\n\n                // If no errors in Xml, no need instand and no need new config.xml file, we load only translations\n                if (!count($module_errors) && (int) $xml_module->need_instance == 0) {\n                    $file = _PS_MODULE_DIR_ . $module . '/' . Context::getContext()->language->iso_code . '.php';\n                    if (Tools::file_exists_cache($file) && include_once($file)) {\n                        if (isset($_MODULE) && is_array($_MODULE)) {\n                            $_MODULES = !empty($_MODULES) ? array_merge($_MODULES, $_MODULE) : $_MODULE;\n                        }\n                    }\n\n                    $item = new \\stdClass();\n                    $item->id = 0;\n                    $item->warning = '';\n\n                    foreach ($xml_module as $k => $v) {\n                        $item->$k = (string) $v;\n                    }\n\n                    $item->displayName = stripslashes(Translate::getModuleTranslation((string) $xml_module->name, Module::configXmlStringFormat($xml_module->displayName), (string) $xml_module->name));\n                    $item->description = stripslashes(Translate::getModuleTranslation((string) $xml_module->name, Module::configXmlStringFormat($xml_module->description), (string) $xml_module->name));\n                    $item->author = stripslashes(Translate::getModuleTranslation((string) $xml_module->name, Module::configXmlStringFormat($xml_module->author), (string) $xml_module->name));\n                    $item->author_uri = (isset($xml_module->author_uri) && $xml_module->author_uri) ? stripslashes($xml_module->author_uri) : false;\n\n                    if (isset($xml_module->confirmUninstall)) {\n                        $item->confirmUninstall = Translate::getModuleTranslation((string) $xml_module->name, html_entity_decode(Module::configXmlStringFormat($xml_module->confirmUninstall)), (string) $xml_module->name);\n                    }\n\n                    $item->active = 0;\n                    $item->onclick_option = false;\n                    $item->trusted = Module::isModuleTrusted($item->name);\n\n                    $module_list[$item->name . '_disk'] = $item;\n\n                    $module_name_list[] = '\\'' . pSQL($item->name) . '\\'';\n                    $modules_name_to_cursor[Tools::strtolower((string) ($item->name))] = $item;\n                }\n            }\n\n            // If use config flag is at false or config.xml does not exist OR need instance OR need a new config.xml file\n            if (!$use_config || !$xml_exist || (isset($xml_module->need_instance) && (int) $xml_module->need_instance == 1) || $need_new_config_file) {\n                // If class does not exists, we include the file\n                if (!class_exists($module, false)) {\n                    // Get content from php file\n                    $file_path = _PS_MODULE_DIR_ . $module . '/' . $module . '.php';\n                    $file = trim(file_get_contents(_PS_MODULE_DIR_ . $module . '/' . $module . '.php'));\n\n                    try {\n                        $parser = (new PhpParser\\ParserFactory())->create(PhpParser\\ParserFactory::PREFER_PHP7);\n                        $parser->parse($file);\n                        require_once $file_path;\n                    } catch (PhpParser\\Error $e) {\n                        $errors[] = Context::getContext()->getTranslator()->trans('%1$s (parse error in %2$s)', array($module, substr($file_path, strlen(_PS_ROOT_DIR_))), 'Admin.Modules.Notification');\n                    }\n\n                    preg_match('/\\n[\\s\\t]*?namespace\\s.*?;/', $file, $ns);\n                    if (!empty($ns)) {\n                        $ns = preg_replace('/\\n[\\s\\t]*?namespace\\s/', '', $ns[0]);\n                        $ns = rtrim($ns, ';');\n                        $module = $ns . '\\\\' . $module;\n                    }\n                }\n\n                // If class exists, we just instanciate it\n                if (class_exists($module, false)) {\n                    try {\n                        $tmp_module = ServiceLocator::get($module);\n\n                        $item = new \\stdClass();\n\n                        $item->id = (int) $tmp_module->id;\n                        $item->warning = $tmp_module->warning;\n                        $item->name = $tmp_module->name;\n                        $item->version = $tmp_module->version;\n                        $item->tab = $tmp_module->tab;\n                        $item->displayName = $tmp_module->displayName;\n                        $item->description = stripslashes($tmp_module->description);\n                        $item->author = $tmp_module->author;\n                        $item->author_uri = (isset($tmp_module->author_uri) && $tmp_module->author_uri) ? $tmp_module->author_uri : false;\n                        $item->limited_countries = $tmp_module->limited_countries;\n                        $item->parent_class = get_parent_class($module);\n                        $item->is_configurable = $tmp_module->is_configurable = method_exists($tmp_module, 'getContent') ? 1 : 0;\n                        $item->need_instance = isset($tmp_module->need_instance) ? $tmp_module->need_instance : 0;\n                        $item->active = $tmp_module->active;\n                        $item->trusted = Module::isModuleTrusted($tmp_module->name);\n                        $item->currencies = isset($tmp_module->currencies) ? $tmp_module->currencies : null;\n                        $item->currencies_mode = isset($tmp_module->currencies_mode) ? $tmp_module->currencies_mode : null;\n                        $item->confirmUninstall = isset($tmp_module->confirmUninstall) ? html_entity_decode($tmp_module->confirmUninstall) : null;\n                        $item->description_full = stripslashes($tmp_module->description_full);\n                        $item->additional_description = isset($tmp_module->additional_description) ? stripslashes($tmp_module->additional_description) : null;\n                        $item->compatibility = isset($tmp_module->compatibility) ? (array) $tmp_module->compatibility : null;\n                        $item->nb_rates = isset($tmp_module->nb_rates) ? (array) $tmp_module->nb_rates : null;\n                        $item->avg_rate = isset($tmp_module->avg_rate) ? (array) $tmp_module->avg_rate : null;\n                        $item->badges = isset($tmp_module->badges) ? (array) $tmp_module->badges : null;\n                        $item->url = isset($tmp_module->url) ? $tmp_module->url : null;\n                        $item->onclick_option = method_exists($module, 'onclickOption') ? true : false;\n\n                        if ($item->onclick_option) {\n                            $href = Context::getContext()->link->getAdminLink('Module', true, array(), array('module_name' => $tmp_module->name, 'tab_module' => $tmp_module->tab));\n                            $item->onclick_option_content = array();\n                            $option_tab = array('desactive', 'reset', 'configure', 'delete');\n\n                            foreach ($option_tab as $opt) {\n                                $item->onclick_option_content[$opt] = $tmp_module->onclickOption($opt, $href);\n                            }\n                        }\n\n                        $module_list[$item->name . '_disk'] = $item;\n\n                        if (!$xml_exist || $need_new_config_file) {\n                            self::$_generate_config_xml_mode = true;\n                            $tmp_module->_generateConfigXml();\n                            self::$_generate_config_xml_mode = false;\n                        }\n\n                        unset($tmp_module);\n                    } catch (Exception $e) {\n                    }\n                } else {\n                    $module_errors[] = Context::getContext()->getTranslator()->trans('%1$s (class missing in %2$s)', array($module, substr($file_path, strlen(_PS_ROOT_DIR_))), 'Admin.Modules.Notification');\n                }\n            }\n            $errors = array_merge($errors, $module_errors);\n        }\n\n        // Get modules information from database\n        if (!empty($module_name_list)) {\n            $list = Shop::getContextListShopID();\n            $sql = 'SELECT m.id_module, m.name, (\n                        SELECT COUNT(*) FROM ' . _DB_PREFIX_ . 'module_shop ms WHERE m.id_module = ms.id_module AND ms.id_shop IN (' . implode(',', $list) . ')\n                    ) as total\n                    FROM ' . _DB_PREFIX_ . 'module m\n                    WHERE LOWER(m.name) IN (' . Tools::strtolower(implode(',', $module_name_list)) . ')';\n            $results = Db::getInstance()->executeS($sql);\n\n            foreach ($results as $result) {\n                if (isset($modules_name_to_cursor[Tools::strtolower($result['name'])])) {\n                    $module_cursor = $modules_name_to_cursor[Tools::strtolower($result['name'])];\n                    $module_cursor->id = (int) $result['id_module'];\n                    $module_cursor->active = ($result['total'] == count($list)) ? 1 : 0;\n                }\n            }\n        }\n\n        // Get Default Country Modules and customer module\n        $files_list = array(\n            array('type' => 'addonsNative', 'file' => _PS_ROOT_DIR_ . self::CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST, 'loggedOnAddons' => 0),\n            array('type' => 'addonsMustHave', 'file' => _PS_ROOT_DIR_ . self::CACHE_FILE_MUST_HAVE_MODULES_LIST, 'loggedOnAddons' => 0),\n            array('type' => 'addonsBought', 'file' => _PS_ROOT_DIR_ . self::CACHE_FILE_CUSTOMER_MODULES_LIST, 'loggedOnAddons' => 1),\n        );\n        foreach ($files_list as $f) {\n            if (file_exists($f['file']) && ($f['loggedOnAddons'] == 0 || $logged_on_addons)) {\n                if (Module::useTooMuchMemory()) {\n                    $errors[] = Context::getContext()->getTranslator()->trans('All modules cannot be loaded due to memory limit restrictions, please increase your memory_limit value on your server configuration', array(), 'Admin.Modules.Notification');\n\n                    break;\n                }\n\n                $file = $f['file'];\n                $content = Tools::file_get_contents($file);\n                $xml = @simplexml_load_string($content, null, LIBXML_NOCDATA);\n\n                if ($xml && isset($xml->module)) {\n                    foreach ($xml->module as $modaddons) {\n                        $flag_found = 0;\n\n                        foreach ($module_list as $k => &$m) {\n                            if (Tools::strtolower($m->name) == Tools::strtolower($modaddons->name) && !isset($m->available_on_addons)) {\n                                $flag_found = 1;\n                                if ($m->version != $modaddons->version && version_compare($m->version, $modaddons->version) === -1) {\n                                    $module_list[$k]->version_addons = $modaddons->version;\n                                }\n                            }\n                        }\n\n                        if ($flag_found == 0) {\n                            $item = new \\stdClass();\n                            $item->id = 0;\n                            $item->warning = '';\n                            $item->type = strip_tags((string) $f['type']);\n                            $item->name = strip_tags((string) $modaddons->name);\n                            $item->version = strip_tags((string) $modaddons->version);\n                            $item->tab = strip_tags((string) $modaddons->tab);\n                            $item->displayName = strip_tags((string) $modaddons->displayName);\n                            $item->description = stripslashes(strip_tags((string) $modaddons->description));\n                            $item->description_full = stripslashes(strip_tags((string) $modaddons->description_full));\n                            $item->author = strip_tags((string) $modaddons->author);\n                            $item->limited_countries = array();\n                            $item->parent_class = '';\n                            $item->onclick_option = false;\n                            $item->is_configurable = 0;\n                            $item->need_instance = 0;\n                            $item->not_on_disk = 1;\n                            $item->available_on_addons = 1;\n                            $item->trusted = Module::isModuleTrusted($item->name);\n                            $item->active = 0;\n                            $item->description_full = stripslashes($modaddons->description_full);\n                            $item->additional_description = isset($modaddons->additional_description) ? stripslashes($modaddons->additional_description) : null;\n                            $item->compatibility = isset($modaddons->compatibility) ? (array) $modaddons->compatibility : null;\n                            $item->nb_rates = isset($modaddons->nb_rates) ? (array) $modaddons->nb_rates : null;\n                            $item->avg_rate = isset($modaddons->avg_rate) ? (array) $modaddons->avg_rate : null;\n                            $item->badges = isset($modaddons->badges) ? (array) $modaddons->badges : null;\n                            $item->url = isset($modaddons->url) ? $modaddons->url : null;\n                            if (isset($item->description_full) && trim($item->description_full) != '') {\n                                $item->show_quick_view = true;\n                            }\n\n                            if (isset($modaddons->img)) {\n                                $item->image = Module::copyModAddonsImg($modaddons);\n                            }\n\n                            if ($item->type == 'addonsMustHave') {\n                                $item->addons_buy_url = strip_tags((string) $modaddons->url);\n                                $prices = (array) $modaddons->price;\n                                $id_default_currency = Configuration::get('PS_CURRENCY_DEFAULT');\n\n                                foreach ($prices as $currency => $price) {\n                                    if ($id_currency = Currency::getIdByIsoCode($currency)) {\n                                        $item->price = (float) $price;\n                                        $item->id_currency = (int) $id_currency;\n\n                                        if ($id_default_currency == $id_currency) {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n\n                            $module_list[$item->name . '_feed'] = $item;\n                        }\n\n                        if (isset($module_list[$modaddons->name . '_disk'])) {\n                            $module_list[$modaddons->name . '_disk']->description_full = stripslashes(strip_tags((string) $modaddons->description_full));\n                            $module_list[$modaddons->name . '_disk']->additional_description = stripslashes(strip_tags((string) $modaddons->additional_description));\n                            $module_list[$modaddons->name . '_disk']->image = Module::copyModAddonsImg($modaddons);\n                            $module_list[$modaddons->name . '_disk']->show_quick_view = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        foreach ($module_list as $key => &$module) {\n            if (!isset($module->tab)) {\n                $module->tab = 'others';\n            }\n            if (defined('_PS_HOST_MODE_') && in_array($module->name, self::$hosted_modules_blacklist)) {\n                unset($module_list[$key]);\n            } elseif (isset($modules_installed[$module->name])) {\n                $module->installed = true;\n                $module->database_version = $modules_installed[$module->name]['version'];\n                $module->interest = $modules_installed[$module->name]['interest'];\n                $module->enable_device = $modules_installed[$module->name]['enable_device'];\n            } else {\n                $module->installed = false;\n                $module->database_version = 0;\n                $module->interest = 0;\n            }\n        }\n\n        usort($module_list, function ($a, $b) {\n            return strnatcasecmp($a->displayName, $b->displayName);\n        });\n        if ($errors) {\n            if (!isset(Context::getContext()->controller) && !Context::getContext()->controller->controller_name) {\n                echo '<div class=\"alert error\"><h3>' . Context::getContext()->getTranslator()->trans('The following module(s) could not be loaded', array(), 'Admin.Modules.Notification') . ':</h3><ol>';\n                foreach ($errors as $error) {\n                    echo '<li>' . $error . '</li>';\n                }\n                echo '</ol></div>';\n            } else {\n                foreach ($errors as $error) {\n                    Context::getContext()->controller->errors[] = $error;\n                }\n            }\n        }\n\n        return $module_list;\n    }\n\n    public static function copyModAddonsImg($modaddons)\n    {\n        if (!Validate::isLoadedObject($modaddons)) {\n            return;\n        }\n        if (!file_exists(_PS_TMP_IMG_DIR_ . md5((int) $modaddons->id . '-' . $modaddons->name) . '.jpg') &&\n        !file_put_contents(_PS_TMP_IMG_DIR_ . md5((int) $modaddons->id . '-' . $modaddons->name) . '.jpg', Tools::file_get_contents($modaddons->img))) {\n            copy(_PS_IMG_DIR_ . '404.gif', _PS_TMP_IMG_DIR_ . md5((int) $modaddons->id . '-' . $modaddons->name) . '.jpg');\n        }\n        if (file_exists(_PS_TMP_IMG_DIR_ . md5((int) $modaddons->id . '-' . $modaddons->name) . '.jpg')) {\n            return '../img/tmp/' . md5((int) $modaddons->id . '-' . $modaddons->name) . '.jpg';\n        }\n    }\n\n    /**\n     * Return modules directory list.\n     *\n     * @return array Modules Directory List\n     */\n    public static function getModulesDirOnDisk()\n    {\n        $module_list = array();\n        $modules = scandir(_PS_MODULE_DIR_, SCANDIR_SORT_NONE);\n        foreach ($modules as $name) {\n            if (is_file(_PS_MODULE_DIR_ . $name)) {\n                continue;\n            } elseif (is_dir(_PS_MODULE_DIR_ . $name . DIRECTORY_SEPARATOR) && Tools::file_exists_cache(_PS_MODULE_DIR_ . $name . '/' . $name . '.php')) {\n                if (!Validate::isModuleName($name)) {\n                    throw new PrestaShopException(sprintf('Module %s is not a valid module name', $name));\n                }\n                $module_list[] = $name;\n            }\n        }\n\n        return $module_list;\n    }\n\n    /**\n     * Return non native module.\n     *\n     * @param int $position Take only positionnables modules\n     *\n     * @return array Modules\n     */\n    public static function getNonNativeModuleList()\n    {\n        $db = Db::getInstance();\n        $module_list_xml = _PS_ROOT_DIR_ . self::CACHE_FILE_MODULES_LIST;\n        $native_modules = @simplexml_load_file($module_list_xml);\n        if ($native_modules) {\n            $native_modules = $native_modules->modules;\n        }\n\n        $arr_native_modules = array();\n        if (is_object($native_modules)) {\n            foreach ($native_modules as $native_modules_type) {\n                if (in_array($native_modules_type['type'], array('native', 'partner'))) {\n                    $arr_native_modules[] = '\"\"';\n                    foreach ($native_modules_type->module as $module) {\n                        $arr_native_modules[] = '\"' . pSQL($module['name']) . '\"';\n                    }\n                }\n            }\n        }\n\n        if ($arr_native_modules) {\n            return $db->executeS('SELECT * FROM `' . _DB_PREFIX_ . 'module` m WHERE `name` NOT IN (' . implode(',', $arr_native_modules) . ') ');\n        }\n\n        return false;\n    }\n\n    public static function getNativeModuleList()\n    {\n        $module_list_xml = _PS_ROOT_DIR_ . self::CACHE_FILE_MODULES_LIST;\n        if (!file_exists($module_list_xml)) {\n            return false;\n        }\n\n        $native_modules = @simplexml_load_file($module_list_xml);\n\n        if ($native_modules) {\n            $native_modules = $native_modules->modules;\n        }\n\n        $modules = array();\n        if (is_object($native_modules)) {\n            foreach ($native_modules as $native_modules_type) {\n                if (in_array($native_modules_type['type'], array('native', 'partner'))) {\n                    foreach ($native_modules_type->module as $module) {\n                        $modules[] = $module['name'];\n                    }\n                }\n            }\n        }\n        if ($modules) {\n            return $modules;\n        }\n\n        return false;\n    }\n\n    /**\n     * Return installed modules.\n     *\n     * @param int $position Take only positionnables modules\n     *\n     * @return array Modules\n     */\n    public static function getModulesInstalled($position = 0)\n    {\n        $sql = 'SELECT m.* FROM `' . _DB_PREFIX_ . 'module` m ';\n        if ($position) {\n            $sql .= 'LEFT JOIN `' . _DB_PREFIX_ . 'hook_module` hm ON m.`id_module` = hm.`id_module`\n                 LEFT JOIN `' . _DB_PREFIX_ . 'hook` k ON hm.`id_hook` = k.`id_hook`\n                 WHERE k.`position` = 1\n                 GROUP BY m.id_module';\n        }\n\n        return Db::getInstance()->executeS($sql);\n    }\n\n    /**\n     * Return if the module is provided by addons.prestashop.com or not.\n     *\n     * @param string $name The module name (the folder name)\n     * @param string $key The key provided by addons\n     *\n     * @return int\n     */\n    final public static function isModuleTrusted($module_name)\n    {\n        static $trusted_modules_list_content = null;\n        static $modules_list_content = null;\n        static $default_country_modules_list_content = null;\n        static $untrusted_modules_list_content = null;\n\n        $context = Context::getContext();\n\n        // If the xml file exist, isn't empty, isn't too old\n        // and if the theme hadn't change\n        // we use the file, otherwise we regenerate it\n        if (!(\n            file_exists(_PS_ROOT_DIR_ . self::CACHE_FILE_TRUSTED_MODULES_LIST)\n            && filesize(_PS_ROOT_DIR_ . self::CACHE_FILE_TRUSTED_MODULES_LIST) > 0\n            && ((time() - filemtime(_PS_ROOT_DIR_ . self::CACHE_FILE_TRUSTED_MODULES_LIST)) < 86400)\n            )) {\n            self::generateTrustedXml();\n        }\n\n        if ($trusted_modules_list_content === null) {\n            $trusted_modules_list_content = Tools::file_get_contents(_PS_ROOT_DIR_ . self::CACHE_FILE_TRUSTED_MODULES_LIST);\n            if (strpos($trusted_modules_list_content, $context->shop->theme->getName()) === false) {\n                self::generateTrustedXml();\n            }\n        }\n\n        $modulesListCacheFilepath = _PS_ROOT_DIR_ . self::CACHE_FILE_MODULES_LIST;\n        if ($modules_list_content === null && is_readable($modulesListCacheFilepath)) {\n            $modules_list_content = Tools::file_get_contents($modulesListCacheFilepath);\n        }\n\n        if ($default_country_modules_list_content === null) {\n            $default_country_modules_list_content = Tools::file_get_contents(_PS_ROOT_DIR_ . self::CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST);\n        }\n\n        if ($untrusted_modules_list_content === null) {\n            $untrusted_modules_list_content = Tools::file_get_contents(_PS_ROOT_DIR_ . self::CACHE_FILE_UNTRUSTED_MODULES_LIST);\n        }\n\n        // If the module is trusted, which includes both partner modules and modules bought on Addons\n\n        if (stripos($trusted_modules_list_content, $module_name) !== false) {\n            // If the module is not a partner, then return 1 (which means the module is \"trusted\")\n            if (stripos($modules_list_content, '<module name=\"' . $module_name . '\"/>') == false) {\n                return 1;\n            } elseif (stripos($default_country_modules_list_content, '<name><![CDATA[' . $module_name . ']]></name>') !== false) {\n                // The module is a parter. If the module is in the file that contains module for this country then return 1 (which means the module is \"trusted\")\n                return 1;\n            }\n            // The module seems to be trusted, but it does not seem to be dedicated to this country\n            return 2;\n        } elseif (stripos($untrusted_modules_list_content, $module_name) !== false) {\n            // If the module is already in the untrusted list, then return 0 (untrusted)\n            return 0;\n        } else {\n            // If the module isn't in one of the xml files\n            // It might have been uploaded recenlty so we check\n            // Addons API and clear XML files to be regenerated next time\n            self::deleteTrustedXmlCache();\n\n            return (int) Module::checkModuleFromAddonsApi($module_name);\n        }\n    }\n\n    /**\n     * Delete the trusted / untrusted XML files, generated by generateTrustedXml().\n     */\n    final public static function deleteTrustedXmlCache()\n    {\n        Tools::deleteFile(_PS_ROOT_DIR_ . self::CACHE_FILE_TRUSTED_MODULES_LIST);\n        Tools::deleteFile(_PS_ROOT_DIR_ . self::CACHE_FILE_UNTRUSTED_MODULES_LIST);\n    }\n\n    /**\n     * Generate XML files for trusted and untrusted modules.\n     */\n    final public static function generateTrustedXml()\n    {\n        $modules_on_disk = Module::getModulesDirOnDisk();\n        $trusted = array();\n        $untrusted = array();\n\n        $trusted_modules_xml = array(\n            _PS_ROOT_DIR_ . self::CACHE_FILE_ALL_COUNTRY_MODULES_LIST,\n            _PS_ROOT_DIR_ . self::CACHE_FILE_MUST_HAVE_MODULES_LIST,\n            _PS_ROOT_DIR_ . self::CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST,\n        );\n\n        if (file_exists(_PS_ROOT_DIR_ . self::CACHE_FILE_CUSTOMER_MODULES_LIST)) {\n            $trusted_modules_xml[] = _PS_ROOT_DIR_ . self::CACHE_FILE_CUSTOMER_MODULES_LIST;\n        }\n\n        // Create 2 arrays with trusted and untrusted modules\n        foreach ($trusted_modules_xml as $file) {\n            $content = Tools::file_get_contents($file);\n            $xml = @simplexml_load_string($content, null, LIBXML_NOCDATA);\n\n            if ($xml && isset($xml->module)) {\n                foreach ($xml->module as $modaddons) {\n                    $trusted[] = Tools::strtolower((string) $modaddons->name);\n                }\n            }\n        }\n\n        foreach (glob(_PS_ROOT_DIR_ . '/config/xml/themes/*.xml') as $theme_xml) {\n            if (file_exists($theme_xml)) {\n                $content = Tools::file_get_contents($theme_xml);\n                $xml = @simplexml_load_string($content, null, LIBXML_NOCDATA);\n\n                if ($xml) {\n                    foreach ($xml->modules->module as $modaddons) {\n                        if ((string) $modaddons['action'] == 'install') {\n                            $trusted[] = Tools::strtolower((string) $modaddons['name']);\n                        }\n                    }\n                }\n            }\n        }\n\n        foreach ($modules_on_disk as $name) {\n            if (!in_array($name, $trusted)) {\n                if (Module::checkModuleFromAddonsApi($name)) {\n                    $trusted[] = Tools::strtolower($name);\n                } else {\n                    $untrusted[] = Tools::strtolower($name);\n                }\n            }\n        }\n\n        $context = Context::getContext();\n\n        // Save the 2 arrays into XML files\n        $trusted_xml = new SimpleXMLElement('<modules_list/>');\n        $trusted_xml->addAttribute('theme', $context->shop->theme->getName());\n        $modules = $trusted_xml->addChild('modules');\n        $modules->addAttribute('type', 'trusted');\n        foreach ($trusted as $key => $name) {\n            $module = $modules->addChild('module');\n            $module->addAttribute('name', $name);\n        }\n        $success = file_put_contents(_PS_ROOT_DIR_ . self::CACHE_FILE_TRUSTED_MODULES_LIST, $trusted_xml->asXML());\n\n        $untrusted_xml = new SimpleXMLElement('<modules_list/>');\n        $modules = $untrusted_xml->addChild('modules');\n        $modules->addAttribute('type', 'untrusted');\n        foreach ($untrusted as $key => $name) {\n            $module = $modules->addChild('module');\n            $module->addAttribute('name', $name);\n        }\n        $success &= file_put_contents(_PS_ROOT_DIR_ . self::CACHE_FILE_UNTRUSTED_MODULES_LIST, $untrusted_xml->asXML());\n\n        if ($success) {\n            return true;\n        } else {\n            Context::getContext()->getTranslator()->trans('Trusted and Untrusted XML have not been generated properly', array(), 'Admin.Modules.Notification');\n        }\n    }\n\n    /**\n     * Create the Addons API call from the module name only.\n     *\n     * @param string $name Module dir name\n     *\n     * @return bool Returns if the module is trusted by addons.prestashop.com\n     */\n    final public static function checkModuleFromAddonsApi($module_name)\n    {\n        $obj = Module::getInstanceByName($module_name);\n\n        if (!is_object($obj)) {\n            return false;\n        } elseif ($obj->module_key === '') {\n            return false;\n        } else {\n            $params = array(\n                'module_name' => $obj->name,\n                'module_key' => $obj->module_key,\n            );\n            $xml = Tools::addonsRequest('check_module', $params);\n\n            return (bool) (strpos($xml, 'success') !== false);\n        }\n    }\n\n    /**\n     * Returns the list of the payment module associated to the current customer.\n     *\n     * @see PaymentModule::getInstalledPaymentModules() if you don't care about the context\n     *\n     * @return array module informations\n     */\n    public static function getPaymentModules()\n    {\n        $context = Context::getContext();\n        if (isset($context->cart)) {\n            $billing = new Address((int) $context->cart->id_address_invoice);\n        }\n\n        $use_groups = Group::isFeatureActive();\n\n        $frontend = true;\n        $groups = array();\n        if (isset($context->employee)) {\n            $frontend = false;\n        } elseif (isset($context->customer) && $use_groups) {\n            $groups = $context->customer->getGroups();\n            if (!count($groups)) {\n                $groups = array(Configuration::get('PS_UNIDENTIFIED_GROUP'));\n            }\n        }\n\n        $hook_payment = 'Payment';\n        if (Db::getInstance()->getValue('SELECT `id_hook` FROM `' . _DB_PREFIX_ . 'hook` WHERE `name` = \\'paymentOptions\\'')) {\n            $hook_payment = 'paymentOptions';\n        }\n\n        $list = Shop::getContextListShopID();\n\n        return Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS('SELECT DISTINCT m.`id_module`, h.`id_hook`, m.`name`, hm.`position`\n        FROM `' . _DB_PREFIX_ . 'module` m\n        ' . ($frontend ? 'LEFT JOIN `' . _DB_PREFIX_ . 'module_country` mc ON (m.`id_module` = mc.`id_module` AND mc.id_shop = ' . (int) $context->shop->id . ')' : '') . '\n        ' . ($frontend && $use_groups ? 'INNER JOIN `' . _DB_PREFIX_ . 'module_group` mg ON (m.`id_module` = mg.`id_module` AND mg.id_shop = ' . (int) $context->shop->id . ')' : '') . '\n        ' . ($frontend && isset($context->customer) && $use_groups ? 'INNER JOIN `' . _DB_PREFIX_ . 'customer_group` cg on (cg.`id_group` = mg.`id_group`AND cg.`id_customer` = ' . (int) $context->customer->id . ')' : '') . '\n        LEFT JOIN `' . _DB_PREFIX_ . 'hook_module` hm ON hm.`id_module` = m.`id_module`\n        LEFT JOIN `' . _DB_PREFIX_ . 'hook` h ON hm.`id_hook` = h.`id_hook`\n        WHERE h.`name` = \\'' . pSQL($hook_payment) . '\\'\n        ' . (isset($billing) && $frontend ? 'AND mc.id_country = ' . (int) $billing->id_country : '') . '\n        AND (SELECT COUNT(*) FROM ' . _DB_PREFIX_ . 'module_shop ms WHERE ms.id_module = m.id_module AND ms.id_shop IN(' . implode(', ', $list) . ')) = ' . count($list) . '\n        AND hm.id_shop IN(' . implode(', ', $list) . ')\n        ' . ((count($groups) && $frontend && $use_groups) ? 'AND (mg.`id_group` IN (' . implode(', ', $groups) . '))' : '') . '\n        GROUP BY hm.id_hook, hm.id_module\n        ORDER BY hm.`position`, m.`name` DESC');\n    }\n\n    /**\n     * Get translation for a given module text.\n     *\n     * Note: $specific parameter is mandatory for library files.\n     * Otherwise, translation key will not match for Module library\n     * when module is loaded with eval() Module::getModulesOnDisk()\n     *\n     * @param string $string String to translate\n     * @param bool|string $specific filename to use in translation key\n     * @param string|null $locale Locale to translate to\n     *\n     * @return string Translation\n     */\n    public function l($string, $specific = false, $locale = null)\n    {\n        if (self::$_generate_config_xml_mode) {\n            return $string;\n        }\n\n        return Translate::getModuleTranslation(\n            $this,\n            $string,\n            ($specific) ? $specific : $this->name,\n            null,\n            false,\n            $locale\n        );\n    }\n\n    /**\n     * Reposition module\n     *\n     * @param bool $id_hook Hook ID\n     * @param bool $way Up (0) or Down (1)\n     * @param int $position\n     */\n    public function updatePosition($id_hook, $way, $position = null)\n    {\n        foreach (Shop::getContextListShopID() as $shop_id) {\n            $getAvailableHookPositionsSql = 'SELECT hm.`id_module`, hm.`position`, hm.`id_hook`\n                    FROM `' . _DB_PREFIX_ . 'hook_module` hm\n                    WHERE hm.`id_hook` = ' . (int) $id_hook . ' AND hm.`id_shop` = ' . $shop_id . '\n                    ORDER BY hm.`position` ' . ($way ? 'ASC' : 'DESC');\n\n            if (!$sqlResult = Db::getInstance()->executeS($getAvailableHookPositionsSql)) {\n                // no hook positions available\n                continue;\n            }\n            if (count($sqlResult) === 1) {\n                // if there is only 1 position available, it cannot be updated\n                return false;\n            }\n\n            foreach ($sqlResult as $positionNumber => $positionSettings) {\n                $thisIsTheSettingsForThisModule = ((int) $positionSettings[$this->identifier] == (int) $this->id);\n\n                if ($thisIsTheSettingsForThisModule) {\n                    $thisModulePositionNumber = $positionNumber;\n\n                    break;\n                }\n            }\n\n            if (!isset($thisModulePositionNumber)) {\n                // could not find hook positions for this module\n                return false;\n            }\n            if (!isset($sqlResult[$thisModulePositionNumber])) {\n                // ok this one is really weird\n                return false;\n            }\n            if (!isset($sqlResult[$thisModulePositionNumber + 1])) {\n                // no alternative position available following $way, so position cannot be updated\n                return false;\n            }\n\n            $from = $sqlResult[$thisModulePositionNumber];\n            $to = $sqlResult[$thisModulePositionNumber + 1];\n\n            if (!empty($position)) {\n                $to['position'] = (int) $position;\n            }\n\n            $minPosition = min((int) $from['position'], (int) $to['position']);\n            $maxPosition = max((int) $from['position'], (int) $to['position']);\n\n            $shiftHookPositionsSql = 'UPDATE `' . _DB_PREFIX_ . 'hook_module`\n                SET position = position ' . ($way ? '- 1' : '+ 1') . '\n                WHERE position BETWEEN ' . $minPosition . ' AND ' . $maxPosition . '\n                AND `id_hook` = ' . (int) $from['id_hook'] . ' AND `id_shop` = ' . $shop_id;\n\n            if (!Db::getInstance()->execute($shiftHookPositionsSql)) {\n                return false;\n            }\n\n            $createMissingPositionSql = 'UPDATE `' . _DB_PREFIX_ . 'hook_module`\n                SET `position`=' . (int) $to['position'] . '\n                WHERE `' . pSQL($this->identifier) . '` = ' . (int) $from[$this->identifier] . '\n                AND `id_hook` = ' . (int) $to['id_hook'] . ' AND `id_shop` = ' . $shop_id;\n            if (!Db::getInstance()->execute($createMissingPositionSql)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Reorder modules position\n     *\n     * @param bool $id_hook Hook ID\n     * @param array $shop_list List of shop\n     */\n    public function cleanPositions($id_hook, $shop_list = null)\n    {\n        $sql = 'SELECT `id_module`, `id_shop`\n            FROM `' . _DB_PREFIX_ . 'hook_module`\n            WHERE `id_hook` = ' . (int) $id_hook . '\n            ' . ((null !== $shop_list && $shop_list) ? ' AND `id_shop` IN(' . implode(', ', array_map('intval', $shop_list)) . ')' : '') . '\n            ORDER BY `position`';\n        $results = Db::getInstance()->executeS($sql);\n        $position = array();\n        foreach ($results as $row) {\n            if (!isset($position[$row['id_shop']])) {\n                $position[$row['id_shop']] = 1;\n            }\n\n            $sql = 'UPDATE `' . _DB_PREFIX_ . 'hook_module`\n                SET `position` = ' . $position[$row['id_shop']] . '\n                WHERE `id_hook` = ' . (int) $id_hook . '\n                AND `id_module` = ' . $row['id_module'] . ' AND `id_shop` = ' . $row['id_shop'];\n            Db::getInstance()->execute($sql);\n            ++$position[$row['id_shop']];\n        }\n\n        return true;\n    }\n\n    /**\n     * Helper displaying error message(s).\n     *\n     * @param string|array $error\n     *\n     * @return string\n     */\n    public function displayError($error)\n    {\n        $output = '\n        <div class=\"bootstrap\">\n        <div class=\"module_error alert alert-danger\" >\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>';\n\n        if (is_array($error)) {\n            $output .= '<ul>';\n            foreach ($error as $msg) {\n                $output .= '<li>' . $msg . '</li>';\n            }\n            $output .= '</ul>';\n        } else {\n            $output .= $error;\n        }\n\n        // Close div openned previously\n        $output .= '</div></div>';\n\n        $this->error = true;\n\n        return $output;\n    }\n\n    /**\n     * Helper displaying warning message(s).\n     *\n     * @param string|array $warning\n     *\n     * @return string\n     */\n    public function displayWarning($warning)\n    {\n        $output = '\n        <div class=\"bootstrap\">\n        <div class=\"module_warning alert alert-warning\" >\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>';\n\n        if (is_array($warning)) {\n            $output .= '<ul>';\n            foreach ($warning as $msg) {\n                $output .= '<li>' . $msg . '</li>';\n            }\n            $output .= '</ul>';\n        } else {\n            $output .= $warning;\n        }\n\n        // Close div openned previously\n        $output .= '</div></div>';\n\n        return $output;\n    }\n\n    /**\n     * Helper displaying confirmation message.\n     *\n     * @param string $string\n     *\n     * @return string\n     */\n    public function displayConfirmation($string)\n    {\n        $output = '\n        <div class=\"bootstrap\">\n        <div class=\"module_confirmation conf confirm alert alert-success\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n            ' . $string . '\n        </div>\n        </div>';\n\n        return $output;\n    }\n\n    /**\n     * Helper displaying information message(s).\n     *\n     * @param string|array $information\n     *\n     * @return string\n     */\n    public function displayInformation($information)\n    {\n        $output = '\n        <div class=\"bootstrap\">\n        <div class=\"module_info info alert alert-info\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>';\n\n        if (is_array($information)) {\n            $output .= '<ul>';\n            foreach ($information as $msg) {\n                $output .= '<li>' . $msg . '</li>';\n            }\n            $output .= '</ul>';\n        } else {\n            $output .= $information;\n        }\n\n        // Close div openned previously\n        $output .= '</div></div>';\n\n        return $output;\n    }\n\n    /**\n     * Return exceptions for module in hook\n     *\n     * @param int $id_module Module ID\n     * @param int $id_hook Hook ID\n     *\n     * @return array Exceptions\n     */\n    public static function getExceptionsStatic($id_module, $id_hook, $dispatch = false)\n    {\n        $cache_id = 'exceptionsCache';\n        if (!Cache::isStored($cache_id)) {\n            $exceptions_cache = array();\n            $sql = 'SELECT * FROM `' . _DB_PREFIX_ . 'hook_module_exceptions`\n                WHERE `id_shop` IN (' . implode(', ', Shop::getContextListShopID()) . ')';\n            $db = Db::getInstance();\n            $result = $db->executeS($sql, false);\n            while ($row = $db->nextRow($result)) {\n                if (!$row['file_name']) {\n                    continue;\n                }\n                $key = $row['id_hook'] . '-' . $row['id_module'];\n                if (!isset($exceptions_cache[$key])) {\n                    $exceptions_cache[$key] = array();\n                }\n                if (!isset($exceptions_cache[$key][$row['id_shop']])) {\n                    $exceptions_cache[$key][$row['id_shop']] = array();\n                }\n                $exceptions_cache[$key][$row['id_shop']][] = $row['file_name'];\n            }\n            Cache::store($cache_id, $exceptions_cache);\n        } else {\n            $exceptions_cache = Cache::retrieve($cache_id);\n        }\n\n        $key = $id_hook . '-' . $id_module;\n        $array_return = array();\n        if ($dispatch) {\n            foreach (Shop::getContextListShopID() as $shop_id) {\n                if (isset($exceptions_cache[$key], $exceptions_cache[$key][$shop_id])) {\n                    $array_return[$shop_id] = $exceptions_cache[$key][$shop_id];\n                }\n            }\n        } else {\n            foreach (Shop::getContextListShopID() as $shop_id) {\n                if (isset($exceptions_cache[$key], $exceptions_cache[$key][$shop_id])) {\n                    foreach ($exceptions_cache[$key][$shop_id] as $file) {\n                        if (!in_array($file, $array_return)) {\n                            $array_return[] = $file;\n                        }\n                    }\n                }\n            }\n        }\n\n        return $array_return;\n    }\n\n    /**\n     * Return exceptions for module in hook\n     *\n     * @param int $id_hook Hook ID\n     *\n     * @return array Exceptions\n     */\n    public function getExceptions($id_hook, $dispatch = false)\n    {\n        return Module::getExceptionsStatic($this->id, $id_hook, $dispatch);\n    }\n\n    /**\n     * @param string $module_name\n     *\n     * @return bool\n     *\n     * @deprecated since 1.7\n     * @see  PrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleManager->isInstalled($name)\n     */\n    public static function isInstalled($module_name)\n    {\n        if (!Cache::isStored('Module::isInstalled' . $module_name)) {\n            $id_module = Module::getModuleIdByName($module_name);\n            Cache::store('Module::isInstalled' . $module_name, (bool) $id_module);\n\n            return (bool) $id_module;\n        }\n\n        return Cache::retrieve('Module::isInstalled' . $module_name);\n    }\n\n    public function isEnabledForShopContext()\n    {\n        return (bool) Db::getInstance()->getValue(\n            'SELECT id_module\n            FROM `' . _DB_PREFIX_ . 'module_shop`\n            WHERE id_module=' . (int) $this->id . ' AND id_shop IN (' . implode(',', array_map('intval', Shop::getContextListShopID())) . ')\n            GROUP BY id_module\n            HAVING COUNT(*)=' . (int) count(Shop::getContextListShopID())\n        );\n    }\n\n    public static function isEnabled($module_name)\n    {\n        if (!Cache::isStored('Module::isEnabled' . $module_name)) {\n            $active = false;\n            $id_module = Module::getModuleIdByName($module_name);\n            if (Db::getInstance()->getValue('SELECT `id_module` FROM `' . _DB_PREFIX_ . 'module_shop` WHERE `id_module` = ' . (int) $id_module . ' AND `id_shop` = ' . (int) Context::getContext()->shop->id)) {\n                $active = true;\n            }\n            Cache::store('Module::isEnabled' . $module_name, (bool) $active);\n\n            return (bool) $active;\n        }\n\n        return Cache::retrieve('Module::isEnabled' . $module_name);\n    }\n\n    public function isRegisteredInHook($hook)\n    {\n        if (!$this->id) {\n            return false;\n        }\n\n        $sql = 'SELECT COUNT(*)\n            FROM `' . _DB_PREFIX_ . 'hook_module` hm\n            LEFT JOIN `' . _DB_PREFIX_ . 'hook` h ON (h.`id_hook` = hm.`id_hook`)\n            WHERE h.`name` = \\'' . pSQL($hook) . '\\' AND hm.`id_module` = ' . (int) $this->id;\n\n        return Db::getInstance()->getValue($sql);\n    }\n\n    /**\n     * Template management (display, overload, cache).\n     */\n    protected static function _isTemplateOverloadedStatic($module_name, $template)\n    {\n        if (Tools::file_exists_cache(_PS_THEME_DIR_ . 'modules/' . $module_name . '/' . $template)) {\n            return _PS_THEME_DIR_ . 'modules/' . $module_name . '/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/hook/' . $template)) {\n            return _PS_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/hook/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/front/' . $template)) {\n            return _PS_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/front/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_PARENT_THEME_DIR_ . 'modules/' . $module_name . '/' . $template)) {\n            return _PS_PARENT_THEME_DIR_ . 'modules/' . $module_name . '/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_PARENT_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/hook/' . $template)) {\n            return _PS_PARENT_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/hook/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_PARENT_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/front/' . $template)) {\n            return _PS_PARENT_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/front/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_MODULE_DIR_ . $module_name . '/views/templates/hook/' . $template)) {\n            return false;\n        } elseif (Tools::file_exists_cache(_PS_MODULE_DIR_ . $module_name . '/views/templates/front/' . $template)) {\n            return false;\n        } elseif (Tools::file_exists_cache(_PS_MODULE_DIR_ . $module_name . '/' . $template)) {\n            return false;\n        }\n\n        return null;\n    }\n\n    protected function _isTemplateOverloaded($template)\n    {\n        return Module::_isTemplateOverloadedStatic($this->name, $template);\n    }\n\n    protected function getCacheId($name = null)\n    {\n        $cache_array = array();\n        $cache_array[] = $name !== null ? $name : $this->name;\n        if (Configuration::get('PS_SSL_ENABLED')) {\n            $cache_array[] = (int) Tools::usingSecureMode();\n        }\n        if (Shop::isFeatureActive()) {\n            $cache_array[] = (int) $this->context->shop->id;\n        }\n        if (Group::isFeatureActive() && isset($this->context->customer)) {\n            $cache_array[] = (int) Group::getCurrent()->id;\n            $cache_array[] = implode('_', Customer::getGroupsStatic($this->context->customer->id));\n        }\n        if (Language::isMultiLanguageActivated()) {\n            $cache_array[] = (int) $this->context->language->id;\n        }\n        if (Currency::isMultiCurrencyActivated()) {\n            $cache_array[] = (int) $this->context->currency->id;\n        }\n        $cache_array[] = (int) $this->context->country->id;\n\n        return implode('|', $cache_array);\n    }\n\n    public function display($file, $template, $cache_id = null, $compile_id = null)\n    {\n        if (($overloaded = Module::_isTemplateOverloadedStatic(basename($file, '.php'), $template)) === null) {\n            return Context::getContext()->getTranslator()->trans('No template found for module', array(), 'Admin.Modules.Notification') . ' ' . basename($file, '.php') . (_PS_MODE_DEV_ ? ' (' . $template . ')' : '');\n        } else {\n            $this->smarty->assign(array(\n                'module_dir' => __PS_BASE_URI__ . 'modules/' . basename($file, '.php') . '/',\n                'module_template_dir' => ($overloaded ? _THEME_DIR_ : __PS_BASE_URI__) . 'modules/' . basename($file, '.php') . '/',\n                'allow_push' => $this->allow_push,\n            ));\n\n            if ($cache_id !== null) {\n                Tools::enableCache();\n            }\n\n            $result = $this->getCurrentSubTemplate($template, $cache_id, $compile_id)->fetch();\n\n            if ($cache_id !== null) {\n                Tools::restoreCacheSettings();\n            }\n\n            $this->resetCurrentSubTemplate($template, $cache_id, $compile_id);\n\n            return $result;\n        }\n    }\n\n    /**\n     * Use this method to return the result of a smarty template when assign data only locally with $this->smarty->assign().\n     *\n     * @param string $templatePath relative path the template file, from the module root dir\n     * @param null $cache_id\n     * @param null $compile_id\n     *\n     * @return mixed\n     */\n    public function fetch($templatePath, $cache_id = null, $compile_id = null)\n    {\n        if ($cache_id !== null) {\n            Tools::enableCache();\n        }\n\n        $template = $this->context->smarty->createTemplate(\n            $templatePath,\n            $cache_id,\n            $compile_id,\n            $this->smarty\n        );\n\n        if ($cache_id !== null) {\n            Tools::restoreCacheSettings();\n        }\n\n        return $template->fetch();\n    }\n\n    /**\n     * @param string $template\n     * @param string|null $cache_id\n     * @param string|null $compile_id\n     *\n     * @return Smarty_Internal_Template\n     */\n    protected function getCurrentSubTemplate($template, $cache_id = null, $compile_id = null)\n    {\n        if (!isset($this->current_subtemplate[$template . '_' . $cache_id . '_' . $compile_id])) {\n            if (false === strpos($template, 'module:') &&\n                !file_exists(_PS_ROOT_DIR_ . '/' . $template) &&\n                !file_exists($template)\n            ) {\n                $template = $this->getTemplatePath($template);\n            }\n\n            $this->current_subtemplate[$template . '_' . $cache_id . '_' . $compile_id] = $this->context->smarty->createTemplate(\n                $template,\n                $cache_id,\n                $compile_id,\n                $this->smarty\n            );\n        }\n\n        return $this->current_subtemplate[$template . '_' . $cache_id . '_' . $compile_id];\n    }\n\n    protected function resetCurrentSubTemplate($template, $cache_id, $compile_id)\n    {\n        $this->current_subtemplate[$template . '_' . $cache_id . '_' . $compile_id] = null;\n    }\n\n    /**\n     * Get realpath of a template of current module (check if template is overriden too).\n     *\n     * @since 1.5.0\n     *\n     * @param string $template\n     *\n     * @return string\n     */\n    public function getTemplatePath($template)\n    {\n        $overloaded = $this->_isTemplateOverloaded($template);\n        if ($overloaded === null) {\n            return null;\n        }\n\n        if ($overloaded) {\n            return $overloaded;\n        } elseif (Tools::file_exists_cache(_PS_MODULE_DIR_ . $this->name . '/views/templates/hook/' . $template)) {\n            return _PS_MODULE_DIR_ . $this->name . '/views/templates/hook/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_MODULE_DIR_ . $this->name . '/views/templates/front/' . $template)) {\n            return _PS_MODULE_DIR_ . $this->name . '/views/templates/front/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_MODULE_DIR_ . $this->name . '/' . $template)) {\n            return _PS_MODULE_DIR_ . $this->name . '/' . $template;\n        } else {\n            return null;\n        }\n    }\n\n    public function isCached($template, $cache_id = null, $compile_id = null)\n    {\n        Tools::enableCache();\n        if (false === strpos($template, 'module:') && !file_exists(_PS_ROOT_DIR_ . '/' . $template)) {\n            $template = $this->getTemplatePath($template);\n        }\n\n        $is_cached = $this->getCurrentSubTemplate($template, $cache_id, $compile_id)->isCached($template, $cache_id, $compile_id);\n        Tools::restoreCacheSettings();\n\n        return $is_cached;\n    }\n\n    /**\n     * Clear template cache.\n     *\n     * @param string $template Template name\n     * @param int null $cache_id\n     * @param int null $compile_id\n     *\n     * @return int Number of template cleared\n     */\n    protected function _clearCache($template, $cache_id = null, $compile_id = null)\n    {\n        static $ps_smarty_clear_cache = null;\n        if ($ps_smarty_clear_cache === null) {\n            $ps_smarty_clear_cache = Configuration::get('PS_SMARTY_CLEAR_CACHE');\n        }\n\n        if (self::$_batch_mode) {\n            if ($ps_smarty_clear_cache == 'never') {\n                return 0;\n            }\n\n            if ($cache_id === null) {\n                $cache_id = $this->name;\n            }\n\n            $key = $template . '-' . $cache_id . '-' . $compile_id;\n            if (!isset(self::$_defered_clearCache[$key])) {\n                self::$_defered_clearCache[$key] = array($this->getTemplatePath($template), $cache_id, $compile_id);\n            }\n        } else {\n            if ($ps_smarty_clear_cache == 'never') {\n                return 0;\n            }\n\n            if ($cache_id === null) {\n                $cache_id = $this->name;\n            }\n\n            Tools::enableCache();\n            $number_of_template_cleared = Tools::clearCache(Context::getContext()->smarty, $this->getTemplatePath($template), $cache_id, $compile_id);\n            Tools::restoreCacheSettings();\n\n            return $number_of_template_cleared;\n        }\n    }\n\n    /**\n     * Clear defered template cache.\n     *\n     * @param string $template_path Template path\n     * @param int null $cache_id\n     * @param int null $compile_id\n     *\n     * @return int Number of template cleared\n     */\n    public static function _deferedClearCache($template_path, $cache_id, $compile_id)\n    {\n        Tools::enableCache();\n        $number_of_template_cleared = Tools::clearCache(Context::getContext()->smarty, $template_path, $cache_id, $compile_id);\n        Tools::restoreCacheSettings();\n\n        return $number_of_template_cleared;\n    }\n\n    protected function _generateConfigXml()\n    {\n        $author_uri = '';\n        if (isset($this->author_uri) && $this->author_uri) {\n            $author_uri = '<author_uri><![CDATA[' . Tools::htmlentitiesUTF8($this->author_uri) . ']]></author_uri>';\n        }\n\n        $xml = '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<module>\n    <name>' . $this->name . '</name>\n    <displayName><![CDATA[' . str_replace('&amp;', '&', Tools::htmlentitiesUTF8($this->displayName)) . ']]></displayName>\n    <version><![CDATA[' . $this->version . ']]></version>\n    <description><![CDATA[' . str_replace('&amp;', '&', Tools::htmlentitiesUTF8($this->description)) . ']]></description>\n    <author><![CDATA[' . str_replace('&amp;', '&', Tools::htmlentitiesUTF8($this->author)) . ']]></author>'\n        . $author_uri . '\n    <tab><![CDATA[' . Tools::htmlentitiesUTF8($this->tab) . ']]></tab>' . (isset($this->confirmUninstall) ? \"\\n\\t\" . '<confirmUninstall><![CDATA[' . $this->confirmUninstall . ']]></confirmUninstall>' : '') . '\n    <is_configurable>' . (isset($this->is_configurable) ? (int) $this->is_configurable : 0) . '</is_configurable>\n    <need_instance>' . (int) $this->need_instance . '</need_instance>' . (isset($this->limited_countries) ? \"\\n\\t\" . '<limited_countries>' . (count($this->limited_countries) == 1 ? $this->limited_countries[0] : '') . '</limited_countries>' : '') . '\n</module>';\n        if (is_writable(_PS_MODULE_DIR_ . $this->name . '/')) {\n            $iso = substr(Context::getContext()->language->iso_code, 0, 2);\n            $file = _PS_MODULE_DIR_ . $this->name . '/' . ($iso == 'en' ? 'config.xml' : 'config_' . $iso . '.xml');\n            if (!@file_put_contents($file, $xml)) {\n                if (!is_writable($file)) {\n                    @unlink($file);\n                    @file_put_contents($file, $xml);\n                }\n            }\n            @chmod($file, 0664);\n        }\n    }\n\n    /**\n     * Check if the module is transplantable on the hook in parameter.\n     *\n     * @param string $hook_name\n     *\n     * @return bool if module can be transplanted on hook\n     */\n    public function isHookableOn($hook_name)\n    {\n        if ($this instanceof WidgetInterface) {\n            return Hook::isDisplayHookName($hook_name);\n        }\n\n        $retro_hook_name = Hook::getRetroHookName($hook_name);\n\n        return is_callable(array($this, 'hook' . ucfirst($hook_name))) || is_callable(array($this, 'hook' . ucfirst($retro_hook_name)));\n    }\n\n    /**\n     * @param int $idProfile\n     *\n     * @return array\n     */\n    public static function getModulesAccessesByIdProfile($idProfile)\n    {\n        if (empty(self::$cache_modules_roles)) {\n            self::warmupRolesCache();\n        }\n\n        $roles = self::$cache_lgc_access;\n\n        $profileRoles = Db::getInstance()->executeS('\n            SELECT `slug`,\n                `slug` LIKE \"%CREATE\" as \"add\",\n                `slug` LIKE \"%READ\" as \"view\",\n                `slug` LIKE \"%UPDATE\" as \"configure\",\n                `slug` LIKE \"%DELETE\" as \"uninstall\"\n            FROM `' . _DB_PREFIX_ . 'authorization_role` a\n            LEFT JOIN `' . _DB_PREFIX_ . 'module_access` j ON j.id_authorization_role = a.id_authorization_role\n            WHERE `slug` LIKE \"ROLE_MOD_MODULE_%\"\n            AND j.id_profile = \"' . (int) $idProfile . '\"\n            ORDER BY a.slug\n        ');\n\n        foreach ($profileRoles as $role) {\n            preg_match(\n                '/ROLE_MOD_MODULE_(?P<moduleName>[A-Z0-9_]+)_(?P<auth>[A-Z]+)/',\n                $role['slug'],\n                $matches\n            );\n\n            if (($key = array_search('1', $role))) {\n                $roles[$matches['moduleName']][$key] = '1';\n            }\n        }\n\n        return $roles;\n    }\n\n    private static function warmupRolesCache()\n    {\n        $result = Db::getInstance()->executeS('\n            SELECT `slug`,\n                `slug` LIKE \"%CREATE\" as \"add\",\n                `slug` LIKE \"%READ\" as \"view\",\n                `slug` LIKE \"%UPDATE\" as \"configure\",\n                `slug` LIKE \"%DELETE\" as \"uninstall\"\n            FROM `' . _DB_PREFIX_ . 'authorization_role` a\n            WHERE `slug` LIKE \"ROLE_MOD_MODULE_%\"\n            ORDER BY a.slug\n        ');\n\n        foreach ($result as $row) {\n            preg_match(\n                '/ROLE_MOD_MODULE_(?P<moduleName>[A-Z0-9_]+)_(?P<auth>[A-Z]+)/',\n                $row['slug'],\n                $matches\n            );\n\n            $m = Module::getInstanceByName(strtolower($matches['moduleName']));\n\n            // the following condition handles invalid modules\n            if ($m && !isset(self::$cache_lgc_access[$matches['moduleName']])) {\n                self::$cache_lgc_access[$matches['moduleName']] = array();\n                self::$cache_lgc_access[$matches['moduleName']]['id_module'] = $m->id;\n                self::$cache_lgc_access[$matches['moduleName']]['name'] = $m->displayName;\n                self::$cache_lgc_access[$matches['moduleName']]['add'] = '0';\n                self::$cache_lgc_access[$matches['moduleName']]['view'] = '0';\n                self::$cache_lgc_access[$matches['moduleName']]['configure'] = '0';\n                self::$cache_lgc_access[$matches['moduleName']]['uninstall'] = '0';\n            }\n        }\n    }\n\n    /**\n     * Check employee permission for module.\n     *\n     * @param array $variable (action)\n     * @param object $employee\n     *\n     * @return bool if module can be transplanted on hook\n     */\n    public function getPermission($variable, $employee = null)\n    {\n        return Module::getPermissionStatic($this->id, $variable, $employee);\n    }\n\n    /**\n     * Check employee permission for module (static method).\n     *\n     * @param int $id_module\n     * @param array $variable (action)\n     * @param object $employee\n     *\n     * @return bool if module can be transplanted on hook\n     */\n    public static function getPermissionStatic($id_module, $variable, $employee = null)\n    {\n        if (!in_array($variable, array('view', 'configure', 'uninstall'))) {\n            return false;\n        }\n\n        if (!$employee) {\n            $employee = Context::getContext()->employee;\n        }\n\n        if ($employee->id_profile == _PS_ADMIN_PROFILE_) {\n            return true;\n        }\n\n        $slug = Access::findSlugByIdModule($id_module) . Access::getAuthorizationFromLegacy($variable);\n\n        return Access::isGranted($slug, $employee->id_profile);\n    }\n\n    /**\n     * Get authorized modules for a client group.\n     *\n     * @param int $group_id\n     *\n     * @return array|null\n     */\n    public static function getAuthorizedModules($group_id, $shops = array(1))\n    {\n        return Db::getInstance()->executeS(\n            'SELECT m.`id_module`, m.`name` FROM `' . _DB_PREFIX_ . 'module_group` mg\n            LEFT JOIN `' . _DB_PREFIX_ . 'module` m ON (m.`id_module` = mg.`id_module`)\n            WHERE mg.`id_group` = ' . (int) $group_id . '\n            AND `id_shop` IN ('\n                . (implode(',', array_map('intval', $shops)))\n            . ')'\n        );\n    }\n\n    /**\n     * Get ID module by name.\n     *\n     * @param string $name\n     *\n     * @return int Module ID\n     */\n    public static function getModuleIdByName($name)\n    {\n        $cache_id = 'Module::getModuleIdByName_' . pSQL($name);\n        if (!Cache::isStored($cache_id)) {\n            $result = (int) Db::getInstance()->getValue('SELECT `id_module` FROM `' . _DB_PREFIX_ . 'module` WHERE `name` = \"' . pSQL($name) . '\"');\n            Cache::store($cache_id, $result);\n\n            return $result;\n        }\n\n        return Cache::retrieve($cache_id);\n    }\n\n    /**\n     * Get module errors.\n     *\n     * @since 1.5.0\n     *\n     * @return array errors\n     */\n    public function getErrors()\n    {\n        return $this->_errors;\n    }\n\n    /**\n     * Get module messages confirmation.\n     *\n     * @since 1.5.0\n     *\n     * @return array conf\n     */\n    public function getConfirmations()\n    {\n        return $this->_confirmations;\n    }\n\n    /**\n     * Get local path for module.\n     *\n     * @since 1.5.0\n     *\n     * @return string\n     */\n    public function getLocalPath()\n    {\n        return $this->local_path;\n    }\n\n    /**\n     * Get uri path for module.\n     *\n     * @since 1.5.0\n     *\n     * @return string\n     */\n    public function getPathUri()\n    {\n        return $this->_path;\n    }\n\n    /**\n     * Return module position for a given hook\n     *\n     * @param bool $id_hook Hook ID\n     *\n     * @return int position\n     */\n    public function getPosition($id_hook)\n    {\n        if (isset(Hook::$preloadModulesFromHooks)) {\n            if (isset(Hook::$preloadModulesFromHooks[$id_hook])) {\n                if (isset(Hook::$preloadModulesFromHooks[$id_hook]['module_position'][$this->id])) {\n                    return Hook::$preloadModulesFromHooks[$id_hook]['module_position'][$this->id];\n                } else {\n                    return 0;\n                }\n            }\n        }\n        $result = Db::getInstance()->getRow('\n            SELECT `position`\n            FROM `' . _DB_PREFIX_ . 'hook_module`\n            WHERE `id_hook` = ' . (int) $id_hook . '\n            AND `id_module` = ' . (int) $this->id . '\n            AND `id_shop` = ' . (int) Context::getContext()->shop->id);\n\n        return $result['position'];\n    }\n\n    /**\n     * Getter for $tabs attribute.\n     *\n     * @return array\n     */\n    public function getTabs()\n    {\n        return $this->tabs;\n    }\n\n    /**\n     * add a warning message to display at the top of the admin page.\n     *\n     * @param string $msg\n     */\n    public function adminDisplayWarning($msg)\n    {\n        if (!($this->context->controller instanceof AdminController)) {\n            return false;\n        }\n        $this->context->controller->warnings[] = $msg;\n    }\n\n    /**\n     * add a info message to display at the top of the admin page.\n     *\n     * @param string $msg\n     */\n    protected function adminDisplayInformation($msg)\n    {\n        if (!($this->context->controller instanceof AdminController)) {\n            return false;\n        }\n        $this->context->controller->informations[] = $msg;\n    }\n\n    /**\n     * Install module's controllers using public property $controllers.\n     *\n     * @return bool\n     */\n    protected function installControllers()\n    {\n        foreach ($this->controllers as $controller) {\n            $page = 'module-' . $this->name . '-' . $controller;\n            $result = Db::getInstance()->getValue('SELECT * FROM ' . _DB_PREFIX_ . 'meta WHERE page=\"' . pSQL($page) . '\"');\n            if ((int) $result > 0) {\n                continue;\n            }\n\n            $meta = new Meta();\n            $meta->page = $page;\n            $meta->configurable = 1;\n            $meta->save();\n        }\n\n        return true;\n    }\n\n    /**\n     * Install overrides files for the module.\n     *\n     * @return bool\n     */\n    public function installOverrides()\n    {\n        if (!is_dir($this->getLocalPath() . 'override')) {\n            return true;\n        }\n\n        $result = true;\n        foreach (Tools::scandir($this->getLocalPath() . 'override', 'php', '', true) as $file) {\n            $class = basename($file, '.php');\n            if (PrestaShopAutoload::getInstance()->getClassPath($class . 'Core') || Module::getModuleIdByName($class)) {\n                $result &= $this->addOverride($class);\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Uninstall overrides files for the module.\n     *\n     * @return bool\n     */\n    public function uninstallOverrides()\n    {\n        if (!is_dir($this->getLocalPath() . 'override')) {\n            return true;\n        }\n\n        $result = true;\n        foreach (Tools::scandir($this->getLocalPath() . 'override', 'php', '', true) as $file) {\n            $class = basename($file, '.php');\n            if (PrestaShopAutoload::getInstance()->getClassPath($class . 'Core') || Module::getModuleIdByName($class)) {\n                $result &= $this->removeOverride($class);\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Add all methods in a module override to the override class.\n     *\n     * @param string $classname\n     *\n     * @return bool\n     */\n    public function addOverride($classname)\n    {\n        $orig_path = $path = PrestaShopAutoload::getInstance()->getClassPath($classname . 'Core');\n        if (!$path) {\n            $path = 'modules' . DIRECTORY_SEPARATOR . $classname . DIRECTORY_SEPARATOR . $classname . '.php';\n        }\n        $path_override = $this->getLocalPath() . 'override' . DIRECTORY_SEPARATOR . $path;\n\n        if (!file_exists($path_override)) {\n            return false;\n        } else {\n            file_put_contents($path_override, preg_replace('#(\\r\\n|\\r)#ism', \"\\n\", file_get_contents($path_override)));\n        }\n\n        $pattern_escape_com = '#(^\\s*?\\/\\/.*?\\n|\\/\\*(?!\\n\\s+\\* module:.*?\\* date:.*?\\* version:.*?\\*\\/).*?\\*\\/)#ism';\n        // Check if there is already an override file, if not, we just need to copy the file\n        if ($file = PrestaShopAutoload::getInstance()->getClassPath($classname)) {\n            // Check if override file is writable\n            $override_path = _PS_ROOT_DIR_ . '/' . $file;\n\n            if ((!file_exists($override_path) && !is_writable(dirname($override_path))) || (file_exists($override_path) && !is_writable($override_path))) {\n                throw new Exception(Context::getContext()->getTranslator()->trans('file (%s) not writable', array($override_path), 'Admin.Notifications.Error'));\n            }\n\n            // Get a uniq id for the class, because you can override a class (or remove the override) twice in the same session and we need to avoid redeclaration\n            do {\n                $uniq = uniqid();\n            } while (class_exists($classname . 'OverrideOriginal_remove', false));\n\n            // Make a reflection of the override class and the module override class\n            $override_file = file($override_path);\n            $override_file = array_diff($override_file, array(\"\\n\"));\n            eval(preg_replace(array('#^\\s*<\\?(?:php)?#', '#class\\s+' . $classname . '\\s+extends\\s+([a-z0-9_]+)(\\s+implements\\s+([a-z0-9_]+))?#i'), array(' ', 'class ' . $classname . 'OverrideOriginal' . $uniq), implode('', $override_file)));\n            $override_class = new ReflectionClass($classname . 'OverrideOriginal' . $uniq);\n\n            $module_file = file($path_override);\n            $module_file = array_diff($module_file, array(\"\\n\"));\n            eval(preg_replace(array('#^\\s*<\\?(?:php)?#', '#class\\s+' . $classname . '(\\s+extends\\s+([a-z0-9_]+)(\\s+implements\\s+([a-z0-9_]+))?)?#i'), array(' ', 'class ' . $classname . 'Override' . $uniq), implode('', $module_file)));\n            $module_class = new ReflectionClass($classname . 'Override' . $uniq);\n\n            // Check if none of the methods already exists in the override class\n            foreach ($module_class->getMethods() as $method) {\n                if ($override_class->hasMethod($method->getName())) {\n                    $method_override = $override_class->getMethod($method->getName());\n                    if (preg_match('/module: (.*)/ism', $override_file[$method_override->getStartLine() - 5], $name) && preg_match('/date: (.*)/ism', $override_file[$method_override->getStartLine() - 4], $date) && preg_match('/version: ([0-9.]+)/ism', $override_file[$method_override->getStartLine() - 3], $version)) {\n                        throw new Exception(Context::getContext()->getTranslator()->trans('The method %1$s in the class %2$s is already overridden by the module %3$s version %4$s at %5$s.', array($method->getName(), $classname, $name[1], $version[1], $date[1]), 'Admin.Modules.Notification'));\n                    }\n\n                    throw new Exception(Context::getContext()->getTranslator()->trans('The method %1$s in the class %2$s is already overridden.', array($method->getName(), $classname), 'Admin.Modules.Notification'));\n                }\n\n                $module_file = preg_replace('/((:?public|private|protected)\\s+(static\\s+)?function\\s+(?:\\b' . $method->getName() . '\\b))/ism', \"/*\\n    * module: \" . $this->name . \"\\n    * date: \" . date('Y-m-d H:i:s') . \"\\n    * version: \" . $this->version . \"\\n    */\\n    $1\", $module_file);\n                if ($module_file === null) {\n                    throw new Exception(Context::getContext()->getTranslator()->trans('Failed to override method %1$s in class %2$s.', array($method->getName(), $classname), 'Admin.Modules.Notification'));\n                }\n            }\n\n            // Check if none of the properties already exists in the override class\n            foreach ($module_class->getProperties() as $property) {\n                if ($override_class->hasProperty($property->getName())) {\n                    throw new Exception(Context::getContext()->getTranslator()->trans('The property %1$s in the class %2$s is already defined.', array($property->getName(), $classname), 'Admin.Modules.Notification'));\n                }\n\n                $module_file = preg_replace('/((?:public|private|protected)\\s)\\s*(static\\s)?\\s*(\\$\\b' . $property->getName() . '\\b)/ism', \"/*\\n    * module: \" . $this->name . \"\\n    * date: \" . date('Y-m-d H:i:s') . \"\\n    * version: \" . $this->version . \"\\n    */\\n    $1$2$3\", $module_file);\n                if ($module_file === null) {\n                    throw new Exception(Context::getContext()->getTranslator()->trans('Failed to override property %1$s in class %2$s.', array($property->getName(), $classname), 'Admin.Modules.Notification'));\n                }\n            }\n\n            foreach ($module_class->getConstants() as $constant => $value) {\n                if ($override_class->hasConstant($constant)) {\n                    throw new Exception(Context::getContext()->getTranslator()->trans('The constant %1$s in the class %2$s is already defined.', array($constant, $classname), 'Admin.Modules.Notification'));\n                }\n\n                $module_file = preg_replace('/(const\\s)\\s*(\\b' . $constant . '\\b)/ism', \"/*\\n    * module: \" . $this->name . \"\\n    * date: \" . date('Y-m-d H:i:s') . \"\\n    * version: \" . $this->version . \"\\n    */\\n    $1$2\", $module_file);\n                if ($module_file === null) {\n                    throw new Exception(Context::getContext()->getTranslator()->trans('Failed to override constant %1$s in class %2$s.', array($constant, $classname), 'Admin.Modules.Notification'));\n                }\n            }\n\n            // Insert the methods from module override in override\n            $copy_from = array_slice($module_file, $module_class->getStartLine() + 1, $module_class->getEndLine() - $module_class->getStartLine() - 2);\n            array_splice($override_file, $override_class->getEndLine() - 1, 0, $copy_from);\n            $code = implode('', $override_file);\n\n            file_put_contents($override_path, preg_replace($pattern_escape_com, '', $code));\n        } else {\n            $override_src = $path_override;\n\n            $override_dest = _PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . 'override' . DIRECTORY_SEPARATOR . $path;\n            $dir_name = dirname($override_dest);\n\n            if (!$orig_path && !is_dir($dir_name)) {\n                @mkdir($dir_name, FileSystem::DEFAULT_MODE_FOLDER);\n            }\n\n            if (!is_writable($dir_name)) {\n                throw new Exception(Context::getContext()->getTranslator()->trans('directory (%s) not writable', array($dir_name), 'Admin.Notifications.Error'));\n            }\n            $module_file = file($override_src);\n            $module_file = array_diff($module_file, array(\"\\n\"));\n\n            if ($orig_path) {\n                do {\n                    $uniq = uniqid();\n                } while (class_exists($classname . 'OverrideOriginal_remove', false));\n                eval(preg_replace(array('#^\\s*<\\?(?:php)?#', '#class\\s+' . $classname . '(\\s+extends\\s+([a-z0-9_]+)(\\s+implements\\s+([a-z0-9_]+))?)?#i'), array(' ', 'class ' . $classname . 'Override' . $uniq), implode('', $module_file)));\n                $module_class = new ReflectionClass($classname . 'Override' . $uniq);\n\n                // For each method found in the override, prepend a comment with the module name and version\n                foreach ($module_class->getMethods() as $method) {\n                    $module_file = preg_replace('/((:?public|private|protected)\\s+(static\\s+)?function\\s+(?:\\b' . $method->getName() . '\\b))/ism', \"/*\\n    * module: \" . $this->name . \"\\n    * date: \" . date('Y-m-d H:i:s') . \"\\n    * version: \" . $this->version . \"\\n    */\\n    $1\", $module_file);\n                    if ($module_file === null) {\n                        throw new Exception(Context::getContext()->getTranslator()->trans('Failed to override method %1$s in class %2$s.', array($method->getName(), $classname), 'Admin.Modules.Notification'));\n                    }\n                }\n\n                // Same loop for properties\n                foreach ($module_class->getProperties() as $property) {\n                    $module_file = preg_replace('/((?:public|private|protected)\\s)\\s*(static\\s)?\\s*(\\$\\b' . $property->getName() . '\\b)/ism', \"/*\\n    * module: \" . $this->name . \"\\n    * date: \" . date('Y-m-d H:i:s') . \"\\n    * version: \" . $this->version . \"\\n    */\\n    $1$2$3\", $module_file);\n                    if ($module_file === null) {\n                        throw new Exception(Context::getContext()->getTranslator()->trans('Failed to override property %1$s in class %2$s.', array($property->getName(), $classname), 'Admin.Modules.Notification'));\n                    }\n                }\n\n                // Same loop for constants\n                foreach ($module_class->getConstants() as $constant => $value) {\n                    $module_file = preg_replace('/(const\\s)\\s*(\\b' . $constant . '\\b)/ism', \"/*\\n    * module: \" . $this->name . \"\\n    * date: \" . date('Y-m-d H:i:s') . \"\\n    * version: \" . $this->version . \"\\n    */\\n    $1$2\", $module_file);\n                    if ($module_file === null) {\n                        throw new Exception(Context::getContext()->getTranslator()->trans('Failed to override constant %1$s in class %2$s.', array($constant, $classname), 'Admin.Modules.Notification'));\n                    }\n                }\n            }\n\n            file_put_contents($override_dest, preg_replace($pattern_escape_com, '', $module_file));\n\n            // Re-generate the class index\n            Tools::generateIndex();\n        }\n\n        return true;\n    }\n\n    /**\n     * Remove all methods in a module override from the override class.\n     *\n     * @param string $classname\n     *\n     * @return bool\n     */\n    public function removeOverride($classname)\n    {\n        $orig_path = $path = PrestaShopAutoload::getInstance()->getClassPath($classname . 'Core');\n\n        if ($orig_path && !$file = PrestaShopAutoload::getInstance()->getClassPath($classname)) {\n            return true;\n        } elseif (!$orig_path && Module::getModuleIdByName($classname)) {\n            $path = 'modules' . DIRECTORY_SEPARATOR . $classname . DIRECTORY_SEPARATOR . $classname . '.php';\n        }\n\n        // Check if override file is writable\n        if ($orig_path) {\n            $override_path = _PS_ROOT_DIR_ . '/' . $file;\n        } else {\n            $override_path = _PS_OVERRIDE_DIR_ . $path;\n        }\n\n        if (!is_file($override_path)) {\n            return true;\n        }\n\n        if (!is_writable($override_path)) {\n            return false;\n        }\n\n        file_put_contents($override_path, preg_replace('#(\\r\\n|\\r)#ism', \"\\n\", file_get_contents($override_path)));\n\n        if ($orig_path) {\n            // Get a uniq id for the class, because you can override a class (or remove the override) twice in the same session and we need to avoid redeclaration\n            do {\n                $uniq = uniqid();\n            } while (class_exists($classname . 'OverrideOriginal_remove', false));\n\n            // Make a reflection of the override class and the module override class\n            $override_file = file($override_path);\n\n            eval(preg_replace(array('#^\\s*<\\?(?:php)?#', '#class\\s+' . $classname . '\\s+extends\\s+([a-z0-9_]+)(\\s+implements\\s+([a-z0-9_]+))?#i'), array(' ', 'class ' . $classname . 'OverrideOriginal_remove' . $uniq), implode('', $override_file)));\n            $override_class = new ReflectionClass($classname . 'OverrideOriginal_remove' . $uniq);\n\n            $module_file = file($this->getLocalPath() . 'override/' . $path);\n            eval(preg_replace(array('#^\\s*<\\?(?:php)?#', '#class\\s+' . $classname . '(\\s+extends\\s+([a-z0-9_]+)(\\s+implements\\s+([a-z0-9_]+))?)?#i'), array(' ', 'class ' . $classname . 'Override_remove' . $uniq), implode('', $module_file)));\n            $module_class = new ReflectionClass($classname . 'Override_remove' . $uniq);\n\n            // Remove methods from override file\n            foreach ($module_class->getMethods() as $method) {\n                if (!$override_class->hasMethod($method->getName())) {\n                    continue;\n                }\n\n                $method = $override_class->getMethod($method->getName());\n                $length = $method->getEndLine() - $method->getStartLine() + 1;\n\n                $module_method = $module_class->getMethod($method->getName());\n                $module_length = $module_method->getEndLine() - $module_method->getStartLine() + 1;\n\n                $override_file_orig = $override_file;\n\n                $orig_content = preg_replace('/\\s/', '', implode('', array_splice($override_file, $method->getStartLine() - 1, $length, array_pad(array(), $length, '#--remove--#'))));\n                $module_content = preg_replace('/\\s/', '', implode('', array_splice($module_file, $module_method->getStartLine() - 1, $length, array_pad(array(), $length, '#--remove--#'))));\n\n                $replace = true;\n                if (preg_match('/\\* module: (' . $this->name . ')/ism', $override_file[$method->getStartLine() - 5])) {\n                    $override_file[$method->getStartLine() - 6] = $override_file[$method->getStartLine() - 5] = $override_file[$method->getStartLine() - 4] = $override_file[$method->getStartLine() - 3] = $override_file[$method->getStartLine() - 2] = '#--remove--#';\n                    $replace = false;\n                }\n\n                if (md5($module_content) != md5($orig_content) && $replace) {\n                    $override_file = $override_file_orig;\n                }\n            }\n\n            // Remove properties from override file\n            foreach ($module_class->getProperties() as $property) {\n                if (!$override_class->hasProperty($property->getName())) {\n                    continue;\n                }\n\n                // Replace the declaration line by #--remove--#\n                foreach ($override_file as $line_number => &$line_content) {\n                    if (preg_match('/(public|private|protected)\\s+(static\\s+)?(\\$)?' . $property->getName() . '/i', $line_content)) {\n                        if (preg_match('/\\* module: (' . $this->name . ')/ism', $override_file[$line_number - 4])) {\n                            $override_file[$line_number - 5] = $override_file[$line_number - 4] = $override_file[$line_number - 3] = $override_file[$line_number - 2] = $override_file[$line_number - 1] = '#--remove--#';\n                        }\n                        $line_content = '#--remove--#';\n\n                        break;\n                    }\n                }\n            }\n\n            // Remove properties from override file\n            foreach ($module_class->getConstants() as $constant => $value) {\n                if (!$override_class->hasConstant($constant)) {\n                    continue;\n                }\n\n                // Replace the declaration line by #--remove--#\n                foreach ($override_file as $line_number => &$line_content) {\n                    if (preg_match('/(const)\\s+(static\\s+)?(\\$)?' . $constant . '/i', $line_content)) {\n                        if (preg_match('/\\* module: (' . $this->name . ')/ism', $override_file[$line_number - 4])) {\n                            $override_file[$line_number - 5] = $override_file[$line_number - 4] = $override_file[$line_number - 3] = $override_file[$line_number - 2] = $override_file[$line_number - 1] = '#--remove--#';\n                        }\n                        $line_content = '#--remove--#';\n\n                        break;\n                    }\n                }\n            }\n\n            $count = count($override_file);\n            for ($i = 0; $i < $count; ++$i) {\n                if (preg_match('/(^\\s*\\/\\/.*)/i', $override_file[$i])) {\n                    $override_file[$i] = '#--remove--#';\n                } elseif (preg_match('/(^\\s*\\/\\*)/i', $override_file[$i])) {\n                    if (!preg_match('/(^\\s*\\* module:)/i', $override_file[$i + 1])\n                        && !preg_match('/(^\\s*\\* date:)/i', $override_file[$i + 2])\n                        && !preg_match('/(^\\s*\\* version:)/i', $override_file[$i + 3])\n                        && !preg_match('/(^\\s*\\*\\/)/i', $override_file[$i + 4])) {\n                        for (; $override_file[$i] && !preg_match('/(.*?\\*\\/)/i', $override_file[$i]); ++$i) {\n                            $override_file[$i] = '#--remove--#';\n                        }\n                        $override_file[$i] = '#--remove--#';\n                    }\n                }\n            }\n\n            // Rewrite nice code\n            $code = '';\n            foreach ($override_file as $line) {\n                if ($line == '#--remove--#') {\n                    continue;\n                }\n\n                $code .= $line;\n            }\n\n            $to_delete = preg_match('/<\\?(?:php)?\\s+(?:abstract|interface)?\\s*?class\\s+' . $classname . '\\s+extends\\s+' . $classname . 'Core\\s*?[{]\\s*?[}]/ism', $code);\n        }\n\n        if (!isset($to_delete) || $to_delete) {\n            unlink($override_path);\n        } else {\n            file_put_contents($override_path, $code);\n        }\n\n        // Re-generate the class index\n        Tools::generateIndex();\n\n        return true;\n    }\n\n    private function getWidgetHooks()\n    {\n        $hooks = array_values(Hook::getHooks(false, true));\n        $registeredHookList = Hook::getHookModuleList();\n\n        foreach ($hooks as &$hook) {\n            $hook['registered'] = !empty($registeredHookList[$hook['id_hook']][$this->id]);\n        }\n\n        return $hooks;\n    }\n\n    /**\n     * Return the hooks list where this module can be hooked.\n     *\n     * @return array hooks list\n     */\n    public function getPossibleHooksList()\n    {\n        if ($this instanceof WidgetInterface) {\n            return $this->getWidgetHooks();\n        }\n\n        $hooks_list = Hook::getHooks();\n        $possible_hooks_list = array();\n        $registeredHookList = Hook::getHookModuleList();\n        foreach ($hooks_list as &$current_hook) {\n            $hook_name = $current_hook['name'];\n            $retro_hook_name = Hook::getRetroHookName($hook_name);\n\n            if (is_callable(array($this, 'hook' . ucfirst($hook_name))) || is_callable(array($this, 'hook' . ucfirst($retro_hook_name)))) {\n                $possible_hooks_list[] = array(\n                    'id_hook' => $current_hook['id_hook'],\n                    'name' => $hook_name,\n                    'description' => $current_hook['description'],\n                    'title' => $current_hook['title'],\n                    'registered' => !empty($registeredHookList[$current_hook['id_hook']][$this->id]),\n                );\n            }\n        }\n\n        return $possible_hooks_list;\n    }\n\n    /**\n     * Retrieve an array of the override in the module.\n     *\n     * @return array|null\n     */\n    public function getOverrides()\n    {\n        if (!is_dir($this->getLocalPath() . 'override')) {\n            return null;\n        }\n\n        $result = array();\n        foreach (Tools::scandir($this->getLocalPath() . 'override', 'php', '', true) as $file) {\n            $class = basename($file, '.php');\n            if (PrestaShopAutoload::getInstance()->getClassPath($class . 'Core') || Module::getModuleIdByName($class)) {\n                $result[] = $class;\n            }\n        }\n\n        return $result;\n    }\n\n    public function getTranslator()\n    {\n        return Context::getContext()->getTranslator();\n    }\n\n    protected function trans($id, array $parameters = array(), $domain = null, $locale = null)\n    {\n        $parameters['legacy'] = 'htmlspecialchars';\n\n        return $this->getTranslator()->trans($id, $parameters, $domain, $locale);\n    }\n\n    /**\n     * Check if the module uses the new translation system.\n     *\n     * @return bool\n     */\n    public function isUsingNewTranslationSystem()\n    {\n        $moduleName = $this->name;\n        $domains = array_keys($this->context->getTranslator()->getCatalogue()->all());\n        $moduleBaseDomain = DomainHelper::buildModuleBaseDomain($moduleName);\n        $length = strlen($moduleBaseDomain);\n\n        foreach ($domains as $domain) {\n            if (substr($domain, 0, $length) === $moduleBaseDomain) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if the module is executed in Admin Legacy context.\n     *\n     * To be removed - because useless - when the migration will be done.\n     *\n     * @return bool\n     */\n    public function isAdminLegacyContext()\n    {\n        return defined('ADMIN_LEGACY_CONTEXT');\n    }\n\n    /**\n     * Check if the module is executed in Symfony context.\n     *\n     * To be removed - because useless - when the migration will be done.\n     *\n     * @return bool\n     */\n    public function isSymfonyContext()\n    {\n        return !$this->isAdminLegacyContext() && defined('_PS_ADMIN_DIR_');\n    }\n\n    /**\n     * Access the Symfony Container if we are in Symfony Context.\n     * Note: in this case, we must get a container from SymfonyContainer class.\n     * Note: if not in Symfony context, fallback to legacy Container for FO/BO.\n     *\n     * @param string $serviceName\n     *\n     * @return object|false if a container is not available, it returns false\n     */\n    public function get($serviceName)\n    {\n        if ($this->isSymfonyContext()) {\n            if (null === $this->container) {\n                $this->container = SymfonyContainer::getInstance();\n            }\n\n            return $this->container->get($serviceName);\n        }\n\n        if ($this->context->controller instanceof Controller) {\n            return $this->context->controller->get($serviceName);\n        }\n\n        return false;\n    }\n}\n\nfunction ps_module_version_sort($a, $b)\n{\n    return version_compare($a['version'], $b['version']);\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse PrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleManagerBuilder;\n\nclass AdminDashboardControllerCore extends AdminController\n{\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->display = 'view';\n\n        parent::__construct();\n\n        if (Tools::isSubmit('profitability_conf') || Tools::isSubmit('submitOptionsconfiguration')) {\n            $this->fields_options = $this->getOptionFields();\n        }\n    }\n\n    public function setMedia($isNewTheme = false)\n    {\n        parent::setMedia($isNewTheme);\n\n        $this->addJqueryUI('ui.datepicker');\n        $this->addJS(array(\n            _PS_JS_DIR_ . 'vendor/d3.v3.min.js',\n            __PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/vendor/nv.d3.min.js',\n            _PS_JS_DIR_ . '/admin/dashboard.js',\n        ));\n        $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/css/vendor/nv.d3.css');\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        $this->page_header_toolbar_title = $this->trans('Dashboard', array(), 'Admin.Dashboard.Feature');\n        $this->page_header_toolbar_btn['switch_demo'] = array(\n            'desc' => $this->trans('Demo mode', array(), 'Admin.Dashboard.Feature'),\n            'icon' => 'process-icon-toggle-' . (Configuration::get('PS_DASHBOARD_SIMULATION') ? 'on' : 'off'),\n            'help' => $this->trans('This mode displays sample data so you can try your dashboard without real numbers.', array(), 'Admin.Dashboard.Help'),\n        );\n\n        parent::initPageHeaderToolbar();\n\n        // Remove the last element on this controller to match the title with the rule of the others\n        array_pop($this->meta_title);\n    }\n\n    protected function getOptionFields()\n    {\n        $forms = array();\n        $currency = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n        $carriers = Carrier::getCarriers((int) $this->context->language->id, true, false, false, null, Carrier::ALL_CARRIERS);\n        $modules = Module::getModulesOnDisk(true);\n\n        $forms = array(\n            'payment' => array('title' => $this->trans('Average bank fees per payment method', array(), 'Admin.Dashboard.Feature'), 'id' => 'payment'),\n            'carriers' => array('title' => $this->trans('Average shipping fees per shipping method', array(), 'Admin.Dashboard.Feature'), 'id' => 'carriers'),\n            'other' => array('title' => $this->trans('Other settings', array(), 'Admin.Dashboard.Feature'), 'id' => 'other'),\n        );\n        foreach ($forms as &$form) {\n            $form['icon'] = 'tab-preferences';\n            $form['fields'] = array();\n            $form['submit'] = array('title' => $this->trans('Save', array(), 'Admin.Actions'));\n        }\n\n        foreach ($modules as $module) {\n            if (isset($module->tab) && $module->tab == 'payments_gateways' && $module->id) {\n                $moduleClass = Module::getInstanceByName($module->name);\n                if (!$moduleClass->isEnabledForShopContext()) {\n                    continue;\n                }\n\n                $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_FIXED'] = array(\n                    'title' => $module->displayName,\n                    'desc' => $this->trans(\n                        'Choose a fixed fee for each order placed in %currency% with %module%.',\n                        array(\n                            '%currency' => $currency->iso_code,\n                            '%module%' => $module->displayName,\n                        ),\n                        'Admin.Dashboard.Help'\n                    ),\n                    'validation' => 'isPrice',\n                    'cast' => 'floatval',\n                    'type' => 'text',\n                    'defaultValue' => '0',\n                    'suffix' => $currency->iso_code,\n                );\n                $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_VAR'] = array(\n                    'title' => $module->displayName,\n                    'desc' => $this->trans(\n                        'Choose a variable fee for each order placed in %currency% with %module%. It will be applied on the total paid with taxes.',\n                        array(\n                            '%currency' => $currency->iso_code,\n                            '%module%' => $module->displayName,\n                        ),\n                        'Admin.Dashboard.Help'\n                    ),\n                    'validation' => 'isPercentage',\n                    'cast' => 'floatval',\n                    'type' => 'text',\n                    'defaultValue' => '0',\n                    'suffix' => '%',\n                );\n\n                if (Currency::isMultiCurrencyActivated()) {\n                    $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_FIXED_FOREIGN'] = array(\n                        'title' => $module->displayName,\n                        'desc' => $this->trans(\n                            'Choose a fixed fee for each order placed with a foreign currency with %module%.',\n                            array(\n                                '%module%' => $module->displayName,\n                            ),\n                            'Admin.Dashboard.Help'\n                        ),\n                        'validation' => 'isPrice',\n                        'cast' => 'floatval',\n                        'type' => 'text',\n                        'defaultValue' => '0',\n                        'suffix' => $currency->iso_code,\n                    );\n                    $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_VAR_FOREIGN'] = array(\n                        'title' => $module->displayName,\n                        'desc' => $this->trans(\n                            'Choose a variable fee for each order placed with a foreign currency with %module%. It will be applied on the total paid with taxes.',\n                             array('%module%' => $module->displayName),\n                             'Admin.Dashboard.Help'\n                            ),\n                        'validation' => 'isPercentage',\n                        'cast' => 'floatval',\n                        'type' => 'text',\n                        'defaultValue' => '0',\n                        'suffix' => '%',\n                    );\n                }\n            }\n        }\n\n        foreach ($carriers as $carrier) {\n            $forms['carriers']['fields']['CONF_' . strtoupper($carrier['id_reference']) . '_SHIP'] = array(\n                'title' => $carrier['name'],\n                'desc' => $this->trans(\n                    'For the carrier named %s, indicate the domestic delivery costs  in percentage of the price charged to customers.',\n                    array(\n                        '%s' => $carrier['name'],\n                    ),\n                    'Admin.Dashboard.Help'\n                ),\n                'validation' => 'isPercentage',\n                'cast' => 'floatval',\n                'type' => 'text',\n                'defaultValue' => '0',\n                'suffix' => '%',\n            );\n            $forms['carriers']['fields']['CONF_' . strtoupper($carrier['id_reference']) . '_SHIP_OVERSEAS'] = array(\n                'title' => $carrier['name'],\n                'desc' => $this->trans(\n                    'For the carrier named %s, indicate the overseas delivery costs in percentage of the price charged to customers.',\n                    array(\n                        '%s' => $carrier['name'],\n                    ),\n                    'Admin.Dashboard.Help'\n                ),\n                'validation' => 'isPercentage',\n                'cast' => 'floatval',\n                'type' => 'text',\n                'defaultValue' => '0',\n                'suffix' => '%',\n            );\n        }\n\n        $forms['carriers']['description'] = $this->trans('Method: Indicate the percentage of your carrier margin. For example, if you charge $10 of shipping fees to your customer for each shipment, but you really pay $4 to this carrier, then you should indicate \"40\" in the percentage field.', array(), 'Admin.Dashboard.Help');\n\n        $forms['other']['fields']['CONF_AVERAGE_PRODUCT_MARGIN'] = array(\n            'title' => $this->trans('Average gross margin percentage', array(), 'Admin.Dashboard.Feature'),\n            'desc' => $this->trans('You should calculate this percentage as follows: ((total sales revenue) - (cost of goods sold)) / (total sales revenue) * 100. This value is only used to calculate the Dashboard approximate gross margin, if you do not specify the wholesale price for each product.', array(), 'Admin.Dashboard.Help'),\n            'validation' => 'isPercentage',\n            'cast' => 'intval',\n            'type' => 'text',\n            'defaultValue' => '0',\n            'suffix' => '%',\n        );\n\n        $forms['other']['fields']['CONF_ORDER_FIXED'] = array(\n            'title' => $this->trans('Other fees per order', array(), 'Admin.Dashboard.Feature'),\n            'desc' => $this->trans('You should calculate this value by making the sum of all of your additional costs per order.', array(), 'Admin.Dashboard.Help'),\n            'validation' => 'isPrice',\n            'cast' => 'floatval',\n            'type' => 'text',\n            'defaultValue' => '0',\n            'suffix' => $currency->iso_code,\n        );\n\n        Media::addJsDef(array(\n            'dashboard_ajax_url' => $this->context->link->getAdminLink('AdminDashboard'),\n            'read_more' => '',\n        ));\n\n        return $forms;\n    }\n\n    public function renderView()\n    {\n        if (Tools::isSubmit('profitability_conf')) {\n            return parent::renderOptions();\n        }\n\n        // $translations = array(\n        // \t'Calendar' => $this->trans('Calendar', array(),'Admin.Global'),\n        // \t'Day' => $this->trans('Day', array(), 'Admin.Global'),\n        // \t'Month' => $this->trans('Month', array(), 'Admin.Global'),\n        // \t'Year' => $this->trans('Year', array(), 'Admin.Global'),\n        // \t'From' => $this->trans('From:', array(), 'Admin.Global'),\n        // \t'To' => $this->trans('To:', array(), 'Admin.Global'),\n        // \t'Save' => $this->trans('Save', array(), 'Admin.Global')\n        // );\n\n        $testStatsDateUpdate = $this->context->cookie->__get('stats_date_update');\n        if (!empty($testStatsDateUpdate) && $this->context->cookie->__get('stats_date_update') < strtotime(date('Y-m-d'))) {\n            switch ($this->context->employee->preselect_date_range) {\n                case 'day':\n                    $date_from = date('Y-m-d');\n                    $date_to = date('Y-m-d');\n\n                    break;\n                case 'prev-day':\n                    $date_from = date('Y-m-d', strtotime('-1 day'));\n                    $date_to = date('Y-m-d', strtotime('-1 day'));\n\n                    break;\n                case 'month':\n                default:\n                    $date_from = date('Y-m-01');\n                    $date_to = date('Y-m-d');\n\n                    break;\n                case 'prev-month':\n                    $date_from = date('Y-m-01', strtotime('-1 month'));\n                    $date_to = date('Y-m-t', strtotime('-1 month'));\n\n                    break;\n                case 'year':\n                    $date_from = date('Y-01-01');\n                    $date_to = date('Y-m-d');\n\n                    break;\n                case 'prev-year':\n                    $date_from = date('Y-m-01', strtotime('-1 year'));\n                    $date_to = date('Y-12-t', strtotime('-1 year'));\n\n                    break;\n            }\n            $this->context->employee->stats_date_from = $date_from;\n            $this->context->employee->stats_date_to = $date_to;\n            $this->context->employee->update();\n            $this->context->cookie->__set('stats_date_update', strtotime(date('Y-m-d')));\n            $this->context->cookie->write();\n        }\n\n        $calendar_helper = new HelperCalendar();\n\n        $calendar_helper->setDateFrom(Tools::getValue('date_from', $this->context->employee->stats_date_from));\n        $calendar_helper->setDateTo(Tools::getValue('date_to', $this->context->employee->stats_date_to));\n\n        $stats_compare_from = $this->context->employee->stats_compare_from;\n        $stats_compare_to = $this->context->employee->stats_compare_to;\n\n        if (null === $stats_compare_from || $stats_compare_from == '0000-00-00') {\n            $stats_compare_from = null;\n        }\n\n        if (null === $stats_compare_to || $stats_compare_to == '0000-00-00') {\n            $stats_compare_to = null;\n        }\n\n        $calendar_helper->setCompareDateFrom($stats_compare_from);\n        $calendar_helper->setCompareDateTo($stats_compare_to);\n        $calendar_helper->setCompareOption(Tools::getValue('compare_date_option', $this->context->employee->stats_compare_option));\n\n        $params = array(\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n        );\n\n        $moduleManagerBuilder = ModuleManagerBuilder::getInstance();\n        $moduleManager = $moduleManagerBuilder->build();\n\n        $this->tpl_view_vars = array(\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n            'hookDashboardZoneOne' => Hook::exec('dashboardZoneOne', $params),\n            'hookDashboardZoneTwo' => Hook::exec('dashboardZoneTwo', $params),\n            //'translations' => $translations,\n            'action' => '#',\n            'warning' => $this->getWarningDomainName(),\n            'new_version_url' => Tools::getCurrentUrlProtocolPrefix() . _PS_API_DOMAIN_ . '/version/check_version.php?v=' . _PS_VERSION_ . '&lang=' . $this->context->language->iso_code . '&autoupgrade=' . (int) ($moduleManager->isInstalled('autoupgrade') && $moduleManager->isEnabled('autoupgrade')) . '&hosted_mode=' . (int) defined('_PS_HOST_MODE_'),\n            'dashboard_use_push' => Configuration::get('PS_DASHBOARD_USE_PUSH'),\n            'calendar' => $calendar_helper->generate(),\n            'PS_DASHBOARD_SIMULATION' => Configuration::get('PS_DASHBOARD_SIMULATION'),\n            'datepickerFrom' => Tools::getValue('datepickerFrom', $this->context->employee->stats_date_from),\n            'datepickerTo' => Tools::getValue('datepickerTo', $this->context->employee->stats_date_to),\n            'preselect_date_range' => Tools::getValue('preselectDateRange', $this->context->employee->preselect_date_range),\n            'help_center_link' => $this->getHelpCenterLink($this->context->language->iso_code),\n        );\n\n        return parent::renderView();\n    }\n\n    public function postProcess()\n    {\n        if (Tools::isSubmit('submitDateRealTime')) {\n            if ($use_realtime = (int) Tools::getValue('submitDateRealTime')) {\n                $this->context->employee->stats_date_from = date('Y-m-d');\n                $this->context->employee->stats_date_to = date('Y-m-d');\n                $this->context->employee->stats_compare_option = HelperCalendar::DEFAULT_COMPARE_OPTION;\n                $this->context->employee->stats_compare_from = null;\n                $this->context->employee->stats_compare_to = null;\n                $this->context->employee->update();\n            }\n            Configuration::updateValue('PS_DASHBOARD_USE_PUSH', $use_realtime);\n        }\n\n        if (Tools::isSubmit('submitDateRange')) {\n            if (!Validate::isDate(Tools::getValue('date_from'))\n                || !Validate::isDate(Tools::getValue('date_to'))) {\n                $this->errors[] = $this->trans('The selected date range is not valid.', array(), 'Admin.Notifications.Error');\n            }\n\n            if (Tools::getValue('datepicker_compare')) {\n                if (!Validate::isDate(Tools::getValue('compare_date_from'))\n                    || !Validate::isDate(Tools::getValue('compare_date_to'))) {\n                    $this->errors[] = $this->trans('The selected date range is not valid.', array(), 'Admin.Notifications.Error');\n                }\n            }\n\n            if (!count($this->errors)) {\n                $this->context->employee->stats_date_from = Tools::getValue('date_from');\n                $this->context->employee->stats_date_to = Tools::getValue('date_to');\n                $this->context->employee->preselect_date_range = Tools::getValue('preselectDateRange');\n\n                if (Tools::getValue('datepicker_compare')) {\n                    $this->context->employee->stats_compare_from = Tools::getValue('compare_date_from');\n                    $this->context->employee->stats_compare_to = Tools::getValue('compare_date_to');\n                    $this->context->employee->stats_compare_option = Tools::getValue('compare_date_option');\n                } else {\n                    $this->context->employee->stats_compare_from = null;\n                    $this->context->employee->stats_compare_to = null;\n                    $this->context->employee->stats_compare_option = HelperCalendar::DEFAULT_COMPARE_OPTION;\n                }\n\n                $this->context->employee->update();\n            }\n        }\n\n        parent::postProcess();\n    }\n\n    protected function getWarningDomainName()\n    {\n        $warning = false;\n        if (Shop::isFeatureActive()) {\n            return;\n        }\n\n        $shop = Context::getContext()->shop;\n        if ($_SERVER['HTTP_HOST'] != $shop->domain && $_SERVER['HTTP_HOST'] != $shop->domain_ssl && Tools::getValue('ajax') == false && !defined('_PS_HOST_MODE_')) {\n            $warning = $this->trans('You are currently connected under the following domain name:', array(), 'Admin.Dashboard.Notification') . ' <span style=\"color: #CC0000;\">' . $_SERVER['HTTP_HOST'] . '</span><br />';\n            if (Configuration::get('PS_MULTISHOP_FEATURE_ACTIVE')) {\n                $warning .= $this->trans(\n                    'This is different from the shop domain name set in the Multistore settings: \"%s\".',\n                    array(\n                        '%s' => $shop->domain,\n                    ),\n                    'Admin.Dashboard.Notification'\n                ) . $this->trans(\n                    'If this is your main domain, please {link}change it now{/link}.',\n                    array(\n                        '{link}' => '<a href=\"index.php?controller=AdminShopUrl&id_shop_url=' . (int) $shop->id . '&updateshop_url&token=' . Tools::getAdminTokenLite('AdminShopUrl') . '\">',\n                        '{/link}' => '</a>',\n                    ),\n                    'Admin.Dashboard.Notification'\n                );\n            } else {\n                $warning .= $this->trans('This is different from the domain name set in the \"SEO & URLs\" tab.', array(), 'Admin.Dashboard.Notification') . '\n\t\t\t\t' . $this->trans(\n                    'If this is your main domain, please {link}change it now{/link}.',\n                    array(\n                        '{link}' => '<a href=\"index.php?controller=AdminMeta&token=' . Tools::getAdminTokenLite('AdminMeta') . '#meta_fieldset_shop_url\">',\n                        '{/link}' => '</a>',\n                    ),\n                    'Admin.Dashboard.Notification'\n                );\n            }\n        }\n\n        return $warning;\n    }\n\n    public function ajaxProcessRefreshDashboard()\n    {\n        $id_module = null;\n        if ($module = Tools::getValue('module')) {\n            $module_obj = Module::getInstanceByName($module);\n            if (Validate::isLoadedObject($module_obj)) {\n                $id_module = $module_obj->id;\n            }\n        }\n\n        $params = array(\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n            'compare_from' => $this->context->employee->stats_compare_from,\n            'compare_to' => $this->context->employee->stats_compare_to,\n            'dashboard_use_push' => (int) Tools::getValue('dashboard_use_push'),\n            'extra' => (int) Tools::getValue('extra'),\n        );\n\n        die(json_encode(Hook::exec('dashboardData', $params, $id_module, true, true, (int) Tools::getValue('dashboard_use_push'))));\n    }\n\n    public function ajaxProcessSetSimulationMode()\n    {\n        Configuration::updateValue('PS_DASHBOARD_SIMULATION', (int) Tools::getValue('PS_DASHBOARD_SIMULATION'));\n        die('k' . Configuration::get('PS_DASHBOARD_SIMULATION') . 'k');\n    }\n\n    public function ajaxProcessGetBlogRss()\n    {\n        $return = array('has_errors' => false, 'rss' => array());\n        if (!$this->isFresh('/config/xml/blog-' . $this->context->language->iso_code . '.xml', 86400)) {\n            if (!$this->refresh('/config/xml/blog-' . $this->context->language->iso_code . '.xml', _PS_API_URL_ . '/rss/blog/blog-' . $this->context->language->iso_code . '.xml')) {\n                $return['has_errors'] = true;\n            }\n        }\n\n        if (!$return['has_errors']) {\n            $rss = @simplexml_load_file(_PS_ROOT_DIR_ . '/config/xml/blog-' . $this->context->language->iso_code . '.xml');\n            if (!$rss) {\n                $return['has_errors'] = true;\n            }\n            $articles_limit = 2;\n            if ($rss) {\n                foreach ($rss->channel->item as $item) {\n                    if ($articles_limit > 0 && Validate::isCleanHtml((string) $item->title) && Validate::isCleanHtml((string) $item->description)\n                        && isset($item->link, $item->title)) {\n                        if (in_array($this->context->mode, array(Context::MODE_HOST, Context::MODE_HOST_CONTRIB))) {\n                            $utm_content = 'cloud';\n                        } else {\n                            $utm_content = 'download';\n                        }\n\n                        $shop_default_country_id = (int) Configuration::get('PS_COUNTRY_DEFAULT');\n                        $shop_default_iso_country = (string) Tools::strtoupper(Country::getIsoById($shop_default_country_id));\n                        $analytics_params = array('utm_source' => 'back-office',\n                            'utm_medium' => 'rss',\n                            'utm_campaign' => 'back-office-' . $shop_default_iso_country,\n                            'utm_content' => $utm_content,\n                        );\n                        $url_query = parse_url($item->link, PHP_URL_QUERY);\n                        parse_str($url_query, $link_query_params);\n\n                        if ($link_query_params) {\n                            $full_url_params = array_merge($link_query_params, $analytics_params);\n                            $base_url = explode('?', (string) $item->link);\n                            $base_url = (string) $base_url[0];\n                            $article_link = $base_url . '?' . http_build_query($full_url_params);\n                        } else {\n                            $article_link = (string) $item->link . '?' . http_build_query($analytics_params);\n                        }\n\n                        $return['rss'][] = array(\n                            'date' => Tools::displayDate(date('Y-m-d', strtotime((string) $item->pubDate))),\n                            'title' => (string) Tools::htmlentitiesUTF8($item->title),\n                            'short_desc' => Tools::truncateString(strip_tags((string) $item->description), 150),\n                            'link' => (string) $article_link,\n                        );\n                    } else {\n                        break;\n                    }\n                    --$articles_limit;\n                }\n            }\n        }\n        die(json_encode($return));\n    }\n\n    public function ajaxProcessSaveDashConfig()\n    {\n        $return = array('has_errors' => false, 'errors' => array());\n        $module = Tools::getValue('module');\n        $hook = Tools::getValue('hook');\n        $configs = Tools::getValue('configs');\n\n        $params = array(\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n        );\n\n        if (Validate::isModuleName($module) && $module_obj = Module::getInstanceByName($module)) {\n            if (Validate::isLoadedObject($module_obj) && method_exists($module_obj, 'validateDashConfig')) {\n                $return['errors'] = $module_obj->validateDashConfig($configs);\n            }\n            if (!count($return['errors'])) {\n                if (Validate::isLoadedObject($module_obj) && method_exists($module_obj, 'saveDashConfig')) {\n                    $return['has_errors'] = $module_obj->saveDashConfig($configs);\n                } elseif (is_array($configs) && count($configs)) {\n                    foreach ($configs as $name => $value) {\n                        if (Validate::isConfigName($name)) {\n                            Configuration::updateValue($name, $value);\n                        }\n                    }\n                }\n            } else {\n                $return['has_errors'] = true;\n            }\n        }\n\n        if (Validate::isHookName($hook) && method_exists($module_obj, $hook)) {\n            $return['widget_html'] = $module_obj->$hook($params);\n        }\n\n        die(json_encode($return));\n    }\n\n    /**\n     * Returns the Help center link for the provided locale\n     *\n     * @param string $languageCode 2-letter locale code\n     *\n     * @return string\n     */\n    private function getHelpCenterLink($languageCode)\n    {\n        $links = [\n            'fr' => 'https://www.prestashop.com/fr/contact?utm_source=back-office&utm_medium=links&utm_campaign=help-center-fr&utm_content=download17',\n            'en' => 'https://www.prestashop.com/en/contact?utm_source=back-office&utm_medium=links&utm_campaign=help-center-en&utm_content=download17',\n            'es' => 'https://www.prestashop.com/es/contacto?utm_source=back-office&utm_medium=links&utm_campaign=help-center-es&utm_content=download17',\n            'de' => 'https://www.prestashop.com/de/kontakt?utm_source=back-office&utm_medium=links&utm_campaign=help-center-de&utm_content=download17',\n            'it' => 'https://www.prestashop.com/it/contatti?utm_source=back-office&utm_medium=links&utm_campaign=help-center-it&utm_content=download17',\n            'nl' => 'https://www.prestashop.com/nl/contacteer-ons?utm_source=back-office&utm_medium=links&utm_campaign=help-center-nl&utm_content=download17',\n            'pt' => 'https://www.prestashop.com/pt/contato?utm_source=back-office&utm_medium=links&utm_campaign=help-center-pt&utm_content=download17',\n            'pl' => 'https://www.prestashop.com/pl/kontakt?utm_source=back-office&utm_medium=links&utm_campaign=help-center-pl&utm_content=download17',\n        ];\n\n        return isset($links[$languageCode]) ? $links[$languageCode] : $links['en'];\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse PrestaShop\\PrestaShop\\Adapter\\LegacyLogger;\nuse PrestaShop\\PrestaShop\\Adapter\\Module\\ModuleDataProvider;\nuse PrestaShop\\PrestaShop\\Adapter\\ServiceLocator;\nuse PrestaShop\\PrestaShop\\Adapter\\SymfonyContainer;\nuse PrestaShop\\PrestaShop\\Core\\Foundation\\Filesystem\\FileSystem;\nuse PrestaShop\\PrestaShop\\Core\\Module\\ModuleInterface;\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\nuse PrestaShop\\TranslationToolsBundle\\Translation\\Helper\\DomainHelper;\n\nabstract class ModuleCore implements ModuleInterface\n{\n    /** @var int Module ID */\n    public $id = null;\n\n    /** @var float Version */\n    public $version;\n    public $database_version;\n\n    /**\n     * @since 1.5.0.1\n     *\n     * @var string Registered Version in database\n     */\n    public $registered_version;\n\n    /** @var array filled with known compliant PS versions */\n    public $ps_versions_compliancy = array();\n\n    /** @var array filled with modules needed for install */\n    public $dependencies = array();\n\n    /** @var string Unique name */\n    public $name;\n\n    /** @var string Human name */\n    public $displayName;\n\n    /** @var string A little description of the module */\n    public $description;\n\n    /** @var string author of the module */\n    public $author;\n\n    /** @var string URI author of the module */\n    public $author_uri = '';\n\n    /** @var string Module key provided by addons.prestashop.com */\n    public $module_key = '';\n\n    public $description_full;\n\n    public $additional_description;\n\n    public $compatibility;\n\n    public $nb_rates;\n\n    public $avg_rate;\n\n    public $badges;\n\n    /** @var int need_instance */\n    public $need_instance = 1;\n\n    /** @var string Admin tab corresponding to the module */\n    public $tab = null;\n\n    /** @var bool Status */\n    public $active = false;\n\n    /** @var bool Is the module certified by addons.prestashop.com */\n    public $trusted = false;\n\n    /** @var string Fill it if the module is installed but not yet set up */\n    public $warning;\n\n    public $enable_device = 7;\n\n    /** @var array to store the limited country */\n    public $limited_countries = array();\n\n    /** @var array names of the controllers */\n    public $controllers = array();\n\n    /** @var array used by AdminTab to determine which lang file to use (admin.php or module lang file) */\n    public static $classInModule = array();\n\n    /** @var array current language translations */\n    protected $_lang = array();\n\n    /** @var string Module web path (eg. '/shop/modules/modulename/') */\n    protected $_path = null;\n    /**\n     * @since 1.5.0.1\n     *\n     * @var string Module local path (eg. '/home/prestashop/modules/modulename/')\n     */\n    protected $local_path = null;\n\n    /** @var array Array filled with module errors */\n    protected $_errors = array();\n\n    /** @var array Array  array filled with module success */\n    protected $_confirmations = array();\n\n    /** @var string Main table used for modules installed */\n    protected $table = 'module';\n\n    /** @var string Identifier of the main table */\n    protected $identifier = 'id_module';\n\n    /** @var array Array cache filled with modules informations */\n    protected static $modules_cache;\n\n    /** @var array Array cache filled with modules instances */\n    protected static $_INSTANCE = array();\n\n    /** @var bool Config xml generation mode */\n    protected static $_generate_config_xml_mode = false;\n\n    /** @var array Array filled with cache translations */\n    protected static $l_cache = array();\n\n    /** @var array Array filled with cache permissions (modules / employee profiles) */\n    protected static $cache_permissions = array();\n\n    /** @var array Array filled with cache permissions (modules / employee profiles) */\n    protected static $cache_lgc_access = array();\n\n    /** @var Context */\n    protected $context;\n\n    /** @var Smarty_Data */\n    protected $smarty;\n\n    /** @var Smarty_Internal_Template|null */\n    protected $current_subtemplate = null;\n\n    protected static $update_translations_after_install = true;\n\n    protected static $_batch_mode = false;\n    protected static $_defered_clearCache = array();\n    protected static $_defered_func_call = array();\n\n    /**\n     * @var array array of arrays representing tabs added by this module\n     *\n     * @see PrestaShop\\PrestaShop\\Adapter\\Module\\Tab\\RegisterTabs($module)\n     */\n    protected $tabs = array();\n\n    /** @var bool If true, allow push */\n    public $allow_push;\n\n    public $push_time_limit = 180;\n\n    /** @var bool Define if we will log modules performances for this session */\n    public static $_log_modules_perfs = null;\n    /** @var bool Random session for modules perfs logs */\n    public static $_log_modules_perfs_session = null;\n\n    /** @var \\Symfony\\Component\\DependencyInjection\\ContainerInterface */\n    private $container;\n\n    /** @var array|null used to cache module ids */\n    private static $cachedModuleNames = null;\n\n    const CACHE_FILE_MODULES_LIST = '/config/xml/modules_list.xml';\n\n    const CACHE_FILE_TAB_MODULES_LIST = '/config/xml/tab_modules_list.xml';\n\n    const CACHE_FILE_ALL_COUNTRY_MODULES_LIST = '/config/xml/modules_native_addons.xml';\n    const CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST = '/config/xml/default_country_modules_list.xml';\n\n    const CACHE_FILE_CUSTOMER_MODULES_LIST = '/config/xml/customer_modules_list.xml';\n\n    const CACHE_FILE_MUST_HAVE_MODULES_LIST = '/config/xml/must_have_modules_list.xml';\n\n    const CACHE_FILE_TRUSTED_MODULES_LIST = '/config/xml/trusted_modules_list.xml';\n    const CACHE_FILE_UNTRUSTED_MODULES_LIST = '/config/xml/untrusted_modules_list.xml';\n\n    public static $hosted_modules_blacklist = array('autoupgrade');\n\n    /**\n     * Set the flag to indicate we are doing an import.\n     *\n     * @param bool $value\n     */\n    public static function setBatchMode($value)\n    {\n        self::$_batch_mode = (bool) $value;\n    }\n\n    /**\n     * @return bool\n     */\n    public static function getBatchMode()\n    {\n        return self::$_batch_mode;\n    }\n\n    public static function processDeferedFuncCall()\n    {\n        self::setBatchMode(false);\n        foreach (self::$_defered_func_call as $func_call) {\n            call_user_func_array($func_call[0], $func_call[1]);\n        }\n\n        self::$_defered_func_call = array();\n    }\n\n    /**\n     * Clear the caches stored in $_defered_clearCache.\n     */\n    public static function processDeferedClearCache()\n    {\n        self::setBatchMode(false);\n\n        foreach (self::$_defered_clearCache as $clearCache_array) {\n            self::_deferedClearCache($clearCache_array[0], $clearCache_array[1], $clearCache_array[2]);\n        }\n\n        self::$_defered_clearCache = array();\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param string $name Module unique name\n     * @param Context $context\n     */\n    public function __construct($name = null, Context $context = null)\n    {\n        if (isset($this->ps_versions_compliancy) && !isset($this->ps_versions_compliancy['min'])) {\n            $this->ps_versions_compliancy['min'] = '1.4.0.0';\n        }\n\n        if (isset($this->ps_versions_compliancy) && !isset($this->ps_versions_compliancy['max'])) {\n            $this->ps_versions_compliancy['max'] = _PS_VERSION_;\n        }\n\n        if (strlen($this->ps_versions_compliancy['min']) == 3) {\n            $this->ps_versions_compliancy['min'] .= '.0.0';\n        }\n\n        if (strlen($this->ps_versions_compliancy['min']) == 5) {\n            $this->ps_versions_compliancy['min'] .= '.0';\n        }\n\n        if (strlen($this->ps_versions_compliancy['max']) == 5) {\n            $this->ps_versions_compliancy['max'] .= '.999';\n        }\n\n        if (strlen($this->ps_versions_compliancy['max']) == 3) {\n            $this->ps_versions_compliancy['max'] .= '.999.999';\n        }\n\n        // Load context and smarty\n        $this->context = $context ? $context : Context::getContext();\n        if (is_object($this->context->smarty)) {\n            $this->smarty = $this->context->smarty->createData($this->context->smarty);\n        }\n\n        // If the module has no name we gave him its id as name\n        if ($this->name === null) {\n            $this->name = $this->id;\n        }\n\n        // If the module has the name we load the corresponding data from the cache\n        if ($this->name != null) {\n            // If cache is not generated, we generate it\n            if (self::$modules_cache == null && !is_array(self::$modules_cache)) {\n                $id_shop = (Validate::isLoadedObject($this->context->shop) ? $this->context->shop->id : Configuration::get('PS_SHOP_DEFAULT'));\n\n                self::$modules_cache = array();\n                // Join clause is done to check if the module is activated in current shop context\n                $result = Db::getInstance()->executeS('\n                SELECT m.`id_module`, m.`name`, ms.`id_module`as `mshop`\n                FROM `' . _DB_PREFIX_ . 'module` m\n                LEFT JOIN `' . _DB_PREFIX_ . 'module_shop` ms\n                ON m.`id_module` = ms.`id_module`\n                AND ms.`id_shop` = ' . (int) $id_shop);\n                foreach ($result as $row) {\n                    self::$modules_cache[$row['name']] = $row;\n                    self::$modules_cache[$row['name']]['active'] = ($row['mshop'] > 0) ? 1 : 0;\n                }\n            }\n\n            // We load configuration from the cache\n            if (isset(self::$modules_cache[$this->name])) {\n                if (isset(self::$modules_cache[$this->name]['id_module'])) {\n                    $this->id = self::$modules_cache[$this->name]['id_module'];\n                }\n                foreach (self::$modules_cache[$this->name] as $key => $value) {\n                    if (array_key_exists($key, $this)) {\n                        $this->{$key} = $value;\n                    }\n                }\n                $this->_path = __PS_BASE_URI__ . 'modules/' . $this->name . '/';\n            }\n            if (!$this->context->controller instanceof Controller) {\n                self::$modules_cache = null;\n            }\n            $this->local_path = _PS_MODULE_DIR_ . $this->name . '/';\n        }\n    }\n\n    /**\n     * Insert module into datable.\n     */\n    public function install()\n    {\n        Hook::exec('actionModuleInstallBefore', array('object' => $this));\n        // Check module name validation\n        if (!Validate::isModuleName($this->name)) {\n            $this->_errors[] = Context::getContext()->getTranslator()->trans('Unable to install the module (Module name is not valid).', array(), 'Admin.Modules.Notification');\n\n            return false;\n        }\n\n        // Check PS version compliancy\n        if (!$this->checkCompliancy()) {\n            $this->_errors[] = Context::getContext()->getTranslator()->trans('The version of your module is not compliant with your PrestaShop version.', array(), 'Admin.Modules.Notification');\n\n            return false;\n        }\n\n        // Check module dependencies\n        if (count($this->dependencies) > 0) {\n            foreach ($this->dependencies as $dependency) {\n                if (!Db::getInstance()->getRow('SELECT `id_module` FROM `' . _DB_PREFIX_ . 'module` WHERE LOWER(`name`) = \\'' . pSQL(Tools::strtolower($dependency)) . '\\'')) {\n                    $error = Context::getContext()->getTranslator()->trans('Before installing this module, you have to install this/these module(s) first:', array(), 'Admin.Modules.Notification') . '<br />';\n                    foreach ($this->dependencies as $d) {\n                        $error .= '- ' . $d . '<br />';\n                    }\n                    $this->_errors[] = $error;\n\n                    return false;\n                }\n            }\n        }\n\n        // Check if module is installed\n        $result = (new ModuleDataProvider(new LegacyLogger(), $this->getTranslator()))->isInstalled($this->name);\n        if ($result) {\n            $this->_errors[] = Context::getContext()->getTranslator()->trans('This module has already been installed.', array(), 'Admin.Modules.Notification');\n\n            return false;\n        }\n\n        if (!$this->installControllers()) {\n            $this->_errors[] = Context::getContext()->getTranslator()->trans('Could not install module controllers.', array(), 'Admin.Modules.Notification');\n            $this->uninstallOverrides();\n\n            return false;\n        }\n\n        // Install module and retrieve the installation id\n        $result = Db::getInstance()->insert($this->table, array('name' => $this->name, 'active' => 1, 'version' => $this->version));\n        if (!$result) {\n            $this->_errors[] = Context::getContext()->getTranslator()->trans('Technical error: PrestaShop could not install this module.', array(), 'Admin.Modules.Notification');\n            $this->uninstallTabs();\n            $this->uninstallOverrides();\n\n            return false;\n        }\n        $this->id = Db::getInstance()->Insert_ID();\n\n        Cache::clean('Module::isInstalled' . $this->name);\n\n        // Enable the module for current shops in context\n        $this->enable();\n\n        // Permissions management\n        foreach (array('CREATE', 'READ', 'UPDATE', 'DELETE') as $action) {\n            $slug = 'ROLE_MOD_MODULE_' . strtoupper($this->name) . '_' . $action;\n\n            Db::getInstance()->execute(\n                'INSERT INTO `' . _DB_PREFIX_ . 'authorization_role` (`slug`) VALUES (\"' . $slug . '\")'\n            );\n\n            Db::getInstance()->execute('\n                INSERT INTO `' . _DB_PREFIX_ . 'module_access` (`id_profile`, `id_authorization_role`) (\n                    SELECT id_profile, \"' . Db::getInstance()->Insert_ID() . '\"\n                    FROM ' . _DB_PREFIX_ . 'access a\n                    LEFT JOIN `' . _DB_PREFIX_ . 'authorization_role` r\n                    ON r.id_authorization_role = a.id_authorization_role\n                    WHERE r.slug = \"ROLE_MOD_TAB_ADMINMODULESSF_' . $action . '\"\n            )');\n        }\n\n        // Adding Restrictions for client groups\n        Group::addRestrictionsForModule($this->id, Shop::getShops(true, null, true));\n        Hook::exec('actionModuleInstallAfter', array('object' => $this));\n\n        if (Module::$update_translations_after_install) {\n            $this->updateModuleTranslations();\n        }\n\n        return true;\n    }\n\n    public function checkCompliancy()\n    {\n        if (version_compare(_PS_VERSION_, $this->ps_versions_compliancy['min'], '<') || version_compare(_PS_VERSION_, $this->ps_versions_compliancy['max'], '>')) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public static function updateTranslationsAfterInstall($update = true)\n    {\n        Module::$update_translations_after_install = (bool) $update;\n    }\n\n    public function updateModuleTranslations()\n    {\n        return Language::updateModulesTranslations(array($this->name));\n    }\n\n    /**\n     * Set errors, warning or success message of a module upgrade.\n     *\n     * @param $upgrade_detail\n     */\n    protected function setUpgradeMessage($upgrade_detail)\n    {\n        // Store information if a module has been upgraded (memory optimization)\n        if ($upgrade_detail['available_upgrade']) {\n            if ($upgrade_detail['success']) {\n                $this->_confirmations[] = Context::getContext()->getTranslator()->trans('Current version: %s', array($this->version), 'Admin.Modules.Notification');\n                $this->_confirmations[] = Context::getContext()->getTranslator()->trans('%d file upgrade applied', array($upgrade_detail['number_upgraded']), 'Admin.Modules.Notification');\n            } else {\n                if (!$upgrade_detail['number_upgraded']) {\n                    $this->_errors[] = Context::getContext()->getTranslator()->trans('No upgrade has been applied', array(), 'Admin.Modules.Notification');\n                } else {\n                    $this->_errors[] = Context::getContext()->getTranslator()->trans('Upgraded from: %s to %s', array($upgrade_detail['upgraded_from'], $upgrade_detail['upgraded_to']), 'Admin.Modules.Notification');\n                    $this->_errors[] = Context::getContext()->getTranslator()->trans('%d upgrade left', array($upgrade_detail['number_upgrade_left']), 'Admin.Modules.Notification');\n                }\n\n                if (isset($upgrade_detail['duplicate']) && $upgrade_detail['duplicate']) {\n                    $this->_errors[] = Context::getContext()->getTranslator()->trans('Module %s cannot be upgraded this time: please refresh this page to update it.', array($this->name), 'Admin.Modules.Notification');\n                } else {\n                    $this->_errors[] = Context::getContext()->getTranslator()->trans('To prevent any problem, this module has been turned off', array(), 'Admin.Modules.Notification');\n                }\n            }\n        }\n    }\n\n    /**\n     * Init the upgrade module.\n     *\n     * @param $module\n     *\n     * @return bool\n     */\n    public static function initUpgradeModule($module)\n    {\n        if (((int) $module->installed == 1) & (empty($module->database_version) === true)) {\n            Module::upgradeModuleVersion($module->name, $module->version);\n            $module->database_version = $module->version;\n        }\n\n        // Init cache upgrade details\n        self::$modules_cache[$module->name]['upgrade'] = array(\n            'success' => false, // bool to know if upgrade succeed or not\n            'available_upgrade' => 0, // Number of available module before any upgrade\n            'number_upgraded' => 0, // Number of upgrade done\n            'number_upgrade_left' => 0,\n            'upgrade_file_left' => array(), // List of the upgrade file left\n            'version_fail' => 0, // Version of the upgrade failure\n            'upgraded_from' => 0, // Version number before upgrading anything\n            'upgraded_to' => 0, // Last upgrade applied\n        );\n\n        // Need Upgrade will check and load upgrade file to the moduleCache upgrade case detail\n        $ret = $module->installed && Module::needUpgrade($module);\n\n        return $ret;\n    }\n\n    /**\n     * Run the upgrade for a given module name and version.\n     *\n     * @return array\n     */\n    public function runUpgradeModule()\n    {\n        $upgrade = &self::$modules_cache[$this->name]['upgrade'];\n        foreach ($upgrade['upgrade_file_left'] as $num => $file_detail) {\n            foreach ($file_detail['upgrade_function'] as $item) {\n                if (function_exists($item)) {\n                    $upgrade['success'] = false;\n                    $upgrade['duplicate'] = true;\n\n                    break 2;\n                }\n            }\n\n            include $file_detail['file'];\n\n            // Call the upgrade function if defined\n            $upgrade['success'] = false;\n            foreach ($file_detail['upgrade_function'] as $item) {\n                if (function_exists($item)) {\n                    $upgrade['success'] = $item($this);\n                }\n            }\n\n            // Set detail when an upgrade succeed or failed\n            if ($upgrade['success']) {\n                ++$upgrade['number_upgraded'];\n                $upgrade['upgraded_to'] = $file_detail['version'];\n\n                unset($upgrade['upgrade_file_left'][$num]);\n            } else {\n                $upgrade['version_fail'] = $file_detail['version'];\n\n                // If any errors, the module is disabled\n                $this->disable();\n\n                break;\n            }\n        }\n\n        $upgrade['number_upgrade_left'] = count($upgrade['upgrade_file_left']);\n\n        // Update module version in DB with the last succeed upgrade\n        if ($upgrade['upgraded_to']) {\n            Module::upgradeModuleVersion($this->name, $upgrade['upgraded_to']);\n        }\n        $this->setUpgradeMessage($upgrade);\n\n        return $upgrade;\n    }\n\n    /**\n     * Upgrade the registered version to a new one.\n     *\n     * @param $name\n     * @param $version\n     *\n     * @return bool\n     */\n    public static function upgradeModuleVersion($name, $version)\n    {\n        return Db::getInstance()->execute('\n            UPDATE `' . _DB_PREFIX_ . 'module` m\n            SET m.version = \\'' . pSQL($version) . '\\'\n            WHERE m.name = \\'' . pSQL($name) . '\\'');\n    }\n\n    /**\n     * Check if a module need to be upgraded.\n     * This method modify the module_cache adding an upgrade list file.\n     *\n     * @param $module\n     *\n     * @return bool\n     */\n    public static function needUpgrade($module)\n    {\n        self::$modules_cache[$module->name]['upgrade']['upgraded_from'] = $module->database_version;\n        // Check the version of the module with the registered one and look if any upgrade file exist\n        if (Tools::version_compare($module->version, $module->database_version, '>')) {\n            $old_version = $module->database_version;\n            $module = Module::getInstanceByName($module->name);\n            if ($module instanceof Module) {\n                return $module->loadUpgradeVersionList($module->name, $module->version, $old_version);\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Load the available list of upgrade of a specified module\n     * with an associated version.\n     *\n     * @param $module_name\n     * @param $module_version\n     * @param $registered_version\n     *\n     * @return bool to know directly if any files have been found\n     */\n    protected static function loadUpgradeVersionList($module_name, $module_version, $registered_version)\n    {\n        $list = array();\n\n        $upgrade_path = _PS_MODULE_DIR_ . $module_name . '/upgrade/';\n\n        // Check if folder exist and it could be read\n        if (file_exists($upgrade_path) && ($files = scandir($upgrade_path, SCANDIR_SORT_NONE))) {\n            // Read each file name\n            foreach ($files as $file) {\n                if (!in_array($file, array('.', '..', '.svn', 'index.php')) && preg_match('/\\.php$/', $file)) {\n                    $tab = explode('-', $file);\n\n                    if (!isset($tab[1])) {\n                        continue;\n                    }\n\n                    $file_version = basename($tab[1], '.php');\n                    // Compare version, if minor than actual, we need to upgrade the module\n                    if (count($tab) == 2 &&\n                         (Tools::version_compare($file_version, $module_version, '<=') &&\n                            Tools::version_compare($file_version, $registered_version, '>'))) {\n                        $list[] = array(\n                            'file' => $upgrade_path . $file,\n                            'version' => $file_version,\n                            'upgrade_function' => array(\n                                'upgrade_module_' . str_replace('.', '_', $file_version),\n                                'upgradeModule' . str_replace('.', '', $file_version), ),\n                        );\n                    }\n                }\n            }\n        }\n\n        // No files upgrade, then upgrade succeed\n        if (count($list) == 0) {\n            self::$modules_cache[$module_name]['upgrade']['success'] = true;\n            Module::upgradeModuleVersion($module_name, $module_version);\n        }\n\n        usort($list, 'ps_module_version_sort');\n\n        // Set the list to module cache\n        self::$modules_cache[$module_name]['upgrade']['upgrade_file_left'] = $list;\n        self::$modules_cache[$module_name]['upgrade']['available_upgrade'] = count($list);\n\n        return (bool) count($list);\n    }\n\n    /**\n     * Return the status of the upgraded module.\n     *\n     * @param $module_name\n     *\n     * @return bool\n     */\n    public static function getUpgradeStatus($module_name)\n    {\n        return isset(self::$modules_cache[$module_name]) &&\n            self::$modules_cache[$module_name]['upgrade']['success'];\n    }\n\n    /**\n     * Delete module from datable.\n     *\n     * @return bool result\n     */\n    public function uninstall()\n    {\n        // Check module installation id validation\n        if (!Validate::isUnsignedId($this->id)) {\n            $this->_errors[] = Context::getContext()->getTranslator()->trans('The module is not installed.', array(), 'Admin.Modules.Notification');\n\n            return false;\n        }\n\n        // Uninstall overrides\n        if (!$this->uninstallOverrides()) {\n            return false;\n        }\n\n        // Retrieve hooks used by the module\n        $sql = 'SELECT DISTINCT(`id_hook`) FROM `' . _DB_PREFIX_ . 'hook_module` WHERE `id_module` = ' . (int) $this->id;\n        $result = Db::getInstance()->executeS($sql);\n        foreach ($result as $row) {\n            $this->unregisterHook((int) $row['id_hook']);\n            $this->unregisterExceptions((int) $row['id_hook']);\n        }\n\n        foreach ($this->controllers as $controller) {\n            $page_name = 'module-' . $this->name . '-' . $controller;\n            $meta = Db::getInstance()->getValue('SELECT id_meta FROM `' . _DB_PREFIX_ . 'meta` WHERE page=\"' . pSQL($page_name) . '\"');\n            if ((int) $meta > 0) {\n                Db::getInstance()->execute('DELETE FROM `' . _DB_PREFIX_ . 'meta_lang` WHERE id_meta=' . (int) $meta);\n                Db::getInstance()->execute('DELETE FROM `' . _DB_PREFIX_ . 'meta` WHERE id_meta=' . (int) $meta);\n            }\n        }\n\n        // Disable the module for all shops\n        $this->disable(true);\n\n        // Delete permissions module access\n        $roles = Db::getInstance()->executeS('SELECT `id_authorization_role` FROM `' . _DB_PREFIX_ . 'authorization_role` WHERE `slug` LIKE \"ROLE_MOD_MODULE_' . strtoupper($this->name) . '_%\"');\n\n        if (!empty($roles)) {\n            foreach ($roles as $role) {\n                Db::getInstance()->execute(\n                    'DELETE FROM `' . _DB_PREFIX_ . 'module_access` WHERE `id_authorization_role` = ' . $role['id_authorization_role']\n                );\n                Db::getInstance()->execute(\n                    'DELETE FROM `' . _DB_PREFIX_ . 'authorization_role` WHERE `id_authorization_role` = ' . $role['id_authorization_role']\n                );\n            }\n        }\n\n        // Remove restrictions for client groups\n        Group::truncateRestrictionsByModule($this->id);\n\n        // Uninstall the module\n        if (Db::getInstance()->execute('DELETE FROM `' . _DB_PREFIX_ . 'module` WHERE `id_module` = ' . (int) $this->id)) {\n            Cache::clean('Module::isInstalled' . $this->name);\n            Cache::clean('Module::getModuleIdByName_' . pSQL($this->name));\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * This function enable module $name. If an $name is an array,\n     * this will enable all of them.\n     *\n     * @param array|string $name\n     *\n     * @return true if succeed\n     *\n     * @since 1.4.1\n     * @deprecated since 1.7\n     * @see  PrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleManager->enable($name)\n     */\n    public static function enableByName($name)\n    {\n        // If $name is not an array, we set it as an array\n        if (!is_array($name)) {\n            $name = array($name);\n        }\n        $res = true;\n        // Enable each module\n        foreach ($name as $n) {\n            if (Validate::isModuleName($n)) {\n                $res &= Module::getInstanceByName($n)->enable();\n            }\n        }\n\n        return $res;\n    }\n\n    /**\n     * Activate current module.\n     *\n     * @param bool $force_all If true, enable module for all shop\n     */\n    public function enable($force_all = false)\n    {\n        // Retrieve all shops where the module is enabled\n        $list = Shop::getContextListShopID();\n        if (!$this->id || !is_array($list)) {\n            return false;\n        }\n        $sql = 'SELECT `id_shop` FROM `' . _DB_PREFIX_ . 'module_shop`\n                WHERE `id_module` = ' . (int) $this->id .\n                ((!$force_all) ? ' AND `id_shop` IN(' . implode(', ', $list) . ')' : '');\n\n        // Store the results in an array\n        $items = array();\n        if ($results = Db::getInstance($sql)->executeS($sql)) {\n            foreach ($results as $row) {\n                $items[] = $row['id_shop'];\n            }\n        }\n\n        if ($this->getOverrides() != null) {\n            // Install overrides\n            try {\n                $this->installOverrides();\n            } catch (Exception $e) {\n                $this->_errors[] = Context::getContext()->getTranslator()->trans('Unable to install override: %s', array($e->getMessage()), 'Admin.Modules.Notification');\n                $this->uninstallOverrides();\n\n                return false;\n            }\n        }\n\n        // Enable module in the shop where it is not enabled yet\n        foreach ($list as $id) {\n            if (!in_array($id, $items)) {\n                Db::getInstance()->insert('module_shop', array(\n                    'id_module' => $this->id,\n                    'id_shop' => $id,\n                ));\n            }\n        }\n\n        return true;\n    }\n\n    public function enableDevice($device)\n    {\n        Db::getInstance()->execute(\n            '\n            UPDATE ' . _DB_PREFIX_ . 'module_shop\n            SET enable_device = enable_device + ' . (int) $device . '\n            WHERE (enable_device &~ ' . (int) $device . ' OR enable_device = 0) AND id_module=' . (int) $this->id .\n            Shop::addSqlRestriction()\n        );\n\n        return true;\n    }\n\n    public function disableDevice($device)\n    {\n        Db::getInstance()->execute(\n            'UPDATE ' . _DB_PREFIX_ . 'module_shop\n            SET enable_device = enable_device - ' . (int) $device . '\n            WHERE enable_device & ' . (int) $device . ' AND id_module=' . (int) $this->id .\n            Shop::addSqlRestriction()\n        );\n\n        return true;\n    }\n\n    /**\n     * This function disable all module $name. If an $name is an array,\n     * this will disable all of them.\n     *\n     * @param array|string $name\n     *\n     * @return true if succeed\n     *\n     * @since 1.7\n     */\n    public static function disableAllByName($name)\n    {\n        // If $name is not an array, we set it as an array\n        if (!is_array($name)) {\n            $name = array($name);\n        }\n        $res = true;\n        // Disable each module\n        foreach ($name as $n) {\n            $sql = 'DELETE `' . _DB_PREFIX_ . 'module_shop` FROM `' . _DB_PREFIX_ . 'module_shop` JOIN `' . _DB_PREFIX_ . 'module` USING (id_module) WHERE `name` = \"' . pSQL($n) . '\"';\n            $res &= Db::getInstance()->execute($sql);\n        }\n\n        return $res;\n    }\n\n    /**\n     * This function disable module $name. If an $name is an array,\n     * this will disable all of them.\n     *\n     * @param array|string $name\n     *\n     * @return true if succeed\n     *\n     * @since 1.4.1\n     * @deprecated since 1.7\n     * @see  PrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleManager->disable($name)\n     */\n    public static function disableByName($name)\n    {\n        // If $name is not an array, we set it as an array\n        if (!is_array($name)) {\n            $name = array($name);\n        }\n        $res = true;\n        // Disable each module\n        foreach ($name as $n) {\n            if (Validate::isModuleName($n)) {\n                $res &= Module::getInstanceByName($n)->disable();\n            }\n        }\n\n        return $res;\n    }\n\n    /**\n     * Desactivate current module.\n     *\n     * @param bool $force_all If true, disable module for all shop\n     */\n    public function disable($force_all = false)\n    {\n        $result = true;\n        if ($this->getOverrides() != null) {\n            $result &= $this->uninstallOverrides();\n        }\n\n        // Disable module for all shops\n        $sql = 'DELETE FROM `' . _DB_PREFIX_ . 'module_shop` WHERE `id_module` = ' . (int) $this->id . ' ' . ((!$force_all) ? ' AND `id_shop` IN(' . implode(', ', Shop::getContextListShopID()) . ')' : '');\n\n        return $result && Db::getInstance()->execute($sql);\n    }\n\n    /**\n     * Display flags in forms for translations.\n     *\n     * @deprecated since 1.6.0.10\n     *\n     * @param array $languages All languages available\n     * @param int $default_language Default language id\n     * @param string $ids Multilingual div ids in form\n     * @param string $id Current div id]\n     * @param bool $return define the return way : false for a display, true for a return\n     * @param bool $use_vars_instead_of_ids use an js vars instead of ids seperate by \"\u00a4\"\n     */\n    public function displayFlags($languages, $default_language, $ids, $id, $return = false, $use_vars_instead_of_ids = false)\n    {\n        if (count($languages) == 1) {\n            return false;\n        }\n\n        $output = '\n        <div class=\"displayed_flag\">\n            <img src=\"../img/l/' . $default_language . '.jpg\" class=\"pointer\" id=\"language_current_' . $id . '\" onclick=\"toggleLanguageFlags(this);\" alt=\"\" />\n        </div>\n        <div id=\"languages_' . $id . '\" class=\"language_flags\">\n            ' . $this->getTranslator()->trans('Choose language:', array(), 'Admin.Actions') . '<br /><br />';\n        foreach ($languages as $language) {\n            if ($use_vars_instead_of_ids) {\n                $output .= '<img src=\"../img/l/' . (int) $language['id_lang'] . '.jpg\" class=\"pointer\" alt=\"' . $language['name'] . '\" title=\"' . $language['name'] . '\" onclick=\"changeLanguage(\\'' . $id . '\\', ' . $ids . ', ' . $language['id_lang'] . ', \\'' . $language['iso_code'] . '\\');\" /> ';\n            } else {\n                $output .= '<img src=\"../img/l/' . (int) $language['id_lang'] . '.jpg\" class=\"pointer\" alt=\"' . $language['name'] . '\" title=\"' . $language['name'] . '\" onclick=\"changeLanguage(\\'' . $id . '\\', \\'' . $ids . '\\', ' . $language['id_lang'] . ', \\'' . $language['iso_code'] . '\\');\" /> ';\n            }\n        }\n        $output .= '</div>';\n\n        if ($return) {\n            return $output;\n        }\n        echo $output;\n    }\n\n    /**\n     * Connect module to a hook.\n     *\n     * @param string $hook_name Hook name\n     * @param array $shop_list List of shop linked to the hook (if null, link hook to all shops)\n     *\n     * @return bool result\n     */\n    public function registerHook($hook_name, $shop_list = null)\n    {\n        return Hook::registerHook($this, $hook_name, $shop_list);\n    }\n\n    /**\n     * Unregister module from hook.\n     *\n     * @param mixed $id_hook Hook id (can be a hook name since 1.5.0)\n     * @param array $shop_list List of shop\n     *\n     * @return bool result\n     */\n    public function unregisterHook($hook_id, $shop_list = null)\n    {\n        return Hook::unregisterHook($this, $hook_id, $shop_list);\n    }\n\n    /**\n     * Unregister exceptions linked to module.\n     *\n     * @param int $id_hook Hook id\n     * @param array $shop_list List of shop\n     *\n     * @return bool result\n     */\n    public function unregisterExceptions($hook_id, $shop_list = null)\n    {\n        $sql = 'DELETE FROM `' . _DB_PREFIX_ . 'hook_module_exceptions`\n            WHERE `id_module` = ' . (int) $this->id . ' AND `id_hook` = ' . (int) $hook_id\n            . (($shop_list) ? ' AND `id_shop` IN(' . implode(', ', array_map('intval', $shop_list)) . ')' : '');\n\n        return Db::getInstance()->execute($sql);\n    }\n\n    /**\n     * Add exceptions for module->Hook.\n     *\n     * @param int $id_hook Hook id\n     * @param array $excepts List of file name\n     * @param array $shop_list List of shop\n     *\n     * @return bool result\n     */\n    public function registerExceptions($id_hook, $excepts, $shop_list = null)\n    {\n        // If shop lists is null, we fill it with all shops\n        if (null === $shop_list) {\n            $shop_list = Shop::getContextListShopID();\n        }\n\n        // Save modules exception for each shop\n        foreach ($shop_list as $shop_id) {\n            foreach ($excepts as $except) {\n                if (!$except) {\n                    continue;\n                }\n                $insert_exception = array(\n                    'id_module' => (int) $this->id,\n                    'id_hook' => (int) $id_hook,\n                    'id_shop' => (int) $shop_id,\n                    'file_name' => pSQL($except),\n                );\n                $result = Db::getInstance()->insert('hook_module_exceptions', $insert_exception);\n                if (!$result) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Edit exceptions for module->Hook.\n     *\n     * @param int $hookID Hook id\n     * @param array $excepts List of shopID and file name\n     *\n     * @return bool result\n     */\n    public function editExceptions($id_hook, $excepts)\n    {\n        $result = true;\n        foreach ($excepts as $shop_id => $except) {\n            $shop_list = ($shop_id == 0) ? Shop::getContextListShopID() : array($shop_id);\n            $this->unregisterExceptions($id_hook, $shop_list);\n            $result &= $this->registerExceptions($id_hook, $except, $shop_list);\n        }\n\n        return $result;\n    }\n\n    /**\n     * This function is used to determine the module name\n     * of an AdminTab which belongs to a module, in order to keep translation\n     * related to a module in its directory (instead of $_LANGADM).\n     *\n     * @param mixed $current_class the\n     *\n     * @return bool|string if the class belongs to a module, will return the module name. Otherwise, return false.\n     */\n    public static function getModuleNameFromClass($current_class)\n    {\n        // Module can now define AdminTab keeping the module translations method,\n        // i.e. in modules/[module name]/[iso_code].php\n        if (!isset(self::$classInModule[$current_class]) && class_exists($current_class)) {\n            global $_MODULES;\n            $_MODULE = array();\n            $reflection_class = new ReflectionClass($current_class);\n            $file_path = realpath($reflection_class->getFileName());\n            $realpath_module_dir = realpath(_PS_MODULE_DIR_);\n            if (substr(realpath($file_path), 0, strlen($realpath_module_dir)) == $realpath_module_dir) {\n                // For controllers in module/controllers path\n                if (basename(dirname(dirname($file_path))) == 'controllers') {\n                    self::$classInModule[$current_class] = basename(dirname(dirname(dirname($file_path))));\n                } else {\n                    // For old AdminTab controllers\n                    self::$classInModule[$current_class] = substr(dirname($file_path), strlen($realpath_module_dir) + 1);\n                }\n\n                $file = _PS_MODULE_DIR_ . self::$classInModule[$current_class] . '/' . Context::getContext()->language->iso_code . '.php';\n                if (Tools::file_exists_cache($file) && include_once($file)) {\n                    $_MODULES = !empty($_MODULES) ? array_merge($_MODULES, $_MODULE) : $_MODULE;\n                }\n            } else {\n                self::$classInModule[$current_class] = false;\n            }\n        }\n\n        // return name of the module, or false\n        return self::$classInModule[$current_class];\n    }\n\n    /**\n     * Return an instance of the specified module.\n     *\n     * @param string $module_name Module name\n     *\n     * @return Module\n     */\n    public static function getInstanceByName($module_name)\n    {\n        if (!Validate::isModuleName($module_name)) {\n            if (_PS_MODE_DEV_) {\n                die(Tools::displayError(Context::getContext()->getTranslator()->trans('%1$s is not a valid module name.', array(Tools::safeOutput($module_name)), 'Admin.Modules.Notification')));\n            }\n\n            return false;\n        }\n\n        if (!isset(self::$_INSTANCE[$module_name])) {\n            if (!Tools::file_exists_no_cache(_PS_MODULE_DIR_ . $module_name . '/' . $module_name . '.php')) {\n                return false;\n            }\n\n            return Module::coreLoadModule($module_name);\n        }\n\n        return self::$_INSTANCE[$module_name];\n    }\n\n    protected static function coreLoadModule($module_name)\n    {\n        include_once _PS_MODULE_DIR_ . $module_name . '/' . $module_name . '.php';\n\n        $r = false;\n        if (Tools::file_exists_no_cache(_PS_OVERRIDE_DIR_ . 'modules/' . $module_name . '/' . $module_name . '.php')) {\n            include_once _PS_OVERRIDE_DIR_ . 'modules/' . $module_name . '/' . $module_name . '.php';\n            $override = $module_name . 'Override';\n\n            if (class_exists($override, false)) {\n                $r = self::$_INSTANCE[$module_name] = ServiceLocator::get($override);\n            }\n        }\n\n        if (!$r && class_exists($module_name, false)) {\n            $r = self::$_INSTANCE[$module_name] = ServiceLocator::get($module_name);\n        }\n\n        return $r;\n    }\n\n    /**\n     * Return an instance of the specified module.\n     *\n     * @param int $id_module Module ID\n     *\n     * @return Module instance\n     */\n    public static function getInstanceById($id_module)\n    {\n        if (null === self::$cachedModuleNames) {\n            self::$cachedModuleNames = [];\n            $sql = 'SELECT `id_module`, `name` FROM `' . _DB_PREFIX_ . 'module`';\n            if ($results = Db::getInstance()->executeS($sql)) {\n                foreach ($results as $row) {\n                    self::$cachedModuleNames[$row['id_module']] = $row['name'];\n                }\n            }\n        }\n\n        if (isset(self::$cachedModuleNames[$id_module])) {\n            return Module::getInstanceByName(self::$cachedModuleNames[$id_module]);\n        }\n\n        return false;\n    }\n\n    /**\n     * Clear static cache.\n     */\n    public static function clearStaticCache()\n    {\n        self::$cachedModuleNames = null;\n    }\n\n    public static function configXmlStringFormat($string)\n    {\n        return Tools::htmlentitiesDecodeUTF8($string);\n    }\n\n    public static function getModuleName($module)\n    {\n        $iso = substr(Context::getContext()->language->iso_code, 0, 2);\n\n        // Config file\n        $config_file = _PS_MODULE_DIR_ . $module . '/config_' . $iso . '.xml';\n        // For \"en\" iso code, we keep the default config.xml name\n        if ($iso == 'en' || !file_exists($config_file)) {\n            $config_file = _PS_MODULE_DIR_ . $module . '/config.xml';\n            if (!file_exists($config_file)) {\n                return 'Module ' . ucfirst($module);\n            }\n        }\n\n        // Load config.xml\n        libxml_use_internal_errors(true);\n        $xml_module = @simplexml_load_file($config_file);\n        if (!$xml_module) {\n            return 'Module ' . ucfirst($module);\n        }\n        foreach (libxml_get_errors() as $error) {\n            libxml_clear_errors();\n\n            return 'Module ' . ucfirst($module);\n        }\n        libxml_clear_errors();\n\n        // Find translations\n        global $_MODULES;\n        $file = _PS_MODULE_DIR_ . $module . '/' . Context::getContext()->language->iso_code . '.php';\n        if (Tools::file_exists_cache($file) && include_once($file)) {\n            if (isset($_MODULE) && is_array($_MODULE)) {\n                $_MODULES = !empty($_MODULES) ? array_merge($_MODULES, $_MODULE) : $_MODULE;\n            }\n        }\n\n        // Return Name\n        return Translate::getModuleTranslation((string) $xml_module->name, Module::configXmlStringFormat($xml_module->displayName), (string) $xml_module->name);\n    }\n\n    protected static function useTooMuchMemory()\n    {\n        $memory_limit = Tools::getMemoryLimit();\n        if (function_exists('memory_get_usage') && $memory_limit != '-1') {\n            $current_memory = memory_get_usage(true);\n            $memory_threshold = (int) max($memory_limit * 0.15, Tools::isX86_64arch() ? 4194304 : 2097152);\n            $memory_left = $memory_limit - $current_memory;\n\n            if ($memory_left <= $memory_threshold) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Return available modules.\n     *\n     * @param bool $use_config in order to use config.xml file in module dir\n     *\n     * @return array Modules\n     */\n    public static function getModulesOnDisk($use_config = false, $logged_on_addons = false, $id_employee = false)\n    {\n        global $_MODULES;\n\n        // Init var\n        $module_list = array();\n        $module_name_list = array();\n        $modules_name_to_cursor = array();\n        $errors = array();\n\n        // Get modules directory list and memory limit\n        $modules_dir = Module::getModulesDirOnDisk();\n\n        $modules_installed = array();\n        $result = Db::getInstance()->executeS('\n        SELECT m.name, m.version, mp.interest, module_shop.enable_device\n        FROM `' . _DB_PREFIX_ . 'module` m\n        ' . Shop::addSqlAssociation('module', 'm', false) . '\n        LEFT JOIN `' . _DB_PREFIX_ . 'module_preference` mp ON (mp.`module` = m.`name` AND mp.`id_employee` = ' . (int) $id_employee . ')');\n        foreach ($result as $row) {\n            $modules_installed[$row['name']] = $row;\n        }\n\n        foreach ($modules_dir as $module) {\n            $module_errors = array();\n            if (Module::useTooMuchMemory()) {\n                $module_errors[] = Context::getContext()->getTranslator()->trans('All modules cannot be loaded due to memory limit restrictions, please increase your memory_limit value on your server configuration', array(), 'Admin.Modules.Notification');\n\n                break;\n            }\n\n            $iso = substr(Context::getContext()->language->iso_code, 0, 2);\n\n            // Check if config.xml module file exists and if it's not outdated\n\n            if ($iso == 'en') {\n                $config_file = _PS_MODULE_DIR_ . $module . '/config.xml';\n            } else {\n                $config_file = _PS_MODULE_DIR_ . $module . '/config_' . $iso . '.xml';\n            }\n\n            $xml_exist = (file_exists($config_file));\n            $need_new_config_file = $xml_exist ? (@filemtime($config_file) < @filemtime(_PS_MODULE_DIR_ . $module . '/' . $module . '.php')) : true;\n\n            // If config.xml exists and that the use config flag is at true\n            if ($use_config && $xml_exist && !$need_new_config_file) {\n                // Load config.xml\n                libxml_use_internal_errors(true);\n                $xml_module = @simplexml_load_file($config_file);\n                if (!$xml_module) {\n                    $module_errors[] = Context::getContext()->getTranslator()->trans(\n                        '%s could not be loaded.',\n                        array($config_file),\n                        'Admin.Modules.Notification'\n                    );\n\n                    break;\n                }\n                foreach (libxml_get_errors() as $error) {\n                    $module_errors[] = '[' . $module . '] ' . Context::getContext()->getTranslator()->trans('Error found in config file:', array(), 'Admin.Modules.Notification') . ' ' . htmlentities($error->message);\n                }\n                libxml_clear_errors();\n\n                // If no errors in Xml, no need instand and no need new config.xml file, we load only translations\n                if (!count($module_errors) && (int) $xml_module->need_instance == 0) {\n                    $file = _PS_MODULE_DIR_ . $module . '/' . Context::getContext()->language->iso_code . '.php';\n                    if (Tools::file_exists_cache($file) && include_once($file)) {\n                        if (isset($_MODULE) && is_array($_MODULE)) {\n                            $_MODULES = !empty($_MODULES) ? array_merge($_MODULES, $_MODULE) : $_MODULE;\n                        }\n                    }\n\n                    $item = new \\stdClass();\n                    $item->id = 0;\n                    $item->warning = '';\n\n                    foreach ($xml_module as $k => $v) {\n                        $item->$k = (string) $v;\n                    }\n\n                    $item->displayName = stripslashes(Translate::getModuleTranslation((string) $xml_module->name, Module::configXmlStringFormat($xml_module->displayName), (string) $xml_module->name));\n                    $item->description = stripslashes(Translate::getModuleTranslation((string) $xml_module->name, Module::configXmlStringFormat($xml_module->description), (string) $xml_module->name));\n                    $item->author = stripslashes(Translate::getModuleTranslation((string) $xml_module->name, Module::configXmlStringFormat($xml_module->author), (string) $xml_module->name));\n                    $item->author_uri = (isset($xml_module->author_uri) && $xml_module->author_uri) ? stripslashes($xml_module->author_uri) : false;\n\n                    if (isset($xml_module->confirmUninstall)) {\n                        $item->confirmUninstall = Translate::getModuleTranslation((string) $xml_module->name, html_entity_decode(Module::configXmlStringFormat($xml_module->confirmUninstall)), (string) $xml_module->name);\n                    }\n\n                    $item->active = 0;\n                    $item->onclick_option = false;\n                    $item->trusted = Module::isModuleTrusted($item->name);\n\n                    $module_list[$item->name . '_disk'] = $item;\n\n                    $module_name_list[] = '\\'' . pSQL($item->name) . '\\'';\n                    $modules_name_to_cursor[Tools::strtolower((string) ($item->name))] = $item;\n                }\n            }\n\n            // If use config flag is at false or config.xml does not exist OR need instance OR need a new config.xml file\n            if (!$use_config || !$xml_exist || (isset($xml_module->need_instance) && (int) $xml_module->need_instance == 1) || $need_new_config_file) {\n                // If class does not exists, we include the file\n                if (!class_exists($module, false)) {\n                    // Get content from php file\n                    $file_path = _PS_MODULE_DIR_ . $module . '/' . $module . '.php';\n                    $file = trim(file_get_contents(_PS_MODULE_DIR_ . $module . '/' . $module . '.php'));\n\n                    try {\n                        $parser = (new PhpParser\\ParserFactory())->create(PhpParser\\ParserFactory::PREFER_PHP7);\n                        $parser->parse($file);\n                        require_once $file_path;\n                    } catch (PhpParser\\Error $e) {\n                        $errors[] = Context::getContext()->getTranslator()->trans('%1$s (parse error in %2$s)', array($module, substr($file_path, strlen(_PS_ROOT_DIR_))), 'Admin.Modules.Notification');\n                    }\n\n                    preg_match('/\\n[\\s\\t]*?namespace\\s.*?;/', $file, $ns);\n                    if (!empty($ns)) {\n                        $ns = preg_replace('/\\n[\\s\\t]*?namespace\\s/', '', $ns[0]);\n                        $ns = rtrim($ns, ';');\n                        $module = $ns . '\\\\' . $module;\n                    }\n                }\n\n                // If class exists, we just instanciate it\n                if (class_exists($module, false)) {\n                    try {\n                        $tmp_module = ServiceLocator::get($module);\n\n                        $item = new \\stdClass();\n\n                        $item->id = (int) $tmp_module->id;\n                        $item->warning = $tmp_module->warning;\n                        $item->name = $tmp_module->name;\n                        $item->version = $tmp_module->version;\n                        $item->tab = $tmp_module->tab;\n                        $item->displayName = $tmp_module->displayName;\n                        $item->description = stripslashes($tmp_module->description);\n                        $item->author = $tmp_module->author;\n                        $item->author_uri = (isset($tmp_module->author_uri) && $tmp_module->author_uri) ? $tmp_module->author_uri : false;\n                        $item->limited_countries = $tmp_module->limited_countries;\n                        $item->parent_class = get_parent_class($module);\n                        $item->is_configurable = $tmp_module->is_configurable = method_exists($tmp_module, 'getContent') ? 1 : 0;\n                        $item->need_instance = isset($tmp_module->need_instance) ? $tmp_module->need_instance : 0;\n                        $item->active = $tmp_module->active;\n                        $item->trusted = Module::isModuleTrusted($tmp_module->name);\n                        $item->currencies = isset($tmp_module->currencies) ? $tmp_module->currencies : null;\n                        $item->currencies_mode = isset($tmp_module->currencies_mode) ? $tmp_module->currencies_mode : null;\n                        $item->confirmUninstall = isset($tmp_module->confirmUninstall) ? html_entity_decode($tmp_module->confirmUninstall) : null;\n                        $item->description_full = stripslashes($tmp_module->description_full);\n                        $item->additional_description = isset($tmp_module->additional_description) ? stripslashes($tmp_module->additional_description) : null;\n                        $item->compatibility = isset($tmp_module->compatibility) ? (array) $tmp_module->compatibility : null;\n                        $item->nb_rates = isset($tmp_module->nb_rates) ? (array) $tmp_module->nb_rates : null;\n                        $item->avg_rate = isset($tmp_module->avg_rate) ? (array) $tmp_module->avg_rate : null;\n                        $item->badges = isset($tmp_module->badges) ? (array) $tmp_module->badges : null;\n                        $item->url = isset($tmp_module->url) ? $tmp_module->url : null;\n                        $item->onclick_option = method_exists($module, 'onclickOption') ? true : false;\n\n                        if ($item->onclick_option) {\n                            $href = Context::getContext()->link->getAdminLink('Module', true, array(), array('module_name' => $tmp_module->name, 'tab_module' => $tmp_module->tab));\n                            $item->onclick_option_content = array();\n                            $option_tab = array('desactive', 'reset', 'configure', 'delete');\n\n                            foreach ($option_tab as $opt) {\n                                $item->onclick_option_content[$opt] = $tmp_module->onclickOption($opt, $href);\n                            }\n                        }\n\n                        $module_list[$item->name . '_disk'] = $item;\n\n                        if (!$xml_exist || $need_new_config_file) {\n                            self::$_generate_config_xml_mode = true;\n                            $tmp_module->_generateConfigXml();\n                            self::$_generate_config_xml_mode = false;\n                        }\n\n                        unset($tmp_module);\n                    } catch (Exception $e) {\n                    }\n                } else {\n                    $module_errors[] = Context::getContext()->getTranslator()->trans('%1$s (class missing in %2$s)', array($module, substr($file_path, strlen(_PS_ROOT_DIR_))), 'Admin.Modules.Notification');\n                }\n            }\n            $errors = array_merge($errors, $module_errors);\n        }\n\n        // Get modules information from database\n        if (!empty($module_name_list)) {\n            $list = Shop::getContextListShopID();\n            $sql = 'SELECT m.id_module, m.name, (\n                        SELECT COUNT(*) FROM ' . _DB_PREFIX_ . 'module_shop ms WHERE m.id_module = ms.id_module AND ms.id_shop IN (' . implode(',', $list) . ')\n                    ) as total\n                    FROM ' . _DB_PREFIX_ . 'module m\n                    WHERE LOWER(m.name) IN (' . Tools::strtolower(implode(',', $module_name_list)) . ')';\n            $results = Db::getInstance()->executeS($sql);\n\n            foreach ($results as $result) {\n                if (isset($modules_name_to_cursor[Tools::strtolower($result['name'])])) {\n                    $module_cursor = $modules_name_to_cursor[Tools::strtolower($result['name'])];\n                    $module_cursor->id = (int) $result['id_module'];\n                    $module_cursor->active = ($result['total'] == count($list)) ? 1 : 0;\n                }\n            }\n        }\n\n        // Get Default Country Modules and customer module\n        $files_list = array(\n            array('type' => 'addonsNative', 'file' => _PS_ROOT_DIR_ . self::CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST, 'loggedOnAddons' => 0),\n            array('type' => 'addonsMustHave', 'file' => _PS_ROOT_DIR_ . self::CACHE_FILE_MUST_HAVE_MODULES_LIST, 'loggedOnAddons' => 0),\n            array('type' => 'addonsBought', 'file' => _PS_ROOT_DIR_ . self::CACHE_FILE_CUSTOMER_MODULES_LIST, 'loggedOnAddons' => 1),\n        );\n        foreach ($files_list as $f) {\n            if (file_exists($f['file']) && ($f['loggedOnAddons'] == 0 || $logged_on_addons)) {\n                if (Module::useTooMuchMemory()) {\n                    $errors[] = Context::getContext()->getTranslator()->trans('All modules cannot be loaded due to memory limit restrictions, please increase your memory_limit value on your server configuration', array(), 'Admin.Modules.Notification');\n\n                    break;\n                }\n\n                $file = $f['file'];\n                $content = Tools::file_get_contents($file);\n                $xml = @simplexml_load_string($content, null, LIBXML_NOCDATA);\n\n                if ($xml && isset($xml->module)) {\n                    foreach ($xml->module as $modaddons) {\n                        $flag_found = 0;\n\n                        foreach ($module_list as $k => &$m) {\n                            if (Tools::strtolower($m->name) == Tools::strtolower($modaddons->name) && !isset($m->available_on_addons)) {\n                                $flag_found = 1;\n                                if ($m->version != $modaddons->version && version_compare($m->version, $modaddons->version) === -1) {\n                                    $module_list[$k]->version_addons = $modaddons->version;\n                                }\n                            }\n                        }\n\n                        if ($flag_found == 0) {\n                            $item = new \\stdClass();\n                            $item->id = 0;\n                            $item->warning = '';\n                            $item->type = strip_tags((string) $f['type']);\n                            $item->name = strip_tags((string) $modaddons->name);\n                            $item->version = strip_tags((string) $modaddons->version);\n                            $item->tab = strip_tags((string) $modaddons->tab);\n                            $item->displayName = strip_tags((string) $modaddons->displayName);\n                            $item->description = stripslashes(strip_tags((string) $modaddons->description));\n                            $item->description_full = stripslashes(strip_tags((string) $modaddons->description_full));\n                            $item->author = strip_tags((string) $modaddons->author);\n                            $item->limited_countries = array();\n                            $item->parent_class = '';\n                            $item->onclick_option = false;\n                            $item->is_configurable = 0;\n                            $item->need_instance = 0;\n                            $item->not_on_disk = 1;\n                            $item->available_on_addons = 1;\n                            $item->trusted = Module::isModuleTrusted($item->name);\n                            $item->active = 0;\n                            $item->description_full = stripslashes($modaddons->description_full);\n                            $item->additional_description = isset($modaddons->additional_description) ? stripslashes($modaddons->additional_description) : null;\n                            $item->compatibility = isset($modaddons->compatibility) ? (array) $modaddons->compatibility : null;\n                            $item->nb_rates = isset($modaddons->nb_rates) ? (array) $modaddons->nb_rates : null;\n                            $item->avg_rate = isset($modaddons->avg_rate) ? (array) $modaddons->avg_rate : null;\n                            $item->badges = isset($modaddons->badges) ? (array) $modaddons->badges : null;\n                            $item->url = isset($modaddons->url) ? $modaddons->url : null;\n                            if (isset($item->description_full) && trim($item->description_full) != '') {\n                                $item->show_quick_view = true;\n                            }\n\n                            if (isset($modaddons->img)) {\n                                $item->image = Module::copyModAddonsImg($modaddons);\n                            }\n\n                            if ($item->type == 'addonsMustHave') {\n                                $item->addons_buy_url = strip_tags((string) $modaddons->url);\n                                $prices = (array) $modaddons->price;\n                                $id_default_currency = Configuration::get('PS_CURRENCY_DEFAULT');\n\n                                foreach ($prices as $currency => $price) {\n                                    if ($id_currency = Currency::getIdByIsoCode($currency)) {\n                                        $item->price = (float) $price;\n                                        $item->id_currency = (int) $id_currency;\n\n                                        if ($id_default_currency == $id_currency) {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n\n                            $module_list[$item->name . '_feed'] = $item;\n                        }\n\n                        if (isset($module_list[$modaddons->name . '_disk'])) {\n                            $module_list[$modaddons->name . '_disk']->description_full = stripslashes(strip_tags((string) $modaddons->description_full));\n                            $module_list[$modaddons->name . '_disk']->additional_description = stripslashes(strip_tags((string) $modaddons->additional_description));\n                            $module_list[$modaddons->name . '_disk']->image = Module::copyModAddonsImg($modaddons);\n                            $module_list[$modaddons->name . '_disk']->show_quick_view = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        foreach ($module_list as $key => &$module) {\n            if (!isset($module->tab)) {\n                $module->tab = 'others';\n            }\n            if (defined('_PS_HOST_MODE_') && in_array($module->name, self::$hosted_modules_blacklist)) {\n                unset($module_list[$key]);\n            } elseif (isset($modules_installed[$module->name])) {\n                $module->installed = true;\n                $module->database_version = $modules_installed[$module->name]['version'];\n                $module->interest = $modules_installed[$module->name]['interest'];\n                $module->enable_device = $modules_installed[$module->name]['enable_device'];\n            } else {\n                $module->installed = false;\n                $module->database_version = 0;\n                $module->interest = 0;\n            }\n        }\n\n        usort($module_list, function ($a, $b) {\n            return strnatcasecmp($a->displayName, $b->displayName);\n        });\n        if ($errors) {\n            if (!isset(Context::getContext()->controller) && !Context::getContext()->controller->controller_name) {\n                echo '<div class=\"alert error\"><h3>' . Context::getContext()->getTranslator()->trans('The following module(s) could not be loaded', array(), 'Admin.Modules.Notification') . ':</h3><ol>';\n                foreach ($errors as $error) {\n                    echo '<li>' . $error . '</li>';\n                }\n                echo '</ol></div>';\n            } else {\n                foreach ($errors as $error) {\n                    Context::getContext()->controller->errors[] = $error;\n                }\n            }\n        }\n\n        return $module_list;\n    }\n\n    public static function copyModAddonsImg($modaddons)\n    {\n        if (!Validate::isLoadedObject($modaddons)) {\n            return;\n        }\n        if (!file_exists(_PS_TMP_IMG_DIR_ . md5((int) $modaddons->id . '-' . $modaddons->name) . '.jpg') &&\n        !file_put_contents(_PS_TMP_IMG_DIR_ . md5((int) $modaddons->id . '-' . $modaddons->name) . '.jpg', Tools::file_get_contents($modaddons->img))) {\n            copy(_PS_IMG_DIR_ . '404.gif', _PS_TMP_IMG_DIR_ . md5((int) $modaddons->id . '-' . $modaddons->name) . '.jpg');\n        }\n        if (file_exists(_PS_TMP_IMG_DIR_ . md5((int) $modaddons->id . '-' . $modaddons->name) . '.jpg')) {\n            return '../img/tmp/' . md5((int) $modaddons->id . '-' . $modaddons->name) . '.jpg';\n        }\n    }\n\n    /**\n     * Return modules directory list.\n     *\n     * @return array Modules Directory List\n     */\n    public static function getModulesDirOnDisk()\n    {\n        $module_list = array();\n        $modules = scandir(_PS_MODULE_DIR_, SCANDIR_SORT_NONE);\n        foreach ($modules as $name) {\n            if (is_file(_PS_MODULE_DIR_ . $name)) {\n                continue;\n            } elseif (is_dir(_PS_MODULE_DIR_ . $name . DIRECTORY_SEPARATOR) && Tools::file_exists_cache(_PS_MODULE_DIR_ . $name . '/' . $name . '.php')) {\n                if (!Validate::isModuleName($name)) {\n                    throw new PrestaShopException(sprintf('Module %s is not a valid module name', $name));\n                }\n                $module_list[] = $name;\n            }\n        }\n\n        return $module_list;\n    }\n\n    /**\n     * Return non native module.\n     *\n     * @param int $position Take only positionnables modules\n     *\n     * @return array Modules\n     */\n    public static function getNonNativeModuleList()\n    {\n        $db = Db::getInstance();\n        $module_list_xml = _PS_ROOT_DIR_ . self::CACHE_FILE_MODULES_LIST;\n        $native_modules = @simplexml_load_file($module_list_xml);\n        if ($native_modules) {\n            $native_modules = $native_modules->modules;\n        }\n\n        $arr_native_modules = array();\n        if (is_object($native_modules)) {\n            foreach ($native_modules as $native_modules_type) {\n                if (in_array($native_modules_type['type'], array('native', 'partner'))) {\n                    $arr_native_modules[] = '\"\"';\n                    foreach ($native_modules_type->module as $module) {\n                        $arr_native_modules[] = '\"' . pSQL($module['name']) . '\"';\n                    }\n                }\n            }\n        }\n\n        if ($arr_native_modules) {\n            return $db->executeS('SELECT * FROM `' . _DB_PREFIX_ . 'module` m WHERE `name` NOT IN (' . implode(',', $arr_native_modules) . ') ');\n        }\n\n        return false;\n    }\n\n    public static function getNativeModuleList()\n    {\n        $module_list_xml = _PS_ROOT_DIR_ . self::CACHE_FILE_MODULES_LIST;\n        if (!file_exists($module_list_xml)) {\n            return false;\n        }\n\n        $native_modules = @simplexml_load_file($module_list_xml);\n\n        if ($native_modules) {\n            $native_modules = $native_modules->modules;\n        }\n\n        $modules = array();\n        if (is_object($native_modules)) {\n            foreach ($native_modules as $native_modules_type) {\n                if (in_array($native_modules_type['type'], array('native', 'partner'))) {\n                    foreach ($native_modules_type->module as $module) {\n                        $modules[] = $module['name'];\n                    }\n                }\n            }\n        }\n        if ($modules) {\n            return $modules;\n        }\n\n        return false;\n    }\n\n    /**\n     * Return installed modules.\n     *\n     * @param int $position Take only positionnables modules\n     *\n     * @return array Modules\n     */\n    public static function getModulesInstalled($position = 0)\n    {\n        $sql = 'SELECT m.* FROM `' . _DB_PREFIX_ . 'module` m ';\n        if ($position) {\n            $sql .= 'LEFT JOIN `' . _DB_PREFIX_ . 'hook_module` hm ON m.`id_module` = hm.`id_module`\n                 LEFT JOIN `' . _DB_PREFIX_ . 'hook` k ON hm.`id_hook` = k.`id_hook`\n                 WHERE k.`position` = 1\n                 GROUP BY m.id_module';\n        }\n\n        return Db::getInstance()->executeS($sql);\n    }\n\n    /**\n     * Return if the module is provided by addons.prestashop.com or not.\n     *\n     * @param string $name The module name (the folder name)\n     * @param string $key The key provided by addons\n     *\n     * @return int\n     */\n    final public static function isModuleTrusted($module_name)\n    {\n        static $trusted_modules_list_content = null;\n        static $modules_list_content = null;\n        static $default_country_modules_list_content = null;\n        static $untrusted_modules_list_content = null;\n\n        $context = Context::getContext();\n\n        // If the xml file exist, isn't empty, isn't too old\n        // and if the theme hadn't change\n        // we use the file, otherwise we regenerate it\n        if (!(\n            file_exists(_PS_ROOT_DIR_ . self::CACHE_FILE_TRUSTED_MODULES_LIST)\n            && filesize(_PS_ROOT_DIR_ . self::CACHE_FILE_TRUSTED_MODULES_LIST) > 0\n            && ((time() - filemtime(_PS_ROOT_DIR_ . self::CACHE_FILE_TRUSTED_MODULES_LIST)) < 86400)\n            )) {\n            self::generateTrustedXml();\n        }\n\n        if ($trusted_modules_list_content === null) {\n            $trusted_modules_list_content = Tools::file_get_contents(_PS_ROOT_DIR_ . self::CACHE_FILE_TRUSTED_MODULES_LIST);\n            if (strpos($trusted_modules_list_content, $context->shop->theme->getName()) === false) {\n                self::generateTrustedXml();\n            }\n        }\n\n        $modulesListCacheFilepath = _PS_ROOT_DIR_ . self::CACHE_FILE_MODULES_LIST;\n        if ($modules_list_content === null && is_readable($modulesListCacheFilepath)) {\n            $modules_list_content = Tools::file_get_contents($modulesListCacheFilepath);\n        }\n\n        if ($default_country_modules_list_content === null) {\n            $default_country_modules_list_content = Tools::file_get_contents(_PS_ROOT_DIR_ . self::CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST);\n        }\n\n        if ($untrusted_modules_list_content === null) {\n            $untrusted_modules_list_content = Tools::file_get_contents(_PS_ROOT_DIR_ . self::CACHE_FILE_UNTRUSTED_MODULES_LIST);\n        }\n\n        // If the module is trusted, which includes both partner modules and modules bought on Addons\n\n        if (stripos($trusted_modules_list_content, $module_name) !== false) {\n            // If the module is not a partner, then return 1 (which means the module is \"trusted\")\n            if (stripos($modules_list_content, '<module name=\"' . $module_name . '\"/>') == false) {\n                return 1;\n            } elseif (stripos($default_country_modules_list_content, '<name><![CDATA[' . $module_name . ']]></name>') !== false) {\n                // The module is a parter. If the module is in the file that contains module for this country then return 1 (which means the module is \"trusted\")\n                return 1;\n            }\n            // The module seems to be trusted, but it does not seem to be dedicated to this country\n            return 2;\n        } elseif (stripos($untrusted_modules_list_content, $module_name) !== false) {\n            // If the module is already in the untrusted list, then return 0 (untrusted)\n            return 0;\n        } else {\n            // If the module isn't in one of the xml files\n            // It might have been uploaded recenlty so we check\n            // Addons API and clear XML files to be regenerated next time\n            self::deleteTrustedXmlCache();\n\n            return (int) Module::checkModuleFromAddonsApi($module_name);\n        }\n    }\n\n    /**\n     * Delete the trusted / untrusted XML files, generated by generateTrustedXml().\n     */\n    final public static function deleteTrustedXmlCache()\n    {\n        Tools::deleteFile(_PS_ROOT_DIR_ . self::CACHE_FILE_TRUSTED_MODULES_LIST);\n        Tools::deleteFile(_PS_ROOT_DIR_ . self::CACHE_FILE_UNTRUSTED_MODULES_LIST);\n    }\n\n    /**\n     * Generate XML files for trusted and untrusted modules.\n     */\n    final public static function generateTrustedXml()\n    {\n        $modules_on_disk = Module::getModulesDirOnDisk();\n        $trusted = array();\n        $untrusted = array();\n\n        $trusted_modules_xml = array(\n            _PS_ROOT_DIR_ . self::CACHE_FILE_ALL_COUNTRY_MODULES_LIST,\n            _PS_ROOT_DIR_ . self::CACHE_FILE_MUST_HAVE_MODULES_LIST,\n            _PS_ROOT_DIR_ . self::CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST,\n        );\n\n        if (file_exists(_PS_ROOT_DIR_ . self::CACHE_FILE_CUSTOMER_MODULES_LIST)) {\n            $trusted_modules_xml[] = _PS_ROOT_DIR_ . self::CACHE_FILE_CUSTOMER_MODULES_LIST;\n        }\n\n        // Create 2 arrays with trusted and untrusted modules\n        foreach ($trusted_modules_xml as $file) {\n            $content = Tools::file_get_contents($file);\n            $xml = @simplexml_load_string($content, null, LIBXML_NOCDATA);\n\n            if ($xml && isset($xml->module)) {\n                foreach ($xml->module as $modaddons) {\n                    $trusted[] = Tools::strtolower((string) $modaddons->name);\n                }\n            }\n        }\n\n        foreach (glob(_PS_ROOT_DIR_ . '/config/xml/themes/*.xml') as $theme_xml) {\n            if (file_exists($theme_xml)) {\n                $content = Tools::file_get_contents($theme_xml);\n                $xml = @simplexml_load_string($content, null, LIBXML_NOCDATA);\n\n                if ($xml) {\n                    foreach ($xml->modules->module as $modaddons) {\n                        if ((string) $modaddons['action'] == 'install') {\n                            $trusted[] = Tools::strtolower((string) $modaddons['name']);\n                        }\n                    }\n                }\n            }\n        }\n\n        foreach ($modules_on_disk as $name) {\n            if (!in_array($name, $trusted)) {\n                if (Module::checkModuleFromAddonsApi($name)) {\n                    $trusted[] = Tools::strtolower($name);\n                } else {\n                    $untrusted[] = Tools::strtolower($name);\n                }\n            }\n        }\n\n        $context = Context::getContext();\n\n        // Save the 2 arrays into XML files\n        $trusted_xml = new SimpleXMLElement('<modules_list/>');\n        $trusted_xml->addAttribute('theme', $context->shop->theme->getName());\n        $modules = $trusted_xml->addChild('modules');\n        $modules->addAttribute('type', 'trusted');\n        foreach ($trusted as $key => $name) {\n            $module = $modules->addChild('module');\n            $module->addAttribute('name', $name);\n        }\n        $success = file_put_contents(_PS_ROOT_DIR_ . self::CACHE_FILE_TRUSTED_MODULES_LIST, $trusted_xml->asXML());\n\n        $untrusted_xml = new SimpleXMLElement('<modules_list/>');\n        $modules = $untrusted_xml->addChild('modules');\n        $modules->addAttribute('type', 'untrusted');\n        foreach ($untrusted as $key => $name) {\n            $module = $modules->addChild('module');\n            $module->addAttribute('name', $name);\n        }\n        $success &= file_put_contents(_PS_ROOT_DIR_ . self::CACHE_FILE_UNTRUSTED_MODULES_LIST, $untrusted_xml->asXML());\n\n        if ($success) {\n            return true;\n        } else {\n            Context::getContext()->getTranslator()->trans('Trusted and Untrusted XML have not been generated properly', array(), 'Admin.Modules.Notification');\n        }\n    }\n\n    /**\n     * Create the Addons API call from the module name only.\n     *\n     * @param string $name Module dir name\n     *\n     * @return bool Returns if the module is trusted by addons.prestashop.com\n     */\n    final public static function checkModuleFromAddonsApi($module_name)\n    {\n        $obj = Module::getInstanceByName($module_name);\n\n        if (!is_object($obj)) {\n            return false;\n        } elseif ($obj->module_key === '') {\n            return false;\n        } else {\n            $params = array(\n                'module_name' => $obj->name,\n                'module_key' => $obj->module_key,\n            );\n            $xml = Tools::addonsRequest('check_module', $params);\n\n            return (bool) (strpos($xml, 'success') !== false);\n        }\n    }\n\n    /**\n     * Returns the list of the payment module associated to the current customer.\n     *\n     * @see PaymentModule::getInstalledPaymentModules() if you don't care about the context\n     *\n     * @return array module informations\n     */\n    public static function getPaymentModules()\n    {\n        $context = Context::getContext();\n        if (isset($context->cart)) {\n            $billing = new Address((int) $context->cart->id_address_invoice);\n        }\n\n        $use_groups = Group::isFeatureActive();\n\n        $frontend = true;\n        $groups = array();\n        if (isset($context->employee)) {\n            $frontend = false;\n        } elseif (isset($context->customer) && $use_groups) {\n            $groups = $context->customer->getGroups();\n            if (!count($groups)) {\n                $groups = array(Configuration::get('PS_UNIDENTIFIED_GROUP'));\n            }\n        }\n\n        $hook_payment = 'Payment';\n        if (Db::getInstance()->getValue('SELECT `id_hook` FROM `' . _DB_PREFIX_ . 'hook` WHERE `name` = \\'paymentOptions\\'')) {\n            $hook_payment = 'paymentOptions';\n        }\n\n        $list = Shop::getContextListShopID();\n\n        return Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS('SELECT DISTINCT m.`id_module`, h.`id_hook`, m.`name`, hm.`position`\n        FROM `' . _DB_PREFIX_ . 'module` m\n        ' . ($frontend ? 'LEFT JOIN `' . _DB_PREFIX_ . 'module_country` mc ON (m.`id_module` = mc.`id_module` AND mc.id_shop = ' . (int) $context->shop->id . ')' : '') . '\n        ' . ($frontend && $use_groups ? 'INNER JOIN `' . _DB_PREFIX_ . 'module_group` mg ON (m.`id_module` = mg.`id_module` AND mg.id_shop = ' . (int) $context->shop->id . ')' : '') . '\n        ' . ($frontend && isset($context->customer) && $use_groups ? 'INNER JOIN `' . _DB_PREFIX_ . 'customer_group` cg on (cg.`id_group` = mg.`id_group`AND cg.`id_customer` = ' . (int) $context->customer->id . ')' : '') . '\n        LEFT JOIN `' . _DB_PREFIX_ . 'hook_module` hm ON hm.`id_module` = m.`id_module`\n        LEFT JOIN `' . _DB_PREFIX_ . 'hook` h ON hm.`id_hook` = h.`id_hook`\n        WHERE h.`name` = \\'' . pSQL($hook_payment) . '\\'\n        ' . (isset($billing) && $frontend ? 'AND mc.id_country = ' . (int) $billing->id_country : '') . '\n        AND (SELECT COUNT(*) FROM ' . _DB_PREFIX_ . 'module_shop ms WHERE ms.id_module = m.id_module AND ms.id_shop IN(' . implode(', ', $list) . ')) = ' . count($list) . '\n        AND hm.id_shop IN(' . implode(', ', $list) . ')\n        ' . ((count($groups) && $frontend && $use_groups) ? 'AND (mg.`id_group` IN (' . implode(', ', $groups) . '))' : '') . '\n        GROUP BY hm.id_hook, hm.id_module\n        ORDER BY hm.`position`, m.`name` DESC');\n    }\n\n    /**\n     * Get translation for a given module text.\n     *\n     * Note: $specific parameter is mandatory for library files.\n     * Otherwise, translation key will not match for Module library\n     * when module is loaded with eval() Module::getModulesOnDisk()\n     *\n     * @param string $string String to translate\n     * @param bool|string $specific filename to use in translation key\n     * @param string|null $locale Locale to translate to\n     *\n     * @return string Translation\n     */\n    public function l($string, $specific = false, $locale = null)\n    {\n        if (self::$_generate_config_xml_mode) {\n            return $string;\n        }\n\n        return Translate::getModuleTranslation(\n            $this,\n            $string,\n            ($specific) ? $specific : $this->name,\n            null,\n            false,\n            $locale\n        );\n    }\n\n    /**\n     * Reposition module\n     *\n     * @param bool $id_hook Hook ID\n     * @param bool $way Up (0) or Down (1)\n     * @param int $position\n     */\n    public function updatePosition($id_hook, $way, $position = null)\n    {\n        foreach (Shop::getContextListShopID() as $shop_id) {\n            $getAvailableHookPositionsSql = 'SELECT hm.`id_module`, hm.`position`, hm.`id_hook`\n                    FROM `' . _DB_PREFIX_ . 'hook_module` hm\n                    WHERE hm.`id_hook` = ' . (int) $id_hook . ' AND hm.`id_shop` = ' . $shop_id . '\n                    ORDER BY hm.`position` ' . ($way ? 'ASC' : 'DESC');\n\n            if (!$sqlResult = Db::getInstance()->executeS($getAvailableHookPositionsSql)) {\n                // no hook positions available\n                continue;\n            }\n            if (count($sqlResult) === 1) {\n                // if there is only 1 position available, it cannot be updated\n                return false;\n            }\n\n            foreach ($sqlResult as $positionNumber => $positionSettings) {\n                $thisIsTheSettingsForThisModule = ((int) $positionSettings[$this->identifier] == (int) $this->id);\n\n                if ($thisIsTheSettingsForThisModule) {\n                    $thisModulePositionNumber = $positionNumber;\n\n                    break;\n                }\n            }\n\n            if (!isset($thisModulePositionNumber)) {\n                // could not find hook positions for this module\n                return false;\n            }\n            if (!isset($sqlResult[$thisModulePositionNumber])) {\n                // ok this one is really weird\n                return false;\n            }\n            if (!isset($sqlResult[$thisModulePositionNumber + 1])) {\n                // no alternative position available following $way, so position cannot be updated\n                return false;\n            }\n\n            $from = $sqlResult[$thisModulePositionNumber];\n            $to = $sqlResult[$thisModulePositionNumber + 1];\n\n            if (!empty($position)) {\n                $to['position'] = (int) $position;\n            }\n\n            $minPosition = min((int) $from['position'], (int) $to['position']);\n            $maxPosition = max((int) $from['position'], (int) $to['position']);\n\n            $shiftHookPositionsSql = 'UPDATE `' . _DB_PREFIX_ . 'hook_module`\n                SET position = position ' . ($way ? '- 1' : '+ 1') . '\n                WHERE position BETWEEN ' . $minPosition . ' AND ' . $maxPosition . '\n                AND `id_hook` = ' . (int) $from['id_hook'] . ' AND `id_shop` = ' . $shop_id;\n\n            if (!Db::getInstance()->execute($shiftHookPositionsSql)) {\n                return false;\n            }\n\n            $createMissingPositionSql = 'UPDATE `' . _DB_PREFIX_ . 'hook_module`\n                SET `position`=' . (int) $to['position'] . '\n                WHERE `' . pSQL($this->identifier) . '` = ' . (int) $from[$this->identifier] . '\n                AND `id_hook` = ' . (int) $to['id_hook'] . ' AND `id_shop` = ' . $shop_id;\n            if (!Db::getInstance()->execute($createMissingPositionSql)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Reorder modules position\n     *\n     * @param bool $id_hook Hook ID\n     * @param array $shop_list List of shop\n     */\n    public function cleanPositions($id_hook, $shop_list = null)\n    {\n        $sql = 'SELECT `id_module`, `id_shop`\n            FROM `' . _DB_PREFIX_ . 'hook_module`\n            WHERE `id_hook` = ' . (int) $id_hook . '\n            ' . ((null !== $shop_list && $shop_list) ? ' AND `id_shop` IN(' . implode(', ', array_map('intval', $shop_list)) . ')' : '') . '\n            ORDER BY `position`';\n        $results = Db::getInstance()->executeS($sql);\n        $position = array();\n        foreach ($results as $row) {\n            if (!isset($position[$row['id_shop']])) {\n                $position[$row['id_shop']] = 1;\n            }\n\n            $sql = 'UPDATE `' . _DB_PREFIX_ . 'hook_module`\n                SET `position` = ' . $position[$row['id_shop']] . '\n                WHERE `id_hook` = ' . (int) $id_hook . '\n                AND `id_module` = ' . $row['id_module'] . ' AND `id_shop` = ' . $row['id_shop'];\n            Db::getInstance()->execute($sql);\n            ++$position[$row['id_shop']];\n        }\n\n        return true;\n    }\n\n    /**\n     * Helper displaying error message(s).\n     *\n     * @param string|array $error\n     *\n     * @return string\n     */\n    public function displayError($error)\n    {\n        $output = '\n        <div class=\"bootstrap\">\n        <div class=\"module_error alert alert-danger\" >\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>';\n\n        if (is_array($error)) {\n            $output .= '<ul>';\n            foreach ($error as $msg) {\n                $output .= '<li>' . $msg . '</li>';\n            }\n            $output .= '</ul>';\n        } else {\n            $output .= $error;\n        }\n\n        // Close div openned previously\n        $output .= '</div></div>';\n\n        $this->error = true;\n\n        return $output;\n    }\n\n    /**\n     * Helper displaying warning message(s).\n     *\n     * @param string|array $warning\n     *\n     * @return string\n     */\n    public function displayWarning($warning)\n    {\n        $output = '\n        <div class=\"bootstrap\">\n        <div class=\"module_warning alert alert-warning\" >\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>';\n\n        if (is_array($warning)) {\n            $output .= '<ul>';\n            foreach ($warning as $msg) {\n                $output .= '<li>' . $msg . '</li>';\n            }\n            $output .= '</ul>';\n        } else {\n            $output .= $warning;\n        }\n\n        // Close div openned previously\n        $output .= '</div></div>';\n\n        return $output;\n    }\n\n    /**\n     * Helper displaying confirmation message.\n     *\n     * @param string $string\n     *\n     * @return string\n     */\n    public function displayConfirmation($string)\n    {\n        $output = '\n        <div class=\"bootstrap\">\n        <div class=\"module_confirmation conf confirm alert alert-success\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n            ' . $string . '\n        </div>\n        </div>';\n\n        return $output;\n    }\n\n    /**\n     * Helper displaying information message(s).\n     *\n     * @param string|array $information\n     *\n     * @return string\n     */\n    public function displayInformation($information)\n    {\n        $output = '\n        <div class=\"bootstrap\">\n        <div class=\"module_info info alert alert-info\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>';\n\n        if (is_array($information)) {\n            $output .= '<ul>';\n            foreach ($information as $msg) {\n                $output .= '<li>' . $msg . '</li>';\n            }\n            $output .= '</ul>';\n        } else {\n            $output .= $information;\n        }\n\n        // Close div openned previously\n        $output .= '</div></div>';\n\n        return $output;\n    }\n\n    /**\n     * Return exceptions for module in hook\n     *\n     * @param int $id_module Module ID\n     * @param int $id_hook Hook ID\n     *\n     * @return array Exceptions\n     */\n    public static function getExceptionsStatic($id_module, $id_hook, $dispatch = false)\n    {\n        $cache_id = 'exceptionsCache';\n        if (!Cache::isStored($cache_id)) {\n            $exceptions_cache = array();\n            $sql = 'SELECT * FROM `' . _DB_PREFIX_ . 'hook_module_exceptions`\n                WHERE `id_shop` IN (' . implode(', ', Shop::getContextListShopID()) . ')';\n            $db = Db::getInstance();\n            $result = $db->executeS($sql, false);\n            while ($row = $db->nextRow($result)) {\n                if (!$row['file_name']) {\n                    continue;\n                }\n                $key = $row['id_hook'] . '-' . $row['id_module'];\n                if (!isset($exceptions_cache[$key])) {\n                    $exceptions_cache[$key] = array();\n                }\n                if (!isset($exceptions_cache[$key][$row['id_shop']])) {\n                    $exceptions_cache[$key][$row['id_shop']] = array();\n                }\n                $exceptions_cache[$key][$row['id_shop']][] = $row['file_name'];\n            }\n            Cache::store($cache_id, $exceptions_cache);\n        } else {\n            $exceptions_cache = Cache::retrieve($cache_id);\n        }\n\n        $key = $id_hook . '-' . $id_module;\n        $array_return = array();\n        if ($dispatch) {\n            foreach (Shop::getContextListShopID() as $shop_id) {\n                if (isset($exceptions_cache[$key], $exceptions_cache[$key][$shop_id])) {\n                    $array_return[$shop_id] = $exceptions_cache[$key][$shop_id];\n                }\n            }\n        } else {\n            foreach (Shop::getContextListShopID() as $shop_id) {\n                if (isset($exceptions_cache[$key], $exceptions_cache[$key][$shop_id])) {\n                    foreach ($exceptions_cache[$key][$shop_id] as $file) {\n                        if (!in_array($file, $array_return)) {\n                            $array_return[] = $file;\n                        }\n                    }\n                }\n            }\n        }\n\n        return $array_return;\n    }\n\n    /**\n     * Return exceptions for module in hook\n     *\n     * @param int $id_hook Hook ID\n     *\n     * @return array Exceptions\n     */\n    public function getExceptions($id_hook, $dispatch = false)\n    {\n        return Module::getExceptionsStatic($this->id, $id_hook, $dispatch);\n    }\n\n    /**\n     * @param string $module_name\n     *\n     * @return bool\n     *\n     * @deprecated since 1.7\n     * @see  PrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleManager->isInstalled($name)\n     */\n    public static function isInstalled($module_name)\n    {\n        if (!Cache::isStored('Module::isInstalled' . $module_name)) {\n            $id_module = Module::getModuleIdByName($module_name);\n            Cache::store('Module::isInstalled' . $module_name, (bool) $id_module);\n\n            return (bool) $id_module;\n        }\n\n        return Cache::retrieve('Module::isInstalled' . $module_name);\n    }\n\n    public function isEnabledForShopContext()\n    {\n        return (bool) Db::getInstance()->getValue(\n            'SELECT id_module\n            FROM `' . _DB_PREFIX_ . 'module_shop`\n            WHERE id_module=' . (int) $this->id . ' AND id_shop IN (' . implode(',', array_map('intval', Shop::getContextListShopID())) . ')\n            GROUP BY id_module\n            HAVING COUNT(*)=' . (int) count(Shop::getContextListShopID())\n        );\n    }\n\n    public static function isEnabled($module_name)\n    {\n        if (!Cache::isStored('Module::isEnabled' . $module_name)) {\n            $active = false;\n            $id_module = Module::getModuleIdByName($module_name);\n            if (Db::getInstance()->getValue('SELECT `id_module` FROM `' . _DB_PREFIX_ . 'module_shop` WHERE `id_module` = ' . (int) $id_module . ' AND `id_shop` = ' . (int) Context::getContext()->shop->id)) {\n                $active = true;\n            }\n            Cache::store('Module::isEnabled' . $module_name, (bool) $active);\n\n            return (bool) $active;\n        }\n\n        return Cache::retrieve('Module::isEnabled' . $module_name);\n    }\n\n    public function isRegisteredInHook($hook)\n    {\n        if (!$this->id) {\n            return false;\n        }\n\n        $sql = 'SELECT COUNT(*)\n            FROM `' . _DB_PREFIX_ . 'hook_module` hm\n            LEFT JOIN `' . _DB_PREFIX_ . 'hook` h ON (h.`id_hook` = hm.`id_hook`)\n            WHERE h.`name` = \\'' . pSQL($hook) . '\\' AND hm.`id_module` = ' . (int) $this->id;\n\n        return Db::getInstance()->getValue($sql);\n    }\n\n    /**\n     * Template management (display, overload, cache).\n     */\n    protected static function _isTemplateOverloadedStatic($module_name, $template)\n    {\n        if (Tools::file_exists_cache(_PS_THEME_DIR_ . 'modules/' . $module_name . '/' . $template)) {\n            return _PS_THEME_DIR_ . 'modules/' . $module_name . '/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/hook/' . $template)) {\n            return _PS_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/hook/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/front/' . $template)) {\n            return _PS_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/front/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_PARENT_THEME_DIR_ . 'modules/' . $module_name . '/' . $template)) {\n            return _PS_PARENT_THEME_DIR_ . 'modules/' . $module_name . '/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_PARENT_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/hook/' . $template)) {\n            return _PS_PARENT_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/hook/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_PARENT_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/front/' . $template)) {\n            return _PS_PARENT_THEME_DIR_ . 'modules/' . $module_name . '/views/templates/front/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_MODULE_DIR_ . $module_name . '/views/templates/hook/' . $template)) {\n            return false;\n        } elseif (Tools::file_exists_cache(_PS_MODULE_DIR_ . $module_name . '/views/templates/front/' . $template)) {\n            return false;\n        } elseif (Tools::file_exists_cache(_PS_MODULE_DIR_ . $module_name . '/' . $template)) {\n            return false;\n        }\n\n        return null;\n    }\n\n    protected function _isTemplateOverloaded($template)\n    {\n        return Module::_isTemplateOverloadedStatic($this->name, $template);\n    }\n\n    protected function getCacheId($name = null)\n    {\n        $cache_array = array();\n        $cache_array[] = $name !== null ? $name : $this->name;\n        if (Configuration::get('PS_SSL_ENABLED')) {\n            $cache_array[] = (int) Tools::usingSecureMode();\n        }\n        if (Shop::isFeatureActive()) {\n            $cache_array[] = (int) $this->context->shop->id;\n        }\n        if (Group::isFeatureActive() && isset($this->context->customer)) {\n            $cache_array[] = (int) Group::getCurrent()->id;\n            $cache_array[] = implode('_', Customer::getGroupsStatic($this->context->customer->id));\n        }\n        if (Language::isMultiLanguageActivated()) {\n            $cache_array[] = (int) $this->context->language->id;\n        }\n        if (Currency::isMultiCurrencyActivated()) {\n            $cache_array[] = (int) $this->context->currency->id;\n        }\n        $cache_array[] = (int) $this->context->country->id;\n\n        return implode('|', $cache_array);\n    }\n\n    public function display($file, $template, $cache_id = null, $compile_id = null)\n    {\n        if (($overloaded = Module::_isTemplateOverloadedStatic(basename($file, '.php'), $template)) === null) {\n            return Context::getContext()->getTranslator()->trans('No template found for module', array(), 'Admin.Modules.Notification') . ' ' . basename($file, '.php') . (_PS_MODE_DEV_ ? ' (' . $template . ')' : '');\n        } else {\n            $this->smarty->assign(array(\n                'module_dir' => __PS_BASE_URI__ . 'modules/' . basename($file, '.php') . '/',\n                'module_template_dir' => ($overloaded ? _THEME_DIR_ : __PS_BASE_URI__) . 'modules/' . basename($file, '.php') . '/',\n                'allow_push' => $this->allow_push,\n            ));\n\n            if ($cache_id !== null) {\n                Tools::enableCache();\n            }\n\n            $result = $this->getCurrentSubTemplate($template, $cache_id, $compile_id)->fetch();\n\n            if ($cache_id !== null) {\n                Tools::restoreCacheSettings();\n            }\n\n            $this->resetCurrentSubTemplate($template, $cache_id, $compile_id);\n\n            return $result;\n        }\n    }\n\n    /**\n     * Use this method to return the result of a smarty template when assign data only locally with $this->smarty->assign().\n     *\n     * @param string $templatePath relative path the template file, from the module root dir\n     * @param null $cache_id\n     * @param null $compile_id\n     *\n     * @return mixed\n     */\n    public function fetch($templatePath, $cache_id = null, $compile_id = null)\n    {\n        if ($cache_id !== null) {\n            Tools::enableCache();\n        }\n\n        $template = $this->context->smarty->createTemplate(\n            $templatePath,\n            $cache_id,\n            $compile_id,\n            $this->smarty\n        );\n\n        if ($cache_id !== null) {\n            Tools::restoreCacheSettings();\n        }\n\n        return $template->fetch();\n    }\n\n    /**\n     * @param string $template\n     * @param string|null $cache_id\n     * @param string|null $compile_id\n     *\n     * @return Smarty_Internal_Template\n     */\n    protected function getCurrentSubTemplate($template, $cache_id = null, $compile_id = null)\n    {\n        if (!isset($this->current_subtemplate[$template . '_' . $cache_id . '_' . $compile_id])) {\n            if (false === strpos($template, 'module:') &&\n                !file_exists(_PS_ROOT_DIR_ . '/' . $template) &&\n                !file_exists($template)\n            ) {\n                $template = $this->getTemplatePath($template);\n            }\n\n            $this->current_subtemplate[$template . '_' . $cache_id . '_' . $compile_id] = $this->context->smarty->createTemplate(\n                $template,\n                $cache_id,\n                $compile_id,\n                $this->smarty\n            );\n        }\n\n        return $this->current_subtemplate[$template . '_' . $cache_id . '_' . $compile_id];\n    }\n\n    protected function resetCurrentSubTemplate($template, $cache_id, $compile_id)\n    {\n        $this->current_subtemplate[$template . '_' . $cache_id . '_' . $compile_id] = null;\n    }\n\n    /**\n     * Get realpath of a template of current module (check if template is overriden too).\n     *\n     * @since 1.5.0\n     *\n     * @param string $template\n     *\n     * @return string\n     */\n    public function getTemplatePath($template)\n    {\n        $overloaded = $this->_isTemplateOverloaded($template);\n        if ($overloaded === null) {\n            return null;\n        }\n\n        if ($overloaded) {\n            return $overloaded;\n        } elseif (Tools::file_exists_cache(_PS_MODULE_DIR_ . $this->name . '/views/templates/hook/' . $template)) {\n            return _PS_MODULE_DIR_ . $this->name . '/views/templates/hook/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_MODULE_DIR_ . $this->name . '/views/templates/front/' . $template)) {\n            return _PS_MODULE_DIR_ . $this->name . '/views/templates/front/' . $template;\n        } elseif (Tools::file_exists_cache(_PS_MODULE_DIR_ . $this->name . '/' . $template)) {\n            return _PS_MODULE_DIR_ . $this->name . '/' . $template;\n        } else {\n            return null;\n        }\n    }\n\n    public function isCached($template, $cache_id = null, $compile_id = null)\n    {\n        Tools::enableCache();\n        if (false === strpos($template, 'module:') && !file_exists(_PS_ROOT_DIR_ . '/' . $template)) {\n            $template = $this->getTemplatePath($template);\n        }\n\n        $is_cached = $this->getCurrentSubTemplate($template, $cache_id, $compile_id)->isCached($template, $cache_id, $compile_id);\n        Tools::restoreCacheSettings();\n\n        return $is_cached;\n    }\n\n    /**\n     * Clear template cache.\n     *\n     * @param string $template Template name\n     * @param int null $cache_id\n     * @param int null $compile_id\n     *\n     * @return int Number of template cleared\n     */\n    protected function _clearCache($template, $cache_id = null, $compile_id = null)\n    {\n        static $ps_smarty_clear_cache = null;\n        if ($ps_smarty_clear_cache === null) {\n            $ps_smarty_clear_cache = Configuration::get('PS_SMARTY_CLEAR_CACHE');\n        }\n\n        if (self::$_batch_mode) {\n            if ($ps_smarty_clear_cache == 'never') {\n                return 0;\n            }\n\n            if ($cache_id === null) {\n                $cache_id = $this->name;\n            }\n\n            $key = $template . '-' . $cache_id . '-' . $compile_id;\n            if (!isset(self::$_defered_clearCache[$key])) {\n                self::$_defered_clearCache[$key] = array($this->getTemplatePath($template), $cache_id, $compile_id);\n            }\n        } else {\n            if ($ps_smarty_clear_cache == 'never') {\n                return 0;\n            }\n\n            if ($cache_id === null) {\n                $cache_id = $this->name;\n            }\n\n            Tools::enableCache();\n            $number_of_template_cleared = Tools::clearCache(Context::getContext()->smarty, $this->getTemplatePath($template), $cache_id, $compile_id);\n            Tools::restoreCacheSettings();\n\n            return $number_of_template_cleared;\n        }\n    }\n\n    /**\n     * Clear defered template cache.\n     *\n     * @param string $template_path Template path\n     * @param int null $cache_id\n     * @param int null $compile_id\n     *\n     * @return int Number of template cleared\n     */\n    public static function _deferedClearCache($template_path, $cache_id, $compile_id)\n    {\n        Tools::enableCache();\n        $number_of_template_cleared = Tools::clearCache(Context::getContext()->smarty, $template_path, $cache_id, $compile_id);\n        Tools::restoreCacheSettings();\n\n        return $number_of_template_cleared;\n    }\n\n    protected function _generateConfigXml()\n    {\n        $author_uri = '';\n        if (isset($this->author_uri) && $this->author_uri) {\n            $author_uri = '<author_uri><![CDATA[' . Tools::htmlentitiesUTF8($this->author_uri) . ']]></author_uri>';\n        }\n\n        $xml = '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<module>\n    <name>' . $this->name . '</name>\n    <displayName><![CDATA[' . str_replace('&amp;', '&', Tools::htmlentitiesUTF8($this->displayName)) . ']]></displayName>\n    <version><![CDATA[' . $this->version . ']]></version>\n    <description><![CDATA[' . str_replace('&amp;', '&', Tools::htmlentitiesUTF8($this->description)) . ']]></description>\n    <author><![CDATA[' . str_replace('&amp;', '&', Tools::htmlentitiesUTF8($this->author)) . ']]></author>'\n        . $author_uri . '\n    <tab><![CDATA[' . Tools::htmlentitiesUTF8($this->tab) . ']]></tab>' . (isset($this->confirmUninstall) ? \"\\n\\t\" . '<confirmUninstall><![CDATA[' . $this->confirmUninstall . ']]></confirmUninstall>' : '') . '\n    <is_configurable>' . (isset($this->is_configurable) ? (int) $this->is_configurable : 0) . '</is_configurable>\n    <need_instance>' . (int) $this->need_instance . '</need_instance>' . (isset($this->limited_countries) ? \"\\n\\t\" . '<limited_countries>' . (count($this->limited_countries) == 1 ? $this->limited_countries[0] : '') . '</limited_countries>' : '') . '\n</module>';\n        if (is_writable(_PS_MODULE_DIR_ . $this->name . '/')) {\n            $iso = substr(Context::getContext()->language->iso_code, 0, 2);\n            $file = _PS_MODULE_DIR_ . $this->name . '/' . ($iso == 'en' ? 'config.xml' : 'config_' . $iso . '.xml');\n            if (!@file_put_contents($file, $xml)) {\n                if (!is_writable($file)) {\n                    @unlink($file);\n                    @file_put_contents($file, $xml);\n                }\n            }\n            @chmod($file, 0664);\n        }\n    }\n\n    /**\n     * Check if the module is transplantable on the hook in parameter.\n     *\n     * @param string $hook_name\n     *\n     * @return bool if module can be transplanted on hook\n     */\n    public function isHookableOn($hook_name)\n    {\n        if ($this instanceof WidgetInterface) {\n            return Hook::isDisplayHookName($hook_name);\n        }\n\n        $retro_hook_name = Hook::getRetroHookName($hook_name);\n\n        return is_callable(array($this, 'hook' . ucfirst($hook_name))) || is_callable(array($this, 'hook' . ucfirst($retro_hook_name)));\n    }\n\n    /**\n     * @param int $idProfile\n     *\n     * @return array\n     */\n    public static function getModulesAccessesByIdProfile($idProfile)\n    {\n        if (empty(self::$cache_modules_roles)) {\n            self::warmupRolesCache();\n        }\n\n        $roles = self::$cache_lgc_access;\n\n        $profileRoles = Db::getInstance()->executeS('\n            SELECT `slug`,\n                `slug` LIKE \"%CREATE\" as \"add\",\n                `slug` LIKE \"%READ\" as \"view\",\n                `slug` LIKE \"%UPDATE\" as \"configure\",\n                `slug` LIKE \"%DELETE\" as \"uninstall\"\n            FROM `' . _DB_PREFIX_ . 'authorization_role` a\n            LEFT JOIN `' . _DB_PREFIX_ . 'module_access` j ON j.id_authorization_role = a.id_authorization_role\n            WHERE `slug` LIKE \"ROLE_MOD_MODULE_%\"\n            AND j.id_profile = \"' . (int) $idProfile . '\"\n            ORDER BY a.slug\n        ');\n\n        foreach ($profileRoles as $role) {\n            preg_match(\n                '/ROLE_MOD_MODULE_(?P<moduleName>[A-Z0-9_]+)_(?P<auth>[A-Z]+)/',\n                $role['slug'],\n                $matches\n            );\n\n            if (($key = array_search('1', $role))) {\n                $roles[$matches['moduleName']][$key] = '1';\n            }\n        }\n\n        return $roles;\n    }\n\n    private static function warmupRolesCache()\n    {\n        $result = Db::getInstance()->executeS('\n            SELECT `slug`,\n                `slug` LIKE \"%CREATE\" as \"add\",\n                `slug` LIKE \"%READ\" as \"view\",\n                `slug` LIKE \"%UPDATE\" as \"configure\",\n                `slug` LIKE \"%DELETE\" as \"uninstall\"\n            FROM `' . _DB_PREFIX_ . 'authorization_role` a\n            WHERE `slug` LIKE \"ROLE_MOD_MODULE_%\"\n            ORDER BY a.slug\n        ');\n\n        foreach ($result as $row) {\n            preg_match(\n                '/ROLE_MOD_MODULE_(?P<moduleName>[A-Z0-9_]+)_(?P<auth>[A-Z]+)/',\n                $row['slug'],\n                $matches\n            );\n\n            $m = Module::getInstanceByName(strtolower($matches['moduleName']));\n\n            // the following condition handles invalid modules\n            if ($m && !isset(self::$cache_lgc_access[$matches['moduleName']])) {\n                self::$cache_lgc_access[$matches['moduleName']] = array();\n                self::$cache_lgc_access[$matches['moduleName']]['id_module'] = $m->id;\n                self::$cache_lgc_access[$matches['moduleName']]['name'] = $m->displayName;\n                self::$cache_lgc_access[$matches['moduleName']]['add'] = '0';\n                self::$cache_lgc_access[$matches['moduleName']]['view'] = '0';\n                self::$cache_lgc_access[$matches['moduleName']]['configure'] = '0';\n                self::$cache_lgc_access[$matches['moduleName']]['uninstall'] = '0';\n            }\n        }\n    }\n\n    /**\n     * Check employee permission for module.\n     *\n     * @param array $variable (action)\n     * @param object $employee\n     *\n     * @return bool if module can be transplanted on hook\n     */\n    public function getPermission($variable, $employee = null)\n    {\n        return Module::getPermissionStatic($this->id, $variable, $employee);\n    }\n\n    /**\n     * Check employee permission for module (static method).\n     *\n     * @param int $id_module\n     * @param array $variable (action)\n     * @param object $employee\n     *\n     * @return bool if module can be transplanted on hook\n     */\n    public static function getPermissionStatic($id_module, $variable, $employee = null)\n    {\n        if (!in_array($variable, array('view', 'configure', 'uninstall'))) {\n            return false;\n        }\n\n        if (!$employee) {\n            $employee = Context::getContext()->employee;\n        }\n\n        if ($employee->id_profile == _PS_ADMIN_PROFILE_) {\n            return true;\n        }\n\n        $slug = Access::findSlugByIdModule($id_module) . Access::getAuthorizationFromLegacy($variable);\n\n        return Access::isGranted($slug, $employee->id_profile);\n    }\n\n    /**\n     * Get authorized modules for a client group.\n     *\n     * @param int $group_id\n     *\n     * @return array|null\n     */\n    public static function getAuthorizedModules($group_id, $shops = array(1))\n    {\n        return Db::getInstance()->executeS(\n            'SELECT m.`id_module`, m.`name` FROM `' . _DB_PREFIX_ . 'module_group` mg\n            LEFT JOIN `' . _DB_PREFIX_ . 'module` m ON (m.`id_module` = mg.`id_module`)\n            WHERE mg.`id_group` = ' . (int) $group_id . '\n            AND `id_shop` IN ('\n                . (implode(',', array_map('intval', $shops)))\n            . ')'\n        );\n    }\n\n    /**\n     * Get ID module by name.\n     *\n     * @param string $name\n     *\n     * @return int Module ID\n     */\n    public static function getModuleIdByName($name)\n    {\n        $cache_id = 'Module::getModuleIdByName_' . pSQL($name);\n        if (!Cache::isStored($cache_id)) {\n            $result = (int) Db::getInstance()->getValue('SELECT `id_module` FROM `' . _DB_PREFIX_ . 'module` WHERE `name` = \"' . pSQL($name) . '\"');\n            Cache::store($cache_id, $result);\n\n            return $result;\n        }\n\n        return Cache::retrieve($cache_id);\n    }\n\n    /**\n     * Get module errors.\n     *\n     * @since 1.5.0\n     *\n     * @return array errors\n     */\n    public function getErrors()\n    {\n        return $this->_errors;\n    }\n\n    /**\n     * Get module messages confirmation.\n     *\n     * @since 1.5.0\n     *\n     * @return array conf\n     */\n    public function getConfirmations()\n    {\n        return $this->_confirmations;\n    }\n\n    /**\n     * Get local path for module.\n     *\n     * @since 1.5.0\n     *\n     * @return string\n     */\n    public function getLocalPath()\n    {\n        return $this->local_path;\n    }\n\n    /**\n     * Get uri path for module.\n     *\n     * @since 1.5.0\n     *\n     * @return string\n     */\n    public function getPathUri()\n    {\n        return $this->_path;\n    }\n\n    /**\n     * Return module position for a given hook\n     *\n     * @param bool $id_hook Hook ID\n     *\n     * @return int position\n     */\n    public function getPosition($id_hook)\n    {\n        if (isset(Hook::$preloadModulesFromHooks)) {\n            if (isset(Hook::$preloadModulesFromHooks[$id_hook])) {\n                if (isset(Hook::$preloadModulesFromHooks[$id_hook]['module_position'][$this->id])) {\n                    return Hook::$preloadModulesFromHooks[$id_hook]['module_position'][$this->id];\n                } else {\n                    return 0;\n                }\n            }\n        }\n        $result = Db::getInstance()->getRow('\n            SELECT `position`\n            FROM `' . _DB_PREFIX_ . 'hook_module`\n            WHERE `id_hook` = ' . (int) $id_hook . '\n            AND `id_module` = ' . (int) $this->id . '\n            AND `id_shop` = ' . (int) Context::getContext()->shop->id);\n\n        return $result['position'];\n    }\n\n    /**\n     * Getter for $tabs attribute.\n     *\n     * @return array\n     */\n    public function getTabs()\n    {\n        return $this->tabs;\n    }\n\n    /**\n     * add a warning message to display at the top of the admin page.\n     *\n     * @param string $msg\n     */\n    public function adminDisplayWarning($msg)\n    {\n        if (!($this->context->controller instanceof AdminController)) {\n            return false;\n        }\n        $this->context->controller->warnings[] = $msg;\n    }\n\n    /**\n     * add a info message to display at the top of the admin page.\n     *\n     * @param string $msg\n     */\n    protected function adminDisplayInformation($msg)\n    {\n        if (!($this->context->controller instanceof AdminController)) {\n            return false;\n        }\n        $this->context->controller->informations[] = $msg;\n    }\n\n    /**\n     * Install module's controllers using public property $controllers.\n     *\n     * @return bool\n     */\n    protected function installControllers()\n    {\n        foreach ($this->controllers as $controller) {\n            $page = 'module-' . $this->name . '-' . $controller;\n            $result = Db::getInstance()->getValue('SELECT * FROM ' . _DB_PREFIX_ . 'meta WHERE page=\"' . pSQL($page) . '\"');\n            if ((int) $result > 0) {\n                continue;\n            }\n\n            $meta = new Meta();\n            $meta->page = $page;\n            $meta->configurable = 1;\n            $meta->save();\n        }\n\n        return true;\n    }\n\n    /**\n     * Install overrides files for the module.\n     *\n     * @return bool\n     */\n    public function installOverrides()\n    {\n        if (!is_dir($this->getLocalPath() . 'override')) {\n            return true;\n        }\n\n        $result = true;\n        foreach (Tools::scandir($this->getLocalPath() . 'override', 'php', '', true) as $file) {\n            $class = basename($file, '.php');\n            if (PrestaShopAutoload::getInstance()->getClassPath($class . 'Core') || Module::getModuleIdByName($class)) {\n                $result &= $this->addOverride($class);\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Uninstall overrides files for the module.\n     *\n     * @return bool\n     */\n    public function uninstallOverrides()\n    {\n        if (!is_dir($this->getLocalPath() . 'override')) {\n            return true;\n        }\n\n        $result = true;\n        foreach (Tools::scandir($this->getLocalPath() . 'override', 'php', '', true) as $file) {\n            $class = basename($file, '.php');\n            if (PrestaShopAutoload::getInstance()->getClassPath($class . 'Core') || Module::getModuleIdByName($class)) {\n                $result &= $this->removeOverride($class);\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Add all methods in a module override to the override class.\n     *\n     * @param string $classname\n     *\n     * @return bool\n     */\n    public function addOverride($classname)\n    {\n        $orig_path = $path = PrestaShopAutoload::getInstance()->getClassPath($classname . 'Core');\n        if (!$path) {\n            $path = 'modules' . DIRECTORY_SEPARATOR . $classname . DIRECTORY_SEPARATOR . $classname . '.php';\n        }\n        $path_override = $this->getLocalPath() . 'override' . DIRECTORY_SEPARATOR . $path;\n\n        if (!file_exists($path_override)) {\n            return false;\n        } else {\n            file_put_contents($path_override, preg_replace('#(\\r\\n|\\r)#ism', \"\\n\", file_get_contents($path_override)));\n        }\n\n        $pattern_escape_com = '#(^\\s*?\\/\\/.*?\\n|\\/\\*(?!\\n\\s+\\* module:.*?\\* date:.*?\\* version:.*?\\*\\/).*?\\*\\/)#ism';\n        // Check if there is already an override file, if not, we just need to copy the file\n        if ($file = PrestaShopAutoload::getInstance()->getClassPath($classname)) {\n            // Check if override file is writable\n            $override_path = _PS_ROOT_DIR_ . '/' . $file;\n\n            if ((!file_exists($override_path) && !is_writable(dirname($override_path))) || (file_exists($override_path) && !is_writable($override_path))) {\n                throw new Exception(Context::getContext()->getTranslator()->trans('file (%s) not writable', array($override_path), 'Admin.Notifications.Error'));\n            }\n\n            // Get a uniq id for the class, because you can override a class (or remove the override) twice in the same session and we need to avoid redeclaration\n            do {\n                $uniq = uniqid();\n            } while (class_exists($classname . 'OverrideOriginal_remove', false));\n\n            // Make a reflection of the override class and the module override class\n            $override_file = file($override_path);\n            $override_file = array_diff($override_file, array(\"\\n\"));\n            eval(preg_replace(array('#^\\s*<\\?(?:php)?#', '#class\\s+' . $classname . '\\s+extends\\s+([a-z0-9_]+)(\\s+implements\\s+([a-z0-9_]+))?#i'), array(' ', 'class ' . $classname . 'OverrideOriginal' . $uniq), implode('', $override_file)));\n            $override_class = new ReflectionClass($classname . 'OverrideOriginal' . $uniq);\n\n            $module_file = file($path_override);\n            $module_file = array_diff($module_file, array(\"\\n\"));\n            eval(preg_replace(array('#^\\s*<\\?(?:php)?#', '#class\\s+' . $classname . '(\\s+extends\\s+([a-z0-9_]+)(\\s+implements\\s+([a-z0-9_]+))?)?#i'), array(' ', 'class ' . $classname . 'Override' . $uniq), implode('', $module_file)));\n            $module_class = new ReflectionClass($classname . 'Override' . $uniq);\n\n            // Check if none of the methods already exists in the override class\n            foreach ($module_class->getMethods() as $method) {\n                if ($override_class->hasMethod($method->getName())) {\n                    $method_override = $override_class->getMethod($method->getName());\n                    if (preg_match('/module: (.*)/ism', $override_file[$method_override->getStartLine() - 5], $name) && preg_match('/date: (.*)/ism', $override_file[$method_override->getStartLine() - 4], $date) && preg_match('/version: ([0-9.]+)/ism', $override_file[$method_override->getStartLine() - 3], $version)) {\n                        throw new Exception(Context::getContext()->getTranslator()->trans('The method %1$s in the class %2$s is already overridden by the module %3$s version %4$s at %5$s.', array($method->getName(), $classname, $name[1], $version[1], $date[1]), 'Admin.Modules.Notification'));\n                    }\n\n                    throw new Exception(Context::getContext()->getTranslator()->trans('The method %1$s in the class %2$s is already overridden.', array($method->getName(), $classname), 'Admin.Modules.Notification'));\n                }\n\n                $module_file = preg_replace('/((:?public|private|protected)\\s+(static\\s+)?function\\s+(?:\\b' . $method->getName() . '\\b))/ism', \"/*\\n    * module: \" . $this->name . \"\\n    * date: \" . date('Y-m-d H:i:s') . \"\\n    * version: \" . $this->version . \"\\n    */\\n    $1\", $module_file);\n                if ($module_file === null) {\n                    throw new Exception(Context::getContext()->getTranslator()->trans('Failed to override method %1$s in class %2$s.', array($method->getName(), $classname), 'Admin.Modules.Notification'));\n                }\n            }\n\n            // Check if none of the properties already exists in the override class\n            foreach ($module_class->getProperties() as $property) {\n                if ($override_class->hasProperty($property->getName())) {\n                    throw new Exception(Context::getContext()->getTranslator()->trans('The property %1$s in the class %2$s is already defined.', array($property->getName(), $classname), 'Admin.Modules.Notification'));\n                }\n\n                $module_file = preg_replace('/((?:public|private|protected)\\s)\\s*(static\\s)?\\s*(\\$\\b' . $property->getName() . '\\b)/ism', \"/*\\n    * module: \" . $this->name . \"\\n    * date: \" . date('Y-m-d H:i:s') . \"\\n    * version: \" . $this->version . \"\\n    */\\n    $1$2$3\", $module_file);\n                if ($module_file === null) {\n                    throw new Exception(Context::getContext()->getTranslator()->trans('Failed to override property %1$s in class %2$s.', array($property->getName(), $classname), 'Admin.Modules.Notification'));\n                }\n            }\n\n            foreach ($module_class->getConstants() as $constant => $value) {\n                if ($override_class->hasConstant($constant)) {\n                    throw new Exception(Context::getContext()->getTranslator()->trans('The constant %1$s in the class %2$s is already defined.', array($constant, $classname), 'Admin.Modules.Notification'));\n                }\n\n                $module_file = preg_replace('/(const\\s)\\s*(\\b' . $constant . '\\b)/ism', \"/*\\n    * module: \" . $this->name . \"\\n    * date: \" . date('Y-m-d H:i:s') . \"\\n    * version: \" . $this->version . \"\\n    */\\n    $1$2\", $module_file);\n                if ($module_file === null) {\n                    throw new Exception(Context::getContext()->getTranslator()->trans('Failed to override constant %1$s in class %2$s.', array($constant, $classname), 'Admin.Modules.Notification'));\n                }\n            }\n\n            // Insert the methods from module override in override\n            $copy_from = array_slice($module_file, $module_class->getStartLine() + 1, $module_class->getEndLine() - $module_class->getStartLine() - 2);\n            array_splice($override_file, $override_class->getEndLine() - 1, 0, $copy_from);\n            $code = implode('', $override_file);\n\n            file_put_contents($override_path, preg_replace($pattern_escape_com, '', $code));\n        } else {\n            $override_src = $path_override;\n\n            $override_dest = _PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . 'override' . DIRECTORY_SEPARATOR . $path;\n            $dir_name = dirname($override_dest);\n\n            if (!$orig_path && !is_dir($dir_name)) {\n                @mkdir($dir_name, FileSystem::DEFAULT_MODE_FOLDER);\n            }\n\n            if (!is_writable($dir_name)) {\n                throw new Exception(Context::getContext()->getTranslator()->trans('directory (%s) not writable', array($dir_name), 'Admin.Notifications.Error'));\n            }\n            $module_file = file($override_src);\n            $module_file = array_diff($module_file, array(\"\\n\"));\n\n            if ($orig_path) {\n                do {\n                    $uniq = uniqid();\n                } while (class_exists($classname . 'OverrideOriginal_remove', false));\n                eval(preg_replace(array('#^\\s*<\\?(?:php)?#', '#class\\s+' . $classname . '(\\s+extends\\s+([a-z0-9_]+)(\\s+implements\\s+([a-z0-9_]+))?)?#i'), array(' ', 'class ' . $classname . 'Override' . $uniq), implode('', $module_file)));\n                $module_class = new ReflectionClass($classname . 'Override' . $uniq);\n\n                // For each method found in the override, prepend a comment with the module name and version\n                foreach ($module_class->getMethods() as $method) {\n                    $module_file = preg_replace('/((:?public|private|protected)\\s+(static\\s+)?function\\s+(?:\\b' . $method->getName() . '\\b))/ism', \"/*\\n    * module: \" . $this->name . \"\\n    * date: \" . date('Y-m-d H:i:s') . \"\\n    * version: \" . $this->version . \"\\n    */\\n    $1\", $module_file);\n                    if ($module_file === null) {\n                        throw new Exception(Context::getContext()->getTranslator()->trans('Failed to override method %1$s in class %2$s.', array($method->getName(), $classname), 'Admin.Modules.Notification'));\n                    }\n                }\n\n                // Same loop for properties\n                foreach ($module_class->getProperties() as $property) {\n                    $module_file = preg_replace('/((?:public|private|protected)\\s)\\s*(static\\s)?\\s*(\\$\\b' . $property->getName() . '\\b)/ism', \"/*\\n    * module: \" . $this->name . \"\\n    * date: \" . date('Y-m-d H:i:s') . \"\\n    * version: \" . $this->version . \"\\n    */\\n    $1$2$3\", $module_file);\n                    if ($module_file === null) {\n                        throw new Exception(Context::getContext()->getTranslator()->trans('Failed to override property %1$s in class %2$s.', array($property->getName(), $classname), 'Admin.Modules.Notification'));\n                    }\n                }\n\n                // Same loop for constants\n                foreach ($module_class->getConstants() as $constant => $value) {\n                    $module_file = preg_replace('/(const\\s)\\s*(\\b' . $constant . '\\b)/ism', \"/*\\n    * module: \" . $this->name . \"\\n    * date: \" . date('Y-m-d H:i:s') . \"\\n    * version: \" . $this->version . \"\\n    */\\n    $1$2\", $module_file);\n                    if ($module_file === null) {\n                        throw new Exception(Context::getContext()->getTranslator()->trans('Failed to override constant %1$s in class %2$s.', array($constant, $classname), 'Admin.Modules.Notification'));\n                    }\n                }\n            }\n\n            file_put_contents($override_dest, preg_replace($pattern_escape_com, '', $module_file));\n\n            // Re-generate the class index\n            Tools::generateIndex();\n        }\n\n        return true;\n    }\n\n    /**\n     * Remove all methods in a module override from the override class.\n     *\n     * @param string $classname\n     *\n     * @return bool\n     */\n    public function removeOverride($classname)\n    {\n        $orig_path = $path = PrestaShopAutoload::getInstance()->getClassPath($classname . 'Core');\n\n        if ($orig_path && !$file = PrestaShopAutoload::getInstance()->getClassPath($classname)) {\n            return true;\n        } elseif (!$orig_path && Module::getModuleIdByName($classname)) {\n            $path = 'modules' . DIRECTORY_SEPARATOR . $classname . DIRECTORY_SEPARATOR . $classname . '.php';\n        }\n\n        // Check if override file is writable\n        if ($orig_path) {\n            $override_path = _PS_ROOT_DIR_ . '/' . $file;\n        } else {\n            $override_path = _PS_OVERRIDE_DIR_ . $path;\n        }\n\n        if (!is_file($override_path)) {\n            return true;\n        }\n\n        if (!is_writable($override_path)) {\n            return false;\n        }\n\n        file_put_contents($override_path, preg_replace('#(\\r\\n|\\r)#ism', \"\\n\", file_get_contents($override_path)));\n\n        if ($orig_path) {\n            // Get a uniq id for the class, because you can override a class (or remove the override) twice in the same session and we need to avoid redeclaration\n            do {\n                $uniq = uniqid();\n            } while (class_exists($classname . 'OverrideOriginal_remove', false));\n\n            // Make a reflection of the override class and the module override class\n            $override_file = file($override_path);\n\n            eval(preg_replace(array('#^\\s*<\\?(?:php)?#', '#class\\s+' . $classname . '\\s+extends\\s+([a-z0-9_]+)(\\s+implements\\s+([a-z0-9_]+))?#i'), array(' ', 'class ' . $classname . 'OverrideOriginal_remove' . $uniq), implode('', $override_file)));\n            $override_class = new ReflectionClass($classname . 'OverrideOriginal_remove' . $uniq);\n\n            $module_file = file($this->getLocalPath() . 'override/' . $path);\n            eval(preg_replace(array('#^\\s*<\\?(?:php)?#', '#class\\s+' . $classname . '(\\s+extends\\s+([a-z0-9_]+)(\\s+implements\\s+([a-z0-9_]+))?)?#i'), array(' ', 'class ' . $classname . 'Override_remove' . $uniq), implode('', $module_file)));\n            $module_class = new ReflectionClass($classname . 'Override_remove' . $uniq);\n\n            // Remove methods from override file\n            foreach ($module_class->getMethods() as $method) {\n                if (!$override_class->hasMethod($method->getName())) {\n                    continue;\n                }\n\n                $method = $override_class->getMethod($method->getName());\n                $length = $method->getEndLine() - $method->getStartLine() + 1;\n\n                $module_method = $module_class->getMethod($method->getName());\n                $module_length = $module_method->getEndLine() - $module_method->getStartLine() + 1;\n\n                $override_file_orig = $override_file;\n\n                $orig_content = preg_replace('/\\s/', '', implode('', array_splice($override_file, $method->getStartLine() - 1, $length, array_pad(array(), $length, '#--remove--#'))));\n                $module_content = preg_replace('/\\s/', '', implode('', array_splice($module_file, $module_method->getStartLine() - 1, $length, array_pad(array(), $length, '#--remove--#'))));\n\n                $replace = true;\n                if (preg_match('/\\* module: (' . $this->name . ')/ism', $override_file[$method->getStartLine() - 5])) {\n                    $override_file[$method->getStartLine() - 6] = $override_file[$method->getStartLine() - 5] = $override_file[$method->getStartLine() - 4] = $override_file[$method->getStartLine() - 3] = $override_file[$method->getStartLine() - 2] = '#--remove--#';\n                    $replace = false;\n                }\n\n                if (md5($module_content) != md5($orig_content) && $replace) {\n                    $override_file = $override_file_orig;\n                }\n            }\n\n            // Remove properties from override file\n            foreach ($module_class->getProperties() as $property) {\n                if (!$override_class->hasProperty($property->getName())) {\n                    continue;\n                }\n\n                // Replace the declaration line by #--remove--#\n                foreach ($override_file as $line_number => &$line_content) {\n                    if (preg_match('/(public|private|protected)\\s+(static\\s+)?(\\$)?' . $property->getName() . '/i', $line_content)) {\n                        if (preg_match('/\\* module: (' . $this->name . ')/ism', $override_file[$line_number - 4])) {\n                            $override_file[$line_number - 5] = $override_file[$line_number - 4] = $override_file[$line_number - 3] = $override_file[$line_number - 2] = $override_file[$line_number - 1] = '#--remove--#';\n                        }\n                        $line_content = '#--remove--#';\n\n                        break;\n                    }\n                }\n            }\n\n            // Remove properties from override file\n            foreach ($module_class->getConstants() as $constant => $value) {\n                if (!$override_class->hasConstant($constant)) {\n                    continue;\n                }\n\n                // Replace the declaration line by #--remove--#\n                foreach ($override_file as $line_number => &$line_content) {\n                    if (preg_match('/(const)\\s+(static\\s+)?(\\$)?' . $constant . '/i', $line_content)) {\n                        if (preg_match('/\\* module: (' . $this->name . ')/ism', $override_file[$line_number - 4])) {\n                            $override_file[$line_number - 5] = $override_file[$line_number - 4] = $override_file[$line_number - 3] = $override_file[$line_number - 2] = $override_file[$line_number - 1] = '#--remove--#';\n                        }\n                        $line_content = '#--remove--#';\n\n                        break;\n                    }\n                }\n            }\n\n            $count = count($override_file);\n            for ($i = 0; $i < $count; ++$i) {\n                if (preg_match('/(^\\s*\\/\\/.*)/i', $override_file[$i])) {\n                    $override_file[$i] = '#--remove--#';\n                } elseif (preg_match('/(^\\s*\\/\\*)/i', $override_file[$i])) {\n                    if (!preg_match('/(^\\s*\\* module:)/i', $override_file[$i + 1])\n                        && !preg_match('/(^\\s*\\* date:)/i', $override_file[$i + 2])\n                        && !preg_match('/(^\\s*\\* version:)/i', $override_file[$i + 3])\n                        && !preg_match('/(^\\s*\\*\\/)/i', $override_file[$i + 4])) {\n                        for (; $override_file[$i] && !preg_match('/(.*?\\*\\/)/i', $override_file[$i]); ++$i) {\n                            $override_file[$i] = '#--remove--#';\n                        }\n                        $override_file[$i] = '#--remove--#';\n                    }\n                }\n            }\n\n            // Rewrite nice code\n            $code = '';\n            foreach ($override_file as $line) {\n                if ($line == '#--remove--#') {\n                    continue;\n                }\n\n                $code .= $line;\n            }\n\n            $to_delete = preg_match('/<\\?(?:php)?\\s+(?:abstract|interface)?\\s*?class\\s+' . $classname . '\\s+extends\\s+' . $classname . 'Core\\s*?[{]\\s*?[}]/ism', $code);\n        }\n\n        if (!isset($to_delete) || $to_delete) {\n            unlink($override_path);\n        } else {\n            file_put_contents($override_path, $code);\n        }\n\n        // Re-generate the class index\n        Tools::generateIndex();\n\n        return true;\n    }\n\n    private function getWidgetHooks()\n    {\n        $hooks = array_values(Hook::getHooks(false, true));\n        $registeredHookList = Hook::getHookModuleList();\n\n        foreach ($hooks as &$hook) {\n            $hook['registered'] = !empty($registeredHookList[$hook['id_hook']][$this->id]);\n        }\n\n        return $hooks;\n    }\n\n    /**\n     * Return the hooks list where this module can be hooked.\n     *\n     * @return array hooks list\n     */\n    public function getPossibleHooksList()\n    {\n        if ($this instanceof WidgetInterface) {\n            return $this->getWidgetHooks();\n        }\n\n        $hooks_list = Hook::getHooks();\n        $possible_hooks_list = array();\n        $registeredHookList = Hook::getHookModuleList();\n        foreach ($hooks_list as &$current_hook) {\n            $hook_name = $current_hook['name'];\n            $retro_hook_name = Hook::getRetroHookName($hook_name);\n\n            if (is_callable(array($this, 'hook' . ucfirst($hook_name))) || is_callable(array($this, 'hook' . ucfirst($retro_hook_name)))) {\n                $possible_hooks_list[] = array(\n                    'id_hook' => $current_hook['id_hook'],\n                    'name' => $hook_name,\n                    'description' => $current_hook['description'],\n                    'title' => $current_hook['title'],\n                    'registered' => !empty($registeredHookList[$current_hook['id_hook']][$this->id]),\n                );\n            }\n        }\n\n        return $possible_hooks_list;\n    }\n\n    /**\n     * Retrieve an array of the override in the module.\n     *\n     * @return array|null\n     */\n    public function getOverrides()\n    {\n        if (!is_dir($this->getLocalPath() . 'override')) {\n            return null;\n        }\n\n        $result = array();\n        foreach (Tools::scandir($this->getLocalPath() . 'override', 'php', '', true) as $file) {\n            $class = basename($file, '.php');\n            if (PrestaShopAutoload::getInstance()->getClassPath($class . 'Core') || Module::getModuleIdByName($class)) {\n                $result[] = $class;\n            }\n        }\n\n        return $result;\n    }\n\n    public function getTranslator()\n    {\n        return Context::getContext()->getTranslator();\n    }\n\n    protected function trans($id, array $parameters = array(), $domain = null, $locale = null)\n    {\n        $parameters['legacy'] = 'htmlspecialchars';\n\n        return $this->getTranslator()->trans($id, $parameters, $domain, $locale);\n    }\n\n    /**\n     * Check if the module uses the new translation system.\n     *\n     * @return bool\n     */\n    public function isUsingNewTranslationSystem()\n    {\n        $moduleName = $this->name;\n        $domains = array_keys($this->context->getTranslator()->getCatalogue()->all());\n        $moduleBaseDomain = DomainHelper::buildModuleBaseDomain($moduleName);\n        $length = strlen($moduleBaseDomain);\n\n        foreach ($domains as $domain) {\n            if (substr($domain, 0, $length) === $moduleBaseDomain) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if the module is executed in Admin Legacy context.\n     *\n     * To be removed - because useless - when the migration will be done.\n     *\n     * @return bool\n     */\n    public function isAdminLegacyContext()\n    {\n        return defined('ADMIN_LEGACY_CONTEXT');\n    }\n\n    /**\n     * Check if the module is executed in Symfony context.\n     *\n     * To be removed - because useless - when the migration will be done.\n     *\n     * @return bool\n     */\n    public function isSymfonyContext()\n    {\n        return !$this->isAdminLegacyContext() && defined('_PS_ADMIN_DIR_');\n    }\n\n    /**\n     * Access the Symfony Container if we are in Symfony Context.\n     * Note: in this case, we must get a container from SymfonyContainer class.\n     * Note: if not in Symfony context, fallback to legacy Container for FO/BO.\n     *\n     * @param string $serviceName\n     *\n     * @return object|false if a container is not available, it returns false\n     */\n    public function get($serviceName)\n    {\n        if ($this->isSymfonyContext()) {\n            if (null === $this->container) {\n                $this->container = SymfonyContainer::getInstance();\n            }\n\n            return $this->container->get($serviceName);\n        }\n\n        if ($this->context->controller instanceof Controller) {\n            return $this->context->controller->get($serviceName);\n        }\n\n        return false;\n    }\n\n    /**\n     * Save dashboard configuration\n     *\n     * @param array $config\n     *\n     * @return array Array of errors\n     */\n    public function validateDashConfig(array $config): array\n    {\n        return [];\n    }\n\n    /**\n     * Save dashboard configuration\n     *\n     * @param array $config\n     *\n     * @return bool Determines if the save returns an error\n     */\n    public function saveDashConfig(array $config): bool\n    {\n        return false;\n    }\n}\n\nfunction ps_module_version_sort($a, $b)\n{\n    return version_compare($a['version'], $b['version']);\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse PrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleManagerBuilder;\n\nclass AdminDashboardControllerCore extends AdminController\n{\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->display = 'view';\n\n        parent::__construct();\n\n        if (Tools::isSubmit('profitability_conf') || Tools::isSubmit('submitOptionsconfiguration')) {\n            $this->fields_options = $this->getOptionFields();\n        }\n    }\n\n    public function setMedia($isNewTheme = false)\n    {\n        parent::setMedia($isNewTheme);\n\n        $this->addJqueryUI('ui.datepicker');\n        $this->addJS(array(\n            _PS_JS_DIR_ . 'vendor/d3.v3.min.js',\n            __PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/vendor/nv.d3.min.js',\n            _PS_JS_DIR_ . '/admin/dashboard.js',\n        ));\n        $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/css/vendor/nv.d3.css');\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        $this->page_header_toolbar_title = $this->trans('Dashboard', array(), 'Admin.Dashboard.Feature');\n        $this->page_header_toolbar_btn['switch_demo'] = array(\n            'desc' => $this->trans('Demo mode', array(), 'Admin.Dashboard.Feature'),\n            'icon' => 'process-icon-toggle-' . (Configuration::get('PS_DASHBOARD_SIMULATION') ? 'on' : 'off'),\n            'help' => $this->trans('This mode displays sample data so you can try your dashboard without real numbers.', array(), 'Admin.Dashboard.Help'),\n        );\n\n        parent::initPageHeaderToolbar();\n\n        // Remove the last element on this controller to match the title with the rule of the others\n        array_pop($this->meta_title);\n    }\n\n    protected function getOptionFields()\n    {\n        $forms = array();\n        $currency = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n        $carriers = Carrier::getCarriers((int) $this->context->language->id, true, false, false, null, Carrier::ALL_CARRIERS);\n        $modules = Module::getModulesOnDisk(true);\n\n        $forms = array(\n            'payment' => array('title' => $this->trans('Average bank fees per payment method', array(), 'Admin.Dashboard.Feature'), 'id' => 'payment'),\n            'carriers' => array('title' => $this->trans('Average shipping fees per shipping method', array(), 'Admin.Dashboard.Feature'), 'id' => 'carriers'),\n            'other' => array('title' => $this->trans('Other settings', array(), 'Admin.Dashboard.Feature'), 'id' => 'other'),\n        );\n        foreach ($forms as &$form) {\n            $form['icon'] = 'tab-preferences';\n            $form['fields'] = array();\n            $form['submit'] = array('title' => $this->trans('Save', array(), 'Admin.Actions'));\n        }\n\n        foreach ($modules as $module) {\n            if (isset($module->tab) && $module->tab == 'payments_gateways' && $module->id) {\n                $moduleClass = Module::getInstanceByName($module->name);\n                if (!$moduleClass->isEnabledForShopContext()) {\n                    continue;\n                }\n\n                $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_FIXED'] = array(\n                    'title' => $module->displayName,\n                    'desc' => $this->trans(\n                        'Choose a fixed fee for each order placed in %currency% with %module%.',\n                        array(\n                            '%currency' => $currency->iso_code,\n                            '%module%' => $module->displayName,\n                        ),\n                        'Admin.Dashboard.Help'\n                    ),\n                    'validation' => 'isPrice',\n                    'cast' => 'floatval',\n                    'type' => 'text',\n                    'defaultValue' => '0',\n                    'suffix' => $currency->iso_code,\n                );\n                $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_VAR'] = array(\n                    'title' => $module->displayName,\n                    'desc' => $this->trans(\n                        'Choose a variable fee for each order placed in %currency% with %module%. It will be applied on the total paid with taxes.',\n                        array(\n                            '%currency' => $currency->iso_code,\n                            '%module%' => $module->displayName,\n                        ),\n                        'Admin.Dashboard.Help'\n                    ),\n                    'validation' => 'isPercentage',\n                    'cast' => 'floatval',\n                    'type' => 'text',\n                    'defaultValue' => '0',\n                    'suffix' => '%',\n                );\n\n                if (Currency::isMultiCurrencyActivated()) {\n                    $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_FIXED_FOREIGN'] = array(\n                        'title' => $module->displayName,\n                        'desc' => $this->trans(\n                            'Choose a fixed fee for each order placed with a foreign currency with %module%.',\n                            array(\n                                '%module%' => $module->displayName,\n                            ),\n                            'Admin.Dashboard.Help'\n                        ),\n                        'validation' => 'isPrice',\n                        'cast' => 'floatval',\n                        'type' => 'text',\n                        'defaultValue' => '0',\n                        'suffix' => $currency->iso_code,\n                    );\n                    $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_VAR_FOREIGN'] = array(\n                        'title' => $module->displayName,\n                        'desc' => $this->trans(\n                            'Choose a variable fee for each order placed with a foreign currency with %module%. It will be applied on the total paid with taxes.',\n                             array('%module%' => $module->displayName),\n                             'Admin.Dashboard.Help'\n                            ),\n                        'validation' => 'isPercentage',\n                        'cast' => 'floatval',\n                        'type' => 'text',\n                        'defaultValue' => '0',\n                        'suffix' => '%',\n                    );\n                }\n            }\n        }\n\n        foreach ($carriers as $carrier) {\n            $forms['carriers']['fields']['CONF_' . strtoupper($carrier['id_reference']) . '_SHIP'] = array(\n                'title' => $carrier['name'],\n                'desc' => $this->trans(\n                    'For the carrier named %s, indicate the domestic delivery costs  in percentage of the price charged to customers.',\n                    array(\n                        '%s' => $carrier['name'],\n                    ),\n                    'Admin.Dashboard.Help'\n                ),\n                'validation' => 'isPercentage',\n                'cast' => 'floatval',\n                'type' => 'text',\n                'defaultValue' => '0',\n                'suffix' => '%',\n            );\n            $forms['carriers']['fields']['CONF_' . strtoupper($carrier['id_reference']) . '_SHIP_OVERSEAS'] = array(\n                'title' => $carrier['name'],\n                'desc' => $this->trans(\n                    'For the carrier named %s, indicate the overseas delivery costs in percentage of the price charged to customers.',\n                    array(\n                        '%s' => $carrier['name'],\n                    ),\n                    'Admin.Dashboard.Help'\n                ),\n                'validation' => 'isPercentage',\n                'cast' => 'floatval',\n                'type' => 'text',\n                'defaultValue' => '0',\n                'suffix' => '%',\n            );\n        }\n\n        $forms['carriers']['description'] = $this->trans('Method: Indicate the percentage of your carrier margin. For example, if you charge $10 of shipping fees to your customer for each shipment, but you really pay $4 to this carrier, then you should indicate \"40\" in the percentage field.', array(), 'Admin.Dashboard.Help');\n\n        $forms['other']['fields']['CONF_AVERAGE_PRODUCT_MARGIN'] = array(\n            'title' => $this->trans('Average gross margin percentage', array(), 'Admin.Dashboard.Feature'),\n            'desc' => $this->trans('You should calculate this percentage as follows: ((total sales revenue) - (cost of goods sold)) / (total sales revenue) * 100. This value is only used to calculate the Dashboard approximate gross margin, if you do not specify the wholesale price for each product.', array(), 'Admin.Dashboard.Help'),\n            'validation' => 'isPercentage',\n            'cast' => 'intval',\n            'type' => 'text',\n            'defaultValue' => '0',\n            'suffix' => '%',\n        );\n\n        $forms['other']['fields']['CONF_ORDER_FIXED'] = array(\n            'title' => $this->trans('Other fees per order', array(), 'Admin.Dashboard.Feature'),\n            'desc' => $this->trans('You should calculate this value by making the sum of all of your additional costs per order.', array(), 'Admin.Dashboard.Help'),\n            'validation' => 'isPrice',\n            'cast' => 'floatval',\n            'type' => 'text',\n            'defaultValue' => '0',\n            'suffix' => $currency->iso_code,\n        );\n\n        Media::addJsDef(array(\n            'dashboard_ajax_url' => $this->context->link->getAdminLink('AdminDashboard'),\n            'read_more' => '',\n        ));\n\n        return $forms;\n    }\n\n    public function renderView()\n    {\n        if (Tools::isSubmit('profitability_conf')) {\n            return parent::renderOptions();\n        }\n\n        // $translations = array(\n        // \t'Calendar' => $this->trans('Calendar', array(),'Admin.Global'),\n        // \t'Day' => $this->trans('Day', array(), 'Admin.Global'),\n        // \t'Month' => $this->trans('Month', array(), 'Admin.Global'),\n        // \t'Year' => $this->trans('Year', array(), 'Admin.Global'),\n        // \t'From' => $this->trans('From:', array(), 'Admin.Global'),\n        // \t'To' => $this->trans('To:', array(), 'Admin.Global'),\n        // \t'Save' => $this->trans('Save', array(), 'Admin.Global')\n        // );\n\n        $testStatsDateUpdate = $this->context->cookie->__get('stats_date_update');\n        if (!empty($testStatsDateUpdate) && $this->context->cookie->__get('stats_date_update') < strtotime(date('Y-m-d'))) {\n            switch ($this->context->employee->preselect_date_range) {\n                case 'day':\n                    $date_from = date('Y-m-d');\n                    $date_to = date('Y-m-d');\n\n                    break;\n                case 'prev-day':\n                    $date_from = date('Y-m-d', strtotime('-1 day'));\n                    $date_to = date('Y-m-d', strtotime('-1 day'));\n\n                    break;\n                case 'month':\n                default:\n                    $date_from = date('Y-m-01');\n                    $date_to = date('Y-m-d');\n\n                    break;\n                case 'prev-month':\n                    $date_from = date('Y-m-01', strtotime('-1 month'));\n                    $date_to = date('Y-m-t', strtotime('-1 month'));\n\n                    break;\n                case 'year':\n                    $date_from = date('Y-01-01');\n                    $date_to = date('Y-m-d');\n\n                    break;\n                case 'prev-year':\n                    $date_from = date('Y-m-01', strtotime('-1 year'));\n                    $date_to = date('Y-12-t', strtotime('-1 year'));\n\n                    break;\n            }\n            $this->context->employee->stats_date_from = $date_from;\n            $this->context->employee->stats_date_to = $date_to;\n            $this->context->employee->update();\n            $this->context->cookie->__set('stats_date_update', strtotime(date('Y-m-d')));\n            $this->context->cookie->write();\n        }\n\n        $calendar_helper = new HelperCalendar();\n\n        $calendar_helper->setDateFrom(Tools::getValue('date_from', $this->context->employee->stats_date_from));\n        $calendar_helper->setDateTo(Tools::getValue('date_to', $this->context->employee->stats_date_to));\n\n        $stats_compare_from = $this->context->employee->stats_compare_from;\n        $stats_compare_to = $this->context->employee->stats_compare_to;\n\n        if (null === $stats_compare_from || $stats_compare_from == '0000-00-00') {\n            $stats_compare_from = null;\n        }\n\n        if (null === $stats_compare_to || $stats_compare_to == '0000-00-00') {\n            $stats_compare_to = null;\n        }\n\n        $calendar_helper->setCompareDateFrom($stats_compare_from);\n        $calendar_helper->setCompareDateTo($stats_compare_to);\n        $calendar_helper->setCompareOption(Tools::getValue('compare_date_option', $this->context->employee->stats_compare_option));\n\n        $params = array(\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n        );\n\n        $moduleManagerBuilder = ModuleManagerBuilder::getInstance();\n        $moduleManager = $moduleManagerBuilder->build();\n\n        $this->tpl_view_vars = array(\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n            'hookDashboardZoneOne' => Hook::exec('dashboardZoneOne', $params),\n            'hookDashboardZoneTwo' => Hook::exec('dashboardZoneTwo', $params),\n            //'translations' => $translations,\n            'action' => '#',\n            'warning' => $this->getWarningDomainName(),\n            'new_version_url' => Tools::getCurrentUrlProtocolPrefix() . _PS_API_DOMAIN_ . '/version/check_version.php?v=' . _PS_VERSION_ . '&lang=' . $this->context->language->iso_code . '&autoupgrade=' . (int) ($moduleManager->isInstalled('autoupgrade') && $moduleManager->isEnabled('autoupgrade')) . '&hosted_mode=' . (int) defined('_PS_HOST_MODE_'),\n            'dashboard_use_push' => Configuration::get('PS_DASHBOARD_USE_PUSH'),\n            'calendar' => $calendar_helper->generate(),\n            'PS_DASHBOARD_SIMULATION' => Configuration::get('PS_DASHBOARD_SIMULATION'),\n            'datepickerFrom' => Tools::getValue('datepickerFrom', $this->context->employee->stats_date_from),\n            'datepickerTo' => Tools::getValue('datepickerTo', $this->context->employee->stats_date_to),\n            'preselect_date_range' => Tools::getValue('preselectDateRange', $this->context->employee->preselect_date_range),\n            'help_center_link' => $this->getHelpCenterLink($this->context->language->iso_code),\n        );\n\n        return parent::renderView();\n    }\n\n    public function postProcess()\n    {\n        if (Tools::isSubmit('submitDateRealTime')) {\n            if ($use_realtime = (int) Tools::getValue('submitDateRealTime')) {\n                $this->context->employee->stats_date_from = date('Y-m-d');\n                $this->context->employee->stats_date_to = date('Y-m-d');\n                $this->context->employee->stats_compare_option = HelperCalendar::DEFAULT_COMPARE_OPTION;\n                $this->context->employee->stats_compare_from = null;\n                $this->context->employee->stats_compare_to = null;\n                $this->context->employee->update();\n            }\n            Configuration::updateValue('PS_DASHBOARD_USE_PUSH', $use_realtime);\n        }\n\n        if (Tools::isSubmit('submitDateRange')) {\n            if (!Validate::isDate(Tools::getValue('date_from'))\n                || !Validate::isDate(Tools::getValue('date_to'))) {\n                $this->errors[] = $this->trans('The selected date range is not valid.', array(), 'Admin.Notifications.Error');\n            }\n\n            if (Tools::getValue('datepicker_compare')) {\n                if (!Validate::isDate(Tools::getValue('compare_date_from'))\n                    || !Validate::isDate(Tools::getValue('compare_date_to'))) {\n                    $this->errors[] = $this->trans('The selected date range is not valid.', array(), 'Admin.Notifications.Error');\n                }\n            }\n\n            if (!count($this->errors)) {\n                $this->context->employee->stats_date_from = Tools::getValue('date_from');\n                $this->context->employee->stats_date_to = Tools::getValue('date_to');\n                $this->context->employee->preselect_date_range = Tools::getValue('preselectDateRange');\n\n                if (Tools::getValue('datepicker_compare')) {\n                    $this->context->employee->stats_compare_from = Tools::getValue('compare_date_from');\n                    $this->context->employee->stats_compare_to = Tools::getValue('compare_date_to');\n                    $this->context->employee->stats_compare_option = Tools::getValue('compare_date_option');\n                } else {\n                    $this->context->employee->stats_compare_from = null;\n                    $this->context->employee->stats_compare_to = null;\n                    $this->context->employee->stats_compare_option = HelperCalendar::DEFAULT_COMPARE_OPTION;\n                }\n\n                $this->context->employee->update();\n            }\n        }\n\n        parent::postProcess();\n    }\n\n    protected function getWarningDomainName()\n    {\n        $warning = false;\n        if (Shop::isFeatureActive()) {\n            return;\n        }\n\n        $shop = Context::getContext()->shop;\n        if ($_SERVER['HTTP_HOST'] != $shop->domain && $_SERVER['HTTP_HOST'] != $shop->domain_ssl && Tools::getValue('ajax') == false && !defined('_PS_HOST_MODE_')) {\n            $warning = $this->trans('You are currently connected under the following domain name:', array(), 'Admin.Dashboard.Notification') . ' <span style=\"color: #CC0000;\">' . $_SERVER['HTTP_HOST'] . '</span><br />';\n            if (Configuration::get('PS_MULTISHOP_FEATURE_ACTIVE')) {\n                $warning .= $this->trans(\n                    'This is different from the shop domain name set in the Multistore settings: \"%s\".',\n                    array(\n                        '%s' => $shop->domain,\n                    ),\n                    'Admin.Dashboard.Notification'\n                ) . $this->trans(\n                    'If this is your main domain, please {link}change it now{/link}.',\n                    array(\n                        '{link}' => '<a href=\"index.php?controller=AdminShopUrl&id_shop_url=' . (int) $shop->id . '&updateshop_url&token=' . Tools::getAdminTokenLite('AdminShopUrl') . '\">',\n                        '{/link}' => '</a>',\n                    ),\n                    'Admin.Dashboard.Notification'\n                );\n            } else {\n                $warning .= $this->trans('This is different from the domain name set in the \"SEO & URLs\" tab.', array(), 'Admin.Dashboard.Notification') . '\n\t\t\t\t' . $this->trans(\n                    'If this is your main domain, please {link}change it now{/link}.',\n                    array(\n                        '{link}' => '<a href=\"index.php?controller=AdminMeta&token=' . Tools::getAdminTokenLite('AdminMeta') . '#meta_fieldset_shop_url\">',\n                        '{/link}' => '</a>',\n                    ),\n                    'Admin.Dashboard.Notification'\n                );\n            }\n        }\n\n        return $warning;\n    }\n\n    public function ajaxProcessRefreshDashboard()\n    {\n        $id_module = null;\n        if ($module = Tools::getValue('module')) {\n            $module_obj = Module::getInstanceByName($module);\n            if (Validate::isLoadedObject($module_obj)) {\n                $id_module = $module_obj->id;\n            }\n        }\n\n        $params = array(\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n            'compare_from' => $this->context->employee->stats_compare_from,\n            'compare_to' => $this->context->employee->stats_compare_to,\n            'dashboard_use_push' => (int) Tools::getValue('dashboard_use_push'),\n            'extra' => (int) Tools::getValue('extra'),\n        );\n\n        die(json_encode(Hook::exec('dashboardData', $params, $id_module, true, true, (int) Tools::getValue('dashboard_use_push'))));\n    }\n\n    public function ajaxProcessSetSimulationMode()\n    {\n        Configuration::updateValue('PS_DASHBOARD_SIMULATION', (int) Tools::getValue('PS_DASHBOARD_SIMULATION'));\n        die('k' . Configuration::get('PS_DASHBOARD_SIMULATION') . 'k');\n    }\n\n    public function ajaxProcessGetBlogRss()\n    {\n        $return = array('has_errors' => false, 'rss' => array());\n        if (!$this->isFresh('/config/xml/blog-' . $this->context->language->iso_code . '.xml', 86400)) {\n            if (!$this->refresh('/config/xml/blog-' . $this->context->language->iso_code . '.xml', _PS_API_URL_ . '/rss/blog/blog-' . $this->context->language->iso_code . '.xml')) {\n                $return['has_errors'] = true;\n            }\n        }\n\n        if (!$return['has_errors']) {\n            $rss = @simplexml_load_file(_PS_ROOT_DIR_ . '/config/xml/blog-' . $this->context->language->iso_code . '.xml');\n            if (!$rss) {\n                $return['has_errors'] = true;\n            }\n            $articles_limit = 2;\n            if ($rss) {\n                foreach ($rss->channel->item as $item) {\n                    if ($articles_limit > 0 && Validate::isCleanHtml((string) $item->title) && Validate::isCleanHtml((string) $item->description)\n                        && isset($item->link, $item->title)) {\n                        if (in_array($this->context->mode, array(Context::MODE_HOST, Context::MODE_HOST_CONTRIB))) {\n                            $utm_content = 'cloud';\n                        } else {\n                            $utm_content = 'download';\n                        }\n\n                        $shop_default_country_id = (int) Configuration::get('PS_COUNTRY_DEFAULT');\n                        $shop_default_iso_country = (string) Tools::strtoupper(Country::getIsoById($shop_default_country_id));\n                        $analytics_params = array('utm_source' => 'back-office',\n                            'utm_medium' => 'rss',\n                            'utm_campaign' => 'back-office-' . $shop_default_iso_country,\n                            'utm_content' => $utm_content,\n                        );\n                        $url_query = parse_url($item->link, PHP_URL_QUERY);\n                        parse_str($url_query, $link_query_params);\n\n                        if ($link_query_params) {\n                            $full_url_params = array_merge($link_query_params, $analytics_params);\n                            $base_url = explode('?', (string) $item->link);\n                            $base_url = (string) $base_url[0];\n                            $article_link = $base_url . '?' . http_build_query($full_url_params);\n                        } else {\n                            $article_link = (string) $item->link . '?' . http_build_query($analytics_params);\n                        }\n\n                        $return['rss'][] = array(\n                            'date' => Tools::displayDate(date('Y-m-d', strtotime((string) $item->pubDate))),\n                            'title' => (string) Tools::htmlentitiesUTF8($item->title),\n                            'short_desc' => Tools::truncateString(strip_tags((string) $item->description), 150),\n                            'link' => (string) $article_link,\n                        );\n                    } else {\n                        break;\n                    }\n                    --$articles_limit;\n                }\n            }\n        }\n        die(json_encode($return));\n    }\n\n    public function ajaxProcessSaveDashConfig()\n    {\n        $return = array('has_errors' => false, 'errors' => array());\n        $module = Tools::getValue('module');\n        $hook = Tools::getValue('hook');\n        $configs = Tools::getValue('configs');\n\n        $params = array(\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n        );\n\n        if (Validate::isModuleName($module) && $module_obj = Module::getInstanceByName($module)) {\n            $return['errors'] = $module_obj->validateDashConfig($configs);\n            if (count($return['errors'])) {\n                $return['has_errors'] = true;\n            } else {\n                $return['has_errors'] = $module_obj->saveDashConfig($configs);\n            }\n        }\n\n        if (Validate::isHookName($hook) && method_exists($module_obj, $hook)) {\n            $return['widget_html'] = $module_obj->$hook($params);\n        }\n\n        die(json_encode($return));\n    }\n\n    /**\n     * Returns the Help center link for the provided locale\n     *\n     * @param string $languageCode 2-letter locale code\n     *\n     * @return string\n     */\n    private function getHelpCenterLink($languageCode)\n    {\n        $links = [\n            'fr' => 'https://www.prestashop.com/fr/contact?utm_source=back-office&utm_medium=links&utm_campaign=help-center-fr&utm_content=download17',\n            'en' => 'https://www.prestashop.com/en/contact?utm_source=back-office&utm_medium=links&utm_campaign=help-center-en&utm_content=download17',\n            'es' => 'https://www.prestashop.com/es/contacto?utm_source=back-office&utm_medium=links&utm_campaign=help-center-es&utm_content=download17',\n            'de' => 'https://www.prestashop.com/de/kontakt?utm_source=back-office&utm_medium=links&utm_campaign=help-center-de&utm_content=download17',\n            'it' => 'https://www.prestashop.com/it/contatti?utm_source=back-office&utm_medium=links&utm_campaign=help-center-it&utm_content=download17',\n            'nl' => 'https://www.prestashop.com/nl/contacteer-ons?utm_source=back-office&utm_medium=links&utm_campaign=help-center-nl&utm_content=download17',\n            'pt' => 'https://www.prestashop.com/pt/contato?utm_source=back-office&utm_medium=links&utm_campaign=help-center-pt&utm_content=download17',\n            'pl' => 'https://www.prestashop.com/pl/kontakt?utm_source=back-office&utm_medium=links&utm_campaign=help-center-pl&utm_content=download17',\n        ];\n\n        return isset($links[$languageCode]) ? $links[$languageCode] : $links['en'];\n    }\n}\n"], "filenames": ["classes/module/Module.php", "controllers/admin/AdminDashboardController.php"], "buggy_code_start_loc": [3429, 522], "buggy_code_end_loc": [3429, 537], "fixing_code_start_loc": [3430, 522], "fixing_code_end_loc": [3454, 527], "type": "NVD-CWE-Other", "message": "In PrestaShop from version 1.6.0.1 and before version 1.7.6.6, the dashboard allows rewriting all configuration variables. The problem is fixed in 1.7.6.6", "other": {"cve": {"id": "CVE-2020-15082", "sourceIdentifier": "security-advisories@github.com", "published": "2020-07-02T17:15:12.357", "lastModified": "2020-07-02T18:34:53.437", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In PrestaShop from version 1.6.0.1 and before version 1.7.6.6, the dashboard allows rewriting all configuration variables. The problem is fixed in 1.7.6.6"}, {"lang": "es", "value": "En PrestaShop desde versi\u00f3n 1.6.0.1 y anteriores a versi\u00f3n 1.7.6.6, el panel permite reescribir todas las variables de configuraci\u00f3n. El problema es corregido en versi\u00f3n 1.7.6.6"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.6.0.1", "versionEndExcluding": "1.7.6.6", "matchCriteriaId": "3CD329A1-9C65-4A8A-863C-D2E3DE1370A0"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/0f0d6238169a79d94f5ef28d24e60a9be8902f4b", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-mc98-xjm3-c4fm", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/0f0d6238169a79d94f5ef28d24e60a9be8902f4b"}}