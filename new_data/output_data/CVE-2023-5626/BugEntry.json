{"buggy_code": ["<?php\n\n/**\n * @file classes/subscription/form/PaymentTypesForm.inc.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class PaymentTypesForm\n * @ingroup subscription\n *\n * @brief Permit configuration of the various payment types.\n */\n\nimport('lib.pkp.classes.form.Form');\n\nclass PaymentTypesForm extends Form {\n\t/** @var array the setting names */\n\tprotected $settings;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic function __construct() {\n\t\tparent::__construct('payments/paymentTypesForm.tpl');\n\n\t\tAppLocale::requireComponents(LOCALE_COMPONENT_APP_MANAGER);\n\n\t\t$this->settings = array(\n\t\t\t'publicationFee' => 'float',\n\t\t\t'purchaseArticleFeeEnabled' => 'bool',\n\t\t\t'purchaseArticleFee' => 'float',\n\t\t\t'purchaseIssueFeeEnabled' => 'bool',\n\t\t\t'purchaseIssueFee' => 'float',\n\t\t\t'membershipFee' => 'float',\n\t\t\t'restrictOnlyPdf' => 'bool',\n\t\t);\n\n\t\t$this->addCheck(new FormValidatorCustom($this, 'publicationFee', 'optional', 'manager.payment.form.numeric', function($publicationFee) {\n\t\t\treturn is_numeric($publicationFee) && $publicationFee >= 0;\n\t\t}));\n\t\t$this->addCheck(new FormValidatorCustom($this, 'purchaseArticleFee', 'optional', 'manager.payment.form.numeric', function($purchaseArticleFee) {\n\t\t\treturn is_numeric($purchaseArticleFee) && $purchaseArticleFee >= 0;\n\t\t}));\n\t\t$this->addCheck(new FormValidatorCustom($this, 'purchaseIssueFee', 'optional', 'manager.payment.form.numeric', function($purchaseIssueFee) {\n\t\t\treturn is_numeric($purchaseIssueFee) && $purchaseIssueFee >= 0;\n\t\t}));\n\t\t$this->addCheck(new FormValidatorCustom($this, 'membershipFee', 'optional', 'manager.payment.form.numeric', function($membershipFee) {\n\t\t\treturn is_numeric($membershipFee) && $membershipFee >= 0;\n\t\t}));\n\t}\n\n\t/**\n\t * Initialize form data from current group group.\n\t */\n\tpublic function initData() {\n\t\t$journal = Application::get()->getRequest()->getContext();\n\t\tforeach (array_keys($this->settings) as $settingName) {\n\t\t\t$this->setData($settingName, $journal->getData($settingName));\n\t\t}\n\t}\n\n\t/**\n\t * Assign form data to user-submitted data.\n\t */\n\tpublic function readInputData() {\n\t\t$this->readUserVars(array_keys($this->settings));\n\t}\n\n\t/**\n\t * @copydoc Form::execute\n\t */\n\tpublic function execute(...$functionArgs) {\n\t\tparent::execute(...$functionArgs);\n\t\t$journal = Application::get()->getRequest()->getJournal();\n\t\tforeach (array_keys($this->settings) as $settingName) {\n\t\t\t$journal->setData($settingName, $this->getData($settingName));\n\t\t}\n\t\t$journalDao = DAORegistry::getDAO('JournalDAO'); /* @var $journalDao JournalDAO */\n\t\t$journalDao->updateObject($journal);\n\t}\n}\n\n\n"], "fixing_code": ["<?php\n\n/**\n * @file classes/subscription/form/PaymentTypesForm.inc.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class PaymentTypesForm\n * @ingroup subscription\n *\n * @brief Permit configuration of the various payment types.\n */\n\nimport('lib.pkp.classes.form.Form');\n\nclass PaymentTypesForm extends Form {\n\t/** @var array the setting names */\n\tprotected $settings;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic function __construct() {\n\t\tparent::__construct('payments/paymentTypesForm.tpl');\n\n\t\tAppLocale::requireComponents(LOCALE_COMPONENT_APP_MANAGER);\n\n\t\t$this->settings = array(\n\t\t\t'publicationFee' => 'float',\n\t\t\t'purchaseArticleFeeEnabled' => 'bool',\n\t\t\t'purchaseArticleFee' => 'float',\n\t\t\t'purchaseIssueFeeEnabled' => 'bool',\n\t\t\t'purchaseIssueFee' => 'float',\n\t\t\t'membershipFee' => 'float',\n\t\t\t'restrictOnlyPdf' => 'bool',\n\t\t);\n\n\t\t$this->addCheck(new FormValidatorCustom($this, 'publicationFee', 'optional', 'manager.payment.form.numeric', function($publicationFee) {\n\t\t\treturn is_numeric($publicationFee) && $publicationFee >= 0;\n\t\t}));\n\t\t$this->addCheck(new FormValidatorCustom($this, 'purchaseArticleFee', 'optional', 'manager.payment.form.numeric', function($purchaseArticleFee) {\n\t\t\treturn is_numeric($purchaseArticleFee) && $purchaseArticleFee >= 0;\n\t\t}));\n\t\t$this->addCheck(new FormValidatorCustom($this, 'purchaseIssueFee', 'optional', 'manager.payment.form.numeric', function($purchaseIssueFee) {\n\t\t\treturn is_numeric($purchaseIssueFee) && $purchaseIssueFee >= 0;\n\t\t}));\n\t\t$this->addCheck(new FormValidatorCustom($this, 'membershipFee', 'optional', 'manager.payment.form.numeric', function($membershipFee) {\n\t\t\treturn is_numeric($membershipFee) && $membershipFee >= 0;\n\t\t}));\n\t\t$this->addCheck(new FormValidatorCSRF($this));\n\t}\n\n\t/**\n\t * Initialize form data from current group group.\n\t */\n\tpublic function initData() {\n\t\t$journal = Application::get()->getRequest()->getContext();\n\t\tforeach (array_keys($this->settings) as $settingName) {\n\t\t\t$this->setData($settingName, $journal->getData($settingName));\n\t\t}\n\t}\n\n\t/**\n\t * Assign form data to user-submitted data.\n\t */\n\tpublic function readInputData() {\n\t\t$this->readUserVars(array_keys($this->settings));\n\t}\n\n\t/**\n\t * @copydoc Form::execute\n\t */\n\tpublic function execute(...$functionArgs) {\n\t\tparent::execute(...$functionArgs);\n\t\t$journal = Application::get()->getRequest()->getJournal();\n\t\tforeach (array_keys($this->settings) as $settingName) {\n\t\t\t$journal->setData($settingName, $this->getData($settingName));\n\t\t}\n\t\t$journalDao = DAORegistry::getDAO('JournalDAO'); /* @var $journalDao JournalDAO */\n\t\t$journalDao->updateObject($journal);\n\t}\n}\n\n\n"], "filenames": ["classes/subscription/form/PaymentTypesForm.inc.php"], "buggy_code_start_loc": [51], "buggy_code_end_loc": [51], "fixing_code_start_loc": [52], "fixing_code_end_loc": [53], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository pkp/ojs prior to 3.3.0-16.", "other": {"cve": {"id": "CVE-2023-5626", "sourceIdentifier": "security@huntr.dev", "published": "2023-10-18T00:15:10.347", "lastModified": "2023-10-25T00:11:45.460", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository pkp/ojs prior to 3.3.0-16."}, {"lang": "es", "value": "Cross-Site Request Forgery (CSRF) en el repositorio de GitHub pkp/ojs anterior a 3.3.0-16."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sfu:open_journal_system:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.3.0-16", "matchCriteriaId": "48ABAEE8-CB2D-4653-9F9D-218CB76D54FD"}]}]}], "references": [{"url": "https://github.com/pkp/ojs/commit/99a9f393190383454aa5ddffedffc89596f6c682", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/c99279c1-709a-4e7b-a042-010c2bb44d6b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pkp/ojs/commit/99a9f393190383454aa5ddffedffc89596f6c682"}}