{"buggy_code": ["# Applications\n\nYou can use Application support to graph performance statistics of\nmany applications.\n\nDifferent applications support a variety of ways to collect data: \n\n1. By direct connection to the application\n2. snmpd extend\n3. [The agent](Agent-Setup.md).\n\nThe monitoring of applications could be added\nbefore or after the hosts have been added to LibreNMS.\n\nIf multiple methods of collection are listed you only need to enable one.\n\n## SNMP Extend\n\nWhen using the snmp extend method, the application discovery module\nwill pick up which applications you have set up for monitoring\nautomatically, even if the device is already in LibreNMS. The\napplication discovery module is enabled by default for most \\*nix\noperating systems, but in some cases you will need to manually enable\nthe application discovery module.\n\n### SUDO\n\nOne major thing to keep in mind when using SNMP extend is these run as the snmpd\nuser that can be an unprivileged user. In these situations you need to use sudo.\n\nTo test if you need sudo, first check the user snmpd is running as.\nThen test if you can run the extend script as that user without issue.\nFor example if snmpd is running as 'Debian-snmp' and we want\nto run the extend for proxmox, we check that the following run without error:\n\n```\nsudo -u Debian-snmp /usr/local/bin/proxmox\n```\n\nIf it doesn't work, then you will need to use sudo with the extend command.\nFor the example above, that would mean adding the line below to the sudoers file:\n\n```\nDebian-snmp ALL = NOPASSWD: /usr/local/bin/proxmox\n```\n\nFinally we would need to add sudo to the extend command, which would look\nlike that for proxmox:\n\n```\nextend proxmox /usr/bin/sudo /usr/local/bin/proxmox\n```\n\n## Enable the application discovery module\n\n1. Edit the device for which you want to add this support\n1. Click on the *Modules* tab and enable the `applications` module.\n1. This will be automatically saved, and you should get a green\n   confirmation pop-up message.\n\n![Enable-application-module](/img/Enable_application_module.png)\n\nAfter you have enabled the application module, it would be wise to\nthen also enable which applications you want to monitor, in the rare\ncase where LibreNMS does not automatically detect it.\n\n**Note**: Only do this if an application was not auto-discovered by\nLibreNMS during discovery and polling.\n\n## Enable the application(s) to be discovered\n\n1. Go to the device you have just enabled the application module for.\n1. Click on the *Applications* tab and select the applications you\n   want to monitor.\n1. This will also be automatically saved, and you should get a green\n   confirmation pop-up message.\n\n![Enable-applications](/img/Enable_applications.png)\n\n## Agent\n\nThe unix-agent does not have a discovery module, only a poller\nmodule. That poller module is always disabled by default. It needs to\nbe manually enabled if using the agent. Some applications will be\nautomatically enabled by the unix-agent poller module. It is better to\nensure that your application is enabled for monitoring. You can check\nby following the steps under the `SNMP Extend` heading.\n\n## Apache\n\nEither use SNMP extend or use the agent.\n\nNote that you need to install and configure the Apache\n[mod_status](https://httpd.apache.org/docs/2.4/en/mod/mod_status.html)\nmodule before trying the script.\n\n### SNMP Extend\n\n1. Download the script onto the desired host (the host must be added\nto LibreNMS devices)\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/apache-stats.py -O /etc/snmp/apache-stats.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/apache-stats.py\n```\n\n3. Create the cache directory, '/var/cache/librenms/' and make sure\nthat it is owned by the user running the SNMP daemon.\n```\nmkdir -p /var/cache/librenms/\n```\n\n4. Verify it is working by running /etc/snmp/apache-stats.py Package `urllib3` for python3 needs to be\ninstalled. In Debian-based systems for example you can achieve this by issuing:\n```\napt-get install python3-urllib3\n```\n\n5. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend apache /etc/snmp/apache-stats.py\n```\n\n6. Restart snmpd on your host\n\n7. Test by running\n```\nsnmpwalk <various options depending on your setup> localhost NET-SNMP-EXTEND-MIB::nsExtendOutput2Table\n```\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `apache` script to `/usr/lib/check_mk_agent/local/`\n\n1. Verify it is working by running /usr/lib/check_mk_agent/local/apache\n(If you get error like \"Can't locate LWP/Simple.pm\". libwww-perl needs\nto be installed: apt-get install libwww-perl)\n\n2. Create the cache directory, '/var/cache/librenms/' and make sure\nthat it is owned by the user running the SNMP daemon.\n```\nmkdir -p /var/cache/librenms/\n```\n\n3. On the device page in Librenms, edit your host and check the\n`Apache` under the Applications tab.\n\n## Asterisk\n\nA small shell script that reports various Asterisk call status.\n\n### SNMP Extend\n\n1. Download the [asterisk\nscript](https://github.com/librenms/librenms-agent/blob/master/snmp/asterisk)\nto `/etc/snmp/` on your asterisk server.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/asterisk -O /etc/snmp/asterisk\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/asterisk\n```\n\n3. Configure `ASCLI` in the script.\n\n4. Verify it is working by running `/etc/snmp/asterisk`\n\n5. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend asterisk /etc/snmp/asterisk\n```\n\n6. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## backupninja\n\nA small shell script that reports status of last backupninja backup.\n\n### SNMP Extend\n\n1. Download the [backupninja\nscript](https://github.com/librenms/librenms-agent/blob/master/snmp/backupninja.py)\nto `/etc/snmp/backupninja.py` on your backuped server.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/backupninja.py -O /etc/snmp/backupninja.py`\n```\n2. Make the script executable:\n```\nchmod +x /etc/snmp/backupninja.py\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend backupninja /etc/snmp/backupninja.py\n```\n\n4. Restart snmpd on your host\n\n\n## BIND9 aka named\n\n1. Create stats file with appropriate permissions:\n```bash\n~$ touch /var/cache/bind/stats\n~$ chown bind:bind /var/cache/bind/stats\n```\nChange `user:group` to the user and group that's running bind/named.\n\n2. Bind/named configuration:\n```text\noptions {\n    ...\n    statistics-file \"/var/cache/bind/stats\";\n    zone-statistics yes;\n    ...\n};\n```\n\n3. Restart your bind9/named after changing the configuration.\n\n4. Verify that everything works by executing `rndc stats && cat\n/var/cache/bind/stats`. In case you get a `Permission Denied` error,\nmake sure you changed the ownership correctly.\n\n5. Also be aware that this file is appended to each time `rndc stats`\nis called. Given this it is suggested you setup file rotation for\nit. Alternatively you can also set zero_stats to 1 in the config.\n\n6. The script for this also requires the Perl module `File::ReadBackwards`.\n```\nFreeBSD       => p5-File-ReadBackwards\nCentOS/RedHat => perl-File-ReadBackwards\nDebian/Ubuntu => libfile-readbackwards-perl\n```\n\nIf it is not available, it can be installed by `cpan -i File::ReadBackwards`.\n\n7. You may possibly need to configure the agent/extend script as well.\n\nThe config file's path defaults to the same path as the script, but\nwith .config appended. So if the script is located at\n`/etc/snmp/bind`, the config file will be\n`/etc/snmp/bind.config`. Alternatively you can also specify a config\nvia `-c $file`.\n\nAnything starting with a # is comment. The format for variables are\n$variable=$value. Empty lines are ignored. Spaces and tabs at either\nthe start or end of a line are ignored.\n\nContent of an example /etc/snmp/bind.config . Please edit with your\nown settings.\n\n```\nrndc = The path to rndc. Default: /usr/bin/env rndc\ncall_rndc = A 0/1 boolean on whether or not to call rndc stats.\n    Suggest to set to 0 if using netdata. Default: 1\nstats_file = The path to the named stats file. Default: /var/cache/bind/stats\nagent = A 0/1 boolean for if this is being used as a LibreNMS\n    agent or not. Default: 0\nzero_stats = A 0/1 boolean for if the stats file should be zeroed\n    first. Default: 0 (1 if guessed)\n```\n\nIf you want to guess at the configuration, call the script with `-g`\nand it will print out what it thinks it should be.\n\n### SNMP Extend\n\n1. Copy the bind shell script, to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/bind -O /etc/snmp/bind\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/bind\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend bind /etc/snmp/bind\n```\n\n4. Restart snmpd on the host in question.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Agent\n\n1. [Install the agent](Agent-Setup.md) on this device if it isn't\nalready and copy the script to `/usr/lib/check_mk_agent/local/bind`\nvia `wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/bind -O /usr/lib/check_mk_agent/local/bind`\n\n2. Make the script executable\n```\nchmod +x /usr/lib/check_mk_agent/local/bind\n```\n\n3. Set the variable 'agent' to '1' in the config.\n\n## Certificate\n\nA small python3 script that checks age and remaining validity of certificates\n\nThis script needs following packages on Debian/Ubuntu Systems:\n\n* python3\n* python3-openssl\n\nContent of an example /etc/snmp/certificate.json . Please edit with your own settings.\n```\n{\"domains\": [\n    {\"fqdn\": \"www.mydomain.com\"},\n    {\"fqdn\": \"some.otherdomain.org\",\n     \"port\": 8443},\n    {\"fqdn\": \"personal.domain.net\"}\n]\n}\n```\nKey 'domains' contains a list of domains to check.\nOptional you can define a port. By default it checks on port 443.\n\n### SNMP Extend\n1. Copy the shell script to the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/certificate.py -O /etc/snmp/certificate.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/certificate.py\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend certificate /etc/snmp/certificate.py\n```\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under `SNMP Extend` heading top of page.\n\n## C.H.I.P\n\nC.H.I.P. is a $9 R8 based tiny computer ideal for small projects.\nFurther details: <https://getchip.com/pages/chip>\n\n1. Copy the shell script to the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/chip.sh -O /etc/snmp/power-stat.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/power-stat.sh\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend power-stat /etc/snmp/power-stat.sh\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Docker Stats\n\nIt allows you to know which container docker run and their stats.\n\nThis script require: jq\n\n### SNMP Extend\n\n1. Install jq\n```\nsudo apt install jq\n```\n\n2. Copy the shell script to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/docker-stats.sh -O /etc/snmp/docker-stats.sh\n```\n\n3. Make the script executable\n```\nchmod +x /etc/snmp/docker-stats.sh\n```\n\n4. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend docker /etc/snmp/docker-stats.sh\n```\n\n5. If your run Debian, you need to add the Debian-snmp user to the docker group\n```\nusermod -a -G docker Debian-snmp\n```\n\n6. Restart snmpd on your host\n```\nsystemctl restart snmpd\n```\n\n## Entropy\n\nA small shell script that checks your system's available random entropy.\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/entropy.sh -O /etc/snmp/entropy.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/entropy.sh\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend entropy /etc/snmp/entropy.sh\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## EXIM Stats\n\nSNMP extend script to get your exim stats data into your host.\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/exim-stats.sh -O /etc/snmp/exim-stats.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/exim-stats.sh\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend exim-stats /etc/snmp/exim-stats.sh\n```\n\n4. If you are using sudo edit your sudo users (usually `visudo`) and\nadd at the bottom:\n```\nsnmp ALL=(ALL) NOPASSWD: /etc/snmp/exim-stats.sh, /usr/bin/exim*\n```\n\n5. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Fail2ban\n\n### SNMP Extend\n\n1. Copy the shell script, fail2ban, to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/fail2ban -O /etc/snmp/fail2ban\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/fail2ban\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend fail2ban /etc/snmp/fail2ban\n```\n\n    1. If you want to use the cache, it is as below, by using the -c switch.\n    ```\n    extend fail2ban /etc/snmp/fail2ban -c\n    ```\n\n    2. If you want to use the cache and update it if needed, this can by using the -c and -U switches.\n    ```\n    extend fail2ban /etc/snmp/fail2ban -c -U\n    ```\n\n    3. If you need to specify a custom location for the fail2ban-client, that can be done via the -f switch.\n    ```\n    extend fail2ban /etc/snmp/fail2ban -f /foo/bin/fail2ban-client\n    ```\n    If not specified, \"/usr/bin/env fail2ban-client\" is used.\n\n1. Restart snmpd on your host\n\n2. If you wish to use caching, add the following to /etc/crontab and\nrestart cron.\n```\n*/3    *    *    *    *    root    /etc/snmp/fail2ban -u\n```\n\n6. Restart or reload cron on your system.\n\nIf you have more than a few jails configured, you may need to use\ncaching as each jail needs to be polled and fail2ban-client can't do\nso in a timely manner for than a few. This can result in failure of\nother SNMP information being polled.\n\nFor additional details of the switches, please see the POD in the\nscript it self at the top.\n\n## FreeBSD NFS Client\n\n### SNMP Extend\n\n1. Copy the shell script, fbsdnfsserver, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/fbsdnfsclient -O /etc/snmp/fbsdnfsclient\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/fbsdnfsclient\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend fbsdnfsclient /etc/snmp/fbsdnfsclient\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## FreeBSD NFS Server\n\n### SNMP Extend\n\n1. Copy the shell script, fbsdnfsserver, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/fbsdnfsserver -O /etc/snmp/fbsdnfsserver\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/fbsdnfsserver\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend fbsdnfsserver /etc/snmp/fbsdnfsserver\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## FreeRADIUS\n\nThe FreeRADIUS application extension requires that status_server be\nenabled in your FreeRADIUS config.  For more information see:\n<https://wiki.freeradius.org/config/Status>\n\nYou should note that status requests increment the FreeRADIUS request\nstats.  So LibreNMS polls will ultimately be reflected in your\nstats/charts.\n\n1. Go to your FreeRADIUS configuration directory (usually /etc/raddb\nor /etc/freeradius).\n\n2. `cd sites-enabled`\n\n3. `ln -s ../sites-available/status status`\n\n4. Restart FreeRADIUS.\n\n5. You should be able to test with the radclient as follows...\n```\necho \"Message-Authenticator = 0x00, FreeRADIUS-Statistics-Type = 31, Response-Packet-Type = Access-Accept\" | \\\nradclient -x localhost:18121 status adminsecret\n```\n\nNote that adminsecret is the default secret key in status_server.\nChange if you've modified this.\n\n### SNMP Extend\n\n1. Copy the freeradius shell script, to the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/freeradius.sh -O /etc/snmp/freeradius.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/freeradius.sh\n```\n\n3. If you've made any changes to the FreeRADIUS status_server config\n(secret key, port, etc.) edit freeradius.sh and adjust the config\nvariable accordingly.\n\n4. Edit your snmpd.conf file and add:\n```\nextend freeradius /etc/snmp/freeradius.sh\n```\n\n5. Restart snmpd on the host in question.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Agent\n\n1. Install the script to your agent\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/freeradius.sh -O /usr/lib/check_mk_agent/local/freeradius.sh`\n```\n\n2. Make the script executable\n```\nchmod +x /usr/lib/check_mk_agent/local/freeradius.sh\n```\n\n3. If you've made any changes to the FreeRADIUS status_server config\n(secret key, port, etc.) edit freeradius.sh and adjust the config\nvariable accordingly.\n\n4. Edit the freeradius.sh script and set the variable 'AGENT' to '1'\nin the config.\n\n## Freeswitch\n\nA small shell script that reports various Freeswitch call status.\n\n### Agent\n\n1. [Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `freeswitch` script to `/usr/lib/check_mk_agent/local/`\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/freeswitch -O /usr/lib/check_mk_agent/local/freeswitch`\n```\n\n2. Make the script executable\n```\nchmod +x /usr/lib/check_mk_agent/local/freeswitch\n```\n\n3. Configure `FSCLI` in the script. You may also have to create an\n`/etc/fs_cli.conf` file if your `fs_cli` command requires\nauthentication.\n\n4. Verify it is working by running `/usr/lib/check_mk_agent/local/freeswitch`\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/agent-local/freeswitch -O /etc/snmp/freeswitch\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/freeswitch\n```\n\n3. Configure `FSCLI` in the script. You may also have to create an\n`/etc/fs_cli.conf` file if your `fs_cli` command requires\nauthentication.\n\n4. Verify it is working by running `/etc/snmp/freeswitch`\n\n5. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend freeswitch /etc/snmp/freeswitch\n```\n\n6. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## GPSD\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/gpsd -O /etc/snmp/gpsd\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/gpsd\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend gpsd /etc/snmp/gpsd\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading at the top of the page.\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `gpsd` script to `/usr/lib/check_mk_agent/local/`\n\nYou may need to configure `$server` or `$port`.\n\nVerify it is working by running `/usr/lib/check_mk_agent/local/gpsd`\n\n## Icecast\n\nShell script that reports load average/memory/open-files stats of Icecast\n### SNMP Extend\n\n1. Copy the shell script, icecast-stats.sh, to the desired host (the host must be added to LibreNMS devices)\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/icecast-stats.sh -O /etc/snmp/icecast-stats.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/icecast-stats.sh\n```\n\n3. Verify it is working by running `/etc/snmp/icecast-stats.sh`\n\n4. Edit your snmpd.conf file (usually `/etc/snmp/icecast-stats.sh`) and add:\n```\nextend icecast /etc/snmp/icecast-stats.sh\n```\n\n## ISC DHCP Stats\n\nA small python3 script that reports current DHCP leases stats and pool usage of ISC DHCP Server.\n\nAlso you have to install the dhcpd-pools Package.\nUnder Ubuntu/Debian just run `apt install dhcpd-pools`\n\n### SNMP Extend\n\n1. Copy the shell script to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/dhcp.py -O /etc/snmp/dhcp.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/dhcp.py\n```\n\n3. Edit your config file, Content of an example /etc/snmp/dhcp.json\n```\n{\"leasefile\": \"/var/lib/dhcp/dhcpd.leases\" }\n```\nKey 'leasefile' specifies the path to your lease file.\n\n4. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend dhcpstats /etc/snmp/dhcp.py\n```\n\n5. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## mailcow-dockerized postfix\n\n### SNMP Extend\n\n1. Download the script into the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/mailcow-dockerized-postfix -O /etc/snmp/mailcow-dockerized-postfix\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/mailcow-dockerized-postfix\n```\n> Maybe you will need to install `pflogsumm` on debian based OS. Please check if you have package installed.\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend mailcow-postfix /etc/snmp/mailcow-dockerized-postfix\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Mailscanner\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/mailscanner.php -O /etc/snmp/mailscanner.php\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/mailscanner.php\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend mailscanner /etc/snmp/mailscanner.php\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Mdadm\n\nIt allows you to checks mdadm health and array data\n\nThis script require: jq\n\n### SNMP Extend\n\n1. Install jq\n```\nsudo apt install jq\n```\n\n2. Download the script onto the desired host.\n```\nsudo wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/mdadm -O /etc/snmp/mdadm\n```\n\n3. Make the script executable\n```\nsudo chmod +x /etc/snmp/mdadm\n```\n\n4. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend mdadm /etc/snmp/mdadm\n```\n\n5. Verify it is working by running\n```\nsudo /etc/snmp/mdadm\n```\n\n6. Restart snmpd on your host\n```\nsudo service snmpd restart\n```\n\nThe application should be auto-discovered as described at the\ntop of the page. If it is not, please follow the steps set out\nunder `SNMP Extend` heading top of page.\n\n\n## MegaRAID\n\nThis software from Broadcom/LSI let you monitor MegaRAID controller.\n\n1. Download the [external software](https://docs.broadcom.com/docs/1211132411799) and follow the included install instructions.\n\n2. Add the following line to your snmpd.conf file (usually /etc/snmp/snmpd.conf)\n```\npass .1.3.6.1.4.1.3582 /usr/sbin/lsi_mrdsnmpmain\n```\n\n3. Restart snmpd on your host\n\n\n## Memcached\n\n### SNMP Extend\n\n1. Copy the [memcached\n   script](https://github.com/librenms/librenms-agent/blob/master/agent-local/memcached)\n   to `/etc/snmp/` on your remote server.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/memcached -O /etc/snmp/memcached\n```\n\n2. Make the script executable:\n```\nchmod +x /etc/snmp/memcached\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend memcached /etc/snmp/memcached\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Munin\n\n### Agent\n\n1. Install the script to your agent:\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/munin -O /usr/lib/check_mk_agent/local/munin\n```\n\n2. Make the script executable\n```\nchmod +x /usr/lib/check_mk_agent/local/munin\n```\n\n3. Create the munin scripts dir:\n```\nmkdir -p /usr/share/munin/munin-scripts\n```\n\n4. Install your munin scripts into the above directory.\n\nTo create your own custom munin scripts, please see this example:\n\n```bash\n#!/bin/bash\nif [ \"$1\" = \"config\" ]; then\n    echo 'graph_title Some title'\n    echo 'graph_args --base 1000 -l 0' #not required\n    echo 'graph_vlabel Some label'\n    echo 'graph_scale no' #not required, can be yes/no\n    echo 'graph_category system' #Choose something meaningful, can be anything\n    echo 'graph_info This graph shows something awesome.' #Short desc\n    echo 'foobar.label Label for your unit' # Repeat these two lines as much as you like\n    echo 'foobar.info Desc for your unit.'\n    exit 0\nfi\necho -n \"foobar.value \" $(date +%s) #Populate a value, here unix-timestamp\n```\n\n## MySQL\n\nCreate the cache directory, '/var/cache/librenms/' and make sure\nthat it is owned by the user running the SNMP daemon.\n```\nmkdir -p /var/cache/librenms/\n```\n\nThe MySQL script requires PHP-CLI and the PHP MySQL extension, so\nplease verify those are installed.\n\nCentOS (May vary based on PHP version)\n```\nyum install php-cli php-mysql\n```\n\nDebian (May vary based on PHP version)\n```\napt-get install php-cli php-mysql\n```\n\nUnlike most other scripts, the MySQL script requires a configuration\nfile `mysql.cnf` in the same directory as the extend or agent script\nwith following content:\n\n```php\n<?php\n$mysql_user = 'root';\n$mysql_pass = 'toor';\n$mysql_host = 'localhost';\n$mysql_port = 3306;\n```\n\nNote that depending on your MySQL installation (chrooted install for example),\nyou may have to specify 127.0.0.1 instead of localhost. Localhost make\na MySQL connection via the mysql socket, while 127.0.0.1 make a standard\nIP connection to mysql.\n\nNote also if you get a mysql error `Uncaught TypeError: mysqli_num_rows(): Argument #1`,\nthis is because you are using a newer mysql version which doesnt support `UNBLOCKING` for slave statuses,\nso you need to also include the line `$chk_options['slave'] = false;` into `mysql.cnf` to skip checking slave statuses\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\n\nand copy the `mysql` script to `/usr/lib/check_mk_agent/local/`\n\nVerify it is working by running `/usr/lib/check_mk_agent/local/mysql`\n\n### SNMP extend\n\n1. Copy the mysql script to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/mysql -O /etc/snmp/mysql\n```\n\n2. Make the file executable\n```\nchmod +x /etc/snmp/mysql\n```\n\n3. Edit /etc/snmp/mysql to set your MySQL connection constants or declare them in /etc/snmp/mysql.cnf (new file)\n\n4. Edit your snmpd.conf file and add:\n```\nextend mysql /etc/snmp/mysql\n```\n\n5. Restart snmpd.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## NGINX\n\nNGINX is a free, open-source, high-performance HTTP server: <https://www.nginx.org/>\n\nIt's required to have the following directive in your nginx\nconfiguration responsible for the localhost server:\n```text\nlocation /nginx-status {\n    stub_status on;\n    access_log  off;\n    allow 127.0.0.1;\n    allow ::1;\n    deny  all;\n}\n```\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/nginx -O /etc/snmp/nginx\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/nginx\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend nginx /etc/snmp/nginx\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `nginx` script to `/usr/lib/check_mk_agent/local/`\n\n## NFS Server\n\nExport the NFS stats from as server.\n\n### SNMP Extend\n\n1. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add :\n```\nextend nfs-server /bin/cat /proc/net/rpc/nfsd\n```\n>find out where cat is located using : `which cat`\n\n2. reload snmpd service to activate the configuration\n\n## NTP Client\n\nA shell script that gets stats from ntp client.\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/ntp-client -O /etc/snmp/ntp-client\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/ntp-client\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend ntp-client /etc/snmp/ntp-client\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## NTP Server aka NTPD\n\nA shell script that gets stats from ntp server (ntpd).\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/ntp-server.sh -O /etc/snmp/ntp-server.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/ntp-server.sh\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend ntp-server /etc/snmp/ntp-server.sh\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Chronyd\n\nA shell script that gets the stats from chronyd and exports them with SNMP Extend.\n\n### SNMP Extend\n\n1. Download the shell script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/chrony -O /etc/snmp/chrony\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/chrony\n```\n\n3. Edit the snmpd.conf file to include the extend by adding the following line to the end of the config file:\n```\nextend chronyd /etc/snmp/chrony\n```\n\nNote: Some distributions need sudo-permissions for the script to work with SNMP Extend. See the instructions on the section SUDO for more information.\n\n4. Restart snmpd service on the host\n\nApplication should be auto-discovered and its stats presented on the Apps-page on the host. Note: Applications module needs to be enabled on the host or globally for the statistics to work as intended.\n\n## Nvidia GPU\n\n### SNMP Extend\n\n1. Copy the shell script, nvidia, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/nvidia -O /etc/snmp/nvidia\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/nvidia\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend nvidia /etc/snmp/nvidia\n```\n\n4. Restart snmpd on your host.\n\n5. Verify you have nvidia-smi installed, which it generally should be\nif you have the driver from Nvida installed.\n\nThe GPU numbering on the graphs will correspond to how the nvidia-smi\nsees them as being.\n\nFor questions about what the various values are/mean, please see the\nnvidia-smi man file under the section covering dmon.\n\n## Opensearch\\Elasticsearch\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/opensearch -O /etc/snmp/opensearch\n```\n\n2. Make it executable\n```\nchmod +x /etc/snmp/opensearch\n```\n\n3. Install the required Perl dependencies.\n```\n# FreeBSD\npkg install p5-JSON p5-libwww\n# Debian/Ubuntu\napt-get install libjson-perl libwww-perl\n# cpanm\ncpanm JSON Libwww\n```\n\n4. Update your snmpd.conf.\n```\nextend opensearch /bin/cat /var/cache/opensearch.json\n```\n\n5. Update root crontab with. This is required as it will this will\nlikely time out otherwise. Use `*/1` if you want to have the most\nrecent stats when polled or to `*/5` if you just want at exactly a 5\nminute interval.\n```\n*/5 * * * * /etc/snmp/opensearch > /var/cache/opensearch.json\n```\n\n6. Enable it or wait for the device to be re-disocvered.\n\n## Open Grid Scheduler\n\nShell script to track the OGS/GE jobs running on clusters.\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/rocks.sh -O /etc/snmp/rocks.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/rocks.sh\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend ogs /etc/snmp/rocks.sh\n```\n\n4. Restart snmpd.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Opensips\n\nScript that reports load-average/memory/open-files stats of Opensips\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/opensips-stats.sh -O /etc/snmp/opensips-stats.sh\n```\n\n2. Make the script executable:\n```\nchmod +x /etc/snmp/opensips-stats.sh\n```\n\n3. Verify it is working by running `/etc/snmp/opensips-stats.sh`\n\n4. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend opensips /etc/snmp/opensips-stats.sh\n```\n\n## OS Updates\n\nA small shell script that checks your system package manager for any\navailable updates. Supports apt-get/pacman/yum/zypper package\nmanagers.\n\nFor pacman users automatically refreshing the database, it is\nrecommended you use an alternative database location\n`--dbpath=/var/lib/pacman/checkupdate`\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/osupdate -O /etc/snmp/osupdate\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/osupdate\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend osupdate /etc/snmp/osupdate\n```\n\n4. Restart snmpd on your host\n\n_Note_: apt-get depends on an updated package index. There are several\nways to have your system run `apt-get update` automatically. The\neasiest is to create `/etc/apt/apt.conf.d/10periodic` and pasting the\nfollowing in it: `APT::Periodic::Update-Package-Lists \"1\";`. If you\nhave apticron, cron-apt or apt-listchanges installed and configured,\nchances are that packages are already updated periodically .\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## PHP-FPM\n\n### SNMP Extend\n\n1. Copy the shell script, phpfpmsp, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/phpfpmsp -O /etc/snmp/phpfpmsp\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/phpfpmsp\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend phpfpmsp /etc/snmp/phpfpmsp\n```\n\n4. Edit /etc/snmp/phpfpmsp to include the status URL for the PHP-FPM\n   pool you are monitoring.\n\n5. Restart snmpd on your host\n\nIt is worth noting that this only monitors a single pool. If you want\nto monitor multiple pools, this won't do it.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Agent\n[Install the agent](Agent-Setup.md) on this device if it isn't already \nand copy the `phpfpmsp` script to `/usr/lib/check_mk_agent/local/`\n\n## Pi-hole\n\n### SNMP Extend\n\n1. Copy the shell script, pi-hole, to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/pi-hole -O /etc/snmp/pi-hole\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/pi-hole\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend pi-hole /etc/snmp/pi-hole\n```\n\n4. To get all data you must get your API auth token from Pi-hole\nserver and change the API_AUTH_KEY entry inside the snmp script.\n\n5. Restard snmpd.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Portactivity\n\n### SNMP Extend\n\n1. Install missing packages - Ubuntu is shown below.\n```\napt install libparse-netstat-perl\napt install libjson-perl\n```\n\n2. Copy the Perl script to the desired host (the host must be added to LibreNMS devices)\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/portactivity -O /etc/snmp/portactivity\n```\n\n3. Make the script executable\n```\nchmod +x /etc/snmp/portactivity\n```\n\n4. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend portactivity /etc/snmp/portactivity -p http,ldap,imap\n```\n>Will monitor HTTP, LDAP, and IMAP. The -p switch specifies what ports to use. This is a comma seperated list.\n>\n>These must be found in '/etc/services' or where ever NSS is set to fetch it from. If not, it will throw an error.\n>\n>If you want to JSON returned by it to be printed in a pretty format use the -P flag.\n\n5. Restart snmpd on your host.\n\nPlease note that for only TCP[46] services are supported.\n\n## Postfix\n\n### SNMP Extend\n\n1. Copy the shell script, postfix-queues, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/postfix-queues -O /etc/snmp/postfix-queues\n```\n\n2. Copy the Perl script, postfixdetailed, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/postfixdetailed -O /etc/snmp/postfixdetailed\n```\n\n3. Make both scripts executable\n```\nchmod +x /etc/snmp/postfixdetailed /etc/snmp/postfix-queues\n```\n\n4. Edit your snmpd.conf file and add:\n```\nextend mailq /etc/snmp/postfix-queues\nextend postfixdetailed /etc/snmp/postfixdetailed\n```\n\n5. Restart snmpd.\n\n6. Install pflogsumm for your OS.\n\n7. Make sure the cache file in /etc/snmp/postfixdetailed is some place\nthat snmpd can write too. This file is used for tracking changes\nbetween various values between each time it is called by snmpd. Also\nmake sure the path for pflogsumm is correct.\n\n8. Run /etc/snmp/postfixdetailed to create the initial cache file so\nyou don't end up with some crazy initial starting value. Please note\nthat each time /etc/snmp/postfixdetailed is ran, the cache file is\nupdated, so if this happens in between LibreNMS doing it then the\nvalues will be thrown off for that polling period.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n> NOTE: If using RHEL for your postfix server, qshape must be\n> installed manually as it is not officially supported. CentOs 6 rpms\n> seem to work without issues.\n\n## Postgres\n\n### SNMP Extend\n\n1. Copy the shell script, postgres, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/postgres -O /etc/snmp/postgres\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/postgres\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend postgres /etc/snmp/postgres\n```\n\n4. Restart snmpd on your host\n\n5. Install the Nagios check check_postgres.pl on your system:\n<https://github.com/bucardo/check_postgres>\n\n6. Verify the path to check_postgres.pl in /etc/snmp/postgres is\ncorrect.\n\n7. If you wish it to ignore the database postgres for totalling up the\nstats, set ignorePG to 1(the default) in /etc/snmp/postgres. If you\nare using netdata or the like, you may wish to set this or otherwise\nthat total will be very skewed on systems with light or moderate usage.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## PowerDNS\n\nAn authoritative DNS server: <https://www.powerdns.com/auth.html>\n\n### SNMP Extend\n\n1. Copy the shell script, powerdns.py, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/powerdns.py -O /etc/snmp/powerdns.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/powerdns.py\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend powerdns /etc/snmp/powerdns.py\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `powerdns` script to `/usr/lib/check_mk_agent/local/`\n\n## PowerDNS Recursor\n\nA recursive DNS server: <https://www.powerdns.com/recursor.html>\n\n### Direct\n\nThe LibreNMS polling host must be able to connect to port 8082 on the\nmonitored device. The web-server must be enabled, see the Recursor\ndocs: <https://doc.powerdns.com/md/recursor/settings/#webserver>\n\n### Variables\n\n`$config['apps']['powerdns-recursor']['api-key']` required, this is\ndefined in the Recursor config\n\n`$config['apps']['powerdns-recursor']['port']` numeric, defines the\nport to connect to PowerDNS Recursor on.  The default is 8082\n\n`$config['apps']['powerdns-recursor']['https']` true or false,\ndefaults to use http.\n\n### SNMP Extend\n\n1. Copy the shell script, powerdns-recursor, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/powerdns-recursor -O /etc/snmp/powerdns-recursor\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/powerdns-recursor\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend powerdns-recursor /etc/snmp/powerdns-recursor\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `powerdns-recursor` script to\n`/usr/lib/check_mk_agent/local/`\n\nThis script uses `rec_control get-all` to collect stats.\n\n## PowerDNS-dnsdist\n\n### SNMP Extend\n\n1. Copy the BASH script to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/powerdns-dnsdist -O /etc/snmp/powerdns-dnsdist\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/powerdns-dnsdist\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend powerdns-dnsdist /etc/snmp/powerdns-dnsdist\n```\n\n4. Restart snmpd on your host.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## PowerMon\n\nPowerMon tracks the power usage on your host and can report on both consumption\nand cost, using a python script installed on the host.\n\n[PowerMon consumption graph](../img/example-app-powermon-consumption-02.png)\n\nCurrently the script uses one of two methods to determine current power usage:\n\n* ACPI via libsensors\n\n* HP-Health (HP Proliant servers only)\n\nThe ACPI method is quite unreliable as it is usually only implemented by\nbattery-powered devices, e.g. laptops. YMMV. However, it's possible to support\nany method as long as it can return a power value, usually in Watts.\n\n> TIP: You can achieve this by adding a method and a function for that method to\n> the script. It should be called by getData() and return a dictionary.\n\nBecause the methods are unreliable for all hardware, you need to declare to the\nscript which method to use. The are several options to assist with testing, see\n`--help`.\n\n### SNMP Extend\n\n#### Initial setup\n\n1. Download the python script onto the host:\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/powermon-snmp.py -O /usr/local/bin/powermon-snmp.py\n```\n\n2. Make the script executable:\n```\nchmod +x /usr/local/bin/powermon-snmp.py\n```\n\n3. Edit the script and set the cost per kWh for your supply. You must uncomment\nthis line for the script to work:\n```\nvi /usr/local/bin/powermon-snmp.py\n#costPerkWh = 0.15\n```\n\n4. Choose you method below:\n\n    === \"Method 1. sensors\"\n\n        * Install dependencies:\n        ```\n        dnf install lm_sensors\n        pip install PySensors\n        ```\n\n        * Test the script from the command-line. For example:\n        ```\n        $ /usr/local/bin/powermon-snmp.py -m sensors -n -p\n        {\n          \"meter\": {\n            \"0\": {\n              \"reading\": 0.0\n            }\n          },\n          \"psu\": {},\n          \"supply\": {\n            \"rate\": 0.15\n          },\n          \"reading\": \"0.0\"\n        }\n        ```\n\n        If you see a reading of `0.0` it is likely this method is not supported for\n        your system. If not, continue.\n\n    === \"Method 2. hpasmcli\"\n\n        * Obtain the hp-health package for your system. Generally there are\n        three options:\n            * Standalone package from [HPE Support](https://support.hpe.com/hpsc/swd/public/detail?swItemId=MTX-c0104db95f574ae6be873e2064#tab2)\n            * From the HP Management Component Pack (MCP).\n            * Included in the [HP Service Pack for Proliant (SPP)](https://support.hpe.com/hpesc/public/docDisplay?docId=emr_na-a00026884en_us)\n\n        * If you've downloaded the standalone package, install it. For example:\n        ```\n        rpm -ivh hp-health-10.91-1878.11.rhel8.x86_64.rpm\n        ```\n\n        * Check the service is running:\n        ```\n        systemctl status hp-health\n        ```\n\n        * Test the script from the command-line. For example:\n        ```\n        $ /usr/local/bin/powermon-snmp.py -m hpasmcli -n -p\n        {\n          \"meter\": {\n            \"1\": {\n              \"reading\": 338.0\n            }\n          },\n          \"psu\": {\n            \"1\": {\n              \"present\": \"Yes\",\n              \"redundant\": \"No\",\n              \"condition\": \"Ok\",\n              \"hotplug\": \"Supported\",\n              \"reading\": 315.0\n            },\n            \"2\": {\n              \"present\": \"Yes\",\n              \"redundant\": \"No\",\n              \"condition\": \"FAILED\",\n              \"hotplug\": \"Supported\"\n            }\n          },\n          \"supply\": {\n            \"rate\": 0.224931\n          },\n          \"reading\": 338.0\n        }\n        ```\n\n        If you see a reading of `0.0` it is likely this method is not supported for\n        your system. If not, continue.\n\n    #### Finishing Up\n\n5. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add the following:\n```\nextend  powermon   /usr/local/bin/powermon-snmp.py -m hpasmcli\n```\n\n    > NOTE: Avoid using other script options in the snmpd config as the results may not be\n    > interpreted correctly by LibreNMS.\n\n6. Reload your snmpd service:\n```\nsystemctl reload snmpd\n```\n\n7. You're now ready to enable the application in LibreNMS.\n\n\n## Pwrstatd\n\nPwrstatd (commonly known as powerpanel) is an application/service available from CyberPower to monitor their PSUs over USB.  It is currently capable of reading the status of only one PSU connected via USB at a time.  The powerpanel software is available here:\nhttps://www.cyberpowersystems.com/products/software/power-panel-personal/\n\n### SNMP Extend\n\n1. Copy the python script, pwrstatd.py, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/pwrstatd.py -O /etc/snmp/pwrstatd.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/pwrstatd.py\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend pwrstatd /etc/snmp/pwrstatd.py\n```\n\n4. (Optional) Create a /etc/snmp/pwrstatd.json file and specify the path to the pwrstat executable [the default path is /sbin/pwrstat]:\n```\n{\n    \"pwrstat_cmd\": \"/sbin/pwrstat\"\n}\n```\n\n5. Restart snmpd.\n\n\n## Proxmox\n\n1. For Proxmox 4.4+ install the libpve-apiclient-perl package\n```\napt install libpve-apiclient-perl\n```\n\n2. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/proxmox -O /usr/local/bin/proxmox\n```\n\n3. Make the script executable\n```\nchmod +x /usr/local/bin/proxmox\n```\n\n4. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend proxmox /usr/local/bin/proxmox\n```\n\n5. Note: if your snmpd doesn't run as root, you might have to invoke\n   the script using sudo and modify the \"extend\" line\n\n```\nextend proxmox /usr/bin/sudo /usr/local/bin/proxmox\n```\n\nafter, edit your sudo users (usually `visudo`) and add at the bottom:\n\n```\nDebian-snmp ALL=(ALL) NOPASSWD: /usr/local/bin/proxmox\n```\n\n6. Restart snmpd on your host\n\n## Puppet Agent\n\nSNMP extend script to get your Puppet Agent data into your host.\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/puppet_agent.py -O /etc/snmp/puppet_agent.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/puppet_agent.py\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend puppet-agent /etc/snmp/puppet_agent.py\n```\n\nThe Script needs `python3-yaml` package to be installed.\n\nPer default script searches for on of this files:\n\n* /var/cache/puppet/state/last_run_summary.yaml\n* /opt/puppetlabs/puppet/cache/state/last_run_summary.yaml\n\noptionally you can add a specific summary file with creating `/etc/snmp/puppet.json`\n```\n{\n     \"agent\": {\n        \"summary_file\": \"/my/custom/path/to/summary_file\"\n     }\n}\n```\ncustom summary file has highest priority\n\n4. Restart snmpd on the host\n\n## PureFTPd\n\nSNMP extend script to monitor PureFTPd.\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/pureftpd.py -O /etc/snmp/pureftpd.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/pureftpd.py\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend pureftpd sudo /etc/snmp/pureftpd.py\n```\n\n4. Edit your sudo users (usually `visudo`) and add at the bottom:\n```\nsnmp ALL=(ALL) NOPASSWD: /etc/snmp/pureftpd.py\n```\nor the path where your pure-ftpwho is located\n\n\n5. If pure-ftpwho is not located in /usr/sbin\n\nyou will also need to create a config file, which is named\n\npureftpd.json. The file has to be located in /etc/snmp/.\n\n\n```\n{\"pureftpwho_cmd\": \"/usr/sbin/pure-ftpwho\"\n}\n```\n\n5. Restart snmpd on your host\n\n## Raspberry PI\n\nSNMP extend script to get your PI data into your host.\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/raspberry.sh -O /etc/snmp/raspberry.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/raspberry.sh\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend raspberry /usr/bin/sudo /bin/sh /etc/snmp/raspberry.sh\n```\n\n4. Edit your sudo users (usually `visudo`) and add at the bottom:\n```\nsnmp ALL=(ALL) NOPASSWD: /bin/sh /etc/snmp/raspberry.sh\n```\n\n**Note:** If you are using Raspian, the default user is\n`Debian-snmp`. Change `snmp` above to `Debian-snmp`. You can verify\nthe user snmpd is using with `ps aux | grep snmpd`\n\n5. Restart snmpd on PI host\n\n## Raspberry Pi GPIO Monitor\n\nSNMP extend script to monitor your IO pins or sensor modules connected to your GPIO header.\n\n### SNMP Extend\n\n1: Make sure you have wiringpi installed on your Raspberry Pi. In Debian-based systems for example you can achieve this by issuing:\n\n```\napt-get install wiringpi\n```\n\n2: Download the script to your Raspberry Pi. `wget\n   https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/rpigpiomonitor.php\n   -O /etc/snmp/rpigpiomonitor.php`\n\n3: (optional) Download the example configuration to your Raspberry Pi. `wget\n   https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/rpigpiomonitor.ini\n   -O /etc/snmp/rpigpiomonitor.ini`\n\n4: Make the script executable: `chmod +x /etc/snmp/rpigpiomonitor.php`\n\n5: Create or edit your rpigpiomonitor.ini file according to your needs.\n\n6: Check your configuration with `rpigpiomonitor.php -validate`\n\n7: Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n\n```\nextend rpigpiomonitor /etc/snmp/rpigpiomonitor.php\n```\n\n8: Restart snmpd on your Raspberry Pi and, if your Raspberry Pi is already present in LibreNMS, perform a manual rediscover.\n\n## Redis\n\nScript to monitor your Redis Server\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/redis.py -O /etc/snmp/redis.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/redis.py\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend redis /etc/snmp/redis.py\n```\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `redis` script to `/usr/lib/check_mk_agent/local/`\n\n## RRDCached\n\nInstall/Setup:\nFor Install/Setup Local Librenms RRDCached: Please see [RRDCached](RRDCached.md)\n\nWill collect stats by:\n1. Connecting directly to the associated device on port 42217\n2. Monitor thru snmp with SNMP extend, as outlined below\n3. Connecting to the rrdcached server specified by the `rrdcached` setting\n\nSNMP extend script to monitor your (remote) RRDCached via snmp\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/rrdcached -O /etc/snmp/rrdcached\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/rrdcached\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend rrdcached /etc/snmp/rrdcached\n```\n\n## SDFS info\n\nA small shell script that exportfs SDFS volume info.\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/sdfsinfo -O /etc/snmp/sdfsinfo\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/sdfsinfo\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend sdfsinfo /etc/snmp/sdfsinfo\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Seafile\n\nSNMP extend script to monitor your Seafile Server\n\n### SNMP Extend\n\n1. Copy the Python script, seafile.py, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/seafile.py -O /etc/snmp/seafile.py\n```\n\nAlso you have to install the requests Package for Python3.\nUnder Ubuntu/Debian just run `apt install python3-requests`\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/seafile.py\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend seafile /etc/snmp/seafile.py\n```\n\n4. You will also need to create the config file, which is named\nseafile.json . The script has to be located at /etc/snmp/.\n```\n{\"url\": \"https://seafile.mydomain.org\",\n \"username\": \"some_admin_login@mail.address\",\n \"password\": \"password\",\n \"account_identifier\": \"name\"\n \"hide_monitoring_account\": true\n}\n```\n\nThe variables are as below.\n\n```\nurl = Url how to get access to Seafile Server\nusername = Login to Seafile Server.\n           It is important that used Login has admin privileges.\n           Otherwise most API calls will be denied.\npassword = Password to the configured login.\naccount_identifier = Defines how user accounts are listed in RRD Graph.\n                     Options are: name, email\nhide_monitoring_account = With this Boolean you can hide the Account which you\n                          use to access Seafile API\n```\n\n**Note:**It is recommended to use a dedicated Administrator account for monitoring.\n\n## SMART\n\n### SNMP Extend\n\n1. Copy the Perl script, smart, to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/smart -O /etc/snmp/smart\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/smart\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend smart /etc/snmp/smart\n```\n\n4. You will also need to create the config file, which defaults to the same path as the script,\nbut with .config appended. So if the script is located at /etc/snmp/smart, the config file\nwill be `/etc/snmp/smart.config`. Alternatively you can also specific a config via `-c`.\n\nAnything starting with a # is comment. The format for variables is $variable=$value. Empty\nlines are ignored. Spaces and tabes at either the start or end of a line are ignored. Any\nline with out a matched variable or # are treated as a disk.\n\n```\n#This is a comment\ncache=/var/cache/smart\nsmartctl=/usr/bin/env smartctl\nuseSN=1\nada0\nada1\nda5 /dev/da5 -d sat\ntwl0,0 /dev/twl0 -d 3ware,0\ntwl0,1 /dev/twl0 -d 3ware,1\ntwl0,2 /dev/twl0 -d 3ware,2\n```\n\nThe variables are as below.\n\n```\ncache = The path to the cache file to use. Default: /var/cache/smart\nsmartctl = The path to use for smartctl. Default: /usr/bin/env smartctl\nuseSN = If set to 1, it will use the disks SN for reporting instead of the device name.\n        1 is the default. 0 will use the device name.\n```\n\nA disk line is can be as simple as just a disk name under /dev/. Such as in the config above\nThe line \"ada0\" would resolve to \"/dev/ada0\" and would be called with no special argument. If\na line has a space in it, everything before the space is treated as the disk name and is what\nused for reporting and everything after that is used as the argument to be passed to smartctl.\n\nIf you want to guess at the configuration, call it with -g and it will print out what it thinks\nit should be.\n\n5. Restart snmpd on your host\n\nIf you have a large number of more than one or two disks on a system,\nyou should consider adding this to cron. Also make sure the cache file\nis some place it can be written to.\n\n```\n */3 * * * * /etc/snmp/smart -u\n```\n\n6. If your snmp agent runs as user \"snmp\", edit your sudo users\n   (usually `visudo`) and add at the bottom:\n```\nsnmp ALL=(ALL) NOPASSWD: /etc/snmp/smart, /usr/bin/env smartctl\n```\n\nand modify your snmpd.conf file accordingly:\n\n```\nextend smart /usr/bin/sudo /etc/snmp/smart\n```\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\nIf you set useSN to 1, it is worth noting that you will loose\nhistory(not able to access it from the web interface) for that device\neach time you change it. You will also need to run camcontrol or the\nlike on said server to figure out what device actually corresponds\nwith that serial number.\n\nAlso if the system you are using uses non-static device naming based\non bus information, it may be worthwhile just using the SN as the\ndevice ID is going to be irrelevant in that case.\n\n## Squid\n\n### SNMP Proxy\n\n1. Enable SNMP for Squid like below, if you have not already, and restart it.\n```\nacl snmppublic snmp_community public\nsnmp_port 3401\nsnmp_access allow snmppublic localhost\nsnmp_access deny all\n```\n\n2. Restart squid on your host.\n\n3. Edit your snmpd.conf file and add, making sure you have the same\ncommunity, host, and port as above:\n```\nproxy -v 2c -Cc -c public 127.0.0.1.3401 1.3.6.1.4.1.3495\n```\n\nFor more advanced information on Squid and SNMP or setting up proxying\nfor net-snmp, please see the links below.\n\n<http://wiki.squid-cache.org/Features/Snmp>\n<http://www.net-snmp.org/wiki/index.php/Snmpd_proxy>\n\n## Supervisord\n\nIt shows you the totals per status and also the uptime per process. That way you can add alerts for instance when there are process in state `FATAL`.\n\n### SNMP Extend\n\n1. Copy the python script to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/supervisord.py -O /etc/snmp/supervisord.py\n```\nNotice that this will use the default unix socket path. Modify the `unix_socket_path` variable in the script if your path differs from the default.\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/supervisord.py\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend supervisord /etc/snmp/supervisord.py\n```\n\n4. Restart snmpd on your host\n```\nsystemctl restart snmpd\n```\n\n## Sagan\n\nFor metrics the stats are migrated as below from the stats JSON.\n\n`f_drop_percent` and `drop_percent` are computed based on the found data.\n\n| Instance Key       | Stats JSON Key                     |\n|--------------------|------------------------------------|\n| uptime             | .stats.uptime                      |\n| total              | .stats.captured.total              |\n| drop               | .stats.captured.drop               |\n| ignore             | .stats.captured.ignore             |\n| threshold          | .stats.captured.theshold           |\n| after              | .stats.captured.after              |\n| match              | .stats.captured.match              |\n| bytes              | .stats.captured.bytes_total        |\n| bytes_ignored      | .stats.captured.bytes_ignored      |\n| max_bytes_log_line | .stats.captured.max_bytes_log_line |\n| eps                | .stats.captured.eps                |\n| f_total            | .stats.flow.total                  |\n| f_dropped          | .stats.flow.dropped                |\n\nThose keys are appended with the name of the instance running with `_`\nbetween the instance name and instance metric key. So `uptime` for\n`ids` would be `ids_uptime`.\n\nThe default is named 'ids' unless otherwise specified via the extend.\n\nThere is a special instance name of `.total` which is the total of all\nthe instances. So if you want the total eps, the metric would be\n`.total_eps`. Also worth noting that the alert value is the highest\none found among all the instances.\n\n### SNMP Extend\n\n1. Install the extend.\n```\ncpanm Sagan::Monitoring\n```\n\n2. Setup cron. Below is a example.\n```\n*/5 * * * * /usr/local/bin/sagan_stat_check > /dev/null\n```\n\n3. Configure snmpd.conf\n```\nextend sagan-stats /usr/bin/env PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin sagan_stat_check -c\n```\n\n4. Restart snmpd on your system.\n\nYou will want to make sure that sagan is setup to with the values set\nbelow for stats-json processor, for a single instance setup..\n\n```\nenabled: yes\ntime: 300\nsubtract_old_values: true\nfilename: \"$LOG_PATH/stats.json\"\n```\n\nAny configuration of sagan_stat_check should be done in the cron\nsetup. If the default does not work, check the docs for it at\n[MetaCPAN for\nsagan_stat_check](https://metacpan.org/dist/Sagan-Monitoring/view/bin/sagan_stat_check)\n\n\n## Suricata\n\n### SNMP Extend\n\n1. Install the extend.\n```\ncpanm Suricata::Monitoring\n```\n\n2. Setup cron. Below is a example.\n```\n*/5 * * * * /usr/local/bin/suricata_stat_check > /dev/null\n```\n\n3. Configure snmpd.conf\n```\nextend suricata-stats /usr/bin/env PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin suricata_stat_check -c\n```\n\n4. Restart snmpd on your system.\n\nYou will want to make sure Suricata is set to output the stats\nto the eve file once a minute. This will help make sure that\nit won't be to far back in the file and will make sure it is\nrecent when the cronjob runs.\n\nAny configuration of suricata_stat_check should be done in the cron\nsetup. If the default does not work, check the docs for it at\n[MetaCPAN for\nsuricata_stat_check](https://metacpan.org/dist/Suricata-Monitoring/view/bin/suricata_stat_check)\n\n## TinyDNS aka djbdns\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `tinydns` script to `/usr/lib/check_mk_agent/local/`\n\n_Note_: We assume that you use DJB's\n[Daemontools](http://cr.yp.to/daemontools.html) to start/stop\ntinydns. And that your tinydns instance is located in `/service/dns`,\nadjust this path if necessary.\n\n1. Replace your _log_'s `run` file, typically located in\n   `/service/dns/log/run` with:\n```bash\n#!/bin/sh\nexec setuidgid dnslog tinystats ./main/tinystats/ multilog t n3 s250000 ./main/\n```\n\n2. Create tinystats directory and chown:\n```bash\nmkdir /service/dns/log/main/tinystats\nchown dnslog:nofiles /service/dns/log/main/tinystats\n```\n\n3. Restart TinyDNS and Daemontools: `/etc/init.d/svscan restart`\n   _Note_: Some say `svc -t /service/dns` is enough, on my install\n   (Gentoo) it doesn't rehook the logging and I'm forced to restart it\n   entirely.\n\n## Unbound\n\nUnbound configuration:\n\n```text\n# Enable extended statistics.\nserver:\n        extended-statistics: yes\n        statistics-cumulative: yes\n\nremote-control:\n        control-enable: yes\n        control-interface: 127.0.0.1\n\n```\n\nRestart your unbound after changing the configuration, verify it is\nworking by running `unbound-control stats`.\n\n### Option 1. SNMP Extend (Preferred and easiest method)\n\n1. Copy the shell script, unbound, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/unbound -O /etc/snmp/unbound\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/unbound\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend unbound /usr/bin/sudo /etc/snmp/unbound\n```\n\n4. Restart snmpd.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Option 2. Agent\n\n[Install the agent](#agent-setup) on this device if it isn't already\nand copy the `unbound.sh` script to `/usr/lib/check_mk_agent/local/`\n\n## UPS-nut\n\nA small shell script that exports nut ups status.\n\n### SNMP Extend\n\n1. Copy the shell script, unbound, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/ups-nut.sh -O /etc/snmp/ups-nut.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/ups-nut.sh\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend ups-nut /etc/snmp/ups-nut.sh\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\nOptionally if you have multiple UPS or your UPS is not named APCUPS you can specify its name as an argument into `/etc/snmp/ups-nut.sh`\n```\nextend ups-nut /etc/snmp/ups-nut.sh ups1\nextend ups-nut /etc/snmp/ups-nut.sh ups2\n```\n\n## UPS-apcups\n\nA small shell script that exports apcacess ups status.\n\n### SNMP Extend\n\n1. Copy the shell script, unbound, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/ups-apcups -O /etc/snmp/ups-apcups\n```\n   \n2. Make the script executable\n```\nchmod +x /etc/snmp/ups-apcups\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend ups-apcups /etc/snmp/ups-apcups\n```\n\nIf 'apcaccess' is not in the PATH enviromental variable snmpd is\nusing, you may need to do something like below.\n\n```\nextend ups-apcups/usr/bin/env PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin /etc/snmp/ups-apcups\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Voip-monitor\n\nShell script that reports cpu-load/memory/open-files files stats of Voip Monitor\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/voipmon-stats.sh -O /etc/snmp/voipmon-stats.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/voipmon-stats.sh\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/voipmon-stats.sh`) and add:\n```\nextend voipmon /etc/snmp/voipmon-stats.sh\n```\n\n## ZFS\n\n### SNMP Extend\n\n`zfs-linux` requires python3 >=python3.5.\n\nThe installation steps are:\n\n1. Copy the polling script to the desired host (the host must be added\n   to LibreNMS devices)\n2. Make the script executable\n3. Edit snmpd.conf to include ZFS stats\n\n#### FreeBSD\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/zfs-freebsd -O /etc/snmp/zfs-freebsd\nchmod +x /etc/snmp/zfs-freebsd\necho \"extend zfs /etc/snmp/zfs-freebsd\" >> /etc/snmp/snmpd.conf\n```\n\n#### Linux\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/zfs-linux -O /etc/snmp/zfs-linux\nchmod +x /etc/snmp/zfs-linux\necho \"extend zfs /usr/bin/sudo /etc/snmp/zfs-linux\" >> /etc/snmp/snmpd.conf\n```\n\nEdit your sudo users (usually `visudo`) and add at the bottom:\n```\nsnmp ALL=(ALL) NOPASSWD: /etc/snmp/zfs-linux\n```\n\nNow restart snmpd and you're all set.\n", "<?php\n\nuse LibreNMS\\RRD\\RrdDefinition;\n\n$name = 'memcached';\n\nif (! empty($agent_data['app']['memcached'])) {\n    $data = $agent_data['app']['memcached'][$app['app_instance']];\n} else {\n    $oid = '.1.3.6.1.4.1.8072.1.3.2.3.1.2.9.109.101.109.99.97.99.104.101.100';\n    $result = snmp_get($device, $oid, '-Oqv');\n    $data = trim($result, '\"');\n    $data = unserialize(stripslashes(str_replace(\"<<<app-memcached>>>\\n\", '', $data)));\n    $data = reset($data);\n}\n\necho ' memcached(' . $app['app_instance'] . ')';\n\n$rrd_name = ['app', $name, $app->app_id];\n$rrd_def = RrdDefinition::make()\n    ->addDataset('uptime', 'GAUGE', 0, 125000000000)\n    ->addDataset('threads', 'GAUGE', 0, 125000000000)\n    ->addDataset('rusage_user_ms', 'DERIVE', 0, 125000000000)\n    ->addDataset('rusage_system_ms', 'DERIVE', 0, 125000000000)\n    ->addDataset('curr_items', 'GAUGE', 0, 125000000000)\n    ->addDataset('total_items', 'DERIVE', 0, 125000000000)\n    ->addDataset('limit_maxbytes', 'GAUGE', 0, 125000000000)\n    ->addDataset('curr_connections', 'GAUGE', 0, 125000000000)\n    ->addDataset('total_connections', 'DERIVE', 0, 125000000000)\n    ->addDataset('conn_structures', 'GAUGE', 0, 125000000000)\n    ->addDataset('bytes', 'GAUGE', 0, 125000000000)\n    ->addDataset('cmd_get', 'DERIVE', 0, 125000000000)\n    ->addDataset('cmd_set', 'DERIVE', 0, 125000000000)\n    ->addDataset('get_hits', 'DERIVE', 0, 125000000000)\n    ->addDataset('get_misses', 'DERIVE', 0, 125000000000)\n    ->addDataset('evictions', 'DERIVE', 0, 125000000000)\n    ->addDataset('bytes_read', 'DERIVE', 0, 125000000000)\n    ->addDataset('bytes_written', 'DERIVE', 0, 125000000000);\n\n$fields = [\n    'uptime'            => $data['uptime'] ?? null,\n    'threads'           => $data['threads'] ?? null,\n    'rusage_user_ms'    => $data['rusage_user_microseconds'] ?? null,\n    'rusage_system_ms'  => $data['rusage_system_microseconds'] ?? null,\n    'curr_items'        => $data['curr_items'] ?? null,\n    'total_items'       => $data['total_items'] ?? null,\n    'limit_maxbytes'    => $data['limit_maxbytes'] ?? null,\n    'curr_connections'  => $data['curr_connections'] ?? null,\n    'total_connections' => $data['total_connections'] ?? null,\n    'conn_structures'   => $data['connection_structures'] ?? null,\n    'bytes'             => $data['bytes'] ?? null,\n    'cmd_get'           => $data['cmd_get'] ?? null,\n    'cmd_set'           => $data['cmd_set'] ?? null,\n    'get_hits'          => $data['get_hits'] ?? null,\n    'get_misses'        => $data['get_misses'] ?? null,\n    'evictions'         => $data['evictions'] ?? null,\n    'bytes_read'        => $data['bytes_read'] ?? null,\n    'bytes_written'     => $data['bytes_written'] ?? null,\n];\n\n$app_id = $app->app_id;\n$tags = compact('name', 'app_id', 'rrd_name', 'rrd_def');\ndata_update($device, 'app', $tags, $fields);\nupdate_application($app, $result, $fields);\n", "<?php\n\nuse App\\Models\\Device;\nuse LibreNMS\\RRD\\RrdDefinition;\n\nif ($device['os_group'] == 'unix' || $device['os'] == 'windows') {\n    echo \\LibreNMS\\Config::get('project_name') . ' UNIX Agent: ';\n\n    $agent_port = get_dev_attrib($device, 'override_Unixagent_port');\n    if (empty($agent_port)) {\n        $agent_port = \\LibreNMS\\Config::get('unix-agent.port');\n    }\n\n    $agent_start = microtime(true);\n    $agent = null;\n    try {\n        $poller_target = \\LibreNMS\\Util\\Rewrite::addIpv6Brackets(Device::pollerTarget($device['hostname']));\n        $agent = @fsockopen($poller_target, $agent_port, $errno, $errstr, \\LibreNMS\\Config::get('unix-agent.connection-timeout'));\n    } catch (ErrorException $e) {\n        echo $e->getMessage() . PHP_EOL; // usually connection timed out\n\n        return;\n    }\n\n    if (! $agent) {\n        echo 'Connection to UNIX agent failed on port ' . $agent_port . '.';\n    } else {\n        // Set stream timeout (for timeouts during agent  fetch\n        stream_set_timeout($agent, \\LibreNMS\\Config::get('unix-agent.read-timeout'));\n        $agentinfo = stream_get_meta_data($agent);\n\n        // fetch data while not eof and not timed-out\n        while ((! feof($agent)) && (! $agentinfo['timed_out'])) {\n            $agent_raw .= fgets($agent, 128);\n            $agentinfo = stream_get_meta_data($agent);\n        }\n\n        if ($agentinfo['timed_out']) {\n            echo 'Connection to UNIX agent timed out during fetch on port ' . $agent_port . '.';\n        }\n    }\n\n    $agent_end = microtime(true);\n    $agent_time = round(($agent_end - $agent_start) * 1000);\n\n    if (! empty($agent_raw)) {\n        echo 'execution time: ' . $agent_time . 'ms';\n\n        $tags = [\n            'rrd_def' => RrdDefinition::make()->addDataset('time', 'GAUGE', 0),\n        ];\n        $fields = [\n            'time' => $agent_time,\n        ];\n        data_update($device, 'agent', $tags, $fields);\n\n        $os->enableGraph('agent');\n\n        $agentapps = [\n            'apache',\n            'bind',\n            'ceph',\n            'mysql',\n            'nginx',\n            'php-fpm',\n            'powerdns',\n            'powerdns-recursor',\n            'proxmox',\n            'redis',\n            'rrdcached',\n            'tinydns',\n            'gpsd',\n        ];\n\n        global $agent_data;\n        $agent_data = [];\n        foreach (explode('<<<', $agent_raw) as $section) {\n            [$section, $data] = explode('>>>', $section);\n            [$sa, $sb] = explode('-', $section, 2);\n\n            if (in_array($section, $agentapps)) {\n                $agent_data['app'][$section] = trim($data);\n            }\n\n            if (! empty($sa) && ! empty($sb)) {\n                $agent_data[$sa][$sb] = trim($data);\n            } else {\n                $agent_data[$section] = trim($data);\n            }\n        }//end foreach\n\n        d_echo($agent_data);\n\n        include 'unix-agent/packages.inc.php';\n        include 'unix-agent/munin-plugins.inc.php';\n\n        foreach (array_keys($agent_data) as $key) {\n            if (file_exists(\"includes/polling/unix-agent/$key.inc.php\")) {\n                d_echo(\"Including: unix-agent/$key.inc.php\");\n\n                include \"unix-agent/$key.inc.php\";\n            }\n        }\n\n        // Unix Processes\n        if (! empty($agent_data['ps'])) {\n            echo 'Processes: ';\n            dbDelete('processes', 'device_id = ?', [$device['device_id']]);\n            $data = [];\n            foreach (explode(\"\\n\", $agent_data['ps']) as $process) {\n                $process = preg_replace('/\\((.*),([0-9]*),([0-9]*),([0-9\\:\\.\\-]*),([0-9]*)\\)\\ (.*)/', '\\\\1|\\\\2|\\\\3|\\\\4|\\\\5|\\\\6', $process);\n                [$user, $vsz, $rss, $cputime, $pid, $command] = explode('|', $process, 6);\n                if (! empty($command)) {\n                    $data[] = ['device_id' => $device['device_id'], 'pid' => $pid, 'user' => $user, 'vsz' => $vsz, 'rss' => $rss, 'cputime' => $cputime, 'command' => $command];\n                }\n            }\n            if (count($data) > 0) {\n                dbBulkInsert($data, 'processes');\n            }\n            echo \"\\n\";\n        }\n\n        // Windows Processes\n        if (! empty($agent_data['ps:sep(9)'])) {\n            echo 'Processes: ';\n            dbDelete('processes', 'device_id = ?', [$device['device_id']]);\n            $data = [];\n            foreach (explode(\"\\n\", $agent_data['ps:sep(9)']) as $process) {\n                $process = preg_replace('/\\(([^,;]+),([0-9]*),([0-9]*),([0-9]*),([0-9]*),([0-9]*),([0-9]*),([0-9]*),([0-9]*),([0-9]*)?,?([0-9]*)\\)(.*)/', '\\\\1|\\\\2|\\\\3|\\\\4|\\\\5|\\\\6|\\\\7|\\\\8|\\\\9|\\\\10|\\\\11|\\\\12', $process);\n                [$user, $VirtualSize, $WorkingSetSize, $zero, $processId, $PageFileUsage, $UserModeTime, $KernelModeTime, $HandleCount, $ThreadCount, $uptime, $process_name] = explode('|', $process, 12);\n                if (! empty($process_name)) {\n                    $cputime = ($UserModeTime + $KernelModeTime) / 10000000;\n                    $days = floor($cputime / 86400);\n                    $hours = str_pad(floor(($cputime / 3600) % 24), 2, '0', STR_PAD_LEFT);\n                    $minutes = str_pad(floor(($cputime / 60) % 60), 2, '0', STR_PAD_LEFT);\n                    $seconds = str_pad(($cputime % 60), 2, '0', STR_PAD_LEFT);\n                    $cputime = ($days > 0 ? \"$days-\" : '') . \"$hours:$minutes:$seconds\";\n                    $data[] = ['device_id' => $device['device_id'], 'pid' => $processId, 'user' => $user, 'vsz' => $PageFileUsage + $WorkingSetSize, 'rss' => $WorkingSetSize, 'cputime' => $cputime, 'command' => $process_name];\n                }\n            }\n            if (count($data) > 0) {\n                dbBulkInsert($data, 'processes');\n            }\n            echo \"\\n\";\n        }\n\n        foreach (array_keys($agent_data['app'] ?? []) as $key) {\n            if (file_exists(\"includes/polling/applications/$key.inc.php\")) {\n                d_echo(\"Enabling $key for \" . $device['hostname'] . \" if not yet enabled\\n\");\n\n                if (in_array($key, $agentapps)) {\n                    if (dbFetchCell('SELECT COUNT(*) FROM `applications` WHERE `device_id` = ? AND `app_type` = ?', [$device['device_id'], $key]) == '0') {\n                        echo \"Found new application '$key'\\n\";\n                        dbInsert(['device_id' => $device['device_id'], 'app_type' => $key, 'app_status' => '', 'app_instance' => ''], 'applications');\n                    }\n                }\n            }\n        }\n\n        // memcached\n        if (! empty($agent_data['app']['memcached'])) {\n            $agent_data['app']['memcached'] = unserialize($agent_data['app']['memcached']);\n            foreach ($agent_data['app']['memcached'] as $memcached_host => $memcached_data) {\n                if (dbFetchCell('SELECT COUNT(*) FROM `applications` WHERE `device_id` = ? AND `app_type` = ? AND `app_instance` = ?', [$device['device_id'], 'memcached', $memcached_host]) == '0') {\n                    echo \"Found new application 'Memcached' $memcached_host\\n\";\n                    dbInsert(['device_id' => $device['device_id'], 'app_type' => 'memcached', 'app_status' => '', 'app_instance' => $memcached_host], 'applications');\n                }\n            }\n        }\n\n        // DRBD\n        if (! empty($agent_data['drbd'])) {\n            $agent_data['app']['drbd'] = [];\n            foreach (explode(\"\\n\", $agent_data['drbd']) as $drbd_entry) {\n                [$drbd_dev, $drbd_data] = explode(':', $drbd_entry);\n                if (preg_match('/^drbd/', $drbd_dev)) {\n                    $agent_data['app']['drbd'][$drbd_dev] = $drbd_data;\n                    if (dbFetchCell('SELECT COUNT(*) FROM `applications` WHERE `device_id` = ? AND `app_type` = ? AND `app_instance` = ?', [$device['device_id'], 'drbd', $drbd_dev]) == '0') {\n                        echo \"Found new application 'DRBd' $drbd_dev\\n\";\n                        dbInsert(['device_id' => $device['device_id'], 'app_type' => 'drbd', 'app_status' => '', 'app_instance' => $drbd_dev], 'applications');\n                    }\n                }\n            }\n        }\n    }//end if\n\n    // Use agent DMI data if available\n    if (isset($agent_data['dmi'])) {\n        if ($agent_data['dmi']['system-product-name']) {\n            $hardware = ($agent_data['dmi']['system-manufacturer'] ? $agent_data['dmi']['system-manufacturer'] . ' ' : '') . $agent_data['dmi']['system-product-name'];\n\n            // Clean up Generic hardware descriptions\n            DeviceCache::getPrimary()->hardware = rewrite_generic_hardware($hardware);\n            unset($hardware);\n        }\n\n        if ($agent_data['dmi']['system-serial-number']) {\n            DeviceCache::getPrimary()->serial = $agent_data['dmi']['system-serial-number'];\n        }\n        DeviceCache::getPrimary()->save();\n    }\n\n    if (! empty($agent_sensors)) {\n        echo 'Sensors: ';\n        check_valid_sensors($device, 'temperature', $valid['sensor'], 'agent');\n        d_echo($agent_sensors);\n        if (count($agent_sensors) > 0) {\n            record_sensor_data($device, $agent_sensors);\n        }\n        echo \"\\n\";\n    }\n\n    echo \"\\n\";\n}//end if\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n<channel>\n <title>LibreNMS Notifications</title>\n <description>RSS feed for notifications to LibreNMS users</description>\n <link>https://www.librenms.org/</link>\n <lastBuildDate>Mon, 02 May 2016 20:00:00 +0000</lastBuildDate>\n <pubDate>Mon, 02 Mar 2016 20:00:00 +0000</pubDate>\n <ttl>1800</ttl>\n <item>\n  <title>Hello World!</title>\n  <description>This is the first notification. We will post these whenever an upcoming major change is about to happen.</description>\n  <pubDate>Tue, 19 Jan 2016 12:00:00 +0000</pubDate>\n </item>\n <item>\n  <title>Cisco syslog parsing changes</title>\n  <description>We have overhauled the Cisco syslog parsing.  Please monitor your syslog entries from Cisco IOS, IOSXR, and CatOS devices.  If you notice any issues please open a new issue on GitHub and include the original syslog message.</description>\n  <pubDate>Thu, 03 Mar 2016 12:00:00 +0000</pubDate>\n </item>\n <item>\n   <title>Billing Data Changes</title>\n   <description>We have updated the method for storing billing data, removing a lot of information stored in\n   the database which was not used.  Please check that your billing data is updating as expected, and\n   if you notice any problems open an issue on GitHub.</description>\n   <pubDate>Mon, 07 Mar 2016 12:00:00 +0000</pubDate>\n </item>\n <item>\n   <title>Introduction of default purge interval or alert history</title>\n   <description>We have introduced a purge setting for alert history which is set to 365 days as default. If you would like to update this then please\n   set $config['alert_log_purge'] to a custom value (set in days).</description>\n   <pubDate>Mon, 02 May 2016 20:00:00 +0000</pubDate>\n </item>\n <item>\n   <title>The Alerts Menu has moved</title>\n   <description>The Alerts menu has been relocated to a top level menu on the far right.  To make room for this, Plugins have been moved\n   to the overview menu.</description>\n   <pubDate>Mon, 12 Sep 2016 20:00:00 +0000</pubDate>\n </item>\n <item>\n   <title>Wireless Section in Beta</title>\n   <description>The new wireless section is under development. Please visit our community to discuss these changes and help improve LibreNMS.\n   https://t.libren.ms/5fglp</description>\n   <pubDate>Mon, 1 May 2017 20:00:00 +0000</pubDate>\n </item>\n <item>\n   <title>Update to alerting to normal users</title>\n   <description>We have released an update to fix normal users receiving alerts with no ability to turn this off. An option is now available within the General alert settings section to\n   enable this. Please note that the default is off to match with the other default contact settings. If you expect normal users to receive alerts then you should enable this new option.</description>\n   <pubDate>Mon, 15 May 2017 23:00:00 +0000</pubDate>\n </item>\n  <item>\n    <title>Legacy Alert Templates and Transports removed</title>\n    <description>As described previously, Legacy Alert Templates and Transports have been removed.  You can find more info here: https://community.librenms.org/t/deprecation-notice-alerting-legacy-transports-and-templates/5915</description>\n    <pubDate>Fri, 15 Feb 2017 23:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>Cisco Temperature Sensor Threshold Values Stored as High Limits</title>\n    <description>During discovery, some temperature sensors discovered on Cisco devices had their highest temperature value stored as warning high limit. For new discovered devices, this value is now stored as high limit.</description>\n    <pubDate>Sun, 17 Mar 2019 21:00:00 +0100</pubDate>\n  </item>\n   <item>\n    <title>LibreNMS Python Dispatcher Service V2 (breaking change)</title>\n    <description>Version two of the LibreNMS python dispatcher service is merged. This code now requires Redis 5.x and redis-py 3.x to operate (if using distributed polling). If you are using the dispatcher service with Redis and have not updated, polling will stop functioning.</description>\n    <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>RutOS 2xx pinState renamed</title>\n    <description>RutOS 2xx pinState renamed to rutos2xx_pinState.  Update any alert rules you may have.</description>\n    <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>Cisco Wireless Controller classified as Wireless</title>\n    <description>Cisco WLC is now classified as type \"Wireless\" instead of \"Network\".  Update any alert rules you may have.</description>\n    <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>nobulk is now called snmp_bulk</title>\n    <description>The config option \"nobulk\" is now called \"snmp_bulk\" to align better with other options.  Update any local configs you might have.  See https://github.com/librenms/librenms/pull/13098 for more information</description>\n    <pubDate>Wed, 01 Sep 2021 18:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>Mikrotik routeros wireless changes</title>\n    <description>Improvements to routeros wireless polling will lose historical data for 60GHz rate, frequency, and distance wireless sensors. See https://github.com/librenms/librenms/pull/12976 for more information.</description>\n    <pubDate>Wed, 19 Oct 2021 18:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>ADSL discovery and polling moved to a new module</title>\n    <description>Adsl statistics are now discovered and polled in a new module. Vdsl stats were also added. `lnms config:set enable_ports_adsl true`is not supported anymore. See https://github.com/librenms/librenms/pull/14207 for more information.</description>\n    <pubDate>Wed, 7 Sept 2022 18:00:00 +0000</pubDate>\n  </item>\n</channel>\n</rss>\n"], "fixing_code": ["# Applications\n\nYou can use Application support to graph performance statistics of\nmany applications.\n\nDifferent applications support a variety of ways to collect data: \n\n1. By direct connection to the application\n2. snmpd extend\n3. [The agent](Agent-Setup.md).\n\nThe monitoring of applications could be added\nbefore or after the hosts have been added to LibreNMS.\n\nIf multiple methods of collection are listed you only need to enable one.\n\n## SNMP Extend\n\nWhen using the snmp extend method, the application discovery module\nwill pick up which applications you have set up for monitoring\nautomatically, even if the device is already in LibreNMS. The\napplication discovery module is enabled by default for most \\*nix\noperating systems, but in some cases you will need to manually enable\nthe application discovery module.\n\n### SUDO\n\nOne major thing to keep in mind when using SNMP extend is these run as the snmpd\nuser that can be an unprivileged user. In these situations you need to use sudo.\n\nTo test if you need sudo, first check the user snmpd is running as.\nThen test if you can run the extend script as that user without issue.\nFor example if snmpd is running as 'Debian-snmp' and we want\nto run the extend for proxmox, we check that the following run without error:\n\n```\nsudo -u Debian-snmp /usr/local/bin/proxmox\n```\n\nIf it doesn't work, then you will need to use sudo with the extend command.\nFor the example above, that would mean adding the line below to the sudoers file:\n\n```\nDebian-snmp ALL = NOPASSWD: /usr/local/bin/proxmox\n```\n\nFinally we would need to add sudo to the extend command, which would look\nlike that for proxmox:\n\n```\nextend proxmox /usr/bin/sudo /usr/local/bin/proxmox\n```\n\n## Enable the application discovery module\n\n1. Edit the device for which you want to add this support\n1. Click on the *Modules* tab and enable the `applications` module.\n1. This will be automatically saved, and you should get a green\n   confirmation pop-up message.\n\n![Enable-application-module](/img/Enable_application_module.png)\n\nAfter you have enabled the application module, it would be wise to\nthen also enable which applications you want to monitor, in the rare\ncase where LibreNMS does not automatically detect it.\n\n**Note**: Only do this if an application was not auto-discovered by\nLibreNMS during discovery and polling.\n\n## Enable the application(s) to be discovered\n\n1. Go to the device you have just enabled the application module for.\n1. Click on the *Applications* tab and select the applications you\n   want to monitor.\n1. This will also be automatically saved, and you should get a green\n   confirmation pop-up message.\n\n![Enable-applications](/img/Enable_applications.png)\n\n## Agent\n\nThe unix-agent does not have a discovery module, only a poller\nmodule. That poller module is always disabled by default. It needs to\nbe manually enabled if using the agent. Some applications will be\nautomatically enabled by the unix-agent poller module. It is better to\nensure that your application is enabled for monitoring. You can check\nby following the steps under the `SNMP Extend` heading.\n\n## Apache\n\nEither use SNMP extend or use the agent.\n\nNote that you need to install and configure the Apache\n[mod_status](https://httpd.apache.org/docs/2.4/en/mod/mod_status.html)\nmodule before trying the script.\n\n### SNMP Extend\n\n1. Download the script onto the desired host (the host must be added\nto LibreNMS devices)\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/apache-stats.py -O /etc/snmp/apache-stats.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/apache-stats.py\n```\n\n3. Create the cache directory, '/var/cache/librenms/' and make sure\nthat it is owned by the user running the SNMP daemon.\n```\nmkdir -p /var/cache/librenms/\n```\n\n4. Verify it is working by running /etc/snmp/apache-stats.py Package `urllib3` for python3 needs to be\ninstalled. In Debian-based systems for example you can achieve this by issuing:\n```\napt-get install python3-urllib3\n```\n\n5. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend apache /etc/snmp/apache-stats.py\n```\n\n6. Restart snmpd on your host\n\n7. Test by running\n```\nsnmpwalk <various options depending on your setup> localhost NET-SNMP-EXTEND-MIB::nsExtendOutput2Table\n```\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `apache` script to `/usr/lib/check_mk_agent/local/`\n\n1. Verify it is working by running /usr/lib/check_mk_agent/local/apache\n(If you get error like \"Can't locate LWP/Simple.pm\". libwww-perl needs\nto be installed: apt-get install libwww-perl)\n\n2. Create the cache directory, '/var/cache/librenms/' and make sure\nthat it is owned by the user running the SNMP daemon.\n```\nmkdir -p /var/cache/librenms/\n```\n\n3. On the device page in Librenms, edit your host and check the\n`Apache` under the Applications tab.\n\n## Asterisk\n\nA small shell script that reports various Asterisk call status.\n\n### SNMP Extend\n\n1. Download the [asterisk\nscript](https://github.com/librenms/librenms-agent/blob/master/snmp/asterisk)\nto `/etc/snmp/` on your asterisk server.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/asterisk -O /etc/snmp/asterisk\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/asterisk\n```\n\n3. Configure `ASCLI` in the script.\n\n4. Verify it is working by running `/etc/snmp/asterisk`\n\n5. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend asterisk /etc/snmp/asterisk\n```\n\n6. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## backupninja\n\nA small shell script that reports status of last backupninja backup.\n\n### SNMP Extend\n\n1. Download the [backupninja\nscript](https://github.com/librenms/librenms-agent/blob/master/snmp/backupninja.py)\nto `/etc/snmp/backupninja.py` on your backuped server.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/backupninja.py -O /etc/snmp/backupninja.py`\n```\n2. Make the script executable:\n```\nchmod +x /etc/snmp/backupninja.py\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend backupninja /etc/snmp/backupninja.py\n```\n\n4. Restart snmpd on your host\n\n\n## BIND9 aka named\n\n1. Create stats file with appropriate permissions:\n```bash\n~$ touch /var/cache/bind/stats\n~$ chown bind:bind /var/cache/bind/stats\n```\nChange `user:group` to the user and group that's running bind/named.\n\n2. Bind/named configuration:\n```text\noptions {\n    ...\n    statistics-file \"/var/cache/bind/stats\";\n    zone-statistics yes;\n    ...\n};\n```\n\n3. Restart your bind9/named after changing the configuration.\n\n4. Verify that everything works by executing `rndc stats && cat\n/var/cache/bind/stats`. In case you get a `Permission Denied` error,\nmake sure you changed the ownership correctly.\n\n5. Also be aware that this file is appended to each time `rndc stats`\nis called. Given this it is suggested you setup file rotation for\nit. Alternatively you can also set zero_stats to 1 in the config.\n\n6. The script for this also requires the Perl module `File::ReadBackwards`.\n```\nFreeBSD       => p5-File-ReadBackwards\nCentOS/RedHat => perl-File-ReadBackwards\nDebian/Ubuntu => libfile-readbackwards-perl\n```\n\nIf it is not available, it can be installed by `cpan -i File::ReadBackwards`.\n\n7. You may possibly need to configure the agent/extend script as well.\n\nThe config file's path defaults to the same path as the script, but\nwith .config appended. So if the script is located at\n`/etc/snmp/bind`, the config file will be\n`/etc/snmp/bind.config`. Alternatively you can also specify a config\nvia `-c $file`.\n\nAnything starting with a # is comment. The format for variables are\n$variable=$value. Empty lines are ignored. Spaces and tabs at either\nthe start or end of a line are ignored.\n\nContent of an example /etc/snmp/bind.config . Please edit with your\nown settings.\n\n```\nrndc = The path to rndc. Default: /usr/bin/env rndc\ncall_rndc = A 0/1 boolean on whether or not to call rndc stats.\n    Suggest to set to 0 if using netdata. Default: 1\nstats_file = The path to the named stats file. Default: /var/cache/bind/stats\nagent = A 0/1 boolean for if this is being used as a LibreNMS\n    agent or not. Default: 0\nzero_stats = A 0/1 boolean for if the stats file should be zeroed\n    first. Default: 0 (1 if guessed)\n```\n\nIf you want to guess at the configuration, call the script with `-g`\nand it will print out what it thinks it should be.\n\n### SNMP Extend\n\n1. Copy the bind shell script, to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/bind -O /etc/snmp/bind\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/bind\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend bind /etc/snmp/bind\n```\n\n4. Restart snmpd on the host in question.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Agent\n\n1. [Install the agent](Agent-Setup.md) on this device if it isn't\nalready and copy the script to `/usr/lib/check_mk_agent/local/bind`\nvia `wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/bind -O /usr/lib/check_mk_agent/local/bind`\n\n2. Make the script executable\n```\nchmod +x /usr/lib/check_mk_agent/local/bind\n```\n\n3. Set the variable 'agent' to '1' in the config.\n\n## Certificate\n\nA small python3 script that checks age and remaining validity of certificates\n\nThis script needs following packages on Debian/Ubuntu Systems:\n\n* python3\n* python3-openssl\n\nContent of an example /etc/snmp/certificate.json . Please edit with your own settings.\n```\n{\"domains\": [\n    {\"fqdn\": \"www.mydomain.com\"},\n    {\"fqdn\": \"some.otherdomain.org\",\n     \"port\": 8443},\n    {\"fqdn\": \"personal.domain.net\"}\n]\n}\n```\nKey 'domains' contains a list of domains to check.\nOptional you can define a port. By default it checks on port 443.\n\n### SNMP Extend\n1. Copy the shell script to the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/certificate.py -O /etc/snmp/certificate.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/certificate.py\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend certificate /etc/snmp/certificate.py\n```\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of the page. If it is not, please follow the steps set out under `SNMP Extend` heading top of page.\n\n## C.H.I.P\n\nC.H.I.P. is a $9 R8 based tiny computer ideal for small projects.\nFurther details: <https://getchip.com/pages/chip>\n\n1. Copy the shell script to the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/chip.sh -O /etc/snmp/power-stat.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/power-stat.sh\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend power-stat /etc/snmp/power-stat.sh\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Docker Stats\n\nIt allows you to know which container docker run and their stats.\n\nThis script require: jq\n\n### SNMP Extend\n\n1. Install jq\n```\nsudo apt install jq\n```\n\n2. Copy the shell script to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/docker-stats.sh -O /etc/snmp/docker-stats.sh\n```\n\n3. Make the script executable\n```\nchmod +x /etc/snmp/docker-stats.sh\n```\n\n4. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend docker /etc/snmp/docker-stats.sh\n```\n\n5. If your run Debian, you need to add the Debian-snmp user to the docker group\n```\nusermod -a -G docker Debian-snmp\n```\n\n6. Restart snmpd on your host\n```\nsystemctl restart snmpd\n```\n\n## Entropy\n\nA small shell script that checks your system's available random entropy.\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/entropy.sh -O /etc/snmp/entropy.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/entropy.sh\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend entropy /etc/snmp/entropy.sh\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## EXIM Stats\n\nSNMP extend script to get your exim stats data into your host.\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/exim-stats.sh -O /etc/snmp/exim-stats.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/exim-stats.sh\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend exim-stats /etc/snmp/exim-stats.sh\n```\n\n4. If you are using sudo edit your sudo users (usually `visudo`) and\nadd at the bottom:\n```\nsnmp ALL=(ALL) NOPASSWD: /etc/snmp/exim-stats.sh, /usr/bin/exim*\n```\n\n5. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Fail2ban\n\n### SNMP Extend\n\n1. Copy the shell script, fail2ban, to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/fail2ban -O /etc/snmp/fail2ban\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/fail2ban\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend fail2ban /etc/snmp/fail2ban\n```\n\n    1. If you want to use the cache, it is as below, by using the -c switch.\n    ```\n    extend fail2ban /etc/snmp/fail2ban -c\n    ```\n\n    2. If you want to use the cache and update it if needed, this can by using the -c and -U switches.\n    ```\n    extend fail2ban /etc/snmp/fail2ban -c -U\n    ```\n\n    3. If you need to specify a custom location for the fail2ban-client, that can be done via the -f switch.\n    ```\n    extend fail2ban /etc/snmp/fail2ban -f /foo/bin/fail2ban-client\n    ```\n    If not specified, \"/usr/bin/env fail2ban-client\" is used.\n\n1. Restart snmpd on your host\n\n2. If you wish to use caching, add the following to /etc/crontab and\nrestart cron.\n```\n*/3    *    *    *    *    root    /etc/snmp/fail2ban -u\n```\n\n6. Restart or reload cron on your system.\n\nIf you have more than a few jails configured, you may need to use\ncaching as each jail needs to be polled and fail2ban-client can't do\nso in a timely manner for than a few. This can result in failure of\nother SNMP information being polled.\n\nFor additional details of the switches, please see the POD in the\nscript it self at the top.\n\n## FreeBSD NFS Client\n\n### SNMP Extend\n\n1. Copy the shell script, fbsdnfsserver, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/fbsdnfsclient -O /etc/snmp/fbsdnfsclient\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/fbsdnfsclient\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend fbsdnfsclient /etc/snmp/fbsdnfsclient\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## FreeBSD NFS Server\n\n### SNMP Extend\n\n1. Copy the shell script, fbsdnfsserver, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/fbsdnfsserver -O /etc/snmp/fbsdnfsserver\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/fbsdnfsserver\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend fbsdnfsserver /etc/snmp/fbsdnfsserver\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## FreeRADIUS\n\nThe FreeRADIUS application extension requires that status_server be\nenabled in your FreeRADIUS config.  For more information see:\n<https://wiki.freeradius.org/config/Status>\n\nYou should note that status requests increment the FreeRADIUS request\nstats.  So LibreNMS polls will ultimately be reflected in your\nstats/charts.\n\n1. Go to your FreeRADIUS configuration directory (usually /etc/raddb\nor /etc/freeradius).\n\n2. `cd sites-enabled`\n\n3. `ln -s ../sites-available/status status`\n\n4. Restart FreeRADIUS.\n\n5. You should be able to test with the radclient as follows...\n```\necho \"Message-Authenticator = 0x00, FreeRADIUS-Statistics-Type = 31, Response-Packet-Type = Access-Accept\" | \\\nradclient -x localhost:18121 status adminsecret\n```\n\nNote that adminsecret is the default secret key in status_server.\nChange if you've modified this.\n\n### SNMP Extend\n\n1. Copy the freeradius shell script, to the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/freeradius.sh -O /etc/snmp/freeradius.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/freeradius.sh\n```\n\n3. If you've made any changes to the FreeRADIUS status_server config\n(secret key, port, etc.) edit freeradius.sh and adjust the config\nvariable accordingly.\n\n4. Edit your snmpd.conf file and add:\n```\nextend freeradius /etc/snmp/freeradius.sh\n```\n\n5. Restart snmpd on the host in question.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Agent\n\n1. Install the script to your agent\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/freeradius.sh -O /usr/lib/check_mk_agent/local/freeradius.sh`\n```\n\n2. Make the script executable\n```\nchmod +x /usr/lib/check_mk_agent/local/freeradius.sh\n```\n\n3. If you've made any changes to the FreeRADIUS status_server config\n(secret key, port, etc.) edit freeradius.sh and adjust the config\nvariable accordingly.\n\n4. Edit the freeradius.sh script and set the variable 'AGENT' to '1'\nin the config.\n\n## Freeswitch\n\nA small shell script that reports various Freeswitch call status.\n\n### Agent\n\n1. [Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `freeswitch` script to `/usr/lib/check_mk_agent/local/`\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/freeswitch -O /usr/lib/check_mk_agent/local/freeswitch`\n```\n\n2. Make the script executable\n```\nchmod +x /usr/lib/check_mk_agent/local/freeswitch\n```\n\n3. Configure `FSCLI` in the script. You may also have to create an\n`/etc/fs_cli.conf` file if your `fs_cli` command requires\nauthentication.\n\n4. Verify it is working by running `/usr/lib/check_mk_agent/local/freeswitch`\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/agent-local/freeswitch -O /etc/snmp/freeswitch\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/freeswitch\n```\n\n3. Configure `FSCLI` in the script. You may also have to create an\n`/etc/fs_cli.conf` file if your `fs_cli` command requires\nauthentication.\n\n4. Verify it is working by running `/etc/snmp/freeswitch`\n\n5. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend freeswitch /etc/snmp/freeswitch\n```\n\n6. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## GPSD\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/gpsd -O /etc/snmp/gpsd\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/gpsd\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend gpsd /etc/snmp/gpsd\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading at the top of the page.\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `gpsd` script to `/usr/lib/check_mk_agent/local/`\n\nYou may need to configure `$server` or `$port`.\n\nVerify it is working by running `/usr/lib/check_mk_agent/local/gpsd`\n\n## Icecast\n\nShell script that reports load average/memory/open-files stats of Icecast\n### SNMP Extend\n\n1. Copy the shell script, icecast-stats.sh, to the desired host (the host must be added to LibreNMS devices)\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/icecast-stats.sh -O /etc/snmp/icecast-stats.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/icecast-stats.sh\n```\n\n3. Verify it is working by running `/etc/snmp/icecast-stats.sh`\n\n4. Edit your snmpd.conf file (usually `/etc/snmp/icecast-stats.sh`) and add:\n```\nextend icecast /etc/snmp/icecast-stats.sh\n```\n\n## ISC DHCP Stats\n\nA small python3 script that reports current DHCP leases stats and pool usage of ISC DHCP Server.\n\nAlso you have to install the dhcpd-pools Package.\nUnder Ubuntu/Debian just run `apt install dhcpd-pools`\n\n### SNMP Extend\n\n1. Copy the shell script to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/dhcp.py -O /etc/snmp/dhcp.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/dhcp.py\n```\n\n3. Edit your config file, Content of an example /etc/snmp/dhcp.json\n```\n{\"leasefile\": \"/var/lib/dhcp/dhcpd.leases\" }\n```\nKey 'leasefile' specifies the path to your lease file.\n\n4. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend dhcpstats /etc/snmp/dhcp.py\n```\n\n5. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## mailcow-dockerized postfix\n\n### SNMP Extend\n\n1. Download the script into the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/mailcow-dockerized-postfix -O /etc/snmp/mailcow-dockerized-postfix\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/mailcow-dockerized-postfix\n```\n> Maybe you will need to install `pflogsumm` on debian based OS. Please check if you have package installed.\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend mailcow-postfix /etc/snmp/mailcow-dockerized-postfix\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Mailscanner\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/mailscanner.php -O /etc/snmp/mailscanner.php\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/mailscanner.php\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend mailscanner /etc/snmp/mailscanner.php\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Mdadm\n\nIt allows you to checks mdadm health and array data\n\nThis script require: jq\n\n### SNMP Extend\n\n1. Install jq\n```\nsudo apt install jq\n```\n\n2. Download the script onto the desired host.\n```\nsudo wget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/mdadm -O /etc/snmp/mdadm\n```\n\n3. Make the script executable\n```\nsudo chmod +x /etc/snmp/mdadm\n```\n\n4. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend mdadm /etc/snmp/mdadm\n```\n\n5. Verify it is working by running\n```\nsudo /etc/snmp/mdadm\n```\n\n6. Restart snmpd on your host\n```\nsudo service snmpd restart\n```\n\nThe application should be auto-discovered as described at the\ntop of the page. If it is not, please follow the steps set out\nunder `SNMP Extend` heading top of page.\n\n\n## MegaRAID\n\nThis software from Broadcom/LSI let you monitor MegaRAID controller.\n\n1. Download the [external software](https://docs.broadcom.com/docs/1211132411799) and follow the included install instructions.\n\n2. Add the following line to your snmpd.conf file (usually /etc/snmp/snmpd.conf)\n```\npass .1.3.6.1.4.1.3582 /usr/sbin/lsi_mrdsnmpmain\n```\n\n3. Restart snmpd on your host\n\n\n## Memcached\n\n### SNMP Extend\n\n1. Copy the [memcached\n   script](https://github.com/librenms/librenms-agent/blob/master/snmp/memcached)\n   to `/etc/snmp/` on your remote server.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/memcached -O /etc/snmp/memcached\n```\n\n2. Make the script executable:\n```\nchmod +x /etc/snmp/memcached\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend memcached /etc/snmp/memcached\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Munin\n\n### Agent\n\n1. Install the script to your agent:\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/munin -O /usr/lib/check_mk_agent/local/munin\n```\n\n2. Make the script executable\n```\nchmod +x /usr/lib/check_mk_agent/local/munin\n```\n\n3. Create the munin scripts dir:\n```\nmkdir -p /usr/share/munin/munin-scripts\n```\n\n4. Install your munin scripts into the above directory.\n\nTo create your own custom munin scripts, please see this example:\n\n```bash\n#!/bin/bash\nif [ \"$1\" = \"config\" ]; then\n    echo 'graph_title Some title'\n    echo 'graph_args --base 1000 -l 0' #not required\n    echo 'graph_vlabel Some label'\n    echo 'graph_scale no' #not required, can be yes/no\n    echo 'graph_category system' #Choose something meaningful, can be anything\n    echo 'graph_info This graph shows something awesome.' #Short desc\n    echo 'foobar.label Label for your unit' # Repeat these two lines as much as you like\n    echo 'foobar.info Desc for your unit.'\n    exit 0\nfi\necho -n \"foobar.value \" $(date +%s) #Populate a value, here unix-timestamp\n```\n\n## MySQL\n\nCreate the cache directory, '/var/cache/librenms/' and make sure\nthat it is owned by the user running the SNMP daemon.\n```\nmkdir -p /var/cache/librenms/\n```\n\nThe MySQL script requires PHP-CLI and the PHP MySQL extension, so\nplease verify those are installed.\n\nCentOS (May vary based on PHP version)\n```\nyum install php-cli php-mysql\n```\n\nDebian (May vary based on PHP version)\n```\napt-get install php-cli php-mysql\n```\n\nUnlike most other scripts, the MySQL script requires a configuration\nfile `mysql.cnf` in the same directory as the extend or agent script\nwith following content:\n\n```php\n<?php\n$mysql_user = 'root';\n$mysql_pass = 'toor';\n$mysql_host = 'localhost';\n$mysql_port = 3306;\n```\n\nNote that depending on your MySQL installation (chrooted install for example),\nyou may have to specify 127.0.0.1 instead of localhost. Localhost make\na MySQL connection via the mysql socket, while 127.0.0.1 make a standard\nIP connection to mysql.\n\nNote also if you get a mysql error `Uncaught TypeError: mysqli_num_rows(): Argument #1`,\nthis is because you are using a newer mysql version which doesnt support `UNBLOCKING` for slave statuses,\nso you need to also include the line `$chk_options['slave'] = false;` into `mysql.cnf` to skip checking slave statuses\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\n\nand copy the `mysql` script to `/usr/lib/check_mk_agent/local/`\n\nVerify it is working by running `/usr/lib/check_mk_agent/local/mysql`\n\n### SNMP extend\n\n1. Copy the mysql script to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/mysql -O /etc/snmp/mysql\n```\n\n2. Make the file executable\n```\nchmod +x /etc/snmp/mysql\n```\n\n3. Edit /etc/snmp/mysql to set your MySQL connection constants or declare them in /etc/snmp/mysql.cnf (new file)\n\n4. Edit your snmpd.conf file and add:\n```\nextend mysql /etc/snmp/mysql\n```\n\n5. Restart snmpd.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## NGINX\n\nNGINX is a free, open-source, high-performance HTTP server: <https://www.nginx.org/>\n\nIt's required to have the following directive in your nginx\nconfiguration responsible for the localhost server:\n```text\nlocation /nginx-status {\n    stub_status on;\n    access_log  off;\n    allow 127.0.0.1;\n    allow ::1;\n    deny  all;\n}\n```\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/nginx -O /etc/snmp/nginx\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/nginx\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend nginx /etc/snmp/nginx\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `nginx` script to `/usr/lib/check_mk_agent/local/`\n\n## NFS Server\n\nExport the NFS stats from as server.\n\n### SNMP Extend\n\n1. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add :\n```\nextend nfs-server /bin/cat /proc/net/rpc/nfsd\n```\n>find out where cat is located using : `which cat`\n\n2. reload snmpd service to activate the configuration\n\n## NTP Client\n\nA shell script that gets stats from ntp client.\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/ntp-client -O /etc/snmp/ntp-client\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/ntp-client\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend ntp-client /etc/snmp/ntp-client\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## NTP Server aka NTPD\n\nA shell script that gets stats from ntp server (ntpd).\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/ntp-server.sh -O /etc/snmp/ntp-server.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/ntp-server.sh\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend ntp-server /etc/snmp/ntp-server.sh\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Chronyd\n\nA shell script that gets the stats from chronyd and exports them with SNMP Extend.\n\n### SNMP Extend\n\n1. Download the shell script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/chrony -O /etc/snmp/chrony\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/chrony\n```\n\n3. Edit the snmpd.conf file to include the extend by adding the following line to the end of the config file:\n```\nextend chronyd /etc/snmp/chrony\n```\n\nNote: Some distributions need sudo-permissions for the script to work with SNMP Extend. See the instructions on the section SUDO for more information.\n\n4. Restart snmpd service on the host\n\nApplication should be auto-discovered and its stats presented on the Apps-page on the host. Note: Applications module needs to be enabled on the host or globally for the statistics to work as intended.\n\n## Nvidia GPU\n\n### SNMP Extend\n\n1. Copy the shell script, nvidia, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/nvidia -O /etc/snmp/nvidia\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/nvidia\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend nvidia /etc/snmp/nvidia\n```\n\n4. Restart snmpd on your host.\n\n5. Verify you have nvidia-smi installed, which it generally should be\nif you have the driver from Nvida installed.\n\nThe GPU numbering on the graphs will correspond to how the nvidia-smi\nsees them as being.\n\nFor questions about what the various values are/mean, please see the\nnvidia-smi man file under the section covering dmon.\n\n## Opensearch\\Elasticsearch\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/opensearch -O /etc/snmp/opensearch\n```\n\n2. Make it executable\n```\nchmod +x /etc/snmp/opensearch\n```\n\n3. Install the required Perl dependencies.\n```\n# FreeBSD\npkg install p5-JSON p5-libwww\n# Debian/Ubuntu\napt-get install libjson-perl libwww-perl\n# cpanm\ncpanm JSON Libwww\n```\n\n4. Update your snmpd.conf.\n```\nextend opensearch /bin/cat /var/cache/opensearch.json\n```\n\n5. Update root crontab with. This is required as it will this will\nlikely time out otherwise. Use `*/1` if you want to have the most\nrecent stats when polled or to `*/5` if you just want at exactly a 5\nminute interval.\n```\n*/5 * * * * /etc/snmp/opensearch > /var/cache/opensearch.json\n```\n\n6. Enable it or wait for the device to be re-disocvered.\n\n## Open Grid Scheduler\n\nShell script to track the OGS/GE jobs running on clusters.\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/rocks.sh -O /etc/snmp/rocks.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/rocks.sh\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend ogs /etc/snmp/rocks.sh\n```\n\n4. Restart snmpd.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Opensips\n\nScript that reports load-average/memory/open-files stats of Opensips\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/opensips-stats.sh -O /etc/snmp/opensips-stats.sh\n```\n\n2. Make the script executable:\n```\nchmod +x /etc/snmp/opensips-stats.sh\n```\n\n3. Verify it is working by running `/etc/snmp/opensips-stats.sh`\n\n4. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend opensips /etc/snmp/opensips-stats.sh\n```\n\n## OS Updates\n\nA small shell script that checks your system package manager for any\navailable updates. Supports apt-get/pacman/yum/zypper package\nmanagers.\n\nFor pacman users automatically refreshing the database, it is\nrecommended you use an alternative database location\n`--dbpath=/var/lib/pacman/checkupdate`\n\n### SNMP Extend\n\n1. Download the script onto the desired host.\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/osupdate -O /etc/snmp/osupdate\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/osupdate\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend osupdate /etc/snmp/osupdate\n```\n\n4. Restart snmpd on your host\n\n_Note_: apt-get depends on an updated package index. There are several\nways to have your system run `apt-get update` automatically. The\neasiest is to create `/etc/apt/apt.conf.d/10periodic` and pasting the\nfollowing in it: `APT::Periodic::Update-Package-Lists \"1\";`. If you\nhave apticron, cron-apt or apt-listchanges installed and configured,\nchances are that packages are already updated periodically .\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## PHP-FPM\n\n### SNMP Extend\n\n1. Copy the shell script, phpfpmsp, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/phpfpmsp -O /etc/snmp/phpfpmsp\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/phpfpmsp\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend phpfpmsp /etc/snmp/phpfpmsp\n```\n\n4. Edit /etc/snmp/phpfpmsp to include the status URL for the PHP-FPM\n   pool you are monitoring.\n\n5. Restart snmpd on your host\n\nIt is worth noting that this only monitors a single pool. If you want\nto monitor multiple pools, this won't do it.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Agent\n[Install the agent](Agent-Setup.md) on this device if it isn't already \nand copy the `phpfpmsp` script to `/usr/lib/check_mk_agent/local/`\n\n## Pi-hole\n\n### SNMP Extend\n\n1. Copy the shell script, pi-hole, to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/pi-hole -O /etc/snmp/pi-hole\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/pi-hole\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend pi-hole /etc/snmp/pi-hole\n```\n\n4. To get all data you must get your API auth token from Pi-hole\nserver and change the API_AUTH_KEY entry inside the snmp script.\n\n5. Restard snmpd.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Portactivity\n\n### SNMP Extend\n\n1. Install missing packages - Ubuntu is shown below.\n```\napt install libparse-netstat-perl\napt install libjson-perl\n```\n\n2. Copy the Perl script to the desired host (the host must be added to LibreNMS devices)\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/portactivity -O /etc/snmp/portactivity\n```\n\n3. Make the script executable\n```\nchmod +x /etc/snmp/portactivity\n```\n\n4. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend portactivity /etc/snmp/portactivity -p http,ldap,imap\n```\n>Will monitor HTTP, LDAP, and IMAP. The -p switch specifies what ports to use. This is a comma seperated list.\n>\n>These must be found in '/etc/services' or where ever NSS is set to fetch it from. If not, it will throw an error.\n>\n>If you want to JSON returned by it to be printed in a pretty format use the -P flag.\n\n5. Restart snmpd on your host.\n\nPlease note that for only TCP[46] services are supported.\n\n## Postfix\n\n### SNMP Extend\n\n1. Copy the shell script, postfix-queues, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/postfix-queues -O /etc/snmp/postfix-queues\n```\n\n2. Copy the Perl script, postfixdetailed, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/postfixdetailed -O /etc/snmp/postfixdetailed\n```\n\n3. Make both scripts executable\n```\nchmod +x /etc/snmp/postfixdetailed /etc/snmp/postfix-queues\n```\n\n4. Edit your snmpd.conf file and add:\n```\nextend mailq /etc/snmp/postfix-queues\nextend postfixdetailed /etc/snmp/postfixdetailed\n```\n\n5. Restart snmpd.\n\n6. Install pflogsumm for your OS.\n\n7. Make sure the cache file in /etc/snmp/postfixdetailed is some place\nthat snmpd can write too. This file is used for tracking changes\nbetween various values between each time it is called by snmpd. Also\nmake sure the path for pflogsumm is correct.\n\n8. Run /etc/snmp/postfixdetailed to create the initial cache file so\nyou don't end up with some crazy initial starting value. Please note\nthat each time /etc/snmp/postfixdetailed is ran, the cache file is\nupdated, so if this happens in between LibreNMS doing it then the\nvalues will be thrown off for that polling period.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n> NOTE: If using RHEL for your postfix server, qshape must be\n> installed manually as it is not officially supported. CentOs 6 rpms\n> seem to work without issues.\n\n## Postgres\n\n### SNMP Extend\n\n1. Copy the shell script, postgres, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/postgres -O /etc/snmp/postgres\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/postgres\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend postgres /etc/snmp/postgres\n```\n\n4. Restart snmpd on your host\n\n5. Install the Nagios check check_postgres.pl on your system:\n<https://github.com/bucardo/check_postgres>\n\n6. Verify the path to check_postgres.pl in /etc/snmp/postgres is\ncorrect.\n\n7. If you wish it to ignore the database postgres for totalling up the\nstats, set ignorePG to 1(the default) in /etc/snmp/postgres. If you\nare using netdata or the like, you may wish to set this or otherwise\nthat total will be very skewed on systems with light or moderate usage.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## PowerDNS\n\nAn authoritative DNS server: <https://www.powerdns.com/auth.html>\n\n### SNMP Extend\n\n1. Copy the shell script, powerdns.py, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/powerdns.py -O /etc/snmp/powerdns.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/powerdns.py\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend powerdns /etc/snmp/powerdns.py\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `powerdns` script to `/usr/lib/check_mk_agent/local/`\n\n## PowerDNS Recursor\n\nA recursive DNS server: <https://www.powerdns.com/recursor.html>\n\n### Direct\n\nThe LibreNMS polling host must be able to connect to port 8082 on the\nmonitored device. The web-server must be enabled, see the Recursor\ndocs: <https://doc.powerdns.com/md/recursor/settings/#webserver>\n\n### Variables\n\n`$config['apps']['powerdns-recursor']['api-key']` required, this is\ndefined in the Recursor config\n\n`$config['apps']['powerdns-recursor']['port']` numeric, defines the\nport to connect to PowerDNS Recursor on.  The default is 8082\n\n`$config['apps']['powerdns-recursor']['https']` true or false,\ndefaults to use http.\n\n### SNMP Extend\n\n1. Copy the shell script, powerdns-recursor, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/powerdns-recursor -O /etc/snmp/powerdns-recursor\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/powerdns-recursor\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend powerdns-recursor /etc/snmp/powerdns-recursor\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `powerdns-recursor` script to\n`/usr/lib/check_mk_agent/local/`\n\nThis script uses `rec_control get-all` to collect stats.\n\n## PowerDNS-dnsdist\n\n### SNMP Extend\n\n1. Copy the BASH script to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/powerdns-dnsdist -O /etc/snmp/powerdns-dnsdist\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/powerdns-dnsdist\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend powerdns-dnsdist /etc/snmp/powerdns-dnsdist\n```\n\n4. Restart snmpd on your host.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## PowerMon\n\nPowerMon tracks the power usage on your host and can report on both consumption\nand cost, using a python script installed on the host.\n\n[PowerMon consumption graph](../img/example-app-powermon-consumption-02.png)\n\nCurrently the script uses one of two methods to determine current power usage:\n\n* ACPI via libsensors\n\n* HP-Health (HP Proliant servers only)\n\nThe ACPI method is quite unreliable as it is usually only implemented by\nbattery-powered devices, e.g. laptops. YMMV. However, it's possible to support\nany method as long as it can return a power value, usually in Watts.\n\n> TIP: You can achieve this by adding a method and a function for that method to\n> the script. It should be called by getData() and return a dictionary.\n\nBecause the methods are unreliable for all hardware, you need to declare to the\nscript which method to use. The are several options to assist with testing, see\n`--help`.\n\n### SNMP Extend\n\n#### Initial setup\n\n1. Download the python script onto the host:\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/powermon-snmp.py -O /usr/local/bin/powermon-snmp.py\n```\n\n2. Make the script executable:\n```\nchmod +x /usr/local/bin/powermon-snmp.py\n```\n\n3. Edit the script and set the cost per kWh for your supply. You must uncomment\nthis line for the script to work:\n```\nvi /usr/local/bin/powermon-snmp.py\n#costPerkWh = 0.15\n```\n\n4. Choose you method below:\n\n    === \"Method 1. sensors\"\n\n        * Install dependencies:\n        ```\n        dnf install lm_sensors\n        pip install PySensors\n        ```\n\n        * Test the script from the command-line. For example:\n        ```\n        $ /usr/local/bin/powermon-snmp.py -m sensors -n -p\n        {\n          \"meter\": {\n            \"0\": {\n              \"reading\": 0.0\n            }\n          },\n          \"psu\": {},\n          \"supply\": {\n            \"rate\": 0.15\n          },\n          \"reading\": \"0.0\"\n        }\n        ```\n\n        If you see a reading of `0.0` it is likely this method is not supported for\n        your system. If not, continue.\n\n    === \"Method 2. hpasmcli\"\n\n        * Obtain the hp-health package for your system. Generally there are\n        three options:\n            * Standalone package from [HPE Support](https://support.hpe.com/hpsc/swd/public/detail?swItemId=MTX-c0104db95f574ae6be873e2064#tab2)\n            * From the HP Management Component Pack (MCP).\n            * Included in the [HP Service Pack for Proliant (SPP)](https://support.hpe.com/hpesc/public/docDisplay?docId=emr_na-a00026884en_us)\n\n        * If you've downloaded the standalone package, install it. For example:\n        ```\n        rpm -ivh hp-health-10.91-1878.11.rhel8.x86_64.rpm\n        ```\n\n        * Check the service is running:\n        ```\n        systemctl status hp-health\n        ```\n\n        * Test the script from the command-line. For example:\n        ```\n        $ /usr/local/bin/powermon-snmp.py -m hpasmcli -n -p\n        {\n          \"meter\": {\n            \"1\": {\n              \"reading\": 338.0\n            }\n          },\n          \"psu\": {\n            \"1\": {\n              \"present\": \"Yes\",\n              \"redundant\": \"No\",\n              \"condition\": \"Ok\",\n              \"hotplug\": \"Supported\",\n              \"reading\": 315.0\n            },\n            \"2\": {\n              \"present\": \"Yes\",\n              \"redundant\": \"No\",\n              \"condition\": \"FAILED\",\n              \"hotplug\": \"Supported\"\n            }\n          },\n          \"supply\": {\n            \"rate\": 0.224931\n          },\n          \"reading\": 338.0\n        }\n        ```\n\n        If you see a reading of `0.0` it is likely this method is not supported for\n        your system. If not, continue.\n\n    #### Finishing Up\n\n5. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add the following:\n```\nextend  powermon   /usr/local/bin/powermon-snmp.py -m hpasmcli\n```\n\n    > NOTE: Avoid using other script options in the snmpd config as the results may not be\n    > interpreted correctly by LibreNMS.\n\n6. Reload your snmpd service:\n```\nsystemctl reload snmpd\n```\n\n7. You're now ready to enable the application in LibreNMS.\n\n\n## Pwrstatd\n\nPwrstatd (commonly known as powerpanel) is an application/service available from CyberPower to monitor their PSUs over USB.  It is currently capable of reading the status of only one PSU connected via USB at a time.  The powerpanel software is available here:\nhttps://www.cyberpowersystems.com/products/software/power-panel-personal/\n\n### SNMP Extend\n\n1. Copy the python script, pwrstatd.py, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/pwrstatd.py -O /etc/snmp/pwrstatd.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/pwrstatd.py\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend pwrstatd /etc/snmp/pwrstatd.py\n```\n\n4. (Optional) Create a /etc/snmp/pwrstatd.json file and specify the path to the pwrstat executable [the default path is /sbin/pwrstat]:\n```\n{\n    \"pwrstat_cmd\": \"/sbin/pwrstat\"\n}\n```\n\n5. Restart snmpd.\n\n\n## Proxmox\n\n1. For Proxmox 4.4+ install the libpve-apiclient-perl package\n```\napt install libpve-apiclient-perl\n```\n\n2. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/proxmox -O /usr/local/bin/proxmox\n```\n\n3. Make the script executable\n```\nchmod +x /usr/local/bin/proxmox\n```\n\n4. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend proxmox /usr/local/bin/proxmox\n```\n\n5. Note: if your snmpd doesn't run as root, you might have to invoke\n   the script using sudo and modify the \"extend\" line\n\n```\nextend proxmox /usr/bin/sudo /usr/local/bin/proxmox\n```\n\nafter, edit your sudo users (usually `visudo`) and add at the bottom:\n\n```\nDebian-snmp ALL=(ALL) NOPASSWD: /usr/local/bin/proxmox\n```\n\n6. Restart snmpd on your host\n\n## Puppet Agent\n\nSNMP extend script to get your Puppet Agent data into your host.\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/puppet_agent.py -O /etc/snmp/puppet_agent.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/puppet_agent.py\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend puppet-agent /etc/snmp/puppet_agent.py\n```\n\nThe Script needs `python3-yaml` package to be installed.\n\nPer default script searches for on of this files:\n\n* /var/cache/puppet/state/last_run_summary.yaml\n* /opt/puppetlabs/puppet/cache/state/last_run_summary.yaml\n\noptionally you can add a specific summary file with creating `/etc/snmp/puppet.json`\n```\n{\n     \"agent\": {\n        \"summary_file\": \"/my/custom/path/to/summary_file\"\n     }\n}\n```\ncustom summary file has highest priority\n\n4. Restart snmpd on the host\n\n## PureFTPd\n\nSNMP extend script to monitor PureFTPd.\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/pureftpd.py -O /etc/snmp/pureftpd.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/pureftpd.py\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend pureftpd sudo /etc/snmp/pureftpd.py\n```\n\n4. Edit your sudo users (usually `visudo`) and add at the bottom:\n```\nsnmp ALL=(ALL) NOPASSWD: /etc/snmp/pureftpd.py\n```\nor the path where your pure-ftpwho is located\n\n\n5. If pure-ftpwho is not located in /usr/sbin\n\nyou will also need to create a config file, which is named\n\npureftpd.json. The file has to be located in /etc/snmp/.\n\n\n```\n{\"pureftpwho_cmd\": \"/usr/sbin/pure-ftpwho\"\n}\n```\n\n5. Restart snmpd on your host\n\n## Raspberry PI\n\nSNMP extend script to get your PI data into your host.\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/raspberry.sh -O /etc/snmp/raspberry.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/raspberry.sh\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend raspberry /usr/bin/sudo /bin/sh /etc/snmp/raspberry.sh\n```\n\n4. Edit your sudo users (usually `visudo`) and add at the bottom:\n```\nsnmp ALL=(ALL) NOPASSWD: /bin/sh /etc/snmp/raspberry.sh\n```\n\n**Note:** If you are using Raspian, the default user is\n`Debian-snmp`. Change `snmp` above to `Debian-snmp`. You can verify\nthe user snmpd is using with `ps aux | grep snmpd`\n\n5. Restart snmpd on PI host\n\n## Raspberry Pi GPIO Monitor\n\nSNMP extend script to monitor your IO pins or sensor modules connected to your GPIO header.\n\n### SNMP Extend\n\n1: Make sure you have wiringpi installed on your Raspberry Pi. In Debian-based systems for example you can achieve this by issuing:\n\n```\napt-get install wiringpi\n```\n\n2: Download the script to your Raspberry Pi. `wget\n   https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/rpigpiomonitor.php\n   -O /etc/snmp/rpigpiomonitor.php`\n\n3: (optional) Download the example configuration to your Raspberry Pi. `wget\n   https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/rpigpiomonitor.ini\n   -O /etc/snmp/rpigpiomonitor.ini`\n\n4: Make the script executable: `chmod +x /etc/snmp/rpigpiomonitor.php`\n\n5: Create or edit your rpigpiomonitor.ini file according to your needs.\n\n6: Check your configuration with `rpigpiomonitor.php -validate`\n\n7: Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n\n```\nextend rpigpiomonitor /etc/snmp/rpigpiomonitor.php\n```\n\n8: Restart snmpd on your Raspberry Pi and, if your Raspberry Pi is already present in LibreNMS, perform a manual rediscover.\n\n## Redis\n\nScript to monitor your Redis Server\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/redis.py -O /etc/snmp/redis.py\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/redis.py\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend redis /etc/snmp/redis.py\n```\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `redis` script to `/usr/lib/check_mk_agent/local/`\n\n## RRDCached\n\nInstall/Setup:\nFor Install/Setup Local Librenms RRDCached: Please see [RRDCached](RRDCached.md)\n\nWill collect stats by:\n1. Connecting directly to the associated device on port 42217\n2. Monitor thru snmp with SNMP extend, as outlined below\n3. Connecting to the rrdcached server specified by the `rrdcached` setting\n\nSNMP extend script to monitor your (remote) RRDCached via snmp\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/agent-local/rrdcached -O /etc/snmp/rrdcached\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/rrdcached\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/snmpd.conf`) and add:\n```\nextend rrdcached /etc/snmp/rrdcached\n```\n\n## SDFS info\n\nA small shell script that exportfs SDFS volume info.\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/sdfsinfo -O /etc/snmp/sdfsinfo\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/sdfsinfo\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend sdfsinfo /etc/snmp/sdfsinfo\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Seafile\n\nSNMP extend script to monitor your Seafile Server\n\n### SNMP Extend\n\n1. Copy the Python script, seafile.py, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/seafile.py -O /etc/snmp/seafile.py\n```\n\nAlso you have to install the requests Package for Python3.\nUnder Ubuntu/Debian just run `apt install python3-requests`\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/seafile.py\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend seafile /etc/snmp/seafile.py\n```\n\n4. You will also need to create the config file, which is named\nseafile.json . The script has to be located at /etc/snmp/.\n```\n{\"url\": \"https://seafile.mydomain.org\",\n \"username\": \"some_admin_login@mail.address\",\n \"password\": \"password\",\n \"account_identifier\": \"name\"\n \"hide_monitoring_account\": true\n}\n```\n\nThe variables are as below.\n\n```\nurl = Url how to get access to Seafile Server\nusername = Login to Seafile Server.\n           It is important that used Login has admin privileges.\n           Otherwise most API calls will be denied.\npassword = Password to the configured login.\naccount_identifier = Defines how user accounts are listed in RRD Graph.\n                     Options are: name, email\nhide_monitoring_account = With this Boolean you can hide the Account which you\n                          use to access Seafile API\n```\n\n**Note:**It is recommended to use a dedicated Administrator account for monitoring.\n\n## SMART\n\n### SNMP Extend\n\n1. Copy the Perl script, smart, to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/smart -O /etc/snmp/smart\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/smart\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend smart /etc/snmp/smart\n```\n\n4. You will also need to create the config file, which defaults to the same path as the script,\nbut with .config appended. So if the script is located at /etc/snmp/smart, the config file\nwill be `/etc/snmp/smart.config`. Alternatively you can also specific a config via `-c`.\n\nAnything starting with a # is comment. The format for variables is $variable=$value. Empty\nlines are ignored. Spaces and tabes at either the start or end of a line are ignored. Any\nline with out a matched variable or # are treated as a disk.\n\n```\n#This is a comment\ncache=/var/cache/smart\nsmartctl=/usr/bin/env smartctl\nuseSN=1\nada0\nada1\nda5 /dev/da5 -d sat\ntwl0,0 /dev/twl0 -d 3ware,0\ntwl0,1 /dev/twl0 -d 3ware,1\ntwl0,2 /dev/twl0 -d 3ware,2\n```\n\nThe variables are as below.\n\n```\ncache = The path to the cache file to use. Default: /var/cache/smart\nsmartctl = The path to use for smartctl. Default: /usr/bin/env smartctl\nuseSN = If set to 1, it will use the disks SN for reporting instead of the device name.\n        1 is the default. 0 will use the device name.\n```\n\nA disk line is can be as simple as just a disk name under /dev/. Such as in the config above\nThe line \"ada0\" would resolve to \"/dev/ada0\" and would be called with no special argument. If\na line has a space in it, everything before the space is treated as the disk name and is what\nused for reporting and everything after that is used as the argument to be passed to smartctl.\n\nIf you want to guess at the configuration, call it with -g and it will print out what it thinks\nit should be.\n\n5. Restart snmpd on your host\n\nIf you have a large number of more than one or two disks on a system,\nyou should consider adding this to cron. Also make sure the cache file\nis some place it can be written to.\n\n```\n */3 * * * * /etc/snmp/smart -u\n```\n\n6. If your snmp agent runs as user \"snmp\", edit your sudo users\n   (usually `visudo`) and add at the bottom:\n```\nsnmp ALL=(ALL) NOPASSWD: /etc/snmp/smart, /usr/bin/env smartctl\n```\n\nand modify your snmpd.conf file accordingly:\n\n```\nextend smart /usr/bin/sudo /etc/snmp/smart\n```\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\nIf you set useSN to 1, it is worth noting that you will loose\nhistory(not able to access it from the web interface) for that device\neach time you change it. You will also need to run camcontrol or the\nlike on said server to figure out what device actually corresponds\nwith that serial number.\n\nAlso if the system you are using uses non-static device naming based\non bus information, it may be worthwhile just using the SN as the\ndevice ID is going to be irrelevant in that case.\n\n## Squid\n\n### SNMP Proxy\n\n1. Enable SNMP for Squid like below, if you have not already, and restart it.\n```\nacl snmppublic snmp_community public\nsnmp_port 3401\nsnmp_access allow snmppublic localhost\nsnmp_access deny all\n```\n\n2. Restart squid on your host.\n\n3. Edit your snmpd.conf file and add, making sure you have the same\ncommunity, host, and port as above:\n```\nproxy -v 2c -Cc -c public 127.0.0.1.3401 1.3.6.1.4.1.3495\n```\n\nFor more advanced information on Squid and SNMP or setting up proxying\nfor net-snmp, please see the links below.\n\n<http://wiki.squid-cache.org/Features/Snmp>\n<http://www.net-snmp.org/wiki/index.php/Snmpd_proxy>\n\n## Supervisord\n\nIt shows you the totals per status and also the uptime per process. That way you can add alerts for instance when there are process in state `FATAL`.\n\n### SNMP Extend\n\n1. Copy the python script to the desired host.\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/supervisord.py -O /etc/snmp/supervisord.py\n```\nNotice that this will use the default unix socket path. Modify the `unix_socket_path` variable in the script if your path differs from the default.\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/supervisord.py\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend supervisord /etc/snmp/supervisord.py\n```\n\n4. Restart snmpd on your host\n```\nsystemctl restart snmpd\n```\n\n## Sagan\n\nFor metrics the stats are migrated as below from the stats JSON.\n\n`f_drop_percent` and `drop_percent` are computed based on the found data.\n\n| Instance Key       | Stats JSON Key                     |\n|--------------------|------------------------------------|\n| uptime             | .stats.uptime                      |\n| total              | .stats.captured.total              |\n| drop               | .stats.captured.drop               |\n| ignore             | .stats.captured.ignore             |\n| threshold          | .stats.captured.theshold           |\n| after              | .stats.captured.after              |\n| match              | .stats.captured.match              |\n| bytes              | .stats.captured.bytes_total        |\n| bytes_ignored      | .stats.captured.bytes_ignored      |\n| max_bytes_log_line | .stats.captured.max_bytes_log_line |\n| eps                | .stats.captured.eps                |\n| f_total            | .stats.flow.total                  |\n| f_dropped          | .stats.flow.dropped                |\n\nThose keys are appended with the name of the instance running with `_`\nbetween the instance name and instance metric key. So `uptime` for\n`ids` would be `ids_uptime`.\n\nThe default is named 'ids' unless otherwise specified via the extend.\n\nThere is a special instance name of `.total` which is the total of all\nthe instances. So if you want the total eps, the metric would be\n`.total_eps`. Also worth noting that the alert value is the highest\none found among all the instances.\n\n### SNMP Extend\n\n1. Install the extend.\n```\ncpanm Sagan::Monitoring\n```\n\n2. Setup cron. Below is a example.\n```\n*/5 * * * * /usr/local/bin/sagan_stat_check > /dev/null\n```\n\n3. Configure snmpd.conf\n```\nextend sagan-stats /usr/bin/env PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin sagan_stat_check -c\n```\n\n4. Restart snmpd on your system.\n\nYou will want to make sure that sagan is setup to with the values set\nbelow for stats-json processor, for a single instance setup..\n\n```\nenabled: yes\ntime: 300\nsubtract_old_values: true\nfilename: \"$LOG_PATH/stats.json\"\n```\n\nAny configuration of sagan_stat_check should be done in the cron\nsetup. If the default does not work, check the docs for it at\n[MetaCPAN for\nsagan_stat_check](https://metacpan.org/dist/Sagan-Monitoring/view/bin/sagan_stat_check)\n\n\n## Suricata\n\n### SNMP Extend\n\n1. Install the extend.\n```\ncpanm Suricata::Monitoring\n```\n\n2. Setup cron. Below is a example.\n```\n*/5 * * * * /usr/local/bin/suricata_stat_check > /dev/null\n```\n\n3. Configure snmpd.conf\n```\nextend suricata-stats /usr/bin/env PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin suricata_stat_check -c\n```\n\n4. Restart snmpd on your system.\n\nYou will want to make sure Suricata is set to output the stats\nto the eve file once a minute. This will help make sure that\nit won't be to far back in the file and will make sure it is\nrecent when the cronjob runs.\n\nAny configuration of suricata_stat_check should be done in the cron\nsetup. If the default does not work, check the docs for it at\n[MetaCPAN for\nsuricata_stat_check](https://metacpan.org/dist/Suricata-Monitoring/view/bin/suricata_stat_check)\n\n## TinyDNS aka djbdns\n\n### Agent\n\n[Install the agent](Agent-Setup.md) on this device if it isn't already\nand copy the `tinydns` script to `/usr/lib/check_mk_agent/local/`\n\n_Note_: We assume that you use DJB's\n[Daemontools](http://cr.yp.to/daemontools.html) to start/stop\ntinydns. And that your tinydns instance is located in `/service/dns`,\nadjust this path if necessary.\n\n1. Replace your _log_'s `run` file, typically located in\n   `/service/dns/log/run` with:\n```bash\n#!/bin/sh\nexec setuidgid dnslog tinystats ./main/tinystats/ multilog t n3 s250000 ./main/\n```\n\n2. Create tinystats directory and chown:\n```bash\nmkdir /service/dns/log/main/tinystats\nchown dnslog:nofiles /service/dns/log/main/tinystats\n```\n\n3. Restart TinyDNS and Daemontools: `/etc/init.d/svscan restart`\n   _Note_: Some say `svc -t /service/dns` is enough, on my install\n   (Gentoo) it doesn't rehook the logging and I'm forced to restart it\n   entirely.\n\n## Unbound\n\nUnbound configuration:\n\n```text\n# Enable extended statistics.\nserver:\n        extended-statistics: yes\n        statistics-cumulative: yes\n\nremote-control:\n        control-enable: yes\n        control-interface: 127.0.0.1\n\n```\n\nRestart your unbound after changing the configuration, verify it is\nworking by running `unbound-control stats`.\n\n### Option 1. SNMP Extend (Preferred and easiest method)\n\n1. Copy the shell script, unbound, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/unbound -O /etc/snmp/unbound\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/unbound\n```\n\n3. Edit your snmpd.conf file and add:\n```\nextend unbound /usr/bin/sudo /etc/snmp/unbound\n```\n\n4. Restart snmpd.\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n### Option 2. Agent\n\n[Install the agent](#agent-setup) on this device if it isn't already\nand copy the `unbound.sh` script to `/usr/lib/check_mk_agent/local/`\n\n## UPS-nut\n\nA small shell script that exports nut ups status.\n\n### SNMP Extend\n\n1. Copy the shell script, unbound, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/ups-nut.sh -O /etc/snmp/ups-nut.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/ups-nut.sh\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend ups-nut /etc/snmp/ups-nut.sh\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\nOptionally if you have multiple UPS or your UPS is not named APCUPS you can specify its name as an argument into `/etc/snmp/ups-nut.sh`\n```\nextend ups-nut /etc/snmp/ups-nut.sh ups1\nextend ups-nut /etc/snmp/ups-nut.sh ups2\n```\n\n## UPS-apcups\n\nA small shell script that exports apcacess ups status.\n\n### SNMP Extend\n\n1. Copy the shell script, unbound, to the desired host\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/ups-apcups -O /etc/snmp/ups-apcups\n```\n   \n2. Make the script executable\n```\nchmod +x /etc/snmp/ups-apcups\n```\n\n3. Edit your snmpd.conf file (usually /etc/snmp/snmpd.conf) and add:\n```\nextend ups-apcups /etc/snmp/ups-apcups\n```\n\nIf 'apcaccess' is not in the PATH enviromental variable snmpd is\nusing, you may need to do something like below.\n\n```\nextend ups-apcups/usr/bin/env PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin /etc/snmp/ups-apcups\n```\n\n4. Restart snmpd on your host\n\nThe application should be auto-discovered as described at the top of\nthe page. If it is not, please follow the steps set out under `SNMP\nExtend` heading top of page.\n\n## Voip-monitor\n\nShell script that reports cpu-load/memory/open-files files stats of Voip Monitor\n\n### SNMP Extend\n\n1. Download the script onto the desired host\n```\nwget https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/voipmon-stats.sh -O /etc/snmp/voipmon-stats.sh\n```\n\n2. Make the script executable\n```\nchmod +x /etc/snmp/voipmon-stats.sh\n```\n\n3. Edit your snmpd.conf file (usually `/etc/snmp/voipmon-stats.sh`) and add:\n```\nextend voipmon /etc/snmp/voipmon-stats.sh\n```\n\n## ZFS\n\n### SNMP Extend\n\n`zfs-linux` requires python3 >=python3.5.\n\nThe installation steps are:\n\n1. Copy the polling script to the desired host (the host must be added\n   to LibreNMS devices)\n2. Make the script executable\n3. Edit snmpd.conf to include ZFS stats\n\n#### FreeBSD\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/zfs-freebsd -O /etc/snmp/zfs-freebsd\nchmod +x /etc/snmp/zfs-freebsd\necho \"extend zfs /etc/snmp/zfs-freebsd\" >> /etc/snmp/snmpd.conf\n```\n\n#### Linux\n```\nwget https://github.com/librenms/librenms-agent/raw/master/snmp/zfs-linux -O /etc/snmp/zfs-linux\nchmod +x /etc/snmp/zfs-linux\necho \"extend zfs /usr/bin/sudo /etc/snmp/zfs-linux\" >> /etc/snmp/snmpd.conf\n```\n\nEdit your sudo users (usually `visudo`) and add at the bottom:\n```\nsnmp ALL=(ALL) NOPASSWD: /etc/snmp/zfs-linux\n```\n\nNow restart snmpd and you're all set.\n", "<?php\n\nuse LibreNMS\\Exceptions\\JsonAppException;\nuse LibreNMS\\RRD\\RrdDefinition;\n\n$name = 'memcached';\n\nif (! empty($agent_data['app']['memcached'])) {\n    $data = $agent_data['app']['memcached'];\n} else {\n    try {\n        $data = json_app_get($device, $name, '1.1')['data'];\n        $data = $data['data'][$app->app_instance] ?? reset($data['data']);\n    } catch (JsonAppException $e) {\n        echo PHP_EOL . $name . ':' . $e->getCode() . ':' . $e->getMessage() . PHP_EOL;\n        update_application($app, $e->getCode() . ':' . $e->getMessage(), []); // Set empty metrics and error message\n\n        return;\n    }\n}\necho ' memcached(' . $app->app_instance . ')';\n$data = $data[$app->app_instance] ?? reset($data);  // specified instance or just the first one\n\n$rrd_name = ['app', $name, $app->app_id];\n$rrd_def = RrdDefinition::make()\n    ->addDataset('uptime', 'GAUGE', 0, 125000000000)\n    ->addDataset('threads', 'GAUGE', 0, 125000000000)\n    ->addDataset('rusage_user_ms', 'DERIVE', 0, 125000000000)\n    ->addDataset('rusage_system_ms', 'DERIVE', 0, 125000000000)\n    ->addDataset('curr_items', 'GAUGE', 0, 125000000000)\n    ->addDataset('total_items', 'DERIVE', 0, 125000000000)\n    ->addDataset('limit_maxbytes', 'GAUGE', 0, 125000000000)\n    ->addDataset('curr_connections', 'GAUGE', 0, 125000000000)\n    ->addDataset('total_connections', 'DERIVE', 0, 125000000000)\n    ->addDataset('conn_structures', 'GAUGE', 0, 125000000000)\n    ->addDataset('bytes', 'GAUGE', 0, 125000000000)\n    ->addDataset('cmd_get', 'DERIVE', 0, 125000000000)\n    ->addDataset('cmd_set', 'DERIVE', 0, 125000000000)\n    ->addDataset('get_hits', 'DERIVE', 0, 125000000000)\n    ->addDataset('get_misses', 'DERIVE', 0, 125000000000)\n    ->addDataset('evictions', 'DERIVE', 0, 125000000000)\n    ->addDataset('bytes_read', 'DERIVE', 0, 125000000000)\n    ->addDataset('bytes_written', 'DERIVE', 0, 125000000000);\n\n$fields = [\n    'uptime'            => $data['uptime'] ?? null,\n    'threads'           => $data['threads'] ?? null,\n    'rusage_user_ms'    => $data['rusage_user_microseconds'] ?? null,\n    'rusage_system_ms'  => $data['rusage_system_microseconds'] ?? null,\n    'curr_items'        => $data['curr_items'] ?? null,\n    'total_items'       => $data['total_items'] ?? null,\n    'limit_maxbytes'    => $data['limit_maxbytes'] ?? null,\n    'curr_connections'  => $data['curr_connections'] ?? null,\n    'total_connections' => $data['total_connections'] ?? null,\n    'conn_structures'   => $data['connection_structures'] ?? null,\n    'bytes'             => $data['bytes'] ?? null,\n    'cmd_get'           => $data['cmd_get'] ?? null,\n    'cmd_set'           => $data['cmd_set'] ?? null,\n    'get_hits'          => $data['get_hits'] ?? null,\n    'get_misses'        => $data['get_misses'] ?? null,\n    'evictions'         => $data['evictions'] ?? null,\n    'bytes_read'        => $data['bytes_read'] ?? null,\n    'bytes_written'     => $data['bytes_written'] ?? null,\n];\n\n$app_id = $app->app_id;\n$tags = compact('name', 'app_id', 'rrd_name', 'rrd_def');\ndata_update($device, 'app', $tags, $fields);\nupdate_application($app, $result, $fields);\n", "<?php\n\nuse App\\Models\\Device;\nuse LibreNMS\\RRD\\RrdDefinition;\n\nif ($device['os_group'] == 'unix' || $device['os'] == 'windows') {\n    echo \\LibreNMS\\Config::get('project_name') . ' UNIX Agent: ';\n\n    $agent_port = get_dev_attrib($device, 'override_Unixagent_port');\n    if (empty($agent_port)) {\n        $agent_port = \\LibreNMS\\Config::get('unix-agent.port');\n    }\n\n    $agent_start = microtime(true);\n    $agent = null;\n    try {\n        $poller_target = \\LibreNMS\\Util\\Rewrite::addIpv6Brackets(Device::pollerTarget($device['hostname']));\n        $agent = @fsockopen($poller_target, $agent_port, $errno, $errstr, \\LibreNMS\\Config::get('unix-agent.connection-timeout'));\n    } catch (ErrorException $e) {\n        echo $e->getMessage() . PHP_EOL; // usually connection timed out\n\n        return;\n    }\n\n    if (! $agent) {\n        echo 'Connection to UNIX agent failed on port ' . $agent_port . '.';\n    } else {\n        // Set stream timeout (for timeouts during agent  fetch\n        stream_set_timeout($agent, \\LibreNMS\\Config::get('unix-agent.read-timeout'));\n        $agentinfo = stream_get_meta_data($agent);\n\n        // fetch data while not eof and not timed-out\n        while ((! feof($agent)) && (! $agentinfo['timed_out'])) {\n            $agent_raw .= fgets($agent, 128);\n            $agentinfo = stream_get_meta_data($agent);\n        }\n\n        if ($agentinfo['timed_out']) {\n            echo 'Connection to UNIX agent timed out during fetch on port ' . $agent_port . '.';\n        }\n    }\n\n    $agent_end = microtime(true);\n    $agent_time = round(($agent_end - $agent_start) * 1000);\n\n    if (! empty($agent_raw)) {\n        echo 'execution time: ' . $agent_time . 'ms';\n\n        $tags = [\n            'rrd_def' => RrdDefinition::make()->addDataset('time', 'GAUGE', 0),\n        ];\n        $fields = [\n            'time' => $agent_time,\n        ];\n        data_update($device, 'agent', $tags, $fields);\n\n        $os->enableGraph('agent');\n\n        $agentapps = [\n            'apache',\n            'bind',\n            'ceph',\n            'mysql',\n            'nginx',\n            'php-fpm',\n            'powerdns',\n            'powerdns-recursor',\n            'proxmox',\n            'redis',\n            'rrdcached',\n            'tinydns',\n            'gpsd',\n        ];\n\n        global $agent_data;\n        $agent_data = [];\n        foreach (explode('<<<', $agent_raw) as $section) {\n            [$section, $data] = explode('>>>', $section);\n            [$sa, $sb] = explode('-', $section, 2);\n\n            if (in_array($section, $agentapps)) {\n                $agent_data['app'][$section] = trim($data);\n            }\n\n            if (! empty($sa) && ! empty($sb)) {\n                $agent_data[$sa][$sb] = trim($data);\n            } else {\n                $agent_data[$section] = trim($data);\n            }\n        }//end foreach\n\n        d_echo($agent_data);\n\n        include 'unix-agent/packages.inc.php';\n        include 'unix-agent/munin-plugins.inc.php';\n\n        foreach (array_keys($agent_data) as $key) {\n            if (file_exists(\"includes/polling/unix-agent/$key.inc.php\")) {\n                d_echo(\"Including: unix-agent/$key.inc.php\");\n\n                include \"unix-agent/$key.inc.php\";\n            }\n        }\n\n        // Unix Processes\n        if (! empty($agent_data['ps'])) {\n            echo 'Processes: ';\n            dbDelete('processes', 'device_id = ?', [$device['device_id']]);\n            $data = [];\n            foreach (explode(\"\\n\", $agent_data['ps']) as $process) {\n                $process = preg_replace('/\\((.*),([0-9]*),([0-9]*),([0-9\\:\\.\\-]*),([0-9]*)\\)\\ (.*)/', '\\\\1|\\\\2|\\\\3|\\\\4|\\\\5|\\\\6', $process);\n                [$user, $vsz, $rss, $cputime, $pid, $command] = explode('|', $process, 6);\n                if (! empty($command)) {\n                    $data[] = ['device_id' => $device['device_id'], 'pid' => $pid, 'user' => $user, 'vsz' => $vsz, 'rss' => $rss, 'cputime' => $cputime, 'command' => $command];\n                }\n            }\n            if (count($data) > 0) {\n                dbBulkInsert($data, 'processes');\n            }\n            echo \"\\n\";\n        }\n\n        // Windows Processes\n        if (! empty($agent_data['ps:sep(9)'])) {\n            echo 'Processes: ';\n            dbDelete('processes', 'device_id = ?', [$device['device_id']]);\n            $data = [];\n            foreach (explode(\"\\n\", $agent_data['ps:sep(9)']) as $process) {\n                $process = preg_replace('/\\(([^,;]+),([0-9]*),([0-9]*),([0-9]*),([0-9]*),([0-9]*),([0-9]*),([0-9]*),([0-9]*),([0-9]*)?,?([0-9]*)\\)(.*)/', '\\\\1|\\\\2|\\\\3|\\\\4|\\\\5|\\\\6|\\\\7|\\\\8|\\\\9|\\\\10|\\\\11|\\\\12', $process);\n                [$user, $VirtualSize, $WorkingSetSize, $zero, $processId, $PageFileUsage, $UserModeTime, $KernelModeTime, $HandleCount, $ThreadCount, $uptime, $process_name] = explode('|', $process, 12);\n                if (! empty($process_name)) {\n                    $cputime = ($UserModeTime + $KernelModeTime) / 10000000;\n                    $days = floor($cputime / 86400);\n                    $hours = str_pad(floor(($cputime / 3600) % 24), 2, '0', STR_PAD_LEFT);\n                    $minutes = str_pad(floor(($cputime / 60) % 60), 2, '0', STR_PAD_LEFT);\n                    $seconds = str_pad(($cputime % 60), 2, '0', STR_PAD_LEFT);\n                    $cputime = ($days > 0 ? \"$days-\" : '') . \"$hours:$minutes:$seconds\";\n                    $data[] = ['device_id' => $device['device_id'], 'pid' => $processId, 'user' => $user, 'vsz' => $PageFileUsage + $WorkingSetSize, 'rss' => $WorkingSetSize, 'cputime' => $cputime, 'command' => $process_name];\n                }\n            }\n            if (count($data) > 0) {\n                dbBulkInsert($data, 'processes');\n            }\n            echo \"\\n\";\n        }\n\n        foreach (array_keys($agent_data['app'] ?? []) as $key) {\n            if (file_exists(\"includes/polling/applications/$key.inc.php\")) {\n                d_echo(\"Enabling $key for \" . $device['hostname'] . \" if not yet enabled\\n\");\n\n                if (in_array($key, $agentapps)) {\n                    if (dbFetchCell('SELECT COUNT(*) FROM `applications` WHERE `device_id` = ? AND `app_type` = ?', [$device['device_id'], $key]) == '0') {\n                        echo \"Found new application '$key'\\n\";\n                        dbInsert(['device_id' => $device['device_id'], 'app_type' => $key, 'app_status' => '', 'app_instance' => ''], 'applications');\n                    }\n                }\n            }\n        }\n\n        // memcached\n        if (! empty($agent_data['app']['memcached'])) {\n            $agent_data['app']['memcached'] = json_decode($agent_data['app']['memcached'], true);\n            foreach ($agent_data['app']['memcached'] as $memcached_host => $memcached_data) {\n                if (dbFetchCell('SELECT COUNT(*) FROM `applications` WHERE `device_id` = ? AND `app_type` = ? AND `app_instance` = ?', [$device['device_id'], 'memcached', $memcached_host]) == '0') {\n                    echo \"Found new application 'Memcached' $memcached_host\\n\";\n                    dbInsert(['device_id' => $device['device_id'], 'app_type' => 'memcached', 'app_status' => '', 'app_instance' => $memcached_host], 'applications');\n                }\n            }\n        }\n\n        // DRBD\n        if (! empty($agent_data['drbd'])) {\n            $agent_data['app']['drbd'] = [];\n            foreach (explode(\"\\n\", $agent_data['drbd']) as $drbd_entry) {\n                [$drbd_dev, $drbd_data] = explode(':', $drbd_entry);\n                if (preg_match('/^drbd/', $drbd_dev)) {\n                    $agent_data['app']['drbd'][$drbd_dev] = $drbd_data;\n                    if (dbFetchCell('SELECT COUNT(*) FROM `applications` WHERE `device_id` = ? AND `app_type` = ? AND `app_instance` = ?', [$device['device_id'], 'drbd', $drbd_dev]) == '0') {\n                        echo \"Found new application 'DRBd' $drbd_dev\\n\";\n                        dbInsert(['device_id' => $device['device_id'], 'app_type' => 'drbd', 'app_status' => '', 'app_instance' => $drbd_dev], 'applications');\n                    }\n                }\n            }\n        }\n    }//end if\n\n    // Use agent DMI data if available\n    if (isset($agent_data['dmi'])) {\n        if ($agent_data['dmi']['system-product-name']) {\n            $hardware = ($agent_data['dmi']['system-manufacturer'] ? $agent_data['dmi']['system-manufacturer'] . ' ' : '') . $agent_data['dmi']['system-product-name'];\n\n            // Clean up Generic hardware descriptions\n            DeviceCache::getPrimary()->hardware = rewrite_generic_hardware($hardware);\n            unset($hardware);\n        }\n\n        if ($agent_data['dmi']['system-serial-number']) {\n            DeviceCache::getPrimary()->serial = $agent_data['dmi']['system-serial-number'];\n        }\n        DeviceCache::getPrimary()->save();\n    }\n\n    if (! empty($agent_sensors)) {\n        echo 'Sensors: ';\n        check_valid_sensors($device, 'temperature', $valid['sensor'], 'agent');\n        d_echo($agent_sensors);\n        if (count($agent_sensors) > 0) {\n            record_sensor_data($device, $agent_sensors);\n        }\n        echo \"\\n\";\n    }\n\n    echo \"\\n\";\n}//end if\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n<channel>\n <title>LibreNMS Notifications</title>\n <description>RSS feed for notifications to LibreNMS users</description>\n <link>https://www.librenms.org/</link>\n <lastBuildDate>Mon, 02 May 2016 20:00:00 +0000</lastBuildDate>\n <pubDate>Mon, 02 Mar 2016 20:00:00 +0000</pubDate>\n <ttl>1800</ttl>\n <item>\n  <title>Hello World!</title>\n  <description>This is the first notification. We will post these whenever an upcoming major change is about to happen.</description>\n  <pubDate>Tue, 19 Jan 2016 12:00:00 +0000</pubDate>\n </item>\n <item>\n  <title>Cisco syslog parsing changes</title>\n  <description>We have overhauled the Cisco syslog parsing.  Please monitor your syslog entries from Cisco IOS, IOSXR, and CatOS devices.  If you notice any issues please open a new issue on GitHub and include the original syslog message.</description>\n  <pubDate>Thu, 03 Mar 2016 12:00:00 +0000</pubDate>\n </item>\n <item>\n   <title>Billing Data Changes</title>\n   <description>We have updated the method for storing billing data, removing a lot of information stored in\n   the database which was not used.  Please check that your billing data is updating as expected, and\n   if you notice any problems open an issue on GitHub.</description>\n   <pubDate>Mon, 07 Mar 2016 12:00:00 +0000</pubDate>\n </item>\n <item>\n   <title>Introduction of default purge interval or alert history</title>\n   <description>We have introduced a purge setting for alert history which is set to 365 days as default. If you would like to update this then please\n   set $config['alert_log_purge'] to a custom value (set in days).</description>\n   <pubDate>Mon, 02 May 2016 20:00:00 +0000</pubDate>\n </item>\n <item>\n   <title>The Alerts Menu has moved</title>\n   <description>The Alerts menu has been relocated to a top level menu on the far right.  To make room for this, Plugins have been moved\n   to the overview menu.</description>\n   <pubDate>Mon, 12 Sep 2016 20:00:00 +0000</pubDate>\n </item>\n <item>\n   <title>Wireless Section in Beta</title>\n   <description>The new wireless section is under development. Please visit our community to discuss these changes and help improve LibreNMS.\n   https://t.libren.ms/5fglp</description>\n   <pubDate>Mon, 1 May 2017 20:00:00 +0000</pubDate>\n </item>\n <item>\n   <title>Update to alerting to normal users</title>\n   <description>We have released an update to fix normal users receiving alerts with no ability to turn this off. An option is now available within the General alert settings section to\n   enable this. Please note that the default is off to match with the other default contact settings. If you expect normal users to receive alerts then you should enable this new option.</description>\n   <pubDate>Mon, 15 May 2017 23:00:00 +0000</pubDate>\n </item>\n  <item>\n    <title>Legacy Alert Templates and Transports removed</title>\n    <description>As described previously, Legacy Alert Templates and Transports have been removed.  You can find more info here: https://community.librenms.org/t/deprecation-notice-alerting-legacy-transports-and-templates/5915</description>\n    <pubDate>Fri, 15 Feb 2017 23:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>Cisco Temperature Sensor Threshold Values Stored as High Limits</title>\n    <description>During discovery, some temperature sensors discovered on Cisco devices had their highest temperature value stored as warning high limit. For new discovered devices, this value is now stored as high limit.</description>\n    <pubDate>Sun, 17 Mar 2019 21:00:00 +0100</pubDate>\n  </item>\n   <item>\n    <title>LibreNMS Python Dispatcher Service V2 (breaking change)</title>\n    <description>Version two of the LibreNMS python dispatcher service is merged. This code now requires Redis 5.x and redis-py 3.x to operate (if using distributed polling). If you are using the dispatcher service with Redis and have not updated, polling will stop functioning.</description>\n    <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>RutOS 2xx pinState renamed</title>\n    <description>RutOS 2xx pinState renamed to rutos2xx_pinState.  Update any alert rules you may have.</description>\n    <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>Cisco Wireless Controller classified as Wireless</title>\n    <description>Cisco WLC is now classified as type \"Wireless\" instead of \"Network\".  Update any alert rules you may have.</description>\n    <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>nobulk is now called snmp_bulk</title>\n    <description>The config option \"nobulk\" is now called \"snmp_bulk\" to align better with other options.  Update any local configs you might have.  See https://github.com/librenms/librenms/pull/13098 for more information</description>\n    <pubDate>Wed, 01 Sep 2021 18:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>Mikrotik routeros wireless changes</title>\n    <description>Improvements to routeros wireless polling will lose historical data for 60GHz rate, frequency, and distance wireless sensors. See https://github.com/librenms/librenms/pull/12976 for more information.</description>\n    <pubDate>Wed, 19 Oct 2021 18:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>ADSL discovery and polling moved to a new module</title>\n    <description>Adsl statistics are now discovered and polled in a new module. Vdsl stats were also added. `lnms config:set enable_ports_adsl true`is not supported anymore. See https://github.com/librenms/librenms/pull/14207 for more information.</description>\n    <pubDate>Wed, 7 Sept 2022 18:00:00 +0000</pubDate>\n  </item>\n  <item>\n    <title>Memcached application compatibility break</title>\n    <description>Due to a security vulnerability, you must upgrade your memcached application scripts to the latest version. (1.1)</description>\n    <pubDate>Fri, 10 Oct 2022 18:00:00 +0000</pubDate>\n  </item>\n</channel>\n</rss>\n"], "filenames": ["doc/Extensions/Applications.md", "includes/polling/applications/memcached.inc.php", "includes/polling/unix-agent.inc.php", "misc/notifications.rss"], "buggy_code_start_loc": [912, 2, 162, 90], "buggy_code_end_loc": [916, 18, 163, 90], "fixing_code_start_loc": [912, 3, 162, 91], "fixing_code_end_loc": [916, 23, 163, 96], "type": "CWE-502", "message": "Deserialization of Untrusted Data in GitHub repository librenms/librenms prior to 22.10.0.", "other": {"cve": {"id": "CVE-2022-3525", "sourceIdentifier": "security@huntr.dev", "published": "2022-11-20T05:15:11.393", "lastModified": "2022-11-21T12:48:31.207", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Deserialization of Untrusted Data in GitHub repository librenms/librenms prior to 22.10.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.2, "impactScore": 6.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librenms:librenms:*:*:*:*:*:*:*:*", "versionEndExcluding": "22.10.0", "matchCriteriaId": "99D1C2AF-9BBB-4F7D-9FC3-4A645F7C284D"}]}]}], "references": [{"url": "https://github.com/librenms/librenms/commit/ae3925b09ad3c5d0f7a9d5a26ae2f2f778834948", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/ed048e8d-87af-440a-a91f-be1e65a40330", "source": "security@huntr.dev", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/librenms/librenms/commit/ae3925b09ad3c5d0f7a9d5a26ae2f2f778834948"}}